emacs,3e68vn,fxbois,2,Wed Jul 22 07:24:00 2015 UTC,"good work, thanks!"
emacs,3e5kha,eric-plutono,2,Wed Jul 22 03:11:22 2015 UTC,"Thanks for posting this! Funny enough, I just today created https://github.com/kostajh/emacs-and-php with the eventual goal of creating a curated list of PHP tools for Emacs along with a guide for configuring them. (nothing in that repo yet, btw)"
emacs,3e5kha,kostajh,1 point,Wed Jul 22 03:23:49 2015 UTC,"https://github.com/kostajh/emacs-and-php   Great idea :)  I'm the co-maintainer of PHP Mode, so feel free to send me any questions about that package as far as writing a guide to set it up, configure it, etc."
emacs,3e5kha,Erakko,2,Wed Jul 22 03:50:44 2015 UTC,Mailing list :)))) people still use that.
emacs,3e6f7e,MonsieurBanana,2,Wed Jul 22 08:54:29 2015 UTC,"Spamming C-g works great, why?"
emacs,3e6f7e,rhabarba,1 point,Wed Jul 22 09:34:02 2015 UTC,"If C-g 100x doesn't work, sometimes there's a sub-process emacs has spawned. For me, it's often java. $> pkill java"
emacs,3e6f7e,LULZYKitten,1 point,Wed Jul 22 09:35:26 2015 UTC,Mmmm gotta hate that Java virus.
emacs,3e3erp,imslavko,5,Tue Jul 21 17:31:46 2015 UTC,"I use ""eshell smart display"" as my pager, and set $PAGER to ""cat""  For $EDITOR I use emacsclient. It opens a new window, but doesn't open a new frame. You can use the same window wrangling techniques that you use for everything else that spawns a new window to deal with it."
emacs,3e3erp,ressis74,3,Tue Jul 21 19:47:20 2015 UTC,"thanks! This is very helpful.  Can you please tell me more about ""the same window wrangling techniques that you use for everything else that spawns a new window to deal with it"".  Are you suggesting closing a window and then opening the buffer in the main window?"
emacs,3e3erp,ressis74,1 point,Tue Jul 21 20:59:46 2015 UTC,"I'm away from my workstation that has emacs, so I wasn't too specific there.  I use display-buffer-alist to control how buffers are displayed. It's relatively new. You should be able to use it to make sure that all buffers end up in the same window.  You could also use popwin, or some other plugin. Whatever you use today to wrangle windows is what you should use for wrangling the emacsclient buffer."
emacs,3e3erp,ressis74,1 point,Tue Jul 21 21:08:17 2015 UTC,"thank you, I will read up on the plugins you mentioned."
emacs,3e3erp,bliow,1 point,Tue Jul 21 21:10:49 2015 UTC,display-buffer-alist isn't a plugin. It's a var introduced sometime during emacs 24.
emacs,3e3erp,hyperbling,1 point,Tue Jul 21 21:19:56 2015 UTC,C-h v display-buffer-alist
emacs,3e3erp,cestdiego,2,Wed Jul 22 02:04:50 2015 UTC,"(add-hook 'eshell-mode-hook           (lambda ()            (setenv ""PAGER"" ""cat""))            (setenv ""EDITOR"" ""emacsclient"")))"
emacs,3e3erp,16rlut3Br,1 point,Tue Jul 21 21:41:40 2015 UTC,"Awesome, looks like emacsclient from eshell does exactly what I need. Thanks ;)"
emacs,3e1ozx,bozhidarb,5,Tue Jul 21 07:29:08 2015 UTC,"If I'm not mistaken, there is a certain amount of integration between Evil and ace-jump-mode. What's the Avy status in this respect? For example, how can I replace evil-ace-jump-word-mode (which I have now mapped to ga) and the like?"
emacs,3e1ozx,VanLaser,2,Tue Jul 21 13:22:27 2015 UTC,"avy is out-of-the-box compatible with evil. It ""just works"" for me (whereas ace-jump mode didn't)."
emacs,3e1ozx,sledgespread,4,Tue Jul 21 13:30:40 2015 UTC,"I'm not familiar with avy - what would be the steps needed to have an ""evil-avy-jump-word"" motion? (not a shortcut, a key bind, but a fully fledged vim-like motion, usable with operators - e.g to be able to do something like dga - delete (d) to the word I will jump now (ga) using avy). I mean, I don't know if I have to define a new evil-motion, or create aliases for the original ace-jump-* functions, or everything is included out-of-the-box etc."
emacs,3e1ozx,VanLaser,7,Tue Jul 21 13:38:03 2015 UTC,"What I meant by ""just works"" is that my evil related avy config is:  (define-key evil-motion-state-map (kbd ""p"") #'avy-goto-word-1) (define-key evil-motion-state-map (kbd ""P"") #'avy-goto-line)   and dp deletes to wherever avy jumps to. Similarly for all the other operators."
emacs,3e1ozx,sledgespread,2,Tue Jul 21 14:45:19 2015 UTC,Wow. Just wow. I never knew the option of evil-motion-state-map until now. Thanks for sharing it.
emacs,3e1ozx,ReneFroger,2,Tue Jul 21 15:10:57 2015 UTC,"I am curious. What do you use to paste text since you have bind ""p"" for avy."
emacs,3e1ozx,Erakko,2,Wed Jul 22 06:06:21 2015 UTC,The key is only active in motion state and does not affect other states i.e. normal or insert. Motion state is active when you have a text operation waiting for a motion/a text object to perform its action upon.
emacs,3e1ozx,tuhdo,1 point,Wed Jul 22 07:18:46 2015 UTC,Actually normal state also inherits the mappings from motion state (at least it does if they don't conflict).
emacs,3e1ozx,sledgespread,1 point,Wed Jul 22 08:12:27 2015 UTC,I use a colemak keyboard so I pretty much just wiped the default bindings and started again. I use v for paste (CUA!).
emacs,3e1ozx,sledgespread,4,Wed Jul 22 08:09:25 2015 UTC,"I never understood why there was Avy, while ace-jump-mode was already there and worked fine. Now it gets clear to me."
emacs,3e1ozx,ReneFroger,4,Tue Jul 21 10:15:09 2015 UTC,"When using a programming language that prefixes all the variables with something like ""$"" I've hoped that I could somehow instruct ace-jump to use the character after that instead... I'm sure there's a way to do that even with ace-jump but having it would definitely make me switch in an instant."
emacs,3e1ozx,coloRD,8,Tue Jul 21 16:52:49 2015 UTC,Easy:  (defun avy-dollar ()   (interactive)   (avy-goto-char ?$)   (forward-char 1))
emacs,3e1ozx,abo-abo,2,Tue Jul 21 18:15:16 2015 UTC,"My emacs navigation routines are crap, I might take a look at this one. Thanks!"
emacs,3e34f4,augmentedtree,6,Tue Jul 21 16:21:34 2015 UTC,"I'd you're prepared to drink the koolaid, the idea of text objects (inside parenthesis) are ubiquitous in the modal editing style of vim.  Something like deleting the contents of parenthesis delimited text would be ci( putting you inside a (now empty) pair of parenthesis and ready to enter text.  Then again using evil mode for just that would be like going mosquito hunting with a bazooka"
emacs,3e34f4,Quick_A_Distraction,2,Tue Jul 21 17:19:01 2015 UTC,"They're not mine, but emacs provides M-l, M-u and M-c, which muck with capitalization and move about.  I use those a lot."
emacs,3e34f4,deviant-logic,1 point,Tue Jul 21 18:47:35 2015 UTC,"Share that code, please?"
emacs,3e34f4,seylerius,1 point,Tue Jul 21 18:15:54 2015 UTC,"I would, except the implementation relies on several other packages and nastiness specific to my config. Here's what a simple version would look like:  (defun my-backward-kill-word ()     (interactive)     (backward-word)     (let ((b (bounds-of-thing-at-point 'word)))         (delete-region (car b) (cdr b))))   For the forward direction add a (forward-word) before the (backward-word). You can also have it add to the kill ring by changing delete-region to kill-region."
emacs,3e34f4,mickeyp,1 point,Tue Jul 21 18:26:35 2015 UTC,"For this particular instance you could do M-b M-d. Backwards one word and then delete word. Word movement in Emacs is asymmetric and it will skip non-word characters if, and only if, they are the first characters it encounters in the direction of travel."
emacs,3e34f4,seylerius,1 point,Tue Jul 21 18:29:35 2015 UTC,"Yup, I just combined them into one action since that's what I want 99% of the time."
emacs,3e34f4,kaushalmodi,1 point,Tue Jul 21 19:04:08 2015 UTC,Thanks!
emacs,3e3j7g,fedekun,1 point,Tue Jul 21 18:01:56 2015 UTC,"For some variables (i.e., it depends), a user will need to rely upon major-mode hooks to set the values -- i.e., those major-modes where the author has decided a variable should have a particular value will trump a prior default setting -- since the major-mode hooks run later in time when a major-mode is loaded, the value can be reset at that point.  The resetting of the value happens so quickly, the prior setting is not noticed.  Some major modes are inherited/derived, and others are not.  (defun my-custom-settings-fn ()   (setq indent-tabs-mode t)   (setq tab-stop-list (number-sequence 2 200 2))   (setq tab-width 2)   (setq indent-line-function 'insert-tab))  (add-hook 'text-mode-hook 'my-custom-settings-fn)"
emacs,3e3j7g,lawlist,1 point,Tue Jul 21 20:42:05 2015 UTC,"Interesting... Guess a hook system is prior to have these kind of issues, WordPress has some similar issues :P Thanks for letting me know! I'll let you know how it goes."
emacs,3e3j7g,redguardtoo,1 point,Tue Jul 21 22:03:53 2015 UTC,check http://blog.binchen.org/posts/easy-indentation-setup-in-emacs-for-web-development.html
emacs,3e3j7g,redguardtoo,1 point,Wed Jul 22 02:05:12 2015 UTC,"Wow, very good share! Thanks! Unfortunately there's nothing about php-mode. I tried this:  (require 'php-mode) (add-hook 'php-mode-hook                     '(lambda ()                          (setq indent-tabs-mode t)                          (c-basic-offset 2)                          (setq tab-width 2))) (add-to-list 'auto-mode-alist '(""\\.php\\'"" . php-mode))   But it still inserts 4 spaces, and I have to press 4 backspaces to delete them..."
emacs,3e3j7g,redguardtoo,1 point,Wed Jul 22 02:24:32 2015 UTC,"Use web-mode instead. I don't use backspace to delete space because I'm using evil-mode, there are tons of evil ways to do the deleting thing.  besides, I don't press the TAB to indent the code (the only exception is writing Makefile).  I just let the Emacs do the indention for me before I commit my code."
emacs,3e3j7g,lawlist,1 point,Wed Jul 22 03:44:08 2015 UTC,I just hate not having fine control over code :p I'm too used to vim I guess. web-mode fucks up evil mode's '%' with matchit.el for some reason.
emacs,3dzq23,excitedaboutemacs,12,Mon Jul 20 21:04:20 2015 UTC,"If you want a REPL, ielm is great.  I also recently learned (thanks to this tweet) that you can associate it with a buffer to play around in a particular context."
emacs,3dzq23,tryptych,4,Mon Jul 20 21:37:25 2015 UTC,"@_wilfredh   2015-06-07 12:49 UTC  Today's hidden Emacs gem: pressing C-c C-b in an ielm buffer lets you associate it with a buffer, so you can inspect buffer-local variables.     This message was created by a bot  [Contact creator][Source code]"
emacs,3dzq23,TweetsInCommentsBot,6,Mon Jul 20 21:37:30 2015 UTC,"You could do this very literally with the following, which will run Emacs headless:  emacs --batch --load script.el   This can be further enhanced with Cask to make use of packages in a virtual environment separate from Emacs as an editor.  Emacs Lisp is a full-blown programming language with almost all the standard bells and whistles, so you could use it for nearly anything that you might use, say, Python. This is more true than ever since it got lexical scope in Emacs 24. The primary missing feature is an FFI of some sort since there's no way to make use of native libraries."
emacs,3dzq23,skeeto,1 point,Mon Jul 20 21:25:53 2015 UTC,"Here's ""Hello World"" in Emacs Lisp:  http://stackoverflow.com/questions/2170528/writing-hello-world-in-emacs  I asked this years ago in another life.  I got an answer for this question: http://stackoverflow.com/questions/2264286/generating-a-quiz-in-emacs-lisp/2349412#2349412  ...to generate quizzes for my iOS app: h4 Spanish Lite by h4labs https://appsto.re/us/_YMlx.i  At that time, I thought I might build an entire set of Lisp scripts to help maintain my data."
emacs,3dzq23,mmellinger66,4,Tue Jul 21 01:57:21 2015 UTC,"lisp interpreter   Depending what you mean. If you are talking about Elisp, you can just use *scratch* buffer. Type in a expression, at the end of it, use C-j to evaluate the expression, the result will be shown in the next line.  For Common Lisp, you should use SLIME; with Clojure, you should use CIDER"
emacs,3dzq23,lambdasgr,2,Mon Jul 20 22:31:10 2015 UTC,"I don't use emacs as a lisp interpreter. It's more accurate to say that I use it as an editor framework, powered by lisp.  So, emacs is to elisp what rails is to ruby. I use elisp to build my editor.  As a knock-on benefit, emacs allows runtime changes (kind of getting at your interpreter thing). This allows me to either rebuild the editor for the task at hand (without abandoning the task at hand), or build a micro-editor for the task at hand (most commonly, executing elisp as part of a regex replace command)."
emacs,3dzq23,ressis74,2,Tue Jul 21 04:47:47 2015 UTC,"Im aware of evaluating functions through C-x C-e, and a cool function where you can eval and replace.    C-x C-e is powerful. You are already using Emacs as a Lisp interpreter correctly: whenever you see a visible valid Emacs Lisp code, you can evaluate it. Anywhere. Every buffer is just data to feed to your Lisp interpreter, instead of typing code in a limited REPL prompt like your Python prompt.  It's just that some buffer can hold other data other than valid Lisp code i.e. your text or image. But of course, you can manipulate these data too. For example, in Emacs, you have function that operate on text at point, or in other word, text at point is input to such function. During the development of srefactor, I use the Semantic functions that operate on text at point exclusively. For example, you can open a C file, enable semantic-mode and then move point on a function definition, press M-: then enter (semantic-current-tag) and you will get the tag information parsed by Semantic for current function at point. Whenever I finished a function that processing some C code, I open the a C source file and test directly file using the above method to see immediate results. The returned data is a list holding various information about the tag at point. M-: is another worthy tool to learn if you want to use Emacs as a REPL.  You can also jump to any loaded Elisp code with C-h f. You can inspect any variable value with C-h v. It's just that you don't have to type into the REPL explicitly as code. You are already given a more friendly user interface.  Emacs itself is already an interpreter, but it offers more than just typing code on a prompt."
emacs,3dzq23,tuhdo,1 point,Tue Jul 21 05:43:47 2015 UTC,I tend to use C-M-x (eval-defun) instead of C-x C-e (eval-last-sexp) because the former operates on the top-level expression surrounding point. I don't have to remember to jump to the end of the s-expression.  Edit: just noticed that @delbosforo pointed this out already below.
emacs,3dzq23,jimm,2,Tue Jul 21 10:27:32 2015 UTC,"C-M-x evals the top-level under the point. So you don't have to move if all you wanted was to evaluate the current defun or whatnot. No need to use the batch mode. Use buffers as input, and (not necessarily) temporary buffers for output. You also don't really need a traditional repl, just write what you'd write into repl prompt into the *scratch* buffer then use C-x C-e and C-M-x for evalling. There is also eval-region and eval-buffer.  The gist of my message is, nearly anywhere in emacs is a repl prompt. Say you are editing a function and for that function you wrote an expression like (directory-files  dirname) where dirname is a variable. You don't need to eval all the function or copy-paste to ielm, you can quite literally edit the experession where it is, and then go to the end of it and hit C-x C-e to see if it is correct. Sorry for the convoluted example, but I hope I was able to explain the gist of it. I use such approach all the time, and I haven't really ever needed an ielm buffer in my emacs use.  For some time now, I've stopped using shell scripts for elisp. What would be my shell scripts are now elisp functions. I compose them in the scratch buffer, I test them, and if they work, I put them somewhere. There is a function γ:userdir-symlink which symlinks my little corpus of dotfiles to my home directory, for example. I compose all my functions first on the scratch buffer. When I'm incorporating code from others, I first put it into the scratch buffer, I tame it there and then move into a file, if I decide so."
emacs,3dzq23,delbosforo,1 point,Tue Jul 21 07:43:25 2015 UTC,"I normally use the scratch buffer when working on some lisp code for extending stuff. However, I also have a few bindings, some of which are using functions that I wrote myself. All of these are prefixed with leader using evil-leader.   ewl -> eval whole line. Goes to end of line, tries to evaluate it and replaces the line with the output. eh -> eval here. Evaluates the current sexp and replaces it with the output. eb -> eval buffer. Evaluates the buffer. Handy when modifying .emacs and so on. el -> eval last. Just evaluates the current sexp and shows output at bottom.   This kind of lets me write lisp code and evaluate the whole thing as well as individual parts of it on the fly and see the output in my buffer. Then I just hit undo and continue."
emacs,3dzq23,IceDane,1 point,Tue Jul 21 09:25:17 2015 UTC,you can use eshell as a repl
emacs,3dzq23,ihatecatsandpeople,0,Tue Jul 21 01:04:51 2015 UTC,Install packages. Enjoy the benefits of a lisp interpreter extended by thousands of users.
emacs,3dzq23,jinwoo68,0,Mon Jul 20 21:24:39 2015 UTC,Evaluating with C-x C-e is a good start. Then you can define your own commands in your .emacs as needed. Then you'll start to see you writing custom emacs commands instead of shell scripts. And you seldom leave emacs.
emacs,3e1g0y,olmu1944,1 point,Tue Jul 21 05:41:53 2015 UTC,"Check out ""narrowing"". It hides parts of a buffer.  C-x n s     (org-narrow-to-subtree)     Narrow buffer to current subtree. C-x n b     (org-narrow-to-block)     Narrow buffer to current block. C-x n w     (widen)     Widen buffer to remove narrowing.    Then you can use something like narrow-to-indirect (my config) and create maybe some function that does narrow-to-subtree and indirect at the same time? I'm not quite sure what you want but this may help."
emacs,3e1g0y,codemac,2,Tue Jul 21 05:54:52 2015 UTC,"I guess some kind of side panel with the outlines only, instead of having two windows synced on the same buffer (meaning folding on one would fold the other)"
emacs,3e1g0y,agumonkey,1 point,Tue Jul 21 11:52:30 2015 UTC,"Yes, that's what I meant."
emacs,3e1g0y,vcmsxs,1 point,Tue Jul 21 11:55:54 2015 UTC,Speedbar?
emacs,3e1g0y,okflo,1 point,Tue Jul 21 12:09:57 2015 UTC,C-c C-x b     (org-tree-to-indirect-buffer)  more information: fine manual
emacs,3dyjk3,ganglygorilla,3,Mon Jul 20 16:06:28 2015 UTC,"(defcustom cua-prefix-override-inhibit-delay 0.2   ""If non-nil, time in seconds to delay before overriding prefix key. If there is additional input within this time, the prefix key is used as a normal prefix key.  So typing a key sequence quickly will inhibit overriding the prefix key. As a special case, if the prefix keys repeated within this time, the first prefix key is discarded, so typing a prefix key twice in quick succession will also inhibit overriding the prefix key. If the value is nil, use a shifted prefix key to inhibit the override.""   :type '(choice (number :tag ""Inhibit delay"")                  (const :tag ""No delay"" nil))   :group 'cua)"
emacs,3dyjk3,upham,1 point,Mon Jul 20 17:45:21 2015 UTC,"Unless I'm forgetting something I rarely invoke C-x prefixed commands with the mark set, so I guess decreasing this delay works. Thanks, nice find! (I should have looked harder)"
emacs,3dyjk3,TarMil,2,Mon Jul 20 19:37:24 2015 UTC,"I don't use cua mode, but this is probably on purpose so that you can type a C-c X or C-x X keyboard shortcut during this delay. I imagine there must be a variable to set to customize this delay."
emacs,3dx6t5,ralesi,1 point,Mon Jul 20 07:29:33 2015 UTC,"Wow, looks nice.  Would it be possible to tag a version so melpa-stable can pick it up?"
emacs,3dx6t5,hirnbrot,1 point,Mon Jul 20 12:38:03 2015 UTC,It's now tagged(https://github.com/ralesi/ranger/tags) and on melpa-stable (http://stable.melpa.org/#/ranger) as well.
emacs,3dx6t5,xuchunyang,1 point,Mon Jul 20 16:36:30 2015 UTC,"Danke, gracias and thanks!"
emacs,3dx6t5,hirnbrot,-5,Mon Jul 20 17:04:52 2015 UTC,"Public Service Announcement  Ok, fair warning, I'm about to rant... Move along now if that's going to upset or offend you.  I'm not really aiming this at anyone in particular, just trying to dispel a pernicious myth. Anyway...  I really wish people wouldn't describe hjkl as a fast way to navigate anything, anywhere.  There is no reality where navigating a single char at a time is either fast or efficient.  If you're a hjkl -er and think you've somehow graduated from those ever-so evil arrow keys. (Pfft) then please, let me be the first to pop that bubble.  You're only slightly less deluded than someone who thinks navigation enlightenment is somehow related to C-[fbpn]  Simply replacing one sub-optimal habit with another one, isn't progress, it's substitution.  Please do your navigation with C-s (/?), or Ace-jump. (etc.)"
emacs,3dx6t5,instant_sunshine,4,Mon Jul 20 10:21:43 2015 UTC,"You're starting from a false premise, ie that hjkl is the sole method of navigation. You should probably go through the first ~10 mins of a vim tutorial before you start calling things myths.  There is no reality where navigating a single char at a time is either fast or efficient.   No shit, remapping arrow keys to hjkl only saves you from moving your hands off the home row, noone claims it does anything else.  To actually navigate a file under a vim editing scheme you do stuff like ""15j"" to go down 15 lines or ""w"" to jump to the beginning of the next word or ""/pattern<RET>"" to jump to the next occurrence of the pattern. It's no different from emac's navigation bindings except that it's more fluent.  Single char navigation is slow no matter what bindings you have set up. Not having to leave the home row or use modifiers for simple navigation tasks can still be an ergonomics improvement for those who prefer it."
emacs,3dx6t5,sigma914,1 point,Mon Jul 20 12:08:35 2015 UTC,"I'm not starting from false principles, I'm simply poking a hole in the ""faster with hjkl"" assertion.  Does that imply some other method of navigation? Nope.  Obviously using additional navigation methods would help.  That was the entire point of my little diatribe."
emacs,3dx6t5,instant_sunshine,1 point,Mon Jul 20 16:02:13 2015 UTC,If you actually use vi navigation you'd know people use f/t et al far more. Why the grandstanding? You're attacking an hjkl straw man you yourself have set up.
emacs,3dx6t5,aptmnt_,0,Mon Jul 20 20:24:38 2015 UTC,"Sorry if you couldn't see it was originally tongue in cheek.  I also said if you're going to get upset or offended, just ignore it.  But like I said, the only thing I was singling out was the phrase, ""faster hjkl""  So move along, nothing to see here."
emacs,3dx6t5,instant_sunshine,3,Mon Jul 20 23:55:39 2015 UTC,"The nice thing about hjkl is that it takes no thinking.  I don't have too parse the code in my head to figure out where forward-defun will go or identify a piece of code to search for with C-s or ace-jump.  Plus, I use J and K to move 5 lines at a time.  So, if I'm moving cursor less than about 30 lines, I use hjkl.  Beyond 30 lines, I do use ace-jump or isearch."
emacs,3dx6t5,joesmoe10,1 point,Mon Jul 20 10:57:26 2015 UTC,"At 30 lines, you already know where you want to go, and you should be search-jumping directly.  Anything over 6 chars/rows is wastage / bad habit.  Not saying you'll suddenly be doing this, but you should at least mentally kick yourself, when you just hammer away on single char keys.  C-numbers is a better habit if you want to arbitrarily jump x rows/cols"
emacs,3dx6t5,instant_sunshine,1 point,Mon Jul 20 11:24:16 2015 UTC,C-numbers is a better habit if you want to arbitrarily jump x rows/cols   I never understood this. When do you know you are moving exactly 3 rows or 7 rows? It seems way faster to hold control and hit n a few times really fast and then you are really close and can adjust. Where as if you guess wrong with C-number adjusting is harder.
emacs,3dx6t5,excitedaboutemacs,1 point,Mon Jul 20 14:51:17 2015 UTC,"If you use prefix arguments for other things, like killing five lines, or scrolling five lines, then it becomes natural to use them for cursor motion too. If not sure how far away something is, you can just use C-u prefix to move 4 rows/columns, C-u C-u to move 16 rows/columns etc. That way you don't need to use the number row."
emacs,3dx6t5,parolang,0,Mon Jul 20 17:19:13 2015 UTC,"You get good at guessing, in fact you don't guess, you know.    This is the very reason why it's good to develop useful habits."
emacs,3dx6t5,instant_sunshine,1 point,Mon Jul 20 16:04:57 2015 UTC,"I kind of see your point. I think it would take quite a while to develop though. At least for me.   That being said Im using avy-jump now, and that was also non-trivial to get fast at. For whatever reason, seeing ""ldfh"" was hard to touch type. I guess Im used to typing code or normal english phrases."
emacs,3dx6t5,excitedaboutemacs,1 point,Mon Jul 20 16:11:52 2015 UTC,"Things only require meaning, or mnemonic reference when you are learning.  After a while muscle memory takes over."
emacs,3dx6t5,instant_sunshine,2,Tue Jul 21 00:02:29 2015 UTC,"This actually seems like something you could study with a usability experiment, for example with GOMS. A case in which I could imagine that arrow keys are significantly faster is when you only need to move by less than ~3 chars/lines. When browsing the file system it might also be helpful to quickly peek into directories if you are not sure where and what filename you are looking for."
emacs,3dx6t5,True-Creek,1 point,Mon Jul 20 10:33:38 2015 UTC,Moving less than 3 chars... absolutely.
emacs,3dxufw,jimm,2,Mon Jul 20 12:42:39 2015 UTC,"Jim please note that iTerm2 (the nightly builds and therefore the forthcoming major versions.) overhauls the AppleScript interface.  See my patch of vim-rspec for an example. (And notes on iterm.)  https://github.com/emacsfodder/vim-rspec/blob/cc3f923899036c3934cf81f956feafa6564b5bef/bin/os_x_iterm2  Of course, this script is very easily modify-able to return to Emacs instead of MacVim."
emacs,3dxufw,instant_sunshine,1 point,Tue Jul 21 00:36:20 2015 UTC,"@instant_sunshine, thanks for the note and example code!"
emacs,3dxufw,jordonbiondo,1 point,Tue Jul 21 02:16:55 2015 UTC,Cool! It's always fun to roll your own stuff! Any reason not to use the existing rspec-mode? I have had a good experience with it. And why use applescript instead of the built in support for treating a compile command like a shell?
emacs,3dv0dd,ReneFroger,5,Sun Jul 19 19:09:55 2015 UTC,I've just started reading a few random sections and there's already so many cool snippets I'm definitely studying/stealing.
emacs,3dv0dd,MonsieurBanana,2,Sun Jul 19 20:09:29 2015 UTC,Note that I set the wrong link. You see just the end of it. You need to scroll all the way to the top.
emacs,3dv0dd,xuchunyang,1 point,Mon Jul 20 07:45:32 2015 UTC,The org-mode source(http://fort.kickass.systems:10082/cgit/fsem.git/tree/fsem.org) is no longer exist.
emacs,3dv0dd,hamsterslayer01,3,Mon Jul 20 01:16:38 2015 UTC,Here is the org-mode source
emacs,3dv0dd,xuchunyang,1 point,Mon Jul 20 03:44:47 2015 UTC,Thanks.
emacs,3dv0dd,helpivefallenandican,1 point,Mon Jul 20 03:51:29 2015 UTC,"Oops, I'm gonna fix that now, thank you."
emacs,3dv0dd,eskatrem,1 point,Tue Jul 21 06:27:50 2015 UTC,I had a look at ace-jump-mode. I have one question about it: how do I do if I want to go somewhere that is currently not on the screen?
emacs,3dv0dd,jplindstrom,3,Mon Jul 20 10:33:28 2015 UTC,"Then you're using the wrong tool. ace-jump-mode is specifically for jumping to something you can see on the screen.  If you know the text you're looking for, incremental-search (C-s or C-r) is often useful, especially followed by one or more C-w to pick up the next word."
emacs,3dv0dd,eskatrem,1 point,Mon Jul 20 14:16:16 2015 UTC,"Are you using Evil? If so, type the line number where you want to go to jump, and then press G."
emacs,3dv0dd,helpivefallenandican,1 point,Mon Jul 20 11:11:28 2015 UTC,"I'm not using evil, but I know I can do M-g g <line number> to jump to the line I want to go. My question is more: if in my code I have something like:  def myFunction():   that is not on the screen, and I don't know at where in the file that snippet is, I can't use ace-jump or what you suggest. I know that Python-mode (or elpy, I don't know exactly) has C-c j to jump to the definition of a function, but I was wondering if there is something like that for all the other languages."
emacs,3dv0dd,Archenoth,3,Mon Jul 20 12:30:58 2015 UTC,"Ah, now it gets clear to me. There are various tags-systems for different languages (you can find them on, for example, emacs.zeef.com ) But for any unkown language, if you want to find it inside in a large buffer that you're currently visiting: Helm-swoopwill also meet your case I think.  Call helm-swoop, and type the function name for example. Then you can find it in the list."
emacs,3dv0dd,socke,2,Mon Jul 20 12:47:29 2015 UTC,"Check out the builtin Semantic mode ((info ""emacs#Semantic"")). I use it in combination with helm-semantic-or-imenu, and it works in nearly all of the languages I care about."
emacs,3dv0dd,helpivefallenandican,1 point,Tue Jul 21 06:52:03 2015 UTC,"I like how he published his ERC fools list, and it only has one guy in it:   erc-fools    '(""Froward""))"
emacs,3dv0dd,klugez,1 point,Mon Jul 20 20:34:56 2015 UTC,"I don't quite understand what is going on here, could you please enlighten an emacs noob ;)  What is the point of such a huge org-mode file with all kinds of configs for emacs, xmonad, etc. pasted in? Why not a repository where all the files are separate instead? I can't imagine copy pasting all the stuff back and forth..."
emacs,3dv0dd,openist,3,Mon Jul 20 10:02:01 2015 UTC,"Hi I wrote this thing... :) Was pleasantly surprised to see it show up in my frontpage today  The upshot is that this is a single file I can curl and set up my entire environment with. I used to have a dotfiles repository that I maintained, but getting it git cloned on a fresh machine was like five or six more steps than ""curl this thing and eval it"", barring any sort of ""curl | sudo bash"" type things you see on GitHub.  More impotantly for me though, it also has an added bonus of being living documentation of how I actually work, rather than just a collection of configuration files. Sitting down and working out how I already use my computer and how I want to use my computer is most of the reason this document is so big and sounds so flourishy and philosophical. I can take sections of this out verbatim and publish them on my blog, or hell I could make an init file out of a blog!"
emacs,3dv0dd,ares623,2,Tue Jul 21 06:36:11 2015 UTC,"Early in the document under ""Installation"" it talks about tangling.  ""Tangling"" is org-babel term for exporting the code inside the org file into the code files themselves.  So the author of that configuration just edits the org file and finally goes to the installation section and presses C-c C-c in both of those boxes (tangling and the shell stuff to copy the results in place) to have the config take effect. No copy and pasting.  I don't do that sort of stuff personally, but it allows you to use all the organizing features of org-mode in managing your configuration."
emacs,3dv0dd,helpivefallenandican,1 point,Mon Jul 20 19:47:04 2015 UTC,"This file is actually the emacs init file, created using org-babel i imagine..."
emacs,3dv0dd,ares623,0,Mon Jul 20 19:39:19 2015 UTC,How'd he get the exported html to have syntax highlighting?
emacs,3dv0dd,Turing_Machinegun,1 point,Tue Jul 21 00:59:23 2015 UTC,(setq org-src-fontify-natively t)
emacs,3dv0dd,holgerschurig,1 point,Tue Jul 21 06:43:18 2015 UTC,"Hmm I have that enabled and its fontifying when I'm editing the file in Emacs.  But the exported html isn't highlighted. (I mean, the code blocks don't have CSS classes)"
emacs,3dv0dd,ares623,1 point,Tue Jul 21 07:35:59 2015 UTC,"It is possible you have to install htmlize.el, it is available from melpa  EDIT: I remember having to set something with htmlfontify (which maybe substitutes htmlize in newer versions of emacs), but I can't find that in my init.el, so I'm not sure"
emacs,3dv0dd,holgerschurig,1 point,Tue Jul 21 09:04:40 2015 UTC,"Except that the syntax highlighting is really cumbersome. Look near the top, there is the text  (defconst qdot/emacs-start-time (current-time))   And this very-light-green-text on full-white-background of ""qdot/emacs-start-time"" simply doesn't have enought contrast. The defconst is bad, too, but not as bad."
emacs,3dv0dd,pzone,1 point,Wed Jul 22 09:15:56 2015 UTC,"Yeah, but that can easily be fixed with CSS."
emacs,3dv0dd,helpivefallenandican,1 point,Wed Jul 22 09:24:39 2015 UTC,"That would be nice. But alas, that's not the way it works. When I see insane coloring in web size, I often just do right-click -> inspect element in the browser and disable the weird CSS statement.  But here this won't work, colors are hardcoded into the HTML:  <span style=""color: #D8FA3C;"">qdot/emacs-start-time</span>"
emacs,3dv0dd,klugez,-6,Wed Jul 22 09:40:04 2015 UTC,"It seems like a good setup, but the guy comes off as a raging narcissist and I couldn't read the whole thing.  After a few downvotes, I am surprised I'm the only one who picks up that vibe."
emacs,3dwsqx,temporaryred,11,Mon Jul 20 04:37:50 2015 UTC,"What I do is use the projectile, perspective, and persp-projectile packages.  (Also I strongly recommend helm to go with projectile, but it's not strictly necessary for what I describe below.)  Projectile is a popular project management extension for emacs; the important point here is that it detects projects automatically from their directory structure (git/hg/svn/etc.), and adds a whole set of functions that operate just on files in that project.  Perspective is sort of like a window manager for emacs; it maintains logical named workspaces and remembers what buffers and windows were open in them.  Then persp-projectile links them together so that visiting a project with projectile creates a new perspective for it, and this makes it pretty easy to flip between multiple open projects without the ones in the ""background"" getting in your way.  Altogether, this buys you: fuzzy matching on project names and filenames; lots of project-local operations; and individual project workspaces.   Very handy."
emacs,3dwsqx,RothiasVex,7,Mon Jul 20 05:19:56 2015 UTC,"I would like to chime in with an even more enthusiastic recommendation for helm.  For me it provides universal Emacs file and buffer management, supported by various extension packages like helm-projectile, helm-ag, helm-ls-git, and helm-gtags."
emacs,3dwsqx,pzone,1 point,Mon Jul 20 08:18:50 2015 UTC,"I'm not quite sure I follow what your problem is...why don't you leave the shell open in emacs?  So I pretty much live inside of emacs (only dropping to traditional shells when compelled to by the fact that emacs is shit-ass slow at rendering large amounts of text).  What I do is make C-e autocomplete to a list of my open shells, and C-E open a new shell. It makes it really easy to just switch around to different shells. I usually have various shells open at once to be in the various places I need to be.  I use ido for the buffer switching, which is snappy.  Does that help at all?  PS. I would stick with the vim keybindings if you can! Emacs isdefinitely does not have well thought-out keybindings. I've actually tried to switch to the vim bindings before, but it's hard, because you don't have to change just the normal bindings, but every single other mode you want to use to. (Maybe someone has come up with a smart autoremapping scheme since last time I tried.) Also, I strongly recommend mapping capslock to control (a built in pref, if you happen to be on a mac)."
emacs,3dwsqx,dilap,2,Mon Jul 20 05:29:16 2015 UTC,Your solution is Helm with Projectile.   Please check this out: tuhdo.github.io/helm-projectile.html  You can find more information here.
emacs,3dwsqx,ReneFroger,2,Mon Jul 20 08:34:26 2015 UTC,"If your problem is accidentally closing/killing the buffer, well, stop doing that.  Either switch to or find whatever buffer you want, or bury the buffer or close the window, leaving the previous buffer active.  When you start to bring up a switch-to-buffer dialog or switch-to-buffer-other-window dialog, you can hit the tab key in the minibuffer and it offers completions or use the arrow keys up/down to switch between the choices.   You can also use M-x list-buffers to have a buffer of detailed choices, that also offers buffer manipulation, etc.  There are lots of other ways to find buffers -- e.g., speedbar buffer-view, ibuffer, menubar switch to buffer/frame options, mouse pop-up menu switch to buffer/frame options, etc.  If you just have a few, then you might like tabbar.  In terms of keyboards shortcuts, it really doesn't matter because you can program your own -- whatever floats your boat.  Most people seem to like the fact that others have chosen keyboard shortcuts for them -- I say . . . I choose!"
emacs,3dwsqx,lawlist,2,Mon Jul 20 05:43:41 2015 UTC,"I will preface by saying that helm and projectile do make things much nicer if you have reached the point of customizing your emacs.d files.  Even without helm and projectile, you shouldn't be having this much friction. The biggest workflow improvement would be to not close your files or processes like eshell -- Emacs can handle it. Once you have a file from a project open in the current buffer,  a subsequent find-files will start at that same path. If you need to revisit a previously opened file, C-x C-b (or whatever evil-mode uses) to switch back. Learning to split your buffers with C-x 3 and C-x 2 may also help.  Helm and projectile simplify things further by e.g. reducing typing with fuzzy matching (helm) or knowing your version controlled projects and searching only through their files (projectile) -- they do much more but that is a general flavor.  Once you learn of packages like these, a good starting point to trying them out is borrowing code snippets from other people's .emacs.d configurations on github."
emacs,3dwsqx,tsuru,1 point,Mon Jul 20 10:34:05 2015 UTC,"Not sure about the exact problem here. A few semi random notes that may help:   alt ! lets you eval a shell command at your current buffer ido mode is a snappy way to switch between buffers. You are not really supposed to close them.   With these,  your buffers are allways here. You switch between them with ido. You then shell with alt ! (cd if you want to evaluate elsewhere).  Of possible interest to you :    the cd -> edit -> cd -> edit way is not the way to go in emacs. for a better Tmux emulation, maybe try server mode."
emacs,3dwsqx,ybonnemay,1 point,Mon Jul 20 12:02:55 2015 UTC,"My emacs process is long-living, and I have multiple workgroups open via workgroups.el.That way, I contextually manage my various projects, and can switch my workspace quickly without having to re-set my setup for each process every time.  I used to use escreen to manage my workspaces, but I like that workgroups indexes workspaces by a key than a number; but escreen does embed each workgroup in a unique framebuffer, so buffer lookup is easier in escreen. You should choose which works better for you."
emacs,3dvzei,Catslinger,1 point,Mon Jul 20 00:07:32 2015 UTC,Org is also a hyperlinked database for notes. What can this do what org can't?
emacs,3dvzei,kcin,1 point,Mon Jul 20 04:29:41 2015 UTC,"I am not sure, yet. But I don't really like using org as a wiki - it's does not impose a rigid enough structure on the informational content, IMO.   Perhaps the ideal solution would be to use org as the text format in which freex ""nuggets"" are stored."
emacs,3dt1ao,agumonkey,3,Sun Jul 19 04:23:50 2015 UTC,"I saw a bunch of discussion about setting up emacs with python. Someone might find my init.el useful https://github.com/sidmitra/emacs.d/blob/master/init.el#L365  I'd recommend using anaconda-mode, it installs the others stuff automatically and communicates to python via a background process. I use company-mode(to show the autocomplete tooltips). I also use virtualenvwrapper mode in emacs to help autocomplete stuff in a venv. Config for that is also below. I've lately moved to using vagrant completely for all my python stuff, which means i'm losing autocomplete for venv modules inside vagrant vm. I haven't looked into tramp and how it works with python inside vm.  Screenshot: http://i.imgur.com/0K4Mj5M.jpg  While anaconda-mode installs the required python modules, but in case you have issues try installing these:   sudo pip install --upgrade pip  sudo pip install jedi json-rpc --upgrade   Also use 'flycheck', it automatically uses the relevant packages to show syntax errors etc.(It needs python-flake8, or pylint, or pycompile). Use below to verify if it detects the packages   M-x flycheck-verify-setup   Here's a quick snapshot of relevant python bits  ;; python-mode ;; ============ ;; pre-requisites on ubuntu ;; sudo pip install --upgrade pip ;; sudo pip install jedi json-rpc --upgrade  (add-hook 'python-mode-hook           (lambda ()             (setq indent-tabs-mode nil)             (setq tab-width 4)             (setq python-indent-offset 4)))  ;; anaconda (use-package anaconda-mode   :ensure t   :config   (add-hook 'python-mode-hook 'anaconda-mode)   (add-hook 'python-mode-hook 'eldoc-mode)) (use-package company-anaconda   :ensure t   :config   (add-to-list 'company-backends 'company-anaconda))  ;; virtualenv (use-package virtualenvwrapper   :ensure t   :config   (venv-initialize-interactive-shells) ;; if you want interactive shell support   (venv-initialize-eshell) ;; if you want eshell support   (setq venv-location ""~/.virtualenvs/""))   I haven't gotten the python3 stuff working yet. I'll figure it out next week, only have 1 new django codebase that i started using  python3 for."
emacs,3dt1ao,kovak,1 point,Sun Jul 19 14:35:03 2015 UTC,"I, too, am curious about using vagrant / docker for python. I really wish there was something like clojure's nrepl that flake8 and flycheck could use for completion and syntax but then I could still edit on the host machine's file system (i.e without TRAMP)"
emacs,3ds7x5,VimFleed,14,Sat Jul 18 23:20:16 2015 UTC,org-mode ... at first it's not related to programming; just outlining. And then you learn what other people are doing with it...  erc  irc from within emacs  calc-mode a quick RPN calculator (C-x * *)
emacs,3ds7x5,tsuru,3,Sun Jul 19 00:05:54 2015 UTC,"Calc,by the way, is more than just a quick RPN calculator..."
emacs,3ds7x5,parolang,2,Sun Jul 19 01:03:40 2015 UTC,"Calc is a weird twist on javascript. Probably the largest CAS install base that nobody knew there was.  ps: funny, after searching about Taylor Series, that post made me firing Calc to compute symbolic derivatives (manual told me Calc could compute taylor expansions too :).  Searching who the author is, I found this http://sachachua.com/blog/2006/11/the-history-of-calc/ (worth a read) and his name mentioned  http://www.emacswiki.org/emacs?EmacsFileSizeLimit which happened to be in my tabs while trying to write an emacs extension #smallworld #mylife"
emacs,3ds7x5,agumonkey,1 point,Sun Jul 19 01:55:44 2015 UTC,"Indeed. I was listing how I use these packages. As always, there is so much more for me to explore."
emacs,3ds7x5,tsuru,3,Sun Jul 19 01:19:28 2015 UTC,"Yep. But if you do want a quick convenient calculator in emacs, Calc does have this: https://www.gnu.org/software/emacs/manual/html_node/calc/Quick-Calculator.html#Quick-Calculator"
emacs,3ds7x5,parolang,14,Sun Jul 19 01:49:45 2015 UTC,Helm.  helm helm helm helm helm helm helm helm helm helm helm
emacs,3ds7x5,vermiculus,4,Sun Jul 19 03:44:09 2015 UTC,"Helm is astonishing, I use it for everything. I only wish it had better documentation. I feel like I have to take what is given to me and can't implement my own ideas."
emacs,3ds7x5,pzone,1 point,Mon Jul 20 01:09:01 2015 UTC,John Kitchin had a series of tutorials on his blogs and I joined them on this wiki: How to write Helm extensions: http://wikemacs.org/wiki/How_to_write_helm_extensions
emacs,3ds7x5,dzecniv,1 point,Tue Jul 21 09:38:04 2015 UTC,"Yes, I am grateful for your effort explaining the basic framework.  Still, when I peer into the source to see what the more advanced helm sources are is doing it seems like there is a great deal going on. Helm-files.el for example is well over 3k lines of Elisp.  The helm-source ctor has something like 30 possible arguments!  One example of a task I thought might be 10 minutes of cut and paste but eventually gave up on was trying to change helm-projectile-recentf to format vertically aligned directory information like helm-buffers-list."
emacs,3ds7x5,pzone,7,Tue Jul 21 10:33:44 2015 UTC,elfeed for Atom/RSS (this is my own package) notmuch for e-mail   For two years now I've been using these daily.
emacs,3ds7x5,skeeto,3,Sun Jul 19 02:55:45 2015 UTC,"+1 for elfeed, and thanks. I've been using it daily for a long while, excellent package."
emacs,3ds7x5,delbosforo,7,Sun Jul 19 14:05:33 2015 UTC,You can take a look at the Awesome Emacs list.
emacs,3ds7x5,caisah,4,Sun Jul 19 06:33:02 2015 UTC,"I use a custom version of org-mode to generate custom *Org Agenda* buffers to organize my tasks and events (with custom holidays and birthdays), that are displayed in colorful text form (org-mode-style), or can be displayed on a 3-month calendar, a 12-month rotating calendar http://stackoverflow.com/a/21409154/2112489 , or the calendar views available through CFW https://github.com/kiwanami/emacs-calfw (that have also been taken to the next level with additional features/fixes through a custom version), and I synchronize with a custom version of org-toodledo https://github.com/christopherjwhite/org-toodledo (using all of the Toodledo keywords, instead of the stripped down version of just a few like TODO and DONE) so mobile devices and computers have access to the calendars.  I use a custom version of Wanderlust to handle my imap email:  https://github.com/wanderlust/wanderlust  I use a custom version of ztree/speedbar/dired to create a tree-view one stop location for all my file organizational / viewing needs -- still need to integrate wdired to the tree-view model.  I use a custom version of tex-mode.el to handle all the business related documents and letters.  I use a custom version of cross-hairs to create thin vertical/horizontal lines (window-height and window-width) that track my cursor position -- odd column is red, even column is yellow, past the fill-column is green, wrapped line from second wrapped line to end is a gray color, and absolute last column at right-window edge is a cyan color, and  wrapped at last word when line is continued on next visual line is magenta horizontal extender to the right window edge; regular horizontal is a yellow underline on the line containing point.  I organize buffers by groups and also group by frame -- marrying a custom version of tabbar https://marmalade-repo.org/packages/tabbar and frame-bufs (frame local buffer association) https://github.com/alpaker/Frame-Bufs -- part of the code for which is here:  http://stackoverflow.com/questions/18346785/how-to-intercept-a-file-before-it-opens-and-decide-which-frame and here http://emacs.stackexchange.com/a/10112/2287  Here is a link to an early version of a switch to frame function that identifies the frame name and offers choices of letters/numbers to quickly jump between frames: http://stackoverflow.com/a/26922594/2112489 -- the one I use today is fairly similar.  All my .tex codes are created using yasnippet (I liberated myself from AUCTeX and haven't used it in a couple of years), and I have a right-click context pop-up menu that offers all the snippets http://stackoverflow.com/a/19211890/2112489 -- plus whatever is normally in the major mode menubar (that I hide), and some commonly used custom stuff for quick access.  Anything that I regularly use is a custom library with slightly different names for everything to easily distinguish between the custom stuff and the stock stuff."
emacs,3ds7x5,lawlist,3,Sun Jul 19 05:32:18 2015 UTC,emms is pretty amusing. That along with newsticker make for a pretty snappy workflow for listening to podcasts.  eww for ironically browsing the web. twittering-mode is surprisingly easy to use.  2048 and other games.
emacs,3ds7x5,Onlythefinestwilldo,3,Sun Jul 19 00:15:07 2015 UTC,sx. It lets you use stackexchange through emacs.  erc to chat on irc.  dired.  A little obvious but it's nice to have a cross-platform interface you can take everywhere with you.  helm-w32-launcher. If you're on Microsoft Windows you need this. It's like the windows start button but with helm.
emacs,3ds7x5,Starlight100,3,Sun Jul 19 12:57:03 2015 UTC,"Among the not-already-mentioned, there's emms which I use for listening to podcasts, bbdb with bbdb-vcard for contacts, and google-maps for, well, google maps (I'd like an alternative that uses OpenStreetMaps, maybe I'll take my chance at it some day). I also use the built-in eshell for my tiny shell needs. And I'm not really programming anymore, other than my elisp and occasional two-line javascript for a friend who does a wordpress blog... The eww I use quite often, but not as much as I wish I do. I used to use Tumblr from within Emacs when I was publishing my blog there, using the tumblesocks package. I've recently started using pdf-tools for viewing PDF files, which is an incredible improvement over the built-in docview. Mentioned, but elfeed is a big part of my life. I use gnus for mail, and I've written a little elisp function and using a one-liner shell script with it I handle mailto links from firefox via emacs."
emacs,3ds7x5,delbosforo,2,Sun Jul 19 14:30:17 2015 UTC,I wrote clones of a few games for Emacs: 2048 and minesweeper.
emacs,3ds7x5,zck,1 point,Sun Jul 19 05:10:37 2015 UTC,"Reading mail is very well done with mu4e http://wikemacs.org/wiki/Mu4e  I browse my filesystem with the built-in Dired (and some extensions: http://wikemacs.org/wiki/Dired#See_Also)  and I listen to music with mpg123 (not in package.el), because combined with ido-mode it's the quickest way I have to access my newly downloaded music, or to access any folder.  We can search wikipedia quickly with wiki-summary."
emacs,3ds7x5,dzecniv,4,Sun Jul 19 00:37:51 2015 UTC,I just added mpg123.el to MELPA.
emacs,3ds7x5,purcell,1 point,Sun Jul 19 11:10:10 2015 UTC,Great !! Thank you.
emacs,3ds7x5,dzecniv,3,Tue Jul 21 09:36:15 2015 UTC,I can't recommend ido enough. It's the one feature that seems to wow non Emacs users watching you work.
emacs,3ds7x5,bazfoo,4,Sun Jul 19 04:33:43 2015 UTC,"I find vanilla ido hard to read, I prefer ido-vertical."
emacs,3ds7x5,MonsieurBanana,0,Sun Jul 19 16:06:44 2015 UTC,"I'm surprised nobody has mentioned this yet, but obviously MELPA is the most useful package of all."
emacs,3ds7x5,vittusormi,1 point,Sun Jul 19 19:59:54 2015 UTC,"Well, MELPA is a package repository, not a package.  You probably meant package.el :-)"
emacs,3drs45,shackra,2,Sat Jul 18 20:54:59 2015 UTC,See the end of https://github.com/company-mode/company-mode/issues/377
emacs,3drs45,hvis,1 point,Sat Jul 18 21:45:55 2015 UTC,I see. I just rolled back to python.el
emacs,3dpyse,caisah,1 point,Sat Jul 18 08:46:57 2015 UTC,"Here's what archlinux recommends.  Basically, it's git describe with some regex to make sure it doesn't interfere with pacman's version parsing (""$pkgver-$pkgrel""). (Plus solutions for other VCSs)  From the man page, it seems like git describe by default does ""tag-numberofcommitssincetag-commit"", which seems like it would be monotonic if tag is (though theoretically with history-rewriting and branches and such...). The problem is what happens when absolutely no tag exists."
emacs,3docsc,ChasingLogic,19,Fri Jul 17 22:30:12 2015 UTC,"If you run emacs as a server with M-x server-start RET, and set alias vim='emacsclient -t', you won't even notice the difference in startup time :) You can run Emacs as a daemon, too."
emacs,3docsc,jivatmann,2,Fri Jul 17 22:58:06 2015 UTC,Can you run a GUI client with the daemon?
emacs,3docsc,katspaugh,4,Fri Jul 17 23:25:49 2015 UTC,emacsclient -c will start a GUI client if Emacs runs as a Server.
emacs,3docsc,jivatmann,3,Fri Jul 17 23:30:28 2015 UTC,"You can also start the daemon automatically by calling emacs --daemon in your .xinitrc file, bash profile, or in a systemd user service file."
emacs,3docsc,Codile,1 point,Sat Jul 18 00:53:28 2015 UTC,The fedora emacs package does this by default.
emacs,3docsc,SurviAvi,2,Sat Jul 18 10:19:58 2015 UTC,"I run Emacs as client with daemon on Windows 7, full blown GUI with nice colors, images, everything."
emacs,3docsc,ReneFroger,1 point,Fri Jul 17 23:58:39 2015 UTC,I thought this* was unsupported until version 25. How did you configure it and what params to the client are you using?  Edit: this meaning client/daemon
emacs,3docsc,Is_At_Work,1 point,Sat Jul 18 20:02:36 2015 UTC,"Put the following in top of your init.el:  (require 'server)  (unless (server-running-p)  (server-start))  Then on the shortcut of Emacs of whatever in your Windows, in properties try to change the ""Start in""  or ""Target"" in  C:\Dropbox\Emacs\bin\emacsclientw.exe --alternate-editor=""C:\Dropbox\Emacs\bin\runemacs.exe"" -c  When the server starts, every time when you start Emacs with a shortcut key of something, it will instantly pop up. :-).   Could you let me know if you managed to do so?"
emacs,3docsc,ReneFroger,1 point,Sun Jul 19 13:16:35 2015 UTC,"It works as long as I don't close the first window.  On my other machines I have a headless daemon running on start that I can then just connect to.  Therefore, I can close all visible instances of emacs and then re-open it immediately because the daemon is still running."
emacs,3docsc,Is_At_Work,1 point,Mon Jul 20 20:42:03 2015 UTC,"What about VirtuaWin where you can put Emacs instance in the first desktop, and then switch to the second desktop? Then you will never see him."
emacs,3docsc,ReneFroger,1 point,Tue Jul 21 07:05:56 2015 UTC,Interesting thought. Going to skip the sourceforge page but with Windows 10 right around the corner I can use its version of virtual desktop.
emacs,3docsc,Is_At_Work,2,Tue Jul 21 15:25:47 2015 UTC,"Compile it with athena/lucid, though. There is a long standing gtk bug that closes the server when the last frame is closed. There is no issue on macintosh, iirc, but I don't use one, so don't quote me on that. (Unless you want to: I'm not your parent; I can't tell you who to quote.)"
emacs,3docsc,Triclops200,2,Sat Jul 18 00:24:38 2015 UTC,There is a bug if the X server crashes while a gtk3 app is active. But closing emacs will not trigger the bug. In 10+ years I've seen the bug once.
emacs,3docsc,mmaug,1 point,Sat Jul 18 05:27:54 2015 UTC,I don't experience this with GTK emacs on Arch Linux or Ubuntu.  I'd hate for anyone to have to use lucid emacs.  blech.
emacs,3docsc,lykwydchykyn,1 point,Sat Jul 18 02:46:06 2015 UTC,Yup
emacs,3docsc,acr4,1 point,Fri Jul 17 23:27:11 2015 UTC,Yeah I thought about that but honestly I don't even notice the difference (I have an ssd so that probably helps). I imagine that has to do with being a Free Software project for 25 years. Turns out it's probably some really good code under there.
emacs,3docsc,Codile,5,Sat Jul 18 00:20:08 2015 UTC,"Believe me. There's a huge difference between using the daemon and not using the daemon. At least when you're using packages. Here's my emacs configuration, and when you look at it, you can see that there are lots of packages being loaded. Now I never timed how long it takes emacs --daemon to finish, but it's at least a few seconds. Those few seconds are a lot compared to the miniseconds it takes to start emacsclient -c.  tl;dr: using emacs without the daemon may be fast for now, but startup time will increase as you install packages. use daemon."
emacs,3docsc,jivatmann,1 point,Sat Jul 18 00:56:47 2015 UTC,"I have a ssd as well, booting stock emacs is quick, but I fiddled around with my config a lot and know it takes ca. ten seconds to load...So i always run it as a Server..."
emacs,3docsc,czipperz,1 point,Sat Jul 18 00:49:01 2015 UTC,Using a daemon has other benefits then speed. Your change history isn't discarded until you quit the daemon rather than every time you quit
emacs,3docsc,drwebb,5,Sat Jul 18 15:14:01 2015 UTC,change that alias to e and you be surprised how fast those old habits do die.
emacs,3docsc,Mitchical,6,Sat Jul 18 04:55:52 2015 UTC,"Another alias you may find useful should you put a server setup in your config is this:  alias emacs=""emacsclient -nw -a emacs -nw""       Basically, if you have an emacs server running already, it will open a new emacs terminal frame, else it will start a new emacs session in the terminal frame. A good use of this is if you want to use a  ""main emacs frame"" as well as work in other terminal windows for quick edits, you can add the following code to your emacs init.el file  (unless (server-running-p)               (server-start)))       Which says if not already running an emacs server, start one up. Personally I don't use a startup daemon since I don't always want to use emacs and when I do, I often like to change up my config and restart quickly without having to mess with systemd or something."
emacs,3docsc,ReneFroger,3,Sat Jul 18 09:43:17 2015 UTC,You're welcome!
emacs,3docsc,Sonarman,2,Fri Jul 17 22:54:25 2015 UTC,"Welcome, refugee. Fear not, as some habits need not die. Evil-mode is awesome. As is spacemacs."
emacs,3docsc,Sonarman,2,Fri Jul 17 23:57:48 2015 UTC,"Yeah I tried Evil at first and got frustrated with it (that was about a year ago) so this time around I said screw it and spent a weekend learning the ""emacs way"" and gotta say some things are way harder right now but I like it better overall. I'm sure I only know 1/10000000000000000000000000000000000 of the available commands so I'm sure it will get easier."
emacs,3docsc,__baxx__,3,Sat Jul 18 00:18:36 2015 UTC,"Whatever works for you! But in my case, I went back and forth between Vim and Emacs for a few years before finally deciding ""fuck Vimscript"" and committing to Emacs. I avoided the use of any Vi emulation because I figured I'd get used to the Emacs Way.  However, after half a decade I still missed modal editing dearly. I switched to Evil a year ago and never looked back. For me, nothing matches the fluidity of Vim, especially with vim-surround, nerdcommenter, easymotion, etc. (All of which have equivalents for Evil). Spacemacs does a great job of integrating it with the rest of Emacs. I've never been happier with my text editor."
emacs,3docsc,kabbotta,2,Sat Jul 18 01:35:19 2015 UTC,"Spacemacs is immense, went to it from vim, I'd recommend a gander"
emacs,3docsc,el-greco,1 point,Sat Jul 18 00:56:00 2015 UTC,"If you haven't already, then consider switching your layout from this:  Ctrl - Super - Alt - Space - Alt - Super - Ctrl   to this:  Super - Alt - Ctrl - Space - Ctrl - Alt - Super   It mirrors the original lisp keyboard that emacs was developed with. It makes an enormous difference. No more spider fingers!"
emacs,3docsc,kabbotta,2,Sat Jul 18 01:15:04 2015 UTC,"So, something like this?  setxkbmap -option ctrl:swap_lalt_lctl_lwin  According to /usr/share/X11/xkb/rules/base.lst this only affects the left keys, not the right ones."
emacs,3docsc,FatSoccerMan,1 point,Sat Jul 18 01:49:54 2015 UTC,I do it by modifying ~/.Xmodmap. I have this at the end of the file:  clear Control clear Mod1 clear Mod4  keycode 37 = Super_L NoSymbol keycode 105 = Super_R NoSymbol keycode 133 = Alt_L Meta_L keycode 134 = Alt_R Meta_R keycode 64 = Control_L NoSymbol keycode 108 = Control_R NoSymbol  add Control = Control_L Control_R add Mod1 = Alt_L Alt_R add Mod4 = Super_L Super_R
emacs,3docsc,kabbotta,2,Sat Jul 18 02:03:03 2015 UTC,"I'd go super  - alt - space and then put ctrl where capslock is, easier on the fingers IMO"
emacs,3docsc,reactiveme,1 point,Sat Jul 18 05:59:55 2015 UTC,"But then you only have a ctrl on one side of the keyboard. Do you just hold capslock and type with the same hand when you need to do something like C-x C-s? That's what I used to do, but then I read a convincing article about how you shouldn't overstress one hand by only having ctrl on one side. With Ctrl right next to space, you can just barely slide your thumb to the side to hit either ctrl. I never have to use my pinky to reach for a modifier anymore.  Also, since changing, I've found that I actually like the default behavior of capslock."
emacs,3docsc,abo-abo,1 point,Sat Jul 18 06:28:27 2015 UTC,"I also made the change recently, I managed to fully replicate my vim setup, And it's a pretty complex one,"
emacs,3docsc,Mitchical,2,Sat Jul 18 09:10:19 2015 UTC,"People have mentioned the emacsclient approach, but that's not what I use (except for ItsAllText):   instead of opening Emacs inside a shell, open a shell inside Emacs:   M-x ansi-term"
emacs,3dnjuo,velxundussa,7,Fri Jul 17 18:46:26 2015 UTC,http://www.gnu.org/software/emacs/manual/
emacs,3dnjuo,_limetied_,4,Fri Jul 17 19:14:21 2015 UTC,Download and extract the Texinfo source of the manual from here and convert it:  makeinfo --force --enable-encoding -I . --no-split --docbook -o emacs-manual.xml emacs.texi  dbtoepub emacs-manual.xml  # takes a few minutes   Or use  pandoc -f docbook -t epub -o emacs-manual.epub emacs-manual.xml   if you do not have dbtoepub available.  Finally transfer emacs-manual.epub to your Android device for use with an e-book reader application.
emacs,3dnjuo,X700,3,Fri Jul 17 21:19:03 2015 UTC,"Honestly, you probably won't use 70% of the stuff you read in the manual on a daily basis. Much better to just use the built-in emacs tutorial to get a basic feel and then move forward from there."
emacs,3dnjuo,greenokapi,2,Fri Jul 17 20:48:07 2015 UTC,"The Mastering Emacs book pdf page size is perfect for a 7"" tablet. I use Moon+ Reader on Nexus 7."
emacs,3dnjuo,kaushalmodi,1 point,Fri Jul 17 20:56:07 2015 UTC,"Sort of tangential, but there's a app for reading emacs doc strings on Android. I use it frequently because not all docstrings are on the manual.  https://play.google.com/store/apps/details?id=com.malabarba.emacsdocumentation It's open source and there's a link to a free version too."
emacs,3dnjuo,BruceConnor,1 point,Sun Jul 19 14:59:29 2015 UTC,I'll leave it to you to explore the detail (since I've never felt the need!) but all the interactive help in emacs is in texinfo format. This was designed to be able to be easily formated into printed documentation as well as hypertext.  See here for information about formatting it as pdf. You could if you really desired customise the formatting to produce pages of the perfect aspect ratio and text size for your chosen screen. This of course works not only for the core emacs manual but also the manual of any of the major packages.
emacs,3dn226,ganglygorilla,1 point,Fri Jul 17 16:34:31 2015 UTC,"Unsure if this is the solution, but there is a function called  (sp--update-override-key-bindings)   which may need to be called after you set the new keys?"
emacs,3dn226,Mitchical,1 point,Sat Jul 18 10:27:49 2015 UTC,"That totally worked /u/Mithical , thanks!"
emacs,3dlrti,khyo,1 point,Fri Jul 17 08:25:07 2015 UTC,You can store GDB commands in a configuration file and load them with the 'source' command. Just put all 300 watch points in one and source it. Also ~/.gdbinit can contain commands and is loaded when GDB starts.
emacs,3djfrc,screaming_for_memes,24,Thu Jul 16 19:29:48 2015 UTC,"I don't think there has ever been good justification for their notability policy. I think at some point people on Wikipedia became embarrassed by the depth of coverage on certain topics but the lack of coverage on other topics that they thought were more important. But that has nothing to do with the goals of an encyclopedia. Traditional encyclopedias deleted articles to make room for other articles, but that isn't the case here.  I think there could be other reasons to justify deleting an article, but notability shouldn't be one of them. The best reason would be if the contents of the article became inaccurate over time and no one wanted to step up to maintain the article. Even then, the article should at least be archived, and put into ""archive mode"", in case someone does step up later.  But this notability stuff, in my opinion, is really damaging for Wikipedia. The main reason is that it hurts morale. This is disastrous for a project that depends on volunteers. When you delete an article that someone spent time and effort on, well, you may never hear about it. You probably just destroyed some of that person's passion for getting involved in Wikipedia, but he will probably never tell anyone about it. Someday he might just stop contributing, and find something else to spend his time on.  Then the people left at Wikipedia will wonder why they are running short on volunteers. After much soul searching they will conclude that the user interface for editing articles on Wikipedia must be too difficult to use."
emacs,3djfrc,parolang,8,Fri Jul 17 01:55:28 2015 UTC,"Add to this the fact that Wikipedia editorial debates are often amazingly bureaucratic and anal-retentive, with power users humorlessly citing chapter and verse of Wikipedia's voluminous policy documents (accompanied by intricate markup) to bulldoze the opposition. It's some of the least fun you can have on the Internet."
emacs,3djfrc,atomic_rabbit,2,Fri Jul 17 13:01:27 2015 UTC,"Wikipedia has as a fundamental principle that any claim should be reasonably verifiable by any reader. Pursuant to this is that notability is established if the subject receives significant coverage by at least two independent reliable sources. This allows for an actual article (content-wise) and for readers to be able to verify the claims.   Wikipedia is trying to be an encyclopedia and not just a repository for anyone to talk about whatever they want to talk about.  Honestly it sounds like you don't actually understand Wikipedia's notability policy, which is fine as Wikipedia defines plenty of terms in ways that don't necessarily match common use but do have meaning within Wikipedia.   The best reason would be if the contents of the article became inaccurate over time and no one wanted to step up to maintain the article. Even then, the article should at least be archived, and put into ""archive mode"", in case someone does step up later.   Fortunately this flies against multiple policies and guidelines as it is a terrible idea. If something becomes inaccurate then it should be tagged as such and anyone who cares can come along and update it. At least it will be tagged. One Wikipedia guideline is that once something is notable then it is forever notable. What's worth keeping in a repository does not depend on its current state of popularity.   But this notability stuff, in my opinion, is really damaging for Wikipedia. The main reason is that it hurts morale.   There's a lot of things on Wikipedia that can hurt morale, but honestly I don't know the solution. Wikipedians are trying to make a high quality repository of knowledge therefore there has to be rules and standards otherwise it's just everyone's personal blog. Having standards means that those people who don't understand those standards (or agree with them) will find the process demoralizing. But it's the nature of any project like this.   You probably just destroyed some of that person's passion for getting involved in Wikipedia, but he will probably never tell anyone about it.   Yep, we always try to explain why we did what we did and how to avoid a similar situation in the future. It's never easy and sometimes unpleasant."
emacs,3djfrc,bfootdav,1 point,Sat Jul 18 22:26:20 2015 UTC,X-post Subreddit Link: /r/linux   Original post: https://www.reddit.com/r/linux/comments/3djec4/the_creator_of_dunnet_the_emacs_text_game/
emacs,3dkb0b,Turing_Machinegun,1 point,Thu Jul 16 23:25:16 2015 UTC,"Nice, but i couldn't get it working. The Syntax !| is not recognized...Do I have to set some org-variable first?"
emacs,3dkb0b,jivatmann,2,Fri Jul 17 23:01:43 2015 UTC,"It should work with your delimiters, so if you didn't set any you have to use the default ones which should be ""[""  and ""]"". Let me know if it works this way."
emacs,3dkb0b,jivatmann,1 point,Sat Jul 18 08:32:53 2015 UTC,"I'm just starting to use org-drill so i wasn't sure how it works at all. Know I got it working, as you said it works with the default delimiters. Thanks! Very useful!"
emacs,3dkb0b,olmu1944,1 point,Sat Jul 18 12:34:38 2015 UTC,"Great! Thanks, it's a small thing but surprisingly useful. Maybe there's a better way to go about it though, my elisp experience is limited to some pretty basic customizations and now this. I kind of hoped for someone to comment on the code, just to get some feedback."
emacs,3dh4ni,xenow,12,Thu Jul 16 05:55:01 2015 UTC,"Slugelisp - like M-x list-packages, but slower   You really know how to sell your post lol."
emacs,3dh4ni,eddiemon,4,Thu Jul 16 08:08:29 2015 UTC,This is pointless and I love it.
emacs,3dh4ni,BruceConnor,2,Thu Jul 16 08:42:53 2015 UTC,"I like it ! We can see the documentation of the package, on melpa.org we can not (most of the time), and we can search the readme contents.   Thx !"
emacs,3dh4ni,dzecniv,2,Thu Jul 16 22:52:29 2015 UTC,Funny. You had the same for quicklisp: https://github.com/ahungry/sluglisp  and this is the repo: https://github.com/ahungry/slugelisp
emacs,3dh4ni,dzecniv,1 point,Thu Jul 16 23:08:30 2015 UTC,It is definitely a derivative :) I use both common lisp and emacs and their package systems are similar in my opinion
emacs,3dh4ni,instant_sunshine,1 point,Thu Jul 16 23:57:39 2015 UTC,"This is broken, I don't love that."
emacs,3dh4ni,instant_sunshine,0,Thu Jul 16 08:56:42 2015 UTC,"Up again, I think aggressive crawlers brought it down"
emacs,3dh4ni,instant_sunshine,1 point,Thu Jul 16 11:51:03 2015 UTC,down again.... I really would like to just how slow this thing is
emacs,3dh4ni,instant_sunshine,1 point,Fri Jul 17 13:39:01 2015 UTC,Should be good again!
emacs,3dh4ni,Grue,1 point,Fri Jul 17 19:40:44 2015 UTC,"Not bad, could use a bit cleaner styling, and the github stars seem out of whack in some cases.  Not bad though.  Not sure what benefit this has over doing some pull-requests on MELPA to beef it up...? What was your motivation to do a standalone effort?"
emacs,3dirjv,Volt,1 point,Thu Jul 16 16:34:55 2015 UTC,You have to add osx layer that has a package that fixed this problem.
emacs,3dirjv,tuhdo,2,Thu Jul 16 17:15:46 2015 UTC,"Indeed, probably exec-path-from-shell."
emacs,3dirjv,purcell,1 point,Thu Jul 16 19:53:32 2015 UTC,"Thanks, that did the trick!"
emacs,3dirjv,instant_sunshine,1 point,Thu Jul 16 20:35:13 2015 UTC,"Hmm… I think I did that, but it still doesn't work.  (defun dotspacemacs/layers ()   ""Configuration Layers declaration.""   (setq-default    ;; List of additional paths where to look for configuration layers.    ;; Paths must have a trailing slash (ie. `~/.mycontribs/')    dotspacemacs-configuration-layer-path '()    ;; List of configuration layers to load. If it is the symbol `all' instead    ;; of a list then all discovered layers will be installed.    dotspacemacs-configuration-layers    '(osx)    ;; A list of packages and/or extensions that will not be install and loaded.    dotspacemacs-excluded-packages '()    ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that    ;; are declared in a layer which is not a member of    ;; the list `dotspacemacs-configuration-layers'    dotspacemacs-delete-orphan-packages t))   Oh well."
emacs,3dfn42,feoh,18,Wed Jul 15 22:06:49 2015 UTC,"I personally think of emacs less as a text editor and more as an incredibly powerful programming environment hyper optimized for working with text   Which is true. Emacs is a Lisp machine emulator with a couple of Lisp programs preinstalled, including one that resembles a text editor."
emacs,3dfn42,rhabarba,9,Wed Jul 15 23:28:05 2015 UTC,"I expected an unbiased point by point comparison between emacs and vim, instead I am treated yet to another simplistic ""uh, I think they are both nice..."" puff pieces.  Oh well, nothing to learn here, move on."
emacs,3dfn42,F4il3d,2,Thu Jul 16 09:48:07 2015 UTC,Heh! I challenge you to write the amazing scintillating point by point comparison you speak of.  Sounds like a good read.
emacs,3dfn42,F4il3d,3,Thu Jul 16 14:13:02 2015 UTC,"I did not claim that I could ( not familiar enough with vim).  I was disappointed that I was unable to learn anything new in the vim front, specially since the name of the article made it sound that some insights would be reveled."
emacs,3dfn42,abo-abo,1 point,Thu Jul 16 17:48:39 2015 UTC,"In that case I'm sorry that I mis-lead you.  My goal was not to educate users about Vim, but to provide some personal insights and experience gained from many years of using both to someone who is just starting out, a bit bewildered, and is looking for some hints to help them make their choice.  Could you suggest a better title that mightn't have mislead you so?"
emacs,3dfn42,yellowviper,8,Thu Jul 16 17:59:31 2015 UTC,"For me the ""editor wars"" or ""editor religion"" seems like something that was invented to add color and excitement. This is a non-issue.  Vim is more popular than Emacs. That's a fact. It is more popular (only) because vi is installed everywhere by default. That's a fact.  It's not even fair to compare Emacs and Vi, since Vi is only an editing method, while Emacs is an environment.  You can implement a method everywhere:   the Vi method is implemented in Vi and Vim, in their crappy single thread environment (even Vimmers will agree that it's crappy). the Vi method is implemented in Emacs through evil mode and many others.   Emacs, unlike Vim, is a great environment. The only issue that people seem to have is that the default editing method in Emacs isn't Vi-like. Which is OK, since most people are actually more comfortable with the Emacs method, and you can customize it instantly.  I think people have started to realize it with Spacemacs, which is a pre-configured Emacs that has the Vi method on by default. If not for the built-in thing that Vim has going for it, it would drop in popularity almost instantly, since Spacemacs is superior to Vim in almost every way."
emacs,3dfn42,yellowviper,1 point,Thu Jul 16 07:52:17 2015 UTC,"I think the biggest reason I ever use vi, even more than it being installed everywhere, is that it loads up so fast. With emacs it's a lot slower, but of course emacs server alleviates the issues other than an initial load. Still it means that if something is wrong or I just ssh'd into a machine the first time and need to edit one file for a few seconds I use vim. But otherwise emacs is just far superior."
emacs,3dfn42,xenow,1 point,Fri Jul 17 04:06:58 2015 UTC,Are you sure that's still the case? emacs comes up lickety split for me.  I think loading time these days is a red herring.  Just say you prefer Vim and be honest about it :)
emacs,3dfn42,spoofedexistence,2,Fri Jul 17 17:56:46 2015 UTC,"Oh no I use only emacs for anything that is more than changing a single line. I really don't like vim, it's too hard to use imo. Who thought having to press i or a to add text was a good idea."
emacs,3dfn42,lawlist,10,Fri Jul 17 18:12:28 2015 UTC,"With no add-ons or plug ins / no configuration time,  vim wins.  Add in some time making it better, vim can never catch emacs."
emacs,3dfn42,mgoerlich,1 point,Wed Jul 15 22:11:49 2015 UTC,"That's some very ambiguous statements, can you elaborate?"
emacs,3dfn42,fantastipants,3,Wed Jul 15 23:47:17 2015 UTC,"Does Vim do imap email management, calendar management of tasks and events with different calendar views, and file management (get marked files, copy, rename, delete, change permissions, send marked files to email attachment, etc.)?"
emacs,3dfn42,yellowviper,-11,Thu Jul 16 02:46:01 2015 UTC,"Thanks, i already have a Operating System, all i need is a Editor"
emacs,3dfn42,phalp,5,Thu Jul 16 04:40:48 2015 UTC,"Operating systems do not do any of those things.  Courtesy of Emacs, I frankly don't much care whether I'm on OS X, Windows (providing I have cygwin) or any flavor of Linux.  Though please don't make me work in Windows again :).  An OS is really just a bootloader for Emacs, and a few other tools that do their job better than Emacs does it, like a web browser."
emacs,3dfn42,dano,1 point,Thu Jul 16 13:01:48 2015 UTC,The only thing I wish emacs did over the os was to allow some sort of smart mapping like dual with autohotkey so I can use the space bar like ctrl. it could also be a better solution than ahk.
emacs,3dfn42,kraml,2,Fri Jul 17 04:02:26 2015 UTC,"Desktop environment, not operating system."
emacs,3dfn42,gnzlbg,1 point,Thu Jul 16 16:36:27 2015 UTC,"I think it's an off the cuff over generalization.  I also think it's highly subjective, which I tried to avoid as best I could in the article."
emacs,3dfn42,ihatecatsandpeople,11,Fri Jul 17 17:55:19 2015 UTC,IMHO getting comfortable enough with either vi or emacs so that it doesn't get in your way is worth more than any of the benefits that either confers.
emacs,3dfn42,gnzlbg,1 point,Wed Jul 15 23:09:34 2015 UTC,"Definitely some wisdom there - from the Pragmatic Programmer: ""Learn one editor. Learn it well"".  I used Vim for 15 years and only switched when it was SERIOUSLY cramping my productivity."
emacs,3dfn42,kraml,14,Fri Jul 17 17:57:34 2015 UTC,"Failed to mention evil-mode, which results in the the best of both worlds."
emacs,3dfzxt,maxpowersb99,3,Wed Jul 15 23:47:05 2015 UTC,"I'm on the phone so I didn't try, but  Move cursor to just before ], and C-S-) will do that, I think."
emacs,3dfzxt,jinwoo68,1 point,Thu Jul 16 01:06:10 2015 UTC,"Awesome thanks, does the trick."
emacs,3dfzxt,abo-abo,2,Thu Jul 16 15:25:20 2015 UTC,"With lispy package, you only need to press >, which calls lispy-slurp.  It also has got a tonne of stuff useful for Clojure: you can eval with e and debug with xj.  See also my post on lispy and Clojure."
emacs,3dfzxt,nautola,1 point,Thu Jul 16 06:44:29 2015 UTC,Will give it a spin thanks.
emacs,3des5t,nautola,6,Wed Jul 15 18:29:47 2015 UTC,Here you go:  http://emacs.stackexchange.com/questions/3079/practical-benefits-of-new-advice-system-in-emacs-24-4
emacs,3des5t,lawlist,0,Wed Jul 15 19:36:23 2015 UTC,My face when I was reading your post. I don't have any idea what you're talking about.
emacs,3des5t,ReneFroger,1 point,Wed Jul 15 19:26:54 2015 UTC,Now I'm wondering if there was a new advice syntax.
emacs,3des5t,agumonkey,1 point,Wed Jul 15 19:33:41 2015 UTC,There is
emacs,3dbxc7,trimatrix,10,Wed Jul 15 01:59:16 2015 UTC,I just use elpy with a jedi backend.  Works fine with Python3 on my arch boxes.
emacs,3dbxc7,lykwydchykyn,4,Wed Jul 15 03:42:54 2015 UTC,Same here: Jedi and elpy.
emacs,3dbxc7,erewok,1 point,Wed Jul 15 03:56:29 2015 UTC,I tried to configure jedi.el to read my project's virtualenv and couldn't ever get it to work. Does elpy help with that?
emacs,3dbxc7,drjeats,4,Wed Jul 15 18:25:06 2015 UTC,Go with jedi it is super easy to set up and comes with a real nice backend for company-mode.
emacs,3dbxc7,__coffeecup__,5,Wed Jul 15 03:04:47 2015 UTC,You want elpy: https://github.com/jorgenschaefer/elpy
emacs,3dbxc7,catern,1 point,Wed Jul 15 03:42:49 2015 UTC,I like anaconda. I don't use company because i want to use helm for completion tasks. With anaconda this is easy to setup.
emacs,3dbxc7,jivatmann,1 point,Wed Jul 15 11:05:13 2015 UTC,Take a look how spacemacs has done it. I use spacemacs and add custom layers for any personal modifications.  https://github.com/syl20bnr/spacemacs/tree/develop/contrib/!lang/python
emacs,3dbxc7,user104_taken,1 point,Wed Jul 15 14:34:33 2015 UTC,I just use anaconda-mode with pyenv (with .dir-locals for automatically pyenv activation). Works fine for both 2.x and 3.x
emacs,3dbxc7,ssbb_me,1 point,Thu Jul 16 08:51:58 2015 UTC,Yep
emacs,3dbxc7,atilaneves,1 point,Thu Jul 16 09:44:50 2015 UTC,I used to use Elpy with jedi as its backend. Now I just use company-jedi and jedi.el. I mostly do Python programming.
emacs,3d98xf,anon1253,3,Tue Jul 14 14:23:53 2015 UTC,"I read somewhere that it's been proposed and is coming in a future release, but I can't seem to find the link for some reason. Maybe someone else will be able to provide it."
emacs,3d98xf,into_lexicons,7,Tue Jul 14 14:45:13 2015 UTC,http://lists.gnu.org/archive/html/emacs-devel/2015-01/msg00024.html
emacs,3d98xf,vermiculus,3,Tue Jul 14 14:57:09 2015 UTC,"I've also heard what /u/into_lexicons notes, but I'll note this can be done without ligature support on a per-font basis. It's not fundamentally different from prettify-symbols-mode – the infrastructure just has to be built out (which really isn't that difficult)."
emacs,3d98xf,parolang,3,Wed Jul 15 00:18:36 2015 UTC,Sounds awesome! I think there are free as in freedom fonts out there that support this too. But the future looks bright! https://mobile.twitter.com/voodoosoop/status/523783970920878080
emacs,3d98xf,TweetsInCommentsBot,1 point,Thu Jul 16 00:30:28 2015 UTC,@voodoosoop   2014-10-19 10:33 UTC  Progress on #hasklig emacs haskell mode support for next release! @chrisbiscardi @christopherdone @mwotton @dysinger   [Attached pic] [Imgur rehost]     This message was created by a bot  [Contact creator][Source code]
emacs,3d98xf,wrong_assumption,2,Thu Jul 16 00:30:37 2015 UTC,I'm even more curious to know which editors do support ligatures.
emacs,3d9fej,bge0,1 point,Tue Jul 14 15:14:41 2015 UTC,term has been able to handle every ncurses abuse i've thrown at it – what's actually causing the issue? what program?
emacs,3d9fej,vermiculus,1 point,Wed Jul 15 00:19:30 2015 UTC,Python progressbar
emacs,3d9fej,agnudawn,1 point,Wed Jul 15 07:15:47 2015 UTC,"If you're using shell or eshell, the issue might be that they aren't full terminal emulators.  But even in terminal emulator mode (term, ansi-term) there are a few things that don't work quite correctly.  With eshell on recent versions of emacs, you can spawn certain programs in their own terminal emulator buffer -- it should do this by default when you run programs like 'top' or 'vi'.  To add your own, look into customizing the variables: eshell-visual-commands, eshell-visual-subcommands, eshell-visual-options.  If this doesn't fix the issue, it is probably related to the emulator's handling of some ANSI escape sequences.  Namely, I seem to remember ^[[0G not working correctly."
emacs,3d9fej,agnudawn,1 point,Wed Jul 15 02:43:13 2015 UTC,Great thanks I'll give this a shot
emacs,3d8ity,__baxx__,1 point,Tue Jul 14 09:47:29 2015 UTC,"I have the following  (key-chord-define evil-insert-state-map ""jk"" 'evil-normal-state)  in my setup. I still can use j and k without any delay and still do 5k. So your issue is propably related to your conifguration. Try to bisect your configuration to find the bug. Note that I don't use Spacemacs."
emacs,3d8ity,ReneFroger,1 point,Tue Jul 14 11:54:46 2015 UTC,"Cool seems to be sorted now, cheers"
emacs,3d8ity,ReneFroger,1 point,Tue Jul 14 12:14:40 2015 UTC,Ok. Propably you had keychord setting somewhere with evil-normal-state-map which will cause delay..
emacs,3d8ity,ReneFroger,1 point,Tue Jul 14 12:41:07 2015 UTC,"The keychord problem was ( i think ) that I hadn't added the package to the spacemacs additional packages section, so It just got removed on restart!   When using something like  (setq-default evil-escape-key-sequence ""jk"")   there are problems though.   At the moment it seems to be alright, I guess that I can't use this as an ESC in other areas (helm things and whatnot) like evil-escape-key-sequence, but it's miles better for general editing.   cheers"
emacs,3d8l38,jibbit,2,Tue Jul 14 10:16:24 2015 UTC,You can customize projectile-rails-javascript-dirs.  And you could have found that out yourself by searching for app/assets/javascripts in projectile-rails.el.
emacs,3d8l38,hvis,1 point,Tue Jul 14 11:26:33 2015 UTC,That's brilliant thanks very much for your help
emacs,3d7nkg,parolang,8,Tue Jul 14 03:48:59 2015 UTC,"I don't use anything left of the closing bracket, including RET and DEL.  With an extra modifier, it's pretty efficient. I got a numpad-less keyboard, since I don't need one.  I'm thinking of switching to Happy Hacking, since I don't need arrow or page keys."
emacs,3d7nkg,abo-abo,2,Tue Jul 14 08:14:00 2015 UTC,This is amazing thank you for sharing this!!
emacs,3d7nkg,__coffeecup__,1 point,Tue Jul 14 09:15:59 2015 UTC,"For folks interested in rolling their own elaborate control & special character mapping, this might possibly provide another inspiration or two. While the alphabetic level is genetically optimized for 50% Germain and 50% English, the control layer is manually designed and transfers well to other layouts, though you need a modifier key to spare. These days, I prefer the embedded arrow block and home/del/etc. keys to the traditional Emacs bindings."
emacs,3d7nkg,eigengrau82,1 point,Tue Jul 14 10:49:54 2015 UTC,"this keybinding layout is RSI inducing. It makes the ; (pinky) key as lead key, which increases the pinky usage some 10 fold. Worse, several very often used command such as insert line break, insert underscore, insert hyphen, now becomes a 2-key combination. There's quite a lot new emacs hotkey systems these days, i'd say this is worst."
emacs,3d7nkg,xah,2,Thu Jul 16 21:30:24 2015 UTC,"this keybinding layout is RSI inducing. It makes the ; (pinky) key as lead key, which increases the pinky usage some 10 fold.   Don't knock it till you've tried it. I've used it for almost 4 years now, went from symptoms of RSI to no RSI whatsoever.  My right pinky hurts a lot more when pressing the physical RET or DEL. It doesn't hurt at all when it's in the touch typing position on ;.   Worse, several very often used command such as insert line break, insert underscore, insert hyphen, now becomes a 2-key combination. There's quite a lot new emacs hotkey systems these days, i'd say this is worst.   Underscore was always 2-key: S--. And hyphen is as bad as RET or DEL at reach-ability.  With my setup, both underscore and hyphen are on the home row."
emacs,3d7nkg,abo-abo,1 point,Fri Jul 17 06:59:31 2015 UTC,"I see. Thanks. I guess each person is different. I had a RSI bout that eventually traced to the ring finger pressing the qwerty x. Now i avoid any heavy use of pinky or ring finger.  but still, just opinion, these days there are lots ways to make lead key as thumb. e.g. space, or a combination such df pressed together, or ergodox with lots thumbkeys..., i can't say it improves things much by making a pinky do more stuff. For example, in your method, what if the lead key is say 7? 7 is pressed by index finger, and is less occuring. Though, it's a bit further than the homerow's semicolon, but improve by using middle finger than pinky. Would you think that'd be improvement?"
emacs,3d7nkg,xah,2,Fri Jul 17 08:03:24 2015 UTC,"7 is pressed by index finger, and is less occuring. Though, it's a bit further than the homerow's semicolon, but improve by using middle finger than pinky. Would you think that'd be improvement?   For someone with very long fingers, maybe. I have to completely bend my other 3 fingers to reach 7 with my index finger from the touch typing position.  Normally, I completely abandon the touch typing position when entering digits.  Just to make it more clear: with my current setup, the right pinky almost never moves: it's always resting on the ; modifier. The only other key that I sometimes press with right pinky is the right Shift.  On a mechanical keyboard with brown switches, I can press ; only half-way for it to trigger."
emacs,3d7nkg,abo-abo,1 point,Fri Jul 17 08:32:58 2015 UTC,"egads, it's abo-abo, the creator of avy-jump and other i think pretty cool packages. hi there."
emacs,3d7nkg,xah,3,Thu Jul 16 21:31:58 2015 UTC,"there's a stigma against using the mouse   Well earned - talk to a physical therapist about this one!  If you worry about your hands with heavy use, you owe it to yourself to use the mouse as little as possible.  And if you intend to become a professional programmer but don't know how to touch type - well, you should.  Remember, a good chunk of your life will be writing things that aren't code - technical documents, questions of other people, reddit posts... :-)  It'd take you a few weeks to learn and it's a skill you can use for the rest of your life.  Someone once told me that I typed faster than they could read which says something about both of us."
emacs,3d7nkg,TomSwirly,1 point,Tue Jul 14 15:15:50 2015 UTC,Yep.  Been programming since the 70s.  Too much of the time since the mid 80s has been with a mouse.  My right elbow and wrist are SCREWED.
emacs,3d7nkg,madwilliamflint,5,Tue Jul 14 17:18:09 2015 UTC,"I personally have learned to become more of a touch typist in the last week. I recently disabled <return>, <backspace>, and <tab> in Emacs, in favor of using the control keys:   <tab> indents correctly the current line (or goes with the previous line's indent). BTW Use C-q C-i to insert a tab character, or M-i to simulate one with spaces C-j  like <return> except it doesn't tab either line C-o  creates a new line after the cursor but doesn't move the cursor to it. Does not tab either line C-m  same as <return> C-i  same as <tab>  -- I use this because I have a custom keyboard layout where i is on the home row C-[ same as <escape> C-h  I have bound to DEL (before cursor, while C-d is after cursor)   Pro tip to type faster: force yourself to put the correct finger on the key you want when you reach for ,./. Very time saving!  Please for the love of god rebind <caps-lock> to <control>. Save yourself from Emacs pinky.  Edit: On Emacs 24.3 C-j and C-m's purposes are switched from 24.4/5 Arch. This is reversed by setting something about electric new lines."
emacs,3d7nkg,czipperz,2,Tue Jul 14 04:36:47 2015 UTC,"I think the only one I wouldn't get used to is C-h, I have the help map pretty well trained. Also I hardly ever use escape. I used to use it for meta when I had a window manager that stole M-spc, but now I use Window Maker.  Also I disagree that you're actually saving yourself emacs pinky by using caps lock for control--you're still using your pinky. I have both meta and control bound near the space bar so that they are thumb keys. I highly recommend it."
emacs,3d7nkg,jivatmann,3,Tue Jul 14 10:04:20 2015 UTC,"Yes CAPSLOCK mapped to CONTROL is no solution. My pinky can tell you! What works really well for me is the following: When pressing SPACE on its own it inserts a space, when pressed with another key at the same time SPACE acts as CONTROL! Couldn't live without that anymore. For Linux you can achieve this behaviour with this neat package: https://github.com/alols/xcape"
emacs,3d7nkg,RobThorpe,2,Tue Jul 14 10:45:43 2015 UTC,Another solution (at least for normal keyboards) is to press ctrl with your palm. Specifically the part just below the pinky finger. I do that. On laptop keyboards I use my thumb on left ctrl (which is near the spacebar on my laptop). There are several solutions.
emacs,3d7nkg,emacsomancer,1 point,Tue Jul 14 21:24:58 2015 UTC,"I tried this, as well as Space2ctrl (which functionally ends up doing the same thing, as far as I can tell), but I couldn't get used to it.  There's no way for to avoid inadvertently triggering control sequences (and not inserting space) when I try at normal speeds."
emacs,3d7nkg,jivatmann,1 point,Wed Jul 15 00:14:51 2015 UTC,"Hm, the default of 500ms works well for me in xcape. But you can try to adjust the timing with -t option if it dosn't fit."
emacs,3d7nkg,emacsomancer,1 point,Wed Jul 15 11:17:08 2015 UTC,"I'm pretty sure that in my typing style there must be some overlap where I'm pressing both space and other keys, so I don't know if any of the timing options would help."
emacs,3d7nkg,emacsomancer,1 point,Wed Jul 15 20:02:16 2015 UTC,"Thanks for this list.  Obviously these are self-documented by Emacs, but they don't appear in the standard Quick Reference Guides.   (Though C-j is still a bit mysterious in its behaviour.)"
emacs,3d7nkg,stunt_penis,2,Fri Jul 17 20:57:23 2015 UTC,"I'm a vimmer, but I can answer for myself.  I touch type when entering code. I've decided what's necessary and am typing.  The act of typing is then the task, and I get it done.  Similarly, I ""touch type"" all my shortcut keys as I navigate code.  Jumping to definition, skimming through files, searching, etc, all can be done from the main keyboard, not mouse or the side-keys."
emacs,3d7nkg,iheartrms,2,Tue Jul 14 04:25:46 2015 UTC,Touch typing is the only way I know how.
emacs,3d7nkg,fantastipants,1 point,Tue Jul 14 04:44:47 2015 UTC,"Yeah - I mean, if you touch type, then why would you do anything else?  Some of the unsual keys are sometimes are a bit awkward - I often seem to make mistakes still with = or - or ] because reaching out with the little finger is not that precise, but overall it works fine.    The Emacs keys are just easier than the special keys if you're used to both.  I do go into 'browse mode' outside of Emacs and use Pg up/dn, and the TrackPoint a fair amount.  However, when I had to use a Windows desktop and used XKeymacs to get Emacs keys everywhere I was very happy to do that."
emacs,3d7nkg,iheartrms,2,Tue Jul 14 13:00:28 2015 UTC,"Yeah - I mean, if you touch type, then why would you do anything else?   This is it exactly. I almost didn't understand the question because it had never occurred to me that someone who could touch type would ever do anything else. It's like asking if everyone walks to the corner store or if you sometimes crawl."
emacs,3d7nkg,tampix77,1 point,Tue Jul 14 18:35:10 2015 UTC,"Yeah, plus why would you do (or not) it only for programming. If you really touch type then it's the only natural way to use a keyboard."
emacs,3d7nkg,Taikal,2,Wed Jul 15 06:43:22 2015 UTC,"Another example is the idea that function keys, arrow keys, and keys like page-up/page-down/home/end/etc shouldn't be used because they aren't reachable from the home row.   Actually, they shouldn't be used because they are frequent commands that are also available near the home row, and efficiency says that you should use the shortest path.  For less frequently used commands, feel free to reach for farther keys, or even the menu."
emacs,3d7nkg,xah,2,Tue Jul 14 17:26:37 2015 UTC,"your question isn't too focused on one specific thing. When it's specific, it have scientifically verifiable answers. I'll just add my opinion on a few general things. * touch typing is good. And you should learn to touch type number row too. When i begin touch typing (1985), not until i think 1995 or so i learned touched typing the number row. (in 1994 i switched to dvorak) * most emacs key advice are just habit based, and people tend to push their views. (my habit/experience is this, therefore ...) * most or all emacs keyboarding questions (typing habit, typing hotkey method, hotkey choices...), can be scientifically verified and researched. And, general conclusion can usually be reached as well. (such as whether one should use mouse, whether one should swap capslock/control), etc. * a lot keybinding or key position choices depends on whether one touch type.  ... for your question, exactly how much typing do you need to do per day on average? and what's the keyboard you use? full size, laptop, ergonomic ones, percentage on each?  i have a few hundred essays on these... Keyboard for Programers: Layouts, Shortcuts, Macros, RSI ⌨ http://xahlee.info/kbd/keyboarding.html believe it or not, judge for yourself."
emacs,3d7nkg,Boojum,1 point,Thu Jul 16 21:19:35 2015 UTC,"That depends on whether you consider touch-typing to be exclusively about using the standard home-row approach or not.  If that's what you mean then no, I don't touch-type.  But I don't have to look or consciously think about typing, either.  My typing style is fairly idiosyncratic."
emacs,3d7nkg,dmoonfire,1 point,Tue Jul 14 05:12:12 2015 UTC,I think it counts if you can type without looking at the keys.
emacs,3d7nkg,eigengrau82,1 point,Tue Jul 14 09:57:13 2015 UTC,"I'm a touch typist, but I don't mind the return or even the control key. Probably because I have big hands.  While programming, I find that I usually plan in my head as I'm typing so I can maintain a pretty good buffer for typing. Seems to work for me."
emacs,3d7nkg,ares623,1 point,Tue Jul 14 05:18:49 2015 UTC,"For me, the main motivation to learn how to type properly were ergonomics. Using the ad-hoc system I developed as a kid and carried over into adult life, I got pains in my fingers more frequently in the months before I switched. These pains have not resurfaced ever after; though I also switched to an ergonomically optimized keyboard layout at the same time, so I cannot tell these two changes apart. (Though, if you are going to learn a proper typing habit, it might make sense for you to also move away from QWERTY or your local variant, and my guess would be that the touch typing benefit using QWERTY is much less significant).  Another factor concerning ergonomics, which I noticed after my switch, is that typing is much smoother and less cognitively effortful than before, when my hands were moving all over the place, which would take its toll on maintaining a train of thought.  While switching to a proper layout and typing regime did give me a boost in typing speed, the big game changer for me were ergonomics."
emacs,3d7nkg,hvis,1 point,Tue Jul 14 06:17:42 2015 UTC,I'm an almost-full touch-typist (I guess the only improvement is that I only use the left shift key 99% of the time)  I have small hands so touch-typing is a must.
emacs,3d7nkg,instant_sunshine,1 point,Tue Jul 14 10:31:03 2015 UTC,"I touch-type, and I often use the mouse (in the browser, or to scroll a window when reading, usually not for navigation in the code). Home/PgUp/PgDown/End are my friends too, when I'm reading.  I often press Return with my right pinky, and almost never use function or arrow keys in Emacs."
emacs,3d7nkg,madwilliamflint,1 point,Tue Jul 14 13:29:35 2015 UTC,Yes but only 40~ WPM
emacs,3d7nkg,pangrametry,1 point,Tue Jul 14 14:26:15 2015 UTC,"I do, definitely.  When I'm in the zone my hands never leave the keyboard and my eyes never touch it.  Every time I have to move my hand to the mouse and back is lost focus.  I don't have TOO many remappings, because I'm pretty frequently switching between machines and can ""usually but not always"" get my .emacs installed."
emacs,3d7nkg,RobThorpe,1 point,Tue Jul 14 17:18:58 2015 UTC,"I touch type period.  I can't look at a keyboard (I type dvorak and am too lazy to switch keycaps around, plus I use a Kinesis Freestyle), although I do use a few function keys, they're mostly for rarely used things."
emacs,3d7nkg,lawlist,1 point,Tue Jul 14 20:11:55 2015 UTC,"As the OP says, programming is mostly about thinking. Typing speed isn't that important.  But....  Writing documentation involves a lot of typing, so does writing reports and emails. There's debugging which involves using the commands and/or keybindings of the debugger. Then there's questions to forums and all the things you do outside of work with a computer. I've gained far more from touch typing in these areas than for typing in code."
emacs,3d7nkg,atilaneves,1 point,Tue Jul 14 21:29:21 2015 UTC,"I come from a secretarial background, and can type 100+ words per minute when reading/copying plain text -- including the number row on top of the keyboard.  I typed 77 wpm on a manual typewriter back in the eighth grade.  I hobby program at about 3 to 5 words per minute, or zero wpm If I'm thinking . . .  Hat's off to anyone who can think in program-ese faster than they type."
emacs,3d7nkg,meegee,1 point,Tue Jul 14 21:57:32 2015 UTC,I taught myself touch typing last year and haven't looked back since. My keyboard doesn't even have labels on it.
emacs,3d7nkg,jsmonarch,1 point,Thu Jul 16 09:46:01 2015 UTC,"I asked a similar question a few years ago. What works best for me is to always perform keybindings with two hands while keeping them on the homerow. To achive that, I've bound both Caps Lock and Return keys to act like Ctrl when used as a modifier.  It is trivial to set this up on OS X using Karabiner and Seil.  If you are using Linux check out this post (specifically the first two comments).  Edit: Also, practicing to touch type the number row and the symbols does wonders for your productivity. http://typingweb.com has useful lessons you can use for this.  Edit 2: Looks like they renamed the platform. You can find the version I used here"
emacs,3d4hk3,srt19170,7,Mon Jul 13 13:25:57 2015 UTC,"@ieure:   2015-06-25 17:59:11 UTC  Ah, finally got my Emacs setup just how I like it. pic.twitter.com [Imgur]     [Mistake?] [Suggestion] [FAQ] [Code] [Issues]"
emacs,3d4hk3,TweetPoster,8,Mon Jul 13 13:27:13 2015 UTC,There is only some truth in this.
emacs,3d4hk3,Enfors,9,Mon Jul 13 13:33:51 2015 UTC,"I have no idea how an emacs joke got 6k retweets, normally it's only celebrities with millions of followers that get so many."
emacs,3d4hk3,its_never_lupus,13,Mon Jul 13 15:05:19 2015 UTC,No kidding.  I'll get like 27 upvotes from this :-)
emacs,3d4hk3,mordocai058,2,Mon Jul 13 16:36:09 2015 UTC,Attempting to move you closer to 27 so that this becomes true. Future readers: Do not upvote/downvote if the number of net votes is already 27. Do not obey your impulse to do the opposite of what someone tells you to.
emacs,3d4hk3,created_to_post_this,4,Mon Jul 13 18:54:25 2015 UTC,It only had ~30 retweets before the author released a major mode for retweeting it.
emacs,3d4hk3,SurviAvi,1 point,Tue Jul 14 08:30:44 2015 UTC,"Yeah, I tell myself the same thing a lot too."
emacs,3d4hk3,ieure,0,Mon Jul 13 21:01:21 2015 UTC,You and me both.
emacs,3d4hk3,agumonkey,3,Mon Jul 13 19:33:02 2015 UTC,Eight megs and constantly retweeted.
emacs,3d4hk3,starbreakerauthor,3,Mon Jul 13 21:21:11 2015 UTC,"Emacs, the editor for prog fans."
emacs,3d4hk3,Mitchical,2,Mon Jul 13 22:12:13 2015 UTC,"WAIT -- it's an editor, too? Getouttahere."
emacs,3d4hk3,phalp,1 point,Mon Jul 13 23:21:52 2015 UTC,It all makes sense now...
emacs,3d4hk3,dethnight,2,Tue Jul 14 01:35:42 2015 UTC,Maybe Donald Knuth is on to something.
emacs,3d4hk3,pangrametry,1 point,Mon Jul 13 19:40:00 2015 UTC,If he just added one more keyboard it would be so much more efficient.
emacs,3d5kkc,evaninarkham,5,Mon Jul 13 18:22:46 2015 UTC,It's ECB http://ecb.sourceforge.net
emacs,3d5kkc,haksior,3,Mon Jul 13 18:42:21 2015 UTC,Check http://www.emacswiki.org/emacs/PowerLine and https://github.com/Malabarba/smart-mode-line/
emacs,3d5kkc,caisah,3,Mon Jul 13 18:59:57 2015 UTC,It's funny when I'm reading my post from the past in the Vim section. Now I'm a Emacs'er. :D.
emacs,3d61b2,workisnotfun,3,Mon Jul 13 20:18:36 2015 UTC,"Yes. Group your matches, then use \1, \2, &c. to refer to them in the replace:  M-x replace-regexp RET <Name>\(.*\)</Name><Value>\(.*\)</Value> RET |\1|\2|   More information on the regexp-replace function help: C-h f replace-regexp RET"
emacs,3d61b2,jsled,2,Mon Jul 13 20:49:46 2015 UTC,Have you tried Anzu-mode?  You get a nice visualization of the replacement during query-replace-regexp.    I also believe you can press ! during the query stage to switch to replace-regexp.
emacs,3d53c4,TanAndBlonde,6,Mon Jul 13 16:21:29 2015 UTC,Try enabling flyspell-prog-mode. It is available since Emacs 24.1.
emacs,3d53c4,arunvr,3,Mon Jul 13 17:09:36 2015 UTC,"Yep, in the prog-mode-hook. (add-hook 'prog-mode-hook 'flyspell-prog-mode)"
emacs,3d59m6,mcandre,3,Mon Jul 13 17:07:02 2015 UTC,"Emacs 24.4 comes with improvements for ruby-mode, you can customize ruby-deep-arglist and ruby-deep-indent-paren-style for it.  Alternatively, give enh-ruby-mode a try, it's using Ruby itself for parsing the code for syntactical and indentation hints. I'm currently using that as I've got fed up with a few issues the stock mode had."
emacs,3d59m6,wasamasa,1 point,Mon Jul 13 17:23:14 2015 UTC,"enh-ruby-mode is super buggy, relies on ripper and is not maintained by anyone. I wouldn't recommend its usage to anyone. If you have issues with ruby-mode, the solution is often just M-x report-emacs-bug away."
emacs,3d59m6,bozhidarb,2,Tue Jul 14 06:05:52 2015 UTC,"Not sure what you mean by unmaintained unless you're speaking about a different repo from zenspider/enhanced-ruby-mode. I've had one bug with it so far, but got it all figured out."
emacs,3d59m6,wasamasa,1 point,Tue Jul 14 08:02:17 2015 UTC,"Hmm, I noticed there has been some activity recently there, maybe things are better now. Still, I'm quite skeptical about the usage of ripper. The modern parser gem is much easier to work with."
emacs,3d1ppn,ReneFroger,1 point,Sun Jul 12 20:24:15 2015 UTC,"Thanks for the advice. I will try it out.  Did you ever have any problems with it? Because the 'f' motion is really useful, I use it a lot. I image getting really annoyed when I want to jump to the next 'l' but switching windows instead."
emacs,3d1ppn,derhamster86,1 point,Sun Jul 12 21:26:39 2015 UTC,"It's not even a second to wait, by the way. You can modify it for other functions that you use a lot. For me, I switch between windows very often."
emacs,3d1ppn,__baxx__,1 point,Sun Jul 12 22:58:42 2015 UTC,Sounds good! Nice one
emacs,3cznpb,ralesi,6,Sun Jul 12 06:02:55 2015 UTC,I really missed ranger when I tried to switch over to emacs. Thank you
emacs,3cznpb,dakesew,2,Sun Jul 12 08:25:00 2015 UTC,"Interesting, but it doesn't work for some directories:  Debugger entered--Lisp error: (wrong-type-argument stringp nil) file-directory-p(nil) evil-ranger-setup-parents() evil-ranger-setup() evil-ranger-mode(t) evil-ranger-enable() evil-ranger-find-file(""~/documents/git/"") evil-ranger-up-directory() funcall-interactively(evil-ranger-up-directory) call-interactively(evil-ranger-up-directory nil nil) command-execute(evil-ranger-up-directory)   The directory in question contains nothing other than a few git repos, so I have no idea what could be going wrong."
emacs,3cznpb,DasEwigeLicht,1 point,Sun Jul 12 10:59:27 2015 UTC,"I have a commit that should address the nil issue, not quite sure why setup-parents returned nil in the first place though. Are there symlinks?"
emacs,3cznpb,DasEwigeLicht,1 point,Sun Jul 12 16:48:20 2015 UTC,"Nope, no symlinks, there's literally only 8 folders all leading to different git repos.  /e: It's not about the folder content apparently. Running evil-ranger-find-file ""~/Desktop"" leads to the same result and that directory is empty."
emacs,3cznpb,DasEwigeLicht,2,Sun Jul 12 17:07:58 2015 UTC,"I commited something recently that checks if parent-name is nil before checking if directory.  That might address the error, but I don't have a clue as to why it is happening.  What OS are you using? It might be how dired is treating relative paths like ~/."
emacs,3cznpb,agumonkey,1 point,Sun Jul 12 21:24:59 2015 UTC,I'm running Antergos. Your recent commits seem to have resolved the error anyway. At least I am unable to reproduce it.   Now there's a few more questions from my side:   There appears to be some debugging output in the top right corner. For my home directory it say prev:0 nil 0/3. Is there a way to turn that off? Which faces control the look of the overlay showing the current directory? That overlay is also duplicated by dired's own header showing the current directory. How do you remove that header line?
emacs,3cznpb,hyperbling,1 point,Mon Jul 13 16:24:54 2015 UTC,"I cleaned up the header line and now have a defvar called evil-ranger-header-func which can be used to output any type of output on the header.  Take a look at the next commit and set another function to this variable to get a different output.  It is not currently customized for themes, and likely in the future I will work on getting it to use already existing parts of the current theme. I am also looking into getting the redundant header from dired.  Once I get this, we will define separate custom headers for the parent folders as well."
emacs,3cznpb,kaushalmodi,2,Tue Jul 14 01:15:17 2015 UTC,Great job.
emacs,3cznpb,hyperbling,2,Sun Jul 12 11:16:31 2015 UTC,"how does this compare with dired-ranger?  also, why does it have evil in the name when it has nothing to with evil-mode?"
emacs,3cznpb,hut_,2,Sun Jul 12 15:24:07 2015 UTC,"Does it have nothing to do with evil other than vim-like bindings? I found the ranger reference intriguing but wasn't sure if I would suit me as I don't use evil. As the package is still young, may be the dev should considered renaming it so that non-evil users are not turned away from trying this package out."
emacs,3cznpb,kaushalmodi,2,Sun Jul 12 15:36:47 2015 UTC,"I based it on Evil to keep some of the same functionality that exists in both platforms (normal mode / search / visual line).  Right now, the package requires Evil to work. I will try out making this evil agnostic, but it will take more work."
emacs,3cznpb,hamsterslayer01,1 point,Sun Jul 12 16:53:13 2015 UTC,"I have a commit on the current version that checks for (featurep 'evil).  If evil is not present, it should map directly over dired-mode.  Please let me know if it works."
emacs,3cznpb,hut_,1 point,Sun Jul 12 21:26:30 2015 UTC,"if the package works without evil i'd suggest a rename to avoid people automatically assuming it's only for evil-mode.  i've never heard of ranger before, so when i first read the title i thought it had to do something over regions in evil-mode."
emacs,3cznpb,dzecniv,1 point,Sun Jul 12 22:12:14 2015 UTC,Just let me know if you get a chance to try it without evil
emacs,3cznpb,dzecniv,1 point,Tue Jul 14 01:18:26 2015 UTC,dired-ranger strives only to bring the copy / paste ring from ranger to dired.  This completely modifies the UI of dired to look more like ranger.  Copy / paste and tab support is planned in the future.
emacs,3cznpb,tampix77,1 point,Sun Jul 12 16:51:29 2015 UTC,"Wonderful :) Were you inspired by my april fools joke, where I replaced all of ranger's VI keybindings with those of emacs?  (see https://github.com/hut/ranger/tree/emacs )"
emacs,3d263i,MrUmunhum,2,Sun Jul 12 22:36:49 2015 UTC,"With unclear explaination what exactly went wrong and a badly formatted post, you are really expecting much solutions?   By the way, have you considered to upgrade to GNU Emacs 24? Many features of XEmacs are included in GNU Emacs nowadays."
emacs,3d263i,ReneFroger,2,Sun Jul 12 23:04:52 2015 UTC,"He's saying that the indicated ""<"" character, used as a ""less than"" sign, is causing an ""unmatched"" parenthesis error:  for( $zz = 0; $zz < 60; $zz++ )                   ^"
emacs,3d263i,Neurorational,2,Mon Jul 13 15:26:58 2015 UTC,"As /u/Renefroger said, you should format better your question and give more information so people can help you.  What modes are you using? Can you reproduce it using emacs -q? Can you describe exactly the steps that lead to the error?"
emacs,3d263i,Ryckes,2,Mon Jul 13 06:13:29 2015 UTC,"Switch to Fedora 21 or 22 since 20 is EOL, install the latest version of GNU Emacs 24 available because GNU Emacs is much better maintained these days, reconsider why you're generating an image with PHP, reconsider why even if you are generating an image with PHP you are writing invalid HTML to wrap it and stop embedding PHP in HTML, install php-mode from here: https://github.com/ejmr/php-mode/ and set it up how you want, and then learn how to ask questions the smart way. Actually, you can do the last one first if you want."
emacs,3d263i,ghyspran,2,Mon Jul 13 23:51:29 2015 UTC,"...install the latest version of GNU Emacs 24 available because GNU Emacs is much better maintained these days...   And also because we don't test PHP Mode with XEmacs or make any effort to support it.  --- ejmr, PHP Mode Maintainer"
emacs,3d263i,eric-plutono,1 point,Tue Jul 14 02:13:31 2015 UTC,And all other modes that support PHP at all are crap.
emacs,3d263i,ghyspran,2,Tue Jul 14 02:31:16 2015 UTC,"Web Mode is very good in my opinion.  It's better than PHP Mode when mixing PHP with HTML like the OP, or with JavaScript, or with anything really.  Personally I prefer to keep my PHP code separate from HTML and everything else whenever I can, but for situations where it can't be helped (e.g. working with an existing code-base in my experience), Web Mode does a much better job at handling that mixture of languages than we do with PHP Mode."
emacs,3cwgsu,VanLaser,4,Sat Jul 11 10:39:53 2015 UTC,"I like it, it feels like the thing first emacs dev would see printed at the time."
emacs,3cwgsu,agumonkey,4,Sat Jul 11 16:47:07 2015 UTC,It also feels/looks better when typing with a clicky switch (Chery MX Blue or Alps) mechanical keyboard (or an IBM one).
emacs,3cwgsu,agumonkey,3,Sat Jul 11 19:53:02 2015 UTC,I hear you brother
emacs,3cwgsu,ReneFroger,2,Sat Jul 11 20:02:37 2015 UTC,"If someone want to try the font out, you can download it here."
emacs,3cwgsu,ReneFroger,3,Sat Jul 11 18:21:10 2015 UTC,"It's a free font - it implements many glyphs. Because it emulates an old typewriter, 0 and 1 look very much like O and I. There are also two ligatures (fi and fj (?) i think) that vim or a terminal emulator will try to use, and they don't look good in these situations. But - using FontForge, one can alter easily (after reading some FontForge tutorials/resources) the font, by changing the 0 and 1 and removing those 2 ligatures.  Hint: it also looks very good when printed (e.g. with XeLaTeX and the verbatim package)."
emacs,3cwgsu,shackra,3,Sat Jul 11 19:48:06 2015 UTC,"I noticed that it confused me that the 1 and I looks the same, also with 0 and O. With your explaination it's clear now why this was implemented. Interesting story to know, thanks for that."
emacs,3cwgsu,t00ny,1 point,Sat Jul 11 20:25:30 2015 UTC,All work and no play makes Jack a dull boy
emacs,3cwgsu,redblobgames,1 point,Tue Jul 21 04:29:15 2015 UTC,Nyan cat in emacs!!!
emacs,3cwgsu,t00ny,1 point,Sat Jul 11 16:14:51 2015 UTC,Nyan-mode is great. The new version of nyan-mode has music too! Check out https://github.com/TeMPOraL/nyan-mode/
emacs,3cxjxl,gregsexton,1 point,Sat Jul 11 17:51:09 2015 UTC,"This pops up company completion in eshell buffers for command history if you're starting to enter a new line, otherwise company will use your regular setup. I can still complete file paths etc.  I had this idea the other day and whipped something up. It's somewhat proof of concept but already proving out to be useful to me so thought I'd share.  I should add: you'll need dash.el and s.el for this to work."
emacs,3cxjxl,ReneFroger,1 point,Sat Jul 11 17:54:55 2015 UTC,"Thanks for sharing it, gregsexton!  And to add my 2 cents, a Company backend to show suggestions when the typing word is same as the Yasnippet names that you have in your yasnippet folder.   ;; Add yasnippet support for all company backends ;; https://github.com/syl20bnr/spacemacs/pull/179 (defvar company-mode/enable-yas t   ""Enable yasnippet for all backends."")  (defun company-mode/backend-with-yas (backend)   (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))       backend     (append (if (consp backend) backend (list backend))             '(:with company-yasnippet))))  (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))  ;; Add yasnippet support for all company backends ;; https://github.com/syl20bnr/spacemacs/pull/179 (defvar company-mode/enable-yas t   ""Enable yasnippet for all backends."")  (defun company-mode/backend-with-yas (backend)   (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))       backend     (append (if (consp backend) backend (list backend))             '(:with company-yasnippet))))  (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))"
emacs,3cwf1p,SShrike,6,Sat Jul 11 10:09:44 2015 UTC,Next: share a elpa cache to avoid redownloading.
emacs,3cwf1p,agumonkey,2,Sat Jul 11 19:45:28 2015 UTC,"Good idea, I'll get onto it."
emacs,3cwf1p,cog2011,2,Sun Jul 12 08:01:04 2015 UTC,"Take a look at the variable `user-emacs-directory'; I imagine it could simplify your task.  Perhaps something as simple as this (untested):  emacs --eval '(setf user-emacs-directory ""/home/you/conf1/"")'"
emacs,3cwf1p,perlstalker,2,Sun Jul 12 09:18:59 2015 UTC,"I toyed with the idea, however in the end I decided to stick with using a ~/.emacs.d symlink for maximum compatibility with most Emacs distributions."
emacs,3cwf1p,agumonkey,1 point,Sun Jul 12 09:21:24 2015 UTC,"A simpler solution would be just use a symlink. Create your multiple directories like ~/emacs,d.custom and ~/emacs.d.spacemacs. Then create a symlink that points to the one you want to use. To change config sets, just change where the symlink points and restart emacs."
emacs,3cxhob,vittusormi,2,Sat Jul 11 17:31:43 2015 UTC,"You're doing it wrong. That binding makes no sense.  A binding needs to point to a function, you can't point it to another key and expect it to inherit is behaviour.  I'm guessing you want to replace  (kbd "")"")   With  'blink-matching-open   Or something like that to make the form correct. And even with the form correct, I'm not sure that function will behave correctly when the point I'd on a random non-paren character."
emacs,3cxhob,trezor2,2,Sat Jul 11 22:03:25 2015 UTC,"Can you confirm this is what you want to happen?  in lisp-mode     press key ä         a paren "")"" is inserted.         function blink-matching-open is called."
emacs,3cxhob,Starlight100,0,Sun Jul 12 17:24:31 2015 UTC,Yes. As you guys hopefully know Emacs does that normally without having to call the blink.
emacs,3cxhob,Starlight100,1 point,Mon Jul 13 03:15:20 2015 UTC,"Put this in your .emacs or init.el.  It should do what you want. Replace my English ""a"" with your ""ä"".  (with-eval-after-load ""lisp-mode"" ; lisp-mode.el (or .elc) in `load-path'    ;; rather than spending time to determine why inserting a paren does   ;; not invoke `blink-matching-open', I'll just define a function that   ;; explicitly inserts "")"" and calls `blink-matching-open'.   (defun my-insert-closing-paren ()       ""Insert a paren then call `blink-matching-open' to highlight the matching paren.""       (interactive)       (insert "")"")       (blink-matching-open))    ;; use `lisp-mode-shared-map' so the binding will work in all lisp modes.   ;; elisp, common lisp, scheme, clojure, etc.   (define-key lisp-mode-shared-map (kbd ""a"") #'my-insert-closing-paren))"
emacs,3cxhob,Starlight100,1 point,Mon Jul 13 14:10:24 2015 UTC,"If you're not on emacs 24.4 or later then add this to your .emacs or init.el too. It defines with-eval-after-load.  ;;for compatibility with < 24.4 emacs, define `with-eval-after-load' (unless (fboundp 'with-eval-after-load)   (defmacro with-eval-after-load (file &rest body)     ""Execute BODY after FILE is loaded. FILE is normally a feature name, but it can also be a file name, in case that file does not provide any feature.""     (declare (indent 1) (debug t))     `(eval-after-load ,file (lambda () ,@body))))"
emacs,3cxhob,Starlight100,0,Mon Jul 13 14:14:10 2015 UTC,Any reason why I need to separately call blink on that? Why can't it just blink like it always does simply by rebinding key?
emacs,3cxhob,Starlight100,2,Wed Jul 15 06:51:35 2015 UTC,"Let's see what function is normally called when we type "")"" in the buffer.  C-h k )   The "")"" key is bound to self-insert-command.  This function has a post hook that invokes 'blink-matching-open.  However in my code above I'm inserting the "")"" charcater via function insert not self-insert-command. So I don't get the 'blink-matching-open called automatically for me. That's the reason why I must explicitly call it.  So why don't we just use self-insert-command which has the hook we want? self-insert-command is written in C, not lisp. It determines what key was pressed in the C source code itself, rather than taking the key as input. So we can't use this function directly, since we can't pass it arbitrary key data.  It simply detects the real key we pressed.  We are forced to use the higher level insert function if we want to explicitly pass a "")"" character as input. Emacs was written for 1970's computers, so I assume they needed to focus on performance when you type a key."
emacs,3cxhob,sledgespread,1 point,Wed Jul 15 13:16:26 2015 UTC,"And more... You can't rebind a key like you originally wanted.  (local-set-key (kbd ""ä"") (kbd "")""))   (kbd "")"") is executed immediately and returns a string.  So your passing in a string, not a function. You can prevent the immediate execution and ""functionize"" it by wrapping it in a lambda  like (lambda () (kbd "")"")).  But this still doesn't do quite what you want. That's just a function that evaluates to a string and doesn't insert any text. You need to call insert to insert text."
emacs,3cxhob,Starlight100,2,Wed Jul 15 13:26:14 2015 UTC,"Interestingly it turns out that define-key and hence local-set-key will accept strings in the command slot. It treats them as a keyboard macro.  So (local-set-key (kbd ""ä"") (kbd "")"")) evaluates to (local-set-key (kbd ""ä"") "")"") which binds a to the keyboard macro ). So it will actually make ä insert a close paren (as long as that's what pressing close paren does in the current mode)."
emacs,3cxhob,sledgespread,1 point,Tue Jul 21 16:04:42 2015 UTC,"Oh, you're right. Learned something new."
emacs,3cxhob,sledgespread,1 point,Wed Jul 22 00:01:39 2015 UTC,"If that's not a typo: you're using local-set-key wrong. It takes as arguments a key and a function not two keys, check the help for details."
emacs,3ctjsv,VanLaser,2,Fri Jul 10 17:38:02 2015 UTC,"Yeah this is what I've being doing. I didn't know how to use regex for the entire buffer, so I was using beginning-of-buffer and end-of-buffer like you mention. I don't recall having any slowdown (though I don't usually copy the entirety of large buffers). I will try and see if there is a noticeable difference."
emacs,3ctjsv,angelic_sedition,1 point,Sat Jul 11 06:50:44 2015 UTC,"Thanks - also the ie object seems to me to sometimes select the trailing whitespace, either from the beginning or the end of the buffer, but I don't quite get why."
emacs,3ctjsv,angelic_sedition,1 point,Sat Jul 11 09:25:06 2015 UTC,"I tried them all, including using the method Tarmen mentions (evil-range), and they all take pretty much the same time for me: about half a second for a 4000 line org file. I didn't have any times where trailing whitespace was wrongly copied. Using evil-range is a lot simpler than what I was doing, so I'll probably switch to that if I find any problems with your regex based approach. Thanks."
emacs,3ctjsv,Tarmen,1 point,Sat Jul 11 17:38:05 2015 UTC,"Thank you for testing this. The ie object does seem to work alright when I load actual files.  My initial tests were in the scratch buffer (I added some lines, either empty or containing only spaces and tabs, at the beginning and at the end, but vie for example was selecting more than it should in that case)."
emacs,3csj7e,prgasp77,4,Fri Jul 10 12:40:00 2015 UTC,Did you have the dev libs for Freetype when you built Emacs?  If not then it will configure Emacs without Freetype.
emacs,3csj7e,RobThorpe,3,Fri Jul 10 20:49:07 2015 UTC,Have you tried rebooting?
emacs,3ct7ih,pan_ZAGLOBA,3,Fri Jul 10 16:06:21 2015 UTC,"I'm not quite understanding what you want. Can you explain the steps to reproduce what you're doing, what you are seeing, and what you expect to see?  So are you starting inside Emacs already? What command are you issuing? new-frame? And then you expect to not have a new window open up?  Part of the problem might be that Emacs's terminology is older than the terminology commonly used, and disagrees with it. So a frame is what Windows, Linux, OSX call a ""window"", and what Emacs calls a window is something inside the frame."
emacs,3ct7ih,zck,1 point,Fri Jul 10 16:42:49 2015 UTC,"thanks for reply. i know terminology.  when i start graphical emacs i get one standart emacs frame inside window manager window, then i want to create new frame (C-x 5 2) but it goes to another window manager window. (it is more like two instances of emacs)  i want to make some frames and to cycle through them within one window manager window (like buffers)"
emacs,3ct7ih,zck,1 point,Fri Jul 10 18:04:47 2015 UTC,"Ah, I see now.  I don't think Emacs can do exactly what you want, because multiple OS windows will be managed by the OS.  But you can save a window configuration, which will give you something close to what you want. I haven't used it personally, but it seems like a fit."
emacs,3ct7ih,zck,1 point,Fri Jul 10 18:17:55 2015 UTC,"i thought there might be a solution, because this mechanic implemented for terminal emacs (virtual frames)  thx anyway"
emacs,3ct7ih,mmaug,2,Fri Jul 10 18:25:19 2015 UTC,"I dunno, maybe there is something more like what you want.  Why do you want the other frame to be in the same OS window? You can manage other frames in the same Emacs process from within Emacs. Or you can have the same frame, but with different window configurations using the link I gave above. If you disclose the things you want to do, it might be easier to see why the current solutions don't work."
emacs,3ct7ih,tuhdo,1 point,Fri Jul 10 18:31:11 2015 UTC,"Are you looking for what MSWindows used to refer to as the multi-document interface (MDI)? That was where MSWord, for instance, would have one outer window with menus and toolbars, and you could open multiple documents within that outer window and tile or cascade them using the Window menu, next to the Help menu? You could also maximize a document within the outer window and it would appear that it was the only active doc.  If you are then you can use a single frame split into multiple Emacs Windows, but it certainly won't look the same. With later versions of MSWindows, MS has started to go back to the SDI again for everything. Screens are larger and computers can run more than one program (although even on my husky work machine running two MSOffice programs can be taxing :-) )  Hth"
emacs,3ct7ih,Mitchical,1 point,Sat Jul 11 00:20:37 2015 UTC,"i know about split, imagine tabs in emacs, each tab has own window or own split. That what i want, i thought it could be done with frames."
emacs,3ct7ih,Mitchical,2,Sat Jul 11 12:45:11 2015 UTC,You may want to look at eyebrowse.
emacs,3ct7ih,VanLaser,1 point,Sat Jul 11 15:12:56 2015 UTC,I do not really see the point of creating a new frame if you want to treat them like emacs windows. Just split your screen with (C-x 2) for horizontal break or (C-x 3) for vertical break.  Edit: Closest thing to what you want I think would be setting      (setq Buffer-menu-use-frame-buffer-list nil)
emacs,3cq7z7,gopar,4,Thu Jul 9 22:10:33 2015 UTC,http://sachachua.com/blog/2015/06/emacs-hangout-june-2015/ is worth a mention :) I really like the idea of an open forum – it's something that keeps the series interesting
emacs,3cq7z7,vermiculus,5,Fri Jul 10 02:00:16 2015 UTC,"This is great! Definitely will check it out! Where will the podcast be published?  Would love a rss feed for it. You have already many ideas in your outline, hard to come up with some new...But i can suggest you a few blogs which often write about emacs and which owners you could ask to be guests: http://www.lunaryorn.com/ http://nullprogram.com/ http://endlessparentheses.com/ http://oremacs.com/ http://www.howardism.org http://blog.binchen.org/ http://batsov.com/  Edit: One Idea that just come to my mind is to tell an emacs joke at the beginning or the end of every Episode: http://jeffreygifford.com/wp-content/uploads/2011/01/emacs-vi-300x146.png"
emacs,3cq7z7,jivatmann,1 point,Thu Jul 9 23:29:45 2015 UTC,Also Planet emacsen and their (atom) feed
emacs,3cq7z7,bhrgunatha,1 point,Fri Jul 10 01:37:25 2015 UTC,sweet! the outlines look great. Thank you for preparing this...I look forward to listening.
emacs,3cq7z7,mfranzwa,1 point,Thu Jul 9 22:29:45 2015 UTC,I would definitely add this to my Podcast Addict playlist
emacs,3cq7z7,glitch_freq,1 point,Fri Jul 10 01:45:38 2015 UTC,"Would definitely listen to it.   Org-mode, helm, elisp and introduce new packages with their uses towards getting more productive.   I just have a hard time imagining how this could be properly done on a podcast. But I guess that is what you would have to figure out."
emacs,3cq7z7,hosnpooch,1 point,Fri Jul 10 02:54:17 2015 UTC,"autocompletion packages  snippets/templates  god-mode  hydra  helm  Helm swoop  Basically, I want Emacs to do more while I have to type less."
emacs,3cq7z7,mmellinger66,2,Fri Jul 10 03:09:12 2015 UTC,swoooop woop woop woop woop woop woop woop woop!
emacs,3cq7z7,vermiculus,1 point,Fri Jul 10 12:48:11 2015 UTC,How does the idea of making a youtube channel instead of / in addition to an audio-only podcast? It might be easier to convey the essentials of a new package with a live instance on screen.
emacs,3cq7z7,pzone,1 point,Sun Jul 12 19:34:26 2015 UTC,"Speaking for myself as both a podcast listener and producer (I'm cohost of Podcast.init a Python podcast) - Podcasts and Youtube channels are apples and oranges.  I do not have the time to give undivided attention to a Youtube channel.  I listen to podcasts while I work out, while I commute to work, etc and it's much harder to consume Youtube content that way.  You can link to Youtube videos in the show notes though :)"
emacs,3cpoys,idonthaveanick,13,Thu Jul 9 19:53:15 2015 UTC,"Ugh totally had that happen to me too; apparently with find file at point, it can try to find a file at a host, and pings to make sure the host is there. See this issue for a quick explanation and fix.   Edit: Thanks for the gold!"
emacs,3cpoys,lygaret,11,Thu Jul 9 20:36:03 2015 UTC,"Wow, my coworkers thought I was insane when I told them emacs would sometimes ping Indonesia when I tried to C-x C-f, thank you for this!!"
emacs,3cpoys,mbillie1,8,Thu Jul 9 21:21:32 2015 UTC,"Ha, it does sound like how a programmer would lose their mind.  ""Guys, I swear every time I try an incremental search, emacs tries to upload something to a server in Langley Falls..."""
emacs,3cpoys,kabbotta,2,Fri Jul 10 05:35:32 2015 UTC,I  just sounded like a programmer going mad. Thanks for the laugh :D
emacs,3cpoys,zilti,20,Fri Jul 10 09:36:19 2015 UTC,I figured it was that. I was playing with the rails console and I had a variable named 'a' and I was trying to call a.is_something? And try to tab complete.   I guess I should switch to using the Canadian boolean convention a.something_eh?
emacs,3cpoys,kabbotta,7,Thu Jul 9 20:55:23 2015 UTC,Maybe emacs thought the Republic of Iceland might have a really good completion candidate.
emacs,3cs9hp,redguardtoo,1 point,Fri Jul 10 10:40:15 2015 UTC,"C-e and C-y should be in there as well for scroll by line  Edit: just noticed ANSI term heading, not too sure if this applies!"
emacs,3cobyr,vermiculus,9,Thu Jul 9 13:45:20 2015 UTC,Pandoc claims to support Mediawiki markup and Org.
emacs,3cobyr,TheBB,1 point,Thu Jul 9 13:59:54 2015 UTC,Thinking of setting up a pipeline?
emacs,3cobyr,eric-plutono,1 point,Thu Jul 9 14:05:45 2015 UTC,"I use Pandoc Mode, so I might try something like:  (url-retreive ""url-to-wikipedia-page""    (lambda (b)       (pandoc-set-read ""mediawiki"")       (pandoc-set-write ""org"")       (pandoc-run-pandoc)))   I seriously doubt that works as-is because I don't know the appropriate arguments for pandoc-set-write/read off the top of my head, so I apologize.  Edit:  You may also want to add (pandoc-set-output ""/tmp/results.org"") or something similar."
emacs,3cobyr,eric-plutono,2,Thu Jul 9 16:58:18 2015 UTC,Hmm looks promising. Will have to test. Know any way to redirect output to a buffer or to point?  RemindMe! 6pm CST
emacs,3cobyr,RemindMeBot,2,Thu Jul 9 17:12:28 2015 UTC,"The callback given to url-retreive receives a buffer, and I know Pandoc Mode can send output to a buffer but again, I don't know the function off the top of my head."
emacs,3cobyr,jivatmann,1 point,Thu Jul 9 17:28:41 2015 UTC,Messaging you on 2015-07-09 18:00:00 UTC to remind you of this comment.  CLICK THIS LINK to send a PM to also be reminded and to reduce spam.    [FAQs] | [Custom Reminder] | [Feedback] | [Code]
emacs,3cobyr,jivatmann,1 point,Thu Jul 9 17:13:21 2015 UTC,"Just curious, how does this RemindMe thing work technically?"
emacs,3cobyr,drbunsonhoneydew,2,Fri Jul 10 00:08:33 2015 UTC,"There's a script out there running that's getting a constant feed of all publicly-available comments on reddit. If it finds a RemindMe! tag, it will, uh, remind you.  Technicalities available here: http://redd.it/24duzp"
emacs,3cobyr,---R,1 point,Fri Jul 10 00:44:55 2015 UTC,Thanks :)
emacs,3cobyr,peter-salazar,6,Fri Jul 10 00:50:59 2015 UTC,Interesting add-on for Firefox that works well most of the time:  https://addons.mozilla.org/en-US/firefox/addon/copy-as-org-mode/?src=api
emacs,3cqgcu,ProPineapple,3,Thu Jul 9 23:17:01 2015 UTC,"For Javascript you should try js2-mode and webmode in General. Another neat package I heard of is Impatient Mode, where you get live feedback in your Browser while coding."
emacs,3cqgcu,jivatmann,1 point,Thu Jul 9 23:53:25 2015 UTC,What do you think about js3-mode? It's apparently a fork. I tried web-mode and currently it does everything I need. Impatient Mode looks very cool for client side projects!
emacs,3cqgcu,rhabarba,2,Sun Jul 12 01:10:36 2015 UTC,Use web-mode. :-)
emacs,3cqgcu,adamrt,1 point,Fri Jul 10 07:36:53 2015 UTC,"+1 for web-mode. use it everyday, its great"
emacs,3cqgcu,dzecniv,1 point,Sat Jul 11 15:37:22 2015 UTC,"I got web-mode, it's great! It does syntax highlighting for everything, closes html tags automagically, and probably does loads of other stuff which I haven't discovered yet."
emacs,3cnwbg,luladjiev,3,Thu Jul 9 10:58:01 2015 UTC,"What language are you working with?  If it's one that is based on CC Mode in any way then you should be able to use C-c C-. to change indentation styles.  I would suggest using that to find one which behaves closest to what you want, and from there you can go about tweaking it."
emacs,3cnwbg,eric-plutono,2,Thu Jul 9 12:21:08 2015 UTC,"Language is JavaScript, I checked CC mode but it does not support JavaScript, but I'll check it, it may work with JS."
emacs,3cnwbg,eric-plutono,3,Thu Jul 9 12:31:16 2015 UTC,"Personally I use js3-mode for JavaScript, but I'm sorry to say I have very little experience customizing its indentation.  A quick look at M-x customize-group js3-mode shows settings relating to indentation, so that may help.  Edit: This may help too."
emacs,3cnwbg,eric-plutono,2,Thu Jul 9 12:34:43 2015 UTC,Thanks. js3-mode has this style of indentation it's the js3-boring-indentation that enables this behavior but the problem is that I couldn't enable autocomplete. I'm using js2-mode with ac-js2 and it works.
emacs,3cnwbg,eric-plutono,2,Thu Jul 9 12:55:45 2015 UTC,"Ah, does js3-mode not work with autocomplete?  I don't use the latter.  If not, that's good to know.  So were you able to get the desired indentation from js2-mode?"
emacs,3cnwbg,SurviAvi,2,Thu Jul 9 12:57:18 2015 UTC,"Nope, couldn't find such setting for js2-mode. I found this article it mentions the same that js3-mode has better indentation but some third party packages depends on js2-mode so it's not an option for me, at least for now."
emacs,3cnwbg,eric-plutono,2,Thu Jul 9 13:03:45 2015 UTC,Thanks for the link.  I will look around for some information about customizing indentation with js2-mode and let you know if I find anything helpful.
emacs,3cnwbg,SurviAvi,2,Thu Jul 9 13:06:10 2015 UTC,"I appreciate that but I've removed js2-mode, js2-ac and I'll stick with js3-mode. The problem with the auto-complete was because of js2-ac, now it works. Thanks again."
emacs,3cnwbg,eric-plutono,2,Thu Jul 9 13:10:30 2015 UTC,Can someone tell me the benefits (and maybe drawbacks) of js3-mode in comparison with js2-mode?
emacs,3cnnki,snicksn,1 point,Thu Jul 9 08:51:36 2015 UTC,"Preview what, exactly?"
emacs,3cnnki,bakuretsu,1 point,Thu Jul 9 10:21:27 2015 UTC,"Ahh, the js and html I am working on in emacs. Seeing if I can fix a setup where I can work with html and js running emacs via ssh on a remote machine. Like I said - noob to this - so might be missing obivous stuff. Saw an example where they had a browser in emacs (tied to?). But probably not possible since it is ubuntu server on the remote. Guess I will have to install webserver on amazon instance, view the page in a broswer and refresh for each change?"
emacs,3cnnki,nandryshak,1 point,Thu Jul 9 10:55:32 2015 UTC,Any particular reason your editing files directly on the server?
emacs,3cnnki,nandryshak,1 point,Thu Jul 9 11:01:21 2015 UTC,Only because I am using amazon ec2 to work on. Guess that is corresponding to the local machine
emacs,3cnnki,redguardtoo,1 point,Thu Jul 9 11:07:08 2015 UTC,"I don't follow. Why are the files on the server on the first place if they're not being served? Why not copy all the files to your local machine, edit, preview locally, and then push them back up when done?"
emacs,3cnnki,tsuru,1 point,Thu Jul 9 14:51:38 2015 UTC,"ssh -X -C -c blowfish-cbc,arcfour youname@210.115.42.12  make sure you install cygwin-X at first if you use windows.  It has nothing to do with Emacs."
emacs,3cnnki,laydros,1 point,Thu Jul 9 11:19:27 2015 UTC,"If I sound confused, that is correct :) But I dont get your answer. - I ssh into an amazon instance, startup emacs, edit html and js files. Using this setup, is there a nice way to see results and debug? Thanks"
emacs,3cjnrh,z27,10,Wed Jul 8 12:54:54 2015 UTC,"highlight-parantheses-mode has proved to be superior to rainbow-delimiters in my use. Also, I'd suggest you not use the setting#7, every so often you may find that you would be way better off if you had access to the last turn before the bridge. #2 is also dangerous, it may have effects that you may regret."
emacs,3cjnrh,delbosforo,6,Wed Jul 8 14:33:42 2015 UTC,"setting #2 sounds like a good way to lose things even for the careful.  Assuming you have a stable system hooked to a stable power source, your emacs buffer isn't going anywhere unless you specifically toss it or quit emacs, but you might have made some inadvertant changes (cat typing), or you ""get lost"" while editing, and the mouse gets moved accidentally (cat mousing maybe).  Oops!  File writes on any sort of routine mouse movement/focus change strikes me as stupidly dangerous."
emacs,3cjnrh,lambda_abstraction,1 point,Wed Jul 8 14:42:12 2015 UTC,"it would make much more sense if it was per-project, it is sometimes easy to forget saving a file before commit/make if you made changes in few of them"
emacs,3cjnrh,XANi_,1 point,Thu Jul 9 09:08:52 2015 UTC,"I think it's a neat idea -- it's way more common (for me at least) to switch to a browser and forget saving, than to have stuff that you don't want saved.  Of course, you're using backup-each-save or git-wip so you can undo any saves, I hope? Every once in a while you'll wish you had these, if you don't already."
emacs,3cjnrh,DarthToaster,1 point,Wed Jul 8 20:49:27 2015 UTC,How does highlight-parantheses-mode highlight matching errors?
emacs,3cjnrh,chneukirchen,2,Wed Jul 8 15:48:47 2015 UTC,"They are not highlighted. Matching parentheses are highlighted by default in shades of red, up to a given level. I use the show-paren-mode to identify non-matching parens, which show them in different face. Also, I do not encounter many unbalanced parens given that I mostly edit [e]lisp, and that w/ paredit, so I'm not very knowledgeable in this."
emacs,3cjnrh,delbosforo,1 point,Wed Jul 8 21:02:57 2015 UTC,"#2 might be changed into push-to-backup I agree with you on #7, I got the habit to write stuff in scratch buffers (no warning in exit) and so many times I lost content because of that."
emacs,3cjnrh,agumonkey,7,Wed Jul 8 16:42:53 2015 UTC,"These are simple settings with decent benefits, however nothing I've come across/set up in emacs has changed the experience (for the better) as much as helm + projectile.  Prior to having used either, I'd see them referenced and just sort of gloss on past them, as I wasn't really sure what either was for.  This is the tutorial for it https://tuhdo.github.io/helm-intro.html  I cannot recommend going through this enough (helm works all over - from twittering-mode to magit to basic functionality and makes everything awesome)."
emacs,3cjnrh,xenow,3,Wed Jul 8 19:52:52 2015 UTC,So true. When I read that tuhdo tutorial it really uplifted my emacs experience.
emacs,3cjnrh,yellowviper,2,Wed Jul 8 20:52:27 2015 UTC,Propz for /u/tuhdo
emacs,3cjnrh,ReneFroger,3,Wed Jul 8 21:21:18 2015 UTC,Thanks :)
emacs,3cjnrh,tuhdo,5,Thu Jul 9 09:28:23 2015 UTC,"(add-hook 'focus-out-hook 'save-all)   This just feels like a bad plan. It would be better (not great, but better) to at least use that third optional argument, PREDICATE, to choose based on major mode. Some of my files are in fact not in a VCS.      Prevent annoying ""Active processes exist"" query when you quit Emacs.    Also very dangerous. Consider your workflow carefully before doing this. (Compiling? Do people not compile anymore?)"
emacs,3cjnrh,vermiculus,1 point,Wed Jul 8 21:16:03 2015 UTC,"Personally I compile things a lot less now than 10 years ago (mostly thanks to Python and web dev), and when I do a compilation it's usually quite fast anyway.  ""Active processes"" on shutdown are always same REPL I started long ago that was sitting idle and forgotten."
emacs,3cjnrh,its_never_lupus,3,Thu Jul 9 09:53:08 2015 UTC,Killing all active processes is too dangerous. Recently I accidentally killed my website and it stayed down for hours before I realized something's wrong. I had its REPL opened in SLIME and apparently exiting it killed the underlying Lisp process...
emacs,3cjnrh,Grue,6,Thu Jul 9 15:23:15 2015 UTC,"One setting is ridiculousy bad:   (key-chord-define-global ""jx"" 'smex)  This will cause a huge delay when you're pressing j, because key-chord will be waiting on input. If it gets no input after a while, it will execute the Evil command anyway. But it will ruins your motion flow.   The rest is gold. Thanks for sharing it."
emacs,3cjnrh,ReneFroger,8,Wed Jul 8 13:18:37 2015 UTC,It that issue evil-specific? I didn't have any such issues with my alphanumeric chords.
emacs,3cjnrh,vifon,1 point,Wed Jul 8 14:21:27 2015 UTC,"Yes, I notice it when I'm using Evil."
emacs,3cjnrh,ReneFroger,2,Wed Jul 8 16:28:43 2015 UTC,But do you notice it when not using evil?
emacs,3cjnrh,vifon,1 point,Wed Jul 8 16:52:04 2015 UTC,"I've seen it also when not using evil (before using evil I used chord-mode quite a bit, now of course I also do, but notice more these delays, too)"
emacs,3cjnrh,rberenguel,1 point,Wed Jul 8 19:14:13 2015 UTC,"It's only a problem with big delays, I have keychord only wait .02 seconds for the next input so you never have to wait."
emacs,3cjnrh,jordonbiondo,5,Wed Jul 8 20:56:51 2015 UTC,"ridiculousy   Was that a typo or deliberate?  Either way, I like it."
emacs,3cjnrh,fantastipants,1 point,Wed Jul 8 17:07:03 2015 UTC,Ha I'd call that a happy mistake.
emacs,3cjnrh,Mitchical,3,Thu Jul 9 02:55:23 2015 UTC,I have never faced that issue (I don't use Evil).
emacs,3cjnrh,kaushalmodi,1 point,Wed Jul 8 15:43:17 2015 UTC,"You're not using Evil, I presume? By the way, as header-expert, perhaps could you help me out here?"
emacs,3cjnrh,ReneFroger,1 point,Wed Jul 8 16:29:35 2015 UTC,"I wouldn't call myself a header expert; I am just one of that package's users. Drew, who replied to that emacs.SE, is header2.el author. I haven't yet looked into that question as Drew replied. Where are you getting stuck? Do the version-* functions not help?"
emacs,3cjnrh,kaushalmodi,1 point,Wed Jul 8 16:39:55 2015 UTC,"I also tried out key-chords with evil-mode.  It wasn't the best.  Now I'm using evil-leader (bound to ;) and having a pretty good time with it.  Pressing ;x is much easier than M-x for instance, or ;e over C-x C-f for opening a file.  Makes the work flow nice and fast."
emacs,3cjnrh,xenow,3,Wed Jul 8 19:47:32 2015 UTC,But ; serves an actual purpose in evil...
emacs,3cjnrh,aptmnt_,2,Wed Jul 8 20:00:14 2015 UTC,Yeah I always find it weird people don't use the ; key. It's nice for cycling though t searches and stuff. I usually think they must know a better way though
emacs,3cjnrh,__baxx__,1 point,Wed Jul 8 21:44:07 2015 UTC,"I just repeat they key, 2fr is as easy as fr; for instance. It's rare I use that also, as I normally edit a word at a time and always use w or b"
emacs,3cjnrh,xenow,1 point,Thu Jul 9 02:17:20 2015 UTC,It's customizable to any bind. I found I never used ; in normal mode and found it easy to chain with other keys
emacs,3cjnrh,xenow,1 point,Thu Jul 9 02:09:41 2015 UTC,I'm waiting for an Emacs version of clever-f Vim plugin. Then you don't need ; in Evil anymore.
emacs,3cjnrh,ReneFroger,2,Thu Jul 9 06:29:38 2015 UTC,evil-snipe has enhanced 1 char search which does that afaik.
emacs,3cjnrh,aptmnt_,1 point,Thu Jul 9 06:59:21 2015 UTC,"Thanks for the tip. I knew the package, but had some difficiulties to modify it."
emacs,3cjnrh,ReneFroger,1 point,Thu Jul 9 11:20:26 2015 UTC,"Key-chords are not suitable as in Vim, with the  I use ; for M-x in normal mode. I would like to press f and then j instead pressing simultaneously with key-chord, which is not usable for me.   See also this issue: https://bitbucket.org/lyro/evil/issues/505/proper-error-handling-in-case-of-custom"
emacs,3cjnrh,ReneFroger,2,Wed Jul 8 20:01:34 2015 UTC,"Save on focus out is a great idea, thanks!"
emacs,3cjnrh,sledgespread,1 point,Wed Jul 8 13:32:37 2015 UTC,"Number 1 is fantastic, I had no idea rainbow delimiters could do that."
emacs,3ckj6v,snicksn,5,Wed Jul 8 17:01:11 2015 UTC,"Comment out half of init.el, try it, then try the other half. Once you know which half causes the problem repeat on the top and bottom half of that half, etc. Binary search ;)"
emacs,3ckj6v,augmentedtree,4,Wed Jul 8 17:47:12 2015 UTC,"Thanks, think I got it sorted. Saw the (normal-erase-is-backspace-mode -1) in init.el, and it turns out that switches the beaviour. So if you ssh and it is already set there, it is reversed by this. Set it to -1 and now seems to work. See: http://emacs.stackexchange.com/questions/8119/normal-erase-is-backspace-mode-does-not-work-over-ssh-when-included-in-emacs"
emacs,3cifa7,CMDR_Rockman,3,Wed Jul 8 03:51:47 2015 UTC,Looks neat! I will definitely try it out. Any chance for a moe-theme integration? Especially its functionality to change powerline colors on the fly?
emacs,3cifa7,derhamster86,3,Wed Jul 8 09:01:28 2015 UTC,Thanks! I use moe-theme all the time so I will definitely look into it.
emacs,3ckeyj,augmentedtree,3,Wed Jul 8 16:31:25 2015 UTC,Visual-line-mode is supposed to rebind C-a and C-e to beginning-of-visual-line and end-of-visual-line (see visual-line-mode-map in simple.el). Are you binding C-a/C-e elsewhere?
emacs,3ckeyj,redblobgames,2,Wed Jul 8 16:41:57 2015 UTC,"Ah, you're right I am. I forgot I have C-e bound to 'end-or-trailing' and C-a to 'beginning-or-indentation'. I can change them to use end-of-visual-line instead of end-of-line, but what do I replace eolp/bolp with?"
emacs,3ckeyj,laydros,1 point,Wed Jul 8 17:50:10 2015 UTC,"just comment out that part in your config, so C-e and C-a get their default bindings.  When they are set to default and visual-line-mode is off they will be end-of-line and beginning-of-line, but once you enable visual-line-mode, they will automatically be remapped properly.  In things are weird, try C-h k then C-a and it will display how C-a is bound. It will sometimes say what it is bound to by default, and where the non-default setting is coming from. Try it with visual-line-mode on and off to see what changes."
emacs,3cgztc,ReneFroger,12,Tue Jul 7 20:59:30 2015 UTC,"I know it will just be an image in an image, but the github page could (if possible) sure use a screenshot."
emacs,3cgztc,benfitzg,5,Wed Jul 8 01:12:37 2015 UTC,Let's be bold and ask for a modern gif.
emacs,3cgztc,agumonkey,3,Wed Jul 8 03:10:09 2015 UTC,I just did it.   https://github.com/mhayashi1120/Emacs-imagex/issues/5
emacs,3cgztc,its_never_lupus,1 point,Wed Jul 8 10:16:06 2015 UTC,"Excellent, direct plus image viewer is a nice idea but without a resize option it was never really useful."
emacs,3cfwzx,ReneFroger,1 point,Tue Jul 7 16:32:19 2015 UTC,is this compatible with mac os x?
emacs,3cfwzx,felinecatastrophe,1 point,Thu Jul 9 14:42:34 2015 UTC,It should work for 24.4.1. See #11 for more info.
emacs,3cfwzx,abo-abo,1 point,Thu Jul 9 17:10:43 2015 UTC,"Looks very useful. Thanks. I haven't had a chance to try it out yet, but will (OS X). I've been idly wondering how to incorporate images into my budding org-mode notes. I love text-based knowledge, but sometimes I need to have an image (screenshots, etc.)."
emacs,3ciddp,nautola,1 point,Wed Jul 8 03:34:04 2015 UTC,Awesome!   How does it interact with the WORD/word distinction?  We should try to get this implemented in evil itself.
emacs,3ciddp,sledgespread,1 point,Wed Jul 8 07:31:22 2015 UTC,"There's also evil-little-word, which adds text objects and motions for camelcase word boundaries. I haven't had to choose one or the other."
emacs,3ciddp,TheBB,1 point,Wed Jul 8 07:34:40 2015 UTC,"Interesting! Thanks for sharing! But unfortunately, I couldn't get it run in Vanilla Emacs with Evil. I installed use-package from MELPA.   When I run your snippet,but I ran into an error: http://pastebin.com/VQusbwP2   So propably I'm missing something. Any solution?"
emacs,3ciddp,ReneFroger,2,Wed Jul 8 12:35:51 2015 UTC,"It didn't actually work for me either with use-package (even though I have use-package installed and use it regularly). The important part is code inside the :config. This is what I'm using:  ;; Treat CamelCase as separate words everywhere (global-subword-mode 1)  ;; Also handle CamelCase in evil mode (require 'evil) (define-category ?U ""Uppercase"") (define-category ?u ""Lowercase"") (modify-category-entry (cons ?A ?Z) ?U) (modify-category-entry (cons ?a ?z) ?u) (make-variable-buffer-local 'evil-cjk-word-separating-categories) (add-hook 'subword-mode-hook         (lambda ()             (if subword-mode                 (push '(?u . ?U) evil-cjk-word-separating-categories)             (setq evil-cjk-word-separating-categories                     (default-value 'evil-cjk-word-separating-categories)))))"
emacs,3ciddp,sledgespread,1 point,Wed Jul 8 14:27:23 2015 UTC,"oh gosh, I have so many problems with that because I live test everything in my current session.   I can't tell you how many times I have to open emacs from a terminal with --debug-init because I didn't include settings I changed in scratch into the real .el files. Good luck!"
emacs,3ciddp,ReneFroger,1 point,Wed Jul 8 18:57:29 2015 UTC,"You can try C-x C-e behind the latest parenthese of the function or setting to evaluate and apply live, without saving it first."
emacs,3cfgfx,say_or_do,5,Tue Jul 7 14:30:29 2015 UTC,"I assume you're using Debian or a Debian derivative.  Debian don't have the manual in the normal docs because they don't agree with the GNU Free Documentation License.  These are provided in the package ""emacs23-common-non-dfsg"". On Ubuntu it's ""emacs24-non-dfsg"".  As Kaushalmodi mentioned you can always just download them from gnu.org and then use install-info."
emacs,3cfgfx,RobThorpe,1 point,Tue Jul 7 14:48:13 2015 UTC,"Yeah, I use Ubuntu.   All I've heard is that the emacs version I mentioned is the one in the software center. Thanks."
emacs,3cfgfx,RobThorpe,2,Tue Jul 7 14:53:40 2015 UTC,"That's right. I've used it, it works fine. Install the doc package I mention and everything should work."
emacs,3cfgfx,kaushalmodi,1 point,Tue Jul 7 15:19:22 2015 UTC,"http://www.gnu.org/software/emacs/manual/html_mono/emacs.html  Also, https://www.reddit.com/r/emacs/search?q=emacs+tutorial&restrict_sr=on  The Emacs Manual will not change drastically across versions. Also it will not be practical to read the emacs manual for any version back-to-back. You generally google for something and read a couple of chapters around that topic as needed.  As for version specific manual/tutorial, it is built into emacs; simply do C-h t (press Ctrl-H, release Ctrl-H and then press T).  I would also recommended purchasing a copy of Mastering Emacs by /u/mickeyp   Update: Removed the rude lmgtfy link."
emacs,3cfgfx,kaushalmodi,2,Tue Jul 7 14:35:33 2015 UTC,"it will not be practical to read the emacs manual for any version back-to-back   It's perfectly practical and also useful and interesting. It will be time-consuming, though, like any other book."
emacs,3cfgfx,kaushalmodi,1 point,Tue Jul 7 15:18:04 2015 UTC,"It's not practical for a new Emacs user; mainly because a major part of it will not make sense; take rectangles or registers for example. It is too much information overload. A new user will not understand the gravity of all the intricate features described in the manual.  I suggested Mastering Emacs because it is a much concise version explaining the basic ways to get around in emacs: navigation, using describe/apropos, etc."
emacs,3cfk3f,vitalijzad,2,Tue Jul 7 14:59:32 2015 UTC,"Click here or for archiving purpose:  (setq url-proxy-services       '((""http""     . ""http://proxy.example.com:8080"")         (""https""    . ""http://proxy.example.com:8080"")         (""ftp""      . ""proxy.example.com:8080"")         (""no_proxy"" . ""^.*example.com"")))"
emacs,3cfk3f,ellakk,1 point,Tue Jul 7 15:04:51 2015 UTC,"Thank you!  I have to put in an empty buffer this text:  (setq url-proxy-services    '((""no_proxy"" . ""^\\(localhost\\|10.*\\)"")      (""http"" . ""proxy.com:8080"")      (""https"" . ""proxy.com:8080"")))  (setq url-http-proxy-basic-auth-storage     (list (list ""proxy.com:8080""                 (cons ""Input your LDAP UID !""                       (base64-encode-string ""LOGIN:PASSWORD"")))))   I put there my proxy and authentication settings.  What do I have to do then?"
emacs,3cfk3f,ellakk,2,Tue Jul 7 15:11:04 2015 UTC,M-x eval-buffer  Then it should work.
emacs,3ce8u7,AdrieanKhisbe,1 point,Tue Jul 7 05:53:21 2015 UTC,"Thanks for sharing it! This might be useful, I was planning to develop 2 Emacs packages for the first time. Namely package for folding, like in Vim and store the folding configuration for each file. And a blogging package,  like ""Oh life"",  that remembers you after each period (day or week),  to log about how your day / week goes,  and store it in a org format (see also this issue).  However, when checking your package in your link, it seems it's depending of Linux tools. So I'm wondering will this work on Windows?"
emacs,3ce8u7,ReneFroger,2,Tue Jul 7 08:52:06 2015 UTC,"I don't really know, I haven't try. (mainly develop on unixlike env) It mainly rely on Cask, which you can install according to the manual. Not having make is not that important, you can launch task by hand with Cask. (Makefile is mainly used for the travis build)"
emacs,3ce8u7,ReneFroger,1 point,Tue Jul 7 09:08:06 2015 UTC,Wouldn't it be better to use Emacs alternatives for the tools? Given the fact that the Emacs alternatives are written in Elisp. Then it will be platform independent.
emacs,3cdqi5,tech_tuna,3,Tue Jul 7 02:56:08 2015 UTC,"You can change the behavior of the modifier keys on a system wide level in System Preferences>Keyboard>Modifier Keys(or something like that, I am on my phone right now), so you can swap the command and option keys' functionality. This is also really useful for changing the caps lock key to be control.   Of course then you'll have to use option-w to close windows everywhere for example, but it sounds like that might be what you want.  Does that solve your issue?"
emacs,3cdqi5,Space_Butts,1 point,Tue Jul 7 03:11:11 2015 UTC,"Yes, that sounds like exactly what I want.  Will try it tomorrow (bed time in my time zone right now).  Thanks!"
emacs,3cdqi5,vermiculus,1 point,Tue Jul 7 05:06:43 2015 UTC,"Oh yeah, I forgot about that :) Used it to set up my caps lock key as control."
emacs,3cdqi5,wiremore,2,Tue Jul 7 11:40:26 2015 UTC,Intensive GNU emacs/mac user here. I recommend just learning to use Option/Alt as Meta - you can rebind a few things like command-s for save on a case by case basis.
emacs,3cdqi5,vermiculus,1 point,Tue Jul 7 06:31:12 2015 UTC,"C-h v mac-command-modifier  AFAIK, you have to use a graphical emacs. At least Terminal (and probably iTerm) gobbles the command key for its own purposes."
emacs,3cdqi5,chrisrayner,1 point,Tue Jul 7 03:05:57 2015 UTC,"Put this in your .emacs:  (setq ns-command-modifier 'meta)    ; mac alt  (sorry, didn't read that you wanted to run it from iTerm.  But I would recommend running ""Emacs for Mac OS X"" on a mac)"
emacs,3cdqi5,instant_sunshine,2,Tue Jul 7 03:11:12 2015 UTC,highly recommend you and OP use Emacs-mac-port  brew tap railwaycat/emacsmacport brew install emacs-mac
emacs,3cdqi5,ressis74,2,Tue Jul 7 07:39:14 2015 UTC,why emacs-mac instead of just emacs?  brew install --with-cocoa emacs
emacs,3cdqi5,instant_sunshine,1 point,Tue Jul 7 21:51:41 2015 UTC,This is something you should look into yourself TBH.
emacs,3cdqi5,instant_sunshine,1 point,Thu Jul 9 04:58:12 2015 UTC,https://github.com/railwaycat/emacs-mac-port/blob/master/README-mac
emacs,3cdqi5,ztennix,1 point,Thu Jul 9 05:30:33 2015 UTC,"It's better to use a GUI Emacs, because iTerm has its own key bindings which blocks emacs key bindings, eg. C-/ has no effect in iTerm emacs, maybe there are even more such little pitfalls if you use emacs for a long time. PS. I'm also a long time emacs user under linux and recently moved to Mac for work"
emacs,3cdqi5,chrispoole,1 point,Tue Jul 7 05:09:51 2015 UTC,I have my configuration on GitHub… including what I use to do what you want :)
emacs,3cdqi5,earakaki,1 point,Tue Jul 7 05:47:36 2015 UTC,(setq mac-command-modifier 'meta)
emacs,3ca4qb,flyingblanket,1 point,Mon Jul 6 08:11:42 2015 UTC,Can you possibly post a gif showing what you are seeing?
emacs,3ca4qb,kaushalmodi,1 point,Mon Jul 6 15:19:12 2015 UTC,"Here it is. Also, I observe the desired behavior when I try to do the same thing in Emacs 24.5 on Windows 8.1."
emacs,3ca4qb,kaushalmodi,1 point,Mon Jul 6 16:07:21 2015 UTC,"That's not a normal behavior (at least based on emacs -Q session I tried out on RHEL 5.10). The minibuffer should not show the cursor. Do you see the same behavior in an emacs -Q session? If not, then you need to comment out your whole emacs config and gradually uncomment 50% of it till you find the culprit code in your config."
emacs,3ca4qb,kaushalmodi,1 point,Mon Jul 6 17:27:07 2015 UTC,Forgot to mention that I've already done that and still see the flashes. Did you try it on 24.5 or an earlier version?  EDIT: Also forgot to mention: Did you try it in a GUI or the terminal? Only GUI seems to have this issue in my installs.
emacs,3c9317,ares623,4,Mon Jul 6 01:16:10 2015 UTC,"From my experience evil-matchit doesn't work well in many cases.  For example, it is useless in visual and visual-line modes. I used that a lot in Vim, but unfortunately can't use it here.   Which is weird, because it doesn't look very difficult to implement (for example, vi( works fine and visually selects exactly what it is expected to select. Evil-matchit in visual mode should do almost the same thing, but it doesn't work at all)."
emacs,3c9317,kovrik,1 point,Mon Jul 6 03:52:06 2015 UTC,Examples: https://www.notehub.org/2015/7/6/test-case
emacs,3c9317,kovrik,1 point,Mon Jul 6 04:43:49 2015 UTC,"From my experience evil-matchit doesn't work well in many cases.   use evil-select-items instead. It is my implementation of visual selection without any dependency on evil API. It always works with any version of evil and more efficient (you press less keys).  visual-state should be 99% fine.  visual-line modes is not supported yet.  evil-normal-state should always be fine.  The root cause is evil has some issues to get the character under cursor.  On the other hand, since you are using Emacs, why you bother to enter visual state by pressing extra keys?  Emacs support visual selection out of the box! So just use evil-select-items and press C-x C-x to tweak the final selected region.  Trust me, you actually press less keys than vim! I've studied all the vim and matchit.vim's code before developing evil-matchit."
emacs,3c9317,redguardtoo,2,Mon Jul 6 07:46:49 2015 UTC,"I can't figure out how to make it work using evil-select-items.   since you are using Emacs, why you bother to enter visual state by pressing extra keys? I don't get it.    I press exactly 1 key to enter visual mode - v.  Then I want to press another one - % - to visually select block between matching tags, parens and so on. This doesn't work.  I don't understand how can you make it using less than 2 keys.  C-x C-x already takes 4 keys.   use evil-select-items instead Just tried it - didn't work either.   I'm trying to do the same visual selection in Vim and in Emacs (using evil-matchit).  In Vim it works like a charm, in Emacs it selects random stuff.  Even more, when I disable evil-matchit-mode - everything works as expected (but, unfortunately, doesn't support tags etc.).   So, for me the solution is to disable evil-matchit everywhere except some special cases (html, xml and so on)."
emacs,3c9317,kovrik,1 point,Mon Jul 6 20:26:08 2015 UTC,"First, make sure you have upgraded to the latest version 2.0.2  case 1, you want to select text area by lines: DON'T go to visual state, in normal state, M-x evilmi-select-items.  case 2, you want to select text area in visual state (you press ""v"" to go to visual state): That works! Evil mode might have some minor issue (for example, the last or first character may not be included). Please note this is NOT my issue, it's evil issue I've worked around in some (not ALL) major modes.  case3, you want to select item using text objects, it's evil's own functionality, it still works 100%. ""va("" or ""vi(""  As for you question on ""C-x C-x"", it's some useful EXTRA functionality provided by Emacs ONLY, I find it's handy, but it's optional for you. All the vim key bindings ""hjkl"" still works for expanding selected region."
emacs,3c9317,redguardtoo,3,Tue Jul 7 02:58:48 2015 UTC,raise a issue on my github site with a minimum sample python code.
emacs,3c9317,redguardtoo,2,Mon Jul 6 03:02:03 2015 UTC,"upgraded to 2.0.2, some python issues are fixed, btw."
emacs,3c9317,redguardtoo,1 point,Mon Jul 6 07:58:47 2015 UTC,"Thanks, much better now :)"
emacs,3c4wdn,eniacsparc2xyz,3,Sat Jul 4 20:34:21 2015 UTC,This is a really nice resource for those looking to get a REPL/practical based intro to the language.  It's also a great for those who struggle for something to show beginners where to look for a helpful primer.
emacs,3c4wdn,instant_sunshine,3,Sun Jul 5 01:59:26 2015 UTC,I am glad you liked it. It is still a work in progress.
emacs,3c4wdn,agumonkey,3,Sun Jul 5 02:21:58 2015 UTC,"The save session part was very nice. That said the (eval ""string"") menu at the end made me sad. Maybe you don't want to introduce macros too soon, but still eval of strings hurts the lisper's eye."
emacs,3c4wdn,parolang,2,Sun Jul 5 04:53:23 2015 UTC,"I am myself a beginner. I know ""eval"" is evil and dangerous and hated in many programming languages, but I don't know macros yet, but as soon as I learn more about elisp macros I will update that section."
emacs,3c4wdn,parolang,3,Sun Jul 5 05:33:36 2015 UTC,"Excellent. Any idea why you used ielm rather than interactive lisp mode (like ""Learn Elisp in 25 minutes"" did)? Just curious. It would be easier to edit and comment in. I was thinking about trying to modify it to help distinguish the value returned vs the output, kind of like the way the Elisp manual does it.  But I love seeing these. Yes, someone make one on macros!"
emacs,3c4wdn,ReneFroger,0,Sun Jul 5 11:55:13 2015 UTC,"interactive lisp mode  ...  It would be easier to edit and comment in.   Do you mean emacs-lisp-mode, it is the mode of scractch buffer or any file ending in "".el"". I use the REPL, IELM the Emacs elisp shell because it is easier to run the code and see the output, test code and features independently. But it is not good for edit an elisp code. The best way to develop elisp is to test one piece of code at a time and repl is does it better than editing a buffer in elisp mode.   I was thinking about trying to modify it to help distinguish the value returned vs the output, kind of like the way the Elisp manual does it.   You can have the best of both, actually you can split the window in two halves vertically by typing C-x 3, in one half display the scratch buffer on the other half display ielm repl. You can type the code in the scratch buffer and type M-x eval to evaluate the code in the buffer or select the menu and then you can call the function from the REPL here is one example.   Emacs Lisp mode and IELM 1 Emacs Lisp mode and IELM 2"
emacs,3c4wdn,dzecniv,3,Sun Jul 5 20:16:06 2015 UTC,"My scratch buffer defaults to Lisp Interaction mode.  I think the only thing it changes is typing C-j after a sexp evaluates that sexp, and then puts the value and output on the next lines of the buffer.  I think the point of doing the setup I suggested was to share them with other emacs/elisp users.  I think it is useful to see how other people code."
emacs,3c4wdn,dzecniv,3,Sun Jul 5 20:55:53 2015 UTC,"Very nice tutorial. If you don't mind it, I added it to the block of Emacs tutorials."
emacs,3c4wdn,holgerschurig,1 point,Sun Jul 5 12:07:53 2015 UTC,Thanks.
emacs,3c4wdn,ramnes,2,Sun Jul 5 20:16:42 2015 UTC,"Very useful ! Maybe link to modern and useful libraries like dash.el, s.el and f.el ? (you only mention dash.el in functional programming but it's more than that)"
emacs,3c4wdn,ramnes,2,Mon Jul 6 12:11:13 2015 UTC,I added to wikemacs' list of ressources: http://wikemacs.org/wiki/Emacs_Lisp_Ressources
emacs,3c61zl,pzone,5,Sun Jul 5 04:12:04 2015 UTC,You use the mouse to highlight text?  I've never had any problems with the secondadry selection. I use it whenever I have to copy/paste text from the terminal to somewhere else.
emacs,3c61zl,MonsieurBanana,2,Sun Jul 5 15:52:44 2015 UTC,"I think a lot of people do. I've been thinking that the stigma against using the mouse/track pad/track point needs to end. Especially in emacs when you can bind mouse events to whatever command you want, or use them with prefixes like C-x <down-mouse-1>."
emacs,3c61zl,parolang,2,Sun Jul 5 20:23:33 2015 UTC,"I disagree. Using the mouse means taking your hands off the keyboard and then later putting it back on the keyboard, this will almost never be the fastest way to do things."
emacs,3c61zl,IvanMalison,1 point,Mon Jul 6 05:43:36 2015 UTC,"But generally the limiting factor when programming isn't typing speed. And the amazing thing about using the mouse is how you can do most of your mousing around without thinking about it at all. It is like you are using a back channel in the brain that already knows how to mouse, and in my experience it keeps up with your thoughts."
emacs,3c61zl,parolang,1 point,Mon Jul 6 07:47:02 2015 UTC,"disregarding speed, for me, and I'm guessing others as well its more precise to use the keyboard. If it's just selecting a big chunk of stuff I don't think it matters either way."
emacs,3c61zl,Colada,2,Tue Jul 7 00:01:43 2015 UTC,"I'm not really sure. Personally I haven't really spent much time exploring using the mouse in emacs, mostly because of the anti mouse stigma. I need to try binding double click to expand region, because that could give you the precision that you desire.  Furthermore, with emacs you can both map mouse events under a prefix key, as well as use mouse events as a prefix key. You can put mouse events in keyboard macros. I could console log whatever symbol I click on after pressing F7 (as an example).   I really need to experiment with this stuff and find out what the limitations are. But a lot of times when I'm looking at code and trying to reason about it, I'm not sitting there with my fingers on the home row.  But it won't completely replace the keyboard. I've just never been able to touch type editor commands while remaining in the flow."
emacs,3c61zl,parolang,1 point,Tue Jul 7 01:09:34 2015 UTC,"There are three common cases where I find myself in Emacs with my hand on the mouse:    I need to copy and paste text from a browser or other application. I have switched to Emacs from another application and have not yet put my hands on the keyboard. Occasionally within Emacs I switch to the mouse because of the scroll wheel, the ability to quickly & precisely resize windows and/or wanting to click links with a cursor. For example, a list of links produced by gtags can be very dense and often needs to be resized.   Selecting text with the mouse is often cheaper than a full context switch in those cases."
emacs,3c61zl,hmelman,3,Mon Jul 6 09:14:13 2015 UTC,"If you're going to get rid of the secondary selection, at least get the keybindings back so you can do something useful with them:  (global-unset-key (kbd ""<M-drag-mouse-1>""))   ; was mouse-set-secondary (global-unset-key (kbd ""<M-down-mouse-1>""))   ; was mouse-drag-secondary (global-unset-key (kbd ""<M-mouse-1>""))    ; was mouse-start-secondary (global-unset-key (kbd ""<M-mouse-2>""))    ; was mouse-yank-secondary (global-unset-key (kbd ""<M-mouse-3>""))    ; was mouse-secondary-save-then-kill"
emacs,3c61zl,trezor2,1 point,Sun Jul 5 18:10:25 2015 UTC,"Ehh. How about no?  Using the mouse to select text is perfectly normal, and in most places in the universe convention.  Why would I disable something as useful as that?"
emacs,3c61zl,pmade,1 point,Mon Jul 6 08:27:07 2015 UTC,"This is only disabling the secondary selection.  The secondary selection is a seldom used feature, and generates a sort of region that cannot be accessed by any standard keyboard commands.  This way, if you ever select text with the mouse, it will do so with the good old ordinary region."
emacs,3c61zl,laydros,1 point,Mon Jul 6 09:04:11 2015 UTC,"Why do you think it's a seldom used feature? It's one of the things I love about X and use it daily when interacting with other applications. When you've already resorted to using the mouse it's faster to use the secondary selection than jump back to the keyboard momentarily for copy+paste commands.   BTW, you can indeed use the secondary selection from the keyboard. For example, Shift-Insert inserts the secondary selection in most X applications."
emacs,3c5mss,shackra,2,Sun Jul 5 01:06:24 2015 UTC,I don't code in Python a whole lot but I have noticed from recent commits in emacs master which look like fixes to this issue?
emacs,3c562f,jabbalaci,3,Sat Jul 4 22:05:04 2015 UTC,"The flake8 configuration file is the place where you setup the preferences  cat ~/.config/flake8  [flake8] ignore = E221,E501,E203,E202,E272,E251,E211,E222,E701 max-line-length = 160 exclude = tests/* max-complexity = 10"
emacs,3c562f,chedi,1 point,Sun Jul 5 14:21:22 2015 UTC,"Thanks a lot, it solved the problem."
emacs,3c562f,DasEwigeLicht,2,Sun Jul 5 14:40:57 2015 UTC,Those errors are probably from flymake which elpy uses in its default config. Try turning of flymake-mode and see if those errors go away. If they do you can disable elpy's flymake by removing the flymake module from the variable elpy-modules.
emacs,3c562f,SurviAvi,1 point,Sun Jul 5 08:27:21 2015 UTC,What happens when you use pylint on the file from the screenshot?
emacs,3c3fvu,eric-plutono,3,Sat Jul 4 11:38:51 2015 UTC,"Are generic modes derived from other modes (like prog-mode or text-mode)?  I guess I thought this would be useful for writing just a couple of changes on top of another mode, like web-mode, for adding my own keywords, etc for my own projects."
emacs,3c3fvu,parolang,3,Sat Jul 4 20:12:06 2015 UTC,"No, generic modes are not (and as far as I know cannot be) derived from other modes.  If you only want to add some keywords to something like Web Mode then it's often easiest, in my opinion, to find the variable in which Web Mode stores keywords and then append your end; some modes even provide user-customizable variables specifically for that.  You can also extend modes via hooks, but depending on how much extra functionality you want to add define-derived-mode may be your best choice."
emacs,3c3fvu,ReneFroger,2,Sat Jul 4 22:44:22 2015 UTC,Some relevant links:   GNU Emacs Lisp Reference Manual: Generic Modes Generic Mode on EmacsWiki Mode Tutorial on EmacsWiki A question on StackOverflow that contains links to information about generic modes
emacs,3c2sfv,SZJX,4,Sat Jul 4 05:43:46 2015 UTC,"I use https://github.com/christopherjwhite/org-toodledo instead.  In my own custom setup, I modified org-toodledo to support the same keywords in org-mode as on the Toodledo website (e.g., Active, Next Action, Someday, etc.) and priorities (e.g., letters A to E) -- most of the modifications to org-toodledo that may be needed to support keywords/priorities matching Toodledo are fairly straight forward.  I also had to make one change for timezone support PSD/PDT on an OSX operating system.  Essentially, org-toodledo was dumbed-down to support just a couple of things like TODO and DONE -- however, the raw power of Toodledo for all keywords and priorities is fairly easy to obtain by modifying the source code of org-toodledo -- plus something like the following:  (cond   ((equal (car (cdr (current-time-zone))) ""PDT"")     (setenv ""TZ"" ""UTC+7""))   ((equal (car (cdr (current-time-zone))) ""PST"")     (setenv ""TZ"" ""UTC+8"")))  (setq org-todo-keywords '((sequence   ""Active(a)""   ""Next Action(n)""   ""Canceled(c)""   ""Hold(h)""   ""Reference(r)""   ""Delegated(d)""   ""Waiting(w)""   ""Postponed(P)""   ""Someday(s)""   ""Planning(p)""   ""|""   ""None(N)"")))  (setq org-highest-priority ?A) (setq org-lowest-priority ?E) (setq org-default-priority ?A)"
emacs,3c2sfv,lawlist,1 point,Sat Jul 4 06:01:26 2015 UTC,"Toodledo on Android:  https://www.toodledo.com/info/android.php  There are numerous Toodledo compatible apps available for major operating systems on computers and also all the popular smart phones and tablets.  For Events (aka appointments), I use Reference and Delegated keywords.  For Tasks (stuff todo), I use Active, Next Action, Someday keywords.  Toodedo has a nice backup feature, which I download every evening."
emacs,3c2sfv,lawlist,1 point,Sat Jul 4 19:39:48 2015 UTC,I had a lot of trouble getting this working when I tried it a while ago. Have things improved. Are you using myuhe's fork with async?
emacs,3c2sfv,IvanMalison,1 point,Sat Jul 4 21:49:01 2015 UTC,"I've never tried using myuhe's fork with async.  My recollection is that org-toodledo.el from the Christopher J. White Github repository worked out of the box (but dumned-down for just a couple of keywords such as TODO and DONE), so long as the requisite http-post-simple.el is installed -- the readme.md of the Github repository for org-toodledo.el describes how to fix the one error message regarding no need to quote a lambda statement.  There are a few optional features that require a Toodledo paid subscription, but the basic features work with the free account.  I still use org-toodledo.el numerous times daily for personal and business use (with a paid Toodledo yearly subscription); however, mine is customized as described above.  I read one of the issues on the Github repository about potential changes in the Toodledo API; however, mine still works just fine -- I'm not sure why some people have had problems.  I don't use subtasks as part of my daily workflow."
emacs,3c2sfv,lawlist,7,Sat Jul 4 21:59:47 2015 UTC,"Check out Orgzly, but it's android only."
emacs,3c2sfv,hamsterslayer01,3,Sat Jul 4 06:03:56 2015 UTC,Doesn't really support enough features to be useful yet. No agendas is a really big issue... Also it's closed source which is pretty lame
emacs,3c2sfv,IvanMalison,1 point,Sat Jul 4 21:49:51 2015 UTC,"Currently I just sync agenda to my Google Calendar, which is not that good but still basically works. The original agenda functionality in MobileOrg wasn't very usable anyways, as you had to click on each day to expand the view"
emacs,3c2sfv,IvanMalison,1 point,Sun Jul 5 04:50:29 2015 UTC,"Yeah. I wasn't saying that mobileorgs agenda functionality was adequate. It also had the problem that it would only update on synx, so items added to an org-agenda-file would not be reflected until sync"
emacs,3c2sfv,acow,3,Sun Jul 5 19:13:12 2015 UTC,"Cool! This seems to be exactly what I need as I'm an Android user. I think the project could consider improving its SEO though. Before I posted I Googled org mode mobile and Orgzly was nowhere to be seen among most common results, and I've been using MobileOrg Android for a few months already. I understand that they might want to distinguish themselves from the original org mode a bit but still it would be beneficial if it were easy for old org mode users to find them. Also this project is not open sourced... But for now it apparently functions better than an open-source one so it'll do for me."
emacs,3c2sfv,verdigris2014,2,Sat Jul 4 07:43:42 2015 UTC,"For iOS, part of the problem was the need for a paid developer's license to do any work on a device. This is changing with iOS 9, so hopefully more folks will pursue an interest in improving the app, or starting a new one."
emacs,3c2sfv,comeandkillme,2,Sat Jul 4 18:58:09 2015 UTC,I now use org-trello to capture notes and todos.  Syncs very well with org on my desktop.  I use Dropbox to refer to my org files on the move.   Mobile-org might as well be dead for my purposes.
emacs,3c2n10,imslavko,2,Sat Jul 4 04:41:18 2015 UTC,You can use helm-shell-history to narrow history using Helm. Here is a demo (the demo begins when you see START at the bottom).
emacs,3c2n10,tuhdo,1 point,Sat Jul 4 05:40:20 2015 UTC,"I use this, but it is similar to manually pressing Ctrl-r when you remember that something might appear in the history."
emacs,3c2n10,WesOfWaco,1 point,Sat Jul 4 07:37:39 2015 UTC,"When I use company mode in a repl in eshell, I get auto-complete pop-ups like you mention"
emacs,3byh4v,eniacsparc2xyz,2,Fri Jul 3 04:54:58 2015 UTC,Complement: Python server - https://github.com/tkf/python-epc
emacs,3byh4v,reactormonk,2,Fri Jul 3 04:55:45 2015 UTC,"Another example how to use it as client ( + for calling) for nim-mode.  The server, with a sexp parser/generator is implemented in nim."
emacs,3bwu65,eniacsparc2xyz,22,Thu Jul 2 20:23:00 2015 UTC,"M-x bash-mode, M-x python-mode, M-x ruby-mode, ..."
emacs,3bwu65,wasamasa,11,Thu Jul 2 20:27:51 2015 UTC,-*- <mode> -*-   somewhere near the top or bottom of the file sets the file to that mode. For instance  #!/usr/bin/env python # -*- python -*-   automatically sets emacs to python-mode when you open the file.
emacs,3bwu65,deadshits,6,Thu Jul 2 23:45:35 2015 UTC,"To take some of the magic away, there's an interactive way to do this:  M-x add-file-local-variable-prop-line RET mode RET whatever-mode RET"
emacs,3bwu65,Boojum,2,Fri Jul 3 05:14:58 2015 UTC,"In this case, the shebang alone should be sufficient."
emacs,3bwu65,mars_888,9,Sun Jul 5 00:25:18 2015 UTC,"Emacs uses major-modes for this. Generally, to activate a mode manually, you can hit M-x and type <language>-mode. So for Ruby this would be M-x ruby-mode. Note that the major-mode for the language has to be installed to work.  See also http://www.gnu.org/software/emacs/manual/html_node/emacs/Major-Modes.html"
emacs,3bwu65,DPaluche,9,Thu Jul 2 20:34:01 2015 UTC,"Also, you can set Emacs up to do this automatically."
emacs,3bwu65,nroose,1 point,Thu Jul 2 21:26:29 2015 UTC,"If you have emacs installed well, it will recognize the file.  And then you can customize it well.  I have sh files to run if I do a compile on them.  Same with ruby files."
emacs,3bwu65,ressis74,1 point,Fri Jul 3 03:19:57 2015 UTC,"I know that emacs recognize, the file types. However some times I have to switch to a new buffer put some code and change the file type of the new buffer.  (python-mode)  (ruby-mode) (c-mode)   So those functions worked for me."
emacs,3bwu65,AnAirMagic,3,Fri Jul 3 03:30:06 2015 UTC,"I will admit that there are times when opening a new buffer is appropriate, but more often, I will use find-file (C-x C-f) to open a file that doesn't yet exist. This will usually set up the major (and minor) modes for me automatically."
emacs,3bwpve,dalavana,4,Thu Jul 2 19:50:53 2015 UTC,"At first, I thought the same as you. But I think it makes more sense to do it the other way around: enable emacs state globally, and set normal states only for those buffers in which you actually EDIT text. For all other buffers, their current MODES usually define a lot of useful keys; and normal state is only a Ctrl-z away."
emacs,3bwpve,VanLaser,1 point,Thu Jul 2 20:07:38 2015 UTC,"normal state is only a Ctrl-z away   ...what about elscreen users? No, seriously - I am currently having this conundrum."
emacs,3bwpve,ihatecatsandpeople,2,Thu Jul 2 22:48:53 2015 UTC,"How about:  (setq elscreen-prefix-key ""\C-`"")"
emacs,3bwpve,VanLaser,1 point,Thu Jul 2 23:06:12 2015 UTC,"Is that Ctrl-space?  Edit: sorry, that's Ctrl-backtick.  It's currently bound to other-frame (OSX). I just have to find another prefix that makes sense and I won't regret later."
emacs,3bwpve,ihatecatsandpeople,5,Thu Jul 2 23:08:51 2015 UTC,"You can fix keybind conflicts as you find them. Fix it once and it's fixed forever.  Example for dired:  (with-eval-after-load ""dired"" ;""dired"" -> ""dired.el"" in load path.   ;; vimify some keybinds.   (define-key dired-mode-map (kbd ""j"") #'dired-next-line)   (define-key dired-mode-map (kbd ""k"") #'dired-previous-line)   (define-key dired-mode-map (kbd ""n"") #'evil-search-next)   (define-key dired-mode-map (kbd ""N"") #'evil-search-previous)    ;; optional: replace the ""N"" binding we clobbered with an alternate binding.   (define-key dired-mode-map (kbd ""C-c N"") #'dired-man))   Tips:  Details on the current mode: C-h m  See what function is bound to ""j"": C-h k j"
emacs,3bwpve,Starlight100,3,Thu Jul 2 20:52:39 2015 UTC,"I did this for a while, but it gets to be a pain in the ass when you are essentially tasked with coming up with a whole new keymap for certain modes.    Honestly, that's what's driving me away from evil."
emacs,3bwpve,nautola,1 point,Fri Jul 3 01:14:43 2015 UTC,Very useful. Thank you!
emacs,3bwpve,ReneFroger,3,Thu Jul 2 23:07:47 2015 UTC,"Evil mode should be enabled in all buffers by default; it is for me. For those modes that have their own great key mappings, I use settings like:  (add-to-list 'evil-buffer-regexps '(""\\*magit:""))   That disables evil in buffers whose name matches the pattern. You can, of course, have many of these."
emacs,3bwpve,bakuretsu,1 point,Thu Jul 2 20:38:04 2015 UTC,"Huh, that's a very unintuitive name choice"
emacs,3bwpve,ares623,1 point,Fri Jul 3 03:45:09 2015 UTC,Thanks everybody for the reply.
emacs,3bvycb,sigzero,5,Thu Jul 2 16:24:41 2015 UTC,"In your .emacs files, just load your user configuration file wherever it may be on your computer -- i.e, just one line of code.  In your user configuration files, set the important variables to point to your preferred location -- such variables, include, but are not limited to user-emacs-directory, custom-file, user-init-file, bookmark-default-file, savehist-file, abbrev-file-name, package-user-dir, eshell-directory-name, url-cookie-file, url-history-file.  The list goes on.  Eventually, you will track down all of the stuff you normally use on a daily basis so that everything goes to the right location.  This is very rewarding when your are all done, because it is easy to back-up and synchronize multiple computers with the Emacs installation.  I have everything in one main directory with many subdirectories -- including the Emacs installation itself.  You can also modify/create a start-up.el and/or site-start.el (beyond the scope of this comment) and obviate the need for a .emacs file."
emacs,3bvycb,lawlist,2,Thu Jul 2 17:16:52 2015 UTC,Thanks!
emacs,3bvycb,aartist,1 point,Thu Jul 2 17:38:30 2015 UTC,"Do M-x apropos-value to  "".emacs.d"" or something like that.  It will show all the variable that you might need to fix."
emacs,3bx7xj,nikonikolai,2,Thu Jul 2 22:11:44 2015 UTC,"You can use this:  (slime-eval '(swank:eval-and-grab-output ""(+ 1 2)"")) ;; => ;; ("""" ""3"")   When evaluating a foreign language, it has to be a string, since Elisp can't represent all of CL reader abilities.  See lispy for the code."
emacs,3bx7xj,abo-abo,2,Fri Jul 3 09:43:42 2015 UTC,"API example:  (lispy--eval-lisp ""(format nil \""~d\"" (+ 21 21))"") ;; => ""\""42\"""""
emacs,3bx7xj,abo-abo,1 point,Fri Jul 3 09:50:02 2015 UTC,"Exactly what I needed, thanks a bunch."
emacs,3bt2nh,tarsius_,18,Wed Jul 1 22:35:59 2015 UTC,Please read the update instructions and if you intend to install the new release using package.el  then this too.
emacs,3bt2nh,pzone,4,Wed Jul 1 22:38:09 2015 UTC,"It should be save to install v2.1.0 from Melpa or Melpa-Stable now. Provided you carefully read the update instructions of course.  If you use extensions that depend on Magit, then you might also want to checkout the compatibility table first. Same for themes.  However, do not update yet if you are using Marmalade, because of this."
emacs,3bt2nh,ReneFroger,1 point,Thu Jul 2 10:37:04 2015 UTC,It's now also available from Marmalade.
emacs,3bt2nh,agumonkey,14,Mon Jul 6 06:28:12 2015 UTC,"Oh my god, finally!  Can't wait to test it out.  I hope Mr. Bernoulli can find the sponsorship he's looking for, Magit is the best Git client out there."
emacs,3bt2nh,ReneFroger,3,Wed Jul 1 22:55:27 2015 UTC,I was thinking to crowdfunding the financial support for Magit/Mr. Bernoulli. Wondering if this would be a viable option.
emacs,3bt2nh,agumonkey,5,Thu Jul 2 07:17:12 2015 UTC,http://melpa.org/#/magit shows 140K downloads. We could definitely provide J.Bernoulli with a nice cash flow.
emacs,3bt2nh,VimFleed,3,Thu Jul 2 10:27:50 2015 UTC,http://magit.vc/donations.html
emacs,3bt2nh,rejeep,1 point,Thu Jul 2 10:51:10 2015 UTC,Didn't even know that website. Thanks.  <shutupandtakemymoney/>
emacs,3bt2nh,ReneFroger,1 point,Thu Jul 2 11:43:20 2015 UTC,<M-x> shut-up-and-take-my-money
emacs,3bt2nh,hyperbling,12,Sun Jul 5 22:33:49 2015 UTC,This is not your average spare time hacking. People using Magit should donate. Thanks Jonas!
emacs,3bt2nh,salaperuna,5,Thu Jul 2 06:32:38 2015 UTC,http://magit.vc/donations.html
emacs,3bt2nh,hyperbling,1 point,Thu Jul 2 10:51:13 2015 UTC,Thanks to everyone who donated!
emacs,3bt2nh,salaperuna,5,Fri Jul 3 13:12:13 2015 UTC,the performance improvements are like night and day on windows.  good job!
emacs,3bt2nh,yellowviper,1 point,Wed Jul 1 23:28:02 2015 UTC,"Wow, cool! Is it usable on Windows now?"
emacs,3bt2nh,hyperbling,3,Fri Jul 3 16:35:07 2015 UTC,"the diffing was really slow on windows, so slow that it was a 1-2 second lag from the moment you hit tab -- enough that i didn't use magit to commit anything.  now it's comparable to a unix box."
emacs,3bt2nh,tuhdo,1 point,Sat Jul 4 03:34:21 2015 UTC,Thanks for letting me know. I was so sad when I discovered this on Windows.
emacs,3bt2nh,Grue,1 point,Sat Jul 4 06:34:05 2015 UTC,Do you have some info about your config? I am still seeing pretty slow performance on Windows (with cygwin) although its a lot better than it used to be.
emacs,3bt2nh,BruceConnor,1 point,Tue Jul 14 17:33:56 2015 UTC,"pretty much default settings.  i'm not doing anything fancy.  it's still not as fast as linux/osx, but it's at least usable now.  albeit, if you're using cygwin you're paying the emulation cost."
emacs,3bt2nh,tuhdo,6,Tue Jul 14 22:31:27 2015 UTC,"Where is branch manager? I miss it. I can no longer access it with b v, or from M-x, Was it removed?  Thanks for your hard work in this great package!  EDIT: it seems like magit-show-refs is the command. It should be assigned to b v again."
emacs,3bt2nh,shintak,4,Thu Jul 2 04:37:33 2015 UTC,"I agree, it's a bit annoying that some old shortcuts no longer work. Especially considering b v, r v do nothing right now. I was also used to E for Interactive rebase, but now E is used for something else so I guess I have to get used to the new combination."
emacs,3bt2nh,BruceConnor,3,Thu Jul 2 14:46:42 2015 UTC,"This version is a big change. Approach it with an open mind. Some things are in different places in order to make everything mor consistent.   In particular, interactive rebase is under r e, because all rebasing is under r."
emacs,3bt2nh,shintak,1 point,Thu Jul 2 17:19:37 2015 UTC,You can now use y then b b to checkout to replace the old b v. I guess the old features are still there but have different ways to access.
emacs,3bt2nh,CQQL,2,Thu Jul 2 15:22:22 2015 UTC,"y is assigned to magit-show-refs-popup command. But in the branch manager, I can't no longer checkout with RET..."
emacs,3bt2nh,bauta-steen,2,Thu Jul 2 07:05:52 2015 UTC,You can check out in that screen with bb
emacs,3bt2nh,tending,1 point,Thu Jul 2 10:00:59 2015 UTC,Thanks!
emacs,3bt2nh,rson,6,Thu Jul 2 12:08:30 2015 UTC,"I love this. The speed is amazing and the new colors in the status buffer are nice. I guess, there is a lot more to explore. Time to reread the refreshed manual!"
emacs,3bt2nh,its_never_lupus,3,Thu Jul 2 00:27:44 2015 UTC,"Don't really want to switch from Mercurial to Git, but without Magit-hg I guess I will have to soon :/ Great work anyways!"
emacs,3bt2nh,holgerschurig,3,Thu Jul 2 01:32:26 2015 UTC,Holy crap what an effort. Kudos!
emacs,3bt2nh,kaushalmodi,2,Thu Jul 2 02:16:15 2015 UTC,Anyone here using magit-svn from melpa?  The package on melpa seems to still depend on magit 1.3 even though the magit/magit-svn repo has depended on magit 2.1 since at least 10 months ago.  Interesting to note that the build in melpa seems to have the same date as the pull request about splitting magit-svn into its own repo.  This looks a little broken.  I've filed an issue with melpa.
emacs,3bt2nh,kaushalmodi,2,Thu Jul 2 12:16:06 2015 UTC,What's the difference between this and and DVCS? I thought DVCS would be better in principle because it supports different backends.
emacs,3bt2nh,kaushalmodi,1 point,Thu Jul 2 14:07:14 2015 UTC,"And this makes it not ""better in principle"", but ""worse categorical"". Because DVCS doesn't support things like git-rebasing and the many other nice things magit allows."
emacs,3bt2nh,lambdasgr,1 point,Mon Jul 6 15:05:12 2015 UTC,"/u/tarsius_ What will I be missing out if I use git version 1.9.2? That is the version installed at work. If I upgrade to the latest 2.x version or even 1.9.4 in my local area, I get ""Invalid username or password"" error on git push.   [https] I tried enabling two factor authentication and using token as password; same error [https] I tried disabling two factor authentication and using github password; same error Cannot use ssh as that port is blocked at work   I have also updated openssl and libcurl to the latest available release.  More info added to this SO question"
emacs,3bt2nh,BruceConnor,1 point,Thu Jul 2 14:16:45 2015 UTC,What will I be missing out if I use git version 1.9.2?   Bump /u/tarsius_
emacs,3bt2nh,lambdasgr,2,Mon Jul 6 23:27:19 2015 UTC,"Nothing. On the contrary you will get a nice little warning at startup and then random errors in unexpected places :-)  Seriously though, you just have to use what is declared to be the minimal version. I don't remember which features require that we use at least that particular version. But generally speaking, the cost of supporting very old versions was just getting to high, to still be justifiable."
emacs,3bt2nh,babilen5,1 point,Tue Jul 7 00:04:10 2015 UTC,"Thanks for the reply. I must have spent at least 5-6 hours figuring out to get my local git install right. I tried locally installing git versions 1.9.2, 1.9.4, latest 2.5x but in all I get ""Invalid username or password"" error (other git actions like git status, git add, git commit, etc work fine). Please refer to the above SO link for more details if interested. In the end, I had to use the sysadmin installed git v1.9.2 as that was the only version that allowed me to push stuff to github. So far, I haven't seen any errors and I can override the warning defun. So I'll wait till the sysadmin updates the git version or till a lightbulb goes off and I am able to resolve my local git install issue."
emacs,3bt2nh,drjeats,1 point,Tue Jul 7 00:35:28 2015 UTC,Why is it listed as obsolete in both melpa-stable and marmalade?
emacs,3bt2nh,shackra,2,Thu Jul 2 14:20:21 2015 UTC,"You probably have the Melpa version installed, whose version number outnumbers both other repos."
emacs,3bt2nh,holgerschurig,1 point,Thu Jul 2 17:21:01 2015 UTC,"Yup, was using magit-90141228. Removed it 2.1.0 became available."
emacs,3bt2nh,holgerschurig,1 point,Thu Jul 2 17:29:48 2015 UTC,Only to be replaced by the daily build in melpa during the next upgrade. There is little you can do but pin the package or upgrade to emacs 25.1 with its support for repository priorities.
emacs,3bvhxa,VanLaser,1 point,Thu Jul 2 14:16:04 2015 UTC,"I have created a google translate function for Emacs. It can display the result in either a new buffer when translating a region, or as a popup when translating the current paragraph. It does rely on the official API so you need an API key, but it's more stange than the ones that try to parse the google web page: https://github.com/lokedhs/em-translate"
emacs,3bvhxa,lokedhs,2,Thu Jul 2 15:37:38 2015 UTC,"I suppose you mean ""less strange"" :) That's nice - do you think to push the package on Melpa?   The original post is more about wrapping a translation function by an ""evil operation"" (a la Vim), so that it can be used with motions or text-objects (translate ""a sentence"", ""a paragraph"", ""inside quotes"" etc.), than about actually implementing a translation function."
emacs,3bvj2v,its_never_lupus,3,Thu Jul 2 14:25:05 2015 UTC,"Re-order the listing in the buffer, or manipulate the structure of the archive itself?"
emacs,3bvj2v,lawlist,1 point,Thu Jul 2 16:06:22 2015 UTC,Just the visible listing.
emacs,3bvj2v,lawlist,1 point,Thu Jul 2 19:13:23 2015 UTC,"archive-mode uses external utilities to generate the view, so my first thought would be to review the man pages to see if that particular utility of interest is able to generate output in the format that you so desire.  This can be tested in a terminal window or something like M-x shell within Emacs.  If that utility does not offer a listing that you would like, then the next step would be to sort the output with Emacs -- that would involve creating a custom regexp to match the output of the utility of interest (or archive-mode may already have a regexp included, you would need to check), and then gathering the data into a list, sorting the list, and inserting the list into the output buffer.  For example, I installed the full version of rar that does not have the default output of the free-rare for which archive-mode was written.  So, I have my own regexp that looks like the following and I modified archive-rar-summarize accordingly.  Such a regexp can be used to gather the data, and put it into a list for purposes of sorting.  (defvar unrar-buf-regexp (concat   ""^ +Name: \\(.*\\)\n""   "" +Type: \\(.*\\)\n""   "" +Size: \\(.*\\)\n""   "" +Packed size: \\(.*\\)\n""   "" +Ratio: \\(.*\\)\n""   "" +mtime: +20\\([-0-9]+\\) +\\([0-9:]+\\),[0-9]+\n""   "" +Attributes: \\(.*\\)\n""   "" +CRC32: \\(.*\\)\n""   "" +Host OS: \\(.*\\)\n""   "" +Compression: \\(.*\\)\n""   ""\\( +Flags: \\)?\\(.*\\)?\n\n?"") ""Regexp for `unrar` version 5.11 (OSX) temporary buffer."")"
emacs,3bvj2v,RobThorpe,1 point,Thu Jul 2 19:43:07 2015 UTC,"I was looking at a tar file which is opened in tar-mode, which according to the documentation doesn't use the external tar command.  However the problem of no re-order option does also exist in archive-mode.  I guess re-writing bits of tar-mode would be a way to add re-ordering functionality, but I'm not sure my elisp is up to that."
emacs,3bvj2v,kaushalmodi,2,Thu Jul 2 20:14:39 2015 UTC,I suggest opening a bug-report against Emacs and asking for an enhancement for this.
emacs,3buem4,chocolait,3,Thu Jul 2 06:05:35 2015 UTC,You may give gollum a chance : https://github.com/gollum/gollum  It can be :   - edited via git and/or via the webui   - configured on multiple webui (intra/extra)   - configured not to be editable via the webui   - …
emacs,3buem4,OlivierLM,1 point,Thu Jul 2 07:28:09 2015 UTC,Thanks for your input. I'll give it a try this weekend.
emacs,3buem4,lambiase,2,Thu Jul 2 15:35:42 2015 UTC,You may also try gitit - based on git and Pandoc
emacs,3bsabz,ReneFroger,27,Wed Jul 1 19:09:06 2015 UTC,"Most people don't want to customize their editor, they want something that ""just works"" and holds their hand along the way. There is value in that, but a lot of us see more value in having our editor bend to our will.   Look at the success of sublime text. It was pretty, and it ""just worked"" out of the box for people used to CUA keyed programs. Things like in-file autocompletion, html tag matching, multiple cursors, and a nice theme are there and easy to use by default so it makes the experience much more enjoyable.  I don't think I would have ever stuck with Emacs if I wasn't forced to because of the company I worked for at the time, I'm glad I did but I really understand why people don't put in the effort to use Emacs. It is because the effort is really quite large.   Starter packs provide some of the ""out of the box"" niceness people want which is why Prelude and Spacemacs have been such a success, but a lot of long time Emacs users really cringe at the idea of starter packs because they cringe at the idea of bending to the opinion of an editor instead of the ender bending to the opinion of the user.  As such I find most Emacs users really don't care about marketing Emacs because the people who know what they want in an editor will find their way to Emacs on their own, and people who want an easy to use default experience won't ever be sold on something like Emacs. In the past I have been very willing to talk to developers about Emacs and I would try to convince them to use it and support them in learning the editor however almost everyone I convinced to start using vanilla emacs eventually gave up and everyone using a starter kit never moved away from the kit's defaults. Because of this I don't really market Emacs towards people, I just tell them it's something they should experiment with and after that it's anybody's guess whether or not they stick with it.  That being said, the main value in marketing Emacs to more people is building a bigger community and hopefully then building bigger and better packages that make text editing even more efficient for everyone. However I'm not sure this pipe dream will ever actually work itself out."
emacs,3bsabz,jordonbiondo,4,Wed Jul 1 19:25:36 2015 UTC,"I completely agree with you.  I think it is worth discussing the ""longtime Emacs users"" and in particular the developers.   It's not only the issue of starter packs and defaults, but the conservative community has promoted a culture of Emacs not being ""for"" non-emacs users.     Emacs defaults are set in stone and there is no plan to incorporate alternate configurations along with the standard release. Not changing the defaults is of course completely understandable, since it would break everyone's configuration, and for what it's worth most of my more radical configuration changes are only useful because of major packages like Evil mode and Helm.  Still, including nothing out of the box is a real hurdle.  Emacs development is very cautious and measured.  It's not ""move fast and break things,"" it's, ""all breaking changes will come with an essay explaining to you why we are choosing to do it this way."" Core Emacs is rock solid, lightning fast and takes very little memory. However that's not the way I use Emacs, or I expect the way most people do.  I load up doing things like running Irony-mode and Rtags at the same time, just because it works, damned if Emacs wants half a gig of memory, I've got 24. When I use Emacs it breaks, hangs, has compatibility issues, is completely funky and an absolute blast to use.  I do not think this is not what the core Emacs developers envision for the software. This is really a detail regarding my second point, but close to home for me.  The lack of multi-threading holds Emacs back for me, a devotee, and I'm certain it is the same for prospective newcomers.  The fact I can hang my editor because I accidentally used grep instead of ag to search a large code base is completely unnecessary. However, there is no way to introduce threading without allowing the possibility that Emacs code breaks. I was looking in to why there is no multithreading in Emacs and followed the arguments about what is necessary until I eventually researching half-baked category theory) and realized I hit a fundamental disagreement with what I'd like Emacs to be.  I would rather they introduce threads in a way that breaks Emacs once in a while, because my experience of using Emacs without threads is broken in a different way.  But leaving a few question marks in the design documents is not the GNU Emacs way.  Emacs developers are very forthcoming about the fact they do not develop the software with non-emacs users high on their minds.  For example, the functionality of Emacs on Windows is far worse than on Linux, and much worse than is really necessary, if the developers prioritized the build at all.  But an official release of Emacs for Windows is relatively new, and it is explicitly justified as [http://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Why-Emacs-on-Windows.html#Why-Emacs-on-Windows](a way to convert users from proprietary software to free software), not because supporting Windows gives them the largest potential user base.     While I have taken a critical perspective here, I should soften the tone by adding I find nothing fundamentally wrong with the GNU Emacs development mindset or that I would imagine pushing my own goals would have much success.  Emacs was my gateway to using Linux, and I think Emacs certainly achieves the goal of cultivating the free software ecosystem. The reason I like free software is not because of any radical economic grounds: the reason I like free software is because I can open it up and tinker with it to make it work the way I want.  Emacs is the Lispy embodiment of this philosophy."
emacs,3bsabz,pzone,0,Wed Jul 1 22:54:27 2015 UTC,"Emacs defaults are set in stone [...]   But each and every one of them are modifiable (AFAIK).   Emacs development is very cautious and measured. It's not ""move fast and break things,"" it's, ""all breaking changes will come with an essay explaining to you why we are choosing to do it this way.""   I'd have to either stop using emacs or maintain my fork if this changed. And here maintain means use the same version zealously for the rest of my life. I don't like hipsterware that changes everyday.    The lack of multi-threading holds Emacs back for me [...]   This is the biggest flaw in emacs. The second I'd contest to be the Elisp. I'm really looking forward to guile-emacs.   Emacs developers are very forthcoming about the fact they do not develop the software with non-emacs users high on their minds.   Why would they?"
emacs,3bsabz,delbosforo,1 point,Wed Jul 1 23:41:52 2015 UTC,I actually came back to Emacs from Sublime Text because I felt disappointed with the customization options available.
emacs,3bsabz,Imxset21,5,Thu Jul 2 00:19:53 2015 UTC,"Emacs is probably the most customizable editor in the existence of mankind. Of course you're going to be disappointed when comparing it to anything else. However, sublime is quite customizable compared to most modern text editor or ide applications people use"
emacs,3bsabz,thang1thang2,5,Thu Jul 2 02:23:13 2015 UTC,"One reason is that Vi is the  display editor of the Single UNIX Specification. Yes, it is specified by the POSIX standard that vi must be there. So every Unix system must have vi installed to be called Unix. (vi executable is nowadays provided by Vim; for example vim-tiny package in Debian). Emacs is not required by any such standard. So, many people learn Vi because they can be rest assured that the editor is installed everywhere, especially when working on your non-regular remote server.  (Linux is not officially certified UNIX etc.)"
emacs,3bsabz,spam4youfool,-1,Wed Jul 1 20:22:13 2015 UTC,"This is not about Vim, I was just using that as an example.  This is about why Emacs is not popular and how we could change that."
emacs,3bsabz,spam4youfool,2,Wed Jul 1 20:33:00 2015 UTC,"I was explaining that Emacs is not as popular because Vim is more popular because POSIX requires it.  One way to make Emacs popular would be by requesting POSIX standardization group to make Emacs mandatory, albeit a stripped-down version."
emacs,3bsabz,delbosforo,2,Wed Jul 1 20:36:53 2015 UTC,"I was also refering to another editors like Visual Studio, Eclipse or IntelliJ. I guess you don't get the idea of my post. It's absolutely NOT my intention to spark an Emacs vs Vim debate. And it's still don't explain why Emacs is not popular compared with Eclipse, etc. Thanks for your reply anyway."
emacs,3bsabz,chuchana,3,Wed Jul 1 20:39:05 2015 UTC,"This is a wrong mode of perception anyway. We should be aware that Emacs is not a text editor. Apart from web browsing, all I do I do in Emacs. Mail, pdf-reading, authoring, RSS, read-later lists (i.e. org-mode), some note-taking (although I mostly use pen and paper for that), programming, listening to podcasts (i.e. EMMS), looking at pictures, git (i.e. magit) etc., I hardly ever use the OS for anything. So in fact, the comparison is flawed, Emacs is not in the same class with neither of the products it is compared to in this thread. Maybe the only contender for a comparison is Rob Pike's Acme, which is a rather lovely piece of software I at times attempted to use and appreciate. Emacs is a generic platform for computing.  On the other hand, Visual studio and Eclipse are programmers' tools, they are only as generic as a car factory, they are completely focused on programming. Vi(m), on the other hand, and ex are great tools for text editing. But that is it, it is a program purposed for text editing. Yes one can use it to write mail or LaTeX, but still, it is a text editor, not something like Emacs.  Vim bests Emacs in text editing, mutt bests Gnus as a mailing tool, anything that renders PDFs doest it better than docview, Emacs lisp is a sub-par programming language, and this list may go on, but what makes Emacs the snowflake it is is that it is a system on which all this functionality is integrated using one programming language and that the system and the language are effortlessly extendible. The power of C-x C-e is incredible."
emacs,3bsabz,delbosforo,2,Wed Jul 1 23:31:22 2015 UTC,"A bit off topic, but in my opinion the usability of PDF files is much better with pdf-tools instead of docview."
emacs,3bsabz,KDallas_Multipass,1 point,Fri Jul 3 18:24:19 2015 UTC,"You have changed my life, seriously! Thanks a billion. I probably would have never known about this pdf-tools, I just compiled and started using it, I'm close to bursting in tears :)"
emacs,3bsabz,vermiculus,5,Fri Jul 3 19:03:17 2015 UTC,"In a similar vein to DrugCrazed, if the infinitely customizable emacs were to be widely proliferated, moving your customizations from machine to machine is not simple and therefore much of the work you've put into customization needs to be redone or is not available to you.  If you sit down in front of vim, with crappy customization choices, its likely to be configured similarly to any other vim you're going to come up against on another machine.  This is a bit of an apples to oranges comparison, because emacs as an extensible text editor solves a different problem than vim the ubiquitous text editor.  Where vim can help you with editing text on a remote machine after you've ssh'd in and need to edit a file, emacs CAN be used to remote in and edit files, but if you happen to be sitting on a random machine you need to service and reach for an editor, vim is likely to be there, and while emacs may, it certainly won't have your customizations.  Whereas for emacs, if you wish to develop software, much of your workflow isn't necessarily known up front, so customization allows for big wins.  And yes I've used emacs/tramp to remote edit files but it isn't always pretty."
emacs,3bsabz,instant_sunshine,2,Wed Jul 1 19:42:47 2015 UTC,"I don't think this is a vim/emacs debate, but as a staunch supporter of emacs, I have to agree that emacs and vim solve different problems. Emacs can be customized to your heart's content and this is super nice when you're 'at home'. Vim on the other hand is a decent editor out-of-the-box and is available everywhere. If you're line of work involves working with a bunch of machines, you should learn vim. If not, then emacs. If both, both. Use the right tool for the job."
emacs,3bsabz,vermiculus,2,Wed Jul 1 23:15:32 2015 UTC,"If you're line of work involves working with a bunch of machines, you should learn vim   No, you need a decent devops workflow.  Emacs will also serve you VERY well if you need to jump to Box N and modify a file, thanks to Tramp."
emacs,3bsabz,instant_sunshine,3,Thu Jul 2 00:58:31 2015 UTC,"Pardon me, but this is simply not true for a majority of jobs where I see it necessary to even move from your desk. If I'm not in my chair, I'm either at lunch, talking with someone in their office, or physically at another machine that is on a secured (or otherwise separate) network. No SSH, no Tramp."
emacs,3bsabz,vermiculus,1 point,Thu Jul 2 03:50:49 2015 UTC,"Then the premise is even more ridiculous.  The suggestion is that this bunch of machines are pristine and reference POSIX setups.  You'd be using organisation specific setups or commodity hardware.  In which case Vim would be as Likely as Emacs or Notepad or TextEdit...  or Visual Studio, or IntelliJ etc... etc. or more commonly, software you install in a few moments, to work in a productive and comfortable way.  The weakness of the argument is the point, not the hypothetical non-existent software configuration."
emacs,3bsabz,instant_sunshine,1 point,Thu Jul 2 12:41:42 2015 UTC,"I really cannot go into any detail about the setup of the machines themselves, but I will say that vim (at the very least, vim symlinked to vi; I wouldn't know the practical difference, really) was always available whereas emacs was not.  The premise is not ridiculous, but your inference is – the machines are given their images (vetted, secured, etc.) via physical media. Emacs is not included on this image – no specialized editor is beyond those that came with the operating system.  My point is that sometimes you really are stuck with what you have and you've got to learn to be productive in that environment."
emacs,3bsabz,vermiculus,1 point,Thu Jul 2 12:51:23 2015 UTC,"Your example isn't so general that catering to it should be given as blanket advice, should it?  That is the point."
emacs,3bsabz,instant_sunshine,1 point,Thu Jul 2 12:54:10 2015 UTC,"I think you underestimate how many times that particular situation will come up. I'm not saying that it's overwhelmingly common, but I do believe every developer will need to face a computer that doesn't have his/her tools available at some point.  There are other examples of where it may help to learn vim: for example, pair programming at not-your-desk with someone who uses vim. I need to be getting to work though, so I'll have to think of other examples later tonight :)"
emacs,3bsabz,vermiculus,1 point,Thu Jul 2 13:01:54 2015 UTC,"It's ok, you're only going to come up with edge cases.  Pair programming where one person is forced to use a tool their not happy to use, is not pair programming, it's bullying.  I should know, I force people to use Emacs, and aggressively uninstall  vim, sublime text, notepad ++, all manner of IDEs... and behead the heretics.  I'm joking of course. but this thread is now silly."
emacs,3bsabz,jivatmann,1 point,Thu Jul 2 13:07:19 2015 UTC,"XD Well I suppose I'm coming at this from more of a teaching perspective -- I led classes for more than three years before hopping into industry. When teaching, you have to be adaptable."
emacs,3bsabz,agumonkey,4,Thu Jul 2 13:40:40 2015 UTC,"I started using Emacs about a year ago and I still feel like a beginner in some way. If you have nobody who can help you out, it's a tough journey.  I'm comfortable know and enjoy it more every day but it took me a lot of effort to get there. Most people are not able to (or just don't want) spend that much time on learning ""just a new tool"". And as a beginner you might think of Emacs as just another tool which in addition comes with weird defaults and you don't know if its worth it.  So I think the best strategy to get more people into Emacs or to market it like you say, would be to create more good learning resources for beginners and more videos and blogposts which show some cool stuff you can do with it. And last but not least tell people that it is Free Software and that this Editor will respect their freedom!"
emacs,3bsabz,jivatmann,6,Wed Jul 1 20:25:35 2015 UTC,"People using Emacs for 10 years still learn a lot. People using Emacs for 20 years still learn a lot. It's programmable, it's old, it's messy and full of gems (elisp, calc, bindat, ...).  The biggest problem with systems of this kind, is the sheer size. I tried to RTFM, but my brain wasn't ready to swallow a pill so big. I learned about C-h f, quite late, and still didn't use it as a reflex. Only 2 years ago I finally re-read C-h * functions, thinking...  gosh if only I knew that before.  Emacs should have layers, just like a video game[1], of increasing complexity. And I'm still hoping for it to eat its own dogfood. It's supposed to be a lisp self-documenting system. But their connection is too thin. What about ipython notebook like documentation with live evaluation. A virtual sub-emacs safe playground. Just to bootstrap fun and desire to read the manual with confidence.  Back to OP's question: No need for ""marketing"".  [1] there was a youtube video about a guy analyzing Mario, MegaMan and games of that era, showing how they designed the level to introduce a concept, then the player can toy with it, then they offer a tiny variation, challenging his new skills just slightly so he can evolve without failing too hard. It was beautiful. I'll post it if I find it.  Here's the part about Mario 3D World http://www.dorkly.com/post/73379/this-guy-makes-a-good-case-for-the-impressive-level-design-of-super-mario-3d-world"
emacs,3bsabz,instant_sunshine,2,Wed Jul 1 20:52:07 2015 UTC,"I really like your idea of learning Emacs with layers. Maybe it would be possible to make a little ""discovery game"" for Emacs which uses the same concepts used in your linked Mario Version."
emacs,3bsabz,jivatmann,2,Wed Jul 1 21:35:05 2015 UTC,"There's an emacs achievements mode (or something like that.) which does an ""achievement unlocked"" thing.  IIRC its this https://bitbucket.org/gvol/emacs-achievements"
emacs,3bsabz,agumonkey,1 point,Thu Jul 2 00:47:29 2015 UTC,"Didn't know of that one. Just tried it out, for some reason my achievement list gets not updated. But a nice thing if it works i think."
emacs,3bsabz,jivatmann,1 point,Thu Jul 2 09:33:13 2015 UTC,"That could be a nice thing. There are Emacs golf (inspired by vim golf I guess), but they're already a bit advanced. Keyboard macro computing is ... special. Yeah, a very nice thing, tiny interactive challenges in emacs lisp to learn emacs lisp. Maybe even some kind of collaborative chat mode in emacs to have a mentor or just noob-pair programming."
emacs,3bsabz,agumonkey,1 point,Wed Jul 1 21:47:52 2015 UTC,Did you mean the posts on http://irreal.org/blog/?tag=emacsgolf. I didn't find any other Emacs golf related things?  I decided I will start to work on something like a discovery game for Emacs. A good reason to improve my Elisp skills :)
emacs,3bsabz,jivatmann,2,Wed Jul 1 22:06:32 2015 UTC,"Partly, and these videos : https://vimeo.com/channels/222837"
emacs,3bsabz,__baxx__,1 point,Wed Jul 1 22:12:17 2015 UTC,Thanks very much! This videos seem to be usefull!
emacs,3bsabz,jivatmann,1 point,Wed Jul 1 22:19:40 2015 UTC,Look for learn vimscript the hard way - I'm not sure I've seen an Emacs site that compares to that do far. The writing instruction and guidance through creating a plug in are fantastic.
emacs,3bsabz,__baxx__,1 point,Wed Jul 1 22:16:02 2015 UTC,"Thanks for the suggestion, looks like a good resource."
emacs,3bsabz,permafrosty,1 point,Wed Jul 1 22:30:58 2015 UTC,It is - I'm really hoping that someone will write something like it for Emacs. Hey ho :)
emacs,3bsabz,jivatmann,1 point,Wed Jul 1 22:35:42 2015 UTC,"Well, there's the Emacs Lisp Intro: C-h i Emacs Lisp Intro RET."
emacs,3bsabz,__baxx__,2,Thu Jul 2 00:08:04 2015 UTC,"The Elisp Intro is not very good in my opinion, too."
emacs,3bsabz,agumonkey,1 point,Thu Jul 2 09:37:03 2015 UTC,yep - don't think its as good
emacs,3bsabz,__baxx__,1 point,Thu Jul 2 00:09:12 2015 UTC,"Nice idea, looking at other paradigm is often a great way to learn."
emacs,3bsabz,agumonkey,1 point,Wed Jul 1 23:46:33 2015 UTC,If you're thinking of writing a tutorial I would really recommend going through that for ideas / inspiration as it's really well done :)
emacs,3bsabz,__baxx__,1 point,Wed Jul 1 23:48:55 2015 UTC,"I mostly said that for personal learning, I don't think I could ever write a tutorial, or surely not a long one."
emacs,3bsabz,vermiculus,1 point,Thu Jul 2 00:09:27 2015 UTC,"oh right no worries :)   Usually the advice is a link to the 1000 page eLisp manual or ""just read elisp code"" etc lol"
emacs,3bsabz,agumonkey,1 point,Thu Jul 2 00:10:25 2015 UTC,"Maybe even some kind of collaborative chat mode in emacs to have a mentor or just noob-pair programming.   The chat part kindof exists with #emacs on freenode, but I can see the distinction you're trying to make. Floobits also comes close to the idea, but isn't specialized for emacs."
emacs,3bsabz,vermiculus,1 point,Wed Jul 1 23:51:10 2015 UTC,"Tought of that, the idea is to demonstrate that emacs can be its own tool and not rely on too much external entities. It's a sensitive subject as emacs is often mocked for being an OS sucking everything into itself, but, I for one, appreciate that centralization force as I find lisp a better model."
emacs,3bsabz,agumonkey,1 point,Thu Jul 2 00:11:55 2015 UTC,"It's a sensitive subject as emacs is often mocked for being an OS sucking everything into itself, but, I for one, appreciate that centralization force as I find lisp a better model.   Lisp may be an academically better model, but practically it fails. The reality is that the larger community doesn't like programming in emacs lisp. While I find the language enjoyable, I don't blame them for not liking the language. I believe there is a lot of untapped power in using external services (esp. with respect to my top-level comment).  To put it in other words, it's better to use grep when it's there than to implement grep in elisp. It's faster, less painful, and more familiar."
emacs,3bsabz,its_never_lupus,1 point,Thu Jul 2 00:15:34 2015 UTC,"It's a complex subject, as I said, sensitive.. or subtle. grep is fine, for one dimensional search. But when you need to actually use the info .. well then you use sed to rewrite these lines, but it's stream model isn't as easy, the syntax and commands obscure, so you use awk, but ... but but but and now you're almost wishing for something like a full programming language.  I don't refute the benefits of reuse, external well tested and performant modules, at all. But the lisp philosophy is pretty powerful, it seems to me that so far the impracticality is that the world isn't ready.  You talked about language support, IDE aren't that great considering the amount of resources poured into them for decades (until 2010s, only Eclipse Java refactoring was interesting, VS, beside nicely indexing the code base, was a joke, other languages couldn't be tool, php <5 at best had a preserving rename)  See racket and the way they stack languages on top of it. See courses about processing languages at the sexp level instead of dealing with concrete bikeshedding syntax, LALR parsers or ad-hoc PCRE most of the time. I can't help but to think that a lispy core would lessen the load for everybody. At that level of abstraction you don't need byte level throughput like grep utils, you need tree based typecheckers that sort of thing.  I'll admit, right now, I end up in python using sh for OS integration because it's a good middleground although keeping that LispMachine idea in a corner of my braine."
emacs,3bsabz,vermiculus,1 point,Thu Jul 2 00:27:31 2015 UTC,"I've been using it daily for >12 years but don't consider myself an old-timer. I use cursor and CUA keys mostly, don't have many key chords memorised, and would still struggle to write non-trivial elisp."
emacs,3bsabz,aport,3,Thu Jul 2 13:30:46 2015 UTC,"And what could we do to change that?   I'm very much of the opinion that emacs needs to improve its 'potential interoperability' with proprietary or bleeding-edge systems. Much of the draw of language-specific IDEs is the wealth of language-specific features. The fact of the matter is that emacs already has the framework in place to imitate or gainfully replace IDE features – the missing piece of the puzzle is language support.  How can this be resolved? I'm very much in favor of the daemon approach: write some sort of service in the language of your choice that can provide information to emacs (hopefully in a standardized format, so that it can be useful to other tools as well) and write a receiver in elisp to implement features. This division of labor suits emacs well: emacs queries the service for information, the service responds. This is usually much faster than trying to do everything in elisp – both in terms of runtime and in terms of development effort."
emacs,3bsabz,vermiculus,2,Wed Jul 1 23:23:16 2015 UTC,"irony and rtags do this for C++ development. Unfortunately they have some overlapping features and some non-overlapping features.  There's also ycmd which is supposed to be editor-agnostic, which is really nice. I would put my money and time into ycmd."
emacs,3bsabz,lambda_abstraction,1 point,Tue Jul 7 18:13:17 2015 UTC,"ycmd looks interesting, but from my quick glance of the README, it feels 'too big'. There should be a standard protocol, but the backends should be distinct, in my opinion."
emacs,3bsabz,vermiculus,1 point,Tue Jul 7 18:56:35 2015 UTC,Basically Slime for language foo.
emacs,3bsabz,vermiculus,2,Thu Jul 2 15:50:19 2015 UTC,"Interesting, related project: https://github.com/kiwanami/emacs-epc"
emacs,3bsabz,__baxx__,1 point,Fri Jul 3 12:38:40 2015 UTC,"If I understand slime (didn't do much CL in my day) then essentially, yes :)"
emacs,3bsabz,demosthenex,3,Thu Jul 2 16:03:19 2015 UTC,"IDK really, i think that having an active community helps. I wouldn't have bothered trying out Emacs (spacemacs) if I hadn't been told to a couple of times by other users (on here). And told in a friendly way - I don't mean ""you must do xyz"" of course. The reasons why I should try Emacs were always logical so I thought that I would.  Having something like Spacemacs to start with has been really nice as well - esp seeing as I came from vim. I understand the points about using defaults, not fully knowing the system etc etc. But for me the positives far out weigh the negatives, and I can always learn whats there already, it's not like the configs are all compiled binaries or whatever.  eLisp is a bit of a barrier for some perhaps - as it can seem like a bit of a pointless language if one realises one isn't going to use it anywhere else. I get that people would say one spends enough time in an editor to validate learning a language specifically for that editor, but to some people (possibly learners such as myself) I imagine that this is a bit of a negative. Whereas Sublime uses Python and Atom uses JavaScript. From what I've seen Atom seems like the best choice to many as it's open source and the languages used to configure it are ones that (someone such as myself at least) are more likely to be encountered.   I downloaded PyCharm the other day. It's slower than emacs starting up, the interface is cluttered and generally I didn't enjoy it as much. But I might try it out, though I'm unsure I've actually got the inclination to try another editor out now.  So yeah, i don't really know much about marketing i guess :P"
emacs,3bsabz,instant_sunshine,3,Wed Jul 1 21:17:18 2015 UTC,"My argument is simple, Emacs is a power tool. The analogy would be ""why do end users rely on Notepad instead of using Notepad++?"" or ""Why do users use a hammer, when they need a jackhammer?"".  Until their needs aren't met by low end software, they won't look for another tool. Emacs is at the top of the text editor food chain. A new user doesn't realize they have needs that aren't met by the tool at hand.  If you want to market, perhaps sticking to the power tool idea would be best. That appeals to users which are actively seeking more powerful tools and techniques and open to learning."
emacs,3bsabz,dzecniv,3,Wed Jul 1 21:30:10 2015 UTC,"While there's certainly things we can do to make Emacs more appealing out of the box,  (it's horribly ugly by default, starting with that abysmal logo.)  It's really not a huge problem that Emacs isn't more popular.  Emacs ends up being something that pops onto your radar, and perhaps ignore, as too complex for your needs... until your needs develop to the point where you want to try it out.  The fact that most people kick themselves for not trying it sooner once they've got stuck in, is testament to Emacs utility.  I'd take that over fleeting popularity or chart rankings any day."
emacs,3bsabz,delbosforo,3,Thu Jul 2 00:45:03 2015 UTC,"I'll say that the online documentation is bad.   emacswiki is crufty and makes the beginner run away from it.  there are a lot of blogs, but they don't centralize information.  wikemacs (http://wikemacs.org/) is newer, not well referenced, it has some great pages but isn't as complete as emacswiki and doesn't attract well enough the emacs community."
emacs,3bsabz,mschaef,8,Thu Jul 2 13:21:01 2015 UTC,"Why everybody has to have this period of emacs evangelism once their life? Why is it a problem that it is lesser known? Why would we market it? Why it has to be more popular? I'm an emacs user because it fits the My Way of Doing Things (tm), if it fits yours too, then go and blinking use it man, why it bothers you that people prefer eclipse or sublime text?  Vi is a standard, and it is a part of unix tradition. Vim is a good piece of software that builds on that standard. Unix became popular among techies, and vim among unix lovers, two groups that mostly overlap. Emacs is part of another tradition, which is distinct from that of unix, which is not as popular as it, which makes emacs less popular. Eclipse and other stuff are from a very different other tradition which does not really overlap with that of unix and emacs. Just accept and move on. People should have more important things than being an emacs missionary."
emacs,3bsabz,__baxx__,8,Wed Jul 1 21:02:25 2015 UTC,"Why everybody has to have this period of emacs evangelism once their life? Why is it a problem that it is lesser known?   It's often the case in this industry that the winner takes all. I think some of this may be motivated by a fear that minority players like Emacs get marginalized out of existence.  As much as I like Emacs, I do think this fear is justified. Emacs' biggest advantage is its innate flexibility, which it achieves through the use of elisp. Unfortunately, custom language implementations are expensive to improve, and elisp is already highly optimized for what it is.  This makes the next jump forward (multi-threading, JIT compiled, whatever) all that much more expensive. Without a larger base of potential contributors, the likelihood of those types of fundamental improvements being made gets less and less and the entire platform suffers as a result. (Even more mainstream dynamic language runtimes like Ruby and Python suffer from some of these same sorts of problems... Java and JavaScript have avoid it mainly because they've had Fortune 500 companies pouring money into their mainline implementations.)  If it's not clear why I've said as much as I have about the underlying elisp implementation, it's because the functionality of the editor is bounded by the functionality of the underlying implementation languages. Part of what tools like IntelliJ/Eclipse bring to the table is background analysis of large bodies of text... that requires something that's beyond the capabilities of elisp as it stands today. (For that matter, I've been told that elisp has proven too slow for something as simple as find a list of all files in a project...)"
emacs,3bsabz,tuhdo,8,Thu Jul 2 14:06:34 2015 UTC,"Well community is really important. So there's the benefit through being part of a bigger community as well as getting enjoyment from introducing things to others. Obviously the manner that it's done is important, but I think it's a valid and worthwhile thing for people to do"
emacs,3bsabz,delbosforo,4,Wed Jul 1 22:18:24 2015 UTC,"More people using Emacs meaning Emacs has better chance to survive and improve. Just by having many users and by using, many bugs can be found and fixed. With more users, you will have more potential plugin developers, or even more potential Emacs contributors to maintain and improve Emacs.  From your post, it seems like you don't use community packages, so of course it won't be important to you, but then without those packages, Emacs will have no chance to compete with other tools."
emacs,3bsabz,delbosforo,1 point,Thu Jul 2 04:57:42 2015 UTC,"No I use a good bunch of packages. I just want to underline the fact that emacs is different and it will not really ever be popular. There are flaws, but the actual cause is that it is a different way of doing things that may not appeal to everyone.  Thus as a community we should not try to intercept others' lifes and their ways of doing things, as we would not like such interception. Emacs has a pretty good traction for an application of its kind."
emacs,3bsabz,agumonkey,8,Thu Jul 2 10:38:30 2015 UTC,"Bigger the community is, better and more the packages are."
emacs,3bsabz,delbosforo,9,Wed Jul 1 21:31:04 2015 UTC,"Bigger the community is, better and more the packages are.   FTFY."
emacs,3bsabz,agumonkey,2,Wed Jul 1 23:07:58 2015 UTC,"Also, I have no numbers, but the superficial feeling I get is that since the days of [m]elpa, github, esr git repo etc etc, the emacs community is far larger and connected than ever. As you said, more isn't necessary better, but emacs awareness seems far from endangered."
emacs,3bsabz,RobThorpe,2,Wed Jul 1 23:48:59 2015 UTC,"Package.el and related stuff are a very good feature. I used it pretty much as long as I used emacs and I still use it although I will move away and stick stuff in either a packages directory or the lisp folder in my emacs.d, as I like being on top of everything and not depending on tools. But still, the impact must be positive, as having to manipulate load-paths and make-build packages is a burden for the newcomer. And github has made the whole programming ecosystem friendlier, and also that of emacs.  I do not know what esr git repo is, I'd appreciate a pointer."
emacs,3bsabz,agumonkey,4,Thu Jul 2 00:00:27 2015 UTC,"Eric S Raymond migrated the old emacs bazaar (IIRC) repo to git (still hosted at GNU), the idea being lower friction for collaboration. It's not a user-level change, but it may help new commiters and strenghten emacs, resulting in less isues for the users too."
emacs,3bsabz,RobThorpe,1 point,Thu Jul 2 00:14:22 2015 UTC,"That's exactly what I think too.  There's much more traffic on this reddit than there was even 6 months ago.  On help-gnu-emacs there's more traffic than 6 months ago too. I used to subscribe to emacs-devel just to see what was going on, I don't do that any more because there's so much traffic I haven't got the time to read it.  I'm not at all worried about the size of the Emacs community. It was far smaller when I started using Emacs and it still produced great steps forward. If it becomes larger then that's probably great. I say probably because I can see the day when the Evil community go off to build their own Emacs variant. I don't think that would be a big problem either though."
emacs,3bsabz,agumonkey,1 point,Fri Jul 3 22:34:57 2015 UTC,"Pretty stoic POV. Things move, split, merge. A bit of resistance is good as a natural filtering mechanism (I'm not hurried to see too much people on emacs-devel, as I'd love for ML to stay the medium for core 'hands dirty' devs)"
emacs,3bsabz,vermiculus,1 point,Fri Jul 3 22:41:20 2015 UTC,"Yes. I still think that we're better off with the Evil folks in the tent pissing out that we would be if they were outside the tent pissing in.  That said, I'll still argue with some of their talking-up of the Vi keybindings."
emacs,3bsabz,delbosforo,1 point,Fri Jul 3 22:56:21 2015 UTC,"I was just watching a video tutorial about lispy, vi ergonomics for paredit like interactions, my identity was questioned."
emacs,3bsabz,vermiculus,2,Fri Jul 3 23:05:44 2015 UTC,"The bigger the community is, the more packages there are. As the community grows for a package, the better the package becomes."
emacs,3bsabz,abo-abo,2,Wed Jul 1 23:52:30 2015 UTC,Again not necessarily.
emacs,3bsabz,lambdasgr,2,Wed Jul 1 23:54:12 2015 UTC,"Not necessarily, but pithy platitudes are rarely 100% accurate. (Pithy anythings are rarely 100% accurate.)  There are a number of hall-of-fame packages that definitely do abide by this rule, though. They're neither popular because they're good nor vice-versa; it's an organic, pairwise growth."
emacs,3bsabz,DrugCrazed,2,Thu Jul 2 00:08:49 2015 UTC,"Emacs will never be very popular, just because its nature conflicts with the nature of most people.  Most people just want a tool to get things done - customizability is redundancy to them. Customization for most ends at selecting a theme from a listbox; some don't even get that far.  Even in the best case scenario for popularity of Emacs if it ever gets super trending among programmers, is that 95% of people will use it the way they use Notepad, with zero customization. But what is the difference between using Notepad-subset of Emacs and using Notepad?  There's no benefit to the community, no benefit to the Emacs developers, no difference to the user, and no benefit to companies that sell Notepad clones.  My opinion is that if you don't know Elisp, you're missing the best part of the Emacs experience. And contrary to what some people say, it has to be a LISP. I've authored many Emacs packages, and I know for sure that I couldn't do it in C or Python or Ruby (not impossible, just too big of an effort for a hobby). It could be possible to do in JavaScript, but I wouldn't touch JavaScript without getting paid a lot, since I really don't like JavaScript.  I've spent considerable effort learning Elisp, since I didn't know any type of LISP beforehand. And I understand that not every programmer wants to do that. For example, I think that learning Blender would be cool: making 3D models looks fun.  But I'm not willing to invest months of effort into learning Blender."
emacs,3bsabz,VanLaser,3,Thu Jul 2 14:04:17 2015 UTC,"I don't think Emacs is a thing that can be shown or taught to, it has to be sought. You either want to learn it or really hate it. That's my experience of trying to introduce it to people. In my 9 years of Emacs experience, I've only successfully recruit one guy to use it. Everybody else is either, 'eww ...', or feel it's as complicated as playing an instrument."
emacs,3bsabz,trezor2,2,Wed Jul 1 22:57:28 2015 UTC,What does vim have that emacs doesn't? Vim is tiny comparatively. There's a reason it's a standard install and it's because it is so small. The joke at work is that we have two operating systems running - debian and emacs.
emacs,3bsabz,RobThorpe,2,Wed Jul 1 19:18:31 2015 UTC,"Most people want pretty things and simple things. They want to be seduced by solutions that magically work. Even if they don't, maybe the next one will ... Only after this circle is broken (in someone's mind), that person will choose something difficult and powerful as a tool."
emacs,3bsabz,bakuretsu,1 point,Wed Jul 1 19:28:45 2015 UTC,"Most users prefer something which ""works"" and does most things they need out of the box.  Emacs more or less comes with the expectation that the user will adapt it to their needs and as such the default configuration with its associated bareness and lacking essential packages can probably be seen as a direct result of this.  I have no doubt that this is one thing hindering adoration, but ""fixing"" it would probably mean people who otherwise could become Emacs-masters remain novices.  It's a genuinely tough problem."
emacs,3bsabz,its_never_lupus,1 point,Thu Jul 2 06:09:15 2015 UTC,"""Emacs more or less comes with the expectation that the user will adapt it to their needs and as such the default configuration with its associated bareness and lacking essential packages can probably be seen as a direct result of this.""  People have said something like this several times in this thread. It's not the reason. The maintainers of Emacs would very much like to include more packages. They're talking to the maintainers of Magit and several other popular packages. The next version of Emacs will come with Company installed.  There are two minor reason, firstly some authors don't want to fix up their packages to the quality standards that the Emacs maintainers want, or they're in the process of doing that and it's taking a while. Secondly, sometimes the Emacs maintainers think something is better in ELPA than in Emacs even though it's important to the rest of us. (They put nlinum-mode in ELPA, for example, I think that should be in Emacs).  The main reason though is copyright attribution.  GNU packages require copyright to be assigned to the Free Software Foundation. There are good reasons for this. If they didn't do that then they'd be unable to change the license. We'd all be stuck with GPL version 1 and it's legal problems. Also, the author of some code can change the license that their code is under at any time. People can rescind their contributions. IANAL, but as far as I know, nobody has successfully rescinded a contribution that was copyright assigned.  When a package is obscure nobody cares who contributes to it.  Later on it becomes popular the FSF come looking for signatures.  Then the main maintainer spends ages contacting all the authors and getting them to sign paperwork. This is what's currently happening with Magit BTW."
emacs,3bsabz,cbrachyrhynchos,1 point,Fri Jul 3 22:54:15 2015 UTC,"First, I wouldn't go so far as to say that Vim's customizability is horrendous. For an editor that can open in a terminal in sub-second time and still have all of your key binding preferences and even some more advanced color and formatting stuff all defined in a single configuration file, it is quite capable. It is the ideal portable editor.  Now, I have my Emacs configuration pretty well honed at this point, and I do take it around with me and use it on multiple platforms (Linux and OS X at least), and it works nicely, but the first time I open it on a new machine it has to download and compile many packages, and it does take a few seconds to open in general (which doesn't bother me, personally).  Now, that said, why do people not evangelize Emacs? That's a better question to ask; not why Emacs shouldn't deserve the same public following as Vim (because it does), but why so many Rails devs and JavaScript devs are choosing Vim rather than Emacs. I think there are a few reasons.   Emacs is at least as unintuitive as Vim for a beginner. Emacs lacks high-quality ""getting started"" guides geared toward those people we wish to see using Emacs (the ""hip"" Rails and JS devs who evangelize Vim today). Emacs has a residual public image of being the Richard Stallman editor of choice, which carries along with it this perception of being crufty and/or not modern. Obviously untrue, but until people come out in force to fight that perception it will probably live on.   That's just my take on it."
emacs,3bsabz,Taikal,1 point,Thu Jul 2 12:42:22 2015 UTC,"Fundamentally emacs is not popular because that's not a priority for the core team. Emacs is developed by and for long-time users who already know it backwards, and dislike making even the the slightest compromise for newcomers. Unless that attitude does change emacs will always be a niche product."
emacs,3bsabz,Space_Butts,1 point,Thu Jul 2 13:32:19 2015 UTC,"Emacs actually works great ""out of the box"" for me (with a few stock features enabled). Most of what I do is related to documentation and writing. Programming for me usually involves single-file scripts in languages that don't require a build system. These often have a lifecycle of a handful of uses.  Doing this in an IDE generally has been a frustrating experience. IDEs are great if you're using the preferred language, the preferred build system, the preferred project directory structure, and often the preferred design paradigm. If you don't need multiple folders, a Makefile, a header file, a version-control system, compile-on-save, and a half dozen command-line arguments to get a ""Hello World,"" an IDE is over-designed.   Honestly the ""competition"" so to speak includes Vim, Notepad++, and Atom in Open Source and Sublime, UltraEdit, and BBEdit/Textwrangler in the commercial realm. If someone finds an IDE a better system for what they need, that's probably what they should use."
emacs,3bsabz,Xredo,1 point,Thu Jul 2 13:35:18 2015 UTC,"Most people are happy with whatever you give them. They would rather bend themselves than bend their tools.  Moreover, Emacs is very different, and nobody explains you why it is that way and how to make the most of it.  It takes years to make sense of Emacs, if you are used to modern mainstream software.  This is why I never recommend Emacs to other people.  Indeed, I would love to switch to something more modern, but there are no modern alternatives."
emacs,3bsabz,Space_Butts,0,Thu Jul 2 13:53:06 2015 UTC,"The argument for modal text editing like vim has makes a lot of sense to programmers and it is easy to start using out-of-the-box in vim. Emacs out-of-the-box experience is garbage and offers nothing except possibility using an archaic language few people have any other reason for learning. If you want to increase adoption then you should invest more heavily in bringing visibility to packages that offer some immediate value, like spacemacs."
emacs,3bsabz,vermiculus,2,Wed Jul 1 22:42:31 2015 UTC,"If you ask me, both emacs and vim have terrible defaults. Emacs is a bit uglier out of the gate, while vim looks like a plebeian's text editor until you look up what people do with it. Both present a steep slope to climb, but once you get started there's no going back. Elisp probably counts as archaic, but its still not as bad as vimscript. Someone needs to make an Emacs/Vim hybrid (and no, evil doesn't count because it's still emacs underneath)."
emacs,3bsabz,delbosforo,1 point,Thu Jul 2 16:07:59 2015 UTC,"Yeah I agree, but what is wrong with spacemacs? Why does it have to be a separate program? If you want to not use elisp then Atom is probably a better fit, although I found its coffeescript DSL to be even less desirable than elisp."
emacs,3bsabz,vermiculus,1 point,Thu Jul 2 22:00:46 2015 UTC,I would hardly call the lisps archaic and I would hardly call the default experience garbage (esp. when compared to the default vim experience).
emacs,3bsabz,delbosforo,2,Wed Jul 1 23:16:33 2015 UTC,"He says that Elisp is an archaic lisp, which is correct, when compared to Clojure or Scheme. The default experience, well even if it's not garbage, it's not that good either. I should have about a thousand lines of lisp that I've written in my emacs.d, and while most of it is configuration of packages and little functions I use every now and then, maybe a good two or three hundred lines are for tuning defaults to my taste."
emacs,3bsabz,XANi_,1 point,Wed Jul 1 23:52:16 2015 UTC,I'd be interested to see where your defaults come in. (I don't have nearly as many defaults customizations.) I've only got a (generous) 850 lines of config (that can bootstrap itself… awww yeah) and about another fifty lines in my custom-set-variables form.
emacs,3bqu40,eniacsparc2xyz,3,Wed Jul 1 12:17:43 2015 UTC,"I like using Helm's helm-semantic-or-imenu for things like that. It doesn't stay nicely on the left like in your picture, though."
emacs,3bqu40,TheBB,3,Wed Jul 1 12:31:08 2015 UTC,speedbar
emacs,3bqu40,pd0wm,3,Wed Jul 1 13:33:56 2015 UTC,Speedbar does something like that.
emacs,3bqu40,uhoreg,3,Wed Jul 1 13:35:58 2015 UTC,"ECB, emacs code browser is probably the most festured one where semantic works. Ive never found that particular style to work all that well with emacs since it restricts window management to specific layouts.. I have used it when reading code for longer stretches but nothing i would use for day to day work."
emacs,3bqu40,thomasfr,2,Wed Jul 1 18:22:52 2015 UTC,"The closest I know of is speedbar which comes with emacs. I think there are some packages that try to give you an IDE layout, but I haven't tried them.  If your having trouble managing your windows, try winner-mode and saving window configurations to registers."
emacs,3bqu40,parolang,2,Wed Jul 1 13:38:26 2015 UTC,I am using helm-semantic-or-imenu: example for Python file
emacs,3bqu40,ssbb_me,1 point,Mon Jul 6 07:42:17 2015 UTC,Thanks everybody for reply.
emacs,3brym2,yagsuomynona,1 point,Wed Jul 1 17:46:06 2015 UTC,"I was looking up what Proof General means, and I couldn't figure out what exactly it was (especially the proofs)."
emacs,3brym2,ReneFroger,2,Wed Jul 1 18:31:29 2015 UTC,"It's a front-end for proof assistants like Coq. ""Proof"" as in mathematical proof. They are used for things like proving theorems that have too many special cases to check by hand, like the Four Colour Theorem, for making sure that mathematical proofs are correct, and in industry for formally verifying critical software like a complier for a subset of C. I'm using it for homotopy type theory."
emacs,3bnpie,avatharam,2,Tue Jun 30 18:06:46 2015 UTC,"OP, are you asking for something like ESS for Spark? With execution on a remote server?"
emacs,3bnpie,whyoy,2,Wed Jul 1 10:33:56 2015 UTC,"yes, that's right"
emacs,3bnpie,whyoy,1 point,Wed Jul 1 10:36:01 2015 UTC,+1 do want.
emacs,3bnpie,noel,1 point,Wed Jul 1 13:32:49 2015 UTC,"Apache Spark? Most people that I know use Scala, though Python and R are also supported. Emacs has modes for all three."
emacs,3bnpie,Funnnny,1 point,Wed Jul 1 07:08:59 2015 UTC,Yes and I use python.  How does one configure emacs to work with pyspark?
emacs,3bohn8,IAskAlotOfQuestions2,5,Tue Jun 30 21:26:07 2015 UTC,"I believe a newer version of that is in melpa, called org-journal."
emacs,3bohn8,nivekuil,2,Tue Jun 30 21:34:01 2015 UTC,"Thank you that fixed my problem but now I have run into another. I wish to put my journals is a secondary hard drive so I should just change that default to  ""~D:\MEGA\Journal\""   correct or do I remove the squigly line?"
emacs,3bohn8,nivekuil,1 point,Tue Jun 30 22:55:09 2015 UTC,"Yes, you should remove the squiggly line (tilde). On unix-like systems, that refers to your home directory, but it's meaningless on windows."
emacs,3bohn8,vermiculus,1 point,Tue Jun 30 23:03:53 2015 UTC,"Okay so now in my org-journal.el I have  (defcustom org-journal-dir ""D:\MEGA\Journal\""   in my org-journal-autoloads.el I have  (defvar org-journal-dir ""D:\MEGA\Journal\"" ""\   now the C-c C-j won't create a journal entry I get no match. What am I doing wrong?"
emacs,3bohn8,nivekuil,1 point,Tue Jun 30 23:12:12 2015 UTC,Simplest way is to change each \ to /.
emacs,3bohn8,sledgespread,1 point,Wed Jul 1 01:12:27 2015 UTC,"You should almost never change the source file itself - changes should be made in your own init file or through M-x customize. Just add (setq org-journal-dir ""D:\MEGA\Journal\"" to your init file, which would be init.el (make the file if it doesn't exist yet) in your emacs.d directory."
emacs,3bohn8,vermiculus,1 point,Wed Jul 1 01:21:54 2015 UTC,Thank you problems resolved I figured out how to do it using u/vermiculus method
emacs,3bohn8,sledgespread,3,Wed Jul 1 01:47:53 2015 UTC,In general you should install packages using the built in package manager these days (rather than by manually installing *.el files). Here's a tutorial.
emacs,3bm2uq,callgero,4,Tue Jun 30 09:08:27 2015 UTC,"exugerant ctags for CoffeeScript can get you a long way.  You'll need to add config for CoffeeScript   --langdef=coffee --langmap=coffee:.coffee --regex-coffee=/(^|=[ \t])*class ([A-Za-z]+\.)*([A-Za-z]+)( extends [A-Za-z.]+)?$/\3/c,class/ --regex-coffee=/^[ \t]*(module\.)?(exports\.)?@?([A-Za-z.]+):.*[-=]>.*$/\3/m,method/ --regex-coffee=/^[ \t]*(module\.)?(exports\.)?([A-Za-z.]+)[ \t]+=.*[-=]>.*$/\3/f,function/ --regex-coffee=/^[ \t]*([A-Za-z.]+)[ \t]+=[^->\n]*$/\1/v,variable/ --regex-coffee=/^[ \t]*@([A-Za-z.]+)[ \t]+=[^->\n]*$/\1/f,field/ --regex-coffee=/^[ \t]*@([A-Za-z.]+):[^->\n]*$/\1/f,static field/ --regex-coffee=/^[ \t]*([A-Za-z.]+):[^->\n]*$/\1/f,field/ --regex-coffee=/(constructor: \()@([A-Za-z.]+)/\2/f,field/ --regex-coffee=/(constructor: \()@[A-Za-z.]+(, @([A-Za-z.]+)){0}/\3/f,field/ --regex-coffee=/(constructor: \()@[A-Za-z.]+(, @([A-Za-z.]+)){1}/\3/f,field/ --regex-coffee=/(constructor: \()@[A-Za-z.]+(, @([A-Za-z.]+)){2}/\3/f,field/ --regex-coffee=/(constructor: \()@[A-Za-z.]+(, @([A-Za-z.]+)){3}/\3/f,field/ --regex-coffee=/(constructor: \()@[A-Za-z.]+(, @([A-Za-z.]+)){4}/\3/f,field/ --regex-coffee=/(constructor: \()@[A-Za-z.]+(, @([A-Za-z.]+)){5}/\3/f,field/ --regex-coffee=/(constructor: \()@[A-Za-z.]+(, @([A-Za-z.]+)){6}/\3/f,field/ --regex-coffee=/(constructor: \()@[A-Za-z.]+(, @([A-Za-z.]+)){7}/\3/f,field/ --regex-coffee=/(constructor: \()@[A-Za-z.]+(, @([A-Za-z.]+)){8}/\3/f,field/ --regex-coffee=/(constructor: \()@[A-Za-z.]+(, @([A-Za-z.]+)){9}/\3/f,field/"
emacs,3bm2uq,instant_sunshine,1 point,Tue Jun 30 15:54:07 2015 UTC,"I'm afraid this won't work the way I want: one module can export methods/functions with the same names as the other module so ""go to definition"" will not know which module to choose in such case, am I right? My idea is to get a set of methods and properties for each object that is acquired via require call and moreover to be able to go to its definition. I think indexing the source code with tags is not even needed nor sufficient at all. I'm looking for something like cider for clojure which let the source code compile and then somehow use it to provide the desired information. I guess I dig into no man's land.."
emacs,3bm2uq,instant_sunshine,1 point,Tue Jun 30 18:48:18 2015 UTC,"I'm afraid this won't work the way I want: one module can export methods/functions with the same names as the other module so ""go to definition"" will not know which module to choose in such case, am I right?   You're right.   My idea is to get a set of methods and properties for each object that is acquired via require call and moreover to be able to go to its definition. I think indexing the source code with tags is not even needed nor sufficient at all.   You'd need a more semantic-like indexer / parser.   I'm looking for something like cider for clojure which let the source code compile and then somehow use it to provide the desired information. I guess I dig into no man's land..   This might be an interesting starting point https://github.com/mntmn/tern-coffeescript"
emacs,3bm2uq,katspaugh,1 point,Wed Jul 1 13:47:37 2015 UTC,CoffeeScript (and other compile-to-JS languages) support in Tern needs funding.  Participate here: https://www.bountysource.com/issues/1607447-coffeescript
emacs,3blr25,zebra96,2,Tue Jun 30 06:26:06 2015 UTC,#+options: toc:nil #+latex: \input{title} #+toc: headlines 2
emacs,3blr25,---R,1 point,Tue Jun 30 17:23:11 2015 UTC,thanks
emacs,3blr25,larstvei,1 point,Sat Jul 4 22:00:40 2015 UTC,"I got this working by removing both the \documentclass{book} and the blank document section of the tex-file, and used this org file.  The trick is to ensure that the tex-file does not contain anything that the Org-file will generate, like the \begin{document} and \end{document}."
emacs,3bl6pr,kabbotta,5,Tue Jun 30 03:02:05 2015 UTC,Company should show the backend responsible for the current completion candidate in the mode line. company-dabbrev in particular will draw from other buffers you have open by default.
emacs,3bko6k,excitedaboutemacs,4,Tue Jun 30 00:25:38 2015 UTC,What about create an issue on the Github page of Helm-swoop? (the maintainer is ShingoFukuyama).
emacs,3bko6k,ReneFroger,3,Tue Jun 30 18:07:47 2015 UTC,"That is ridiculous, why on earth would I hav..  Totally kidding. This is a great idea :) For some reason I didn't think of it."
emacs,3bko6k,tuhdo,3,Tue Jun 30 18:51:50 2015 UTC,You can press C-k to delete the current content in the prompt and enter new search strings.
emacs,3bko6k,popo37,2,Tue Jun 30 02:56:42 2015 UTC,Thats what I do usually. There is enough information such that this wouldnt be necessary though.
emacs,3bko6k,tuhdo,1 point,Tue Jun 30 13:51:54 2015 UTC,The cursor is at the end of the word so C-k would not do anything. I use C-x BACKSPACE instead.
emacs,3bko6k,popo37,1 point,Tue Jun 30 10:02:35 2015 UTC,"In Helm prompt, it does clear the whole line even if cursor is at the end."
emacs,3bko6k,aartist,1 point,Tue Jun 30 11:32:09 2015 UTC,You're right. I am using some other mode (Spacemacs) that override C-k
emacs,3bko6k,popo37,1 point,Wed Jul 1 09:16:22 2015 UTC,Side question: What advantage are of SpaceEmacs that you are willing to compromise the standard keybindings.
emacs,3bjarw,Flapling,2,Mon Jun 29 18:10:25 2015 UTC,"Not a solution to your issue, but you should consider to use MELPA instead Marmalade. It have more packages, is more used and is up-to-date."
emacs,3bjarw,ReneFroger,2,Mon Jun 29 19:20:48 2015 UTC,I do use MELPA. Should I remove Marmalade?
emacs,3bjarw,eric-plutono,1 point,Mon Jun 29 20:50:14 2015 UTC,"Personally I would not remove Marmalade but I would give MELPA priority over Marmalade in the event where a package exists in both places.  For example, as the maintainer of PHP Mode I have never been able to update the version of PHP Mode on Marmalade since I did not originally post it, so it is horribly out of date, whereas the version on MELPA remains up to date."
emacs,3bjarw,jordonbiondo,2,Tue Jun 30 10:54:33 2015 UTC,You should ping /u/nicferrier
emacs,3bjbq9,balkenbrij,9,Mon Jun 29 18:17:10 2015 UTC,Can you not just use   (if window-system     ...color theme stuff...)   to load for the x-frames and not for the terminal?  http://stackoverflow.com/questions/5795451/how-to-detect-that-emacs-is-in-terminal-mode
emacs,3bjbq9,ihatecatsandpeople,1 point,Mon Jun 29 22:29:17 2015 UTC,"yes, that's what i have but then it still applies the theme settings for the terminal when i start an x frame (because window-system is true then)  I have the window configuration in a function;  (defun window-system-settings ()   (when window-system ...snip...   and apply that in the after-make-frame-functions (or else new frames won't get all the settings (e.g. the button bar is still there when i disabled it). When running a server the init is only done once i think (makes sense) but then it's hard to change things unless you use a hook."
emacs,3bjbq9,ihatecatsandpeople,1 point,Tue Jun 30 06:47:03 2015 UTC,"Can you test if value of window-system is not x, specifically?  http://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Systems.html"
emacs,3bjbq9,ihatecatsandpeople,1 point,Tue Jun 30 11:32:59 2015 UTC,"i could however i think the problem is that in the hook when window-system is x the theme gets applied, when it's on a terminal there's nothing to disable the theme. When i start it in a term first it works out also but as soon as i open a frame under x the theme applies to newly opened terminal frames also. I'm happy with the tty-color-mode -1, this shows just like the vt100 mode with italics and bold instead of the (default) colors i'd get otherwise (if i somehow disabled the theme when window-system is nil).  e: to be clear, instead of (when window-system (x-settings)) (if window-system (x-settings) (disable-theme)) in the after-make-frame-functions would work also i think (but it would still use colors from the default theme which i don't want). I don't know how to disable a theme either, to apply it i just load the .el file (it is a new emacs 24 theme which uses deftheme)."
emacs,3bjbq9,PinkBalloons,1 point,Tue Jun 30 12:02:38 2015 UTC,"Yeah doesn't look so straightforward to disable, but seems possible with defadvice?  http://emacs.stackexchange.com/questions/3112/how-to-reset-color-theme"
emacs,3bjbq9,agnudawn,2,Tue Jun 30 12:33:40 2015 UTC,"You can hook on term-setup, or you can defun a 'terminal-init-vt100' function that should get called"
emacs,3bjbq9,LukeShu,1 point,Mon Jun 29 18:49:40 2015 UTC,"neat, thanks for the pointer; that looks like it's exactly what i need."
emacs,3bhr2y,jumpwah,2,Mon Jun 29 09:19:03 2015 UTC,"I just close the window with Ctrl-w c (I don't mind that the buffer remains hidden).   Also, on the topic, I would like to ask what the function is that q: runs? I ask because I want to remap that behaviour to q;, but to do that I need to know the function it runs. I don't see q: (nor q/) in evil-maps.el (from the evil mode source code), so I think I'm stuck.   Since it starts with q, it has to do with ... recording a macro. This is clear after you ask what q does in evil normal state by using Ctrl-h k q. This tells us that:   q runs the command evil-record-macro [...] If REGISTER is :, /, or ?, the corresponding command line window will be opened instead.   So if you now open evil-commands.el to look at evil-record-macro's code, you can see:     ((eq register ?:)     (evil-command-window-ex))   So, that's the command called: evil-command-window-ex. But, you won't be able to map q; directly, since q is NOT a prefix key. You will probably have to advice evil-record-macro to check for ; register, but for this you may need ... advice from people who know Elisp :)"
emacs,3bhr2y,VanLaser,1 point,Mon Jun 29 10:11:50 2015 UTC,"I just close the window with Ctrl-w c (I don't mind that the buffer remains hidden).   I just tried that and it still seems to move back to the wrong window for me (i.e. not where I originally pressed q:), doesn't it do that for you too? Isn't that annoying? However, I do think using evil-window-delete instead of evil-quit in the function in OP is better, so thanks!   but for this you may need ... advice from people who know Elisp :)   This really blows. Basically, I wanted to replicate these mappings from my vimrc:  nnoremap q; q:k xnoremap q; q:k nnoremap q/ q/k   So not only q:, I also wanted to slightly modify q/ (the k at the end moves up one line so it starts off at the previous command/search). However, I did not know about Ctrl-h k, so as you just told me, now I know the function name, so I can at least map these to different keys, even if it'd be awkward to my fingers.  Thanks so much for the help. :)"
emacs,3bhr2y,wasamasa,2,Mon Jun 29 11:19:57 2015 UTC,"I just tried that and it still seems to move back to the wrong window for me   That's most likely a core Emacs bug, sorry about that. I haven't come to actually figuring out what exactly happens there as no amount of window.el hackery does away with it. Could be worth a bug report...   Basically, I wanted to replicate these mappings from my vimrc   Evil is a bit unusual in its approach as it basically constructs a type system of Vim's grammar. This has the benefit that motions and text objects magically fit together with little effort, but also the downside that it's hard to break out of that system unlike in Vim where you can just override what an operator does. As in Emacs a key can only specify a command or prefix (in Vim this distinction doesn't seem to exist, probably as there aren't really prefixes), it's necessary to decide for one, so a good amount of commands in Evil are prefixes and instead read in the next key themselves or dispatch on their own.  There's a few ways around this, one is using Emacs keyboard macros which basically are sequences of keys you'd hit. These can make for both a transitionary tool to migrate Vim remappings to Emacs or to do more advanced actions than simple keymap editing would allow for. Keep in mind that while you can state a specific Evil keymap, the keyboard macros themselves are brittle as there's no equivalent to the non-recursive option.  (define-key evil-normal-state-map (kbd ""j"") (kbd ""g j""))   The officially endorsed alternative is to directly bind the right command to the key or if not available, writing your own or replacing the official command with something selfmade. This allows for a more robust alternative to keyboard macros, but can be annoying for simpler customizations."
emacs,3bhr2y,wasamasa,1 point,Mon Jun 29 12:11:53 2015 UTC,"That's most likely a core Emacs bug, sorry about that. I haven't come to actually figuring out what exactly happens there as no amount of window.el hackery does away with it.   Yeah it really sucks, but just to be clear, that's the primary reason I made this post. As in, the rudimentary other-window stuff in the OP seems to work. Rudimentary because who knows, maybe a solution like that will break in the future. ""Seems"" because I only checked for like two minutes in various split window scenarios, obviously have not checked all edge cases or anything.   This has the benefit that motions and text objects magically fit together with little effort, but also the downside that it's hard to break out of that system unlike in Vim where you can just override what an operator does.   Yeah I figured that much by looking at the source code, and I think that's a really clever and neat method too. But yes, thanks for explaining it and why the downside exists.   As in Emacs a key can only specify a command or prefix (in Vim this distinction doesn't seem to exist, probably as there aren't really prefixes), it's necessary to decide for one, so a good amount of commands in Evil are no prefixes and instead read in the next key themselves or dispatch on their own.   Does evil mode have the ""leader"" functionality. I searched for it and found some evil mode plugin for it, but when I tried it, it didn't work (presumably because it looks to be unmaintained at the moment).  But then I saw it doesn't really matter, I'm using "","" for my leader, and for example, just mapping "",z"" seems to work. So I guess "","" is a prefix key in this case? Asking because what if people used to use a ""non-prefix"" leader key in vim, and wanted to do the same in evil-mode? Not possible I guess?  Although, thinking about it, it would be pretty weird to use a key that vim already uses as a command for the leader key anyway. I.e. using ""s""  for the leader key doesn't make much sense, unless they switched it or something.   There's a few ways around this, one is using Emacs keyboard macros which basically are sequences of keys you'd hit. [...]  (define-key evil-normal-state-map (kbd ""j"") (kbd ""g j""))   That's really cool, I thought it was impossible to do such a thing directly. I looked it up before, and the consensus seemed to be that you always have to use the function instead. And to be fair, that did make sense, especially when I could not find any ""non-recursive"" option for keybindings. And now you just confirmed that too.  Although, I just tried mapping q; to q: and it didn't work, probably because q is not a prefix key as you and VanLaser said, or because it's a brittle way to do things as you said, or something.  Also, does the space between g and j in that mapping make a difference? I tried without the space (and with it too), and both mappings seem to work. Just curious here.  Thanks for taking the time to respond, really appreciate the explanation! :)"
emacs,3bhr2y,VanLaser,2,Mon Jun 29 13:11:17 2015 UTC,"Does evil mode have the ""leader"" functionality.   No need for it as keymaps in Emacs can have prefixes.   Asking because what if people used to use a ""non-prefix"" leader key in vim, and wanted to do the same in evil-mode? Not possible I guess?   See above.   Although, I just tried mapping q; to q: and it didn't work, probably because q is not a prefix key as you and VanLaser said, or because it's a brittle way to do things as you said, or something.   Yup, q is already bound to a command and not a prefix key.   Also, does the space between g and j in that mapping make a difference? I tried without the space (and with it too), and both mappings seem to work. Just curious here.   No, it's just for clarity.  The kbd function is generally used for more readable keyboard sequences, see its docs for more information regarding the employed notation."
emacs,3bhr2y,VanLaser,2,Mon Jun 29 13:40:21 2015 UTC,"The shortest way to achieve something (almost) similar to theq:k and q/k (and q?k) mappings from Vim could be:  ;; use 'Q' to open cmd-line window: (define-key evil-normal-state-map ""Q"" 'evil-command-window-ex)  ;; advice that moves 1 line up after running the original defun (defun prev-line-advice (&optional CURRENT-COMMAND)   (evil-previous-line))  ;; adviced defuns (advice-add 'evil-command-window-ex :after #'prev-line-advice) (advice-add 'evil-command-window-search-forward :after #'prev-line-advice) (advice-add 'evil-command-window-search-backward :after #'prev-line-advice)"
emacs,3bhr2y,VanLaser,2,Wed Jul 1 08:37:26 2015 UTC,"Nice! This at least solves the q/k I wanted to do. I saw in http://bling.github.io/blog/2013/10/27/emacs-as-my-leader-vim-survival-guide/ he talked about aop, but completely forgot about it.  What does the hash do? (Sorry I'm still very new to elisp and emacs in general.)"
emacs,3bhr2y,VanLaser,2,Wed Jul 1 09:07:02 2015 UTC,"I'm new too - I admit in this case I just copied the hash from the documentation reference example. From my (limited) understanding so far, it's preferable to use #' to quote a function. (see, for example, the answers here)"
emacs,3bhr2y,VanLaser,1 point,Wed Jul 1 09:26:41 2015 UTC,"Ah I see thanks.  So this is competely unrelated, but seeing as though you're new too, do you by any chance use auto-complete and yasnippet together? And if so, have you got them to play nice when pressing tab (in insert state)? Only ask because I've been trying for a bit now and what I've searched for already does not work, so may as well try my luck asking you.  Edit: Meh, I give up, using another keybinding for yasnippet isn't that bad anyway, and it's probably cleaner and less likely to break."
emacs,3bicjt,created_to_post_this,3,Mon Jun 29 13:44:27 2015 UTC,Not for now unfortunately.  What you can try is to put the whole Spacemacs configuration on a USB stick by setting dotspacemacs-configuration-layers to 'all (Spacemacs will install everything). You can set the layer variables in dotspacemacs/init.
emacs,3bicjt,syl20bnr,1 point,Mon Jun 29 15:47:50 2015 UTC,Bring your .emacs.d and .spacemacs on an USB key.
emacs,3bicjt,cgroza,1 point,Mon Jun 29 16:54:01 2015 UTC,"I have my Emacs installed on Dropbox, the .emacs, .emacs.d-folder and the bin-files with the Emacs executables. All in one folder.   When I download something and customize something in Emacs at home, the changes will be directly applied on my work space too. Because it's the same Emacs that I use on work as on home."
emacs,3bicjt,ReneFroger,1 point,Mon Jun 29 19:29:37 2015 UTC,"Same OS home and work as well? Just wondering if many specific updates were different depending on what os they were installed from, or whether because it's all lisp the same update and configs work for Linux, widows and osx etc."
emacs,3bicjt,__baxx__,1 point,Tue Jun 30 00:33:26 2015 UTC,Thanks for the replies. I'll give a few a try and report back on what works best.
emacs,3bfk90,ReneFroger,5,Sun Jun 28 19:54:05 2015 UTC,"Also, check awesome wasamasa's package called Shackle: https://github.com/wasamasa/shackle"
emacs,3bfk90,kovrik,2,Sun Jun 28 20:14:18 2015 UTC,My major-mode-dedication package (which also uses the display-buffer-alist system) tries to help tame emacs's habits too: https://github.com/tom-seddon/major-mode-dedication  It's what I use day to day. Up to you whether this says more about the package or about me...
emacs,3bfk90,to3m,1 point,Sun Jun 28 22:43:55 2015 UTC,Any advice to also make C-c ! l select the window with the errors buffer?
emacs,3bfk90,hvis,1 point,Sun Jun 28 20:19:48 2015 UTC,"I'm guessing you are asking this in the context of another package, possibly Flycheck? Out of the box, C-c ! isn't bound to anything."
emacs,3bfk90,ccharles,1 point,Sun Jun 28 22:04:02 2015 UTC,"Yes, Flycheck. Which is exactly the package Sebastian mentions in the article."
emacs,3bfv8f,benmaughan,1 point,Sun Jun 28 21:24:55 2015 UTC,Sascha Chua should to get an interview with Syohex. He's doing a great job with his packages.
emacs,3bfv8f,ReneFroger,1 point,Sun Jun 28 21:53:50 2015 UTC,Is this compatible with multiple cursors?
emacs,3bhg52,daddyc00l,2,Mon Jun 29 06:35:58 2015 UTC,"You may wish to consider customizing the display-buffer-alist -- here is a link to a complex example that I have been using for the past couple of years:  http://stackoverflow.com/a/18371427/2112489  You may also wish to consider modifying the underlying functions so that they do what you want -- e.g., always pop open a buffer in a separate frame, instead of the current frame.  Here is a link to a simplified usage of the display-buffer-alist relating to the *Help* buffer:  http://emacs.stackexchange.com/a/5754/2287  There are a number of packages by authors that create workarounds to restore a previous window arrangement or otherwise tap into the display-buffer-alist -- e.g., winner-mode, elscreen, shackle, etc.  On a side note, in Emacs we use the word frame to mean the whole kitten kaboodle; whereas, the word window is used to describe individual areas within a specific frame."
emacs,3bg5ud,drwebb,2,Sun Jun 28 22:54:57 2015 UTC,C-h l and M-x name-last-kbd-macro … M-x insert-kbd-macro
emacs,3bg5ud,vermiculus,1 point,Mon Jun 29 03:49:54 2015 UTC,I'm just guessing here as an idea came to me after looking at that command but is it possible to store keyboard macros with names and create other keyboard macros? O_O
emacs,3bg5ud,workisnotfun,1 point,Fri Jul 3 00:30:55 2015 UTC,"is it possible to store keyboard macros with names   yep   and create other keyboard macros?   not sure what you mean here – naturally, you can create all the macros you want. Is that what you're asking, though?"
emacs,3bg5ud,vermiculus,1 point,Fri Jul 3 01:37:49 2015 UTC,"Yeah, currently I thought you could only create 1 macro using <F3> and <F4> and use the macro with <F4>, didn't know you could store macros for example  macro1 -> do some formatting  macro2 -> do a different kind of formatting  I'll have to look more into that"
emacs,3bg5ud,workisnotfun,1 point,Fri Jul 3 01:46:13 2015 UTC,"keyfreq.el will probably do most of what you want. It does merge the insert-commands. Sample output from running it for a minute (truncated):   33   48.53%  self-insert-command                ..�   7   10.29%  evil-previous-line                 <up>, k   6    8.82%  evil-delete-backward-char-and-join    4    5.88%  helm-maybe-exit-minibuffer            4    5.88%  helm-buffers-list                  SPC b, C-c h C-x C-b, <menu-bar> <tools> <Helm> <Buffers> <Find buffers>   2    2.94%  helm-M-x                           M-x, C-c h M-x, <menu-bar> <tools> <Helm> <Commands> <Emacs Commands>   1    1.47%  save-buffer                        SPC w, C-x C-s, <menu-bar> <file> <save-buffer>   Edit: Good post on command statistics that uses it as well: http://ergoemacs.org/emacs/command-frequency.html"
emacs,3bg5ud,CodyReichert,0,Mon Jun 29 04:14:41 2015 UTC,I was thinking about writing a small package for suggesting and generating hydras for common tasks I do together over time not long ago actually. I am far too lazy and probably won't actually make it any time soon though especially since I have little experience in elisp other than what I learn to hack together other packages.
emacs,3bebat,IekaiF4d,2,Sun Jun 28 12:36:28 2015 UTC,"The setq function is executing immediately in your init.el and returning nil which is then being used as the parameter to add-hook. Instead you should wrap that call in a lambda, which will result in the return of a function that calls setq."
emacs,3bebat,i_am_broccoli,1 point,Sun Jun 28 13:12:45 2015 UTC,"Thanks for the explanation, it worked."
emacs,3bebat,cestdiego,1 point,Sun Jun 28 15:28:24 2015 UTC,"(add-hook 'LaTeX-mode-hook (lambda ()                              (setq TeX-master (concat                                                (projectile-project-root) ""main.tex""))))"
emacs,3be7cr,wqhhust,1 point,Sun Jun 28 11:38:18 2015 UTC,"Press SPC ; and then a motion to comment/uncomment a region.  Commenting current out 5 lines downwards: SPC ; 5 j Commenting out current line only: SPC ; ;  If you are using holymode, I am not quite sure what ""motions"" it accepts, but I suppose it would work similarly."
emacs,3be7cr,Kinky_German,1 point,Sun Jun 28 11:51:50 2015 UTC,"Thanks. But we need to know many lines to comment/uncomment. While C-M-;  in prelude doesn't need to know how many lines, we just need to point to a sexp, do press C-M-;"
emacs,3be7cr,Kinky_German,1 point,Sun Jun 28 12:52:10 2015 UTC,Maybe use C-h c and type C-M-; to find out which command is being called. So you can check the Spacemacs documentation for something similar?
emacs,3be7cr,DasEwigeLicht,1 point,Sun Jun 28 13:02:52 2015 UTC,In newer versions of emacs there's the command comment-line. Run it through describe-function to find out what it's bound to.
emacs,3ba645,nautola,11,Sat Jun 27 06:32:50 2015 UTC,"I use this hydra to quickly set up my window layout.  (defhydra hydra-window-stuff (:hint nil)     ""           Split: _v_ert  _s_:horz          Delete: _c_lose  _o_nly   Switch Window: _h_:left  _j_:down  _k_:up  _l_:right         Buffers: _p_revious  _n_ext  _b_:select  _f_ind-file  _F_projectile          Winner: _u_ndo  _r_edo          Resize: _H_:splitter left  _J_:splitter down  _K_:splitter up  _L_:splitter right            Move: _a_:up  _z_:down  _i_menu""       (""z"" scroll-up-line)     (""a"" scroll-down-line)     (""i"" idomenu)      (""u"" winner-undo)     (""r"" winner-redo)      (""h"" windmove-left)     (""j"" windmove-down)     (""k"" windmove-up)     (""l"" windmove-right)      (""p"" previous-buffer)     (""n"" next-buffer)     (""b"" ido-switch-buffer)      (""f"" ido-find-file)     (""F"" projectile-find-file)      (""s"" split-window-below)     (""v"" split-window-right)      (""c"" delete-window)     (""o"" delete-other-windows)      (""H"" hydra-move-splitter-left)     (""J"" hydra-move-splitter-down)     (""K"" hydra-move-splitter-up)     (""L"" hydra-move-splitter-right)      (""q"" nil))"
emacs,3ba645,waspish_ly,11,Sat Jun 27 09:54:18 2015 UTC,"I have written a hydra for multiple-cursors and use it everyday  (defhydra cqql-multiple-cursors-hydra (:hint nil)   ""      ^Up^            ^Down^        ^Miscellaneous^ ---------------------------------------------- [_p_]   Next    [_n_]   Next    [_l_] Edit lines [_P_]   Skip    [_N_]   Skip    [_a_] Mark all [_M-p_] Unmark  [_M-n_] Unmark  [_q_] Quit""   (""l"" mc/edit-lines :exit t)   (""a"" mc/mark-all-like-this :exit t)   (""n"" mc/mark-next-like-this)   (""N"" mc/skip-to-next-like-this)   (""M-n"" mc/unmark-next-like-this)   (""p"" mc/mark-previous-like-this)   (""P"" mc/skip-to-previous-like-this)   (""M-p"" mc/unmark-previous-like-this)   (""q"" nil))"
emacs,3ba645,CQQL,12,Sat Jun 27 13:48:58 2015 UTC,What's a hydra? Serious question.
emacs,3ba645,trezor2,10,Sat Jun 27 11:00:39 2015 UTC,A new way to bind keys.  https://github.com/abo-abo/hydra
emacs,3ba645,MonsieurBanana,4,Sat Jun 27 11:24:39 2015 UTC,"God mode has a nice prefix keybinding (g) which lets you run Meta functions. e.g. gf == M-f. But I'd like it if gff was equal to M-f M-f until I press a different key. So I wrote a hydra map for that.  (defun private--set-hydra-function (var)   `(defhydra ,(make-symbol (concat ""hydra-god-repeater-"" var))      (god-local-mode-map ""g"")      (,var (lambda() (interactive) (call-interactively (key-binding (kbd ,(concat ""M-"" var))))))))  (defmacro set-hydra-meta-repeat (&rest vars)   (let ((forms (mapcar 'private--set-hydra-function vars)))     `(progn ,@forms)))  (set-hydra-meta-repeat ""q"" ""w"" ""e"" ""r"" ""t"" ""y"" ""u"" ""i"" ""o""                        ""p"" ""a"" ""s"" ""d"" ""f"" ""g"" ""h"" ""j"" ""k""                        ""l"" ""z"" ""x"" ""c"" ""v"" ""b"" ""n"" ""m""                        ""1"" ""2"" ""3"" ""4"" ""5"" ""6"" ""7"" ""8"" ""9""                        ""0"" ""!"" ""@"" ""#"" ""$"" ""%"" ""^"" ""&"" ""*""                        ""("" "")"" ""_"" ""+"" ""{"" ""}"" ""|"" "":"" ""\""""                        ""<"" "">"" ""?"" ""-"" ""="" ""["" ""]"" "";"" ""'""                        ""\\"" "","" ""."" ""/"" ""`"" ""~"")"
emacs,3ba645,AtticHacker,5,Sat Jun 27 12:45:52 2015 UTC,"I have a hydra for some org-mode movement commands  (defhydra hydra-org (:color red :hint nil)   "" Navigation^ --------------------------------------------------------- _j_ next heading _k_ prev heading _h_ next heading (same level) _l_ prev heading (same level) _u_p higher heading _g_o to ""   (""j"" outline-next-visible-heading)   (""k"" outline-previous-visible-heading)   (""h"" org-forward-heading-same-level)   (""l"" org-backward-heading-same-level)   (""u"" outline-up-heading)   (""g"" org-goto :exit t))"
emacs,3ba645,klined,5,Sat Jun 27 17:19:30 2015 UTC,"Yours obviously has more flexibility in where you can invoke it from, but it's worth being aware of org's speed keys which already does essentially that."
emacs,3ba645,tryptych,2,Sun Jun 28 07:12:15 2015 UTC,"Thanks! I wasn't aware of speed keys in org, I'll definitely check it out!.   One of the things I like about hydra is I can sort of centralize functionality that I use often under, and have it remind me of what's available. For instance I have a ""utility"" hydra where I put most functions that are not part of a package, but useful anyway (such as toggle case, pretty print json and xml, copy file in buffer path, open in finder, etc)"
emacs,3ba645,klined,2,Sun Jun 28 19:04:46 2015 UTC,It's also worth being aware of worf which is very similar to speed keys and written by the author of hydra.
emacs,3ba645,angelic_sedition,1 point,Mon Jun 29 15:51:07 2015 UTC,"Thanks for sharing this.  I just added it to my own Emacs config, only changing some of the key-bindings."
emacs,3ba645,eric-plutono,5,Sat Jun 27 21:10:44 2015 UTC,https://github.com/abo-abo/hydra/wiki/Hydras-by-Topic
emacs,3ba645,hyperbling,5,Sat Jun 27 20:11:30 2015 UTC,I wish I could upvote this so many times. Hydra has been one of the most useful packages I have ever used.
emacs,3ba645,sadECEmajor,3,Sat Jun 27 14:14:49 2015 UTC,I have various hydras throughout my init.el file which may be useful to some.
emacs,3ba645,eric-plutono,3,Sat Jun 27 15:14:26 2015 UTC,"I'm a bit confused as to how hydra works. Does calling a command that is bound to a key in some hydra function initiate the hydra modified key bindings, or do you call the specific hydra function with a M-x to enter the hydra ""mode?"""
emacs,3ba645,cannonicalForm,4,Sun Jun 28 00:47:14 2015 UTC,This short introduction I wrote will hopefully answer your questions.
emacs,3ba645,eric-plutono,3,Sun Jun 28 02:46:20 2015 UTC,"You usually bind something to a key chord.  I have C-c m bound to a paredit hydra that I have. When I hit C-c m, a new dialogue is at the bottom with some commands to let me edit real quick."
emacs,3ba645,sledgespread,2,Sun Jun 28 03:24:09 2015 UTC,"At the moment the main one I'm using is for help functions. I find the keys are presented in a more readable way by a hydra than by the help-for-help command, and as a bonus I don't need to press ? to see them.  Here's the hydra:  (defhydra hydra-help (:exit t)     ;; Better to exit after any command because otherwise helm gets in a     ;; mess, set hint to nil: written out manually.      ""   Describe        ^^Keys                    ^^Search                    ^^Documentation   ---------------------------------------------------------------------------------------   _f_unction        _k_eybinding              _a_propros                  _i_nfo   _p_ackage         _w_here-is                _d_oc strings               _n_: man   _m_ode            _b_: show all bindings    _s_: info by symbol         _h_elm-dash   _v_ariable    ""     ;; Boring help commands...     (""e"" view-echo-area-messages ""messages"")     (""l"" view-lossage ""lossage"")     (""C"" describe-coding-system ""coding-system"")     (""I"" describe-input-method ""input-method"")       ;; Documentation     (""i"" info nil)     (""n"" helm-man-woman nil)     (""h"" helm-dash)      ;; Keybinds     (""b"" describe-bindings nil)     (""c"" describe-key-briefly nil)     (""k"" describe-key nil)     (""w"" where-is nil)      ;; Search     (""a"" apropos-command nil)     (""d"" apropos-documentation nil)     (""s"" info-lookup-symbol nil)      ;; Describe     (""f"" describe-function nil)     (""p"" describe-package nil)     (""m"" describe-mode nil)     (""v"" describe-variable nil)     (""y"" describe-syntax nil)      ;; quit     (""q"" help-quit ""quit""))   (global-set-key (kbd ""<f1>"") #'hydra-help/body)   Obviously you'd needhelm and helm-dash to use those parts, but I think the other functions are all built-in."
emacs,3ba645,ReneFroger,3,Thu Jul 2 10:49:28 2015 UTC,"Oh yes. For Helm, you can have set a Vi-like navigation.    ;; Hydra for in Helm  (defhydra helm-like-unite ()    ""vim movement""    (""?"" helm-help ""help"")    (""q"" nil ""exit"")    (""<SPC>"" helm-toggle-visible-mark ""mark"")    (""d"" helm-buffer-run-kill-persistent ""Delete selection"")    (""a"" helm-toggle-all-marks ""(un)mark all"")    ;; not sure if there's a better way to this    (""/"" (lambda ()           (interactive)           (execute-kbd-macro [?\C-s]))     ""search"")    (""v"" helm-execute-persistent-action)    (""g"" helm-beginning-of-buffer ""top"")    (""h"" helm-previous-source)    (""l"" helm-next-source)    (""G"" helm-end-of-buffer ""bottom"")    (""j"" helm-next-line ""down"")    (""k"" helm-previous-line ""up"")    (""i"" nil ""cancel""))   (key-chord-define helm-map ""jk"" 'helm-like-unite/body)     Type jk to toggle Hydra inside Helm."
emacs,3ba645,excitedaboutemacs,1 point,Sat Jun 27 10:02:13 2015 UTC,Can anyone make a Dired Hydra? I never remember the keys.
emacs,3batdz,ares623,12,Sat Jun 27 12:52:48 2015 UTC,"wasamasa has the correct answer, since he found my init.el.   I made that screenshot in my day-to-day emacs config, which I grew over the last few years. If you have more questions about my setup, ask away!"
emacs,3batdz,bastibe,7,Sat Jun 27 16:11:00 2015 UTC,Looks like Pragmata Pro.
emacs,3batdz,Lokaltog,10,Sat Jun 27 13:19:39 2015 UTC,The font is Pragmata Pro and the theme would be whiteboard which is bundled with Emacs as can be seen from their init.el.
emacs,3batdz,wasamasa,2,Sat Jun 27 13:19:58 2015 UTC,Exactly right!
emacs,3batdz,bastibe,1 point,Sat Jun 27 16:09:27 2015 UTC,For a moment there I nearly thought I was looking at one of the condensed mono-spaced flavors of M+.  Now I'm kinda wanting Pragmata Pro.   sample and sample and demo.
emacs,3batdz,sidoaight,1 point,Sun Jun 28 00:04:44 2015 UTC,"PragmataPro is one of the few fonts that has very good Unicode support. Also, the Roman-only version is just $19 and Emacs can simulate the italic and bold version pretty well. I haven't regretted those $19."
emacs,3batdz,bastibe,1 point,Sun Jun 28 05:08:34 2015 UTC,Really like the M+. Thanks for mentioning it.
emacs,3batdz,deadmaya,1 point,Wed Jul 1 11:34:47 2015 UTC,"Hey, you're very welcome!"
emacs,3bbqom,Taikal,11,Sat Jun 27 18:24:10 2015 UTC,"My understanding is that Emacs is used as a C++ IDE only by programmers who write Makefiles by hand.   If you consider CMake, Autotools etc. writing Makefiles by hand, then... yeah. In my opinion the build system not being part of a editor is a good thing rather than a flaw but YMMV."
emacs,3bbqom,vifon,1 point,Sat Jun 27 19:40:30 2015 UTC,"In my opinion the build system not being part of a editor is a good thing   I think so, too.  But and IDE would let you configure these tools easily, according to the needs of your project, without making you scavenge the Internet for information on how to make them perform certain basic tasks.  On the other hand, Emacs has no concept of a project (you could use Per-Directory Local Variables for that, but it would be an hack). And let's not talk about workspaces..."
emacs,3bbqom,ccharles,3,Sat Jun 27 20:01:14 2015 UTC,"you could use Per-Directory Local Variables for that, but it would be an hack   How is that a hack?"
emacs,3bbqom,ccharles,-1,Sat Jun 27 22:02:59 2015 UTC,"Per-Directory Local Variables are meant for variables that are not critical (like formatting, for example). Otherwise, why would you store them into a hidden file?  Why would you store a project's settings into a hidden file?  Does the .dir-locals.el name make you think of a project?  Indeed, Emacs tries to offer IDE features with its EDE package and EDE does not rely on Per-Directory Local Variables, and it doesn't hide its project file.  Too bad that EDE is not widely used (otherwise you would encounter more references to it)."
emacs,3bbqom,ccharles,3,Sat Jun 27 23:41:25 2015 UTC,"Per-Directory Local Variables are meant for variables that are not critical (like formatting, for example).    Actually, directory-local variables are ideal for project settings. In fact, that's the example given in the documentation:   Sometimes, you may wish to define the same set of local variables to all the files in a certain directory and its subdirectories, such as the directory tree of a large software project. This can be accomplished with directory-local variables.   You continue:   Otherwise, why would you store them into a hidden file?   That doesn't follow at all. Lots of ""critical"" things are stored in hidden files and directories, e.g. version control information (.git/, .hg/, etc). Hidden doesn't mean ""not critical""."
emacs,3bbqom,augmentedtree,-1,Sun Jun 28 00:11:15 2015 UTC,"That doesn't follow at all. Lots of ""critical"" things are stored in hidden files and directories, e.g. version control information (.git/, .hg/, etc).    Version control information is hidden because you are not supposed to fiddle with it. Why would you hide your project settings, instead?  Also, version control information is redundant.  If you copy the contents of a directory without its hidden version control information, the project is still intact.  OTOH, if you copy all the source files without their project settings, you won't be able to build the project anymore. Hence, you should put into hidden files only information that is not relevant for the project."
emacs,3bbqom,vifon,3,Sun Jun 28 00:53:02 2015 UTC,"Version control information is hidden because you are not supposed to fiddle with it.   Clearly we have different ideas of why things might be hidden. Personally, I modify lots of dotfiles manually (e.g. ~/.emacs.d/init.el, ~/.vimrc, .git/config, .git/info/exclude, ~/.gitconfig, ~/.i3/config, …). But that's not really relevant.  As I quoted above, the documentation for directory-local variables specifically suggests using them for project settings. Calling that a ""hack"" seems unwarranted.  In any case, /u/vifon's suggestion is still the best IMO. Project settings should be editor-agnostic and editor-external. Emacs does offer varying levels of support for many of these, but I'm not sure how many support C++."
emacs,3bbqom,redguardtoo,1 point,Sun Jun 28 01:10:08 2015 UTC,"But that's not really relevant.   Actually, it is.  And I think that you are right: in Unix, there is a tradition of modifying hidden files. It may be deemed improper, but that is the way it is.   Calling that a ""hack"" seems unwarranted.   Maybe hack is a misnomer.  I meant that I would rather have a file that clearly identifies a project.  When you see a .git folder, you know that version control is handled by Git. When you see a .dir-locals.el, what do you know, without looking into it?   Project settings should be editor-agnostic and editor-external.   Agreed."
emacs,3bbqom,redguardtoo,2,Sun Jun 28 06:48:05 2015 UTC,"On unix, hidden just means ""I don't usually want displayed when I ls the directory."" It doesn't mean it shouldn't be manually edited, in fact MOST .whatever files are manually edited."
emacs,3bbqom,redguardtoo,1 point,Mon Jun 29 18:26:08 2015 UTC,"I disagree.  A leading dot means ""hidden file"".  This is why file managers hide them unless you enable the option ""Show hidden files""."
emacs,3bbqom,__notmythrowaway__,1 point,Mon Jun 29 21:31:14 2015 UTC,"IDE would let you configure these tools easily, according to the needs of your project, without making you scavenge the Internet for information on how to make them perform certain basic tasks.   Usually the project is either simple enough to use a generic Makefile (like the one I've written but there are dozens of them) or complex enough that a build system generated by the editor will not be sufficient. Again, YMMV.  Using cpputils-cmake will be probably the closest to what you want."
emacs,3bbqom,__notmythrowaway__,5,Sun Jun 28 07:53:11 2015 UTC,"use cmake, then check my project cpputils-cmake,   create a project: A project file is not necessary if you use cmake configure its toolset (GCC, CLang, etc): It's done by cmake configure its environment (directories for headers, directories for libraries, etc.): cpputils-cmake build different targets (Debug, Release, etc.); cmake run the compiled program: cpputils-cmake"
emacs,3bbqom,__notmythrowaway__,0,Sun Jun 28 03:03:46 2015 UTC,"I have tried CMake, but I have never met a software so badly documented.  Really, I can't understand how CMake works.  From what I have read, I am not alone.  At the moment, I am trying to make things work with a generic Makefile."
emacs,3bbqom,__notmythrowaway__,1 point,Sun Jun 28 06:34:48 2015 UTC,"I have tried CMake, but I have never met a software so badly documented. Really, I can't understand how CMake works. From what I have read, I am not alone. At the moment, I am trying to make things work with a generic Makefile.   If Makefile is OK for you, you should stick to it.  Cmake is good for large, cross-platform application development.  In Emacs, you can install cmake-mode and cmake-help-command to read the manual.  You can also install company-mode which support out of the box (online doc, auto-completion).  It's documentation is actually fine. If I have any questions I just contact the cmake developers who are very responsive and helpful.  check http://www.cmake.org/Wiki/CMake/Editors/Emacs for more details."
emacs,3bbqom,__notmythrowaway__,0,Thu Jul 2 00:31:08 2015 UTC,"It's documentation is actually fine.   I disagree. CMake seems more suited to small projects, because it's easy to understand what CMake does for simple CMakeLists.txt files, but if you try to understand more complex CMakeLists.txt files, the documentation is of no help. For instance, in a tutorial, I have found a call to add_subdirectory.  The documentation for add_subdirectory says ""Add a subdirectory to the build.""  What does that mean?  I have no idea."
emacs,3bbqom,workisnotfun,2,Thu Jul 2 13:16:09 2015 UTC,"it's like make -C subdirectory.  My understanding is cmake developers assume the cmake users are already experienced make users.  I've got experience with huge C/C++ projects which used make or automake/autoconf, so cmake is very natural to me.Cmake IS designed for big project."
emacs,3bbqom,AndersBakken,1 point,Mon Jul 6 02:32:40 2015 UTC,My understanding is cmake developers assume the cmake users are already experienced make users.   I think that you are right.
emacs,3bbqom,augmentedtree,3,Tue Jul 7 13:07:06 2015 UTC,"Emacs is an extension of yourself that you build up over the years. Not unlike a 90 pound weakling growing to a bodybuilder gets more efficient at lifting heavy things by progressively lifting heavier things, your workflow with Emacs gets increasingly more efficient the more you customize it top suit your workflow. Eventually, you can run rings around anyone else for general software development work. Emacs is for people who invest in their workflow, not just coding or debugging.  That doesn't mean visual studio developers are slouches but have them do anything not directly related to debugging or writing code, and they'll hit a wall.  I watch people struggle having to work on Linux servers from their windows desktops, while I just hit C-c P <project substring> and the last file I was working on pops up, through the magic of tramp."
emacs,3bbqom,johnfredcee,1 point,Sun Jun 28 00:52:50 2015 UTC,"Emacs is an extension of yourself that you build up over the years.   Unfortunately, that means that you will spend most of those years reinventing the wheel, and maybe not inventing it perfectly round. Who will tell you that your workflow with Emacs -- that you have developed by trial and error -- can't be improved tenfold?  Your comparison to Visual Studio confirms my suspicion: Emacs is ill-suited as an IDE."
emacs,3bbqom,RobThorpe,1 point,Sun Jun 28 08:26:22 2015 UTC,"Again, development is more than debugging and coding. IDEs are optimized for very specific things (though gud on Linux was awesome)"
emacs,3bbqom,RobThorpe,0,Sun Jun 28 11:25:27 2015 UTC,"For example: none of the ""Emacs as an IDE"" guides that I have read mentioned how you were going to configure and build your projects.  Only recently, I have discovered that there is support for CMake, or generic makefiles."
emacs,3b8n6i,ReneFroger,2,Fri Jun 26 21:25:09 2015 UTC,"... and if you're looking for the simplest method to derive a blog from all of your Org-mode files, take a look at https://github.com/novoid/lazyblorg  Example blog: http://karl-voit.at/ (yes, it still needs better CSS though)"
emacs,3b8n6i,murdsdrum,1 point,Sat Jun 27 10:15:47 2015 UTC,There're also org-page and o-blog. I'm using o-blog v1; it works ok.
emacs,3ba6pc,wqhhust,2,Sat Jun 27 06:41:10 2015 UTC,"I haven't used elscreen, but after a cursory glance at the readme, it looks like it does more or less what eyebrowse does. Spacemacs has a layer for eyebrowse.  The typical way of switching buffers in Spacemacs is helm-mini, bound to SPC b b. SPC <tab> switches to the last open buffer."
emacs,3ba6pc,TheBB,1 point,Sun Jun 28 09:34:23 2015 UTC,"I just switched to perspective and I like it more than elscreen. Perspective has a buffer-list specific to a ''perspective"" which is a must have feature for me."
emacs,3ba6pc,tacit7,0,Tue Jun 30 17:06:25 2015 UTC,Bind helm-mini to some key and ditch the elwhateveritis.
emacs,3b9sur,IAskAlotOfQuestions2,1 point,Sat Jun 27 03:53:47 2015 UTC,Have you installed solarized-theme? (M-x package-install solarized-theme).  Then   (load-theme 'solarized t)
emacs,3b9sur,caisah,1 point,Sat Jun 27 08:00:43 2015 UTC,Whenever I try that I get no match found.
emacs,3b9sur,caisah,1 point,Sat Jun 27 11:59:30 2015 UTC,Are you sure your .emacs file is being run on start-up? You should check that. It should be in .emacs.d directory.
emacs,3b9sur,ellakk,1 point,Sat Jun 27 14:44:14 2015 UTC,Done that as well still no match
emacs,3b8c6x,Acktung,4,Fri Jun 26 20:00:43 2015 UTC,"I have taken a liking to using Org-mode for my config... That way everything has its own section and I can explain better what each piece is doing.  I love it, and I think this could be a fantastic way to organize your configuration too.  This is my config.  If that's not your thing, here are some other ideas. More here. Hope this helps..!"
emacs,3b8c6x,Archenoth,3,Fri Jun 26 21:22:34 2015 UTC,http://endlessparentheses.com/how-i-blog-one-year-of-posts-in-a-single-org-file.html
emacs,3b8c6x,ReneFroger,2,Fri Jun 26 21:25:47 2015 UTC,"I do the same, though I'm thinking I need to use u/skeeto 's with-package and with-package* macros."
emacs,3b8c6x,codemac,2,Tue Jun 30 18:12:44 2015 UTC,"No no no! My with-package macros aren't worth using anymore. Forget them! I originally wrote them when there were no other alternatives, but I dumped them this past March in favor of /u/jwiegley's use-package. It's cleaner, more advanced, has a much larger userbase, and is much better maintained."
emacs,3b8c6x,skeeto,2,Tue Jun 30 18:20:34 2015 UTC,Whooooooops ok. Will do :)
emacs,3b8c6x,codemac,3,Tue Jun 30 20:52:40 2015 UTC,"I came back to Emacs after 6 months of using Sublime Text and I'm really enjoying it so much. I have discovered use-package and it's solving almost all problems I suffered early when used Emacs. So as the title says, do you think I may organize it better? How then?"
emacs,3b8c6x,kpurdon,2,Fri Jun 26 20:03:48 2015 UTC,I like to break out my config into multiple related chucks. My setup
emacs,3b8c6x,jordonbiondo,1 point,Fri Jun 26 20:59:45 2015 UTC,Thanks dude. I'll take a look :)
emacs,3b8c6x,lawlist,4,Fri Jun 26 22:06:51 2015 UTC,"It's just my opinion but I hate customize. Instead of having a huge custom-set-variables chunk in your config, use the :config option of use package to organize all the variables within their corresponding package. The idea being that a package and it's functions and variables is only ever configured in one place.  There's no reason why use-package should only be used for external packages. You can use it to configure all the packages emacs comes with. For instance you could add a (use-package ido ...) to your config and then migrate all the custom settings to that use-package block."
emacs,3b8c6x,instant_sunshine,1 point,Fri Jun 26 22:11:26 2015 UTC,I don't actually see that way. I like to use the customize GUI to setup basic Emacs configs unrelated to anything. But I see your point and probably give it a try.
emacs,3b8mii,illbyteanyhelp,8,Fri Jun 26 21:19:58 2015 UTC,"change your font-lock-keywords to my-font-lock-keywords because font-lock-keywords is a buildin variable. You overwrote it. also all your code's symbol names (var and function) should start with a prefix, such as blitzPlus-. It serves as a namespace, because elisp doesn't have. In general, the convention is no camelCase. So, might consider blitzplus- or blitz-plus-."
emacs,3b8mii,xah,2,Sat Jun 27 01:23:03 2015 UTC,Thanks for the help!
emacs,3b8yee,cgroza,1 point,Fri Jun 26 22:59:56 2015 UTC,Can you contribute this to spacemacs directly?
emacs,3b8yee,AnAirMagic,1 point,Fri Jul 3 15:03:04 2015 UTC,"I told them about it on gitter, but they said there is already web-mode."
emacs,3b2ubz,parolang,4,Thu Jun 25 14:53:17 2015 UTC,"I use a pretty simple highlighting scheme for code:   keyword-face: bold; to ensure that I'm not accidentally naming a variable as a keyword string-face: italics; to easily see what is and what isn't code comment-face: less contrast to background color; to easily see what is and what isn't code   Other than code, I usually use the defaults, e.g. dired file permissions.  I normally find that the code mode defaults aren't very useful to me.  For example, in the default c-mode variable names are highlighted on definition, but not subsequent usage, which is as good as you can get without parsing the code, but is usually just noise to me.  I can look at the line and see that it is a variable definition.  The stuff I want to see at a glance with syntax highlighting is mostly ""is this section code, or is it commented out or part of a string?""  Thanks for the sharing the link! rainbow-blocks looks pretty interesting.  Knowing which level I'm currently writing in at a glance might be pretty convenient when writing lisp."
emacs,3b2ubz,agnudawn,1 point,Thu Jun 25 17:17:42 2015 UTC,"I have a friend and former coworker, an older gentleman, who uses vim in a rather degenerate way: vi-compatible, no syntax, no indentation, no plugins, mostly insert mode. He also types with one hand. He's still more productive than most programmers I've met."
emacs,3b2ubz,ReinH,3,Thu Jun 25 18:58:23 2015 UTC,"It seems to me that the purpose of highlighting is to help solve cognitive difficulties.  There are a lot of ""matching paren"" type solutions because that's a typical cognitive difficulty.  I've never much liked the Xach Lee keyword highlighting approach because it doesn't seem to address any particular cognitive difficulty (for me)."
emacs,3b2ubz,srt19170,3,Thu Jun 25 15:21:13 2015 UTC,"I only highlight things which are important to me - like comments, matching parens and all occurrences of symbol at point. I'm using clone of eink them. https://github.com/maio/dotfiles#eink-theme"
emacs,3b2ubz,maio,2,Thu Jun 25 18:46:35 2015 UTC,"I like to take the source code of major modes and the derived modes and make them my own by creating new custom major modes -- changing names (e.g., adding a prefix to all variables, functions, macros, faces, etc.) and making any modifications that suit my needs, including, but not limited to highlighting/colorization.  Since everything is customizable, there is no reason to limit oneself to what other authors have previously written."
emacs,3b2ubz,lawlist,2,Thu Jun 25 19:46:18 2015 UTC,"Very interesting topic.. Been thinking about this alot since I started to really work on one of the emacs solarized themes a few years ago..    I recently started to draft an document to explain how I use (the solarized) color palette which more or less have been stable after the first year or two, needs more work but it's here:  https://github.com/bbatsov/solarized-emacs/blob/master/DEV-GUIDE.md"
emacs,3b2ubz,thomasfr,1 point,Fri Jun 26 01:05:22 2015 UTC,"I kind of like only having 8 accent colors for most situations, it enforces the need to make choices l.. There are some exceptions where I have used non solarized colors but I try to keep them rare and out of normal display.  I might add that according to issues opened in github I'm far more conservative in using colors than some people accept. For some cases I make defucustoms to add more colors at once but that's mostly for the cases where I divert too much from some kind of regular emacs looks."
emacs,3b2ubz,thomasfr,3,Fri Jun 26 01:08:59 2015 UTC,"thanks for mention. Recently i did a survey... well, added a new result of a commercial IDE. It seems, WebStorm is the best, or, rather the most capable. I've looked emacs, vim, gedit... http://ergoemacs.org/misc/syntax_coloring_in_editors.html I'd be interested if anyone have screenshot of the same code for Atom, XCode, VisualStudio, and other."
emacs,3b2ubz,xah,1 point,Thu Jun 25 20:23:57 2015 UTC,"You write in your article that the reason why WebStorm is ""better"" (recognizes more language syntax/semantics and colorizes them accurately) is because it's open source. I think you forgot to mention that WebStorm is not just commercial but also specialized. I doubt that it is very good for any languages not related to web development. Emacs tries to be language agnostic.  But your article is interesting nonetheless."
emacs,3b2ubz,xah,1 point,Thu Jun 25 21:11:55 2015 UTC,"i added MS Visual Studio, and that turns out, doesn't syntax color much. Also added Sublime, also doesn't color much.  btw, WebStorm is part of JetBrain's product, most famous for IntelliJ. They also have pyCharm, RubyMine, phpStorm...etc. But one can buy a package that does all.  i think the key here is that JetBrain and Visual Studio has static analysis buildin. While most open source by default are just regex based syntax coloring. Emacs has it too or rely on 3rd party package using external language engines...at the cost of learning and installing."
emacs,3b2ubz,jordonbiondo,1 point,Fri Jun 26 09:12:56 2015 UTC,There are alternative highlighting schemes out there rather than just keyword identifications.  Some interesting ones are:  Each word is assigned a color and that word will always be colored the same way. (See rainbow-identifiers)  Text is colored by expression depth. (There are packages for this but I can't remember the name)  It sounds like you might enjoy using these types of solutions.
emacs,3b2ubz,sledgespread,1 point,Thu Jun 25 15:15:48 2015 UTC,Slightly off topic but hl-sexp (from the link) looks great! Like a better version of show-paren-mode.
emacs,3b2ubz,aerique,1 point,Thu Jun 25 21:35:50 2015 UTC,"I'm like you. I like my strings, comments and some minor things colorized and nothing else.  I'm mostly interested in partitioning the source into easily scannable pieces and colorizing comments and strings achieves this for a large part.  There's little use in the angry fruit salad color themes IMHO.  I solved it by creating my own color theme: https://github.com/aerique/emacs-theme-aerique#readme since the maximum decoration font locking setting seems like a nice idea that'll take too much time to work out."
emacs,3b2ubz,xah,1 point,Fri Jun 26 08:52:31 2015 UTC,"(setq font-lock-maximum-decoration 1) I think few modes actually provide different levels. If i'm forced to give a number, i'd say, of all builtin emacs major mode for languages, less than 5% provides more than 1 level of coloring. If someone can show which modes have different levels, that'd be great."
emacs,3b4aot,excitedaboutemacs,2,Thu Jun 25 21:15:23 2015 UTC,Try M-! :)
emacs,3b4aot,cestdiego,1 point,Thu Jun 25 21:44:05 2015 UTC,Unfortunately this requires too much user interaction. Thanks though!
emacs,3b4aot,agnudawn,2,Fri Jun 26 19:06:09 2015 UTC,"See if this is near what you want.  It sends the current region to the command as stdin and if there is no region, it sends the buffer.  I used nl as the command, which adds numbers to stdin.  (defun my-format-inplace ()   (interactive)   (let* ((command ""nl"")          (regionp (region-active-p))          (beg (if regionp (region-beginning) (buffer-end -1)))          (end (if regionp (region-end) (buffer-end 1))))     (shell-command-on-region beg end command t t)))"
emacs,3b4aot,xah,1 point,Thu Jun 25 22:52:14 2015 UTC,"This got me really close. I changed it a little bit and it worked great! I think some of it might be unnecessary:  (defun my-format-inplace () (interactive) (let* ((command (concat ""perl_script_here "" (thing-at-point 'symbol)))        (regionp (region-active-p))        (beg (if regionp (region-beginning) (buffer-end -1)))        (end (if regionp (region-end) (buffer-end 1))))   (shell-command-on-region beg end command t t)   (message command)) )   What I was missing was the thing-at-point. Thanks so much!!"
emacs,3b4aot,heikkilehva,2,Fri Jun 26 19:07:12 2015 UTC,"here's 2 examples at bottom, with python and node.js, where the script receives from stdin plus a command line arg. http://ergoemacs.org/emacs/elisp_perl_wrapper.html"
emacs,3b4aot,instant_sunshine,1 point,Sun Jun 28 10:38:10 2015 UTC,"This is how I used to do it before I learned elisp: You write a commandline program in any language that reads from STDIN, processes the text, and writes it to STDOUT. I have 'txt2para.pl'. Then add a new elisp function into your config that calls it and eval it:   (defun txt2para ()     ""Turn consecutive non-empty lines of plain text into paragraphs.""     (interactive)     (shell-command-on-region (point)            (mark) ""txt2para.pl"" nil t))   Select the text region to modify and run M-x txt2para."
emacs,3b3s1b,guseCar,1 point,Thu Jun 25 18:58:45 2015 UTC,/u/abo-abo
emacs,3b3s1b,nandryshak,1 point,Fri Jun 26 01:12:28 2015 UTC,"Sorry, I don't really understand how to reproduce the problem.  I guess you type a bunch of stuff, while having truncate-lines at nil. Then you try to jump to the last char of the line and you get something weird. I'm not getting anything weird on my end, with (setq avy-style 'at-full) - the default setting.  Maybe you could summarize your Emacs version, your settings and a test file in a new issue."
emacs,3b3s1b,abo-abo,1 point,Fri Jun 26 07:17:14 2015 UTC,"Thanks for replying.  Sorry, I don't have github.  However, the following steps should reproduce the issue:   emacs -Q M-x toggle-word-wrap Edit the buffer so that it contains only the following three words, all on the first logical line:    aaaaaaaaaaa... about half the width of the first screen line.   bbbbbbbbbbb... about half the width of the first screen line, but short enough to stay on the first screen line.  This needs to be longer than (length avy-keys) (but since it's half the length of the first screen line, that shouldn't be a problem). cccc... This can be long or short, but it should be long enough that the word wrap puts it on the second screen line.     At this point, the buffer should look something like this:  aaaaaaaaaaaaaaaaaaaa bbbbbbbbbbbbbbbbbb  | <- end of emacs screen cccccccc   All three words are logically on line 1, but word wrap puts cccccccc on the second screen line.  Final step:   Load avy, then M-x avy-goto-char, then b (i.e. use avy-goto-char to search for b).     What should happen:   aaaaaaaaaaaaaaaaaaaa kkkkkkkkkkkkkkkkkkkk| cccccccc   where k denote the various avy-keys.  What happens instead:  aaaaaaaaaaaaaaaaaaaa                     | kkkkkkkkkkkkkkkkkkkcccccccc   While avy-goto-char is active, this pushes all the characters further down the paragraph away from their original positions, making it very difficult to keep track of them."
emacs,3b3gv5,nloyola,4,Thu Jun 25 17:39:09 2015 UTC,"Look at the variables ""isearch-mode-hook"" and ""isearch-mode-end-hook"". You can enable subword-mode in the first one and disable it in the second one. You'll have to check that the buffer is in Scala or Javascript mode though."
emacs,3b3gv5,RobThorpe,1 point,Thu Jun 25 18:29:39 2015 UTC,"You can either do this with advice or hooks.    I'd post some code, but half the fun of Emacs is learning to modify it yourself :P"
emacs,3b2rwt,ThrowawayTartan,3,Thu Jun 25 14:34:02 2015 UTC,"I don't understand what you mean by making super context aware. You mean disabling i3 binding when emacs is on focus? That's more of an i3 question, you might want to try /r/i3wm.  Otherwise the simplest solution to your problem would be using meta instead of super for windmove."
emacs,3b2rwt,MonsieurBanana,2,Thu Jun 25 14:51:40 2015 UTC,I really really really should have read the docs first even before googling... Sorry and thank you for your time :)
emacs,3b2rwt,sledgespread,2,Thu Jun 25 14:55:36 2015 UTC,"Random plug: you might find frames-only-mode useful. It makes Emacs use OS-windows (or ""frames"" as Emacs calls them) instead of Emacs-windows. Works nicely with tiling window managers."
emacs,3b0qpa,pzone,14,Thu Jun 25 01:13:47 2015 UTC,"Rather than use systemd, I use GNU dmd for managing my Emacs daemon and a bunch of other user services.  It's written in a Lisp (Scheme) so it's fun to mess around with.  My messy config: http://paste.lisp.org/display/150463  dmd home page: https://gnu.org/s/dmd"
emacs,3b0qpa,davexunit,2,Thu Jun 25 01:45:58 2015 UTC,"I've been using guix for my user on arch, and I decided to switch from systemd --user to dmd as an experiment. I'd love to get some cgroup process tracking built into dmd because things like gpg-agent that fork, dmd doesn't track and has caused a few annoyances for me that made me switch back to systemd --user  Excited to see it improve as GuixSD makes more traction! I do admit I wont switch to it until systemd is packaged, it works really well on laptops :/"
emacs,3b0qpa,codemac,5,Fri Jun 26 07:26:06 2015 UTC,Cool!  Functional dependency management seems like such a natural idea.  Are you using Hurd too?
emacs,3b0qpa,davexunit,1 point,Thu Jun 25 03:19:43 2015 UTC,"Not at this time, but I'd like to check it out once GNU Guix has a working Hurd port."
emacs,3b0qpa,xoo-,3,Fri Jun 26 00:06:29 2015 UTC,pretty cool. thanks. this also serves as a mini-intro to systemd.
emacs,3b0qpa,lazyklimm,2,Thu Jun 25 15:19:54 2015 UTC,I use      @reboot emacs --daemon   in user's crontab
emacs,3b0qpa,eric-plutono,2,Thu Jun 25 15:02:29 2015 UTC,"Great post, thanks for the write-up!"
emacs,3b0qpa,nimkull,2,Thu Jun 25 15:39:50 2015 UTC,"What would be the advantage of doing it like this?  You list:   easier to monitor continuously - but I don't care about monitoring, I only care about it working, which is fairly obvious - if it doesn't run when I try to start it, it isn't working, and restarting via systemd (systemctl restart emacs, I'd guess) is even slightly more verbose than ""emacs --daemon"" startup can be parallelized, starts at boot - but I don't start it at boot, I start it alongside X - if I'm X-less, Emacs is likely the only thing that I'll be running anyway vague potential benefit - vague potential benefit   As you can see, it's zero out of three.   On the other side, you list one very clear disadvantage - systemd craps out if Emacs, heaven forbid, asks something on exit, and please bring your own brittle ad-hoc solution.   Apparently, one can beat them without even trying?"
emacs,3b0qpa,monotux,3,Thu Jun 25 17:30:46 2015 UTC,"I meant the ""beat 'em join 'em"" as a joke, I have not really used linux without systemd and cannot speak to the benefits of running using linux without it.  However given that most users are running systemd, there are some small benefits that can be exploited by digging in a little bit.  My understanding of these benefits differs from yours, and regarding the points you've brought up:    This setup has been effective for me. I do not type emacs --daemon to start the server, and I have removed (server-start) from my init file. Monitoring with automatic restart is an important benefit for me since I change my emacs configuration frequently and often restart emacs multiple times in a session.  (I use Restart=always.) Starting emacs at boot gives the advantage of not having to wait for it, startup from desktop or terminal will be instantaneous.  Adding emacs daemon service means your computer will be fully efficient in using your CPU to start all processes as fast as possible. Suppose a user runs emacs in .xinitrc.  Suppose that all processes have started except for X, and X is the last process to start.  Then a multi-core CPU will be partially idle while waiting for X to send the command to launch the daemon.  In contrast, if emacs is specified as a system process with no dependencies, as soon as any CPU core is running less than 100%, those cycles can be used to start emacs. I completely agree these benefits are small and subtle, but maximizing small subtle benefits is why I choose emacs over other editors.  I did not mean to imply systemd craps out if emacs doesn't quit correctly. I meant that the script provided may not be adequate to explain to systemd how to quit emacs cleanly if you have a complex configuration.  The hang I described is the same as if you accidentally ran emacsclient -e ""(kill-emacs)"", causing the daemon to wait for confirmation without a client attached to offer it. For example, system shutdown is unaffected: shutting down your computer with a hung daemon is the same with or without systemd.  If you want to send sigkill you can run systemd --user kill emacsd, pkill, use a graphical task manager, however you normally do it.  Systemd pretty much views its job as completed after it has run the command ExecStop. All of this is a benefit in my view, since it is an easy way to describe a customized emacs shutdown process if your configuration makes doing so nontrivial."
emacs,3b0qpa,projectgus,1 point,Thu Jun 25 23:03:12 2015 UTC,"People were so hot on systemd when it first came out. All the hip distros (notably, Arch) were quick to adopt it. What the hell happened?"
emacs,3b0qpa,f4hy,4,Thu Jun 25 14:23:11 2015 UTC,I think it's invisible because it just works.
emacs,3b0qpa,dojikirikaze,1 point,Thu Jun 25 20:00:23 2015 UTC,"alias emacs=""emacsclient -nca ''""   Starts emacs automagically if the daemon is not running, as soon as you start it from a terminal (change nc to t to have it run in a terminal).  But I think I'll use this setup for the time being."
emacs,3b0qpa,verdigris2014,1 point,Fri Jun 26 07:00:44 2015 UTC,"Thanks for this, I've been using the 'alias emacs=emacsclient -c' trick for many years but I'd been thinking about trying to move to a setup that automatically started emacs. Auto-reloading is a big plus for me, too.  The one thing I haven't cracked with this config is loading environment variables. I'd like my PATH (set in .profile) to be exposed inside emacs, so when I run child processes like 'make' it picks things up correctly.  So far the best I have is to put in .profile, after I set PATH:   systemctl --user import-environment PATH   Which works, except that .profile loads on user login and the systemd user service starts earlier at boot time - so I have to 'systemctl --user restart emacsd' before the new PATH is recognised.  The only way around this I can think of is to 'systemctl disable --user emacsd' so it doesn't start automatically at boot, and manually start it in .profile after I update the PATH. However if I'm doing this then I'm maybe not gaining a whole lot by using systemd in the first place...  Does anyone have any suggestions?"
emacs,3b133e,lifeIsMistake,3,Thu Jun 25 02:57:58 2015 UTC,"visit-tags-table is not the right function:  M-x RET describe-function RET visit-tags-table RET M-x RET describe-function RET ggtags-update-tags RET   So, you are looking for the ggtags-* functions. Projectile binds to these when ggtags-mode is enabled. In you're project buffer, try:  M-x RET describe-mode   and see if the ggtags-minor-mode is enabled.  Edit: I may have misunderstood that you aren't calling visit-tags-table directly. You should still run the describe-mode function when you receive the error to check if ggtags-mode is enabled.  https://github.com/bbatsov/projectile/blob/master/projectile.el#L1810-L1815"
emacs,3b133e,creichert,2,Thu Jun 25 05:44:46 2015 UTC,"""Visit tags table"" sounds like something from etags.el"
emacs,3b133e,leo49831,2,Thu Jun 25 04:11:09 2015 UTC,I'm not sure if this is your problem but the version of global in the Debian repositories is hopelessly out of date. That version is incompatible with ggtags/projectile and I think it gives errors like you describe.  You can get an up to date version using linuxbrew or by building from source.
emacs,3b133e,sledgespread,2,Thu Jun 25 08:51:38 2015 UTC,Thank you for your responses.  Looks like it was important to do projectile-regenerate-tags from buffer with ggtags mode enabled(and create empty GTAGS before it).
emacs,3axzk9,agumonkey,5,Wed Jun 24 12:07:02 2015 UTC,"I have to say that I feel like a bit of a dolt with magit. I know it has a lot of fans, so I installed it and then stupidly set it as a my default external editor and then later went to do a git diff --cached for staged files and discovered magit opening up all kinds of buffers with hashes in them and I couldn't read it at all.   What do I do to learn to use magit more intelligently? I do all git work via command line, so I'm not sure if it's worth it to learn magit?  I have heard people complain about ediff-buffers for merge conflicts and stuff, but I actually kind of like ediff-buffers because of the side-by-side split with left-right selection, skipping, etc. Should I try to use magit for merge conflicts?"
emacs,3axzk9,erewok,6,Wed Jun 24 22:18:10 2015 UTC,"For me, at least, just scratching the surface of magit is plenty. I also do most of my git work command line, but staging (interactively, with colored diffs, and single key commands), and the integrated blame annotations and the gutter, these things just make the experience, and make sense integrated into my editor. I guess if you did everything in emacs that would be one thing, but I don't understand the appeal of gnus either ;)  So, my 2c is try using magit-status more and the rest less, and see what you think."
emacs,3axzk9,lygaret,2,Thu Jun 25 01:28:51 2015 UTC,I appreciate this feedback. I'll start trying to use magit-status tomorrow and see where it takes me.
emacs,3axzk9,erewok,1 point,Thu Jun 25 04:13:31 2015 UTC,"Yeah, good luck. I've noticed that people tend to fall into one of two camps when it comes to emacs usage: those that think of it as an (extremely customizable) editor, and those that think of it more like an OS in and of itself. I'm in the former category, and while I don't think either is better, necessarily, thinking of it that way helps me understand a subset of functionality many packages provide to me, as opposed to the other group.  Magit is a good example; if you use emacs like I do, where it's an editor with customizations, the parts of magit that make sense are those that you'd do in the course of normal editing operations. E.g. check the status, see the branch you're on, look at the history for the file you're working on, etc. If you use it as an application platform, you get all the other sweet stuff (which I'm not 100% on, so I won't talk too much about).  I tend to think of the whole thing like this: would you use an external application for a task if the time to context switch was negligable? If so, the emacs mode (magit, gnus, the various shells, the bug tracker integrations, etc.) makes sense. If you wouldn't, either because you already have a system you like or it's not actually a burden to do it the original way, there's still a ton of use from those packages, it's just a subset that actually gets used.  Rambling at this point, but I wanted to get something more explicit out there ;)  Edit: full disclosure, I'm a vim convert to evil-mode, and that experience helps me think of emacs as an application platform with a really good editor (evil), which means I tend to look critically at the other modes and ask if I'd use them as a feature of my editor, rather than as a separate application. Most I wouldn't, but that's just my workflow."
emacs,3axzk9,lygaret,1 point,Thu Jun 25 18:50:18 2015 UTC,I think you're probably on the right track in that I didn't give it enough thought when I just tried to use it as my external diffing tool and that I really didn't learn to use magit properly or with the proper mindframe.  I have been inspired by these comments to give it a fair shake.
emacs,3axzk9,erewok,2,Thu Jun 25 22:25:22 2015 UTC,"Magit is awesome for 3 reasons. It makes everything a little easier, it makes a few things absurdly easier, and it improves discoverability all around.     Just start with Magit-status, pulling, commiting and pushing. There's nothing magic about that part, but it's a nice interface that makes your life a little easier.   At the end you'll get so used to staging and commiting partial hunks, discovering commands without having to Google, and to having a nice interface for everything, that you'll never want to go back.   The stuff that happens between the start and the end is just a big blur where I have no recollection."
emacs,3axzk9,BruceConnor,2,Thu Jun 25 01:41:06 2015 UTC,"If I'm reading you correctly you're still using git from the command line, but having it launch emacs/magit when it wants an editor?  If so, this sounds like swimming upstream.  Overall, it's a git environment, much less a tool to aid command-line git.  I pretty much never use the git command line except to clone.  Mostly it means that all activities have shortcuts that amount to a couple of keys, like having a comprehensive set of aliases in your command line, and things like partial staging and reviewing commits become very streamlined and easy.  Many items, like in logs and commits, are interactive, so from them you can drill down to the logical item it's referencing.  Select a log line to see that commit, select a commit line to go to that point in the file, select a branch name to check out that branch...  So unless I'm reading you wrong, you'd do much better with magit if you saw it as an all-encompassing way to interact with git, rather than a tool to help your command line git.  If that doesn't fly with you, I suspect magit isn't for you.  Learning it is very easy and straightforward because of the hydra-like interface it offers - hit ? to see the keys available, and when you hit a key it'll show you all the options for that.  I use Projectile, and have it by default jump me to a magit-status window when I enter a project ('(projectile-switch-project-action (quote projectile-vc))).  That becomes my default view and jumping-off point for a project.  Works very nicely.  I use ediff for merging from magit - I'm not sure I get your last point/question?"
emacs,3axzk9,fantastipants,1 point,Thu Jun 25 20:12:01 2015 UTC,Your comment and others have forced me to realize I have used magit poorly in the past and that I need to reconsider how I approach it. I think I never properly conceived of it before and it led to frustrations.
emacs,3ayhq8,augmentedtree,1 point,Wed Jun 24 14:55:52 2015 UTC,You can use C-q TAB to insert a tab and M-x c-set-offset should let you change the default indentation level when positioned over the start of the comment.
emacs,3ayhq8,MCHerb,1 point,Wed Jun 24 21:58:05 2015 UTC,That's strange because it indents the line for me fine.  I think your config may be interfering with something  Have you tried using Emacs -q to see if it gives the right result?
emacs,3ay5ka,eu-guy,5,Wed Jun 24 13:11:35 2015 UTC,I use ItsAllText for Firefox. It does everything except close Emacs (why would anyone in their right mind want to do that).  Of course you have to setup ItsAllText to use emacsclient instead of launching a new Emacs instance.  The text in a browser box is auto-updated with each C-x C-s.
emacs,3ay5ka,abo-abo,3,Wed Jun 24 13:30:54 2015 UTC,https://github.com/stsquad/emacs_chrome - there is such thing fit chrome
emacs,3ay5ka,diversionist,1 point,Wed Jun 24 13:18:44 2015 UTC,"This. And when you're opening a textbox to Emacs, you can configure the same keybinding to save it back to the browser, only active when it's really a textbox from the browser:   My keybinding when in Edit server, ss to save and execute to webrowser: (evil-define-key 'normal edit-server-edit-mode-map (kbd ""ss"") 'edit-server-done)"
emacs,3ay5ka,ReneFroger,2,Wed Jun 24 14:04:16 2015 UTC,Or you can use Conkeror for an Emacs like browser experience!  In Firefox there is another neat trick which let you view the Page source in Emacs:  Put this in a script   exec emacsclient -c $@   make this change in about:config   view_source.editor.external > true  view_source.editor.path > path to script above
emacs,3ay5ka,jivatmann,2,Wed Jun 24 15:53:09 2015 UTC,It's very easy to achieve this in pentadactyl/vimperator. I use this feature quite often. Just set a default editor to Emacs and press C-i inside a text field. It's a good idea to set a default editor variable to fire up an emacsclient instead of a new Emacs instance so that it will start faster and you will be able to access opened bufferes.
emacs,3ay5ka,avg_user,1 point,Wed Jun 24 20:58:54 2015 UTC,If you use windows then it's easy to do this with Autohotkey: http://www.autohotkey.com/  Probably there are similar tools for other OSs too.
emacs,3auzq5,kirang89,4,Tue Jun 23 18:49:56 2015 UTC,I've only skimmed it and I'm still an emacs noob so I'd have liked if he mentioned which packages he used to achieve each part immediately after displaying it.
emacs,3auzq5,ThrowawayTartan,3,Tue Jun 23 18:56:55 2015 UTC,I felt the same way too! The links are spread out here and there. It'd been better had he used footnotes.
emacs,3auzq5,thang1thang2,2,Tue Jun 23 19:00:33 2015 UTC,"$$\frac{3}{4}$$ is the depreciated and wrong way to write a fraction in LaTeX. You'll want to use the dedicated math environment \[ \frac{3}{4} \] instead.  (Nerdy explanation: $ and $$ for inline/separated math environments are pure TeX. LaTeX builds upon TeX and so you should avoid using pure TeX whenever possible because you have terribly evil and ugly error messages, things break with more complicated LaTeX packages, and it's not very future proof, etc.)"
emacs,3atpwu,benmaughan,1 point,Tue Jun 23 12:56:45 2015 UTC,For someone who forgets to even use Mark this could be very useful.  Can you do anything with the prior Marks (like navigate to them easily)?
emacs,3atpwu,Neurorational,2,Sat Jun 27 10:48:30 2015 UTC,You can easily move back through the mark ring using C-u C-SPACE. See the Emacs wiki for a function to move forward in the mark ring (unpop mark)  http://emacswiki.org/emacs/MarkCommands
emacs,3aupdf,shwwmy,4,Tue Jun 23 17:37:06 2015 UTC,"Why not use the official GNU builds?  https://ftp.gnu.org/gnu/emacs/windows/  For 64 bit, there is a vanilla compile here:  http://sourceforge.net/projects/emacsbinw64/"
emacs,3aupdf,pzone,2,Tue Jun 23 18:55:18 2015 UTC,"The GNU builds for Windows are generally considered as poor builds, from what I know."
emacs,3aupdf,ReneFroger,4,Tue Jun 23 23:19:26 2015 UTC,What's wrong with it?
emacs,3aupdf,RobThorpe,1 point,Wed Jun 24 00:10:09 2015 UTC,I've been using GNU builds for a while (since emacsw32 stopped updating) and they seem to work perfectly.
emacs,3aupdf,Grue,1 point,Wed Jun 24 13:31:00 2015 UTC,I see.  Perhaps EmacsW32 fading away is a sign it has improved?
emacs,3aupdf,pzone,2,Thu Jun 25 01:22:56 2015 UTC,I followed the instructions here and compiled my own 64bit git emacs.   Easy to do and my first windows compile.
emacs,3aupdf,verdigris2014,1 point,Wed Jun 24 03:45:10 2015 UTC,"Awesome, happy it worked out!  I think that was one of the first times I used MinGW, I was shocked at how much nicer it was to compile Windows binaries with GCC than with Visual Studio."
emacs,3aupdf,pzone,3,Thu Jun 25 01:27:27 2015 UTC,Try this one.
emacs,3aupdf,ReneFroger,3,Tue Jun 23 18:46:14 2015 UTC,"Here's another one (Vincent Goulet's build)   Emacs for Windows Modified is a ready-to-install version of GNU Emacs 24.5 for Windows (released April 10, 2015) with the following additions:   ESS 15.03-1; AUCTeX 11.88; org 8.2.10; polymode and markdown-mode ; Aspell 0.50.3; English, French, German and Spanish dictionaries for Aspell; libraries for image formats PNG (libpng-1.6.12, zlib-1.2.8-2), JPEG (jpeg-v9a), TIFF (tiff-4.0.3) and GIF (giflib-5.1.0) obtained from the ezwinports project; GnuTLS libraries from the ezwinports project (gnutls-3.3.11) to allow Emacs to access web sites using https on Windows; w32-winprint.el, to ease printing under Windows; htmlize.el, to print in color with w32-winprint.el; psvn.el revision 1573006, an interface for the version control system Subversion, modified to include Andre Colomb's and Koji Nakamaru's combined patches to support Subversion 1.7; framepop.el to open temporary buffers in a separate frame; default.el and site-start.el, default configuration files to make everything work."
emacs,3aupdf,jjedMoriAnktah,3,Tue Jun 23 19:06:33 2015 UTC,"Currently my favorite Emacs Windows build is Cygwin's emacs-w32 package. It's a combination of the Win32 GUI parts with Cygwin's POSIX layer, so, unlike previous Emacs packages for Cygwin, no clunky X server is needed. It's 64-bit, living in POSIX means I don't have to deal with most of Windows' brokenness from within Emacs, and it plays very well with all the other Cygwin tools since it uses the same paths."
emacs,3aupdf,skeeto,2,Tue Jun 23 23:51:17 2015 UTC,This is by far the best emacs experience I've had on windows.
emacs,3aupdf,oberlinbsd,2,Wed Jun 24 02:44:30 2015 UTC,"You can use the GNU build or Vincent Goulet's build, which jjedMoriAnktah links to. Personally, I use the GNU build and all of Eli Zaretski's utilities from http://sourceforge.net/projects/ezwinports/ ."
emacs,3aupdf,RobThorpe,1 point,Wed Jun 24 00:09:57 2015 UTC,"Have a look here: http://ergoemacs.org/emacs/which_emacs.html  I use http://semantic.supelec.fr/popineau/programming-emacs.html As it have the most added dlls.  However, since it doesn't have a 'stable' version of 24.4 released and certainly not 24.5,  I overlay it with http://sourceforge.net/projects/emacsbinw64/ which always has the latest build (including 24.5)  snapshot updates as well (If I feel like it, as they are quite stable).  They have been great for me so far.  Vincent Goulet's build is great as well, as jjedMoriAnktah mentions, but haven't used it for a long time and did have to add png dlls when I used it a few years ago. But then again, I didn't know windows settings as much then and could've been my mistake."
emacs,3asbyn,tuhdo,8,Tue Jun 23 02:55:26 2015 UTC,"Neat, thank you for sharing this."
emacs,3asbyn,eric-plutono,6,Tue Jun 23 03:11:30 2015 UTC,I just started using helm the other day and I'm loving it so far. This is a nice improvement!
emacs,3asbyn,CodyReichert,4,Tue Jun 23 03:43:55 2015 UTC,"Nice little improvement indeed. I'm not sure if I'm gonna hold this in my config, because by default you should see the typed words already in the results of the source. So maybe this could polluting the Helm window. But I'm gonna give a try for an once.   However, I also noticed it copied the style of the headers, see an example of this.   Is there any way to make the background black, like in the minibuffer without header styling?"
emacs,3asbyn,ReneFroger,3,Tue Jun 23 09:52:27 2015 UTC,I opened an issue here with the idea of merging the first source header with pattern prompt: https://github.com/emacs-helm/helm/issues/1073
emacs,3asbyn,ReneFroger,2,Tue Jun 23 10:47:54 2015 UTC,"Yes, you can. Check this old thread."
emacs,3asbyn,deadmaya,1 point,Tue Jun 23 10:07:22 2015 UTC,"It changes all the headers, which I don't want.   I prefer to modify the header which uses the prompt from the minibuffer. And let the other source headers unmodified. But I'm also following this on Github. Hopefully there is any solution."
emacs,3asbyn,goofansu,1 point,Tue Jun 23 15:22:36 2015 UTC,"It does not change all the headers. If only hides the top header when you have a single source and show everything as normal otherwise.  This works exactly like you are using Helm, but instead of using the minibuffer, you use the top header line."
emacs,3asbyn,zeRusski,2,Tue Jun 23 15:46:47 2015 UTC,Thanks for including it to spacemacs!
emacs,3asbyn,yrjoelae,1 point,Fri Jul 3 08:44:12 2015 UTC,"Very very useful, thank you"
emacs,3asbyn,ReneFroger,1 point,Tue Jun 23 07:32:46 2015 UTC,@tuhdo have you switched to spacemacs then? How is it working out?
emacs,3asbyn,katspaugh,5,Tue Jun 23 08:26:57 2015 UTC,"Yes I am using Spacemacs, since at the beginning it has quite a large overlap with my old configuration, but with faster loading time, better UI and community configured layers, so I can quickly try something out without even need to manually install relevant packages. For things that are in my own configuration but not in Spacemacs and I think it's useful for everyone, I created a PR. Eventually, most of my personal configuration is in Spacemacs now. For personal stuffs, I use my own layer and I exclude packages I don't need by simply specify the names in ~/.spacemacs file."
emacs,3asbyn,rson,1 point,Tue Jun 23 10:34:50 2015 UTC,Did you /u/tuhdo do any Spacemacs specific configurations to make this work? I had to remove some display hooks in my dotspacemacs/config so that helm wouldn't always open at the bottom:    (remove-hook 'helm-after-initialize-hook 'spacemacs//display-helm-at-bottom)   (remove-hook 'helm-cleanup-hook 'spacemacs//restore-previous-display-config)   Edit: fix user tag
emacs,3asbyn,fantastipants,1 point,Tue Jun 23 11:53:32 2015 UTC,"Yes, I did by redefining the function instead of removing it."
emacs,3asbyn,augmentedtree,2,Tue Jun 23 15:43:57 2015 UTC,"From what I know, Tuhdo is currently using spacemacs. You could also notice that in the demo screenshot."
emacs,3asbyn,klugez,1 point,Tue Jun 23 09:44:03 2015 UTC,Just wow.
emacs,3asbyn,abo-abo,1 point,Tue Jun 23 09:44:27 2015 UTC,This is lovely.  This combined with your previous thread about a minimal helm interface is perfect for me.    I'm a little surprised that the feature was added to use the header line but it was left to the user to hide the mini buffer.  I can't think of a case where you'd likely want both.  Thoughts?
emacs,3aslwu,CauchyDistributedRV,7,Tue Jun 23 04:27:36 2015 UTC,http://emacsredux.com/blog/2015/05/16/learning-emacs-lisp/
emacs,3aslwu,bozhidarb,1 point,Tue Jun 23 05:37:07 2015 UTC,"The manuals really are the best reference. I actively try to avoid moving to google or stack overflow to search for documentation. Having direct access to the manuals from within Emacs is very important.  Elisp buffers, especially, have nice support for M-x info-lookup-symbol which can take you directly to the correct manual page for a symbol."
emacs,3aslwu,creichert,1 point,Tue Jun 23 14:59:38 2015 UTC,"I agree that the Emacs manuals are the best reference; however, I don't think they're the best resource for learning Emacs.  For example, what if I wanted to discover how to extract the line that the point currently lies on? From what I've learned I can use something like:  (buffer-substring (line-beginning-position) (line-end-position))   buffer-substring is described here, while the line- functions are described here. It seems unfortunate that two pieces that fit well together are described in completely separate sections. In addition, line-beginning-position, while being a function that does not move point, is only described in a section related to motions.  (Of course, there's motivation for why, and it makes sense for a reference, but IMHO it does not make sense for a learner.)"
emacs,3aslwu,parolang,4,Wed Jun 24 00:03:45 2015 UTC,There's always https://www.gnu.org/software/emacs/manual/eintr.html in your choice of format. It is should already be installed in your emacs distribution.  There's also http://learnxinyminutes.com/docs/elisp/ for a quicker guide. Copy and paste into scratch for a pretty interactive experience. Now I've gotten into the habit of writing my custom functions in there in lisp interactive mode. I used to find the scratch buffer annoying!
emacs,3aslwu,IceDane,3,Tue Jun 23 10:20:59 2015 UTC,"I do the same thing. The scratch buffer is incredibly handy -- I have it bound to <Leader>-s (using evil + evil-leader) because I use it so frequently. For everything, but probably mostly when writing elisp code and testing it out."
emacs,3aslwu,aabbccaabbcc,4,Tue Jun 23 10:50:18 2015 UTC,"This doesn't cover everything, but I've always found Steve Yegge's ""Emergency Elisp"" post to be very handy: http://steve-yegge.blogspot.com/2008/01/emergency-elisp.html  The other links people have posted I think are all great. The Elisp manual and Elisp Intro pages in Info (not the same thing as the Emacs manual, also in Info) in particular are terrific."
emacs,3aslwu,RobThorpe,1 point,Tue Jun 23 17:23:44 2015 UTC,"This is terrific, thanks! Exactly the kind of introduction I was looking for."
emacs,3aslwu,ReneFroger,3,Tue Jun 23 23:52:16 2015 UTC,"Steve Yegge's article is good, but it was written a long time ago.  All of the things it says about the basic types are covered in the Emacs Lisp Intro.  Emacs has lexical-scoping now if you want to use it. The CL library doesn't need to be used to get Common Lisp functions, instead we can use cl-lib which doesn't pollute the global namespace (though I prefer not to use ""loop""). Cond is optimized at the bytecode level now.  As well as Defstruct from CL the Eieio class system is part of Emacs.  Most tricky is the description of make-variable-buffer-local. The way Yegge describes it makes every instance of a variable names foo buffer local. In every buffer across Emacs, not just the one you're programming a mode for. To get a simple buffer-local variable use make-local-variable. I don't think this differentiation applied when Yegge wrote his article."
emacs,3aslwu,RobThorpe,3,Wed Jun 24 12:22:18 2015 UTC,http://tuhdo.github.io/emacs-tutor2.html
emacs,3aslwu,jivatmann,2,Tue Jun 23 15:27:47 2015 UTC,"The Emacs Lisp intro is very good which Parolang has pointed to https://www.gnu.org/software/emacs/manual/eintr.html . The Emacs Lisp manual is also very good as a reference https://www.gnu.org/software/emacs/manual/elisp.html . Both of these come with Emacs of-course. You can get them by executing (info ""(eintr)"") and (info ""(elisp)"") in Emacs.  Most of the specific questions the OP has are answered in the Elisp Intro. It describes basic data types and functions to manipulate them, different type of function call and so on.  Remember that Elisp is very similar to other lisps. It was based on Maclisp which was a predecessor to Common Lisp. Over the years Elisp has become more similar to Common Lisp. So, it's a good idea to read about Common Lisp too.  The Elisp intro is light on meta-programming facilities. Since Elisp is very similar to Common Lisp though you can read article on Common Lisp on that subject. (Pascal Bourginon's posts on various forums are good sources for understanding the niggly differences between Elisp and Common Lisp)"
emacs,3aslwu,vermiculus,2,Tue Jun 23 11:04:42 2015 UTC,Here are a few additional resources i found useful to learn elisp:  http://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html  https://yoo2080.wordpress.com/2014/07/04/it-is-not-hard-to-read-lisp-code/  https://yoo2080.wordpress.com/2014/07/20/it-is-not-hard-to-edit-lisp-code/  https://web.archive.org/web/20140912224825/http://cjohansen.no/an-introduction-to-elisp  http://ergoemacs.org/emacs/elisp.html
emacs,3aslwu,Mitchical,1 point,Tue Jun 23 23:08:13 2015 UTC,These are all excellent; thanks!
emacs,3aslwu,n2o4,4,Tue Jun 23 23:54:08 2015 UTC,"(info ""(elisp) Lisp Data Types"")  too many to easily count :) (info ""(elisp) Buffers"")  way too many to easily count (info ""(elisp) A Sample Function Description"")  yes: (defun thing (a b &rest l) …) (info ""(elisp) Backquote"")  ` and , are pretty simple once you get the hang of them. try them out :) (defmacro simple (a b c) `(,b ,a ,c))   i don't think reddit is the best place for that kind of documentation.  you should read the elisp info manual: (info ""elisp"")."
emacs,3aslwu,vermiculus,5,Tue Jun 23 04:43:36 2015 UTC,"OP was asking for a book which can answer these kinds of questions, not for the answers to those questions directly. OP has noted that the elisp manual in emacs is not comprehensive enough for their needs."
emacs,3aslwu,vermiculus,7,Tue Jun 23 06:01:37 2015 UTC,"(info ""(emacs)"") =! (info ""(elisp)"")"
emacs,3aslwu,eric-plutono,1 point,Tue Jun 23 08:52:42 2015 UTC,/u/Mitchical ^^^
emacs,3aslwu,z27,8,Tue Jun 23 12:39:17 2015 UTC,"i'm not sure how much more comprehensive you can get than the elisp manual in emacs. every single language feature is documented there – that is the only official source of information on emacs.  /u/CauchyDistributedRV, i've added the info nodes that answer these questions."
emacs,3aslwu,dzecniv,1 point,Tue Jun 23 12:45:38 2015 UTC,"I strongly recommend the link posted by /u/bozhidarb.  As you start to feel more comfortable with the language I'd suggest reading the code of various packages, initially ones which implement a small and/or simple amount of functionality.  Personally I think it helps to read along with real-world code as you're learning a language.  C-h Pin Emacs will lead you to the source code for packages."
emacs,3aslwu,Neurorational,1 point,Tue Jun 23 08:08:12 2015 UTC,"I bought the hard copy of the elisp reference manual, (1100 pages). One can find various versions. Given the size, I preferred the hardcover one on Amazon (parrot cover)."
emacs,3aprkn,augmentedtree,5,Mon Jun 22 14:44:44 2015 UTC,"nlinum provides line numbering, it's fast and works well for large files. That's because it uses jit-lock for the fontification.  It only font-locks the lines on-screen.  This mode is based on linum which doesn't use jit-lock. I think that's why it's slow.  I don't think that calculating offset through the whole buffer is the problem. Emacs often does that. Internally the buffer data structure has a cache of where each line break occurs to make operations like that faster.  You should report it as a bug to the author. It would probably be reasonably simple to compare it's code against nlinum and fix it yourself."
emacs,3aprkn,RobThorpe,2,Mon Jun 22 15:26:02 2015 UTC,"Any source on the cache thing? I find the existence of such a thing a bit hard to believe considering the long lines bug is still a thing. If it exists, then I'm surprised it isn't made use of."
emacs,3aprkn,wasamasa,2,Mon Jun 22 17:41:22 2015 UTC,"By ""the long lines bug"" I assume you mean the very slow performance of files where all the data is on one single line?  Like the XML files some tools generate?  That hasn't been solved, as I understand it most of those problems are because language modes assume that there will be many lines and each line will be short.  They use jit-lock-regions and regex in corresponding ways, but this breaks with long single-lines, they end up scanning the whole buffer.  But this doesn't have much to do with the newline cache.  I should have been more explicit, the cache is of newlines in the buffer, not ones on the screen. It doesn't deal with lines wrapped by visual-line-mode.  It helps Emacs put point in the right place when skipping over very long lines.  See the variable ""cache-long-line-scans"" or ""cache-long-scans"". In the buffer structure it's the field newline_cache."
emacs,3aprkn,RobThorpe,1 point,Mon Jun 22 22:04:13 2015 UTC,Thanks for the reference. Perhaps it's possible to extend it for screen lines as well to end this annoyance once and for all.  The described phenomenon also happens when it's all short lines save for a single long line which is very annoying as it happens once in a while in REPL buffers and renders them inoperable.
emacs,3aprkn,wasamasa,1 point,Tue Jun 23 09:58:39 2015 UTC,"I think it would be difficult. Like many things with Emacs the problem is the high-level code and it's very difficult to fix at the low-level. Many people (me included) write regex with ^ and $ in them. If there's one very long line then those regex will match huge amounts of stuff. Syntax tables do the same thing. Think about a C program that's all on one line, Emacs has to look for ""//"" and then mark the rest as a comment if it finds that. Doing that requires going through the whole line. For jit-lock regions start and end with particular lines. These things can't really be stopped. The regex engine could be faster, but that wouldn't fix the problem entirely.  For REPLs it may be easier to fix it though. When one long line occurs it will make things slow, once. But, once it's been processed and font-locked there's no reason why that should happen again. It is done again because font-locking in REPL buffers generally works the same way that it does for normal editing buffers."
emacs,3aprkn,RobThorpe,1 point,Tue Jun 23 10:52:34 2015 UTC,"Thanks again, if this is the reason for most of these slowdowns, then there's at least hope that it's not that hard to fix for the individual modes."
emacs,3aprkn,wasamasa,1 point,Tue Jun 23 18:04:39 2015 UTC,"I believe the long lines issue even occurs in plain text buffers -- emacs has a problem rendering them. Using visual line mode fixes it for me, which only changes rendering, not the lines code traversing the buffer would see."
emacs,3aprkn,tending,1 point,Fri Jun 26 03:55:05 2015 UTC,"I think it's both. I have some XML files with very long lines. They're slow in fundamental mode, but they're much slower in nXML mode."
emacs,3aprkn,RobThorpe,3,Fri Jun 26 13:23:58 2015 UTC,Maybe avy and especially avy-goto-line is worth a look. See here https://github.com/abo-abo/avy
emacs,3aprkn,ardpp,2,Mon Jun 22 20:54:24 2015 UTC,"They need to calculate the distance from the whole buffer. Not only the visible portion. When you move the cursor up or down, it needs do recalculate every time the whole buffer. So that makes him slow.   And yes, I was struggling with the same problem. Without luck, so I decided to turn it off. Navigating around without visible line numbers is not a big deal, by the way."
emacs,3aprkn,ReneFroger,3,Mon Jun 22 14:54:24 2015 UTC,"Well, it could do just the visible portion. It just doesn't."
emacs,3aprkn,BruceConnor,3,Mon Jun 22 15:00:40 2015 UTC,Why do you need to calculate the distance from the whole buffer for relative line numberings? Just count newlines from point in both directions until you're outside the window.
emacs,3aprkn,hvis,2,Mon Jun 22 17:38:22 2015 UTC,"Indeed. You don't usually need to see the numbers when editing, and when you do want to go to a certain line number, it's better to use M-g M-g."
emacs,3aprkn,lawlist,2,Mon Jun 22 15:00:45 2015 UTC,"At some point, someone may wish to release a minor mode that uses just window-start and window-end and replaces line-number-at-pos with (format-mode-line ""%l"") -- in combination with the post-command-hook and window-scroll-functions hook.  This would make it lightening quick (even for humungous buffers), but anything not in the visible window will not have line numbers, e.g., another window displaying the same buffer at a different position will not have line numbers displayed.  It can be done fairly easily using the following concept for calculating window-start and window-end prior to redisplay:  http://stackoverflow.com/a/24216247/2112489  This method also reduces the number of calls to the overlay function -- thus making it extremely efficient.  I do this with a custom minor mode for drawing line numbers (although not relative) and displaying a thin cross-hair spanning the four window edges."
emacs,3aprkn,ducketh,2,Mon Jun 22 17:35:58 2015 UTC,"If I'm understanding this correctly, it doesn't account for visual lines. Or code folding, for that matter, but in my experience you won't care about folded code when you're doing relative actions.  BTW if I'm wrong, please tell me, I'd love if it were this easy (I'd be using relative linums all the time if they weren't so slow)"
emacs,3aprkn,lawlist,2,Tue Jun 23 02:19:29 2015 UTC,"In the regular version of linum, a wrapped line will have only one line number at the beginning of the line, even though it may be wrapped several screen lines.  I remember putting in a special condition for when the beginning of the line was above window-start.  Folded lines will have line numbers, but the folded portions will not be visible and neither will the line numbers.  The main time-suck comes from the function line-number-at-pos and from placing overlays over the entire buffer from top to bottom.  (format-mode-line ""%l"") only works for visual lines where point is visible, but that is all that is needed for the concept outlined in my comment above -- format-mode-line comes from the C-source code and is lightening quick, whereas the lisp version of line-number-at-pos walks each line one by one from top to bottom of the buffer.  To be honest, I've never used relative line numbers and haven't ever thought about how that might be implemented.  However, I've spent a zillion hours writing and modifying my custom minor mode that uses regular line numbers (and cross-hairs) from just window-start to window-end -- and I've spent time with the measure-time clock to save every tenth to hundredth of a second possible given the constraints of Emacs.  To deal with line numbering each and every wrapped visual lines, if that is what you want, that would require using vertical-motion on each visual-line to gather the data as to the various positions."
emacs,3aprkn,40Cows,2,Tue Jun 23 03:42:04 2015 UTC,"I stopped using linum-relative because of lag -- I was carrying over the j8/k9 to go down 8 lines or up 9 lines, from Vim, but now I use ace-jump to move around more."
emacs,3aprkn,nosami,1 point,Tue Jun 23 02:40:07 2015 UTC,Are you inside a terminal by any chance? Relative numbers causes a full redraw when you move lines. This can be very slow depending on the terminal that you use.
emacs,3aprkn,tending,1 point,Mon Jun 22 15:38:46 2015 UTC,"Nope, X on Linux."
emacs,3aqz61,p1mps,2,Mon Jun 22 20:15:33 2015 UTC,"What is ""emacs-mac""?"
emacs,3aqz61,ccharles,1 point,Tue Jun 23 02:11:17 2015 UTC,this one https://github.com/railwaycat/emacs-mac-port
emacs,3aqz61,parolang,2,Tue Jun 23 08:41:27 2015 UTC,That link says that the repo is retired. I don't use a Mac but I thought OS X users were happy with the official build?
emacs,3aqz61,peter-salazar,1 point,Tue Jun 23 10:26:16 2015 UTC,"Yes, the new repo is at http://www.math.s.chiba-u.ac.jp/~mituharu/emacs-mac.git  The OS X build is fine but it has some issues and that guy wrote patches to fix them. However probably the pasted code issue isn't fixed :)"
emacs,3apwr7,minipump,9,Mon Jun 22 15:28:02 2015 UTC,Mark the region you want to work on. M-x replace-regexp Profit.
emacs,3apwr7,jordonbiondo,1 point,Mon Jun 22 15:37:05 2015 UTC,Huh. Thanks. I always thought it worked only on the whole file.
emacs,3apwr7,phyrne,1 point,Mon Jun 22 15:54:01 2015 UTC,Mapped to M-% :)
emacs,3apwr7,benmaughan,2,Tue Jun 23 13:04:24 2015 UTC,Or C-M-% for query-replace-regexp
emacs,3apwr7,sauntcartas,1 point,Thu Jun 25 12:17:39 2015 UTC,"Without transient-mark-mode activated (which is now the default), you'd need to:   Narrow the buffer to the region you want to replace in Go to the start of the narrowed region if you weren't there already Search/replace Remove the narrowing   I resisted transient-mark-mode for a while, but the list of commands that behaved much more sanely with it turned on got to be too big to ignore."
emacs,3apwr7,to3m,1 point,Mon Jun 22 17:52:52 2015 UTC,"With transient mark mode off, you can do C-SPC C-SPC to get a highlighted region. From C-h k C-SPC:   When Transient Mark Mode is off, immediately repeating this command activates `transient-mark-mode' temporarily."
emacs,3apwr7,sisyphus,2,Mon Jun 22 21:17:18 2015 UTC,M-x replace-string operates on the selected region so if you mark lines 4-25 it will do what you want.  query-replace-regexp to find a replace by regexp: http://emacswiki.org/emacs/ReplaceRegexp
emacs,3aohn8,ThrowawayTartan,2,Mon Jun 22 05:07:04 2015 UTC,"Here's my setup:  https://github.com/sidmitra/emacs.d   anaconda-mode virtualenvwrapper , you need to manually enable M-x venv-workon <venv_name> Pyflakes -- python-pep8 -- autopep8   Should read this for pre-requisites:  https://github.com/sidmitra/emacs.d/blob/master/init.el#L356  I mostly use vagrant now, so a lot of stuff doesn't work well for me with the all the packages being on the guest machine."
emacs,3aohn8,kovak,2,Mon Jun 22 06:20:34 2015 UTC,"Before all, I'd really like to know, what features are you interested by ? (what does vim offer ?)  I started using django-mode but didn't a lot in the end.   Just found python-django on the MELPA repo and it looks neat: quick file navigation per app, static root, template dir etc; managment commands with a break on ipdb WHICH IS NEAT, ... http://melpa.org/#/python-django If that one doesnt find extra management commands (isntalled with django-extensions for example), please ping me because I coded it and didnt make it to djamgo-mode yet (because there is no more maintainer and I need to work it a bit more).  The most important I think is to be all right with python in emacs and file navigation. http://wikemacs.org/wiki/Python There are packages to easily run tests too (nose)."
emacs,3aohn8,dzecniv,1 point,Tue Jun 23 00:14:19 2015 UTC,"django-mode and django-snippets are useful for templates.  There is a Django-related package for EDBI but I've never used it myself; although I find EDBI useful in general, I just haven't used it wrt. Django development.  Finally you might find useful some information about debugging Django software in Emacs."
emacs,3aohn8,eric-plutono,2,Mon Jun 22 06:24:42 2015 UTC,I used this function a couple of years back when I was working on a Django project:  django-pdb
emacs,3aohn8,benma2,1 point,Mon Jun 22 17:18:45 2015 UTC,btw django-mode is looking for a new maintainer.
emacs,3aohn8,dzecniv,1 point,Tue Jun 23 00:04:30 2015 UTC,"No thanks, lol.  I'm already too ""busy"" doing a half-assed job maintaining PHP Mode.  However, I may know someone who would possibly be interested in maintaining Django Mode, so I'll let him know.  Thanks for the info!"
emacs,3aohn8,eric-plutono,1 point,Tue Jun 23 01:25:13 2015 UTC,A few days later: created a wiki page: http://wikemacs.org/wiki/Django
emacs,3anrqf,djgalt,4,Mon Jun 22 00:51:08 2015 UTC,https://github.com/yyuu/pyenv might be useful for you if you do not want to use virtualenvs. emacs integration is available https://github.com/proofit404/pyenv-mode
emacs,3anrqf,cpaulik,1 point,Mon Jun 22 07:44:23 2015 UTC,"This is perfect. I remembered reading about this a while back, but completely forgot about it. There's also a pyenv plugin called register (here) that was essential for getting this set up."
emacs,3anrqf,benfitzg,3,Mon Jun 22 15:10:14 2015 UTC,"Break down the problem. c-h k will prompt you to see the binding, so:  c-h k c-c c-c  This will tell you which function runs when you run this key combination.  Next c-h f to get help on a function. Type in that function, have a dig around. Is there a variable set that contains the path?  Ultimately when you open a .py file that suffix is bound to a mode.  That mode has a function defined bound to c-c c-c. The package has to have some way of knowing what constitutes python 2 vs python 3. AFAIK there is no way to determine this. So annotating your files with # -- mode: python -- and perhaps a local variable which whatever mode you are using uses:  http://emacswiki.org/emacs/LocalVariables  These don't solve it for you but I hope it puts you further down the path to your solution."
emacs,3anrqf,eric-plutono,2,Mon Jun 22 01:28:01 2015 UTC,This is sorta what that stackoverflow post I linked to was getting at. Controlling which repl gets selected when evaluating the python buffer (C-c C-c) actually isn't the biggest issue I'm having. The biggest issue I'm having is just starting a repl (either from a python buffer with C-c C-p or with M-x run-python) and specifying whether to use Python 2 or Python 3
emacs,3anrqf,damn_what,1 point,Mon Jun 22 02:45:00 2015 UTC,"At a glance, via C-h f run-python, it looks like you can give run-python an argument to tell it which version of Python to run.  That may help, as you could create a separate key-binding to run Python 2 or 3, for example."
emacs,3aliiy,parolang,5,Sun Jun 21 11:32:32 2015 UTC,What's with the names subr and subr-x?
emacs,3aliiy,jplindstrom,6,Sun Jun 21 12:59:36 2015 UTC,;;; subr.el --- basic lisp subroutines for Emacs  ;;; subr-x.el --- extra Lisp functions
emacs,3aliiy,xuchunyang,1 point,Sun Jun 21 14:42:57 2015 UTC,How does string-reverse work with Unicode?
emacs,3aliiy,upham,2,Sun Jun 21 17:07:14 2015 UTC,"We're talking about Emacs strings here which are Unicode (in fact, they're a superset of UTF-8).  From reading the code it seems that it reverses multi-byte characters correctly.  However, it doesn't deal with the combining characters.  Incidentally the code is in fns.c and the macros it uses are in character.h."
emacs,3aliiy,RobThorpe,1 point,Sun Jun 21 19:35:09 2015 UTC,"Is reversing strings in Unicode harder then for other encodings? The concept of chars should hold there, too, shouldn't it?"
emacs,3aliiy,Kaligule,2,Sun Jun 21 17:12:12 2015 UTC,"I'd guess combining characters are an issue - if you have ^y, it can't become y^ through reversal. Multi-byte characters are also a bit harder to reverse than single-byte, since you need to keep the byte-order in a character intact."
emacs,3aliiy,hirnbrot,1 point,Sun Jun 21 21:41:09 2015 UTC,"I see, thank you. Unicode will never stop amazing me."
emacs,3aliiy,Kaligule,2,Mon Jun 22 04:44:10 2015 UTC,"Reversing Unicode codepoints is simple, as long as you take into account the underlying representation in memory (32-bit, 16-bit, or 8-bit).  It becomes a lot more difficult when you have to take into account combining characters (as RobThorpe pointed out), bidirectionality, and probably a bunch of stuff that I'm forgetting."
emacs,3aliiy,upham,1 point,Sun Jun 21 21:45:06 2015 UTC,Thank you.
emacs,3aliiy,Kaligule,1 point,Mon Jun 22 04:44:23 2015 UTC,"string-reverse becomes an obsolete alias for reverse from 25.1, the following is how reverse implements reversing string (https://github.com/emacs-mirror/emacs/blob/master/src/fns.c#L1826-L1853):    else if (STRINGP (seq))     {       ptrdiff_t size = SCHARS (seq), bytes = SBYTES (seq);        if (size == bytes)     {       ptrdiff_t i;        new = make_uninit_string (size);       for (i = 0; i < size; i++)         SSET (new, i, SREF (seq, size - i - 1));     }       else     {       unsigned char *p, *q;        new = make_uninit_multibyte_string (size, bytes);       p = SDATA (seq), q = SDATA (new) + bytes;       while (q > SDATA (new))         {           int ch, len;            ch = STRING_CHAR_AND_LENGTH (p, len);           p += len, q -= len;           CHAR_STRING (ch, q);         }     }     }   for a string containing multibyte character, reverse makes use of the length of every character as well."
emacs,3ajpti,parolang,5,Sat Jun 20 21:34:16 2015 UTC,Nice. You may also like the commands js2-refactor provide.  js2r-log-this is a great command similar to yours.  Here is a command I wrote myself to console.log the current function's arguments as an object  Here it is in action
emacs,3ajpti,jordonbiondo,2,Sat Jun 20 23:13:05 2015 UTC,"Yours is definitely better.  Mine is basically the first useful emacs command I've ever written.  But there's a major bug in it...I forgot that object syntax in javascript also uses curly brackets.  I try to print to console at the end of the local ""block"" of code whether it's a function or a loop.  Plus I learned a number of things reading your code.  For instance, I don't have to explicitly concatenate strings to `insert' since it takes several arguments.  I also didn't know about mapconcat before.  How did you make that animated gif of your emacs buffer?  Thanks."
emacs,3ajpti,instant_sunshine,3,Sat Jun 20 23:32:08 2015 UTC,"You'll have a lot of fun with Yasnippet.  Here's how you'd put the current object in a console.log...  # -*- mode: snippet -*- # name: console log object # key: log # -- console.log(""${1:name}"", $0);   In Yasnippet, $0 can be set to wrap around the selected region.  Alternatively you could just type the object name, and have a snippet like...  # -*- mode: snippet -*- # name: console log object # key: log # -- console.log(""${1:name}: "", $1);   BTW if you want to log the arguments of the current function, you can use the snippet above and do:  console.log(""arguments: "", arguments);   ..."
emacs,3ajpti,instant_sunshine,1 point,Sun Jun 21 02:27:02 2015 UTC,I've thought about yasnippet.  Does your yasnippet log the symbol under point like in my command?  I think though for now I really want to try to use emacs lisp because this way I can become more familiar with it.
emacs,3ajpti,jordonbiondo,1 point,Sun Jun 21 11:10:42 2015 UTC,I definitely encourage you to play with Emacs Lisp as much as possible.  It might be a cool idea to add an option to Yasnippet to wrap the word at point.
emacs,3aiji5,timer01,31,Sat Jun 20 15:00:25 2015 UTC,"Customizing the tool all the time useful ? Do little things like that matter in the long run?   Yes, these matter a lot.  Special key-bindings to keep your hands comfortable, colors/fonts/highlighting to keep your eyes happy, indentation/auto-formatting to keep your code pretty, etc.   Nowadays both computers and IDEs are powerful then why not use it?   IDEs are great for some things.  Most features can be assembled in emacs, but it's more of a 'roll-your-own' methodology.  Auto-complete is great, language-modes are a must, lint-like minor-modes are very nice (flycheck for example).  Plus, if you use a more obscure programming language (i.e. not a top-10 language), I feel like emacs is more likely to have a quality language-mode than a typical IDE.  Plus, unlike many IDEs, emacs is free and keeps a level of consistency across tasks that might otherwise take multiple IDEs with different interfaces.   What are the chances you end up using emacs at work? What if I move into management?   IC design engineer here.  Started using emacs over a decade ago while in college.  I use emacs all day, every day.  If you're a STEM student, chances are you'll be using text-editors pretty frequently in your career.   How long will it take until I become as good as any IDE power user?   As long as it takes you to learn any other tool, if you are diligent about always wanting to learn something new.  I've seen people with emacs or fancy IDEs sit there and manually copy/paste with a mouse and key in every edit, and I've seen people do incredibly quick work with Notepad and search/replace.  You can do anything you want with emacs (you might have to spend half an hour on the internet and write some Lisp to do it though) - you just have to be willing to think outside the box and learn a new trick.  I always put my latest learned trick on a post-it on the bezel of my monitor until it's committed to memory.   Do things like orgmode matter when there is office tools and gui for latex?   I've never gotten into orgmode - I still like a pencil and scrap paper to manage my todo-list.  Your professor/employer/team may dictate how you do these things though - bug/issue trackers, must use Exchange/Outlook, etc.  emacs is not the right tool for all jobs, but don't expect your employer to pick the right tools either :)   Will it improve the quality of my life in a significant way? If you ""live to work"" and you like the emacs methodology, then yes.  If you ""work to live"", then no, but it may improve the quality of your work.  I much prefer the latter.  Who should care about it and who should ignore it?   You, and only you.    All of this holds true for emacs, or vi, or whatever.  Use whatever makes your work-flow the easiest/quickest/least-stressful.  Open-source editors like emacs/vi are nice because they tend to work across platforms.  On a daily basis I use Windows for email/web/Office applications, but always have VNC open on a Linux machine and end up SSH'ing around various networks with various OS flavors and emacs versions.  At home I use OS X.  I like that (after a bit of fiddling) my emacs configurations work pretty seamlessly across all these flavors (different OSes, GUI and terminal, emacs 21.? - 24.4).  The same cannot be said for Visual Studio.  edit: formatting"
emacs,3aiji5,acr4,6,Sat Jun 20 15:56:21 2015 UTC,"What are the chances you end up using emacs at work? What if I move into management?   IC design engineer here. Started using emacs over a decade ago while in college. I use emacs all day, every day. If you're a STEM student, chances are you'll be using text-editors pretty frequently in your career.   Electrical engineer here and everyone I've worked with uses either emacs or vim. I only know one STEM guy who doesn't use emacs or vim and that's because he is a pure java/c# dev. I even know some humanities people who use it on a regular basis."
emacs,3aiji5,flarkis,3,Sat Jun 20 19:54:17 2015 UTC,I know plenty of EE/CE people who use other stuff (e.g. sublime)
emacs,3aiji5,jringstad,1 point,Sat Jun 20 20:36:26 2015 UTC,I work in Electronic engineering myself. I'm the only person in my group who uses Emacs. Many of the others use Sublime though. IDEs are much less useful to EEs.
emacs,3aiji5,RobThorpe,1 point,Sun Jun 21 17:46:37 2015 UTC,"I agree.  About half of my work is in Verilog/System Verilog, then another quarter in C/C++, with the balance split between Perl, tcl, custom languages, etc.  Not really much use for a bonafide IDE.  If I lived in <insert must-have Javascript clone of the month here>, an IDE would be awesome.  But traversing huge systems of intermingled code (often in relatively obscure languages) makes emacs or vi (or some other open source, extensible derivative) the right choice, in my opinion."
emacs,3aiji5,acr4,9,Mon Jun 22 02:35:33 2015 UTC,"I'm a happy Emacs user but I think your questions are very good and totally valid.  Of course people in this forum will argue that Emacs is superior to other tools and that the (considerable) investment of time is worth it.  However, the truth is that Emacs is not for everyone.  I'm a researcher and that means that 90% my of work consists of manipulating text: I write emails, research articles, code for data analysis, etc.  So for me it is crucial to optimize the task of producing text and Emacs allows me to do this.  Also, doing all those activities in one application gives me a consistent interface and when I discover a new way to improve text editing, all my daily tasks benefit from that, not just one.  Many of my colleagues are impressed when they see me working in Emacs because to them it looks like magic.  However, when they ask whether I recommend switching to Emacs, I hesitate because I know how much effort it was to make myself feel at home in Emacs.  The truth is that in the time that it took me to learn Emacs I could have written several research articles.  Will my investment in Emacs eventually pay off, I can't tell.  What I can tell is that my work has become so much more pleasant with Emacs.  When I don't like how some task is done in Emacs, I simply change it.  Emacs adapts to my way of thinking in contrast to other tools which require me to adapt to what their developers thought would be the best way to do things.  That's why working with Emacs is a liberating experience and a lot of fun, and I believe that this will ultimately also be reflected in the quality of my work."
emacs,3aiji5,tmalsburg2,8,Sat Jun 20 18:17:33 2015 UTC,"A portable editor like Emacs or Vim can stay with you across jobs and programming environments.  You can't say that about IDEs.  I've had jobs where my desktop systems were IRIX, Solaris, Windows, Mac and Linux.  Emacs works well on all of them.  An IDE tends to be great for coding in particular languages.  In many jobs you will be coding in multiple languages.  If you code in an IDE for some language it doesn't understand you basically have a vanilla text editor.  I generally find the uniformity of editor a win over the power of an IDE in a particular language.  That said, I have mostly programmed in C++ for the past 20 years.  The one year I programmed in Java I did use a Java IDE for compiling, debugging, and code browsing.  First thing I did, though, was add a ""open this file in Emacs"" button to it for when I actually needed to do serious editing.  For example, the IDEs formatting capabilities for code comments sucked in comparison to Emacs."
emacs,3aiji5,ForkInBrain,2,Sat Jun 20 16:27:42 2015 UTC,"Existing IDEs are often better than emacs in some ways, I've found. Code browsing, code completion and refactoring are usually at least slicker and quicker to set up, if not outright better, than they are in emacs. The text editing is usually pretty ropey (e.g., Visual Studio and Xcode won't even word wrap comments without a plugin, and there's no keyboard macro support), but overall that's never bothered me too much. On most large team projects I've worked on, easy and reliable code navigation/completion/refactoring has proven more important day to day.  For languages there's no existing IDE for, though, emacs can be turned into something perfectly tolerable with very little effort. It's pretty easy to add support to exuberant ctags for custom languages (see, e.g., http://www.reddit.com/r/emacs/comments/2mnmhr/use_simple_regex_to_extract_imenu_items_in_js2mode/cm60d9c). Now you can generate emacs-friendly tags tables, and you've got basic code browsing. (Then squint a bit, and you could even imagine dabbrev is code completion!) Then ten minutes with elisp and you'll have a major mode with comment-dwim, basic syntax highlighting, imenu support, and (where applicable) compilation error regexps. A bit more effort, and you'll have auto indent as well.  I've done this several times, for various languages. The alternative is often stumbling along in notepad++, or Visual Studio, or whatever, pretending your custom language is C (so you at least get the right syntax highlighting for comments), and navigating code by doing repeated file searches. Even if you only think in terms of making the daily grind go a little bit more smoothly, the time spent on putting together a usable emacs setup gives a good return on investment."
emacs,3aiji5,to3m,5,Sun Jun 21 00:01:55 2015 UTC,"i certainly hope not. every keystroke saved is a keystroke earned.  programming is incredibly repetitive.  we seem to have no problems writing software to solve business problems but we for some reason feel reluctant to write software for ourselves?  doesn't sound right to me.  this doesn't mean you can't write tools in other editors/IDEs, but this is one area that emacs really excels at. i use it every day.  IDEs are untouchable when it comes to languages like java/c#, but for dynamic languages editors are extremely capable.  also, contrary to propaganda, you don't have to live in emacs for everything.  yes, it comes with a web browser, but i'll use a real one thank you.  use the best tool for the job. if your point of comparison is java, then probably 100 man years, because that's probably how much resources have been poured into eclipse, intellij, netbeans, etc.  if it's things like javascript, html, xml, text editing type things, then all an IDE brings is bloat, so doing even simple tasks will take an extra 1 second when it should take 100ms.  it's just a different way to capture notes and organize your life.  if you're happy using office, that's fine too.  depends.  if you enjoy tinkering with stuff emacs is great, because it's never ending.  if you want to just install something and be productive immediately you're gonna have a bad time.   and the last question i'll answer longer because contrary to what others will say, i would recommend to avoid it.  sublime and atom set a very high bar for new users.  you install it, and you can be immediately productive with it.  if you need to do something special, there's a plugin you can install.  you can tackle the majority use cases for an editor very easily.  when you start hitting the limits of your editor, when you feel like it's actually slowing you down, that is when you should start looking at emacs.  until then, you're unlikely to appreciate the benefits."
emacs,3aiji5,hyperbling,8,Sat Jun 20 15:42:45 2015 UTC,"Customize it once and you're done for the rest of your Emacs career (unless something elementary changes). Why waste system resources just to write some text? (Also, can your IDE read your e-mail?) I already do. And managers can use Emacs to write text too. It even supports LaTeX (PDF output). A week. Yes, they do, because you are faster in Emacs as you don't have to waste time moving your hand to the mouse and waiting for the GUI to appear. Yes, it will. You should care, Linux n00bs with a GUI fetish should ignore it.   Yes, it's some kind of a learning curve but it will pay out as you can use Emacs with all programming languages, most markup languages and on all relevant platforms."
emacs,3aiji5,rhabarba,19,Sat Jun 20 15:17:28 2015 UTC,Customize it once and you're done for the rest of your Emacs career (unless something elementary changes).   We have very different habits.
emacs,3aiji5,MonsieurBanana,7,Sat Jun 20 17:35:04 2015 UTC,I've got a GUI fetish! Which is why I use emacs. The GUI is great.
emacs,3aiji5,mszegedy,1 point,Sat Jun 20 18:20:00 2015 UTC,A week would be an ask for someone who didn't know any elisp wouldn't it?
emacs,3aiji5,__baxx__,1 point,Sat Jun 20 17:28:56 2015 UTC,Reading and understanding elisp would work.
emacs,3aiji5,rhabarba,2,Sat Jun 20 17:29:57 2015 UTC,"Reading and understanding elisp would work   Yes I get that this would work, what I was saying was that being able to read and understand this within a week (alongside other commitments) seems like a lot to ask."
emacs,3aiji5,__baxx__,-3,Sat Jun 20 18:04:23 2015 UTC,?
emacs,3aiji5,__baxx__,1 point,Sat Jun 20 17:35:56 2015 UTC,?
emacs,3aiji5,rhabarba,-3,Sat Jun 20 17:36:54 2015 UTC,?
emacs,3aiji5,__baxx__,3,Sat Jun 20 17:45:05 2015 UTC,Could you elaborate please?
emacs,3aiji5,rhabarba,2,Sat Jun 20 17:46:08 2015 UTC,"yeah sorry got a bit carried away there, have replied to the OP"
emacs,3aiji5,__baxx__,2,Sat Jun 20 18:04:31 2015 UTC,"Baxx, please. Look at your reactions in various topics, not this only one. You are often replying with what comes up in your mind. Please  consider how you could contribute to the community with your reactions, instead replying like this is a @random chatroom."
emacs,3aiji5,ReneFroger,2,Sat Jun 20 19:39:21 2015 UTC,i thought long and hard about this response: http://i.imgur.com/bQ645dy.jpg
emacs,3aiji5,vermiculus,1 point,Sun Jun 21 00:21:02 2015 UTC,"sos, basically i think a week is a big ask for someone to learn elisp as seemed to be implied."
emacs,3aiji5,__baxx__,1 point,Sat Jun 20 19:42:59 2015 UTC,"on a more serious note, what is reddit but a place to talk about what comes to your mind? i view reddit as a platform for structured discussion. it's certainly not a chatroom – chatrooms have a flat structure with a comparatively small window of opportunity for reactions. (you also cannot usually edit your messages once they're sent.) in this way, i see reddit as a cross between a chatroom and a mailing list: it's a place for being silly, but also a place for real discussions like this – it's not either/or.  tl;dr: reddit can definitely be a #random chatroom."
emacs,3aiji5,vermiculus,6,Sun Jun 21 13:06:35 2015 UTC,"Not at all... Emacs lisp is a fantastic language for this kind of job, and learning any lisp will make you a better programmer (even when you're not using lisp!)"
emacs,3aiji5,wdouglass,3,Sat Jun 20 15:33:20 2015 UTC,"It's not required to customize it, most things work automatically (even most plug-ins don't require any changes since package-install was introduced). The only frustrating thing was my lack of experience with Lisp dialects. But it's getting better.  Mine's here."
emacs,3aiji5,rhabarba,3,Sat Jun 20 15:47:15 2015 UTC,"I loved emacs at first sight. Then went into Eclipse fanatism. Tried to extend Eclipse, came back to Emacs.  IDEs are resource hog (ram, space, packages), aren't very ergonomic, arent easily extensible, they do have very nice debuggers though which is worth a lot on the field."
emacs,3aiji5,agumonkey,2,Sat Jun 20 16:18:19 2015 UTC,"Depending on the language, you can debug very nicely in emacs as well. E.g. pdb for python, gdb for C/C++, etc. Comes with interactive line stepping, etc."
emacs,3aiji5,kraml,1 point,Sat Jun 20 22:09:43 2015 UTC,"As far as I like *db, it's less comfy than IDE debugger GUIs. I found Emacs gdb presentation fragile and I don't think you can dig as easily in stack traces, watches etc etc"
emacs,3aiji5,agumonkey,3,Sun Jun 21 21:20:46 2015 UTC,"I'm a .NET programmer by trade, so I tend to stick with Visual Studio, but I also use Emacs on the job because I love org-mode. Org-babel makes literate programming possible and easy, which sometimes comes in handy.   I'm also a sci-fi author, and I do my drafts in plain text. Org-mode is great for not only outlining, but drafting. And it works everywhere."
emacs,3aiji5,starbreakerauthor,1 point,Sun Jun 21 21:22:58 2015 UTC,"I'm ALSO a .net programmer by trade, and also a huge fan of emacs.  Used to be a fan of sublime, but , wanted something free and extensible with a large community.  And Orgmode.  My god, OrgMode.    I'd be curious, on a side question, do you have a blog dictating how you write using emacs?  I'm a writer myself, and right now, I'm just using emacs as a text editor, but I suspect I could do so much more ;D  Also, with the name like Star Breaker, you have my attention :D"
emacs,3aiji5,Graeme-Lion,1 point,Sun Jun 21 00:18:30 2015 UTC,"I haven't really bothered to explain my plain text work flow in detail. I use Emacs as my editor with org-mode for outlining. I've been drafting with Markdown because I used to use Sublime Text.   I use the filesystem to organize my work; each book gets its own directory, with a subdirectory for each chapter. Every scene gets its own file in ${number}.${charactername}.markdown format. Moving a scene is as easy as issuing the appropriate mv command.   I put the book together using a shell script that relies on the cat command, and convert to other formats with pandoc. I usually send my work to the publisher as an ODT file since Word and LibreOffice can read it and the editors aren't used to working with plain text.  If you're interested in my work, check out Without Bloodshed by Matthew Graybosch."
emacs,3aiji5,starbreakerauthor,3,Sun Jun 21 15:07:55 2015 UTC,One thing I like about emacs is that the basic interface has not changed in decades. One of my peeves with Visual Studio was that it seemed like an entire UI do over every new release.
emacs,3aiji5,making-flippy-floppy,2,Sun Jun 21 17:34:13 2015 UTC,"I find Emacs useful and use it every day. There are new text editors that could one day soon make Emacs obsolete: Atom and Lightable, but boy are they not there yet.  I like not having to remove my hands from the keyboard. I would say though that for Java/C# projects I prefer an IDE like Intellij.  I use Emacs for Javascript, Rust, C, and every other language that isn't Java or C#.  I am not an Emacs expert. I wish I was. Most key chords I simply don't use or care to use. However,I love it because it is useful, extensible, and free."
emacs,3aiji5,w8cycle,1 point,Sun Jun 21 02:33:42 2015 UTC,I'd never heard of Light Table before.  I think it's awesome it uses Clojurescript.  Lisp really is ideal for text editing.
emacs,3aiji5,pzone,2,Sat Jun 20 15:48:21 2015 UTC,"I will not respond to each bullet, but will respond to the general question:  I do, because emacs has abstract enough concepts that those don't get in my way - usually I had to learn the ways of the IDE I used, with emacs it is the other way round - I shape it the way I like.  To put it other way, I used to use Eclipse and KDevelop, but those I'd use as a simple editor anyway. With emacs, I was up and running in 2 days with simple settings and it just fit my philosophy (the same way I feel about i3wm). The rest of the time I tune emacs to fit me entirely. This didn't happen before - customizing shortcuts and colors is simply not enough, yet this is the maximum you get from other editors/IDEs."
emacs,3aiji5,volca02,2,Sat Jun 20 16:23:04 2015 UTC,"Here's some more questions for you: Do you believe the freedom to study, modify and share software is important? Emacs is the best at many things, including breadth of programming language support, largely because it has those freedoms baked into it since it began in the 70s. Do you believe a company will act in your interests without giving you those freedoms? A proprietary ide company might do most things in your interest, but others which are deeply and strategically against your interests, and they DEFINITELY choose to not do things which are in your interest, when they have the opportunity to do something else which is slightly less in your interest but also makes them more money.  https://en.wikipedia.org/wiki/Embrace,_extend_and_extinguish. If that makes sense, well you have vim and emacs and eclipse, and some ides which despite being open source, have some fundamental problems, like very limited functionality, or jetbrains code which is designed to be a demo for a proprietary product.   Eclipse, you may like it. Compared to emacs, I find it overly complicated, poorly designed, it bugs me that the core development is mainly done by a conglomerate of IBM and a few companies and is overtly against free software (http://www.gnu.org/philosophy/free-software-for-freedom.en.html), for example, they wrote their own gpl incompatible license, (the license used by ~95% of debian packages), they actually have a eula which restricts their software beyond their open source license (which is so rare, wikipedia claims eulas are only for proprietary software), and it's popularity in the past few years seems to be waning in comparison to vim/emacs/jetbrains."
emacs,3aiji5,oheoh,1 point,Sat Jun 20 20:07:25 2015 UTC,"Embrace, extend and extinguish:       ""Embrace, extend, and extinguish"",  also known as ""Embrace, extend, and exterminate"",  is a phrase that the U.S. Department of Justice found  and was used internally by Microsoft  to describe its strategy for entering product categories involving widely used standards, extending those standards with proprietary capabilities, and then using those differences to disadvantage its competitors.     Relevant: Microsoft Java Virtual Machine | J/Direct | Appeal to fear | History of monopoly   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Call Me"
emacs,3aiji5,autowikibot,2,Sun Jun 21 03:22:29 2015 UTC,Seein is believing. Have a look at my old comment to see what Emacs is capable of.
emacs,3aiji5,tuhdo,1 point,Sun Jun 21 03:23:32 2015 UTC,"Also even if you end up not using Emacs much in the long run, learning it will make you better at other things. Just like learning other programming languages will make you better in your working programming language. The main point in Emacs (and also Vim) is increasing your productivity. I'm a huge Emacs fan, but got badly spoiled by Eclipse."
emacs,3aiji5,rcoacci,1 point,Sun Jun 21 04:29:07 2015 UTC,"Customizing the tool all the time useful ? Do little things like that matter in the long run?    Customising the tool to suit your needs is like compound interest. Invest 5 minutes to improve a workflow you use daily today and it will pay off in a few months. In a few years you'll have saved a lot of time and hassle. I add a new thing to emacs/change some setting/keybinding/write some elisp every 2-3 months (been using emacs for more than 10 years, I've used only emacs for all my tasks for a month in the past, too)    Nowadays both computers and IDEs are powerful then why not use it?    Ahm? Emacs works in the computer, what's the point? Re: IDEs. What IDE, exactly? I'm a ""polyglot programmer"" (this seems to be a buzzword lately, btw.) More precisely, I usually do full stack stuff or, at least need to be able. So, I write almost at the same time go, javascript and HTML. Hence, I use only one editor, with the same set of keybindings and peculiarities. What IDE would I use for these 3 at the same time? And keep in mind I say IDE as you do. SublimeText is not an IDE, is also an editor.   What are the chances you end up using emacs at work? What if I move into management?   What's the matter? I've used emacs for 10 years. 6 of them were working for a university (nothing beats emacs for LaTeX, once you install AuCTeX). The other 4 I've been working as a freelancer, working for a main company. I used gnus, then mu4e as mail client. I wrote all my documents in Markdown. I programmed PHP, Go, Javascript, Awk and many more languages in only emacs. The only thing I didn't use it for was SQL management because Sequel Pro is handier.    How long will it take until I become as good as any IDE power user?    I'd say approximately the same time it took them. The thing is, once they are a power user of their IDE; they are constrained by it. A good Java IDE is a good Java IDE. Once you are proficient with emacs you are proficient with an endless amount of IDEs and use cases.   Do things like orgmode matter when there is office tools and gui for latex?   AuCTeX is the best way to edit TeX. If only for preview-mode. Org mode is much more than just a way to edit: if you get used to it you'll be able to do much more than with any other ""list thingy""    Will it improve the quality of my life in a significant way?    Huh? Emacs is just a program. Once you get to use it in a proficient way, you'll work better than your peers, but you'll only know when you are close to one. In your day to day you'll just work, in your own way.    Who should care about it and who should ignore it?    Huh? Anyone can learn to use emacs/vim/acme/any other power editor. The more plain text you need to write (code, Markdown, LaTeX...) the more useful emacs/vim/acme/etc is. So, someone who doesn't write shit on their computer don't need to worry. Also, if you are in a deep Microsoft Office environment, you'll have to switch a lot. Regarding keybindings, once you know them by heart they won't interfere with other programs."
emacs,3aiji5,rberenguel,1 point,Sat Jun 20 15:33:49 2015 UTC,"For LaTeX, we are a quite a ways from a true GUI. LyX uses LaTeX as a backend and uses its own language, a spiritual variant of SGML, for document representation. LyX is not a GUI for LaTeX.  …but we're working on it :) LaTeX3 will make this a possibility, though I still doubt it will receive mainstream attention."
emacs,3aiji5,vermiculus,1 point,Sat Jun 20 19:25:34 2015 UTC,"Customizing the tool all the time useful ? Do little things like that matter in the long run?   meh. They're not super-important. They do add up, but you do need spend time researching and actively customizing. ""Good defaults & customizability"" > ""good customizability"". As a long-time emacs user, emacs is unfortunately most definitely not in the former category.   Nowadays both computers and IDEs are powerful then why not use it?   No reason not to use IDEs if you're using a language/editing a format that is supported by said IDEs. Sometimes you won't, and when you don't, it's nice to have a good text-editor by your side. I think purely the agility of editing text is poorer in IDEs than in editors such as emacs and vim, but powerful language-specific features like ""refactor this"", ""find subclasses of this class"", ""find implementations of this virtual method"", ""find users of this type"" et cetera that just work make more than up for it. Text agility is not really that important after all, although it feels good.   What are the chances you end up using emacs at work? What if I move into management?   You typically can use whatever you want at work, some places force you to use specific IDEs, but even then you might still use emacs to edit other stuff like text documents, data fixtures etc. I don't think this would be greatly affected by moving to management? If you stop coding and doing systems-administration-stuff, you probably won't need either an IDE or a text-editor as much as a word processor such as word, depending on what your company expects you to use.   How long will it take until I become as good as any IDE power user?   That question can't really be easily answered, the two are more complementary and it depends on the use-case. Will you ever be as good at editing .ui files in emacs (editing the XML) as someone who uses QtCreator to lay the .ui files out graphically, who can never make a syntax error or forget an include? Probably not. Purely for programming? It doesn't really make much of a difference. For exploring large codebases, IDEs are routinely better than text-editors such as emacs. While you can cobble together an IDE inside emacs that allows you to navigate projects, browse C++ codebases by symbols, uses, inheritance etc, automatic background compile-error-checking, these are typically less polished or broken compared to the ones a good IDE gives you, require a huge effort to assemble, or falter when presented with a 10MLoC codebase (even though some emacs purists might try to convince you otherwise.)   Will it improve the quality of my life in a significant way?   Depends on what you do, but yes, it might.   Who should care about it and who should ignore it?   If you do a lot of programming in many different languages, systems-administration stuff (editing text-files via SSH) or editing text-documents like data fixtures, config files et cetera (in short, areas where IDEs typically fall short because you're not using their ""native language"") then having a quick, agile text-editor that can be used remotely through SSH is a boon."
emacs,3aiji5,jringstad,1 point,Sat Jun 20 19:31:06 2015 UTC,"Customizing the tool all the time useful ? Do little things like that matter in the long run?   I've been using Emacs for, hell, almost 30 years now. I have never customized it very much. I've also used IDE's when they're more appropriate. Even when in that environment, I still find emacs useful because there are things that stock emacs does that no other editor does that are useful to me. I've also tried other editors, they're prettier, but after awhile, I inevitably end up back in emacs because the other editor isn't cutting it for me.  BTW, when I started using Emacs, I knew how to type, save my files and exit the program. That's all you really need to start using any editor. The rest you figure out when you need it.   Nowadays both computers and IDEs are powerful then why not use it?   If you're more productive using an IDE with a given language then by all means, use it.   What are the chances you end up using emacs at work? What if I move into management?   The odds that I use Emacs at work are precisely 1.0. If you move into management, then you certainly won't use an IDE. You might find uses for Emacs though, because it does so many things.   How long will it take until I become as good as any IDE power user?   How smart/hard working are you?   Do things like orgmode matter when there is office tools and gui for latex?   Personally, I find org mode is handy for keeping todo lists. You might find it more or less useful, but you won't know until you try it.   Will it improve the quality of my life in a significant way?   I would say that your quality of life would have to be pretty low for an editor to make a difference in it. So, for your sake, hopefully not.   Who should care about it and who should ignore it?   Anybody who wants to care about it should. Anybody who wants to ignore it should."
emacs,3aiji5,billrobertson42,1 point,Sat Jun 20 20:32:22 2015 UTC,"I would say that your quality of life would have to be pretty low for an editor to make a difference in it. So, for your sake, hopefully not.   I feel bad now."
emacs,3aiji5,popo37,1 point,Sun Jun 21 04:26:12 2015 UTC,"Meh, don't let my obnoxious comment get you down. If you're passionate about it, then sure it could make a difference."
emacs,3aiji5,billrobertson42,1 point,Sun Jun 21 09:30:10 2015 UTC,"I'm in no way an Emacs expert. I first used it in the 90s and thought there were better editors around then. The operating system i used it on then no longer exists. I have since used it on other operating systems that no longer exist. Emacs is still around, though, and I'm still learning!"
emacs,3aiji5,davemee,1 point,Sun Jun 21 17:44:25 2015 UTC,"Here's an overview answer: investing time in learning emacs is not wasted for a number of reasons. It's not going to go away. There are too many people who use it and improve it every day. The current version number alone (24.x) should tell you how long it's been around.   It's like this solid constant in the ever-changing world of tech. Part of the reason - perhaps the only reason - that technology is frustrating is because it changes so often. We humans are motivated by getting good at our work, our crafts and our day to day work. When stuff changes its disruptive. But get good at emacs and you have this familiar environment within which to work that won't change arbitrarily next year when the vendor goes under or gets bought or changes the interface for no reason at all. All of those things have happened to me with IDEs.   I am a writer and a programmer and a sysadmin and emacs lets me work within the same environment with emacs' view of the world and consistent concepts of navigation and editing. Time spent practicing with it, configuring it and learning more about it ten years ago is still helping me now as it will in 2025.   Let me finish by answering one of your questions specifically:   How long will it take until I become as good as any IDE power user?   The very best emacs users are at least 10x more productive than an IDE power user can ever be. Have a look at /u/tuhdo's gifs of him navigating 40Mb C source code files or zooming around the Linux kernel source tree and then ask yourself whether this is even possible in an IDE. I'm not saying they don't have their place; they do. But I find them limiting."
emacs,3aiji5,redrick_schuhart,1 point,Sun Jun 21 08:28:24 2015 UTC,"I use it a lot. Here are my reasons: * no-window mode: I edit a lot via ssh sessions on different servers and it's really nice to have basically the same environment inside a terminal. I also use full emacs over sshfs, but in some cases it's more of a hassle, for instance a lot of my files are on a server that I only can connect to via a VPN which is sometimes not very stable. * I write in different languages over a couple different projects. Some of them have dependencies or build systems that make it hard to manage in an IDE * the customizability is a plus, though I have to say I only use a tiny bit of it * it's fast compared to most IDEs * my opinion is, that you learn more about programming if you have to do more ""by hand"". Obviously that's not true for everyone and every language."
emacs,3aiji5,M2tB,1 point,Sun Jun 21 12:35:02 2015 UTC,"Hey ! Legitimates questions.  1 and 3. about customizing the tool and IDEs.  I love to customize my emacs and I don't like IDEs because doing so teaches me things than IDEs hide from me. So while I customize my emacs I become a better hacker amd programmer too. I learn about unix tools, a new language, and intricacies of programming languages. And then you'll start writing your own tools.  Basic example: the ""compile"" button. On an IDE it's a button you click and the action is preconfigured. To change it you have to click and click to change a setting. With emacs the default action of ""M-x compile"" is ""make"", which isn't always a good option. So for a language you change it with the name of the executable (say ""python + file name) and write it in you config file. You know what's happening and you know where it is. Seriously, as a student I didn't undestand Eclipse. Some students keep clicking on Compile and are unable to run a java program in the terminal.  Other examples: you want to improve the selection of files and you'll use git-ls or something else, to grep effectively you'll try the platinum searcher, you'll learn about semantics of a language to write completion or refactoring tools, you´ll learn how to do whatever you want with emacs til reading emails, managing files and so on."
emacs,3aiji5,dzecniv,1 point,Sun Jun 21 12:45:31 2015 UTC,"Editor like Vim or Emacs have an advantage. They could be launched inside a terminal. On your local machine and on remote.  For instance my current setup:  iTerm + tmux + tmuxp + emacs + mosh.  1) open iTerm go to project folder 2) run tmuxp load projectname.yaml it will: run tmux with few already prepared windows (i.e. tabs inside terminal): editor (emacs/vim), command line with enabled virtual environment, connection to the database, and connection to remote machine.  So i have all required tools just in one terminal box, w/o requirements to use mouse or trackpad to move around it, i wish i could have a browser inside to reach nirvana.  I also still use Sublime 3 and Atom sometimes.  P.S. Btw switched few years ago to SublimeText from emacs with reason ""i just want everything work"", since i tired to setup and configure my editor. But fortunately now there is is bunch of already prepared packs featured with packages repos and auto-installers for vim and emacs."
emacs,3aiji5,istinspring,1 point,Sun Jun 21 15:44:43 2015 UTC,"I used vi/ed/sed for many years via terminal. Had to use emacs in work situation, a looooong time ago. I prefer vim for quick/dirty jobs, but emacs for large projects. IDE are OK, but I have found that often they get in way of doing what I want to do quickly, and I revert to emacs. Doesn't take long to become a reasonable user, practice to become a power user, just like learning to touch type."
emacs,3aiji5,ozhank,1 point,Sun Jun 21 23:17:11 2015 UTC,"The reason I invested time into Emacs is because it can do so much... converting my workflow to fit inside Emacs ended up saving me a lot of time because I use the same interface for everything.  An IDE is great for software development, but emacs can do so much more. Reading (and creating) pdfs, email, calculator, IRC, shell, task management, etc.  The most common misconception about emacs is that it's an IDE or a text editor. It is neither. It's a fully programmable lisp environment."
emacs,3aiji5,aport,1 point,Mon Jun 22 08:41:59 2015 UTC,"I've been using Emacs for over 20 years, and merely thought of it as an awesome text editor. A year and a half ago I got turned on to org-mode and other tools that it supports and now think of it as ""A platform for text-based applications, including a text editor""  To me, comparing it to other text editors is incongruous."
emacs,3aiji5,jtgd,1 point,Mon Jun 22 23:35:03 2015 UTC,"I'm an emacs newbie (converted from vim a year ago). Here are my answers:   Does customizing the tool matter in the long run?   Having used it for ~1 year, I can't say much about the long run but I would say that it does. Both vim and emacs have the advantage that they can be repurposed to be editors for just about any programming language/environment/platform. They can't beat a good IDE (e.g. IntelliJ) though.   What are the chances you end up using Emacs at work?   Slim. I personally prefer to use the best tool for the job, which at the moment happens to be emacs (personal coding, not work).   Emacs or IDE?   Try to get Emacs up and running for whatever language/environment I need. If it's lackluster or too painful to set up, I'll pick the IDE.   How long will it take for new users to become really good at it?   This is one place I think emacs has a slight advantage over vim. Both are esoteric, but I found emacs a lot easier to get up to speed with. It also helps that emacs has a built-in package manager and a decent extension language (I know I know elisp is the devil-spawn but let's not forget vimscript). I'm a year in and still don't consider myself ""very good"" at it, just good enough. I'd predict that it would take at least four years to get to that level.   Org-mode/Latex or Office?   Office at the moment. I do plan to try out the former sometime soon.   Who can use it? How can it be used?   Anyone. Although I feel that non-programmers are slightly disadvantaged since getting it customized to fit your needs does require peeking under-the-hood and learning some basic elisp.  As for how it can be used, I see no limitations. If you can run emacs as your pid 1, there's nothing it can't do."
emacs,3aiji5,Xredo,1 point,Wed Jun 24 07:21:00 2015 UTC,"I use it all day, every day.  My .emacs file is older than most people reading this.  I don't try to sell it...but it does sell itself.  Emacs over an IDE all day.  I've no idea how long it would take a new user to be good enough with it to make it preferrable.  Because interoperability with the rest of a windows shop is important I use Org-mode and Office."
emacs,3aiji5,madwilliamflint,1 point,Thu Jun 25 06:15:20 2015 UTC,"I use Netbeans for my C projects, because it is easier for debugging and walking through large projects. But when I need a single C file, or need to do some regex magic, search or edit a C or any other file: emacs does the job and it does it well. My syntax colors are universal across all, I got a ton of user defined keybindings and recently even started to write my own lisp functions for more action in less time.   It was hard at the beginning, but now I notice the difference in speed and comfort in doing tasks that takes more time and effort for other people in my environment."
emacs,3aiji5,MartenBE,1 point,Fri Jun 26 14:14:15 2015 UTC,Does customizing the tool matter in the long run?   Yes.   What are the chances you end up using Emacs at work?   I did it.   Emacs or IDE?   Both.   How long will it take for new users to become really good at it?   Years.   Org-mode/Latex or Office ?   Asciidoc.   Who can use it ? or How it can be used ?   What?
emacs,3aiji5,Taikal,0,Fri Jun 26 15:23:02 2015 UTC,"Programmers do need it, code monkeys don't."
emacs,3aiji5,vchimishuk,0,Fri Jun 26 22:53:56 2015 UTC,"1) Yes, there are functions I use on a daily basis.   2) There are very few IDEs that cover all of the languages and use cases that I work with in emacs. I've also generally found IDEs to be a bit frustrating in that they often demand deep directory structures for something as simple as a ""Hello World"" proof of concept.   3) I keep my work TODO list in org. Emacs is useful for heavy text-twiddling on a weekly basis.   4) I don't know, how long will it take you?  5a) Orgmode matters to me because it's a platform-agnostic file format that I can use under multiple operating systems. This is a bit harder to find, in practice, than you think. Use of cloud-based solutions has been strongly discouraged by my employer for security reasons.   5b) I don't think a GUI really matters that much in LaTeX. Granted it's been several years since I needed to use LaTeX, but the emacs modes were generally the best helpers. LaTeX is still LaTeX and gets pretty fragile if you don't do things the LaTeX way. Most of my text-based applications these days involve markdown -> html, or the creation of structured text documents that I can feed into a blackboard tool.   6) I keep finding myself pulled into back emacs because of shortcomings in looking for a plugin or macro to handle this or that standard, this or that emerging application, or this or that particular need. But if you're happy with a given system, stick with it."
emacs,3aiji5,cbrachyrhynchos,-11,Sun Jun 21 11:30:20 2015 UTC,Downvote the troll.
emacs,3aiji5,tmalsburg2,13,Sun Jun 21 22:21:13 2015 UTC,"Ok, just downvoted you."
emacs,3ajqft,noonewantstohearyou,11,Sat Jun 20 21:40:19 2015 UTC,"I think there are default bindings for some emacs functions to F## keys, but they can always be re-mapped. I've been using emacs for over 20 years, and never use function keys for anything."
emacs,3ajqft,jsled,2,Sat Jun 20 21:53:19 2015 UTC,"I have 12 function keys and use them for the calendar.  Regular pulls up the 3-month mini-calendar (with corresponding start month); Shift+ pulls up the 12-month mini-calendar (with corresponding start month); Super+ pull up the one-month complete calendar with details (with corresponding month); Meta+ pulls up the corresponding agenda view of events (for the corresponding month).  There are a few yasnippet activities I've set up to mirror the old WordPerfect commands that use the function keys.  I use them also to change case on the selected word, and to compile tex."
emacs,3ajqft,lawlist,10,Sat Jun 20 22:31:10 2015 UTC,not at all.  it's the other programs you need to worry about.
emacs,3ajqft,hyperbling,5,Sat Jun 20 23:32:57 2015 UTC,"I use 60% keyboards and Emacs and it hasn't hindered me at all. I use a HHKB and an Infinity, one usually lives at work and the other at home. I'm mostly hitting Meta/Super/Esc, so the lack of a row for function keys or a numpad doesn't bother me at all.  If you're worried about losing out on functionality, the 60% keyboards I use have a Fn key that let me have function keys, media keys, arrow keys. It's very similar to how my laptop's keyboard works! Whatever you buy might be similar, but you should check first.   Fn + 1: F1 Fn + 2 (or 3, 4, 5, 6, 7...12): F2 (or F3, F4, F5...you get the idea :) Fn + [: up Fn + ;: left Fn + ': right Fn + /: down   There's a list of those key combinations on the HHKB product page: https://elitekeyboards.com/products.php?sub=pfu_keyboards,hhkbpro2&pid=pdkb400b"
emacs,3ajqft,AliUkani,2,Sun Jun 21 02:42:03 2015 UTC,"I own a HHKB Pro 2 which I use at work and I've found no problems with emacs, and the switch to a full size keyboard at home is quite seamless."
emacs,3ajqft,mrz,1 point,Mon Jun 22 09:21:24 2015 UTC,"I don't know what a 60% keyboard is.  I posted some links recently about keyboards that are good for emacs, but you have to remember that this is just some guy's opinion on the internet.  Not everyone agrees with Xah Lee.  I use a lenovo thinkpad netbook.  I bought it mostly for the keyboard.  Honestly, I rarely use the function keys.  They are just too far away for me to bother using them.  But don't think that having the wrong hardware will ruin emacs for you.  This is very far from the truth.  Emacs will give you the most out of any system."
emacs,3ajqft,parolang,3,Sat Jun 20 21:51:13 2015 UTC,"A 60% keyboard as I understand it comes without the function key row and a number pad. I've not come across a single usage of a function key in the few weeks that I've spent orienting myself with Emacs, but I wanted to confirm nonetheless whether using the function keys was part of a commonly used workflow."
emacs,3ajqft,SrbijaJeRusija,1 point,Sat Jun 20 23:03:11 2015 UTC,Do 60% keyboards come with an escape key?
emacs,3ajqft,billbose,1 point,Sun Jun 21 04:19:16 2015 UTC,"I use a tenkeyless keyboard and works great with emacs. Never seen a 60% keyboard. Will definitely be limiting, since i use i use function keys with my xmonad window manager."
emacs,3ajqft,instant_sunshine,1 point,Sun Jun 21 05:47:05 2015 UTC,"60% will not limit you but you will need to adapt if fn keys are in your workflow (they are for me, but only F3/F4 for macro recording.)  Have a look at TKL as others are suggesting, or maybe an 84 key layout. Eg. http://www.kc-keycool.com/en/product.php?mod=detail&id=20"
emacs,3ajqft,RobThorpe,1 point,Sun Jun 21 08:38:02 2015 UTC,The most important Emacs function keys are:   F3 - start macro recording F4 - stop macro recording or execute macro. F11 - switch between full-screen mode and normal frame size.   Instead of F3 you can use C-x ( and instead of F4 you can use C-x ) to finish recording a macro and C-x e to execute the macro.  For F11 you can rebind the function to another key.
emacs,3ajqft,gonz808,-1,Sun Jun 21 15:15:12 2015 UTC,"Yes, go for a REAL TKL-keyboard and not a 60% one without function keys.  I use a Cooler Master's Quick Fire Rapid-i myself."
emacs,3aklkj,The_Agendine,3,Sun Jun 21 03:00:43 2015 UTC,"As you mentioned you succeed in opening a file at startup which is as easy as adding (find-file ""~/.emacs.d/init.el"") at the end of dotspacemacs/config function to display the init.el file at startup. From there you can also open your REPL with the right command.  Why do you need to kill the startup window ? You cannot do anything while Emacs is loading your config so killing the startup window won't provide any benefit and the snippet above switch to the file as soon as it is possible to do it. Moreover the startup buffer has a progress bar to indicate the loading progression and most importantly it will signal any errors during the loading."
emacs,3aklkj,syl20bnr,1 point,Sun Jun 21 04:51:23 2015 UTC,"Ah! Thank you!  This led me to the solution.  I was placing my commands in the wrong part of the dotspacemacs file, which apparently was causing the issues.  I was putting things near the end of the file, as they were (mostly) running and I was thinking I wanted my layout to be the last thing to load.  My intention had been to close the startup buffer after it had finished, to get it off the screen, as I had been unable to have the window containing it run commands, but it's definitely a better option to keep it and load the other stuff separately.   Clearly, I was being silly.  Thanks muchly."
emacs,3aklkj,lawlist,2,Sun Jun 21 05:31:09 2015 UTC,"How about trying(setq initial-buffer-choice t), which in a generic version of Emacs would cause the *scratch* buffer to be displayed.  Buffer to show after starting Emacs. If the value is nil and `inhibit-startup-screen' is nil, show the startup screen.  If the value is a string, switch to a buffer visiting the file or directory that the string specifies.  If the value is a function, call it with no arguments and switch to the buffer that it returns.  If t, open the `*scratch*' buffer."
emacs,3aixwe,pzone,2,Sat Jun 20 17:18:15 2015 UTC,"(bind-keys :map helm-command-map                (""x"" . helm-M-x))   or  (bind-key ""x"" #'helm-M-x helm-command-map)"
emacs,3aixwe,xuchunyang,1 point,Sat Jun 20 17:33:46 2015 UTC,"Bind-key is a macro producing calls to define-key like what I had above, what I'd really like would be to define angle bracket notation <helm>.  Bind-key macro also requires the bind-key package, so when recommending use of bind-key it is good to mention there is a dependency."
emacs,3aixwe,xuchunyang,1 point,Sat Jun 20 20:02:14 2015 UTC,"I though you already know the bind-key package, so I didn't mention it."
emacs,3aixwe,franburstall,-1,Sun Jun 21 02:22:17 2015 UTC,You use bind-key in yr original post so yr point 2 applies to you a fortiori!
emacs,3agn7i,MinneLover,24,Sat Jun 20 00:17:52 2015 UTC,"Welcome to Emacs. Don't worry, this subreddit perhaps makes Emacs seem like a programmer's tool, but it is a universal text editor for all humans.  First, here's a commonly referenced guide The Woodnotes Guide to Emacs for Writers (pdf).  Emacs has a lot of user-friendly features, the trick is how to access them. Your first port of call should be the tutorial accessed with C-h t (which means press control-H then press T). Press C-h ? to get a list of the various ways Emacs can help you.  The first hurdle is Packages. If you're unfamiliar, these are a bit like browser extensions. Almost everything is available on MELPA-stable. Unfortunately, the instructions you'll find aren't super user-friendly. So...   Open Emacs M-x customize-variable RET package-archives RET Click the INS button to add: Archive name: melpa-stable URL or directory name: http://stable.melpa.org/packages/ Click Apply and Save M-x list-packages RET   Now you can install stable packages from MELPA.  In answer to your points:   Emacs can change the faces of a buffer text region with its Enriched Text minor mode. Quoted from the manual:     Enriched mode is typically used with Text mode (see Text Mode). It is not compatible with Font Lock mode, which is used by many major modes, including most programming language modes, for syntax highlighting (see Font Lock). Unlike Enriched mode, Font Lock mode assigns text properties automatically, based on the current buffer contents; those properties are not saved to disk.  Yes of course. The answer to ""Can Emacs do...?"" is usually always yes. You will want Markdown Mode, which will make the various emphasised text pretty. Be sure to install via list-packages. Emacs has a builtin indexing feature called Imenu, which should work with most major modes. To get a sidebar listing all the Imenu nodes, try imenu-list. To show a sidebar with a project folder tree, there is the builtin speedbar but this only works as a separate frame (separate application window) and a lot of people like to work in a single frame (application window) split into multiple Emacs windows. There is sr-speedbar, which makes Speedbar operate in a single frame, but I have found this quite buggy. I recommend neotree instead.   You will very likely have someone chime in with ""just install Spacemacs."" DO NOT DO THIS! Spacemacs is an Emacs extension that adds of a huge lot of idiosyncratic programming-specifc configurations which will increase your learning curve exponentially. I cannot emphasise enough to avoid this.  Good luck and godspeed.  Edit: someone very active in the Emacs community is Sacha Chua, who has this How to Learn Emacs: A Hand-drawn One-pager for Beginners / A visual tutorial"
emacs,3agn7i,gepardcv,3,Sat Jun 20 03:36:20 2015 UTC,"This is a great, great answer.  OP, you can definitely learn to use Emacs. It isn't that hard. I have been meaning to prepare a talk aimed at introducing beginners to Emacs and get them quickly productive at the same level as the various lesser editors, but I doubt I will have it finished before your deadlines."
emacs,3agn7i,syl20bnr,1 point,Sat Jun 20 03:53:41 2015 UTC,"well, keep me updated anyway! Cheers!"
emacs,3agn7i,syl20bnr,2,Sat Jun 20 12:35:00 2015 UTC,"thanks a LOT man! I am familiar with packages and libraries etc (I use Linux Mint, octave, R...) I wasn't aware of the existence of these modes though!!!  Tonight I'll work on your instructions!!! cheers!!!"
emacs,3agn7i,Sathan,4,Sat Jun 20 12:33:02 2015 UTC,"You will very likely have someone chime in with ""just install Spacemacs."" DO NOT DO THIS! Spacemacs is an Emacs extension that adds of a huge lot of idiosyncratic programming-specifc configurations which will increase your learning curve exponentially. I cannot emphasise enough to avoid this.   Do you have any proof of that ? Because on my side I have plenty of actual proofs which are new Emacs users using Spacemacs submitting PR and being productive in no time, check @spacemacs if you need a refresher. There is something wrong with this fact and your BIG BOLD free recommendation and I don't like that at all.  For your education Spacemacs comes with less programming related stuff installed by default than any other starter kit. The vast majority of the programming packages are in optional layers.  Now please try before talking without any clue about the subject, thank you!"
emacs,3agn7i,syl20bnr,3,Sat Jun 20 18:15:08 2015 UTC,"I've used Spacemacs and read all its documentation. It is a fantastic invention which should be applauded, but it's not good for beginners. The continued advice for beginners to use it is doing them a disservice."
emacs,3agn7i,autourbanbot,6,Sat Jun 20 23:15:09 2015 UTC,"Thanks for trying it.  Spacemacs does not prevent anyone from learning elisp. It provides a community curated environments to do so. On the chat there are a non negligible number of Spacemacs users who are learning elisp and they are doing well.  I want to point out a paradox with the way you tell a beginner to avoid starter kits (you give no chance for them to start with a ... starter kit). If you think that at a given point in time it is OK to use Spacemacs and if you cannot define the period where it is not OK then it should be also possible to use Spacemacs right from the start. Since I don't think you are able to define this transition period accurately enough for all beginner, Spacemacs can be OK to start with.  But it goes even further that this, I think the exact opposite of what you wrote, I encourage people to discover Emacs via Spacemacs to have a glimpse of how powerful it can be when you can put together the best packages around with a consistent interface, it shows the way, it shows one possible goal, result which works well. The configuration of Spacemacs is made to be highly modular and to be able to easily remove what you don't want. Ultimately you can start to build your own configuration with the light of a well organized configuration and use Spacemacs as a reference.  This is a different school than yours and it is definitely a working one so stop being so categorical, for a starter you should advice people with constructive pros and cons.  I find your advice for an ""initiation"" trip inadequate in this specific case of learning how to use a text editor."
emacs,3agn7i,ihatecatsandpeople,1 point,Sun Jun 21 01:25:55 2015 UTC,"I encourage people to discover Emacs via Spacemacs to have a glimpse of how powerful it can be when you can put together the best packages around with a consistent interface, it shows the way, it shows one possible goal, result which works well.   I don't think this is helpful for beginners. If they start with Spacemacs, they won't even have a reference point to see that it is powerful, consistent and works really well. I'd argue that being familiar with (default) Emacs is a necessary step to appreciating Spacemacs, and agree that Spacemacs and other such overhauls should be avoided until a beginner can fully realize and appreciate what behavior is being modified."
emacs,3agn7i,gepardcv,-1,Mon Jun 22 16:25:21 2015 UTC,"Can your grandmother install/use it? If not, why not?"
emacs,3agn7i,tuhdo,1 point,Sun Jun 21 06:43:24 2015 UTC,"I don't know you should ask her. Unfortunately she is dead, thanks to let my grand mother rest in peace and continue to use your bold sentences on someone else."
emacs,3agn7i,khammack,3,Sun Jun 21 13:57:18 2015 UTC,I'm very sorry to hear that. I hope you know I was referring to the colloquial Grandmother Test and meant no personal offence.
emacs,3agn7i,kaushalmodi,2,Sun Jun 21 22:44:40 2015 UTC,"Here's the Urban Dictionary definition of Grandma Test :      A test designed to determine user-friendliness.  One asks himself or herself if a product is easy enough to use that a grandmother could use it.     Pass: Windows and AOL.  While both of these are inefficient and likely to crash products, they are purchased simply because they are easy to use.  Fail: Hooking up a home theater system.  Even with the right guides etc., there are still many difficulties to get around...    about | flag for glitch | Summon: urbanbot, what is something?"
emacs,3agn7i,kaushalmodi,1 point,Sun Jun 21 22:44:46 2015 UTC,"Would emacs prelude be a good option? I don't know if ergoemacs fits the bill, but claims to be a modernized version of emacs. I've never tried it myself and it doesn't look intuitive."
emacs,3agn7i,nandryshak,9,Sat Jun 20 03:48:45 2015 UTC,"Urrggh no!  The thing with (some) programmers is the following thought process:   they invest a lot of time in improving/optimising their workflow given #1, this is the best workflow given #1 and #2, everyone should adopt the best workflow   This gives rise to the various prescriptive ""right way"" configurations. Call me crazy but I think #2 should just be ""spend more time with people."""
emacs,3agn7i,nandryshak,2,Sat Jun 20 04:00:29 2015 UTC,"Although I agree with you in principle, Emacs has several heinous defaults. The basic buffer switcher, window switching keybindings, backup file behavior, yes-or-no-p, and display-buffer (often not respecting the user's window layout, like the *Completions* buffer splitting the current frame and not always going away) come to mind.  Prelude always seemed exceedingly heavy-handed to me. Even so, giving newbies a dozen or so lines to stop the editor from shitting on the disk and all over the screen will reduce the initial WTF factor considerably.  Source: spent some time debugging a package and had to run with -q for about 10 minutes. Shudder."
emacs,3agn7i,dixius99,1 point,Sat Jun 20 05:50:39 2015 UTC,"Yeah I think everyone ends up changing these things to other more powerful options, but also I think simplicity is more valuable to a beginner than power."
emacs,3agn7i,lawlist,2,Sat Jun 20 06:06:59 2015 UTC,"Yes. Right now I need a ""usable"" environment. I will empower myself on the way I suppose!"
emacs,3agn7i,lawlist,-1,Sat Jun 20 12:30:00 2015 UTC,OP is not a programmer. Elisp is useless to him and may actually drives him away.
emacs,3agn7i,kaushalmodi,4,Sat Jun 20 05:29:20 2015 UTC,(eq emacs elisp) => nil
emacs,3agn7i,Taikal,2,Sat Jun 20 05:47:17 2015 UTC,"No, I am not a programmer but consoles and code do not scare me.  I am willing to learn, just need a few hints to start :)"
emacs,3agn7i,ihatecatsandpeople,7,Sat Jun 20 12:28:01 2015 UTC,"I've been using emacs for 20 years.  I use it all day at work, nearly every day.  Emacs is a programmer's text editor.   Based on your experience level and deadlines I think emacs is not a good choice for you, not at this time at least."
emacs,3ahj2d,shackra,1 point,Sat Jun 20 06:03:30 2015 UTC,You should inform the author (so that he can fix the issue) instead of warning us not to use it.
emacs,3ahj2d,tarsius_,2,Sat Jun 20 16:36:23 2015 UTC,That's the step 2... But telling people first may save other from some headaches
emacs,3agbu8,parolang,3,Fri Jun 19 22:32:30 2015 UTC,I've been wanting a new lisp keyboard for years... But with USB and all the comforts of a modern keyboard. I just long for more modifiers.
emacs,3agbu8,wdouglass,3,Fri Jun 19 23:35:04 2015 UTC,"I would pay good money for such a keyboard. Someone needs to do this. Kickstart it or whatever, give me a modern Space Cadet!"
emacs,3agbu8,WesOfWaco,2,Sat Jun 20 04:43:26 2015 UTC,Get a JIS keyboard: http://i2.photobucket.com/albums/y13/khaangaaroo/PK5_2335_zps2505c493.jpeg
emacs,3agbu8,ramnes,1 point,Sat Jun 20 10:29:51 2015 UTC,Couldn't this be better fitted in /r/lisp reddit?
emacs,3agbu8,ReneFroger,6,Fri Jun 19 23:40:29 2015 UTC,Ah... This really has more to do with emacs than lisp. Basically most of the strange keys and key bindings you find in emacs are because of these old keyboards.
emacs,3agbu8,__baxx__,2,Sat Jun 20 03:11:58 2015 UTC,they still don't look like chords would be that easy with them though
emacs,3agbu8,Fastolph,1 point,Sat Jun 20 14:25:22 2015 UTC,It could fit in /r/MechanicalKeyboards as well. It's relevant to all these 3 subreddits.
emacs,3agbu8,ihatecatsandpeople,1 point,Sat Jun 20 09:32:48 2015 UTC,"Xah Lee seemed to have posted it first.  I like that on a Mac, you can map Command to Control within Emacs to emulate this."
emacs,3aghyf,greenokapi,2,Fri Jun 19 23:28:11 2015 UTC,"Strange, does it stick around when using emacs --no-init? I use the same theme and if I do this emacs starts with the vanilla look."
emacs,3aghyf,cpaulik,1 point,Sat Jun 20 11:58:38 2015 UTC,"Yeah, the theme does stick around even with that flag. It's probably important to note that it isn't the full material-theme that sticks around. Most of the text colours are the same, but the cursor colour and highlight colour are noticeably different.  Screenshot"
emacs,3aghyf,cpaulik,1 point,Sat Jun 20 18:56:03 2015 UTC,I've no idea. I can not reproduce this at all.   Putting the material-theme.el file in my .emacs.d and loading it with  customize-themes loads it but it is gone after a emacs restart.  What happens if you load another theme on top? What is your custom-theme-load-path variable?
emacs,3aghyf,codemac,1 point,Sun Jun 21 13:03:41 2015 UTC,"When I load another theme on top, then everything works as expected. My custom-theme-load-path is my home directory and the custom-theme-directory."
emacs,3aeotv,fandingo,5,Fri Jun 19 14:48:21 2015 UTC,From Emacs Daemon logs:   Warning: due to a long standing Gtk+ bug http://bugzilla.gnome.org/show_bug.cgi?id=85715 Emacs might crash when run in daemon mode and the X11 connection is unexpectedly lost. Using an Emacs configured with --with-x-toolkit=lucid does not have this problem.
emacs,3aeotv,mgoerlich,1 point,Fri Jun 19 18:38:14 2015 UTC,"Thanks a ton for finding that bug report. I'll try switching to lucid. (Unfortunately, Fedora doesn't provide a -lucid package like Ubuntu does.)"
emacs,3aeotv,mgoerlich,3,Fri Jun 19 19:22:53 2015 UTC,"Wasn't hard to find, it's the first thing my emacs spits out when i start it in daemon mode, i just ignored it, because i never had problems with it. When i read your post title, this was the first thing that came to my mind."
emacs,3aeotv,eliselaplace,1 point,Fri Jun 19 19:47:47 2015 UTC,"I think this is a known bug with GTK-based Emacs but I can't find the bug report anymore. I've had it happen too, but it might be fixed in the most recent versions since it's been a while since I've experienced it."
emacs,3aeotv,chronomex,1 point,Fri Jun 19 18:07:11 2015 UTC,"I experienced a similar issue (not identical, though I forget the details at the moment) with emacs 24 last month."
emacs,3aebcd,Road_Runner_,7,Fri Jun 19 12:43:54 2015 UTC,eclim-java-format ?
emacs,3aebcd,politza,1 point,Fri Jun 19 16:57:33 2015 UTC,Yes.. exactly what I needed! Thanks.
emacs,3aebcd,cgroza,3,Sat Jun 20 21:26:24 2015 UTC,"Do you use the cc-mode to edit java files? If so, I know it's possible to set indentation styles. Maybe this will help: http://emacswiki.org/emacs/IndentingC"
emacs,3aebcd,metaobject,3,Fri Jun 19 14:10:56 2015 UTC,"You may want to look into a command line tool called astyle.  It's unrelated to emacs, btw."
emacs,3aebcd,jchochli,3,Fri Jun 19 20:05:01 2015 UTC,Have you tried M-x eclim-java-format ?
emacs,3aebcd,spagyric,1 point,Sat Jun 20 13:23:10 2015 UTC,Yes.. exactly what I needed! Thanks.
emacs,3aebcd,RobThorpe,1 point,Sat Jun 20 21:26:40 2015 UTC,I used the code snippet in this Stack Overflow answer to indent arguments like Eclipse does: http://stackoverflow.com/a/4600811  Is that what you're looking for?
emacs,3aebcd,hvis,1 point,Fri Jun 19 13:08:42 2015 UTC,I need the whole formatting to be compatible with eclipse.
emacs,3ae9yh,parolang,9,Fri Jun 19 12:28:58 2015 UTC,I just use some standard mechanical keyboard without a weird shape. Works great.
emacs,3ae9yh,rhabarba,4,Fri Jun 19 13:29:49 2015 UTC,"I use an Ergodox, and I love it. I'd like a better thumb cluster layout, but it's still a great board. The keyboardio Model01 has better a thumb cluster, but probably too many fewer keys."
emacs,3ae9yh,zck,1 point,Fri Jun 19 14:11:58 2015 UTC,"What do you mean by too many fewer keys?  I think I'll get the model 01, though I'll just grab it next year when it's released"
emacs,3ae9yh,__baxx__,2,Fri Jun 19 15:09:33 2015 UTC,"On each hand of the Ergodox, there are 38 keys. On each hand of the Model 01, there are 32.  For my use, I don't know if I'd be able to easily adjust to so many more keypresses needing to be chorded.  Here's my current Ergodox layout, for comparison."
emacs,3ae9yh,zck,1 point,Fri Jun 19 16:10:51 2015 UTC,"That's a shame, it really looked like a well designed product."
emacs,3ae9yh,aptmnt_,1 point,Sun Jun 21 06:01:09 2015 UTC,"It is pretty well designed.  It's definitely a good product, if you don't need as many keys as I think I do.  The Fn keys really expand what you need, so it's possible that I won't actually need them, but I'm not sure I'm willing to drop $300 and wait ten months to find out."
emacs,3ae9yh,zck,7,Sun Jun 21 06:05:06 2015 UTC,"The best thing you can do for any keyboard is swapping control and caps lock. Also free, as long as you already have a keyboard."
emacs,3ae9yh,ianmalcolmreynolds,9,Fri Jun 19 14:31:57 2015 UTC,"Generally disagree. You'll end up overusing your pinky over time (""emacs pinky""). I prefer arranging control around your space bar and meta around your controls. I call this the space cadet bottom row. Use your thumbs for modifiers as much as possible"
emacs,3ae9yh,spoofedexistence,1 point,Fri Jun 19 15:23:24 2015 UTC,and what do you use for space?
emacs,3ae9yh,Sauerkrause,1 point,Fri Jun 19 23:19:51 2015 UTC,your other thumb? it becomes problematic though if you need multiple modifiers at once.
emacs,3ae9yh,spoofedexistence,1 point,Sat Jun 20 02:33:20 2015 UTC,"ah, my bad, I read it as using the space bar as control."
emacs,3ae9yh,Sauerkrause,1 point,Sat Jun 20 07:14:00 2015 UTC,"Oh heh. Speaking of weird keymappings, I've heard of people using Enter as a right control except when it's pressed alone. I suppose one could do that with the spacebar, but then C-space would be more difficult to do."
emacs,3ae9yh,spoofedexistence,1 point,Sat Jun 20 15:52:27 2015 UTC,I do that! because macbooks don't have a right control.
emacs,3ae9yh,IAmNotAnElephant,1 point,Sun Jun 21 06:03:37 2015 UTC,"On my macbook, I got around that issue by mapping right option to right control and right command to meta."
emacs,3ae9yh,newfor2015,2,Sun Jun 28 16:09:23 2015 UTC,"A lot of people do this as a carry over from the old sparc/dec keyboards.  I have never had a problem with ctrl myself but whatever, it's  a personal choice."
emacs,3ae9yh,damn_what,2,Fri Jun 19 17:05:40 2015 UTC,On a laptop keyboard yes but on a regular keyboard pressing the bottom-left Control with the palm of the hand is way easier.
emacs,3ae9yh,jsled,2,Fri Jun 19 17:47:08 2015 UTC,"I've used emacs for about 20 years, and I've never done this, never felt like it would help anything, and I don't know why people are so insistent that this is a good idea."
emacs,3ae9yh,zck,8,Fri Jun 19 14:39:42 2015 UTC,"Caps Lock is much easier to press than Control. And, for most people, Caps Lock is a wasted key.  So why not repurpose it to something useful?  We see discussions about how to press Control (pinky, thumb tucked under, side of hand). I think this means there isn't an obvious good way to do it, so people are looking for other ways of pressing Control. Caps Lock is beneficial."
emacs,3ae9yh,ivorjawa,5,Fri Jun 19 15:11:34 2015 UTC,"I've always wondered how the people who argue this type. All of the most important ctrl chars are on the left -- c, x, z, q, s, a, d -- which makes the most important ctrl key the one on the right side of the keyboard.  Are people who argue for swapping cntl and caps lock not touch typists?"
emacs,3ae9yh,revocation,2,Fri Jun 19 16:46:34 2015 UTC,"It is highly recommended to hold down ctrl/meta with the hand not typing the following letters, but for instance on a Macbook this is not possible since there is no right ctrl key. Even the Kinesis Mac keyboard does not have right control."
emacs,3ae9yh,ivorjawa,2,Fri Jun 19 18:04:31 2015 UTC,I remap the right alt/option to ctrl on my MacBook.  I couldn't use the machine otherwise.
emacs,3ae9yh,revocation,1 point,Fri Jun 19 18:33:07 2015 UTC,"Then how do you press M-x, M-d, M-w, M-a, M-v, M-b, M-f, etc. ...?"
emacs,3ae9yh,ivorjawa,2,Sat Jun 20 01:48:05 2015 UTC,"Meta is sticky, so ESC-x, etc."
emacs,3ae9yh,zck,1 point,Sat Jun 20 02:53:11 2015 UTC,"I think that many people never use the right Control key at all. I'm pretty sure I don't, when I use a ""traditional"" keyboard1. So in that case, using Caps Lock is better than left Control only.  If you find yourself using both Controls, I guess using Caps Lock only might not be a step up. But what about just using Caps Lock instead of the left Control button? You can still use right Control, but you have the advantage of an easier-to-press modifier on your left hand.  [1]  I'm a pure touch typist; my Ergodox keyboards I use don't even have the letters printed on them."
emacs,3ae9yh,ivorjawa,1 point,Fri Jun 19 17:15:49 2015 UTC,I actually do use caps lock a lot in programming.
emacs,3ae9yh,zck,2,Fri Jun 19 18:34:47 2015 UTC,"Well, that's fair. Before I made it a Control key, I hadn't used it for a long time. Even now, I'd rather have it as Control and have to hold down shift the three times a year I WRITE IN ALL CAPS FOR COMEDIC EFFECT.  And you can make the key labeled Control a Caps Lock key, and the key labeled Caps Lock a Control key, so you still have Caps Lock, but the left Control is in a better place."
emacs,3ae9yh,mogigoma,4,Fri Jun 19 18:37:37 2015 UTC,The tilting/angling motion of reaching for the control key in its default location can lead (for most people) to strain or injury. Preventing that motion via thumb clusters or relocating control to the home row can motivate this issue.
emacs,3ae9yh,nivekuil,0,Fri Jun 19 15:06:20 2015 UTC,"If you have a full-size (non-laptop) keyboard, then you can reach control without moving your wrist or fingers at all by pressing it with the base of your pinky. It's more ergonomic than having your weakest finger hold down caps lock."
emacs,3ae9yh,fantastipants,1 point,Fri Jun 19 15:29:30 2015 UTC,"Do you mean pressing it with the palm where you pinky meets your hand?  If so that's a major stress for me, especially compared with just using the tip of the finger as I normally would."
emacs,3ae9yh,nivekuil,1 point,Fri Jun 19 17:28:07 2015 UTC,"I have a mechanical keyboard (MX red) which makes it nearly effortless, but that's the way I do it on a normal membrane keyboard too. Is your keyboard a flat, scissor-switch type? It does take a little getting used to."
emacs,3ae9yh,revocation,1 point,Fri Jun 19 18:20:10 2015 UTC,"I agree.   Xah Lee also recommends: ""On most full sized PC keyboard, it's very easy to use palm or semi-fist to press Ctrl key.""   I used to use the semi-fist (curl my pinky and press down with the back of my pinky) until I switched to MacBook and lost my right ctrl key."
emacs,3ae9yh,ihatecatsandpeople,3,Fri Jun 19 18:08:05 2015 UTC,"I've been using the Microsoft Natural Keyboard for about 7 years based on Xah's previous recommendation. It's not too different that I can't type on other keyboards if I have to, and cheap enough that I have one each at home and office.  Since I work with Macs I set Command as Control, and for the Microsoft keyboard switch Command (now Control) and Alt so I can use the same muscle memory for this keyboard and the Macbook keyboard that I still use when I type in the library/coffee shop or when I travel."
emacs,3ae9yh,jsled,3,Fri Jun 19 14:27:09 2015 UTC,"Yeah, the Microsoft Natural (4000) keyboards are good, inexpensive and sufficiently ergonomic to help without ""ruining"" your muscle memory with something dramatic. No shade for people that want to use a Kinesis or something, but there's no real need for one. Interesting to see the Sculpt, though."
emacs,3ae9yh,ihatecatsandpeople,1 point,Fri Jun 19 14:42:00 2015 UTC,"I almost got the Sculpt recently, I couldn't get the American keyboard layout (in Europe now) and it also came with a right-handed mouse. Less options abroad I guess. But otherwise looks good; I like that the numeric keypad is separated from the keyboard because if you are right-handed, this is better for the arm with mouse."
emacs,3ae9yh,mogigoma,2,Fri Jun 19 18:13:47 2015 UTC,"Both the Kinesis Advantage and the IBM Model M Desksaver are very comfortable. Ergodox, Atreus, and keyboard.io look interesting as well. I would highly recommend something with non-staggered keys and thumb clusters."
emacs,3ae9yh,abo-abo,1 point,Fri Jun 19 14:20:37 2015 UTC,"See my post on adapting any regular keyboard for a better (not just) Emacs experience.  The advantage is that I can work on the laptop keyboard in the same way as on my mechanical keyboard at work.  By the way, if you like mechanical keyboards without a numpad, check out the one I've got. I'm not an expert - it's my first one, but I like it a lot, and the price isn't too crazy."
emacs,3ae9yh,zebra96,1 point,Fri Jun 19 15:54:08 2015 UTC,How to achieve this in windows? I asked here
emacs,3ae9yh,abo-abo,1 point,Mon Jun 22 16:32:23 2015 UTC,I just fiddled with microsoft keyboard layout creator a bit.
emacs,3ae9yh,richardblack3,1 point,Mon Jun 22 17:19:49 2015 UTC,"I use Microsoft natural elite with: - left control -> hyper  - capslock -> control  - both shift keys -> shiftlock - number keys -> symbols (great for lisps, etc. Bad if you type numbers a lot)  - evil mode (great if you like vi bindings / hate pivoting on the ctrl)"
emacs,3ae9yh,erewok,1 point,Fri Jun 19 22:25:54 2015 UTC,"I have the Microsoft skulpt and I like it a lot. I do remap caps lock to ctrl and I tend to rely too much on left hand pinky, so I need to consciously force myself to use right control while typing the other key.  I'm really curious about mechanical keyboards, as well."
emacs,3ae9yh,workisnotfun,1 point,Fri Jun 19 23:39:57 2015 UTC,"I'm using the Kinesis Advantage and it's amazing. My hand up to the knuckles do not move at all, just the fingers, switching keys around is as easy as hitting the program button or setting macros (making a key execute many different key strokes) is great.   The only think might be that an adjustable keyboard tray that goes a few inches lower (so it's closer to your thighs) is a great plus (unless you're tall I guess)"
emacs,3ae9yh,aport,0,Fri Jul 3 00:19:59 2015 UTC,Happy Hacking Keyboard Professional 2. /thread
emacs,3aedng,ephexeve,4,Fri Jun 19 13:08:39 2015 UTC,"Try keychain for managing SSH and GPG keys. It is a frontend to ssh-agent and gpg-agent. Configured properly, you can enter your passphrases once, and tools potentially including offlineimap can work without manual passphrase input."
emacs,3aedng,jeffk,3,Fri Jun 19 15:03:02 2015 UTC,"I use mbsync instead of offlineimap and have line like:  PassCmd ""echo ${PASSWORD:-$(gpg --no-tty -qd ~/.authinfo.gpg | sed -n 's,^machine gour .*password \""\\([^\""]*\\)\"".*,\\1,p')}""   in my ~/.mbsyncrc which parses ~/.authinfo.gpg as stated by someone in this thread...as well as keychain setup."
emacs,3aedng,atmarama,2,Sat Jun 20 05:37:13 2015 UTC,Do you have a graphical pinentry program? That may help I guess.
emacs,3aedng,p4bl0,2,Fri Jun 19 14:50:04 2015 UTC,"Here's what I did to get things working:   Make entries in ~/.authinfo.gpg (symlink this file to ~/.netrc.gpg). I made the symlink to help make things uniform across other programs that sometimes look for  authinfo.gpg  machine imap.gmail.com login <email> port 993 password <passwd> machine smtp.gmail.com login <email> port 587 password <passwd>  Put the following in your ~/.offlineimaprc   (general specs)  pythonfile = ~/.offlineimap/parse.py   (remote repository specs)  remoteuser = <email> remotepasseval = get_password_emacs(""imap.gmail.com"", ""993"")  Save the following code as parse.py in the directory ~/.offlineimap/  import subprocess  def get_output(cmd):     # Bunch of boilerplate to catch the output of a command:     pipe = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)     (output, errout) = pipe.communicate()     assert pipe.returncode == 0 and not errout     return output  def get_password_emacs(host, port):     cmd = ""emacsclient --eval '(offlineimap-get-password \""%s\"" \""%s\"")'"" % (host,port)     return get_output(cmd).strip().lstrip('""').rstrip('""')    Modify as necessary for non-gmail accounts and if you don't always have the emacs-deamon running (hence the call to emacsclient)  With this, i'm prompted for the gpg-password for the ~/.netrc file when I start mu4e, and never again (as long as the emacs daemon stays alive)."
emacs,3aedng,sidslasttheorem,1 point,Fri Jun 19 20:42:46 2015 UTC,"Well, I start offlineimap separately, with autorefresh option, hence it ask me for passphrase only once. In emacs I just redefine update function to ""echo"" command. Works for me."
emacs,3aedng,Levensn,1 point,Mon Jun 22 04:25:22 2015 UTC,I have gpg-agent setup to prompt me in emacs so mu4e can just run mbsync and mu by itself.
emacs,3aedng,acow,1 point,Fri Jun 19 17:29:50 2015 UTC,Any pointers as to how you did that? I've currently resorted to running graphical pinentry because the last time i tried curses pinentry wouldn't run from inside emacs.
emacs,3aedng,hirnbrot,1 point,Fri Jun 19 17:52:31 2015 UTC,"I am using pinentry-mac, but when running emacs on X, it seems that I cannot read my GPG_AGENT_INFO. Any idea about this?"
emacs,3aedng,acow,1 point,Fri Jun 19 18:01:35 2015 UTC,"I got the idea from here, but had some trouble with that script that I didn't solve. I wrote my own clone of it which has worked fine for a while now. Do heed the warnings on the first link: this may well be insecure."
emacs,3aedng,lexarcana,1 point,Fri Jun 19 18:02:56 2015 UTC,See this blog post for a complete working example. A non-annotated version of this code is in the corresponding git repository.
emacs,3aedng,shackra,1 point,Sun Jun 21 03:56:28 2015 UTC,"I don't use offlineimap anymore, but I used a python script that request the password from my keyring, and since the keyring is unblocked after login, I didn't experienced any problem."
emacs,3aedtr,TheFrenchPoulp,1 point,Fri Jun 19 13:10:23 2015 UTC,"I'd rather have an actual frame, under the control of Emacs, not the window-manager, as a completion widget.  It's curious that people went ahead and invented a surrogate via overlays, including scrolling, searching, etc. ."
emacs,3aedtr,politza,1 point,Fri Jun 19 17:08:50 2015 UTC,"Unless I misunderstood what you said, the tooltip I pictured is already coming from Emacs itself, isn't it?"
emacs,3aedtr,ReneFroger,1 point,Fri Jun 19 17:32:46 2015 UTC,You mean this another example?
emacs,3aedtr,politza,1 point,Fri Jun 19 20:54:45 2015 UTC,"Yes, of course.  It's like the little, dumb brother of a frame."
emacs,3aedtr,wasamasa,1 point,Fri Jun 19 21:23:14 2015 UTC,Fun fact: Tooltips are frames drawn by Emacs. UTSL.
emacs,3aedtr,wasamasa,1 point,Sat Jun 20 21:10:11 2015 UTC,"company-mode supports pluggable frontends, so someone wired up pos-tip to it: https://github.com/expez/company-quickhelp/  Doesn't work perfectly well though, I get popups more often than I'd like to (sometimes the most unexpected words yield one obscuring the entire screen) or they aren't hidden (and persist on other workspaces)."
emacs,3aedtr,shackra,1 point,Fri Jun 19 13:21:00 2015 UTC,OP is talking about the completion frontend!
emacs,3aedtr,wasamasa,1 point,Fri Jun 19 20:54:37 2015 UTC,"Me, too."
emacs,3aedtr,hvis,1 point,Fri Jun 19 21:48:29 2015 UTC,Different thing. company-quickhelp only displays documentation.  The GP would prefer a frontend that would display the completions list using pos-tip.
emacs,3ad2sg,Ignasi_Magnus,10,Fri Jun 19 03:11:54 2015 UTC,"I can't speak to the mobile platform, but I basically live in org-mode at work and at home. If you want to do TODOs, org-mode is the place for it. Scheduling, agenda views, searching, filtering, even time tracking is all right at your keyboard.   I keep one giant TODO file and one giant notes file.   For the notes file, I add timestamps and tags to each note. I can search by time period, or by tag, or by combination of tags. It's backed up with Git and   For my TODO file, I track TODOs by context (office, home, computer, errand, phone, anywhere). Under each context I put my individual TODOs, and I tag them according to project. When I work on the TODOs, I track my time. I view the day's scheduled items in the agenda view, filtering according to context. I can generate time reports on the fly at any granularity I choose. No matter where I am in Emacs I can capture TODO items without switching contexts using org-default-notes-file, which has different templates depending on what sort of TODO I want to capture.  Be warned! This is such an efficient and wonderful work environment you will not want to leave. I'm currently in the process of seeing how to move my email into Emacs, and after that my calendar.  I'm only scratching the surface! Some people have wonderful org-mode setups. This is what got me into it: http://orgmode.org/worg/org-tutorials/  Good luck and have fun!"
emacs,3ad2sg,brad_radberry,3,Fri Jun 19 03:41:49 2015 UTC,".org is the new .txt  You lose nothing by switching over, as org-files are just plaintext.    (Well, auto-folding is ON by default...so you may, or may not, want to shut that off, if you begin a lot of lines with asterisks...but you won't lose anything.  I shut it off...I do use folding, but I prefer everything ""exploded"" to start, and to manually contract things, rather than the reverse.)  I don't use it for much more than text notes myself, but org-tables are amazing!  I have a LOT of notes that just make more sense in table form, and org-mode is fantastic for managing that format.  And that org-tables have support for rudimentary spreadsheet-operations is icing on top of that!  Also, that org-mode is smart about URIs and has it's own internal (local) file linking syntax (i.e. you can add links in .org files to other files, .org, or otherwise) is additionally very helpful.  Anyway, the best advice is just to try it.  The worst case scenario is simply that you'll just re-name your .org files to .txt files.  There's really no risk."
emacs,3ad2sg,forked_tongue,2,Fri Jun 19 18:42:52 2015 UTC,"For Android, there is a fairly new app called Orgzly that seems to work pretty well for basic outlining/todo/notes, and syncs directly to org files in Dropbox with no extra plumbing on the Emacs side of things.  Another thing I will point out is that in case you are using Markdown as input to other software and are worried about compatibility, it's easy to export from org to Markdown (and org's exporters are generally just as configurable as the rest of it, too).  At any rate, I would say that even with just the out of the box defaults, org-mode does more than Markdown and todo.txt... and that's before you start to take advantage of its customizability."
emacs,3ad2sg,RothiasVex,1 point,Fri Jun 19 09:50:44 2015 UTC,"Toodledo syncrhonizes with org-mode -- https://github.com/christopherjwhite/org-toodledo -- and it's not too difficult to modify the source code so that you can take advantage of Toodledo keywords -- there are a few places where it's obvious, and some that are not so obvious, but it's not too complex -- you can add additional priorities to take advantage of everything Toodledo has to offer:  (setq org-todo-keywords '((sequence   ""Active(a)""   ""Next Action(n)""   ""Canceled(c)""   ""Hold(h)""   ""Reference(r)""   ""Delegated(d)""   ""Waiting(w)""   ""Postponed(P)""   ""Someday(s)""   ""Planning(p)""   ""|""   ""None(N)"")))   In terms of synchronizing computers for my entire Emacs installation and my entire database, I use rsync:  http://emacs.stackexchange.com/a/5844/2287"
emacs,3ad2sg,lawlist,1 point,Fri Jun 19 05:16:00 2015 UTC,"The main advantage for me is all the little extra keybindings.  You can very easily move a heading and all the structure under it to anywhere else in the document. You can create tables of data and quickly move rows and columns around or delete columns, treating it like a spreadsheet.  But using it to replace markdown is only a small part of org mode. You can also treat it as a todo system and have projects or tasks with deadlines and scheduled times, generate lists for you to easily tick off done tasks, etc."
emacs,3ad2sg,chrispoole,1 point,Fri Jun 19 05:46:48 2015 UTC,"I'm not a heavy user of the tags, links, tables etc. but I manage plenty of hierarchical todo lists and notes in org-mode for a couple of reasons: Plain text files are very flexible, the key bindings are very well chosen (TAB: de/collapse item, S-TAB: de/collapse all, M-RET: new list item, M-S-RET: new list item with checkbox, C-c C-c: toggle checkbox, M-S-<arrow keys>: de/indent) items, move them around) and I can use the countless features of Emacs and process the files with Elisp.  Edit: I just wanted to add that Emacs is not a huge advantage over any other editor that can search, replace and has some reasonable basic key-bindings, but having fully programmable editor is just a whole lot of fun and I wouldn't want to miss that."
emacs,3ad2sg,True-Creek,1 point,Fri Jun 19 12:44:20 2015 UTC,"For me, the interest in org-mode is the way it lets me integrate the various parts of my job. I plan projects, work on projects, take notes, process data, write reports/scientific articles. I can do all of this in org-mode with consistent keybindings, etc. This is spread across many different files, but the Agenda mechanism links everything beautifully. This means that all my various TODO's spread across different files and different project states are all grouped together. Also, all of my outputs are easily searchable.  Beyond all that, the nice keybindings, easy navigation, and overall quality of the experience are a huge bonus."
emacs,3ad2sg,ajsteven130,1 point,Fri Jun 19 13:58:18 2015 UTC,"I went whole-hog org-mode for month and ended up pulling back. The agenda and the todos and the scheduling were over-engineered for what I needed. The amount of customization I would have had to do was time prohibitive and, more importantly, it still wouldn't work on mobile without tears.  So I went back and built the most basic thing that could possibly work. A major goal was to be ""editor agnostic"", which lets me view and edit the file through the dropbox client on my phone. Allow me to go into some gory detail.  I'm using emacs+prelude+org-mode because they're all awesome. Here's a screenshot of a simple todo list.  The group at the top is simple todo items, one per line. If I need more detail sometimes I simply write it below, and sometimes I break it out into another file with an org-mode link. This section is deliberately freeform.  Below that is my tickler/calendar. Each line starts with a date, coded yy.mm.ddw for compactness and so I can sort them with sort -n. They're color coded by day of the week. I use this bump date utility I wrote to operate on the dates -- ""repeat weekly"", ""add 4 days to given date"", ""give me the next Thursday"", those sorts of things. It feels very natural.  I tag appointments with # and contexts with @.  Granted my schedule isn't very complex, but this system has been meeting my needs for months with no problems. It's simple, and it works everywhere."
emacs,3ad2sg,thanthese,1 point,Fri Jun 19 17:23:40 2015 UTC,Orgzly on android can sync to dropbox. Started using it a few days ago (but syncing with Syncthing instead). So far no problems...
emacs,3aemb0,augmentedtree,2,Fri Jun 19 14:26:58 2015 UTC,"I have a Kinesis, and an important aspect of my keyboard is modifier symmetry where I need to have a Control, Meta and ""Command"" on both sides of the keyboard in the same position. This allows me to ""do"" my keychords with both hands. C-a is used with the Control on the right side, but C-o is done with the left.  The Kinesis layout required that I jettison the Home and End keys from their position in the thumb section for an extra ""Command"" (yes, I need ""Command"" key for non-Emacs applications). So yeah, I use C-a and C-e as those are easy enough.  This modifier symmetry becomes an interesting conundrum for me if I get the Keyboardio, as it has four thumb keys for the four modifiers (including the Shift). I may have to retrain myself slightly to do Space, Return and whatnot on the Index fingers.  The best thing about these keyboards is the ability to rebind them in the firmware, so they work with different applications (and different computers)."
emacs,3aemb0,howardthegeek,1 point,Fri Jun 19 15:50:11 2015 UTC,I still just use C-a/e  I know about them. It's muscle memory by now.
emacs,3aemb0,nautola,1 point,Fri Jun 19 14:32:59 2015 UTC,"I also use C-a and C-e.  It also helps when I'm not using a Kinesis, because I just have to remember one shortcut, rather than try to figure out which one I want to use for the current keyboard."
emacs,3aemb0,uhoreg,1 point,Fri Jun 19 14:53:28 2015 UTC,"I use an Ergodox, and I still use C-a/C-e. The Home and End buttons (on my layout) are not easy to touchtype; the Emacs shortcuts are better. It's possible to press them, then get back to home row, but it's not easy.  Now, if we look at the default QWERTY Ergodox layout from massdrop's configurator, we see that Home and End are slightly better to use. But I would never use this layout for Emacs -- look how hard it is to press Control! Alt is literally the hardest key to press on the keyboard! This is not a good keyboard for Emacs.  Now, perhaps you have a custom setup where Home and End are easier to press. In that case, do what seems useful to you. It might be a good idea to play around with the massdrop configurator too see what your layout will look like."
emacs,3aemb0,zck,1 point,Fri Jun 19 15:08:08 2015 UTC,"I still use C-a / C-e, I put the Control button where my backspace is normally on my Kinesis and I rest my thumb there. When I'm not in emacs I (unfortunately) have to reach over with the left thumb but it's not so bad"
emacs,3ac3d2,adimit,6,Thu Jun 18 22:02:15 2015 UTC,"You can definitely be granular with magit. Within a hunk you can start marking (C-SPC) select the region, then hit s to stage it. Likewise,  in the Unstage changes or Untracked files listing of the main magit-status buffer, you can select the file paths that you want to stage enmasse, then hit s. boom :)  I never hit the -. I do use TAB,n, and p to navigate the hunks.  Now for the 3 way ediff, I still feel a bit basic in my usage and mostly operate on hunks, so a when I want the A buffer, b when I want the B buffer. For those times when I need both, I just manually put the cursor in the C buffer and delete the <<< lines. (also using n and p to navigate diff hunks)  I find the main magit operations mentioned previously have all the granularity I need and ediff is only necessary for the conflicts.  Hope that helps a little"
emacs,3ac3d2,tsuru,1 point,Thu Jun 18 22:43:55 2015 UTC,"Thanks :-) It never occurred to me to use Emacs-regions (I use Evil, and am really inept with Emacs keybindings.)  I still can't see the stage and working copy side-by-side though, which I'm very used to. It lets you see if what you're trying to commit even makes syntactic sense in the language more easily. Maybe I'll write to the magit mailing list."
emacs,3ac3d2,wman99,5,Fri Jun 19 08:30:05 2015 UTC,Well you can stage specific parts (not just the hunk under the point) by selecting a region and pressing s for stage. I often find ediff to slow and clunky for merges and conflicts and just edit by hand.
emacs,3ac3d2,RobThorpe,1 point,Thu Jun 18 22:08:43 2015 UTC,Try smerge-mode and emerge-mode both of which come with Emacs.
emacs,3abxse,ReneFroger,3,Thu Jun 18 21:18:49 2015 UTC,Same with Alchemist. Are you seriously announcing it every time when you change a minor detail?
emacs,3a9xkg,VanLaser,8,Thu Jun 18 11:49:02 2015 UTC,"Just as a quick pointer for lisp, it is convention to use dash separation in function names. So your function name would then look like: edit-init-el"
emacs,3a9xkg,Mitchical,2,Thu Jun 18 12:26:43 2015 UTC,"Thanks! Yes, I did that to better resemble my similar, vimrc accessing function (called EditVimRC). From evil command-line, i press the same letters: :Ed Tab Enter. Hm, perhaps I could change to Edit-Init-EL (the capital E helps a lot with completion, so I'd like to keep it)."
emacs,3a9xkg,instant_sunshine,2,Thu Jun 18 12:31:51 2015 UTC,"use Smex for completion, it will fuzzy match.   Then stick to the lowercase-name-convention and use M-x eie to launch your function...  Better still just bind it to a key..."
emacs,3a9xkg,Mitchical,2,Thu Jun 18 12:39:13 2015 UTC,"That's true, especially about binding it."
emacs,3a9xkg,jimm,2,Thu Jun 18 12:43:12 2015 UTC,"As /u/instant_sunshine just said, emacs has very good fuzzy matching packages. Doesn't matter too much since it's your own little function but it's good to be aware of convention. Congrats on first trip into elisp :)"
emacs,3a9xkg,RobThorpe,1 point,Thu Jun 18 12:43:55 2015 UTC,(thanks!)
emacs,3a9xkg,jordonbiondo,5,Thu Jun 18 12:59:31 2015 UTC,"Thanks for teaching me about symbol-file!  Another way to do this would be to create a bookmark with C-x r m. To open the file, jump to the bookmark via C-x r b."
emacs,3a9xkg,jordonbiondo,1 point,Thu Jun 18 17:53:55 2015 UTC,"That's what I do, my bookmark is just ""."" which is memorable."
emacs,3a9xkg,aabbccaabbcc,3,Thu Jun 18 18:49:13 2015 UTC,"(find-file user-init-file)    user-init-file is a variable defined in `C source code'. Its value is ""/Users/jordon/.emacs.d/init.el""  Documentation: File name, including directory, of user's initialization file."
emacs,3a9xkg,delbosforo,1 point,Thu Jun 18 13:37:57 2015 UTC,"Right, but ... that's not it! My standard-located ~/.emacs.d/init.el contains just a single line, which loads the custom-located, git-controlled, let's say ""real"" init.el. This file contains my settings. I use this solution because in Windows I can't use a shortcut reliably."
emacs,3a9xkg,aabbccaabbcc,7,Thu Jun 18 13:39:38 2015 UTC,"In that case, using symbol-file seems like a clever system-agnostic approach."
emacs,3a9xkg,delbosforo,2,Thu Jun 18 13:59:10 2015 UTC,"I do this as well! It's always worked well for me.  I still remember my first elisp function, which I've bound to C-a:   (defun beginning-of-line-or-indentation ()   ""Moves the cursor to the beginning of the line if at or before the indentation. Otherwise, moves to the indentation.""   (interactive)   (cond ((= (save-excursion (beginning-of-line) (point)) (point))      (back-to-indentation))     ((>= (save-excursion (back-to-indentation) (point)) (point))      (beginning-of-line))     ((< (save-excursion (back-to-indentation) (point)) (point))      (back-to-indentation))))   I was so excited when it worked, and I still use it constantly. It made me realize that it really wasn't all that hard to customize emacs to suit myself, and I've written tons more since then. It's so rewarding."
emacs,3a9xkg,delbosforo,1 point,Thu Jun 18 18:18:55 2015 UTC,"You're right, it is :)"
emacs,3a9xkg,RobThorpe,1 point,Thu Jun 18 19:13:08 2015 UTC,"My version that alternates between the indentation and the first column, wherever triggered:  (defun gk-bol ()   (interactive)   (let ((p (point)))     (back-to-indentation)     (when (= p (point))       (beginning-of-line))))   Definitely one of the first procedures I've written. Don't know when."
emacs,3a9xkg,RobThorpe,1 point,Thu Jun 18 22:51:48 2015 UTC,"Nice, thanks for sharing! Very similar to mine. It's so handy.  I think I prefer to go back to BOL if I'm between it and the indentation. I think yours is easier to read, though."
emacs,3a9xkg,RobThorpe,1 point,Thu Jun 18 23:41:58 2015 UTC,"You can version-control .emacs.d. Then you can copy over your config to init.el. The lesser the files the faster the load. I used to have a dozen files in which my setup was arranged, it would take a year to load the settings, now I have a single big init.el, some code in the ~/.emacs.d/lisp/, and a gnus.el, all of which are always byte-compiled."
emacs,3a9xkg,politza,1 point,Thu Jun 18 22:59:51 2015 UTC,"I guess there are a lot of workable solutions. In my case, I prefer to avoid putting .emacs.d under version-control, since it contains all packages managed by package.el etc. - and I'd like to avoid copying init.el contents back and forth. The beginning of the file contains all the necessary stuff needed to bootstrap the installing of any missing packages, if needed. But, the same as you, I also like to have a single init.el:)"
emacs,3a9xkg,politza,1 point,Fri Jun 19 08:39:29 2015 UTC,"You can put the directory elpa in your gitignore with a trailing slah so that it is not version controlled. In fact I have recently started to check in the elpa directory so that I always am guaranteed to have a setup working, and I can roll back updates to packages if I wanted to."
emacs,3a9xkg,politza,1 point,Fri Jun 19 08:54:26 2015 UTC,I don't see what you mean by compiled file?  Are you compiling init.el?  That's not really necessary (and may be slower than not compiling it). It's useful to compile it to see what warning the compiler comes out with though.
emacs,3a9xkg,politza,1 point,Thu Jun 18 18:50:14 2015 UTC,"I'm not compiling init.el - but when I tried to use this-command first time, it opened a compiled init.elc for me - don't know how and why. More strange is that I tried now to replicate the setup and ... now it does work (opening init.el as it should)."
emacs,3a9xkg,politza,1 point,Thu Jun 18 19:10:26 2015 UTC,I have no idea what could cause that.
emacs,3a9xkg,politza,1 point,Thu Jun 18 19:24:34 2015 UTC,It's quite possible I mashed some keys and compiled one myself? (did some key pounding while testing for a good shortcut)
emacs,3ab3fa,-Kane,3,Thu Jun 18 17:39:02 2015 UTC,"Cygwin has an Emacs that was configured and built with the Cygwin libraries; they provide an environment that looks like a Unix system.  NTEmacs was configured and built with using Windows-compatibility code in the Emacs sources; it ""knows"" that it is on a Windows system.  The wiki page you linked to explains how to get NTEmacs (which doesn't know anything about Cygwin) to interoperate with the Cygwin tools.  You should use NTEmacs unless there is some specific reason for you to use Cygwin Emacs.  It takes better advantage of the underlying windowing system."
emacs,3ab3fa,upham,2,Thu Jun 18 18:46:00 2015 UTC,You should use NTEmacs unless there is some specific reason for you to use Cygwin Emacs. It takes better advantage of the underlying windowing system.   You can use Cygwin Emacs with Windows' window system too. Configure using the --with-w32 and --with-x-toolkit=no options.
emacs,3ab3fa,nandryshak,1 point,Fri Jun 19 00:44:33 2015 UTC,"So then for the follow up, what is the difference between NTEmacs and the one on the GNU website?"
emacs,3ab3fa,upham,2,Fri Jun 19 01:21:23 2015 UTC,"The GNU website has the source code that is compiled into the Cygwin version or the NTEmacs version.  If you look at the top-level directory of the sources, you will see an ""nt"" directory that has the Windows-specific code that makes NTEmacs different from the Cygwin Emacs."
emacs,3ab3fa,upham,1 point,Fri Jun 19 01:54:19 2015 UTC,"But how does it relate though to the ""Emacs"" that people use in everyday language? As in, when I tell people I use ""Emacs"" as my text editor, do I actually mean NTEmacs or Cygwin Emacs (Depending on whichever I downloaded)? Is there a *nix version of Emacs? So many questions..."
emacs,3ab3fa,RobThorpe,2,Fri Jun 19 02:00:55 2015 UTC,"In order of specificity, tell them:   You run Emacs You run Emacs on Unix/Windows/OS-X. You run Emacs on Unix/NTEmacs on Windows/Aquamacs on OS-X.   Any of these will be accurate.  The specific implementation on the OS is typically irrelevant, unless you're asking for technical support."
emacs,3ab3fa,forked_tongue,1 point,Fri Jun 19 02:34:25 2015 UTC,Oh I see! I actually have never even heard of aquamacs. Thanks for clarifying!
emacs,3aaprk,MartenBE,2,Thu Jun 18 15:58:46 2015 UTC,Why are you not using the various inferior shells for this?
emacs,3aaprk,stsquad,1 point,Thu Jun 18 17:54:59 2015 UTC,Because I would like to be able to run with the press of a single button: open an output window if there wasn't already and be able to run the asynchronously (I don't know if the shells work this asymchronous) script even if there is no file for it. Or is it possible to call a shell buffer for this instead of a process?
emacs,3aaprk,nivekuil,1 point,Fri Jun 19 07:36:22 2015 UTC,"Something like this should work:  (defun foo ()   (interactive)   (async-shell-command (concat ""python "" buffer-file-name)))"
emacs,3aaprk,nivekuil,1 point,Fri Jun 19 10:47:13 2015 UTC,"(async-shell-command (concat ""python "" buffer-file-name))   It works, but running the following script cripples emacs. It lags a lot!  i = 0 while True:     print(i)     i += 1   Apparently it is nlinum, which causes the lag, can I disable it scriptwise in the shell buffer?"
emacs,3a8iju,rklv,3,Thu Jun 18 01:50:45 2015 UTC,"Shouldn't the OS get the keys first and then pass them over to emacs? If so, I don't understand how this problem can occur."
emacs,3a8iju,Kaligule,1 point,Thu Jun 18 09:46:28 2015 UTC,I was puzzled on Windows as well (pretty much the same thing).
emacs,3a8iju,vifon,3,Thu Jun 18 10:47:23 2015 UTC,global-unset-key
emacs,3a8iju,Drone30389,1 point,Thu Jun 18 11:23:36 2015 UTC,"There is an unset key command, but I can't recall the syntax.   C-h k  The type your key sequence will show you if and what it's mapped to now.   On my Mac I have command mapped to super, but the OS takes precedence over the keys mapped to the OS.   There are a number of default Mapuche for super on the Mac. For example s-c and s-v are cut and paste.   C-h b  Will show the bindings. Do that in a new buffer and you should show only the defaults."
emacs,3a8iju,verdigris2014,1 point,Thu Jun 18 04:18:50 2015 UTC,"Try C-h k and then Cmd + \ to see what it is invoking. The shortcut will appear in the help window (e.g., C-\ will appear). Take this shortcut plug it in the kbd macro. For specific modes, use this: (define-key somemode-map (kbd ""C-\"") nil) Or (global-set-key (kbd ""C-\"") nil) for global. Idk why unset-key isn't working though."
emacs,3a8iju,prasoon2211,1 point,Thu Jun 18 13:38:23 2015 UTC,"Try C-h k and then Cmd + \ to see what it is invoking. The shortcut will appear in the help window (e.g., C-\ will appear). Take this shortcut plug it in the kbd macro. For specific modes, use this: (define-key somemode-map (kbd ""C-\"") nil) Or (global-set-key (kbd ""C-\"") nil) for global. Idk why unset-key isn't working though."
emacs,3a8iju,prasoon2211,1 point,Thu Jun 18 13:38:23 2015 UTC,"Try C-h k and then Cmd + \ to see what it is invoking. The shortcut will appear in the help window (e.g., C-\ will appear). Take this shortcut plug it in the kbd macro. For specific modes, use this: (define-key somemode-map (kbd ""C-\"") nil) Or (global-set-key (kbd ""C-\"") nil) for global. Idk why unset-key isn't working though."
emacs,3a8iju,prasoon2211,1 point,Thu Jun 18 13:39:01 2015 UTC,"This is a long shot but: are you using Karabiner? It has some settings that treat the keyboard differently when Emacs is running, and if any of those are set it might be interfering with what you're trying to do."
emacs,3a8iju,redblobgames,1 point,Thu Jun 18 16:43:04 2015 UTC,I am in fact using Karabiner. But the problem is not related to it because it persists even if I disable it. Cmd + \ is the only combination that I've had a problem with so far.
emacs,3a8iju,lawlist,1 point,Thu Jun 18 17:42:44 2015 UTC,"What is the difference between the built-in Command+Tab that switches between open programs and what the original poster is trying to accomplish?  Does the original poster wish to switch between open Emacs frames, like M-x other-frame; or, does the original poster wish to switch between active windows in the current frame, like M-x other-window?"
emacs,3a8iju,lawlist,1 point,Thu Jun 18 18:52:53 2015 UTC,"The difference between Command+Tab and the thing that I have bound to Command+\ is that with Tab you can switch between ""applications"" while with ""\"" you can switch between windows. Also, I regularly want to be able to switch only between windows in a workspace, and since OS X's Command+Tab includes applications from all workspaces, what I am doing is actually handy."
emacs,3a8iju,benmaughan,1 point,Fri Jun 19 02:06:49 2015 UTC,"All you need is to set up keyboard shortcuts within Emacs and create interactive functions for (other-frame -1) and (other-frame 1).  In Emacs, they are called frames instead of windows -- windows are the windows within individual frames.  For example,  (defun next-frame ()   (interactive)     (other-frame 1))  (defun previous-frame ()   (interactive)     (other-frame -1))   And here is an example for keyboard shortcuts:  (define-key global-map [f5] 'next frame) (define-key global-map [f6] 'previous-frame)   Here are the ones that I use -- this is more OSX-like in my opinion:  (define-key global-map [?\s-~] 'previous-frame) (define-key global-map [?\s-`] 'next-frame)"
emacs,3a8zpq,butlerccreltub,3,Thu Jun 18 04:26:25 2015 UTC,"By ""moving the line"", do you mean delete the line from one window and move it to another? If so, you can do so by calling these commands in order:   kill-whole-line (default binding C-S-backspace): Cut the whole line on which the point is currently other-window (default binding C-x o): Move the point to the other window yank (default binding C-y): Paste"
emacs,3a8zpq,kaushalmodi,2,Thu Jun 18 05:23:45 2015 UTC,This will copy the line to the other window without deleting it. Using the functions mentioned by /u/kaushalmodi will let you delete it instead.  (defun foobar ()   (interactive)   (save-window-excursion     (let (line)       (setq line (thing-at-point 'line))       (other-window 1)       (insert line))))
emacs,3a8zpq,IceDane,1 point,Thu Jun 18 10:02:27 2015 UTC,Not sure why you are downvoted.   Can you find an example though?
emacs,3a8zpq,excitedaboutemacs,1 point,Thu Jun 18 15:11:50 2015 UTC,"Most likely append-to-buffer, which copies the current buffer region to point in another buffer."
emacs,3a6v2i,djgalt,6,Wed Jun 17 18:14:04 2015 UTC,"AFAIK, jedi.el is older (and more popular because of this), and it comes with a widget that displays function arguments using a popup, or something like that.  anaconda-mode is newer and easier to set up. I've tried it recently, and it ""just worked"".  (Not a real Python programmer)."
emacs,3a6v2i,hvis,6,Wed Jun 17 20:42:02 2015 UTC,"I'm going to test anaconda-mode, as I mainly develop software with python and have used jedi.el, I'll publish my findings later in a peer-reviewed journal here."
emacs,3a6v2i,shackra,7,Wed Jun 17 21:20:07 2015 UTC,"jedi.el used to only support auto-complete-mode, so I've used it for a certain time until I got sick of this library's display bugs. I then switched over to anaconda to make use of company-mode and am pretty happy with it. There is a variant of jedi.el supporting company-mode, too, but for me the ship has sailed already."
emacs,3a6v2i,wasamasa,3,Wed Jun 17 21:32:38 2015 UTC,"right, there is both a company-jedi and company-anaconda now. Having used both (although presumably you haven't used jedi in some time), are there any functional differences? I have been using anaconda, but am debating trying jedi due to some quirkiness with anaconda."
emacs,3a6v2i,wasamasa,3,Wed Jun 17 23:25:59 2015 UTC,"Judging from the feature list, it shouldn't really matter."
emacs,3a6v2i,krupped,5,Thu Jun 18 07:01:10 2015 UTC,"The find-code-at-point functionality of anaconda-mode is pretty awful, and is easily confused. jedi.el almost always gets you to the right code, infact, I don't have a code sample where I can produce a bug with it.  The completion methods of both are quite good.  jedi.el is only compatible with autocomplete-mode. anaconda-mode is compatible with company-mode.  jedi.el is ""more difficult"" to setup.  Other than this, they are pretty much the same."
emacs,3a6v2i,krupped,3,Wed Jun 17 23:54:42 2015 UTC,"This is a point that I am still a bit confused on. You say that anaconda-mode is compatible with company-mode, but there is also a company-anaconda available. What is the difference? Similarly, there is a company-jedi, which is presumably the company backend for jedi.el (in the same way that I've been assuming company-anaconda is the anaconda backend for company). I believe there is also a package called ac-anaconda, which I assume provides autocomplete support for anaconda.   As you can see, I'm a bit confused about all of this, so any clarification would be great."
emacs,3a6v2i,ajsteven130,3,Thu Jun 18 00:02:34 2015 UTC,"Hmm, it seems you can get company-mode or autocomplete-mode working on either now. Last time I was picking between them I think that was not the case."
emacs,3a6v2i,fantastipants,2,Thu Jun 18 01:26:14 2015 UTC,"I have been using ElPy-mode for a while now and it works really well. Setup was easy and the maintainer is very responsive.  It can use jedi for completion, etc."
emacs,3a6v2i,pyr3,1 point,Thu Jun 18 06:24:03 2015 UTC,"yep - I saw ""jedi is difficult to set up"" and I thought ""no it isn't - I don't recall having to do anything"".  ... but then I looked at my config and realized that's because elpy did the work for me, and (elpy-enable) did it all.  Now reading the other comments saying anaconda doesn't do as well finding the code at point, my interest in investigating anaconda is waning."
emacs,3a6v2i,tuhdo,3,Thu Jun 18 14:48:38 2015 UTC,"I had a bunch of trouble getting anaconda-mode working, to the point where I just gave up. No matter which virtualenv/python I installed its dependencies into it always seemed to figure out a way to execute in an environment that was missing them."
emacs,3a6v2i,pyr3,3,Thu Jun 18 02:52:52 2015 UTC,Probably you should have a look at how Spacemacs handles Anaconda. I only just followed the installation instructions and everything works correctly on both Windows and Ubuntu.
emacs,3a6v2i,erewok,3,Thu Jun 18 02:58:30 2015 UTC,"I followed this, but it never seemed to work correctly. It always complained that the dependencies didn't exist even though I installed them in every python environment that it could have been executing in."
emacs,3a6v2i,abingham,2,Thu Jun 18 03:07:04 2015 UTC,I've never heard of Anaconda mode but I've used Jedi.el for years without any complaints. Now I'm curious: what's this Anaconda all about?
emacs,3a6v2i,abingham,2,Wed Jun 17 21:30:45 2015 UTC,"You could also consider ycmd for auto-completion. It uses jedi behind the scenes, but it comes with the added benefit of providing completion in a number of other languages."
emacs,3a6v2i,__coffeecup__,2,Thu Jun 18 13:50:33 2015 UTC,"just from quickly skimming the emacs-ycmd github page it looks like ycmd doesn't provide doc lookup, is this correct?"
emacs,3a6v2i,sefrus,1 point,Thu Jun 18 14:42:28 2015 UTC,"Sorry for the late reply...just saw this. Ycmd itself does report documentation information as part of a completion request when it can figure it out. emacs-ycmd makes this available e.g. through its company-mode integration. Is this what you're looking for? If not, and if you have ideas for what we should be doing, you might file an issue with emacs-ycmd."
emacs,3a6v2i,pzone,1 point,Wed Jun 24 06:09:35 2015 UTC,Yes it is. I'm actually right now trying to figure out how to get the ycmd server set up on Arch. Hopefully I can get that figured out and I'll give emacs-ycmd a shot. Thanks for the reply
emacs,3a6v2i,pzone,1 point,Wed Jun 24 14:37:11 2015 UTC,"I prefer jedi of anaconda, once you set a location of python2 or python 3 the set up is pain less"
emacs,3a8ovf,mathisbeautiful,3,Thu Jun 18 02:44:56 2015 UTC,It seems Emacs build on Arch has problems. See this issue. Now it happens with magit too. You may try to apply the solution in the issue to see if it solves for magit as well.
emacs,3a8ovf,tuhdo,2,Thu Jun 18 02:55:42 2015 UTC,"The ConnectTimeout=1 in my .ssh/config file worked seems to have fixed everything. I tried to use the patch in the link fixed due due to a malformed patch error, but I can work on that.  Thanks!"
emacs,3a649e,nloyola,7,Wed Jun 17 15:03:04 2015 UTC,"The author has a pretty funky keyboard layout and put in his default into that package to not have to customize it in his own Emacs config. Nothing unusual going on here, the Emacs defaults are rumoured to be the equivalent for RMS."
emacs,3a649e,wasamasa,1 point,Wed Jun 17 15:17:50 2015 UTC,"Wow! Good to know, thanks."
emacs,3a649e,abo-abo,7,Wed Jun 17 15:25:43 2015 UTC,"Just to clarify my position:   avy.el isn't allowed to bind any key in your Emacs due to package guidelines. most of the commands provided by avy are useless if you call them with M-x: you end up typing a lot more. most of the commands provided by avy are much less useful if they aren't bound to a single key chord, like C-: or M-p. all the good short key chords are already taken.   Due to all these points, 3-4 especially, I recommend some bindings from my own config.  The message here isn't ""use these bindings"", it's: ""figure out some bindings that are this short and suit you""."
emacs,3a649e,excitedaboutemacs,3,Wed Jun 17 16:53:52 2015 UTC,"Its right next to 'q' and 't'.   Jk, I dont know either. I saw that but bound it to C-: instead."
emacs,3a649e,wasamasa,1 point,Wed Jun 17 15:08:12 2015 UTC,"Yep, I think I'll use that too. Thanks."
emacs,3a649e,420_blazer,1 point,Wed Jun 17 15:26:45 2015 UTC,Why not submit a bug report?
emacs,3a649e,Zakkor,1 point,Wed Jun 17 15:36:22 2015 UTC,Submitted.
emacs,3a5kim,rklv,7,Wed Jun 17 12:04:36 2015 UTC,"Hi,  I had exactly the same problem when I switched to material-theme a few days ago. I solved it with the following code snippet in my init.el:  (defun load-material-theme (frame)   (select-frame frame)   (load-theme 'material t))  (if (daemonp)     (add-hook 'after-make-frame-functions #'load-material-theme)   (load-theme 'material t))   It seems that some themes don't load all their colors/fonts when no frame is present during loading time (which is the case when starting in daemon mode). The code snippet explicitely loads the theme after frame creation if emacs runs in daemon mode."
emacs,3a5kim,bin7me,3,Wed Jun 17 13:15:18 2015 UTC,"That works great, thanks!"
emacs,3a5kim,RobThorpe,3,Wed Jun 17 13:48:25 2015 UTC,"This is probably because Emacs doesn't initialize some structures connected with fonts until it creates the first frame.  In fact, I remember Eli Zaretskii saying that it did something like that a while ago, he pointed out that if you have a graphical build of Emacs and you do emacs -nw then no fonts are loaded. It's worth filing a bug report about it."
emacs,3a5kim,rinego,1 point,Wed Jun 17 15:58:29 2015 UTC,"Hi,  I use this script for that. It will start a new server if needed and then a new client. And yes, I've to explicitly load ~/.emacs.d/init.el when I start the client.  #!/usr/bin/fish set name (basename (pwd)) if not test -S /tmp/emacs1000/$name     emacs --daemon=$name end emacsclient  --socket-name=$name -c -n --eval '(load-file ""~/.emacs.d/init.el"")' --eval '(dired ""."")'"
emacs,3a5kim,vifon,3,Wed Jun 17 12:17:43 2015 UTC,This is literally the first fish script I see in the wild.
emacs,3a5kim,kaushalmodi,1 point,Wed Jun 17 14:29:52 2015 UTC,But shouldn't that be unnecessary? Aren't you losing the benefit of not having to load init.el each time you start Emacs?
emacs,3a54yg,atilaneves,3,Wed Jun 17 08:35:40 2015 UTC,"I kind of agree, but I don't think it's a big deal.  I just look up the name of the test that failed and I know all I need to know.  The values are irrelevant: I'll jump to the test definition and re-evaluate stuff in place anyway.  Plus, once I'm at the test definition, I can easily debug-step-in."
emacs,3a31av,dfeich,6,Tue Jun 16 20:55:41 2015 UTC,"I hope that this collection of org-babel examples is helpful to others. I compiled them over the last few years and I am constantly adding where I can pick up new tricks. If you also have such collections, please post the links  I start here with a few links of my own   Examples by Eric Schulte some excellent exporting examples by Eric H. Neilsen, Jr The Kitchin Group home page and naturally (as always) Sacha Chua's excellent blog posts"
emacs,3a31av,slackorama,1 point,Tue Jun 16 21:05:54 2015 UTC,Count me among the helped.  Thanks!
emacs,3a21y2,ThrowawayTartan,8,Tue Jun 16 16:53:30 2015 UTC,"I have, and i'm about 1/3 of the way through.   1) would this book be a good way to learn emacs and its fundamentals/ the workings of it?   It's extremely well written and i feel like the author is actually walking me through a lot of things. I'm a ""from scratch"" self taught emacs user, so he's going over things i have completely glossed over and this has been amazing.   2) What would you rank the usefulness of this book? Is it more towards [beginners, novices, pros]?   I'd actually say all. It's great first revisit to emacs, now if we can convince him to put together an elisp tutorial too, i think he's cornered it."
emacs,3a21y2,jjasghar,2,Tue Jun 16 17:46:58 2015 UTC,"Posted to u/pzone as well but I thought it wouldn't hurt to get a second answer.  Hey...... since you've already read 1/3 of it it could you explain something to me? I'm on page 36 (emacs Client-Server)  it says that there are two options, the first is using emacs start-server and the next is emacs --daemon.  It mentions on the bottom of page 37 that if I go the server route I cannot use the traditional emacs binary or whatever. Does this include the emacs --daemon? Does this mean that I should use emacsclient to run everything now?  Edit: I changed my bash_profile to run emacs as ""emacs --daemon"" so looks like I have to run emacsclient eitherhow.... Not sure if this was a smart thing to do though...."
emacs,3a21y2,ClockRadio82,1 point,Wed Jun 17 04:14:05 2015 UTC,Have you tried emacs's built in tutorial?
emacs,3a21y2,jjasghar,1 point,Tue Jun 16 23:24:14 2015 UTC,"Absolutely. I got a huge amount out of it, but it's always nice to see another view point."
emacs,3a21y2,pzone,6,Wed Jun 17 01:35:25 2015 UTC,"1) Absolutely. It's the best introductory book out there.  2) It's oriented toward Emacs beginners.  Actually one of the target groups mentioned in the introduction is Vim users.  Most of the book focuses on what you need to know to do standard text editing: movement and editing, searching, macros and automation.  Other important sections include how to configure emacs, how to use the inbuilt help system take advantage of the self-documentation features to discover everything quickly.  The table of contents is probably useful.  https://www.masteringemacs.org/book/look-inside/table-of-contents-1    Although the book 280 pages the type is not extremely dense and it would be a fine cover-to-cover read. Although most of the book is about basic editing it does give a brief overview of a few useful packages such as Dired, Tramp, Shell/Eshell, and even Helm.  The author points to the official Emacs Lisp guide for an introduction to elisp, but explains all the lisp syntax necessary to copy configuration snippets from online and modify them to your needs.  The book does not discuss Evil mode and mentions only briefly the capabilities for coding and IDE, but that landscape is changing so quickly you should be searching online anyway.   I don't think the Spacemacs maintainers emphasize enough that their software is still very much in a beta state. I would absolutely recommend a clean break from Vim starting with the basics, later you can pick up Spacemacs and merge the customizations you've already made."
emacs,3a21y2,DrugCrazed,1 point,Tue Jun 16 18:12:29 2015 UTC,"Hey...... since you've already read it could you explain something to me? I'm on page 36 (emacs Client-Server)  it says that there are two options, the first is using emacs start-server and the next is emacs --daemon.   It mentions on the bottom of page 37 that if I go the server route I cannot use the traditional emacs binary or whatever. Does this include the emacs --daemon? Does this mean that I should use emacsclient to run everything now?  Edit: I changed my bash_profile to run emacs as ""emacs --daemon"" so looks like I have to run emacsclient eitherhow.... Not sure if this was a smart thing to do though...."
emacs,3a21y2,pzone,1 point,Wed Jun 17 04:09:10 2015 UTC,Emacsclient just means that it'll connect to your existing emacs server which will save you the load time you usually have to do
emacs,3a21y2,xoo-,1 point,Wed Jun 17 13:19:24 2015 UTC,"It's only a subtle distinction.  Running (start-server) while you have emacs open starts the server process after it's already running with an editor window open.  Running emacs --daemon from the command line only starts the server but doesn't open any window.  The latter is designed to be automatic, like a line in your crontab, since it starts silently without a window. Either way, if you want to connect to a running server instead of opening a new one, you need to use the emacsclient executable instead of emacs.  http://wikemacs.org/wiki/Emacs_server"
emacs,3a21y2,i_am_broccoli,3,Sat Jun 20 16:43:21 2015 UTC,i bought it just because over the past 3 years i have learned a lot from mickey's blog. BUY IT! we need to keep this guy writing about emacs.
emacs,3a21y2,MCHerb,2,Tue Jun 16 20:32:48 2015 UTC,Chiming in. Also purchased. Great read for emacs initiates and grey beards alike. I thoroughly enjoyed his treatment of emacs 'tempo' i.e. how emacs provides duplicative key sequences to allow the user to maintain their speed.
emacs,3a21y2,quartz2,2,Tue Jun 16 19:22:41 2015 UTC,"It sounds really neat. However, the the emacs manual is a lot easier to read than people apparently think."
emacs,3a21y2,mattl,2,Tue Jun 16 21:48:53 2015 UTC,"Is it worth it for someone that is a heavy user of spacemacs?  I've commited various times to various emacs plugins(usually hard to figure out bugs which have taught me a lot) and don't know if I'm the target audience.  Would I be better off with a lisp book, this, or both?  Is there is a recommended lisp book?  *edit:  After reviewing the table of contents I think it is more geared toward absolute beginners to people that have just begun exploring plug-ins."
emacs,3a21y2,kostajh,2,Wed Jun 17 03:46:23 2015 UTC,I would also be interested in knowing this :)
emacs,3a21y2,z27,1 point,Wed Jun 17 09:47:12 2015 UTC,"I didn't buy it, I was given a copy.  I'm really enjoying it, and read a whole chunk of it recently when on a plane and it was very enjoyable to read."
emacs,3a21y2,handegar,1 point,Tue Jun 16 20:44:02 2015 UTC,"I bought it, and found it very helpful. Been using Emacs for a year. Some things you will already know, but its helpful anyway to review them in a wider context. Mainly, the book is good at teaching you how to learn more, while also laying out the fundamentals. I'd recommend it."
emacs,3a21y2,ephexeve,1 point,Wed Jun 17 03:09:45 2015 UTC,"I hope it will be available on paper, sometime. Unfortunately, I can't read for too long on any screen type."
emacs,3a2epo,rgrau,5,Tue Jun 16 18:19:27 2015 UTC,I quickly began a wiki page: http://wikemacs.org/wiki/Docker
emacs,3a2epo,dzecniv,3,Tue Jun 16 19:28:11 2015 UTC,"I haven't tried it, but there's already this: https://github.com/Silex/docker.el"
emacs,3a2epo,dzecniv,4,Tue Jun 16 18:20:09 2015 UTC,"No doc... reading from source it defines a docker-images major mode  to manipulate docker images: D for Delete and Fetch (pull), Run, Push and the same with containers."
emacs,3a2epo,dzecniv,1 point,Tue Jun 16 19:06:27 2015 UTC,"this docker.el is very alpha. From the author after I opened a bug request for documentation: ""sure! but it's very alpha at the moment. As soon as I have something semi-working (like images & containers) I'll write a README with examples/screenshots and put it on MELPA. given it was reddit'ed already I better hurry, I'll put some temporary doc."""
emacs,3a2epo,dzecniv,1 point,Tue Jun 16 21:13:48 2015 UTC,update: the doc now is very good !
emacs,3a2epo,dzecniv,2,Thu Jun 25 07:34:37 2015 UTC,Syntax highilghting of a docker file can be done with https://github.com/spotify/dockerfile-mode we can also build the image directly.
emacs,3a2epo,cestdiego,2,Tue Jun 16 19:07:02 2015 UTC,You can have tramp integration with https://github.com/emacs-pe/docker-tramp.el. Also there is https://github.com/emacs-pe/dockerfile.el for syntax highlighting
emacs,3a2epo,jordonbiondo,2,Tue Jun 16 19:28:09 2015 UTC,The Emacs logo woudl make more sense than the linux logo.
emacs,3a0z7k,ReneFroger,5,Tue Jun 16 11:12:45 2015 UTC,"PHP Mode has no serious understanding of PHP's syntax and grammar, so much of what we accomplish is done with regular expressions and various text searching.  Personally I think it's sufficient using something like electric-pair-mode or any of the various ""automatically insert opening and closing delimiters"" packages out there.  That said, we do have something of a long-term plan to integrate PHP Mode closely with Semnatic.  That involves making PHP Mode actually aware of the grammar of PHP, and so when that happens we might be able to implement what you are describing."
emacs,3a0z7k,eric-plutono,1 point,Tue Jun 16 13:10:45 2015 UTC,"Thanks for your reply. I eventually found my solution here, but I appreciate your reply too. In the case the link helps you."
emacs,3a0z7k,parolang,2,Fri Jun 19 18:15:52 2015 UTC,"I don't know about immense productivity boost, but I think most people who want this sort of thing just use electric-pair-mode .  It won't write your semicolons for you, but that's not a difficult key to press."
emacs,3a0z7k,Boojum,1 point,Tue Jun 16 12:10:14 2015 UTC,"Programming modes based on SMIE can bind a key to smie-close-block to basically get this for free.  Unfortunately, I don't think there's a way to make SMIE play nice as a minor mode; it's designed to be scaffolding for new major modes."
emacs,3a0z7k,VanLaser,1 point,Wed Jun 17 01:03:21 2015 UTC,"Thanks for your reply. I eventually found my solution here, but I appreciate your reply too. In the case the link helps you, because general-close seems be designed as minor mode."
emacs,3a0z7k,ghyspran,1 point,Fri Jun 19 18:16:17 2015 UTC,"I don't think your question got through: what you ask is this (if I got it right): what are the relevant emacs lisp functions etc. needed to implement something like this: when I call function ""close_delimiter"", go back from current cursor position, and look for one of the following characters: "", ', (, [, { (customizable list, of course). The first one you find, remember it, find its ""closed"" pair equivalent (i.e. "", ', ), ], } etc.) and apply it at cursor position. I think the question is not really about PHP (whence the plural in the title: languages), and not really about finding a perfect result.   (If I put it this way, even for me it doesn't seem too difficult to implement. :P )"
emacs,3a0z7k,VanLaser,2,Wed Jun 17 19:52:05 2015 UTC,"I'd start with only doing it for delimiters where the opening and closing delimiters are different characters. That wouldn't be that difficult, but doing it more generally would be tougher, because now you have to differentiate  func(""Parameter""   from  func(""Parameter   not to mention stuff like  func(""Parameter\""""   or  func(""Parameter\""   or  func(""Parameter'   You would even without handling quotes need to figure out how to differentiate  func(""something, [""   from  func(""something"", [   And what's the proper behavior for this?  func(""something [   So you'd probably need to do a bit more complicated than just walking backwards across the character stack. You would also need to determine what the behavior should be when you aren't at the end of the buffer.  Also, you would need to keep a stack of closed delimiters you encounter so you can handle  func([$variable1, $variable2]   properly, but that's more straightforward."
emacs,3a0z7k,VanLaser,1 point,Fri Jun 19 03:49:30 2015 UTC,"Thanks, what you say makes a lot of sense, of course! A ""better"" solution seems to be one that re-uses the parser which, for example, already does the syntax check/coloring, and ask it for the current context, from which to extract a possible mapped closing character/sequence."
emacs,3a0z7k,VanLaser,1 point,Fri Jun 19 08:35:56 2015 UTC,"Hi VanLaser! My friend, I eventually found my solution here, but I appreciate your replies too.  For inspiration how the author implemented it, you can check the link."
emacs,3a0z7k,VanLaser,2,Fri Jun 19 18:18:05 2015 UTC,"Thanks! Now if that solution would work with C/C++! (I mean, it works, but how can I add ; at the end of the line, as with PHP? - I don't know enough elisp to port that code to a C/C++ specific mode)."
emacs,3a0z7k,matthewbregg,1 point,Sat Jun 20 08:31:32 2015 UTC,"As you can see on the issue in the link, the maintainer was more than willingly to help me out. It's same as with C/C++, just open a ticket there please."
emacs,3a0z7k,green_transistor,1 point,Sat Jun 20 09:41:06 2015 UTC,"Thanks, I will probably do so, at one point. :)"
emacs,3a0z7k,kaushalmodi,1 point,Sat Jun 20 22:14:02 2015 UTC,"Thanks for your reply. I eventually found my solution here, but I appreciate your reply too. In the case the link helps you, for inspiration how the author implemented it. General-close seems to be nifty implemented."
emacs,3a0z7k,kaushalmodi,1 point,Fri Jun 19 18:17:22 2015 UTC,"You're right, it would be a way too. But then I'm wondering how I could implement it?"
emacs,3a0z7k,ghyspran,1 point,Wed Jun 17 20:46:06 2015 UTC,"One could probably start from here - but I wouldn't know, as I don't know elisp."
emacs,3a0z7k,kaushalmodi,1 point,Wed Jun 17 20:58:40 2015 UTC,"I threw together this, although it doesn't handle "", ', or do semicolons."
emacs,3a0zvf,drilldrive,9,Tue Jun 16 11:20:33 2015 UTC,"You can't ""open"" the archive with 7zip and run emacs from ""inside"" the compressed archive. (I get exactly your error message if I try to do that.)  You should use 7zip to unzip the emacs distribution completely (right-click and ""Expand to..."").  Aftet that, you install it.  ""Install"" in this case means to put the folder that the archive expands to where you want it, and add that directory to your %PATH%."
emacs,3a0zvf,OnorioCatenacci,3,Tue Jun 16 12:03:24 2015 UTC,How are you actually trying to start emacs?  What's the command you're giving?  I use the runemacs command from the c:/emacs/bin directory and everything starts fine for me (on Windows 8.1).  Try that or tell us what you're actually trying to run.
emacs,3a0zvf,RobThorpe,1 point,Tue Jun 16 11:41:13 2015 UTC,"I am starting it directly from 7zip. I looked up emacs in c: and I found a file named emacs but when I clicked on it it said that the specific path does not exist.When I try to start emacs from emacs.exe it gives me the error message from the main post and when I try to start from runemacs it says ""could not start emacs""."
emacs,3a0zvf,ax_reddit,2,Tue Jun 16 11:58:27 2015 UTC,"As Moneyness says above, you can't do that. You have to unzip the whole archive to the C: drive. This is the case for most programs distributed in zip files."
emacs,3a0zvf,madwilliamflint,3,Tue Jun 16 12:33:59 2015 UTC,Here is a good link how to run Emacs under Windows 7. I assume it works like that under Windows 8.1.  http://sachachua.com/blog/2012/06/making-gnu-emacs-play-well-on-microsoft-windows-7/
emacs,3a01r8,redguardtoo,2,Tue Jun 16 04:11:38 2015 UTC,"I installed the new update, and now Nerdcommenter is not working properly anymore.   For example, I have a html-file with web-mode. Then I made this:  <script> var foo = bar; var foo = bar;  </script>  Some text in HTML field.   When you call nerdcommenter with evilnc-comment-or-uncomment-lines for the first line only  inside the script, it works properly. Then I visually select the both lines inside the script and I get HTML comment tag instead<-- -->. Which is weird, because you get that only when you comment a line out outside the script (in the HTML-part on the line of ""Some text in HTML field."")."
emacs,3a01r8,ReneFroger,2,Tue Jun 16 14:17:20 2015 UTC,"It's fine on my setup. evil-nerd-commenter does not deal with comment syntax directly in web-mode. It only ensures the right region is selected, web-mode will handle the actual comment things. so it's unlikely a evil-nerd-commenter regression.  If you cannot resolve it by upgrading web-mode, raise an issue on github with more details (web-mode version, for example)."
emacs,3a04i4,starbreakerauthor,1 point,Tue Jun 16 04:38:31 2015 UTC,"What's the name for this release? ""Paracelsus""? ""ChemicalWedding""? ""Fullmetal""? :)"
emacs,39zyk8,dvcrn,6,Tue Jun 16 03:43:24 2015 UTC,"I don't think the other answers is quite helpful, but truthful.  You could try to use Steve Purcells startup benchmark script: https://github.com/purcell/emacs.d/blob/master/lisp/init-benchmarking.el I have found it quite useful. Just add it to the top of your init file and when Emacs have started you get the load times by doing C-h v sanityinc/require-times.  Other useful stuff could be to only require features when they are needed, checkout ""eval-after-load"", or add startup hooks to certain modes ""(add-hook 'elisp-mode '(lambda () dostuff))"". Both need knowledge about elisp and Emacs, so this is maybe not for complete novices :)  Edit: Oh, and you can start your emacs with the -q flag to load vanilla emacs, and then load your elisp-files with ""M-x load-file""."
emacs,39zyk8,visnae,2,Tue Jun 16 06:01:32 2015 UTC,"For benchmarking purpose, one might try esup too."
emacs,39zyk8,tampix77,16,Tue Jun 16 08:15:31 2015 UTC,Because you've listened to bad advice. Start with vanilla Emacs. Starting with someone else's configuration or using Spacemacs is like eating someone's secondhand food because it tasted good when they ate it.
emacs,39zyk8,Mitchical,8,Tue Jun 16 05:42:01 2015 UTC,Agree partially. Spacemacs I don't think I would call another person's configuration exactly. It's managed by a community to provide a decent general out of the box experience
emacs,39zyk8,abo-abo,5,Tue Jun 16 07:23:37 2015 UTC,"Vanilla Emacs is also managed by a community to provide a decent general out of the box experience.  If you happen to see a glaring omission, whether it's a bug you have or feature you want, use M-x report-emacs-bug.  There are also emacs-devel@gnu.org and help-gnu-emacs@gnu.org mailing lists.  And #emacs on freenode.  Spacemacs is great for transitioning Vim users to Emacs. Just like vanilla Emacs is great for transitioning non-Vim users to Emacs (can you believe I thought Kate was awesome just 5 years ago?).  But having your own config is above and beyond anything Vanilla or Spacemacs can offer.  It does require some investment, but it's great in the end. The difference is that Vanilla is an empty cup for you to fill, while Spacemacs is already full (of some cool packages, but still full).  My suggestion for you (if you're really a die-hard Vim fan) is to use Spacemacs until you decide that you won't be switching editors for the next 20 years. Then switch to Vanilla + Evil and add your own stuff at your own pace."
emacs,39zyk8,tuhdo,2,Tue Jun 16 10:40:52 2015 UTC,"Then switch to Vanilla + Evil and add your own stuff at your own pace.   Then you finally end up something like Spacemacs anyway, since most of the ""configuration"" stuffs most users do are copying from the package homepage. You can exclude any package you don't use in Spacemacs."
emacs,39zyk8,abo-abo,6,Tue Jun 16 12:17:37 2015 UTC,"since most of the ""configuration"" stuffs most users do are copying from the package homepage   If a thing is ""configurable"", it means that there's a decision to be made, otherwise there's no point to that configuration.  Spacemacs is basically ~2000 ""decisions"" pre-made, so you don't have to.  Now think, what are the chances that you 100% agree with all these ~2000 decisions?  If you disagree with ~10, and it's possible to change them without conflicts - great.  But if it's ~100, it might be wise to start all over, instead of patching and resolving conflicts."
emacs,39zyk8,abo-abo,3,Tue Jun 16 12:26:44 2015 UTC,"Spacemacs is basically ~2000 ""decisions"" pre-made, so you don't have to. Now think, what are the chances that you 100% agree with all these ~2000 decisions?   Exactly. This is why I think advising beginners to use Spacemacs is bad advice. While it is a great configuration, it's something a user should only move to after becoming familiar with Emacs and thus in a position to make an educated evaluation of these ~2000 decisions themselves. Telling someone ""it's just better, you don't have to know why"" feels very wrong to me."
emacs,39zyk8,tuhdo,2,Tue Jun 16 21:47:02 2015 UTC,"This is why I think advising beginners to use Spacemacs is bad advice   It's not bad advice. Spacemacs is great for getting a wow-effect going, just to get the new user (who used Vim previously) hooked, give him motivation to continue.  So it can bring in more users. There are two types of users: ""tinkerers"" and ""getting-thing-done-ers"".  For GTD-ers, it doesn't matter: they can stick to Spacemacs for years with zero personal customization.  The tinkerer will eventually drop Spacemacs, so maybe there's a bit of a waste of effort; but it could be that otherwise he wouldn't bother with Vanilla Emacs + Evil, and just continue to tinker Vim.  So if you know the person, you likely know the type of user he is:   If he's a GTD-er who used Vim - point him to Spacemacs. If he's a tinkerer who used Vim - point him to Vanilla + Evil. If he's a GTD-er who didn't use Vim - point him to Prelude. If he's a tinkerer who didn't use Vim - point him to Vanilla."
emacs,39zyk8,ghyspran,2,Wed Jun 17 08:47:25 2015 UTC,"If you don't like a package, you can exclude it or don't use it. Spacemacs also fixes integration problem between packages. For example, new user will not know how to enable auto-completion in Python REPL with company properly; see this PR. Especially between Evil and Emacs packages.  Spacemacs does not override any key binding, it only adds new key bindings (except for M-m in Emacs editing mode, since that key binding is used for accessing Spacemacs command group such as Helm, file, buffer...). If Vim editing style is used, no default binding is lost since it is bound to SPC key in normal mode."
emacs,39zyk8,tuhdo,1 point,Tue Jun 16 12:35:16 2015 UTC,Spacemacs with evil-mode overrides a bunch of C- bindings in both normal and insert modes to be consistent with vim (including C-u)
emacs,39zyk8,ghyspran,1 point,Fri Jun 19 03:55:48 2015 UTC,Can you give some examples?
emacs,39zyk8,tuhdo,1 point,Fri Jun 19 04:22:35 2015 UTC,"Some examples:  In both insert and normal modes:  C-n, C-p, C-e, C-y, C-r  In normal mode only:  C-u, C-b, C-f"
emacs,39zyk8,aport,0,Fri Jun 19 23:30:44 2015 UTC,"Yeah, I couldn't imagine using some else's Emacs configuration!"
emacs,39zyk8,RobThorpe,9,Tue Jun 16 06:21:30 2015 UTC,"The benefits of Spacemacs:   Spacemacs is community configured. If it works for majority of people, it's unlikely that things break and you should not have any problem. If there are problems, since this is a community, the bugs can be reported quickly to identify the problems and fix it. If you use other random configuration without a community, the configuration may work for that person but it's likely that it won't work for you. Since Spacemacs is community configured, it's already done many things for you. For example, one day you want to learn Python and want to have a quick development environment without even copy/paste configuration Elisp code? Easily, just add Python layer that already configured popular Python packages to create a Python development environment for you. The only thing you need to do next is to read the layer documentation. No Elisp required. When you have problems, you can go to gitter chatroom and ask for help. Many Vim users who switch to Emacs are there. If you go to #emacs, chances are you are told to use stock Emacs without your beloved Vim key bindings since it's ""the better way"". Using vanilla Emacs meaning you can use awesome packages like Helm and Projectile and more that boost your productivity ten folds. Enjoy crafting find command while I get a file anywhere in my project and even in my file system within a few key strokes."
emacs,39zyk8,sigzero,3,Tue Jun 16 06:24:19 2015 UTC,spacemacs it is then. Too bad I have to configure all keybindings from scratch making my work yesterday void :(
emacs,39zyk8,redguardtoo,9,Tue Jun 16 09:57:14 2015 UTC,If you're new to emacs I wouldn't bother debugging someone else's random configuration.  Spacemacs is highly recommended. It's probably the best out of the box setup that exists.
emacs,39zyk8,freakhill,2,Tue Jun 16 04:59:32 2015 UTC,"I had a read of the config you copied. It requires the computer it's on to be setup in a particular way. I don't know in exactly what way, but it depends on certain commands being present.  That may be causing the problem.  More likely though there's a package that this init uses that's changed it's init sequence recently.  A command that used to do very little now imports a library using ""require"".  So, you're attempting to import a library (on that's probably not present) 100s of times a second.  I agree with the others that maintained ""starter kits"" like Prelude and Spacemacs are better than using other peoples config, and so is vanilla Emacs."
emacs,39xkpo,tmalsburg2,15,Mon Jun 15 16:54:28 2015 UTC,It has a butterfly key.  I can finally try M-x butterfly!
emacs,39xkpo,panicnot42,1 point,Tue Jun 16 00:51:19 2015 UTC,For those who don't know: xkcd 378
emacs,39xkpo,Kaligule,1 point,Tue Jun 16 11:43:15 2015 UTC,"Image  Title: Real Programmers  Title-text: Real programmers set the universal constants at the start such that the universe evolves to contain the disk with the data they want.  Comic Explanation  Stats: This comic has been referenced 415 times, representing 0.6080% of referenced xkcds.    xkcd.com | xkcd sub | Problems/Bugs? | Statistics | Stop Replying | Delete"
emacs,39xkpo,xkcd_transcriber,14,Tue Jun 16 11:43:37 2015 UTC,"Jesse is a really good friend of mine, and he's been obsessing about his keyboard for years.  He only recently decided to make a product of it. I'm fairly certain he is, in fact, an emacs user."
emacs,39xkpo,ivorjawa,7,Mon Jun 15 20:46:14 2015 UTC,"I use an Ergodox, which is pretty similar1, and love it for Emacs. Here's my custom layout, which, othre than being on an Ergodox, differs from a traditional keyboard in that it's Colemak.  The short of it is that having control and alt under the thumbs is awesome. The super customizability -- you can put any key on any button -- is another.  Feel free to AMA, if you have any questions regarding this kind of keyboard and Emacs.  [1] There are some differences, but they're small compared to the difference if you're coming from a standard keyboard."
emacs,39xkpo,zck,1 point,Mon Jun 15 20:06:14 2015 UTC,"Just got an ergodox myself last week, and it really does look similar to this concept. I have to say I personally much prefer the aesthetics of the ergodox (I  have the black aluminum/blank black key combo). There are a couple of other minor drawbacks I can see - since this uses custom keyswitches and custom molded keys there's really no way of customizing the look of the keyboard itself. On the ergodox you can choose from all the different cherry switches and a huge selection of custom keycaps  - I just ordered different sets to make mine look cooler. It also appears a bit less appealing to me since it includes labeled keys and kind of a ""default layout"".  But these are minor complaints. Overall this is a great project, since it's another project that shows that there's a market for custom built, premium keyboards, just like the Ergodox EZ project: https://www.indiegogo.com/projects/ergodox-ez-an-incredible-mechanical-keyboard#/story"
emacs,39xkpo,Lokaltog,1 point,Tue Jun 16 09:23:39 2015 UTC,"The Model01 uses custom keycaps, but not custom switches -- it has Matias switches. Of course, they're not Cherry switches, so they are much less common.  The main upside for me of the Model01 over the Ergodox is improved thumb keys. I'm less excited about the six fewer keys per hand.  They are offering blank keycaps, and will sell additional sets (see the FAQ at the bottom of the kickstarter). It's not as nice as having standard keycap sizes, but you do have options.  I do wonder if they have any sort of layers. Because I use Colemak, but often bring my ergodox to places where other people are (work, meetups, etc.), I really benefit by having a QWERTY layer I can switch on to let people try it. Having Colemak-only means it's much harder for me to show people."
emacs,39xkpo,zck,7,Tue Jun 16 16:04:49 2015 UTC,"Well, any keyboard with this design might. It's basically everything I want out of a keyboard, but it's one expensive wish - why can't I have a split, ergonomic, matrix keyboard for less than, oh say, $200 (=ErgoDox via Massdrop)? Where's the mass-market, cheapo plastic, $20 variant?"
emacs,39xkpo,nimkull,4,Mon Jun 15 21:55:37 2015 UTC,"It's tougher to do than you think. The option that gives you the most freedom for laying out the keys is a mechanical keyboard (you can put the switches wherever you want on the PCB, whereas a membrane, you need to make a special mold for the rubber membrane stuff). But, if you make a mechanical keyboard, you're already over $20 just for the switches. Which means you might as well go all-out and make a really nice keyboard, since you can't make a really cheap one."
emacs,39xkpo,randrews,1 point,Tue Jun 16 03:31:20 2015 UTC,"The Ergodox EZ is a good demonstration of this - it's a cheapo, prebuilt plastic variant for $240. Check out their pricing breakdown and project plan, there really isn't any way of making a premium keyboard for a relatively tiny customer base which is also cheap.  https://www.indiegogo.com/projects/ergodox-ez-an-incredible-mechanical-keyboard#/story"
emacs,39xkpo,Lokaltog,1 point,Tue Jun 16 09:26:58 2015 UTC,"You could theoretically make a rubber dome keyboard that has an ErgoDox layout, but then you're amortizing the cost of the mold for the rubber sheets (two, you can't reverse it like the PCB) over however many you sell, and the ergonomic keyboard market isn't big enough to do that."
emacs,39xkpo,randrews,3,Tue Jun 16 15:43:36 2015 UTC,It's too elevated and would require something under the wrists for users tempted to bend their wrists and place their forearms on the table.
emacs,39xkpo,lawlist,1 point,Mon Jun 15 19:55:33 2015 UTC,I don't get what you're saying - it extends under the wrists.
emacs,39xkpo,fantastipants,3,Tue Jun 16 13:45:50 2015 UTC,I'm curious which keycode that any key maps to :)
emacs,39xkpo,villiger2,3,Mon Jun 15 21:22:51 2015 UTC,I suppose you could look it up in the source code of the firmware: https://github.com/obra/KeyboardioFirmware/
emacs,39xkpo,fantastipants,5,Mon Jun 15 22:20:12 2015 UTC,"I'm sure it's great for some, but for me, any keyboard without a Trackpoint is a non-starter.  I don't want to lift off my home keys just to use the mouse."
emacs,39xkpo,420_blazer,5,Mon Jun 15 17:34:57 2015 UTC,It looks like they have a function key + WASD type of thing + right and left click setup. I'm a bit skeptical to it.
emacs,39xkpo,fantastipants,3,Mon Jun 15 18:19:24 2015 UTC,"Yeah, it would need to be some pressure-sensitive setup to be a replacement I think.  I didn't look carefully enough to see if it was."
emacs,39xkpo,fantastipants,3,Mon Jun 15 19:31:13 2015 UTC,"Good point.  Using the trackpoint on my X220 is so natural that I'm not even aware that I'm doing it.  So yes, I might miss the trackpoint.  On the other hand, I do most of my work in Emacs where the mouse pointer isn't really needed anyway and even in Firefox I use the keyboard for most things."
emacs,39xkpo,verdigris2014,2,Mon Jun 15 19:09:39 2015 UTC,"Why would you use a mouse at all, let alone an atrocity like one built into the keyboard. Just use the keyboard full time."
emacs,39xkpo,angelic_sedition,5,Mon Jun 15 18:33:24 2015 UTC,"I love the keyboard and use it where I can, but I don't think dropping the mouse entirely is all that realistic.    There are certainly some tasks where only the mouse really works, and many more where the benefits of using the keyboard are not compelling to me."
emacs,39xkpo,Sathan,3,Mon Jun 15 19:30:16 2015 UTC,"You get these comments frequently in emacs forums. I appreciate that a mouse will slow a fast touch typist, but apart from blind people reliant on text to speech, surely everyone uses a mouse at some point? You don't play games for example?  Surely even the people who do only use emacs for a very specific task like speed coding, transcripts or whatever would have a mouse plugged in, just in case?"
emacs,39xkpo,vifon,3,Tue Jun 16 02:42:24 2015 UTC,You can't really use a trackpoint to play games though (at least not an fps). I pretty much never have a mouse plugged in if I'm not gaming.
emacs,39xkpo,jan_path,1 point,Tue Jun 16 03:56:16 2015 UTC,"I suspect that these comments are frequent in emacs forums because the subject of discussion is the use of emacs - something that does not require (and can actually be hindered by) a mouse. Of course I'll use a mouse for gaming, but if I'm using emacs then I'm probably not gaming."
emacs,39xkpo,Starlight100,2,Tue Jun 16 05:35:04 2015 UTC,"Well, you need to move that pesky mouse out of the way somehow, don't you?"
emacs,39xkpo,lawlist,2,Mon Jun 15 23:25:46 2015 UTC,How about unclutter?  Edit: it makes the mouse invisible after it doesn't move for some time.
emacs,39xkpo,parolang,1 point,Tue Jun 16 08:09:38 2015 UTC,Stumpwm solves that with the banish function. Bound to C-t b by default.
emacs,39xkpo,zck,1 point,Tue Jun 16 03:41:48 2015 UTC,"This post almost had me unpacking my fleet of IBM clicky keyboards with the built-in trackpoint -- yep, I have a couple of each color in storage -- black and white."
emacs,39xkpo,parolang,1 point,Mon Jun 15 19:57:19 2015 UTC,Looks awesome. Especially wondering if the rec key is for macros. But how do you type round parentheses?
emacs,39xkpo,webpage_down_bot,1 point,Mon Jun 15 20:32:52 2015 UTC,"I'm assuming it's like a regular QWERTY keyboard -- Shift+9, Shift+0.  How do you type round parens?"
emacs,39xkpo,MeanLittleBunny,1 point,Mon Jun 15 21:05:39 2015 UTC,"Okay duh, don't see it in the picture. I just looked at the layout diagram."
emacs,39xkpo,davkol_cz,1 point,Mon Jun 15 22:46:15 2015 UTC,Mirror
emacs,39yjch,ReneFroger,1 point,Mon Jun 15 20:54:30 2015 UTC,"If that doesn't suits your preferences, you could try this one too."
emacs,39yjch,rson,2,Mon Jun 15 20:56:40 2015 UTC,Thanks for the package and for providing an alternative too.
emacs,39yjch,DasEwigeLicht,1 point,Tue Jun 16 17:58:33 2015 UTC,"It'd be a nice package, if only popup.el wasn't such a buggy mess.   That tip is supposed to inform me about multiple spaces before an operator. Instead it shows nothing but swallows the entire next line. Here's the input needed to break this package:  x  = 1 y  = 2"
emacs,39yjch,rson,1 point,Mon Jun 15 22:21:33 2015 UTC,I appreciate the package but I have the exact same experience with popup.el.  I especially hate it when combined with whitespace-mode because the spaces used to align the popup all get displayed by whitespace-mode and it just looks nasty.
emacs,39xkwm,excitedaboutemacs,8,Mon Jun 15 16:56:01 2015 UTC,"I applaud this, and strongly recommend to everyone to reduce your mouse use as much as possible to avoid RSI.  It's not just the fact you have to move your hand away from the keyboard, but that the muscles are under a great deal of strain during a drag - when your hand must hover over the mouse yet also keep the pressure down on the mouse button.  Doing it ten or one hundred times won't hurt you but I might make thousands of selections during a given week.  M-x praise-emacs, I almost never use the mouse to do so."
emacs,39xkwm,TomSwirly,3,Mon Jun 15 17:22:28 2015 UTC,Now my co-workers are wondering why I am holding my sides and laughing like a maniac.
emacs,39xkwm,kaushalmodi,4,Mon Jun 15 18:21:48 2015 UTC,"I use a couple of different ways to select text:   expand-region (package available on Melpa) C-SPC followed by usually C-p, C-n, M-b, M-f, C-a, C-e, C-M-b, C-M-f, M-{ or M-} C-SPC followed by forward or reverse search (C-s/C-r) C-x h - mark whole buffer"
emacs,39xkwm,kaushalmodi,1 point,Mon Jun 15 17:47:28 2015 UTC,"Something like expand-region is what Im looking for, but it doesnt work well with VHDL :(."
emacs,39xkwm,RobThorpe,2,Mon Jun 15 20:46:11 2015 UTC,"I use Verilog and expand-region works fine when selecting signal names (we use snake_case_names consistently everywhere). For selecting modules, classes, functions, etc, the verilog-mode provides custom forward-sexp (C-M-f) and backward-sexp (C-M-b) equivalents. So selection involves C-SPC C-M-f or C-SPC C-M-b.   vhdl-mode also has vhdl-forward-sexp, vhdl-backward-sexp, vhdl-mark-defun."
emacs,39xkwm,kaushalmodi,1 point,Mon Jun 15 21:27:33 2015 UTC,"What do you do about the actual M-} and M-{ commands, i.e. the paragraph movement commands?  I find those very useful for selecting things."
emacs,39xkwm,cocreature,1 point,Tue Jun 16 12:35:11 2015 UTC,"After I posted the above answer, I realized that my ""custom"" bindings were in fact the default bindings.  I thought I needed to bind those manually as I did not like the default C-<up>/C-<down> bindings to do the same thing (but using arrows).  Update: I removed the redundant binding mentions from the post you commented on."
emacs,39xkwm,cocreature,3,Tue Jun 16 13:11:55 2015 UTC,avy (or previously ace-jump-mode) followed by C-SPACE and another call to avy (which I obviously have a shortcut for).
emacs,39xkwm,jsled,1 point,Mon Jun 15 18:06:57 2015 UTC,Which Avy command do you use? Is the precision it has over Ace jump worthwhile?
emacs,39xkwm,jsled,1 point,Mon Jun 15 20:45:42 2015 UTC,"I use a mix of avy-goto-char, avy-goto-char-2 and avy-goto-word-1. I'm not sure you get a lot of speed out of it over ace jump, but I like some things, like not overwriting the actual chars but instead prepending, that make it worthwile for me to use it."
emacs,39xkwm,rberenguel,1 point,Wed Jun 17 05:18:30 2015 UTC,I switched :D I like the keys it uses. I disliked the capitalizations ace-jump used.
emacs,39xkwm,nandryshak,2,Wed Jun 17 14:33:05 2015 UTC,"""mark, (reverse-)(regex-)search"" is pretty common for me.  ""point-to-register, [move to other end of selection], mark, jump-to-register"".  ""mark, C-u #, [direction]"" if I know I want N lines or something."
emacs,39xkwm,ReneFroger,1 point,Mon Jun 15 17:13:12 2015 UTC,Can you explain this a little more? Im confused on the first two methods.
emacs,39xkwm,ReneFroger,1 point,Mon Jun 15 20:47:19 2015 UTC,"Sure.   ""mark, (reverse-)(regex-)search"" is pretty common for me.   I set the mark (C-SPC), then search forward (or backward) based on either a literal string or regex that's sufficiently-discriminatory to hit where I want the selection to end.   ""point-to-register, [move to other end of selection], mark, jump-to-register""   I save the current point where I already am the beginning/end of the selection into a register (""C-x r SPC a"" for register ""a""), then just naturally move to the other end of the selection by whatever means, set the mark, then jump to the other end of the selection via the register.  …  but this doesn't actually work, sorry. Wishful thinking. Probably some trivial elisp to do something like it, though.   ""mark, C-u #, [direction]"" if I know I want N lines or something.   As described."
emacs,39xkwm,nautola,2,Mon Jun 15 21:58:14 2015 UTC,"Usually I navigate where I want to go (most often with incremental search forward or backward, arrow keys if I'm really close, C-e/C-a if it's on the current line/end of line) and since I use evil-mode, use a text object to do whatever (daw for delete around word for instance) is needed. Before I had evil I'd just C-space and go to whatever I wanted to copy/delete. No matter how many keystrokes... it is always more precise/efficient with the keyboard once you can navigate fast."
emacs,39xkwm,kcin,1 point,Mon Jun 15 18:46:24 2015 UTC,"No matter how many keystrokes... it is always more precise/efficient with the keyboard once you can navigate fast.   Thanks for that, I question this sometimes, but its worth a shot!"
emacs,39xkwm,lawlist,2,Mon Jun 15 20:47:54 2015 UTC,"Besides C-SPC and movements, I usually use C-M-SPC (mark-sexp), C-@ (mark-word), C-M-h (mark-defun) and smartparens' sp-select-next-thing-and-exchange combined with numerical arguments."
emacs,39xkwm,redguardtoo,3,Mon Jun 15 21:38:47 2015 UTC,Have you tried Evil mode?
emacs,39xkwm,ReneFroger,1 point,Mon Jun 15 18:25:27 2015 UTC,"I havent. I want to try spacemacs, but I have no vim/vi experience.  Edit: Im pretty comfortable with most tasks day to day, so Im a little hesitant to start something new. Is it worth it?"
emacs,39xkwm,redguardtoo,1 point,Mon Jun 15 20:42:12 2015 UTC,"Spacemacs is a full package. You don't need that, I guess. You could try evil-mode only. And try the vimtutor, to get a idea about Vim keys."
emacs,39xkwm,verdigris2014,1 point,Mon Jun 15 20:48:58 2015 UTC,"I'm using evil-mode now, and I would rather be using default emacs.    I came from Vim, but I feel that using evil-mode hinders customization.  I don't know what the right emacs commands for doing stuff are.  I had to go out of my way to learn about the mark and the point.   It's an abstraction on top of base emacs, and I don't like that."
emacs,39v6wg,eric-plutono,8,Mon Jun 15 01:52:07 2015 UTC,Can anyone tell me what I'm looking at?
emacs,39v6wg,ReneFroger,2,Mon Jun 15 09:59:20 2015 UTC,It's a self-hosting Forth compiler for a subset of Forth. Apparently the core of the compiler is written in Emacs Lisp and hence comes with a built-in assembler for Emacs Lisp bytecode.
emacs,39v6wg,zaph0d,1 point,Wed Jun 17 05:43:47 2015 UTC,"It's not for public consumption, and certainly not for the average Emacs user."
emacs,39v6wg,larsbrinkhoff,0,Mon Jun 15 17:34:38 2015 UTC,"You looking at shitty details. Go up the tree and look at ""forth.el"". If you do not get it, do not waste your time, it is really not that important. Those nerds have their own spacetime branching to infinity."
emacs,39v6wg,codercoder,1 point,Mon Jun 15 15:59:48 2015 UTC,"I always wanted some kind of hybrid of vi movement commands and forth as some kind of macro language, in between regular macro recording and elisp (i.e. something you could write quickly in a minibuffer)."
emacs,39t87e,kit1980,5,Sun Jun 14 15:25:55 2015 UTC,"I wrote a book in Emacs using LaTeX, and now doing a second in the same way. Worked really well for me. PDF production was no problem. I tried using pandoc for ePub conversion, but it was too buggy to be useful. In the end I wrote my own LaTeX -> epub converter. That was no big deal, really, about ~1000 lines of Python, a good bit of which is epub markup templates."
emacs,39t87e,larsga,1 point,Sun Jun 14 17:18:08 2015 UTC,This is exactly why I wanted a source format that would not result in issues converting LaTeX into ePub.
emacs,39t87e,mickeyp,0,Sun Jun 14 17:42:44 2015 UTC,Except it did result in issues. :-)
emacs,39t87e,larsga,1 point,Sun Jun 14 18:06:18 2015 UTC,"Sorta true :-) Well, a lot of those issues are down to ePub rendering so very differently on each platform. Pandoc did a fine job converting it otherwise. Converting to PDF, on the other hand, was a lot more work as I had to figure out what Pandoc could and could not do. Knowing what I know now (hindsight and all) I'd find it a lot easier. But then that's usually the case."
emacs,39t87e,mickeyp,3,Sun Jun 14 18:19:41 2015 UTC,That site is just about unusable on a 1024 width resolution.  Even zooming the font out 5 times still requires horizontal scrolling.
emacs,39t87e,xenow,3,Mon Jun 15 06:35:00 2015 UTC,So why not AsciiDoc instead of rst?
emacs,39t87e,wrong_assumption,2,Mon Jun 15 13:55:21 2015 UTC,"I find it interesting how the author says there's ""no documentation"", http://pandoc.org and the README itself is huge.  But otherwise great work!"
emacs,39t87e,zackp30,2,Sun Jun 14 17:08:52 2015 UTC,That's the man page I mentioned. And it scarcely mentions how it parses reStructuredText.
emacs,39t87e,mickeyp,1 point,Sun Jun 14 17:42:14 2015 UTC,"Ahh, I see, sorry for my confusion,  and sorry for duplicating this on Twitter,  didn't realize you are also on reddit."
emacs,39t87e,zackp30,1 point,Sun Jun 14 17:47:38 2015 UTC,'s cool :) On the outset it does seem like it has a lot but once you start using it in anger you realize it's just a command reference
emacs,39t87e,mickeyp,2,Sun Jun 14 17:48:53 2015 UTC,I think the article is interesting. I also do own that Emacs book and I think it is a great resource.
emacs,39t87e,dahanbn,2,Sun Jun 14 18:05:10 2015 UTC,"Pretty close to what I have. I ended up building a Perl-based library around Pandoc with much the same thing, mainly to fix Pandoc's LaTeX and ePUB generation. Well, that and I use Markdown+YAML instad of reStructred, but pretty good description."
emacs,39t87e,dmoonfire,2,Sun Jun 14 18:48:07 2015 UTC,It it perchance on CPAN?
emacs,39t87e,jplindstrom,2,Thu Jun 18 14:08:42 2015 UTC,"So the idea was I’d write the book in reStructuredText and convert it to ePub and LaTeX using Pandoc.  Another option is, of course, Org mode. Unfortunately converting Org mode from one format to another made it difficult to work with. I could’ve exported Org mode as HTML, but like LaTeX there are many ways of doing the same thing.   Pandoc will convert org-mode, and in my experience, does a good job."
emacs,39t87e,bachmeier,2,Mon Jun 15 00:29:41 2015 UTC,"It is super sad when everyone has to write their own converters because the lightweight markup options cover 80% of the use cases for writing books.  I also chose rst (epub, latex), but if I were to do it again I would create my own markdown variant."
emacs,39t87e,m_harrison,1 point,Mon Jun 15 15:04:07 2015 UTC,"But it's definitely a ""lesson learned"" for both of us. rst has that extensibility but pandoc did not."
emacs,39t87e,mickeyp,1 point,Mon Jun 15 16:41:51 2015 UTC,"I found the most fascinating part the discussion of the epub format.  A stylesheet and HTML pages packed into an archive sounds probably one of the least appropriate formats for producing a book I could imagine. I own very few epub books so I don't know what the benefit is, except that it can be displayed on a Kindle.  Was this raw stupidity/laziness on Amazon's part or is there some deeper reason? File size?"
emacs,39t87e,pzone,4,Mon Jun 15 04:13:42 2015 UTC,"What plausible alternatives to ePub do you know of? An alternative needs to:   let you use italics and at least two sizes of fonts, let you embed images, allow viewing software to easily reflow the text to fit any screen width.    PDF fails (3) --not that it needs to fail in theory, but the software I've seen that tries to reflow PDFs does it badly unless they are built in a special way to allow the operation.  The only formats I've seen that satisfied those points are eBook formats: ePub, Mobi and Microsoft Lit. Of the 3 I vastly prefer ePub because being just an archive of HTML and CSS it's easy for me to tinker with."
emacs,39sl5s,dexafree,7,Sun Jun 14 10:25:28 2015 UTC,Do you specifically need markdown? Org-mode handles syntax coloring of code blocks just fine if you turn on org-src-fontify-natively and it's much more powerful than markdown.
emacs,39sl5s,DasEwigeLicht,1 point,Sun Jun 14 10:39:58 2015 UTC,"I use it to take my university notes, that are on a git repository on my server, which every time a push is received, compiles all the .md files and serves it in a Jekyll blog.  So yes, I'd need markdown, but thanks for the suggestion, I definitely have to give a try to org mode."
emacs,39sl5s,DasEwigeLicht,5,Sun Jun 14 10:41:54 2015 UTC,Then you might want to look at this.
emacs,39sl5s,BruceConnor,3,Sun Jun 14 10:44:35 2015 UTC,"Not to keep pushing it on you, but org-mode exports to markdown (and to jekyll, for that matter), so you could still maintain that workflow.  Though it would certainly be nice for markdown-mode to have fancy syntax highlighting as well."
emacs,39sl5s,cpbotha,3,Sun Jun 14 16:14:48 2015 UTC,"I'm the author of the vxlabs blog post you cite.  I have since switched to org-mode, which as /u/DasEwigeLicht says is indeed much more powerful (and fun!). You can even evaluate the blocks of code you embed, and have the output of those blocks appear in the same org-mode document. See this post for example: http://vxlabs.com/2014/12/04/inline-graphviz-dot-evaluation-for-graphs-using-emacs-org-mode-and-org-babel/  (These days, I also write most of my blog posts in org-mode...)"
emacs,39sl5s,Kaligule,1 point,Wed Jun 17 20:31:15 2015 UTC,"Wow, thanks for your comment!  Definitely another reason to try to switch to org-mode (when I get to solve the emacsclient - org-mode issue...)  I will also try the code evaluation, for sure!"
emacs,39sl5s,Kaligule,1 point,Thu Jun 18 12:11:56 2015 UTC,Hey this sounds great.  Org mode (though praised by many) has never looked so clean and simple to me as markdown does.
emacs,39sl5s,Kaligule,1 point,Tue Jun 16 07:38:03 2015 UTC,"If you are interested on it, I wrote an article on my personal blog  http://www.dexa-dev.com/publicando-mis-apuntes-mediante-jekyll-git/  It's in Spanish, though.  I you are interested, just tell me and I will translate it to English ASAP :)"
emacs,39sl5s,excitedaboutemacs,1 point,Tue Jun 16 16:01:07 2015 UTC,"I am indeed very interested. Sorry, but the only Spanish word I know is Hombre ;)  Don't hurry, though, it is interesting now and will be interesting later, too.   Oh, by the way: I like your blog, it looks great. But as far as I can tell you don't write much about hombres, do you?"
emacs,39sl5s,DasEwigeLicht,1 point,Tue Jun 16 20:59:26 2015 UTC,"Sorry for being late, but now it's translated: http://www.dexa-dev.com/publishing-my-notes-with-jekyll-git/"
emacs,39sl5s,xuchunyang,1 point,Wed Jul 1 08:20:54 2015 UTC,"Wow, thank you. I will read as soon as possible."
emacs,39sl5s,kaushalmodi,1 point,Wed Jul 1 14:55:27 2015 UTC,"whoa, what theme does that?"
emacs,39sl5s,kaushalmodi,1 point,Tue Jun 16 21:14:45 2015 UTC,"The theme you see is my own. It's a work in progress, but I wouldn't mind pushing out a quick update if you tell me what's missing."
emacs,39sl5s,kaushalmodi,3,Wed Jun 17 00:27:23 2015 UTC,"Not a regular vim user, but when I open a Markdown file e.g., README.md with vim 7.4, vim doesn't recognize the format just like Emacs, i.e., both of them doesn't have built-in support for Markdown."
emacs,39sl5s,syl20bnr,3,Sun Jun 14 10:46:31 2015 UTC,"Forgot to say that it was done by using the vim-markdown plugin, adding it to the OP!"
emacs,39thbh,yagsuomynona,8,Sun Jun 14 16:52:44 2015 UTC,"Use Spacemacs. It is made for Vim users who switches, and it has documents targeted Vim users to help them get productive quickly."
emacs,39thbh,tuhdo,3,Sun Jun 14 17:05:19 2015 UTC,"the emacs manual is excellent.  take advantage of it.  also, the mass majority of emacs commands start with C-x or C-c, so there's minimal conflicts with vim bindings."
emacs,39thbh,hyperbling,3,Sun Jun 14 16:55:02 2015 UTC,"note: the emacs manual ≠ the official emacs tutorial. the latter is, well, pretty bad."
emacs,39thbh,vermiculus,2,Sun Jun 14 17:06:32 2015 UTC,"The Emacs tutorial is very good in my opinion. But it teaches the Emacs keybindings, that's what it's for. It's of no use to people using the Vi keybindings."
emacs,39thbh,RobThorpe,2,Sun Jun 14 21:23:15 2015 UTC,"While I think /u/vermiculus  is exaggerating the awfulness of the emacs tutorial, I tend to agree that it's not very good for the modern new user.  It's a great tutorial for a computer system from say 1983-2000 (perhaps being generous with that last year), an OK tutorial from 2001-2007 (2007 being around when IE 7 went tabbed...more on this in a moment), and kind of a bad tutorial since.  These periods mostly correspond to the type of personal experience with computers (and the role of the internet in the average users life).  First, it was mostly professional programmers.  Then a larger non-professional, but fairly tech-savvy group.  And finally, everyone and their dog.     And the same tutorial is not appropriate for all 3 groups.  A detailed concrete example can be considered here.  Prior to the advent of tabbed browsing (around 2007) and the subsequent explosion of tabs in consumer software everywhere, non-professionals really didn't have any conceptual analog for an emacs buffer.  It was an entirely new concept, that needed some detailed explanation and treatment.  In the post-tab-era, the tutorial has the opposite problem: people already understand what a buffer is in the abstract, but are upset it doesn't present a clickable tab, like they are accustomed to.  (1970s-keyboard-driven interfaces vs 1990s-mouse-driven interfaces are another, and much larger, issue...but not as focused an example as just tabs are.)  Roughly, the 3 eras of emacs newbie fall into these caricatures:    A new and foreign system. I have a lot to learn!  Best to carefully read the manual, and then do the tutorial, before I can get to work. Hrm, this is some odd software, it doesn't look or work like the software I'm used to.  But once I figure out load, save, and undo, I should be able to get to work. I know how to computer!  WTF is this?  Where are the icons and menus?  Why can't I use this immediately, like all the other software I know?  Why is everything is harder than it should be?   There are a number of factors at play here.  But the major ones are:    emacs users are no longer almost exclusively professional software engineers, working on corporate/university unix hosts, i.e. highly technical people who read manuals before they attempt to use things. the general populace has a lot more experience with computer software today, than it did before say, 2000...but most of that experience is with an entirely different UI philosophy. along with the shift to a broader user-base/audience, people's expectations of how much their ignorance should be catered to has changed (they expect to be productive in 20 minutes, rather than 20 hours)   And now I'm sounding like a grumpy old programmer...please try not to focus on that, and instead concentrate on the ideas I'm trying to articulate.  Namely...   The new-user-base has changed, and so have their expectations.  And I don't think the tutorial has caught up with those changes.    It may be trying to...but it is lagging the new-user-base by at least one generation/era of computing.    And unfortunately, that's really hard to fix, because the folks who are best qualified to fix the tutorial lack the perspective of a modern new user.  But we really need to stop being in denial about this!    Everyone who thinks the tutorial is OK seems to be an old hand at emacs...i.e. someone who doesn't need it, and if they're bothered to revisit it, breezes through it, because the material is already super-familiar.    But I've yet to see a single new user sing its praises.  And if the tutorial isn't serving the needs of new users well, how good can it be?  I'm not even sure it's ""adequate"", let alone ""very good"" for the vast majority of new users."
emacs,39thbh,forked_tongue,1 point,Mon Jun 15 16:41:47 2015 UTC,"I unfortunately haven't the time today to read through this and give it the attention it deserves, but I promise I'll read it through :)  From the opening paragraphs, you're taking the words right out of my mouth :) though I'm glad you can give concrete reasons over my multitude of words ;)"
emacs,39thbh,vermiculus,1 point,Mon Jun 15 17:18:38 2015 UTC,"First off, I'm not a vi guy :) I can use it, but…meh. Emacs all the way.    We're talking about the same thing, right? C-h t? My first foray into emacs was alone, text-only, with that tutorial. I'm not kidding when I say it took me the better part of a year to really get through it and start using emacs in place of other things.  It would be nice to mention graphical emacs in the tutorial and to mention the possibility of using the arrow keys. Of course, I don't use the arrow keys anymore and I feel right at home in a text-only emacs, but the learning curve was needlessly steep for me.  The greatest learning happened when I looked through the menu system and saw each item's bindings. I would have certainly learned C-n/p/b/f eventually (the arrow keys are too clumsy) and I don't think it would have had a major impact on how I see emacs.  Without a mentor, the emacs tutorial just isn't that great. I mean, it took me months to discover MELPA. It's a tutorial for GNU emacs with GNU everything – it's not that fantastic if you don't particularly care. I'm already working for the man. :P"
emacs,39thbh,vermiculus,1 point,Sun Jun 14 22:25:10 2015 UTC,"It would be nice to mention graphical emacs in the tutorial   Why?  There are two common ways that the user could have got their hands on Emacs. One is that they got it from a linux or BSD distro. In that case it will be the graphical version unless they select the terminal version. The other is that they're running Windows and they downloaded it. In that case they'll get the graphical version. The only way I can think of that a new user would get the terminal version is if they started by using someone else's computer and they'd installed the terminal version.   and to mention the possibility of using the arrow keys   It says on the second page of the tutorial ""You can use the arrow keys"".  I don't see why the learning curve is ""needlessly steep"".  It's fairly obvious from the start of the tutorial that Emacs acts like most GUI applications. It's not necessary to read beyond the first few pages to learn how to do basic editing. It's much easier to deal with that Vim, for example, which requires learning about modes and quite a lot of other stuff.  I did the tutorial many years ago, it didn't take me that long, only a few days, but it was shorter then."
emacs,39thbh,RobThorpe,1 point,Mon Jun 15 01:13:06 2015 UTC,"Well, I started on OS X, where the terminal application is available, but a GUI is not :) I saw a professor fire it up briefly on a projector, so I assumed this was the only way to do it.   It says on the second page of the tutorial ""You can use the arrow keys"".   Hm, I suppose I'd simply forgotten that detail :) The tutorial mentions it only briefly.   It's not necessary to read beyond the first few pages to learn how to do basic editing.   I read through the tutorial many times. When I say it took me the better part of a year to get through it, that year was spent going over the tutorial again and again. I'm generally a pretty quick learner, but for whatever reason it didn't stick with the emacs tutorial. Actual usage is what taught me emacs, not the tutorial, and I'm still learning things to this day. (That said, I'm very much a power-user.)   It's much easier to deal with that Vim, for example, which requires learning about modes and quite a lot of other stuff.   There are arguments to be made in both directions for this, but I have the over-arching desire to see the menu-driven editors die off before we get back to the flame war :)   I did the tutorial many years ago, it didn't take me that long, only a few days, but it was shorter then.   If I may ask, around what year? My thought is that (my memory of) the emacs tutorial isn't geared toward people who are used to the status quo of menu-driven interfaces. As far as professional interface design goes, menus suck unless you never touch a keyboard. Nevertheless, nowadays people aren't picking up emacs as professionals, they're picking it as hopefuls.  I'm sorry if I'm not being very coherent – it's a little past my bedtime ;) – but my experience was heavily impacted by the fact that I used terminal emacs on/off for well over a year before I figured out there was a graphical emacs. (On a second read (really, isearch), I'm not sure what I understood ""graphical display"" to mean, but perhaps I was just being thick.)"
emacs,39thbh,vermiculus,1 point,Mon Jun 15 03:32:33 2015 UTC,"Well, I started on OS X, where the terminal application is available, but a GUI is not :)   That's a problem.  Unfortunately, the version OS X ships is Emacs 22 and Apple are unwilling to upgrade. So the Tutorial can't be changed there.   If I may ask, around what year? My thought is that (my memory of) the emacs tutorial isn't geared toward people who are used to the status quo of menu-driven interfaces.   Around 2000.  I was very much used to menu-driven interfaces at the time, though I'd also used other sorts like the DOS command line.   I'm not sure what I understood ""graphical display"" to mean   Perhaps the tutorial has changed since you did it."
emacs,39thbh,RobThorpe,2,Mon Jun 15 10:14:00 2015 UTC,"I use evil-mode and a home grown .emacs.d.  I used a config (spacemacs) for a while, but I decided I didn't like the excess of  features I'm not using.  I also like to know what my config is doing.   I set the evil-insert-state-map to be nil and use emacs commands in insert mode. I've come to like a lot of them, but some of them drive me crazy.  C-x C-f is particularly bad, as is C-x b.  I mostly use the deleting and case changing functions to alter variables real quick.  Sometimes I just want to just do a quick C-a M-f M-c instead of <esc> 0w~."
emacs,39thbh,nautola,2,Sun Jun 14 16:59:38 2015 UTC,"I use the Emacs commands. For everything besides text editing, they're superior. :bufe (or whatever it is, I've long forgot) is a lot weirder and harder than C-x C-f"
emacs,39thbh,catern,1 point,Sun Jun 14 21:23:34 2015 UTC,"saving,    :w   switching, etc. windows   Try  :b[uffer] - I believe it's defined by default now, at least I can't find anything in my config. Or :buffers for a menu.   I did the emacs tutorials so I know how to do those things in emacs, but in order to do those things in evil, as far as I can tell, is something like \ C-x C-f.   :e/path/to/file?  Unfortunately the completion in ex-mode isn't great."
emacs,39thbh,hirnbrot,1 point,Sun Jun 14 21:04:41 2015 UTC,"I switched over to spacemacs from vim and tmux about a month back. I still know very little about Emacs, lisp or anything. I mean to learn, but I'm still productive without knowing much about it (which is because it's really well setup). The gitter chats really helpful, sounds like it might suit"
emacs,39thbh,__baxx__,1 point,Sun Jun 14 22:17:44 2015 UTC,"C-h t to read the tutorial at least once. It won't take you more than an hour.   The only key bindings you need remember from that tutorial is ""C-h v"" and ""C-h f"". You can forget other stuff without any issue. Keep using Emacs in evil way.  As a beginner, you can start from org-mode in Emacs and keep doing other stuff in vim. That's absolutely OK."
emacs,39thbh,redguardtoo,1 point,Mon Jun 15 01:36:51 2015 UTC,"Only a handful to be honest. The whole point of me using Evil is to work in a Vim manner and because I can do almost everything I need to with Vim commands I never have a need for Emacs text editing commands.  Obviously I do use plugins/modes. But generally mode related things for me are automatic and I don't need to call commands specifically.  That's largely true, but I guess there are some exceptions (that I can't think of - it's all very much memory muscle)."
emacs,39thbh,sgoody,1 point,Mon Jun 15 11:52:08 2015 UTC,"C-x * and C-c * work normally with evil (no prefixing needed).  I use Evil only for text operations, find&replace and buffer operations (C-w prefix). standard Emacs commands for everything else, though I also remove TAB and C-e bindings from evil-*-state-map because I like default behaviour better."
emacs,39thbh,ukaszg,1 point,Mon Jun 15 15:15:23 2015 UTC,"Personally my path from vim to emacs was, 4 months of evil-mode, then I took away evil-mode and using god-mode to really learn emacs for another 6 months. Now I'm back to using evil-mode, but my time without it really helped me learn the emacs way. In my opinion with packages like god-mode and hydra you can create an experience even better than evil, in my opinion evil is a stepping stone (and one I'm not quite past yet)."
emacs,39thbh,drwebb,1 point,Tue Jun 16 03:47:37 2015 UTC,"I use emacs bindings for everything other than editing text. For text editing, I use evil, since it's the best. I could never wrap my head around the strange way emacs wants to manipulate text..."
emacs,39t28z,xoo-,3,Sun Jun 14 14:26:32 2015 UTC,"Haven't tried it, but it's the first google hit: https://github.com/yasuyk/ac-helm"
emacs,39t28z,kcin,1 point,Sun Jun 14 15:36:09 2015 UTC,duh!  thanks.
emacs,39t28z,ReneFroger,2,Sun Jun 14 19:06:26 2015 UTC,http://tuhdo.github.io/static/c-ide/semantic-boost-demo.gif  This picture gives you what you want. Check the site for more information.
emacs,39t28z,Kaligule,1 point,Sun Jun 14 18:29:56 2015 UTC,thanks.
emacs,39qbz9,cpaulik,1 point,Sat Jun 13 18:47:09 2015 UTC,"Great! I use material for a dark theme but always had to switch to Leuven when I needed a light theme.  Out of curiosity, what window manager is in the screenshots?"
emacs,39qbz9,thnetos,1 point,Sat Jun 13 20:41:24 2015 UTC,That's awesomeWM
emacs,39qbz9,Trout_Tickler,1 point,Sat Jun 13 20:45:48 2015 UTC,"Looks like a slightly modified version of the Multicolor awesome-copycats theme iirc :)  Also lovely job on the theme, it looks awesome! Definitely going to try and base a dwm theme around it :p"
emacs,39qbz9,TheBB,1 point,Sat Jun 13 21:59:39 2015 UTC,"Correct, and thank you."
emacs,39qbz9,shackra,1 point,Sat Jun 13 22:57:54 2015 UTC,What is your emacs modeline configuration?
emacs,39qbz9,shackra,1 point,Sat Jun 13 21:17:42 2015 UTC,"Spacemacs default I guess, with slightly tweaked separators."
emacs,39qbz9,robertmeta,1 point,Sat Jun 13 22:12:45 2015 UTC,Yes it's the spacemacs modeline
emacs,39qbz9,wdicc,1 point,Sat Jun 13 22:57:25 2015 UTC,"awesome, time for me to switch!"
emacs,39qbz9,lemon_drill,1 point,Sat Jun 13 23:28:21 2015 UTC,"this looks great, I've never used a light theme before but this makes me want to try it out"
emacs,39qbz9,summaminutiae,1 point,Sun Jun 14 04:29:51 2015 UTC,"Wait, how do I get those fancy bullets for org-mode?"
emacs,39rqjh,tending,1 point,Sun Jun 14 02:52:30 2015 UTC,"If you want to take complete control, including modifying the underlying functions responsible for the behavior you dislike, then the following link contains a detailed example of how to control which buffer appears in which frame and which window -- How to intercept a file before it opens and decide which frame:  http://stackoverflow.com/a/18371427/2112489 -- it is not a substitute for modifying the underlying functions, but can be adapted to some situations without modifying the underlying code."
emacs,39rqjh,lawlist,1 point,Sun Jun 14 03:23:49 2015 UTC,"There are (of course) lots of different ways to go - personally I bind delete-other-windows to M-1 which I find much quicker than C-x 1 and a quick way to rid of all of the other windows.   I also use winner-mode which provides a history for window layout, and if all else fails save and restore window configurations to a register with C-x r w and C-x r j."
emacs,39rqjh,drstevoooo,1 point,Sun Jun 14 10:08:37 2015 UTC,"I've rebound C-1 through C-3 to window management, since M-number makes the default binding redundant. I also use M-o to switch windows. Things are a lot faster now."
emacs,39qzmg,guti495,6,Sat Jun 13 22:19:18 2015 UTC,"Well, if this is Magic, what would it be if you can preview the document at real time (edit .tex and the preview updates under 0.1s). Check whizzytex out.  http://cristal.inria.fr/whizzytex/"
emacs,39qzmg,old_K,1 point,Sun Jun 14 00:56:30 2015 UTC,Thanks for sharing with us!  Surprising to see that even some 'static' as a PDF viewer could interact with Emacs. Could you submit it to emacs.zeef.com? I'm planning to make a section about Auctex/Latex/PDF. But I don't know much about that section yet.
emacs,39qzmg,ReneFroger,1 point,Sat Jun 13 22:33:42 2015 UTC,"I would love to help/submit, I have submitted the link shown above to the non-program section."
emacs,39qzmg,excitedaboutemacs,1 point,Sat Jun 13 22:55:11 2015 UTC,Macgic   FTFY
emacs,39ql1j,tacit7,2,Sat Jun 13 20:07:52 2015 UTC,"Using the ""print"" command. Print will take any data type. You can read it back in using ""read"". If you do this it's often a good idea to put all data objects into a list first."
emacs,39ql1j,RobThorpe,2,Sat Jun 13 20:18:59 2015 UTC,Just to give OP a pointer where to start reading: Emacs Lisp Reference on printed representation and read syntax.
emacs,39ql1j,tashbarg,1 point,Sat Jun 13 22:56:58 2015 UTC,"If you are using url-retrieve, there is caching built in. You would need to reprocess the data when you retrieve it from cache, but it takes care of the TTL and so on.   You can see how I used it here: https://github.com/aaronbieber/sunshine.el/blob/master/sunshine.el#L136"
emacs,39p3vc,__baxx__,8,Sat Jun 13 11:32:12 2015 UTC,"ONE BIG FILE  I called mine notes.org.   Just remember you have an incredible incremental search built into emacs C-s.   Create a new headline per day and insert the date C-..  You also don't need topics per se, just tag everything (on a headline C-c). You can worry about organization when you actually have something to organize. ;-)  Just keep it simple and as time progresses add complexity as needed. First steps would be to use the TODO headlines. Then as a next step experiment with the agenda filters. Once you have mastered TODO and agenda, start working on clocking (if that's important to you) or capture (if that's important to you).   And org can imbed all code types and display them, as well as LaTeX math and images can't it?   Yep! There is a nice macro for this:   On a new line type <s then press TAB You need to put the emacs mode that will be responsible for this type of code, like so:   #+BEGIN_SRC python  #+END_SRC   Go into the blank line and type C-' you will enter into a magical buffer that implements the emacs mode you selected in step 2   When you are ready for even more code feature, check out org-babel"
emacs,39p3vc,zinver,3,Sat Jun 13 15:39:40 2015 UTC,fuck me i spelt embed with an i
emacs,39p3vc,zinver,1 point,Sat Jun 13 16:37:24 2015 UTC,New from apple! iMbed.
emacs,39p3vc,spoofedexistence,1 point,Sun Jun 14 07:42:19 2015 UTC,sponsored by the Internation Dislexia Association.
emacs,39p3vc,zinver,2,Sun Jun 14 13:23:06 2015 UTC,"But what if you are taking notes for two huge and completely different topics, doesn't it make more sense to split the topics into files? I'm not contradicting you, just trying to understand the org-mode work flow from a non-org user."
emacs,39p3vc,spoofedexistence,2,Sat Jun 13 16:21:09 2015 UTC,hahah search don't sort. That's my motto.  But if you feel like your topics don't belong together (erotic fan fiction and work notes) by all means split them into two files. ;-)  Also there's a magic function C-c C-x b that will allow you to export the contents of a single head-line (including all sub headlines) into a new buffer for export or modification. It's like they thought of everything.
emacs,39p3vc,zinver,2,Sun Jun 14 07:41:07 2015 UTC,"After learning org for two days I can see how one big file is the way to go, the visibility cycling features and structure editing make it very easy to work with multiple unrelated topics in one file.  And yes, C-c C-x b is awesome!   thanks."
emacs,39p3vc,gepardcv,1 point,Tue Jun 16 18:06:05 2015 UTC,"Well don't forget about the capture commands, you can use multiple files without ever thinking about it."
emacs,39p3vc,AsymptoteToHappiness,1 point,Sat Jun 20 06:58:39 2015 UTC,"that sounds good though! I'll make a start with this in mind, thanks for that :)"
emacs,39p3vc,gepardcv,2,Sat Jun 13 16:38:22 2015 UTC,"For every project I work on, I keep a Journal.org file in a directory dedicated to my personal notes or scratch files for that project. The file is sometimes encrypted or has encrypted nodes, so I feel comfortable pasting passwords or other sensitive data there as needed. It's also configured to bypass the Emacs backup mechanism.   Every day that I work on that project gets a level 1 header marked with an inactive timestamp. No other required structure, so I feel free to add other outline headers for the day as needed."
emacs,39p3vc,AsymptoteToHappiness,2,Sat Jun 13 13:44:36 2015 UTC,"The file is sometimes encrypted or has encrypted nodes, so I feel comfortable pasting passwords or other sensitive data there as needed. It's also configured to bypass the Emacs backup mechanism.   This is something I would love to use use. I tried to use org-crypt (from the manual) after your mention, but couldn't get it to decrypt it on opening the file. Need to manually decrypt it. Any ideas here?  Thanks!"
emacs,39p3vc,vifon,3,Sat Jun 13 14:32:01 2015 UTC,"Maybe add an org-mode-hook which calls org-decrypt-entries? You might want to use gpg-agent for convenience, then, too."
emacs,39p3vc,AnAirMagic,1 point,Sat Jun 13 15:59:05 2015 UTC,"That worked, thanks! :)"
emacs,39p3vc,AsymptoteToHappiness,3,Sat Jun 13 16:04:18 2015 UTC,Emacs can transparently encrypt and decrypt files using GPG. Just name that file something.org.gpg and let the magic happen. You will need to setup GPG if you didn't already.
emacs,39p3vc,bgbgbg666,2,Sat Jun 13 20:14:38 2015 UTC,"Not OP, but I use something similar. Just name the file something like project.org.gpg and emacs will automatically encrypt and decrypt it on saving and opening. It uses gpg keys, however (which may be a bit hard for someone new to get started with)."
emacs,39p3vc,AsymptoteToHappiness,1 point,Sat Jun 13 15:51:53 2015 UTC,"I do that already with complete documents, but in this case, I wanted to have embedded encrypted sections, in my agenda file."
emacs,39p3vc,verdigris2014,2,Sat Jun 13 16:05:49 2015 UTC,"There is a key binding for a command -- I think org-reveal or some such -- that does what you want out-of-the-box . I'm on mobile and can't look it up ATM.   Check the notes at the top of org-crypt.el to find the command name. It mentions   adding the decrypt functionality to that command in the future, but it worked for me with no extra config.  Edit: goddamn autocorrect"
emacs,39p3vc,skalawag,1 point,Sat Jun 13 18:34:21 2015 UTC,C-c C-r works! :)
emacs,39p3vc,skalawag,1 point,Sat Jun 13 18:37:03 2015 UTC,"cheers, sounds a little much for me at the moment tbh, but interesting. Does emacs handle the encryption or are you doing that with something else?   Keeping notes in the project is cool - and that's kind of what I'd do but I'd write them in a separate location and a bit more abstracted I guess. So I'd have a file 2015-06-13.tex and in that would be something like   \section{Python} blah \section{Linux} blah   That I would add to, then I would compile the days into months... I don't really think that was the best approach though, I'm not sure if I ever really got a clean setup on that as I haven't been taking any notes since using emacs and have forgotten the setup ha (it was a wip...)   Thanks though :)"
emacs,39p3vc,skalawag,1 point,Sat Jun 13 13:55:33 2015 UTC,"I wasn't going to mention encryption, but it's like the killer app for the killer app to me.   Setup GPG so that epa-decrypt-region works.   Then I think you add (require 'org-crypt) to your init.   The add the tag :crypt: to a heading.   It will encrypt on save, and you use c-r for reveal to unencrypt in place.    You can also just encrypt a whole file and save it as file.gpg but I like org-crypt."
emacs,39p3vc,verdigris2014,1 point,Tue Jun 16 02:23:06 2015 UTC,"There's no one best way. It might be a good idea to start with one file and break out additional files, as needed. Org makes it very easy to navigate and organize even large files, so you may never find the need to create more files. For all things org, this is the best resource I've ever seen (aside from the docs): http://doc.norang.ca/org-mode.html"
emacs,39p3vc,vermiculus,1 point,Sat Jun 13 13:51:07 2015 UTC,"Yeah I'll start with one, seeing as I'm learning Org at the same time...   I've heard that Org can compile to LaTeX? Or can make PDFs from it or whatever? If you had separate files could you compile them into one master file like you can \input{} with LaTeX? Tbf I won't be doing that for a bit, so it's more a curiosity for now :)  I'll just start with one though, thanks for the link"
emacs,39p3vc,vermiculus,1 point,Sat Jun 13 13:57:39 2015 UTC,"Org has a many export backends, LaTeX being one of them. I've used org with LaTeX a fair bit, but I've never had the need to compile multiple files into a single document, so I'm not sure. That said, there's no doubt in my mind that it can be done, somehow. Look into publishing (see the docs and the link above)."
emacs,39p3vc,vermiculus,1 point,Sat Jun 13 14:01:28 2015 UTC,yep will do. I like the little Org headings and stuff that it makes :) Though If I want to read notes on my tablet or something I need a PDF.   nice one :)
emacs,39p3vc,bgbgbg666,1 point,Sat Jun 13 14:04:45 2015 UTC,"fyi, there are apps for the iphone and android that you can look into as well. you can also publish to html, so you could set up a server somewhere, publish to that, and use your browser."
emacs,39p3vc,bgbgbg666,1 point,Sat Jun 13 14:08:01 2015 UTC,"well PDF sounds easier ;) maybe there's a private blog or something that I could use, I'll look into it cheers !"
emacs,39ormg,shackra,31,Sat Jun 13 08:33:55 2015 UTC,"Most IDEs are suited for one language or task, and consequently you need several of those in order to fulfil several goals. Emacs on the other hand, can be suited to work with any language or task really, and consequently you only need Emacs. I find this very useful, and thoroughly enjoy the fact that I can work on my code, my LaTeX, and my Org-mode note files all at the same time, in the same editor, and all well supported."
emacs,39ormg,Razark,26,Sat Jun 13 08:51:52 2015 UTC,"I would say :  Emacs is entirely usable from the keyboard. Most IDEs need you to use the mouse or menus, which personally I have found to distract me and break my flow of thoughts. Shortcuts, on the other hand, use muscle memory and require me less thinking (and are faster).  Emacs is completely customizable and extensible. Frankly Emacs is not the best editor if you don't customize it. But if you do, it becomes your editor and it is completely worth it, you'll never go back."
emacs,39ormg,capuche,8,Sat Jun 13 09:40:55 2015 UTC,"Emacs is entirely usable from the keyboard.   This is my main thing too. Whenever I try a new text editor, the thing that almost always makes me put it away is that either something can't be done from the keyboard, or I can't customize how it is done from the keyboard."
emacs,39ormg,onceamennonite,4,Sat Jun 13 10:12:40 2015 UTC,"Emacs is entirely usable from the keyboard   It's more than that: Emacs is (nearly) completely usable from the home keys.  I hate being forced to move my fingers off the home keys to use the arrow keys, page up/down and home/end for navigation.  And don't get me started on F keys.  Heck I don't even like using the Return key: I prefer to hit C-m or C-j!  One other aspect of Emacs keyboard usage I haven't seen duplicated properly elsewhere is text selection.  Afaict all the newer editors require the use of the mouse for that."
emacs,39ormg,recoil,3,Sat Jun 13 10:38:56 2015 UTC,Well. Vim. Vim is actually quite comparable to Emacs in a lot of ways. I prefer Emacs since I've used it as my editor for some 15 years but if I had to switch for some reason vim would be it.
emacs,39ormg,AndersBakken,2,Sat Jun 13 18:01:35 2015 UTC,"I've come to emacs from vim, and despite the old holy war between them, they're each the closest to the other. And yes, if I had to switch from emacs, it would absolutely be back to vim."
emacs,39ormg,mbillie1,1 point,Sat Jun 13 23:49:28 2015 UTC,"Absolutely: by modern I took the OP to mean things like Sublime or TM. Vim is the only other editor besides Emacs that I find bearable.  I just prefer (I.e. Am more used to) the Emacs bindings, and prefer elisp to vimscript, among other reasons."
emacs,39ormg,recoil,14,Sun Jun 14 00:12:39 2015 UTC,"The community   For example, Visual Studio is widely used compared with Emacs. But the VS reddit counts only 240 subscribers, while the Emacs community on Reddit is more alive and kicking. It needs to be noted that Emacs users are more dependable of the community, while Visual Studio/Eclipse/Intelli JIdea users can rely on the software company of their product. Perhaps this makes Emacs users to be more inclined towards communities.    Coolness of the packages/plugins   I assume I don't need to explain this. Or are you expecting to find plugins such as Tetris, Org-mode or IRC chat in even the most common extenisible IDE such as Eclipse?   More customizable/extensible   Nearly everything inside Emacs could be adjusted to your preferences. But it will have a huge learning curve, though. The time that I will spend to customize is worth for me, because I expect to be working for around 40 years in software/web development. If you're gonna have a long time, better make sure everything is well tailored for your preferences. Not you that needs to be adjusted to every new sofware. And again, and again, because the GUI/interfaces of every tool will change in ~4 years.   Long term interests   If you're gonna spend many time to bend your tool to your specificy needs, it's lost time. Because especially the IT landscape changes every moment. But Emacs also, it's easily to configure it for another languages and tasks. You don't have that luxury with PHPStorm or Xcode, which are more towards one language.  While many new IDE's will rise and fade, Emacs is here since 1974, so I expect that it will be still there about 20 years."
emacs,39ormg,ReneFroger,2,Sat Jun 13 09:35:54 2015 UTC,"yeah - http://www.reddit.com/r/VisualStudio/comments/39c0wf/visual_studio_interface_and_functionality_broken/  two day old comment with no replies, bummer :("
emacs,39ormg,__baxx__,1 point,Sat Jun 13 17:31:56 2015 UTC,Eclipse has a lot of extensions. Tons actually.
emacs,39ormg,yaschobob,5,Sat Jun 13 12:22:36 2015 UTC,You don't get it. Eclipse has a lot of extensions geared into programming. The packages of Emacs could be applied to everything.
emacs,39ormg,ReneFroger,-1,Sat Jun 13 13:16:29 2015 UTC,"Yeah, true, but Emacs is shitty for other things like Web browsing. Why would I want to use a shitty web browser?   I can get better implementations of other things elsewhere."
emacs,39ormg,yaschobob,8,Sat Jun 13 13:22:41 2015 UTC,"""web browser"" is pretty much the only thing emacs isn't GREAT at doing, and the only reason for that is CSS + JS, not the web."
emacs,39ormg,Trevoke,5,Sat Jun 13 14:02:10 2015 UTC,"I use it to read documents in plain text or HTML. For example, when I read a programming example, I can copy code and test immediately, with minimal effort. If the. code snippet is an interpreted one, I can eval it right away."
emacs,39ormg,tuhdo,3,Sat Jun 13 13:57:05 2015 UTC,"The browsing is pretty good for when you need to look at programming docs, since those are generally just text with minimal js and css"
emacs,39ormg,dangersalad,1 point,Sat Jun 13 19:36:43 2015 UTC,You wouldn't. Personally I use the edit in emacs extension on chrome. Now I view on a decent browser and have the option to edit in emacs.   I use emacs mostly for org mode. I frequently use a mouse and while tempted to see if I could do it all in emacs I found what is best is tools that work together well.
emacs,39ormg,verdigris2014,10,Sat Jun 13 22:52:01 2015 UTC,One word: extensibility.
emacs,39ormg,atilaneves,9,Sat Jun 13 10:33:21 2015 UTC,"I would give 3 reasons. First, it can be run from a command line. This counts out (nearly) all IDE's and newer editors. Secondly, if it's infinitely extensible. There is nothing you could want to do that isn't covered in a package or you can't do yourself. Thirdly, it has existed for ages. It is stable and will continue to be developed until computers no longer exist.  Edit: I know these reasons also exist for Vim, but that flame war will never die. I use Emacs because of personal preference. I anyways tell people to try both and consider the features, strengths, and weaknesses of both, and pick one."
emacs,39ormg,piemur24,9,Sat Jun 13 10:29:13 2015 UTC,100% keyboard programmable 100% keyboard configurable 100% keyboard plain text 100% keyboard
emacs,39ormg,Taikal,7,Sat Jun 13 15:16:45 2015 UTC,"Emacs has been honed during years of usage by power users -- and this shows in some peculiar ways of performing tasks -- yet it has stayed approachable.  And while Emacs Lisp keeps evolving, it maintains a remarkable level of backward compatibility (this means that the macros that I write do not become completely useless with each major release, like they did when I switched from Visual C++ 6 to Visual C++ 2003)."
emacs,39ormg,BrettW-CD,8,Sat Jun 13 13:14:32 2015 UTC,"Emacs is a lifetime editor. It's a tool that you can grow with (and via extensibility, make it grow with you). This is not just using an editor for a long time. It's the product of decades of use and improvement. It's the attempt to be a timeless tool in its very capabilities and design.  Eclipse is a good editor, extensible and all that. But it's not a lifetime editor. I remember going through three minor editions (maybe around Juno?) where everything broke. Basic C++ support died.  Many plugins died. It was a period of change for Eclipse so it's all fair enough but Eclipse was of-the-moment. If it worked now then so long as you didn't touch anything, you'd be okay.  Other fine editors have lots of interesting features, but in their design, it's like a mansion where the kitchen is one wing, the pantry another, the bathroom yet another... it all meets back in the lobby so it's connected but it's not a house, it's just a collection of rooms. In Emacs, everything is connected to everything else. It feels wrong and messy until the day that recursive editing, say, saves you a morning's worth of work. Or when you realize that you can use macros and registers and regexp search in the file manager Dired.   I feel like I am going to need text editing for the rest of my life. Programming languages come and go, but underneath it is all just text. Emacs works excellently with text, can change with me and will gladly be along for the ride."
emacs,39ormg,RobThorpe,5,Sat Jun 13 22:45:42 2015 UTC,"Emacs covers many use cases, that's very important.  In the late 90s when I was at University I learned to use the Borland C++ Builder IDE. In about 2000 I had to write some code in VHDL.  The Borland IDE was no use for that.  I'd heard RMS speak at my University, so I decided to try out the editor he established.  I found that I could use it for VHDL and many other things.  This flexibility is very important. If you've used many languages over many years you'll appreciate it. If you start using Java (for example) then an IDE will be much more immediately productive than Emacs is.  But, in a few years time you are likely to be writing in a different language, that often means switching IDE. Even today most IDEs aren't language agnostic, they specialize in particular languages. More obscure languages aren't well provided for (and often things like shell script are obscure in this sense).  Switching IDE means learning a whole new set of features and the keybindings for them.  There are the CUA keybindings, but they only affect a small number of keys.  A person's efficiency with a particular set of keybindings is strongly proportional to the length of time they've been using them for. Many IDEs have keybindings for particular languages that are much better thought out for those languages than Emacs' bindings are. But, the problem is that the user generally has much less time to get accustomed to them before switching IDE again.  Emacs removes these pain-inducing switches. (Have you ever had to use two IDEs at once? A colleague of mine was trying to do this yesterday, it can be extremely tricky).  Then there's text. I write a lot of text. A lot of ""Todo"" lists, a lot of email and quite a few reports. Everyone will find that the more senior they become the more of this there is to do. IDEs don't cover that case. They require using a different tool with another set of different keybindings. If you use Emacs then you use the same keybindings, so everything is practice for everything else. The time you spend navigating emails helps you later when navigating code, and vice versa.  The customizability is a big plus too.  But, what I find most useful about Elisp, isn't the ability to redefine a few keys, is the ability to write new modes to deal with entirely new situations."
emacs,39ormg,gepardcv,7,Sat Jun 13 12:06:35 2015 UTC,"When something in Emacs doesn't quite do what you want, you are typically 15 minutes away from bending it to your will. This is a profound, qualitative difference from nearly all other software available. For example, Emacs can work like vi if you like. You sure as shit can't go the other way. To resort to a slightly silly analogy, other editors are like Fred Flintstone's car: stone wheels and you have to push it yourself; Emacs is like a starfighter."
emacs,39ormg,__baxx__,2,Sat Jun 13 13:29:04 2015 UTC,You sure as shit can't go the other way   :nnoremap C-q C-w C-e C-r C-t C-y dip
emacs,39ormg,tuhdo,3,Sat Jun 13 17:36:43 2015 UTC,I'm 100% sure as well. Right now Vim can't even change itself live and do async and image and PDF.
emacs,39ormg,__baxx__,1 point,Sun Jun 14 04:08:00 2015 UTC,;)
emacs,39ormg,forked_tongue,8,Sun Jun 14 10:20:44 2015 UTC,"I've pretty much given up on emacs evangelism.    I started using emacs because it was what the best programmers I personally knew were using.  Some were using vi...but vi didn't inspire the same feature envy that emacs did.  After I learned some elisp, I came to fully appreciate just how powerful a portable lisp virtual machine for text editing can be.  Being able to run my elisp extensions on any OS meant I could platform-hop with ease, between Unix, Windows and Mac environments, carrying my own extensions and customizations wherever I went.  But quite frankly neither of the above are good selling points:    ""It's what the cool kids are using!""  Yeah, if your definition of ""cool"" applies to talented programmers.   Mine does.  As might yours.  But that's not really a popular view. ""It's a virtual lisp machine!"" Again, although a huge selling point, it's got a very limited target market demographic.   So, I've sort of given up on ""selling"" emacs to others.  It's a very niche editor/IDE.  If you're a programmer who is willing to learn elisp, there is nothing better.  But that's a mighty big ""if"".  And that's not knocking org-mode, or say, erc, or any number of other quality emacs libraries that qualify as applications in their own right...but for nearly all of these, there are alternative options that work just as well or better for that single need.   So, I don't think any of these are a ""gateway (drug?)"" to emacs.  I think most of the people who have (or will develop) the desire for a fully programmable text editor will find their way to emacs eventually.  And the best thing you can do to promote emacs is to just be a ""cool kid"" yourself...be a talented programmer who is secure (perhaps to the point of being smug) about the tools you use.   Don't ""sell"" emacs.  Inspire envy!  When you push emacs, you come off as desperate, needing to validate your own choices, by having others copy them.   This is the exact opposite of what a cool kid does.    They can be enthusiastic supporters of the things that they're into...but they really don't care if others follow their example or not.  It's cool, either way.  If someone is interested in emacs, it's their own interest and drive that will (or won't) push them through the learning stages.  You can be enthusiastic and helpful, but their reasons for choosing emacs (or something else) are their own, and not really something you can supply.   Well...other than just being an example of an awesome emacs user, that is.     But the key tl;dr point is:  features don't sell, aspirations do."
emacs,39ormg,__baxx__,2,Sat Jun 13 16:50:39 2015 UTC,"I started using emacs (spacemacs) recently after using VIm and Tmux.  The main reason that I converted was (1) on a philosophical level and (2) thinking wtf I might as well try it.  (1) I'd been using VIm for a bit but way off being a ninja. Very comfortable with modal editing I'd decided to start customising things more, using mroe plugins and learning some VimScript. I was kind of down with the Unix philosophy of do one thing well and still think in many cases that makes sense. But I'm a mile off being adroit with the command line, navigation and basic stuff is alright but I can't edit files with sed use awk or much else. Linux as an IDE is more than possible if you know what you're doing but I'm not really in that club :) The idea of using more things from the editor didn't bother me (even makes sense) so and the idea of moving between OSs easily is very appealing for any future cases."
emacs,39ormg,AndersBakken,2,Sat Jun 13 17:48:25 2015 UTC,"I takes a long time to become a master at these things. Emacs, the unix way, vim, the command line. None of this is achieved in a year. The great thing is that it gets more and more enjoyable and efficient the more you use it."
emacs,39ormg,__baxx__,3,Sat Jun 13 18:31:23 2015 UTC,"None of this is achieved in a year   Yeah each of them could take ages to learn. Funny you say a year, that's roughly how long I've been doing 'things'. There's been so so so much to learn! I read that Linux was more flexible and suited to programming, so thought fuck it I'll use that. I read that I shouldn't use an IDE and should use a text editor, cue into to editor wars - I already have VIm, emacs looks weird, I'll use VIm. Then I realised that I didn't really know any maths, so I've been learning that. And then I read that LaTeX is much better to use at Uni (I'm going next year as a mature student) so I learnt some of that....etc etc.  When people say they'd get bored if they could live for a thousand years I have zero empathy"
emacs,39ormg,moushkka,4,Sat Jun 13 18:46:17 2015 UTC,"Keyboard macros. For when you can't be bothered to write a python script, but also don't want to do the work manually. I use it all the time."
emacs,39ormg,parla,5,Sat Jun 13 10:38:21 2015 UTC,No need for mouse Runs in terminal Runs on all OS-es I care about. Extensible Has keyboard macros Has rectangular editing
emacs,39ormg,__baxx__,1 point,Sat Jun 13 15:48:34 2015 UTC,"Runs in terminal   couple of people have said this, though I've also heard that Terminal emacs is a bit shit compared to GUI? I'm using GUI spacemacs"
emacs,39ormg,AndersBakken,2,Sat Jun 13 17:38:38 2015 UTC,I ran emacs in a terminal for the first 10 years I used it but finally decided to switch to GUI. The main reason was that certain keybindings didn't work correctly except in XTerm and I finally had to switch to a tabbed terminal (Something with C-M-[a-z]). I still sometimes use -nw over ssh but I just kinda like having only one frame for emacs.
emacs,39ormg,RobThorpe,2,Sat Jun 13 18:25:31 2015 UTC,I think GUI is better. With GUI Emacs you can view image files and PDF files. I use those features quite often.  Terminal Emacs is very useful for remote connections.
emacs,39ormg,forked_tongue,2,Sat Jun 13 20:21:33 2015 UTC,"GUI is better than terminal for at least these two reasons, for me:    Fonts and >256 colors, for syntax highlighting, and other display niceties. No terminal-emulation keystroke mangling.  (Most of this is fixable, but it usually involves a lot of research/configuration/experimentation to make sure all control-character-escapes are properly sent/received.)   That said, there are many use cases for terminal emacs, and the ability to use it via terminal is indeed a big advantage."
emacs,39ormg,balkenbrij,1 point,Sun Jun 14 16:46:33 2015 UTC,"it depends on how you use it, if you use the keybindings it's just the same experience. If you depend on menu's it's not. I always disable the menu since it's pretty useless in terminal mode i think."
emacs,39ormg,parla,1 point,Sat Jun 13 18:18:37 2015 UTC,They're basically the same. What have you heard?
emacs,39ormg,__baxx__,1 point,Sat Jun 13 18:20:18 2015 UTC,"just things about different stuff not working here and there... that's the worst example ever i know, the only concrete one that I can think of is the mode line fonts not working  properly in spacemacs >.<. It's fairly common that people are advised to run the GUI mode there though, so perhaps this is more spacemacs related"
emacs,39ormg,parla,1 point,Sat Jun 13 18:26:09 2015 UTC,You can't use other fonts than the one your terminal uses. As long as you stick to unicode symbols you should be fine. Icon fonts won't work.
emacs,39ormg,__baxx__,1 point,Sat Jun 13 19:10:21 2015 UTC,"yeah I'm sure there was other stuff but I'm not sure if this is spacemacs related, some of the packages that it uses or what so I've noooo way of backing any of this up with anything, sorry about that"
emacs,39ormg,pzone,1 point,Sat Jun 13 19:20:33 2015 UTC,"The terminal definitely limits some of the newest and snazziest Emacs features, but if you're decided you're working on the terminal to begin with Emacs will take full advantage within those limitations.  I just have a few lines altering my configuration files a bit if emacs detects it's in terminal mode."
emacs,39ormg,cbrachyrhynchos,3,Mon Jun 15 01:01:16 2015 UTC,"Emacs gives me a full text-processing language to automate big batch editing jobs that just works across three different operating systems. I don't have to worry about which versions/variant of python, perl, awk, or sed that are installed on my system, and elisp is more readable than the latter three."
emacs,39ormg,cbrachyrhynchos,1 point,Sat Jun 13 12:58:42 2015 UTC,"Every now and then, I'll get a wild hair to try an algorithm in four or five different programming languages, and while you can do almost anything using sed or awk, certain jobs are a bit difficult.   Also, practically everything about the emacs interface can be modified or customized dynamically using functions that don't require writing an entire plugin/module."
emacs,39ormg,icub3d,3,Sat Jun 13 13:19:57 2015 UTC,Muscle memory. I haven't seen a cool feature emacs can't do and I can never get used to using different keyboard shortcuts.
emacs,39ormg,billbose,3,Sat Jun 13 14:08:51 2015 UTC,"The power of emacs come through elisp which itself is a lisp. Without it, emacs is just another editor."
emacs,39ormg,andreicristianpetcu,3,Sat Jun 13 14:49:50 2015 UTC,For Emacs and Vim the line between user and plugin developer is extremly thin. You start off by mapping a keyboard shortcut and you end up authomating A TON of stuff. You can copy/share configurations with friends and keep it in git. It is easyer to get YOUR CODE running inside Emacs/Vim and it is hard to do it with IDEs. With IDEs all you see is what you get.
emacs,39ormg,jivatmann,3,Sat Jun 13 15:37:51 2015 UTC,At the beginning using Emacs was a big pain!!!  I never want to go through that pain again!!!  Would I recommend it? Definitely!  Once you know Elisp and about Emacs internals you have the best interface to control your Computer I have ever seen. Everything you can think of is just a little Elisp Function away.
emacs,39ormg,matt_panaro,2,Sat Jun 13 16:01:54 2015 UTC,"It loads much faster than IDEs (or at least a little faster, depending on how customized your startup is); it locks up/hangs/crashes less frequently than IDEs; it uses an order of magnitude less RAM than IDEs; (full disclosure: by ""IDE"" I really mean ""Eclipse"")"
emacs,39ormg,andreicristianpetcu,2,Sat Jun 13 12:32:08 2015 UTC,Emacs and Vim are magical for DRY languages and frameworks but they suck when it comes to verbose and burocratic languages like Java
emacs,39ormg,trezor2,2,Sat Jun 13 15:39:04 2015 UTC,"They can work OK for maintaining existing code-bases in those languages, but I agree that creating projects from scratch feels severely less smooth than in IDEs specifically designed for those languages."
emacs,39ormg,andreicristianpetcu,1 point,Sat Jun 13 15:48:51 2015 UTC,"Even maintaining them is difficult. I hate Java's crazy imports, you need to import stuff from standard libraries to do elementary stuff. IDEs do autocomplete well in these languages, while text editors usually have more lightwait autocomplete systems or use external tools for this type of stuff."
emacs,39ormg,trezor2,1 point,Sun Jun 14 16:46:33 2015 UTC,"For the record, I'm one of the contributors working on bringing coreclr (official open source .NET) to FreeBSD. And I'm using Emacs all the way.  With projects like omnisharp lots of third party editors can have the same level of code completion and code navigation as a ""regular IDE"" with a minimal effort.  I put ""regular IDE"" in quotes, because the lines are starting to blur."
emacs,39ormg,andreicristianpetcu,1 point,Sun Jun 14 17:55:09 2015 UTC,"I tried to make Vim work with C++ and Java but failed. I wanted to spend some time to learn Emacs since it has awesome C++ and GDB support.  I code Java and JavaScript (Eclipse, Intellij) for work and Ruby for personal project (Vim + CLI tools)  Thank you for working on this project!"
emacs,39ormg,nroose,2,Sun Jun 14 18:02:48 2015 UTC,Better shell integration More versatile customizability Keyboard for everything so I don't have to take my hands off the keyboard as often   I have tried many other editors over the decades.  Not sure if I would recommend for new users.
emacs,39ormg,balkenbrij,2,Sat Jun 13 18:08:04 2015 UTC,"The ammount of what's written in a higher level language, it's not a later add-on so you can do a lot more with it. Also, it's lisp (well, that does seem to scare people away nowadays ;) There are lot's of things already written for one to use so it's not that you have to do something in lisp, but if you'd like you can change about anything (anything is also included already btw)."
emacs,39ormg,dr_theopolis,2,Sat Jun 13 18:14:41 2015 UTC,"On a tangent, it bothers me that there is this implication that Emacs is not a modern development tool.  Yes, it has been under development for thirty years, but it is still actively developed and has a vibrant community."
emacs,39ormg,hyperbling,2,Sun Jun 14 00:32:33 2015 UTC,"| and if someone were willing to know why he should use Emacs, which reasons would you give to this person?  i'd say don't.  same thing if they asked me if they should use vim.  people who care about ergonomics will eventually use modal editing.  people who value extensibility and customization will eventually use emacs.  everyone else, the ones that just want to edit text and write programs will be happy with sublime and IDEs 99% of the time.  the amount of work you can get done ""out-of-the-box"" with these tools is astonishing, and for things like java and C#, IDEs are untouchable in terms of productivity."
emacs,39ormg,lambda_abstraction,0,Sat Jun 13 15:38:51 2015 UTC,"""people who care about ergonomics will eventually use modal editing.""  Citation needed."
emacs,39ormg,starbreakerauthor,1 point,Sat Jun 13 21:33:37 2015 UTC,M-x insert char lets you insert any unicode character by name.
emacs,39ormg,RobThorpe,3,Sat Jun 13 13:25:04 2015 UTC,C-x 8 RET
emacs,39ormg,starbreakerauthor,1 point,Sat Jun 13 16:20:10 2015 UTC,I never remember that. :)
emacs,39ormg,jadedctrl,1 point,Sat Jun 13 16:44:57 2015 UTC,"I guess mainly because it's very convinient to be able to just have your text editor running in the terminal, rather than in another window-- in fact, I've made an alias in my bashrc file emacs=""emacs -nw"""
emacs,39ormg,nautola,2,Sat Jun 13 14:19:41 2015 UTC,I aliased e to start a new emacsclient or resume an existing one.  And I aliased vim to run emacsclient in the terminal.    I left vi alone though.  I'm not that  crazy.
emacs,39ormg,ijustwantanfingname,1 point,Wed Jun 17 02:12:11 2015 UTC,"If you're willing to learn lisp, emacs can do damn near anything you want, without much effort. That alone does it for me. No fighting vimscript or compiling extensions -- you can live code the core editor itself..minus some low level C."
emacs,39ormg,Asteridae,1 point,Sat Jun 13 14:38:50 2015 UTC,"I began to learn Emacs because I was working on mainframes and my mentor was using it, I figured it would be easier to learn Emacs with his help than having to learn Vi on my own.  The command completion, the ""apropos"" and ""customize-apropos"" commands make it quite easy to learn."
emacs,39qi5m,goofansu,2,Sat Jun 13 19:42:11 2015 UTC,"In theory you should be able to set font-lock-maximum-decoration to its minimum, however not many package authors properly implement their syntax highlighting to support this (e.g. they only have a single level of decoration)."
emacs,39qi5m,DasEwigeLicht,1 point,Sun Jun 14 01:56:14 2015 UTC,Thanks. I'm writing Erlang and it has 4 levels syntax highlighting. But it seems no different between these levels.
emacs,39qi5m,kcin,1 point,Sun Jun 14 02:15:42 2015 UTC,"Syntax highlighting colors are decided via the font-lock-... faces. You can just customize them all to be the same color:  (custom-set-faces     `(font-lock-key-word-face ((,class (:foreground white)))))"
emacs,39qi5m,DasEwigeLicht,1 point,Sat Jun 13 19:59:13 2015 UTC,"I do it like this:  (set-face-foreground font-lock-key-word-face ""white"")"
emacs,39qi5m,DasEwigeLicht,1 point,Sat Jun 13 20:01:25 2015 UTC,"It seems no effect. I removed (font-lock-mode -1) and put above line, but nothing happened and the syntax is highlighted back."
emacs,39pxr4,Plasticooo,5,Sat Jun 13 16:44:20 2015 UTC,"Even if i go with company-mode, do I require auto-complete package?   Nope!"
emacs,39pxr4,hvis,1 point,Sat Jun 13 19:12:24 2015 UTC,Thanks for the answer! :)
emacs,39pxr4,ReneFroger,5,Sat Jun 13 19:51:07 2015 UTC,This article is your friend.
emacs,39pxr4,pzone,1 point,Sat Jun 13 21:46:53 2015 UTC,Very very extended article! Ill use it! Thank you so much!
emacs,39pxr4,atilaneves,1 point,Sat Jun 13 23:03:58 2015 UTC,"Only thing that article misses is Irony-mode.  Irony is awesome but a little tricky to set up and can require a little bit of fiddling if you do things like out of source builds.    Regarding keybindings:  if you don't like a default keybinding you can always, always change it.  Press C-h b to view keybindings, and search through it for C-M-i  to find the name of the function it's bound to.  Probably complete-symbol or completion-at-point.  Then you can bind it to whatever you prefer by a command like   (global-set-key (kbd ""M-i"") 'complete-symbol)    which would bind it to meta-i.     You could also be a bit more sophisticated and bind it say only when you're in C++ mode:   (define-key c++-mode-map (kbd ""M-i"") 'complete-symbol)"
emacs,39pup2,jivatmann,1 point,Sat Jun 13 16:17:16 2015 UTC,"To get the frontmost buffer, both (window-buffer (frame-selected-window)) and (car (buffer-list)) work, so you can also use:  alias ed='eval cd $( emacsclient -e ""(with-current-buffer (car (buffer-list)) (expand-file-name default-directory))"" )'"
emacs,39pbk8,ImJustPassinBy,1 point,Sat Jun 13 13:04:11 2015 UTC,"Ask on help-gnu-emacs@gnu.org .  I'm on that list and recently I saw some posts about AucTex problems with Cygwin.  I didn't understand them though since I don't use AucTex.  Anyway, there's apparently some tinkering required to get it working perfectly."
emacs,39lydj,bastibe,3,Fri Jun 12 17:44:28 2015 UTC,"I was in need of a good tool for doing code reviews. This is the solution I came up with. With this, I can write annotations for the code my students write, without messing with their code.  Annotations are saved in a separate file. Currently, there is no way to export them nicely so students can see them without using Emacs. I'm planning to advice htmlize for this, but a better solution would be very welcome. (htmlize doesn't see the annotations, since they are stored in display text properties, which are meant to be visible ""on the screen only"")  Also, annotations currently change position when text is inserted before them. This is not much of a problem when you're only annotating, but not changing the file. I believe that this can be fixed, though.  I hope you find this useful!"
emacs,39lydj,zck,2,Fri Jun 12 17:49:23 2015 UTC,"This is interesting. I'd suggest the README focusing a little more on why one would want to use this -- ""non-destructive annotations"" is a little confusing. You could say something like ""a minor mode that lets you annotate any file, and have the annotations live separately from the file. This lets you XXX and YYY"".  Actually, the description in the screenshot is even better: ""add annotations to arbitrary files without changing the files themselves"". I'd still suggest adding something about when one would want to use this. Code review is one case, but I imagine there are other good cases I'm not thinking of."
emacs,39lydj,mmaug,1 point,Fri Jun 12 18:37:46 2015 UTC,You are absolutely right! Thank you.
emacs,39lydj,don-doflamingo,1 point,Sat Jun 13 06:03:52 2015 UTC,I'd also suggest taking a look at https://github.com/hut8labs/diffscuss which uses assign an enhanced diff format to hold proposed changes and thread conversations. The cool thing is that you can easily apply proposed changes directly from the diffscuss file.  I've seen this format develop in a commercial environment and then mature once opened up to the wider net. The developers support both Emacs and vi usage.
emacs,39lydj,vifon,2,Sat Jun 13 03:25:10 2015 UTC,"I looked at that, but as far as I can see, you can only use this to annotate changes, but not existing text."
emacs,39lydj,kcin,2,Sat Jun 13 05:58:18 2015 UTC,"Fabulous. Is it possible to somehow export annotations to org mode buffers, and then have an org-mode html template (https://github.com/fniessen/org-html-themes) to export it beautifully to HTML?   Like insert a text block for annotation, and a source block for the code. Then we can easily achieve docco (http://jashkenas.github.io/docco/) like theme.  I know you don't have it implemented yet, but is it possible to export it this way? How would you approach it if you would? I am a bit of noob, but I can give it a shot."
emacs,39lydj,vifon,1 point,Fri Jun 12 19:04:03 2015 UTC,"The file format for saving the annotations is extremely simple. Exporting should be easy. I would be interested in something like that, too. Please open a github issue to discuss this further."
emacs,39lydj,vifon,2,Sat Jun 13 06:00:50 2015 UTC,Could it be somehow integrated with org-mode? I tend to save the links to the lines I'm annotating using org-capture and then navigate using the org file. It would be great if I could see these annotations in the source file.
emacs,39ma5j,tuhdo,1 point,Fri Jun 12 19:03:03 2015 UTC,"You can also do that using the rectangle commands C-x r t and C-x r d.  Also, C-x r t remembers that last thing you appended, which is often useful."
emacs,39io98,eric-plutono,5,Thu Jun 11 23:59:03 2015 UTC,"I've been using this strategy for years, I think I got the initial advice from Drew. Just to add one more tip: use only one function for the hook.  This way, all the custom config is in one place. See, for instance, my markdown hook.  And the scary hooks.el, which binds more than 50 hook functions.  I've mentioned this strategy on my blog before. As a side effect (the main effect is clarity), it also leads to faster startup time.  Just to explain what's great about this approach: suppose I want to turn off org-bullets-mode temporarily for org-mode buffers. Because of my consistent hook naming scheme, I can have a function ora-goto-hook-file, which jumps to the hook function from any major-mode. So for any major mode, if I want to edit its hook function, I just call ora-goto-hook-file, no further questions asked.  Then I comment out (org-bullets-mode) and C-M-x (eval-defun).  This will take effect on all new org-mode buffers. For old-ones, revert-buffer."
emacs,39io98,abo-abo,4,Fri Jun 12 08:19:20 2015 UTC,I'd say that the same applies to advice-add and advice-remove in the new nadvice way of advising functions from emacs 24.4+
emacs,39io98,kaushalmodi,1 point,Fri Jun 12 01:42:08 2015 UTC,"Great point, I agree as well."
emacs,39io98,kcin,3,Fri Jun 12 02:24:09 2015 UTC,"First, I have no way to temporarily disable the hook if I want. I could evaluate (remove-hook 'js3-mode-hook ...) but what do I use for that second parameter? How do I refer to anonymous function I added to the hook in the first place?   If you use the same anonymous function definition for removal then it removes it if I remember right."
emacs,39io98,xuchunyang,1 point,Fri Jun 12 04:50:19 2015 UTC,"I think you're correct, but it's been so long since I've done it because I think it's inconvenient most of the time."
emacs,39io98,xuchunyang,5,Fri Jun 12 04:59:35 2015 UTC,"in case you want to save some place:  (add-hook 'emacs-lisp-mode-hook (defun foo () (message-box ""hi""))) (remove-hook 'emacs-lisp-mode-hook #'foo)"
emacs,39io98,pacupacu,2,Fri Jun 12 07:00:23 2015 UTC,Interesting.  I would have never thought to do that since the return value of defun is undefined.
emacs,39io98,Boojum,5,Fri Jun 12 07:03:44 2015 UTC,"I didn't know that before, so I just check some doc, defun is a macro which will eventually use the defalias function whose return value is undefined, but defalias normally uses fset whose return value is function DEFINITION, so defun works here."
emacs,39io98,kaushalmodi,2,Fri Jun 12 07:11:28 2015 UTC,"Ah, that makes sense then.  Thanks for the details.  Although personally I wouldn't rely on using defun that way since it works more by coincidence than official intent, so future changes could break it at any time.  Still a clever trick though, I like it :)"
emacs,39io98,kaushalmodi,1 point,Fri Jun 12 07:18:23 2015 UTC,"I use this macro for years. It works well with re-evaluation.  (defmacro my-named-add-hook (hook suffix-name  &rest forms)   ""Define a function my-'hook-name'-'suffix-name' whose body is forms, and add this function to hook.""   (declare (indent 2))   (let ((funcsymbol (intern                      (format ""my-%s-%s"" (symbol-name hook) suffix-name))))     `(progn        (defun ,funcsymbol  () ,@forms)        (add-hook ',hook (function ,funcsymbol)))))   For example, this code (note that no quote before foo-mode-hook.)  (my-named-add-hook foo-mode-hook ""config-1""    (bar) (baz))   is expanded into  (progn   (defun my-foo-mode-hook-config-1 nil (bar) (baz))   (add-hook 'foo-mode-hook #'my-foo-mode-hook-config-1))"
emacs,39hd7v,ReneFroger,29,Thu Jun 11 18:50:24 2015 UTC,"I have a feeling those users who don't use evil may not click on this thread at all. I usually skip all evil-related threads, because I'm not interested in it, and I just clicked on this thread randomly. This can skew the results, because the title sounds like it addresses evil users (like you are interested in their count), so those who don't use it may skip this entirely."
emacs,39hd7v,kcin,3,Thu Jun 11 19:27:21 2015 UTC,"Yes. But, I think it shows that a vast number of Emacs users who use this Reddit board use Evil. It's clearly much less common elsewhere if you read help-gnu-emacs@gnu.org or other forums."
emacs,39hd7v,RobThorpe,17,Fri Jun 12 16:19:46 2015 UTC,+Emacs  But I think most of this votes won't vote here because the thread-title is misleading and will attract evil users.
emacs,39hd7v,ax_reddit,2,Thu Jun 11 21:54:13 2015 UTC,Why do you think it's misleading?
emacs,39hd7v,Sean1708,5,Thu Jun 11 22:58:43 2015 UTC,"Because most evil users, like me, probably saw the title and thought: ""Oh, something evil related. Interesting.""  Many vanilla emacs users probably thought the opposite."
emacs,39hd7v,jan_path,2,Fri Jun 12 11:09:37 2015 UTC,"But it's very obviously a question about who does and doesn't use evil, I'm not sure how it could be clearer."
emacs,39hd7v,Sean1708,2,Fri Jun 12 12:48:07 2015 UTC,"It can be interpreted as the author is interested in the number of evil users only (regardless of other users), so non-evil users may not click on it, since they don't use it."
emacs,39hd7v,kcin,8,Fri Jun 12 13:00:02 2015 UTC,I use Viper. Is that not cool anymore? And why are you on my lawn? :)
emacs,39hd7v,hober,5,Thu Jun 11 19:49:02 2015 UTC,+Emacs
emacs,39hd7v,dakesew,4,Thu Jun 11 19:25:51 2015 UTC,"You should probably add an Option for Spacemacs, since it uses a Combination of different plugins (if I'm not mistaken)"
emacs,39hd7v,jplindstrom,5,Thu Jun 11 19:03:47 2015 UTC,"That still counts as Evil, the rest is out of scope for the question (although I'm sure the spacemacs devs are interested in stats)."
emacs,39hd7v,jshholland,6,Thu Jun 11 20:30:39 2015 UTC,+Emacs  Even though I'm a reformed Vim user!
emacs,39hd7v,harumphfrog,3,Thu Jun 11 20:40:46 2015 UTC,"+Emacs  Although I think the results will be skewed; most non-Evil users will take one look at the headline and think ""oh look it's another Evil post"""
emacs,39hd7v,jan_path,3,Fri Jun 12 02:01:35 2015 UTC,"+Evil  I used to think modal editing was weird, now I can't imagine life without it."
emacs,39hd7v,mr_sax,3,Fri Jun 12 10:57:46 2015 UTC,"+Evil with Spacemacs  It's pretty funny: Every time I open a buffer that drops me into Emacs mode I'm like ""Fuck, so how do you switch the buffer again?"""
emacs,39hd7v,mbmanyl,2,Fri Jun 12 11:04:43 2015 UTC,+Evil
emacs,39hd7v,Space_Butts,2,Thu Jun 11 19:03:13 2015 UTC,+Evil
emacs,39hd7v,nosami,2,Thu Jun 11 19:07:34 2015 UTC,+Evil
emacs,39hd7v,vborja,2,Thu Jun 11 19:08:09 2015 UTC,+Evil
emacs,39hd7v,lykwydchykyn,2,Thu Jun 11 19:10:47 2015 UTC,I use Evil. - +Evil  with spacemacs
emacs,39hd7v,excitedaboutemacs,2,Thu Jun 11 19:11:36 2015 UTC,+Emacs
emacs,39hd7v,hvis,2,Thu Jun 11 19:36:42 2015 UTC,+Emacs
emacs,39hd7v,lcd_monitor,2,Thu Jun 11 19:42:24 2015 UTC,"+Emacs, but with several tweaks."
emacs,39hd7v,snikcers,2,Thu Jun 11 19:47:48 2015 UTC,+Emacs
emacs,39hd7v,kaushalmodi,2,Thu Jun 11 19:59:43 2015 UTC,+Emacs
emacs,39hd7v,NBEnt_the_Fourth,2,Thu Jun 11 20:18:16 2015 UTC,+Emacs
emacs,39hd7v,ellakk,2,Thu Jun 11 20:45:06 2015 UTC,+After
emacs,39hd7v,cgroza,2,Thu Jun 11 20:48:39 2015 UTC,+Emacs
emacs,39hd7v,RobThorpe,2,Thu Jun 11 20:51:32 2015 UTC,+Emacs
emacs,39hd7v,mordocai058,2,Thu Jun 11 20:52:05 2015 UTC,+Emacs
emacs,39hd7v,mary_hadalittle,2,Thu Jun 11 20:56:06 2015 UTC,+Emacs
emacs,39hd7v,sigma914,2,Thu Jun 11 21:01:46 2015 UTC,"+After  (for now)  I ripped holy-mode out from spacemacs. I really want to like Emacs' default keybindings so I'm struggling through it still.  The two things that just grind my muscle memory to a halt these days are:   Having only two keys to move by word instead of the many options under Vim. I read the movement section in Mastering Emacs and I understand how it works, it's just taking so long to get used to. Working with registers. Under Vim, combining registers with the grammar felt intuitive to me, but with Emacs I'm constantly finding myself hitting C-x r and trying to figure out which thing I want using guide-key."
emacs,39hd7v,oantolin,2,Thu Jun 11 21:02:54 2015 UTC,"Why do you want it? Even some experienced Emacs users said they switching to Evil, because the keys are cumbersome, from what I hear. So to be frankly, I don't expect that you will ever like the Emacs' default keybindings."
emacs,39hd7v,sledgespread,2,Thu Jun 11 21:06:31 2015 UTC,"+Evil  I make heavy use of Evil for actually editing text, but also use plenty of emacs keychords and menus for mail, irc, jira, org mode etc"
emacs,39hd7v,twonky,2,Thu Jun 11 21:04:28 2015 UTC,+After
emacs,39hd7v,napopa,2,Thu Jun 11 21:12:43 2015 UTC,+Emacs  But my keybinds have very little relationship to the defaults.
emacs,39hd7v,treerex,2,Thu Jun 11 21:18:42 2015 UTC,+Emacs
emacs,39hd7v,speckledlemon,2,Thu Jun 11 21:21:32 2015 UTC,+Emacs  ed: Spacemacs with holy-mode
emacs,39hd7v,zck,2,Thu Jun 11 21:23:08 2015 UTC,+Emacs
emacs,39hd7v,BrettW-CD,2,Thu Jun 11 21:28:13 2015 UTC,+Emacs
emacs,39hd7v,lawlist,2,Thu Jun 11 21:33:56 2015 UTC,+Emacs
emacs,39hd7v,kaushalmodi,2,Thu Jun 11 21:46:13 2015 UTC,+Emacs
emacs,39hd7v,lawlist,2,Thu Jun 11 21:51:14 2015 UTC,"A few +Emacs and the rest are all custom, with a disconnection of the escape and meta keys to open up another modifier key -- meta is alt and escape is its own modifier key."
emacs,39hd7v,Boojum,1 point,Thu Jun 11 22:01:38 2015 UTC,How do you disconnect those keys?
emacs,39hd7v,PenguinCyborg,2,Thu Jun 11 22:48:11 2015 UTC,"One of the very first lines in my init.el is (setq meta-prefix-char nil), which needs to come early on so that keymaps set to the value variables further on down or in other subsequently loading libraries get defined correctly.  I can't remember which library got confused because I defined the meta-prefix-char as nil after the library got loaded, but I sure do remember spending a lot of time figuring out that it was because the meta-prefix-char needed to be set to nil early on in the loading process.  I remember reading somewhere that using the escape key as meta is needed for things like the terminal, however, I use the graphical version of Emacs.  I like having the global esc-map for special things that are separate from the meta map.  Once they are separated, they look like this:  (define-key global-map [?\M-c] 'cfw:open-org-calendar) and (define-key esc-map ""k"" 'browse-kill-ring)."
emacs,39hd7v,beans-and-rice,2,Fri Jun 12 03:05:56 2015 UTC,+Emacs
emacs,39hd7v,-jwo-,2,Thu Jun 11 22:01:44 2015 UTC,+Emacs
emacs,39hd7v,reconsideryourbelief,2,Thu Jun 11 22:03:15 2015 UTC,+Emacs
emacs,39hd7v,cbrachyrhynchos,2,Thu Jun 11 22:08:55 2015 UTC,+Emacs
emacs,39hd7v,simtel20,2,Thu Jun 11 22:12:33 2015 UTC,+Emacs
emacs,39hd7v,DoctorBaconite,2,Thu Jun 11 22:16:12 2015 UTC,+Emacs
emacs,39hd7v,anreywang,2,Thu Jun 11 22:25:42 2015 UTC,+Emacs
emacs,39hd7v,tsimon,2,Thu Jun 11 22:34:02 2015 UTC,+Emacs
emacs,39hd7v,tsimon,2,Thu Jun 11 23:19:14 2015 UTC,+Emacs
emacs,39hd7v,Imxset21,2,Thu Jun 11 23:21:33 2015 UTC,+Emacs
emacs,39hd7v,jrdngrnbrg,2,Thu Jun 11 23:59:10 2015 UTC,+Emacs
emacs,39hd7v,brad_radberry,1 point,Fri Jun 12 00:01:47 2015 UTC,I am not a monster.
emacs,39hd7v,flarkis,2,Fri Jun 12 00:01:57 2015 UTC,+Emacs
emacs,39hd7v,bauta-steen,2,Fri Jun 12 00:19:37 2015 UTC,+Emacs
emacs,39hd7v,bio_endio,2,Fri Jun 12 00:24:50 2015 UTC,+Emacs
emacs,39hd7v,mracidglee,2,Fri Jun 12 00:25:25 2015 UTC,+Emacs
emacs,39hd7v,gepardcv,2,Fri Jun 12 00:36:15 2015 UTC,+Emacs
emacs,39hd7v,cirbafe,2,Fri Jun 12 01:02:46 2015 UTC,+Emacs
emacs,39hd7v,wadcann,2,Fri Jun 12 01:16:00 2015 UTC,+Emacs
emacs,39hd7v,fuck__karma,2,Fri Jun 12 01:41:23 2015 UTC,+Emacs
emacs,39hd7v,xuchunyang,2,Fri Jun 12 01:44:18 2015 UTC,+Emacs
emacs,39hd7v,instant_sunshine,2,Fri Jun 12 01:45:38 2015 UTC,+Emacs
emacs,39hd7v,ikwias,2,Fri Jun 12 02:02:27 2015 UTC,+Emacs
emacs,39hd7v,cullina,2,Fri Jun 12 02:21:09 2015 UTC,+Emacs
emacs,39hd7v,larsbrinkhoff,2,Fri Jun 12 03:16:16 2015 UTC,+Emacs
emacs,39hd7v,bliow,2,Fri Jun 12 03:29:45 2015 UTC,+Emacs
emacs,39hd7v,AndersBakken,2,Fri Jun 12 03:32:58 2015 UTC,+Emacs
emacs,39hd7v,tealeg,2,Fri Jun 12 04:01:34 2015 UTC,+Emacs
emacs,39hd7v,harsman,2,Fri Jun 12 04:57:52 2015 UTC,+Emacs
emacs,39hd7v,yilmazhuseyin,2,Fri Jun 12 05:11:10 2015 UTC,+Emacs
emacs,39hd7v,seylerius,2,Fri Jun 12 06:40:37 2015 UTC,+Emacs
emacs,39hd7v,villiger2,2,Fri Jun 12 08:12:00 2015 UTC,+Emacs
emacs,39hd7v,ChiefEmann,2,Fri Jun 12 08:24:33 2015 UTC,+Emacs
emacs,39hd7v,knome,2,Fri Jun 12 08:30:27 2015 UTC,+Emacs
emacs,39hd7v,PinkBalloons,2,Fri Jun 12 08:45:41 2015 UTC,+Emacs
emacs,39hd7v,bakuretsu,2,Fri Jun 12 08:46:02 2015 UTC,+Emacs
emacs,39hd7v,sparafucilee,2,Fri Jun 12 09:51:44 2015 UTC,+Emacs
emacs,39hd7v,Enfors,2,Fri Jun 12 10:53:36 2015 UTC,+emacs
emacs,39hd7v,stuhacking,2,Fri Jun 12 10:55:35 2015 UTC,I would really like to see this question asked in a less leading fashion because I am truly interested in the results.
emacs,39hd7v,pmsm1100,2,Fri Jun 12 11:10:52 2015 UTC,+Emacs
emacs,39hd7v,trobertson,2,Fri Jun 12 11:31:31 2015 UTC,+Emacs
emacs,39hd7v,Muratova,2,Fri Jun 12 11:47:04 2015 UTC,+Emacs
emacs,39hd7v,metaobject,2,Fri Jun 12 12:32:40 2015 UTC,+Emacs
emacs,39hd7v,molchsender,2,Fri Jun 12 12:33:38 2015 UTC,+Emacs
emacs,39hd7v,erewok,2,Fri Jun 12 13:13:30 2015 UTC,+Emacs
emacs,39hd7v,thesolitaire,2,Fri Jun 12 13:17:20 2015 UTC,+Emacs
emacs,39hd7v,ad1217,2,Fri Jun 12 13:27:10 2015 UTC,+Emacs
emacs,39hd7v,cog2011,2,Fri Jun 12 13:29:02 2015 UTC,+Emacs
emacs,39hd7v,n3mo,2,Fri Jun 12 13:58:31 2015 UTC,+Emacs
emacs,39hd7v,jimm,2,Fri Jun 12 14:10:35 2015 UTC,+Emacs
emacs,39hd7v,ganglygorilla,2,Fri Jun 12 14:27:51 2015 UTC,"+Emacs  Mostly Emacs, but enable some vi-style navigation when buffer is read-only."
emacs,39hd7v,reddpoll,2,Fri Jun 12 14:29:32 2015 UTC,+Emacs
emacs,39hd7v,OneOfTooMany,2,Fri Jun 12 14:44:53 2015 UTC,+Emacs
emacs,39hd7v,hirnbrot,2,Fri Jun 12 15:37:31 2015 UTC,+Emacs  But seriously considering making the switch. It's just such a project
emacs,39hd7v,rootzlevel,2,Fri Jun 12 15:58:38 2015 UTC,༼ つ ◕_◕ ༽つ View the results on reddpoll!
emacs,39hd7v,aerique,2,Thu Jun 11 18:52:09 2015 UTC,"+Evil  I have no idea how to edit text with the default emacs keybindings (and I don't care, I've been using emacs for like 8 years, so there was a plenty of time to learn it)."
emacs,39hd7v,0dyss3us,1 point,Thu Jun 11 19:43:15 2015 UTC,+Evil
emacs,39hd7v,Sonarman,1 point,Thu Jun 11 18:51:38 2015 UTC,"+Evil  Or rather, I use evil bindings for the small-scale stuff, and emacs-ish keychords (and plenty of ""M-x something"") for larger scale things, though I'm trying to move most of those to hydras."
emacs,39hd7v,mtndewforbreakfast,1 point,Thu Jun 11 19:18:10 2015 UTC,+Evil
emacs,39hd7v,aptmnt_,1 point,Thu Jun 11 19:20:03 2015 UTC,+Evil
emacs,39hd7v,gregdev,1 point,Thu Jun 11 19:24:52 2015 UTC,+Evil  using spacemacs
emacs,39hd7v,waspish_ly,1 point,Thu Jun 11 19:25:19 2015 UTC,+Evil (spacemacs)
emacs,39hd7v,DasEwigeLicht,1 point,Thu Jun 11 19:33:36 2015 UTC,+Evil (via Spacemacs)
emacs,39hd7v,hyperbling,1 point,Thu Jun 11 19:34:34 2015 UTC,+Evil
emacs,39hd7v,avanai,1 point,Thu Jun 11 19:40:39 2015 UTC,+Evil
emacs,39hd7v,Codas89,1 point,Thu Jun 11 19:40:47 2015 UTC,+Evil  But I use the regular emacs keybinds in insert mode. I think they're growing on me. Give it a few months and I might switch.
emacs,39hd7v,tonydanza_,1 point,Thu Jun 11 19:55:38 2015 UTC,+Evil
emacs,39hd7v,AndreasFrom,1 point,Thu Jun 11 20:07:06 2015 UTC,+Evil
emacs,39hd7v,jplindstrom,1 point,Thu Jun 11 20:13:39 2015 UTC,+Evil
emacs,39hd7v,kovrik,1 point,Thu Jun 11 20:21:49 2015 UTC,+Evil
emacs,39hd7v,lygaret,1 point,Thu Jun 11 20:21:54 2015 UTC,+Evil
emacs,39hd7v,runo,1 point,Thu Jun 11 20:25:12 2015 UTC,+Evil  Spacemacs.
emacs,39hd7v,efftea,1 point,Thu Jun 11 20:26:34 2015 UTC,+Evil
emacs,39hd7v,finder83,1 point,Thu Jun 11 20:29:17 2015 UTC,+Evil
emacs,39hd7v,__baxx__,1 point,Thu Jun 11 20:31:36 2015 UTC,+Evil
emacs,39hd7v,finder83,1 point,Thu Jun 11 20:39:21 2015 UTC,+Evil
emacs,39hd7v,caeciliusinhorto,1 point,Thu Jun 11 20:40:48 2015 UTC,+Evil
emacs,39hd7v,cpaulik,1 point,Thu Jun 11 20:46:57 2015 UTC,"+Evil  I'm one of those recent converts, thinking it'd just be a test, but it kind of just stuck as I keep fixing minor issues. The vim support of evil is one of the best I've seen in editors...if only macros worked better I'd be completely happy"
emacs,39hd7v,daliuso,1 point,Thu Jun 11 20:51:47 2015 UTC,"What issues are there? I've bumped into the ESC one already... Usually in just using on the fly macros though, I haven't tried to store any yet"
emacs,39hd7v,dakesew,1 point,Thu Jun 11 23:58:46 2015 UTC,"I'm not really sure where the one issue lies...here's my most recent example: taking  <option value=""AL"">Alabama</option> <option value=""AK"">Alaska</option> <option value=""AZ"">Arizona</option>  Do: qa ^dt""yt""f""a, <Esc>p ld$a),<Esc> I(<Del><Esc> q   Ignore the line endings, just tried to make it more readable. that <Del> was due to autopairs  When I move down a line and hit @a it does nothing... Trying it a second time, it gives me ""AZ"">Arizona</option>  So apparently it is doing something, but is breaking at various points in the recording...in vim, it works fine.  I do have a lot of plugins at this point, so it could be autopairs, an indent something, autocompletion, ...not really sure."
emacs,39hd7v,saqdefaq,2,Fri Jun 12 15:32:02 2015 UTC,"That works identically for me in evil and vim.  Not sure where it's breaking, but it's not in evil (at least, not with GNU Emacs 24.4.1 and Evil 1.1.6)..."
emacs,39hd7v,syl20bnr,1 point,Fri Jun 12 17:57:47 2015 UTC,+Evil
emacs,39hd7v,eazzor,1 point,Thu Jun 11 20:59:12 2015 UTC,+Evil
emacs,39hd7v,tridpq,1 point,Thu Jun 11 20:59:36 2015 UTC,+evil
emacs,39hd7v,Haversoe,1 point,Thu Jun 11 21:05:30 2015 UTC,+Evil
emacs,39hd7v,Domon,1 point,Thu Jun 11 21:11:39 2015 UTC,+Evil
emacs,39hd7v,choppsv2,1 point,Thu Jun 11 21:16:08 2015 UTC,+Evil (spacemacs)
emacs,39hd7v,adouzzy,1 point,Thu Jun 11 21:16:14 2015 UTC,+Evil
emacs,39hd7v,AtticHacker,1 point,Thu Jun 11 21:36:21 2015 UTC,+Emacs
emacs,39hd7v,phalangion,1 point,Thu Jun 11 21:38:28 2015 UTC,+Evil
emacs,39hd7v,CopernicusPlunger,1 point,Thu Jun 11 21:45:36 2015 UTC,+Evil
emacs,39hd7v,quartz2,1 point,Thu Jun 11 21:46:15 2015 UTC,+Evil
emacs,39hd7v,momonga2345,1 point,Thu Jun 11 21:51:11 2015 UTC,+Godmode
emacs,39hd7v,Tarmen,1 point,Thu Jun 11 21:52:24 2015 UTC,+Evil - came from using Vim for a couple years because I'd heard such great things about ESS and Auctex. I've been using evil since about day 3.
emacs,39hd7v,noustuff,1 point,Thu Jun 11 22:23:55 2015 UTC,+Evil w/ spacemacs
emacs,39hd7v,nandryshak,1 point,Thu Jun 11 22:26:00 2015 UTC,+Evil with spacemacs
emacs,39hd7v,mjs2600,1 point,Thu Jun 11 22:26:29 2015 UTC,+Evil
emacs,39hd7v,Is_At_Work,1 point,Thu Jun 11 22:34:32 2015 UTC,+Evil
emacs,39hd7v,bugsintherugs,1 point,Thu Jun 11 22:37:22 2015 UTC,+Evil  Spacemacs FTW.
emacs,39hd7v,adam_ay,1 point,Thu Jun 11 22:38:26 2015 UTC,+After
emacs,39hd7v,bcarrell,1 point,Thu Jun 11 22:42:40 2015 UTC,"I started with emacs keybindings, then I switched to evil, and now I use spacemacs with evil. +Evil"
emacs,39hd7v,__baxx__,1 point,Thu Jun 11 23:28:01 2015 UTC,+Evil
emacs,39hd7v,damn_what,1 point,Thu Jun 11 23:51:13 2015 UTC,+Emacs
emacs,39hd7v,bakuretsu,1 point,Thu Jun 11 23:53:40 2015 UTC,+Evil
emacs,39hd7v,krupped,1 point,Thu Jun 11 23:58:52 2015 UTC,+Evil
emacs,39hd7v,intense_porpoise,1 point,Fri Jun 12 00:02:47 2015 UTC,"+Evil  Using spacemacs.... Read that blog, I can't believe that he's asked advanced vim users and they haven't found anything concrete missing from evil... As a beginner I'll through iabbrev out there, that's not in there, neither is nnoremap... Perhaps these aren't classed as editing command's or something idk, it has :w though as well as r ! Whatever.   Using macros with it can't pick up the mapped ESC key, either ESC or C-[ has to be used.  Also had issues mapping ESC sequence to movement keys.  I'm very impressed with evil and I love spacemacs. But evil certainly isn't near perfect emulation even if it is the best of the emulations. Perhaps my idea of perfect is different to others though.... And maybe all the above is easy I just don't know how to do it ;)"
emacs,39hd7v,Spiph,1 point,Fri Jun 12 00:08:26 2015 UTC,+Godmode
emacs,39hd7v,Trout_Tickler,1 point,Fri Jun 12 00:38:50 2015 UTC,+Evil
emacs,39hd7v,NOTWorthless,1 point,Fri Jun 12 00:43:46 2015 UTC,+Evil
emacs,39hd7v,flamingspinach_,1 point,Fri Jun 12 00:44:56 2015 UTC,+Evil
emacs,39hd7v,fridsun,1 point,Fri Jun 12 00:48:22 2015 UTC,+Evil
emacs,39hd7v,mkaito,1 point,Fri Jun 12 01:20:36 2015 UTC,+Evil
emacs,39hd7v,simonced,1 point,Fri Jun 12 01:33:08 2015 UTC,+Evil  I switched to Evil when I decided to give spacemacs a whirl. It feels much more natural to me.
emacs,39hd7v,CausticInt,1 point,Fri Jun 12 01:39:55 2015 UTC,+Evil
emacs,39hd7v,atvrager,1 point,Fri Jun 12 02:20:51 2015 UTC,+Evil
emacs,39hd7v,Ironballs,1 point,Fri Jun 12 02:27:07 2015 UTC,+Evil
emacs,39hd7v,ZaneA,1 point,Fri Jun 12 02:46:08 2015 UTC,"+After  I just mean I tried Evil, but I don't think that works with Emacs philosophy. If I want vim key bindings, I use Vim."
emacs,39hd7v,MCHerb,1 point,Fri Jun 12 03:11:37 2015 UTC,+Evil
emacs,39hd7v,cestdiego,1 point,Fri Jun 12 03:17:21 2015 UTC,Just Vi style home row navigation keybindings.
emacs,39hd7v,whism,1 point,Fri Jun 12 03:23:25 2015 UTC,+Evil
emacs,39hd7v,chebertapps,1 point,Fri Jun 12 04:36:59 2015 UTC,+Evil
emacs,39hd7v,audaxxx,1 point,Fri Jun 12 05:00:01 2015 UTC,+Evil
emacs,39hd7v,FreeFromChoice,1 point,Fri Jun 12 05:08:47 2015 UTC,+Evil
emacs,39hd7v,marten,1 point,Fri Jun 12 05:17:17 2015 UTC,+Evil
emacs,39hd7v,jm-mso,1 point,Fri Jun 12 05:38:58 2015 UTC,+Evil
emacs,39hd7v,isol78,1 point,Fri Jun 12 05:58:39 2015 UTC,+After
emacs,39hd7v,TheBB,1 point,Fri Jun 12 06:52:35 2015 UTC,+Evil
emacs,39hd7v,tampix77,1 point,Fri Jun 12 06:56:24 2015 UTC,+Evil
emacs,39hd7v,f0086,1 point,Fri Jun 12 07:07:47 2015 UTC,+Evil
emacs,39hd7v,rottingchris,1 point,Fri Jun 12 07:12:27 2015 UTC,+Evil  with Emacs keybindings in insert mode as well.
emacs,39hd7v,leftrightupdown,1 point,Fri Jun 12 07:14:17 2015 UTC,+Godmode
emacs,39hd7v,ludat,1 point,Fri Jun 12 07:22:29 2015 UTC,+Evil
emacs,39hd7v,mars_888,1 point,Fri Jun 12 07:33:46 2015 UTC,+Evil
emacs,39hd7v,LadenSwallow,1 point,Fri Jun 12 07:51:38 2015 UTC,+Evil
emacs,39hd7v,hexmage,1 point,Fri Jun 12 07:56:41 2015 UTC,+Evil
emacs,39hd7v,JASSM-ER,1 point,Fri Jun 12 08:00:05 2015 UTC,+Evil
emacs,39hd7v,sbergot,1 point,Fri Jun 12 08:01:03 2015 UTC,+Evil
emacs,39hd7v,pavlovian,1 point,Fri Jun 12 08:06:40 2015 UTC,+Evil
emacs,39hd7v,Aoi32,1 point,Fri Jun 12 08:26:10 2015 UTC,+Evil
emacs,39hd7v,exitheone,1 point,Fri Jun 12 08:33:15 2015 UTC,+Evil
emacs,39hd7v,IceDane,1 point,Fri Jun 12 08:52:27 2015 UTC,+Evil
emacs,39hd7v,beandipper,1 point,Fri Jun 12 09:06:49 2015 UTC,+Evil
emacs,39hd7v,Funnnny,1 point,Fri Jun 12 09:34:07 2015 UTC,+Evil
emacs,39hd7v,gkunno,1 point,Fri Jun 12 10:23:41 2015 UTC,+Evil
emacs,39hd7v,esceptico,1 point,Fri Jun 12 10:47:41 2015 UTC,+Evil
emacs,39hd7v,glg00,1 point,Fri Jun 12 11:29:07 2015 UTC,+Evil
emacs,39hd7v,joedicastro,1 point,Fri Jun 12 12:14:15 2015 UTC,+Evil
emacs,39k0rz,tumashu,2,Fri Jun 12 07:11:03 2015 UTC,"No previous experience in Perl, but your code looks like a command line command instead of plain Perl code, though I can't run it in my shell. I'm not very sure what you want. The following may (or may not) work for you: (convert 10, i.e., 0xa, to Base64 representation)  (base64-encode-string (number-to-string #xa)) => ""MTA=""   do it using base16:  ~ % echo -n 10 | base64 MTA=   some doc http://www.gnu.org/software/emacs/manual/html_node/elisp/Base-64.html"
emacs,39k0rz,xuchunyang,1 point,Fri Jun 12 07:29:50 2015 UTC,"orig code is:  photo=echo $photo | perl -ne 's/([0-9a-f]{2})/print chr hex $1/gie' | base64 --wrap=0  $photo  store  ""photo info"" (seemd a pic encoded) extracted from android-contacts-db  like this
emacs,39k0rz,IceDane,2,Fri Jun 12 07:38:38 2015 UTC,"This may not be very idiomatic elisp since I'm still rather new at it, so I'd welcome any suggestions.  But if understand you correctly you want to translate hex-encoded raw image into a base64 encoded raw image. This should do that. It works on the current buffer. Running it, saving the buffer, then decoding it with the terminal base64 resulted in a valid image(of a hand).  (defun dostuff ()   (interactive)   (let (str result)     (setq str (buffer-string))     (setq result """")     (while (> (length str) 0)       (setq result (concat result (string (string-to-number (substring str 0 2) 16))))       (setq str (substring str 2))       )     (erase-buffer)     (insert (base64-encode-string result)))   )"
emacs,39k0rz,Boojum,2,Fri Jun 12 13:11:44 2015 UTC,"This should be fairly close, though it doesn't filter out non-hex characters:  (defun hex-to-base64 ()   (set-buffer-file-coding-system 'binary)   (dehexlify-buffer)   (base64-encode-region (point-min) (point-max)))"
emacs,39ikk0,green-in-gold,1 point,Thu Jun 11 23:32:10 2015 UTC,Not sure that it fits your criteria of entering the keyboard shortcut but I use org-drill as a space based repetition system.   http://orgmode.org/worg/org-contrib/org-drill.html  Something that actually lets you enter the keyboard command would make for a nice little extension.
emacs,39h9qu,kirang89,1 point,Thu Jun 11 18:29:46 2015 UTC,Looks like I'm back to switching to Firefox.
emacs,39h9qu,howardthegeek,1 point,Thu Jun 11 21:51:43 2015 UTC,Thanks! This replaces a really goofy piece of JS that I had.
emacs,39h9qu,slackorama,1 point,Thu Jun 11 22:09:22 2015 UTC,"Thanks. I used org-mac-link before on Mac, but it recently didn't work from time to time so I switched to Chrome."
emacs,39h9qu,xuchunyang,1 point,Fri Jun 12 06:14:01 2015 UTC,What are the advantages when compared to org-protocol?
emacs,39h9qu,vifon,1 point,Fri Jun 12 08:16:12 2015 UTC,"I've used bookmarklet w/javascript. But it doesn't work with AdBlock (and, I think, other blockers are affected too), sometimes on HTTPS sites (Github, Youtube and some other).  Not sure about Copy as Org-mode, but Org-mode Capture add-on I've mentioned earlier, uses org-protocol under the hood."
emacs,39h9qu,manandbytes,1 point,Sat Jun 13 08:16:56 2015 UTC,Another one is Org-mode Capture from Olivier Schwander https://addons.mozilla.org/fr/firefox/addon/org-mode-capture/
emacs,39h9qu,manandbytes,1 point,Sat Jun 13 08:06:21 2015 UTC,"Out of curiousity, how has this worked out for you ?"
emacs,39h9qu,dfeich,1 point,Sat Jun 13 15:28:59 2015 UTC,Extremely useful. The table capturing is particularly nice. Thanks a lot!
emacs,39h9qu,Erakko,0,Sat Jun 13 09:43:56 2015 UTC,Stfu and take my money!
emacs,39e0ve,revocation,31,Thu Jun 11 02:59:39 2015 UTC,I don't use VIM bindings. I guess there are more people using emacs with emacs bindings than with VIM bindings.
emacs,39e0ve,kcin,23,Thu Jun 11 04:38:39 2015 UTC,"I don't like modal editing, so I just use the default bindings."
emacs,39e0ve,Denommus,13,Thu Jun 11 05:41:58 2015 UTC,"I love vim, but after years of using emacs with various vi/vim emulation modes, I was surprised to feel how liberating and even ""slick"" emacs felt in its default configuration. It was like I had stripped a layer of cognitive goop off my editor and had less stuff between my thoughts and what happened to my text.  I've noticed the same of other software systems that try to emulate another either through heavy customization or a wrapper layer. They never seem to be as nice as the thing they emulate."
emacs,39e0ve,ForkInBrain,7,Thu Jun 11 11:09:32 2015 UTC,"I switched to evil mode from vim sbout a year and a half ago. I use Emacs keybindings in insert mode (having wiped the insert mode keymap) and vim (editing) bindings in normal mode (through evil). They each are useful in different situations. Recently I have found myself using Emacs bindings more because they are available in many more applications than vi bindings. If I had to choose one, I'd choose Emacs, no question, but would mourn the loss.  In particular, the emacs kill/yank system is a lot richer."
emacs,39e0ve,catern,6,Thu Jun 11 03:39:37 2015 UTC,It seems like asking this question in /r/emacs is going to yield an obvious answer.
emacs,39e0ve,IceDane,12,Thu Jun 11 11:42:14 2015 UTC,"I definitely prefer vim editing over emacs. I just recently switched from vim to emacs + evil. I regret that I didn't do this sooner, because having an editor that is basically a lisp machine is so cool. Vim editing is, to me, simply superior to editing using sequences such as the ones you displayed above."
emacs,39e0ve,IceDane,1 point,Thu Jun 11 09:37:13 2015 UTC,Not entirely sure what you mean. You want me to elaborate on why I prefer vim bindings?
emacs,39e0ve,IceDane,1 point,Thu Jun 11 23:20:05 2015 UTC,"I am not claiming that vim editing is superior -- I am merely saying that I find it to be. I believe this to be mostly dependent on what you start with and how your brain gets wired as you use one or the other the most.  A good few years ago, when I decided I should probably check out either vim or emacs, and I started out trying emacs. I was really inexperienced at the time and it was all very complicated to me, but what I remember very distinctly is that I gave up rather quick because of the way emacs editing worked. I found it really, really uncomfortable using long sequences of modified keys combined with non-modifier keys. I didn't know about switching caps lock <=> control back then, but it's still uncomfortable.  I tried vim afterwards. It took me a while to get used to modal editing, but as soon as I did I could not shake it. When using vim, you should be in insert mode as little as possible. Much like emacs users do various things to make the use of modifier keys more comfortable, vim users do stuff like bind jj or similar to exit insert mode. This means that OP's example regarding switching modes to type fn1(fn2(arg)) inside-out is very easy for me. If I start typing arg, I can hit jj really fast, hit ysiw) to surround it, which takes puts the cursor here: |(arg). Then I can either type ysab) to surround it again, then a and type fn2, or I can type fn2 and then hit ys%) and the final fn1. All of these are basically on my homerow.   Another thing is that some keybindings in emacs use M-something bindings, and in my workflow I use a tiling window manager(xmonad). Most of my bindings in xmonad use alt as a modifier key.  As I said before, I think it's mostly what you start with and use the most that decides what you like. Emacs as an editor is far superior to vim in all aspects because it is infinitely customizable and because lisp, of course. I regret not having switched sooner. I cannot live without vim editing, though, and I feel incredibly handicapped every time I have to use an editor that does not have them.  But as many people have said before: when you really start using your editor, and customizing it to fit your needs, it probably stops being vim or emacs and kind of becomes an extension of yourself. This is the case for me. Apart from the basic editing stuff, my most used vim bindings were bindings that I made myself that only really made sense to me. The same applies to my emacs config."
emacs,39e0ve,mguzmann,3,Fri Jun 12 11:15:03 2015 UTC,"I tried to get used to modal editing, but then stayed with emacs keybindings."
emacs,39e0ve,eskatrem,3,Fri Jun 12 23:27:46 2015 UTC,"I can't get used to modal editing, and I got used to emacs default. I may not be the most powerful user here, but for me emacs keys binding is just fine."
emacs,39e0ve,Tarmen,5,Sat Jun 13 12:38:29 2015 UTC,"I really like the vim bindings but then also I switched from vim so this shouldn't come as a surprise.  First, those emacs commands aren't a grammar. They are single commands, one for everything you do. I find vim much more natural. If I want to delete everything in a paragraph I know I have to press dip because di is the start of every delete in command. I also automatically can delete around the paragraph (until the start of the next one), dap or visually select it, vap. I personally don't like to visually select everything before doing a command, operators are just so much neater. And take a look at textobjects!  Anyway. What is the problem with that function wrapping? There are a bunch of ways to solve this with vim. You could go to the END of the word if there are no spaces in the function with E.  You could start typing at the end of the line with A. You can go to the other pair of the bracket with % Hell, you could use surround - either ysiWf fn1 <enter> or siWf fn1 <enter> - depending on whether you replaced substitute with it. It stands for  surround inner WORD with function fn1  Oh, and try to put escape onto capslock while trying vim out. It is how its originally keyboard was layed out and is much nicer on the pinky."
emacs,39e0ve,_delirium,1 point,Thu Jun 11 07:00:53 2015 UTC,"First, those emacs commands aren't a grammar. They are single commands, one for everything you do.   Some fit that description, but some are composable and somewhat grammar-like. The most common is probably the prefix operator C-u. For example, prefixing a command with C-u n, for some number n, will repeat the command that many times, similar to prefixing a command with a number in vi. It's definitely not as common in emacs style keybindings though."
emacs,39e0ve,jplindstrom,2,Thu Jun 11 14:41:21 2015 UTC,"To be fair, that's an extremely limited grammar compared to Vim's modal editing."
emacs,39e0ve,goofansu,2,Thu Jun 11 08:10:09 2015 UTC,"I prefer Prelude keybindings. I use it in EmacsForMac app.  When In Chinese input method, some keybindings like 'M-g g' will just input Chinese instead of execute the command, so the combination keybindings are not very useful to me."
emacs,39e0ve,till_apert,2,Thu Jun 11 12:16:11 2015 UTC,"One of the things I most love about emacs is being able to use editing and navigating keybindings nearly everywhere, like in the modeline or in a specialized buffer. One of my favorite things about vim is being able to navigate a file while my other hand picks my nose or eats a sandwich.  Basically, I like vim if I'm mostly navigating and reading, and emacs if I'm mostly writing new stuff."
emacs,39e0ve,Taikal,2,Thu Jun 11 20:53:29 2015 UTC,"For instance, if I've want to type fn1(fn2(arg)), this is a nightmare using vim keybindings because I don't type left to right but from inside to outside.   I don't understand what you mean. Maybe that you must switch between Insert Mode and Normal Mode too often?  If so then, as far as I remember, Evil allows for a prefix key to execute single editing commands without leaving Insert Mode."
emacs,39e0ve,tealeg,1 point,Thu Jun 11 05:04:23 2015 UTC,Maybe that you must switch between Insert Mode and Normal Mode too often?   That's right. Vim allows Ctrl-o but that plus the movement key seems like a lot of work for a single movement. ...
emacs,39e0ve,RobThorpe,2,Thu Jun 11 07:30:45 2015 UTC,"I learned vi a long time ago, and few years later learned emacs.  Since learning emacs I've never looked back.  Emacs key bindings have always made more sense to me, and around 3 years ago I switched to colemak.  To use vim I had to remap everything, to use emacs I just carried on as I was - the reason being that the emacs keybinding were wired into my brain by meaning, not by positioin."
emacs,39e0ve,draxil,2,Thu Jun 11 08:22:20 2015 UTC,"I use Emacs' default bindings.  I've been using Emacs for 15 years and I'm very used to them.  I customize them a little bit.  I don't get on well with modes.  Even isearch which is a fairly obvious mode I have difficulty with, I often forget I'm in it and forget to look at the mode line, then I start typing."
emacs,39e0ve,ClockRadio82,2,Sat Jun 20 01:55:18 2015 UTC,I think most people who use emacs use emacs keybindings? I always thought evil mode was just for people who are horribly conflicted :)
emacs,39e0ve,lykwydchykyn,2,Thu Jun 11 12:20:32 2015 UTC,Yes.
emacs,39e0ve,four04,2,Thu Jun 11 12:44:30 2015 UTC,"I learned vim first, but I only ever used emacs with its native keybindings.  I never really cared for the whole command-mode/edit-mode thing.  Best thing for me about emacs is that if I forget a keybinding, I can always do M-x <command-name>.  Swapping that control and caps lock was the best thing that ever happened to my typing.  I shout a lot less on the Internet :)."
emacs,39e0ve,caeciliusinhorto,2,Thu Jun 11 12:58:55 2015 UTC,"I don't use Vim bindings. I'd agree about the Emacs bindings having their own logic, and I'd argue that Emacs bindings are even better than Vim.  Keybindings in Emacs just make so much sense.  For example, the prefix keys are very clearly separated based on their role:   C-x: Run a low-level Emacs command.  M-x: Run some LISP command/function.   Then, to move your cursor around:   C-f: Forward in the line C-b: Backward in the line C-n: Next line C-p: Previous line   As one of the people who first convinced me to use Emacs said to me,   Bigger jumping is more ""Meta""   So bigger jumps can be accomplished via:   M-f: Jump forward a ""word"" M-b: Jump backward a ""word"" M-a: Jump backward a ""sentence"" M-e: Jump forward a ""sentence""   I just like Emacs keybindings more, and I find Vim's keybindings and modal nature to be erratic and hardly useful."
emacs,39e0ve,gnzlbg,1 point,Thu Jun 11 14:10:08 2015 UTC,"Keybindings in Emacs just make so much sense.   That's really a matter of perspective, though.  To me, vi keybindings just make so much sense.  The C-x somekey vs. M-x somecommand distinction, for instance, is preserved by commands run in normal mode, vs in command mode: complex commands/functions are run with :somecommand whereas simple low-level command are merely somekey.  Granted, hjkl don't have the same mnemonic potential as C-n/p/f/b, but that's four commands, which are standard across other unix programs anyway (e.g. less, nethack), and anyway aren't used that much.  As for the Meta-somekey vs. Ctrl-somekey distinction, sure, that's consistent, but ""a"" and ""e"" for forward and backward sentence is hardly particularly mnemonic...  By contrast, vim is not only usually mnemonic, it also has an easily understandable grammar. Thus, if I know that d is the delete command, I know that dw deletes a word, dd deletes a line, d) deletes a sentence, and d} deletes a paragraph.  With emacs, if I know that M-d deletes a word, I have no way of deriving from that the command to delete a line, C-k.  And with vim, learning the single command y (yank, which in vi-speak is copy) allows me to transfer all of this knowledge (yy, yw, y), y} etc.) to copying as well.  Whenever I learn a new text-object (ip for 'inside paragraph', for instance) I can apply this to all of the editing commands I use which take text-object arguments (y, c, d, and v, and possibly a few others I am forgetting...)  Sure, vi has its idiosyncracies (I have no idea why Y is a synonym for yy but D and C are synonyms for d$ and c$ respectively, for instance), but on the whole it makes a lot of sense when you get to know it.  I'm sure emacs makes sense as well, but to me at least it seems to make less sense.  I used vim (and occasionally vi/nvi) for at least 2 years solidly before I first used emacs, however, and since I started to use emacs, I've done most of that within evil.  I'm sure people with the opposite experience think that emacs is intuitive and vi is incoherent..."
emacs,39e0ve,trezor2,3,Thu Jun 11 14:48:28 2015 UTC,"I use spacemacs with emacs keybindings, use whatever you like more."
emacs,39e0ve,jrootabega,7,Thu Jun 11 17:20:53 2015 UTC,Obviously yes.  Vim keybindings has in the past caused me to have to go yank out the power cable from production servers.  In not having that shit ever again. Fuck vim.
emacs,39e0ve,nautola,3,Fri Jun 12 18:52:47 2015 UTC,"Haha, we need that story!"
emacs,39e0ve,tuhdo,1 point,Thu Jun 11 08:57:27 2015 UTC,"I came from vim. I use evil mode, but I've had the desire to move away from it.  Integration isn't perfect and sometimes I just want to start entering chords. That said, I can't switch. I have 3 issues with emacs bindings.    Window movement is impossibly difficult. Region selection is so crippled compared to vim  Pressing chords all day hurts my pinkies."
emacs,39e0ve,nautola,4,Thu Jun 11 06:22:24 2015 UTC,"Have you tried expand-region, a one-size-fit-all magical command?"
emacs,39e0ve,tuhdo,1 point,Thu Jun 11 11:34:07 2015 UTC,"Compared to what vim can do, it isn't enough. I can type va( and then eval in Elisp. Expand region, while awesome, isn't as great."
emacs,39e0ve,ReneFroger,1 point,Thu Jun 11 06:02:02 2015 UTC,"You can C-M-x to eval current defun. Currently I use lispy and enjoying modal editing without switching modes. This goes beyond both Emacs and Vim, and can be confusing at first.  You can use C-M-u to go up a scope and C-M-d to go down a scope.  You can go to beginning of defun (any language) with C-M-a and C-M-e). To mark the whole function, C-M-h. To move based on statement in C-like modes, use M-a and M-e. The ci, di, ca, da... variants in Vim can be replaced by expand-region easily."
emacs,39e0ve,tuhdo,2,Thu Jun 11 06:16:54 2015 UTC,"Quick tip if you're looking for a Vim-like keybinding for Expand region.   (define-key evil-visual-state-map (kbd ""v"") 'er/expand-region)  So press v to visually expand, and again and again."
emacs,39e0ve,jplindstrom,1 point,Thu Jun 11 14:53:14 2015 UTC,Nice.
emacs,39e0ve,ReneFroger,1 point,Thu Jun 11 15:13:23 2015 UTC,"How do you deselect the text? Normally that's done by hitting ""v"" again."
emacs,39e0ve,jplindstrom,1 point,Thu Jun 11 17:12:03 2015 UTC,Check the documentation of expand-region.  Pressing - decrease the scope of expand-region.
emacs,39e0ve,n2o4,1 point,Thu Jun 11 17:20:22 2015 UTC,"That's not what I meant.  The selected text won't necessarily have been marked by expand-region, so there might be a huge amount of shrinking needed to remove the selection completely.   I'm wondering how you immediately deselect the entire selection (maybe you simply don't)."
emacs,39e0ve,spwhitton,1 point,Thu Jun 11 20:54:51 2015 UTC,er/expand-region is an interactive autoloaded Lisp function in `expand-region.el'.  (er/expand-region ARG)  Increase selected region by semantic units.  With prefix argument expands the region that many times. If prefix argument is negative calls `er/contract-region'. If prefix argument is 0 it resets point and mark to their state before calling `er/expand-region' for the first time.
emacs,39e0ve,RothiasVex,2,Thu Jun 11 20:59:34 2015 UTC,Or just Ctrl-g
emacs,39e0ve,XANi_,2,Thu Jun 11 21:25:00 2015 UTC,"For window stuff, I highly recommend ace-window ... it streamlines things quite a bit."
emacs,39e0ve,cbrachyrhynchos,1 point,Thu Jun 11 22:26:57 2015 UTC,i use super/windows key + wsad for windows operation. quick and convenient
emacs,39e0ve,fantastipants,1 point,Fri Jun 12 03:32:07 2015 UTC,I prefer emacs keybinds in emacs and would like to have them in other applications for consistency. I like vi keybinds in vi(m).
emacs,39e0ve,jart,1 point,Thu Jun 11 07:56:30 2015 UTC,"The only reason I've even contemplated using Evil is so I'd have one common interface for the times I'm on a machine without emacs and end up in vi.  I still have residual vi muscle memory from the years I used it, long ago.  But I feel like once the keys are in your muscle memory, all the benefit of the vi input language's elegance is irrelevant.    Perhaps it's that I've never found using modifier keys a chore I'd rather not have to mentally switch between modes."
emacs,39e0ve,X700,1 point,Thu Jun 11 07:27:32 2015 UTC,Yes. Emacs keybindings and chording is the best.
emacs,39e0ve,tuhdo,1 point,Thu Jun 11 11:29:03 2015 UTC,"I use evil-mode, but in emacs state by default.  Whenever something would be more convenient with vim-like editing I have it available with C-z.  evil-mode became a tool for specific tasks.  vim-like bindings by default were rather a nuisance, I even preferred a viperized emacs over that.  (setq evil-default-state 'emacs       evil-insert-state-modes nil       evil-motion-state-modes nil)"
emacs,39e0ve,X700,1 point,Thu Jun 11 13:30:47 2015 UTC,"Interesting, so you prefer Vi over Vim. May I know the reason? Just curious."
emacs,39e0ve,fkchang2000,1 point,Thu Jun 11 14:58:37 2015 UTC,"I find vim features often pretty random and unsystematic, vile is my favourite vi clone.  So you are right, but that was not what I had in mind.  I mainly liked that viper played better with other Emacs modes.  evil is more powerful, but requires more work. Additionally viper did have a more complete ex mode than evil last time I checked."
emacs,39e0ve,instant_sunshine,1 point,Thu Jun 11 15:45:28 2015 UTC,"I like emacs bindings for a few reasons  * on OSX (w/a slight tweak), the basic navigation, cut commands are pretty much universal in any native text widget, widget, so I use them every where, browser url line, text widgets in most web apps, outlook (need it for work), and of course everywhere else that gnu readline is on top of that * I very often type/edit/type/edit in a fashion that would be maddening if I had to switch modes all the time.  But to be fair, I do want to try evil-mode to see if I can drink some of that 'modal editing is superior' kool-aid, but losing the above bullet would really suck * emacs commands work everywhere, that really annoys me about vi, the vim command line loses vim's ability to edit, but I use emacs commands in the m-x all the time"
emacs,39e0ve,abo-abo,1 point,Thu Jun 11 16:26:15 2015 UTC,"Yes  To be fair, many Emacs bindings are also modal.  What are prefix maps of not modal editing."
emacs,39e0ve,tuhdo,1 point,Fri Jun 12 00:04:45 2015 UTC,"C-<space> C-u 2 M-e C-w is perhaps not as efficient as 2d}   It isn't. I'd say that C-<space> M-e M-e C-w is better than 2d}. The reason is that the first is an interactive sequence, while 2d} is just a single command.  Interactive sequences are great, because that's how people operate: ""do A, get feedback on the effect, do B, more feedback, do C"".  Compare to: ""do A, B, C, get feedback"". If you mistype any of ABC in command mode, you have to repeat all over and cancel the bad effect.  In interactive mode, there less chance for an error and less stress, and usually when you catch an error, you don't need a full restart.  I think the best of both worlds would be the ability to do C-<space> EEw, since in Emacs the region selection is modal anyway.  Example code:  (global-set-key (kbd ""C-SPC"") 'hydra-set-mark)  (defun hydra-set-mark ()   (interactive)   (if (region-active-p)       (progn         (deactivate-mark)         (hydra-keyboard-quit))     (call-interactively 'set-mark-command)     (hydra-region/body)))  (defhydra hydra-region ()   (""E"" forward-sentence)   (""f"" forward-word)   (""b"" backward-word)   (""w"" kill-region :exit t))"
emacs,39e0ve,abo-abo,1 point,Thu Jun 11 19:11:03 2015 UTC,"2d} is not a single command but composed of digit argument 2 and 2 commands: d and }. d to delete and } to select the end of a destination paragraph where point stops. If you use } alone, it moves to the end of a paragraph. If you use d, it waits for a so-called text object (like } is an example) to complete the deleting command as a whole. Similarly, c combines with any text object to change delete a text object at point and get into insert mode. Text object can be a word, a big word, a symbol, a sentence, a paragraph... Another advantage when using text object is that point never moves when you perform any operation on it."
emacs,39e0ve,simonced,1 point,Fri Jun 12 03:30:21 2015 UTC,"I know how Vim works. My point is that nothing happens before you press the final char, while with Emacs bindings you get feedback after C-<space>, then after M-e, then after M-e, then after C-w.  What I'm saying is that I like Emacs region selection and Vim's visual mode, but not Vim's normal mode."
emacs,39e0ve,robertmeta,0,Fri Jun 12 09:47:06 2015 UTC,"I am a user of both Vim and Emacs. I use both editors on a daily basis as my main tools.  Vim for programming, Emacs for documenting (because org-mode). I don't like the Emacs bindings, but I deal with them.  What you seem to not like in Vim is the modal editing. And that is something to get used to, but the real vim can be more easily customized on that regard and rules evil in my opinion.  For example, I escape from insert mode with fj or jf and it's in my muscle memory. It's a nice and comfortable mapping. But doing the same setup in Emacs+Evil, sorry, I don't like elisp to setup my editor. It takes too much brain power I think.  Also, when I use Emacs, I don't use Evil, I separate my tools so there is like an automatic switch in my head, no problem."
emacs,39e0ve,ReneFroger,1 point,Fri Jun 12 11:14:38 2015 UTC,"oh, I like fj / jf more than jj or jk/kj -- I am stealing that."
emacs,39e0ve,__baxx__,1 point,Fri Jun 12 12:18:10 2015 UTC,"I prefer jk, you're rolling with your fingers which is faster dan fj / jf."
emacs,39e0ve,ReneFroger,1 point,Thu Jun 11 03:22:46 2015 UTC,using a movement key as an escape sequence causes lag with emacs though. I had to change from jf to ij
emacs,39e0ve,borodino,3,Thu Jun 11 04:19:51 2015 UTC,"No. Perhaps you configured it in the wrong way. You could use Keychord (install it from MELPA), then add this in your configuration:   (key-chord-mode 1) ;; Enable keychord mappings (setq key-chord-two-keys-delay 0.6) ;; Set keychord time (key-chord-define evil-insert-state-map ""jk"" 'evil-normal-state) ;; Escape from insert mode  Try it. You will thank me later."
emacs,39ejtn,ananthakumaran,5,Thu Jun 11 05:11:38 2015 UTC,"Thanks for this! I never got tss-mode to work correctly. It would mostly just lock up Emacs when trying to do autocompletions. This is working a lot better for me so far.  If anyone's interested, I've hacked together a quick and dirty Spacemacs configuration layer, which I've made available here. Not sure if everything is correct, but it seems to work well enough for me."
emacs,39ejtn,mars_888,2,Thu Jun 11 13:51:00 2015 UTC,"Shit, guess what, I just switched from vim to spacemacs (because of exactly this)  Thanks for making this available, definitely stealing it ;)  PS: Can you give a quick start guide on how to use it for a newbie? I've added it as a configuration layer, but unsure how to add it to my .spacemacs"
emacs,39ejtn,Secretmapper,2,Sun Jun 14 07:07:23 2015 UTC,"Just figured it out! For anyone who might find it useful:  Create a configuration layer (see in docs), name it tide, and just copy the package.el, config.el above.  Add tide AND auto-completion in the dotspacemacs-configuration-layers.  Make sure to edit the 'path/to/tsc' variable, though I personally just run tsc from the shell (:!tsc) since I have a tsconfig.json   The C-c C-c command passes the current file to tsc. is there a way to make C-c C-c run from the current open dir and take into account the config file?"
emacs,39ejtn,Secretmapper,1 point,Sun Jun 14 10:42:57 2015 UTC,"I just came from Vim a few weeks ago, so I'm still pretty new to all of this myself :)   The C-c C-c command passes the current file to tsc. is there a way to make C-c C-c run from the current open dir and take into account the config file?   I would say that is definitely possible. Again, still new to all this, but this is how I would approach it myself:  The compile-command variable specifies the shell command to run when the compile function is executed (here bound to C-c C-c). According to the documentation, one can invoke tsc to use a tsconfig.json in two ways. Note that TypeScript 1.5 or higher is required.  1.) The first method is to just run tsc from a given directory and tsc will try to find tsconfig.json by walking up the current directory path. If this works, all that would be required would be to set compile-command to the tsc executable and pass in any parameters required but leave out the file name. I believe that Emacs will run the command from the directory of the file in the current buffer. So use something like this, instead of what was added in the configuration layer that I posted:  (defun tide/init-typescript-mode ()   (interactive)   (setq compilation-read-command nil)   (let ((tsc ""path/to/tsc""))     (set (make-local-variable 'compile-command)          (progn            (format ""%s --target es5""                    tsc)))     (message compile-command)))   2.) Invoke tsc with no input files and supply a -p or --project parameter with the path to tsconfig.json. This would require a bit more code and I don't have a fully tested solution, but I think you can do something like the following:  Use (locate-dominating-file FILE NAME-OR-PREDICATE) to locate the tsconfig.json file (note that there is no error checking here, so this will probably fail if the file could not be found):  (defun tide/find-tsconfig.json ()   (let ((tsconfig-file-dir         (locate-dominating-file (buffer-file-name) ""tsconfig.json"")))     (concat tsconfig-file-dir ""tsconfig.json"")))   Use this util function to construct the final compile-command value:  (defun tide/init-typescript-mode ()   (interactive)   (setq compilation-read-command nil)   (let ((tsc ""path/to/tsc"")         (tsconfig-path (tide/find-tsconfig.json)))     (set (make-local-variable 'compile-command)          (progn            (format ""%s --target es5 --project \""%s\""""                    tsc                    tsconfig-path)))     (message compile-command)))   Hope this helps!"
emacs,39ejtn,mars_888,2,Sun Jun 14 13:57:11 2015 UTC,"This is awesome! Thank you for taking the time to write it!  I didn't know tsc would work up its way to the directory so just not passing the file would work (doh!)  Very useful thanks, got birthed into lisp :)"
emacs,39ejtn,Secretmapper,3,Wed Jun 17 06:22:35 2015 UTC,I like that this mode has achieved the same feature set as the existing similar package tss-mode but uses newer front-ends for completion and syntax checking. And the name is cool!
emacs,39fg8a,Muratova,3,Thu Jun 11 10:51:03 2015 UTC,Try project-explorer instead of neotree. It highlights currently opened buffer if you set the pe/follow-current option to true.
emacs,39fg8a,katspaugh,2,Thu Jun 11 12:09:13 2015 UTC,"I've tried one, but it hanged my emacs and computer. Neotree seems to be more responsive. But you gave me an idea what to google for, thanks"
emacs,39fg8a,katspaugh,1 point,Thu Jun 11 13:41:52 2015 UTC,"It had this hanging problem with node_modules before, now this directory is ignored by default. If your project has similar huge dirs you can add them to ignore regexp and it will resolve hanging."
emacs,39fg8a,tuhdo,3,Thu Jun 11 20:28:26 2015 UTC,"Maybe you should give diff-hl and Dired a try. Not sure if add diff-hl-mode no NeoTree works, but you should test it."
emacs,39fg8a,vermiculus,2,Thu Jun 11 14:17:38 2015 UTC,"For part of your request:  neotree supports VCS status in the tree since neotree#93 by yours truly. The code there will likely be a help to anyone who wishes to implement the current-buffer functionality.  There doesn't seem to be a hook for changing buffers, so you'll probably have to defadvice it."
emacs,39fg8a,syl20bnr,2,Thu Jun 11 18:01:44 2015 UTC,"That's nice, thank you !"
emacs,39fg8a,kaushalmodi,1 point,Thu Jun 11 21:20:04 2015 UTC,"As seen in an issue I opened on the neotree github, I can't get the vcs integration working consistently. I have yet to give that debugging another shot."
emacs,39fg8a,vermiculus,1 point,Thu Jun 11 23:39:54 2015 UTC,You should ping me on that so I'll see it next time I'm on github. Same username.
emacs,39fg8a,kaushalmodi,1 point,Fri Jun 12 00:56:39 2015 UTC,Come on man. I know who you are on github :)
emacs,39fg8a,vermiculus,1 point,Fri Jun 12 01:09:22 2015 UTC,http://i.imgur.com/mEaUum8.jpg  I never thought I'd be internet-famous.
emacs,39fg8a,kaushalmodi,1 point,Fri Jun 12 01:13:07 2015 UTC,"Haha. This conversation feels like dejavu. I tend to make virtual associations with whom I communicate in such communities: a couple of issues I opened on sx.el (e.g. having a tab for hidden questons), a conversation about multi-page code block exports and ox-latex.el on one of the reddit threads, a brief comment I posted about deactivating hi-lock to your duplicate lines question on emacs.SE."
emacs,39fg8a,vermiculus,1 point,Fri Jun 12 01:32:21 2015 UTC,"oh, hey!  …I have a mostly transient life on the internet…"
emacs,39gxye,Erakko,4,Thu Jun 11 17:22:12 2015 UTC,Turn off smartparens. You can toggle it with SPC t p. To disable it permanently you can put smartparens in dotspacemacs-excluded-packages.  It shouldn't insert parantheses when you type a quote though… ;-)
emacs,39gxye,TheBB,0,Thu Jun 11 18:04:00 2015 UTC,"I was hoping that there where an option in that mode to insert single "" without disabling it."
emacs,39gxye,TheBB,2,Fri Jun 12 04:13:28 2015 UTC,"You can do it with something like this in your dotspacemacs/config.  ;; Escaping smartparens (defvar-local smartparens-temp-disabled nil) (defun smartparens-temp-disable ()   (interactive)   (when smartparens-mode     (smartparens-mode -1)     (setq smartparens-temp-disabled t))) (defun smartparens-maybe-reenable ()   (when smartparens-temp-disabled     (smartparens-mode)     (setq smartparens-temp-disabled nil))) (define-key evil-insert-state-map (kbd ""M-p"") 'smartparens-temp-disable) (add-hook 'post-self-insert-hook 'smartparens-maybe-reenable t)   Now M-p will disable smartparens for the next insert. Change M-p to whatever you feel like."
emacs,39gxye,instant_sunshine,1 point,Fri Jun 12 07:30:09 2015 UTC,"not necessary at all, see http://www.reddit.com/r/emacs/comments/39gxye/stop_spacemacs_from_auto_inserting_parenthesis/cs4cg7o"
emacs,39gxye,instant_sunshine,1 point,Fri Jun 12 16:14:45 2015 UTC,"Just type C-q "" (or any other single ('{[ etc.)"
emacs,39gxye,ghyspran,1 point,Fri Jun 12 16:13:38 2015 UTC,"If you want to totally disable smartparens, but for quotes only, the below should work:  (sp-pair ""'"" :actions :rem) (sp-pair ""\"""" :actions :rem)   If you don't want to disable it globally, but just be able to insert unpaired quote marks occasionally, see the reply by /u/instant_sunshine"
emacs,39dk64,shobble,7,Thu Jun 11 01:15:37 2015 UTC,M-x kill-emacs-save-yourself
emacs,39dk64,kcin,3,Thu Jun 11 01:45:24 2015 UTC,C-h i m Life After Emacs RET
emacs,39dk64,ReneFroger,3,Thu Jun 11 07:05:24 2015 UTC,"Escaping only makes sense if there is a better tool for the task (todos, agendas, scheduling, etc.). Is there?"
emacs,39dk64,tuhdo,1 point,Thu Jun 11 04:39:41 2015 UTC,I use taskwarrior in Eshell.  Much better than Org-mode in the field of to-do's.
emacs,39dk64,ReneFroger,2,Thu Jun 11 16:22:05 2015 UTC,"I don't think so. Can task warrior link to any path and open it in Emacs? Or link git commits? I can even tag TODOs into groups. And I have not only TODO but other labels as well, and add more as I like.  Probably you haven't tried Org enough. It's essentially a small TODO database with extensibility.  For look and feel, clearly Org is the winner here :)"
emacs,39dk64,kaushalmodi,1 point,Thu Jun 11 16:41:42 2015 UTC,"I agree with you that Org-mode is the winner if we are speaking about the looks. But for the convience, I prefer taskwarrior. And yes, I tried the Org-mode to-do lists for some weeks. Now I only use org-tables/sheets and org outline lists.  But for the to-do's, Taskwarrior is simply better in my personal opinion. But you need to configure it a lot first. The defaults are not so good, like Emacs. :)"
emacs,39dk64,kcin,1 point,Thu Jun 11 18:09:01 2015 UTC,I am intrigued. Will try it out. Can you share the configuration?
emacs,39dk64,ykcarc,1 point,Thu Jun 11 23:48:32 2015 UTC,Can you give some examples how it is better for those who don't know taskwarrior?
emacs,39dk64,revocation,1 point,Thu Jun 11 16:25:10 2015 UTC,"I see your game! Your blasphemous comments will get you excommunicated from the church. It's not that easy friend, if you want out you're going to have to claw your way to freedom!"
emacs,39dk64,tuhdo,2,Thu Jun 11 23:47:42 2015 UTC,I do not think I will ever escape. I'm in this for a lifetime.
emacs,39dk64,ReneFroger,1 point,Thu Jun 11 23:31:20 2015 UTC,"I've been using more markdown recently, but not full extrication. What I use org-mode for mostly, markdown does fine and is editor-agnostic."
emacs,39dk64,tuhdo,9,Thu Jun 11 03:04:12 2015 UTC,I don't think Markdown looks as nice as this in Emacs.
emacs,39dk64,DarthToaster,1 point,Thu Jun 11 03:26:22 2015 UTC,"Whoa! That's looks nice. Could you tell more about how to setup it? Even with markdown-mode toggled on, I couldn't get it so nice as in your screenshot."
emacs,39dk64,tuhdo,2,Thu Jun 11 09:28:45 2015 UTC,That's org-mode for you :)
emacs,39dk64,excitedaboutemacs,1 point,Thu Jun 11 09:31:15 2015 UTC,Could you expand? What theme are you using?
emacs,39dk64,cpaulik,1 point,Thu Jun 11 13:27:38 2015 UTC,It's leuven. The theme is utilized for Org.
emacs,39dk64,lawlist,1 point,Thu Jun 11 13:58:11 2015 UTC,are there dark themes for org?
emacs,39dk64,riaqn,1 point,Thu Jun 11 19:46:12 2015 UTC,You can try https://github.com/cpaulik/emacs-material-theme#org-mode
emacs,39ayet,furkanusta,3,Wed Jun 10 14:55:33 2015 UTC,Remap the keys at a lower level. Check out Xah Lee's tutorials: http://xahlee.info/linux/linux_xmodmap_tutorial.html and http://xahlee.info/linux/linux_keyboard_tools.html
emacs,39ayet,zenshinji,1 point,Wed Jun 10 18:01:52 2015 UTC,"xmodmap cannot set a key to other key depending on which app it is.   Thanks for the links but, I am trying to make these key changes only effective in Emacs not in whole system."
emacs,39ayet,zenshinji,2,Wed Jun 10 18:16:21 2015 UTC,"Oops. Missed the ""Only"". Perhaps the concepts Xah documented here (http://ergoemacs.org/misc/emacs_use_numberpad_keys.html), here (http://ergoemacs.org/emacs/emacs_hyper_super_keys.html), or here (http://ergoemacs.org/emacs/emacs_useful_user_keybinding.html) might point you to an answer."
emacs,39ayet,tobeportable,1 point,Wed Jun 10 19:22:52 2015 UTC,Ahk does this easily but on nt only though
emacs,39ebbf,metx,13,Thu Jun 11 04:09:30 2015 UTC,"Oh please, stop jumping on bandwagons.  The subreddits that were all banned are entirely different to /r/emacs - for one thing, the worst that is said here is the occasional stab at Vim.  Reddit admins are banning subreddits that are being used as platforms to harass. While this may not be a good idea (they'll just come back and make new subreddits), it's certainly not going to end up in /r/emacs getting removed."
emacs,39ebbf,Windigos,2,Thu Jun 11 10:44:56 2015 UTC,Wat?
emacs,39ebbf,jsled,-1,Thu Jun 11 04:57:36 2015 UTC,"Yeah, I wouldn't know if I hadn't happened to look at /r/all yesterday - there's effectively a Reddit riot going on, with a lynch mob for the CEO."
emacs,39ebbf,fantastipants,5,Thu Jun 11 13:22:34 2015 UTC,"collateral damage, with some small innocent subreddits being banned   If you think this applies in any way to /r/emacs , you're an idiot."
emacs,39ebbf,jsled,1 point,Thu Jun 11 05:10:23 2015 UTC,"Well, look at r/all.  My front page has absolutely none of it."
emacs,39dq89,BLAND_AS_OVALTINE,1 point,Thu Jun 11 01:54:48 2015 UTC,"Thanks for sharing the small trick, I use ITerm as my Terminal emulator on Mac instead of urxvt, so I write my own base on your snippet:  (defvar my-eshell-external-programs '(""top"" ""htop""))  (defun my-eshell-send-input (orig-fun &rest args)   (let ((program (progn (eshell-bol) (word-at-point))))     (if (member program my-eshell-external-programs)         (chunyang-run-command-in-iterm program)       (apply orig-fun args))))  (advice-add 'eshell-send-input :around #'my-eshell-send-input)  (defun chunyang-run-command-in-iterm (command &optional arg)   ""Run command in Iterm.  With ARG, change to `default-directory' firstly.""   (interactive (list                 (read-shell-command                  ""Run command in ITerm: ""                  (when (use-region-p)                    (buffer-substring                     (region-beginning) (region-end))))                 current-prefix-arg))   (do-applescript    (format     ""   tell application \""iTerm\""        activate        set _session to current session of current terminal        tell _session             set command to get the clipboard             write text \""%s\""        end tell   end tell   ""     (if (and arg default-directory)         (format ""cd %s && %s"" default-directory command)       command))))"
emacs,39dq89,xuchunyang,1 point,Thu Jun 11 07:09:50 2015 UTC,"This is great. I'm new (6 months) to emacs and struggling to find a good resource on the use of the different shells/terms within emacs. I will seem to be working well in term or shell but then something will break it, so I see the use of this program. One of the things I don't get is when it says it's a dumb terminal."
emacs,397g9w,kirang89,14,Tue Jun 9 20:19:49 2015 UTC,"(dolist (hook '(text-mode-hook))   (add-hook hook (lambda () (flyspell-mode 1))))   The suggested Elisp is a bit long-winded.  If you're going to enable flyspell for every mode derived from text-mode then it's simpler to do:  (add-hook text-mode-hook #'turn-on-flyspell)   Similarly, if you're going to use it for all programming modes then it's simpler to use:  (add-hook prog-mode-hook #'flyspell-prog-mode)   The OP only turns on a few programming modes, his code is good for doing that.  He doesn't mention Aspell. I've found that Aspell is better at providing alternatives when spelling English than Hunspell. That said, Hunspell has far better multi-language support and it's maintained.  I don't use flyspell because it tends to make M-f and M-b slower.  (Incidentally, I find it funny that he called flyspell ""a more classical spell checker"". I suppose that's the way new users will look at it.  Originally, word processing programs and editors offered the feature the way Ispell.el does.  There was a keybinding and/or gui button to press the checked the whole document or just the marked region.  Later on the reg squiggly lines appeared, I remember them from MS Word 6.)"
emacs,397g9w,RobThorpe,8,Tue Jun 9 21:07:19 2015 UTC,"prog-mode is introduced in Emacs 24.1[1], so some old Emacs confs don't use it, though it is preferred nowadays.  1: http://emacsredux.com/blog/2013/04/05/prog-mode-the-parent-of-all-programming-modes/  P.S. the 1st argument of add-hook should be a symbol, so the correct one is:  (add-hook 'prog-mode-hook #'flyspell-prog-mode)"
emacs,397g9w,xuchunyang,3,Wed Jun 10 03:05:06 2015 UTC,That's right.
emacs,397g9w,RobThorpe,12,Wed Jun 10 09:48:21 2015 UTC,"I could also give you a tip about writegood-mode, which  checks for weasel words, passive voice and duplicate words. I used to run it together with flyspell and autocomplete when I wrote reports; it worked like a charm."
emacs,397g9w,visnae,1 point,Tue Jun 9 22:04:40 2015 UTC,Nice tip
emacs,397g9w,__notmythrowaway__,6,Wed Jun 10 10:02:08 2015 UTC,"For anyone who likes to use Helm for everything, helm-flyspell may be useful and worth checking out."
emacs,397g9w,eric-plutono,4,Tue Jun 9 22:13:19 2015 UTC,"By default ispell does not highlight misspelled words, but simply offers you a way of checking the entire buffer with M-x ispell-buffer. To get a more classical spell checker you can use flyspell.   Honestly, the former is really more classical, though certainly the latter seems to be more-commonly used today.  I'd also like to give the author kudos for writing an init.el that degrades gracefully on systems that don't have <Random Software Package> installed, something I also try to do as well.  I'll try to, before using any feature or external software, check for its presence at emacs startup (and maybe log a warning that it's not present):   (when (executable-find ""hunspell"")  (setq-default ispell-program-name ""hunspell"")  (setq ispell-really-hunspell t))"
emacs,397g9w,wadcann,1 point,Wed Jun 10 05:43:54 2015 UTC,"I often find that I need definitions when writing, being non-native I sometimes mess up what words actually mean or get a subtle detail wrong -- I sort of wish there was a good way of doing this. I found this but have yet to get it working (on Windows) but I haven't been trying too hard."
emacs,397g9w,faldborg,1 point,Wed Jun 10 10:08:47 2015 UTC,"this post talks about spell checking for writing,  check http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html which focus on spellcheck for programming (html tag, javascript variable name ...)"
emacs,395u8x,-Quantumcross,4,Tue Jun 9 13:49:07 2015 UTC,"interactive doesn't return anything; it's a special form that determines how the arguments are passed in, how they are prompted for, and can even check to see if the current buffer is read-only, for example.  One thing that will really help is learning how to find the help for functions. Typing C-h f will prompt for a function name in the minibuffer. Type a function name and hit RET and a new *Help* buffer will open with that function's docs.  It looks like the property's value must be a string, so you'll have to convert the number to a string by using, for example, int-to-string."
emacs,395u8x,jimm,3,Tue Jun 9 14:02:44 2015 UTC,"For debugging, you can set debug-on-error to t to have the interactive debugger fire up whenever there is an elisp error.  I will leave it up to you to learn how to use it, but if nothing else it will show a traceback that should help track down the error.  org-set-property requires a string.  You can probably safely assume that about any function that manipulates stuff in org, unless it explicitly and obviously uses some other type.  You can use (number-to-string x) or format to convert numbers to strings.  If a function doesn't return anything else, it returns nil.  Otherwise I'll just second what everyone else has said:  describe-function and describe-variable are your best friends, as is a web browser (or better yet, doc browser like Dash/Zeal, since you can search those directly from Emacs with the proper addon) with the elisp manual open."
emacs,395u8x,RothiasVex,2,Tue Jun 9 16:39:26 2015 UTC,"It's a bit complex.  First of all, emacs lisp is an bit of an oddity among lisps in that it tends to favor procedural mutation of the buffer over functional return values. So in this case, the return values are not relevant.  interactive is a special form. In this case, what it does is prompt you for a number and binds the function parameter x to that number. The number type is specified by the ""n"" code character before the prompt.  (The other code character you might use frequently is s for string.)  The documentation for org-set-property could be clearer, but what it ultimately does is insert or modify strings in an org buffer. Strings in lisp are also sequences, so something in the process is calling sequencep (is this a sequence?) on the integer 20, and throwing an error because 20 is an integer and not a sequence.  So what you need to do is convert x to a string before passing it to org-set-property.  This works on my emacs:  (org-set-property ""APPT_WARNTIME"" (number-to-string x))   And to explain the error:  Wrong type argument: sequencep, 20   ""20 is the wrong type, I need a sequence."""
emacs,395u8x,cbrachyrhynchos,1 point,Tue Jun 9 16:41:29 2015 UTC,Your answer.
emacs,399uzt,iAlyKat,15,Wed Jun 10 08:14:02 2015 UTC,Emacs is life.
emacs,399uzt,Mitchical,10,Wed Jun 10 09:01:35 2015 UTC,"Please, stay away..  Otherwise you will be hooked for the rest of your life. All the users here are trapped in the Emacs rabbit hole.  Go away if you want to have a life! Really..."
emacs,399uzt,ReneFroger,3,Wed Jun 10 09:25:51 2015 UTC,OMG sooo many hooks!
emacs,399uzt,cranil,3,Wed Jun 10 13:05:09 2015 UTC,Relevant: http://mph.puddingbowl.org/2010/02/org-mode-in-your-pocket-is-a-gnu-shaped-devil/
emacs,399uzt,fantastipants,1 point,Thu Jun 11 01:12:04 2015 UTC,It's nice in here though.  I'm pretty comfy.
emacs,399uzt,diesch,8,Wed Jun 10 13:03:06 2015 UTC,Emacs
emacs,399uzt,autowikibot,1 point,Wed Jun 10 08:20:28 2015 UTC,"Emacs:       Emacs /ˈiːmæks/ and its derivatives are a family of text editors that are characterized by their extensibility. The manual for the most widely used variant, GNU Emacs, describes it as ""the extensible, customizable, self-documenting, real-time display editor"".  Development of the first Emacs began in the mid-1970s and continues actively as of 2015 [update]. Emacs has over 2,000 built-in commands and allows the user to combine these commands into macros to automate work. Emacs Lisp provides a deep extension capability allowing users and developers to write new commands using a dialect of the Lisp programming language.    Image i - Editing multiple Dired buffers in GNU Emacs     Interesting: Emacs/W3 | Multics Emacs | Apel (emacs) | ERC (software)   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
emacs,399uzt,DasEwigeLicht,1 point,Wed Jun 10 08:20:33 2015 UTC,I already looked here and was even more confused ahah.
emacs,399uzt,furkanusta,3,Wed Jun 10 14:08:07 2015 UTC,"Emacs is a universal and very extensible text editor. It is in fact so extensible that it can do a lot more than editing text, like being a file manager, terminal emulator, email and twitter client or git interface.  Mkay?"
emacs,399uzt,PinkyThePig,1 point,Wed Jun 10 15:16:14 2015 UTC,Yes I understand now! Thanks!
emacs,399uzt,jan_path,3,Thu Jun 11 00:40:43 2015 UTC,"Basically, it is an extensible text editor. It is popular among programmers, bloggers etc. -people who edit text most of the time in computer-, because it has lots of keybindings and extensions to help you write faster, easier."
emacs,392fwz,gregsexton,7,Mon Jun 8 19:40:08 2015 UTC,I put this together recently and am now pretty happy with an Org-centric data analysis workflow. Thought I'd share this and gather feedback.
emacs,392fwz,---R,3,Mon Jun 8 19:42:04 2015 UTC,"Would you consider submitting it to Org-proper?  It looks useful andI for one would love to have an alternative to ob-python.el.  I certainly would welcome it.  Be warned, a quick skim suggest the following changes would be necessary: 1. No s, dash, dash-functional, f. 2. Re-license to GPL. 3. FSF paperwork if you don't have that already.  Re 1: It doesn't seem like too much work.  E.g. to kill s: For s-blank? you can use org-string-nw-p.  s-starts-with? you can use string-match-p or org-string-match-p, s-join can be replaced with mapconcat."
emacs,392fwz,zackp30,1 point,Mon Jun 8 21:42:24 2015 UTC,"I was going to submit a pull request for all those. But then I realized I haven't yet got my FSF paperwork sorted, if I were to contribute would I ruin the chances of getting it included to ""Org-proper""? (mind linking it? I can't find it on Google)."
emacs,392fwz,---R,1 point,Tue Jun 9 08:36:21 2015 UTC,"But then I realized I haven't yet got my FSF paperwork sorted   All major non-trivial contribution (approx > 10 lines) to Org core (the lisp folder and documentation) must assign copyright to FSF. It's not too time consuming IMO. You have to answer one email, print a pdf, sign it and send it to the FSF lawyer in the US.    (mind linking it? I can't find it on Google).   http://orgmode.org/cgit.cgi/org-mode.git/tree/lisp"
emacs,392fwz,---R,1 point,Tue Jun 9 14:33:04 2015 UTC,I would consider it. Re-licensing and signing FSF isn't too big a deal. Reworking some of the code not to use dash though would likely be a pain. The disadvantages are clear to me but I'm less sure about the advantages. Do you think that installing from github adds too much friction for a significant number of users?
emacs,392fwz,biggus_dictus,1 point,Tue Jun 9 19:18:36 2015 UTC,"reworking some of the code not to use dash though would likely be a pain.   I did not check the dash part.  I don't have dash on my PC and hence not the docstrings.  Sometimes, it's possible to guess what it means, e.g. I'd guess -filter -> cl-remove-if or cl-remove-if-not. map -> mapcar or mapc etc.  But some of it is completely nonsense to the dashilliterates.  E.g. at one point you have something like (->> ....).  seq.el and map.el and of course cl-lib are good libraries.  These won't be used in org-core for a while though.   Do you think that installing from github adds too much friction for a significant number of users?    I don't know.  I know that for me it's a pain that we cannot include ox-koma-script in core...  contrib is not necessarily better than melpa.  Do what you feel is right.  Feel free to write a message on the mailing list.  It's a very friendly place."
emacs,392fwz,RohanOrhanHaron,2,Tue Jun 9 21:11:49 2015 UTC,Thanks for all the positive comments. If anyone runs in to any issues or has suggestions feel free to submit issues at the github repo. I'll work my way through them as I find time.
emacs,392fwz,ajsteven130,1 point,Tue Jun 9 19:13:59 2015 UTC,thank you!
emacs,392fwz,bastibe,1 point,Tue Jun 9 00:07:59 2015 UTC,Does one have to make some adjustments to get it working under windows?
emacs,392fwz,cpaulik,2,Thu Jun 11 16:20:45 2015 UTC,"yes, but hopefully not for long. See  issue 4 and the pull request that fixes it.  Cloning from my fork will get it running on windows until @gregsexton can approve the pull request or find another solution"
emacs,392fwz,acow,2,Fri Jun 12 07:41:16 2015 UTC,There was a bug that prevented this from working on Windows. That has now been fixed. Please cut a github issue if you still have problems.
emacs,392fwz,ajsteven130,3,Sun Jun 14 10:52:06 2015 UTC,This is insanely awesome! This might well be the perfect combination of a notebook-like workflow and Emacs.
emacs,392fwz,felinecatastrophe,2,Mon Jun 8 21:10:23 2015 UTC,"Wow, that looks great. Have to test this."
emacs,392fwz,RohanOrhanHaron,2,Mon Jun 8 23:09:43 2015 UTC,This looks really fantastic. It would be great to adapt it to other Jupyter backends.
emacs,392fwz,aptmnt_,2,Tue Jun 9 01:34:44 2015 UTC,"you can (probably)! See the reply here. That is specific to julia (and how they use the --profile flag) and I have not had time to test it, but it seems like it should work."
emacs,393bfm,howardthegeek,1 point,Mon Jun 8 23:20:05 2015 UTC,"Thanks for the tip and your tutorial, didn't know how unusual (different with $SHELL + Terminal or just M-x shell/ansi-term) and powerful eshell is before."
emacs,3948e4,lag13,3,Tue Jun 9 03:37:45 2015 UTC,"I haven't, yet. However, I'm planning on trying spacemacs within the next few days.  I was originally a vim user, but I became enamored with the power of Lisp and the lore of the Lisp machine, and came to Emacs. I haven't looked back, but I do still believe modal editing is a superior way to interact with the editor."
emacs,3948e4,JoelMcCracken,5,Tue Jun 9 04:17:21 2015 UTC,+1 for spacemacs. I'm very happy with it.
emacs,3948e4,signalpillar,2,Tue Jun 9 08:44:40 2015 UTC,"Yes this is sort of why I'm curious. I've seen many videos/blog posts of late about Vimmers switching to emacs with Evil and enjoying the extra capabilities of their ""editor"" ;). I was wondering if there was a similar switch in the emacs community to start using vim like key bindings (via evil) and whether those emacs users thought the switch improved their editing."
emacs,3948e4,JoelMcCracken,1 point,Tue Jun 9 14:24:25 2015 UTC,"I haven't done it yet, but I totally know it will.   TBQH I don't think that implementing vim on top of Emacs is really the right solution; Emacs has many different metaphors from vim. Consider Emacs' excellent nested parentheses navigation facilities. I think evil is a decent starting point, though."
emacs,3948e4,JoelMcCracken,2,Wed Jun 10 02:23:08 2015 UTC,"Just out of curiosity, do you have any ideas for a better solution? (if such a solution even exists). I've come to really like vim's approach to editing and combining that with emacs's extensibility seems like a great union."
emacs,3948e4,chimneyscout,1 point,Wed Jun 10 02:51:17 2015 UTC,"My vision for this is a set of different modes with their own keybindings for the normal non-modifier keys. One key may switch the current bindings to a different map, etc. I started work on this a while back, but it never got very far: https://github.com/joelmccracken/modal-emacs"
emacs,3948e4,angelic_sedition,2,Wed Jun 10 21:06:09 2015 UTC,"I really loved spacemacs in the last 2 months that I've been using it. However, there were two reasons I went back to my previous configuration .    Random hangs with CPU spiking to 100% when using loads of remote buffers. I just didn't have enough time to figure out why. Evil mode.  It is superb. It has tons of features I used a lot: multi-edit of search occurrences, and many more. In addition, modal editing did feel much superior, the navigation and text manipulation was fluid and easily memorized. Having said that, evil doesn't work for all buffers that well. Sometimes (in dired, magit) you'd have to use emacs keybindings for navigation, and it breaks consistency.   I will be back to spacemacs when it's a bit more polished. I adopted some workflow features into my configuration and loving it."
emacs,3948e4,JoelMcCracken,1 point,Wed Jun 10 10:27:17 2015 UTC,"Sometimes (in dired, magit) you'd have to use emacs keybindings for navigation   You don't really have to use emacs keybindings for anything with evil. You can set the initial state (e.g. normal, emacs, etc.) for any mode. For things like dired and magit, the keybindings are already mostly just single keys, and a lot of evil commands would be useless anyway. If you still would rather have normal state as the initial state, you can add back any dired/magit commands you use pretty easily."
emacs,3948e4,kovrik,1 point,Wed Jun 10 15:06:52 2015 UTC,"Cool. I'm even more looking forward to trying it, now"
emacs,3948e4,__baxx__,3,Wed Jun 10 21:03:43 2015 UTC,"Sure, it's better for editing texts.  Also, do not use Spacemacs. It's an overkill IMO."
emacs,3948e4,aabbccaabbcc,1 point,Tue Jun 9 07:09:10 2015 UTC,It's working pretty nice for me... Guess it depends where one stands on having any sort of preconfigured environment though.
emacs,3948e4,aabbccaabbcc,3,Sun Jun 14 01:54:14 2015 UTC,"I made the switch (regular emacs --> emacs with evil) about a year ago! I'm quite happy with it, all in all.   I'd never really tried Vim before, but as far as I could tell, among text editors it was sort of the only other serious choice. A few coworkers had shown me their favorite features in SublimeText or NotePad++, but they were never able to show me anything that emacs didn't do a whole lot better (except for that minimap that ST has, which I'll admit looks really nice.... until I tried a version in emacs only to get rid of it half an hour later because I realized all it was doing was taking up space and slowing things down on larger files, and I never missed it at all). On the other hand, I'd looked over the shoulders of folks using Vim a couple of times in the past, and seen them do some very sophisticated things very quickly. So I thought I would just try Vim for a few weeks for day-to-day stuff, just so I could learn for myself what made it so great. So I guess it was mostly just curiosity about ""the other editor.""  I used GVim at first to make sure that I wasn't cheating by just M-x-ing everything when I couldn't remember the Vim bindings for what I wanted to do. I went though vimtutor a couple times, and pretty soon Vim started to make a lot of sense to me, so then I tried adding evil. At first it was really frustrating, since it would step on a lot of keybindings I liked, and would use evil states when they didn't really make any sense (like in comint buffers, for example). But I really didn't want to give up, so I read the evil manual a few times to learn how to make it fit in a little better with everything else. I still get really annoyed from time to time, but as I discover good ways to fix the things I'm unhappy with, these annoyances get a whole lot more rare.  At this point, I don't think I'll ever go back! I can't imagine ever leaving emacs, and pairing it with evil has been really great."
emacs,3948e4,freakhill,2,Tue Jun 9 19:11:12 2015 UTC,Thanks for your reply! Nice to see an emacs user make that sort of switch and stick with it. I'm a vim user myself who's been contemplating switching over to emacs after I get my vimconfig to a state that I like more.
emacs,3948e4,srhb,1 point,Wed Jun 10 02:42:12 2015 UTC,"Sure! It seems like there are a pretty good number of vim expats who now use emacs+evil. I just watched this talk on youtube the other day, and it was really interesting to see somebody's perspective from the other side. I really enjoyed it, and I imagine that you'd probably get a little more out of it than I did, since you're a vim user.  I know that the evil development folks have said ""If something in evil acts any differently than vim does, we consider it a bug and will fix it,"" which I think is really neat."
emacs,3948e4,MCHerb,1 point,Wed Jun 10 17:49:14 2015 UTC,"I saw that too and thought it was a great talk. It made me look forward to switching. Man, I like that little mission statement from the evil folks. Very neat indeed."
emacs,3948e4,srhb,2,Thu Jun 11 01:37:47 2015 UTC,I just find it better for editing text :0
emacs,3948e4,akkaone,2,Tue Jun 9 04:47:13 2015 UTC,Yep. I've always found modal editing way superior. But elisp...
emacs,3948e4,BobKoss,1 point,Tue Jun 9 11:01:10 2015 UTC,go on...
emacs,3948e4,Xyzodiac,1 point,Wed Jun 10 02:12:48 2015 UTC,"OK, I see that it wasn't quite clear. What I meant to imply is that elisp by far the superior language for editor extension, compared to VimL."
emacs,3948e4,hyperbling,1 point,Wed Jun 10 06:38:42 2015 UTC,I also is trying to switch from vim to emacs with evil.  Elisp has been one of the best thing with emacs compared to the scripting in vim
emacs,3948e4,ReneFroger,2,Wed Jun 10 07:13:52 2015 UTC,"I switched to Emacs last year while learning Clojure. I tried very hard to use the Emacs key chords, but these old vi hands just wouldn't do those gyrations. I was about to switch back to vi when I learned about evil. It was my savior.  Now I have all of the power of Emacs but I'm able to use the highly productive keystrokes from vi muscle memory. The best of all worlds."
emacs,3948e4,tuhdo,2,Tue Jun 9 18:10:37 2015 UTC,I switched from vim -> Emacs + Evil in 2012. Never had the need to look back.  I still use vim occasionally for one off edits.
emacs,3948e4,spwhitton,1 point,Tue Jun 9 22:55:34 2015 UTC,looking at the download numbers from melpa i wouldn't be surprised if as much as 1/3 of emacs users are using evil.
emacs,3948e4,Taikal,1 point,Tue Jun 9 12:23:59 2015 UTC,"Don't forget the users who use Evil, are usually Vimmers who are trying Emacs and then going back to Vim. And curious Emacs'ers that prefers the standard keybindings afterwards."
emacs,3948e4,AtticHacker,1 point,Tue Jun 9 13:05:20 2015 UTC,Spacemacs makes a big portion of that number:)
emacs,3948e4,__baxx__,1 point,Wed Jun 10 04:23:22 2015 UTC,"I've tried more than once, for several months at a time.  I always end up coming back because so many Emacs modes and packages make assumptions which are false under evil so you find yourself constantly patching and editing every time you want to use a new mode or package."
emacs,390klo,Taikal,2,Mon Jun 8 11:00:15 2015 UTC,Take a look at widget-color--choose-action.
emacs,390klo,politza,1 point,Mon Jun 8 23:59:17 2015 UTC,This is the solution.  Thanks.
emacs,390klo,bakuretsu,1 point,Tue Jun 9 07:47:10 2015 UTC,"I'm not a face expert, but this is something I think Vim is more clear about: most colors are defined as syntax types rather than actual colors.   What you can do in Emacs is allow the user to choose from font lock faces, which correspond to syntax tokens and will align with the theme in use.   My strong recommendation is, if you are writing something that allows customization, to allow the user to store a font lock face name OR color. Setting actual individual colors for a specific package is usually not a sustainable approach."
emacs,390klo,bakuretsu,1 point,Mon Jun 8 11:16:11 2015 UTC,"The problem here is not how to choose a face, but how to attach a different list of colors to the Choose button.  I have updated my question for clarification.  Thanks anyway."
emacs,390klo,bakuretsu,1 point,Mon Jun 8 11:21:48 2015 UTC,"I believe defcustom can take a computed property, which you could use to provide the font lock faces as choices."
emacs,390klo,bakuretsu,2,Mon Jun 8 11:57:23 2015 UTC,"Unfortunately, faces are defined by defface, not defcustom."
emacs,3905oy,patbuzz,2,Mon Jun 8 07:46:50 2015 UTC,"show-paren-mode is a global minor mode. Maybe some other mode's hook is turning it on again?  What exactly is the issue making things hard to use?  Can it be sovled by changing the matching paren style? ie, assumng the zenburn color theme, try this:  (custom-theme-set-faces  'zenburn  `(show-paren-match    ((t (:slant italic                :bold t                :strike-through t                :background nil)))))"
emacs,3905oy,Starlight100,1 point,Mon Jun 8 13:11:56 2015 UTC,"I think you're right. Proof General is overlooking much of my configuration. Show-paren is turned off and undo-tree is turned on directly in my init.el, but I need to remind that to Proof General. The strange thing is that from what I understand, coq-mode-hook is the very last hook executed after a coq source file is loaded. If I'm right, how can what is turned off in it be turned on again? I'm sorry if I sound stupid, I'm new to Emacs.  The issue arises when I type a period at the end of a line. I get the following error message: Error running timer 'show-paren-function': (wrong-type-argument characterp nil). At the same time, the cursor goes back one position, which is really annoying. I tried your solution and although italic parentheses are neat, it doesn't solve the issue. Thanks anyway!"
emacs,3905oy,augmentedtree,1 point,Mon Jun 8 14:35:59 2015 UTC,Some modes are inconsistent about what you have to pass to them to turn them off. Try 0 or nil instead of -1.
emacs,3905oy,cpitclaudel,1 point,Mon Jun 8 14:13:06 2015 UTC,Thanks for your answer but it doesn't solve the problem.
emacs,38xmfd,pzone,2,Sun Jun 7 18:38:36 2015 UTC,"Never knew you could even style it.   But you're right. EmacsWiki was always looking weird. I'm using it for half year now, still not used to the blobbish orange looks.   For example, the Vim Wiki looks ugly. But even with that, it still serves a better look/layout."
emacs,38xmfd,ReneFroger,2,Sun Jun 7 22:00:55 2015 UTC,"It's a shame there isn't a really great wiki for Emacs, I think it's exactly the right format for an Emacs knowledgebase. (The official Emacs documentation even links to that wiki.)  On the other hand, it's pretty easy to edit the wiki, there is even an Emacs mode for it."
emacs,38xmfd,dzecniv,1 point,Sun Jun 7 22:36:34 2015 UTC,"Hey oh, are you talking about wikemacs ? http://wikemacs.org For a bit of history, it was started by B. Batsov from Prelude (among many other modes). It is less complete than emacswiki but much better structured of course, and some pages are really good (the one on Python for instance, the elisp cheat sheets, etc)."
emacs,38xmfd,ReneFroger,2,Sun Jun 7 22:43:03 2015 UTC,"If I am not mistaken, WikiEmacs announced that it would stop with his activities and gives EmacsWiki the lead.   Some people could confuse WikiEmacs with the EmacsWiki, which reminds me of the Emacs/XEmacs schism."
emacs,38xmfd,dzecniv,1 point,Sun Jun 7 23:11:35 2015 UTC,"You would be right to say that the creator of Wikemacs, B. Batsov, announced that he gave up trying to drive the community to a better wiki engine. BUT Wikemacs was immediatly taken on by other hands !"
emacs,38xmfd,dzecniv,1 point,Mon Jun 8 00:48:45 2015 UTC,"I only refer to Wikemacs indirectly by saying there's no really great wiki.  I think it simply takes a coat of paint like new CSS and it becomes clear EmacsWiki is a better source of data, albeit cluttered with debris. It seems almost all of the info on Wikemacs is in EmacsWiki somewhere, just needing to be organized better."
emacs,38xmfd,dzecniv,3,Sun Jun 7 23:40:32 2015 UTC,"You reckon that emacswiki is cluttered with debris and is needed to be better organized. That's exactly why we need wikemacs, because those two things are not doable with emacswiki. The ""just"" is a wall."
emacs,38xmfd,dzecniv,2,Mon Jun 8 00:45:18 2015 UTC,What makes emacswiki unsalvageable? An hour spent editing can produce a whole page as good as newly written.
emacs,38xwcu,haromakari,3,Sun Jun 7 19:54:28 2015 UTC,Have you read https://github.com/Sarcasm/irony-mode/blob/master/README.md?
emacs,38xwcu,hvis,1 point,Sun Jun 7 22:20:20 2015 UTC,"Yes, I did, but I had problems e.g. with libclang prerequisites because it links to just a source code site. I installed clang and it wasn't enough, I had to get libcang1 and libclang-dev to make irony-server work (few other libclangs weren't working). That and some CMake issues but I found solutions to these on github eventually. It's working now though, thanks!"
emacs,38xwcu,atilaneves,2,Mon Jun 8 15:19:29 2015 UTC,"It works for me with my cmake-ide package. It requires using a CMake project and has a few dependencies, but it does work. My main problem is getting autocomplete to only add suggestions from clang."
emacs,38xwcu,soonhokong,2,Mon Jun 8 10:32:54 2015 UTC,I got it to work with company. Tried to do that with autocomplete before but it was using demantic-mode by default and just thrown any word I wrote before at me.
emacs,38xwcu,soonhokong,2,Mon Jun 8 15:21:03 2015 UTC,Here is a summary of what I've figured out: https://gist.github.com/soonhokong/7c2bf6e8b72dbc71c93b  Hope it helps.
emacs,38xwcu,sisyphus,1 point,Mon Jun 8 15:25:27 2015 UTC,"Thanks! I just got it to work, I wish I had this guide few days earlier :(  Btw, can you complete something with TAB with that config? It's not working for me, I have to press RET."
emacs,38xwcu,redguardtoo,1 point,Mon Jun 8 15:40:42 2015 UTC,'TAB' is working for me...
emacs,38xwcu,redguardtoo,3,Tue Jun 9 17:07:42 2015 UTC,A google employee of some kind did a youtube series I saw not too long ago: https://www.youtube.com/watch?v=HTUE03LnaXA&list=PL-mFLc7R_MJet8ItKipCtYc7PWoS5KTfM that might be helpful.  I can't vouch for it because I don't write C++
emacs,38xwcu,tuhdo,1 point,Sun Jun 7 21:07:32 2015 UTC,"If you use auto-complete, you need also use auto-complete-clang and setup the global variable ac-clang-flags, clang is used.  If you don't want to set ac-clang-flags manually, you need cmake and my cpputils-cmake."
emacs,38xwcu,tuhdo,1 point,Sun Jun 7 23:35:55 2015 UTC,I use company but thanks for the suggestions :)
emacs,38xwcu,n4s33r,1 point,Mon Jun 8 15:32:58 2015 UTC,then you could use company-clang.el and tweak variable company-clang-arguments
emacs,38xwcu,yaschobob,1 point,Mon Jun 8 22:59:10 2015 UTC,"Remember, when adding new include paths to .clang_complete, you have to run irony-cdb-autosetup-compile-options again to refresh the completion database. Run irony-cdb-menu to check that the new paths are added properly.  Here is code completion demo in Linux kernel. In the demo, I only opened fork.c and nothing else, so certainly Emacs won't draw anything from recently opened buffer."
emacs,38xwcu,yaschobob,1 point,Tue Jun 9 07:10:23 2015 UTC,"I only have compilation flags in .clang_complete and it works well. Header files I #include at top of the source files ar parsed, I can hop to them through ECB methods window and their classes/functions are autocompleted. It looks like it's updating every time I save either file, so I don't require anything else from it atm :)"
emacs,38xwcu,yaschobob,1 point,Tue Jun 9 12:09:13 2015 UTC,"I mean, when you creat a new .clang_complete file, you need to tell irony about it. After that, Irony can use the file. However, I'm not sure if we add new compil flag, Irony automatically detects it so I always run the command just to make sure. Of course, when we add new code without changing the configuration, Irony should detect it."
emacs,38xwcu,yaschobob,1 point,Tue Jun 9 12:19:45 2015 UTC,"I edited it after flycheck-irony told me that delegating constructors is c++11 only, added std=c++11 flag to .clang_complete ant it's no longer an error.   I haven't tried adding include paths there but I may make use of it in fiture and I'll use your advice then :)  For now I gotta focus on finishing few smaller projects for my classes (while I got most of stuff I wanted and it's quite stable) :("
emacs,38xwcu,aport,1 point,Tue Jun 9 12:47:48 2015 UTC,Look into YouCompleteMe and emacs-ycmd  (it is present in a layer in spacemacs)
emacs,38xwcu,yaschobob,-1,Wed Jun 17 04:17:15 2015 UTC,"There's no hope for C++, despite what the vehement Emacs lords will try to say. I even had one tell me that they could get Emacs to auto-complete the Linux Kernel and that he'd report back to me with screenshots. Did I ever hear anything? Nope.   If autocomplete is that important to you, then use NetBeans or Eclipse with the C/C++ plugin. Emacs won't be doing it anytime soon."
emacs,38xwcu,kcin,1 point,Mon Jun 8 03:37:42 2015 UTC,"Um, what? I got Irony to work with Company and it is great so far. It suggests variables after few letters, suggests correct methods/fields based on variable in ""var."" or ""var->"", inserts methosd with yasnippet so I can only fill in arguments quickly...... that's definitely far from ""no hope"".  EDIT: It of course parses stuff from my header files which are in totally different folder than source files (probably gets it through #include command) so it's nice and not missing definitions."
emacs,38xwcu,n4s33r,0,Mon Jun 8 15:23:37 2015 UTC,I'm curious to see how complicated your project is. Try PIConGPU. It fails miserably.   What specific company mode?
emacs,38xwcu,yaschobob,1 point,Mon Jun 8 15:45:34 2015 UTC,"It's not complicated and I don't require it to handle very complicated projects. That's what environments are for IMO. I just don't disagree with you saying that there is no hope for programming in C++ in emacs.  I just cloned int PIConGPU and company-irony works as normal, every variable/function defined in the source file or files it includes is suggested and can be autocompleted."
emacs,38xwcu,xoo-,-2,Mon Jun 8 16:10:16 2015 UTC,Screenshot. i don't buy it for a second.
emacs,38xwcu,yaschobob,2,Mon Jun 8 16:23:28 2015 UTC,I don't have any idea what you would like to see so I checked for some simple stuff: http://imgur.com/a/YqZxh  On that last screenshot there is like 1000+ fields available.
emacs,38xwcu,xoo-,0,Mon Jun 8 17:21:47 2015 UTC,What's your company setup?
emacs,38xwcu,yaschobob,6,Mon Jun 8 17:26:36 2015 UTC,(setq yaschobob-is-troll t)
emacs,38xwcu,tuhdo,1 point,Mon Jun 8 17:55:59 2015 UTC,"http://pastebin.com/8815049y  Pasted whole .emacs, you'll sort out which lines are related I guess. Plus all of the dependencies installed."
emacs,38xwcu,yaschobob,-1,Mon Jun 8 18:10:28 2015 UTC,"Yeah, it's not really working. It works if you actually type things previously, then it will remember them, but doing it blank? Nope.  src/picongpu/include/plugins/adios  nothing completes for threadparams or anything.  As I said, for very trivial simple things, it works okay."
emacs,38xwcu,tuhdo,1 point,Mon Jun 8 20:37:18 2015 UTC,"Maybe because it doesn't find included header files? You can't just expect it to do everything like with a magic wand - specify the paths at least.  I see you either don't want it to work or just enjoy trolling around and looking silly. Either way, I'm out."
emacs,38xwcu,yaschobob,1 point,Tue Jun 9 06:44:17 2015 UTC,AFAIK companies also use the clang backend for completion in their development environments. Apple? So the info provided by clang is as good as it is for other environments. It's only a matter of using this info and utilizing it by the emacs frontend.
emacs,38xwcu,tuhdo,1 point,Thu Jun 11 08:56:22 2015 UTC,emacs with ycmd works fine for me on the kernel
emacs,38wi4i,zk_phi,2,Sun Jun 7 12:38:37 2015 UTC,"It's amazing, thank you a lot. I prefer that against open an instance of OpenSCAD. As you say in comment, control the preview inside emacs it's wonderful. And you can save the preview as picture."
emacs,38wi4i,al3x2450,1 point,Sun Jun 7 16:45:54 2015 UTC,You can already real-time preview OpenSCAD models in emacs. Just edit the file the viewer is showing.
emacs,38wi4i,liberdiko,3,Sun Jun 7 15:35:59 2015 UTC,"Yes, opening Emacs and OpenSCAD side-by-side works similar, but we cannot control the preview window within emacs that case (rotate, translate, zoom for example). In addition scad-preview.el can also reflect unsaved changes."
emacs,38y0xy,ReneFroger,5,Sun Jun 7 20:28:14 2015 UTC,from where do you get js2-mode is not maintained? js2-mode
emacs,38y0xy,spoofedexistence,3,Sun Jun 7 20:32:39 2015 UTC,"Hey, I began that page of the wiki: http://wikemacs.org/wiki/JavaScript I also find it difficult to sort this out !"
emacs,38y0xy,dzecniv,1 point,Sun Jun 7 22:40:30 2015 UTC,solution 1: js-mode plus jshint (jshint is optional)  solution 2: js2-mode  Usually you use js2-mode because it has the built in and better syntax checker. But it's a little bit slow on low spec computers.  both major-modes works out of the box without any dependency
emacs,38y0xy,redguardtoo,1 point,Sun Jun 7 23:41:22 2015 UTC,js-mode with flymake-cursor (which calls jshint from node.js). Most important thing for me was the hinting so I chose that combination. The solution is a bit tricky because flymake creates temporary js files. I also use yasnippet for my own snippets.
emacs,38y0xy,ax_reddit,1 point,Mon Jun 8 11:46:51 2015 UTC,"I will use this opportunity to ask some questions on JS in Emacs. I have recently had to venture into JS for d3.js? graphs.  Could somebody elaborate on how to get a JS console like the one found in Firefox?  Preferably with completion (i.e. M-tab) and eldoc support would be great as well. I tried skewer-mode, which is OK-ish, but it lacks completion and eldoc.  I tried tern for completion but it did not seem to pick up any completions.  Also, is there a native way to look up documentation for a function in JS?  I tried stuff like help(fun) and ?fun but found nothing.  E.g. some way to integrate MDN into Emacs?  Thanks"
emacs,38y0xy,---R,1 point,Mon Jun 8 21:27:23 2015 UTC,I'm also a js dev and I have combined all the tips that I used on this post https://truongtx.me/2014/02/23/set-up-javascript-development-environment-in-emacs/ hope that will help
emacs,38x3lz,tuhdo,1 point,Sun Jun 7 16:08:08 2015 UTC,Nice package.  Thanks for sharing!
emacs,38x3lz,eric-plutono,1 point,Sun Jun 7 16:52:44 2015 UTC,You can also do this using speedbar (or sr-speedbar).
emacs,38x3lz,AnAirMagic,2,Mon Jun 8 14:18:54 2015 UTC,same for https://github.com/jaypei/emacs-neotree and https://github.com/m2ym/direx-el
emacs,38u19v,senecasunshine,16,Sat Jun 6 20:37:51 2015 UTC,Thanks for posting this. I gave this talk and would be happy to chat with anyone about their thoughts on these or related topics.  Here is some proof:  My post of this talk video on my own blog A proof page
emacs,38u19v,bakuretsu,3,Sat Jun 6 22:18:02 2015 UTC,"Coming to evil-mode from straight Emacs, I still have all the Emacs finger reflexes intact, so I still use plenty of C and M bindings  without even thinking about it for saving files, switching buffers, managing windows and frames and all sorts of things.  But two text editing bindings I've kept are C-a and C-e for beginning/end of line instead of Vim's ^ and $, simply because they're so clunky to type (modifier key + out-of-the-way keys).  Do you (or anyone else coming from native Vim) have any examples of that kind of key binding where you have abandoned the Vim default key mappings?"
emacs,38u19v,jplindstrom,2,Sun Jun 7 19:08:23 2015 UTC,"I personally use C-a and C-e, but mostly because it's also the default in readline."
emacs,38u19v,bakuretsu,2,Sun Jun 7 19:47:24 2015 UTC,"Well, coming from Vim, I don't use leader key for anything except for     elisp-slime-nav-find-elisp-thing-at-point, everything new that I bind, I bind to Super + a letter, or some other chord. Saves me time because I don't have to be in normal mode to execute functions."
emacs,38u19v,40Cows,2,Mon Jun 8 02:03:52 2015 UTC,I am in full emacs adoption mode after that talk. There is a lot of crow being eaten but also a lot better work flow being made.
emacs,38u19v,verdigris2014,0,Sun Jun 7 02:13:45 2015 UTC,Thanks for posting that. Very good presentation. So your saying you aren't using evil anymore?
emacs,38u19v,bakuretsu,3,Sun Jun 7 02:47:09 2015 UTC,I was a pretty hard-core vim user. I am now moving over to emacs and evil mode.
emacs,38u19v,dcorbe,2,Sun Jun 7 03:29:48 2015 UTC,"Oh no, I am. The Vim meetup group was very receptive, too. I may have changed some perspectives."
emacs,38u19v,spoofedexistence,2,Sun Jun 7 03:16:46 2015 UTC,"You mentioned that you still prefer VIM for editing files remotely; but how in depth have you really explored tramp?  Just some things to consider.  You don't ever need to leave the comfort and warm embrace of your local emacs session in order to get work done on remote hosts.  You can edit files remotely through SSH (or plink and putty on Windows), so the key management issues you briefly alluded to during your talk are rather moot.  You can edit files remotely through privilege walls such as sudo and su.  magit works great over ssh too as long as you disable vc-mode.  vc works like shit over tramp and in all honesty magit is better for git than vc is anyways.  You can even spawn remote shells over tramp for doing things like restarting services."
emacs,38u19v,bakuretsu,2,Sun Jun 7 14:35:18 2015 UTC,"What bindings, vim or emacs, do you use for interacting with the editor and not editing text? for example, when opening files, managing buffers, saving files, creating, moving, deleting windows, etc...  For this tasks what route do you recommend? to keep using the vim ones or use the emacs ones?"
emacs,38u19v,bakuretsu,1 point,Sun Jun 7 20:48:36 2015 UTC,"I've definitely forged my own path. I used to use tpope's ""Vinegar"" plug-in for file browsing, so instead of that I bound helm-find-files to the - key. It is at least as powerful. You could easily bind hyphen to one of the dired commands, which would be perhaps more similar.  For file saving, I have ,w bound to save (<leader>w), and for switching buffers I have ,. bound to ""switch to previous buffer"" and ,b bound to helm-mini, which is like the buffer selector on crack (it includes recent files in addition to currently open buffers).  So I guess most of my file/buffer commands are Vim-like. I tend to use Vim-like mappings for things that I use very often."
emacs,38u19v,dcorbe,2,Sun Jun 7 22:58:52 2015 UTC,"evil-mode is still a crutch, productivity-wise, you should start gradually moving to the pure emacs way of doing things since it's a lot faster if you master it (and by that I mean using control, meta, super, hyper key modifiers instead of modal editing) and that doesn't necessarily mean C-v, M-v for page-up/page-down, as you mentioned rebinding keys is trivial and everyone should do it. So, don't focus on the existing key bindings which are there for historic reasons, but focus on the paradigm itself.  Tramp is super fast and better than remoting somewhere and running VIM, since, as you mentioned, bringing things into Emacs allows you to take full advantage of its power. While other editors are operating on text, Emacs operates on lisp datastructures (objects). This means that one can use emacs lisp to glue emacs applications together and exchange/transform data at boundaries that HE controls, not just boundaries chosen by the developers who wrote the API.  This is HUGE and tremendously empowering but again it takes some time for ppl to realize  what they have at their hands and for all of that to sink in. Certainly one needs to treat Emacs as more than an editor for that to happen.  The other thing you didn't spend a lot of time over, is the Lisp Machine aspect of Emacs. Its power comes from being written in Lisp (only some low-level bits and the redisplay engine are written in C for performance) which allows you to change pretty much EVERYTHING at runtime, interactively and mold Emacs to your ways. Also, the feedback loop from exploring/describing/understanding/changing/debugging code and seeing your changes is kept extremely short which allows you to enter a state of flow (like an artist working on a clay sculpture or a painter). No other language, besides Smalltalk, does this as good as Lisp.  So, over a period of years of using and extending Emacs, it's no longer Emacs but it becomes an extension of yourself and this is what pretty much every other editor out there is missing. 4-5-10 yrs from now, unless we get to direct neural interfaces (and even if we do odds are someone will write elisp to support them), I'm still going to be using Emacs with my 20 year old config+extensions, while Sublime,Textmate,Atom and the rest of the hipster garbage are either abandoned or on life support.  I used VIM for 10 yrs before discovering Emacs, but after I did (and learned emacs lisp) and fully grasped the implications of what it truly was, I never bothered with VIM again.  Emacs is a life skill and worth devoting time to learn."
emacs,38u19v,jplindstrom,13,Sun Jun 7 13:22:12 2015 UTC,"I fundamentally disagree that evil-mode is a crutch. Modal editing is by far the most efficient and semantically sensible interface for actual text editing.  That said, I've embraced some very Emacs-ish keys for other functions, like C-l, which toggles the position of the current line at the top, middle, and bottom of the viewport sequentially. It's convenient to be able to hit a few of these regardless of the evil state (i.e., in insert mode you can still press C-l).  The point being, everyone has their own workflow and hand flexibility and preferences, and I agree with your core point that Emacs is more capable of becoming an extension of yourself because evil-mode is layered on rather than baked in.  Also, I've used tramp, and it's really sweet."
emacs,38u19v,bakuretsu,8,Sun Jun 7 13:40:04 2015 UTC,"Definitely agree here.  evil isn't a crutch.  It's the gold standard for VIM users.  The whole point of emacs is the extent to which it can be customized and if that customization leads you to something that behaves exactly like a different editor entirely, then why is that a bad thing?"
emacs,38u19v,aport,1 point,Sun Jun 7 14:45:45 2015 UTC,"I turned to evil-mode after probably 8 years of Emacs, and I also continue to use e.g. C-l for changing the viewport.   It does work very well. However, if someone else is watching your screen, hitting C-l twice for putting point at the top of the window is very ""flickery"" and the other person will get totally lost as to what they're looking at.   In that case, the vim ""zt"" is more audience friendly."
emacs,38u19v,verdigris2014,1 point,Sun Jun 7 19:02:20 2015 UTC,"If I'm in normal mode, I definitely use zz more often to center the current line on the screen."
emacs,38u19v,Funnnny,6,Sun Jun 7 19:48:34 2015 UTC,Using VIM bindings for editing text has absolutely nothing to do with anything else emacs offers. I don't understand your diatribe at all.
emacs,38u19v,hrsII,0,Sun Jun 7 18:42:58 2015 UTC,"My diatribe is really my personal experience after 10 years of using VIM and therefore having been proficient at it.  After I moved to Emacs and became proficient with the Emacs way of doing things, I find that non-modal editing using Emacs modifiers is substantially faster than the VIM way.  YMMV but for me, the difference was night and day. To get maximum advantage of what I'm describing, you do need a good keyboard though (at a minimum change CAPS to Control) with good placement for whatever keys you use for Super/Hyper. If you use CAPS for C, Meta is usually conveniently placed for the thumbs to hit."
emacs,38u19v,parolang,1 point,Sun Jun 7 19:42:18 2015 UTC,"""So, don't focus on the existing key bindings which are there for historic reasons, but focus on the paradigm itself.""  I'm not a power user, but have been using unix like systems for many years eventually settling on emacs rather than vim.   To your point about remapping, I tend not to for two reasons;  Portability - of course I can take my setting with me, but it's easier to have the common base if I was to tell or be reminded by another user of a key sequence.   Historical reasons - emacs is so old yet flexible, that in my experience, others have chosen keys that don't conflict and have some sort of logic. For example I see someone posted as to why c-v m-v."
emacs,38vuc9,ThrowawayTartan,3,Sun Jun 7 06:52:58 2015 UTC,"Never used tmux, so not sure if this is what you want.  You can split the window with C-x 2 (vertical) and C-x 3 (horizontal), then C-x o to move between splits, C-x 0 to close current frame and C-x 1 to maximize current frame.  More info in the manual, chapters 16 and 17"
emacs,38vuc9,Wynro,2,Sun Jun 7 07:44:05 2015 UTC,"Yes, these are the five basic commands you must master first.   Later you can look at C-x + , C-x -, C-x { , C-x }, C-x HAT, C-x 4 b, C-x 4 f. Use C-h k to see what they do."
emacs,38vuc9,gonz808,1 point,Sun Jun 7 10:00:17 2015 UTC,"Emacs has builtin support for multiple windows and frames - if you've not done so already try working through the Emacs tutorial (C-h t) and look at the sections on MULTIPLE WINDOWS and MULTIPLE FRAMES.  Once you're happy with the basics described there you might want to then look at some of the various enhancements for window management such as windmove which adds support for directional window selection, or winner mode which provides a history mechanism for restoring previous window configurations.  It's nearly always possible to make Emacs perform exactly as you want, but if you're new to Emacs I'd suggest learning it as it is first, and then moving on to look at the many ways that it can be extended and altered to suit your personal taste."
emacs,38vuc9,drstevoooo,1 point,Sun Jun 7 07:38:40 2015 UTC,"Is there some option to replace frames with vim style tabs?  That is, multiple layouts with the same buffers in the same frame?   With easy ways to cycle them and move windows between tabs?"
emacs,38vuc9,Tarmen,1 point,Mon Jun 8 13:01:29 2015 UTC,You have two options:   Uinsg eyebrowse. Using evil-tab.
emacs,38vuc9,tuhdo,1 point,Mon Jun 8 14:47:25 2015 UTC,"Oh, neat! Tempted to use eyebrowse for the name but I guess I will go with evil tabs.   Thanks!"
emacs,38vuc9,Tarmen,1 point,Mon Jun 8 15:26:16 2015 UTC,"A bit related, golden-ratio. I was very skeptical at first, but I got used to it. Very convenient for small screens."
emacs,38vuc9,TheFrenchPoulp,1 point,Tue Jun 9 17:10:01 2015 UTC,"Cool idea from spacemacs, key combinations that change into triple split or dual split with golden ratio.  I like the idea but find the re-sizing really jarring, though. I think in situations were I have more than two windows one is supposed to be the main one and stay larger. Maybe rotating the buffers through one window layout would be less weird?  Edit: Rotating looks pretty cool, at least for two windows. Might have to build upon this layout-mode idea and do some switching of keybindings. Like, in the two-window mode leader + h/l move between windows and j/k rotates them? And in the free mode h/j/k/l move between windows and split if there aren't any window to move to in that direction? In three window mode h/l could wrap around so that you can get to every window in one move but I am not sure what  j/k could be used for. And should modes automatically switch in a sensible way if you do something like splitting? And why do I always have to over complicate simple ideas :("
emacs,38vuc9,Tarmen,1 point,Tue Jun 9 17:17:14 2015 UTC,"Disclaimer: I don't use emacs long enough to really now the answer.  Neovim had a terminal emulator too, though, and it superseded any use I might have had for tmux. Maybe try that?"
emacs,38vuc9,Tarmen,1 point,Sun Jun 7 07:39:05 2015 UTC,"I used to use vim and tmux and have recently started using spacemacs instead. It's really nice but I haven't been able to get an exact match on the workflow.  In tmux there's a green bar that displays what windows are running what (that one can rename and script), I haven't seen anything similar in spacemacs / Emacs.  There's a package called eyebrowse that enables one to have multiple frames within a frame (probably the wrong terminology there...), but as you can't see what frame is running what it's not really the same as tmux.   So I've been using frames and splits for my workflow, spacemacs is great, but it hadn't got a workflow like tmux as it doesn't have that bar thing."
emacs,38vuc9,__baxx__,1 point,Sun Jun 7 09:56:19 2015 UTC,"I'm not sure if this is exactly what you're looking for but: have you looked into tiling window managers? They give you splitting, manoeuvring and workspaces for all windows (emacs, terminal, browser, mail client, etc.).  Making emacs play nicely with a tiling window manager takes a little effort. I've put together some settings, code and tips for doing that here (I called it a ""mode"" at the time but that's a bit of a lie, it doesn't actually define an emacs mode). I've been using it for about 3 years now and it's really nice :)."
emacs,38vuc9,sledgespread,1 point,Sun Jun 7 10:36:49 2015 UTC,"How about using emacs and TMux in the same way. Run emacs as a server, then connect multiple emacs clients via TMux.   Baby steps.   I love TMux ever since I migrated from screen."
emacs,38vuc9,verdigris2014,1 point,Wed Jun 10 03:34:26 2015 UTC,I think it's because I see it as a waste if I run emacs in the no-gui mode? But it also seems like the gui mode feel cohesive with tmux
emacs,38txjc,jackrusher,3,Sat Jun 6 20:06:39 2015 UTC,"I so often find myself wanting to see a plot of some numerical data in a Clojure sequence that I whipped up a little elisp function to plot the value of the last sexp and display it directly in emacs.  If it's a single numerical sequence it gives me a histogram, if it's two sequences it draws an xy-plot. I'll probably gradually make it smarter about detecting different patterns and providing best guess plot-types for them.  Charting is done by incanter, the display via the Webkit-based SVG support baked into Railway cat emacs."
emacs,38txjc,howardthegeek,2,Sat Jun 6 20:13:52 2015 UTC,That's really slick!
emacs,38sqes,eric-plutono,5,Sat Jun 6 14:19:11 2015 UTC,Adding A New Language to Emacs (How to write a major mode)
emacs,38sqes,xuchunyang,1 point,Sat Jun 6 14:35:31 2015 UTC,For more information also see the relevant part of the GNU Emacs Lisp reference.
emacs,38sqes,chocolate_bread,-1,Sat Jun 6 14:20:29 2015 UTC,"Bear in mind modes shouldn't bind keys in with a C-c prefix, they're reserved for users."
emacs,38pexk,wadcann,8,Fri Jun 5 18:57:46 2015 UTC,"I think js2-refactor get's around this nicely. It provides a function js2r-add-keybindings-with-prefix you can add to your init like this:  (js2r-add-keybindings-with-prefix ""C-c u"")    Thus setting all the bindings to ""C-c u something"""
emacs,38pexk,jordonbiondo,10,Fri Jun 5 21:09:28 2015 UTC,I can't upvote this enough.
emacs,38pexk,bliow,4,Fri Jun 5 21:48:38 2015 UTC,Projectile as well.
emacs,38pexk,Ubertekk,2,Fri Jun 5 19:48:03 2015 UTC,Eshell too.
emacs,38pexk,bozhidarb,5,Sat Jun 6 03:04:28 2015 UTC,"I'm Projectile's author and I'm well aware of this rule. The default prefix used to be C-c C-p, but people wanted something shorter and I obliged. I've made this configurable, so people who don't like this can easily change it.   I agree that it's probably a good idea to abide by this rule, but have a of package commands that start with C-c C-something is not exactly the best user experience."
emacs,38pexk,hvis,4,Fri Jun 5 21:37:17 2015 UTC,"I think C-c p and C-c C-p take about the same time to press.  Still, as long as the packages provides a way to change the prefix (like projectile-keymap-prefix), I think it's fine."
emacs,38pexk,hyperbling,6,Sat Jun 6 10:25:51 2015 UTC,"that's kind of weird because C-c C-p is ergonomically superior to C-c p because you don't have to lift ctrl in between, and hence is also much faster."
emacs,38pexk,otijhuis,-1,Sat Jun 6 12:25:25 2015 UTC,C-c C-p won't be any faster. You use both hands to do C-c p which means you can roll your fingers from control to c and quickly press p with the other hand. Especially when you've remapped capslock to control. No need to hold your hand in one position but just one quick natural movement. Holding control just makes it uncomfortable for me personally.
emacs,38pexk,Ryckes,3,Sat Jun 6 19:24:33 2015 UTC,"What about C-x p?  That's not presently-used by base emacs, I don't think that it violates any emacs conventions, and it shouldn't be substantially-worse to press.  A quick Google shows that there are a couple users of this prefix (though it at least seems like a preferable default to C-c p):   p4el Perforce Prelude's process management Bookmark+"
emacs,38pexk,Taikal,3,Wed Jun 10 18:14:09 2015 UTC,+1  I use C-x p for projectile-find-file.
emacs,38pexk,delbosforo,1 point,Sat Jun 6 16:53:53 2015 UTC,You could bind C-c C-p by default and then let the user customize the binding as C-c p (and show in the README how to do that).  Thank you for Projectile.
emacs,38pexk,kaushalmodi,5,Sat Jun 6 17:08:04 2015 UTC,Org mode seems to be a big offender of this rule.
emacs,38pexk,delbosforo,11,Mon Jun 8 14:38:23 2015 UTC,"org-mode bindings are of the type C-c C-<letter> instead of C-c <letter>. Or maybe, I haven't come across one."
emacs,38pexk,localhorst,1 point,Fri Jun 5 19:37:21 2015 UTC,"Well, I can't give an example for C-c <letter> off the top of my head but I recall my keys clashing with Org bindings. I have about 60 keybindings and other than some overrides all my bindings have the C-c prefix."
emacs,38pexk,glg00,6,Fri Jun 5 19:41:55 2015 UTC,"That's the convention.  Major mode keybindings should start start with C-c, but not C-c <letter>.  Almost all major mode bindings are C-c C-<something>.  EDIT: and I think C-c S-<number> are reserved for minor modes."
emacs,38pexk,AnAirMagic,2,Fri Jun 5 22:54:35 2015 UTC,"The Org info pages do suggest to set up some C-c <letter> bindings, but this is left at the user's discretion."
emacs,38pexk,kaushalmodi,2,Sat Jun 6 02:07:44 2015 UTC,"What's the solution, though? If I make a package where keybindings are a big part, where do I put those keybindings? Under C-x?"
emacs,38pexk,AnAirMagic,8,Mon Jun 8 23:04:24 2015 UTC,You can suggest the bindings in the Comments section in the header section of your package file. You/your package user can then bind stuff however they want in their init.el.
emacs,38pexk,TarMil,3,Fri Jun 5 20:16:35 2015 UTC,Is that really scalable though? Imagine if every user of magit had to bind all magit keys themselves. Or someone using org had to bind all keys used by org-mode themselves...
emacs,38pexk,pkkm,10,Fri Jun 5 20:25:33 2015 UTC,"The vast majority of magit's keybindings are plain letters, not C-c <letter>."
emacs,38pexk,mmaug,5,Fri Jun 5 20:32:44 2015 UTC,"Some of it would probably be best-addressed by using a single prefix that can be set for a package.  I do think that there may be a lack of reserved prefixes for cross-major-mode bindings, though, so that that prefix can at least be reasonable to begin.  That is important to have a ""working out of box"" behavior.  It might also be nice to have a new function that requests a keybinding, but doesn't just silently stomp any existing keybinding.  That way, any conflict can be made user-visible (either via a log message or maybe even flag the two packages/functions that are conflicting and ask the user to reassign).  Some features expect to override existing bindings (e.g. C-x b for switch-to-buffer should be overridden by ibuffer), but most do not want to conflict.  I also wish that there were a handful of ""short"" user-reserved combinations -- I use M-"" for one user-keybinding that I need to hit frequently.  That's not really correct, but nothing I use has been actively-using it...  And while I'm at it, it would be nice if there were a way to check  that a particular combination is likely to be incompatible with TTY modes -- some authors have used bindings that simply cannot be encoded via current terminal conventions (like control-shift-letter) in their packages and don't realize that this breaks TTY compatibility.  Other people use things like C-M-S-<right>, which a number of very-commonly-used terminals do not have an encoding for.  C-M-% for query-replace-regex is a problem present even in base emacs.  It'd be nice to reserve those for features that are inherently TTY-incompatible anyway, like the emacs fringe."
emacs,38pexk,kaushalmodi,2,Fri Jun 5 20:46:04 2015 UTC,"You can work around keys not encoded by terminals using event-apply-control-modifier, event-apply-shift-modifier, etc. These functions add modifiers to the next key event; for example, after evaluating  (global-set-key (kbd ""M-c"") nil) ; Otherwise will be shadowed by `capitalize-word'. (define-key function-key-map (kbd ""M-c"") #'event-apply-control-modifier)   or (if you use bind-key)  (bind-key ""M-c"" nil) ; Otherwise will be shadowed by `capitalize-word'. (bind-key ""M-c"" #'event-apply-control-modifier function-key-map)   you will be able to type C-} by typing M-c }."
emacs,38pexk,lambda_abstraction,1 point,Fri Jun 5 21:47:43 2015 UTC,C-M-% on a terminal is ESC C-5; the ESC replaces the M- and C-5 is indistinguishable from C-S-%.  Modes are allocated C-c C-letter as a prefix
emacs,38pexk,kaushalmodi,1 point,Sat Jun 6 20:45:29 2015 UTC,"Yup, ESC is a workaround for M-combinations that don't exist, and you've always M-x, but it's decidedly-inconvenient."
emacs,38pexk,lambda_abstraction,1 point,Sat Jun 6 03:00:26 2015 UTC,You can have a defcustom for the user to customize the binding for your package's prefix map. All bindings set by the package should use that prefix. Check out drag-stuff. Or you can do what winner does.
emacs,38pexk,kaushalmodi,1 point,Sat Jun 6 03:24:31 2015 UTC,"That smugly piles an annoying chore (making possibly many decisions about what binds what) on the user who may just want to test drive a package, and who would prefer just to have a standard set of bindings ready made."
emacs,38pexk,eric-plutono,2,Fri Jun 5 22:04:34 2015 UTC,"IMO, you would normally just load a package and try out the interactive functions provided by the package using M-x. The packages shouldn't do all the bindings for you as all the commands provided by the package might not be needed/wanted by all. I would like to bind those commands as I wish.   For instance, the ;' key-chord is the most convenient binding for me for smex. It would be a chore for me if it bound smex to M-x by default and then I had to unbind/rebind that.   Imagine how chaotic would be it 5 different packages bound the C-c p binding and a user has all of those packages installed!"
emacs,38pexk,hvis,1 point,Fri Jun 5 23:37:19 2015 UTC,"I understand, but I also have been using this editor for over two decades now.  M-x + long-symbol-with-lots-of-ambiguity is painful enough that someone might just say fuggedaboudit.  If one doesn't like bindings, they can be changed subsequently as well using the same editing mechanism as for init.el.  BTW: why would you want to unbind smex?  I really seldom find myself wanting bare M-x; I do have it on C-c C-c M-x, though I type it infrequently enough (as in zero times) that I had to look it up in my init.el.  You do not speak for everyone, and maybe your tone should reflect that."
emacs,38pexk,eric-plutono,1 point,Fri Jun 5 23:54:18 2015 UTC,"I haven't unbound M-x but I can if I want as I never use it. I always use ;'. But I understand, it all boils down to preference: binding preferred binding vs unbinding package-shipped bindings in the init.el.   I agree about your reference to my not using a subjective tone, fixing it."
emacs,38pexk,TotesMessenger,2,Sat Jun 6 00:14:06 2015 UTC,You can (and in my opinion should) still use C-c but make sure the second keys use Ctrl or (less commonly) Meta modifiers.  E.g. C-c C-p is perfectly acceptable.  C-c p is not.
emacs,38pexk,yveszoundi,1 point,Sat Jun 6 00:45:26 2015 UTC,Have you noticed how easy it is to accidentally press C-c C-p instead of C-c p?
emacs,38pexk,hober,2,Sat Jun 6 05:08:08 2015 UTC,"No, personally I've never had the kind of issue."
emacs,38sno3,TheFrenchPoulp,1 point,Sat Jun 6 13:53:05 2015 UTC,"How about loading your theme before customizing faces by yourself, for example, move (require 'init-theme) to the beginning (i.e., before all other (require 'init-*))?"
emacs,38sno3,xuchunyang,1 point,Sat Jun 6 16:57:34 2015 UTC,"I can't really put it before all other requires for obvious reasons, but when I tried 5 days ago with:  ;; Initialize the core configuration (require 'init-constants) (require 'init-interface) (require 'init-elpa) (require 'init-palettes) (require 'init-theme)                 <-- Moved up here  ;; Initialize the partials (require 'init-aliases) ...   This is what I got ![Resize issue]10. Here is the bug I filed on railwayat's Github respository."
emacs,38sno3,xuchunyang,1 point,Sat Jun 6 17:20:16 2015 UTC,"I've tried you emacs conf and have the same resize issue, but not the official cocoa GNU Emacs."
emacs,38sno3,xuchunyang,1 point,Sat Jun 6 17:58:08 2015 UTC,"but not the official cocoa GNU Emacs   Do you mean you don't replicate the issue with cocoa's, but with railwaycat's ?"
emacs,38r072,cestdiego,4,Sat Jun 6 02:00:45 2015 UTC,"For dotfiles that use anything similar to an INI style I like to use conf-mode or one of its variants like conf-unix-mode, conf-windows-mode, etc."
emacs,38r072,eric-plutono,2,Sat Jun 6 07:13:52 2015 UTC,"Strangely enough, after moving from Vim to Emacs the only config I edit is my my emacs config. I've probably added one or two lines to .zshrc in 6 months, and all my other configs have stayed the same, because all the external programs I used to use got replaced by emacs equivalents. I don't need Tmux anymore, nor Weechat, etc..."
emacs,38r072,40Cows,1 point,Mon Jun 8 02:06:58 2015 UTC,conky does actually install vimscript files for setting up syntax highlighting in Vim. Someone would need to port it to Emacs...
emacs,38r072,wasamasa,1 point,Sat Jun 6 08:30:37 2015 UTC,"Usually various minor modes from conf-mode.el, but there are some exceptions, for example, vimrc-mode for .vimrc, sh-mode for .zshrc."
emacs,38o0tr,localhorst,6,Fri Jun 5 13:31:29 2015 UTC,"I actually have the touchpad on/off functionality in bash scripts, I don't know why it never occurred to me to hook it into emacs like this."
emacs,38o0tr,tealeg,2,Fri Jun 5 13:44:53 2015 UTC,"Two comments...  One, synclient will likely give you much finer-grained controls over your touchpad than xinput will...also, synclient is more likely to continue to work if your kernel (or kernel configuration) changes to use a different module/driver for your touchpad (e.g. i2c instead of psmouse will change the device ID for xinput but shouldn't affect synclient commands).  Two, I prefer to just bind a hotkey in my window manager to a bash script that toggles the touchpad on/off.   Though I don't usually want it on in emacs, I occasionally do, mostly for juggling URIs between shell/emacs/browser(s), or other such cut'n'paste operations.  I'm not going to claim this is a better solution, as different folks have different needs and preferences, but still feel it's worth mentioning for consideration.  But I'd definitely recommend migrating from an xinput to synclient solution for everyone that has a synclient controllable touchpad!"
emacs,38o0tr,forked_tongue,2,Sat Jun 6 16:26:21 2015 UTC,"For the lazy people who just want to c&p, this version includes the suggestions from this thread (thanks /u/forked_tongue and /u/AtticHacker):  (defun turn-off-mouse (&optional frame)   (interactive)   (let ((inhibit-message t) (default-directory ""~""))     (shell-command ""synclient TouchpadOff=1"")))  (defun turn-on-mouse (&optional frame)   (interactive)   (let ((inhibit-message t) (default-directory ""~""))     (shell-command ""synclient TouchpadOff=0"")))  (add-hook 'focus-in-hook #'turn-off-mouse) (add-hook 'focus-out-hook #'turn-on-mouse) (add-hook 'delete-frame-functions #'turn-on-mouse)"
emacs,38o0tr,openist,1 point,Tue Jun 9 13:37:25 2015 UTC,Does it beep every time you turn it on and off?
emacs,38o0tr,ccharles,1 point,Fri Jun 5 18:54:59 2015 UTC,Why would it?
emacs,38o0tr,openist,1 point,Fri Jun 5 21:52:26 2015 UTC,"Disabling the trackpad on windows does, I guess linux? Is different."
emacs,38o0tr,Lompik1,1 point,Fri Jun 5 21:53:45 2015 UTC,"This is great ! I was looking for this last week. I ended up with just disable mouse clicks in emacs :   (global-unset-key (kbd ""<down-mouse-1>"")) (global-unset-key (kbd ""<mouse-1>"")) (global-unset-key (kbd ""<down-mouse-3>"")) (global-unset-key (kbd ""<mouse-3>""))"
emacs,38o0tr,franburstall,1 point,Sat Jun 6 01:37:44 2015 UTC,Thank you very much for this: very cool.
emacs,38o0tr,AtticHacker,1 point,Sat Jun 6 10:42:37 2015 UTC,"Also if you use TRAMP for remote connections it might be nice to set your default directory to your home directory. Because otherwise it will use xinput of your remote machine is isn't desirable. e.g.  (defun turn-off-mouse (&optional frame)   (interactive)   (let ((default-directory ""~""))     (shell-command ""xinput --disable \""SynPS/2 Synaptics TouchPad\"""")))   Thanks for this awesome tip!"
emacs,38qllb,nautola,1 point,Fri Jun 5 23:59:09 2015 UTC,I would suggest remap the lower keys to:  ... [LAlt][LCtrl][Space][RCtrl][LAlt] ...  so that your thumbs does all the work. You can also give the modifier keys dual function so that Ctrl/Alt trigger Ret/Tab or something when you press and release within a short time interval.
emacs,38qllb,bauta-steen,1 point,Sat Jun 6 01:35:08 2015 UTC,"How much movement would you say is adequate for hitting a modifier?  I generally try to move the absolute minimum, and sometimes I worry that causes problems for my hands.  For instance, I stretch my pinkies rather than move my whole wrist."
emacs,38qllb,zeRusski,1 point,Sat Jun 6 01:48:12 2015 UTC,"<item>     <name>Overlaid SPACE</name>     <appendix>Insert SPACE when typed alone</appendix>     <appendix>CONTROL in key combinations</appendix>     <identifier>private.space_to_control_space</identifier>     <autogen>__KeyOverlaidModifier__ KeyCode::SPACE, KeyCode::CONTROL_L, KeyCode::SPACE</autogen> </item>   https://github.com/vkz/personal_configs/blob/master/karabiner.xml  Do not use Caps as Ctrl. Minimize using pincky. That means for instance minimising the use of Shift as well. Go for big and strong thumbs instead. I have both L_Command and R_Command (Mac keyboard, should be Alt or Win key on Windows) bound to Sticky Shift when pressed alone (act as one time sticky Shift when pressed alone, so that only the next key pressed is shifted) but act as Meta (Command) when pressed with another key or keys (as modifier). In general you should be asking questions about Karabiner on its dedicated forum. It's xml config syntax is horrendous but the author is very helpful.  If you're prepared to go to the extremes you may want to create you very own custom keyboard layout. Karabiner is too slow for that, so you'd need to turn to 'native' solutions. On a Mac google for Ukelele. Idea is again to minimize Shifting, so for instance I have a separate layout for numbers activated by holding Alt (physical Shift) with all numbers typed by right hand much like on a numpad. This leaves the entire upper row for special symbols that you use way more often in programming than numbers and that normally require Shifting."
emacs,38qllb,tacit7,1 point,Sat Jun 6 10:12:59 2015 UTC,"I have space as control and it takes a while to get used to. Can you share your keyboard config? Mine is:  SPC to CTRL when used in combination.  R-CMD to R-CTRL  L-CMD to ESC not used in combination.  R-OPTION to META  ^ reformatted this section  Im not entirely happy about it, but its better than the default."
emacs,38qllb,jivatmann,1 point,Sat Jun 6 18:32:52 2015 UTC,Do you have any issues while typing?    I found that with the default setting for this I can't type normally without triggering Control.
emacs,38qllb,heyavtar,1 point,Sat Jun 6 23:26:01 2015 UTC,I had the same desire and this package: https://github.com/alols/xcape made me happy finally. If your press Space alone it will act as normal Space but if your press it together with another key it will act as Control + key you pressed. Couldn't live without it any more! If you are a Linux User this is the solution!
emacs,38qllb,jivatmann,1 point,Sat Jun 6 11:48:31 2015 UTC,If you press Space alone it will act as normal Space but if your press it together with another key it will act as Control + key you pressed   Did that affect your typing speed at all?
emacs,38qllb,tending,1 point,Sat Jun 6 19:26:47 2015 UTC,"Not really. But it happens from time to time, that i mistype and something ""liket his"" happens. But the benefits from not hurting my pinky anymore outweigh this."
emacs,38qllb,verdigris2014,1 point,Sat Jun 13 16:08:55 2015 UTC,"The most important step you can take is to not type so much on a laptop keyboard. There is no ergonomic way to type on one. If you are already experiencing pain you need to change your habits NOW, before you develop bad RSI. Install workrave, get a Kinesis, and consider trying one of the modes that doesn't use modifiers, like evil/god/fingers."
emacs,38qllb,tending,1 point,Sat Jun 6 15:51:14 2015 UTC,"How far away is integrating some sort of voice control?  I find myself using Siri on my iPhone these days and using voice to text for sending text messages.   Would it be such a leap to issue a 'command' to switch to god mode?  I'm predominantly an org user, so thinking about what to write generally takes longer than writing it. I feel that speech to text is going to become an option for me at some point, but now I'm wondering about a mixed mode of voice and keyboard."
emacs,38qllb,verdigris2014,1 point,Fri Jun 12 01:20:11 2015 UTC,https://github.com/dictation-toolbox/aenea  https://github.com/jgarvin/mandimus
emacs,38o5zb,furkanusta,3,Fri Jun 5 14:09:00 2015 UTC,"1 - Yes.  2 - You can use both simultaneously. 3 - Yes, for example, you can use Nerd Commenter without needing Evil. 4 - It's a personal thing. In my humble opinion, the Vi keys makes more sense to me than the clunky Emacs keybindings.   And if you want to get a taste of Vim/Emacs combination without the hassle of configuring everything, you could try Spacemacs first."
emacs,38o5zb,ReneFroger,1 point,Fri Jun 5 14:34:59 2015 UTC,"Does evil key bindings collide much with emacs standard key bindings or third party packages?  I don't want to use spacemacs, I may poke at it and learn some things, want to start with vanilla emacs and evil."
emacs,38o5zb,spoofedexistence,1 point,Sat Jun 6 06:17:03 2015 UTC,"It depends on which mode you are in (input/command etc), but in general no. vim is modal and emacs is emacs."
emacs,38o5zb,monotux,2,Sat Jun 6 14:52:40 2015 UTC,"Vim has more than 2 modes. Yes, evil has them. Vim keybindings better in some way and emacs keybindings better in the other. Why not, you can use elisp to tinker it the way you like it It is convenient most of the time unless you do a lot of micro changes   I like vim way, it doesnt hurt my wrists."
emacs,38o5zb,habamax,1 point,Fri Jun 5 14:36:51 2015 UTC,"I'd also argue that many of the vim bindings are easier to remember.  Emacs has different bindings for a lot of similar tasks like deleting a word, paragraph, sentence... In vim style bindings you start with di for delete in and you can do diw, dip, dis and so on  or daw, dap and das if you want to delete around those things.  But then again, some vim keybindings are completely fucked up.  Vi and even vim are generally more low profile and some version is installed pretty much everywhere. So if you really need to edit something you can reliably fall back on vim/vi. If you don't have to do that kind of stuff multiple times a day you can easily get away with the very basics, though, like h/j/k/l to move, :x to save and quit and i/escape to enter or leave edit mode.  And I feel like emacs looks horrible in terminal."
emacs,38o5zb,Tarmen,2,Sat Jun 6 11:02:03 2015 UTC,"And I feel like emacs looks horrible in terminal.    Use 256 color terminal and choose color themes that fit i.e. monokai, zenburn, darktooth, tomorrow... Emacs looks almost identical to GUI version."
emacs,38o5zb,tuhdo,2,Sat Jun 6 15:43:37 2015 UTC,"I suppose vim has 2 different modes: one for navigation and writing, one for commands. Does evil-mode bring that feature to emacs?   More than two. You wouldn't navigate in the writing mode (insert state) however. Yes, Evil has this feature.   Will I need to learn vim keybindings for editing or still use Emacs-keybindings? Which one would be beneficial?   It wouldn't make sense to use Evil without learning the Vim-style bindings. Emacs bindings remain untouched to some degree, and you can drop into Emacs state if you like with C-z, where they do remain untouched, except for C-z obviously. I consider the Vim editing model to be vastly superior.   Can I use evil-mode extensions without using vim-like editing system?   Some, but not all. Most of the Evil extensions tend to have decent basic Emacs equivalents in any case.   Not really a question but is that 2-state-text-editing really superior or just an habit of old vim users? Also in many ""vim vs emacs"" topics being able to run on console is given as a feature for vim to edit files on server/terminal. However, emacs can also be used in terminal without using X, so why would it be given as unique a feature?   As I said, I would say it's superior. The core argument isn't that Emacs can't be run in terminal, but rather that typically Vim is installed on servers and Emacs is not."
emacs,38o5zb,TheBB,2,Fri Jun 5 14:54:18 2015 UTC,"If you decide to try Emacs key bindings then Evil, you should still go for Spacemacs. It supports both styles, and you can choose a default one but during an Emacs session, you can toggle the other and use it."
emacs,38o5zb,tuhdo,1 point,Fri Jun 5 15:32:03 2015 UTC,"It seems like packaged for new users, so it might be better for me to use it instead of diving into evil and vim.  I'll definitely try"
emacs,38o5zb,kcin,1 point,Fri Jun 5 15:40:51 2015 UTC,"is that 2-state-text-editing really superior   Not superior, just different. I use Emacs with normal keybinginds. Use what you prefer. The strength of Emacs  is you can make the editor work like you want, so it's not you who adapts to the editor, it's the other way around."
emacs,38kt0f,ReneFroger,2,Thu Jun 4 21:25:04 2015 UTC,"Reminds me a bit of the remembrance agent which indexes your documents continously and displays suggestions of related documents in a buffer below the one you're editing. Tracking metadata and incorporating it in other services generally seems to be a somewhat creepy trend as can be seen by Google's filter bubble (yes, it helps me finding things I've looked at months ago again), tasks automated by neural networks in web services (see tag autosuggestion by Google Docs based on contents) or Akonadi."
emacs,38kt0f,wasamasa,1 point,Fri Jun 5 10:21:46 2015 UTC,"Hi wasamasa!  This is Karl, the author of Memacs.  I know remembrance agent and lots of other cool PIM software. In case you're interested, you can skim through http://tagstore.org/en/papers.shtml and most interesting http://tagstore.org/downloads/Voit2012b.pdf where I wrote about those things.  Unfortunately, remembrance agent is not maintained any more. With the digital fragmentation it got harder to index data on one machine/place. And this is where Memacs is helping: gathering all kinds of data from all over the web and your machines into one place.  Tracking (any) data is creepy only if it is done by anybody else but you. However, Memacs is about tracking your data by you (only). I collect much data - but this aggregated data is only on machines I control."
emacs,38kt0f,murdsdrum,1 point,Sat Jun 6 09:10:17 2015 UTC,"Agreed, my comment on the nature of these services was refering to the case when you're not in control of the tracking. Perhaps phrasing it more specifically would have helped making my point come across better.  Thanks for the resources! I wasn't aware PIM is a research topic and will hopefully learn from your dissertation on using org for more than keeping notes."
emacs,38kt0f,wasamasa,1 point,Sat Jun 6 11:01:57 2015 UTC,"You're welcome. If you're interested in PIM, you might also be reading my blog at http://Karl-Voit.at where I've got many articles about PIM research and PIM methods."
emacs,38j71d,justonium,10,Thu Jun 4 16:02:02 2015 UTC,"Almost every beginner gets carried away redefining keys to try to make them fit their own preference, only to later regret it and steadily revert to using the default Emacs keys (the exception would be people using the 'evil' package to get the vi keys).  Don't be so quick to assume the built-in tutorial isn't for you.  If you approach Emacs wondering how it can conform to your ideas, you'll have a hard time.  If you approach it by trying to use it as it was intended, you'll do much better.  The tutorial is quite out of date in that these days people do a lot more extending Emacs with other modes etc., and the tutorial doesn't cover that.  However, you can't really fault it too much for not telling you how you can do other things.  It's a tutorial on how to do the basics of editing within Emacs.  As such it's not so bad."
emacs,38j71d,fantastipants,2,Thu Jun 4 18:35:49 2015 UTC,"If you approach Emacs wondering how it can conform to your ideas, you'll have a hard time.   Eventually, it should be able to though, correct? After all, I can change anything non-graphical by using Elisp, right?  The built-in tutorial wasn't impossible to use, but it certainly isn't close to the best that can be done, either, judging against the VIM tutorial that I tried."
emacs,38j71d,fantastipants,8,Thu Jun 4 19:44:26 2015 UTC,"You can customize as far as you like (as the 'evil' package shows), but the bigger question is should you, and in particular, should you be rejecting the Emacs way to do things from the start.  I think it makes much more sense to embrace the Emacs way of doing things initially, and then look at molding it to your needs later."
emacs,38j71d,---R,1 point,Thu Jun 4 19:57:40 2015 UTC,"The built-in tutorial wasn't impossible to use, but it certainly isn't close to the best that can be done, either, judging against the VIM tutorial that I tried.   If you have got concrete examples of how to improve it (without discarding everything), please consider writing a mail to the Emacs devel mailing list, explaining your thoughts.  They discussed recently how to improve it."
emacs,38j71d,__baxx__,0,Sun Jun 7 09:14:47 2015 UTC,The vimtutor is so good!
emacs,38j71d,cpbotha,8,Thu Jun 4 20:07:53 2015 UTC,"Emacs Prelude by bbatsov is a wonderful configuration system that super-charges your Emacs. It made my whole experience much more fun, and the added interactivity, especially in the discoverability of commands via M-x (even more so when you activate helm-prelude), has really helped me level up.  See here: https://github.com/bbatsov/prelude -- with emacs 24 installed, getting prelude going should not take you more than about a minute."
emacs,38j71d,cpbotha,1 point,Thu Jun 4 17:45:50 2015 UTC,"Thank you! Does it automatically teach me the default hotkeys, or does it give the choice to use an alternative layout? If the former, then I'll still need to find an alternative layout to start out with."
emacs,38j71d,kabbotta,1 point,Thu Jun 4 19:22:54 2015 UTC,"It comes with a set of good defaults, in the sense that it uses emacs defaults where they are available, but enhanced with better emacs packages, and otherwise extending keybindings along the lines of what's already there."
emacs,38j71d,MonsieurBanana,6,Thu Jun 4 20:21:00 2015 UTC,"I've found almost no reason to remap keybindings by simply setting up my keyboard the way the original space cadet lisp keyboard was setup.  Instead of this:  Ctrl - Super - Alt - Space - Alt - Super - Ctrl   Change it to this:  Super - Alt - Ctrl - Space - Ctrl - Alt - Super   For me, this made all the difference. There is no more of that nasty spider fingers crap. Instead, to hit Ctrl you just slide your thumb slightly to the side off the spacebar."
emacs,38j71d,kabbotta,2,Thu Jun 4 21:32:02 2015 UTC,"I wish I had done that. I'm too far gone now, it would take a long time of suffering to rewire my reflexes."
emacs,38j71d,parolang,2,Fri Jun 5 08:39:33 2015 UTC,What is Super? My keyboard doesn't have such a key.
emacs,38j71d,z27,1 point,Fri Jun 5 20:50:13 2015 UTC,"It's what they would call the ""Windows button"". It's usually inbetween Control and Alt. It usually has a picture on it instead of a word. Some people call it Hyper."
emacs,38j71d,skalawag,1 point,Fri Jun 5 21:54:40 2015 UTC,"Exactly. Glad someone mentioned this. The whole ""make caps lock a control key"" causes you to overuse your pinky, ""emacs pinky""."
emacs,38j71d,camsaul,1 point,Fri Jun 5 00:39:20 2015 UTC,"This is exactly my setup, and I love it. It made a huge difference. I also have setup Caps Lock as Hyper."
emacs,38j71d,__baxx__,5,Fri Jun 5 14:21:14 2015 UTC,there's some good stuff here: https://www.masteringemacs.org/all-articles  start at the bottom of the page
emacs,38j71d,tuhdo,1 point,Thu Jun 4 17:59:59 2015 UTC,Thank you!
emacs,38j71d,thang1thang2,4,Thu Jun 4 19:26:58 2015 UTC,"You should probably use Emacs for a little bit and wrap your head around the core concepts before you jump into the deep-end with Elisp.  You can save yourself from some headaches by using one of the  ""Starter Kits"" until you get to know it a little better. Spacemacs is good if you're coming from a VIM background. Otherwise you might consider starting with Prelude or Emacs Starter Kit. Prelude looks like it comes pretty well configured for Python programming.  Mickey Petersen just released the book Mastering Emacs, which could be a good starting point. Worth a look.  Once you get used to Emacs you can start learning Emacs Lisp. Changing keybindings is a good starting point:  (global-set-key (kbd ""C-z"") #'undo) ; Ctrl-Z is undo   At some point you'll want to read the Emacs Lisp manual, but take things one step at a time."
emacs,38j71d,mitc0185,3,Thu Jun 4 18:02:45 2015 UTC,Thank you for such a detailed set of recommendations.
emacs,38j71d,thebhgg,2,Thu Jun 4 19:28:10 2015 UTC,Spacemacs has Emacs mode as well as vim keys now.   Mapping keys didn't seem as simple as the nnoremap and whatnot that vim has.
emacs,38j71d,zck,2,Thu Jun 4 20:12:05 2015 UTC,"Because the key binding scheme in Vim is very simple. It only has global key mapping. In Emacs, you have both global key mapping and local key mapping, and that's why when you map keys, you have to specify a keymap variable, which determines the scope of such key binding."
emacs,38j71d,mitc0185,2,Fri Jun 5 03:25:35 2015 UTC,"This actually took me a while to understand. Now it makes sense and I prefer the extra power it gives, but it is more confusing at the beginning for a lot of people, I think."
emacs,38j71d,to3m,4,Fri Jun 5 07:24:37 2015 UTC,Map your caps lock key to control.
emacs,38j71d,__baxx__,1 point,Thu Jun 4 19:43:46 2015 UTC,"That seems like an arbitrary suggestion. I'm not even planning on using the default hotkey layout, by the way. In my current key layout on Windows, I use left and right alt as modifier keys."
emacs,38j71d,bagofries,4,Thu Jun 4 19:59:44 2015 UTC,"It is pretty common advice.  Emacs pinky is a known thing, though if you have customized your emacs setup so that control keys aren't used very much (and meta, super, or hyper is more common) then feel free to do your own thing."
emacs,38j71d,__baxx__,3,Thu Jun 4 20:32:31 2015 UTC,"That seems like an arbitrary suggestion.   It's a very commonly suggested thing. Rather than being arbitrary, the thought process is pretty simple. Emacs commands extensively use modifier keys, with the most common modifier key being Control. Control is in a relatively awkward place on the keyboard -- more awkward than Alt. Caps Lock is in an easy-to-press place on the keyboard, and most people never use it. So swapping Control with Caps Lock is a big net gain.  Here's a small discussion about switching them in Windows, if you find yourself convinced and possibly wanting to switch them when Emacs is open. The solution isn't perfect, but c'est la vie.  As someone who's recommended the built-in Emacs tutorial before, can you go into more detail about what you didn't like about it, and why the vim tutorial was better? (Also, was the vim tutorial you used ""vimtutor""? That and the Emacs tutorial seem very similar to me.) By saying it's not ""interactive"", do you mean that it doesn't have messages saying ""that's right, you pressed C-v properly""? Certainly it's interactive in that you're interacting with text, doing what it tells you to do."
emacs,38j71d,ReneFroger,1 point,Thu Jun 4 20:38:04 2015 UTC,"Believe me, it's not arbitrary.  I always thought there was an early lisp machine keyboard design that influenced this, but apparently there's not.   Sun keyboards had the control key positioned here: http://xahlee.info/kbd/i/kb/sun_keyboard_left.jpg  But by the time they came along Emacs was well established.  Anyway, it's advice from an emacs user. Take it or leave it. I can't stand machines that don't have the keys swapped out now. It's so hard to get my pinky down to the bottom row..."
emacs,38j71d,__baxx__,1 point,Fri Jun 5 17:39:38 2015 UTC,"That's just, like, your opinion, man ;)  I usually press Ctrl with the knuckle of my little finger (http://quadruple-a.com/keys/ctrl.jpg) - I just curl it, then put it on the key. For Ctrl+Shift I press both with the pad (http://quadruple-a.com/keys/ctrlshift.jpg)... now I'm less sure that this is an ergonomically approved manoeuvre. But I've been doing both for nine years now, and my little finger still works.  (For Super (the Windows key) I use the knuckle of my ring finger, and for Alt I use my thumb. I don't have any C-M-S-s combinations, but I have a few C-M-S, and they're pretty easy to press.)"
emacs,38j71d,Ryckes,7,Fri Jun 5 00:36:21 2015 UTC,"I tried the tutorial that comes with it, and I have to say, it is very awful.   TBH I haven't really liked much of the Emacs docs, I personally preferred the VIm ones, I know it's not official VIm documentation but I'm yet to find something for Emacs that's anywhere near Steve Loshes Learn Vim Script the Hard Way.    I'm not sure how open you are to using things that aren't strictly vanilla Emacs, but I've been using Spacemacs and think its a pretty decent starting point.   For example, it left me ignorant to how to manage files, forced to look at the duplicate save files through the file system of my OS.   Not too sure what you mean, like using the eShell or something? (what system are you on?)   What I'd like to be able to do is to use Emacs as as an editor text that contains links to other pieces of text, and which contains formatting such as bold, italics, and coloration.   I'm not sure what you mean by this either, like open multiple files at once? Manage multiple buffers and such?  The formatting that you're after will probably be handled by the Mode and the syntax highlighting. Eg I'm writing this in Markdown mode, so if I do this I can see it's italic, if I was to do that in Python mode it wouldn't make the font italic though.   I'd also like to be able to customize my own hotkeys and write my own text manipulation functions without leaving the editor.   Afaik that's one of the 'things' emacs is meant to be a champ at, I haven't learnt any eLisp yet though. If you want to do any of this kind of thing eLisp seems to be the thing to learn.    And, I'd like to be able to use it as a Python IDE.   Cool, though when you say IDE what are you actually after? I use it with Python though I tend to just have a split with the Py file in one buffer and the REPL in the other. You can run the file that you're working on into the REPL and stuff nicely. It also has error checking and all that jazz, I'm not sure that its as extensive as something like PyCharm though (I've never used that).  Every resource that I've tried seems to be more advanced than what I need at this point; I simply would like to start from the beginning.   What is Emacs, and what do I do in order to set it up to do the stuff that I want?   Using things such as Spacemacs seems to be a bit of a back and forth in the community with some advocating it and others saying one should start completely vanilla and (seemingly) design ones own editor functionality. I've been using it and feel its a really good starting point for Emacs as there's a decent (sane) set of defaults ready to go.  Although you're asking to start from the beginning, so maybe you want to go through everything from scratch idk."
emacs,38j71d,kaushalmodi,5,Thu Jun 4 16:19:56 2015 UTC,"TBH I haven't really liked much of the Emacs docs, I personally preferred the VIm ones, I know it's not official VIm documentation but I'm yet to find something for Emacs that's anywhere near Steve Loshes Learn Vim Script the Hard Way.   For learning Emacs, http://david.rothlis.net/emacs/howtolearn.html seems pretty good. Personally, I used the built-in Emacs tutorial. I also can't emphasize enough that Emacs has by far the best on-line help system of any program I know of. What do I mean by on-line? I don't mean on the Internet, I mean that within Emacs, in any buffer in any mode, you can get help for anything you need without leaving the editor. C-h C-k will prompt for a keystroke and tell you what command, if any, is bound to it, show documentation for that command, and offer links to its definition. C-h v will prompt for a variable name (often pre-filled with the variable you're interested in, like magic) and show the documentation for it, along with links to the definition. The same goes for C-h f (function/command documentation), C-h m (modes active in the current buffer), and a whole bunch others all listed under C-h C-h.  That feature is singularly responsible for bringing me back from the allure of vim and modal editing time and time again; by comparison, vim's :h help system and remembering what you have to quote and what not and what prefixes you have to shove before things is a joke.  As for learning Emacs Lisp (which would be equivalent to learning Vimscript) I agree, there isn't a very good ""getting started"" guide to learning the language and the included packages. But if you already know Scheme or Common Lisp or Clojure, much of it will be familiar to you."
emacs,38j71d,aerique,3,Thu Jun 4 21:44:38 2015 UTC,"For learning Emacs, http://david.rothlis.net/emacs/howtolearn.html seems pretty good.   Cheers for the link! I've been using Spacemacs since 11th of May from VIm (bit o backstory there...)   Personally, I used the built-in Emacs tutorial. I also can't emphasize enough that Emacs has by far the best on-line help system of any program I know of....   Yes it does seem to be pretty decent, not that the VIm docs are bad. In spacemacs there's something called the 'guide key' which i have to say is a really cool feature. I think that 'bumbling' around is more of a viable option than it was in VIm, which is a good thing. I keep forgetting about the describe key / function short cuts you're right to point them out.    That feature is singularly responsible for bringing me back from the allure of vim and modal editing time and time again; by comparison, vim's :h help system and remembering what you have to quote and what not and what prefixes you have to shove before things is a joke.   You can grep vim's help and what not, they really aren't bad help docs. Cue someone saying 'oh yeah how do i get help on blur when merr and I'm in hur dur', to which the answer is idk. I'd choose modal editing and Google over vanilla emacs and it's help though.   As for learning Emacs Lisp (which would be equivalent to learning Vimscript) I agree, there isn't a very good ""getting started"" guide to learning the language and the included packages. But if you already know Scheme or Common Lisp or Clojure, much of it will be familiar to you.   Scheme nope, Common Lisp nope, Clojure nope. I know none of these ;)"
emacs,38j71d,kaushalmodi,2,Thu Jun 4 22:21:45 2015 UTC,"You're saying you're looking for an Elisp alternative for Steve Losh's guides on Learning Vimscript the hard way, maybe this could be a good alternative? It's more concise than the bloated Emacs manual."
emacs,38j71d,ajsteven130,1 point,Thu Jun 4 21:28:45 2015 UTC,"ah nice one, didn't realise that tuhdo had made this :)  I'll have a read through, thanks"
emacs,38j71d,Denommus,3,Thu Jun 4 21:40:02 2015 UTC,"If I had to start again, I'd try to Emacs as much as possible for any text editing task, and related. When you feel confident, if you like it, you can customize you way around the editor (I want to do THAT with THIS key(s)) and you can start using it for more creative tasks like your agenda (org-mode), your email (I like mu4e, gnus is very popular and is also used as news aggregator), add extra packages from package-list-packages, etc.  For the Python thing I can't help, I use it as it is for Python (with Yasnippet for custom snippets), and I heavily customized it for Java and web (PHP, CSS/SASS, JavaScript, HTML...).  org-mode is also the way to go (IMHO) for text formatting if you are the only one who is going to work with those files (if you are in a team you should all agree on a file format), but I don't about the links to other pieces of text part.  Hope it helped."
emacs,38j71d,__baxx__,3,Thu Jun 4 18:15:04 2015 UTC,"I am one of those few who enthusiastically rebound a bunch of default bindings.. and then about a year into using emacs, started reverting many (almost all of those) back to the original bindings.   Don't do that. Once you starting using emacs regularly, the original bindings will start making sense.  Mistakes I made when making custom bindings:   Didn't realize that some of them will conflict with very useful bindings in modes like org-modeExample: C-c C-d Unbound important keys that I thought I'll never use (because either I didn't care if it was already bound to something else or I didn't understand the awesomeness of the original command) Eg: C-x h"
emacs,38j71d,camsaul,1 point,Thu Jun 4 21:04:46 2015 UTC,"I somewhat disagree. The default simple keybindings (C-a, C-e, etc.) are okayish, mostly because they're used in bash, readline and OSX but the more complex chords are simply awful. There's bound to be some kind of command you'll (want to) use regularly hidden behind some ""C-x r b"" invocation. You want to rebind that to something simpler.  Worse, by not rebinding you'll stop using potentially useful commands because they're such a drudge to execute when hidden behind a complex chord."
emacs,38j71d,Denommus,1 point,Fri Jun 5 09:34:45 2015 UTC,"I am not against rebinding at a later stage when one knows what exactly they are doing. But I am cautioning new emacs users to not do the rebinding when they are still learning emacs and don't understand the full gravity of the rebinding they are doing.   And if they are using the inbuilt emacs tutorial (C-h t) (and I think that they should) and if they already rebound a bunch of keys, then the tutorial will be less useful. Because then you will see a note at the top of the tutorial that certain bindings have been changed from the default and such bindings will be highlighted (I think they show up in the warning face).   I don't use bookmarking a lot (related to the C-x r b binding); I believe that's something you would need to train yourself to bring into the routine workflow. And it's on my long list to start using along with abbrev, skeleton and other things.   But I do use these rectangle bindings almost daily: C-x r k, c, M-w, y, t. They, as I mentioned earlier, now just make more sense to me: killing (cutting), clearing, M-w (default binding for copying), yanking, text. The initial r in C-x r could stand for register or rectangle.   Now the guide-key package has a very useful feature which highlights these two families of keys which are living under the same prefix C-x r using different colors. So from a quick glance you can search for keys related to rectangles or registers. And once they are in your workflow, the keys will flow instinctively. So I wouldn't rebind C-x or C-x r in the early stages of learning."
emacs,38j71d,tuhdo,3,Fri Jun 5 11:13:13 2015 UTC,Here's a resource that outlines how to use emacs:  http://sachachua.com/blog/2013/05/how-to-learn-emacs-a-hand-drawn-one-pager-for-beginners/
emacs,38j71d,vermiculus,2,Fri Jun 5 14:46:39 2015 UTC,Read the Emacs Lisp manual and the org mode manual.
emacs,38j71d,thang1thang2,2,Thu Jun 4 16:19:54 2015 UTC,Read the Emacs Lisp manual   isn't that about 1000 pages long?
emacs,38j71d,vermiculus,1 point,Thu Jun 4 17:17:47 2015 UTC,Emacs   The Emacs Lisp manual is probably not a good starting point for learning Emacs ;)
emacs,38j71d,thang1thang2,1 point,Thu Jun 4 17:45:29 2015 UTC,But what he wants is not basic.
emacs,38j71d,vermiculus,2,Thu Jun 4 19:17:04 2015 UTC,"If you want the tutorial to make sense, the first step is to swap Caps Lock and Control. Otherwise, it hurts your wrist and editing seems inefficient every time you bend your wrist."
emacs,38j71d,cmputrnx,1 point,Thu Jun 4 18:40:21 2015 UTC,"Is there a way to do this only within Emacs? When I'm editing in my browser, I prefer those keys where they currently are."
emacs,38j71d,bagofries,1 point,Thu Jun 4 19:46:02 2015 UTC,"nope, control is a modifier key on your keyboard. it's interpreted by the OS directly. that is, when emacs receives a control character, it's not receiving Control + S, it's receiving ^S (in the traditional representation). Totally different byte.  When I swapped out my keys, it was a hard switch at first. I'll admit that much. Sometimes, it still gives me a 'gotcha', but it's worth it for the pain that my hands are not in.  Example of gotcha: using OS X, C-a and C-e behave as they should whichever text field you're using. This made me use C-a and C-e more and frankly, it's wonderful. But I got used to it a little too much -- for example, RES intercepts C-e to open the full-screen editor.  The only danger in swapping out your control key is getting too used to the change."
emacs,38j71d,ihatecatsandpeople,2,Thu Jun 4 22:43:49 2015 UTC,You can disable the res feature if you want. I disabled pretty much every shortcut in res because I like consistent behavior more and I never used them anyway.
emacs,38j71d,tuhdo,2,Fri Jun 5 07:25:49 2015 UTC,How!?
emacs,38j71d,lawlist,2,Fri Jun 5 11:28:06 2015 UTC,"The settings module thing. It'll be the cog in the upper right corner of the page, by your username"
emacs,38j71d,Imxset21,2,Fri Jun 5 14:58:56 2015 UTC,You are my new favorite person. I don't know how I've never seen that. I've been using RES for years...
emacs,38j71d,redguardtoo,2,Fri Jun 5 15:32:28 2015 UTC,"A major part of the Emacs workflow (IMO) is the new keystrokes. Yes, they take a minute to get used to. But once you do, you'll be wondering why you can't Ctrl+P and Ctrl+N in your web browser, rich text editor, and file explorer.   By remapping these keystrokes, you're removing a large chunk of the ""experience"", so it might be better to stick with another text editor. Not to mention that a lot of Emacs users won't be able to help you because they won't be able to get around.  My advice: give the vanilla keybindings a chance, I think you'll find that you grow to love them after not too long. If you still hate 'em, try Vim. If you hate Vim, then keyboard-only (primarily) text editors may not be for you.  Just my opinion. Hope it goes well for you."
emacs,38j71d,cbrachyrhynchos,2,Thu Jun 4 21:40:03 2015 UTC,"I tried the tutorial that comes with it, and I have to say, it is very awful. Aside from the fact that it isn't interactive,   It (meaning, the built-in tutorial as started from typing C-h t (press Control+h, release, press+ t) most certainly is interactive! Every line that starts with >> instructs you to enter some command or keystrokes, which interacts with the current buffer and/or window. Why do you say the tutorial isn't interactive?"
emacs,38j71d,ReneFroger,2,Thu Jun 4 21:47:03 2015 UTC,I started here (Xah Lee's emacs tutorial).
emacs,38j71d,TotesMessenger,1 point,Fri Jun 5 00:45:21 2015 UTC,"at my college they wanted us to try and use emacs for java projects and compiling, but I ended up using eclipse because I believe for java an IDE is way better, and eclipse auto-compiles everything and just makes life better.  emacs is really great for everything else, I am going to be learning and working with C++ and C# soon and I plan on using emacs to do it  i'd also recommend searching online for a customized-layout that suits your preferences e.g. a theme or something just to make your overall experience with it better...  personally i dont see a need for an IDE for something like c++ or c# so i'd recommend you stick with emacs and try and learn it since you can split your windows horizontally or vertically to preferance and compile in that second window  try C-x C-f ~/.emacs and search for .emacs configurations, and for customization you can type M-x customize  if you want i can give you my entire .emacs config but it has my custom keybindings so if you've already learned the default ones its probably useless to you"
emacs,38k1j5,nautola,3,Thu Jun 4 19:00:40 2015 UTC,"If you want to use it with multiple programming languages smartparens is your best bet. I've got both paredit and smartparens installed. Paredit/paxedit for lisp languages and smartparens for the rest. I do know the feeling of frustration with smartparens. There is a lot you can tweak though so there is a big chance you can make it work the way you want to. Just takes some time.  I mostly use Emacs for Clojure development and found paredit the most reliable. Tried smartparens multiple times (although it's been a while) and ran into edge cases / bugs regularly. The developer is very active though and things might have been fixed by now, but for lisp languages I haven't seen anything that smartparens offers over paredit. So I see no reason to change for now.  For other languages I wouldn't even consider paredit. It's just not meant for it."
emacs,38k1j5,otijhuis,3,Thu Jun 4 19:51:40 2015 UTC,"I wanted something lightweight and unobtrusive too, so I wrote corral. It's not as powerful as other packages, but it should be the most efficient for its specific use case. Using it with electric-pair-mode is all I need in every language I've used."
emacs,38k1j5,nivekuil,2,Fri Jun 5 03:45:05 2015 UTC,"i use paredit. but one of these days, i swear, i'll check out smartparens.  any day now."
emacs,38k1j5,xoo-,1 point,Fri Jun 5 01:00:29 2015 UTC,Do you use paredit with non-lisp languages?   How do you add characters to the list of things to be matched only for specific languages? ' doesn't get matched in javascript.
emacs,38k1j5,xoo-,1 point,Fri Jun 5 04:46:30 2015 UTC,"i use autopair for the rest. but the author of autopair is recommending (see https://github.com/capitaomorte/autopair) electric-pair-mode if you use emacs > 24.  it comes with, so that's a plus.   that too one of these days i'll get on."
emacs,38k1j5,theldoria,2,Fri Jun 5 12:54:11 2015 UTC,"I don't use any auto-code functionality at all. This also includes parens tools.  Why?  Because at first they seem to be useful if you write new code, but when it comes to code refacroring more often than not I find myself struggling with these tools as they think I want to introduce a construct that already exists."
emacs,38k1j5,tuhdo,1 point,Fri Jun 5 07:54:57 2015 UTC,I'm curious. What kind of code refactoring was you doing that these tools get in the way?
emacs,38k1j5,theldoria,1 point,Fri Jun 5 08:41:01 2015 UTC,"E.g. sit at a line that triggers an auto-inserter and hit space or enter, becyuse you want to insert a new line or maybe change an exspression. Then the insterter thinks you want a new construct and bilds it four you. Now you have two and you have to undo that.  Same with parens automatics, they often insert the second parent where I dont want/need it. The only expection from that for me is when I marked the area where I want parens/quotes around.  Even quote sing automation tools are not always what I want. Somethimes the correctly escape them, sometimes I just want to split the quote. On other occasions I simply want one quote, not two of them.  Saying that, all these helper are fine with new written code, but I formyself stick with writing it by hand, because I am not slower doing so. Only tool I really need is paren matching and navigation them."
emacs,38k1j5,xoo-,1 point,Fri Jun 5 10:45:27 2015 UTC,"i agree.   i think it's because these tools work, say 90% of the time, so you always have to be on the lookout for potential failure - and that is too tiring."
emacs,38k1j5,nandryshak,1 point,Fri Jun 5 15:35:37 2015 UTC,"Smartparens is the best. Just turn off everything else, and it just works."
emacs,38k1j5,instant_sunshine,1 point,Thu Jun 4 22:53:45 2015 UTC,It fucks up with yassnippets.  That's kind of a requirement for me.
emacs,38k1j5,tuhdo,1 point,Thu Jun 4 23:03:56 2015 UTC,I use it with Yasnippet and have never had a problem.  What does it fuck up?
emacs,38k1j5,camsaul,1 point,Thu Jun 4 23:16:33 2015 UTC,"I have a snippet for a js function:   function $1($2) {   $0 }   and when I expand that with smartparens enabled, I get   function ()) {  }   I tried disabling a number of different things.  It is most certainly smartparens."
emacs,38k1j5,instant_sunshine,3,Fri Jun 5 03:34:15 2015 UTC,You can temporary disable smartparens why yas expands it snippets and re-enable after yas finishes:  (add-hook 'yas-before-expand-snippet-hook (lambda () (smartparens-mode -1))) (add-hook 'yas-after-exit-snippet-hook (lambda () (smartparens-mode 1)))   I opened an issue here but seems like it still hasn't been fixed.
emacs,38k1j5,nandryshak,1 point,Fri Jun 5 08:43:00 2015 UTC,corral   You could probably just do  (add-hook 'yas-before-expand-snippet-hook #'smartparens-mode) (add-hook 'yas-after-exit-snippet-hook #'smartparens-mode)   Since calling it without any args will just toggle it
emacs,38k1j5,peter-salazar,1 point,Fri Jun 5 21:45:40 2015 UTC,"I'm traveling at the moment, I will have a look at this in more detail soon though."
emacs,38k1j5,nandryshak,1 point,Fri Jun 5 03:52:31 2015 UTC,I also use it with yasnippet and it works fine. I don't have any special configuration for either packages. I use the default smartparens-config and no configuration for yasnippet at all except the trigger key.
emacs,38k1j5,Starlight100,1 point,Thu Jun 4 23:21:12 2015 UTC,What's are the differences between smartparens and electric-pair?
emacs,38k1j5,skillet-thief,2,Fri Jun 5 15:27:41 2015 UTC,Smartparens is a superset of both paredit and electric pair. They have a pretty good wiki on Github.
emacs,38k1j5,Taikal,1 point,Fri Jun 5 15:33:31 2015 UTC,"I don't find advanced paren wrangling useful in normal lanugages.  I use electric-pair for C++/C#/Javascript/SQL.  I use Lispy for lisp. Not as well known since it's new. The single key commands are nice. You can set key-bind options to make Lispy emulate paredit, or use the real paredit without conflict."
emacs,38k1j5,ReneFroger,1 point,Fri Jun 5 02:19:26 2015 UTC,"For lisps, paredit seems perfect to me. smartparens can be nice for LaTeX and languages with C-like syntax."
emacs,38m4cp,agumonkey,3,Fri Jun 5 02:43:35 2015 UTC,That's the first time I've seen an Emacs Lisp project that has an explicit goal to reach a certain number of contributors.  Entices me to help out.
emacs,38m4cp,eric-plutono,2,Fri Jun 5 02:55:05 2015 UTC,Interesting initiative indeed. Maybe other popular modes will copy the idea.
emacs,38m4cp,eric-plutono,2,Fri Jun 5 03:21:59 2015 UTC,"I'm half-tempted to try it with PHP Mode, heh."
emacs,38jirp,bpiel,5,Thu Jun 4 17:14:51 2015 UTC,"I'm CIDER's maintainer. Long story short - my new job leaves me with very little time to work on my OSS projects and this is the primary cause of the delay. There's nothing I can do about this. If people want for releases to happen more quickly they should contribute more to the project. I'd like to thank everyone who contributed to 0.9's development so far. A ton of people contributed a ton of awesome functionality, which kept momentum going.  Outside of this, ClojureScript has been causing us the most technical issues. A couple of changes there were really problematic for us and are the only reason 0.9 can't be released right away. This is the only showstopper issue right now https://github.com/clojure-emacs/cider/issues/1088  I'm hoping to release 0.9 in time for EuroClojure, but I can't make any promises."
emacs,38jirp,bozhidarb,2,Fri Jun 5 08:37:21 2015 UTC,Thanks for the precise answer! I'll look over that issue.  I don't think anyone can blame you for having a job that keeps you busy. I hope to one day find time in my life to make significant contributions to an OSS project.  PS I was at Conj 2014 in DC and enjoyed your talk. Thanks for making the trip.
emacs,38jirp,mnngfltg,2,Fri Jun 5 15:47:02 2015 UTC,"Thanks for your amazing work on CIDER, release or no."
emacs,38jirp,abo-abo,3,Fri Jun 5 22:41:45 2015 UTC,Why not just use CIDER from git? It's the obvious solution: you can get features immediately or you can update at your own pace.  You can also install modifications and send PRs.
emacs,38jirp,BruceConnor,1 point,Thu Jun 4 19:09:12 2015 UTC,"Because reasons. :-) I'm no authority on this, but it should be out very very soon."
emacs,38iu4v,dzikakulka,2,Thu Jun 4 14:36:00 2015 UTC,"I configured ECB to display on the left of my window only. If you want to show files in difference directories on screen, I suggest you use two Dired buffers of two different directories to the right of your current coding window.  If you want to quickly switch between source and header files in your project, you can use Projectile to quickly switch, even for projects with 50k files. See my Helm Projectile guide."
emacs,38iu4v,tuhdo,1 point,Thu Jun 4 15:26:59 2015 UTC,"Thanks, Projectile may be very useful!  For now I've set (ecb-show-sources-in-directories-buffer) for my current style since everything I use is in folders next to each other anyway. Will check out Helm Projectile when I'll have a while :)"
emacs,38in2d,jkudria,2,Thu Jun 4 13:46:19 2015 UTC,"you can customize the org-level-1, org-level-2, etc faces. They refer to the headings, they also have a font property, I'd say that if the buffer text works, just use inherit as font in these faces. But I'm not expert either."
emacs,38in2d,cestdiego,1 point,Thu Jun 4 19:43:42 2015 UTC,"That helped, thanks!"
emacs,38in2d,cestdiego,1 point,Thu Jun 4 21:41:57 2015 UTC,also if you want to customize any face just put the cursor on the thing you want to style and M-x (or SPC :) describe-face it should autocomplete the face at point.
emacs,38ilt6,furkanusta,2,Thu Jun 4 13:37:14 2015 UTC,Emacsclient is a tool that can be used to open files in an instance of emacs that has the 'emacs server' already running. That can be configured in your init script or M-x start-server.
emacs,38ilt6,zoglesby,1 point,Thu Jun 4 13:43:42 2015 UTC,"Sample  Emacs is already added in favorites. However, when I click to it it runs another instance of emacs, and thus it shows another icon in dock.  Also, when I launch emacsclient it uses another init file (I don't know where) but not ~/.emacs because emacsclient and emacs uses different themes."
emacs,38ilt6,instant_sunshine,2,Thu Jun 4 13:51:13 2015 UTC,"You can check Emacs init file for both.  Do C-h C-v user-init-file  Hopefully this will shed a bit more light on the matter.  Post the results for both (we'll assume that the Emacs instance is using ~/.emacs.d/init.el (or ~/.emacs))  Your emacsclient is most interesting.  I noticed you named it emacs-client to begin with, was that a typo?    It would also help if you ran M-x version in both to make sure they're the same version."
emacs,38ilt6,instant_sunshine,1 point,Thu Jun 4 15:22:23 2015 UTC,"No, It wasn't a typo because when I wrote emacs in gnome search there seems to be to different Emacs named Emacs and Emacs Client; so, I wrote it like that.  However, hopefully I've found the problem. My local hostname (emacs@dhcppc4) was different than my user name and apparently it caused to those two emacs to use different init files. I have changed my hostname and It is working now."
emacs,38gd2n,instant_sunshine,5,Thu Jun 4 00:57:59 2015 UTC,"I never understood that! as a beginner, I found emacs way more approachable and easier than vi..."
emacs,38gd2n,jmhimara,3,Thu Jun 4 14:33:31 2015 UTC,Is spacemacs the death star?
emacs,38gd2n,Sean1708,3,Thu Jun 4 07:49:05 2015 UTC,"It's an nth dimension brain augmentation.  With some other tweaks and nice layered configuration.  So basically Emacs, but with a nice layered configuration system, and some tweaks."
emacs,38gd2n,Tarmen,1 point,Thu Jun 4 08:11:31 2015 UTC,"One that stops you from breaking your hands, though :P  Trying it out coming from vim at the moment. I like a lot about it, especially the demon/client thing so starting becomes virtually  instantaneously. Really confused about the bindings, though, because even the spacemacs seem somewhat weird and long."
emacs,38gd2n,tuhdo,2,Thu Jun 4 15:57:04 2015 UTC,"You don't have to remember all though. Just remember the main one. That's why tool like guide-key and helm-descbinds exists. To use helm-desbinds, if you press some keys, but forgot the remainig keys, you can press C-h or ?, and Spacemacs gives you an interactive cheatsheet. For example, if you want to list all key bindings under SPC f, type SPC f ?.  The Spacemacs key bindings are easy to remember:   SPC is the leader key, hence the name Spacemacs. SPC f is a group for file commands. SPC f f prompts you to open files. SPC b is a group for buffer commands. SPC b b prompts you to open buffers. SPC s is a group for search commands. SPC s s prompts you to search current buffer. SPC p is a group for project related commands.  ... and so on.   SPC m, or equivalently, , groups commands of current major mode. It may take 3 keys to execute, but it's not that bad."
emacs,38gd2n,Tarmen,1 point,Fri Jun 5 09:00:22 2015 UTC,"I'm not sure about Spacemacs (I'm a long term Emacs user back from the 90s, so I have no Vim muscle memory)   I was always under the impression that evil, the vim engine used by Spacemacs, was pretty complete.  I think problems arise when you have a fairly complicated Vim setup with a lot of plugin.vim files and you have all that in your muscle memory.  There are a lot of Evil add on packages to ease this problem, so as long as you're fine to investigate, and the things you need have been converted, that's cool.  If they haven't, the best thing you can do is try to find similar Emacs packages and bind the commands into a key map.  Hydra.el makes this process much simpler than it would be with the base elisp commands.    I won't lie though, Emacs is an investment of work, but it's payoffs are well worth it.  https://github.com/abo-abo/hydra  Additional Note: use Guide-key (I think that's included with Spacemacs) anyway, just switch it on and things will be easier... You can add more prefixes to guide key too."
emacs,38gd2n,tuhdo,1 point,Thu Jun 4 23:13:01 2015 UTC,"Yeah, I think my problem is actually that guide key is included. Pretty much anything it can do is mapped to space so any action needs at least 3 keys and it feels impossible to remember what anything does, and that is only the additional layer of space macs and doesn't even touch emacs itself.  Probably just gonna try evil instead. In general I swapped between enough vim configurations that I can deal with the standard setup (minus a few horribly dumb ones like forcing you to save buffers if they are hidden). Some text objects like ia/aa for function arguments or ii/ai for indentation should be reasonably easy to do with evil features. And mapping stuff myself feels generally easier to remember.  Anyway, thanks for the hydra thing! Used something similar for vim for quite a while. At some point I mostly switched to trying for better keybindings so I didn't need as many repetitions but I guess you can never bring all emacs functionality in there without ridiculously long combinations."
emacs,38gd2n,jordonbiondo,2,Fri Jun 5 00:02:01 2015 UTC,"I'm someone who has been vocal (negatively) about Spacemacs   I don't dislike it, but I don't really think anyone should use Emacs with a starter kit exclusively.  I feel though, for the people that this would affect the most, a logical step is to try other things, and try to configure Emacs from scratch.  Something simpler like better-defaults is a nice way to go, get rid of some of the ugliness and then use Spacemacs as a guide for packages to install.  Hacking Emacs personally is the best way to get to grips with it.  That is after all, what Emacs was intended for."
emacs,38gd2n,__baxx__,3,Fri Jun 5 03:50:19 2015 UTC,"Spacemacs includes nicely preconfigured layers that you would waste hours configuring yourself. Recently I just add Python layer, and it just works. If I have to do this on myself for every new thing I want to add, it would waste more time than it should be.  Spacemacs does not shadow any default key binding. It only adds its own, so everything from Emacs manual still works.  Spacemacs is no longer a starter kit. It's now a shared .emacs.d."
emacs,38gd2n,ReneFroger,1 point,Fri Jun 5 08:53:27 2015 UTC,More like clone army troopers.
emacs,38hs24,curious-scribbler,1 point,Thu Jun 4 08:27:59 2015 UTC,I suspect you'll have to find (or build) an ob-fountain library and then enable it.
emacs,38hs24,ccharles,1 point,Thu Jun 4 11:35:30 2015 UTC,"If that's the case, then all this will have to wait till I learn how to do it.  Till then I'll work with lentic. Thanks"
emacs,38hs24,instant_sunshine,1 point,Thu Jun 4 12:17:35 2015 UTC,"It works. So with the above code, org does tangle all blocks to a fountain file.   Now I just have to figure out the sync part."
emacs,38hs24,instant_sunshine,1 point,Thu Jun 4 12:43:51 2015 UTC,"Obviously keeping the fountain files updated from org will be simple.  The other way however, far less easy.  What's the payoff? How much are you (or hoping to) editing the fountain files directly?"
emacs,38hs24,instant_sunshine,1 point,Thu Jun 4 23:30:33 2015 UTC,"When I open my fountain file, I'll only have the screenplay text. That helps in checking how scenes fit together and how the whole story flows and so on...   Now when I reading the script on my fountain file, I'd correct a typo, or add a line or delete two. Minor edits. If I had to go back to the org file, jumping two and fro makes things slower and once I am on org, I'll have a ton of text to sort through before I get to the required block.   I have attention issues, so I make sure that I have the least distraction possible."
emacs,38fcr4,janjiss,5,Wed Jun 3 21:05:09 2015 UTC,Dude… your modeline… it's not supposed to look like that.
emacs,38fcr4,TheBB,3,Wed Jun 3 21:44:09 2015 UTC,I had the same issues in my modeline when running spacemacs from the terminal.    Any suggestions?
emacs,38fcr4,localredhead,5,Wed Jun 3 22:20:45 2015 UTC,"You need to install and use a powerline patched font in your terminal. There are two versions of these, old ones and new ones, I'm not sure which one Spacemacs needs.  Or you just use the GUI version of emacs, trust me it is way better and has lots of fancy things the console version can't do."
emacs,38fcr4,trishume,4,Thu Jun 4 01:13:21 2015 UTC,First I had to remove the bin of stock emacs:  $ sudo rm /usr/bin/emacs And then link homebrew installed emacs:  $ sudo ln -s /usr/local/Cellar/emacs-mac/emacs-24.5-z-mac->5.7/bin/emacs /usr/bin/emacs That got me going. after typing:  $ emacs   This is not the way to do this. I think you might have a problem with homebrew. Did you add the /usr/local/bin directory to your path? It should be listed before /usr/bin too.
emacs,38fcr4,BearsDontStack,1 point,Wed Jun 3 23:25:40 2015 UTC,It's not really a problem to kill off the Emacs 22 default install on OSX.
emacs,38fcr4,instant_sunshine,2,Thu Jun 4 02:10:43 2015 UTC,"I have been using Spacemacs on OSX for some time now, its really great! The only issue i had/have is pasting. Even though i use the GUI version, sometimes i cannot paste to emacs from another app, like the browser. But sometimes i can, its really weird.  I think i have narrowed the problem down to the evil-modes key bindings and the kill-ring.  So my solution was to make a function that simply pastes from the OS, pbpaste, i bound it to C-x C-y and boom, it works every time."
emacs,38fcr4,gkunno,1 point,Thu Jun 4 05:05:42 2015 UTC,"I've been using Unix (mostly Linux) for 20+ years now and only recently installed a clipboard manager that syncs all the different clipboards. So stupid I didn't do this before, I can't imagine why I lived with that annoyance for so long."
emacs,38fcr4,aerique,2,Thu Jun 4 08:34:06 2015 UTC,"Honestly, I do not feel that there is anything missing at this point in terms of text manipulations   Not sure whether this is relating directly to text manipulations or not but a couple of things;   When recording macros one must use the literal ESC key (or C-[) else it will record the key sequence rather than the ESC instruction. This can be annoying as one gets used to using fd (or any reassignments) and has to remember that it cannot be used within a macro.  You can't use :iabbrev in a session, or :nnoremap, these ex commands seem to be off limits.     I'm using Spacemacs at the moment though, and have to say that it's very nice. The Gitter channel is active and extremely helpful too. I'm really grateful for the work that's gone into it."
emacs,38aioa,Vash265,4,Tue Jun 2 23:18:01 2015 UTC,You need to do some configuration with Irony to get it to complete.   See the documentation here: https://github.com/Sarcasm/irony-mode#compilation-database
emacs,38aioa,nandryshak,1 point,Tue Jun 2 23:22:22 2015 UTC,"Yeah, I followed those instructions and set up a clang complete file, but no luck."
emacs,38aioa,nandryshak,1 point,Tue Jun 2 23:34:12 2015 UTC,"I would try out some of the other methods. If you get one to work, then at least you know that Irony is working correctly, and you can go back and try getting the clang_complete method to work."
emacs,38aioa,nandryshak,1 point,Tue Jun 2 23:40:25 2015 UTC,"Can you post your complete Irony-related setup? All settings, and .clang_complete file. I just freshly installed Irony on one of my machines, added a .clang_complete file with one include line in it, and it worked fine.  The line was:  -I/usr/include/c++/5.1.0   Yours should be similar, perhaps a different version number."
emacs,38aioa,aport,1 point,Wed Jun 3 02:26:36 2015 UTC,"I switched to a compile_commands.json setup.  Here's one line from that file (they're all identical, save for the source file):  ""command"": ""-I/usr/include/c++/4.2.1/ -Iinclude -Ilib/libxml2 -Ilib -Isrc/commandLineArgs -g --std=c++11 -o obj/Debug/fileName.o -MF obj/Debug/fileName.d -c src/baseStructures/fileName.cpp"", ""directory"": ""/Users/userName/BitBucketRepository/Projects/proj"", ""file"": ""/Users/userName/BitBucketRepository/Projects/proj/src/baseStructures/fileName.cpp""   It's worth noting that the /usr/include/c++/4.2.1 appears to get stripped by irony, as it doesn't appear in the command when running M-x irony-cdb-menu.    I've done some fiddling with the config file, but:  (require 'company) (require 'irony) (require 'flycheck-irony)  (add-hook 'c++-mode-hook 'irony-mode) (add-hook 'c-mode-hook 'irony-mode) (add-hook 'objc-mode-hook 'irony-mode)  ;; replace the `completion-at-point' and `complete-symbol' bindings in ;; irony-mode's buffers by irony-mode's function (defun my-irony-mode-hook ()   (define-key irony-mode-map [remap completion-at-point]     'irony-completion-at-point-async)   (define-key irony-mode-map [remap complete-symbol]     'irony-completion-at-point-async))  (add-hook 'irony-mode-hook 'my-irony-mode-hook) (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)  (eval-after-load 'company   '(add-to-list 'company-backends 'company-irony)) ;; (optional) adds CC special commands to `company-begin-commands' in order to ;; trigger completion at interesting places, such as after scope operator ;;     std::| (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)  (eval-after-load 'flycheck   '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))   I also get the following erros in messages when trying to auto-complete:  error in process filter: irony-completion-at-point: Wrong type argument: sequencep, Assertion error in process filter: Wrong type argument: sequencep, Assertion"
emacs,38aioa,aport,1 point,Wed Jun 3 04:43:16 2015 UTC,"That's odd. All compile_commands.json files I have start off with the compiler:  ""command"": ""/usr/bin/arm-none-eabi-gcc  -DARM_MATH_CM4=true ...  That could be why the first bit is being stripped, in this case, it's your system lib include.  Are you using cmake to generate your compile commands?"
emacs,38aioa,yaschobob,1 point,Wed Jun 3 21:47:13 2015 UTC,"I used Bear.  That could very well be why it was stripping that off.  Hadn't thought about checking it.  (I'm pretty sure I didn't manually remove the compiler command?  Maybe I did and forgot, though...)"
emacs,38aioa,trezor2,1 point,Wed Jun 3 21:59:54 2015 UTC,There should be an irony-server log in /tmp that will spit out the command it sent to clang. It looks like you got this working with the clang_complete but if you wouldn't mind posting the output of the log I would appreciate it!
emacs,38aioa,hvis,1 point,Wed Jun 3 22:05:18 2015 UTC,"I don't see it.  I've got a few launch/launchd log directories, a KSOutOfProcess directory, and what looks to be something to do with an Adobe log.  No clang/irony logs, though =("
emacs,38aioa,trezor2,1 point,Wed Jun 3 22:10:55 2015 UTC,"Fixed it.  I switched back from the JSON file to a clang_complete file.  I specified full paths in the clang complete file for all of the includes, and used the c++ headers located under Xcode rather than /usr/include.  Here's a small sample:  -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/include/c++/4.2.1/ -I/Users/<username>/<proj>/include/ -I/Users/<username>/<proj>/include/** --std=c++11   Not sure what the problem with the JSON file was, but things (including flycheck-irony) seem to be operating well, now."
emacs,38aioa,hvis,-1,Wed Jun 3 21:47:03 2015 UTC,"Yeah, I've been told countless times by people here that Emacs tools can complete anything and everything and all the bugs were a figment of my imagination."
emacs,38aioa,trezor2,2,Tue Jun 2 23:37:36 2015 UTC,"Yeah, I've been told countless times by people here that Emacs tools can complete anything and everything    Except C and C++ because RMS hates the idea of having the AST exported from GCC, and you can't provide anything better than GCC provides for LLVM because that's a competing non-GNU project.  How many years have this been going on now? GNU seriously needs to get past this point, or Emacs will start getting (even more) stale compared to the competition."
emacs,38aioa,hvis,1 point,Wed Jun 3 17:36:59 2015 UTC,"Which competition is that? Vim has no out-of-the-box support for parsing any language.  And if we're talking third-party packages, they can use LLVM, in both editors."
emacs,38aioa,nandryshak,1 point,Wed Jun 3 18:19:39 2015 UTC,"But patches to provide better-than-nill LLDB integration for GUD has been rejected so far, or at least stalled by RMS ""until he can look into it"".  Which has been for better for of the year so far.  RMS doesn't understand modern programming needs (he doesn't understand inheritance-based OOP), and this is having real effects in him rejecting things which would be very useful in the real world."
emacs,38aioa,johnfredcee,1 point,Wed Jun 3 18:41:46 2015 UTC,"Do you have the bug number? Maybe you should bump it.  By the way, you might want to look into adding LLVM support to RealGUD (https://github.com/rocky/emacs-dbgr/) instead."
emacs,38aioa,hvis,1 point,Wed Jun 3 18:52:47 2015 UTC,I'm not sure I'd call it a bug-number...  http://www.reddit.com/r/linux/comments/2v441n/rms_rejects_lldb_support_for_emacs_there_is_a/
emacs,38aioa,johnfredcee,1 point,Wed Jun 3 19:10:47 2015 UTC,"Maybe it should be.  The whole thread is a lot of hot air. First, the current Emacs maintainer is Stefan Monnier, not RMS: http://lists.gnu.org/archive/html/emacs-devel/2015-02/msg00611.html  Second, the submitted patch suffers from a fatal organizational problem (we don't know who wrote it): http://lists.gnu.org/archive/html/emacs-devel/2015-02/msg00287.html"
emacs,38aioa,aport,1 point,Wed Jun 3 19:53:43 2015 UTC,"To be fair, most problems I've had with emacs has been a problem with osx doing something unexpected or differently than everyone else :/"
emacs,3871wl,12c27,10,Tue Jun 2 08:55:46 2015 UTC,"The command for the shortcut was ""emacs &""   The context in your shell where this command is executed doesn't treat ""&"" as meaning ""create an asynchronous process""."
emacs,3871wl,RobThorpe,4,Tue Jun 2 09:53:35 2015 UTC,"yup, that was the problem all along :)"
emacs,3871wl,DasEwigeLicht,2,Tue Jun 2 09:56:54 2015 UTC,Start a clean emacs via emacs -q. If the problem does not persist you need to start bisecting your config.
emacs,3871wl,yilmazhuseyin,0,Tue Jun 2 09:12:42 2015 UTC,I am not sure why this is happening. It might be because of a bug on your initialization script or a bug on one of the libraries you are using.  I would suggest to go to your init file and search for a function that creates buffer.  http://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Buffers.html
emacs,387638,curious-scribbler,2,Tue Jun 2 09:48:03 2015 UTC,"While you might have to do some elisp hacking to get the exact effect you want, the lentic package is probably a good place to start.  (Video demonstration here.)   It provides the plumbing to handle multiple views of one buffer with an automatic translation between them; the main example is literate programming where one view is the org file with source blocks and the other is the tangled source with the org text in comments.  I bet you could tweak that accordingly for Fountain without too much effort."
emacs,387638,RothiasVex,1 point,Tue Jun 2 09:58:57 2015 UTC,"Thanks for the link. I do have lentic, though I am yet to put it to use. I'll see how I can use it for this purpose."
emacs,387638,chrispoole,1 point,Tue Jun 2 10:42:42 2015 UTC,"Do you not just want to use org-babel to tangle the file? (I.e., extract the source code blocks.) That'd do it for all of them of course, though."
emacs,38435u,tuhdo,2,Mon Jun 1 18:34:41 2015 UTC,Thanks for sharing this! Keeps remembering me that I need to figure Projectile out yet.
emacs,38435u,ReneFroger,1 point,Tue Jun 2 07:24:17 2015 UTC,"It's really low effort to get it working for you - so much happens automagically.  I don't even do a great deal with it, but just having helm-projectile-switch-project bound on a handy key (I use a chord) makes it trivial to jump to any project I have (a list which projectile creates and maintains without any input on my part, based on source control, as I visit them).  Personally I like to jump into a project on the vc (usually magit) page - so the customization:  '(projectile-switch-project-action (quote projectile-vc))   Means that when I do switch to the project, my starting point is the vc view.  Then helm-projectile-find-file is available for you too.  - of course you can do all this without helm too, but the two together mesh well."
emacs,38435u,fantastipants,1 point,Tue Jun 2 13:59:36 2015 UTC,"As /u/fantastipants suggested, you should give Helm Projectile a try. Really worth it. But remember to (setq projectile-indexing-method 'alien), otherwise it takes forever on Windows."
emacs,38435u,excitedaboutemacs,1 point,Tue Jun 2 15:21:29 2015 UTC,C-c i doesnt work for me. Is there some setting I need to set or unset?
emacs,38435u,excitedaboutemacs,2,Tue Jun 2 15:02:46 2015 UTC,"Are you using Helm Projectile or just Projectile with Helm completion system? If you haven't installed helm-projectile, you should install it and try again."
emacs,38435u,tmtxt,2,Tue Jun 2 15:20:25 2015 UTC,"Ah, I was using helm-find-file instead. Thanks! This is a pretty cool feature, thanks for demonstrating on your post."
emacs,38435u,peter-salazar,1 point,Tue Jun 2 16:16:27 2015 UTC,"cool! how about inserting path relative to project root, not the current file?"
emacs,383cqf,instant_sunshine,6,Mon Jun 1 15:43:58 2015 UTC,"I know this is just a demonstration, but in case anyone is interested in this functionality.. this is more or less already built in with occur.  In an occur buffer, type C-c C-f and then navigate by line."
emacs,383cqf,rson,3,Mon Jun 1 17:08:55 2015 UTC,This blog post by @mickeyp talks about C-c C-f and few other occur tips.
emacs,383cqf,kaushalmodi,1 point,Tue Jun 2 10:26:28 2015 UTC,"Nice, I didn't know that.  Funny/strange that it's called ""Next-Error-Follow"" mode ...  Personally I really need the recentering part I added, I'm not much cop at tracking a jumping cursor.  I would've been fine with just hitting enter (as I would usually do) on the occur to open the target file."
emacs,383cqf,rson,3,Mon Jun 1 17:20:24 2015 UTC,"Yeah I just happened across it myself as I could have sworn I'd seen this functionality somewhere else.  It turns out that next-error-follow-minor-mode is used elsewhere as well.  The docs for that mode specifically call out occur, compilation, grep, and diff buffers.  Interesting stuff."
emacs,383cqf,bliow,1 point,Mon Jun 1 19:01:59 2015 UTC,So handy that C-c C-f works in Ag mode (etc.)
emacs,383cqf,bliow,1 point,Tue Jun 2 05:15:47 2015 UTC,"The only thing I don't like about that: there's no highlight. By contrast, some modes (ag.el comes to mind) have an ephemeral highlight when you navigate over matches.  Maybe this is solvable with some advice."
emacs,383cqf,ReneFroger,1 point,Tue Jun 2 03:56:42 2015 UTC,"But, there is a highlight... You will need hl-line I think."
emacs,383cqf,ReneFroger,1 point,Tue Jun 2 05:16:48 2015 UTC,I'm talking about something else--an ephemeral highlight that flashes to indicate the match. See what ag.el does.
emacs,383cqf,excitedaboutemacs,1 point,Tue Jun 2 05:56:59 2015 UTC,"I know what Ag.el does, I was just answering your opening sentence.    there's no highlight."
emacs,383cqf,excitedaboutemacs,1 point,Tue Jun 2 10:29:46 2015 UTC,"Thanks for sharing, instant_sunshine, looks nice. If I might ask, what is the difference with Helm Swoop?"
emacs,382nc8,dr_theopolis,2,Mon Jun 1 12:25:26 2015 UTC,Awesome - thank you!
emacs,384jz9,oskwish,4,Mon Jun 1 20:23:37 2015 UTC,It should work by default. To make sure you have the external dependencies installed do:  M-x flycheck-verify-setup   Note that flycheck has issues with ZSH and doesn't support it. You can work around it though.  For scss you should make sure scss and scss-lint are installed and accessible via the Emacs exec-path (just try doing M-x async-shell-command and see what output you get.)  You should have enough info to get you going now.
emacs,381h6h,nautola,4,Mon Jun 1 04:05:12 2015 UTC,You probably want this: http://apple.stackexchange.com/questions/22785/how-do-i-disable-the-command-control-d-word-definition-keyboard-shortcut-in-os-x
emacs,381h6h,zenspider,2,Mon Jun 1 22:26:00 2015 UTC,"You most likely have OSX trumping your Emacs key bindings.  Go into System Preferences, then Keyboard, then Keyboard Shortcuts, and then check every single listing in every group and see what keyboard shortcuts are assigned in OSX -- disable or change as needed.  If that isn't it, then check again in Emacs using C-h k C-M-d and make sure it isn't registering anything -- it could be assigned to something that just doesn't appear to be doing something."
emacs,381h6h,lawlist,1 point,Mon Jun 1 04:22:57 2015 UTC,"C-m-d on OS X is default ""Turn Dock Hiding On/Off"", you can find it in ""Preferences/KeyBoard/Shortcuts/Launchpad & Dock"""
emacs,381h6h,goofansu,1 point,Mon Jun 1 09:41:14 2015 UTC,I think that you're confusing Control (⌃) and Command (⌘).
emacs,381h6h,pyr3,1 point,Mon Jun 1 12:00:25 2015 UTC,"Oh, my fault. C-m-d is dictionary by default."
emacs,37xyyx,dkms0t,8,Sun May 31 09:44:21 2015 UTC,"I think one nifty feature I got for free when using helm-M-x is that it shows the key bindings of the commands too, very convenient."
emacs,37xyyx,bauta-steen,3,Sun May 31 10:42:39 2015 UTC,"You can also read command's doc while using helm-M-x, it's also very convenient, I think."
emacs,37xyyx,xuchunyang,1 point,Sun May 31 15:37:25 2015 UTC,how?
emacs,37xyyx,excitedaboutemacs,2,Mon Jun 1 16:06:27 2015 UTC,Type C-j or C-z (helm-execute-persistent-action) to toggle displaying documentation for selected command. (see also https://github.com/emacs-helm/helm/wiki#9-helm-m-x)
emacs,37xyyx,xuchunyang,1 point,Mon Jun 1 16:14:36 2015 UTC,Thanks
emacs,37xyyx,excitedaboutemacs,1 point,Mon Jun 1 21:19:46 2015 UTC,Since yesterday I've been trying to add that functionality to smex (I'm not a fan of helm-M-x) without much success.  I got it working but in a such inefficient way that it makes emacs crash pretty fast.
emacs,37xyyx,MonsieurBanana,3,Sun May 31 13:58:58 2015 UTC,"What Emacs version are you using on what OS? If you are using OS X, you should upgrade to Emacs 24.5 because 24.4 crashes frequently with Helm."
emacs,37xyyx,tuhdo,1 point,Sun May 31 15:29:51 2015 UTC,Doesn't regular M-x do this? It does on my system.
emacs,37xyyx,aport,10,Tue Jun 2 03:57:22 2015 UTC,I think you'll find that smartparens is significantly better than Corral.
emacs,37xyyx,instant_sunshine,3,Sun May 31 11:07:15 2015 UTC,"Corral seems to be a emacs styled version of the surround plugin for vim. Surround solves a different problem in vim than smartparens. Surround adds ""surround"" as a text object to the vim editing ""language"". This allows me to do things like change the surrounding parenthesis to brackets, or surround a word/sentence/paragraph with {}, or delete the surrounding <, etc.  Basically, the surround plugin helps me with refactoring much more than with originally writing the code. Smartparens helps with originally writing the code by taking care of the closing delimiters; but it didn't seem to have a whole lot of refactoring actions (from what I saw), which is where corral/surround shine."
emacs,37xyyx,thang1thang2,2,Sun May 31 22:18:59 2015 UTC,"You can surround anything with smartparens by selecting a region, then enter any punctuation character like (, [, ""... to wrap around the region. You can quickly select a symbol at point with C-] to wrap around; or you can use expand-region to incrementally select things at point. To replace existing pair with new pair, you can use sp-rewrap-sexp.  Though, for wrap around a symbol without moving point, I found corral much faster than any other alternative, even vim surround. Basically I bound C-9/0 to corral-parentheses-backward/forward and only need 2 key presses, whether other solutions require 4 or more key presses."
emacs,37xyyx,tuhdo,1 point,Mon Jun 1 02:55:35 2015 UTC,"Ah thanks. Nice to know you can surround text with smartparens. The ""without moving point"" is kind of important to me though, since it makes the most sense to me.   I type at over 100wpm. The speed difference between coral's c-0 and vim's ysiw is a fraction of a second, but vim's surround plug in behavior means I can type ""ysi""  and then w for word, p for paragraph, s for sentence, etc. It's a lot more flexibility in a way j find easier to memorize (personally), so the fraction of a second speed difference ends up not muttering to me.   Different strokes for different folks I guess. Thanks for the clarification on smartparens though."
emacs,37xyyx,thang1thang2,2,Mon Jun 1 08:25:45 2015 UTC,"You can get the wrap-region behavior with the built-in electric-pair-mode too.   Surrounding paragraphs/sentences doesn't seem that practical when writing code. For my use cases, it's more common to want to surround a few words in the middle of a line, which is mostly what corral is designed for. It also lets you control what punctuation gets surrounded, so *ptr could be *(ptr) or (*ptr)."
emacs,37xyyx,nivekuil,1 point,Mon Jun 1 19:39:08 2015 UTC,"Smartparens has a lot more covered than that.  Probably a good idea to go checkout the wiki it's actually a huge set of features, which is a superset of a lot of other packages."
emacs,37xyyx,instant_sunshine,2,Mon Jun 1 07:23:33 2015 UTC,"Is that for Lisp only? Or for thing other than Lisp, for things other than parens? Like [] and {} which corral does."
emacs,37xyyx,jplindstrom,2,Sun May 31 16:56:52 2015 UTC,Smartparens does that.
emacs,37xyyx,jmw74,1 point,Sun May 31 21:43:49 2015 UTC,"Check out the wiki.  It covers corral's features and adds a lot more.  It's essentially a superset of paredit, auto pair, vim surround"
emacs,37xyyx,instant_sunshine,1 point,Mon Jun 1 07:25:13 2015 UTC,"Or lispy, by the same author as avy."
emacs,37xyyx,aptmnt_,1 point,Sun May 31 15:53:20 2015 UTC,lispy is just for lisp though.  Smartparens is more powerful.  Just need a nap de set of bindings ... Via a hydra
emacs,37xyyx,instant_sunshine,1 point,Mon Jun 1 07:26:04 2015 UTC,"lispy is advertised for LISP, but it should work in any mode that recognizes (), [] and {} as pairs. Basically, if C-M-n works for a pair, a lot of lispy should work as well.  Just bind lispy-slurp and lispy-barf to whatever you want for C++/JavaScript/LaTeX/whatever.  lispy-parens/-braces/-brackets don't care about the major-mode at all, they will insert pairs/wrap sexps/wrap regions."
emacs,37xyyx,abo-abo,1 point,Mon Jun 1 09:06:50 2015 UTC,Have a look at Smartparens hybrid sexp   That is what it means to work with more than just lisp.
emacs,37xyyx,instant_sunshine,1 point,Mon Jun 1 09:54:18 2015 UTC,"Hybrid sexp seems to lack predictability. Killing might be fine, but I wouldn't risk it with other operations."
emacs,37xyyx,abo-abo,1 point,Mon Jun 1 11:16:56 2015 UTC,"We live in the wonderful world of undo.  You can also improve the definition of a hybrid.  Edit: Even so, you're right, I probably wouldn't want to use them in a macro. (Then I'd not need them though?)"
emacs,37xyyx,instant_sunshine,1 point,Mon Jun 1 11:25:28 2015 UTC,"I use smartparens too actually, but corral is usually just faster. Haven't tried lispy yet (abo has a lot of good stuff!) but I don't think it does exactly the same thing either."
emacs,37xyyx,instant_sunshine,1 point,Sun May 31 18:03:34 2015 UTC,Faster? In what way?  I think giving Smartparens a set of comfortable bindings (via Hydra nowadays) is going to whoop anything else's ass.
emacs,37xyyx,sledgespread,4,Mon Jun 1 07:22:20 2015 UTC,"Automatic spacing around operators with electric-spacing.  For example type:  a=f(x,y+1)   and you get  a = f(x, y + 1)   (This used to be called smart-operator.el but the author decided to rename it after a major refactoring. Judging by the number of stars on github the renamed version doesn't seem to have taken off yet, but I'm not sure why.)"
emacs,37xyyx,instant_sunshine,3,Mon Jun 1 08:32:45 2015 UTC,"doesn't seem to have taken off yet, but I'm not sure why   Probably needs a reddit or hacker news post..."
emacs,37xyyx,Starlight100,2,Tue Jun 2 01:18:11 2015 UTC,"Agree avy is good. I swtiched from ace-jump just to get this:  (setq avy-style 'at-full)   If there is more than 1 jump character it will show all of them, so you can type them faster.  Function avy-goto-char-2 is like vim-sneak but with jumps. I use avy-goto-word-1 for old-school jumps."
emacs,37y8ij,420_blazer,4,Sun May 31 12:09:45 2015 UTC,but it still depends on the desktop enviroment.   gnome-open is obviously a gnome feature. Use xdg-open instead. It'll work everywhere and try to open a file with the most appropriate application.
emacs,37y8ij,DasEwigeLicht,3,Sun May 31 12:42:23 2015 UTC,"Agreed. Also when debugging start by reducing the problem to the simplest you can. Your question is about how to invoke a command from within emacs, so make the command simpler.  (defun testme () (interactive)   (shell-command ""echo testme: `date` >> /tmp/testme.txt""))   Then when you are satisfied the general principle succeeds change up to gnome-open or as the other commenter says xdg-open, depending on how portable you want to be.  I'd suggest your main focus should be on thinking about what all this means rather than worrying about what system has gnome vs other environments."
emacs,37y8ij,benfitzg,1 point,Sun May 31 13:52:16 2015 UTC,This works pretty well. Now to figure out how to open terminals where I want them. :)
emacs,37y8ij,DasEwigeLicht,2,Sun May 31 16:49:17 2015 UTC,"I just googled around and that's going to be more difficult. For me, using urxvt and fish shell, opening a new terminal in the /tmp dir looks like this:   urxvt -e /bin/sh -c 'cd /tmp && /usr/bin/fish'"
emacs,37y8ij,bs4h,2,Sun May 31 17:38:20 2015 UTC,"You probably want to exec into fish, otherwise you have sh just sitting idle waiting forever for fish to exit."
emacs,37udug,AtticHacker,5,Sat May 30 13:56:47 2015 UTC,"To do this reliably, you need an actual parser. Emacs has Semantic, a parser framework that provides features similar to flex and bison. Here is how I use Semantic to convert a function to function pointer. Demo begins when you see START DEMO in the minibuffer. If Semantic does not support your language, you must first write a BNF grammar file and compile it so Semantic can recognize your language and produce language tags that you can then use to do whatever you need. Here is a short guide on adding a new language in Semantic (you may skip EDE part). Emacs is bundled with Semantic, so you may find it useful to navigate to cedet source, open the file c.by as an example of bovine parser. You can view it online here. If you view the file in Emacs, you have syntax highlighting since CEDET supports language development with it."
emacs,37udug,tuhdo,1 point,Sat May 30 15:17:11 2015 UTC,"This looks like it's exactly what I need, thanks for this!"
emacs,37udug,politza,2,Sat May 30 16:08:31 2015 UTC,"Leaving the parsing and transformation of the language aside. I think your options are to either use only display features (i.e. overlays) and let the actual content of the buffer as it is. Or provide a insert-file-contents file-handler, which would insert the transformed language instead of the actual file-content.  Though in this case you'll have to take care, that you don't end up writing it to disk.  Anyway, those are the options that come to my mind."
emacs,37udug,janemfta,2,Sat May 30 16:59:32 2015 UTC,"I just did something like this myself using font-lock-add-keywords (the predecessor to pretty-symbols, but it's much more powerful).  I wrote an example that shows transforming the following python code:   for i in range(10):   to this:   ∀i ∈range(10):   It's completely useless and was just for fun, but you might be able to use it for your own purposes. Here you go -- it also includes some hacks for the lambda character:  (defun lambda-mode-hook ()   (font-lock-add-keywords    nil `((""\\<lambda\\>""           (0 (progn (compose-region (match-beginning 0) (match-end 0)                                     ,(make-char 'greek-iso8859-7 107))                     nil)))          (""\\(\\<for\\>\\).+\\(\\<in\\>\\)""           (0 (progn (compose-region (match-beginning 1) (match-end 1)                                     ""∀"")                     (compose-region (match-beginning 2) (match-end 2)                                     ""∈"")                     nil))))))  (mapc '(lambda (hook)         (progn           (add-hook hook 'sm-lambda-mode-hook)))       '(emacs-lisp-mode-hook lisp-interactive-mode-hook lisp-mode-hook slime-repl-mode-hook scheme-mode-hook python-mode-hook diff-mode-hook))  (provide 'lambda) ```"
emacs,37udug,eric-plutono,1 point,Sun May 31 01:44:50 2015 UTC,"I actually thought of something which might work regarding the text transformation. Let's say I have buffer ""mycode.aa"" and I want to toggle the syntax, I could create a new buffer names ""$mycode.aa$"" (for example) and put the transformed text there. Saving the ""$mycode.aa$"" buffer would trigger an event to transform it back to the normal syntax and input into ""mycode.aa"" buffer and save that. Not sure if that's a good way to go though?"
emacs,37udug,sabof,1 point,Sat May 30 14:14:44 2015 UTC,"When emacs is displaying the ""new"" syntax it shouldn't save the file like that, it should save the original. (is that even possible?)   Yes, it's possible.  A simple example, in my opinion, is the way pretty-symbols-mode displays things like (λ (x) (¬ x)) but on disk the file remains (lambda (x) (not x)).  So you may want to look at that for some ideas (C-h f pretty-symbols-mode or look at pretty-symbols.el built into Emacs).  If you want to see an example of parsing a programming language entirely in Emacs there is js3-mode."
emacs,37udug,eric-plutono,1 point,Sat May 30 14:20:43 2015 UTC,The method pretty-symbols-mode uses is too limited for what he wants.
emacs,37udug,eric-plutono,1 point,Sat May 30 14:49:49 2015 UTC,"I agree, but I think it's a conceptually simple starting point."
emacs,37udug,AdrieanKhisbe,1 point,Sat May 30 15:04:24 2015 UTC,"Thanks, I'll be taking a look at those :)"
emacs,37pz59,tuhdo,4,Fri May 29 14:05:57 2015 UTC,Demos here.There are also old demos from the original repo now unmaintained.
emacs,37pz59,__baxx__,1 point,Fri May 29 14:07:02 2015 UTC,Is there a spacemacs later yet?
emacs,37pz59,cestdiego,1 point,Fri May 29 16:07:29 2015 UTC,"Seems like CestDiego is on it, since he made a PR to the repo yesterday."
emacs,37pz59,__baxx__,3,Fri May 29 16:13:25 2015 UTC,yep :)
emacs,37pz59,cestdiego,1 point,Fri May 29 19:23:09 2015 UTC,"I couldn't find the PR, good stuff though :)"
emacs,37pz59,__baxx__,1 point,Fri May 29 19:56:18 2015 UTC,he meant EmacsIpythonRepo.
emacs,37pz59,scarred-silence,1 point,Sat May 30 02:14:02 2015 UTC,"Oh right, that makes sense :) it'll be cool to see it in spacemacs, the zenburn theme looked nice with it"
emacs,37p8dl,daschwa,12,Fri May 29 09:03:31 2015 UTC,"After 20 years, my .emacs is about 40 lines."
emacs,37p8dl,larsbrinkhoff,7,Fri May 29 09:30:01 2015 UTC,Care to share?   I'm genuinely curious to see what is config serves well for 20 years.
emacs,37p8dl,SurviAvi,7,Fri May 29 09:51:38 2015 UTC,"Sure.  It's not that it's very well crafted; it isn't!  It's just that I adapted to the defaults and don't care much for adding bells and whistles.  In fact, a sizable portion is turning off features such as menus and color highlighting.  https://raw.githubusercontent.com/larsbrinkhoff/dotfiles/master/.emacs"
emacs,37p8dl,larsbrinkhoff,6,Fri May 29 12:56:14 2015 UTC,Now we all know the account Richard Stallman uses on Reddit.
emacs,37p8dl,eric-plutono,2,Fri May 29 13:53:27 2015 UTC,"I know you're joking, but I don't think he actually visits any websites beside his own. No guarantees they aren't run on a server with an unfree BIOS!"
emacs,37p8dl,dkms0t,1 point,Sat May 30 01:38:30 2015 UTC,"I have to say, as someone who's been using Emacs for at least that long myself, I'm impressed.  My config hasn't been that straightforward since the 80s :)"
emacs,37p8dl,RothiasVex,1 point,Fri May 29 14:43:45 2015 UTC,"In all honesty, that was my attempt with this. Would you mind sharing?"
emacs,37p8dl,larsbrinkhoff,1 point,Fri May 29 23:14:08 2015 UTC,See other reply in this subthread.
emacs,37p8dl,eric-plutono,3,Sat May 30 05:52:50 2015 UTC,"I've never seen someone write their Emacs configuration in the form of an Org Mode document before.  I knew you could have code within blocks of such documents, but I hadn't seen it taken to this extreme before.  I think the result is terrific looking, so thank you for sharing this.  My own init.el is not nearly as organized."
emacs,37p8dl,__baxx__,2,Fri May 29 10:55:38 2015 UTC,"what's better about ORG than markdown? I've seen people praise org mode, but looking at it it doesn't seem any different to markdown.... I'm guessing I'm missing something :)"
emacs,37p8dl,eric-plutono,7,Fri May 29 12:42:37 2015 UTC,Org Mode does a tremendous amount of things beyond being a document/markup format.  And there is also a slew of packages out there which extend Org Mode's functionality.
emacs,37p8dl,__baxx__,3,Fri May 29 12:49:00 2015 UTC,"Cheers I'll have a look - i used to take my notes in LaTeX which was handy for learning it and stuff I guess, and had some scripts that would open certain files / directories by month / topic and whatnot... But since recently using Emacs I've been encouraged to try this org mode.   I'll have a look at the link, thanks :)"
emacs,37p8dl,mkaito,1 point,Fri May 29 12:51:28 2015 UTC,You'll be delighted to know that org mode supports embedded latex for math stuff.
emacs,37p8dl,__baxx__,1 point,Fri May 29 14:44:42 2015 UTC,"like AucTeX?   I'm definitely going to have a play with it, the TODO database thingy sounds useful as well!"
emacs,37p8dl,tuhdo,3,Fri May 29 14:48:34 2015 UTC,"It is integrated with Emacs, and you can do a lot. One application of org-mode, aside from its original use case for creating a small TODO database, is reproducible research. Because included code blocks in org-mode can be evaluated, it is used for reproducible research, and in this case, it make the thing introduced in the OP possible.  You should have a look at this simple awesome Org tutorial.  Manipulating text table in org-mode is smooth. You can use my comment and play with it.  A new user can enjoy a well-configured org-mode like this out of the box. (original image from this twitter post)."
emacs,37p8dl,__baxx__,1 point,Fri May 29 14:23:07 2015 UTC,"ace cheers tuhdo, I'm going to have to start bringing it into my workflow. Since using spacemacs I've kinda stopped taking notes like I was as my workflows been scattered a bit whilst working my way about. Org certainly looks interesting though, cheers :)"
emacs,37p8dl,lemurnomicon,1 point,Fri May 29 14:35:23 2015 UTC,Another thing to be aware of is that org can export as markdown (among other formats) if you have something that needs actual markdown.  You can keep the original with all the org bells and whistles and then export the contents for the target.  http://orgmode.org/manual/Markdown-export.html
emacs,37p8dl,__baxx__,2,Fri May 29 13:11:46 2015 UTC,"cheers /u/lemurnomicon , I'm going to have to spend a day going through it at some point. The syntax looks pretty straight forward but all the stuff around that with organising and whatnot seems to be the real reason :)"
emacs,37p8dl,MonsieurBanana,2,Fri May 29 13:21:20 2015 UTC,Here's some links that might interest you :  http://sachachua.com/blog/2012/06/literate-programming-emacs-configuration-file/  https://github.com/joodie/emacs-literal-config/blob/master/emacs.org
emacs,37p8dl,eric-plutono,1 point,Fri May 29 12:45:46 2015 UTC,"Awesome, thanks!"
emacs,37p8dl,lawlist,1 point,Fri May 29 12:47:11 2015 UTC,"I have my entire installation of Emacs in one location -- i.e., binaries and elisp.  I use the same configuration on OSX and Windows -- with the code testing for each OS, OS version, and screen size, and taking whatever action is needed based thereon.  This makes backup and synchronization to multiple computers and cyberspace (with rsync) a breeze.  My init.el has a few basics to set initial frame defaults and such, and then require statements for all of my custom libraries.  I have a dialog that prompts me whether I want to start with -Q or not -- it's on a 3 second timer with a default to a full lineup of stuff.  When I am troubleshooting my installation, I comment out the various require statements in the init.el if I haven't been able to find the problem elsewise (e.g., grep and so forth).  Debugging is enabled full-time so I catch a meaningful output to help track down the problem; and, most of the known (error . . . code statements have been modified/replaced by me to just tell me in a message so that a detailed dialog doesn't come up by default -- e.g., (let ((debug-on-quit nil)) (signal 'quit '(""This is your quit message."")))"
emacs,37p8dl,z27,1 point,Fri May 29 14:28:23 2015 UTC,"Thanks, very interesting. Would you care to share your config?"
emacs,37p8dl,lawlist,2,Fri May 29 14:55:49 2015 UTC,"site-start.el:  (defface init-alpha-num-choice-face   '((t (:background ""white"" :foreground ""red"" :height 160)))   ""Face for `init-alpha-num-choice-face`.""   :group 'lawlist-init)  (defface init-text-choice-face   '((t (:background ""white"" :foreground ""forestgreen"" :height 160)))   ""Face for `init-text-choice-face`.""   :group 'lawlist-init)  (defface init-default-face   '((t (:background ""white"" :foreground ""black"" :height 160)))   ""Face for `init-text-choice-face`.""   :group 'lawlist-init)  (defun countdown-read (fnx &optional prompt inherit-input-method seconds) ""Doc-string.""   (let* (       choice       (seconds (or seconds 5))       (message-log-max nil) )     (while (>= seconds 0)       (message (concat         prompt         (propertize "".  ("" 'face 'init-default-face)         (propertize (format ""%d"" seconds) 'face 'init-alpha-num-choice-face)         (propertize "") seconds"" 'face 'init-default-face)))       (setq seconds (if (setq choice                               (funcall fnx nil inherit-input-method 1))                         -1                       (1- seconds))))     choice))  (let ((choice (countdown-read #'read-char-exclusive (concat         (propertize ""Emacs -"" 'face 'init-text-choice-face)         (propertize ""["" 'face 'init-default-face)         (propertize ""Q"" 'face 'init-alpha-num-choice-face)         (propertize ""]"" 'face 'init-default-face)) nil 3)))   (unless (or (eq choice ?q) (eq choice ?Q))     (load ""/Users/HOME/.0.data/.0.emacs/.0.lisp/init.el"" nil t t nil)))"
emacs,37p8dl,lawlist,2,Fri May 29 15:02:57 2015 UTC,"init.el  (setq debug-on-error t)  (defvar root.d nil)  (cond   ((eq system-type 'darwin)     (setq root.d ""/Users/HOME/.0.data/.0.emacs/""))   ((and       (eq system-type 'windows-nt)       (equal (w32-version) '(5 1 2600)))     (setq root.d ""y:/.0.data/.0.emacs/""))   ((and       (eq system-type 'windows-nt)       (equal (w32-version) '(6 1 7601)))     (setq root.d ""g:/Users/HOME/.0.data/.0.emacs/"")))  (setq load-path (append `(   ,(concat root.d "".0.lisp"")     ) load-path))  (setq user-emacs-directory root.d)  (setq custom-file (concat root.d "".emacs""))  (setq user-init-file (concat root.d "".emacs""))  (setq bookmark-default-file (concat root.d "".bookmarks""))  (setq savehist-file (concat root.d "".history""))  (setq abbrev-file-name (concat root.d "".abbrev_defs""))  (setq package-user-dir (concat root.d "".0.elpa""))  (custom-set-faces   '(default ((t (:background ""black"" :foreground ""white""))))   '(cursor ((t (:background ""yellow"")))) ;; just for initial loading   ;; . . .   '(secondary-selection ((t (:background ""black"" :foreground ""red"")))) )  (cond   ((eq system-type 'darwin)     (set-face-attribute 'default (selected-frame) :font ""-*-Courier-normal-normal-normal-*-18-*-*-*-m-0-iso10646-1"")     (add-to-list 'default-frame-alist '(font . ""-*-Courier-normal-normal-normal-*-18-*-*-*-m-0-iso10646-1"")))   ((eq system-type 'windows-nt)     (set-face-attribute 'default (selected-frame) :font ""-outline-Courier New-normal-normal-normal-mono-18-*-*-*-c-*-iso10646-1"")     (add-to-list 'default-frame-alist '(font . ""-outline-Courier New-normal-normal-normal-mono-18-*-*-*-c-*-iso10646-1""))))  (menu-bar-mode -1)  (tool-bar-mode -1)  (add-to-list 'default-frame-alist '(left-fringe . 8))  (add-to-list 'default-frame-alist '(right-fringe . 8))  (add-to-list 'default-frame-alist '(vertical-scroll-bars . nil))  (set-window-scroll-bars (selected-window) 0 'right nil) ;; just for initial loading. (redisplay)  (add-to-list 'default-frame-alist '(cursor-color . ""yellow""))  (setq-default cursor-type '(bar . 1)) ;; just for initial loading (add-to-list 'default-frame-alist '(cursor-type . (bar . 1)))  (add-to-list 'default-frame-alist '(background-color . ""black""))  (add-to-list 'default-frame-alist '(foreground-color . ""white""))  (let ((frame (selected-frame)))   (cond     ((eq system-type 'darwin)       (setq ns-auto-hide-menu-bar t)       (set-frame-position frame 0 0) ;; must come after `ns-auto-hide-menu-bar`       (cond         ((and             (= 1920 (display-pixel-width))             (= 1080 (display-pixel-height)))           (set-frame-size frame 1900 1054 t))         ((and             (= 1920 (display-pixel-width))             (= 1200 (display-pixel-height)))           (set-frame-size frame 1895 1170 t))         ((and             (= 1280 (display-pixel-width))             (= 800 (display-pixel-height)))           (set-frame-size frame 1254 774 t))))     ((and         (eq system-type 'windows-nt)         (equal (w32-version) '(5 1 2600)))       (set-frame-position frame 0 0)       (cond         ((and             (= 1920 (display-pixel-width))             (= 1002 (display-pixel-height)))           (set-frame-size frame 1890 934 t))         ((and             (= 1920 (display-pixel-width))             (= 1123 (display-pixel-height)))           (set-frame-size frame 1890 1042 t))         ((and             (= 1280 (display-pixel-width))             (= 723 (display-pixel-height)))           (set-frame-size frame 1250 642 t))))       ((and           (eq system-type 'windows-nt)           (equal (w32-version) '(6 1 7601)))         (set-frame-position frame 0 0)         (cond           ((and               (= 1920 (display-pixel-width))               (= 1080 (display-pixel-height)))             (set-frame-size frame 1890 1003 t))           ((and               (= 1920 (display-pixel-width))               (= 1200 (display-pixel-height)))             (set-frame-size frame 1889 1123 t))           (t             (message ""Not yet contemplated."")))) ))  (require '. . .) (require '. . .)"
emacs,37p8dl,bugsintherugs,1 point,Fri May 29 15:08:45 2015 UTC,Do you have it hosted somewhere so I can take a look? It sounds pretty incredible.
emacs,37p8dl,bugsintherugs,1 point,Fri May 29 23:15:00 2015 UTC,"If you're already using use-package, why are you still using Cask?"
emacs,37p8dl,bugsintherugs,1 point,Sat May 30 01:26:00 2015 UTC,"Great question. I thought about it for a while, but cask abstracts away package.el, I can maintain a list of which packages I want and where to install them from (elpa or github for example)."
emacs,37p8dl,wadcann,1 point,Sat May 30 02:04:53 2015 UTC,"Yes, but use-package also abstracts away package.el and doesn't introduce yet another dependency (Cask requires Python, and it works poorly on Windows). In a use-package declaration, "":ensure t"" will install the package if it is not already present."
emacs,37p8dl,xuchunyang,1 point,Sat May 30 03:33:36 2015 UTC,"Yep, I definitely may reconsider, I was just using cask for a while."
emacs,37os36,instant_sunshine,6,Fri May 29 05:32:16 2015 UTC,"With Ido, no. With Helm, yes. My guide may help your friends."
emacs,37os36,tuhdo,3,Fri May 29 07:17:01 2015 UTC,Many thanks /u/ReneFroger /u/tuhdo
emacs,37os36,ReneFroger,2,Fri May 29 07:28:29 2015 UTC,"Yes.   For example, the Helm documentation says the following:   Mark candidate with M-<SPACE>.   I applied it in my own setup: http://pastebin.com/pww55FVB"
emacs,37os36,RobThorpe,2,Fri May 29 05:35:11 2015 UTC,"Also, you can do this with Dired. Whenever I have multiple files to open I use Dired. I either open the whole directory or use a wildcard like *.el. Mark the files with m and open with F."
emacs,37os36,tending,1 point,Fri May 29 23:08:19 2015 UTC,"The dired use is something I have done for a long time.  Problem is it's nothing like the CtrlP experience, showing these guys Dired has made little impact."
emacs,37o3sf,bauta-steen,2,Fri May 29 01:53:48 2015 UTC,"I'm not seeing the behavior you describe, but it does sound familiar. When I evaluate the below, and then type t, r, or s, it still shows the items in the same order.  (ido-completing-read """" '(""most"" ""recent"" ""first""))  Same with smex, if I type part of one of the recent commands it lists first I still see them at the front of the list.  Not sure if it's an ido customization that's causing this.  [edit: are you using flx-ido? I'm not right now, but I imagine it resorts on each keypress based on the flex match score]"
emacs,37o3sf,lispbliss,1 point,Fri May 29 03:04:50 2015 UTC,"Yes, indeed I'm using flx-ido, maybe I could make it to sort twice, once for the most recent candidates, and once for the rest."
emacs,37o3sf,lispbliss,1 point,Fri May 29 04:41:43 2015 UTC,https://github.com/lewang/flx/issues/70
emacs,37o3sf,abo-abo,2,Fri May 29 08:21:44 2015 UTC,ivy-mode does this by default. It's a better ido-mode:   vertical fast customizable works for all completion (except regions so far)
emacs,37o3sf,aptmnt_,1 point,Fri May 29 08:19:40 2015 UTC,"Maybe I have it set up wrong, but ivy-mode does not remember past commands at all for me. It is purely alphabetical. Is there a settings toggle? I just have (ivy-mode 1) (setq ivy-use-virtual-buffers t)."
emacs,37o3sf,abo-abo,1 point,Thu Jun 4 05:59:07 2015 UTC,"ivy-mode does not remember past commands at all for me. It is purely alphabetical   True, Ivy does no sorting. But no sorting is required for files, and the sorting is automatic for buffers.  If you want sorting for commands, you can use smex with ivy back end."
emacs,37o3sf,shobble,1 point,Thu Jun 4 08:06:39 2015 UTC,"http://emacswiki.org/emacs/InteractivelyDoThings#toc25 might be of use? (I recall trying it a long time ago, but it got a bit weird and confusing, so I undid it again)"
emacs,37kcni,cestdiego,6,Thu May 28 06:55:10 2015 UTC,I've had something similar happen with Latex - emacs was wrongly fontifying a part of the file as if it was all in a $math$ context. Just reloading the file via C-x C-v solved the issue.
emacs,37kcni,DasEwigeLicht,2,Thu May 28 07:04:34 2015 UTC,"Yeah I have had this issue in auctex as well, it's pretty annoying at times."
emacs,37kcni,pjhuxford,1 point,Thu May 28 08:00:23 2015 UTC,Doesn't work for me.
emacs,37kcni,DasEwigeLicht,2,Thu May 28 09:36:44 2015 UTC,Put up that script on pastebin then and we'll see if the problem can be reproduced.
emacs,37kcni,DasEwigeLicht,1 point,Thu May 28 09:44:03 2015 UTC,It's on github. https://github.com/jomo/imgur-screenshot/blob/master/imgur-screenshot.sh
emacs,37kcni,DasEwigeLicht,1 point,Thu May 28 18:05:52 2015 UTC,"I'm having the same problems as you and as others have said the [^""] is to blame. It starts looking right again if you make that into [^\""] though I really don't know anything about bash scripting so it might change the script's semantics.  Another option is to try and pull apart those one-liners so you don't have a dozen nested quotes to deal with."
emacs,37kcni,hvis,1 point,Thu May 28 21:54:04 2015 UTC,Doing that fixes it...but behaviour is broken ;-;
emacs,37kcni,RobThorpe,1 point,Thu May 28 23:21:22 2015 UTC,On the bright side: when I reported a similar bug - annoying but trivial - it got fixed within a few days. Hopefully your issue will be helped as quickly.
emacs,37kcni,RobThorpe,5,Fri May 29 18:59:27 2015 UTC,Please M-x report-emacs-bug.
emacs,37kcni,RobThorpe,5,Thu May 28 08:59:40 2015 UTC,"Shell-script mode has different sub-modes depending on the shell you're using. Since you're using a package that modifies the mode line I can't see what it is. Usually the mode line would say (Shell-script[sh]).  In this case, are you programming in a different shell to your login shell? It looks to me like Emacs is guessing the wrong shell mode.  You can change that with sh-shell-mode or sh-alias-alist."
emacs,37kcni,lazyklimm,1 point,Thu May 28 09:58:53 2015 UTC,"I use zsh and I'm editing a bash script, but the first line says #!/bin/bash . Shouldn't emacs guess it's a bash script that I'm editing?"
emacs,37kcni,RobThorpe,1 point,Thu May 28 18:04:19 2015 UTC,"Maybe not, do C-h v sh-shell and see what it says."
emacs,37kcni,Kaligule,1 point,Thu May 28 18:25:04 2015 UTC,sh-shell is a variable defined in sh-script.el. Its value is bash Local in buffer imgur-screenshot.sh; global value is zsh  This variable is safe as a file local variable if its value   satisfies the predicate symbolp.  Documentation: The shell being programmed.  This is set by C-c :.
emacs,37jhop,benfitzg,3,Thu May 28 02:02:11 2015 UTC,Is this idiomatic or idiotic?   Idiomatic in my opinion.  Although personally I would use rx to write my regular expressions if they were becoming long and unwieldy.  You can press C-h f rx to read about it.  You may also find it useful to read some examples of define-generic-mode.
emacs,37jhop,eric-plutono,1 point,Thu May 28 03:09:13 2015 UTC,"Thanks I've not used rx. I'll have a play. Thanks also for the mode examples, they look well written and simple."
emacs,37im9d,hanlec,2,Wed May 27 22:17:10 2015 UTC,"There are a few functions that I had to modify to add my own text-properties containing the hidden values so that it could be sorted properly.  Place your cursor on the org-agenda entry (not the org-mode entry) at issue and evaluate (text-properties-at (point)), or send the result to your *Messages* buffer, and see if it has the criteria needed to sort a particular type.  It's been more than a year since I did this, and I don't remember exactly which ones I modified in my custom setup.  Absent modifying the function to include the necessary text-properties (if this is one of the ones that has problems), it will never work correctly.  Here is a quote from my 2013 thread:  For anyone battling with org-tags-view and org-scan-tags and org-agenda-list and org-agenda-get-deadlines and other related functions, if you will take a look at the section relating to org-add-props txt props, you will see that the org team has not provided enough text properties to sort the todo tasks with all the various options listed in defcustom org-agenda-sorting-strategy -- so before driving yourself crazy trying to figure out why all the sorting options don't work, first take a look to see if there are even text properties assigned to deal with those sorting options -- if not, then you will need spend time modifying things if you want those options to be available."
emacs,37im9d,lawlist,1 point,Thu May 28 04:22:04 2015 UTC,"I'm an Emacs newbie, so I'm not really sure what I'm supposed to do in this case.   I have reduced my example to the absolute minimum and I still couldn't get any sorting strategies to make any difference for the this type of DEADLINE/SCHEDULE selector. This makes me think that the time property is getting discarded once the tasks are retrieved and thus the order is irrelevant."
emacs,37im9d,lawlist,1 point,Thu May 28 05:23:44 2015 UTC,"Type M-x find-library RET org-agenda RET.  Then use i-search to look for org-add-props txt props.  You will see that there are eight (8) times that this text appears in the source-code.  You would need to repeat the above process with the org.el library, where org-add-props txt props is used -- i.e., within org-tags-view and org-search-view.  The entries underneath each of the sections correspond to the text properties that are added so that (among other uses) the various options of org-agenda-sorting-strategy may be used.  A few are missing depending upon which of the org-add-props txt props references you are looking at.  To fix it, the missing properties need to be added and the corresponding values need to be calculated/set higher up in the function and then added to the section where it is missing.  This is an advanced tweak/fix requiring intermediate elisp skills.  I haven't compared your example to each of the ten (10) references to org-add-props txt props and/or verified which version of org-mode you are using, and this would be a time-consuming project to fix and test the various possibilities.  I also haven't verified that this is indeed your problem; however, it looks and smells like it probably is -- since this is what I went through a couple of years ago to fix the options that I needed that were missing.  Revealing the hidden text-properties contained within each heading in the *Org Agenda* buffer is a shortcut to see what text-properties are actually there and to see if the ones you are trying to sort are present -- if the property and/or value is missing, then you will have identified the problem and can begin to work on the solution.  This may be a project that remains on your todo-list for the future when your elisp skills become more advanced.  You could, of course, submit a report to the org-mode team.  Before doing that, however, you should install the most recent public stable release of org-mode and see how it behaves."
emacs,37im9d,grabyourmotherskeys,1 point,Thu May 28 05:51:43 2015 UTC,This probably isn't your problem but I find ordering and selecting by deadline and schedule finicky. I always make sure they are on the line immediately after the headline with no leading space.
emacs,37im9d,grabyourmotherskeys,1 point,Wed May 27 23:21:09 2015 UTC,I don't think that's the problem in this case. The todos show up in the list correctly; it's only the order that doesn't work.
emacs,37im9d,grabyourmotherskeys,1 point,Thu May 28 00:47:57 2015 UTC,"""Schedule up, time up"" might be what you need... So you have grouped scheduled at top then sort by time."
emacs,37im9d,lawlist,1 point,Thu May 28 01:27:40 2015 UTC,"What confuses me is that it looks like the order is completely ignored. I've set org-agenda-sorting-strategy to different values, but I don't see any changes in the displayed list."
emacs,37jjf5,typedweb,6,Thu May 28 02:15:07 2015 UTC,why is this a video?
emacs,37fn66,OldShoe,2,Wed May 27 07:37:43 2015 UTC,"I was struggling with the same problem in Win7 earlier. Add \servername\d$ in your Windows Explorer as a new drive (google around to add shared folders as drive).  Then you can reach it with Helm (Helm will see it as a drive, and not as a shared folder)."
emacs,37fn66,ReneFroger,1 point,Wed May 27 10:37:28 2015 UTC,"Not sure, but I don't think the Windows notation of network drives are allowed.  You could try TRAMP instead: http://www.gnu.org/software/tramp/  (C-f for smbclient) Hope that's helpful, sorry if the information is inaccurate, but I don't use Windows myself, sorry.  (EDIT: Didn't use Emacs notation for keys) (EDIT2: Typoed)"
emacs,37fn66,zackp30,1 point,Wed May 27 09:06:52 2015 UTC,Did you try using /smb: in the beginning of the file path?  Like in this SO answer.
emacs,37f7rc,kabbotta,10,Wed May 27 04:42:02 2015 UTC,"Changing display-buffer is not necessary, you are most likely interested in customizing display-buffer-alist which controls the behaviour of it for specific buffers.  There's packages managing it for you.  I initially used popwin, but eventually grew annoyed and wrote shackle for less magic and more control.  As both are global minor modes, you can toggle them on and off with a keystroke for instance."
emacs,37f7rc,wasamasa,1 point,Wed May 27 04:57:27 2015 UTC,"Thanks, your shackle plugin looks useful."
emacs,37f7rc,tending,1 point,Wed May 27 21:46:15 2015 UTC,"What setup so you use with shackle? I ask because I know I don't like the way emacs behaves now, but I don't know what I want instead."
emacs,37f7rc,wasamasa,1 point,Fri Jun 5 14:07:44 2015 UTC,https://github.com/wasamasa/dotemacs/blob/master/init.org#shackle
emacs,37f7rc,CodyChan,4,Fri Jun 5 15:40:36 2015 UTC,"You can set this: If any error occurs during the compilation, keep the compilation window open so you can check the error information, if not, close the compilation window immediately. Check my configuration"
emacs,37f7rc,CodyChan,1 point,Wed May 27 06:58:41 2015 UTC,"Thanks, this essentially accomplishes what I wanted to do. My only problems with it are basically aesthetic. Your code checks to see if the *compilation* buffer exists in another window before deciding whether to split or not. It would be nice if it didn't split if it found the *compilation* buffer in another frame. This way the window wouldn't split and then unsplit for no reason when I have another frame open with the *compilation* buffer.  I tried changing check-buffer-window to check-buffer, but that didn't seem to have any effect."
emacs,37f7rc,lawlist,1 point,Wed May 27 22:25:31 2015 UTC,"Check the ALL-FRAMES part of the doc in Emacs for get-buffer-window. Just add t after ""*compilation*""."
emacs,37f7rc,instant_sunshine,1 point,Thu May 28 02:29:52 2015 UTC,"This would be good, but it doesn't seem to work. I enabled it with (bury-successful-compilation 1), but nothing happens. I have recompile and compile remapped, but even if I call the functions directly the buffer doesn't go away."
emacs,37f7rc,lawlist,2,Wed May 27 20:52:21 2015 UTC,"Oh, sorry for not being clear.  What I did:  - installed bury-successful-compilation from melpa  - placed (bury-successful-compilation t) into init.el  - called M-x eval-buffer and made sure bury-successful-compilation mode was enabled  - called M-x compile with no current window split (my compile command is set to: ""cd ~/workspace/ogre/projects/lastditch/build && make -k install && cd dist/bin && ./OgreApp"", maybe this is the problem?)  What did I expect:  - I expected the compilation buffer to appear as normal when I built the project, and then after it succeeded, or after I closed the running application, I expected it to bury the compilation window   What happened:  - It just acted like normal. The complilation succeeded, the program ran successfully, and afterwards the compliation buffer was still visible in a split window.  The only major difference I see is that I have a bunch of extra junk in my compile command. Also, I often compile using ""recompile"". Is that supposed to work with this package?"
emacs,37f7rc,instant_sunshine,1 point,Wed May 27 21:51:05 2015 UTC,"I had a little issue using the -C flag in this case. The -C flag seems to automatically return to the previous directory when it is finished. This makes it a little more cumbersome for me to quickly change into the 'dist/bin' directory that has my executable and run the application. Using 'cd' fixes this, because it doesn't bounce back to original directory after building.  The ""extra junk"" I was talking about was just the extra calls in my compile command, not extra output in the compilation buffer.  I'm usually pretty good about avoiding warnings, but I am using the Ogre3d open source library, and it definitely has a bunch of warnings that show up in flycheck, but I don't rebuild the library with my project so I don't think that should be a problem. But for the project I'm building, there are no warnings displayed during building. I don't even suppress those pesky unsigned or logical-op-parentheses warnings ; )  Thanks for being so diligent about your package!"
emacs,37dwca,gopar,5,Tue May 26 22:31:35 2015 UTC,"I agree, emacs-eclim is pretty great. I was in the same spot as you, but eclim was freken perfect for me. My setup is eclim + company-mode for completion and Java-Snippets for YASnippet. I'm also able to do Android programming w/ eclim!."
emacs,37dwca,ReneFroger,1 point,Tue May 26 23:09:20 2015 UTC,Thanks for sharing. But your site seems down to me?
emacs,37dwca,gopar,1 point,Thu May 28 07:05:08 2015 UTC,Mmm thats odd. I can still access the site. Try again :)
emacs,37dwca,jsled,3,Fri May 29 17:05:41 2015 UTC,"jdee + emacs-eclim is my current setup. Eclipse usually headless, and using jdee for highlighting/formatting, and to invoke our ant-based build. eclim-java-find-type, -find-reference and -find-definition. I couldn't get eclim-emacs' company-mode support to work, but it purports to do completion. junit running in eclipse, because its test-runner is so much better than the ant-based one (no feedback until the entire test suite is done, via the plain/console formatter :/ ).  But I spend 99% of my time in emacs.  EDIT: I should point out, JDEE itself might work just fine for your simple class assignments.  There's also malabar-mode, but I have no experience with it."
emacs,37dwca,hvis,3,Tue May 26 22:47:09 2015 UTC,"I couldn't get eclim-emacs' company-mode support to work   You should try the bundled company-eclim backend. Just customize company-eclim-executable, and it should get picked up automatically."
emacs,37dwca,jchochli,3,Wed May 27 00:26:55 2015 UTC,I use emacs-eclim with a headed eclipse for debugging (with emacs key bindings enabled). Also using Projectile to do things like quickly find files in a project.
emacs,37dwca,tanenbaum,1 point,Wed May 27 07:30:36 2015 UTC,"I can see how emacs is cool for lisps as everything melts together, but are there any good reasons to use it for Java dev?"
emacs,37dwca,ReneFroger,3,Wed May 27 15:30:58 2015 UTC,Java development is where the money is.
emacs,37dwca,jchochli,3,Thu May 28 07:09:26 2015 UTC,"Because Emacs is the greatest editor in the world!  The same reason people want to use it for Python, Ruby, JavaScript, C++, Haskell, ..."
emacs,37dwca,parolang,3,Thu May 28 12:54:18 2015 UTC,"One reason is so that you don't have to run a different a editor for every programming language you use. Also emacs is just plain awesome for editing. You can go pretty far with just core emacs features alone like abbrevs, dynamic abbrevs, snippets, kmacros, registers, etc, etc, not to mention the raw power of lisp to blend all these things together in powerful ways."
emacs,37dksw,aport,2,Tue May 26 21:12:32 2015 UTC,"From personal experience I prefer Irony over RTags.  That is because I find Eldoc and Flycheck support to be the functionality that's most useful to me.  For symbol navigation I use Emacs' built-in TAGS file support, creating them with Exuberant Ctags.  It has its short-comings when measured against RTags, but speaking from my anecdotal experience, it is ""good enough.""  I've never tried using both together so unfortunately I can't comment on that."
emacs,37dksw,eric-plutono,2,Wed May 27 06:00:06 2015 UTC,"I use them together. It does waste RAM, but the benefits are worth it. Irony for completion (with Company) and RTags for navigation and basic refactoring.  The refactoring is nice to have. For example, I can change a struct's field and have it updated across all files without interfering with different-but-similar-named variables (which is what would happen with a simpler global substitution).  I doesn't do more complex things, such as reordering of parameters or extracting a function, but it's still nice."
emacs,37dksw,borolitos,1 point,Wed May 27 11:50:28 2015 UTC,Sounds like you should use irony ... And then you can add ctags / cscope for symbol navigation.
emacs,37dksw,Trevoke,1 point,Wed May 27 11:54:53 2015 UTC,RTags doesn't actually use flymake. We roll our own system. We should maybe integrate with flycheck instead.
emacs,37c6dy,mooglinux,5,Tue May 26 15:31:54 2015 UTC,"This model doesn't look very FRP-ish to me. FRP describes events as a discrete stream of values, and behaviors as a continuous stream of values. The ""handlers"" just exist internally, but the application should be written with composition of events and behaviors in mind.  Nevertheless, Emacs is much older than the entire idea of FRP. It's written with mutability in mind. But an editor based on FRP might be interesting."
emacs,37c6dy,Denommus,1 point,Tue May 26 15:38:32 2015 UTC,"Give that whole (very lengthy) link about re-frame a read, it explains it much better than I have.   It is stream-based. Changes and updates to the data are streamed to components subscribed to that stream, and those components in turn emit data onto other streams, from component to component as in the above diagrams. The event handlers I am talking about are just components subscribed to the event stream. I suppose there would be another event queue internally to handle all the updates and manage the streams, but like you said, that would be an implementation thing.   Its interesting that emacs deals with mutable data, and isn't so purely functional as I had thought. The ideas I've been thinking over are very heavily inspired by my (possibly erroneous) understanding of lisp and emacs. I suppose you could describe it as a FRP version of emacs? An application based on FRP written in lisp (clojurescript, probably) which the user can extend by writing their own lisp functions and create any functionality that can be built on those FRP components."
emacs,37c6dy,washort,4,Tue May 26 16:41:54 2015 UTC,Lisp is about as much a functional language as Python or Javascript is.
emacs,37c6dy,Denommus,2,Wed May 27 02:43:18 2015 UTC,"Emacs is written in a specific dialect of Lisp that is very... not-functional, called Emacs Lisp. Even Common Lisp is very procedural in nature, Emacs Lisp is more so.  I'm not aware of any editor that follows a functional paradigm, but if you want to make one I'd like to follow its development. I just think that it will possibly be yet-another-Emacs-like-editor-that-no-one-will-use-because-emacs-already-has-loads-of-packages."
emacs,37c6dy,ItsAConspiracy,7,Tue May 26 17:34:49 2015 UTC,Yi is an editor written in and extensible with Haskell.
emacs,37c6dy,Denommus,1 point,Tue May 26 20:57:33 2015 UTC,Good to know. :)
emacs,37asfp,spwhitton,6,Tue May 26 06:33:30 2015 UTC,A left mouse click should also suffice.
emacs,37asfp,lawlist,10,Tue May 26 07:49:16 2015 UTC,I will not touch vermin!
emacs,37asfp,Sathan,4,Tue May 26 15:34:23 2015 UTC,"If I wanted to use a mouse I wouldn't be using Emacs.  (Heh, just kidding.  Thanks for the tip!)"
emacs,37asfp,eric-plutono,3,Tue May 26 09:45:09 2015 UTC,"I didn't know this, thanks."
emacs,378ad6,kungfushark,7,Mon May 25 18:18:24 2015 UTC,"Here I'm running the cmd ""echo"" with the arguments ""hello"" and ""world""  (defun testcmd ()   (interactive)   (shell-command ""echo hello world"" ))"
emacs,378ad6,benfitzg,2,Mon May 25 20:00:51 2015 UTC,http://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Scripts
emacs,376won,xuchunyang,2,Mon May 25 11:04:35 2015 UTC,"Nice solution. But I wonder why you would use the mouse?   I bounded the keys M-h and M-l to send the keys <left> and <right> respectively. When the Helm window is active, he interprets <left> and <right> to switch a Helm source below or upper. Much faster than with the mouse, IMHO.   And I bound the Ctrl key (which Capslock is the Ctrl key, actually) to send a signal, when there is no another key pressed. For example, when I press C-h, then C-h will be sent. But when I press Ctrl only, and release it, without pressing another key simultaneously, then he will send <f9> which is the command to open Helm up."
emacs,376won,ReneFroger,1 point,Mon May 25 16:17:17 2015 UTC,"Nice solution. But I wonder why you would use the mouse?   Because it is impossible by default. I agree using the keyboard is more convenient and efficient for operating helm in all cases  for now but I think being more GUI friendly is not a bad idea.    I just use C-o (same as <right>) to switch sources manually if necessary, becauseC-o actually can loop between sources if there is no a dummy source and the number of sources is usually less than three."
emacs,376won,ReneFroger,1 point,Mon May 25 17:12:53 2015 UTC,"Ah, never knew it was impossible. I get it. Just tried it, nice solution indeed. And give the idea of Ctrl as only keybinding a try, when it's not a modifier key (e.g. C-[some-letter-here]). So convenient. :-)"
emacs,375ozr,azangru,3,Mon May 25 02:34:44 2015 UTC,You can evaluate arbitrary elisp in .dir-locals.el: http://stackoverflow.com/questions/7334565/how-can-i-move-php-mode-settings-from-emacs-to-dir-locals-el - so this should allow you to at least address the second issue (and may help with the first)
emacs,375ozr,alexmurray,1 point,Mon May 25 05:04:54 2015 UTC,"So this is what I have now in .dir-locals.el:  ((nil . ((tab-width . 4)          (js-indent-level . 4)))   (js-mode . ((tab-width . 4)              (js-indent-level . 4)))   (web-mode . ((web-mode-code-indent-offset . 4)               (web-mode-markup-indent-offset . 4)))   (html-mode . ((tab-width . 4)                (sgml-basic-offset . 4))))   (eval-after-load 'flycheck    '(progn     (setq flycheck-disabled-checkers '(javascript-jshint))     (setq flycheck-checkers '(javascript-eslint))))   (most of this is just like magic incantations to me :-( )  However, I still see that flycheck underlines the import keyword in js files, warning me that ""import is only available in ES6 (use esnext option)"". This warning must be coming from jshint, which means that flycheck hasn't switched from using jshint to using eslint :-("
emacs,375ozr,sauntcartas,2,Mon May 25 18:38:31 2015 UTC,"Also, note that you can set as many variables as you want in a single call to setq, so you can combine your two eval-after-loads into one:  (eval-after-load 'flycheck    '(setq flycheck-disabled-checkers '(javascript-jshint)          flycheck-checkers '(javascript-eslint)))   More generally, just use a progn:  (eval-after-load 'flycheck    '(progn     (setq flycheck-disabled-checkers '(javascript-jshint))     (setq flycheck-checkers '(javascript-eslint))))"
emacs,3760hh,jamdatadude,5,Mon May 25 04:23:00 2015 UTC,Favourite font: Fantasque Sans Mono.  As for a theme I am making my own.  Here's what it looks like.
emacs,3760hh,DasEwigeLicht,1 point,Mon May 25 09:55:26 2015 UTC,"Looking good so far. I change themes often and almost randomly, I guess I really don't know what I want. I probably should learn to make my own."
emacs,3760hh,maufdez,1 point,Mon May 25 14:46:09 2015 UTC,Do you mind sharing your font rendering related settings? I have been trying to get that sharp-but-not-distorted look for some time.
emacs,3760hh,rklv,1 point,Mon May 25 21:26:25 2015 UTC,"I don't know that I've done anything special to the font settings to make them look sharper. Whatever you see is probably the result of my resolution and imgur compression.  Anyway, here's my config, font stuff starts at line 55."
emacs,3760hh,DasEwigeLicht,1 point,Mon May 25 23:11:20 2015 UTC,"Oh I meant the fontconfig file if you have one other than default. Emacs' font settings are not relevant as far as I know to how they are rendered. Otherwise, it has to do with your distro."
emacs,3760hh,rklv,1 point,Tue May 26 06:41:01 2015 UTC,"I've never touched any fontconfig files, so it's all just vanilla Antergos.  Don't even know where to find that kind of stuff. If you can tell me where to look I can throw that stuff up on pastebin."
emacs,3760hh,DasEwigeLicht,1 point,Tue May 26 09:55:10 2015 UTC,What is the window manager that you use?
emacs,3760hh,st3fan,1 point,Tue May 26 23:43:34 2015 UTC,i3wm  All my configs are on github.
emacs,3760hh,DasEwigeLicht,3,Wed May 27 10:39:10 2015 UTC,Source Code Pro font with my own theme (https://github.com/zk-phi/lenlen-theme).
emacs,3760hh,zk_phi,1 point,Mon May 25 04:50:09 2015 UTC,"nice theme! i am usually use leuven theme (mostly because of it's org-mode), but i'll give a try for your as well. so thanks for posting it here :D"
emacs,3760hh,deadmaya,1 point,Mon May 25 09:51:52 2015 UTC,How are those system stats at the bottom done?
emacs,3760hh,ares623,1 point,Mon May 25 14:40:29 2015 UTC,You can download the system monitor here: https://github.com/zk-phi/symon/
emacs,3760hh,zk_phi,1 point,Tue May 26 06:08:52 2015 UTC,"Thanks. Already did :) liking it so far. By the way, I had trouble trying to get your lenlen theme to work."
emacs,3760hh,ares623,1 point,Tue May 26 06:41:38 2015 UTC,"does it raise ""function definition is void: create-solarized-theme"" error?"
emacs,3760hh,zk_phi,4,Tue May 26 08:22:51 2015 UTC,"this is the best coding font ever: http://www.fsd.it/fonts/pragmatapro.htm  it's 19 euros, but i would have paid 200 for it.   i've used it and it's predecesor for 8 years now."
emacs,3760hh,xoo-,2,Mon May 25 11:11:43 2015 UTC,"Been using menlo. On the macbook air, non retina, it looks the best for me."
emacs,3760hh,Mysticity,2,Mon May 25 06:03:17 2015 UTC,Consolas
emacs,3760hh,lazyklimm,2,Mon May 25 15:04:05 2015 UTC,Zenburn. Terminus.
emacs,3760hh,p4p3r,1 point,Mon May 25 19:00:18 2015 UTC,Yes.  Set it and forget it for both.
emacs,3760hh,spwhitton,1 point,Tue May 26 04:22:05 2015 UTC,"My favorite theme is to set my own colors for everything with courier 18.  Any major or minor mode that I use frequently has been taken over completely with new prefix-names for every function, face and variable (with a few inescapable exceptions for variables that are tied into the C-source code), and lots of new defface -- I avoid :inherit wherever possible.  I don't use underline, and I almost always stay away from bold -- they both conflict with a custom cross-hairs mode that has been my pet-project for the past year.  I like a black background.  I love controlling every aspect of my Emacs experience -- it makes someone like me who suffers from OCD feel right at home."
emacs,3760hh,lawlist,1 point,Mon May 25 06:16:32 2015 UTC,"Here at work, Liberation Mono 11 with the default Emacs theme (cyan keywords, salmon strings, orange comments, etc)."
emacs,3760hh,tangus,1 point,Mon May 25 12:46:13 2015 UTC,I'm using Ubuntu Mono for my font and recently switched to leuven theme.
emacs,3760hh,ares623,1 point,Mon May 25 14:39:56 2015 UTC,I use Source Code Pro with Material Theme.
emacs,3760hh,cpaulik,1 point,Mon May 25 15:31:42 2015 UTC,DejaVu Sans Mono w/ flatui-theme and darktooth-theme
emacs,3760hh,ganglygorilla,1 point,Mon May 25 23:32:10 2015 UTC,"+1 for DejaVu Sans Mono. As for a theme, I like Dark Emacs; it plays well with Org mode."
emacs,3760hh,tdavey,1 point,Wed May 27 01:41:20 2015 UTC,"I love the Ubuntu mono font - never found anything to beat it.  It has a clean, almost proportional-font look to it.  For all the grief Canonical gets for various decisions it's made, the Ubuntu font family is a fantastic contribution to the world.  And I like the faff theme."
emacs,3760hh,fantastipants,1 point,Tue May 26 14:23:28 2015 UTC,Please add faff to MELPA?
emacs,3760hh,metaperl,2,Tue May 26 15:15:20 2015 UTC,I just submitted it - if I didn't screw it up then it should turn up there whenever it gets reviewed.
emacs,3760hh,wjcferguson,1 point,Tue May 26 15:44:24 2015 UTC,The Ubuntu Mono font and minimal-theme.  This is what they look like together.
emacs,3760hh,eric-plutono,1 point,Tue May 26 17:03:56 2015 UTC,DejaVu Sans Mono + solarized-light
emacs,3760hh,aport,1 point,Tue May 26 21:19:21 2015 UTC,The medium Meslo LG and sanityinc-tomorrow-night.
emacs,374l4m,SrbijaJeRusija,3,Sun May 24 20:43:43 2015 UTC,"Some version of smooth scrolling may be what you want.  Edit: I've never tried to modify C-v and M-v to that effect, so I apologize if that's not what you're looking for."
emacs,374l4m,eric-plutono,1 point,Sun May 24 20:58:30 2015 UTC,Gonna look into this.
emacs,374l4m,lawlist,3,Sun May 24 22:35:37 2015 UTC,"You are probably thinking of (mwheel-scroll EVENT).  However, what you probably want is something different -- here is what I use for different levels of scrolling with keyboard shortcuts.  You may also be interested in (setq scroll-conservatively 101) -- see the doc-string for that variable.  (defun scroll-down-five () ""Five lines using `scroll-down'."" (interactive)   (scroll-down 5))  (defun scroll-up-five () ""Five lines using `scroll-up'."" (interactive)   (scroll-up 5))  (defun my-scroll-up () ""Custom function that results in a one-half screen scroll"" (interactive ""^"")   (scroll-up)   (recenter)   (when (not (= (current-column) 0))     (vertical-motion 0)))  (defun my-scroll-down () ""Custom function that results in a one-half screen scroll."" (interactive ""^"")   (scroll-down)   (when (<= (string-to-number (format-mode-line ""%l"")) (window-height))     (goto-char (point-min)))   (recenter)   (when (not (= (current-column) 0))     (vertical-motion 0)) )  (defun my-s-scroll-up () ""Custom function that results in a full screen scroll."" (interactive ""^"")   (my-scroll-up)   (my-scroll-up))  (defun my-s-scroll-down () ""Custom function that results in a full screen scroll."" (interactive ""^"")   (my-scroll-down)   (my-scroll-down))"
emacs,374l4m,RobThorpe,1 point,Sun May 24 21:38:52 2015 UTC,"Oh this is nice, whilst not exactly what I want, this is great!"
emacs,374l4m,zk_phi,1 point,Sun May 24 22:35:24 2015 UTC,Setting scroll-conservatively is probably the best option.
emacs,374l4m,jordonbiondo,1 point,Mon May 25 01:12:25 2015 UTC,inertial-scroll (https://github.com/kiwanami/emacs-inertial-scroll) may also be an option.
emacs,36zcny,mickeyp,17,Sat May 23 12:16:12 2015 UTC,"I will write a looooong blog article about this, a post-mortem mixed with a general guide to writing a book in Emacs.  But the TL;DR is: All of it was written in Emacs and the corrected, proofread manuscript was ediff'd against the original --- so also in Emacs. Makefile for the build pipeline? Emacs. Spell checking? Ispell and flyspell. Running the makefile? Emacs's Compilation mode."
emacs,36zcny,BruceConnor,7,Sat May 23 12:59:59 2015 UTC,Sounds like a must-read article.
emacs,36zcny,plantarum,5,Sat May 23 13:02:59 2015 UTC,"What was the source format - LaTeX, org, markdown? I'll buy a copy shortly, and I'd be willing to help convert into TeXInfo for reading inside Emacs."
emacs,36zcny,excitedaboutemacs,1 point,Sat May 23 14:14:21 2015 UTC,Do you have a link to the article?
emacs,36zcny,reconsideryourbelief,7,Mon May 25 00:22:46 2015 UTC,I'd love a hard cover print. Are there plans to work with a print-on-demand service?
emacs,36zcny,Moschops_UK,1 point,Thu Jul 16 18:54:31 2015 UTC,I am indeed. The quality of PoD services leaves a lot to be desired though. I feel if you buy a hardcover it should be high quality. May pair with a publisher instead.
emacs,36zcny,jart,1 point,Sat May 23 16:24:35 2015 UTC,I am looking at this but the quality the books from PoD services leaves a lot to be desired.
emacs,36zcny,eric-plutono,1 point,Sat May 23 18:44:58 2015 UTC,"Did your investigations get anywhere? I don't suppose there's any interest from No Starch or the like. That said, I was reading Bob Nystrom's book again today, and for a self-published book, the quality is absolutely fine (in fact, I did not realise that he'd gone down that route until I looked up the publisher and found that he was his own publisher - if that's not a seal of approval on self-publishing, I don't know what is; for those interested, his post of taking it to physical print is worth reading http://journal.stuffwithstuff.com/2014/11/03/bringing-my-web-book-to-print-and-ebook/ ).   While I can't speak for any others, I certainly would not say that the physical quality of that printed book leaves a lot to be desired."
emacs,36zcny,eric-plutono,1 point,Sat May 23 19:04:54 2015 UTC,I did have interest from several publishers to do a print book before I decided to self-publish.  I'm working abroad atm so I don't have time to really look into more POD services for another month or two.
emacs,36zcny,eric-plutono,6,Mon Jun 15 18:00:16 2015 UTC,Does it teach you how to code emacs lisp?
emacs,36zcny,nautola,1 point,Mon Jun 15 19:50:46 2015 UTC,"No, but for that I recommend the excellent ""Introduction to Emacs Lisp"" info manual built into Emacs."
emacs,36zcny,chrisrayner,8,Sat May 23 16:47:59 2015 UTC,Congrats!  I look forward to buying a copy and reading through it.
emacs,36zcny,eric-plutono,5,Sat May 23 19:04:36 2015 UTC,Thank you so much! It is definitely a labor of love and initial feedback from the previewers has been overwhelmingly positive.
emacs,36zcny,andrewleung,4,Sat May 23 12:34:14 2015 UTC,"It's been a while since I've seen an Emacs book; the one I own was written back when Emacs 19 was the newest version, heh.  Besides covering modern features of Emacs (for example I notice you write about CUA Mode), what were some of the specific goals you set out to achieve with 'Mastering Emacs'?"
emacs,36zcny,__baxx__,11,Sat May 23 12:37:33 2015 UTC,"Good question.  I had to teach myself Emacs a good 12 years or so ago. I enjoyed the act of learning how to use Emacs --- but then I was a student with near-infinite amounts of time on my hands.  Emacs is hard to learn because too many people struggle to move past the tutorial. Indeed, the first ever blog article I wrote was ""Moving past the tutorial"". My view of how to learn Emacs ""the right way"" is to understand that Emacs is a search engine in its own right. If you want answers to questions you should know how to ask Emacs.   The first part of the book teaches you the fundamentals (terminology, Emacs's modifiers, etc.) but then I explain how to use Emacs's info manual, apropos, and describe system to discover more about Emacs -- or remember forgotten keys or commands.  That, more than anything, is Emacs mastery: knowing where to seek an answer to your question.  The rest of the book covers movement (why Emacs's word movement is asymmetric), editing and the practicals (Dired, a bit about Shells, TRAMP).  It is mostly a distillation of 13 years of learning to, I suppose, a book that I would've found immensely useful were I to learn Emacs again."
emacs,36zcny,buffalo_pete,3,Sat May 23 12:42:41 2015 UTC,"That, more than anything, is Emacs mastery: knowing where to seek an answer to your question.   Couldn't agree more.  Sounds like a great and solid foundation for a book about Emacs."
emacs,36zcny,-evan,2,Sat May 23 12:49:11 2015 UTC,"If you don't mind, why is Emacs's word movement asymmetric?    I've always wondered; it makes no sense to me."
emacs,36zcny,buffalo_pete,2,Sat May 23 12:54:57 2015 UTC,Is it the Unix Desktop Guide to Emacs (1991)? :)
emacs,36zcny,trezor2,1 point,Sun May 24 19:26:59 2015 UTC,"Haha, nah.  It's an old edition of ""Learning GNU Emacs"" published by O'Reilly."
emacs,36zcny,r2k9,5,Sat May 23 17:17:40 2015 UTC,"congratulations!!!  but... wouldn't a post in /r/vim or /r/sublimetext be better?? :-)  srsly, post in other programming editor subgroups  - include a HUGE discount code, get everyone from /r/emacs to upvote your post.  make the pie bigger!"
emacs,36zcny,kaushalmodi,4,Sat May 23 17:22:33 2015 UTC,This might interest you :   http://learnvimscriptthehardway.stevelosh.com/
emacs,36zcny,StudentRadical,12,Sat May 23 16:14:22 2015 UTC,"This looks awesome, and I know you must have busted your ass on it, but I've gotta say, $35 is out of my price range, especially for an ebook."
emacs,36zcny,atmarama,3,Sat May 23 16:40:37 2015 UTC,"Technical books like this are expensive as a general rule. I'm a hardcore VIM user, but I'm willing to lay down $35 to learn about Emacs if the book itself is as good as Mickey's blog posts. :)"
emacs,36zcny,billbose,2,Sat May 23 15:30:35 2015 UTC,"I'm not saying it isn't worth it. I'm sure it is, I just can't afford it."
emacs,36zcny,Moschops_UK,3,Sun May 24 18:01:34 2015 UTC,"Those who signed up as interested early on received an offer for $32.  Considering how Emacs is a tool you can use each day, every day, for almost everything, for decades on, that hardly seems like an unreasonable investment."
emacs,36zcny,dahanbn,8,Sun May 24 18:29:47 2015 UTC,"That's a whopping 3 dollars difference.  That doesn't really change the price much.  With the exchange rate, that's a $45 ebook for me - I mean, is this ebook by Richard Stallman or something? http://www.amazon.com/gp/aw/d/B0043EWVAQ/ref=tmm_kin_title_0?ie=UTF8&sr=8-1&qid=1432417131  If the ebook was $3 to $10 dollars I probably would have just bought it without thinking."
emacs,36zcny,kraml,3,Sat May 23 16:12:26 2015 UTC,"@mickeyp Do you plan on updating this book with further revisions? If so, do the people who bought this get those updates too? I am trying to convince myself to buy this if updates are included for free :)"
emacs,36zcny,changetip,2,Sat May 23 21:42:46 2015 UTC,I'm surprised how good it looks - not common in technical books at all!
emacs,36zcny,xenow,2,Wed May 27 14:40:51 2015 UTC,Thank you! I spent a lot of time ensuring the typography's good.
emacs,36zcny,bigfondue,2,Sat May 23 21:06:32 2015 UTC,"It's a bit costly for ebook considering I'm from Croatia, but the fact that I'm spending more and more times with Emacs and its modes I'm sure it is worthy investment so I bought it."
emacs,36zcny,eric-plutono,2,Sat May 23 21:07:23 2015 UTC,Just ordered and downloaded the pdf and the epub version.
emacs,36zcny,reconsideryourbelief,1 point,Sun May 24 19:40:59 2015 UTC,"I recall you were looking into a nice paper version. Presumably, that'll only happen if you think there is the demand for it. So here's at least one vote for it. I created an account here for the purpose of telling you this, so it's more than a passing fancy.  I wanted a paper version of Bob Nystrom's book too; he made it and I bought it, so I do at least have a record of buying the paper version."
emacs,36zcny,trezor2,2,Sat May 23 13:05:36 2015 UTC,It's mostly a question of Print-on-Demand quality not being very good. I'm still researching it though.
emacs,36zcny,parolang,1 point,Sat May 23 18:51:46 2015 UTC,Congratulations. I have that book and I have to admit it’s a great potpourri of Emacs wisdom. Well done!  Price point is okay for me.
emacs,36zcny,reconsideryourbelief,1 point,Sat May 23 19:04:10 2015 UTC,Congratulations!  $1 /u/changetip
emacs,36zcny,dahanbn,2,Tue Jun 2 22:10:12 2015 UTC,"/u/mickeyp, kraml wants to send you a Bitcoin tip for 4,334 bits ($1.00). Follow me to collect it.    what is ChangeTip?"
emacs,37090u,soda-popper,3,Sat May 23 17:35:34 2015 UTC,Any hope for a dead tree version? Because they deserve it. Trees suck.
emacs,37090u,vermiculus,3,Sun May 24 17:27:07 2015 UTC,"The price is a little bit oversized for a ebook, even with the 20% discount, sorry :/"
emacs,37090u,f0086,2,Sun May 24 19:28:11 2015 UTC,yeah. at $35 i was surprised it wasn't in actual print.
emacs,370k9p,reddit_uname,14,Sat May 23 19:08:47 2015 UTC,"A few tips for stock Emacs:   C-[ can be used instead of ESC.  For many keybindings it's the quickest option, e.g. M-C-f is best done by C-[ C-f. If you need to hold down ctrl you can do that with your palm. Specifically the joint just below the pinkie finger. That works on a desktop keyboard but not on a laptop one. On a laptop one the thumb is better. The M-{ and M-} paragraph movement commands are very useful, even for navigating code. 1 in the buffer menu. 1 in the buffer menu chooses a buffer and makes it the only window in the frame. 2 in the buffer menu. This chooses a buffer and presents it in one window with the previously selected buffer in the other. (and the buffer menu removed) Bookmarks work on directories in dired. Dired uses the system trashcan if you do (setq delete-by-moving-to-trash t) in your init file. If you do C-x C-f with something like ""*.c"" then Emacs will load every file with that extension. Tags are very useful. If you're a programmer or you use TeX it's definitely worth building tags files for everything you work on. For single files imenu is useful too. M-n in Info mode. This clones the buffer so you can look at several manuals at once or follow one manual in multiple paths. C-h S is a very useful command. Suppose you have installed the GNU info manuals for a language's standard library. If you type C-h S on a command it will take you to the info node for that command. Occur (bound to M-s o) is very useful. (There's also a version for many buffers called M-x multi-occur. It searches every buffer open in Emacs, it's useful with C-x C-f *.lang, but slow.) You can search for symbols in the language you're using with isearch the command is M-s _. You can query replace symbols too with C-u M-%. find-name-dired, find-dired and find-grep-dired are very useful. Skeleton.el is useful for repeated text. Yasnippet is good too, but it's an ELPA package."
emacs,370k9p,RobThorpe,1 point,Sun May 24 02:18:19 2015 UTC,These are great! Thanks!
emacs,370k9p,RobThorpe,1 point,Sun May 24 03:53:43 2015 UTC,"It would help if you told us what you mostly use Emacs for. Is it programming? If so, in what language? Do you do lots of file moving, copying, etc?"
emacs,370k9p,RobThorpe,1 point,Sun May 24 14:29:47 2015 UTC,"I use it for both programming and writing documents in latex. Languages I use frequently include R, python, java, c++ with the occasional c. I do lost of searching for things, sometimes among different files, sometimes not knowing what it is I'm looking for. Besides entering lots of text, I also read text (latex or programming) in it."
emacs,370k9p,instant_sunshine,2,Sun May 24 15:10:51 2015 UTC,"To be honest, I don't know that much about R, python, java, C++ or Latex.  I occasionally program in C, but not the others.  Hopefully, others can help you with that.  For programming tags are very useful. It's definitely worth building tag files and creating a makefile target for them.  As instant_sunshine mentioned, searching with grep & rgrep is very useful. For that type of searching you have two general options. There are the external programs like grep and find, and the commands that use them like rgrep. Those are fast, for large codebases they're the only way to work. Then you have the in-Emacs things like occur and multi-occur. Occur is always fastest within one particular file. Loading up lots of files into Emacs and using multi-occur is often slower and more cumbersome than using grep. It can be useful though, for example, if you want to exclude certain files from the search. In that case you load all the files except those ones then use multi-occur."
emacs,370k9p,RobThorpe,6,Sun May 24 16:29:47 2015 UTC,"rgrep (recursive grep) like Ag or Ack query-regexp-replace has great optional lisp based replacement to process your matches/groups. map-query-regexp-replace ... I recently discovered this, replace each match with a member of an adhoc list CUA rectangle mode - the copy/paste (kill/yank) handling of columns is excellent.  Can also fill a sequence of numbers, at different increments and format strings. In other words you could format as binary, octal, hex, or with padding, alignment etc. jump to Occur mode from iSearch C-s / C-r ... Use M-s o and occur will open with the search term, highlighting all matches in the file. Occur is really nice, especially if you get creative with your match/patterns (use it to show all the headings in a markdown doc for a trite example.) Dired is just great, try the % commands ...  C-h f and C-h v ... Emacs lisp Function and Variable info ... a treasure trove. did I mention Wgrep in Rgrep mode? I didn't you can edit the text in a rgrep search... (It'll work in Ag, Ack etc too.) C-s and C-r should be your mouse now btw, check? ido is stock since Emacs v22 Org (that's an obvious one right?) beef up nxml mode with some schemas, relaxNG format is recommended. You'll get inline error highlighting etc. find/build what you need for the XML/HTML dialects you work with. plenty more ... I'll add as I remember them"
emacs,370k9p,instant_sunshine,2,Sun May 24 11:50:39 2015 UTC,"I like that list. Also, writable dired is useful in dired C-x C-e."
emacs,370k9p,instant_sunshine,2,Sun May 24 12:44:32 2015 UTC,"Oh yes, forgot wdired always handy."
emacs,370k9p,nivekuil,1 point,Sun May 24 15:58:49 2015 UTC,"Thanks! Great list, I didn't know you could jump to occur mode from iSearch."
emacs,370k9p,Grue,2,Sun May 24 15:12:47 2015 UTC,"Occur mode has a writable / edit mode too, press e"
emacs,370k9p,robertmeta,3,Sun May 24 16:00:03 2015 UTC,"I'm the author of corral, which some people have found pretty useful for streamlining their text editing workflow. If you aren't able to install the package, here's a gist with two big commands that have most of the functionality, plus a few bugs."
emacs,370k9p,hvis,1 point,Sat May 23 20:54:02 2015 UTC,Cool!
emacs,370k9p,nandryshak,4,Sat May 23 22:26:10 2015 UTC,"multiple-cursors   Macros, macros, macros. Keyboard macros are great and pretty easy to use. F3 to start recording, F4 to stop recording, F4 again to run the last recorded macro. You can also save macros, store several macros, insert variables and so on (read the docs)."
emacs,370k9p,shackra,2,Mon May 25 15:14:08 2015 UTC,Take all plugins you like -- jam them in your init.el... done!   Are they worried about security issues?
emacs,370k9p,hvis,1 point,Sat May 23 19:38:21 2015 UTC,They are worried about security issues and licensing issues. I don't really want to fight the power on this one to run some possibly untrusted elisp or elisp that's licensed with AGPL.
emacs,370k9p,RobThorpe,1 point,Sat May 23 19:45:02 2015 UTC,"There's nothing to worry about in AGPL.  It wouldn't make sense to license elisp under it either: its target codebases are web applications. As long as you're not writing a web application for your customers in Emacs Lisp, AGPL's specifics don't apply."
emacs,370k9p,eric-plutono,2,Sat May 23 20:22:28 2015 UTC,"That may be so, but it doesn't change the fact that I'm not supposed to install packages"
emacs,370k9p,joeheyming,8,Sat May 23 21:46:09 2015 UTC,Where do you work? Just for reference so I remember never to take a job there.
emacs,370k9p,joeheyming,3,Sun May 24 01:44:50 2015 UTC,are you working for the Area 51?
emacs,36y98u,shackra,10,Sat May 23 03:09:36 2015 UTC,The SP/s in his mode line means that he's using smartparens in strict mode. This has the capability to move the parens like that (among many other things).
emacs,36y98u,jcsims,6,Sat May 23 04:47:56 2015 UTC,Here's a very quick demo of a few things you can do with smartparens (by no means comprehensive! that'd take a while!)  http://i.imgur.com/1Hi2WNL.gif  See https://github.com/Fuco1/smartparens/wiki for lots of info
emacs,36y98u,instant_sunshine,1 point,Sat May 23 05:54:27 2015 UTC,That's a damn nice demo! Where's it from?
emacs,36y98u,scarred-silence,3,Sun May 24 10:52:40 2015 UTC,"I made it yesterday for this post... TBH I think it's pretty sloppy.  I forgot to add sp-rewrap which is great.  (Not to mention, the Wiki for SP is excellent.)"
emacs,36y98u,instant_sunshine,1 point,Sun May 24 11:21:35 2015 UTC,"Oh wow, good work! We always think the things we make aren't up to scratch, for something you did in a short amount of time it's good! Obviously there were small things like having to fix typing errors but I hardly even noticed them and it doesn't really take away from the display of smartparens.  The thing I liked was that it showed examples of things I actually need my tools to do so I now know smartparents has the ability to do this stuff and from there I can look up how to do it.  If you don't mind me asking how'd you get the status bar looking so damn cool?"
emacs,36y98u,scarred-silence,1 point,Sun May 24 11:35:49 2015 UTC,I used sabof's svg-mode-line-themes to build https://github.com/ocodo/ocodo-svg-modelines still a WIP but pretty sexy relative to a plain text mode line.  I also recommend having a look at Armit Patel's modeline hack (for a text based modeline that looks pretty sweet too.)  Don't forget Powerline (as used by Spacemacs) I added a bunch of alternate separator graphics to it a few years ago.  (I'm slightly obsessed with having an awesome looking modeline.)
emacs,36y98u,instant_sunshine,4,Sun May 24 11:56:26 2015 UTC,It's not displayed on his mode-line but he's probably using something like paredit or smart-parens. EDIT: See jcsims comment - he IS using smartparens.     paredit has concepts called slurp and barf:     slurp pulls something into a bracket (|) X - > ( X ) barf pushes it back out   ( |X )  -> () X
emacs,36y98u,bhrgunatha,1 point,Sat May 23 03:27:28 2015 UTC,I've been using paredit for sometime now. I still chuckle at barf and slurp.
emacs,36y98u,cranil,3,Sat May 23 09:47:57 2015 UTC,Barf it up! And ssslurp it back in!
emacs,36y98u,vermiculus,3,Sun May 24 17:29:10 2015 UTC,Never trust anyone that uses menubar mode ಠ_ಠ
emacs,36y98u,PinkBalloons,3,Sat May 23 20:29:56 2015 UTC,i also hate the menu bar now – it's a waste of space for me – but it was damned useful when learning emacs.
emacs,36yeyo,shackra,1 point,Sat May 23 04:09:31 2015 UTC,"Without knowing the contents of your dir-locals file, you should verify that the variable is being set for the correct mode (or nil for all modes).  http://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html"
emacs,36yeyo,chrisdbarrett,1 point,Mon May 25 09:56:17 2015 UTC,I added the variable anyway and it is being modified as expected :)
emacs,36wjg2,abo-abo,3,Fri May 22 18:31:10 2015 UTC,"Very nice, worked perfectly! This will be useful. Thanks!"
emacs,36wjg2,bill_tampa,3,Fri May 22 19:48:20 2015 UTC,"Are you ever not writing Elisp? :P  Seriously though, thanks for this package.  I've already incorporated it into my hydra of text commands for when I'm writing.  Would you mind explaining what you didn't like about DuckDuckGo's TOS?  I saw you mentioned that in your blog post.  I'm a big fan of DuckDuckGo myself but have never incorporated it into any software, so I've never looked into getting an API key or the TOS involved with that.  So I'm curious to hear what you thought about that."
emacs,36wjg2,eric-plutono,4,Fri May 22 19:54:36 2015 UTC,"Are you ever not writing Elisp? :P   Some people like Minecraft. I like Elisp, it's better:)   I'm a big fan of DuckDuckGo myself but have never incorporated it into any software, so I've never looked into getting an API key or the TOS involved with that. So I'm curious to hear what you thought about that.   DuckDuckGo is fine, it was the Wordnik TOS that I was talking about. It basically says that I'm super-prohibited to cache, record or pre-fetch their ""content"", which they just ripped off from a free dictionary. Hypocrites."
emacs,36wjg2,eric-plutono,1 point,Fri May 22 19:59:22 2015 UTC,"DuckDuckGo is fine, it was the Wordnik TOS...   Ah sorry, I misunderstood what TOS you were referring to.   (e) Cache, record, pre-fetch or otherwise make or store local copies of the Wordnik content or Wordnik Data, including without limitation making calls for the purpose of creating, or actually creating, an independent store of the Wordnik Data. Notwithstanding the foregoing You may employ session-based caching (i.e., transient processing) of Wordnik Data as formatted for end user display (i.e., no caching of raw responses) solely for the purpose of displaying the Wordnik Data on Your Site in accordance with this Agreement;   Being a dictionary service, I would actually think they would want people to cache results to cut down on traffic from incoming requests.  I mean, I doubt the definitions on the site change all that often.  So yeah, I definitely see your point about their TOS."
emacs,36wjg2,iamtars,3,Fri May 22 20:08:27 2015 UTC,"I've been using dict-mode [1] for a number of years, and I believe that package uses Wordnet [2] and a number of other open sources.  [1] http://www.emacswiki.org/emacs/DictMode [2] http://wordnet.princeton.edu/"
emacs,36wjg2,---R,2,Sat May 23 03:09:13 2015 UTC,"Very cool!  But it requires the Internets....    For offline dictionary usage, I use sdvc.el with my copy of Merriam-Webster, Oxford, and Soules.  My internet at home is ridiculously slow.   I'm missing a good, preferably, offline Spanish-English dictionary, though."
emacs,36wjg2,smithzv,1 point,Sat May 23 20:23:51 2015 UTC,"I like this but I wonder about your use of thing-at-point.  In my install, thing-at-point only takes one argument and thus define-word-at-point barfs if no region is active.  Is there a change to the interface coming in new versions of Emacs?"
emacs,36wjg2,Mysticity,1 point,Sat May 23 10:44:12 2015 UTC,"Thanks, fixed. thing-at-point has an optional arg on 24.5, but not on 24.3."
emacs,36xw63,morphheus,4,Sat May 23 01:01:24 2015 UTC,"Don't remap RET to newline-and-indent as others say.  Just enable electric-indent-mode:  (defun my-python-hook ()   (setq electric-indent-chars '(?: 10)) ;; 10 is the \n   (electric-indent-mode t))   That means that whenever you press a ':' or a RET, emacs will automatically re-indent the code.  I have enabled electric-indent-mode for any programming mode. You can also add any key you want to the electric-indent-chars (by default it's only the RET key)."
emacs,36xw63,__rompy,1 point,Sat May 23 09:07:47 2015 UTC,This seems promising. Will try later
emacs,36xw63,DasEwigeLicht,3,Sun May 24 00:19:23 2015 UTC,"A few more things:   You don't need to explicitly press backspace. Emacs generally knows how your code might be indented and TAB will cycle the current line through these positions. If you're doing serious Python development you should get yourself either anaconda-mode or elpy. For indentation there's also aggressive-indent-mode, though it won't work with languages like Python where indentation is not absolute."
emacs,36xw63,tuhdo,1 point,Sun May 24 18:14:53 2015 UTC,Yeah I just discovered how tab works. Neat.
emacs,36xw63,__baxx__,2,Sun May 24 20:36:13 2015 UTC,"As /u/shackra, you bind newline-and-indent to RET in evil insert state. I suggest that you could just go with Spacemacs. Everything is already premade."
emacs,36xw63,shackra,1 point,Sat May 23 05:55:02 2015 UTC,"I also moved from vim recently and was having the same problem earlier, unfortunately I don't have a solution  :(  I'm using spacemacs, not sure if you've seen it, geared towards using vim keys in Emacs basically.... So far so good."
emacs,36vwiy,ReneFroger,5,Fri May 22 15:22:37 2015 UTC,This is fabulous.  Thank you.
emacs,36vwiy,pzone,3,Fri May 22 21:54:07 2015 UTC,"First of all, great package.  Thanks for sharing!  Second, does anyone know if anything similar exists for contacts in Thunderbird?"
emacs,36vwiy,eric-plutono,3,Fri May 22 22:19:25 2015 UTC,"Hmm, there is something better/newer, called org-vcard."
emacs,36w5e5,cestdiego,2,Fri May 22 16:50:05 2015 UTC,I don't get it. What is it doing here?
emacs,36w5e5,deadmaya,2,Wed May 27 03:52:09 2015 UTC,"Putting icons according to file extensions in the speedbar like this http://cedet.sourceforge.net/speedbar-multi-2.jpg. It supports images, so why not make it pretty?"
emacs,36uw53,redguardtoo,1 point,Fri May 22 09:05:58 2015 UTC,"Interesting to read it, I was already planning to set up my mail configuration in Emacs.  I assume you're using Gnus as mail client?"
emacs,36uw53,ReneFroger,2,Fri May 22 10:07:06 2015 UTC,"Yes, you can also check my ""practical gnus guide"" at https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org, including everything (mail sorting, outlook, ... for example)."
emacs,36up14,MartenBE,1 point,Fri May 22 07:24:32 2015 UTC,Maybe this can be used:   Generic string delimiters: ‘|’  Characters that start or end a string. This class differs from the string quote class in that any generic string delimiter can match any other generic string delimiter; but they do not match ordinary string quote characters.   http://www.gnu.org/software/emacs/manual/html_node/elisp/Syntax-Class-Table.html
emacs,36up14,kcin,1 point,Fri May 22 08:03:03 2015 UTC,"This approach currently works best, but sometimes I got a situation like > ... > ... <, is this even possible by using the syntax table?"
emacs,36up14,eric-plutono,1 point,Fri May 22 11:59:58 2015 UTC,Have you tried/considered defining an escape character in the syntax table and using that for any > characters which appear within >...< delimited strings?
emacs,36qs41,BruceConnor,4,Thu May 21 11:29:36 2015 UTC,Excellent!  Does it use the archive or the package-alist to do the autoremove ?  It is important because users use the archive to do automatic installation. Using the archive implies having up to date dependency graph. Using package-alist does not necessarily contains up to date dependencies. This is a chicken and egg issue though.   We now use archive for both in Spacemacs. The archives are updated for new install of packages but it is not for autoremove. It is OK but not ideal.  Do you know if MELPA keeps older versions of a package ?
emacs,36qs41,syl20bnr,3,Thu May 21 12:23:11 2015 UTC,"Does it use the archive or the package-alist to do the autoremove ?   package-alist. Running the autoremove command is like saying: “Do I have anything installed that I don't need AND didnt' ask for? If so, delete it.” So it's about removing what you don't need, the archives don't come into play here.   Do you know if MELPA keeps older versions of a package ?   It does not. Gelpa and Marmalade do, I think."
emacs,36qs41,syl20bnr,1 point,Thu May 21 13:36:44 2015 UTC,"Makes sense but users may run into this kind of corner case if they autoinstall and autoremove automatically (lots of auto :-)): https://github.com/syl20bnr/spacemacs/issues/1538  It happens when the archive contains a new dependency for a given package. The package-alist won't contain it until the given package is updated.  So it make me wonder if I should update the parent packages  when a new dependency is ""found"". Problem: it will force people to update some packages even if they don't want it. Having some kind of warning may be useful.  I guess it is the price to pay when MELPA is used as the main repo. For now MELPA is surprisingly stable given the number of packages used in Spacemacs."
emacs,36qs41,syl20bnr,2,Thu May 21 14:51:50 2015 UTC,"So it make me wonder if I should update the parent packages when a new dependency is ""found"". Problem: it will force people to update some packages even if they don't want it. Having some kind of warning may be useful.   I think the more important question is: why are you installing a dependency that the user doesn't locally need?"
emacs,36qs41,hirnbrot,2,Thu May 21 17:31:49 2015 UTC,"That's a very good question. It happens that Spacemacs not only relies on packages.el to install dependencies, it will also check if a dependency is really installed and if it is not the case then it will install it explicitly, it allows to be able to remove any package in Elpa directory and have them reinstalled correctly. I realize with your question that it may not be needed to do so and it may even be harmful since only the last version of a package can be retrieved in MELPA. Thank you!  I will try to rely only on top level packages (that is the packages explicitly listed in the layers) and use only package-alist to detect orphans. It should do it :-)"
emacs,36qs41,vb2014,1 point,Thu May 21 20:31:33 2015 UTC,"I think I see what you mean. So the issue was that spacemacs was using remote information to decide which dependencies needed installing, but local information to decide which ones could be removed?  That's definitely something to keep in mind. For now, I think package.el avoids that issue by only using local information (remote information is only used when a new package has been requested for isntallation)."
emacs,36qs41,CodyChan,1 point,Thu May 21 15:57:31 2015 UTC,"While it's nice, I've already worked around this pretty thoroughly:  My emacs config bootstraps itself (with the help of req-package), so I can just remove package-user-dir, restart it and I only have the packages I need installed."
emacs,36qs41,haxney,1 point,Thu May 21 13:02:09 2015 UTC,"Cool. FWIW, that's basically the effect of `package-install-selected-packages' in 25.1."
emacs,36sb3e,wasamasa,3,Thu May 21 18:50:16 2015 UTC,"Regular expressions are designed for matching things, not matching things that aren't there. While there are extensions to them that make achieving this goal easier (aka lookahead/behind), none of these are present in Emacs.  I'd recommend using buffer movements and checking for the presence of a regular expression before/after point instead.  What exactly are you planning to solve with this regular expression? Vim-like foldmarkers?"
emacs,36sb3e,wasamasa,2,Thu May 21 20:35:49 2015 UTC,"Thanks for the reply.  Yes, I'm trying handle Vim foldmarkers with hideshow module. It requires markers and comment regexp patterns. Unfortunately it doesn't accept a function as an option.  You are probably correct elisp does not support negative regexes or lookahead/behind. Just looking for an workaround or alternate solution, without installing any extra package."
emacs,36sb3e,nandryshak,3,Thu May 21 21:17:16 2015 UTC,"Actually, hideshow does support using functions for finding the next boundary, see python.el for a demonstration."
emacs,36sb3e,robmyers,1 point,Thu May 21 22:01:13 2015 UTC,"Regular expressions are great, and very useful tools. But I really think that a situation like this is more suited for a parser, than a regular expression"
emacs,36sb3e,politza,1 point,Thu May 21 20:24:51 2015 UTC,"It's hacky, but try:  "".*?#\s*\\([^{}][^{}][^{}]\\|[^{}][^{}][^{}].*\\|..\\|.\\|\\)\s*$""   Or for something more manageable, have a two pass system:   Get the list of comments. Remove the items in that list matching your start or end markers."
emacs,36sb3e,instant_sunshine,1 point,Thu May 21 21:54:08 2015 UTC,Try this one:  (rx (and ?# (* (or (not (any ?{ ?} ?\n))                    (and ?{ (or (not (any ?{ ?\n))                                eol                                (and ?{ (or (not (any ?{ ?\n))                                            eol))))                    (and ?} (or (not (any ?} ?\n))                                eol                                (and ?} (or (not (any ?} ?\n))                                            eol))))))          eol))
emacs,36qo2l,Mysticity,6,Thu May 21 10:34:45 2015 UTC,We are the spacemacs.  You will be assimilated.  Resistance is futile.
emacs,36qo2l,gnzlbg,3,Thu May 21 12:59:01 2015 UTC,"I am indeed swayed by pretty designs, and spacemacs fits the part. But evil-mode is not my thing. I love vim, used it before emacs, appreciate the vim way too, but I am now used to the emacs bindings. I have a paining pinky but just as your fingers learn to bleed on the guitar, and you develop a muscle memory like a pro gamer, I am comfortable atm.   Probably didn't get to advance stuff in vim so maybe I am missing things. But I want to learn this first.   And in that, I will copy all your spacemacs except evil ;)"
emacs,36qo2l,TheBB,6,Thu May 21 13:44:29 2015 UTC,"Spacemacs has a non-vim option, by the way, based on holy-mode. If evil is the only thing keeping you from using it, you might like to try it out.  It's good for a laugh, if nothing else."
emacs,36qo2l,gnzlbg,2,Thu May 21 14:05:50 2015 UTC,"You can set spacemacs to use emacs bindings. Just after installing it says:    Do you want to use emacs [e] or vim [v] key bindings?   I've been using emacs for about 5 years now and use spacemacs with emacs key bindings without any problems.   The trick is holy-mode, a mode to ""emulate"" emacs on top of evil-mode (yeah, really... but it works)."
emacs,36qo2l,trishume,4,Thu May 21 15:13:46 2015 UTC,"Nope it doesn't emulate emacs, it just puts evil into a state where it ignores everything. Basically disabling it."
emacs,36qo2l,vb2014,2,Thu May 21 21:45:37 2015 UTC,"Very nice, thanks for sharing."
emacs,36s1me,metaperl,1 point,Thu May 21 17:43:19 2015 UTC,Yesterday I answered a question similar to yours on Emacs SE.
emacs,36rq16,Synthstutter,2,Thu May 21 16:24:07 2015 UTC,"You can define your own version of suggest_save_path_from_file_name() for this, e.g.  function suggest_save_path_from_file_name(filename, buffer) {   let file;   if (filename.match(/\.pdf$/)) {     file = make_file(""/default/directory/for/pdfs"");     file.append(filename);   }   else {     file = make_file(""/default/directory/for/everything/else"");     file.append(filename);   }    return file.path; }"
emacs,36na9o,schmidthuber,7,Wed May 20 17:05:43 2015 UTC,Did anybody try building GuileEmacs on Debian or Ubuntu recently? It took several hours when I tried last time -- at which point I gave up.
emacs,36na9o,freesid,4,Wed May 20 20:07:15 2015 UTC,"I did once.  At that point byte-compiling elisp wasn't supported at build time, so it was done on every Emacs startup. Sloooooowly.  Had that improved lately? That wax one of the bigger disappointments. Once loaded, it seemed reasonably fast."
emacs,36na9o,trezor2,5,Wed May 20 20:46:31 2015 UTC,"Byte-compilation is still a work in progress, AFAIK."
emacs,36na9o,davexunit,6,Wed May 20 21:01:36 2015 UTC,"I had the same experience. I let the build finish overnight. I found it amazing that so much stuff just worked as expected, evaluated a couple of scheme expressions and went back to normal emacs because of the slow startup.  I'm still hoping that guile-emacs will become a useable alternative soonish...  edit: Thanks to everyone involved in developing/packaging guile-emacs!"
emacs,36na9o,JohannWolfgangGoatse,2,Wed May 20 22:54:41 2015 UTC,For me (running Ubuntu 14.10) building GuileEmacs took hours just as /u/freesid described.
emacs,36na9o,eric-plutono,4,Wed May 20 21:56:34 2015 UTC,Just a little something that caught my eye. I'm definitely going to try both Guix and Guilemacs!
emacs,36na9o,eric-plutono,3,Wed May 20 17:07:33 2015 UTC,"Guix is very interesting, or at least to me because I've long held a strong interest in uses of Guile Scheme for non-trivial software, and Guix is a strong example of such a use-case.  If you're a programmer with an interest in Guile, or Scheme in general, then you may find Guix's code worth reading, if only for some insight into how a fairly large system is built using that language/platform."
emacs,36qbzn,tektektektektek,1 point,Thu May 21 07:37:41 2015 UTC,"If I try and execute (replace-regexp ""\(.\)"" ""\,(upcase \1)"") I get Debugger entered--Lisp error: (error ""Invalid use of\' in replacement text"")`.   (upcase \1)   should be  (upcase \\1)   when noninteractive, I think"
emacs,36qbzn,kcin,1 point,Thu May 21 07:59:25 2015 UTC,"(replace-regexp ""^\\(.\\)"" ""\\,(upcase \\1)"") gives me the same debugger error."
emacs,36qbzn,kcin,2,Thu May 21 08:06:41 2015 UTC,If it works interactively then do an interactive one and then press C-x ESC ESC and it shows you the proper lisp version of the interactive operation.
emacs,36qbzn,RobThorpe,2,Thu May 21 09:07:59 2015 UTC,"Ah very helpful. I get:  (replace-regexp   ""^\\(.\\)""   (quote     (replace-eval-replacement       replace-quote       (upcase (match-string 1))     )   )   nil   (if     (and transient-mark-mode mark-active)     (region-beginning)   )   (if     (and transient-mark-mode mark-active)     (region-end)   )   nil )   It appears the interactive replacement is doing some intelligent code substitution."
emacs,36qbzn,RobThorpe,2,Thu May 21 09:11:55 2015 UTC,"Yes. replace-regex is only supposed to be used interactively. It has the property ""interactive-only"". People should use re-search-forward and replace-match in elisp code."
emacs,36qbzn,pacupacu,2,Thu May 21 09:28:03 2015 UTC,"The problem is that some more complex search-and-replace expressions are easier to write inside the buffer and then execute (ctrl-x, ctrl-e) than to launch interactively.  It would be more convenient to be able to construct such expressions in the current buffer and run them rather than having to resort to re-search-forward and replace-match logic."
emacs,36pjhy,shackra,1 point,Thu May 21 02:33:24 2015 UTC,"I have never used the library, but how about something like:  (defun hello-world ()    (insert ""This is a test . . .\n""))  (add-hook 'make-header-hook 'hello-world)   or  (setq make-header-hook '(                        shackra:header-python-shebang-coding                        header-blank                        header-end-line                        shackra:header-project-name                        header-copyright                        header-creation-date                        header-author                        header-blank                        header-modification-date                        header-modification-author                        header-update-count                        header-end-line                        shackra:header-free-software                        header-end-line                        header-code                        header-eof))"
emacs,36pjhy,lawlist,1 point,Thu May 21 02:45:15 2015 UTC,"I'm inserting the second snippet in the lambda for my python-mode-hook before you replied, and it's working, dirty, but finally working..."
emacs,36pjhy,ReneFroger,1 point,Thu May 21 03:18:39 2015 UTC,"Shackra, I'm wondering if you already noticed this intro to header2?"
emacs,36pjhy,ReneFroger,1 point,Thu May 21 05:25:49 2015 UTC,"I remember now, was from that post that I meet header2!  Sadly, most of the written stuff don't help me with my problem..."
emacs,36pjhy,ReneFroger,1 point,Thu May 21 05:39:29 2015 UTC,I think I found the solution. I will write an answer when I'm at home.
emacs,36otcb,Synthstutter,2,Wed May 20 23:11:15 2015 UTC,"Note: I've heard that what I'm about to describe has flaky support on non-Linux platforms.  Conkeror has a few built-in 'browser objects' which are not bound to any keys, unlike the ones bound to i, n, and so on.  The relevant one here is browser-object-paste-url.  It represents whatever URL has been most recently copied to the clipboard.  Personally I bind the object to the keys ' p like this in my Conkeror config:  define_key(content_buffer_normal_keymap, ""' p"", ""browser-object-paste-url"");   With that in place, if I have an URL on the clipboard I can browse to it by pressing ' p g, or C-u ' p g to open it in a new window, etc.  Hope that helps!"
emacs,36otcb,eric-plutono,1 point,Thu May 21 00:21:13 2015 UTC,"awesome, thanks!"
emacs,36n5wr,eric-plutono,2,Wed May 20 16:37:40 2015 UTC,i wouldn't use this (might trigger a seizure) but it is fascinating to watch the demo on github.  cool stuff.
emacs,36n5wr,xoo-,1 point,Wed May 20 16:43:45 2015 UTC,"I don't use bright or high-contrast color themes; in fact my current ""color"" theme is monochrome, heh.  So personally I don't find it visibly jarring or anything."
emacs,36n5wr,xoo-,3,Wed May 20 16:48:26 2015 UTC,"don't get me wrong, it's cool stuff.  but i also like to look up from where i am and have my variables highlighted properly.   not for me, but i appreciate it in different ways.  like art. :)"
emacs,36n5wr,ReneFroger,2,Wed May 20 17:41:44 2015 UTC,"Oh I understand, it's not for everyone.  All of us Emacs users should be familiar with how much we all seem to enjoy wildly different customizations :)"
emacs,36n5wr,ReneFroger,4,Wed May 20 18:01:54 2015 UTC,"True words, as illustrated."
emacs,36n5wr,ressis74,2,Wed May 20 19:07:32 2015 UTC,Reminds me of LimeLight.
emacs,36n5wr,ReneFroger,1 point,Wed May 20 19:06:20 2015 UTC,You reversed the parens and square brackets.
emacs,36n5wr,srt19170,1 point,Wed May 20 20:38:43 2015 UTC,"Thanks for the notification. Still struggling with the markdown syntax, I was accustomed to the old 'skool UBB-code for links."
emacs,36n5wr,Kaligule,2,Wed May 20 21:33:37 2015 UTC,"I just now saw this and your response to my comment on the other thread.  I appreciate the response, and I'll check it out."
emacs,36n2ss,gsingh93,1 point,Wed May 20 16:16:49 2015 UTC,"I've been looking for a better forward/backward word movement mode for a while. I asked on StackOverflow and the developer of this mode posted a link to his project. It's exactly what I wanted. Some might find it to be too fine grained, but it makes my emacs experience much better. It's available on melpa: http://melpa.org/#/syntax-subword"
emacs,36n2ss,CodyChan,1 point,Wed May 20 16:18:23 2015 UTC,"I posted a similar question on emacs.stackexchange.com, and someone gave this link, and I love it, I hope I see this earlier.   I check this site everyday, why didn't I notice this post?!"
emacs,36mgq3,bquark78,9,Wed May 20 13:42:51 2015 UTC,"Do you have shell access to the remote system?  If so, nothing beats a local instance of emacs accessing remote files via TRAMP mode for conservation of bandwidth."
emacs,36mgq3,bigfig,1 point,Wed May 20 14:29:18 2015 UTC,"Just found out about tramp-mode earlier this week. As a new emacs user who has been doing a significant amount of coursework on remote systems, it's a wonderful thing."
emacs,36mgq3,LacksDirection,2,Wed May 20 20:15:59 2015 UTC,"What about the graphics are too complicated? Not trying to be condescending, just trying to get a better grasp on the issue. Are you using an Emacs extension that makes heavy use of graphics?  If you purely want to access standard Emacs keybindings (which is all I ever really use), then you can launch Emacs from the terminal using emacs -nw and that'll load pure Emacs, no graphics at all."
emacs,36mgq3,cmputrnx,1 point,Wed May 20 14:13:31 2015 UTC,"The graphics haven't got that much more complicated.  Your problem could be because the upgrade of X has given you a version that works slower remotely.  Another possibility is that the two versions of Emacs were built with different GUI toolkits. Was the old one built with Xaw and the new one built with GTK+? In that case you could try an Xaw build of a new version. I may be wrong but I think the GTK+ one causes more X traffic.  I agree with bigfig, try using TRAMP from your local machine."
emacs,36mgq3,RobThorpe,1 point,Wed May 20 16:02:29 2015 UTC,"I know nothing about SL, but there is a package emacs24-lucid in Debian which uses Xaw3d instead of Gtk"
emacs,36l8oo,HAEC_EST_SPARTA,3,Wed May 20 05:22:08 2015 UTC,"How recently? You are sure your mails are not greylisted?  Also, technically, it's your smtp configuration that is not working."
emacs,36l8oo,monotux,1 point,Wed May 20 06:36:15 2015 UTC,"The mails shouldn't be greylisted; I can send messages without any issues from the provider's web interface.  If my SMTP configuration is the issue here, do you have any idea how I could fix it?"
emacs,36l8oo,MikeSeth,1 point,Wed May 20 06:38:03 2015 UTC,"The mails shouldn't be greylisted; I can send messages without any issues from the provider's web interface.   And the web interface would be connecting from a different IP and composing headers differently.   If my SMTP configuration is the issue here, do you have any idea how I could fix it?   (setq message-send-mail-function 'smtpmail-send-it    starttls-use-gnutls t    smtpmail-starttls-credentials '((""smtp.zoho.com"" 587 nil nil))    smtpmail-auth-credentials      '((""smtp.zoho.com"" 587 ""name@domain.tld"" nil))    smtpmail-default-smtp-server ""smtp.zoho.com""    smtpmail-smtp-server ""smtp.zoho.com""    smtpmail-smtp-service 587    **smtpmail-debug-info t** )"
emacs,36l8oo,codemac,2,Wed May 20 14:39:54 2015 UTC,Is there a queuing mode in mu4e? Are you accidentally queuing all these messages up instead of sending them?
emacs,36l8oo,mjhoy,1 point,Wed May 20 06:25:35 2015 UTC,"It does have a queuing mode, but you have to manually configure it, and I haven't done so."
emacs,36jep5,ReneFroger,10,Tue May 19 20:45:04 2015 UTC,"I used paredit before smartparens available and now I'm using smartparens. With paredit, you have to setup per major mode and there are pitfalls to be aware of. i.e. try paredit in a SLIME REPL. It's annoying.  With smartparens, it's easy to setup and extend (this is important).  For example, in language with braces, normally when you open the pair void test () {} and if the block is multiline, you can customize smartparens so that when you press RET in the middle of the pair, it becomes like this:  void test () {      [] -> cursor here }   You can customize for any language to your liking.  You can rewrap a pair in the current to something else with sp-wrap-sexp. For example, you have something like (a b c d e), then M-x sp-wrap-sexp, type [ and it changes to [a b c d e].  Currently, with corral joins the rank, I am finally satisfied with my parentheses. I already try other solutions i.e. expand-region then wrap, evil/vim-surrounds, all require more key strokes to wrap a symbol at point and quickly add more to it."
emacs,36jep5,tuhdo,9,Wed May 20 03:49:17 2015 UTC,"paredit-mode is the tried-and-true package for editing Lisp code, while maintaining ""integrity"".  electric-pair-mode replaces autopair (it has had all (?) features ported by the author), and it's good for non-Lisp languages.  I've honestly never tried the other two."
emacs,36jep5,hvis,3,Tue May 19 20:54:54 2015 UTC,paredit is amazing!  And invaluable when writing lisp.  It's stable with 10 years of development and well documented (I believe the ref. card is build from the source).  It's got cool shit like M-?.
emacs,36jep5,---R,1 point,Tue May 19 22:02:48 2015 UTC,True!
emacs,36jep5,Levensn,3,Wed May 20 20:55:51 2015 UTC,smartparens obsoletes both auto/electric pair and paredit. Easily worth the switch.
emacs,36jep5,nandryshak,2,Tue May 19 21:32:26 2015 UTC,"It really depends on what you use it for. If you're mostly editing lisp/clojure type languages there's no reason to switch from paredit to smartparens. Smartparens works for all kinds of languages but every time I tried it with clojure I ran into annoying cases where it didn't work, so I'm sticking to the combination of paredit/paxedit for lisps. I enable smartparens for the other languages if needed.  Either one is a great choice depending on your needs."
emacs,36jep5,otijhuis,1 point,Tue May 19 23:18:05 2015 UTC,"I'm missing your argumentation why the one is better than the another packages. Please explain, I would love to hear it."
emacs,36jep5,nandryshak,2,Tue May 19 21:37:27 2015 UTC,I wrote a top level comment for this.
emacs,36jep5,nandryshak,12,Tue May 19 21:44:10 2015 UTC,"I use smartparens. It's very feature-full and requires little to no configuration. It just works. It supersedes both paredit and autopair/electric-pair.   Lispy has some nice features that aren't found in the other packages. It uses a novel, modal approach that reminds me of Vim. But instead of explicitly setting the states, it's context aware. Smartparens is more Emacs-like. abo-abo is also a great, active (in both code and community) developer."
emacs,36jep5,srt19170,2,Tue May 19 21:42:58 2015 UTC,Thanks for your arguments. Looks interesting. And true words about abo-abo. He is doing a great job in the Emacs community. Arthur Marlabara and the others too!
emacs,36jep5,eric-plutono,5,Tue May 19 21:49:34 2015 UTC,"I'm probably just old school and stuck in my ways, but I've never liked ""electric"" paren modes that try to automatically balance parens.  I often end up in a situation where the balancing is syntactically correct but semantically incorrect, and it's a pain to fix it.  I think I generally dislike packages that change my content ""automatically"".  In theory I think that's great, in practice not so much.  What I have wanted to try is a mode that does a visual ""narrow to region"" for the sexp at point.  It would slightly grey out the code outside of the sexp.  Does something like that exist?"
emacs,36jep5,kovrik,4,Tue May 19 21:48:27 2015 UTC,"What I have wanted to try is a mode that does a visual ""narrow to region"" for the sexp at point. It would slightly grey out the code outside of the sexp. Does something like that exist?   https://github.com/larstvei/Focus"
emacs,36jep5,abo-abo,2,Wed May 20 11:28:36 2015 UTC,"Same here. Tried Paredit, Smartparens and Lispy. They all just don't allow me to write what I want.  For example, in Lispy, when I'm writing Clojure code:  (defn test |)   I want to insert [] brackets.  I press [ and Lispy executes lispy-backward command instead of inserting brackets. Have no idea how to do what I want to.   So, for me autopair works fine."
emacs,36jep5,kovrik,5,Tue May 19 22:02:49 2015 UTC,"In lispy, to insert [], the binding is }. It's a bit unfortunate, but is a fair price for navigating with [ and ]. If you wish, you can rebind it and navigate with C-M-n and C-M-p instead.  For Clojure, there's a bunch of other cool stuff:   e not only evals, but will also auto-start CIDER if it's not on 2e evals and inserts the result as a comment E evals and inserts the result xr evals and replaces the sexp with the result xf will flatten the sexp at point, i.e. find its definition and substitute the args. This is really cool if you want to apply only part of the function at point. F navigates to definition, D navigates back e can also do a ""debugging"" eval: if you mark a symbol and a sexp (as in a let binding), it will def the symbol to the sexp.   Also, I did some work on g recently, the tags should come up even faster and be very up-to-date."
emacs,36jep5,eric-plutono,1 point,Wed May 20 08:30:51 2015 UTC,"Thanks, abo-abo! I'll give lispy another try. It's awesome that author gives such a helpful answer."
emacs,36jep5,ducketh,2,Wed May 20 21:32:44 2015 UTC,"It's awesome that author gives such a helpful answer.   It's because abo-abo sleeps one hour per day and spends the rest writing Emacs Lisp to benefit his ""brothers in arms"" :P  (Seriously though, he does great work.  I rewrote all by key-binding configurations to make use of his Hydra package.)"
emacs,36jep5,eric-plutono,1 point,Wed May 20 22:01:37 2015 UTC,"I'd like to see how you went about that. I thought about replacing all my leader bindings with hydra, but then realized I need to be able to add things later, and I don't think hydra can do that so easily? Especially not when you're defining the documentation popup separately..."
emacs,36jep5,ducketh,2,Thu May 21 01:52:04 2015 UTC,"It looks like this (big paste of code coming...):  (defhydra hydra-yank-pop ()   ""yank""   (""C-y"" yank nil)   (""M-y"" yank-pop nil)   (""y"" (yank-pop 1) ""next"")   (""Y"" (yank-pop -1) ""prev"")   (""l"" helm-show-kill-ring ""list"" :color blue))  (global-set-key (kbd ""C-y"") #'hydra-yank-pop/yank) (global-set-key (kbd ""M-y"") #'hydra-pank-pop/yank-pop)  (defhydra hydra-yasnippet (:color blue :hint nil)   ""               YASnippets --------------------------------------------   ^Modes:^    ^Load/Visit:^    ^Actions:^    _g_lobal    _d_irectory      _i_nsert   _m_inor     _f_ile           _t_ryout   _e_xtra     _a_ll            _n_ew ""   (""d"" yas-load-directory)   (""e"" yas-activate-extra-mode)   (""i"" yas-insert-snippet)   (""f"" yas-visit-snippet-file :color blue)   (""n"" yas-new-snippet)   (""t"" yas-tryout-snippet)   (""g"" yas/global-mode)   (""m"" yas/minor-mode)   (""a"" yas-reload-all))  (global-set-key (kbd ""C-c y"") 'hydra-yasnippet/body)  (defhydra hydra-text ()   ""text""   (""w"" ejmr/toggle-writing-mode ""writing-mode"")   (""f"" auto-fill-mode ""fill"")   (""a"" align-regexp ""align"")   (""i"" ispell-buffer ""ispell"" :color blue)   (""o"" sort-lines ""sort"")   (""l"" visual-line-mode ""line"")   (""s"" flyspell-mode ""flyspell"")   (""t"" typo-mode ""typo""))  (global-set-key (kbd ""C-c t"") 'hydra-text/body)  (defhydra hydra-desktop (:color blue)   ""desktop""   (""c"" desktop-clear ""clear"")   (""s"" desktop-save ""save"")   (""r"" desktop-revert ""revert"")   (""d"" desktop-change-dir ""dir""))  (global-set-key (kbd ""C-c d"") 'hydra-desktop/body)  (defhydra hydra-major (:color blue)   ""major-mode""   (""t"" text-mode ""text"")   (""d"" diff-mode ""diff"")   (""l"" lua-mode ""lua"")   (""p"" php-mode ""php"")   (""a"" mail-mode ""mail"")   (""m"" markdown-mode ""markdown""))  (global-set-key (kbd ""C-c m"") 'hydra-major/body)  (defhydra hydra-minor ()   ""minor-mode""   (""i"" global-aggressive-indent-mode ""indent"")   (""f"" global-flycheck-mode ""flycheck"")   (""c"" focus-mode ""focus"")   (""b"" highlight-blocks-mode ""hl-blocks"")   (""v"" view-mode ""view"")   (""s"" firestarter-mode ""firestarter""))  (global-set-key (kbd ""C-c n"") 'hydra-minor/body)  (defhydra hydra-quickrun (:color blue)   ""quickrun""   (""q"" quickrun ""run"")   (""r"" quickrun-region ""region"")   (""w"" quickrun-with-arg ""with-arg"")   (""s"" quickrun-shell ""shell"")   (""c"" quickrun-compile-only ""compile"")   (""p"" quickrun-replace-region ""replace""))  (global-set-key (kbd ""C-c q"") 'hydra-quickrun/body)  (defhydra hydra-command (:color blue)   ""command""   (""w"" whitespace-cleanup ""whitespace"")   (""i"" helm-imenu ""imenu"")   (""g"" helm-git-grep ""git-grep"")   (""n"" gnus ""news"")   (""v"" visit-tags-table ""visit-tags"")   (""t"" find-temp-file ""temp""))  (global-set-key (kbd ""C-c x"") 'hydra-command/body)    ... but then realized I need to be able to add things later, and I don't think hydra can do that so easily?   When I need to add things I add them to the appropriate defhydra and then C-x C-e it for the changes to have effect.  Since I usually don't define complex documentation popups, this works well for me and is quick to do."
emacs,36jep5,angelic_sedition,2,Thu May 21 02:10:17 2015 UTC,"mm... Yeah, that wouldn't jive with the way evil-leader is supposed to work... I mean, it'd certainly complement it, but my big issue is that I'd like to add bindings to a hydra separate of the initial definition.  Thanks for the snippet, in any case :)"
emacs,36jep5,DasEwigeLicht,2,Thu May 21 02:22:30 2015 UTC,"You can do something like this:  (eval-after-load ""lispy""  `(progn     (define-key lispy-mode-map ""["" 'nil)     (define-key lisp-mode-map ""]"" 'nil)))   I also don't like that they're bound by default."
emacs,36jep5,otijhuis,2,Wed May 20 04:25:30 2015 UTC,Should be with-eval-after-load.
emacs,36jep5,kovrik,1 point,Thu May 21 09:01:36 2015 UTC,Just curious what paredit and such don't allow you to do. Are there specific use cases you have a problem with? I can't imagine writing Clojure code without paredit/paxedit (or smartparens if you prefer). Use it all the time with Clojure and no problems at all.
emacs,36jep5,tuhdo,1 point,Tue May 19 23:22:20 2015 UTC,"I wrote the example in my comments above.  By the way, forgot to mention that I use evil-mode. Maybe because of that I don't really get paredit/smartparens/lispy.  Guess vim's text objects are enough for me. Like, you know, if I want to delete everything between parens - just di(.  And so on."
emacs,36jep5,otijhuis,3,Wed May 20 00:22:23 2015 UTC,"The problem with Vim/Evil is that it is not Lisp aware. For example, try ciW in Vim at a word/symbol with a paren next to that word/symbol. Then the paren is deleted as well and this is extremely annoying. Maybe you also want to look at The Animated Guide to Paredit to see the parens packages are not just for auto-closing pairs. Personally I find it very annoying if I don't have barp/slurp when writing Lisp code."
emacs,36jep5,aerique,1 point,Wed May 20 04:08:22 2015 UTC,"I use evil-mode as well. The example above works perfectly fine with paredit + evil. Pressing [ while typing in insert-mode ends up like (defn test [|]), just like you'd expect. Like tuhdo mentioned, evil knows nothing about lisps. I saw that some package implemented the ""form"" text object, which would be nice to have though. But even though I love text objects and use them all the time, I can't imagine writing Clojure code without paredit. I hardly look at closing parens anymore. Paredit does take a little getting used to. The guide tuhdo mentioned is very good. Once you get the hang of it it's much faster than doing it manually with evil commands. Especially when your Clojure forms get larger and you also want to move parens around. Barfing/slurping you can't do with simple evil commands."
emacs,36jep5,Denommus,1 point,Wed May 20 05:37:07 2015 UTC,"Same here, I tried most of them but they just annoy me and I don't feel they offer anything to invest enough time in them to get past 20+ years of doing things a certain way.  They don't really seem to offer enough in the way of saving time or writing code correctly to invest time in them.  (I use evil-mode btw.)"
emacs,36jep5,abo-abo,1 point,Wed May 20 08:40:58 2015 UTC,and it's a pain to fix it.   Killing and yanking usually work fine for that.
emacs,36jep5,aptmnt_,4,Tue May 19 22:02:17 2015 UTC,"I'd say that lispy is the most opinionated, the most extensive and the most well tested of all the options that you've listed.  If you're into LISP big time, you should consider it.  But if you're looking for an ""invisible companion"" that you use for electric pairs, with maybe 2-3 other commands that you use once every other day, lispy isn't for you, it will get in your way.  Also, autopair is obsoleted by electric-pair-mode (the autor is the same for both, I think)."
emacs,36jep5,Starlight100,2,Tue May 19 21:39:53 2015 UTC,"Lispy is amazing. I'm using it with smartparens, and and considering dropping the latter. Rather than go into too many details, I'll just say that it allows me to occasionally enter a state of flow while wrangling parens. I look forward to making structural changes to my code; it's amazing."
emacs,36jep5,otijhuis,4,Wed May 20 02:55:38 2015 UTC,"I use paredit + lispy + hydra + evil + aggressive-indent for lisp. At the same time.  When using evil, lispy is only active during insert mode so I have very few issues. I'm able to use it successfully with paredit. I mostly use lispy for the convienient single key barf/slurp. I use a custom hydra (invented by abo-abo, the same author of lispy) for barf/slurp (triggered via the key-chord package) when my cursor is not at a paren.  For normal languages (javascript, C#, sql, etc)  I use electirc-pair. It works exactly the way I want for those langs.  I tried smart-parens briefly. I can't remember why I switched back to paredit, something didn't behave quite like I wanted. I should look at it again."
emacs,36jep5,CQQL,1 point,Wed May 20 02:27:51 2015 UTC,"Had the same thing with smart-parens. Great project, especially when using a lot of different languages, but I ran into some strange problems now and then when writing Clojure. Might be fixed now but paredit has been great.  I'm really curious about your Emacs setup though. I'm already using paredit, evil and aggressive-indent and have been meaning to take a look at hydra and lispy. Do you happen to have your Emacs config on github or such?  You might like paxedit as well. Adds some nice extra stuff on top of paredit."
emacs,36h6dg,herrbernd,9,Tue May 19 10:46:21 2015 UTC,That's the thing with books: Updating them is a hard job.
emacs,36h6dg,rhabarba,5,Tue May 19 11:05:58 2015 UTC,"And you can't use i, s or C-h S on them."
emacs,36h6dg,RobThorpe,3,Tue May 19 22:29:56 2015 UTC,Embrace the journey.  It is wondrous and fulfilling.
emacs,36h6dg,pkuriakose,4,Tue May 19 21:58:41 2015 UTC,I want to know what they'd do if I tried to order that magnetic tape.
emacs,36h6dg,senatorpjt,3,Wed May 20 00:54:29 2015 UTC,People do still use magnetic tape today.
emacs,36h6dg,newfor2015,1 point,Wed May 20 05:36:45 2015 UTC,"one day, you'll be glad we've waited so long for everything to go wrong in your life   – magtape, probably"
emacs,36h6dg,vermiculus,2,Wed May 20 11:22:24 2015 UTC,You can download the newest version of that same document from gnu.org. I did a few years ago and printed it out via Lulu. It was something like $10 and came out really well.
emacs,36h6dg,imacarpet,7,Tue May 19 12:32:38 2015 UTC,"It's not about a recent version of the manual, I think it's cool that this thing is almost 30 years old. It's a bit of unix history here. The order form for the source-code is a symbol for the first days of the copyleft-movement and the beginning of the gpl. stuff like that was quite often the reason for controvery / discussion in the open-source world. It's open source code distribution before the broad use of the internet and way before github :)"
emacs,36h6dg,ReneFroger,2,Tue May 19 14:22:53 2015 UTC,"Looks like the volume is in a similar format to the books I used to start learning linux.  The books I acquired were actually on unix networking, but that was good enough to get me started.  I acquired them by pulling them from my neighbours rubbish bin."
emacs,36h6dg,rhabarba,2,Wed May 20 05:42:40 2015 UTC,"Nice to see it. It seems that in the all 27 years, anything isn't changed. So I'm wondering if that's a good sign or a bad sign?  For example, the Emacs keybindings are rumored for some people to be not very convenient."
emacs,36h6dg,MonsieurBanana,7,Tue May 19 11:07:29 2015 UTC,Depends. OS X users might disagree.
emacs,36h6dg,rhabarba,3,Tue May 19 11:17:30 2015 UTC,"Oh yeah, why? I'm interested, tomorrow I start a new job and they'll give me a mandatory mac.   Never used one before and I'm afraid it won't be a smooth transition (actually it's gonna be awful because they're giving me a french layout while I'm used to a qwerty one, but I hope I can change the keyboard)."
emacs,36h6dg,vermiculus,8,Tue May 19 12:27:22 2015 UTC,"OS X uses a lot of Emacs keybindings, including C-a/C-e and even C-k. Sadly, M-w and C-y don't work as expected by default though."
emacs,36h6dg,scex,1 point,Tue May 19 12:47:47 2015 UTC,"It was a wonderful day when I discovered this. Sometimes, I can forget that I'm not in Emacs all the time, but little things like that keep my grounded in this imperfect world :)  By the way, do you know how to rebind RES's C-e functionality to another key? That always gets me."
emacs,36h6dg,r0but,1 point,Wed May 20 11:24:04 2015 UTC,The Bash shell (as well as Fish and ZSH) uses a lot of these by default as well.
emacs,36h6dg,serendependy,7,Sun May 24 03:35:26 2015 UTC,"If you're going to be using Emacs on it, do yourself a favor and swap Ctrl and caps lock in osx keyboard options."
emacs,36h6dg,vermiculus,3,Tue May 19 16:01:14 2015 UTC,Can't upvote this enough. The Caps position is just so convenient for control on most keyboards.
emacs,36h6dg,EatMoreCrisps,2,Wed May 20 02:38:57 2015 UTC,"Hot diggity yes. If you're on Windows, SharpKeys. Linux? xmodmap. (Actually, I think there's a link in the sidebar/wiki about rebinding the key on most platforms.)"
emacs,36h6dg,tfofurn,4,Wed May 20 11:24:59 2015 UTC,"So remap them? Or get a ""happy hacker"" keyboard, with Ctrl next to your left pinky."
emacs,36h6dg,Kinky_German,11,Tue May 19 12:31:54 2015 UTC,"Emacs basic keybindings are from a standard that predates the CUA (Ctrl-X for cut etc.) standard.  Quite a lot of why people find them confusing is because they're unfamiliar, which is a legitimate issue.  However, many of them, e.g. ctrl-n and ctrl-p for next and previous lines (moving up and down), while they're not beside each other on the keyboard, are absolutely fine and easy to use once they're in your muscle memory.  Vi has a relatively elegant input language of keys, with a more concise structure.  However in my experience it doesn't matter much, since once it's in muscle memory the 'elegance' becomes irrelevant.  If you like that you can use the 'evil' package in Emacs to get vi keys editing.  Both Emacs and vi have way better keyboard controls than just about any other editor.  If you can't move your cursor around without lifting your hand to the arrow keys, then that environment is a non-starter ergonomically."
emacs,36h6dg,ItsAConspiracy,3,Tue May 19 13:03:37 2015 UTC,I've been happily using viper for about a decade now.  Is there anything that makes evil better?
emacs,36h6dg,__baxx__,2,Tue May 19 14:56:37 2015 UTC,"Apparently Evil is a more complete Vim experience. Since I do not have a Vim background, I cannot comment on that, but I think it is considered the best Vim experience you can get using Emacs. I have been using it as part of the Spacemacs setup for a few weeks now."
emacs,36h6dg,EatMoreCrisps,2,Tue May 19 21:24:15 2015 UTC,"It seems pretty solid. Minor anecdote: one of my favorite obscure vim features is :norm, I've tried it in lots of emulators, and evil is the only one I've found where it works."
emacs,36h6dg,tealeg,2,Tue May 19 23:02:02 2015 UTC,If you want to try a preconfigured evil setup spacemacs might be worth a look
emacs,36h6dg,a13ph,1 point,Tue May 19 23:58:35 2015 UTC,"I have no idea - not my thing, but Evil seems to be the most recommended and to have a lot of momentum.  I haven't heard viper mentioned for a while."
emacs,36h6dg,kabbotta,2,Tue May 19 16:25:25 2015 UTC,"One thing about the emacs keybindings is that the make sense notionally (Ctrl-p for previous, Ctrl-n for next, Ctrl-y for yank, Ctrl-k for kill-line.. etc. etc..) this actually helped me a lot when transitioning from QWERTY to Colemak.  The same transition with VI keybindings is a nightmare - you really do have to remap all the binding for it make sense again."
emacs,36h6dg,autowikibot,1 point,Wed May 20 08:22:48 2015 UTC,"well, many vi keys are mnemonics too, but there sure are quite a lot of positional ones and ""i guess it just goes here, since it makes most sense after everything else"""
emacs,36h6dg,mmellinger66,1 point,Sat Jun 13 11:36:01 2015 UTC,"I personally found that changing my keyboard layout to match the old lisp keyboard makes emacs default keybindings much more sane and easy to work with. I used to use evil, but now with the new layout, I don't see any reason to even bother with it. I don't even have caps lock remapped.  The lisp layout has the three main mod keys laid out like this:  Super - Alt - Ctrl - Space - Ctrl - Alt - Super  It makes all the difference."
emacs,36h6dg,jeenajeena,1 point,Wed May 20 04:16:08 2015 UTC,"IBM Common User Access:       Common User Access (CUA) is a standard for user interfaces to operating systems and computer programs. It was developed by IBM and first published in 1987 as part of their Systems Application Architecture. Used originally in the MVS/ESA, VM/CMS, OS/400, OS/2 and Microsoft Windows operating systems, parts of the CUA standard are now implemented in programs for other operating systems, including variants of Unix. It is also used by Java AWT and Swing.     Interesting: Cut, copy, and paste | Motif (software) | Tab key | Clipboard (computing)   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
emacs,36jud1,tfofurn,1 point,Tue May 19 22:31:40 2015 UTC,"I can't help you with C-x 0123456789 in older, current or future versions of Emacs -- since you can make your own keyboard shortcuts, the existing key bindings are of least importance (in my opinion).  M-x switch-to-buffer and M-x switch-to-buffer-other-window are your friends.  If a window is dedicated, the display buffer family of functions will try to avoid it:  http://www.gnu.org/software/emacs/manual/html_node/elisp/Dedicated-Windows.html  Here is a link to an example of how to write your own display buffer left/right functions:  http://stackoverflow.com/a/21544307/2112489  Here is a link to an example of how to write your own display buffer below function:  http://stackoverflow.com/a/21591259/2112489  Your other friends are M-x split-window-vertically and M-x split-window-horizontally.  I recommend opening up window.el and familiarizing yourself a bit with the source-code -- M-x find-library RET window RET  You'll see a few other interactive functions that may be of interest to you, and you will gain an insight into writing your own display buffer functions and using the display-buffer-alist.  Here is the link to the meat of the Emacs documentation that deals with display-buffer, which gives a working example:  http://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Action-Functions.html  I wish there had been more examples when I started using Emacs, but sadly the documentation is sparse.  This will be an ongoing learning project, with some to a lot of experimentation required -- you will not likely get it all in one sitting.  If you want to work with multiple frames, then here is a complex example utilizing the display-buffer-alist:  http://stackoverflow.com/questions/18346785/how-to-intercept-a-file-before-it-opens-and-decide-which-frame"
emacs,36jud1,lawlist,1 point,Wed May 20 00:14:51 2015 UTC,"You're right that I should have referenced function names (switch-to-buffer-other-window) instead of the keyboard shortcuts.    Fortunately, I didn't need to write a new function; the customize system already had what I needed.  Thank you!"
emacs,36ikau,ehetzner,1 point,Tue May 19 17:27:55 2015 UTC,Probably a more useful link: http://melpa.org/#/totd  Hope it helps! I've been discovering unused commands
emacs,36he99,broken_symlink,1 point,Tue May 19 12:16:29 2015 UTC,"The only thing that looks suspicious is this:  (unless window-number-meta-mode-map   (setq window-number-meta-mode-map (make-sparse-keymap))   (window-number-define-keys window-number-meta-mode-map ""M-""))"
emacs,36fzct,cutejumper,6,Tue May 19 02:20:06 2015 UTC,"You should have a look at semantic-stickyfunc-enhance. Demos in the link. It shows you the function interface that is out of screen, on the header line. It is useful when you use search tools like Isearch or ag and end up on a symbol in a function but the top half is out of scope. WIth this, you simply have to look at the header line, without having to you C-M-a (beginning-of-defun) and then C-u C-SPC to go back every time."
emacs,36fzct,tuhdo,1 point,Tue May 19 03:47:54 2015 UTC,The screenshots look awesome. This mode seems a good replacement for the which-func-mode. I didn't use semantic because last time I used it in my C++ project it made my Emacs really unusable - even typing had very severe lag...But it was Emacs 23 and maybe it's time to revisit it to see if anything changes.
emacs,36fzct,instant_sunshine,1 point,Tue May 19 05:35:36 2015 UTC,That is very handy
emacs,36fzct,agnudawn,5,Thu May 21 15:25:17 2015 UTC,"If I'm working on a larger codebase, I sometimes set the header-line-format to ""%f"", which makes it easier to see the full path at a glance and to distinguish between file<1>, file<2>, etc. if there are multiple buffers with the same filename.  Any of the usual mode-line %-constructs work for the header-line."
emacs,36fzct,xuchunyang,1 point,Tue May 19 04:18:27 2015 UTC,"I know that the mode-line constructs can work for the header line and since there are so many excellent mode-line related packages in MELPA, I think maybe we could also make good use of the header line as well. But a quick search on MELPA and GitHub seems no luck. Maybe people don't use the header line as heavily as the mode line, and just use some simple config like what you do?:)"
emacs,36fzct,deadmaya,3,Tue May 19 05:43:05 2015 UTC,"To put which-func-mode's lighter to the header line, try this (extracted from lunaryorn/.emacs.d):  (setq which-func-unknown ""⊥"" ; The default is really boring…       which-func-format       `((:propertize ("" ➤ "" which-func-current)                      local-map ,which-func-keymap                      face which-func                      mouse-face mode-line-highlight                      help-echo ""mouse-1: go to beginning\n\ mouse-2: toggle rest visibility\n\ mouse-3: go to end"")))  (setq-default header-line-format               '(which-func-mode ("""" which-func-format "" "")))  (which-func-mode)"
emacs,36g34y,textish,2,Tue May 19 02:52:09 2015 UTC,Can you post what you get when you do M-x toggle-debug-on-error and then do M-x package-list-packages?
emacs,36g34y,kaushalmodi,1 point,Tue May 19 03:31:22 2015 UTC,"Debugger entered--Lisp error: (void-function package-desc-vers)   package-desc-vers([(0 8 1) ((avy (0 1 0))) ""Quickly switch windows."" single ((:url . ""https://github.com/abo-abo/ace-window"") (:keywords ""window"" ""location""))])   ad-Advice-package--add-to-archive-contents(#[514 ""@A\303H\304\305A\306HA\307H    A\310H \311\fAG\312V\205*"
emacs,36g34y,pzone,2,Tue May 19 03:45:20 2015 UTC,"My guess is that it's a bug in one of your packages.    Package-desc-vers was a function deprecated in 24.3 replaced by the new function package-desc-version.  When I looked through my .emacs.d folder I found several packages making trying to check for the older version package-desc-vers.   That is the error Emacs will return if some code tries to use that function without checking first.  Here's my attack plan.    First, do you use any customized packages or elisp from outside the package system?  I'd try disabling it all and see if the problem goes away.  If that fixes it, you can add it back in piece by piece.  Code from the packaging systems is generally reviewed carefully. Second, have you updated your packages recently? If this is caused by a buggy version in some package it might be fixed now.  You may be able to use the function auto-package-update-now.  (I really like Helm-M-x or Smex to discover functions like this.)  Is that the only debug output? I'd be surprised if there's not a more thorough stack trace than just what you posted before.  If this is due to a particular package (e.g. ace-window-mode...) you can go into .emacs.d/elpa/ and delete it. Nuclear option: wipe your whole .emacs.d/elpa/ folder and download your packages again."
emacs,36efr3,resnetPOFt,3,Mon May 18 19:16:41 2015 UTC,In a terminal  $ emacsclient -nw  is very snappy. For ad-hoc tasks that is what I run. For the full x11  emacsclient I fire this up infrequently and it runs for some time so the small delay hasn't ever bothered me.
emacs,36efr3,benfitzg,2,Mon May 18 20:54:58 2015 UTC,"This is what I use:  alias ew='emacsclient -nw -a=""""'   Starts emacs if no daemon is there to connect to."
emacs,36efr3,Rovanion,1 point,Mon May 18 21:08:53 2015 UTC,yeah I alias but never bother with the failover. I just start emacs as a daemon in my xsession.
emacs,36efr3,benfitzg,1 point,Mon May 18 21:20:55 2015 UTC,It's nice to have on a remote server where there's no xsession. On my own machines I launch it when I boot.
emacs,36efr3,Rovanion,1 point,Mon May 18 21:57:44 2015 UTC,yeah i'm just lazy and dump everything in .xsession
emacs,36efr3,benfitzg,1 point,Mon May 18 23:19:39 2015 UTC,"can you make an alias to open a single file with -nw and -Q in current directory? Something that works like nano file.type. I'm pretty new to bash/terminals in general. I attempted alias ea='emacs  * -Q -nw' and then gave up on current directory since I don't understand how to make * the file to open.  edit: actually alias ea='emacs -Q -nw works well enough, I didn't realize that I could place the file name anywhere at the end. Next is just to close buffers it opens."
emacs,36efr3,420_blazer,1 point,Mon May 18 22:16:40 2015 UTC,"That does help for a bit some tasks, thanks.  The startup time is around 0.3 seconds compared to 0.5 seconds.  I really need an objective way to measure it.  However, for anything other than quick edits, I do still need to fire up the full emacsclient."
emacs,36efr3,vermiculus,2,Mon May 18 22:39:36 2015 UTC,objective way to measure it:  time emacs --kill
emacs,36efr3,vermiculus,1 point,Tue May 19 01:57:23 2015 UTC,"Thank you.  Unfortunately, that doesn't give accurate results for emacsclient.  It does tell me, however, that emacs -q takes 0.45 seconds. I probably did it wrong."
emacs,36efr3,RobThorpe,1 point,Tue May 19 04:50:48 2015 UTC,"You could try for something similar:  time emacsclient -nw --eval ""(save-buffers-kill-terminal)"""
emacs,36efr3,RobThorpe,2,Tue May 19 11:18:35 2015 UTC,"That's exactly what I was looking for, thanks!  Updated my post with some numbers."
emacs,36efr3,verdigris2014,1 point,Tue May 19 14:01:15 2015 UTC,It almost instantaneous for me. Have you tried it with emacs -q?
emacs,36efr3,kezilma,1 point,Mon May 18 23:50:00 2015 UTC,"Hmm...  It also takes around 0.5 seconds, and comes up with the message   ** (emacs:3125): WARNING **: Couldn't register with accessibility bus: Did not receive a reply. Possible causes include: the remote application did not send a reply, the message bus security policy blocked the reply, the reply timeout expired, or the network connection was broken."
emacs,36efr3,borodino,2,Tue May 19 00:10:34 2015 UTC,"You could be suffering from this bug: https://bugs.launchpad.net/ubuntu/+source/at-spi2-core/+bug/1222356  Although it doesn't mention a slowdown, errors like this usually involve wait periods, so they may cause a slowdown in practice.  I think the solution is to upgrade your distro."
emacs,36cq0k,nivekuil,2,Mon May 18 09:49:34 2015 UTC,Nice work! I'll have to try this out.
emacs,36cq0k,phyrne,2,Mon May 18 10:49:05 2015 UTC,"Nice!! I am literally always wrapping things by hand, and it's a pain in the butt."
emacs,36cq0k,chekt,2,Mon May 18 11:00:26 2015 UTC,"Finally, I can write some lisp."
emacs,36cq0k,Zakkor,7,Mon May 18 12:04:08 2015 UTC,"I think the use case for this is dealing with parens in non-lisp environments, like a different vim-surround. I couldn't imagine using this instead of lispy (or paredit/smartparens) for actual lisp. The real power in these packages comes from the ast manipuation of not only slurp and barf but convolute, split, raise, join, and many more. If you want to hack lisp I highly recommend trying out lispy and smartparens for a couple of ours."
emacs,36cq0k,aptmnt_,3,Mon May 18 14:46:35 2015 UTC,"With lispy all these commands reduce to only two: lispy-slurp bound to > (think of making the selection larger), and lispy-barf bound to < (think of making the selection smaller).  It doesn't work on strings, but works on (), [], {} and on region selections. All of this pretty well regression-tested.  And, of course, the biggest value of the commands is the ability to combine them quickly and intuitively, which you can. For instance, starting with this code (point at |):  (if (test)     (statement-1)   (ignore-errors (statement-2))|   (statement-3)   (statement-4)   (statement-5)   (statement-6)   (statement-7)   (statement-8)   (statement-9))   Suppose that I want to extend ignore-errors up to statement-8.  First, I do 99> (I could do 6> and be done with it, but I can't be bothered to actually count the expressions, I just know that I want all of them, except the last one).  I get:  (if (test)     (statement-1)   (ignore-errors (statement-2)                  (statement-3)                  (statement-4)                  (statement-5)                  (statement-6)                  (statement-7)                  (statement-8)                  (statement-9))|)   Note that the parent list can't be escaped and the statement is auto-indented. Then I press < and I'm done:  (if (test)     (statement-1)   (ignore-errors (statement-2)                  (statement-3)                  (statement-4)                  (statement-5)                  (statement-6)                  (statement-7)                  (statement-8))|   (statement-9))   One more trick: if I want to spit out the current list, I can do it with ol:  (if (test)     (statement-1)   (statement-9)) (ignore-errors (statement-2)                (statement-3)                (statement-4)                (statement-5)                (statement-6)                (statement-7)                (statement-8))|   Now, I can put it back in with ok:  (if (test)     (statement-1)   (statement-9)   (ignore-errors (statement-2)                  (statement-3)                  (statement-4)                  (statement-5)                  (statement-6)                  (statement-7)                  (statement-8))|)   And move it to the original position with w (the opposite is s):  (if (test)     (statement-1)   (ignore-errors (statement-2)                  (statement-3)                  (statement-4)                  (statement-5)                  (statement-6)                  (statement-7)                  (statement-8))|   (statement-9))"
emacs,36cq0k,abo-abo,2,Mon May 18 19:28:25 2015 UTC,There is no point to use this in lisp dialects but it could be a good alternative to hybrid functions of smartparens.
emacs,36cq0k,syl20bnr,2,Mon May 18 17:38:56 2015 UTC,I think this package is currently the quickest way to wrap parentheses/brackets around a symbol that no other package supports. Now only it needs not to move point by wrapping the code in save-excursion. vim/evil-surround just requires too many key strokes.
emacs,36cq0k,tuhdo,1 point,Tue May 19 04:08:50 2015 UTC,does it work correctly with paredit and the likes?
emacs,36cq0k,vkazanov,7,Mon May 18 10:33:35 2015 UTC,There's no reason to use this package if you use paredit or smartparens. It looks like a strict subset.
emacs,36cq0k,aptmnt_,1 point,Mon May 18 14:48:27 2015 UTC,"It should, although I believe paredit's slurping and barfing provides a similar functionality for lisp. I don't use paredit, so I'm not sure exactly how much overlap there is, but corral is definitely a lot more lightweight."
emacs,36cq0k,instant_sunshine,2,Mon May 18 10:49:42 2015 UTC,"smartparens is a superset of Paredit, and it does all this slurping barfing, re wrapping etc.   Check it out!"
emacs,36cq0k,agumonkey,1 point,Mon May 18 14:33:40 2015 UTC,"Strict superset ? Do you use SP without paredit at all ? Only recently I found about paredit-like features but I've never made the jump, half because of paying tribute to paredit :), half because I wasn't sure about the feature lists."
emacs,36cq0k,instant_sunshine,3,Mon May 18 16:27:41 2015 UTC,"I do use SP without Paredit, and yes it does all that good stuff.  It the also does it in non lisp modes, and does ""hybrid sexp"" handling, if it can identify a simple expression equivalent in a mode.  I recommend you check into it thoroughly, it's very cool."
emacs,36cq0k,nandryshak,1 point,Mon May 18 17:08:20 2015 UTC,I cannot think of one feature that paredit has over smartparens.
emacs,36cq0k,CodyChan,1 point,Mon May 18 16:38:31 2015 UTC,"Check out lispy, it doesn't support C though, and it is much more powerful, it includes the features of corral."
emacs,36ci7o,theszak,1 point,Mon May 18 07:49:14 2015 UTC,"Where have you seen this message?  For me rmail automatically finds MIME messages without any extra configuration.  I have seen some problems though with messages from one or two particular people.  rmail-search-mime-header-function is one of a set of variables that specify functions to use to search for parts of a MIME message. I don't know how to use it.  You may be better off posting this to help-gnu-emacs@gnu.org. Eli Zaretski reads that, he uses Rmail and maintains parts of it."
emacs,36ci7o,RobThorpe,1 point,Mon May 18 10:49:10 2015 UTC,Here is a possible solution.
emacs,36a8zm,metx,12,Sun May 17 18:29:25 2015 UTC,"(setq url-user-agent """")   I suspect this makes you more distinct than setting it to something common."
emacs,36a8zm,frumious,1 point,Sun May 17 19:28:06 2015 UTC,"Right, hence the first question.  For some reason, if I change it to the top one from http://whatsmyuseragent.com/CommonUserAgents, panopticlick still says it's the empty string. Even if I use a different emacs session."
emacs,36a8zm,sigma914,1 point,Sun May 17 20:07:52 2015 UTC,You could set it to select a new user agent every few minutes
emacs,36a8zm,larsmagne23,2,Mon May 18 09:16:41 2015 UTC,"(setq url-mime-encoding-string ""gzip, deflate"")   Note that url.el does not support the ""deflate"" compression, so if some web site decides to serve that to Emacs, you'll just get a binary soup.  But it's probably pretty rare (to put it mildly) for a web server to serve out deflate-compressed data instead of gzipped data."
emacs,36b8n7,kabbotta,7,Sun May 17 23:38:31 2015 UTC,"How about just one (1) Emacs instance -- with one (1) frame on the left side and one (1) frame on the right side -- each frame can have a default name, or a special name -- e.g., ""LEFT-BRAIN"" and ""RIGHT-BRAIN""?  I use a custom minimize frame function that reduces the sizes of all frames and places them on the left side of the screen, and I manually type information from other programs that are on the right side of the screen -- when I am all done, I have a custom maximize function that adjusts all frames to fill up the entire screen again.  Here is an example, which can be custom tailored to your screen size and operating system -- I have three (3) computers with different size screens, and I use both OSX and Windows (some native, and others in a virtual machine).  set-frame-size has an optional argument that I use so that I can adjust pixelwise.  (defun minimize () (interactive)   (dolist (frame (frame-list))     (set-frame-position frame 0 0)     (cond       ((eq system-type 'darwin)         (cond           ((and               (= 1920 (display-pixel-width))               (= 1080 (display-pixel-height)))             (set-frame-size frame 498 1054 t))           ((and               (= 1920 (display-pixel-width))               (= 1200 (display-pixel-height)))             (set-frame-size frame 498 1170 t))           ((and               (= 1280 (display-pixel-width))               (= 800 (display-pixel-height)))             (set-frame-size frame 498 774 t))) )       ((eq system-type 'windows-nt)         (cond           ((and               (= 1920 (display-pixel-width))               (= 1080 (display-pixel-height)))             (set-frame-size frame 498 1003 t))           ((and               (= 1920 (display-pixel-width))               (= 1200 (display-pixel-height)))             (set-frame-size frame 498 1123 t))           ((and               (= 1920 (display-pixel-width))               (= 1002 (display-pixel-height)))             (set-frame-size frame 498 934 t))           ((and               (= 1920 (display-pixel-width))               (= 1123 (display-pixel-height)))             (set-frame-size frame 498 1042 t))           ((and               (= 1280 (display-pixel-width))               (= 723 (display-pixel-height)))             (set-frame-size frame 498 642 t)))))     (recenter)))  (defun maximize () (interactive)   (dolist (frame (frame-list))     (set-frame-position frame 0 0)     (cond       ((eq system-type 'darwin)         (cond           ((and               (= 1920 (display-pixel-width))               (= 1080 (display-pixel-height)))             (set-frame-size frame 1900 1054 t))           ((and               (= 1920 (display-pixel-width))               (= 1200 (display-pixel-height)))             (set-frame-size frame 1895 1170 t))           ((and               (= 1280 (display-pixel-width))               (= 800 (display-pixel-height)))             (set-frame-size frame 1254 774 t))) )       ((eq system-type 'windows-nt)         (cond           ((and               (= 1920 (display-pixel-width))               (= 1080 (display-pixel-height)))             (set-frame-size frame 1890 1003 t))           ((and               (= 1920 (display-pixel-width))               (= 1200 (display-pixel-height)))             (set-frame-size frame 1889 1123 t))           ((and               (= 1920 (display-pixel-width))               (= 1002 (display-pixel-height)))             (set-frame-size frame 1890 934 t))           ((and               (= 1920 (display-pixel-width))               (= 1123 (display-pixel-height)))             (set-frame-size frame 1890 1042 t))           ((and               (= 1280 (display-pixel-width))               (= 723 (display-pixel-height)))             (set-frame-size frame 1250 642 t)))))     (recenter)))"
emacs,36b8n7,lawlist,1 point,Sun May 17 23:45:07 2015 UTC,"For a TTY-based solution, you can attach to the same server instance of emacs independently with two emacsclient instances."
emacs,36b8n7,wadcann,1 point,Mon May 18 16:47:50 2015 UTC,"Thanks for the suggestion. The only thing I don't understand is what you mean by ""I manually type information from other programs that are on the right side of the screen""."
emacs,36b8n7,lawlist,2,Mon May 18 20:09:56 2015 UTC,"Let's say for example that I have a Grant Deed that someone has sent over (faxed or scanned) with relatively poor image quality.  My goal in this example would be get the text of the legal description in the Grant Deed into an open buffer within Emacs.  The best quality of the image will be seen with a separate *.pdf viewer, such as Skim or Adobe -- and I prefer Skim quite frankly to the  Emacsdoc-view (which I do use on occasion for relatively good quality *.pdf images).  I could run optical character recognition, extract the text and manually clean it up (which would still require seeing an image of the original to compare the text to).  Or, I could try my luck at a doc-view version of extracting text (clean it up by comparing the extracted text to the original).  Or, I could simply reduce the size of all open Emacs frames (e.g., one-third of full screen -- all to the left-hand side of the screen) so that I can see the separate program called Skim and I can manually type the deed legal description right into an Emacs buffer.  When I'm all done, I return all open Emacs frames so that they fill up the whole screen perfectly (i.e., every pixel) -- but not in full screen mode."
emacs,36b8n7,aerique,1 point,Tue May 19 01:10:25 2015 UTC,Ok. Thanks for all your help. Emacs people always seemed to be filled with so many good answers ; )
emacs,36b8n7,lykwydchykyn,1 point,Tue May 19 19:24:34 2015 UTC,Or switch between frames using: http://www.emacswiki.org/emacs/FrameMove
emacs,36b8n7,camdez,3,Mon May 18 01:19:10 2015 UTC,A tiling window manager solves this problem too.
emacs,36b8n7,benfitzg,3,Mon May 18 10:59:24 2015 UTC,...when used in conjunction with multiple frames.  (Unless I misunderstand you.)
emacs,36b8n7,k-bx,2,Mon May 18 05:07:00 2015 UTC,"As others have said use two frames. I usually split my screen horizontally and use org mode on the left and docview on the right. Having both buffers running in the same instance means I can defined a keyboard shortcut to page up /down on the pdf without leaving my org buffer. It's very good for maintaining focus on the matter under review.  When at work using two monitors I don't bother with two frames, I simply extend one frame across the entire two screens and then split the frame with c-x 3 so the horizontal line runs at the split between the two monitors to avoid having to read ""across"" monitors which is always annoying."
emacs,367hqe,hanlec,2,Sat May 16 22:28:13 2015 UTC,"Please ping me later. Can help with display in agenda. Dealing with baby now.  Edit:    org-habit-show-habits-only-for-today If non-nil, only show habits in today's agenda view. This is set to true by default. From: http://orgmode.org/manual/Tracking-your-habits.html   This will make your habits show up on future days as well so maybe you could set this to nil to show future habits (I do this as it helps me when going through future days in the agenda).  Regarding Sat/Sun I think two habits is the way to go but I could be wrong."
emacs,367hqe,grabyourmotherskeys,1 point,Sun May 17 13:42:08 2015 UTC,"With regard to your second question, there isn't as far as I know.  If you only want it on two out of seven days then you need two separate entries as you have."
emacs,367a1f,pd0wm,5,Sat May 16 21:16:54 2015 UTC,"From the evil-mode documentation:  evil-state is a variable defined in `evil-vars.el'. Its value is normal Local in buffer *scratch*; global value is nil    Automatically becomes permanently buffer-local when set.   The evil state is meant to be buffer local, as it is in Vim. Theoretically, you could create an around advice on buffer switching functions that would note the current evil state and set the state in the destination buffer to that value.  That seems like a lot of work, though, to get around the fact that you should be spending 90% of your time in normal mode."
emacs,367a1f,bakuretsu,3,Sat May 16 22:09:15 2015 UTC,Why are you changing buffers outside of normal mode?
emacs,367a1f,TheBB,1 point,Sun May 17 08:26:15 2015 UTC,"I guess thats the problem ;). I'm still learning vim, so my old keyboard shortcuts like C-x b are still in muscle memory, which work in insert mode.  However I will still use windmove (shift-arrows) to move between panes."
emacs,367a1f,jplindstrom,4,Sun May 17 08:30:47 2015 UTC,"The problem isn't that the old shortcuts work, but that you're not exiting Insert-mode immediately after you stop entering text.  You'll get much more out of modal editing if you can acquire that reflex.  Personally I think the whole ""oh, it's superior because the hand stays on the home-row"" is bs because your hand needs a passport to travel all the way over to where the Esc key lives.  Fortunately C-[ is the same as Esc (and it works everywhere without any configuration), so I recommend trying that."
emacs,367a1f,__baxx__,1 point,Sun May 17 10:17:29 2015 UTC,So it's not bs then?
emacs,367a1f,jplindstrom,1 point,Wed May 20 00:01:12 2015 UTC,"It is, since from what I've seen most people do use the Esc key."
emacs,367a1f,__baxx__,1 point,Wed May 20 12:30:10 2015 UTC,Fair enough... Don't think such an easy fix renders home row stuff as bs but hey ho :)
emacs,367a1f,tuhdo,1 point,Wed May 20 15:54:33 2015 UTC,However I will still use windmove (shift-arrows) to move between panes.   I use this as well. I think it's intuitive and efficient.
emacs,367a1f,Sonarman,1 point,Sun May 17 09:13:36 2015 UTC,"In spacemacs, typing ""fd"" quickly will take you out of insert mode. Just get in the habit of doing that after inserting text, and you'll be set to harness the power of normal mode.  Also, you can use SPC n to switch to the nth window, where the window's number is displayed in the left corner of the powerline. It's pretty sweet."
emacs,36a2vw,q_-_p,4,Sun May 17 17:36:26 2015 UTC,You should be using M-x visual-line-mode anyways as the alternative was deprecated.
emacs,36a2vw,wasamasa,1 point,Sun May 17 17:45:34 2015 UTC,"I wasn't sure what mode I was using, thanks, I'll see if this fixes the diacritical work I was doing as well.  I was googling around for anyone who had reused emacs editor pane as an editor inside another project, didn't find anything but maybe on here I'll find some info."
emacs,36a2vw,eric-plutono,-6,Sun May 17 21:04:37 2015 UTC,"I've heard it all before, so if you're coming here to say ""it's free"", ""get your money back"", ""what do you expect"" or whatever, I've heard it all the last 15 years of using emacs, 15 years where I actually never had any display glitches. Not sure what version caused this, was copying in a very long single-command that I was testing with in console then moving it into a script.  Really quite sad to see a text editor dick around in 2015."
emacs,36a2vw,hvis,1 point,Sun May 17 17:37:52 2015 UTC,"Not sure what version caused this...   C-h C-a will show the version information, if you ever need to share it for this or any other problem."
emacs,36a2vw,kcin,1 point,Sun May 17 18:16:59 2015 UTC,"Yes, Emacs has rendering glitches, no, it's not enough to dissuade me from using it.   Not sure what version caused this   Clone the git repo, try doing git bisect; if you find anything definitive, that would actually be helpful."
emacs,36a2vw,helpivefallenandican,1 point,Sun May 17 18:31:37 2015 UTC,"One should use what one prefers.  Generally, I'm quite happy with emacs. Rarely, when dealing with huge SQL dumps with extremely long lines, I use notepad++. But these cases are rare and emacs have so many other advantages for me that I'm not thinking of switching editors just because of this."
emacs,3662g5,instant_sunshine,6,Sat May 16 14:30:07 2015 UTC,"Queued up to build on MELPA in the next cycle.  Edit:   DISCLAIMER the phrase totally badass is entirely click bait, and not an honest and level headed critique of the theme.  Still I hope you appreciate its a little tongue in cheek."
emacs,3662g5,lunarsunrise,1 point,Sat May 16 14:30:33 2015 UTC,Whoa!  Hot sexy damn.
emacs,3662g5,oursland,1 point,Sat May 16 14:51:34 2015 UTC,Yes! YES! YES!!
emacs,3662g5,hvis,5,Sat May 16 21:32:13 2015 UTC,"I like the idea of modern, graphical mode-line, but why do you insist on using tiny font sizes (compared to the height of the default face), and leaving so much space unused?"
emacs,3662g5,hvis,0,Sat May 16 21:59:49 2015 UTC,"Do I insist?  You are absolutely free to customise it, break out the code, it's not exactly esoteric in there.  As far as so much space unused, these are still prototypical, and are intended to stimulate others into creating customisations, and contribute pull requests...  ...of course you could also just complain, that's super cool too."
emacs,3662g5,hvis,2,Sun May 17 01:27:21 2015 UTC,"You mean contributing new mode-lines, even if my main gripe is about font sizes?  The ones that are there are not exactly customizable, the attributes are hard-coded in the -style functions."
emacs,3662g5,hvis,0,Sun May 17 10:17:30 2015 UTC,"You just override the style function if you want to change the font size.  Your method of asking for features or help though, off putting."
emacs,3662g5,TokenMenses,3,Sun May 17 12:13:36 2015 UTC,"I'm not really asking for help, more like expressing an opinion, or bringing up a usability problem.  You've got quite a bit of praise in comments already. If you only like that kind of feedback, fine, I'll shut up.  ""override the style function"" is a pretty unconventional way of customization. And to get normal font sizes, I'd have to override all (?) the functions for any given style."
emacs,3662g5,Kaligule,1 point,Sun May 17 18:09:59 2015 UTC,"To be honest, your ""why do you insist"" thing is more irritating than you realise.  Sabof is the author of Svg mode line themes, his initial set and the toolkit was made in 2013.  Since then there has been a grand total of zero mode line themes built for/with it.  The point being, I'm essentially using it like theme authors should, to create things that I like, and suit my taste.  You are perfectly welcome to say they suck, but I'd rather you just go ahead and make your own, or modify mine...  That's the point of these, it's a reminder that Sabof has made this great toolkit.  So use it. Or don't."
emacs,364ovl,agumonkey,4,Sat May 16 02:49:55 2015 UTC,A java applet? What year was this made?
emacs,364ovl,joehillen,3,Sat May 16 04:25:28 2015 UTC,2006.
emacs,364ovl,monotux,3,Sat May 16 08:20:27 2015 UTC,"There are major drawbacks with this approach:   if I open my files in an editor that does not support elastic tabstops it is very likely that the formatting will be messed up. It defeats the whole purpose of spaces instead of tabs. Moreover, using proportional fonts, even with code blocks aligned the characters won't be aligned which could make some code patterns harder to visualize."
emacs,364ovl,syl20bnr,1 point,Sat May 16 14:12:43 2015 UTC,"A man can dream, though; a man can dream."
emacs,364ovl,eigengrau82,1 point,Sat May 16 05:46:47 2015 UTC,"A better approach than this, I think, is the enforced style and indentation like golang has (gofmt). It's editor agnostic and don't need to sync the configuration between collaborators."
emacs,364ovl,houndgeo,3,Mon May 18 09:01:23 2015 UTC,aggressive-indent already implemented it. Scroll down for the C demo.
emacs,364ovl,tuhdo,4,Sat May 16 06:33:55 2015 UTC,"No, keeping code always indented is something totally different from having lines of proportional fonts with their indentation lining up."
emacs,364ovl,wasamasa,1 point,Sat May 16 08:13:59 2015 UTC,"The only difference I see with the screenshot in the article and this screenshot is that the one in the article automatic aligns the code as you type. I think it's doable in Emacs with scope limited to current defun and a certain character to align as we type. And aggressive-indent actually indents your code according to the indentation rules of the major mode, not just redisplay it.  Maybe you could give more insights?"
emacs,364ovl,tuhdo,3,Sat May 16 10:35:55 2015 UTC,"It would be a lot more obvious what's going on if both demos would be using something like whitespace-mode to visualize the indentation. aggressive-indent is changing the indentation, elastic tabstops are tab characters changing their displayed width in a context-aware manner.  The other difference is that it works with proportional fonts (as opposed to monospaced fonts). While there should be little difference in indenting at the beginning of the line (as each space and tab is equally wide), it stops lining up when indenting at the end of the line (for appended comments as shown in the demo) because not every character is equally wide."
emacs,364ovl,wasamasa,-5,Sat May 16 11:07:09 2015 UTC,"This is utter lunacy:   You don't define the problem Almost all of what you show as ""niceties"" for comment / parameter indentation are nothing to do with the problem they are also implemented in IDEs, they are also outside of the data model of what we are talking about You don't define the problem. You don't. Define. The problem. So you can't even understand why your proposed solution is so off base. You clearly don't understand indentation across java/c/c#/lisp/python/php/mixed and yaml/xml/json/ latex etc You don't define the goddamn problem.   First, IDEs already detect current indentation.  Second. YOU LIAR.   The reason why we have not yet settled conclusively on either tabs or spaces is that both camps can point to problems in the others' approach   FAILS TO EXPLAIN WHAT IS WRONG WITH TABS.  Want some advice?  Before you try and solve a problem, first understand and show people you've understood the problem. You have no understood the problem, nor shown people you've understood the problem.  Also, comment indentation has been a feature on a few IDEs that let you edit multi-line comments even going to the next line, auto padding the content.  So, you're so wrong in so many ways. The worst part? As soon as I saw this title I knew it was going to be complete bollocks.   The reason why we have not yet settled conclusively on either tabs or spaces is that both camps can point to problems in the others' approach. The truth is that both are right to be critical - both solutions are inadequate as neither allows different programmers to look at the same file and have their indentation and columns as wide or as thin as they'd like without text getting misaligned.   Utter autism.   but tabs as they stand now are broken.   How? How? You know, you're supposed to define your problem, have you never written anything before?"
emacs,364ovl,q_-_p,0,Mon May 18 01:33:17 2015 UTC,"Take a deeeep breath.  Now that you've come down a bit, why not turn these fits of rage into a blog, software or something else more worthwhile than reddit posts?"
emacs,364ovl,wasamasa,1 point,Mon May 18 06:09:28 2015 UTC,I have an idea. How about we ignore everything he said (all the good points) and shun him away? Doesn't this contribute greatly for the discussion? :D  /s
emacs,364o9m,agumonkey,3,Sat May 16 02:43:35 2015 UTC,Created 26 Jan '05
emacs,36557c,shackra,2,Sat May 16 06:06:59 2015 UTC,"Try disabling your normal configuration (emacs -Q) and load nlinum try again. Still a problem? Contact the author. Not a problem anymore? Well have fun debugging your config, try a binary search :)"
emacs,36557c,monotux,1 point,Sat May 16 08:22:51 2015 UTC,"That's right.  It may be that there's a timing problem, as kaushalmodi mentions. In that case it's best to try a barebones init file that just loads nlinum to see if that's the problem."
emacs,36557c,RobThorpe,2,Sat May 16 19:42:14 2015 UTC,"I got the ""Invalid face: linum"" error when I started emacs in daemon mode. I fixed that problem by forcing linum&co packages to load only after emacs is idle for a second.   It you are using use-package, you simply use :defer 1. Or you have a snippet with run-with-idle-timer (Example).   Here's what I have in my init:  ;; Do linum setup after a 1 second idle time after emacs has loaded (use-package setup-linum   :defer 1)  ;; Do desktop setup after linum setup so that the desktop loaded files will show ;; linum if enabled for that major mode or if enabled globally (with-eval-after-load 'setup-linum   (require 'setup-desktop))   I'll update if I see the same problem when I do C-x 5 2 (I have always worked with single frame sessions.)  Also, a recent commit in emacs master seems to deal with the issue of linum and daemon. I have yet to update to that and try it out.   Just saying that the linum-daemon issue and your issue seem to have the same root problem.. Availability of faces at frame generation."
emacs,36557c,kaushalmodi,1 point,Sat May 16 11:46:18 2015 UTC,"I recommend trying the most recent version of nlinum  (i.e., 1.6) available from the home page of the following link:  http://elpa.gnu.org/packages/nlinum.html -- And, remove the prior version and restart Emacs."
emacs,36557c,lawlist,1 point,Sat May 16 06:42:36 2015 UTC,"I'm using version 1.6 in Emacs 25.5.1, actually..."
emacs,36557c,lawlist,1 point,Sat May 16 07:23:43 2015 UTC,"I'm new to reddit and am unsure whether Stefan reads these posts.  If you don't find a solution in a reasonable period of time, then send him (the author) an e-mail.  The latest version requires linum (at line 39), so I don't see why a face defined in that library would not be available."
emacs,361p50,ares623,10,Fri May 15 10:34:05 2015 UTC,How about perspectives? It can give you isolated workspaces with buffers local to each workspace and it's more lightweight than workgroups2.
emacs,361p50,tuhdo,2,Fri May 15 10:49:21 2015 UTC,"+1 for perspectives. You should also use projectile, and possibly helm. They integrate nicely to make buffer management a breeze, even when you have many projects and many buffers."
emacs,361p50,gepardcv,5,Fri May 15 15:05:45 2015 UTC,Couldn't you run 2 copies of emacs?
emacs,361p50,choppsv2,1 point,Fri May 15 10:38:03 2015 UTC,"Hmm I'm using Emacs.app (GUI) on OS X (installed via homebrew), but I'm not entirely sure how to spawn a new emacs process? Trying to run Emacs.app again just switches back to the current emacs process."
emacs,361p50,choppsv2,1 point,Fri May 15 10:43:18 2015 UTC,"In that case copy Emacs.app to Emacs2.app and it should work. If it doesn't it may be due to homebrew using symlinks, and you have to copy the actual .app bundle rather than the symlink."
emacs,361p50,gepardcv,1 point,Fri May 15 11:06:54 2015 UTC,Run the Emacs binary from the command line.
emacs,361p50,jinwoo68,1 point,Fri May 15 15:04:00 2015 UTC,http://emacswiki.org/emacs/MacOSTweaks#toc17
emacs,361p50,dzecniv,1 point,Fri May 15 20:05:57 2015 UTC,"It looks possible with a package, elscreen-buffer-list: http://wikemacs.org/wiki/Elscreen#Give_each_screen_its_own_buffer-list and I think it is the main purpose of escreen too (not elscreen). Never tried but I'm interested by some feedback, thanks !"
emacs,361p50,lawlist,1 point,Fri May 15 10:48:03 2015 UTC,"I use FrameBufs by Alp Aker -- https://github.com/alpaker/Frame-Bufs -- and also Tabbar by David Ponce https://marmalade-repo.org/packages/tabbar -- FrameBufs imbeds a different custom buffer-list in each frame-parameter (i.e., a frame-local custom buffer-list) that permits users to associate select buffers on a per frame basis.  Here is a link to an example that marries the concepts of both libraries -- i.e., buffers can be added or removed from frame association, and buffers have tabs with different colors depending upon the association and whether they are selected as the current-buffer:  http://emacs.stackexchange.com/a/10112/2287"
emacs,361p50,acr4,1 point,Fri May 15 21:27:02 2015 UTC,"I use emacs in server/client mode (http://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html).  Usually I have around a dozen active work-spaces (2-3 per project, 3-4 projects at a time).  Each work-space gets a unique emacs server which is persistent across emacsclient windows/frames within that project, but keeps each project safely sandboxed.  This is really helpful because the same submodule/block may be present (and under slightly different paths of development) in each work-area, and it keeps me from editing the wrong version/instance of a file.  To do this, I set EMACS_SERVER_FILE and initialize a server (if not already active) when loading a terminal for a particular work-space.  Then, I have 'emacs' aliased to $EDITOR, and EDITOR='_editor() { TERM=xterm-256color command emacsclient -t $*; tput rmcup; }; _editor' (works in bash, YMMV in other shells).    An added benefit of this scheme is that emacsclient instances load almost instantaneously.  If you have lots of packages like I do, this saves many seconds every time a window is opened (like when adding commit messages, for example).  Also, the penalty of fat-fingering a C-x C-c is reduced - all your buffers are still open!"
emacs,35xff7,instant_sunshine,5,Thu May 14 09:14:47 2015 UTC,and MELPA Stable!
emacs,35xff7,anatolya,1 point,Thu May 14 12:28:29 2015 UTC,Did installing from MELPA stable work for you. For me it fais due to xmlgen being missing:  Install package `ocodo-svg-modelines-0.1.2'? (y or n) y package-compute-transaction: Package `xmlgen-0.4' is unavailable
emacs,35xff7,rycee,3,Thu May 14 14:00:37 2015 UTC,"Looks like there's a misssing dependency. It sometimes happens with stable. You can temporarily enable regular melpa to install xmlgen, then disable it and try again. Please inform me if there's an easier workaround (not specific to this case but missing dependency problem)."
emacs,35xff7,anatolya,3,Thu May 14 14:13:54 2015 UTC,"Good workaround. I don't know of any better solution, beside asking upstream to make a stable release. I raised an issue for xmlgen."
emacs,35xff7,rycee,2,Thu May 14 16:00:52 2015 UTC,If it's a github package to you can (should) prompt the developer to release a stable version. If it's not on github but it's a small package you could bundle it in yours (preferably with a different name).
emacs,35xff7,BruceConnor,1 point,Thu May 14 16:03:49 2015 UTC,Is it just me or is the buffer-is-not-modified indicator awfully dark? I can barely make it out if I don't use a light theme.
emacs,35xff7,DasEwigeLicht,1 point,Thu May 14 17:26:23 2015 UTC,I'm looking forward to a way/doc to how to modify these  :D When it's achievable it'll be so fun
emacs,35xff7,cestdiego,1 point,Sat May 16 08:41:45 2015 UTC,"For now it requires you to read the code, it's pretty readable at a push.  You could open issues on GitHub asking for explanations of things you want to do but don't know how  I'll add notes to the wiki and link them to the issues"
emacs,35utw1,FredN,10,Wed May 13 18:19:22 2015 UTC,"I don't use CEDET.  I've found it to be buggy.  Well, that's not true -- I do use it, but just to display the function name that point is in at the top line of the window.  I don't use it for navigation or autocompletion.  I do use exuberant ctags (not GNU GLOBAL), projectile, and magit.  I also use vc for diffs (C-x v =) and to revert bits of changes, which I find to be preferable to magit's interface.  One of the most-time-saving features, IMHO, in projectile is its ability to open a file by name anywhere in the project.  This feature unfortunately currently becomes a bit sluggish on large projects, but it's really convenient.  I use one emacs instance per project; a number of emacs features don't understand project namespacing, and the ""use an emacs server instance for everything"" is not something that I consider to presently be a viable solution (it's fine for your TODO list or running emms or whatever, just not for working on software projects).  I typically have two full-screen-height xterms open, with GNU screen running in each, and name one ""right"" and the other ""left"".  Emacs normally runs in tty mode in the right-hand side; the left is normally reserved for working in terminals or something else that I might want to look at at the same time.  I don't advocate using emacs as a general-purpose screen manager, as some try to do so: despite its excellent feature set, it's far slower than GNU screen.  I have C-c a k bound to compile, and I use the hyperlinks to jump to errors.  I don't  normally use TRAMP; I run the emacs instance on the dev machine, not the local machine.  I don't use a snippeting system.  Despite emacs's large collection, I've been more-or-less unhappy with all of them, and just have a key bound to insert a file starting in a ""snippets"" directory, which is good enough for large static blocks of text.  I also don't use auto-expansion of abbrevs, but I do use manual expansion (though not for code snippits).  I make regular use of M-. and M-* (which work much better in C than C++, since normally a function name fully-specifies the target).  I make regular use of dired.  I use this regularly:  ;; Provide a keybinding to rapidly search through all files an entire git repo   (defun git-grep-repo (search)   ""git-grep the entire current repo""   (interactive    (progn      (require 'grep)      (list (grep-read-regexp))))   (let ((command (grep-expand-template                   (concat ""git --no-pager grep --no-color -n -e <R> ""                           ""`git rev-parse --show-toplevel`"") search)))       (grep-find command))) (global-set-key (kbd ""C-x v f"") 'git-grep-repo)   I can't remember what my beef was with projectile's similar function, but there was definitely some issue with it.  I don't use folding.  I tried a few times to incorporate it into my workflow and found that it didn't buy me much; what I really wanted was to look at useful things that were too far apart.  Instead, when that happens, I just hit C-x 2 to split the window and then browse to the first place in the first window and the second place in the other window.  I do make use of macros sometimes.  I do not use multiple cursors; these provide a subset of macro functionality.  I do make regular use of registers, but not bookmarks (I think that a lot of people that find the bookmarks feature are looking for registers, to save where they are and jump back when doing work).  I do make not-infrequent use of multiple frames, though obviously only one is visible at a time in my xterm.  I use this regularly...can't even recall where it came from, though I didn't write it:  (defun nuke-trailing-whitespace () ""Nuke all trailing whitespace in the buffer. Whitespace in this case is just spaces or tabs. This is a useful function to put on write-file-hooks.  If the variable `nuke-trailing-whitespace-p` is `nil`, this function is disabled.  If `t`, unreservedly strip trailing whitespace. If not `nil` and not `t`, query for each instance."" (interactive) (and nuke-trailing-whitespace-p (save-match-data (save-excursion (save-restriction (widen) (goto-char (point-min)) (cond ((eq nuke-trailing-whitespace-p t) (while (re-search-forward ""[        ]+$"" (point-max) t) (delete-region (match-beginning 0) (match-end 0)))) (t (query-replace-regexp ""[    ]+$"" """"))))))) ;; always return nil, in case this is on write-file-hooks.   nil)   In my c-mode hook, I have (setq show-trailing-whitespace t), and trigger this function to automatically set the right type of indentation on a project:  (defun how-many-region (begin end regexp &optional interactive) ""Print number of non-trivial matches for REGEXP in region. Non-interactive arguments are Begin End Regexp"" (interactive ""r\nsHow many matches for (regexp): \np"") (let ((count 0) opoint) (save-excursion (setq end (or end (point-max))) (goto-char (or begin (point))) (while (and (< (setq opoint (point)) end) (re-search-forward regexp end t)) (if (= opoint (point)) (forward-char 1) (setq count (1+ count)))) (if interactive (message ""%d occurrences"" count)) count)))  (defun infer-indentation-style () ;; if our source file uses tabs, we use tabs, if spaces spaces, and if ;; neither, we use the current indent-tabs-mode (let ((space-count (how-many-region (point-min) (point-max) ""^  "")) (tab-count (how-many-region (point-min) (point-max) ""^\t""))) (if (> space-count tab-count) (setq indent-tabs-mode nil)) (if (> tab-count space-count) (setq indent-tabs-mode t))))"
emacs,35utw1,wadcann,2,Thu May 14 00:13:52 2015 UTC,"Projectile has project caches, do you have those enabled?"
emacs,35utw1,MikeSeth,1 point,Thu May 14 13:10:33 2015 UTC,Thanks for the thought; doesn't seem to make any difference.  Still takes about a second to start completing on the project's files either way.
emacs,35utw1,wadcann,1 point,Thu May 14 16:05:18 2015 UTC,I found that projectile tends to lag a lot if the buffer displaying candidates is too tall since it will try to render enough candidates to fill the entire height of the buffer. On my screen this ends up being ~140. I fixed this by customizing projectile to show a much smaller number of candidates and it got a lot faster.
emacs,35utw1,Derander,1 point,Thu May 14 22:04:05 2015 UTC,Thanks for sharing! I will try what you have. Is there a particular reason why you use exuberant ctags instead of gnu global?
emacs,35utw1,wadcann,2,Thu May 14 07:48:03 2015 UTC,"I tried GNU global at one point and changed back because of something that irked me, but I don't remember what it was that was the problem.  Probably language support, where I hit some language that GNU global didn't know about -- exuberant-ctags can do a lot more languages than GNU global can."
emacs,35utw1,tuhdo,3,Thu May 14 08:17:40 2015 UTC,You can use ctags as a backend for GNU Global and use GNU Global for languages that it supported to get extra features (i.e. gathering references).
emacs,35utw1,kaushalmodi,1 point,Thu May 14 08:25:04 2015 UTC,"I don't regularly code in C, but it was a pleasure to read such a detailed answer. Many things apply to other coding environments too."
emacs,35utw1,gepardcv,1 point,Thu May 14 18:50:58 2015 UTC,Which Emacs features do you find have trouble with project namespacing?
emacs,35utw1,wadcann,2,Fri May 15 15:09:39 2015 UTC,"find-tag-auto/pop-tag-mark, registers, ibuffer (yes, I know that projectile has its own independent limited buffer-switching feature), and frame configuration (which I use in a tty to switch among several window configurations, often leaving other projects open for days).  The compile command used by M-x compile's history -- I have a default set for each project, but I also have a couple modifications of each that I use the history to flip between, and the history isn't namespaced (though projectile has its own ""run M-x compile in a project root and pick up its .dir-locals"" feature)."
emacs,35utw1,gepardcv,2,Fri May 15 17:12:01 2015 UTC,"All fair points. Projectile has the beginnings of tag handling, not sure how well it works. I don't use ibuffer, but I hacked bs-show to be persp-mode aware as follows (I have some extra features which rely on dash, but it's fairly obvious how to get rid of them):  (add-to-list 'bs-configurations              '(""persp"" nil nil nil                (lambda (buf)                  (with-current-buffer buf                    (or (not (member buf (persp-buffers persp-curr)))                        (not (-all? #'null (mapcar #'(lambda (x) (string-match-p x (buffer-name buf)))                                                   boring-buffers)))))))              nil)  (global-set-key (kbd ""C-x C-b"") (lambda ()                                   (interactive)                                   (if (and (fboundp 'persp-buffers) persp-mode)                                       (bs--show-with-configuration ""persp"")                                     (bs--show-with-configuration ""all""))))"
emacs,35utw1,LefterisJP,1 point,Fri May 15 18:25:21 2015 UTC,"Having an emacs server instance continuously running and a project like RTAGS and/or projectile for managing symbols and state of each project is something you should really try.  It may take a while to configure and incorporate in your personal workflow. (I have even made a package for that), but it will really be an ""oh my god this is awesome"" moment when you do.   I work with C and C++11 and I can say with certainty that this is a toolset you want to have"
emacs,35utw1,wadcann,1 point,Sun May 17 01:36:05 2015 UTC,I've spent time trying it; emacs just isn't there yet.  Maybe one day.  I do maintain a server instance.  I just don't use it for my software projects.
emacs,35utw1,LefterisJP,1 point,Sun May 17 03:28:13 2015 UTC,That's a pity. I wish I could share my config with you to demonstrate what I mean. But yes I suppose with time all these projects that use clang tools will merge into one and using them may become easier.
emacs,35utw1,hackerfoo,2,Sun May 17 15:18:44 2015 UTC,"If you're having problems generating the compilation database for Irony, try using RTags:   Install RTags Compile your source and record output: make > make.log Start the daemon: rdm -S& Parse the log: cat make.log | rc -c - Dump the database: rc --dump-compilation-database > compile_commands.json   Or you can try Bear."
emacs,35utw1,hackerfoo,5,Wed May 13 21:15:36 2015 UTC,"Also, check out Magit (for Git), Projectile, Company, YASnippet, and WhiteSpace."
emacs,35utw1,aport,2,Wed May 13 21:26:33 2015 UTC,"Cmake can output the compilation database, if your project uses that."
emacs,35utw1,LefterisJP,2,Thu May 14 19:45:29 2015 UTC,A big +1 for Rtags
emacs,35utw1,shackra,1 point,Sun May 17 01:26:37 2015 UTC,Seems like Bear is more simple!
emacs,35utw1,hackerfoo,1 point,Thu May 14 05:01:49 2015 UTC,"Yeah, it was until it started to cause make to segfault somehow on a large project.  It's neat, but it is always going to be more fragile than something integrated into the build system.  Anyways, if Bear works, it is much easier to use."
emacs,35utw1,ReneFroger,1 point,Thu May 14 05:34:46 2015 UTC,"Great, I will try again to create the database."
emacs,35utw1,abo-abo,10,Thu May 14 07:49:09 2015 UTC,"If you're looking for a good configuration, you could consider this C-environment for Emacs guide.   And also, on the reference page there are many links for C-programming listed."
emacs,35utw1,skeeto,3,Wed May 13 18:39:09 2015 UTC,"I have a rather large C/C++ config mostly based on CEDET and a bunch of regex hacks. See oremacs and function-args.  Also, check out the built-in c-macro-expand, I discovered it only recently."
emacs,35utw1,__rompy,1 point,Wed May 13 22:14:54 2015 UTC,"Thanks, I will try out oremacs."
emacs,35utw1,tuhdo,3,Thu May 14 07:51:19 2015 UTC,I write C professionally nearly every day with gcc and I don't have anything particularly fancy for C outside the defaults.   ggtags for navigating larger projects. My own custom front-end for M-x compile so I can invoke the build system in different ways and on different targets from Emacs. I'll make this into a package ... someday. A handful of c-set-offset calls to get auto indentation to use my preferred style.
emacs,35utw1,__rompy,3,Wed May 13 23:31:15 2015 UTC,"What you will probably want in the future (if you will ever have files with more than 5000 lines) is a custom syntax highlighter. The default one is sluggish even on a i7 sandy-bridge processor.  What problem did you have with irony ?  All I did was add this to the config file:  (irony-mode t) (irony-cdb-autosetup-compile-options) ;; this requires to install the company-irony plugin (add-to-list 'company-backends 'company-irony)   And in the folder with the C sources/headers I added a .clang_complete file containing the flags and the includes. For example:  -If:\work\c-project\include -I\\remote_server\c-project\include   I also use CEDET and semantic, for the 'global-semantic-idle-summary-mode' (if you have functions with a lot of parameters, this is a huge help).  For navigation I use ctags with M-. and M-*, and ack for searching. And this function, which will jump to the first occurrence (99% of times this is the definition) of a symbol in the current scope (useful for local variables).  (defun rompy/goto-definition ()   ""Simulates VIM 'gd'. Not perfect (just like vim).""   (interactive)    (let ((sap (thing-at-point 'symbol))         (found-point 0)         end-point)     (c-end-of-defun)     (setq end-point (point))     (c-beginning-of-defun)      (if (re-search-forward (concat ""\\<"" sap ""\\>"") end-point t)         (setq found-point (match-beginning 0)))      (when (/= found-point 0)       (goto-char found-point))))"
emacs,35utw1,a_elovikov,1 point,Thu May 14 05:52:50 2015 UTC,"Thanks. The problem I had with irony-mode was to create a database, but that was some time ago so I will try again and see if I can get it  to work now. Also in our project we have flat directory structure. So it looks something like this:  driver1     src         makefile         file.c     inc         file.h  driver2     src         makefile         file.c     inc         file.h  ...   So I am not sure how to get i working when having like this. We choose the components we want to have in the program."
emacs,35utw1,__rompy,3,Thu May 14 08:05:50 2015 UTC,Create a .clang_complete at the root if your project. Add -I./include/path for each inc directory. Remember to install irony server and enable irony-mode in your C/C++ buffer. Remember to run irony-cdb-menu to reload the newly created .clang_complete if Irony does not automatically detect.
emacs,35utw1,tuhdo,2,Thu May 14 08:24:04 2015 UTC,"I had some problems with relative paths in irony for some projects, so I chose the more 'hardcore' approach:  In driver1/src create a .clang_complete with the full path to the driver1/inc. Eg:  -Ic:/projects/driver1/inc   And the same for every src folder.  Try this only if the solution of /u/tuhdo doesn't work."
emacs,35utw1,__rompy,1 point,Thu May 14 09:12:05 2015 UTC,Do you have such syntax highlighter? I need to work with pre-processed files sometimes and they're really huge and laggy with the default one...
emacs,35utw1,tuhdo,1 point,Fri May 15 03:21:13 2015 UTC,"I actually wrote my own, but it's just based on a bunch of regexs: http://pastebin.com/Q7DaJfwW  The one from emacs it's does much more than that (highlights all variable declarations, function definitions, etc.) but it's much more slower. You could add a conditional to load this one if the file has more than 5000 lines.  You can modify it to suit your needs, it's pretty easy."
emacs,35utw1,__rompy,1 point,Fri May 15 05:25:36 2015 UTC,Hmm I opened a C file with 20k lines without a problem. I also opened a 39MB C file (on Linux). What's your Emacs version and your OS?
emacs,35utw1,atilaneves,1 point,Fri May 15 05:31:54 2015 UTC,"Windows 8.1, and I tried every emacs build possible (the official one, haroogan builds, cygwin, emacs-w64). I settled for the one from msys2 (GNU Emacs 25.0.50.1 (x86_64-w64-mingw32)).  The system it's a i7-4702MQ with a SSD, so I doubt it's because of it.  It probably works much better on linux."
emacs,35utw1,aport,2,Fri May 15 05:39:20 2015 UTC,"Hmm I use Spacemacs with over 200 packages installed and Semantic enabled, emacs-w64 24.5, normal 5400 rpm HDD and disk reading is quite slow after not reinstalling Windows for 5 years. 5k lines was never the problem for me."
emacs,35utw1,atilaneves,3,Fri May 15 05:44:21 2015 UTC,"The the only thing that could be wrong is the Comodo Firewall. It's the only thing that has been on all of my machines so far.  I will run some tests to see. I just taught that it was a problem with emacs since instrumenting showed that a long time was spending trying to parse the file.  EDIT: Okay, this has to do with my setup. With spacemacs the performance it's okay, but with my config & the default syntax highlighter it's slower.  EDIT2: Finally! It's not the emacs problem but mine. I had 'c-debug-parse-state' set (I had some problems with comments when the indent level was set on -98 or a wrong number). Now it works as it should."
emacs,35utw1,RobThorpe,3,Fri May 15 06:14:27 2015 UTC,"cmake-ide (I'm the author). If you're using cmake as I do, this is the way to go. I wrote it to scratch my own itch and it's been doing it quite well so far.  It depends on other packages such as auto-complete-clang and rtags."
emacs,35utw1,Imxset21,1 point,Sun May 17 17:40:48 2015 UTC,"To support irony-mode you just need to pass it the location of compile_commands.json  I submitted a patch to cppcm which did that if you want to take the code.  What's nice about irony is that you feed it the compilation database and you get syntax checking (flycheck-irony), completion (company-irony), and docs (eldoc-irony) automatically."
emacs,35utw1,kill_jester,1 point,Sat May 23 06:54:22 2015 UTC,I forgot to mention flycheck.
emacs,35utw1,redguardtoo,2,Sat May 23 07:50:29 2015 UTC,"As well as the modes other have mentioned there are some useful in-built ones:   hide-ifdef-mode for hiding ifdef blocks. hide-show mode. ff-find-related-files (I believe there's a projectile version of this that's better too). cwarn-mode.   As another poster said, CC mode can do all-sorts of things, including macro-expanding the region by calling the preprocessor (which is C-c C-e).  If you're using C on a *nix system it would be worth learning GDB and it's Emacs interface."
emacs,35utw1,aport,2,Wed May 13 22:51:10 2015 UTC,I wrote a post about this not too long ago:  https://www.reddit.com/r/emacs/comments/2lf4un/how_do_you_make_emacs_work_for_development/clu90e5
emacs,35utw1,newfor2015,2,Thu May 14 04:48:52 2015 UTC,"irony is worth trying to get to work, in my opinion. use it with company for completion, and eldoc, and flycheck. all it needs now is ""jump to definition"" (I currently use ggtags for that)"
emacs,35utw1,tuhdo,2,Thu May 14 07:23:22 2015 UTC,ggtags.el for code navigation gnu global company for code completion (which support gnu global)   It's minimum setup for C programming and easy to set up.
emacs,35utw1,tuhdo,2,Thu May 14 13:15:55 2015 UTC,"Take the time to see why irony didn't work.  Irony mode with company-irony, flycheck-irony and eldoc-irony is an awesome setup. I also use projectile and redguardtoo's cppcm to automatically set everything up in cmake projects."
emacs,35utw1,tuhdo,-3,Thu May 14 19:47:36 2015 UTC,"To be honest, an IDE like Eclipse or Visual studio is far superior over emacs for developing code. I would still use emacs key binding in them though."
emacs,35utw1,tuhdo,3,Thu May 14 05:56:25 2015 UTC,"In which way? We can use tagging tools to navigate project the size of Linux kernel or larger and Clang for code completion, Projectile to jump to any file even for project with more than 50k files, flycheck using Clang for syntax checking. What am I missing?  And Emacs has excellent supports for interpreted languages (i.e. R, Python, Ruby... especially Lisp)."
emacs,35utw1,tuhdo,5,Thu May 14 06:11:14 2015 UTC,"In which way?   My god. So many. The three main ones that attract people to IDEs over Emacs:  1) Competent code completion. With eclipse and visual studios, it simply works, and works beautifully with C/C++ and other languages. Try doing C++ completion with Semantic/CEDET.. it's a joke. Try it with clang based tools and it's an even bigger fail. It simply doesn't complete 50% what Eclipse and Visual studios can and it gets worse for Emacs as the projects grow in complexity and size.  2) Refactoring. The refactoring ability in eclipse and visual studios is superb. You can refactor symbols across entire project spaces with a few simple key strokes. You can highlight entire blocks of code, refactor it into a function, add that function def to your headers, and have the function call be placed where the block of code was. Oh, and this function will immediately be able to be completed as a symbol.  3) Automatic project navigation. Project navigation with eclipse and visual studios is automatic as soon as you save. No need to constantly regenerate and manage tags databases. It purely works, and works correctly and automatically. Eclipse and Visual Studios also understand scope. No need to be given a list of possible jump points from which the user needs to iterate through and select."
emacs,35utw1,newfor2015,2,Thu May 14 13:45:41 2015 UTC,"1) Competent code completion. With eclipse and visual studios, it simply works, and works beautifully with C/C++ and other languages. Try doing C++ completion with Semantic/CEDET.. it's a joke. Try it with clang based tools and it's an even bigger fail. It simply doesn't complete 50% what Eclipse and Visual studios can and it gets worse for Emacs as the projects grow in complexity and size.   So, you are saying that a real compiler that can generate code that machine can run can't compete with self-made parser implemented in those IDEs? I doubt that you ever tried the Clang based solutions.   2) Refactoring. The refactoring ability in eclipse and visual studios is superb. You can refactor symbols across entire project spaces with a few simple key strokes. You can highlight entire blocks of code, refactor it into a function, add that function def to your headers, and have the function call be placed where the block of code was. Oh, and this function will immediately be able to be completed as a symbol.   You mean, like this?  Until I see that it works reliably on real world use cases i.e. able to handle multiple layers of macros and templates on large projects.   3) Automatic project navigation. Project navigation with eclipse and visual studios is automatic as soon as you save. No need to constantly regenerate and manage tags databases. It purely works, and works correctly and automatically. Eclipse and Visual Studios also understand scope. No need to be given a list of possible jump points from which the user needs to iterate through and select.   Yes, even ggtags (which uses GNU Global) can automatically update code as you save for navigation. If you want precise scoping, use Clang based solutions. It uses a compiler's parser and will never be less accurate than the ad-hoc parsers implemented in the IDEs.  It seems like you have never tried Emacs or has very little experience with it or your knowledge about it is largely outdated."
emacs,35utw1,tuhdo,3,Thu May 14 14:00:23 2015 UTC,"So, you are saying that a real compiler that can generate code that machine can run can't compete with self-made parser implemented in those IDEs? I doubt that you ever tried the Clang based solutions.   Okay, you're skirting the issue now. No, that's now what I'm saying. We're talking about the Emacs end of the toolchain here. Not the compiler end of the toolchain. Currently, the Emacs end of the toolchain is childish, buggy, and incomplete.  Yes, I've tried clang based solutions and they completely suck balls. My original statement mentions clang tools. Using eclipse and Visual studios, one can complete any symbol with the entire Linux kernel. One can refactor any symbol in the Linux kernel. One can't do that with any tool available with Emacs.    You mean, like this?   I've used your refactoring. It works well for very simple things. You've never actually used a professional refactoring tool, have you? Professional tools actually understand scope and can refactor the correctly scoped symbol project-wide.    If you want precise scoping, use Clang based solutions.   Stop confusing a compiler front-end with Emacs. Because Clang can do something doesn't mean that Emacs has a competent tool that can use that interface. We're talking Emacs, the text editor, here, and not compilers.   Then one has to recompile each and every time. And on top of that, the Emacs tools that interface with Clang are sub-par and buggy.   It seems like you have never tried Emacs or has very little experience with it or your knowledge about it is largely outdated.   Nope. I've used Emacs steadily since about 2008 mainly because Emacs' remote capabilities are better than what IDEs offer. I never edit, compile, or run code on my local machine.   Face it. People like you are the problem. You refuse to acknowledge the serious short-comings of your tools when compared to professional environments. That's why Emacs has such a small user-base compared to professional IDEs."
emacs,35utw1,newfor2015,1 point,Thu May 14 14:12:09 2015 UTC,"Okay, you're skirting the issue now. No, that's now what I'm saying. We're talking about the Emacs end of the toolchain here. Not the compiler end of the toolchain. Currently, the Emacs end of the toolchain is childish, buggy, and incomplete.   You don't realize that Emacs uses Clang to do the ""IDE things"" you mentioned? How is it different for the IDEs with its self-made parser compared with getting real completion candidates from a compiler. Clang provides an infrastructure for editors like Emacs or even Vim to build an IDE upon it.    Yes, I've tried clang based solutions and they completely suck balls. My original statement mentions clang tools. Using eclipse and Visual studios, one can complete any symbol with the entire Linux kernel. One can refactor any symbol in the Linux kernel. One can't do that with any tool available with Emacs.   Really? Have you recompiled the kernel? Have you tried renamed a symbol like printk? How do you know your Eclipse/VS give entire symbols? Do you know all the symbols in the kernel?   I've used your refactoring. It works well for very simple things. You've never actually used a professional refactoring tool, have you? Professional tools actually understand scope and can refactor the correctly scoped symbol project-wide.   Yes, because it was meant to do simple things. I explicitly mentioned that it doesn't do project wise refactoring because the built-in parser can block Emacs. I know this is problem but for small scale refactoring in the scope of a function, it's still useful.   Stop confusing a compiler front-end with Emacs. Because Clang can do something doesn't mean that Emacs has a competent tool that can use that interface. We're talking Emacs, the text editor, here, and not compilers.   As mentioned above, Emacs can use Clang. You simply say it sucks, but not in which way.   Face it. People like you are the problem. You refuse to acknowledge the serious short-comings of your tools when compared to professional environments. That's why Emacs has such a small user-base compared to professional IDEs.   I am fully aware of what Emacs can do and what it can't. But saying that only those IDEs are professional, you are disregarding many other people here. You know, even people even use Vim to write embedded code, I guess they are not really professional."
emacs,35utw1,wadcann,3,Thu May 14 14:22:42 2015 UTC,"You don't realize that Emacs uses Clang to do the ""IDE things"" you mentioned? How is it different for the IDEs with its self-made parser compared with getting real completion candidates from a compiler. Clang provides an infrastructure for editors like Emacs or even Vim to build an IDE upon it.    I don't know how or why you're getting confused. I suspect you're acting emotionally instead of rationally.   I already said that there's the Emacs side of the tool and the Clang side of the tool. What you fail to realize is that the Emacs side of the toolchain is lacking, severely compared to modern IDEs like Eclipse and Visual Studios.   Really? Have you recompiled the kernel? Have you tried renamed a symbol like printk? How do you know your Eclipse/VS give entire symbols? Do you know all the symbols in the kernel?   Now one can easily see that you've lost the argument. You're basically arguing like a creationist does: How do you know those fossils weren't put there by God to trick us?!?!??!!!!!!!??!?!!!!  When I say that modern IDEs can handle the Linux kernel source code, that means that your code will compile and run. I've tried it and tested it. I do kernel hacking professionally for a company called Cray. I can't develop locally anymore because local desktops don't have the hardware that I'll be compiling and running against, hence I use the next best thing: Emacs.    Yes, because it was meant to do simple things.   Great. I'm not knocking or shitting on your tool. I like your tool. It has great, useful functionality. That doesn't mean, however, that modern professional IDEs don't have additional features and accuracy measures.    As mentioned above, Emacs can use Clang. You simply say it sucks, but not in which way.   I'm not sure what's needed here. I've already discussed how the Emacs end of the toolchain doesn't offer all the completions that it should; it completes maybe 50% of the stuff for C++ (simple projects) and it gets worse as the projects become more complex (different language bindings, lots of reliance on OOP properties).    But saying that only those IDEs are professional   For the developers of core Eclipse and Visual studios, it is their primary job and business product to produce working and robust features in these IDEs. For Emacs IDE features, it's community and volunteer driven."
emacs,35toaz,SurviAvi,5,Wed May 13 12:40:24 2015 UTC,http://www.emacswiki.org/emacs/GnusFormatting  see version 3 unicode
emacs,35toaz,balkenbrij,1 point,Wed May 13 12:48:00 2015 UTC,http://i.imgur.com/kantei2.png (I just had one email)  Didn't quit do what it should... I placed it in .emacs and then tried in .gnus.
emacs,35toaz,balkenbrij,1 point,Thu May 14 12:28:57 2015 UTC,"hmm weird, i tried it in gnus (but quite some time ago (before 24)), .gnus or .emacs shouldn't make a difference afaik."
emacs,35toaz,daddyc00l,1 point,Sat May 16 00:49:48 2015 UTC,"mine looks like this: http://i.imgur.com/Y3PXMQY.png  if it appeals to your gentle sensibilities :), please do let me know, and i can share the gnus configuration which might help.  fwiw, i just use gnus for news, not for mails anymore (having moved to mu4e)"
emacs,35vmd9,nautola,6,Wed May 13 21:54:42 2015 UTC,"It's my opinion that many people have too much tension in their muscles when they type.  Most keyboards need very little pressure.  Perhaps it's just your choice of words, but 'slapping' the return and it hurting your pinkie sounds like the problem is not where the keys are or the fact that it's your pinkie, but rather that you're too tense and using too much force.  Concentrate on relaxing your whole upper body all the way to your fingertips, and using a minimal amount of force for all typing.  But... perhaps I just won some genetic lottery and am way off base.  I've never suffered any hand problems from typing and never found emacs keys awkward or difficult.  e.g. people say M-x is awkward and yet I find it trivially easy and relaxed.  The closest thing to problems I've had is sore elbows from resting on bad chair arms.  Easily solved by not resting my elbows on arms.  Haven't had that in years."
emacs,35vmd9,EatMoreCrisps,1 point,Thu May 14 00:40:36 2015 UTC,I'm glad I'm not the only person who feels this. I don't  get any of those rsi problems from emacs
emacs,35vmd9,Mitchical,4,Thu May 14 08:02:23 2015 UTC,If your pinky slapping Return is really that big of an issue you could always get a keyboard where Return is on the thumb rather than the pinky.  See the Kinesis Advantage or the Ergodox for examples.  I've got an old version of the Kinesis and I love it.  The contoured shape of the Kinesis also may help prevent the slapping you describe since you are reaching far less.
emacs,35vmd9,rson,1 point,Wed May 13 23:24:07 2015 UTC,+1 Kinesis Advantage. I love this keyboard.  I've gone one step further and mapped it to dvorak. I went from RSI pain in an hour to being able to use it (almost) all day without discomfort.
emacs,35vmd9,meznak,3,Thu May 21 20:20:51 2015 UTC,"C-m is exactly the same as pressing RET .  C-i   is exactly the same as pressing TAB .    Maybe you can start with this, and see how it works for you"
emacs,35vmd9,rgrau,2,Thu May 14 21:45:26 2015 UTC,"I use Ctrl more often than Meta. I have swapped those keys and I'm using my thumbs to press the ""new"" Ctrl keys.   Swapping Ctrl and Meta also makes the keyboard layout more similar to the old Lisp machines that Emacs was designed for."
emacs,35vmd9,muldvang,1 point,Sat May 16 00:20:40 2015 UTC,"What are you pressing with the pinkie? Ctrl?  Try the following:   On a normal keyboard press right control with the knuckle of your pinkie (the top of your palm). On a laptop keyboard press right ctrl & alt with your thumb. Instead of using Alt for Meta use C-[. Try setting things up so Caps-Lock is Ctrl. I don't like doing that but some people do. There's also ""god-mode"" which is like VI modal editing applied to Emacs using Emacs keys."
emacs,35vmd9,RobThorpe,1 point,Wed May 13 23:05:22 2015 UTC,"I found this article from Xah Lee very helpful. He suggests pressing control with your palm. And using both the right and left control keys. Works good for me.  I chord C-M-x with 2 hands.  The C with my right palm, M with my right thumb,  x with the left hand."
emacs,35vmd9,Starlight100,1 point,Thu May 14 02:18:53 2015 UTC,"one way to prevent pinky strain that i've found is to glue a pad onto the key in question (eg: return, shift, ctrl). you can make a pad by cutting a foam ear plug in half. looks weird, but feels luxurious on the pinky"
emacs,35vmd9,ignaciothayer,1 point,Thu May 14 05:09:53 2015 UTC,"This is really impossible for the internet to answer.  Even if everyone was using the exact same keyboard (same size keys, same travel, same pressure, same layout, etc.), we'd all still have different hands (size, reach, finger length, strength, joint health, etc.) and practice.  There is no universally correct set of habits.  That said, if you know you're hitting the keys much harder than you need to, to get the keypress to register, you could work on a lighter touch.  Or try to find a keyboard with a longer key travel and a ""cushioning"" resistance; you don't want too soft, or you'll ""bottom-out"", and you don't want too hard, or you'll be encouraging your habit of excessive force.  (And the latter bit there does suggest one tip:  you don't need to bottom-out to get the key to register...many keyboards' keys will register half-way...and all you care about is that trigger, it's not necessary to bottom-out on a keypress.)  But in general, the only real advice here is to try a variety of keyboards, and practice the habits you want to maintain.  ""Habit makes a good servant, but a poor master.""  Keep in mind that any new (to you) keyboard is likely to feel awkward at first, just because it is new (to you).  So, give each at least a couple of hours of of use before making conclusions.  But in the end, the only reliable guide is your own personal experience."
emacs,35usnj,yisthisnotanon,4,Wed May 13 18:10:32 2015 UTC,"While in your script's window:  PressM-x (Alt-x)  Type r-mode  Press return  Every buffer has a major mode, like r-mode, python-mode, c-mode which determines things like text coloring, keybindings, menu items and more. You likely accidentally enabled a different major mode than your desired mode through the minibuffer (M-x)."
emacs,35usnj,jordonbiondo,1 point,Wed May 13 18:36:22 2015 UTC,"The ""W"" in the above snippit is a typo, just to be clear."
emacs,35usnj,wadcann,1 point,Thu May 14 00:44:43 2015 UTC,"If you have started another major mode you see it listed on the bar at the bottom of the screen.   C-h m  C is for control key. Brings up help for current modes. So you can check what modes are running and what various key bindings / short cuts do.   If you do have another mode running, running it again cancels it. Example M-x text-mode  Enables text mode major mode M-x text-mode  again and it's gone."
emacs,35usnj,verdigris2014,1 point,Thu May 14 22:25:49 2015 UTC,"Major modes do not toggle, only minor modes. Running a major mode function twice will not turn it off and on again."
emacs,35u5wn,tuhdo,2,Wed May 13 15:15:27 2015 UTC,You can see the use case on Emacswiki.
emacs,35u5wn,deadmaya,2,Wed May 13 15:15:48 2015 UTC,thanks for the link i'll give it a try!
emacs,35u5wn,tmikov,2,Thu May 14 05:29:28 2015 UTC,I find this very useful
emacs,35u5wn,kaushalmodi,1 point,Thu May 14 17:15:37 2015 UTC,"I take care of trailing white spaces, extra newlines at the end of file using  (add-hook 'write-file-hooks #'delete-trailing-whitespace)"
emacs,35u5wn,kaushalmodi,2,Wed May 13 15:52:24 2015 UTC,"You certainly don't want to do that. It will create a huge diff when you want to commit. Not always you work on your files. And during editing, it's just annoying to see visible whitespace since I set this to t to not let trailing whitespace undetected:  (add-hook 'prog-mode-hook (lambda () (setq show-trailing-whitespace 1)))"
emacs,35u5wn,kaushalmodi,1 point,Wed May 13 15:55:07 2015 UTC,"For the coding I do (Verilog), it is utmost important to NOT have any whitespace at the end of lines for certain constructs (multi-line macros). I have been through debugging hell before I used this hook; but not anymore :).   As for commit diffs at work, whitespace diffs are ignored.   As for commit diffs of my personal stuff (like .emacs.d), it is already whitespace clean as I am using this hook for more than a year now."
emacs,35u5wn,kaushalmodi,1 point,Wed May 13 16:03:33 2015 UTC,"Sure for your use case; my workplace ensures about whitespace as well. But then, there are projects with people using other editors and they generally don't care about whitespace. In this case, we don't want to delete it accidentally. And I turn show-trailing-whitespace on to really control the whitespace, so it's annoying when I see one highlighted. It would be useful for users of show-trailing-whitespace."
emacs,35qs7a,bitsan,3,Tue May 12 19:11:46 2015 UTC,I use Twittering Mode. The installation instructions on EmacsWiki worked fine for me.
emacs,35qs7a,professed,2,Tue May 12 19:19:30 2015 UTC,Best way I've found so far is to use the amazing BitlBee and Emacs' rcirc (or any other IRC client).
emacs,35qs7a,drstevoooo,1 point,Tue May 12 20:35:10 2015 UTC,"twittering-mode for me, but this comment introduced me to bitlbee and i just have to say thank you :)"
emacs,35qs7a,vermiculus,2,Wed May 13 03:29:08 2015 UTC,"Twittering-mode works for me as well, but recently I have to do ""M-x twit"" twice to start it. The first time gets my token (after my gpg password is entered), but doesn't actually do anything. Just repeating the command works fine though. I haven't bothered to try to troubleshoot it so far."
emacs,35qs7a,deong,1 point,Wed May 13 10:03:25 2015 UTC,twittering-mode of course :)  Also for good experience I recommend to use some compatible theme like moe-theme or sanityinc-tomorrow.  All my setup for twittering mode: https://gist.github.com/b6df147302041642ce11
emacs,35qs7a,ssbb_me,1 point,Tue May 12 19:23:05 2015 UTC,"Twittering-mode, as other have said. I'm looking into writing some elisp code to retweet and mark as favorite a tweet under the cursor to save keystrokes!"
emacs,35qzgi,bologna_tugboat,5,Tue May 12 20:04:03 2015 UTC,Try auto-yasnippet: it's a package for quick one-off templates. Exactly for situation like yours.
emacs,35qzgi,abo-abo,2,Tue May 12 20:29:18 2015 UTC,http://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macro-Query.html  Is what you're asking for
emacs,35qzgi,instant_sunshine,1 point,Wed May 13 04:18:15 2015 UTC,Not an actual answer to your question but I would just write a function that inserts the prefix and then continue typing the rest.   Then you could just bind it to some key combo fatality for easy access.
emacs,35qzgi,blandest,1 point,Tue May 12 20:09:31 2015 UTC,"That's an idea that would certainly work, but for something one-off like this it seemed like writing a quick macro would have been a better use case.  Then again, it would never hurt to practice writing custom functions, no matter how simple."
emacs,35qzgi,blandest,1 point,Tue May 12 20:16:58 2015 UTC,"So am at a computer now and I was able to test this:  (lexical-let ((prefix-text nil))   (local-set-key (kbd ""<f1>"")              (lambda (&optional arg)                (interactive ""p"")                (message ""%s %s"" prefix-text arg)                (when (or (not prefix-text)                          (> arg 1))                  (setf prefix-text (read-input ""Prefix: "")))                (insert prefix-text))))   If your press <f1> for the first time or if you press C-u <f1> at any point it will prompt for the prefix text that will be inserted. Once the prefix text has been configured, you just have to press <f1> to insert it. Rather then prompting for the last piece of text, my function just let's you insert it yourself.  I have the same issue when editing Java .properties files but I just cut and paste the same prefix several times and I usually get away with it."
emacs,35qzgi,jplindstrom,0,Wed May 13 10:49:57 2015 UTC,"If you need to run a macro repeatedly and do something manually in the middle of it, consider if you can change the start and end point of the recording so that it starts just after the manual bit and ends just before the manual bit.  This may not match up with the way you would normally describe the task. For instance, it might not exactly match up with ""change this line in this way"", but rather ""change the end of this line and then the beginning of the next line"".  Often, part of the macro is to do a search, to find the next place to make an edit. In that case it's better to finish the macro with the search for the next place to edit, so that you can visually inspect it and verify it's a good idea to run the macro another time."
emacs,35o9sg,coolwanglu,5,Tue May 12 04:08:08 2015 UTC,"For anyone that doesn't know, this game can be played in Emacs with M-x dunnet"
emacs,35o9sg,zck,2,Tue May 12 15:05:21 2015 UTC,Enjoy the Auto button :) https://twitter.com/RonnieSchnell/status/597809828828979200
emacs,35o9sg,TweetsInCommentsBot,2,Tue May 12 04:10:00 2015 UTC,@RonnieSchnell   2015-05-11 17:05 UTC  @coolwanglu I love and hate the auto button at the same time     This message was created by a bot  [Contact creator][Source code]
emacs,35o9sg,flaheadle,2,Tue May 12 04:10:04 2015 UTC,This is a sweet hack. Implemented with a mini emacs lisp interpreter written in js.
emacs,35kjmc,purcell,41,Mon May 11 06:23:10 2015 UTC,+1000. The number of times I respond to MELPA submissions with a link to the elisp coding conventions is just ridiculous.
emacs,35kjmc,purcell,12,Mon May 11 07:18:46 2015 UTC,"Hey Steve, I really appreciate the work you've put in to helping MELPA packages conform to the elisp conventions. With the momentum with which MELPA took off, without your guiding hand it could have been a recipe (heh) for some real coding chaos."
emacs,35kjmc,sabof,3,Mon May 11 10:49:21 2015 UTC,"Thanks, I appreciate the kind words."
emacs,35kjmc,syl20bnr,10,Tue May 12 18:38:10 2015 UTC,"It's done to distinguish a namespace from ""normal words"", so when reading it's easier to skip the prefix and have a more ""written in English"" experience.  I do agree with 3 (although I might also be guilty), for interactive functions.  Everyone is entitled to an option (including the author of the manual), but if a significant amount of people didn't like using a different symbol, this post wouldn't exist. And ""it's always been done this way"" is a rather weak argument.  The impact of custom-unlispify-tag-names seems too trivial to be seriously considered.  Admittedly I don't care that much about the issue, but these are my 2 pence."
emacs,35kjmc,jordonbiondo,0,Mon May 11 11:47:59 2015 UTC,"I agree, all in all what matters is to have symbols of a package under the same fake but consistent namespace. We are guilty about the style but not about the principle of isolation. We should be able to avoid the elisp jail (with bars in hyphens and parenthesis) :-)"
emacs,35kjmc,ieChohp1xai0,13,Mon May 11 19:54:51 2015 UTC,"Meh, I don't really see it as a real issue. I really liked the idea of it when I first saw it, I think it would have been a better convention than what we have now if a character was decided on long ago.   I like foo:bar-baz better than foo-bar-baz, because you can tell the difference between FOO-BAR-baz and FOO-bar-baz much easier.  However, I understand it's the convention so I try to avoid it now. But honestly, has anyone every been inconvenienced by it?   Maybe it's just customize that needs to adapt. I loath customize anyway so I've never run into issues with such packages.  Also if you use things like smex, and ido-flx, you can't really get confused.  That being said... are you happy now?"
emacs,35kjmc,jordonbiondo,4,Mon May 11 11:43:06 2015 UTC,"That being said... are you happy now?   This made me LLOL.  I just meant stuff that's in package archives, can be required by other packages, etc. not your init file—others may disagree here, but I think write your own custom code however you want!"
emacs,35kjmc,ieChohp1xai0,3,Tue May 12 02:05:18 2015 UTC,"A lot of ""bilingual"" emacs lisp and common lisp coders (there is a lot of community overlap) prefer to avoid : / :: in emacs lisp because they would be ""false friends"" - i.e.  : / :: would make names look too much like common lisp packages, but emacs lisp doesn't really have common lisp packages (it does have obarrays, which are somewhat related to, but not the same as, nor conventionally used the same way as, packages in common lisp)."
emacs,35kjmc,jordonbiondo,1 point,Mon May 11 12:37:14 2015 UTC,"I'm not set on : as the best separator, I would prefer / if one was chosen."
emacs,35kjmc,rout39574,3,Mon May 11 13:25:05 2015 UTC,"I do understand where you're coming from, but in practice instead of FOO-BAR-baz,  people often just do e.g. foobar-baz (or just pick something else or abbreviate further). The current statement of the conventions doesn't seem to require it though, just say vaguely ""choose a short word"" as your prefix.   Emacs lisp might grow a real system at some point.  One thing I for sure wouldn't want is something like like PHP's decision to use something crazy like \  (backslash) because it was all that was left."
emacs,35kjmc,vermiculus,2,Mon May 11 14:20:29 2015 UTC,"agreed. I prefix every custom function in my config with jordon, and also what package they are for. So say I have a custom indent function for ruby it would be called jordon/ruby/indent-function"
emacs,35kjmc,aptmnt_,1 point,Mon May 11 17:28:45 2015 UTC,And when someone wants to modify your stuff to do the analysis of indentation in EC2 they'll invent their own thing and it'll be   cloudy:jordon/ruby/indent-function  because they like their 'convention' better than yours.   Nomenclature is a hard problem.  Facile answers to it tend to be wrong.  Idiosyncratic answers are actively hostile.
emacs,35kjmc,syl20bnr,5,Mon May 11 18:59:51 2015 UTC,"I'm all for code conventions and have never broken this (except in personal, temporary code for use of navigation), but this problem is the result of elisp's lack of proper namespaces. That's all. The damage may have spread to other 'Hungarian notation'-esque absurdities, but I'm confident that it started with namespaces. Often times, a single word isn't a good enough description and you would like clear distinction between foo:bar-qux and foo-bar:qux. A contrived example, of course, but I hope you see the reasoning."
emacs,35kjmc,ieChohp1xai0,6,Tue May 12 02:09:33 2015 UTC,"Spacemacs seems guilty of this, with spacemacs/thing spacemacs//foo and spacemacs|bar (at least). Wonder if it's too established to change now."
emacs,35kjmc,roerd,3,Tue May 12 04:54:30 2015 UTC,"To be fair, Spacemacs respect this convention for variables. For function the hyphen is replaced by / and for macro this is |. This is documented in the convention as well as the motivation behind this.  How many times did you check the documentation of a symbol to know if it is function or a macro ?"
emacs,35kjmc,ieChohp1xai0,9,Mon May 11 10:34:41 2015 UTC,"Being able to quietly swap between a function and a macro implementation of something is a lisp feature. So quite apart from being an unnecessary break from the official emacs-manual-documented  -/-- emacs lisp convention, that naming scheme is just a dumb idea in lisp terms that I would discourage any usage of anyway, sort of thing a novice might come up with before he really groks lisp, a bit like a novice java coder prefixing all interfaces with I - a bad and unnecessary thing to do in java terms.  Also, Eldoc mode, which I have on all the time (auto-shows function/macro args in the echo area when you put the point on a symbol in head position) seems to be showing macro and functions in slightly different colors, too, though I wasn't consciously aware it did that until paying attention just now."
emacs,35kjmc,syl20bnr,7,Mon May 11 10:54:35 2015 UTC,"You can never quietly swap between function and macro implementations. because the function might be used as value. That never was a ""Lisp feature""."
emacs,35kjmc,ieChohp1xai0,7,Mon May 11 12:11:02 2015 UTC,"In practice it is. ""might"" is not ""will"" and ""quietly"" is not ""silently"".  It's quite common when evolving code to say ""oh, foo should be a macro"" or ""bar doesn't really need to be a macro"".  You can't instantiate an interface like you can a class in java either, that doesn't mean it's not stupid to name it specially.    Higher-order functional programming is not even that commonplace in emacs lisp, which is idiomatically quite imperative (locked-in by the api provided to c primitives in some places - edit: I'm not claiming that's a good thing, just the way it is)."
emacs,35kjmc,syl20bnr,1 point,Mon May 11 12:38:59 2015 UTC,"You've got a point but for now this feature has not been applied in the spacemacs code base. OTOH constantly checking whether a symbol is a macro or a function to know how to write or read arguments was a real pain. The conventions did not come out of nowhere, I'm not that stupid (I hope) :-)  Until now, coding conventions in spacemacs did not prevent people to happily contribute to the project and I have never heard about any kind of complain about them, be it in the issues (almost 2k now) or in the gitter chat. My arguments about consistency is still valid no matter what youth mistake has been made."
emacs,35kjmc,jordonbiondo,3,Mon May 11 12:51:02 2015 UTC,"Certainly it's better to have a documented convention than do something random, yes.  edit: don't take this as me saying spacemacs is somehow bad or something, I've seen huge successful codebases use significantly crazier conventions, it's relatively minor, more of a ""you know, this is kinda unnecessary and weird""."
emacs,35kjmc,syl20bnr,2,Mon May 11 12:52:21 2015 UTC,I don't think so. It's really just one big find/replace sweep. The only real problem would be ego; I can foresee this as the default response: http://i.imgur.com/Mnd2eH8.jpg
emacs,35kjmc,tuhdo,6,Mon May 11 12:57:07 2015 UTC,"It's ego if you want code guidelines to be ego.   For me the important thing is to motivate and document conventions of a project and keep them consistent  through the project.   In Spacemacs there is no exceptions, the prefix is unique that is spacemacs and the naming follow the conventions put in place for the project, these conventions are documented. From here I see no problem.  Now instead of going the easy ego route, show me a case where having all the symbols following the hyphen convention can be leverage in the code to do cool tricks. This is the only thing in my head that made me hesitate to put a distinction between variables and functions but I could not find one use case and I still have not found one to date. It would be really kind of you to show me one (I'm dead serious, fuck off ego)."
emacs,35kjmc,dddbbb,7,Mon May 11 10:57:22 2015 UTC,"Sorry I didn't specifically mean your ego in reference to Spacemacs, but I can see how it might read that way. Apologies for the unintended insult.  I meant that if some stickler were to do the necessary replacements on some package and open a pull request, I'd put money on a long back-and-forth about the merits of convention and ""what does it really matter anyway?"" and it would really be about ego and hurt feelings because at the bottom of it, it's someone looking at someone else's work and saying their way is wrong. I think the most beneficial outcome of such documented conventions is so we don't need to make things about ego, we can just point to the docs and say, ""hey, don't blame me, it's these ironclad and immutable conventions."" Of course conventions hold no real sway, but if we all pretend they do then no one's feelings get hurt.  I don't use Spacemacs but I can appreciate from afar the amount of work that has gone into it. I'm sure there is an alternate universe version of me who has put the time into it and thoroughly loves it.   For me the important thing is to motivate and document conventions of a project and keep them consistent through the project.  In Spacemacs there is no exceptions, the prefix is unique that is spacemacs and the naming follow the conventions put in place for the project, these conventions are documented. From here I see no problem.   I think there's an equivocation in what you've said here though, which in in the term project. As I understand it, Spacemacs is a kit for Emacs, not (yet) its own beast. Is Emacs itself not a project? Therefore, is Spacemacs then not a project within this larger project, and thus shouldn't it, through your own argument, remain consistent with it?  On the other hand, if I'd written something as large and lauded as Spacemacs I'd be inclined to write my own rules to, and Spacemacs really seems to follow its own orbit, so more power to you brother!   Now instead of going the easy ego route, show me a case where having all the symbols following the hyphen convention can be leverage in the code to do cool tricks.   As for cool tricks, I'm not sure. I've always worried that my idea of cool is actually pretty lame. I just like my mini-buffer autocomplete working well; I like the ability to see all the symbols of a particular mode by typing M-: foobar- TAB, and if foobar-next-item is a function is has a little <f> next to it, so I don't see a need for added complexity there. I like that these naming conventions make any package easier to navigate, understand, alter or contribute to.  But anyway, let's not be dead serious about these things."
emacs,35kjmc,dddbbb,4,Mon May 11 11:23:46 2015 UTC,"Using smex and ido-flx will solve your minibuffer problems, not to mention are immensely more powerful than the standard minibuffer and tab completion."
emacs,35kjmc,tuhdo,3,Mon May 11 12:28:34 2015 UTC,"Spacemacs really seems to follow its own orbit, so more power to you brother!   This is a nice wording :-)  To be honest, now with all the tooling put in place in spacemacs we can more easily (it is not perfect) distinct the functions and the macros. It was not the case when I started.... unfortunately.  If the themes faces were different it would be a huge plus too."
emacs,35kjmc,tuhdo,1 point,Mon May 11 19:02:04 2015 UTC,"As for cool tricks, I'm not sure. I've always worried that my idea of cool is actually pretty lame. I just like my mini-buffer autocomplete working well; I like the ability to see all the symbols of a particular mode by typing M-: foobar- TAB, and if foobar-next-item is a function is has a little <f> next to it, so I don't see a need for added complexity there. I like that these naming conventions make any package easier to navigate, understand, alter or contribute to.   And is sub-optimal to other packages out there in term of Speed. Without all the cool packages from the community, no one can be productive with Emacs as compared with other tools. You can't blame people for that.  And the completion method you mention above is complexity. I am certain that any new user would find helm-M-x or smex vastly easier to use and offer superior efficiency."
emacs,35kjmc,schmidthuber,2,Mon May 11 13:00:14 2015 UTC,"I've been using Emacs for a few years now and I still very much consider myself a beginner. (Ideally, I think one ought to always consider themselves a beginner in all things, but that's another story.) I still find heml confusing, so the notion that a fresh green recruit would resolve their prefix confusion by installing/using helm... well I'm incredulous to say the least.  I was going to attribute this to a reverse of the Dunning–Kruger effect, but Wikipedia tells me this is called the ""curse of knowledge"":   The curse of knowledge is a cognitive bias that leads better-informed parties to find it extremely difficult to think about problems from the perspective of lesser-informed parties.   I bought a friend a Rasberry Pi for his birthday once. We spent a good part of an evening just covering cd ls and pwd."
emacs,35kjmc,instant_sunshine,2,Mon May 11 13:07:06 2015 UTC,"the notion that a fresh green recruit would resolve their prefix confusion by installing/using helm... well I'm incredulous to say the least.   FWIW, I'm new to emacs and I find helm easier because I don't know all the right prefixes but I can still search. If I understand correctly, Tab completion requires you to know the correct prefix, but helm's completion does not. So if I know I want to increment a number, I can search for increment even though I didn't know the package was called numerical. (My helm setup also makes it easy to invoke help from within M-x.)  However, your point about installing/configuring a new package is valid. I used spacemacs, so that wasn't too bad (on the other hand, I have no idea how to remove helm if I wanted to stop using it aside from dropping spacemacs entirely).  I can't claim to be free of the curse of knowledge because I've used tools that provide similar behavior (in Visual Studio and vim) and found them easier than alternatives too."
emacs,35kjmc,wasamasa,2,Tue May 12 02:23:22 2015 UTC,"Cool, welcome to the world of Emacs! (Abandon all hope ye who enter...)  Spacemacs is probably going to take over the world and soon I'll sound like an old man for using regular old GNU Emacs and whining about my prefixeses. My way of learning has always been to start with the most minimal thing possible and build up, but I'm probably in the minority, so I'm really glad Spacemacs is there for people who learn from the opposite end.  Unless you know the prefix, you'd type -inc (<space>inc) or *inc. The first is if you know the increment command has a prefix but you're not sure what it is, the second is if you want anything containing increment. The nonstandard prefixes interfere with the first behaviour.  Don't quote me but I think your .spacemacs file is where you enable/disable default packages."
emacs,35kjmc,wasamasa,1 point,Fri May 15 21:01:37 2015 UTC,"Thanks for the tip! That will help when helm stops working (occurred occasionally without a clear repro case).   Don't quote me but I think your .spacemacs file is where you enable/disable default packages.   I was referring to how spacemacs seems to be largely built around integration with helm and disabling helm might be like removing lisp from emacs. However, I'm probably wrong and helm just automatically hooks in to almost everything minibuffer."
emacs,35kjmc,instant_sunshine,2,Sat May 16 00:37:58 2015 UTC,"I still find heml confusing, so the notion that a fresh green recruit would resolve their prefix confusion by installing/using helm... well I'm incredulous to say the least.   Visual Studio also has something similar to Helm for searching file/code but more limited, and I found that people are happy with it. So I guess Helm is not so difficult to use. Actually, introducing Helm to people is much easier than anything else in Emacs. All I need to tell them is that when you type things, the screen shows something for you instantly, and if you want to search for more accurate results, just add more keywords, just like how you search in Google. Perfect analogy. And it works everywhere once Helm is enabled. How do you think Spacemacs become so popular in a short time? Without Helm, I doubt it can have that much success.  Now, compared with stock completion mechanism in Emacs. You have to tell people to press TAB; you have to tell them to enter commands in the precise order in which they have no knowledge of; you have to tell them how to separate command with a dash -; and this behaviour is applied for M-x only."
emacs,35kjmc,instant_sunshine,2,Mon May 18 20:10:54 2015 UTC,"I think this is a perfect example of the curse of knowledge. The assumption here is that the beginner already understands the concepts of elisp packages, how to install them, how to change the behaviour of Emacs, and the general idea that Emacs is a self-interpreting editor unlike, say, Microsoft Word. These are not simple things.  But also *cue dramatic music* I think your response speaks a bit towards what I see as an exclusionary culture of Emacs, e.g.  me:   I still find heml confusing   you:   I found that people are happy with it. So I guess Helm is not so difficult to use.   If I were a complete newcomer and confused about something, this would just turn me off.  I'm sure that using helm is as easy as you say (I've watched YouTube videos and it looks pretty friendly) but installing and getting it to work with everything is not. I had a look in my package archives and there are 134 available helm-related packages. A user with no prior Emacs experience is just going to think WTF.  Beginners need to find their way around the basics before they install new things because the things are arguably better or easier. If the only response is ""it's better, just trust me"" then I feel that's an arrogant approach to involving others.  One reason I love Emacs is that the technology itself is both open in the software licensing sense, but also in its philosophical underpinnings. I would love the culture surrounding it to follow suit."
emacs,35hw7u,kracekumar,2,Sun May 10 15:15:20 2015 UTC,"I don't have tshirt design skills, but did the date get moved? I had it marked as the 22nd."
emacs,35hw7u,zck,1 point,Sun May 10 16:20:02 2015 UTC,Yep due to venue.
emacs,35hw7u,zck,1 point,Sun May 10 16:24:45 2015 UTC,"Nuts. I can't make it then. You'll just have to have it without me!  Anyway, I'll take this conversation out of this thread. Good luck with the t-shirts."
emacs,35hw7u,instant_sunshine,2,Sun May 10 16:30:29 2015 UTC,I think something like this would be good...  http://image.shutterstock.com/display_pic_with_logo/2141105/233450335/stock-vector--keep-calm-and-be-amazing-vintage-motivational-hand-drawn-brush-script-lettering-for-t-shirt-233450335.jpg  Text to read               Emacs               Conf         - venue/city -               2015   (It's in SF? Or somewhere else now?)
emacs,35hw7u,swathe,1 point,Mon May 11 11:59:58 2015 UTC,As an Australian I just want to say I want one of these once they are made!!!
emacs,35hw7u,instant_sunshine,1 point,Mon May 11 03:44:51 2015 UTC,"As an Australian parent, I just want to say I want one of these for my kid."
emacs,35hw7u,swathe,1 point,Mon May 11 03:50:40 2015 UTC,I have 3 kids so better increase the order to 4 kids shirts to Oz lol
emacs,35hw7u,kaushalmodi,1 point,Mon May 11 04:00:08 2015 UTC,"Maybe Sacha or someone on the planning committee can confirm if date+venue are finally confirmed, so that people who need to get flight tickets can start doing so."
emacs,35hw7u,sachac,2,Mon May 11 12:30:14 2015 UTC,"Aug 29, I believe. =) I'm definitely on the side of having a first-class live stream that will be recorded (including remote presenters, if the best talks can't be given in person), especially since I'm unlikely to travel myself. That way, you can choose to go to the in-person thing in SF, organize or join a local meetup, or listen online and ask questions through the comments."
emacs,35kbf6,shackra,2,Mon May 11 04:38:58 2015 UTC,http://emacs.stackexchange.com/a/5821/2287
emacs,35kbf6,lawlist,1 point,Mon May 11 04:54:01 2015 UTC,"Cool, thank you very much!"
emacs,35kbf6,spwhitton,2,Mon May 11 05:05:22 2015 UTC,"I'm working on one: http://github.com/spwhitton/srem  I hope to write some documentation soon, but right now it works for me on Windows and GNU/Linux."
emacs,35kbf6,ellakk,1 point,Mon May 11 05:58:25 2015 UTC,"If you use android then you can sync with mobileorg wich will add scheduled, timestamped and deadlines to your calendar and as most people use googlecal it will then be accessible on any device."
emacs,35kbf6,grabyourmotherskeys,1 point,Mon May 11 19:49:18 2015 UTC,I actually export my agenda as ICS which is picked up by an app on my phone called iCal synch which adds it to my calendars.  I found relying on Google to update from my published ICS was terrible since they so rarely update. The iCal synch happens at a configurable time interval.
emacs,35kbf6,murdsdrum,1 point,Mon May 11 23:11:40 2015 UTC,I wrote a post-process script (Python) which is able to add reminders in the iCal export file and much more: https://github.com/novoid/postprocess_Org-mode_iCal_export
emacs,35i3rj,KeYeeYeK,5,Sun May 10 16:24:55 2015 UTC,You want railwaycat's OSX port.  It's better integrated with OSX than emacsforosx and it's easy to install using homebrew: https://github.com/railwaycat/homebrew-emacsmacport
emacs,35i3rj,caboteria,1 point,Sun May 10 21:59:25 2015 UTC,"I tried this yesterday, using the GUI, it seems clunky. Scrolling is slow, saving is slow. Used the emacsformacosx for years and years and never had problems like this. Will look into it some more today, but it seems like so far this is not so great."
emacs,35i3rj,kpurdon,7,Wed May 20 15:40:21 2015 UTC,http://emacsformacosx.com/. Note the info here for running from the terminal: http://emacsformacosx.com/tips
emacs,35i3rj,ressis74,3,Sun May 10 16:30:19 2015 UTC,"I don't use aquamacs, but the answer is the same regardless of which emacs you use:  in your .profile, the aquamacs bin dir needs to precede /bin  So:  export PATH = ""/path/to/acquamacs/bin:$PATH"""
emacs,35i3rj,instant_sunshine,3,Sun May 10 17:52:43 2015 UTC,Aquamacs has been dead for going on 3 years now.  I recommend Emacs Mac Port (not to be confused with Emacs via MacPorts)
emacs,35i3rj,borodino,3,Mon May 11 12:09:08 2015 UTC,You don't want to run aquamacs.
emacs,35i3rj,Bookman700,2,Sun May 10 19:39:00 2015 UTC,Install Emacs via Homebrew. Use the default recipe; I would discourage using the railwaycat/homebrew-emacsmacport because it introduces too many weird changes that are unhelpful for a beginner.
emacs,35i3rj,vermiculus,1 point,Mon May 11 05:52:48 2015 UTC,Consider to follow this link: http://emacsformacosx.com/  Here you will get a .dmg file with version 24.
emacs,35i3rj,verdigris2014,-1,Sun May 10 17:41:31 2015 UTC,*ahem*   25.
emacs,35i3rj,vermiculus,1 point,Mon May 11 02:49:24 2015 UTC,Install homebrew  Using homebrew install emacs.   You'll probably want to install a few other thing using homebrew like aspell.
emacs,35i3rj,locbrean,-1,Thu May 14 08:02:31 2015 UTC,"Both MacPorts (outdated system, IMHO) and Homebrew have emacs distributions, but beware! Build can take quite a while if you do so from source – 30 minutes or more. It's best to go with the prebuilt dmg."
emacs,35i3rj,vermiculus,1 point,Mon May 11 01:03:04 2015 UTC,If 30 minutes of compile time (which I doubt it takes on recent Macs) would matter for a piece of software that you're going to be all day long anyways.
emacs,35i3rj,jordonbiondo,1 point,Mon May 11 02:51:17 2015 UTC,"I've compiled it several times from source on a 2.3 GHz Intel Core i7 RMBP, it takes that long.   …or maybe I'm thinking of gcc."
emacs,35itk9,MondBeton,4,Sun May 10 20:10:01 2015 UTC,Is powerline supposed to be working in terminals?
emacs,35itk9,sabof,2,Mon May 11 02:30:25 2015 UTC,"I suspect this is the cause. I never tried the powerline theme on a terminal, but I think it doesn't work. The other sml themes should work fine, though."
emacs,35itk9,BruceConnor,1 point,Mon May 11 08:31:20 2015 UTC,"When i switched from terminal to desktop it worked, thank you alot, guys! :)"
emacs,35itk9,nxpe,2,Mon May 11 10:45:17 2015 UTC,"Have you done all of the initial setup and enabled the powerline theme? If you don't explicitly specify that you want the powerline theme, smart-mode-line will have to guess on which theme you want to use.  ;; Initialize smart-mode-line (sml/setup)  ;; Enable the powerline theme (setq sml/theme 'powerline)   (More info can be found here.)"
emacs,35itk9,BruceConnor,2,Sun May 10 23:27:50 2015 UTC,"Your lines are the wrong way around. ;-) First set the theme variable, then setup sml."
emacs,35itk9,nxpe,1 point,Mon May 11 08:29:54 2015 UTC,Whoops! Thanks for catching that (I don't personally use sml myself)
emacs,35itk9,ReneFroger,0,Mon May 11 14:10:28 2015 UTC,Why not try Smart Mode Line?   Then you could configure it easily to your preferences.
emacs,35fv73,ReneFroger,5,Sat May 9 23:18:31 2015 UTC,Adding this to my list of addons to try
emacs,35fv73,zzspectrez,5,Sun May 10 03:15:55 2015 UTC,wow - who isn't :)
emacs,35fv73,xoo-,1 point,Sun May 10 14:19:28 2015 UTC,It's not the first time mentioned here. But I forgot to look into it. My fault and good thing to be reminded again.
emacs,35fv73,ax_reddit,3,Mon May 11 11:49:59 2015 UTC,That looks amazing!
emacs,35fv73,r2k9,3,Sun May 10 02:24:09 2015 UTC,Whoa.  This might in fact be one fewer reason for me to use a web browser.
emacs,35fv73,Trevoke,3,Sun May 10 14:23:20 2015 UTC,"This is the most impressive Emacs package I've seen in quite some time!  (Always odd to see Emacs users also using Google, but I guess there's a yin/yang for everything.)"
emacs,35fv73,its_never_lupus,1 point,Mon May 11 05:56:10 2015 UTC,"This is beautiful!  Just out of interest does anyone know why you can't go forward to year 2038? I get an error ""Specified time is not representable"".   I'm guessing because of Unix time overflow but it's a disapopintment that emacs has trouble handling large date ranges."
emacs,35fv73,lawlist,1 point,Tue May 12 14:00:06 2015 UTC,"If a calendar buffer is already open, you can press the letter g or interactively use cfw:navi-goto-date-command and the prompt provides the format to use when inputting the date into the minibuffer -- i.e., YYYY/MM/DD -- 2038/01/01.  If you want to open a calendar to a specific month/year and no calendar buffer is open, then this would be a new feature.  I suggested such a feature in Github issue number 61 and I provided sample code for the author of this library to review."
emacs,35fv73,its_never_lupus,1 point,Tue May 12 17:49:17 2015 UTC,"I'm confused... I just tried on a different machine and it works perfectly, either by advancing forward to 2038 or by using 'g'.  The machine where is worked is running 64-bit Linux and the machine where it didn't is on 32-bit Linux, perhaps that's the culprit."
emacs,35fv73,lawlist,1 point,Tue May 12 19:27:24 2015 UTC,"My first thought would be to evaluate (calendar-current-date) on the machine that has the problem to see if it works correctly.  There are only a handful of calendar functions that cfw uses -- I think only calendar-current-date looks to the computer itself to get the information -- everything else is just a series of calculations (i.e., elisp stuff):  calendar-current-date; calendar-extract-month; calendar-extract-day; calendar-extract-year; calendar-date-string; calendar-gregorian-from-absolute; calendar-absolute-from-gregorian; calendar-day-of-week -- and, there is just one such variable:  calendar-week-start-day."
emacs,35ggbm,instant_sunshine,5,Sun May 10 02:53:31 2015 UTC,now on MELPA (and MELPA stable)  Thanks for watching! Enjoy.
emacs,35ggbm,gepardcv,1 point,Sun May 10 02:54:57 2015 UTC,How about org-mode timers? Do your modelines show them?
emacs,35ggbm,cestdiego,1 point,Sun May 10 14:08:01 2015 UTC,"They could, but the stock ones do not.  Perhaps you'd like to add a feature request.  Note, if my README/Commentary doesn't mention something, it's unlikely that the modelines do it."
emacs,35h05q,dddbbb,2,Sun May 10 07:05:10 2015 UTC,Maybe you should ask this question on Emacs Help mailing list and Emacs SE.
emacs,35h05q,tuhdo,1 point,Sun May 10 17:33:51 2015 UTC,Sure. http://emacs.stackexchange.com/questions/12310/how-do-i-use-split-window-sensibly-with-ediff-setup-windows-plain-together  Is my post inappropriate on /r/emacs? Should the sidebar mention something about putting newbie questions on SE?  Thanks for your help!
emacs,35h05q,kaushalmodi,2,Mon May 11 11:12:09 2015 UTC,"It's not inappropriate for /r/emacs but it's a good question and more appropriate for Emacs.SE because stackexchange provides a better way to format the questions and solutions. Also, solutions posted here are not easily searchable. But questions and solutions posted on stackexchange have a much better halflife :). Posting there will help you and others who might seek the same or similar question in future. Also emacs.SE allows you to have a clean access to multiple solutions if possible and the votes can tell you which solution is correct and/or more popular. Most of my emacs TIL moments are just by browsing the different solutions posted over there.  In summary, I see emacs.SE as a better fit for Q&A type of transactions, but NOT for opinion based or open-ended questions."
emacs,35h05q,tuhdo,2,Mon May 11 14:41:59 2015 UTC,"Nothing wrong with that. It's just no one answered which is likely that everybody is clueless as you. So, better find other sources to find the answer."
emacs,35g09o,tunabee,4,Sun May 10 00:07:46 2015 UTC,"You can only clock into outline nodes, not into plain list items, so you'll need to update your document structure accordingly.  To get a (recursive) summary of all clocked items you can use org-modes column view or a clockreport block (or in an agenda :clockreport-mode t)."
emacs,35g09o,locbrean,2,Mon May 11 02:32:25 2015 UTC,"I think a lot of people use more levels and flag them with TODO (C-c C-t will cycle through TODO, DONE and no flag), only using checklists at the deepest level.  * Steven's CS Curriculum ** TODO Web Developer Program at PACE-IT *** DONE CIS 99 - [X] Getting Started in PACE-IT - [X] etc. *** TODO CIS 141 - [X] Introduction to Web Development - [ ] etc.   This way, you can clock-in to anything marked with 1 or more *'s. But I don't think this is ideal either - being able to clock-in to items in a checklist would be awesome and I'm also interested to hear how others accomplish (or work around) this."
emacs,35eoq3,__baxx__,19,Sat May 9 16:51:44 2015 UTC,"Before trying any of these, I recommend to switch to develop branch. Although it's develop branches, many improvements and bug fixes were applied.  1.1) In Spacemacs, you can toggle line number with these two hook functions:  (add-hook 'prog-mode-hook #'linum-mode) (add-hook 'prog-mode-hook #'linum-relative-toggle)   Add it to your dotspacemacs/config like this:  (defun dotspacemacs/config ()   (add-hook 'prog-mode-hook #'linum-mode)   (add-hook 'prog-mode-hook #'linum-relative-toggle)   ;; add more settings below from now on )   You can always toggle line number with SCP t n and linum relative with SPC t r. You must toggle SPC t n first before using SPC t r.  1.2) In Emacs, you don't have to worry if you use GUI Emacs. If you work in terminal, then simply press SPC j = after pasting to reindent your pasted text, since after you paste text Spacemacs highlights the pasted region. SPC j = indents a region if one is active or whole buffer if none is active.  2.0) You can do similar thing with Spacemacs layers. SPC f e h to list all available layers and C-c C-i to insert one into the current buffer. Search for the variable dotspacemacs-configuration-layers and add it like this:  dotspacemacs-configuration-layers '(auto-completion                                        (git :variables                                             git-enable-github-support t                                             git-gutter-use-fringe t)                                        markdown                                        org                                        syntax-checking                                        better-defaults                                        emacs-lisp                                        c-c++                                        ;; add more layers below this line                                    )   2.1) Now, the first exercise for you:   Move cursor insde the list of dotspacemacs-configuration-layers above SPC f e h. Type ycmd C-c C-i to insert the selected candidate into current buffer(if you want to insert more layers, simply delete the ycmd currently in the prompt and simply move the highlighter to the layer name then continue pressing C-c Ci). SPC f e R to apply new configuration (in current master branch, it's C-c C-c).   Enjoy ycmd. Note that you also need to add auto-completion layer.  NOTE: You can jump to any function/variable in .spacemacs (and in most programming buffers in general) with SPC s l. Don't search manually.  3) Spelling: You can toggle on/off with SPC t s. In Spacemacs, it's on by default for non-programming buffers.  4)   "" turn off search highlight nnoremap <silent> <Leader>hl :nohlsearch<CR>   SPC s c to clear all search highlighting or :noh.   "" view buffers easily :nnoremap <leader>b :buffers<CR>:buffer<Space>   SPC b b and see a list of all buffers along with recently opened files. You can fuzzy matching it or precise matching it with by inserting a space at the end of a search string. You can insert more search strings, separated by space character.  4.1)   I have a script that runs a simple git add / commit / push. This enables me to run that from vim.   Add your ~/bin directory to the $PATH variable inside Emacs (and only inside Emacs):  (setenv ""PATH"" (concat ""~/bin:"" (getenv ""PATH"")))   Simply :!gitPush.py or :&gitPush.py for async shell command. Note that you can press tab to see a list of completion candidates.  4.2)    Vim sessions basically save all the buffers / files that were open so that one can open the session again and it'll have all the buffers ready to go.   Simply enable desktop-mode in Emacs to automatically save and restore working buffers next time:  (desktop-mode 1)    These just enable me to cycle through buffers easily,    In Spacemacs, SPC b n to go to next buffer and SPC b p for previous buffer. Note that it ignores non-programming buffers (i.e. shell buffers, document buffers... are ignored)  by default, but you can always customize.  5)   Getting to the .vimrc makes making changes / additions easy (and more likely)   SPC f e d to enter .spacemacs file. You can define your own in .spacemacs, in dotspacemacs/config function:  (evil-leader/set-key ""ev"" 'find-dotfile)   5.1)   Reload the edited vimrc from a current session nnoremap <leader>sv :source $MYVIMRC<cr>   SPC f e R  You can define your own in .spacemacs, in dotspacemacs/config function:  (evil-leader/set-key ""sv"" 'dotspacemacs/sync-configuration-layers)   5.2 & 5.3)   You can put this in your dotspacemacs/config function:  (define-key evil-normal-state-map ""H"" ""^"") (define-key evil-normal-state-map ""L"" ""$"")   5.5)   Add to your dotspacemacs/init function:  (setq-default evil-escape-key-sequence ""jf"")   6)   You don't have to do it manually. Install aspell and simply Spacemacs enables spell checking AND correcting.   (define-key evil-normal-state-map ""s"" 'flyspell-auto-correct-word)   Feel free to replace with any key you want. If you want Ctrl-<something> or Alt-<something>, use C-<key> or M-<key> for your mappings.  You can also use SPC S c to list all possible candidates to correct.  Python  The REPL is exposed to you through Emacs buffer. It means that you can use any plugin (i.e. code completion and Vim key bindings to edit in the REPL) in Emacs to write code in your REPL, not just the primitive REPL in your terminal.  Simply add python layer Python to use. Be sure to read the layer documentation. To read it, simply SPC f e h and press RET after you narrowed to Python.  Processing  You can checkout this Processing package.  Features according to binding listing:    Key Feature    C-c C-p r Run a sketch.   C-c C-p b Compile a sketch into .class files.   C-c C-p p Run a sketch full screen.   C-c C-p e Export sketch.   C-c C-p d Find in reference.   C-c C-p f Find or create sketch.   C-c C-p s Search in Processing forum.    Of course, you can bind to anything you want. It's a good to create a layer to practice your Elisp skill, and later contribute to Spacemacs. Press M-x, then narrow to this command configuration-layer/create-layer and create a layer. Follow the instructions in the command. You can visit Spacemacs gitter chatroom for consultant.  BONUS: if you use GUI Emacs, you can toggle transparency with SPC T T and see your sketch result while editing code.  Notes  For writing notes (and more), you have the awesome Org mode. Here is a simple Org tutorial. You can try with an Org buffer by simply SPC b b, type buffer_name.org (you must include .org to let Emacs know you want to create an Org buffer; buffer_name can be whatever name). You can open your TODOs (in Emacs, it's called agenda) anywhere.   If I'm writing a long post or email or whatever, I'll just use vim   Ok. Emacs has many email client. The simplest is Ctrl-x m and it opens a buffer for editing email. After done editing, you can press C-c C-s to open in the default email client of your system (i.e. thunderbird) to format and send.  That's it for now."
emacs,35eoq3,tuhdo,5,Sat May 9 17:19:29 2015 UTC,"(setq-default evil-escape-key-sequence ""jf"")   This should be put in dotpsacemacs/init instead because it must be set before loading the evil-escape package."
emacs,35eoq3,syl20bnr,4,Sat May 9 19:10:40 2015 UTC,Fixed. Thanks.
emacs,35eoq3,tuhdo,4,Sun May 10 07:10:08 2015 UTC,This is gold!   Specific task/problem --> succinct/clear solutions.  I love this kind of Cookbook style instructions.
emacs,35eoq3,allabout001,1 point,Sun May 10 01:21:52 2015 UTC,"yeah really helpful.  I've had chance to have a little play today and there are glimmers of light, I said that I'd give it a month and see how it went. It's just the initial WTF that has to be overcome, and getting the functionality that I'm used to in Vim is really important to me (I wouldn't have left without something like spacemacs, evil etc).   I'm actually looking forward to learning it more now, cool cool :)"
emacs,35eoq3,DasEwigeLicht,3,Sun May 10 18:18:18 2015 UTC,"ace cheers for that! I'll have a look through this later... I'm going to try it for a month I think and see how it is, i think that's generally a reasonable amount of time to make some kind of opinion."
emacs,35eoq3,DasEwigeLicht,3,Sat May 9 17:25:45 2015 UTC,"I think you'll be happy with emacs. Looking over your list I'm not seeing anything that emacs isn't as good as or better at than vim.  For Python for example you'll have code lintig, context aware auto-completion, semantic navigation and a dedicated REPL that can evaluate the parts of your program you choose right within emacs."
emacs,35eoq3,tuhdo,1 point,Sat May 9 17:35:03 2015 UTC,"Cheers, I think some of the advantages of vim are sightly wasted on me (such as it being lightweight etc). The vim key language certainly isn't though, that's one thing I couldn't go without now :)"
emacs,35eoq3,tuhdo,5,Sat May 9 18:18:48 2015 UTC,"Vim being lightweight and ubiquitous is only really an advantage if you're doing sysadmin type work, making small, quick edits on computers that aren't yours, where you can't rely on your config.  If you've a dedicated computer to work on being lightweight just means you'll miss out on tetris and M-x butterfly."
emacs,35eoq3,trishume,1 point,Sat May 9 19:01:08 2015 UTC,"OK so I've had a little look today, the built in package manager seems really nice I have to say. The way that projects come up and can be navigated through is also pretty cool. There are a few things that I'm liking actually.   I've changed over to the develop branch as well...    Question  How do I set jf to exit insert mode?    I don't have the same directory set up as you, should I create a ~/.spacemacs/ directory? I think I might have the same files in ~/.emacs.d/  When you say :    You can define your own in .spacemacs, in dotspacemacs/config function   are you referring to the file that I have at ~/.emacs/spacemacs/config?  I have put the settings for H start of line at the bottom of the file, here's a link to the (~/.emacs/spacemacs/config) file They work after putting them in there :) I'm just wondering if that's the best place for them / where you meant.   thanks! :)"
emacs,35holv,lxsameer,7,Sun May 10 13:57:07 2015 UTC,"I'd probably recommend learning the difference between your and you're first.  Not trying to be a dick, just saying, you need an eye for detail.  Also, it would be nice if you'd explain what makes your Emacs distribution different / unique.  I mean, what's its unique characteristic?  It would also be good to know what sort of user you're aiming it at.  These are the factors which will make a name feel meaningful.  Or you could just invent a meaningless word, like ""biro"" and see if it sticks. (BTW, The key to Biro is 2 vowels and the pleasant consonants, which combined give the sound a lovely cadence.)"
emacs,35holv,instant_sunshine,3,Sun May 10 14:18:31 2015 UTC,yourmacs?
emacs,35holv,rgrau,2,Sun May 10 20:47:55 2015 UTC,"""Biro"" actually isn't a meaningless word, it's a type of pen in Ireland / the UK."
emacs,35holv,many_cakes,-2,Sun May 10 21:02:10 2015 UTC,"Edit: Shit, I'm sincerely sorry, I didn't know Biro wasn't as well known as I thought it was. :(  ... you're joking right? I mean, you understood that I was using the name of that pen as an example of a made up word? I think we can consider Biro to be deeply famous. It's not as a suggestion.  As in, the smart people who marketed Biro, came up with an excellently balanced and minimal word to make their product stick in the consumer mind.  You got that right?  ...or are we just wooshing really hard here?  Edit: Although, on second thought, SpaceBiro! ... I'm only half joking about that.  ...but please don't"
emacs,35holv,instant_sunshine,1 point,Mon May 11 00:35:42 2015 UTC,"As an American who spent months in Ireland not too long ago, TIL about Biro."
emacs,35holv,vermiculus,3,Mon May 11 02:55:42 2015 UTC,TIL not everyone has innate knowledge of the great Biro empire...   ... I am humbled.
emacs,35holv,instant_sunshine,1 point,Mon May 11 03:42:49 2015 UTC,"Hey man, I'm sorry, no need to be so loud or whatever. I just thought someone might find it interesting."
emacs,35holv,many_cakes,2,Mon May 11 05:17:25 2015 UTC,"No worries, you caught me half drunk!  My apologies again! No hard feelings I hope!"
emacs,35holv,instant_sunshine,1 point,Mon May 11 11:10:31 2015 UTC,"Or you could just invent a meaningless word, like ""biro"" and see if it sticks.   Actually, it's far from meaningless. It's named after Bíró László."
emacs,35holv,Kuaira,1 point,Mon May 11 12:25:58 2015 UTC,"Oh balls, now I really look like a tit :)  In the end though, I guess all words are made up, right?"
emacs,35holv,instant_sunshine,1 point,Mon May 11 12:54:36 2015 UTC,"Cut OP some slack. They probably started with the text: ""I'll make sure that you're mentioned in the website."" then edited it to: ""I'll make sure that mention you're name in the website."" and neglected to change the you're to your."
emacs,35holv,i_am_broccoli,1 point,Sun May 17 20:33:53 2015 UTC,Ok
emacs,35holv,instant_sunshine,3,Sun May 17 22:05:36 2015 UTC,May be you can consider coolmacs :p
emacs,35holv,wdicc,5,Sun May 10 14:53:51 2015 UTC,"If it's as bloated as most other emacs distros, you can call it eMAX ..."
emacs,35holv,tty-tourist,3,Tue May 12 21:12:45 2015 UTC,ENV  Emacs is Not Vim
emacs,35holv,swathe,3,Mon May 11 03:47:22 2015 UTC,MongoTrahelionWhoopMaZingoFlapjacksAhoy! 2.0
emacs,35holv,tromey,2,Wed May 13 01:51:46 2015 UTC,"or ENVI  Emacs is NOT Vi  Then people can call it ""envy""  Actually, don't use that    (Patent pending)   ;)"
emacs,35holv,swathe,2,Mon May 11 03:48:28 2015 UTC,Emax Emin Eminimacs
emacs,35holv,chebertapps,1 point,Wed May 13 08:16:41 2015 UTC,"If you can't find a good name for it, maybe it shouldn't exist."
emacs,35f2wa,z27,3,Sat May 9 18:59:06 2015 UTC,"Try M-x insert-flame, or the hilarious psycoanalyze-flamer.  It is amazing that this script was kicked out of Emacs since 19:   On 1994-01-09, I discovered that rms dropped this file from the Emacs 19    distribution; this was sometime before 19.7 was released.  He made no       ChangeLog entry and didn't keep the source file around (by convention,      we usually renamed files we wanted to keep but not go into official         distributions so that they started with `=', e.g. `=flame.el').  This is    all he had to say about it when I asked:                                           I think I decided I was unhappy with the legal papers for it.               Removing it took less time than trying to deal with it                      any other way.                                                         I wonder how many little gems have been sacrified like that."
emacs,35f2wa,agumonkey,2,Sat May 9 19:01:54 2015 UTC,"It can be quickly installed if one uses el-get:  (el-get-bundle! flame   :url ""http://www.splode.com/~friedman/software/emacs-lisp/src/flame.el"")"
emacs,35empc,nicksh_112358,2,Sat May 9 16:31:57 2015 UTC,"I see others here recommending offlineimap, and I would strongly advise against using offlineimap with office365 as you might have email go missing. I used to use offlineimap and wanderlust, but after losing email (well I still have local copies somewhere) I switched to isync/mbsync.  The problem is that Microsoft for some insane reason has decided that uuids don't have to be static, and can suddenly change. Basically what happened was that all of the servers folder uuids changed, so all mail I moved got deleted from the server and moved locally, but not put in a new folder on the server.  If you go for mbsync/isync how ever, note that you don't get IMAP-idle support, so you will have to poll (using crontab for example). However, mbsync/isync is much much faster and more snappy than offlineimap."
emacs,35empc,deadcyclo,1 point,Sun May 10 08:34:45 2015 UTC,"I use offlineimap to sync Office365 to Maildirs, and mu4e as the emacs email client. It works rather well."
emacs,35empc,jeffk,1 point,Sat May 9 19:23:39 2015 UTC,"I personally use mu4e+offlineimap to access Office 365 email (my university uses it). I suggest you get started with it with the example Gmail configuration in the mu4e manual.  You will of course have to modify the example configuration's server name, user name and password for your Office 365 account. You'll have to change the names of mu4e-drafts-folder, mu4e-sent-folder and mu4e-trash-folder too. Less obviously you'll need to change mu4e-sent-messages-behavior. Change it like below so mu4e moves sent messages into your sent folder. Unlike Gmail, Office 365 doesn't do this automatically.  (setq mu4e-sent-messages-behavior 'sent)"
emacs,35empc,divinenephron,1 point,Sat May 9 20:47:42 2015 UTC,gnus + offlineimap. in gnus customize gnus-secondary-select-methods adding a nnmaildir method pointing to the IMAP download directory.
emacs,35empc,ginopascali,0,Mon May 11 04:56:59 2015 UTC,"I haven't seen any for emacs, but I've used Mutt and there's tutorials out there for that."
emacs,35cos0,sadECEmajor,3,Sat May 9 01:07:47 2015 UTC,"Check out /r/LaTeX and TeX.SX (linked in that subreddit's sidebar). Start with the first few chapters of texdoc lshort. Don't know what I mean? Google it :)  As for LaTeX in emacs, the by-far best way to do that is with AUCTeX."
emacs,35cos0,vermiculus,2,Sat May 9 02:20:43 2015 UTC,I learned from the LaTeX wikibook. It's a good enough resource that when I got into grad school and started using LaTeX nearly every day I didn't have any trouble.
emacs,35cos0,VyseofArcadia,2,Sat May 9 03:22:23 2015 UTC,"I installed auctex from Options > Manage Packages > navigated to and installed auctex. I've found this reference card useful: http://ftp.gnu.org/gnu/auctex/11.86-extra/tex-ref.pdf to learn how to use auctex. I've added the following lines to my .emacs file to always turn reftex on when using latex:  ;;RefTeX (add-hook 'latex-mode-hook 'turn-on-reftex) (add-hook 'LaTeX-mode-hook 'turn-on-reftex) (setq reftex-plug-into-auctex t)   I copied them from somewhere else, they might be superfluous but it works for me.  Using latex has a bit of a learning curve. I'm not sure if I would find it worth it if I only wanted to write a resume. It's definitely been worth it since I now write most of my documents in it.  There is a package for writing resumes called moderncv that is fairly useful. Their provided templates should be easy enough to edit. http://www.ctan.org/tex-archive/macros/latex/contrib/moderncv/ . There are some notes on it at the latex wikibook: https://en.wikibooks.org/wiki/LaTeX/Curriculum_Vitae ."
emacs,35cos0,420_blazer,0,Sat May 9 09:12:04 2015 UTC,"The easiest thing to do is type your resume in markdown (org-mode will work if you want to use Emacs, but others like Pandoc and kramdown have a smaller learning curve) and export it to a standalone .tex document. Then look at a reference like this to finish the job. Learning latex and auctex is not easy and not necessary if all you want is a resume in .tex."
emacs,35cos0,bachmeier,3,Sat May 9 08:57:38 2015 UTC,"+0, but in all honesty, that would be a terrible-looking résumé."
emacs,35cos0,vermiculus,2,Sat May 9 15:29:12 2015 UTC,"Interesting. I write all of my docs with markdown+pandoc except for my résumé, for which I use straight LaTeX.  With that said, the resume is still basically a fill-in-the-blanks template with a few tweaks like manual page breaking. It was totally worth it, too."
emacs,35cos0,bgbgbg666,1 point,Sat May 9 16:36:56 2015 UTC,Not if you do it right. You want your resume to stand out.
emacs,35cos0,pxpxy,1 point,Sat May 9 19:57:13 2015 UTC,"It does. I'm not a programmer, sysadmin, or STEM researcher so most folks I know, and more importantly, people who currently or potentially employ me, don't know moderncv (or LaTeX for that matter) exists ;)  I did tweak the base format--changed some colors with a custom style, moved/renamed some headings, etc.--but after that, creating and maintaining a nice-looking résumé was pretty much a fill-in-the-blanks activity."
emacs,35dits,Erakko,6,Sat May 9 07:14:18 2015 UTC,You could check out Tern: http://ternjs.net/  Apparently if you put a .tern-project file in your directory you can specify which libraries you're using. Only caveat: I had difficulty getting it working.
emacs,35dits,wasamasa,3,Tue May 12 11:46:40 2015 UTC,"You should be able to tell js2-mode to ignore the dollar sign by adding it to js2-global-externs. A more interesting approach would be to find out how to tell js2-mode to parse an external file (like, jquery-<version>.js) to learn about yet undefined externs, I don't know how to do that though."
emacs,35dits,jordonbiondo,1 point,Sat May 9 09:39:19 2015 UTC,You can also add lint comments like:  /*global $ _ something*/    to the top of your files in order to treat those symbols as global externs.
emacs,35dits,DarthToaster,2,Sat May 9 13:50:13 2015 UTC,"Yep, and you can do this easily with js2r-add-to-globals-annotation, which is part of js2-refactor.el. Just put point on the relevant symbol and call the command."
emacs,35dits,dangersalad,2,Sat May 9 14:57:49 2015 UTC,I found JS2 as a major mode is a bit of a pain to use. I switched to using js-mode + js2-minor-mode + flycheck
emacs,35dits,tmtxt,1 point,Sat May 9 14:37:21 2015 UTC,ternjs can do this  I did the tutorial on how I set it up here https://truongtx.me/2014/04/20/emacs-javascript-completion-and-refactoring/  you can also read this for full tutorial on how I set up javascript development on emacs https://truongtx.me/2014/02/23/set-up-javascript-development-environment-in-emacs/
emacs,35dayu,hanlec,2,Sat May 9 05:17:16 2015 UTC,"This works for me for Neotree:  (add-to-list 'golden-ratio-exclude-buffer-names "" *NeoTree*"")   The space there before *NeoTree is deliberate."
emacs,35dayu,rustman,1 point,Sat May 9 17:50:27 2015 UTC,"Looking at the source code, I've learned about the extra space. I've tried it for SPEEDBAR with no results though. I'll test it for NeoTree."
emacs,35dayu,ReneFroger,1 point,Sat May 9 18:17:31 2015 UTC,"I had the same issue earlier. Then I discovered helm-find-files-source, which is better implemented than Neotree/Speedbar.  Please try it. And I modifiet it with:   (define-key helm-map (kbd ""C-j"") 'helm-execute-persistent-action) ; rebind C-j to run persistent action (define-key helm-map (kbd ""C-k"") 'helm-execute-persistent-action) ; rebind C-k to run persistent action"
emacs,35c3ld,katspaugh,2,Fri May 8 21:51:22 2015 UTC,"You can also use semantic-stickyfunc-mode. However, in stock CEDET it works like your example without making use the power of semantic tags. In semantic-stickyfunc-enhance package, it accounts for multi-line function parameters.   Demo in Python. Demo in C. Demo in Elisp.   The smaller version is in the homepage."
emacs,35c3ld,tuhdo,1 point,Fri May 8 23:21:06 2015 UTC,"Thanks! Looks much nicer, going to give it a try."
emacs,35c3ld,enzochiau,1 point,Sat May 9 06:50:39 2015 UTC,It is really cool. But I tried it with Emacs 25 (compiled from source). There's no change at all.   I install it with el-get as below:      (el-get-bundle tuhdo/semantic-stickyfunc-enhance       (add-to-list 'semantic-default-submodes 'global-semantic-stickyfunc-mode)       (semantic-mode 1)       (require 'stickyfunc-enhance))
emacs,35c3ld,tuhdo,1 point,Mon May 11 11:34:06 2015 UTC,Which mode did you try?
emacs,35auys,rgrau,5,Fri May 8 15:49:05 2015 UTC,"I have used emacs for 4 years. I like ace-jump-mode and use it occasionally, but in practice I almost exclusively useisearchto jump around a buffer. I also use imenu depending on the type of file I'm editing."
emacs,35auys,jordonbiondo,4,Fri May 8 16:04:45 2015 UTC,"I've been using Emacs over 5 years and has a few packages that uses Semantic. So, here's my take:   M-g M-g is nice to jump globally anywhere out of screen. However, the you have to press more once the line number is over 100 (which is common). For example M-g g 100 RET is 7 key strokes. Assume avy-goto-line is bound to M-g l, then M-g l aa is 5 key strokes. Much shorter especially when you want to move around your visible screen, especially when the current line is over the range 1000. avy has integration with isearch-mode-map: in Isearch, you can press C-' to quickly jump to far away match on the screen. It's useful when you want to jump to an indentifier which has manay occurrences on visible screen. Instead of repeating C-s 10 times, you can just C-' and type one or two characters to jump there. avy has integration with links call ace-link (previously use ace-jump-mode but now it uses avy). On the visible screen, i.e. Info buffer, instead of TAB or S-TAB to move between links, you can simply use ace-link to jump to any link far away from point and enter that link with 3 or 4 key strokes instead of pressing TAB or C-s 5 times (after typing into the prompt 3 or 5 characters or more)."
emacs,35auys,tuhdo,4,Fri May 8 16:09:05 2015 UTC,"I've used emacs for 4-5 years. I used to prefer isearch, now I prefer swiper, which is just a better isearch.  For me, avy-style is only useful if there's no need to select the leading char, for instance if I want to mark a symbol within the current s-expression, or select a link in org-mode/gnus/info-mode/help-mode/eww.  Today, I added the option to exit swiper through avy with C-', which could be pretty cool because there's no need for the leading char. And it combines really well with ivy-resume:   I can search for some stuff to get 5 candidates on screen Exit with C-' (swiper-avy) to select one of 5 that I want Do some stuff Call ivy-resume to bring back swiper in exactly the same state it was before C-' was pressed. Exit with C-' once more for a different candidate ..."
emacs,35auys,abo-abo,2,Fri May 8 16:47:08 2015 UTC,"Awesome! That inspired me to write this swiper wrapper function:     (defun modi/swiper-dwim (arg)      ""Start swiper with input as the selected region or symbol at point by default.  C-u     -> `ivy-resume' (resume from where you last left off swiper) C-u C-u -> Start swiper without any arguments (stock behavior)""    (interactive ""P"")    (cl-case (car arg)      (4  (ivy-resume)) ; C-u      (16 (swiper)) ; C-u C-u      (t  (swiper (modi/get-symbol-at-point)))))"
emacs,35auys,kaushalmodi,3,Fri May 8 21:08:04 2015 UTC,"Yeah - I've made passing efforts to like ace-jump, but I find it mentally intrusive that you have to wait and read to find the right key to go.  I find it much less obtrusive to my thought processes to use isearch, typing the fragment I'm interested in, rather than the type-scan-react mental loop.  (Edit: using Emacs for 21 years, and I should have said type-read-react mental loop)"
emacs,35auys,EatMoreCrisps,2,Fri May 8 17:41:10 2015 UTC,"The proper way to use is that you locate the current character on screen you want to jump at with your eyes. Then, use ace-jump and you see that location changes then quickly press it to precisely jump there. No need to scan. ace-jump and now avy are meant to replace the mouse to jump around visible characters on screen. Use it the same way you use the mouse, except with keyboard.  It offers superior navigation speed compared with just using Isearch, since you usually use Isearch to jump to a determined location anyway."
emacs,35auys,tuhdo,2,Fri May 8 17:55:35 2015 UTC,"It's unknown what the character is going to be in advance though.  I shouldn't have used the word 'scan'.  I find these mental choices relatively obtrusive, especially when I have to do 2 of them."
emacs,35auys,EatMoreCrisps,2,Fri May 8 18:24:10 2015 UTC,"As I said, you don't use it for searching, but quickly jumping to a determined location on the screen. For example, while reading code I want to quickly jump to the text I am looking; the text is at near the bottom of the screen and point is at the top. Using Isearch is sub-optimal because I have to type fully the text my eyes are looking at which could be long, or I type it partially and leaving lots of matches to press C-s repeatedly many times. Of course, I can jump to a line and use Isearch but then it has problem when line number is big, and costs more key strokes anyway. With avy, I can bind ivy-goto-word-0 to a key like C-' (2 key strokes), and I have to type at most two characters more to jump to where my eyes are looking at.  If you do it with Isearch, you usually end up with 7 key strokes at best: C-s (2), partial string (3 at the minimum), C-s to move to next match (2 at the minimum). This is the ideal situation which rarely occurs."
emacs,35auys,tuhdo,2,Fri May 8 18:41:02 2015 UTC,"c-s c-w c-w...   to search the text next to the point m-s .    to search symbol-at-point .    I don't always see exactly where I want to go, I just 'know' where I want to go.  Still your point is valid for some cases"
emacs,35auys,tuhdo,1 point,Fri May 8 19:05:16 2015 UTC,"Still text more key strokes. You still have to hit RET to exit Isearch.  With avy I can jump to any character visible with 4 key strokes. It means, avy can jump across window boundary, as long as the character is visible on screen. Now, if you use Isearch, you have to press C-x o (another 3 key strokes at the minimum).  You also haven't accounted the cases where point is not on the symbol you want to search but something else i.e. whitespace. In such cases, the tricks above won't work. Perform movement commands and invoking Isearch simply requires more effort."
emacs,35auys,EatMoreCrisps,2,Fri May 8 19:13:46 2015 UTC,"Of course, yes, we're talking about navigation.  I don't think ace works at all for search.  For me it's not a keystroke count thing.  It's less important that ace uses fewer keys than that I have to make decisions based on unpredicted visual changes.  Much better for me to just type something I previously decided.  I wouldn't be surprised if these different techniques work better for different people, depending on how their mind works.  For me the best techniques are the ones that divert the least of my conscious brain and isearch wins over ace for that.  Typing words pretty much happens without interrupting my thought flow."
emacs,35auys,tuhdo,1 point,Fri May 8 19:24:55 2015 UTC,"Here is one way to integrate avy with Isearch and keep your workflow:  (define-key isearch-mode-map (kbd ""C-'"") 'avy-isearch)   So, when you see far away matches and want to jump there, simply press C-' and press one more character."
emacs,35auys,tuhdo,1 point,Fri May 8 22:07:10 2015 UTC,"Same here.  I even tried to hack some experiments like using different charater sets for points before/after the cursor, but failed to do it."
emacs,35auys,chrispoole,3,Fri May 8 18:15:54 2015 UTC,"In sum: use avy like you use a mouse, except with keyboard. Use it for jumping, not searching. You don't use your mouse to search anyway."
emacs,35auys,instant_sunshine,2,Fri May 8 18:20:14 2015 UTC,"I use ace-isearch. If you hit C-s and type one letter before pausing, ace- jump-mode will be enabled. Type more than one letter fairly quickly and it's regular isearch. Type a string beyond a certain length and helm-swoop is enabled.  I find it very natural to use. You can find my configuration here.  I've been using emacs for about 10 years."
emacs,35auys,tuhdo,1 point,Fri May 8 18:50:28 2015 UTC,"I like them, but I'm too hard wired to C-s and M-g M-g"
emacs,35auys,instant_sunshine,1 point,Sat May 9 09:44:21 2015 UTC,"You don't have to replace but complement those two. Here is one way to integrate avy with Isearch and keep your workflow:  (define-key isearch-mode-map (kbd ""C-'"") 'avy-isearch)   So, when you see far away matches and want to jump there, simply press C-' and press one more character."
emacs,35awc8,meegee,3,Fri May 8 16:00:22 2015 UTC,"Is there an emacs package to do this?  EDIT: Okay, so why should I use this?"
emacs,35awc8,AnAirMagic,3,Fri May 8 16:06:53 2015 UTC,"The emacs package for pandoc (for which the OP's project is a frontend) is  joostkremers/pandoc-mode. Yay pandoc.  Edit:  You should use pandoc if you need to convert documents between different formats. It follows templates, can handle bibliographies, and so on.  I use it because I can produce consistently well-formatted documents without fighting a word processor or using LaTeX directly (I'm in social sciences, not STEM). Usually, I write in pandoc's variant of markdown to produce PDFs via LaTeX templates. I also generate a website using HTML templates and a shell script.  Pandoc-mode extends the templating and adds other goodies. I could probably get rid of the shell script using its features."
emacs,35awc8,bgbgbg666,1 point,Fri May 8 21:43:46 2015 UTC,"You can use org-mode itself to export your document to various formats, or you can use pandoc (which I compiled to JS using GHCJS Haskell compiler to build this)"
emacs,35awc8,vermiculus,2,Fri May 8 16:10:33 2015 UTC,"Hate to be a doomsayer, but including LaTeX as an input method is doomed to failure. Hell, it doesn't even work for LaTeX -> LaTeX.  Sweet idea though, +1 :)    Edit:  Hoooooly shit the generated LaTeX is horrible practice. I assume pull requests are welcome :)    Edit 2:  Is this really what pandoc is spitting out? \item … \\? Really!?"
emacs,35awc8,phyrne,1 point,Sat May 9 05:57:56 2015 UTC,This is awesome!
emacs,35awc8,kaushalmodi,1 point,Fri May 8 19:13:57 2015 UTC,"This is awesome! Can you add a way to open the website with org-mode as default on the left side? For example, a user should be able to go to something like ""http://markup.rocks/#org"" to do so."
emacs,35awc8,bakuretsu,2,Fri May 8 19:22:17 2015 UTC,"Good idea, I've been meaning to add something like http://markup.rocks/fetch/url and this might be a nice addition to that."
emacs,35awc8,instant_sunshine,1 point,Fri May 8 19:46:25 2015 UTC,"One of my biggest peeves with these online editors is having to maintain scroll position in two areas all the time. I know it's not an easy problem to solve, but live preview is useless if what I'm typing isn't visible in the preview frame."
emacs,35awc8,enzochiau,1 point,Sat May 9 07:57:30 2015 UTC,Thanks for that feature request! I have a realtime markdown package for Emacs I'm working on and that would be a killer addition.
emacs,35bkow,OldShoe,3,Fri May 8 19:13:30 2015 UTC,M-m(back-to-indentation) sounds like what you're looking for.
emacs,35bkow,camdez,2,Fri May 8 19:40:13 2015 UTC,I often do this by holding ALT and pressing one of the arrow keys.
emacs,35bkow,erewok,2,Sat May 9 01:27:48 2015 UTC,Just pressing tab should do this.  Also forward-whitespace.
emacs,35bkow,jordonbiondo,2,Sat May 9 13:51:55 2015 UTC,"If you're looking for a package that adds this behavior, auto-indent-mode has C-p and C-n ignore whitespace and take you to the beginning of indentation by default. Also, C-a cycles between putting the cursor at beginning of indentation and beginning of line."
emacs,35a686,redguardtoo,23,Fri May 8 12:03:53 2015 UTC,"Like many others, I dislike this solution and find it both dangerous and ultimately not terribly useful. A 24GiB system should have plenty of space to cache any emacs files. Any open buffers are already in memory, and any previous visited data, including FS metadata like dirents, will be cached, too.   Your performance problems sound like a combination of two things. First, is poor behavior by your FS likely caused by bad fsync behavior or fragmentation. Using a more advanced file system or tuning your existing one should fix this issue. Second, is suboptimal caching behavior, particularly on initial access. Emacs is scanning through a large directory with lots of files to do various things, and that information isn't in cache. That's where you use something like the Linux preload daemon. It will automatically cache often used files. Add your .emacs.d directory to the mapprefix, and over time, preload will recognize and keep these files in the page cache.   Recklessly trading speed for durability tends to be a mistake you only make once."
emacs,35a686,fandingo,2,Fri May 8 15:33:40 2015 UTC,"We can use cron job, the script I showed you is already optimized for cron. So no worries about data loss. besides, everything is under git control.  It's actually pretty simple solution. As a human, I know much better than the ""smart"" kernel, I just tell kernel, ""put this folder into memory, now"", that's it."
emacs,35a686,ReneFroger,13,Sat May 9 04:06:05 2015 UTC,"I'm wondering why you're not using Emacs as a server instance. Then you don't get bothered anymore with slow start-ups.   I run it as server/daemon in the background on Windows 7. And when I start Emacs in another windowspace, it pop ups really fast. :-)"
emacs,35a686,wadcann,3,Fri May 8 12:32:29 2015 UTC,"I'm wondering why you're not using Emacs as a server instance.   Because many things about emacs are not sufficient to be used system-wide.  I run a systemwide emacs instance and additional instances (and I care about startup time on those).  Let's give a few examples of things that deal poorly with systemwide instances, because emacs doesn't have ""project"" namespacing for all of its features.   TAGS.  Common software development tool, permitting jumping around from one to another.  That's per-emacs-instance. The ""!"" operation in dired invokes a blocking command.  I usually use ""&"" to avoid this, but...I also believe that M-! is blocking. Many features (not all) use blocking I/O instead of non-blocking I/O; this bogs down the entire emacs instance.   The ""emacs as a server instance"" just is not a drop in replacement for multiple emacs instances today.  One day, if someone fully-namespaces everything by project and eliminates blocking operations..."
emacs,35a686,wasamasa,2,Sat May 9 01:09:44 2015 UTC,"it's not just startup. Startup is fine. The real issue happens after startup. For example, when I'm using js2-mode.  Actually, I use the same technique on my project files. so now all the editing things happen only in memory."
emacs,35a686,knight17,10,Fri May 8 12:40:25 2015 UTC,"Uh, Linux employs aggressive caching of applications into memory already. This kind of thing is only helpful with regards to file IO, like startup or disk-backed database access (like for Firefox and the profile file) for instance."
emacs,35a686,ReneFroger,5,Fri May 8 13:08:56 2015 UTC,"On emacs side: flymake,  recentf, company-statistics, session save, smex, imenu ...  On project side: build, file saving, grep, file search, TAGS updating, code navigation ..."
emacs,35a686,knight17,1 point,Fri May 8 13:20:32 2015 UTC,"I run it as server/daemon in the background on Windows 7.    When you run it as a dameon, do you have to see it in the taskbar always, even if the main window is not running?"
emacs,35a686,rhabarba,1 point,Sat May 9 15:02:38 2015 UTC,"No. I have the server instance running on desktop 1, and my normal workspace running on desktop 2/3/4.   With VirtuaWin."
emacs,35a686,DasEwigeLicht,2,Sat May 9 19:28:36 2015 UTC,"I see, so you don't have to see the orphan window."
emacs,35a686,mszegedy,9,Tue May 12 11:36:02 2015 UTC,"""Binchen"", in German this sounds like ""Bienchen"", ""little bee"", mostly used for/by early teenage girls. I'm always amused when I come across this domain.  Other than that, where can I see the proof? 1000 % sounds a bit too inaccurate to be precise."
emacs,35a686,z27,4,Fri May 8 13:36:35 2015 UTC,"Yeah, my name sucks. I can't complain my mum because she knows only Chinese.  Btw, what about name ""Yuma Chen"", my son's name? What it sounds like in German?"
emacs,35a686,csantosbu,5,Fri May 8 13:53:20 2015 UTC,"""Yuma Chen"", my son's name? What it sounds like in German?   It doesn't come close to any German words."
emacs,35a686,its_never_lupus,3,Fri May 8 14:44:26 2015 UTC,"Closest's ""jung machen"", ""to make young"". But that's what it looks like, not sounds like, since ""ch"" makes somewhere between a ""h"" and ""sh"" sound in German, as opposed to a ""ch"" sound."
emacs,35a686,Lompik1,2,Fri May 8 14:22:26 2015 UTC,", ""little bee""   Bees are extraordinary workers, a paragon of industriousness.  https://srichinmoy.wordpress.com/2013/12/07/animal-kingdom-part-4-bee/"
emacs,35a686,gregdev,6,Fri May 8 14:51:05 2015 UTC,"I don't get what you mean by ""projects to memory"". You mean files you are editing with emacs are now being edited on a ramdisk? I assume you are copying them from ramdisk to physical disk at some point. Before a power outage."
emacs,35bluu,wherethebuffaloroam,7,Fri May 8 19:22:57 2015 UTC,C-h f and C-h v have always picked up the function/variable under the point by default (just tested that on emacs -Q too).
emacs,35bluu,kaushalmodi,3,Fri May 8 19:42:13 2015 UTC,well i'll be damned...
emacs,35bluu,vermiculus,1 point,Fri May 8 19:46:44 2015 UTC,a lesson learned :)
emacs,35bluu,abo-abo,3,Fri May 8 22:23:33 2015 UTC,"First pointer: try to re-use the standard library as much as possible. In this case, you need (thing-at-point 'symbol).  To learn what parts of the standard library are useful, just look at the code of your favorite packages.  Second pointer, and this is just my personal preference: don't over-abstract. It's OK to first dump all the code in one function, and then see which parts, if any, are re-usable. Moreover, Elisp isn't super-optimized and the function call overhead can actually have an impact (only in cases of loops, of course, which you don't have at the moment)."
emacs,35bluu,kcin,1 point,Fri May 8 20:01:12 2015 UTC,No premature optimization either. Clean code is more important than worrying about function calls. Optimization comes later if necessary.
emacs,35bluu,kcin,2,Fri May 8 20:29:39 2015 UTC,You may be interested in thing-at-point: http://emacswiki.org/emacs/ThingAtPoint
emacs,35bluu,Boojum,1 point,Fri May 8 20:02:11 2015 UTC,excellent!  Thank you.  It was fun to reinvent the wheel at least once to see how it works but this looks super useful.  Thanks for the info
emacs,35bluu,vermiculus,2,Fri May 8 20:06:26 2015 UTC,"While thing-at-point is great, and I use it a lot, you might want the more specific function function-called-at-point.  This is what describe-function uses itself to give you a good default and has the advantage that it will scan a bit to try to find the name of the function for the current sexp.  So for example, if you have the following source:  (concat (number-to-string 1) ""(xyzzy)"" [])   and the point is at the point marked [], then function-called-at-point will return ""concat""."
emacs,35bluu,dzecniv,1 point,Sat May 9 00:17:24 2015 UTC,"Always be as specific as you can with your identifiers. In this case, you should use sharp-quote (#'; short for function) for preceding-char and next-char. Always run M-x checkdoc"
emacs,359yth,bozhidarb,4,Fri May 8 10:15:22 2015 UTC,Great package! For the number of key bindings required I wonder if some kind of time out could work in practice. For instance pressing one character then nothing after 0.5 sec would use the -1 method instead of -2.  This should be used in evil to replace the ace-jump integration. The -2 variant is a killer feature.
emacs,359yth,syl20bnr,4,Fri May 8 11:47:19 2015 UTC,That's pretty neat. Can you open an issue on its github requesting this feature?
emacs,359yth,kaushalmodi,1 point,Fri May 8 13:43:42 2015 UTC,Done :-) https://github.com/abo-abo/avy/issues/13
emacs,359yth,syl20bnr,3,Fri May 8 16:04:11 2015 UTC,What is the difference to ace-jump? Why would one choose avy-jump instead of ace-jump?
emacs,359yth,cjk101010,3,Fri May 8 11:11:29 2015 UTC,"See the intro post. If you're using just ace-jump-char-mode, you shouldn't switch.  If you want >10 different ace commands with a tonne of customization, you should switch."
emacs,359yth,abo-abo,2,Fri May 8 11:18:05 2015 UTC,"It seems to me that as with swiper and other of your packages, the bulk of introduction and usage information about them is in blog posts, some of which are out of date.  I think you'd get more uptake and less confused potential users if you prioritize having comprehensive and up-to-date feature tours and getting started sections on the github page rather than in blog posts.  I'm very interested in swiper, though just working out what was available was more of an exercise in google searches and code reading than is typically necessary."
emacs,359yth,EatMoreCrisps,2,Fri May 8 13:02:50 2015 UTC,"Thanks for the suggestion, I would appreciate some help with this.  Most of my packages have wikis open for editing. I don't normally moderate, you can describe stuff as you like:   swiper wiki avy wiki"
emacs,359yth,abo-abo,1 point,Fri May 8 14:37:00 2015 UTC,"I haven't adopted swiper so I'm not in a position to do it.  To be honest, while I liked the look of swiper a lot, it didn't work for me without the C-s C-w behavior, or a lot of the M-s bindings in isearch that I'm used to.  If I can set aside the time to investigate and see if I can make it how I'd like I will be sure to try to document any tips I come up with on the wikis."
emacs,359yth,EatMoreCrisps,1 point,Fri May 8 19:31:03 2015 UTC,"I use a wrapper function for swiper that works better than C-s C-w as the point does not have to be at the beginning of the word/symbol. I use this ""use region or symbol under point"" function (which of course uses thingatpt) to provide the initial input to swiper in that wrapper fn."
emacs,359yth,kaushalmodi,2,Fri May 8 21:52:36 2015 UTC,I wondered that as well so I looked on aboabo's blog and indead he has an explanation. tl;dr it provides more ways to jump and it is easier to build other packages upon it.
emacs,359yth,cocreature,1 point,Fri May 8 11:20:33 2015 UTC,"I just tested it for a few minutes. My first impressions:  Pros:   Does what ace-jump does and more. Works with evil without introducing nasty bugs that massively slow down the display.   Cons:   case-insensitive, haven't found any variable to change that. Shouldn't be difficult to add, though. Shifts text for its hints instead of rendering over it, which may be annoying to some. I guess this can be changed in the overlay/style vars   Seems solid so far, so I might make the switch, or at least keep trying for a while.  What would be great is a separate face to highlight the characters you're searching for next to the hints.  If anyone's interested here's my el-get recipe:  (:name avy    :description ""Jump to visible text using a char-based decision tree.""    :website ""https://github.com/abo-abo/avy""    :type github    :pkgname ""abo-abo/avy"")"
emacs,359yth,DasEwigeLicht,1 point,Fri May 8 11:55:08 2015 UTC,"Btw, both the ""cons"" are actually configurable. :-)"
emacs,359yth,DasEwigeLicht,1 point,Sun May 10 18:18:41 2015 UTC,That's great to hear. I'll be sure to put avy onto my TODO list ... right after the twenty or so other packages I also need to try.
emacs,359yth,quadsho,1 point,Sun May 10 19:26:20 2015 UTC,"Awesome timing! I was just looking for alternatives to ace-jump because I ended up implementing avy-copy-line in ace-jump and it has been acting up a lot (I'm not good at elisp and ace-jump is terrible to try and extend). Not only is avy probably easier to extend than ace jump, it comes with a built in function to do what I planned on implementing anyways. I'm sold."
emacs,359yth,Grue,1 point,Fri May 8 15:38:21 2015 UTC,"I don't get it, it seems like a worse version of incremental search (which can jump to any number of chars as you type them)."
emacs,359yth,tuhdo,1 point,Fri May 8 16:51:48 2015 UTC,"It complements isearch. See my comment.  Also, see this video in Emacs Rocks."
emacs,35a990,TheFrenchPoulp,2,Fri May 8 12:39:15 2015 UTC,"I'm not doing Angular, but Tern has some support, as well as a company-mode backend.  http://ternjs.net/doc/manual.html#plugin_angular  https://github.com/proofit404/company-tern/"
emacs,35a990,hvis,2,Fri May 8 13:28:55 2015 UTC,"angular imenu setup: https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-javascript.el   I use both js-mode and js2-mode, when I working on low spec corp machine, I juse js-mode, at home I use js2-mode."
emacs,35a990,redguardtoo,1 point,Fri May 8 13:48:48 2015 UTC,"It should be very easy to write a company version of ac-js2, fwiw."
emacs,35a990,purcell,1 point,Fri May 8 13:17:27 2015 UTC,You seem to be aware that it already includes a company backend: https://github.com/ScottyB/ac-js2/issues/16
emacs,35a990,hvis,1 point,Fri May 8 13:26:04 2015 UTC,Aha! Yes indeed.
emacs,35a990,purcell,1 point,Thu May 21 19:03:49 2015 UTC,"Yes, author is already on it :)."
emacs,35a990,dzecniv,1 point,Fri May 8 13:32:25 2015 UTC,Here's a simple mode to highlight angular directives in your templates: https://github.com/omouse/angularjs-mode/blob/master/angular-html-mode.el (very easy to adapt for jade templates).
emacs,35a990,dzecniv,1 point,Sat May 9 10:41:28 2015 UTC,I tried to sum up everything in this wiki: http://wikemacs.org/wiki/JavaScript
emacs,3599bd,allabout001,4,Fri May 8 04:16:33 2015 UTC,Maybe the feature you are looking for is the auto-installation of layers based on file extensions. This is a very cool feature available in Prelude. I wan't to add it to Spacemacs but there will be one downside that will be confusing for the new user: when spacemacs is restarted all the auto-magically installed layers will be uninstalled. Maybe the first step would be to add an install action in helm-spacemacs (SPC f e h) with a safe way to add the layer in the dotfile automatically. Then we could introduce automatic installation based on file extension.
emacs,3599bd,syl20bnr,5,Fri May 8 05:17:52 2015 UTC,"Awesome idea.  Maybe add a prompt, so that when a particular file is opened, the prompt asks to install permanently, temporarily, or ignore."
emacs,3599bd,theCodeStig,3,Fri May 8 05:28:45 2015 UTC,"^ THIS! "" A python file has been opened and the specific python layer has been activated, would you like to keep it installed? y/n ? "" And obviously a dotspacemacs variable that makes installing and adding of these layers to the spacemacs installed layers variable automatic (no need to ask for confirmation)"
emacs,3599bd,notdiego,2,Fri May 8 05:34:28 2015 UTC,"Yes! And, maybe also add a section, in the opening screen (the initial buffer you see), about interesting/frequently used layers, and ask users if they want them, something like:  """"""  These are frequently used layers (which are configurations for specific situations), do you want to install and enable them:   python, 2. Javascrpt, 3. NeoTree, 4. AnotherCoolFeature, ..... etc.  Click here for more.   """""""
emacs,3599bd,person808,2,Fri May 8 05:51:24 2015 UTC,"Well the .spacemacs file already has some common layers added, but they are commented so the user can uncomment them if they want them."
emacs,3599bd,stshine,1 point,Fri May 8 05:55:50 2015 UTC,Maybe a menu for selecting features at the first run would help.
emacs,3599bd,syl20bnr,1 point,Fri May 8 05:45:37 2015 UTC,"Also, there are many features which are not related to file extensions (such as neotree, etc). If they are ON after the initial installation, users get a very friendly environment."
emacs,3599bd,theCodeStig,2,Fri May 8 07:28:02 2015 UTC,"Neotree is on by default, you can use SPC f e h (helm-spacemacs) to see if and where a package is used. The UI in helm lacks some info for now bu it will be improved. Searching neotree in helm-spacemacs would give you (spacemacs) neotree which means that neotree is in the spacemacs layer which is spacemacs default. Alternative is to check the documentation, everything in DOCUMENTATION.md is in default spacemacs. The documentation fo layers are in README.md files of the corresponding layer directory. You can search for neotree in the DOCUMENTATION.md and hopefully you should find it."
emacs,3599bd,theCodeStig,1 point,Fri May 8 14:14:54 2015 UTC,"thanks for the pointers, appreciated. will definitely read more docs."
emacs,3599bd,otijhuis,3,Fri May 8 15:16:44 2015 UTC,"I think your impression of emacs by way of spacemacs, is likely influenced by the editor that you are coming from.  Are you used to an everything-in-a-box IDE?  I switched to spacemacs from vim. FWIW I found it easy to grok, and refreshing.  The layers, and configuration couldn't be more straight-forward."
emacs,3599bd,tuhdo,1 point,Fri May 8 04:35:55 2015 UTC,"The expectation for immediate reward/satisfaction is simply higher when learning emacs than when learning Vim/Textmate/Sublime/IDEs,  because often time a spacemacs newbie is actually already a power users in Vim/IDEs.   I started using Vim 7 years ago, at that time I just wanted to be able to edit simple files quickly on remote servers.  The difference between initial expectations of learning other editors and learning Emacs is huge."
emacs,3599bd,otijhuis,2,Fri May 8 04:54:17 2015 UTC,"The difference between expectations of learning Vim and learning Emacs is huge.   I disagree.  Vim has a high learning curve (for high reward).  One can't just jump in, and use vim, you have to learn modes, and navigation on the home row.  Stock emacs has it's learning curve as well, but I think it does a better job of out-of-the-box approachability than vim."
emacs,3599bd,tuhdo,2,Fri May 8 05:02:25 2015 UTC,"nowadays developers (especially the ones who think about learning emacs) have to write in 5 or more programming languages/markups/template languages. Adding frameworks to the mix, their editor has to be very smart in so many situations to be counted as usable. I think this is the top reason many vim users are exploring other options.   So if most people have to set up these common features immediately after installation, why not do it for them by default, and give instructions on how to remove pieces if they choose to do so."
emacs,3599bd,syl20bnr,3,Fri May 8 06:48:29 2015 UTC,"I would argue that enabling everything by default actually hinders the learning process. You never know what other options there are because you haven't looked into them. Disabling things may seem easier but I assure you it isn't. An Emacs configuration with everything enabled would be extremely large. It would include lots of packages, each with their own configuration options. When you don't know which package or option causes certain behaviour, how can you change it? Providing documentation for all the possible options and combinations would be impossible. There are just too many. Also, why would a newcomer turn something off when they don't even know it's enabled? They wouldn't.  Configurations like spacemacs and prelude are often referred to as starter kits. This gives the impression that they are great for people new to Emacs. But try to look at them as how to's or configuration learning kits. They contain a wealth of information, even for experienced Emacs users. From how to structure your configuration to configuring and integrating certain packages. They are a great starting point and I regularly check them out to see if they contain something I want to use. The hardest parts of Emacs are learning how to configure it properly and finding out which packages fit your personal workflow. Study the kits, check melpa for packages. Find out what works for you. Yes, it's overwhelming initially. I know, I've been there. But once you've done that Emacs becomes easy. Shortcuts, preferences...everything will be configured the way you prefer.  Unlike most editors, Emacs is basically an ""build your own editor"" environment. Don't pick a ""starter"" kit because you believe it's easier. Pick it because it works the way you want and contains the packages you like. Embrace the fact that Emacs is different. Most people talk about learning Emacs when they really should be focused on telling Emacs how it should work. That's why I would never recommend Emacs to someone who hasn't used quite a few other editors and doesn't know their own preferences/workflow. It's completely different for each individual."
emacs,3599bd,otijhuis,2,Fri May 8 13:34:54 2015 UTC,"Having an Emacs with sane Elisp configuration is a great starting point to write Elisp. Build your own editor is great, but just not reinventing the wheel. Instead of spending time configuring the same thing over and over again, why not spending time write a new package that no one ever solves before? Spacemacs users are able to contribute code after a week of regular usage. evil-cleverparens is a package of a Spacemacs user who switched from Vim.  Btw, build your own editor is not that great. It's things like setq something, load code manually or install from MELPA, then paste configuration. I don't see much value in that process anymore."
emacs,3599bd,lawlist,1 point,Fri May 8 14:37:01 2015 UTC,"I'm all for a sane elisp configuration. The Emacs defaults are terrible in a lot of cases. Providing a good foundation is very important. But there's a big difference between sane defaults and installing all kinds of packages by default.  Nobody is talking about reinventing the wheel. I'm not configuring the same thing over and over. I configure it the way I prefer. Build your own editor doesn't mean reimplementing all functionalities again. It means being aware of the packages you install and the options you choose. Not blindly enabling things. Doesn't matter if you use spacemacs, prelude, or start from scratch.  All I am saying is, be aware of the fact that when you enable something in starter kits, a lot of it is based on the creator's preferences. You might love it, you might hate it. Make it your own, customise it. Dive into the configuration, learn how it works. Invest the time. It will be worth it."
emacs,3599bd,tuhdo,2,Fri May 8 18:36:53 2015 UTC,"Spacemacs is not a personal matter anymore. It's community configured and reviewed, so usually the configurations are globally optimized for most people. For example, see the pull requests created by the community. Spacemacs can be tweaked with personal layer to fit your liking. A lot of problems with the integration between packages was solved thanks to the community spotting, fixing and testing it. For example, this is my PR to solve the Helm problem with popwin. Anyone used Helm and popwin together is well aware of this issue.  The layers are fantastic. No more I have to read pages of manual to set things up. I can just add a layer and try it with all the awesome community packages without manually pasting Lisp code myself. For an Emacs newbie, there's a huge different between opening up an editor and try the awesomeness of Helm and Projectile and Magit and Company. A new user can enjoy a well-configured org-mode like this out of the box. (original image from this twitter post).  And you don't blindly enable anything. Layers in Spacemacs are modular and you add it or don't. If you don't like any built-in package, you can even exclude it with the variable dotspacemacs-excluded-packages. That's said, many built-in packages are simple productivity enhancers that stock Emacs could not provide."
emacs,3599bd,aptmnt_,1 point,Fri May 8 18:58:20 2015 UTC,"Regarding 'disabling things', please see my replay to hyperbling. In short, if a user doesn't know a particular feature and has no desire to search for it, then that feature does not exist in this user's mind, so there is no need to disable it.   Also, there are numerous built-in features in Vim, enabled by default. This never prevents users to install new and better alternatives. It's the same for the 'fat' version of Spacemacs.  I totally agree with your statements:  ""try to look at them (spacemacs) as how to's or configuration learning kits. They contain a wealth of information, even for experienced Emacs users. From how to structure your configuration to configuring and integrating certain packages. ""  So for this ""configuration learning kits"" to work well, the kits itself (not some where in the Internet to be discovered) should provide lots of easy to digest materials for people to learn, right? But if you look at the most important '.spacemacs' file after initial installation, it contains a measly 145 lines."
emacs,3599bd,syl20bnr,1 point,Fri May 8 14:11:32 2015 UTC,"It is important to mention that it is intended to have an exhaustive dotfile. Moreoever this file comes with predefined values that should provide a good first experience with spacemacs.  I think this is compatible with what you seek, you want everything enabled and then be able to disable some feature. This is what an exhaustive dotfile fully documented gives you.  I'm a bit confused about what you really want.  If you want everything, just add 'all to the list of layers and restart Spacemacs.  If you need help to discover this, say hello on the gitter chat."
emacs,3599bd,syl20bnr,1 point,Fri May 8 14:21:51 2015 UTC,"I understand where you are coming from. I'm not against saner defaults, especially for features that are built-in. Those are easy to override and normally don't get in the way. There are a lot of 3rd party packages though that have a global effect. They can substantially change the way Emacs behaves. And because the effects are global it can be extremely hard to figure out the cause of that specific behaviour.  In the end it's extremely hard to please everyone. Personally I prefer a very basic foundation and the option to enable what I need. Some people prefer working backwards. As long as you end up with something you love to work with it doesn't matter. I'm very grateful for all the time people put in those starter kits. I've learned more from those than anything else."
emacs,3599bd,hyperbling,4,Fri May 8 17:50:29 2015 UTC,"There are a substantial number of seasoned Emacs users who would recommend that newbies start with zero configuration and add new configurations one by one (instead of using a starter package).  In the end, it's a matter of personal preference -- that is why so many people switch to Emacs -- because you build the editor into whatever floats your boat."
emacs,3599bd,__baxx__,2,Fri May 8 07:24:41 2015 UTC,"By default Spacemacs already includes a lot of general purpose packages. For speicfic features, you need to add each ""feature"" (aka layer) to dotspacemacs-configuration-layers i.e. if you want Python, open Spacemacs. SPC f e d and add it. I thought this is the same way as plugin manager in Vim works and in other IDEs as well i.e. you want specific extra features in Eclipse, you have to download it yourself. What you want maybe too big that would drive people away."
emacs,356sf4,tuhdo,4,Thu May 7 16:06:33 2015 UTC,"The one that I just discovered the other day was M-x find-dired.  Asks for a top level directory and a find command subexpression (e.g. -name \*.txt) and constructs a dired buffer on the matches.  Handy!  Also, it's a way around the ido-mode issue -- just give it a blank subexpression to get a dired buffer with a recursive list of everything."
emacs,356sf4,Boojum,3,Thu May 7 23:51:37 2015 UTC,"Yes. There's also find-name-dired and find-grep-dired, they all useful. Also, they're very unique among Emacs commands. For example M-x f-n-d TAB gives find-name-dired and M-x f-g-d TAB gives find-grep-dired."
emacs,356sf4,RobThorpe,1 point,Fri May 8 01:25:14 2015 UTC,I can seem to use normal Dired commands (i.e. o or RET) to open the files in find-name-dired or find-grep-dired. Is that intended and I have to use ffap to open it?
emacs,356sf4,RobThorpe,1 point,Fri May 8 03:35:28 2015 UTC,"Yes, find-name-dired and find-grep dired have all the normal commands that dired has. I'm not sure I know what you mean about ffap."
emacs,356sf4,redguardtoo,1 point,Mon May 11 12:50:29 2015 UTC,"There is also https://github.com/redguardtoo/find-by-pinyin-dired , find file whose name containing Chinese characters, using pinyin"
emacs,356sf4,eclig,3,Fri May 8 12:19:03 2015 UTC,In Dired mode you can also use C-u s to change the listing switches.
emacs,356sf4,benfitzg,1 point,Fri May 8 07:46:41 2015 UTC,Nice!
emacs,358aww,metaperl,4,Thu May 7 23:02:49 2015 UTC,There shouldn't be a big difference. Does it still exist with emacs -q? If it does then report it as a bug.
emacs,358aww,RobThorpe,1 point,Fri May 8 01:23:22 2015 UTC,"There is a big difference. Type python and then range(100000) and windowed Emacs will crawl to a halt. This performance regression has happened over many Emacs major versions as they keep adding stuff to the display engine. There is seemingly little interest in actually fixing this crippling issue. It only affects long, single lines.   I've taken to, for Python at least, jerry-rigging the repl display so it truncates long lines to avoid locking up the UI thread as Emacs desperately tries to insert a very long, single line of text.  http://debbugs.gnu.org/cgi/bugreport.cgi?bug=13675"
emacs,358aww,mickeyp,2,Fri May 8 13:13:35 2015 UTC,"The bug report you mention is about the Emacs display engine internals. It isn't specific to Emacs using a windowing system.  If you see a particular problem with Emacs in a windowing system vs terminal then that's another issue. I'd report it too.  If you have reported it and they merged it into this big report, then I'd report it again and mention that it's a separate issue."
emacs,358aww,RobThorpe,4,Mon May 11 15:47:03 2015 UTC,Actually the Ubuntu Unity window manager was the main cause of slowness. Switching to Xfce sped things up noticeably. And I can also use Unity mode vmware!
emacs,358aww,eadmund,3,Fri May 8 21:52:03 2015 UTC,"You may wish to give stumpwm a shot…it can do some very cool things, and you can use SLIME to connect emacs to your window manager."
emacs,358aww,RobThorpe,2,Mon May 11 06:11:36 2015 UTC,That shouldn't happen either. You should report that to the Ubuntu Unity people.
emacs,358aww,jhelberg,3,Mon May 11 15:42:58 2015 UTC,It's best experiencrd while typing; echoing is considerabelly faster in non-X. I assume the thousands of extra hoops X let's you jump through is the cause.
emacs,358aww,dlhero,0,Fri May 8 07:09:33 2015 UTC,I'm experiencing the same thing exactly on 14.04.2 either with stock emacs or a hand-compiled 24.5.  I had faced some issues in the past with org-columns and really long buffers but it was a specific issue to org. Now I think it's a general emacs display issue as well.
emacs,358aww,EatMoreCrisps,3,Fri May 8 07:25:24 2015 UTC,"Funny, I'd never really noticed, but now I see I have a lot of lag in both X and terminal - which I don't get with emacs -q  Ugh, now I've got a problem to solve I didn't even realize I had before today.  Thanks."
emacs,358aww,anatolya,2,Fri May 8 13:08:25 2015 UTC,Try emacs24-lucid. It is still X but it's not using GTK+. I find it more responsive than GTK version but it still has all the bells and whistles of GUI version.  Bonus point is it correctly quits Emacs server when the computer is shutting down.
emacs,358aww,monotux,2,Fri May 8 09:03:30 2015 UTC,"How did you test it? What are your measurements? Did you isolate your config? In what modes? What X config are you using? Did you try another X client? (like suggested below) Is the problem most prominent when editing large files?  Did you read any of these?   https://www.masteringemacs.org/article/improving-performance-emacs-display-engine http://www.reddit.com/r/emacs/comments/2e8byy/slowass_text_rendering/ http://emacs.stackexchange.com/questions/5359/how-can-i-troubleshoot-a-very-slow-emacs   Sorry if I come out sounding like a critical jerk, but this type of vague posts are very common and can form lots of other peoples views of some software, which sometimes only can be related to configuration. Emacs is not perfect and some limitations sucks."
emacs,3595if,chronolockster,4,Fri May 8 03:36:11 2015 UTC,"Well that's ironic. (sorry, my best guess is what __rompy said)"
emacs,3595if,angelic_sedition,3,Fri May 8 06:17:21 2015 UTC,"Have you added the melpa repository ? If not, see http://emacswiki.org/emacs/ELPA for more info."
emacs,3595if,__rompy,1 point,Fri May 8 05:15:39 2015 UTC,"Uh oh,  might have not.  I'll respond with results tomorrow morning.  Till then, goodnight!  Edit: So I tried this solution, did not work. I put code in my init file to add the repo, refreshed, still not showing."
emacs,3595if,CodyChan,1 point,Fri May 8 06:21:15 2015 UTC,Have you tried M-x package-refresh-contents before M-x package-install?
emacs,3595if,CodyChan,1 point,Fri May 8 03:40:15 2015 UTC,"Yes,  it still doesn't show up"
emacs,359xg1,tedroden,3,Fri May 8 09:53:05 2015 UTC,Like this? http://shop.fsf.org/product/Emacs_Manual_24/
emacs,359xg1,notdiego,2,Fri May 8 10:27:56 2015 UTC,"LIke this http://www.amazon.com/Learning-GNU-Emacs-Third-Edition/dp/0596006489 and more up-to-date, may be?  There is also another thread here: http://permalink.gmane.org/gmane.emacs.help/104290"
emacs,359xg1,wasamasa,3,Fri May 8 10:32:52 2015 UTC,"Looks like ""C-h i"""
emacs,355tgi,luxbock,3,Thu May 7 10:29:15 2015 UTC,"I realize that this is exclusively aimed at evil-mode users, like me, but to keep some semblance of sanity among Emacs packages, it's probably best to use the Emacs definition of the word ""yank,"" rather than the Vim definition, or at least explain which meaning you're using. The Emacs term for yank is kill and the term for paste is yank.   This is clear to me as a long-time Vim user and aspiring long-time Emacs user, but may not be clear to all who come across it."
emacs,355tgi,bakuretsu,3,Thu May 7 13:47:45 2015 UTC,"Err... Isn't Emacs's kill delete+store in kill ring, but Vim's yank is store without delete?  ...Also, to be frank, Emacs's yank never made any sense... How do you get that word to mean that?  EDIT: Also, Evil users are probably not going to be well-acquainted with Emacs terminology. Using kill/yank would probably just confuse the intended audience."
emacs,355tgi,ducketh,3,Thu May 7 22:14:17 2015 UTC,"Yeah, it might be best to use ""copy"" and ""paste"" at least to clarify. My head exploded when I realized that yank means paste in emacs."
emacs,355tgi,angelic_sedition,1 point,Fri May 8 00:38:28 2015 UTC,The meaning of yank in the Emacs manual is one of the most confusing things.
emacs,355tgi,bakuretsu,1 point,Fri May 8 06:39:16 2015 UTC,You are indeed right. I will re-write the README to use the correct terminology.
emacs,355tgi,aptmnt_,3,Thu May 7 16:06:40 2015 UTC,"Nice project, there is definitely a need for a really great solution in this space. I also like that you have evaluated and laid out the alternatives. One of lispy's killer features is special-lispy-ace-paren, bound to q, which is a kind of ace-jump mode specifically for s-exps within the current defun. If this functionality were replicated in a more vi-like way, I would switch in a heartbeat."
emacs,355tgi,syl20bnr,1 point,Fri May 8 04:14:55 2015 UTC,How the performance compare to evil-smartparens ? Say in ~/.emacs.d/spacemacs/packages.el in init-powerline monster ? I tried evil-smartparens and it was too slow for me. Moreover some useful provided features are available also in evil-lisp-state like deletion of expressions. If the performance are good I will seriously consider using it.
emacs,355bm0,instant_sunshine,6,Thu May 7 06:02:51 2015 UTC,Thanks!  I've been using Emacs for over 20 years.  This has been there since 1989.
emacs,355bm0,larsbrinkhoff,8,Thu May 7 06:32:48 2015 UTC,"This has been there since 1989.   Amazing right, I've been using Emacs on an off since 1992, and every day since 2006... found it today and nearly spit my coffee, it's so useful."
emacs,355bm0,theldoria,3,Thu May 7 06:57:12 2015 UTC,"Is it? I mean, it’s an interesting looking function, but honestly I can not think of a real world use case that would happen really often. So, can you give me some examples of it usefulness?"
emacs,355bm0,tending,9,Thu May 7 07:18:14 2015 UTC,"Ok, one example off the top of my head.  I have a single line or block, it's a pattern which has a lot of duplication. (Think XML, JSON, Plists, Mock objects... I could list more, hopefully you got the idea.)  Now, each one has a change: (Convoluted CSS example here):    h1 { font-size: 22pt; }   Now we want to make h1 - h6, I have a duplicate-line-or-region func I'd use to quickly make the duplicates.  Narrow the buffer to only show the duplicates and...  M-x map-query-regexp-replace  h1 -> h2 h3 h4 h5 h6   Repeat  22pt  -> 18pt 16pt 14pt 12pt 10pt   ...  h1 { font-size: 22pt; } h2 { font-size: 18pt; } h3 { font-size: 16pt; } h4 { font-size: 14pt; } h5 { font-size: 12pt; } h6 { font-size: 10pt; }   Hopefully, like bad sci fi, the potential is more apparent than the cruddiness of the example."
emacs,355bm0,dlhero,1 point,Thu May 7 12:35:19 2015 UTC,You can also accomplish this with an F3/F4 macro that uses regular search and delete word.
emacs,355bm0,Shipqwert,2,Thu May 7 08:28:29 2015 UTC,"It's yet another way to get similar things done.  When you can't see all your replacement targets on one page, multiple cursors pretty much sucks.  The best part of map-query-regexp-replace is the looping/wrapping on the list of replacements."
emacs,355bm0,slymrspy,1 point,Thu May 7 12:00:24 2015 UTC,Hm. What if the string list gets exhausted? Does it rotate to the beginning of strings?
emacs,355bm0,aabbccaabbcc,3,Thu May 7 12:27:04 2015 UTC,Yes
emacs,355bm0,slymrspy,2,Thu May 7 13:14:41 2015 UTC,This is something I like best about the function
emacs,355bm0,CodyReichert,1 point,Thu May 7 08:58:24 2015 UTC,I also added a screencast demo. https://vid.me/ZIiN
emacs,355bm0,slymrspy,2,Thu May 7 11:29:12 2015 UTC,"This is pretty cool. I need to edit files a lot where I need to replace with an increasing set of integers. Like:  VarX VarX VarX   becomes  Var1 Var2 Var3   I wonder if this can be tweaked so that you don't have to enter ""1 2 3 4 ....""."
emacs,355bm0,frosch03,4,Thu May 7 13:17:02 2015 UTC,"I'm not sure about map-query-replace-regexp (didn't know about it until today), but if I understand your question, you can accomplish it pretty easily with regular old query-replace-regexp.  1) M-x query-replace-regexp  2) Query Replace Regexp: VarX  3) Query Replace Regexp VarX with: Var\,(1+ \#)  \, lets you put in some elisp to evaluate, which is incredibly useful. In the s-expression here, \# is a variable available to query-replace-regexp that holds the number of replacements done so far (i.e. before the first replacement it's 0, before the second replacement it's 1, and so on). To start the numbering at one, we just add one to it with the function 1+.   Ever since I found out about this capability, I've seen opportunities to use it everywhere.  Anyway, hope this helps!"
emacs,355bm0,kaushalmodi,2,Fri May 8 03:09:17 2015 UTC,emacs is amazing. that is too cool.
emacs,356fj2,benfitzg,3,Thu May 7 14:27:19 2015 UTC,I experience this when the same buffer is open in more than one frame.  Emacs chooses the point in the other frame.  I haven't spent any time though trying to figure out how to force Emacs to choose the point in the current frame.
emacs,356fj2,lawlist,1 point,Thu May 7 16:00:27 2015 UTC,This is my suspicion too. I guess I'll have to dig.
emacs,356fj2,tuhdo,1 point,Fri May 8 01:39:12 2015 UTC,Sounds like some package is doing this. Does it happen with emacs -q?
emacs,356fj2,420_blazer,1 point,Thu May 7 15:06:56 2015 UTC,Using emacs 24.3 I don't experience this when changing buffer with C-x > but I do experience it when jumping between registered windows.
emacs,356fj2,tuhdo,2,Thu May 7 15:21:43 2015 UTC,"Isn't when you restore a window configuration, it restores the point to the position when you saved it?"
emacs,356fj2,420_blazer,2,Thu May 7 15:26:51 2015 UTC,"It does, but OP might be jumping between buffers using the register."
emacs,356gl9,tunabee,1 point,Thu May 7 14:36:03 2015 UTC,The term Cocoa in conjunction with Emacs hasn't really been used since before my time.  Are you using a recent version of Emacs built for OSX?:  http://emacsformacosx.com/
emacs,356gl9,lawlist,2,Thu May 7 16:04:00 2015 UTC,"I'm using the latest version through Homebrew, which you have to install with a --cocoa flag in order to get the GUI. I guess I should have said GUI Emacs vs. terminal colors. Sorry about the confusion."
emacs,356gl9,Atheriel,1 point,Thu May 7 16:07:38 2015 UTC,"If you're using Homebrew, try passing the --srgb flag to enable sRGB colours in Cocoa. That should make the colours match your terminal (which uses sRGB)."
emacs,356gl9,jordonbiondo,1 point,Thu May 7 22:15:56 2015 UTC,I actually did that before I posted. It seems that it's just that the terminal can't handle as many colors. NBD.
emacs,356gl9,jordonbiondo,1 point,Thu May 7 22:18:42 2015 UTC,"If you want the colors to be consistent ensure, that the theme only uses the 256 colors available to your terminal. The theme is using colors not available to the terminal so the are being coerced into the closest matching color to try rendering correctly."
emacs,356gl9,jordonbiondo,1 point,Thu May 7 16:30:06 2015 UTC,"Actually, I'm using a 256 color terminal. The issue is that the colors just look wrong. Here's a screenshot I've taken using the exact same theme, exact same file.   http://imgur.com/PzuRqRS"
emacs,356gl9,jordonbiondo,2,Thu May 7 17:18:15 2015 UTC,"Like I said, the theme is using colors that are not available to your terminal and thus it tries to guess what the most similar colors would be given the limitations of rendering in the terminal. The color theme is not ""off"" in the GUI version, it is the terminal version that is ""off"".  Look up what color the theme is trying to use and you'll the that the GUI version is displaying it correctly, and the terminal version is wrong."
emacs,352vrm,vermiculus,5,Wed May 6 17:24:43 2015 UTC,I'd love to see something like this. Designing something flexible and powerful enough sounds like quite a challenge!
emacs,352vrm,gepardcv,2,Wed May 6 19:07:30 2015 UTC,Has anyone tried implementing a miniKanren in Emacs lisp and use that for implementing database-like abilities?
emacs,352vrm,misplaced_my_pants,1 point,Thu May 7 01:06:11 2015 UTC,"I must admit -- I barely know what miniKanren is -- but it looks like there's a Scheme implementation. Shouldn't be too difficult to adapt, but I don't even know how the thing is supposed to work."
emacs,352vrm,misplaced_my_pants,2,Thu May 7 19:33:01 2015 UTC,The Reasoned Schemer is the book to read.
emacs,352vrm,misplaced_my_pants,1 point,Thu May 7 23:11:33 2015 UTC,"Oh no, I know Scheme :) I don't know miniKanren."
emacs,352vrm,misplaced_my_pants,2,Fri May 8 00:11:11 2015 UTC,I mentioned the book because (IIRC) it teaches you how to build a miniKanren using Scheme.
emacs,352vrm,gepardcv,1 point,Fri May 8 03:31:20 2015 UTC,"Ohh, neat! Sorry for the assumption, I'll check it out :)"
emacs,352vrm,gepardcv,1 point,Fri May 8 11:09:17 2015 UTC,"You'll want to check, but I think it assumes a level of familiarity with Scheme on the level of The Little Schemer and The Seasoned Schemer, which were the authors' previous books."
emacs,352vrm,kcin,0,Fri May 8 12:20:56 2015 UTC,That would be phenomenal.
emacs,352vrm,remyhonig,1 point,Thu May 7 01:44:19 2015 UTC,"If you have any syntax suggestions, I'd love to get a conversation going :)    Personally I'm thinking a macro system similar to rx as the main interface."
emacs,352vrm,hmelman,1 point,Wed May 6 19:09:39 2015 UTC,"A lot depends on what you expect to query out. E.g., ""All unfinished tasks tagged 'area51' that I worked on last Monday which don't have 'Page' in the description""?"
emacs,352vrm,Enfors,3,Wed May 6 19:19:39 2015 UTC,"Something like this, perhaps?  (org-db-query  (or current-task (file ""~/sticky""))  where  (and (state unfinished)              (tag ""area51"")              (not (content ""Page""))              (or (clock ""2015-05-04"")                  (note  ""2015-05-04""))))   Could even have a relative-time form: (clock (relative (last monday) (after ""2pm""))).  I'm not yet sure how returning collections of related headlines would work. For example, select all headlines with a TICKET property that share the value with another headline in a different file."
emacs,353ebn,katspaugh,1 point,Wed May 6 19:46:32 2015 UTC,How does this compare to tern?
emacs,353ebn,AnAirMagic,2,Wed May 6 22:09:11 2015 UTC,"This depends on Tern:  ;; Package-Requires: ((emacs ""24"") (tern ""0.0.1"") (js2-mode ""20150202""))   and seems to be a plugin for it:   Install like any other Tern plugin."
emacs,353ebn,ccharles,1 point,Thu May 7 00:30:09 2015 UTC,"Exactly. Apart from the Emacs mode, it's a Tern plugin that adds a new type of query for highlighting."
emacs,353ebn,bliow,1 point,Thu May 7 06:13:44 2015 UTC,How does this compare to js2-mode?
emacs,353ebn,bliow,1 point,Thu May 7 07:30:35 2015 UTC,"Feature-wise, js2-mode has:   Paragraph filling Many customization options Almost no setup (no need for external process and .tern-project file)   Code-wise, the main difference is Tern (and tj-mode by extension) having a server-client architecture, so the actual parsing occurs outside of Emacs (or other editors).  tj-mode also uses js2-mode's facilities for indentation (they don't rely on AST)."
emacs,353ebn,hvis,1 point,Thu May 7 08:02:44 2015 UTC,"server-client architecture   Right. I noticed that. Now that I think about it, that could be a win for large files."
emacs,354cld,metaperl,3,Thu May 7 00:20:03 2015 UTC,"Org mode might fit this bill.  If you have an org-mode buffer, links are written (or inserted with a key) in a markup syntax instead of emacs lisp.  Org mode hides the markup and leaves you with a highlighted link text, like a browser might.  Ask around this sub for details if you need them."
emacs,352tz1,mcandre,1 point,Wed May 6 17:11:41 2015 UTC,Can you provide more context with a little example code? Also it might be helpful to ask such questions on emacs.stackexchange.com too.
emacs,352tz1,kaushalmodi,1 point,Wed May 6 20:04:12 2015 UTC,Cross-posted to the Emacs Help mailing list:  https://groups.google.com/forum/#!topic/gnu.emacs.help/Fyvj6JurRcc
emacs,352tz1,RobThorpe,1 point,Wed May 6 20:29:34 2015 UTC,"On gnu.emacs.help I suggested to mcandre that it's either: * A bug in json-mode, or * a bug in his init file.  I'm not sure though. I tested json-mode on my own machine. I had to install that, json-reformat & json-snatcher. It worked with no problems, hide-show worked in the right place. It seems unlikely that an init file change could affect that."
emacs,350g4r,tomdupes,2,Wed May 6 01:57:14 2015 UTC,"I did a demo at Quasiconf 2014 of a video where I did display pre-processed frames in a buffer at a fixed speed. Reaching 30fps at this low resolution did work (higher resolution dipped below 25fps and started stuttering), however I doubt you can either add synchronous sound playback (for starters, the Emacs sound support blocks the UI while playing and is therefore not usable) or decode frames on the fly and fast enough like an actual video player would do.  It's been a fun demo though, I plan on reusing the code for a task that only involves pre-processed frames at low resolution."
emacs,350g4r,wasamasa,1 point,Wed May 6 05:59:24 2015 UTC,"wow, that is really cool. I wish I was at a level of comfortabilty/expertise to make emacs extensions like that."
emacs,350g4r,wadcann,2,Wed May 6 15:25:51 2015 UTC,"I don't know of a reasonable way to do this short of extending emacs (emacs doesn't support setting up a 3d overlay over its windows AFAIK) aside from just-to-prove-that-it's-possible approaches like running mplayer -vo aa or -vo caca to generate text output in an ansi-term.  However...could you clarify what it is that your goal is by putting the movie in the window?  emms is not, itself, a movie player/decoder; it's more of a playlist manager, and will always invoke an external program.  Generally-speaking, I don't want the movie in the window, because I usually want it fullscreen.  Is the concern that you want to use it in part of your window and you use emacs to do ""window management"", or that you're running many emacs instances with many emmses and you're having trouble tying together the media player window with the controlling emms, or what?"
emacs,350g4r,wadcann,1 point,Wed May 6 06:06:32 2015 UTC,"definitely more of a window management standpoint. I use xmonad and I like tiling  WMs but since I really only use emacs in fullscreen, I thought it would be cool to have the video playing inside an emacs window instead of an outside program. I thought perhaps there could be a hack to make the  external video player just sit on top of a window in emacs and match its sizing"
emacs,350g4r,angelic_sedition,3,Wed May 6 15:24:28 2015 UTC,"Ah, I see, that does make more sense.  No, sorry, I don't know of a great way to do that, though I do think that you might prefer to use a true window manager more, just because there's a family of windowed applications that most people use to some degree (web browser being foremost among them; emacs-based web browsers aren't terribly competitive with the Firefox/Chromium/IE/Safari/etc group).  I don't believe that anyone has tried writing a window manager for emacs itself, though theoretically that would be possible.  Also, if you're not familiar with it, you might look at stumpwm, which is Lisp-based and more emacsy than xmonad."
emacs,350g4r,Ubertekk,1 point,Wed May 6 15:41:47 2015 UTC,"hmmm, thanks for the input i might try that wm, but I like haskell alot and have spent a good amount of time configuring that already.  the main reason I wanted it inside of emacs is because with any tiling wm, you cant really have a video in the corner and have emacs take up the rest of the screen which would be an ideal set up. I suppose if I just get a bigger screen I could make it work by having enough space for emacs on one tile and the second tile can be split between the movie player as well as some other program.   And yea, web browsing and video playing are really the only things that cant be done in emacs that I do regularly."
emacs,350g4r,wadcann,1 point,Wed May 6 18:45:34 2015 UTC,I don't think this is possible.
emacs,350g4r,Ubertekk,3,Wed May 6 02:21:39 2015 UTC,"If the xwidgets branch is still maintained it could be possible. There was a project which had emacs slurp a window with webkit in it, providing a real web browser in emacs."
emacs,350g4r,RobThorpe,1 point,Wed May 6 03:56:10 2015 UTC,"Okay, but how was it pulling the window image in?  You're not going to want to copy the thing each frame...unless you're going with some really gross hack like trying to make the movie player's window show up on top of your own, you want emacs to be opening an overlay ."
emacs,350g4r,angelic_sedition,2,Wed May 6 05:58:43 2015 UTC,"That could be exactly what's needed, actually. I'm not all that familiar with X, but I'm pretty sure what you'd want to do is steal mplayer or whatever as a subwindow of emacs sized to the window you have open, then when the buffer is switched away you want to pause the player and unmap the window."
emacs,350g4r,Ubertekk,1 point,Wed May 6 11:36:43 2015 UTC,yea I was wondering if there was something like this that could jsut have the external video player overlay an emacs window
emacs,350g4r,elijahwright,1 point,Wed May 6 15:27:14 2015 UTC,"There's still work ongoing on the xwidgets branch. So, in the future it should be possible to put many types of application into Emacs windows."
emacs,34xskg,tuhdo,3,Tue May 5 13:21:36 2015 UTC,Impressive dithered gif http://imgur.com/54OIqGI
emacs,34xskg,agumonkey,3,Tue May 5 13:59:20 2015 UTC,"This is a pretty cool package, especially for those familiar with ranger file/image preview. I've been using it occasionally for a while, and it works pretty well. It can be annoying though when you move over something like an iso file. I'm also not sure if there is a setting for image mode to automatically fit images to the buffer, but that would make things more pleasant as well."
emacs,34xskg,angelic_sedition,2,Tue May 5 18:16:15 2015 UTC,"With default Emacs key bindings, you use C-n and C-p to preview files, n and p to move to next file without preview. The Evil integration, I think it assumes that you use n and p to move back and forth. Or, you can make j and k move to next/previouse candidate without opening and C-j and C-k for previewing."
emacs,34xskg,angelic_sedition,2,Tue May 5 18:18:27 2015 UTC,"I'm just re-purposing the normal keys I would use to move up and down in dired to peep-dired's keybindings when it's active. It doesn't make sense to me to use two different keybinding sets to have to move up and down. That would require me to look ahead and figure out if the next file would give a ""file is large"" prompt which I think for me would be more difficult than just dealing with the prompt."
emacs,34xskg,angelic_sedition,3,Tue May 5 18:23:05 2015 UTC,You can advise the commands peep-dired-next/prev-file to check whether a file has unwanted extension for previewing.
emacs,34xskg,dzecniv,3,Tue May 5 18:32:45 2015 UTC,I'll probably just make a pull request. Seems like a reasonable thing for peep-dired to do.
emacs,34y1ge,tunabee,2,Tue May 5 14:39:24 2015 UTC,"What was weird was that it was creating an .emacs file where there wasn't one and creating a .emacs.d folder but not using it.  I ended up copying .emacs to ~/.emacs.d/init.el and from that point on it just used init.el. So I'm thinking Emacs probably behaves thusly:   If there is no ~/.emacs.d, then create one.  If customization settings need to be saved, save them in ~/.emacs.d/init.el if it exists. If it doesn't exist, save in ~/.emacs   In any case, it's not really the behavior I'd expect based on what I've read, but it's not a big deal either."
emacs,34y1ge,piotr404,7,Tue May 5 15:33:45 2015 UTC,Here is the manual entry for saving customization. May be it will help
emacs,34y1ge,darkness,1 point,Thu May 7 14:08:13 2015 UTC,"Here's how I have customize write to ~/.emacs.d/lisp/my/customizations.el:  ;; Customize should confine itself to the file I've designated for it. (setq custom-file (locate-user-emacs-file ""lisp/my/customizations.el""))"
emacs,34wffl,1destroyer2x,10,Tue May 5 02:56:58 2015 UTC,"They apply to spacemacs, and spacemacs also has nice menus that pop up and show help info.  But basically all of the emacs bindings still work, spacemacs just comes with some leader stuff set up with spacebar, helm, and evil-mode, and is otherwise just emacs.  I was a vim user and I switched to emacs + evil-mode about 2 years ago. Found spacemacs a few weeks ago on HN and haven't looked back. It's basically the same setup I had, but polished and nice."
emacs,34wffl,unknownmosquito,7,Tue May 5 04:04:43 2015 UTC,"Spacemacs does look neat doesn't it?  I haven't used it but I think most tutorials would map over to spacemacs.  You may find more help specifically with the ""vim"" behavior by searching for evil-mode. Evil-mode may be more likely to have stackoverflow topics, blogs, etc and most should port over to spacemacs functionality.  Definitely check out the #emacs IRC (freenode) - we're friendly over there.  Good luck!  Emacs is a journey."
emacs,34wffl,localredhead,5,Tue May 5 03:55:33 2015 UTC,"A basic understanding of vim will translate almost directly to Spacemacs, at least as far as text editing goes. You'll have to know one or two basic navigation commands (e.g. SPC f f for find file) for working with the filesystem, but once you're in a file you should be able to apply your vim knowledge for text manipulation.  Also, there's a Gitter channel for Spacemacs help as well!  Spacemacs: https://github.com/syl20bnr/spacemacs  Help chat: https://gitter.im/syl20bnr/spacemacs"
emacs,34wffl,a1979shakedown,3,Tue May 5 06:10:34 2015 UTC,"I have been using Spacemacs for 4-5 months now, and its fantastic. I have tried almost every editor and IDE on the planet, and not one IDE has felt comfortable, so i have always switching back to a text editor. Ive used Sublime since v.2 but after i found Spacemacs i think i have finally found the one.  So, if you want to learn spacemacs, its basically emacs + evil, so you use basic VIM commands, theres also the ""holy-mode"" that uses Emacs bindings, and some talks are going around in the issue tracker about doing a third, ""normal-mode"" (or whatever its called when/if its released) that would be basically the same keys as a native text editor on Mac/Lin/Win, like SublimeText.  The github readme is very long, and covers most of the commands, just grep it to find out how.  The community is great, you always get help, and most of the time instantly.  Step in the Spacemacs gitter room if you have further questions."
emacs,34wffl,gkunno,1 point,Wed May 6 16:07:51 2015 UTC,"I noticed there are so many keybindings (not really a unique problem) that are all different because they start with SPC. If I hit ""SPC f"" will spacemacs by default show me my options?"
emacs,34wffl,excitedaboutemacs,4,Tue May 5 14:12:49 2015 UTC,"Yes. If you use Vim editing style, use SPC. Otherwise, use M-m i.e. M-m f."
emacs,34wffl,tuhdo,1 point,Tue May 5 14:57:44 2015 UTC,"Sorry I may not have worded my question well:  I meant say you knew SPC b, but didnt know what to hit next, how would you figure out the rest without pulling out the user manual?  https://github.com/syl20bnr/spacemacs#key-bindings-discovery  The link answered my question. Does anyone have a screenshot of this in action?"
emacs,34wffl,excitedaboutemacs,3,Tue May 5 21:18:47 2015 UTC,http://imgur.com/KSjHjH1
emacs,34wffl,ghyspran,1 point,Tue May 5 23:20:20 2015 UTC,Thank you.
emacs,34xv4c,tHEbigtHEb,1 point,Tue May 5 13:45:17 2015 UTC,"What do you mean by ""stuck"" specifically? The initial clone will take a while, during which time it won't look like anything is happening. It took maybe ten minutes for me."
emacs,34xv4c,___violet___,1 point,Tue May 5 14:10:11 2015 UTC,"Oh, I guess I gave to be more patient. I did not expect it to take that long. My bad."
emacs,34xv4c,verdigris2014,1 point,Tue May 5 14:16:53 2015 UTC,I brewed emacs on OS X also.  Not really sure what the material benefits of the emacs-Mac port over emacs.   Emacs recipe seems more up to date.   Google brew install emacs as there were some flags to use.
emacs,34vxws,johnthexiii,1 point,Tue May 5 00:26:27 2015 UTC,I highly recommend you use Cygwin on Windows. It will save you a lot of headache.
emacs,34vxws,nandryshak,1 point,Tue May 5 01:28:50 2015 UTC,"I don't disagree, however I cannot put Cygwin on the computer in question."
emacs,34vxws,fabianmg,0,Tue May 5 03:31:58 2015 UTC,"I had problems with the default windows ftp command line tool, i downloaded a recompiled one and now works flawlessly. What error or problem do you have?  ( I'm on my smartphone right now, so I can't access the ftp i was talking about )"
emacs,34ttb8,alexmurray,1 point,Mon May 4 14:38:48 2015 UTC,"Wait, you can actually assign a different font to certain set of code-points in Emacs?  Where can I find more information about this? I would like to make the Symbola font work in Emacs along with the default font Source Code Pro!"
emacs,34ttb8,shackra,5,Mon May 4 18:27:34 2015 UTC,http://endlessparentheses.com/manually-choose-a-fallback-font-for-unicode.html
emacs,34ttb8,kaushalmodi,2,Mon May 4 18:30:26 2015 UTC,http://emacs.stackexchange.com/a/10985/10
emacs,34ttb8,wasamasa,1 point,Mon May 4 18:32:04 2015 UTC,"I created a file in Emacs with these two glyphs:   🖑   I'm setting my fallback fonts (I don't if it is possible to set more than one font at the same time) like this:  (set-frame-font ""SourceCodePro 12"") (add-to-list (quote default-frame-alist) (quote (font . ""SourceCodePro-12"")))  (defun shackra:arregla-emojis (&optional frame)   (set-fontset-font ""fontset-default"" nil (font-spec :size 30 :name ""Symbola"") frame 'append)   (set-fontset-font ""fontset-default"" '(#xf000 . #xf23a) (font-spec :size 30 :name ""FontAwesome"") frame 'append)   (message ""tipografías “fallback” aplicadas""))  (add-hook 'after-make-frame-functions 'shackra:arregla-emojis) (shackra:arregla-emojis) ;; sometimes I open a Emacs instance besides the Emacs daemon   Then I open a new Emacs instance, and try to open the file with those glyphs but Emacs fails with a segmentation fault!  Am I doing something wrong or is this a bug?"
emacs,34ttb8,shackra,1 point,Mon May 4 20:50:06 2015 UTC,"Could very well be a bug, I've received a report for an OS X issue regarding such glyphs not too long ago."
emacs,34ttb8,wasamasa,1 point,Mon May 4 21:18:26 2015 UTC,"(set-fontset-font ""fontset-default"" '(#xf000 . #xf23a) (font-spec :size 30 :name ""FontAwesome"") frame 'append)   I commented the line above and the problem is gone now!"
emacs,34uh9z,nautola,5,Mon May 4 17:42:49 2015 UTC,"Nothing special, the standard approach works:  (org-babel-do-load-languages  'org-babel-load-languages  '(    ;; ...    (scheme . t)))   You need to have Geiser installed."
emacs,34uh9z,abo-abo,1 point,Mon May 4 18:00:27 2015 UTC,"That's what I do, but I get an error when I try to use define.  It seems like it's wrapped in another sexp, and that disallows define.  Any pointers?"
emacs,34uh9z,abo-abo,1 point,Wed May 6 21:50:08 2015 UTC,"Works fine for me:  #+begin_src scheme (define x ""foo"") x #+end_src  #+RESULTS: : foo   Got this message:  executing Scheme code block... Starting Geiser REPL for guile ... Guile REPL up and running! => ""foo"" Code block evaluation complete."
emacs,34uh9z,whispen,1 point,Thu May 7 06:04:29 2015 UTC,My minibuffer displays the message Symbol's value as variable is void: geiser-default-implementation  I'm not sure what the deal with that is.   EDIT: I got it working.  I set the geiser-scheme-implementation to be guile at the top of my org file and it seems to all be working now.  Thanks! (I do need to advise org-ctrl-c-ctrl-c to close the buffer after it's done)
emacs,34uyrt,mcandre,2,Mon May 4 19:53:51 2015 UTC,"Update:  Turns out I was loading my git prompt with .bash_profile, but not with .bashrc, after I had changed the load style of my bash configuration for speed.  I've created https://github.com/mcandre/dotfiles/blob/master/.bashrc.d/emacs-git-prompt.sh to get the best of both worlds: fast shells, and idiomatic Emacs shell prompts!"
emacs,34uyrt,enjoyscuriosity,1 point,Tue May 5 01:43:09 2015 UTC,Have you tried using eshell? M-x eshell
emacs,34tn0h,jordonbiondo,3,Mon May 4 13:44:06 2015 UTC,I think lispy-goto does it better.  Custom tags can be added in a simple way: I just added this to lispy-tag-arity variable:  (use-package . 1)
emacs,34tn0h,abo-abo,2,Mon May 4 15:42:19 2015 UTC,"Thanks for sharing this. I used to run helm-occur a lot, now I can use helm-semantic-or-imenu. Here is my config (that regexp pattern is taken from the Variables), it works fine.  (use-package imenu   :defer t   :config   (defun imenu-use-package ()     (add-to-list 'imenu-generic-expression                  '(""Package"" ""^\\s-*(use-pakcage\\s-+\\(\\(\\sw\\|\\s_\\)+\\)[[:space:] ]+[^)]"" 1)))   (add-hook 'emacs-lisp-mode-hook #'imenu-use-package))   Edit: Add a missing newline within regexp, that is necessary otherwise some packages will not be found."
emacs,34tn0h,xuchunyang,1 point,Mon May 4 16:08:18 2015 UTC,"I had used this command in the past which actually read's your init file and prompts you for a (use-package PACKAGE) block to jump to, but I found I could replace it with just one addition to imenu and the installation of imenu-anywhere."
emacs,34tn0h,Pixelmod,1 point,Mon May 4 13:52:44 2015 UTC,"Or you can transport the (use-package ...) spam to another ELisp file and use  (load 'that_one_file)   Simple. I prefer using this, but this may be because I like to verbose abit my code in general."
emacs,34tn0h,tuhdo,3,Mon May 4 14:18:26 2015 UTC,"Having a lot of use-package blocks is not a problem for me, I moved from a file-per-package config, to a (mostly) single file config and I can't imagine I would ever go back. If having too much on the screen is bothersome, you can use hideshow to collapse all top level forms."
emacs,34tn0h,Pixelmod,2,Mon May 4 14:35:09 2015 UTC,You still need to jump to each use-package when in need even if you separate in another file.
emacs,34sjoc,marcwebbie,18,Mon May 4 04:51:19 2015 UTC,"Naming Torvalds as an Emacs user is a stretch. uemacs shares the keybindings with Emacs and that's pretty much it. Actually, Torvalds despises Emacs."
emacs,34sjoc,dengste,9,Mon May 4 05:30:27 2015 UTC,"You've probably been told by your long-time Unix user helper that ""GNU emacs"" automatically formats the C sources for you, and you've noticed that yes, it does do that, but the defaults it uses are less than desirable (in fact, they are worse than random typing - an infinite number of monkeys typing into GNU emacs would never make a good program).   Although he goes on to give better configurations. Which can now be done with just: (setq c-default-style ""linux"")"
emacs,34sjoc,hornetblack,8,Mon May 4 11:41:40 2015 UTC,"Neal Stephenson used to use Emacs as well, but it looks like he's switched away now; see page two of this interview.  I haven't used Scrivener, but since it runs on a Mac, it probably gets a bunch of Emacs keybindings for free (the NeXTSTEP legacy)."
emacs,34sjoc,self,2,Mon May 4 08:33:47 2015 UTC,I'd love to hear the reasons why he switched
emacs,34sjoc,pxpxy,2,Mon May 4 15:16:26 2015 UTC,"I can't speak for Neal Stephenson, but I can tell you that as an author, the organizational aspects of Scrivener are just head and shoulders above anything else out there. org-mode is great, but it just doesn't have the same level of flexibility that Scrivener does, given that it was written from the ground up for the job.  And that's saying a lot since I used to do literally every bit of my writing, both technical and fiction, in Emacs and LaTeX."
emacs,34sjoc,weeksie,2,Thu May 7 17:34:23 2015 UTC,"Thanks, I appreciate the answer!"
emacs,34sjoc,pxpxy,1 point,Thu May 7 20:18:50 2015 UTC,I wonder how much work it'd actually be to add what Scrivener can do to emacs.
emacs,34sjoc,eadmund,6,Mon May 11 06:14:49 2015 UTC,"If you check this interview with 9 famous programmers, it turns out that 5 out of 9 are using Emacs."
emacs,34sjoc,ReneFroger,8,Mon May 4 08:59:09 2015 UTC,I can't trust any list that names Linus Torvalds as an Emacs user.
emacs,34sjoc,RobThorpe,6,Mon May 4 12:49:57 2015 UTC,"Or that lists Guy L. Steele's main accomplishment as writing ""C: A Reference Manual""!"
emacs,34sjoc,piotr404,8,Mon May 4 14:07:21 2015 UTC,"Matz, the creator of Ruby, is missing ! Here is his full story about Emacs"
emacs,34sjoc,ihatecatsandpeople,6,Mon May 4 06:05:42 2015 UTC,That was painful to click through...
emacs,34sjoc,ayakushev,1 point,Mon May 4 08:02:36 2015 UTC,"Great presentation, thanks for sharing!"
emacs,34sjoc,balkenbrij,3,Mon May 4 06:37:37 2015 UTC,I also like this page: http://wenshanren.org/?p=418. Apparently Skrillex uses Emacs to write his music.
emacs,34sjoc,Kaligule,2,Mon May 4 23:10:45 2015 UTC,"i read some its mailing list last night and on that many used emacs also. This must have been while it still was macro's on teco (1977!).  http://web.archive.org/web/20120226113808/http://www.avanthar.com/~healyzh/sysdoc/sysdoc.html  is a link to the docs for its, the mailing lists are a neat read."
emacs,34qkh2,ReneFroger,3,Sun May 3 18:08:18 2015 UTC,"This might be a bit too much for me.  With that said, I love it!"
emacs,34qkh2,statmobile,3,Sun May 3 22:39:20 2015 UTC,Don't forget to configure your Emacs as client-server. Instantly startup and all buffers available from another clients too.
emacs,34qkh2,trezor2,3,Sun May 3 23:48:59 2015 UTC,It's all text does the same for Firefox.  https://addons.mozilla.org/en-US/firefox/addon/its-all-text/
emacs,34qqmw,noobiemacs,8,Sun May 3 19:01:12 2015 UTC,"I'm not some crazy emacs hacker but IF IM UNDERSTANDING YOUR QUESTION RIGHT could you just ""C-x 2"", ""C-x 3"", and navigate to the bottom one and ""M-x eshell"", then ""M-x dired"" on the top left? I've never used file previews so, someone else would have to chime in on how to get that to work."
emacs,34qqmw,Colada,2,Sun May 3 21:10:41 2015 UTC,"Whoa, that's a question? You, sir or madam, are a better reader than I am."
emacs,34qqmw,Trevoke,1 point,Sun May 3 21:14:37 2015 UTC,"Something like that, but the shell (I'd prefer ansi-term) having the ability to follow dired navigation would be the selling point for me."
emacs,34qqmw,dzecniv,2,Mon May 4 01:56:31 2015 UTC,"I think I see what you mean.   Ok, begin by splitting the windows manually (we can remenber them with some packages). For the ranger mode:   I wrote a very simple mode to do that: https://gitlab.com/emacs-stuff/my-elisp/blob/master/dired-show.el It may be buggy because I don't use it much, only once in a while, so if it is or if you have other ideas I would be happy to write some elisp. Copy the code somewhere and try find M-x eval-buffer. Then open Dired, activate ranger-mode with M-x ranger-mode and should automatically see the file when you press n or p (not the arrow keys). in dired-hacks, there's a dired-ranger function http://melpa.org/#/dired-ranger but it's more about multi-copying and bookmarks, not file pre-visualization.   As for the shell window like Dolphin, I don't know how to make it follow your navigation, but there's a very handy package that does that, it is shell-pop: http://wikemacs.org/wiki/Shell#shell-pop (like guayadeque in Gnome). Press a key and the shell pops in or out at the right directory. shell-here is handy too."
emacs,34qqmw,mydraal,2,Sun May 3 22:23:21 2015 UTC,"to get the shell to follow navigation you can use the dired-after-readin-hook  something like this should work:  (add-to-list 'dired-after-readin-hook              (lambda ()                (let                    ((dir dired-directory))                  (other-window -1)                  (comint-delete-input)                  (insert (concat ""cd "" dir))                  (comint-send-input)                  (other-window 1))))"
emacs,34n2nt,abo-abo,12,Sat May 2 17:38:09 2015 UTC,It would be helpful if the page included some sort of description of what ivy-mode is for...
emacs,34n2nt,genehack,3,Sat May 2 18:28:04 2015 UTC,previous discussion  http://www.reddit.com/r/emacs/comments/331gqp/introducing_ivymode_or_emacs/
emacs,34n2nt,gonz808,2,Sat May 2 19:11:33 2015 UTC,"Ty for the great packages. I've replaced isearch with swiper.  Do you plan to allow out-of-order matching as a configurable option? I love out-of-order matching, especially when I don't have exact memory of the name I'm searching for."
emacs,34n2nt,Starlight100,6,Sun May 3 01:36:13 2015 UTC,Out-of-order matching now available: https://github.com/abo-abo/swiper/commit/ca91c88ca38a4f47d10430c73ad4ce8a85173b3d
emacs,34n2nt,syl20bnr,1 point,Sun May 3 14:40:20 2015 UTC,Argh so you lost the feature mentioned above :-(
emacs,34n2nt,ad1217,1 point,Sun May 3 19:26:27 2015 UTC,"Seems to be an option, so the default is still to search in order."
emacs,34n2nt,Starlight100,1 point,Sun May 3 23:40:39 2015 UTC,"The ""in-order"" feature was not lost. It's the default behavior.  Abo-abo implmented the matching as a configurable function, so there is no run-time check. There is no downside."
emacs,34n2nt,tuhdo,3,Mon May 4 02:19:04 2015 UTC,"He said it:   This is actually a feature. Out of order matching is surprising, I want people to understand exactly how the matching is done. And not wear their lucky hats just to get a match to what they guess is a good input.   source."
emacs,34n2nt,Starlight100,3,Sun May 3 04:47:49 2015 UTC,"Sure, I can add out-of-order as a custom option. I don't like to have it on by default."
emacs,34n2nt,syl20bnr,1 point,Sun May 3 06:58:40 2015 UTC,That would be awesome!
emacs,34ly7r,xuchunyang,1 point,Sat May 2 09:49:13 2015 UTC,Did you have a look at the built-in functionality in repeat.el? :)
emacs,34ly7r,monotux,1 point,Sun May 3 17:51:51 2015 UTC,"Yes, actually it requires  the repeat command."
emacs,34ly7r,monotux,1 point,Sun May 3 20:55:01 2015 UTC,"Ah, cool!"
emacs,34ly7r,typedweb,1 point,Mon May 4 05:20:25 2015 UTC,"Unrelated, but, I just bind C-x o to M-; and find that much faster and easier to switch windows."
emacs,34ly7r,instant_sunshine,1 point,Mon May 4 18:43:29 2015 UTC,"Agree, I bind other-window to M-o"
emacs,34ly7r,instant_sunshine,1 point,Mon May 4 19:04:47 2015 UTC,"C-x z   Repeats the last command, z after that continues the repeats."
emacs,34ly7r,CQQL,1 point,Thu May 7 16:03:58 2015 UTC,"I already know that. As its name (""easy-repeat"") says, it just make repeat (C-x z) a bit easier, for example, consider you want to switch window,  C-x o C-x o C-x o... C-x o C-x z z... C-x o o o..."
emacs,34jng0,un_salamandre,19,Fri May 1 18:46:08 2015 UTC,You can actually make that body of that function really simple:  (indent-region (point) (progn (yank) (point)))
emacs,34jng0,jordonbiondo,1 point,Fri May 1 19:08:20 2015 UTC,Mmm-mmm that's some good Lisp.
emacs,34jng0,pzone,3,Fri May 1 19:30:41 2015 UTC,"I... damn, this is exactly how I want things! Now I just actually gotta learn it... ;)"
emacs,34jng0,DasEwigeLicht,3,Wed Jun 3 10:52:43 2015 UTC,This is an excellent tutorial and helped me a lot when I was just starting out not too long ago.  And if you ever hear good things about vim and are tempted to switch over to the dark side check out evil-mode instead.  Have fun ;)
emacs,34jng0,GBGamer117,5,Fri May 1 19:54:08 2015 UTC,"As a regular vim and emacs user: vim is nice for small edits, but emacs with evil-mode is better for anything beyond that (especially for doing any plugin work: vimscript is fucking terrible, while lisp is really awesome)."
emacs,34jng0,DasEwigeLicht,2,Fri May 1 20:29:31 2015 UTC,"vimscript is fucking terrible,   I always keep hearing that. Can you elaborate what exactly makes it so terrible?"
emacs,34jng0,GBGamer117,3,Fri May 1 22:10:09 2015 UTC,"It doesn't do everything you'd like, and it's difficult to both read and write.  Edit: by ""it doesn't do everything you'd like"", I mean it's a scripting language, like bash, which means its difficult to work with."
emacs,34jng0,flarkis,1 point,Sat May 2 00:19:33 2015 UTC,"Almost exactly as I do, but I don't use evil. Vim is great for small edits but emacs for everything else."
emacs,34jng0,PinkCathodeCat,5,Sat May 2 01:39:02 2015 UTC,I never even dreamed of making this function and it is going to CHANGE MY LIFE.
emacs,34jng0,lokedhs,3,Sat May 2 15:23:27 2015 UTC,And this is why I use Emacs: for that feeling of elation when a problem you never knew you had is solved.
emacs,34jng0,nautola,2,Fri May 1 21:41:43 2015 UTC,"Your code assumes that save-excursion saves the mark as well. It used to do this, but was recently changed to only save point. You should probably save point prior to the yank and do the indent-region based on that value instead."
emacs,34jng0,nandryshak,1 point,Sat May 2 15:30:12 2015 UTC,Might this be better to implement by advising yank?
emacs,34jng0,pzone,1 point,Sat May 2 04:57:43 2015 UTC,"Nahh, too many things use yank, it could lead to some unexpected behavior."
emacs,34jng0,dddbbb,1 point,Fri May 1 22:19:45 2015 UTC,"Uhm, while excited at the premise of this working, now that I've actually started learning emacs and tried it out, it does not work for me yet. It just indents everything pasted to zero indentation! Am I doing something wrong?  Edit: It works unpredicatbly. In text-mode, it does as stated above. In c++-mode, it always indents to two spaces. c-mode aswell."
emacs,34jng0,instant_sunshine,1 point,Tue May 5 01:19:46 2015 UTC,"indent-region is a function to set the indentation to whatever Emacs thinks is correct.  This depends on the mode.  In text mode Emacs does not indent.  If you're in a c-type mode it should indent based on the surrounding text, e.g. increasing the indentation after curly braces.  If you want your paste-and-indent function to always increase the indentation level, you could use indent-rigidly-right or indent-rigidly-right-to-tab-stop."
emacs,34jng0,tuhdo,10,Sat May 2 15:14:00 2015 UTC,I'd guess that aggressive-indent-mode would do that:   aggressive-indent-mode is a minor mode that keeps your code always indented. It reindents after every command
emacs,34jng0,hvis,2,Wed Jun 3 11:00:20 2015 UTC,"Note /u/un_salamandre it will depend on the language, but if C-M-\ indent-region works (whole buffer when no region selected) aggressive-indent-mode is going to work too."
emacs,34jusp,JacksGT,11,Fri May 1 19:46:00 2015 UTC,"If it weren't for you liking the keybindings, I would have recommended Spacemacs. I'm still going to recommend it, but you might not like it. ;)"
emacs,34jusp,0dyss3us,9,Fri May 1 20:31:18 2015 UTC,"but seriously, you might like Better Defaults, Prelude, or others found here."
emacs,34jusp,0dyss3us,1 point,Fri May 1 20:33:36 2015 UTC,Thank you!
emacs,34jusp,many_cakes,4,Fri May 1 20:47:14 2015 UTC,You no longer need to use vim keybindings in Spacemacs :) Holy-mode goes back t stock emacs keybindings (tuhdo uses this all the time)
emacs,34jusp,0dyss3us,2,Fri May 1 20:51:14 2015 UTC,Oh okay. I've seen that mode around but never investigated. I'm a fan of the vim bindings.
emacs,34jusp,sadECEmajor,1 point,Fri May 1 21:26:05 2015 UTC,What does spacemacs offer besides the vim keybindings?
emacs,34jusp,tuhdo,2,Sun May 3 23:00:49 2015 UTC,"Preconfigured layers (a collection of packages tailored for a functionality), so for example if you want Clojure functionality, just add clojure layer without further configuration. This is especially meaningful for Emacs newbies. Fast startup time: with over 100 packages, Spacemacs starts in 1.5 second. Consistent and mnemonic key bindings. Beautiful UI. Support both Emacs ans Vim style. Emacs users can drop into Evil mode for quick text object commands with C-o. i3-like window manager. See this topic.   ... and more."
emacs,34jusp,sadECEmajor,1 point,Sun May 3 23:29:52 2015 UTC,"Thank you for your reply. Im debating giving it a shot. The things holding me back are, Im worried about how much time it will take to learn and productivity loss. Id really like to learn vim keybindings, but Im not sure how easy it will be after learning the emacs ones so well."
emacs,34jusp,tuhdo,1 point,Sun May 3 23:47:50 2015 UTC,"You can still using the Emacs key bindings for editing and C-o to execute Vim commands other than editing like text objects or folding. For example, while editing you can C-o ciw to delete a word at point and continue editing. Actually, learning and using text objects first is easier than learning Vim editing commands and more practical for us Emacs users. You can read more about text objects in this guide."
emacs,34jusp,many_cakes,1 point,Sun May 3 23:52:12 2015 UTC,"Like any starter kit, it has a lot of handy functionality built-in. It's also got an extension system called ""layers"", which is a nice way to keep track of the extensions you use. I'd encourage you to read the readme which will do a better job than me at explaining it :)"
emacs,34jusp,darthsuo,7,Mon May 4 06:00:11 2015 UTC,Consider Prelude. It's an Emacs distribution with many of the most common packages pre-installed and pre-configured.
emacs,34jusp,gsingh93,1 point,Fri May 1 20:31:55 2015 UTC,"Sounds good, thanks!"
emacs,34jusp,tuhdo,1 point,Fri May 1 20:47:03 2015 UTC,I didn't seriously start to use emacs until a friend showed me prelude. It's amazing.
emacs,34jusp,anatolya,5,Sat May 2 00:09:42 2015 UTC,"Try Spacemacs. You can see how it looks like in my other thread. Another screenshot on how Spacemacs looks like out of the box.  Seriously, it's the most user friendly and feature rich starter kit currently. It includes many popular packages so you don't have to rediscover yourself and fast start up time: over 100 packages with 1.5s. Spacemacs also includes many pre-configured layers from the community, so you don't have to configure yourself when you need to add new functionality into Emacs. For example, if you want to write Clojure, instead of manually downloading and configuring many packages, Spacemacs already does it for you. All you need to do is adding the layer to your .spacemacs file and enjoy it.  You also have a friendly chatroom whenever you are in trouble."
emacs,34jusp,RobThorpe,3,Sat May 2 05:45:11 2015 UTC,If you find prelude so opionated there is always purcell.
emacs,34jusp,RobThorpe,4,Fri May 1 22:35:18 2015 UTC,In my opinion it's best to start with Emacs as it comes.
emacs,34jusp,tuhdo,1 point,Sat May 2 10:14:44 2015 UTC,"I do agree with that. Especially at the beginning Emacs itself can be quite overwhelming and one shouldn't be distracted by other things.  I personally already got started with Emacs, now I'm just searching for some defaults / pre-configurations I like."
emacs,34jusp,RobThorpe,1 point,Sat May 2 10:58:12 2015 UTC,"I'll explain why I think this....  The starter packages come in two types.  Firstly, there are things like ""better defaults"", which was very simple.  In that case it's probably better to just read the better-defaults.el on the internet and nick the settings you like.  Secondly, there are the bigger startup packages like Prelude which change a lot more stuff.  Those have several problems in my opinion:   The Emacs manual is written for default Emacs. Suppose you read something in the manual, then apply it, and it doesn't work as expected. That could be because the defaults package changes how it works, or it could be because of a bug in Emacs. You can't tell without checking with emacs -q. Replies on mailing lists and forums are generally written assuming vanilla Emacs. This is the same sort of problem as above, people like me often write key sequences that assume vanilla Emacs. If you don't use vanilla Emacs you've often got to translate those yourself. Using lots of 3rd-party packages introduces a maintenance problem. Some of the authors give up on their packages. Sometimes changes in Emacs make those packages no longer compatible with the current Emacs version. Then you have to stop using it or find a replacement. This problem could apply to any of the packages that the default set loads in. If you have several computers you use regularly then any changes need applying to all of them.  The big, successful packages, like Magit, Company and Yasnippet will always be be maintained, it's the little ones that are the problem. So why not just install the major ones and save yourself the hassle? What about using other people's computers? If Emacs is on them then it can be useful to use it, but you have to know how to use vanilla Emacs.  I think the OP understand this problem. Many of the big default packages make some weird decisions. Take Emacs Prelude. It binds C-x m to M-x shell. Usually C-x m is message mode for sending mail. Sending mail is a very useful feature of Emacs, there's no reason to discourage it's use. (Of course M-x shell is a very useful feature too and it or term should have a keybinding). Then there's the fact that prelude-mode binds almost everything in the C-c KEY keymap. That keymap is reserved for users. Over time most users will find things of their own that they want in that keymap. Keybindings that are created by the user for his or her own private use cases are often the most useful."
emacs,34jusp,tuhdo,2,Sat May 2 14:20:31 2015 UTC,"The Emacs manual is written for default Emacs. Suppose you read something in the manual, then apply it, and it doesn't work as expected. That could be because the defaults package changes how it works, or it could be because of a bug in Emacs. You can't tell without checking with emacs -q.   I think most Emacs starter kits and external packages preserve default key bindings, except for some esoteric features that no new users would use it anyway.   Replies on mailing lists and forums are generally written assuming vanilla Emacs. This is the same sort of problem as above, people like me often write key sequences that assume vanilla Emacs. If you don't use vanilla Emacs you've often got to translate those yourself.   The users can still ask the author(s) of the starter kits and even join the community (i.e. Spacemacs gitter chatroom) to get support. Emacs mailing list is not the only way, and it could be worse because many people there probably don't use external (useful) packages.   Using lots of 3rd-party packages introduces a maintenance problem. Some of the authors give up on their packages.    It's true, but I trust Emacs backward compatibility. I ran some Emacs code unmaintained from Emacs 23 (or even 22) and it worked without any problem.   Then you have to stop using it or find a replacement   Or people can just add a minor compatibility change without throwing the whole package. The fact that a user has to find a replacement which means there's a valid need that stock Emacs cannot provide.   What about using other people's computers? If Emacs is on them then it can be useful to use it, but you have to know how to use vanilla Emacs. I think the OP understand this problem.   Then, that's the case with customizing your own vanilla Emacs, especially if you write your own stuffs to handle your own use case. Of course, learning stock Emacs is useful for situation like this but it's not a valid reason to avoid external packages.   Many of the big default packages make some weird decisions. Take Emacs Prelude. It binds C-x m to M-x shell. Usually C-x m is message mode for sending mail. Sending mail is a very useful feature of Emacs, there's no reason to discourage it's use. (Of course M-x shell is a very useful feature too and it or term should have a keybinding). Then there's the fact that prelude-mode binds almost everything in the C-c KEY keymap. That keymap is reserved for users. Over time most users will find things of their own that they want in that keymap. Keybindings that are created by the user for his or her own private use cases are often the most useful.   You can think it the other way around: instead of users have to bind those C-c <key> themselves, Prelude already did it. If they don't like anything, they can just rebind. Prelude just provides a convenient way for utmost new users to try out Emacs features (both internal and external) before they know what they actually need."
emacs,34jusp,dzecniv,2,Sat May 2 15:41:30 2015 UTC,"I don't have as strong feelings about this as I do about Git, so I'll probably only reply once.  It's interesting to talk to you though, as ever.   I think most Emacs starter kits and external packages preserve default key bindings, except for some esoteric features that no new users would use it anyway.   No they don't.  ""Better defaults"" is the simplest starter kit, it's only a couple of pages of code.  Even it rebinds C-s and C-r, it makes them regex searches and makes C-M-s and C-M-r the regular variants (""Emacs-starter-kit"" does the same).  Prelude-mode doesn't alter much, but think about how confusing this is: it changes C-M-\ to mean ""Indent region (if selected) or the entire buffer"".   The users can still ask the author(s) of the starter kits and even join the community (i.e. Spacemacs gitter chatroom) to get support. Emacs mailing list is not the only way, and it could be worse because many people there probably don't use external (useful) packages.   Even here on Reddit replies generally use the assumption of vanilla Emacs.  If a user says ""I'm using X starter kit"" often the replies ignore that.  On Stackexchange vanilla Emacs is assumed too, 90% of the time it makes no difference of-course.  If questions are posted that are too far off the beaten track then often there are no good replies.  Neither Reddit, Stackexchange or help-gnu-emacs are big communities, I can't imagine that the starter kits have bigger communities.   The users can still ask the author(s) of the starter kits and even join the community (i.e. Spacemacs gitter chatroom) to get support. Emacs mailing list is not the only way, and it could be worse because many people there probably don't use external (useful) packages.   I've had problems in the past, I have a few modes I wrote for Emacs 22 that don't work now.  Also, one of the problems that's arisen recently is dependencies.  Often packages rely on other packages, there's nothing wrong with that it can be good for modularity.  The problem comes if one package depends on version A of package X and another package depends on version B of package X.   Or people can just add a minor compatibility change without throwing the whole package.   Perhaps there's an easy way to make something work, but not always.   The fact that a user has to find a replacement which means there's a valid need that stock Emacs cannot provide.   It can still be a problem if the package that lasts works in a completely different way to the one you've chosen.  It's the nature of text editing that there are few ""needs"" and many wants.  Notepad is a text editor.  Things don't get replaced if others no longer believe that a problem is there.  There are fashions, features are considered ""essential"" for a while, a lot of code is written for them, some of which stays around.  Then people move on to the next ""essential"" thing and the process starts again.  The fashions aren't entirely arbitrary, often they come from other editors and IDEs.  For example, lots of people these days are accustomed to fixed window layouts.  Also lots of people switch tasks often, so we have lots of packages for those things that at present.  Slick demos in other editors encourage people to copy features into Emacs too.   Then, that's the case with customizing your own vanilla Emacs, especially if you write your own stuffs to handle your own use case. Of course, learning stock Emacs is useful for situation like this but it's not a valid reason to avoid external packages.   But with a starter kit how do you know where Emacs ends and where external packages begin?  Just knowing where that line is is very useful.   You can think it the other way around: instead of users have to bind those C-c <key> themselves, Prelude already did it. If they don't like anything, they can just rebind. Prelude just provides a convenient way for utmost new users to try out Emacs features (both internal and external) before they know what they actually need.   I'm sure you know how difficult it is to unlearn a keybinding after you've learned it, that's part of the problem.  I also don't think that newbies will be confident about rebinding.  We know the line between Emacs and the starter kits.  That means we know that rebinding C-c <key> is generally no problem.  We also know that rebinding things in the C-x keymap can be a bit troublesome because different modes use it for different things.  For example, C-x C-q isn't very useful in normal editing, but it's very useful in Dired.  The same could be said about the C-c C-<key> keymap.  Newbies won't necessarily get that."
emacs,34jusp,excitedaboutemacs,1 point,Sun May 3 22:18:01 2015 UTC,And then newbies start using Git and they either leave Emacs for another editor with Git integration or install magit to start loving Git anyway. And more packages that provide superior experience compared with what stock Emacs can offer.
emacs,34jusp,tuhdo,2,Sat May 2 10:28:44 2015 UTC,We have 4 listed here: http://wikemacs.org/wiki/Starter_Kits
emacs,34jusp,tuhdo,2,Sat May 2 07:46:35 2015 UTC,You like the general concept? You are 90% there.  You like the keybindings (I assume default) of emacs? You are 150% there! Well done.
emacs,34jusp,pzone,2,Fri May 1 19:55:07 2015 UTC,Why spend hours looking for sane defaults rather than minutes setting them yourself?   M-x customize-*
emacs,34jusp,laydros,1 point,Sat May 2 09:40:26 2015 UTC,"Sane ""defaults"" including useful packages out there, that would take hours to install and configure properly, not to mention a complete new Emacs users without any Elisp knowledge."
emacs,34k8f1,tunabee,4,Fri May 1 21:40:38 2015 UTC,"The melpa package has been removed, but it was mainly workarounds for old Emacs versions. Just follow the MELPA getting started instructions and all will be good."
emacs,34k8f1,purcell,1 point,Sat May 2 09:08:02 2015 UTC,"What melpa package? AFAIK there is no ""melpa"" package. I assume he is just saying that you can add any package that is on melpa through show-packages."
emacs,34k8f1,mordocai058,1 point,Fri May 1 22:19:37 2015 UTC,He mentions it here: http://youtu.be/Cf6tRBPbWKs?t=7m6s
emacs,34k8f1,mordocai058,1 point,Fri May 1 22:36:01 2015 UTC,"Hmm,  yeah. No idea. Probably doesn't exist anymore"
emacs,34k8f1,cenazoic,1 point,Fri May 1 23:14:49 2015 UTC,"(for reference, this is about melpa-upstream-visit).  I actually asked @melpa_emacs about this a few weeks ago when I was going through jekor's (awesome) videos.  T he package was last updated in 2013, and MELPA says they've never used it.   I haven't noticed any issues with not installing it."
emacs,34meba,evan_xy_hu,7,Sat May 2 13:47:37 2015 UTC,"Not sure if its just me or I read it somewhere, but I read those bindings as x-ecute f-ind x-ecute s-ave etc.  Things like saving and opening a file are actions you probably do once every 1000 editing actions. So placing them on desirable bindings like C-f and C-s is a waste. So putting them all under a C-x prefix makes sense when you think about designing a slew of defaults."
emacs,34meba,jordonbiondo,1 point,Sat May 2 13:54:00 2015 UTC,that makes it easier to remember and sound reasonable to me. thanks.
emacs,34meba,extremeanger,5,Sun May 3 01:14:07 2015 UTC,"I love emacs and have used it since 1987.  However, asking why it's default key bindings are one way or another is a lot like asking for a full dump of Richard Stallman's neural connections.   Learn to love the power and ignore the arbitrariness - the zen of Emacs."
emacs,34meba,workisnotfun,1 point,Sat May 2 16:18:05 2015 UTC,You are a lucky guy for using emacs so many years. Cheers for that.
emacs,34meba,typedweb,1 point,Sun May 3 01:45:03 2015 UTC,Personally I'm using the key chord package and for finding a file I type the characters ;f together and for saving files ;s (you type them together really fast).
emacs,34meba,RobThorpe,1 point,Fri Jul 3 01:40:21 2015 UTC,"I think I read somewhere once that the Emacs keyboard layout was actually designed by Guy Steele, but I'd be hard pressed to find a reference to that."
emacs,34meba,kcin,4,Mon May 4 18:45:06 2015 UTC,"Part of the reason for C-x is that it's treated as one character by the keyboard. The next thing is treated as a second character. So, that second character can be anything. It can be a character by itself, like d or it can be C-d or M-d.  ""C-x"" and in-fact C-anything is treated as one character and some terminals use some of those characters for internal purposes. That's why on most terminal emulators even today you can't use C-' & C-#. So, C-something is restricted, but C-x something is not. On modern terminals Alt is sent as a separate character, so it doesn't have that problem that Ctrl has. However, on the systems the original Emacs was written on keyboard characters were 9-bits and Alt worked the same way as Ctrl and had similar limitations.  This is described in the manual for TECO Emacs if anyone is interested."
emacs,34meba,borodino,1 point,Sun May 3 10:40:05 2015 UTC,A new area for me to know. Thanks.
emacs,34l56v,yourabi,3,Sat May 2 02:57:13 2015 UTC,You'll need to set your TERM to 'xterm-256color' to get proper colorization.
emacs,34l56v,spec_bebop,1 point,Sat May 2 03:12:29 2015 UTC,"Thanks, but it is already set to that.  echo $TERM  xterm-256color"
emacs,34l56v,fullets,2,Sat May 2 05:11:18 2015 UTC,"Yes! This works for me, but with a bunch of caveats - I've only set up Solarized Terminal.app colours on my laptop which is at work, I use the light theme but I'm sure it works for dark too, it's been ages since I started a TTY emacs rather than a TTY session of a NS emacs - yeah, they behave differently :( - but I'm sure it worked last time I tried, and I don't use 24.5.1 but just compile off master every week. That said, here's what works for me. It's not a minimal change to do what you want, but rather my entire init.el section for Solarized :) If it doesn't work for you sing out and I'll have a look Monday.  I'm pretty sure the secret sauce is setting xterm-standard-colors to be the actual terminal colours rather than just assuming they're what they ""should"" be.  https://gist.githubusercontent.com/anonymous/10dfa1fb4c88fe37bdda/raw/de15f45668fbd18ad5673cad025b51a268f38f9c/gistfile1.el  Double edit: oops, coding in the gist editor is bad lol. my solarized-assume-solarized-terminal hack is actually different to what the comment in that gist says, here's my solarized-definitions.el in its entirety:  https://gist.github.com/anonymous/cc9eab92e199f974903f"
emacs,34l56v,purcell,1 point,Sat May 2 09:12:41 2015 UTC,Known issue. See https://github.com/bbatsov/solarized-emacs/issues/18
emacs,34l56v,st3fan,1 point,Sat May 2 09:03:46 2015 UTC,"Why not use iTerm.app instead? Isn't it superior wrt colors? (I'm asking, not suggesting .. i'm curious if Terminal.app is on par now in 10.10)"
emacs,34jne0,yellowviper,1 point,Fri May 1 18:45:42 2015 UTC,Sounds like a bug report might be in order. Probably to CEDET.
emacs,34jne0,hvis,1 point,Fri May 1 23:50:19 2015 UTC,"What's your Emacs version? If your Emacs is 24.3 or older, consider upgrading it to get newer CEDET."
emacs,34jne0,tuhdo,1 point,Sat May 2 05:31:21 2015 UTC,"I have tried it variously on 24.4, 24.5 and the snapshot for 25. I feel I am missing some condiguration parameter perhaps. Do you have your config somewhere tuhdo? I mostly followed your guide.   Also on a side note, your theme is awesome. I would love to try it."
emacs,34jne0,tuhdo,1 point,Sat May 2 14:43:34 2015 UTC,"The above error seems like the semantic DB is somehow corrupted. Try deleting your ~/.emacs.d/semanticdb. However, before trying that, you should run toggle-debug-on-error and wait for error to happen and paste the backtrace here. Otherwise try company-semantic to see if the error remains still and only happens with function-args.   Also on a side note, your theme is awesome. I would love to try it.    It's a modified version of monochrome theme. You can find mine here."
emacs,34jne0,tuhdo,1 point,Sat May 2 16:39:56 2015 UTC,"I only get a backtrace when company mode fails and its a huge backtrace with references to the semanticdb.   Here is the first part   Debugger entered--Lisp error: (wrong-type-argument stringp (((0) (0) ""uct_ud_ep_addr_t"")))   compare-strings("""" 0 nil (((0) (0) ""uct_ud_ep_addr_t"")) 0 0 nil)   #[(table prefix &optional tags) ""HGY\306\n\206K@\307K!!\310\211Z\2034@\311H\312\310\n@\211]@)\312  N\f&G\313=\203-@\n@\fBT\nA\211R\204S@\f\237+\207"" [prefix l tags table result tag semantic-something-to-tag-table semanticdb-get-tags nil compare-strings 0 t semantic-case-fold] 9 ""In TABLE, find all occurrences of tags matching PREFIX.\nOptional argument TAGS is a list of tags to search.\nReturns a table of all matching tags.""]([object semanticdb-table ""ud_ep.h"" [object semanticdb-project-database-file ""ud/"" ""/home/habbasi/work/ucx/src/uct/ib/ud/"" semanticdb-table nil ([object semanticdb-table ""ud_ep.c"" #1 c-mode ((""ud_ep.h"" include nil (:filename ""/home/habbasi/work/ucx/src/uct/ib/ud/ud_ep.c"") #<overlay from 117 to 135 in ud_ep.c>) (""ud_iface.h"" include nil (:filename ""/home/habbasi/work/ucx/src/uct/ib/ud/ud_ep.c"") #<overlay from 136 to 157 in ud_ep.c>) (""ud_inl.h"" include nil (:filename ""/home/habbasi/work/ucx/src/uct/ib/ud/ud_ep.c"") #<overlay from 158 to 177 in ud_ep.c>) <.. lots of tags here>   semanticdb-find-tags-collector(#[(table tags) ""\303H \n#\207"" [table prefix tags semanticdb-find-tags-for-completion-method] 4] nil nil)   semanticdb-find-tags-for-completion("""")   semantic-analyze-find-tags-by-prefix("""")   company-semantic-completions-raw("""")   company-semantic(candidates """")   apply(company-semantic (candidates """"))   company-call-backend-raw(candidates """")   apply(company-call-backend-raw (candidates """"))   company--force-sync(company-call-backend-raw (candidates """") company-semantic)   company-call-backend(candidates """")   company--fetch-candidates("""")   company-calculate-candidates("""")   company--begin-new()   company--perform()   company-auto-begin()   company-manual-begin()   company-complete()   call-interactively(company-complete nil nil)   command-execute(company-complete)"
emacs,34jne0,tuhdo,1 point,Sun May 3 03:11:52 2015 UTC,"I actually pulled your entire .emacs.d and tried the same problem from there. Your configuration doesn't get the errors I see, but it also sometimes doesn't find the completion.   Is it possible that my project is far too complicated for semantic? I can't imagine its anywhere near the linux kernel in complexity though.   I also pulled the devel branch of CEDET from git and used that. I am going to through your configuration and figure out where things diverge enough for me to see the errors.   Thanks for the help though!"
emacs,34htzr,tuhdo,3,Fri May 1 07:32:16 2015 UTC,Oh that's very nice. I've been using i3 for years and this could be helpful.
emacs,34htzr,MikeSeth,1 point,Fri May 1 10:27:15 2015 UTC,Looks pretty cool.
emacs,34j54q,jhirn,2,Fri May 1 16:22:27 2015 UTC,"It's not exactly what you're looking for, but you might be interested in Tern:   Tern is a stand-alone code-analysis engine for JavaScript. It is intended to be used with a code editor plugin to enhance the editor's support for intelligent JavaScript editing. Features provided are:   Autocompletion on variables and properties Function argument hints Querying the type of an expression Finding the definition of something Automatic refactoring    Tern comes with a utility to generate JSON files in its own format from Typescript files:   bin/from_ts Given a typescript .def.ts file, will attempt to convert it to a Tern-style JSON definition file."
emacs,34j54q,ccharles,1 point,Fri May 1 17:12:24 2015 UTC,I am working on tide (https://github.com/ananthakumaran/tide). The installation procedure is bit cumbersome right now as it depends on unreleased code.
emacs,34hx8j,zk_phi,1 point,Fri May 1 08:25:09 2015 UTC,"Looks nice. I wanted to write an actual Google docs client once, but the API just wasn't good enough.   How easy is it to get this to work? Do you need to open ports in your router and stuff?"
emacs,34hx8j,BruceConnor,1 point,Fri May 1 08:47:02 2015 UTC,"Set address/port to listen to and allow Emacs to use the port (open the port and/or modify firewall settings as needed), then other clients can access to your buffer with the address/port."
emacs,34hx8j,bzg,1 point,Fri May 1 09:13:02 2015 UTC,"Works nicely, thanks!  Any plan to support a web client at some point?"
emacs,34hx8j,metaperl,1 point,Fri May 1 09:40:42 2015 UTC,not for now. (but contributions are welcome!)
emacs,34iyg3,jhirn,3,Fri May 1 15:30:15 2015 UTC,"Hi /u/jhirn! Great question! You're totally on the right track.  You can see from the output that the face being used is link. Now that we know that we can run M-x customize-face RET link RET and use the customization interface to change the color.  On that customization screen you'll an attribute called 'Foreground' and a box with a hex value representing the color. If you know hex colors you can type one in directly. Alternately, click the Choose button to the right and you'll get a menu of colors. After you've found something you like, use the Apply button to test it out, or use the Apply and Save button to save it for all future sessions. (If you're not using graphical Emacs you won't be able to click the buttons, but you can still tab through them and use RET to invoke them.)  Hope that helps!"
emacs,34iyg3,camdez,1 point,Fri May 1 19:00:06 2015 UTC,"Nice.. thanks!  ""Face"" was the magic word I was looking for.   I use customize all the time then save and copy the output of custom.el to my actual config. Favorite way to cheat!"
emacs,34i8i5,UberLambda,1 point,Fri May 1 11:25:15 2015 UTC,How did you install it? Did you try with:  (require 'powerline)   before setting the theme?  I recomend you to use use-package to install and load packages.
emacs,34i8i5,chomati,1 point,Fri May 1 14:34:49 2015 UTC,"I used package-install from the MELPA repos, and I did indeed require powerline.  After reloading Emacs the bar appeared somehow, but it featured no ""triangular terminations"". Could this be due to the wrong font being used? I thought Emacs rendered them without the need for a patched font."
emacs,34i8i5,ducketh,1 point,Fri May 1 18:11:11 2015 UTC,"The version of powerline in MELPA doesn't have a evil-color-theme. I found a package that does, that also is in MELPA -- did you install and require powerline-evil?  This particular issue is something I've been working on... I found all the powerline/evil integration packages to be a bit lacking."
emacs,34i8i5,ducketh,1 point,Fri May 1 22:20:49 2015 UTC,"I installed powerline-evil and called powerline-evil-vim-color-theme. Now the modeline has colors, but still no triangular shapes..."
emacs,34i8i5,ducketh,1 point,Sat May 2 08:03:14 2015 UTC,"That's a matter of configuration; the theme can use the triangles, or a bunch of other shapes, or use symbols from a patched font (mostly for terminal support). However, it SHOULD be the default...  ...Right, yes, are you using GUI Emacs? In a terminal, you still need a patched font."
emacs,34i8i5,WallyMetropolis,1 point,Sat May 2 08:56:26 2015 UTC,"I'm using GUI Emacs, yes. And, BTW, is it normal for the bar to use a non-monospaced font? Because it does on my install :/"
emacs,34e7xt,tuhdo,1 point,Thu Apr 30 12:50:41 2015 UTC,"This is great! Frequently I need to compare a Git directory with an SVN directory (mostly just as a sanity check). Just tried with ztree-diff and it's perfect.  One question - when comparing directories I have:  Orphan file - does not exist on the other side   The color code for orphan files is the same color as subdirectories - even though the contents of those directories show as identical. Is there a way to show, at the directory level, if two subdirectories are identical or have mismatched without expanding them?"
emacs,34e7xt,boolDozer,1 point,Thu Apr 30 19:01:09 2015 UTC,"I did not write this, but I can explain.  file here does not only mean file but also directory. The logic is simple:   If you see the orphan color, which means that entry - either file or directory - is added. However, if two directories of the same name have some file in common but different in content, then the directories are marked as mismatch color. For this reason, if you see something with orphan color, it's guaranteed that only the side that contains the orphan item (file or directory) has it and not the other side. If two files are identical, then normal color is applied."
emacs,34e7xt,boolDozer,1 point,Thu Apr 30 20:12:33 2015 UTC,"That makes sense, thanks for clarifying.  I think my confusion came along because the difference in the directories was hidden files (one had a .gitignore, one didn't). So it does, in fact, show the status correctly for both files and directories - which is great!"
emacs,34e7xt,furych,2,Thu Apr 30 21:21:08 2015 UTC,"Author here, actually it is a bug since if the directory differs only by ignored files, they should be represented as without differences. I've reported it as a bug https://github.com/fourier/ztree/issues/15"
emacs,34e7xt,furych,1 point,Fri May 1 13:41:04 2015 UTC,Update: it is done now
emacs,34e7xt,stack_pivot,1 point,Sun Jul 5 12:20:03 2015 UTC,I'm a regular user of the built-in ediff-directories. Any idea what improvements this offers over that?
emacs,34fjzc,codemac,3,Thu Apr 30 18:52:30 2015 UTC,"Solved it!  (setq cm/using-rc t) (defun cm/advise-shell-quote-argument (fun &rest args)   (if cm/using-rc       (concat ""'"" (replace-regexp-in-string ""'"" ""''"" (if (listp args) (car args) args) t t) ""'"")     (apply fun args)))  (advice-add #'shell-quote-argument :around #'cm/advise-shell-quote-argument)   This doesn't support dynamic shell detection, because that's hard to do when you don't know who is calling shell-quote-argument. I really wish this was a function that took which shell to quote as an argument, and a fallback when that option was not specified was this kind of default behavior.  For now, cm/using-rc I'll set to true when my emacs.el boots up."
emacs,34fjzc,RobThorpe,2,Fri May 1 02:48:16 2015 UTC,Between read-shell-command and shell-command I can't find where this escaping is occurring :/
emacs,34fjzc,RobThorpe,2,Thu Apr 30 21:14:16 2015 UTC,"I expect this new shell will only be useful in M-x shell mode.  The main time when Emacs populates commands is when using M-! and M-|.  There's no reason why M-! and M-| shouldn't continue using bash.  So, customize only ""explicit-shell-file-name"" to the new shell, leave ""shell-file-name"" as bash."
emacs,34dfp0,hairlesscaveman,4,Thu Apr 30 06:45:05 2015 UTC,Use the system-type variable to set variables depending on your OS.  E.g.  ; Use the right option key as control on a Mac ; and use command as meta. (when (equal system-type 'darwin)   (setq mac-right-option-modifier 'control)   (setq mac-command-modifier 'meta))
emacs,34dfp0,preavy,1 point,Thu Apr 30 12:07:39 2015 UTC,"I use something like this:  (load (format ""window-%s"" (window-system)))   or   (load (subst-char-in-string ?/ ?- (format ""platform-%s"" system-type)))   That way, I can put platform-specific things into window-w32.el, window-mac.el, etc. I try to keep most things common and then put just a few things into those files."
emacs,34dfp0,redblobgames,1 point,Thu Apr 30 17:40:12 2015 UTC,Steve purcell use Mac but his setup also works on windows/Linux.  https://github.com/purcell/emacs.d
emacs,34dfp0,redguardtoo,-1,Fri May 1 01:19:18 2015 UTC,get a vmware vm that is under linux / whatever and use that vm for development
emacs,34dfp0,leftrightupdown,1 point,Thu Apr 30 06:51:32 2015 UTC,"Unfortunately that won't be possible. I'm hooking into a number of windows tools, the Linux barrier would cause issues.  Also, Linux uses the same keyboard as windows, so it won't really help much anyway."
emacs,349c5d,instant_sunshine,7,Wed Apr 29 09:40:12 2015 UTC,"I'd suggest displaying the branch name instead of ok and !. The color can still be used to convey status, and knowing the branch is pretty important."
emacs,349c5d,BruceConnor,5,Wed Apr 29 11:24:24 2015 UTC,"Branch is already displayed, you don't see it here because the windows are too narrow. (wasn't the point of the demo, see the other posts recently.)  The position and even final style of these icons is far from final, just another demo.    In fact, to be 100% clear,  NONE of what is being demo'ed in these modelines is anywhere near finalised, I'm simply developing these ideas out in public.  Edit: To address your point, please see the bottom mode line in this demo image, right side. http://i.imgur.com/1LfdIOd.png ... branch is displayed in green."
emacs,349c5d,Mysticity,5,Wed Apr 29 15:46:53 2015 UTC,"Update  Please note, if you have feature requests, please add them as issues here.   https://github.com/ocodo/ocodo-svg-modelines/issues/  Code will be moved here shortly."
emacs,349c5d,excitedaboutemacs,2,Thu Apr 30 01:43:44 2015 UTC,"Just a work in progress, a lot of work to do before this is how I want it."
emacs,349c5d,mac,1 point,Wed Apr 29 09:41:00 2015 UTC,Looks really good. Convinced me to get emacs-mac for the svg. Which theme is this in your repo? Using the minimal one for now.
emacs,349c5d,mac,1 point,Wed Apr 29 10:28:41 2015 UTC,"All the themes are in the repo.  There's a branch under development which will be migrated to a new repo shortly, watch   edit: https://github.com/ocodo/ocodo-svg-modelines"
emacs,349c5d,Biotechjones,1 point,Wed Apr 29 15:57:22 2015 UTC,Will this work with Emacs 24.3?
emacs,349c5d,DasEwigeLicht,1 point,Wed Apr 29 15:03:49 2015 UTC,"It will work with any Emacs build which has proper SVG support.  I recommend Emacs-mac-port on OSX.  I will be doing some tests on Linux at the weekend, however I'll be testing with 25.x"
emacs,34asa7,Rod_Ikana,2,Wed Apr 29 17:43:20 2015 UTC,Have you tried the aggressive-indent package?
emacs,34asa7,kaushalmodi,1 point,Wed Apr 29 20:55:44 2015 UTC,"I tried installing it from list-packages but apparently one of the dependencies is no up to date, ill try to install it manually."
emacs,34asa7,paulcam,2,Wed Apr 29 21:33:30 2015 UTC,"What language? If you're working in C/C++, you should check out hanging braces."
emacs,34asa7,RobThorpe,1 point,Wed Apr 29 21:30:04 2015 UTC,I'm working with JavaScript.
emacs,349779,ReneFroger,8,Wed Apr 29 08:21:53 2015 UTC,"For a more lightweight and internal solution, you can use `auto-insert-alist'. ex: https://github.com/pierre-lecocq/emacs.d/blob/master/emacs.el#L397-423  Edit: add the code directly  (setq auto-insert-alist       '(((ruby-mode . ""Ruby program"") nil          ""#!/usr/bin/env ruby\n\n""          ""# File: "" (file-name-nondirectory buffer-file-name) ""\n""          ""# Time-stamp: <>\n""          ""# Copyright (C) "" (substring (current-time-string) -4) "" "" auto-insert-copyright ""\n""          ""# Description: "" _ ""\n\n"")          ((emacs-lisp-mode . ""Emacs lisp mode"") nil          "";;; "" (file-name-nondirectory buffer-file-name) "" --- "" _ ""\n\n""          "";; Time-stamp: <>\n""          "";; Copyright (C) "" (substring (current-time-string) -4) "" "" auto-insert-copyright ""\n\n""          "";;; Commentary:\n\n""          "";;; Code:\n\n""          "";;; "" (file-name-nondirectory buffer-file-name) "" ends here\n"")         ((c-mode . ""C program"") nil          ""/*\n""          "" * File: "" (file-name-nondirectory buffer-file-name) ""\n""          "" * Time-stamp: <>\n""          "" * Copyright (C) "" (substring (current-time-string) -4) "" "" auto-insert-copyright ""\n""          "" * Description: "" _ ""\n""          "" */\n\n"")         ((shell-mode . ""Shell script"") nil          ""#!/bin/bash\n\n""          "" # File: "" (file-name-nondirectory buffer-file-name) ""\n""          "" # Time-stamp: <>\n""          "" # Copyright (C) "" (substring (current-time-string) -4) "" "" auto-insert-copyright ""\n""          "" # Description: "" _ ""\n\n"")))"
emacs,349779,piotr404,3,Wed Apr 29 08:30:14 2015 UTC,"What does your .emacs look like? I cant see the pastebin link at work :(  Edit: Im more wondering how do you customize the look? Like where do you write (insert-year) and where do you decide the format of what shows up and how, etc."
emacs,349779,lab_emacs,2,Wed Apr 29 14:39:41 2015 UTC,"(defun insert-date ()   ""Insert current date dd-mm-yyyy.""   (interactive)   (insert (format-time-string ""%d-%m-%Y"")))   (defun insert-year ()   ""Insert current year.""   (interactive)   (insert (format-time-string ""%Y"")))    And to customize it:   http://emacs.stackexchange.com/questions/11005/how-change-the-contents-of-a-package-header2-el/11010#11010"
emacs,349779,lab_emacs,1 point,Thu Apr 30 06:36:43 2015 UTC,Thanks for your thorough reply. Its very helpful.
emacs,345vtl,tuhdo,2,Tue Apr 28 15:30:40 2015 UTC,nice.  is it possible to make it not change the position of existing horizontal splits?
emacs,345vtl,kill_jester,1 point,Wed Apr 29 08:07:18 2015 UTC,"If you want it that way, simply reuse Helm default for managing window configuration. It works exactly that way, but when you have two windows side by side, it opens Helm window in other window and many people don't like this."
emacs,345vtl,kill_jester,1 point,Wed Apr 29 09:29:11 2015 UTC,i find the helm default completely impossible to use. when you have 3 or more windows open it opens in a completely impossible to guess place.
emacs,345vtl,kill_jester,1 point,Wed Apr 29 09:35:20 2015 UTC,"Yes hence this change to make it more like Ido, so people are happy with it. You can reduce visual noise by setting helm-display-header-line to nil and reduce the window height by adjusting something smaller than 0.4."
emacs,345vtl,smooth_randy,1 point,Wed Apr 29 09:39:17 2015 UTC,"yes and it's almost perfect. I was just wanting to know if it's possible to make it not move existing horizontal splits.  say I have a frame with one horizontal split, window A on top and B on bottom, each 50% height.  I open up helm (window H), and it becomes A=30%, B=30%, H=40%. I want A=50%, B=10%, H=40%. is that possible?"
emacs,345vtl,ReneFroger,1 point,Wed Apr 29 10:11:46 2015 UTC,Without** Dag nabbit
emacs,345vtl,ReneFroger,1 point,Sat May 16 14:10:48 2015 UTC,"So the difference here is that you don't need the package popup anymore, in order to open the Helm window at the bottom?"
emacs,345vtl,cheezy64,3,Tue Apr 28 18:29:11 2015 UTC,Yes. And it fixed helm-swoop conflict with popwin. See this issue.
emacs,345vtl,aptmnt_,1 point,Tue Apr 28 18:34:29 2015 UTC,"Ah, that explains why this code could be useful instead the Popwin package. I use helm-swoop frequently. When I scroll through the candidates in helm-swoop, the point in buffer would follow along. Maybe I haven't updated helm-swoop yet."
emacs,346met,jjasghar,11,Tue Apr 28 18:43:18 2015 UTC,A description of what that is about would be nice.
emacs,345rey,jhirn,2,Tue Apr 28 14:57:44 2015 UTC,I have this issue if I use centered-cursor-mode. Sometimes point jumps to seemingly random places in the visible part of the current buffer when it happens.
emacs,345rey,ghostshell,1 point,Tue Apr 28 16:06:48 2015 UTC,"Thanks, but I don't have that in play.   I do think it's related to a conflict of some sort though, just don't want to have to bisect my config =(."
emacs,345rey,ghostshell,1 point,Tue Apr 28 17:48:18 2015 UTC,"Yeah, I understand your woes. I ended up splitting my config up into modules in order to facilitate easy debugging. After getting serious with a tiling window manager again I became reliant on Emacs frames instead of always using windows. One night I spent 5-6 hours debugging everything from top to bottom.   Another tip that might be helpful is to disable variable pitch in your theme or customized faces. My problems with centered-cursor-mode were more frequent when I had it enabled."
emacs,345rey,hvis,1 point,Wed Apr 29 08:36:57 2015 UTC,Should add latest version of emacs-mac-port and company out of melpa.
emacs,345rey,hvis,1 point,Tue Apr 28 15:08:27 2015 UTC,https://github.com/company-mode/company-mode/issues/272 ?
emacs,345by9,da-x,6,Tue Apr 28 12:45:58 2015 UTC,"If you really want to alter the default region highlighting, here is an example of how to do that.  The default is '(nil . 100), which you can set higher.  Overlays are different than font-lock and text-properties highlighting -- the priority relates to the former.  You can probably just change the variable redisplay-highlight-region-function that is within simple.el by redefining it with (setq . . .; however, I chose to take complete control by renaming the functions, variables and faces.  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;; redisplay  (defface lawlist-active-region-face   '((t (:background ""#3c3c3c"" :foreground ""white"")))   ""Face for `lawlist-active-region-face`.""   :group 'init)  (defvar lawlist-redisplay-unhighlight-region-function   (lambda (rol) (when (overlayp rol) (delete-overlay rol))))  (defvar lawlist-redisplay-highlight-region-function   (lambda (start end window rol)     (if (not (overlayp rol))         (let ((nrol (make-overlay start end)))           (funcall lawlist-redisplay-unhighlight-region-function rol)           (overlay-put nrol 'window window)           (overlay-put nrol 'face 'lawlist-active-region-face)           (overlay-put nrol 'priority '(nil . 100))           nrol)       (unless (and (eq (overlay-buffer rol) (current-buffer))                    (eq (overlay-start rol) start)                    (eq (overlay-end rol) end))         (move-overlay rol start end (current-buffer)))       rol)))  (defun lawlist-redisplay--update-region-highlight (window)   (with-current-buffer (window-buffer window)     (let ((rol (window-parameter window 'internal-region-overlay)))       (if (not (region-active-p))           (funcall lawlist-redisplay-unhighlight-region-function rol)         (let* ((pt (window-point window))                (mark (mark))                (start (min pt mark))                (end   (max pt mark))                (new                 (funcall lawlist-redisplay-highlight-region-function                          start end window rol)))           (unless (equal new rol)             (set-window-parameter window 'internal-region-overlay                                   new)))))))  (defun lawlist-redisplay--update-region-highlights (windows)   (with-demoted-errors ""lawlist-redisplay--update-region-highlights: %S""     (if (null windows)         (lawlist-redisplay--update-region-highlight (selected-window))       (unless (listp windows) (setq windows (window-list-1 nil nil t)))       (if highlight-nonselected-windows           (mapc #'lawlist-redisplay--update-region-highlight windows)         (let ((msw (and (window-minibuffer-p) (minibuffer-selected-window))))           (dolist (w windows)             (if (or (eq w (selected-window)) (eq w msw))                 (lawlist-redisplay--update-region-highlight w)               (funcall lawlist-redisplay-unhighlight-region-function                        (window-parameter w 'internal-region-overlay)))))))))  ;; simple.el -- lines 4683 to 4684 (remove-function pre-redisplay-function #'redisplay--update-region-highlights)  (add-function :before pre-redisplay-function #'lawlist-redisplay--update-region-highlights)  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
emacs,345by9,lawlist,1 point,Tue Apr 28 21:34:50 2015 UTC,"Thanks! At first it didn't work, but a few days later I realized that (nil . 100) is a tuple of priority and a secondary priority, and priority there is really null. Just changing 100 didn't do any good (see compare_overlays in src/buffer.c) - but once I changed the nil to something else, e.g. (1000 . 100) it started working like charm (although not for trailing-whitespace highlight, but for the other things, which is good enough for me)."
emacs,343k18,kabbotta,12,Tue Apr 28 00:51:22 2015 UTC,"As well as Yasnippet there is Skeleton which is described in the Emacs autotype manual. I don't think it's any better than Yasnippet though and I've heard Yasnippet has some advantages.  You can use things like:  (global-set-key (kbd ""C-c h"") 'here-skeleton)   To set keys.  I find though that it's best to use a per major mode approach, so there can be different things in each mode.  (define-key texinfo-mode-map (kbd ""C-c h"") 'my-skeleton)   For each major mode I use a lot I have various skeletons attached to keybindings beginning with C-c."
emacs,343k18,RobThorpe,4,Tue Apr 28 02:00:40 2015 UTC,"Here's a few examples of skeletons  (define-skeleton work-html-clip-message-excel-html-sheet   ""Put in a message telling the reader of the HTML file to refer   to the other files.""   nil   > ""<tr>"" ?\n   > ""<td>"" ?\n   > ""Table clipped to save space, see the xlsx file or plt file."" ?\n   > ""</td>"" ?\n   > ""</tr>"" ?\n   > ""</table>"" ?\n   > ""</body>"" ?\n   > ""</html>"" ?\n)   The first string in the form is a comment.  The second is a question to ask the user, ""nil"" means none.  The rest of the strings are inserted into the buffer.  The "">"" means reindent according to mode.  Here's an example using the current kill:  (define-skeleton work-html-link-triple   ""Insert a html string providing a set of links to results.""   nil   '(setq v1 (substring-no-properties (current-kill 0 t)))   > ""<a href=\"""" v1 "".plt\"">plt</a>"" ?\n   > ""<a href=\"""" v1 ""_p.xlsx\"">xlsx</a>"" ?\n   > ""<a href=\"""" v1 ""_p.htm\"">html</a>"" ?\n)   ""v1"" is one of the default variables used inside skeletons.  It's also possible to prompt the user for input, e.g.:  (define-skeleton work-html-regname    ""Insert a html string giving a link to a particular set of    register settings in the Reg_Settings.html file.""    ""Regname: ""    > ""<a href=\""Reg_Settings.html#""    str ""\""><span class=\""reg\"">"" str ""</span></a>"" ?\n)   ""str"" means ""the reply the user gave to the question if there was one""."
emacs,343k18,RobThorpe,1 point,Tue Apr 28 09:49:20 2015 UTC,"I find define-skeleton to be much easier than YASnippet, and it's built-in."
emacs,343k18,redguardtoo,19,Tue Apr 28 05:15:55 2015 UTC,"yasnippets is the best solution.  see http://blog.binchen.org/posts/debug-efficiently-in-emacs.html  The key points:   you can embed lisp in snippets use kill ring   btw, by default, yasnippet will scan your own snippets under ""~/.emacs.d/snippets/"", check my blog post, already lots of samples there."
emacs,343k18,eric-plutono,1 point,Tue Apr 28 02:03:15 2015 UTC,Thank you - just the kind of information I needed.
emacs,343k18,124816,3,Tue Apr 28 03:24:36 2015 UTC,I second the suggestion of /u/redguardtoo to use YASnippet.  You may find useful user-created snippets on GitHub too.
emacs,343k18,wainstead,3,Tue Apr 28 04:23:22 2015 UTC,"Bind some key to insert. I used to use yasnippet but I updated it once and it stopped working.  Tip: output ""here at "" __FILE__ "":"" __LINE__ instead of just ""here""."
emacs,343k18,sauntcartas,2,Tue Apr 28 00:58:48 2015 UTC,"Not mentioned here yet: registers. I have a set of command line incantations that I use semi-frequently and don't want to type out by hand.  Example:  (set-register ?a ""begin; select public.my_stored_proc(123456, '127.0.0.1'); commit;"")   This is something (slightly sanitized) I type periodically into psql. When I'm at the prompt and need to insert it it's just a matter of typing   C-x r i a   Registers are many shades of awesome. I use window-configuration-to-register a lot.  https://www.gnu.org/software/emacs/manual/html_node/emacs/Registers.html"
emacs,343k18,wainstead,2,Wed Apr 29 15:07:52 2015 UTC,"If you use desktop-save-mode (which you should, it's awesome), you don't even need to set the registers in Elisp.  Just store text into them normally with C-x r s, and when you exit Emacs, all your registers are saved, to be restored when you launch again."
emacs,343k18,diversionist,1 point,Wed Apr 29 18:32:13 2015 UTC,I've used desktop-save-mode for years and didn't know that!  I wrote a file to save the contents of all shell buffers to files as well:  https://github.com/wainstead/swainlisp/blob/master/desktop-auto-save.el
emacs,343k18,ReneFroger,1 point,Thu Apr 30 15:34:36 2015 UTC,"There is also the auto-insert-mode, which allows to insert some content into new buffers automatically on creation."
emacs,343k18,diversionist,1 point,Tue Apr 28 04:55:52 2015 UTC,You mean this?
emacs,343k18,ReneFroger,1 point,Tue Apr 28 07:29:47 2015 UTC,Almost. It's the http://www.emacswiki.org/emacs/AutoInsertMode
emacs,344we6,cestdiego,2,Tue Apr 28 09:24:04 2015 UTC,"If you mean the part where he opens new window, then yes there are indirect buffers, and NarrowIndirect probably imitates that experience the best.  Regarding multiple modes in a single buffer: I don't believe that anything comes close to it at the moment. Some more promising packages known to me are:  mmm-mode  polymode  lentic  Sorry for leaving them descriptionless, but I feel that my attempts won't give them justice, having not revisited them for so long."
emacs,344we6,myeffort,1 point,Wed Apr 29 00:24:50 2015 UTC,"on't give them justice, hav   Thanks! I think I see the value in the lentic package now :)"
emacs,344we6,BruceConnor,1 point,Wed Apr 29 03:32:13 2015 UTC,"This might be useful for templating languages, also when in angular projects you have stuff like:  ```javascript  myModule.directive(‘directiveName’,  function ( ) {  return {  template: ‘<div>DOM in code!' + '<span>yes</span>' + '</div>'  };  } );  ```"
emacs,344we6,kcin,1 point,Tue Apr 28 09:30:41 2015 UTC,"Writting a command that edits the current string in a separate buffer and activates another major-mode should be very straightforward. Automatically detecting that major-mode would take some work, I think."
emacs,343y50,shackra,2,Tue Apr 28 02:44:42 2015 UTC,You can use request.el to get the currency exchange rates.
emacs,343y50,tetheno_,2,Tue Apr 28 15:42:25 2015 UTC,"I'm not sure org-mode is ideal for this task.  But you could certainly create an exchange rate table and name it with e.g. #+TBLNAME: CurrentExchangeRatio,  and then access values (fields, rows, columns) in it with remote references:  http://orgmode.org/manual/References.html  (Note: the documentation there is incorrect and ""#+TBLNAME:"" (works) should be used, not ""#+NAME:"" (doesn't work) for remote references.)  But that approach has these two drawbacks:      You'll have to update your ""CurrentExchangeRatio"" table manually.  (Unless someone else has a suggestion for live updating.) You'll have to re-evaluate each table that uses the remote references to that table, every time the values change.   So, it's not really a good solution from a ""live update"" perspective."
emacs,343y50,forked_tongue,1 point,Tue Apr 28 15:52:30 2015 UTC,"What's your tolerance for latency and accuracy?  In other words, is this for fun or will money decisions be made from this data?"
emacs,343y50,tzz,1 point,Tue Apr 28 09:56:47 2015 UTC,I have no problem with those things :)
emacs,343y50,tzz,1 point,Tue Apr 28 17:54:35 2015 UTC,"Currency rates are either very static or very dynamic depending on your purpose and timescale.  If you want today's rate for a currency pair and don't mind a little inaccuracy, there are many online services for it.  If you want this second's accurate rate, you need a paid feed.  It depends on your purpose.  For your stated purpose, yeah, any free service will do it.  Yahoo and Google finance had them as an API, and you can web scrape or call a million others.  Just look at a Google search for ""currency exchange API""."
emacs,3422xc,grok_life,14,Mon Apr 27 18:23:18 2015 UTC,"As org-mode makes excessive use of the C-c prefix key I fear the best ""solution"" is to throw cua-mode out of the window and use native Emacs key bindings."
emacs,3422xc,locbrean,7,Mon Apr 27 18:52:54 2015 UTC,"As an emacs user for 1 year making use of full cua-mode, I recommend you to avoid it as much as you can, if you don't want to face this sort of problems in the future. If you still persist in using cua-mode, you can just press C-c C-c and the keybinding you want."
emacs,3422xc,Acktung,6,Mon Apr 27 19:33:59 2015 UTC,"I don't mean to sound like a jerk, but it's only a few minutes of training to learn C-w / M-w / C-y, and it's very much worth it.  You'll most likely spend hours and hours trying to ""fix"" the org-mode behaviour to accommodate CUA mode. And then you'll encounter the next major mode you want to learn and repeat the procedure all over again.  C-c is a very, very busy key in Emacs."
emacs,3422xc,monotux,6,Mon Apr 27 20:09:38 2015 UTC,Counter-point: I've been using Emacs for thirteen years with full CUA mode - org mode is the only one that gives me trouble.
emacs,3422xc,dr_theopolis,6,Tue Apr 28 03:42:46 2015 UTC,"Whoa, that puts things in another perspective. I've used Emacs for a similar amount of time (since 2003) but I didn't even consider using CUA mode.   Just out of curiosity, why do you use CUA? If you've used it for this long I guess it's for a reason."
emacs,3422xc,monotux,1 point,Tue Apr 28 04:57:49 2015 UTC,"Way back when I started I transitioned from visual studio to Emacs. CUA key bindings were very natural to me. I never bothered to make the switch.  I still think about switching form time to time, but then again, I also think about trying out evil mode..."
emacs,3422xc,dr_theopolis,1 point,Tue Apr 28 16:13:19 2015 UTC,Why not simply try them out? Evil mode is pretty fun. :)
emacs,3422xc,monotux,2,Tue Apr 28 17:28:47 2015 UTC,"I'd consider that if it was possible to live in emacs all the time, but I have to use other systems, and not always ones that I'm able or willing to reconfigure to emacs shortcuts."
emacs,3422xc,its_never_lupus,2,Tue Apr 28 16:39:56 2015 UTC,"Well, it's not like you'll simply forget how to use the CUA bindings as soon as you start using the Emacs bindings instead. It's really not an issue.   Your fingers has a pretty good muscle memory, and can easily learn to master a lot of things. I'm a dvorak typer (10+ years) but I can still switch to qwerty mid-sentence without loosing all my typing speed. I still type faster in qwerty than most people do. When changing keyboards it only takes a few minutes before you learn to find the new keys consistently.  The same goes with learning keyboard bindnings. Yes, I use Emacs a lot but I've switched from CUA bindings, to vim bindings, back to Emacs and back to vim again. It's not hard, you just have to practice a little."
emacs,3422xc,monotux,3,Tue Apr 28 17:27:52 2015 UTC,This is from my .emacs file:  (setq org-CUA-compatible t)
emacs,3422xc,mega_volt,1 point,Mon Apr 27 22:00:15 2015 UTC,I'm aware of the pros & cons of cua-mode vs C-w / M-w / C-y. I've used both ways but I trended towards cua-mode for consistency with OS keystrokes. I like org-mode & Emacs in general but I guess this is an example of me having to bend to the will of Emacs vs the other way around. :-\
emacs,3422xc,chrispoole,3,Mon Apr 27 20:27:25 2015 UTC,"Certainly not. You just need to obtain a list of the functions you want to use key bindings for, and bind them to different keys.  However, it would be fewer lines to write to simply rebind CUA mode mappings."
emacs,3422xc,catern,2,Tue Apr 28 06:39:17 2015 UTC,"On OS X and Linux you can set text boxes to have emacs keybindings, if you want consistency :)"
emacs,3422xc,its_never_lupus,1 point,Tue Apr 28 13:41:09 2015 UTC,I didn't know that.  This could be a good solution.
emacs,3422xc,its_never_lupus,1 point,Wed Apr 29 03:24:11 2015 UTC,"I took all the commands I actually use and rebound them inside a new ""C-d ..."" prefix map, and keep C-c for just copy.  Stallman would probably have palpitations if he saw my .emacs file."
emacs,3422xc,smt520,1 point,Tue Apr 28 16:37:13 2015 UTC,This is helpful. Can I prefix with Meta-<something> or C-u then use the C-c binding of org mode?
emacs,3422xc,smt520,1 point,Wed Apr 29 03:29:35 2015 UTC,"The only method I know is rebinding each command individually.   It would be nice if there was a simple way to reassign the C-c ... and C-x ... prefix maps to another key, because that would help in creating newcomer-friendly configurations. But I don't know if there is a n existing way to do it."
emacs,33zaq5,guti495,13,Mon Apr 27 01:14:55 2015 UTC,"auctex is the answer!  (well, my answer, at least)  Once you set it up, you can get up to speed (at the least) by just learning maybe 4 or 5 shortcuts. Let me know if you need help!"
emacs,33zaq5,mkartic,1 point,Mon Apr 27 03:52:12 2015 UTC,"I have used auctex, but I don't think I've used any of its shortcuts (except for the keystrokes to compile and view the output). Can you elaborate?"
emacs,33zaq5,Artcfox,7,Mon Apr 27 05:21:11 2015 UTC,"Another auctex user here. I use C-c C-f C-<foo> all the time, where <foo> gets substituted for t (typewriter), c (smallcaps) e (emphasis/italic), and b (bold). I also use C-c C-e to insert environments frequently, and in itemize or enumerate environments, also C-c C-j to insert new items.  Strangely enough however, I don't use the compile/view commands, I keep a separate terminal open for compiling/shell access/debugging and a regular evince instance for viewing. I guess modifying that workflow is on my TODO.org..."
emacs,33zaq5,wasabichicken,1 point,Mon Apr 27 06:10:24 2015 UTC,"Thanks for the heads-up about C-c C-e! I'm surprised that you'd use a separate evince instance, though. Why not just an auto-reverting doc-view buffer?"
emacs,33zaq5,AnalysisSitus,2,Mon Apr 27 07:52:49 2015 UTC,C-u C-c C-e will also change the surrounding environment.
emacs,33zaq5,kikaerter,1 point,Thu Apr 30 06:28:20 2015 UTC,"Old habit, I guess. Back in the day when I started LaTeX'ing in Emacs, it was still just any other editor to me: a tool for editing text, not doing OS'y stuff like running commands or acting a window manager."
emacs,33zaq5,wasabichicken,1 point,Mon Apr 27 07:56:13 2015 UTC,"That's fair enough. :) I just find doc-view pretty adequate for moving around the output, and being able to easily windmove to it is nice. Also regarding errors, really do try auctex' compile error reporting if you haven't already. It's significantly better than plain pdflatex output for me, with coloring, suggestions, and being able to view the errors separately."
emacs,33zaq5,AnalysisSitus,2,Mon Apr 27 08:01:07 2015 UTC,Could you write a quick note about how you enable/use doc-view and the error reporting from auctex? I'm not sure how to enable it or use it.
emacs,33zaq5,great_bushybeard,1 point,Mon Apr 27 09:53:36 2015 UTC,"Sure! doc-view should be enabled in newer versions of emacs. To use it, just open a .pdf-file in a buffer. If it's not rendered after a few moments, it might not be in view mode, but in edit mode. If so, tap C-c C-c to toggle it. At times you need to toggle it back and forth. As you can tell, I'm not really an expert on why. Once it renders, however, you can navigate using arrow keys (there is probably a better way, but this is what I use), and go to next or previous page using n/p. If you want to go to a specific page, use M-g M-g (or M-g g - it's the same shortcut as ""go to line"" in plain emacs) , enter the page number and press enter.  The one thing which you probably want to configure if you use doc-view to keep track of LaTeX output is that out of the box, doc-view doesn't ""track"" changes in the document. That is, if you edit your document and recompile it, you'd need to reload it (can be done through C-c C-c twice, or by actually killing and reopening the buffer) to actually see those changes.  Of course, that's painful, so you can turn on what is called auto-revert-mode, which tells emacs to reload buffers whenever they change on disk. You can do this for all kinds of buffers, but it's perhaps most relevant here. To enable it, use M-x auto-revert-mode in your doc-view buffer. That turns it on (well, toggles it on/off) for that particular buffer, so when you recompile your file, it will reload. If you want to avoid having to type it every time, put the following in your init.el:   (add-hook 'doc-view-mode-hook 'auto-revert-mode)   This enables auto-revert-mode for all doc-view buffers.  As to auctex error reporting, I haven't used it enough to say for sure, but here is my best shot. Once you have auctex installed, typing C-c C-c you get to enter a command. Type ""LaTeX"". This compiles the document for you, and the minibuffer will tell you if that went well or not. If there are errors, it will say ""LaTeX errors in <your file>. Use C-c to display."" If so, C-c will open a new buffer with that error displayed in a readable way, as well as (sometimes) a piece of advice on what might cause it. If there are several errors, you can use the command again to go to the next error. (You do need to use the command in your LaTeX buffer every time, though.)  One thing to note is that for some people, emacs hates using the key as a shortcut. If typing C-c only leaves you with the minibuffer reading ""C-c S-dead-grave-"", hitting space will ""complete"" the `, executing the command. It was kind of a pain to keep doing this, though, so you can bind some key to the function TeX-next-error and use that binding instead if you want. If this is not a problem for you, of course, you can ignore this paragraph.  I hope this clear things up!"
emacs,33zaq5,AnalysisSitus,1 point,Mon Apr 27 10:55:42 2015 UTC,"I use latexmk (latexmk -pvc -pdf file.tex) with evince(linux) or Skim(osx). It compiles on save, including when any dependencies are updated, so you're document is always updated."
emacs,33zaq5,great_bushybeard,1 point,Mon Apr 27 09:47:08 2015 UTC,"Woah! This is going to totally change how I write LaTeX. Typically what I've done before is type everything in by hand, and then copy/paste when I want to add something that I've added before. Thanks!"
emacs,33zaq5,Artcfox,1 point,Mon Apr 27 16:17:13 2015 UTC,"two things that are not really auctex, but It took a long time until someone told me and I think this might be a good place to put it in this thread   latex-pane-preview-mode. This is great for a single file latex document (since it can't handle master files). It splits the emacs window and automatically updates the doc-view when you change the file. It also marks compilation errors (One can do this manually, but this mode sets it up automatically). TeX-source-correlate-mode  and TeX-evince-sync-mode. If you use those two, you can do a Ctrl click in the evince-pdf file and your pointer will jump to the point in the source file in emacs. When you compile you'll see a red frame  in the pdf around the current position of the pointer.   The best for me would be a pane mode that can deal with master files and more importantly the syncing is awesome when you review a document."
emacs,33zaq5,Jay_bo,6,Tue Apr 28 10:25:30 2015 UTC,"The big one for me is the ability for it to auto-render math, and then when the point goes inside the math, it turns it back to latex. Amazing for papers with lots of blocks of equations, or when you are using some small inline equations"
emacs,33zaq5,bradfordmaster,1 point,Mon Apr 27 06:14:26 2015 UTC,Could you elaborate on how that is done?
emacs,33zaq5,AnalysisSitus,4,Mon Apr 27 07:53:23 2015 UTC,"Previews in AUCTeX are rendered by preview-latex which provides several key bindings to generate previews for parts of the document (C-c C-p something) or the whole document (C-c C-p C-d). If you then move the point on one of the previewed parts and press one of the keys defined in preview-auto-reveal, you'll automatically get the raw TeX instead of the preview."
emacs,33zaq5,mine0,1 point,Mon Apr 27 08:31:56 2015 UTC,"this feature never bothered me, i have evince. The way you've described it makes it seem more useful though, do you still have to compile the document though? Or does it constantly compile as soon as changes are made or something. cheers"
emacs,33zaq5,__baxx__,2,Mon Apr 27 13:20:18 2015 UTC,"It's actually been a while since I've used this, but I think I was using auctex and preview-latex, described here http://psung.blogspot.com/2009/08/auctex-and-preview-latex.html?m=1"
emacs,33zaq5,bradfordmaster,3,Mon Apr 27 15:59:31 2015 UTC,"C-c C-e as others have pointed. As an example, just try C-c C-e table and watch the magic! You can fill in everything from the table's caption to the inner table's format all from the minibuffer."
emacs,33zaq5,mkartic,1 point,Mon Apr 27 10:02:36 2015 UTC,Beautiful. Thanks!
emacs,33zaq5,Artcfox,12,Mon Apr 27 16:23:47 2015 UTC,"Depending on what you are using LaTeX for, you might consider something like Pandoc and write in a less overhead format (such as Markdown) and just use a Makefile to build everything."
emacs,33zaq5,dmoonfire,18,Mon Apr 27 01:15:56 2015 UTC,Why go to Markdown when org-mode is built-in?
emacs,33zaq5,NBEnt_the_Fourth,10,Mon Apr 27 01:43:13 2015 UTC,"Org-mode also works very well. I just bridge a few systems that were already Markdown friendly (Pandoc, Jekyll, my publishing build system). I also like the aesthetics of Markdown over org-mode.  The best thing is to try a few things and see which one works out. As Larry Wall says, there is more than one way to do things."
emacs,33zaq5,dmoonfire,6,Mon Apr 27 01:50:44 2015 UTC,"Pandoc is the way to go. Markdown to LaTeX template acceptable for humanities (Chicago-ish) worked perfectly for most of my grad coursework. With relatively simple shell scripting, I've also used it to generate a blog and  my multi-file thesis.  Since I'm now using emacs, I believe pandoc-mode provides facilities that could eliminate some of my scripting needs."
emacs,33zaq5,bgbgbg666,1 point,Mon Apr 27 01:56:52 2015 UTC,"Seconding (thirding? fourthing?) the pandoc recommendation. It does a surprisingly nice job at converting to docx format on those occasions when you need to share a Word file.  A couple other tips…  First, if you use biblatex for bibliographies, you'll need to use pandoc's command-line flags to makes sure your references get included in the docx file.  This example from StackExchange is a handy illustration:  pandoc -o test.docx test.tex --bibliography References.bibtex --csl apa5.csl   You'd replace References.bibtex with your bibtex/biblatex references file and 'apa5.csl' with the path to the CSL file containing the reference style you want. You can download the CSL file for just about any bibliographic style you can imagine from Zotero's style repository.  Second, if you're viewing the PDF output of your LaTeX outside of Emacs, as opposed to in an Emacs buffer, Skim is the Mac PDF program I've found that does the best job of automatically detecting each time you export changes to the PDF file and re-displaying the updated contents."
emacs,33zaq5,professed,3,Mon Apr 27 15:21:25 2015 UTC,"I'm in college write now, so writing essays and taking notes is what I'm mostly using it for.  Also want to use beamer and make some power points.  But sometimes I feel overwhelmed by the amount of packages. So would like to have a handful of layouts (templates) that I could reference and build off those."
emacs,33zaq5,dmoonfire,4,Mon Apr 27 01:32:22 2015 UTC,"I'd still look at Pandoc. It looks like it was written for a lot of those things including doing presentations via S5. It uses a template system for styles and styling but still masks a lot of the LaTeX details.  And writing in Markdown is pretty simple.  Not that going direct to LaTeX is bad, it just has a learning curve. A fun one, but depends on you interest."
emacs,33zaq5,vermiculus,1 point,Mon Apr 27 01:47:06 2015 UTC,"What's your field of study? I may be able to provide you with my notes if they're applicable.    And about the number of packages, if you hop into chat on TeX.SX, I'm sure we'd be glad to point you in the right direction given your various situations :)"
emacs,33zaq5,vermiculus,1 point,Mon Apr 27 02:00:52 2015 UTC,"I am a computer science major, so there are times when mathematical symbols come into play. I have lingered at Tex.SX for some small issues, but have not really roamed the website for more.  I'll give it a more  extensive look now that you have suggest it."
emacs,33zaq5,vermiculus,5,Mon Apr 27 03:29:43 2015 UTC,"We're really nice :) My own thesis (output) might be an interesting example for you to look at, but it's much more geared to longer-form writing (being a thesis, I guess). If you want, I can send you some example homeworks and papers that I wrote in CS.  (I was CS/Math double myself, for all intents and purposes.)"
emacs,33zaq5,vermiculus,1 point,Mon Apr 27 03:36:39 2015 UTC,That would be great! feel free to do so.
emacs,33zaq5,kaushalmodi,1 point,Mon Apr 27 03:46:21 2015 UTC,"I'm preparing a gist :) Going through all of my old TeX documents………I'm realizing how much I've learned in a few years! Catching lots of mistakes – some little, some not – in my older work."
emacs,33zaq5,vermiculus,1 point,Mon Apr 27 04:27:49 2015 UTC,"looking at old work is always the best.  I think about every-time when people question me about emacs.  I've customize it to my likening, so it really isn't torture, as other have mentioned it to be."
emacs,33zaq5,kaushalmodi,2,Mon Apr 27 17:07:18 2015 UTC,"That's one of the great/quirky things about emacs :) I've heard it aptly described as a build-your-own editor --- building it is hard work but, once you're finished, it's so nice."
emacs,33zaq5,vermiculus,1 point,Mon Apr 27 17:19:33 2015 UTC,"Did you ever not need to have a code block (listing) split across multiple pages? I needed to, and had to hack ox-latex.el to support that."
emacs,33zaq5,kaushalmodi,1 point,Mon Apr 27 17:43:48 2015 UTC,I did (and do) all my authoring in LaTeX directly. Only my document sketches are done in Org mode these days :) Never had a problem with listings being split up because I always floated them.
emacs,33zaq5,deong,1 point,Mon Apr 27 17:47:30 2015 UTC,You'd have this problem if the num of lines in a listing are more than a page can fit; think of 5 pages long listing for example :)
emacs,33zaq5,vermiculus,1 point,Mon Apr 27 18:30:08 2015 UTC,Just a plain ole' lstlistings works for me: https://www.overleaf.com/2619569tysxjz#/6908280/
emacs,33zaq5,harrisjayjamall,1 point,Mon Apr 27 19:20:33 2015 UTC,"Ah, OK, I am trying to make the listings work nicely when used with minted and mdframed  I have this in my org files but I need to hack the ox-latex.el a bit for that to work  #+LaTeX: \BeforeBeginEnvironment{minted}{\begin{mdframed}} #+LaTeX: \AfterEndEnvironment{minted}{\end{mdframed}}"
emacs,33zaq5,cpaulik,3,Mon Apr 27 19:35:08 2015 UTC,"As a CS major, I'd just bite the bullet and learn LaTeX directly. It's pretty easy to get to a productive level of basic writing in a few hours, and then you just look stuff up online when you need to do a specific thing you don't remember. If you're a book person, I keep a copy of the Kopka and Daly book by my desk. It's quite good as a reference.  The package thing is always an ongoing process. You'll pretty quickly end up with dozen or so that you use a lot and just include nearly everywhere, but you'll never really get past the point of occasionally browsing CTAN looking for some very specific thing you haven't needed before.  One other tip: use xelatex instead of latex or pdflatex. You get support for actual unicode glyphs, so you can type ""Reykjávik"" instead of ""Reyj\'{a}vik"", and you can just reference the OTF fonts your Mac has installed for everything else directly."
emacs,33zaq5,bakuretsu,1 point,Mon Apr 27 11:27:06 2015 UTC,"learn LaTeX directly   Definitely! It may be difficult at first if you try to work under pressure / don't came it at with the right perspective, but it's surely worth it to author in LaTeX directly. So much more freedom (when you are confident you have the typographical sense to use it ;)).  XeTeX is also fantastic :) LuaTeX is also gaining more and more steam, but I've yet to seriously use it. Both natively support Unicode and system-installed font selection through the fontspec package."
emacs,33zaq5,jringstad,2,Tue Apr 28 00:42:07 2015 UTC,do it latex is awesome
emacs,33zaq5,BruceConnor,2,Mon Apr 27 13:41:51 2015 UTC,If you are looking for latex templates then https://www.overleaf.com/latex/templates has a nice collection. They are also useable without writing on their platform.
emacs,33zur0,Mysticity,5,Mon Apr 27 04:23:26 2015 UTC,"I had the same issue, i tried building librsvg which also needs XQuartz, but i still didn't manage to get brew to build emacs with the  with-rsvg option.  For now i installed emacs-mac port, which seems to have svg support."
emacs,33zur0,apod,1 point,Mon Apr 27 07:00:00 2015 UTC,I did try the emacs-mac port for a short while. The behavior of the meta-key being the command-key was off putting. Guess I will go for it and change that first if I really want SVG.
emacs,33zur0,apod,2,Mon Apr 27 09:13:46 2015 UTC,You can change the behavior of the command and option key by setting mac-command-modifier and mac-option-modifier:  (setq mac-command-modifier 'super       mac-option-modifier 'meta)   This will set command key as super and option key as meta.
emacs,33zur0,st3fan,2,Mon Apr 27 10:05:54 2015 UTC,What kind of cool things can one do with SVG support? How about some screenshots?
emacs,33zur0,prometheus_flame,1 point,Mon Apr 27 19:18:19 2015 UTC,"I am just starting to explore SVG in emacs but this is the thread which pushed me to do so: r/emacs minimal SVG mode line   I am now using emacs-mac from railway cat. After restoring the functionality of the super key in that, it is a pretty good port."
emacs,33zur0,yuppienet,1 point,Tue Apr 28 02:20:22 2015 UTC,"I was also trying the svg-mode-line themes the other day, and ran into the same problem. The option you are looking for is   --with-librsvg   You can find homebrew options for emacs easily with the command:  brew options emacs   Hope that helps.   I just reinstalled emacs with the option and it worked for me.  Regarding the svg-mode-line-themes, did you install it over melpa? Otherwise you may need to install xmlgen."
emacs,33zur0,instant_sunshine,1 point,Mon Apr 27 10:17:26 2015 UTC,"Can you share more details of your emacs version ? I tried to test the svg-mode-line themes with my brewed emacs and it doesn't seem to work completely: there is a gradient in the modeline but no banana for kawaii-light.  Here is mine:  brew info emacs                                                                                                                            ✹ ✭master emacs: stable 24.5 (bottled), devel 24.5-dev, HEAD https://www.gnu.org/software/emacs/ /usr/local/Cellar/emacs/24.5 (3923 files, 119M) *   Built from source with: --with-cocoa, --with-imagemagick, --with-librsvg From: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/emacs.rb ==> Dependencies Build: xz ✔, pkg-config ✔ Optional: d-bus ✘, gnutls ✘, librsvg ✔, imagemagick ✔, mailutils ✘, glib ✔"
emacs,33zur0,prometheus_flame,2,Mon Apr 27 11:35:00 2015 UTC,"I would strongly recommend using Emacs-Mac port.   It uses WebKit to do svg rendering.  Emacs + Librsvg doesn't seem to be able to get external resources IIRC.  I think there is a fix in Emacs 25, /u/wasamasa posted something about this."
emacs,33zur0,Aresure,1 point,Mon Apr 27 13:01:38 2015 UTC,"I have the same emacs version as you, and I also don't get a bannana. The ocodo-svg-mode-line.el does work for me."
emacs,33xola,curious-scribbler,13,Sun Apr 26 17:09:57 2015 UTC,I wrote draft-mode some time ago after reading a thread about some hemingway writing web-app IIRC.  https://github.com/gaudecker/draft-mode
emacs,33xola,schmidthuber,2,Sun Apr 26 19:39:17 2015 UTC,Here we go. Thank you for writing this package. I'd be willing to drop the self-control demands for this. I guess one needs discipline or a deadline. I'll sort one out.
emacs,33xola,tty-tourist,1 point,Sun Apr 26 19:51:38 2015 UTC,"Nice! I been looking for something like this, too. Can be used with org-mode if you narrow-to-subtree (C-x n s) before activating ..."
emacs,33xola,tuhdo,8,Sun Apr 26 20:10:32 2015 UTC,"You may find this Emacs for Writers guide helpful.  You may find writeroom useful. Here is how it looks like (the screenshot is actually darkroom, another similar package). You can get in on MELPA."
emacs,33xola,peter-salazar,1 point,Sun Apr 26 19:25:06 2015 UTC,Looks like the link is broken.
emacs,33xola,lawlist,3,Wed May 27 06:11:14 2015 UTC,"Start with text-mode.  To customize Emacs to your liking, you are going to need to do quite a bit of customizing using elisp (i.e., a little [or a lot of] programming, even though you are not a programmer).  Start off slowly and customize Emacs a little bit each day -- each time you see something you are not happy with, Google for a solution and if you cannot find it, then post a question asking how to resolve that one particular issue.  Use a different text editor in the meantime and slowly wean yourself from that other editor as Emacs becomes more customized to your liking."
emacs,33xola,grabyourmotherskeys,3,Sun Apr 26 18:07:59 2015 UTC,"This does not answer your question but have you considered buying a typewriter? I bought mine about five years ago and it is one of my most cherished possessions. I can't think of anything else I've ever bought that I've loved so much. The time I spend working on my typewriter is a joy. It provides peace and clarity of mind. When I don't have anything to write, I'll still write my ""journal"" just to have that time.  Apart from the obvious freedom from distraction a typewriter affords, something to consider is that even if you attain all the typewriter-esque functionality from Emacs that you seek, the physical computer keyboard allows for much faster typing than a typewriter. A typewriter enforces a slower pace of moving through a sentence, which, for me at least, allows a more consistent flow of writing. On a computer keyboard, I find myself zipping through a sentence or clause, then pausing, then zipping through the next. This kind of staccato rhythm is very different to the steady hammering of mechanical keys, which I find much more enjoyable."
emacs,33xola,grabyourmotherskeys,2,Tue Apr 28 05:11:20 2015 UTC,What is your solution for getting stuff into an electronic format? Do you retype? Maybe this isn't an issue for you (genuinely curious).
emacs,33xola,instant_sunshine,2,Wed Apr 29 22:00:06 2015 UTC,"Some stuff remains forever on paper. Anything else is retyped at some point in redrafting, e.g. when I was at university I'd redraft essays repeatedly on paper then write in LaTeX the night before."
emacs,33xola,Erakko,1 point,Wed Apr 29 23:12:01 2015 UTC,"Thanks the reply. I tend to write more freely on paper but then I lose track of it, can't search it, etc. Typewriter isn't in the cards but I loved my Smith Corona in the early 90s. :)"
emacs,33w9rt,instant_sunshine,4,Sun Apr 26 06:00:44 2015 UTC,"http://i.imgur.com/DQwZ29C.png full image for better contextual viewing.   NOTE: this thread is just about the modeline, any feedback on the rest of the theme is off topic. (FYI the theme itself is sanityinc-tommorow-day)  Get the modeline work in progress from here : https://github.com/ocodo/.emacs.d/blob/svg-modeline-prototypes/plugins/ocodo-minimal-light-smt.el  (Sabof's svg-mode-line-themes is required, install it via melpa.)"
emacs,33w9rt,cestdiego,2,Sun Apr 26 06:03:48 2015 UTC,I LOVE THIS!! <3 I bet it won't be that long until one guy comes with nyan cat animated with svg frames though D: http://www.emacswiki.org/emacs/NyanMode (it actually looks like svg)
emacs,33w9rt,camdez,6,Sun Apr 26 09:54:32 2015 UTC,Figure I better get in front of it...  http://i.imgur.com/vwfDb3R.png?1  I'm sure a rainbow banana with a moustache is obscure and kawaii enough...
emacs,33w9rt,cestdiego,1 point,Sun Apr 26 14:44:45 2015 UTC,That is freaking stellar. Nice work.
emacs,33w9rt,syl20bnr,1 point,Sun Apr 26 17:18:43 2015 UTC,hahahah omg I want this in spacemacs sooo baaaaaad /u/syl20bnr :P is this even possible?
emacs,33w9rt,wasamasa,1 point,Sun Apr 26 17:52:01 2015 UTC,"Easily added   M-x package-install svg-mode-line-themes (via MELPA) wget https://raw.githubusercontent.com/ocodo/.emacs.d/master/plugins/ocodo-kawaii-light-smt.el Add a folder ~/.emacs.d/lisp Copy ocodo-kawaii-light-smt.el to ~/.emacs.d/lisp Add this to the end of your .spacemacs  (let ((default-directory ""~/.emacs.d/lisp/""))   (normal-top-level-add-subdirs-to-load-path))  (load-library ""ocodo-kawaii-light-smt"")   Then you're set, restart emacs and bathe in sugary cuteness of mustachioed bananas. Profit???"
emacs,33w9rt,sabof,1 point,Mon Apr 27 00:56:05 2015 UTC,"I don't know if there is any standard in emacs to install packages :P  But in develop branch there is a new variable dotspacemacs-additional-packages where you just put the package name and your config wherever you want (dotspacemacs/config recommended). The packages in this list don't need any layer to wrap them. This is a quick way to add packages, when it makes sense they can be moved to a layer."
emacs,33w9rt,wasamasa,1 point,Mon Apr 27 01:09:12 2015 UTC,"There's a long running convention, as outlined above.   (note, you can also use (require name) instead of (load-library) but that makes init.el dependent on the required library, making it necessary to force unload-feature C-u M-x unload-feature.)"
emacs,33w9rt,sabof,1 point,Mon Apr 27 01:28:11 2015 UTC,Read the elisp comment header... I also predict that too :)
emacs,33w9rt,sabof,1 point,Sun Apr 26 10:49:36 2015 UTC,"If you're refering to bitmap images, these don't work embedded in SVG unless you're on Emacs 25.1 or inline them. See #19373."
emacs,33w9rt,wasamasa,1 point,Sun Apr 26 16:40:18 2015 UTC,They did work for me. The issue you are referencing is more subtle.
emacs,33w9rt,sabof,1 point,Sun Apr 26 16:48:43 2015 UTC,Could you please elaborate on that?
emacs,33w9rt,wasamasa,1 point,Sun Apr 26 17:12:33 2015 UTC,How?
emacs,33w9rt,TheFrenchPoulp,1 point,Sun Apr 26 17:27:40 2015 UTC,There should be a working example in magic-buffer
emacs,33w9rt,sabof,1 point,Sun Apr 26 17:36:53 2015 UTC,"Section 13 doesn't display anything here, neither in Emacs 24.3, nor 24.4 or 24.5."
emacs,33w9rt,yuppienet,1 point,Sun Apr 26 19:06:04 2015 UTC,"I could investigate this, if you where to submit a ticket."
emacs,33w9rt,yuppienet,1 point,Sun Apr 26 19:14:50 2015 UTC,"Well, I'm pretty sure that this thing is fixed in Emacs 25.1 as described in my ticket linked earlier. But I'll open a ticket anyways, perhaps there's more to it than meets the eye."
emacs,33w9rt,yuppienet,1 point,Sun Apr 26 19:27:48 2015 UTC,I'm very interested in what exactly is this witchcraft Oo. How do I use the section 5 for example (left and right alignments) in my mode-line ?
emacs,33w9rt,sabof,1 point,Sun Apr 26 23:30:31 2015 UTC,"Isolate the needed code, and look at documentaton for mode-line-format and pixel specifications."
emacs,33w9rt,anatolya,1 point,Sun Apr 26 23:54:51 2015 UTC,"Note that the screenshots are coming from 24.5.x  Images use the xlink xmlns, and are in <image xlink:href=""image url""> form.  Edit: Emacs-Mac port - (which IIRC uses WebKit for svg etc.)"
emacs,33wo2c,jibbit,13,Sun Apr 26 09:54:21 2015 UTC,Spacemacs maintainer here. I understand people saying that starting from scratch is a good way to learn Emacs but it does not imply that it is a better way. If you want concrete material just look at how many contributions have been merged in Spacemacs and look for @spacemacs account on Twitter for testimonies of elisp beginners contributing to the project. In practice Spacemacs is an excellent and efficient way to learn Emacs and elisp. You can also join the 600+ people that have already joined the gitter chat for good support about Spacemacs.  I cannot see how starting from scratch can be more efficient than Spacemacs. There so many content united around a strong framework. It would take several man month to get there.
emacs,33wo2c,syl20bnr,5,Sun Apr 26 16:15:02 2015 UTC,"Thanks for taking time to answer this dumb lazy question (everyone else too). It has been really useful! I'm not so concerned about not starting from scratch.. i did that and am now fully into Helm, Projectile, Company, etc. I love Spacemacs and have been using it in both evil mode and emacs flavour, and will continue to do so in one or the other if i could only decide. I'm mostly just procrastinating about learning Vim style bindings.. which look like a really smart way to work.. but if someone could dissuade me now they would save me weeks of being utterly unproductive at work and i'd be grateful."
emacs,33wo2c,syl20bnr,2,Sun Apr 26 17:01:02 2015 UTC,"Spacemacs is a good platform to learn vim key bindings because you can use it in Emacs style (holy-mode) but at any time you can press ESC to go in normal state, then you can go back in Emacs state with i. There is also an evil-tutor. Note that you can easily do that in your config too, check the source of holy-mode in Spacemacs. You can also install evil-tutor from MELPA."
emacs,33wo2c,krupped,1 point,Tue Apr 28 05:10:00 2015 UTC,Thanks.. gonna study holy-mode.el now
emacs,33wo2c,redguardtoo,7,Tue Apr 28 08:54:46 2015 UTC,"My advice is is to try everything, play around with everything. Go ahead and tinker. When it comes to emacs, there really are no right answers.  It's possible that by switching between the two you are preventing yourself from learning both, but I personally wouldn't be too concerned about it.  You can try forcing yourself to stick with one for a while. Flip a coin, do a pro/con list, or just go with what feels right. But if you're worried about spacemacs not really being emacs, you can stop worrying.  Once you learn how to learn emacs, and how to explore emacs through its help system, even if you don't like spacemacs or plain emacs in the end, you will be able to find what pieces of both that you like, and mix them together into your own configuration."
emacs,33wo2c,instant_sunshine,3,Sun Apr 26 12:48:03 2015 UTC,learn vim key bindings (evil) at first  or learn Emacs default key bindings at first  or learn both at the same time  It doesn't matter. Just pick up the most comfortable way. And it's totally fine to change mind in the mid way.
emacs,33wo2c,nautola,3,Sun Apr 26 12:02:38 2015 UTC,"Spacemacs attempts to cover the gaps left by Evil mode.  You will have to stay within a subset of packages, as all the defaults are going to follow Emacs conventions.  Personally, I generally recommend learning Emacs as it is, and then adding what you want later.  There's a lot of benefit in knowing the thing inside and out.  The analogy of ""you don't need to be a mechanic to drive a car"" really doesn't hold too much water relative to Emacs.  The major benefit of using a platform like this, is to master it."
emacs,33wo2c,redguardtoo,5,Sun Apr 26 10:59:13 2015 UTC,"I came to Emacs from Vim, and I'm very comfortable editing code the Vim way.  That said, I'm coming around to the school that the Emacs way is better.    Vim is great for editing code.  I think that's its limitation.  The Emacs keybindings are great for editing any text.  The level of abstraction is higher, I think.    I would like to migrate from evil to straight Emacs because a lot of packages don't work well with evil, and stuff like org-mode would be better with Emacs bindings.    I've also noticed that even while using evil mode, you still have to use a lot of chords if you're interested in adding new functions (which maybe coming from Vim, you're not), because there aren't enough single keys to do everything with one key.  So there you go. Key chords aren't going away.   I'd advise against learning vim inside emacs.  Just learn emacs, it's easier."
emacs,33wo2c,hanlec,3,Sun Apr 26 23:16:08 2015 UTC,"I would like to migrate from evil to straight Emacs because a lot of packages don't work well with evil, and stuff like org-mode would be better with Emacs bindings.    If you find any mode not work well with evil, just ask Frank Fischer (the developer of Evil) who is really willing to help.  Here is an example, http://blog.binchen.org/posts/use-git-timemachine-with-evil.html"
emacs,33wo2c,many_cakes,1 point,Tue Apr 28 02:11:55 2015 UTC,Interesting thanks for the input
emacs,33wo2c,username223,1 point,Mon Apr 27 09:47:48 2015 UTC,"I'm in exactly same situation (well, less than few months into Emacs actually). I got a minimal Emacs environment starting from zero and only adding things that I have found useful and at a pace that allowed me to also learn.  Enter Spacemacs. Oh, this seems to be a beauty! And coming from Vim makes it even more appealing.  But I also feel intimidated by it. It sets up so many things that I don't even know where to start. If something doesn't work I don't know where to ask for help. After drooling over Spacemacs for 2 days, I decided that I'll stay with my minimal Emacs setup until I will feel comfortable enough to look into a more complex setup like Spacemacs. This is the conclusion I've reached while initially setting up Emacs and deciding not to use some of the nicely set emacs.d's on GitHub. And it's the same I've done in the past with Vim."
emacs,33wo2c,cestdiego,4,Sun Apr 26 11:10:12 2015 UTC,If something doesn't work I don't know where to ask for help.   The gitter is very friendly: http://gitter.im/syl20bnr/spacemacs
emacs,33wo2c,instant_sunshine,1 point,Sun Apr 26 13:06:55 2015 UTC,"I'm an Emacs beginner (few months), i don't know Vim,...   If you want to learn one of them, then pick one.  Learn (and customize) either standard Emacs or standard Vi(m); starting off with a Vi(m) user's tweaks on top of Emacs will be confusing."
emacs,33wo2c,tuhdo,1 point,Mon Apr 27 02:21:08 2015 UTC,Use whatever you like.... Vim keybindings are mostly anywhere now in common applications though....Emacs ones are also too but not that widespread( as far as I know ). So that means that the muscle memory you'll develop will be of use outside of emacs. In Spacemacs you can have holy mode and also the Vim thing..so you are kinda covered. Also it's a good thing to know how to navigate with emacs keybindings as when sth breaks in evil mode you can find your way.
emacs,33wo2c,ellakk,7,Sun Apr 26 09:57:47 2015 UTC,"Emacs keys are default in a lot more places than Vim.  Readline, which is used in many different shells, repls etc. (and compatible line editors in OS X text controls etc.) all default to Emacs bindings.  In terms of widespread support outside their editor/platform, Emacs has far more coverage.  (Not that you can't switch it to Vim mode in many places, but it's not default.)"
emacs,33wo2c,tuhdo,1 point,Sun Apr 26 10:55:14 2015 UTC,so stuff breaks in evil? Do you mean it doesn't work everywhere?
emacs,33x9ep,browsin_is_a_paddlin,4,Sun Apr 26 14:53:15 2015 UTC,"'LaTeX/P' is LaTeX mode under the PDF minor mode. I've never had an issue with AUCTeX (and I've used it since emacs v22), so I really don't think AUCTeX in se is your issue.  When you start emacs with -q, it doesn't load any initialization files. See the documentation for more info on that.  If you're using linux, I would try re-installing emacs from source. I've never trusted the package repos to actually work. (Most of that mistrust comes from the TeX packages being over four years old.) If you're using windoze, install from the FSF's ftp server. If you're using mac, install from emacsformacosx.com."
emacs,33x9ep,vermiculus,1 point,Sun Apr 26 15:07:55 2015 UTC,"Will do, thanks.  Is there a way to prevent emacs from running AUCTeX in the preview minor mode?"
emacs,33x9ep,vermiculus,3,Sun Apr 26 15:10:55 2015 UTC,"Hmm, the default setup doesn't turn it on… this is my entire AUCTeX configuration."
emacs,33x9ep,BruceConnor,1 point,Sun Apr 26 15:35:07 2015 UTC,"Update on the re-install you recommended: I got the newest version off of emacsformacosx.com, and even though it still opens LaTeX/P when I open a .tex file, at least it does so quickly.  The problem now is that I hate using Emacs in windowed mode and I need to be able to run it from the command line, which as far as I can tell, isn't an option with this kind of installation.  Am I wrong about that?  I tried linking to what appears to be the binary in the .app folder but all I got was a couple of error messages.  Edit: Oops, I mean it's possible to run it from the command line, but I don't like the way you have to do it."
emacs,33x9ep,vermiculus,3,Sun Apr 26 15:45:15 2015 UTC,"That P stands for PDF, not for preview. It relates to how the document will be compiled, and should be irrelevant for performance."
emacs,33x9ep,vermiculus,1 point,Sun Apr 26 15:52:06 2015 UTC,"It [...] should be irrelevant for performance   Believe me, I agree.  But I can't come up with any other interpretation for emacs' behavior right now."
emacs,33x9ep,BruceConnor,2,Sun Apr 26 16:07:09 2015 UTC,Why not use homebrew then? That's what I've got going on. (Though frankly I've never had an issue with a graphical emacs server and emacsclient -t.)
emacs,33x9ep,tekai,1 point,Sun Apr 26 15:58:36 2015 UTC,"Yeah, that's what I'm using.  The version it gives me is 24.4.1--a little older than the site you recommended, but otherwise it's fine.  After some more experimentation, it seems like it's the lack of windows that seems to be causing LaTeX/P to go so slow.  Really frustrating."
emacs,33vah8,nautola,1 point,Sat Apr 25 23:36:58 2015 UTC,"Wow, thanks!"
emacs,33vah8,lawlist,1 point,Sun Apr 26 01:56:44 2015 UTC,"For the built-in whitespace-mode, you don't need a separate function.  All you need to to do is set the variable whitespace-style and you are done -- e.g., (setq whitespace-style '(spaces tabs newline space-mark tab-mark newline-mark))"
emacs,33vah8,lawlist,1 point,Sun Apr 26 02:06:16 2015 UTC,"(setq whitespace-style '(spaces tabs newline space-mark tab-mark newline-mark))   That works, but Emacs doesn't redraw the buffer for some reason.  When I run that interactively, it doesn't show the tabs or anything, but when I reopen the file (after killing the buffer) it shows up how I want.  How do I tell Emacs to refresh?"
emacs,33vah8,BestOpinionEver,1 point,Sun Apr 26 02:08:18 2015 UTC,"It was easiest for me to just disable and enable the minor mode; however, I'm sure you could devise a function that doesn't necessarily disable and enable -- this example assumes whitespace-mode is being used locally:  (defun ws-junior () (interactive)   (whitespace-mode -1)   (setq whitespace-style '(face lines-tail))   (whitespace-mode 1))  (defun ws-whopper () (interactive)   (whitespace-mode -1)   (setq whitespace-style '(face tabs spaces trailing lines space-before-tab     newline indentation empty space-after-tab space-mark tab-mark newline-mark))   (whitespace-mode 1))"
emacs,33ve6u,BLAND_AS_OVALTINE,1 point,Sun Apr 26 00:13:37 2015 UTC,"check evil-matchit, use general text object '%'.  it has support for latex."
emacs,33u56w,defenestre,5,Sat Apr 25 17:33:22 2015 UTC,You could always use M-x variable-pitch-mode when writing documents. You can even have variable pitch for text and monospace for tables.
emacs,33u56w,monotux,1 point,Sat Apr 25 22:07:35 2015 UTC,"Looks interesting, I'll have to try it out - thanks!"
emacs,33u56w,rphillips,3,Sun Apr 26 00:00:19 2015 UTC,I highly suggest looking into Latex to write articles. You write a structured document and it'll generate a great looking pdf.
emacs,33u56w,chrispoole,1 point,Sat Apr 25 18:44:27 2015 UTC,"Thanks, I've tried AucTeX, but it's not quite WYSIWYG, although you get can some nice syncing with Sumatra PDF :)"
emacs,33u56w,brad_radberry,1 point,Sat Apr 25 23:59:46 2015 UTC,org mode is a nice compromise: it'll happily export to LaTeX and even create the PDF for you.
emacs,33ui1h,JacquesDegree,1 point,Sat Apr 25 19:21:33 2015 UTC,In my test the backspace behavior has nothing to do with delete-selection-mode. Which major mode are you using? Switch to fundamental mode and try again.
emacs,33ui1h,stshine,1 point,Sat Apr 25 20:13:38 2015 UTC,"Hm yes, then it works, but it's in paredit mode that it doesn't work. Is that normal?"
emacs,33ui1h,stshine,2,Sat Apr 25 20:31:06 2015 UTC,I think it is normal since paredit prevents any modification that will harm the structue.
emacs,33ui1h,bill_tampa,1 point,Sat Apr 25 20:39:54 2015 UTC,"run C-h k on the delete key while in paredit mode, it will show you what function the delete key is bound to. I believe in paredit mode it is bound to paredit-backward-delete."
emacs,33ui1h,qsvans,1 point,Sat Apr 25 21:43:37 2015 UTC,"Alright, thank you all! I think it's just that I didn't really understand the ultimate goal of paredit :)"
emacs,33tvfy,amos1969,1 point,Sat Apr 25 16:10:20 2015 UTC,Is your Python code using argparse?
emacs,33tvfy,lancepantz,1 point,Sat Apr 25 21:32:12 2015 UTC,"No.  I'm trying to set things up so I can run my kivy apps using ipython in emacs. As part of doing this I discovered Kivy's Interactive Launcher. My setup doesn't work with this, but running the same code with IPython3 outside of emacs does work.  The single from kivy... line fails in the interactive ipython shell running in emacs but runs in the interactive ipython shell running in a terminal outside of emacs. Effectively there is no python code to contain argparse."
emacs,33tzl6,elkano1003,5,Sat Apr 25 16:45:47 2015 UTC,"Definitely not a stupid question!  There's a classic point of confusion regarding terminology here, so I want to make sure we're on the same page—Emacs uses the term ""frame"" to refer to what modern OSes call ""windows""; and in Emacs speak, ""window"" means a split inside of a frame such that multiple buffers are visible. Continuing with that terminology...  If you actually want two frame set-ups (one for LaTeX, and one for Python), then stock Emacs should have you covered: C-x 5 2 (make-frame-command) will get you a second frame, C-x 2 (split-window-below) will add the second Python window, and you can use C-x 5 o (other-frame) to switch back and forth between the LaTeX and Python frames. (Protip for OS X users who use CMD as Meta: bind M-<backtick> to other-frame and Emacs will match the system convention of using CMD-<backtick> to cycle between an app's windows).  If you actually want two window set-ups, winner-mode (as /u/OvidNaso mentioned) is pretty great as it dynamically maintains a history of window changes, but I suspect you can achieve exactly what you want with C-x r w (window-configuration-to-register); simply get things set up how you want and then run that command providing some character to name the register—let's say ""a""—and then you can restore that configuration at any time with C-x r j a (jump-to-register— a). So just save the two different window configurations to different registers. You could probably also pair that with desktop-mode and have the registers already assigned at start up time.  Hope that helps!"
emacs,33tzl6,camdez,2,Sun Apr 26 17:51:25 2015 UTC,"I thought I was using frames correctly but it was really windows. The C-x r w mixed with C-x r j a and C-x r j l now work well for me. It's great to not have to use the mouse or move my hands away from the home row. Thank you so much for you answer, this is exactly what I wanted."
emacs,33tzl6,camdez,3,Sun Apr 26 18:04:47 2015 UTC,:) Very happy to help.
emacs,33tzl6,ipjk,3,Mon Apr 27 22:27:29 2015 UTC,Could this be of help? https://github.com/bmag/emacs-purpose
emacs,33tzl6,lawlist,3,Sat Apr 25 17:13:06 2015 UTC,"One idea would be to have a frame dedicated to python and a separate frame dedicated to latex, and then switch back and forth between those two (2) different frames.  Another idea would be to use elscreen.  I love frame-bufs by Alp Aker which lets us associate buffers with frames -- this is something that Emacs doesn't do natively, but frame-bufs saves a list in the frame-parameter that enables this feature."
emacs,33tzl6,tuhdo,2,Sun Apr 26 04:39:58 2015 UTC,"If you use Helm, you can pop a buffer into a frame without switching to it by using helm-mini, then press C-c C-o to open a frame with selected buffer.  You can use the command select-frame-by-name to select a frame by its name. If you have helm or ido, it shows you in a menu style to choose from.  Also, check frame commands in the manual."
emacs,33tzl6,OvidNaso,2,Sat Apr 25 17:41:03 2015 UTC,Look into winner-mode.  It's exactly what you need.
emacs,33tzl6,hex_m_hell,1 point,Sat Apr 25 20:59:32 2015 UTC,This is the winner for right now. I'll look into the more powerful and complicated versions later.
emacs,33ru1k,kabbotta,4,Sat Apr 25 00:37:35 2015 UTC,"Somewhat related, but you may find the commands whitespace-cleanup and whitespace-cleanup-region helpful."
emacs,33ru1k,eric-plutono,3,Sat Apr 25 04:59:51 2015 UTC,"If you want to delete all white space (but not simply jump over) to either side of the point, you can you the hungry-delete package.   Its hunger can be configured to include some or all of space, tab, newline."
emacs,33ru1k,kaushalmodi,5,Sat Apr 25 01:34:29 2015 UTC,Nice. It even looks like you can enable a hungry-delete minor mode where backspace automatically has the behavior I wanted without even needing to press a modifier.  It works perfect. I knew you wouldn't let me down emacs. Thanks!
emacs,33ru1k,instant_sunshine,3,Sat Apr 25 01:41:01 2015 UTC,"Just-one-space is probably what you want.  M-<space>   Also   M-\   Will kill all intermediate white space at point.  Both are built in, standard Emacs."
emacs,33ru1k,instant_sunshine,1 point,Sat Apr 25 04:42:48 2015 UTC,"Interesting. Neither of those are what I want, but I didn't know about either of them. So M-<space> just jumps to the second position on the current line? I'm having a hard time understanding why that would be useful. M-\ does seem useful though.  Apparently, there is a hungry-delete minor mode that does basically exactly what I was hoping for. It eats up all of the spaces, including new lines, until it hits another word. Pretty cool."
emacs,33ru1k,BrettW-CD,4,Sat Apr 25 04:58:36 2015 UTC,M-<space>   Will make...   two            words   Be:   two words   Evil/Spacemacs probably trod on the default (tsk) if that's not what happens when your cursor is between the two words.
emacs,33ru1k,monotux,3,Sat Apr 25 05:04:39 2015 UTC,"just-one-space turns all the spaces and tabs at the current point into just one, so it deletes all-but-one space, rather than jumping.  Think of it like M-\, <space> (delete-horizontal-space, self-insert-space`)"
emacs,33ru1k,instant_sunshine,2,Sat Apr 25 05:06:06 2015 UTC,Came here to say 'just use hungry-delete-mode'! :)  (defun monotux/hungry-delete-settings ()   (turn-on-hungry-delete-mode)) (mapc #'(lambda (mode)       (add-hook mode #'monotux/hungry-delete-settings))   '(LaTeX-mode-hook     org-mode-hook     prog-mode-hook))
emacs,33ru1k,instant_sunshine,3,Sat Apr 25 12:42:58 2015 UTC,"Now that I'm not redditing from my phone, I think I misunderstood the original question (I only read the hungry delete answer, sorry!)   What you actually want here, using default Emacs, no packages required, is:  (delete-indentation &optional ARG)   It is bound to M-^  Join this line to previous and fix up whitespace at join. If there is a fill prefix, delete it from the beginning of this line. With argument, join this line to following line."
emacs,33ru1k,instant_sunshine,1 point,Sat Apr 25 10:38:52 2015 UTC,"Thanks, not only have I solved my problem better than I expected, but I learned a bunch of cool new things about emacs."
emacs,33ru1k,roerd,2,Sat Apr 25 23:13:39 2015 UTC,"I guess this is as good a time as any to tell you about transpose-sexp (bound to C-M-t) and its friends C-t transpose-char M-t transpose-word.  If you're on OSX C-t works everywhere.  Also these should work on Bash/Zsh by default too.  I guess universal argument would be something very handy to know too.  C-u will trigger extended features of many functions/commands.  C-<number> or M-<number> (as many as you need, e.g. M-1 M-5 for 15) will repeat operations.  You can use M-<minus> or C-<minus> to reverse many things. Also use in conjunction with number args as above, to repeat a minus op."
emacs,33ru1k,nivekuil,2,Sun Apr 26 01:32:07 2015 UTC,"Thanks. I was just starting to find uses for the universal argument. I had problems with the compile window ignoring keyboard input and I read that adding a universal argument to the the compile call makes sure the window will receive input.  Apparently, I have C-t remapped to something to do with GTAGS...which I'm not using anymore.  I'm sorry, vim, but leaving you was one of the best decisions I've made."
emacs,33rvgo,arsengutsal,6,Sat Apr 25 00:52:24 2015 UTC,"Is this different from version control, NFS, or M-x make-frame-on-display?"
emacs,33rvgo,username223,4,Sat Apr 25 01:14:40 2015 UTC,Do you know about Floobits?
emacs,33rvgo,joehillen,1 point,Sat Apr 25 01:19:42 2015 UTC,"No. Never heard. But there are bunch of services that gives you some ugly webIDE. Emacs is perfect coz is not the IDE, it's the constructor that let you build your IDE whole life and improve it"
emacs,33rvgo,instant_sunshine,4,Sat Apr 25 01:46:20 2015 UTC,"Floobits is essentially a protocol, any editor can (feasibly) implement it.  Emacs does have a floobits.el package available."
emacs,33rvgo,instant_sunshine,1 point,Sat Apr 25 02:03:09 2015 UTC,Wow. Cool. I need to review it ;) thanks man
emacs,33rvgo,vermiculus,1 point,Sat Apr 25 02:07:36 2015 UTC,Apparently can't imagine how it is possible to 'M-x floobits-share-dir-public <RET> DIR <RET>' with their protocol concept. Now I'm in smartphone. Will check tomorrow
emacs,33rvgo,ccharles,2,Sat Apr 25 02:18:25 2015 UTC,"You could open up a shared file space with whatever network protocol, sshfs is a pretty good fit for this.  Floobits however is going to give you a shared document, for collaborative realtime editing (similar to the way google docs works)  The shared file-space is only necessary for using other tools on the files.  To be frank, is simply say use git.  Then floobits (or tmux, or X both less workable than floobits.) for the collaborative environment.  Note that only Floobits (of the solutions mentioned) will give you a cursor per user."
emacs,33rvgo,vermiculus,1 point,Sat Apr 25 04:30:30 2015 UTC,"I wonder how floobits.el plays with multiple-cursors.el, then ;)"
emacs,33rvgo,ccharles,1 point,Sat Apr 25 12:06:14 2015 UTC,good to know that. I'll check them when I have time.
emacs,33rvgo,vermiculus,3,Sat Apr 25 12:19:47 2015 UTC,"Floobits isn't just a web IDE. There are plugins for Emacs, Vim, Sublime, and a few other tools."
emacs,33rvgo,vermiculus,0,Sat Apr 25 01:54:48 2015 UTC,"Yep, I was going to link to this, too. They're doing pretty well for themselves, so it was certainly worth doing :)"
emacs,33rvgo,instant_sunshine,3,Sat Apr 25 01:44:29 2015 UTC,I'm not entirely clear on why I'd want to use it. What's the main selling point?
emacs,33rvgo,vermiculus,2,Sat Apr 25 01:15:29 2015 UTC,"Consider that you found the right person (emacser also) on other side of the planet to help you with what you are currently doing with your emacs. But he is absolutely unclear about VCS, NFS and such (he's still sharing his work with others burning CDs). Won't such a service help? Even for those who are pros and know VCS, it is not often necessary to fork-a-branch-with-buggy-code-and-push just to ask the professional to find the bug in a single line. I'm not Lisp guy even doubt I understand emacs arch well. But I have heard that since it's desing was started in pre-internet area is not possible to connect to remote emacs server (tried many ways to do so through hacks). That service would help. No?"
emacs,33rvgo,instant_sunshine,2,Sat Apr 25 01:43:21 2015 UTC,not possible to connect to remote emacs server   [citation needed]
emacs,33rvgo,vermiculus,1 point,Sat Apr 25 01:46:42 2015 UTC,Show me the way ;)
emacs,33rvgo,kaushalmodi,2,Sat Apr 25 01:49:04 2015 UTC,"I routinely opened up a graphical emacs through an ssh/x11 tunnel during my internship years ago. Haven't needed to since, but the possibility is there.  Emacs isn't by nature client/server application – it's pretty monolithic that way. That said, check out M-x server-start, emacs --daemon, and emacsclient. You need to turn around your thinking for anything to make sense :)"
emacs,33rvgo,vermiculus,1 point,Sat Apr 25 01:57:46 2015 UTC,Also Tmux for a lo-fi solution
emacs,33rvgo,ccharles,2,Sat Apr 25 02:04:03 2015 UTC,"tmux is a (fantastic) terminal multiplexer. As far as emacs is concerned, there's nothing it brings to the table – you can just plow open an ssh tunnel and fire up emacs – you'll feel right at home."
emacs,33rvgo,vermiculus,2,Sat Apr 25 02:14:36 2015 UTC,You can pair remotely if you use a tmux session.  That's what it brings to the table for Emacs.  (Only one driver at a time though!)
emacs,33rvgo,ccharles,1 point,Sat Apr 25 04:23:01 2015 UTC,pair remotely   I'm afraid I don't know what you mean :( This is my own ignorance – can you explain it to me?
emacs,33rvgo,vermiculus,2,Sat Apr 25 11:59:07 2015 UTC,"I think he means that you can attach to the same session (same server) from multiple places. So if you and I are attached to the same session, you can see what I am typing and vice-versa."
emacs,33rvgo,TheFrenchPoulp,1 point,Sat Apr 25 13:15:52 2015 UTC,Well. I didn't say that's not possible to ssh to another host and emacsclient to remote emacs --daemon. I said that's impossible to emacsclient to remote daemon through many tricks I've tried. My approach is different. My approach let many ppl connect to SAME daemon in same cloud and collaborate (like view frames/screens of other ppl and such).
emacs,33rvgo,vermiculus,1 point,Sat Apr 25 02:06:26 2015 UTC,"""cloud"" is a buzzword that has no real place among professionals.  I can connect many clients to the same daemon locally (and remotely, I'm sure). Those clients can view the same buffers, etc., because they're all running on the same host. What does your idea bring to the table?  Not tying to be a downer, just trying to be realistic. What makes you different?"
emacs,33rvgo,TheFrenchPoulp,1 point,Sat Apr 25 02:16:51 2015 UTC,I'll quickly show tomorrow what I've drafted already. Thanks for your interest and critics. Started to use emacs only 3 years ago. Must learn from you alot ppl ;)
emacs,33rvgo,vermiculus,1 point,Sat Apr 25 02:25:03 2015 UTC,"There are already services that do things like this (Floobits was already mentioned in the comments), and it's not limited to Emacs. Being able to collaborate with Vim / Sublime Text / etc. as well as Emacs users is pretty cool.  In any case, if I was going to work with somebody who doesn't know how to use version control I would make sure that they learn version control. There is no excuse not to use version control, so for me something like this would have to have good version control integration."
emacs,33rvgo,TheFrenchPoulp,2,Sat Apr 25 01:53:39 2015 UTC,"There is no excuse not to use version control   I've always told my students to learn one thing at a time. Moreover, I've only rarely told them that they're learning a field in the wrong order – self-initiated learning should not be 'punished' that way.  Just keep that in mind for the future :)"
emacs,33rvgo,TheFrenchPoulp,2,Sat Apr 25 12:08:45 2015 UTC,"That's fair. I suppose I was thinking about this from a professional perspective, not a teaching perspective."
emacs,33rvgo,eric-plutono,1 point,Sat Apr 25 12:50:23 2015 UTC,"Quite alright – it's easy to forget. Your iconic emacs user is a developer, so that's a fair assumption, but it's been picking up a lot of steam in research and the humanities."
emacs,33rvgo,eric-plutono,1 point,Sat Apr 25 12:56:10 2015 UTC,Apparently. There will probably be even complete *NIX like home for each project/user with custom set of console type including vcs. But no VCS could give you the way to program in pair with another developer. To learn-as-guru-code and to many other things that are possible to do sitting together in the same room.
emacs,33qj0p,tuhdo,4,Fri Apr 24 18:02:36 2015 UTC,"Simpler solution:  (setq shackle-rules '((""\\`\\*helm.*?\\*\\'"" :regexp t :align t :ratio 0.4)))"
emacs,33qj0p,wasamasa,1 point,Fri Apr 24 18:42:04 2015 UTC,"(setq shackle-rules '((""\`\helm.?\*\'"" :regexp t :align t :ratio 0.4 :defer t)))   Seems neat but unfortunately it doesn't support automatic buffer closing at the moment and that's the main use case of popwin that people need. If you add that feature, it may replace popwin.  EDIT: However, shackle is a good lightweight alternative for someone who doesn't want to use popwin and want Helm window  in its proper place, then yes, this is indeed a good package.  EDIT2: Now the only thing needed is that you provide a command that can close all windows that shackle manages. It's good to do this manually since the automatic behavior of popwin can mess up some windows.  EDIT3: You should give this Helm example on the homepage. I believe many people would find it appealing."
emacs,33qj0p,wasamasa,3,Fri Apr 24 18:47:13 2015 UTC,"This is interesting, the times I've used popwin and it did close a window for me was either when hitting C-g or selecting another window which makes the original vanish (which I found incredibly annoying) or some other window popped up (which I found similiarly annoying). I don't plan implementing the mentioned features I found annoying, same goes for the C-g feature since I can only imagine it working by timer abusal. That's right, I wished for the good parts of popwin and did rectify a few of its defaults (like, it always aligning windows and selecting them by default) while I was at it. shackle does not manage windows. It gives you a way of managing display-buffer-alist. So, there's nothing to close or redisplay or whatever else popwin offered. Good idea, I'll add it to the README."
emacs,33qj0p,dnquark,1 point,Fri Apr 24 20:46:51 2015 UTC,"Shackle looks quite useful, thanks for writing it. I like popwin, but found it to be a bit buggy and difficult to grok."
emacs,33qj0p,dnquark,3,Tue Apr 28 01:25:16 2015 UTC,"Thank you for this, I would upvote this 100 times if I could. Helm is awesome in terms of functionality, but the UX leaves a lot to be desired, particularly coming from something like ido.  This solves one of my biggest gripes -- Helm taking over a whole window."
emacs,33qj0p,aabbccaabbcc,2,Tue Apr 28 01:24:32 2015 UTC,"I would too! I switched from ido to helm a while ago once helm's fuzzy matching was in place, and I really like helm but I'd found this really frustrating as well.  Many thanks to /u/tuhdo and /u/wasamasa!"
emacs,33qj0p,EatMoreCrisps,2,Tue Apr 28 19:40:02 2015 UTC,"I had a great deal of trouble parsing this submission and working out what it was telling me, to the point that I just had to try it out and see what happened (after finding out what popwin was).  I feel like I was dropping into the middle of an existing conversation.  To my pleasure it seems to have done what I'd hoped it was doing, which is to have helm windows appear right above the minibuffer.  Not sure how much I like the rest of popwin, but we'll see."
emacs,33pz41,gkunno,3,Fri Apr 24 15:33:49 2015 UTC,I just have a very easy key binding to switch between those js2-mode and web mode. I choose web mode for all markup heavy parts and js2 mode the other times.
emacs,33pz41,thomasfr,1 point,Fri Apr 24 15:59:22 2015 UTC,"In case anyone is interested.... here is the code I use to do what thomasfr suggests.  But I also narrow the buffer to the region between <script> tags before turning on js2.  ""C-c j"" to narrow to text between <script> tags and turn on js2.   ""C-c u"" to go back and turn on web-mode.  Cut/past into .emacs or init.el.  This code has some issues; it doesn't properly select text betweeen the <script> tags, binds keys in a bad way, and a few other things. Eventually I'll clean it up and maybe turn it into a package.  ;; delay execution of this code until `web-mode' is turned on. (with-eval-after-load ""web-mode""   ;;needed to bind a key for `js2-mode-map'   (require 'js2-mode)   (require 'cl)    (defun my/js2-mode-on-region (start end)     ""Narrow on the active region, then turn on js2-mode.""     (interactive ""r"")     (deactivate-mark)     (narrow-to-region start end)     (js2-mode))    (cl-defun my/focus-javascript () ;using `cl-defun' to allow `return-from'     ""Automatcially narrow between <script> tags, then turn on js2-mode.""     (interactive)     (let ((start-tag-name ""<script"")           (end-tag-name   ""</script"")           (start          nil)           (end            nil))       ;; Find start tag. Search backwards first to give priority to tag pairs       ;; the cursor is currently inside.       (setq start (search-backward start-tag-name nil t))       (when (null start)         ;; if start tag not found backwards, then try forwards.         (setq start (search-forward start-tag-name nil t)))       (when (null start)         (message ""start tag not found"")         (return-from my/focus-javascript nil))       ;;start is found, move cursor down a line, start highlighitng       (next-line)       (move-beginning-of-line nil)       (set-mark-command nil) ;(evil-visual-line)       ;; jump to end tag. always search forward       (setq end (search-forward end-tag-name nil t))       (when (null end)         (deactivate-mark)         (message ""end tag not found"")         (return-from my/focus-javascript nil))       ;;end tag is found. now move cursor up one line       (previous-line)       (move-end-of-line nil)       ;; turn on js2-mode for this region. (and narrow)       (call-interactively #'my/js2-mode-on-region)))    (defun my/unfocus-javascript ()     ""Undo the effects of `my/focus-javascript'.""     (interactive)     (widen)     (web-mode))    ;; key bindings   (define-key web-mode-map (kbd ""C-c j"") #'my/focus-javascript)   ;; TODO: Use a different technique for this keybind. If we didn't enter   ;; `js2-mode' from `web-mode' then we don't want `my/unfocus-javascript' to   ;; turn on web-mode.   (define-key js2-mode-map (kbd ""C-c u"") #'my/unfocus-javascript))"
emacs,33pz41,Starlight100,3,Sat Apr 25 18:21:28 2015 UTC,"I've been using this combination of js2-minor-mode and web-mode for a few weeks and it's working alright.  Note that I keep all of my jsx files in a directory named ""jsx"" with filenames that end in "".js"".  You'll have to tweak that last line to fit your needs.  https://gist.github.com/randymorris/cc9f42a109b8838eeed9  Overall indentation works well but syntax highlighting could be better.  I'm not impressed with web-mode in general.  It seems clunky and always seems to lose track of how things should be highlighting while I'm editing."
emacs,33pz41,rson,1 point,Fri Apr 24 16:37:37 2015 UTC,@rson Could you report you issues on the web-mode.el github repo ?
emacs,33pz41,fxbois,1 point,Mon Apr 27 15:49:09 2015 UTC,"If I can come up with a way to reliably reproduce the highlighting issue I will.  I know for sure one of the more annoying issues is that whitespace-mode highlighting doesn't seem to work consistently in web-mode.  Again, if I can reproduce it reliably I will report it.  My comment probably comes off a little harsh, I apologize for that.  JSX has been literally my only experience with web-mode and I haven't taken much time to see if there are settings to improve the highlighting in JSX at all.  My main concern when getting things up and running was to get indentation working, which web-mode does very well."
emacs,33pz41,rson,1 point,Mon Apr 27 16:08:09 2015 UTC,"@rson perfect, a reliable way to trigger an issue is what I need. Just one thing, do not forget to update web-mode.el ... I've changed many thing related to fontification recently"
emacs,33pz41,fxbois,3,Mon Apr 27 16:43:06 2015 UTC,Did you read this? https://truongtx.me/2014/03/10/emacs-setup-jsx-mode-and-jsx-syntax-checking/
emacs,33pz41,instant_sunshine,1 point,Sat Apr 25 01:36:58 2015 UTC,"I'm struggling too, but am still a begginer at Emacs.  It doesn't seem to me like web-mode or jsx-mode do more good than harm.. but i confess it could easily be a problem or incompatibility caused entirely by me.. i'm just not experienced enough to know / find the cause when indentation messes up or autocomplete goes bonkers. I'm definitely having more trouble with jsx than anything else though."
emacs,33pz41,jibbit,2,Fri Apr 24 16:25:00 2015 UTC,jsx-mode is not actually for react jsx. It's for a different jsx.
emacs,33pz41,kovak,1 point,Sat Apr 25 02:48:06 2015 UTC,"I'm just wondering, how you lint html and js code?"
emacs,33pz41,redguardtoo,1 point,Mon Apr 27 07:26:55 2015 UTC,"Basically i run jshint when in js-mode, and keep my custom .jshintrc in my root. HTML i usually just run it thru the web-modes html-checker."
emacs,33pz41,redguardtoo,1 point,Mon Apr 27 15:55:07 2015 UTC,"yes, I have simiar setup.  But how you lint mixed html/js code in JSX?"
emacs,33pz41,zarkone,1 point,Tue Apr 28 02:16:00 2015 UTC,"Well thats actually what i have problems with, the JSX breaks linting in js2-mode, and web-mode fails to indent it correctly. Would love to see native JSX support in js2-mode though."
emacs,33pz41,spagyric,-5,Tue Apr 28 06:39:54 2015 UTC,just use ragent: https://github.com/reagent-project -- no problems in emacs =)
emacs,33pz41,rson,-2,Fri Apr 24 18:24:45 2015 UTC,There is also this: https://github.com/jsx/jsx-mode.el
emacs,33pldl,Quick_A_Distraction,4,Fri Apr 24 13:45:22 2015 UTC,https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces python does not use tabs for indentation.
emacs,33pldl,kpurdon,1 point,Fri Apr 24 14:56:37 2015 UTC,"Believe me if I had my way it would be spaces, but unless I want 1k line difs every time I commit something I need tabs :("
emacs,33pldl,mordocai058,5,Fri Apr 24 15:01:53 2015 UTC,"It means that your project has decided on tabs over spaces, not that python does. That was /u/kpurdon's point I'd assume."
emacs,33pldl,rootis0,1 point,Fri Apr 24 17:53:56 2015 UTC,"Oh, yea I figured.  I despise tabs for indentation for any language, but I like conforming to the standards of the code base more than my hate for tabs (marginally)."
emacs,33pldl,RobThorpe,1 point,Fri Apr 24 17:55:17 2015 UTC,"Did you bind Enter to new-line-and-indent? It would auto-indent, which is to position your cursor to match the indentation of the previous line, and use spaces or tabs based on your settings.  Try C-j, the default key binding, to quickly see if new-line-and-indent works for you."
emacs,33rbxw,nautola,1 point,Fri Apr 24 21:51:22 2015 UTC,"Maybe you could use an external debugger like this node inspector. Here is a demo video showing the developer used Vim to edit code and debug it using the tool. In the video description, it is said that:   In this short 15 minute video I introduce you to debugging in node.js using the node-inspector package. Everything I do here is cross-platform and IDE-independent so don't get scared off by MacVim."
emacs,33rbxw,tuhdo,1 point,Fri Apr 24 22:13:59 2015 UTC,+1 node-inspector is awesome !
emacs,33rbxw,attilah,1 point,Tue Jun 23 03:48:43 2015 UTC,I have not used it myself but realgud claims to support nodejs debugging  https://github.com/rocky/emacs-dbgr/wiki/Debuggers-Supported
emacs,33odsy,redguardtoo,6,Fri Apr 24 04:16:32 2015 UTC,"This guide recommends one not learn Lisp. I think Emacs being a Lisp distribution is a key reason to use it, and learning Lisp alongside Emacs should definitely be encouraged."
emacs,33odsy,bugsintherugs,0,Sat Apr 25 02:18:25 2015 UTC,"My guide is actually ""how"" instead of ""what"".   Most people (me included) feel pressured if they try to learn the Emacs Lisp as earlier as possible.  Slow down is actually the better way. The love for Lisp will happen naturally after they becomes confident Emacs user. So it's totally fine to postpone studying of Lisp.  Legend around Lisp hacker could have some unnecessary psychological side effect on many people.  The guide is written in Chinese at first and is the most popular one in its kind. I got tons of feedback before translation. So my point is an observation based on many real world cases."
emacs,33odsy,jamespo,5,Sun Apr 26 11:50:33 2015 UTC,Nice guide!
emacs,33ndx1,ReneFroger,19,Thu Apr 23 22:55:19 2015 UTC,It's a little too soon to be making any serious judgements of growth from the change. Give it until a year has passed then we can look at the trend.
emacs,33ndx1,Mitchical,2,Fri Apr 24 00:03:16 2015 UTC,A year? This is the Internet! /s
emacs,33ndx1,grabyourmotherskeys,5,Fri Apr 24 00:10:36 2015 UTC,"Must we really be that skeptical? Bzr is bizarre, obscure at best. This graph might might not be the best, perhaps even self serving. But surely moving to git would have a positive influence on encouraging people to contribute."
emacs,33ndx1,jhirn,3,Fri Apr 24 00:55:51 2015 UTC,"I had a patch accepted to Win32 emacs in late 2013 (before the move to git), and I used a git mirror for the whole thing. It didn't seem to be a problem - I used git to make a patch against what was then the git head, mentioned this was the case, and... that was that. Assuming the mirror is no more than a day or two behind, a patch against its head will likely apply cleanly to the head of the main repo.  I was sceptical then - https://news.ycombinator.com/item?id=8603853 ;) - and I remain sceptical now. A move to git may well represent an improvement in workflow for regular maintainers, but I don't believe it will do a thing in terms of encouraging people to contribute.  Encouraging people to contribute is not a version control problem, and turning a random one-off patch into something that can be added to a long-running project is not a version control problem. I'm not sure why people think that changing version control will make a difference here.  (N.B. - one thing I do not dispute is that bzr is unusual - the whole reason I used the git mirror in the first place was because I don't know how to use bzr ;) I kept up with it for a while, but after the 3rd or 4th time of forgetting what the hell I needed to do to keep it up to date (since I rebuild emacs maybe every 2-3 months) I switched to using the git mirror instead. But I am not sure the solution to this is to abandon bzr entirely, when there's the other option, of simply doing a better job of publicising the git mirror!  (Still, it's done, and, as you might guess from the previous paragraph, I have no objection. I'm just not convinced that it will have the effect people think.)"
emacs,33ndx1,to3m,1 point,Fri Apr 24 01:26:34 2015 UTC,"I use bzr at work and I can say without fear of contradiction that it is superior to git for everyday tasks.   I still can't figure out how to just...revert. Like, discard my existing, un-checked-in changes. Why is this not as simple as  git revert   ???"
emacs,33ndx1,jhirn,3,Fri Apr 24 01:38:00 2015 UTC,git checkout .  You work with BZR every day but that is by faaaaaarrrrr the minority.  Even with the git mirror I'm sure it made things less at hand. It may even be superior but it's not as common.   And it's not like git is not deserving of its popularity. If it we're a fan fair unfortunate popularity then I'd have a different stance. But git is awesome. And magit make it even better.
emacs,33ndx1,parla,3,Fri Apr 24 02:05:54 2015 UTC,"I use ""git stash"" a lot."
emacs,33ndx1,eric-plutono,5,Fri Apr 24 06:43:41 2015 UTC,"git reset --hard HEAD   Or if you want:  git config --global alias.revert ""!reset --hard HEAD""   Then you'll be able to just use  git revert"
emacs,33ndx1,xoo-,7,Fri Apr 24 01:45:14 2015 UTC,wow that is so simple and straightforward :\
emacs,33ndx1,kaushalmodi,3,Fri Apr 24 13:01:41 2015 UTC,"If you use magit, just hit k while the cursor is on that file in the magit status buffer."
emacs,33ndx1,eric-plutono,1 point,Fri Apr 24 02:02:38 2015 UTC,I don't use Magit but that sounds equivalent instead to  git checkout -- ./filename
emacs,33ndx1,TarMil,1 point,Fri Apr 24 02:09:45 2015 UTC,"If you're on an unstaged file, then yes. If you're on a staged file, then it's equivalent to git reset -- ./filename followed by git checkout -- ./filename.  The command for git reset --hard would be X."
emacs,33ndx1,EatMoreCrisps,1 point,Fri Apr 24 08:38:09 2015 UTC,Plus you can hit X and you'll revert your edits from all files.
emacs,33ndx1,RobThorpe,5,Fri Apr 24 16:02:23 2015 UTC,That makes no sense.  Surely a commonly used operation like this would have a simple command?
emacs,33ndx1,tuhdo,4,Fri Apr 24 02:36:35 2015 UTC,"git revert is for reverting changes in your commits. i.e. I had a commit but turned out it is causing trouble, I just git revert <commit_hash>. You can even revert part of a commit.  To remove an unwanted change, simply git checkout <file> to get back the original state of the file. Is it easy?"
emacs,33ndx1,RobThorpe,3,Fri Apr 24 06:16:53 2015 UTC,The point is that to remove all changes you need something like:   git reset --hard HEAD
emacs,33ndx1,tuhdo,1 point,Fri Apr 24 09:42:10 2015 UTC,What's the problem with it?
emacs,33ndx1,xoo-,4,Fri Apr 24 10:11:43 2015 UTC,"the problem with it is that ""git reset --hard HEAD"" does what everyone sane in the world wants ""git revert"" to be.   for example, hg revert does revert.   what do you suspect ""hg revert --clean"" does?"
emacs,33ndx1,tuhdo,4,Fri Apr 24 13:06:27 2015 UTC,"It's just terminology things. If I want to reset to the whole repo to its original commit, I use git reset --hard <commit>. If I want to undo a file, I use git checkout <file>. I think reset is as a good word as revert. On the other hand, revert in git is for creating changes in files that undos your past changes i.e. in earlier commit (i.e. 5 commits away from current commit), you add a for loop and this is causing strange bug. git revert can undo that change: it creates a new change that removes that for loop in your file, and only that piece of code not the whole code in the commit.   If you use magit, this process is very easy and straight forward:   Open magit-log. Navigate to a commit and press RET to open it. In the commit buffer, find a patch you want to undo and press v. Now you have the undo and magit shows it immediately."
emacs,33ndx1,RobThorpe,2,Fri Apr 24 13:44:24 2015 UTC,It's an obscure command for a common operation.
emacs,33ndx1,IvanMalison,1 point,Fri Apr 24 10:32:34 2015 UTC,"What is obscure about it. You don't know git very well if you don't understand what reset does, or why the --hard flag is needed, and the other argument is a pointer to the commit to reset to."
emacs,33ndx1,astrobe,1 point,Tue Apr 28 11:54:50 2015 UTC,"a) losing changes shouldn't be done with a simple command; we've all heard of ""rm temp *"" fiascos.  b) Parla's suggestion, ""git stash create"", has the advantage of being reversible - i.e. your changes are not lost but saved somewhere just in case.  c) my workflow might be different from yours, because I don't find this operation as common as you say. Or may be it's the git workflow which is different from your usual VCS."
emacs,33ndx1,RobThorpe,1 point,Sun Apr 26 08:52:59 2015 UTC,"I generally agree.   a) losing changes shouldn't be done with a simple command; we've all heard of ""rm temp *"" fiascos.   Yes, but the tool could ask after the command.   b) Parla's suggestion, ""git stash create"", has the advantage of being reversible   Yes, but if you need to revert then you still have to do that after the stash, don't you?  Stashing doesn't do it for you. My point is about the trickiness of reverting.   c) ... I don't find this operation as common as you say.   It's not that common, and I make big mistakes.  That said, it has it's uses. Let's say you were a maintainer and you were emailed several patchs for different features. You could create a sandbox taken from origin/master (the tip of head/trunk on the central repo). Then you could apply the patch and see what happens, then revert all the changes and try another patch."
emacs,33ndx1,astrobe,1 point,Sun Apr 26 20:17:59 2015 UTC,"Yes, but if you need to revert then you still have to do that after the stash, don't you? Stashing doesn't do it for you. My point is about the trickiness of reverting.   If we're talking about changes you made on your working tree, no. stashing sort of consists in making a commit of your local changes but on a separate list, and then to come back to the state of your last ""official"" commit.  For changes that already have been committed, see git-rebase below.   It's not that common, and I make big mistakes.   Actually, I had to do that a few times, mainly during big merges with tricky conflicts. When I botch it, I just lookup the short log and do a ""git reset --hard <commit before the merge>"". Also, when I anticipate difficulties, or when I'm going to do some voodoo with unfamiliar git commands, I make a backup of the whole thing (including the hidden .git directory) just in case I mess up really badly with the commit history.  Also, I think the git-rebase command sort of supports your scenario: it lets you pick/exclude commits in a list, rearrange, reword and merge them. But I only used it for the latter operations though."
emacs,33ndx1,xoo-,1 point,Mon Apr 27 00:32:54 2015 UTC,"Yeah, exactly. Why isn't this like one of the top 3 existing commands already? Does nobody besides me ever decide ""this is stupid, just undo it all""? I feel like git must want to work a different way than me."
emacs,33ndx1,eric-plutono,3,Fri Apr 24 01:54:03 2015 UTC,"this is why i use mercurial. no need of forcing yourself to think git is sane just because the masses have done so.  it has a horrible UI, and the implementation and concepts are overly baroque IMO.  mercurial is vastly superior."
emacs,33ndx1,dmoonfire,2,Fri Apr 24 13:02:33 2015 UTC,"Does nobody besides me ever decide ""this is stupid, just undo it all""?   I do it pretty often myself.  Being familiar with Git's internals, it makes sense to me why the command is what it is.  But I think that's the crux of all the fair criticism towards Git for its interface: it assumes you know what's happening on the lower levels.  For people that don't want to learn that stuff (and I wouldn't blame anyone for that) then Git is often a pain in the ass."
emacs,33ndx1,sabof,0,Fri Apr 24 01:59:11 2015 UTC,"At work, we have a lot of ""reset hard"" directions when dealing with things. I don't mind it, because it is pretty precise, but it also takes into account the directed graph of the commits (we merge pretty frequently too).  Though, I found it took about three months of heavy usage before most of my coworkers finally groked Git, since they, they all love it."
emacs,33ndx1,anatolya,1 point,Fri Apr 24 02:47:20 2015 UTC,There are many factors apart from the version control system that affect this graph.
emacs,33ndx1,RobThorpe,7,Fri Apr 24 00:14:43 2015 UTC,bzr is a dead project and switch from bzr was necessary and justified regardless of its effect on increase of contributions.
emacs,33ndx1,dmoonfire,6,Fri Apr 24 13:43:35 2015 UTC,"Yes, that was really why it was done. The Emacs team filed several bugs with the Bzr maintainers and nobody fixed them.  It was only ESR who thought that it would increase contributions. Everyone else just wanted something that would work in the future."
emacs,33ndx1,TarMil,7,Fri Apr 24 15:29:08 2015 UTC,"Recently, Microsoft moved parts of .NET from Codeplex to Git and saw a sharp increase in contribution. Some of it is that tehre are more people on Github, but it was also that Git was friendly toward bringing in changes from one-off contributors."
emacs,33ndx1,sabof,5,Fri Apr 24 02:48:20 2015 UTC,"From Codeplex to Github, you mean. At least some of them were already using git on Codeplex."
emacs,33ndx1,syl20bnr,3,Fri Apr 24 08:53:41 2015 UTC,...and presumably version numbers could be put on top of sharp spikes
emacs,33ndx1,joehillen,3,Thu Apr 23 23:14:19 2015 UTC,"What makes social coding so easy and appealing and would have increase contributions is the fork/pull request model. The DVCS is of little importance here, only the platform and thus the service matters."
emacs,33ndx1,RobThorpe,7,Sat Apr 25 13:39:20 2015 UTC,bzr is arguably superior in many works flow   Not even close.   Is it superior when your repo gets corrupted and you lose work? Because that happened to me multiple times.   How about when it's super slow?
emacs,33ndx1,ChiefEmann,2,Fri Apr 24 03:49:26 2015 UTC,"Yes. As ""to3m"" mentions, most new contributors give patches, they don't commit to the VC system directly, so it's not at all surprising that nothing has changed.  Change depends more on the number of people allowed to commit directly than anything else. (And in Emacs there are a lot of people who can do that, more than in other large projects). We'll see if anything changes in the future.  Personally I'd prefer Subversion to anything else, but that's because I'm used to it."
emacs,33ndx1,trezor2,2,Fri Apr 24 02:44:40 2015 UTC,"I've been meaning to try contributing, once my work schedule lifted.  As a general rule though, VC is not a deciding factor over what projects I contribute on."
emacs,33ndx1,bastibe,2,Fri Apr 24 18:05:27 2015 UTC,"I think one thing reducing the number of potential contributors are the ""hard"" and ""arcane"" requirements set for new contributors to get patches considered and approved.  You have to sign copyright forms, you have to send emails, you have to sign up for mailling-lists, find the right groups, then apply for group-memberships, then contact a mailing list, defend your ""bug"" left and wait for responses and maybe sometime in the future provide a patch etc etc. It lacks a certain flow.  On github, for any project, even Microsoft's, you fork, hack and submit a PR. Done. You have an audience, you have backwards traceability without need to sign up to mailing lists in advance, you can yourself decide what issues you want to pay attention to, etc etc. Being a developer is not an all or nothing sort of thing.  Microsoft has this contributor agreement you have to sign for larger patches, but it's all done online and in seconds.  It flows, is visual and feels modern and efficient.  Anyone who has looked into a controversial Emacs patch or issue from the outside can tell which workflow and system they would rather use.  I'm not saying Emacs should move to github (as I don't believe that would ever happen) but they need to make the contribution process feel smoother. Adopting git was a good start. But it's not sufficient."
emacs,33ndx1,agumonkey,1 point,Sun Apr 26 11:08:07 2015 UTC,Looks like it's all within one standard deviation of the trend line. No need for concern.
emacs,33kiwn,instant_sunshine,6,Thu Apr 23 06:55:15 2015 UTC,"Oh dang, nice! Wanna throw it up on github or anything?"
emacs,33kiwn,many_cakes,7,Thu Apr 23 07:15:41 2015 UTC,Up on github in my config @ https://github.com/ocodo/.emacs.d/blob/svg-modeline-prototypes/plugins/ocodo-svg-mode-line.el
emacs,33kiwn,eric-plutono,2,Thu Apr 23 08:48:09 2015 UTC,Wanna throw it up on github or anything?   Please do OP!
emacs,33kiwn,eric-plutono,2,Thu Apr 23 07:25:04 2015 UTC,See  https://github.com/ocodo/.emacs.d/blob/svg-modeline-prototypes/plugins/ocodo-svg-mode-line.el
emacs,33kiwn,eric-plutono,1 point,Thu Apr 23 08:48:17 2015 UTC,Many thanks!
emacs,33kiwn,chekt,5,Thu Apr 23 08:54:43 2015 UTC,"Available here:  Final version (?) image  https://github.com/ocodo/.emacs.d/blob/svg-modeline-prototypes/plugins/ocodo-svg-mode-line.el  Has a right hand graphic adornment to match the left side one shown, I'll post a new screen grab in a moment.  Please note, I won't be putting this on MELPA, perhaps if I made a selection of different themes... maybe."
emacs,33kiwn,ReneFroger,2,Thu Apr 23 08:46:03 2015 UTC,"Looks sweet, keep it up :)"
emacs,33kiwn,wadcann,2,Thu Apr 23 07:06:45 2015 UTC,Very pretty! :D
emacs,33kiwn,bliow,2,Thu Apr 23 07:48:21 2015 UTC,"Wohooo, looks awesome!  Hey /u/BruceConnor check this out. Maybe we have a new competitor for your famous Smart Mode Line?"
emacs,33kiwn,BruceConnor,1 point,Thu Apr 23 08:26:57 2015 UTC,"This is using Sabof's svg-mode-line-themes, unfortunately there hasn't been much traction / people making new themes, but the toolkit is the most powerful available.  It's also probably hardest to use, if you want things to look awesome, as it requires a lot of SVG wrangling."
emacs,33kiwn,wasamasa,1 point,Thu Apr 23 08:47:45 2015 UTC,"This is using Sabof's svg-mode-line-themes, unfortunately there hasn't been much traction / people making new themes   Well, yeah.  Nobody's implemented an SVG image editor in emacs yet.  :-)"
emacs,33kiwn,BruceConnor,1 point,Thu Apr 23 14:31:05 2015 UTC,Does nxml-mode count? :)
emacs,33kiwn,wasamasa,1 point,Fri Apr 24 15:03:16 2015 UTC,It does with rainbow mode and kurecolor
emacs,33kiwn,lennyt,1 point,Wed Apr 29 16:18:55 2015 UTC,"How is it implemented? Is it just customising faces, or is it setting the mode line contents to be actual glyphs?"
emacs,33kiwn,boraalper4,2,Thu Apr 23 15:26:06 2015 UTC,The mode line is set to be a SVG image and that image is continuously updated.
emacs,33m579,papasores,4,Thu Apr 23 17:18:45 2015 UTC,"Function #'narrow-to-region is your best friend for web stuff. It hides all text, except for what you highlighted.  So you highlight your javascript, call #'narrow-to-region, then turn on #'js2-mode. No html will mess up js2-mode while you work on the javascript section of the file.  When you're done call #'widen. Then turn #'web-mode back on.   I use helper functions to automate the process of highlighting text between <script> or <style> tags; invoking/restoring modes as you narrow and widen.  You can combine #'narrow-to-region with indirect buffers. This will allow you to narrow several regions into different buffers with different modes active in each, but all saving to the same file. The drawback is the font effects are shared by all of these buffers, so mulitple modes lose their value with regards to font effects.  So I just use plain old #'narrow-to-region in the current buffer with a few helper functions to automate the narrow/widen/mode-toggle."
emacs,33m579,Starlight100,2,Fri Apr 24 01:00:54 2015 UTC,"You can also check narrow-or-widen, a utility function to toggle narrow/widen."
emacs,33m579,MonsieurBanana,2,Fri Apr 24 13:02:08 2015 UTC,"Is it not that web-mode supposed to distinguish js or php ""autonomously""? what is the need for #'narrow-to-region?"
emacs,33m579,Starlight100,2,Fri Apr 24 16:41:01 2015 UTC,"Web mode is good for syntax hilighting multiple langs in one file. But not as good as js2 for pure JavaScript. Js2 gives you better completion, refactoring, highlight fun calls, and realtime interactive evaluation with skewer-mode. It's like jumping forward 50 years into the future.  Not a slight on web-mode. I turn on web-mode once I'm finished the js edits.  Here are my helper functions. Paste it into your .emacs or init.el file. It assumes you have js2-mode and web-mode installed. Press ""C-c j"" to focus on javascript. Press ""C-c u"" to go back.  The code has some serious problems, i just threw it together till it behaved the way I want.  EDIT: replaced dependency on evil-mode.  But not tested.  ;; delay execution of this code until `web-mode' is turned on. (with-eval-after-load ""web-mode"" ;;needed to bind a key for `js2-mode-map' (require 'js2-mode) (require 'cl)  (defun my/js2-mode-on-region (start end)     ""Narrow on the active region, then turn on js2-mode.""     (interactive ""r"")     (deactivate-mark)     (narrow-to-region start end)     (js2-mode))  (cl-defun my/focus-javascript () ;using `cl-defun' to allow `return-from'     ""Automatcially narrow between <script> tags, then turn on js2-mode.""     (interactive)     (let ((start-tag-name ""<script"")         (end-tag-name   ""</script"")         (start          nil)         (end            nil))     ;; Find start tag. Search backwards first to give priority to tag pairs     ;; the cursor is currently inside.     (setq start (search-backward start-tag-name nil t))     (when (null start)         ;; if start tag not found backwards, then try forwards.         (setq start (search-forward start-tag-name nil t)))     (when (null start)         (message ""start tag not found"")         (return-from my/focus-javascript nil))     ;;start is found, move cursor down a line, start highlighitng     (next-line)     (move-beginning-of-line nil)     (set-mark-command nil) ;(evil-visual-line)     ;; jump to end tag. always search forward     (setq end (search-forward end-tag-name nil t))     (when (null end)         (deactivate-mark)         (message ""end tag not found"")         (return-from my/focus-javascript nil))     ;;end tag is found. now move cursor up one line     (previous-line)     (move-end-of-line nil)     ;; turn on js2-mode for this region. (and narrow)     (call-interactively #'my/js2-mode-on-region)))  (defun my/unfocus-javascript ()     ""Undo the effects of `my/focus-javascript'.""     (interactive)     (widen)     (web-mode))  ;; key bindings (define-key web-mode-map (kbd ""C-c j"") #'my/focus-javascript) ;; TODO: Use a different technique for this keybind. If we didn't enter ;; `js2-mode' from `web-mode' then we don't want `my/unfocus-javascript' to ;; turn on web-mode. (define-key js2-mode-map (kbd ""C-c u"") #'my/unfocus-javascript))"
emacs,33m579,Starlight100,1 point,Sat Apr 25 11:54:46 2015 UTC,Thank you kind redditor.
emacs,33m579,instant_sunshine,1 point,Sat Apr 25 15:06:43 2015 UTC,"BTW I just realized my code depends on a function from evil-mode. So it may not work for you. When I have time, i'll update the code above to work with standard emacs functions.  UPDATE: I replaced the depency on function #'evil-visual-line with a standard emacs function. It should work for you now, but it's not tested. (although the code has tons problems anyway)"
emacs,33m579,RobThorpe,1 point,Sat Apr 25 15:53:51 2015 UTC,"This would be a neat package, care to make it a github repo so we can contribute and prepare it for release?"
emacs,33m579,eric-plutono,1 point,Tue Apr 28 05:14:15 2015 UTC,"due to ultimate coolness of emacs, I started to learn some elisp. hopefully i'll be able to figure out how these scripts are working."
emacs,33m579,tmtxt,2,Mon May 4 08:57:14 2015 UTC,BTW narrow-to-region is C-x n n and widen is C-x n w.
emacs,33m579,ReneFroger,1 point,Fri Apr 24 18:11:30 2015 UTC,"Also useful is lentic, which enables you to edit the same file/buffer in different major modes at the same time."
emacs,33m579,dzecniv,2,Sat Apr 25 05:09:24 2015 UTC,I'm the author of that post and also a web developer using Emacs.  Great to see that you figure out that you need to load autocomplete and yasnippet before web-mode  I also wrote another tutorial for people who work with JS a lot here https://truongtx.me/2014/02/23/set-up-javascript-development-environment-in-emacs/  Hope that will help
emacs,33m579,dethnight,1 point,Sun Apr 26 07:15:27 2015 UTC,"You need Company to get autocompletion.   And for other things, it depend on your stack. You write mainly in the backend? Or frontend, or .. what? Questions, questions.   To give you a little start, you can find some things on the Emacs communties and packages here."
emacs,33m579,redguardtoo,1 point,Thu Apr 23 18:05:40 2015 UTC,"right now I'm learning basics about php, js and html/css."
emacs,33m579,tuhdo,3,Thu Apr 23 19:27:50 2015 UTC,this can help you start: https://github.com/emacs-tw/awesome-emacs
emacs,33lv1m,deadmaya,2,Thu Apr 23 16:04:29 2015 UTC,Here's a wonderful post by lunaryorn on Syntactic Fontification
emacs,33lv1m,kaushalmodi,1 point,Thu Apr 23 18:54:53 2015 UTC,Thank you for the link
emacs,33lv1m,flexibeast,2,Sat Apr 25 07:24:11 2015 UTC,"My picolisp-mode mostly makes use of font-lock, as i found that easier to implement. In particular, note the docstring for picolisp--font-lock-syntactic-face-function."
emacs,33lv1m,harsman,2,Fri Apr 24 06:39:40 2015 UTC,"Most modes use both. The syntax table is used for basic highlighting of comments and string, and font-lock-keywords is used to highlight keywords and other constructs.  Having a correct syntax table is helpful, because it also enables navigation, for example, marking an entire string."
emacs,33lv1m,RobThorpe,1 point,Fri Apr 24 10:49:28 2015 UTC,"Hm. Looks like I just misunderstood things. They are both used, but for different purposes, right? Can someone point me to article / manual about this things? Please?"
emacs,33lv1m,RobThorpe,1 point,Thu Apr 23 18:06:23 2015 UTC,"The manual describes quite a lot of it (info ""(elisp) Font Lock Mode""). There are different ways of achieving the same thing though, AFAIK."
emacs,33kqal,john_dumb_bear,4,Thu Apr 23 08:49:39 2015 UTC,"https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html#Init-File:   Emacs looks for your init file using the filenames ~/.emacs, ~/.emacs.el, or ~/.emacs.d/init.el; you can choose to use any one of these three names (see Find Init). Here, ~/ stands for your home directory.    [...]   There can also be a default init file, which is the library named default.el, found via the standard search path for libraries. The Emacs distribution contains no such library; your site may create one for local customizations. If this library exists, it is loaded whenever you start Emacs (except when you specify ‘-q’). But your init file, if any, is loaded first; if it sets inhibit-default-init non-nil, then default is not loaded.   [...]   Your site may also have a site startup file; this is named site-start.el, if it exists. Like default.el, Emacs finds this file via the standard search path for Lisp libraries. Emacs loads this library before it loads your init file. To inhibit loading of this library, use the option ‘--no-site-file’.   So it goes site-start.el, your config and then default.el.  However, all I care about (and you probably too) is my init file, for which I use ~/.emacs.d/init.el since I don't want ~ to be cluttered and I have emacs.d anyway.  Now you can also use init.el to load other files, which means you can also split up your initialization into different files.  I have done some of this, putting split-files into ~/.emacs.d/mystuff, with one file for utility functions (myutil.el) and a few others for what amounts to ""emacs applications"" - this includes mu4e (in ""mymail.el"") and orgmode (in ""myorg.el""). Other people opt to configure each major mode in its own file, but I don't see the use in splitting out three lines."
emacs,33kqal,hirnbrot,3,Thu Apr 23 09:11:46 2015 UTC,"Just adding on to this, addressing OP...  Organization is usually pretty idiosyncratic and the emacs philosophy encourages that.  There is no ""usual way"" to organize these files; each user organizes things in the way that makes the most sense for themselves.  And frankly, as a newbie, it's probably a bit silly to worry about organization, just starting out.  Because you are either not going to have very much to organize (initially), or you'll have likely cribbed it from a more experienced user (along with their organization).  And if you stick with emacs, re-organizing your initialization is a periodic ritual for most users anyway...and after you've been using emacs for a while, you'll have a better idea of what you want in your own organization.  If you're looking for suggestions for that, here's a thread from 3 months ago:  http://www.reddit.com/r/emacs/comments/2qhoh0/emacsd_organization/  ...but as you can see from looking there, there is no real agreement on a ""best practice"".  And again, until your own configuration has become cluttered and unwieldy, there's really not much point in concerning yourself too much about organization.  Just remember put in a comment or two when you add something!   That will vastly ease your inevitable re-organization.  It's less about ""getting it right"" than it is about ""getting it right for yourself.""  Or put another way, as a newbie, your initial efforts are going to be ""rough draft"", ""preliminary notes"", ""early experiments"", etc. type efforts anyway.   And you're better off just accepting that than worrying about whether you're using ""best practices"".  After you've got a bit more experience with emacs, you can go back, and put things into a more polished order.  Sort of like moving homes...initially, it's far more important to just get everything you need into your new home than it is to find the perfect placement for everything; you'll have plenty of opportunities to re-arrange your furnishings once you're fully moved in."
emacs,33kqal,forked_tongue,1 point,Thu Apr 23 15:58:52 2015 UTC,"i use org-babel to organise my config file as an Org file, divided into various sections, which i can hide or display as i please. Additionally, my config.org file (which is stored in ~/.emacs.d/) is under version control (using git) so that i can easily roll back changes if they turn out to break something."
emacs,33i17f,mcandre,14,Wed Apr 22 18:07:20 2015 UTC,I would recommend this:  (global-auto-revert-mode 1)
emacs,33i17f,thnetos,9,Wed Apr 22 18:10:30 2015 UTC,You could use magit.  It Just Does That.
emacs,33i17f,rout39574,3,Wed Apr 22 21:56:38 2015 UTC,"Not always, I've found it to be a bit inconsistant when a lot of buffers in a project are open."
emacs,33i17f,jordonbiondo,1 point,Wed Apr 22 23:58:49 2015 UTC,"You should run that down.  I've never seen it, which doesn't mean it's not happening, but it surprises me."
emacs,33i17f,rout39574,2,Thu Apr 23 10:56:31 2015 UTC,"If you're using magit there's a setting for automatically reverting buffers, too. I do not have an Emacs handy, but C-h a magit RET should do."
emacs,33i17f,locbrean,2,Wed Apr 22 18:32:47 2015 UTC,"Ah, (global-auto-revert-mode 1) should do the trick, provided buffer modifications have been saved to disk and either committed or stashed."
emacs,33hqam,pallagun,3,Wed Apr 22 16:48:34 2015 UTC,"For code completion/refactoring AST (Abstract Syntax Tree) information is needed and GCC does not output this, because RMS fears this info may be used by non-free software.  But clang can provide this info and there are already emacs packages which utilize it: https://encrypted.google.com/search?q=emacs+clang"
emacs,33hqam,kcin,3,Wed Apr 22 17:32:32 2015 UTC,"I thought they were working on GCC outputting the AST? I don't think RMS is the maintainer for that is he? I thought the maintainer basically said ""Screw you, I am doing it."" Or maybe I read all the threads wrong and it has been a while."
emacs,33hqam,sigzero,3,Wed Apr 22 18:41:40 2015 UTC,"If you're remembering a discussion from emacs-devel, that was David Engster (CEDET contributor), and he stopped, according to the most recent discussion on that subject."
emacs,33hqam,hvis,1 point,Wed Apr 22 19:27:19 2015 UTC,"Steffan Monnier did say he would include it despite whatever RMS thinks, but then as /u/hvis said, the developer working on that code decided to stop."
emacs,33hqam,eric-plutono,2,Thu Apr 23 08:18:59 2015 UTC,"Note that the AST itself isn't too useful for code completion (and associated features). At least, not the AST dump as implemented by Clang. See the conclusion of this discussion, for example: https://github.com/mehw/company-mode/commit/230cfc61efcc0cc49eb05a1f980f684af1e1b936#commitcomment-10182692  CEDET might be able to fill the gaps, but it's unlikely to be perfect at it."
emacs,33hqam,hvis,2,Wed Apr 22 19:27:56 2015 UTC,"This is the ""wrong half"" -- it is about generating machine code from some intermediate format.  Maybe useful for compiling Emacs Lisp, but not for analyzing C or C++ code.  Code analysis could be done today by writing a GCC plugin.  This is actually quite easy to do.  I don't know why nobody has done it yet, it doesn't require any special permission from RMS or anybody else."
emacs,33h47c,MyNameIsFuchs,9,Wed Apr 22 14:02:20 2015 UTC,I did not experience your problem... Can you show a minimal example where AUCTeX starts messing up? Which version of AUCTeX are u using?
emacs,33h47c,Knusper2000,2,Wed Apr 22 14:29:15 2015 UTC,version: 11.88.4  I'm having trouble reproducing it since it messes up at all kinds of different places and renders fine when I go to the region in the file where it starts to mess up and run font-lock-fontify-buffer. Until it messes up again...
emacs,33h47c,Knusper2000,1 point,Thu Apr 23 15:41:11 2015 UTC,"try normal emacs instead of prelude ... if the bug still persits there, its not a bug in prelude..."
emacs,33h47c,ccharles,5,Sat Apr 25 12:54:33 2015 UTC,"Can you provide a Short, Self-Contained, Correct Example?"
emacs,33h47c,RobThorpe,3,Wed Apr 22 21:50:14 2015 UTC,I wish I could. This is how it's been today:   It happens and messes up the font-lock I go up a few lines and run font-lock-fontify-buffer and it is perfect again. I go back down a few lines and it's good for a while.   The problem is that it's intermittent and I haven't been able to figure out what character/line offends. It happens at the beginning of the file and also further down. So it's not one spot. It has helped a lot to resize the frame so that I only have 50 or so lines.
emacs,33h47c,RobThorpe,1 point,Wed Apr 22 22:30:32 2015 UTC,That does sound like a bona fide bug that needs reporting.  Have you tried (jit-lock-mode 0)? I.e. disabling jit-lock-mode.
emacs,33h47c,RobThorpe,1 point,Thu Apr 23 13:29:00 2015 UTC,Thanks for helping. I'm definitely willing to track this down and report a bug. But I need help. I'll try the jit-lock-mode today and report back.  It's tough to get it reproduced since it's intermittent.
emacs,33h47c,great_bushybeard,1 point,Thu Apr 23 13:42:55 2015 UTC,"Also, do you have any other modes the affect the font-locking of the buffer. E.g. other modes that highlight certain things.  They could be affecting the use of font-lock by AUCTeX.  BTW I don't use AUCTeX, I'm just telling you the generic stuff to try if there's a font-locking problem."
emacs,33h47c,RobThorpe,1 point,Thu Apr 23 13:48:17 2015 UTC,Nothing really. I just disabled smart parens and toggled rainbow parens a few times but it's still happening either way. All the other minor mode don't really interfere with it.  I've just run again into problems with (jit-lock-mode 0) :(
emacs,33h47c,vermiculus,1 point,Thu Apr 23 15:31:48 2015 UTC,I'm out of ideas then.
emacs,33h47c,till_apert,1 point,Thu Apr 23 16:09:01 2015 UTC,"I'm having the same problem and it's been driving me crazy. I'm using a similar setup, but I thought I had nailed it down to using Smart Parens. I disabled it for a while and thought I didn't have the problem.  Did you ever find a solution?"
emacs,33h47c,username223,1 point,Tue Jun 9 10:27:01 2015 UTC,"I'm not crazy! :)  But no :(  I just bound a key to font-lock-fontify-buffer which kind of helps it since i can just press that key a lot.  If you submit another thread, ping me here so I can participate."
emacs,33h47c,Knusper2000,3,Tue Jun 9 12:10:23 2015 UTC,Have you tried normal Emacs Latex mode instead of AUCTex?
emacs,33gsh6,curious-scribbler,3,Wed Apr 22 12:11:23 2015 UTC,"It’s been a while since I’ve used writeroom-mode, but I would like to suggest Olivetti as an alternative.  I use it conjunction with the following custom function:  (defun ejmr/toggle-writing-mode ()   ""Toggle a distraction-free environment for writing.""   (interactive)   (cond ((bound-and-true-p olivetti-mode)          (olivetti-mode -1)          (olivetti-toggle-hide-modeline)          (toggle-frame-fullscreen)          (menu-bar-mode 1))         (t          (olivetti-mode 1)          (olivetti-toggle-hide-modeline)          (toggle-frame-fullscreen)          (menu-bar-mode -1))))   I find it gives me a nice, distraction-free environment for writing."
emacs,33gsh6,eric-plutono,1 point,Wed Apr 22 22:59:05 2015 UTC,"Hey, thanks for the code and I shall start using Olivetti along with your code.   Meanwhile, I don't fully understand your code (fairly new to emacs) if you could just give me a quick run down it'd be great."
emacs,33gsh6,eric-plutono,6,Thu Apr 23 04:54:23 2015 UTC,"…could just give me a quick run down it'd be great.   No problem.  defun defines a function.  It often looks like this:  (defun name (paramaters)     ""String explaining what the function does.""     (interactive)     ; More code here...     )   That (interactive) part makes the function available as a command, e.g. it allows me to do stuff like M-x ejmr/toggle-writing-mode.  The rest of the function is a ‘condition’, created by cond.  In this case it’s similar to if-else constructs, if you’re familiar with those from other programming languages.  The function has two conditions:  (cond ((bound-and-true-p olivetti-mode)         ; Code to run if this is true.       )       (t         ; Code to run if the above is not true.       ))   The function bound-and-true-p is a useful way to tell if a minor mode is enabled.  If the mode is enabled then bound-and-true-p will return true.  So this is how the function does two different things depending on whether or not olivetti-mode is enabled.  If Olivetti is enabled then the function turns it off:   (olivetti-mode -1) A common way to turn off a mode. (olivetti-toggle-hide-modeline) Restore my mode-line. (toggle-frame-fullscreen) A built-in Emacs function.  You can use C-h w (“whereis”) to find out which keys such commands are bound to. (menu-bar-mode 1) Re-enable the menu bar.  Like point number one, this is a common way to turn on a mode.   If Olivetti is not enabled then the function turns it on and effectively performs the inverse of all of the above.  You can see how the two use -1 and 1 as ways to enable or disable Olivetti and the menu-bar, respectively.  Then I bind a key to ejmr/toggle-writing-mode, using either define-key or global-set-key (using C-h f will help you understand these functions), and then I’m good to go.  Hope that makes sense!  Feel free to ask anything else if it doesn’t.  Edit: Formatting."
emacs,33gsh6,eric-plutono,2,Thu Apr 23 05:17:55 2015 UTC,"Thanks for the detailed explanation. This is what I understand.   When you enable Olivetti the menu bar and the mode-line go away while the frame goes full screen. And when you disable it, everything comes back. If I understand correctly then Olivetti also always you to set the text area to a certain size, that is have it in the center and so on.   Now how I do I change the code to have Olivetti enabled right from when emacs is launched and across all buffers.   Once again that was a great explanation. Thanks a ton."
emacs,33gsh6,eric-plutono,1 point,Thu Apr 23 05:58:28 2015 UTC,"When you enable Olivetti the menu bar and the mode-line go away while the frame goes full screen. And when you disable it, everything comes back.   Correct.   Now how I do I change the code to have Olivetti enabled right from when emacs is launched and across all buffers.   By using “hooks.”  This will enable Olivetti every time you open a file:  (add-hook 'find-file-hook #'turn-on-olivetti-mode)   You can also add a hook to enable it when Emacs starts:  (add-hook 'after-init-hook #'turn-on-olivetti-mode)"
emacs,33gsh6,eric-plutono,2,Thu Apr 23 06:06:20 2015 UTC,"Hey eric, thanks for all your help. I have been wrecking my brains over this for a whole day.  Thanks again :-)"
emacs,33gsh6,eric-plutono,2,Thu Apr 23 06:07:53 2015 UTC,"Glad to help.  Now for some self-promotion, heh: I write about Emacs sometimes on my blog, so you may find some articles about packages and such there that'll help you with customizing Emacs."
emacs,33gsh6,permafrosty,2,Thu Apr 23 06:15:44 2015 UTC,"Thanks for the link Eric. The design there looks neat :-) I'll give it a read. I am using emacs to write screenplays and prose. If you have any tips or cool tweaks that could help a writer using emacs, please shoot away."
emacs,33gsh6,capitaomorte1,2,Thu Apr 23 06:18:18 2015 UTC,"I am using emacs to write screenplays...   I am doing the same for the game I'm developing, and I blogged about how I write screenplays in Emacs."
emacs,33gsh6,eric-plutono,2,Thu Apr 23 06:20:14 2015 UTC,Cool. I am on it right now. You have some posts that are very helpful for a newbie like me. I have been trying to understand use package for like ages now.... I guess finally I will. Thanks once again.
emacs,33gsh6,chipsonmyshoulders,2,Thu Apr 23 06:24:52 2015 UTC,I just read your post on screenwriting and was wondering why didn't you try out fountain-mode?
emacs,33f39b,metx,12,Wed Apr 22 00:27:06 2015 UTC,"Things I've stopped using and why:  Note: these are all very nice, well written packages, I don't think there is anything wrong with them, they just don't fit my workflow. They could be very nice for other people and I would implore you all to try them if you haven't.  Powerline. I went from using powerline, to using a custom theme, to using my own current minimal mode-line. There is just so much information in default mode-lines that I don't care about or so important that I need to never not see it. Since moving away from powerline I have never once thought, ""I still wish I had (minor modes|current project|git status|time|weather|etc...) in my mode line.""  Moving from a really flashy mode-line to this has been very nice.  highlight-indentation I no longer use it for whitespace dependent languages like python, haml, and sass. I found it generally didn't make anything easier on me and only served to cause a noticeable lag which restricted my editing capabilities.   pretty-mode (and others like it) For Lisps and probably other languages, replacing 'lambda' with the symbol, will mess up indentation of arguments. I found it bothersome that I would need to turn off the mode and reindent a file before being able to commit it with proper indentation. In the end I just don't see a lot of value in it. I'm sure for other language it could be nice, but I don't like it for lisps."
emacs,33f39b,jordonbiondo,7,Wed Apr 22 02:52:18 2015 UTC,"Well i removed powerline for smart-mode-line a year ago, it's working great :) Flashy, but not too flashy."
emacs,33f39b,tampix77,4,Wed Apr 22 07:55:29 2015 UTC,I removed pretty-mode because 24.4 includes prettify-symbols-mode which is much more customizable.
emacs,33f39b,schmidthuber,3,Wed Apr 22 06:09:18 2015 UTC,"I did all of this for the exact same reasons, although not recently. It's always good to see that you are never alone in your thinking. :D"
emacs,33f39b,dholmster,7,Wed Apr 22 22:52:00 2015 UTC,"I recently removed evil mode, it felt freeing.  More recently though, I added it back ;)  gotta be productive sometime"
emacs,33f39b,Is_At_Work,3,Wed Apr 22 00:43:44 2015 UTC,"Why would you wanna remove it? As a non-vim guy, I wish I knew the vim-way of editing files. I hear it is much more efficient. Sounds like evil-mode gives you the best of both worlds."
emacs,33f39b,kraml,6,Wed Apr 22 06:22:17 2015 UTC,"Take the time to learn it; Evil mode will make you way more efficient at editing (source: been there, done that)."
emacs,33f39b,tincholio,2,Wed Apr 22 08:03:29 2015 UTC,"I had a few solid vi years and got it into my muscle memory, and it's still there if I use vim, but I've felt no need to go with Evil.  Muscle memory is the key here.  I don't think through how I'm going to navigate around, my fingers do it.  Hence, it's irrelevant how conceptually elegant the input 'language' is except when learning it.  Muscle memory bypasses all those mental pathways."
emacs,33f39b,EatMoreCrisps,1 point,Wed Apr 22 13:01:46 2015 UTC,"I came from Vim, but I would prefer to not use evil for a few reasons.    Vim is great for editing code, but Emacs shortcuts expand very well to any form of text (see org-mode) many modes rebind keys like C-n or C-k to special functions, or other chords many modes will not work with evil bindings, dired until recently, and magit are two common ones for me. it breaks some special features (I'm thinking of some paredit navigation features that can't be done easily with vim bindings).   Personally, I think I rely too much on vim keys.  I get easily excited and slap away at the keyboard but I'm much more concentrated with the standard Emacs bindings. For instance, most of my straight Emacs navigation is with ace-jump-mode, while I'll often hold j to move 10 or more lines in evil.   The big one that holds me back is the fact that I often will work on my Macbook without my external Kinesis Advantage, and my pinkies can't take that kind of pounding.  If I could always have my thumb Control and Meta keys, I'd go straight Emacs and never look back."
emacs,33f39b,nautola,6,Fri Apr 24 21:43:54 2015 UTC,"Not really remove, but I've been going back and forth between ido and helm, auto-complete and company."
emacs,33f39b,qnix,6,Wed Apr 22 00:48:54 2015 UTC,"I'm on the verge of giving up helm, which I've been trying from ido for the last 10+ weeks.  I haven't found any real use for much of the extra power (multi-select => actions, for instance), and the way it redefines and ignores key conventions really gets on my tits.  I frequently can't stop it doing some automatic thing that was not what I wanted.  The way its window may be miles away from the minibuffer is also frequently disorienting.  Perhaps before I give up I'll compile a list of my gripes and irritations and see if some of the experts here can help me to love helm."
emacs,33f39b,EatMoreCrisps,3,Wed Apr 22 13:10:25 2015 UTC,"I feel the exact same way. maybe this new ivy thing might be a possible replacement, think I'll try it out when I get a chance. otherwise I'll be back to ido-vertical, with helm only for the kill ring"
emacs,33f39b,kill_jester,1 point,Wed Apr 22 15:53:02 2015 UTC,if that is the case you should consider removing Helm and use browse-kill-ring instead.
emacs,33f39b,tuhdo,2,Wed Apr 22 16:14:09 2015 UTC,"that's what I used before I switched to helm. I prefer helm to it, and don't mind keeping helm installed even if I only use a couple of its features (I like helm-occur a lot too)"
emacs,33f39b,kill_jester,3,Wed Apr 22 16:45:28 2015 UTC,If so maybe you could find other helm commands like helm-do-grep or helm-descbinds or helm-imenu or helm-recentf useful.
emacs,33f39b,tuhdo,2,Wed Apr 22 17:14:09 2015 UTC,"I'm also in the middle of switching from ido to Helm. I wanted to replace ido with something a bit less hacky. I've got it tweaked enough to be almost as comfortable as ido, except for two things.  First, it doesn't sort by frequency of use. I really liked that ido kept recently used things at the front of the list, since 99% of the time the thing I want is within the first couple of items after a couple of fuzzy-search letters. There's helm-adaptive-mode, but it doesn't actually do anything yet.  Second it's somewhat asynchronous, and I'm frequently able to type faster than Helm can keep up. When I get ahead of it, it jams up and stops doing or responding to anything, requiring me to restart my minibuffer command. This is especially apparent on my Raspi. (Turns out this is a bug in Emacs not Helm!)"
emacs,33f39b,skeeto,1 point,Wed Apr 22 21:26:23 2015 UTC,"Only if you use commands that use async source like Helm-do-grep or helm-locate. If you use sync source, candidates should always appear as you type."
emacs,33f39b,tuhdo,1 point,Thu Apr 23 01:44:01 2015 UTC,"The place where I've noticed it the most is actually M-x since its fuzzy matching is asynchronous (helm-M-x-fuzzy-match). I'll sometimes type the whole command out so fast and hit ""enter"" that the filter hasn't yet caught up, breaking it.  Edit: still happening with fuzzy matching off, so it's not that."
emacs,33f39b,skeeto,1 point,Thu Apr 23 01:57:08 2015 UTC,"Hmm it's weird I tried with both fuzzy matching on and off and it works fine for me. Are you running Emacs directly on RasperryPi? If so, probably the machine is not powerful enough for Helm. Even with my core i3 laptop, I don't see such issue, and that is with more than 100 packages installed. Are you using latest Helm?  Not related you should give helm-select-action a key:   (define-key helm-map (kbd ""C-z"")  'helm-select-action) ; list actions using C-z   It will help you Helm usage."
emacs,33f39b,tuhdo,1 point,Thu Apr 23 02:56:55 2015 UTC,"Are you running Emacs directly on RasperryPi?   Yup, and it works fine, even with Helm, the vast majority of the time. My older model 1 struggled with Emacs sometimes, but Emacs on the new model 2 feels almost like a normal computer. I can even run Elfeed on it without trouble.  I experience the same Helm issue on my higher end (i7) workstation, just less often.   Are you using latest Helm?   Yup, helm-20150422.952. I reproduced it just now in a bare emacs -Q on a regular laptop to be sure. You can see it for yourself like so:   Install Helm from MELPA M-x helm-mode Type out M-x pop-to-buffe and stop (notice the missing ""r""). As rapidly as you can, hit r then RET. Notice it gets stuck (""No Match"") without actually running the command. If you hit r and RET slowly it works fine. The behavior changes depending on how quickly I type, which is pretty frustrating.   Now that I'm able to reproduce it in a bare Emacs I should open an issue on it. I've been hesitating to report bugs until a get a better feel for Helm, since I'm still new to it."
emacs,33f39b,skeeto,1 point,Thu Apr 23 03:50:31 2015 UTC,"What you are using is not helm-M-x, but stock execute-extended-command. Maybe give helm-M-x command a try to see if it works. Setting fuzzy matching helm-M-x-fuzzy-match only has effect on that command. I am trying and having no problem as fast as I could type.  EDIT: Btw, what's your Emacs version?"
emacs,33f39b,tuhdo,1 point,Thu Apr 23 04:18:27 2015 UTC,"With helm-mode enabled M-x is basically the same as M-x helm-M-x, and I can reproduce the issue the same way using helm-M-x directly. I've tested it on 24.3, 24.4. and 24.5 in Debian all with the same results."
emacs,33f39b,skeeto,1 point,Thu Apr 23 04:43:21 2015 UTC,"Do you install it from Debian repository or build it yourself? I cannot reproduce this even after dozen time I typed, and really fast. I'm not sure but maybe how Emacs is built could be related. If you look at this issue (scroll down until you see the profiler log from tsdh), you can see that in his log the jit functions were called within Elisp, while in my profiler log (a few answer below) shows that the jit functions were called within C redisplay function and thus I did not having hang for slow buffer updating as compare to his."
emacs,33f39b,tuhdo,1 point,Thu Apr 23 04:59:20 2015 UTC,GIF demo: http://i.imgur.com/RTVe7Yw.gif
emacs,33f39b,skeeto,1 point,Thu Apr 23 04:53:19 2015 UTC,"That's not helm-M-x. That's just stock execute-extended-command with Helm interface and you won't have fuzzy matching enabled even if you set helm-M-x-fuzzy-match. The helm-M-x command is far different:   It actually has fuzzy matching. It has much more accurate matching because helm-M-x has its own sort function. It shows you key bindings next to commands if available. It is more optimized.   EDIT: I actually can reproduce with stock M-x. But helm-M-x works fine. You should really try it. How I reproduced (as you described):   M-x (stock one, not helm-M-x) Type pop-to-buffe. Press r and then RET almost simultaneously to simulate fast typing. [No match] appears.   Did not encounter this issue with helm-M-x."
emacs,33f39b,tuhdo,1 point,Thu Apr 23 05:05:55 2015 UTC,"That's not helm-M-x. That's just stock execute-extended-command with Helm interface and you won't have fuzzy matching enabled even if you set helm-M-x-fuzzy-match. The helm-M-x command is far different:   It actually has fuzzy matching. It has much more accurate matching because helm-M-x has its own sort function. It shows you key bindings next to commands if available. It is more optimized.   EDIT: I actually can reproduce with stock M-x. But helm-M-x works fine. You should really try it. How I reproduced (as you described):   M-x (stock one, not helm-M-x) Type pop-to-buffe. Press r and then RET almost simultaneously to simulate fast typing. [No match] appears.   Did not encounter this issue with helm-M-x."
emacs,33f39b,tuhdo,2,Thu Apr 23 05:37:17 2015 UTC,"I personally think that both ido and helm are indispensable. I use ido for buffer switching, bookmarks, and smex (kind of). Helm is incredibly useful because of helm-swoop, helm-semantic-or-imenu (shows you all functions and variables in the buffer), and helm-find-files, which is like Sublime's Cmd-T."
emacs,33f39b,defenestre,1 point,Sat Apr 25 17:44:54 2015 UTC,"That sounds like what I should do.  Switching files is where helm particularly drives me nuts.  I hadn't looked into helm-semantic-or-imenu, I think I should.  helm-descbinds is another I like, especially that you can execute it when you find it."
emacs,33f39b,EatMoreCrisps,3,Sat Apr 25 18:07:12 2015 UTC,"Which completion system are you settling on, I keep reading good things about Company mode, every time I give it a try, it's a PITA."
emacs,33f39b,instant_sunshine,1 point,Wed Apr 22 04:01:14 2015 UTC,Really? I've found company to be dramatically easier to set up and more convenient to use than auto-complete ever was. What makes it a PITA for you?
emacs,33f39b,ccharles,1 point,Wed Apr 22 18:38:25 2015 UTC,See http://www.reddit.com/r/emacs/comments/33f39b/what_have_you_recently_removed_from_your_emacs/cqlrw2u
emacs,33f39b,instant_sunshine,1 point,Thu Apr 23 06:53:05 2015 UTC,"you know ido and helm can co-exist through  helm-completing-read-handlers-alist, right?"
emacs,33f39b,redguardtoo,7,Wed Apr 22 13:52:01 2015 UTC,"I removed guru mode, I've had it since I started using emacs. Nice to force learning keybindings, but sometimes it's an inconvenience."
emacs,33f39b,slbmeh,2,Wed Apr 22 00:52:18 2015 UTC,"I agree. As instant_sunshine says, it's silly.  This is especially true when viewing documents. There's no reason not to use the keypad in the case."
emacs,33f39b,RobThorpe,5,Wed Apr 22 09:48:25 2015 UTC,"Cursors or C-p/n/f/b isn't something that should ever be considered guru.  Those bindings were made originally for keyboards which lack dedicated arrow keys.  Guru mode is silly, unless it's just counting a few single char navs and saying ... ""Hey, navigate by word|block|sentence|paragraph|isearch"""
emacs,33f39b,instant_sunshine,6,Wed Apr 22 04:03:13 2015 UTC,I recently stopped using bind-key in favor of hydra to create my groups of key-bindings.
emacs,33f39b,eric-plutono,6,Wed Apr 22 01:20:42 2015 UTC,"I think I need to get over my distaste for the ""color"" metaphors in hydra and try it out."
emacs,33f39b,instant_sunshine,3,Wed Apr 22 04:03:53 2015 UTC,There are now options with more descriptive names and the colors are only shortcuts for certain combinations of these.
emacs,33f39b,CQQL,3,Wed Apr 22 09:35:52 2015 UTC,"By now it also offers a different option of setting a "":exit"" and a "":foreign-keys"" key. See the documentation."
emacs,33f39b,hirnbrot,1 point,Wed Apr 22 09:46:55 2015 UTC,Maybe my attempt to introduce the mode would help explain some about the colors.
emacs,33f39b,eric-plutono,1 point,Wed Apr 22 22:47:07 2015 UTC,You can also use magit's style for that. The package is discover and was written by Mickey P of Mastering emacs. Here's a simple example of mine: https://gitlab.com/emacs-stuff/discover-packages
emacs,33f39b,dzecniv,1 point,Thu Apr 23 20:42:17 2015 UTC,I think maybe I will stick to guide-key and regular prefix maps.
emacs,33f39b,instant_sunshine,4,Fri Apr 24 02:06:44 2015 UTC,"Company mode.  This is my second time around the block with allegedly superior completion mode.  Back to AutoComplete, which just works.  Things Company mode did nicely, use Pos-tip instead of the more problematic PopUp.el.   AutoComplete however, actually completes the things I want, with almost no config. (Note: I have a slight delay to allow YASnippet to do it's stuff, I also enable ac-source-filename, the rest is default)"
emacs,33f39b,instant_sunshine,7,Wed Apr 22 03:58:13 2015 UTC,"I do not need to configure company to do anything aside from copy/paste configuration. It just works. What was wrong with your side, just curious?"
emacs,33f39b,tuhdo,5,Wed Apr 22 06:33:12 2015 UTC,Using a programming language other than the 3 Company supports
emacs,33f39b,Bratmon,4,Wed Apr 22 14:11:30 2015 UTC,That's not a good answer. A lot of people use third-party backends with it successfully.
emacs,33f39b,hvis,0,Wed Apr 22 14:31:21 2015 UTC,You asked what didn't work without a bunch of extra configuration.   That's what doesn't work without a bunch of extra configuration.
emacs,33f39b,Bratmon,4,Wed Apr 22 14:41:32 2015 UTC,"So is auto-complete. You should visit Melpa and type in the search box ac-. There, you see more than 30 packages using auto-complete and if you want completion for a language, you have to install and set it up."
emacs,33f39b,tuhdo,1 point,Wed Apr 22 14:51:41 2015 UTC,"The grand-grand-grand-grandparent (not me) asked what went wrong with /u/instant_sunshine's configuration. Not what didn't work without any extra configuration.  We also seem to disagree on the definition of ""a bunch""."
emacs,33f39b,hvis,1 point,Wed Apr 22 19:15:33 2015 UTC,Such as?
emacs,33f39b,DasEwigeLicht,2,Wed Apr 22 18:40:35 2015 UTC,"I'll limit it to ones I've used in the last 48 hours:  Verilog, assembly, Lua, prolog."
emacs,33f39b,Bratmon,1 point,Wed Apr 22 19:37:23 2015 UTC,"Ah, so you like the dictionary-based completion that Auto-Complete offers by default?  Personally, I find the concept atrocious. The closest thing that Company offers out-of-the-box is company-keywords, but it's only for keywords (but the user can change that with a bit of Elisp)."
emacs,33f39b,hvis,2,Wed Apr 22 20:24:39 2015 UTC,"Unlike company-mode, it's better than nothing."
emacs,33f39b,Bratmon,1 point,Wed Apr 22 20:30:05 2015 UTC,"If someone was interested enough in that completion feature to invest 1-2 hours, writing that kind of backend is pretty trivial."
emacs,33f39b,hvis,1 point,Thu Apr 23 01:31:34 2015 UTC,How about using ctags to generate tags than using built-in company-etags?
emacs,33f39b,tuhdo,1 point,Thu Apr 23 01:39:35 2015 UTC,"I find auto-complete ""just works"" better.  I found that just following the basic documentation, didn't give me workable Company mode completion, whereas AC always has.  If you're interested, look at https://github.com/ocodo/.emacs.d/commit/d74a8691164d9113e39dc858f2992bf42cfe069e ...   (and more specifically https://github.com/ocodo/.emacs.d/blob/d74a8691164d9113e39dc858f2992bf42cfe069e/modes-init/init-company.el)  Most notably, with that setup, I see no emacs-lisp completion menu (as noted above) ... which is crap.  However, regardless of advice / cajoling / imploring etc. I won't be switching back to Company mode any time in the near future.    As always anyone else, use what you like etc. etc."
emacs,33f39b,instant_sunshine,1 point,Thu Apr 23 06:49:42 2015 UTC,"So, the problem you are having with company is that it doesn't give you a command name immediately. Probably your idle delay is too high. If you set company-idle-delay to 0.1 or even 0 (which means it always gives you completion popup), it happens immediately when you stop typing. Also set company-minimum-prefix-length to 2, so company popup activates when you have prefix of at least 2 characters. I'm using Spacemacs and it is working great here, with the above settings.  EDIT: Here I enabled auto-complete in Spacemacs for trying. Now, when I run auto-complete on empty prefix, it gives me nothing while company-mode gives me all."
emacs,33f39b,tuhdo,0,Thu Apr 23 07:11:59 2015 UTC,Bookmarked for the time (????) when I might feel like giving Company another go.
emacs,33f39b,instant_sunshine,1 point,Thu Apr 23 08:50:38 2015 UTC,"I didn't try to reproduce the issue you encountered, but I did notice two things in the second commit: The feature/file should be company (not company-mode) and the progn should be quoted.  In other words, it should be something like:  (eval-after-load 'company   '(progn      (global-company-mode 1)      (company-quickhelp-mode 1)      (dolist (backend (list 'company-robe                             'company-elisp                             'company-yasnippet))        (add-to-list 'company-backends backend))))   The result, I think, is that your settings may not have been applied at all (though I would have expected there to have been errors in that case, e.g. for calling undefined functions). But I can't speak to whether that's really what caused the problem.  Here's a condensed version of my own config for company (as a happy user), in case you ever decide to give it another look.  (add-hook 'after-init-hook #'global-company-mode) (add-hook 'after-init-hook #'company-statistics-mode t)  (with-eval-after-load 'company   (set-default    (make-variable-buffer-local 'company-backends)    '(company-capf      (company-dabbrev-code company-gtags company-etags company-keywords)      company-files      company-dabbrev))   (setq company-minimum-prefix-length 2         company-tooltip-flip-when-above t))"
emacs,33f39b,johnmastro,1 point,Sat May 2 01:26:36 2015 UTC,"Thank you.  I expect I'll give it a try in the not too distant future.  The only thing about AutoComplete which I find annoying is the popup, which is often malformed.  So that's the only motivation for me to switch.  Not really a big thing but enough for me to feel like switching occasionally."
emacs,33f39b,instant_sunshine,3,Sat May 2 04:55:09 2015 UTC,Ido for Helm benchmark-init for esup advice.el for nadvice.el flet for cl-letf
emacs,33f39b,tampix77,7,Wed Apr 22 07:53:40 2015 UTC,"Semantic. It slows the system, and doesn't work for non-trivial codebases anyway. Indexing C++ files relying on Boost headers chokes it up completely. It's quite a shame: when it worked (in simple cases), the code navigation and autocomplete features were impressive."
emacs,33f39b,gepardcv,6,Wed Apr 22 02:46:54 2015 UTC,"I've become quite cynical of tools claiming to do anything more complicated than syntax highlighting of C++ code, unless it's invoking the compiler. The language is so insanely complex in some edge cases (that come up frequently in real code bases) that the compiler is the only thing I really trust to be able to properly parse it.  Not to mention that a pure elisp implementation of a C++ parser is going to be insanely slow for any non-trivially sized codebase. When semantic was able to parse our code it was constantly hanging.  And on a rather disappointing note, at least partially because of RMS paranoia, you're basically stuck using clang for these tools.  The state of tools for C++ is pretty poor right now. I hope it gets better (or maybe I should start contributing to the tools)."
emacs,33f39b,nat1192,3,Wed Apr 22 04:35:27 2015 UTC,Visual Studio? :)
emacs,33f39b,gepardcv,1 point,Wed Apr 22 05:19:40 2015 UTC,irony-mode is probably the best setup right now for C++
emacs,33f39b,aport,3,Wed Apr 22 16:39:27 2015 UTC,"gnu global, company-mode (company-gtags), ggtags.el  good enough for me for real world c++ development.  if you use cmake, consider my cpputils-cmake"
emacs,33f39b,redguardtoo,2,Wed Apr 22 13:38:55 2015 UTC,"It only parses once and cache the tags. So you go make a coffee and come back when Semantic finishes parsing. Beside, don't use Semantic for large scale operation like code completion (because then it will have to analyze your code base) and global refactoring (again have to analyze your code base). Just it for small scale operation like jump to tag in current file, or doing small scale refactoring or display function signature at the top that is out of screen."
emacs,33f39b,tuhdo,3,Wed Apr 22 06:27:54 2015 UTC,"In theory, yes. In practice, I had the caches turned on, and let them finish running a couple of times. Saw a bunch of errors about the parser failing on macros somewhere deep in the STL or Boost. Saw the caches written to disk. After an Emacs restart, same project, jump to tag, and again, full rescan."
emacs,33f39b,gepardcv,1 point,Wed Apr 22 07:20:14 2015 UTC,"Which Emacs verson are you using? I have no problem with Emacs 24.4 and Emacs 24.5 for those sources. If you use any older outdated Emacs, consider upgrading."
emacs,33f39b,tuhdo,3,Wed Apr 22 07:28:33 2015 UTC,helm
emacs,33f39b,aurelius23,6,Wed Apr 22 10:52:29 2015 UTC,Fascinating. I think this is the first time I've heard of someone dropping paredit after using it for a bit (instead of becoming addicted to it.)
emacs,33f39b,seagu,1 point,Wed Apr 22 15:50:54 2015 UTC,"I also ditched paredit. When it helps it's great, but when it hinders it's infuriating."
emacs,33f39b,seagu,2,Wed Apr 22 19:08:40 2015 UTC,I found it annoying until I learned C-q (to inject lone parens and quotes) and select + C-w (to kill lone parens and quotes). I only have to use those once every few weeks.
emacs,33f39b,capitaomorte1,2,Fri Apr 24 11:27:28 2015 UTC,"Try Emacs' 24.4 electric-pair-mode. I developed it for exactly this reason, I hate the paredit nanny not letting me copy lines the way i mean. But I still want autopairing and autoskipping"
emacs,33f39b,dmoonfire,2,Mon Apr 27 15:53:54 2015 UTC,"I recently removed csharp-mode, which I briefly maintained, because it was out of date and I don't do C# on Linux anymore. I also removed markdown-mode setup because it didn't handle Markdown with YAML very well."
emacs,33f39b,instant_sunshine,2,Thu Apr 23 13:31:24 2015 UTC,Markdown-mode could definitely do with some fixes.
emacs,33f39b,trezor2,1 point,Wed Apr 22 03:40:22 2015 UTC,"csharp-mode should be more up to date now.  It seems like it has actual maintainers these days, although the activity level is rather low."
emacs,33f39b,dmoonfire,1 point,Wed Apr 22 04:07:09 2015 UTC,"Yep, which is why I'm not maintaining it anymore. :P And the new maintainers are doing a wonderful job that I couldn't.  I just happened to have an old version from when I was maintaining it, which no longer had any of the functionality. I could have updated it, but shamefully, I'm using Visual Studio for my C# development, so I just removed it."
emacs,33f39b,damn_what,2,Wed Apr 22 14:03:13 2015 UTC,"I replaced Helm by ido/ido-flex. It was too big and complex for my taste. I still miss the integration in every commands though. Ido, even with ido-ubiquitous is not triggered in a lot of commands, or you have to configure it yourself for each and every mode."
emacs,33f39b,abo-abo,3,Wed Apr 22 16:46:55 2015 UTC,"I've switched from both helm and ido to ivy-mode. It's more powerful (and arguably more simple) than ido, and it's triggered by pretty much all the commands. See intro video. I'm also using ivy for magit, projectile, find-file-in-project, smex."
emacs,33f39b,dzecniv,1 point,Wed Apr 22 11:06:07 2015 UTC,and you're the author ;)
emacs,33f39b,aptmnt_,1 point,Wed Apr 22 14:10:32 2015 UTC,I would use this in a second if it were integrated with spacemacs the way helm is. I
emacs,33f39b,abo-abo,1 point,Thu Apr 23 20:34:12 2015 UTC,"Actually, it's not a lot of work to switch:  (helm-mode -1) (ivy-mode 1)   All your packages that rely specifically on helm will still use helm, but generic ones will use ivy. You can try it without modifying your config by simply calling the two above functions with M-x."
emacs,33f39b,EatMoreCrisps,1 point,Fri Apr 24 09:11:41 2015 UTC,"Yeah, I feel much the same, though I'm still giving helm a chance.  I like helm-descbinds and helm-swoop though, so if I revert to ido I may keep them around.  We can mix and match."
emacs,33f39b,mschaef,2,Fri Apr 24 09:39:15 2015 UTC,"See: https://github.com/mschaef/.emacs.d/commits/master :-)  Recently, I've removed the following:   A number of manually installed packages, that I now install with the official package repository system. (This switch has proven to be a huge win.) magit mode (I usually just use the git command line). Removed 'sql-plus`', which I no longer need and can easily add back in. Removed some Cygwin-specific support features. Support for a hack I added to an old OSX version of Emacs 23 (or so) that let it run in full-screen mode."
emacs,33f39b,kraml,8,Wed Apr 22 13:11:56 2015 UTC,"magit mode (I usually just use the git command line).   That is unexpected. Why is that? I find it way quicker to fire up magit and do some operations than type it out in the command line. Even more if it involves more complex stuff, like rebasing, or staging thunks."
emacs,33f39b,tenpn,3,Wed Apr 22 02:22:27 2015 UTC,"A project I've always had in the back of my head is a minimal-install emacs+magit, for people who don't want emacs but want a great git interface. I genuinely think it's the fastest and best way to work with git, and it slyly teaches you the command line, for when magit isn't available."
emacs,33f39b,jplindstrom,1 point,Wed Apr 22 06:21:13 2015 UTC,"Yes, $ for the win."
emacs,33f39b,mschaef,2,Wed Apr 22 08:15:14 2015 UTC,"That is unexpected. Why is that? I find it way quicker to fire up magit and do some operations than type it out in the command line.    It's probably a just combination of my personal style and my personal biases. Fortunately, Emacs is accommodating that way.  I invariably have a command prompt open at the root of whatever project I'm working on. That makes the git command just a single keypress away. From there, I don't find the git command to be all that objectionable and I like having the control of issuing the commands myself if anything goes wrong. For what it's worth, I do have a couple command-line git extensions that I like a great deal. (The bash completion support, displaying the git status on the prompt, and the 'git lga' alias that you can find online.)  The other thing worth mentioning is that I often find myself in circumstances where I don't have a machine that runs my 'ideal configuration'. As a consequence, I try to pack relatively lightly when it comes to customizations and add-on software."
emacs,33f39b,EatMoreCrisps,1 point,Wed Apr 22 12:39:36 2015 UTC,"Yeah, I'm surprised.  In my team here I'm often struck as new people come on board and have to learn git, how much difficulty they face because they don't have magit.  I was thinking of doing a bit of a seminar to show them how frictionless my git workflow is, as a sneaky way to encourage some of them to try Emacs."
emacs,33f39b,mschaef,1 point,Wed Apr 22 15:09:16 2015 UTC,"ow much difficulty they face because they don't have magit   Where do people typically have difficulties, in your experience?"
emacs,33f39b,EatMoreCrisps,1 point,Wed Apr 22 13:14:15 2015 UTC,"It's mostly a friction thing - not knowing commands, thrashing around trying to remember how to log to find the right commit SHA etc. interspersed with pulling up man pages (rather than looking at the options at the bottom of the screen).  The awkwardness of staging partial changes and reviewing etc..  All the little things that are easy in magit but require more knowledge and shell gymnastics on the command line.  One tiny example: making a fixup commit, requires git log to find the SHA and then pasting that into the right command, rather than c f which brings up the log on which you just type . to select the right one."
emacs,33f39b,bliow,1 point,Wed Apr 22 15:11:11 2015 UTC,"I do the same thing you do for packages. I have found package versioning to be painful. From the history you linked, it seems you may not have upgraded packages yet. Watch out for that."
emacs,33f39b,instant_sunshine,1 point,Wed Apr 22 15:47:10 2015 UTC,Any packages to look out for in particular... I have multiple years running a fully git recorded multi package installation of several hundred packages.  A few minor issues which I can easily git revert myself out of. (maybe 3 issues in 5 years)
emacs,33f39b,bliow,1 point,Wed Apr 22 02:53:23 2015 UTC,"Painful just means that every time I do M-x package-list-packages and hit U, I end up having to create a large commit.   edit: And for melpa diffs end up being a lot of deleted, then added, files. packages take the form of ""elpa/cider-20150421.1410/"" (say), rather than being consistently in one directory."
emacs,33f39b,tenpn,3,Wed Apr 22 04:06:21 2015 UTC,"I don't commit the elpa directory, instead using something like prelude's prelude-require-packages to auto-install stuff on boot."
emacs,33f39b,mschaef,1 point,Wed Apr 22 04:21:37 2015 UTC,"You're right... this configuration is new to me... We'll see how the first upgrade goes.   I'd thought about using something like prelude-require-packages, as suggested by /u/tenpn, but I don't like the idea of giving up the fact that I can put my entire .emacs.d into a single github repository.  That makes it easier to re-establish the configuraiton in a new environment, in the case that the target environment has a marginal network connection in some way."
emacs,33f39b,bliow,1 point,Wed Apr 22 08:13:44 2015 UTC,Ditto. That's why I still do it.
emacs,33f39b,RobThorpe,1 point,Wed Apr 22 15:14:11 2015 UTC,I used to have abbreviations for find-grep-dired and find-name-dired. I found that M-x f-g-d RET and M-x f-n-d RET do the job just as well.
emacs,33f39b,vermiculus,2,Wed Apr 22 15:52:09 2015 UTC,Do you know about flex-ido/smex? You can drop those intermixed hyphens.
emacs,33f39b,instant_sunshine,6,Wed Apr 22 00:48:26 2015 UTC,+1 for Smex and also vertical ido (I can't stand horizontal ido)
emacs,33f39b,CQQL,3,Wed Apr 22 01:52:51 2015 UTC,"While we're on it, I recently dropped smex for helm-M-x, because I prefer the vertical list and like how it shows keybindings next to the commands."
emacs,33f39b,vermiculus,1 point,Wed Apr 22 04:00:24 2015 UTC,"helm-M-x is also very good – I used it for finding new commands. When I know what the command is though, smex with flx is just so much faster…"
emacs,33f39b,RobThorpe,1 point,Wed Apr 22 09:38:29 2015 UTC,"I don't even use M-x every day, so I doubt that setting it up would be worth it. I'm thinking about giving Helm a try though."
emacs,33f39b,vermiculus,1 point,Wed Apr 22 12:57:16 2015 UTC,"Oh, do – at the very least, it's made switching buffers a lot more fluid for me."
emacs,33f39b,cmputrnx,1 point,Wed Apr 22 09:42:21 2015 UTC,"Current line highlighting (hl-line, hl-spotlight, et al.). Found myself switching between GUI and console Emacs so often, both of which have different background colors. Didn't feel like toying around with the colors to get the text to show up right once, much less multiple times."
emacs,33f39b,EatMoreCrisps,1 point,Wed Apr 22 12:56:14 2015 UTC,"I love hl-line.  In my light-theme setup I have a pale background, with a paler hl-line.  I imagine with a dark theme you could just go with a black line for highlighting the line.  Then, I don't find I have to modify any colors to make it work."
emacs,33f39b,benwalton,1 point,Wed Apr 22 03:58:36 2015 UTC,I was still living cfengine mode around until last week. Haven't used it in a long time now.
emacs,33f39b,tenpn,1 point,Wed Apr 22 13:17:44 2015 UTC,"Recently completely rebooted my config, going from a hand-written mess of files to basing it on prelude. So much code I no longer have to support!   I took the opportunity to finally remove icicles, now that I've transitioned to helm."
emacs,33f39b,Phrenks,1 point,Wed Apr 22 07:10:29 2015 UTC,The fill-column-indicator. Ever since I upgraded to Emacs 24 the cursor would sometimes skip to where the indicator should be when pressing enter. Very annoying.
emacs,33f39b,wasamasa,3,Wed Apr 22 08:19:28 2015 UTC,I've had great success with column-enforce-mode as replacement.
emacs,33f39b,CQQL,1 point,Wed Apr 22 08:28:57 2015 UTC,Why do you prefer it over the built-in whitespace-mode and  (setf whitespace-line-column 80       whitespace-style '(face lines)   ?
emacs,33f39b,wasamasa,3,Wed Apr 22 09:22:03 2015 UTC,Only one face to customize (not needed even since sane defaults) Doesn't conflict with other modes since it does this one thing only KISS (2526 lines vs. 216 lines) Why customize a whitespace-highlighting mode when I want to highlight something that's not whitespace? It just werks™
emacs,33f39b,jordonbiondo,1 point,Wed Apr 22 09:42:02 2015 UTC,"Nice summary, I'm glad to see other people share my sentiments."
emacs,33f39b,tuhdo,1 point,Wed Apr 22 11:03:43 2015 UTC,"I want whitespace-mode to highlight other things as well, not just face and lines, but doing so makes it annoying to look at code. I only toggle whitespace-mode on to check for my code formatting before pushing a commit, so I need full whitespace checking available. I guess /u/wasamasa may have the same reason."
emacs,33f39b,Phrenks,1 point,Wed Apr 22 17:40:43 2015 UTC,"I'll surely give it a try, thanks!"
emacs,33f39b,RobThorpe,2,Wed Apr 22 09:50:10 2015 UTC,I've also suffered from problems like this. I have disabled auto reverting in buffer lists because it causes the cursor to move in other mode. I've disabled auto reverting in dired because it doesn't work any more.
emacs,33f39b,osune,1 point,Thu Apr 23 20:45:21 2015 UTC,"Smart buffer switching with Shift + Arrow keys. Too often i use crtl + shift + arrows to mark text, which led unintended to buffer switching.  I didn't wanted to find a workaround."
emacs,33f39b,larstvei,1 point,Wed Apr 22 09:45:39 2015 UTC,Recently removed automatic updating of packages.
emacs,33f39b,Knusper2000,1 point,Wed Apr 22 12:01:39 2015 UTC,iswitchb.el - It was dropped from Emacs in version 24.4 - Initially I was very sad about this. But then I discovered ido-mode ... :D
emacs,33f39b,redguardtoo,-2,Wed Apr 22 16:35:22 2015 UTC,"grepped my git log  8b809c4 remove emacs23 support 233e072 remove sr-speedbar ccf44ef remove ack and clean hotkeys 97b8c9f remove helm-gtags 9c8a106 remove extra linefeed in exported html created by org2nikola 59041b7 remove key-chord 227dc56 remove my personal setup 793fa38 remove log code 545bd66 remove missing packages 016e306 remove rainbow-mode from html-mode-hook 914e303 remove some buggy code dccdbba remove xml-rpc 01ac52a remove viper 550c719 remove elein 4246f93 remove slime stuff 251f88e remove magit-svn 3e7bea0 remove eldoc-eval 9c841f6 remove obsolete packages ff234ea remove ctags.el API b3e0fee remove duplicated code on clipboard 89c382e remove package ""all"" 2dfd33b remove thing-edit 548253f remove rcirc f37370c remove fill-column-indicator stuff 95fa418 remove package ctags 203250b remove lively 268c4f7 remove helm-ls-git-ls obsolete code 503436e remove growl cab914f remove package marmalade 5158c71 remove sunrise-commander c4449b0 remove delicious-mode 3a6a469 remove better-reigister 475959c remove weibo 99770cf remove twittering-mode 69bdc0c remove popwin because which has issue with helm 0d52474 remove company-cmake since it is already part of company 9ca88af remove slime in elpa since we already lock it 137d2d7 remove comment 2db9f0a remove projectile because its dependcy need emacs24 df4d40f remove uml stuff 051d541 remove goto-address. I donot use mouse 6eb8ea2 remove after-save-hook 4b4b440 remove clojure stuff 903aeb1 remove lisp stuff c2cf684 remove package gist 1211211 remove useless evil hotkeys f600723 remove obsolete evil hot keys e8687e7 remove evil hot keys 9c1fbf2 remove init-themes.el b8d5c0f remove auto-complete dependency in init-slime.el 2016c29 remove flymake-jslint since we use flycheck f21eca5 remove flymake for coffee, css and haml, install flycheck 2c4ec70 remove obsolete bbdb code 356d67b remove company-dabbrev 9228c7c remove custom-set-variables c1b3888 remove autopair 4df12de remove extra new line inserted when using yasnippet 65596f2 remove git-blame 22fde43 remove track-closed-files b6c0590 remove org-startup-indent. I donot like it acabf7d remove fill-column-indicator because it conflict with popup menu in auto-complete 1e584d5 remove delicious 45ff104 remove .gitconfig 7cfb538 use window-numbering-mode, remove my hotkeys for window splitting 20f66b1 Require tuareg package, and remove redundant ocaml config c7984d9 Also remove defunct tidy.el submodule 39a5b11 remove gtags, stick to ctags 2a7816e remove submodule ido-ubiquitous 6b66408 remove init-locales because emacs+cygwin won't work 7d3932a Recent Emacs versions have 'count-words, so remove my version 9941c01 remove cedet and ecb 3c084cd Get gnuplot-mode with el-get, and remove from repo 1013985 ruby-mode/inf-ruby are loaded from the rinari-bundled versions; remove separate copies to minimise confusion"
emacs,33g6p5,ares623,5,Wed Apr 22 06:48:27 2015 UTC,Do you load your custom-file in your config?
emacs,33g6p5,tampix77,6,Wed Apr 22 07:57:43 2015 UTC,One alternative can be to load it from lisp and ask for no confirmation:  (load-theme 'twilight-bright t)   C-h f load-theme RET to learn more.
emacs,33g6p5,monotux,4,Wed Apr 22 08:39:01 2015 UTC,Does this emacs.SE question solve this problem?   I had a similar issue and it got resolved once I removed custom-theme-load-path customization as recommended in the above linked solution.
emacs,33g6p5,kaushalmodi,2,Wed Apr 22 11:26:18 2015 UTC,I have this in my config: see if it helps.  ;;; Treat all themes as safe (setq custom-safe-themes t)
emacs,33eff2,tty-tourist,1 point,Tue Apr 21 21:19:11 2015 UTC,https://github.com/emacs-helm/helm/issues/975 Use helm-find-files when navigating. Then you will not accidentially opening Dired.
emacs,33eff2,ReneFroger,1 point,Tue Apr 21 22:59:04 2015 UTC,Thx!   The link is indeed relevant but the proposed solution (the following code) doesn't work for me:  (defun my-filter-dired-buffers (buffer-list)   (delq nil (mapcar              (lambda (buffer)                (if (eq (with-current-buffer buffer major-mode)  'dired-mode)                    nil                  buffer))              buffer-list)))  (advice-add 'helm-skip-boring-buffers :filter-return 'my-filter-dired-buffers)  I am using helm-find-files but I don't see how that could resolve the issue. The problem is that even with dirs containing only one file I have to navigate (by typing or by arrows) to avoid opening dired buffers (which I never intend to open) ...
emacs,33eff2,ReneFroger,1 point,Wed Apr 22 07:38:11 2015 UTC,"You can post into that issue that I linked. Perhaps mister Heerdegen is willing to help you.  You said containing only one file... you tried Helm-locate into your helm-for-files?  I consider /u/tuhdo as an expert in this field. Maybe you could take a look on his guide. You don't need arrows by the way, C-j and C-l in helm-find-files is what you need."
emacs,33djht,thesolitaire,1 point,Tue Apr 21 17:28:41 2015 UTC,"Is your JSON document a dump that has very long lines? I opened a 5MB normal JSON file with json-mode and it works fine on my Windows machine. With js2-mode it's also fine but a bit slower.  As for your navigation problem, probably this is the time to make good use of folding, since Emacs can fold region based on indentation levels so effectively you can create a ""tag tree"" on your buffer."
emacs,33djht,tuhdo,1 point,Tue Apr 21 18:05:19 2015 UTC,"Surprisingly, I never saw these tree mode in emacs before today.  https://www.google.com/search?q=""tag+tree""+emacs&tbm=isch"
emacs,33djht,agumonkey,1 point,Tue Apr 21 18:28:54 2015 UTC,"You may want to look at Speedbar/ECB/Imenu for tag tree. For directory trees, plenty out there: direx, dirtree, neotree, Speedbar, Sunrise Commander..."
emacs,33djht,tuhdo,1 point,Wed Apr 22 08:01:33 2015 UTC,"/u/agumonkey, there are more directory tree implementations here: http://redd.it/2zt08q :)"
emacs,33djht,vermiculus,1 point,Thu Apr 23 02:53:50 2015 UTC,"Most of them are not, actually.  When I open them, everything is fine - no slowness at all.  It's only when I run the command json-mode-show-path that I experience slowdown.  On a 1.2MB file, it takes around 30 seconds to run.  I'm experimenting now with hs-mode + js2-mode.  Folding on indentation is a possibility, but it would require me to run json formatting tools on the document first.  Also, given the structure of my typical document, folding is less important to me than being able to jump to a parent or sibling node in the tree."
emacs,33djht,tuhdo,3,Tue Apr 21 18:40:09 2015 UTC,"You don't need to format the buffer. hs-minor-mode can fold according to parentheses level as well. And if you want to jump, simply look at the line number of the folded block and jump to line there in a cloned buffer. For example (assume you enabled linum-mode):   C-x 4 c to clone a buffer. Switch to the cloned buffer and M-x hs-hide-all. Now, look at a line number of a folded node and M-g g to jump the line in current buffer. You can press  M-<next> or M-<prior> to scroll up and down the cloned buffer (next means PgDown and prior means PgUp).    Now you have two buffer: One is the ""tree"" buffer and one is your editing buffer. This works well for modes that do not have tree support from Speedbar/ECB/Imenu."
emacs,33db0d,BruceConnor,1 point,Tue Apr 21 16:28:04 2015 UTC,"nice, love it."
emacs,33db0d,slymrspy,1 point,Tue Apr 21 20:36:34 2015 UTC,I've always wondered why this isn't the default behavior. Thanks for putting this together.
emacs,33cy84,JoCou,3,Tue Apr 21 14:51:42 2015 UTC,http://stackoverflow.com/questions/11110801/why-does-ctrl-not-work-when-i-bind-it-to-a-command-in-emacs  I would just suggest you use the .app version in which you can use those bindings unless you have a good reason to use -nw it.
emacs,33cy84,jordonbiondo,3,Tue Apr 21 14:58:19 2015 UTC,If you're in a terminal you can't use those keybindings. That's why they're not mapped by default.
emacs,339pah,joehillen,3,Mon Apr 20 19:38:55 2015 UTC,"Correct me if I'm wrong, but isn't all of this already in haskell-mode?  Not that it's bad to write a new plugin for the fun of it, but I don't see why I should switch."
emacs,339pah,adimit,1 point,Tue Apr 21 05:06:37 2015 UTC,Paging /u/chrisdoner
emacs,339pah,LukeHoersten,2,Tue Apr 21 18:07:40 2015 UTC,Looks awesome. Can't wait for the rest of the features to be ready!
emacs,33bvnp,DOUBLEXTREMEVIL,3,Tue Apr 21 06:53:32 2015 UTC,"A first step to get a change in the package is to find its repository (usually on Github). And if it doesn't have a mailing list, create a new issue. Link: https://github.com/milkypostman/powerline/issues."
emacs,33bvnp,abo-abo,2,Tue Apr 21 07:20:40 2015 UTC,"You could try smart-mode-line instead of powerline. It's a little more respective with the mode line inner structure, so it's harder for it to break something. It also has a theme that makes it look like powerline."
emacs,33bvnp,BruceConnor,1 point,Tue Apr 21 08:24:01 2015 UTC,It also has a theme that makes it look like powerline.   Which is a pain in the ass to set up. If you use powerline's default arrow separator you end up with something like this. I've set every single mode-line face I could find to the same shade of blue and the corners remained as ugly as ever.  At least the wave separator seems to work.
emacs,33bvnp,DasEwigeLicht,1 point,Tue Apr 21 12:12:20 2015 UTC,"File a bug. ;-) Though I'll have to say, unlike the other themes, the powerline theme is not meant to be customised (yes, it's a nasty limitation)."
emacs,33bvnp,BruceConnor,1 point,Tue Apr 21 14:57:55 2015 UTC,"The above happens if you don't explicitly use a powerline theme. If you do it does work, but most of you modeline will come from powerline and not smart-mode-line, though a few sml faces/settings will still be used. This what I did before, your post hast just gotten me curious because I didn't know sml had it's own powerline theme."
emacs,33bvnp,DasEwigeLicht,1 point,Tue Apr 21 16:50:09 2015 UTC,"The above happens if you don't explicitly use a powerline theme.   I'm sorry, I think I'm a bit lost now. I thought we were talking about using sml with the smart-mode-line-powerline-theme.   If you do it does work, but most of you modeline will come from powerline and not smart-mode-line, though a few sml faces/settings will still be used.   I'm not sure what this means either. If you have (setq sml/theme 'powerline)(sml/setup) in your init file, most of your mode-line will come from sml. powerline won't even be activated unless you activate it yourself (and you shouldn't)."
emacs,33bvnp,BruceConnor,1 point,Tue Apr 21 22:52:52 2015 UTC,"I'm sorry, I think I'm a bit lost now. I thought we were talking about using sml with the smart-mode-line-powerline-theme.   I meant exactly what you propose yourself - just setting the sml theme and not calling (powerline-*-theme). It does work like this, and most of the mode-line is provided by sml, but the faces are all over the place, and I've been unable to fix them. I've defined every mode-line face I could find, but there were still ugly grey spots in the mode-line left.   You can however explicitly invoke a powerline theme, only few sml faces will then work, so there's less customization, but at least it's easy to create a consistent and good looking setup. Like this.  The same config, but with the sml powerline theme, and line 19 removed nets me this mess. I don't know if it's sml's fault or I'm doing something wrong, but I'm happy with my setup now, so it's finde.  To say something that's actually on topic: sml's powerline theme is unlikely to help with OP's problem since it internally still uses powerline and probably suffers from the same issue."
emacs,33bvnp,DasEwigeLicht,1 point,Wed Apr 22 16:49:32 2015 UTC,"I meant exactly what you propose yourself - just setting the sml theme and not calling (powerline-*-theme). It does work like this, and most of the mode-line is provided by sml, but the faces are all over the place, and I've been unable to fix them. I've defined every mode-line face I could find, but there were still ugly grey spots in the mode-line left.   They shouldn't be all over the place. Are you sure you didn't have some customizations already in place to start with?  Also, it's possible your global theme customizes the sml faces. What global theme do you use?   You can however explicitly invoke a powerline theme, only few sml faces will then work, so there's less customization, but at least it's easy to create a consistent and good looking setup. Like this.   Beware though, that powerline and sml were not meant to be used together. I've no idea what behavior you'll get.   The same config, but with the sml powerline theme, and line 19 removed nets me this mess. I don't know if it's sml's fault or I'm doing something wrong   It could be some leftover customizations you had, or it could be your global theme, or it could be an sml bug. :-)   but I'm happy with my setup now, so it's finde.   Well, that's all that counts. :-)   To say something that's actually on topic: sml's powerline theme is unlikely to help with OP's problem since it internally still uses powerline and probably suffers from the same issue.   No, it doesn't. The sml powerline theme only uses the powerline package to generate glyphs for the arrows or waves that you see between the different sections. All of the actual mode-line structure is still entirely sml."
emacs,33bvnp,BruceConnor,1 point,Wed Apr 22 19:17:48 2015 UTC,"Also, it's possible your global theme customizes the sml faces. What global theme do you use?   You're probably right on that. I've tried it the whole thing with emacs -q. Sml's powerline seems to mostly work now. My guess would be that the theming problems were caused by having defined powerline faces in my theme that I was always loading.  Except this time only arrow separators work, and the list of minor modes is sometimes so far shifted to the right that it's mostly off-screen.   Beware though, that powerline and sml were not meant to be used together. I've no idea what behavior you'll get.   They've been working together for me for weeks now. With the proper hooks the mode-line will even change color for different evil states."
emacs,33bvnp,DasEwigeLicht,1 point,Wed Apr 22 19:47:46 2015 UTC,"Well, if it's been working so far, better not mess with it. :-)"
emacs,33bntm,fandingo,8,Tue Apr 21 05:11:28 2015 UTC,"NB for reference: XEmacs =/= Emacs running under X. XEmacs is a long-standing fork of GNU Emacs, with a separately-maintained and distinct codebase.  i presume you're actually running GNU Emacs under X, and not XEmacs?"
emacs,33bntm,flexibeast,2,Tue Apr 21 05:39:08 2015 UTC,"XEmacs:       XEmacs is a graphical- and console-based text editor which runs on almost any Unix-like operating system as well as Microsoft Windows. XEmacs is a fork, based on a version of GNU Emacs from the late 1980s. Any user can download, use, and modify XEmacs as free software available under the GNU General Public License version 2 or any later version.    Image i     Interesting: Apel (emacs) | SXEmacs | Emacs | Emacs/W3   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
emacs,33bntm,autowikibot,1 point,Tue Apr 21 05:40:17 2015 UTC,GNU Emacs. Sorry. I had no idea there was a difference.
emacs,33bntm,kaushalmodi,2,Tue Apr 21 14:21:58 2015 UTC,Check out this emacs.SE question that asks this exact same question.
emacs,33ag6h,InnerChutzpah,2,Mon Apr 20 22:54:57 2015 UTC,"Try looking at what command is run in emacsXX.desktop, located in (off the top of my head, somewhere like this) /usr/share/applications/. The command find /usr/share -name emacs*.desktop should find the file for you. Also make sure that you don't have a different version of emacs installed somewhere.  Edit: if it's not in /usr/share, the .desktop file might be in ~/.local or even ~/Desktop somewhere."
emacs,33ag6h,ghyspran,1 point,Tue Apr 21 04:22:58 2015 UTC,"Is yasnippet loading up after shell mode? I have noticed that some packages, if they load up after opening a file, break syntax coloring until the file is reloaded."
emacs,33ag6h,AnAirMagic,1 point,Tue Apr 21 01:07:01 2015 UTC,"Which shell are you using? Bash? Might be related to .bashrc vs .bash_profile being loaded when you open a terminal (bash -l) vs unity launcher. Try to ""source ~/.bashrc"" from your bash_profile."
emacs,336vd5,GBGamer117,4,Mon Apr 20 02:24:50 2015 UTC,Best I could find (beside RTFM) was reading sml-mode source (where I found out about smie in the first place).
emacs,336vd5,agumonkey,2,Mon Apr 20 07:34:00 2015 UTC,"Thanks for a mode that uses SMIE, I really needed that."
emacs,336vd5,flexibeast,3,Mon Apr 20 13:49:30 2015 UTC,Section 22.7.1 of the Emacs Lisp Reference Manual?
emacs,336vd5,xoo-,3,Mon Apr 20 07:04:10 2015 UTC,"The problem is that that is written as if I know at least a little bit of what I'm doing. It talks about writing a grammar, and I don't even know how to start and set up SMIE mode.  I might just have to start writing, and see what I can do."
emacs,336vd5,RobThorpe,2,Mon Apr 20 13:44:58 2015 UTC,"if you don't know the difference between a lexer or a parser you may have a hard time.  read up a bit on parsing (BNF grammars), lexing (regular expressions) first."
emacs,336vd5,xoo-,1 point,Mon Apr 20 14:37:08 2015 UTC,Thanks. Do you have any good literature?
emacs,336vd5,RobThorpe,3,Mon Apr 20 15:13:59 2015 UTC,"Jack Crenshaw's series of articles ""How to build a compiler"" is very useful.  See http://compilers.iecc.com/crenshaw/  If that doesn't tell you what you need to know then check out the Bison and Flex manuals.  For parsing, read section 1 of the Bison manual, and maybe the example in section 2.1.  Ignore all the Bison specifics like the reduce/reduce conflicts. https://www.gnu.org/software/bison/manual/  For lexing read the Flex manual http://flex.sourceforge.net/manual/"
emacs,336vd5,xoo-,1 point,Mon Apr 20 16:12:13 2015 UTC,Thank you so much :D
emacs,336vd5,trezor2,1 point,Mon Apr 20 16:14:45 2015 UTC,"RobThorpe suggestions are both good. the Crenshaw's articles have been the introduction to parsing for a lot of people.  the Bison/Flex manuals are a bit terse though and not exactly easy reading - but i can't think of anything else that may help.  stay away from the dragon book (should anyone suggest it).  you can also try this: https://www.udacity.com/course/cs262 it shows you how to build a lexer/parser for javascript which should be more than sufficient, and it is self-paced.   good luck! i confess that i have always detested this subject, in university i almost switched over to EE after the nightmare that was my compiler course;  it's one of the reasons i've always liked lisp (parsing/lexing are trivial - and the lexer is available to you to boot) which led to emacs.  have fun? :)"
emacs,333ywx,chimneyscout,22,Sun Apr 19 08:16:42 2015 UTC,"I tried it, threw it out.  That said, my config has been yak shaved for well over 10 years so it's not that likely anyone is going to suddenly ""give me exactly what I want""  It's a case of tailor made vs off the peg.  That said, as an off the peg, spacemacs is great for Vim users."
emacs,333ywx,instant_sunshine,5,Sun Apr 19 17:56:37 2015 UTC,"Yes, that's the whole purpose. Vanilla Emacs takes too much time to be productive and eventually people end up with similar packages. In Spacemacs, you can always use your private configuration in a private layer easily. If something I found good globally, I create a PR. Spacemacs is almost similar to my configuration, except faster startup time."
emacs,333ywx,tuhdo,12,Mon Apr 20 02:58:14 2015 UTC,"No.  The WHOLE point of Emacs is to hack your own personal editor together.  Packages make this ludicrously easy.  Despite the highly opinionated views of some, this is what Emacs has been about since day one.  Spacemacs is the best starter kit so far.  Also, fairly unsurprisingly it strongly targets Vim switchers.  Not everyone wants a modal editor.  There is also extraordinary value in knowing what exactly is going on in your config, and being its author.  Not everyone wants this, but no starter kit is going to give you this."
emacs,333ywx,instant_sunshine,6,Mon Apr 20 04:15:15 2015 UTC,"The WHOLE point of Emacs is to hack your own personal editor together.   You can still do it with Spacemacs with your .spacemacs file and private layer. What Spacemacs does is integrating common packages used by Emacs community to help users not repeat themselves. What Emacs users do when install new packages is copy/paste the recommended configuration from package authors anyway, and most package configurations are simple enough to not wasting time repeat yourself.  Rather, they should spend time writing something useful for Emacs community. Spacemacs makes this easy that new people can even learn how to use Elisp after a few days of usage and contribute to Spacemacs (i.e. little fixes or new layers) because they don't need to take time to rediscover useful packages for writing Lisp and configure the packages properly.   Not everyone wants a modal editor.   Spacemacs asks for Vim or Emacs editing styles when you first start it. It supports Emacs users now.   Not everyone wants this, but no starter kit is going to give you this.   You can always read the source if you want, from core spacemacs to each layer. SPC f e h and core Spacemacs as well as all the layers are accessible at your finger tips."
emacs,333ywx,tuhdo,3,Mon Apr 20 04:24:30 2015 UTC,"While this is true, reading someone else's source, is not owning it in the same way.  Of course, I stand by opinion that if you want a starter kit, Spacemacs is probably the best.  Glad to hear that Holy mode has made it in now.  Edit: btw ""Rather, they should spend time writing something useful for Emacs community"" ... they can do both, and they'll be better for it, if they are more intimate with Emacs Lisp.  The best way to cut your teeth is to build your own config extensions and build from them to make useful public packages.  Keeping people at a distance from their own config, and that is exactly what all starter kits do, is not such a wonderful thing.  Sadly, Vim is highly prone to this sort of adoptive use, a package is installed and there is virtually no knowledge on how it's implemented.  Vimmers are ""generally"" scared of VimScript/VimL.  I personally don't want to see such users being the mainstream of Emacs users, I prefer to see Lisp hackers in this space, so we actually get better quality throughout.  Of course, it's much easier to get all enthused about a starter kit, than facing tough problems, but this is the way of things."
emacs,333ywx,instant_sunshine,2,Mon Apr 20 06:46:08 2015 UTC,"The best way to cut your teeth is to build your own config extensions and build from them to make useful public packages.   This is true and I think Spacemacs allows the user to do this with the private layers. In a private layer you are at home, from this point of view Spacemacs is just a configuration loader with an architecture and some tools tailored to ease the configuration management.  For the fun I will experiment about a barebone spacemacs that boots with not layer at all. Not sure of the result though :-)"
emacs,333ywx,syl20bnr,1 point,Mon Apr 20 15:53:51 2015 UTC,"You don't need to start vanilla Emacs to start hacking Elisp. Spacemacs creates a nicely configured environment for new people to learn Lisp easier, and any type of Lisp, not just Emacs Lisp. Users needn't rediscover packages like smartparens,rainbow-delimiters, eval-sexp-fu.... to improve your Lisp coding environment. All common packages are configured and they are ready to dive into Emacs Lisp without much hassle. To become a Lisp hacker doesn't mean you have to start with barebone Emacs. In the case of Spacemacs users, there are many pending PRs there from Spacemacs users, so I think is it working right.  As for Vimmers, I think they have valid reasons to be afrid of VimScript/VimL. Emacs Lisp is, still a Lisp, after all."
emacs,333ywx,tuhdo,1 point,Tue Apr 21 02:33:24 2015 UTC,"You don't need to start vanilla Emacs to start hacking Elisp.   True, I think Better Defaults is a better place to start though.   Users needn't rediscover packages like smartparens,rainbow-delimiters, eval-sexp-fu.... to improve your Lisp coding environment. All common packages are configured and they are ready to dive into Emacs Lisp without much hassle.    Personally I think Spacemacs is complex enough that you must learn how it does its thing.   This is a barrier to entry (at a hacking level), as a result I think it's better to just provide new comers with a list of recommended packages and be done with it.  This is specifically why I don't bother with building or enthusiastically recommending a specific starter kit to be used by anyone other than direct contacts and colleagues. (I will recommend Spacemacs casually from time to time, as it saves MY TIME to do so.)"
emacs,333ywx,instant_sunshine,1 point,Wed Apr 22 04:12:38 2015 UTC,"I think, if anything, spacemacs makes it easier than vanilla emacs to contribute.   I'll explain. By forcing you to put all your private configuration in a ""layer"" (~emacs package), it forces you to build a ""package"" from day zero. Splitting layers is trivial. Since spacemacs puts your whole config in a git repo, contributing them back is as easy as sending a pull request.  I've been an emacs user for 5 years and i've made my first contribution this year after using spacemacs for a while.  The emacs community advances really fast. If you are not in the loop, you miss huge advances like helm, ido, projectile, company clang, .... Spacemacs gives you by default, and automatically, the latests package for each task, already configured with sane defaults, and ways to update from one package to the next with sane defaults. In particular, its changelog is a really good way to keep up with everything that is going on.  And the spacemacs gitter chat is incredibly useful."
emacs,333ywx,gnzlbg,4,Thu May 21 13:12:27 2015 UTC,"I agree with you. I enjoy the transparency of my config and I have been tweaking it for a couple of years. Its a double edged sword, however. So much time I was spending tweaking it and after trying this I realised how much potential I was still missing out. I will give it a go for a week, and maybe will just incorporate some ideas. But the thought of letting go of my customisation scares me."
emacs,333ywx,instant_sunshine,3,Mon Apr 20 05:53:29 2015 UTC,"I've customized mine to the point that it's a viable starter kit.  I absorb patterns, implement them.  I consider this something everyone should do, to exercise their programming muscle."
emacs,333ywx,throwaway,1 point,Mon Apr 20 06:47:44 2015 UTC,"In Spacemacs, you can always use your private configuration in a private layer easily.    How do I do that?  If I could hide all my dotfiles behind a modal keybinding, I think spacemacs could work for me."
emacs,333ywx,tuhdo,3,Mon Apr 20 04:32:41 2015 UTC,You could use M-x configuration-layer/create-layer and Spacemacs creates a private layer template for you after you enter a layer name.
emacs,333ywx,jmgrosen,6,Mon Apr 20 04:36:52 2015 UTC,"I was initially blown away, but it quickly wore off due to it not feeling like emacs anymore. There is a reason why I use emacs afterall ;-)."
emacs,333ywx,CantankerousV,3,Sun Apr 19 19:22:13 2015 UTC,"I tried it for a couple days, but there were too many very strange little changes/bugs and I just wasn't convinced of the usefulness of modes."
emacs,333ywx,tuhdo,1 point,Sun Apr 19 16:32:44 2015 UTC,"Hmm. My experience has been flawless so far. Osx, 24.5 here. Apart from slow drawing of navigation characters in ace commands, things have been running smoothly."
emacs,333ywx,CantankerousV,3,Mon Apr 20 05:56:51 2015 UTC,"I am just starting out with it and so far I'm very impressed, apart from a few stability issues I haven't solved (freezes sometimes in dired, sometimes when using M-x on a newly started emacsclient). I'm motivated to work those out though."
emacs,333ywx,tuhdo,9,Sun Apr 19 08:48:39 2015 UTC,"What OS are you on? If you are on Mac OS X and using Emacs 24.4, consider upgrading it beause that Emacs version on OS X crashes quite often.  As for M-x, wait a bit for Helm to load. Spacemacs only loads packages when you actually use it."
emacs,333ywx,CantankerousV,3,Sun Apr 19 08:55:56 2015 UTC,"I'm on ubuntu 14.04, with emacs 24.3.1.  It seems that emacs --daemon is not exiting, and when a new client is launched and attempts to get keyboard input into a minibuffer or helm buffer, the GUI hangs while the terminal that launched the daemon actually waits for the input. Have I misunderstood something about how to launch the daemon?"
emacs,333ywx,tuhdo,2,Sun Apr 19 09:32:29 2015 UTC,"Did you add anything else or just flat out stock Spacemacs? If it is stock Spacemacs, try upgrading to 24.5. I do not have any problem with Spacemacs with Emacs 24.4 and 24.5."
emacs,333ywx,CantankerousV,4,Sun Apr 19 09:55:21 2015 UTC,"Seems like the offending lines were:  (define-key helm-map (kbd ""<tab>"") 'helm-execute-persistent-action) ; (define-key helm-map (kbd ""C-i"") 'helm-execute-persistent-action) (define-key helm-map (kbd ""C-z"")  'helm-select-action)    in dotspacemacs/config. Adding those to a completely stock setup causes emacs --daemon not to return. I'll figure out some other way to get that in. Thanks for the help!"
emacs,333ywx,permafrosty,5,Sun Apr 19 10:39:14 2015 UTC,"Ah right. It is because Spacemacs is lazy loaded, so adding those will cause Emacs error because helm-map does not exist. You have to add it to helm-mode-hook:  (add-hook 'helm-mode-hook             (lambda()               (define-key helm-map (kbd ""<tab>"") 'helm-execute-persistent-action) ; rebind tab to run persistent action               (define-key helm-map (kbd ""C-i"") 'helm-execute-persistent-action) ; make TAB works in terminal               (define-key helm-map (kbd ""C-z"")  'helm-select-action) ; list actions using C-z   ))   or enable helm mode with (helm-mode 1) before setting those."
emacs,333ywx,person808,1 point,Sun Apr 19 10:44:28 2015 UTC,"Ah, that makes sense, and it works! I greatly appreciate the help. Thanks!"
emacs,333ywx,permafrosty,5,Sun Apr 19 10:50:46 2015 UTC,"Hooks aren’t the best place to define key bindings. A hook is run every time a major / minor mode is activated, but key bindings need to be defined only once. To avoid the problem of defining keys before helm-map exists, wrap the code in a with-eval-after-load:  (with-eval-after-load 'helm-mode   (define-key helm-map (kbd ""<tab>"") 'helm-execute-persistent-action)   (define-key helm-map (kbd ""C-i"") 'helm-execute-persistent-action)   (define-key helm-map (kbd ""C-z"")  'helm-select-action))"
emacs,333ywx,pkkm,1 point,Sun Apr 19 23:33:19 2015 UTC,Is with-eval-after-load available on 24.3 though? I thought it only has eval-after-load
emacs,333ywx,username223,2,Mon Apr 20 05:38:22 2015 UTC,"Is with-eval-after-load available on 24.3 though? I thought it only has eval-after-load   It’s not, no. with-eval-after-load was introduced in Emacs 24.4. Using eval-after-load, the code becomes:  (eval-after-load 'helm-mode   '(progn      (define-key helm-map (kbd ""<tab>"") 'helm-execute-persistent-action)      (define-key helm-map (kbd ""C-i"") 'helm-execute-persistent-action)      (define-key helm-map (kbd ""C-z"")  'helm-select-action)))"
emacs,333ywx,syl20bnr,2,Mon Apr 20 11:49:59 2015 UTC,"It's not, but that's easy to fix:  ;; Define `with-eval-after-load' if it's not present. ;; This is for compatibility with Emacs 24.3 (`with-eval-after-load' was introduced in 24.4). (unless (fboundp 'with-eval-after-load)   (defmacro with-eval-after-load (file &rest body)     ""Execute BODY after FILE is loaded. FILE is normally a feature name, but it can also be a file name, in case that file does not provide any feature.""     (declare (indent 1) (debug t))     ;; We can't pass a lambda to `eval-after-load' because that was introduced in Emacs 24.4; earlier versions require the argument to be a quoted form. However, `lexical-let' (from cl.el) creates closures only when it sees lambdas, so lexical bindings won't work if we just pass the quoted BODY to `eval-after-load'. The solution we use is to create a lambda with BODY and pass `eval-after-load' a quoted form that will execute it.     `(let ((body-lambda (lambda () ,@body)))        (eval-after-load ,file `(funcall ',body-lambda)))))   (My Emacs config.)"
emacs,333ywx,username223,6,Mon Apr 20 11:56:31 2015 UTC,"It sounds like another Aquamacs, i.e. a huge, monolithic pile of changes, so I can't imagine trying it.  My Emacs is almost 20 years of tweaks and hacks on top of the standard release, so installing Spacemacs is not much different from installing a whole new editor.  It might be okay for newbies, but it would be crazy to throw out my heavily customized editing environment for some ""community-configured"" thing that changes every month or so."
emacs,333ywx,syl20bnr,2,Sun Apr 19 23:10:11 2015 UTC,"It is not monolithic, how could it be community-driven if it was monolithic ?"
emacs,333ywx,username223,5,Sun Apr 19 23:57:21 2015 UTC,"I'm not sure what you're getting at -- communities create monolithic things all the time, like Linux distributions or desktops.  You can't take your Fedora/Gnome system and add bits and pieces of Debian and KDE without a world of hurt.  It's ""monolithic"" in the sense that it's a single ""package"" (or whatever you want to call it) making all sorts of unrelated changes all over Emacs.  How easy would it be to get Spacemacs to run identically to a vanilla Emacs, then gradually add desired changes one by one?"
emacs,333ywx,tuhdo,5,Mon Apr 20 00:18:27 2015 UTC,"Why would you want to start with a vanilla emacs ?  Spacemacs is organized in layers, there are over 50 layers right now. When installing Spacemacs you get the core of it plus the Spacemacs layer, so only one layer is enabled by default then you enable the layer you want, either contribution layers or your own private layers.  If you want to start with nothing then you can add all the packages of the Spacemacs layer in the variable dotspacemacs-excluded-packages of the dotfile, but what is the point ? You loose all the benefits of the distribution which makes a core pillar about consistency and mnemonic key bindings along with being able to use these bindings with Emacs or Vim style.  I don't know what's your definition of monolithic but Spacemacs is maybe the most modularized distribution out there."
emacs,333ywx,Pasodoble,1 point,Mon Apr 20 03:44:25 2015 UTC,"Why would you want to start with a vanilla emacs ?   Because that's what my personal config is built upon, and I want most of it to keep working.  If you've used and customized Emacs for many years, you've tweaked a lot of things in a lot of areas.  Adding narrowly-scoped packages, e.g. switching among iswitchb, ido, and helm, is relatively straightforward; adding something like icycles is less so, since it tends to put its tentacles in unexpected places; experimenting with a package (or distribution) that changes things all over the place is extremely disruptive.  It sounds like Spacemacs may be better-modularized than the other monolithic distributions, but it's still aimed at someone with a fairly simple .emacs."
emacs,333ywx,Captain-Commando,1 point,Tue Apr 21 00:28:11 2015 UTC,"You can always use your old configure in your private layer, your own isolated universe to the rest of Spacemacs."
emacs,333ywx,Captain-Commando,2,Tue Apr 21 02:27:21 2015 UTC,"Easy. Disable all layers, add them back one by one."
emacs,333ywx,tuhdo,2,Mon Apr 20 21:48:16 2015 UTC,"I am deterred by the recommendation to use an unofficial Emacs OS X port, which looks to be recently ""retired"" by the author.  Any reason for recommending against the official version?"
emacs,333ywx,instant_sunshine,4,Sun Apr 19 10:58:52 2015 UTC,"it isn't retired, the github mirror is retired because the original author published an official git repo somewhere else. if you use homebrew or macports to install it the recipes will be updated to the official repo, no worry. i use it because it has features the official build doesn't, like pixel scrolling. on the official build i was getting a terrible lag trying to scroll with trackpads, like skating on ice."
emacs,333ywx,instant_sunshine,3,Sun Apr 19 17:50:33 2015 UTC,Pixel scrolling?? Surely you jest.
emacs,333ywx,cocanning,1 point,Mon Apr 20 00:02:48 2015 UTC,"I installed the Homebrew formula version and although I love the pixel scrolling (oh how I love the pixel scrolling), some idiosyncrasies made me go huh?? e.g. Why is meta not bound to opt? Why the clunky nonnative fullscreen implementation?"
emacs,333ywx,pyr3,1 point,Tue Apr 21 02:47:12 2015 UTC,(setq mac-option-modifier 'meta)   will bind option to meta. what do you mean by non-native fullscreen?
emacs,333ywx,cocanning,1 point,Tue Apr 21 02:57:32 2015 UTC,"When entering OS X native fullscreen, the GNU version's animation looks like all other apps, whereas with this I got an animation that looks a bit like a Michael Bay Transformer doing its thing... just a bit weird... Is there something I can do to make it do a native animation?  Thanks for your replies. Very helpful :)"
emacs,333ywx,pyr3,3,Tue Apr 21 03:51:31 2015 UTC,"It is because at that time, the ""stable"" Emacs 24.4 OS X crashing a lot. See this Projectile issue and this Reddit thread. It was fixed in the development version of Emacs and emacs-mac-port at the time."
emacs,333ywx,ihatecatsandpeople,3,Sun Apr 19 11:14:04 2015 UTC,(not  (eq Spacemacs Emacs-Mac-Port))
emacs,333ywx,pyr3,2,Wed Apr 22 04:18:10 2015 UTC,End of comment during parsing.
emacs,333ywx,ihatecatsandpeople,1 point,Wed Apr 22 04:50:19 2015 UTC,whoops! Fixed
emacs,333ywx,tuhdo,1 point,Wed Apr 22 05:52:15 2015 UTC,This also turned me off. I was planning on just using the regular homebrew version anyway but then I saw this bit about powerline colors being broken on OSX.
emacs,333ywx,TheBB,1 point,Sun Apr 19 18:32:16 2015 UTC,powerline colors being broken on OSX.   That's a one-line settings change to turn off a (OSX-specific) feature that was enabled in 24.4. I had to have this in my config prior to using Spacemacs because it's an interaction between OSX Emacs and powerline:    (setq ns-use-srgb-colorspace nil)
emacs,333ywx,z27,1 point,Sun Apr 19 19:28:36 2015 UTC,"But I want to use sRGB colors as some colors look a bit washed-out otherwise, so disabling them isn't really a solution."
emacs,333ywx,kshitagarbha,1 point,Sun Apr 19 19:57:23 2015 UTC,"The other solution is to install a hacked font, and configure powerline to use 'utf8' as the delimiter (and set the character). By default Emacs' powerline generates pixmaps for the dividers, which is why they aren't really anti-aliased, and have issues with the colorspace changes.  There's discussion of this in the Spacemacs docs relating to getting the dividers anti-aliased (but I suspect that bypassing the pixmap generation will deal with the colorspace issue as well)."
emacs,333ywx,syl20bnr,1 point,Sun Apr 19 21:03:24 2015 UTC,I would also be more inclined to use if possible to invoke on top of my current emacs installation like (require 'spacemacs) and set layers through defvar variables. I hope in the future they might be able to fold in the changes into a package rather than a separate emacs distribution.
emacs,333ywx,trishume,2,Sun Apr 19 19:14:12 2015 UTC,"I think part of the problem is that there are a lot of things it does for you. To convert my config over was a bit of work, but there were a great many things I had in my config that were part of Spacemacs' core, so were not necessary."
emacs,333ywx,kshitagarbha,1 point,Sun Apr 19 19:30:18 2015 UTC,"Yeah, I suspected redundancy might be a problem..."
emacs,333ywx,instant_sunshine,2,Sun Apr 19 19:55:07 2015 UTC,"Yeah trying it out, it feels very anti-Emacs; there are so many decisions made for the user. Personally I dislike YASnippet, so it's annoying to see all those snippets downloaded when I don't want them."
emacs,333ywx,kshitagarbha,4,Mon Apr 20 01:51:47 2015 UTC,"You can edit your .spacemacs file and exclude yasnippet; add yasnippet to the list dotspacemacs-excluded-packages. You can exclude anything you don't like. To access .spacemacs file quickly anywhere, use SPC f e d or M-m f e d(if you use Emacs style).  Stock Emacs also has defaults that are placed upon users. It is the same thing except Spacemacs has more packages and fix various issues when configuring the packages, so new users don't have to step on the same mistakes over and over again."
emacs,333ywx,tuhdo,1 point,Mon Apr 20 02:59:23 2015 UTC,"This is exactly what prevented me from using it, initially. I've since gone back on that decision. I still don't like it, but not having to maintain 1000+ lines of elisp for an inferior setup suits me fine, too."
emacs,333ywx,syl20bnr,2,Mon Apr 20 09:10:03 2015 UTC,Does it work well with Emacs 25.0.50?
emacs,333ywx,pyr3,1 point,Sun Apr 19 15:09:42 2015 UTC,Haven't tried. I am running on osx 24.5 and it's pretty smooth.
emacs,333ywx,kshitagarbha,2,Mon Apr 20 05:58:28 2015 UTC,"Yes, and I have been quite enthusiastic for months. But today I updated and once again some things broke.   SPC-b-s is switch buffer  SPC-p-s was switch project, but now its CTRL-c p p or something. But I just added entires in my .spacemacs to put it back.  So ""community configured"" can sometimes result in your trusty tool changing every time you update. I hope they can get to a solid out-of-the-box experience soon and keep that stable."
emacs,333ywx,syl20bnr,6,Sun Apr 19 16:37:00 2015 UTC,"You are right about the consistency between bs and ps for switch that has been lost. Maybe I should move bs under bb then, it would make sense.  ps is now project search and it is symmetric with s. Behind s you can choose the search tool to use, right now it is pt, ag, ack or grep. There is also a symmetry between / and p/ which searches globally or in project with the best search tool installed on your system.  Then we could introduce bs with the same semantic than ps and s. Would be perfect.  I don't mind breaking the key bindings from time to time as long as there is an improvement behind the scene. It would be silly to seal the key binding in stone as soon as it is chosen. Especially in 0.xxx releases."
emacs,333ywx,kshitagarbha,3,Sun Apr 19 21:08:51 2015 UTC,"Spacemacs is still young so we do break things often. But if you don't want breakage, just never update and treat it as something you are responsible for"
emacs,333ywx,cpaulik,3,Sun Apr 19 22:33:19 2015 UTC,"Yep, I know. That's what I'm already doing: not updating. That isn't going to work as a long term solution.   I would suggest doing semantic versioning or a similar system: stable releases that are far enough apart - every few months - that the casual user (who doesn't spend all day fiddling with emacs lisp code) can take an hour or two to update and work out any issues. Smaller faster releases can be on the dev line.  Because otherwise there is an ever widening split between emacs hackers and normal people who just need to use their editor.   This is the basic problem with VIM and Emacs but I think its solvable."
emacs,333ywx,kshitagarbha,2,Mon Apr 20 07:19:59 2015 UTC,"So that would be the first thing to solve, have decent semantic versioning, nightlies etc."
emacs,333ywx,trishume,1 point,Wed Apr 22 04:21:29 2015 UTC,"Also I must say I stopped using it for python development. Its frozen up with some repeating error message and I had too much work to do and no time to debug a system I don't understand. That's the downside to Emacs - always under construction, even after 40 years."
emacs,333ywx,tuhdo,1 point,Sun Apr 19 16:38:47 2015 UTC,"Also I must say I stopped using it for python development. Its frozen up with some repeating error message and I had too much work to do and no time to debug a system I don't understand.    What is the error message? Could you open an issue and paste it there? I think many people have no problem with python layer.   That's the downside to Emacs - always under construction, even after 40 years.   Emacs is not always under construction, it's just Spacemacs since it's quite young, not even a year old and is still in beta, so you are expected to have something not working and helping Spacemacs devs out to fix it."
emacs,333ywx,kshitagarbha,1 point,Sun Apr 19 16:58:20 2015 UTC,"The Python error is a known one from anaconda-mode. The fix is in the README and issues [1] of the repo and it is even in the Python layer documentation of Spacemacs [2] :-) Oh and don't forget the chat [3], it works great.  [1] https://github.com/proofit404/anaconda-mode [2] https://github.com/syl20bnr/spacemacs/tree/master/contrib/lang/python#anaconda-dependencies [3] https://gitter.im/syl20bnr/spacemacs"
emacs,333ywx,tuhdo,1 point,Sun Apr 19 17:59:16 2015 UTC,"I personally installed the required packages in the virtualenv I was working in and in the homebrew-installed python (which is the one it's using from the error messages), and it still is attempting to install the deps. I haven't had the motivation to go back. I've been using Vim for python and Emacs js/html/css."
emacs,333ywx,kshitagarbha,1 point,Sun Apr 19 19:25:28 2015 UTC,"You guessed correctly, this is the message:   Blocking call to accept-process-output with quit inhibited!!   It flashes by very quickly and then gets blanked out. You can say that its obviously in the readme, but that's your hindsight. How would I know that seeing this message would naturally lead me to look in the python read me ? I can't even read the message and typing and editing is locked up. How would I know this has anything to do with python ?  Don't take this as complaining - I'm trying to explain what a normal user is faced with.  As per the README I did this:   pip install  jedi==0.8.1 json-rpc==1.8.1 service_factory==0.1.2   Restarted Spacemacs, still getting the error.  So unfortunately I still can't use Spacemacs for development work :("
emacs,333ywx,tuhdo,1 point,Mon Apr 20 07:53:30 2015 UTC,After installing the dependencies I still have the errors 2 or 3 times in *Messages* but it is not blocking anymore and most importantly it works. You can see if you have any error by looking at the buffer *anaconda-mode*.
emacs,333ywx,kshitagarbha,1 point,Mon Apr 20 18:37:16 2015 UTC,"dunno, its still blocking for me. the blocking stops and starts every few seconds.  Error loading tags-file: (user-error File /Users/moi/Sites/nsbuildout/TAGS is not a valid tags table) Blocking call to accept-process-output with quit inhibited!! [89 times] byte-code: End of buffer [4 times] Blocking call to accept-process-output with quit inhibited!! [109 times] ad-handle-definition: `helm-swoop' got redefined [2 times] ] ] Blocking call to accept-process-output with quit inhibited!! [36 times]   anacode-mode shows pypi installation errors.  Downloading/unpacking service-factory   Downloading service_factory-0.1.2.tar.gz   Running setup.py egg_info for package service-factory  Downloading/unpacking six (from service-factory)   Downloading six-1.9.0.tar.gz   Running setup.py egg_info for package six      no previously-included directories found matching 'documentation/_build' Installing collected packages: service-factory, six   Found existing installation: service-factory 0.1.2     Uninstalling service-factory: Cleaning up... Exception: Traceback (most recent call last):   File ""/Library/Python/2.7/site-packages/pip-1.4.1-py2.7.egg/pip/basecommand.py"", line 134, in main     status = self.run(options, args)   File ""/Library/Python/2.7/site-packages/pip-1.4.1-py2.7.egg/pip/commands/install.py"", line 241, in run     requirement_set.install(install_options, global_options, root=options.root_path)   File ""/Library/Python/2.7/site-packages/pip-1.4.1-py2.7.egg/pip/req.py"", line 1294, in install     requirement.uninstall(auto_confirm=True)   File ""/Library/Python/2.7/site-packages/pip-1.4.1-py2.7.egg/pip/req.py"", line 525, in uninstall     paths_to_remove.remove(auto_confirm)   File ""/Library/Python/2.7/site-packages/pip-1.4.1-py2.7.egg/pip/req.py"", line 1639, in remove     renames(path, new_path)   File ""/Library/Python/2.7/site-packages/pip-1.4.1-py2.7.egg/pip/util.py"", line 294, in renames     shutil.move(old, new)   File ""/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py"", line 299, in move     rmtree(src)   File ""/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py"", line 252, in rmtree     onerror(os.remove, fullname, sys.exc_info())   File ""/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py"", line 250, in rmtree     os.remove(fullname) OSError: [Errno 13] Permission denied: '/Library/Python/2.7/site-packages/service_factory-0.1.2-py2.7.egg-info/dependency_links.txt'  Storing complete log in /var/folders/7q/1q7s2z114_l479ntqd0t93s00000gn/T/tmpkynbTA Traceback (most recent call last):   File ""/Users/moi/.emacs.d/elpa/anaconda-mode-20150313.655/anaconda_mode.py"", line 40, in <module>     assert pip.returncode is 0, 'PyPi installation fails.' AssertionError: PyPi installation fails.  Process anaconda_mode exited abnormally with code 1   I manually upgraded to six 1.9.0 which is what it is failing to install.   ❯ sudo pip install --upgrade six                                                                                                                                                                    ⏎ Downloading/unpacking six from https://pypi.python.org/packages/source/s/six/six-1.9.0.tar.gz#md5=476881ef4012262dfc8adc645ee786c4   Downloading six-1.9.0.tar.gz   Running setup.py egg_info for package six      no previously-included directories found matching 'documentation/_build' Installing collected packages: six   Found existing installation: six 1.4.1     Uninstalling six:       Successfully uninstalled six   Running setup.py install for six      no previously-included directories found matching 'documentation/_build' Successfully installed six Cleaning up...  ~ ❯ pip show six --- Name: six Version: 1.5.2 Location: /Library/Python/2.7/site-packages Requires:   So for some reason even though it downloaded and installed 1.9.0 it is now reporting 1.5.2  this could mean that its declaring the dependencies are unmet.  And service-factory is at 0.1.2  ~ ❯ pip show service-factory --- Name: service-factory Version: 0.1.2 Location: /Library/Python/2.7/site-packages Requires: six   Restart spacemacs and its still blocking with the exact same errors.  Its still trying to install these packages (which it does not have permission to do) every few seconds."
emacs,333ywx,kshitagarbha,2,Tue Apr 21 08:39:04 2015 UTC,"That seems like a pure python problem. Have you tried in a virtualenv? Are you sure that ""pip"" and ""sudo pip"" install into the same python installation? Generally you should avoid messing with your system python installation."
emacs,333ywx,metamatic,1 point,Wed Apr 22 00:10:34 2015 UTC,"Ah ! You got it.   success:  Python executable: /Users/moi/.virtualenvs/nsenv/bin/python jedi version: 0.8.1 service_factory version: 0.1.2 anaconda_mode port 9001   So by default anaconda-mode is using /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ and trying to install there. Which it should not be. I don't get why it couldn't be satisfied with the six and service_factory I installed manually.   Generally you should avoid messing with your system python installation.   Yeah, that's why Sublime uses its own isolated python.  I'm only installing these manually because it was suggested as the solution."
emacs,333ywx,gregdev,1 point,Wed Apr 22 12:17:07 2015 UTC,"That's because spacemacs tries to use anaconda sweet and you don't have it installed, common issue we haven't fixed yet"
emacs,333ywx,zeRusski,1 point,Sun Apr 19 22:32:07 2015 UTC,"SPC-b-s is switch buffer   SPC b s is always for buffer switching. It runs helm-mini.   SPC-p-s was switch project, but now its CTRL-c p p or something. But I just added entires in my .spacemacs to put it back.   It was changed to SPC p p. When a new Spacemacs is released. you should read the change log in the under Release Notes button.   So ""community configured"" can sometimes result in your trusty tool changing every time you update. I hope they can get to a solid out-of-the-box experience soon and keep that stable.   ""Community configured"" has it up and down side, but the benefits overcome the down side. That is, instead of everyone repeating themselves, they can simply use one and read the configured layer to understand. If there's something wrong, report and issue or fix and create a PR."
emacs,333ywx,cheezy64,0,Sun Apr 19 16:56:35 2015 UTC,"Yes yes, I know.    Stated another way: the maintenance costs for the user are high.    If there's something wrong, report and issue or fix and create a PR.   You have no idea how busy I am. The fastest solution was to switch to Atom."
emacs,333ywx,tuhdo,1 point,Mon Apr 20 07:10:58 2015 UTC,"If that's the case, then stock Emacs or other editors are more suitable for you. But if you use stock Emacs without bending it, then there's no benefit."
emacs,333ywx,pyr3,1 point,Mon Apr 20 07:32:07 2015 UTC,"Sorry, I don't think that is the only answer.  Emacs is extensible. Why should it then follow that extensibility inevitably leads to unstable software ?   What you are saying is that it is impossible and unreasonable for anybody to use Emacs unless they want to do lots of maintenance. That we should expect things to break often. That we all must be required to know the full codebase.  Does this mean that it is impossible for anybody to release a distribution or system on the Emacs platform that performs as well as Sublime or Atom ?  As a programmer and product developer I don't see why that should be assumed to be true.  Spacemacs is doing great with certain issues like discoverability and learnability. They added rollback for updates. These are moves in the right direction and why I got really enthusiastic.  I'm just pointing out some weaknesses, which once fixed will become strengths.  Your answer is basically: this is not for you, go away.  I don't think that's the right answer ;)"
emacs,333ywx,Pasodoble,2,Mon Apr 20 10:39:36 2015 UTC,"What you are saying is that it is impossible and unreasonable for anybody to use Emacs unless they want to do lots of maintenance. That we should expect things to break often. That we all must be required to know the full codebase.   I did not say that. I only said that if there's something wrong, report an issue or fix it and create a PR. It mean, if you don't have time, how difficult it is to report an issue or ask around the chatroom rather than saying ""It sucks""?  I am a regular contributor and user of Spacemacs, so I expect it to be useful out of the box for everybody with a learning curve as low as possible, otherwise Spacemacs would not exist in the first place. But it doesn't mean it automatically becomes perfect and you needn't do anything. At least if you have a problem, report or ask. Your Python issue is already solved and has been answered by other Spacemacs maintainers. If only you ask or read the documentation.  Btw, Atom has a 2MB file limit I can't imagine how someone can use that. And for Sublime, I don't think it has many great and free packages like Emacs, i.e. you have to pay 70$ for something similar to Magit and 70$ for Sublime itself."
emacs,333ywx,small-wolf,1 point,Mon Apr 20 11:06:26 2015 UTC,"""It sucks""?   I never said that at all.  I said the exact opposite of that.  I brought up an important issue with stability that can lead to improving Spacemacs. I've been on the chat quite a bit and have helped to solve issues there myself."
emacs,333ywx,CauchyDistributedRV,1 point,Mon Apr 20 12:26:24 2015 UTC,"Your Python issue is already solved   Actually it doesn't appear to be. I followed the tip in the readme to install the pip packages (helpfully answered by syl20bnr) but it still doesn't solve it.  I WANT to have my Spacemacs working again for Python, I really do.    Unfortunately it doesn't work now.  Please don't blame me for that, its not my fault."
emacs,333ywx,tvon,2,Mon Apr 20 12:29:21 2015 UTC,I plan to try it if/when there's a version built on Guile Emacs. The combination of vi keystrokes and Scheme scripting will be too much to resist.
emacs,333ywx,cocanning,2,Mon Apr 20 16:01:40 2015 UTC,I recently installed it and I'm very happy so far. I'm a noob to emacs and was a vim user so I don't mind an out-of-the-box solution. Everything seems to be working smooth and the default config was fairly easy for me to switch to. I like the idea of configuration layers so I can include what I need without too much lisp hacking. Do I think it's right for all emacs users? No. If you have a configuration you like and it works for you then it's probably not worth the switch. For someone who wants a jumpstart with some good conventions I think it's a great project.
emacs,335lcv,cocanning,3,Sun Apr 19 19:40:26 2015 UTC,https://github.com/syl20bnr/spacemacs/blob/master/contrib/syntax-checking/packages.el#L25
emacs,333v8l,shackra,6,Sun Apr 19 07:10:17 2015 UTC,You can still use Common Lisp features by using cl-lib (contains Common Lisp functions) or cl-macs (contains Common Lisp extension in macro forms instead of functions). See Common Lisp extension from the official manual. You can also be able to use CLOS to develop your Emacs package.
emacs,333v8l,tuhdo,6,Sun Apr 19 07:27:19 2015 UTC,"I learned them the other way around, but it should be kind of all right.  Elisp is markedly inferior and its sharp edges will probably hurt you a bit but you'll get used to it."
emacs,333v8l,throwaway,4,Sun Apr 19 08:35:05 2015 UTC,"No, as tuhdo stated, Emacs can be extended with Common Lisp and Emacs also has a great environment for writing in Common Lisp called Slime."
emacs,334a7a,chrispoole,3,Sun Apr 19 11:49:20 2015 UTC,Have you tried creating a wrapper function that calls helm-swoop with a argument value of 4 (as that is what C-u does) and the binding that to the new function?
emacs,334a7a,howardthegeek,1 point,Sun Apr 19 17:11:07 2015 UTC,"That was my thought, just wasn't sure how to go about it. (I've pasted the function definition in this comment.)   It seemed far from obvious to me as to how to do that."
emacs,334a7a,ohajiki,3,Mon Apr 20 17:50:41 2015 UTC,"(defun helm-swoop-multiline-4 ()   (interactive)   (helm-swoop :$query """" :$multiline 4))   then M-x helm-swoop-multiline-4 or M-: (helm-swoop-multiline-4)"
emacs,334a7a,ohajiki,1 point,Sun Apr 19 18:04:34 2015 UTC,"Thanks---that's close. The help shows:  (helm-swoop &key $QUERY $SOURCE ($MULTILINE current-prefix-arg))   Writing the call that you did seems far from obvious to me; how did you figure it out, out of interest?  My issue now is that I want to call it from within a helm-swoop session. i.e., a regular swoop session that I can hit a key to change to multiline support. Currently, I see:  helm: Error: Trying to run helm within a running helm session   Any thoughts?"
emacs,334a7a,ohajiki,2,Mon Apr 20 17:49:06 2015 UTC,"helm-swoop is defined by cl-defun which allows key arguments.  (defun helm-swoop-multiline-4 ()   (interactive)   ;; run after exit the current minibuffer operation   (run-with-timer    0 nil (lambda () (helm-swoop :$query helm-swoop-pattern :$multiline 4)))   (exit-minibuffer))  (define-key helm-swoop-map (kbd ""C-c 4"") 'helm-swoop-multiline-4)   While running helm-swoop, hit C-c 4 to transition into multiline session."
emacs,334a7a,DasEwigeLicht,1 point,Tue Apr 21 01:53:29 2015 UTC,"Thanks, that worked perfectly. run-with-timer works, but feels like a bit of a hack, and I've not seen it used before in this way.  What's its purpose here?"
emacs,333rgm,shackra,1 point,Sun Apr 19 06:11:42 2015 UTC,"I already answered this question at the emacs.stackexcahnge.com page:  This is my css file for org-to-HTML layout, and this is my configuration."
emacs,333f77,yet-i,6,Sun Apr 19 03:42:50 2015 UTC,C-x 4 c
emacs,333f77,CodyChan,2,Sun Apr 19 04:42:29 2015 UTC,Indirect buffers
emacs,333f77,kaushalmodi,1 point,Sun Apr 19 15:08:50 2015 UTC,This works! Thank You.
emacs,331gqp,abo-abo,16,Sat Apr 18 16:25:09 2015 UTC,"After reading the entire page, I have no grasp of how ivy improves on ido. How's it better?"
emacs,331gqp,stugots,4,Sat Apr 18 17:01:09 2015 UTC,"ivy's is quicker than ido's default setup. I tested with Linux kernel, search in about 50K files."
emacs,331gqp,redguardtoo,8,Sun Apr 19 05:02:29 2015 UTC,"I did not try ivy yet. What annoys me about those ""electric"" completion modes like ido or helm is that they have a completly different paradigm  of interaction with Emacs.  And that's of course their motivation, so that's obviously my problem.  I'm using Emacs for more that twenty years. Having keys like M-b working differently and others  like M-r do not working at all in the minibuffer just makes me less productive.  I've recently discovered icomplete. It comes with Emacs and seems to be actively maintained. I've configured it so that it replaced ido for me, the only losses were the annoyances described above. It works with completion functions (ido typically only works with completion tables) and uses Emacs' completion styles, meaning that it can be setup to complete e.g. lfn to long-file-name."
emacs,331gqp,eclig,1 point,Sat Apr 18 19:52:42 2015 UTC,"Well, ivy gives you a fully functional editing area in the minibuffer. Nothing ridiculous like rebinding C-a or M-b. Or starting a timer that disallows you to exit from the minibuffer.   can be setup to complete e.g. lfn to long-file-name   ivy-mode doesn't try to be smarter than you, it puts you in charge of building the regex. In your example, lfn can translate to either l.*f.*n or l.*f.*n or \bl.*\bf.*\bn or l\b.*f\b.*n or whatever. With ivy, you decide where the wildcard points should be by putting a space there. Same with \b, ^ and $. For instance, if you know that lf should be together, just search for lf n, which will translate to lf.*n."
emacs,331gqp,tuhdo,4,Sat Apr 18 20:03:53 2015 UTC,"Ivy still needs lots of improvement. For those who want comparison, here it is:  Things that Helm are better:   Better performance. I tested with 80k candidates and can fuzzy match fine (just don't display more than 100 candidates when you activate fuzzy matching). Without fuzzy matching, you can go even further. Handle async process i.e. helm-do-grep, helm-locate, helm-gtags and such... You can press backspace and the list refresh immediately in Helm. You cannot do this in Ivy. No highlighting for candidate list to show you where your pattern matches the candidates. No out of order matching. You can not type pa ^li to get list-package. Helm has an action list that you can select and apply an action on one or multiple candidates. For example, I want to open multiple related files, I can just mark it with C-SPC and press RET. You can use Helm in current window without taking the whole frame width. Large amount of packages using Helm.   Things Ido do better:   Best fuzzy matching thanks to flx-ido. No matter how you convince people, fuzzy matching is just more efficient to get what you want if you already know it. Smex"
emacs,331gqp,EatMoreCrisps,1 point,Sun Apr 19 11:11:14 2015 UTC,"You can use Helm in current window without taking the whole frame width   I'm still not seeing this as an advantage of Helm, after using it for a while — quite the opposite.  I'm typing in the minibuffer, but helm's response to that typing is somewhere else in the frame (worst if I have a vertical split).  I'm, I don't know, about 10 weeks into using helm and I still feel like it's very obtuse in its interface in various small ways.  It's very powerful but it feels like the classic interface-by-engineers to me - something that's been created with functionality first, usability and consistency with existing conventions second.  Not that I'm saying ivy is better - I haven't used that at all."
emacs,331gqp,tuhdo,2,Mon Apr 20 15:40:06 2015 UTC,"Have you set helm-split-window-in-side-p to t? If you do so, whenever a Helm window is opened, it always opens in the current window you are working on. There's no surprise. Completion in minibuffer has problem with large monitor; until the Emacs devs solve this by making a minibuffer per window."
emacs,331gqp,EatMoreCrisps,1 point,Mon Apr 20 15:45:12 2015 UTC,I have.  I don't have a problem with having one minibuffer and having it all happen there.  When I'm typing I'm only working in one place and have >20 years of Emacs habit of looking at the minibuffer to do it.  I wish Helm had a use-minibuffer option.
emacs,331gqp,tuhdo,1 point,Mon Apr 20 16:29:12 2015 UTC,"Ivy still needs lots of improvement. For those who want comparison, here it is:  Things that Helm are better:  Better performance. I tested with 80k candidates and can fuzzy match fine (just don't display more than 100 candidates when you activate fuzzy matching). Without fuzzy matching, you can go even further.    Nonsense, the performance is the same for a list of strings, ivy can even be slightly faster.  Where helm is more advanced is the in-buffer matching: it doesn't build a list of strings and instead works directly on the buffer. Applications for when you're given a list of strings: describe-function, execute-extended-command, projectile, find-file-in-project. Applications for when in-buffer matching wins: swiper (but it's still very fast for 25k lines).   Handle async process i.e. helm-do-grep, helm-locate, helm-gtags and such...    This also isn't true.   You can press backspace and the list refresh immediately in Helm. You cannot do this in Ivy.    This also isn't true.   No highlighting for candidate list to show you where your pattern matches the candidates.    This can be added soon.   No out of order matching. You can not type pa ^li to get list-package.    This is actually a feature. Out of order matching is surprising, I want people to understand exactly how the matching is done. And not wear their lucky hats just to get a match to what they guess is a good input.   Helm has an action list that you can select and apply an action on one or multiple candidates. For example, I want to open multiple related files, I can just mark it with C-SPC and press RET. You can use Helm in current window without taking the whole frame width. Large amount of packages using Helm.    If people actually like for their completion system to mess with their window config, it's fine. I'm going only for minibuffer completion.   Things Ido do better:  Best fuzzy matching thanks to flx-ido. No matter how you convince people, fuzzy matching is just more efficient to get what you want if you already know it.    I've used flx-ido for months and actually disabled it for sources with >10000 candidates. The start-up is just too slow.   Smex    You weren't paying attention while reading the post, smex now can have ivy as a back end with all features working."
emacs,331gqp,tuhdo,1 point,Sun Apr 19 11:32:54 2015 UTC,"Nonsense, the performance is the same for a list of strings, ivy can even be slightly faster. Where helm is more advanced is the in-buffer matching: it doesn't build a list of strings and instead works directly on the buffer. Applications for when you're given a list of strings: describe-function, execute-extended-command, projectile, find-file-in-project. Applications for when in-buffer matching wins: swiper (but it's still very fast for 25k lines).   A list of strings are inserted into Helm buffer and the buffer is manipulated directly in there. So there's no different.  For Projectile, I'm pretty sure I did it with 80k file list. It's easy to test. Set projectile-require-project-root to nil, then cd to filesystem root and run (helm-)projectile-find-file. Wait for the external find to retrieve your file list. Once it's done, you can start typing in without delay.  Or you can download this file list (the file contains over 220k candidates), then run this command:  (with-current-buffer (find-file-noselect ""file_list2.txt"")   (helm :sources (helm-build-in-buffer-source ""test""                    :data (save-match-data                            (split-string (buffer-string) ""\n"" t)))         :buffer ""*helm test*""))   Even with that many candidates, Helm handles with a breeze.   but it's still very fast for 25k lines   helm-swoop works fine for me on files with 50k lines or above fine.   If people actually like for their completion system to mess with their window config, it's fine. I'm going only for minibuffer completion.   You can adjust helm height and width with either pop-win or its autoresize feature. To the end user, it looks the same and Helm can save your screen space with helm-split-window-in-side-p.   I've used flx-ido for months and actually disabled it for sources with >10000 candidates. The start-up is just too slow.   But it does the correct thing for fuzzy matching and is excellent for anything < 10000.   Handle async process i.e. helm-do-grep, helm-locate, helm-gtags and such...   How is this not true? Could I see one in ivy? I'm pretty sure those commands call out to external process and as soon as there's new output, it inserts into Helm buffer immediately, not waiting for the process to finish and you can terminate the running process simply pressing C-g. In contrast, Projectile [uses shell-command-to-string](shell-command-to-string), which blocks Emacs until the process finishes. A simple example: run helm-do-grep on your home directory and enter something that gives many candidates. You can see Helm gradually fill the returned matches into its buffer, not waiting for grep to finish. If you don't believe, try making the same thing on Ivy.  helm-gtags can list over 10000 candidates in an instant, i.e. try helm-gtags-find-rtags on printk symbol in the kernel source.   This is actually a feature. Out of order matching is surprising, I want people to understand exactly how the matching is done. And not wear their lucky hats just to get a match to what they guess is a good input.   No, the current matching in Ivy is a subset of Helm matching. If you don't like out of order, you can do it the same way in Helm. I really hate having to C-a and enter additional strings to narrow to a few candidates. It gets worse when you have to insert patterns in between existing patterns. This is why I don't like Ido. With Helm I insert a space and additional patterns without having to rearrange the patterns.   This also isn't true.   Ok, I've tested again and backspace does refresh the list. At that time, probably I did not see it immediately."
emacs,331gqp,tuhdo,1 point,Sun Apr 19 12:54:31 2015 UTC,"Nonsense, the performance is the same for a list of strings, ivy can even be slightly faster. Where helm is more advanced is the in-buffer matching: it doesn't build a list of strings and instead works directly on the buffer. Applications for when you're given a list of strings: describe-function, execute-extended-command, projectile, find-file-in-project. Applications for when in-buffer matching wins: swiper (but it's still very fast for 25k lines).   A list of strings are inserted into Helm buffer and the buffer is manipulated directly in there. So there's no different.   This again, is nonsense.   Or you can download this file list (the file contains over 220k candidates), then run this command:  (with-current-buffer (find-file-noselect ""file_list2.txt"")   (helm :sources (helm-build-in-buffer-source ""test""                    :data (save-match-data                            (split-string (buffer-string) ""\n"" t)))         :buffer ""helm test""))   swiper runs faster than helm-swoop for your sample file.   If people actually like for their completion system to mess with their window config, it's fine. I'm going only for minibuffer completion.   You can adjust helm height and width with either pop-win or its autoresize feature. To the end user, it looks the same and Helm can save your screen space with helm-split-window-in-side-p.   It doesn't look the same, it isn't the same, and it's not customized that way by default. If I have 3-5 windows open, ivy won't close or move them, even temporarily. As far as I know, helm can't do that.   I've used flx-ido for months and actually disabled it for sources with >10000 candidates. The start-up is just too slow.   But it does the correct thing for fuzzy matching and is excellent for anything < 10000.   Which describe-function and execute-extended-command isn't. And even in the <1000 case, I like ivy more than flx-ido because it's more intuitive.   Handle async process i.e. helm-do-grep, helm-locate, helm-gtags and such...   How is this not true? Could I see one in ivy? I'm pretty sure those commands call out to external process and as soon as there's new output, it inserts into Helm buffer immediately, not waiting for the process to finish and you can terminate the running process simply pressing C-g. In contrast, Projectile [uses shell-command-to-string](shell-command-to-string), which blocks Emacs until the process finishes. A simple example: run helm-do-grep on your home directory and enter something that gives many candidates. You can see Helm gradually fill the returned matches into its buffer, not waiting for grep to finish. If you don't believe, try making the same thing on Ivy.   This has nothing to do with Helm or Ivy or Ido or whatever. It an implementation feature of the commands that use completion. You seem to attribute that advantages of Helm to functions that use Helm. They can just as easily use something different. The diff to change smex from ido to ivy was 20 lines.   helm-gtags can list over 10000 candidates in an instant, i.e. try helm-gtags-find-rtags on printk symbol in the kernel source.  This is actually a feature. Out of order matching is surprising, I want people to understand exactly how the matching is done. And not wear their lucky hats just to get a match to what they guess is a good input.   No, the current matching in Ivy is a subset of Helm matching. If you don't like out of order, you can do it the same way in Helm. I really hate having to C-a and enter additional strings to narrow to a few candidates. It gets worse when you have to insert patterns in between existing patterns. This is why I don't like Ido. With Helm I insert a space and additional patterns without having to rearrange the patterns.   A matter of preference. I like it the other way around.   This also isn't true.   Ok, I've tested again and backspace does refresh the list. At that time, probably I did not see it immediately.   The list is refreshed, it probably just wasn't changed, since removing stuff from the match query doesn't remove candidates: it adds them."
emacs,331gqp,tuhdo,1 point,Sun Apr 19 13:18:04 2015 UTC,"This again, is nonsense.   It's true. Currently Projectile gets the file list from external command. I did a PR with an improvement by not splitting the returned string from the shell command into a list of file. In this PR, I simply retrieved the string with newline as it is, inserted into helm-candidate-buffer and return the buffer as it is to the init function of a Helm source. If you don't believe, ask Helm maintainer.   swiper runs faster than helm-swoop for your sample file.   It starts faster but it suffers the same problem with narrowing the file list: it's almost to the point of hanging. Inserting new character into a pattern is sluggish, while helm-swoop had no problem.   It doesn't look the same, it isn't the same, and it's not customized that way by default. If I have 3-5 windows open, ivy won't close or move them, even temporarily. As far as I know, helm can't do that.   Helm won't close or move anything either. Just set helm-split-window-in-side-p to t and be happy. See this thread again. Here is demo screenshot. It's even smaller than the height of swiper.   This has nothing to do with Helm or Ivy or Ido or whatever. It an implementation feature of the commands that use completion. You seem to attribute that advantages of Helm to functions that use Helm. They can just as easily use something different. The diff to change smex from ido to ivy was 20 lines.   So, you saying that Ivy uses shell-command-to-string to run grep and make your Emacs blocked is no different than Helm running async command that is vastly better because it doesn't block your Emacs? Have you try grepping with Ivy on a fairly large source tree? With Helm, as soon as the external command has new match, it adds to Helm buffer immediately.   A matter of preference. I like it the other way around.   Sure, but I don't find micro editing in minibuffer convenient."
emacs,331gqp,syl20bnr,0,Sun Apr 19 13:34:57 2015 UTC,"This again, is nonsense.   It's true. Currently Projectile gets the file list from external command. I did a PR with an improvement by not splitting the returned string from the shell command into a list of file. In this PR, I simply retrieved the string with newline as it is, inserted into helm-candidate-buffer and return the buffer as it is to the init function of a Helm source. If you don't believe, ask Helm maintainer.   I meant that this is nonsense, because you said that the two cases should be the same, when they clearly aren't. Ivy doesn't have the in-buffer speed-up yet, while Helm does.   swiper runs faster than helm-swoop for your sample file.   It starts faster but it suffers the same problem with narrowing the file list: it's almost to the point of hanging. Inserting new character into a pattern is sluggish, while helm-swoop had no problem.   Fixed. It's just a matter of adding a small optimization trick.   It doesn't look the same, it isn't the same, and it's not customized that way by default. If I have 3-5 windows open, ivy won't close or move them, even temporarily. As far as I know, helm can't do that.   Helm won't close or move anything either. Just set helm-split-window-in-side-p to t and be happy. See this thread again. Here is demo screenshot. It's even smaller than the height of swiper.   Nonsense, helm-split-window-in-side-p can't be intelligent because Emacs window managing isn't intelligent. And it probably can't be made intelligent in principle, because there's just too many choices to be made. Compare the screenshots, helm-split-window-in-side-p is just sad.   This has nothing to do with Helm or Ivy or Ido or whatever. It an implementation feature of the commands that use completion. You seem to attribute that advantages of Helm to functions that use Helm. They can just as easily use something different. The diff to change smex from ido to ivy was 20 lines.   So, you saying that Ivy uses shell-command-to-string to run grep and make your Emacs blocked is no different than Helm running async command that is vastly better because it doesn't block your Emacs? Have you try grepping with Ivy on a fairly large source tree? With Helm, as soon as the external command has new match, it adds to Helm buffer immediately.   I'm saying that the better buffer highlighting of swiper vs. helm-swoop has nothing to do with the fact that swiper uses ivy and helm-swoop uses helm. It's a feature of those two packages. Besides, I still maintain helm-swiper at almost zero cost.  Both completion back ends are solid and have their uses. For Helm, obviously there are more applications that use its back end, some of which have become high quality over the years. Ivy will get there eventually, or maybe not. But it is already better for me in all the applications that I like to use.   A matter of preference. I like it the other way around.   Sure, but I don't find micro editing in minibuffer convenient.   I do."
emacs,331gqp,tuhdo,1 point,Sun Apr 19 13:50:17 2015 UTC,"I meant that this is nonsense, because you said that the two cases should be the same, when they clearly aren't. Ivy doesn't have the in-buffer speed-up yet, while Helm does.   That's why I said Ivy still needs improvement.   Nonsense, helm-split-window-in-side-p can't be intelligent because Emacs window managing isn't intelligent. And it probably can't be made intelligent in principle, because there's just too many choices to be made. Compare the screenshots[1]  , helm-split-window-in-side-p is just sad.   Why do you think the option should be intelligent? And I never said anything about it being smart. helm-split-window-in-side-p just does one thing and does it well: if your cursor is in a window, then Helm window is split inside that window, and nothing else. This feature save screen space and can open right at your working window without having to move your eyes to the minibuffer. I have a 24'' monitor with 1080p resolution (and probably I will buy a bigger monitor in the future, i.e. 4k one), so my Emacs frame is big and I usually have 2 split window uppper and lower and a 3rd big window to the left. When I am in 2 smaller windows, Helm allows me to see the candidates without having to move my eyes back and forth.   I'm saying that the better buffer highlighting of swiper vs. helm-swoop has nothing to do with the fact that swiper uses ivy and helm-swoop uses helm. It's a feature of those two packages. Besides, I still maintain helm-swiper at almost zero cost.   I was not talking about highlighting and swiper vs helm-swoop. I was talking about Ivy vs Helm, and Helm can handle async sources. So you can use async Helm command like helm-do-grep or helm-locate without blocking your Emacs when there are too many candidates returned by external process.   I do.   Fine then. But I doubt many do."
emacs,331gqp,tuhdo,1 point,Sun Apr 19 14:56:25 2015 UTC,"I was not talking about highlighting and swiper vs helm-swoop. I was talking about Ivy vs Helm, and Helm can handle async sources. So you can use async Helm command like helm-do-grep or helm-locate without blocking your Emacs when there are too many candidates returned by external process.   Ivy can handle ansync sources as well. It's just that I can't be bothered to implement this behavior for applications that use Ivy. The source of Ivy doesn't need to be changed in order for an application that uses Ivy to be async. Same thing with Helm: it also has non-async applications, just because their authors didn't find a need to make them async.  What you were saying is that it's impossible to make some Ivy application async. This isn't true."
emacs,331gqp,tending,1 point,Sun Apr 19 15:23:21 2015 UTC,"What you were saying is that it's impossible to make some Ivy application async. This isn't true.   It's like saying Notepad one day becomes Emacs, just because the authors didn't enhance Notepad doesn't mean it can't be done.  Helm has explicit support for async source, i.e. helm-source-async, helm-build-async-source... does Ivy has explicit support like this? If not so, is what I said true?"
emacs,331gqp,tending,2,Sun Apr 19 15:36:21 2015 UTC,"You are very patient, everything you said in your 1st comment are a mine full of very cool ideas and advices for ivy. Then again it is not possible to do any criticism to the author. But don't worry all what you wrote will be in ivy one day."
emacs,331gqp,theldoria,-1,Sun May 3 19:19:50 2015 UTC,"OK, I finally see what you mean by async. I'm not interested in that functionality at the moment.  But it's actually do-able with the current code. You need func-a that generates the candidates. This func-a needs to start a timer and ping the process for more stuff. Then it needs to just modify ivy--all-completions and call ivy--exhibit. So func-a is completely outside of ivy, it's just an application. But I think that timers are lame, they're a pain to debug and I prefer to avoid them. And the situation when I needed an async source instead of a sync one hasn't come up in 4 years.  By the way, the Notepad argument is really lame and rude."
emacs,331gqp,gonz808,1 point,Sun Apr 19 15:52:17 2015 UTC,"Doing the test with file_list2.txt hanged my Emacs:  (with-current-buffer (find-file-noselect ""file_list2.txt"")   (ivy-completing-read ""test: ""                        (save-match-data (split-string (buffer-string)                                                       ""\n""                                                       t))))   and that is without all the Helm features listed above."
emacs,331gqp,gonz808,1 point,Sun Apr 19 12:59:29 2015 UTC,"Please make a bug report. I'd like to see this ""file_list2.txt""."
emacs,331gqp,bugsintherugs,1 point,Sun Apr 19 13:05:57 2015 UTC,I posted it in other comment. Here is the file list.
emacs,331gqp,gonz808,2,Sun Apr 19 13:07:34 2015 UTC,"In order to decide whether to try this it'd be nice to have a breakdown comparing ido, ivy, and helm, and whether any subset can be used together. Right now it's hard to tell without spending hours seriously investing time setting them all up and trying them."
emacs,331gqp,gonz808,1 point,Sat Apr 18 17:10:41 2015 UTC,"Let's just say that ivy is enthusiast-grade. If you need a list of reasons to try it, it's not for you. Stay with ido or helm, they're fine packages."
emacs,331gqp,bugsintherugs,3,Sat Apr 18 17:42:09 2015 UTC,"I have a 10K+ line emacs setup, I am an enthusiast :p"
emacs,331gqp,bugsintherugs,1 point,Sat Apr 18 18:37:10 2015 UTC,"That's a lot. I have less than you if I don't count the published packages.  You probably can appreciate well written Elisp. Just compare the 5000 lines source code of ido.el, with its fancy technique of overusing ido-exit-minibuffer that makes it near-impossible to debug, to 500 lines of ivy.el that does almost the same as ido.el, more in some cases."
emacs,331gqp,trezor2,1 point,Sun Apr 19 08:36:58 2015 UTC,I find the isearch replacement very promising; already keen to keep my hands on ivy
emacs,3308du,simonced,1 point,Sat Apr 18 06:01:50 2015 UTC,"i'm not sure that you can refer to named blocks with a BEGIN_HTML block; the manual suggests it expects literal HTML, not Org syntax."
emacs,3308du,flexibeast,1 point,Sat Apr 18 06:40:08 2015 UTC,That seems to be the case since the block_html contains:   <p> The results should look like:<br  /> </p> <<css1>> <<html1>>   What I try to do is to get a copy of a block_src html as HTML as is at export.  I also tried to use some elisp blocks followed by a result block with no avail.
emacs,32z242,rootis0,9,Fri Apr 17 22:33:09 2015 UTC,"visual-fill-column-mode is a small Emacs minor mode that mimics the effect of fill-column in visual-line-mode. Instead of wrapping lines at the window edge, which is the standard behaviour of visual-line-mode, it wraps lines at fill-column. If fill-column is too large for the window, the text is wrapped at the window edge. It's available on github"
emacs,32z242,kowalj,3,Fri Apr 17 23:28:15 2015 UTC,"I've recently had to install it to get writeroom-mode working. Here's the el-get recipe if anyone needs it:  (:name visual-fill-column     :description ""Mimic fill-column in visual-line-mode""     :website ""https://github.com/joostkremers/visual-fill-column""     :type github     :pkgname ""joostkremers/visual-fill-column"")"
emacs,32z242,DasEwigeLicht,1 point,Sat Apr 18 10:24:00 2015 UTC,Thank you. This is exactly what I needed. Now my life is in perfect harmony once more :-)
emacs,32z242,myeffort,9,Sat Apr 18 18:55:09 2015 UTC,"It seems that the solution is a combination of ""visual-line-mode"" and setting the window margins.  For example the call ""(set-window-margins (get-buffer-window) 0 20)"" will work just as if you had ""fill-column"" set to 80, if you current window width is 100."
emacs,32z242,wasamasa,2,Fri Apr 17 23:19:12 2015 UTC,"This, or rather a programmatic way of achieving this while accounting for changes in window widths, is what Olivetti minor mode does: https://github.com/rnkn/olivetti  Disclaimer: I made it."
emacs,32z242,flexibeast,2,Sun Apr 19 10:42:38 2015 UTC,Olivetti looks very nice! It seems the ultimate in what is needed for comfortable typing of prose. I will use that.
emacs,32z242,wasamasa,1 point,Thu Apr 23 01:05:41 2015 UTC,*blushes*  Thanks for the kind words.
emacs,32z242,xkcd_transcriber,1 point,Thu Apr 23 01:25:44 2015 UTC,"Keep in mind, that by doing so you are reducing window width, and this will come into play when calculating potential of this window to split."
emacs,32z242,eric-plutono,7,Sat Apr 18 13:20:47 2015 UTC,"If you wonder why it was deprecated, take a look at both of their sources.  Not only is it less code (500 lines vs. 100 lines), no, visual-line-mode is implemented in the correct way (by using the display engine features) compared to the other way (of actually inserting newlines and tricking Emacs into believing they're not there). It should be simple enough though to write up a minor mode emulating longlines-mode which would enable visual-line-mode and set the right margin to a value that makes it wrap correctly."
emacs,32z242,gepardcv,2,Sat Apr 18 09:48:06 2015 UTC,"However, longlines-mode can be significantly more usable than visual-line-mode in certain instances: https://debbugs.gnu.org/cgi/bugreport.cgi?bug=18530"
emacs,32z242,eric-plutono,7,Sat Apr 18 12:06:21 2015 UTC,"Oh great, the act of actually inserting newlines... helps with avoiding slowdowns known for viewing files without newlines. Why does this only remind me of this strip."
emacs,32z242,BruceConnor,1 point,Sat Apr 18 15:02:53 2015 UTC,"Image  Title: Workflow  Title-text: There are probably children out there holding down spacebar to stay warm in the winter! YOUR UPDATE MURDERS CHILDREN.  Comic Explanation  Stats: This comic has been referenced 289 times, representing 0.4787% of referenced xkcds.    xkcd.com | xkcd sub | Problems/Bugs? | Statistics | Stop Replying | Delete"
emacs,32z242,michaelhoffman,1 point,Sat Apr 18 15:03:12 2015 UTC,"Ha-ha, excellent! :-)  Now, by understanding the background behind the implementation of longlines-mode and visua-line-mode, I find the illustration very apt.  With my new understanding I believe visual-line-mode was the right decision and the use of set-right-margin gives same useful functionality which was missed."
emacs,32z242,zk_phi,1 point,Sat Apr 18 18:48:28 2015 UTC,"I agree that from a programmer's perspective the implementation of longlines-mode was a kludge. I was only arguing that visual-line-mode was close but not exactly what we used to have.  I posted the same question to one older discussion and I got a reply similar to yours, here is what /u/RobThorpe said -- https://www.reddit.com/r/emacs/comments/2sb4r0/using_emacs_for_nonprogramming/cqgmfsc  My conclusion now is we can get the best of both worlds by combining visual-line-mode with the manipulation of the right margin."
emacs,32z242,phalp,4,Sat Apr 18 18:45:07 2015 UTC,"Do you know why ""longlines-mode"" was removed?   All I remember is it being made obsolete back in 2012, but I can’t remember any specific reason beyond visual-line-mode being a worthy replacement.   Is there any replacement that acts 100% as ""longlines-mode"" used to be?   You can still use longlines-mode.  The mode is now in Emacs’ directory of obsolete packages, but you can download a copy from here, place it somewhere in your load-path, and then (require 'longlines) to make it available."
emacs,32zfeb,BaxterBoldt,11,Sat Apr 18 00:38:16 2015 UTC,Do the lines have a single semicolon starting the comment?
emacs,32zfeb,camdez,3,Sat Apr 18 01:22:07 2015 UTC,I too have been irritated by this and your question immediately made a light go on in my head: yes!  Do you know why this behaviour is in place? I see it in lisp-mode.  edit: it's electric indent mode - not sure why this is desirable.
emacs,32zfeb,benfitzg,15,Sat Apr 18 02:01:26 2015 UTC,Single semicolons are meant for comments that are on the same line as the code they are explaining - use multiple semicolons for comments that aren't meant to share their lines with code.
emacs,32zfeb,roerd,2,Sat Apr 18 03:22:25 2015 UTC,interesting - thank you. It's odd that putting a single colon comment on the first line of a file causes a 40 space indent. Clearly this isn't aligned with code so perhaps defaults to 40.
emacs,32zfeb,benfitzg,6,Sat Apr 18 11:22:05 2015 UTC,"No, it is meant for comments that are on the same line as a piece of code: http://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html"
emacs,32zfeb,AnAirMagic,2,Sat Apr 18 13:46:55 2015 UTC,"thanks, was unaware of this convention for 3 and 4 semicolons"
emacs,32zfeb,benfitzg,1 point,Sat Apr 18 15:39:05 2015 UTC,"Yep, that was the issue. Thanks very much."
emacs,32zsdg,racoonear,3,Sat Apr 18 02:51:43 2015 UTC,"Yes, that behaviour is caused by emacsclient. By specifying ""-nw"" you're telling Emacsclient to create a new Emacs Frame, a ""client frame"".  If you do C-x C-c that's considered killing the client frame only.  You can get rid of this behaviour by specifying -n instead of -nw.  In that case emacsclient will just add the file as a new buffer to the existing Emacs frame. If that frame is graphical it'll use that, if it's text then it'll use that.  See (info ""(emacs) emacsclient Options"")"
emacs,32zsdg,RobThorpe,1 point,Sat Apr 18 20:59:16 2015 UTC,"That's informative, thanks!"
emacs,32zsdg,qnix,2,Sun Apr 19 02:29:42 2015 UTC,"Maybe something like this:  (defun really-kill-current-buffer ()   ""Kill the current buffer - even if modified.""   (interactive)   (set-buffer-modified-p nil)   (kill-buffer (current-buffer)))"
emacs,32zsdg,BasementTrix,1 point,Sat Apr 18 03:49:10 2015 UTC,Thanks!
emacs,32wkpy,tetheno_,17,Fri Apr 17 08:51:27 2015 UTC,"I don't mean to be rude, but I suggest reconsidering what you want to keep track of.  Tracking everything creates quite a burden for yourself.  Think of how much time you will spend each day entering data into your system, and how much time you will spend creating the system in the first place, and how much time you will spend maintaining the system.  What will the payoff be?  Will you actually save any time in the end by spending all this time up front?  Not to engage in Internet psychology, but this seems like a manifestation of an OCD.  Then, how will you feel if you miss something, if you forget to enter some data?  How will you feel if some of this ""sand"" ""slips through your fingers""?  That's all it really is, anyway: like sand in an hourglass, it just keeps falling through, and in the end, it's all in a big, meaningless pile.  But if you insist on carrying it all, the weight adds up.  Consider the value of the data you want to track, and make sure that the data you are tracking actually has value.  A professor of mine once said something that has stuck with me: in order to not miss out on the great things, you have to be willing to miss out on some of the good things.  I think that principle applies here.  Don't spend more time keeping track of your life than you do living it.  Make sure your tools are serving you, not vice versa.  :)"
emacs,32wkpy,gottabeme,6,Fri Apr 17 13:20:26 2015 UTC,"For clarification: Are you making this comment from a position of ""I'm familiar with QS and this is my criticism of it""; or ""I'm familiar with QS and this is not how it's typically implemented""; or ""I'm not familiar with QS""; or something else?  (I'm not overly familiar with it myself.)"
emacs,32wkpy,philh,8,Fri Apr 17 13:29:00 2015 UTC,"A position of, I've read a blog post or two about it, and read the OP, and applied what seems to me like common sense, and here's my conclusion.  I think there is often a tendency among those who become more ""intimate"" with computers (and especially Emacs, and especially Org) to want to make more and more powerful systems, and track more and more data.  Some sense of satisfaction comes from ""building a system"" and sort of ""entrusting"" one's life data to it.  It lends a sense of being in control of one's life, or of having a power over one's life that one wouldn't otherwise have.  But like a lust for omniscience, it is false and unattainable.  I think it's usually more of a means unto itself than a means to an end.  It's fun for a while, but it doesn't accomplish anything, and it has limited usefulness in enhancing the rest of one's life.  It is in a way a distraction from actually living life.  I think many people in this situation have a vulnerability or addictive tendency toward the idea of knowing things--the more, the better.    But humans are finite, and each person's life certainly is.  A better, more fulfilling life does not come from bringing more data into one's realm, one's sphere of understanding--it comes from letting go of more things, allowing oneself to focus on what truly matters.  Perhaps a TL;DR will help: When your life is flashing before your eyes or you're on your death bed, you won't find yourself wishing that you could look up what side dish you cooked on February 27, 2015, and what you were wearing at the time.  ;)  Or perhaps an illustration from a famous person, Einstein, who didn't even remember his own phone number.  Why?  It wasn't important enough for him to remember it.  He could look it up if he needed to.  Relevant to this subject: he obviously wouldn't have devoted time to writing down things he wouldn't need to look up in the future.  He had more important things to do.  I mean, think about this: can you imagine a famous, accomplished person like Einstein or Leonardo keeping a journal of what clothes they wore each day, or what they had to eat?  Those would have been irrelevant trivialities to them.  How about someone like Franklin?  He kept a journal of virtues for a while.  But those weren't irrelevant trivialities: they were character traits he wanted to improve.  Over time, as he improved them, he didn't need to keep track of them every day, so he stopped recording them."
emacs,32wkpy,gottabeme,2,Fri Apr 17 14:00:40 2015 UTC,"Are you familiar with people's stated reasons for doing QS? Which AFAIK are things like being able to look at the data and see, hey, it turns out that every time I eat salmon I get terrible shits, I guess I'll stop eating salmon. Or, oh it looks like I get a lot more compliments when I wear this shirt than that shirt, I'll wear this one on my next date.  It's just that you seem to be ignoring those, and assuming that people actually do QS because of some psychological tic, which makes it difficult for me to take your criticism seriously."
emacs,32wkpy,philh,2,Fri Apr 17 14:20:39 2015 UTC,"I didn't say that that was the only reason for doing so.  But you seem to be ignoring that, which makes it difficult for me to blah blah blah... :P  Seriously though, if you're having a specific health problem and need to track your diet to figure out the cause, of course, that's great.    But the OP does not seem to be trying to solve any particular problems.  He seems to just want to record a bunch of data without any particular purpose, thinking that maybe something will emerge from it.  My point is that doing so creates a significant burden (i.e. it creates a problem), and that I have noticed this kind of tendency or pattern in people before, and that I think it can be unhealthy.  Maybe you should re-read what I wrote before."
emacs,32wkpy,gottabeme,1 point,Fri Apr 17 14:40:21 2015 UTC,"I mean, you literally said ""this seems like a manifestation of an OCD"", and you spent a lot of words making an argument that assumed people had no sensible reasons for doing what they do, and trying to convince them that they were just trying to fulfill some unfulfillable need, so... yeah, it still seems to me that you're missing the point.  But, I don't care enough to continue, so tapping out now."
emacs,32wkpy,philh,2,Fri Apr 17 14:58:36 2015 UTC,"You don't seem to grok the distinction between suggesting that something is possible and saying that it is definitely so, to the exclusion of all other possibilities.  That is the point that you seem to be missing."
emacs,32wkpy,gottabeme,3,Fri Apr 17 15:46:33 2015 UTC,"Exactly. You're completely right. As of today I'm only keeping track of just a few things because of the overhead that would be tracking everything. I track ""important"" events like books I read, films I see, expenses etc. I only clock when I'm working or studying as those are the parameters that I'm trying to maximize. And I only schedule important meetings, exams, events etc  What I want to do is to make it so seamless and fast that I can categorize 80% of what I do in less than 30 minutes per day.  For example, imagine that you wake up. Stop the timer. Start timer for a shower. Stop timer, start timer for dressing. It asks you what you wear. You start selecting what you wear. I want to make it so fast that it would take you 20 seconds at most. We all follow patterns. If I choose that shirt, or those shoes, the probabilities of the other pieces of the outfit will vary. Even depending on the day or month. I could even fetch the weather and take it into account. My intention is to make a data-entering system that will make use of this things so one can speed it a lot. And further usage will make it better and better. With a good enough task switching and entering system it can be almost painless.   30 minutes per day it's not that bad when you're recording what did you wear, how did you feel, what did you eat, what did you accomplish, read, listen to, watch, met, cooked, bought..  Will it be useful ? Will those metrics give me any advantage for further experimentation and self-improvement ? I don't know. But it seems a fun project to do. I will spend the whole Summer coding it. Plus I want control over my data. What I capture and what I can do with it. Thinking in the long term is mostly a one time investment. Like Emacs.   Do I have an impending sense of collecting everything ? No. Will I carry all my life doing this tracking ? I don't know, if I achieve my objective.. yes. If it's a pain, no."
emacs,32wkpy,gepardcv,2,Fri Apr 17 13:55:56 2015 UTC,"So you plan to run to your Emacs-enabled workstation every time you switch gears, even if it's moving from the shower to the kitchen to make breakfast? Sounds like a huge, huge burden. No matter how seamless you make org-mode doing this.  You need a way better data entry system. A specialized app for an Apple Watch, perhaps. It could certainly use a org-mode back end, it would help with analysis (babel, literate programming, etc.). There is likely a land grab under way for smartwatch apps — if you build a good enough system now, get to market quickly, hook it up with health monitoring, and help produce actionable data, you might have something worthwhile on your hands."
emacs,32wkpy,grabyourmotherskeys,1 point,Fri Apr 17 16:09:19 2015 UTC,"Yes. I have been thinking about it a lot. One hacky way would be to interface with Emacs through web offering an API for the phone, smartwatch. There is not market in that though, and I don't know the real feasibility of it either.  I have already played hooking a Xiaomi Mi Band with Org-Mode (there is a python library to interface with the band) so it can tell me when the timer has finished (pomodoros) by vibrating etc It's mostly one way, but I have thoughts about how to use those devices with Quantified Self.  To do a big simplification of Org-Mode and Emacs with very sensible defaults and already defined workflows, with web and mobile apps. Yes. It might be something worthwhile. I do think that there are a lot of ideas in this community that would make a hit if implemented correctly for the big-market. But I haven't played enough with this. I still don't know how I will do it in Emacs. Maybe in the future I will try to make all of this into a product. For now I'm just playing. :)"
emacs,32wkpy,gepardcv,4,Fri Apr 17 17:07:44 2015 UTC,"I connect to a vps running emacs from my phone using JuiceSSH. Works great. I use a screen session named emacs and have juice run ""screen -d -r emacs"" automatically when I login. This means even when disconnected the screen session stays active so I just rejoin it.   I can also do this from a tablet, Chromebook, or my workstation at the office.   Using helm with org, org agenda, and so on you can do quite a lot very quickly."
emacs,32wkpy,gottabeme,1 point,Fri Apr 17 22:19:06 2015 UTC,I will give it a try! Right now I'm waiting for Orgzly to sync with Git but this can be a good solution.  Thanks
emacs,32wkpy,gottabeme,2,Sat Apr 18 09:02:15 2015 UTC,"As a first cut of this, I would treat Org as the data format (most likely a subset) and analysis platform. The watch app would know nothing about Org, it would only report data: timers, activities, answering questions (""rate the meal you just had"") based on activity hooks, and health data. This data would go up to a server. The server would maintain an Org file (this will be quite a trick to do well). You then open it in Emacs whenever you want to look at your analytics."
emacs,32wkpy,gottabeme,1 point,Fri Apr 17 17:56:56 2015 UTC,"Well, hey, do what you want.  Hopefully, regardless of how it turns out, you'll learn about elisp and Org, and that's not a waste of time (IMO ;).  But as I mentioned in this other comment, think about what you're tracking.  I can't imagine Einstein or Leonardo tracking what clothes they wore and how long it took them to get dressed.  If your objective is to optimize or enhance your life, tracking minutiae like that won't help, because that requires devoting a substantial amount of attention to it.  What will help is just doing it and forgetting about it--""putting it on autopilot.""  What will make your life better is letting go of details like that and focusing on ""big picture"" things that actually matter."
emacs,32wkpy,xhevahir,2,Fri Apr 17 14:12:49 2015 UTC,"Certainly there is a danger on collecting and quantifying too much. There is also a danger on being on ""autopilot"". I don't know which is the optimal point for myself or most people. I haven't played enough with quantified self to have a definite opinion about what is right for me.  Tracking what one dresses might seem like a waste. It might not be. It influences how others think and act with respect to you and also how you act yourself. I will know how many times I use an item with respect to what it did cost me. I will be able to compare whether it's better to buy X or Y. That's just one example of a seemingly not useful item.  I won't have the data sitting. Maybe it will take some time to have enough data to do something meaningful with it.. But I have ideas for most of it. Even shaving. Should I use a safety-razor or not? Can I improve my shaving routine doing deliberate practice so I win 20 minutes per week for an initial investment of one hour? Does meeting that person or going to that place make me happy or not? Do I feel better with a 40 hours work week or with a 70 hours work week? In which one I get more done? There is a correlation between tasks done and the time I sleep? Which are the best foods taking into account the price, the nutrient profile and the time/hassle it takes to prepare them? There is a correlation between them and any other item? Without data you can't even start answering those questions. And I know it's not that easy to get answers to those questions. But without any data you don't have almost anything to work with.  A lot of accomplished persons did kept diaries. They might even spent more time that I'm going to spend. They did not do quantified self because it wasn't a concept and they didn't got computers. We can set a system and make it work for us for years with almost no tinkering. And Quantified Self is in itself a ""better journal"". I even think that Leonardo Davinci did kept journals about the books he read or his expenses.  In the end I may spend more time and effort developing my system and thinking about it that it will save me. And you're right. It's possible. But it's fun for me, so I don't care. I already take Emacs as a hobby and lifestyle. Quantified self is another one. I get pleasure from it."
emacs,32wkpy,gottabeme,4,Fri Apr 17 15:28:52 2015 UTC,"Ok, I think I'm seeing a pattern here.  For example:   Does meeting that person or going to that place make me happy or not? Do I feel better with a 40 hours work week or with a 70 hours work week? In which one I get more done? There is a correlation between tasks done and the time I sleep? Which are the best foods taking into account the price, the nutrient profile and the time/hassle it takes to prepare them? There is a correlation between them and any other item?    Those are questions that people typically know the answer to without having to record and analyze data.    ""Do I like hanging out with Bob?  Do I like going to the cafe?  Well, let me consult my spreadsheet and calculate the contentment quotient for each experience involving them...""  Do you see what I mean?  :)  Those are things that the human mind typically handles unconsciously.    ""Do I feel better with a 40 hours work week or with a 70 hours work week?""  If you ask most people who have to work more than 40 hours a week, they won't need to look up data to answer this question.  ;)  ""Which are the best foods taking into account the price, the nutrient profile and the time/hassle it takes to prepare them?""  Most people wouldn't need to do such a detailed analysis unless they were a professional dietician.   Without data you can't even start making those questions. And I know it's not easy to get answers to those questions. But without any data, you don't have almost anything to work with.   Like I said, most of those are things that people simply know from experience.  The mind processes things and people simply know whether they enjoy someone's company or going to a certain place.  It's not necessary to quantify it.  Another example:   Even shaving. Should I use a safety-razor or not? Can I improve my shaving routine doing deliberate practice so I win 20 minutes per week for an initial investment of one hour?   Shaving is something typically done every day, or almost so.  Unless you've never shaved before, it's not necessary to do deliberate practice, because every time you do it, you get better at it.  So it seems to me that you're looking at these activities in a rather...unusual way, perhaps mechanistically, as if you were more a computer than a human.  ;)"
emacs,32wkpy,Frater_Petrichor,3,Fri Apr 17 15:44:49 2015 UTC,"Those are questions that people typically know the answer to without having to record and analyze data.   It seems to me that you're implying that these answers are enough, better and less biased. They might be, or might not. I don't know enough to have a definite position. I'm pretty sure it will depend on the question itself. Certainly I'm capable to form judgement about all of those questions without explicitly recording and analyzing data. The answer is not black or white though. Quantified Self might provide a better answer to some of those questions which in fact justifies the time it takes.   ""Do I like hanging out with Bob? Do I like going to the cafe? Well, let me consult my spreadsheet and calculate the contentment quotient for each experience involving them..."" Do you see what I mean? :) Those are things that the human mind typically handles unconsciously.   It handles unconsciously until certain point as I said before. I'm arguing that Quantified Self might provide better answers.    ""Do I feel better with a 40 hours work week or with a 70 hours work week?"" If you ask most people who have to work more than 40 hours a week, they won't need to look up data to answer this question. ;)   Yes. Until certain point. That person won't know if 45 hours it's best. Of if working more time allows him to delegate other tasks which have a worse effect on general happiness, and you get more overall happiness working 70 hours.   ""Which are the best foods taking into account the price, the nutrient profile and the time/hassle it takes to prepare them?"" Most people wouldn't need to do such a detailed analysis unless they were a professional dietician.   Most people don't optimize almost any aspect of their lives. Most of the people spend most of their time watching TV or following the Instagram feed. I'm certain that if I have some issues due to food, it will help me to have been tracking it. For me, or for the professional who is taking care of my health.   Like I said, most of those are things that people simply know from experience. The mind processes things and people simply know whether they enjoy someone's company or going to a certain place. It's not necessary to quantify it.   Obviously we're able to function without any explicit quantification. That's not the question. The question is whether doing that explicit quantification will yield you better results and answer. Whether it will allow you to ""know better"". It's completely not necessary to quantify it, you're right.   Another example: Even shaving. Should I use a safety-razor or not? Can I improve my shaving routine doing deliberate practice so I win 20 minutes per week for an initial investment of one hour? Shaving is something typically done every day, or almost so. Unless you've never shaved before, it's not necessary to do deliberate practice, because every time you do it, you get better at it.   Deliberate practice is precisely trying to improve in a explicit manner. It's known that doing something everyday doesn't make you improve. And that it's not even taking into account which products or tools are better. Quantified Self set you up to think about what you do and how you do it.   So it seems to me that you're looking at these activities in a rather...unusual way, perhaps mechanistically, as if you were more a computer than a human. ;)   What is being mechanistic, human or a computer ? I'm mapping my life into the computer for further analysis. First because it seems curious to me, it seems fun, and I think it might be useful. That's the answer.  You seem to think that because someone has this interests it's in fact some kind of social inept who tries to make sense of his life by mapping it into a computer and then just limiting itself to that model that he can understand. Making a limited map of the territory, and restricting his life by it. At least that's what I think you're saying, correct me if wrong. In my case you're far away from being right."
emacs,32wkpy,gottabeme,2,Fri Apr 17 16:35:13 2015 UTC,"Obviously we're able to function without any explicit quantification. That's not the question. The question is whether doing that explicit quantification will yield you better results and answer. Whether it will allow you to ""know better"". It's completely not necessary to quantify it, you're right.   More important questions are: Can you know better?  Can these kinds of things even be quantified, even in a messy, approximate way?  Can they be measured?  Will it really improve your quality of life to do so?  Will it improve your social life to quantify your friendships and social interactions?    Life is often better served by forgetting than by remembering and measuring.  cf. forgiveness, grudges, etc.  :)   It's known that doing something everyday doesn't make you improve.   Well, I guess you need to explain what you mean by that, because on the surface, it makes no sense whatsoever.  :)  If you mean that some activities benefit from deliberate practice and analysis of shortcomings to improve (e.g. coaching in sports), that is true to some extent.  But it's also true that, for many things, simply doing it over and over again certain does improve your skill (e.g. also sports).  Generalizations, generalizations... :p"
emacs,32wkpy,forked_tongue,2,Fri Apr 17 17:35:46 2015 UTC,"More important questions are: Can you know better? Can these kinds of things even be quantified, even in a messy, approximate way? Can they be measured? Will it really improve your quality of life to do so? Will it improve your social life to quantify your friendships and social interactions?   I'm certain that yes. Yes approximately. Yes approximately. I don't know but, taking into account the studies behind mindfulness, CBT and journaling (and their resemblance with Quantified Self and self experimentation), I might even say yes in some situations.    Well, I guess you need to explain what you mean by that, because on the surface, it makes no sense whatsoever. :)   A person who types with two fingers. They might do it everyday. They might improve but they most probably won't meet the speed of a person who does know how to type. You can apply that to shaving, cooking, socializing, programming, cycling, photography.. Repeating the same over and over it's not deliberate practice, and won't make sizable improvements if you already have been doing it for some time."
emacs,32wkpy,gottabeme,2,Fri Apr 17 17:56:30 2015 UTC,"A person who types with two fingers. They might do it everyday. They might improve but they most probably won't meet the speed of a person who does know how to type. You can apply that to shaving, cooking, socializing, programming, cycling, photography...   A lot of the examples you've mentioned don't seem to lend themselves to any but the most arbitrary quantification. What are you suggesting are the cooking/socializing/programming equivalents to words-per-minute or typing accuracy?"
emacs,32wkpy,forked_tongue,1 point,Sat Apr 18 01:21:21 2015 UTC,"It depends on what you want to achieve, and certainly the metrics would be mostly personal in things like socialization. Time you spend with friends, self-reported satisfaction in those meetings, perceived quality of those friends, number of them, connections that they offer.. The metrics mostly depend on your objectives. Maybe work related, fun related, friend related, business related.. Ways to do deliberate practice (or just practice) on socialization ? Improvisation, Toastmasters, books, putting yourself in new situations..   Cooking ? Nutrient profile, time, cost, taste.. Take a book on recipes and start practicing, look for some guidelines in healthy eating, take a look for some better alternatives of what you are used to eat.   Programming. There are a number of tools that can measure ""code quality"". You can use those metrics or the time you spend solving problems, the number of bugs you commit, your self reported quality of code or knowledge of the platform, the reported by others, standardized tests, number of languages or paradigms in which you are fluent, understanding or ability to do data structures/algorithms related problems..  I mean, there are metrics for everything. Are they arbitrary ? In most fuzzy/complex areas of human existence they are. But that doesn't mean that those more or less arbitrary metrics are completely invalid or not useful."
emacs,32wkpy,gottabeme,1 point,Sat Apr 18 08:57:53 2015 UTC,I would like you to answer whether my last part of my previous reply is your position.   I didn't say any of those things you are referring to.  You came up with those yourself.  I'm a random person on the Internet.  Why do you care what my position is?  Why do you care what I might think about you?  I don't even know who you are.    I would like you to think about why this matters to you.  There may be something going on here that you are avoiding.  ;)
emacs,32wkpy,forked_tongue,2,Fri Apr 17 18:01:16 2015 UTC,Despite that you brought up some real issues and ideas I think that this reply is mostly trolling.  I won't spend more time continuing this discussion.
emacs,32wkpy,gottabeme,1 point,Fri Apr 17 18:36:59 2015 UTC,"You need to read about Buckminster Fuller. Don't wait, just go."
emacs,32wkpy,forked_tongue,1 point,Fri Apr 17 15:10:43 2015 UTC,"He was certainly an interesting and unusual figure.  Can you recommend any specific resources, like any good biographies?  I mean, I've heard of him and know a little about him, but nothing in detail."
emacs,32wkpy,gottabeme,2,Fri Apr 17 15:47:39 2015 UTC,"Socrates declared ""the unexamined life is not worth living.""  Further, modern research suggests human memory is constructive, rather than an accurate record.  (See also, the work of Elizabeth Loftus).  Further still, the OP's stated desirable records, ""what I eat, what I cook, who I meet, what I dress"" don't seem especially onerous to track.  Perhaps excepting trying to record everyone he encounters at a large convention, it seems like the entirety of that recording shouldn't take more than a few minutes from each day (a quick summary as part of a bedtime, or an early morning ritual, for the previous day, should suffice).  As for what will the payoff be, I can imagine a number of benefits.  Improved diet, improved wardrobe selection, better networking opportunities and relationships, are all obvious benefits that could stem from the OP's stated tracking.    There may be non-obvious benefits that manifest later on as well, e.g. supposing the OP develops say, diabetes...the recorded changes in diet may help them discover it earlier (and the habit of tracking their diet will continue to serve them very well in that case).  In light of the above, which itself is just a brief sketch, you seem to underestimating the potential benefits of such tracking, while greatly overestimating the personal costs of doing it...in a fairly condescending manner, no less, it seems to me.  So, in return I ask you this:   are you really trying to help the OP here?  Or are you just being judgmental about their choices?"
emacs,32wkpy,forked_tongue,1 point,Fri Apr 17 16:50:32 2015 UTC,"So, in return I ask you this: are you really trying to help the OP here? Or are you just being judgmental about their choices?   Seems to me that you're being judgmental about my potentially being judgmental.  ;)  Not to mention ascribing condescension to me.  That could mean that you're being hypocritical...   Further, modern research suggests human memory is constructive, rather than an accurate record. (See also, the work of Elizabeth Loftus).   I didn't say otherwise.  But by implying otherwise you seem to also be missing my point.   Socrates declared ""the unexamined life is not worth living.""   Nor did I advise against examining one's life.  If you knew me personally you'd laugh at the idea that I would suggest that.  Please stop generalizing and assuming and strawmanning and just take my words at face value.  So it seems like my attempts at communication are failing.  I'll give it one last shot:  It has been popular for a while now to try to optimize one's life.  ""Lifehacks,"" GTD, ""productivity,"" etc.  There's this idea--usually unspoken, but implied, and unconsciously understood--that if one can just find the right tool, the right method, the right technique, the right process, that one's life will be better and more fulfilling (often because one will be ""more productive"").  People who gravitate toward Emacs and Org-mode and GTD and things like that (and I include myself) seem to be vulnerable to this idea.  It's not that doing any of these things is wrong or bad or useless.  Don't misunderstand me, please.  It's that doing them will not make one's life more rewarding or fulfilling.  They are not the answer to life's problems.  But the amount of effort that some people put into them strongly implies that they think otherwise.  People who do indeed think this will ultimately be disappointed, and the time they have spent will have been wasted on an illusion, a distraction.  This is what I encourage you to think about.  This is the self-examination I encourage you to undertake.    Perhaps this is not the case with you.  Great.  Use these tools in moderation as you live your life.  But perhaps this is you.  Perhaps you don't even realize you've been operating under these unspoken assumptions.  Perhaps you haven't even realized what are the voids you've been trying to fill with these worldly, ephemeral ideas and techniques.  If so, let today be the first day of the rest of your life.  :)  And if you think all this is grandiose and silly, you either are not the kind of person I'm talking about--or you are precisely this kind of person, but so deep down the well that you can't see the top anymore.  Good luck!  :)"
emacs,32wkpy,forked_tongue,2,Fri Apr 17 17:26:31 2015 UTC,"Yes, my judgment of you is that you're being extremely judgmental here, imposing your own values upon others.  You assume you understand their motivations, know the final results of their behavior, and assume your own greater wisdom in those matters...all of which seem very poor assumptions to me.  And  you certainly don't seem to be shy about issuing edicts (or at least ""encouragement"") for how others should think and behave, which I do find insulting and condescending.  But yes, perhaps these judgments are hypocritical, so I'll avoid addressing you and your behavior from here on out.  Continuing...  There is no strawman in my prior argument.  My first 3 paragraphs established a philosophical motivation for the desire to record one's life, the scientific evidence for the necessity of doing so for accurate recall, and finally addressed the errors I saw in your reply regarding OP's specific desires, respectively.  I would agree with you that there are no truly magical behaviors that will ""solve"" life.  But I markedly disagree that incremental improvements are not worth pursuing.   It's that doing them will not make one's life more rewarding or fulfilling. They are not the answer to life's problems.   Consider something as banal as flossing.  Is it the ""answer to life's problems""?  Clearly not. But I do believe it can, in fact, ""make one's life more rewarding or fulfilling"", in all sorts of subtle ways (which are hopefully obvious).  Certainly, there's a limit to that, with greatly diminished returns beyond flossing more frequently than dining, possibly even becoming harmful if actually taken to OCD levels of behavior.    But that's your argument, essentially.  Which reaches, due to that fear of taking it too far, a very poor conclusion:  that flossing is therefore harmful, and practitioners should reevaluate their life choices.  The purpose of flossing is not to fill a void in life, nor to resolve any issue, great or small.  It's simply a behavior to provide a marginal incremental benefit to life.  Now, perhaps this flossing argument is a strawman...but it certainly seems very close to the argument you are putting forward here.  There is zero evidence in OP's original post that they are being pathological with their application of QS techniques.  That QS techniques cannot give life meaning is not relevant.  Neither can many beneficial behaviors.  That QS techniques can be taken too far (as can many other beneficial behaviors), is only tangentially relevant, and your recommendations for correcting that problem far exceed the mandate of merely providing such a warning.  So, I see a lot more noise than signal in your replies here."
emacs,32wkpy,gottabeme,1 point,Fri Apr 17 18:47:35 2015 UTC,"There is no strawman in my prior argument. ... I would agree with you that there are no truly magical behaviors that will ""solve"" life. But I markedly disagree that incremental improvements are not worth pursuing.   I didn't say that either.  Another strawman.  Do we need to hold an argument clinic here?  :p   But that's your argument, essentially. Which reaches, due to that fear of taking it too far, a very poor conclusion: that flossing is therefore harmful, and practitioners should reevaluate their life choices.   Not at all.  You still don't understand what I'm saying.  Your interpretation of my argument is a caricature, taking it to absurdity.   So, I see a lot more noise than signal in your replies here.   That makes sense, since you don't understand the point I have been making.  Yet you seem to want to argue more than you want to understand my position.  Iron sharpens iron, but only if both parties are aiming for sharpness.  Well, I tried.  :)"
emacs,32wkpy,philh,1 point,Sat Apr 18 14:12:45 2015 UTC,"I clearly understood your point, otherwise I wouldn't be able to caricature it!   And as absurd as flossing is, it is an appropriate example of a purely optional habit, which takes a small bit of time from your day, with (usually) no immediate short-term benefit, and very questionable long term benefits...but which just might be worth doing, anyway.  Anyway, there, I've tried too.   And rather amazingly, I was able to make my own attempt without claiming your ignorance (""you don't understand""), your hypocrisy (""want to argue more than you want to understand my position""), or adopting a condescending tone, softened by a smarmy emoticon.  You might wish to consider whether those techniques are helping you to effectively communicate with others.  :p   Condescending recommendations especially! :)"
emacs,32wkpy,gottabeme,1 point,Sat Apr 18 16:12:18 2015 UTC,"I clearly understood your point, otherwise I wouldn't be able to caricature it!   It's not necessary to understand something correctly in order to present an inaccurate interpretation of it.  You still don't get it.   And as absurd as flossing is, it is an appropriate example of a purely optional habit, which takes a small bit of time from your day, with (usually) no immediate short-term benefit, and very questionable long term benefits...but which just might be worth doing, anyway.   You certainly have a different view on flossing than I do.  I recommend trying a different analogy.   And rather amazingly, I was able to make my own attempt without claiming your ignorance (""you don't understand"")   It's interesting how you twist my simply observing that you do not appear to understand the point I have been making into a veiled insult, as if it is wrong of me to make such an observation.  And instead of proving me wrong by explaining my point in your own words, you attack me.  Even the OP, the person I actually started this conversation with, has not had such a problem with my remarks (on the contrary, he has said that he mostly agrees with me).  This leads to the other observation I made:   your hypocrisy (""want to argue more than you want to understand my position"")   Since you have left the topic by the wayside and are focusing on unsolicited criticism of my ability to communicate, I stand by that observation.  Further illustrated by your continued complaints:   or adopting a condescending tone, softened by a smarmy emoticon.   Here's a sincere complaint about you: you assume the worst.  You assume bad faith.  Here is a list of things you've said about me:   being extremely judgmental imposing your own values upon others assume you understand their motivations know the final results of their behavior assume your own greater wisdom in those matters. issuing edicts for how others should think and behave hypocrisy adopting a condescending tone smarmy emoticon   Apparently it never occurred to you that none of those things are the case.  That I'm not being judgmental, simply offering some input to someone who publicly asked for ideas.  That I'm not imposing values (a parroting if I ever heard one), simply pointing out some potential problems that will be raised by the OP's stated ideas.  That I'm not assuming that I understand anyone's motivations, merely taking the OP's words at face value (i.e. the motivations he actually stated).  That I do not presume to know the final results of his behavior--rather, that is the issue we have been discussing.  That I am not issuing edicts--never did I say, ""You should do this,"" or, ""You shouldn't do that.""  That the condescending tone you perceive is merely your own perception.  That the emoticons I use are merely attempts to convey the invisible expressions which would be visible in face-to-face interaction--something that is a standard part of communicating on the Internet.  Yeah, I'm the one who has a communication problem...  I wish I could assume the best on your part, but since you seem determined to destroy my delusions of being a Grand Internet Communicator, I find it difficult to imagine that you're really just here to help me out.    But if I'm wrong--hey, thanks for trying.  It seems that we have very different communication styles.  That doesn't necessarily make either of us wrong or bad at communication.  Think about that.  :)"
emacs,32wkpy,philh,3,Sat Apr 18 23:55:25 2015 UTC,"Reply 1 of 2, regarding communications, off-topic.  My issues with your communications boil down to the following:   ""you don't understand""  Whether true or not, you only declare this, without articulating the difference you perceive, or otherwise attempting to correct the misunderstanding.  Without that follow-through, it's a virtually content-free declaration.  (This is exasperating for me.) accusations of underhanded argument (e.g. ""another strawman"")  Talk about bad faith! of  Your first response to any disagreement is to dismiss the argument as wholly invalid by labeling it as fallacious in some way.  Again, without the follow-through of delineating exactly where the error, or errors, lie.  Further, without adopting an equally formal approach to your own assertions, you appear to be using two very different standards for acceptable argument: a very casual one for yourself, and a very formal one for others.  (This is frustrating, as it represents a far greater effort at dismissal, than understanding.) condescending imperatives (e.g. ""Think about that. :)"")  There is an implied authority and deeper understanding in these imperatives, which has not been established.  (I find nearly all of these both vapid and needling, due to that unwarranted implication.)   The final parenthetical comments above are the feelings evoked in me, by those communication practices.  Perhaps they are entirely subjective, and exclusive to me...but other threads in this post suggest otherwise.  I'm making this off-topic reply for 2 reasons.  One, that I may ignore future arguments about the argument, in any additional replies.  (It's of no value to me.  Or you.  Or any other readers.)  And two, out of a genuine desire to provide constructive criticism of your conversational style.   And given that my comments were more negative above, I'll reiterate in a more positive style of recommendations:   Highlight and correct misunderstandings, rather than simply declaring their existence. Be more concerned with the viewpoint an argument is putting forward than its construction.  If there are errors in that construction which alter that viewpoint, call them out, ideally without ascribing malevolent intent. Avoid using imperatives when you haven't established some kind of authority with your audience.  (And lest I be accused of hypocrisy here, note that this is clearly labeled as a recommendation.)  Further, if you have actually established such an authority, you will likely find a trailing emoticon unnecessary.   I believe that adopting those recommendations would vastly improve your communications with others.    If you have some thoughtful comments about my own communication style, I'll certainly take it into consideration."
emacs,32wkpy,gottabeme,1 point,Sun Apr 19 17:46:20 2015 UTC,"""you don't understand"" Whether true or not, you only declare this, without articulating the difference you perceive, or otherwise attempting to correct the misunderstanding. Without that follow-through, it's a virtually content-free declaration. (This is exasperating for me.)   I don't know what to say here.  I received complaints from one person that my arguments were too verbose.  Then you complain that I wasn't specific enough--yet I was extensive in my exposition and gave multiple illustrations.  From my point of view, after being as extensive and specific as I was, in multiple comments expressing essentially the same thing, simply saying that you don't understand is sufficient--it would be fruitless for me to reiterate myself yet again.  It's basically implying that you should read my comments again and try to reinterpret them.    IOW, it's like I've put forth more effort trying to explain my POV than you have trying to understand it.  So before you can rightly criticize me for merely saying, ""You don't understand what I'm saying,"" you should put forth more effort to try to explain my POV in your own words.  After you've clarified what you think I mean, I can better correct your interpretation.  As an aside: you seem to take very personally my saying, ""You don't understand what I'm saying,"" as if it were an insult.  Then you seem to feel it necessary to defend yourself, and in return blame me for not reiterating myself.  May I suggest that this is all unnecessary?  :)  When I say, "" You don't understand,"" it's simply an observation.  It's not an insult or a criticism of your ability to understand things.  (Again, being sincere: you're assuming the worst.)   accusations of underhanded argument (e.g. ""another strawman"") Talk about bad faith! of Your first response to any disagreement is to dismiss the argument as wholly invalid by labeling it as fallacious in some way. Again, without the follow-through of delineating exactly where the error, or errors, lie. Further, without adopting an equally formal approach to your own assertions, you appear to be using two very different standards for acceptable argument: a very casual one for yourself, and a very formal one for others. (This is frustrating, as it represents a far greater effort at dismissal, than understanding.)   Again, you're assuming the worst.  I'm not accusing you of underhandedness.  Observing that your argument is a strawman is simply an observation.  It's natural to use a strawman when, as I observed earlier, you don't seem to understand my argument.  Here, I'm basically saying, ""Whoa, slow down.  You're arguing past me because you don't understand my point in the first place.""   condescending imperatives (e.g. ""Think about that. :)"") There is an implied authority and deeper understanding in these imperatives, which has not been established. (I find nearly all of these both vapid and needling, due to that unwarranted implication.)   You can interpret it that way if you want.  Personally, I find it ludicrous to imply that any such authority could be established in Internet Arguments.  I'm simply offering a suggestion to consider something I said more carefully, and using a smiley face to show that I am not angry and do not intend it in a condescending manner.  But if your default mode of interpretation is negative (and this is common on the Internet, and something I'm often guilty of myself), then you may interpret it in the opposite way than it's intended.   Perhaps they are entirely subjective, and exclusive to me...but other threads in this post suggest otherwise.   I despise Internet Points Contests, but enough people seem to have understood my comments just fine that I disagree.  You and one other person have expressed disagreement and difficulty in understanding my arguments.  It's entirely possible that that is not due to a failure to adequately express myself, but rather to my expressing ideas which you are unfamiliar with.  Think about that.  :)  (Oops, there I go again!)   Highlight and correct misunderstandings, rather than simply declaring their existence.   You act as if I hadn't already extensively explained my argument.  Again, I think it would be futile to do so unless the other party is willing to put forth equal effort to understand me.  It's like, ""No, that's not correct.  Try again, and this time show your work, and then I can show you where the mistake is.""  Whereas you seem to want me to ""do the homework"" for you, trying to explain your thought process.  Hey, I don't have to be inside your head to recognize that you don't understand what I meant, but I can't read your mind as to how you got there.  :)   Be more concerned with the viewpoint an argument is putting forward than its construction. If there are errors in that construction which alter that viewpoint, call them out, ideally without ascribing malevolent intent.   Ok, this is killing me.  This is exactly what you have done to me.  You accused me of all sorts of malicious intent, while I continued to merely reiterate myself and say, ""No, you don't understand what I'm saying.""  Then, when I finally begin to reciprocate and point out how you're doing that, you complain that I'm criticizing your construction and ascribing bad faith to you.  This is rich.   Avoid using imperatives when you haven't established some kind of authority with your audience. (And lest I be accused of hypocrisy here, note that this is clearly labeled as a recommendation.) Further, if you have actually established such an authority, you will likely find a trailing emoticon unnecessary.   Sorry, I think you're being a bit ridiculous here.  This is the Internet.  I'm a Random Internet Person.  There is no question of authority--no one has any.  Any establishment of such is entirely up to the reader.  And for crying out loud, please get over your emoticon phobia.  It's as if you're too good for them or something.  :P"
emacs,32wkpy,chekt,1 point,Thu Apr 23 00:21:51 2015 UTC,"It is very easy to use a lot of words to say nothing of substance.  And so complaints of overly verbose replies and lack of appropriate follow-through are not mutually exclusive.  But your reply here did successfully clue me in to your core misconception:  that understanding is the responsibility of the audience, not the speaker.    But I think I'm going to be hypocritical and not follow through myself here, beyond that identification (which is still a giant leap beyond simply stating ""you don't understand"", as at least you know exactly what I think you've got a poor understanding of), and not attempt to correct that.    On the bright side, if you're not hypocritical in your application of this wildly wrong belief, I'm certain you'll do the necessary homework to revise your understanding.  Actually, I'm not wildly optimistic about that, expecting you to assume I meant the audience has no responsibility, rather than a lesser one...but eh, I've run out of patience, already...but that's my fault, not yours...which is itself a bit of a hint.)  However I will attempt to correct the notion that authority cannot be established, with a few leading examples:  ""I've been using emacs for 20 years..."", ""having attended both public and private universities..."", ""as a professional baby seal clubber..."", etc.  It's certainly possible for people to lie, and the authority claimed may be dismissed by the audience for any number of reasons, but it's still certainly possible for a Random Internet Person to establish some.  And again, its not established by the reader, but the writer!  Certainly the reader can reject it, for not being credible or relevant.   But I'm not sure how a reader would establish it independently!  You'd have to have a pretty warped view of communication to believe otherwise...oh, right.  And it looks like I've redeemed myself a bit from my self-claimed hypocrisy...I've now provided several hints about where I think your understanding is flawed.   A half-hearted and tangential attempt at correction is better than nothing!  Isn't it?"
emacs,32wkpy,sachac,2,Thu Apr 23 02:25:38 2015 UTC,"Reply 2 of 2, on-topic...   That I'm not being judgmental, simply offering some input to someone who publicly asked for ideas.   This is my central disagreement with you.  Here is what the OP asked for:   I'm looking for some workflows...  ...can offer me some tricks ?  Any idea of what else to track, how to improve the capture system, whether to use Org-Mode language or develop specific languages (like ledger format) for some of the quantified modules.. ?   Did you provide any of the requested assistance?    No.    You hijacked the thread to philosophically reject the OP's stated desires (or at least, the greater part of them).  There may be some wisdom in your proposed moderation (as there usually is wisdom in moderation, in nearly everything but deliberate excess).  And your expression of that viewpoint may in fact stem from a real desire to be helpful to the OP and others.  But, in this particular case, I think you've been too quick to apply a judgment of pathology.  And you passed that judgment without addressing any of OP's actual requests.  My purpose in replying was to not let that go unchallenged.    More so, for other readers, than to change your mind.  But unfortunately, nearly everything after that has been noise.  But I'll freely admit as much culpability there as I ascribe to you.  I find your communication style fairly nettlesome, and I allowed that to get to me.  I could have been more polite, or better still, far more circumspect in my replies.  I don't think either of us has actually established a point, beyond our original one.  So, I think I'm done.  My challenge was made a long time ago.  Whether it was successful or not is up to other readers."
emacs,32wkpy,sachac,1 point,Sun Apr 19 18:27:32 2015 UTC,"It would have been good if you'd raised your central disagreement in the first place.  It's absurd for you to say that I ""hijacked the thread.""  The OP specifically asked, ""Any idea of what else to track, how to improve the capture system...?""  For what you say to be true would require some kind of binary interpretation of his request, meaning only ideas for what more to track, and no ideas about what not to track.  Besides, since when is it forbidden to start a conversation related to the OP's post?  This is the Internet.  If a tangential thread doesn't interest you, you may simply ignore it.   But, in this particular case, I think you've been too quick to apply a judgment of pathology.   I didn't apply such a judgment.  I mentioned a TLA and you ran with it.  Give people an inch...   And you passed that judgment without addressing any of OP's actual requests.   As I explained, I did address his requests.  He asked about how to improve the system.  I gave feedback about how to do that.   My purpose in replying was to not let that go unchallenged.    You can rest assured that your job with the Internet Police remains secure.  :p"
emacs,32wkpy,grabyourmotherskeys,2,Wed Apr 22 23:50:48 2015 UTC,"Okay, without saying anything about QS...  This is an attempt to give honest, helpful criticism. It's kind of mean, so if you don't appreciate it, I apologise.   Please stop generalizing and assuming and strawmanning and just take my words at face value.   I appreciate this sentiment. But if you want people to take your words at face value, you have to write them clearly.  Frankly, you don't seem to be very good at this. You're overly verbose - to be honest, I've been mostly skimmming your posts here, because they're a slog to get through. And you don't seem to make clear distinctions between (for example) ""I think X, so you should Y"" and ""I'm not sure, but it looks like maybe X, in which case you should Y"".  There are probably other things you could do to improve in this area, but those are the things that particularly jump out at me."
emacs,32wkpy,luxbock,1 point,Fri Apr 17 23:10:44 2015 UTC,"Frankly, you don't seem to be very good at this.   Ditto.  :p   You're overly verbose - to be honest, I've been mostly skimmming your posts here, because they're a slog to get through   Everyone's a critic.  rolleyes  Well, guess I won't be winning any Reddit Pulitzers.  D:   And you don't seem to make clear distinctions between (for example) ""I think X, so you should Y"" and ""I'm not sure, but it looks like maybe X, in which case you should Y"".   You blame me for not being specific enough...after you criticize me for being verbose.  =)  I could just as well blame you for assuming bad faith and generalizing.  I choose not to litter my ""verbose"" comments with ""Possibly X, but I might be wrong, so possibly not X"" boilerplate.  Can't please everyone!  =)"
emacs,32wkpy,grabyourmotherskeys,1 point,Sat Apr 18 14:21:16 2015 UTC,"Ditto.   As in, I'm not very good at writing clearly? Would you care to be more specific about things you think I could improve? (If the answer here is no, that's fine.)   You blame me for not being specific enough...after you criticize me for being verbose.   There's no contradiction here. You're not saying all the things that you need to, but you're using too many words to say what you do.  You have a problem with communication. People aren't reading your posts the way you'd like them to. You can blame me for whatever you like, but that's not going to help you."
emacs,32wkpy,eslr,1 point,Sat Apr 18 15:13:13 2015 UTC,"As in, I'm not very good at writing clearly? Would you care to be more specific about things you think I could improve? (If the answer here is no, that's fine.)   This is not an argument clinic.   There's no contradiction here. You're not saying all the things that you need to, but you're using too many words to say what you do.   You are entitled to your opinion.   You have a problem with communication. People aren't reading your posts the way you'd like them to. You can blame me for whatever you like, but that's not going to help you.   I would say that you have a problem with communication: you seem quite lacking in comprehension.  Other people understand me just fine.  Now isn't that enough unsolicited meta-advice from you?  :p"
emacs,32wkpy,murdsdrum,1 point,Sat Apr 18 23:29:58 2015 UTC,Now I understand your position. I agree with you in the most part of what you did post in this reply.
emacs,32wkpy,jonnay23,3,Fri Apr 17 18:00:12 2015 UTC,"I don't have any info, but I know sacha chua is really into that sort of thing."
emacs,32wkpy,therealmocker,6,Fri Apr 17 09:33:30 2015 UTC,"I'd be happy to chat with you and bounce some ideas around. Feel free to reach out to me at sacha@sachachua.com . It can take very little time to track things and analyze your data, and I definitely think it's worth it. :) You can do a lot with Org Mode tables, then look into more complex approaches with R or ESS later on."
emacs,32wkpy,skalawag,3,Fri Apr 17 13:25:41 2015 UTC,"First thanks for what you do Sacha! Your blog and resources have been incredibly helpful.  Second, I haven't exploited yet all of the options of Org-Mode and Emacs which are on the surface so I don't think I can bounce many ideas yet. But in the Summer when I will have time for tinkering seriously with this I will contact you."
emacs,32whuc,redguardtoo,1 point,Fri Apr 17 08:04:52 2015 UTC,"Nice, I was wondering why you noticed so quickly that I made a change in the MELPA.  Since yesterday, I've replaced ido-mode with ivy-mode in my config. It will impact all the standard functions that require completion like describe-variable, package-install or execute-extended-command.  Also, there's a change in org-mode's master that allows to use ivy to refile while ivy-mode is on. Which is really good if you have headings with the same name, because ido-mode keeps cycling the list and you're never sure to which heading you're actually refiling.  Some other packages, like magit or projectile, you can customize by hand:  (setq magit-completing-read-function 'ivy-completing-read) (setq projectile-completion-system 'ivy)"
emacs,32whuc,abo-abo,1 point,Fri Apr 17 08:31:28 2015 UTC,because I love ivy.el. ;)
emacs,32whuc,abo-abo,1 point,Fri Apr 17 09:28:15 2015 UTC,Hey! Why don't you prune .cask/?
emacs,32whuc,mschaef,1 point,Fri Apr 17 08:35:33 2015 UTC,"Very nice... has anybody investigated modifying this to use an elisp file scanner rather than find? I'm starting down that path now, but would rather avoid it if it's already been done, or if it's been attempted and found impractical."
emacs,32whuc,tuhdo,3,Fri Apr 17 19:52:54 2015 UTC,"It's already available in Projectile with its 'native indexing method. Sadly, Elisp is just slow for this task (when you are having thousands of files) and better do it with external command.  If you're on Windows, you can try it right now because only Windows has this indexing method enabled because users may not know how to install Cygwin or similar utilities."
emacs,32whuc,mschaef,1 point,Fri Apr 17 20:02:30 2015 UTC,elisp is too slow.
emacs,32whuc,mschaef,1 point,Fri Apr 17 23:52:50 2015 UTC,"At what scale? (How many files?)  The reason I ask is that at <1K file counts, the code on this page returns in well under a second on my relatively modest laptop:  http://turingmachine.org/bl/2013-05-29-recursively-listing-directories-in-elisp.html"
emacs,32whuc,instant_sunshine,1 point,Sat Apr 18 18:52:01 2015 UTC,"50k files could be finished in 1 second, I tested with Linux kernel source code  Typical web projects I took has average 10K+ files."
emacs,32whuc,mschaef,1 point,Sun Apr 19 05:07:06 2015 UTC,"That seems relatively fast, at least for most projects."
emacs,32ujjl,qroshan,6,Thu Apr 16 20:46:54 2015 UTC,Prefix Command Arguments
emacs,32ujjl,kaushalmodi,3,Thu Apr 16 20:55:04 2015 UTC,"The short version is C-u C-c - will insert above the current line. For the long version, see kaushalmodi's link."
emacs,32ujjl,michaelhoffman,2,Thu Apr 16 21:01:39 2015 UTC,"In addition to C-u, if you are running Emacs with a gui and not from a terminal you can use C-1, C-2, C-3, etc. to make a prefix argument. For instance C-1 C-0 C-f will move forward 10 characters."
emacs,32ujjl,__david__,1 point,Fri Apr 17 11:45:14 2015 UTC,Question -   I unbound this as it interfered with my evil bindings (cntrl-u is page up).  What are some examples of usages of this that I might be missing?
emacs,32ujjl,alogghe,6,Thu Apr 16 21:25:35 2015 UTC,"Oh no no no. You better not get used to using C-u for page up. C-u is priceless!  I don't use evil but I believe you can use non-evil stuff with evil mode on, correct?  Here's an example:   C-s is plain regular search. C-u C-s is regexp search.   If you write your custom elisp functions, it is very useful to make that function do related stuff based on whether you used the C-u or C-u C-u or C-u C-u C-u prefix and so on.  Here are few examples of how I use C-u:   Letter case cycling Inserting time stamp Kill code with line numbers Copy buffer file name"
emacs,32ujjl,kaushalmodi,1 point,Thu Apr 16 22:02:28 2015 UTC,"It really depends on whether you like how C-u is used currently in Emacs. /u/kaushalmodi really likes it apparently and I'd recommend at least checking out his suggestions. Me, I rarely used C-u before I switched to evil-mode so I'm just using C-u for page up now that I am using evil-mode. Before I just rebound the C-u version of functions to a less cumbersome binding."
emacs,32tg1o,projectmoon,3,Thu Apr 16 16:02:06 2015 UTC,"Just replace kill-region with delete-region in kill-word:  (defun delete-word (arg)   ""Delete characters forward until encountering the end of a word. With argument ARG, do this that many times.""   (interactive ""p"")   (delete-region (point) (progn (forward-word arg) (point))))  (defun backward-delete-word (arg)   ""Delete characters backward until encountering the beginning of a word. With argument ARG, do this that many times.""   (interactive ""p"")   (delete-word (- arg)))"
emacs,32tg1o,RobThorpe,2,Thu Apr 16 16:55:34 2015 UTC,"Almost definitely not. If it existed it would be called delete-backward-word or backward-delete-word, but neither exists. It'll require almost no code, but you can't get around needing to define something custom.  Maybe if you explain your use case someone can suggest an alternate approach using built-in tools?"
emacs,32tg1o,camdez,1 point,Thu Apr 16 16:25:22 2015 UTC,"The use case is simply deleting a word backward without putting it on the clipboard. I use Ctrl+Delete a lot to delete entire words, and would prefer this not put things in the kill ring. But if there isn't a built-in function then a custom one is fine."
emacs,32tg1o,kaushalmodi,8,Thu Apr 16 16:26:46 2015 UTC,"What is the disadvantage of having the deleted words go to the kill-ring? You can always use M-y after C-y if the yanked string is not what you want. If you use helm, helm-show-kill-ring is really helpful too."
emacs,32tg1o,kaushalmodi,2,Thu Apr 16 16:35:35 2015 UTC,"I have this all the time too. I have a replacement I want to drop in, but the thing I'm replacing varies for whatever reason. So I need to C-s to each one (with a different search string, probably), C-k or M-backspace it, then C-y M-y. On the second one, I have to C-y M-y M-y. On the third, C-y M-y M-y M-y.  I hadn't thought of defining a custom thing. Although even if I did, I'd probaby have trouble remembering the binding. Can't reuse M-backspace since sometimes I do want to put it in the kill-ring."
emacs,32tg1o,kaushalmodi,4,Thu Apr 16 16:51:32 2015 UTC,"It sounds like you are trying to replace something like abc, def, ghi with xxx. If that's the case, I would create multiple cursors in front of the former 3 words; then M-d and C-y M-y (assuming that I killed xxx prior to the mc operation).  [GIFV]"
emacs,32tg1o,kaushalmodi,2,Thu Apr 16 18:18:37 2015 UTC,"""multiple cursors""?"
emacs,32tg1o,gottabeme,4,Thu Apr 16 18:24:30 2015 UTC,I updated my comment above with link to a demo of what I was saying.   And prepare to have your mind blown: MC demo by its author Magnar Sveen
emacs,32tg1o,hprotagonist,1 point,Thu Apr 16 18:49:57 2015 UTC,"Wow, that's pretty awesome. Although I think I'm mostly impressed by how good that guy is with emacs.   MC itself seems more like a solution to a problem that you should be avoiding (in code, anyway). If you have a bunch of identical boilerplate, you really need a function or a macro. If your language doesn't have functions or macros, MC is a good hack to fix that deplorable situation.   Of course, I started this thread by saying I had this problem and I do, so I'll def look into MC."
emacs,32tg1o,camdez,1 point,Fri Apr 17 11:16:07 2015 UTC,"Once you start using MC, it will be part of your routine editing flow, be it in code or not. I hardly use it the way Magnar demonstrated in that video but still I use it in many different ways.  I have used MC a lot of times to do multi-line edits in parallel at multiple places in a file (not the plain replacing of old string with new string). In case you end up trying that, use C-m instead of RET to insert newlines."
emacs,32tg1o,camdez,1 point,Fri Apr 17 13:30:41 2015 UTC,"I think I've seen that video before, but it's still amazing.  That guy is a true Emacs ninja.  Anyone wondering why they should look into switching to Emacs should watch this video."
emacs,32tg1o,kaushalmodi,2,Fri Apr 17 13:46:00 2015 UTC,"https://github.com/magnars/multiple-cursors.el  Depending on the circumstance I use multiple-cursors, query-replace, and macros to replace text."
emacs,32tg1o,CodyChan,1 point,Thu Apr 16 18:44:11 2015 UTC,Just the way I work I guess. More used to simply putting something on my clipboard and then pasting it after deleting the word. It's mostly relevant in programming contexts if I'm doing refactoring. M-y is a nice trick though.
emacs,32sqxt,agumonkey,1 point,Thu Apr 16 12:30:59 2015 UTC,"Well, that's might make me try it for the kicks"
emacs,32sqxt,freakhill,1 point,Thu Apr 16 14:24:04 2015 UTC,"Shampoo is an extremely cool project. It makes a lot of sense for GNU Smalltalk, which doesn't have a class browser built-in.  It does seem a little odd for Pharo though. Pharo is a hackable interpreter/environment, like Emacs. Using Emacs to edit Pharo classes feels like using vim to edit elisp.  Perhaps I'm missing something? I've seen Smalltalk people propose Emacs style shortcuts several times (there's a mailing list post from 1994!) but I'm not aware of any packages that provide this today."
emacs,32sqxt,DarthToaster,1 point,Thu Apr 16 22:18:53 2015 UTC,"Actually I found about Shampoo on the HN thread about Pharo 4.0, someone said they shipped a new text editor base ""framework"" giving the Smalltalk browser nicer editing capabilities, he then linked Shampoo as a previous solution."
emacs,32sqxt,ReneFroger,1 point,Fri Apr 17 02:05:43 2015 UTC,"Looks interesting. Thought Smalltalk was dead.  By the way, in which block could Shampoo be placed on emacs.zeef.com ? I have difficulties to recognize the language/family of Smalltalk."
emacs,32sqxt,ReneFroger,1 point,Sat Apr 18 08:55:15 2015 UTC,"Well, there are categories for Python and Ruby, Smalltalk is as 'important' as them (even though less famous nowadays)."
emacs,32sqxt,ReneFroger,1 point,Sat Apr 18 11:13:44 2015 UTC,"I couldn't find another packages of Smalltalk. I placed it in the small languages section, if you don't mind?"
emacs,32sgmt,thomasfr,3,Thu Apr 16 10:19:39 2015 UTC,"It's an interesting idea. I thought of another bit of software that could benefit from that a while ago, though I haven't the time to pursue it.  In Emac's native-code core there is the elisp interpreter, redisplay and the code for dealing with GUI toolkits and terminals. Emacs also requires a lot of elisp, but no half as much as what it ships with. It would be nice to be able to re-use this for open-source projects without having to distribute all of Emacs along with it. That way Emacs could be used as a VM like the JVM.  I see no reason why this couldn't be done. It would require some scripting. I think the simplest way would be to make a script to copy out the files needed from the Emacs source tree and to build them using a new Makefile. If only one feature were needed, such as Org then lots of other stuff could be dropped. That means loading of .elc and .el probably wouldn't be needed. Everything could be dumped into the executable.  I think the trick would be to gradually drop stuff starting with the most obviously unnecessary stuff first (like the programming modes and email programs). Then move on to the more tricky things like whether or not you'd still need compile-mode or VC."
emacs,32sgmt,RobThorpe,1 point,Thu Apr 16 10:50:46 2015 UTC,To  support babel properly alot of the programming modes are required. To have a simpler process I would probably start by creating a custom init.el that begins with alot of unloading/unbinding.  I would probably want to bundle alot of extra ob-... packages as well.
emacs,32sgmt,RobThorpe,1 point,Thu Apr 16 10:56:03 2015 UTC,You're right. If you want to support Babel you're going to have to drag in most of Emacs.
emacs,32sgmt,tuhdo,1 point,Thu Apr 16 11:05:37 2015 UTC,"So you mean we should have two distribution of Emacs, one with just an executable and the regular one we are having?"
emacs,32sgmt,RobThorpe,1 point,Thu Apr 16 11:27:34 2015 UTC,"Yes, it really needs to be as simple as downloading one file and starting the application. Like it or not, multi step installation processes turns a lot of people off from trying things out.   Another positive side of bundling everything is that it needs less attention supporting  different versions of Emacs and so on.  I would also guess that the people maintaining this org mode bundle would not use it themselves (I would probably really hate working in it myself) so updating it like once a year or after every emacs point release would make sense from that point of view.  EDIT: If this project ever takes off the answer to the question if the Emacs binary should differ from stock or if it should be wrapped by another process or ... will reveal itself."
emacs,32sgmt,tuhdo,1 point,Thu Apr 16 12:35:28 2015 UTC,"What I'm thinking off is that a sort of ""Emacs Lisp VM"" is separated from the Emacs core. This could be done by a script as I described it. That way it could be kept synced with Emacs core.  Then other developers could make applications that use it as a VM in a way that's user-friendly to non-emacs users. So, Org people could make a stand-alone Org. It could start with an empty Org file or in the Org manual. As thomasfr mentioned though because of Babel that may be tricky. Similarly, the Emacs email programs, IRC clients, etc could be turned into stand-alone ones."
emacs,32sgmt,RobThorpe,1 point,Thu Apr 16 13:16:03 2015 UTC,"Generally I like that idea, so people won't think Emacs as a mere editor anymore but a platform for developing programs in it, like it currently is but disguise itself as an editor. Stuffs like Prelude or Spacemacs actually becomes valid.  But then, Emacs will become its own separate Lisp dialect and its implementation will have to be really good to match people's expectation. It should also be able to generate native code and have a better garbage collector. In general, if Emacs Lisp is focused on this direction, than majority of effort for future version of Emacs should spend on it, instead of thinking good enough for text editing is enough.  And finally people can use the Emacs VM as a single binary application or the state it currently is i.e. like Eclipse and everthing else running on JVM."
emacs,32sgmt,kcin,1 point,Thu Apr 16 14:12:40 2015 UTC,"I wasn't really thinking about making something targeted at new development. I was thinking more about something to allow re-use of existing Emacs code.  As you say, the Emacs core wouldn't be competitive for new tasks because of it's slow bytecode interpreter and slow GC.  Also, it hasn't really been tested for security vulnerabilities like thing like the JVM have. That would be a big obstacle for server software. I expect there are many networking functions with hidden security problems that aren't easily exploitable while Emacs is end-user software, but would be if it were a server.  Doing what I suggest would be something of a can-of-worms."
emacs,32sgmt,RobThorpe,1 point,Thu Apr 16 15:17:21 2015 UTC,I was thinking more about something to allow re-use of existing Emacs code.   If you mean elisp code then the proper solution is implementing Elisp on top of the JVM. This would allow running all existing code and also make all of the libraries available in elisp which are accessible via the JVM.
emacs,32sgmt,wasamasa,1 point,Thu Apr 16 15:41:18 2015 UTC,"Why? Doing that would be very complicated. Someone would have to re-implement the bytecode interpreter, the data structures like buffers and windows and all the primitives. Emacs' display engine is very different from those of other programs, that would have to be re-implemented too. It's a much bigger job than cutting down and re-shaping the existing Emacs codebase.  Allowing access to all the JVM libraries would be useful though. But, that should be possible with the new foreign-function interface."
emacs,32sgmt,RobThorpe,1 point,Thu Apr 16 16:51:00 2015 UTC,"I don't believe this makes much sense given how many packages expect the bundled goodies to just be there.  Splitting the core into GNU ELPA might make sense for ease of maintainership, but not much if you want to have a portable runtime. Asides from that, the installed size of my Emacs installation is about 100MB which is a good size compared with Java (270MB for the JDK) or GHC (900 MB for all of it)."
emacs,32sgmt,instant_sunshine,1 point,Thu Apr 16 12:00:53 2015 UTC,"I think your focusing on programming packages. Lots of those use a huge chunk of Emacs. They couldn't easily be chopped down, like Org Babel. But, think about other packages.  What about distributing the email or new packages as separate programs?  I think you could quite easily make MU4E, MH-E or RMAIL into separate programs, they don't depend on very much.  That could be done with file managers too and perhaps VC modes.  I wouldn't really call 100MB a good size given that it doesn't do as much as the Java.  Imagine that you write a utility in elisp, say an IRC client, and use this stripped-down-emacs to distribute it. Would people be happy to download a 100MB IRC client just to try it out?"
emacs,32sgmt,RobThorpe,1 point,Thu Apr 16 13:09:00 2015 UTC,"Yes.  This isn't the 90s.  People download Gbs of files all the time, 100mb is, relatively speaking, nothing."
emacs,32sgmt,kcin,1 point,Fri Apr 17 00:48:11 2015 UTC,"In the US fast broadband may well be quite cheap. I live in Europe where fast broadband is expensive, so do lots of other people. I definitely think about downloading 100mb. I also wouldn't download a 100mb IRC client because large file downloads often indicate that the programmers behind the app probably don't know what they're doing, or that they've filled the app with graphics to make up for a lack of features."
emacs,32sgmt,kcin,1 point,Fri Apr 17 00:56:21 2015 UTC,I would think that a download size of 100-300mb would be ok. My target audience is kind of IT professionals and I don't see complaining about such things as a couple of hundred megs download size as being professional at all. As fa as complaints goes the lack of evented/threading/...-support in emacs is potentially a more valid claim in that department.
emacs,32sgmt,wadcann,1 point,Fri Apr 17 10:14:05 2015 UTC,And also a short descriptive text of what the project is could include the bundle an explanation of the bundle aspect as well.
emacs,32sgmt,instant_sunshine,3,Fri Apr 17 10:18:58 2015 UTC,"There is no need to strip emacs down, that is physically removing packages. Emacs is not that big and disk space is cheap these days. It is more important to provide a default config which makes it usable for people instantly out of the box without learning about emacs intricacies."
emacs,32sgmt,wadcann,2,Thu Apr 16 13:03:19 2015 UTC,"The only thing that might need tweaking is the way emacs starts but that can be handled by wrapping the startup into a ""org"" binary instead."
emacs,32rpjf,nathankot,3,Thu Apr 16 04:17:15 2015 UTC,I'm not sure exactly what you are seeking. Can you describe the workflow or an example?
emacs,32rpjf,howardthegeek,1 point,Thu Apr 16 05:28:47 2015 UTC,Please see update :)
emacs,32rpjf,howardthegeek,2,Thu Apr 16 15:19:23 2015 UTC,"I first thought you meant something like http://github.com/tarsius/orglink, but let me repeat back your question:   You are in some source code You call org-captureto store notes about the code in another org-file (which is easy). When you view the source code, other org files that link to it are show as back links   Is that it?"
emacs,32rpjf,Oulipopo,1 point,Thu Apr 16 22:20:42 2015 UTC,Yup! shown as back links + the first one line :)
emacs,32rpjf,gottabeme,2,Fri Apr 17 07:06:01 2015 UTC,"So ... say you've got a template set up to capture Python snippets, you want the capture buffer to run in Python mode?"
emacs,32rpjf,gottabeme,1 point,Thu Apr 16 09:05:08 2015 UTC,"Nope, please see update - didn't realize org-capture could be used in that way though! Perhaps the confusion is due to my limited use of org-capture as just for adding todo tasks lol"
emacs,32q5bm,Catslinger,5,Wed Apr 15 20:37:13 2015 UTC,I love the hydra idea but the use of color as a way to name the exit function of the key. I mean I think instead of color a verb could be used and associated with a display color. This would be clearer. I don't use hydras yet so maybe I am misunderstanding this.  Finally: I don't want to bash hydra but I would like to discuss this configuration method so I can understand it.
emacs,32q5bm,grabyourmotherskeys,4,Wed Apr 15 22:07:22 2015 UTC,"You have a choice, you can use colors or you can use a combination of  :foreign-keys and :exit keys.  See https://github.com/abo-abo/hydra#color"
emacs,32q5bm,colbell,2,Wed Apr 15 22:32:33 2015 UTC,"OK, thanks, I'll have another look!"
emacs,32ppjs,cocanning,4,Wed Apr 15 18:40:22 2015 UTC,"I haven't used containers yet, but could you mount a directory from the host system within the container?  I've done this with VMs and it works well.  That way you can edit files locally, which is very nice."
emacs,32ppjs,davexunit,1 point,Wed Apr 15 19:39:04 2015 UTC,"This is how I do, and it's awesome.  Projectile sucks over tramp."
emacs,32ppjs,easyEggplant,2,Wed Apr 15 20:11:45 2015 UTC,"That's what I do as well, and that's the reason why I don't care that much about improving performance over tramp (which is not that bad actually)."
emacs,32ppjs,bozhidarb,2,Thu Apr 16 05:45:53 2015 UTC,"Tramp is very useful with projectile, it's really only slow for real if network latency is involved. Tramp can slow down pretty badly for a number of reasons where projectile configuration is one of them.   For those interested I have been working on performance benchmarks on and off for the last 6 months or so to be able to measure different approaches:  Example benchmark:  https://github.com/thomasf/projectile/blob/performance/test/projectile-user-simulation-1-bench.el  Diagrammed resulted for a matrix  cache settings and tramp/no tramp:  plot1 shows the proportional time between all configurations  http://framtiden.medeltiden.org/~a00001/2015-04-07-23_20_37projectile-user-simulation-1-bench.el.plot1.svg  plot2 shows actual time per configuration (logarithmic)  http://framtiden.medeltiden.org/~a00001/2015-04-07-23_20_37projectile-user-simulation-1-bench.el.plot2.svg  incidentally, the benchmark suite uses docker to run it's tests."
emacs,32ppjs,thomasfr,1 point,Thu Apr 16 10:32:53 2015 UTC,"I spoke a little harshly.  Let the record show that my actual full opinion is ""projectile, ag, and flymake work poorly for me in situations where there is non-negligible lag between me and the server, so no developing on a machine in the co-lo""."
emacs,32ppjs,easyEggplant,1 point,Thu Apr 16 15:56:55 2015 UTC,"So I've been mounting on docker run with the -v flag and for whatever reason I totally didn't realize that mounting is just sharing -- that I can edit my code on the host and the container will be reading the same file, not a copy."
emacs,32ppjs,BostonEnginerd,1 point,Wed Apr 15 20:33:48 2015 UTC,This is probably the easiest way to do it.
emacs,32ppjs,wizit,1 point,Wed Apr 15 20:55:16 2015 UTC,"This works nicely if you run docker in virtualbox, like boot2docker does.  Unfortunately if running docker directly from within linux the directory will be mounted as root... Depending on your dev environment this might be ok. If your are not ok with this, on linux you can work around this by having a docker startup script (instead of running bash directly) creating a dev user in the image with matching uid/gid."
emacs,32ppjs,uhoreg,2,Thu Apr 16 10:18:17 2015 UTC,"I haven't used boot2docker, but as I understand it, the docker client runs in OS X, rather than within the VM, so I don't see why that snippet from EmacsWiki wouldn't work as-is, since it just uses the docker client to run commands."
emacs,32ppjs,mortiferus,1 point,Wed Apr 15 19:44:48 2015 UTC,good point!
emacs,32ppjs,jplindstrom,2,Wed Apr 15 20:34:23 2015 UTC,"So you dont want to install emacs on the docker container and run it in -nw mode, but what about installing emacs in the docker container and run emacs with ssh X forwarding? Then you get the GUI, and since it is just sshing from localhost to localhost it will probably feel as snappy as usual."
emacs,32oufa,dauoalagio,16,Wed Apr 15 14:50:22 2015 UTC,Try the Emacs Startup Profiler.  I might have created it.
emacs,32oufa,joesmoe10,1 point,Wed Apr 15 14:58:11 2015 UTC,"This will help, thanks"
emacs,32oufa,tampix77,1 point,Wed Apr 15 15:37:17 2015 UTC,"Nice, thank you for creating this :)"
emacs,32oufa,rhabarba,1 point,Wed Apr 15 19:58:19 2015 UTC,esup-child-profile-sexp: End of file during parsing   OK. (Here's the config I tried it with.)
emacs,32oufa,joesmoe10,2,Wed Apr 15 19:58:49 2015 UTC,"Weird, I filed a bug here.  I'll take a peek at it."
emacs,32oufa,rhabarba,1 point,Wed Apr 15 22:07:01 2015 UTC,Thanks. :-)
emacs,32oufa,ccharles,6,Wed Apr 15 22:41:23 2015 UTC,That's way too long. Try emacs -Q to start Emacs without your configuration and see if it starts quickly.
emacs,32oufa,RobThorpe,1 point,Wed Apr 15 15:10:54 2015 UTC,"Yes it starts immediately.  I just installed 24.4 side by side and it loads my config in less than a few seconds, so it looks like a compatibility issue with the upgrade and my config"
emacs,32oufa,WallyMetropolis,1 point,Wed Apr 15 15:39:01 2015 UTC,In that case try bisecting your init file.
emacs,32oufa,_david_,6,Wed Apr 15 17:33:28 2015 UTC,"Or, don't do it yourself. Use bug-hunter!"
emacs,32oufa,vifon,2,Wed Apr 15 18:31:48 2015 UTC,"When I saw the title I thought it would be about how 24.5 starts up faster, which was my unscientific and thinly backed up ""feeling"". I haven't seen any news about any changes in that area though.."
emacs,32oufa,BruceConnor,2,Wed Apr 15 18:39:34 2015 UTC,Did you use the Elisp byte-compiler? I'm not sure if the simple make && make install does that.
emacs,32oufa,xoo-,2,Wed Apr 15 16:04:41 2015 UTC,It does.
emacs,32oufa,dharris,1 point,Wed Apr 15 20:17:17 2015 UTC,"on windows, 24.5 starts a little faster for me. 1-2 seconds."
emacs,32oufa,BruceConnor,1 point,Wed Apr 15 14:53:37 2015 UTC,"It must be an issue with my config.  I will have to review it, assuming this isn't a bug with 24.5 itself.  Thanks"
emacs,32oufa,dharris,1 point,Wed Apr 15 14:57:28 2015 UTC,"My usual advice is ""never quit emacs."" Do that and your startup worries are greatly diminished.  Put (server-start) in your .emacs file so that it starts the emacs server. Open new files either from within emacs or use emacsclient -n (I have that aliased to em). Set EDITOR=emacsclient as well.  I quit emacs when I reboot. I only reboot when OS upgrades require it. I start emacs immediately after the reboot finishes.  (I know I'm not addressing the question of why startup times are slower in emacs 25, but try this. It's awesome)"
emacs,32oufa,tuhdo,3,Wed Apr 15 18:19:38 2015 UTC,"Though this advice is generally valid, I think in this particular instance it is bad advice. 2 minutes init time is a strong indicator that something's wrong (specially considering it's not like this in 24.4), and it may come back to bite you. So the best thing to do here is debug it."
emacs,32kmsf,SegaTape,2,Tue Apr 14 15:35:54 2015 UTC,"Probably not since if if your project has two header files with the same name in different directory, which should Emacs open? However, with Projectile, you can run the command projectile-find-other-file-other-window by pressing C-c p 4 a, or if you use Helm Projectile, just run the command helm-projectile-find-other-file (bound to C-c p a) and press C-c o to open the file in a window side by side. This way, at least you don't have to split a window, switch to it and switch buffer, and switch back to main buffer manually."
emacs,32kmsf,tuhdo,1 point,Tue Apr 14 15:53:52 2015 UTC,Thanks! I had the feeling that projectile should be able to do something like that.
emacs,32kmsf,RobThorpe,1 point,Tue Apr 14 16:05:32 2015 UTC,"BTW, the corresponding function in vanilla Emacs is ff-find-other-file."
emacs,32kmsf,tuhdo,1 point,Tue Apr 14 16:33:57 2015 UTC,"But you have to set the directory manually, otherwise it could only see other file in current directory, which is not all that useful. The Projectile commands work with large project such as Linux kernel with zero configuration and switches instantly."
emacs,32kmsf,paulcam,1 point,Tue Apr 14 16:43:01 2015 UTC,"I didn't know about this one either, thanks!"
emacs,32kmsf,tuhdo,1 point,Tue Apr 14 17:45:33 2015 UTC,You might take a look at SourcePair. :)
emacs,32kmsf,paulcam,1 point,Tue Apr 14 17:27:21 2015 UTC,"What he wants is to make it automatically, while the package requires manually launching. projectile-find-other-file does the same thing project-wise on projects recognized by Projectile, i.e. you can switch between source <--> header from anywhere to anywhere, as long as both files are somewhere in the project, and is fast (30k-50k files is non-issue, you get the files instantly)."
emacs,32kmsf,tuhdo,2,Tue Apr 14 17:38:23 2015 UTC,Makes sense. I don't use Projectile currently. It wouldn't be too difficult to wire SourcePair up to the c++ mode hook to get it to auto-load the corresponding file. *shrug*
emacs,32kmsf,tuhdo,1 point,Tue Apr 14 17:42:30 2015 UTC,"So is projectile-find-other-file. However, it's problematic when there are two other files i.e. 2 files with the same name foo.h. And Projectile using external command to retrieve the file list (which is 1 secon for 30k files project if you have an SSD, a few seconds with normal HDD) and cache it, that's why it can give you everything instantly."
emacs,32j74e,ReturnIfNone,1 point,Tue Apr 14 05:35:59 2015 UTC,I don't use SrSpeedbar but someone using it should be able to help you on emacs.stackexchange.com. Check out that website if you haven't yet.
emacs,32gwcx,abo-abo,5,Mon Apr 13 18:29:40 2015 UTC,I had to click around a lot before I figured out what Hydra was. Even following the link to the wiki didn't send me to a What is Hydra section.   This looks super cool. But I'd just suggest slapping a really quick intro paragraph at the top for some context.
emacs,32gwcx,WallyMetropolis,4,Tue Apr 14 02:39:01 2015 UTC,"Yeah, that's not the first time I hear this.  It's not easy for me to give a good description, since I have a different perspective on the code.  That's why I've removed all but the basic tech details from the front page.  I encourage the users to document their hydras on the wiki.  There, you can write whatever you feel is appropriate without checking in with me.  Also, there's a video demo which, in hindsight, I should have linked from the front page."
emacs,32gwcx,OvidNaso,1 point,Tue Apr 14 08:19:53 2015 UTC,I think it would be great if you could explain what benefits it has over Guide-Key.
emacs,32gwcx,WallyMetropolis,2,Wed Apr 15 04:48:21 2015 UTC,"Hydra does two things: the bindings and the hint. Each of them on a case basis.  Guide-Key does only the hint, but it's automatic. It's also non-customizable and comes with a delay.  All-in-all, the two packages have almost nothing in common, except the word hint. Since they are orthogonal, you can (and maybe should) use them both."
emacs,32gwcx,drjeats,2,Wed Apr 15 07:42:51 2015 UTC,So...what is it?
emacs,32ga7i,CompleteSkeptic,9,Mon Apr 13 15:41:56 2015 UTC,"Why not just use revision control? You'll get more compact storage, better ability to browse through changes, a convenient way to distribute your backups off site, and a mechanism for keeping your config in sync across multiple machines."
emacs,32ga7i,camdez,3,Mon Apr 13 15:52:09 2015 UTC,"I do for my config, but I don't backup all the downloaded packages in git."
emacs,32ga7i,camdez,2,Mon Apr 13 16:03:07 2015 UTC,And you want those backed up?
emacs,32ga7i,mifrai,3,Mon Apr 13 19:12:09 2015 UTC,"Not in git, no. I do want backups of the packages when I update them, in case the update goes wrong and I have work to do."
emacs,32ga7i,Wolfer1ne,1 point,Mon Apr 13 19:20:48 2015 UTC,"I also do not want to keep my packages committed along side my configs. But, my solution was to keep my package directory in a separate git repository. The repo is only used by me, which affords me the comfort of being able to clean the history when/if it gets out of hand.  The biggest benefit, at least for me, is allowing me to keep installed packages/versions in sync across multiple machines."
emacs,32ga7i,lambdasgr,1 point,Tue Apr 14 05:38:44 2015 UTC,Maybe try el-get or cask packages for automatic package installation
emacs,32ga7i,instant_sunshine,2,Mon Apr 13 19:20:16 2015 UTC,The problem is not download packages (I use use-package for that) - the problem is that sometimes the newest versions of packages break things. (:
emacs,32ga7i,dzecniv,1 point,Mon Apr 13 19:21:47 2015 UTC,"When you keep track part of your configs and not the other, that tends to break thing. I keep track of everything using git, including my own configs, all those packages I installed in elpa and those packages I need but I cannot find in elpa. Whenever a new packages break things, I always know which version to fall back to."
emacs,32ga7i,ed_ac,1 point,Mon Apr 13 21:10:11 2015 UTC,"Listen, just include your package installs in git.  Problem solved.  There's no sensible reason not to.    Personally I've had just about enough of people delighting in use-packages.  Sure there's a bunch of hypothetical problems you solve, but no real ones.  Maintain your config integrity.  That's your number one problem.  You want to replicate your install, just clone.  Job done, then get back on with your actual work.  Edit: often times I sound abrasive.  This is one of them."
emacs,32ga7i,cpaulik,3,Fri Apr 17 01:35:19 2015 UTC,"Looks like we really need package versioning, like a pip requirements file:  a_package==1.8.8  Does someone know if/where it has been discussed, if there's a plan for it ? Is it doable as of today ?"
emacs,32ga7i,thedripdryboy,1 point,Tue Apr 14 09:17:07 2015 UTC,I think you can do this with Cask
emacs,32fqm3,Tiger_Crunch,6,Mon Apr 13 12:59:11 2015 UTC,No that's impossible.  There is a simpler and better solution: http://blog.binchen.org/posts/easy-indentation-setup-in-emacs-for-web-development.html
emacs,32fqm3,redguardtoo,1 point,Mon Apr 13 13:58:25 2015 UTC,"Wow thank you! That was a concise answer, can't believe I didn't find that in my googling. One more question, would you happen to know how to make that ""my-personal-style"" save for future sessions so I don't have to always invoke it? Thank you again"
emacs,32fqm3,hprotagonist,1 point,Mon Apr 13 14:12:38 2015 UTC,Just add a call to the function in your config file:  (my-personal-style)
emacs,32fqm3,agnudawn,2,Mon Apr 13 16:07:16 2015 UTC,"Just for completeness (if you wanted similar behavior to some other editors), I'll add that it can be done by ignoring emacs' indentation system and rebinding your tab key to only insert two spaces.  In your config:  (global-set-key ""\t"" (lambda () (interactive) (insert-char 32 2))) ;; [tab] inserts two spaces   Customizing the indentation system to your preferences per mode is probably a better solution for most cases though."
emacs,32fqm3,RobThorpe,2,Mon Apr 13 22:24:27 2015 UTC,These days I think you also have to prevent RET from inserting indentation. You can do that with (electric-indent-just-newline) or by disabling electric-indent with (electric-indent-mode 0).
emacs,32fqm3,tuhdo,1 point,Tue Apr 14 13:21:50 2015 UTC,"I'm curious. WHy do you think RET should not insert indentation? I disabled electric-indent-mode and bound newline-and-indent to RET instead, and it would be annoying without it."
emacs,32fqm3,RobThorpe,1 point,Tue Apr 14 13:32:34 2015 UTC,"I think that RET should insert indentation. But, the OP seems to want 2 spaces everywhere for some reason. It's not easy to do that generally without setting electric-indent-just-newline or disabling electric-indent-mode. Without doing that some modes will add different numbers of spaces when RET is pressed.  BTW as you probably know there are only two differences between your settings and the 24.4 default: * Yours never run electric-indent-functions. * Yours don't indent the line you start on. The default is to indent the first line and the inserted line."
emacs,32fqm3,RobThorpe,1 point,Tue Apr 14 13:45:01 2015 UTC,"Was too liberal with the word ""everywhere"". Coding conventions where I work like 2 spaces per tab in PHP and Javascript"
emacs,32fqm3,RobThorpe,2,Tue Apr 14 17:35:39 2015 UTC,"Oh, that's much easier and more sensible. For Javascript use (setq js-indent-level 2), you'll have to tailor that if you use one of the alternatives like js2 or web-mode. For PHP it's php-mode-coding-style, or so I gather from the internet, I've never used it.  If you customize those two variables you should be fine. You don't need to edit tab-stop-list which only affects text files anyway. You also don't need to edit tab-width if you're never going to encounter files with tabs in them.  Tab-width is the number of spaces that Emacs inserts visually per tab.  It may be better to keep tab-width at a large value so you can spot files that use tabs and disobey the coding convention."
emacs,32fqm3,RobThorpe,1 point,Tue Apr 14 18:04:29 2015 UTC,"I'll give that a shot, seems much less cumbersome. Thanks, you definitely know your emacs stuff. Now if I could just get something like helm+projectile to work I'll be set...."
emacs,32fqm3,BaxterBoldt,1 point,Tue Apr 14 18:34:00 2015 UTC,Now if I could just get something like helm+projectile to work   Ask tuhdo about that.
emacs,32ekmg,maheshexp,60,Mon Apr 13 03:42:18 2015 UTC,"This is my favorite topic :) Here I post my old answer again:  My guides can help you.  Here are some nice features that Emacs and its 3rd packages provide:   Powerful automatic indentation with aggressive-indent(scroll down for demos). It does not only indent the current line, but the whole semantic context around your cursor. Live grep C/C++ refactoring with built-in parser Lisp Code reformatting. As far as I know, there's none Lisp code reformatting outside of Emacs. Access to a list of project with a few key strokes Quickly access any file in your project, as large as Linux kernel, instantly, regardless of where you are in the project, and within a few keystrokes. Jump to any file depends on context, even if the file path is in a plain ASCII text file Copy files from anywhere to anywhere. Delete files anywhere; files are always at your finger tip to do whatever with them. Switch between other files with same names but different extensions. Work not only for C/C++ but other languages, and is customizable. You don't have to configure anything, like adding include paths for the command to search. Everything is automatic. Just use it as it is. Jump to tag definition, from its own parser or external parser like GNu Global Jump up to parent. Do you like outline tree? Interactive outline tree Easily move back and forth using the interactive outline tree References retrieved from its Emacs internal parser. Beautiful compile output Frontend support for GDB Code completion. Open man page for symbol at cursor.  Emacs open 39MB C file Emac opens multi-gigabtye file   Note that in the demos you may see me type in the commands. You can think of it like the start menu in Windows, but actually those commands can be executed quickly with a shortcut. I type in the commands for demonstration purpose to Emacs users.  Those demos are just tip of the iceberg."
emacs,32ekmg,tuhdo,3,Mon Apr 13 03:48:53 2015 UTC,"How did you open the 39MB C file? I actually recently had to open a 40MB C file (it was a decompilation from IDA), and Emacs handled it horribly. I could barely navigate at all."
emacs,32ekmg,jmgrosen,1 point,Mon Apr 13 18:55:40 2015 UTC,"I opened it with stock Emacs, and more importantly, on Linux, in which Emacs is much faster on Windows. In my config, i have hooks that check if an open file exceeds a certain size, then some heavy modes are turned off such as linum-mode."
emacs,32ekmg,tuhdo,1 point,Mon Apr 13 19:08:57 2015 UTC,Would you mind pasting that snippet to disable heavy modes? I'd really appreciate that.
emacs,32ekmg,nosy_hobbit,5,Mon Apr 13 21:26:00 2015 UTC,"For example, I do something like this:  (defun conditional-disable-modes ()   (when (> (buffer-size) 2000000)     (flycheck-mode -1)))  (add-hook 'c-mode-hook 'conditional-disable-modes) (add-hook 'c++-mode-hook 'conditional-disable-modes)   Check if buffer > 2MB, if so disable those modes. If you have extra modes, add more to it."
emacs,32ekmg,tuhdo,1 point,Tue Apr 14 02:12:14 2015 UTC,Thank you!
emacs,32ekmg,nosy_hobbit,3,Tue Apr 14 02:42:01 2015 UTC,"Tuhdo, thanks also from me for your guides.  I've been using emacs for about 20 years, but always as a c++ hacker, and I never really gone whole hog in setting up a modern IDE environment until I found your guides about a week ago.  I've been skimming them for some obvious features, and I plan on reading them more closely in the next week during my commute - always good to shake up old habits.  They've been a huge help, but I have just one suggestion: It would be great if the gifs you include as demos also showed the commands or keystrokes used for each step (either as caption text, or appearing overlaid in the gif itself as they are invoked).  There are several examples where what I saw looked intriguing, but I had to stare at the looping image for several minutes before I finally figured out what you were doing."
emacs,32ekmg,steve_b,1 point,Mon Apr 13 19:06:18 2015 UTC,"Thanks for your suggestion. I will improve it when I have time. I put description below most demos, so it might be helpful if you read the description after looking at the demo at least once."
emacs,32ekmg,tuhdo,2,Tue Apr 14 02:16:47 2015 UTC,"Nice stuff :) I see you on /r/vim now and then which is always interesting. I use vim, Emacs looks nice though, good stuff"
emacs,32ekmg,y45y564,2,Sun Apr 26 03:08:10 2015 UTC,"Glad you enjoyed my posts :)  I learned many stuffs about Vim in /r/vim too, that's why I regularly browse it."
emacs,32ekmg,tuhdo,1 point,Sun Apr 26 17:05:09 2015 UTC,"Hey tuhdo, You seem to know what youre talking about so Im just gonna ask here:  I have some issue with projectile-find-file where it will print   sh: /usr/local/bin/bash: No such file or directory   I have trace it to the -mapcat call in projectile-current-project-files but then I got stuck. Any ideas what could be wrong with my setup?"
emacs,32ekmg,theologe,1 point,Mon Apr 13 19:42:33 2015 UTC,"What OS are you in? From the error, it shows that your sh points to non-existent /usr/local/bin/bash. If you fix the erroneous sh link, it should work."
emacs,32ekmg,tuhdo,2,Tue Apr 14 02:15:02 2015 UTC,Im on Mac OS 10.10.3. /usr/local/bin/bash was a symlink to the location in the brew install dir. I copied the actual binary over to that location and now it works. This was all because I updated bash manually last year. Cheers.
emacs,32ekmg,theologe,1 point,Tue Apr 14 08:25:38 2015 UTC,"I got the time to test all your screehshots. Some questions:    How could you get a live grep? I tested it with Helm Ag (which relies on Ag.exe on Windows), but I got results only when the search is completed. How could you copy and delete files in your, what it seems, a Helm window? I marked the files with Hydra, but I couldn't figure a way out to copy them to another directory."
emacs,32ekmg,ReneFroger,1 point,Thu Jun 4 19:59:49 2015 UTC,"How could you get a live grep? I tested it with Helm Ag (which relies on Ag.exe on Windows), but I got results only when the search is completed.    You must use the command helm-do-ag, similar to how you do it with the built-in helm-do-grep.   How could you copy and delete files in your, what it seems, a Helm window? I marked the files with Hydra, but I couldn't figure a way out to copy them to another directory.   Are you using Helm Projectile? If so, open a directory in your project with helm-projectile-find-dir in other window, then use helm-projectile-find-file, mark all the files and then press M-C to copy to your directory just opened in other window."
emacs,32ekmg,tuhdo,1 point,Fri Jun 5 03:00:07 2015 UTC,"Thanks for your reply. Seems helm-do-ag does nothing in my case.   And yes, I'm using Helm Projectile. Thanks for your help."
emacs,32ekmg,ReneFroger,1 point,Fri Jun 5 11:39:44 2015 UTC,"/u/tuhdo, your guides are amazing!  I stumbled across the C++ dev one about a month ago.  Thanks for making them.  Helm has been a great addition to my workflow.  Much better than ido.  Quick question: With helm-gtags, is there a way to have helm-gtags-find-file just straight to interactively display results rather than first having you type in a pattern.  I understand this exists to improve performance on large codebases like the Linux kernel, but I have a relatively small codebase that I'm working with."
emacs,32ekmg,stephen272,2,Mon Apr 13 05:30:38 2015 UTC,"Now I realized that you mean you have to type a pattern before helm-gtags-find-file gives you something. I only used it once so I forgot how it works. But if you want to have an immediate file list, either try the solutions in the other comment, or use Projectile with helm-projectile-find-file, and you will always get the file list."
emacs,32ekmg,tuhdo,2,Mon Apr 13 13:19:17 2015 UTC,I found out a command that just does that you want: helm-gtags-select-path.
emacs,32ekmg,tuhdo,1 point,Tue Apr 14 03:43:10 2015 UTC,Wow! Thanks for spending multiple days on this.  This is perfect!
emacs,32ekmg,stephen272,1 point,Wed Apr 15 13:38:21 2015 UTC,"You can use helm-gtags-dwim. It automatically jumps to a header when there's one at point. Or, you can use helm-projectile-find-file-dwim that automatically jumps or offers you a file list if there's more than one. It works even without full file path, given that it's a project recognized by Projectile. Here is a demo of it."
emacs,32ekmg,tuhdo,13,Mon Apr 13 06:49:06 2015 UTC,"The title of your post indicates that you are interested in any use-case, while the body of the post seems to be concerned with Emacs as a programmer's tool only. Since the later is covered by other posters, I'll tell you how I use Emacs for other tasks in my day-to-day life.  First it's worth pointing out that I'm a social scientist. This entails, quite literally, tons of papers to read. PDF-tools is great for this. Having org-mode open in one frame, while reading papers in the other (tiling WMs make Emacs frames wonderful to use) is far more efficient than any other solution I have tried. Add the extensibility of Emacs, and you have a great mix (e.g., is it annoying to switch frames before you flip to the next PDF page? Bind a key in org mode to swap to the nearest PDF view, scroll down a page, and jump back.)  Org-mode is excellent for writing (the *tex formats are, unfortunately, not very popular among my peers). Fancy-narrow mode with evil and evil-leader makes focusing on certain parts of my text wonderfully simple. In normal mode I press 'vis' (visually select the whole of the current sentence), then my shortcut for narrow selection, and suddenly the sentence I'm currently working on is in focus. Add writeroom-mode into the mix, and you have a wonderful, distraction free, environment to work in.  Have experience taught you that reviewers sometimes ask you to purge your text of certain arguments, and then, two rounds of review later, want it added back again? Since org-mode files are all just text, I have all my worked tucked nice and safely in a git repository on one of my servers. Emacs with its wonderful git support makes it almost a joy to go back in time, seeing the  changes your work has gone through.  Org-mode, of course, is far more than a writers tool: I use it for quick notes (deft is fantastic for this. My tiling window manager, StumpWM, enables me to quickly create an Emacs frame, running deft. When I close deft, the frame itself is also closed) and organizing my work and private life.  I use Emacs for other tasks as well, but most of them somehow involves my previous profession--software development."
emacs,32ekmg,ghostshell,4,Mon Apr 13 07:33:55 2015 UTC,"First it's worth pointing out that I'm a social scientist.   For statistics, which is important in many social sciences, I suspect that a substantial chunk of the R world uses the ESS emacs frontend."
emacs,32ekmg,wadcann,3,Mon Apr 13 08:27:34 2015 UTC,"Very good point. I considered using R through ESS as part of the programming domain, but you are absolutely correct."
emacs,32ekmg,ghostshell,2,Mon Apr 13 14:14:55 2015 UTC,"is it annoying to switch frames before you flip to the next PDF page? Bind a key in org mode to swap to the nearest PDF view, scroll down a page, and jump back.   I bound a key to do the exact same thing, so perhaps this is something that should come built-in :)"
emacs,32ekmg,jmgrosen,1 point,Mon Apr 13 19:01:01 2015 UTC,Perhaps a minor mode? I might look into that when I have some spare time. Are there any other features that would be useful?
emacs,32ekmg,ghostshell,1 point,Wed Apr 15 17:53:17 2015 UTC,How did you go from being a developer to a social scientist?  Sounds like an interesting story.  :)
emacs,32ekmg,gottabeme,1 point,Fri Apr 17 16:04:06 2015 UTC,"Thanks, very interesting."
emacs,32ekmg,gottabeme,7,Fri Apr 17 20:38:52 2015 UTC,"I'm a composer and not a programmer. Though a project that I'm working has required me to learn how to program in Lua. So here's what I use emacs for:  1) Edit Lilypond files. Lilypond generates the best sheet music of any program available. It uses text files (like LaTeX).  2) Edit LaTeX files. I'm something of an amateur typesetter.  3) Lua programming.  4) Updating my website.  The project I work on (/r/platonicmusicengine ) is a large program written in Lua. There's an amazing IDE from Zerobrane Studios that was created for Lua. Why don't I use it?  1) Doesn't have git stuff built in. I love magit and it's so nice to be able to use it on the fly.  2) My software generates both Lilypond and LaTeX files and it's nice to be able to edit those directly in the same editor (emacs).  Similar to the Lua editor above there's an amazing one available for Lilypond called Frescobaldi. It is seriously really good. Why don't I use it?  1) Lack of git.  2) Again, the ability to switch easily to other files and copy and paste things across as needed.  I do have to edit my website (shameless plug) with something. It's all html and server side stuff but again, it's nice to be able to edit the site using Tramp and copy and paste things around from all the other files I'm using in my project.  So I guess the reason I use it instead of any of the single-purpose editors that are available and might even be better at dealing with those specific tasks, is that emacs allows me to handle all of them in a uniform matter (same keybindings, for example).   And then having things like a time-clock function, rpn calculator, pianobar (for listening to music from emacs), one customized dictionary that I can use across all the file types, and many other tools specific to emacs that these other editors have no reason to have, makes using emacs an obvious choice.  I don't use it for mail (gmail) though I do often use it to compose long emails. And I don't use it for browsing the web.  Also, I'm not a programmer and don't understand anything about Lisp. Any customization I do has to be copied from someone else. Fortunately there's a lot of great people who document all this stuff which makes it easy for me."
emacs,32ekmg,davethecomposer,2,Sat Apr 18 14:16:08 2015 UTC,/u/davethecomposerandtheprogrammer
emacs,32ekmg,shackra,1 point,Mon Apr 13 15:09:51 2015 UTC,Not a programmer.  Pfft.  You are now.  :)
emacs,32ekmg,gottabeme,2,Sat Apr 18 07:22:14 2015 UTC,"Ha! It is something I think about after all my project is up to something like 5,000 lines of code. But then I also realize that there is so much I don't know about Lua and programming like all sorts of basic algorithms and methods for dealing with simple problems. I really am a hack (in the bad sense) and would hate to insult all the good programmers out there by claiming to be one myself.  But maybe some day..."
emacs,32ekmg,davethecomposer,9,Fri Apr 17 16:46:50 2015 UTC,"I'm wondering is emacs used by people for the intended uses    Emacs is a platform, so the intended use is up to you. For example, org-mode is great a personal information manager and it is a fairly recent application, not something which the original creators of emacs intended. So the strength of emacs is it can have many different uses depending on the needs of its users.  That said, I don't use emacs for everything. For example, I don't use it for email or web browsing. There are better tools for that.  So my philosophy is use the best tool for the job. But that doesn't mean quitting emacs altogether if there is a better tool for a certain task, because there are always other tasks which are specific to the one's own use case and emacs is a great platform to quickly implement solutions for these uses cases.  For me the above mentioned org-mode would itself be a reason to use emacs if I didn't have other uses for it."
emacs,32ekmg,kcin,1 point,Fri Apr 17 22:11:10 2015 UTC,"Having recently switched my e-mail to Emacs, what do you think are it's weaknesses for that particular purpose?"
emacs,32ekmg,coloRD,2,Mon Apr 13 04:52:35 2015 UTC,"I use mu4e.  At one point I used mutt.  The weaknesses depend upon the particular emacs client used; mu4e is one of the younger and smaller clients, and gnus, for example, has different weaknesses.  Here are the things that I presently find irritating in mu4e:   mu4e presently doesn't have the ability to display all header lines with the keystroke, as mutt does; this is a feature that I used regularly under mutt. mu4e's interface to mu doesn't presently appear to permit use of quoted patterns containing spaces; given the weight with which mu4e depends upon searches, this can be a significant drawback. mu4e doesn't presently permit easily toggling display of a particular message between the html and text forms; mutt does. mu4e presently relies heavily upon auto-extraction of email addresses from the mu index as an address book, but it does not presently permit reordering these (e.g. I don't want Bob's rarely-used home address to be the first one that comes up) or blacklisting old or incorrect addresses from completions (I have added my own, rather-unnecessarily-complicated implementation to address this, which I've never submitted to the project). I prefer opportunistic gpg encryption: if I have a key for someone, I prefer to encrypt my email upon send unless this is requested not to happen.  mu4e presently requires manual effort to encrypt/decrypt messages.   On the up side, as console (well, I use it in a console) clients go, if you already know emacs well, mu4e, which uses menus a fair bit and can replace a lot of moving and filtering functionality with its searches, is one of the faster mail clients to learn, and it took me much less time to pick it up than I did mutt."
emacs,32ekmg,wadcann,1 point,Mon Apr 13 08:30:31 2015 UTC,"The gpg encryption one can be solved with a hook, but yeh there are definitely a few features I miss from mutt."
emacs,32ekmg,sigma914,1 point,Mon Apr 13 18:08:36 2015 UTC,"I use gmail and I can access it from anywhere (phone, etc.), so it's mostly a matter of convenience of using the browser interface, since I have a browser running already all the time.  Also, community spam filtering works extremely well in gmail.  But I could live with mail in emacs, I just don't see the advantages of setting it up when gmail is already in my browser. YMMV."
emacs,32ekmg,kcin,3,Mon Apr 13 18:50:15 2015 UTC,I synchronise my Gmail locally with iSync and have both of the best world :)
emacs,32ekmg,chmouelb,7,Mon Apr 13 09:18:28 2015 UTC,"I'm new to Emacs, I came from the Vim world.  I prefer Emacs over Vim because of the huge amount of customisation, and VimL is a bit ""meh"".  I use Emacs to write my schoolwork using Pandoc's Markdown processor.  Dotfiles: https://github.com/zackp30/dotfiles  WIP ""documentation"" of dotfiles: http://wiki.apertron.net/index.php?title=Notes:Dotfiles  And the Rakefile (and other things) that I base all my documents off: https://github.com/zackp30/basedocument"
emacs,32ekmg,zackp30,1 point,Mon Apr 13 10:59:52 2015 UTC,You might like Spacemacs.
emacs,32ekmg,misplaced_my_pants,1 point,Mon Apr 13 09:26:20 2015 UTC,I prefer to not use starter kits. Thanks for the recommendation though.
emacs,32ekmg,zackp30,4,Sun Apr 19 00:15:01 2015 UTC,"At this point, I use Emacs for many of my daily tasks.  I'll attempt to list most of them below:   To-do list management with org-mode.  When combined with org-capture and some well-thought-out tags and to-do states, this becomes extremely powerful. Email browsing with mu4e.  This is fairly self-explanatory; I update my inbox about every hour to ensure that I'm up to date on everything that's going on. Schoolwork with LaTeX, combined with the excellent AucTeX.  I use Template to create consistent-looking documents; people have begun to recognize my documents without even seeing my name on them.  AucTeX's preview function is extremely helpful when working on documents that contain a large amount of equations, and YASnippet is great for frequently-used snippets.  I also use w3m to quickly look up information. Note-taking with deft.  This mode is extremely similar to Notational Velocity on OS X, which I used before trying to consolidate all of my tasks into Emacs.  I append tags to the ends of all of my notes' headers so that I can easily search for a subject.  Combined with some elisp hooks, I use these tags to do things like configure a custom input mode for notes about Latin. Programming.  This requires no further explanation.   And...that's about it.  I still don't do any heavy web browsing in Emacs; I use Firefox for this.  Obviously, I also can't edit photos in Emacs, so I fire up Photoshop when I need to do so.  iMessage and VirtualBox are some other applications I use outside of Emacs.  However, I really spend most of my time in Emacs, and have come to absolutely love the editor and am still blown away by some of its capabilities.  As for your last question: no, not really.  I switched to Emacs less than a year ago after seeing a demonstration of some of its features on (of all places) /r/vim, and have never even considered going back.  The only time I considered using another editor was when I saw a demonstration of PyCharm and thought that it was pretty interesting, but then I found out that I could replicate almost all of its functionality in Emacs with jedi, so the temptation to switch swiftly passed.  Sorry if any part of this post is incoherent; I need to stop redditing right before bed."
emacs,32ekmg,HAEC_EST_SPARTA,3,Sun Apr 19 00:30:35 2015 UTC,"To-do list management with org-mode. When combined with org-capture and some well-thought-out tags and to-do states, this becomes extremely powerful.  Note-taking with deft. This mode is extremely similar to Notational Velocity on OS X, which I used before trying to consolidate all of my tasks into Emacs.    Why do you use deft if you also use org-mode? Org can also be used for quickly capturing notes with tags and searching them later."
emacs,32ekmg,kcin,2,Mon Apr 13 06:38:49 2015 UTC,"You can easily use deft coupled with org-mode. I believe the default file format is markdown (I changed this a long time ago, so I might be wrong), but nothing keeps you from changing this. It's as simple as changing a configuration variable.  I combine both (see my other post in this thread) to great effect. The main advantage deft has over plain org-mode--with tags and capture templates--is the ludicrous speed at which you can search your notes. If desirable, you can easily point it to your other org-mode files as well (you'll have to search GitHub for a modification to deft, I don't use this feature but I remember playing with it a while back), making searching through your notes, TODOs, and other org-mode files a breeze. I tend to create brand new notes if an idea comes to me while working, and I'm quite sure that without deft it would be too much of a hassle. And worse, it would break my workflow, taking me out of the zone where my good ideas come from."
emacs,32ekmg,ghostshell,2,Mon Apr 13 07:05:59 2015 UTC,"I think org-search-goto handles searching Org files incredibly well.  It searches both headlines and node contents across all agenda files instantly, displaying results in a buffer organized by file, showing the matching parts of each node.  I've looked at Deft, but osg seems to make it...er...obsolete?  :)  I have it bound to C-c C-g, so wherever I am in Emacs, I just hit that bind, type what I'm looking for, and if it's in any of my Org files, I'll find it in a second.  If you haven't tried it, I highly recommend it."
emacs,32ekmg,gottabeme,1 point,Mon Apr 13 07:47:03 2015 UTC,"I hadn't tried it before tonight. Thanks for the tip!  I'll definitely add org-search-goto to my tool-belt. I still prefer Deft for quick notes, mostly due to to the ease of making new notes when searching through your old ones. I gave an example in another reply about half a week ago."
emacs,32ekmg,ghostshell,1 point,Fri Apr 17 16:52:34 2015 UTC,"I combine both (see my other post in this thread) to great effect. The main advantage deft has over plain org-mode--with tags and capture templates--is the ludicrous speed at which you can search your notes.   I have a search feature in org which shows matches from my org files instantly as I type. Does deft provide something else besides that?   I tend to create brand new notes if an idea comes to me while working, and I'm quite sure that without deft it would be too much of a hassle. And worse, it would break my workflow, taking me out of the zone where my good ideas come from.   In org if something occurs to me then I press a hotkey (anywhere in my desktop, so I don't need to be in emacs for that), it pops up an org capture buffer, I type my note and press a hotkey to file it.  Is the deft note taking process more efficient than that?"
emacs,32ekmg,kcin,2,Fri Apr 17 21:22:12 2015 UTC,"Out of curiosity, what are you using for searching in org that gives you live results?  Do you have your config files hosted where I could take a peek at your setup?"
emacs,32ekmg,therealmocker,3,Mon Apr 13 08:06:20 2015 UTC,"I need full text search fairly rarely, so I use an older contributed package for that:   org-search-goto-ml.el – Use multiline search to go to locations in your org buffers  Usage: M-x osg, then start typing. Select from the matches with up/down/pgup/pgdown and press enter to go that location (you can navigate the history with M-p/M-n). If the search string contains several strings separated by spaces then these substrings can appear in any order in the results. The search handles an org heading and its text as one block, so the substrings can match in any part of an org entry. If the heading is not matching, only the body, the heading is added to the results anyway to indicated which entry is matched.   http://www.emacswiki.org/emacs/org-search-goto-ml.el  There may be newer helm-based solutions too, but I haven't checked, because the above package works well for me."
emacs,32ekmg,kcin,1 point,Tue Apr 14 03:19:49 2015 UTC,"It is hard for me to give a meaningful reply. I consider efficiency dependent on several characteristics of your work and personal preferences.  Focusing on the two points you brought up in separate, deft would probably be similar. An advantage to deft, however, is that both of the processes are combined. When you start typing the name of a note (in reality a new .org file), it searches and narrows your other notes if they match--on file name or content--what you have typed so far. In the match part of the buffer you see the name of the note, and a brief summary (the first few lines of the file).   This makes many scenarios easier to deal with. An example could be me remembering a point <w> made about <x>, in paper <y> and how it affects our understanding of <z>. Did I note that down before? In that case I would start typing the file name for a new entry. If I have entered my ideas into org-files--through deft or otherwise--I can easily jump into the note, read it, and possibly add to it. I often discover through the process that a few notes stick out: in this case perhaps similar arguments made by others. By having these processes combined, I'm often made aware of things I didn't know I was looking for.   I'm not sure your system would accommodate such a workflow, and indeed it might not be relevant to you, but if it sounds interesting, deft might be worth looking into."
emacs,32ekmg,ghostshell,2,Tue Apr 14 06:02:19 2015 UTC,"Focusing on the two points you brought up in separate, deft would probably be similar. An advantage to deft, however, is that both of the processes are combined. When you start typing the name of a note (in reality a new .org file), it searches and narrows your other notes if they match--on file name or content--what you have typed so far. In the match part of the buffer you see the name of the note, and a brief summary (the few lines of the file).   Interesting. It sound useful.  Though it can easily be implemented in org too. There are already search as you type extensions for org, and it's fairly trivial to connect them to capturing notes with a few lines of elisp.  Thanks for describing how deft works. I may go and implement the same in org."
emacs,32ekmg,kcin,1 point,Mon Apr 13 14:41:21 2015 UTC,"As /u/ghostshell said, the main advantage is that deft allows you to search insanely quickly.  Also, the fact that it stores each note as an individual file makes it easier to browse my notes if I don't have Emacs available, as opposed to loading and attempting to browse a massive org-mode file.  Finally, as I said in my original post, I began using deft as a replacement for Notational Velocity, which I used heavily before switching almost everything into Emacs.  It was a matter of familiarity - deft allowed me to maintain some consistency with my old workflow, so I began to use it.  I still use it because it works extremely well for my needs."
emacs,32ekmg,HAEC_EST_SPARTA,3,Mon Apr 13 15:50:20 2015 UTC,"I absolutely use it every day and I deliberately avoid IDE and GUI-based tools. I don't find it productive to switch from 10 fingered input to 1 fingered input.   Also, GUIs can only take you as far as the GUI designer thought and built. Text-based tools can bring you as far as YOU think and build."
emacs,32ekmg,rberenguel,3,Mon Apr 13 08:28:03 2015 UTC,"Whenever I'm not browsing, emacs is the main tool I use. It's my work-email client (with mu4e, which has blazingly fast search and is non-locking) occasional organising/literate programming tool (org-mode) and integrates nicely with all the languages I've ever used (the only language I do not use witihn emacs is R because the REPL in R is good enough usually... and APL because I'm writing my own web-based REPL.)  Periodically I think TaskWarrior is better than Org mode, but it's some weird cycle I go through: decide some app is better (Clear, for instance,) then decide org-mode is better, then decide no, TaskWarrior is better, then ""to hell with it, pen and paper."" Rinse and repeat every 3 or 4 months."
emacs,32ekmg,knome,5,Mon Apr 13 10:51:01 2015 UTC,"I program exclusively in emacs. My fingers know the chords, and I have no desire to use a more modern IDE. Maybe I'm missing something great, but it works for what I need right now."
emacs,32ekmg,ijustwantanfingname,3,Mon Apr 13 11:07:24 2015 UTC,"emacs is my everything editor...except for spreadsheets, unfortunately. A powerful spreadsheet editor (that isn't org-mode) would be a neat project.  That said, 99% of the time, it just serves as my C IDE."
emacs,32ekmg,wadcann,2,Mon Apr 13 11:31:43 2015 UTC,"A powerful spreadsheet editor (that isn't org-mode) would be a neat project.   Actually, I was really suprised that Unix in general doesn't have a solid spreadsheet for the console even outside emacs; seems like this is a no-brainer match, but never really happened.  Here's some discussion I have on the topic."
emacs,32ekmg,trachurus,2,Mon Apr 13 15:35:39 2015 UTC,"I got into Emacs because I use R a lot for data analysis, and ESS is a great way to work on R scripts. Still prefer it over Rstudio because of the efficient keyboard shortcuts, nicer auto-complete, and ability to use org-mode and auctex when making documents with embedded R code. Plus, the ability to edit scripts and run R code remotely using tramp is nicer than connecting to Rstudio server in a browser (and easier than getting your server admin to install Rstudio server)."
emacs,32ekmg,villiger2,2,Mon Apr 13 18:21:25 2015 UTC,I use emacs for programming in almost any language (With some exceptions). I also use org-mode for organising my uni notes.
emacs,32ekmg,pinchyfingers,2,Mon Apr 13 08:53:12 2015 UTC,"Writing code, grepping code, reading code, etc. Pretty much anytime I have to type more than two lines, I type in Emacs first. Quick math, etc. in elisp   I used to use eshell and python-shell constantly, but I've switched back to using the terminal because it's too complicated to get some things working in eshell."
emacs,32ekmg,redditteddy,2,Mon Apr 13 11:19:41 2015 UTC,org-mode för TODOs and planning  shell (nox version) for quick scripting on the command line
emacs,32ekmg,bradfordmaster,2,Mon Apr 13 12:36:18 2015 UTC,"Personally, I use it along side an IDE for larger projects. I also use it as a git client (magit) as well as for running python (as a fancy calculator) and even a Pandora client (pianobar) so I can skip crappy songs without my hands leaving the keyboard.  At my current company, we use XCode (not much choice) to build an iOS app, along with a C++ ""core"" library (which is the part I primarily work on). For serious code typing and normal editing, I use emacs, but I keep xcode open in the next workspace (or whatever OS X  calls them), and occasionally switch back and forth.  I sunk some time into setting up basic build and run commands from emacs, but for anything like adding files to the project, or refactoring, or exploring a new piece of code, I use XCode because it has smart IDE features that understand syntax. I know people will point you at a million emacs plugins that try to do the same thing, but I don't mess with those much anymore. The fact is that my team mostly uses XCode, so someone else has set stuff up to work correctly, and I often don't want to sink too many hours into it. And if I make a change, I need to make sure it works in XCode anyway. Sometimes writing elisp is a great way to productively procrastinate though :).  I have etags set up for basic jump, but its pretty horrible (try finding the definition of a function called Init or Update). I use emacs because I have it set up exactly the way I like and I'm really fast and comfortable with it, but I don't try to make it an IDE when it's not. Despite that, I usually don't need those features. If I'm writing some code and unit tests, and just iterating on that, I can go days without touching XCode, but if I'm messing with the build, project settings, etc., it can be the other way around.  For smaller projects, scripts, etc. I'd write them entirely in emacs."
emacs,32ekmg,tuhdo,3,Mon Apr 13 15:03:54 2015 UTC,"But if you could jump anywhere in a project as large as the kernel source tree in an instant, why not? I can get a list of over 10,000 references in an instant with helm-gtags too. Note: Don't use ctags for complex languages, but smaller and lesser known languages. You shoud use GNU Global; it supports C/C++/ObjC and a few more and actually allows jump to references."
emacs,32ekmg,bradfordmaster,1 point,Mon Apr 13 05:13:17 2015 UTC,"Does helm-gtags support C++ properly? e.g. if I search for the definition of Update() in a derived class, will it show me the right file or give me the right options?  The problem I've had with packages in the past that claim to support C++ is that they couldn't understand the project structure and weren't looking in the right place for files. As basically the only emacs user on the project, I can't be maintaining any manual file lists or anything like that. I am willing to sink some time into this again in terms of one time setup or writing a script to generate a file or something."
emacs,32ekmg,AndersBakken,4,Mon Apr 13 07:13:19 2015 UTC,"Check out https://github.com/Andersbakken/rtags   It uses libclang to index c/c++ (same as XCode does) so it fully understands C++ code and can jump to definition/find references/generate context-aware completions etc  Disclaimer, I wrote it."
emacs,32ekmg,bradfordmaster,1 point,Mon Apr 13 08:20:20 2015 UTC,"Sounds like exactly what I'm looking for! I can't compile the submodule 'rct' though. I'm assuming I was supposed to cd to to src/rct, and then follow the cmake instructions. Build went fine, but then I get:  CMake Error at cmake_install.cmake:48 (file):   file INSTALL cannot find ""~/rtags/src/rct/rct/DB.h"".   Also, when I ran cmake, I got:  CMake Warning (dev):   Policy CMP0042 is not set: MACOSX_RPATH is enabled by default.  Run ""cmake   --help-policy CMP0042"" for policy details.  Use the cmake_policy command to   set the policy and suppress this warning.    MACOSX_RPATH is not specified for the following targets:      rct  This warning is for project developers.  Use -Wno-dev to suppress it.   Anyway, I'll look into it more tomorrow, probably an issue with my setup."
emacs,32ekmg,bradfordmaster,1 point,Mon Apr 13 08:53:01 2015 UTC,"I got it compiling (fixed a small bug in the install script, pull request has already been merged) and it looks great on the example, haven't had a chance to set it up in my project though. I'll update when I do, in case people stumble across this in the future"
emacs,32ekmg,AndersBakken,1 point,Tue Apr 14 07:05:30 2015 UTC,Sorry about the delay. The first one is fixed now. I'll have a look at the warning. It should be benign.
emacs,32ekmg,johnfredcee,1 point,Tue Apr 14 22:39:14 2015 UTC,Personally I use my own scripts with exuberant-ctags : https://github.com/johnfredcee/tagbank. Nothing else really handles C++ and even then exuberant-ctags needs tweaking (usually to recognise macros that decorate classes/methods and ignore them). It works fine for me on the Unreal4 Engine with etags-select.
emacs,32ekmg,tuhdo,1 point,Fri Apr 17 07:07:44 2015 UTC,"if I search for the definition of Update() in a derived class, will it show me the right file or give me the right options?   Yes, but it will include false positives as well. For example, if you want to search for Update() definition in class A but there are 5 other Update() definitions in other classes, it will give you all and you have to choose one like this. The good thing is, you have Helm so it's easy to narrow to one and you can also press C-z (or TAB if you rebind helm-execute-persistent-action to preview each); also as you can see in the demo, it gives me class as first result and everything else is below, as the cursor is on the class BaseDim. The advantage is that GNU Global builds index small tag database and is fast. EDIT: One thing to note is that while GNU Global gives you all matches of something, it can separate between definition matches and reference matches. So, if you are looking for definitions, it only gives you all definition matches but not reference matches and vice versa.  Here is reference gathering demo. As you see, if the tag at point is a definition, helm-gtags gives you references, all with a single command: helm-gtags-dwim.   The problem I've had with packages in the past that claim to support C++ is that they couldn't understand the project structure and weren't looking in the right place for files   GNU Global is not a full-fledged C++ parser as in the compiler, so it won't give you 100% matches. However, it does a good job at giving you all possible matches, so that's a good thing that you do not miss anything. Using it is easy: i'm install GNU Global, at the command line, type gtags and it automatically builds a tag database starting from that directory down into every directory inside the directory root. Then, you can start using it to navigate around immediately in Emacs."
emacs,32ekmg,SegaTape,2,Mon Apr 13 08:35:59 2015 UTC,"Most of my work involves writing C++ and Python, so there's that. (A couple of coworkers have told me that I should switch to xcode, but honestly I feel like tuhdo's C++ IDE setup is both easier to use and more powerful than xcode.) I also keep track of my to-do list and take notes on papers and books with org-mode, write LaTeX, and use eshell for basic shell tasks.  I don't use emacs for email and I only rarely use it for web browsing."
emacs,32ekmg,aerique,1 point,Mon Apr 13 08:54:30 2015 UTC,"I don't know how Xcode has evolved over the years, but when I had to use it for a 3 month iOS gig in 2012 I was underwhelmed by it.  Its autocompletion amongst other things left much to be desired.  I did like the autosave feature which did not fail me once AFAIK."
emacs,32ekmg,SegaTape,1 point,Mon Apr 13 12:53:03 2015 UTC,"I was briefly tempted to switch, but I feel like a) most of the nice editor functionality in Xcode can be put into emacs very easily b) I like having just one editor for all my stuff and c) Xcode adds a lot of bloaty junk I don't care about."
emacs,32ekmg,mmellinger66,1 point,Mon Apr 13 15:21:57 2015 UTC,"What do you use for autocompletion in emacs?  The various autocomplete packages have evolved over the past several years.  I use emacs for scripting and org but for iOS, I still use Xcode."
emacs,32ekmg,aerique,1 point,Mon Apr 13 15:40:07 2015 UTC,"I use company-mode for completion, although at the time I think I used autocomplete-mode.  However for company-mode it mostly depends on the backends. Common Lisp has never been a problem in Emacs but f.e. for C++ I recently started using irony-mode and its company-mode backend which has been a huge improvement over semantic and whatever I used before that."
emacs,32ekmg,wadcann,1 point,Mon Apr 13 16:15:32 2015 UTC,"The things that I might be likely to use:   mu4e for email org-mode; I don't use a lot of its functionality, but it does make for a good outliner compilation-mode to colorize and hyperlink errors in build output magit for source-control.  It took me a long time to do this, because you really should also know git in addition to magit, and git itself is quite large; I really only use a small chunk of magit's functionality, and do the rest from the command-line; it's very good for browsing diffs.  In addition, magit is limited to git, and until recently, other SCMs were a meaningful factor in the world. various language modes to edit source code calendar (org-mode may have its own independent system of tracking appointments, but I've never dug into it) to get a summary of the day and week's appointments emms to play music markdown-mode to post Reddit comments; things like C-u C-x TAB to blockquote a region are handy.   A lot of the value is that I've customized and extended emacs and can re-use knowledge from program to program.  So, I'm not particularly blown-away by emms; for example, I'd like to have seeking (though I don't really care much about it, it'd still be nice).  But, using it also lets me leverage bookmarks and other features that I've come to know well, so it becomes worthwhile.  Emacs is also very terminal-friendly, which is a significant plus."
emacs,32ekmg,petrux,1 point,Tue Apr 14 07:17:14 2015 UTC,"I use org-mode (even if with a lot of concerns) and the LaTeX platform Auc-TeX. Also Python development with elpy.    Post-Scriptum Rant: I'm what you could define an enthusiastic emacs user, but also a hater: the philosophy is good but I totally think that should be rewritten (almost) from scratch and made easier to interact with, e.g. Lisp is fine, but it's like writing a book in Serbian and not in English, text is fine but some graphical debugging utilities could be fine, some Java autocompletion and maven integration would make my life easier, and so on. I'm pretty sure that more skilled emacs users will point out that a lot of stuff that I cannot find in emacs are just there. The problem is that I would need like a year in order to learn acquire a proper Lisp fluency, get into the packages (which usually are not-so-well documented, and so on). Do you see my point? I mean... sometimes it's just easier to in install Eclipse -- sigh!"
emacs,32ekmg,wadcann,2,Mon Apr 13 08:24:41 2015 UTC,"I use org-mode (even if with a lot of concerns)   ?   text is fine but some graphical debugging utilities could be fine   I really prefer having the program's functionality (aside from a few limited features like the fringe) available in the console, as I always work in the console.  What graphical debugging utilities are you referring to, though?  I can't think of anything that's inherently graphical...I guess ddd supports graphing data structures, with edges for pointers, but that's a very rare debugger feature, and I assume that that's not what you are referring to."
emacs,32ekmg,petrux,1 point,Mon Apr 13 11:29:27 2015 UTC,"?   I like the idea of org-mode for organizing all my stuff (and this is basically why I use it). But for the customization and for the integration of my work-environment (Google Calenda, Trello, LearnStream and so on...) I have to acquire a lot of background and that acquisition is hard as documentation and learning resources are very disorganized and chaotic -- at least, this is whta I feel, maybe everything would become easier as I learn some more Lisp."
emacs,32ekmg,kcin,2,Mon Apr 13 18:16:42 2015 UTC,some Java autocompletion and maven integration would make my life easier   Eclim can do this. See the screenshots: http://www.skybert.net/emacs/java/
emacs,32ekmg,madwilliamflint,1 point,Wed Apr 15 14:56:21 2015 UTC,"There's very little that modern IDEs do that I'm interested in.  I manage my builds, my source, the higher level structure of my code, etc.    I connect to databases, I shell into servers, do all my editing, do some emailing (but not most of it), manage my projects and todo lists (org-mode FTW).    People come up with IDEs with all kinds of gadgets in there and they're certainly neat enough.  But I don't want intellisense. I don't want automated refactoring or code generation.  I'll manage my own damn linker dependencies (when necessary) rather than have something work behind the scenes magic.  My .emacs file is older than most people who will read this."
emacs,32ekmg,tuhdo,1 point,Mon Apr 13 11:50:07 2015 UTC,"But most of such manual management is tedious and unneccesary. I mean the sort of things like memorize locations of some code, manually navigate to file contains such code and open it rather than one button magic? If we keep thinking like this, why is a compiler needed when we already have assembly? Shounldn't we do it all manually? How would you compete with the other guys just as competent as you but they can do faster because they have better tool?"
emacs,32ekmg,madwilliamflint,1 point,Tue Apr 14 18:10:38 2015 UTC,"Being farther and farther away from the code doesn't make for a better programmer and ""coding speed"" isn't really a constraining factor in any work I've done in the past 25 years.  I wouldn't stand on a podium at a conference and say ""everybody give up your IDEs"" but they seem to do little more than get in my way.  I'm using too many languages and other technologies to condescend to some goofy tool because it interrupts me with tooltips, steals screen realestate and processor cycles in return for a convenience that's only applicable in 1/4 of what I do during any given day."
emacs,32ekmg,tuhdo,1 point,Tue Apr 14 19:11:45 2015 UTC,"Compiler is a code generation tool, so in a way you are using a code generation tool.   The tools help you finish your tasks faster and more pleasant, especially boring grunt work that you cannot avoid in your daily job. And how do you do when you are put in a complete new and fairly large codebase, completely not knowing anything about it and they tell you to change some functionality?  Probably current tool is sufficient for what you've done in the past 25 years i.e. you don't have to write code much but do more higher level management tasks, but when you actually have to write code and tools become even smarter you're in danger of losing to your peers if you don't use such tools for your job. Imagine someone as competency as you (i.e. as smart or even smarter) and they get better tools that can help you write code 5 times faster than you. What do you do?  Better tools are useful because it helps me to utilize my time with open source projects I contribute. I don't have much time so I must do it as fast as possible, with accuracy. I don't say the way you work is wrong, but I just say it's inefficient for today programming."
emacs,32ekmg,sabof,1 point,Tue Apr 14 19:42:41 2015 UTC,"Ultimately you use software that you enjoy using. The feature list contributes to enjoyment, but is not the only factor."
emacs,32ekmg,Starlight100,1 point,Wed Apr 15 03:44:23 2015 UTC,I use a customized version of #'vc-git-grep.  I use it to search non-git-repo folders too. Customized it to work like helm with space separated inputs. It's a much better searching experience than I've found in IDE's.
emacs,32ekmg,tmalsburg2,1 point,Tue Apr 14 22:21:42 2015 UTC,"I'm a researcher, which means that most of my work consists of reading and writing text:   reading academic papers taking notes about papers and during talks or meetings reading and writing tons of emails writing research articles writing reviews of other people's work writing code for experiments writing code for analyzing data ...   Emacs gives me one consistent user interface for all those tasks and more importantly allows me to fine-tune frequent workflows.  For example, when a colleague asks me for an article, it takes just a small number of keystrokes to reply to his email with a nicely formatted reference and an attached PDF of the article.  No need to open an Email program and a bibliography data base and a file browser. Everything is at my fingertips.  This way I save time and get more work done.  The only task that has so far resisted being integrated into emacs Emacs is web browsing."
emacs,32ekmg,ginopascali,1 point,Wed Apr 15 02:20:53 2015 UTC,"i use it mainly for mail (gnus), notes (org mode), IRC (erc) and python development (magit, jade, etc)."
emacs,32fjmq,bioh,1 point,Mon Apr 13 11:39:44 2015 UTC,"Something like this:  (grep-apply-setting 'grep-find-template """"find . <X> -type f <F> -exec grep -A2 -B2  <C> -nH -e <R> {} +"""")   If you are using projectile-grep. There may be a more elegant way to accomplish this within emacs grep.el."
emacs,32fg9m,pclouds,3,Mon Apr 13 10:51:01 2015 UTC,SO: emacsclient will not allow two different frames to have the same file open
emacs,32cfzo,TrendingBot,7,Sun Apr 12 16:44:17 2015 UTC,"Wow, just 240 to go until a big round-number milestone"
emacs,32cfzo,flarkis,1 point,Sun Apr 12 20:20:34 2015 UTC,10240 = 211*5
emacs,32cfzo,flarkis,4,Mon Apr 13 00:40:53 2015 UTC,"It was a reference to this, I'm aware it's not perfectly round"
emacs,32cfzo,xkcd_transcriber,3,Mon Apr 13 00:44:39 2015 UTC,"Image  Link  Title: 1000 Comics  Title-text: Thank you for making me feel less alone.  Comic Explanation  Stats: This comic has been referenced 21 times, representing 0.0352% of referenced xkcds.    xkcd.com | xkcd sub | Problems/Bugs? | Statistics | Stop Replying | Delete"
emacs,32cfzo,ReneFroger,4,Mon Apr 13 00:44:50 2015 UTC,I would be more interested in the ratio between subscribers and the submitted topics in the sub. Gives a good insight how alive a community actually is.  And also easier to compare it with another.. kuch editor communities.
emacs,32cfzo,krazyhades,12,Sun Apr 12 19:28:42 2015 UTC,We're doing much better than /r/notepad
emacs,32cfzo,vermiculus,2,Sun Apr 12 21:25:17 2015 UTC,"10,012."
emacs,32cfzo,droidballoon,2,Sun Apr 12 18:50:40 2015 UTC,"10k lurkers, me included"
emacs,32e29z,Mister_Bubbles,2,Mon Apr 13 00:54:46 2015 UTC,"https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org  scroll down to the ""multiple accounts"" section. There is sample code you can copy/paste.  If you find anything missing about Gnus usage or you, don't hesitate to raise a issue on my github"
emacs,32e29z,redguardtoo,2,Wed Apr 15 03:35:07 2015 UTC,Here's a good guide which worked for me:  http://www.cataclysmicmutation.com/2010/11/multiple-gmail-accounts-in-gnus/
emacs,32e29z,drstevoooo,1 point,Mon Apr 13 07:36:31 2015 UTC,"Hmm, the official manual doesn't have it yet because 25.1 is not out, but look at http://git.savannah.gnu.org/cgit/emacs.git/tree/doc/misc/auth.texi under the node ""Multiple GMail accounts with Gnus"".  Alternatively, if you're running the latest Emacs, you should be able to get to that node through the standard Info mechanism C-h i etc.  The text talks about GMail but any IMAP provider should work."
emacs,32e29z,tzz,1 point,Mon Apr 13 13:08:28 2015 UTC,"Sorry about the long delay, life got in the way.  Trying to add a secondary email and gnus is giving me issues.  Using  (add-to-list 'gnus-secondary-select-methods              '(nnimap ""outlook""                       (nnimap-address ""outlook.office365.com"")                       (nnimap-server-port 993)                       (nnimap-stream ssl)))   I get the following errors:  Reading active file from outlook via nnimap... Opening nnimap server on outlook... Server nnimap+outlook previously determined to be down; not retrying Opening nnimap server on outlook...failed: NO (NONEXISTENT) Folder doesn't exist (Failure)   And if I go into the server buffer with ^ outlook is 'denied' and if I try to open it, I get the following error:  Unable to open server nnimap+outlook due to: outlook.office365.com/993 No address associated with hostname   Any suggestions? I use these exact settings in thunderbird and it works fine."
emacs,32d2wx,jamdatadude,12,Sun Apr 12 19:53:44 2015 UTC,I use and highly recommend elpy (it supports both of your desired modules out of the box):  https://github.com/jorgenschaefer/elpy
emacs,32d2wx,statmobile,3,Sun Apr 12 21:36:50 2015 UTC,I also use elpy daily and would highly recommend it. It's just enough IDE-like functionality to really empower you without being bloated.
emacs,32d2wx,cocanning,1 point,Wed Apr 15 18:42:31 2015 UTC,I third ELPY - especially since most of my Python development is done via TRAMP - it works perfectly!
emacs,32d2wx,metaperl,4,Thu Apr 16 19:33:32 2015 UTC,"Hello, Here is a link to my setup:  https://github.com/huseyinyilmaz/emacs-config/blob/master/lisp/  There are different configurations you can do.  1) jedi, autocomplete, flymake, projectile : This was my old setup. But I wanted to change autocomplete with company mode for some time now. But if i remember right, jedi.el had a dependency on autocomplete so I could not change it. without changing jedi and autocomplete together.  If you decide to use this one. You probably want to add virtualenv support. I did this here: https://github.com/huseyinyilmaz/emacs-config/blob/master/lisp/user-init-jedi.el I get virtualenv info from virtualenv package. Than I get project root from projectile package. With those, I initialize jedi so goto source can work.  2) anaconda, company, flycheck, projectile: This is what I recommend. * Anaconda uses jedi (on python side) as backend. But you can use company mode instead of autocomplete with this.    If you use virtualenvwrapper with this setup, anaconda figures out the path automatically so you do not need to set virtualenv yourself. project root is also found automatically but I do not know how. it might be taking it from projectile but I am not sure. You should just use flycheck/ instead of flymake. A lot of backends comes preconfigured (flake8 included ) on flycheck. It is a very good project. Go to its source and search for flake8 jshint etc. to find other backends provided. projectile has 2 things that I use. It figures out your project root from location of your .git directory, make files ant files etc. And it has project level grep function which is really helpfull.   This is all my dependencies: https://github.com/huseyinyilmaz/emacs-config/blob/master/lisp/user-init-config.el#L9-L47  This is my initialization sequence: https://github.com/huseyinyilmaz/emacs-config/blob/master/lisp/user-init.el  I hope that helps."
emacs,32d2wx,yilmazhuseyin,3,Mon Apr 13 10:06:46 2015 UTC,https://github.com/syl20bnr/spacemacs/blob/master/contrib%2Flang%2Fpython%2FREADME.md  Spacemacs is awesome!  (If you have trouble getting it working see https://github.com/syl20bnr/spacemacs/commit/7e23a62cd755f9ba6fb5b1c398691514db759dd3 )
emacs,32d2wx,trishume,1 point,Mon Apr 13 00:38:20 2015 UTC,"I love spacemacs for python. It does everything that took me a while to configure out of the box. OP, You may want to try to configure it yourself first though. So that you know what's going on. I use the pdb+ipython combo and I love it."
emacs,32d2wx,cestdiego,3,Tue Apr 14 15:22:10 2015 UTC,"That's exactly what I use for Python dev; jedi and flake8. Check out https://github.com/microamp/.emacs.d/blob/master/elisp/microamp-python.el, needs some tidyups but hope this helps!"
emacs,32d2wx,microamp,2,Sun Apr 12 20:24:08 2015 UTC,"I would really recommend exploring pdb and using an ipython shell in emacs   http://emacswiki.org/emacs/PythonProgrammingInEmacs#toc16  So, set breakpoints in your code and drop right into ipython all within emacs. Way too productive!"
emacs,32d2wx,WallyMetropolis,2,Tue Apr 14 02:29:39 2015 UTC,"Try https://github.com/bbatsov/prelude, it has nice python setup build in. Both Jedi and flake8 will be pre-configured."
emacs,32dgb2,ThrowawayTartan,3,Sun Apr 12 21:43:32 2015 UTC,"Spacemacs has great documentation that nobody reads: https://github.com/syl20bnr/spacemacs/blob/develop/doc/DOCUMENTATION.md  The answer person808 gave for setting your default theme is in there if you search for ""theme"". The thing about them not showing up in the list is a bug lots of people encounter, it will be fixed in the next release."
emacs,32dgb2,trishume,1 point,Mon Apr 13 00:34:42 2015 UTC,https://github.com/syl20bnr/spacemacs/blob/develop/doc/DOCUMENTATION.md   Branch and file type has since changed... https://github.com/syl20bnr/spacemacs/blob/d5550023/doc/DOCUMENTATION.org
emacs,32dgb2,drwxrxrx,3,Thu Jul 16 04:40:40 2015 UTC,To set a theme as default add it as the first element in dotspacemacs-themes to your .spacemacs file. For other problems you can try gitter.  Note: There is a bug in the master branch that causes themes from the layer to not be loaded. The fix will be in the next release.
emacs,32bznt,guynathan,2,Sun Apr 12 14:08:40 2015 UTC,Very nice initiative! Looking forward to the first meetup.
emacs,32b9s9,angelic_sedition,3,Sun Apr 12 07:04:48 2015 UTC,"I titled this as a response to this prior thread and not as a slight to two-spacers.   I got pretty fed up with sentence navigation in emacs today, so I made a plugin that is basically a port of vim-textobj-sentence. It gives new forward and backward sentence commands as well as evil text objects (if evil is being used) that ignore abbreviations (e.g. forward-sentence won't jump to ""Mr."").  This is my first plugin, so I'm not sure I've done everything properly, but it works well for me with what I've tested. I'd appreciate any feedback on any abbreviations or edge cases I've missed. Thanks!"
emacs,32b9s9,gottabeme,2,Sun Apr 12 07:06:13 2015 UTC,"Looks nice, thanks for sharing.  I'll add it to my list of Emacs packages to try.  :)  Are you planning to put it on MELPA?  BTW, you might consider using the rx macro to define your regexps.  Makes them a lot easier to read, especially with all the escaping necessary in Emacs."
emacs,32b9s9,vermiculus,1 point,Fri Apr 17 16:01:53 2015 UTC,"Thanks, I'm going to put it in melpa as soon as I fix a few more edge cases. I would have done it earlier but haven't had any time this week. vermiculus also suggested using rx; I'll probably do that for most of the regex after I've fixed a few things."
emacs,329zm6,pietjesnot,19,Sat Apr 11 22:55:25 2015 UTC,"To start, there is no reason not to leave Emacs. As amazing as Emacs is, there are plenty of other great software packages out there. For many of the questions you ask, I personally use a standalone tool (Firefox, Geary, Sakura, Evince). You do not have to, but Emacs is not magic; it is a collection of tools and standards, and in some cases theses help each other. But Emacs offers few benefits for PDF-reading, and fitting web browsing into the text-oriented layout engine of Emacs is difficult. This isn't a pitch to cause you to abandon Emacs: it is my favorite tool, and it may become yours. But it is a tool, and like any tool does not deserve sanctification.  Now to answer your particular questions:   EWW is a built-in web browser (v24.4+). It's good for browsing text-based websites, but it doesn't execute Javascript and does not fully render HTML. I don't think it can view Youtube videos, but there is likely a separate mode for that. Check the packages archives. Yes. Gnus is a mail client that ships with Emacs, but I think nowadays several alternatives are more popular, including notmuch and mu4e. All of them support HTML mail, to varying levels. Yes. term and ansi-term are full terminals. You can run bash and ncurses programs in them. I would recommend multi-term if you're using them often. But I should also note that many ncurses programs have Emacs versions, and I've personally found switching to eshell (an Emacs shell, so a bash replacement) to be productive. Yes. doc-view views PDF files. I've found that increasing the resolution helps me make out the text better. Sadly, I do not know. Yes. Org-mode is a superlative personal wiki, organizer, and so many other things.   Also, know that Emacs is good not because it has a web browser, a PDF reader, and so on—it is good because it marries these with a common ecosystem. So learn not just the tools built on Emacs, but the ecosystem they live in: learn the package system, the configuration system, the scripting language, the community."
emacs,329zm6,pavpanchekha,9,Sat Apr 11 23:17:45 2015 UTC,Yes. doc-view views PDF files. I've found that increasing the resolution helps me make out the text better.   pdf-tools are great for viewing PDF files
emacs,329zm6,brokenbabu,5,Sun Apr 12 00:29:26 2015 UTC,Wow - I knew this thread would have interesting info. I've been using doc-view but pdf-tools looks very interesting.
emacs,329zm6,benfitzg,1 point,Sun Apr 12 13:26:36 2015 UTC,"Yeah, pdf-tools just blew my mind... being able to run occur on a PDF is beautiful."
emacs,329zm6,triogenes,2,Mon Apr 13 03:35:18 2015 UTC,"Using mpv may fit your needs for watching YouTube videos. It will use youtube-dl to get a link to the video and then stream it. If you set a simple keybinding to launch ""mpv http://some.url"" then you will be able to easily watch YouTube videos (and more, youtube-dl supports pretty much all video sites), albeit not directly inside Emacs.  Also, you may want to, as much as possible, avoid browsing sites directly with eww and instead use an Emacs client for them. For example, you can browse Stack Exchange with sx.el.  If you are trying to do all this stuff with Emacs, I would encourage first spending some time getting familiar with the basics, going through the tutorial, learning the keybindings. After you have the basics, then you can add in all the custom stuff."
emacs,329zm6,catern,1 point,Sun Apr 12 15:03:39 2015 UTC,"hallo pietjesnot   there's eww in emacs 24 which you can use to browse although not watch videos (for that it starts an external browser like firefox). Try M-x eww and type an url or keywords. It defaults to duckduckgo for searching but you can change that with (setq-default eww-search-prefix ""https://google.nl/search?q="") in ~/.emacs to make it google for instance. you can use org mode maybe? yes, you are looking for M-x ansi-term this will let you use a 'real' terminal inside emacs. For other things 'shell' or even 'eshell' works also (but no real terminal emulation/ncurses) yes, they should display automagically when you open them, with docview. i don't know, sorry   e: epub is just a zipped collection of html files i see from this http://www.emacswiki.org/emacs/epubmode.el i'm not sure if this will work out for you, it converts the html to text (with html2text external program) and makes it a .txt file. I think maybe just unzipping them ('unzip' can unzip files not ending in zip as long as they are zipfiles) and view the resulting html files with eww will work out much better. (M-x eww-open-file)"
emacs,329zm6,balkenbrij,1 point,Sat Apr 11 23:12:02 2015 UTC,Reading epub files in Emacs.
emacs,329zm6,eric-plutono,1 point,Sun Apr 12 01:57:17 2015 UTC,Are you actively using epubmode? It wasn't functional the last time I used it (on emacs 24.4).
emacs,329zm6,kaushalmodi,1 point,Sun Apr 12 12:24:39 2015 UTC,"No, I haven't used it in a long time.  It was simply the only thing which came to mind."
emacs,329zm6,eric-plutono,1 point,Sun Apr 12 18:23:57 2015 UTC,"epubmode.el will open epub files.  The other guys have answered everything else.  Emacs doesn't handle graphics that well, but it'll be able to handle  everything and anything text based."
emacs,329zm6,newfor2015,1 point,Sun Apr 12 04:01:58 2015 UTC,Are you actively using epubmode? It wasn't functional the last time I used it (on emacs 24.4).
emacs,329zm6,kaushalmodi,1 point,Sun Apr 12 12:24:13 2015 UTC,"Hey everyone adding on to this question, is there any manual or book for learning emacs as i wanted to learn it as well Thanks"
emacs,329zm6,the_khadus,2,Sun Apr 12 06:47:08 2015 UTC,"I wrote my guides for new Emacs users to help them be productive quickly with Emacs. Got many positive feedbacks, so I hope it would be helpful for you too."
emacs,329zm6,tuhdo,1 point,Sun Apr 12 14:38:53 2015 UTC,Thanks a lot. I will definitely check it out.
emacs,329zm6,the_khadus,1 point,Mon Apr 13 04:54:32 2015 UTC,"There's a built-in manual: C-h t There's also these: general and specific manuals  The main manual there has a LOT of information and still only scrapes the surface. I hate reading long form online, so I had it printed at lulu for something like $15."
emacs,329zm6,the_khadus,1 point,Sun Apr 12 09:29:34 2015 UTC,Thanks
emacs,329zm6,WallyMetropolis,1 point,Sun Apr 12 12:13:47 2015 UTC,"I highly recommend http://emacsrocks.com/  It's a series of short videos showing how to do various tasks with emacs. After you roughly understand basic navigation (how to open a file, how to move the cursor around, how to save and exit) check these out. If for no other reason than to see just how excited people can get about emacs."
emacs,329zm6,the_khadus,1 point,Tue Apr 14 02:33:29 2015 UTC,Cool...Thanks.
emacs,329zm6,kaushalmodi,1 point,Tue Apr 14 04:49:26 2015 UTC,"Can I surf the web, and watch youtube videos?   Can surf web using eww in emacs 24.4 onwards. It's great if you are browsing text and images only. I would still use Firefox for regular web browsing. Eww is great for browsing wikis, looking up codes from github, general googling, etc    Can I create a personal wiki?   Are you looking for any specific wiki format? Or are you talking about blogging in general? org-mode can be the answer. Checkout out org-octopress, org-page, etc in the package manager. Or simply Google about blogging using emacs org-mode.    Can I use the bash terminal with ncurses?   I don't use bash with ncurses, so not sure. I use multi-term at times to run tcsh.    Can I read pdf files?   YES! Check out pdf-tools.    Can I read epub files?   I didn't think there's a full-fledged solution out there yet.    Does it have a personal wiki-mode?   Can you provide more specifics? What's the wiki format?"
emacs,329zm6,ReneFroger,-3,Sun Apr 12 12:34:05 2015 UTC,"Yes. About Youtube I'm not sure, but Emacs have a mediaplayer included. Yes. Yes. Yes. Dunno. Sorry, I didn't understand the part about the personal. Can you elaborate?"
emacs,327odh,tuhdo,5,Sat Apr 11 08:10:08 2015 UTC,"It's good to see that there is a decent alternative for Vim. However, I don't like the idea about the spacebar as leader with 2 keys for everything (saving, etc.). And I prefer to understand all the configs that underlies my setup.   Furthermore, I consider myself as a extreme tinkerer. So at the end, I would then ultimately struggling with the limits of the Spacemacs framework.   A question: are you using Spacemacs, Tuhdo?"
emacs,327odh,ReneFroger,4,Sat Apr 11 13:17:48 2015 UTC,"I thought the same thing, but decided to give it a try, and I was astonished at how right it felt. Spacemacs feels so much more consistent than anything I could ever build up. It feels like what vim should be: all the power of emacs, modal vim, and more consistent than vim. Consistent default leader key implementations go a long way toward improving consistency: you need drastically less :ex commands. Plus a lot of the integrated packages work with each other much better than I was able to get them to work. I still use a lot of default emacs commands because I'm used to them, but I don't need to (C-x C-f instead of SPC f whatever, M-x instead of SPC : because that's annoying, half the time I use C-x b half the time SPC b s, etc)."
emacs,327odh,ghyspran,3,Sat Apr 11 18:07:16 2015 UTC,"the spacebar as leader   You can change it in .spacemacs file.   with 2 keys for everything   It has an advantage of being consistent and mnemonic, i.e. SPC f to access file commands; SPC b to access buffer commands; SPC p to access project features. This is much easier for new users to quickly be productive rather than reading hundred pages manual up front. Global optimization > micro optimization.   Cheers, it's good to see that there is a decent alternative for Vim. However, I don't like the idea about the spacebar as leader with 2 keys for everything (saving, etc.).I don't use Spacemacs, because I would like to understand all the configs that I apply to my setup. Furthermore, I consider myself as a extreme tinkerer. So at the end, I would then ultimately struggling with the limits of the Spacemacs frameworks.    There's nothing wrong with using existing configuration. At some point, we configured either Emacs or Vim by google it and paste the configuration (I did at some point). It's good to have something solved and we learn gradually rather than everyone does the same thing from scratch and reinvent existing solutions for nothing. You can, of course, use Spacemacs while having your own configuration in your own private layer - a sandbox where you store your own configuration.   An question: are you using Spacemacs, Tuhdo?    Yes, I am, with develop branch that has up coming support for Emacs (it's called holy-mode)."
emacs,327odh,throwaway,2,Sat Apr 11 13:26:48 2015 UTC,"This sounds like a great idea to me, and I am an emacs guy!  Where should I put my .emacs file, under the spacemacs framework?  Or, how can I initialize spacemacs from my .emacs?"
emacs,327odh,Hoek,2,Sat Apr 11 22:50:35 2015 UTC,"Thank you for writing this; I had the same feeling about vim, which is a great editor, but I realize I'd be more happy with a more complete IDE-like environment and was looking for something like this to slowly migrate to Emacs (and because of Org Mode, of course)"
emacs,327odh,jmgrosen,1 point,Sat Apr 11 13:59:55 2015 UTC,I did not write this article :D. It's from a blog of someone else and I posted it here to share with everyone.
emacs,327odh,trishume,2,Sat Apr 11 14:14:04 2015 UTC,"As a consistent Emacs user for ~5 years (my dad introduced it to me when I was 11 as The One True Editor), I'm playing around Spacemacs now. Nearly all my friends/colleagues use vim, but I've managed to stay true. That said, I have two main complaints about this at the moment:   Its documentation seems heavily geared toward previous vim users, not Emacs users. This makes it pretty hard to transition for me. It feels like I'm admitting vim is better! Though this should be a silly complaint, it's an honest one."
emacs,327odh,scrumfour,6,Sun Apr 12 00:16:37 2015 UTC,The next release will have a setting to make Spacemacs use emacs bindings so you can remain true to your morals and still have the nice experience
emacs,327odh,Kinky_German,5,Sun Apr 12 02:36:45 2015 UTC,"Just wait for the next release (soon), it will have support for Emacs users.   It feels like I'm admitting vim is better! Though this should be a silly complaint, it's an honest one.   Correction: it's Spacemacs, and it's not Vim or Emacs. You have a feeling that Spacemacs is better, not Vim. Emacs is not in the same league as Vim; it's an environment for you to run program in, and one of the program is an editor such as Evil, while Vim is just a text editor."
emacs,327odh,cheezy64,1 point,Sun Apr 12 07:29:24 2015 UTC,"I have only just started using spacemacs myself and I have to say I've been really enjoying it so far.  However I also like to tinker with things, is there a way to ""turn spacemacs off"" and enable certain aspects of it gradually so I can figure out what the myriad of packages it uses all do?"
emacs,327odh,Space_Butts,1 point,Sat Apr 11 13:50:48 2015 UTC,"SPC f e h and Spacemacs lists all layer it is having, including the core and you can explore the source code there. You can gradually learn how Spacemacs by reading its documentation and use the features that come with it. You should not remove the packages, since they won't load until you use it, and that's why Spacemacs loads in ~1.5 second with more than 130 packages installed."
emacs,327odh,felinecatastrophe,1 point,Sat Apr 11 14:20:10 2015 UTC,I have tried Spacemacs and I like the option to have single keystrokes most operations. I also like the option to have emacs keybindings in the edit mode.  I was wondering if it is possible to disable emacs keybindings in normal mode. This way I could force myself to learn the new options and generally also appreciate the Vim way in a distinct manner. Any suggestions on how to achieve that?
emacs,327aep,howardthegeek,2,Sat Apr 11 04:56:25 2015 UTC,"Awesome, I was looking for something like this the other day."
emacs,325hcz,bastibe,21,Fri Apr 10 19:13:00 2015 UTC,Change listing
emacs,325hcz,sigzero,1 point,Fri Apr 10 19:52:30 2015 UTC,No windows build yet?
emacs,325hcz,Erakko,5,Sat Apr 11 08:22:32 2015 UTC,This. I'll just wait until Harroogan comes with Emacs build for Windows. In my opinion he knows pretty how to optimize builds for Windows.
emacs,325hcz,ReneFroger,0,Sat Apr 11 08:27:31 2015 UTC,Oh thanks. Just downloaded hes current build and its far better than the default one!
emacs,325hcz,Erakko,1 point,Sat Apr 11 12:52:00 2015 UTC,"Yes, the official Windows build of Emacs from GNU is actually bad."
emacs,325hcz,ReneFroger,5,Sat Apr 11 13:03:16 2015 UTC,bad in what way?
emacs,325hcz,bliow,1 point,Sat Apr 11 16:13:26 2015 UTC,"Lacks lots of default dependencies for handling graphics, web content and SSL, which along other things means you can't use melpa or marmalade."
emacs,325hcz,trezor2,2,Sat Apr 11 21:21:09 2015 UTC,"i mean, i'm using melpa with a gnu emacs. i have issues with sx though that i'm still trying to sort through (and i wrote that part of it!)"
emacs,325hcz,vermiculus,1 point,Sun Apr 12 03:48:20 2015 UTC,Do you simply mean that you have to download some dll files and save them to special locations?
emacs,325hcz,hvis,0,Sun Apr 12 00:08:49 2015 UTC,"Yes. It's not very well communicated, and it's not obvious where to get those DLLs either.  If you need those DLLs to be able to properly run emacs anyway, I don't think it makes sense for GNU to package Emacs without them really.  This sort of petty let-the-user-pay-the-price bickering over licenses is one of the things holding GNU and the FSF back against BSD-licensed, competing projects."
emacs,325hcz,trezor2,1 point,Sun Apr 12 09:04:00 2015 UTC,"Maybe you should file a documentation bug report.  While not distributing third-party dll's is not likely to change now (but feel free to complain about that as well), it could have a better list of them, as well as download locations.  For now, I only see nt/INSTALL, which is a pretty big file."
emacs,325hcz,hvis,1 point,Sun Apr 12 10:58:41 2015 UTC,"FWIW, building on Windows with the MinGW compliers is relatively easy, if that interests you. However, I had never heard the claim that the vanilla emacs from the Gnu team is ""bad"", so I can't speak to that. I've never experienced badness but I've never tried that optimized build to compare."
emacs,325hcz,mdaniel,0,Sat Apr 11 18:44:00 2015 UTC,Does anyone know who is responsible for the official GNU Windows build? Perhaps the maintainers are unaware of how important it is to the users (or just how excited we are for it!). I think maybe a friendly email would do a lot of good if we knew where to send it.
emacs,322yg9,jozefg,8,Fri Apr 10 03:46:57 2015 UTC,"This is blatant self promotion, but it's my first Emacs package and I'm a bit excited. I hope some folks find this useful."
emacs,322yg9,xuchunyang,7,Fri Apr 10 03:47:19 2015 UTC,helm-wikipedia-suggest(comes with helm) has the similar function as well.
emacs,322yg9,oantolin,2,Fri Apr 10 08:24:48 2015 UTC,"This is great, thanks for mentioning it!"
emacs,322yg9,rpdillon,1 point,Fri Apr 10 12:54:34 2015 UTC,That's awesome.  Accelerator bound.
emacs,322yg9,Zakkor,3,Fri Apr 10 18:48:24 2015 UTC,Very nice!
emacs,322oq1,shackra,4,Fri Apr 10 02:21:12 2015 UTC,"I write my website in Markdown + YAML header and then use a Makefile with Jekyll (well, and some Perl) to create my static wiki like site. You can also use Pandoc via a Makefile for much the same results."
emacs,322oq1,dmoonfire,4,Fri Apr 10 02:37:24 2015 UTC,"The most common starting point for this sort of thing would be org-mode.  Even without any other packages, org has its own HTML publishing support which can be used to produce a static page or site.  Beyond that there are many blogging/site generation addons for org alone or org plus some external static site generator, wiki, etc.  Just a few I can find in melpa:  org-page, org-webpage, blorgit, org-jekyll, org-octopress, org2jekyll, ox-tiddly, ox-twiki... there are probably more than that.  Maybe something there fits your needs."
emacs,322oq1,RothiasVex,1 point,Fri Apr 10 03:08:08 2015 UTC,"org-webpage is a fork of org-page,  they have similar feature, the main different is: org-page focus on personal blog while org-webpage is main used to generate small project website. org-page use many customizable variables to configure org-page while org-website use an `org-publish-project-alist’ style alist to adjust org-website’s behaver."
emacs,322oq1,tumashu,1 point,Fri Apr 10 05:32:37 2015 UTC,"For static sites and blogs, you have these options: http://wikemacs.org/wiki/Category:Blog If you really want a wiki then I don't know."
emacs,322oq1,dzecniv,1 point,Fri Apr 10 13:26:59 2015 UTC,If you really want a wiki then https://github.com/gollum/gollum might be interesting for you. It has some dependencies on the server but you can edit the wiki from within emacs and push to it using git. I also supports org or markdown syntax among others.
emacs,322oq1,cpaulik,1 point,Fri Apr 10 18:12:47 2015 UTC,I've been wondering about this too (but for a blog not a wiki). I've been thinking about migrating my octopress blog to org-page though I'm not sure how difficult that would be (e.g. keeping disqus comments and modifying posts).
emacs,320t9u,tacit7,6,Thu Apr 9 17:46:31 2015 UTC,"Try this one:                         (setq package-archives '((""gnu"" . ""http://elpa.gnu.org/packages/"")                       (""org"" . ""http://orgmode.org/elpa/"")                       (""MELPA"" . ""http://melpa.milkbox.net/packages/"")                       ))   Perhaps Orgmode is on date."
emacs,320t9u,ReneFroger,3,Thu Apr 9 19:09:22 2015 UTC,"Actually, the ELPA version is quite old as well. It's a good idea to use org-mode from git. Updating to the newest org version is as simple as:  git pull make up"
emacs,320t9u,abo-abo,1 point,Thu Apr 9 18:15:45 2015 UTC,"Awesome, I saw a SO post saying that I needed to delete the default installation. I tried installing from elpa and it worked."
emacs,32299m,redguardtoo,2,Fri Apr 10 00:11:10 2015 UTC,whoa! this is super impressive!
emacs,32299m,chekt,-2,Fri Apr 10 01:37:55 2015 UTC,Come join my new subreddit: /r/evilmode
emacs,320cvb,kill-sto,8,Thu Apr 9 15:50:31 2015 UTC,"It is because the projectile tries to retrieve project name this is slow on remote host. You can disable projectile lighter with:  (setq projectile-mode-line ""Projectile"")   So projectile modeline only displays static string and won't slow you down."
emacs,320cvb,tuhdo,3,Thu Apr 9 16:39:55 2015 UTC,"psst, your parens are unbalanced"
emacs,320cvb,ducketh,5,Thu Apr 9 16:45:25 2015 UTC,That's what I got for writing Lisp outside of Emacs :(
emacs,320cvb,tuhdo,10,Thu Apr 9 16:50:38 2015 UTC,"psst, you did it again."
emacs,320cvb,Neurorational,10,Thu Apr 9 17:19:30 2015 UTC,:)  It's all good now.
emacs,320cvb,tuhdo,3,Thu Apr 9 17:20:12 2015 UTC,pssst @tuhdo I got the solution to your problems:  https://chrome.google.com/webstore/detail/edit-with-emacs/ljobjlafonikaiipfkggjbhkghgicgoh?hl=en
emacs,320cvb,cestdiego,2,Tue Apr 14 14:53:36 2015 UTC,Great. Thanks!
emacs,320cvb,tuhdo,1 point,Tue Apr 14 17:57:43 2015 UTC,"Untested:  (add-hook 'find-file-hook           (lambda ()             (when (file-remote-p default-directory)               (setq-local projectile-mode-line ""Projectile""))))"
emacs,320cvb,eclig,1 point,Fri Apr 10 14:13:51 2015 UTC,"Thanks, that works perfectly!"
emacs,31zd3i,warped-coder,8,Thu Apr 9 09:58:21 2015 UTC,"There is https://github.com/vspinu/polymode . It lets you use multiple major modes within the same buffer. You could then write a mode that read the literate part (it might be enough to just use fundamental mode or text mode and not worry about parsing the literate stuff) and use your normal C configuration for the other parts. However, last time I used polymode it was a bit slow, but that was a long time ago and has probably gotten better. You could also look into how org-mode does literate programming and copy from them."
emacs,31zd3i,mozzyb,8,Thu Apr 9 10:42:09 2015 UTC,Here's a recent article by Wilfred Hughes on how to write a major mode. I would suggest though that you start with understanding emacs lisp first. Apart from the  official emacs lisp tutorial there are many other shorter versions available online to help you get started in few minutes.
emacs,31zd3i,kaushalmodi,1 point,Thu Apr 9 12:11:32 2015 UTC,"I have my emacslisp basics down, not saying I'm a pro, but I can get by. I'm looking at the major mode article now."
emacs,31zd3i,jart,3,Thu Apr 9 13:26:46 2015 UTC,"It would help if you copied and pasted some example code, so we can see what it actually looks like."
emacs,31zd3i,redguardtoo,1 point,Thu Apr 9 12:47:53 2015 UTC,"trust me, it's not worth your time. I've got 15 years in industry and as a freelancer now, I've to switch to a new project every 3 months. I've see so many in house frameworks.  Try to use ctags and regular expression, company-ctags, helm-tags is good enough to meet all you needs. search my previous articles on how to use ctags effectively.  The beauty of Emacs is you can get job done so quickly, in many ways."
emacs,31zd3i,RobThorpe,1 point,Fri Apr 10 00:27:29 2015 UTC,"This isn't simple because it entails getting two Emacs modes to work together.  There are various solutions for that, MMM-mode, muamo-mode and poly-mode.  None of them are satisfactory, they either don't work reliably or they slow Emacs down a lot. The Emacs devel team are working on something better, see the recent thread on antlr-mode (which is another mode that needs two-in-one behaviour).  Another solution may be to ignore the literate programming information entirely and fontify it all as comments. That could be done by modifying the syntax-table's comment separators (see the elisp manual). It's probably the quickest way to get going."
emacs,323b46,joehillen,25,Fri Apr 10 06:00:27 2015 UTC,I never got the impression that Evil-related posts were considered as negative here.
emacs,323b46,ReneFroger,18,Fri Apr 10 07:16:37 2015 UTC,Is this really the case? I'm not an evil user but I still upvote evil posts when I feel they are deserving.  Will fracturing this small community further help?
emacs,323b46,flarkis,5,Fri Apr 10 07:21:17 2015 UTC,"Of course! Actually, to get evil the proper attention it deserves, we should probably just fork Emacs altogether and enable it by default. We can port systemd to elisp while we're at it."
emacs,323b46,ijustwantanfingname,2,Fri Apr 10 14:36:14 2015 UTC,My next machine is going to be running GNU/Evil.
emacs,323b46,uberyoshi,1 point,Fri Apr 10 16:28:06 2015 UTC,A new subreddit is not a code fork. See my other comment.
emacs,323b46,ijustwantanfingname,3,Fri Apr 10 16:20:39 2015 UTC,It was a joke.
emacs,323b46,wasamasa,9,Fri Apr 10 16:50:55 2015 UTC,The only Evil-related posts I've seen getting downvoted were all evil-matchit posts by u/redguardtoo because he kept spamming them for minor releases.
emacs,323b46,kaushalmodi,13,Fri Apr 10 08:19:53 2015 UTC,I have never downvoted a single evil post and I don't use evil. Please don't create such fractions. It's not that evil users NEVER use non-evil stuff in emacs. Having evil and non-evil users use the same r/emacs is beneficial to both sets of users and many times a user belongs to both the sets :)
emacs,323b46,vaiav,1 point,Fri Apr 10 11:55:11 2015 UTC,"I have never downvoted a single evil post and I don't use evil.   I'm glad you speak for everyone, but the reality is that I noticed I've been missing out on posts because evil stuff gets pushed down. Maybe you haven't been looking for them.  The fact is emacs+evil feels like an editor all its own, very different from vim and emacs, but it is only possible through the power of emacs."
emacs,323b46,kaushalmodi,3,Fri Apr 10 16:24:55 2015 UTC,"Do you have any screen shots or logs you can report? I have never seen anything but glowing reviews and enthusiasm for evil-mode on /r/emacs myself, and amongst those who have tried it on /r/vim sufficiently long to have gained competence they have sound reviews as well.   I am curious having not seen this first hand."
emacs,323b46,kaushalmodi,1 point,Fri Apr 10 17:02:50 2015 UTC,The down votes could also be of the reasons why any post on reddit gets down voted.
emacs,323b46,gnusosa,0,Fri Apr 10 17:37:52 2015 UTC,The votes on this post and the ratio of redditors agreeing to your judgment in these comments should speak for what the fact is.
emacs,323b46,kaushalmodi,4,Fri Apr 10 17:47:00 2015 UTC,"I just attended the Emacs SF meetup, and I can tell you more people are moving towards the vim on top of Emacs lifestyle. For instance, everybody loves Spacemacs, you might want to add a link about that in /r/evilmode."
emacs,323b46,sigzero,1 point,Fri Apr 10 06:34:50 2015 UTC,I already did. It's on the sidebar. :)
emacs,323b46,excitedaboutemacs,10,Fri Apr 10 06:59:14 2015 UTC,Nooo there's still time to undo this. Don't create such fractions. Some one thought that creating r/orgmode was a good idea but today there's hardly any activity over there.   This is unrelated but have you checked out https://emacs.stackexchange.com ?
emacs,323b46,kaushalmodi,-1,Fri Apr 10 11:58:10 2015 UTC,"It's not fragmentation. It's reddit. People can sub to multiple subreddits.  I'm sure lots of people will sub to: /r/emacs, /r/vim, and /r/evilmode  I just wanted a place where I wont miss out on evil related posts because /r/emacs doesn't like evil or vim."
emacs,323b46,vaiav,5,Fri Apr 10 16:19:08 2015 UTC,Yes but people have to 1) know about it and 2) post to it. Better to have it here. It is still emacs related.
emacs,323b46,alogghe,1 point,Fri Apr 10 16:57:33 2015 UTC,"See my other comment.  For example, do you think all of /r/emacs cares about a new minor release of evil-mode? I doubt it.  Everyone in /r/evilmode definitely does."
emacs,31y8wi,seanleblanc2015,4,Thu Apr 9 02:19:49 2015 UTC,"Personally EmacSQL is my favorite mode for interacting with SQL databases.  However, I work primarily with SQLite, and sometimes MySQL and PostgreSQL.  I have never used sqlplus so I cannot say how it compares with regard to support for database engines, or its method of interaction.  EmacSQL allows me to write and execute queries using s-expressions, and to work with the results the same way I would work with Emacs Lisp values.  Auto-completion on those results is possible simply through Emacs’ dabbrev-expand.  Having said all of that, I use EmacSQL for probing databases with relatively simple queries and statements.  For more complicated work I prefer to use tools specific to the database engine I’m using, when possible.  But if you’re comfortable with Lisp s-expressions then EmacSQL provides a nice means of interaction and is worth a look."
emacs,31y8wi,eric-plutono,3,Thu Apr 9 08:08:56 2015 UTC,I use the built-in sql.el and its comint-derived modes.
emacs,31y8wi,wasamasa,2,Thu Apr 9 16:53:08 2015 UTC,"I write a lot of t-sql. I use the default sql-mode.  The sql-ms interactive mode was too unpolished to use.  The big win for me is yasnippet with my custom snippets. Writing SQL can be cumbersome. Guards everywhere. Redundant text everwhere. Try creating (with guarding) a junction table with 2 FKs and a doubled up 2-way indexes; it begs for a snippet.  For sql scripts, I find snippets more important than auto-completion.  But for completion I use the default dabbrev-expand M-/. It may be dumb textual completion but it's fast. It often guesses what I want better than the ""real"" completion in Microsoft-SSMS.  The lack of a good interactive mode sucks. But a quick Alt+Tab to jump between Emacs and SSMS fills the void."
emacs,31y8wi,Starlight100,1 point,Fri Apr 10 00:08:14 2015 UTC,Hands down EDBI: https://github.com/kiwanami/emacs-edbi
emacs,31yjmv,racoonear,3,Thu Apr 9 03:49:54 2015 UTC,"I just hit shift at the same time, and it doesn't trigger Spotlight."
emacs,31yjmv,flounder0049,4,Thu Apr 9 05:25:17 2015 UTC,Do you have C mapped to the command key? If so... why?
emacs,31yjmv,jhi_,2,Thu Apr 9 04:44:42 2015 UTC,"I actually mapped my ctrl to caps-lock, hmm... I don't quite understand your point? Can you elaborate?"
emacs,31yjmv,acow,3,Thu Apr 9 06:11:24 2015 UTC,Because Cmd-<SPC> is the usual way to trigger Spotlight.
emacs,31yjmv,jhi_,4,Thu Apr 9 06:41:28 2015 UTC,"Well, that explains, I didn't know that!  On my machine Cmd-<SPC> is default to input method change (which is also essential to my workflow).   I guess it's because I'm from non-English country, and maybe Apple has different keybinding sets for different regions."
emacs,31xezm,demosthenex,5,Wed Apr 8 22:22:45 2015 UTC,"You can define your own units:  (setq math-additional-units       '(         (dollar nil ""Dollar"")         (euro ""1.27 dollar"" ""Euro"")         )) ;; This resets calc's cache (setq math-units-table nil)"
emacs,31xezm,sabof,1 point,Wed Apr 8 23:52:57 2015 UTC,"I suppose I could try adding my own, I was surprised that such common programming/networking/computing units were omitted."
emacs,31xezm,sabof,1 point,Thu Apr 9 15:46:58 2015 UTC,So am I
emacs,31xezm,nat1192,3,Thu Apr 9 16:52:10 2015 UTC,"These are from my calc.el. I live in networking land so I tend to use the base 10 kilo/mega/giga instead of the base 2.  (setq math-additional-units '(   (bytes ""byte"" ""Bytes"")   (bits ""bit"" ""Bits"")   (bps ""bit / s"" ""Bits per second"")   (byte ""8 * bit"" ""Byte"")   (bit nil ""Bit"") ))"
emacs,31xezm,politza,2,Thu Apr 9 01:26:35 2015 UTC,"I have something similar.  (setq math-additional-units '(   (GiB ""1024 * MiB"" ""Giga Byte"")   (MiB ""1024 * KiB"" ""Mega Byte"")   (KiB ""1024 * B"" ""Kilo Byte"")   (B nil ""Byte"")   (Gib ""1024 * Mib"" ""Giga Bit"")   (Mib ""1024 * Kib"" ""Mega Bit"")   (Kib ""1024 * b"" ""Kilo Bit"")   (b ""B / 8"" ""Bit"")))"
emacs,31xezm,wadcann,3,Thu Apr 9 10:44:05 2015 UTC,"If you're in a Unix environment and willing to go outside emacs, there's units(1), which has both the decimal and the binary units, along with an large collection of other units:  $ units 45MiB B         * 47185920         / 2.1192763e-08 $ units 45kB B         * 45000         / 2.2222222e-05 $ units 45000MB GiB         * 41.909516         / 0.023860929 $ units 5hogsheads gal         * 315         / 0.0031746032 $ units attoparsec inch         * 1.2148337         / 0.82315794 $ units 60Mg*m/s^2 N         * 60000         / 1.6666667e-05"
emacs,31xezm,wadcann,1 point,Thu Apr 9 05:23:04 2015 UTC,"Of course I'm in Unix, but the units program appears to be a package from GNU. So that makes it Linux specific, but it may be worth a try to install."
emacs,31xezm,jberd,1 point,Thu Apr 9 15:48:32 2015 UTC,"Of course I'm in Unix,    <shrug> I normally live in Linux, but I've also spent time doing software development on Windows in emacs, and I'm sure that there are a crowd of people out there who are using emacs there.  I just mention it because there does seem to be correlation between emacs use and Unix use."
emacs,31sri6,dgtized,14,Tue Apr 7 21:46:58 2015 UTC,"I'm going to go out on a limb and say org mode is a big deal there. Having documents with executable code embeds and a nice way to string together a bunch of different languages and technologies is probably very relevant to that kind of dev. I am not in that area, but have had to do some similar work and org was very helpful both in working towards the solution and communicating the results."
emacs,31sri6,TokenMenses,6,Wed Apr 8 01:01:35 2015 UTC,ESS (Emacs Speaks Statistics) is pretty nifty too. :) And Calc is surprisingly powerful...
emacs,31sri6,sachac,6,Wed Apr 8 03:03:27 2015 UTC,"Yeah, the good ones.  I don't mean that as the usual editor wars sniping, I mean it because using emacs demonstrates the following:   understanding that it's important to use the most powerful tools a willingness to improve and customize your personal tools the ability to hang in long enough to learn something hard   Granted, I don't know that emacs should be as hard as it is, but it probably can't be helped. Personally, it took me two big attempts over a period of five years before I finally abandoned everything else.  Interestingly, the editor I abandoned was SlickEdit, which is basically a newer, less powerful, emacs based on a rather awful language (Slick-C...they should have just picked a different Lisp). I did spend years with VI -- and still use VI style navigation key bindings -- and I do like it, but it's not the same kind of tool; it's only an editor.  When I hire developers, I actually ask what editor they use. Not picking emacs isn't an immediate disqualification, but using an un-customized Visual Studio would be. I'm somewhat embarrassed that it took me as long as it did to start being concerned with my tools. Early in my career I was developing for Windows and had to learn some MFC and bought a book. The author took the time to go over VS customizations and why they're important.  The revelation was like getting struck by lightning.  Suddenly, I was asking myself ""Why the fuck aren't I making my tools work for me instead of the other way around?""  Fast-forward a few years and I was card-carrying emacs dude.  I want, no demand, that my dev folks have the sort of mindset that is always striving to make things easier and more efficient. To find the best tools and to master them. The most important tool we have is our editor/dev environment.  If a person can't be bothered to make the most of their tools, I can't be bothered to employ them."
emacs,31sri6,IAmALinux,1 point,Wed Apr 8 14:45:32 2015 UTC,"""I shoot lasers at stuffz"""
emacs,31sri6,bauta-steen,1 point,Wed Apr 8 13:51:24 2015 UTC,"I was kind of surprised to see Vim is 4-5 times more popular than emacs. Hmm, maybe I'm missing something and should give evil a go.."
emacs,31sri6,Astrognome,1 point,Thu Apr 9 23:58:24 2015 UTC,"I can see it a bit.  I usually use vim for editing small shell scripts and text files and doing remote stuff, basically anything that I don't need all the emacs features for."
emacs,31sri6,ReneFroger,-8,Fri Apr 10 00:34:39 2015 UTC,"I noticed that too. I wouldn't consider data scientics as developers. Not sure about the machine learning scientics/devs though, because I don't know enough about the field of machine learning.   But good to read scientists use Emacs, because elsewhere I have seen reports which indicate otherwise. When you checks it on Google Trends, the usage of Emacs seems to be decreasing unfortunately.   It makes me to wonder if there are reasons why Emacs seems to be popular in this particular group? I mean, if it's for LaTex capability only, enough another editors have capabilities for that.   Any suggestion?"
emacs,31sri6,BruceConnor,8,Tue Apr 7 22:15:43 2015 UTC,"Google trends is not useful in absolute terms. Even something like JavaScript will look like it's decreasing, because the internet is getting ""occupied"" by more and more non technical people."
emacs,31sri6,wadcann,5,Tue Apr 7 23:45:52 2015 UTC,"I recall some people pointing out that ""Linux"" was steadily-decreasing a while back."
emacs,31sri6,Hllowrld,5,Wed Apr 8 05:56:38 2015 UTC,"I'm a machine learning developer and I use emacs. AI has traditionally been a lispy field. We are mostly using Python and CUDA these days though.  Personally speaking, I do a lot of deployment on clusters, so having a remote editor is key and sublime and things are out of the question. Between emacs and vim, I prefer emacs (Spacemacs actually) because it feels more extensible."
emacs,31sri6,Trevoke,3,Wed Apr 8 03:45:12 2015 UTC,Maybe it's because machine learning has historically been a very lispy field?
emacs,31sri6,DoorsofPerceptron,3,Tue Apr 7 22:36:24 2015 UTC,"Ai is lispy because it used a lot of symbolic logic. Machine learning is about numbers rather than symbols, and instead of a language that makes symbolic list processing easy, you really want a matrix based language/toolset like numpy, r or Matlab."
emacs,31sri6,daslu,2,Wed Apr 8 09:08:33 2015 UTC,"There are lisps which are great for matrix computation. Clojure, for example."
emacs,31sri6,DoorsofPerceptron,2,Wed Apr 8 11:40:28 2015 UTC,I've not used clojure before. Is it easy to perform destructive updates of matrices?
emacs,31sri6,luxbock,2,Wed Apr 8 12:00:53 2015 UTC,"There is the core.matrix library which allows use to write your code following its API, and then choose which matrix implementation (pure Java, BLAS, Clojure's persistent vectors) you want to use by changing just one line of code. I recall that Vectorz (pure Java) and Clatrix (BLAS bindings) implement the mutable part of the API."
emacs,31sri6,TokenMenses,3,Thu Apr 9 15:53:46 2015 UTC,Good news? If you don't like emacs why have a feeling about it at all?
emacs,31sri6,tarsius_,4,Wed Apr 8 00:57:01 2015 UTC,"I don't think that's what he meant. How about ""Good to hear scientists use it, because elsewhere I have seen reports which indicate otherwise"". If you assume the best, i.e. that there is just a very unfortunately placed newline character in his post, then you don't have to downvote just yet."
emacs,31sri6,ReneFroger,6,Wed Apr 8 02:52:03 2015 UTC,"Yes, many people here seems to interpret my words in the wrong way. But my English is not good enough. I edited my post, thanks for the advice."
emacs,31vba7,redguardtoo,2,Wed Apr 8 13:11:33 2015 UTC,"Talks about w3m, which isn't necessary now that Emacs includes eww: http://www.emacswiki.org/emacs/eww"
emacs,31te7e,agumonkey,2,Wed Apr 8 00:37:39 2015 UTC,It's a very useful package by Purcell. I heard about it from his chat with Sacha Chua.
emacs,31te7e,kaushalmodi,1 point,Wed Apr 8 04:06:08 2015 UTC,"Found it after trying to implement it myself. ""There's an emacs extension for that""."
emacs,31qkxn,tuhdo,6,Tue Apr 7 11:46:22 2015 UTC,Impressive! I have to try this out.
emacs,31qkxn,chekt,4,Tue Apr 7 11:58:40 2015 UTC,Have you got it for Common as well? It's great!
emacs,31qkxn,mszegedy,4,Tue Apr 7 13:06:50 2015 UTC,"To make it work for Common Lisp, I will need to write a grammar file or it. Maybe someday in the future."
emacs,31qkxn,mszegedy,4,Tue Apr 7 13:18:19 2015 UTC,"It supports Common Lisp now. You can use the same Elisp formatting commands for Common Lisp. The commands are now united for formatting Lisp, not just Elisp or Scheme:   srefactor-lisp-one-line srefactor-lisp-multi-line srefactor-lisp-format-defun srefactor-lisp-format-buffer"
emacs,31qkxn,evanrelf,1 point,Wed Apr 8 02:49:03 2015 UTC,"Yay, thanks!"
emacs,31qkxn,dnquark,3,Wed Apr 8 03:48:42 2015 UTC,"These formatting commands are available in latest Srefactor  (if you use MELPA, you need to wait one or two hours at the time this comment was written). Scheme commands are available (since Semantic support it), but still rudimentary. You can use it to format small sexp though.  UPDATE: You do not need to enable semantic-mode to use the formatting features for Lisp. Just load the packages and bind the commands to some keys, then use it.  UPDATE2: Common Lisp is now supported."
emacs,31qkxn,person808,2,Tue Apr 7 11:50:05 2015 UTC,gg=G
emacs,31qkxn,rgrau,2,Wed Apr 8 04:11:53 2015 UTC,"Wrong. Try that with the code in the demo and it does nothing. Only indent. Indent is different than formatting. Formatting means your code is rearranged, not just fixing your indentation.  I'm pretty sure Vim is incapable of such thing without help from external program. Too bad, for Lisp code, none that I'm aware of until now."
emacs,31qkxn,rgrau,2,Wed Apr 8 04:25:32 2015 UTC,What's the modeline in the gif?
emacs,31qkxn,kaushalmodi,3,Tue Apr 7 22:40:05 2015 UTC,Powerline from spacemacs
emacs,31uc9b,Lompik1,3,Wed Apr 8 05:26:23 2015 UTC,Pretty much all operations are based in the directory where the file is based; C-x C-d RET to get a dired window in that directory is also useful.
emacs,31uc9b,wadcann,1 point,Wed Apr 8 05:59:30 2015 UTC,C-x d RET is dired
emacs,31uc9b,spacebat,1 point,Wed Apr 8 13:07:34 2015 UTC,"Thanks, yes.  The fingers remember, the brain is weak."
emacs,31rexd,abo-abo,3,Tue Apr 7 16:06:32 2015 UTC,The linked gif is from this page.  I think that pulling a parser dependency just for simple LISP transformations isn't the greatest idea. Also having semantic-mode permanently on slows down the editor quite a bit.
emacs,31rexd,tuhdo,1 point,Tue Apr 7 16:08:31 2015 UTC,Mine does not need Semantic to be enabled as well. Though it still uses great facility from Semantic :D
emacs,31rexd,tuhdo,1 point,Tue Apr 7 17:37:08 2015 UTC,I'm pretty sure it does. The parser can randomly screw up if semantic-mode isn't on.
emacs,31rexd,tuhdo,2,Tue Apr 7 17:48:54 2015 UTC,"It only does for the temp buffer that has the content to be formatted. After the formatting is done, it is disabled."
emacs,31rexd,RobThorpe,1 point,Tue Apr 7 17:50:59 2015 UTC,"Now srefactor can format Common Lisp and Scheme and Clojure as well, without relying on clojure-semantic. The Clojure supports still need a bit of work by adding more symbols to skip."
emacs,31rexd,tuhdo,1 point,Wed Apr 8 03:46:55 2015 UTC,Emacs needs a way to enable and disable Semantic mode per major mode and per file. That would solve a lot of problems.
emacs,31rexd,tuhdo,1 point,Fri Apr 10 12:47:51 2015 UTC,My package does not enable Semantic. It only uses the lexer facility and it can reformat a 10k Clojure file (which is more complex in its syntax than other Lisp) in  around 10 seconds.
emacs,31rexd,tuhdo,1 point,Fri Apr 10 13:53:54 2015 UTC,"Lispy (8K) can re-format itself in <20 seconds. The important part is that re-formatting is guaranteed error-free.  But there are zero use-cases for re-formatting the whole buffer, even when it's guaranteed error-free. Re-formatting the current sexp, on the other hand, is pretty useful and takes < 0.05s for a decent size function."
emacs,31rexd,tuhdo,1 point,Fri Apr 10 17:16:46 2015 UTC,"I don't see that. special-lispy-alt-multiline took 0.7 second on a 31 lines function:  special-lispy-alt-multiline  1           0.7110407     0.7110407 elp-instrument-function      1           0.0           0.0   On a larger function (around 80 lines), it took 1.5 second:  special-lispy-alt-multiline  1           1.5450884     1.5450884   How do I perform reformat on a whole 10k lines? I meant, I used it on all 10k lines, not just a 10k file.  Yes, there is a use case for reformatting whole buffer. Emacs backtrace is an example. I will try to make it integrated into Emacs. And in general, it's better to have something that can reformat code than do it manually. And I meant to do it with 95-99% accuracy with specialized formatter for some particular forms. Currently, I've made a major refactor so accuracy dropped a bit but I expect it to be better."
emacs,31rexd,tuhdo,1 point,Fri Apr 10 17:33:26 2015 UTC,"I'm getting 0.2s on a 140 line function, and 0.05s on 70 lines.  Here's the result for the whole 8K lispy.el buffer:  lispy-alt-multiline                 400         8.5415412049  0.0213538530"
emacs,31rexd,RobThorpe,1 point,Fri Apr 10 18:09:12 2015 UTC,"On my Windows machine, it says otherwise. I upgraded to latest Lipsy. Meanwhile, my command needs 0.0.9s on 101 line function, while I got this bactrace with Lispy: http://pastebin.com/2j38rbZN  And we should not count by lines, but count by the complexcity of the function. That is, how deeply nested the function is."
emacs,31nh88,vibhavp01,5,Mon Apr 6 17:58:52 2015 UTC,Please remember that's the dev build and very much subject to change.
emacs,31nh88,BruceConnor,1 point,Mon Apr 6 18:23:06 2015 UTC,"From what I understand, the paradox package users using the async option will not notice any difference?"
emacs,31nh88,kaushalmodi,5,Mon Apr 6 19:04:53 2015 UTC,"You'll notice a difference when the package list is refreshed (which includes the initial load), which is not something Paradox can do asynchronously."
emacs,31nh88,BruceConnor,1 point,Mon Apr 6 19:18:48 2015 UTC,"Cool! I'd like to try this out as soon as the save-excursion not saving the mark issue is resolved on the trunk ( https://github.com/magnars/expand-region.el/issues/160 ). For now, I am stuck on a couple weeks old build (some time before this commit)."
emacs,31nh88,kaushalmodi,1 point,Mon Apr 6 19:23:36 2015 UTC,I thought the concurrency feature was not implemented in Elisp yet? Makes me to wonder how you did it.
emacs,31nh88,ReneFroger,3,Tue Apr 7 11:01:42 2015 UTC,"Only the download is asynchronous, not the data processing. Emacs has had asynchronous networking for a while.  Which is not to say this wasn't unexpectedly complicated. :-)"
emacs,31nh88,BruceConnor,3,Tue Apr 7 13:35:34 2015 UTC,"Ah I get it and by the way, I really appreciate your effort for the community, your blog Endless Parentheses and the packages.   Cheers for you!"
emacs,31nh88,ReneFroger,1 point,Tue Apr 7 13:42:03 2015 UTC,"Honestly, I'm really happy just with async I/O being introduced to network-using packages; the limitation is really not CPU cycles, but almost invariably on blocking emacs while network I/O is performed by various packages."
emacs,31nh88,wadcann,1 point,Tue Apr 7 17:35:15 2015 UTC,Any idea when it will be stable and we can start using it?
emacs,31jk6y,tuhdo,2,Sun Apr 5 18:36:12 2015 UTC,"There was a small bug that was fixed: when converting between oneline/multiline, it left a temp buffer there. This was fixed in latest commits. So, if anyone tried the Elisp commands at the time this topic was created, please update srefactor again."
emacs,31g2jt,psamim,36,Sat Apr 4 19:17:53 2015 UTC,"Sadly Orgzly is non-Free software. Maybe you can switch the license, because for me the license is a key factor in me using a program."
emacs,31g2jt,emacsen,14,Sun Apr 5 11:13:47 2015 UTC,"Second that. In fact, as it is gratis and there is no paid version on the store, it's rather silly to not make it opensource.  And if the OP wanted to make it paid, then it would sink into obscurity as there is a FLOSS android client and also a FLOSS iOS client."
emacs,31g2jt,delbosforo,7,Sun Apr 5 12:57:46 2015 UTC,... neither of which are very good.  I suspect the Orgzly developers relying on this to persuade people who care less about licensing to use their software despite its being non-free.
emacs,31g2jt,spwhitton,1 point,Tue Apr 7 03:54:04 2015 UTC,"I'm pretty hardline on avoiding non-free software, but one thought I have with regard to my smartphone is that the Android environment is stuffed full of non-free software anyway, so I don't care that much to add an app.  My real work is done on my GNU/Linux desktop machine.  I appreciate this way of looking at things may not appeal to all."
emacs,31g2jt,spwhitton,7,Tue Apr 7 03:55:15 2015 UTC,"The argument you're making is one that a lot of people are making now a days, which can be boiled down to ""This isn't my computer; it's my phone.""  It's one we all need to think carefully about. I use my phone almost as much as my computer, and I suspect a lot of people use their phones as much, or more often then their computer.  So then why do we trade in our ethics for convenience on this device? If it were just a phone, one could make that argument, but a smart phone today is far more than a simple telephony device- it's a full computer. In fact, I'd argue it's an even more dangerous one than the desktop in terms of needs related to security and privacy, because it keeps all your personal information, but with the added bonus of having the ability to track you and record your audio.  I'm not sure why Orgzly isn't Free Software. It doesn't make sense to me. It's gratis, so are they serving ads? Are they tracking the user?  The number of org-mode using people is quite small, so I can't think of a reason not to release the source code unless there's some ulterior motive involved that they don't want people to know about. I hope I'm wrong on this and they'll be able to show me that I was mistaken."
emacs,31g2jt,emacsen,4,Tue Apr 7 11:45:26 2015 UTC,"I'll see to update the FAQ entry (http://www.orgzly.com/help).  It's an obvious question and is often asked.  In short -- I'm still thinking what to do with the app.  It might be open sourced, made freemium at one point (with few non-essential features paid), or both.  I wrote it for myself -- it literally grew from Hello World while playing with Android and from my own need as someone who is using Org mode for (too) many things.  But I don't see Org mode users as the only ones using Orgzly.  You don't have to know what Org mode is to use it.  At least that's the goal, together with making it powerful enough for Org mode user to get some work done.  Anyway, I do work on cleaning up the code to get it to the point I'd be happy to release it, but this is not going to be any time soon and I don't want to make any promises there.  I know this is an issue for some people unfortunately.  I could list my reasons forever -- they are useless without the code released. :)"
emacs,31g2jt,nevenh,3,Tue Apr 7 18:50:41 2015 UTC,"You might want to take a look at how Osmand is doing it which is - as far as I understood:   Open source (including .apk released on their website (don't know which version), and available via f-droid as ""full"" version Somewhat restricted free version on google play Full version (against money) on google play."
emacs,31g2jt,radventil,2,Tue Apr 7 19:49:21 2015 UTC,"Thanks, it's kinda going into that direction."
emacs,31g2jt,nevenh,1 point,Wed Apr 8 11:11:24 2015 UTC,"Since plenty are willing to pay for an Open Source app, would it help to Kick start the first step of licencing?"
emacs,31g2jt,87ztg09iu,7,Mon Jun 8 09:30:39 2015 UTC,What I'd love from a mobile app is the ability to set custom alerts. All TODOs with a certain tag will remind me x minutes before the scheduled time or deadline. Are there any plans for some sort of feature like this?
emacs,31g2jt,uberyoshi,5,Sat Apr 4 21:13:14 2015 UTC,Good idea. Maybe it can be done by the calendar when calendar sync is available.
emacs,31g2jt,grabyourmotherskeys,2,Sun Apr 5 11:08:04 2015 UTC,"One thing I have been wanting to mention to you is that the basic timestamp is supposed to be used for appointments and reminders. You seem to just be using the Scheduled and Deadline time but the basic timestamp should be used as well and probably more often than Scheduled and Deadline.  Check this out (https://www.gnu.org/software/emacs/manual/html_node/org/Deadlines-and-scheduling.html#Deadlines-and-scheduling):  ""Important: Scheduling an item in Org mode should not be understood in the same way that we understand scheduling a meeting. Setting a date for a meeting is just a simple appointment, you should mark this entry with a simple plain timestamp, to get this item shown on the date where it applies. This is a frequent misunderstanding by Org users. In Org mode, scheduling means setting a date when you want to start working on an action item."""
emacs,31g2jt,rohboat,1 point,Tue Apr 7 00:46:53 2015 UTC,Thanks buddy.
emacs,31g2jt,sigma914,7,Tue Apr 7 19:49:57 2015 UTC,Any support for pgp?
emacs,31g2jt,rohboat,5,Sat Apr 4 21:51:23 2015 UTC,Not yet.
emacs,31g2jt,juliob45,3,Sun Apr 5 09:14:20 2015 UTC,If you do look into it: OpenKeychain seems to be the state of the art in android pgp implementations
emacs,31g2jt,rohboat,2,Mon Apr 6 10:18:02 2015 UTC,Cool maybe I'll see if I can work at getting it added. I'm liking this so far and will use it for my non encrypted notes.
emacs,31g2jt,eigengrau82,7,Sun Apr 5 10:03:13 2015 UTC,"Yeah, I'll only check this app out if it supports GnuPG.  No way I'm putting my notes on Dropbox without some encryption."
emacs,31g2jt,mcjohnalds45,1 point,Sat Apr 4 23:02:46 2015 UTC,Not sure why you got down voted. I agree. All my org notes are on Dropbox and encrypted.
emacs,31g2jt,mdaniel,9,Sun Apr 5 04:38:09 2015 UTC,"This sounds intriguing, but is there an .apk available or any other means of installation apart from Google play?"
emacs,31g2jt,aerique,3,Sat Apr 4 20:45:43 2015 UTC,Not yet.
emacs,31g2jt,mdaniel,2,Sun Apr 5 11:08:24 2015 UTC,"Out of curiosity, what's wrong with google play?"
emacs,31g2jt,nevenh,9,Sun Apr 5 00:53:33 2015 UTC,"Some folks can't, or won't, get a Google account which is required for the Play store. Another slightly more ""tin foil hat"" version is that one would want to audit any code that goes onto the most intimate electronic device one owns."
emacs,31g2jt,mdaniel,2,Sun Apr 5 06:36:39 2015 UTC,"Yes this, a seperate APK would be welcomed. I own an /r/jolla phone which can run Android but doesn't have Google Play installed."
emacs,31g2jt,wadcann,3,Sun Apr 5 17:00:45 2015 UTC,"I have been using apk-downloader in Chrome for a couple of weeks, and it has 99% done as advertised.  It is, however, unclear if one needs to provide a real Android device ID, or just an Android device id. If the former, one may experience some success firing up a CyanogenMod ROM in the Android emulator, but I haven't tried that in several months to be able to say whether it is a plausible theory or not.  I will say that while I'm not normally a suspicious person of Android apps, it is very strange that their website doesn't discuss payment and nor does it link to their github page (not that it would have mattered, but still). I've always heard that if you're not paying, then your eyeballs/data/etc are the payment."
emacs,31g2jt,tommiss,1 point,Sun Apr 5 17:57:10 2015 UTC,Both payment and the link to github (which is currently useless as you point out) are on http://www.orgzly.com/help which is linked from homepage.  Although I agree it's kinda hidden and should be more obvious.  I've just put a current release to http://www.orgzly.com/android/apks/orgzly-1.0.0.apk
emacs,31g2jt,ellakk,1 point,Tue Apr 7 17:29:24 2015 UTC,"As a followup, the dev of Raccoon has a self post in /r/Android talking about that the next version of Raccoon could have a device-id generator, where it would register a fake device with Play on your behalf. You might want to keep an eye on that project, and/or talk about your use cases to ensure they are covered."
emacs,31g2jt,grabyourmotherskeys,1 point,Mon Apr 6 16:25:16 2015 UTC,"If it's FOSS software, it can go on the F-Droid repository.  And, yes, I am one of the ""never signed into Google Play, no intention of doing so"" folks..."
emacs,31g2jt,its_never_lupus,5,Thu Apr 9 05:31:17 2015 UTC,Can I sync with owncloud?
emacs,31g2jt,grabyourmotherskeys,3,Sat Apr 4 20:34:54 2015 UTC,Yes with foldersync. It's a great two-way sync app that works with a ton of cloud storage providers.
emacs,31g2jt,87ztg09iu,2,Sun Apr 5 01:48:42 2015 UTC,Nice one. This lets me synch easily!
emacs,31g2jt,tommiss,2,Sun Apr 5 19:48:26 2015 UTC,foldersync is awesome! But how would you set it up with orgzly? I'm not sure which directory to sync to on the phone.
emacs,31g2jt,Imxset21,2,Mon Apr 6 21:10:49 2015 UTC,"Ultimately you need a directory on Dropbox that you point the app to. What I have done is pull down a read only copy of my org directory from my vps to a local directory on my phone with folder synch and then another folder synch ""folder pair"" moves that to Dropbox. I know I could just set up Dropbox on my vps but haven't bothered to yet (ran into some issues last time I tried it)."
emacs,31g2jt,tuhdo,1 point,Tue Apr 7 00:38:54 2015 UTC,Is there an Open Source alternative for FolderSync?
emacs,31g2jt,Freifall,-1,Mon Jun 8 09:25:27 2015 UTC,Non-free software   Could you not.
emacs,31g2jt,its_never_lupus,3,Sun Apr 5 13:10:48 2015 UTC,"It is planned, soon."
emacs,31g2jt,rhabarba,1 point,Sun Apr 5 11:08:41 2015 UTC,"Not yet; the developer is currently working on supporting other syncing protocols, e.g. SSH. Meanwhile only Dropbox works."
emacs,31g2jt,Imxset21,3,Sat Apr 4 21:04:15 2015 UTC,I hope this is going to be ported to iOS.
emacs,31g2jt,r2k9,3,Sun Apr 5 05:18:29 2015 UTC,"This is amazing, especially since I could never get mobile org to work."
emacs,31g2jt,delbosforo,2,Sun Apr 5 00:59:22 2015 UTC,"Are the notebooks stored as .org files normally, or only when you export? I'm wondering if the app can synchronise with a non-dropbox server but that would mean having a directory to sync with."
emacs,31g2jt,jcazevedo,1 point,Mon Apr 6 00:06:31 2015 UTC,"Soon it will be available to sync files, now you can import them."
emacs,31g2jt,shoobiedoo,4,Mon Apr 6 19:33:40 2015 UTC,How is this better than MobileOrg?
emacs,31g2jt,87ztg09iu,9,Sat Apr 4 20:04:14 2015 UTC,"At the moment, it doesn't have as many features as MobileOrg, such as sync clients other than Dropbox (though those are being added).  The UI is much, much better than MobileOrg, but that's mostly subjective."
emacs,31g2jt,Oulipopo,16,Sat Apr 4 21:07:57 2015 UTC,"MobileOrg is terrible. I just want to edit my org file, why all the complicated sync setup when Dropbox just does that by default?  Just edit the bloody file."
emacs,31g2jt,nevenh,2,Sun Apr 5 00:10:51 2015 UTC,"I do not really think that MobileOrg is for editing org files, but rather I reckon it is a mobile tool for editing and viewing org captures."
emacs,31g2jt,w0wt1p,1 point,Sun Apr 5 12:54:21 2015 UTC,I agree. I use MobileOrg mainly to clock in into tasks from my phone. I keep editing from MobileOrg to a minimum.
emacs,31i3zy,moshe222,9,Sun Apr 5 07:54:14 2015 UTC,C-h t
emacs,31i3zy,catern,2,Sun Apr 5 14:50:37 2015 UTC,Personlly I find the Emacs basics too much to be crammed into a short tutorial.   I think it would be better to start with Vim. There is much more documentation and community around to help you with it. Then swich to Emacs after a while. Or it would be too much to handle it.   I found this picture the best intro for beginners yet.
emacs,31i3zy,ReneFroger,7,Sun Apr 5 13:16:20 2015 UTC,"I disagree with this. Emacs basics are at least as simple as vim basics, and Emacs is a better teacher."
emacs,31i3zy,BruceConnor,5,Sun Apr 5 15:56:49 2015 UTC,"Actually, the cognitive burden of learning Vim at the begining was too much for me, so I switched to Emacs. If a new user (non-Vim) wants to quickly learn how to use Emacs, my guide can actually help them quickly. Someone in the comment said that he spent 3 hours to learn all the material there. Compared with Vim, I doubt an average user is gonna be productive in his first month."
emacs,31i3zy,tuhdo,2,Sun Apr 5 14:05:12 2015 UTC,"Feedback time: As a newbie, I find your tutorial overwhelming, so I still couldn't go through it even though it is on my list for months. Around the middle of the first part it suddenly starts to mention new modes and new shortcuts every 2 paragraph and this is where I get lost and quit (I tried 3 times.).  So yes, it looks like a very good material and thank you for that but it may not be suitable for newbies similar to me,  if not all."
emacs,31i3zy,anatolya,1 point,Sun Apr 5 14:47:30 2015 UTC,"Could you be more specific, at what middle of what first part? I think the concepts of those modes are very essential to be productive with Emacs. Sooner or later, you will need them."
emacs,31i3zy,tuhdo,1 point,Sun Apr 5 14:50:31 2015 UTC,"In the concepts section of part 1. It is too dense,  very fast paced and covers too much material (like a new function and keyboard shortcuts for that function every 2 lines - i made up the number but I'm trying to say it's so dense that it gets very easy to lose concentration)   I'm sure you are right that they are very essential to be productive but not essential to get started in the first place.   If that works for other newbies that's OK,  but it certainly hasn't worked for me.  As I said, it looks like a very good material and I still plan to go over all of them sometimes but I just wanted to inform you it may not be the perfect tutorial for everybody."
emacs,31i3zy,anatolya,2,Sun Apr 5 15:01:42 2015 UTC,"The key bindings are there, expecting for users to look at and play with it. If you only read it, then it will have little benefit. If a reader can't handle that, he will get even more overwhelm when read the actual Emacs manual, despite it being very well written."
emacs,31i3zy,tuhdo,2,Sun Apr 5 18:11:59 2015 UTC,"I disagree, vim (just like emacs) doesn't actually take that much time to learn, if you just want to be as productive as your original text editor. Maybe a week, at most. I learned it in a weekend. The thing about emacs and vim (at least in my experience) is that you first learn to use them as a regular text editor, and then you learn all the tricks and such to make you much faster than you could be in a ""normal"" text editor."
emacs,31i3zy,GBGamer117,2,Tue Apr 7 14:43:40 2015 UTC,I also disagree. To a beginners Emacs is just like Notepad except with different keys for copy and paste. Everything else can be learned gradually after that. Not so with Vi derivatives.
emacs,31i3zy,RobThorpe,1 point,Mon Apr 6 19:27:59 2015 UTC,Since I'm in favour of realism I want to start a website called http://learnxinsevenyears.com/ I don't think I'd get many hits though.
emacs,31i3zy,RobThorpe,1 point,Mon Apr 6 19:26:30 2015 UTC,It can really take a lot of time and practice to get use to an editor like emacs but learnxinyminutes is great because beginner can learn the basic shortcut and terminology and intermediate user can learn new tricks.
emacs,31i3zy,RobThorpe,1 point,Mon Apr 6 22:12:57 2015 UTC,"But, as ""catern"" mention above, they can get the same from the inbuilt tutorial and from the manual."
emacs,31huhe,instant_sunshine,1 point,Sun Apr 5 05:29:45 2015 UTC,"Have you considered the technique described here?  Based on Steve Purcell's feedback, they were able to accomplish what you were doing but without blowing away the help buffer.  Additionally, it works for font faces  http://blog.jenkster.com/2013/12/popup-help-in-emacs-lisp.html"
emacs,31huhe,cheezy64,1 point,Sun Apr 5 16:33:36 2015 UTC,Very nice.  I've been pointed to Steve's elisp-slime-nav which does the things I really need.
emacs,31huhe,bliow,1 point,Mon Apr 6 12:12:23 2015 UTC,"Unfortunately, this doesn't really DTRT when there is a function named the same as a variable. That can happen, and sometimes does happen."
emacs,31huhe,jivatmann,1 point,Sun Apr 5 18:14:55 2015 UTC,"This Package does this and even gives you the possibility to jump to the definition of the ""thing"" at point :  https://github.com/purcell/elisp-slime-nav"
emacs,31huhe,abo-abo,1 point,Sun Apr 5 22:53:24 2015 UTC,Nice
emacs,31f57c,z27,20,Sat Apr 4 14:15:03 2015 UTC,"Article's from 2008, for those wondering. I just checked and currently master is over 1.6 million lines.  edit: and almost 368,000 lines of C, up from 347,000 at the time of writing."
emacs,31f57c,bliow,9,Sat Apr 4 17:13:56 2015 UTC,Is it sentient yet?
emacs,31f57c,jberd,5,Sat Apr 4 18:14:24 2015 UTC,"not sure. sometimes cpu goes to 100% and I kill it before it ""wakes up"""
emacs,31f57c,benfitzg,3,Sat Apr 4 20:54:15 2015 UTC,"it's been pausing for me every couple of hours, as if to stop and think   is this all life is really about?"
emacs,31f57c,vermiculus,1 point,Sun Apr 5 00:05:18 2015 UTC,"That usually happens when you move around in dense text with a bunch CPU intersive minor modes. From my experience rainbow-mode, aggressive-indent-mode and indent-guide-mode should not be mixed, at least not if you're running emacs on a small 1,4 GHz dual core CPU like I do."
emacs,31f57c,DasEwigeLicht,3,Sun Apr 5 00:07:20 2015 UTC,Thanks for punting this out. On Hacker News and other sites it is customary to put the year after the title if it isn't current... I wish this was more widespread.
emacs,31fy24,skeeto,2,Sat Apr 4 18:39:41 2015 UTC,It's the first time I have heard of this and I still didn't understand what it's about. Is 49.91 the button status?
emacs,31fy24,kaushalmodi,2,Sat Apr 4 18:55:15 2015 UTC,"It started on April Fools Day. The game ends when the global timer hits 0. Any account created before April Fools can hit the big button to reset it to 60 seconds, but only once. It will be interesting to see how long before the game ends. That number ticks down live (ever 110ms) in the Emacs modeline."
emacs,31fy24,vermiculus,2,Sat Apr 4 18:57:11 2015 UTC,I love you.
emacs,31evqr,instant_sunshine,19,Sat Apr 4 12:13:11 2015 UTC,"We (the FSF) are having issues with the server that gnu.org is hosted on in our collocation facility.  The sysadmins are awake, aware, and working on it.  Apologies for the downtime."
emacs,31evqr,davexunit,18,Sat Apr 4 12:56:56 2015 UTC,"Meanwhile, thousands of emacs newcomers are forced to learn about C-h i"
emacs,31evqr,agumonkey,4,Sat Apr 4 14:37:22 2015 UTC,I learned something new today!
emacs,31evqr,elkano1003,3,Sat Apr 4 20:05:55 2015 UTC,Enjoy the very finite depth of Emacs and Elisp manuals.
emacs,31evqr,agumonkey,2,Sat Apr 4 20:12:25 2015 UTC,Also C-h r and C-h S
emacs,31evqr,RobThorpe,2,Sat Apr 4 22:38:32 2015 UTC,"No worries, I was concerned it might be a DDOS."
emacs,31evqr,borodino,1 point,Sun Apr 5 05:26:27 2015 UTC,Thanks for your work.
emacs,31evqr,marxistvegan_,15,Sat Apr 4 17:04:04 2015 UTC,we brought it back up ... thanks for your patience :)
emacs,31evqr,tampix77,4,Sat Apr 4 13:48:34 2015 UTC,Thank you for you hard work
emacs,31etri,AtticHacker,2,Sat Apr 4 11:41:09 2015 UTC,Hello! I wrote this small library and thought maybe worth sharing. I'm still a bit new to Elisp so if you have any suggestions on how to improve my code then please let me know! :)
emacs,31b5zv,wasamasa,3,Fri Apr 3 14:03:43 2015 UTC,"I don't need a module to do this. I do it to myself anyway. Today I made a mistake defining a keyboard macro, then I executed it with a repeat count of 400. It locked my Emacs up for about 15 minutes."
emacs,31b5zv,RobThorpe,2,Fri Apr 3 15:05:03 2015 UTC,"Oh my :D  Well, I also managed to lock up Emacs a good amount of times while writing this. General advice: Don't use sleep-for if you don't absolutely need it, sit-for is a pretty good alternative to briefly show a hint to someone."
emacs,31b5zv,wadcann,2,Fri Apr 3 15:12:01 2015 UTC,C-g?
emacs,31b5zv,RobThorpe,1 point,Sat Apr 4 08:03:07 2015 UTC,"I would have done that if I'd known I'd made a mistake. But I only realized that afterwards. When I did it I was thinking ""I must have something wrong with my init, that's why this macro is taking so long""."
emacs,31b5zv,jordonbiondo,2,Sat Apr 4 16:23:00 2015 UTC,"You should couple this with vs-emulation-mode, too many mistakes and you enable it for a time."
emacs,31b5zv,joequin,2,Fri Apr 3 15:11:51 2015 UTC,"Thanks, TIL that you can crash Emacs reliably with (funcall (make-byte-code nil (string-make-unibyte (make-string 100000 #o300)) [] 0)).  Perhaps I'll invent a fuzzer next to find out just how short crash-inducing bytecode sequences can be."
emacs,31b5zv,joequin,1 point,Fri Apr 3 15:25:37 2015 UTC,The last thing I would want is to make my editor less transparent. I want to think about the algorithm. The language and editor just get in the way.
emacs,319y4w,vermiculus,1 point,Fri Apr 3 04:20:33 2015 UTC,WIP screenshot: http://i.imgur.com/yaVOMhQ.png
emacs,319y4w,BruceConnor,3,Fri Apr 3 04:22:12 2015 UTC,"Wow, that syntax must have been a mess to font lock. Thanks for the effort Sean"
emacs,31755j,schlenderer,10,Thu Apr 2 15:02:12 2015 UTC,"I've updated this thing quite a bit.  Emacs Theme Creator now supports:   Random Colors from three different color palettes (warm, happy and soft). Buttons for Increasing / Decreasing of the color contrast. Store your selected colors for a later visit to localStorage. Preview your theme in Ruby, Python, Go, Haskell and Javascript. See previews of 5 different themes. The produced theme file from theme creator has support for org-mode, js2-mode, js3-mode, web-mode, helm, magit, mu4e, rainbow-delimiters, term, etc,  and is melpa ready!   Enjoy and Happy Theming!"
emacs,31755j,cestdiego,2,Thu Apr 2 15:11:47 2015 UTC,Thank you for this. I think there are people that may use this. But I would be sold if you had support for org and org faces. (kinda what leuven theme does) also Can someone import themes to your app? that'd be cool too. See Leuven theme is very cool but I'd love it if there was a darker version but I don't know how much work will that be. BWT I may be able to help you a little on this too later in the road. :)
emacs,31755j,cestdiego,1 point,Thu Apr 2 22:08:43 2015 UTC,"it does support org-mode. See themetemplate.txt, beggining on Line 83.  If you'd like to see a screenshot of a dark theme created with theme-creator, look at warm-night."
emacs,31755j,tmalsburg2,1 point,Fri Apr 3 08:46:11 2015 UTC,", your theme-editor looks great. I meant support for org mode kinda like leuven has ( for org-src-block)"
emacs,31755j,tmalsburg2,1 point,Mon Apr 6 01:06:46 2015 UTC,I'll look into it.
emacs,31755j,Huperprogeny,1 point,Mon Apr 6 06:46:42 2015 UTC,"Thank you.  Theme design is in fact much more difficult than it should be and and this really helps.  One question, though: wouldn't it have been more natural to implement the theme creator in Elisp?"
emacs,31755j,imLordYaYaYa,1 point,Thu Apr 2 18:09:49 2015 UTC,"wouldn't it have been more natural to implement the theme creator in Elisp?   Originally I wanted to do precisely this. However, Emacs support for widgets is rather limited, and I have absolutely no idea how you would implement any functioning way of previewing the theme you are implementing."
emacs,31755j,instant_sunshine,1 point,Thu Apr 2 18:24:10 2015 UTC,"There are already color pickers for Emacs that you could recycle.  If they don't suit your needs, it shouldn't be too hard to roll your own color picker.  For example you could display the RGB values in hex and use the + and - keys to increase the intensity of the component under the cursor (R, G, or B).  To preview the theme, you could either simply apply it, or you could have a buffer with sample text and text-overlays that use the new face definitions.  It may be a little more effort to make the latter approach work, but I suppose it would be a great learning experience.  A benefit of writing something like this in Emacs may be that you find more users and contributors."
emacs,31755j,instant_sunshine,2,Thu Apr 2 19:30:11 2015 UTC,"I followed all the directions and I get ""symbol's value as variable is void: key"" when I try to load the theme. Any ideas?  EDIT: Fixed it myself. The line  `(js3-warning-face ((,class (:underline ,key))))""   had the pertinent undefined variable. Changed it to key2 and it seems it's working fine."
emacs,316zp9,excitedaboutemacs,7,Thu Apr 2 14:19:29 2015 UTC,I think Evil should get very prominent placement. The vim refugee community needs representation.  Also org-mode is probably one of the best things about Emacs but has nothing pointing it out.
emacs,316zp9,alogghe,2,Thu Apr 2 18:24:31 2015 UTC,Could link to the org mode subreddit: /r/orgmode
emacs,316zp9,grabyourmotherskeys,4,Thu Apr 2 19:56:15 2015 UTC,That subreddit goes months with no posts or responses to good posts.  In general I think both orgmode and emacs reddits would be healthier in one.
emacs,316zp9,alogghe,3,Thu Apr 2 20:05:18 2015 UTC,I don't disagree but it does exist and has low membership. Pointing to it from the sidebar might increase membership and therefore participation. Merging it with this subreddit would make sense too and save me a few clicks. :)
emacs,316zp9,grabyourmotherskeys,1 point,Thu Apr 2 20:17:15 2015 UTC,"This subreddit is about the Emacs core (which may be wide given the number of built in extensions). Anyway, any larger subsystem should go into a separate subreddit, evil as much as org-mode."
emacs,316zp9,locbrean,5,Mon Apr 6 10:58:40 2015 UTC,I think it would be great to put a link to the manual in the sidebar.  Especially since many people use Debian these days which doesn't come with the manuals.
emacs,316zp9,RobThorpe,3,Thu Apr 2 15:38:57 2015 UTC,Also a link that describes the proper way to install Emacs in Debian based systems would be nice. Something along the lines of:   Here is the correct way to install Emacs on a Debian based system so you can have the manual and elisp files:   apt-get install emacs24 emacs24-common-non-dfsg emacs24-el
emacs,316zp9,anatolya,1 point,Thu Apr 2 20:37:44 2015 UTC,"I'd rather we don't tell people to use apt-get (or other package managers) to install elisp bundles. These are often outdated and inferior to what you'd get from package.el.  Just use apt-get to install Emacs, and let package.el handle the rest."
emacs,316zp9,BruceConnor,1 point,Sat Apr 4 00:47:01 2015 UTC,Can you elaborate on this?
emacs,316zp9,anatolya,1 point,Sat Apr 4 02:26:46 2015 UTC,"Sorry, I was under the impression that emacs24-el was a bundle of extra elisp packages. Upon further research it seems they are actually essential .el files?"
emacs,316zp9,BruceConnor,1 point,Sat Apr 4 09:33:22 2015 UTC,Yes.
emacs,316zp9,anatolya,7,Sat Apr 4 09:58:12 2015 UTC,"Meet Emacs link should be removed.  I know it is recommended a lot, but I watched it and it was a disappointment. It is old and there are newer & equally (if not) better tutorials available (for example, Venture into Emacs and .Emacs Tutorials)  edit: Being old would not automatically make it bad if it had teached vanilla Emacs, but it directly starts with emacs-starter-kit, which is not even maintained anymore. It's successor is emacs-starter-kit-24, but it's not the same as 2008 emacs-starter-kit, as it has 7 years worth of development, different packages and different defaults etc."
emacs,316zp9,anatolya,2,Thu Apr 2 20:27:41 2015 UTC,A few popular (by github stars) .emacs.d repos should be listed (top 5) to serve as examples.  There was a recent glut of org-mode babel inits which I think deserve some place here too.
emacs,314b56,tarsius_,15,Wed Apr 1 22:17:25 2015 UTC,"Thanks for all your hard work, Jonas!"
emacs,314b56,---R,2,Wed Apr 1 23:18:04 2015 UTC,Excited to try this!  For want of a better place to ask this question does anyone know how I can have my branch manager view sorted by most recently committed? Or even just a hook to order this view.
emacs,314b56,benfitzg,1 point,Thu Apr 2 01:02:50 2015 UTC,"Wow, that's a lot of effort!  Congratulations to Jonas and the rest of the team."
emacs,314b56,caboteria,1 point,Thu Apr 2 01:25:35 2015 UTC,Awesome :)  I've not long started using it and I'm very much a fan
emacs,314b56,swathe,1 point,Thu Apr 2 04:11:51 2015 UTC,"I'm using monky with Mercurial, but keep hearing how great magit is so I've been thinking about switching to Git and Magit. Can someone comment on which (killer) features you use in Magit that Monky doesn't support?"
emacs,314b56,bauta-steen,3,Thu Apr 2 05:16:08 2015 UTC,"magit is for git, so anything Mercurial is missing, monky is missing as well. You can compare the Magit manual with Monky manual and see which is missing. Intuitive UI. I learned a lot of Git by using Magit. You have a branch manager UI which makes manging branches child play. You can interact with almost everything; for example, when viewing git log, you can perform various action on a log entry, not just simply viewing.   EDIT: Updated the manual link."
emacs,314b56,tuhdo,1 point,Thu Apr 2 05:26:44 2015 UTC,"Thanks for the pointers, better branch management would be a nice feature. As far as I understand the basic feature set of git and mercurial is roughly the same though (but with slightly different commands and syntax) so monky and magit could potentially be the same tool, but maybe since git(hub) seems to have won the dvcs battle magit gets more attention."
emacs,314b56,bauta-steen,2,Thu Apr 2 06:08:41 2015 UTC,I love your punny name. Obelix would be proud. :)
emacs,314b56,srhb,1 point,Thu Apr 2 10:15:03 2015 UTC,I've just tested monky. I must say that the interface of Magit is much much better. You should give it a try and see for yourself. Just open magit-status and magit-log. You will see the difference.
emacs,314b56,tuhdo,2,Thu Apr 2 06:23:32 2015 UTC,"Yep, will try it out. Seems I can use git everywhere I use mercurial too (bitbucket and kiln)."
emacs,314b56,bauta-steen,3,Thu Apr 2 07:15:34 2015 UTC,The only reason I switched from Mercurial was because of Magit. I wonder if a git <-> hg command line translator would have saved me.
emacs,314b56,CodeJesus,1 point,Thu Apr 2 17:35:17 2015 UTC,Great job!
emacs,314b56,thomasfr,1 point,Thu Apr 2 14:39:13 2015 UTC,Magit is an awesome module for Emacs as well as git.
emacs,315u9i,AirmenNKorea,2,Thu Apr 2 05:37:27 2015 UTC,(global-set-key [triple-mouse-1] 'new-function)
emacs,3152ox,bauta-steen,5,Thu Apr 2 01:34:28 2015 UTC,"I found that using smex eliminates the need for any type of up/down history. It already orders based on most used, and I can get to the command I need with 3 characters or so."
emacs,3152ox,triogenes,6,Thu Apr 2 03:54:10 2015 UTC,Helm has that feature.
emacs,3152ox,DasEwigeLicht,2,Thu Apr 2 09:05:11 2015 UTC,Helm is awesome. I was hesitant to try it but glad I did!
emacs,3152ox,xenow,3,Thu Apr 2 15:01:20 2015 UTC,Use M-/ (short for M-x dabbrev-expand) to complete based on pattern matches.
emacs,3152ox,green_transistor,2,Thu Apr 2 12:06:23 2015 UTC,previous-complete-history-element
emacs,3152ox,politza,2,Thu Apr 2 14:22:34 2015 UTC,"Try this:   (define-key minibuffer-local-map (kbd ""<up>"") 'previous-complete-history-element) (define-key minibuffer-local-map (kbd ""<down>"") 'next-complete-history-element)   Then M-x your-command and up or down arrow once you've typed in a partial command. It will do what you want."
emacs,3152ox,redrick_schuhart,2,Thu Apr 2 15:03:55 2015 UTC,That's it. Thanks a bunch. Guess I should also try out the other emacsy ways.
emacs,3152ox,redrick_schuhart,1 point,Fri Apr 3 01:03:10 2015 UTC,Cool :)
emacs,311kpk,vibhavp01,25,Wed Apr 1 11:17:45 2015 UTC,I'm shocked this isn't an april fools joke.
emacs,311kpk,ryfow,5,Wed Apr 1 13:37:38 2015 UTC,20 years later
emacs,311kpk,fooflow,5,Wed Apr 1 16:18:35 2015 UTC,"I got this error:    Unable to create home directory in persistent storage: No such file or directory   EDIT: after waiting for a while, suddenly it starts now. Really nice to see Emacs in my browser with a single click."
emacs,311kpk,tuhdo,2,Wed Apr 1 12:21:30 2015 UTC,Wait a bit longer... emacs will appear eventually.
emacs,311kpk,LadenSwallow,1 point,Wed Apr 1 12:24:40 2015 UTC,Are you sure this isn't an April's fool joke?
emacs,311kpk,wrong_assumption,1 point,Wed Apr 1 19:08:58 2015 UTC,"Yes. The timing of the patches was wrong. For more details, see this: https://code.google.com/p/naclports/"
emacs,311kpk,grabyourmotherskeys,1 point,Wed Apr 1 20:15:55 2015 UTC,"Just a note about Chromebooks: I had to restart mine (maybe logging out would have been enough but a reboot takes seconds) after I set the flag - before I did that emacs was not loading.  BTW - this is great! It will be a while before I abandon SSH'ing into my VPS for emacs but once this has access to Drive or something to store files it will be incredible (I ""really need"" Helm, magit, etc - it does have org-mode, though!)."
emacs,311kpk,adouzzy,1 point,Wed Apr 1 21:43:32 2015 UTC,I still does a lot of downloading when I relaunch it. And it appears in a sandbox condition. But the future is bright!
emacs,311kpk,heikkilehva,3,Wed Apr 1 22:27:48 2015 UTC,Does not seem to working. Chrome Version 40.0.2214.111 (64-bit). The window shows this after pressing enter twice:  Loading NaCl module. undefined is not a functionundefined is not a function
emacs,311kpk,tuhdo,3,Wed Apr 1 12:33:00 2015 UTC,"As mentioned in the post, you must enable ""Native Client"" in ""about:flags"" and remember to restart your Chrome."
emacs,311kpk,heikkilehva,1 point,Wed Apr 1 12:34:21 2015 UTC,That's right: Forgot to restart Chrome.
emacs,311kpk,rgrau,3,Wed Apr 1 12:46:04 2015 UTC,"Although there's no ls, so you can't use dired, it's possible to m-x eshell whichs lets you move around the directory structure and 'ls' to investivate a bit what's around. :)"
emacs,311kpk,tuhdo,2,Wed Apr 1 15:06:44 2015 UTC,"Or, you can also enable ido-mode."
emacs,311kpk,laydros,3,Wed Apr 1 15:13:49 2015 UTC,"Oddly enough, it isn't an April Fools Joke. Currently people like running Chromebooks for development by SSHing to a server and running vim or emacs, but this would allow emacs to run natively, which certainly could have some benefits.  Emacs has a couple of things it handles differently in GUI mode that some people like, and running it locally means one less thing over your SSH tunnel, and the possibility to code while away from a connection. I don't feel like there is a lot of overlap between people that would want to do development on a chromebook and run emacs, but seeing this makes me at least interested, even if I might not every really do it."
emacs,311kpk,pxpxy,4,Wed Apr 1 20:12:59 2015 UTC,What are the implications of this? Can we look forward to a pretty atom-like emacs UI?
emacs,311kpk,tuhdo,14,Wed Apr 1 12:04:06 2015 UTC,"So one day you can use Google Drive and Emacs on the cloud! Quote from this presentation, p42:   Find a way to mount a cloud drive such as GDrive to chrome so we can open our .emacs file, and edit files. (as a first step, I can use local storage for a file system, but too limited.) Move to newlib to get pNaCl support. undo file property bypass when I can. Upstream the work back to GNU/FSF Build as a web page too, so you can run real emacs on a web site.   And probably one day I can write Reddit comments directly with my Emacs inside a browser."
emacs,311kpk,pxpxy,1 point,Wed Apr 1 12:39:27 2015 UTC,Thank you!
emacs,311kpk,progfu,1 point,Wed Apr 1 12:40:17 2015 UTC,And probably one day I can write Reddit comments directly with my browser.   You mean you're not using your browser to write reddit comments? Is there an emacs mod for that?
emacs,311kpk,tuhdo,2,Mon Apr 6 09:10:10 2015 UTC,"I meant, the browser that Emacs can manage directly."
emacs,311kpk,wadcann,3,Mon Apr 6 17:19:26 2015 UTC,"Well, it means that you can use emacs's native web browser, eww, to browse the Web."
emacs,311kpk,goodevilgenius,2,Thu Apr 2 06:54:43 2015 UTC,"So, plans to make this a Chrome app and add it to the Chrome Store? I don't want to run it as a web app, but to have it installed as a Chrome app would be great, especially if I ever get a Chromebook."
emacs,311kpk,goodevilgenius,4,Wed Apr 1 20:27:47 2015 UTC,"Yes, there are plans by the naclports folks (most of whom are in Google) to get an Emacs App on the Chrome Store: https://lists.gnu.org/archive/html/emacs-devel/2015-03/msg01028.html"
emacs,311kpk,gandalfgarry,3,Wed Apr 1 20:33:02 2015 UTC,"Wow, this is great. I didn't even know the naclports project existed. They've got a ton of stuff there."
emacs,311kpk,soonhokong,2,Wed Apr 1 20:42:06 2015 UTC,It is already in the store as part of the nacl dev environment package. You just need to enable the flag and you're good to go. Works fine on my chromebook.
emacs,311kpk,gandalfgarry,2,Sat Jun 20 18:13:54 2015 UTC,"Is there any way to access network from Emacs on Chrome? I wanted to install packages from gnu/melpa archives, but I only get error messages such as ""Failed to download `gnu' archive"".  Also, is there a way to enable 'persistent storage' to get rid of the initial error message ""Unable to create home directory in persistent storage""?"
emacs,311kpk,fallacybuffet,1 point,Sat Apr 4 04:20:44 2015 UTC,"Its a bug, which will be fixed soon. See here: https://groups.google.com/forum/#!topic/native-client-discuss/7Z08uNO6c50"
emacs,311kpk,javjar,1 point,Sat Jun 20 18:10:33 2015 UTC,"I'm on Debian 7 with Gnome 3, and I have no ""About"" menu.  Um, can anyone offer a suggestion?"
emacs,311kpk,Trevoke,1 point,Wed Apr 1 23:26:32 2015 UTC,"In the address bar type: ""about:flags""."
emacs,311kpk,gandalfgarry,1 point,Thu Apr 2 22:26:50 2015 UTC,"Your ""PS"" should be above the link ... :)"
emacs,311kpk,Erakko,1 point,Wed Apr 1 13:47:45 2015 UTC,"Its part of Google's NACL Dev Environment: https://chrome.google.com/webstore/detail/nacl-development-environm/aljpgkjeipgnmdpikaajmnepbcfkglfa  There is an inbuilt vim, too."
emacs,311kpk,Erakko,0,Sat Jun 20 18:09:37 2015 UTC,Is it possible to get this to Firefox? Since I think google is evil and I dont use their products?
emacs,311kpk,wasamasa,2,Thu Apr 2 06:10:05 2015 UTC,Use chromium (!= chrome). Firefox has no plans to implement a native client platform.
emacs,311kpk,ijustwantanfingname,-7,Thu Apr 2 06:38:16 2015 UTC,Why?
emacs,311kpk,skillet-thief,11,Wed Apr 1 12:22:25 2015 UTC,"The question is never ""Why?"", it's always ""How?""!"
emacs,312ge1,joeheyming,6,Wed Apr 1 15:38:55 2015 UTC,"Try C-M-x (in Emacs Lisp mode)    eval-defun - Evaluate the defun containing or after point, and print the value in the echo area (eval-defun).   http://www.gnu.org/software/emacs/manual/html_node/emacs/Lisp-Eval.html"
emacs,312ge1,kcin,3,Wed Apr 1 15:55:54 2015 UTC,See also eval-defun.
emacs,312ge1,___violet___,3,Wed Apr 1 15:54:07 2015 UTC,"Thanks, I didn't know"
emacs,312ge1,agumonkey,5,Wed Apr 1 15:59:18 2015 UTC,"We need to count how many times an Emacs user said that.  ps: note that it also works in python-mode (maybe other modes, but I didn't test there). pps: and a very large Kudos for actually fixing your problem."
emacs,312ge1,pangrametry,3,Wed Apr 1 21:17:49 2015 UTC,good 'ol M-x butterfly'
emacs,3113gf,ares623,3,Wed Apr 1 07:21:07 2015 UTC,"Very nice, always liked the Plan 9 colors. Does anyone know if the ledjer project used in one of the example screenshots is available somewhere? Google and github searches do not not give any result."
emacs,3113gf,mac,1 point,Wed Apr 1 08:17:38 2015 UTC,Thanks! Ah that's a personal project of mine. :) Just to learn Clojure and for fun. It was the only Clojure project I had at hand.
emacs,3113gf,mac,1 point,Wed Apr 1 08:32:23 2015 UTC,Ok. Would be cool to see it. I always found ledger and the Common Lisp version of it very interesting. The functional/immutable approach fits very well with the domain of transaction processing/financial systems.
emacs,310muy,swathe,4,Wed Apr 1 04:34:03 2015 UTC,"I also section up my init file.  If you do that you can use ""pages"" to navigate. At the end of each section on a line by itself put the character ^L. You can do this with C-q C-l.  Once you've done that the commands C-x [ and C-x ] will move up and down through the subsections. C-x C-p will mark the whole page."
emacs,310muy,RobThorpe,1 point,Wed Apr 1 09:36:19 2015 UTC,"Thanks for the tip mate, I'll add it to my list :)"
emacs,310muy,EatMoreCrisps,1 point,Wed Apr 1 12:06:13 2015 UTC,"(backquotes around your ^l will stop reddit superscripting it, and make it look more betterer)"
emacs,310muy,RobThorpe,1 point,Wed Apr 1 12:26:08 2015 UTC,"Thanks, fixed."
emacs,310muy,kaushalmodi,1 point,Wed Apr 1 13:03:02 2015 UTC,I was going to call on betterer and then I noticed there was more to it.
emacs,3111om,agumonkey,1 point,Wed Apr 1 06:59:54 2015 UTC,Better URL
emacs,30zqc0,excitedaboutemacs,2,Wed Apr 1 00:19:50 2015 UTC,"If you replace a binding with a chord, you could always unbind the original, or bind it to something reminding you to use chords.  I choose my chords based on how easy they are to hit without moving my hands in weird positions. I think the easiest chords are <space> combined with an easy to reach letter.  You can see all my chords in my init.el  just search the page for "":chords""  My favorite chords are ""<space> + i"" for previous-multiframe-window ""<space> + o"" for next-multiframe-window, and ""i + o"" for imenu-anywhere. I use helm-do-grep alot so I have it bound as ""g + h"" which is very easy to hit."
emacs,30zqc0,jordonbiondo,2,Wed Apr 1 15:11:28 2015 UTC,You should send a pull-request for the :chords mod.
emacs,30zqc0,kaushalmodi,1 point,Wed Apr 1 15:40:07 2015 UTC,"I've thought about it, but I would much rather there be a way to add arbitrary keywords to use-package, such that the :chords directive would be a supplemental package for use-package. I have begun working on it but it's not high on my todo list."
emacs,30zqc0,jordonbiondo,1 point,Wed Apr 1 15:54:41 2015 UTC,"I've had a lot of trouble with key chords because I type fast enough that regular typing will confuse them.   For instance, I thought that expand-region would be great to bind to er.  Turns out, er is used all the time in regular english, and so as I typed I would sometimes start creating and expanding a region. It got to be such a hassle that I had to undo it.    Be careful what chords you use."
emacs,30zqc0,the_whalerus,3,Wed Apr 1 01:01:14 2015 UTC,"Of course er would not be a very good choice; both re and er are heavily prevalent in English. Even if not English, think of regexp or region in elisp. A while back, John Cook listed key combinations that would be great key-chords. I have taken those and organized them in my key-chord config for future reference."
emacs,30zqc0,kaushalmodi,2,Wed Apr 1 02:04:33 2015 UTC,excellent work
emacs,30zqc0,spwhitton,2,Wed Apr 1 06:48:13 2015 UTC,"Great to have that data - it should be augmented with data from, say, github, so that key combinations that are common in code are ruled out too.  At least I assume there are some that don't show up in books.  I only use a few, but I've gone with q for most of them.  Q + j, k, l are pretty useful."
emacs,30zqc0,EatMoreCrisps,2,Wed Apr 1 12:58:43 2015 UTC,"I have a low timeout (e.g. mine is 0.012), and this isn't a problem for me unless input is lagging."
emacs,30zqc0,angelic_sedition,1 point,Wed Apr 1 15:07:11 2015 UTC,Have you customized the appropriate key-chord variables? I use  (setq key-chord-two-keys-delay .020      key-chord-one-key-delay .020)   I prefix most of mine with <space> and even rarely accidentally execute one due to the tiny wait period.
emacs,30zqc0,jordonbiondo,1 point,Wed Apr 1 14:58:46 2015 UTC,"Here are my key chord assignments. If they look weird by just reading the elisp, see how they are located on the keyboard and it will make sense. My favorite key-chord is ;' to call smex ( M-x on steroids).   The key chords should be easy to type BUT not be unintentionally triggered when typing text in your language or coding. The ease of remembering happens automatically by muscle memory as you start triggering the key chords more frequently (but only when you want to, not by mistake :))."
emacs,30zqc0,kaushalmodi,1 point,Wed Apr 1 02:13:27 2015 UTC,"I use fj for ace-jump-mode. I think this function really deserves a key-chord. Plus, it is so satisfying when there is only one match for the character you type, in which case you jump exactly to the place you want with just 3 chars."
emacs,30zqc0,gbalats,1 point,Fri Apr 3 12:47:40 2015 UTC,Totally agree. I am not that good with two handed key-chords and thus I bind l; for ace-jump-mode; just a quick tap at the right spot using the right hand :)
emacs,30zqc0,kaushalmodi,1 point,Fri Apr 3 13:05:15 2015 UTC,"Same as @tuhdo, I use smex in combination with flx-ido. I have been using this for more than a year (well, that's when I started managing my emacs config actively) and haven't found a reason to replace that yet.  From the discussion in parallel to this comment, you mentioned that you replaced smex with icomplete-mode (I would say that icomplete-mode is a much broader tool, doesn't compare to smex) and then you later ditched even icomplete-mode. Should I gather that you use the default execute-extended-command bound to M-x and use it with ido & Co.?"
emacs,30zqc0,kaushalmodi,1 point,Wed Apr 1 05:46:58 2015 UTC,"How is icomplete-mode better than smex + flx-ido? instead of typing ido-find-file, you only need to type iff. No way icomplete-mode can compete.  EDIT: in your configuration, you commented out icomplete-mode and said it ""old school"". So..."
emacs,30zqc0,tuhdo,2,Wed Apr 1 14:01:47 2015 UTC,I thought you ditched (= get rid of) smex for built-in icomplete-mode?
emacs,30yer0,holgerschurig,6,Tue Mar 31 18:39:21 2015 UTC,"I prefer to use helm-mini for this (I bind this to C-x b) and set these sources:  (setq helm-mini-default-sources '(helm-source-buffers-list                                   helm-source-recentf                                   helm-source-bookmarks                                   helm-source-buffer-not-found))   So that I can see buffers, recent files, and bookmarks from it all at once."
emacs,30yer0,thnetos,1 point,Tue Mar 31 19:40:51 2015 UTC,This helps a lot. Thanks :D
emacs,30yer0,excitedaboutemacs,2,Tue Mar 31 23:02:21 2015 UTC,"I find it a bit weird that I have to use the switch-buffer helm-equivalent top open a recently opened file.   I use a similar solution, so I think I know the reasoning behind that. If finding recent file is  combined with buffer switching then you never have to open any recent files, you always switch to buffers regardless if they are open or they were open recently.  So there is no need for two separate operations if the two can be done in one."
emacs,30yer0,kcin,1 point,Tue Mar 31 19:28:54 2015 UTC,"There's helm-recentf command if you want to use separately. Of course, you waste another key binding instead of a combined source."
emacs,30yer0,tuhdo,1 point,Tue Mar 31 18:43:11 2015 UTC,"I don't want them separately. That's exactly the point.  Opening (!) files via switch-buffer is not sensical in my mind. It mixes ""visiting already open things"" with ""open new things""."
emacs,30yer0,tuhdo,1 point,Fri Apr 3 08:20:14 2015 UTC,"If the buffers are not visible on the screen, does it matter between the invisible buffers and unopened files? You can think of unopened files as buffers with a longer load time. ido-switch-buffer also allows you to switch to recent files, except its uses it own list instead of recentf and calls these files ""virtual buffers"". Enable it by setting:   (setq ido-use-virtual-buffers t)   The idea of mixing buffers and recently opened files is for convenient. If you don't find something in buffer, you may not have to stop and switch to find file command. Instead, it's likely that the files you want are files you work on recently, so it makes sense to treat those files as ""buffers"".  If you want a command with just file lists, then use helm-for-files and remove helm-source-buffers-list from helm-for-files-preferred-list variable."
emacs,310phn,aport,1 point,Wed Apr 1 04:56:18 2015 UTC,Nice! Welcome to the elisp world. Now it will hard to escape...
emacs,310phn,rgrau,1 point,Wed Apr 1 09:26:08 2015 UTC,"I've never really looked at elisp, would this be much harder to write in python or bash? Or easier?"
emacs,30wq4b,abo-abo,1 point,Tue Mar 31 09:27:46 2015 UTC,It would be nice if Lispy can integrate with Projectile and parse the whole project tree instead of current directory.  You should also add another advantage is that Semantic can understand CLOS code and you can navigate up the tree using senator-go-to-up-reference or using cogre-uml-quick-class (not available in stock CEDET) to get a complete UML diagram of a class tree.
emacs,30wq4b,tuhdo,1 point,Tue Mar 31 09:42:04 2015 UTC,"It would be nice if Lispy can integrate with Projectile   I guess that you didn't bother to press g proj to discover that there already is lispy-goto-projectile bound to ogp. But it's very useless most of the time.   UML diagram of a class tree   Sounds like something someone would have to be heavily paid for to put up with. Since I'm in it only for the fun, I'll have none of that malarkey:)"
emacs,30wq4b,RobThorpe,1 point,Tue Mar 31 10:17:32 2015 UTC,How is this better than using a source-code tagging tool?
emacs,30wq4b,tuhdo,2,Tue Mar 31 11:06:11 2015 UTC,"You have an actual parser and it can do more than just collect things that match certain regexp (aka hack). An real language parser is more accurate because it understands the language. One example is Emacs Lisp code that uses Common Lisp CLOS. I can create an actual tree of which class inherits which class across files.  And CEDET can update the tags immediately after you finish entering new code, without regenerating the whole tag file."
emacs,30wq4b,agumonkey,2,Tue Mar 31 11:17:05 2015 UTC,"It's automatic, and your source code tagging tool can't do this.  CEDET knows more about the code structure, since it's based on the grammar and not on regexes. And then it gives me its data structures in Elisp, so I can hack on them further."
emacs,30wq4b,RobThorpe,1 point,Tue Mar 31 11:17:41 2015 UTC,Bringing the multiple dispatch of tagging.
emacs,30wq4b,RobThorpe,1 point,Tue Mar 31 11:58:05 2015 UTC,"Ok, that makes sense.  In what way is it ""bound to g""?"
emacs,30wq4b,RobThorpe,1 point,Tue Mar 31 13:20:41 2015 UTC,"You press g, and the command lispy-goto gets called. lispy-mode needs to be on and one of these options should hold:   the point is on an open paren the point is on an closing paren the point is on the comment start char the region is active"
emacs,30wq4b,RobThorpe,1 point,Tue Mar 31 13:46:57 2015 UTC,"Using Evil I presume. How does it work using normal Emacs keys? Or is it an Evil only thing?  If it uses ""g"" for normal Emacs too then how do you type ""g""?"
emacs,30wq4b,tuhdo,2,Tue Mar 31 15:37:10 2015 UTC,"No, I've never used evil. I tried to install it once, just to try it out, but I didn't like it.  I'm always using plain Emacs bindings (maybe slightly customized).   If it uses ""g"" for normal Emacs too then how do you type ""g""?   The point of LISP is that you don't want to type g( or )g. And with lispy-mode, you can't unless you use C-q.  g will always self-insert, except when the point is special, i.e. right on the open paren or right after a close paren."
emacs,30wq4b,RobThorpe,0,Tue Mar 31 16:16:48 2015 UTC,"Ah, I see what you mean now. I'm still not convinced it's a good idea.  Really this is a new way of defining keys that you've unified with your mode. Perhaps you should make that a separate library so people can use it for other things."
emacs,30wq4b,tuhdo,1 point,Tue Mar 31 16:24:07 2015 UTC,"It only makes sense for LISP because of the homogeneous structure that it has.  It can also sort of work in org-mode, but with a lot less success."
emacs,30wq4b,RobThorpe,1 point,Tue Mar 31 16:42:10 2015 UTC,"I see what you mean about it only working with Lisp. What I mean is that it could be used for other functions while in a lisp mode.  A similar feature was discussed on help-gnu-emacs a few months ago. Someone pointed out that in almost any language you never deliberately type something like kkkk or ppp, so those kind of things could be used to activate commands.  For example, the abbrev infrastructure could trigger commands.  Someone did this, but it was a bit of a hack."
emacs,30wq4b,tuhdo,1 point,Tue Mar 31 18:52:00 2015 UTC,"The Lisp movement is automatically activated upon meeting the above conditions. No mode switching is needed. So, when you use C-f or C-M-u or whatever to move point on a parenthesis, you can start using Lispy navigation key immediately."
emacs,30wq4b,syl20bnr,1 point,Tue Mar 31 16:03:29 2015 UTC,"So, if point is on a parenthesis then the meaning of keys changes? That sounds like a mode switch to me and not one I'd want. When I write lisp I often close the parens first and then write with a bunch of them on the right of point."
emacs,30wq4b,hvis,1 point,Tue Mar 31 16:19:13 2015 UTC,"If you close parens manually, it does not affect. For example, if you want to close this paren (, you have to move point next to it, not on it. Or, you can use autopair or even better, smartparens to auto close it.  I like automatic solutions, so it can free me from menial editing tasks. The less we have to worry about editing, the better it is. Lispy can automatically switch modes based on context, so it reduces the usage of C-M-f or C-M-b... without resorting to manual mode switching like Evil/Vim."
emacs,30wq4b,hvis,1 point,Tue Mar 31 16:28:17 2015 UTC,"I see what you mean. And, yes, I use autopair. I might give this a try the next time I have some lisp to write. If I have to watch what I'm doing all the time as syl20bnr says it probably won't work well."
emacs,30wq4b,hvis,1 point,Tue Mar 31 18:47:51 2015 UTC,"Actually the idea is not that bad. If you use Org, do you know it has an option org-use-speed-commands? Basically, when enabled and when point is at beginning of line, you can press n and p and other single key presses to navigate the Org outline, so saving yourself from repeatedly pressing C-c C-n and C-c C-p."
emacs,30wppg,benmaughan,1 point,Tue Mar 31 09:21:23 2015 UTC,"Corrections, comments and suggestions for new tips are very welcolme!"
emacs,30vw71,redguardtoo,1 point,Tue Mar 31 03:11:15 2015 UTC,"It's a good idea. I think his ""try"" function would be much simpler if he used ispell-complete-word though."
emacs,30vw71,RobThorpe,2,Tue Mar 31 21:52:59 2015 UTC,"I'm not sure ispell-complete-word will help after reading its code. It tried to read the prefix of word by itself. so might confict with hippie expand's similar functionality.  hippie expand related code is copied from emacswiki. I actually don't fully understand the code. I guess it's some glue thing required by hippie-expand.  anyway, the point of my post is,writting a completioin by dictionary plugin is really easy:   you need know only one API ispell-lookup-words and one global variable ispell-alternate-dictionary some elisp techniques like lazy loading of ispell and respecting the orginal dicionary is also demoed"
emacs,30vw71,RobThorpe,1 point,Wed Apr 1 05:08:08 2015 UTC,"You're right. It would be useful if you contributed the code to Emacs so it could live in hippie-exp.el and using it would be as simple as adding the ""try"" function to hippie-expand-try-functions-list."
emacs,30tazk,bhrgunatha,5,Mon Mar 30 15:17:04 2015 UTC,"Brilliant idea, thanks for blogging about it.  This got me to investigate toggle-debug-on-quit too, just because. And I learned how to :   step through interactive functions showing locals overriding return values   Fun times."
emacs,30tazk,agumonkey,4,Mon Mar 30 16:12:22 2015 UTC,This looks really useful - in particular if you're adopting part of someone else's configurations.
emacs,30s6ex,ThrowawayTartan,7,Mon Mar 30 06:32:59 2015 UTC,"emacs --daemon starts the server, emacsclient is an executable to talk with that server.  You can do numerous things with it, including silently evaluating elisp in the context of the server process, opening a new frame to work on and opening files inside existing frames.  A possible usecase for this would be improved browser editor integration.  If you set up your browser to open an emacsclient frame, not only are you able to get an editor open fast, you will also have access to an already opened Emacs session and can check up on already open buffers while editing the text that will go back to the browser."
emacs,30s6ex,wasamasa,1 point,Mon Mar 30 06:49:22 2015 UTC,What exactly is an Emacs server?
emacs,30s6ex,TanAndBlonde,1 point,Mon Mar 30 21:33:25 2015 UTC,You can start the server in a normal Emacs by evaluating (server-start). On GTK+ builds of Emacs the daemon doesn't work properly so you have to work this way.
emacs,30s6ex,RobThorpe,2,Mon Mar 30 09:38:05 2015 UTC,How exactly does this solve the GTK server crash bug on closing? This reads to me as a workaround to not seeing the GTK warning.
emacs,30s6ex,wasamasa,1 point,Mon Mar 30 12:00:47 2015 UTC,"It doesn't, it's just about the warning as you say."
emacs,30s6ex,RobThorpe,5,Mon Mar 30 12:17:22 2015 UTC,"It means that the core of Emacs is always loaded/running and you can close your ""main window"" and restart it easily and quickly.  In short it is the difference between opening a new window of the existing program and waiting several seconds for your (huge) ~/.emacs file to be read and processed.  I run it because I'm sat at my Linux desktop and alternate between emacs, browser, and terminal all day long.  I don't want to waste time on re-opening emacs during the day I want it to open quickly.  (Yes in an ideal world I'd never close it, but sometimes you do.)"
emacs,30s6ex,chocolate_bread,3,Mon Mar 30 07:42:44 2015 UTC,"It's nice having a single running emacs process that has all of your open buffers, irc channels, newsgroups, mail, what have you ready to go.  Emacs daemon separates all that 'state' from any particular emacs frame or terminal session.  The 'emacs' icon in my launcher is really just a shell script that runs emacsclient -c -n which pops open a new emacs frame.  Since emacs is already running in daemon mode when I login these frames come up instantly.  On GNU/Linux or other *nix-type systems you can do another trick which is to open emacs in a terminal while you have it open in X.  Some time ago I aliases vi and vim to 'emacsclient -t -n' so whenever I was in the terminal and wanted to edit a file really quick now it too just opens it up in an emacs frame.  I also have another alias that handles the 'sudo and then edit' use case in the same manner (basically by having emacsclient evaluate some simple elisp that uses tramp to open the root owned file).    And when I'm done for the moment and want to do Something Else then I can just close all the frames so it seems like emacs is closed but its just there in the background, gnus daemon checking mail every 30 minutes, circe filling up irc buffers, my files and state waiting for me to get back to it.  You can largely get the same behavior by starting the emacs server but this requires at least one emacs frame to always be open.  If that doesn't bother you then by all means use that.  For others like me, emacs daemon is the best thing ever."
emacs,30s6ex,orpheanjmp,1 point,Mon Mar 30 22:31:11 2015 UTC,"I use the server and emacsclient pair for making Emacs respond to mailto: links [1]. The main feature is thus being able to command emacs from other programs, scripts etc.  [1] https://github.com/cadadr/emacs.d/blob/f2e1eeb8278a97f435984493b5e3743b60db12b7/extras/mailto.sh, https://github.com/cadadr/emacs.d/blob/master/email.el#L25"
emacs,30s6ex,delbosforo,1 point,Mon Mar 30 10:28:54 2015 UTC,"If Im using a a CShell, what should I run to create a new window of an existing server?"
emacs,30s6ex,excitedaboutemacs,1 point,Mon Mar 30 20:38:12 2015 UTC,"It really has nothing to do with whatever shell you happen to be using.  You just call 'emacsclient' with some arguments to create a new frame in your existing emacs session. Recipes below:  Open new blank emacs gui  frame: emacsclient -c -n Open file in new emacs gui frame: emacsclient -c -n myfile.foo Open new blank non-gui emacs frame (ie, stay in the terminal): emacsclient -t -n Open file in new non-gui emacs frame: emacsclient -t -n myfile.foo To sudo-open-and-edit a file alias the following however your shell likes to do that: SUDO_EDITOR=""emacsclient -t"" sudoedit"
emacs,30s6ex,orpheanjmp,1 point,Mon Mar 30 22:38:56 2015 UTC,Thanks so much!!
emacs,30s6ex,excitedaboutemacs,-7,Mon Mar 30 23:35:00 2015 UTC,Install ergoemacs mode and you tell me why server mode is needed
emacs,30s6ex,anatolya,1 point,Mon Mar 30 12:21:26 2015 UTC,I actually would like to know how this answers the question.
emacs,30s6ex,vermiculus,-4,Mon Mar 30 13:07:06 2015 UTC,"It starts in 45 seconds or so, and you don't want to wait 45 seconds every time you open emacs.  Are you enlightened now?"
emacs,30s6ex,anatolya,2,Mon Mar 30 13:14:48 2015 UTC,"bahaha -- well, i suppose there is a lot of 'configuration' it does. that's an absurdly long init time."
emacs,30s6ex,vermiculus,0,Mon Mar 30 14:02:21 2015 UTC,"yeah, dunno what the heck it does but I'm sure it is more than changing some key mappings."
emacs,30s6ex,anatolya,1 point,Mon Mar 30 14:55:26 2015 UTC,I wouldn't be surprised if Xah has it automatically check for updates.
emacs,30u2nj,DOUBLEXTREMEVIL,2,Mon Mar 30 18:45:01 2015 UTC,"An issue is that taglib doesn't have good support for this field in released versions.  I tried to add it at some point, but it seems for e.g. wma you can only get album artist easily with the development version of taglib.  The manual suggest you to pick it up from the folder name.   Here's the code I use.  (defun emms-browser-get-track-field-simple* (track type)   ""use album artist if possible.""   (if (not (eq type 'info-artist))       (emms-browser-get-track-field-simple track type)     ;; info-artist, this really needs to be fixed upstream...     (or (emms-track-get track 'info-album-artist)          (replace-regexp-in-string ""^/.*?/music/\\(.*?\\)/.*$"" ""\\1""                                    (emms-track-get track 'name))          (emms-track-get track 'info-artist ""misc""))))  (setq emms-browser-get-track-field-function       'emms-browser-get-track-field-simple*)   It seems I use a modified emms-print-metadata.  I'll see if I can find the source."
emacs,30u2nj,---R,1 point,Wed Apr 1 00:12:09 2015 UTC,"that'd be great if you could. I added what you wrote, but it resulted in this mess."
emacs,30u2nj,---R,1 point,Wed Apr 1 08:08:32 2015 UTC,"You'll have to figure out which line is incompatible.  Use edebug-defun on the function on run whatever 'causes the bug and figure out which line fåks your machine up.  Note that you'll have to fix the regexp to match the dir hierarchy!  If you can point me to a good library or cli program to get album artist across multiple file types and preferably systems I can try to implement a proper solution. I think exiftool could be a solution, but I don't know if it's available outside of GNU/Linux..."
emacs,30ok3o,bozhidarb,4,Sun Mar 29 07:30:41 2015 UTC,"I'm still a bit confused about what Projectile and Helm do the same or where they differ.  If someone could explain them, I would be very appreciative."
emacs,30ok3o,statmobile,5,Sun Mar 29 21:10:56 2015 UTC,"Projectile helps manage and operate on projects. Where as regular emacs (such as M-x grep) works on files, projectile provides commands that operate on entire projects at a time.   Helm is a completion system, an alternative to M-x, ido and the like.  You can use both together: you can select a project to work on using the helm interface. And then open a file in that project through helm. Or you can just use projectile to work on and manipulate a project without using helm at all. Or you can use just helm to get various file completions but no support for projects."
emacs,30ok3o,AnAirMagic,1 point,Sun Mar 29 21:20:28 2015 UTC,"Thank you, I guess I'm not familiar with ido, so I'm not sure about how to use help with projectile, I use projectile to find routines in SciPy, etc."
emacs,30ok3o,statmobile,6,Sun Mar 29 22:43:06 2015 UTC,"Projectile gives you a convenient way to perform operations on files grouped together as a project. For example, no matter what file in that project you are currently looking at in the active window, you can search for strings (using grep, ack, or ag) across the whole project without changing your context to the project's root. You can also launch the best available source control interface for that project (VC or Magit). You can switch between a source file and its unit test file with one command.  Helm — I just went through the exercise of learning it and setting it up. My motivation was the relative awkwardness of opening files in a large project. Projectile helps a lot here, but the ido-find-file interface bogs down with many matches, especially with similar-looking file names. Helm is a fast generic matcher. You can hook it deeply into Emacs, but I just hooked it into Projectile. Now, whenever Projectile wants to give me some choices — files or buffers — it uses the Helm completion system. It's quite fast and a bit more convenient than the ido interface for presenting many choices.  Time will tell if I stick with it, but persp-mode and Projectile have been life-savers for me. Helm might just be another helpful tool here."
emacs,30ok3o,gepardcv,2,Sun Mar 29 22:06:24 2015 UTC,"You can customize projectile-completion-system to select either ido or helm or ivy or grizzl.  I like ivy the most since I wrote it. It's similar to a vertical ido, but without the silly cycling (where the current candidate is always on the first line, and going up or down just cycles endlessly)."
emacs,30ok3o,abo-abo,1 point,Mon Mar 30 16:28:30 2015 UTC,"Thank you, I didn't know that you could jump to unit tests, that's a great feature.  I already use projectile to grep for source code in large projects such as SciPy, etc., it would be great to jump to their unit tests so as to see how I should construct my own.  I like your idea of hooking helm in to projectile, I believe that's what I see in a lot of screencasts where the person just starts typing something out and you see all the potential matches.  I'll have to look into it in the future."
emacs,30ok3o,statmobile,3,Sun Mar 29 22:46:50 2015 UTC,You can see how both are relevant in my Helm Projectile guide. There are demo screenshots.
emacs,30ok3o,tuhdo,5,Mon Mar 30 02:42:26 2015 UTC,Sad to see the maintainer struggling to keep up with issues.  Running an open-source project on your own can be sort of demanding.
emacs,30ok3o,trezor2,2,Sun Mar 29 19:09:20 2015 UTC,"Does anyone knows what package is he using for the line numbers, as seen here ? I'd like to display those but it seemed heavy when I once tried."
emacs,30ok3o,TheFrenchPoulp,1 point,Mon Mar 30 10:24:10 2015 UTC,It's linum-mode (built-in) with small fringe width.
emacs,30pqz2,ThrowawayTartan,4,Sun Mar 29 17:18:03 2015 UTC,You can use a ~/.ssh/config to make your life easier:  Host schooldog     User username     HostName unix.schooldog.schoolname.edu   On the remote machine create a symlink in your home to the target path and now you should be able to access the remote via the much shorter name:  cd ~ ln -s /path/path/path shortpath   You should then be able to do:  C-x C-f /schooldog:shortpath/...
emacs,30pqz2,shassard,1 point,Sun Mar 29 18:58:17 2015 UTC,"Hey there! Thank you so much. Quick question: would I need to specify the file name in my path? What if I just want it to get to a directory with a bunch of files that I want to edit?  So when I've ssh'd in, I want to go from home-> SpecificClass -> Homeworks -> CurrentAssignment  also could you elaborate slightly on what the ln does? I do it on the machine I ssh'd into so how does my local computer know about it? also what does the -s do? I've tried googling it but haven't had much luck. Google seems to ignore flags :p"
emacs,30pqz2,shassard,1 point,Sun Mar 29 20:04:30 2015 UTC,"'ln' creates a link on the filesystem to a file or path (think a short-cut). The ""-s"" switch creates a symbolic link using the name of the file on the filesystem rather than specific file record on the disk.  You'll want to do this after you've ssh'd into the target machine at your school."
emacs,30pqz2,bliow,1 point,Sun Mar 29 20:19:02 2015 UTC,Hmm I guess I'm a noob but when I do the above it doesn't actually take me to the directory or the file (i've tried both) it just tells me that it's linked or something and shows me a blank screen. I might need to try something else. Thank you very much for the effort though! I really appreciate it.
emacs,30pqz2,EatMoreCrisps,1 point,Sun Mar 29 20:30:40 2015 UTC,"When you use 'ln -s', that's al you're doing: creating a link.  If I do ln -s /long/filepath/ short_name then I can cd short_name instead of cd /long/filepath. Similarly with emacs."
emacs,30pqz2,adouzzy,1 point,Sun Mar 29 22:43:56 2015 UTC,"What if I just want it to get to a directory with a bunch of files that I want to edit?   Bookmarks can be useful.     C-x r m - set a bookmark C-x r b - jump to a bookmark C-x r l - list bookmarks   Make a bookmark for a key directory, then you can always jump there and move on."
emacs,30pqz2,thelonereaper55,5,Mon Mar 30 12:41:11 2015 UTC,"Nothing beats local. I set up target remote directory with http://www.emacswiki.org/emacs/DirectoryVariables then write a function use async.el to call rsync save current file both locally and remotely.  SSH control master is highly recommended for a smooth rsync experience.  I used to use sshfs, tramp. Current approach is clearly a winner."
emacs,30pqz2,adouzzy,1 point,Mon Mar 30 03:08:19 2015 UTC,"Can you share your function?  Should I put the function as a local variable of the file, so it will save the file everytime I save the file?   Thanks!"
emacs,30pqz2,drstevoooo,1 point,Thu Apr 9 05:35:20 2015 UTC,"save the filename as .dir-locals.el in the project root directory.  ((nil . ((my-psync-command . ""rsync -aPv"")               (my-psync-remote-dir . ""ServerName:ProjectRootDirectory/"") )))  Then this function is in my init, it uses some projectile variables:  (defun my-psync ()   (interactive)   (if (boundp (and 'my-psync-command 'my-psync-remote-dir))       (progn          (setq my-psync-local-filename (s-chop-prefix (projectile-project-root) (buffer-file-name)))         (save-buffer)         (shell-command           (concat my-psync-command "" "" (buffer-file-name) "" "" (concat my-psync-remote-dir my-psync-local-filename))          )         (message (concat ""pSync: "" my-psync-local-filename "" delievered to "" my-psync-remote-dir))         )     (message ""pSync: Config variable is not defined!"")     )   )  It saves the buffer, than rsync to the remote folder. If you have ssh control master, it is lightening fast. All you need to do this call this function when you want to save the file. Hope you like it.  PS: My lisp is very bad, but it does the job. I have another version uses async, and do the sync at the background."
emacs,30pqz2,RobThorpe,2,Thu Apr 16 03:17:57 2015 UTC,Use an Emacs bookmark for remote locations that you use regularly.  Combine with ido-mode and ido-ubiquitous-mode for super-fast completion of both the bookmark name and path names.
emacs,30pqz2,DPaluche,2,Sun Mar 29 18:49:06 2015 UTC,"You can also bookmark remote directories in dired, as far as I can remember I haven't used the feature in ages."
emacs,30pqz2,shobble,1 point,Sun Mar 29 21:54:15 2015 UTC,"I have a server set up that I use to store my org-mode notes, and I recently switched to using Emacs bookmarks to access them more quickly. It's super simple:   Open the file the way you usually do. Create the bookmark. C-x r m, enter a name for the bookmark, RET Then you can open a list of your bookmarks with C-x r l and open one with RET."
emacs,30pqz2,shobble,1 point,Mon Mar 30 02:35:10 2015 UTC,"you can fix the user@host stuff by putting an appropriate entry into your ~/.ssh/config file, something like:  Host someuni* HostName some.long.hostname.example.com User meep   I also have a couple of keybindings in my .emacs along the lines of:    (define-key ido-file-dir-completion-map (kbd ""C-c r a"") (lambda () (interactive) (ido-set-current-directory ""/ssh:someuni:/home/shabble/"") (ido-reread-directory)))   which are defined in a function called by (add-hook 'ido-minibuffer-setup-hook 'shab/setup-ido-fileish-keys t)  Then you can just C-x C-f C-c r a to jump straight to the full path specified in the binding. It's not all that generalised, but I have a bunch of other ones that point at places that I need on a regular basis, and it works pretty well."
emacs,30q8z7,xpressrazor,5,Sun Mar 29 19:46:29 2015 UTC,"You probably have several pairing modes enabled at the same time.  Disable AutoPair, just use electric-pair-mode."
emacs,30q8z7,hvis,2,Sun Mar 29 19:52:38 2015 UTC,That worked. Thanks.
emacs,30q8z7,instant_sunshine,3,Sun Mar 29 20:04:06 2015 UTC,"Also, for a good parens mode, try Smartparens, it has many excellent features.  https://github.com/Fuco1/smartparens  a couple of outdated videos, https://www.youtube.com/watch?v=ykjRUr7FgoI - https://www.youtube.com/watch?v=efSvfqf3Ykw ...   The Wiki is the best place to find out about the features, there are a lot.  Smartparens also provides features like paredit, but also handles non-lisp languages too. (Using what Fuco1 calls hybrid-sexps)  https://github.com/Fuco1/smartparens/wiki"
emacs,30q8z7,chrispoole,1 point,Mon Mar 30 16:32:03 2015 UTC,"I'm currently a paredit user: have been for years.  Do you consider smartparens mode a replacement? (Only considering elisp buffers.)  The creation and nice handing of the ending paren is nice, but can if do all the tree-style navigation stuff?"
emacs,30q8z7,instant_sunshine,2,Fri Apr 3 11:06:13 2015 UTC,"Unfortunately I only used paredit for a short time, so my comparison with Smartparens is not so useful.  I would be interested in doing a better study, and seeing how it comes out.  I can say my understanding is that Fuco always intended Smartparens to be a superset of Paredit.  AFAIK he succeeded, but only because I've never known this to be refuted.  I can only suggest you browse the wiki to see if the features you expect are there.  Fuco is the guy to ask for details."
emacs,30q8z7,chrispoole,1 point,Fri Apr 3 11:13:06 2015 UTC,Cheers. I'll take a look.
emacs,30ncjq,perdericklhapley,3,Sat Mar 28 23:34:08 2015 UTC,"M-p and M-n are reserved for major mode commands, so your suggestion would conflict with a lot of existing mode maps."
emacs,30ncjq,RobThorpe,1 point,Sun Mar 29 08:30:15 2015 UTC,Fair enough. How about M-P and M-N?  Any similar suggestions (which don't use the mouse)?
emacs,30ncjq,vifon,4,Sun Mar 29 20:01:05 2015 UTC,"AFAIK those aren't available on terminals. Terminals can't distinguish the case of modified keys, e.g. C-a/C-A and M-a/M-A.  It's a good idea for a personal config though."
emacs,30ncjq,holgerschurig,3,Sun Mar 29 20:40:16 2015 UTC,Actually the M-... bindings can differentiate between the uppercase and lowercase characters. This limitation only affects the C-... bindings due to being represented by a single keycode.
emacs,30ncjq,RobThorpe,1 point,Wed Apr 1 15:28:05 2015 UTC,"It's the year 2015, I would completely ignore terminals by now."
emacs,30ncjq,holgerschurig,2,Mon Mar 30 14:25:19 2015 UTC,"So would I, the only thing they're useful for now is connecting to remote machines, in that case a few keybinding not working isn't the end of the world.  Usually TRAMP is better for that case anyway.  But many people don't agree.  I've noticed that lots of people who are moving to Emacs from othe editors, such as Vim use terminals. I think people think of them as the tool ""Real Programmers"" use."
emacs,30ncjq,Drone30389,1 point,Mon Mar 30 15:40:45 2015 UTC,"Really, you mean terminals?  Things like a real VT100?  Those bulky 80x25 things with a annoying refresh rate?  Or do you just mean the Linux text console with ""use terminals"" ?  Because in this case you have access to much more keyboard things, even to all the Linux input subsystem events if you need them."
emacs,30ncjq,adouzzy,2,Tue Mar 31 16:31:12 2015 UTC,"I think those just translate to the same...  C-h k M-N => M-n (translated from M-N) runs the command...   Specially for scroll-up/down-line? Not sure. I tend to scroll with the cursor, so (setq scroll-conservatively 101) is more helpful to me.  Combinations of M-r C-n C-p and C-l might also be helpful."
emacs,30ncjq,adouzzy,2,Mon Mar 30 01:04:07 2015 UTC,"If a shifted-key has no keybind then emacs translates that keybind to the unshifted-key, but if you set a keybind for the shifted-key then it handles the shifted-key and unshifted-key individually."
emacs,30ncjq,sabof,2,Wed Apr 1 07:35:46 2015 UTC,TIL
emacs,30ncjq,bakuretsu,1 point,Wed Apr 1 07:37:43 2015 UTC,"Btw, touchpad scrolling is terrible on mac. Anybody have a fix?"
emacs,30ncjq,nivekuil,1 point,Sun Mar 29 10:33:23 2015 UTC,You might want something like...  (setq mouse-wheel-progressive-speed nil       mouse-wheel-scroll-amount '(1 ((shift) . 5))       scroll-conservatively 101)
emacs,30lzxq,excitedaboutemacs,8,Sat Mar 28 16:31:10 2015 UTC,Don't use switch-to-buffer. Use helm-mini or helm-buffers-list to switch buffer. You won't see random Helm buffers again. Those buffers are needed for later resuming a Helm command in its previous session.
emacs,30lzxq,tuhdo,4,Sat Mar 28 17:05:36 2015 UTC,You should ignore them instead: http://scottfrazersblog.blogspot.hu/2010/01/emacs-filtered-buffer-switching.html
emacs,30lzxq,kcin,3,Sat Mar 28 17:11:56 2015 UTC,TempbufMode
emacs,30lzxq,diesch,2,Sat Mar 28 16:40:18 2015 UTC,"with ibuffer, you can mark and kill them all with * s D y"
emacs,30lzxq,shobble,1 point,Sun Mar 29 07:00:12 2015 UTC,"I also find this mildly annoying. When switching to other buffers, I find myself wading through tons of Helm/Help/other buffers."
emacs,30lzxq,mkaito,6,Sat Mar 28 16:38:29 2015 UTC,"Not exactly what the OP asked, but I use ido for switching buffers and I customize ido-ignore-buffers to  '(""\\` \\*.+\\*"" ""\\`\\*.+\\*"")   This makes it so that they only show up in your buffer switcher if you explicitly type ""*"" or "" *"" to match them, or if they're the only buffers left.  Allows me to keep them open in the background without worrying about having them clutter my quick switching.  Might be what you're seeking! :)"
emacs,30lzxq,agnudawn,2,Sat Mar 28 17:00:14 2015 UTC,"Does anyone know if there is a similar setting for helm? I use helm to select buffers and would like to be able to toggle between seeing the * buffers and not seeing them. Sometimes I do like to return to, e.g., previous ag search results, but usually I don't need to know they're there."
emacs,30lzxq,bakuretsu,2,Sat Mar 28 20:43:38 2015 UTC,"You could create an issue to request this feature.  EDIT: As far as I know, Helm only excludes Helm buffers from the buffer list by default. You should look at helm-boring-buffer-regexp-listto see what is being excluded when opening helm-mini or helm-buffers-list."
emacs,30m9ym,78666CDC,5,Sat Mar 28 17:57:38 2015 UTC,"Yes, use auctex and set the master file variable."
emacs,30m9ym,pangrametry,4,Sat Mar 28 21:39:11 2015 UTC,"I was already using auctex but wasn't aware of the master file variable. Thank you.   Another case of RTFM. For those happening in, here's a link:  https://www.gnu.org/software/auctex/manual/auctex/Multifile.html"
emacs,30novv,balkenbrij,2,Sun Mar 29 01:20:26 2015 UTC,"(defun split-horizontally-not-vertically ()   ""If there's only one window (excluding any possibly active      minibuffer), then split the current window horizontally.""   (interactive)   (if (and        (> (frame-width) 80)        (>= (frame-width) (* 2 (frame-height)))        (= (length (window-list nil 'dont-include-minibuffer-even-if-active)) 1))       (if (not (active-minibuffer-window))           (split-window-horizontally)         (message ""Don't know how yet""))))  (add-hook 'temp-buffer-setup-hook 'split-horizontally-not-vertically)   There are probably other hooks you'll need to hunt down."
emacs,30novv,zenspider,1 point,Sun Mar 29 06:21:01 2015 UTC,"I didn't think of hooks and taking the height in consideration, that would be better then defadvice i think. Thank you very much!"
emacs,30novv,birdmanx35,2,Mon Mar 30 07:16:00 2015 UTC,https://github.com/roman/golden-ratio.el
emacs,30p9fl,ReneFroger,2,Sun Mar 29 14:30:16 2015 UTC,I tell them to study and train harder.
emacs,30p9fl,jhelberg,2,Sun Mar 29 17:49:29 2015 UTC,"There are so many aspects attached with Emacs, that it takes a while to explain it."
emacs,30p9fl,nautola,2,Sun Mar 29 17:53:55 2015 UTC,"I get it.  There's a certain weirdness in using Emacs when you work on a team that uses IDE's.  People wonder why you're using something so old.    And, of course, when I try to show somebody how cool feature x is it doesn't work right, and they assume that Emacs is intrinsically inferior."
emacs,30k8qc,anatolya,9,Sat Mar 28 02:25:10 2015 UTC,"I don't think you can change it from elisp, but it's been removed upstream because gtk3 deprecated the tearoff menus, so you can expect it to go away in emacs 24.5, I believe.  If you want it on your current version, you can grab the source for your preferred version and remove the corresponding lines.  I recompiled to test and it seems to work as expected.  Keep in mind that I haven't thoroughly tested, and it could cause bugs if something is expecting that tearoff to be there, but I don't see anything outright."
emacs,30k8qc,agnudawn,1 point,Sat Mar 28 05:34:37 2015 UTC,This is good news. I'll just wait then :)
emacs,30k8qc,four04,1 point,Sat Mar 28 12:07:12 2015 UTC,This fix is present in 25.0.50.2 (latest Git).
emacs,30k8qc,oantolin,3,Tue Apr 7 21:18:09 2015 UTC,"Do they indicate you can tear off the menu and leaving it floating? If so, I doubt you can remove them."
emacs,30k8qc,pangrametry,3,Sat Mar 28 03:02:09 2015 UTC,Yes. Those are tear-off menus.
emacs,30k8qc,newfor2015,2,Sat Mar 28 04:09:40 2015 UTC,This is on a KDE system and GTK is using its default adwaita theme. No other GTK+ 3 program shows something like that.
emacs,30k8qc,agnudawn,2,Sat Mar 28 02:26:30 2015 UTC,"M-x menu-bar-mode  sorry, couldn't resist :-D Seriously though, it's probably defined in the menu-bar.el somewhere. So I'd start looking in there first.  Edit: oh! I think it's defined by the variable menu-bar-separator in the subr.el defaults to ""--"" Modify that should allow you to change it. Sorry can't try it myself at the moment, but let me know how it ends up for you"
emacs,30k8qc,RobThorpe,1 point,Sat Mar 28 05:08:07 2015 UTC,"Those appear to be different from the gtk tearoffs.  I think those separators are between groups within the menu (like between ""Close"" and ""Save"" on the default ""File"" menu)."
emacs,30kxd3,shackra,2,Sat Mar 28 07:24:20 2015 UTC,"My best guess is that it is not a problem...the first prompt is for ssh (connection), and the second is for su (remotely)...given that the issue appears for /etc and you mention editing as root.  Well, maybe it's a problem for you, but it's not an issue with TRAMP.  The ssh and su invocations both require a password (which could differ, in certain arrangements).  You could possibly reduce some of the friction here via ssh-agent configuration (removing the need for a connection password) and sudo configuration (removing the need for confirmation for root privileges for certain operations).  But both of those configurations are completely external to emacs, though some additional TRAMP configuration is probably also required to take full advantage of those changes...if they are desired (there are security considerations for both).  Anyway, I'm not sure that is the answer you were looking for (or even fully sure it's correct!)  But it does seem both plausible and likely that the two password requests are for those 2 separate, respective processes:  ssh and su.   And thus entirely correct for TRAMP to request, when needed."
emacs,30kxd3,forked_tongue,2,Sat Mar 28 16:21:42 2015 UTC,They should be different. SShing in as root is bad practice and the ability should be disabled.
emacs,30kxd3,swathe,2,Sat Mar 28 22:48:07 2015 UTC,"Agreed...but as far as bad practices go, I'd probably say the same about editing files as root from a normal (i.e. user-owned) emacs session, semi-transparently.    Or using the same password for root as your user account.    Or (my own advice, above) allowing password-less modification of /etc via a sudoers entry.    Or any number of alternate hypothetical practices available, to an inexperienced user and sysadmin, who is probably way more interested in getting something else to work than they are with best practices.  And the above isn't meant to be critical of you or OP (or myself!), so much as it is just an acknowledgement that here in 2015, maintaining a host is still a giant pain, requiring a lot of knowledge to do a proper job of it.  And that makes it pretty hard to know what sort of advice is most helpful."
emacs,30kxd3,forked_tongue,2,Sun Mar 29 03:49:42 2015 UTC,Yeah agreed. I'm sysadmin so it's hard to turn that off sometimes lol.
emacs,30h2gr,DarthToaster,5,Fri Mar 27 08:59:50 2015 UTC,"For the people, that use company and dabbrev/dabbrev through hippie-expand. I recently configured company-dabbrev and it has complete replaced dabbrev for me. The relevant lines in my init.el set the idle-delay to 0, which is essential. Company will always live update it's completions and you just have to hit return, when the desired one is on top. I have never typed so little. The other lines just make company-dabbrev behave like one would expect."
emacs,30h2gr,CQQL,2,Fri Mar 27 14:02:14 2015 UTC,"Do you find mixing company and dabbrev to work well? I like dabbrev inside comments, and for whole line completion, but it ends up finding a lot of possibilities.  When I'm just using smarter company backends, it only gives me a few possibilities, so I don't need to type as much. I think I'd miss that if I had other unrelated strings being offered when I want method completion."
emacs,30h2gr,CQQL,1 point,Sat Mar 28 00:23:47 2015 UTC,"What kind of smart backend are you talking about? Unfortunately I do not know of any, that are smarter than suggesting words, that appear in the proximity of my editing location (dabbrev).  With my setup I tried to increase the amount of times I use dabbrev, because I recognized, that I could use it a lot more often, but most of the time you do not know, what hides behind M-/ (hippie-expand). With company-dabbrev you do."
emacs,30h2gr,redguardtoo,2,Sun Mar 29 01:47:01 2015 UTC,"company-mode for almost everything (company-mode is not only for intellisens) EVIL to complete line hippie-expand to complete word/filename/file-path/english-dictionary (please note hippie-expand is a general framework, so you can use it complete anything like TAGS by ctags). See https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-hippie-expand.el for sample yasnippet to insert code template"
emacs,30h2gr,luxbock,2,Fri Mar 27 10:52:00 2015 UTC,EVIL to complete line   What do you mean by this?
emacs,30h2gr,redguardtoo,1 point,Sat Mar 28 05:35:11 2015 UTC,evil-complete-next-line
emacs,30h2gr,instant_sunshine,2,Sat Mar 28 23:17:44 2015 UTC,"M-/    for dabbrev completion  s-/     (super) for hippie expand  TAB     Yasnippet   Plus auto complete.  Maybe I'll try the switch to company again, it seems better than the time I tried last (a couple years ago.)"
emacs,30h2gr,to3m,1 point,Fri Mar 27 15:07:10 2015 UTC,"There's a nice consistency about those keybindings, I like it!"
emacs,30h2gr,aerique,1 point,Sat Mar 28 00:20:12 2015 UTC,"I use dabbrev, company and yasnippet, and have separate keybindings for each. These packages all work in quite different ways, so I want to be able to explicitly invoke one rather than the other.   M-/ for dabbrev C-? (C-S-/) for company TAB for yasnippet (this also reindents - yet to have a problem with this - I have given all my snippets names that start with `, though, so unwanted accidental expansions should be very rare)   I still use ESC TAB (completion-at-point) sometimes in elisp, but I'm trying to train myself to use company for that instead..."
emacs,30h2gr,RobThorpe,1 point,Fri Mar 27 13:31:53 2015 UTC,"I've got indentation and completion both on the TAB key. I used to use Smart Tab for this but it had too many issues and didn't feel right.  I made a couple of simple functions of my own and now I am pretty happy with it.  I use company-mode for completion and have got Yasnippet on another key (C-Tab I think) and also hippie-expand on another key although the latter is rarely used.  They are on seperate keys since I need them in specific situations and I do not want to depend on company-mode for that.  This all works well enough for me, although for company-mode it really depends on the backends one installs. f.e. C / C++ was pretty hopeless with Semantic or gtags but now that I have switched to irony-mode it is really good.  I do prefer different kinds of completion to be on separate keybindings. In my experience overloading it all on one key doesn't really work well."
emacs,30h2gr,jivatmann,1 point,Fri Mar 27 13:35:08 2015 UTC,I use the defaults. I have a bunch of skeletons that I've put in the C-c X keymap. BTW C-M-i is easy to hit if you use C-[ C-i.
emacs,30h2gr,pangrametry,1 point,Fri Mar 27 13:59:30 2015 UTC,"I have struggled a long time with this, but finally have a working solution which is really nice, because i don't have to remember a lot of keybindings. All of my completion functions work with TAB. The nice thing about this setup is that it works very well: If i am in a comment and press TAB after a misspelled word it gives me the correction word list where i can choose from. If i am in the code and want to type a variable name i used before it uses dabbrev, if i typed a keyword for a snippet it epxands to that snippet. And if i am looking for some smart completion which is most often when i complete after a dot (module.function...) it uses company mode. How it works? Enable Yasnippet globally and deactivate the TAB key for it, then you setup hippie expand like this:   (yas-global-mode 1)  (define-key yas-minor-mode-map [(tab)]        nil)  (define-key yas-minor-mode-map (kbd ""TAB"")    nil)  (define-key yas-minor-mode-map (kbd ""<tab>"")  nil)  (defun try-flyspell (arg)   (if (nth 4 (syntax-ppss))       (call-interactively 'flyspell-correct-word-before-point)   nil))  (setq hippie-expand-try-functions-list       '(try-flyspell         yas-hippie-try-expand          try-expand-dabbrev-visible          (lambda (arg) (call-interactively 'company-complete))          ))  (global-set-key (kbd ""<tab>"")  'hippie-expand) (global-set-key (kbd ""TAB"")  'hippie-expand)"
emacs,30g5wo,harumphfrog,21,Fri Mar 27 02:22:59 2015 UTC,"I haven't noticed this problem before, but now I do. Found this:  (setq save-interprogram-paste-before-kill t)   I wonder why it's not the default."
emacs,30g5wo,donatasp,5,Fri Mar 27 07:13:12 2015 UTC,"oh man, this is exactly what I needed! I even started to write some defadvice for kill-ring-save when all I needed was sth to be t. Thanks!"
emacs,30g5wo,tekai,2,Fri Mar 27 10:17:32 2015 UTC,Perfect. This needs to be better known!
emacs,30g5wo,sledgespread,1 point,Fri Mar 27 10:31:11 2015 UTC,Exactly what I needed! Fantastic.
emacs,30g5wo,vermiculus,1 point,Fri Mar 27 11:14:11 2015 UTC,"Well, I'll be."
emacs,30g5wo,agumonkey,6,Fri Mar 27 15:38:23 2015 UTC,"Funny, I usually accept emacs behavior, so I paste the clipboard before the text to be deleted, then I delete it.  Of course now I'm gonna write a (replace-word-with-clipboard) helper function. ;)"
emacs,30g5wo,bugsintherugs,2,Fri Mar 27 02:43:52 2015 UTC,Of course now I'm gonna write a (replace-word-with-clipboard) helper function. ;)   Why not (pending-delete-mode)?
emacs,30g5wo,bugsintherugs,9,Fri Mar 27 02:48:13 2015 UTC,AKA (delete-selection-mode)
emacs,30g5wo,agumonkey,5,Fri Mar 27 03:00:15 2015 UTC,"Seriously sometimes it feels like emacs manual is infinite.   And it's even in the FAQ, with code from 1994.  https://www.gnu.org/software/emacs/manual/html_node/efaq/Replacing-highlighted-text.html"
emacs,30g5wo,bugsintherugs,2,Fri Mar 27 03:26:48 2015 UTC,It's the self documenting editor. That manual page comes from the documentation string on the function in the source code of the Emacs Lisp distribution that is the editor. I love it.
emacs,30g5wo,agumonkey,1 point,Fri Mar 27 03:49:27 2015 UTC,"I wonder how large it would be to have a fuzzy index of the whole manual / docstrings set. Because without that reddit thread, I'd probably never find out that 'delete' 'selection' was handled by delsel.el."
emacs,30g5wo,bugsintherugs,2,Fri Mar 27 10:47:07 2015 UTC,"Actually, what you speak of is totally available. Use C-h a (apropos) to search for arbitrary entries in the Info manual, (or C-h f for functions, v for variables, h for help on the help system, i to bring up the manual itself, which can then be searched)."
emacs,30g5wo,agumonkey,2,Fri Mar 27 18:50:04 2015 UTC,recursive shame
emacs,30g5wo,agumonkey,2,Fri Mar 27 19:36:23 2015 UTC,Because yes.
emacs,30g5wo,TheFrenchPoulp,2,Fri Mar 27 02:55:09 2015 UTC,"I use the package expand-region, it has an option to overwrite the region when typing but doesn't interfere with autopair when you want to add a pair of parenthesis around the region."
emacs,30g5wo,Neurorational,2,Sat Mar 28 00:06:27 2015 UTC,"Seems to me that any program should have a keybind to swap the contents of the clipboard with the highlighted region, like so:  (defun clipboard-swap () ""Swaps the clipboard contents with the highlighted region""     (interactive)     (if (use-region-p)         (progn             (setq                 reg-beg (region-beginning)                 reg-end (region-end))             (deactivate-mark)             (goto-char reg-end)             (clipboard-yank)             (clipboard-kill-region reg-beg reg-end))         (clipboard-yank)))  (global-set-key (kbd ""C-S-Y"") 'clipboard-swap) ; Yank with the Shift key to swap instead of paste. (global-set-key (kbd ""C-S-V"") 'clipboard-swap) ; Same for CUA mode.   I'm fairly new at this so I don't know if there's a better way to do it (it would be nice if there was a way to save the clipboard contents directly into a variable but I haven't figured out how)."
emacs,30g5wo,bugsintherugs,3,Sat Mar 28 00:07:25 2015 UTC,"You might want (delete-selection-mode), then you can mark the text, and yank; and the yanked text will overwrite the marked text.  But this doesn't entirely solve your problem of having times where you want to kill text but not save it to the kill ring. (delete-region) does this, which you could bind."
emacs,30g5wo,TARDIS_TARDIS,2,Fri Mar 27 02:59:56 2015 UTC,I want this one answered. I want it bad.
emacs,30g5wo,TARDIS_TARDIS,2,Fri Mar 27 02:46:48 2015 UTC,Check out the top answer now from /u/donatasp  (setq save-interprogram-paste-before-kill t)   That solves it for me!
emacs,30g5wo,jordonbiondo,1 point,Fri Mar 27 12:55:26 2015 UTC,Sweet! Thanks!
emacs,30g5wo,TARDIS_TARDIS,2,Fri Mar 27 16:09:51 2015 UTC,"Since there are other problems with pasting text into terminal emacs on OSX and other systems. (Pasted text is treated as events and can execute key-chords etc). I have dedicated functions to copy and paste from and into emacs from OSX using pbpaste and pbcopy which I use regardless of whether I'm using a GUI.  This is what I use to paste into emacs from an external source.  (defun osx-safe-paste()   ""Insert the contents from `pbpaste'. Won't trigger chords.""   (interactive)   (insert (shell-command-to-string ""pbpaste -Prefer txt"")))"
emacs,30g5wo,anatolya,1 point,Fri Mar 27 14:22:04 2015 UTC,"Not a mac guy, but thanks!"
emacs,30g5wo,yuppienet,2,Fri Mar 27 16:10:08 2015 UTC,you can accomplish the same thing in linux by using xclip or xsel instead of pbcopy/pbpaste.
emacs,30g5wo,jordonbiondo,1 point,Fri Mar 27 21:23:57 2015 UTC,Would you please give an example of a pasted text that triggers chords?
emacs,30g5wo,vermiculus,1 point,Sat Mar 28 09:56:24 2015 UTC,"Have emacs open in a OS X terminal (the only thing I've tested it on) and paste any that contains a key chord. So if ""re"" was a chord and you pasted ""tree"" the chord would fire"
emacs,30g5wo,shackra,2,Sat Mar 28 17:56:56 2015 UTC,"Why not yank and kill again right away? That'll insert the text into the kill-ring and you can immediately go about your business. (By the way, helm-show-kill-ring is really nice – I have it bound to M-y.)"
emacs,30g5wo,redguardtoo,2,Fri Mar 27 05:37:28 2015 UTC,"(By the way, helm-show-kill-ring is really nice – I have it bound to M-y.)   Me too, is very useful"
emacs,30g5wo,northrupthebandgeek,2,Sat Mar 28 05:53:54 2015 UTC,Use https://github.com/rolandwalker/simpleclip  You can check my setup https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-clipboard.el  Basically you need two APIs from simpleclip:   simpleclip-set-contents simpleclip-get-contents
emacs,30g5wo,gkunno,1 point,Sun Mar 29 08:57:32 2015 UTC,"Wow, this is exactly the behavior I had in mind. I started using the solution from /u/donatasp, which works well:  (setq save-interprogram-paste-before-kill t)   I'm going to give simpleclip a shot, thanks!"
emacs,30g5wo,RobThorpe,1 point,Sun Mar 29 14:15:26 2015 UTC,"Which variety of Emacs are you using (terminal, native graphical, X11 graphical, Aquamacs)?  I'm unable to replicate the behavior you're seeing, though I admittedly don't use the kill ring nearly as much as I should, so maybe I'm misinterpreting what you're doing.  Are you ""deleting"" text by killing it or by (my normal method of) selecting it and hitting Backspace/Delete?"
emacs,30g5wo,vermiculus,1 point,Fri Mar 27 05:09:37 2015 UTC,"Im new to Emacs too, been using it for 2-3 months now, with evil because i like the vim key bindings.  Theres one thing thats really weird, and i have not yet been able to find a solution/what im doing wrong.  Sometimes, when i copy some text from outside emacs, and then switch back to emacs and paste, emacs will paste the last thing from the kill ring, it wont notice the clipboard paste at all.  This happens randomly, and most of the time i cannot reproduce it. Im sure i have copied the text, because when i go to an other app, say the browser i can paste the text in the url bar, but not to emacs.  Do any emacs users with more experience have any ideas/tips/solutions what might cause the problem?"
emacs,30g5wo,Neurorational,2,Fri Mar 27 06:00:20 2015 UTC,"I haven't seen that. Try submitting that question to this group, more people will read it that way. Or try help-gnu-emacs@gnu.org."
emacs,30g5wo,CodyChan,2,Fri Mar 27 15:37:31 2015 UTC,I'd also suggest asking on the Emacs StackExchange.
emacs,30b67j,metaperl,18,Wed Mar 25 23:10:45 2015 UTC,M-x disable-theme  or to get rid of all loaded themes Eval: (mapcar #'disable-theme custom-enabled-themes)
emacs,30b67j,trachurus,3,Wed Mar 25 23:23:40 2015 UTC,"Oooh mapcar, that's really nice. This is my slightly less elegant solution, but I run this whenever I test new themes:  (defun load-only-theme ()   ""Disable all themes and then load a single theme interactively.""   (interactive)   (while custom-enabled-themes     (disable-theme (car custom-enabled-themes)))   (call-interactively 'load-theme))   It's a bit of a jarring user experience because the themes are stripped before the theme selection prompt appears, but it's really efficient for trying out a bunch of themes in a row."
emacs,30b67j,bakuretsu,2,Thu Mar 26 10:28:59 2015 UTC,"Here's a solution that doesn't have the jarring experience:  (defun switch-theme (theme)   ;; This interactive call is taken from `load-theme'   (interactive    (list     (intern (completing-read ""Load custom theme: ""                              (mapcar 'symbol-name                                      (custom-available-themes))))))   (mapcar #'disable-theme custom-enabled-themes)   (load-theme theme t))   The prompt appears first, and then the active themes are disabled and the selected one loads."
emacs,30b67j,danielmai,1 point,Thu Mar 26 17:39:05 2015 UTC,"Just what I was looking for, thanks!"
emacs,30b67j,bakuretsu,1 point,Sat Mar 28 12:44:25 2015 UTC,I'm still seeing theme artifacts when changing themes using switch-theme. Are there some other places I should be looking to disable themes?
emacs,30b67j,wdkrnls,2,Sat Mar 28 16:11:41 2015 UTC,"Technically, mapc is more idiomatic, and shorter to type."
emacs,30b67j,nivekuil,8,Fri Mar 27 03:55:28 2015 UTC,"Side note, M-x helm-themes has a default choice. (it also doesn't layer themes, if that is your preference.)"
emacs,30b67j,instant_sunshine,3,Thu Mar 26 00:50:38 2015 UTC,I'm on mobile so I can't look it up but basically themes are meant to overlap on top of one another so there isn't a reset.   However you can disable themes after enabling them.   I think I have an example at https://github.com/mordocai/.emacs.d/ in init.el in my light-colors function.
emacs,30b67j,mordocai058,2,Wed Mar 25 23:23:45 2015 UTC,"I have this setup that generates an interactive function for each theme listed in the alist in the beginning of that selected code.   It disables all themes and loads just the theme that I want to set to. It also does some some face settings that I want to override on top of what the theme does (instead of me having to modify each theme I use/try).   To try a new theme, I need to install it, add it to that alist, eval the setup-visual.el and then   M-x load-theme/THEMENAME   (which is generated using the macro in that selected region of code in above link)."
emacs,30b67j,kaushalmodi,1 point,Thu Mar 26 00:04:04 2015 UTC,That's pretty sweet!
emacs,30b67j,instant_sunshine,1 point,Mon Mar 30 17:03:15 2015 UTC,"Thanks! Here is the updated version with couple of optimizations (selective disabling, silence smart mode line messages) and few themes I added to my themes alist inspired from this thread."
emacs,30b67j,kaushalmodi,2,Mon Mar 30 17:24:09 2015 UTC,"I put this in my init file to automatically disable the current theme when i switch themes. Not sure if ""advice"" is the best practice for this but it works.  (defadvice load-theme (before disable-before-load) ""Disable any loaded themes before enabling a new theme. This prevents overlapping themes; something I would rarely want."" (dolist (theme custom-enabled-themes)     (disable-theme theme))) (ad-activate 'load-theme)"
emacs,30b67j,Starlight100,2,Thu Mar 26 00:17:52 2015 UTC,"I use the advice approach, but I check a list of themes I want to apply over others.  (defadvice load-theme (before dont-propagate-theme (theme &rest args) activate)   (unless (memq theme my-partial-theme-list)     (mapc #'disable-theme custom-enabled-themes)))"
emacs,30alzl,nautola,6,Wed Mar 25 20:44:34 2015 UTC,"For paredit the C-<Arrow> stuff for barfing and slurping just wasn't cutting it. I gotta move my arm to get to the arrows. So I made a hydra for barfing/surping with home-row keys. I can move around and slurp/barf without modifier keys, then quickly fall back to normal Evil bindings.  I created a hydra for all my scrolling needs. veritcal/horizontal. 1 step, full page, etc. Vim requires the control key to scroll which is annoying for such a common task.  Vim uses the control key a lot. It doesn't have much choice since it is a single namespace for all keybindings. Hydra lets you create a more perfect mini-vim that is tailored for a specific task, and exists only for the life time of the task."
emacs,30alzl,Starlight100,5,Thu Mar 26 01:15:24 2015 UTC,"Have you seen lispy? I was using a single key prefix for paren editing commands before since I don't like using C-anything either, but I really like lispy a lot (and it works fine with evil).  Also, vim has an  equivalent plugin (though it's not as colourful or functional as hydra)."
emacs,30alzl,angelic_sedition,3,Thu Mar 26 04:49:27 2015 UTC,"I think in general using a hydra can be nicer than making a new evil state for certain things. Make note of any time you're using a set of related commands in a row with long keymaps, and that is where you can benefit from a hydra.  I made a hydra for a ""normal state"" in helm like in unite. I posted it here earlier, but maybe you or someone who didn't see it will find it useful.  I'm using a hydra for iedit that's kind of like the micro state used in spacemacs, e.g. g goes to the first occurence, k goes to next occurence, and a few other keys do different things.  I've not touched c, d, etc. so other vim commands can be used without exiting the hydra. One nice things is that evil operators aren't prefix keys, so they will work with a pink hydra (unless pink hydras now support prefix keys; I haven't checked).  I'm also using a convoluted hydra to make org-cycle a two way toggle and work from within a heading like vim's za."
emacs,30alzl,angelic_sedition,2,Thu Mar 26 04:45:02 2015 UTC,"I've wrote something similar today for swiper/ivy. In this screenshot, I've selected files in dired that match (Mar).*(10) and then un-selected the ones that I didn't want."
emacs,30alzl,abo-abo,1 point,Thu Mar 26 13:40:00 2015 UTC,That's pretty nice; I'll have to try that out. Using swiper to mark files in dired isn't something I'd considered yet.
emacs,30alzl,angelic_sedition,2,Thu Mar 26 19:13:55 2015 UTC,"I often use it for things like agenda views because for the love of Christ I can never remember my combos.    E.g the below hides the Hydra when an item is pressed (:color blue). So it's basically just a quick command launcher for me.    (global-unset-key (kbd ""<f10>""))   (global-set-key (kbd ""<f10>"") 'my/hydra-todo-list-nav/body)   (defhydra my/hydra-todo-list-nav (:color blue)   ""   Org Todo items:   ""   (""h"" (lambda () (interactive) (org-todo-list ""HOLD"")) ""HOLD items!"")   (""o"" (lambda () (interactive) (org-todo-list ""OPEN"")) ""OPEN items!"")   )"
emacs,30bojj,sigzero,6,Thu Mar 26 01:32:33 2015 UTC,"What ""word"" are you trying to complete? Is it in a programing language or plain text? What completion package are you using?"
emacs,30bojj,tuhdo,3,Thu Mar 26 02:42:26 2015 UTC,Emacs doesn't perform any automatic completion in its stock configuration.
emacs,30bojj,hvis,1 point,Thu Mar 26 01:54:07 2015 UTC,"I have the same issue too. I found the time required until the autocompletion box pop-ups from Company, too long. Would be interested in a solution too!"
emacs,30bojj,ReneFroger,3,Thu Mar 26 11:24:19 2015 UTC,Try these:  ;; 0.1 second delay before the pop-up appears (setq company-idle-delay 0.1) ;; you only need to enter one character in a buffer before auto-completion starts (setq company-minimum-prefix-length 1)
emacs,30bojj,ghostshell,1 point,Thu Mar 26 12:58:10 2015 UTC,"Thanks, it improved it a little bit!"
emacs,30bojj,ReneFroger,1 point,Thu Mar 26 17:33:16 2015 UTC,you can set it to 0.0 to make it appear instantly.
emacs,30bojj,tuhdo,1 point,Fri Mar 27 01:38:48 2015 UTC,This makes typing extremely laggy for me. Do you or others not have this problem?
emacs,30bojj,angelic_sedition,1 point,Fri Mar 27 06:09:53 2015 UTC,"Do you have heavy weight source? If you have Semantic enabled, be sure to exclude company-semantic source."
emacs,30bojj,tuhdo,1 point,Fri Mar 27 07:02:53 2015 UTC,Is there a way to have the delay setting different for different modes or backends?
emacs,30bojj,angelic_sedition,1 point,Sat Mar 28 04:03:24 2015 UTC,"I made an issue last week here. Probably if you show that users are in demand, /u/hvis will implement it soon."
emacs,30bojj,tuhdo,1 point,Sat Mar 28 06:36:10 2015 UTC,"Good one, thanks! However, angelic_sedition says it can make laggy with another sources. So I let the delay on 0.1."
emacs,30bojj,ReneFroger,1 point,Fri Mar 27 08:16:01 2015 UTC,"It depends on the source though. If you use plain text sources, it should not have any problem."
emacs,30bvfv,the_whalerus,10,Thu Mar 26 02:30:51 2015 UTC,"You could use expand-region. See a demo video.   Or, you can press C-M-u to go up to the opening parentheses, C-SPC to mark it and C-M-f to move to the end of a closing parentheses and C-w to kill or M-w to copy. This works for any pair of bracket."
emacs,30bvfv,tuhdo,1 point,Thu Mar 26 02:40:55 2015 UTC,C-M-k also kills an expression between parentheses.
emacs,30bvfv,Denommus,3,Thu Mar 26 02:46:54 2015 UTC,And C-M-Space selects it.
emacs,30bvfv,tangus,2,Thu Mar 26 08:00:40 2015 UTC,Thank you! Been using emacs for a long time and never knew this.
emacs,30bvfv,hprotagonist,2,Thu Mar 26 15:19:40 2015 UTC,"Yes, and any symbol as well."
emacs,30bvfv,tuhdo,1 point,Thu Mar 26 02:49:08 2015 UTC,"To be more specific, it selects a s-expression."
emacs,30bvfv,Denommus,1 point,Thu Mar 26 17:56:24 2015 UTC,That's right. I find it most convienent to select these kill-sexp and mark-sexp using C-[ instead of Alt. I.e. with C-[ C-k and C-[ C-SPC.
emacs,30bvfv,RobThorpe,4,Thu Mar 26 17:36:47 2015 UTC,"Btw, since you are a Vim user, you may want to take a look at Spacemacs which vimified Emacs. Not only in an editing buffer, but pretty much any where else, you got Vim key bindings for navigating. And it integrates many other excellent packages in Emacs as well."
emacs,30bvfv,tuhdo,4,Thu Mar 26 02:52:35 2015 UTC,"What do you mean moving the cursor is slow? How are you moving it?  Once you hit C-<spc> to set the Mark you can use just about any means of navigation - in any combination - to mark the other end of your region, such as move forward or backward by words, sentences, or paragraphs (including using numerical arguments with C-<number>), or use isearch to take you right where you want to go.  For example, to select part of my text above I could do the following sequence:   C-r once backwards isearch to beginning of 'Once' C-<spc> set the mark C-s aphs move point to the end of the word 'paragraphs', highlighting the region in between.   Or to end the region at the word 'you' I could enter C-s you and then keep hitting C-s until I got the 'you' that I wanted.  Edit: and here's a couple more ways: http://emacsrocks.com/e10.html"
emacs,30bvfv,Neurorational,3,Thu Mar 26 04:40:37 2015 UTC,"Yeah, navigating by I-search (C-s/C-r) is the way to fly.  Also, the default behavior of I-search is to set the mark at the search start position...and though that won't highlight the region (like setting a mark first with C-<spc> will), many operations just use point and mark (i.e. highlighting isn't necessary)...so you can often save another step (i.e. skip the C-<spc> highlighting) if speed is your chief concern.  Just wanted to point that out, and to doubly recommend navigation via I-search.  It's a lot faster to just send the cursor to the text position you want, via search, than it is to move line-by-line and character-by-character."
emacs,30bvfv,forked_tongue,1 point,Thu Mar 26 16:13:21 2015 UTC,"When I isearch without explicitly setting the mark I can C-x C-x k back to where I started from but I can't kill the text in between Mark and Point, though I don't know if that might be because of my customizations.  Anyway, I was also thinking of this in my original post but couldn't remember where I'd seen it:  http://emacsrocks.com/e10.html"
emacs,30bvfv,Neurorational,2,Thu Mar 26 23:04:51 2015 UTC,"C-w works as I described (for me), and I'm running a pretty vanilla set-up...and I've just confirmed that with ""emacs -q""...but of course, there's no telling what OP's set-up is.  But that's why I did hedge my reply with  ""default behavior""!"
emacs,30bvfv,forked_tongue,4,Fri Mar 27 02:46:15 2015 UTC,"expand-region package and following shortcuts made selecting regions (blocks, quotes, comments...) much easier for me:  (global-set-key (kbd ""M-w q"")  'er/mark-inside-quotes) (global-set-key (kbd ""M-w b"")  'er/mark-inside-pairs) (global-set-key (kbd ""M-w w"")  'er/mark-word) (global-set-key (kbd ""M-w c"")  'er/mark-comment)"
emacs,30bvfv,haksior,2,Thu Mar 26 14:37:45 2015 UTC,"Do you not want to use evil? If you're missing vi(, that's what I would recommend."
emacs,30bvfv,angelic_sedition,2,Thu Mar 26 05:01:18 2015 UTC,I'm using easy-mark command which comes from easy-kill package. It allows you to expand/shrink selected region by using +/- after you mark something.
emacs,30bvfv,xuchunyang,2,Thu Mar 26 06:55:21 2015 UTC,"Using easy-kill too. Expanding the region with ""s"" for sexp, ""l"" for list, ""d"" for defun for example is extremely useful for elisp editing. Actually you don't set a mark yet, so you save at least the one keystroke to deactivate the mark when pushing a region to the kill-ring."
emacs,30bvfv,mutbuerger,2,Sat Mar 28 10:54:01 2015 UTC,"M-{ and M-} ; motion by paragraphs is also useful for this.  You can also do copying via completion in Emacs. Let's say you know the first word of the line you want somewhere else in a document.  You type in some of it, e.g. Backwar, then press M-/ which will complete it to Backward. Now, if you press SPC M-/ directly after that it will complete using the next word after backwards in the place it's looking."
emacs,30bvfv,RobThorpe,1 point,Thu Mar 26 17:37:42 2015 UTC,"You should take the emacs tutorial: C-h t  It will teach you the most basic movement commands and lots of other stuff as well. It's time well spent.  Also, expand region is a pretty cool tool, but there are multiple others as well. Have fun exploring!"
emacs,308ibs,daddyc00l,27,Wed Mar 25 09:40:02 2015 UTC,"zenburn. Always have, always will."
emacs,308ibs,rhabarba,5,Wed Mar 25 10:27:03 2015 UTC,zenburn forever!
emacs,308ibs,lykwydchykyn,6,Wed Mar 25 13:46:18 2015 UTC,Zenburn all the things!!!  Though I always tweak my zenburn stuff to use #1C1C1C for the background color for some more contrast
emacs,308ibs,dangersalad,2,Wed Mar 25 14:03:40 2015 UTC,"I tried zenburn, but it's too bright for me. I'm using something called hickey."
emacs,308ibs,__notmythrowaway__,2,Wed Mar 25 23:57:10 2015 UTC,I've been using Zenburn for few days but I can't see the cursor for god's sake (vertical bar). Is it an issue or am I the only one?
emacs,308ibs,anatolya,2,Thu Mar 26 01:24:52 2015 UTC,Zenburn always looked better in vim than emacs. Not sure why... I think it's the gratuitous amount of blue in the emacs version.
emacs,308ibs,aport,1 point,Wed Mar 25 21:44:32 2015 UTC,Alien fruit salad
emacs,308ibs,flarkis,1 point,Wed Mar 25 17:57:42 2015 UTC,"I use zenburn at home and anti-zenburn at work, a brighter grayish version which I hope draws less attention to my screen ..."
emacs,308ibs,tty-tourist,1 point,Thu Mar 26 08:34:16 2015 UTC,Zenburn ... and I have zenburnized my whole desktop and shell colors.
emacs,308ibs,Knusper2000,21,Sun Apr 19 09:26:31 2015 UTC,sanityinc-tomorrow-night. It's the only theme I've genuinely liked in ages.
emacs,308ibs,mrkipling,2,Wed Mar 25 11:42:14 2015 UTC,"I use ""day"" during daytime, and ""eighties"" when it is dark."
emacs,308ibs,ayakushev,2,Wed Mar 25 11:49:17 2015 UTC,Using https://github.com/hadronzoo/theme-changer? It changes themes for day and night automatically.
emacs,308ibs,delbosforo,1 point,Wed Mar 25 19:04:04 2015 UTC,"Something similar, yes."
emacs,308ibs,ayakushev,1 point,Wed Mar 25 20:07:23 2015 UTC,"nice level contrast, so far the best on this page."
emacs,308ibs,adouzzy,17,Wed Mar 25 22:48:44 2015 UTC,I've been using moe-theme's moe-dark for a while and I really enioy it since the colors are bright and don't really clash.
emacs,308ibs,just_a_null,3,Wed Mar 25 09:48:29 2015 UTC,Moe has been my favorite for a long time. Even the light is nice on a bright day. :)
emacs,308ibs,NihilistDandy,2,Wed Mar 25 14:51:56 2015 UTC,I keep bouncing in between moe-theme and solarized.
emacs,308ibs,arpunk,2,Wed Mar 25 11:49:10 2015 UTC,"seems pretty nice, will give it a try"
emacs,308ibs,adouzzy,2,Wed Mar 25 10:02:11 2015 UTC,"I've been using moe-dark for a while now. It's a very well done theme with support for lots of modes and packages. I love the contrast and the colours, but I've tweaked it a little because the comment colours are too low contrast for my eyes."
emacs,308ibs,bhrgunatha,2,Wed Mar 25 10:35:58 2015 UTC,That is a great theme -- what really impressed me was the line numbers in this screenshot: https://raw.githubusercontent.com/kuanyui/moe-theme.el/master/pics/dark02.png -- they are so clean and the current line is highlighted... I gotta get mine setup like that but not sure how.
emacs,308ibs,robertmeta,2,Wed Mar 25 23:57:55 2015 UTC,That is Highlight Linum https://github.com/tom-tan/hlinum-mode
emacs,308ibs,kuanyui,13,Fri Mar 27 06:00:40 2015 UTC,Leuven.
emacs,308ibs,bcarrell,2,Wed Mar 25 10:31:54 2015 UTC,"Leuven adds beautiful readability to org-mode buffers! I haven't, sadly, found a dark counterpart to it, yet, for working at night."
emacs,308ibs,joranvar,3,Wed Mar 25 16:11:53 2015 UTC,You could try warm-night.
emacs,308ibs,schlenderer,1 point,Wed Mar 25 19:04:25 2015 UTC,"Does look nice, I will try it, thanks! I also saw material-design somewhere, so I guess I'll have some comparing to do."
emacs,308ibs,joranvar,1 point,Thu Mar 26 07:37:01 2015 UTC,"Amazing theme, thanks"
emacs,308ibs,marcwebbie,2,Mon May 11 01:01:56 2015 UTC,I took a little inspiration from leuven on org buffer coloration when designing the material theme . You might like it.
emacs,308ibs,cpaulik,1 point,Thu Mar 26 21:28:47 2015 UTC,"Thanks, I will look into it!"
emacs,308ibs,joranvar,12,Wed Apr 1 15:19:45 2015 UTC,Monokai. It's been my theme through four different editors now.
emacs,308ibs,many_cakes,1 point,Wed Mar 25 11:00:13 2015 UTC,I went through a Sublime Text phase and got fixated on Monokai. Thankfully I've been able to use it in every text editor/IDE I've found.
emacs,308ibs,Imxset21,8,Wed Mar 25 15:57:29 2015 UTC,smyx. Using my forked version with few modifications.
emacs,308ibs,kaushalmodi,20,Wed Mar 25 10:09:01 2015 UTC,"Solarized Dark and Light  I tried to work with other popular themes, but i always end up using solarized"
emacs,308ibs,vibhavp01,3,Wed Mar 25 10:14:53 2015 UTC,"Not sure if I should just upvote or comment as well, so I'm doing both. Also using Solarized Dark and Light. Also have tried other things, but end up coming back."
emacs,308ibs,mordocai058,1 point,Wed Mar 25 15:12:49 2015 UTC,I use it as my theme in vim but it never felt quite right on emacs
emacs,308ibs,flarkis,1 point,Wed Mar 25 18:00:45 2015 UTC,Another vote for solarized!
emacs,308ibs,aport,7,Wed Mar 25 18:43:05 2015 UTC,"Enjoying this new material theme. I like the way it colors org-mode code blocks.  For darker, cooler colors, I like bubbleberry."
emacs,308ibs,aquatox,1 point,Wed Mar 25 11:23:15 2015 UTC,Does anyone know the package that makes the modeline look all nice like in that material theme screenshot?
emacs,308ibs,nat1192,1 point,Wed Mar 25 23:28:19 2015 UTC,"Those are alternative separators for powerline. Here's an image from the now merged in mainline https://github.com/emacsfodder/emacs-mainline/blob/master/emacs-main-line-examples.png (I made these several years ago, they are also used in the default Spacemacs setup.)"
emacs,308ibs,instant_sunshine,1 point,Thu Mar 26 00:14:03 2015 UTC,That's the Spacemacs powerline. I was in fact just recognizing the author cpaulik as a fellow Spacemacs contributor.
emacs,308ibs,trishume,1 point,Thu Mar 26 03:53:17 2015 UTC,"Glad you like it, I was just going to mention it myself :)"
emacs,308ibs,cpaulik,1 point,Thu Mar 26 21:18:30 2015 UTC,The new material theme is pretty spiffy.
emacs,308ibs,Trevoke,3,Wed Mar 25 12:29:15 2015 UTC,"I use one of the ample themes Usually ample-flat.  Here is an image  I have been working on another variation of ample-theme called ample-subtle which is not in the wild yet, but should be soon:  ample-subtle  With all these variations I am starting to thing the original ample-theme was not quite an ample theme for me :)"
emacs,308ibs,jordonbiondo,2,Wed Mar 25 15:47:31 2015 UTC,ample-subtle looks great! What's the font?
emacs,308ibs,kaushalmodi,2,Wed Mar 25 23:15:39 2015 UTC,Envy Code R
emacs,308ibs,jordonbiondo,3,Thu Mar 26 11:23:29 2015 UTC,"Usually the default theme, which is pretty good.  Otherwise professional (fortunatly I don't use linum-mode)."
emacs,308ibs,---R,1 point,Wed Mar 25 19:55:34 2015 UTC,"I, too, use and love the default theme. Any idea if it has a name?"
emacs,308ibs,aptmnt_,1 point,Wed Mar 25 23:00:29 2015 UTC,"Angry fruit salad is it's community attributed name, however it is just the default face settings and has no true theme name.   Note: both light and dark variant are the same face settings,  Emacs allows a face to have multiple sets of color attributes defined, based on display color class (ie, how many colors.) and also on the lightness or darkness of the background"
emacs,308ibs,instant_sunshine,1 point,Thu Mar 26 00:25:09 2015 UTC,Professional looks great. I like the fact that it's conservative about the amount of colours used for highlighting. Are there other themes (especially ones with dark counterparts) like this?
emacs,308ibs,heyavtar,3,Sat Mar 28 13:25:37 2015 UTC,Still using Soothe.  Still weird.  Still loving it.
emacs,308ibs,paradoxxx_zero,3,Wed Mar 25 09:52:23 2015 UTC,;) glad you like it...  Tried Darktooth?
emacs,308ibs,instant_sunshine,3,Wed Mar 25 11:54:29 2015 UTC,I use twilight-bright. There's a severe lack of light themes without yellowish backgrounds for Emacs. I used to use the built-in tango light which is pretty good also.
emacs,308ibs,nandryshak,1 point,Wed Mar 25 12:38:35 2015 UTC,This is a splendid theme I keep coming back to.
emacs,308ibs,monotux,3,Thu Mar 26 11:54:01 2015 UTC,Spacegray - https://github.com/bruce/emacs-spacegray-theme
emacs,308ibs,indianDeveloper,3,Wed Mar 25 10:43:25 2015 UTC,eclipse-theme.
emacs,308ibs,abo-abo,1 point,Wed Mar 25 10:49:27 2015 UTC,"After installing this via MELPA, it is not found via M-x load-theme ... any idea why?"
emacs,308ibs,metaperl,2,Wed Mar 25 23:21:57 2015 UTC,"I just use it via (require 'eclipse). Since there's no concept of unloading themes, load-theme isn't very useful."
emacs,308ibs,abo-abo,1 point,Thu Mar 26 07:54:16 2015 UTC,I've opened an issue to fix this + code.  I've provided a pull request to fix this.
emacs,308ibs,instant_sunshine,3,Thu Mar 26 00:18:10 2015 UTC,Just switched to gruvbox a few days ago. Feels good.
emacs,308ibs,sunng,3,Wed Mar 25 11:54:44 2015 UTC,Leuven.
emacs,308ibs,gnuvince,3,Wed Mar 25 17:40:05 2015 UTC,cyberpunk
emacs,308ibs,JesterSks,1 point,Wed Mar 25 17:54:01 2015 UTC,"Cyberpunk with:  (eval-after-load ""org""   '(progn      (set-face-background 'org-block ""#000000"")      (set-face-background 'org-block-begin-line ""#000000"")      (set-face-background 'org-block-end-line ""#000000"")      (set-face-background 'org-column ""#000000"")      (set-face-attribute 'org-level-1 nil :height 1.0)      (set-face-attribute 'org-level-2 nil :height 1.0)      (set-face-attribute 'org-level-3 nil :height 1.0)      )) (set-face-foreground 'mode-line ""#dd5608"") (set-face-background 'mode-line ""#111111"") (set-face-attribute  'mode-line nil :box '(:line-width -1 :color ""#dd5608"")) (set-face-background 'mode-line-inactive ""#111111"")"
emacs,308ibs,Woodstock46,1 point,Wed Mar 25 18:47:54 2015 UTC,what does this do?
emacs,308ibs,tending,1 point,Wed Mar 25 21:09:07 2015 UTC,Sets some changes on org mode and also the modeline.
emacs,308ibs,instant_sunshine,3,Thu Mar 26 00:23:31 2015 UTC,"Call me old school but this is all I need:  (when window-system    (add-to-list 'default-frame-alist '(background-color . ""black""))    (add-to-list 'default-frame-alist '(foreground-color . ""wheat"")))"
emacs,308ibs,bitsan,3,Wed Mar 25 18:35:00 2015 UTC,"Badger.  I also like ample-flat, just wish it had smart-mode-line support -- 'cause I never quite got it to feel right."
emacs,308ibs,ipjk,2,Wed Mar 25 20:52:27 2015 UTC,"Thanks for the link. Thats absolutely beautyfull, and now my new default theme. :)"
emacs,308ibs,gkunno,3,Thu Mar 26 18:37:05 2015 UTC,"I use solarized-emacs (solarized-dark, actually)"
emacs,308ibs,shackra,2,Thu Mar 26 06:15:17 2015 UTC,minimal-light...
emacs,308ibs,yngccc,2,Thu Mar 26 17:36:37 2015 UTC,"Darktooth (https://github.com/emacsfodder/emacs-theme-darktooth) currently, but am a frequent switcher to keep it fresh (previously it was tangotango, also a very nice theme: https://github.com/juba/color-theme-tangotango)"
emacs,308ibs,volca02,2,Wed Mar 25 13:53:46 2015 UTC,Still using and adjusting my own planet theme
emacs,308ibs,tsuru,2,Wed Mar 25 14:20:40 2015 UTC,"I really like planet-theme,  are you the author? Would you consider considering these some time soon?   ;; to consider:  ;; '(font-lock-comment-delimiter-face ((t (:foreground ""#2e3436"" :weight bold))))  ;; '(font-lock-doc-face               ((t (:foreground ""#00815b""))))  ;; '(font-lock-negation-char-face     ((t (:foreground ""#c3ab15""))))  ;; '(font-lock-preprocessor-face      ((t (:foreground ""#c3ab15"" :weight bold))))"
emacs,308ibs,jordonbiondo,1 point,Wed Mar 25 15:52:13 2015 UTC,"Yes, I'm the author and had just let the Github issue you filed fall by the wayside. I've corrected now and partially accepted some of the changes...in spirit. This theme is pretty functional for me and my day-to-day work so if you happen to file another issue (always appreciated), feel free to ping me in the issue comments if I appear incommunicado; it's not intentional"
emacs,308ibs,tsuru,2,Thu Mar 26 03:06:56 2015 UTC,this is a good theme to ingest 'shrooms to.
emacs,308ibs,metaperl,1 point,Wed Mar 25 23:15:08 2015 UTC,"Assuming this is pejorative, is there a particular mode or use case (terminal?) where this experience manifests?"
emacs,308ibs,tsuru,1 point,Thu Mar 26 03:09:12 2015 UTC,Planet theme is definitely my go-to.
emacs,308ibs,PyLog,2,Wed Mar 25 17:21:47 2015 UTC,I've been using deeper-blue for a few months. It's the first long lasting theme change I've ever made. I'm  feeling ready for something new though.
emacs,308ibs,elkano1003,2,Wed Mar 25 14:54:40 2015 UTC,"wheatgrass is the most console-ish theme I found, and the one I use on my init.el."
emacs,308ibs,magullo,2,Thu Mar 26 10:33:53 2015 UTC,I like subatomic
emacs,308ibs,csvedin,2,Fri Mar 27 07:24:23 2015 UTC,I use my own flatui-theme
emacs,308ibs,ares623,1 point,Fri Mar 27 07:24:26 2015 UTC,"My default setting is zenburn with a darker background.  (load-theme 'zenburn) (set-background-color ""#2b2b2b"")"
emacs,308ibs,aquatox,1 point,Wed Mar 25 11:36:27 2015 UTC,Zenburn and Dream.
emacs,308ibs,tuhdo,1 point,Wed Mar 25 13:39:52 2015 UTC,I use default-black by Magnar and love it
emacs,308ibs,lederp,1 point,Wed Mar 25 14:05:35 2015 UTC,oldlace
emacs,308ibs,schlenderer,1 point,Wed Mar 25 14:39:03 2015 UTC,My own: https://github.com/aerique/emacs-theme-aerique#readme  With the usual explanation: the point of this theme is not so much colors as partitioning the text into easily parsable pieces.  It does need some work though.
emacs,308ibs,aerique,1 point,Wed Mar 25 14:46:40 2015 UTC,I'm using a port of IntelliJ's Darcula theme for Emacs.  https://github.com/fommil/darcula-theme-emacs
emacs,308ibs,NobleEater,1 point,Wed Mar 25 16:34:16 2015 UTC,Recently switched to darktooth from twilight from another thread. Love it.  https://github.com/emacsfodder/emacs-theme-darktooth  (use-package darktooth-theme   :ensure t) (load-theme 'darktooth t)
emacs,308ibs,kovak,2,Wed Mar 25 16:37:33 2015 UTC,You can put that load-theme inside use-package after :config.
emacs,308ibs,kaushalmodi,1 point,Wed Mar 25 23:13:37 2015 UTC,"I use the emacs version of base16 (the tomorrow flavour).  edit: and I just found out that sanityinc is a much better version of it, nice!"
emacs,308ibs,faldborg,1 point,Wed Mar 25 20:56:21 2015 UTC,"I use ahungry-theme, available in GNU elpa or melpa. Love my transparent backgrounds in urxvt"
emacs,308ibs,xenow,1 point,Wed Mar 25 22:45:41 2015 UTC,ujelly
emacs,308ibs,GTChessplayer,1 point,Wed Mar 25 23:05:08 2015 UTC,Railscasts https://github.com/olegshaldybin/color-theme-railscasts
emacs,308ibs,dr_theopolis,1 point,Thu Mar 26 00:33:50 2015 UTC,Darkmine!
emacs,308ibs,piotr404,1 point,Thu Mar 26 07:16:31 2015 UTC,"I personally like dark, high contrast themes, so grandshell is a favorite. There are some other great ones on this thread, too."
emacs,308ibs,nivekuil,1 point,Fri Mar 27 00:27:57 2015 UTC,I use a slightly-modified version of base16-tomorrow.
emacs,308ibs,Archenoth,1 point,Fri Mar 27 20:52:39 2015 UTC,Does anyone know which themes are being used in these screenshots?  http://company-mode.github.io/images/company-elisp.png  http://company-mode.github.io/images/company-semantic.png
emacs,308ibs,heyavtar,2,Sat Mar 28 05:30:11 2015 UTC,The second one looks like Birds of Paradise
emacs,308ibs,cpaulik,1 point,Sat Mar 28 09:04:47 2015 UTC,Thanks!
emacs,308ibs,heyavtar,1 point,Sat Mar 28 12:36:43 2015 UTC,"I've always loved comidia and did a deftheme port of it, plus some tweeks:  comidia-mod-theme."
emacs,308ibs,p3r7,1 point,Sun Apr 5 16:12:11 2015 UTC,"twilight-anti-bright  tried zenburn (too little contrast), solarized-dark (colors fit, but IMO most shades are just ugly and purple-haze (pretty but too little contrast for my liking)"
emacs,308ibs,XANi_,1 point,Wed Mar 25 16:34:34 2015 UTC,"jade dragon!  Saw this guys layout, and fell in love with it.   http://emacsfodder.github.io/blog/jadedragon-theme/"
emacs,308ibs,guti495,1 point,Mon Apr 27 01:22:48 2015 UTC,"I'm use spolsky, also for term."
emacs,308ibs,AfsmNGhr,-3,Sat Jun 13 09:56:25 2015 UTC,"I don't use themes, I have too much else to do."
emacs,308ibs,RobThorpe,7,Wed Mar 25 16:56:06 2015 UTC,like reading reddit? ;)
emacs,308ibs,xoo-,2,Wed Mar 25 21:34:31 2015 UTC,Yeah.
emacs,308ibs,RobThorpe,2,Wed Mar 25 22:36:55 2015 UTC,thought you were busy.
emacs,308ibs,xoo-,2,Wed Mar 25 23:26:36 2015 UTC,Hmm installing a theme on Melpa takes a few second. Why not?
emacs,308ibs,tuhdo,1 point,Wed Mar 25 17:12:18 2015 UTC,"I mean I haven't got the time to figure out which one to use. Besides, what's wrong with the default?"
emacs,308ibs,RobThorpe,1 point,Wed Mar 25 18:05:33 2015 UTC,"Nothing wrong. It's a fine standard theme. But if we can make it aesthetically better, why not? Or, someone may prefer Emacs minimal in colors, like this theme. Or sometimes we just want to refresh out old Emacs with a different look and feel."
emacs,308ibs,tuhdo,2,Wed Mar 25 18:11:31 2015 UTC,Tao theme should be on MELPA!
emacs,308vwf,phyrne,5,Wed Mar 25 12:47:03 2015 UTC,Looks like spacemacs.
emacs,308vwf,politza,1 point,Wed Mar 25 12:51:39 2015 UTC,"Ah! So it is spacemacs... Thanks for letting me know, that does indeed seem to be the case.    Perhaps I can take the approach of grabbing the relevant code"
emacs,308vwf,instant_sunshine,2,Wed Mar 25 12:58:52 2015 UTC,"It's just powerline, you can set different separators.  https://github.com/emacsfodder/emacs-mainline/blob/master/emacs-main-line-examples.png  They were merged back in from my mainline fork of powerline."
emacs,308vwf,yuppienet,1 point,Mon Mar 30 17:05:32 2015 UTC,"Awesome, thanks for letting me know"
emacs,308vwf,yuppienet,1 point,Tue Mar 31 09:07:17 2015 UTC,"Hello there, did you manage to grab the relevant code?"
emacs,308vwf,trishume,1 point,Thu Mar 26 16:27:35 2015 UTC,"Hey! Alas, I did not. Mind you, I didn't put much effort in.  I'd recently customized my mode-line myself to something very simplistic - and after a bit of thinking, came to the conclusion that I'd prefer to keep it as is anyway."
emacs,308vwf,many_cakes,3,Thu Mar 26 17:05:01 2015 UTC,"I managed to reproduce -somewhat- the modeline of the picture.  The relevant code is:   load either powerline or main-line mode (I used main-line, spacemacs uses powerline) and customize the color and separators Use diminish to change the mode lines to unicode characters. For example, here I change the projectile mode line marker:    (require 'diminish) (eval-after-load ""projectile"" '(diminish 'projectile-mode ""Ⓟ""))"
emacs,308vwf,josuahdemangeon,1 point,Fri Apr 3 15:58:48 2015 UTC,Nice work! Appreciate it :)
emacs,308vwf,milkypostman,0,Fri Apr 3 17:13:06 2015 UTC,"The code is possible to extract but would take some work and you would lose some of the cool things. Why not just switch to Spacemacs instead? I promise you it's cool, and the next release will have a mode for people who like emacs bindings over vim ones."
emacs,308vwf,instant_sunshine,2,Fri Mar 27 03:50:03 2015 UTC,"That's cool to hear about the choice for emacs bindings in the next release. Though, using such a preconfigured environment doesn't really work for me. I like building my config piece by piece, it helps me learn and know each piece of my editor intimately :)"
emacs,308vwf,Ironballs,5,Sat Mar 28 19:43:46 2015 UTC,This is Spacemacs. The mode-line is using powerline.el. The particular code you might be interested in is here: https://github.com/syl20bnr/spacemacs/blob/master/spacemacs/packages.el
emacs,305zv2,joehillen,7,Tue Mar 24 19:32:42 2015 UTC,Clearly this ZEEF thing isn't so popular. Emacs is now the second most popular topic on the site.
emacs,305zv2,RobThorpe,1 point,Tue Mar 24 23:55:11 2015 UTC,"I like the site, but it doesn't really have a lot of return value."
emacs,305zv2,myeffort,1 point,Wed Mar 25 00:45:51 2015 UTC,I think the contents of the page should be aggressively refined. Probably down to a single distinguishable feature or even programming pattern featured in the source code.
emacs,305xw4,mixandgo,2,Tue Mar 24 19:18:33 2015 UTC,I'm surprised he gets any Ruby written done among all that elisp configuring. :)
emacs,305xw4,RobThorpe,1 point,Tue Mar 24 22:30:33 2015 UTC,He doesn't. That's why he switched to vim :)
emacs,305xw4,xskander,4,Wed Mar 25 09:58:25 2015 UTC,I predict he'll find another source of distraction.
emacs,305xw4,RobThorpe,2,Wed Mar 25 13:15:41 2015 UTC,"Fuck, you just had to say that didn't you (licks wounds)"
emacs,307e24,striving00,2,Wed Mar 25 01:46:06 2015 UTC,"So, I'm not sure how exactly emacs 23 does it -- either by adding new buffers as 'previous' to the old ones, or by using different keybindings for C-x C-<left> and friends... but if you just care about left and right working like you expect, you can emulate the latter by adding:  (global-set-key (kbd ""C-x <C-left>"") 'next-buffer) (global-set-key (kbd ""C-x <left>"") 'next-buffer) (global-set-key (kbd ""<XF86Back>"") 'next-buffer) (global-set-key (kbd ""C-x <C-right>"") 'previous-buffer) (global-set-key (kbd ""C-x <right>"") 'previous-buffer) (global-set-key (kbd ""<XF86Forward>"") 'previous-buffer)   .. to your init.el for the emacs 24 machine.  It will swap those keybindings to run the opposite command and should do what you expect."
emacs,307e24,agnudawn,1 point,Wed Mar 25 03:46:21 2015 UTC,"Thanks!  When I do M-x next-buffer in emacs 23, I get:   ""You can run the command 'next-buffer' with C-x <C-right>""   So I guess the bindings haven't changed.  Anyway, I'll play with this..."
emacs,307e24,agumonkey,1 point,Wed Mar 25 04:23:05 2015 UTC,"I'll ask the usual, did you run emacs -Q ? It's probably a trailing (next-buffer) in your init.el."
emacs,304hmw,BruceConnor,1 point,Tue Mar 24 12:23:58 2015 UTC,"I was going to make a joke, that it should have been called sequ.el, but then I remembered, that they are called sequences and not sequels."
emacs,304hmw,CQQL,2,Tue Mar 24 19:12:12 2015 UTC,"Oh, now I want to write sequ.el! What could it be about?"
emacs,304hmw,flexibeast,3,Tue Mar 24 19:54:45 2015 UTC,fountain-mode++? ;-)
emacs,304hmw,agumonkey,1 point,Wed Mar 25 01:54:26 2015 UTC,"I first read it as sq.el, a relational DSL."
emacs,304hmw,Ironballs,1 point,Tue Mar 24 19:46:24 2015 UTC,Looks nice. When is 25.1 going to be released? This year? Nobody knows?
emacs,304hmw,ericjmr,2,Tue Mar 24 13:28:52 2015 UTC,"24.5 is set to come out next week, so maybe 25.1 won't be too far behind.  I briefly skimmed the mailing list and didn't see anything about a release schedule, but I could have easily missed it."
emacs,304hmw,tzz,1 point,Tue Mar 24 13:41:38 2015 UTC,"Indeed, there's no planned schedule yet. But I wouldn't be surprised if it came out this year."
emacs,304hmw,ReneFroger,2,Tue Mar 24 16:03:48 2015 UTC,Emacs  25.1 will be out before Christmas.
emacs,304hmw,tzz,2,Tue Mar 24 21:53:44 2015 UTC,Source?
emacs,304hmw,ReneFroger,2,Tue Mar 24 22:51:11 2015 UTC,"Sorry, I thought everyone knew the joke by now (""I didn't say it was going to be Christmas 2015"")."
emacs,303vjl,small-wolf,3,Tue Mar 24 06:44:39 2015 UTC,"My bet would be that you need to use the evil keybinding system to set bindings for both insert mode and normal mode. My best guess is as follows, but I'm not an evil user.   (define-key evil-normal-state-map (kbd ""M-<space>"") 'evil-local-mode) (define-key evil-insert-state-map (kbd ""M-<space>"") 'evil-local-mode)"
emacs,303vjl,flarkis,4,Tue Mar 24 08:07:57 2015 UTC,"Definitely. When you are in evil-normal-state (or any other state for that matter) normal emacs keybindings don't work. To the OP, though, C-z is bound (AFAIK in all evil keymaps) to evil-emacs-state which puts the current buffer into ""normal"" emacs state, while leaving evil available (just a C-z away)"
emacs,303vjl,rberenguel,3,Tue Mar 24 09:27:33 2015 UTC,"Global keybind works fine for me here with emacs -Q. I don't have key-chord here, so I cannot comment on that.  However, why don't you just toggle to and from Emacs state? C-z is the default key for that, you can customize evil-toggle-key to make it M-SPC instead."
emacs,303vjl,wasamasa,1 point,Tue Mar 24 09:02:22 2015 UTC,"Thanks, just using C-z is way easier than what I was trying to do. I haven't been able to get any command with meta as a modifier to work in evil normal mode or evil insert mode."
emacs,303vjl,wasamasa,1 point,Wed Mar 25 00:02:07 2015 UTC,Are you by chance using a non-graphical Emacs instance?
emacs,303vjl,RobThorpe,1 point,Wed Mar 25 06:22:36 2015 UTC,"I generally use the graphical emacs instance ... I'm using Emacs 24.4.1 and Evil 1.0.9 . And to make things even stranger I can use meta as a modifier when running emacs -nw  update: using the most recent version of evil from https://gitorious.org/evil/pages/Home fixed the problem completely.  The current stable version is 1.0.9 (as listed on the emacs wiki), but the CHANGE.org in the repo I just downloaded only lists changes as of 1.0.7 . Now I'm really confused."
emacs,303051,Mr_Lavos,2,Tue Mar 24 01:29:33 2015 UTC,"Perhaps I'm missing something, but mg is in the testing repository (maybe not the version you want, but it is there)."
emacs,303051,bill_tampa,1 point,Tue Mar 24 11:18:29 2015 UTC,What do I say into the terminal to install it?
emacs,303051,bill_tampa,2,Tue Mar 24 21:36:20 2015 UTC,"to install stuff in debian you need to be root, which you can obtain by using su or sudo. If not set up properly, read about su and sudo.   if your sources.list file (in /etc/apt/sources.list) is set up properly (ie if it includes a pointer to the debian repository matching the debian version you installed) you can use the command:  sudo apt-get install mg  (if sudo is set up properly, and your sources.list file points to the correct debian repository. sudo gives you root (after you enter your password), apt-get install is the command to install a program from the repositories listed in the sources.list file, and 'mg' is the thing you want to install)."
emacs,303051,gnuvince,1 point,Wed Mar 25 00:19:05 2015 UTC,I wrote this a few months ago: http://cs.mcgill.ca/~vfoley1/posts/2014-06-11-installing-mg.html.  Note that I don't know that the latest versions of mg will compile since they use reallocarray(3) and I don't know if that has made it into libbsd yet.
emacs,303051,balkenbrij,1 point,Tue Mar 24 03:00:45 2015 UTC,"you can compile a static libbsd in say /tmp/libbsd and modify the makefile to include libbsd.a, that's how i installed it on a wheezy system.  snippet from GNUmakefile:    #BSD_CPPFLAGS:=$(shell $(PKG_CONFIG) --cflags libbsd-overlay)  #BSD_LIBS:=   $(shell $(PKG_CONFIG) --libs libbsd-overlay)  BSD_CPPFLAGS:=-isystem /tmp/libbsd/include/bsd -DLIBBSD_OVERLAY  BSD_LIBS:=    /tmp/libbsd/lib/libbsd.a   to compile a downloaded libbsd use   ./configure --enable-static --prefix=/tmp/libbsd   /tmp/libbsd can be removed afterwards."
emacs,302e2j,swathe,3,Mon Mar 23 22:36:39 2015 UTC,You can see all the faces available and their names by doing: M-x list-faces-display.  See: http://www.emacswiki.org/emacs/FaceList
emacs,302e2j,grabyourmotherskeys,2,Tue Mar 24 10:07:28 2015 UTC,Thanks bud!  I've since gone in and chosen a saner colour and added a couple of extra TODO states.
emacs,300s5c,lykwydchykyn,12,Mon Mar 23 15:43:18 2015 UTC,"It's a variable in sql-mode called sql-product, and you can set it at the start of the script with a directive to emacs.  Edit, at the top of your file, prepend the following:  -- -*- mode:sql sql-product:oracle -*-"
emacs,300s5c,bigfig,3,Mon Mar 23 15:57:52 2015 UTC,Works perfectly.  Thanks!
emacs,300s5c,vermiculus,3,Mon Mar 23 21:09:11 2015 UTC,You can also do this via M-x add-file-local-variable. It adds a commented-out section at the bottom of the file instead of trying to shunt everything onto one line.
emacs,300s5c,wasamasa,6,Mon Mar 23 23:06:40 2015 UTC,It should be sufficient to create a file-local variable with M-x add-file-local-variable-prop-line; using the key sql-dialect and postgres will insert the correct line for you.
emacs,300s5c,vermiculus,2,Mon Mar 23 16:07:40 2015 UTC,Don't use that function directly – use M-x add-file-local-variable.
emacs,300r23,dgellow,3,Mon Mar 23 15:34:59 2015 UTC,https://github.com/aki2o/emacs-tss
emacs,300r23,instant_sunshine,1 point,Tue Mar 24 00:36:44 2015 UTC,I would be eternally grateful if on-the-fly error-checking was possible.
emacs,300r23,ROBOT-MAN,1 point,Thu Mar 26 02:56:44 2015 UTC,The emacs-tss project seems to be not super active anymore. This is disappointing. I'm really interesting in getting support equal to that of the tooling in visual studio code but I don't have the chops (nor time) to write that kind of elisp.
emacs,300r23,jhirn,1 point,Fri May 8 17:01:06 2015 UTC,"This thread has been linked to from another place on reddit.   [/r/typescript] What's the current state of TypeScript support in emacs ?   If you follow any of the above links, respect the rules of reddit and don't vote. (Info / Contact)"
emacs,30017l,tty-tourist,1 point,Mon Mar 23 11:09:50 2015 UTC,thank you for this!
emacs,30017l,daslu,2,Mon Mar 23 12:52:48 2015 UTC,Sure. I have a console-only machine for running emacs and the missing keys have annoyed me for more than a year. Finally figured it out and made an update to the emacs wiki ...
emacs,30017l,mguzmann,1 point,Mon Mar 23 12:56:27 2015 UTC,I'm not sure I understand. Will this make it possible to use all key bindings in emacs when I start it with -nw in the console?
emacs,30017l,mguzmann,1 point,Mon Mar 23 13:47:35 2015 UTC,"Yes, it will. In the console you don't have to start emacs with -nw, btw."
emacs,30017l,mguzmann,1 point,Mon Mar 23 14:06:40 2015 UTC,what do you mean? if I don't it starts with the graphical interface.
emacs,30017l,rootis0,2,Mon Mar 23 14:09:49 2015 UTC,I'm not talking about a terminal emulator but the Linux Console. The one you enter before starting x.  This might work for some terminal emulators as well but key trouble in emulators could also be caused by other quirks.
emacs,30017l,milkypostman,1 point,Mon Mar 23 14:16:16 2015 UTC,"ah, I get it now."
emacs,30017l,rootis0,1 point,Mon Mar 23 14:25:43 2015 UTC,"That was nice.  A similar problem appears on the KDE's terminal, not all keys work.  GNOME Terminal, Xterm, iTerm2 (on Mac) have excellent support for console keys. ""emacs -nw"" works out of the box. Even for things like ""Shift+Arrow"" for selection."
emacs,3005hx,bascht,8,Mon Mar 23 12:08:48 2015 UTC,misc.el has both forward-to-word and backward-to-word. Use (require 'misc) in your init.el and bind the latter command to a key.
emacs,3005hx,wasamasa,1 point,Mon Mar 23 14:02:31 2015 UTC,Thaaaaanks! I didn't know about misc.el – that's a real time saver!
emacs,3005hx,wasamasa,2,Mon Mar 23 14:12:22 2015 UTC,It's a place for a bunch of lesser known things. I guess the most well-known one would be the butterfly command.
emacs,3005hx,xkcd_transcriber,1 point,Mon Mar 23 15:08:54 2015 UTC,"Image  Title: Real Programmers  Title-text: Real programmers set the universal constants at the start such that the universe evolves to contain the disk with the data they want.  Comic Explanation  Stats: This comic has been referenced 342 times, representing 0.6013% of referenced xkcds.    xkcd.com | xkcd sub | Problems/Bugs? | Statistics | Stop Replying | Delete"
emacs,3005hx,instant_sunshine,1 point,Mon Mar 23 15:09:00 2015 UTC,My favorite in misc.el is copy-from-above-command it's like the bastard cousin of indent-relative
emacs,3005hx,instant_sunshine,1 point,Tue Mar 24 01:14:06 2015 UTC,For quick link reference https://github.com/emacs-mirror/emacs/blob/master/lisp/misc.el
emacs,3005hx,excitedaboutemacs,3,Tue Mar 24 00:39:46 2015 UTC,M-b M-b M-f
emacs,3005hx,RobThorpe,1 point,Mon Mar 23 13:55:53 2015 UTC,"Thats what I was using until now, but it felt awkward. :D"
emacs,3005hx,tampix77,1 point,Mon Mar 23 14:10:51 2015 UTC,"The problem is that it's only useful if you can map it to keys that are easy to hit. I've considered mapping it, but I can't find and keybindings that are good candidates, too much is used. One possibility is to map the Windows key or apps/menu key to super then make these command S-b S-f, etc."
emacs,3005hx,locbrean,1 point,Wed Mar 25 16:17:39 2015 UTC,Just for the evil users out there that don't already know it:   ge to go to the end of the previous word gE to go to the end of the previous WORD
emacs,2zyuun,ReneFroger,7,Mon Mar 23 01:59:23 2015 UTC,"Looks good, thanks for sharing it with us. I added Olivetti to my list of Emacs packages/things."
emacs,2zyuun,username223,3,Mon Mar 23 11:15:28 2015 UTC,"Thanks, that's a super collection you have there."
emacs,2zyuun,kaushalmodi,3,Mon Mar 23 12:25:48 2015 UTC,"A.k.a. ""typewriter mode?""  Now all Emacs is missing is beep mode."
emacs,2zyuun,Knusper2000,1 point,Mon Mar 23 15:37:11 2015 UTC,"Is the ""beep mode"" supposed to annoy the user if (s)he tries to use arrow keys, Enter, backspace, etc instead of the default vi bindings? If so, emacs has a similar mode called hardcore-mode. It doesn't beep but it annoys you into using the C- bindings for navigation."
emacs,2zyuun,RobThorpe,1 point,Mon Mar 23 15:51:06 2015 UTC,"Hehe yep, I write first drafts on my typewriter, an Olivetti Lettera 32, so it seemed like a good name."
emacs,2zyuun,monotux,2,Tue Mar 24 02:17:46 2015 UTC,"Good name. As my dad also used an Olivetti typewriter all the time, I immediatly know what it was supposed to do."
emacs,2zyuun,chrispoole,2,Sun Apr 19 09:32:48 2015 UTC,"Since we have large, widescreen monitors now this is a good idea.  I achieve something similar by setting up Emacs to use an ~80-column wide frame in the middle of my monitor.  When I want to view something wide I press F11 to switch to full-screen mode then F11 again to switch back."
emacs,2zxwqf,many_cakes,8,Sun Mar 22 21:13:32 2015 UTC,See also eval-print-last-sexp.
emacs,2zxwqf,___violet___,6,Sun Mar 22 21:17:32 2015 UTC,Sure sorry about loving Lisp hacking. You're life will never be quite the same. Happy Gnu Shaving!  :-D
emacs,2zxwqf,howardthegeek,8,Sun Mar 22 21:37:26 2015 UTC,"Seriously, my productivity levels have been in the toilet for the last few days because I can't stop messing with the editor!"
emacs,2zxwqf,wrong_assumption,-2,Sun Mar 22 21:40:11 2015 UTC,"That's because you're shopping, not creating: https://news.ycombinator.com/item?id=9070488"
emacs,2zxwqf,RobThorpe,3,Mon Mar 23 02:48:36 2015 UTC,"I'd say I'm actually learning how to use my text editor, and learning lisp, and I strongly think I'm creating. In fact the small things I've done with elisp have been some of the most creative programming I've done in months.  My trouble is time management, and the fact that playing elisp-golf is much more fun than data entity resolution."
emacs,2zxwqf,ihatecatsandpeople,5,Mon Mar 23 06:24:48 2015 UTC,"There's a feature in Emacs that provides something quite similar, M-x ielm."
emacs,2zxwqf,rjf89,2,Mon Mar 23 01:30:41 2015 UTC,"Yeah, I knew about this (and the elisp repl). However, I didn't want to have to teach the semantics of using a repl. C-x C-e was confusing enough!"
emacs,2zxwqf,ccharles,1 point,Mon Mar 23 06:28:44 2015 UTC,so eshell is out? eshell is a nice and simple emacs-lisp repl
emacs,2zxwqf,vermiculus,3,Mon Mar 23 16:02:39 2015 UTC,"Nice snippet!  Not sure if you've seen it before, but something I've played around with in the past is litable - adds some nice instarepl like capabilities: https://github.com/Fuco1/litable"
emacs,2zxwqf,schlenderer,1 point,Sun Mar 22 23:20:19 2015 UTC,"Oh, nice! That repo seemed pretty dead, so I didn't want to go figure out what the deal was and just wrote this bit myself. But I probably should have gone for that..."
emacs,2zxwqf,Trevoke,3,Sun Mar 22 23:27:50 2015 UTC,"Maybe... or maybe not. litable fills a slightly different need, and you're right that it appears dead (the last commit is over a year old).  One of the reasons that Emacs and lisp are great is that it's possible to do what you did."
emacs,2zxwqf,rootis0,2,Mon Mar 23 00:00:28 2015 UTC,"So, uh, I haven't tried it yet, but what happens if pp-to-string returns something that's more than one line? :)"
emacs,2zxwqf,abo-abo,2,Mon Mar 23 01:03:39 2015 UTC,Probably it breaks! I spent a little more time last night figuring out overlays but couldn't get them to work the way I'd like.
emacs,2zzgro,contrarianism,5,Mon Mar 23 05:45:13 2015 UTC,DAE have a super|meta|hyper key?
emacs,2zzgro,instant_sunshine,3,Mon Mar 23 08:34:26 2015 UTC,Emacs. Take super meta hyper control over your computer.
emacs,2zzgro,TarMil,2,Mon Mar 23 10:32:37 2015 UTC,Emacs = esc meta alt control shift.  I wish I still had a XL1201 keyboard.  I wonder how hard it would be to homebrew these days.
emacs,2zzgro,lambda_abstraction,3,Wed Mar 25 19:56:53 2015 UTC,"Ouch, that's looks not good. And a tip for Evil users.   (define-key evil-normal-state-map (kbd "";"") 'helm-M-x) ; Keymap semicolon to Helm M-x  So you have full control on your homerow, without clinging every time to reach that frequently used command."
emacs,2zzgro,ReneFroger,2,Mon Mar 23 11:12:20 2015 UTC,'helm-M-x  smex   What?
emacs,2zzgro,AnAirMagic,1 point,Mon Mar 23 19:14:43 2015 UTC,"Touche. I mapped to Smex in the past. But switched afterwards to Helm, but I ignored my comments like always. Changed now, thanks for your attention."
emacs,2zzgro,ReneFroger,1 point,Mon Mar 23 19:23:37 2015 UTC,"I was just having some fun :)  Have you seen Uncle Bob's approach to comments? Maybe a helper function like  (keymap "";"" 'helm-M-x)   will do the trick?"
emacs,2zzgro,AnAirMagic,1 point,Mon Mar 23 19:26:28 2015 UTC,"Thanks for your suggestion, interesting blog from Uncle Bob!   What do you mean with a helper function? If you really want to keymap the ';'-character, I would not use it. I use it a lot in PHP-files or Javascript. So sometimes, I just want to insert ';' instead toggling helm-M-x. But your help is appreciated."
emacs,2zzst8,aurelius23,2,Mon Mar 23 08:53:46 2015 UTC,"(tags-todo ""-tag"")"
emacs,2zzst8,kcin,1 point,Mon Mar 23 13:02:32 2015 UTC,"You mean like like the agenda view where you can see tasks by date?  My solution is as following:  I don't want 'drill' and 'noagenda' tagged items to be shown. I press F9 to see my 'daily' agenda.  (global-set-key (kbd ""<f9>"") 'my/agenda-work-day) (defun my/agenda-work-day ()    (interactive)   (org-agenda nil ""w"") )  (setq org-agenda-custom-commands    (quote     (      (""w"" ""Agenda without drill tags"" agenda """"       ((org-agenda-span 1)        (org-agenda-tag-filter-preset     (quote      (""-drill"" ""-noagenda""))))))))  I recommend to try to customize 'org-agenda-custom-commands'  and play with the 'org-agenda-span' and 'org-agenda-tag-filter-preset' options.  I hope it helps, if not feel free to ping me."
emacs,2zy06f,howardthegeek,3,Sun Mar 22 21:40:41 2015 UTC,"The recursive find-file-in-heirarchy function will walk up the directory tree looking for a particular file name   You could use locate-dominating-file instead:   (locate-dominating-file FILE NAME)  Look up the directory hierarchy from FILE for a directory containing NAME. Stop at the first parent directory containing a file NAME, and return the directory.  Return nil if not found. Instead of a string, NAME can also be a predicate taking one argument (a directory) and returning a non-nil value if that directory is the one for which we're looking."
emacs,2zy06f,___violet___,3,Sun Mar 22 21:51:58 2015 UTC,"There's already a feature for doing this see (info ""(emacs) File Shadowing"")"
emacs,2zy06f,RobThorpe,2,Mon Mar 23 01:36:22 2015 UTC,"This particular problem can also be solved with Lsyncd, which is available in most Linux package managers and now also from Homebrew (brew install lsyncd).  Lsyncd uses kernel-level file change notifications (limited to a directory that you specify) to kick off a sync task, which makes it fast, efficient, and versatile. I use it to live-copy changes to files I am editing locally to the server where they are run."
emacs,2zy06f,bakuretsu,1 point,Mon Mar 23 01:33:32 2015 UTC,"On Macs, the Finder can trigger a script due to any change of a file in a directory (Apple calls these Folder Actions). I was tempted to try and learn enough of this so I could rsync all local file changes to my system in the lab whenever I saved a file...  Seemed easier for me to just modify Emacs."
emacs,2zyl87,TheFrenchPoulp,3,Mon Mar 23 00:34:45 2015 UTC,"You can configure the value of html-tag-face-alist.  See 'C-h v html-tag-face-alist' for the current value.  (require 'sgml-mode) (add-to-list 'html-tag-face-alist '(""h1"" . default))   ..in your init.el should remove stylization from <h1> elements.  If you have the option though, I recommend web-mode for HTML documents.  It's a bit nicer in a few ways.  You can use the Emacs customize system a la 'M-x customize-face' with your cursor over the target face to configure them individually."
emacs,2zyl87,agnudawn,1 point,Mon Mar 23 01:31:19 2015 UTC,"I tried to find out which face was styling <h1>'s, with no luck, as M-x describe-face and M-x helm-colors didn't return anything of help. For the next time I am encountering a similiar issue, can you tell me how did you find out about html-tag-face-alist ? Did you just display and filter all html-* variables ?  I did see web-mode quite some time ago, but was too overwhelming back then. I think I'll go web-mode route which seems to replace several packages I'm using right now, thanks to its recent updates : ).  Thanks : j"
emacs,2zyl87,agnudawn,1 point,Mon Mar 23 05:10:20 2015 UTC,"Yeah, I used 'C-h v html-<tab>' to see the related variables and checked that the face alist had ordered pairs of tags and face names.  The customize system is pretty nice and uniform, but I don't think sgml-mode or html-mode define their own custom faces, so that's why describe-face wasn't very useful for this mode."
emacs,2zyl87,myropnous,1 point,Mon Mar 23 05:36:25 2015 UTC,Whew what theme is that?  looks great
emacs,2zvhmu,zanta78,35,Sun Mar 22 04:01:47 2015 UTC,Consistent Key bindings
emacs,2zvhmu,dr_theopolis,5,Sun Mar 22 04:15:00 2015 UTC,"What do you use for a terminal, though? M-x term doesn't exactly have consistent keybindings (changes C-x into C-c) and the other terminal emulators inside emacs weren't really that great from what I've seen."
emacs,2zvhmu,jringstad,1 point,Sun Mar 22 09:58:35 2015 UTC,multi-term can fix consistent keybinding issues
emacs,2zvhmu,adouzzy,2,Sun Mar 22 10:28:27 2015 UTC,"cool, thanks, I'll give that a shot."
emacs,2zvhmu,jringstad,1 point,Sun Mar 22 10:31:17 2015 UTC,"Term-mode has two sub-modes, ""line mode"" and ""char mode"".  Line mode enables normal Emacs keys. It's for things like the shell which only respond on a line-by-line basis, this is rather like shell-mode. For things like curses programs there's character mode. C-c C-j = Line mode, C-c C-k = character mode. Generally you want line mode and char mode only for special purposes."
emacs,2zvhmu,RobThorpe,3,Mon Mar 23 01:33:15 2015 UTC,"and consistent copy/paste, search — all the things."
emacs,2zvhmu,EatMoreCrisps,29,Mon Mar 23 14:10:21 2015 UTC,"For the terminal multiplexer, reason is easy: I use Emacs as a graphical client.  For other applications, sometimes it's just convenience:   Calculations: sure I could use gnome-calculator or whatever, but C-x * * is typed quicker and I get a more powerful calculator. IRC: Circe made me become active on IRC again; before I would open a terminal with irssi and promptly forget about it and not look for days.  With a built-in IRC client in Emacs, I get notifications in my mode bar. Terminal: sometimes I'll use a regular terminal, but if I just want to run the program I'm working on, I usually type C-x M C-p RET (switch to my ansi-term, recall the previous command and execute it) so quick that it happens before I'm consciously aware of it Magit: makes day-to-day git usage easier and more pleasant. Dired-mode: sometimes I want to do some clean up in some directories, and using the mark command in dired is the best way to select a bunch of files and directories and delete them in one fell swoop. Twitter: pretty much the same reason as Circe.  Also, if I have something to say, I'm most often already inside Emacs, so I can just do C-x t to load twitter, press c to compose a new message and C-c C-c to post it.  The whole process takes about 5-10 seconds, probably faster than going to twitter.com with Firefox.   I don't use Emacs for emails or for web browser, but the point is that as you use Emacs, you find yourself integrating it more and more into your workflow.  It doesn't have to happen at once, it doesn't have to do everything, it just needs to be exactly what you want.  If you feel more comfortable using other programs for all the tasks I listed, by all means do that.  Don't make Emacs your oS to impress people on Reddit, make it your OS because you want it to be."
emacs,2zvhmu,gnuvince,11,Sun Mar 22 05:11:38 2015 UTC,"A great response. In case you are considering moving your email into emacs, I thoroughly recommend mu4e."
emacs,2zvhmu,robstewartUK,1 point,Sun Mar 22 13:20:23 2015 UTC,"Instead of Dired, check sunrise-commander, it's been my one and only file manager for years."
emacs,2zvhmu,ayakushev,6,Sun Mar 22 16:03:15 2015 UTC,"Vim as an editor and UNIX as an IDE is nice until you use other platform, i.e. Windows. Emacs does not replace your OS; it only provides alternative and better user interface compare with using stock command line version, i.e. grep, find, git... See my old comment to understand what I mean, i.e. have a look at Live grep example.  Also, a separate terminal multiplexer is not well integrated with Emacs. For example, you run REPL in a terminal multiplexer like tmux and run a Python REPL. You get exact same bare minimum Python REPL like you would when running it in a terminal, while you get all the editing support from if you run the REPL inside Emacs (i.e. highlighting, text editing, save Python output...)."
emacs,2zvhmu,tuhdo,1 point,Sun Mar 22 05:24:14 2015 UTC,"I think bpython is meant to be pretty snazzy in the terminal, and one can set vim keys in terminals... Both on my todo list, I've not done either!"
emacs,2zvhmu,y45y564,1 point,Sun Apr 26 16:42:47 2015 UTC,"There's more than just key bindings. Having a REPL in an Emacs buffer meaning that you can have syntax highlighting, auto-completion and all editing support (i.e. you can use evil-surround - the equivalent to vim-surround in your REPL) from your editor."
emacs,2zvhmu,tuhdo,1 point,Sun Apr 26 17:06:58 2015 UTC,"syntax highlighting : https://youtu.be/sF6vEX2ivHY?t=1550  I haven't tried the vimkeys terminal things (there was one on r vim the other week that looked good), I'm not sure if it's literally vim in the terminal though, which is what you seem to be suggesting that the Emacs one functions as? Which is pretty jazzy if so"
emacs,2zvhmu,y45y564,1 point,Sun Apr 26 20:32:37 2015 UTC,"If a REPL is running inside Emacs, it gets all the features that Emacs support. For example, imagine that if you can run a REPL inside Vim, then whatever completion engine you are using (i.e. NeoComplete or YCM...), you can use that to complete when you type on the REPL. Or, if you use UltiSnips, you can expand snippets in your REPL. And you have a full functional Vim in your REPL too i.e. text objects and motion commands..., not just some rudimentary key bindings at best."
emacs,2zvhmu,tuhdo,5,Sun Apr 26 20:41:45 2015 UTC,"I use Emacs for pretty much everything, besides Keepass and Firefox which I use for things that it can't do. And although I use i3wm on Xubuntu, yes, Emacs is pretty much my OS, and I could do with it on top of any system. All I'd need besides would be git, rcs, Keepass and some decent web browser.  The reason for this is Elisp. With it, I do not need to know tens of configuration grammars and/or programming languages. I can create little procedures for getting things done, and I can easily integrate different parts of it. For example, I can write a little function to export my markdown to a buffer as HTML and render it using the new SHR mode[1]. To do this without Emacs one would need to use a markdown program, a script to generate HTML and a browser to view the content of this HTML file. Or, a program in itself to edit markdown. I can program it such that it is my default email client and it allows me to use mailto links[2]. I can modify its basic functionality however I want[3]. On an OS with support for an infinite number of programming languages and methods of communication among programs, there is just too much overhead for easy integration a user needs. If I wanted to use mutt, msmtp, fetchmail and maildrop, it is already four different configuration languages and files for sending and receiving email in a Unix way. With emacs, equivalent functionality can be implemented using only elisp and in a single file. This is why people replace Emacs to be the main interface for their OS's.  [1] https://github.com/cadadr/emacs.d/blob/01f79933323d6e1a7780c6caa355e3fa585674da/markdown.el#L19  [2] https://github.com/cadadr/emacs.d/blob/01f79933323d6e1a7780c6caa355e3fa585674da/email.el#L25  [3] https://github.com/cadadr/emacs.d/blob/01f79933323d6e1a7780c6caa355e3fa585674da/lisp/gk-edit.el"
emacs,2zvhmu,delbosforo,2,Sun Mar 22 12:18:31 2015 UTC,"Markdown example is pretty trivial, create in vim then run pandoc, finished!   Using Emacs in the manner you state does interest me though (as someone who uses vim /tmux). I just never seem to have a problem enough with what I use or see something in Emacs that I really want... So I just carry on using vim with an open mind :)"
emacs,2zvhmu,y45y564,1 point,Sun Apr 26 16:48:59 2015 UTC,"Well, with pandoc you generate a file and still it needs to be opened in the browser.  Well, given that markdown is not that complex for a frequent desire of previewing the resulting HTML does not emerge, so much so that I've forgotten the keybinding for that (also given that I have switched to textile markup).  But whatever, a combination of vim and tmux can be nearly equally powerful.  And in your workflow, if you're efficient and happy, then no need for change.  No need for an open mind, which bunch of programs one uses is not that big of a deal.  I used to be a more technical user, to edit OS config daily, to program daily, to live in the chain of write-compile-run, and those times it was more comfortable to live closer to system tools, make, vi, shell, man, gcc, gdb, python, whatever.  But nowadays, my interaction with a computer is more or less at the level of a normal user, I write blog posts, follow news, listen to podcasts, music, write and read emails and so forth, and use org-mode to a way way way lesser extent than most people do[1], so I cannot be bothered with looking at an xterm window and running feh or whatever to view an image while reading an RSS feed item. Also, I cannot rush through man pages to figure out what sort of configuration language had my software or what environment variables it wanted, given that of those each of a bazillion of software programmes have their own custom ones, or go around trying to figure out Haskell to figure out what's wrong with pandoc.  With Emacs there is solely elisp, and most generally I need not know nothing else, and this way of things fit me better.  TL;DR Oh, I've ranted, I'm sorry :)  I've seen your response at one of my loquacious hours of the day.  Yet, the takeaway point is that, it's not that big of a deal if one uses Emacs or vi(m)+tmux+pandoc+...., as long as the toolset and configuration thereof is not an obstacle for what they want to get done.  [1] I take notes w/ org mode. I've seen people keep a record of their daily meal and daily apparel, and that is crazy.  I don't even use the org-agenda, I have been using weekly planner notebooks for a couple years.  The tangible, paper ones."
emacs,2zvhmu,delbosforo,2,Tue Apr 28 11:57:19 2015 UTC,"I, too, use Firefox alongside Emacs. Eww is cool, but sometimes one needs more than text. For passwords I migrated to pass [http://www.passwordstore.org/]. GPG-encrypted and a simple cli.  May be one more integratable tool :)"
emacs,2zvhmu,joranvar,3,Sun Mar 22 19:36:15 2015 UTC,GPG-encrypted and a simple CLI and emacs integration (package password-store on melpa).
emacs,2zvhmu,mdorman,1 point,Sun Mar 22 19:47:16 2015 UTC,"Yes, indeed there are integrated stuff (dispass, passthword, password-vault, M-x package-list-packages C-j C-s pass) but in my case I need the ability to use my password manager on mobile too, so these are non-options. The program you linked, I've used it in the past, and now that I see it is available on mobile and emacs, I may give it a try. Thank you!"
emacs,2zvhmu,delbosforo,9,Sun Mar 22 20:25:00 2015 UTC,"Why do we let it replace our OS?   Emacs is the last remnant of Lisp-based operating systems that predate Unix. They all died off after losing the Lisp vs Unix war, so Lispers had to migrate to Unix.  Lisp people do not feel that Unix is ""their OS"", but just a hardware driver you need to run your ""real OS"" on. With Emacs, people are basically trying to painstakingly recreate the look and feel of Lisp Machines of yore and forget that they need Unix to run them.   What is the advantage?   Lisp. Lisp all the way down, from the mail client to the kernel."
emacs,2zvhmu,muuh-gnu,1 point,Sun Mar 22 18:24:20 2015 UTC,"Although I know that there were Lisp machines, your tone seems to be sarcastic which leaves me in confusion. Are you actually serious and is it just me?"
emacs,2zvhmu,jrk-,1 point,Mon Mar 23 17:55:17 2015 UTC,"The tone is kind of sarcastic, yes, but solely because I'm aware of how futile the attempt is to recreate the large commercial ecosystem Lisp once had, within a text editor.  Many Lisp fans are nostalgic and still hoping for a ""Hello everybody out there, I’m doing a (free) Lisp operating system (just a hobby, won’t be big and professional like Genera)"" moment during their lifetime. Until that happens, that text editor and its extensions are the closest we'll ever come to a Lisp machine like environment."
emacs,2zvhmu,muuh-gnu,1 point,Mon Mar 23 20:19:54 2015 UTC,"Thanks, I didn't even know how deep the rabbit hole goes. :)"
emacs,2zvhmu,jrk-,1 point,Mon Mar 23 20:58:56 2015 UTC,I actually really want to do this. It'd be a nice project. Do you have any links you'd recommend?
emacs,2zvhmu,vermiculus,3,Wed Apr 1 01:12:08 2015 UTC,"The short succinct answer:  after you've become proficient with emacs, if an application is primarily text-based, you will prefer to do it with emacs.  A longer more nuanced answer is:    I do use a terminal multiplexer, since I've never found an emacs terminal mode that works quite right for me (my main issue being updating curses-based applications, e.g. top, netstat, iostat; though I've got other gripes as well).    Also, I need (at least) one well-supported web-browser (supported by the internet-at-large that is, e.g. ""this site is minimally usable with browser X."")  So, I'm not ready to dispense with a WM just yet, even if I prefer to do all (or at least as much as possible) of my text handling (or mangling) within emacs.  The principle advantages of doing as much as possible within emacs are:  a consistent interface, ease of data-transfer (e.g. emailing a link from irc...with all copy/search/motion operations and window juggling done via the keyboard), and the ability to write macros between different text-based applications.  In any case, I wouldn't advise anyone to ""ditch everything for emacs.""  Just become proficient with it, and soon you'll have your own reasons for migrating your workflow more deeply into emacs.   But that's not an operation anyone needs to complete to 100%.  Not everything is text, and not every text application is better in emacs (although many, if not most, are!)  Like everything in emacs, the best advice is always:  do what works best for you."
emacs,2zvhmu,forked_tongue,3,Sun Mar 22 16:20:14 2015 UTC,"File management in dired is pretty sweet, it might take a few key bindings before it is as fast as a graphical one, but it also includes a few features not found in most other file managers I've tried.   One is wdired, which makes the dired buffer editable. While that might sound pretty cool, imagine that you have a few hundred files which are pretty similar in naming but differs here and there, and you need to rename all of them. This happened to me while testing in the field recently, I had 1500+ files in different formats that needed to be renamed consistently.  Pop up a dired buffer, C-x C-q, use your normal editing commands to fix the file names (M-x replace-string, macros, string rectangles, multiple cursors...) and then C-c C-c and you have just renamed hundreds of files. And you can use undo, killing and yanking, movement commands while doing it!  While you could write a script to do it it would most likely take longer time, would be more error-prone, all while using wdired would be more flexible."
emacs,2zvhmu,monotux,7,Sun Mar 22 17:04:07 2015 UTC,Emacs is your os now.
emacs,2zvhmu,Erakko,13,Sun Mar 22 04:50:50 2015 UTC,http://i.imgur.com/UKpBe9O.jpg
emacs,2zvhmu,vermiculus,6,Sun Mar 22 14:26:23 2015 UTC,"Not sure where Emacs and Linux are competing here. Emacs is userspace, as are all the things you mentioned that some people use Emacs to replace. This is true on any kernel.  Emacs is able to replace a lot of the userspace because of its design. It has a simple programming language and thorough API; only the implementation of the language, input detection, and other REALLY low-level pieces are in C and not Emacs Lisp. Emacs users learned this language and started building their own workflows around Emacs.  Complaining about Emacs replacing userspace tools is like complaining about stacking vs. tiling window managers. They both manage windows; it's just a matter of your workflow preference.  Emacs does not have its own kernel (that I know of), so it still relies on a kernel and other operating system software like libc in order to run. It's not replacing your operating system; it's replacing some user applications that are available for people with different workflow preferences.  Linux is a kernel. Emacs is a user application. They are not in the same category, and they cannot compete with each other. That's like saying airplanes compete with lawnmowers because they both have engines; they have entirely different purposes."
emacs,2zvhmu,VRMac,2,Sun Mar 22 13:26:41 2015 UTC,"emacs as an interface for other programs has some great features (easy hackability, consistency/interoperability with the program I'm using most of the time). It's just a factor in deciding on whether to use an emacs program or one not in emacs. Some programs are even designed to have an optional emacs interface, like mu has mu4e interface. It's the same story for how tons of browser extensions don't have any logical requirement that they should work in a program which displays web pages."
emacs,2zvhmu,oheoh,2,Sun Mar 22 05:02:45 2015 UTC,"I like having my IRC and file management in Emacs because I have various Emacs-wide packages that improve them. For example, I get the same spell-checking interface for my IRC client and my source code comments, and I get the same auto-completion for IRC nicks that I get for programming language identifiers.   That said, I don't put everything in Emacs. I haven't yet found an Emacs email client that I like better than Thunderbird, for instance."
emacs,2zvhmu,davidchristiansen,2,Sun Mar 22 11:49:52 2015 UTC,"Wait, do people really throw away their hammers just because someone gave them a power drill?  I make extensive use of shells inside emacs, but I also make use of terminal emulations outside emacs. Some things work better in one environment, some in the other.  I generally prefer ""also"" to ""instead"" in my tools."
emacs,2zvhmu,Farsyte,2,Sun Mar 22 18:32:46 2015 UTC,"Emacs doesn't replace the OS, it's more that it acts as an interface.  There are many advantages, it keeps keybindings consistent. It also provides things like bookmarks, registers and the multiple-entry kill ring (like the clipboard) available.  There's much less duplication that people think. Most of the non-editing functionality is provided by other programs. The shell and term modes are interfaces to normal shells (except eshell). Printing uses ghostscript. Dired uses ls (though it has it's own version of ls as a fallback). Find-dired uses find (though again there's a lisp fallback). Grep and grep-find use the system grep. Image transformations use imagemagick. Of course the compile modes use the system compiler and M-x gdb uses gdb. Most of the email programs use external tools for receiving and or filing. Rmail uses movemail, MH-E uses MH, Mu4e uses Mu and Notmuchmail uses notmuch. That's all without mentioning libraries, which is how all image formats are handled."
emacs,2zvhmu,RobThorpe,2,Sun Mar 22 19:12:06 2015 UTC,"Emacs packages have a different paradigm from Linux applications. Packages I use frequently are customized to be consistent and better suit the way I use them. I can't do the same, to the same extent and with the same convince with a regular application.  A bonus is that I can switch operating systems and maintain most of my  workflows."
emacs,2zvhmu,sabof,2,Sun Mar 22 19:16:55 2015 UTC,"Emacs isn't merely a text editor, it's more of a tool to optimize your workflow.  If you feel tmux is doing a better job at handling multiplexing than emacs's buffer system, then go for it.  But i don't see what is the problem with Emacs and tilling wm. I think they complement each other fine. I've been using dwm for 4 years already, and switched to GUI Emacs 2 years ago and it's a perfect combination :)"
emacs,2zvhmu,tampix77,2,Sun Mar 22 19:35:41 2015 UTC,"You don't have to use emacs for everything. Use it for those things that you think it is a good match for. If you think mutt is awesome for your email or weechat great for irc then by all means run those tools.  Combining it all in tmux is great. That is pretty much how I combine shells, weechat, irc and some other tools."
emacs,2zvhmu,st3fan,5,Sun Mar 22 21:16:18 2015 UTC,"Don't ditch everything for Emacs because strangers on reddit say they like it better. Try it and see if you prefer it. You may find that some things are just better outside of Emacs (I still use Firefox to browse the web, use the Sage notebook instead of a Sage REPL in Emacs, and read Djvu's in Evince --I did switch to pdf-tools in Emacs for PDFs, though). Decide on a case by case basis."
emacs,2zvhmu,oantolin,1 point,Sun Mar 22 14:49:55 2015 UTC,"I agree. I've been using Emacs for 15 years or so. I still use Firefox for browsing the web, I haven't found anything better. It's a case-by-case thing."
emacs,2zvhmu,RobThorpe,1 point,Mon Mar 23 02:11:33 2015 UTC,"I do use emacs (graphically, typically) alongside a terminal/tmux session. I might not be in a majority doing that, but really, whatever suits you."
emacs,2zvhmu,jringstad,1 point,Sun Mar 22 09:57:36 2015 UTC,"It's about integration of frameworks that operate on buffers.  You've got a large body of emacs-lisp code that lets you customize the editor the way you like.  There's a package system full of stuff that works just in the context of Emacs.    It's nice to be able to customize and write my own emacs lisp to automate tasks like calling REST APIs on a github server for a pull request, or to post diffs to a code review in a few keystrokes without leaving the editor."
emacs,2zvhmu,leimy,1 point,Sun Mar 22 15:02:30 2015 UTC,"Terminal Multiplexer like Tmux and Tiling WM like xmonad. Sure why not , if your OS supports it ?!"
emacs,2zvhmu,billbose,1 point,Sun Mar 22 15:14:54 2015 UTC,"I use a conventional WM (Xfce is my drug of choice at the moment) an d conventional terminal emulator, and frequently have 5-10 different Emacs windows open, each with 5-10 buffers.   Typically I have one Emacs instance per virtual desktop, with 2-3 associated terminal emulators. This is both for multitasking, and just to help segment stuff (I'll have a virtual desktop with the frontend code, then one with the backend code, and sometimes another with a browser/ some automated testing code.)"
emacs,2zvhmu,FlyingBishop,1 point,Sun Mar 22 15:45:43 2015 UTC,"I use a terminal and tmux and window manager with Emacs. It's easy with emacs --daemon. I use Emacs to read my mail and edit text, but I treat them as separate applications that happen to have really nice integration through emacs --daemon."
emacs,2zvhmu,catern,1 point,Tue Mar 24 15:29:34 2015 UTC,"I don't use EMACS, although I find it interesting, for similar reasons. One idea that I'm considering is maybe using emacs instead of a terminal. It would be like the next step.  EDIT: to add more, I find the extensibility of EMACS fascinating and the idea that I can have almost anything in it. Also, it interacts very well in REPL environment (hope I got that right, too lazy to check now)."
emacs,2zvhmu,blue1_,1 point,Sun Mar 22 04:14:59 2015 UTC,I think you mean REPL.
emacs,2zvhmu,perlstalker,1 point,Sun Mar 22 10:17:02 2015 UTC,Thank you! I knew something was wrong.
emacs,2zvhmu,tuhdo,0,Sun Mar 22 15:54:53 2015 UTC,"I use emacs for many, many things but not everything. One of the things that it is not good at is maintaining window layouts. So, I combine emacs (and emacsclient) with tmux for terminal work. http://perlstalker.vuser.org/blog/2012/10/16/emacsclient-and-tmux/  As an added benefit, I can log in to my machine at work, attach to my tmux session and fire up an emacsclient to get at files that I have open without needing to worry about X forwarding.  The important thing to remember is that just because emacs CAN do something doesn't mean that you have to use it for that purpose. I spent months trying to use various feed readers in emacs. None of them worked particularly well and I switched by to TT-RSS. In the end, use emacs for what works for you."
emacs,2zvhmu,perlstalker,2,Sun Mar 22 13:56:16 2015 UTC,"The advantage of Emacs windows is that it is integrated with Emacs. For example, if you get compile error, instead of getting plain text and you have to manually copy paste the path, Emacs makes it clickable, so you can either use the mouse or some key bindings to navigate between compile errors. If you edit code in REPL, it gets editing support from Emacs and any minor mode. I don't know the disadvantage compare with using tmux, which integrates nothing between Emacs and the terminal, when working locally."
emacs,2zvhmu,tuhdo,1 point,Sun Mar 22 14:49:59 2015 UTC,It all depends on what you're doing. I write all my code in emacs in X11 for many of the reasons you stated. I use tmux for shells. It's all about what works best for you.  I recently started using i3 which has made using multiple emacs frames nicer. That has helped with some of the stupidness of emacs apps rearranging my windows.
emacs,2zvhmu,angelic_sedition,2,Sun Mar 22 15:28:26 2015 UTC,"If a buffer is automatically opened in other window, or current window and override existing window content there, you have a few solutions:   If it's a read-only buffer of built-in modes like dired-mode or help-mode or Info-mode or *Message* or compilation-mode, just press q. Use winner-mode and press C-c <left> to go back to previous window layout. Save window configurations to register and later restore it. You have a lot of registers. Use purpose. This will give purpose to a window and only pop a buffer of a certain type to a window that matches the same type."
emacs,2zvhmu,angelic_sedition,1 point,Sun Mar 22 15:48:51 2015 UTC,I generally use switch-to-prev-buffer if not q. Is there not some to have e.g. help-mode buffers open in a new window?
emacs,2zvhmu,perlstalker,2,Thu Mar 26 19:07:21 2015 UTC,Elfeed is by far the best feed reader I have ever used. I spent weeks trying out different ones and gave up until I found elfeed which took about 10 minutes to set up. That's just me though of course
emacs,2zvhmu,pyr3,1 point,Thu Mar 26 19:04:39 2015 UTC,I liked elfeed but after a couple of months the index started getting huge and it would take a while to start up.
emacs,2zveaj,agumonkey,1 point,Sun Mar 22 03:24:55 2015 UTC,"Stumbled upon that by random web hops (https://github.com/emacsmirror/kmacro-ring-list/blob/master/kmacro-ring-list.el), found it interesting. In case you never read the ewoc manual page before."
emacs,2zt08q,vermiculus,7,Sat Mar 21 13:59:05 2015 UTC,There's also emacs-neotree.
emacs,2zt08q,ccharles,2,Sat Mar 21 15:00:57 2015 UTC,"ahem   After closer inspection of the original video, this is indeed the package used. :) Specifically, set neo-theme to 'ascii."
emacs,2zt08q,bitsan,2,Sat Mar 21 15:40:20 2015 UTC,I installed neotree after seeing this post - it's nice! Looks like support for multiple projects will come in the future.
emacs,2zt08q,ogalego,1 point,Sat Mar 21 20:46:41 2015 UTC,"And I'll just say – this package is awesome! I like dired a lot, but this may even take the majority of my use-cases :)"
emacs,2zt08q,mnp,2,Sat Mar 21 15:45:16 2015 UTC,I think it's 'emacs-dirtree'.  https://github.com/zk/emacs-dirtree
emacs,2zt08q,myeffort,1 point,Sat Mar 21 14:09:18 2015 UTC,That's the one! Thanks :) Honorable mention!
emacs,2zt08q,chomati,1 point,Sat Mar 21 14:51:13 2015 UTC,You might also like speedbar if you're into that.
emacs,2zt08q,tuhdo,1 point,Sat Mar 21 14:44:50 2015 UTC,"I've tried speedbar on occasion. It's pretty okay for managing elisp projects, but not much else. After I discovered helm-swoop, even that use-case kinda died off…"
emacs,2zt08q,AnAirMagic,1 point,Sat Mar 21 14:51:43 2015 UTC,It may also be lusty explorer
emacs,2zr4pc,gnuvince,16,Fri Mar 20 23:13:37 2015 UTC,I used to be amazed that people would spend all this time drawing out these rectangles and diagrams.  Then I learned about artist-mode.
emacs,2zr4pc,Trevoke,6,Sat Mar 21 02:24:26 2015 UTC,"I used to be amazed about that, too, then I read your post.  A game I made actually uses text files to store its levels, and since I haven't made a level editor yet, you need to make the levels in a text editor. The characters that it uses to represent walls are the same characters artist-mode uses to draw polygons.  Turns out Emacs is a better level editor for my game on accident than the tool I was planning out in my head. I feel like the next thing I'll learn is m-x read-mind to have it just write my program for me."
emacs,2zr4pc,r0but,4,Sat Mar 21 21:54:52 2015 UTC,"You are now thinking about programming correctly.  By the way, now I want to know more about your game. :)"
emacs,2zr4pc,Trevoke,3,Sat Mar 21 22:18:19 2015 UTC,"Hah. I'm happy to know I'm on the right track at least.  As for my game, it was my first ever actual programming project that wasn't just a book problem, and I've been Frankensteining features into it over the past year. Pretty much everything that went into its creation has been a learning experience. Currently, a fundamental part of gameplay (enemy sight) doesn't work correctly, so I'm not comfortable actually distributing it to be played until I finish fixing that. There is also no easy way to build it; I'm trying to learn Make at the moment so I can give it a makefile and be able to create projects that aren't a giant pain for anybody else to tinker with. This is its main site and this is its current GitHub page.  I was also mistaken - it doesn't interpret '/', '\', or 'x' as wall tiles, so artist-mode isn't quite perfect for it yet. I hope to fix that tonight.  edit: I double fucked up, it handles those characters nicely. And it is fixed, so enemies can see now. I just needed to have anyone at all look at it to light a fire under my ass to fix what needed fixing."
emacs,2zr4pc,r0but,12,Sun Mar 22 00:03:53 2015 UTC,I'm glad you found purpose within Emacs pun intended
emacs,2zr4pc,shackra,3,Sat Mar 21 03:15:40 2015 UTC,Cool! My biggest issue with emacs is that buffers open in inconsistent places.
emacs,2zr4pc,chekt,3,Sat Mar 21 06:26:43 2015 UTC,"It's consistent, just not what you want / expect"
emacs,2zr4pc,instant_sunshine,1 point,Sun Mar 22 06:10:17 2015 UTC,"""some-command"" opens a new buffer. Where does ""M-x some-command"" put that buffer? If opening buffers was consistent between commands, then you would know without having to know anything specific to some-command. Because opening buffers is not consistent, you must call some-command and them memorize the rule that it uses.  Consistency means that you can learn a pattern and apply it to all things of that type going forward."
emacs,2zr4pc,chekt,1 point,Mon Mar 23 11:19:14 2015 UTC,"Well, it could mean that, if you scope it's definition that way.  Of course, it's also consistent when scoped to a particular activity.  What it isn't is predictable, for a new activity.  So while I was really just making light, I also know that for long term users, the broader consistency becomes apparent, but it's deeply irritating when coming from a more rigid system.  You have a choice, embrace the default, or customise it.  That's always the choice you have with Emacs.  and, more and more these days, someone comes along and gives you the customisation you are looking for. Nice isn't it."
emacs,2zr4pc,instant_sunshine,1 point,Mon Mar 23 12:59:51 2015 UTC,"We basically agree :)  I am greedy and lazy, so I don't want to have to learn how each activity brings up a new buffer. Additionally, I dislike having to work around the default behavior of most packages, which is to open a buffer in the window one position clockwise from the current window, by moving my cursor one to the right of where I want the window to open.  What I want is one default behavior that all packages share (either open a new buffer on the current window or the next window clockwise), and a command like ""choose-window"" that lets me choose where to put the buffer of the next command. That would make my life a lot easier.  I've heard that helm solves this issue, but I've yet to try it."
emacs,2zr4pc,chekt,2,Mon Mar 23 19:33:26 2015 UTC,"I'll have to give this a try, this might well be exactly what I've been looking for."
emacs,2zr4pc,TarMil,2,Sat Mar 21 00:46:48 2015 UTC,"So many new-comers wish they knew about this.  Thanks for posting it.  I wish it had a better name, so people could find it easier."
emacs,2zr4pc,instant_sunshine,1 point,Sat Mar 21 05:51:40 2015 UTC,Something like window-purpose...
emacs,2zr4pc,fivehours,1 point,Sat Mar 21 22:23:40 2015 UTC,Sounds good.  I've opened an issue.  https://github.com/bmag/emacs-purpose/issues/39
emacs,2zr4pc,instant_sunshine,1 point,Sun Mar 22 03:51:11 2015 UTC,The author has already renamed the package!
emacs,2zr4pc,kaushalmodi,1 point,Mon Mar 23 17:24:44 2015 UTC,"I know, I pushed the issue. ( @jasonm23 )"
emacs,2zr4pc,instant_sunshine,1 point,Tue Mar 24 00:32:20 2015 UTC,"Yes, I know that you'd know. Just happy seeing that the package dev is so receptive to the users' suggestions."
emacs,2zr4pc,kaushalmodi,0,Tue Mar 24 00:57:40 2015 UTC,phrasing! ;)
emacs,2zr4pc,instant_sunshine,1 point,Tue Mar 24 09:31:27 2015 UTC,This is awesome. I am going to try it after I implement ford-fulkerson. :)
emacs,2zr4pc,tinduck,1 point,Sat Mar 21 13:29:39 2015 UTC,is your FF implementation related somehow?  I'm intrigued.
emacs,2zr4pc,instant_sunshine,2,Sun Mar 22 06:14:10 2015 UTC,"I'm a helm user as well. It looks like purpose no longer hardcodes calls to ido, so it should work well with helm."
emacs,2zr4pc,ccharles,0,Sun Mar 22 13:03:28 2015 UTC,"I do not know, I don't use helm.  I doubt it however."
emacs,2zq0dh,cpaulik,1 point,Fri Mar 20 17:50:55 2015 UTC,Care to share your config for that mode line? Looks pretty.
emacs,2zq0dh,st3fan,1 point,Fri Mar 27 20:38:02 2015 UTC,That is the Spacemacs modeline.
emacs,2zpiij,p4p3r,3,Fri Mar 20 15:32:32 2015 UTC,"Check the character encoding of the TeX file, it is probably not utf8. There must be an org setting to force utf8 output, I just don't know what it is."
emacs,2zpiij,p4p3r,1 point,Fri Mar 20 16:27:40 2015 UTC,"That did solve the problem of the letters showing up incorrectly in the .tex file, but now the Greek characters are just absent in the pdf file. Do I really have to use \DeclareUnicodeCharacter for every single letter of the Greek alphabet, or is there some package or configuration that will do it for me?"
emacs,2zpiij,username223,1 point,Fri Mar 20 16:54:21 2015 UTC,"You shouldn't need that declaration for every character, but you still need the inputenc in your preamble. Are you using pdflatex or another like xelatex or lualatex?"
emacs,2zpiij,p4p3r,1 point,Fri Mar 20 17:16:33 2015 UTC,The inputenc is already placed in the preamble by org-mode when the .tex file is created. I'm using pdflatex from TexShop on OS X.
emacs,2zpiij,dentee2,3,Fri Mar 20 18:37:43 2015 UTC,"Oh.  Use xetex/xelatex instead, and you should be fine."
emacs,2zpiij,reactormonk,1 point,Sat Mar 21 00:09:07 2015 UTC,What does the log say?
emacs,2zpiij,reactormonk,1 point,Fri Mar 20 22:07:41 2015 UTC,"You might want to try C-\ which should ask you for how you want to input things. From there it appears there are a few option for Greek. I use this to type characters like ê, á, ö, etc. After you choose your input style, C-\ becomes a way to toggle it on and off. See the GNU emacs manual on ""Select Input Method""."
emacs,2zpiij,Razark,1 point,Fri Mar 20 22:02:23 2015 UTC,"I copy/pasted   αβγδε   into an org-mode buffer, went C-c C-e l l, works as expected. Same for C-c C-e l L. Try with xe(la)tex, no inputenc required: https://github.com/reactormonk/emacs-starter-kit/blob/master/xetex.el  Also, which OS?"
emacs,2zniav,nautola,10,Fri Mar 20 01:27:29 2015 UTC,https://github.com/jwiegley/use-package !!
emacs,2zniav,Knusper2000,1 point,Fri Mar 20 02:09:55 2015 UTC,I was checking this out.   The only thing holding me back is :bind.  How's the compatibility with evil-mode?
emacs,2zniav,bryangarza,1 point,Fri Mar 20 02:31:03 2015 UTC,:bind doesn't interfere with evil-mode's keybindings.
emacs,2zniav,darkness,1 point,Fri Mar 20 03:05:26 2015 UTC,"but as far as I can tell, it doesn't allow to make evil bindings.    I can't evil-bind something."
emacs,2zniav,yesimon,5,Sun Mar 22 00:45:32 2015 UTC,"el-get.  I was considering switching to use-package earlier today, but I realized that I can't get everything I want from MELPA, in particular org-mode master from Git.  (There was a recent discussion on emacs-devel about how MELPA isn't set up to build org-mode.)  I could probably use both el-get and use-package, but why?  el-get has been working great for me for months."
emacs,2zniav,xuchunyang,3,Fri Mar 20 04:20:42 2015 UTC,"I'm also currently using el-get for non MELPA packages, and it seems to provide most of the features of use-package."
emacs,2zniav,darkness,1 point,Fri Mar 20 14:54:11 2015 UTC,"As a normal package.el user, I don't know what's the special problem with MELPA when comparing with MELPA-stable, GNU ELPA, Org ELPA and Marmalade. Besides, you do not have to install everything from ELPA."
emacs,2zniav,zarkone,2,Fri Mar 20 05:42:43 2015 UTC,"Sorry, that was an oversight on my part.  You are right, there's no special problem with MELPA compared to other repositories.  I just like running the bleeding edge for most of my Emacs packages so using ELPA, for example, never crossed my mind.  You don't have to install everything using package.el, but since el-get installs everything I need and package.el does not (e.g. org-mode) I prefer to just use a single package manager."
emacs,2zniav,kaushalmodi,3,Fri Mar 20 18:27:05 2015 UTC,https://github.com/edvorg/req-package
emacs,2zniav,tuhdo,1 point,Fri Mar 20 03:19:34 2015 UTC,Looks great! I might steal some stuff from it! :)
emacs,2zk82r,orpheanjmp,4,Thu Mar 19 06:47:29 2015 UTC,"At any rate, I think what you're looking for is more like this:  (defvar orphean/labels '(""label1"" ""label2"" ""label3""))  (mapc #'(lambda (label)           (defalias (intern (concat ""orphean/"" label ""-p""))             #'(lambda ()                 (member label *orphean/system-label-store*))))       orphean/labels)   This won't make the byte-compiler very happy, though.  For that, you'll want a macro that returns a progn form with the defalias statements inlined into it."
emacs,2zk82r,jwiegley,3,Thu Mar 19 07:12:56 2015 UTC,"FWIW, there's no need to quote lambdas."
emacs,2zk82r,BruceConnor,2,Thu Mar 19 19:08:35 2015 UTC,"If you realy want to generate a bunch of defuns, you should do the loop in the macro and generate a list of defuns in the body of a progn call. As in you should right a gen-predicateS function. Or better yet, if you are only using three things, Don't use macros."
emacs,2zk82r,jordonbiondo,2,Thu Mar 19 10:04:03 2015 UTC,Here is the help-gnu-emacs thread on this if anyone is interested: http://lists.gnu.org/archive/html/help-gnu-emacs/2015-03/msg00241.html
emacs,2zk82r,RobThorpe,3,Thu Mar 19 15:20:51 2015 UTC,"If the code above is the actual use case, then I think you can do better by just forgoing all of it. Simply call member in appropriate places.  Advantages:   the code is clear the code is efficient the code is easily debug-able   In case the code is more complex than a call to member, just write down a function that takes e.g. ""label1"" and does what you need."
emacs,2zhwh9,gandalfgarry,5,Wed Mar 18 18:47:36 2015 UTC,Can you reproduce the bug when running emacs as emacs -Q?
emacs,2zhwh9,nandryshak,1 point,Wed Mar 18 22:19:27 2015 UTC,"Doens't work, still happens. -Q let emacs ignore .emacs file, right?"
emacs,2zhwh9,nandryshak,1 point,Thu Mar 19 15:10:37 2015 UTC,"Yeah, I also reproduced it. It's a bug in pcomplete I think. You should file a bug report."
emacs,2zhwh9,tty-tourist,1 point,Fri Mar 20 17:25:32 2015 UTC,"Everything usually works fine if you just use forward slash for any path in emacs on windows, eg. cd c:/Windows ..."
emacs,2zhwh9,adouzzy,1 point,Mon Mar 23 08:07:22 2015 UTC,"I tried to use emacs on windows with different environments, Cygwin, chocolatey. I finally gave up because it took seconds to run magit-status on my tiny little project. Windows OS is fundamentally deficient to me.  I am using virtualbox now."
emacs,2zfsf9,instant_sunshine,14,Wed Mar 18 05:14:45 2015 UTC,"So, it's in a decent usable state to work with themes from scratch, uploading / importing an existing theme is not supported yet, and when it is, it'll only import specific faces / attributes.  (Reading and interpreting emacslisp in JS isn't something I'm particularly into doing so and theme which uses vars to define colours will not work, sadly, that's a fair few of the more popular themes, I may make a compatibility tool in Emacs, which will export the current themed faces into a deftheme.  That'd be nice for making combined themes too!)  Github repo : https://github.com/emacsfodder/emacs-theme-editor  Overview  Use one of a small collection of starter themes, edit a font face by clicking the color blob next to it's name, change the color, watch it update live, and when you've done your best, click save.  You can keep work in progress by clicking the  +  button under the font faces list, to keep it in your browser's localStorage.  The list of starter themes is held in  https://github.com/emacsfodder/emacs-theme-editor/blob/gh-pages/js/starter-themes.coffee if you'd like to add one, you can submit a pull request adding in the same format.  To get the live theme you're editing in JSON format do: JSON.stringify(App.live_theme) in the Browser dev console.  Quick roadmap (TODO list):   Theme import (button is currently dead :( ) Undo facility Overall or by selected group, colour edits, brightness, saturation, hue, contrast, etc. Allow a description to be used. Sanitise a given theme name, remove:    junk chars and trim space spaces to dashes detect and remove ""theme"" from the name (it's auto appended only to the filename, but should not be in the theme name itself)  Add proper package header  Add more faces, I'll be happy to see issues open on github requesting different mode custom faces support. Each face should be editable as one line (with foreground/background bold, italic, underline at least) More things I haven't thought of yet...   Things I definitely won't do.   Support complex theme importing. Add support for custom theme variables that.   Also DarkTooth (the third ""starter theme"") has been made into a theme in it's own right, and is being published to MELPA.  see https://github.com/emacsfodder/emacs-theme-darktooth (I'll probably make a post for this soon!) It's basically a mashup of my old Soothe theme (minus the background slugs) and the most excellent Gruvbox."
emacs,2zfsf9,many_cakes,2,Wed Mar 18 05:20:15 2015 UTC,This is awesome. Easy and attractive to use. Thank you for making it available!
emacs,2zfsf9,xoo-,2,Wed Mar 18 09:38:57 2015 UTC,"thank you for the nice feedback,  glad you like it.  I hope it will be significantly better soon."
emacs,2zfsf9,tampix77,1 point,Wed Mar 18 12:43:41 2015 UTC,"Reading and interpreting emacslisp in JS isn't something I'm particularly into doing so and theme which uses vars to define colours will not work, sadly, that's a fair few of the more popular themes   Hmm, a JS elisp parser sounds fun. Can you give me an example of a theme where this would be necessary?"
emacs,2zfsf9,Trevoke,2,Thu Mar 19 09:15:59 2015 UTC,"darktooth, soothe, gruvbox, sanityinc's solarized and tommorrow, I think all the base16 themes... Several others I can't remember, but I highly suspect moe-theme is also driven by a palette rather than direct color values.  It would be nice if an advanced theme standard could emerge, Sanityinc has helped me with some nice functions to make gui/terminal theming easier, the defface syntax used by themes is comprehensive, but it's also very clunky.  Of course, without traction no standard will take shape, but if the theme editor generates and imports themes based on this standard, I think it will likely take hold.  It's really down to how powerful the editing facilities are.  I can't imagine people build Sublime Text themes with anything other than the excellent online theme editor, so that's a relatively useful parallel.   I may be a little optimistic, but I like to think it's a case of when, not if a standard emerges."
emacs,2zfsf9,phyrne,1 point,Thu Mar 19 13:25:32 2015 UTC,fantastic!
emacs,2zfsf9,Ironballs,1 point,Wed Mar 18 11:39:33 2015 UTC,Thank for you work sir :)
emacs,2zfuxz,instant_sunshine,4,Wed Mar 18 05:46:04 2015 UTC,Looks great! All I miss are the org-mode faces.
emacs,2zfuxz,kaushalmodi,3,Wed Mar 18 13:34:14 2015 UTC,Org Mode faces are in the next update from MELPA (also Powerline thanks to @toadwarrior)
emacs,2zfuxz,kaushalmodi,1 point,Fri Mar 20 00:44:04 2015 UTC,Thanks!
emacs,2zfuxz,kaushalmodi,1 point,Fri Mar 20 03:00:15 2015 UTC,Do you fancy sending a pull request?
emacs,2zfuxz,kaushalmodi,1 point,Thu Mar 19 04:09:54 2015 UTC,I have couple of things on my elisp TODO list. But I'll work on this some time next week if no one else does. Making the pull request is the easy part. I'll first need to spend time tweaking the face colors that blend with your theme :)
emacs,2zfuxz,aptmnt_,2,Thu Mar 19 04:31:55 2015 UTC,"Ideally you should only use colours in the theme palette.   If you really need a new tint, I suggest you install my kurecolor package.  You can do interactive dec/increase of saturation / hue / brightness on a hex color in place.    e.g.  M-x kurecolor-decrease-saturation-by-step  C-x z  ;; to repeat the last action. z ;; to do subsequent repeats.   If you also install smex the command is much easier to use (without an explicit binding)  M-x kcdsatmatches to kurecolor-decrease-saturation-by-step   Although even without smex C-x z z is a very useful workflow helper."
emacs,2zfuxz,hyperbling,1 point,Thu Mar 19 04:44:05 2015 UTC,That package looks cool! I'm gonna try it out. Thanks!
emacs,2zfuxz,bhrgunatha,3,Fri Mar 20 03:00:39 2015 UTC,"Very nice. Same gripe as with gruvbox though: whatever faces helm uses in its window aren't edited, and the primary blue and green really hurt my eyes.  Edit with pic."
emacs,2zfuxz,aport,3,Wed Mar 18 19:01:31 2015 UTC,you should send a PR.
emacs,2zfuxz,adouzzy,3,Thu Mar 19 01:14:12 2015 UTC,It's been merged in already. Melpa will build a new release shortly. (< 2hr)
emacs,2zfuxz,jordonbiondo,2,Thu Mar 19 02:25:34 2015 UTC,"You can submit this as a pull request, and I'll merge it.  EDIT: Or I'll just add it now..."
emacs,2zfuxz,robstewartUK,2,Thu Mar 19 04:09:21 2015 UTC,"Thanks again, I've added a small amend to make the selection line use darktooth_dark2 as it's background."
emacs,2zgray,Xeroth95,3,Wed Mar 18 13:33:54 2015 UTC,"Consider asking on /r/ocaml if you don't get any helpful responses. For what it's worth, I can't reproduce the problem.   If you get nowhere fixing Tuareg, look into ocp-indent, which is an alternative indentation mode for Ocaml."
emacs,2zgray,gmfawcett,3,Wed Mar 18 19:03:31 2015 UTC,Have you tried to disable electric indentation mode?
emacs,2zgray,Denommus,1 point,Thu Mar 19 02:55:16 2015 UTC,Thank you so much. It works if i disable electric indentiation. (Sorry for the late reply :()
emacs,2zfjvi,InsomniaBorn,2,Wed Mar 18 03:43:47 2015 UTC,"When you search, it makes a lot of sense to start from point.  When you query-replace, it also makes a lot of sense to start from point.  Keeping replace working the same way is consistent."
emacs,2zfjvi,redmorph,4,Wed Mar 18 05:46:39 2015 UTC,isearch wraps around at the end of the buffer. It could make sense for query-replace too to ask at the end of the buffer if you want to continue from the beginning of the buffer.
emacs,2zfjvi,kcin,1 point,Wed Mar 18 06:07:49 2015 UTC,"That would make sense as an option.  But, you can always do M-< first, then M-%."
emacs,2zfjvi,RobThorpe,2,Wed Mar 18 12:17:21 2015 UTC,"The way it is now, you can replace in the whole buffer by hitting M-< first.  Now suppose replace did the whole buffer every time.  How would you replace in just part of the buffer?    So keeping it this way gives you the flexibility to do either the whole buffer or just part of the buffer.  Switching would make it very difficult to replace in just part of the buffer.  In fact, replace is even better than that.  If you have a region marked, it only replaces in the region.  So you have the flexibility to do the whole buffer (with one extra keystroke), from point to the end of the buffer, or just within a selected region."
emacs,2zfjvi,srt19170,1 point,Wed Mar 18 14:10:09 2015 UTC,"You can get even fancier than that too.  If you have to do something complex you can start by marking a region, then narrowing to it using C-x n n.  Then M-< and M-> will take you to the beginning and end of that region.  Within the narrowed area you can mark further regions within which to do M-% or do it from various places so you can do point->end. Then at the end you can widen with C-x n w."
emacs,2zfjvi,RobThorpe,2,Thu Mar 19 01:07:03 2015 UTC,"http://emacs.stackexchange.com/questions/249/how-to-search-and-replace-in-the-entire-buffer  The 4th answer by nispio looks like what you want.  Edit: just realized I didn't really answer the question... the query-replace behavior mimics interactive search behavior.  In fact, if you are searching using isearch and decide you want to replace the search term you can just hit M-% and query-replace will default the from string to the current search term."
emacs,2zfjvi,hprotagonist,2,Wed Mar 18 16:08:22 2015 UTC,"Whoa, I didn't know about that last bit.  Awesome, thanks.  =D"
emacs,2zfjvi,RobThorpe,1 point,Wed Mar 18 16:14:22 2015 UTC,"Also, if you do M-% then press M-n it default the string to the last one searched with Isearch. It has all sorts of features, most of them are mentioned in the manual."
emacs,2zg1t7,shackra,6,Wed Mar 18 07:25:29 2015 UTC,"There are no libraries / files ""subword-mode"" and ""visual-line-mode"", so the eval-after-load never kicks in. subword-mode is defined in subword.el and visual-line-mode in simple.el. But since both are built-in modes, I think you don’t even need the eval-after-load. Just put  (diminish 'subword-mode) (diminish 'visual-line-mode)   in your init file, that should do."
emacs,2zg1t7,permafrosty,1 point,Wed Mar 18 08:17:39 2015 UTC,"indeed, it works now!  Thank you!"
emacs,2zc731,KozureOkami,3,Tue Mar 17 10:59:54 2015 UTC,"Pretty funny!  I found Evil somewhat difficult to configure, compared with Vim keybindings, than initially thought. Maybe I just need to learn how Lisp really works.   For example, when I want to bind a key to selecting a block, In Vim I could do it as following:   nmap <CR> vip  In Vim vocabulary, the nmap stands for normal mode, imap and vmap stands for insert mode and visual mode. <CR> is the input for Enter.  So in normal modus, when I press Enter, Vim will rebind this to visually inside the paragraph. That means I visually select the code block on the current line of the cursor.   When I tried to emulate this behaviour in Evil, I would like to see how vip is definied in Evil. When I press C-h k to look up the keybindings under vip, I could only get v because that's the first input that Emacs receives. I see the key v is bounded to the function (evil-visual-char &optional MARK POINT TYPE MESSAGE).   Then I look up the source code of that function in evil-states.el.   But I couldn't wrap my head around it. I have constantly this issue. So I'm looking for any template or workflow, to wrap my head around how I could look it up and configure it. It would be appreciated."
emacs,2zc731,ReneFroger,6,Tue Mar 17 11:24:14 2015 UTC,Well v does immediately run evil-visual-char but then just run that and then do your C-h k (while being in visual mode). Then you'll find out that ip runs evil-inner-paragraph. If you don't want to bother finding out the proper Emacs way to do this then you just call both of them interactively:  (defun my-vip ()   (interactive)   (call-interactively 'evil-visual-char)   (call-interactively 'evil-inner-paragraph))   Interactive command since you probably want to call it interactively.  I've also just started with Emacs (in January) and it's been super easy with a few basics that you need to learn.
emacs,2zc731,MyNameIsFuchs,1 point,Tue Mar 17 13:25:42 2015 UTC,"Thanks for your useful script. But I want to figure out how I could see the command that belongs to that key. I tried your way already before. When in Visual mode, I press C-h k, but that disables the visual mode, and I get in insert mode that follows with ip. So it isn't working either."
emacs,2zc731,ReneFroger,2,Tue Mar 17 14:56:52 2015 UTC,"Weird, that works just fine for me. Pressing C-h C-h stays in Visual selection mode and then gives me the function name when entering ip into the prompt."
emacs,2zc731,MyNameIsFuchs,3,Tue Mar 17 15:15:58 2015 UTC,"I think you mean C-h k after presing v to enter visual mode, and press ip to get the function."
emacs,2zc731,tuhdo,2,Tue Mar 17 15:36:03 2015 UTC,Yeah that works too. But I always use C-h C-h since I have a brain like sieve. But it seems weird that C-h k would exit visual selection mode for OP.
emacs,2zc731,MyNameIsFuchs,2,Tue Mar 17 15:52:04 2015 UTC,C-h C-hopens meta help window and wait for the final character to select a help command. Then we press k then ip to get the command. It would confuse him if he presses C-h C-h and a window just popup instead of giving command.   But C-h C-h is good introduction anyway.
emacs,2zc731,tuhdo,6,Tue Mar 17 15:58:43 2015 UTC,"in this particular example you can copy vim's way of defining:  (define-key evil-normal-state-map (kbd ""RET"") (kbd ""v i p""))   where it won't work is that you don't have control over recursive vs non-recursive mappings as you do in vim, but for simple use cases it's often easier to define it this way compared to defining a new function."
emacs,2zc731,hyperbling,1 point,Tue Mar 17 20:06:26 2015 UTC,"Oh, very inventive! However this is considered as not a regular pratice, I didn't knew that it would even work! Awesome."
emacs,2zc731,ReneFroger,1 point,Tue Mar 17 20:19:59 2015 UTC,"It's not difficult once you are used to Lisp. In Emacs, you don't rebind a key to a key. Instead, you rebind a command to a key. Of course, you can create a syntactic sugar with macro that accepts two key bindings, then the macro picks the command assigned to the right binding and assigns it to the left binding, like the above example of yours. But then, it's cleaner to directly rebind a command to a key. In Emacs, configuration means programming it your way.  I guess you already have expand-region that can be used as equivalent command:  (define-key evil-normal-state-map (kbd ""RET"") 'er/mark-paragraph)    You should have a look at the Evil documentation. It would make it easier to program Evil your way."
emacs,2zc731,tuhdo,3,Tue Mar 17 12:15:25 2015 UTC,"Thanks for your reply. I know that I need to look up the command. But that's just my question that I described above: how could I look up the command that's called?  When I do vipin Evil, and check the messages buffer, I see no command called unfortunately. And C-h k only receives v, not the vip. So I'm figuring out how I could find out the exact command that's get called."
emacs,2zc731,ReneFroger,1 point,Tue Mar 17 12:34:44 2015 UTC,"you can submit a bug report to evil developers, they can easily create a command for you."
emacs,2zc731,redguardtoo,1 point,Tue Mar 17 12:16:09 2015 UTC,I bothered Frank Fischer already too much. And it's not a bug by the way. But thanks for the suggestion.
emacs,2zc731,ReneFroger,1 point,Tue Mar 17 12:31:49 2015 UTC,"You should ask this on their mailing list, a read-only version can be browsed on gmane.  Asides from that, this is not really the way you configure Emacs.  What you're asking for could probably be achieved with keyboard macros, but usually it's suggested to write new commands doing what you're looking for and binding them to a key."
emacs,2zc731,wasamasa,1 point,Tue Mar 17 12:17:01 2015 UTC,"Thanks for the link! I got the same advice from Frank Fischer (the maintainer of Evil) too, but I couldn't figure it out how I could subscribe to a mailing list.   And yes, I know I need to look up the command. But that's just my question: how could I look up the command that's called. When I do vipin Evil, and check the messages buffer, I see no command called unfortunately."
emacs,2zc731,ReneFroger,5,Tue Mar 17 12:33:19 2015 UTC,"As /u/wasamasa said, using keyboard macro in your case is the easiest way:   Press <f3> to start recording. Press vip. Press <f4> to stop recording. Name it with kmacro-name-last-macro (bound to C-x C-k n). i.e. my-vip To save it to a file, M-x insert-kbd-macro and your keyboard macro is inserted in the current buffer.   That's an interactive way to create your custom command without touching Elisp. I think it's even easier than VimL, given that you have to learn no syntax. And thanks to /u/wasamasa for this trick. I didn't think of this before thinking of Elisp as the a last resort. I should practice my keyboard macro kungfu more."
emacs,2zc731,tuhdo,1 point,Tue Mar 17 13:48:42 2015 UTC,That's because v calls a command that waits for extra input. This input modifies Evil's internal state which is used to do extra stuff when discovering that you're specifying a text object or motion. A keyboard macro would be the easiest way of redoing that action.
emacs,2zc731,wasamasa,6,Tue Mar 17 13:39:50 2015 UTC,Is that from a youtube video comment thread?  Link to the actual video (if at all relevant to Emacs/Evil users)?
emacs,2zc731,gnuvince,5,Tue Mar 17 12:59:59 2015 UTC,found it: https://www.youtube.com/watch?v=Nh5OQjb8G9E
emacs,2zc731,EatMoreCrisps,3,Tue Mar 17 13:05:15 2015 UTC,"Sorry, I had omitted the link because I thought it wasn't relevant to Emacs/Evil users. And if you are starting a religious war about text editors, you don't want to drag programming languages and and frameworks into the mix, that'd get really messy ;-)"
emacs,2zbisw,vibhavp01,4,Tue Mar 17 04:59:59 2015 UTC,"Nice work, Vibhav!"
emacs,2zbisw,chekt,3,Tue Mar 17 05:22:22 2015 UTC,"Interesting way to do implement it.   But when you zoom out or scroll it back, you would be then able to see your old contents again, I guess."
emacs,2zbisw,ReneFroger,3,Tue Mar 17 05:48:39 2015 UTC,"Indeed, but terminals are something of an extreme considering backwards compatibility or legacy handling. What exactly the ""clear"" command does in a normal environment is determined via terminfo, the termincal capability data base. Therefore, there is not really a right or wrong way to implement it. Just scrolling it out of sight (and keeping it accessible via backbuffer) is something I still experience on some systems I regularly use."
emacs,2zbisw,tashbarg,3,Tue Mar 17 08:43:39 2015 UTC,A lot of Linux terminal emulators have exactly that behavior.
emacs,2zbisw,oldmanstan,2,Tue Mar 17 13:15:30 2015 UTC,"What's wrong with  (add-hook 'eshell-mode-hook   (lambda ()     (local-set-key (kbd ""C-l"") (lambda () (interactive) (recenter 0)))))"
emacs,2zbisw,jrm44,1 point,Tue Mar 17 12:04:54 2015 UTC,"Once you press RET, it returns to the original position."
emacs,2zbisw,tuhdo,1 point,Tue Mar 17 12:51:18 2015 UTC,"It doesn't for me.    If I do an ls -la that covers the entire screen and moves the point/cursor to the bottom of the screen, hit C-l, then hit enter I'm on the second line from the top of the screen."
emacs,2zbisw,jrm44,1 point,Tue Mar 17 13:01:15 2015 UTC,"Do you have other configuration? I tested it on Windows and as soon as I press RET, then the prompt goes to bottom."
emacs,2zbisw,tuhdo,1 point,Tue Mar 17 13:06:32 2015 UTC,Do you have eshell-scroll-to-bottom-on-output or eshell-scroll-show-maximum-output set to nonstandard values?  I also set eshell-output-filter-functions to  '(eshell-output-filter-functions '(eshell-handle-control-codes eshell-handle-ansi-color eshell-watch-for-password-prompt))
emacs,2zbisw,jrm44,1 point,Tue Mar 17 13:17:41 2015 UTC,Here is mine eshell-output-filter-functions (standard value):  (eshell-postoutput-scroll-to-bottom eshell-handle-control-codes eshell-handle-ansi-color eshell-watch-for-password-prompt)   It seems like eshell-postoutput-scroll-to-bottom is doing the scrolling.
emacs,2zbisw,tuhdo,2,Tue Mar 17 13:23:52 2015 UTC,Serious question: why can't they just embed some other shell into emacs?
emacs,2zbisw,mguzmann,4,Tue Mar 17 12:59:58 2015 UTC,Are you familiar with shell-mode and term-mode?
emacs,2zbisw,jrm44,3,Tue Mar 17 13:05:22 2015 UTC,This might be interesting to read:  http://www.masteringemacs.org/article/running-shells-in-emacs-overview  Mastering Emacs is a fantastic blog for learning Emacs.
emacs,2zbisw,monotux,1 point,Tue Mar 17 14:40:31 2015 UTC,"I remember having tried a few options, and I found them all acceptable. No option made me me want to ditch zsh in terminator. That was the question."
emacs,2zbisw,mguzmann,1 point,Tue Mar 17 16:43:36 2015 UTC,"I prefer running terminal emulators outside of Emacs (I'm using eshell more and more these days, tho) tbh.   A mere technicality would be to point out that the shell is run in a terminal emulator, and that Emacs has implemented a terminal emulator in M-x (ansi-)term, and that zsh (for example) is run in this emulator, just like running it in a normal terminal emulator, like xterm, konsole etc. But it is not as convenient as a fully implemented TE."
emacs,2zbisw,monotux,1 point,Tue Mar 17 18:34:35 2015 UTC,"I find myself using shells in Emacs for smaller tasks.  E.g. I want to see the (small) output of a program I'm hacking on, I'll use M-x ansi-shell; for something more involved, I'll just start urxvt."
emacs,2zbisw,gnuvince,2,Thu Mar 19 03:04:16 2015 UTC,"You can't integrate Emacs features in a plain terminal similar to the one NeoVim recently implemented. If you want a decent real terminal  emulator in Emacs, try ansi-term."
emacs,2zbisw,tuhdo,3,Tue Mar 17 16:47:36 2015 UTC,"oh, I never knew about this one. thx. And of course what was the first I tried to run in ansi-term? Yes, emacs. And it works. Now I can run emacs inside my emacs. MIND BLOWN :O"
emacs,2zbisw,tigerstein,1 point,Tue Mar 17 18:52:45 2015 UTC,"Tuhdo, why do you recommend ansi-term rather than term?"
emacs,2zbisw,RobThorpe,1 point,Wed Mar 18 16:48:42 2015 UTC,"Well, based on the article from Mastering Emac below. I guess there should be no difference now. I rarely use it so I'm not sure."
emacs,2zbisw,tuhdo,1 point,Wed Mar 18 17:13:35 2015 UTC,"I think that these days ""term"" is better. Ansi-term uses both C-x and C-c as it's prefix key, that's more likely to interfere with things than normal term which only uses C-c."
emacs,2zbisw,RobThorpe,1 point,Wed Mar 18 18:10:38 2015 UTC,"Ha, I've been using the same thing for years, it's one of those things I've just never understood how it could not already be implemented."
emacs,2zcema,BruceConnor,1 point,Tue Mar 17 12:38:05 2015 UTC,Excelent! I'll take a look!
emacs,2zcema,rafatauil,1 point,Tue Mar 17 13:15:52 2015 UTC,"On the topic, what is the sane workflow for working with upstream remotes in magit?"
emacs,2zcema,aptmnt_,1 point,Wed Mar 18 19:17:30 2015 UTC,What do you mean? My remote-related workflow consists mostly of 4 Magit commands  F F P P (with maybe a -u) b v f -p a
emacs,2zbnde,dddbbb,3,Tue Mar 17 05:53:06 2015 UTC,"Dddbbb, you here too? Good to see you again here! It's useful that you're trying Emacs. To learn Elisp, you could copy this text into your Emacs first, and then read it.  And I will come back on the point of defining marco's for Evil. I implemented a lot for Evil lately."
emacs,2zbnde,ReneFroger,1 point,Tue Mar 17 06:40:53 2015 UTC,"Oh, I didn't even think of learnxiny for elisp. Thanks for the link!"
emacs,2zbnde,pseudonamed,2,Tue Mar 17 17:33:57 2015 UTC,Is this for learning macros? Else I don't see why they not defined as regular functions?
emacs,2zbnde,tuhdo,2,Tue Mar 17 07:19:04 2015 UTC,"You move code from runtime to compile time, which avoid function call overhead when you write a lot of such binding. In addition, it's just a syntactic sugar over existing function, so we better not define another wrapper function and impose extra function calls just to save a few words."
emacs,2zbnde,purcell,2,Tue Mar 17 07:58:57 2015 UTC,If that's the case then defsubst would be clearer. But this really does seem like a needless optimisation at the expense of clarity.
emacs,2zbnde,tuhdo,2,Tue Mar 17 11:39:44 2015 UTC,"You are right. I forgot about defsubst. But in general, it's bad to create a wrapper for a function to do a specific case of it. It's like wrapping message in a function that only accepts string and change it to a name like print. That's an unnecessary indirection for nothing."
emacs,2zbnde,tuhdo,1 point,Tue Mar 17 12:29:57 2015 UTC,I was a little over-excited about using macros (since I'm using lisp). I think I also lost sight of what a macro is good for (and appropriate). I read this answer and I think I understand the distinction (and the escaping notation). That and my above example is obviously just passing variables around.
emacs,2z7nbv,tuhdo,3,Mon Mar 16 07:48:21 2015 UTC,Thank you. You've taught me so much about helm.
emacs,2z7nbv,goofansu,1 point,Mon Mar 16 12:44:43 2015 UTC,Glad it helped!
emacs,2z7nbv,rson,3,Mon Mar 16 13:44:09 2015 UTC,Finally a sane looking helm.  Why oh why isn't this the default?  I've been looking for this so I can experiment with helm with little to no initial time investment.  Thank you.
emacs,2z7nbv,thnetos,3,Mon Mar 16 18:03:40 2015 UTC,You may want to look at my Helm guide as a starting point.
emacs,2z7nbv,vermiculus,3,Mon Mar 16 18:09:54 2015 UTC,"This is a tangential report, but I would love a changelog for the helm guide (in the HTML) so that I can revisit it and see the main things that were added or changed.  Thanks for the great guide!"
emacs,2z7nbv,metaobject,2,Mon Mar 16 21:06:28 2015 UTC,"The entire site is maintained, mostly, in a set of Org files under version control. This isn't quite the same as an HTML ChangeLog, though :) You can always look at the Helm changelog directly, though."
emacs,2z7nbv,vermiculus,2,Tue Mar 17 02:07:10 2015 UTC,"This is what immediately turned me off about helm.  I set my font size a little bigger bc my vision sucks, and helm took up a lot of screen real estate (and it just looked strange bc the helm text was so damn big).  This is looks great!  Thanks!"
emacs,2z7nbv,hvis,2,Mon Mar 16 21:52:38 2015 UTC,"Oh my, that is nice."
emacs,2z7nbv,kcin,1 point,Tue Mar 17 02:05:11 2015 UTC,"Right, looks are important. :)   (set-face-attribute 'helm-source-header nil :height 0.1)   This seems a bit forced: the header is still present on display, 2 pixels tall. On the other hand, even the value of 1.0 here goes a long way toward making Helm not ugly."
emacs,2z7nbv,hvis,1 point,Mon Mar 16 10:05:35 2015 UTC,"This seems a bit forced: the header is still present on display, 2 pixels tall.   What if you use 0.0000001? :)"
emacs,2z7nbv,hvis,1 point,Mon Mar 16 10:14:17 2015 UTC,"It results in an error, complaining that the font height now is less than one pixel."
emacs,2z7nbv,wolverian,1 point,Mon Mar 16 10:31:24 2015 UTC,"Right, looks are important. :)   But people still care. Now we have something identical to Ido with vertical mode except we can scroll up/down.   This seems a bit forced: the header is still present on display, 2 pixels tall. On the other hand, even the value of 1.0 here goes a long way toward making Helm not ugly.   The header is still there, but as a very thin line. It is good to use as a source separator. As for single source, it does not matter anyway.  And yes, the value of 1.0 is perfect. I used Zenburn that does this by default, so I never notice and it's sad that people resist Helm because of such minor issue. I will need to update my guide about this."
emacs,2z7nbv,hvis,2,Mon Mar 16 10:15:18 2015 UTC,But people still care.   I wasn't sarcastic at all.   I will need to update my guide about this.   Maybe you should persuade Thierry not to make this step necessary in the first place.
emacs,2z7nbv,tty-tourist,1 point,Mon Mar 16 10:30:40 2015 UTC,"I wasn't sarcastic at all.   So was I :)   Maybe you should persuade Thierry not to make this step necessary in the first place.   Yes, I intend to persuade him to adjust it to 1.0. But about the on/off header line behavior, it's already a no. I can see his point of making Helm consistent. The good thing is, it is easy to change."
emacs,2z7nbv,tty-tourist,1 point,Mon Mar 16 10:35:44 2015 UTC,"The problem here is that the thin line actually still contains the text inside. The text is visible at least on my display (MacBook Pro, 15"" retina). It is fairly ugly:  http://cl.ly/image/3U10353P3r07  See the black pixels? That's the text and it drives me nuts."
emacs,2z7nbv,Imxset21,2,Wed Mar 18 17:21:05 2015 UTC,"Probably the resolution is too high, so 0.1 still makes it visible. This code could clear the text and make the header line background ""merged"" with the highlight bar:  (defvar helm-source-header-default-background (face-attribute 'helm-source-header :background)) (defvar helm-source-header-default-foreground (face-attribute 'helm-source-header :foreground)) (defvar helm-source-header-default-box (face-attribute 'helm-source-header :box))  (defun helm-toggle-header-line ()   (if (> (length helm-sources) 1)       (set-face-attribute 'helm-source-header                           nil                           :foreground helm-source-header-default-foreground                           :background helm-source-header-default-background                           :box helm-source-header-default-box                           :height 1.0)     (set-face-attribute 'helm-source-header                         nil                         :foreground (face-attribute 'helm-selection :background)                         :background (face-attribute 'helm-selection :background)                         :box nil                         :height 0.1)))"
emacs,2z7nbv,hvis,1 point,Wed Mar 18 18:18:34 2015 UTC,"This code could clear the header line and make the header line background ""merged"" with the highlight bar:  (defvar helm-source-header-default-background (face-attribute 'helm-source-header :background)) (defvar helm-source-header-default-foreground (face-attribute 'helm-source-header :foreground)) (defvar helm-source-header-default-box (face-attribute 'helm-source-header :box))  (defun helm-toggle-header-line ()   (if (> (length helm-sources) 1)       (set-face-attribute 'helm-source-header                           nil                           :foreground helm-source-header-default-foreground                           :background helm-source-header-default-background                           :box helm-source-header-default-box                           :height 1.0)     (set-face-attribute 'helm-source-header                         nil                         :foreground (face-attribute 'helm-selection :background)                         :background (face-attribute 'helm-selection :background)                         :box nil                         :height 0.1)))"
emacs,2z7nbv,hvis,1 point,Wed Mar 18 18:19:37 2015 UTC,"Thanks. That doesn't help with helm-comp-read, though, because helm-sources has two elements in that case.  But I don't ever see the second one (Helm Completions History) in the completions window."
emacs,2z7nbv,sverrejoh,1 point,Thu Mar 19 15:33:35 2015 UTC,"For some reason, I can only get the header disabled with this:  (defadvice helm-display-mode-line (after undisplay-header activate)     (setq header-line-format nil))"
emacs,2z7nbv,sverrejoh,1 point,Mon Mar 16 21:10:22 2015 UTC,Did you update to the latest Helm?
emacs,2z7nbv,Lompik1,1 point,Tue Mar 17 00:37:33 2015 UTC,"Ah, that helped. Thx!"
emacs,2z7nbv,aptmnt_,1 point,Tue Mar 17 08:10:17 2015 UTC,"I was confused because my helm window already looked very similar, and then I read your username..."
emacs,2z7nbv,pzone,2,Tue Mar 17 02:04:11 2015 UTC,"Well if you follow my guide then the window should look similar. The unsolved problem was the top header lines that make people feel Helm ""too heavyweight"" compare with Ido."
emacs,2z9gqq,WallyMetropolis,2,Mon Mar 16 19:04:37 2015 UTC,You should file those issues at the respective issue trackers.
emacs,2z9gqq,hvis,1 point,Mon Mar 16 19:55:37 2015 UTC,dirtree doesn't seem to be under development anymore. I'll see about filing a ticket with neotree.
emacs,2z9gqq,vifon,2,Mon Mar 16 19:59:41 2015 UTC,EDIT: The neotree issue is one of text color. It's printing black on black.   Do you run Emacs in a terminal? I've recently encountered this issue. You may want to set frame-background-mode to dark:  (setq frame-background-mode 'dark)
emacs,2z9gqq,kaushalmodi,1 point,Mon Mar 16 20:28:23 2015 UTC,"Thanks. I do and I'll look into this.  I'm also going to add a comment about what I did to fix this. Then I'll accept my own answer. That's how this works, right?"
emacs,2z6jv5,instant_sunshine,14,Mon Mar 16 00:45:35 2015 UTC,"So you may or may not be aware of the Emacs Theme editor at https://emacsfodder.github.io/emacs-theme-editor (formerly http://jasonm23.github.com/emacs-theme-editor (dead-link))  Anyway, I've begun work on modernising the theme editor, you can check out the work in progress by grabbing the reboot branch of the repo.  https://github.com/emacsfodder/emacs-theme-editor/tree/reboot  (Note: this version will replace https://emacsfodder.github.io/emacs-theme-editor soon.  I'll be adding an updated importer and file-save functionality first.)  Edit: expect more news next weekend...  UPDATE: For the beady eyed, there is a pre-test of this running on http://emacs-theme-editor.ocodo.info  UPDATE THE SECOND: While the initial release of this will only have limited support for faces.  My goal is to (a) have better attribute support & bg/fg colors for a face. (Showing a ""simple name"" and the Emacs face name). Also (b) make it pretty easy to add support for new faces, see js/face-table.coffee as some small progress towards this goal. (Note that code spans will be integrated into the master table shortly (they're used for the sample code.))  For now though it's a fairly limited re-implementation of the old version."
emacs,2z6jv5,greduan,1 point,Mon Mar 16 00:48:34 2015 UTC,Hell yeah Gruvbox. :)
emacs,2z6jv5,flamingsushi,3,Mon Mar 16 02:41:46 2015 UTC,"Hey Greduan, maybe you'll like Darktooth too.  *not yet available as a theme..."
emacs,2z6jv5,greduan,2,Mon Mar 16 03:40:35 2015 UTC,That Darktooth theme looks pretty nice!  Looking forward to try it out when available.
emacs,2z6jv5,greduan,1 point,Mon Mar 16 13:14:58 2015 UTC,Looks nice! I tend to stick to light themes nowadays but it looks really good. I just said that about Gruvbox cause I host the repo on GitHub. :)
emacs,2z6jv5,vermiculus,2,Mon Mar 16 11:16:20 2015 UTC,"I know, I have commit access, and maintain it ;) - and now my secret identity is blown"
emacs,2z6jv5,phyrne,1 point,Mon Mar 16 13:02:11 2015 UTC,:O
emacs,2z6jv5,Trevoke,2,Tue Mar 17 00:20:13 2015 UTC,... Yes way.
emacs,2z2dvg,thekodols,3,Sat Mar 14 22:49:37 2015 UTC,Recently got a friend into emacs so this should hopefully point him in the right direction for packages without him bugging me constantly. Thanks!
emacs,2z2dvg,Mitchical,2,Sat Mar 14 23:14:06 2015 UTC,You magnificent bastard...  Good work
emacs,2z2dvg,Frater_Petrichor,1 point,Sun Mar 15 02:47:33 2015 UTC,"Great reference, but no mention of org-mode?"
emacs,2z2dvg,BunjiX,1 point,Sun Mar 15 02:51:10 2015 UTC,"I was not sure in which block I could place it. And only one link for Org-mode in new block was not a viable solution.  But I just added Org-mode to the new box ""Non-programming""."
emacs,2z2dvg,ReneFroger,-7,Sun Mar 15 19:07:46 2015 UTC,I made this
emacs,2z2dvg,contrarianism,9,Sun Mar 15 20:18:22 2015 UTC,There's also awesome-emacs (https://github.com/emacs-tw/awesome-emacs) for you guys :)
emacs,2z2dvg,cataska,7,Sun Mar 15 16:58:30 2015 UTC,"""Emacs is basically a Lisp interpreter, which can be used as an editor with many possibilities. ""  +1"
emacs,2z3yxe,curious-scribbler,5,Sun Mar 15 09:31:59 2015 UTC,"If you don't like ""scrunching up your left hand"" then you can press right alt and x. On a european keyboard that will mean mapping alt-gr to alt though.  Alternatively, why not use ESC-x or C-[ x ? Those always mean M-x and don't need rebinding."
emacs,2z3yxe,RobThorpe,1 point,Sun Mar 15 13:06:47 2015 UTC,"I get what you're saying, though both of those options seem more awkward than C-x C-m (I wouldn't bind the C-c variant).   ESC-x requires (for me) moving my left hand from its default position on most keyboards. (I just tested this and it doesn't seem to be the case on my laptop, but I do have the urge to lift and peck to get it.) C-[ x is just weird. It also requires more motor control to make sure Ctrl is released between [ and x. Modifier—No-modifer sequences are difficult for me for this reason.   I can see the argument against adding unnecessary complexity, but I think I'm actually going to try this one out for a while to see how I actually like it (having failed to adopt either ESC-x or C-[ x)."
emacs,2z3yxe,vermiculus,1 point,Sun Mar 15 14:53:38 2015 UTC,"I don't have to move my left hand that far. I can see what you mean though, It's not as convenient as some other keys.  I don't see why C-[ x is wierd. It's normal to use C-[ as ESC. Your right that it takes less coordination to hit two keys with ctrl pressed down though.  What about all the stuff in the C-x RET keymap though? If you remap C-x C-m then you won't be able to use it when you're in a terminal.  Another possibility is to map one of the modifier keys that Emacs doesn't use like the windows or mark key."
emacs,2z3yxe,RobThorpe,1 point,Sun Mar 15 20:01:40 2015 UTC,"Oh my, I forgot about the C-x RET keymap. Looks like I haven't had to use it in a long time. (Most of those functions I'll use with some M-x variant.)  I don't know what you mean by a mark key (I don't see anything like that on a standard US qwerty keyboard), but I know that the windows key is either difficult or impossible to rebind on Windows. (It works on Linux though, if I remember correctly. Red Hat may still have hoarded a couple of the bindings, though.)  And interestingly enough, I don't really use emacs from a terminal much. I suppose I could – there isn't anything I need that uses the rat – but TRAMP has satisfied all my needs hitherto. What's you're use case? Is there something I'm missing?"
emacs,2z3yxe,vermiculus,1 point,Sun Mar 15 21:39:32 2015 UTC,"Looks like I haven't had to use it in a long time. (Most of those functions I'll use with some M-x variant.)   I think C-x RET f is a useful command and worth learning. It depends on how often you come across files with strange encodings though.  I don't know what you mean by a mark key   The one on the right between the windows key and ctrl. I learned just now by searching the web that it's called ""menu"", but windows calls it ""apps"". So:  (define-key local-function-key-map (kbd ""<menu>"") 'execute-extended-command) ; X Windows (define-key local-function-key-map (kbd ""<apps>"") 'execute-extended-command) ; MS Windows.   If you don't use Emacs in the terminal much then I don't see any problems with what you're doing. I don't use it much either, so I bind a few non-essential commands to keys that don't work in the terminal. I just give this warning because a lot of people use terminals around here."
emacs,2z3yxe,RobThorpe,2,Mon Mar 16 11:33:02 2015 UTC,"I just give this warning because a lot of people use terminals around here.   Fair point :)  And yes, I see the mark/menu key now -- I think I used to use it somewhere, but it was just awkward for me (not having the key available everywhere put a damper on its adoption). I think I might have used it for magit-status, which I now bind to M-m.  And I think... I'm not sure, but I think you can remap <menu> to <apps> (or vice-versa) to cover the Windows config. That way, you don't have to specify the mapping twice."
emacs,2z3yxe,vermiculus,5,Mon Mar 16 15:09:10 2015 UTC,isn't meta just esc? so you could just esc-x
emacs,2z3yxe,newfor2015,3,Sun Mar 15 10:25:41 2015 UTC,"Yes. And since C-[ is a synonym for ESC, if you don't like Alt-x you can just use C-[ x without any need for mapping keys at all."
emacs,2z3yxe,RobThorpe,1 point,Sun Mar 15 13:08:18 2015 UTC,"That sounds almost comically acrobatic on my keyboard layout (Ctrl is called ""Strg"" here)."
emacs,2z3yxe,hirnbrot,1 point,Mon Mar 16 01:56:32 2015 UTC,"Yep.  Your keyboard looks troublesome. Especially for using the paragraph movement commands M-{ and M-}, and the page movement commands C-x [ and C-x ]. Those are very useful for working with text and even for code at times. Your keyboard is the sort of case where rebinding might be a good idea. If possible getting a different keyboard might be a good idea too, but if you use the German features regularly that's probably not an option."
emacs,2z3yxe,RobThorpe,3,Mon Mar 16 10:42:39 2015 UTC,"There are three ""german features"" I use regularly: öäü. Since I'm boycotting ""ß"" (because it's silly) I don't need that one.  I actually know a few people who bought keyboards with other layouts explicitly for coding, but the situation's a bit annoying with laptops - unless you want to lug around another keyboard.  I'm not complaining too much since I got a workable situation already; I feel like vi-style keybindings work a bit better with this layout than emacs' movement (and I dislike ""C-n"" etc anyway), so I just use evil."
emacs,2z3yxe,hirnbrot,1 point,Mon Mar 16 10:54:13 2015 UTC,http://en.wikipedia.org/wiki/Meta_key  I know Vim receives Alt-key as Meta-key's. Seems Emacs handles that differently.
emacs,2z3yxe,ReneFroger,1 point,Sun Mar 15 11:06:25 2015 UTC,"Meta key:       The meta key is a modifier key on certain keyboards, specifically MIT and LISP machine keyboards and successors, such as the Knight keyboard, space-cadet keyboard (where it is labeled “META”), Symbolics keyboards (where it is labeled “META” or “Meta”), and on Sun Microsystems keyboards (where it is marked as a solid diamond “◆”).  On keyboards that lack a physical Meta key (or keys), its functionality may be invokable by other keys such as the Alt key, the Windows key, or user-configured keys. If no Meta key function is available, some software will accept alternate keybindings using, for example, the Esc key as a prefix key (as, for example, in Emacs).  On some systems the Meta modifier may be used in a manner similar to Macintosh's command key, but has been used in other ways, including as a user-configurable modifier in the X Window System, or in combination with other modifier keys such as Hyper and Super, also seen on the classic LISP keyboards and supported by windows systems such as X.    Image i - Sun keyboard with meta key (between space bar and Compose key)     Interesting: Command key | Aquamacs | Modifier key | Knight keyboard   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
emacs,2z3yxe,autowikibot,3,Sun Mar 15 11:06:34 2015 UTC,"I don't think it's good. It uses many keychords for a frequently used key, the M-x.  You have two alternatives. In Evil mode, I keymapped the ; to M-x, in order to get everything on the keyboard homerow. But I could imagine this is not an option for some Emacsers who don't use Evil mode.   So you could map it to Control key (which is replacing the Capslock key). If you don't press any modifier and use the Control key only without pressing another key, the M-x will be send instead. I use Control key for Helm-for-files, and ; for M-x by the way."
emacs,2z3yxe,ReneFroger,3,Sun Mar 15 09:46:17 2015 UTC,"I use evil-leader and have my leader key set to , (comma), so I mapped ,x to M-x (actually to helm-M-x). It's super convenient, as I am already used to hitting comma for other things, like ,b for helm-mini and ,f for helm-semantic-or-imenu."
emacs,2z3yxe,bakuretsu,3,Sun Mar 15 19:39:27 2015 UTC,"I've left M-x alone. Personally, I don't actually use it all that often - if I find myself using something regularly via M-x, I give it a proper keyboard shortcut. One day I also discovered you could Ctrl+click to get the menu bar back; minor modes often put handy commands on there. So, over time, the number of things I invoke via M-x has whittled itself away to near zero.  As for terminal emacs, a better solutions to that issu: don't use terminal emacs. If you need to use it, obviously this advice doesn't apply; if you're just not sure whether you will or not, assume you won't. I'll have been an emacs user for ten years soon, and I've hardly ever needed to use it. When I have, sometimes I've got lucky, and M-x works; the rest of the times, I've just used ESC x instead. For an irregular thing, it's not actually much of a bother."
emacs,2z3yxe,to3m,3,Sun Mar 15 16:38:21 2015 UTC,I use keychords and M-x with xx instead.
emacs,2z3yxe,atilaneves,1 point,Wed Mar 18 17:51:58 2015 UTC,"Alt-x is one of the most frequently typed Emacs key combos, and it involves scrunching your left hand up.    No, it doesn't if you use sticky keys.  I've been using sticky keys for many years and it makes pressing any emacs keybinding convenient. No need for hand twisting.  http://www.emacswiki.org/emacs/StickyModifiers#toc4"
emacs,2z3yxe,kcin,1 point,Sun Mar 15 10:04:33 2015 UTC,"here's a really good article on key bindings: http://www.masteringemacs.org/article/mastering-key-bindings-emacs  long story short, you'll only interfere with another package which also has C-x C-m bound, and in these cases, the package binding will take precedence over your global binding.  you can change it of course.  as for whether this is effective or not, anything that will reduce the likelihood of RSI is worth doing IMO, especially given Emacs' reputation for causing RSI."
emacs,2z3yxe,hyperbling,1 point,Sun Mar 15 14:17:19 2015 UTC,"I would think a package that binds C-x C-m to be a little odd, myself. The C-x prefix is conventionally reserved for system-level commands. I haven't come across a package yet that does this (and I use an absurd number of packages)."
emacs,2z3yxe,vermiculus,1 point,Sun Mar 15 14:55:27 2015 UTC,"I've been using C-x C-m for years. It's much easier for my small hands and I've never seen a package try to bind to that combination. Officially, packages are only suppose to bind under C-c C-whatever."
emacs,2z3yxe,pmade,1 point,Sun Mar 15 16:15:58 2015 UTC,"On osx I have my left command key mapped to meta and my left alt key mapped as command, it's a super easy fix."
emacs,2z3yxe,chopperkuncodes,1 point,Sun Mar 15 23:28:54 2015 UTC,"I switched capslock to alt/meta, and bound M-o to execute-extended-command. That let's me hold alt with my left pinky while tapping o with my right ring finger. I can do that with minimal movement away from home position.  I don't recall the default binding for M-o, but I never used it. I left M-x, but never use it anymore."
emacs,2z3yxe,plantarum,1 point,Mon Mar 16 01:03:02 2015 UTC,"Alt-x is one of the most frequently typed Emacs key combos   Really? I'd say it's one of the key combos I used the least. If I find that I'm using a command fairly often, I set up a key binding for it, so I don't need to type M-x all the time.  Tip: use the hydra package."
emacs,2z3yxe,permafrosty,1 point,Mon Mar 16 10:17:18 2015 UTC,M-x isn't really that bad on DVORAK...  I'll just leave now.....
emacs,2z3yxe,pallagun,1 point,Mon Mar 16 21:39:52 2015 UTC,"I can't stand this advice.    I think it's much easier to hit M-x than it is to hit C-x.  M uses the thumbs, the most powerful fingers, and C uses the pinkies, the weakest."
emacs,2z1bek,sbay,5,Sat Mar 14 17:28:38 2015 UTC,"Don't use anything.el. It's a very old package and is unmaintained any more. anything.el is renamed to Helm 3 years ago and is actively maintained. See my Helm guide for details.  It seems like you are writing C/C++. Then, you may want to look at my C/C++ guide. With my guide, you can jump anywhere easily, even for large project with 30,000-50,000 files.  Finally, if I remember correctly, simple-call-tree.el is only usable with Emacs Lisp. If you want a call tree in C (only in C), use cflow.el and read its manual. cflow.el uses GNU Cflow, so you must install it first."
emacs,2z1bek,tuhdo,1 point,Sat Mar 14 17:37:20 2015 UTC,"Wow! Your c/c++ guide is very thorough and has very useful tools that I have been looking for. I am surprised that you have no option for a call-tree.  Ok, so I looked at cflow, unfortunately it gives a graph of ""all"" functions in the source code. I work on projects with well over 1M lines of total code. So I would be interested to see the tree of ""one specific"" function.  Do you think there is a package that would allow me to do that?"
emacs,2z1bek,tuhdo,1 point,Sat Mar 14 18:02:13 2015 UTC,"Unfortunately I don't think there's any. For call tree, I suggest you using Doxygen that can view call graphs for you to view in a browser."
emacs,2z1bek,tuhdo,1 point,Sun Mar 15 04:32:33 2015 UTC,"Also, in your guide you don't show how to get your code coloring style. Would be awesome if you could add that."
emacs,2z1bek,tuhdo,1 point,Sat Mar 14 19:50:18 2015 UTC,"You mean the color theme with mostly black, gray and white? I used my own version monochrome-theme. Here is my theme source."
emacs,2z1bek,bamanzi,1 point,Sun Mar 15 04:35:07 2015 UTC,"I actually mean the other one, with the example under this line: Interactive outline tree using moo-jump-local from function-args package:"
emacs,2z1bek,bamanzi,2,Sun Mar 15 05:24:05 2015 UTC,Ah it's Zenburn. You can get it from MELPA.
emacs,2z1bek,bamanzi,1 point,Sun Mar 15 05:42:00 2015 UTC,here is an usage example: convert the call tree into an graphviz graph: https://github.com/martialboniou/emacs-revival/blob/master/simple-call-tree+.el#L78
emacs,2z1bek,bamanzi,1 point,Sun Mar 15 23:19:41 2015 UTC,"Thanks, tried it and I get: symbol function definition is void add-hook-once"
emacs,2yy1ut,abo-abo,6,Fri Mar 13 20:05:43 2015 UTC,What is the difference between this and Helm-swoop?
emacs,2yy1ut,excitedaboutemacs,2,Fri Mar 13 21:26:33 2015 UTC,"Why don't you try it and see?  Both packages set out to accomplish the same goal. I did try helm-swoop, but found it less convenient than it could be. Obviously, swiper is more convenient for me, since I wrote it.  One big difference is that swiper can work without helm. Smaller differences are the matching algorithm, the match highlighting, and some shortcuts."
emacs,2yy1ut,nandryshak,7,Fri Mar 13 21:33:45 2015 UTC,"At first glance, even after reading just the title, swiper and helm-swoop sound extremely similar, and besides the non-helm interface, I don't see what could've brought you to write swiper after trying swoop.   What makes it more convenient?"
emacs,2yy1ut,hyperbling,2,Fri Mar 13 22:12:10 2015 UTC,"i just gave it a shot.  ivy is pretty cool, and sits between the lightweight ido and heavyweight helm.  as for differences, the only one that i could find is when you have multiple search terms.  swiper has a much better highlighting mechanism, and will show you each submatch, rather than the entire thing."
emacs,2yy1ut,hvis,1 point,Sat Mar 14 01:13:14 2015 UTC,"as for differences, the only one that i could find is when you have multiple search terms   That's about it, actually. But proper match highlighting isn't a small deal.  The other small things are:   C-n/C-p aren't circular swiper doesn't put in thing-at-point as the search term"
emacs,2yy1ut,hvis,1 point,Sat Mar 14 08:44:47 2015 UTC,"swiper doesn't put in thing-at-point as the search term   Why not? At least, being able to do that with C-u or M-n would be quite useful."
emacs,2yy1ut,tuhdo,1 point,Sat Mar 14 10:44:23 2015 UTC,"Why not? At least, being able to do that with C-u or M-n would be quite useful.   The point is not to do it by default. A C-u option or search from selection can be added eventually."
emacs,2yy1ut,hvis,0,Sat Mar 14 12:22:13 2015 UTC,"Well, Helm can behave either way, so it's not really a point in Ivy's favor."
emacs,2yy1ut,krupped,1 point,Sat Mar 14 14:42:51 2015 UTC,"Well, Helm can behave either way, so it's not really a point in Ivy's favor.   You're confusing a lot of things:   helm is a general completion plugin used by helm-swoop that uses a huge window to store the completion candidates and changes the window configuration while completing ivy is a general completion plugin used by swiper that uses the minibuffer for completion without touching the window configuration helm-swoop selects symbol-at-point as the starting input by default, which I think is a bad design choice, since it's very annoying to delete the wrong thing from the initial input swiper does not select symbol-at-point. It can get this feature in the future, it's very simple, but it will certainly not be enabled by default."
emacs,2yy1ut,hyperbling,3,Sat Mar 14 15:09:28 2015 UTC,"You can easily disable symbol selection at point in helm-swoop. As for window configuration size, you can always define the size with helm-autoresize-mode (by setting max = min) or use popwin."
emacs,2yy1ut,krupped,0,Sat Mar 14 15:49:16 2015 UTC,"All right, sorry. It seemed to me this thread was about comparing Ivy and Helm."
emacs,2yy1ut,syl20bnr,1 point,Sat Mar 14 15:13:10 2015 UTC,"The thing-at-point behaviour of helm-swoop can be disabled by setting the helm-swoop-pre-input-function as follows:  (setq helm-swoop-pre-input-function (lambda () """"))   This configuration option actually makes helm-swoop extremely general purpose, and you can configure it to do some pretty cool stuff based on context."
emacs,2yy1ut,syl20bnr,1 point,Sat Mar 14 16:10:46 2015 UTC,"FYI, ignore is a standard emacs function that you can use instead.  e.g.  (setq helm-swoop-pre-input-function #'ignore)"
emacs,2yy1ut,syl20bnr,1 point,Sat Mar 14 18:17:21 2015 UTC,"This configuration option actually makes helm-swoop extremely general purpose, and you can configure it to do some pretty cool stuff based on context.   A function taking a single optional argument (like swiper does) is just as general purpose, but much more clean. Once you're setting a custom var to a lambda, you're basically programming your own function implicitly. Why not just do it explicitly and wrap helm-swoop?"
emacs,2yy1ut,syl20bnr,3,Sat Mar 14 16:16:17 2015 UTC,"A function taking a single optional argument (like swiper does) is just as general purpose   I suppose that's true, although I would hesitate to argue which of a wrapper function vs a callback is cleaner or more idiomatic for elisp, I seem to recall seeing both styles quite a bit. It wouldn't really consider it as a factor in my selection of which package anyways.  So after playing with swiper for about half hour, I'm reasonably convinced these are functionally equivalent unless you use the ivy interface, which lets you see all your buffers while searching, rather than helm taking over one of them. Although actually, now that I think about it I think you can get helm to do that too.  Are you planning on making a swiper-multi?"
emacs,2yy1ut,kcin,2,Sat Mar 14 16:48:31 2015 UTC,Are you planning on making a swiper-multi?   It's not a priority at the moment.
emacs,2yy1ut,syl20bnr,0,Sat Mar 14 16:54:20 2015 UTC,My configuration is setup to have the exact same behavior with helm (i.e. Pop up buffer at the bottom of the screen).
emacs,2yy1ut,syl20bnr,0,Sat Mar 14 22:54:38 2015 UTC,"A function taking a single optional argument (like swiper does) is just as general purpose, but much more clean.   This is the exact same thing and none of the two approaches is cleaner than the other (why much more by the way?), this is the basis of a functional language.  Example:  (let ((my-query (my-selection-function))) (swiper my-query)) (let ((helm-swoop...function 'my-selection-function)) (helm-swoop))   I would argue that technically the helm-swoop way to do it is more powerful because this function could be applied at different point in the helm-swoop implementation to lead to different interesting behaviors and most importantly it is a lazy way to get the initial query which is also an interesting property. Although in this case there is no advantage of such possibilities (I just looked quickly at the source)."
emacs,2yy1ut,Knusper2000,0,Sun Mar 15 06:17:28 2015 UTC,is the basis of a functional language   which Elisp isn't
emacs,2yy1ut,sadECEmajor,1 point,Sun Mar 15 09:45:54 2015 UTC,"Ok you won ! So much knowledge and wisdom in a few words, I surrender master."
emacs,2yy1ut,sadECEmajor,0,Mon Mar 16 13:03:59 2015 UTC,"I don't know why the highlight is gone in helm-swoop but look at the gif in the readme of the repo, it should highlight all the sub patterns.  EDIT: ok there is some bug with highlighting, there is also a threshold variable to highlight sub patterns of length > 2. It's easy to add a defcustom for this. For the face, it is already configurable."
emacs,2yy1ut,hvis,1 point,Sat Mar 14 04:58:46 2015 UTC,"I wanted to suggest that you should make it work with helm too, but I see it's possible already. Nice."
emacs,2yy1ut,hvis,0,Fri Mar 13 21:53:35 2015 UTC,"What's the benefit of not using helm except that your backend is ""lightweight"" ?  Helm is already optimized for speed and since it is already installed on a lot of emacs configurations I only see ivy as more code capable of generating bugs.  Why not use facilities already in place which prove to be very solid solutions ?"
emacs,2yy1ut,syl20bnr,2,Sat Mar 14 04:45:03 2015 UTC,"Why not use facilities already in place which prove to be very solid solutions?   Why not use the package first instead of asking questions?  ivy, unlike helm, works in the minibuffer only, without changing the window configuration. You can easily configure the minibuffer height.   installed on a lot of emacs configurations   Not all of them, some people even try actively not to get helm installed by other packages.   I only see ivy as more code capable of generating bugs   You don't have to use it. I wrote it for myself and I can deal with my own bugs. If anyone wants to tag along using it, I'm fine with it, but it's totally OK for swiper/ivy combo to have only one user (me)."
emacs,2yy1ut,xenodium,1 point,Sat Mar 14 08:39:14 2015 UTC,"It's impossible to make a point with you.  By the way thanks for confirming that ""a lot of"" == ""not all of them"" I was not sure about this.  I hope that if someone uses eldoc or any other package dealing with the minibuffer there will be no denied of display for ivy."
emacs,2yzkoz,aport,3,Sat Mar 14 04:01:34 2015 UTC,It had two purposes.   It allows you to quickly install your list of packages on a new machine It allows Emacs to know which dependencies are no longer needed and safe to remove.
emacs,2yzkoz,BruceConnor,1 point,Sat Mar 14 10:54:44 2015 UTC,I'm on git master branch (version 25 too) and had the same problem when I forgot to set up custom-file (its value is nil by default). Usually you also need to load that file from your init.el.
emacs,2yyfbq,AsymptoteToHappiness,3,Fri Mar 13 21:47:51 2015 UTC,"Why not use emacs --batch.  You  can also use Emacs as #!, #!/usr/bin/emacs --script."
emacs,2yyfbq,---R,1 point,Fri Mar 13 22:14:28 2015 UTC,"Thanks, I didn't know about emacs --script.  Although, it's not applicable in my case, as emacs is not present on target hosts."
emacs,2yyfbq,wadcann,3,Fri Mar 13 22:27:38 2015 UTC,regex-opt doesn't generate an optimal regular expression.
emacs,2yyfbq,Lucifersam45,0,Sat Mar 14 09:23:12 2015 UTC,mayve
emacs,2yw86l,BruceConnor,6,Fri Mar 13 09:41:18 2015 UTC,You have debug-on-error set to t somewhere in your init.
emacs,2yw86l,BruceConnor,2,Fri Mar 13 10:22:48 2015 UTC,"I really don't refer to it anywhere in my ~/.emacs. I wonder if this is set by default in Emacs 24?  You're right that it was set, though:   debug-on-error's value is t Original value was nil"
emacs,2yw86l,BruceConnor,7,Fri Mar 13 11:48:13 2015 UTC,"I really don't refer to it anywhere in my ~/.emacs. I wonder if this is set by default in Emacs 24?   debug-on-error's value is t Original value was nil    This quote is precisely stating that the default value is nil, so it's being set to t somewhere.  Look harder. Maybe you have (toggle-debug-on-error) somewhere."
emacs,2yw86l,wasamasa,3,Fri Mar 13 11:53:41 2015 UTC,"Thank you, you're right.  Following your suggestion I grep'd my ~/.emacs.d directory and found that powershell-mode.el was setting debug-on-error."
emacs,2yw86l,cbilson,8,Fri Mar 13 13:12:59 2015 UTC,Good to know. :-) You should file a bug on that package.
emacs,2yw86l,wasamasa,1 point,Fri Mar 13 14:30:28 2015 UTC,I doubt that will help considering development of that package has ceased and it's been even taken out of MELPA in favour of powershell.el.
emacs,2yw86l,cbilson,1 point,Fri Mar 13 16:55:55 2015 UTC,"We should fork it. I didn't think there enough of us (Emacs+powershell) users in existence, but your comment causes $me.Hope += 1."
emacs,2yw86l,instant_sunshine,1 point,Sat Mar 14 00:50:28 2015 UTC,"Did you read the MELPA thread I've linked? The author of powershell.el explained there that he took over the parts of existing other powershell modes and combined them. Forking wouldn't make much sense here unless its development dies, too."
emacs,2yw86l,BruceConnor,2,Sat Mar 14 06:48:35 2015 UTC,"Ah, thanks! I didn't realize this had happened. I was still using an old copy of powershell-mode I copied from somewhere and made some small changes to."
emacs,2yw86l,kcin,1 point,Sat Mar 14 20:02:51 2015 UTC,It's quite likely a package has set it to t
emacs,2ys4d8,tuhdo,3,Thu Mar 12 10:21:38 2015 UTC,One word: nifty.
emacs,2ys4d8,tampix77,2,Thu Mar 12 15:49:29 2015 UTC,Glad you like it :). I've created a package out of this: semantic-stickyfunc-enhance.  Here is a demo in C mode.  Here is a demo in Emacs Lisp mode.
emacs,2ys4d8,ReneFroger,2,Thu Mar 12 18:02:54 2015 UTC,"Whoa. That's impressive work!   One question. It seems it will work only with C/C++/Elisp, right? What are the limitations to get it working with another languages, like PHP and Javascript?"
emacs,2ys4d8,ReneFroger,2,Fri Mar 13 10:31:33 2015 UTC,"I've tested with PHP mode again and it works. It seems like I did something wrong the last time, since I didn't know much about PHP. All you need to do is follow the installation instructions on the package page.  Note that I only tested with stock .php file, but not template server pages. I don't think it works in web-mode."
emacs,2ys4d8,aptmnt_,2,Fri Mar 13 18:07:47 2015 UTC,"Thanks tuhdo. You're great, you know?  I will test it out soon. I'm still struggling with the issue of slow Emacs and slow response, especially with PHP/HTML files, so I would like to solve that first."
emacs,2ys4d8,theldoria,1 point,Fri Mar 13 22:22:33 2015 UTC,"It works with Python as well. You should check the package repo. If you want to get it working with languages like PHP or Javascript, it must be supported by Semantic. To get Semantic to support it a language, a grammar file of such language must be provided, in either LL or LALR format. Once supported, it enables IDE features for that language.  PHP seems to have a grammar but I can't seem to get it working."
emacs,2ys4d8,CodyChan,1 point,Fri Mar 13 10:39:42 2015 UTC,"Very cool, though usefulness varies depending on how wide you like to keep your frame. Also, tangential, but I'm digging the colorscheme. Like a different flavor zenburn. What is it?"
emacs,2ys4d8,ReneFroger,1 point,Thu Mar 12 21:47:30 2015 UTC,It's darkburn-theme. You can find it on MELPA.
emacs,2ys4d8,ReneFroger,1 point,Fri Mar 13 02:41:41 2015 UTC,"Absolutely awesome, can't wait to try it tomorrow :)"
emacs,2ys4d8,ReneFroger,1 point,Thu Mar 12 22:35:16 2015 UTC,"Weird, it works for Python and C code here, but not Emacs Lisp at all, not even I crated the function in you Emacs Lisp demo, not even I use emacs -Q and only load semantic-stickyfunc-enhance package and made the the following configuration.  All my configuration for the package is:  (add-to-list 'semantic-default-submodes 'global-semantic-stickyfunc-mode) (semantic-mode 1) (add-to-list 'semantic-default-submodes 'global-semantic-idle-scheduler-mode) (add-to-list 'semantic-default-submodes 'global-semantic-idle-summary-mode)"
emacs,2ys4d8,ReneFroger,1 point,Sat Mar 14 02:09:47 2015 UTC,"Did you load the package: (require 'stickyfunc-enhance)? Without loading, you get the old semantic-stickyfunc-mode; that is, when you move to the next line, parameter is not merged into the top line but discarded. Btw, the current CEDET shipped with Emacs seems to be broken in Emacs Lisp. You should checkout latest CEDET into your ~/.emacs.d:  git clone http://git.code.sf.net/p/cedet/git cedet cd cedet make cd contrib make   Then, load it at the very beginning of your init.el:  (add-to-list 'load-path (concat user-emacs-directory ""cedet/contrib"")) (load (concat user-emacs-directory ""cedet/cedet-devel-load"")) (load (concat user-emacs-directory ""cedet/contrib/cedet-contrib-load""))"
emacs,2ys4d8,ReneFroger,1 point,Sat Mar 14 05:29:27 2015 UTC,"I enabled the semantic-mode inside emacs, and installed srefactor, after calling semantic-stickyfunc-mode I get the message that the buffer with the PHP file is not set up for parsing?"
emacs,2yp9v7,forked_tongue,21,Wed Mar 11 18:03:18 2015 UTC,"If the problem was simply a reluctance for users to learn a different interface, then no one would be picking up vim either. Can you think of anything more different from CUA than modal editing? And yet, a great many more people are able to learn the very alien concept of modal editing. Every tutorial begins with suggesting edits to .vimrc, which is a symptom of some problematic defaults for vim as well, but someone looking to learn vim is not advised to install some extension that changes vim into Microsoft Notepad.   Vim is totally different than text editing according to CUA. So why isn't /r/vim full of these same repeated debates about whether the defaults are even worth learning at all?"
emacs,2yp9v7,mooglinux,9,Thu Mar 12 07:03:01 2015 UTC,Because vim's default keys are actually well thought out and can be combined in logical ways.   Many of emacs default keys/combinations are just plain stupid. And it does not help that the CTRL key is in bad postition in modern keyboards. It breaks your hands.
emacs,2yp9v7,Erakko,5,Thu Mar 12 13:06:25 2015 UTC,Agreed. Notice that OP doesn't actually offer a single example of the wisdom behind common default bindings in Emacs. They just stipulate that these bindings are well-thought out. The closest they come to any sort of rational account of these choices is indicating that other things are based on or presuppose these initial bindings. But that's not the same issue.
emacs,2yp9v7,abathologist,1 point,Thu Mar 12 18:31:31 2015 UTC,"Can you offer any compelling evidence for, or examples of, the wisdom of alternate choices?  And I don't claim any wisdom for the initial choices of emacs...there's lots of evidence to suggest they were arbitrary.  However, a lot of internally consistent idioms have since been built on top of those initial choices.   And I do think a lot more consideration has gone into that.   Regardless, I'm still very curious why I need to defend one set of arbitrary choices against another.  Seriously, why is CUA (or the interface of your choice) less arbitrary?  Are you any more capable of demonstrating that?"
emacs,2yp9v7,sindikat,4,Fri Mar 13 04:13:05 2015 UTC,"I think ErgoEmacs is superior to Emacs default bindings. Reasons:   Uses mostly Alt and rarely Alt+Shift instead of Ctrl  You press Alt with a thumb and Ctrl with a pinky. Thumb is much stronger than pinky, and using Alt constantly doesn't strain the hand that much. Introduces well-known keyboard shortcuts like Ctrl+n for new file and Ctrl+s for save  Yes, we already know that Ctrl sucks, and it's a shame that practically all GUI programs use Ctrl convention, but it lowers the barrier to entry for newbies. Groups similar commands meaningfully  i, j, k, l (similar to gaming's WASD) for movement as just one example. Throws away rarely used shortcuts  When is the last time you used zap-to-char?   Now I know that ErgoEmacs is not perfect and there are plenty of idiosyncrasies and inconsistencies too. But it's a step in a right direction. ErgoEmacs is what made me love the actual Emacs. If not for it, I would probably ditch Emacs long ago.  I don't use ErgoEmacs, but use a keybinding scheme inspired by it. I'm not satisfied with it at all, and I think the whole philosophy behind key shortcuts could be redesigned, but I don't have time nor desire to research into that. However, if you are interested in some ideas on how ideal Emacs keybinding could look like, I mostly agree with this article."
emacs,2yp9v7,sindikat,2,Fri Mar 13 16:48:57 2015 UTC,"Rather than go point-by-point, I'll just say your reasons look personal, rather than universal.  And that's fine.  For you.  (And I've seen the keyboard advice from /u/xah and personally consider it insane...but that's my own personal judgment.  Though there are some valid points there, there are also quite a few highly questionable conclusions.)  Further, it is my suspicion that there is some deeper learning that you've missed out on (at least initially), by starting out with ErgoEmacs.  There are some mnemonic devices and idioms that are used throughout emacs that the default binds are a primer for.  But I can't know that for certain, it's just a suspicion.  In any case, none of that discounts your thoughts and preferences.  But I think you're considerably more certain of a few points than objective evidence warrants.  Which again, is just fine for you, as an individual...but is maybe not the best guidance for universal policies.  P.S.  I use zap-to-char quite a bit!  It's very useful in macros.  Perhaps not every day, but often enough I'd (personally) regret re-binding it."
emacs,2yp9v7,sindikat,4,Fri Mar 13 17:15:13 2015 UTC,"Dude, you're very verbose. Your whole comment could be compressed into something like “your arguments may be valid for you but not for others”. And franky, it reads more like “technically, your argument can't be disqualified right away, but I think you are an idiot”.  It's true that there is no rigorous scientific studies on keyboard ergonomics. But there is no rigorous scientific studies on why Emacs is superior to Notepad, or Lisp is more suitable as a scripting language for Emacs than some version of Java. This just make sense from experience. Guess what, it's all very personal and subjective too, unless you can point me to a relevant study. Any decision that Emacs developers made during these years weren't consulted with bleeding-edge science. They just did because they felt it made sense. And they argued with each other too, coming up with arguments on both sides (and there are not necessarily only 2 sides).  So I don't understand the point of the whole thread, if you knew in advance, that you gonna dismiss any argument with the fallacious “but there is no reliable science behind it”.  What's your point anyway? Should Emacs have different default keybindings? That's a meaningless question, because god knows what “should” means in this context. I just think that if Emacs used mostly Alt instead of mostly Ctrl in keybindings, then the experience would be vastly more pleasant, and there would be less people with RSI. And if Emacs supported Ctrl+n and other widespread shortcuts, then there would be more novices willing to learn Emacs. Do I have studies showing that using thumb instead of pinky reduces RSI? No, just like I don't have studies for absolutely any advice given on /r/emacs.  Just think how ridiculous it would be, if a novice, when advised by an experienced Emacs user to learn some Elisp, retorted with “But you don't provide any rigorous controlled studies with p < 0.05 that learning Elisp actually improves your Emacs experience!”"
emacs,2yp9v7,Ironballs,1 point,Fri Mar 13 17:54:51 2015 UTC,"I had 2 points:   Firstly, I think beginners are poorly served by customization preceding an initial period of learning and practice.  Barring some physical injury or disability that requires it, such customization is premature and harmful.  And yes, I'm pretty committed to this opinion, and mostly just wanted to share it.  (And defend it.) Secondly, I am more open to changing defaults than it might appear.  Though I find CUA somewhat personally repulsive (and 1987's IBM's recommendations for MS-DOS ""GUI"" applications really doesn't seem anything remotely like ""progress"" to me), I am attracted to both convention and improvement.   Especially improvement of the new user experience, which I would agree is rather daunting.   And yes, there are some conflicts between the first point and the second point.  And that motivates some discussion, don't you think?  I don't consider you an idiot.  (If I did, I wouldn't bother conversing with you...no one is enriched by argument with idiots.)  However, I do find a lot of your views very presumptive (e.g. more users of emacs as unquestioned good, default emacs bindings cause RSI, CUA is the interface standard that all present (and circularly, future) applications should default to, etc.); these are all very questionable assumptions which you appear expect others to simply accept as true.  And that probably does induce a bit of condescension in my tone.   There's nothing wrong with opinions, but they shouldn't be confused with facts.   Both are beliefs, and everyone holds their own beliefs to be (at least tentatively or provisionally) true...which is the core trouble in many communications.  The dividing line between opinion and fact is compelling evidence.  The key point here is that just because you believe something to be true is not sufficient to make it factual.  And asking for advice is usually asking for opinions.  And I do take a dim view of muddling these, hence the tone."
emacs,2yp9v7,sindikat,2,Fri Mar 13 19:00:47 2015 UTC,"More users of Emacs, if not at expense of other Emacs priorities is strictly an improvement, because more users means more bug-reports, more packages, more tutorials, more improvements. Also, if you think that Emacs does actually make life better for some category of people, then it's obviously good, if these people start using it. Do we really need to discuss that?  Default Emacs bindings probably cause RSI, because various Emacs users acquired RSI during the years. And these are programmers, not typists—typists need to type an order of magnitude more than programmers, because programming is mostly looking at code and thinking, not actual typing. Ctrl-based combinations may have contributed to that. Do I have science behind that? No.  I didn't say CUA is standard everywhere, but it's standard in like 99.9% software that everyone uses. Microsoft Word userbase maybe a few orders of magnitude bigger than Emacs userbase, so obviously more people are accostumed to Ctrl+n than to C-x C-s. So obviously keybindings compatible with 99.9% of software would make it easier for newbies to use Emacs. How many newbies? I have no idea, but I can speculate that probably quite much, knowing that even a second of latency can drive away thousands of visitors from a website. Do I have any statistics for that? No I don't.  The whole paragraph about opinions and facts is just meh. Ever heard of Bayesianism? Degrees of believes? Stuff like that? You can never know that something is factual, absolutely every belief that you hold will always be an opinion. But some things are so convincing, that we assign like 99.99% of confidence to them and call them facts for simplicity. I believe that, say, ErgoEmacs significantly reduces RSI risk with like 65% or something. If I ever stumble upon high-quality study that confirms my belief, it would change my confidence to like 99% (according to Bayes theorem, but people are not perfect Bayesians, so it's always an approximation). If you provide good arguments (not necessarily rigorous studies, just something that convinces me based on what I know about the world), it would shift my confidence to 50% or 30%, or whatever.  You don't have any science behind any of your point. You don't even have compelling evidence, that you're talking about, for your first point. Then you are annoyed that nobody provides peer-reviewed papers or whatever. Then you say that people inappropriately hold you to a high standard. This doesn't make sense to me. I don't hold you to a high standard. Have any argument, no matter how compelling or not, throw it out, let's discuss. I'm happy to provide arguments for my ideas and maybe go out of the way and research stuff a little bit to strengthen my arguments. But I'm not that invested, so if you just want to be deliberately obtuse and win Internet debates, then I concede, you won every debate in this thread, whatever."
emacs,2yp9v7,sindikat,3,Fri Mar 13 19:30:11 2015 UTC,"The reason for Emacs' keybindings is this.  This is a space-cadet keyboard, the keyboard that was used at MIT for their Lisp Machines, upon which the initial versions of Emacs were written.   Notice the position of the Control and Meta keys and the lack of arrow keys.   There is nothing arbitrary about the keybindings, with modern keyboards they simply feel strange because modern keyboards are different, and this is why many Emacs experts recommend using Caps as an additional Control modifier."
emacs,2yp9v7,BruceConnor,1 point,Fri Mar 13 14:21:47 2015 UTC,"Well, these comments from Daniel Weinreb...  https://groups.google.com/forum/#!msg/comp.emacs/j_fNPgtbavM/DVygGrzgQgMJ  ...actually do suggest a certain amount of arbitrariness about the original set!   So, there certainly does appear to be  something arbitrary about them.  However, I agree that many more carefully considered things have been built atop that original set.  (Run M-x apropos with inputs: ""next"", ""previous"", ""forward"", ""backward"" for many examples!)  But the main point I was trying to make is simply:  any current set of keybinds (whether that's emacs/readline, CUA, vi(m), or something even more exotic) is likely to contain some arbitrary choices!  I don't think any large-scale, long-term, scientific studies have been done on keyboard ergonomics.  Nor does all software make the same use of the keyboard.  Combining both those previous points  (no data, different use cases), no existing interface standard is in any position to demonstrate it's superiority.  And I somewhat resented having such a demonstration demanded.  I can't ""prove"" emacs bindings are well designed.  But there's no such proof for any other set of bindings either.  Which makes that particular criticism entirely empty."
emacs,2yp9v7,vermiculus,2,Fri Mar 13 16:11:44 2015 UTC,"any current set of keybinds (whether that's emacs/readline, CUA, vi(m), or something even more exotic) is likely to contain some arbitrary choices!   Fallacy of gray. Nothing is perfect, nothing is black and white, but some things are better than others, and some shades of gray are lighter than others. Arguing that any current set of keybindings will contain some arbitrary choices, therefore they are all equivalent, is like arguing that no person can be flawlessly good, therefore Einstein and Hitler are equivalently good.  My point is, some keybindings are superior to others, but, as you say, because we don't have any science on keyboard ergonomics, we don't know which keybinding scheme is superior. But it shouldn't stop us from making incremental improvements, if common sense, small empirical samples, anecdotes, subjective feelings, whatever, compels us to make these improvements. There's no scientific proof that transient-mark-mode, or visual-line-mode, or whatever new default that Emacs introduced since some version, is better than lack of it. But people generally found it to be useful for some reason.  Without any large-scale scientific studies, you can make a case for anything to be superior to anything else. Your argument will be weaker, but it's still possible."
emacs,2yp9v7,sindikat,1 point,Fri Mar 13 17:03:02 2015 UTC,"Fallacies apply to claims, not their absence.  And I've made no claim of equivalence.  I simply objected to being held to a higher standard of proof, which the competing viewpoint (by omission) was not.    The only equivalence involved is the desire for an equivalent standard to be applied.    Demanding evidence for an opposing viewpoint while not requiring any for your own is not an intellectually honest objection."
emacs,2yp9v7,Boojum,1 point,Fri Mar 13 18:17:43 2015 UTC,"You said any keybinding is going to have some arbitrariness. I said that that's irrelevant,  because some keybindings can be less arbitrary nonetheless. They can also be more pleasant, more consistent, more easy to memorize etc.  ErgoEmacs is more consistent than Emacs default, for the reasons I gave, for the reasons Xah gave. Do you disagree with that? I'm happy to hear your arguments."
emacs,2yp9v7,LittleHelperRobot,1 point,Fri Mar 13 18:38:40 2015 UTC,"They'd mostly boil down to the same disagreement:  you're treating your personal judgments as absolute ones.  More pleasant, more consistent, easier:  for whom?  It's possible, though extremely unlikely, that your (or Xah's) personal experiences and tastes are a perfectly representative sample.  You may feel comfortable with that gamble, but I surely do not."
emacs,2yp9v7,abathologist,12,Fri Mar 13 19:17:18 2015 UTC,The only opinion I have on this subject is that the question is so hard that I'm surprised how some people can be so sure about any of the answers.
emacs,2yp9v7,abathologist,3,Thu Mar 12 01:02:48 2015 UTC,Forget answers – I don't even know what the question means.
emacs,2yp9v7,abathologist,2,Fri Mar 13 23:24:55 2015 UTC,"I agree with you, that's why I don't fanatically endorse ErgoEmacs, for example. There are multiple ways in which ErgoEmacs just sucks, and it's unclear, how exactly could it be improved. I think that keyboard ergonomics is just an unsettled issue of great potential scientific interest. I personally found this article on Emacs keybinding revamping very insightful (and very unsatisfying by the end of the day, obviously)."
emacs,2yp9v7,RobThorpe,11,Fri Mar 13 17:07:01 2015 UTC,"So experienced users can modify their emacs experience but newbies shouldn't customize one of the most customizable editors out there?  This is a gatekeeper post.  Newbies, make emacs what you want of it. You'll learn on lot of LISP on the way."
emacs,2yp9v7,vermiculus,8,Thu Mar 12 00:05:24 2015 UTC,"If were talking gates, etc., I think the OP's argument leans more towards Chesterton's fence."
emacs,2yp9v7,abathologist,3,Thu Mar 12 01:24:38 2015 UTC,"Non-mobile: Chesterton's fence.  That's why I'm here, I don't judge you. PM /u/xl0 if I'm causing any trouble. WUT?"
emacs,2yp9v7,incongruousamoeba,2,Thu Mar 12 01:24:46 2015 UTC,"What is the reasoning behind C-n, C-p, C-f, C-b? My understanding is that the mnemonic naming is supposed to help you remember which key moves the cursor which way (except, for me udlr would then make more sense). Well that's very easy to understand, but also seems to me like a bad idea. May I now have permission to remap these to something I know by heart, requires less contortion of my hands, and is more consistent with every other application I use?  You don't have to use npfb for months to learn the reason behind it."
emacs,2yp9v7,a_dollar_sign_texas,3,Thu Mar 12 10:09:54 2015 UTC,"There are many different commands that are built atop the basic ones, e.g. for the case you mentioned there are the s-expression navigation commands (C-M-n, C-M-p, C-M-f, C-M-p), or for the yank/kill binds (C-y, C-k) there are the rectangle versions (C-x r y, C-x r k), etc.  That is, there is often some additional depth to the default bindings, beyond the initial surface you encounter.  And both of those additional command sets are very useful to a programmer.  (And even if you only use org-mode, the rectangle commands can be very useful for org-mode tables.)  So, are you still certain you've learned all the reasoning behind the defaults?  (Which is an unfair question...I haven't either...but I do think there's more there than you've previously noticed, as I've noted more than you, and I know my own knowledge is incomplete!)  But you don't need anyone's permission to modify anything.    My thesis is simply that you may be stunting or slowing your ability to learn and use such additional facilities, if you make modifications prematurely.  (And even more so, if you override bindings for features you may want to use in the future.)  The issue here is that the beginner is unaware of the full extent of what they're discarding, when they abandon the defaults before learning what is built atop them.  If learning to use emacs effectively is truly your goal, isn't that a bit counter-productive?  Certainly there are trade-offs, and you should make emacs work the way you want it to.  But maybe your desires could be better informed than a brief cursory contemplation of the surface details allows for."
emacs,2yp9v7,instant_sunshine,1 point,Thu Mar 12 17:24:03 2015 UTC,"What do C-y, C-k, C-x r y, and C-x r k have to do with fbnp? They function completely independently (as far as I understand), and the mnemonics aren't even linked conceptually. I did have to make a quick fix to my smartparens configurations so that forward, backward, next, and previous s-expression functions were consistent with my chosen navigation keys. But it seems clear that these chords for navigating s-expressions are not any part of the reason for choosing fbnp; rather, because fbnp was already chosen, they were adopted by analogy. So I don't think this counts as evidence that there is deeper thought to the choice of fbnp, it only shows that other things have built on that choice. I've done a bit of searching on this topic, and I have found no explanation for the initial choice, except for the mnemonic and the fact that that the control key was located where the caps lock is now (on most common keyboards), which makes the operation slightly less inconvenient (I have remapped control, but I still wouldn't dream of switching back to nbfp). So, yeah, I really think it takes 2 seconds to ""learn"" the reason behind that default and that the user should then proceed to make whatever change they desire.  This I grant: one shouldn't go mucking about changing default setting unless they're also prepared to muck about changing other stuff to suite their needs. And one should expect that, if they rebind fbnp to something they like better, then they will be rebinding any analogous commands they encounter. That's not a barrier to use, that's just further customization.   The issue here is that the beginner is unaware of the full extent of what they're discarding, when they abandon the defaults before learning what is built atop them.   They're not discarding anything: all the defaults are still right there, immediately recoverable just by moving the config file. Even if they just experiment with changing defaults and end up deciding to go back to them 6-months later, they still haven't lost anything. Instead, they have felt empowered and encouraged to make the tool fit their needs, and they have also learned the value of some initial setting which they had at first overlooked. There's no harm done in this scenario, and in fact a great good, since they have tasted the flexibility of the tool instead of feeling cramped by some sense of allegiance to legacy.  I know you seem to think that their is a great wisdom to (nearly) all the default configurations, but I literally have never heard a good explanation for them. The fact that later bindings are chosen to suite the more basic defaults isn't a justification of those initial choices. Rather, if there is not a good defense available for the initial choices, this fact is a good argument for sweeping, systematic alternatives to the default settings (likely distributed as an opt-in config file, so that people who have come to mistake ""this is how it is"" for ""this is how it should be"" won't feel their legacy methods are being undervalued).  There's also the issue of antiquated tooling within the Emacs ecosystem: for instance, with multiple cursors mode at my disposal, I have found no use for rectangle selection: the latter covers all use cases of the former and more (at least, as far as I've been able to see). Ditto smarparens mode vs. the default s-expression navigation. Ditto smart-jump-mode vs. standard navigation. Given that most basic emacs functionality is improved by some package or another (in which case you'll be wanting to customize the packages) it seems to me that even the argument based on accretion of bindings over the initial defaults is irrelevant.  The nail in the coffin for this argument is the existence of key-chord-mode: even if some re-binding I chose early on conflicted with a more obscure default binding I discovered down the road, I could just bind the latter to a convenient key-chord completely independent from the rest of my bindings, and I'd immediately have the desired functionality."
emacs,2yp9v7,vermiculus,2,Thu Mar 12 18:45:27 2015 UTC,"What do C-y, C-k, C-x r y, and C-x r k have to do with fbnp? They function completely independently (as far as I understand), and the mnemonics aren't even linked conceptually.   Not to each other, no.  But the mnemonic device is the same: next, previous, forward, backward, yank, kill.  And they're both examples of original binds that have been heavily extended...run M-x apropos on any of those first-letter-bolded words, if you don't believe me.  Also, I agree that the initial choices were arbitrary, and probably not optimal...though I do have to hedge with probably there, as aside from personal anecdotal testimony about the horrors of any set of keybindings, there are no large-scale, multiply replicated scientific studies about the ergonomics of keybinds.  Regardless, the point remains, even if the initial selection was arbitrary bathwater, there are a lot of babies (see my M-x apropos comment above) in that soup, now.     This I grant: one shouldn't go mucking about changing default setting unless they're also prepared to muck about changing other stuff to suite their needs.    Well, that's my core point.  So, we don't disagree about nearly as much as you seem to think.  You do seem to hold that attitude that ""older is always inferior and newer is always better"" though...which is just as empty a strawman as my ""love for legacy"" is...and both with just enough truth in them that we can feel comfortable dismissing the other viewpoint.  And it's probably not worth dwelling too much on our differences there...neither of our opinions are likely to change much, or to sway others.  I will say though that I while agree that simply trusting in the ""wisdom of the ancients"" is foolish, it's even more foolish to consider all prior work to be low-quality trash produced by imbeciles.     But that's just the rambling of an old-timer, so you can feel free to dismiss it."
emacs,2yp9v7,to3m,1 point,Thu Mar 12 21:35:27 2015 UTC,"I overstated my previous point. Sorry for that.  I think I've already been too repetitive in stating my views regarding the accretion of additional bindings on top of the basic defaults, and I think we probably understand each other as well as we're going to on that point. But I should perhaps reiterate that just because you rebind some small subset (e.g., C-[n|p|f|b]) doesn't mean you throw out all other bindings that use npfb. That's simply a false dichotomy: it is easy and trivial to have both your basic cursor navigation of choice and the entire suite of more complex tools which use the npfbyk letters. So you can bail out as much bathwater as you please and still eat your fill of babies (am I (mis)using that metaphor right?).  I think anyone who enters into the world of Emacs should be interested in and willing to embark upon an adventure of customization and deep tweaking. If not, stick with tools which are better suited to your particular purposes. But then, by my criteria, any Emacs newbie is ready to start mucking about straight away—as demonstrated by their desire to use Emacs at all.  I absolutely do not hold the view that ""older is always inferior and newer is always better"". Not even remotely. Why would I use emacs at all if I thought that silliness? I don't think multiple-cursors is better than rectangle selection because it's new, I think it's better because, as far as I know, it covers all the functionality of the latter but is more flexible and easier to use. I may be wrong about that, and if my error were demonstrated I'd change my position. That being said, I shouldn't have made myself out to sound utterly dismissive of the Emacs legacy: I think it is vital and essential to the power and beauty of the software. Only, to my mind, the particular key-bindings are completely inessential to the legacy. The legacy is rather about keyboard-centricism, programmability, extensibility, modularity, and collaboration. I guess what I'm really saying then is that I think the position that newbies should be discouraged from customization until they've achieved some arbitrary level of insight into the established wisdom is mistaking accidental features of the Emacs legacy for it's essential ones.   it's even more foolish to consider all prior work to be low-quality trash produced by imbeciles.    Absolutely. This is such a patently absurd position that I'm sure you didn't mean to attribute it to me: this way I can also avoid the conclusion that you meant to call me a fool. That makes your reply seem entirely amicable.  I agree to agree to disagree. But if I see people trying to scare newbies off from digging right into customize their tools, I'll call them out and defend the newbie right to make whatever learning mistakes/advancements they see fit."
emacs,2yp9v7,acow,2,Thu Mar 12 22:07:28 2015 UTC,"Yeah, I called it out as a strawman, above.  And I do think the default keybinds are a good primer, for learning about the next, previous, yank, etc. idioms (and additional default keybinds) used throughout emacs.  Though yes, once that realization has been made, and that vocabulary has been learned, the original binds can be dispensed with (if they're still despised after a bit of practice and familiarity).   But I tend to think a lot of new users are skipping right over that primer, and missing out on a lot, because of it.   Perhaps what is lost is not exactly essential...but it sure can be useful, and save a lot of trouble and time down the road.   But if I see people trying to scare newbies off from digging right into customize their tools, I'll call them out and defend the newbie right to make whatever learning mistakes/advancements they see fit.   I'm not trying to scare anyone off.  (Even if I am wearing the rubber mask of a reddit nickname...but so are you, creep!)  It's more the feeling of watching someone trying to inflate a rubber raft with their mouth (""this isn't my first beach-ball, old man!""), neglecting the foot pump that came with the raft.  (""I don't want my mouth anywhere near that stinky old thing; it smells like feet!"")  Once that raft is fully inflated (the useful learning has occurred), and they're on their way, it doesn't matter so much.  But I really do believe the initial inflation stage would go a lot faster with the tools provided.  And suggesting they use the foot pump is not an attempt to get them to give up rafting!  It's an attempt to get them going faster (and with considerably more ease).   How does that translate to something terrifying?"
emacs,2yp9v7,doomchild,3,Thu Mar 12 23:42:46 2015 UTC,"I generally agree with forked_tongue. I'd just like to expand on some of his points.  To begin with you'll want to change all the word movement keys, M-f, M-b, M-n & M-p.  That's not a big problem, but it's more work.  There are many Emacs modes for viewing things.  You can type things in with these modes, so they remap the normal keys themselves.  The buffer-menu, for example, has n & p. If you want to change everything to use new bindings then these need changing too. They're defined per mode though, so you need to change everything that works like this; buffer-menu, customize, dired, vc-dired, archive-mode, tar-mode, image-mode and doc-view-mode.  Then there are the modes that use similar keys. C-c C-f means ""move to the next heading on the same level"" in org-mode and outline-mode. C-c C-f means move across balanced tag group in HTML mode and SGML mode. In shell-mode it moves forward across a shell command. In *Help* buffers if you follow a link then C-c C-b goes back to the previous help buffer and C-c C-f goes forwards. In Rmail n,p and M-n & M-p move across mail messages (I understand other Emacs mailers use similar conventions).  Then what about using term-mode? Term-mode is great because in key-by-key mode you can use terminal apps that have ASCII graphics, and in line-by-line mode it's like shell-mode. In line-by-line mode cursor commands are controlled by Emacs, so if you remap C-f, M-f, C-a, etc, then it'll work. But, in key-by-key mode your in the hands of the shell, probably bash, so you'll be back to C-f, M-f, C-a and co. That means you could have to remap in the shell too.  Most people will only need a few of these modes (though I've used them all at one time or another). But, even to do a complete job of re-mapping on all of them would be time-consuming. Remember that re-mapping is the task, so new keys are used for movement and they displace existing keys. Those keys need mapping somewhere else, either to fbnp or elsewhere. This isn't trivial, especially at the outset when you haven't much experience with the more obscure modes and don't know what's important.  I'm not at all sure that Emacs' keybindings have been designed in a sensible way or even that they've evolved in a good way. But I do know that budging them takes serious work."
emacs,2yp9v7,nivekuil,2,Thu Mar 12 22:14:02 2015 UTC,"Keep in mind that in some languages, going forward doesn't mean going right."
emacs,2yp9v7,Starlight100,1 point,Fri Mar 13 23:27:52 2015 UTC,That's a good point.
emacs,2yp9v7,RobThorpe,1 point,Sat Mar 14 03:48:41 2015 UTC,"From the Emacs documentation:  ""forward-char is an interactive built-in function in `C source code'.  It is bound to C-f.  (forward-char &optional N)  Move point N characters forward (backward if N is negative). On reaching end or beginning of buffer, stop and signal error. Interactively, N is the numeric prefix argument. If N is omitted or nil, move point 1 character forward.  Depending on the bidirectional context, the movement may be to the right or to the left on the screen.  This is in contrast with <right>, which see."" [emphasis added]"
emacs,2yp9v7,tuhdo,1 point,Sat Mar 14 08:52:52 2015 UTC,That's a much better reply than the one I almost composed.
emacs,2yp9v7,nivekuil,7,Thu Mar 12 02:25:09 2015 UTC,"I'm reminded of when I made the transition from Windows to Linux. I remember talking to the guys in the local Linux user's group, and asking them why Linux did things a certain way. Being more familiar with Windows and the Windows conventions, I kept asking how to find a distro or tweak my settings to be more like Windows.  One day, one of the guys told me something like ""If Linux was more like Windows, it would be Windows, and you'd dislike it for all the reasons you're moving to Linux. Linux is great because it's different than Windows, and you're going to have to accept that if you want to learn the Linux way.""  That really stuck with me. Looking back, I feel that conversation marked a turning point in my attitude toward Linux and programming in general. It's important to learn different ways of thinking and approaching problem solving. It can be easy to want to standardize on One True Way to simplify the myriad of thoughts in your head. But I believe that's a foolish goal. Using different patterns of thinking in different contexts can be extremely rewarding.  To bring this back to emacs, I've really enjoyed learning the emacs way of doing things. I think it's valuable to have a unique perspective and attitude and workflow. As others have mentioned, the joy of emacs is being able to change anything. If you want CUA bindings, set them. Emacs is yours. That's the emacs way."
emacs,2yp9v7,tuhdo,10,Wed Mar 11 20:38:09 2015 UTC,Emacs is yours. That's the emacs way.
emacs,2yp9v7,RobThorpe,0,Thu Mar 12 03:17:05 2015 UTC,I'm not arguing with this...just suggesting spending a little time with the manual might be in order for new owners.
emacs,2yp9v7,kcin,1 point,Fri Mar 13 16:23:36 2015 UTC,"to be clear, the official tutorial sucks major donkey dong"
emacs,2yp9v7,RobThorpe,1 point,Fri Mar 13 23:25:30 2015 UTC,A valuable lesson the cygwin chaps would do well to take to heart.
emacs,2yp9v7,kcin,9,Thu Mar 12 00:08:53 2015 UTC,"In a word, no.  In a few more words, I think much of the perceived difficulty comes from approaching Emacs as though it is a text editor. Viewed as a programming language, say, the learning curve isn't that unusual. Emacs is an environment that computer savvy people customize to meet their needs. As a text editor that you might use once every few months, it is too complicated. As the piece of software you spend most of your time interacting with, it is as customizable as you'd hope."
emacs,2yp9v7,RobThorpe,14,Thu Mar 12 01:21:44 2015 UTC,"I was definitely in the ""emacs needs to act like other things"" camp when I first started using it (which was about five years ago now, I think), and I mostly still am.  I think emacs has an excellent process, but terrible implementation.  By which I mean that the method for interacting with emacs (readline and key chording) is fantastic, but only when considered apart from the default keys, which are confusing to a new user, hostile to hands, and, in an enormous number of cases, completely arbitrary.  Some decisions make plenty of sense.  C-s for search, for example, made plenty of sense once I stopped and realized that yes, I do search more often than I save.  Being different is fine, as long as it's defensible.  I really don't think emacs has that luxury, though.  When I started using emacs, I saw no fewer than ten blog posts from people who looked to be well-informed (some of them were developers I'd been following for years), all of which suggested swapping Caps Lock and Control.  My brain immediately questioned why this wasn't the default.  When I asked, the answer I got was ""it's always been this way, and our muscle memory is trained"".  And that's fine, if you want new users to have to configure things just to keep from being injured by the product.  History is important, but so is knowing when a better thing exists.  Emacs is great at seamlessly integrating good ideas.  Why are key bindings the one place it falls on its face?"
emacs,2yp9v7,kcin,3,Wed Mar 11 20:11:10 2015 UTC,"I actually prefer control in its standard position, since you can hit it using the base of your pinky. I use the caps lock position for backspace."
emacs,2yp9v7,RobThorpe,3,Thu Mar 12 00:40:02 2015 UTC,"True, but to use that technique easily, you need a ""real"" keyboard with big raised keys. On a paper-flat laptop keyboard the standard control location is a chore."
emacs,2yp9v7,RobThorpe,2,Thu Mar 12 02:15:10 2015 UTC,"However, on laptop keyboards the ctrl is often close to everything else. I regularly use a laptop and a desktop. On the desktop I press ctrl with the knuckle on my smallest finger. On the laptop I use it's next to alt on the right, so I press it with my thumb.  It's true though that if you have one of those laptops with huge windows and mark buttons then it's difficult."
emacs,2yp9v7,wadcann,1 point,Thu Mar 12 19:10:13 2015 UTC,"But moving you pinky 1 cm away is easier than bend you wrist, i.e. C-x C-f or longer sequence."
emacs,2yp9v7,RobThorpe,3,Thu Mar 12 03:32:04 2015 UTC,"I suppose that's part of the appeal of emacs - you change how you use it based on your own needs. I actually type in dvorak with a few keybindings changed, so for me,     C-x C-f is equivalent to     C-j C-k on qwerty.   That key combo doesn't seem very comfortable to press using just one hand, though. Would you press     C-x with your index or middle finger?"
emacs,2yp9v7,politza,1 point,Thu Mar 12 03:45:22 2015 UTC,"I suppose that's part of the appeal of emacs - you change how you use it based on your own needs.   Yes, Emacs isn't about edit key bindings. It's more than just an text editor.   That key combo doesn't seem very comfortable to press using just one hand, though. Would you press C-x with your index or middle finger?   I press it with my pinky holding Control and my ring finger pressing x."
emacs,2yp9v7,to3m,1 point,Thu Mar 12 05:01:16 2015 UTC,"C-x C-f   To press that combination I lean on right ctrl with ""the base of my pinky"" as nivekuil put it and press the other keys with my left hand. I don't really use left ctrl."
emacs,2yp9v7,abo-abo,1 point,Thu Mar 12 19:13:25 2015 UTC,A 3-key combo is crazy for such a frequent operation as file opening. The more frequent an operation is the less keys should be needed to activate it.
emacs,2yp9v7,alpheus,1 point,Fri Mar 13 08:15:45 2015 UTC,"Really? You must open a lot more files than me. It might help you to rebind it.  If your working on projects it can help to work in a different way.  For example, if the project is small you can sometime load all the files with something like C-x C-f /someproj/*.pl .You can open the directory in dired then run through the files you want with C-o. You could use filesets or projectile too. Also, suppose you've built a tags file. Your looking at a piece of code that calls file foo.c you can select a function name from foo.c then press M-. to open that file and jump there."
emacs,2yp9v7,abo-abo,1 point,Fri Mar 13 13:09:35 2015 UTC,"Yes, buffer switching would be a better example. I haven't really been opening files for many years. I switch to files as buffers and they are opened if they are not yet open.  So, for buffer switching, the default C-x C-b is crazy and the rest of my message above applies. The more frequent an operation is the less keys should be needed to activate it."
emacs,2yp9v7,alpheus,1 point,Fri Mar 13 14:24:44 2015 UTC,"C-x C-b is the buffer list. I don't think that one's too crazy, I don't open the buffer list that often.  I agree with you about the others though. Personally, I map C-1 to other-window, C-2 to delete-other-windows, C-3 to delete-window, C-4 to previous-buffer and C-5 to next-buffer. For the numerical prefix keys I use M-1, M-2, etc."
emacs,2yp9v7,pallagun,1 point,Sat Mar 14 00:57:22 2015 UTC,"C-x C-b is the buffer list.    I wanted to write C-x b, of course. 3 keys for buffer switching is too many. It has to be at most 2 keys, but preferable a single key, because of its frequency. I use a single key for this."
emacs,2yp9v7,tmalsburg2,1 point,Sat Mar 14 06:18:31 2015 UTC,That's the kind of thing I agree with you about. That's why I use next-buffer and previous-buffer and redefine them to C-4 & C-5.
emacs,2yp9v7,kcin,3,Sun Mar 15 01:33:56 2015 UTC,Changing caps-lock to ctrl can't be done as the default in Emacs. Many terminals don't allow chording with caps-lock and many people use Emacs on terminals. That's why you have to change it in system settings (e.g. X windows settings).
emacs,2yp9v7,excitedaboutemacs,4,Thu Mar 12 19:05:28 2015 UTC,"Well, I think most of emacs keybinds (outside of a few, early arbitrary choices) are very defensible.  And the CapsLock/Control issue is a hardware thing, not a software thing...and I personally think the current standard is stupid in contexts well outside of emacs:  CapsLock is a very marginal use-case, in a prime keyboard location!  The only key more stupid to put there would be the power button.    But that's drifting too far away from my intended topic, here."
emacs,2yp9v7,RobThorpe,5,Wed Mar 11 22:24:36 2015 UTC,"I personally think the current standard is stupid in contexts well outside of emacs: CapsLock is a very marginal use-case, in a prime keyboard location!   Yeah, I'm with you.  Emacs happens to hammer the Control key unusually hard (most software doesn't use Control for basic navigation), but even outside of emacs, it really is preferable to have Control where Caps Lock is.  Caps Lock was valuable on typewriters years ago when people more-frequently used caps for emphasis, but it's rare for a typical English prose writer to use any extended for of capital usage, outside of maybe the occasional acronym (NASA, EUCOMM, etc).  Today, I'm going to italicize or maybe use a markup with asterisks, a la Markdown."
emacs,2yp9v7,excitedaboutemacs,2,Thu Mar 12 05:43:11 2015 UTC,Caps-lock is particularly useless in Emacs where you can do M-b M-c to capitalize any word you've already typed.
emacs,2yp9v7,RobThorpe,4,Thu Mar 12 19:06:50 2015 UTC,"Type C-x 4 C-o RET to restore the other window.     I think here is where most people, used to poking around in a structured menu, turn it off."
emacs,2yp9v7,sindikat,9,Thu Mar 12 01:08:45 2015 UTC,"Erk Naggum on this subject (and more):   Emacs actually comes with a builting Emacs Aptitude Test.  Do you remap your keyboard or the Emacs keybindings before the chords and sequences it comes with by default have wreaked havoc with your hands?  If you do not do anything to make Emacs more convenient for yourself, you may not have the prerequisite aptitude to use it productive.  I have a ""standard"" PC keyboard (except with tons of function keys) and have moved the digits off the normal keypad and onto the numeric keypad and moved all the shifted symbols down to unshifted, and then physically moved the column that used to read 6YHN and all columns right of it one column right.  The vacated holes in they keyboard are filled with whatever left-over keys you have, and then you tell your keyboard driver og X or whatever that you have placed the parens {} [] () and <> (unshifted and shifted) in what used to be the 6YHN colum.  This move some incredibly frequently used keys to between your index fingers instead of terrorizing your right little finger.  Also, return and backspace are now one column closer and also strain the little finger much less.  You also get a little more space between your hands, which some of those ergonomic stunts seem to argue is a good thing.  Also, with Unicode, typing becomes much more fun than remembering those TeX monstrosities, but the downside is that you need a lot more keys.  So AltGr is also one column closer to your right thumb and painless to use even with other keys on the right hand.  Then the left thumb can be used for space, too, or the Alt key that you can use to teach Emacs to use much shorter commands.  Also, remap the useless CAPS key to something useful, like window manager shortcuts.  The really good thing about this keyboard layout is that your computer is /secure/ even if someone should break in and get console access.  I have a system-wide Xmodmap file because the keyboard driver stuff under Linux is so goddamned ""i18nized"" it has become impossible to customize to get predictable results, plus even Debian nukes those files on upgrades. Let me know if you would like to see it.   (https://groups.google.com/forum/#!topic/comp.lang.lisp/9gytzg76CT8[76-100])  I remapped a bunch of emacs keys from day 1; the ones that have stuck are: C-M-S-o (aka C-x C-f), M-S-o (aka C-x o), M-S-b (aka C-x b), and C-M-S-s (aka C-x C-s). I had a lot more originally, but over time I became used enough to the standard emacs shortcuts and discarded my custom ones. I do subscribe to Naggum's theory that you shouldn't be afraid to change emacs if you don't like the defaults, but there is a certain amount of value in being able to use a stock emacs configuration.  (Of course, I have other keyboard shortcuts that are probably unique to me - but the above are the ones that replace the keyboard shortcuts that come with the default settings.)  The only thing I do regret getting used to from my early days is ""fixing"" backspace when you're in an isearch... I suspect if I'd stuck with the default, whereby backspace deletes what's in the buffer rather than what's in your search text, I'd use isearch for general navigation a lot more than I do."
emacs,2yp9v7,tmalsburg2,3,Thu Mar 12 00:12:19 2015 UTC,I have a similar approach with Xmodmap: http://oremacs.com/2015/02/14/semi-xmodmap/. I didn't get to physically modifying the keyboard though:)
emacs,2yp9v7,incongruousamoeba,1 point,Thu Mar 12 09:11:11 2015 UTC,Your xmodmap post is great!
emacs,2yp9v7,autowikibot,1 point,Thu Mar 12 14:47:11 2015 UTC,"Thanks, I tried hard to make it look less geeky and more justified. I'm pretty sure I failed at that:)"
emacs,2yp9v7,wadcann,1 point,Thu Mar 12 15:47:02 2015 UTC,"I'm no Erik Naggum but I do like having lots of modifiers.  Xmodmap sets up Hyper, Super, Meta, Alt, Shift, and Control on different keys for me.  Then I bind C-x o to Super o, so it's just one keystroke.  I have shrink-window bound to H-down and  s-; runs comment region.  I just noticed uncomment-region was unbound and bound that to H-;  Back to the original poster's point:  I always use plain vanilla Emacs for a couple of weeks when I get a new computer. Just to see if I really need my customizations.  I always learn something new."
emacs,2yp9v7,fivehours,8,Thu Mar 12 14:44:09 2015 UTC,I've only been an emacs user for a few years now and I now strongly prefer how emacs handles the keyboard (after the ctrl/capslock swap).  I don't think I can objectively prove it's better but I certaintly think it is.  I vote emacs should stay different. CUA is great but I feel like it gets to be limiting at a certain point.
emacs,2yp9v7,kcin,8,Wed Mar 11 19:21:45 2015 UTC,"The point of Emacs is that it is malleable.  Emacs is whatever you want it to be.  If someone wants Emacs to behave like Vim, fine, install Evil and done.  That's the power and true nature of Emacs."
emacs,2yp9v7,tmalsburg2,5,Thu Mar 12 01:31:40 2015 UTC,Exactly. The point of Emacs is you don't adapt to the editor. Instead the editor adapts to you.  That's why the defaults should be viewed as simply those: defaults. Not the one true way which everyone has to follow.
emacs,2yp9v7,tmalsburg2,4,Thu Mar 12 08:53:22 2015 UTC,"I think that its a bit different then what you say. Sure I can create anything I want. But there are certain more practical creations. For instance, I found some useful functions early on and mapped them over some keys. But newer packages use those same keys. Now I have to either shuffle those around and relearn muscle memory or lose some of the newer functionality.   If emacs had some nicer defaults I think it would help a lot. I dont like remapping the basics. Like why does undo and redo have to be so many keypresses?"
emacs,2yp9v7,idiot_with_a_gun,1 point,Thu Mar 12 14:38:09 2015 UTC,??? undo is C-/.
emacs,2yp9v7,kcin,2,Thu Mar 12 22:17:29 2015 UTC,"Sorry redo.   Better examples might be file open, and save both take a couple key presse. These are very common functions and it would be smoother if it was simpler."
emacs,2yp9v7,RobThorpe,1 point,Fri Mar 13 13:47:42 2015 UTC,"Yes, redo is too difficult.  Regarding file open, see my comment here: http://www.reddit.com/r/emacs/comments/2yp9v7/should_emacs_be_different/cpdlr09  For save, notice that you can save from the buffer list."
emacs,2yp9v7,kcin,2,Sat Mar 14 00:59:39 2015 UTC,"I completely endorse this attitude, I think you are absolutely right. The problem I see with Emacs's current architecture, however, is that it's not always possible/practical/efficient to adapt Emacs the way you want it to adapt. Some defaults, that are supposed to be just easily customizable defaults, are so deeply interwined with Emacs, that at some point I just want to give up and don't customize anything in Emacs anymore.  The first problem that quickly comes to mind is the lack of abstraction layer for keybindings. Custom modes assign keybindings straight away. Like C-c C-f to mean ""go forward next semantic unit"" or whatever. If you customize your usual C-f command to some other keybinding, it would be sensible that C-c C-f would automatically change too, if there was smart underlying system. But it doesn't work this way, and you have to accomodate changes for every mode that comes around. It's especially painful, when there is a discrepancy between ordinary commands and minibuffer commands.  In short: Emacs keybinding metaphors are implicit in the Elisp writing conventions, instead of being an explicit abstraction, that could be used by programmers to make keybinding customization truly flexible."
emacs,2yp9v7,sindikat,2,Fri Mar 13 17:16:43 2015 UTC,"Good point.  In the case of Evil, that's not a big problem because Evil leaves the default keybindings largely intact.  Its own key-system is so different from Emacs' that there is little overlap with the defaults and that's why they can peacefully coexist.  But that is just a special case and lucky coincidence."
emacs,2yp9v7,RobThorpe,5,Fri Mar 13 19:16:27 2015 UTC,"I would be interested to see evidence that any interface, default emacs, vim, or CUA etc., is the result of hundreds of hours of user studies, building on UX/design theories etc instead of begin organically grown out of whatever the original programmer thought up.  I think the original question is moot, really. The emacs defaults aren't going to change; it's inconceivable -- and I don't even like them that much. The OP implied a further point, that packages like cua-mode aren't good for new users because the user won't learn the default bindings. I can see the potential for both harm and benefit, no evidence for which is larger, and little reason to think cua-mode will ever go away, either.  In sum, people arguing that Emacs should have different keybindings should probably direct their energy in more productive directions, but I would prefer that the reason given NOT be ""emacs keybindings are highly optimized.""    By the way, I'm not sure CUA is really a text-based interface anyway; it's more oriented toward GUI applications and doesn't have much to say about editing beyond cut,copy,paste (by the way I was surprised to learn that copy is C-Ins rather than C-c)."
emacs,2yp9v7,sindikat,1 point,Thu Mar 12 04:29:06 2015 UTC,"IBM Common User Access:       Common User Access (CUA) is a standard for user interfaces to operating systems and computer programs. It was developed by IBM and first published in 1987 as part of their Systems Application Architecture. Used originally in the MVS/ESA, VM/CMS, OS/400, OS/2 and Microsoft Windows operating systems, parts of the CUA standard are now implemented in programs for other operating systems, including variants of Unix. It is also used by Java AWT and Swing.     Interesting: Cut, copy, and paste | Motif (software) | Tab key | Clipboard (computing)   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
emacs,2yp9v7,RobThorpe,4,Thu Mar 12 04:29:50 2015 UTC,"And I'm getting very weary of posts here that have the following form:  ""I really want to learn emacs...now, how can I make emacs behave exactly like an interface I'm already familiar with?""    Ask the mods to enable the subreddit wiki and link to a FAQ page in the sidebar Add a FAQ item for it   It's a reasonable thing to identify something that is uncomfortable and want to fix it.  In the case of evil and cua-mode, I don't think that it's a good idea, but many people obviously do (else, someone wouldn't have gone to all the work of making and maintaining them).  However, I (and I bet you) have plenty of customization.  There are some things that people absolutely hate about emacs out-of-the-box, and it's not unreasonable for someone to think that cua or evil fall into these.  Let me list a couple of things that seem like no-brainers to me from my init.el, where few would want anything but what I use:   Timestamped entries in the Messages buffer. A list of file extensions that autoload packages with precedence if those packages are present on a given system. Ibuffer. Adding a keybinding that most terminals can send for replace-regex C-x o is awkward to cycle through buffers in reverse.  I often use three windows, but not more, and M-- C-x o just isn't as nice as C-x O Dired not showing file sizes by default (well, maybe this makes dired a tiny bit more approachable, but it makes it much harder to read).   I think that emacs's non-destructive undo is a great idea.  I think that the interface is indefensibly-awful.  It is really common that people want to move forward and backward through the undo history, and emacs's approach makes that absolutely-awful.  I think that undo-tree is pretty much a no-brainer -- it has emacs's non-destructive undo, but with a much-easier-to-navigate-common-cases approach.  So if I've got all those cases where The Right Thing To Do isn't the default, then why wouldn't someone think ""oh, yeah, CUA mode should go in there too""?   once you're familiar with emacs   I've been using emacs for getting-up-towards twenty years myself, and I'm still uncomfortable saying that I'm really familiar with the thing.  The packages list is growing way faster than I can familiarize myself with stuff.  Hard to say when someone crosses that line."
emacs,2yp9v7,ayakushev,1 point,Thu Mar 12 06:02:19 2015 UTC,"While I do appreciate your comments here, and think they add something to this discussion (upvoted)...  I'm not against customization to taste...provided it is informed.  In the text you quoted, it's not the customization that bothers me, it's the lack of learning.  The refusal to explore an option before rejecting it.    It's basically the same feeling as trying to get a finicky toddler to try a new food.  It's 100% OK if they don't like it.  But it's damned annoying if they won't even try it.  It's not worth your effort to force the issue (which is only going to go badly for you), and you still want to be sure they're fed...so, you give them a more familiar acceptable food...and try not to be too annoyed.  But it's still pretty damned annoying!  There's a huge difference between a choice based on experience and preference, versus a choice based solely on fear of the unknown and the comfort of familiarity.  And that's the sore spot for me."
emacs,2yp9v7,tuhdo,1 point,Thu Mar 12 16:40:05 2015 UTC,"Since Emacs is a customizable editor, I think it's quite reasonable for someone new to it to ask how do I make it like Foo, rather than learn an entirely new interface.   The issue may be more that there's not a good Windows or Notepad mode or the like for new users to find and install off the bat, so they wind up getting stuck and asking for help. (I assume Mac is covered with Aquamacs)."
emacs,2yp9v7,ayakushev,13,Sat Mar 14 00:21:17 2015 UTC,"But I'm not convinced this is the best policy. Especially since the result is usually a terrible hybrid of not-quite-emacs, not-quite newbie-familiar interface. The worst of both worlds!   There is no single emacs experience. Emacs is what you make of it. I'm a veteran Emacs user (>15 years) and I find vanilla emacs unbearable. This also goes for the keybindings, e.g. C-x b is horrible for such a frequent operation as buffer switching.   The default emacs settings are not for everyone and sometimes they are not better, only different.  E.g. CUA binding as defaults were just as good or even better because they would help new users to transition to emacs.   So Emacs should be different where the difference provides some value, but when the difference is arbitrary then it should follow commonly accepted UI standards instead, so new users find less unnecessary obstructions."
emacs,2yp9v7,redguardtoo,4,Wed Mar 11 18:38:42 2015 UTC,"You seem to have ignored this part of my original post, here...   And for clarity, this is for new users only...once you're familiar with emacs, if you want to make well-considered changes to anything, to improve your experience, I'm all for that, and all for the community helping you out (if you need it).   For additional clarity, my basic thesis is that these two operations cannot be re-ordered without loss:   Learn the defaults. Customize to your personal satisfaction.   If you skip the first, you will remain ignorant of certain possibilities, and possibly override the settings expected by various tutorials, or more experienced users, leading to other difficulties, starting out.  And for a beginner, it's essentially a form of willful ignorance.  And I'm unlikely to ever have a positive view of that.  Now, whether the defaults are well-chosen or not is more debatable.  That is a different issue, and one I'm not nearly so settled in my opinion about.  However...  Personal arguments, e.g. that you personally ""find vanilla emacs unbearable"" (or that ""C-x b is horrible for...buffer switching""), are not particularly compelling.  I don't doubt your experience, but I do doubt how universal it is (especially when it differs from my own).  You (or I) may be a deviant freak.  Or our opposing experiences may both be within one standard deviation of a statistical norm (on opposite sides).  Without data that neither of us have, there's just no way to know.  But using yourself (or myself) as a standard, representative user is probably not the best way to reach valid conclusions.  I also do not find that (paraphrasing) ""CUA is better, because it is more widespread"" particularly compelling.  (Perhaps you should make that argument in Mandarin?  After all, it's a more popular written language!)  Though this is a more interesting argument, as I do place some value on convention.  However...  I don't consider emacs/readline to be arbitrary or unconventional (or at least, not any more so than CUA is).  Emacs/readline is a commonly accepted UI standard!  Even if it is less common than CUA, comparatively.  So, I personally need a lot more convincing that CUA would be a better default choice.  It may well be.  But I'd like to see some more convincing arguments that it is definitively better, rather than simply more popular outside of emacs."
emacs,2yp9v7,Ironballs,5,Wed Mar 11 23:43:29 2015 UTC,"Learn the defaults. Customize to your personal satisfaction.    My Emacs history is this:   Customize to my personal satisfaction.   Done. I don't care about the defaults and used Evil mode from day one (actually, at first, the predecessor Vimpulse).  Well, the truth is that I did try the defaults for one week and ended up suffering from RSI.  So, yeah, the defaults were quite objectively unbearable in my case.  At that point the options were: go back to Vim – which I did for some weeks – or use Evil and ignore how things are done by default.  Who are you to tell users that they are wrong to do that?"
emacs,2yp9v7,RobThorpe,4,Thu Mar 12 01:37:03 2015 UTC,"You've misused ""objectively"" here.  And I've been using (close to) the defaults for over 20 years, without issue...but my subjective anecdotal experience doesn't change yours.  Anyway, I have no objection to your process here.   You had real significant necessary reasons for your early customization.  You made them to avoid injury, not to avoid learning. An informed, rather than an ignorant choice.  It's the second case, not the first case (i.e. yours) that I object to.  Of course, my opinion means little.  But I do consider willful ignorance as a moral wrong, and am not afraid to call that out.  (And for clarity, that's not you, or your behavior here...but rather a case I suspect is much more common than your personal experience.)  Regardless, I hope you've recovered from your RSI issues, and that they do not return."
emacs,2yp9v7,syl20bnr,3,Thu Mar 12 02:41:16 2015 UTC,"You've misused ""objectively"" here   Only if you ignore that I wrote ""in my case"".  RSI was diagnosed by my doctor, so it was quite objective.   Regardless, I hope you've recovered from your RSI issues, and that they do not return.   Thank you.  I never had problems with RSI again after switching to Evil."
emacs,2yp9v7,FlyingBishop,1 point,Thu Mar 12 17:08:09 2015 UTC,"I find that I cannot use my friend's Emacs setup, and vice versa."
emacs,2yp9v7,syl20bnr,1 point,Thu Mar 12 14:57:05 2015 UTC,That's no problem for me. I use my own emacs.
emacs,2yp9v7,FlyingBishop,1 point,Thu Mar 12 17:13:27 2015 UTC,"What if you have to VNC, telnet or ssh to another machine you haven't used before? For example, all the Linux machines at the place I work have Emacs 21.1 on them. What would you do there? Copy over your init file? Use -gah- vi?  Being familiar with emacs -Q is useful."
emacs,2yp9v7,abo-abo,1 point,Thu Mar 12 23:25:39 2015 UTC,"Different circumstances require different solutions. I work on my own laptop and I rarely need to edit something via ssh.  If I do then I can do basic operations in vi or vanilla emacs. These are very short editing sessions, so I never have to use barebones emacs for editing more than a line or two in a config file."
emacs,2yp9v7,RobThorpe,1 point,Fri Mar 13 05:43:36 2015 UTC,"Being familiar with emacs -Q is useful.   Sure, but if I never use VNC, telnet or ssh, why should I learn default keybindings? Why should newbies be forced to learn the defaults?"
emacs,2yp9v7,abo-abo,1 point,Fri Mar 13 17:26:20 2015 UTC,"Why should newbies be forced to learn the defaults?   Although you may not use VNC, telnet or ssh now they're very common utilities and if you work in programming (or indeed engineering) you'll certainly come across them. I'm an electronic engineer, I'm not even a programmer, and I use VNC quite often.  Also, see my other message for the reasons why moving away from the defaults is more difficult than people think.  http://www.reddit.com/r/emacs/comments/2yp9v7/should_emacs_be_different/cpd14r2"
emacs,2yp9v7,RobThorpe,1 point,Sat Mar 14 00:54:44 2015 UTC,"You're definitely right that these are not obscure things and maybe a sizeable chunk of Emacs users have to use them. But don't you think that when the user actually comes across them, then they should learn the emacs -Q defaults? Yeah, an Emacs user at some point may have to know C-a C-e etc, but they at some point would have to know ls, cd, man, find, grep, and Emacs doesn't force the user to learn GNU/Linux commands, or any potentially useful things.  Although I agree with you other comment completely. Emacs would probably have to stick to defaults for strictly practical, down-to-earth reasons. Sometimes we can't have good things, because no matter how big are the benefits, costs outweigh them."
emacs,2yp9v7,abo-abo,1 point,Sat Mar 14 01:20:20 2015 UTC,"I see what you mean. A user could rebind those keys, then later on learn about the originals when they come to problems. That could work, but it could still be confusing. I find myself coming to a temporary stop because of minor irregularities quite often, but I'm not everyone.  I'd like to backtrack on something I wrote too. Emacs has TRAMP, which makes editing over ssh & telnet easy. If you're a programmer and you're doing something remotely then you can use that in cooperation with a remote shell (through shell-mode for example). In that case remote operation is painless and you don't have to learn emacs -Q. If you're doing something a bit more like admin things get tricky though. You have to constantly remember that you're working on a remote file (e.g. when using things like M-!)."
emacs,2yp9v7,RobThorpe,3,Sun Mar 15 01:44:53 2015 UTC,"Why so much ado over something that is easily configurable? Why create inconveniences for old users (whom are plenty of) over those few arrogant newcomers who can't bother to install cua-mode?   Emacs is a professional tool. If one is afraid of it because of unfamiliarity, then Emacs is not for them."
emacs,2yp9v7,aboukirev,2,Wed Mar 11 21:47:43 2015 UTC,"The problem with CUA is that once you enable it, you start feeling key bindings are wasted and redundant with the default ones. Then, you start remapping everything and end up something like Ergoemacs key bindings anyway."
emacs,2yp9v7,abo-abo,1 point,Thu Mar 12 03:20:34 2015 UTC,"I wouldn't necessarily chalk up the newcomers' reasons to arrogance.  (And I think cua-mode is a mistake, at least initially, for new users.)  But, there's a lot to be said for a healthy user-base..and a new user's experience is certainly relevant to that.  Though I am in hearty agreement that the needs of the current user base should vastly outweigh the needs of potential new users.  Also that emacs is a professional tool, which requires some training to use well.  But I'm less convinced that all of the obstacles in that training are necessary difficulties.  Some are.  But some, I think, are not.  And an improved on-boarding, learning experience just might lead to some amazing future contributions from folks who may have otherwise given up on emacs.   Your initial determination to learn something is probably not a perfect predictor of your future potential in that area.  So I think these questions are at least worth looking at."
emacs,2yp9v7,aboukirev,3,Wed Mar 11 22:48:31 2015 UTC,"There are many good things for novices, like emacs-starter-kit and better-defaults. I still use some parts of ESK because I don't want to know what it uses for the awesome commands and paths completion, ido or smex or whatever.  I also remapped navigation to Ctrl-pl;' the first day of using Emacs, because the default navigation didn't make any sense to me. I'm still using that layout.  My point is, Emacs is already accessible enough for anyone with an attention span more than 5 minutes. Emacs is not a social media startup or a Web3.0 library, it doesn't desperately need new users and thus doesn't have to provide immediately gratifying experience."
emacs,2yp9v7,tuhdo,3,Wed Mar 11 23:03:43 2015 UTC,"The point is not ""difference"", the point is ""choice"" and ""freedom"".  ""Software Freedom"" is why Richard Stallman designed Emacs at the beginning. I'm sure he won't complain that EVIL converts Emacs guy into vi guys as long as it's free as in freedom.  I learned Emacs by jumping into EVIL directly. Studying Emacs in EVIL way actually help me master Emacs (including its original key bindings) more quickly."
emacs,2yp9v7,RobThorpe,5,Thu Mar 12 07:21:45 2015 UTC,"As someone who, compared to you, rather recently (about a year ago), switched to Emacs from Vim and a myriad of other editors, and had to learn the whole thing from scratch after dropping Evil, my answer is a categorical no.  Though it was painful to grok at first, but there is hidden beauty in all the readline bindings. I find readline to be much faster than modality.  My biggest problem was to learn how to do things differently. At the start, I desperately tried to emulate vi commands, installing packages such as dot-mode or making complex commands replicating visual line mode. But, after a while, I decided to try harder and learnt how to use the kill ring and registers, and I'm not looking back.  I do think some features should be enabled by default, idocomes to mind. MELPA Stable (or Marmalade, but not the default MELPA) should be in the default package repositories.   Things like Projectile, Magit... all those should be there by default as well."
emacs,2yp9v7,abo-abo,1 point,Wed Mar 11 18:23:14 2015 UTC,"Lots of us would like all those things to come by default. But, lots of them haven't been contributed to the FSF, that's why they're not there."
emacs,2yp9v7,RobThorpe,6,Thu Mar 12 22:26:26 2015 UTC,"Lots of people whose jobs consist on typing a lot on a keyboard finds QWERTY bad because it completely ignores keys frequency of the english language.  I'm convinced that Emacs default interface is bad because it ignores the physical device (at least the modern and common one), I think relying too much on the modifier keys is a mistake made at the beginning and it is an even biggest mistake now that keyboards have less and less modifiers. People are fine with it and have found workarounds to minimize the impacts but overall the emacs way is flawed.  For this reason I developped my own interface, better suited for our devices."
emacs,2yp9v7,abo-abo,3,Wed Mar 11 21:11:49 2015 UTC,"I think that the emphasis on minimizing hand movement is misguided. Usually typing speed is not the limiting factor, what's more important is avoiding RSI, and moving your hands around more is actually helpful to avoid RSI."
emacs,2yp9v7,RobThorpe,1 point,Thu Mar 12 04:07:23 2015 UTC,"I would like to see a study on this, your point is very strong but unhealthy modifier-key combination as well.  Maybe it would reduce to only a matter of good neutral position of the hands. Favor fingers on the home row is a good hint for good neutral position though. Favor pressing unhealthy combination of keys is a good hint to adjust your neutral position in a unhealthy way."
emacs,2yp9v7,abo-abo,2,Thu Mar 12 04:47:54 2015 UTC,I'd agree that a softer statement like yours is probably better: I find it easier to maintain my hands with modifier keys because they're a reminder that I'm doing something unnatural and need to move my hands around.
emacs,2yp9v7,xah,2,Thu Mar 12 15:48:18 2015 UTC,"Well...not to get too much into the QWERTY vs Dvorak argument...but arguments for the increased efficiency/ergonomics of the latter are pretty thin on closer examination.  Nothing about keyboard use is natural.  (None existed prior to the 1860s...so unless you're committed to the idea of an Intelligent Designer Deity who planned for their invention ahead of time, I think you have to agree!)  It's all trained/learned behavior.  Though I would agree there probably are better and worse choices from an ergonomic standpoint, I really have no way of determining what those are at present.  If you have data from well-designed, and replicated scientific studies, I'd love to see it!  But (other than my own personal choices and preferences) I'm withholding absolute blanket judgments, myself.  I'm not convinced about much of anything, in a general sense."
emacs,2yp9v7,kabbotta,3,Wed Mar 11 22:33:49 2015 UTC,"It's a tough question. I have considerably less years using Emacs (4), and I can't even remember now if the bindings were a big deal. Knowing what you can do with Elisp, the key bindings seem trivial by comparison. It's like discussing the doormat in front of the cake shop.  Or maybe the bad bindings are there to get the users to change them, so that they learn Elisp by proxy. I think Emacs should improve the bindings if each improvement is clearly beneficial.  CUA isn't clearly beneficial for sure. But adapting C-x b and C-x o to something better, and getting rid of C-z should be done in my opinion. Also maybe swap C-h and C-p."
emacs,2yp9v7,tuhdo,1 point,Wed Mar 11 19:33:10 2015 UTC,"Well, ""good"" and ""bad"" bindings are very personal choices.  My main objection to the present situation is that I think many new users are deciding a priori that a certain set is bad, simply because it's unfamiliar.  ""I know what I like, and I like what I know"" isn't an attitude very conducive to exploration and learning.  Personal decisions are better made from personal knowledge, rather than personal ignorance.  Whether the current defaults are optimal choices is another question, though also fair game for discussion here.  But, though interested, I'm far less concerned about that issue, compared to the previous.  I'm all for customization and tailoring emacs to your needs...but I want those needs to be real, actual needs, rather than simply unconsidered prejudices."
emacs,2yp9v7,kabbotta,1 point,Wed Mar 11 22:17:45 2015 UTC,"C-z is there because it's the key that minimizes (""backgrounds"") a program in a *nix terminal. In the terminal Emacs can't get rid of it, C-z will always background Emacs. So, it makes no sense to use a different key in GUI mode. Even GUI mode users (I'm one of those) sometimes use terminal Emacs when sshing or telneting to other machines."
emacs,2yp9v7,senatorpjt,1 point,Thu Mar 12 22:46:38 2015 UTC,I get why the command exists. But why in the world bind it to C-z? Let the terminal itself do it if it is so configured.
emacs,2yp9v7,adamc,1 point,Thu Mar 12 23:05:36 2015 UTC,"Well, most terminals have it bound to C-z anyway. So, if Emacs introduced another binding instead of C-z it would be a duplicate for all terminal users.  To serve terminal users C-z couldn't be used for anything else. If Emacs didn't bind C-z at all then it would background in terminals and do nothing in GUI emacs. That would be confusing, so there's no good reason not to bind it."
emacs,2yp9v7,simonced,1 point,Thu Mar 12 23:21:12 2015 UTC,"Why not just bind C-z to something useful, like I suppose C-M-l is bound, and then if the system decides to use that shortcut, so be it. I have no idea how C-M-l is bound, since it locks the screen on Ubuntu. I don't think Emacs binds C-M-l to lock the screen."
emacs,2yp9v7,incongruousamoeba,1 point,Fri Mar 13 07:33:42 2015 UTC,"Why not just bind C-z to something useful   Because people using terminals couldn't use it. I agree that Window managers bind keys in annoying ways, but that's not a permanent problem, it can be reconfigured. It doesn't work the same way for every window manager. For example, I'm using Xubuntu and C-M-l works. Also, keys like that can always be accessed by the other method i.e. ESC C-l or C-[ C-l, not so with ctrl keybindings."
emacs,2yp9v7,simonced,4,Fri Mar 13 12:49:09 2015 UTC,"In 80s when i used Emacs heavily it made sense to include into distribution everything to showcase Emacs capabilities.  These days, with Internet at your fingertips, it makes no sense anymore.  Make it a lean editor plus extensibility layer, not Emacs OS.  If I ever need directory editing, reading e-mail/news in it, or playing games, I can install packages.  Over 100 MB of prepackaged elisp scripts is an extreme bloat for an editor.  That is my only complaint."
emacs,2yp9v7,simonced,3,Wed Mar 11 21:33:25 2015 UTC,"100MB is bloat, are you joking? How much is a Visual Studio install these days, 10-20 GB? Same for MATLAB.  Showcasing is important, as is maintenance and security. There's even a case for convenience: I always install texlive-full because I can't be bothered to look around for a missing package when I want to compile a document.  Making it ""lean"" wouldn't make it any faster. You're basically saying that you'd prefer to get a NullPointerException when invoking a feature and then having to manually install it before it works, rather than automatically loading the feature with no overhead."
emacs,2yp9v7,tuhdo,1 point,Thu Mar 12 09:38:57 2015 UTC,"Visual Studio is IDE first and foremost.  Emacs is editor that can be turned into IDE but does not have to.  SublimeText with plugins takes 47 MB total (that's including full Python 3).   Yep, 100 MB of scripts is bloat.  I am not talking about simply cutting things out ""just cause.""  I'd like to carry a lean Emacs version on a USB stick for portability.  Some packages should be moved out to ""contrib"".   Perhaps, a lot of packages/extensions can be simplified now or retired.  There are nice 3rd party alternatives too.    I realize that some packages are an integral part of Emacs.  I have no problem with that.  I do plan experimenting with package removal on my Emacs setup to see what can be done.  Just thought an official move in that direction would be welcome too."
emacs,2yp9v7,simonced,1 point,Thu Mar 12 13:00:33 2015 UTC,"As /u/RobThorpe said, most of those MB are docstring text associated with variables and functions. I personally would have no problem with that."
emacs,2yp9v7,BasementTrix,1 point,Fri Mar 13 02:49:42 2015 UTC,"The funny thing about Emacs is that most of those MB are text. They're the docstrings associated with variables and functions. If those were compressed in the .elc files then it would be much shorter. I'm going to have a go at implementing that when I have the time.  Also, the .el files only take up lots of space if they're installed uncompressed. Most Linux distros have them compressed now which helps with that problem."
emacs,2yp9v7,Yidyokud,1 point,Thu Mar 12 22:51:49 2015 UTC,I install my .el files uncompressed on purpose. Convenience is much more important than a few measly megabytes.
emacs,2yp9v7,syl20bnr,1 point,Thu Mar 12 23:00:41 2015 UTC,De-compression is very fast these days. I can't tell the difference.
emacs,2yp9v7,syl20bnr,1 point,Thu Mar 12 23:21:50 2015 UTC,"Can't use rgrep or ag for compressed files, only zgrep.  It's a drag to switch commands."
emacs,2yp9v7,sprash,1 point,Fri Mar 13 07:35:04 2015 UTC,"I see. I never grep the info files to be honest. I mostly know what in which file, so I just use ""s"" in info. I can see how it could be useful though.  Really, info should have a facility to search all the files."
emacs,2yp9v7,tuhdo,2,Fri Mar 13 12:54:06 2015 UTC,"Not the info files, the source files. Grepping the whole source tree is extremely useful."
emacs,2yp9v7,sprash,2,Fri Mar 13 13:13:38 2015 UTC,"decades old issue. Note:   there are just as many, who used emacs for 2 decades, believe that emacs default keys are the worst. You can see some of it in ergoemacs comments, some of which i've collected. you don't hear these people much because, such opinion are not inline with the emacs community, are raely propagated. i think emacs should turn on cua mode by default. More urgent than ever. Tons of new editors are still cropping up every year, and seems more so in recent years. Atom, Facebook's Atom derivative, and even Microsoft Code. In the past 5 years, in emacs 23 and 24, some controversial UI issues have been fought hard, and decision made towards modernization. For example, visual line arrow key movement. transient-mark-mode. emacs default keys are scientifically Repetitive Strain Injury inducing. emacs default keys, are not just bad for newbies, but are scientifically, technically, inefficient for expert emacs users. The ~7 de facto standard keys for copy cut paste undo open new save... if emacs adopts them, then, the keys would be technically, scientifically, more efficient, for long time emacs users, not just for newbies. I personally believe, emacs should adopt the ~7 de facto standard keys. because: 1, it will increase emacs users by i estimate at least 2 fold within one year. 2, it will make emacs keys more efficient for long time emacs users.   i have over a hundred articles on keybinding issues. The point mentioned above, especially about keys, i have scientific data to backup. If anyone is interested, ask me. It's all on my site, by the way.  I love emacs. Emacs the system, i think is still unbeatable in many ways. But its keys, i think is scientifically one of the worst, and as well the number one problem for new users to swallow. There are lots packages that provides alternative, but vast majority of emacs users (i believe more than 60%), are not those we see in online blogs or forums, and don't even know how to use packages. It needs to be the default.  for what's worth, that's my opinion. Thanks."
emacs,2yp9v7,tuhdo,1 point,Fri Jun 26 06:56:32 2015 UTC,"Well, there are several things here...  First up, your (emphasis on your) desire to have your colleague switch to emacs probably bears some examination.  Emacs might indeed be a better solution for their (emphasis on their) needs, but that's really their own call to make.  Why is there any need for ""blame"" if they don't end up sharing your preferred solution?  Emacs users past their beginner stage should customize to their heart's content.  And multiple set-up options are an interesting possibility.  However, they would make tutorials and guidance significantly more complicated.  And there's still the core problem here:  how does a new user make an informed choice?"
emacs,2yp9v7,vermiculus,1 point,Thu Mar 12 00:38:13 2015 UTC,"Well, I think there might be some value in the violation of expectations...working with emacs is very different from any other software I've used...it might help signal to the new user that this  really is a different environment than what they are used to.  Though, yes, I do imagine that is frustrating.  But that's the lot drawn by the beginner in nearly everything, and there's really no avoiding that.  Further, the main troubles with mimicry are:  where, when, and how the illusion ends.  Depending on many factors, that can be more jarring than simple honesty to begin with.  Somewhat more laterally:  for your first few visits to a foreign country, is it really best to stay in locations and exclusively mingle with others that speak your native language?   It might be more comforting and convenient...but it's probably not the most optimal experience you could have, overall.  Anyway, I'm not necessarily rejecting the idea.  Just pointing out that there are some obstacles and issues with it that would need to be addressed."
emacs,2yqura,adam_ay,2,Thu Mar 12 01:21:38 2015 UTC,"Sounds like helm-swoop and swiper, I'm not sure, I never use any of them."
emacs,2yqura,CodyChan,1 point,Thu Mar 12 05:39:45 2015 UTC,Relevant to this.
emacs,2yrxcx,Erakko,3,Thu Mar 12 08:22:50 2015 UTC,"Generally speaking, buffers that are output from a command can be buried with 'q'. So pressing q in help, grep results, shell output and so on will get you back to the one buffer you were working on. For other buffers, I just maximize the one I'm working on and because C-x 1 is too slow, I've bound it to F5 which is the old Borland IDE keybinding for maximize current buffer.  Edit: windows are not buffers! Fixed."
emacs,2yrxcx,redrick_schuhart,0,Thu Mar 12 08:47:56 2015 UTC,Sorry about the windows buffers mixup.   But ok so for example working with org-agenda I should view the results with spacebar and when i have the correct one use 'q' to exit.  I will try it and see if it works with other similar situations.
emacs,2yrxcx,redrick_schuhart,1 point,Thu Mar 12 10:47:22 2015 UTC,"I wasn't getting at you - I wrote 'windows' where I should have written 'buffers' in my post :)   Yes, q will get you out of org-agenda."
emacs,2yrxcx,to3m,2,Thu Mar 12 11:54:15 2015 UTC,"Here's one for your .emacs (I saw this on one of the handmade hero podcasts I think): (setq split-window-preferred-function (lambda ()))  This seems to stop emacs splitting windows to show a buffer in most cases, and makes it reuse the current window for the new buffer. In many cases you can get back to where you were by pressing 'q'.  Another option you might like is my major-mode-dedication package: https://github.com/tom-seddon/major-mode-dedication - this lets you specify which mode(s) a given window is ""for"". Then when emacs is about to pop up a buffer of one of those modes, instead of doing something random the buffer will appear in the appropriate window for its mode. This doesn't work in all situations - there aren't enough hooks in emacs - but for buffers that just pop up it's pretty reliable."
emacs,2yrxcx,to3m,1 point,Thu Mar 12 12:43:25 2015 UTC,"""hook"" here isn't the technical term - sorry - what I mean is that there doesn't appear to be any way to insert your own function into the flow of things in such a way that you can do what my package wants to. You can override what display-buffer does (and that's what my package does), but not what switch-buffer does, or find-file (which uses switch-buffer). That's two situations where you might want your new buffer to pop up in a specific window, but because there's no way to influence emacs's behaviour in these cases, you're stuck with it popping up in the current window instead.  (I never really noticed this until I got some feedback! I guess I must just have got more used to emacs's habits than I thought. But really, it's an annoying restriction. Because if you want to have a window that's dedicated to your source files, you should be able to do that! - and then when you go to find a source file when you were in the window showing your *scratch* buffer, your source file should open in its preferred window rather than, as it does, the window you were last using.)"
emacs,2yrxcx,RobThorpe,2,Sun Mar 15 02:33:46 2015 UTC,"As others say, ""q"" will get you out of many of these situations. In some cases the modes offer a ""q"" and ""Q"" where ""q"" buries the buffer and ""Q"" kills it.  C-x 1 will get you out of the others, but it's slow. redrick_schuhart maps that to F5. Personally, I map it to C-1 (I use M-1 when I want a prefix argument of 1)."
emacs,2yrxcx,forked_tongue,1 point,Sun Mar 15 03:14:28 2015 UTC,"Via one of...   C-x 0 (that's zero, not capital O...in case your font is ambiguous)  Removes current buffer/split. C-x 1(that's one, not lowercase L....) Removes all splits, expands current buffer to fill window.   ...depending on what you want."
emacs,2yrxcx,myeffort,1 point,Thu Mar 12 16:35:08 2015 UTC,Set switch-to-visible-buffer to nil and prevent already visible on the frame from showing up.
emacs,2yqbbx,Enfors,13,Wed Mar 11 22:37:58 2015 UTC,Following the ELisp tag on Emacs.SE has taught me a lot over the last months.
emacs,2yqbbx,BruceConnor,3,Thu Mar 12 00:59:15 2015 UTC,"Took me a minute to figure out that you actually meant emacs.stackexchange.com, and not emacs.se (which also exists, and is relevant but not useful in this context). :-) But thanks, looks very interesting."
emacs,2yqbbx,BruceConnor,5,Thu Mar 12 07:38:33 2015 UTC,"Oh, I had no idea that existed. :-)  I'll have to be more careful with that."
emacs,2yqbbx,vermiculus,3,Thu Mar 12 11:46:51 2015 UTC,"Hehe, well, .se is the top level domain for Sweden, my country. :-)"
emacs,2yqbbx,diego_sevilla,2,Thu Mar 12 12:40:07 2015 UTC,oh goodness…likewise
emacs,2yqbbx,permafrosty,9,Thu Mar 12 12:31:38 2015 UTC,The #emacs channel on freenode is always active. It is friendly and of course dedicated to Emacs Lisp too.  Most questions about elisp in stackoverflow.com are answered promptly too.
emacs,2yqbbx,zck,7,Wed Mar 11 23:05:46 2015 UTC,"There's the Usenet group gnu.emacs.help, which I find a useful resource. It's also available as a mailing list help-gnu-emacs, if you prefer email over newsgroups."
emacs,2yqbbx,zck,5,Wed Mar 11 23:32:24 2015 UTC,"There's also the Emacs Stack Exchange, which is different from the emacs tag on Stack Overflow.  Some recent elisp questions: What does symbol-value do?, How to quote symbols in a documentation string?, and Understanding why two apparently different overlay strings are equal."
emacs,2yqpex,adam_ay,1 point,Thu Mar 12 00:37:57 2015 UTC,"Open it after booting up and exit it before shutting down your computer. So usually time is a problem.  For those who configure init.el a lot,although you can see the immediate effect of a lot of configuration just inside the current session, there are still many situations that you have to restart your Emacs or create a new session to check or ensure the effect. This is when time matters a lot."
emacs,2yqpex,CodyChan,1 point,Thu Mar 12 05:58:41 2015 UTC,Give use-package a try.
emacs,2yqpex,xuchunyang,1 point,Thu Mar 12 06:33:30 2015 UTC,"I took use-package into consideration months ago, and then tried to move my whole init.el into use-package. But my init.el contains more than 2000 lines of configuration, it is too complicated, so I gave up. Maybe I'll try it again in the future."
emacs,2yqpex,CodyChan,1 point,Thu Mar 12 10:56:37 2015 UTC,"dump-emacs, this may be what you need."
emacs,2yqpex,old_K,1 point,Thu Mar 12 10:11:48 2015 UTC,"I read the post when it it posted months ago. Upvoted it but didn't give it a try. Since you mentioned again, I tried that just now. But ./myemacs failed with ""X windows are not in use or not initialized"""
emacs,2yqpex,CodyChan,1 point,Thu Mar 12 11:19:01 2015 UTC,What is the version of your emacs? What's the result of try it with an empty init.el?
emacs,2yqpex,old_K,1 point,Thu Mar 12 11:57:56 2015 UTC,"Emacs v24.4, same result if I use ./myemacs -Q"
emacs,2yo8jw,tty-tourist,4,Wed Mar 11 12:57:07 2015 UTC,"So, roughly, I have to keep this job for the next to 2 years and 6 months for this to have been efficient use of my time .   Yes, but you've learned how to use ""let"" which is valuable for future lisp programming."
emacs,2yo8jw,RobThorpe,1 point,Wed Mar 11 16:28:12 2015 UTC,True. Not sure my employer agrees but learning lisp actually seems like an incredibly good use of my time.
emacs,2yo8jw,abo-abo,3,Wed Mar 11 18:33:17 2015 UTC,"Is your machine set to an English locale?  Mine, for instance, is Swedish:  (format-time-string ""%A"") ""onsdag""   More reliable is  (format-time-string ""%u"") ""3"""
emacs,2yo8jw,RobThorpe,2,Wed Mar 11 13:21:50 2015 UTC,"My locale is Danish so I get onsdag, too. I translated in the post so as not to confuse people ... Using %u is a great idea to limit confusion. Thx!"
emacs,2yo8jw,sledgespread,3,Wed Mar 11 13:39:42 2015 UTC,"Let's say that not having to change the url manually saves me an average og 24 secs a day. That's 2 mins pr. working week. Getting the function right took me approximately four hours. So, roughly, I have to keep this job for the next to 2 years and 6 months for this to have been efficient use of my time   There's a large flaw in this calculation: you assume that you would get a straight 4 hours of productive work if you weren't doing this. If you get into that territory, you might as well start optimizing your sleeping patterns.  A little annoyance fixed saves more than 20 seconds: less annoyances result in slower mental state depletion, so that you can work more without needing a break.  Take, for instance, a nice chair or keyboard. They don't contribute to the speed at all, but make you more satisfied, and thus more productive."
emacs,2yo8jw,sledgespread,1 point,Wed Mar 11 19:14:27 2015 UTC,"True, true. Each time I click the link to the function in my org file and the browser pops up, I will get a nice dose of gratification - especially on Mondays ..."
emacs,2yo8jw,wagonman,2,Wed Mar 11 19:51:18 2015 UTC,"Where is the variable ""today"" defined? The condition won't work without that.  Also, you should use ""let"" not ""setq"". ""Let"" is for defining local variables. ""Setq"" is for setting any variable, if one isn't defined then a global variable is created."
emacs,2yob23,redguardtoo,1 point,Wed Mar 11 13:22:49 2015 UTC,The Package-Requires header is missing.
emacs,2yob23,xuchunyang,1 point,Wed Mar 11 15:17:02 2015 UTC,thanks. fixed
emacs,2yoi7k,ianff,6,Wed Mar 11 14:29:23 2015 UTC,"TERM=xterm-256color emacs -nw, that's the command I use when remote ssh. I don't understand why you stick to 16 colors terminal.  and computers produced in recent 10 years should support 256 colors."
emacs,2yoi7k,redguardtoo,0,Wed Mar 11 15:18:51 2015 UTC,"Yeah, it looks like that's the best I can do.  I want it to use the exact palette I choose, but that looks not possible with Emacs."
emacs,2yoi7k,Ironballs,4,Thu Mar 12 16:32:01 2015 UTC,"Solarized should work well on 16 color terminals, but there is no reason to use a terminal to run Emacs.  The GUI is so much prettier.  Like everyone else said, use Emacs to run a terminal. If you need to edit remote files, use Tramp."
emacs,2yoi7k,bliow,3,Wed Mar 11 18:08:36 2015 UTC,"my terminals always stick to 16 colors   Why is this? Is that a restriction you impose for some reason, or an unintended consequence of your setup? Could it be fixed to make existing themes look good?"
emacs,2yoi7k,Boojum,2,Wed Mar 11 16:11:28 2015 UTC,"Look in share/emacs/24.4.90/etc/themes/ (or similar) under your Emacs distribution to find the themes that Emacs comes with.  The structure of them is fairly simple.  See C-h f defface for some info on what the structure of the face specifications should look like.  If you don't mind the extra work, you can also setup faces that progressively degrade nicely on displays with fewer colors.  For example, here's the default spec for org-level-1:  ((((class color) (min-colors 88) (background light)) (:foreground ""Blue1""))  (((class color) (min-colors 88) (background dark)) (:foreground ""LightSkyBlue""))  (((class color) (min-colors 16) (background light)) (:foreground ""Blue""))  (((class color) (min-colors 16) (background dark)) (:foreground ""LightSkyBlue""))  (((class color) (min-colors 8)) (:foreground ""blue"" :bold t))  (t (:bold t)))   My other bit of advice is that if you see something in a face that sticks out and you'd like to know the name of it so that you can add an entry for it, you can put the point over it and hit M-x describe-face."
emacs,2yoi7k,schlenderer,1 point,Wed Mar 11 18:17:15 2015 UTC,Thanks for that!  I will try to make something work from this.
emacs,2yoi7k,schlenderer,1 point,Thu Mar 12 16:32:38 2015 UTC,"Poking at those finally led me to a solution, thanks so much for the tip!"
emacs,2yoi7k,instant_sunshine,3,Fri Mar 13 19:52:28 2015 UTC,< I only want to use Emacs in a terminal window  Why?
emacs,2yng5c,AndersBakken,2,Wed Mar 11 05:53:23 2015 UTC,Are you sure it's only emacs? I have same issue with anything started from yeahconsole on i3.
emacs,2yng5c,myeffort,1 point,Wed Mar 11 08:27:41 2015 UTC,Now that you guys mention it I might have seen this in iTerm as well. It's driving me up the wall. You can't even Command-Tab your way out of it.
emacs,2yng5c,bakuretsu,3,Wed Mar 11 09:17:11 2015 UTC,"You can mostly fix it in iTerm by setting the option ""focus follows mouse"" in the preferences. I think this is a bug in OS X related to how focus follows command-tab switches between full-screen apps.  I still haven't figured out a workaround for Emacs and wind up either ignoring the cursor shape or clicking, which are both annoying."
emacs,2yng5c,bobbebobus,1 point,Wed Mar 11 10:43:29 2015 UTC,I can confirm that happens for me with Emacs 24.4 build from sources on 10.10.2 too. There is also an iterm2 bug https://code.google.com/p/iterm2/issues/detail?id=3258 that is marked as 'CannotFix'.  It is definitely a bug introduced on OS X 10.10
emacs,2yng5c,tampix77,2,Wed Mar 18 12:44:47 2015 UTC,"I had the exact same issue (had to click to have the focus) recently when i was forced to use Mac OS. But emacs wasn't the only thing that had the problem, iirc, i had it too on Firefox.  Never had any problem like that on other OS."
emacs,2yng5c,FourMoreDegrees,2,Wed Mar 11 08:49:55 2015 UTC,"I gave up on using emacsclient with OS X for reasons like this. OS X's native app setup behaves fairly naturally like the emacs server (so long as you leave the app open).   I'm not sure if this works for Emacs for Mac, but it certainly does for emacs-mac-port  #!/usr/bin/perl  # Emacs starter for Emacs mac port  # Thanks to Aquamacs Project and David Reitter  my $args = """"; my $tmpfiles = """";  for my $f (@ARGV) {   $args .= '""'.$f.'"" ';   $tmpfiles .= '""'.$f.'"" ' if (! -e $f); }  system(""touch $args"") if ($tmpfiles);  system(""open -a /Applications/Emacs.app $args"");  # delay deletion because AE drag&drop doesn't work with non-existing documents system(""(sleep 3; rm $tmpfiles) &"") if ($tmpfiles);  exit;"
emacs,2yng5c,scbagley,1 point,Thu Mar 12 01:04:08 2015 UTC,Have you tried the tips for emacsclient here?
emacs,2ykoy5,tuhdo,4,Tue Mar 10 16:52:23 2015 UTC,Very cool :)
emacs,2ykoy5,7sins,3,Tue Mar 10 22:55:42 2015 UTC,Excellent write up. I've been using it for a couple of months too and I think it's awesome !
emacs,2ykoy5,nedludd,2,Tue Mar 10 23:01:17 2015 UTC,This is so cool! :D
emacs,2ynpzc,dummitandfooterocks,7,Wed Mar 11 08:18:15 2015 UTC,I believe you want to add to your init (delete-selection-mode 1). I am not sure why you would want this functionality though since there are many uses of the mark this would make annoying. It's just one more keystroke to delete the text you highlighted :P
emacs,2ynpzc,Mitchical,2,Wed Mar 11 08:35:09 2015 UTC,"It is how it works in other applications, so it's nice to have the same behavior in emacs."
emacs,2ynpzc,kcin,2,Wed Mar 11 09:41:16 2015 UTC,Agreed.  It's not like learning to tap C-w is especially onerous when you want to delete the region.  And I use region operations far too often to be comfortable with deletion on input.  Frequently used:   apply-macro-to-region-lines comment-region/uncomment-region indent-region undo-in-region   ...and occasionally something more exotic.
emacs,2ynpzc,forked_tongue,1 point,Wed Mar 11 16:36:15 2015 UTC,But doing it that way pollutes the kill ring.  Also all of those work in delete selection mode.
emacs,2ynpzc,tending,1 point,Tue Mar 17 18:15:50 2015 UTC,Perhaps you could give an example?
emacs,2ynpzc,purcell,3,Wed Mar 11 08:39:31 2015 UTC,"Well I personally use mark to switch to a point quickly to edit and pop back, useful if you forget a paren or a quote or something silly like that. It's nice to not delete the whole region when you do this hahaha.  Edit for example process (sorry it's so bad):  (some unquoted list)|point-here|   C-space, C-a  |point-here|(some unquoted list)|mark-here| ;; Region highlighted between point and mark   insert quote, C-x C-x  '|mark-here|(now quoted list)|point-here| ;; Region still highlighted and you can continue typing like normal   Note that the quote is inserted before the mark. Also be careful if you switch mark to delete something... that will delete the region haha"
emacs,2ynpzc,Mitchical,2,Wed Mar 11 09:57:00 2015 UTC,"That is interesting, I never knew why emacs had a default of not delete selection mode. I still strongly prefer the delete selection mode. You can set a mark with C-Space C-Space and pop back with C-u C-Space. But far more often Im deleting a selection."
emacs,2ynpzc,excitedaboutemacs,1 point,Wed Mar 11 14:36:21 2015 UTC,Type M-x delete-selection-mode RET and try again.
emacs,2ynpzc,xuchunyang,1 point,Wed Mar 11 08:59:08 2015 UTC,worked perfect.  Thanks a lot!
emacs,2ynpzc,Mitchical,2,Wed Mar 11 17:46:19 2015 UTC,"No problem, I do however encourage you to try using the default emacs workflow with mark to see its advantages, I had your opinion at first until I tried it and now I can't go back :P"
emacs,2yjwfw,schlenderer,2,Tue Mar 10 12:44:53 2015 UTC,"I'm not a fan of making  comments have very low contrast with the background, something most colour themes seem to do. Otherwise, this looks great."
emacs,2yjwfw,roerd,1 point,Tue Mar 10 18:10:55 2015 UTC,Both mark-theme and oldlace are very nice. Kudos.
emacs,2yjwfw,agumonkey,1 point,Tue Mar 10 17:41:26 2015 UTC,"mark-theme and oldlace are by different authors. Thanks for your kind words about oldlace :).  I submitted the link, because I think this theme is very interesting. It's certainly not of the angry fruit salad variety, seeing as the faces for builtin, keyword, constant, type and variable are all the same color."
emacs,2yjwfw,agumonkey,1 point,Tue Mar 10 19:42:47 2015 UTC,"Yep, I liked the simplicity and medium contrast."
emacs,2yjwfw,ares623,1 point,Tue Mar 10 20:14:01 2015 UTC,What font is that?
emacs,2yjwfw,nat1192,1 point,Wed Mar 11 00:36:01 2015 UTC,Looks like Ubuntu mono
emacs,2yie8r,LeonardUnger,5,Tue Mar 10 01:34:34 2015 UTC,"That is great, thanks for the write-up.  One of the things i was wondering about was let vs. setq too but that kinda got lost as I was trying to make it work. Have to look at save-excursion next.  So I run apropos ""windows"" and balance-windows is the very first entry. Duh. In my defense I actually did try it but with apropos ""buffers"". But I think that may have been the first time or second time I ever ran it in emacs- as you guessed I was relying on Google rather than the docs.  Thanks again. It sure is a lot of fun learning this stuff."
emacs,2yie8r,agumonkey,5,Tue Mar 10 03:34:33 2015 UTC,"Don't apologize, Emacs is very large, people still learn about small functions like these even after years of usage.  Took me 3-5 years to finally get used to apropos, describe-function (C-h f), describe-mode (C-h m) to the point it becomes a free and enjoyable reflex.  I have the same reflex when I write code, I start with clean ideas but reality turns it into mud. When you get it to work, you can start to optimize (syntax, performance, documentation, etc ...).  Use let as much as possible, it will avoid you some bugs, since setq allows modification of variables outside the current scope. Changing since far away is often dangerous because you can't reason about the code you're reading without reading everything else."
emacs,2yie8r,agumonkey,1 point,Tue Mar 10 04:51:52 2015 UTC,"Thanks a lot. Didn't know about describe-mode either. I'm going to try to spend a few days learning about the help system.   Gets to be a bit of a rabbit hole though. Last week I was learning  about eshell, and then spent a few days customizing it. Then I installed mu4e to see what it was like as a mailreader even though my raspberry pi user doesn't even get any mail that isn't just a trigger to run a script."
emacs,2yie8r,RobThorpe,1 point,Tue Mar 10 12:44:47 2015 UTC,"It is a rabbit hole, Emacs is a very large blob of features, unless for experienced guys or young RTFM lovers, learning happens in phases related to your current interest.  TL;DR go at your own pace.  That said, developing a taste for the help system, will avoid wasting time down the road. Instead of doing the google, boards, emacs manual dance, a quick describe-mode will tell you a lot of what's in place."
emacs,2yie8r,vifon,5,Wed Mar 11 00:28:10 2015 UTC,"There's already a function for this M-x balance-windows. You can bind that with global-set-key as you do your own function.  There are a few problems with your function.  Firstly the name, it deals with windows not buffers so it's name should contain ""window"" not ""buffer"".  Secondly, it presumes that the contents of the other window is a file. It could be something else like the buffer-menu though.  Read the function balance-windows to see how it's been done in Emacs. Do C-h f balance-windows then select the link to windows.el and it'll bring you to the definition."
emacs,2yie8r,agumonkey,3,Wed Mar 11 00:51:28 2015 UTC,It is already bound to C-x +.
emacs,2yiquv,kabbotta,2,Tue Mar 10 03:26:03 2015 UTC,"After adding the include paths, did you run irony-cdb-menu again?"
emacs,2yiquv,tuhdo,1 point,Tue Mar 10 04:09:35 2015 UTC,"Yes, and both of the CEGUI includes show up under the compile options in the menu."
emacs,2yiquv,tuhdo,2,Tue Mar 10 04:13:11 2015 UTC,"Is this the file? It seems like all other files that CEGUI.h is in the same directory, while the included headers are prefixed with ""CEGUI/""; so, when looking at CEGUI.h and Irony sees include path like ""CEGUI/Affector.h"", the above paths in your .clang_complete are appended to ""CEGUI/Affector.h"", i.e. it becomes /usr/local/include/cegui-0/CEGUI/CEGUI/Affector.h and obviously such a file does not exist. You should try adding -I/usr/local/include/cegui-0/ and see if it works properly.  EDIT: when changing the include paths, remember to run irony-cdb-autosetup-compile-options again to refresh the completion database and run irony-cdb-menu to make sure Irony recognize your new setting."
emacs,2yfeyr,tty-tourist,6,Mon Mar 9 10:04:34 2015 UTC,"I'm also forced to run Windows at work, which is why I immediately installed VirtualBox and Ubuntu.   The icing on the cake is the Windows scheduled task that suspends my VM right before all Windows machines are restarted for maintenance once a week."
emacs,2yfeyr,bakuretsu,1 point,Mon Mar 9 10:29:08 2015 UTC,Why not use cygwin?
emacs,2yfeyr,PrismHelix,9,Mon Mar 9 17:46:48 2015 UTC,That's.... Evil in a way evil-mode will never manage.
emacs,2yfeyr,trezor2,4,Mon Mar 9 12:06:22 2015 UTC,"I'm forced to run Windows at work and I've installed emacs to make it bearable. For the heck of it, I tried running emacs -nw in the otherwise useless Windows Command Prompt and to my surprise it's works really well. All key binds work and it (sort of) supports my color theme ..."
emacs,2yfeyr,agumonkey,1 point,Mon Mar 9 10:11:17 2015 UTC,It's a bit glitchy but it works. Free 80s vintage terminal feel.
emacs,2yfeyr,agumonkey,2,Mon Mar 9 10:57:35 2015 UTC,Actually the Windows prompt handles emacs keys better than the Linux console where binds like M-[arrows] and S-RET don't work.
emacs,2yfeyr,agumonkey,2,Mon Mar 9 12:57:35 2015 UTC,"It's probably a configuration issue, I don't have problems with wmii/xterm/emacs right now, but control char input can be a problem (Gnome swallows Super-*, XMonad doesn't)  Still emacs rendering under cmd.exe has jitter on your system too right ?"
emacs,2yfeyr,RobThorpe,1 point,Mon Mar 9 13:07:01 2015 UTC,"I don't mean in xterm or various other terminal emulators but in the tty. It can't handle certain bindings, some of which are very relevant for org-mode.  Yep, there are jitters when the prompt window is resized and the font and colors are pretty awful so it's not something that I'm going to use."
emacs,2yfeyr,ruffyen,1 point,Mon Mar 9 13:15:52 2015 UTC,"Oh, real console... shame  Indeed S-RET is RET, and M-arrows are swallowed to. I wonder how fixable it is though."
emacs,2yfeyr,to3m,1 point,Mon Mar 9 13:25:14 2015 UTC,"It is a shame! I'm hoping that someone will bring the console into this millennium at some point (even if it's the systemd guys) ...  With dumpkeys and some hack I've managed to get C-RET working. Also, I've noticed that you can use ESC-[arrows] instead og M-[arrows]. That way, you can't hold the modifier and move - you have to press ESC each time but it works well enough to move headings in org."
emacs,2yfeyr,instant_sunshine,4,Mon Mar 9 13:38:50 2015 UTC,Fun fact. Emacs supported colours in MS DOS and Windows command prompts before it supported them on *nix systems.
emacs,2yfeyr,its_never_lupus,1 point,Mon Mar 9 16:01:09 2015 UTC,What is the point of running it with -nw in this situation?   I run it with -nw when I ssh into my linux box that has a DM installed.
emacs,2yf0ey,redguardtoo,1 point,Mon Mar 9 06:07:54 2015 UTC,I thought this was in default evil mode?
emacs,2yf0ey,xenow,5,Mon Mar 9 22:21:20 2015 UTC,"the default % in evil is primitive. evil-matchit provides much more features, for example, supports jump inside of ""if"" statement in python-mode."
emacs,2yf0ey,Kaligule,1 point,Mon Mar 9 23:21:15 2015 UTC,Is there a reason not to merge it into evil?
emacs,2yf0ey,vaiav,1 point,Fri Mar 13 11:00:11 2015 UTC,It is an elisp implementation of the matchit plugin that ships with vanilla Vim due to how excellent the plugin is.
emacs,2ydlu9,adolpwned,2,Sun Mar 8 22:07:48 2015 UTC,I guess that you don't want a box cursor (the blinking square) but a bar | instead?  (setq-default cursor-type 'bar)   https://www.gnu.org/software/emacs/manual/html_node/elisp/Cursor-Parameters.html
emacs,2ydlu9,Suedede,1 point,Sun Mar 8 22:46:06 2015 UTC,"I really don't care about it, I'm a GNU/Linux user and I'm used to have it in the terminal, but thank you for that! :D"
emacs,2ydlu9,RobThorpe,2,Mon Mar 9 07:18:56 2015 UTC,"Off-topic: I really liked the colorscheme, what is it called?"
emacs,2ybcvn,pjhuxford,3,Sun Mar 8 06:03:52 2015 UTC,There should be a way to specify your own sort order for a source. E.g. your own sort function. Isn't it possible?
emacs,2ybcvn,kcin,1 point,Sun Mar 8 08:08:00 2015 UTC,"(loop for ext in '(""\\.swf$"" ""\\.elc$"" ""\\.pyc$"")   do (add-to-list 'helm-boring-file-regexp-list ext))"
emacs,2ybcvn,monotux,1 point,Sun Mar 8 09:50:01 2015 UTC,"I'm no lisp expert, but doesn't this just add the those file extensions to the boring list? I don't want them to disappear, I just want them to be in a different order."
emacs,2ybcvn,kcin,1 point,Tue Mar 10 00:41:22 2015 UTC,You should ask the maintaner if it's possible and suggest it as a feature (option to specify a custom sort function for a source) if it's not:  https://groups.google.com/forum/#!forum/emacs-helm
emacs,2yaq3p,sharjeel,10,Sun Mar 8 01:51:58 2015 UTC,"The -n option to emacsclient does what you want.  emacsclient -n some_file  You can also write an easy wrapper for emacsclient that will start a server if it's not running. Something like emacsclient -n $@ || (emacs --daemon && emacsclient -n $@)(relying on the return value of emacsclient to start emacs if a server is not running).  If you do this, you probably also want   (require 'server) (unless (server-running-p)   (server-start))   in your init file."
emacs,2yaq3p,bliow,2,Sun Mar 8 04:32:23 2015 UTC,Two off the top of my head:   Use the --no-wait flag with emacsclient. Use shell-mode or eshell and then use find-file
emacs,2yaq3p,ressis74,7,Sun Mar 8 02:44:14 2015 UTC,"To make the daemon start automatically, set the ""alternate editor"" to a blank. It's a hidden feature. So putting it all together:  emacsclient -na """" <file>   I have a similar pair of bash aliases for this sort of thing:  alias e='emacsclient -ca """"' alias et='emacsclient -ta """"'"
emacs,2yaq3p,skeeto,1 point,Sun Mar 8 03:38:26 2015 UTC,"And the most important aliases:  alias vim='emacsclient -ta """"' alias vi='emacsclient -ta """"'   (EDITOR works in most cases though)"
emacs,2yaq3p,---R,1 point,Sun Mar 8 20:23:41 2015 UTC,It's not really a hidden feature it's mentioned in the manual.
emacs,2yaq3p,RobThorpe,3,Sun Mar 8 18:31:51 2015 UTC,"I did this:  > export EDITOR=""emacsclient -n""  > e script.sh"
emacs,2yaq3p,imLordYaYaYa,2,Sun Mar 8 03:30:07 2015 UTC,Wait...you were using a terminal outside of emacs? ;)  M-x shell my friend and never look back! ansi-term if you need more cowbell. Tramp for jedi powers.
emacs,2yaq3p,bitsan,6,Sun Mar 8 04:18:03 2015 UTC,"Somehow I've never gotten used to running shell inside emacs. A short term session to yank some filenames works well but for regular stuff I've always run into petty issues like weird characters for colors, managing multiple session panes etc.  Terminal always works better for me with tmux somehow."
emacs,2yaq3p,dangersalad,3,Sun Mar 8 05:45:11 2015 UTC,"I am kind of in the same boat, but I have found ansi-term to be better behaved with most things."
emacs,2yaq3p,jhirn,2,Sun Mar 8 07:00:58 2015 UTC,+1 to this. I've tried so many times but still have a iTerm2 window open alongside emacs.
emacs,2yaq3p,RobThorpe,1 point,Wed Mar 11 19:43:19 2015 UTC,"Try:  emacsclient -na ""emacs"" some_file   You need (server-start) in your init file as bliow mentions.  You can try using Emacs daemon mode by just doing ""emacsclient -na some_file"".  But, notice that daemon mode doesn't work with GTK+ Emacs."
emacs,2y9qik,MyNameIsFuchs,12,Sat Mar 7 20:16:16 2015 UTC,"Gotta ask, how often do you really need to hold down a key to produce many keystrokes, that you need to speed this up? I don't really ever do that, personally..."
emacs,2y9qik,jringstad,4,Sat Mar 7 21:45:54 2015 UTC,Think arrow keys.
emacs,2y9qik,Enfors,6,Sat Mar 7 21:59:34 2015 UTC,C-s and C-r allow me to almost never use the arrow keys.
emacs,2y9qik,humanthepequenino,1 point,Sun Mar 8 03:20:35 2015 UTC,"Fair enough, I didn't think of that. I don't use the arrow-keys that much for navigating that the key-repeat delay bothers me."
emacs,2y9qik,jringstad,2,Sun Mar 8 11:53:34 2015 UTC,Often enough. What else to do when there doesn't happen to be a non-repetitive combination of movement commands that puts the point right where you want it? Even in Emacs that can happen. Is it really better to punch in a rough estimate of the distance than to just hold down a key?
emacs,2y9qik,phalp,3,Sun Mar 8 03:10:03 2015 UTC,C-s gets you wherever you want quickly
emacs,2y9qik,humanthepequenino,-1,Sun Mar 8 03:21:09 2015 UTC,Sometimes.
emacs,2y9qik,phalp,2,Sun Mar 8 04:51:25 2015 UTC,C-s helm-swoop ace-jump …
emacs,2y9qik,vermiculus,-2,Sun Mar 8 06:15:59 2015 UTC,...holding down a key
emacs,2y9qik,phalp,1 point,Sun Mar 8 06:27:34 2015 UTC,I just don't see why it's ever necessary to be perfectly honest.
emacs,2y9qik,vermiculus,2,Sun Mar 8 15:13:01 2015 UTC,To make nyan-mode move faster!
emacs,2y9qik,gnuvince,2,Sun Mar 8 05:35:31 2015 UTC,Not emacs specific but very useful. You can see the current settings with:  $ xset q
emacs,2ya5aj,tty-tourist,3,Sat Mar 7 22:28:02 2015 UTC,"It looks like you are trying to pass arguments to your hook functions through add-hook. This is not how add-hook works, consult the docs below to see what arguments add-hook uses.  If you want to pass nil nil nil to 'set-window-fringes in your hook, do this:  (add-hook 'text-mode-hook (lambda () (set-window-fringes nil nil nil)))   The docs:  (add-hook HOOK FUNCTION &optional APPEND LOCAL)  Add to the value of HOOK the function FUNCTION. FUNCTION is not added if already present. FUNCTION is added (if necessary) at the beginning of the hook list unless the optional argument APPEND is non-nil, in which case FUNCTION is added at the end.  The optional fourth argument, LOCAL, if non-nil, says to modify the hook's buffer-local value rather than its global value. This makes the hook buffer-local, and it makes t a member of the buffer-local value.  That acts as a flag to run the hook functions of the global value as well as in the local value.  HOOK should be a symbol, and FUNCTION may be any valid function.  If HOOK is void, it is first set to nil.  If HOOK's value is a single function, it is changed to a list of functions."
emacs,2ya5aj,jordonbiondo,1 point,Sat Mar 7 22:34:28 2015 UTC,"Thanks!  I have some reading up to do. Played around a bit and this is what worked to turn off fringes in text-mode:  (add-hook 'text-mode-hook (lambda () (fringe-mode 0 nil (fringe))))  Sorry, didn't work - only appeared so because I'd turned fringes off globally with cusomize-variable to see what value that would give. Using it in the hook as above didn't do the trick ..."
emacs,2ya5aj,jordonbiondo,2,Sat Mar 7 23:10:26 2015 UTC,"You're arguments are wrong, look at the docs for the function `fringe-mode', it takes one argument and you are passing 3. In emacs press C-h f and enter fringe mode to see the docs."
emacs,2ya5aj,jordonbiondo,1 point,Sun Mar 8 05:05:18 2015 UTC,I see your point. Saw the snippet with set-window-fringes nil nil nil somewhere but it makes sense why it's not working.  This is the best working solution I've found:  (add-hook 'text-mode-hook           (lambda ()         (setq left-fringe-width 0)(setq right-fringe-width 0)))
emacs,2y80g1,agumonkey,3,Sat Mar 7 07:15:02 2015 UTC,"In future Emacs, this should no longer be necessary.  You can look at the term/xterm.el library and see that it makes these kinds of bindings.  In the meantime, perhaps something requiring less work is to advise the current terminal-init-screen function.  http://git.savannah.gnu.org/cgit/emacs.git/commit/lisp/term/screen.el?id=bfc30790"
emacs,2y80g1,holos,1 point,Sat Mar 7 18:11:33 2015 UTC,"I have no improvement to what you said, however I am curious, perhaps because I've never used GNU Screen, What makes it better than using a regular terminal or program and leaving the window opened? I get that it is better in the case of SSH so I would imagine it is good for remote use, but I do not understand what it does for you if it is in the same machine. Notice I only make this comment because I want to learn, I even went to the GNU Screen website before posting this to get acquainted with what it does, but I can't seem to understand what the use case is. If anybody can elighten me, I will appreciate it."
emacs,2y80g1,maufdez,1 point,Sat Mar 7 15:53:46 2015 UTC,"programs like screen and tmux allow you keep your program running and disconnect from the server you SSH'd into. Later, you can SSH'd back into said server, ""reattach"" your screen/tmux session, and carry on where you left off.  Furthermore, in my experience, the defaults for SSH-ing to a server usually has a timeout and will disconnect you if you just leave the window open. This could be violent to any program you might be running in a direct ssh shell. Screen/Tmux will keep your program running if such a timeout occurred (or even something like your ISP dropping)."
emacs,2y80g1,tsuru,1 point,Sat Mar 7 16:39:50 2015 UTC,"Thanks for the reply, this confirms what I was thinking, this is mostly useful when you are connecting to remote machines."
emacs,2y80g1,maufdez,1 point,Sat Mar 7 20:12:27 2015 UTC,"/u/xach does paredit work ok over ssh without screen? If so, maybe running emacs daemonized within screen, and then connecting with emacsclient -t outside of screen would work, assuming an Emacs 23 or higher."
emacs,2y80g1,tsuru,1 point,Sat Mar 7 16:56:36 2015 UTC,"I'm already running screen to keep the lisp alive, to tail logs, and to do other stuff. It's a key part of my workflow. Working outside of screen for just emacs isn't a great option for me."
emacs,2y84v1,DOUBLEXTREMEVIL,2,Sat Mar 7 08:27:58 2015 UTC,emms-browser-covers can be a function that takes the argument PATH and SIZE.  See emms-browser-get-cover-from-path for how it's invoked.
emacs,2y84v1,---R,1 point,Sat Mar 7 12:54:50 2015 UTC,unfortunately i'm not really fluent in elisp.
emacs,2y84v1,BruceConnor,2,Sat Mar 7 19:57:51 2015 UTC,"This looks like a great chance to learn. :-)  In any case, you can always try asking on emacs.stackexchange or filling a feature request for EMMS."
emacs,2y84v1,---R,2,Sun Mar 8 10:33:11 2015 UTC,Alright.  Fixed in 09f5512e348213af7095f150bb5f7546971d482f.
emacs,2y6bxb,jhirn,3,Fri Mar 6 21:10:34 2015 UTC,"No, there isn't.  More generally, what do you want to do?"
emacs,2y6bxb,RobThorpe,2,Fri Mar 6 21:17:22 2015 UTC,"Thanks again Rob.   I want to do exactly what I stated for absolutely no purpose other than to do it =)  I guess the need came from wanting to debug init scripts by resetting everything to stock and stepping through without a restart. Totally unneeded except to show off to a friend about ""never needing a restart""."
emacs,2y6bxb,oantolin,2,Fri Mar 6 23:14:16 2015 UTC,"Oh, I was wondering why you wanted to do this. I'll suggest something: if you run emacs -q but you don't close your other Emacs instance, it's technically not a restart. :P"
emacs,2y6bxb,RobThorpe,2,Sat Mar 7 02:54:01 2015 UTC,"I see. You can't do it unfortunately. The internals of Emacs aren't setup in the right way to make it possible. Emacs could be changed but it would be a lot of work for little gain. As another poster pointed out, Emacs -q is fast, it's not like booting an OS."
emacs,2y6bxb,cestdiego,1 point,Sat Mar 7 13:46:25 2015 UTC,I guess you can make an emacs function that calls a emacs -q instance and passes your init file as a buffer...so that you can call one by one the functions of it. in another buffer while you modify the init file in your current emacs
emacs,2y6bxb,tending,2,Mon Mar 9 00:23:04 2015 UTC,"If you're worried about losing your buffers, there are packages to save what you have open."
emacs,2y6bxb,abo-abo,1 point,Fri Mar 6 23:09:36 2015 UTC,Nah not that. It was more about reverting a broken init file and reloading without a restart.  Thanks though!
emacs,2y469e,politza,21,Fri Mar 6 07:06:22 2015 UTC,"It is to random, to easy to break your layout and to hard to get back.   Do you know about winner mode?  https://www.gnu.org/software/emacs/manual/html_node/emacs/Window-Convenience.html"
emacs,2y469e,kcin,1 point,Fri Mar 6 07:38:01 2015 UTC,"Oh boy do I like winner mode. I'm thinking about writing a helm plugin for winner-mode, a bit like helm-all-mark-rings."
emacs,2y469e,MonsieurBanana,12,Sat Mar 7 10:26:42 2015 UTC,"Mostly replying to your second concern...  The ""window"" system is a 1970s interface.  Created at a time when there wasn't a mouse, only a keyboard, and the monitor was a monochrome green phosphor display with 80 columns and 24 lines.  Let that sink in:  80 columns and 24 lines.  (If you weren't unlucky enough to have an even smaller display!)  And emacs interface was (originally) designed around this.  ""Window layout"" would be perfectly ridiculous in such an environment.  It wasn't a design consideration for the interface.  But that was then.  And now we do have a mouse, and much more powerful displays.  And support has been added for these things.  But that doesn't change the original design philosophy, or the core mode of interaction in the human/computer interface, even if it does allow a lot more possibilities in that space.  So many possibilities in fact, that newer users never have to learn the original core mode of interaction, and being more familiar with the things-must-be-visible-in-order-to-click-on-them interfaces of better displays and the mouse and touch-screen, see the original mode as dated and clunky.  I'll grant it is dated.  But that original mode of interaction is far from clunky.  In fact, it's a highly polished interface with over 3 decades of refinement.  But it is a different computer interaction philosophy than you are used to.  And unfortunately, I'm not sure how exactly I can describe the differences, to communicate past your prejudices (instilled by every other computer interface you've likely experienced), without sounding like some out-of-touch old-timer.  But I'll give it one go, with a terrible food metaphor...  Modern interfaces are more like a buffet table, with the food spread out across its surface.  Your attention is your plate (which is also likely your mouse-cursor), and to acquire some specific item from the table, you hover it over the item, transfer the food to your plate (click on it) and then proceed to dine (read/edit).  Emacs 1970s interface is more like a Star Trek food replicator.  Your plate (attention) is a fixed point, and you just ask the machine to provide the item you're interested in, and it is deposited directly on the plate, where you can dine (read/edit).  To not show so much prejudice myself, I will admit that the buffet-table style of interface has some advantages.  You can clearly see the most ""popular"" options.  You can group similar things together, and different things apart in different sections on the table (your ""window layout"") which can help you to better understand relationships, or enforce boundaries.  But on the other side, no table (display) is yet large enough to display all of your options.  And the larger that set grows, the harder it becomes to navigate with your plate.  Further you can only chew on (at least for the sake of this terrible metaphor) one food at a time, anyway...even if you bounce rapidly back and forth with your plate (attention).  Simply requesting what you need, when you need it, on-demand, saves you some motion, and frees up a lot of table (screen) space.  I don't want to say ""learn2emacs"" or ""you're doing it wrong"", for trying to impose the buffet table interface on emacs.  It's your computing and your interface.  The only right and wrong choices are what are right and wrong for you.  And emacs is so flexible that you can set it up to run just about any way that you'd like.  But I do want to suggest that there's another way of interacting with a machine.  A highly refined and sophisticated interface (which happens to be emacs native interface) exists, that you apparently haven't discovered or explored.  It's different than what you're used to, but it is by no means inferior.  (I personally find it superior, in most of the ways that matter to me.)  Anyway, tl;dr : a ""window layout"" is not emacs native interface, but something built over that surface.  And at least some of the problems you are experiencing with that come from your expectations about a different kind of interface, and lack of experience with the native one."
emacs,2y469e,forked_tongue,3,Fri Mar 6 17:48:21 2015 UTC,"with a terrible food metaphor   First off, this was an awesome metaphor.  Second off, can we please have more food-related explanations in the future."
emacs,2y469e,pallagun,1 point,Fri Mar 6 21:13:54 2015 UTC,"But tables got a lot bigger, as has the collection of food from which to choose from."
emacs,2y469e,forked_tongue,2,Sat Mar 7 12:20:35 2015 UTC,"The first point is undoubtedly true; we've come a long way from 80x24.  Though, the point remains, that was a constraint the original interface was designed around, and it still works...if you were for some reason forced to use an old monitor today, you could still use emacs effectively, with it.  The second point about selection though is more contestable.  The amount of software you could be potentially running at once still dwarfs the available screen real estate.  Do you really have no buried tabs or windows?   Perhaps not, if you're running a high-resolution multi-monitor set-up...but even that would  probably be more distracting than helpful after a certain point. Abusing the food metaphor further:  there's not a table large  enough to hold every dish available in the world...and even if there was, it would be terrible to navigate.  The key point remains that your attention is a single point of focus.  You can rapidly shift focus, but unless you have a very unusual human neurology, you can't focus on 2 things at once.  Navigating by request is not necessarily more efficient (especially factoring in expected locations and ""muscle memory""), but it's certainly a lot more flexible (for either one-time, or changing needs) and a lot less cluttered.  Anyway, it's OK if you don't pursue learning the original mode of interaction.  I don't really expect to convince you...especially as I didn't really convert myself, until I was forced to, by travel, requiring remote access via a terminal emulator...first learning, then becoming proficient with, then coming to prefer ""the old ways.""  It's a philosophical shift in human/computer interaction, and a few words on an online forum are unlikely to have the leverage needed to convince you to reevaluate your whole perspective.  But I hope I've at least convinced you that another perspective exists...and that there might be some good reasons for certain default behaviors being what they are.  Though I also hope I've at least planted the seed of the idea that maybe there's another (possibly more powerful) way to interact with a machine, that might be worth your time to discover.  But I'll settle for the first."
emacs,2y469e,forked_tongue,1 point,Sat Mar 7 17:47:26 2015 UTC,I think you are reading to much into this.
emacs,2y469e,vkazanov,2,Sun Mar 8 16:57:25 2015 UTC,Perhaps so.  But the more important question (for me) is:  was there anything of value (to you) in my replies?
emacs,2y469e,BruceConnor,9,Sun Mar 8 22:38:50 2015 UTC,"Well... I can agree to some extent about the Help system.  But windows in Emacs are all right. My guess is that you try to work with windows the way you got used to work with other interfaces, i.e. the way ecb works: this window is for code, that one - for browsing. Which is wrong.   Windows in Emacs are lightweight, you open, close, transpose 'em all the time. Check out the winner mode - it helps to get back to the previous state easily. Once you accept the ""lightweightness"" of the window system - it becomes truly natural.  Otherwise you can always use dedicated windows and similar facilities to pin windows the way they are."
emacs,2y469e,gnuvince,9,Fri Mar 6 07:43:52 2015 UTC,Feel free to M-x report-emacs-bug and send any suggestions you may have.
emacs,2y469e,to3m,7,Fri Mar 6 10:49:45 2015 UTC,"Sometimes I wish that not only buffers could have modes, but also windows and that this associated mode would be used to determine where to put a buffer.  Let me try to explain with an example.  Suppose I have the following window layout:      +----------------------+------------------------+     |                      |                        |     |                      |       shell-mode       |     |                      |                        |     |     prog-mode        +------------------------+     |                      |                        |     |                      |       circe-mode       |     |                      |                        |     +----------------------+------------------------+   Regardless of which window is active at the moment, if I open a file that is handled by a mode deriving from prog-mode, the left window should be used to display that buffer.  Similarly, if I type C-x M (my shortcut for shell), the focus should be switched to the existing shell-mode window.  If I use C-c C-SPC (switch to an IRC buffer that has activity), the circe-mode window should switch buffer, not the buffer from which I issued the keybinding.  Of course, this would likely be a huge amout of work and would likely break the workflow of many people.  Still, that is a feature that I'd love to have, as it would allow me to setup a window layout for the work I'm doing and have it be unmodified as long as the buffers I manipulate are of modes compatible with the windows'."
emacs,2y469e,gnuvince,6,Fri Mar 6 14:43:06 2015 UTC,"I always thought that too (if I've understood you correctly) so I wrote a package to do it: https://github.com/tom-seddon/major-mode-dedication - hopefully easy to use.  Once you've got your preferred arrangement set up, using iswitchb or the buffer list will put the buffer in the current window. But when elisp code pops up a buffer automatically (e.g., when you invoke help, or inferior python mode, or shell, etc.) it'll appear in a window according to its major mode.  (This works pretty reliably for me, so hopefully that's true for others! Please send github pull requests or open github issues if not...)"
emacs,2y469e,to3m,1 point,Fri Mar 6 15:36:56 2015 UTC,"I don't know why, but it doesn't seem to work at all for me.  I got the mmd from github and have Emacs 24.4.1 installed.  I split Emacs in two, opened a Go file in the left window, pressed C-x D D to dedicate the window, switch to the other window, opened another Go file, and it didn't display in the Go dedicated window.  Same thing happens when switching buffers.  Am I missing something?"
emacs,2y469e,tuhdo,2,Sat Mar 7 04:52:48 2015 UTC,"No... you're right, it doesn't work with find-file. It only works with stuff displayed with display-buffer or switch-to-buffer-other-window - those functions have hookable behaviour (unlike the switch-to-buffer function, which is also what find-file uses). These two functions are the ones usually used by elisp code that pops up new buffers, which was the main piece of misbehaviour I wanted to fix. Having files load in the selected window (and having buffer switching use the selected window) never bothered me.  I'm going to look at fixing this this afternoon... but I'm not quite sure how yet...  EDIT: didn't figure it out... you can sort-of do something a bit like with ido-find-file, but the result isn't actually particularly useful. I'm going to have to sleep on this one and go back to it."
emacs,2y469e,gnuvince,7,Sat Mar 7 13:13:35 2015 UTC,It seems like purpose package is created to solve this problem. You can read its full explanation. And thanks for ASCII picture that makes it short and easy to understand.
emacs,2y469e,hprotagonist,2,Fri Mar 6 16:45:44 2015 UTC,"Thanks for the tip, it seems that the author had the exact same needs.  I'll try it out this weekend."
emacs,2y469e,gnuvince,2,Fri Mar 6 17:03:55 2015 UTC,That's how I'd like it too.
emacs,2y469e,ijustwantanfingname,1 point,Fri Mar 6 19:36:02 2015 UTC,"ECB allows for this kind of behavior. Unfortunately it is not easy to install and configure.  http://ecb.sourceforge.net/docs/Changing-the-ECB-layout.html  I used to use ECB just for the window management, but I have started using a lighter weight solution combining dedicated windows and winner-mode.  These SO answers are similar to what I use. I bind the toggle to C-c t.  http://stackoverflow.com/questions/5151620/how-do-i-make-this-emacs-frame-keep-its-buffer-and-not-get-resized  http://stackoverflow.com/questions/43765/pin-emacs-buffers-to-windows-for-cscope"
emacs,2y469e,abo-abo,1 point,Fri Mar 6 15:25:28 2015 UTC,"It's acheivable (and I did mess around with setting this up a few months ago), however it's really hard to get it to work right without a lot of fiddling."
emacs,2y469e,16rlut3Br,4,Fri Mar 6 15:29:19 2015 UTC,I love the window management in emacs....
emacs,2y469e,RobThorpe,3,Sat Mar 7 06:40:23 2015 UTC,while the cursor moves back to square one   This isn't the case for me: it moves back to the link - very straightforward.   The idea of invoking some command has to be carefully weighted against the window-micro-management-work you're up for afterwards   I don't encounter this problem too much. The only issue that I can remember is magit popping to buffer instead of reusing it. I just have to spend some time to configure this.  There's some effort to solve this problem with popwin and shackle. I never got to configure them since the problem doesn't bug me too much.
emacs,2y469e,kost-bebix,1 point,Fri Mar 6 09:00:32 2015 UTC,"while the cursor moves back to square one   This isn't the case for me: it moves back to the link - very straightforward.   I think /u/politza reopens the mode help with another call to describe-mode instead of pressing l in the help buffer for the command. Which is what I use because of my exposure to info but not so intuitive for a new user, I guess."
emacs,2y469e,kost-bebix,3,Fri Mar 6 09:45:42 2015 UTC,"I agree with you about describe-mode. Often the Info documentation is better. I do C-h r then s for the mode name.   I think detailed Window layouts are something to avoid. When I use Emacs I usually have only one buffer visible and only one frame. I sometimes have two buffers open at once, but rarely three.  In Emacs it's quite easy to switch between buffers. In my opinion that means that having lots of little buffers around doesn't help much. I can be made easier by defining some shorter keys for C-x 1, C-x 2 & C-x 0. I don't replace many of the default keys, but I replace those ones."
emacs,2y469e,tuhdo,2,Fri Mar 6 14:50:03 2015 UTC,Non by-one-line scrolling by default.
emacs,2y469e,kost-bebix,2,Fri Mar 6 12:23:06 2015 UTC,"Yeah, that's exactly what I'm using. I don't remember exactly if that thing makes scrolling to not jump, or something else from suggestions here http://www.emacswiki.org/emacs/SmoothScrolling , but I do think that this should be by default.  I'm not sure what exactly is not clear in my words, maybe definition of scrolling -- I mean several things actually:   scrolling in response to scrolling via scrolling controller on a mouse or similar manipulator when you go into margin like an end of screen or almost end of screen -- emacs jumps by big chunks   I configured it long time ago to not jump by many lines and happy since, and I think this is one of things which make it much less ""80s"" editor. Of course, ideally would be to have scrolling with real smoothness in GUI mode, like in Sublime Text, it really makes a difference, but I think this is impossible architecturally."
emacs,2y469e,spwhitton,1 point,Fri Mar 6 14:03:13 2015 UTC,"I'm pretty sure this is configurable. If you look at Spacemacs, you can scroll your screen one line by default, whether you use a mouse or a keyboard."
emacs,2y469e,kost-bebix,2,Fri Mar 6 14:28:56 2015 UTC,But that's exactly what I wrote! Sorry if it's not clear again from my message :) My emacs is as smooth as it can be and I'm happy with it. I just don't understand why that is not the default.
emacs,2y469e,spwhitton,1 point,Fri Mar 6 23:29:11 2015 UTC,"I found that once I got used to scrolling by screenfuls, I didn't have any need to scroll line by line and realised it was much slower to do so.  Give it a try!"
emacs,2y469e,agumonkey,1 point,Sat Mar 7 09:31:22 2015 UTC,"I don't understand what do you mean. Only scrolling by a full screen size? How do you read code of a function, if it's split by screen? Do you keep jumping back and forth?"
emacs,2y469e,lemurnomicon,1 point,Tue Mar 10 04:01:08 2015 UTC,"Scroll a screen at a time, but when I want to read a function, I put my cursor on the first line of that function and type C-l to move that line to the top of my screen.  Then I can back to scrolling by whole screenfuls."
emacs,2y469e,sabof,2,Tue Mar 10 07:49:28 2015 UTC,"I often wished to have a describe-mode structured a bit like magit option panels. I'm not fond of formatting and layout, but some times it really helps to scan long mode descriptions. Yet another mode in my emacs extensiontowrite list."
emacs,2y469e,username223,3,Thu Apr 30 07:11:53 2015 UTC,Try discover.el and guide-key which are sort of generic versions of the magit style help/options buffers.
emacs,2y469e,JetSetWilly,2,Fri Mar 6 14:59:44 2015 UTC,"I think the window system is a compromise between many people's ideals. By using less-mentioned things like dedicated windows, side windows, display-buffer-base-action, and display-buffer-alistI was able to customize the behavior to something I rather like."
emacs,2y469e,kaushalmodi,2,Fri Mar 6 15:50:17 2015 UTC,"In many ways, Emacs makes me feel stuck in the 80s in a good way. ;-)  The biggest 80s drawback to me is font/graphics handling.  The assumption of fixed-width, single-size text is deeply embedded in Emacs' world, while a modern word processor or web browser handles variable-width text of all sizes and images.  Most of the time I'm editing code, so it doesn't matter, but when Info, AucTeX, or something deposits big fonts or images in a buffer, it's just ugly.  I don't think there's a better way -- it's just the price you pay.  If you want a different trade-off, use a different editor."
emacs,2y469e,forked_tongue,2,Fri Mar 6 20:11:08 2015 UTC,"What I don't like is the piss-poor discoverability.  The 20 or 30 commands you use frequently - that's fine, you memorise them. The long tail of commands you might want to use once a fortnight, month or more? You can't just find them by exploring menus quickly.  Because it isn't OOP, if you want to do some operation on a buffer or on a paragraph or whatever, you can't just ""autocomplete"" on the thing you want to operate on and then select a sensibly chosen verb that applies to the thing. Instead, the verbs are all in splendid isolation from each other and finding them requires either arcane help commands, or more likely, just google it.  This gets quite irritating after a while. You feel like the editor has all this functionality, but because there is simply no way I can actually memorise 300 keyboard shortcuts and M-x commands, my usage amounts to being not that much more advanced over bloody notepad.   So as a result I mainly use emacs only when I want to apply a macro (one of the few things I have memorised, macros are very useful). If eclipse or the like actually developed a decent macro system I'd have no reason to use emacs left."
emacs,2y469e,JetSetWilly,4,Sat Mar 7 03:58:36 2015 UTC,There are many packages that can help you discover commands. What you are looking for is fuzzy search (smex and ido + flx-ido or as @tuhdo mentioned helm M-x if you like the helm interface) and something like guide-key or discover. Look up these packages which I have mentioned in the mono space type.
emacs,2y469e,RobThorpe,3,Fri Mar 6 22:05:40 2015 UTC,"I feel bad you're being down-voted here...I tend to agree with you about discoverabilty (especially for newer users!)  Though I find M-x apropos addresses my own issues well enough.  However, that's after already being proficient with buffer navigation and emacs help and self-documentation systems...which is no small hurdle (especially for newer users!)  The emacs tutorial tries to push folks over that hurdle...but starting a rigid tutorial is not how most folks are used to getting acclimated to new software, these days.  RTFM may be appropriate for professional engineers, but it's not even an understood acronym for a newbie.  But anyway, yes M-x apropos is amazing.  Well, for me, anyway...I don't know if it will work as well for you...but it's worth suggesting!"
emacs,2y469e,JetSetWilly,2,Sat Mar 7 04:29:28 2015 UTC,"I wouldn't feel too bad.. when I posted I didn't realise it was r/emacs, I thought it was a more general subreddit. Most subreddits about a thing, if you enter them and start slagging off thing you will get downvoted. Surprise! And it turns out I haven't really been downvoted overall, so kudos to r/emacs.  And I am glad I made that mistake as I have received a lot of useful tips to try out from emacs experts, I'll be giving them a go soon."
emacs,2y469e,kraml,2,Sat Mar 7 18:03:28 2015 UTC,It's very useful to read the manual sections that relate to the things you use regularly.
emacs,2y469e,JetSetWilly,1 point,Sat Mar 7 18:39:58 2015 UTC,"Yes. And I have done that, and done tutorials, and regularly used emacs for 20 years.  That doesn't change the point of what I said, which is that for me at least, I do not remember commands unless I regularly use them, and in emacs the long tail of commands infrequently used is vast."
emacs,2y469e,agumonkey,1 point,Fri Mar 6 22:28:44 2015 UTC,"Can you give a concrete example?  I have all the key bindings memorized that I use daily. For stuff that I use rarely, I at least know part of the name of the command and can filter for that in M-x. I use smex, so all the commands are in an ido minibuffer and I can filter for the command, even if I only know part of its name.  For example, if I want shell-command-on-region but can't remember the name exactly, I do M-x shell C-SPC region to filter all commands that have both shell and region in their name."
emacs,2y469e,kraml,3,Fri Mar 6 22:43:25 2015 UTC,"Sure. If I want to do something in eclipse, or any other modern gui really, that I do rarely - such as ""tell maven to fetch all dependencies for this project"" or ""find everything that mentions this token in this package"" - then in a GUI, which i guess is inherently ""object orientated"", you can generally just right click on the thing that you want to operate on, and very often find the thing you want to do after a bit of poking about.  Perhaps it is a spacial memory versus a verbal memory thing as well. In emacs it can be quite difficult to know even what to search for! You resort to - as you illustrate - searching for a flat list of all commands relating to a wide term like ""shell"" or ""buffer"" or whatever. If your verbal memory is good enough, you can further refine it as you did, if it isn't, youa re all at sea and it is off to help pages or google, breaking your flow.  It seems like the classic text editors (such as vim and emacs) really reward great knowledge of frequently used commands by making them fast to use and always immediately available and composable.  But modern IDEs and gui just seem to be better at this ""long tail"" of complex and less frequently used stuff.   Because they are more ""object orientated"" (shit term but you know what I mean) you can directly interact with the things you are using, and even use a foggy spatial memory of ""I right click here and then there and there was something like this here I think?"" - whereas emacs necessarily demands a more precise recollection of what to search for to aid discoverability.  That's fine, it is just a trade-off but in some ways emacs makes things more stark by verging on IDE-like complexity itself, without the ease of use aids."
emacs,2y469e,tuhdo,3,Fri Mar 6 23:15:30 2015 UTC,"Some kind of ffap for elisp functions.  Emacs suffers from a lack of grammarization / categorization. It's a bazaar of non namespaced functions. Nowadays people try to use clearer names (file.el, s.el, dash.el). It's still not contextual like object.verb, but it's not surprising since Emacs is built on lisp and lisp is not OO centric."
emacs,2y469e,kcin,2,Fri Mar 6 23:26:14 2015 UTC,"Good point, now I understand. Interesting though that different people run into different issues. I have never felt the need for more discoverability, since when I have setup my workflow for a project, I very rarely, if ever, need something extra (that I can't quickly find like I described before)."
emacs,2y469e,tuhdo,2,Sat Mar 7 07:25:15 2015 UTC,"What you want is something that displays its features visually. I don't think having such ""objects"" display make it any easier to use anyway. If you are new, most of the ""visual objects"" are just strange icon with a short label when you hover over them. In the end, you still have to read the manual that comes with the editor or google things up anyway. Say, for example, you are used to Eclipse; but would you be learning as fast when moving to Visual Studio with all (maybe) new or old ""visual objects"" presented in a different way?"
emacs,2y469e,JetSetWilly,1 point,Fri Mar 6 23:36:05 2015 UTC,"I have all the key bindings memorized that I use daily. For stuff that I use rarely, I at least know part of the name of the command and can filter for that in M-x.   Isn't how it's supposed to work? It sounds you find everything you want. Why should you know the exact name of every command if you can easily get to the one you want with completion?  Also, you can define name aliases for the less frequently used commands if you find the default name obscure and want to give them a better name which helps you to find them easier later. E.g:  (defalias 'turn-all-first-letters-into-capitals-in-region 'capitalize-region)   (The example may not be the best, but you get the point.)"
emacs,2y469e,kaushalmodi,1 point,Fri Mar 6 23:50:06 2015 UTC,"Maybe you should use Helm and give helm-M-x a chance. You will surprise how you can manage thousands of commands effortlessly.    Because it isn't OOP, if you want to do some operation on a buffer or on a paragraph or whatever, you can't just ""autocomplete"" on the thing you want to operate on and then select a sensibly chosen verb that applies to the thing. Instead, the verbs are all in splendid isolation from each other and finding them requires either arcane help commands, or more likely, just google it.   Could you give an example? What you described is already available: C-h b lists all ""verbs"" of current major modes and minor modes, that is always available at your fingertips. You can't blame something for having many features that you can't manage."
emacs,2y469e,lazyklimm,1 point,Sat Mar 7 05:52:13 2015 UTC,"I will give that a go, thanks. It could well be I'm just not good enough at emacs.   Despite having used it - frequently at that! - for 20 years I still can never remember whether C-x 0 is ""close this window"" and C-x 1 is ""close other window"" or vice versa; so i always guess, every time. It is pathetic really."
emacs,2y469e,Huperprogeny,3,Fri Mar 6 23:19:18 2015 UTC,"Many shortcuts don't need to be memorized if you understand the logic to why they are so or if you associate a mnemonic or some meaning to those. Using your examples, C-x 0 seems a obvious binding to me for closing the current window as 0 can be associated to the opposite of presence of something or killing or closing of something. C-x 1 actually makes your current window the only ONE window in the frame, which emacs implements using the command delete-other-windows. Now, if you associate this binding with the ""ONE window"" reference, doesn't it make more sense? In other cases it is just muscle memory that helps you remember the bindings. The more bindings you start using, the more your ""muscles will memorize"".   If you say that macros are the only reason you are stuck with emacs, then I frankly believe that you need to explore more of emacs; look what new packages are out there, look what new features emacs has to offer, browse sites like emacs.stackexchange.com and this sub-reddit. STAY HUNGRY."
emacs,2y469e,rsenna,1 point,Sat Mar 7 00:10:18 2015 UTC,"I learned it this way:  C-x 2 - ""divide screen space by 2""  C-x 1 - ""/1""  C-x 0 - ""division by zero"" :)"
emacs,2y469e,Huperprogeny,-1,Sat Mar 7 04:37:54 2015 UTC,"The difference between ""killing"" and ""deleting"" is that ""killed"" text can be reinserted (at any position), whereas ""deleted"" things cannot be reinserted in this way (you can, however, undo a deletion--see below). Reinsertion of killed text is called ""yanking"".   Uh, yeah. Welcome to 2015, Stallman. We call it cutting and pasting, not killing and yanking. I'm new to Emacs and a lot of the time I feel like it was made by people living on a different planet.  Edit: Wow, the tutorial even points out that ""some other editors"" call it cutting and pasting. What, you mean like every single piece of software that's come out after the dinosaur age? This weird terminology's gone from quirky to stubborn design."
emacs,2y39pq,chrisdoner,3,Fri Mar 6 01:37:04 2015 UTC,"But org-mode already has inbuilt templates, http://orgmode.org/manual/Easy-Templates.html. You can even add your own templates.   Update I see, your elisp allows wrapping a region with the begin, end too. Neat!"
emacs,2y39pq,kaushalmodi,1 point,Fri Mar 6 04:34:39 2015 UTC,"yep.   For example, to create a source block, type:  <s   Then press tab."
emacs,2y39pq,zinver,1 point,Fri Mar 6 07:06:58 2015 UTC,"They really should advertise this more. org keybindings are neat, and then, and having to remember a slightly complex syntax for blocks feels like a paradoxical burden."
emacs,2y39pq,agumonkey,1 point,Sat Mar 7 07:28:55 2015 UTC,"I think there's just this and 'speedkeys', that add 'strange' keybinds.  Appart from these 2 things I guess you are safe. :)"
emacs,2y39pq,rgrau,1 point,Tue Mar 10 09:39:27 2015 UTC,This is awesome. Thanks for sharing! :)
emacs,2y236n,drivezero,3,Thu Mar 5 20:09:05 2015 UTC,"Oh, a question I can answer. For completeness, what version of Emacs are you using? I'm on Emacs 24.4 and the same version of everything you've got and it's working as expected for me. Ensure that you only have one client connected with list-skewer-clients.  What sort of page are you getting this error on? Are you getting this error when connected to the ""demo"" page (run-skewer)? If it's your own page, some security-related header or setting may be forcing Skewer to evaluate expressions in strict mode (not useful), which may lead to this sort of error message. Skewer operates within the normal page context, so it's under the normal restrictions and some security features may cripple it (example: try Skewering github.com).  Finally, if you've got skewer-mode 20151215.1525 please share it with me because that would save me a lot of effort! :-)"
emacs,2y236n,skeeto,2,Thu Mar 5 22:58:35 2015 UTC,"Thanks for the help.  I'm using 24.4.1. When I use list-skewer-clients  under User Agent on one line it lists: Mozilla, Gecko, Firefox and Iceweasel.  I'm using the demo page.  Ha, it must be my future release that's causing the problem! Some kind of spacetime continuum thing..."
emacs,2y236n,skeeto,1 point,Fri Mar 6 00:31:52 2015 UTC,"Hmm, I'm out of ideas then. If you figure out how to make the error happen reliably/repeatably then please show me."
emacs,2y236n,skeeto,2,Fri Mar 6 14:09:01 2015 UTC,"Skewer is working perfectly. I was simply using it wrong. I wasn't using C-x C-e for each line, or using C-M-x or C-c C-z when dealing with multiple lines of code. Sorry for the misunderstanding."
emacs,2y236n,skeeto,2,Mon Mar 9 16:32:09 2015 UTC,"Ah, everything makes sense now. I'm glad you figured it out! I hope you find it as useful as I have."
emacs,2y236n,simtel20,1 point,Tue Mar 10 00:39:48 2015 UTC,This is what the error looks like:    I've gotten the same error using Emacs with OSX and in VirtualBox using Debian. I changed my browser from Iceweasel to Chromium to see if that would change anything but I get the same error message.
emacs,2y1b3a,anatolya,3,Thu Mar 5 16:43:11 2015 UTC,"I tried starting emacs with a different HOME variable set to an empty folder, and it sorta works, except that it starts with an empty home so none of my GTK+ font settings, themes or locally installed fonts etc. are available. It is not a bad compromise but I would prefer to use a more elegant solution if there is one."
emacs,2y1b3a,zeRusski,3,Thu Mar 5 16:49:49 2015 UTC,on a Mac: open -a Emacs24.app -n --args -q -l ~/emacs.candidate/init.el  otherwise: emacs -q -l ~/emacs.candidate/init.el
emacs,2y1b3a,zeRusski,1 point,Thu Mar 5 17:21:23 2015 UTC,"Thanks. Looked a bit more and this details that approach. It's not a smooth sailing but it looks promising, I'll try it."
emacs,2y1b3a,instant_sunshine,1 point,Thu Mar 5 17:36:48 2015 UTC,this way u can run multiple emaxen simultaneously each off of its own config
emacs,2y1b3a,myeffort,1 point,Thu Mar 5 18:19:37 2015 UTC,I tried it few minutes ago using the configuration in the above link and it's better than I expected. Thanks!
emacs,2y1b3a,chrispoole,5,Thu Mar 5 18:27:23 2015 UTC,"Please note, any references to user-emacs-directory will not resolve to the new folder.  It's quite possible that this will bork some init scripts.  To get around this you'd need to add --eval='(setq user-emacs-directory ""~/dot.emacs"")' eg. on OS X  open -a Emacs -n --args -q --eval='(setq user-emacs-directory ""~/dot.emacs"")'  -l ~/dot.emacs/init.el    Or just:  emacs -q --eval='(setq user-emacs-directory ""~/dot.emacs"")'  -l ~/dot.emacs/init.el    Note the eval will run before the -l load file, so you can use this method to patch most other holes too."
emacs,2y1b3a,chrispoole,1 point,Fri Mar 6 02:06:41 2015 UTC,It's even better.  Thanks!
emacs,2y1b3a,freeduck,2,Fri Mar 6 17:27:43 2015 UTC,You can run emacs -q to have it ignore your init and custom files.  You can have your init.el dispatch control to other file depending on environment or command-line-args.   In latter case you might also need to update variables user-emacs-directory and/or custom-file if you want it to completely mimic original .emacs.d.
emacs,2y1b3a,z27,1 point,Thu Mar 5 17:21:03 2015 UTC,"The latter one is like this right? It sounds promising, I'll try it. Thanks."
emacs,2y1b3a,nautola,2,Thu Mar 5 17:34:51 2015 UTC,"In addition to what's already been said, if you're on a Unix machine, look into stow. For example, I have a directory somewhere on my machine:  somedir/emacs/.emacs.d   In directory somedir I issue   stow -t$HOME emacs   and the contents of the emacs directory gets symlinked to my home directory."
emacs,2y1b3a,username223,2,Thu Mar 5 18:21:57 2015 UTC,thanks. stow is nice but still can't use parallel profiles simultaneously. much better than manual symlinking though.
emacs,2y1b3a,socratesthefoolish,1 point,Thu Mar 5 18:28:30 2015 UTC,"Ah, sorry, missed the parallel part of your question."
emacs,2xzt47,shackra,2,Thu Mar 5 05:36:25 2015 UTC,Maybe #+BEGIN_SRC ?  With htmlize it should export in color.
emacs,2xzt47,simonced,1 point,Thu Mar 5 08:48:58 2015 UTC,"I don't want to use htmlize, I want the content of #+BEGIN_SRC wrapped as-is into <pre><code> tags when exporting to HTML.."
emacs,2xzt47,simonced,1 point,Thu Mar 5 17:51:20 2015 UTC,Then use  : some code   It'll be in a pre code tags block.
emacs,2xzt47,trezor2,0,Thu Mar 5 22:13:02 2015 UTC,That was my initial thought as well. But how else would you write code-blocks in org?
emacs,2xzt47,pefbecOyz6,1 point,Thu Mar 5 10:16:58 2015 UTC,"Here it is, which is why you got downvoted initially (by the rtfm crowd)?  http://orgmode.org/manual/Quoting-HTML-tags.html  so, either   #+HTML: Literal HTML code for export   or   #+BEGIN_HTML  All lines between these markers are exported literally  #+END_HTML"
emacs,2xzt47,redguardtoo,1 point,Thu Mar 5 16:00:40 2015 UTC,"No, I want the content of #+BEGIN_SRC wrapped as-is into <pre><code> tags when exporting to HTML."
emacs,2xw0cr,curious-scribbler,29,Wed Mar 4 08:21:31 2015 UTC,"Beware of starting with complex configs and with many third party packages. The creation and maintenance is time consuming and a distraction to productive work.  I started like that back in 2000-2002. Over the years many of the packages I used became unmaintained. I also realized that much of the elisp I'd cooked up was unnecessary, or had become unnecessary and that I'd be better off using standard features.  Some third-party packages have such a following that they're bound to be supported 10 years from now (e.g. Helm, Icicles, Company). Others not so much.  When you're repeatedly involved in a task (e.g. C programming), that's when it's best to do the config. Don't do too much in advance without trying things out per the defaults and finding your own trouble-spots.  It's worth learning the basic editing features and Dired in some detail. It's also worth using an Emacs based email system because it gives you a lot more practice with the keybindings than you would have otherwise."
emacs,2xw0cr,RobThorpe,15,Wed Mar 4 15:06:25 2015 UTC,"Rob, I needed this. I have spent more time learning about emacs than actually using emacs. I just deleted all the packages because I downloaded them and had too many to know what the hell the package was for. That is something I'd advise others not to do.  I am going to take your word and stick to the basic and build it up only when needed, the ideal setup is going to take some good time."
emacs,2xw0cr,pimiddy,3,Wed Mar 4 16:14:27 2015 UTC,"I'm curious about the mail system part. A few months ago I tried using gnus at work (we are using IMAP), but it didn't really work well (maybe simple configuration issues?) and I didn't find a good tutorial getting me started. Is there something better than gnus, or at least a better guide on how to use it?"
emacs,2xw0cr,RobThorpe,3,Wed Mar 4 22:52:53 2015 UTC,"I don't think I can help you much. At the place I work we all have to use Outlook. I don't really care because I don't get one or two emails per day.  At home I get lots of email and I use Rmail. If you want to use that then read this: http://lists.gnu.org/archive/html/help-gnu-emacs/2015-02/msg00337.html . I've heard that GNUs and Mu4e are better, certainly with Rmail you can't use IMAP as it's intended to be used. But, I'm accustomed to Rmail so I'm sticking with it."
emacs,2xw0cr,bitbloc,1 point,Wed Mar 4 23:08:26 2015 UTC,How do you read HTML email in RMAIL?
emacs,2xw0cr,RobThorpe,1 point,Mon Mar 16 17:50:32 2015 UTC,How do you read HTML email in RMAIL?   I save the files and open them in a browser. I don't get much HTML email.
emacs,2xw0cr,angelic_sedition,2,Mon Mar 16 19:47:40 2015 UTC,"You may want to try wanderlust. I've been using mu4e with isync myself, but if you can't or don't want to use a maildir, you're out of luck there."
emacs,2xw0cr,---R,3,Thu Mar 5 06:40:37 2015 UTC,Some third-party ... [as] Company ...   I believe it will be bundled with Emacs 25.
emacs,2xw0cr,alecigne,27,Thu Mar 5 09:59:16 2015 UTC,"Dear me from the past,  Seriously: use helm. No, ido is not better. You didn't read the helm manual correctly.  Yours sincerely"
emacs,2xw0cr,jplindstrom,9,Wed Mar 4 09:26:10 2015 UTC,"You just confused the shit out of your younger self; in the past, Helm was called Anything.  Also, the time travel probably didn't help."
emacs,2xw0cr,vermiculus,3,Thu Mar 5 12:52:43 2015 UTC,You just confused the shit out of your younger self   this isn't getting the attention it deserves XD
emacs,2xw0cr,ReneFroger,4,Thu Mar 5 13:27:34 2015 UTC,In what way is helm better than ido?
emacs,2xw0cr,tuhdo,14,Wed Mar 4 09:45:12 2015 UTC,To get an idea about the possibilities of Helm.
emacs,2xw0cr,alecigne,18,Wed Mar 4 10:08:43 2015 UTC,"See my guide to see why. And if you want to manage something like many of ten thousands of items (i.e. 30k, 50k, 80k) without Emacs lag or hanging, there's nothing faster than Helm at the moment."
emacs,2xw0cr,abo-abo,13,Wed Mar 4 10:14:44 2015 UTC,"Yes, and to be honest, when I wrote ""you didn't read the manual correctly"", I was thinking about your guide. It really made me realize that helm is a real paradigm shift."
emacs,2xw0cr,tuhdo,6,Wed Mar 4 10:36:55 2015 UTC,"Before you guys mentioned the/your guide, I was at it, since I learnt much about customization from your guide, I remembered coming across your extensive guide on helm."
emacs,2xw0cr,kcin,1 point,Wed Mar 4 15:07:47 2015 UTC,"there's nothing faster than Helm at the moment.   This is simply not true: ido is just as fast for what it does.  I'm getting no lag for flx-ido-mode (which is even more time-consuming than basic ido) with 20000 candidates.  For 80000 candidates, the lag is the same with helm as with ido, the difference is that helm updates the entered text (while there are no candidates visible) through the lag, while ido waits for the actual candidates to show up before it updates the text."
emacs,2xw0cr,Ironballs,1 point,Sun Mar 8 09:38:26 2015 UTC,"I'm getting no lag for flx-ido-mode (which is even more time-consuming than basic ido) with 20000 candidates.   Have you tried anything beyond that? i.e. something with 40k files. And the lag happens when you start editing your current matching pattern rather than inserting new character to narrow down further. For example, you are currently having ""document"" as a pattern; now, move point and delete some characters, or insert new characters in the middle of your old pattern. It starts lagging and soon hang Emacs. I've just tried Ido on Linux source tree and it locks Emacs as soon as I typed a few characters.   For 80000 candidates, the lag is the same with helm as with ido, the difference is that helm updates the entered text (while there are no candidates visible) through the lag, while ido waits for the actual candidates to show up before it updates the text.   I had no lag, even with fuzzy matching. I tested it by running setting projectile-require-project-root to nil, and then wait for Projectile to collect all the files. It took a while (around 85k files), but once it's done, I can narrow every thing just fine, even with fuzzy matching, no significant lag that can be perceived. It's possible that you did not limit the number of candidates in Helm (as you said in some other thread). I limited it to 100 for fuzzy matching. At least, I can have 100 candidates and be able to scroll up/down. With Ido, at best I have 10-20 candidates and no page scrolling, and still lagginng. I cannot even mark and open two or more files at once. I open multiple files frequently and hate to enter file paths all over again to open it."
emacs,2xw0cr,tuhdo,5,Sun Mar 8 11:38:37 2015 UTC,"Helm's vertical presentation can be more useful if you have many items to choose from.  Helm has hundreds of completion sources to choose from (Wikipedia completion, Google suggestions, helm-swoop, etc. etc.)."
emacs,2xw0cr,EatMoreCrisps,11,Wed Mar 4 10:04:19 2015 UTC,"flx-ido has excellent fuzzy matching, and ido-vertical makes it vertical.  Though it isn't helm, it's quite close and sufficient when you're using projectile."
emacs,2xw0cr,tuhdo,3,Wed Mar 4 10:17:21 2015 UTC,"But to display a large collection of items, you won't want a minibuffer, but a proper buffer. And when you want to perform an action on two or more items (i.e. open two or more files in one go; I frequently do this to open files). It's impossible with Ido."
emacs,2xw0cr,EatMoreCrisps,5,Wed Mar 4 10:23:13 2015 UTC,"To be honest, I wish helm had the option to use the minibuffer.  I don't get what's better about putting it in a buffer.  If I'm opening a file in my rightmost of 3 windows, I'm typing on the bottom left of the screen, and the results are appearing on the right.  Perhaps there's a technical reason why you can't select more than one item in the minibuffer (?), but ido-vertical shows that you can display a vertical list.  — I'm currently on about week 3 of struggling with helm from ido.  So far I find the frustration and clunkyness bothering me much more than I'm appreciating how it's more powerful and extensive.  Much of that is getting used to it, so I'm persevering, for now at least."
emacs,2xw0cr,tuhdo,2,Wed Mar 4 14:15:37 2015 UTC,"Set helm-split-window-in-side-p to true and Helm won't open in other window anymore. It will always reside in current window, where your cursor is."
emacs,2xw0cr,tuhdo,3,Wed Mar 4 16:39:21 2015 UTC,"I already have that - I was talking about the fact I'm typing in the minibuffer (cursor at bottom left) but the response is happening 'in' the window I'm working on, which is often on the opposite side of my luxurious 30"" screen (emacs maximized, as it always is for me)."
emacs,2xw0cr,EatMoreCrisps,4,Wed Mar 4 16:43:56 2015 UTC,"Well you could solve this problem by using popwin and force Helm window always at the bottom. Personally, I have no problem entering pattern while occasionally look at the minibuffer."
emacs,2xw0cr,kcin,2,Wed Mar 4 16:48:01 2015 UTC,"30"" screen   If you have a screen this large or even larger, isn't it getting inconvenient to travel your eyes back and forth between top buffers and minibuffer? i.e. you have horizontal split and the upper half consits a few buffers. The larger the screen is, I think the more cumbersome to make use of the minibuffer, i.e. think one day 4k monitor with 40"" screen becomes the norm for programmers."
emacs,2xw0cr,Ironballs,0,Thu Mar 5 04:22:59 2015 UTC,"I pretty much always use full height for buffers, even at this screen size."
emacs,2xw0cr,abo-abo,0,Thu Mar 5 12:21:51 2015 UTC,"I'm currently on about week 3 of struggling with helm from ido.   You can use both, you know. Ido for some things and helm for swoop and other things which helm does better.  They are not mutually exclusive."
emacs,2xw0cr,vermiculus,0,Wed Mar 4 14:49:47 2015 UTC,"Oh shit. Be right back, installing helm."
emacs,2xw0cr,kcin,4,Wed Mar 4 10:37:39 2015 UTC,"helm is good at certain things, ido is good at other things.  When you need something non-intrusive, ido is a clear winner. Also, currently flx-ido is better than helm at fuzzy matching."
emacs,2xw0cr,vermiculus,4,Wed Mar 4 13:58:26 2015 UTC,"Whole-heartedly agree. Having discovered flx-ido well before Helm, I was eager to replace Ido with Helm in everything. I found that I had come to truly rely on Ido's file finding (with flx-ido's enhancement) for my day-to-day navigation.  On the flip side, when dealing with a project under version control, Helm seems a much more natural, more fluid choice when paired with Projectile.  Moral of the story: feel free to pick-and-choose. Don't feel tied to one framework – use what you find most comfortable for the task in front of you."
emacs,2xw0cr,kcin,1 point,Thu Mar 5 05:47:23 2015 UTC,Helm also gained flex matching recently.
emacs,2xw0cr,vermiculus,2,Thu Mar 5 15:14:38 2015 UTC,"I've seen helm-M-x-fuzzy-match, for example, but it isn't the same as flx-ido. For example, under flx-ido, msi would give me Magit-Stage-Item as the first suggestion, however Helm will give me traMp-verSIoninstead."
emacs,2xw0cr,kcin,1 point,Fri Mar 6 00:07:41 2015 UTC,"It just a difference in ordering, isn't it? You may want to suggest to the Helm developer to add an option to prefer initial matches when ordering fuzzy completions."
emacs,2xw0cr,alecigne,2,Fri Mar 6 05:16:22 2015 UTC,"Completion systems often work by 'scoring' candidates – this is how they're ordered. There's a non-trivial algorithm behind flx that takes significant time/space. Since I keep my directory structure fairly organized (I sometimes have hundreds of entries, but never thousands), this complexity has a minimal run-time impact. However, adapting this to Helm (I think) means restructuring how flx works to support it. The flx developer is working on support, but I'm not expecting it any time soon."
emacs,2xw0cr,vermiculus,3,Fri Mar 6 12:29:39 2015 UTC,"The flx developer is working on support, but I'm not expecting it any time soon.   Towards the end of this enhancement request the comments say there is some recent development, so we'll see:  https://github.com/emacs-helm/helm/issues/145"
emacs,2xw0cr,rranelli,2,Fri Mar 6 13:23:28 2015 UTC,"I will look into that, but I was way more seduced by the ""out of order matching"" capabilities of Helm than by fuzzy matching (I wasn't using it much with Ido)."
emacs,2xw0cr,alecigne,1 point,Wed Mar 4 14:52:12 2015 UTC,out of order matching   Can you explain that?
emacs,2xw0cr,tuhdo,3,Thu Mar 5 05:43:57 2015 UTC,that probably means you can match package-refresh-contents by writting refresh package in helm's buffer.
emacs,2xw0cr,vermiculus,2,Thu Mar 5 05:56:38 2015 UTC,"Yes. Maybe there is something like that with ido but I can't remember it. I like, when I realize at the last moment that there will be too much results, to just type space and complete my search pattern with something that is before the match. It is especially nice for files with the same name. I think it doesn't work with helm-locate (maybe /u/tuhdo could confirm?), but it does at least with helm-projectile."
emacs,2xw0cr,kcin,3,Thu Mar 5 09:26:06 2015 UTC,"For helm-locate, you can't use normal Helm matching but patterns that can be accepted by the locate program itself."
emacs,2xw0cr,instant_sunshine,2,Thu Mar 5 10:40:52 2015 UTC,"Ah, yes that part is nifty."
emacs,2xw0cr,devslashnull,2,Thu Mar 5 13:19:00 2015 UTC,"helm is good at certain things, ido is good at other things.   And you can use both at the same time for different things if that's what you want."
emacs,2xw0cr,Imxset21,1 point,Wed Mar 4 14:50:39 2015 UTC,"Thank you for saying that, I dislike the absolutism of the helm-zealots.  There should be some sort of parable along the lines of...  Use what feels good to you, but never assume what feels good to you, feels good to anyone else."
emacs,2xw0cr,tty-tourist,1 point,Sun Mar 8 02:54:17 2015 UTC,"So very true, I hung onto ido until recently and I'm sorry I didn't make the switch sooner."
emacs,2xw0cr,vermiculus,13,Wed Mar 4 10:36:48 2015 UTC,I would have started using org-mode sooner.
emacs,2xw0cr,tty-tourist,5,Wed Mar 4 09:51:56 2015 UTC,"Totally agree. Org-mode was my gateway drug. Started using it on my GUI-less typewriter laptop for project planning and screenwriting (with fountain-mode in src blocks, org-mode is the best program for screenwriting I ever came across.) Anyways, today I wrote my first function that's not a total M-w C-y and who knows what tomorrow will bring. It all started with being awestruck by what org-mode can do."
emacs,2xw0cr,tty-tourist,5,Wed Mar 4 21:17:22 2015 UTC,not a total M-w C-y   http://i.imgur.com/XS5LK.gif
emacs,2xw0cr,zinver,1 point,Thu Mar 5 05:57:11 2015 UTC,"Hey. I came to emacs for org-mode and then found fountain-mode (I am still getting use to it, Final Draft view is stuck in my head).   I used fountain-mode, but probably didn't use it properly. Does it not align everything as we write? Or does it take care of the formatting once the file is exported? Could you share your screenwriting experience on emacs?"
emacs,2xw0cr,tty-tourist,5,Thu Mar 5 03:37:32 2015 UTC,"Yes, fountain-mode aligns and highlights as you write, as long as you use some basic and pretty intuitive conventions. This is it, really. The gist of it is that you just write and fountain does the formatting.  You can use fountain in any editor but fountain-mode adds some nice features besides highlighting, including folding of scenes for better overview and structure editing. See all features by hitting C-h m when you're in fountain-mode.  After installation, remember to add this to your init to use fountain-mode when editing any .fountain file:  (add-to-list 'auto-mode-alist '(""\\.fountain$"" . fountain-mode))   Also check out the minor mode Olivetti (from Melpa) to get a nice writing environment with a text body of 68 chars width (or whatever you prefer) centered in the window.  Normally I start brainstorming and outlining in org-mode and export the text that is on its way to becoming a screenplay when the advantages of using the fountain-mode features exceed the advantages of having the whole project in a single .org file. But it pains me every time an .org file is split - and I've found a way to avoid it:  Fountain can be contained within a source block in the org-file and it can be edited with fountain-mode by pressing C-c ' which will open a buffer a new buffer. C-c ' in that buffer will save the edit to the org buffer and you will return to that.  An example:  #+Title: My great shark movie * Characters * Outline * Financing * Notes from Mike * Screenplay ** 1. draft #+BEGIN_SRC fountain EXT. BEACH  SAILOR BOB (60-ish) gazes across the ocean.  SAILOR BOB (flabbergastedly) I'll be damned! Floating triangles!  #+END_SRC   To try for yourself, copy the text above to an org-mode buffer and hit C-c ' within the source block (presuming you have fountain-mode installed.)  If you decide to go ahead with this, there are a few variables to look into. Here are my:  ;;; ... settings for working with (fountain) source blocks in org. ;;; Prevent org from messing with indentation of the source text. (setq org-src-preserve-indentation t) (setq org-edit-src-content-indentation 0)  ;;; Open the buffer for editing fountain in another window. (setq org-src-window-setup (quote current-window)  ;;; Prevent a message in the edit buffer from being shown. ;;; Before using this, you should memorize these two binds: ;;; C-c '     : keep edits and return to org buffer ;;; C-c C-k   : cancel edits and return to org buffer (setq org-edit-src-persistent-message nil)  ;;; Save edits in the fountain buffer to the org buffer after x sec (setq org-edit-src-auto-save-idle-delay 200)"
emacs,2xw0cr,zinver,1 point,Thu Mar 5 10:13:37 2015 UTC,"Woah. Thanks tty, I didn't know any of this. I started using fountain mode and then hit a wall because it didn't behave like I had expected, but now, now I am convinced and once again, thanks for the detailed explanation, once I copied the text and hit C-c' it made sense.   Would it be okay if I PM you sometime later with any questions that I might have? And while we are at it, I'll surely check out Olivetti, however I also have centered mode and writeroom mode, and also darkroom mode to choose from. What other packages do you use to write prose?"
emacs,2xw0cr,tty-tourist,2,Thu Mar 5 10:30:09 2015 UTC,"Glad I could help. Feel free to PM, or just asks here if the answer could benefit other screenwriter-slash-emacs-users (if they're out there.)   Beside fountain and org (in visual-line-mode) I don't use any other packages for writing prose. Guess it's hard to find stuff you can't do in org.  On a side note, for writing prose I have set up a typewriter laptop with no gui, just linux console and emacs. I can recommend that!"
emacs,2xw0cr,zinver,1 point,Thu Mar 5 11:44:26 2015 UTC,Started using it on my GUI-less typewriter laptop   You know you can use emacs as a pseudo window manager right?  http://www.howardism.org/Technical/Emacs/new-window-manager.html
emacs,2xw0cr,tty-tourist,2,Thu Mar 5 08:29:17 2015 UTC,"I have heard about people using 'exec emacs' in the their .xinitrc but I've never been quite sure what the result would be - so thanks for this.  But in order for this to work you need xorg, right? That sorta defies the whole purpose of my no-x laptop: Making it impossible for myself to fire up a graphical browser ..."
emacs,2xw0cr,zinver,1 point,Thu Mar 5 12:22:28 2015 UTC,Just make it really hard start a browser. :-)  As in remove it. sudo apt-get remove firefox
emacs,2xw0cr,tty-tourist,1 point,Thu Mar 5 13:23:03 2015 UTC,But the browser will only be an apt-get install away. I don't have that kind of willpower.
emacs,2xw0cr,instant_sunshine,2,Thu Mar 5 14:10:41 2015 UTC,Just make me the root user.  Send me a PM with the password and DYNDNS name. :-p
emacs,2xw0cr,KDallas_Multipass,2,Thu Mar 5 14:29:53 2015 UTC,"I would be PM'ing you constantly: ""Wut, gimme some browse, zinver my man, just 1 last time 4 the redditz ..."""
emacs,2xw0cr,instant_sunshine,2,Thu Mar 5 14:47:09 2015 UTC,"The browser is an extended gutter and the gutter is full of blood and when the drains finally scab over, all the vermin will drown. The accumulated filth of all their sex and murder will foam up about their waists and all the redditors and /u/tty-tourist will look up and shout ""Save us!""... and I'll whisper ""no."""
emacs,2xw0cr,alpheus,1 point,Thu Mar 5 20:50:48 2015 UTC,Exactly!
emacs,2xw0cr,tuhdo,13,Thu Mar 5 21:46:29 2015 UTC,"Find out about M-x and calling interactive much sooner (seriously, I used Emacs on and off since about 1995 without even knowing/caring about it, I probably discovered it in about 2004 when I started using Emacs as a general purpose text editor, on non-remote Linux machines.)  Then learn Lisp much sooner. (I didn't bother until 2009. Quite frankly it changed everything about computing for me.)  Edit: ""calling interactive"" would be better if I said calling (interactive) defuns, or maybe that'd be worse? (I think it would reveal what's actually going on and why the command can be called.  I should probably have said ""calling command"" or ""running commands"".  I also left out the important bit,  M-x with TAB completion really opened up the huge wealth of commands and features to me."
emacs,2xw0cr,instant_sunshine,3,Wed Mar 4 08:36:39 2015 UTC,calling interactive much sooner   do you mean M-: for elisp in the minibuffer?
emacs,2xw0cr,kaushalmodi,5,Wed Mar 4 08:52:28 2015 UTC,"No, I mean using M-x to run a command interactively.  My use of Emacs prior to that consisted of jumping onto a remote box or a machine I used infrequently in a server room (some Ultrix and HP-UX boxes and others), and starting Emacs as an exotic Less replacement, and performing trivial edits.  Full extent of my Emacs command use from 1995 - 2004 was basically...  C-x C-f  C-s / C-r  C-x k  M-%  M-C-%   and a few dired things (% d etc.)  I wasn't even aware of M-x ... let alone M-: or eval-ing Lisp.    Mind you, there was no other people on my sites who ever use Emacs at all, and I was using it as bare minimum. Little did I know the editors I was using on Windows (IBM Personal Edit and later UltraEdit) were vastly inferior.  I'm not sure if some of the features I take for granted were available way back then though either, it was 15-20 years ago after all.  That said a lot of excellent features / packages didn't even exist until 2012, and it's since then that Emacs has really exploded, ELPA/Package.el and MELPA have completely revolutionised things.  Having been deep into Lisp and Emacs Lisp since 2009 has of course coloured my perspective somewhat and biased me into believing Emacs to be something of a phenomenon."
emacs,2xw0cr,kaushalmodi,1 point,Wed Mar 4 09:46:27 2015 UTC,"Does M-: have an advantage over typing lisp in the scratch buffer and evaluating it? Other than not having to switch buffers, I mean."
emacs,2xw0cr,instant_sunshine,1 point,Wed Mar 4 15:24:16 2015 UTC,"Yes. You can use any buffer as your data to test your function that operate on certain type of text i.e. You can use any buffer to test your regexp that you would later put into your code, but in a more generic way. Regexp is just an example. You can do even more fancy stuffs."
emacs,2xw0cr,KDallas_Multipass,1 point,Wed Mar 4 16:43:04 2015 UTC,"It's better only if you want to quickly execute a one liner.  I personally use a function called eval-and-replace.  Context shift reduction is always worth it IMO  Scratch is always the best place to whip up a new defun on the fly though.  Edit: eval-and-replace  (defun eval-and-replace ()   ""Replace the preceding sexp with its value.""   (interactive)   (backward-kill-sexp)   (condition-case nil       (insert (format ""%s"" (eval (read (current-kill 0)))))     (error (message ""Invalid expression"")            (insert (current-kill 0)))))"
emacs,2xw0cr,wadcann,1 point,Thu Mar 5 05:49:46 2015 UTC,ELI 5 ?
emacs,2xw0cr,wadcann,6,Wed Mar 4 09:48:43 2015 UTC,"Am I the only one who was scratching the head wondering what is ""ELisp Interpreter 5""?   For anyone else who was as ignorant as I was: ELI 5 -> ""Explain Like I'm 5"""
emacs,2xw0cr,autowikibot,1 point,Wed Mar 4 15:19:54 2015 UTC,"Kaushal, I am laughing my guts out. Elisp interpreter 5 ? Lord!  Btw, your config is pretty neat (I remember from your reply to my last post here) but too complex for me at the moment."
emacs,2xw0cr,ax_reddit,1 point,Wed Mar 4 16:11:26 2015 UTC,"Thanks! Any person's emacs init is usually always complex to other person. Your init will bloom around your needs and how you want your emacs to look and behave, and as you learn new things about elisp, discover your mistakes and discover new packages. By now my init has 700+ commits and I want to keep on improving it :)"
emacs,2xw0cr,ginopascali,1 point,Wed Mar 4 19:56:21 2015 UTC,"And I thought 611 commits was a lot, https://github.com/ocodo/.emacs.d"
emacs,2xw0cr,flarkis,1 point,Thu Mar 5 06:57:28 2015 UTC,"scrib, I was asking the parent if the feature he was talking about was the feature that lets you type elisp in the minibuffer and evaluate code rather quickly without leaving your buffers to hop into a scratch buffer to eval.  In hindsight this probably isn't good enough for a 5 yo, but...  I was trying to figure out what he meant by calling interactive.  You can use M-: to evaluate emacs lisp code without needing to leave the buffers you're looking at."
emacs,2xw0cr,Woodstock46,1 point,Thu Mar 5 04:33:21 2015 UTC,"Thanks for the explanation. This is good enough, but a little too much for my 5 year old brain :-) Thanks"
emacs,2xw0cr,StudentRadical,18,Thu Mar 5 05:15:45 2015 UTC,"Hmm.  Well, you're talking about the initial learning portion and complaining that the amount of stuff you're hitting is overwhelming, but I think that most people, including me, want to give a summary of all of the overall ""wish I'd known it first"" stuff, even for more-advanced users.  Here are the bits that I'd suggest for a new user:   Try to stick with vanilla emacs where possible.  If you go to emacswiki, it's a list of every irritation that people have had, and it makes it sound like emacs is full of terrible limitations and you need to have Joe's Cool Package.  Broadly-speaking, the really-important stuff is in emacs.  If you've already tried the vanilla emacs version of a feature and decided that it's insufficient, then go off trying all the add-ons.  A lot of the add-ons are a bit difficult to appreciate and trouble-shoot if you have zero emacs familiarity.  Projectile and magit will be frequently-recommended external packages on here, and I do use them and they're nice tools for software development.  But you'll want to learn git-without-magit first anyway, and that itself is a pretty large thing to learn. Learn the help system.  This is one of the first things to do, and helps a lot in not leaving you clueless.  I waited too long to do this.  Important: C-h k (""what does this key do""), C-h m (simple mode help), C-h b (every keybinding in the current mode), C-h w (what key is bound to this command), C-h a (what is the command named this).  To a lesser degree, C-h v (what is the variable named this), and C-h f (what is the function named this).  Know that, and it makes learning everything else a lot easier. You aren't going to learn everything immediately.  I thought ""oh, it might take a year of use or two"" when I started out.  It's going to take more just take a year to ""learn emacs"".  I still don't use things that lots of people say are ""must use"", and I've been banging away on emacs for most of my day for almost twenty years.  Don't worry about it; a slowly-expanding repertoire is just part of emacs use. If you can deal with it, I'd advise against alternative keybinding schemes, like evil (keep in mind that I wasn't coming to emacs from vim-land) or cua-mode.  They might work fine with the basic environment, but other packages are going to follow standard emacs conventions.  Remember that a lot of people have been using the standard keybindings for a long time, and have smoothed out the quirks: usually, they aren't as insane as they may seem off-the-bat. I'm going to disagree with others on elisp.  Don't try to learn it right away.  I wish that I'd learned it sooner than I did, but not to the point of being able to write code during my first year or so on emacs.  There is enough of a workflow to jam into your head without learning the programming language as well.  Though being able to read the source of everything makes for a hell of a help function, when you do pick it up.   And here for the rest, including not just-starting-on-emacs bits:   Dired is useful, and it took me far too long to start using it.  I do think that it is one of the packages that deserves some changes to its defaults: its out-of-box state (e.g. expending most screen space showing file sizes instead of filenames, limited highlighting, doesn't default to using a dired in the other window as a target for renames, etc) made it a bit uncomfortable to use at first for me.  It's not something that needs to be learned to use emacs for other things, though. You are going to want to very-seriously-consider either swapping Caps Lock and Control or doing something similar.  I and many other people have picked up RSI, and we aren't particularly-fragile humans.  Control on a PC keyboard is in an absolutely-horrible place for the heavy use that emacs demands of it, and Caps Lock gets little use from most users. C-SPC to set mark and M-w to shove the region (area between point and mark) into the kill ring and C-w to kill the region into the kill ring are things that I use frequently, but took a long time to learn. Use registers.  The name was a bit off-putting, and I first glommed onto the somewhat-similar bookmarks feature.  Registers (both to save text, and to save several positions in a buffer during a session to jump back) have seen much more use from me than bookmarks. longlines mode for word wrap is dead.  I spent ages banging my face into it.  Don't use it.  Visual-line-mode is what you want. Depending upon your usage patterns, it may be valuable to be able to use emacs in a terminal.  If that is the case, avoid relying upon features that are not available in the terminal, like the fringe.  Then, when you need to use a box via ssh or similar, you aren't left unable to do work.  I kind of wish that there were a ""terminal-fringe"", where a keystroke could hide or show a one-column line of characters along the side, but I fear that the fringe has dedicated itself to be pixel-based. Org-mode gets a lot of buzz.  It really is nice, but I (and I suspect most people) use only a small subset of its functionality: I use it mostly as an outliner. I do not like gnus as a mail reader.  It is a newsreader that can be used as a mail reader, and is just IMHO infuriatingly sluggish, even after tweaking.  Lots of its functionality is designed for newsreader use, and I imagine that it's competent at that.  Probably the single biggest black hole of time I spent on emacs before throwing my hands up in disgust.  I use mu4e today, which I'm happy with (and which had a remarkably short time to come-up-to-speed)."
emacs,2xw0cr,fivehours,1 point,Wed Mar 4 17:35:07 2015 UTC,"This is good. I mean it, like really good. Thanks for your word. I am going to re-read it.    it may be valuable to be able to use emacs in a terminal.    What's that? I have zero programming knowledge."
emacs,2xw0cr,---R,3,Thu Mar 5 03:48:54 2015 UTC,"Emacs historically ran as a program in a world where only text terminals existed -- simple, stupid computers that could only show maybe a screen of 80 characters across by 24 charaters high.  You'd hook the text terminal up to a ""real"" computer, and software would run on a real computer.  While physical text terminals have pretty much gone the way of the dodo -- a fully-blown computer is so cheap that everyone has one -- a lot of software was written in this era, and a lot of things modeled around it.  Unix in particular has a lot of ties to this sort of environment.  In this sort of structure, a server will be running software -- a webserver, like Apache, or emacs, or some other software package, often for a number of different users.  No monitor is attached: the thing stands alone.  The end user will start a ""terminal emulator"" program on his desktop which acts as if it were one of the old text terminals above -- this might be gnome-terminal on Linux, or PuTTY on Windows, or any number of other packages.  These days, there's normally no physical serial line running from the desktop -- instead, the desktop and the server will both be connected to the Internet, and a program called ""ssh"" will be used to connect the terminal emulator to the server.  The user will then use software within a window that displays simply text.  For some users, this is a very important part of their workflow.  Unix sysadmins, a number of software developers, scientific computing people, and so forth normally have software that runs on a headless server somewhere, and so being able to comfortably edit text on a machine on the other side of the world it is important.  For other users, this is not important: if they will only ever be using emacs locally, they have the ability to let emacs run on their local computer and pop up windows and dialogs and so forth.  Emacs can run in both modes: if run in a terminal, it will use text characters.  If run locally, it still shows mostly text, but it can show images embedded in the window, use a feature called the ""fringe"" that puts a thin sidebar down the side of the window, use different font sizes, and do some other graphical things that can't be done in a text terminal.  If this doesn't mean a lot to you, chances are pretty good that you're okay with using emacs in a windowed environment, and you don't need to worry about sticking to a terminal environment."
emacs,2xw0cr,monotux,1 point,Thu Mar 5 05:06:20 2015 UTC,"VT100:       The VT100 is a video terminal, introduced in August 1978 by Digital Equipment Corporation (DEC). It was one of the first terminals to support ANSI escape codes for cursor control and other tasks, and added a number of extended codes for special features like controlling the LED lamps on the keyboard. This led to rapid uptake of the ANSI standard, becoming the de facto standard for terminal emulators.  The VT100s, especially the VT102, was extremely successful in the market, and made DEC the leading terminal vendor for some time. The VT100 series was replaced by the VT200 series starting in 1983, which proved just as successful. Ultimately, over six million terminals in the VT series would be sold, based largely on the success of the VT100s.     Image i - DEC VT100 terminal     Interesting: Vermont Route 100 | VT220 | MacTerminal   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
emacs,2xw0cr,alpheus,1 point,Thu Mar 5 05:07:53 2015 UTC,"That was some nice history lesson and a pretty good explanation too :-) Thanks for the extensive reply. I am sure, at the moment, I won't be using emacs in terminal mode, but now I know I can."
emacs,2xw0cr,Starlight100,7,Thu Mar 5 05:18:42 2015 UTC,"Not so many big points, more the something-new-step-by-step approach, because there is so much that Emacs provides, and it takes some time.   Trying to do everything with text in Emacs. Not using Emacs and Sublime, Notepad++. Switch to other editors if there is a reasonable specific - ehm - reason (like using an IDE in company context). Otherwise it slows down your insight look into Emacs. Using melpa earlier. I don't even know how long it exists but it was wonderful when I used it. It really opens my mind that this software is very lively. Not being so shy against lisp. There are nice sites around for small functions (like mark a word and send it to a web-search)."
emacs,2xw0cr,fivehours,7,Wed Mar 4 09:30:09 2015 UTC,"use version control with it for configuration files from the beginning (in particular .emacs, .gnus)."
emacs,2xw0cr,vermiculus,6,Wed Mar 4 10:07:00 2015 UTC,"Honestly, I'm happy there is no record of my early config."
emacs,2xw0cr,kcin,1 point,Wed Mar 4 11:35:00 2015 UTC,I hear you there. I eventually declared .emacs.d bankruptcy and my start over I put in git.
emacs,2xw0cr,sparafucilee,6,Thu Mar 5 17:01:47 2015 UTC,Probably would have spent a bit everyday to learn more about Elisp - I'm useless at it.
emacs,2xw0cr,leonardoe,3,Wed Mar 4 10:40:54 2015 UTC,I wouldn't have given up twice and let so many years go by before really deciding to get the hang of it.
emacs,2xw0cr,thomasfr,1 point,Wed Mar 4 10:25:41 2015 UTC,"This was me also - spent forever just trying to set the tab indent to 2 characters and said forget it. Came back a few years later when I needed to do lots of text manipulation, and now it's my favorite thing to tinker with."
emacs,2xw0cr,johnfredcee,4,Fri Mar 6 21:16:49 2015 UTC,"Read (info ""(eintr)"") earlier. Dumped CUA earlier on. Learned about gnus-posting-styles, as well as the headers X-Message-SMTP-Method and GCC earlier, instead of all these wacko hacks for multiple emails that googles tell me about..."
emacs,2xw0cr,alecigne,1 point,Wed Mar 4 10:41:32 2015 UTC,"Thank you for the gnus pointers, I previously used some of the wacko hacks for going the same things.  Now I only have to decide if using GNUS or mu4e is better..."
emacs,2xw0cr,RobThorpe,4,Thu Mar 5 07:27:14 2015 UTC,"Sometimes I get a new system and install Emacs then try to use Emacs in ""Stallman mode"" (none of my own configs).  That teaches me about features that I'd re-invented badly because I didn't know about them.  A week or so of that is very helpful."
emacs,2xw0cr,tuhdo,5,Wed Mar 4 15:33:31 2015 UTC,"Learn to embrace the ""fullscreen"" workflow. Everything is at your fingertips, so you don't need to clutter the screen.  For example you may feel separation anxiety without a visible tab for each open file. But a quick shortcut to 'helm-mini' will show buffers and easily navigate them. And scale to a larger file count than tabs can effectively handle.  There is no need for a menu system to occupy constant screen real-estate.  Press ""C-h m"" to see all the commands for the mode you're in on demand, close it when you're done with ""q""."
emacs,2xw0cr,fivehours,1 point,Thu Mar 5 03:20:30 2015 UTC,I have already disabled the menu bar and scroll bar and all that. Thanks for the helm tip :-)
emacs,2xw0cr,instant_sunshine,1 point,Thu Mar 5 03:53:25 2015 UTC,"I've always found the menu bar helpful to have around - different modes add menu items between the Tools and Help menus, and it's a good way to discover what kind of commands are available. And if you want to know what command a menu runs, do C-h k and then click on the menu item, just as with a key command. I've been using Emacs for a couple of years now and still find new things through the menu."
emacs,2xw0cr,monotux,3,Fri Mar 6 20:50:45 2015 UTC,"Download a graphical Emacs.  GNU Emacs has met all of my needs. There is no reason to use terminal emacs unless your working through an SSH tunnel that TRAMP can't navigate. Don't try to read Emacs' online (included) tutorial as your introduction.  There are far better tutorials out there that give a gentle, modern introduction to Emacs. C-key navigation is certainly faster, but there is a whole other paradigm of editing that you should learn about before trying to optimize your performance.  I spent nearly a year on and off with the included tutorial. There wasn't any motivation to complete it and the navigation it introduces you to is, I'll admit, arcane for a 90s kid who's grown up in/with/around computers. I have to admit that I didn't know Emacs supported the arrow keys until I had downloaded the graphical version and used them accidentally. Learning the C-keys came with the initiative to be more effective in Emacs. As others have said: don't be afraid of packages, but don't go overboard, either.  It's important to learn about the core functionality – these will be the concepts echoed throughout the entire experience. Get involved with the community.  Learn what other users are doing. Browse, but don't buy. See what's out there to keep you motivated."
emacs,2xw0cr,fivehours,8,Thu Mar 5 05:56:00 2015 UTC,"Nothing. When I wanted something then I searched for it if the functionality already exists and used that, if it did not exist then I learned how to implement it. This process worked quite well for me."
emacs,2xw0cr,gnuvince,3,Wed Mar 4 08:43:23 2015 UTC,"It's important to watch other people's screencasts and read through their tips and .emacs files. There are so many options and commands available that it's easy to get stuck in a certain method of doing things and not realize that there's already a better function available or a better key binding or whatever.   There's all kinds of gold to be found in, for example, emacsrocks or some of the more popular .emacs files out there (emacswiki usually has some good links)."
emacs,2xw0cr,redguardtoo,3,Wed Mar 4 14:23:57 2015 UTC,"Dear past me,   join #emacs on freenode right away don't try to turn Emacs into editors/IDEs you're familiar with (avoid CEDET, don't waste time with code completion) learn elisp from day one read the calc manual"
emacs,2xw0cr,easyEggplant,1 point,Wed Mar 4 21:43:52 2015 UTC,Ive been meaning to read the calc manual for so many years now.. I always jus read enough to forgetit all until next time.. Seems nice to work with.
emacs,2xw0cr,allandee,2,Thu Mar 5 01:45:52 2015 UTC,Find out how useful scratch is for tests and things.
emacs,2xw0cr,thomasfr,3,Wed Mar 4 09:13:22 2015 UTC,IELM is pretty cool for this too IMHO.
emacs,2xw0cr,theldoria,1 point,Wed Mar 4 11:56:34 2015 UTC,"The two of them work well together. For example, putting defuns in scratch and calling the defuns from an IELM buffer."
emacs,2xw0cr,flarkis,2,Wed Mar 4 15:07:52 2015 UTC,An example or two?
emacs,2xw0cr,CodeJesus,3,Wed Mar 4 09:46:00 2015 UTC,"If you write Elisp package, then it's useful just dump thing on *scratch* for testing without the hassle of creating new buffer and turn on emacs-lisp-mode or worse, create a new file. You can kill and recreate *scratch* anytime by just creating a buffer with the name."
emacs,2xw0cr,theldoria,1 point,Wed Mar 4 10:09:22 2015 UTC,"I'm always paranoid about the system crashing and losing work though - maybe if scratch was autosaving and persisting. Hmm... wouldn't be too hard to do. Probably done somewhere, but would be nice if it was the default, or a built-in option."
emacs,2xw0cr,CodeJesus,1 point,Fri Mar 6 21:20:32 2015 UTC,There's a scratch persist package you might like.
emacs,2xw0cr,theldoria,2,Sun Mar 8 02:58:18 2015 UTC,"Yes. Also, C-M-x while working on a defun."
emacs,2xw0cr,instant_sunshine,2,Thu Mar 5 07:29:01 2015 UTC,It also works for defvars when you change the value (took me a while to realize that).
emacs,2xw0cr,theldoria,2,Fri Mar 6 21:17:48 2015 UTC,"Not much to tell you the truth: going little bit by little was the best way to make sure that I learned and incorporated more advanced techniques into my day-to-day editing.  This is also one reason why I'm not super fond of Helm, because it's really hard to go bit-by-bit, it seems to me you need to dive in head first."
emacs,2xw0cr,instant_sunshine,2,Wed Mar 4 22:47:54 2015 UTC,user org-mode and emacwiki from day one.
emacs,2xw0cr,theldoria,2,Wed Mar 4 22:55:10 2015 UTC,"I would agree that adding a ton of packages right away can be overwhelming.  I would also contend that these three are worth learning and using well, and things that I glossed over when first learning.   Macros Bookmarks Tramp   I'd install company and ag right away though.  Oh, and map something to caps lock and learn it that way from the very beginning."
emacs,2xw0cr,instant_sunshine,2,Wed Mar 4 23:19:28 2015 UTC,"I am, in a way.  I started using Emacs in the mid ninieties, and after a year or so AFK, I return to find my customization files in a poor state.  Not in the mood to figure everything out, I went shopping for a ""kit"" and start fresh.  I found https://github.com/syl20bnr/spacemacs and I'm very happy.  Lots of my configuration files are essentially about saving keystrokes, and the evil-mode + helm setup of Spacemacs is just better than anything I've come up with.  Hats off for pulling off replacing so much of  the clunky core of Emacs-chords with a consistent, modifier-free alternative.  Sensible defaults for lots of packages too.  Whole-heartedly recommend."
emacs,2xw0cr,theldoria,2,Thu Mar 5 17:06:49 2015 UTC,I wish that I had learned earlier that ibuffer is the only way I should switch buffers. I went through so many years of buffer switching schemes that did not really fit my workflow before that.. Ibuffer and 100-200 lines of specialisation code.
emacs,2xw0cr,oantolin,4,Tue Mar 10 18:18:55 2015 UTC,"I would throw my mouse away and use emacs only in console mode without gui.  Then, if I managed to master all important keystrokes (in their default configuration) I would start to add some additional packages. The first would be org-mode.  I would organise and comment my initialisation script very well, putting it into a vcs like git.  After a while I would start using the gui, frequently switching back to console mode, at least after doing any change to configuration."
emacs,2xw0cr,RobThorpe,2,Wed Mar 4 08:38:36 2015 UTC,Isn't org-mode bundled with emacs?
emacs,2xw0cr,monotux,2,Wed Mar 4 11:34:01 2015 UTC,I think he means using org mode
emacs,2xw0cr,RobThorpe,1 point,Wed Mar 4 13:25:07 2015 UTC,"Sort of: I need to disable the bundled version and get the newest one in order to get the functionality from org-mode I wish. And this update process is less obvoius and easy as I wish it would be, because you have to make shure no old version is loaded if you get (and compile) the new one."
emacs,2xw0cr,eadmund,1 point,Thu Mar 5 10:59:39 2015 UTC,"Interesting. What functionality (and by extension, what am I missing???)"
emacs,2xw0cr,theldoria,1 point,Thu Mar 5 17:26:38 2015 UTC,"I use org-reveal (ox-reveal.el), which requires latest org-mode."
emacs,2xw0cr,oantolin,1 point,Fri Mar 6 10:24:37 2015 UTC,"... ""this update process is less obvoius and easy as I wish it would be""  M-x package-utils-upgrade-all"
emacs,2xw0cr,theldoria,1 point,Sun Mar 8 03:03:00 2015 UTC,"Well, this updates all packages, which is not necessarily what I want.  From my experience, updates can easily break things up (new is not always better), so I don't do it where I am not forced to do so (never touch a running system). And If, then I try that update in a sandbox.  Updating all my packages (they count to 20+) is really hard time testing all features I rely on in all environments (linux with and without X, windows, at home and work)."
emacs,2xw0cr,oantolin,1 point,Tue Mar 10 20:33:09 2015 UTC,"I have a very large payload of packages, which need to run on Linux and OSX.  I can run an update all and do a test init, then revert any package which causes issues.   I do this weekly, once in a while a package is broken, and this method has been fine for about 4 years now.   Keeping the entire setup (including packages) in git, helps a lot, and rolling back any package to any version is very simple.  Despite the usual caution required for updating, I have had very few problems.  All of them have been ridiculously simple to rectify. This is with an installed set of 562 packages.  With version control, especially with a toolkit as useful as git, it's safe and trivial."
emacs,2xw0cr,mickeyp,1 point,Wed Mar 11 01:29:56 2015 UTC,"I also have my configuration in git, however, I do not add my installed elpa packages to the repository.  This, of course, makes I non trivial to roll back a brocken update.  I don't want the additional payload of all the packages in my repository, so I would prefer to take a snapshot of the installed package version (stored in a file under version control), so that I can use that to reinstall exactly those versions. Automatically! Is something like that possible?"
emacs,2xw0cr,theldoria,1 point,Thu Mar 12 13:04:21 2015 UTC,"Would you care to outline the reasons why you don't keep the installed packages in Git?  There is Cask of course, but that's only justified when developing packages and you want to control installs for different versions of Emacs.  If clone time bothers you eg. Installing the config to a new machine, you can use --depth 1, to just clone the current state."
emacs,2xw0cr,mickeyp,1 point,Thu Mar 12 16:14:07 2015 UTC,"First: Repository size. But thats not a big deal. Second,: The packages are versioned on their own. I could not see why I should do it again in my repository.  That said, I can see the advantage of doing so anyway, and maybe I will do so."
emacs,2xw0cr,Ironballs,2,Fri Mar 13 05:08:17 2015 UTC,"I agree about not using the mouse, but why run in a console? I like having pretty pictures in certain buffers."
emacs,2xw0cr,EatMoreCrisps,2,Wed Mar 4 13:25:09 2015 UTC,"I agree. The Emacs PDF viewers, doc-view-mode and pdf-tools are great. They're not to be missed out on."
emacs,2xw0cr,alpheus,1 point,Wed Mar 4 14:57:47 2015 UTC,How do I go about using the PDF viewer? Do I need additional packages or does it come out of the box?
emacs,2xw0cr,theldoria,1 point,Thu Mar 5 03:51:10 2015 UTC,You open a PDF file as a buffer. :)
emacs,2xw0cr,bryangarza,1 point,Thu Mar 5 07:28:06 2015 UTC,"Doc-view comes with Emacs 24.4, it requires ghostscript. On *nix systems, which is usually installed by default. On MS windows you have to install GPL ghostcript.  I don't know about pdf-tools, it's a package on one of the package repositories, I think it needs an external executable too."
emacs,2xw0cr,angelic_sedition,1 point,Thu Mar 5 10:53:25 2015 UTC,"In principle emacs could run in a framebuffer, which could be pretty neat."
emacs,2xw0cr,Ironballs,1 point,Thu Mar 5 03:44:24 2015 UTC,Because the day may come that you wish to use emacs remotely.
emacs,2xw0cr,angelic_sedition,1 point,Thu Mar 5 10:56:23 2015 UTC,"That day won't come, since I use TRAMP  Also, if some bizarre occurrence forced me to run Emacs remotely, I would run it in a terminal only that one time."
emacs,2xw0cr,Ironballs,1 point,Thu Mar 5 12:03:19 2015 UTC,"I tried it several times, but never got TRAMP to work reliably. Possibly because I am forced to use a windows machine while my machines at home are linux only. That reminds me, I never tried it at home :) I must give it a shot on linux."
emacs,2xw0cr,Erakko,1 point,Thu Mar 5 16:04:43 2015 UTC,"Oh, I see. I'm lucky that I never have to deal with Windows."
emacs,2xw0cr,tuhdo,1 point,Thu Mar 5 16:08:48 2015 UTC,"It'll work fine on windows if you a) install openssh for windows so you get scp, ssh, etc.; or b) you install putty's plink utility and use plink as a protocol instead of ssh."
emacs,2xw0cr,strobot,1 point,Fri Mar 6 09:41:52 2015 UTC,"Used plink and got it working, but it was not reliable (very slow and sudden disconnects with frozen emacs).  Maybe I should try openssh..."
emacs,2xw0cr,Erakko,1 point,Fri Mar 6 10:21:20 2015 UTC,That shouldn't happen. Is it slow if you use plink from the commandline?  Also try setting tramp-verbose to a higher number for added diagnostic output.
emacs,2xw0cr,Farsyte,5,Fri Mar 6 12:17:03 2015 UTC,"As I was a Vim convert, probably quitting evil mode right away. Though evil is nice and the Vim way works, in a way, I'm much quicker and faster when using modifier keys instead of modality. Though I had caps act as escape, for me C-n, C-n is quicker to hit than <Caps>2j to go down two lines, especially when caps lock has been made control.  A lot of the times evil keybindings interfere or don't make sense when using other major modes.  Rebinding M-x to C-x C-m. Easier to use when Caps is Control, M-x requires a strange finger twist I didn't like.  Unbinding C-x C-b and C-x f. Every time I hit those I almost went insane.  Learning to use marks for quick file bookmarks. Place marks with C-SPC C-SPC and then jump back with successive C-u C-SPC. Or, if you want to jump to a previous file where you set a mark, use C-x C-SPC. For more advanced things, there are registers.  Packages  Org-mode. It's worth the hype.   Learning to use projectile, magit and perspective.   For Lisp modes, smartparens (better) or paredit. And using smartparens everywhere, not just in Lisp modes!  Either using ido-ubiquitous or helm.  Versioning my .emacs.d and putting it on right from the start, and using things like autoinstall and splitting my config into several files."
emacs,2xz1ul,redguardtoo,1 point,Thu Mar 5 01:34:12 2015 UTC,"Thanks for sharing it, Chen! Contributors to the glorious Emacs community are always appreciated.   Currently I'm looking for something, to manage my rubbish projects in order to find the relevant variables and functions. I will figure it out soon how I could use this."
emacs,2xz1ul,ReneFroger,1 point,Thu Mar 5 11:35:08 2015 UTC,Check out projectile (emacs package) and ag (system application).
emacs,2xz1ul,kaushalmodi,1 point,Thu Mar 5 15:15:58 2015 UTC,"The purpose of my package is solve just one issue: too many rubbish files are included to create TAGS.  That's why ""GNU Find"" is needed.  ""Find"" give you more options to filter out files.  Other corner cases also handled:   If you use either Cygwin Emacs or Win32 Emacs or both, you need handle path problem Windows DOS shell is crap. So elisp code is carefully written to avoid any advanced features of modern shell Expose all the cli options so you can take full advantage of cli power. For example, I can insert more cli tools between the pipe of find and ctags."
emacs,2xz1ul,kaushalmodi,1 point,Fri Mar 6 02:03:25 2015 UTC,"In either global or ctags, you can set the files you want to exclude."
emacs,2xz1ul,kaushalmodi,1 point,Fri Mar 6 03:52:45 2015 UTC,"I know all the ctags options, it's not enough. As some samples at find-and-ctags site shows."
emacs,2xuyli,angelic_sedition,8,Wed Mar 4 02:05:14 2015 UTC,"I use emacs for my task planning with org-mode. I read email with wanderlust, and blog using some hacked scripts for integrating org-mode and jekyll.  Quick calculations with calc (love the RPN, reminds me of engineering school)  I've seem people use it for IRC and Jabber too."
emacs,2xuyli,rranelli,3,Wed Mar 4 03:22:46 2015 UTC,"I use it for playing interactive fiction (like Zork). Download malyon from github. It's a Z Machine implemented entirely in Lisp. It's a bit buggy. For example, with some IF, it has trouble saving games. Still, it's not how well the bear can dance, eh?"
emacs,2xuyli,amanaplanacan,3,Wed Mar 4 07:57:53 2015 UTC,"Not really obscure, but calfw is a pretty good calendar interface that connects to org as well as Google Calendar."
emacs,2xuyli,Imxset21,2,Wed Mar 4 19:40:19 2015 UTC,"I use it for StackExchange sites now that sx.el is available (very nice too)   Not sure if Magit counts, but version control in git is very nice using it. (I feel it's so well known that maybe I'm wasting text saying so.)  Controlling spotify with Helm, (I think there's control for iTunes, and of course there's EMMS)  Editing video...   Interfacing with a variety of web services / apis.  Pivotal Tracker integration, github, jira, bugzilla ... etc.  Playing Tetrix, Dunnet ... snake?"
emacs,2xuyli,instant_sunshine,1 point,Wed Mar 4 07:59:21 2015 UTC,"I've been meaning to try out sx.el; it looks very nice. helm-spotify looks nice too; I might start using spotify again just because of it.  GNEVE? Do you actually use it a lot? Looking at it, I'm not sure how nice it would be for anything that wasn't very simple. Very nice regardless.  I just noticed that tetris and dunnet are built-in. Thanks!"
emacs,2xuyli,instant_sunshine,2,Wed Mar 4 08:10:57 2015 UTC,"GNEVE is a nice tool to do programmatic video editing, if you just need a cut list.  To do anything complex use avid, finalcut etc.  but to just slice the ads out of a tv show, it's acceptable."
emacs,2xuyli,ax_reddit,2,Wed Mar 4 17:41:31 2015 UTC,"Personal time tracking with org-mode. ""Connecting"" (editing) to external machines with tramp and transfering files with dired to/from external machines."
emacs,2xuyli,bastibe,2,Thu Mar 5 08:13:49 2015 UTC,"Recently, I wanted to watch an image file on a remote server, and tramp+image-mode served me well."
emacs,2xuyli,visnae,2,Wed Mar 4 09:35:32 2015 UTC,"The first thing I do after a reboot: open emacs and M-x eshell.  (I don't even bother opening a terminal anymore). Then I split frames and open an ORG-buffer, to see todays agenda and other stuff. Then I open Firefox and IRC-client. This will probably get me some downvotes, because w3/other emacs browsers and ERC etc. My two cents on this issue is that w3/emacs browsers aren't good enough for regular browsing, so I use a heavily modified Firefox instead (thank you keysnail!. IRC dies if I accidently kill the window, and I won't get alerts if I bury the ERC buffer. I have also tried to use gmail with gnus, but I have yet to find a good guide for it. Too many unsatisfying key bindings for me to really like the concept.  This said, I use emacs 60-70% of my work, but this could probably be raised if I find more satisfying ways of working.  I'm looking forward to  emacs-25, that I heared the w3-mode is improved to the point it is more possible to use (rumor).   (sorry for bad grammar and spelling; cause you know, beer and alcohol..)"
emacs,2xuyli,dzecniv,2,Wed Mar 4 10:34:35 2015 UTC,"You already gave a damn good list !  I want to install apt packages with apt-utils (aur packages with aurel), control downloads (including bittorrent) with aria2 but didn't try yet."
emacs,2xuyli,anangusp,1 point,Wed Mar 4 23:33:00 2015 UTC,"I completely forgot about aurel! I've never used rtorrent, but it looks like there is mentor for it which seems nice."
emacs,2xuyli,trezor2,1 point,Wed Mar 4 09:53:13 2015 UTC,"IRC, the funny graphical diagram mode (apologies for forgetting what it's called), tramp (which is super useful) and email are probably some of the less obvious things that people use Emacs for one they've decided it's the best editor for them.  Also saying Emacs is bad because Unix philosophy has always confused me; it's extensible and its extensions do one thing well and just that thing, but the whole program is more like an environment. People aren't saying GNOME is bad because it does more than one thing..."
emacs,2xuyli,RobThorpe,2,Wed Mar 4 17:45:35 2015 UTC,Good observation: Emacs is it's own Unixy environment where we can connect and tie together different modules or scripts written for their own tiny purpose.
emacs,2xuyli,anangusp,4,Wed Mar 4 11:15:18 2015 UTC,"It's not just that. It's also that it's an interface to other *nix tools.  Most of the non-editing functionality is provided by other programs. The shell and term modes are interfaces to normal shells (except eshell). Printing uses ghostscript. Dired uses ls (though it has it's own version of ls as a fallback). Find-dired uses find (though again there's a lisp fallback). Grep and grep-find use the system grep. Image transformations use imagemagick. Of course the compile modes use the system compiler and M-x gdb uses gdb. Most of the email programs use external tools for receiving and or filing. Rmail uses movemail, MH-E uses MH, Mu4e uses Mu and Notmuchmail uses notmuch. That's all without mentioning libraries, which is how all image formats are handled.  There's much more modularity than people think."
emacs,2xuyli,oantolin,1 point,Wed Mar 4 11:38:10 2015 UTC,"I don't know what the funny graphical diagram mode you speak of is. I found wsd-mode on google, but I'm not sure if that's what you are referring to.  I've been using sshfs (which I notice is mentioned on the EmacsWiki page for tramp). Tramp seems to come up a lot; is there any immediately obvious benefit over sshfs?  Well I think there's a bit of a difference since a lot of GNOME or other DE software you can use without using the DE (though often with a lot of dependencies on it). That said emacs is an awesome environment. Every time I install a package like elfeed, I can use apropos for getting help. If it provides a mode, I can use C-h m. And I'm pretty much guaranteed to be able to use the keyboard with it with a consistent way of changing mappings (define-key, key-chord, etc.)."
emacs,2xuyli,phalp,1 point,Wed Mar 4 18:27:24 2015 UTC,It's apparently the aptly named 'artist-mode';  Tramp is the default if you open a remote file iirc but I don't really know enough to compare to sshfs.
emacs,2xuyli,RobThorpe,1 point,Wed Mar 4 18:33:25 2015 UTC,"Nothing obscure but here are something's you didn't mention:   Instead of a file manager I use file operations from helm-find-files (and sometimes dired for trickier stuff). I use PDF-tools as a PDF viewer. calc for checking my students' calculations. As soon as sx.el gets MathJax support I'll probably use it for stack exchange sites instead of a browser. spray for casual reading, usually text I paste from a website."
emacs,2xuyli,clintm,1 point,Wed Mar 4 19:38:20 2015 UTC,I don't see playing music mentioned yet. I use Bongo as my main music player.
emacs,2xuyli,gnuvince,1 point,Wed Mar 4 13:43:16 2015 UTC,"I regularly use:   Dired for file operations. Calc for sums. (I also use quick-calc for very simple sums). The image-modes for pictures and doc-view for PDF files. Find-dired to find files. I use Rmail for email, but I consider that editing."
emacs,2xuyli,Knusper2000,1 point,Wed Mar 4 16:21:03 2015 UTC,"I use ERC daily as an irc client and gnus for email, though I'm tempted to try wunderlust again."
emacs,2xuyli,gcr,1 point,Wed Mar 4 20:50:13 2015 UTC,M-x circe for IRC M-x calc for quick calculation needs M-x twittering-mode for Twitter
emacs,2xuyli,lazyklimm,1 point,Wed Mar 4 22:31:25 2015 UTC,M-x xkcd
emacs,2xw0iu,instant_sunshine,1 point,Wed Mar 4 08:24:27 2015 UTC,"SVG file is here...  https://github.com/ocodo/aek-ii-project/blob/master/svg/apple-emacs-wasd-layout.svg  (by the way, it's based on this vintage keyboard http://i.imgur.com/OMR55.jpg.)  I'm in no way associated with them, (no affiliate links or anything like that!!) but WASD keyboards make a complete set of ANSI 104 key, Cherry MX caps (and a full keyboard) from this SVG file.  (This is one I had made last year, it has standard Mac keys instead of Meta, Super, Hyper. http://i.imgur.com/coiRlp4.jpg)"
emacs,2xw0iu,zeRusski,1 point,Wed Mar 4 08:25:19 2015 UTC,do you have a stub (empty layout image) that you can share? Thx
emacs,2xw0iu,zeRusski,1 point,Wed Mar 4 09:06:02 2015 UTC,"WASD provides a set of base templates, they have a bunch of layouts as layers.  It's fully compatible with Inkscape (it's also SVG)  http://support.wasdkeyboards.com/customer/portal/articles/1380026-layout-template-files"
emacs,2xw0iu,wdouglass,1 point,Wed Mar 4 09:36:55 2015 UTC,"sweet, thank you"
emacs,2xu14h,ReneFroger,10,Tue Mar 3 21:43:48 2015 UTC,https://github.com/magnars/fold-this.el
emacs,2xu14h,wasamasa,4,Tue Mar 3 21:46:20 2015 UTC,"Interesting, however it's not meeting my another wish to save the folds. I just asked magnars, the author, about the possiblities.   Thanks for the tip, by the way!"
emacs,2xu14h,dzecniv,3,Tue Mar 3 22:01:09 2015 UTC,"Thanks, I added it in the wiki.  http://wikemacs.org/wiki/Folding#Fold_this_region"
emacs,2xu14h,jjasghar,2,Wed Mar 4 09:57:06 2015 UTC,"Didn't even noticed that there was a Wiki about folding. Thanks for your contribution to the community, it's appreciated!"
emacs,2xu14h,angelic_sedition,5,Wed Mar 4 12:30:27 2015 UTC,"Totally agreed. I wish there was a good way but everyway i've looked nothing like the folding in vim exists. Hell i started learning elisp to try to emulate it, didn't get very far though :("
emacs,2xu14h,RobThorpe,2,Tue Mar 3 21:49:33 2015 UTC,"Are marker folds (for saving) okay (I'm guessing no since you mention regex based)? Marker folds work from vim for me with evil's zc and zo ({{{}}}), but you can't do things like zf and zd to create and delete them.   I'm trying to stop using marker folds since I prefer org syntax for folding (see here for info on using org headings in non org files). This doesn't work well if you want to fold a specifc subsection of a document with an end before a next fold though (since an org heading will fold all text beneath). Org folding also still has some serious annoyances for me."
emacs,2xtjv7,therealmocker,5,Tue Mar 3 19:44:12 2015 UTC,"Just want to point out that this sparked a ""Should this be in emacs"" discussion. I've been following most similar discussions recently so I found it interesting.  It sounds like it was decided that it was fine. Stefan originally said no but later in the mailing list it looks like he changed his mind.  Richard Stallman said it is fine, due to it talking over a network basically.  See:  Stefan saying no http://lists.gnu.org/archive/html/emacs-devel/2015-02/msg00497.html  Stefan saying yes http://lists.gnu.org/archive/html/emacs-devel/2015-02/msg00679.html  Richard Stallman saying yes http://lists.gnu.org/archive/html/emacs-devel/2015-02/msg00591.html  Edit: I know next to nothing about exchange, but if this lets me get email I will be very happy as i'm currently using app.mail since thunderbird didn't like our exchange server."
emacs,2xtjv7,mordocai058,1 point,Tue Mar 3 21:35:17 2015 UTC,"I was following this thread when it was active on the list. I stopped paying attention to it after a short while (a whole lot of back-and-forth), but I'm glad to see things turned out OK."
emacs,2xtjv7,vermiculus,1 point,Wed Mar 4 03:53:30 2015 UTC,Does it work with appt?
emacs,2xtjv7,__notmythrowaway__,1 point,Wed Mar 4 02:03:49 2015 UTC,"couldn't get the autodiscovery to work for my domain, quite sadly. I ended up going with a combination of   ical2org using my 'share your calendar' link to ics org-agenda (in particular, (org-agenda-file-to-front) and (org-agenda-redo t) calfw-org"
emacs,2xtjv7,alabrie,0,Wed Mar 4 02:06:32 2015 UTC,Bookmarked. Will definitely try out.
emacs,2xuvll,shackra,5,Wed Mar 4 01:40:11 2015 UTC,I find Tern to be a more solid option: https://github.com/proofit404/company-tern http://ternjs.net/
emacs,2xuvll,kimgronqvist,1 point,Wed Mar 4 08:27:31 2015 UTC,I second this. Tern has excellent support for Node.js modules with some data modeling to allow type signatures in completion. Highly recommended!
emacs,2xuvll,emallson,3,Mon Mar 9 16:26:59 2015 UTC,Looks like ac-js2 supports company as well as auto-complete - https://github.com/ScottyB/ac-js2/commit/f3681bc2afebb494f5962ee0d0a0158c30437c0d
emacs,2xuvll,alexmurray,1 point,Wed Mar 4 03:01:01 2015 UTC,"Weird, I get none..."
emacs,2xuvll,Imxset21,3,Wed Mar 4 03:28:26 2015 UTC,Open an issue on Github.
emacs,2xuf29,dexafree,8,Tue Mar 3 23:27:45 2015 UTC,Just give a try to Spacemacs : https://github.com/syl20bnr/spacemacs.  It has pretty good documentation and the gitter chat is normally very active: https://gitter.im/syl20bnr/spacemacs
emacs,2xuf29,cestdiego,1 point,Wed Mar 4 00:26:01 2015 UTC,"Thanks!  I'm not a huge fan of starting with pre-configured states, but I think that might be cool in order to start learning and then creating my own configuration :)"
emacs,2xuf29,smithzv,1 point,Wed Mar 4 16:14:42 2015 UTC,"As I've read, if you are coming from Vim, Spacemacs is more recommended as it has evil mode already configured.  As you're a Prelude user, which one would you recommend?  Thanks :)"
emacs,2xuf29,uberyoshi,3,Wed Mar 4 19:57:16 2015 UTC,"Point 1: Modeline customization... a couple of packages you might want to check out are ""powerline"" (like the vim package), ""main-line"", and ""smart-mode-line"".  If you have added melpa as a package archive you should be able to get any of these from the built in package manager (I'm not sure if they're in any other archives too).  Point 2... what you seem to be encountering is that evil has a ""motion"" state which is distinct from ""normal"", and is used in buffers you are expected to move around in but not edit (such as help buffers).  I assume you've probably bound your key in evil-normal-state-map... you'll also have to bind it in evil-motion-state-map if you want it to work in those buffers.  Point 3... (kbd ""K"") should work, yes, and I'm not sure why it wouldn't, without seeing the code.  Sorry :(  Point 4... progn is simply a wrapper that turns a sequence of code into a single form, for use where only a single form is allowed.  For example, the true branch of an if only allows a single form, so if you want to do more than one thing you can wrap it in a progn.  Hope this helps :)"
emacs,2xuf29,uberyoshi,2,Thu Mar 5 07:16:26 2015 UTC,"Wow, thanks for your ordered answer!   Will have a look to those, it's one of the things that I miss the most of Vim, regarding the visual aspect. Did not know that mode even existed. It looks like I will have to read more evil documentation. Thanks for the explanation :) It was a very simple file: https://ghostbin.com/paste/m38xe I still don't understand why it did not work, but at least I was managed to solve it So, it's like an ""anonymous function""?   Thank you really much!"
emacs,2xuf29,DasEwigeLicht,2,Wed Mar 4 01:10:52 2015 UTC,"regarding 4, no, it is like '{' and '}' in C like languages with the added behavior that it returns the result of its last form."
emacs,2xuf29,tzz,1 point,Wed Mar 4 16:19:03 2015 UTC,"You'll definitely want to bring back your leader key if you haven't already. You can use this for any command that you use often enough to worry about ""emacs pinkie"". For instance, I turned M-x into <leader>x."
emacs,2xuf29,bryangarza,1 point,Wed Mar 4 17:02:43 2015 UTC,"Yes, that's definitely a package I will be installing, together with the visual star.  And the M-x to <leader>x is a mapping that I will thank a lot. However, in evil mode, I think that by writing : you enter to M-x ""mode"", right?"
emacs,2xuf29,jplindstrom,1 point,Thu Mar 5 03:03:17 2015 UTC,"Typing : will get you vim`s command mode that you'd be familiar with, although things are now done through emacs. Try :ls and you'll get the buffer list to pop up. One of my favorite things is using :s/foo/bar which will now show you what will be replaced on the fly. It's the best of both worlds! Check out my evil setup here. I use evil-leader for all my most frequently used commands. If it's a little less frequent, I'll give it an emacs binding, and everything else I can easily find using Helm's version of M-x."
emacs,2xriyv,kabbotta,7,Tue Mar 3 07:04:17 2015 UTC,"For better code completion, you should use irony-mode + company-irony + flycheck-irony. If you use one of the supported build systems, it should be easy; if you use Make, add a .clang_comlete file at the root of your project, and add compile flag there i.e. -I/usr/local/include/ORGE to make Irony related tools able to use it."
emacs,2xriyv,tuhdo,2,Tue Mar 3 07:27:15 2015 UTC,Thank you! You're always so helpful! Your tutorials are pretty much what made me give emacs a try after using vi for some time.
emacs,2xriyv,tuhdo,1 point,Wed Mar 4 00:58:39 2015 UTC,Glad to hear that!
emacs,2xriyv,shackra,1 point,Wed Mar 4 02:37:37 2015 UTC,and what should the user do if he is using CMake? (I have never understood how to setup a project to use irony-mode...)
emacs,2xriyv,tuhdo,2,Wed Mar 4 01:27:29 2015 UTC,It should be recognized automatically. You should run irony-cdb-menu to check if you project is recognized properly.
emacs,2xotva,CodyChan,10,Mon Mar 2 17:51:15 2015 UTC,An Introduction to Programming in Emacs Lisp  It is also available in emacs in info: C-h i   More advanced stuff:  GNU Emacs Lisp Reference Manual  Also available in emacs.
emacs,2xotva,kcin,11,Mon Mar 2 18:27:22 2015 UTC,"Please, copy this text into your Emacs first, and then read it."
emacs,2xotva,ReneFroger,2,Mon Mar 2 21:06:39 2015 UTC,"I just used that the other day, it's really well done!"
emacs,2xotva,statmobile,1 point,Mon Mar 2 22:05:38 2015 UTC,Git link from that link: https://github.com/adambard/learnxinyminutes-docs/blob/master/elisp.html.markdown [raw for easy copy/pasting]
emacs,2xotva,kaushalmodi,1 point,Mon Mar 2 23:39:45 2015 UTC,"Thanks for your addition, I edited my post with your link."
emacs,2xotva,ReneFroger,1 point,Tue Mar 3 12:36:32 2015 UTC,This one's a bit prettier.
emacs,2xotva,wasamasa,1 point,Tue Mar 3 17:07:13 2015 UTC,"Thank you for the link, but I think I already acquire all of them, it is really too basic."
emacs,2xotva,zck,8,Tue Mar 3 17:24:39 2015 UTC,"There are a few presentations at the Emacs NYC Meetup that might help out.   An introduction to Emacs Lisp. It's the second presentation on this date; scroll down. The presentation was made into a blog post. Writing Games in Emacs. This is a presentation I gave, and starts with nothing, and shows you how to manipulate Emacs programatically. My goal when creating this was to be an example of a minimal mode -- storing state, taking input, and inserting text."
emacs,2xotva,zck,0,Mon Mar 2 19:27:41 2015 UTC,Writing games in Emacs is interesting.
emacs,2xotva,RobThorpe,1 point,Tue Mar 3 17:32:37 2015 UTC,Thanks! I'd be happy to elaborate if anything's confusing. I posted the code.
emacs,2xotva,RobThorpe,9,Tue Mar 3 18:20:06 2015 UTC,"Start by reading the Emacs Lisp tutorial. Then read some of the Emacs Lisp manual, especially the parts on buffers.  Read some simple modes, the best one to read depends on what you want to do. If it's support a programming language then a good one is the simple lisp-mode that comes with Emacs; lisp-mode.el. If it's present non-file data to the user then you can have a look at buff-menu.el and if you're feeling brave dired.el. If it's a command-line type thing then look at lisp-interaction-mode.el. If you come across a form you don't understand then look it up in the elisp manual, if that doesn't work then search the web and other code.  I don't think there's any need to buy a book on it, especially one that's so old."
emacs,2xotva,vaiav,1 point,Mon Mar 2 18:25:06 2015 UTC,"I don't mean the exact paper book, but article/page/PDF with contents and chapters which cover many aspects of a topic."
emacs,2xotva,statmobile,1 point,Tue Mar 3 17:35:15 2015 UTC,I see what you mean. But I don't know of any other good sources than the ones I mentioned. I recognise your name now and I remember you know quite a bit about Emacs and elisp. You could probably learn by reading the code of more complex modes.
emacs,2xotva,newfor2015,3,Tue Mar 3 19:22:25 2015 UTC,"Xah Lee's lisp programming and beginner emacs guides are excellent, plus he's well worth supporting. The lisp programming is the most comprehensive current documentation I have seen other than the reference manual."
emacs,2xotva,RobThorpe,2,Mon Mar 2 22:51:42 2015 UTC,Nice.
emacs,2xotva,redguardtoo,2,Tue Mar 3 06:23:23 2015 UTC,"I'm currently trying to build a package to release on MELPA.  It's pretty basic, and I wasn't the one who wrote it.  If you want to help me, I'd be more than happy to work with you as we both learn:  https://github.com/statmobile/pydoc  Personally, I've just been googling around for tutorials, and looking at the Emacs doc: Introduction to Emacs Lisp"
emacs,2xotva,aaptel,2,Tue Mar 3 13:46:06 2015 UTC,elisp really hasn't changed much in the last decade.
emacs,2xotva,abo-abo,1 point,Tue Mar 3 17:37:41 2015 UTC,"It hasn't, though the handling of scope and Common Lisp compatibility functions has changed.  The main problem the OP is likely to have is that some things to do with making major modes have changed quite a lot. The way buffer-local variables are supposed to be used has changed. Defcustom has changed, skeletons can be used in modes, ways of specifying regex and mode-maps have improved.  It makes much more sense today to rely on the documentation that comes with Emacs and on simple modes as examples (both ones in Emacs and in package archives)."
emacs,2xotva,sledgespread,2,Mon Mar 2 18:03:32 2015 UTC,"""Writing GNU Emacs Extensions"" is the best."
emacs,2xotva,jeenajeena,2,Mon Mar 2 18:36:56 2015 UTC,There is also the Elisp Cookbook on the wiki.
emacs,2xotva,dzecniv,2,Tue Mar 3 01:01:34 2015 UTC,"I wrote a bunch of Emacs extensions and I'm not getting too many complaints about them.  What really worked for me was the first two chapters of SICP, and then just learning the basic Elisp primitives with F1 f. A function frequency list also helps.  Finally, you just need to get annoyed with the default performance and implement ideas that fix your annoyances. Start with something simple, and learn along the way."
emacs,2xotva,dzecniv,1 point,Tue Mar 3 05:31:36 2015 UTC,"+1 for SICP, it sounds like what the OP really needs is to learn about lisp in general and that book is a great way to start."
emacs,2xotva,rgrau,1 point,Tue Mar 3 14:55:15 2015 UTC,"I just bought a copy of that book. Yes, it's old, but so far it's the best read about writing lisp extensions I found. Also, I'm looking forward to reading  http://www.masteringemacs.org/.  It should be a matter of weeks."
emacs,2xotva,Trevoke,1 point,Wed Mar 4 08:56:43 2015 UTC,"All the afordmentioned documentation is referenced here: http://wikemacs.org/wiki/Emacs_Lisp_Ressources They are somewhat sorted by difficulty.  Wikemacs offers other good ressources, like a cookbook and a cheatsheet that allow to have a grasp of the built-in functions:  http://wikemacs.org/wiki/Category:Emacs_Lisp  and +1 for Writing Gnu Emacs extensions !"
emacs,2xrbnv,cutejumper,1 point,Tue Mar 3 05:38:27 2015 UTC,"I used a combination of projectile, helm, and helm-ag to manage searching across my .org files. By placing a "".projectile"" file in the folder where my org-mode files are I can use projectile-ag to search across all the org mode files.  Maybe something similar would work for you?"
emacs,2xrbnv,thnetos,1 point,Fri Mar 27 23:03:48 2015 UTC,"Thank you! This question didn't appear after I asked(I was not familiar with reddit and I know now it seems I need to first participate in some kinds of activities in the subreddit). I felt sad so I asked it on stackexchange instead. Here is the link.  I have two solutions right now actually. First one is using org-agenda-custom-commands as suggested in that stackexchange thread. The second one is very similar as yours. I sometimes feel inconvenient because I need to first call projectile-switch-project before I could call projectile-grep(or projectile-ag) so I write a command myself, borrowing code from helm-projectile-grep-or-ack. Now I can just call that command and search the notes using helm-projectile-grep without extra steps. I also borrow the code of helm-org-agenda-files-heading to search the headings in the notes.   I don't think the above two methods are perfect, although they work for me now. I think a helm interface for the org-agenda search would be great, but I don't know how to do that:-("
emacs,2xnr39,Kaligule,18,Mon Mar 2 11:30:31 2015 UTC,"If you are trying to look for vim inside emacs, try out the evil or spacemacs package. As for me, personally, the default emacs bindings make sense to me as that's what I use all the time."
emacs,2xnr39,kaushalmodi,2,Mon Mar 2 13:23:06 2015 UTC,Do you think a novice Emacs user that likes the idea of the vim bindings but never used vim to try that as well or should I stick with learning Emacs first?
emacs,2xnr39,holyfudge,3,Mon Mar 2 20:12:22 2015 UTC,learn emacs. rebind what annoys you
emacs,2xnr39,XANi_,1 point,Mon Mar 2 20:36:17 2015 UTC,Play around with Vim by itself or install evil-mode.
emacs,2xnr39,bryangarza,-5,Mon Mar 2 22:06:35 2015 UTC,"I never learned how to use vi. There was too much randomness in the key bindings and no help out there, so I never got the hang of it. This was why I tried Emacs."
emacs,2xnr39,roerd,21,Mon Mar 2 14:26:39 2015 UTC,"I don't get it. What you are asking for is exactly the vi style of editing, even the specific keybindings you suggest through bold text are those from vi. So what do you mean by ""too much randomness""?"
emacs,2xnr39,lhxtx,10,Mon Mar 2 15:52:04 2015 UTC,Maybe you should. What you're asking for is vi-style editing. Emacs will run vim style key bindings with evil mode.
emacs,2xnr39,lhxtx,3,Mon Mar 2 15:28:16 2015 UTC,Is it? I will have to give it a second try then.
emacs,2xnr39,bryangarza,1 point,Mon Mar 2 19:20:15 2015 UTC,Vim is based on composability. Download vim and run vimtutor in your terminal.
emacs,2xnr39,kshitagarbha,9,Tue Mar 3 16:58:58 2015 UTC,"The type of editing you described is exactly how vi/vim works, with motions, operators, and counts."
emacs,2xnr39,metaobject,8,Mon Mar 2 16:54:07 2015 UTC,"spacemacs gives you the orderly keys you are describing. it is also self-documenting in that if you pause for 1 second it will show you a menu with possible completions.  and if you go into insert mode then its basically a normal text editor. you don't need to use vim keys, though you can."
emacs,2xnr39,JeanPhilippeBernardy,2,Mon Mar 2 16:09:33 2015 UTC,"It would be wise to learn how navigate, edit, and save/quit (or exit without saving).  You never know when you're going to find yourself on a linux machine without emacs installed.  It's happened to me a few times."
emacs,2xnr39,dilap,1 point,Tue Mar 3 00:53:50 2015 UTC,"You may want to try boon-mode that I wrote. It's a modal editing layer, but I've taken cake of making the keybindings as logical as possible.  http://stable.melpa.org/#/boon"
emacs,2xnr39,RobThorpe,12,Thu Mar 5 07:47:54 2015 UTC,"I've used emacs since approximately forever, and the sad truth is, there is no deeper logic behind the bindings. They just weren't that well thought out, for whatever reason.  That said, the motion basics are find once you get used to them, and it turns out they end up showing up in other useful places, most notably bash and all standard OS X text widgets (which is almost all of them, so basically everywhere if you use a mac), so I'd recommend strongly considering sticking with at least the basic motion keybindings.  The one thing that drives me crazy is ""C-x o"" for other window, so I redefine it to simply ""M-o"" (and ""M-O"" to go the previous window). Then I end up accidentally running the face selection stuff a lot when I'm on a stock emacs, which is the default binding M-o.  (That you would use such a valuable, easy-to-hit keybinding for a command you will almost never use while a command you use literally every 10 seconds is relegated to a clunkier sequence is pretty emblematic of how not-very-well-thought-out the emacs keybindings are.)"
emacs,2xnr39,dilap,5,Mon Mar 2 16:12:28 2015 UTC,I've always been irritated by C-x o too. I redefine it to C-1.  When colours and fonts were added to Emacs and enriched-mode was created it was thought that a lot of people would use Emacs for word-processor like tasks. That's why M-o is such a short keypress. Of-course it never turned out that way.
emacs,2xnr39,instant_sunshine,1 point,Mon Mar 2 16:57:46 2015 UTC,"OK, I can see how M-o would've kind of made sense, in the excitement of it all."
emacs,2xnr39,BufferUnderpants,1 point,Mon Mar 2 18:02:33 2015 UTC,"Same I use s-' (ie. Cmd '  Most of my custom bindings aren't semantic, they're spacial. (ie. I bias towards key combinations that are easy on the fingers, for most of my common customisations.)  http://imgur.com/X1EDWvz"
emacs,2xnr39,oantolin,11,Wed Mar 4 03:59:56 2015 UTC,"Neither are [connected] ""Kill word"" (M-d) and ""Kill line"" (C-k).   Because M-d is connected to C-d, kill a character. C-k is likewise linked to M-k, kill sentence (which can be unpredictable with code, to be had).  Anyway, character golfing just isn't Emacs thing. Emacs is about extensibility, not really about minimizing keystrokes when editing text."
emacs,2xnr39,kabbotta,1 point,Mon Mar 2 13:31:57 2015 UTC,"Even so, it's not too bad at golfing. I've tried several of the vimgolf challenges in Emacs and usually come reasonably close to the Vim scores. (If that sounds like fun, I recommend installing Tim Visher's vimgolf client for Emacs."
emacs,2xnr39,oantolin,1 point,Mon Mar 2 16:53:45 2015 UTC,I remember reading a blog where the guy actually was able to beat a number of the vim scores using emacs.
emacs,2xnr39,instant_sunshine,1 point,Mon Mar 2 21:35:56 2015 UTC,"That may have been Tim Visher, the author of the package I mentioned. He has a series of videos on Vimeo where he does vimgolf challenges. He was writing the vimgolf Emacs client while he was making those videos and you can see the package's progress throughout the series."
emacs,2xnr39,nwr,1 point,Mon Mar 2 23:44:26 2015 UTC,"I'm not particularly worried about golfing either, but when I tried a bunch of vimgolf exercises, I got most at par or under."
emacs,2xnr39,tuhdo,8,Wed Mar 4 03:58:26 2015 UTC,"Emacs is definitely not a pleasant out of the box experience. It has really, really awful default bindings. Things you do often takes a lot of weird keystrokes while some short bindings are wasted on things that should not be bound to a key.  To make matters worse, there are a lot of naming issues with strange names for features that all other editors call something else. Command names also doesn't really follow any patters so you can never really guess what a command should do. To some part this is because there is only one huge flat scary namespace.  There are some great packages that can help you bring some order to the mess though. I really recommend Hydra, regions-binding-mode and guide-key.  But I really, really wish someone would fork it. Base it on chicken, saggitarius or racket. Remove all the old keybindings and make a fresh start. Like neovim but even more radical.  That said, I still use emacs as my main editor. And I've had more luck with getting it to work the way I want than I ever had with vim. And sublime seems to be abandonware by now (bought a license for st2, just a couple of months before the st3 announcement)."
emacs,2xnr39,nwr,2,Mon Mar 2 19:35:38 2015 UTC,"To make matters worse, there are a lot of naming issues with strange names for features that all other editors call something else.   It's the same as Vim, but people still use it.   Command names also doesn't really follow any patters so you can never really guess what a command should do. To some part this is because there is only one huge flat scary namespace.   Do you find the items in Start menu on Windows helpful? For example, you open your friend's laptop and he installed a bunch of program you never know. Could you guess what can those programs based solely on names alone? That's why we have built-in help system in Emacs. You should try helm-M-x; even if you have like 10,000 commands, it's a breeze to narrow commands and check key bindings, and if you wonder what command does what, you can just execute persistent action on that comand (bound to C-z by default) to see the help of that command. Execute persistent action again, and the help is closed.    But I really, really wish someone would fork it. Base it on chicken, saggitarius or racket. Remove all the old keybindings and make a fresh start. Like neovim but even more radical.   Until it is backward compatible with Emacs Lisp, similar to Neovim handles legacy Vimscript. Otherwise, it won't be useful because we have to reinvent the wheel the whole features accumulated in the past 30 years developed by Emacs community. And it would be better with Common Lisp, since it's closer to Emacs Lisp."
emacs,2xnr39,nwr,1 point,Tue Mar 3 09:44:12 2015 UTC,"Of course I run helm =) And thank you for that! I should have mentioned it in my top post but was too focused on keybindings, but Helm makes it so I don't have to remember a lot of keybindings.  Helm is one of the things that actually manages to solve some of the problems I was pointing at, namely to have a standard way of doing similar things.  And yes, there is no perfect editor. Or any piece of software. Emacs is just older."
emacs,2xnr39,spwhitton,1 point,Tue Mar 3 15:28:32 2015 UTC,Forgot one thing... I really miss a leader and a local-leader key =(
emacs,2xnr39,nwr,2,Mon Mar 2 19:37:54 2015 UTC,You can just bind to the C-c keymap?  Isn't that the same thing?
emacs,2xnr39,harsman,1 point,Tue Mar 3 02:07:50 2015 UTC,"Yes, it should be. But a lot of packages don't really respect that and use it as their default prefix map.  So it would help a lot if there was a default prefix for major modes and one for the user. Right now it seems that they are the same."
emacs,2xnr39,nwr,4,Tue Mar 3 08:43:10 2015 UTC,"C-c letter is for the user, C-c C-letter is for major modes"
emacs,2xnr39,tuhdo,3,Tue Mar 3 15:18:03 2015 UTC,"Aha. Thank you for that! I didn't know that.  Neither did the people developing org-mode, it seems."
emacs,2xnr39,nwr,2,Tue Mar 3 16:10:23 2015 UTC,Did you check out evil-leader? You should also give Spacemacs a try if you didn't know such package.
emacs,2xnr39,OrdovicianOperand,1 point,Tue Mar 3 09:45:07 2015 UTC,"No, I haven't. Did so now though. Seems to be a helper to define your own prefix mapping, right?  My problem is that C-c is supposed to be the leader key in emacs, but packages still adds bindings to it. It would be nicer if there was a default map that major modes put their bindings in, and a default map that only the user would put mappings in."
emacs,2xnr39,instant_sunshine,1 point,Tue Mar 3 15:43:06 2015 UTC,"Emacs supports hyper and super as modifiers, which according to helm-desc-bindings nothing I have installed with Spacemacs uses other than my own modifications."
emacs,2xnr39,nwr,1 point,Tue Mar 10 14:05:52 2015 UTC,Not really that interested in ST3 personally but implying that it's abandonware is irresponsible. http://www.sublimetext.com/3dev
emacs,2xnr39,smithzv,1 point,Wed Mar 4 04:22:39 2015 UTC,"Wow, the last month has been very active! Happy to see that!"
emacs,2xnr39,RobThorpe,7,Wed Mar 4 07:09:37 2015 UTC,"I think it is because it was assembled in bits and pieces by people like you and me over many years.  Each binding had some (perhaps dubious) reasoning behind it but ""it didn't really matter as anybody could change it easily"", or so goes their thinking.  It then snow-balled into what it is today.  Seriously, look no further than what is currently being developed and the default key bindings (or suggestions) that they defined.  Do they make sense?  For instance, in multiple cursors, C-> makes a new cursor on the next line?  Oh, that is because if there is an active selection it will make a new cursor at the next match.  And we use C-> for that because C-. will expand the active selection so it's only a shift away on most keyboards?  Why that?  Who knows, probably copying some other editor.  VI/Vim benefits from some better overarching design of the way you edit text.  One of the prices you pay when you allow everybody to drastically redefine their editor to their own liking is that people will actually do it and they might not make the best design decisions in the process."
emacs,2xnr39,roerd,1 point,Mon Mar 2 14:07:15 2015 UTC,"That's right. Emacs' keybindings grew over time.  Even at the beginning Emacs was an attempt to unify different editors (TMACS, TECMACS). These were editors based on macros on top of a variant of TECO that supported visual editing, they were in use in the MIT AI lab on ITS. The first Emacs was written the same way using a modified TECO and macros."
emacs,2xnr39,RobThorpe,1 point,Mon Mar 2 14:54:53 2015 UTC,"You seem to know a bit about the original, TECO-based Emacs. Were there other similarities besides the key bindings between this and the later, Lisp-based Emacs?"
emacs,2xnr39,dacap,4,Mon Mar 2 15:55:44 2015 UTC,"It was very similar. There was a mode-line, minibuffer and an echo-area. There was major-modes and minor-modes, a kill-ring and narrowing. Abbrev was there, so were keyboard macros, Isearch was there and so was Dired. The manuals were in Info format (though they were compiled by a different program, Scribe). There was a source-code tagging system like Etags and a mail system like Rmail (called ""Babyl""). There was a learn-by-doing tutorial, but it was a separate executable.  There was no syntax highlighting though as there were no colour terminals. Programming modes didn't have all the features they have now, they could do some indentation though. There was no shell mode because ITS didn't have a shell, but there were lisp-interaction modes.  The source code in TECO is really incomprehensible.  See this archive here: http://pdp-10.trailing-edge.com/mit_emacs_170_teco_1220/  The keybindings are in the file ""info:emacs.keys.1"".  I've never used it, I just know about from reading and watching some videos on YouTube."
emacs,2xnr39,tuhdo,7,Mon Mar 2 16:47:01 2015 UTC,"The only solution is to redefine all the shortcuts from scratch. I have my own ErgoEmacs-based keyboard bindings, I've been use that for more than ~four years and it's quite satisfying."
emacs,2xnr39,dacap,3,Mon Mar 2 13:43:13 2015 UTC,"Nice. Recently I customized Evil to accommodate to ErgoEmacs-like key bindings, and I'm pretty satisfied. After years of using default Emacs key bindings, I realized that it's not efficient as I thought; and arrows keys are not as bad if it is right at the homerow; it's actually better because there's no learning curve to learn as opposed to hjkl in Vim. The only things worth in Vim to learn are modal editing and its ability to combine action + modifier + text object/motions. Other thant that, I don't like its default key bindings that are heavily based on mnemonics but not ergonomics. I use Evil because modality gives me much more key bindings and text object combinations are pretty powerful at editing text. Here is my bindings.  Btw, what tool did you use create such nice keyboard layout?"
emacs,2xnr39,tuhdo,2,Mon Mar 2 14:08:21 2015 UTC,"I used Evil   I didn't know about Evil, I'll take a look to your key bindings.   what tool did you use create such nice keyboard layout?   It's just handmade CSS/HTML/JavaScript code"
emacs,2xnr39,dacap,1 point,Mon Mar 2 14:17:09 2015 UTC,"I didn't know about Evil, I'll take a look to your key bindings.   It's pretty much the same as yours, especially IJKL and OU and ZXCV. With Evil, I don't have to define additional key bindings for deleting words/lines... because you can combine them, i.e. x is a default key for cut, then pressing xo delete words forward, xu deletes word backward, xqu or xqo delete the whole word at point. In my case, q is the same as i in stock Vim: q is for entering insert mode, because i is used for move one line up. It's quite efficient, since q is above a and both are used for entering inserting mode in a slightly different fashion.   It's just handmade CSS/HTML/JavaScript code   I guess there's no easy way then."
emacs,2xnr39,kabbotta,2,Mon Mar 2 14:24:57 2015 UTC,"I guess there's no easy way then.   Yeah. Anyway I think the new ergoemacs-mode has a way to create .png files from the current layout, but I'm not sure how."
emacs,2xnr39,dacap,2,Mon Mar 2 14:29:01 2015 UTC,Isn't this a pain when dealing with different packages that don't follow your custom rules? One of the main draws for giving up Evil for me was that everything would be uniform across different packages.
emacs,2xnr39,oantolin,3,Mon Mar 2 21:38:49 2015 UTC,"Yes, it is. Indeed, you will need to customize them anyway. I've found that almost everything must be configured on Emacs. It looks like the whole Emacs UX can be improved in every single aspect. E.g. Emacs commands are too specific, and there are cases that you can group 3 or 4 functions in just one depending on the context. For example: just-one-space, delete-blank-lines, and delete-horizontal-space; or beginning-of-defun and backward-paragraph; or kmacro-start-macro and kmacro-end-macro (with one key you can switch on/off the macro recording)."
emacs,2xnr39,dacap,1 point,Mon Mar 2 22:25:27 2015 UTC,"I like your first example, but I'm not so sure about combining the start and end macro keys. I like the default bindings where <F3> starts a new macro or inserts the macro counter, and <F4> stops recording or plays the last recorded macro (or both with prefix argument!). You can't make a single key do all of that, and once you need at least two keys, why change them?"
emacs,2xnr39,RobThorpe,1 point,Mon Mar 2 23:48:27 2015 UTC,"I use macros quite a lot, so the most common thing I do is starting and stopping macro recording (I've found ""M-k k"" sequence quick, sweet, and to the point). And then I can play the macro with ""M-k l"" (that's a L without Shift) and then repeat pressing just L (I don't need to move hands from the home row). Functions keys are not easy to find in different keyboards (and I use 3 different keyboard layouts, 2 notebooks, and 1 PC), so I prefer to stay in the home row."
emacs,2xnr39,dacap,1 point,Tue Mar 3 00:11:52 2015 UTC,I see what you mean about function keys. You know that keyboard macro start and stop are still bound to the old bindings C-x ( and C-x ) ? I'd argue those are just as fast as the one you've customized. There is some logic in using two keys. If F3 is pressed during the macro then it inserts the macro counter which is useful for numbering things. Also F4 both ends a macro and executes it.
emacs,2xnr39,RobThorpe,1 point,Thu Mar 5 02:48:08 2015 UTC,"My keyboard bindings are based on ErgoEmacs, and Ctrl+X is ""cut"" (as regular text editors). I use Ctrl key very occasionally as I started with ErgoEmacs because the pinky problem. I cut (kill) with Alt+X, anyway I've found that killing sexp/paragraphs is the most common thing I do. (Basically all Ctrl+key Emacs functionality is remapped to something else for me.)"
emacs,2xnr39,kabbotta,1 point,Thu Mar 5 15:39:27 2015 UTC,"I see. If you use macros a lot you'll find the double meanings useful, whatever keys you bind them too. I.e. start macro recording/insert counter and stop macro recording/execute macro."
emacs,2xnr39,RobThorpe,1 point,Thu Mar 5 16:39:44 2015 UTC,"True, I suppose complaining about having to customize emacs is missing the point a bit. I just have an obsession with simplicity."
emacs,2xnr39,wadcann,1 point,Tue Mar 3 00:06:47 2015 UTC,"Yes, it is. Indeed, you will need to customize them anyway. I've found that almost everything must be configured on Emacs. It looks like the whole Emacs UX can be improved in every single aspect.   Certainly everything can be improved. That doesn't mean you should improve it by extensive customizations, I recommend not doing that. The coding time is non-trivial and the maintenance is non-trivial. Things frequently break when moving to a new version of Emacs. There are wierd corner cases.  On the other hand, writing your own major-modes and minor-modes to deal with your own particular work. E.g. a prog-mode for a configuration file type you use often. That imposes relatively little maintenance burden."
emacs,2xnr39,kabbotta,6,Tue Mar 3 00:15:34 2015 UTC,"The default bindings are roughly-optimized for frequency of use.  ""Kill line"" is a frequent operation, so making it C-k l would probably be an issue.  Outside of that, the n, b, p, f bindings were intended to be easier to remember, but I think that they were poorly-chosen, as it takes very little time to learn the four basic navigating bindings...but trying to change them at this point would create a massive bindings change rippling across packages everywhere."
emacs,2xnr39,aport,3,Mon Mar 2 17:01:23 2015 UTC,"I've found my need for that kind of ""micro-navigating"" has really diminished now that I've embraced incremental search more. Now, I generally just look at where I want the cursor, press C-s, then type the first few letters I see and I've navigated to where I want to be."
emacs,2xnr39,kabbotta,3,Mon Mar 2 21:42:33 2015 UTC,you would like ace-jump-mode
emacs,2xnr39,jnaiz,2,Tue Mar 3 07:29:41 2015 UTC,"Nice, I think I will."
emacs,2xnr39,newfor2015,3,Tue Mar 3 08:01:59 2015 UTC,"I think this is a topic that keeps coming up, because the default keybindings are just not very comfortable. But since a lot of people (and software) have been using them for a long time, it will be difficult to change them.  Personally, I found the QWERTY layout just as uncomfortable as the emacs keybindings, so I now use colemak. The n,p keys are then more easily reached."
emacs,2xnr39,oantolin,2,Mon Mar 2 13:21:59 2015 UTC,"You'd just learn it, and get used to it. If you really don't like it, all it'll take is a minute to remap it to your liking. That's why emacs is so great."
emacs,2xnr39,RobThorpe,3,Mon Mar 2 18:45:12 2015 UTC,"It doesn't take a minute! Rebinding once you have figured out what binding you actually want takes much less than a minute, but the figuring out part takes much more than a minute!"
emacs,2xnr39,Erakko,2,Mon Mar 2 23:50:00 2015 UTC,"Exactly.  Take editing English text for example. Newbies start by tinkering with the character-by-character navigation keys. Then they start using C-a and C-e. After a while they realize that for most purposes the word-by-word navigation keys are better. Then they start using M-a and M-e, then M-{ and M-}. Then finding using isearch, C-x C-x, deactivated marks, pages, registers and then they start bookmarking stuff.  So people begin with the idea that they only need a few keys. That leads them to the idea that they can rebind lots of things. But, in the long run loads of stuff is needed and almost every simple keybinding has an important job (the only real outlier is M-o as was discussed elsewhere)."
emacs,2xnr39,oantolin,4,Tue Mar 3 00:33:03 2015 UTC,Please stop trying to defend the default binds. Those binds need a massive rework. It makes nosense that everybody needs to rebind everything.
emacs,2xnr39,RobThorpe,2,Tue Mar 3 04:36:51 2015 UTC,"I'm not defending them, I'm just saying it's hard to pick good bindings. If someone wants to redesign all the bindings they should be aware that (1) it's a lot of work, (2) people won't all agree that the result is good and there will still be plenty of reminding going on."
emacs,2xnr39,Erakko,1 point,Wed Mar 4 13:20:07 2015 UTC,"What you must understand is that whether or not they need a ""massive rework"" they will never get one.  Many people (myself included) are very accustomed to the default bindings. It would take us years to unlearn them and learn new ones, during which we be much less productive. We're not prepared to do that.  Many of the community of established users won't change, they'll use whatever version of Emacs with the old bindings. So, changing many of the bindings effectively means creating a new editor that's not really Emacs."
emacs,2xnr39,tuhdo,1 point,Tue Mar 3 11:29:14 2015 UTC,"Your time will pass and soon there will be more new users than old ones.   And if keys are good, sensible, easy to learn and dont require hands to be in un-ergonomic postures the new bindings should be good news for everybody.  And you oldschoolers can ""rebind"" those new keys if you like?!"
emacs,2xnr39,RobThorpe,2,Tue Mar 3 13:00:35 2015 UTC,"But the only key bindings that are considered ""acceptable"" are the one with common key bindings i.e. arrow keys for movement, C-x = cut, C-v = paste and C-c = copy. But even so, people still rebind anyway."
emacs,2xnr39,its_never_lupus,2,Tue Mar 3 13:22:58 2015 UTC,"That could happen, the problem is likely to be agreeing on new keybindings."
emacs,2xnr39,RobThorpe,2,Tue Mar 3 13:36:41 2015 UTC,"This is probably heresy, but I've redefined many common shortcuts to make them either similar to normal desktop application (C-o for open, C-f for find etc.) or to group related commands together (C-s for save, M-s to save as a different name etc.) or just for convenience (C-x C-x to cut line, alt-up/down to switch panels etc.).  And I tend to use cursor keys and home and end for most normal navigation, in combination with control and shift, just like in a normal text editor.  For me the appeal of emacs is the major modes, the advanced tools like calc and ansi-term, and the beautiful file and buffer navigation. I've never been convinced that the rather esoteric default key bindings are a good thing."
emacs,2xnr39,its_never_lupus,1 point,Mon Mar 2 15:47:05 2015 UTC,Why not use cua-mode? It's the normal way to do that.
emacs,2xnr39,RobThorpe,3,Mon Mar 2 16:55:58 2015 UTC,"Because cua-mode doesn't do that. It fixes C-x, C-c and C-v to work like normal desktop apps, and a couple of other nice features like letting you select a region with shift and cursor keys, but no more."
emacs,2xnr39,aerique,1 point,Mon Mar 2 17:19:56 2015 UTC,"I see, I didn't know it was so limited."
emacs,2xnr39,instant_sunshine,1 point,Tue Mar 3 00:36:31 2015 UTC,"This is probably heresy, but I've redefined many common shortcuts to make them either similar to normal desktop application  I've done that as well in the past, works really well. Perhaps we should put it on GitHub in an easy to load file.  (I've since switched to evil-mode.)"
emacs,2xnr39,aerique,1 point,Tue Mar 3 11:47:54 2015 UTC,"IIRC the Emacs For OSX build maps a lot of CUA/HUI keys s-o, s-w, s-z,  (s = Super, mapped to Mac Cmd)"
emacs,2xnr39,instant_sunshine,1 point,Wed Mar 4 06:07:29 2015 UTC,"Possibly, Aquamacs definitely does."
emacs,2xnr39,maufdez,1 point,Wed Mar 4 07:48:55 2015 UTC,"Never used Aquamacs, so I will go out on a limb and say the EmacsforOSXBuilds used to (at the very least!)"
emacs,2xnagy,bitsan,4,Mon Mar 2 06:50:58 2015 UTC,"As tuhdo already mentioned I would recommend trying out the current master branch. I too had multiple crashes per day with the current ""stable"" version but after upgrading the crashes went away.  If you use homebrew you can install the current master version with 'brew install --HEAD --cocoa emacs'"
emacs,2xnagy,halbtuerke,2,Mon Mar 2 08:21:09 2015 UTC,"Same for me, although I used --devel instead of --HEAD, --HEAD did not build for me for some reason."
emacs,2xnagy,mjhoy,1 point,Mon Mar 2 12:00:52 2015 UTC,"To install HEAD, I had to do brew fetch emacs --HEAD --cocoa --force and then brew install emacs --HEAD --cocoa, and the installation took around 10 minutes, works fine now though."
emacs,2xnagy,bryangarza,1 point,Mon Mar 2 16:59:29 2015 UTC,"This is what I've ended up doing, as updating to Yosemite (10.10) caused my old emacsformacosx version to fail.  A version of VCS head from late last November (25.0.50.1) is running fine, so I probably won't touch it until something else goes wrong."
emacs,2xnagy,username223,1 point,Mon Mar 2 15:36:52 2015 UTC,can you get it to compile in such a way that you have the graphic emacs and not just the damn terminal emacs?
emacs,2xnagy,fartlex_m,4,Tue Mar 3 17:05:32 2015 UTC,"Use https://github.com/railwaycat/emacs-mac-port from Yamamoto.  The ""official"" OSX port (and emacsformacosx) is full of bugs and basically bad garbage, since it's derived from the old gnustep port.   Yamamoto has been the old carbon emacs maintainer for many years and he knows what he's doing. His OSX port has lots of features that the ""official"" port doesn't, works a lot better, never crashed on me ever and is basically awesome."
emacs,2xnagy,isoskeles,1 point,Mon Mar 2 20:53:30 2015 UTC,"Some builds last year were a bit temperamental, however I haven't had a crash in Emacs mac port since late 2014, with:   /usr/local/Cellar/emacs-mac/emacs-24.4-mac-5.1   OSX 10.9.5 btw."
emacs,2xnagy,instant_sunshine,3,Wed Mar 4 03:48:38 2015 UTC,People was getting lots of OS X crashes as reported in this issue. Either they update Emacs to master branch (Emacs 25) or use emacs-mac-port.
emacs,2xnagy,tuhdo,2,Mon Mar 2 07:14:31 2015 UTC,Yes! I use emacsforosx and it crashes all the time. It is incredibly annoying. I'm on 10.9.5.
emacs,2xnagy,GTChessplayer,1 point,Mon Mar 2 07:42:56 2015 UTC,I regularly install emacs from git master branch with:  git pull && ./autogen.sh && ./configure --with-ns && make install   and don't meet your problem. I'm on 10.10.2.
emacs,2xnagy,xuchunyang,1 point,Mon Mar 2 09:05:30 2015 UTC,Try running it from command-line for now. I had the same issue. No crashes since switched to CLI.
emacs,2xnagy,microamp,2,Mon Mar 2 19:33:07 2015 UTC,"Do you launch the GUI from the CLI?  Obviously super isn't available from the CLI version, so you lose a modifier key.  For me at least, that's not an acceptable loss for regular work."
emacs,2xnagy,instant_sunshine,1 point,Wed Mar 4 03:52:38 2015 UTC,"No, the CLI one. The most annoying bit is losing the ability to directly copy-and-paste via clipboard, but still way better than experiencing multiple crashes a day."
emacs,2xnagy,microamp,2,Sat Mar 7 03:58:51 2015 UTC,"ok, you should definitely try alternative builds.  The Emacs Mac port is very stable right now  See https://github.com/railwaycat/emacs-mac-port  (Use brew to install it. Once installed, just move the newly compiled Emacs.app into /Applications/, it's much better than symlinking it.)  brew tap railwaycat/emacsmacport brew update brew install emacs-mac"
emacs,2xnagy,instant_sunshine,1 point,Sun Mar 8 01:31:37 2015 UTC,Thanks. Going to try it out this week and see what happens. Thanks for the suggestion!!
emacs,2xnagy,microamp,2,Sun Mar 8 19:19:32 2015 UTC,"I had a lot of crashes last year, but since Nov 2014, I can't remember having any."
emacs,2xnagy,instant_sunshine,1 point,Mon Mar 9 01:27:57 2015 UTC,I added the --devel flag to the brew formula as there are several patches going into the relatively stable version 24 branch that offer significant improvements on OS X. Give that a try as it doesn’t take too long to rebuild.
emacs,2xl1o2,vibhavp01,9,Sun Mar 1 18:53:18 2015 UTC,The Windows/Mac is interesting too. Emacs 25.1 will still run on Windows 9X but not on OS X 10.5 or PowerPC
emacs,2xl1o2,tekai,3,Sun Mar 1 19:26:04 2015 UTC,"It already supports running as a server (M-x server-start). Same thing, you just always need to have one frame open."
emacs,2xl1o2,sabof,3,Sun Mar 1 21:55:18 2015 UTC,"As an EMACS newbie, why is this a good thing?"
emacs,2xl1o2,felboka,2,Wed Mar 4 05:05:01 2015 UTC,"I remember seeing in the commit log that following a link in eww to a PDF file now opens it in a Docview buffer. That's very handy! But, I can't see that mentioned in NEWS? Has that been removed?"
emacs,2xl1o2,Inopem,2,Mon Mar 2 00:37:32 2015 UTC,Still waiting for official 64 bits builds.
emacs,2xl1o2,pmsm1100,1 point,Sun Mar 1 21:01:53 2015 UTC,Great!
emacs,2xl1o2,srt19170,-10,Sun Mar 1 20:50:36 2015 UTC,who uses emacs on windows?
emacs,2xl1o2,SymbolicLink,14,Sun Mar 1 21:50:30 2015 UTC,Lots of people and for a very long time.  Emacs makes things bearable and lets you do stuff without getting in the way.  There was a time when it was the only thing on windows that would let you have regex's.  Emacs rocks even on windoze.
emacs,2xl1o2,pkuriakose,5,Sun Mar 1 22:03:46 2015 UTC,I do. At work I'm on Windows. I use emacs on OS X at home and on Linux when I can
emacs,2xl1o2,jeenajeena,3,Sun Mar 1 22:24:32 2015 UTC,At least 10 high level c++ devs at my place of work.
emacs,2xl1o2,benfitzg,5,Mon Mar 2 00:40:12 2015 UTC,"odd question, especially given the title of the post.  anyone clicking it will likely be an emacs/windows user.  why did you click it?  i am assuming that if you read /r/emacs you are an emacs user which implies you're not a windows user?  well if for whatever reason you ever have to run windows (and btw, it's not as bad as the unix fans would have you believe.  actually it's not bad at all) then check emacs out.  you might just like it, and be appreciative of the people whose time and work go to make it happen - on windows, that is."
emacs,2xl1o2,xoo-,5,Mon Mar 2 00:40:19 2015 UTC,These OSes are all just wrappers for the one true OS.
emacs,2xl1o2,MCHerb,3,Sun Mar 1 23:00:50 2015 UTC,"right! as long as they run emacs, they're ok for me."
emacs,2xl1o2,xoo-,1 point,Mon Mar 2 00:39:23 2015 UTC,"I do. In fact I compiled 24.4 recently for my company who, unfortunately, had Visual C to compile with - and was complaining about the break from 24.3 where Emacs source moved from C89 to C99 (which is unsupported in Microsoft Visual C). Had to make a lot of edits to bring it back to C89."
emacs,2xm8rd,longtimeviewer,1 point,Mon Mar 2 00:47:05 2015 UTC,Try to advice helm-projectile-find-dir which opens directory using dired by default.
emacs,2xkvgi,roneau2005,1 point,Sun Mar 1 18:04:08 2015 UTC,"Whenever possible, menu is a good place to find out most common commands of package."
emacs,2xkvgi,xuchunyang,1 point,Mon Mar 2 00:40:29 2015 UTC,Thanks for the comment. I had not realised the things in the menu. I tend not to look at it since I normally work in terminal mode. Interesting entries and a whole Contents section.
emacs,2xgzxr,wasamasa,10,Sat Feb 28 16:38:22 2015 UTC,"Given the age of the code base, I'm sure there are some gems floating in there"
emacs,2xgzxr,flarkis,4,Sat Feb 28 19:36:43 2015 UTC,"web-mode is not Emacs. :)  It is scary, though."
emacs,2xgzxr,hvis,1 point,Sat Feb 28 22:41:17 2015 UTC,What do you mean ??
emacs,2xgzxr,fxbois,1 point,Tue Mar 3 14:18:20 2015 UTC,"Aside from the coding style (mentioned in this blog), you have humongous functions like web-mode-scan-blocks and web-mode-block-scan.  From where I'm standing, they're simply begging for better abstractions."
emacs,2xgzxr,hvis,1 point,Tue Mar 3 17:37:22 2015 UTC,"ok, so you absolutely don't know what you are talking about. I am reassured. You should really be more respectful about the work of people who make things go ahead. I am so pissed off by lamerz like you."
emacs,2xgzxr,fxbois,1 point,Tue Mar 3 18:15:57 2015 UTC,Sure. It's not like I'm maintaining a different multiple-mode package.
emacs,2xgzxr,hvis,0,Tue Mar 3 19:28:07 2015 UTC,"Please tell me a little bit about your project (for example, its name). I'll be delighted to look at the code ... its quality will perhaps explain the ""popularity"" of your package."
emacs,2xgzxr,fxbois,3,Tue Mar 3 21:21:53 2015 UTC,His horrors aren't horrific enough for my taste.
emacs,2xgzxr,RobThorpe,4,Sat Feb 28 19:34:03 2015 UTC,"I'm sorry about that, have hoped that at least the latest one regarding the build process would suffice. Or are you possibly hinting at yourself having become immune to the weirder parts found in old codebases?"
emacs,2xgzxr,RobThorpe,18,Sat Feb 28 19:42:30 2015 UTC,"Unexec is ugly, but it's necessary. Without it Emacs would have to load every .elc file when it started. That would take ages. Unexec's purpose is to compensate for a common deficiency in operating systems.  I'm not impressed by this whole ""horrors"" business. It seems that modern programmers are immune to the horrors they create because they consider them necessary. Earlier programmers considered the horrors they created to be necessary too, and they were right just as often as modern programmers are.  Take web programming, for example. It's horrible. To begin with, you have ill-thought out languages like Javascript. There are things like verification done twice once in the browser then again at the server in a different language. Then you have front-ends done two or three times in different dialects of javascript, then again for handhelds/tablets or ""web frameworks"" that do that kind of stuff internally.  All of this is justified by necessity, to a large extent that's correct. But, in a few years time it won't be. When that happens the code will still be there because the programmers involved will understand it and see no reason to dispense with it. The same is true of older hacks. The Emacs maintainers could delete most of the unexec* files that deal with OSes that are no-longer supported.  That would make unexecing a smaller wart, but it wouldn't really be helpful."
emacs,2xgzxr,hvis,3,Sat Feb 28 20:47:55 2015 UTC,"That's an isolated feature, implemented in ~1000 lines of C, that only affects the rest of how Emacs works in a positive way. If that's not elegant, I don't know what is.  It might sound peculiar, but as soon as computers are fast enough to boot Emacs fast enough without dumping it first, this part can just be dropped. Another couple of decades might do that."
emacs,2xgzxr,RobThorpe,7,Sat Feb 28 22:35:09 2015 UTC,"That's unlikely unfortunately. The problem is loading many .elc files. Each file open command takes quite a lot of time, even if the load itself could be made faster. One of the reason for that is that file open are system actions. The OS must have the information that a file is opened and must propagate it to every core. On some platforms like MS Windows a virus checker must be allowed to do it's thing in some cases too. These problems are likely to get worse not better in the future as the number of cores, threads and elc files rises. It may be possible to pack all the .elc files into one huge file though.  However, there are things that can be done. Several Common Lisp implementations and XEmacs have moved to using mmap to do dumping. This is cleaner. Once all of the systems Emacs supports have a suitable mmap command it could be done that way. Also, the use of system mallocs causes some problems. A fix for this has been found by the Cygwin Emacs maintainers. GNU Malloc is used for building Emacs and dumping and a switch is done to system Malloc after that. I understand that the other builds of Emacs are been moved to that system.  In the long run lots of other stuff could be done too. One possibility is compressing the strings in .elc files. If you look at some .elc files or at the Emacs binary you'll find that most of the space is taken up by docstrings. Using a simple dictionary compressor could save a huge amount of space. The decompression into the help-buffer could be imperceptible to the user."
emacs,2xgzxr,hvis,1 point,Sun Mar 1 16:27:34 2015 UTC,Thanks for the insight!
emacs,2xgzxr,aaptel,2,Mon Mar 2 01:21:04 2015 UTC,"That's an isolated feature   Unfortunately that's not true. Some things can't be done if the current process will be dumped, so there are tests that checks whether we are running a soon-to-be-dumped emacs or not throughout the codebase."
emacs,2xgzxr,apella,2,Mon Mar 2 10:49:30 2015 UTC,"This is a fun read, thanks wasama!"
emacs,2xgzxr,sabof,2,Sat Feb 28 20:23:15 2015 UTC,Might actually be a good way to introduce advanced topics. Understanding will be instantly rewarded by a sense of superiority.
emacs,2xgzxr,MCHerb,2,Sat Feb 28 20:24:57 2015 UTC,Only if the person never had the experience of looking at their own code which has aged by years.
emacs,2xgzxr,_hexagon-,6,Mon Mar 2 00:39:17 2015 UTC,/me ponders  Yet another newbie (wasamasa) writing about things he does not understand. Stick to helping newbies on IRC and leave the critique to those who know what they are talking about.  /me goes back to sleep
emacs,2xgzxr,fxbois,0,Sun Mar 1 16:20:10 2015 UTC,I tend to agree with you. Critics by DOers are often more legitimate.
emacs,2xgzxr,fxbois,3,Tue Mar 3 14:20:21 2015 UTC,"I'm not sure what makes you think that I neither write Emacs packages nor help out on #emacs and other places like on the Emacs Stackexchange.  Because I actually do. And unlike u/_hexagon, I do not need to hide behind a throwaway account for my rants and critique."
emacs,2xgzxr,vermiculus,-2,Tue Mar 3 20:19:22 2015 UTC,"But wasamasa, you must understand that displaying a ""line"" in a buffer (form-feed.el) does imply the same constraints that writing a multi mode compatible most html template engines ever created ... Moreover I was wondering, in eyebrowse.el, have you anticipate the development of eyebrowse-switch-to-window-config-10 and eyebrowse-switch-to-window-config-11 ? It would be a great addition for your community. And do me a favor, do not forget to update your goddam-theme with web-mode-faces"
emacs,2xialo,shackra,5,Sat Feb 28 23:22:28 2015 UTC,"I would not try and swap out the bindings, i would instead always bind C-x b and C-x f to the same function but make this function do different things based on whatever your rules are:  (defun shackra:find-file ()   (interactive)   (call-interactively (if (projectile-project-p)                           'projectile-find-file                         'find-file))) (define-key global-map (kbd ""C-x b"") 'shackra:find-file)   same idea for find buffer.  NB: while you're at it: I find C-xC-b and C-xC-f to be much more convenien bindings for find-file and switch-buffer"
emacs,2xialo,segv0,2,Sun Mar 1 08:56:13 2015 UTC,"I had no idea how to write this function, thank you very much!  EDIT: How do you do a function to behave differently with the C-u keys? In the case of my custom switch-buffer function, I may find myself looking to switch to a buffer not related to the project I'm working at...  EDIT 2: Oh, nevermind!  EDIT 3: Yay! I did it! Thank you for your help! :D"
emacs,2xialo,dgtized,1 point,Sun Mar 1 20:27:42 2015 UTC,"I'm not sure the best way to auto-detect that you are in a projectile project to swap out the keybindings. I guess you could make a minor mode, but not sure the right trigger.  My personal solution was to to bind <menu> to the prefix map for projectile. This lets me just hit <menu> f or <menu> b."
emacs,2xialo,Greglucas,1 point,Sun Mar 1 00:50:24 2015 UTC,"I sometimes press C-c p b thinking that I'm inside a project, but Projectile tells me that I'm not, therefore the order isn't executed:  helm-projectile-switch-to-buffer: You're not in a project   I guess there is a way to know I'm inside a project :)"
emacs,2xi9bi,sbay,3,Sat Feb 28 23:10:34 2015 UTC,does C-u affects align ? just binding 'align seems fine.  (define-key --keymap-- --key-- 'align)   anyway Alt key is usually translated to Meta.
emacs,2xi9bi,zk_phi,1 point,Sun Mar 1 01:42:01 2015 UTC,"You are right, not sure why it is mentioned C-u M-x 'align on some forums online. M-x 'align works on its own.  Thanks."
emacs,2xi9bi,vermiculus,1 point,Sun Mar 1 03:38:09 2015 UTC,"Giving the C-u prefix gives align a 'prefix argument'. In this case, it will set separate to t:  align is an interactive autoloaded Lisp function in `align.el'.  (align BEG END &optional SEPARATE RULES EXCLUDE-RULES)  Attempt to align a region based on a set of alignment rules. BEG and END mark the region.  If BEG and END are specifically set to nil (this can only be done programmatically), the beginning and end of the current alignment section will be calculated based on the location of point, and the value of `align-region-separate' (or possibly each rule's `separate' attribute).  If SEPARATE is non-nil, it overrides the value of `align-region-separate' for all rules, except those that have their `separate' attribute set.  RULES and EXCLUDE-RULES, if either is non-nil, will replace the default rule lists defined in `align-rules-list' and `align-exclude-rules-list'.  See `align-rules-list' for more details on the format of these lists."
emacs,2xi9bi,kaushalmodi,2,Sun Mar 1 03:42:31 2015 UTC,I edebugged it; I don't see that behavior. C-u does not affect align. But it DOES affect align-regexp if the OP meant that.
emacs,2xi9bi,vermiculus,1 point,Mon Mar 2 13:46:24 2015 UTC,"Hmm – you're correct; I didn't examine the actual form itself. We can see  (interactive ""r"")   in the definition of align – no prefix is passed as any argument in the usual way."
emacs,2xi9bi,kaushalmodi,1 point,Mon Mar 2 13:51:40 2015 UTC,"It is possible for a function to be sensitive to the prefix arg even if the interactive call is plain (interactive), by making use of the current-prefix-arg var. And the best way to verify if the arg got passed is by instrumenting the function using edebug.  Here's a simple fn; test running M-x test-arg and C-u M-x test-arg.  (defun test-arg ()   (interactive)   (message ""arg = %s"" current-prefix-arg))   Above should although be implemented as below to avoid user confusion:  (defun test-arg (&optional arg)   (interactive)   (let ((arg current-prefix-arg))     (message ""arg = %s"" arg)))"
emacs,2xi9bi,vermiculus,1 point,Mon Mar 2 14:04:44 2015 UTC,Well I do know that :) but you'll recall I said the usual way. Most needs are met with the interactive form.
emacs,2xi9bi,kaushalmodi,1 point,Mon Mar 2 14:26:09 2015 UTC,"Oh yes of course, also I didn't pay attention to the user name :)"
emacs,2xi9bi,vermiculus,1 point,Mon Mar 2 14:32:04 2015 UTC,You recognize me? :O
emacs,2xi9bi,kaushalmodi,1 point,Mon Mar 2 18:43:52 2015 UTC,Thanks for the clarification. Makes sense now.
emacs,2xi9bi,vermiculus,1 point,Sun Mar 1 03:49:00 2015 UTC,They most likely meant C-u M-x align-regexp.
emacs,2xi9bi,vermiculus,1 point,Mon Mar 2 13:47:13 2015 UTC,"Please edit to say #'align – that's how you refer to functions. It didn't use to make a difference, but now several key interpreters of emacs lisp (such as emacs itself) use this extra information."
emacs,2xh8uv,MyNameIsFuchs,4,Sat Feb 28 17:58:24 2015 UTC,Do you use company-mode? Maybe it's trying to auto-complete the path. That's the only guess I have.
emacs,2xh8uv,MonsieurBanana,1 point,Sat Feb 28 18:22:19 2015 UTC,Yeah that seems to be it. I've disabled company mode and it stopped. Now trying to figure out how to disable it from using tramp.
emacs,2xh8uv,wasamasa,3,Sat Feb 28 18:32:13 2015 UTC,"I doubt it is using TRAMP directly, it's much more likely that it's the act of expanding file names that triggers the TRAMP handler.  I'd therefore try removing the company-files backend from company-backends and see whether that solves it."
emacs,2xh8uv,RobThorpe,1 point,Sat Feb 28 18:46:52 2015 UTC,Are you sure this is happening because you're using Tramp?  Does disabling it actually help? I.e. if you have (setq tramp-mode nil) and company-mode on with the company-files backend then does the same thing keep happening?
emacs,2xh8uv,RobThorpe,1 point,Sat Feb 28 20:27:15 2015 UTC,Disabling TRAMP mode did stop it. So unless company mode introduces some specific setting to disable the tramping autocomplete within a buffer I think I'll have to keep it disabled.
emacs,2xh8uv,RobThorpe,2,Sat Feb 28 21:18:58 2015 UTC,It appears that this has been fixed in Company mode: https://github.com/company-mode/company-mode/issues/301 https://github.com/company-mode/company-mode/commit/5e29e41929f3adc801508271c3082b71b902949a  You could try applying this patch to company-files.el on your system.
emacs,2xh8uv,RobThorpe,1 point,Sat Feb 28 21:40:31 2015 UTC,"I know, I saw that. I'm already past that version and it's still doing the same. I think the real problem is GNU's tramp. Not company which just passes it through to tramp."
emacs,2xh8uv,username223,1 point,Sat Feb 28 21:46:26 2015 UTC,"So, does your Company have the fix in that commit?  Perhaps it was missed in the released version.  Tramp is part of Emacs' file handling and has been for many years. Company mode should be aware this and should not trigger remote file access. Tramp could be the problem if it's triggering on a path that's not a proper Tramp path."
emacs,2xh8uv,RobThorpe,1 point,Sun Mar 1 16:09:21 2015 UTC,"If the same behaviour happens with another completion library, like auto-complete then it's definitely a bug in Tramp.  I suggest:   Do (file-remote-p ""/YourRemoteServer:"") if it reports nil then report a bug against Emacs for Tramp. If not then open a bug for Company and one for Emacs."
emacs,2xh8uv,username223,1 point,Sun Mar 1 17:18:14 2015 UTC,"You probably have one of the super-aggresive modern completion packages enabled, which tries to parse things around point as filenames, which calls into Emacs' file-related functions, which triggers tramp's hooks.  Set debug-on-error to t, then lean on C-g the next time this happens to see what is at fault."
emacs,2xh8uv,balkenbrij,1 point,Sun Mar 1 18:32:37 2015 UTC,"Yeah, that seems to be it. I've just disabled it globally with (setq tramp-mode nil). I don't trust emacs with remote editing. Sometimes I still mess up keypresses. So I'll just use good old SSH + VI to edit files remotely."
emacs,2xh8uv,wasamasa,1 point,Sat Feb 28 18:21:40 2015 UTC,"I assume by ""ssh aliases"" you mean you have entries in fstab that access remote machines by ssh. In that case, why are you surprised that this is happening?  Why not do this:   Get rid of your ssh aliases. Instead make Emacs bookmarks with short names. Use TRAMP to edit remote files."
emacs,2xhmon,shackra,3,Sat Feb 28 19:55:14 2015 UTC,What's the issue with Tramp?  I find copying public keys to remote systems and customizing my ~/.ssh/config file with SSH proxies make Tramp even easier to use.
emacs,2xhmon,howardthegeek,1 point,Sat Feb 28 22:35:36 2015 UTC,"nothing, I was wondering, that's all..."
emacs,2xhmon,Denommus,2,Sat Feb 28 22:39:44 2015 UTC,SSH.
emacs,2xhmon,nivekuil,1 point,Sat Feb 28 22:09:42 2015 UTC,:T
emacs,2xe94c,zoidberghoneydew,6,Fri Feb 27 21:24:47 2015 UTC,"I don't think it's a good idea to automatically open it as root, but you can re-open a file via sudo.  I got the following from http://emacsredux.com/blog/2013/04/21/edit-files-as-root/ (that page also shows you how to do it automatically):  (defun sudo-edit (&optional arg)   ""Edit currently visited file as root.  With a prefix ARG prompt for a file to visit. Will also prompt for a file to visit if current buffer is not visiting a file.""   (interactive ""P"")   (if (or arg (not buffer-file-name))       (find-file (concat ""/sudo:root@localhost:""                          (ido-read-file-name ""Find file(as root): "")))     (find-alternate-file (concat ""/sudo:root@localhost:"" buffer-file-name))))   It only works for local files, but it should be possible to modify it so that it works with remote files."
emacs,2xe94c,uhoreg,2,Fri Feb 27 22:27:03 2015 UTC,didnt know how much i needed this until just now. thank you.
emacs,2xcuhj,dzecniv,1 point,Fri Feb 27 15:04:20 2015 UTC,"Some of you appreciated this link yesterday, so here it is properly :) I'd like to show that discover.el isn't limited to Dired (as i read somewhere) and is very easy to use.  At the end of the readme, I wonder about a usability improvement. We have the function discover-discover that links to the discover interface of other packages. It would nice if hitting ""q"" didn't quit everything but came back to the global discover-discover instead. Is it possible to achieve that ? With discover.el, with hydra ?  Also, don't you think it would be better to integrate those recipes in the packages themselfs (the author of yafolding welcomed my PR with great interest) ? it's a longer process though."
emacs,2xcb22,projectmoon,1 point,Fri Feb 27 11:08:19 2015 UTC,Midnight mode actually is running Clean Buffer List. So you want to look at the documentation for that.    (setq clean-buffer-list-delay-general 1) would set it to one day.  http://www.emacswiki.org/emacs/CleanBufferList
emacs,2x8kc1,cjk101010,5,Thu Feb 26 15:05:12 2015 UTC,"Another solution, if you use Jekyll: https://github.com/nibrahim/Hyde"
emacs,2x8kc1,Acktung,4,Thu Feb 26 16:18:57 2015 UTC,I wrote a post time ago about it: http://sanchezsobrino.github.io/blog/posting_to_jekyll;_its_all_about_emacs/
emacs,2x8kc1,Imxset21,1 point,Thu Feb 26 18:19:54 2015 UTC,This is amazing. I've been using Emacs for years but I'm still surprised every day by what people can make it do.
emacs,2x8kc1,KDr2,3,Thu Feb 26 19:19:24 2015 UTC,I write my blog with Emacs and Org-Mode :)  http://kdr2.com https://github.com/KDr2/kdr2-on-web
emacs,2x8kc1,pyr,3,Fri Feb 27 02:34:01 2015 UTC,"I write http://spootnik.org with org-mode and o-blog, a pure emacs solution that works out quite well, I recommend it for simple home pages."
emacs,2x8kc1,Ubertekk,2,Fri Feb 27 06:46:42 2015 UTC,"I actually post from emacs too. I've got a scheme program on my server which will change the posts into html. A hg hook runs it, so when I push to the server from monky everything's generated properly."
emacs,2x8kc1,dzecniv,1 point,Thu Feb 26 19:05:31 2015 UTC,"Hey, that looks awesome. I suppose you need a cron job to regularly pull the repo ? Can you describe a bit more please ?!"
emacs,2x8kc1,Ubertekk,1 point,Fri Feb 27 17:25:42 2015 UTC,"Sure. So on my server I have the hg repository at ~/blog. It's filled with sequentially increasing filenames: 1.blog, 2.blog, etc. I edit ~/blog on my laptop and push to the server's ~/blog. The hgrc of the server's is: [hooks] changegroup = /home/$USER/bin/updaterepo.sh  the script just runs hg update to pull the files into the working tree and runs the generator program. You could do the same with jekyll or whatever equivalent."
emacs,2x8kc1,dzecniv,1 point,Fri Feb 27 18:36:31 2015 UTC,"Thanks. So you push to the server anyway (that's what I'd like to avoid), and you gain the fact to not run the generator program.   What I'd like to do is push to gitlab and have my server see the change (cron job I guess), pull it and run the generator program. Like this I have my blog articles in source control online so than I can ocasionnaly write an article from anywhere. (I don't want to use github and its github pages (I want my libre solution :D to have gitlab pages is a big request by the community though))."
emacs,2x8kc1,Ubertekk,1 point,Fri Feb 27 20:55:38 2015 UTC,"Yeah, you'd need to keep a cron job on your server to keep an eye on it in this case. I don't see why you don't just create the repository on your server like I do though, do you not have shell access or something?"
emacs,2x8kc1,dzecniv,1 point,Fri Feb 27 21:34:09 2015 UTC,"Oh, obviously ! :)  I don't have a shell access yet, but I can upgrade my solution."
emacs,2x8kc1,bastibe,2,Sun Mar 1 19:58:16 2015 UTC,Another org-based blog: http://bastibe.de/2013-11-13-blogging-with-emacs.html
emacs,2x8kc1,bzg,1 point,Fri Feb 27 07:32:40 2015 UTC,... or just publish a RSS feed from your org-mode website: http://bzg.fr/blogging-from-emacs.html
emacs,2x8kc1,dzecniv,1 point,Fri Feb 27 10:41:53 2015 UTC,Here are a number of solutions: http://wikemacs.org/wiki/Blogging Please anyone complete the list !
emacs,2x8kc1,MidnightCommando,-2,Fri Feb 27 13:19:53 2015 UTC,"You mention you use a home grown blog solution.   Please unfuck it for mobile viewing, or use something that is already unfucked."
emacs,2x960c,linuxwes,3,Thu Feb 26 17:51:59 2015 UTC,"Windows line endings, I suppose. Run  M-x set-buffer-file-coding-system undecided-unix   on source files and it should disappear."
emacs,2x960c,robal,2,Thu Feb 26 20:21:40 2015 UTC,Looks like your files have Windows style end of line characters. You can run dos2unix <*.EXT> to remove those characters.
emacs,2x960c,kaushalmodi,2,Thu Feb 26 18:44:41 2015 UTC,"Thanks, that does seem to have fixed it.  I just recursively ran that on every file in the whole project tree and the problem isn't showing up anymore."
emacs,2x960c,monotux,2,Thu Feb 26 21:55:09 2015 UTC,Using an external tool to do something that can be done in emacs without any fuzz? :)  See robal's comment :)
emacs,2x730y,workisnotfun,3,Thu Feb 26 04:04:08 2015 UTC,"You should be able to do this with a mode hook for HTML files by adding something like the following to your emacs initialization file (.emacs, or ~/.emacs.d/init.el):  (require 'impatient-mode) (add-hook 'html-mode-hook #'impatient-mode)   assuming that you always want HTML files to use impatient-mode.  If you need to do more things than just enable impatient-mode, you can create your own function which calls impatient-mode and use that function as the hook method. The following example will automatically start simple-httpd if it has not already been started and turn on impatient-mode anytime an HTML file is loaded:  (require 'impatient-mode) (require 'simple-httpd)  (defun my-html-mode-hook ()   ""Starts the `simple-httpd' server if it is not already running, and turns on `impatient-mode' for the current buffer.""   (unless (get-process ""httpd"")     (message ""starting httpd server..."")     (httpd-start))   (impatient-mode))  (add-hook #'html-mode-hook #'my-html-mode-hook)   edit: don't need hook functions, just check for httpd process."
emacs,2x730y,kelthan,2,Thu Feb 26 18:38:50 2015 UTC,"Impatient-mode needs to be turned on for external css, javascript, and any other assets too to see the actual webpage you want but I kind of get the idea. I can add a similar hook to those modes as well (I think they're all using web-mode) but for images or other assets I guess I need to open them in a buffer then turn impatient mode on them.   Would you if something can be done with dired? Maybe highlight all the files, and turn impatient mode on for all of them? Or highlight the files -> open to buffer -> and turn on impatient mode for the buffers that were just opened?"
emacs,2x730y,kelthan,1 point,Fri Feb 27 00:36:27 2015 UTC,"If you are using web-mode for all of your CSS, Javascript, HTML, and other web-related modes, you can hook 'web-mode-hook' instead of 'html-mode-hook'.  It should be possible to use Dired for this by adding a new command that just opens the files and starts impatient mode, but that seems weird to me. But I'm not a huge user of Dired."
emacs,2x730y,bryangarza,1 point,Fri Feb 27 01:05:53 2015 UTC,I actually just started using Dired recently and find that it's quite nice for manipulating files.   I was just looking to see if there was a method that would give you more control over which files get impatient mode turned on but this solution is plenty good. Thank you :)
emacs,2x730y,BruceConnor,1 point,Fri Feb 27 02:12:22 2015 UTC,I think helm-mode lets you mark multiple buffers and act on all of them simultaneously.
emacs,2x5kvk,bgbgbg666,1 point,Wed Feb 25 21:04:43 2015 UTC,"Wordlint.el provides compiler settings to go along with an external program called Wordlint. Wordlint provides a means to scan plain-text prose documents for redundancies with a fairly high degree of customizability.  Also available is a somewhat non-standard checker for flylint, flycheck-wordlint.el, however this is kind of overkill for the task of redundancy proofing.  Feedback is greatly appreciated as I am fairly new to Emacs, and am uncertain if either of these approaches is best for integrating Wordlint. Thanks!  Edit 4:20 am: it appears some folks were having trouble installing wordlint this evening. If `cabal install wordlint' failed before, a new version that ought to build properly is available now."
emacs,2x4jtt,Ryckes,8,Wed Feb 25 16:40:37 2015 UTC,"From my config:  (defun gk-markdown-preview-buffer ()   (interactive)   (let* ((buf-this (buffer-name (current-buffer)))          (buf-html (get-buffer-create                     (format ""*gk-md-html (%s)*"" buf-this))))     (markdown-other-window (buffer-name buf-html))     (shr-render-buffer buf-html)     (eww-mode)     (kill-buffer buf-html)))   This assumes that you have the very latest release of Emacs (24.4.1 or sth.) and the markdown-mode installed."
emacs,2x4jtt,delbosforo,5,Wed Feb 25 19:12:53 2015 UTC,"Sorry but I'm not sure what you mean by ""render"" in this context.  Are you looking for something like markdown-mode?"
emacs,2x4jtt,ericjmr,2,Wed Feb 25 16:48:25 2015 UTC,"Yes! Now I know that's exactly what I was looking for, but I when I read the page I thought it did not provide a preview of the text. Thank you!"
emacs,2x4jtt,instant_sunshine,2,Wed Feb 25 17:48:55 2015 UTC,"If you feel like being experimental, you can grab the realtime-emacs-markdown-view from my .emacs.d/plugins.  It requires Ruby and Bundler installed.https://github.com/ocodo/.emacs.d/tree/master/plugins/realtime-emacs-markdown-view  Note: I may be wrong, but if you're not very comfy working on the command line, it might be difficult/annoying to setup.  Once it's going though you have realtime previewing on the markdown you're working on."
emacs,2x4jtt,rafatauil,2,Thu Feb 26 07:04:56 2015 UTC,"I think he wants to preview the markdown in a buffer almost like markdown-mode but without the markdown sintax.  Eg. In markdown-mode when you write this, the word 'this' becomes bold. He want it but without showing the **."
emacs,2x4jtt,hirnbrot,1 point,Wed Feb 25 17:11:49 2015 UTC,You mean write **this** - reddit's comment syntax is (a dialect of) markdown.
emacs,2x4n09,PrismHelix,2,Wed Feb 25 17:03:46 2015 UTC,"People have talked about EDITOR and ALTERNATE_EDITOR, sometimes you have to set VISUAL. Sometimes it's done with MIME types stored somewhere. It depends on the program you're talking about."
emacs,2x4n09,RobThorpe,3,Thu Feb 26 02:01:55 2015 UTC,"What shell and/or operating system do you use? Where doesn't it work?  For me,  export EDITOR=""emacs -nw""   works in bash (and IIRC zsh), while  set -x EDITOR ""emacs -nw""   works in fish."
emacs,2x4n09,hirnbrot,5,Wed Feb 25 17:07:03 2015 UTC,I am using zsh on arch and the first one worked. Looks like I forgot the quotes. Thanks!
emacs,2x4n09,dharris,2,Wed Feb 25 17:12:34 2015 UTC,"Yes. This. You should:   start emacs after any reboot/crash make sure that (server-start) is in your .emacs (or in an appropriate startup file under .emacs.d set emacsclient as your default editor (export EDITOR=emacsclient) never quit emacs until you need to reboot again   I do this on remote servers as well, but I start emacs -nw in a screen session."
emacs,2x4n09,__jim__,2,Wed Feb 25 17:36:13 2015 UTC,"This can be done automatically with  export EDITOR=""emacsclient -c -a ''""   so that emacsclient will start emacs if it's not running already."
emacs,2x4n09,EatMoreCrisps,2,Wed Feb 25 19:52:27 2015 UTC,"Or, set the environment variable ALTERNATE_EDITOR='', which has the same effect as -a ''"
emacs,2x4n09,ginopascali,1 point,Wed Feb 25 20:13:18 2015 UTC,$ echo $EDITOR emacsclient
emacs,2x3tl3,mfreddit,5,Wed Feb 25 12:37:41 2015 UTC,Please fix your certificate...
emacs,2x3tl3,AnAirMagic,3,Wed Feb 25 19:46:53 2015 UTC,Curiously missing app store link:  https://appsto.re/us/DbMH4.i
emacs,2x1uzv,bryangarza,11,Tue Feb 24 23:56:22 2015 UTC,You can even select a region and press s:)
emacs,2x1uzv,paparent,5,Wed Feb 25 00:18:46 2015 UTC,Also you can use -/+ to change the hunk granularity.
emacs,2x1uzv,Space_Butts,5,Wed Feb 25 02:29:49 2015 UTC,"Damn, you beat me while I was looking for this  http://i.imgur.com/wxqfb11.jpg"
emacs,2x1uzv,agumonkey,1 point,Wed Feb 25 02:34:02 2015 UTC,"Personal most used feature. I loved git spirit on allowing surgically precise commits of only related pieces. Magit makes it trivial, kudos."
emacs,2x1uzv,bakuretsu,5,Wed Feb 25 09:31:09 2015 UTC,"Yes, this is basically a wrapper around git add --interactive. Magit is really thorough."
emacs,2x1uzv,flarkis,1 point,Wed Feb 25 00:28:24 2015 UTC,Or git add --patch
emacs,2x1uzv,mine0,1 point,Wed Feb 25 01:31:50 2015 UTC,"This also works on git commit, so you can add and commit only parts of files in one step (git commit --patch foo/file.py foo/file2.py ...) instead of two (git add --interactive foo/file.py foo/file2.py && git commit)."
emacs,2x1uzv,EatMoreCrisps,3,Wed Feb 25 09:55:09 2015 UTC,"I'll add one of my favorite kind-of-related git+magit features: very streamlined squashes and fixups.  Many of us started with a semi-manual workflow if we want to amend an existing commit - commit the changes, then do a rebase with E and shuffle the commits around and set them to 'squash' or 'fixup' manually, but it can be much simpler with git autosquash and magit's commit options.  First thing, you need to enable autosquash in git:  git config --global rebase.autosquash true    When the commit log message begins with ""squash! …"" (or ""fixup! …""), and there is a commit whose title begins with the same …, automatically modify the todo list of rebase -i so that the commit marked for squashing comes right after the commit to be modified, and change the action of the moved commit from pick to squash (or fixup).   Then the fixup workflow becomes:   stage the code you want to add to an old commit c f, select the old commit  with . (do other work and goto 1 as required) (eventually, later) rebase with E, when you just hit C-c C-c as it's done all the work for you … profit!"
emacs,2x1uzv,dima55,1 point,Wed Feb 25 15:32:52 2015 UTC,"Better yet, you can use commit-patch: http://porkrind.org/commit-patch/  diff-mode provides functions to move around a patch and to manipulate hunks. You can also simply edit the patch like any other buffer. You then C-c C-c to commit your arbitrary patch buffer. This is fundamentally better than magit or ""git add --interactive"". AND it's not git-specific."
emacs,2x1uzv,throwaway,3,Wed Feb 25 02:53:04 2015 UTC,What's better about it?
emacs,2x1uzv,__notmythrowaway__,1 point,Wed Feb 25 04:33:51 2015 UTC,"Does commit-patch work only with one file at a time? I often need to stage bits of multiple files and at least on Windows, git is slow as fuck."
emacs,2x1uzv,jordonbiondo,1 point,Wed Feb 25 05:09:12 2015 UTC,"On editing hunks:  I developed a macro that lets you define functions that act on the buffer region shown in a magit hunk. So I can define a function that runs delete-trailing-whitespace on a single magit hunk under my cursor with just:  (define-magit-unstaged-hunk-action jorbi-magit/cleanup-this-hunk (beg end)   ""Delete trailing whitespace in the current unstaged magit hunk.""   (delete-trailing-whitespace beg end))   It's not as nice as directly editing the hunk from the status buffer but it's still very useful when reviewing changes before committing.  I have that function specifically bound in my magit-status-mode-map so I can easily browse through my changes and clean them up without actually switching to the buffer or opening the file.  The code behind that can be found inside my config here:  https://github.com/jordonbiondo/.emacs.d/blob/use-package-chords/jorbi/jorbi-magit.el"
emacs,2x1uzv,vermiculus,1 point,Wed Feb 25 16:09:55 2015 UTC,"Use the right tool for the job. If you're using git, Magit is the right tool for the job."
emacs,2x1uzv,dima55,2,Wed Feb 25 03:50:19 2015 UTC,Try commit-patch. It is a better tool for this particular job.
emacs,2x1uzv,vermiculus,5,Wed Feb 25 03:54:39 2015 UTC,I suppose it's entirely dependent on your workflow and what you do with the information.
emacs,2x1uzv,AndersBakken,1 point,Wed Feb 25 03:57:37 2015 UTC,I had a hard time getting it to work. I did the following: - cloned the repo - eval'ed git commit-patch-buffer.el - made changes to commit-path-buffer.el and saved them - M-x commit-patch-buffer <ret> - Select commit-patch-buffer.el It brought up an empty buffer called commit. No sign of the current diffs to commit-patch-buffer.el.   I'm not entirely sure how to use this thing. I'm sure I'm doing something stupid but I can't seem to figure out what. I have to admit I'm quite attached to magit but I'm always willing to look at other tools.
emacs,2x1uzv,dima55,2,Wed Feb 25 07:39:02 2015 UTC,"In a diff-mode buffer (any .patch file or anything you get from C-x v = or C-x v D for instance) hit C-c C-c. That's your commit buffer. Type the log message there, hit C-c C-c again, and you have committed the patch. This is not attached to magit, and works with any other vcs, and VC mode supports quite a few.  The main difference is that you can edit the patch arbitrarily. diff-mode lets you navigate hunks (M-n/M-p/M-N/M-P), delete hunks (M-k), split hunks (C-c C-s) and many other things. And you can just edit the patch like any other buffer.  When editing code, many people (myself included) end up making many unrelated changes simultaneously. This workflow allows you to very quickly and easily disentangle those changes. Simply editing the patch gives you way finer granularity than something like magit, which looks at hunks."
emacs,2x1uzv,EatMoreCrisps,2,Wed Feb 25 07:50:38 2015 UTC,"I'm having a hard time understanding this - since commits are often over multiple files IME, you typically don't want to commit fragments, more often just stage them.  Does this work?  And in magit you can just select fragments and stage them (as is the point of this whole post), so I don't get the granularity difference.  It sounds just the same.  Editing the diff in place is ... a thing...  not something I've wanted to do, but presumably I'm just not getting how useful that could be."
emacs,2x1uzv,dima55,1 point,Wed Feb 25 15:14:09 2015 UTC,"A patch buffer can span multiple files. Why would you want to stage instead of commit? The higher granularity comes from the editing. You might have unrelated stuff mixed in on the same line (I often do), and editing the patch is a very easy way to clean that up."
emacs,2x1uzv,AndersBakken,1 point,Wed Feb 25 19:19:17 2015 UTC,I guess I can see how that's useful. For me the vc-agnosticity is of little use since all my projects currently are git-based. I might give it a shot. Thanks for the explanation.   Actually. I just tried it out and I could kinda see that it can be better at times. I do prefer to use magit for committing so I agree that staging it would be nicer for me at least.
emacs,2x1qf3,MyNameIsFuchs,4,Tue Feb 24 23:22:41 2015 UTC,"If you call align-regexp interactively, it will prompt for a regex, which can be as simple as a single character. Most of the time, it does what you mean.  You can go a little crazy and pre-define patterns to align on and map those, perhaps with a similar prefix key, like this one, which aligns on a single equal sign (to avoid aligning == and so on):  (defun my-align-single-equals ()   ""Align on the first single equal sign.""   (interactive)   (align-regexp    (region-beginning) (region-end)    ""\\(\\s-*\\)="" 1 1 nil))   I haven't needed any further tweaks, but that function could be easily changed to accept a single character interactively to align on and always align on the first single instance. The reason I defined this as a function is because of align-regexp's bizarre non-interactive regex syntax; all of that \\(\\s- stuff is boilerplate that needs to be there or patterns don't work."
emacs,2x1qf3,bakuretsu,4,Wed Feb 25 00:18:21 2015 UTC,Unfortunately align-regexp is not interactive really. I still have to press enter to see the alignment. Or am I missing something?  The VIM package is really interactive. You just press one key to enter the character and you see the result immediately and just press enter when you're done with the alignment. You can change it and it'll just get re-evaluated. Can this be achieved with emacs?
emacs,2x1qf3,bakuretsu,1 point,Wed Feb 25 14:48:03 2015 UTC,Pretty much anything can be achieved but that does sound a little more involved.
emacs,2x1qf3,kaushalmodi,1 point,Wed Feb 25 16:32:50 2015 UTC,"I guess the way to go is to do this with Lively:  http://www.emacswiki.org/emacs/lively.el  And have something like this (my-regex-align (here) (next-paragraph) ""regex"" ""1"" ""1"").  This would also have the advantages that it's saved and can later be re-evaluated once more items need alignment."
emacs,2x1qf3,liillliillliiii,1 point,Wed Feb 25 19:58:00 2015 UTC,"Yeah you're right. I guess I should've used ""Live updating aligning"". Btw, I've right now done it like this:  (defun my-align-regexp (regexp &optional group spacing repeat)   (align-regexp (region-beginning) (region-end) (concat ""\\(\\s-*\\)"" regexp) group spacing repeat))   And then I just write it as a comment in source code and eval it with C-x C-e  ;; Set mark with C-Space (EVIL) after paragraph. ;; (my-align-regexp ""\,\\(\\)"" 1 1 t)  ;; my @primes = ( ;;     1,2,3,5,7, ;;     11,13,17,19,23, ;;     29,31,37,41,43,   I tried to make it live and editable with livelier and the patch proposed here:  http://lukego.livejournal.com/23379.html  But somehow it doesn't work for the expression (it works with a simple (message))"
emacs,2x1qf3,smarpho,2,Thu Feb 26 22:15:22 2015 UTC,The align-regexp could be the answer. Check out these QnA on the emacs SE for examples:   http://emacs.stackexchange.com/q/2644/115 http://emacs.stackexchange.com/a/2405/115 http://emacs.stackexchange.com/a/240/115 http://emacs.stackexchange.com/a/7343/115
emacs,2x1qf3,liillliillliiii,3,Fri Feb 27 01:42:34 2015 UTC,Unfortunately align-regexp is not interactive really. I still have to press enter to see the alignment. Or am I missing something?  The VIM package is really interactive. You just press one key to enter the character and you see the result. You can change it and it'll just get re-evaluated. Can this be achieved with emacs?
emacs,2x1qf3,smarpho,2,Wed Feb 25 02:13:02 2015 UTC,"M-x align-regexp  then once you're bored of that,  C-u M-x align-regexp"
emacs,2x1qf3,liillliillliiii,1 point,Wed Feb 25 14:50:10 2015 UTC,"I'm a beginner and I have a question about C-u that came up when looking into alignment methods. When using vanilla align (not align-regexp), why doesn't M-x align just work? Why do I have to do C-u M-x align?"
emacs,2x1qf3,davidchristiansen,2,Wed Feb 25 03:53:47 2015 UTC,"From the EmacsWiki page:   Sidenote: The default text-mode rules in ‘align-rules-list’ are “too aggressive” to be enabled by default, therefore you need to specify the universal arg (C-u) to enable them."
emacs,2x1qf3,codygman,1 point,Wed Feb 25 07:24:00 2015 UTC,Aren't functions that do something special for the universal argument supposed to advertise this in their documentation?   I would have expected to be able to learn this from C-h f align but it doesn't say anything like this.
emacs,2x1qf3,davidchristiansen,2,Wed Feb 25 08:03:42 2015 UTC,"That was my thinking.  I read through the 'align' defun and couldn't figure it out either. Googling the issue turned up the EmacsWiki quote, but I still don't get why it's not part of the (interactive ...) declaration."
emacs,2x1qf3,excitedaboutemacs,1 point,Wed Feb 25 19:03:08 2015 UTC,I know of align-regexp. But it's not actually interactive as far as I can tell.
emacs,2x1qf3,Random1DollarTip,2,Wed Feb 25 19:12:46 2015 UTC,Is there something like align-regexp that takes balanced parens into account?  I'd like to change the following contrived example:  lengthIs [] Z = True lengthIs [] (S _) = False lengthIs (x :: xs) (S n) = lengthIs xs n lengthIs (x :: xs) Z = False   into  lengthIs []        Z     = True lengthIs []        (S _) = False lengthIs (x :: xs) (S n) = lengthIs xs n lengthIs (x :: xs) Z     = False   even in cases where there's nested parenthesized expressions with spaces.
emacs,2x1qf3,changetip,1 point,Wed Feb 25 14:50:46 2015 UTC,You'd probably need the AST or at least something that differentiates between arguments to do that I think.
emacs,2x1d5z,aport,4,Tue Feb 24 21:54:10 2015 UTC,"For number 2. Either use projectile's projectile-compile-project function which will look up the project tree for the make file for you, or run compile once from the base directory and use the recompile command to simply run it again. Alternatively you can just press g in the compilation buffer."
emacs,2x1d5z,jordonbiondo,1 point,Tue Feb 24 22:03:25 2015 UTC,projectile-compile-project   This seems like what I was looking for! And it has a bunch of other cool features too. Thanks!
emacs,2x1d5z,rmuslimov,3,Tue Feb 24 22:13:41 2015 UTC,"For number 1. Don't use dir-locals.el, implement your own function which will set to your variable whatever you want. I already did somthing pretty same for python: https://github.com/rmuslimov/flycheck-local-flake8/blob/master/flycheck-local-flake8.el"
emacs,2x1d5z,AnAirMagic,1 point,Tue Feb 24 22:08:40 2015 UTC,I still need to specify my include paths somewhere. I cross-compile a lot for different platforms and include paths are kind of wonky project-specific.  I suppose a function could parse the project's Makefile and set the variable? Time to learn elisp.
emacs,2x1d5z,bakuretsu,3,Tue Feb 24 22:13:00 2015 UTC,"Yup, that's what something this CMake integration with flycheck does"
emacs,2x13db,BruceConnor,1 point,Tue Feb 24 20:46:56 2015 UTC,"Semantic Refactor uses it quite often. You can read the code here.  One example use case is local variable renaming. I want that after visiting and renaming all occurrences of a variable, point returns to the exact same position as before. Without this function, it would burden my to reinvent half baked implementation of my own. The use case I mentioned is common in general: search and/or replace something, then returns back to original position.  Another example is buffer indentation without moving pointe:  (defun example-indent-buffer()   (save-excursion     (indent-region (point-min) (point-max))))   The above code indents buffer and returns to original point. Without save excursion, after indenting, point is at the bottom, and this is extremely annoying.  Thanks."
emacs,2x13db,tuhdo,1 point,Tue Feb 24 21:11:16 2015 UTC,"There might be some misunderstanding. The question is whether anyone uses it to preserve mark, not point. :-) Tons of people use it to restore point position, Stefan is asking about the mark."
emacs,2x13db,tuhdo,1 point,Tue Feb 24 21:14:34 2015 UTC,"Yes, I do use the mark. For example, after you rename a few variables, the original point is not the same text anymore (i.e. buffer could be shrank or expanded). In this case, save-excursion brings me back to correct text - the exact same text regardless of buffer changes - with its mark saving."
emacs,2x13db,username223,1 point,Tue Feb 24 21:23:30 2015 UTC,"There are 105 uses in my personal config, and I suspect at least some of them rely on this behavior.  I have several commands that go off and do something, and which should not mess up my editing state, including point, mark, and mark-active.  save-excursion is a convenient way to do this."
emacs,2x13db,instant_sunshine,1 point,Tue Feb 24 21:33:18 2015 UTC,"From later in this thread...   It does seem risky.  At the same time, I can't find a single piece of code that relies on this functionality so far.  So either the risk is minuscule, or I haven't looked in the right way. Hence this thread, to try and see who and how might rely on this.   The risk isn't miniscule,  there are likely thousands of user scripts which utilise this, some may change the mark / region, and expect to have them restored, since that's the given functionality.  There is zero reason to mess with this function."
emacs,2x13db,kaushalmodi,1 point,Fri Mar 6 02:58:17 2015 UTC,It's breaking the awesome expand-region package! I have opened an issue on the package git; can more people please confirm this? Thanks!
emacs,2wzhxh,curious-scribbler,14,Tue Feb 24 13:13:32 2015 UTC,"I ran into the same issue as you.  So I recommend use-package to better organize your init.el. Now my config file looks like this, which I find to be much more readable and managable."
emacs,2wzhxh,ericjmr,2,Tue Feb 24 13:29:24 2015 UTC,"I'm gathering my courage to rewrite my emacs config with use-package.   I'll keep org-babel though, I like it to have a fast overview of my plugins."
emacs,2wzhxh,MonsieurBanana,3,Tue Feb 24 15:32:16 2015 UTC,"You can just do the reverse of org babel, ""read"" your init.el and generate org for each (use-package) block with subheaders for each :keyword and use that for your readme.  Having a packages customization all in one use-package is nice because you always know where to go to find whats been changed.  I have a function that reads my init.el and generates a completing read for all top level use-package blocks in my config then when I select one it jumps me right to it, which makes for easy navigation of your config.  My config:  https://github.com/jordonbiondo/.emacs.d"
emacs,2wzhxh,jordonbiondo,2,Tue Feb 24 16:18:18 2015 UTC,"The basic way to switch to use-package is to look for:  (add-to-list 'load-path ""lisp/foo/"") (require 'foo) (foo-mode 1)   And rewrite it as:  (use-package foo :load-path ""lisp/foo/"" :config (foo-mode 1))"
emacs,2wzhxh,ericjmr,2,Tue Feb 24 15:46:59 2015 UTC,Also worth checking out :idle instead of :config if you don't need the mode right away.
emacs,2wzhxh,spwhitton,2,Wed Feb 25 05:11:20 2015 UTC,"With version 2.0 of use-package, you'd say :defer 5 and still use :config, rather than using :idle (which no longer exists)."
emacs,2wzhxh,jwiegley,1 point,Tue Mar 24 15:27:52 2015 UTC,"Thanks for pointing out use-package. As long as your init is, I am impressed with the neatness. Being a new user, I can read and understand all that you have added to your configuration. Makes me want to do the same :-) Thanks again."
emacs,2wzhxh,monotux,4,Wed Feb 25 02:22:09 2015 UTC,"I use one .el for each major area (company-mode, buffer-handling...) and load them dynamically from my init.el. I use use-package for installing packages and for the settings."
emacs,2wzhxh,username223,1 point,Tue Feb 24 14:01:48 2015 UTC,"Same.  My init is an eldritch horror, but I currently have ~/.emacs.d/0-init-*.el for early-load stuff like utility macros, and ~/.emacs.d/init-*.el for package customizations, all of which are loaded from init.el like so:  (dolist (file (sort (file-expand-wildcards ""~/.emacs.d/init-*.el"") #'string<))   (load (file-name-sans-extension file) t))   Until you get over 1000 lines of customizations, I'd just stick with the single-file approach, using org, outline, or whatever to organize it."
emacs,2wzhxh,monotux,1 point,Tue Feb 24 18:14:55 2015 UTC,"In case anyone is interested in how my setup is distributed, here it goes:  ~/.emacs.d $ wc -l *.el    10 c-acejump.el    13 c-auctex.el    14 c-auto-complete.el     3 c-backups.el     4 c-bookmarks.el    17 c-buffers.el    11 c-calendar.el    70 c-circe.el    10 c-company.el    44 c-diminish.el    11 c-dired.el     4 c-discover.el   253 c-editing.el    31 c-erc.el    11 c-eshell.el    10 c-expand-region.el    39 c-fikatime.el     3 c-gitgutter.el    68 c-helm.el     7 c-hideshow.el    58 c-hydra.el     7 c-key-chords.el    44 c-lisp.el    36 c-lyskom.el     5 c-magit.el     9 c-multiple-cursors.el    30 c-org.el     5 c-php.el    12 c-projectile.el     9 c-python.el    17 c-smartparens.el     7 c-term.el     6 c-tramp.el     9 c-undo-tree.el    44 c-user-settings.el    31 c-wm.el   128 c-worktime.el     3 c-yascroll.el    14 custom.el   213 foo.el    87 init.el  1407 totalt"
emacs,2wzhxh,username223,1 point,Wed Feb 25 09:51:47 2015 UTC,And mine:  foobar:.emacs.d$ wc -l 0-init*.el init*.el      104 0-init-macro.el      860 0-init-util.el       83 init-blast-mode.el      151 init-c.el        2 init-cruft.el      106 init-dired.el      154 init-eshell.el       19 init-filesets.el      309 init-gnus.el      294 init-haskell.el      137 init-info.el      172 init-java.el      177 init-lisp.el      129 init-lush.el        5 init-nxhtml.el      911 init-octave.el      141 init-perl.el        0 init-planner.el       25 init-records.el       16 init-scheme.el       43 init-ses.el      323 init-tex.el      266 init-text.el       17 init-tnt.el       29 init-uptime.el     1102 init-util.el     1664 init.el     7239 total
emacs,2wzhxh,kaushalmodi,5,Wed Feb 25 17:05:52 2015 UTC,"I just finished a major re-org of my emacs setup. The entry point of my config is the init.el file.    My init.el ""requires"" all the setup-* files using use-package The setup-* packages then ""require"" (again using use-package) the package or ""feature"" that setup file is configuring. Usually for a package X, I have a setup-X.el. But I also have setup files like setup-editing.el, setup-search.el, etc which are collections of related packages and elisp snippets. I like to test out the latest emacs build from git while also using the stable version 24.4. So I have created a mechanism to have both versions running simultaneously without any conflicts. They use their own copies of elpa*/ dir, custom*.el, etc. But the beauty is that they share the same setup*.el files, projectile cache, etc.   I rely heavily on the use-package package. Here is how it helps me:   Faster emacs load times by making use of :mode, :interpreter, :commands, :init and :bind keywords in use-package. Ease of choosing the package source: from Melpa or from a local path (:load-path) Ease of disabling packages that you don't think are needed or are causing some trouble for time being (:disabled t) Associating the setup related to each package in its own (use-package ..) wrapper and making the code easier to read The super awesome bind-key package that ships with use-package"
emacs,2wzhxh,AdrieanKhisbe,2,Tue Feb 24 16:10:29 2015 UTC,I second this. By using org-mode you get outlining capabilities for your init.el (actually init.org). This allows you to expand/collapse sections. Here is mine: http://www.srid.ca/emacs/ | https://github.com/srid/.emacs.d
emacs,2wzhxh,yilmazhuseyin,1 point,Tue Feb 24 17:55:21 2015 UTC,"That's what I do, but I find it doesn't scale very well, beside it's not really modular. Considering more and more switching to a list of .el per category.  (I know I can set up file to tangle, but it will be verbose, and hard to maintain)"
emacs,2wzhxh,to3m,1 point,Wed Feb 25 07:36:49 2015 UTC,Modularity doesn't necessarily mean separate entities on the filesystem. A single .org file can scale well with the effective use of outlining capabilities.
emacs,2wzhxh,forked_tongue,3,Wed Feb 25 10:04:55 2015 UTC,I put every package configuration in its own module and load all the modules from my main init file. Here it is:  https://github.com/huseyinyilmaz/emacs-config/blob/master/lisp/user-init.el  I find this structure really useful and easy to debug.
emacs,2wzhxh,forked_tongue,1 point,Thu Feb 26 00:31:45 2015 UTC,"I do the same thing, pretty much. One .el file for each package XXX, called configure-XXX.el. (So I've got configure-company-mode.el, configure-c-mode.el, configure-python-mode.el, configure-winner.el, and so on.) Each of these requires all the files for that package, whatever it is, performs any package-related customization, then does a (provide 'configure-XXX). (For stuff that doesn't conveniently fit into this structure, I've got one called configure-emacs-stuff, which is basically a list of global-set-key and setq.)  Then my main init file just requires each of these files in turn, one after the other.  Currently I've got 103 configure-XXX files, which you'd think might take a long time to load - especially with my insistence of require'ing everything ahead of time - but it's actually fine. emacs doesn't exactly load instantly, but it's ready in less than 5 seconds. Not like you're quitting and restarting it all the time anyway.  I started working this way about 5 years ago and I haven't found a need to change yet. But the benefit comes from just having a scheme, I think, and any scheme will do, provided it's workable."
emacs,2wzhxh,RobThorpe,2,Tue Feb 24 14:15:45 2015 UTC,"I am not sure which approach is the best.   I don't think anyone is.  I'm not sure my own approach is the best.  But that's kind of the point of emacs:  Set it up in the way that works best for you.  Organize your init.el in whatever way makes the most sense for you.  And remember, though it's nice to be done with things, you can always re-visit and re-edit your organization if your needs or sensibilities change.  The above is the more helpful part of my reply (in my own opinion, anyway), but I will also share that I do something analogous to /u/tuhdo ...but I split things differently.  I use ""init.library.el"" files, where "".library."" varies by library, e.g. ""init.flymake.el"" and have lines in my init.el that look like this (continuing that example):  (autoload 'flymake-mode ""init.flymake"" ""Launch flymake with my tweaks."" t)   (Note that init.flymake.el is in my load path, so I don't use the "".el"" extension in that invocation.)  And init.flymake.el has all of my flymake-library-related (def)advice, supporting functions, variable adjustments, etc.  Additionally, I keep my customizations separate via:  ;; Keep the machine-generated custom initializations separate. (setq custom-file ""~/.emacs.d/customized.el"") (load custom-file)   ...because I (personally) never want to mix hand-edited code with machine-generated code, considering that a recipe for eventual despair.  Anyway, those are my own nods towards tidiness.  But again, my primary tip is just:  Do what makes sense for you."
emacs,2wzhxh,MyNameIsFuchs,2,Tue Feb 24 23:41:35 2015 UTC,"Thanks for your word. Sure, I do get your point about handling this my way and that is what I will be doing, however I wanted to know what the general consensus is and now I do know.   I will surely borrow your idea about keeping machine generated code separate, that is something that has been bothering me for a while. Since I won't be using so much code, I will stick to a single file approach and I am sure once you are into emacs, there is always stuff to add and edit and when it gets out of my control I will split it up into multiple files and so on. Thanks again."
emacs,2wzhxh,gardenbucket,1 point,Tue Feb 24 16:43:10 2015 UTC,"My personal rule is:  any entries comprising more than 10 lines or which include a define/defadvice-level statement get their own file.  Smaller simpler things are just fine in the top-level init file.  But again, do whatever makes the most sense for your own sensibilities."
emacs,2wzhxh,bitbloc,2,Wed Feb 25 02:01:34 2015 UTC,"I use a simple Init file.  It's separated into areas, e.g. General, OS specific and Mail. Each of those areas is a page separated by a L character so I can navigate using C-x { & C-x }. Within each section things are divided per subject and have titles.  My init file is all configuration.  General facilities that I've written myself are in separate files that I load from the init file."
emacs,2wzhxh,abo-abo,2,Wed Feb 25 17:58:43 2015 UTC,"I'm a newbie so take with with a grain of salt. I started with prelude and now have everything in one single elisp file. ~900 LOC, no intention to split it up. It's pretty simple and helm-swoop allows me to navigate it pretty quickly. Might not be as easy to understand for a 3rd party."
emacs,2wzhxh,agumonkey,1 point,Tue Feb 24 16:51:29 2015 UTC,I did check out Prelude and I didn't install it because I won't understand what is happening behind the scene and will have to spend all that time understanding Prelude.
emacs,2wzhxh,BeetleB,1 point,Tue Feb 24 17:04:39 2015 UTC,"Hmm, helm-swoop looks pretty cool -   https://github.com/ShingoFukuyama/helm-swoop"
emacs,2wzhxh,acow,2,Wed Feb 25 01:56:25 2015 UTC,"I like use code blocks with (progn) as following:  ;; magit (progn     foo     bar)   It is easy to move out and sort configurations, but the use-package.el that somebody suggested here seems very interesting."
emacs,2wzhxh,pangrametry,2,Thu Feb 26 01:29:02 2015 UTC,"I have about 150 lines of use-package in my init.el. The rest is autoloaded.  Around 150 total packages used (132 in ELPA, the rest in git), start-up time: 1.2s. See my recent post."
emacs,2wzhxh,Starlight100,1 point,Tue Feb 24 17:53:09 2015 UTC,"I use a simple init.el, and rewrote it using req-package, it makes your init as a list of package-block declaration that will be installed, initialized, keybound cleanly."
emacs,2wzhxh,sachac,1 point,Tue Feb 24 18:10:24 2015 UTC,"I tried org-babel for this purpose, but in the end it was just easier to split into multiple .el's based on their category (e.g. mail, programming, appearance, etc)"
emacs,2wzhxh,Trevoke,1 point,Tue Feb 24 15:43:38 2015 UTC,"If you put this at the end of your file, it will open up with only the headlines visible. With outshine speed commands, you can then use un-chorded key presses to jump around."
emacs,2wzhxh,shackra,1 point,Tue Feb 24 16:17:05 2015 UTC,This is something that I want to do. I like the outline approach and the ability to minimize everything that is not required. Thanks for the tip.
emacs,2wyz8q,khalki,2,Tue Feb 24 08:31:33 2015 UTC,"You could also do (global-unset-key (kbd ""<backspace>"")).  However if that does not work you need to check whether to key is still bound to something else. If you set a key globally it can still be set locally or be overridden by a mode. (I don't really like this about Emacs.)  To check what a key is bound to do C-h k <key>."
emacs,2wyz8q,aerique,3,Tue Feb 24 08:54:01 2015 UTC,"I don't really like this about emacs   The vast majority of programming languages allow this. It's a fundamental feature. Without it, you'd never be able to change default key bindings."
emacs,2wyz8q,78666CDC,2,Tue Feb 24 09:28:12 2015 UTC,"Maybe I should have been more specific: for how I use Emacs I'd like there to be one way to set keybindings that cannot be overridden by packages and modes, i.e. the bindings I set should be final. There's too many layers where keybindings can be set in Emacs and it is confusing (to me).  Nowadays there's bind-key as someone else here mentioned, which is a solution to this problem."
emacs,2wyz8q,aerique,2,Tue Feb 24 13:53:06 2015 UTC,"If you set a key globally it can still be set locally or be overridden by a mode. (I don't really like this about Emacs.)   That’s what override-global-mode is for. Easiest way is to use bind-key*(package bind-key on Melpa), which sets up override-global-map for you."
emacs,2wyz8q,permafrosty,1 point,Tue Feb 24 09:47:00 2015 UTC,"Easiest way is to use bind-key   I second this, as i use it extensively to great effect."
emacs,2wyz8q,ericjmr,1 point,Tue Feb 24 12:13:36 2015 UTC,"Yeah, I forgot about bind-key which I use as well for making sure my bindings get priority."
emacs,2wyz8q,aerique,1 point,Tue Feb 24 13:50:15 2015 UTC,"The first definition works if written:  (global-set-key (kbd ""C-."") 'hs-toggle-hiding)  I had no errors with the other two."
emacs,2wyz8q,ericjmr,1 point,Tue Feb 24 08:41:17 2015 UTC,"I have been trying to make the following keybinding work on my .emacs: (global-set-key ""\C-."" 'hs-toggle-hiding)   The reason that doesn't work is because global-set-key expects a literal string. What you have there will bind the key sequence C-- . Try this instead:  (global-set-key (kbd ""C-."") 'hs-toggle-hiding)   Or  (global-set-key ""\C."" 'hs-toggle-hiding)   edit since I'm no longer on my phone:  For clarification -- the keybinding functions (e.g. global-set-key and define-key) expect a literal sequence of characters to bind. When you pass the string ""\C-."", the escape sequence \C is parsed by emacs to the 0x03 byte (^C in ASCII), and since the rest of the characters are unescaped they're interpreted literally. So the actual sequence passed to global-set-key would be 0x03 (C-c) 0x45 (-) 0x56 (.).  What the kbd function does is translate a ""standard format"" emacs key sequence string like C-. into a raw string of characters, making it to copy-and-paste key sequences from the documentation and elsewhere, even when the sequences are a long chord sequence. For example, kbd(""C-c C-e l L"") instead of ""\C\elL"", or in your case (kbd ""C-."") instead of ""\C.""."
emacs,2wyz8q,illperipheral,1 point,Tue Feb 24 15:30:11 2015 UTC,"As others have mentioned, the first one should be:     (global-set-key (kbd ""C-."") 'hs-toggle-hiding)  The other two could be changed by something like this:     (define-key function-key-map (kbd ""<return>"") nil)  I have no idea why you'd want to do that though.  What's wrong with return and backspace?  If you really do want to get rid of them then consider rebinding them to something else useful instead."
emacs,2wyz8q,RobThorpe,1 point,Tue Feb 24 18:09:05 2015 UTC,I will try this.  The reason I want to disable the backspace and enter key is because I use C-h to backspace and C-m to enter a new line.
emacs,2wyz8q,RobThorpe,1 point,Tue Feb 24 18:18:22 2015 UTC,"C-h is the help key, make sure you have another way to use it. You might want to define backspace and enter as other things rather than just removing them from the keymap altogether."
emacs,2wwisd,fxbois,3,Mon Feb 23 19:42:18 2015 UTC,"I am always glad when there is a new update of web-mode, I hope it fixes some of the not-very-harmful-but-still-a-little-annoying bugs. I don't know why but my php files buffers sometimes lose syntax highlighting, but M-x web-mode fixes it, until it happens again.  Great work btw  EDIT: missing word: bugs"
emacs,2wwisd,Ryckes,2,Mon Feb 23 20:54:27 2015 UTC,"If you are able to reproduce the bug, do not hesitate to post an issue on github"
emacs,2wwisd,Ryckes,1 point,Mon Feb 23 21:24:19 2015 UTC,I will pay attention next time :)
emacs,2wwisd,ericjmr,1 point,Mon Feb 23 22:19:52 2015 UTC,"Is there any specific PHP file on which this always happens, and if so would it be possible for you to send it to me for testing and bug-fixing?"
emacs,2wwisd,Ryckes,2,Mon Feb 23 23:01:43 2015 UTC,"I am not sure, but I think it happens with most files, last weeks I've been working with js (js2-mode, sorry) so it's been a while since it last happened. If it happens again I will try to reproduce the bug with little code and I will send you the results."
emacs,2wwisd,ericjmr,1 point,Tue Feb 24 07:45:23 2015 UTC,Thanks.  I will look into it if you do.
emacs,2wwisd,ccharles,2,Tue Feb 24 08:04:11 2015 UTC,"I always upvote new releases of web-mode.el before even reading the release notes, and I'm never disappointed.  The ""avoid extra indentation due to control tags"" feature is especially nice. Great work!"
emacs,2wwisd,lykwydchykyn,2,Tue Feb 24 02:40:01 2015 UTC,Sweet!  Great work!
emacs,2wwisd,ericjmr,2,Tue Feb 24 05:15:15 2015 UTC,"Great work.  Even though I maintain php-mode I always recommend web-mode for people who write PHP along-side other languages like HTML.  So unless you write pure PHP, give it a try."
emacs,2wwisd,okflo,1 point,Tue Feb 24 09:03:38 2015 UTC,yeah! support for cl-emb! thanks!
emacs,2wx46h,bryangarza,3,Mon Feb 23 22:13:32 2015 UTC,"From the article:   Evil-mode implements all of Vim, and nothing is missing.   This is close to true, but a few things are missing, like C-a and C-x for numbers.  But that's ok because there's no shortage of Evil packages for such things."
emacs,2wx46h,ericjmr,4,Mon Feb 23 23:07:50 2015 UTC,"You're right, without some extra evil packages we don't actually have full Vim. I'll fix that sentence with an edit 👍"
emacs,2wx46h,ericjmr,3,Mon Feb 23 23:19:59 2015 UTC,For what it's worth I use these Evil addons. You may want to try some out.
emacs,2wx46h,aport,3,Mon Feb 23 23:23:47 2015 UTC,"Thanks a bunch! I've only used evil-surround, will definitely try these out."
emacs,2wrydd,ttmarek,12,Sun Feb 22 17:35:44 2015 UTC,Note that this version needs updating so the new features in 24.4 show up in the context menus. It's on the bucket list of things to do; unfortunately it now has to check your emacs version and only present options valid in your Emacs which is a minor but added complication!
emacs,2wrydd,mickeyp,8,Sun Feb 22 18:22:07 2015 UTC,"I wouldn't get on his case for that not being a feature, the author is writing a book on Emacs (which AFAIK isn't out yet) so he probably doesn't have much time to work on this.   EDIT: I should read usernames before replying."
emacs,2wrydd,Imxset21,10,Sun Feb 22 19:22:23 2015 UTC,Oh I know -- I wrote discover and I'm working on the book. But thanks for the kind words :)
emacs,2wrydd,mickeyp,6,Sun Feb 22 19:33:26 2015 UTC,"Thanks, and I love your blog.  Whenever I'm stumped in emacs and googling all over the place I'm always happy when it takes me to your blog, because even if it doesn't have the answer it points me in the right direction."
emacs,2wrydd,statmobile,4,Sun Feb 22 21:56:56 2015 UTC,Thank you! Glad to hear it!
emacs,2wrydd,mickeyp,1 point,Sun Feb 22 22:15:14 2015 UTC,But I read somewhere that it currently only supports dired-mode?
emacs,2wrydd,pyscript,1 point,Mon Feb 23 11:08:15 2015 UTC,"Noooo, it is super easy to write your own discover function. My example to discover yafolding, rope, nose,…: https://gitlab.com/emacs-stuff/discover-packages/blob/master/discover-yafolding.el  but yes, since the discover package comes with dired integration."
emacs,2wrydd,dzecniv,1 point,Mon Feb 23 13:31:58 2015 UTC,"thanks, great resources!"
emacs,2wrydd,pyscript,1 point,Mon Feb 23 15:18:21 2015 UTC,Oooh very nice. I should try and incorporate that into discover proper.
emacs,2wrydd,mickeyp,2,Mon Feb 23 21:59:24 2015 UTC,"thanks mickeyp and pyscript, I'll do some more then ! But you know, it's fairly easy ;)  I wonder what's the best: to have a big repo, like mine but bigger, with lots of discover recipes (""treasures"" ?), or put them in their home project. The second solution is more work (pull requests etc) but it looks cleaner. BTW the author of yafolding did accept my PR with great interest. But the 1st strategy may be quicker, and cooler, because we then can have a ""discover-my-discover"" command to discover what treasures are discoverable :)  https://gitlab.com/emacs-stuff/discover-packages/blob/master/discover-discover.el"
emacs,2wrydd,dzecniv,1 point,Tue Feb 24 00:08:45 2015 UTC,"/u/mickeyp I think you should throw some colors in there, this API is too clean! /s"
emacs,2wrydd,syl20bnr,1 point,Mon Feb 23 21:40:17 2015 UTC,i've always wanted 'chord completion'
emacs,2wrydd,dobkeratops,1 point,Mon Feb 23 16:33:49 2015 UTC,Maybe guide-key is what you are looking for?
emacs,2wrydd,cocreature,1 point,Mon Feb 23 19:55:05 2015 UTC,"discover kinda tries to do that but as /u/cocreature suggests you should give guide-key a shot until I get around to adding ""auto-discover"" to discover itself."
emacs,2wr60m,spwhitton,1 point,Sun Feb 22 12:10:01 2015 UTC,"The great thing about Emacs is that it lets you choose how you do things. Having said that one of Emacs's greatest strengths is that it obviates the need for marking things explicitly if the syntactic unit(s) you want to kill -- be it a word, s-exp, paragraph or, yes, a line -- are possible with repeat calls to one or more commands. Typing C-S-backspace` three times will do what you want as would using digit arguments.  Finally I think C-w should kill the line if no region is active. I use an advised version of C-w I scrounged off, I think, Emacswiki 10+ years ago that does that. It is a perfect complement that lets you have your cake (kill lines) and eat it (kill region)"
emacs,2wr60m,mickeyp,1 point,Sun Feb 22 12:30:43 2015 UTC,"Could you let me know what function your C-S-SPC is bound to?  In my Emacs it's not bound to anything so it's the same as C-SPC.  Just pressing that three times is much more comfortable than my solution.  Digit arguments have always felt quite uncomfortable to me because I've always followed the manual's advice to use, say, C-u 3 C-n instead of C-3 C-n for compatibility with all terminals.  But maybe that's something I should stop.  I like the C-w to kill the line if the region is not active but I use C-x C-k for kill-region and C-w for backward-delete-word so it's not much of a speed improvement in my case.  And those bindings are etched very deep in my brain because I've had it since I started with Emacs.  I definitely enjoy having M-w copy the line if the region is not active though."
emacs,2wr60m,mickeyp,1 point,Sun Feb 22 13:24:32 2015 UTC,Sorry that's a screwup on my part -- I meant to say C-S-backspace.   You don't have to use digit arguments: tapping backspace three times with C-S pressed is enough. As for not working on terminals? That's only relevant if you actually encounter terminals where it doesn't work.
emacs,2wr60m,livrem,1 point,Sun Feb 22 13:39:32 2015 UTC,Ah right.  It seems that smartparens is binding my C-S-backspace to something else.  So maybe I should bind kill-whole-line to C-S-SPC!
emacs,2wr60m,mickeyp,1 point,Mon Feb 23 04:52:43 2015 UTC,"That can't be so difficult for him to encounter. I tested in three different emacs, running on three different servers, two are inside of screen, one in tmux, using two different terminal emulators (because those were just the in-terminal emacs sessions I happened to have running at the moment) and C-S-backspace just did backspace in all three. Also no other combo with shift seems to work either, nor does C-backspace. Always lots of issues with keybindings in terminal emacs in my experience, but maybe I just never found the ""make emacs-keybindings work well"" option in the terminal emulator configs."
emacs,2wr60m,purcell,1 point,Mon Feb 23 11:48:01 2015 UTC,I was actually referring to digit arguments not C-S-backspace. As always I recommend people avoid using terminal Emacs unless they have no choice. You're always going to struggle with certain modifier combinations in terminals --- terminal multiplexers just make things worse.
emacs,2wr60m,mickeyp,1 point,Mon Feb 23 12:16:09 2015 UTC,"Yeah, you can install whole-line-or-region (which I maintain these days) to add advice like that for many common commands."
emacs,2wr60m,mickeyp,1 point,Sun Feb 22 14:09:59 2015 UTC,Neat! I did not know about this!
emacs,2wr60m,mickeyp,1 point,Sun Feb 22 16:26:06 2015 UTC,I think if you follow /u/purcell's reply and install whole-line-or-region you will get this functionality.
emacs,2wr60m,ericjmr,1 point,Sun Feb 22 16:11:52 2015 UTC,"; Augment C-w M-w so they cut and copy respectively with no region (defadvice kill-ring-save (before slick-copy activate compile)   ""When called interactively with no active region, copy a single line instead.""   (interactive    (if mark-active (list (region-beginning) (region-end))      (message ""Single line killed"")      (list (line-beginning-position)        (line-beginning-position 2)))))  (defadvice kill-region (before slick-cut activate compile)   ""When called interactively with no active region, kill a single line instead.""   (interactive    (if mark-active (list (region-beginning) (region-end))      (list (line-beginning-position)        (line-beginning-position 2)))))"
emacs,2wqgyt,curious-scribbler,5,Sun Feb 22 05:28:56 2015 UTC,"expand-region: It allows you to press C-= (by default) to highlight the current word.  Further presses will expand the region to the current sentence and then the current paragraph, and so on.  Useful for mass editing. centered-window-mode: If you only have one window open then it'll center the contents.  Personally I find this useful for focusing on my writing. toggle-quotes: Easily switch between single and double quotes. typo-mode: Inserts correct characters for quotes, en-dashes, em-dashes, ellipses, and so on. anchored-transpose: Lets you flip the position of two regions around an anchor, e.g. flipping the content on both sides of an ""and."" hl-sentence: Highlights the current sentence you're on, which I find useful for proofreading. writeroom-mode: Disables a lot of distractions in Emacs so you can focus solely on writing.   Hope some or all of those help!  Edit: Added links to all packages."
emacs,2wqgyt,ericjmr,1 point,Sun Feb 22 15:37:35 2015 UTC,Awesome. This is an incredible list and helpful packages. I didn't know some of them. Thanks again.
emacs,2wqgyt,ericjmr,1 point,Sun Feb 22 16:01:06 2015 UTC,No problem.  I forgot to mention all are available through Melpa by the way.
emacs,2wqgyt,RobThorpe,1 point,Sun Feb 22 16:25:16 2015 UTC,There's also darkroom-mode which is an alternative to writeroom-mode. I've used neither.
emacs,2wqgyt,carmenberry,1 point,Mon Feb 23 11:30:35 2015 UTC,Org-mode is a must and I wouldn't use Emacs without it. ace-jump expand-region Helm Hydra in combination with words.el by the Kitchin research group
emacs,2wqgyt,p4p3r,1 point,Sun Feb 22 16:08:24 2015 UTC,Helm's good for creative writing projects? What's your workflow like?  Edit: sorry I was confusing Helm and Projectile.
emacs,2wqgyt,myeffort,1 point,Tue Feb 24 15:14:25 2015 UTC,"I forget what the thesaurus package is called, but that. Also a grammer check or prose linter."
emacs,2wqgyt,RobThorpe,1 point,Sun Feb 22 16:48:07 2015 UTC,Writegood Mode    Sounds like something relevant.
emacs,2wqgyt,ericjmr,1 point,Sun Feb 22 17:49:47 2015 UTC,"Plagiarizing earlier posts I wrote on this:  There are lots of built in facilities. I think the main thing is to become familiar with Emacs' general purpose commands. For example, M-a and M-e to move through sentences and M-{ and M-} to move backwards and forwards through paragraphs. M-/ (dabbrev) is useful to complete long words. In text-mode M-C-i completes a word using ispell mode, using the spelling program's dictionary.  Often text docs need to be divided into parts. In Emacs ""Pages"" can be used for this purpose. C-q C-l on a line by itself delimits a page. C-x ] and C-x [ move between pages, C-x C-p marks a whole page. Probably you don't want the page delimiters in the file, you can remove them at the end before publishing the file. Another useful trick if the file becomes long is to bookmark several places in it where you're working. Make each bookmark short, perhaps take the first letter of the game you're working on and the level number, e.g. ""R4"".  Emacs uses paragraphs divided by blank lines. If you use the sort of paragraphs that are divided by two spaces at the start then paragraph-indent-minor-mode will fix Emacs' behaviour to use those. Set it as a file-local variable if you need it.  Although Org and Outline-mode are ""formats"" they're often quite readable as they are. For example, using """" and ""*"" to delimit header levels is obvious, I do it in emails all the time to people who don't use Emacs. If you want a different style of header then do it in outline first then seach-and-replace at the end. This allows you to have section and sub-sections within your pages.  Another trick is to put in a specific word like ""FIXME"" near problems, then use highlight-regexp to make it very obvious. The highlight-regexp command can be put in an ""eval"" line the file-local section of the file itself. (See the manual ""specifying file variables"").  I use visual-line-mode for wrapping. There are four options.   Word-wrap, it inserts no newlines when a line wraps. When the wrap happens the last word is split across the two lines and an indicator is shown in the fringe. This splitting of words makes things hard to read. No wrapping. In this case RET and M-q are used to fill paragraphs. This is very manual and can be distracting. If you have to go back and add or remove text from a paragraph then you have to refill it with M-q. If you do M-q in the wrong place without noticing it can be disastrous, it destroys things like lists. I used to do this until there was visual-line-mode. Auto-fill-mode. This adds newlines when you get to the fill-column. It avoids the need to type RET, but suffers from the other problems of manual filling. You still often have to refill paragraphs with M-q. Visual-line-mode. This is just like word-wrap, but it doesn't split words, it always keeps them whole. It doesn't add newlines, a paragraph is just one long line like it is for word-wrap. The advantage of this is that it hardly ever needs manual intervention with M-q or anything else. If you need newlines in the final output then you can add them at the end using fill-region, that can be a bit tricky though.   Version control systems and VC mode are also useful."
emacs,2wqgyt,RobThorpe,1 point,Sun Feb 22 20:38:28 2015 UTC,"Another trick is to put in a specific word like ""FIXME"" near problems, then use highlight-regexp to make it very obvious.   fic-mode will automatically highlight FIXME, TODO, and BUG so they stand out as eye-sores in your documents."
emacs,2wqgyt,rranelli,1 point,Sun Feb 22 23:46:49 2015 UTC,"Rob, thanks for the detailed explanation. I am still getting a hang of how emacs handles text and other related elements like indentation and and all that you mentioned above. What was the other post where you wrote this, perhaps it may help me.   If I understand correctly, emacs interprets sentences as any line with double space and has a similar thing with paragraphs. I think I'd like to change the way emacs thinks about sentences and paragraphs. Could you share your knowledge about the way emacs handles text?  Edit : I am using visual-line-mode for the moment, and will worry about exporting once I come to it. Edit : Went through the post your commented in and found it quite helpful. Thanks"
emacs,2wqgyt,Imxset21,1 point,Mon Feb 23 05:14:20 2015 UTC,"What was the other post where you wrote this, perhaps it may help me.   I copied everything in my earlier posts on this to the big post above.  If I understand correctly, emacs interprets sentences as any line with double space and has a similar thing with paragraphs. I think I'd like to change the way emacs thinks about sentences and paragraphs. Could you share your knowledge about the way emacs handles text?   Yes.  By default Emacs uses a period and two spaces to end a sentence.  It uses an empty line to end a paragraph.  As I wrote above, if you use the sort of paragraphs that are divided by two spaces at the start then paragraph-indent-minor-mode will fix Emacs' behaviour to use those.  You can redefine it using a regexp if you're doing something really fancy.  Some people end sentences in a period and one space, to get Emacs to respect that set sentence-end-double-space to nil.  If you do that though then it can't tell the difference between abbreviations and sentence ends or between numbered lists (1. Like 2. This) and sentence ends.  See (info ""(emacs) Sentences"") and (info ""(emacs) Paragraphs"")"
emacs,2wqgyt,zinver,1 point,Mon Feb 23 12:37:10 2015 UTC,"Be sure to make use of flyspell and smartparens.  Flyspell spell-checks your text on the fly (hence the name). Smartparens offer great advanced delimited-pairs handling. If you're gonna write in some kind of markup (org, markdown, etc.) smartparens is a must have."
emacs,2wp37r,chopperkuncodes,6,Sat Feb 21 21:49:53 2015 UTC,Check out https://github.com/IvanMalison/dotfiles/blob/master/dotfiles/emacs.d/init.el#L1427  I'm assuming that you are using emacs-jedi and not elpy.  Let me know if you need help getting this to work.  You will need to add (add-virtual-envs-to-jedi-server) to your python or jedi mode hooks.
emacs,2wp37r,IvanMalison,2,Sat Feb 21 22:20:23 2015 UTC,Thank you!! for both making it work and replying so freggin quickly.
emacs,2wp37r,yilmazhuseyin,2,Sat Feb 21 22:26:41 2015 UTC,Here is my solution  http://machete.yilmazhuseyin.com/u/gs  I am getting current projectile project root and current virtualenv and setting the jedi parameters according to those paths.
emacs,2wly7x,openist,18,Sat Feb 21 00:57:35 2015 UTC,What? It's not open source? I'd rather pay for an open source application than get a proprietary application for free.
emacs,2wly7x,catern,1 point,Sat Feb 21 14:01:16 2015 UTC,"RMS is probably having a fit, even as we speak."
emacs,2wly7x,bakuretsu,0,Sat Feb 21 14:34:02 2015 UTC,Personally i'm happy to support anyone who is willing to develop software that interacts with the org world.  We desperately need apps like this and they take a huge amount of work to maintain.
emacs,2wly7x,catern,9,Sat Feb 21 20:01:09 2015 UTC,"Yes, that's what I said. I would be happy to pay for it if it was open source."
emacs,2wly7x,IvanMalison,4,Sat Feb 21 20:07:02 2015 UTC,"There has been quite a bit of talk about orgzly on this subreddit in the last few weeks. Its not quite functional yet, but I think I speak for everyone when I say that e have high hopes."
emacs,2wly7x,ellakk,3,Sat Feb 21 02:40:43 2015 UTC,"Yeah considering all the chatter I would have thought it had been posted already, given that it is available and meets my needs as far as functionality I thought it should be posted."
emacs,2wly7x,nevenh,5,Sat Feb 21 03:13:11 2015 UTC,"Been playing around with this and it does not seem like an improvement over mobileorg-android yet, it seems like all you can currently do is add/remove headlines and view scheduled tasks.  What is miss that is available in mobileorg-android is:  Calendar sync, it can add all scheduled/deadline/dated tasks to a calendar of your choosing, if the tasks are changed/removed in mobileorg or emacs, then it is also changed in the calendar.  Agendas and block agendas, I've got a customized block agenda view that lists: dated tasks this week by date/urgent tasks/stuck projects/project list/project next tasks/standalone tasks/waiting tasks. If u check ""combine block agendas"" in settings, then it will display this without a problem in a single agenda view.  SSH and webdav sync, i don't want or need a dropbox account.  Automatic detection of context and todo states, because its quite tedious to change settings at 2 diffrent places, the init file is enough.  It should be noted that i built my mobileorg-android from here, its about 40 commits ahead from the one available in the Play Store."
emacs,2wly7x,grabyourmotherskeys,1 point,Sat Feb 21 11:47:55 2015 UTC,"Thanks for this list - it helps a lot prioritizing things.  They are all planned - SSH sync and in-buffer TODO/DONE keywords settings will be done first and available soon after the first production release.  Searching will be improved a lot too (used for agenda).  See http://www.orgzly.com/help#sec-2 for what is currently available.  Not that much right now, I agree.  Sorting will be added too and grouping by day etc.  The idea is that searching, sorting and grouping is done using the operators.  Custom saved searches will be implemented in the future, so you could have a fairly complicated expression, saved for a quick access.  ""Scheduled"" and ""To Do"" (available in navigation drawer) are one of those for example.  And calendar sync is being requested more often - I'll be bumping its the priority."
emacs,2wly7x,IvanMalison,1 point,Sat Feb 21 13:51:22 2015 UTC,I am waiting for ssh! :)
emacs,2wly7x,Mexicorn,1 point,Sat Feb 21 22:02:54 2015 UTC,What does the version that you compiled yourself have that the version in the play store does not?
emacs,2wly7x,littlerustle,2,Mon Feb 23 21:37:34 2015 UTC,Has anyone tried this yet?
emacs,2wly7x,tommiss,3,Sat Feb 21 02:42:58 2015 UTC,"Using it now, seems great!"
emacs,2wly7x,shackra,2,Sat Feb 21 02:43:30 2015 UTC,"Am I required to use dropbox, or can I point the orgzly app on my phone / tablet to a directory that is synchronized with owncloud and a server of my own choosing?"
emacs,2wly7x,shackra,3,Sat Feb 21 07:49:39 2015 UTC,It seems both are supported.
emacs,2wly7x,leomeloxp,2,Sat Feb 21 07:59:49 2015 UTC,Not in the current beta.
emacs,2wly7x,butt_nutter,1 point,Sat Feb 21 10:02:44 2015 UTC,"No doubt, I'm already feeling happy and I don't even installed on my android phone yet!  edit: oh wait. I didn't saw the ""Coming soon"" :/"
emacs,2wk7gh,TanAndBlonde,14,Fri Feb 20 16:35:10 2015 UTC,"Many of us push our files into github or Bitbucket in order to share across computers. This also allows us to share interesting code with little more than a link. For instance, you could pop over to https://github.com/howardabrams/dot-files/blob/master/emacs-client.org#technical-artifacts to see some code about how I break up Mac and Linux-specific settings (mostly set because I like to bind the Command key):  (if (eq system-type 'darwin)     (require 'init-mac)   (require 'init-linux))   I guess I should mention that I am using org-mode to write my configuration files, and while this is another thing to learn, it allows me to display them on Github as a somewhat attractive web page."
emacs,2wk7gh,howardthegeek,2,Fri Feb 20 17:17:20 2015 UTC,"Okay cool, thank you. I think I am going to do it this way, because I think I like the idea of it a little better than drop box."
emacs,2wk7gh,vermiculus,2,Fri Feb 20 19:42:52 2015 UTC,See also https://dotfiles.github.io. It's what I do.
emacs,2wk7gh,username223,-6,Sat Feb 21 00:58:25 2015 UTC,"Many of us push our files into github or Bitbucket in order to share across computers.   This is a terrible idea.  Keeping config files on a public site is mostly just a good way to leak passwords, credentials, and other private information.  If you're working on two computers, make one the master and rsync from it."
emacs,2wk7gh,Starlight100,5,Sat Feb 21 01:40:32 2015 UTC,You could say the same thing about reddit posts.  You just uploaded the data in your comment to a public site. Risky move! You could have used the comment as a password store and leaked everything.
emacs,2wk7gh,Funnnny,4,Sat Feb 21 05:19:25 2015 UTC,"It's you fault to store password in public repo. If you blindly push without review the diff commit, it's your fault.   Really, you can use your own git server, or private repo in public service like Github."
emacs,2wk7gh,username223,-5,Sat Feb 21 02:08:34 2015 UTC,"Why punch yourself in the face by making any of your config public?  Keep it all private, and you don't need to ""review the diff commit"" every time to tweak your config."
emacs,2wk7gh,Funnnny,4,Sat Feb 21 02:44:07 2015 UTC,"If you have an extensive dotfiles, it's more or less a code project anyway, so it's natural to store it in a version control system.   Git works locally and is very popular, also a reason to use it.   I think you don't have a big dotfiles to understand the reason, but still."
emacs,2wk7gh,Mitchical,2,Sat Feb 21 07:02:19 2015 UTC,Why don't you have your credentials stored in a separate file to be loaded by your init? This is a much better practice for if you do need to transfer or share your config and you don't want to share this info.
emacs,2wk7gh,thekgann,5,Sat Feb 21 04:23:40 2015 UTC,"Can it turn /emacs.d/ into a git repo or something, and then just push and pull?   This is exactly what I and many many others do."
emacs,2wk7gh,AnAirMagic,12,Fri Feb 20 17:08:59 2015 UTC,"yep in addition if you setup your config to check for and consequently install packages if they aren't installed, you can be up and running in no time (on a unixish machine anyway)  (setq package-archives       '((""gnu""         . ""http://elpa.gnu.org/packages/"")         (""original""    . ""http://tromey.com/elpa/"")         (""org""         . ""http://orgmode.org/elpa/"")         (""marmalade""   . ""http://marmalade-repo.org/packages/"")         (""melpa""       . ""http://melpa.milkbox.net/packages/""))) (package-initialize)  (setq core-packages       '(;;list of packages you want     magit     nyan-mode     projectile     rainbow-delimiters     undo-tree         ace-jump-mode     ace-window     smartparens))  (unless package-archive-contents   (package-refresh-contents))   (defun ensure-packages (packages)   (dolist (package packages)     (unless (package-installed-p package)       (package-install package))))     (ensure-packages core-packages)"
emacs,2wk7gh,AnAirMagic,3,Fri Feb 20 17:18:39 2015 UTC,"This is a great improvement over the default.  However, there is a downside to this: you have to repeat the package name in two places: once in the core-packages list and once when you are somehow configuring the package.  use-package is a nice way to do both: you can ask that a package be installed on demand and also be configured in the same piece of code."
emacs,2wk7gh,vermiculus,1 point,Fri Feb 20 22:20:26 2015 UTC,"you have to repeat the package name in two places: once in the core-packages list and once when you are somehow configuring the package.   Help me out with an example here, b/c I don't see where i'm repeating package-names. And I don't quite see the value of adding another dependency before installing packages."
emacs,2wk7gh,khalki,1 point,Sat Feb 21 04:29:21 2015 UTC,"Suppose I now want to use flycheck too.  (setq core-packages     '(;;list of packages you want     flycheck     ...     )   But also, in a completely different place in the same file:  (require 'flycheck) (global-fllycheck-mode)   With use-package, everything goes together:  (use-package flycheck     :ensure     :init (global-flycheck-mode))"
emacs,2wk7gh,khalki,1 point,Sat Feb 21 05:02:56 2015 UTC,"I see, it's syntactic sugar."
emacs,2wk7gh,vermiculus,0,Sat Feb 21 15:47:07 2015 UTC,Can't +1 use-package enough – it truly makes my configuration file much easier to manage. It's all in one file now! (I use ^L to section it off – this keybinding makes navigation a breeze.)
emacs,2wk7gh,vermiculus,1 point,Sat Feb 21 01:05:03 2015 UTC,"Just tried this, it is freaking awesome."
emacs,2wk7gh,wtagg,0,Fri Feb 20 20:18:33 2015 UTC,What are packages?
emacs,2wk7gh,aerique,3,Fri Feb 20 19:41:12 2015 UTC,"Emacs has the equivalent of a repostory for Emacs. I use melpa. All you need to do to see the list of pacakages is M-x list-pacakages.  You can navigate, select, and install packages if needed."
emacs,2wk7gh,vermiculus,0,Fri Feb 20 20:04:13 2015 UTC,"My son, you have much to discover. Check out /u/tuhdo's mini-manual."
emacs,2wk7gh,vermiculus,0,Sat Feb 21 01:00:13 2015 UTC,You should check out use-package.
emacs,2wk7gh,Mawu3n4,7,Sat Feb 21 01:02:12 2015 UTC,"Dropbox has also worked well for me.  But I've organized my init file as an org-mode file (saved in Dropbox) and then used babel to produce a local version stored in the default location (~/.emacs.d/init.el).    If you're new to Emacs, this can be a lot to learn at first, so I'd recommend starting from an example.  I used Lars Tveito's init.org as my example to get started https://github.com/larstvei/dot-emacs  Sacha Chua also has a brief post that touches on this topic here http://sachachua.com/blog/2012/06/literate-programming-emacs-configuration-file/  But others will surely have betters suggestions if you are interested.  Good luck!"
emacs,2wk7gh,kcin,1 point,Fri Feb 20 17:19:44 2015 UTC,"I've been keeping my Emacs config in Dropbox for years as well and find it more convenient than using a repo. You should still use repo for version control and backup of course.  This is on Linux, OSX and Windows."
emacs,2wk7gh,bacondropped,0,Fri Feb 20 21:10:46 2015 UTC,"An OK solution if all your computers are able to install dropbox. For example, I can't install it on my work computer."
emacs,2wk7gh,vermiculus,0,Sat Feb 21 01:01:39 2015 UTC,Don't forget /u/tuhdo's mini-manual.
emacs,2wk7gh,bstamour,2,Sat Feb 21 01:06:06 2015 UTC,I have a git repo with all my config files (including my .emacs and a submodule to my .emacs.d repo) and I just link the files where they need to be. Works like a charm !
emacs,2wk7gh,lemon_drill,2,Fri Feb 20 19:36:08 2015 UTC,Dropbox is a possibe solution. Keeping the init file(s) in the dropbox folder.
emacs,2wk7gh,rranelli,1 point,Fri Feb 20 16:53:23 2015 UTC,"Can it turn /emacs.d/ into a git repo or something, and then just push and pull?   You can use shell-command to run git-pull right away. To git-push, you can still use that command, but you'll need to set up something like an ssh-agent which doesn't need to be authenticated every time."
emacs,2wk7gh,ijustwantanfingname,2,Fri Feb 20 17:22:44 2015 UTC,"Or, uh…use magit. :P"
emacs,2wk7gh,robal,1 point,Sat Feb 21 01:00:56 2015 UTC,"I keep all of my emacs configs on github, and just push/pull between computers."
emacs,2wk7gh,openist,1 point,Sat Feb 21 03:53:17 2015 UTC,"I let BitTorrent Sync manage a folder that contains only my init files (init.el, custom.el, abbrev_defs, and the org file of my configurations). Setting up a new computer only requires a symlink to init.el which points to the org file. I also add conditional statements in my org file for each package required. Thus all the downloading from melpa etc. is done automatically, and each machine handles its own ~/.emacs.d folder locally, which is not synced. This removes the (minor) hassle of dealing with github and related privacy worries. I still use a separate gpg-encrypted file for sensitive info, but that too is synced between machines with BTSync."
emacs,2wk7gh,vermiculus,1 point,Sat Feb 21 14:46:54 2015 UTC,You can also ensure that your packages stay up-to date by using auto-package-update.el
emacs,2wk7gh,reddit_clone,1 point,Mon Feb 23 05:43:45 2015 UTC,I use SpiderOak to keep everything in sync.
emacs,2wjgdc,ReneFroger,13,Fri Feb 20 12:11:48 2015 UTC,"there is a slighty minor delay of, say what, 0,1 second before it gets executed after my input.    I've never used Evil mode, but that sounds much too slow.  It sounds like you have some particular mode or configuration that's making things much slower than usual. Have you enabled linum-mode for example? That's famous for slowing everything to a crawl, nlinum-mode is better.  Very short auto-revert intervals can cause problems too.  Try ""bisecting"" your configuration. That is, enable half of it and disable the other half. After you've found which half is causing the slow-down then divide that into halves, and so on."
emacs,2wjgdc,RobThorpe,1 point,Fri Feb 20 12:30:18 2015 UTC,"Thanks for your tips. I disabled Linum-mode already. It's not only Evil mode, other Emacs commando's are affected too.  Don't understand me wrong. My dotemacs is fine.  But without dotemacs file, Emacs was already slighty slower than Vim, in order to support many awesome features of Emacs. Everything else works fine and flawlessly.   But when I remember the Vim experience, I guess my Emacs experience could be faster too. Wondering if there is any Emacs function, that measures and logging the speed of packages and commands handling?"
emacs,2wjgdc,RobThorpe,4,Fri Feb 20 12:33:10 2015 UTC,"Certainly Emacs is slower than simpler text editors, certainly some of your slowdown comes from that. But, Emacs shouldn't be as slow as you describe. Is Emacs that slow without your dotemacs file? If not then you should look at your config.  Wondering if there is any Emacs function, that measures and logging the speed of packages and commands handling?   See the commands ""benchmark-run"" and ""benchmark-run-complied""."
emacs,2wjgdc,tuhdo,4,Fri Feb 20 13:08:49 2015 UTC,"If you run Emacs in terminal just like Vim, it should be as fast. But again, you will lose the benefits of GUI Emacs. The Windows version of Emacs is slower than the Linux and Mac versions of Emacs. For example, in this demo, I edit a 39MB smoothly.   May I access to your configuration to test it? But again, I think the Windows version is still usable. It's just that you expect it to behave like a Vim in terminal, which you can get if you run Emacs in terminal as well."
emacs,2wjgdc,tuhdo,1 point,Fri Feb 20 13:18:49 2015 UTC,"Sure, you can test it. I will upload my configuration soon. I noticed it very strong with PHP files, but with other files, it's fast. But it could be more fast.   But I'm impressed by your demo, by the way. Where can I get that 39MB file, in order to test it out?"
emacs,2wjgdc,tuhdo,1 point,Fri Feb 20 19:53:23 2015 UTC,"You just need to find a large C file (i.e. 5000 or 10000 lines) then keep appending it until you get the desired file :)  Note that the first time you seek a distant position from cursor (i.e. to the end of file), it will have a slight delay. Then, after that, everything is fine."
emacs,2wjgdc,armpit_puppet,1 point,Fri Feb 20 20:02:41 2015 UTC,"I get it. My Emacs is also fast, I tend to believe it's equal fast as yours. Except for PHP files, then it's very slow. I will look into that.   I know you can't compare Gifs, due to difference in different animation rate for each gif. But if you compare this gif animation of Vim with your demo's, you will notice that there is something that makes the Vim in the gif animation more snappier."
emacs,2wjgdc,RobThorpe,2,Sat Feb 21 10:15:25 2015 UTC,"I think it's just your feeling. In the demo I did not type very fast; just enough to let the user see what going on and did not demonstrated editing features like the Vim demo you showed. However, if you notice, in my demo there was a brieft moment where Emacs oscillated up and down. It is because I pressed page up/page down repeatedly to test the responsiveness. I think that's the best you can get with Emacs. Profiling self insert command, it only took 0.00024 second to execute.  To test the execution time:   M-x elp-instrusment-function Type ""self-insert-command"" Insert something. M-x elp-results to see the result."
emacs,2wjgdc,kaushalmodi,1 point,Sat Feb 21 18:53:47 2015 UTC,"What mode are you using for editing PHP? I have had issues with mumamo and PHP editing. Also, I have had flymake seem to make editing slow down, and switched to flycheck.   Are you editing files on your local filesystem, or are they remote?"
emacs,2wjgdc,BruceConnor,1 point,Sat Feb 21 17:48:55 2015 UTC,"In that case post your PHP config here and we'll have a lookt at it.  Mr ""armpit_puppet"" is correct that mumamo is slow. All of the various types of multiple-mode Emacs modes are. That's because lazy fontification (jit-lock) only supports one mode at a time, so they have to use eager-fontification. People are working on fixing this."
emacs,2wjgdc,kcin,1 point,Mon Feb 23 13:58:52 2015 UTC,Profiling a command by wall time
emacs,2wjgdc,redguardtoo,1 point,Fri Feb 20 13:13:05 2015 UTC,"Wondering if there is any Emacs function, that measures and logging the speed of packages and commands handling?    profiler-start and profiler-report."
emacs,2wjgdc,kaushalmodi,11,Fri Feb 20 17:35:19 2015 UTC,Try starting emacs with the -q param. Is it snappy then? If so then some package causes the slowness. You can enable them one by one by commenting them out in your init file to see which one slows down your emacs. If you find the culprit then it's easier to find a solution.
emacs,2wjgdc,Lolor-arros,9,Fri Feb 20 13:11:03 2015 UTC,"I'm an EVIL guy and did performance analysis before. https://plus.google.com/110954683162859211810/posts/2bo9iMqK9zM  My suggesion,   use autoload aggressively profile-dotemacs.el is very useful compiling *.el does not help too much unless you are using js2-mode which is a javascript parser. other major modes use regex which is already quick enough yasnippets and evil are top 2 packages to drag my emacs slow. I cannot figure out how to optimize them with autoload. The only solution is to ask for help from their developers. according to my experience, evil is quick enough on most computers (I did mention that I was using eeepc 701  in above link, Intel Celeron-M CPU, 512M memory) you need check minor modes like flyspell. I turn off flyspell by default and autoload it when flyspell-buffer On Linux, there is a wonderful thing called ram disk. ln -s /dev/shm/emacs.d-$USER ~/.emacs.d Read my general guide on how to master Emacs asap (https://github.com/redguardtoo/mastering-emacs-in-one-year-guide) . In that guide, I argued that it's better clone other geeks mature setup at first. For example, clone my setup at https://github.com/redguardtoo/emacs.d and git log --oneline | grep performance:  3759097 projectile plus performance enhanced  2d23e72 improve org-mode performance, I guess root cause is org-fstree  1117cfc minor org performance tweakment  c61d06b improved performance when typing  d051906 disable linum-mode to improve performance  453cc66 improve js2-mode performance  c1b1b7f Tweak swank-clojure-extra-vm-args for performance"
emacs,2wjgdc,kaushalmodi,3,Sat Feb 21 02:22:56 2015 UTC,Did you mean 0 to 1 seconds? Or 0.1 (one tenth) second?
emacs,2wjgdc,angelic_sedition,6,Fri Feb 20 13:15:42 2015 UTC,"In many European countries, they use commas rather than periods as decimal points in numbers.  So 0,1=0.1"
emacs,2wjgdc,monotux,3,Fri Feb 20 13:49:54 2015 UTC,"Yup, that's why I asked for clarification :)"
emacs,2wjgdc,angelic_sedition,3,Fri Feb 20 14:41:31 2015 UTC,"I mean one-tenth second, indeed. Sorry for any confusion. But it could be even lower than that. It's so small."
emacs,2wjgdc,monotux,2,Fri Feb 20 14:50:14 2015 UTC,"A lot of things are very noticeably slow for me. Sometimes in org mode or with company mode, I have to wait maybe 5 seconds as the sentence I just typed slowly appears (with line numbers disabled). It seems emacs gets slower the longer I have it open. helm-for-files takes about 2 seconds to open. If I restart emacs, it's nearly instant. I guess I'll try commenting parts of my config again (tried before and couldn't find a problem). I'm just using my distro's official package; could I actually see significant performance increase if I compiled emacs myself?"
emacs,2wjgdc,jamespo,3,Fri Feb 20 17:47:35 2015 UTC,Sounds like one of your company sources is the issue. Try disabling one of them and see if it helps.
emacs,2wjgdc,VanLaser,1 point,Fri Feb 20 19:06:48 2015 UTC,"Everything gets slower (helm and org mode especially), even if I have company-mode disabled. Restarting fixes things for a while.  Might just need to hunt something down in my config."
emacs,2wjgdc,VanLaser,2,Fri Feb 20 20:48:11 2015 UTC,"Ah, strange. Try commenting everything out and add one piece at a time, beginning with adding company-mode and see if it matters etc. I'm guessing some package might be the culprint.  Good luck :)"
emacs,2wjnes,redguardtoo,1 point,Fri Feb 20 13:40:32 2015 UTC,"I think this code is designed for Chen Bin's specific setup. You only need xclip or xsel if you're using the terminal version of Emacs within X windows. Using the GUI version in X windows doesn't require it. Also, it calls ""cygpath"" somewhere, I think that's a cygwin specific command."
emacs,2wjnes,RobThorpe,1 point,Fri Feb 20 13:58:54 2015 UTC,I use ff most time. It's not dependent on cygpath. Only cf needs cygpath. cf is only designed for windows GUI version of Emacs.
emacs,2wlcq4,ThinkLarger,1 point,Fri Feb 20 21:57:01 2015 UTC,"I'd probably write a Python (or your favorite scripting language) script for a task like this, but Emacs does come with xml parsing support. Here's the relevant section of the manual"
emacs,2wlcq4,nandryshak,1 point,Fri Feb 20 23:33:41 2015 UTC,"Thanks for the feedback! I'm not very familiar with Python, so I'd like to stick to elisp. I found that document as well, but my emacs wasn't build with libxml. As a whole, the documentation seems pretty hard to understand so I was hoping to get some concrete answers or maybe even some code to guide me into the right direction."
emacs,2wlcq4,wasamasa,1 point,Fri Feb 20 23:55:02 2015 UTC,"Parsing is the act of turning a XML string into a tree-like data structure, that's what is done by the libxml-parse-xml-region already.  What you're after is extracting relevant information from that tree I suppose. Since I'm not aware of anything inside Emacs that can be used for that task, I'll make use of the built-in functions for list processing (since trees are represented in the form of nested lists).  (defun my-rechtspraak-metadata (ecli)   (interactive ""sEnter ecli: "")   (let ((base-url ""http://data.rechtspraak.nl/uitspraken/content/"")         (url-request-method ""GET"")         (argument (concat ""?id="" (url-hexify-string ecli))))     (with-current-buffer (url-retrieve-synchronously (concat base-url argument))       (unwind-protect           (progn             (goto-char (point-min))             (search-forward ""\n\n"")             (let ((tree (libxml-parse-xml-region (point) (point-max))))               (cddr (car (cddr (car (cddr tree)))))))         (kill-buffer)))))  (defun my-rechtspraak-language (ecli)   (let ((metadata (my-rechtspraak-metadata ecli)))     (car (cddr (assoc 'language metadata)))))   As this snippet demonstrates, it would be awesome if someone were to write something that allows one to use css-like selectors on such trees. I guess that's why people usually don't bother and just select the parts they're interested in with regex which is sad, but not unusual in Emacs land."
emacs,2wkqnk,TanAndBlonde,2,Fri Feb 20 18:59:52 2015 UTC,You need (load-theme 'firecode) instead of just (firecode).
emacs,2wkqnk,kaushalmodi,2,Fri Feb 20 19:38:21 2015 UTC,(load-theme 'firecode t)
emacs,2wkqnk,chopperkuncodes,1 point,Fri Feb 20 22:32:38 2015 UTC,"Remove (firecode).    When you load, your file gets evaluated, so there is no need to call a nonexistent function."
emacs,2wkqnk,caisah,1 point,Fri Feb 20 19:27:12 2015 UTC,"So I removed it, and it still loaded but now I got this error  Warning (initialization): An error occurred while loading `/User/me/.emacs.d/init.el':  End of file during parsing: /Users/me/.emacs.d/init.el   do you know how I can fix this?"
emacs,2wkqnk,jordonbiondo,1 point,Fri Feb 20 19:39:21 2015 UTC,"You have unbalanced parentheses, run check-parens in your config file"
emacs,2wh9o0,eu-guy,15,Thu Feb 19 22:13:21 2015 UTC,"I really love org mode. The way to use org mode in my opinion is to set up capture templates directing notes and tasks quickly to the right files (whichever you like).  http://orgmode.org/manual/Capture-templates.html  You can then use the agenda to view, sort, filter, and search your notes and tasks.   http://orgmode.org/manual/Agenda-commands.html  Once you get used to adding things quickly and finding them quickly it all falls into place. You can even export your notes in various formats including ICS (calendar) files so you can view your appointments on your phone.  One major advantage Evernote has is of course a Mobile app. I get around this by renting a very cheap vps and ssh'ing to it to use emacs (from my phone, my Chromebook, or workstation). I use the vps for other things, too.  The other is the images. I really don't know how to handle that. Org mode has ways to link to files and other things but I haven't tried displaying them or otherwise wiring working with images.  This works for me and I love using emacs for this purpose. I have tried a million other methods and this seems to work for me.  Here is a great tutorial: http://orgmode.org/worg/org-tutorials/orgtutorial_dto.html"
emacs,2wh9o0,grabyourmotherskeys,11,Fri Feb 20 00:01:10 2015 UTC,"For quick note-taking, there is deft:  http://jblevins.org/projects/deft/"
emacs,2wh9o0,permafrosty,1 point,Thu Feb 19 23:28:47 2015 UTC,"Man, I really liked the idea behind deft, but it seams the project is broken: http://www.emacswiki.org/emacs/Comments_on_DeftMode  A lisp dev could probably fix that, but I'm not there yet."
emacs,2wh9o0,tausinator,4,Sun Feb 22 20:03:17 2015 UTC,"I'm gonna try to keep this short, please excuse my brevity. Right off the bat - one mode I wish I had known when I started with org-mode is org-indent-mode. Do check that out.   Do I keep all my notes (which I have hundreds of in Evernote) in one file or in as many as I have notes?   That is up to you - I like to have seperate files for different major topics such as work/personal etc., but keep any notes that are at all related in the same file. org-narrow-to-subtree (C-x n s) and widen (C-x n w) are handy if you have large files with many headings and would like to focus on something specific.    Just opening and saving notes is quite a hassle in Emacs   If you have many files in some directory, maybe projectile and projectile-find-file (which is epic in combination with helm through helm-projectile-find-file) is worth looking into.   I cannot just drag and drop resources into a note anymore   Never tried it, but looks like others thought the same: https://github.com/abo-abo/org-download. See also http://www.emacswiki.org/emacs/InsertFileName for easier insertion of the name a some file.   The resources are not displayed inline   org-toggle-inline-images (C-c C-x C-v), org-toggle-pretty-entities (C-c C-x \) and org-preview-latex-fragment (C-c C-x C-l) come to mind. You can adjust the size of inline images with the variable org-image-actual-width. I use org-toggle-inline-images every now and then, but tend to hide the images while navigating or editing.   Navigating through notes   Using tags (C-c C-q), regexp, todos etc, you can use the ""sparse tree"" commands to narrow down what is visible (C-c / and C-c \). You can also ref to headlines using [[Some headline]] or set your own label <<somelabel>> and ref to it [[somelabel]]. You can also collapse to a comfortable level using S-tab a couple of times. C-c C-p and C-c C-n for navigating to previous/next headline and C-c C-u for ""up one level"" are worth mentioning.  Edit: Forgot to mention org-tags-view which is pretty neat for finding headings with certain tags, even across different agenda files."
emacs,2wh9o0,eeeickythump,8,Fri Feb 20 00:13:06 2015 UTC,"I've used orgmode a lot, Evernote only a little. Orgmode works best when your notes are stored as ""children"" within a single large outline (or a small number of outlines, e.g. one per large topic). Storing hundreds of individual files doesn't work so well.  It is possible for orgmode to display images inline by default - there is a variable that controls that (org-startup-with-inline-images) or you can put this line in your orgmode file:  #+STARTUP: inlineimages   You can apply multiple tags to items in orgmode files, although the tags are crowded onto the end of the item's headline so it can get cumbersome and ugly if an item has more than a handful of tags.  Adding notes can be done very efficiently in orgmode using the ""capture"" functionality. You can add notes based on different predefined templates by associating each template with a hotkey. You can even set up a bookmark in your web browser that will add highlighted text as a new orgmode note when you click it (see ""org-protocol"" in the manual).  The main problem with orgmode is that it is completely dependent on Emacs. Essentially no other program understands the orgmode format, beyond the fact that it is based on plain text. There is a mobile app (MobileOrg) but it seems to be seldom updated and I have not found it useful. There are also modules that attempt to integrate orgmode with Toodledo and Trello. However, if you rely on orgmode then you should be aware that it will be difficult for you to interact with your notes database when you are not sitting in front of a computer running Emacs.  For notes, I use SimpleNote (free, available for most platforms + web client, syncs your notes, plain text but also allows tagging of notes). For task management, orgmode is the most powerful piece of software available -- no contest -- but because of its mobile-unfriendliness I have ended up using OmniFocus instead (Mac/iOS only).  Another alternative to consider is Microsoft OneNote, which is free and is available on a lot of platforms. I don't think MS will be disappearing any time soon."
emacs,2wh9o0,mnp,10,Thu Feb 19 23:59:50 2015 UTC,"http://www.orgzly.com/ is showing some promise.  Org on the desktop, save to dropbox, read on mobiles in orgzly.  You can also edit in dropbox with a dumb text editor.  I do wonder if syncing Org and Evernote is feasible.  There is an Evernote HTTP API so maybe someone will write one, then we'll get all three!"
emacs,2wh9o0,IvanMalison,1 point,Fri Feb 20 00:12:37 2015 UTC,I always wonder why no one has attempted to compile emacs on android but run it in daemon mode and build ui that would simply interact with the emacs process to handle org stuff.
emacs,2wh9o0,catern,1 point,Fri Feb 20 07:15:53 2015 UTC,"Four months later, but that's... actually a really good idea..."
emacs,2wh9o0,mszegedy,3,Mon Jul 20 07:00:40 2015 UTC,"The problem is, org-mode doesn't sync with my phone, and I can't edit it on there either. The answer to your post would be the holy grail for me, since easily-editable universally-synchronized plaintext notes are pretty much all I want out of my phone, Emacs, and life in general, but sadly I asked on this subreddit, and there's no good way to edit org-mode on your phone. In the distant future, if I have free time, I might try to write such an editor, but there's a lot of other projects in the way, and I'm not the best man for it."
emacs,2wh9o0,openist,3,Fri Feb 20 05:39:54 2015 UTC,"You should try out orgzly, its still beta but its working great for me as I keep my org files on dropbox: https://play.google.com/apps/testing/com.orgzly"
emacs,2wh9o0,mszegedy,1 point,Sat Feb 21 00:49:02 2015 UTC,"Alas, my phone can't run anything"
emacs,2wh9o0,openist,2,Sat Feb 21 01:27:45 2015 UTC,I believe you just have to join the google group to get into the beta.
emacs,2wh9o0,nevenh,1 point,Sat Feb 21 01:48:45 2015 UTC,"Yes, you have to join Google group https://groups.google.com/d/forum/orgzly-android-beta first.  After that, the link will work for you.  This is because app is only available on Google Play in the beta channel. Production version is coming very soon now."
emacs,2wh9o0,dunz,2,Sat Feb 21 13:56:50 2015 UTC,"Well... You can actually. I haven't tried it myself yet, but it seems to work quite well: https://play.google.com/store/apps/details?id=com.matburt.mobileorg"
emacs,2wh9o0,IvanMalison,3,Fri Feb 20 07:49:30 2015 UTC,"In addition to the fact that mobileorg is terrible (or maybe just extremely disappointing), you have to consider that development of the application has all but stopped. I spent a decent amount of time getting syncing to work really nicely (auto saves/syncs for mobile org files), but I wouldn't really recommend that to anyone else. Synchronizing with an existing todo application or hoping that orgzly is going to work out is probably the best bet at this point."
emacs,2wh9o0,dfas215,2,Fri Feb 20 08:30:02 2015 UTC,Well I sync my org mode notes in git and same repo is syncd to my mobile also. You can try PocketGit app with Bitbucket private git repos.
emacs,2wh9o0,IvanMalison,2,Fri Feb 20 08:28:46 2015 UTC,"I feel exactly the same way.  Is a decent org-mode editor for android really too much to ask? The technical problem of universal synchronization has already been solved by git/dropbox/google drive/whatever. I'm not asking for all the power of emacs on my mobile device -- I just want something that is capable of generating agenda views, capturing new tasks, and generating notifications at the appropriate time (and maybe integrating with google calendar too, although org-caldav seems to do a decent job of that).  I feel like there is a small but passionate contingent of people who are all dying for a decent solution to the org on mobile problem, and I wish there was some way we could all band together to take some sort of collective action.  FWIW, there has been some activity in the org-toodledo repo https://github.com/christopherjwhite/org-toodledo/pull/39#issuecomment-75162056, which might be a passble solution."
emacs,2wh9o0,tashbarg,3,Fri Feb 20 08:34:44 2015 UTC,"Is a decent org-mode editor for android really too much to ask?   I think we should be grateful for the wonderful system org-mode is and for the time and work people put into it (for free!). In that context, yes, that's too much to ask.   I wish there was some way we could all band together to take some sort of collective action.   Why do you believe there isn't such a way? You could set up a mailing list, a forum or a github repo to gather those people in one place."
emacs,2wh9o0,oantolin,4,Fri Feb 20 10:41:52 2015 UTC,"I think you can almost all of what you want with Org Mode, possibly with the exception of using it comfortably from your phone. There is an app called MobileOrg (one for iOS, one for Android) which I've never tried, but people don't seem to like them very much. As for some of the things you mention:   I can embed as many pictures (just by pasting or drag&dropping pictures/PDFs or other resources into a note as I want, and most of them will be displayed inline)   Try using /u/abo-abo's org-download package. Here's a 90 second demo video.   I can attach tags to notes and search for notes by tags. This makes managing and finding hundreds of notes really easy.   Use Org Mode tags.   Do I keep all my notes (which I have hundreds of in Evernote) in one file or in as many as I have notes? Just opening and saving notes is quite a hassle in Emacs (C-x C-f and then navigating through the path to a specific file is just so much more work than just F6 in Everonet and typing in a tag name). I don't know if I want to keep pathes to notes in my mind constantly.   Here Org Mode forces you to decide how to organize instead of giving you a ready made choice (that you might not like). You should figure out how many files with what sort of items you want and setup capture templates to quickly send items to the right place and then view them in the agenda."
emacs,2wh9o0,tausinator,2,Fri Feb 20 13:30:17 2015 UTC,Thanks for the link to the demo video - org-download looks way better than I dared hope for
emacs,2wh9o0,Imxset21,3,Fri Feb 20 14:11:20 2015 UTC,You might be interested in evernote-mode.
emacs,2wh9o0,wadcann,3,Fri Feb 20 06:28:28 2015 UTC,"I've read that it can encrypt data.   I set up GPG, encrypted a .org file, and whenever I open a foo.org.gpg file, emacs prompts me for the password used to encrypt my privkey.   Just opening and saving notes is quite a hassle in Emacs (C-x C-f and then navigating through the path to a specific file is just so much more work than just F6 in Everonet and typing in a tag name). I don't know if I want to keep pathes to notes in my mind constantly.   I don't use Evernote or use org-mode in the fashion you're talking about, but I'd just create a bookmark (C-x r m while in the file) and then jump to it (C-x r b).   I cannot just drag and drop resources into a note anymore. I have to do something like this: ""[[C:\myResources\myResource.png][My Picture]]"" (First saving the resource in that resource folder, then specifying the path to it in emacs). Again, that's way too much work, but there may be a quicker way to do it?   I use emacs in a terminal, so I wouldn't know, but it looks like it.   The resources are not displayed inline. Though I've read that org-mode is capable of doing that (just images, I think), I have not gotten it to work yet. I haven't stop trying, however. It'd be nice if somebody could confirm that it is indeed possible though.   I use emacs in a terminal, again, but according to the manual you can toggle on inline images in org-mode with C-c C-x v, and you might want to just flip on org-startup-with-inline-images and leave it on if that's always what you want.   Navigating through notes (regardless of which method I choose to store notes (either one big file with 1 headline for each notes, or one file per note)) is something that I have yet to learn properly (I have just been using the cursor navigation shortcuts so far, haven't learned better/quicker ways yet (I know you can attach tags to headlines and then search for those, I think)   You don't want a file per note, I'm sure of that.  I use one very large org-file, though I don't give it much structure other than a tree -- I don't use tags currently, but org-mode does support them, including navigating around through them."
emacs,2wh9o0,zenshinji,2,Fri Feb 20 08:33:55 2015 UTC,"I'll add a way to decrease the friction of adding notes in org. I just wrote up an article, http://www.thinknix.net/2015/02/19/cross-platform-system-wide-org-capture/, which describes how I use tools on various OSes to set up F9 as a system-wide trigger for org-capture."
emacs,2wh9o0,dalavana,2,Fri Feb 20 13:01:35 2015 UTC,"If viewing/editing in mobile is an issue, have anyone tried Emacs on android (http://www.emacswiki.org/emacs/EmacsOnAndroid) ?"
emacs,2wh9o0,murdsdrum,1 point,Fri Feb 20 21:38:02 2015 UTC,"For linking image files, I recommend you the filenametimestamps module https://github.com/novoid/Memacs/blob/master/docs/memacs_filenametimestamps.org from https://github.com/novoid/Memacs  All I do have to do to link any file (not only images) is: [[tsfile:2015-02-21-a-file-name.png]] (yasnippet helps even further)  This way, it's pretty easy to link any file without having to worry about the location of the file."
emacs,2wh9o0,mongrol,-5,Sat Feb 21 18:28:55 2015 UTC,Orgmode
emacs,2wgf83,skeeto,1 point,Thu Feb 19 18:34:55 2015 UTC,"This is just what I needed to do some technical diagrams for business-type folks. Great video, thanks for posting."
emacs,2wilny,workisnotfun,2,Fri Feb 20 04:51:38 2015 UTC,Looks like maybe you need quotes around your git.exe path? It looks like there is an unescaped space in there
emacs,2wilny,p4p3r,1 point,Fri Feb 20 06:52:54 2015 UTC,"This is probably the problem, do you know what I can do to quote or escape the space?"
emacs,2wilny,p4p3r,1 point,Sat Feb 21 00:16:47 2015 UTC,"If you defined the path to git.exe somewhere in your .emacs file, quote it there. Or you can check to see if you need quotes by cut and pasting that command to the command prompt."
emacs,2wilny,p4p3r,1 point,Sat Feb 21 02:03:18 2015 UTC,"The command doesn't work in command prompt since it gets cut off by the space. Magit actually just found the path to git.exe by itself, would you know what needs to go in the .emacs to reset it with the quotes?"
emacs,2wilny,p4p3r,1 point,Sat Feb 21 03:30:20 2015 UTC,What have you tried to solve the problem?
emacs,2wilny,p4p3r,1 point,Sat Feb 21 03:52:23 2015 UTC,"I tried C-h f magit-pull which brought me to magit.el where I think I need to step into magit-run-git-async (this looks like what I'm suppose to change) but I couldn't find out what that was (variable or func) or where it was defined.   Update: I think this is the relevant code that looks for the git.exe but I'm not sure what to change here   (defcustom magit-git-executable   (or (and (eq system-type 'windows-nt)            ;; On Windows asking for ""git"" from $PATH might also return            ;; a ""git.exe"" or ""git.cmd"".  Using ""bin/git.exe"" directly            ;; is faster than using one of the wrappers ""cmd/git.exe""            ;; or ""cmd/git.cmd"".  The wrappers are likely to come            ;; earlier on $PATH, and so we have to exlicitly use            ;; the former.            (let ((exe (executable-find ""git.exe"")))              (when exe                (let ((alt (directory-file-name (file-name-directory exe))))                  (if (and (equal (file-name-nondirectory alt) ""cmd"")                           (setq alt (expand-file-name                                      (convert-standard-filename ""bin/git.exe"")                                      (file-name-directory alt)))                           (file-executable-p alt))                      alt                    exe)))))       ;; When the only cost is finding the executable, then it it       ;; better not to cache the full path.  It might not be installed       ;; in the same location on machines whose repositories are       ;; accessed using Tramp.       ""git"")   ""The Git executable used by Magit.""   :group 'magit-process   :type 'string)"
emacs,2wilny,redmorph,1 point,Sat Feb 21 04:05:08 2015 UTC,"I also don't understand your ""gets cut off by the space"" part and I think you should trouble shoot your git install first.  Is git on your system path? It looks like you installed using msysgit, is that true? On windows there are only a few reliable ways to run git that I'm aware of: msysgit or from cygwin.   At work on Win 7, I choose cygwin and just run emacs from shell. Not optimal, but easier."
emacs,2wilny,bjackman,1 point,Sat Feb 21 05:38:52 2015 UTC,"When you said test if the command works on command prompt I did. The result was (same for cygwin as well)  'c:\Program' is not recognized as an internal or external command, operable program or batch file.   The chance that this is the problem with the path is pretty high but I'm not sure what variable to ""escape"" or quote to get this working.   On a side note Git Bash is another reliable way to run git on Windows, I believe it is similar to msysgit (its a unix tool that ships through the windows git installer)."
emacs,2wg6vy,abo-abo,7,Thu Feb 19 17:35:18 2015 UTC,"I really would love to use this package but I just can't get past the metaphors to actually understand how to use it successfully.  Sometimes it's fun to pick a theme and run with it, but I feel like in this case it's gotten a little out of hand.  Kudos to the author though, it definitely seems like it would be a useful upgrade from smartrep."
emacs,2wg6vy,rson,5,Thu Feb 19 19:00:53 2015 UTC,"Yeah, if you need a table to remember what an option means it's probably not good naming.  Especially considering there's only three things the ""colors"" influence (right now - more would be even worse):   What to do when an option is picked What to do when a non-option is picked What to pass on to children   For a different (I'd argue better) design you could either add those as separate options, or you could essentially rename the ""colors""."
emacs,2wg6vy,hirnbrot,1 point,Thu Feb 19 19:23:36 2015 UTC,"I'm working on an alternate design, just to see how it looks like.  The current design has the advantage of having 5 recipes, each of them are useful verbatim. I wanted to avoid the situation of having exponentially combinable options with certain combinations that don't make sense.  If the alternate combinable design works, I'll make it permanent."
emacs,2wg6vy,hirnbrot,1 point,Thu Feb 19 19:45:49 2015 UTC,"Well, you're only missing ""allow and continue""/""quit"" (i.e. pink-but-quit-on-head) and ""disallow and quit"", though that really doesn't make any sense. That tells me there are effectively three options for ""when a non-option is quit"": continue, quit and disallow.  Though I really do believe the worst problem is the names.  Any idea what that alternate design looks like?  Also, Hydra looks really cool, I'm just too rubbish at elisp and too entrenched in my vi-like editing style to come up with any neat uses for it."
emacs,2wg6vy,kaushalmodi,3,Thu Feb 19 20:13:06 2015 UTC,It's pretty neat for mapping toggles and launching stuff.
emacs,2wg6vy,syl20bnr,2,Thu Feb 19 20:48:48 2015 UTC,"Any idea what that alternate design looks like?   See color to toggle correspondence, and alternative examples.  I'll just site the table here:   red - blue - :exit t amaranth - :nonheads warn teal - :nonheads warn :exit t pink - :nonheads run   Both semantics are fully compatible. You can use the old way, or switch to the new one. :exit property can be inherited and overridden by heads, :nonheads property can't."
emacs,2wg6vy,syl20bnr,1 point,Thu Feb 19 21:01:45 2015 UTC,"I would go for these properties on the hydra itself (body):   :persistent t (needs at least one explicit head with :exit t otherwise error in logs) :run all (everything exit ?) :run heads_only  (all heads exit ?)   Seems to me self explanatory, I discovered the exit rules while editing the message. No need to match these to abstract colors."
emacs,2wg6vy,syl20bnr,1 point,Thu Feb 19 21:22:14 2015 UTC,:exit all :exit heads-only :exit none :run all :run heads-only   And we should be able to do anything with this.  The -only suffixes may be not necessary.
emacs,2wg6vy,syl20bnr,1 point,Thu Feb 19 21:29:32 2015 UTC,"Your way seems hard to understand.  I'm happy with the implicit :exit nil.  I'm also happy with the 3-way toggle nil (default) / warn / run. But I'm not sure if :nonheads is a good name.  :nonheads treats the behavior with bindings that aren't heads. If it's nil (default), means they aren't treated, therefore Hydra quits.  If it's not nil, Hydra intercepts all bindings that aren't heads and decides what to do with them. One option is warn: issue a warning and do nothing. Other option is run: run the binding."
emacs,2wg6vy,MyNameIsFuchs,1 point,Thu Feb 19 21:36:36 2015 UTC,I find my proposal a lot more explicit. Keywords are all actions instead of a mix of action and bindings.  :exit none :run all tells right away the resulting behavior: the hydra will never exit except with an explicitly defined head with :exit t.
emacs,2wg6vy,syl20bnr,1 point,Thu Feb 19 21:44:15 2015 UTC,Your way does not allow for inheritance and overriding of :exit which is quite elegant.
emacs,2wg6vy,syl20bnr,1 point,Thu Feb 19 21:53:32 2015 UTC,"Why do you even need inheritance with this proposal ? The behavior is explicit.   :exit heads-only all heads exit by default :exit all everything exits etc... :exit none nobody exits etc...   As I said, you can remove the -only if you want."
emacs,2wg6vy,MyNameIsFuchs,1 point,Thu Feb 19 21:57:48 2015 UTC,"I'd also love to see what the other suggested. The colors on my skin (default prelude) are sometimes really hard to see. Bad contrast. Especially the Red is basically unreadable for me. Also, the colors are not intuittive. You're basically running a state machine and you could just say what state is next:  :goto :exit (blue) :goto :hydra (red)   You can also just say :default-goto.  FWIW, I don't understand the otehr colors. I guess I don't really understand what all the tables headers mean (Executing HEADS vs NON-HEADS? What?)"
emacs,2wg6vy,MyNameIsFuchs,1 point,Thu Feb 19 22:04:06 2015 UTC,"The colors on my skin (default prelude) are sometimes really hard to see   All faces are customizable. I provide the defaults which look good on the default Emacs.   Also, the colors are not intuittive   The colors aren't supposed to be intuitive. They're supposed to be recognizable. In my kitchen, I use a knife:   with red handle for meat with blue handle fish with cyan handle for cake   By just looking at the knife's handle I remember what it's for. The color doesn't have to make sense, it needs to build the intuition through memory.   You're basically running a state machine and you could just say what state is next:   I know that I'm running a state machine, and the state is always visible through color.   FWIW, I don't understand the otehr colors.   That's the beauty of it. You don't need to understand the whole org-mode just to use the TODOs. Same for you, start with zero switches: you'll get a Hydra with all HEADS that repeat and that quits when you press any NON-HEAD.   I guess I don't really understand what all the tables headers mean (Executing HEADS vs NON-HEADS? What?)   Example:  (defhydra hydra-zoom (global-map ""<f2>"")   ""zoom""   (""g"" text-scale-increase ""in"")   (""l"" text-scale-decrease ""out""))   The default one without switches: <f2> gggll work keeping the Hydra going, g is a HEAD and l is a HEAD.  Once you press e.g. C-f (an NON-HEAD), this Hydra will quit.  Now if you do   (defhydra hydra-zoom (global-map ""<f2>"" :exit t)   ""zoom""   (""g"" text-scale-increase ""in"")   (""l"" text-scale-decrease ""out""))   only <f2> g and <f2> l will work.  However, you can override g like this:  (defhydra hydra-zoom (global-map ""<f2>"" :exit t)   ""zoom""   (""g"" text-scale-increase ""in"" :exit nil)   (""l"" text-scale-decrease ""out""))   Now, <f> gggg works, but still <f2> lll doesn't.  If you pass (:nonheads run) <f2> gC-fgg will work, forwarding one char in between.  If you pass (:nonheads warn) <f2> gC-fgg will work, warning that C-f doesn't work, but then continuing to zoom."
emacs,2wg6vy,syl20bnr,1 point,Thu Feb 19 22:30:34 2015 UTC,"I rewrote them with my proposal:  Unchanged (default behavior of transient map):  (defhydra hydra-zoom (global-map ""<f2>"")   ""zoom""   (""g"" text-scale-increase ""in"")   (""l"" text-scale-decrease ""out""))   :exit t -> :exit all  (defhydra hydra-zoom (global-map ""<f2>"" :exit all)   ""zoom""   (""g"" text-scale-increase ""in"")   (""l"" text-scale-decrease ""out""))   :exit t -> :exit all  (defhydra hydra-zoom (global-map ""<f2>"" :exit all)   ""zoom""   (""g"" text-scale-increase ""in"" :exit nil)   (""l"" text-scale-decrease ""out""))   So what you don't like in this ?"
emacs,2wg6vy,MyNameIsFuchs,1 point,Thu Feb 19 22:48:16 2015 UTC,"What happens if someone comes into your kitchen and look for a knife ? Will the colors make sense for him/her ? What happens if in your friend's kitchen  the colors of the knives are not the same ? Is there a standard color code for knives that everybody knows ? What happens if a user change the color theme and it swaps the colors ?  To make it explicit a good solution is to write in plain English on the knife what it is for. Better put a picture on it with a bread, a meat etc..."
emacs,2wg6vy,rson,1 point,Fri Feb 20 12:32:06 2015 UTC,How do you customize the face of the head-colors? I can't find anything in the readme. Much appreciated your help!
emacs,2wg6vy,tending,2,Fri Feb 20 15:22:50 2015 UTC,"I just went back and I think I understand the colors a little better now. Proposal:   Non-Heads: call them Non-Actions instead Heads: call it actions   Next states can be:   exit  stay   Executing actions can:   ignore-and-warn  ignore  allow   This allows you to combine them all and have a programmer understand the code with a short 3 sentence introduction to hydra. There is IMO no chance anybody will be able to understand the code at all with all the colors.  (defhydra hydra-toggle (:action-goto exit;; by default, exit hydra state                         ;; :action-exec allow                         :no-action-goto stay ;; by default, stay in hydra mode even if none of the hydra keys are pressed                         :no-action-exec ignore-and-warn) ;; by default, do not exec the non-hydra action   (""a"" abbrev :goto stay)   (""q"" nil :goto exit)) ;; We need to explicitly exit hydra state to get out.   This should cover all possibilities, no?  Unrelated question: Is it possible to nest hydras?"
emacs,2wg6vy,tending,1 point,Fri Feb 20 15:42:32 2015 UTC,I was not sure to understand the intro but I read the example and understand what it does right away. +1
emacs,2wg6vy,tending,1 point,Fri Feb 20 16:12:49 2015 UTC,"If by next hydras you mean nesting, it's possible."
emacs,2wf4ql,edwold,2,Thu Feb 19 11:23:56 2015 UTC,"I don't know about ipython, but standard python has to be started with the -i option from emacs shell on windows for the interactive prompt to appear. Maybe ipython also needs this startup option."
emacs,2wf4ql,kcin,1 point,Thu Feb 19 12:57:27 2015 UTC,Thanks for the response! I can use regular python (just typing 'python') from the shell with no problem though. Are you using emacs 24?
emacs,2wf4ql,kcin,2,Thu Feb 19 13:14:54 2015 UTC,Yes. 24.1
emacs,2wf4ql,ChesterMcFistiecuffs,1 point,Thu Feb 19 13:57:23 2015 UTC,"Ipython shell works fine for me in emacs. What does your .emacs file look like. Here is the relevant section from mine.  ;; Python (setq python-shell-interpreter-args ""-i C:\\Python27\\Scripts\\ipython-script.py --pylab=qt"" python-shell-prompt-regexp ""In \\[[0-9]+\\]: "" python-shell-prompt-output-regexp ""Out\\[[0-9]+\\]: "" python-shell-completion-setup-code ""from IPython.core.completerlib import module_completion"" python-shell-completion-module-string-code ""';'.join(module_completion('''%s'''))\n"" python-shell-completion-string-code ""';'.join(get_ipython().Completer.all_completions('''%s'''))\n"")"
emacs,2wfdmq,f0086,4,Thu Feb 19 13:27:47 2015 UTC,"You can use a web-mode-hook, just check for the twig extension in the hook:  (defun maybe-use-twig-settings ()   (when (and (buffer-file-name)              (equal (file-name-extension (buffer-file-name)) ""twig""))     (setq tab-width 2)))  (add-hook 'web-mode-hook 'maybe-use-twig-settings)"
emacs,2wfdmq,jordonbiondo,1 point,Thu Feb 19 14:16:57 2015 UTC,"Awesome, thanks!"
emacs,2wfdmq,aport,2,Thu Feb 19 16:57:50 2015 UTC,Try out dtrt-indent. It's done a great job at automatically detecting indentation settings on all the files I've tried.
emacs,2wf6tu,silent519,3,Thu Feb 19 11:55:49 2015 UTC,Sounds like it's not enabled. You'll need to add your new layer to the dotspacemacs-configuration-layers list in your .spacemacs file to enable it.
emacs,2wf6tu,chaptastic,1 point,Thu Feb 19 12:03:55 2015 UTC,"that worked, thanks a lot."
emacs,2wcw8u,theNerd96,8,Wed Feb 18 21:43:40 2015 UTC,"org-mode has its own markup language, so either use that or use Markdown, you can't use both, unfortunately. Emacs has pretty good Markdown support with markdown-mode and if you use Pandoc to convert to HTML, there’s also pandoc-mode to help with that.  If you’re completely new to Emacs, though, you should probably start with the tutorial, if you haven’t gone through it already. Open Emacs and press C-h t (that’s Ctrl-h followed by t)."
emacs,2wcw8u,permafrosty,3,Wed Feb 18 21:58:27 2015 UTC,Thanks for that. Can this process be automated? I.e. as soon as I write a new page in Markdown it will be automatically exported as HTML into a specific location?
emacs,2wcw8u,csantosbu,6,Wed Feb 18 22:27:02 2015 UTC,"Have a look ah chapter 13 of org-manual, publishing. Then,  go to check gitit, it might be helpfull too."
emacs,2wcw8u,mnp,2,Wed Feb 18 22:52:09 2015 UTC,"https://github.com/pyrocat101/moo can do that.  It starts a little server and throws your web browser to it.  If the .md changes, the page updates in your browser."
emacs,2wcw8u,kabads,1 point,Thu Feb 19 12:10:35 2015 UTC,"Not sure about markdown, but org-mode will export to html as well as a bucket load of other file types."
emacs,2wcw8u,kabads,1 point,Wed Feb 18 22:51:39 2015 UTC,"Right, that does sound like something I'd want. Because I can then view the files externally via a web browser. Does emacs allow for search in the same sense that Wikipedia search works? Could there be an index or home page/file which opens on start up?"
emacs,2wcw8u,grabyourmotherskeys,1 point,Wed Feb 18 23:13:35 2015 UTC,"These are only static pages, so no web search. You could have a htdig install which would do it, but that's outside of emacs. Emacs itself does have a search function (as do all good text editors). Emacs basically produces html files from org files, which is then published on your Dropbox Public directory. That way, you can keep a check on your notes. You can have a notes.org file which exports to notes.html and has links to Item1.org (Item1.html) and Item2.org (Item2.html). When exporting, org-mode translates the html a ref links to the new html files."
emacs,2wcw8u,grabyourmotherskeys,1 point,Fri Feb 20 19:19:20 2015 UTC,I don't know exactly how but I am sure you could write some lisp code to automatically run the export function when you save a .org file.  Check out the save hook functions here https://www.gnu.org/software/emacs/manual/html_node/elisp/Saving-Buffers.html#Saving-Buffers
emacs,2wcw8u,monotux,1 point,Wed Feb 18 22:57:33 2015 UTC,This sounds extremely complex for a newbie like myself. I am still trying to get my head around what emacs actually does because at the moment it seems like it can do everything apart from making coffee.
emacs,2wcw8u,instant_sunshine,1 point,Wed Feb 18 23:10:38 2015 UTC,It is also misguided I think! I just tried it myself and the writing out of the html file caused the save hook to run again and again (infinite loop). Fortunately emacs stopped recursion after it happened to many times. :)
emacs,2wcw8u,ThinkLarger,5,Wed Feb 18 23:14:13 2015 UTC,"I use org-mode for this very purpose. I have a few key documents which I link to other documents (C-c C-l bound to org-insert-link). I then export these documents to my web folder on the internal network so I can reach it from work. Being able to create links from my time report to my general HOWTO-document and back is really, really handy.   TL;DR just use org-mode. It's awesome."
emacs,2wcw8u,username223,3,Thu Feb 19 08:27:41 2015 UTC,"I would recommend Gollum it's a Git powered Wiki that uses interlinked markdown documents. (It also supports a lot of other markup formats including org-mode)  https://github.com/gollum/gollum  You just create the markdown files and the Gollum server will host them.  Emacs has great markdown support (markdown-mode) so it's an excellent place to author the files.  Although Gollumn also provides editing / history features.  Alternatively look into the org mode syntax, it's slightly more complex than markdown, so that might be a problem.  Also as others have mentioned, Jekyll may also be a useful option. gem install jekyll  Middleman is a similar option to Jekyll, it's more general and less focussed on a blogging style format. gem install middleman  Edit: There's also Gollum static site gem install gollum-site to just build out the wiki as static HTML to be placed on any old server."
emacs,2wcw8u,perlstalker,2,Thu Feb 19 03:12:58 2015 UTC,Looking forward to hear some tips on this!
emacs,2wcw8u,dfas215,2,Wed Feb 18 22:45:03 2015 UTC,"I believe Muse is designed to do this, among other things.  That would probably be the easiest way to get what you want."
emacs,2wab41,howardthegeek,9,Wed Feb 18 06:11:35 2015 UTC,"Note that for the chmod case, an even more Emacs way is to do it automatically!  (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)"
emacs,2wab41,Alan_Shutko,2,Thu Feb 19 01:46:29 2015 UTC,"Great stuff, thanks! I want also to share my own post with a couple of other ideas for working with remotes, e.g. enabling dired. https://github.com/snosov1/dot-emacs#terminal-emulator-and-ssh"
emacs,2wab41,sergeinosov,2,Wed Feb 18 07:12:57 2015 UTC,"Thanks for this write up. So much to learn in Emacs land but completely worth the effort. I committed to using Emacs about 3 months ago. I had been studying Python and wanted to advance to a more professional IDE than IDLE. After poking around discussion boards, I convinced myself that investing the time to learn Emacs would benefit me beyond just programming Python. I highly recommend this approach as my understanding of computing in general has gone up significantly. I'm beginning to actually prefer to use the command line for almost all my daily tasks!"
emacs,2wab41,grok_life,1 point,Wed Feb 18 17:39:10 2015 UTC,I'm beginning to actually prefer to use the command line for almost all my daily tasks!   It significantly reduces all the ridiculous manual labour induced by using a mouse to push boxes around a GUI...   Fast isn't always easy.  You may like to try a window manager like Ratpoison or Stumpwm (or Slate or Phoenix on OSX)
emacs,2wab41,instant_sunshine,1 point,Fri Mar 6 06:17:46 2015 UTC,"I want to love tramp, but it keeps getting in my way:   if I am editing python files, and want to send my .py file to a python interpreter, it sends it to the python on my laptop, and not the one on my laptop, which is what I want same applies for most shell commands it seems to do a bunch of handshaking and network IO everytime it tries to save a file, which is slow when I connect to a remote directory it starts in ""/"", and I have to navigate down to my home directory, which is annoying"
emacs,2wab41,zoidberghoneydew,1 point,Thu Feb 19 19:47:01 2015 UTC,"if I am editing python files, and want to send my .py file to a python interpreter, it sends it to the python on my laptop, and not the one on my laptop, which is what I want   Tramp's really nice for connecting to low latency network and virtual machines. As for starting remote python interpreter rather than your local one, I believe it shouldn't be that way. Imagine that I create a virtual machine to replicate a specific build environment. I want to use the toolchain in that environment, not mine. And I don't think it's feasible to send remote code back to local for processing. Imagine I have to compile a file; then every file that it depends have to be downloaded to my local machine. Imagine if it's a project. The same applies for interpreted languages, i.e. you want to run your test suite...   when I connect to a remote directory it starts in ""/"", and I have to navigate down to my home directory, which is annoying   You can use ~ to quickly jump to your home. And you shouldn't navigate remote file system with find file prompt. Use Dired, because once you open a directory and go back, it happens instantly since it only reuses previously opened Dired buffer."
emacs,2waxfq,zk_phi,5,Wed Feb 18 11:48:19 2015 UTC,"This looks very interesting, especially the display of binary and hex values.  What would you say are the biggest differences between this and emacs' built in rpn calculator M-c calc?"
emacs,2waxfq,Quick_A_Distraction,3,Wed Feb 18 14:45:57 2015 UTC,"rpn-calc is designed to be a handy tool for daily programming use.  For example, rpn-calc uses popup instead of making a new window, which is nearer to the edit point. It also displays binary representation of numbers automatically, which may be useful for programmers. rpn-calc is also easy to customize, in the sense that you can add/remove some operators with just one or two lines of Emacs Lisp.  Another important difference is that you can push not only numbers but any lisp objects to the stack, and apply any lisp functions. So rpn-calc can also be used as an interactive, RPN version of eval-expression."
emacs,2waxfq,eazzor,1 point,Wed Feb 18 18:04:20 2015 UTC,This looks really nice. Will you make it available on melpa?
emacs,2waxfq,kaushalmodi,1 point,Thu Feb 19 16:51:34 2015 UTC,"not yet, but I hope someday."
emacs,2waxfq,kaushalmodi,1 point,Fri Feb 20 09:56:40 2015 UTC,I haven't tried it yet but can it be configured to show the results in dec and hex instead?
emacs,2waxfq,kaushalmodi,1 point,Fri Feb 20 13:21:01 2015 UTC,you can see screencast here
emacs,2waxfq,kaushalmodi,1 point,Fri Feb 20 17:15:35 2015 UTC,"Thanks I gave this a try. It's incompatible with one of the packages I have installed: wrap-region.  I have wrap-region-mode enabled in emacs-lisp-mode and org-mode. For org-mode, I have the following config  (wrap-region-add-wrapper ""+"" ""+"" nil 'org-mode))) ; select region, hit + then region -> +region+ in org-mode   The problem is the even though I don't use + sign to wrap stuff in emacs-lisp-mode, the wrap-region package binds + to   (lambda (arg) (interactive ""p"") (wrap-region-trigger arg ""+""))   The wrap-region-trigger function figures out based on the major mode if the + key should wrap the text or not.  But that breaks when I try to enter + to do addition in rpn-calc.  The bigger problem is that I have most of the math-signs bound this way as org-mode uses those for formatting:  (wrap-region-add-wrapper ""="" ""="" nil 'org-mode) ; select region, hit = then region -> =region= in org-mode (wrap-region-add-wrapper ""*"" ""*"" nil 'org-mode) ; select region, hit * then region -> *region* in org-mode (wrap-region-add-wrapper ""/"" ""/"" nil 'org-mode) ; select region, hit / then region -> /region/ in org-mode (wrap-region-add-wrapper ""+"" ""+"" nil 'org-mode))) ; select region, hit + then region -> +region+ in org-mode   I'm not sure if you can fix rpn-calc to treat a + as literal + as in (insert ""+"") and not call the function + is bound to.  Update: Ah, or probably I can put a (let ((wrap-region-mode nil)) .. ) somewhere!"
emacs,2w8icf,cocreature,1 point,Tue Feb 17 21:15:36 2015 UTC,"I'm still on 24.1 (released June 2012).  I should upgrade, but I don't really have the motivation to do it, because this one works nicely and migrating my config to the new version can be a hassle (some package changed, so I have to tweak its config, etc.) Is there some compelling new feature which is worth the upgrade?"
emacs,2w8icf,kcin,5,Tue Feb 17 21:30:46 2015 UTC,"For me, one reason to stay up-to-date has been eww (web browser with native html rendering)."
emacs,2w8icf,tmalsburg2,2,Tue Feb 17 22:17:52 2015 UTC,What do you use a web browser in emacs for?
emacs,2w8icf,MaraschinoPanda,4,Wed Feb 18 03:58:04 2015 UTC,"Mostly for reading plain text web pages, like bug reports, mailing lists, and online documentation. I've configured browse-url to follow a simple regex and open those pages using eww and not an external web browser."
emacs,2w8icf,vibhavp01,2,Wed Feb 18 04:00:36 2015 UTC,"EWW has this really cool feature that there's no pinned twitter tab, so a lot less distractions when I want to read something (and finish it). There are no other tabs either, but that's beside the point:)"
emacs,2w8icf,abo-abo,1 point,Wed Feb 18 09:12:34 2015 UTC,"Apart from what /u/vibhavp01 mentioned, I use eww's render engine (shr) to display html emails in mu4e.  The results are of course not perfect but far better than those obtained with all other approaches that I tried."
emacs,2w8icf,tmalsburg2,2,Wed Feb 18 05:14:03 2015 UTC,better than chrome??!
emacs,2w8icf,fartlex_m,4,Wed Feb 18 05:46:55 2015 UTC,Hahaha you are funny :) What isn't better than Chrome.
emacs,2w8qk8,nautola,6,Tue Feb 17 22:14:41 2015 UTC,"If you dislike doing customization for vim-like keybindings in evil-mode, then I suggest you give Spacemacs a try. https://github.com/syl20bnr/spacemacs It has sane evil-mode keybindings for most common modes, and then some."
emacs,2w8qk8,magic_mud,4,Tue Feb 17 23:01:24 2015 UTC,Spacemacs is awesome. My emacs configuration was 50 % evil-mode configuration for several modes. With spacemacs I could throw out most of that.
emacs,2w8qk8,BakaKuna,4,Wed Feb 18 12:51:13 2015 UTC,"I used viper-mode for 10 (!) years after switching from vim to Emacs. You just have to go cold-turkey, and then you're swimming with the flow rather than against it."
emacs,2w8qk8,purcell,4,Wed Feb 18 00:12:16 2015 UTC,"To be frank, thinking in vim terms (text objects) is a great experience. After you have it, I don't see how people would want to give it up. On the contrary, what I (for)see is a way to use Emacs in order to create more object vim-like composability with the advantages of Emacs, a way to integrate evil and the emacs way. The only way to give 'evil' up, after you know vim, without handickaping yourself, is to find another way, which is at least better, to edit text with the speed vim offers. Otherwise, you probably just don't use an editor to edit too much."
emacs,2w8qk8,VanLaser,2,Wed Feb 18 10:06:09 2015 UTC,"On the contrary, what I (for)see is a way to use Emacs in order to create more object vim-like composability with the advantages of Emacs, a way to integrate evil and the emacs way.    Case in point: this is how trivial it is to define a ""defun"" text object.  So now I can do =ad to indent the current method/subroutine/function."
emacs,2w8qk8,jplindstrom,2,Thu Feb 19 00:03:28 2015 UTC,"nice!  In the same vein, this blog post puts it very well (an emacs user reading the ""Practical Vim"" book, now that's an approach I like)."
emacs,2w8qk8,VanLaser,0,Thu Feb 19 09:56:55 2015 UTC,"If you use evil-mode, all the functions that get run are evil-*, and I've gotten used to using motions, and my eyes glaze over when I hear about marks, regions, or points.    It makes it really hard to write any emacs lisp because when I hit C-h k it gives me evil functions."
emacs,2w8qk8,VanLaser,2,Wed Feb 18 17:01:35 2015 UTC,"Just hit C-z to enter the emacs state, then your C-h k will show you the non-evil functions. Then C-z to go back to the 'normal' evil mode (if you want)."
emacs,2w8qk8,jozefg,3,Thu Feb 19 09:47:47 2015 UTC,"I did this. I wish I had greater wisdom to share but I basically just went cold turkey. It helped that I'd spent time enough time in Emacs to know basic keybindings. After about a week I was comfortable.  I definitely don't regret ~2 years later, I'm much more comfortable in Emacs than Vim and the whole experience is smooth out of the box. It also made learning elisp a lot smoother since I didn't have to deal with Evil's strange elisp magic in order to write my own customization. I couldn't shake the whole ""bolted on"" feeling of evil, maybe that's better now."
emacs,2w8qk8,justinmkw,3,Tue Feb 17 22:23:56 2015 UTC,"How much experience had you with vim before switching to emacs? I have a hunch that the vimmers who ditch evil for vanilla emacs are mostly the same people who think , (comma) is useless, etc."
emacs,2w8qk8,jozefg,1 point,Tue Feb 17 23:02:18 2015 UTC,"I think I'd been using Vim for ~3 years. So I wasn't ""A Vim Guru"" or something but I would say I wasn't a complete novice :)"
emacs,2w8qk8,nandryshak,1 point,Wed Feb 18 00:31:30 2015 UTC,"How much experience had you with vim before switching to emacs? I have a hunch that the vimmers who ditch evil for vanilla emacs are mostly the same people who think , (comma) is useless, etc.   Hey Justin, I've seen you around in Vim circles. I used to use sneak. Space was my leader, jk my escape and I used , and ; extensively, I considered myself a hardcore vimmer.   I went from evil-mode to vanilla Emacs. So while I think people like me are far and few between, we do exist."
emacs,2w8qk8,justinmkw,1 point,Wed Feb 18 02:21:31 2015 UTC,"Good to know, thanks. You didn't feel a disadvantage in giving up modal editing or the vim ""grammar""? It seems like god-mode and hydra-mode are trying to replicate that."
emacs,2w8qk8,nandryshak,1 point,Wed Feb 18 16:09:39 2015 UTC,"Before I switched, I thought I'd miss it. But I don't. Things like s-expression commands, expand-region, and smartparens/paredit take the place of Vim's grammar, and even improve on it."
emacs,2w8qk8,justinmkw,1 point,Wed Feb 18 17:27:46 2015 UTC,"I don't see s-expression commands (smartparens) and vim commands as mutually exclusive. They're basically just text objects, and they combine nicely with vim/evil."
emacs,2w8qk8,AtticHacker,2,Wed Feb 18 17:32:08 2015 UTC,"TL;DR:  If you want cross mode compatibility and the convenience of Normal / Insert mode, give God mode a try.  When I migrated from Vim to Emacs (More like experimenting with it) I used the default Emacs bindings from the start and got used to them. I didn't know at that time about Evil mode or more common, Viper mode. Which in the end was a good thing for me. I personally don't mind the Emacs bindings, though I do have some keyboard adjustments (e.g. C-q for delete backwards instead of backspace).  Though I've always missed the Normal / Insert mode that Vi(m) provides and created an incredibly sloppy elisp mode that changes all key strokes to control keystrokes (it was very early in my elisp days). However one day I came across God-mode https://github.com/chrisdone/god-mode which I still use today. God mode implements the Normal / Insert mode with your Control keys (customized as well) which is great. So now I'm still using Emacs keybindings but don't have to hold down control for everything.  At one point I tried Evil mode for a while, but found it more frustrating than helpful. Mainly because of the incompatibility between modes and I think I've come to prefer the Emacs way overall."
emacs,2w8qk8,robertmeta,1 point,Tue Feb 17 22:43:35 2015 UTC,"God mode is interesting to me.  Honestly, I have tried evil and emacs a few times and found it clumsy, but I find the default (insane?!) hand cramping key bindings far too rough.  God mode is an interesting middle I might have to experiment with."
emacs,2w8qk8,nandryshak,2,Wed Feb 18 14:47:09 2015 UTC,Has anyone who migrated to Emacs from Vim stopped using evil-mode?   Yes. I started by making insert-state go to emacs-state instead. Now when I try to use Vim it looks like I'm just pressing random buttons.   I'm glad I made the transition. Evil-mode doesn't completely cooperate with Emacs.
emacs,2w8qk8,dangersalad,1 point,Tue Feb 17 22:59:16 2015 UTC,I did. I still have evil-mode installed and can toggle it with a key binding  as I find vim style editing be be better for certain tasks.
emacs,2w8qk8,mahnve,1 point,Wed Feb 18 04:24:57 2015 UTC,"I went cold turkey a couple of months ago. Before that I had used Vim for six years, and emacs/evil for a half year.   I hated it the first two weeks, but I am now at a point where I'm rewired to emacs keybindings for most basic stuff. There are still things which I haven't relearned, but my feeling is that it will take a few more months."
emacs,2w8qk8,nah00m,1 point,Wed Feb 18 08:16:49 2015 UTC,"I've tried on and off to stop using evil-mode.  I'm comfortable with basic navigation but complicated things I find confusing, I still think too vim-like.    So that I don't have to deal with normal-mode being incompatible with buffers like epa's encrypt, I have the default mode set to emacs-mode.  The problem I'm finding though is that when I try to stay in emacs-mode (or without evil at all) I go from using a very short set of keys to CTRL+N all the way down the page to find what I want.  Are there blog posts on experienced vim users switching from vim to emacs and then away from evil or directly to emacs keys?  I think the issue is that I'm not yet entirely comfortable with emacs commands but I'm not sure how or even if I should be working to get more comfortable when evil-mode is so convenient."
emacs,2w8qk8,ianoxley,1 point,Wed Feb 18 08:32:06 2015 UTC,"Has anyone who migrated to Emacs from Vim stopped using evil-mode?   I've thought about it several times, but haven't gone all in yet.   I think the main thing that stops me is my dependence on the VsVim Vim keybindings extension when using Visual Studio in my day job. If I could find something that works as well as VsVim, but with Emacs keybindings, then I'd probably stop using evil-mode.   I have tried the Emacs Emulation extension and the various hacks required to get it to work, but found it didn't quite fit."
emacs,2w8qk8,hyperbling,1 point,Wed Feb 18 13:02:43 2015 UTC,"i used to share you frustration.  i just leave evil-mode off by default now.  when i edit text, i'll turn it on.  use emacs for what emacs is good at, use vim for what vim is good at."
emacs,2w8qk8,Erakko,1 point,Wed Feb 18 14:15:23 2015 UTC,I have been thinking about this too. But the control default binds are horrible. They make wanna switch to different editor
emacs,2w8qk8,Wolfy87,1 point,Wed Feb 18 05:44:34 2015 UTC,They make me want to build my own :|
emacs,2w8z1s,Imxset21,-5,Tue Feb 17 23:18:52 2015 UTC,"Don't even bother, all you'll ever accomplish is turn Emacs from rock solid application to something that crashes often and can't be relied upon.   Xwidgets is terrible code written by clueless academic type plus, completely braindamaged idea, no idea how this abomination got accepted and merged. Throw GTK in and your Emacs will become unstable as fuck. What kind of demented mind thought of this mess?"
emacs,2w8z1s,towerofironwill,3,Wed Feb 18 02:52:47 2015 UTC,I dont think you need to be this hostile.
emacs,2w8p5b,flyrain,3,Tue Feb 17 22:04:15 2015 UTC,You should ask them.
emacs,2w8p5b,dima55,2,Wed Feb 18 05:12:18 2015 UTC,"Hi, I'm the maintainer of that PPA.  What's happening is that the package in the PPA is built from a launchpad recipe, which triggers whenever there are new commits in the launchpad lp:emacs bzr branch.  That all worked fine when emacs was developed in bzr and imported into launchpad regularly, but since emacs development has migrated to git, the quality and frequency of the imports to launchpad have seriously suffered. Bzr basically just can't handle the git data, although I'm not sure why it works some of the time and doesn't just permanently fail.  I've emailed the team responsible for the launchpad imports but they've been unresponsive.  I need to come up with a better solution for those imports, perhaps one that doesn't try to preserve the git history, which isn't really needed for a daily package build. I'm not aware of any support for this kind of thing directly in launchpad, and I'm reluctant to start running cron jobs on my personal laptop for availability reasons, although i suppose my laptop has better availability than the current launchpad bzr import situation."
emacs,2w6zlt,ThinkLarger,8,Tue Feb 17 14:23:08 2015 UTC,Perhaps a let* is in order (rather than let).
emacs,2w6zlt,acow,5,Tue Feb 17 14:37:39 2015 UTC,"That's right.  For ""let"" the variable is only bound after all the other variable bindings are done. For ""let*"" the variable is bound straight away."
emacs,2w4qlm,xeon1234,2,Mon Feb 16 23:27:16 2015 UTC,I go it. I use hydra and transpose-frame
emacs,2w4qlm,uberyoshi,1 point,Tue Feb 17 14:10:33 2015 UTC,"If you're using evil-leader, you might like something like this:    ;; Window stuff   (evil-leader/set-key     ""0"" 'delete-window     ""1"" 'delete-other-windows     ""2"" 'split-window-below     ""@"" 'my/split-window-below-and-switch     ""3"" 'split-window-right     ""#"" 'my/split-window-right-and-switch     ""="" 'balance-windows)   I took the window shortcuts I use the most and turned them into leader shortcuts with the same keys. C-x 2 is now <leader>2 to create a new horizontal split. With a very small elisp function, I can include shift (<leader>@) to create the split and then jump to it. I've been meaning to check out hydra, but my current setup has worked out well so far."
emacs,2w2bdd,nah00m,3,Mon Feb 16 10:10:47 2015 UTC,"I use this, but you can bind it to anything you want.   (global-set-key (kbd ""<f12>"") 'evil-local-mode)"
emacs,2w2bdd,dangersalad,2,Mon Feb 16 14:03:33 2015 UTC,Enable evil-local-mode in every buffer you want to have it in.  I'm not sure what benefit this would give you over using Emacs state as default for it though.
emacs,2w2bdd,wasamasa,1 point,Mon Feb 16 11:10:28 2015 UTC,"I didn't even think of using emacs state in all buffers, thanks!  (setq evil-motion-state-modes  (append evil-emacs-state-modes evil-motion-state-modes)) (setq evil-emacs-state-modes nil)   as per emacs wiki is what you're talking about, right?"
emacs,2w2bdd,wasamasa,3,Mon Feb 16 13:41:43 2015 UTC,"No,  I rather thought of the following.  (setq evil-default-state 'emacs) (evil-mode)   I find the Emacs wiki pretty terrible to be honest, simply because  there's so much junk floating  around on it."
emacs,2w2bdd,dzecniv,1 point,Mon Feb 16 18:39:00 2015 UTC,"Bling did recommend avoiding emacs wiki until I know for certain what about it is junk and what's not, thanks!"
emacs,2w2bdd,VanLaser,1 point,Tue Feb 17 08:55:42 2015 UTC,"Hey guys, what about this wiki: http://wikemacs.org/wiki/Evil ? There is less content, but no junk !"
emacs,2w2bdd,ReneFroger,2,Tue Feb 17 13:30:33 2015 UTC,Just use Ctrl-z to switch between evil and emacs states.
emacs,2w2bdd,VanLaser,3,Mon Feb 16 12:12:24 2015 UTC,"VanLaser, my friend. You here too?   Are you using Emacs, by the way?"
emacs,2w2bdd,ReneFroger,4,Mon Feb 16 13:31:28 2015 UTC,"Hi Rene, yes :) Actually, I'm using (and learning) both Vim & Emacs. In Vim, I'm trying the minimalist approach - avoiding as many plugins as possible, and learning to write my short scripts usable for my personal workflow (c/c++, tex etc.), hooked with external tools.  In Emacs, I'm still at the stage of 'exploration' (plugins, how to set options), but I'm also reading the elisp intro and read various simple functions to get a feeling of the editor.  I think the experience of studying both editors is really great, allowing for a better picture of 'how an ideal editor should be'."
emacs,2w2bdd,VanLaser,2,Mon Feb 16 14:18:02 2015 UTC,"I get it. I decided to use Emacs as my default editor. But currently I'm still in the transition. Many things in my Emacs configuration needs to be polished yet.  So basically, you could say that I'm at the stage of set up. I like the other not-essentially features of Emacs, like Eshell (great for my taskwarrior), and ERC (chat channels inside window of Emacs).   I found Helm somewhat better than Unite, especially with Hydra for Evil keys navigation inside Helm."
emacs,2w2bdd,ReneFroger,2,Mon Feb 16 14:33:52 2015 UTC,"[sry for the slightly off-topic post]  Yes, i like the Helm & Unite ""paradigm"". Digging a little, I found out about the inspiration (when Helm was 'Anything'): the Quicksilver launcher (I don't work on Macs, so didn't know about it before).  Actually, it would be quite cool if an editor implementation with start by providing a Unite/Helm/Quicksilver interface as a core feature by default (internal, fast etc.) so that it would provide a standard interface for searching, filtering, providing sources and so on ... without plugin creators inventing a zillion ways of performing operations and greatly simplifying the key bindings. It could even be an external launcher (as quicksilver), but one which can tightly work with the editor (know how to split the atom window for example). I think neovim has its eyes on Unite, i just hope it can bring its type of functionality closer to its editor core."
emacs,2w2bdd,VanLaser,2,Tue Feb 17 15:48:01 2015 UTC,"Thanks for the links. Interesting to read about the history of Anything.   Yes, I was hoping for the same, but I'm especially curious about the new plugins that will come with Neovim. By the way, have you already noticed the website Emacs Rocks? For example, here is a demo and look closely on 1:21 and 1:40. Pretty awesome, huh?"
emacs,2w2bdd,justinmkw,2,Tue Feb 17 21:15:03 2015 UTC,"Nice :) I do hope to find a way to combine evil text objects with emacs power, in order for example to create new text objects, operators and so on. Otherwise, I tend to avoid reading about too many plugins, as I want to understand first how things work."
emacs,2w2bdd,VanLaser,2,Wed Feb 18 10:08:43 2015 UTC,"I think neovim has its eyes on Unite, i just hope it can bring its type of functionality closer to its editor core.   It's vaporware right now, but I definitely think this will one day be a standard feature of any useful editor: https://github.com/neovim/neovim/issues/660  tpope seems to be thinking about it too, with vim-haystack. helm is really good though."
emacs,2w2bdd,hyperbling,1 point,Tue Feb 17 22:58:45 2015 UTC,"That link is a great way of expressing it :) Hope something will come up from it. Perhaps not Neovim, but - who knows - some day an editor could use something like Guile, if their Lua front-end would be integrated, and one could extend the editor either in elisp or lua."
emacs,2w2bdd,nosy_hobbit,2,Wed Feb 18 10:12:50 2015 UTC,"here's how i do it: https://github.com/bling/dotemacs/blob/master/config/init-evil.el#L99  cliff notes:   use after-change-major-mode-hook if major-mode is in your list of modes you want evil enabled, (turn-on-evil-mode)"
emacs,2w2bdd,hyperbling,1 point,Mon Feb 16 21:34:17 2015 UTC,I'm a big fan of all your Emacs related posts. I figure you're the person to ask: what's the reasoning behind selectively enabling evil-mode rather than just leaving it on globally?
emacs,2w2bdd,nosy_hobbit,1 point,Tue Feb 24 08:26:08 2015 UTC,"i go into a little detail in my recent blog post: http://bling.github.io/blog/2015/01/06/emacs-as-my-leader-1-year-later/  long story short; i got annoyed/lazy trying to make every major mode compatible with vim bindings.  so now i just use evil-mode to edit text, and use emacs for everything else."
emacs,2w2bdd,hyperbling,1 point,Tue Feb 24 20:36:10 2015 UTC,"That makes sense. Do you have a quick, handy way to determine if you're in Emacs/Evil mode when you edit a buffer? Or do you always deactivate Evil mode once you finish editing a portion of code/text?  Just trying to figure out my workflow. I've also been mildly annoyed when my Evil bindings suddenly don't work in a mode."
emacs,2w2bdd,nosy_hobbit,1 point,Mon Mar 2 06:29:01 2015 UTC,not sure what you're asking.  evil-mode is off by default in my config.   i turn it on when i edit a buffer with a matching major-mode; text-mode and prog-mode will cover the majority of cases.
emacs,2w2bdd,ghostCanape,1 point,Mon Mar 2 15:25:34 2015 UTC,"Oh I see. I thought you were enabling it with a keyboard shortcut of some sort, which made me wonder how you would quickly determine if it was one or not when jumping around buffers. So you just use a hook instead to get predictable behavior?"
emacs,2w2bdd,monotux,1 point,Mon Mar 2 20:49:34 2015 UTC,"It's not quite what you want, but this snippet gives an actual global toggle:  (defvar evil-enabled-state nil)  (defun toggle-evil-mode ()   (interactive)   (setq evil-enabled-state (not evil-enabled-state))   (if evil-enabled-state       (progn         (message ""Enabling Evil mode.."")         (evil-mode t))     (message ""Disabling Evil mode..."")     (dolist (buffer (buffer-list))       (with-current-buffer buffer (evil-local-mode -1)))     (evil-mode -1))) (global-set-key ""\C-c\C-v"" 'toggle-evil-mode)"
emacs,2w14tb,grabyourmotherskeys,9,Mon Feb 16 01:50:01 2015 UTC,"if you use ssh on your phone a lot and are sick of the connection dropping, give mosh a shot. it gives you persistent connections that don't hang and counteracts the input lag you get over bad connections with ssh. it's pretty cool and is supported by both juicessh and a chrome extension client. i believe there's a debian package for it in wheezy and jessie (and of course sid).  edit: also you can use the emacs daemon on your vps and spawn emacs client sessions when needed, rather than using screen. i mean, if you prefer screen, go nuts, but you could argue an emacs daemon is more ""pure"" ;)"
emacs,2w14tb,_mikel,1 point,Mon Feb 16 03:27:16 2015 UTC,"Thanks, I'll check that out! Ever since I tweaked the sshd settings I haven't really had disconnects other than when I am connected on my phone and leave the house or something but I am always looking for ways to improve. The vps connectivity is not the best but seems OK for what I am doing but the use of screen does cause problems when I have managed to create more than one session despite my best efforts (i.e. which one do I rejoin)."
emacs,2w14tb,alogghe,3,Mon Feb 16 03:40:11 2015 UTC,I also highly recommend mosh.  For this use case you'll be amazed at how well it works and how little battery it will use on your phone.  Also name your screen session with -S then reconnect to the same one on the rare occassion mosh doesnt just reconnect seemlessly.
emacs,2w14tb,PinkCathodeCat,2,Tue Feb 17 01:18:02 2015 UTC,Do you have a recommendation for a cheap VPS?   Also kudos on this solution. You've made me want to try it.
emacs,2w14tb,_mikel,4,Mon Feb 16 09:22:22 2015 UTC,"how cheap is cheap?   lowendspirit has tiny boxes for ~$4.50US/year spread through EU, NA, and japan and australia. they only allow ipv6 or a set of 20 ports per box over ipv4 though. digital ocean and linode are well known ""cloud hosts"" and are reasonably inexpensive. their vpses are really easy to spin up and down and support snapshotting. hosted throughout NA and europe with DO also in singapore and linode in japan. smallest option is 1GB memory at $10/mo. you get charged per hour though so you can test out a vps for only like 3c per hour or so. i've only heard good things about ovh but i've never used them myself. they host in canada and the netherlands iirc. $3/mo for 1GB. my personal favourite host is ransomit in australia. highly recommended. $10AU/mo for 1GB.   check out low end box for more recommendations (not my site)."
emacs,2w14tb,PinkCathodeCat,1 point,Mon Feb 16 09:53:45 2015 UTC,Thanks for that. I'll probably go with ransomit due to being in Australia myself.
emacs,2w14tb,PinkCathodeCat,3,Mon Feb 16 10:25:18 2015 UTC,Please see the reply by /u/_mikel as it is very thorough. I am using ovh (I think in their response this is typo'd to pvh but the link provided looks good).   I know people using Linode and I was very impressed by it but OVH is very affordable (I am using the cheapest solution).  I forgot to emphasize this in my original post but the reason I keep my home directory in git is because you never know when you might want to change hosts or whatever and having all your stuff in a repo let's you do that very easily.  For git hosting I use https://bitbucket.org as you can host private repos for free.  Good luck if you try this! It has really worked well for me.
emacs,2w14tb,eskatrem,1 point,Mon Feb 16 10:17:57 2015 UTC,"I once had my home folder  backed up via SVN many moons ago, I totally agree that git is an even better idea than that. I've been reduced to dragging the folders around with me after I no longer had access to the offsite server I was using for SVN."
emacs,2w0ses,the_whalerus,8,Sun Feb 15 23:57:20 2015 UTC,Creating a modifier key is a job for your operating system through something like Xmodmap.  You can't reliably do this from within Emacs as far as I know.
emacs,2w0ses,bcarrell,1 point,Mon Feb 16 00:09:13 2015 UTC,But wait.. wait.. but everyone here was telling me that Emacs is an operating system itself? :-)
emacs,2w0ses,ReneFroger,1 point,Mon Feb 16 00:25:25 2015 UTC,Emacs at this point is just receiving keysyms and translating them into keybindings it can interpret. The best you can do is swapping out the meaning of some modifiers in Emacs (which isn't terribly useful as it doesn't offer an option for the Control key).
emacs,2w0ses,wasamasa,1 point,Mon Feb 16 06:29:59 2015 UTC,He/She was kidding.
emacs,2w0ses,excitedaboutemacs,3,Mon Feb 16 17:40:38 2015 UTC,"(define-key key-translation-map (kbd ""<prior>"") 'event-apply-super-modifier)   Note however that username223 is correct that ""Modifier keys are a 50-year-old towering nightmare of cruft"". You'll be able to use the above in graphical Emacs. On text terminals that key will probably emit something else. Even on different Windowing systems the results may be different. I checked the above on MS Windows but it should work on X Windows too.  It may be better to use a key that even more useless than PgUp, such as Scroll-Lock (""<scroll>"")."
emacs,2w0ses,RobThorpe,1 point,Mon Feb 16 11:14:45 2015 UTC,"This doesn't work perfectly, if you hold down the key then Emacs forgets about it. So, s-a will work the first time but if your finger stays on super it won't work the second time."
emacs,2w0ses,RobThorpe,1 point,Wed Feb 18 10:45:03 2015 UTC,"I believe you lose.  Modifier keys are a 50-year-old towering nightmare of cruft.  You rarely run into situations these days where your arrow keys insert uppercase letters, and almost always have a working Meta key without whacking Escape.  But details of adding another modifier are spread over keyboard hardware, the kernel, the terminal and/or windowing system, and the program."
emacs,2vydj0,dobkeratops,2,Sun Feb 15 07:36:33 2015 UTC,"You can make parts of the command line invisible, with this trick.  (add-to-list 'grep-expand-keywords              '(""<X>"" . (propertize (or excl """") 'display ""<X>"")))"
emacs,2vydj0,politza,2,Sun Feb 15 09:09:08 2015 UTC,"interesting, i suppose i could hide all the '--include..' .. but there's still the regex itself,  I guess worst case I can look at grep.el itself and modify it  Id be surprised if i'm the only person who wants this - making the grep window more concise , showing hits straight away (efficient use of screenspace, even if you have a huge monitor, its' how far you have to move your eyes & head, and how much you have to read to find what you wanted..)"
emacs,2vydj0,mickeyp,1 point,Sun Feb 15 09:23:15 2015 UTC,It can be visual clutter especially with rgrep as it uses find. However I do occasionally screw up my grep query unknowingly. Knowing that I typed the wrong query is useful in that case.
emacs,2vydj0,mickeyp,1 point,Sun Feb 15 11:35:09 2015 UTC,"my specific use case is a piece of  elisp that builds several grep commands (concatenated) to run in succession, based on whats under the cursor (thing-at-point etc..). specifically, a search for a symbol in headers, then in source files (and by separate invocations, the hits in headers land first). I had also  made it search for things like class <symbol> etc first. (then the same, working back s directory excluding the current..). Splitting it up gives more useful sorting of the results*  I can certainly see if you're doing it manually you'd want feedback.  Giving it a custom string to title the buffer with would be interesting. 'grep for <symbol>:-'  (* I guess it might be possible to sort the actual results ? .. but it wouldn't be trivial, especially with trailing/preceeding context)"
emacs,2vydj0,RobThorpe,1 point,Sun Feb 15 11:52:47 2015 UTC,Ah yes I can see how intrusive the search string would be.
emacs,2vxc1n,Acktung,17,Sun Feb 15 00:32:41 2015 UTC,"A few comments:  First, you’re using setq to assign a value to an undeclared variable n. This creates a new global binding, which is not what you want. Use let instead:  (defun fill-character (char)     ""Fill the line (till fill-column) with the specified character""     (interactive ""cEnter character for filling: "")     (let ((n (- fill-column (current-column))))       (insert-char char n)))   Although I must say that if a value is used only once, I usually prefer not to create a variable binding at all, I just calculate it where it’s needed:  (defun fill-character (char)   ""Fill the line (till fill-column) with the specified character""   (interactive ""cEnter character for filling: "")   (insert-char char (- fill-column (current-column))))   Second, don’t put closing parentheses on a separate line. When working with Lisp code, try to ignore the parentheses and just look at the indentation. If you do that, you’ll soon realise that a closing parenthesis on its own line is visual noise. It’s distracting rather than helpful.  The best way to deal with parentheses in Lisp is to let Emacs do it. Use autopair or smartparens or some other mode for automatically matching parentheses."
emacs,2vxc1n,permafrosty,4,Sun Feb 15 02:17:03 2015 UTC,Thank you very much about your advices. I will take them into account :)
emacs,2vxc1n,g-n0m3,5,Sun Feb 15 03:30:18 2015 UTC,nice.  I usually just C-u 69 #
emacs,2vxc1n,avg_user,2,Sun Feb 15 00:58:40 2015 UTC,"Yes, I always forget about C-u prefix command <.<"
emacs,2vxc1n,YoungFrog,6,Sun Feb 15 01:03:06 2015 UTC,And if you want to insert number do `C-u 69 C-u <NUMBER'>
emacs,2vxc1n,instant_sunshine,1 point,Sun Feb 15 02:32:33 2015 UTC,Thanks for the trick
emacs,2vxc1n,RobThorpe,3,Sun Feb 15 08:03:03 2015 UTC,Simpler still.  C-80 -   Or  C-80 #   Also works with Meta number instead.  Dealers choice.
emacs,2vxc1n,pangrametry,1 point,Sun Feb 15 14:57:56 2015 UTC,"That's how I do it too.  Another way is to define an abbrev to expand something like #### into the number of hashes you want.  I don't work on code that uses this convention though, and I'm glad about that.  I don't like the convention, it creates a lot of visual noise."
emacs,2vxc1n,Boojum,4,Sun Feb 15 21:37:00 2015 UTC,"Nice job!  This is just a little nitpick, use let instead of setq.  Your function would then look something like:  (defun fill-with-character (char)            ""fill the line with the character""            (interactive ""cEnter character for filling: "")            (let ((n (- fill-column (current-column))))               (insert-char char n)))"
emacs,2vxc1n,instant_sunshine,1 point,Sun Feb 15 01:59:16 2015 UTC,Let binds local variables.  Setq like that makes a global.  (Though using setq can also change a variable inside a let.)
emacs,2vxc1n,Boojum,1 point,Sun Feb 15 02:08:59 2015 UTC,"Note you can also shadow globals in a (let) for example default-directory could be overridden, for code in a let body.   Of course it works with any globals."
emacs,2vxc1n,VanLaser,1 point,Sun Feb 15 02:28:39 2015 UTC,Yep.  I mainly do that to take advantage of dynamic scoping.  (Granted a macro could do the same job if lexical scoping were the default.)
emacs,2vxc1n,redmorph,3,Sun Feb 15 15:00:56 2015 UTC,"or, with evil-mode:  80i#<ESC>"
emacs,2vx5yr,ReneFroger,3,Sat Feb 14 23:34:44 2015 UTC,This issue is solved now: https://github.com/syohex/emacs-helm-ag/issues/68  You could thank the maintainer on the Github page above.
emacs,2vx5yr,purcell,4,Mon Feb 16 20:51:47 2015 UTC,Use ag.el and wgrep (https://github.com/mhayashi1120/Emacs-wgrep).
emacs,2vx5yr,tuhdo,4,Sat Feb 14 23:55:06 2015 UTC,"Thanks, I appreciate your suggestion.   It seems this behavior is not applicable in Helm-ag? Will take a look into ag.el and wgrep. But if anyone else know a good way to apply this in Helm, I'm all ears!"
emacs,2vx5yr,tuhdo,3,Sat Feb 14 23:56:48 2015 UTC,"Well, currently it's not available. But if you use stock helm-do-grep using either grep or ag, it allows you to store the results in a buffer and edit it. To save the results, use the 3rd action in the action menu.  And you should report it to helm-ag maintainer, so he can add support for it.  Really, I can't use stock Grep or Ack or Ag after using the Helm version."
emacs,2vx5yr,hyperbling,3,Sun Feb 15 04:38:41 2015 UTC,"Same here. Good to see that you're becoming more active after your work of Semantic Refactor.  You're the one with your Helm page and Reddit posts who gaves me the incentive to start again with Emacs.  I just posted the Helm-Ag maintainer about this, and unfortunately, he can't support it."
emacs,2vx5yr,RobThorpe,1 point,Sun Feb 15 08:22:31 2015 UTC,"You're the one with your Helm page and Reddit posts who gaves me the incentive to start again with Emacs.   Glad it helped!   I just posted the Helm-Ag maintainer about this, and unfortunately, he can't support it[1] .    Well, at least you can still use helm-do-grep with ack, which is quite fast and can do what you want with wgrep, though the searching speed is not as fast as Ag. And as /u/purcell suggested, you can still use non-Helm solution: ag.el with wgrep."
emacs,2vx5yr,tuhdo,3,Sun Feb 15 09:12:56 2015 UTC,"wgrep will do the trick  helm-swoop also supports editing, although it's is more suitable for the current buffer, or open buffers, as opposed to ag, which will search the entire project."
emacs,2vx5yr,RobThorpe,1 point,Sun Feb 15 04:48:49 2015 UTC,I can't tell what's being done in the video. The changes flick past too quickly. I'm not used to following where things happen in Vim so my eyes are never in the right part of the screen.  Could you explain it?
emacs,2vx5yr,tuhdo,2,Sun Feb 15 21:16:06 2015 UTC,I explained it in this comment.
emacs,2vx5yr,RobThorpe,1 point,Sun Feb 15 21:57:33 2015 UTC,"I see.  The old-school way of doing this would be to load all the files into Emacs with something like ""C-x C-f *.el"". Then use ""multi-occur-in-matching-buffers"" to produce a list of matching lines, then press ""e"" in the occur buffer to enter occur edit mode. Then use M-% to search-and-replace.  This would undoubtedly be slower than the way the Vim user did it and probably slower than using Helm-Ag (which I've never used).  That's even if the multi-occur command were bound to a key. It would only work for the number of files you can load into Emacs. That said, this kind of simple text substitution is only really safe if the number of files is small.  I'm not convinced that it's a very realistic scenario though."
emacs,2vx5yr,monotux,1 point,Sun Feb 15 23:28:19 2015 UTC,"He used a single file as an example. A more realistic scenario is that you want to rename files spread in different directories. In that case, you need grep for doing this quick. Wgrep solves this issue: you can even use built-int rgrep, search for something then use wgrep to change the results."
emacs,2vx5yr,CodyChan,1 point,Mon Feb 16 05:05:39 2015 UTC,"A different way to approach the same problem....  To begin with, put all your emacs config into one file.  In Emacs it's easy to navigate a large file. You can separate the logical sections with page breaks, ^L and use the page navigation commands. Or, you can use outline-minor-mode and separate things using an bullet-point structure. If you want to get really fancy you can use literate programming with Org mode.  I choose the first option and separate sections into pages.  Emacs config should not be too complex anyway. A complex config is a huge time-sink.  If you do that you can simply use ""M-s o"" to search for a string, then enter editable occur mode with ""e"".  Then use M-% to search-and-replace. Pressing enter on any occur entry takes you to that place in the file.  What if it's a huge project? In that case a dumb search-and-replace probably won't work reliably anyway."
emacs,2vx5yr,kaushalmodi,2,Mon Feb 16 03:14:14 2015 UTC,occur-edit is one of the coolest functionalities added recently in Emacs. I love it. This should be voted higher.
emacs,2vx5yr,kaushalmodi,1 point,Mon Feb 16 11:24:19 2015 UTC,"The relative linum with current linum on the left fringe is pretty cool, does anyone know anything about it?"
emacs,2vx5yr,CodyChan,2,Mon Feb 16 15:24:04 2015 UTC,There's a package available on Melpa: relative-linum
emacs,2vx5yr,kaushalmodi,1 point,Mon Feb 16 16:26:39 2015 UTC,"Yes, I tried that too. But it's flickering too often when you use multiple windows, especially on the window dividing line."
emacs,2vx5yr,CodyChan,1 point,Mon Feb 16 17:41:20 2015 UTC,I haven't noticed that problem. The window flickering could also be due to visual bells. Have you given it a try in an emacs -Q session with just that one package loaded after setting visual-bell to nil?
emacs,2vx5yr,kaushalmodi,1 point,Mon Feb 16 18:29:41 2015 UTC,"Actually, I care about the current linum other than the relative linum."
emacs,2vx5yr,CodyChan,1 point,Tue Feb 17 00:44:51 2015 UTC,Do you mean you want to highlight the current linum without showing the relative linum?
emacs,2vx5yr,kaushalmodi,1 point,Tue Feb 17 00:54:56 2015 UTC,"If you can show the relative linum,that's better, but I think they should be separated. You can enable either of them or both."
emacs,2vx5yr,exitheone,1 point,Tue Feb 17 01:17:38 2015 UTC,"The relative-linum primarily shows the relative line numbers. Then you can configure how you want to show the current line number: the actual current line number or any symbol of your choice (0, >, -->, etc).   Then there is a different package hlinum that just highlights the current line number (no relative numbers).   You can enable the package of your choice. Both the packages complement linum.el."
emacs,2vx5yr,tuhdo,1 point,Tue Feb 17 02:35:40 2015 UTC,Is there a package that you can show only the current linum on left gringe?
emacs,2vx5yr,exitheone,1 point,Tue Feb 17 07:04:29 2015 UTC,I am aware of only M-x line-number-mode that toggles the display of the current line in the mode line. This would be a great question for emacs.stackexchange.com.
emacs,2vx5yr,tuhdo,-2,Tue Feb 17 12:42:31 2015 UTC,I'm just using evil mode for a decent text editor inside emacs :)
emacs,2vx5yr,exitheone,3,Sun Feb 15 09:46:18 2015 UTC,"This is not related to Evil, and the OP is using Evil."
emacs,2vxojf,tacit7,5,Sun Feb 15 02:36:20 2015 UTC,ac-sources is a buffer local variable. You can set own ac-sources per buffer. So you can set ac-sources for some mode in its hook as below  (defun 'my/enh-ruby-mode-hook ()   (add-to-list 'ac-sources 'some-auto-complete-source))  (add-hook 'enh-ruby-mode-hook 'my/enh-ruby-mode-hook)
emacs,2vxojf,syohex,1 point,Sun Feb 15 03:03:05 2015 UTC,"Awesome, got it to work."
emacs,2vxojf,projectmoon,1 point,Sun Feb 15 03:27:01 2015 UTC,"I would like to extend this idea to emacs-eclim and its auto-completion. I want it to only auto-complete if the eclim daemon is running. Otherwise it spews out connection refused errors and it's kind of annoying.  Is there perhaps a way to do it with defadvice on the start-eclimd and stop-eclimd functions? Basically, if I run stop-eclimd, I want the eclim auto-completion source to be removed from ac-sources in all buffers. How would I do the removal from all buffers part?"
emacs,2vw9e2,dustingetz,6,Sat Feb 14 18:53:36 2015 UTC,"I find my emacs hangs 50% of the time I opened it up, I have to force kill it and open it up again.  I had this problem both with the Emacs for Mac OS X and the Macports version.  Is this similar to what you're talking about?"
emacs,2vw9e2,statmobile,2,Sat Feb 14 19:55:02 2015 UTC,Maybe this will help?  http://superuser.com/questions/125569/how-to-fix-emacs-popup-dialogs-on-mac-os-x
emacs,2vw9e2,jhirn,1 point,Sat Feb 14 21:38:44 2015 UTC,"I tried that, it may work for yes-no prompts but cmd-t still launches a dialog."
emacs,2vw9e2,statmobile,1 point,Sat Feb 14 22:22:25 2015 UTC,"I think I'm experiencing a whole different issue, because mine only hangs when I try to start emacs from the commandline.  I don't mean to hijack your issue."
emacs,2vw9e2,holyfudge,6,Sat Feb 14 23:52:41 2015 UTC,(setq use-dialog-box nil) in your init file.
emacs,2vtsvp,jjasghar,2,Sat Feb 14 01:00:06 2015 UTC,"Aside from the last function, I'm not seeing anything Ruby specific in they el file."
emacs,2vtsvp,dr_theopolis,3,Sat Feb 14 02:15:49 2015 UTC,"That is correct, it was a tip for a ruby hacker. It should be highlighted? Is it not?"
emacs,2vtsvp,pxpxy,1 point,Sat Feb 14 02:34:59 2015 UTC,It's highlighted. That one is meh but I'm totally stealing a few of the other functions!
emacs,2vtsvp,pxpxy,1 point,Sat Feb 14 02:56:15 2015 UTC,"Oh nice! Sure, what did you like? I've stolen them from all over the place, and i've tried to credit where i could remember."
emacs,2vtsvp,pxpxy,1 point,Sat Feb 14 02:58:35 2015 UTC,I really like the flip buffer and the duplicated word. What exactly does the first one with the windows do? My Elisp is not very good..
emacs,2vtsvp,piotr404,2,Sat Feb 14 03:17:21 2015 UTC,"Ah, so say you have a split buffer. It's horizontally split, but you want it vertically instead. run that and it'll be right left split instead of top bottom or visa-versa."
emacs,2vtsvp,tacit7,1 point,Sat Feb 14 03:21:10 2015 UTC,Thanks!
emacs,2vtsvp,the-fritz,2,Sat Feb 14 03:57:39 2015 UTC,"Here is a more generic function: https://github.com/pierre-lecocq/emacs.d/blob/master/config/org/02-common.org#insert-rubygems-in-ruby-buffer  When in ruby-mode, type C-c C-p and then list all the rubygems you want to insert.  Ex:  M-x rb-require RET pry   or  M-x rb-require RET org-ruby erubis fileutils"
emacs,2vtsvp,abo-abo,1 point,Sat Feb 14 09:22:06 2015 UTC,I think he wrote the function to set a break point not to just to include pry.
emacs,2vtsvp,nyarlathocat,1 point,Sun Feb 15 02:39:41 2015 UTC,"yep, that is correct. i found myself typing require 'pry'; binding.pry so many times i figured a key binding would save some typing."
emacs,2vt3o2,MonsieurBanana,1 point,Fri Feb 13 21:29:24 2015 UTC,"Yes. See ""bookmark-saved-flag"", this is from it's docstring:  Controls when Emacs saves bookmarks to a file. --> nil means never save bookmarks, except when `bookmark-save' is        explicitly called (M-x bookmark-save).    --> t means save bookmarks when Emacs is killed. --> Otherwise, it should be a number that is the frequency with which     the bookmark list is saved (i.e.: the number of times which     Emacs's bookmark list may be modified before it is automatically     saved.).  If it is a number, Emacs will also automatically save     bookmarks when it is killed.   The default value is ""t"". You have three choices:   Define all your bookmarks in one particular Emacs session. Set this flag to a small number like ""1"". Do you use your several Emacs sessions for different purposes? In that case you might want to set them up with different init files and different bookmark files (by setting bookmark-default-file).   It's generally best not to use two Emacs instances. I expect you already use Emacsclient, that helps. There are reasons you might want two instances though, such as having one for GNUS or having one that has unstable bleeding edge stuff enabled. In these cases two different init files can help."
emacs,2vt3o2,RobThorpe,1 point,Sat Feb 14 14:14:18 2015 UTC,"Hey thanks, that's exactly what I was looking for! Setting the flag to ""1"" is the behaviour I wanted.  As for the multiple emacs instances : I usually use emacs in daemon mode, however when I need to use tramps I open a new emacs instance as sometimes tramps will hang the whole process..."
emacs,2vt3o2,RobThorpe,1 point,Sat Feb 14 14:25:24 2015 UTC,"Setting that flag to 1 is probably what you want then. The Emacs developers have been working on the tramp hangs, things will be a bit better in the next version."
emacs,2vt3o2,wadcann,1 point,Sat Feb 14 15:23:26 2015 UTC,"It's generally best not to use two Emacs instances.   There are a number of modes that really need you to do so.  If I am working on two coding projects, for example, I can only have one set of tags open.  I usually keep one ""general purpose"" emacs instance open, and another for each specific project."
emacs,2vt3o2,RobThorpe,1 point,Thu Feb 19 08:34:27 2015 UTC,"Yes, I agree. Some of those issues should be fixed, I'd do it if I had the time."
emacs,2vrvph,MyNameIsFuchs,8,Fri Feb 13 15:47:40 2015 UTC,Yes.
emacs,2vrvph,wasamasa,1 point,Fri Feb 13 15:49:47 2015 UTC,That was quick! Thanks a ton. Exactly what I was looking for. I love this community.  Edit: Still trying to figure out how to do this with emacsclient...
emacs,2vrvph,RobThorpe,1 point,Fri Feb 13 16:03:28 2015 UTC,Why do you want to do this? There may be another way to solve your problem that's easier.
emacs,2voe8r,piotr404,3,Thu Feb 12 18:38:43 2015 UTC,Yesterday I found out I can open pdf files in emacs. Today this. I can now see why emacs is called an os.
emacs,2voe8r,egzodas,3,Thu Feb 12 21:38:28 2015 UTC,"Apologies to the other poster for going off topic - so first I'll say this is a great utility.  Now, tell me - how do you open pdfs? Docview?"
emacs,2voe8r,benfitzg,2,Thu Feb 12 21:54:18 2015 UTC,exactly it!
emacs,2voe8r,egzodas,3,Thu Feb 12 21:58:13 2015 UTC,"ok, just wanted to make sure i wasn't missing out  on a new toy..."
emacs,2voe8r,benfitzg,4,Thu Feb 12 22:44:43 2015 UTC,pdf-tools > docview
emacs,2voe8r,kaushalmodi,3,Thu Feb 12 23:45:23 2015 UTC,pdf-tools >>>>>>> docview
emacs,2voe8r,brokenbabu,1 point,Fri Feb 13 11:22:32 2015 UTC,"Is there any way to center symon's output? It's stuck to the far left...I mean, I don't mind it but I would like to have it centered in my session."
emacs,2vqvpy,aharris88,2,Fri Feb 13 07:41:43 2015 UTC,"http://sachachua.com/blog/2015/02/getting-started-emacs-empty-cup/  Learning emacs will be smoother if you look at it with a fresh mind set and keep on with the built-in tutorial C-h t for few days. You'll learn more when you make yourself use emacs for the same editing tasks you did on vim. If you face a roadblock, Google how to do it, look up or ask on https://emacs.stackexchange.com.   Your motivation to learn emacs will increase once you have a strong reason to do so: org-mode, inbuilt pdf and image viewing support, basic web browsing, customizability, realizing that as days go by, you can do more stuff from within emacs."
emacs,2vqvpy,kaushalmodi,1 point,Fri Feb 13 12:02:11 2015 UTC,wow. Some of that stuff sounds amazing. Pdf? Image viewing? web browsing? I don't know what org-mode is though.
emacs,2vqvpy,kaushalmodi,1 point,Fri Feb 13 15:48:08 2015 UTC,http://orgmode.org/
emacs,2vqvpy,zornslemming,1 point,Fri Feb 13 16:31:04 2015 UTC,"I use and love org mode, but I wouldn't recommend jumping in until you have a good handle on emacs. A lot of using org mode requires thinking about what you want your workflow to look like, and that's hard to do while still learning the basics."
emacs,2vqvpy,tacit7,1 point,Fri Feb 13 19:48:19 2015 UTC,"If you face a roadblock, Google how to do it...   As a former vim user, the biggest roadblock for me was googling. There is not a lot of Emacs documentation (compared to vim) and I just cant seem to find what I need most of the time."
emacs,2vqvpy,kaushalmodi,2,Sun Feb 15 06:01:13 2015 UTC,"For any tool set, it is helpful to first acquaint oneself with the tool-specific terminologies like mode-line, buffer, etc. About an hour or two of C-h t was very useful to me even though I haven't finished it yet. But that helped me understand what I should Google for. And then in addition C-h a, C-h f and C-h v have been tremendously helpful."
emacs,2vqowt,TanAndBlonde,1 point,Fri Feb 13 06:12:56 2015 UTC,I'm not sure that -theme.e should be there.
emacs,2vqowt,mahcuz,1 point,Fri Feb 13 08:59:05 2015 UTC,"The -theme.el at the end shouldn't be there.   If removing that doesn't work, you can try this step-by-step solution of how to install a custom theme I posted on emacs.SE for a different theme. The same steps will apply here too. Also have a look at https://emacs.stackexchange.com, it is a great resource for such QnA and for asking any emacs related question."
emacs,2vmy64,scarred-silence,5,Thu Feb 12 09:24:42 2015 UTC,The author should write in the readme what it can do that regular GUD can't..
emacs,2vmy64,bjackman,3,Thu Feb 12 17:44:38 2015 UTC,https://github.com/rocky/emacs-dbgr/wiki/Features
emacs,2vmy64,hvis,2,Thu Feb 12 21:58:11 2015 UTC,"Nice, thanks for the pointer! Out of the box this works much better with GDB for C++ than the stock GUD on my Emacs (24.3.1):  The source view actually follows the current line as you step through the code. Short-key mode is very comfortable too.  Some things are still missing like constantly displaying the values of some variables, but I am sure it will get there."
emacs,2vmy64,rerx,1 point,Fri Feb 13 15:59:24 2015 UTC,"When I invoke M-x realgud:gdb on a simple C program, I just get a Comint buffer with a (gdb) prompt.  I do not see a source view as I type n at the (gdb) prompt.  Is there something special you did to obtain the source view?"
emacs,2vmy64,sigjuice,1 point,Mon Feb 16 17:21:53 2015 UTC,"But if you then type, e.g., b main followed by r, you should get the source view pointed at the first line of your main function.  I use the version from MELPA stable, if that should matter."
emacs,2vmy64,rerx,1 point,Tue Feb 17 13:40:56 2015 UTC,"Here is a brief screencast of what I tried.  I have Ubuntu 14.04, emacs 24.3.1, realgud-20150213.1824 and gdb 7.8.2.  realgud:gdb does not work"
emacs,2vmy64,sigjuice,1 point,Tue Feb 17 17:34:40 2015 UTC,"Version 1.1 from Melpa-stable works for me with gdb 7.4, that's all I know.. Maybe try it from emacs -Q?"
emacs,2vmvyh,tuhdo,7,Thu Feb 12 08:47:52 2015 UTC,Here are the demos.
emacs,2vmvyh,hvis,1 point,Thu Feb 12 08:48:08 2015 UTC,"Any support for the ""rename"" refactoring?"
emacs,2vmvyh,hvis,3,Thu Feb 12 13:11:01 2015 UTC,"The plan is to work on local rename first, so you don't accidentally rename an identifier of an inner class and everything with the same set of characters got rename. But I will do the rename refactoring after finishing the TODOs.  As said in the limitation, the plan is to use GNU Global for fast indexing and Semantic for filtering. The problem with Semantic is that it tries to parse everything and block Emacs. To solve this problem, when traverse for refactoring, we disable parsing and just parse needed regions to check if such a region is valid.  There are more to refactoring than just mass renaming. One common refactoring task that no tool in Emacs does properly is generate class/function implementation. member-functions.el can only generate implementation for rudimentary class; it cannot handle nested classes and template class and the output has spaces everywhere. These little tasks (implement class, extract functions/macro...) are more common than mass refactoring of a codebase."
emacs,2vmvyh,hvis,1 point,Thu Feb 12 13:28:09 2015 UTC,"Well, you could prompt at every place that gets renamed. It'll still be faster than having no rename at all.  I'm using different languages than you are, so my interest is purely with the refactoring interface, which may or may not be reusable."
emacs,2vmvyh,hvis,3,Thu Feb 12 13:55:59 2015 UTC,"The problem is that once you rename something, i.e. a function call, every other places: declaration, definition and every other calls (references) must be ""synced"" accordingly. This can be doable with C but for C++, it's a whole different level. Putting effort on this issue alone would be equal to efforts on every other useful features. And surely nobody wants partially worked solution.   you could prompt at every place that gets renamed   I already planned a rename interface that separate places to be renamed into 2 groups:   Safe: this group is guaranteed to change without breaking anything. Unknown: this group contains hits listed by GNU Global but Semantic cannot decide whether to rename or not. This is left to the user.   User can mark entry to be renamed in unknown group and when done, do it."
emacs,2vn8gi,Mawu3n4,3,Thu Feb 12 12:16:02 2015 UTC,"You can use C-h-v speedbar-mode-map to see the full speedbar key bindings.  Here's what I do:    ;; unbind default 'g' binding in speedbar   (define-key speedbar-mode-map (kbd ""g"") nil)   (evil-define-key 'normal speedbar-mode-map     (kbd ""-"") 'speedbar-up-directory)     (kbd ""o"") 'speedbar-edit-line)"
emacs,2vn8gi,justinmkw,2,Thu Feb 12 23:39:56 2015 UTC,"I have same problem too!  I was looking how I could bind the q key to toggle-sr-speedbar, in order to quit the sr-speedbar."
emacs,2vn8gi,ReneFroger,2,Thu Feb 12 22:36:35 2015 UTC,"Thanks for your addition, Mawu3n4"
emacs,2vkf9s,schlenderer,5,Wed Feb 11 19:26:19 2015 UTC,"This is true of a lot of things in programming, e.g. functional programming."
emacs,2vkf9s,Imxset21,5,Wed Feb 11 22:07:09 2015 UTC,"And here's a good resource of snippets, to start with it."
emacs,2vkf9s,ReneFroger,0,Wed Feb 11 21:54:04 2015 UTC,Whenever something in Emacs seems annoying or inconvenient   Everything seems that way. And its because you havent changed or customized it yet. I cant say that there is a single default behaviour in emacs that is convinient or easy to use. If the functionality seems good the keybind for it is idiotic or completely fucks up your fingers.  This is coming from a ex vim user.
emacs,2vkf9s,Erakko,0,Wed Feb 11 23:48:07 2015 UTC,I did and thanks to them I now have usable configuration.
emacs,2vkf9s,Erakko,1 point,Thu Feb 12 06:05:41 2015 UTC,"Emacs is not like a new tea to be poured into an empty cup rather it is like Aaron's rod, always ready to swallow new paradigms and ready to be molded for a new purpose."
emacs,2vjh46,trezor2,10,Wed Feb 11 15:02:57 2015 UTC,I think a lot of this probably has to do with the fact that many people just store their inits on github for portability.
emacs,2vjh46,Quasimoto3000,9,Wed Feb 11 16:28:29 2015 UTC,Yep. Viml is even higher and Viml is awful.   It's impressive that clojure is so very close though.
emacs,2vjh46,joequin,4,Wed Feb 11 17:08:59 2015 UTC,"And that so many people feel the need to track their elpa/ directory. Good grief, people."
emacs,2vjh46,vermiculus,2,Thu Feb 12 04:08:13 2015 UTC,But... But... muh backups...
emacs,2vjh46,thang1thang2,1 point,Thu Feb 12 13:25:43 2015 UTC,"This is the best tl;dr I could make, original reduced by 76%. (I'm a bot)     GitHut is an attempt to visualize and explore the complexity of the universe of programming languages used across the repositories hosted on GitHub.  By analyzing how languages are used in GitHub it is possible to understand the popularity of programming languages among developers and also to discover the unique characteristics of each language.  The release year of the programming language is based on the table Timeline of programming languages from Wikipedia.     Extended Summary | FAQ | Theory | Feedback | Top five keywords: language#1 programs#2 GitHub#3 use#4 data#5  Post found in /r/technology, /r/realtech, /r/CoderRadio, /r/coding, /r/emacs, /r/dataisbeautiful, /r/webdev, /r/bigquery, /r/scala, /r/programming, /r/Clojure, /r/dataisbeautiful and /r/Agivis."
emacs,2vkk1u,linevich,5,Wed Feb 11 20:02:48 2015 UTC,"When you edit a defvar'ed variable you need to hit C-M-x to update it's value, not C-x C-e."
emacs,2vkk1u,politza,2,Wed Feb 11 21:12:47 2015 UTC,"Yes, it works! Thank you :)"
emacs,2vkk1u,RobThorpe,2,Thu Feb 12 09:41:49 2015 UTC,"The point of ""defvar"" is to define a value in a lisp program. The user may already have defined their own value in their init file (probably using setq). The program, e.g. a major mode, is loaded later and must not stamp on the user's customization. So, by default, defvar will do nothing if the value is already set. C-M-x overrides this, see the help for that function ""eval-defun""."
emacs,2vkk1u,tending,1 point,Thu Feb 12 13:15:57 2015 UTC,Also see defconst which behaves more intuitively with C-x C-e.
emacs,2vkk1u,RobThorpe,1 point,Fri Feb 20 14:52:03 2015 UTC,"Well, ""defconst"" is for defining constants. A constant can't be redefined or set by the user, it must always be set by the programmer. That's why defconst replaces the earlier value."
emacs,2vkk1u,kaushalmodi,3,Fri Feb 20 15:03:44 2015 UTC,"It works fine for me.  The insert statement inserts,  <?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?> <!-- Created with Inkscape (http://www.inkscape.org/) --> blah-blah"
emacs,2vhzb3,villiger2,17,Wed Feb 11 03:52:19 2015 UTC,"I've had debilitating RSI for the last eighteen months, now I stick to typing only every other day and use voice dictation software on the non-typing days (I'm using it to write this post). On my typing days I use a kinesis keyboard with the triple foot pedals. If you haven't used a kinesis keyboard before it's basically the ultimate emacs keyboard, and also the only one that I know of that has a study behind it showing that it helps prevent RSI. The keyboard lets you remap keys in hardware (you press a special programming key, then the key for the functionality you want, then the key that you want to have trigger that functionality), and the foot pedals that you can buy for it are integrated with the remapping functionality so you don't even have to install any software to get the foot pedals to work or to remap keys. The operating system just sees a normal USB keyboard.   I bind my 3 pedals to control shift and alt. I do this because I've noticed that key combinations that require holding down a key are the most painful, and I suspect the emacs defaults were a significant contributor to my RSI (if it were up to me something like fingers mode or viper mode would be default, the efficiency versus reduced injury risk is worth it). I say this as someone who already had capslock rebound to control to prevent ""emacs pinky."" So readers beware: rebinding capslock to control is not enough, you also need an ergonomic keyboard.  I would be wary of cheap USB foot pedals if you intend to use them for modifier keys. I bought one such cheap set only to find that it couldn't handle two pedals being pressed at once, so lots of emacs key combinations wouldn't work. The kinesis pedals don't have this problem. On the other hand the cheap pedals let you let you bind them to mouseclicks and the kinesis pedals do not.   I keep the cheap USB foot pedals around because I use one of them for the down key. It's great for web browsing to lean back and read a long page while just tapping your foot every now and then."
emacs,2vhzb3,tending,3,Wed Feb 11 15:14:29 2015 UTC,"Wow using the foot pedal as a scroller is genius!!!! I also have a kinesis keyboard but was a bit hesitant about getting a footpedal (I remember it was because I wanted to save money) but I should have just gotten it, I would have an extra button to use on my keyboard (instead of ctrl or alt) and a more relaxing scrolling experience.."
emacs,2vhzb3,workisnotfun,1 point,Sat Feb 14 05:09:15 2015 UTC,Thanks for your detailed response!
emacs,2vhzb3,vermiculus,1 point,Thu Feb 12 04:03:24 2015 UTC,Never thought about using a pedal as a scroller – it seems so obvious but I think that's really clever. Might have to invest in pedals before my hands get too bad – I can already feel them starting to gnarl on me :( [~5 years of heavy use]
emacs,2vhzb3,into_lexicons,8,Thu Feb 12 04:06:43 2015 UTC,I have no advice but I've wondered about them myself and would also be interested in hearing from anyone who's tried them.
emacs,2vhzb3,spwhitton,-1,Wed Feb 11 05:23:55 2015 UTC,ditto
emacs,2vhzb3,nah00m,6,Wed Feb 11 07:14:49 2015 UTC,"AMA Request: Footpedal modifier key user  To anybody who actually does use it, does it get kind of tiresome on your ankles?  My fingers only have to move small distances, but for a forward-pressing footpedal, that's a lot of ankle movement!"
emacs,2vhzb3,IanKelling,10,Wed Feb 11 09:54:50 2015 UTC,"I use a foot pedal for control. I've used it for over a year. I like it. Ask me anything. I use two slightly different kinds, one at work, one at home, both kinesis brand, they have a little bit different feel and pressure, but I've adapted to both just fine, so I don't think there is one special one which is best, and there is probably something cheaper out there than the usb one from kinesis. Something with a spring in it, shaped like a triangle, with a decent driver will probably work just as well, but I don't know for sure. Main benefit is having more keybinds available, and some are easier. It's natural, I don't think about it. Ask me anything. I'll answer in about 15-20 hours. Going to bed now, then work, where I don't reddit except an occasional peek at the front page."
emacs,2vhzb3,ressis74,3,Wed Feb 11 10:32:26 2015 UTC,Was it hard to get it working with your computer/emacs? What OS are you running?
emacs,2vhzb3,IanKelling,4,Wed Feb 11 14:12:53 2015 UTC,"I used a foot pedal for the control key. The pedal was a USB HID keyboard with one key, about $5 on amazon.  The pedal itself was plug and play, but OSX keeps separate keyboard keystrokes separate. So when I pressed the pedal down, and hit ""x"" on my keyboard, emacs would receive a ""control"" and an ""x"" but not a C-x.  I installed Karabiner and that fixed the problem (on account of it replacing the keyboard driver).  Using a pedal was easier on my wrists, but it was substantially slower to use compared to the keyboard alone.  If you're experiencing pain, it will help. If you are just interested, skip it."
emacs,2vhzb3,visnae,2,Wed Feb 11 23:52:48 2015 UTC,Thanks for your reply!
emacs,2vhzb3,workisnotfun,1 point,Thu Feb 12 04:03:13 2015 UTC,"I use various linux distros. The usb one only has an xp driver for programming it, so huge hassle. The other is tied to the kinesis advantage keyboard and works flawlessly. Other than the xp thing, they worked flawlessly. I would not call it substantially slower. I'd say it's max speed is a bit slower, but you generally don't press or think control commands in the speed you type words, and it doesn't feel any slower. If you are generally happy with your keyboard, I wouldn't say it's worth the hassle. Obviously, if you have rsi it is a big deal and worth it. I do highly recommend the kinesis advantage for emacs users."
emacs,2vhzb3,workisnotfun,3,Thu Feb 12 09:14:41 2015 UTC,Ask me anything.   How does quantum computers work?
emacs,2vhzb3,IanKelling,3,Wed Feb 11 18:30:01 2015 UTC,They use Emacs
emacs,2vhzb3,uhoreg,1 point,Sat Feb 14 05:14:37 2015 UTC,How far do you have to press? Does it take more or less time than if you pressed the ctrl button on the keyboard with your thumb (kinesis keyboard) or pinky?
emacs,2vhzb3,workisnotfun,1 point,Sat Feb 14 05:15:31 2015 UTC,"It feels like it takes the same amount of time, but I've timed it from a dead start and it's a bit slower than a finger keypress."
emacs,2vhzb3,Kaligule,5,Mon Jun 8 06:43:58 2015 UTC,"I used to use a foot pedal with my Kinesis keyboard, but ultimately, I found that, at least for myself, the Kinesis by itself was sufficient, and the foot pedal added little.  Using the foot pedal was slower than using the keyboard, because it's harder for me to coordinate my hands and feet (experienced piano or drum set players may fare better), and the layout of the Kinesis was sufficient to reduce the strain on my wrists.  By the way, I used a 3-pedal model with its default setup (Ctrl, Shift, Alt)."
emacs,2vhzb3,ElmStreetsLoverBoy,1 point,Wed Feb 11 15:35:14 2015 UTC,/u/tending had the brilliant idea (I honestly think so) of using the footpedal for scrolling!   (I think I will get one for page turning)
emacs,2vhzb3,Farsyte,3,Sat Feb 14 05:17:41 2015 UTC,This is the most surprising question I read for the last 2 months.
emacs,2vhzb3,mmouratov,2,Wed Feb 11 13:37:03 2015 UTC,This is brilliant.
emacs,2vhzb3,zabchob,2,Wed Feb 11 12:11:54 2015 UTC,"I tried to use footpedals for Meta and Control for about a year, but in the long run it just slowed me down. At my typing speeds, trying to coordinate exact timing for C- and M- on the floor slowed me down more frequently than it sped me up.  If you try it, give it a fair shake as part of your normal environment for a long time, to be sure you have overcome the initial learning curve. You have to learn to use your feet, you have to learn to NOT reach for Esc and Ctl and Alt with your hands, and you have to find the right place for the pedals.  ( Using a dasKeyboard these days, but seeing that Kinesis now uses Cherry MX, that puts them back at the top of the list for when I need a new keyboard. Might not be for a lot of years, but could be just one coffee spill away ... )"
emacs,2vhzb3,mmouratov,2,Wed Feb 11 15:46:41 2015 UTC,Using a $10 industrial foot pedal to switch keyboard layouts. Works great.
emacs,2vhzb3,zabchob,1 point,Wed Feb 11 16:59:02 2015 UTC,Apologies but could you expand upon what you mean by keyboard layouts? Do you have multiple sets of key mappings on the OS level that you modify at the press of the pedal?
emacs,2vhzb3,mmouratov,4,Thu Feb 12 00:29:45 2015 UTC,"I use two input methods in Emacs: the Russian one and US-Dvorak. Pressing the pedal and holding it enables the Russian layout temporarily -- useful to type a single word or phrase; pressing the pedal while holding Ctrl triggers a ""sticky"" switch that is handy for typing substantial texts in Russian.  When Emacs is not the active window (as detected by xmonad) the same scheme is used to switch XKB layouts.  Edit: grammar."
emacs,2vhzb3,jordonbiondo,2,Thu Feb 12 00:42:26 2015 UTC,"Spacebo!  Also, internet high-five for using xmonad. Best tiling WM out there for my money."
emacs,2vhzb3,ressis74,1 point,Thu Feb 12 03:30:05 2015 UTC,That sounds really handy for dual languages. Did you have to write that functionality yourself or was it available through some package?
emacs,2vhzb3,z3rocool,2,Thu Feb 12 04:07:38 2015 UTC,"It's an ugly and brittle hack that is spread over shell scripts, elisp snippets, and my xmonad config (which is in Haskell). The pedal is mapped (hardware-set) to the Hyper key, which doesn't exist on my keyboard anyway.  Quail is used to define a mapping between the Russian layout and Dvorak, so that all my Emacs keys (which use English letters) work even when the layout is switched to Russian."
emacs,2vfj8o,holgerschurig,8,Tue Feb 10 16:43:35 2015 UTC,This was discussed in /r/linux three days ago  Edit: typo
emacs,2vfj8o,yuppienet,7,Tue Feb 10 19:09:38 2015 UTC,"I think if anything though if the GPLed tools aren't competitive then something should be done about that too.   GCC became the dominant C compiler because it was the superior tool.  If the GNU project decides to sit on its hands and not offer the features that developers want and demand, then it's only natural that another project will become more popular at the expense of GCC.  The major C compilers do extremely good work at optimizing code, the new battlegrounds are the developments tools (e.g. code navigation, auto-completion, refactoring, etc.) and at the moment GCC is trailing behind, and RMS wanting Emacs not to support LLDB would also put Emacs on the bandwagon of software that's increasingly out of touch with the needs of modern developers.  Thankfully, Stefan seems to be much better at finding a balance between Freedom and Utility."
emacs,2vfj8o,gnuvince,6,Tue Feb 10 23:31:15 2015 UTC,Stallman has very little say in the matter thankfully.
emacs,2vfj8o,sigzero,-2,Wed Feb 11 03:26:42 2015 UTC,"Yes, for good reason."
emacs,2vfj8o,borodino,-7,Wed Feb 11 03:00:13 2015 UTC,Of course he is... It seems we can barely go two days without hearing about RMS bitching about LLVM this year...
emacs,2vfj8o,ccharles,4,Tue Feb 10 22:05:46 2015 UTC,"All I ever see in these news stories is ""ideologically consistent man continues to act in an ideologically consistent way""  Not that I agree with him, and I think it's probably hurting GCC and emacs, but it's totally unsurprising."
emacs,2ve9j6,curious-scribbler,5,Tue Feb 10 07:15:20 2015 UTC,"Windows does not have the same concept of a ""home"" directory as the UNIX variants do. You must set the environment variable %HOME% to a directory of your choosing. Under that directory is where .emacs.d, et al. will appear."
emacs,2ve9j6,mickeyp,4,Tue Feb 10 09:04:58 2015 UTC,"That's not true, strictly speaking.  There is equivalency and will use the parent of Desktop as the home folder, which is fairly analogous to Unix ~/.  %HOME% is set this way when you start, and changing it should be strongly considered optional, and in no way necessary."
emacs,2ve9j6,instant_sunshine,1 point,Tue Feb 10 11:50:33 2015 UTC,"That's not true, strictly speaking. There is equivalency and will use the parent of Desktop as the home folder, which is fairly analogous to Unix ~/.   Windows provides a list of pre-defined folders. Here is a link from the Malware Protection site. Appdata folder is described here  %HOMEPATH% exists and is C:/users/myname - or parent of Desktop. %APPDATA% (Roaming) is for configuration files that you can copy to another machine to have the same setup there. Therefore it's right that Emacs per default stores its configuration there. I guess an analog folder in Ubuntu-Linux might be ~/.config."
emacs,2ve9j6,ax_reddit,1 point,Tue Feb 10 20:34:47 2015 UTC,"That's the one, %APPDATA%  It's been many years since I used a Windows box."
emacs,2ve9j6,instant_sunshine,2,Wed Feb 11 05:31:23 2015 UTC,"Windows does not have the same concept of a ""home"" directory as the UNIX variants do.   Explains why tutorials have their .emacs on home because most of them are on UNIX.    You must set the environment variable %HOME% to a directory of your choosing.    My current %HOME% is -   C:\Users\MyName\OneDrive\emacs\bin/  or   C:\Users\MyName\AppData\Roaming.emacs.d  and I can change it to anything? Can't I get both to be in one place?"
emacs,2ve9j6,mickeyp,3,Tue Feb 10 09:50:58 2015 UTC,"Your emacs installation directory is not the same as your home directory. It could be, but why would it be?  Pick a directory... let's say C:\Home\ -- and then your emacs settings will go in there."
emacs,2ve9j6,ax_reddit,4,Tue Feb 10 10:47:01 2015 UTC,"I am learning emacs to write screenplays   Are you by chance using fountain-mode? If so, if you run into any problems running on Windows, I'd much appreciate if you could report them either on the Github Issues page at https://github.com/rnkn/fountain-mode/issues or the mailing list at emacs.fountain@librelist.com. Thanks!"
emacs,2ve9j6,spwhitton,1 point,Wed Feb 11 04:29:31 2015 UTC,"Yes, I will be using fountain-mode almost all day once I have figured out the above mentioned issue.   Thanks for the heads up. I'll surely leave my comment if and when I come across anything. Thanks."
emacs,2ve9j6,ax_reddit,1 point,Wed Feb 11 04:39:11 2015 UTC,"It appears that you've been a long time user and have quite a bit of experience with it.  Edit : Lord! Sorry. You created fountain-mode. Thanks a ton. Along with org-mode, your package made me want to drop FD and WD and all others and instead learn emacs.   Along with fountain-mode, What other packages would you recommend?  Any information that could be help to a new fountain-mode user?"
emacs,2ve9j6,chr1s96,3,Wed Feb 11 04:43:03 2015 UTC,"Cool cool, I'm glad you're getting some use out of it.  I made a very basic minor mode called olivetti that I use with fountain-mode (it was originally part it of before I spun it off into a minor mode). It just expands the margins so that the text body width sits nicely in the middle of the screen. https://github.com/rnkn/olivetti.  I use very few packages, but those I really like are:   markdown-mode auctex magit (I keep my writing in git repositories) git-timemachine god-mode (when you're rewriting it's good to have a better way to navigate, see also evil, viper, view-mode) google-translate (pretty useful when I was writing something with a lot of Spanish)   Keeping your writing versioned in git is a big help I think. If I'm talking to someone about a draft, and I've since made a lot of changes, it's helpful to jump back to to the commit I've tagged with their name."
emacs,2ve9j6,CodexArcanum,1 point,Wed Feb 11 05:18:58 2015 UTC,"Thanks for the list. I am not yet familiar with magit but before I start my new project, I'll fix that.   I'll play with the other packages you listed. Thanks again."
emacs,2vc8cl,abo-abo,1 point,Mon Feb 9 20:53:01 2015 UTC,"This is really cool - so basically hydra is a way to very quickly define an ad-hoc ""mode"" (just like vim's standard mode, etc) - but also giving the overview of commands in the mode line. Have to try this out."
emacs,2vc8cl,houshuang,3,Tue Feb 10 16:28:33 2015 UTC,"Yep, that's the idea. I'm currently going though vimtutor, simultaneously implementing vi in hydra.  I'm also working on a hydra implementation of org-export-dispatch. This will need the hint to become dynamic, since there are toggles involved."
emacs,2vc8cl,thang1thang2,1 point,Tue Feb 10 17:19:26 2015 UTC,"simultaneously implementing vi in hydra.   Just out of curiosity, why the duplication of effort vs an already very mature package like evil?"
emacs,2vcxqt,shackra,5,Mon Feb 9 23:59:04 2015 UTC,js2-mode js2-imenu-extras-mode (for quick access to functions) flyspell with jshint skewer-mode (for interacting with the browser) js-comint (repl for nodejs) yasnippet  smartparens  hs-minor-mode (for hiding/showing code blocks)
emacs,2vcxqt,caisah,1 point,Tue Feb 10 07:22:30 2015 UTC,"I'm wondering why you need jshint, since js2-mode can do the syntax check."
emacs,2vcxqt,redguardtoo,2,Tue Feb 10 10:11:13 2015 UTC,"When working with a team, I can easily set the hinting rules for the project."
emacs,2vcxqt,caisah,0,Tue Feb 10 11:34:55 2015 UTC,example of hint rule?
emacs,2vcxqt,redguardtoo,1 point,Thu Feb 12 06:27:48 2015 UTC,http://jshint.com/docs/options/
emacs,2vcxqt,caisah,5,Thu Feb 12 08:13:33 2015 UTC,"http://ternjs.net/ is worth checking out, too."
emacs,2vcxqt,ccharles,1 point,Tue Feb 10 00:44:00 2015 UTC,Ternjs and js2-mode are the most important ones.
emacs,2vcxqt,MonsieurBanana,4,Tue Feb 17 22:26:15 2015 UTC,Flycheck!!!
emacs,2vcxqt,radioactiveoctopi,3,Tue Feb 10 03:59:13 2015 UTC,Flycheck with jshint is working well for me.
emacs,2vcxqt,harumphfrog,3,Tue Feb 10 00:52:35 2015 UTC,"I actually just started looking into using Emacs for web editing, and I came across impatient mode. It uses the simple-httpd package to display your current buffer in the browser. HTML/CSS/Javascript will be updated on the fly. The only issue I'm having is that you can get live updates from an external CSS buffer, but your javascript will only update if it's inline. I suppose you can use multi-web-mode to write your code, and then copy it to another file when you have what you need.  Edit: there's also skewer mode, which allows you to evaluate javascript just like you would eval some lisp code. It looks pretty cool, but I'd prefer to see my changes on the fly instead of having to constantly reevaluate everything.  Double edit: It would appear skewer mode was made to be a more lightweight version of swank.js, which has a pretty impressive emacs rocks episode. I'll have to look into it."
emacs,2vcxqt,uberyoshi,1 point,Tue Feb 10 01:06:17 2015 UTC,"anything else besides having js3-mode installed?  edit: wait, should I choose js3-mode over js2-mode or at the inverse? and why?"
emacs,2vcxqt,hvis,2,Tue Feb 10 00:03:02 2015 UTC,"Do you really care about comma-first style? If so, choose js3-mode. js2-mode otherwise."
emacs,2vcxqt,hvis,1 point,Tue Feb 10 00:08:46 2015 UTC,"if the answer is ""I dunno"", then what should I choose?"
emacs,2vcxqt,aharris88,3,Tue Feb 10 01:44:22 2015 UTC,"js2-mode. Or js-mode plus flycheck (and, say, jshint), as long as you don't use any of the minor modes that that depend on the former (such as skewer or js2-refactor)."
emacs,2vcxqt,iceinmyveins,2,Tue Feb 10 08:11:40 2015 UTC,"I currently use vim for javascript and I'm learning emacs, so I would love to see a blog post about setting up emacs for javascript."
emacs,2vaxt3,julienXX,3,Mon Feb 9 14:55:06 2015 UTC,Made a small emacs plugin that fetches lobster.rs stories in an helm buffer. Code was heavily borrowed from helm-hackernews by Syohei YOSHIDA.
emacs,2vaxt3,abo-abo,1 point,Mon Feb 9 14:55:42 2015 UTC,"It's cool and all, but there's no point to it without voting privileges. Could you please invite me? ohwoeowho at gmail.com"
emacs,2vaxt3,abo-abo,3,Tue Feb 10 08:52:37 2015 UTC,Sent you an invite :)
emacs,2vaxt3,mikerackhabit,1 point,Tue Feb 10 09:38:05 2015 UTC,Thanks!
emacs,2vaxt3,mikerackhabit,1 point,Tue Feb 10 09:39:59 2015 UTC,"Would you mind inviting me too, that would be great :)  [removed]  Thanks!"
emacs,2va23g,HAEC_EST_SPARTA,2,Mon Feb 9 07:16:25 2015 UTC,"Not sure if this is the issue, but try using ""remoteport = 993"" under the [Repository Remote]. Don't have access to my main computer atm so can't check my config."
emacs,2va23g,Mitchical,1 point,Mon Feb 9 07:49:46 2015 UTC,"Well, that fixed the previous error, but now I'm getting this:  IMAP4 protocol error: socket error: <type 'exceptions.IOError'> - Too many read 0   Edit: Never mind, I've fixed the issue.  Thank you for your help!"
emacs,2va23g,Mitchical,2,Mon Feb 9 07:52:41 2015 UTC,Awesome news :) What was the issue?
emacs,2va23g,Mitchical,2,Mon Feb 9 08:01:31 2015 UTC,"I'm not really sure what the issue with the fingerprint was, but changing my configuration to use OS X's openssl certificate file enabled offlineimap to sync properly.  Thanks again!  :)"
emacs,2va23g,sigma914,1 point,Mon Feb 9 08:11:30 2015 UTC,Well to me that makes it seem like it's dropping connection in the middle of reading messages from the servers. Not sure if that's a gmail issue or maybe an offlineimap settings issue.
emacs,2v8y8u,Zef_Music,18,Mon Feb 9 00:46:57 2015 UTC,"Every time I see one of these articles about which is the One True Editor, I wonder if I'm the only person alive who happily uses both, each for different tasks, and would really feel like I had lost something if I had to pick one or the other for ever and ever."
emacs,2v8y8u,hlprmnky,9,Mon Feb 9 04:24:56 2015 UTC,Glad I'm not the only one. Need to open a giant python project? Emacs. Need to edit my mirror list? Vim.
emacs,2v8y8u,flarkis,6,Mon Feb 9 08:32:37 2015 UTC,Why not edit the mirrorlist in Emacs too?
emacs,2v8y8u,oantolin,3,Mon Feb 9 13:29:52 2015 UTC,"I suppose a better comparison would be: Use emacs for very IDE heavy or environment-dependent coding (LaTeX, C++, R, python, large projects of any kind, etc), while using vim for sysadmin tasks. It just feels awkward doing regular sysadmin activities with something like emacs since you want to be in the terminal 90% of the time, vim feels more like a ""drop in, edit quickly, drop out, get back to work"" solution that's much more applicable to the sysadmin workflow."
emacs,2v8y8u,thang1thang2,2,Thu Feb 12 13:34:20 2015 UTC,"I think people that use Emacs for sysadmin tasks probably do spend 90% of their time in a terminal, but they run that terminal inside Emacs. (This is speculation: I use Emacs for almost everything, but am not a sysadmin.)"
emacs,2v8y8u,oantolin,1 point,Thu Feb 12 14:04:09 2015 UTC,"My goal is to do that, but with emacs and jetbrain's IDE. I can do so that yet as I can't stand anything else than emacs and I'm afraid not using IDE will harm my career sooner or later."
emacs,2v8y8u,MonsieurBanana,26,Mon Feb 9 09:57:22 2015 UTC,Pick one and be really efficient in it. I could care less which you choose.... As long as it's emacs of course.
emacs,2v8y8u,kpurdon,5,Mon Feb 9 02:13:57 2015 UTC,"Emacs prides itself on being able to organize your projects, write your email, play Tetris, compile your code, and even tie your shoes for you in the morning!   At least he didn't mention the bloody doctor"
emacs,2v8y8u,flarkis,16,Mon Feb 9 08:46:12 2015 UTC,I see. Why do you say that at least he didn't mention the bloody doctor?
emacs,2v8y8u,nat1192,2,Mon Feb 9 14:14:44 2015 UTC,Because everyone mentions M-x doctor when they talk about how emacs can do everything. Despite the fact it's not a serious part of emacs.
emacs,2v8y8u,flarkis,11,Mon Feb 9 18:48:55 2015 UTC,Is it because do I say despite the fact it's not a serious part of emacs that you came to me?
emacs,2v8y8u,gmfawcett,8,Mon Feb 9 20:18:19 2015 UTC,I use vim all the time.  Of course on my system it's just an alias to emacsclient -t...
emacs,2v8y8u,lykwydchykyn,4,Mon Feb 9 15:04:35 2015 UTC,Thats why there is Spacemacs. Its really amazing. The best of both worldss
emacs,2v8y8u,gkunno,1 point,Mon Feb 9 19:39:27 2015 UTC,Wow thanks for the link to spacemacs! Trying it out!
emacs,2v8y8u,hodlr,1 point,Mon Feb 16 03:37:37 2015 UTC,"Np. Btw. The author is also very active on gh, all issues are responded to in like one day, i see i bright future for the project."
emacs,2v8y8u,gkunno,5,Mon Feb 16 06:59:47 2015 UTC,"You can run vim inside emacs, so no question which one is better :)"
emacs,2v8y8u,tigerstein,1 point,Mon Feb 9 07:12:45 2015 UTC,"So, if I run Emacs in Windows, this makes Windows the better text editor? :P"
emacs,2v8y8u,VanLaser,2,Mon Feb 9 11:11:22 2015 UTC,The better OS.
emacs,2v8y8u,gnuvince,13,Mon Feb 9 11:17:28 2015 UTC,"It's transparently obvious that this was written by a vim user. They didn't mention most of the serious cons of vim, like its use of vimscript, its bloated inclusion of C reimplementations of spelling correction and encryption (Emacs uses aspell and GPG of course) and its poor graphical support. Nor did it mention many of the unique features that Emacs users frequently use, like emacs --daemon or TRAMP. Most notably, they only briefly mentioned evil-mode - which, really, is what answers this question. No, it's not a competition - Emacs just wins, because it can fully reimplement vim. Of course, that's not very nice to say :)"
emacs,2v8y8u,catern,8,Mon Feb 9 01:18:31 2015 UTC,"Psst!     So, there's good and bad to each, though they definitely do fill two different niches at the end of the day, if only we could have both... oh wait! There's a way to do that actually. There's a plugin called Evil that emulates Vim's modal interface almost flawlessly within Emacs. This allows the quick and effective editing commands of Vim within the adaptability and all-inclusiveness of Emacs.   Right at the bottom.  ;)"
emacs,2v8y8u,Minepow2,3,Mon Feb 9 01:24:42 2015 UTC,"Okay, I had only finished the Emacs and Vim sections when I wrote my comment for the first time. I only needed a slight amendment!"
emacs,2v8y8u,catern,4,Mon Feb 9 01:32:09 2015 UTC,vimscript   Honestly I expect neo-vim to have much more comparable ecosystem to emacs once (if?) it finally rolls out. That being said I think there are some architectural features that are missing in vim like minor modes and a clear separation of buffers/files that will hold them back for a while until they find good solutions. The idea of any language being used for extension also sounds like hell. I doubt you'll find me contributing to javascript plugins.
emacs,2v8y8u,flarkis,2,Mon Feb 9 08:39:13 2015 UTC,It can NOT fully implement Vim unless it supports Perl scripting.
emacs,2v8y8u,rhabarba,-2,Mon Feb 9 08:40:23 2015 UTC,It's transparently obvious that this was written by a college kid.
emacs,2v8y8u,Trevoke,3,Mon Feb 9 12:43:11 2015 UTC,Editor warring is fun :)
emacs,2v8y8u,catern,1 point,Mon Feb 9 17:45:27 2015 UTC,"Since he's talking about saving time over the course of his future career yeah, I don't think anyone was disputing that."
emacs,2v8y8u,Fopenplop,3,Mon Feb 9 17:20:26 2015 UTC,"Yes. Competition is good, people see improvements in one editor and port them to the other. I'm still waiting for the vim port of magit though ;-)"
emacs,2v8y8u,virtuous_programmer,7,Mon Feb 9 01:23:53 2015 UTC,"And org-mode, and elisp, and tramp, and the daemon mode, and..."
emacs,2v8y8u,Denommus,3,Mon Feb 9 05:04:34 2015 UTC,Nice article.  I noticed a small typo in the first paragraph about VIM:   This is both it's weakest strongest and point.   The word and seems to be in the wrong place.
emacs,2v8y8u,simonced,4,Mon Feb 9 03:36:33 2015 UTC,"Also ""its"""
emacs,2v8y8u,kofdog,0,Mon Feb 9 19:16:35 2015 UTC,God damned brain being over efficient. Read it the first time as if it was correct :|
emacs,2v8y8u,Mitchical,1 point,Mon Feb 9 08:55:18 2015 UTC,"I don't know much about vim, and I have no idea what is entailed in scripting custom behavior. I'm curious about how hard it is to do certain things in vim that I can do with a dozen(or 2 or 3) lines of elisp ... things like:  create a code generation function (e.g., generate a skeleton C++ class header and implementation file given a class name) or code that moves the cursor to the matching paren, brace, bracket, etc.  Perhaps it's just because of my affinity for lisp-based languages, but I can't imagine that vim scripting could come close to elisp."
emacs,2v8y8u,metaobject,2,Mon Feb 9 04:42:18 2015 UTC,"He wasn't exaggerating when he said vim script is an atrocious language. Even the people in /r/vim agree. Almost no one (except tpope) can write it very well.   generate a skeleton C++ class header and implementation file given a class name   I'd probably create a snippet for both. Little bit verbose and I'm sure there's a better option but this is not a common part of my work flow so I just don't know.    moves the cursor to the matching paren, brace, bracket, etc.   Already a builtin command, the % key. Also some nice plugins that extend its functionality to pairs like if/endif in languages that don't use curly brackets."
emacs,2v6bh5,zk_phi,3,Sun Feb 8 07:43:04 2015 UTC,"Try it, it's good. Might also be good to see this in a buffer where the graphs could be bigger. Or not. Just a thought."
emacs,2v6bh5,benfitzg,2,Sun Feb 8 14:49:49 2015 UTC,Does it work on OS X ?
emacs,2v6bh5,dalavana,1 point,Mon Feb 9 03:23:45 2015 UTC,I don't have a mac so it's not implemented. I want someone who helps me.
emacs,2v6bh5,piotr404,1 point,Mon Feb 9 07:31:04 2015 UTC,"I have forked the repo and I'll see what I can do for you. I'll update you soon, hopefully."
emacs,2v6bh5,piotr404,1 point,Mon Feb 9 08:02:19 2015 UTC,"zk_phi, CPU and MEM are OK.  Still TODO: Network stats + fix the graph display.  Will post a pull request on github when finished (I can't work full time on it, so it will be ""ASAP"")."
emacs,2v6bh5,piotr404,1 point,Mon Feb 9 14:43:28 2015 UTC,Network done. Moving forward to the graph part.
emacs,2v6bh5,piotr404,1 point,Mon Feb 9 16:30:38 2015 UTC,"thanks, piotr404! what problem do you have with graphs?"
emacs,2v6bh5,piotr404,1 point,Tue Feb 10 04:12:51 2015 UTC,"For the moment, it does not show. Graphs are not dislpayed. For now, I did not find why since I could not work on this part yesterday.  I try to fix it during this day (7h56AM here in France).  BTW, on github, the PR will come from this account (mine, of course).  I'll update you soon, zk_phi. Thanks for your work."
emacs,2v6bh5,piotr404,1 point,Tue Feb 10 06:59:09 2015 UTC,"I recently added docstring for define-symon-monitor and it may help you.  https://github.com/zk-phi/symon/commit/41891e6c5a7bd21c66356466a5b9eb2165fb63a2  please confirm that :sparkline, :upper-bound, :lower-bound properties are set correctly in your monitor definitions."
emacs,2v6bh5,tending,1 point,Tue Feb 10 08:28:32 2015 UTC,"Fine, that's an interesting clue! I'll check that. Thanks !"
emacs,2v6bh5,brokenbabu,1 point,Tue Feb 10 08:32:17 2015 UTC,"Ok, it works on an other version of my hand-compiled Emacs (should miss some libraries during the compilation). So, I will send the PR within the 2 hours and re-test again and again on several builds."
emacs,2v6bh5,SrDigbyChickenCeaser,1 point,Tue Feb 10 09:30:09 2015 UTC,How do you put the monitor in the minibuffer without it conflicting with things? Tried it on my own choose and it kept misbehaving.
emacs,2v6bh5,SrDigbyChickenCeaser,1 point,Sun Feb 8 19:08:33 2015 UTC,symon puts monitor only while idle.
emacs,2v8h1w,sbay,3,Sun Feb 8 22:24:10 2015 UTC,Why reinvent the wheel?  drag-stuff.
emacs,2v8h1w,ccharles,3,Sun Feb 8 23:00:24 2015 UTC,great! thanks.
emacs,2v8h1w,xoo-,3,Sun Feb 8 23:05:27 2015 UTC,"Sure. But I am still curious figuring out what changed in emacs 24.4 that broke this code. I have other parts of my .emacs that are acting weird, and understanding these changes in 24.4 might clear them out."
emacs,2v8h1w,mygnu,2,Sun Feb 8 23:13:15 2015 UTC,"I've had the same problem, I resolved it after making a few changes to the function. Will post here when I get to my pc."
emacs,2v8h1w,fartlex_m,1 point,Sun Feb 8 23:23:31 2015 UTC,awesome...thanks!
emacs,2v8h1w,mygnu,1 point,Sun Feb 8 23:29:16 2015 UTC,Well?
emacs,2v8h1w,to3m,1 point,Fri Feb 13 18:00:13 2015 UTC,"I'm sorry mate, I have a 7 months old at home, I just keep forgetting  following solution works for me fine in emacs 24.4.1,   ;; Move region or line up down  (defun hg-move-line-up ()   ""Move line at point Up""   (interactive)   (let ((col (current-column)))     (transpose-lines 1)     (forward-line -2)     (move-to-column col)     (indent-according-to-mode)))  (defun hg-move-line-down ()   ""Move line at point Down""   (interactive)   (let ((col (current-column)))     (save-excursion       (forward-line)       (transpose-lines 1))     (forward-line)     (move-to-column col)     (indent-according-to-mode)))  (defun move-region (start end n)   ""Move the current region up or down by N lines.""   (interactive ""r\np"")   (let ((line-text (delete-and-extract-region start end)))     (forward-line n)     (indent-according-to-mode)     (let ((start (point)))       (insert line-text)       (setq deactivate-mark nil)       (set-mark start))))   (defun move-region-up (start end n)   ""Move the region up by N lines.""   (interactive ""r\np"")   (move-region start end (if (null n) -1 (- n))))      (defun move-region-down (start end n)   ""Move the region down by N lines.""   (interactive ""r\np"")   (move-region start end (if (null n) 1 n)))  (defun hg-move-line-region-up (&optional start end n)   ""Move line or region Up""   (interactive ""r\np"")   (if (use-region-p) (move-region-up start end n) (hg-move-line-up)))  (defun hg-move-line-region-down (&optional start end n)   ""Move line or region Down""   (interactive ""r\np"")   (if (use-region-p) (move-region-down start end n) (hg-move-line-down)))   ;; (global-set-key (kbd ""<C-M-up>"") 'hg-move-line-region-up) ;; (global-set-key (kbd ""<C-M-down>"") 'hg-move-line-region-down)"
emacs,2v8h1w,to3m,1 point,Sat Feb 14 04:59:32 2015 UTC,"I've got this version in my setup, and it works fine with Emacs 25.0.50. Note the extra check for Emacs 24.3.50, suggesting this one is slightly newer than the one you've got:  (defun move-text-internal (arg)   (cond    ((and mark-active transient-mark-mode)     (if (> (point) (mark))         (exchange-point-and-mark))     (let ((column (current-column))           (text (delete-and-extract-region (point) (mark))))       (forward-line arg)       (move-to-column column t)       (set-mark (point))       (insert text)       (exchange-point-and-mark)       (setq deactivate-mark nil)))    (t     (let ((column (current-column)))       (beginning-of-line)       (when (or (> arg 0) (not (bobp)))         (forward-line)         (when (or (< arg 0) (not (eobp)))           (transpose-lines arg)           ;; Account for changes to transpose-lines in Emacs 24.3           (when (and (eval-when-compile                        (not (version-list-<                              (version-to-list emacs-version)                              '(24 3 50 0))))                      (< arg 0))             (forward-line -1)))         (forward-line -1))       (move-to-column column t)))))   I don't remember where I got this from; probably the emacs wiki: http://www.emacswiki.org/emacs/move-text.el  There's a bit on SO about it here too, suggesting you can get it from one of the package managers: http://stackoverflow.com/questions/2423834/move-line-region-up-and-down-in-emacs"
emacs,2v4h7d,eu-guy,4,Sat Feb 7 20:42:38 2015 UTC,"Since you are new to Emacs, my series of guides may help you."
emacs,2v4h7d,tuhdo,2,Sun Feb 8 03:26:34 2015 UTC,You can look up what a key binding does by doing C-h k or C-h c. What do you see when you do C-h k M-b?
emacs,2v4h7d,kaushalmodi,3,Sat Feb 7 20:53:22 2015 UTC,"Actually, nothing happens. But now I know why. I had M-b bound globally to another program and forgot about that entirely.   Thanks kaushalmodi, that tipped me off in the right direction."
emacs,2v2udh,IvanMalison,22,Sat Feb 7 09:28:52 2015 UTC,"Orgzly (http://www.orgzly.com) is a new Android app that is syncing its notebooks in org file format.  Only Dropbox is supported at the moment, with calendar planned as an option too. Repeaters are supported already (+ .+ ++ shifting and keeping the state), but it also doesn't record change (yet).  So it's probably still not going to be useful to you, but it could become in not so distant future.  Disclaimer: I am the author."
emacs,2v2udh,nevenh,4,Sat Feb 7 11:16:18 2015 UTC,Cool. I'll definitely keep my eye on this.
emacs,2v2udh,cocreature,4,Sat Feb 7 11:46:41 2015 UTC,Nice! Do you intend to release the source at some point or do you want to charge people for it? (I know those are not necessarily exclusive.)
emacs,2v2udh,nevenh,2,Sat Feb 7 14:29:08 2015 UTC,"I'll release some parts of the code for start.  For example, org file parser, which is written in Java from scratch, might be useful to people.  Full source perhaps at one point - it's kinda going in that direction.  App will remain free on Google Play even after beta.  I don't exclude the possibility of adding few extra, non-essential features and using a kind of a freemium model in the future, but that's not anywhere close, if it even happens."
emacs,2v2udh,justinpitts,3,Sat Feb 7 15:22:34 2015 UTC,"I don't know if I have a use for it, but I do think I would like to read an org parser written in java"
emacs,2v2udh,cocreature,1 point,Sat Feb 7 15:53:47 2015 UTC,"Great, thanks for the answer."
emacs,2v2udh,kaushalmodi,1 point,Sat Feb 7 15:54:17 2015 UTC,"Thanks! I downloaded the beta app. Out of curiosity, why use Google Groups instead of Google+ Community for beta testers?"
emacs,2v2udh,nevenh,2,Sat Feb 7 13:24:52 2015 UTC,"Main reason was the ability to post and read everything by email, i.e. to use it as a normal mailing list.  Personally I find it more comfortable and faster to use, but then again, I don't have much experience with Google+ Community pages."
emacs,2v2udh,cestdiego,1 point,Sat Feb 7 14:19:56 2015 UTC,This is so cool! :) thx
emacs,2v2udh,vifon,1 point,Sat Feb 7 20:07:51 2015 UTC,"Are there plans to integrate it with org-mode's ""mobile"" commands (C-c C-x RET g/p)? I'd rather avoid Dropbox. Seems very promising nonetheless. Very nice UI."
emacs,2v2udh,nevenh,1 point,Sat Feb 7 21:05:39 2015 UTC,"Where does MobileOrg get your pushed files from? Do you copy them directly to the phone for example?  Support for SSH and SD card have a high priority. Maybe one of those will work for you?  As for MobileOrg's syncing method itself (push/pull), that's not really planned for now, unless there's a good reason for it."
emacs,2v2udh,vifon,1 point,Sat Feb 7 22:05:59 2015 UTC,"I push and pull them via SSH to/from my VPS. I'll wait and see how it'll work when it's done. I like the push/pull method due to low chance of data corruption: the pulled data ends up in a separate file and I ""merge"" it manually (with org-refile). On the other hand, I could just do it manually with an additional file, I think."
emacs,2v2udh,INeedAMonk,1 point,Sat Feb 7 22:42:30 2015 UTC,Downloaded it just now and this seems very promising! Thank you!
emacs,2v2udh,r2k9,1 point,Sat Feb 7 21:10:31 2015 UTC,"That looks really nice.  Is there going to be an iOS version, and if not, will you post when you open source the Java parser bit so I can port it?"
emacs,2v2udh,---R,1 point,Sun Feb 8 00:10:59 2015 UTC,org-element is an free parser. So is org-ruby.  There's some python parsers as well.
emacs,2v2udh,nevenh,1 point,Sun Feb 8 01:08:55 2015 UTC,"There's already even a java parser now.  It didn't exist when I was starting though, otherwise I'd probably try to use it instead of writing one from scratch.  I haven't yet checked it in detail, but one of the things I missed from the ones I did was the ability to get parsed headings while parsing. They all load entire structure in memory, which could be dangerous with large files, especially on mobile devices. ( They do DOM not SAX in XML parsers terminology. ;)  Still, it's probably something that could have been added to that parser."
emacs,2v2udh,nevenh,1 point,Sun Feb 8 11:38:58 2015 UTC,"Sure, I'll update once the parser is on github.  iOS Orgzly would be nice, but I don't have resources or knowledge to do the iOS version myself, so that's not planned currently."
emacs,2v23ww,vibhavp01,26,Sat Feb 7 03:35:00 2015 UTC,""" But whatever you (RMS) find out is irrelevant to whether or not the Emacs maintainer will accept LLVM support into gud.el, at least as long as I'm (Stefan) the maintainer."""
emacs,2v23ww,gnuvince,8,Sat Feb 7 16:10:56 2015 UTC,Stefan Monnier was found dead in a Cambridge alley this morning.  Unnamed sources report traces of beard hair at the crime scene.
emacs,2v23ww,username223,3,Sun Feb 8 05:09:08 2015 UTC,I wonder if Stefan forked emacs (he mentioned the possibility before) then how many of the core developers would follow him.
emacs,2v23ww,kcin,8,Sun Feb 8 15:52:12 2015 UTC,All of them? Stallman hasn't contributed anything besides insane drivel in decades.
emacs,2v23ww,fidelio132,1 point,Sun Feb 8 18:36:45 2015 UTC,RMS responded and admitted that his concern is that it would be harmful to GDB. But what he fails to realize is that the reason it would be bad for GDB is that he has refused to allow GDB to become a modern debugger with sufficient  capabilities for programmers to want to use it over other options.   His goal seems to be for the entire FSF complex of programs to be irrelevant.
emacs,2v23ww,kingpatzer,3,Sun Feb 8 22:50:20 2015 UTC,What isn't modern about it?
emacs,2v23ww,tending,1 point,Mon Feb 9 14:03:54 2015 UTC,"I don't know much about LLDB either but GDB always seemed modern to me too. You can script it in python or guile, it has a ton of useful and complex features, remote debugging, reverse execution, breakpoints on memory read/write, ..."
emacs,2v23ww,aaptel,-9,Wed Feb 11 16:42:20 2015 UTC,What a dick. Has no respect.
emacs,2v23ww,kraml,20,Sun Feb 8 14:48:53 2015 UTC,"Many who are saying, ""why not have that functionality, else we will lose to other editors"" do not see the problem in long run.  It was GCC's stubborn stand to play nice with propriety vendors that they provided with optimizations on their hardware to GCC so that everybody has them. Now with LLVM they can keep their secrets.  Companies like Google, IBM, Broadcom, ARM are forced to provide their contributions to Linux because its GPLed. Apple uses a lot of FOSS and they publish back their contributions but one cannot make a complete working system out of the box with it. Its because Apple just complies with the licenses and keep a lot of code with themselves. With GNU you can make a complete working system just from the source.  People may still write GPL software, but it would be compiled by LLVM because it offers performing generated code for each hardware, because of locked in optimizations. And slowly GCC will lose its presence, lesser number of people contributing to and lesser software compiled with it.  Its not being paranoid, its taking a look a"
emacs,2v23ww,xolve,12,Sat Feb 7 10:59:43 2015 UTC,"Apples compiler backend for new ARM processors used in Iphone6 was completely open sourced and merged with the one developed by the LLVM community. There was even a transition period with two ARM backends last year  So do you have any proof backing up your claims?  Have you ever maintained a fork of a big project such as LLVM with private code?   Do you even know how much work it is to keep all that code in sync?   It is in Apples best interest to actually contribute their code, they save themselves a ton of work.   And this is true even tho LLVM standards are higher than Apple, and that they have to put in work to get their code accepted into LLVM."
emacs,2v23ww,gnzlbg,4,Sat Feb 7 12:18:29 2015 UTC,"All their releases depend on good will and not on license terms. They might release their sources now. But they can change this any time they want. Embrace, extend, extinguish is - as the name implies - a process that comes in several steps. If things continue then GCC might be left behind in a few years.  It just needs a few attitude changes in the involved companies. What if they (might not even be Apple) decide that having a better ARM backend than their competitors is worth the trouble in maintaining it themselves? Do you think that's an unlikely scenario?  Just look at Apples history regarding Objective-C and GCC!"
emacs,2v23ww,the-fritz,3,Sat Feb 7 19:55:22 2015 UTC,"See also: Sony's open sourcing of their PS4 support for clang (comment + link to slides: http://www.reddit.com/r/programming/comments/2u2hw2/sony_open_sources_the_ps4_system_compiler/co4xafy)  This sort of merging work is painstaking, dull, and takes a surprisingly long time."
emacs,2v23ww,to3m,3,Sat Feb 7 17:13:01 2015 UTC,read this comment in this same thread.  You are exactly in point 1.   Those contributions are not license bounded.
emacs,2v23ww,viccuad,1 point,Sat Feb 7 21:57:37 2015 UTC,"They would do eventually, but when and how is still not freedom to users and community.  How would we know that they do upstream all changes? What if a device maker hides just enough code so that only their officially generated binaries can be run or provide some functionality? There are endless possibilities. I agree clever programmers will hack and find a way, but why do we need to do that.  So Android is open source, still devices are locked up. Freedom? It didn't take long for community to see that GPLv3 is not paranoid and is actually trying to solve  a real problem.  Though a long video, still very enlightening:   Considering the Future of Copyleft: How Will The Next Generation Perceive GPL? [https://www.youtube.com/watch?v=-ItFjEG3LaA]"
emacs,2v23ww,xolve,1 point,Tue Feb 10 06:48:39 2015 UTC,"Thanks for the video, i'll watch it tonight."
emacs,2v23ww,gnzlbg,29,Tue Feb 10 10:21:15 2015 UTC,"This is a valid concern, see Embrace, extend, extinguish.  At this point, Apple can buy the other half of the Forbes top 100, and all Apple is selling basically is software. With such a huge business would you not take precautions against a bunch of hippies that give people for free that on which you've made your billions.  Sure, the hippie software is not so well framed, and doesn't have the resources of Apple, but guess what: the users don't want complex things. The users want text editors, browsers and compilers. These are a solved problem for the most part - you don't get an edge with a team of 100000 against a team of 100 in that area.  Apple and other interested parties are managing risks when it comes to GNU.  The fact that they aren't devoting all of their resources to extinguish GNU, doesn't mean that they're doing absolutely nothing. And it certainly doesn't mean that they wouldn't be very happy if GNU vanished.  It may appear that Apple sees GNU as benign currently, but they would certainly show their teeth if GNUPhone ever came out.   How to ensure that GNUPhone never comes out?   Destroy GCC, of course."
emacs,2v23ww,abo-abo,15,Sat Feb 7 08:54:03 2015 UTC,"Apple seems to have no interest in “extinguishing” LLVM.  It actively contributes to Clang, even though it is not required to so.  The new ARM64 backend comes from Apple, as do large parts of the static analyzer, which is extensively used in Apple's XCode IDE.    In fact, it was Apple that made Clang a successful free project.  It was the first company to pick up Clang, it invested a lot of work to bring Clang up to par with GCC and beyond, and contributed it back to the LLVM project, even though it could just have taken the existing source and make a proprietary compiler out of it."
emacs,2v23ww,ectogon,8,Sat Feb 7 12:11:10 2015 UTC,"I guess that would make this the ""embrace"" phase then, wouldn't it?"
emacs,2v23ww,nosewings,4,Sat Feb 7 21:43:19 2015 UTC,No one ever said Apple wanted to extinguish LLVM. LLVM is their baby. The concern has been that LLVM is intended to extinguish GCC.
emacs,2v23ww,literallyallah,1 point,Sat Feb 7 21:46:52 2015 UTC,"I don't really see the problem. People who like 'Freedom' will stick with gcc, and those who don't care will go with LLVM. Everyone's happy with their own choices  (The quotes on 'Freedom' were to show I meant the GNU values of freedom, not an attempt to mock them)"
emacs,2v23ww,nosewings,1 point,Sun Feb 8 23:42:02 2015 UTC,"Everyone's happy with their own choices   Well, not really. Free software advocates view it as a setback."
emacs,2v23ww,sigzero,-4,Mon Feb 9 00:39:47 2015 UTC,I don't see that every happening no matter how popular LLVM gets.
emacs,2v23ww,abo-abo,0,Sat Feb 7 22:02:02 2015 UTC,"LLVM is providing barebones support for Emacs. By that logic, all code for OS X/Windows compatibility should be removed."
emacs,2v23ww,gnzlbg,4,Sat Feb 7 09:04:05 2015 UTC,"Please don't just lump everything into one with your ""logic"".  The OSX/Windows compatibility is GNU ""making an attack"" on OSX/Windows. It's good for the GNU project.  On the other hand, LLVM is the ""attack"" in the other direction: LLVM targets to destroy GCC - the core of the GNU. Anything that deters people from GCC is bad for the GNU project."
emacs,2v23ww,kingpatzer,44,Sat Feb 7 09:15:25 2015 UTC,"First, LLVM is a library for building compilers. Clang and GCC are compilers.   GCC made a decision: to not be interoperable by design. This decision is what is killing gcc, not clang.  Apple did try to contribute patches for making GCC interoperable with tools but the community was against this design decision (this is no longer the case as GCC is dying, but now it is too late).   It turns out, that compiling C++, even tho hard, is a small part of the big picture. You need to offer code completion, documentation generation, code formatting, enforcing coding styles, static analysis, safe refactoring, run-time analysis, unit testing coverage... all these made people more productive. Compiling the code is actually a tiny fraction of what is necessary in any medium sized project.   Before Clang, other open source projects had to invest a huge amount of time and effort into crappy reimplementations of a C++ compiler front-end to try and partially solve these other problems that GCC did not address. When C++11 arrived, they couldn't keep up. GCC wasn't there to help them, but Clang was (e.g. see Doxygen, KDevelop, ...).  It turned out, that clang did not only allow people to solve all these problems, it also was a fine C++ compiler back then.  So to answer your question is Clang killing GCC? GCC made a decision, to be on purpose and by design not interoperable. This worked fine during the GCC monopoly, the fact that there was nothing else to use doesn't mean that the decision was right. Clang just proved that the decision was, in fact, wrong. GCC has realized this too late, but no, Clang did not kill GCC, GCC killed himself.  People have been writing emacs extensions for a long time and this extensions have always come into the Emacs mainline at some point. The fact that all these extensions that make emacs interoperable with almost anything are allowed in, but those that make emacs interoperable with clang, lldb, llvm... must stay out because they are the enemy is just a bad decision. It is making emacs worse, on purpose. Emacs should learn from GCC and not make the same mistake. Otherwise we will be asking ourselves the question did Y kill emacs in XX years."
emacs,2v23ww,ivosaurus,18,Sat Feb 7 11:38:51 2015 UTC,I'll go even further -- GCC decided on purpose to not give developers the information they needed to be able to be productive. See the recent debate about exporting the whole symbol table.   It is clear that RMS is blindly unware of what programmers of today need in order to do things like large scale refactoring on complex OO projects. And his decisions which seem largely driven out of fear of someone somewhere using GCC to compile code that isn't GPL3 is what is killing GCC.
emacs,2v23ww,geocar,4,Sat Feb 7 12:49:13 2015 UTC,"In a way, it's kind of weird that it took all the way into the 2000's (or maybe 2010's) for an absolutely rock-solid compiler-grade parser to become available as a library. And object-code emitter. And debugger.  Because hopefully it is really fucking obvious by now, these are insanely useful things to have. People are incorporating them everywhere.   GCC had two decades to make this sort of code a reality, and basically make LLVM's redundant before it existed. But they didn't, and whether they like LLVM's license or not, they've fallen on their own sword because of it. Purely pragmatically, this will always be a popularity contest - who's tool is the most useful? And GCC is purposely choosing to lose it."
emacs,2v23ww,gnzlbg,1 point,Sun Feb 8 10:38:40 2015 UTC,"GCC made a decision: to not be interoperable by design. This decision is what is killing gcc, not clang.   Just stop it.  Your editorialisation is exactly why RMS is right.  Apple wanted to link GCC as a library into Xcode, but did not want to make Xcode free software.  Apple thinks that keeping Xcode non-free is so important to them, that they are duplicating a sizeable portion of the work put towards GCC.  Only a fool could think bringing more non-free code into the world is good for free software."
emacs,2v23ww,nosewings,11,Sat Feb 7 12:57:17 2015 UTC,"Apple wanted to link GCC as a library into Xcode, but did not want to make Xcode free software.   So? Why is this wrong? They wrote Xcode, they are free to decide if they want to open source it or not. Forcing them to do something they don't want to is not freedom.   If you let them link against GCC, you let them invest into GCC, you let them improve GCC, everyone benefits.   How do I know? Cause they invested into LLVM instead, LLVM saw massive improvements in their code base, and everyone has benefited a lot:  static analyzer, sanitizers, refactoring tools, clang-format, code coverage analysis...    Only a fool could think bringing more non-free code into the world is good for free software.   Only an hypocrite fights for freedom by forcing people to do as he says even if they don't agree.   The only way to fight for freedom is to lead by example. This is not what GNU does. I do set my software free, completely free, do whatever you want with it, make money with it, I don't care.   GNU is not freedom, it is a coward's reaction to fear. Fear that people won't contribute back, fear that others will make profitable what they couldn't make profitable, fear that they will keep improvements to themselves. The GNU foundation is just a bunch of hypocrites that now are crying because GCC is not the king of the hill anymore.   And what is their childish reaction? Let's do not let emacs generic debugging interface have basic lldb support. A reaction out of fear by people who never had the guts to let their software be truly free."
emacs,2v23ww,LtWorf_,9,Sat Feb 7 14:51:55 2015 UTC,"Forcing them to do something they don't want to is not freedom.   No one forced Apple to do anything, and it's really disingenuous to pretend that having conditions is the same thing as forcing those conditions on someone. Apple was completely free to walk away -- and they did."
emacs,2v23ww,phalp,2,Sat Feb 7 15:43:28 2015 UTC,"And they would have probably not put the same amount of resources into GCC as they've put into LLVM, because they don't like the GPL license."
emacs,2v23ww,gnzlbg,11,Sun Feb 8 18:48:15 2015 UTC,"They wrote Xcode, they are free to decide if they want to open source it or not. Forcing them to do something they don't want to is not freedom.   Oh, please. Of all the stupid, overused anti-GPL rhetorical tactics, this one is the worst. ""Nuh-uh it's not FREE because giant companies aren't FREE to abuse our generosity and use our code to wipe us out"". I get it, you're grumpy that they got to the term ""Free Software"" first and used it in a way that offends your sensibilities. So go ahead and say it, none of this feigned confusion. Talk about childish reactions.  (Fun fact: the second-worst tactic is dropping the ""offering code under any license with conditions is literally forcing everyone to do things against their will"" line. It's especially hilarious when applied to huge, powerful companies.)   The only way to fight for freedom is to lead by example.   That's a bizarre statement. Why would that be the only way, and in what way is releasing one's code under the GPL not leading by example? I for one can't think of a reason that using contract law to ensure key freedoms for your users isn't leading others by example to do the same."
emacs,2v23ww,nosewings,2,Sat Feb 7 16:58:04 2015 UTC,"I get it, you're grumpy that they got to the term ""Free Software"" first and used it in a way that offends your sensibilities. So go ahead and say it, none of this feigned confusion.   I thought I did:   I do set my software free, completely free, do whatever you want with it, make money with it, I don't care.   But let me restate it, for me ""free software"" is BSD-like licensed software (I use the Boost Software License).   So, in such a ""free software"" world, when I say:    The only way to fight for freedom is to lead by example.   what I mean is that the best way I've seen to get others to contribute back their improvements is to do so yourself and show them that putting this effort is worth it.   People forget it, but contributing code back to the community does takes effort, sometimes a lot of effort. The quality standards of open source projects are high (which is a good thing), that doesn't mean that code hacked over a weekend to solve a clients problem by monday is bad. It just means that someone has to put the effort of cleaning the code, going through peer review, documenting it, ensuring unit-test coverage, ... this takes time and money.   At the same time, contributing the code back means that you don't have to maintain a fork of the project anymore and keep it up to date, which also takes time and money.  Showing people that it is worth to do so is IMO enough. Some will never contribute anything back, most I believe they do.    ""Nuh-uh it's not FREE because giant companies aren't FREE to abuse our generosity and use our code to wipe us out"".   Wipe you out? Seriously? Do you have an example of a company that has succeeded at EEE against a BSD-like licensed project?"
emacs,2v23ww,F22Rapture,4,Mon Feb 9 01:29:23 2015 UTC,"Fun fact: the second-worst tactic is dropping the ""offering code under any license with conditions is literally forcing everyone to do things against their will"" line.   I mean, under that logic, Apple should be considered at least as bad as the FSF, since they ""force"" us to accept the terms of all their licenses."
emacs,2v23ww,abo-abo,1 point,Sat Feb 7 21:49:03 2015 UTC,"GNU is not freedom, it is a coward's reaction to fear. Fear that people won't contribute back, fear that others will make profitable what they couldn't make profitable, fear that they will keep improvements to themselves. The GNU foundation is just a bunch of hypocrites that now are crying because GCC is not the king of the hill anymore.   I don't disagree, but Stallman's opinions on this come from the 80s and 90s, where that was a serious problem and there weren't really any counterexamples."
emacs,2v23ww,hvis,3,Sun Feb 8 21:13:36 2015 UTC,"One of the points that came up during the Clag-GCC debate on the mailing list were that LLVM isnt there to destroy GCC, it came up because of certain design flaws in the compiler that the developers didnt agree with (one of the main points being the API-centric design, which provides easy access to AST for completion and refractoring). So, Im not really sure if LLVM is there to destroy GCC, or just provide a nice compiler infrastructure (and therefore competing with GCC)."
emacs,2v23ww,abo-abo,1 point,Sat Feb 7 09:48:48 2015 UTC,"and therefore competing with GCC   Anything not GPL-licensed competing with GCC is out to destroy GCC by default. They can claim that it's not what they're after, but that's what they're doing, whether they're aware of it or not.  To me personally, ""certain design flaws"" mean nothing compared to freedom.  And please don't start with ""LLVM is free"". It can take only a few years of Embrace-Extend-Extinguish to turn a non-GPL free code to shit. And once you've lost your compiler, you've got nothing."
emacs,2v23ww,hvis,5,Sat Feb 7 10:05:26 2015 UTC,"What Clang does is hampers GCC from using vendor lock-in as a means of competition (which is what happens when you're the only game in town).  Nobody likes to be locked into using proprietary software, but is it really so great for free software? For technical reasons, it's better when competition is unrestricted."
emacs,2v23ww,sigzero,6,Sat Feb 7 16:33:48 2015 UTC,"Let me explain why I think competition among commercial companies is good. The goal of a company is to make money. They would sell you a pound of snow for 1000,000 if they could. The only thing stopping them from doing that is another commercial company selling for 999,999.  Free Software has no money-making agenda. They don't care if they make a product so good, that it needs no updates and there's no more money to be made. Planned obsolescence is not an issue. So theoretically, once there exists a Free Software project, there's no point in starting a new one to do the same thing, since all of us have an agenda to make the best product possible, not just to push our thing to make money.  Of course, there can be different views of the best product possible, and instead of making compromises it can be good to diverge. But only if we can afford it. Splitting a group of 10 people into 5+5 isn't great. Having 10 people out of 200 go on to try their own thing is fine. So competition among Free Software is OK, if we can afford it.  I for one, prefer that projects stay monolithic. For instance, I don't enjoy seeing or writing (featurep 'xemacs), not that I have anything against XEmacs, I just like simplicity.  Being vendor locked-in by Free Software isn't the worst thing."
emacs,2v23ww,abo-abo,7,Sat Feb 7 16:48:56 2015 UTC,"There are a lot more people working on compilers than 10, and they have different goals and needs.  GCC being the only game, and RMS's policies, when combined, prohibit a sizable chunk of them from working on the desired features, such as better tools integration, which was the subject of the recent Emacs-GCC discussion.  With that in mind, Clang being there is better for their (and ours) general freedom, even if we ignore all goals related to proprietary software."
emacs,2v23ww,biggumz_,2,Sat Feb 7 17:25:40 2015 UTC,"Anything not GPL-licensed competing with GCC is out to destroy GCC by default.    Sorry, that is a bunch of GPL crappola."
emacs,2v23ww,username223,-2,Sat Feb 7 22:06:05 2015 UTC,"LLVM is free, even by the FSF's own standards, and it will in and by itself not become unfree if a vendor releases proprietary extensions or forks of LLVM."
emacs,2v23ww,J_M_B,10,Sat Feb 7 11:43:07 2015 UTC,"Just let me explain how EEE works:   You (the EEE guy, Apple or whatever) contribute code to a free project A, everyone is happy. You earn trust and goodwill. You make a proprietary tool B that inter-operates with a free project A. No-one is stopping you. You contribute so much to the proprietary tool B, that the users can't imagine using the free project A without it. You write your own proprietary back-end C to the proprietary tool B, taking the free project A out of the equation.   This is where the BSD freedom-loving people jump ship, since they don't want C.  But now A has become obsolete, since it has zero support for the tool B. The tool B was 5 years in development and it would take a very long time to make a free equivalent. Might as well give up on A, since the users don't want it without B. Extinguished."
emacs,2v23ww,andermetalsh,-1,Sat Feb 7 15:17:00 2015 UTC,"If the proprietary one or any other opensource software is better than A it will die no matter what license you choose to ""protect your work"", it's not like some legalese will keep your project at the top. I haven't heard anything about GCC working towards staying ahead of the curve, like an architecture that could keep up with LLVM's pace of improvements(flexibility-wise etc)."
emacs,2v23ww,J_M_B,1 point,Sat Feb 7 22:46:53 2015 UTC,"If you're the troll I think you are, you're playing an unusually deep game."
emacs,2v23ww,kingpatzer,-2,Sun Feb 8 05:15:12 2015 UTC,"You are assuming that users will all automatically start using B. You are also assuming that the users won't decide to develop a free version of B. Indeed, the more likely case is that there is a proprietary version of A and B which end up getting completely replaced by their free versions. Case in point: GnuPG replacing PGP."
emacs,2v23ww,tromey,0,Sat Feb 7 22:50:41 2015 UTC,"ou are assuming that users will all automatically start using B. You are also assuming that the users won't decide to develop a free version of B.   Apple, FreeBSD."
emacs,2v23ww,tromey,2,Sat Feb 7 23:44:28 2015 UTC,"Apples to Oranges. Apple is primarily a desktop system. *BSD is primarily a server system. After many years of trying, Apple has abandoned the server market."
emacs,2v23ww,AmericanKryptonite,1 point,Sun Feb 8 01:08:04 2015 UTC,FreeBSD is alive and well and enjoying great success.   If it only had a decent installer . . .
emacs,2v23ww,abo-abo,1 point,Sun Feb 8 00:33:23 2015 UTC,"One of the points that came up during the Clag-GCC debate on the mailing list were that LLVM isnt there to destroy GCC   They'd hardly say that, though."
emacs,2v23ww,AmericanKryptonite,1 point,Tue Feb 10 04:50:04 2015 UTC,"One of the points that came up during the Clag-GCC debate on the mailing list were that LLVM isnt there to destroy GCC   They'd hardly say that, though."
emacs,2v23ww,abo-abo,1 point,Tue Feb 10 04:50:25 2015 UTC,"Apple easily has enough money to hire full time engineers to write equivalent (proprietary) versions of the top 20 open source products. I think people like him don't understand that if open-source for some reason didn't exist, companies would simply devote significant resources to solving the problem.  Look at software like Firefox and OpenOffice/LibreOffice, Chrome and Office dominate because the companies are able pour significantly more resources into it. If there truly was a conspiracy against open-source in projects like gcc or the Linux kernel, they'd already be dead.   Edit: I just wanted to clarify, I think open source is awesome. I'm a huge advocate for it. I'm just pointing out that if companies wanted to stop using open source and stop contributing, they could. A large number of projects (like the Linux kernel) are 75%+ or more contributed to by commercial backers. I'm pointing out that a massive conspiracy against open-source is unlikely as companies mutually benefit from huge parts of the community."
emacs,2v23ww,AmericanKryptonite,0,Sun Feb 8 02:58:35 2015 UTC,"It's people like you that don't understand the goal of Free Software, and why Apple can't defeat it by making proprietary versions.  The goal of Free Software is to provide Free Software.   it's not to have most users it's not to make the users feel good about themselves it's not to cater to users' whims   It's to provide the users with:   security of knowing what they are running security in knowing that the project can go on even if the author abandons it freedom to learn how the software works and adapt it to your needs   Additionally, GPL gives us the luxury of third parties having to contribute to the project if they're using it.  If you were an experienced programmer, you'd understand what I'm talking about. Mentioning Office just shows how much you're still stuck in userland."
emacs,2v23ww,abo-abo,1 point,Sun Feb 8 08:52:28 2015 UTC,"I edited my comment, but I want to point out that my issue is not with open-source but the idea that companies like Apple or Google are actively seeking ways to destroy open-source projects. >70% of contributors to the Linux kernel work in the commercial space and many for the companies so many people claim to hate."
emacs,2v23ww,dmazzoni,-1,Sun Feb 8 17:59:09 2015 UTC,"idea that companies like Apple or Google are actively seeking ways to destroy open-source projects   You can't deny that it would benefit them if Free Software was gone. Throw money into the equation and you've got a solution.  Of course, in order to avoid bad publicity, it's not possible to do it openly or quickly.   70% of contributors to the Linux kernel work in the commercial space    Which exactly shows how GPL is working. They are required to contribute, it's not their choice. I think that leaving the choice up to them would lead to less or no contributions. And it's not like they're not getting anything in return: they get a working Free Software system on basis of which they make money.   and many for the companies so many people claim to hate.   Not all companies deserve hate. Only those who tread on our Freedom.  Apple is remotely controlling their iOS things, Samsung TVs record everything you say, Facebook knows more about you than your mother, sometimes even if you're not on it. Don't you think this deserves hate?"
emacs,2v23ww,Yidyokud,2,Sun Feb 8 20:14:14 2015 UTC,"Apple is remotely controlling their iOS things, Samsung TVs record everything you say, Facebook knows more about you than your mother, sometimes even if you're not on it. Don't you think this deserves hate?   Not really, no. No one is forced to use any of their products. The market is regulating itself. Facebook is losing massive market share with youth, and Snapchat is gaining market share. Apple controlling iOS remotely isn't an issue unless government forces them to, Apple doesn't give a shit about your habits they aren't an ad-focused company."
emacs,2v23ww,lykwydchykyn,-1,Sun Feb 8 20:25:48 2015 UTC,"Have you contributed to GPL projects?  EDIT: Allow me to clarify - this crazy outlook makes sense and is somewhat tolerable from RMS or anyone else who put so much work into providing excellent free stuff to everyone. I might not agree with the hard line, but they came by it honestly and deserve respect either way.  The same isn't true for GPL zealots who haven't so much as fixed a typo in documentation.  So, I find it perfectly acceptable to ask this question.  And yes, I have contributed patches. Not many, but I've done it."
emacs,2v23ww,_david_,10,Sat Feb 7 11:17:51 2015 UTC,"I have more than a dozen Emacs packages published. I've contributed to ob-clojure.el, ob-J.el and outline.el, and some packages which are not in the core. My current summary at Github shows > 3000 commits for the last year, all of them GPL."
emacs,2v23ww,Pas__,14,Sat Feb 7 15:19:57 2015 UTC,"That more than qualifies in my book.  I don't agree, but you've certainly earned the right to tell me to go fuck myself.  P.S.,  As an emacs user, thank you!"
emacs,2v23ww,kingpatzer,7,Sat Feb 7 15:33:15 2015 UTC,"I've contributed hundreds of thousands of lines of GPL'd code, and just as much under other licenses (LGPL, Apache, BSD, etc.). I think the argument that LLVM/Clang is trying to destroy GCC is ridiculous.  They're competing by providing alternative software. Since when is that a bad thing?  Also, people seem to be associating LLVM/Clang with Apple, but it's a huge community with lots of contributions from other companies like Google, Intel, IBM, plus many from academia and hobbyists. If Apple were to take it in a bad direction, the community could fork it and there'd be plenty of developers."
emacs,2v23ww,geocar,1 point,Sat Feb 7 22:32:32 2015 UTC,"I tend to agree with you, but my credibility isn't as good both of yours."
emacs,2v23ww,gnuvince,0,Sun Feb 8 08:13:09 2015 UTC,You linked terrific article. MS to extinguish the internet. OMG the feckkers.
emacs,2v23ww,kcin,35,Sun Feb 8 09:06:42 2015 UTC,"Is anyone else increasingly disillusioned with RMS attidute lately?  The fact that he wants emacs, GCC, et al to be less functional because he imagines some conspiratorial attack against GNU is sad.  It's like putting buggers on your pizza so nobody else will eat it."
emacs,2v23ww,F22Rapture,12,Sat Feb 7 04:42:23 2015 UTC,"He's not putting buggers on anyone's pizza, he can't do that since the software is free and anyone who doesn't agree with him can fork it and do their own thing.  He's advocating that we shouldn't sell our freedom for convenience, something he has always done. He is of course trying to steer his own projects in accordance with his long-standing beliefs."
emacs,2v23ww,geocar,38,Sat Feb 7 13:11:09 2015 UTC,"Not at all. He's one of the few voices in programming that advocates that technology for communities and people should be put above the concerns of technology for capital. If anything, I've become disillusioned with other programmers, who seem to be aware of nothing beyond arguing over the best metaphor for monads."
emacs,2v23ww,F22Rapture,2,Sat Feb 7 08:10:04 2015 UTC,"Well, after all that has been said and done, people and software are just as bound by simple laws of economics, and RMS can try to force the world to demand GPLv(whatever) software, but as things currently stand, eventually he'll lose.  Sure, sure, even if he is right, of course, even if then people will change their preferences and their utility function shifts and woo hoo GPL makes a comeback, but the reality is that people want better software more than they want tinkerable software.  The same can be seen by DRM, plugins, and HTML5 video codecs. Mozilla pragmatically ""caved in"". The correct move is to allow users freedom by making it possible to disable it, not forcing them to withold consumption of DRM-ed content. Sure, you can educate users along the way. Put up big warnings, urge them to tell Netflix that DRM is bad, and whatever, but still allow them to access the content.  The same goes for GCC. Because simply telling programmers that no, you can't build a good IDE because it'd mean GCC will get subverted, by some possible but not very likely scenario is pissing in the wind, against the wind.  He's not agile enough I fear."
emacs,2v23ww,kingpatzer,0,Sun Feb 8 03:49:01 2015 UTC,"technology for communities and people should be put above the concerns of technology for capital   His point here, and with respect to the recent GCC symbol table discussion, demonstrate that his interest is exactly NOT about technology being for communities and people. His interest is to exclude anyone he disagrees with.   And in doing that, GCC is becoming irrelevant for programming. He has a window where that need not happen with Emacs. But that windows will close if he chooses to make it so that Emacs is not interoperable by design with the tools and systems programmers use."
emacs,2v23ww,vizzie,9,Sat Feb 7 12:54:44 2015 UTC,"If you do not believe that preserving freedom in free software is important; only that it be ""better"" or ""faster"" or ""easier to program"", then you might not realise that Apple threatens free software simply by attempting to rewrite the popular parts of GCC instead of actually contributing to new free software.  Fortunately for all of us, RMS believes freedom is more important than popularity."
emacs,2v23ww,kingpatzer,27,Sat Feb 7 13:49:29 2015 UTC,"Free software does not exist in a vacuum, it's part of a larger ecosystem.  If the GNU projects keep isolating themselves, they will become irrelevant and in the end abandoned.  The best way to keep Free software alive is to have it be the better technical alternative."
emacs,2v23ww,vizzie,4,Sat Feb 7 14:15:42 2015 UTC,It's a valid point. It's sad to see /r/emacs readers are not better than those at other parts of reddit and downvote comments just because they disagree with them.
emacs,2v23ww,kingpatzer,3,Sat Feb 7 16:12:21 2015 UTC,"you might not realise that Apple threatens free software simply by attempting to rewrite the popular parts of GCC instead of actually contributing to new free software.   The last straw that led to Apple throwing in with LLVM was submitting those patches to GCC (as GPL licensed code!), and being rejected.  Apple did try to contribute what they needed to GCC.  http://gcc.gnu.org/ml/gcc/2005-11/msg00888.html"
emacs,2v23ww,M2Ys4U,0,Sun Feb 8 21:18:23 2015 UTC,"""The last straw?""  We didn't need a way for GCC to be used by non-free software. Apple needed that."
emacs,2v23ww,GTChessplayer,1 point,Sun Feb 8 21:54:02 2015 UTC,"We didn't need a way for GCC to be used by non-free software. Apple needed that.   And they attempted to contribute it, so I don't understand why you're arguing that they didn't.  You can't argue that their decision to start a new project is a ""threat"" to GCC when GCC decided not to let them contribute in the first place.  GCC came out on top in the 90s because they were a compeitive compiler that worked on multiple platforms just as well as the nonfree compilers. GCC is only in this situation now because they became a monopoly and stopped giving a shit (oh the irony) about what developers need.  If the developers would take their heads out of the sand and clean up their code, implement the features that need to be implemented, etc, LLVM wouldn't be a threat to them. And if they'd done that 10 years ago, LLVM would never have become a threat in the first place."
emacs,2v23ww,kingpatzer,4,Sun Feb 8 22:21:34 2015 UTC,"LLVM and CLANG are free software.   So your complaint is baseless.   The LLVM license starts off with:   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal with the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so . . .    Yeah, so restrictive. How could we ever deal with that burden . . ."
emacs,2v23ww,GTChessplayer,10,Sat Feb 7 14:02:44 2015 UTC,"From the FSF/RMS perspective, freedom is based strictly from the end user perspective. Since the BSD-style license allows proprietary derivatives, the potential exists to make changes, enhancements, and improvements to the code without making the code available to the end user. Thus, from the end user perspective this is less free than GPL licensed software.  Reasonable people can disagree on this definition of freedom. Then again, no one has ever accused RMS of being reasonable."
emacs,2v23ww,kingpatzer,-2,Sat Feb 7 19:45:41 2015 UTC,"Thus, from the end user perspective this is less free than GPL licensed software.   In this day and age of boutique products and apps, the distinction between end user and developer is more than tad fuzzy. When it comes to development tools and libraries it's fuzzier still.   The reality is that the BSD style license is far and away superior to the GPL for all involved parties because it is far more equitable. And when it comes to licensing, equitable trumps all.   But beyond that, any license that limits your choices by using the software in any way limits your freedom with respect to that software. That's really not arguable. The BSD license limits your freedoms, including your freedom to do things like disagree with RMS, far less than the GPL does.  Regardless, the LLVM license is an open and free license. That it doesn't act to restrict end user freedoms in a way that the FSF/RMS like doesn't make it a non-free or non-open license. So the argument being forwarded that the LLVM/CLANG is in some way restrictive is simply false."
emacs,2v23ww,GTChessplayer,7,Sat Feb 7 20:10:42 2015 UTC,"I'm not trying to argue which interpretation is correct. The FSF/RMS has as their foundational definition of freedom that all source code should be available and usable. As the BSD license allows for products that mix BSD-licensed code and proprietary code, it is less free by their definition because it allows private code to be used with open source. Their definition will never change, regardless of your opinions or arguments."
emacs,2v23ww,twotime,-2,Sat Feb 7 20:38:24 2015 UTC,I'm not saying they are in any way compelled to do anything based on my opinion or argument. I am saying that there is no argument that BSD style license is more equitable for all classes of users of the product.
emacs,2v23ww,geocar,3,Sat Feb 7 23:26:12 2015 UTC,"In this day and age of boutique products and apps, the distinction between end user and developer is more than tad fuzzy. When it comes to development tools and libraries it's fuzzier still.    Not really.  Even if you're using a tool and are a developer, unless you're developing that tool you're a user not a developer in this context."
emacs,2v23ww,LtWorf_,0,Sat Feb 7 22:32:02 2015 UTC,"Free software means something different. What you've described is open source, not free."
emacs,2v23ww,phalp,3,Sun Feb 8 06:57:15 2015 UTC,"Oddly, the FSF does not have the power to define language."
emacs,2v23ww,the-fritz,1 point,Sun Feb 8 22:53:17 2015 UTC,free doesn't just refer to cost.
emacs,2v23ww,tromey,3,Mon Feb 9 01:27:52 2015 UTC,"No, it also refers to liberty. And the BSD license allows the user of the code the freedom to do anything that they choose to with the code. Unlike the GPL, which restricts the user's freedoms explicitly."
emacs,2v23ww,the-fritz,2,Mon Feb 9 01:28:39 2015 UTC,But the BSD license doesn't protect the freedom of the end user to have full access to the software.
emacs,2v23ww,gnuvince,1 point,Mon Feb 9 01:31:05 2015 UTC,Apple threatens free software simply by attempting to rewrite the popular parts of GCC instead of actually contributing to new free software.   are you referring to the fact that apple is investing into clang/llvm? (rather than contributing to gcc). Or something else?
emacs,2v23ww,kingpatzer,1 point,Sat Feb 7 23:32:40 2015 UTC,"Yes, I am specifically referring to the opportunity cost of work spent cannot then be spent on something else."
emacs,2v23ww,abo-abo,11,Sun Feb 8 10:24:41 2015 UTC,"Indeed, I am.  I find it ironic that today we need to build upon the toolchain created by a major vendor of proprietary software for their own purposes to create a high-quality free stack for C/C++ development.  If it wasn't for Apple, we wouldn't even have a good static analyzer for C/C++ under a free license—something which none ever build based on GCC because it was technically impossible.  GCC will become the new GJC, and we'll have a better free C/C++ toolchain because of it, just like the Java toolchain, which is one of the best free toolchains of all languages, probably precisely because the FSF didn't interfere."
emacs,2v23ww,kingpatzer,1 point,Sat Feb 7 14:17:23 2015 UTC,"Clang is a nice project. However today it isn't ready to fully replace GCC. Maybe for your own use it can, but you aren't the only GCC user in the world."
emacs,2v23ww,twotime,6,Sun Feb 8 23:50:27 2015 UTC,"Not really. I think there's a bad tendency to obsess over features and having more functionality. All things being equal it's good to extend functionality (at least as long as feature creep is in check), but all things aren't equal. Imagine if this were a matter of money, and a project (not necessarily GCC) was deciding whether they had the resources to implement a called-for feature, or whether spending the resources there would harm the project elsewhere. But when it's a strategic decision it's like people can't look past the features to see the ramifications for the project in the future.  So actually I'm impressed that RMS, despite all this pressure, is enforcing a slow and cautious approach to the question of what to do about these recent issues. I worry that the approach might be too slow, and the eventual decision might not actually be the best one for the project, but I don't see anything wrong with his attitude (although I know it makes things frustrating), even if in hindsight some mistakes will have been made."
emacs,2v23ww,username223,4,Sat Feb 7 17:11:33 2015 UTC,"I think RMS screwed up by locking in GCC. That completely prevented the free software community from producing good (or better) C and C++ tools. Even GDB or Emacs couldn't use the frontends. GDB has its own limited parser and Emacs has the slow CEDET mess. It would have been so much better if they could have used the GCC frontends.  That being said, I think RMS also had a point being afraid of proprietary tools stealing the GCC frontends. However proprietary vendors can also afford commercial frontends like EDG.  Now there is clang and I think he's right as seeing it as an attack. But his reaction is wrong. He should realise that locking in the AST was a mistake. His fears of proprietary tools stealing it are no longer valid because those tools will simply use clang. It seems also pointless trying to use Emacs as a weapon in this. Emacs no longer has the status it did in the early 90s.  Overall I'm afraid of how things will turn out. It seems clang is rising in popularity and this puts GCC at risk. Soon we might find ourselves with GCC being left behind and not long after that we'll see clang being left behind proprietary tools built on top of it."
emacs,2v23ww,kcin,2,Sat Feb 7 19:45:25 2015 UTC,Even GDB or Emacs couldn't use the frontends.   A gdb patch went in recently to reuse the GCC C front end.
emacs,2v23ww,abo-abo,1 point,Tue Feb 10 04:54:19 2015 UTC,Awesome! Good to see that things are improving. It's just a bit sad that this didn't happen 10 or 15 years ago.
emacs,2v23ww,kcin,6,Tue Feb 10 07:26:10 2015 UTC,Lately?  This has always been his position. It's the reason there's no external ABI for emacs.
emacs,2v23ww,borodino,5,Sat Feb 7 11:22:27 2015 UTC,"If this behavior continues, I expect to see either a fork of Emacs or people slowly leaving it behind because they find better tools elsewhere."
emacs,2v23ww,trezor2,2,Sat Feb 7 14:13:37 2015 UTC,They are already slowly leaving it behind. The Emacs user curve has been on a long downward trend for many years.
emacs,2v23ww,vermiculus,9,Sat Feb 7 16:26:21 2015 UTC,"Not true. Emacs is experiencing a huge revival thanks to package.el: there are 2300 packages on MELPA.  Compare that to 1700 in eclipse marketplace, around 3000 in visualstudiogallery, and around 800 for sublime.  I guess Emacs decreased in usage 15 years ago when IDEs came in. Right now, I think, Emacs covers all the IDE features that were present in the old IDEs back then.  Of course, IDEs have made some progress in those 15 years. But from a different point of view, they just got fatter, which gives more reason to switch to Emacs."
emacs,2v23ww,abrahamsen,9,Sat Feb 7 17:54:33 2015 UTC,I'm sorry but it is entirely true. I'm not arguing that there aren't lots of packages. There are. I'm arguing that the user base as a percentage of active computer programmers/developers is shrinking.
emacs,2v23ww,vermiculus,4,Sat Feb 7 18:01:04 2015 UTC,"Compare that to 1700 in eclipse marketplace, around 3000 in visual studiogallery, and around 800 for sublime   You know what? This statistics is irrelevant: of course emacs has accumulated a lot of packages over its 30 year history. Most of them are irrelevant, many are overlapping, many are providing functionality which is already there in IDEs... So?  Show me stats for the number of users!"
emacs,2v23ww,gnuvince,2,Sat Feb 7 23:47:44 2015 UTC,"Actually, MELPA makes it easier for people to ignore RMSEmacs, since people can put stuff there without integrating it with Emacs and going through copyright assignment.  Just like I don't have to care about new versions of Clang/GCC, Perl, Python, etc. because most of the advances happen in modules, I don't have to care about new Emacs versions."
emacs,2v23ww,throwaway,2,Sun Feb 8 15:02:38 2015 UTC,"Google Trends does not really show a huge revival: http://www.google.com/trends/explore#q=%2Fm%2F01yp0m  People will switch to emacs if it has comparable language support like the ones big IDEs provide for C++, Java, etc. Refactoring, completion, etc.  The exact things which need a strong, uncrippled compiler backend and a polished fronted on top of it."
emacs,2v23ww,fidelio132,-2,Sat Feb 7 22:17:34 2015 UTC,"One could argue that if we had 1 billion Emacs users right now, there could still be 0 Emacs-related Google searches, since:   there's built-in Info Emacs users could/should prefer DuckDuckGo to Google"
emacs,2v23ww,treerex,0,Sun Feb 8 09:03:35 2015 UTC,"There is info, but you can usually find emacs answers much faster with google, so lot of emacs users use that instead. (It finds word alternatives, word variations, etc.)  The second point of preferring Duckduckgo is not necessarily true either. Not everyone cares that much about privacy, especially not when searching for emacs related stuff which is not of sensitive nature."
emacs,2v23ww,kcin,-5,Sun Feb 8 10:16:16 2015 UTC,"Please cite something, some data, anything to suggest that you're not just pulling shit out of your ass, moron."
emacs,2v23ww,kingpatzer,1 point,Sun Feb 8 05:54:59 2015 UTC,"> is anyone else increasingly disillusioned with RMS attidute lately?  Nothing about this is lately. His attitude had always been an extreme one, but he has usually been willing to consider opposing views if he can understand the logic and need behind them.  What's becoming apparent is that he has no concept of what modern programming languages are like and what needs modern programmers have. He doesn't know C++ or its style of OOP so he can't for instance see why you wouldn't rename a method using just basic search replace, but instead ask for refactoring tools.  He doesn't understand the need. So he won't consider the case as a valid thing GNU/GCC/Emacs should provide.  I think forcing RMS to do a one year java programming gig would provide him with the enlightenment he badly needs. But that's never going to happen, so what can we do instead?"
emacs,2v23ww,bobdudley,-4,Tue Feb 10 06:40:32 2015 UTC,"I don't agree with RMS, but I understand where he's coming from. I spent time in a nuthouse, too. ;)  More seriously, the GNU project's goal is to be separated from all non-GPL software. By incorporating support for non-GPL software, this goal is sullied. It's why we have things like MELPA when the GNU ELPA already exists: MELPA is full of stuff that interacts with non-GPL stuff.  I understand why direct support for LLDB would be distasteful, but it would be good for Emacs stuff to allow for non-GPL support  in a similar fashion that package.el does: create some sort of idealized interface that other packages can easily latch on to (think vc, but less sucky)."
emacs,2v23ww,kingpatzer,7,Sat Feb 7 05:10:24 2015 UTC,"the GNU project's goal is to be separated from all non-GPL software.    No it is not. The goal of the GNU project is to provide fully functional Unix implementation. The goal of the FSF is to promote free software.  lldb is free software, and could with no problems be included in GNU (which is not restricted to GPL'ed software).  However, it is possible that gdb does a better job promoting free software than lldb due to its license, in that case it may run against the goal of the FSF to support lldb in GNU, despite its status as free software.  The sentiment that worries RMS is: ""let's replace all GPL'ed software with BSD licensed software, so we can build non-free software on top of it.""  I can understand it, but believe it is too abstract a reason to stop supporting free software over."
emacs,2v23ww,borodino,1 point,Sat Feb 7 10:28:27 2015 UTC,"My mistake – most of what I said was mere speculation, at any rate :) I neglected to look up LLDB's license.   The sentiment that worries RMS is: ""let's replace all GPL'ed software with BSD licensed software, so we can build non-free software on top of it.""   I see this as a pretty good reason for RMS to be concerned, actually. But in reality, while LLDB is under BSD, the rest of gud is GPL (or whatever), so you still wouldn't be able to build non-free software on top."
emacs,2v23ww,J_M_B,9,Sat Feb 7 15:27:30 2015 UTC,"I really, really wish that RMS would step aside completely from those decisions and let Stefan handle them.  Stefan understands and promotes the ideals of the FSF and the GNU project, but also understands that creating an isolated garden of GNU tools will just contribute to drive people away from using Emacs."
emacs,2v23ww,UltimateShipThe2nd,18,Sat Feb 7 14:09:15 2015 UTC,"FWIW, It looks like Monnier told RMS to go pound sand."
emacs,2v23ww,J_M_B,3,Sat Feb 7 15:49:10 2015 UTC,"Stefan is awesome, now if the rest of the Emacs community followed suit and told Stallman where he can go, everytime he throws one of his tantrums, these sort of issues would be solved."
emacs,2v23ww,UltimateShipThe2nd,2,Sat Feb 7 20:00:15 2015 UTC,"The issue is whether or not the LLDB extensions to gud.el are merged into the original, right? If RMS doesn't want this, fine. LLDB can continue to distribute its patched version and those that want it can go through the process of integrating it themselves. In the long run this added complexity will just hurt Emacs."
emacs,2v23ww,J_M_B,2,Sat Feb 7 15:46:13 2015 UTC,Siege mentality
emacs,2v23ww,UltimateShipThe2nd,-6,Sat Feb 7 07:36:51 2015 UTC,RMS has completely lost it.   He is arguing that GNU software should refuse GPL'ed code on the basis that such code might play nice with non-GPL software or systems.   I frankly have lost all respect for the man. I'm about ready to move to BSD to be free of his craptastic perspective that personal politics and momentary passions should trump functioning software for the user.    The only thing keeping me tied to GNU is emacs -- and he's now starting to mess with that at the level of debugger support.   He seems intent on making himself and his entire life's work irrelevant.
emacs,2v23ww,techrush,10,Sat Feb 7 07:00:43 2015 UTC,"The commercial world makes much more deleterious decisions as a matter of course, calling it business strategy, so if this is what it takes to lose your respect (worth what, exactly?) then you must not respect many people."
emacs,2v23ww,J_M_B,3,Sat Feb 7 07:39:54 2015 UTC,"At issue isn't if the decision is harmful, thought I would argue that it is. At issue is that it is contrary to the very philosophy that RMS insists drives his decisions -- which is that people should have the liberty to use their software the way that they want.   I have more respect for consistency. I dislike the hypocrite even when they are useful in some general sense."
emacs,2v23ww,J_M_B,2,Sat Feb 7 12:42:01 2015 UTC,"which is that people should have the liberty to use their software the way that they want.    I don't really see that this is a conflict - they do have this important freedom, because he has been consistent in licensing gcc to guarantee it. But this freedom is a different thing to requiring that the developers of gcc accept any patch in particular, nothing he is doing prevents people exercising their rights."
emacs,2v23ww,fidelio132,-5,Sat Feb 7 14:26:51 2015 UTC,"You have no understanding whatsoever about what free software is about, idiot."
emacs,2v23ww,the-fritz,2,Sun Feb 8 05:58:13 2015 UTC,"I don't even understand the debate, Clang and LLDB both have a very permissive BSD-style license. I don't know how you can get more free than the three-clause University of Illinois/NCSA Open Source License.   I've never understood why Stallman considers a more permissive license like BSD less free than his GNU license. When I asked him about this during one of his lectures, it seemed like a lot of hand waiving. Truly free software IMHO is only free if anything anyone wants to do with it can be done ala BSD (edit:  and MIT) licenses. Pure communist societies are anything but free; they are lead by dear leaders and one of their defining characteristics is that nobody should be able to make a profit. That's not freedom.   I am eternally grateful for everything Stallman has done and I hate to say a disparaging thing about him. His contributions to software, both in terms of getting people to think about proprietary vs free (as in Freedom) and actual code are invaluable. I personally use very limited non-free tool chains only when I absolutely have to. We can't all be life-time MIT fellows with an office right next to Sussman, but thank GNU there IS someone who has chosen the life of a software hermit."
emacs,2v23ww,J_M_B,9,Sat Feb 7 16:46:46 2015 UTC,"I don't know how you can get more free than the three-clause University of Illinois/NCSA Open Source License.    Because the ""freedom"" offered by those licenses is not guaranteed. With a BSD license, a company can take the software, improve it, and do whatever with it without being obligated to contribute their improvements to the public. With the GPL, they must give their improvements to the public. One guarantees future freedom, the other does not."
emacs,2v23ww,viccuad,3,Sat Feb 7 23:36:55 2015 UTC,Freedom is absolutely guaranteed for the software that is released using a permissive license. A license which restricts the course of action by an individual is by definition less free. This is the irony of the GPL license.
emacs,2v23ww,J_M_B,9,Sun Feb 8 01:30:35 2015 UTC,"That's BS. It's basically saying that, because you're not free to steal, you're not free period."
emacs,2v23ww,viccuad,-1,Sun Feb 8 02:19:56 2015 UTC,You're the one doing mental gymnastics by saying that something that is given away for free can be stolen.
emacs,2v23ww,harlows_monkeys,9,Sun Feb 8 02:40:45 2015 UTC,It certainly can. Free software is a sort of communal resource. The GPL is a regulation on it to prevent someone from fencing it off.
emacs,2v23ww,viccuad,6,Sun Feb 8 03:34:09 2015 UTC,"You don't have a very deep understanding of ""Pure communists"". Or communism in general I would say."
emacs,2v23ww,eatmynasty,-5,Sat Feb 7 23:30:45 2015 UTC,"True, I don't have a very deep understanding of pure, philosophical communism.. only an observation of practical, real-world communism."
emacs,2v23ww,fidelio132,1 point,Sun Feb 8 01:04:20 2015 UTC,"I will quote directly from the top comment on slashdot on this issue ""Ain't freedom a bitch... especially when someone acts freely and in a way you object to."""
emacs,2v23ww,viccuad,3,Sun Feb 8 23:22:52 2015 UTC,"Stallman is a fanatic, he doesn't care about technicalities.  He is perfectly willing to use and sacrifice a project (Emacs, GCC) for political leverage in order to shove his ideology down everybody's throat. Stefan Monnier (current Emacs maintainer) seems to have a firm grasp of reality and told Stallman where he can go: https://lists.gnu.org/archive/html/emacs-devel/2015-02/msg00448.html  I say good riddance to the troglodyte."
emacs,2v23ww,bjh13,1 point,Mon Feb 9 03:15:52 2015 UTC,That's an age old debate. The problem is that permissive licenses allows others to take away those freedoms. This is especially critical for major components like kernels or compilers. A proprietary vendor can simply base its products on top of them without contributing back. Giving them an edge over the free (as in freedom) product.
emacs,2v23ww,J_M_B,1 point,Sat Feb 7 19:28:42 2015 UTC,"Are there any examples of a permissively licensed project being pushed out by a proprietary version that was so much better and cheaper? The contrary seems to be the norm: companies end up releasing their code bases as open source projects after years of proprietary development. Even Microsoft has released their CoreCLR product under a MIT license! If a free project ended up being stalled for years because a proprietary version was so effective and cheap that it pushed out the free version, people could still fork the old free project and start working on updating its features."
emacs,2v23ww,fidelio132,4,Sat Feb 7 20:06:50 2015 UTC,"examples? MacOSX instead of BSD is good enough?  Look at this comment in this same thread, I think it says all of this perfectly. https://www.reddit.com/r/emacs/comments/2v23ww/rms_on_inclusion_of_basic_lldb_suuport_for_gudel/coe3g6s"
emacs,2v23ww,asthasr,1 point,Sat Feb 7 20:26:10 2015 UTC,"|examples? MacOSX instead of BSD is good enough?  FreeBSD and OpenBSD were never pushed out of the market and still have thriving communities. Indeed, the OpenBSD Foundation raised $397,000 of its $150,000 goal last year."
emacs,2v23ww,fidelio132,0,Sat Feb 7 22:03:23 2015 UTC,MacOSX has pushed BSD out of the market share MacOSX has.
emacs,2v23ww,kingpatzer,6,Sat Feb 7 22:37:30 2015 UTC,"That seems very unlikely. If MacOSX did not exist, almost all its users would be on Windows, not on a BSD. The small fraction not on Windows would mostly be on Linux."
emacs,2v23ww,fidelio132,-1,Sat Feb 7 22:46:35 2015 UTC,"If MacOSX were just BSD, all of MacOSX users would be BSD users."
emacs,2v2rgo,z27,7,Sat Feb 7 08:31:28 2015 UTC,"I find the code and the ergonomics simply delightful. Finally the ""zap to char"" idea makes sense to me. One of those things that makes one happy to be a Emacs user. Thank you."
emacs,2v2rgo,bcarrell,3,Sat Feb 7 08:32:26 2015 UTC,Thank you for sharing this package.
emacs,2v2rgo,tzz,3,Sat Feb 7 09:05:20 2015 UTC,What does this do differently?
emacs,2v2rgo,Lompik1,1 point,Sat Feb 7 11:23:05 2015 UTC,"Yeah, from the README and the code it's unclear what this does."
emacs,2v2rgo,bliow,2,Sat Feb 7 14:22:27 2015 UTC,"'zap-to-char' -> kills until the character you type   'zop-to-char' provides the interactive following options (as a replacement to just killing text): ""   [RET/C-k:kill, C-c:copy, C-f/right:next, C-b/left:prec, C-g:abort, C-q:quit, DEL:erase]""  It first creates a selection.You can then expand/collapse using c-f/c-b and alternatively copy or kill."
emacs,2v2rgo,tuhdo,1 point,Sat Feb 7 15:13:34 2015 UTC,"That's no different, and less general, than using isearch-forward for a single character."
emacs,2v2rgo,vifon,2,Sat Feb 7 19:13:05 2015 UTC,"You can say the same thing for zap-to-char.  The difference between this and using Isearch is that:   You don't have to execute two commands: set-mark-command and isearch-forward, but just one instead: zop-to-char. Default is RET for killing text. That's less to press than C-w, as it is designed for killing text rather than navigating."
emacs,2v2rgo,redmorph,3,Sat Feb 7 19:26:40 2015 UTC,"You don't have to execute two commands: set-mark-command and isearch-forward, but just one instead: zop-to-char.   Actually isearch sets mark automatically at the starting point."
emacs,2v1r5p,vermiculus,6,Sat Feb 7 01:29:41 2015 UTC,"I saw an announcement for another project and wondered to myself ""Has this been done yet?"" Well, now it has.  Work is continuing, but the client is at a very usable stage. You can browse / ask / answer questions as well as vote and comment, all without leaving Emacs!"
emacs,2v1r5p,xuchunyang,7,Sat Feb 7 01:31:33 2015 UTC,"Hi vermiculus, SX has been on MELPA since last year, you might want to update the installation section of README.md."
emacs,2v1r5p,xuchunyang,3,Sat Feb 7 02:43:33 2015 UTC,"Oh, shoot!! Nice catch!"
emacs,2v1r5p,lykwydchykyn,5,Sat Feb 7 02:55:48 2015 UTC,"you also need remove   Eventually, this package will be available on MELPA.   in README.md"
emacs,2v1r5p,BruceConnor,2,Sat Feb 7 03:06:45 2015 UTC,Fixed. Thanks again!
emacs,2v1r5p,BruceConnor,3,Sat Feb 7 03:09:03 2015 UTC,This is super!  Now all it needs is a function to copy-pasta the accepted answer into my code. ;-) (kidding... kidding...)
emacs,2v1r5p,purcell,5,Sat Feb 7 04:46:48 2015 UTC,"If point is on the code block, you can just hit w to copy it."
emacs,2v1r5p,oantolin,3,Sat Feb 7 06:23:44 2015 UTC,"Already done ;) Well, to some extent. The code is a sort of button, so you can click it (or just RET inside) and then C-x h M-w to copy that content. :)"
emacs,2uz4yk,dzecniv,4,Fri Feb 6 11:30:30 2015 UTC,"Some months ago, this question was asked on SO ( http://stackoverflow.com/questions/20041498/where-to-find-emacs-helm-documentation/28193201 ) and there were no good answer. At last, we have such a tutorial thanks to John Kitchin: http://kitchingroup.cheme.cmu.edu/blog/2015/01/24/Anatomy-of-a-helm-source/"
emacs,2uz4yk,VanLaser,2,Fri Feb 6 11:32:14 2015 UTC,"I just wish threads like this had like > 100 comments, from which I would have picked up some useful elisp."
emacs,2uzzav,tinker12345,5,Fri Feb 6 16:51:07 2015 UTC,"If you use emacsclient, you can use my pmacs (""Pipe to eMACS"") script: https://github.com/tom-seddon/bin/blob/master/pmacs.py - and for ""documentation"", see the readme: https://github.com/tom-seddon/bin#pmacs  The script buffers up stdin, saves it to disk, prods emacs into loading the file, adjusts the buffer (so you'd never know it was from a file originally), then deletes the temp file.  Some self-assembly may be required if you're on Windows and Mac OS X; it's got hard-coded (but sensible) paths to emacsclient, since you can't assume it's on PATH. But if you're on Linux you should be good to go immediately."
emacs,2uzzav,to3m,4,Fri Feb 6 18:28:34 2015 UTC,"You can run the command from eshell and redirect to a buffer, like so:   $ ./some_script > #<buffer myoutput>"
emacs,2uzzav,tincholio,2,Fri Feb 6 19:26:22 2015 UTC,What about:  some_script some_arg > foo; emacsclient foo; rm foo   ?
emacs,2uzzav,alecigne,1 point,Sat Feb 7 01:28:39 2015 UTC,"M-x shell-command (M-!) can be used to run the command, and the output will appear in the Shell Command Output buffer."
emacs,2uzzav,typedweb,1 point,Wed Feb 11 20:58:17 2015 UTC,"You probably want to use --eval or --execute option. With those you can't use the pipe, you'll have to do something like this   emacs --eval ""$(~jsmith/bin/some_script  some_arg)""   The result of your script must be a valid elisp s-expression that can be evaluated by emacs's interpreter."
emacs,2uzj6l,nieuweyork,4,Fri Feb 6 14:34:56 2015 UTC,"I do not know about Aquamacs, but with regular Emacs you can just type C-h k and then click a menu item of your choice to find out which function it is bound to."
emacs,2uzj6l,rerx,4,Fri Feb 6 15:24:03 2015 UTC,"Amazing, thank you! This is perfect."
emacs,2uyi5g,Synthstutter,4,Fri Feb 6 05:42:43 2015 UTC,"C-i and Tab are the very same thing, at least for the terminal. It may be possible to override it in GUI Emacs but I don't know if it's possible.  EDIT: I've just checked if that's possible. Probably yes but not trivially. C-i is represented as ""TAB"" and Tab is represented as ""<tab>"". When I disable yas-mode I am able to bind two separate commands to them  (global-set-key (kbd ""TAB"") #'(lambda () (interactive) (insert ""a""))) (global-set-key (kbd ""<tab>"") #'(lambda () (interactive) (insert ""b"")))   but with modes like yas-mode or org-mode which bind some kind of dispatchers to Tab it seems to be more difficult (both keys insert ""a"" in the example above).  Like I've said before, even this is only possible in the GUI Emacs."
emacs,2uyi5g,vifon,3,Fri Feb 6 08:42:41 2015 UTC,"I've had endless problems with this. yas does some weird voodoo with the tab key to make it usable for both expansion and normal indentation.  You could start with something like  (define-key yas-minor-mode-map (kbd ""C-i"") nil) (define-key yas-minor-mode-map (kbd ""TAB"") nil) (define-key yas-minor-mode-map (kbd ""<tab>"") nil)   inside python-mode-hook to clear any existing tab bindings in yas minor mode.  Next recreate the bindings you want in python-mode with something like:  ;; actual tab key (define-key python-mode-map (kbd ""<tab>"") #'yas-expand)  ;; C-i key (but not affecting tab) (define-key python-mode-map (kbd ""C-i"") #'indent-for-tab-command)   (this doesn't need to go in a hook).  Finally if you want to stop yas-expand indenting when there is no snippet to expand then look at the yas-fallback-behaviour variable. You can set it temporarily for a single keypress with a let expression, something like:  (defun yas-expand-no-indent ()   (interactive)   (let ((yas-fallback-behavior nil))     (yas-expand)))   I've not tested the code in this post much so let me know if it goes wrong.  As noted by @vifon this will only work in GUI emacs, in terminals C-i is hard coded to tab at the ascii level (which really sucks if you're using the colemak layout where i is on the home row and would be useful to have for more common things)."
emacs,2uyi5g,sledgespread,2,Fri Feb 6 10:44:46 2015 UTC,"There's another way. It's a way that is long and dark and full of terror, but it's possible.  If you wish to go down the rabbit hole... I'll explain the outline of what you would do. Terminals read escape sequences in a certain way. If you're finding that the arrow keys (for example) are triggering forced escapes in vim because your terminal doesn't support arrow keys correctly, you can modify the terminfo file to correct this and then use tic to generate a new one and use that for your terminal instead. This is the lowest possible level of rewiring how your terminal interprets character codes. This is how to encode a ""backtab"" command into the terminal where none exists. I'd probably start here for modifying your ""tab"" to be a sequence other than ctrl-i.  The second solution (and perhaps the much easier one) would be to modify inputrc. It can do some pretty awesome and hacky stuff, so you may be able to make that work in a way that will fix C-i. This is the second lowest level in the system for keybinds."
emacs,2uyi5g,thang1thang2,2,Fri Feb 6 12:02:13 2015 UTC,"Hmm, that's slightly less scary than last time I asked about this: the only suggestion then was to modify the source of my terminal to do something else with C-i.  Some day, when I have some spare time, I'll have a dig and see what's possible with terminfo. Thanks."
emacs,2uyi5g,sledgespread,2,Fri Feb 6 15:08:12 2015 UTC,"the only suggestion then was to modify the source of my terminal   That's pretty much what terminfo does. All compliant terminals communicate all their keybinding information through it. For example, I modified my terminfo to recognize italic fonts by adding the correct escape codes for italics so that they wouldn't show up as inverted color but rather as slanted. With a nice italic capable monoline font, I was able to set up all my comments in vim to automatically be italicized. Very nice looking."
emacs,2uyi5g,thang1thang2,2,Fri Feb 6 15:17:52 2015 UTC,worked! I don't use emacs in a terminal so I'm okay for now. Thank you so much.
emacs,2uyi5g,sledgespread,1 point,Fri Feb 6 16:03:46 2015 UTC,Glad I could help :)
emacs,2uw9i5,zk_phi,3,Thu Feb 5 18:28:59 2015 UTC,Have you seen the base16 color schemes? It basically takes the same approach by repurposing any 16 colors to a color scheme. I actually think that solar used is one of them.
emacs,2uw9i5,milkypostman,3,Fri Feb 6 06:33:02 2015 UTC,"Okay, so here's a fun fact.. This works on Ubuntu, and it does not work on OSX."
emacs,2uw9i5,Trevoke,1 point,Fri Feb 6 21:53:51 2015 UTC,That's sweet. It'll get you support for a lot of packages you might not use yourself.  I'm going to try and see if I can port my theme to it.
emacs,2uw9i5,aerique,1 point,Fri Feb 6 00:12:53 2015 UTC,"So that's nice, but specifically what package is this? solarized-theme ? color-theme-solarized ? color-theme-sanityinc-solarized ?"
emacs,2uw9i5,Trevoke,1 point,Fri Feb 6 00:56:17 2015 UTC,"oops, sorry, it requires solarized-definitions.el in color-theme-solarized package."
emacs,2uw9i5,Trevoke,1 point,Fri Feb 6 02:46:51 2015 UTC,"Okay, got that to work, now .. I evaluate the sexp with create-solarized-based-theme solarized-jellybeans (etc)   And I get some output (lots of escape characters and at the end something like [solarized-bold solarized-underline solarized-italic italic opt-under underline bold normal t nil ...] 265], 1, but I don't get a new theme in my list of themes that I can use.  needless to say, I'm sad. Help, please.  here's a lot of the output from ielm:  https://gist.github.com/Trevoke/b384d09eb7ec2836a553"
emacs,2uw9i5,Trevoke,1 point,Fri Feb 6 21:01:27 2015 UTC,"ow, it seems that function solarized-color-definitions is changed to take no arguments..."
emacs,2uw9i5,Trevoke,1 point,Sat Feb 7 05:47:09 2015 UTC,"Yes, but if I remove the mode from the call, when I try to generate a color theme, I get:  list: Wrong type argument: listp, cursor"
emacs,2uv4wa,projectmoon,2,Thu Feb 5 12:17:54 2015 UTC,You may have some luck sifting through the source code for eww -- Emacs's Web Browser -- and see if you can't find a function or two that converts html into text properties.
emacs,2uv4wa,mickeyp,4,Thu Feb 5 13:26:47 2015 UTC,That would probably be shr-render-region.
emacs,2uv4wa,hvis,3,Thu Feb 5 22:57:04 2015 UTC,"That would be it indeed. Write some text in fundamental mode or text mode and call this on the region and you get HTML output. It's definitely where to begin, at least..."
emacs,2uv4wa,workisnotfun,1 point,Fri Feb 6 00:13:10 2015 UTC,Try impatient-mode. This serves your html file as you are editting it so that you see changes instantly on the browser. youtube video of it in action.
emacs,2uupbi,iqbalansari,5,Thu Feb 5 07:57:48 2015 UTC,"This package is great. The popup is not broken even if current window does not have enough space for it. Instead, it floats above all windows.  One minor issue is that when we move to next candidate, the old popup closes and a new one is opened, make it a little annoying to look at. Is it possible to reuse the old popup but resize instead?"
emacs,2uupbi,tuhdo,1 point,Thu Feb 5 14:02:41 2015 UTC,"Shouldn't be too hard to implement: post-command handler would see if the popup is already displayed, and if so call company-quickhelp--show instead of setting the timer."
emacs,2uupbi,hvis,1 point,Thu Feb 5 22:58:48 2015 UTC,"However, some throttling in there would be better. For instance, if the user floored M-n, we don't want to show the doc for every completion that flies by."
emacs,2uupbi,hvis,2,Thu Feb 5 23:00:09 2015 UTC,Which languages are supported?
emacs,2uupbi,fmargaine,5,Thu Feb 5 11:12:15 2015 UTC,"Judging by the sources it's taking the buffer content of what would pop up if you hit F1 while completing. So, everything already supporting documentation buffers will work."
emacs,2uu3wc,tuhdo,10,Thu Feb 5 04:02:46 2015 UTC,"Author here - I made this because I'm always taking notes from the web - this watches the system clipboard and inserts the text at the current location when it changes.   Then tuhdo suggested adding the ability to put the text on the kill-ring also (thanks! - https://github.com/bburns/clipmon/issues/2), effectively making it a clipboard manager - you can use browse-kill-ring or helm-kill-ring as a package for viewing/managing the kill-ring.   I need to rework it a bit though - I'd like to be able to leave it on as a clipboard manager and also turn the clipboard monitor on and off (ie for inserting text). I'll post those changes in the next day or two.   I'd also been looking into a way to persist the kill ring and it looks like savehist would work most easily -   (add-to-list 'savehist-additional-variables 'kill-ring) (setq savehist-autosave-interval (* 5 60)) ; autosave every 5 mins (savehist-mode 1)   though it would be nicer on the user to have a function like  (persist 'kill-ring ""5 mins"")   I guess I could make one like this though -   (clipmon-persist ""5 mins"")   or maybe there is a more canonical way of doing this?"
emacs,2uu3wc,bbkm,2,Thu Feb 5 10:48:26 2015 UTC,"Thank you, is a great feature. Could it replace completely kill-ring? I am still a bit confused on how work with the two copy-and-paste buffer on Linux."
emacs,2uu3wc,magullo,4,Thu Feb 5 12:22:06 2015 UTC,"Well the OS has a clipboard, and Emacs has a kill-ring, and at some point relatively recently, they were able to get them working together - I remember having trouble with it when I first tried Emacs several years ago. It works great now though.   When you copy something to the system clipboard, say from Firefox, it doesn't get added to Emacs's kill-ring, but if you do the yank command, I think it checks the system clipboard to see if there's something on it, and pastes that. But I haven't delved into the inner workings very much.   So clipmon just monitors the system clipboard when you turn it on, and it can insert that text at the current location and/or add it to the kill-ring when it notices a change. Then you can browse the kill-ring with browse-kill-ring. But if you copy or cut something in Emacs, clipmon doesn't know about it.   I should probably explain this a bit more in the readme/commentary, as it is a bit confusing with the two clipboard systems."
emacs,2uu3wc,bbkm,1 point,Thu Feb 5 22:33:03 2015 UTC,"This is great. Will clipmon start working again after the timeout if the user is active again?  I'm not sure about the best way to do it, but I think a way to persist the clipboard history to a temp file (without having to make the savehist-file a temp file) would be nice. I'd prefer to not have any copied passwords and such being written to disk."
emacs,2uu3wc,angelic_sedition,1 point,Thu Feb 5 17:10:32 2015 UTC,"No, it won't - the timeout is so if you're using clipmon, then go away from your computer, or forget what you were doing, you won't start adding text to Emacs accidentally by using the system clipboard for other things. That seems to happen to me a lot, anyway! You can always disable the timeout by setting clipmon-timeout to nil though.   If you wanted to persist the clipboard history, but you had been copying passwords, you could scan through it with browse-kill-ring and delete any passwords in it. Otherwise you can just leave the persistence off - it would be a feature you would have to turn on explicitly."
emacs,2uu3wc,bbkm,1 point,Thu Feb 5 22:45:31 2015 UTC,"This looks very useful, and it seems like a very good idea. I'll give it a test run and see how it fares."
emacs,2uu3wc,Oulipopo,1 point,Thu Feb 5 11:57:36 2015 UTC,It would be helpful while taking notes to have an option to append the clips.
emacs,2utkem,jordonbiondo,2,Thu Feb 5 01:19:28 2015 UTC,"I made this mostly as a proof of concept and it seems to work nicely.   I've learned that setting up a menu bar item in osx is very easy and I would like to expand on this to allow customizations for any use, not just org-clock.   I was thinking it would be nice to have a notification icon that shows how many unseen jabber or irc messages have come in, it could have a submenu with actions like ""new conversation"" or ""mark all as read"". It'll be fun to mess around with."
emacs,2utkem,pxpxy,1 point,Thu Feb 5 01:28:14 2015 UTC,"I've been wanting that exact jabber thing for a while now! Please do that :D I might even be able to help out a bit, I'm fairly proficient with objective C"
emacs,2utkem,javjar,2,Thu Feb 5 03:27:42 2015 UTC,"This is awesome stuff, kudos!"
emacs,2utkem,__notmythrowaway__,2,Thu Feb 5 05:19:27 2015 UTC,Now this is cool.
emacs,2utkem,Veson,2,Thu Feb 5 10:52:11 2015 UTC,"hey, I made this for pretty much the same reason: https://github.com/koddo/org-clock-statusbar-app  now we have some variety"
emacs,2utkem,Veson,1 point,Thu Feb 5 14:06:48 2015 UTC,I wish I would have found that before I made mine! That looks very nice!
emacs,2utkem,Veson,2,Thu Feb 5 14:24:45 2015 UTC,Thanks! I didn't know you can do that using MacRuby. I added a link to your project in my readme.
emacs,2utvf1,benfitzg,2,Thu Feb 5 02:49:57 2015 UTC,Absrtract display should be right down your alley for updating the buffer from process sentinel.  Maybe straight-up tabulated-list.el which is the only built-in package in 24.4 which utilizes ewoc.el.
emacs,2utvf1,myeffort,1 point,Thu Feb 5 04:41:50 2015 UTC,Thanks for the abstract display link. I'll read all that section. Looks useful.
emacs,2utvf1,RobThorpe,2,Thu Feb 5 13:29:36 2015 UTC,"Have a look at table.el, especially table-capture. You could convert your data to comma-separated-values then get table-capture to make an actual table from it.  You could also use the functions there to update particular cells, as you say. The org-mode-tables are in org-table.el, the same things can be done with that, and more.  It's probably faster not to regenerate the whole table every time though.  As ""myeffort"" says, tabulated-list.el could be used.  It's the library used to display buffer-lists in Emacs. Or, you could use ewoc.el directly."
emacs,2upcno,baohaojun,2,Wed Feb 4 01:17:56 2015 UTC,"How does it compare to skeleton-complete? I mean, why should I switch if I already use sc?"
emacs,2upcno,vifon,1 point,Wed Feb 4 10:08:20 2015 UTC,"I just renamed it so as to avoid confusion with skeleton.el. You don't need to switch now, because the code is completely the same except the rename. But, switching now is also very easy, because of the same reason."
emacs,2upcno,RobThorpe,1 point,Thu Feb 5 14:35:20 2015 UTC,It would be very nice to have this inside dabbrev rather than in a separate package associated with a different key.
emacs,2upcno,Boojum,3,Wed Feb 4 15:17:53 2015 UTC,"Agreed, except that I was thinking of hippie-expand.  This seems like it could have easily been written as a new try-expand-... function to be slotted into the hippie-expand framework.  He cites having to type ""this-is-"" without skipping anything from the start as a limitation of try-expand-dabbrev, but that's not a limitation of the framework as a whole, only a convention.  A try-expand-... function could just as easily choose to completely replace whatever is before point with something else."
emacs,2upcno,RobThorpe,1 point,Wed Feb 4 20:39:28 2015 UTC,"I see what you mean.  I use pure dabbrev more than hippie-expand.  Here's why....  Lets say you have a sentence in a doc ""Fix the flamuzzle, try bliffing"". You want to write ""Fix the flamuzzle, try feefing"" too. You could use kill & yank. Another way, which I often use is to type ""Fi"" then M-/ SPC M-/ SPC M-/, M-/ SPC. That will write in ""Fix the flamuzzle, try"". This is a dabbrev feature that's not present in hippie-expand.  I find this behaviour very useful in text modes, but in programming modes the extra information present with hippie-expand is more useful.  Perhaps the best design would be to put ""Bit Bang Completion"" into dabbrev-expand, but not into try-expand-dabbrev. For hippie-expands purposes it could be in a separate try-expand-something."
emacs,2upcno,RobThorpe,1 point,Wed Feb 4 23:12:24 2015 UTC,"I'm afraid it won't be easy for me to integrate them. I have found hippie-expand less and less used after I start bbyac. Especially so given bbyac has several modes of completion, and they are best told apart using separate shortcut keys. Hippie-expand's M-/ is a bit like C-y, where you may need type M-y several more times if you want to type an old yank: that's why I really like browse-key-ring:-)"
emacs,2up0h3,angelic_sedition,6,Tue Feb 3 23:40:12 2015 UTC,I don't know if this will interest anyone here (it might interest anyone who has used vim and unite before). I kind of missed being able to hit escape and then use vim keybindings to navigate/mark candidates. I was glad to find hydra the other day which makes doing this a lot prettier.
emacs,2up0h3,quartz2,2,Tue Feb 3 23:43:59 2015 UTC,Mind blown :O
emacs,2up0h3,hirnbrot,4,Thu Feb 5 23:31:05 2015 UTC,"I'm way more excited for Hydra than I should be, and I look forward to other packages making use of it."
emacs,2up0h3,Starlight100,4,Wed Feb 4 13:28:16 2015 UTC,"Too excited?  Hydra gives the ability to create domain specific ""vims"" everywhere that are tailored to task better than general vim editor bindings. This is a turning point in the editor wars."
emacs,2up0h3,ReneFroger,6,Thu Feb 5 03:08:47 2015 UTC,"Just for the record, vim has had a plugin for ""submodes"" (this same functionality) since 2008. The name isn't nearly as cool though, and it's not like you can use it for nearly as much stuff as you can with emacs. Emacs can be more vimmy than a lot of software that claims to be designed with vim bindings in mind."
emacs,2up0h3,syl20bnr,3,Thu Feb 5 03:23:29 2015 UTC,"Awesome, thanks for sharing it! The ""normal"" mode for go down with j/k was the only thing that I missed yet in Helm, next to the ability to revert the order of relevant results."
emacs,2up0h3,abo-abo,3,Wed Feb 4 22:10:29 2015 UTC,"Thank you for sharing!! I adapted it to spacemacs with some tweaks.  Entering the micro-state is done with TAB, r is used to go the action page and exit automatically from the state so the user can right away narrow down the action candidate list. Pressing TAB again will turn-off the state (actually any key that is not bound to the temporary map). Also while in micro-state the color of the header changes to indicate that the micro-state is on.  It is implemented with raw emacs temporary overlay map (transient map) and I don't find the code more complicated than the Hydra variant especially with the additional features. The downside is that there is no inline documentation (it is only in the spacemacs documentation markdown file).  Code is here: https://github.com/syl20bnr/spacemacs/blob/develop/spacemacs/packages.el#L1206-1246"
emacs,2up0h3,syl20bnr,1 point,Thu Feb 5 04:25:36 2015 UTC,Are there any additional features not possible with hydra besides the color change (which is kind of made up for by the echo)?
emacs,2up0h3,Starlight100,3,Thu Feb 5 16:03:00 2015 UTC,"The following is now possible:      (defun hydra-vi/pre ()       (set-cursor-color ""#e52b50""))      (defun hydra-vi/post ()       (set-cursor-color ""#ffffff""))      (global-set-key      (kbd ""C-z"")      (defhydra hydra-vi          (:pre hydra-vi/pre           :post hydra-vi/post           :color amaranth)        ""vi""        (""l"" forward-char)        (""h"" backward-char)        (""j"" next-line)        (""k"" previous-line)        (""m"" set-mark-command ""mark"")        (""a"" move-beginning-of-line ""beg"")        (""e"" move-end-of-line ""end"")        (""d"" delete-region ""del"" :color blue)        (""y"" kill-ring-save ""yank"" :color blue)        (""q"" nil ""quit"")))"
emacs,2up0h3,ReneFroger,2,Thu Feb 5 18:32:17 2015 UTC,Awesome! I love the amaranth idea as well.
emacs,2up0h3,ReneFroger,1 point,Thu Feb 5 19:38:57 2015 UTC,"I was not talking about additional feature but what I made different than your implementation. I'm sure you can do everything with hydra.el. I will make my own macro for spacemacs because although the mythological theme is fun for the readme, it is a lot less fun in code where nobody understand what an hydra is (and it becomes worth now with colorful heads and matrix cross-over ^_^ I'm happy that not all the elisp coders do the same)."
emacs,2up0h3,ReneFroger,2,Thu Feb 5 18:01:27 2015 UTC,"A downside could be that it now takes two escapes to get out of helm.   You can get out of helm with 1 escape using #'helm-keyboard-quit.  Here is a modified version of your hyrda:  (defhydra helm-like-unite ()   ""vim movement""   (""?"" helm-help ""help"")   (""<escape>"" keyboard-escape-quit ""exit"")   (""<SPC>"" helm-toggle-visible-mark ""mark"")   (""a"" helm-toggle-all-marks ""(un)mark all"")   (""/"" (lambda ()          (interactive)          (execute-kbd-macro [?\C-s]))    ""search"")   (""v"" helm-execute-persistent-action)   (""g"" helm-beginning-of-buffer ""top"")   (""G"" helm-end-of-buffer ""bottom"")   (""j"" helm-next-line ""down"")   (""k"" helm-previous-line ""up"")   (""q"" helm-keyboard-quit) ;***** Exit helm in 1 step *****   (""i"" nil ""cancel""))"
emacs,2up0h3,ReneFroger,1 point,Thu Feb 5 03:24:16 2015 UTC,"It takes two escapes only because I bound it to enter with escape, so once you're in the hydra, it will only take one escape already. I had escape bound to helm-keyboard-quit previously, but I don't think it makes a difference since they both work for me.  I updated the post to make it more clear."
emacs,2up0h3,ReneFroger,1 point,Thu Feb 5 03:27:03 2015 UTC,"I like it, but I wonder if it would be possible to have hand l for switching between the Helm sources in helm-files.   And is there a way to use the keychord jk to quit insert mode in helm, to go the Hydra, like <escape> does?"
emacs,2uo087,Imxset21,7,Tue Feb 3 19:13:56 2015 UTC,"aren't packages on GNU elpa signed? I'm pretty sure everything is supported for signed packages. I was under the impression that the problem was that MELPA doesn't have any security on their packages and by that I mean, no signing, and the fact that anything pushed to GH can go straight out to users."
emacs,2uo087,jordonbiondo,3,Tue Feb 3 21:07:07 2015 UTC,"So actually yes, as it turns out, most of GNU Elpa is signed, and the support is there. There is an actual open issue for GPG support, but nobody has done anything about it, it seems..."
emacs,2uo087,hvis,3,Tue Feb 3 22:44:10 2015 UTC,"So supposedly GPG signed packages are a thing:   The maintainers of package archives can increase the trust that you can have in their packages by signing them. They generate a private/public pair of cryptographic keys, and use the private key to create a signature file for each package. With the public key, you can use the signature files to verify who created the package, and that it has not been modified. A valid signature is not a cast-iron guarantee that a package is not malicious, so you should still exercise caution. Package archives should provide instructions on how you can obtain their public key. One way is to download the key from a server such as http://pgp.mit.edu/. Use M-x package-import-keyring to import the key into Emacs. Emacs stores package keys in the gnupg subdirectory of package-user-dir. The public key for the GNU package archive is distributed with Emacs, in the etc/package-keyring.gpg. Emacs uses it automatically.  If the user option package-check-signature is non-nil, Emacs attempts to verify signatures when you install packages. If the option has the value allow-unsigned, you can still install a package that is not signed. If you use some archives that do not sign their packages, you can add them to the list package-unsigned-archives.   But a quick run-through of my installed packages shows that nearly none of the are signed. Is this something we can just ask the creators to do?"
emacs,2uo087,BruceConnor,5,Tue Feb 3 21:50:17 2015 UTC,"Yes, actually.  Just use ""customize-variable"" to change ""package-check-signature"" to ""t"" instead of ""allow-unsigned"" (which is the default).  This will disallow unsigned packages from being installed unless you explicitly add them to the list ""package-unsigned-archives"".  We really should encourage people to sign packages if possible. Perhaps we could convince the moderator team to put up a sticky or something?"
emacs,2uo087,hvis,3,Tue Feb 3 22:02:00 2015 UTC,"Lack of infrastructure, I guess. Nobody has took up writing the feature yet."
emacs,2uo087,BruceConnor,4,Tue Feb 3 22:21:31 2015 UTC,There's support for signing. It's just not being done.
emacs,2uo087,hvis,1 point,Tue Feb 3 22:30:44 2015 UTC,"Okay. How would I, a package author, push a package signed by me personally, through MELPA or GELPA?"
emacs,2uo087,BruceConnor,1 point,Tue Feb 3 20:43:54 2015 UTC,"You wouldn't. It's the repository's responsibility. At least, that's the case with Melpa. It makes no sense for the developer to sign because Melpa changes the package source.   Maybe with Gelpa or marmalade it's your responsibility. You'd have to ask them."
emacs,2uo087,hvis,1 point,Tue Feb 3 21:36:32 2015 UTC,"GELPA, conceptually, pretty much works like MELPA. Only it uses a smaller set of repositories.  I'm pretty sure it's not impossible to allow authors include signing information in the repository with the package, for each release version.  The biggest pain, I guess, would be auto-generated -pkg files, but the repositories could standardize on the exact format, and create a tool that the author could run locally to create a build and its signature.  The built tar would be discarded, but the signature would be checked into the repo."
emacs,2uo087,newfor2015,1 point,Wed Feb 4 09:33:01 2015 UTC,"GELPA, conceptually, pretty much works like MELPA. Only it uses a smaller set of repositories.   Melpa edits the source file, Gelpa doesn't. That's a big difference when it comes to signing. Unless you meant Melpa-stable, then yes, they work very similar."
emacs,2uo087,wasamasa,1 point,Wed Feb 4 10:44:26 2015 UTC,"Right, MELPA Stable would be better for this. Otherwise, the author would have to perform the signing procedure for each commit."
emacs,2uo087,wasamasa,2,Wed Feb 4 12:00:36 2015 UTC,"It depends on who does the signing. It won't make much sense if all you're doing is having every body self-signed their own code. Unless someone who actually have some credentials are actually going over the code line by line before signing, there's still no assurances that the packages are not malicious.  The question then becomes, who would take on that task and do all that work for free and that it's someone you'd trust? I don't know of anyone who'd do that."
emacs,2uo087,wasamasa,2,Wed Feb 4 13:45:21 2015 UTC,"The problem I see with that is that I'm only aware of operating system package archives as an example of signing of packages making sense because there it's maintainers (not authors!) being responsible for every new release of a particular software they need to sign off.  So, additionally to the guarantee that the package you've received stayed the same as it was uploaded, you know that the signing step was done by a package archive maintainer who made sure it builds successfully on their machine and can be used safely. How the latter would work for an Emacs package is not really clear for me and would need more discussion.  The closest thing to that would be GNU ELPA due to its contribution requirements.  However once you're in, each author does the releases themselves, probably because of the lack of manpower involved despite the rather small size of the archive.  Marmalade has some sort of vetting process for getting an account. However, once you're in, you're responsible for doing releases of the packages you're looking over, no matter whether you're their author or just someone interested in maintaining them.  MELPA has a different sort of vetting process which applies to the quality of the code of the package.  Once it's part of MELPA, releases happen automatically. Signing would just give you the first guarantee, nothing even remotely close to the second.  In other words, I'm not convinced of signing being the solution, at least not unless the mindset behind package development and maintaining looks different than it does now.  There's more than just the technical side of things to solve."
emacs,2uohse,curious_electric,2,Tue Feb 3 21:19:41 2015 UTC,"Googling ""disable smartparens prelude"" gives you this link as the first result:   https://github.com/bbatsov/prelude/issues/478  At the bottom of this issue is a link to another issue with the answer."
emacs,2uohse,nandryshak,2,Tue Feb 3 21:49:56 2015 UTC,"I don't know why I didn't find that result in my googling (duckduckgo-ing actually), maybe I used slightly different terminology than ""disable"" like ""turn off"" or something.  Thank you for pointing me in that direction!  It's funny how much of the discussion on that topic is ""I want to turn this off."" ""Why would you want to turn that off?""  How dare you not want what we give you!  Sadly, the snipped there did not actually work:  (add-hook 'prelude-prog-mode-hook (lambda () (smartparens-mode -1)) t)   I tried commenting it out in the source, in prelude-programming.el:  ;; (smartparens-mode +1)   I guess Prelude really really really really really wants me to use smartparens.... I guess I could get back to ""trying to get used to it"" mode...."
emacs,2uohse,flarkis,2,Tue Feb 3 22:14:13 2015 UTC,"I see quite a few references to (smartparens-strict-mode +1) also in the code. Not sure if that will help.  I'll have a look at this tomorrow to see if I can figure anything out, it's bothering me."
emacs,2uohse,flarkis,1 point,Wed Feb 4 04:03:36 2015 UTC,thanks.  There's only so much I want to second-guess and hack at prelude.  I love prelude.  Why is it being mean to me :(
emacs,2uohse,flarkis,2,Wed Feb 4 04:08:08 2015 UTC,What major mode are you having problems in? I was able to get that sample code to work in everything but lisp modes.
emacs,2uohse,innocence_bot,1 point,Wed Feb 4 21:56:59 2015 UTC,"I  have the following in my .emacs.d/personal/personal.el  (defun my-prog-mode-defaults()   (smartparens-mode -1))  (add-hook 'prelude-prog-mode-hook 'my-prog-mode-defaults t)   Smartparens still happen in PHP-mode, which is what I'm most concerned with."
emacs,2uohse,chris_andsomenumbers,2,Wed Feb 4 21:59:35 2015 UTC,You should have a space between the function name and the params list. I tried that piece of code and it worked for me. Are you restarting emacs for the changes to take effect?
emacs,2uohse,joranvar,3,Wed Feb 4 22:38:50 2015 UTC,"OK, I really did not have a space between those two and I feel like a gigantic dork because of that.  Fixed it and it did not help.  Here's the wack thing though, and it's something that makes me think I may be barking up the wrong tree entirely with smartparens.  If I'm acutally editing PHP code and I do ESC X smartparens-mode to toggle it enabled or disabled, I still get new parentheses appearing even if it's disabled.  Could there something else besides smartparens-mode which is automatically giving me closing parens?  EDIT: its not smartparens-mode at all, it's electric-pair-mode that I've got a problem with.  I was completely off base.  Sorry for all the trouble!  EDIT EDIT: actually it's both.  If either one is on, I get automatic parentheses.  Only if both are off, do I not get them."
emacs,2uohse,joranvar,-5,Thu Feb 5 02:28:58 2015 UTC,Love is a nice word. Good job!
emacs,2unogb,projectmoon,5,Tue Feb 3 17:48:59 2015 UTC,"Yes. You can customize how helm-mode behaves with helm-completing-read-handlers-alist. That is, even if helm-mode is enabled, you still have stock ido-find-files by adding the pair (ido-find-file . nil) or use the customize interface and add the pair.  Btw, what you said is the expected behaviour. It is because Helm enables fuzzy matching by default for navigating files. If you type gle, you still get "".gradle"" but with less typing. Fuzzy matching is the desired behaviour in many editors and people usually boast about it. With Ido, to enable fuzzy matching, you have to install flx."
emacs,2unogb,tuhdo,2,Tue Feb 3 18:06:20 2015 UTC,Yeah. The only thing I could find about fuzzy matching for find files was that it's on by default. Is there a way to turn it off for find files in Helm?
emacs,2unogb,tuhdo,2,Tue Feb 3 18:23:34 2015 UTC,I don't think there's a way for helmfind-files.
emacs,2unogb,tacit7,1 point,Tue Feb 3 18:45:00 2015 UTC,Try entering space after 'gle'; it should disable fuzzy matching.
emacs,2unogb,tuhdo,1 point,Tue Feb 3 19:17:09 2015 UTC,"I've found a better way to do this for my needs using helm. I just rebound M-x to helm-M-x and left other commands alone. I tried ido-mode as well and feel like I don't really want that either. I have very specific requirements apparently.  Currently I'm trying Icicles and that seems to be better for my needs once I rebound a few keys. It does prefix tab matching by default, has toggleable case sensitivity, and can do flex (""apropos"") matching with <backtab> while completing.  It's similar enough to the normal file search that I feel at home, but has enough extra stuff that enhances it."
emacs,2umrp1,xuchunyang,5,Tue Feb 3 13:04:35 2015 UTC,"Yes it is, see the answers to this question.  http://emacs.stackexchange.com/q/1074/50"
emacs,2umrp1,BruceConnor,1 point,Tue Feb 3 14:45:23 2015 UTC,Do you want a list of all the messages or just the current message disappearing after a few seconds in the separate frame?
emacs,2umrp1,fmargaine,5,Tue Feb 3 13:44:36 2015 UTC,"I mean just minibuffer not echo area, although they are at the same position."
emacs,2umz5q,MonsieurBanana,2,Tue Feb 3 14:25:38 2015 UTC,"You can even do (setq ange-ftp-netrc-filename ""~/.emacs.d/authinfo.gpg"") and keep everything in one place :D"
emacs,2umz5q,tungd,1 point,Thu Feb 5 14:31:21 2015 UTC,Oh thanks that's a very nice tip !
emacs,2umz5q,Imxset21,1 point,Thu Feb 5 18:57:25 2015 UTC,Isn't it great when the problem solves itself? :^)
emacs,2ul2vo,IvanMalison,2,Tue Feb 3 01:25:41 2015 UTC,"I switched from elscreen to workgroups2 partially because with workgroups, you have separate window history. With elscreen switch-to-prev-buffer uses a jumble of all visited buffers for different screens. Might be another way to do that though."
emacs,2ul2vo,angelic_sedition,1 point,Tue Feb 3 03:29:34 2015 UTC,"I switched to escreen for exactly that reason.  I might look at more recent alternatives at some point, but escreen is worth a look; very light-weight."
emacs,2ul2vo,tryptych,1 point,Tue Feb 3 05:24:40 2015 UTC,"Hmm. Does escreen have a bar/line that shows the screens? And if so, does it get split for split windows? I like switching to workgroups by index, but sometimes I forget what they are, so sometimes I wish I still had the tabbar thing."
emacs,2ul2vo,angelic_sedition,1 point,Tue Feb 3 16:51:09 2015 UTC,"No, it's quite minimalist.  There is escreen-menu which pops up a list of ""screens"" and their current buffers (including all splits), but that's it."
emacs,2ul2vo,tryptych,1 point,Tue Feb 3 20:54:43 2015 UTC,Is it possible to save your screens for when you re-open emacs? That's the other thing I find nice about workgroups2.
emacs,2ul2vo,angelic_sedition,1 point,Tue Feb 3 23:38:12 2015 UTC,"Good point -- not out of the box by the looks of it (I've never tried).  I wonder if you couldn't with something like session or desktop.el; there doesn't seem to be much in the way of data structures it uses.  OTOH, I should probably look at more modern alternatives at some point :)"
emacs,2ul2vo,tryptych,1 point,Wed Feb 4 00:37:31 2015 UTC,what about persp-projectile?
emacs,2ul2vo,cestdiego,2,Tue Feb 3 03:43:57 2015 UTC,persp-projectile is a projectile add on that uses perspective.el
emacs,2ul2vo,adouzzy,1 point,Tue Feb 3 04:17:34 2015 UTC,just create more frame. let windows manager do their job.
emacs,2ul2vo,ares623,3,Tue Feb 3 03:21:15 2015 UTC,"I don't like that solution (personally), but I can understand that some people might prefer it."
emacs,2ul2vo,theldoria,1 point,Tue Feb 3 04:18:44 2015 UTC,"Is there a way to persist frames (or just different configurations of multiple frames)? Currently I use workgroups2, mainly for the feature to persist workgroups. Would be great if I could do it with plain ol' frames instead.   Maybe something like ""launch new frame with this setup I pre-configured for Python work""."
emacs,2ul2vo,tuhdo,1 point,Tue Feb 3 06:42:15 2015 UTC,thats no option in console mode (emacs -nw)
emacs,2ulnzd,IvanMalison,4,Tue Feb 3 04:19:08 2015 UTC,Use diary-float with this syntax:  * Wash the dog <%%(diary-float t 0 3)>   it can even do things like every last specific weekday of a month:  <%%(diary-float t 0 -1)>
emacs,2ulnzd,myme,3,Tue Feb 3 12:18:00 2015 UTC,"That's right. Using the regular calendar and diary the syntax is  %%(diary-float t 0 3) Foo   Using Org it's the same but with angle braces:  <%%(diary-float t 0 -1)> Foo   The command (diary-cyclic) can also be useful. It's described in (info ""(emacs) Special Diary Entries"")"
emacs,2ulnzd,RobThorpe,1 point,Tue Feb 3 16:17:57 2015 UTC,Cool. Does diary-cyclic do that you can't already accomplish with org repeaters?
emacs,2ulnzd,RobThorpe,1 point,Wed Feb 4 02:58:21 2015 UTC,I have no idea because I don't use org repeaters.  See the info manual I mention.
emacs,2ulnzd,drbcladd,1 point,Wed Feb 4 10:35:43 2015 UTC,Awesome! This is almost (It would be nice if there were a syntactic sugar for this) exactly what I was looking for.
emacs,2ulnzd,abo-abo,2,Wed Feb 4 02:56:40 2015 UTC,Look at org-habit. It has some nice interval specification.
emacs,2uku51,sbay,11,Tue Feb 3 00:17:49 2015 UTC,"Somehow you learned of the existence of concat. Perhaps you saw it used in a script, or Googled for an answer and found an example. That is fine, but you should always refer to the actual program documentation built into Emacs. To get help, press C-h. If you press nothing else, a prompt will appear.  To get help on a function, press C-h f. You will be prompted to enter a function name. Upon accepting the name with RET you will be presented with the function's documentation.  So, to get help on concat, type C-h f concat RET. The documentation looks like this:  concat is a built-in function in `C source code'.  (concat &rest SEQUENCES)  Concatenate all the arguments and make the result a string. The result is a string whose elements are the elements of all the arguments. Each argument may be a string or a list or vector of characters (integers).   Note that SEQUENCES is plural, and that it says ""all the arguments.""  All of the built-in functions are well-documented, as are the variables used in configuration and by most packages."
emacs,2uku51,bakuretsu,2,Tue Feb 3 03:21:36 2015 UTC,"That is correct. I am not a lisp developer, and only use the language for my .emacs file. Given that elisp has some of the weirdest syntax I have seen, I thought that concatenation this way (which I saw in one of the .emacs files online) probably ok.  Thanks for the input."
emacs,2uku51,bakuretsu,2,Tue Feb 3 18:12:46 2015 UTC,"Yes, Lisp has unique syntax, but eventually you come to like it. When there are many closing parentheses next to each other, which often happens, there are tools to help you figure out how they match up. The prefix operator syntax is a bit to get used to as well (by that I mean (+ 1 1) rather than 1 + 1), but it does make it very consistent in the way data, functions, and operators are used, which is the goal."
emacs,2uku51,redguardtoo,2,Wed Feb 4 00:35:20 2015 UTC,"Each argument may be a string or a list or vector of characters (integers).   I fall in love with elisp because of lisp syntax of ""concat"".  in javascript, you have to: 'a' + 'b' + 'c' + 'd' + 'e' + 'f'  in lisp, (concat ""a"" ""b"" ""c"" ""d"" ""e"" ""f"")  Less ""plus"" signs to type."
emacs,2uku51,steloflute,4,Wed Feb 4 01:10:41 2015 UTC,"Yes. Like so:  > (concat ""a"" ""b"" ""foo"") ""abfoo"""
emacs,2uku51,kcin,4,Tue Feb 3 04:39:18 2015 UTC,"Depending on the case format may be less verbose and more expressive than concat.  E.g.:  (format ""%s/%s/%s"" ""a"" ""b"" ""c"")"
emacs,2uku51,kaushalmodi,3,Tue Feb 3 06:47:35 2015 UTC,"Assuming that file, A and B are variables, you can do (concat file ""test"" A B)."
emacs,2uku51,hvis,1 point,Tue Feb 3 01:45:32 2015 UTC,Yes.  Have you looked at the concat signature?
emacs,2uiuut,BruceConnor,1 point,Mon Feb 2 15:31:56 2015 UTC,"Looks awesome, but only works on 24.4+ due to reliance on subr-x?"
emacs,2uiuut,Quick_A_Distraction,2,Mon Feb 2 18:38:19 2015 UTC,Good point. Pushed an update to remove subr-x dependency.
emacs,2uiuut,alpheus,1 point,Mon Feb 2 22:31:50 2015 UTC,Is typing speed really the bottleneck for you?  The time I spend typing code is dwarfed by the time I spend thinking about the problem.
emacs,2uiuut,Starlight100,4,Tue Feb 3 01:25:25 2015 UTC,Maybe typing is not a bottleneck for programmers. But take their snippets away and they will be sad. Take their intellisense away and they will be mad. Make them use an on-screen keyboard and they will shit a brick.
emacs,2uiuut,kcin,3,Tue Feb 3 02:25:17 2015 UTC,For a programmer efficency is important. Why type more if you can get to the same place with typing less? That's what the various completion systems are about.
emacs,2uiuut,alpheus,1 point,Tue Feb 3 08:46:22 2015 UTC,"It depends on how familiar I am with the language. In the case of elisp, I do still need to stop and think sometimes, but most of the time is spent typing."
emacs,2uink3,abo-abo,7,Mon Feb 2 14:25:33 2015 UTC,This package will change the landscape of how Emacs users manage their key-space.
emacs,2uink3,grettke,2,Mon Feb 2 18:32:53 2015 UTC,"Just trying to shake things up, but thanks."
emacs,2uink3,nandryshak,4,Mon Feb 2 18:44:47 2015 UTC,"Jesus, abo, do you have time to actually use Emacs after all the work you put into extending it?  I remember the last time you posted about this package, and I think after this update I'll install it tomorrow. Thanks!"
emacs,2uink3,dzecniv,2,Mon Feb 2 23:34:10 2015 UTC,"Just trying to clean up my .emacs.d by publishing stuff. Btw, if anyone is interested, yesterday I've published netherlands-holidays on MELPA.  The blue Hydra thing was a question that I had half a year ago: Elisp: call keymap from code. Now it's close to being answered."
emacs,2uink3,Lompik1,3,Tue Feb 3 07:27:18 2015 UTC,"Maybe is it possible to couple Hydras with a magit-like interface, like the one provided by Mackey's discover.el ? (https://github.com/mickeynp/discover.el)  The advantage may be to make what appears in the echo area more discoverable. Just thinking, didn't try Hydra yet."
emacs,2uf6a8,vermiculus,7,Sun Feb 1 17:09:49 2015 UTC,"Main points of the article:   Emacs has support for persistent external variables (via Customize) Emacs has support for non-persistent internal variables (via defvar) Emacs had no support for persistent internal variables Propose a new function/macro defvar* that will assign a group and associate a file to the new variable. Variables will be saved as raw Lisp data in a subdirectory defined by the group (defgroup, as usual)."
emacs,2uf6a8,sledgespread,5,Sun Feb 1 17:20:32 2015 UTC,"I did not read the lengthy mail, and may probably underestimate the complexity of persistence, but is it so hard to read and print an alist that we need an extra special case of variable definitions?  Especially if this special case is just for a single special case of persistence, namely dumping a variable into a file?    I looked at stash.el, and to me it appeared to be mostly syntactic sugar for read and print.  Don't misunderstand me, it's a fine library, but it's not a feature that warrants special support from core Emacs."
emacs,2uf6a8,hvis,4,Sun Feb 1 17:52:39 2015 UTC,"I understand not reading all of that – it's a bit lengthy. I didn't have the time to make it shorter :) Thanks for your response.  At the end of the day, most programming is just syntactic sugar. Language features are often decided by what is used most or what is obviously missing. I'm of a mind to say the functionality is common enough to include in emacs-core only because implementing as a separate package would not only cause an undue separation in the way the programmer defines variables, but would also duplicate the key data structures that give meaning to stash.el. I'm not saying it's not possible, I'm saying it's not desirable.  There's also the whole Don't-Repeat-Yourself, but that's perhaps less important with the existence of macros.  More details when I get back home :)"
emacs,2uf6a8,autowikibot,2,Sun Feb 1 18:10:57 2015 UTC,"I'd say that most programming is abstraction, not syntactic sugar.  Hence libraries.  I don't argue against including a caching library in Emacs core.  Include whatever you will.    But please don't give it a generic special name like defvar* or whatever.  Persistence is really not so special that it deserves a special name.  And it'd establish a bad precedent.  What if the next programmer thought that REST was special enough to deserve special support, and would propose a defun*** for wrapping REST API calls?  If there was defvar* for caching, it'd be hard to turn that proposal down with good arguments…  Please reserve special forms for core language features, and do not use them for any arbitrary addon."
emacs,2uf6a8,hvis,2,Sun Feb 1 20:14:37 2015 UTC,"reserve special forms for core language features, and do not use them for any arbitrary addon   Fair point, it's something that should be kept in mind. Perhaps this is somewhat related to the 'variables set with a hook' thread that was going on earlier. Just a thought.  I see your point of view with the danger in defvar*, but I dunno… perhaps I'm just not familiar enough with REST to see it as so fundamental, but 'persistent internal data' seems to be pretty fundamental, however it's implemented.  I don't propose it should be a special form – I was thinking a macro the likes of defcustom – but perhaps that's me just reading too much into what you said :)  Perhaps something more like (defcache SYMBOL GROUP &optional EXPIRY) would be better – do you have any particular thoughts?  I hear your concerns loud and clear – thanks for your thoughts :)"
emacs,2udhcf,nautola,4,Sun Feb 1 03:44:25 2015 UTC,"Do not hesitate to report an issue on the github repo. In the report, please post : - the output of web-mode-debug - an example (on gist) - and a scenario to trigger the bug"
emacs,2udhcf,fxbois,1 point,Sun Feb 1 09:30:49 2015 UTC,I reccommend doing this too. You can post a bug here.  /u/fxbois here is actually the author of web-mode and is pretty fast at fixing problems with it.
emacs,2udhcf,Archenoth,2,Mon Feb 9 20:56:11 2015 UTC,Try to put your react component in an .js file instead of inlining it in html.. That might work but I do not know.  I recently bound C-TAB to switch between js2-mode and web mode for working in react. It works good enough for me.
emacs,2udhcf,thomasfr,1 point,Sun Feb 1 05:11:52 2015 UTC,I was following a tutorial. All of the tutorials do it inline.
emacs,2udhcf,moljac024,1 point,Sun Feb 1 05:26:13 2015 UTC,How hard is it to substitute the tutorial's inline javascript with a separate file?
emacs,2udhcf,cestdiego,1 point,Mon Feb 2 00:42:48 2015 UTC,Hard enough that I didn't do it.
emacs,2udhcf,dauoalagio,2,Mon Feb 2 00:51:55 2015 UTC,Maybe try to use web-mode with js2-minor-mode or sth?
emacs,2udhcf,evmar,1 point,Sun Feb 1 05:54:36 2015 UTC,Can you please post the code you are using? I use React in web-mode and don't have any issues (though it isn't great -- essentially just proper highlighting).  I'd be curious to see it my setup though
emacs,2ue9ij,redguardtoo,1 point,Sun Feb 1 09:58:42 2015 UTC,"If Chen Bin is reading this, I think he should submit a bug report about ""find"".  The command ""find-name-dired"" should work with non-western character sets.  The find-lisp commands are poor substitutes, they completely lock-up Emacs while searching which makes them unsuitable for large searches.  ""Find"" from GNU findutils is much faster and has many more options."
emacs,2ue9ij,RobThorpe,1 point,Sun Feb 1 22:55:57 2015 UTC,"It should work, but does not work. That's the point of my article."
emacs,2ue9ij,RobThorpe,1 point,Mon Feb 2 02:25:41 2015 UTC,I suggest bug reporting it then.
emacs,2ue9ij,ReneFroger,0,Mon Feb 2 10:16:29 2015 UTC,"API's are part of plugins, not part of an operating system.  So basically you're saying, when there is good documentation available for an operating system, it makes the best operating system? To be frankly, I find that a weird criterium."
emacs,2ue9ij,Erakko,0,Sun Feb 1 17:47:06 2015 UTC,Is this emacs specific? Its not the case elsewhere
emacs,2u87gv,xuchunyang,1 point,Fri Jan 30 19:25:28 2015 UTC,This should be an input-method.
emacs,2u87gv,RobThorpe,1 point,Sat Jan 31 02:49:38 2015 UTC,"Holy cow that's a big file, but hey, good work"
emacs,2u87gv,Charleeeeeeee,1 point,Sat Jan 31 11:22:26 2015 UTC,"Thanks! There are 7075 Simplified Chinese characters in that file and one Chinese character takes up 3 bytes in UTF-8 encoding, so the file size..."
emacs,2u5uzq,the_whalerus,5,Fri Jan 30 04:04:10 2015 UTC,"Here's your code, refined:  (defun evil-define-multiple (keymaps bindings)   (dolist (keymap keymaps)     (dolist (x bindings)       (cl-destructuring-bind (mode key cmd)           x         (eval `(evil-define-key ,mode ,keymap ,key ',cmd))))))  (defun success ()  ""a testing function""   (interactive)   (message ""success""))  (evil-define-multiple  '(lisp-interaction-mode-map emacs-lisp-mode-map)  '((normal (kbd ""C-c C-a"") success)    (insert (kbd ""C-c C-a"") success)))   I don't like to see eval here, but since evil-define-key is a macro, it's the easiest way."
emacs,2u5uzq,abo-abo,1 point,Fri Jan 30 10:01:14 2015 UTC,Should the first defun be a defmacro?
emacs,2u5uzq,mnp,1 point,Fri Jan 30 11:52:09 2015 UTC,"Why? I see no problem in evaluating '(lisp-interaction-mode-map emacs-lisp-mode-map) and '((normal (kbd ""C-c C-a"") success) (insert (kbd ""C-c C-a"") success)).  In fact, it's almost always better to first try to implement stuff with defun. And only in the case when you say to yourself: ""This argument must not be evaluated"" - then you need a macro."
emacs,2u5uzq,abo-abo,4,Fri Jan 30 12:18:13 2015 UTC,"I must humbly disagree with these eval/macro statements.  When you see an eval in a function it often times is an indication that you were really looking for a macro.  In this case, and in the problem domain of setting up emacs in general, I'm not sure it matters.  But, as an example, consider that this will not work with your code, but would work with my macro below:  (defun evil-define-multiple (keymaps bindings)   (dolist (keymap keymaps)     (dolist (x bindings)       (destructuring-bind (mode key cmd)           x         (eval `(evil-define-key ,mode ,keymap ,key ,cmd))))))  (cl-flet ((success () (interactive) (message ""failure"")))   (evil-define-multiple    '(lisp-interaction-mode-map emacs-lisp-mode-map)    '((normal (kbd ""C-c C-a"") #'success)      (insert (kbd ""C-c C-a"") #'success))))   This doesn't work because eval (necessarily) evaluates in a null lexical environment.  Note also that I have unquoted the cmd variable as the user should really be in charge of specifying that.  To OP, macros are made to modify the interface of the language, so in makes no sense to define a macro but then wrap it in a function. It is extremely common, however, to write a lightweight macro that passes all of the heavy lifting to a regular function, but that isn't really necessary in this case.  Here is an example of how I might write this macro:  (defmacro evil-define-multiple (keymaps &rest bindings)   `(progn ,@(loop for keymap in keymaps                   appending                   (loop for (mode key cmd) in bindings                         collect `(evil-define-key ,mode ,keymap ,key ,cmd)))))   And you would use it like this:  (cl-flet ((success () (interactive) (message ""failure"")))   (evil-define-multiple    (lisp-interaction-mode-map emacs-lisp-mode-map)    ;; Use lexical functions    (insert (kbd ""C-c C-a"") #'success)    ;; Use anonymous functions    (normal (kbd ""C-c C-a"") (lambda () (interactive) (message ""Something else"")))    ;; Assuming visual is a valid mode, this calls whatever success is defined as    ;; when the keys are pressed    (visual (kbd ""C-c C-a"") 'success)))"
emacs,2u5uzq,smithzv,2,Fri Jan 30 15:34:03 2015 UTC,"I started from the assumption that evil-define-multiple should be a function.  Your way works, of course, and is better, but doesn't satisfy the assumption.  The assumption itself may be wrong, but at least it a function can be applied partially, so there's a use case for that. I wouldn't overthink it."
emacs,2u5uzq,abo-abo,5,Fri Jan 30 15:48:47 2015 UTC,I think you can use the vanilla global-set-key function to get the same result.  Edit: Or with define-key or local-set-key for mode local mappings.
emacs,2u5uzq,waspish_ly,3,Fri Jan 30 10:13:31 2015 UTC,"I'm a bit puzzled about this too. I've never used Evil, does it clobber all of the normal key-setting methods?  If not then the OP's code isn't needed, he can just use the normal functions because he's setting the same for two modes.  That said, the two modes are ""normal"" and ""insert"". I don't know what VI people call their modes (to me they're ""beep"" and ""f**k everything up""). Does he just mean that in normal editing and in overwrite mode he has this keybinding enabled, but there's another mode where it's disabled?"
emacs,2u5uzq,RobThorpe,1 point,Fri Jan 30 16:53:24 2015 UTC,"You're right, unless his installation is borked, C-c, C-x, C-g, a bunch more and all the meta binds are not bound in evil on purpose, so a regular define-key or global-set-key should do the trick, no matter what state they're in."
emacs,2u5uzq,wasamasa,1 point,Fri Jan 30 18:22:55 2015 UTC,"I wanted the same bindings in multiple Emacs modes.  I'm going to use most of the same bindings in lisp-interaction-mode and in emacs-lip-mode, so to prevent duplicating all the keybindings, I had to write something that takes multiple modes and assigns keybindings in them."
emacs,2u5uzq,RobThorpe,1 point,Fri Jan 30 18:54:29 2015 UTC,"Why not set the keys in the hooks for lisp-interaction-mode and emacs-lisp-mode? I think the following should work:  (add-hook 'lisp-interaction-mode-hook       (lambda ()         (define-key lisp-interaction-mode-map (kbd ""C-c C-a"")           'success))) (add-hook 'emacs-lisp-mode-hook       (lambda ()         (define-key emacs-lisp-mode-map (kbd ""C-c C-a"") 'success)))"
emacs,2u5uzq,RobThorpe,1 point,Fri Jan 30 23:03:48 2015 UTC,"Since I'm setting the same keys, I'd rather not duplicate the calls."
emacs,2u5uzq,waspish_ly,1 point,Sat Jan 31 05:05:21 2015 UTC,"But, you could create the same kind of macro for the code that I quote above. It would be simpler.  The only benefit of your Evil version is if you want to treat keys separately in the two Evil modes. You will want to do that eventually I expect."
emacs,2u5uzq,vermiculus,3,Sat Jan 31 17:56:27 2015 UTC,What effect does the leading comma have? And the leading backquote?
emacs,2u2j0c,zk_phi,8,Thu Jan 29 10:51:45 2015 UTC,That is sooo sweet. Only the Japanese would come up with such a brilliant use of unicode.  Edit: Oh no! Those little lines aren't unicode. But I do wonder if such a thing would be possible...  Edit No. 2: Emacs doesn't support combining characters so I would recommend swapping out the graph when (not window-system) and quantizing y to ▁▂▃▄▅▆▇█ or <space>░▒▓█ block chars.
emacs,2u2j0c,jart,4,Thu Jan 29 14:41:53 2015 UTC,sparklines cannot be drawn with unicode chars. symon internally generates .xbm image.  try:  (insert-image  (symon--make-sparkline   (ring-convert-sequence-to-ring '(100 80 60 40 20 0))))
emacs,2u2j0c,wasamasa,2,Thu Jan 29 14:56:28 2015 UTC,"Regarding combining characters, Emacs supports both the display of combined characters by using the combining character glyph after the glyph you want to modify or with elisp by using compose-region on the glyphs.  Both seem to require support by the font, maybe that's why you got the impression Emacs doesn't support that feature."
emacs,2u2j0c,chmouelb,3,Fri Jan 30 12:54:22 2015 UTC,"Looks very nice, I wonder what need to be done to get macosx support? Nice work again !"
emacs,2u2j0c,abo-abo,1 point,Fri Jan 30 08:18:19 2015 UTC,"thanks. status fetcher for macosx is missing. something similar to ""symon-default-linux-fetcher"" (defined at line 233), or ""symon-default-windows-fetcher"" (defined at line 197) must be implemented."
emacs,2u2j0c,abo-abo,1 point,Fri Jan 30 09:38:12 2015 UTC,I keep getting:   Error running timer `symon--default-linux/update-statuses': (void-function nil)
emacs,2u2j0c,mvanity,1 point,Thu Jan 29 10:59:36 2015 UTC,It seems that there's no way to cancel the timers. Maybe reformat the whole thing into a global minor mode?
emacs,2u2j0c,mvanity,3,Thu Jan 29 11:02:06 2015 UTC,"ah yes, it should be a minor-mode. I'll update later."
emacs,2u2j0c,benfitzg,1 point,Thu Jan 29 11:09:46 2015 UTC,now updated. thanks for your suggestion.
emacs,2u2j0c,benfitzg,1 point,Fri Jan 30 07:27:57 2015 UTC,"fixed, thanks. `battery-status-function' is probably nil."
emacs,2u2j0c,benfitzg,1 point,Thu Jan 29 11:05:49 2015 UTC,"Aw, heck yeah!  I'll be trying this today to see if I can get rid of Rainmeter!  Edit: I have a similar problem as the above has when using Cygwin.    Error running timer 'symon--default-linux/update-statuses': (wrong-number-of-arguments nil 2)"
emacs,2u2j0c,jart,1 point,Thu Jan 29 11:22:38 2015 UTC,"thanks.  can you call the function manually (after initializing symon),  (symon--default-linux/update-statuses)   and let me see the stacktrace ?"
emacs,2u2j0c,chrispoole,1 point,Thu Jan 29 13:24:37 2015 UTC,I just downloaded your newest version off github and it works like a champ for me now.
emacs,2u2j0c,chrispoole,1 point,Wed Feb 4 20:58:43 2015 UTC,This looks great. Let us know if you fix the bugs mentioned.
emacs,2u2j0c,willwillis,1 point,Thu Jan 29 13:48:23 2015 UTC,I'll add to MELPA when bumping version beta -> 1.0.
emacs,2u54bp,sw2wolf,4,Fri Jan 30 00:18:58 2015 UTC,You should file a bug report
emacs,2u54bp,Imxset21,1 point,Fri Jan 30 17:07:52 2015 UTC,"If the same thing doesn't happen in a windows command prompt window, then it's a bug. If it doesn't happen in an M-x shell window then it's an eshell bug specifically."
emacs,2u468w,bacon1989,3,Thu Jan 29 19:57:57 2015 UTC,"Is the link you posted, better than this Windows installer ?"
emacs,2u468w,ReneFroger,3,Fri Jan 30 12:32:23 2015 UTC,"I highly recommend using the unmodified installer.  For the modified installer, linked by the original poster: What I dislike about that emacs install is the popup of help-frames and the statistics centric orientation of the pre-installed libraries. Btw. I have no use for Spanish spell-checking......"
emacs,2u468w,theldoria,2,Fri Jan 30 12:41:02 2015 UTC,"Vincent does great, great work for us Windows users, saving us a ton of time, and makes it really, really easy for new people to get started with Emacs on Windows. The integrated Org and ESS support is huge."
emacs,2u468w,grettke,0,Fri Jan 30 22:19:58 2015 UTC,Org comes built in now as far as I know. Or is there something I'm missing?
emacs,2u468w,trezor2,1 point,Sun Feb 1 20:06:47 2015 UTC,I think the org built-in isn't up to date.
emacs,2u468w,MonsieurBanana,0,Mon Feb 2 11:44:55 2015 UTC,"If so, installing/updating something using the built-in package manager really isn't a massive undertaking."
emacs,2u468w,trezor2,1 point,Mon Feb 2 12:28:14 2015 UTC,"This is great, thanks for posting."
emacs,2u468w,Quasimoto3000,1 point,Fri Jan 30 00:25:30 2015 UTC,"It is great. But, I hope the person distributing it is distributing all the source. Emacs and the libraries. If not he/she is disobeying the GPL."
emacs,2u468w,RobThorpe,4,Fri Jan 30 02:33:43 2015 UTC,Isn't it enough to prominently link to the source?
emacs,2u468w,phalp,1 point,Fri Jan 30 05:01:37 2015 UTC,"Actually, I just re-read that bit of the GPL (section 6.d), I think you're right."
emacs,2u3f67,curious-scribbler,6,Thu Jan 29 16:40:10 2015 UTC,"I wrote a short guide on how to use package manager here. Of all choices, just use MELPA. ELPA is available by default."
emacs,2u3f67,tuhdo,5,Thu Jan 29 17:31:03 2015 UTC,hey /u/tuhdo As always thanks for responding and I think I am going to drop the book for your guide. Not only is ti updated but all the examples help in knowing what to expect from a command.   I am going to go through part 1 and 2 to check on things that I've missed. Thanks again.
emacs,2u3f67,politza,3,Fri Jan 30 07:05:07 2015 UTC,"Emacs comes with it's own book:  (info ""(emacs) Packages"")   Put this in the scratch buffer and evaluate it."
emacs,2u3f67,Escherize,2,Fri Jan 30 00:23:04 2015 UTC,"Wow, I've been using emacs for a year and this is the first I've heard of this kind of manual-linking. Cool!"
emacs,2u3f67,vermiculus,1 point,Fri Jan 30 06:02:45 2015 UTC,"From within Info, press c to copy the page reference :)"
emacs,2u3f67,vermiculus,2,Sat Jan 31 19:22:50 2015 UTC,On it now. :-)
emacs,2u3f67,vermiculus,2,Fri Jan 30 07:05:45 2015 UTC,"A package is a group of elisp files.  When you install a package, it is downloaded to a subdirectory in your emacs config (usually ""elpa""), compiled, and loaded.  When you start emacs all packages will be added to the load path, so that they will work when you use ""require"" in elisp or run an autoloaded function. Many packages will need some customization, or to be activated with a call like ""(foo-global-mode 1)"" or put in hooks etc, but this is all up to you, not the package manager.  It may be helpful to use something like use-package which provides a nice declaration syntax to organize your config on a per-package basis. There is a menu interface at 'M-x package-list-packages' which lets you browse, install, upgrade, delete etc.  There are other enhanced tools as well, for example Cask, paradox etc. that you might want to add as well. It's up to you.  The difference is in how much content they have and where they get it.  MELPA is very popular simply because it's the biggest, includes packages that otherwise wouldn't be in an archive at all (like ones that are originally just a page on emacswiki), and makes automated builds with no extra effort from the package maintainer.  I think if you have both MELPA and Gnu ELPA you've got pretty much everything there is, and when you find something that's not in either of those it probably isn't in any repository at all (and you should fork MELPA, add it, and submit a pull request :)."
emacs,2u2mj4,atilaneves,3,Thu Jan 29 11:47:55 2015 UTC,"I abandoned ropemacs when I found it completely opaque for debugging, plus I found it very difficult to deploy and keep working on multiple machines (which I have to do).  Elpy/Jedi seemed to do nearly as much but cleanly and easily.  Am I wrong?  Is Ropemacs still worth it?  What features does it bring."
emacs,2u2mj4,EatMoreCrisps,1 point,Thu Jan 29 15:23:18 2015 UTC,ropemacs is still better at refactoring.  https://github.com/davidhalter/jedi/issues/103
emacs,2u2mj4,hvis,1 point,Thu Jan 29 18:52:45 2015 UTC,"I found this blog useful, in deciding to use jedi over rope in elpy:  http://jedidjah.ch/code/2013/1/19/why_jedi_not_rope/"
emacs,2u2mj4,statmobile,1 point,Fri Jan 30 01:24:15 2015 UTC,Refactoring  This is really the place where Rope shines.   You should probably use both.
emacs,2u2mj4,hvis,2,Fri Jan 30 11:21:54 2015 UTC,"Oh, I agree.  I was just saying that the blog post convinced me to use jedi over rope for code completion in elpy.  That, and jedi seems to do a better job for me in code completion."
emacs,2u2mj4,statmobile,1 point,Fri Jan 30 18:39:40 2015 UTC,"Anyone of you guys found a nice way for doc lookups?  For example elpy with jedi will not find np.array, but will find numpy.array"
emacs,2u2mj4,holyfudge,3,Tue Feb 3 12:55:19 2015 UTC,"Do you mean by C-c C-d?  Maybe you can file a bug, Jorgen is extremely helpful with this.  Personally, I usually go to M-. to go directly to the definition in source code.  You'll also get the docstring as well in the source code.  Or you could just start running the code and run help(np.array).  There are just so many features in elpy, and like I said Jorgen is great and appreciative of bug reports.  Just file one here:  https://github.com/jorgenschaefer/elpy/issues"
emacs,2u2mj4,statmobile,2,Tue Feb 3 18:43:03 2015 UTC,https://github.com/jorgenschaefer/elpy/issues   Yeah I checked there first: https://github.com/jorgenschaefer/elpy/issues/397  So if I am using jedi there does not seem to be a solution and helm-dash does not work for OSX.  For now I has stopped renaming imports which works on personal projects but I doubt my classmates will like this standard.
emacs,2u2mj4,holyfudge,1 point,Tue Feb 3 19:08:14 2015 UTC,"Thanks for the bug report link.  Yeah, to be honest if I come across this issue I think I'd just follow Jorgen's advice over helm-dash because it seems to be the difference between rope and jedi.  I find jedi does such a better job with completion for me, and if I needed that feature I'd just switch to rope as the backend using:  M-x elpy-rpc-backend"
emacs,2u2mj4,statmobile,1 point,Tue Feb 3 19:17:46 2015 UTC,"Yeah, maybe I am a bit hesitant switching backends since I like jedi for everything else. Btw do you know how elpy-multiedit works? I can't seem to figure out what to do after i renamed a variable."
emacs,2u2mj4,holyfudge,2,Tue Feb 3 21:31:59 2015 UTC,"You can also try traad for refactoring. It's essentially just an HTTP server over rope, so it can do whatever rope does (in principle...there are still missing bits.)"
emacs,2u2mj4,abingham,1 point,Mon Feb 2 17:08:51 2015 UTC,"I discovered ropemacs first, so I haven't used Jedi for code navigation yet. I remember installing elpy long ago and not liking it, but I can't remember why. Maybe I should try the elpy/jedi combo in a VM.  ropemacs works for me. And now it works in Python3 as well!"
emacs,2u1bml,workisnotfun,5,Thu Jan 29 02:23:12 2015 UTC,"Melpa is generally newer, while gnu is more stable.   ""Newer"" and ""stable"" both have pros and cons that I'm sure you're familiar with."
emacs,2u1bml,nandryshak,3,Thu Jan 29 02:36:43 2015 UTC,"MELPA packages are usually built automatically from a project's repository; the Gnu repository has stable releases that are explicitly submitted to it.  Thus, packages in MELPA are generally going to be ahead of their stable releases (if there even is a stable release) and as a result you will get frequent updates and new features more or less as soon as they are put in, but you might also get occasional breakage."
emacs,2u1bml,purcell,3,Thu Jan 29 02:44:46 2015 UTC,"Some great answers here. Yes, the MELPA version will be newer. In this particular case, it's probably much newer: the latest tagged version of yasnippet is 0.9.0.1, and a version of that package is in MELPA Stable, which builds packages based on tags. Whether or not you want very recent versions is up to you: no package repository (or combination of them) guarantees mutual compatibility of packages, so in practice (and in my personal experience/opinion) breakage isn't significantly more likely with MELPA's snapshot packages than with those from other sources. (Disclaimer: I'm a maintainer of MELPA, so I'm somewhat biased.)"
emacs,2u1bml,syl20bnr,1 point,Thu Jan 29 08:05:39 2015 UTC,Also a broken package means that it has been updated recently which dramatically ease the process of finding regression causes. Finally a package that breaks quickly is more likely to be fixed as quickly.  MELPA + a rollback mechanism is the perfect setup.
emacs,2u1bml,bakuretsu,2,Thu Jan 29 23:08:40 2015 UTC,"I'm new to all of this, so I might not be completely correct here, but I'm sure someone will scold me if I am not. I'm fairly sure that MELPA is going to run a bit more up-to-date than GNU because of the way it builds packages daily from their ""authoritative"" upstream VCS systems.  I've also noticed that Marmalade tends to be ""bleeding edge;"" so much so that I've had plenty of issues with bugs, etc., and prefer MELPA or GNU when possible. I might have just had a run of bad luck, but everything I've wanted so far has been on MELPA so it's not a problem."
emacs,2u1bml,abo-abo,1 point,Thu Jan 29 02:39:56 2015 UTC,The one in GNU ELPA was added two years ago and hasn't been updated yet. Maybe it's super stable.
emacs,2u2rbt,FionaSarah,1 point,Thu Jan 29 12:58:37 2015 UTC,What's the value of delete-active-region?
emacs,2u2rbt,username223,1 point,Thu Jan 29 13:11:25 2015 UTC,"Ah, it's t. I'll try nil.  [edit]  That's actually done the job. Thank you so much! :) I wonder what changed to make that my current default setting."
emacs,2u2rbt,jinwoo68,1 point,Thu Jan 29 14:00:02 2015 UTC,"C-h k, and press your delete key to see how your Emacs sees that key?"
emacs,2u2rbt,RobThorpe,1 point,Thu Jan 29 16:09:59 2015 UTC,"With this tip I was able to discover that the behaviour of delete-active-region was for some reason being overridden by CUA mode. More confusingly is why I ever had CUA mode enabled at all, maybe when I was learning emacs years ago?? Who knows. Thanks dude."
emacs,2u2rbt,jinwoo68,1 point,Thu Jan 29 16:22:52 2015 UTC,"Some distros include special ""site-start.el"" files that changes some of the Emacs keys. Sometimes they change these settings. It may have been that."
emacs,2u2rbt,RobThorpe,1 point,Thu Jan 29 21:22:35 2015 UTC,"I just realized that I have delete-active-region set to T too. And that's the default value. See simple.el.  I never use the delete key for deleting a character. I just use C-d. Isn't that ""normal""? :)"
emacs,2u1mia,jhirn,2,Thu Jan 29 03:54:33 2015 UTC,Solved. Thanks for the confessional debugging.   (setq ido-use-filename-at-point nil)
emacs,2u1mia,RobThorpe,2,Thu Jan 29 05:31:43 2015 UTC,"I expect that in some types of buffer this guessing is useful. What you can do is enable it only in those buffers by putting (setq-default ido-use-filename-at-point t) in a hook. I'll admit I don't do that though, I disable it everywhere.   I wouldn't mind an optional find-file-relative-to-file-at-point   Bind find-file-at-point (ffap) to another key.  See (info ""(emacs) FFAP"") .  There's another version of this in Dired-X, I don't know which is better."
emacs,2txt7g,the_whalerus,3,Wed Jan 28 06:42:33 2015 UTC,After pressing C-c C-e for export C-s will toggle scope between subtree and buffer.
emacs,2txt7g,tetro_domino,2,Wed Jan 28 11:45:05 2015 UTC,It's possible to only export the selected region in your buffer.
emacs,2txt7g,bixeiphuph,2,Wed Jan 28 07:05:57 2015 UTC,"Also a tool not completely related to org mode but it does handle org mode documents is pandoc. It can handle many document formats (pdf, org, markdown, HTML, doc, docx, etc.) and translate between them. (This may be what org-mode actually does)"
emacs,2txt7g,Razark,1 point,Wed Jan 28 11:42:43 2015 UTC,"From http://orgmode.org/manual/Export-settings.html:  ‘SELECT_TAGS’ - The tags that select a tree for export (org-export-select-tags). The default value is :export:. Within a subtree tagged with :export:, you can still exclude entries with :noexport: (see below). When headlines are selectively exported with :export: anywhere in a file, text before the first headline is ignored.  ‘EXCLUDE_TAGS’ - The tags that exclude a tree from export (org-export-exclude-tags). The default value is :noexport:. Entries with the :noexport: tag will be unconditionally excluded from the export, even if they have an :export: tag."
emacs,2txt7g,wasabichicken,1 point,Wed Jan 28 12:11:35 2015 UTC,"I'm used to writing my papers in Emacs and then copy/pasting into Microsoft Word or something to turn them in.   Then may I suggest you take a look at the LaTeX typesetting system instead? Off the top of my head, reasons to use it includes:   It produces beautiful, beautiful documents. It is particularly awesome at typesetting math/equations, and has for that reason become a de facto standard for writing papers in the scientific community. The Emacs support is excellent. The mode is called AUCTeX. Think of LaTeX as a cousin of HTML, i.e. a markup language. It lets you focus on the contents and structure of your document rather than the layout. LaTeX does the layout for you. It is free and open source software, available for Windows. (Search for MiKTeX)   If you'd like to try it out without installing anything, head over to https://www.sharelatex.com/ and get started."
emacs,2txt7g,fmargaine,1 point,Wed Jan 28 12:23:45 2015 UTC,\5. Org mode can export to PDF by using LaTeX :)
emacs,2txt7g,tmalsburg2,1 point,Wed Jan 28 15:35:27 2015 UTC,This is what I'm doing.   I just don't feel like learning how to write a ton a LaTeX. It's not very useful for me.
emacs,2txt7g,knight17,1 point,Wed Jan 28 18:06:19 2015 UTC,You can also use pandoc to convert org files to .doc files.
emacs,2twoze,workisnotfun,8,Wed Jan 28 00:53:28 2015 UTC,"I use web-mode (with scss-mode) quite exclusively as it perfectly works with my main project (using PHP files disguised as .js, CSS embedded in HTML headers built with Smarty, et cetera). :-)"
emacs,2twoze,rhabarba,5,Wed Jan 28 02:01:27 2015 UTC,"+1 for web-mode, the thing is awesome."
emacs,2twoze,xenow,1 point,Wed Jan 28 03:24:37 2015 UTC,I just want to get out of HTML mode which doesn't do anything besides color the tags hahah. I will definitely give this a try.
emacs,2twoze,redguardtoo,3,Wed Jan 28 04:27:29 2015 UTC,"web-mode flymake (need tidy, see http://blog.binchen.org/posts/how-to-validate-html5-code-with-flymake-effectively.html if you need edit html5 pages)  evil-matchit evil-nerd-commenter"
emacs,2twoze,fmargaine,2,Wed Jan 28 09:30:45 2015 UTC,Surprised nobody mentioned emmet-mode
emacs,2twoze,boolDozer,1 point,Wed Jan 28 13:46:37 2015 UTC,"Depends on what you need to do, really. Skewer works really well for live HTML editing, and for syntax I usually use ngml-mode or web-mode."
emacs,2twoze,xxunrealxx,1 point,Wed Jan 28 01:28:56 2015 UTC,really I just want to get out of HTML mode which doesn't do anything besides color the tags hahah. I will definitely give this a try.
emacs,2twoze,xxunrealxx,1 point,Wed Jan 28 04:27:53 2015 UTC,Have you tried impatient-mode as well? I didn't really see a demo for html editting but mainly javascript in the browser and I'm not sure if my javascript will be that fancy so I'm deciding between Skewer and impatient-mode atm :l (also I'm new to web dev so I have no idea)
emacs,2twoze,RobThorpe,1 point,Wed Jan 28 05:30:17 2015 UTC,Think it was called pagify or something but you could dynamically see the changes in the webpage as you typed the code. Nxhtml is also pretty good.
emacs,2twoze,RobThorpe,1 point,Wed Jan 28 05:05:45 2015 UTC,"I think you are talking about impatient-mode which I will probably try. Now to choose between web-mode, nxhtml, and nxml :l"
emacs,2twoze,its_never_lupus,2,Wed Jan 28 05:21:26 2015 UTC,Well try em all out for a bit and see which one you like. If one of those packages auto completes tags that would be great. I think you can do that with yassnippets not sure. That was one of the main things I wanted when doing Web design
emacs,2twoze,the_whalerus,1 point,Wed Jan 28 06:54:50 2015 UTC,"Dabbrev should auto-complete tag names fairly accurately in any mode. C-c C-e auto closes tags in SGML mode and children of it, like HTML mode."
emacs,2tx443,gnuvince,8,Wed Jan 28 02:52:05 2015 UTC,"It has its own refresh/sync blockages, but as a moderate-core long-time emacs user who's day job is Java … I've recently found that JDEE just wasn't cutting it, and have been pretty happy with eclim-emacs.  I did wish that company-mode completion support worked for me, but since I never really got that with JDEE, I don't miss it too much.  Plus, since I have eclipse open (usually backgrounded, but not totally headless), I can always pop back there if I need something only it offers.  I use it, in particular, for:   eclim-java-find-type eclim-java-find-definition eclim-java-find-references eclim-java-import-organize   It's rare that I use the problem highlighting, but only because we have a rather large backlog of warnings system-wide, and I can't find a way to get ""show me the Markers just for this file"". If I come across the regions in the buffer, I can ""C-h ."" to see what Eclipse is complaining about, but I can't get a list of buffer points that have problems.  Also, perhaps unique to our setup, but have a progressively-incrementing junit runner is nice. While most devs use eclipse primarily, we also maintain an ant-based build for jenkins, &c., which I use from emacs for most compilation and util purposes … but running the test suite was always a PITA because I couldn't find a junit runner that integrated with ant to give any useful progressive feedback.  Anways, much happier with eclim-emacs than with jdee (+jdee-usages), though I still use jdee in no small part.  EDIT: forgot eclim-java-import-organize in the list. Plus formatting.  Oh, and I don't use the formatter interaction because automated code formatting somewhat sucks, our eclipse formatting rules suck, and I can't format just a region of a buffer at a time."
emacs,2tx443,jsled,4,Wed Jan 28 03:11:32 2015 UTC,"company-eclim is a thing. Completions should work for you.  There's some indication that eclim should work with company: https://lists.gnu.org/archive/html/help-gnu-emacs/2009-04/msg00660.html  (yes, I realize the irony of saying that, and linking you to a post where someone's having trouble getting it to work... but someone else got it to work!)"
emacs,2tx443,bliow,1 point,Wed Jan 28 07:48:56 2015 UTC,"It might require explicitly setting company-eclim-executable, though, if eclim is not in PATH."
emacs,2tx443,hvis,1 point,Wed Jan 28 11:13:42 2015 UTC,"Should, but did not with a couple of afternoon's attempts.  Hopefully I can make it work in the future after a few more project milestones when I have a bit of time.  I'm not a huge code-completion person anyways, but not having to interrupt my coding to look up exact method names and signatures would be nice."
emacs,2tx443,jsled,2,Wed Jan 28 13:31:48 2015 UTC,"I used it for a while, but the constant auto-recompiling (which is needed so that eclipse understands your code) makes it a bit annoying at times. Also it might not be being maintained right now and there were a few bugs. I ended up switching back to my usual collection of language agnostic plugins because of this.  There was a thread about emacs for java a few months ago, might have some useful pointers/discussion."
emacs,2tx443,sledgespread,1 point,Wed Jan 28 13:32:17 2015 UTC,"One more point. JDEE debugging never really worked for me. Jdibug kinda did, but was a bit of a chore to work with, as well. The debugging support in eclipse is orders of magnitude better, so I can always pop back over there when it makes sense.  I'm much more of a ""printf debugging"" person anyways, but there's times where interactive debugging just makes more sense."
emacs,2tt9ml,ericjmr,6,Tue Jan 27 05:46:15 2015 UTC,Upvoted so hopefully someone will see it
emacs,2tt9ml,Ryckes,4,Tue Jan 27 08:33:12 2015 UTC,Thanks!
emacs,2tt9ml,bharath_g,7,Tue Jan 27 08:59:13 2015 UTC,I am interested in contributing to PHP mode. I use PHP at my day job and i have been using emacs since last 4 years. I don't have a lot of experience writing emacs lisp apart from customizing my config files. But i do have a bit of experience with scheme and common lisp. I would try looking at the github issues page to see if i can fix anything.
emacs,2tt9ml,CodyReichert,2,Tue Jan 27 12:52:17 2015 UTC,"That would be really great, thanks!"
emacs,2tt9ml,syohex,2,Tue Jan 27 13:38:49 2015 UTC,"I've using php-mode quite a bit lately for some projects we're working, and I also maintain shakespeare-mode. I'll take a look at the github and see if it's something I could handle. At the very least I'll take a shot at reviewing some patches."
emacs,2tt9ml,bliow,3,Tue Jan 27 15:17:17 2015 UTC,"I'm interested in maintainer of php-mode. And I'm the author of some emacs package, anzu.el, git-gutter.el, quickrun.el etc. I'm the maintainer of coffee-mode and I have some experiences of development Emacs major-mode."
emacs,2tt9ml,bakuretsu,2,Wed Jan 28 03:46:27 2015 UTC,Thanks for your work on quickrun.  I use that very regularly.  As well as your Coffee Mode (although I don't write too much in the language).
emacs,2tt9ml,davidam9,2,Thu Jan 29 02:23:26 2015 UTC,You should also post on emacs-devel.
emacs,2tt9ml,ReneFroger,2,Tue Jan 27 17:05:09 2015 UTC,"I'm also interested in helping out, as a daily user of PHP mode (I earlier posted that wild font lock inherit bug thing), but I just started using Emacs a couple of months ago and I'm still learning elisp and I also probably wouldn't have the time to take on full maintainership.  That said, I will be happy to chip away at bugs and would also be happy to test development versions since I use it all day anyway."
emacs,2tt9ml,leo49831,1 point,Tue Jan 27 19:13:06 2015 UTC,"Currently, I'm developing Extensions to Php Mode https://savannah.nongnu.org/projects/php-ext-el/. I could integrate this work in php-mode as an exercise to learn to maintain it."
emacs,2tt9ml,xenow,1 point,Sun May 17 15:16:36 2015 UTC,"Hello there!   I work daily with Emacs and PHP. I'm wondering if you already found someone to be the PHP-mode maintainer. If not so, I'm surely interested!   Will wait on your further reply."
emacs,2tt9ml,xenow,1 point,Sat Jun 6 15:46:36 2015 UTC,I prefer modes that are contributed to emacs because I know they are in sound health esp. in the long run.
emacs,2tt9ml,bakuretsu,3,Tue Jan 27 10:49:41 2015 UTC,"Sorry, I am not sure what you mean.  When you say ""contributed to Emacs"" do you mean packages which come with Emacs itself?  Because if so, PHP Mode will never be bundled with Emacs out of the box."
emacs,2tt9ml,tekai,3,Tue Jan 27 11:01:24 2015 UTC,Is that due to not wanting to assign copyright to the FSF for inclusion in GNU elpa? Or some other reason?
emacs,2tt9ml,bakuretsu,6,Tue Jan 27 14:44:02 2015 UTC,"Personally, I would be happy to assign the copyright to the FSF for my own contributions.  However, sixty five other people have worked on PHP Mode and I would have to convince all of them to do the same.  I can't even contact some of the earliest contributors because I have nothing to go on except an alias."
emacs,2tt9ml,tekai,3,Tue Jan 27 14:46:51 2015 UTC,That makes sense! :)  Thanks for your work on php-mode.  Maybe you should crosspost this to /r/php since you may encounter more php users who happen to use emacs there.
emacs,2tt9ml,LULZYKitten,5,Tue Jan 27 15:07:22 2015 UTC,"We are such a small group :-(  If you were to draw a Venn diagram of people who use Emacs and people who regularly (or professionally) write PHP, the overlap would be three atoms."
emacs,2tt9ml,abo-abo,1 point,Wed Jan 28 00:02:44 2015 UTC,"hm, the list of contributors is a bit longer than 3"
emacs,2tt9ml,nandryshak,2,Wed Jan 28 11:25:21 2015 UTC,I was joking.
emacs,2tt9ml,RobThorpe,1 point,Wed Jan 28 12:12:40 2015 UTC,but what if the list of contributors is the whole group of PHP devs using emacs? :(
emacs,2tt9ml,leo49831,1 point,Wed Jan 28 14:03:48 2015 UTC,"This is actually a good point, and on reflection, an opportunity to ask:  How do you stay sane writing PHP? What are your 3 or 4 most important crutches / tools for writing PHP?"
emacs,2tu89h,thomasfr,5,Tue Jan 27 13:52:26 2015 UTC,Also expand region now seems to also do the right thing like not skipping def: scopes and selecting the whole file.. bye bye newline-and-indent (I hope)
emacs,2tu89h,chekt,3,Tue Jan 27 13:54:10 2015 UTC,Sweet! python-mode indenting has pissed me off for ages :)
emacs,2tu89h,adouzzy,1 point,Tue Jan 27 18:28:30 2015 UTC,I just wrote my own indenting function. : as left bracket pass as right bracket. Easy rules get the job done.
emacs,2ttr6l,flexibeast,14,Tue Jan 27 09:43:03 2015 UTC,"I have nothing against s, but I have two quibbles with dash, both of which could be solved by including dash in GNU ELPA (after some cleanup).   Zero length prefix. The zero-length prefix could be useful in other applications. I don't think that it's appropriate for one package to claim it. Note that even the ever-useful cl-lib has a two-length prefix cl-. All the aliases should be made explicit, possibly obsoleted.  It's just very hard to keep two separate list API in my head. I've sent patches to cider and projectile, and dash was just a roadblock in understanding how these packages work.   See for yourself:  (define-obsolete-function-alias '!cons 'push) (define-obsolete-function-alias '-map 'mapcar) (define-obsolete-function-alias '-reduce 'cl-reduce) (define-obsolete-function-alias '-filter 'cl-remove-if-not) (define-obsolete-function-alias '-select 'cl-remove-if-not) (define-obsolete-function-alias '--select '--filter) (define-obsolete-function-alias '-remove 'cl-remove-if) (define-obsolete-function-alias '-reject 'cl-remove-if) (define-obsolete-function-alias '--reject '--remove) (define-obsolete-function-alias '-replace-where) (define-obsolete-function-alias '--replace-where) (define-obsolete-function-alias '-mapcat 'cl-mapcan) (define-obsolete-function-alias '-copy 'copy-sequence) (define-obsolete-function-alias '-cons* 'cl-list*) (define-obsolete-function-alias '-first 'cl-find-if) (define-obsolete-function-alias '-find 'cl-find-if) (define-obsolete-function-alias '-first-item 'car) (define-obsolete-function-alias '-butlast 'butlast) (define-obsolete-function-alias '-count 'cl-count-if) (define-obsolete-function-alias '-any? 'cl-some) (define-obsolete-function-alias '-some 'cl-some) (define-obsolete-function-alias '-some-p 'cl-some) (define-obsolete-function-alias '-any-p 'cl-some) (define-obsolete-function-alias '--some? '--any?) (define-obsolete-function-alias '--any-p '--any?) (define-obsolete-function-alias '--some-p '--any?) (define-obsolete-function-alias '-all? 'cl-every) (define-obsolete-function-alias '-every-p 'cl-every) (define-obsolete-function-alias '-all-p 'cl-every) (define-obsolete-function-alias '-every? 'cl-every) (define-obsolete-function-alias '--every? '--all?) (define-obsolete-function-alias '--all-p '--all?) (define-obsolete-function-alias '--every-p '--all?) (define-obsolete-function-alias '-none? 'cl-notany) (define-obsolete-function-alias '-none-p 'cl-notany) (define-obsolete-function-alias '--none-p '--none?) (define-obsolete-function-alias '-only-some-p '-only-some?) (define-obsolete-function-alias '--only-some-p '--only-some?) (define-obsolete-function-alias '-drop 'nthcdr) (define-obsolete-function-alias '-repeat 'make-list)   There's more stuff that can't be phrased in terms of define-obsolete-function-alias, e.g.:  (--each '(erase-buffer           upcase-region           downcase-region)   (put it 'disabled nil))  ;; equivalent (dolist (it '(erase-buffer               upcase-region               downcase-region))   (put it 'disabled t))   Does anyone really want to learn 40 new aliases, just to contribute to cider?  Or, if you started with dash, do you want to learn (less than) 40 new aliases to contribute to Emacs core?  I think all would benefit if this was resolved in the best agreed way.  My suggestion is to obsolete the aliases and rely on cl-lib, and leave only the genuinely novel stuff, like -if-let and -when-let. Of course it's up to the maintainers to do something (if anything)."
emacs,2ttr6l,abo-abo,3,Tue Jan 27 13:55:23 2015 UTC,You should check out the new seq.el.   P.S. Introducing new unprefixed commands in Emacs is unlikely to ever happen.
emacs,2ttr6l,bozhidarb,3,Tue Jan 27 20:44:41 2015 UTC,"Yes, I saw it in GNU ELPA log as I was adding hydra.   P.S. Introducing new unprefixed commands in Emacs is unlikely to ever happen.   All is well with the world:)"
emacs,2ttr6l,abo-abo,1 point,Tue Jan 27 20:57:53 2015 UTC,"Well, if-let and when-let are both in the new-ish core subr-x package..."
emacs,2ttr6l,lloyd-in-awe,3,Wed Jan 28 20:31:04 2015 UTC,"dash was just a roadblock in understanding how these packages work.   Indeed, it's a pain.  When not coming from clojure or whatever, dash-style code is highly confusing.  Your obsolete list is shocking!"
emacs,2ttr6l,---R,1 point,Wed Jan 28 01:54:25 2015 UTC,"To be honest the same point applies to any utility library used in an Emacs package, including cl-lib.  While it is easy to grasp forms like cl-throw and cl-catch, things start looking different for cl-loop or cl-macrolet (even now I don't have any idea what one could possibly use it for except obfuscation or heavy wizardry). Get over it, it's common in Lisp land to learn lots of verbs as you need to instead of a handful of built-in keywords as in other languages."
emacs,2ttr6l,wasamasa,4,Wed Jan 28 08:11:43 2015 UTC,It's weird that the most used function -when (with 311) isn't even in dash:)
emacs,2ttr6l,abo-abo,3,Tue Jan 27 11:29:45 2015 UTC,"Gah. Thanks for picking that up! Off the top of my head, i imagine the problem lines are:  if (/\(defun (${util_package_prefix}-?[[:alnum:]]+)/     || /\(defmacro (${util_package_prefix}-?[[:alnum:]]+)/) {   which are erroneously squashing -when-let and -when-let* into the non-existent function -when. :-/  The REs should obviously be something more like:   if (/\(defun (${util_package_prefix}-?[*?[:alnum:]]+(?:-[*?[:alnum:]]+)*/     || /\(defmacro (${util_package_prefix}-?[*?[:alnum:]]+(?:-[*?[:alnum:]]+)*)/) {   EDIT: Updated results here."
emacs,2ttr6l,wasamasa,5,Tue Jan 27 12:05:22 2015 UTC,I'm curious whether there will be any response to this definitely interesting data considering the official course of discussions on the emacs-devel mailing list is pretending all relevant Emacs Lisp is part of GNU ELPA or Emacs.
emacs,2ttr6l,bozhidarb,5,Tue Jan 27 11:26:13 2015 UTC,"GNU Elpa recently included a library similar to dash that's called seq, which will also be bundled with the next Emacs release. Most string functions provided by s were incorporated in Emacs 24.4. Things happen slowly on emacs-devel, but they certainly move in the right direction (most of the time)."
emacs,2twm75,workisnotfun,7,Wed Jan 28 00:32:10 2015 UTC,I'd recommend ELPA/MELPA as it usually features package updates and automatic installation (could come on handy for larger plug-ins).
emacs,2twm75,rhabarba,4,Wed Jan 28 00:48:16 2015 UTC,"There's no such thing as ""downloading MELPA or Marmalade"". Both are package archives which you can plug into the list used by package.el. ""ELPA"" now refers to the official GNU package archive, which is also in that list. You can certainly download individual packages, but then you'll have to take care of generating autoloads, manually installing their dependencies and keeping them up to date in future. So my suggestion is that you should just use list-packages. :-)"
emacs,2ttt3s,adouzzy,1 point,Tue Jan 27 10:14:02 2015 UTC,check out the comments on the website. really interesting ideas there.  but I think you can now run all the swoop features without actually needing helm?
emacs,2ttt3s,milkypostman,1 point,Wed Jan 28 19:17:29 2015 UTC,"yes, there is emacs-swoop by the same author"
emacs,2tug7t,sympl,1 point,Tue Jan 27 15:09:08 2015 UTC,"No clue, I've never seen this happen before (I'm a Spacemacs contributor).  Try asking on the Spacemacs Gitter chat."
emacs,2tug7t,trishume,1 point,Tue Jan 27 19:39:17 2015 UTC,"If you do find out please let me know, I've got a similar problem with linum and org-mode (though I don't use spacemacs)."
emacs,2tug7t,LadenSwallow,1 point,Wed Jan 28 07:56:34 2015 UTC,"Hey dude, I just got it to working although I'm not sure what caused it. What I did was to backup my config and reinstall spacemacs. While searching I stumbled on this which might be helpful to you. I don't understand what his solution is though."
emacs,2tug7t,pyr3,1 point,Wed Jan 28 08:45:00 2015 UTC,"Not a spacemacs user, but the CSS modes do this for me (LESS, Sass, CSS)."
emacs,2ttcvg,firest,3,Tue Jan 27 06:21:23 2015 UTC,"EE and emacs users here. Honestly it's probably more trouble than it's worth to do everything in emacs. There are basically no good open source tools for hardware design. What I do modify the source files in emacs and do everything else from synthesis to loading in their software.  P.S. I'm surprised you're using VHDL, almost everyone I've met in industry uses verilog"
emacs,2ttcvg,flarkis,2,Tue Jan 27 07:32:58 2015 UTC,"""Everyone uses verilog"" ??? That is because you are not in Australia. Most people here still think VHDL-93 is much power and much better than SystemVerilog."
emacs,2ttcvg,enzochiau,0,Wed Jan 28 10:30:03 2015 UTC,I see. Maybe I should just start small with arduino instead.  Also we use both verilog and vhdl. I just arbitrarily chose vhdl as a starting point.
emacs,2ttcvg,trezor2,0,Tue Jan 27 16:02:13 2015 UTC,"As someone currently using neither, I distinctly remember preferring VHDL over Verilog when I had to learn both at university.  Ofcourse in the end I thought using Xilinx studio was the neatest."
emacs,2ttcvg,tacit7,2,Tue Jan 27 13:19:33 2015 UTC,"What do I do with the tar file?  If it has the source code for vhdl-mode, you need to add the file to the load-path list and then require it.   (add-to-list 'load-path ""path-to-vhdl-mode"")  (require 'vhdl-mode)   Youll prob need to read the install file for more instructions."
emacs,2ttcvg,enzochiau,2,Tue Jan 27 06:47:13 2015 UTC,Emacs is a powerful tool and worth to learn it.   About for FPGA design:   Use it as a editor with latest VHDL-mode or verilog-mode You can set project with simulator to compile and do simulation. But I perfer Makefile which is easy to share with people do not use emacs. Xilinx tools: they support command line mode and you can just create makefiles or tcl scripts to do the jobs. Program FPGA chip: I still can't figure out how to do it under Ubuntu. Just send the image file to windows machine to do the programming.
emacs,2ttcvg,lambdasgr,2,Wed Jan 28 10:40:32 2015 UTC,"I have been developing a quiet complex VHDL project with emacs, here's a few tips:   You can only use emacs as editor, everything else including synthesize, implementation, simulation, generate programming file, etc must be done with Xilinx IDE. So you create your files and add them to the project using Xilinx IDE, then edit them in emacs with VHDL mode. If you are smooth with emacs, you'll find it a lot better than the build in editor, especially on Linux. I use emacs for VHDL on windows too. Current emacs (24.4) ships with a broken VHDL mode. When you split your frame, with one window has VHDL code and try to use find-grep in the other, you'll find your find-grep result totally messed up. The only way I found to be able to replace the build in one with newer version is to replace the older VHDL mode file in emacs source before you compile it. Yes, this will require you to compile your emacs, so I'm not sure how to do it in windows, but then again, you won't need find-grep in windows. Just adding newer version to load path won't work, it will still use the build in one. VHDL mode is quite essential when it comes to VHDL and Xilinx Vivado. On older ISE you can create a test bench template for a desired module with a few clicks (at least for verilog it is). But with Vivado, you need to write all unnecessary crap on your own. With VHDL mode, you can just do vhdl-port-copy on desired module, then do vhd-port-paste-testbench, wah-la, a test bench template has been created. It might not sounds much, but if you've done you should know how much redundant crap you need to type for a test bench, especially for a VHDL test bench. Also, I always test my modules, so it turns out to save a lot typing. You sometimes might find the vhdl-electric-mode turned on, that's when whenever you type a keyword, VHDL mode will interactively ask you to fill the rest. If you don't like it, just toggle it off with vhdl-electric-mode command.   With all these been said, VHDL is a much much worse language than verilog, if you have option at very beginning, you should always choose verilog over VHDL."
emacs,2ttcvg,kaushalmodi,1 point,Tue Jan 27 16:23:01 2015 UTC,"I am surprised that emacs doesn't take the new vhdl mode file you add to the load path. You can try the use-package. In that you can use the :load-path ""package/path/relative/to/.emacs.d"" to specify the exact el you want to load. But you shouldn't need to do that. I use org-mode from MELPA which overrides the default org-mode that ships with emacs."
emacs,2tqtm2,the_whalerus,35,Mon Jan 26 18:24:27 2015 UTC,"""If you give me six hours to chop down a tree, I will spend the first four sharpening my axe"".   Thomas Jefferson (attributed, anyway)"
emacs,2tqtm2,inarchetype,6,Mon Jan 26 19:17:17 2015 UTC,"The song I came to sing remains unsung to this day. I have spent my days in stringing and in unstringing my instrument. -- Tagore   Not that I wouldn't sharpen my axe, too. :) But there's a diminishing return once your tools are in good order."
emacs,2tqtm2,gmfawcett,8,Mon Jan 26 21:12:29 2015 UTC,"True. At a certain point, you've got to get chopping. The trick, I think, is to remember why you are sharpening the axe, because it's too easy to forget and start thinking you are sharpening it for the sake of having the best and most elegantly formed axe-blade ever.  Or, more to your quote, perhaps, as a pretext for putting off facing engagement with what you really want (or need) to do, because it's easier to just keep sharpening.  In either case, though, the issue is between the ears, not with emacs. I suppose if it is difficult to address the real issue, one option is to confine yourself to using an axe you can't sharpen, but then you aren't ever going to have a very sharp axe.  For some people, though, perhaps that would be more efficient."
emacs,2tqtm2,inarchetype,7,Mon Jan 26 21:14:00 2015 UTC,Emacs saves you time when you work and takes it back when you play with it -- Some guy on the internet
emacs,2tqtm2,MikeSeth,1 point,Tue Jan 27 07:02:26 2015 UTC,Doesn't really apply since the quote explicitly puts a time limit on the preparation.
emacs,2tqtm2,kabbotta,2,Mon Jan 26 23:47:23 2015 UTC,My take on this sharpening is knowing exactly how Sharp your tools are. When sufficient start cutting the tree. I am really new to emacs. Only working in it for about 6 months. Prior to that vi. Not even vim. So sharpening the knife for me means getting to know emacs better.
emacs,2tqtm2,emgee_1,1 point,Tue Jan 27 00:05:27 2015 UTC,My take on this sharpening is knowing exactly how Sharp your tools are. When sufficient start cutting the tree.   Well said. :)
emacs,2tqtm2,gmfawcett,1 point,Tue Jan 27 02:28:29 2015 UTC,google says Lincoln said it
emacs,2tqtm2,dustingetz,1 point,Tue Jan 27 00:41:01 2015 UTC,I remember Lincoln said it
emacs,2tqtm2,CodyChan,15,Tue Jan 27 13:40:34 2015 UTC,"Funnily enough the visitor count to my blog drops about 30% on weekends. I blame this on people playing around with Emacs during work hours ;)  Edit:   I also think it helps that Emacs is just a fun environment to play around with. It's reactive, gives you immediate feedback, and it's got a great editor (obviously!)"
emacs,2tqtm2,mickeyp,6,Mon Jan 26 19:15:46 2015 UTC,"You should say, ""editors""."
emacs,2tqtm2,tuhdo,3,Mon Jan 26 19:22:03 2015 UTC,"agreed. The default kind of sucks balls, but Evil-mode is the shit! :)"
emacs,2tqtm2,kingpatzer,1 point,Tue Jan 27 01:53:11 2015 UTC,"Yes, when people ask me why Emacs, i tell them ""because it's fun"". Emacs is pretty much a dream come true for developpers and Lego lovers ;]"
emacs,2tqtm2,tampix77,5,Tue Jan 27 08:44:46 2015 UTC,"All my friends use either use Sublime or, a few fancy pants guys, Webstorm."
emacs,2tqtm2,Trevoke,13,Mon Jan 26 18:25:47 2015 UTC,"I just ran into an article ""Is Atom or Sublime the best Text Editor"" ? and it said that Sublime was the reigning champ.  So I stopped reading before the end of the first paragraph."
emacs,2tqtm2,MonsieurBanana,3,Mon Jan 26 21:28:52 2015 UTC,"Au royaume des aveugles, les borgnes sont rois   Literally ""in the kingdom of the blind, the one-eyed are kings""."
emacs,2tqtm2,kingpatzer,-3,Wed Jan 28 10:03:19 2015 UTC,You're not clever.
emacs,2tqtm2,lykwydchykyn,1 point,Wed Jan 28 16:17:13 2015 UTC,you're friends should learn to be more productive -- 'cause those editors aren't doing it for them. :)
emacs,2tqtm2,tampix77,8,Tue Jan 27 01:53:49 2015 UTC,"Before I was a coder I was a musician.  I spent more time practicing and tweaking my instrument than actually performing, so I guess this arrangement feels natural to me."
emacs,2tqtm2,RobThorpe,2,Mon Jan 26 19:51:25 2015 UTC,4~8h / day of training 4~6h / week of rehearsal 1~2h / month playing   The typical life of most amateur musicians :)
emacs,2tqtm2,tuhdo,4,Tue Jan 27 08:46:59 2015 UTC,And then they wonder why you can do everything faster and with less defects.
emacs,2tqtm2,BruceConnor,5,Mon Jan 26 18:49:39 2015 UTC,It's something you have to resist or it becomes a huge time sink. I keep my configurations small and simple.
emacs,2tqtm2,tuhdo,8,Mon Jan 26 18:56:35 2015 UTC,"I don't configure when I'm actively working to get something done.  11:50pm when I have an assignment due at 12:00 is not the time to automate some action.   But if I'm casually getting something done, I'll take a 30 minute break to sling some elisp.  It's a great way to take a break, still be productive, and have some fun."
emacs,2tqtm2,sotolf2,2,Mon Jan 26 19:10:30 2015 UTC,"The same as me, except sometimes I get carried away and forget lunch time. Not sure if it's a bad habit."
emacs,2tqtm2,slybot,5,Mon Jan 26 19:23:38 2015 UTC,Speak for yourself. I've spent much more time configuring then I'll ever spend writing anything else.
emacs,2tqtm2,ijustwantanfingname,2,Mon Jan 26 19:46:59 2015 UTC,Hmm Prelude or Spacemacs is meant to spend lots of time configuring?
emacs,2tqtm2,ElmStreetsLoverBoy,3,Mon Jan 26 18:49:16 2015 UTC,"I've actually just been growing my .emacs.d for the past 6 months or so.  I was very impressed with Spacemacs, though. It has a lot of features that I like and would like to duplicate in my own setup.  It's just to ""vim-like"" for my liking.  There's quite a few Emacs things that I like now."
emacs,2tt4l5,workisnotfun,2,Tue Jan 27 04:59:16 2015 UTC,"I have exactly the same problem. Esc-W works, Alt-W not. Emacs 24.4 on Windows 8.1 64-bit Maybe a bug?"
emacs,2tt4l5,AcceptSocket,1 point,Tue Mar 17 11:47:28 2015 UTC,I'll have to try Esc-W next time. Yeah I'm on Emacs 24.4 Windows 8.1 64 bit. The weird thing is that this problem doesn't come up immediately but after a period of time using Emacs (with no change to .emacs as all it just randomly stops working)
emacs,2tt4l5,kaushalmodi,1 point,Tue Mar 17 13:53:16 2015 UTC,Thank you!!! Esc-W saves me from having to do M-x kill-ring-save when Emacs suddenly decides to not take Alt-W anymore! Holding Esc too long seems to close all my windows though :/
emacs,2tt4l5,to3m,1 point,Fri Mar 20 16:32:23 2015 UTC,"Does both Esc w and Alt-w have the same problem? You can call a M- binding using either way. For the escape key use, for M-w, first press the escape key, release it and then press w. It could simply be the positions of Alt and w that don't allow you to press them properly based on your typing style."
emacs,2tt4l5,RobThorpe,1 point,Tue Jan 27 11:50:06 2015 UTC,"It works most of the time, I can press M-w just fine but there are times emacs doesnt register the key press at all.  I'm not sure what the problem was but after turning off my computer for the night the problem went away. I've run into this several times before though :/"
emacs,2tt4l5,jordonbiondo,1 point,Tue Jan 27 14:00:04 2015 UTC,"It's a total guess, but: do you have multiple keyboard layouts or input languages installed? You could be falling foul of the layout/language switching shortcut, which is by default set to Shift+Alt - a key combination that's all to easy to hit if you use emacs. (I'm not sure how you wouldn't notice this in your day-to-day typing, but it's possible, I suppose, that you could be switching to a language that's set up to be mostly QWERTY until you start hitting the meta keys.)  I don't have Windows handy right now but here are some steps for disabling it that from memory sound about right:  XP/Vista - http://forums.mozillazine.org/viewtopic.php?f=38&t=1684605 Windows 8: http://superuser.com/questions/698037/can-i-disable-the-altshift-shortcut-to-change-language-in-windows-8-1  (When I used to get bothered by this stuff, I found the keyboard shortcut had a habit of getting itself re-enabled any time you change another language-related setting - so don't rely on it staying disabled!)"
emacs,2tt4l5,transtone,1 point,Tue Jan 27 14:54:05 2015 UTC,I'd try it without my .emacs file. Even if .emacs has nothing related to this some of the packages loaded in it could have bugs. Some packages manipulate the kill-ring or use it internally.
emacs,2tqdi7,zk_phi,5,Mon Jan 26 16:23:59 2015 UTC,"Thanks, this is a cool idea! I have a colored battery level in my PS1 so I thought it would nice to have in my mode line as well. Here is a picture of my modified implementation of your code:  http://i.imgur.com/GoU3sHX.png  As the battery level goes down, it goes from green to red, and if less then 7% it is a boxed red exclamation point The code:  https://gist.github.com/jordonbiondo/220c41bc33567cb0a0be"
emacs,2tqdi7,jordonbiondo,2,Mon Jan 26 19:50:48 2015 UTC,Is your font Envy Code R? It looks really good
emacs,2tqdi7,sympl,1 point,Tue Jan 27 04:04:26 2015 UTC,"Yes, it is Envy Code R"
emacs,2tqdi7,jordonbiondo,-1,Tue Jan 27 15:48:29 2015 UTC,Envy Code R   I don't think so..
emacs,2tqdi7,adouzzy,1 point,Tue Jan 27 06:06:25 2015 UTC,"Cool! Thank you! There is no add-to-list in the gist, but no problem... I just wanted to ask you: how did you make that background of a color displays actual color?"
emacs,2tqdi7,atykhonov,2,Mon Jan 26 21:36:53 2015 UTC,"http://www.emacswiki.org/emacs/HexColour  There are a number of versions out there, but they're all variations of the same idea involving x-defined-colors and fontlock."
emacs,2tqdi7,liillliillliiii,2,Tue Jan 27 01:42:45 2015 UTC,you may enjoy Kurecolor for interactively editing colors in Emacs  https://github.com/emacsfodder/kurecolor
emacs,2tqdi7,instant_sunshine,2,Tue Jan 27 05:20:20 2015 UTC,I use rainbow-mode
emacs,2tqdi7,jordonbiondo,1 point,Tue Jan 27 15:50:20 2015 UTC,"BTW, what's your font and color theme? Like them very much!"
emacs,2tqdi7,adouzzy,1 point,Tue Jan 27 06:04:19 2015 UTC,"Thanks! My font is Envy Code R, my theme is ample-flat-theme, which comes with the ample-theme package. https://github.com/jordonbiondo/ample-theme"
emacs,2tqdi7,jordonbiondo,1 point,Tue Jan 27 15:49:57 2015 UTC,Envy Code R   Thanks!
emacs,2tqdi7,adouzzy,1 point,Tue Jan 27 22:02:52 2015 UTC,Very nice! Thank you.
emacs,2tsk6s,kabbotta,5,Tue Jan 27 02:06:21 2015 UTC,"C-xc would be read as C-x c, which is control+x followed by c, while C-x C-c is control+x followed by control+c. There's a difference."
emacs,2tsk6s,permafrosty,2,Tue Jan 27 02:19:42 2015 UTC,"This is correct, and I'm just expanding on it (mentioning this, so my comment here isn't misinterpreted as argument)...  Any notation system is likely to contain some arbitrary choices, about the ""proper"" expression of things.  The OP's suggested format could have been used instead, with say the canonical C-x c expressed as C-x_c or C-x 'c' or C-x (c) or any number of other variants.   The existing notation is simply a convention.    However, the current convention is a long-standing and well-understood notation, which are reasons in themselves to continue using it.    Clarity and consistency are the things that truly matter, in any notational system.    So, there's no advantage to replacing a conventional choice (even if it was originally somewhat arbitrary) with another notation (likely containing its own arbitrary choices), unless the original conventional notation is found to be somehow inadequate for expressing the concepts it is intended to denote.  And I don't believe that need has been established here."
emacs,2tsk6s,forked_tongue,3,Tue Jan 27 17:51:36 2015 UTC,Yes. It's a very old convention. It dates from the first incarnation of Emacs on ITS systems. The one that was written using TECO.
emacs,2tsk6s,RobThorpe,2,Tue Jan 27 20:33:51 2015 UTC,For example here from 1981: http://pdp-10.trailing-edge.com/mit_emacs_170_teco_1220/01/info/emacs.guide.html  The directory two below contains one of the last versions of ITS Emacs. You may find some of it surprisingly familiar.
emacs,2trmxx,BruceConnor,4,Mon Jan 26 21:51:33 2015 UTC,"check https://github.com/redguardtoo/evil-nerd-commenter  It's a mature solution and will handle all the corner cases for you.  For example, autoconf-mode has comment/uncomment bug, but evil-nerd-commenter will workaround it for you.  https://github.com/redguardtoo/evil-nerd-commenter/issues/3"
emacs,2trmxx,redguardtoo,-1,Mon Jan 26 23:49:20 2015 UTC,"Configuring and using evil just to comment some lines? Sounds like overkill to me. No, but thanks, no."
emacs,2trmxx,locbrean,6,Tue Jan 27 06:13:55 2015 UTC,"First sentence of the link you didn't click on: ""This program can be used independently WITHOUT Evil!""."
emacs,2trmxx,aerique,1 point,Tue Jan 27 08:10:51 2015 UTC,because non-evil people want it after I release it as a evil plugin.
emacs,2trmxx,redguardtoo,1 point,Fri Jan 30 00:55:44 2015 UTC,Since we have comment-dwim I don't really see the point.
emacs,2trmxx,RobThorpe,3,Mon Jan 26 22:16:20 2015 UTC,You don't see the point in doing C-; instead of C-SPC C-n M-; for a frequently used action?
emacs,2trmxx,RobThorpe,1 point,Mon Jan 26 22:18:36 2015 UTC,"Well, there are two use cases. Firstly, let's say I've written a line that's a comment. In that case I'd prepend it with the comment indicator used by the language at the outset ( ;;, #, //, etc) which can be done with M-; if there's no region.  Secondly, I could have a block of code that I want to comment out.  In that case I'd mark it and do M-;. I agree that if I wanted to comment out just a single line then that's not efficient. But that doesn't happen to me often, usually I want to remove large blocks. When it does I do C-SPC C-a M-; or M-m then the comment indicator (e.g. M-m ;)."
emacs,2trmxx,RobThorpe,1 point,Tue Jan 27 01:35:33 2015 UTC,"Just to clarify, this is not meant as a replacement to comment-dwim. It's a complement.   M-; is good for creating blank comments and (un)commenting large blocks (like entire functions). C-; is faster at (un)commenting blocks between 1 and 9 lines. It just so happens to me that the latter is a very common use case, and is at least as useful as the former."
emacs,2trmxx,srt19170,1 point,Tue Jan 27 02:27:24 2015 UTC,I see what you mean. I might try it.
emacs,2trmxx,capuche,1 point,Tue Jan 27 11:17:16 2015 UTC,"I'd like something like dwim-comment that does the region if active, and otherwise the line.  From a comment by David Sheperd on the blog:    https://gist.github.com/davidshepherd7/579fd585b891a81eec73"
emacs,2trmxx,RobThorpe,5,Tue Jan 27 01:09:07 2015 UTC,I've made a package which does exactly this but also add other features to dwim-comment. Feel free to check it out ;)  https://github.com/remyferre/comment-dwim-2
emacs,2trmxx,ReneFroger,1 point,Tue Jan 27 06:48:03 2015 UTC,Using M-; is a good idea because C-; is one of the keybindings that doesn't work in the terminal.
emacs,2tprpk,VanLaser,5,Mon Jan 26 12:45:50 2015 UTC,"There's no built-in support for synctex in Org.  You could check these patches, if you want:  http://thread.gmane.org/gmane.emacs.orgmode/69454  Of course, AUCTeX has synctex support as you've noted."
emacs,2tprpk,---R,1 point,Mon Jan 26 18:15:54 2015 UTC,"Roger, let's hope Org 9 does it 'officially'. Thanks for the answer!"
emacs,2tpaew,tuhdo,5,Mon Jan 26 07:39:45 2015 UTC,"As usual, amazing post ;]  Keep doing these, i think i'm not the only one there that think it's really helpful :)"
emacs,2tpaew,tampix77,3,Mon Jan 26 08:57:43 2015 UTC,"Fyi, if you think it's a bit too late to have the above rudimantory refactoring features, than it turns out we are not far behind at all: All about C++ Refactoring in Visual Studio 2015 Preview."
emacs,2tpaew,abo-abo,3,Mon Jan 26 13:57:33 2015 UTC,"Holy cow, 2015 looks even worse than Visual Studio 6.0!"
emacs,2tpaew,tampix77,1 point,Mon Jan 26 15:26:14 2015 UTC,VS seems good for the debugger and the static analysis but apart from that it doesn't seem to be that great :o
emacs,2tpaew,abo-abo,1 point,Tue Jan 27 08:40:30 2015 UTC,"I'm fine with using gdb in Emacs. I'm not missing VS any features there.  The CEDET C++ completion is about on the level of VS6.0 now. I wish it could be improved to the level of VS2005, which was the last one that I was using, but it's not possible at the moment.  I'm not enthusiastic about using clang-based extensions for completion, still hoping to get it through gcc someday."
emacs,2tpaew,vifon,2,Tue Jan 27 09:08:07 2015 UTC,"I agree. For C++ completion, CEDET is quite far behind. Things are not too bad for C though. Accurate context sensitive completion is not easy, and CEDET tried to do that from the start but did not quite achieve production status. However, for other tasks that do not require knowledge on the whole source tree, CEDET is reasonably good. Such as jumping in current buffer and or refactoring at small scale. This is a good reference list (not all that is usable though) that CEDET can do a fair subset of it for C/C++.  I also have a look at refactoring for C++ in other commercial tools today. I can't believe people find such refactoring feature like this useful. I wonder whether you insert useless header while writing code or not."
emacs,2tpaew,RobThorpe,3,Tue Jan 27 11:35:21 2015 UTC,Seems promising. :)  Any plans for adding support for the C++ namespaces? Right now it can insert the functions before of after the namespace but not inside of it (even though the original declaration is inside the same namespace). I've tested it with a single function inside a namespace and an empty namespace in the header.
emacs,2tplgo,McHaaps,2,Mon Jan 26 10:58:56 2015 UTC,"What version of Emacs are you running (M-x version RET)? If you've got 24 or later, I strongly recommend using the built-in package system to install your theme."
emacs,2tow8j,kcin,3,Mon Jan 26 04:44:38 2015 UTC,"The agenda can be constructed from tags. So if you tag the top of  tree with ""backburner"" then its children inherit that tag too and you can construct the agenda like this: (tags-todo ""-backburner""), that is everything which does not have a backburner tag."
emacs,2tow8j,kcin,1 point,Mon Jan 26 06:55:51 2015 UTC,Is this different to calling org-tags-list? I was kinda looking for a solution that applied to org-agenda-list and org-todo-list etc.
emacs,2tow8j,ryuslash,1 point,Tue Jan 27 14:40:23 2015 UTC,It is for creating a custom agenda view which you can configure as you like: http://orgmode.org/manual/Custom-agenda-views.html
emacs,2tow8j,BasementTrix,1 point,Tue Jan 27 15:10:59 2015 UTC,"Ah right, yeah not really good for my purpose, i.e. exclude subtree from all agenda views."
emacs,2tmuet,bakuretsu,5,Sun Jan 25 18:29:09 2015 UTC,This is awesome! Great work on your first package :)
emacs,2tmuet,phyrne,2,Sun Jan 25 18:34:31 2015 UTC,"Thanks! Feel free to open issues on Github if you use it and find any bugs. I've only tested it in OS X and Ubuntu, and only in the GUI."
emacs,2tmuet,kaushalmodi,5,Sun Jan 25 18:56:41 2015 UTC,"Works great! I entered the zip-code ""27278"" and it showed weather forecast from Spain instead of from Hillsborough, NC. But entering ""Hillsborough, NC"" worked.  Can you add a minimal mode that temporarily shows the forecast in the minibuffer instead of in a new window?  Update: It looks like openweathermap does not support zip-code in 'standard package', not sure what that means.   You can use our geocoding system to find cities by name, country, zip-code (not included in standard package) or geographic coordinates. You can call by part of city name. To make the calling result more accurate you can put the city name and country divided by comma.   Source  Update 2: Zip code query works if appended with country name:  http://api.openweathermap.org/data/2.5/forecast/daily?q=27278,USA Source"
emacs,2tmuet,AndersBakken,2,Sun Jan 25 19:43:49 2015 UTC,I think displaying something in the mode line would be nice. E.g. Just the temperature.
emacs,2tmuet,kaushalmodi,1 point,Mon Jan 26 18:02:46 2015 UTC,"Ah okay. I'll update the docs, since I will probably never use anything but ""standard package,"" which I'm assuming is what you get without an API key.  I will have to look up how to do the minibuffer thing; I thought that the ""minibuffer"" was a single-line buffer intended for user interaction.  I can provide an option for not selecting the window, if you prefer to view the forecast and then close it with C-x 1 rather than q. I always wanted to just close it, so it made sense to me to select the window so that pressing q actually kills the buffer entirely. I might also be the only OCD user who tries to keep his buffer list short."
emacs,2tmuet,kaushalmodi,1 point,Sun Jan 25 19:57:44 2015 UTC,"Minibuffer can be used for user input as well as to show anything you want using the simple message function. Here's one of my use cases of that.  And welcome to the emacs community! :)  You probably know about the emacs community on stackexchange: http://emacs.stackexchange.com/ If not, feel free to visit it, simply browse or ask any question regarding emacs."
emacs,2tmuet,kaushalmodi,1 point,Sun Jan 25 20:04:02 2015 UTC,"So, you mean, display a very abbreviated forecast as a plaintext message in the minibuffer? I could probably whip up something like that.  For the file path thing, since I use Evil, I get the same thing with :pwd<RET>. Evil always changes pwd to the current file's location, which was something that I had to configure with various autocommands in Vim."
emacs,2tmuet,theldoria,1 point,Sun Jan 25 20:16:33 2015 UTC,Thanks! I have felt need at different times to copy the base file name or full path or full path with parts replaced with shell env var and thus the need of that the case statement you see in that code. That code copies the path in one of the 3 ways above and displays the same in the minibuffer.  I meant to simply show an application of the minibuffer for things other than user entry.
emacs,2tmuet,rson,1 point,Sun Jan 25 20:22:02 2015 UTC,I actually like the implementation of quitting using q. I instinctively hit that key to quit the window and was happy to notice that it was already implemented :)  C-x 1 is not useful for my use case as I usually work with frames having 3 or 4 windows. I can use winner-undo but I think that the display in minibuffer might be the cleanest minimal approach.
emacs,2tmuet,AndersBakken,3,Sun Jan 25 20:05:02 2015 UTC,"cool, put it on melpa pls"
emacs,2tmuet,AndersBakken,2,Sun Jan 25 20:43:01 2015 UTC,I will see about getting it into MELPA once I close all of the open issues. Glad you like it!
emacs,2tmuet,monotux,1 point,Sun Jan 25 21:18:19 2015 UTC,Getting it on MELPA may just get those issues closed for you.  Having the smallest barrier of entry generally makes it easier for others to contribute.
emacs,2tmuet,monotux,1 point,Mon Jan 26 12:04:28 2015 UTC,Sunshine has been accepted into MELPA!  http://melpa.org/#/sunshine
emacs,2tmuet,monotux,1 point,Wed Feb 4 17:26:40 2015 UTC,"Nice mode. I don't seem to have the function window-resize-no-error. I had to change it to window-resize to make it work. I'm running GNU Emacs 24.3.1 (x86_64-apple-darwin, NS apple-appkit-1038.36)  of 2013-03-12 on bob.porkrind.org from here:  http://emacsformacosx.com/"
emacs,2tmuet,Quasimoto3000,1 point,Mon Jan 26 04:47:12 2015 UTC,"The -no-error part isn't critical, it just seemed safer when I was looking for the right function to call. I will change it to window-resize for compatibility with Emacs 24.  By the way, you may have better overall results with emacs-mac-port, which is on version 25, and resolved a couple of crashing bugs that I had with ""Emacs for Mac OS X"". https://github.com/railwaycat/emacs-mac-port (you can install this easily with Homebrew)."
emacs,2tmuet,politza,1 point,Mon Jan 26 11:30:15 2015 UTC,Okay. Didn't know about that port. Will try it out.  Thanks
emacs,2tmuet,politza,1 point,Mon Jan 26 17:54:16 2015 UTC,"User request: Support for Celsius!   The amount of people using legacy units (Fahrenheit etc) are very few compared to the amount of people using the standard units (Celcius).   EDIT: Well that was actually easy to fix, here's a quick solution:   (defcustom sunshine-metric-units nil  ""If sunshine should use metric units or not. Disabled by default.""  :group 'sunshine  :type 'boolean)  (defun sunshine-make-url (location)   ""Make a URL suitable for retrieving the weather for LOCATION.""   (let ((units (if sunshine-metric-units            ""metric""          ""imperial"")))     (concat ""http://api.openweathermap.org/data/2.5/forecast/daily?q=""         (url-encode-url location)         ""&mode=json&units="" units ""&cnt=5"")))   Sorry for the formatting but you get the picture."
emacs,2tmtxb,phyrne,2,Sun Jan 25 18:24:59 2015 UTC,If you want auto-updating and clickable pop up notifications for mu4e you might check out https://github.com/IvanMalison/mu4e-notifications
emacs,2tmtxb,IvanMalison,1 point,Mon Jan 26 23:13:37 2015 UTC,"Good stuff, I had actually already discovered this a short while ago. Nice work :)"
emacs,2tmtxb,pxpxy,1 point,Tue Jan 27 12:46:52 2015 UTC,Nice writeup. Any ideas on address book integration though?
emacs,2tmtxb,IvanMalison,2,Sun Jan 25 18:34:36 2015 UTC,"This shouldn't be too hard to do. According to http://hints.macworld.com/article.php?story=20100130052524548  the address book is stored in a sqlite database. All you need to do is defadvice mu4e~fill-contacts to access the database and append contacts to the existing list.  Use  sqlite3 -separator ',' ~/Library/Application\ Support/AddressBook/AddressBook-v22.abcddb 'select ZABCDRECORD.ZFIRSTNAME, ZABCDRECORD.ZLASTNAME, ZADDRESS from ZABCDEMAILADDRESS join ZABCDRECORD on ZABCDRECORD.Z_PK = ZOWNER;'   to get the relevant information..."
emacs,2tmtxb,IvanMalison,1 point,Mon Jan 26 23:36:34 2015 UTC,"Thanks :)  Hmm, something I haven't considered. It auto-completes for those you've interacted with before, which is nice. Though, I don't actually use the address book at all."
emacs,2tmtxb,pxpxy,2,Sun Jan 25 18:37:40 2015 UTC,"This shouldn't be too hard to do. According to http://hints.macworld.com/article.php?story=20100130052524548  the address book is stored in a sqlite database. All you need to do is defadvice mu4e~fill-contacts to access the database and append contacts to the existing list.  Use  sqlite3 -separator ',' ~/Library/Application\ Support/AddressBook/AddressBook-v22.abcddb 'select ZABCDRECORD.ZFIRSTNAME, ZABCDRECORD.ZLASTNAME, ZADDRESS from ZABCDEMAILADDRESS join ZABCDRECORD on ZABCDRECORD.Z_PK = ZOWNER;'   to get the relevant information..."
emacs,2tmtxb,hexmode,1 point,Mon Jan 26 23:23:00 2015 UTC,Nice!
emacs,2tmtxb,hexmode,1 point,Tue Jan 27 12:45:48 2015 UTC,"I use my addressbook a lot, mostly for organizational purposes and to sync between my macs and iOS"
emacs,2tmtxb,fmargaine,1 point,Sun Jan 25 20:21:37 2015 UTC,"Tab completion for people you've interacted with works wonderfully, kind of.  That is, if you've interacted with several people named ""John"", then you'll have to type more to help the autocompletion.  And it remembers all addresses, even those you don't care about.  There must be a way to trim the addresses, but I haven't been motivated to fix  it yet."
emacs,2tmtxb,TweetsInCommentsBot,1 point,Sun Jan 25 19:14:14 2015 UTC,"Yep! I'm sure there are means of doing so, or perhaps restricting completion to just the address book (if such integration exists). It can be quite cumbersome having to type those few extra characters sometimes... (first world Emacs problem right there)"
emacs,2tmtxb,skillet-thief,2,Sun Jan 25 19:25:01 2015 UTC,Looks like I just need to read the documentation: Limiting the number of addresses.
emacs,2tp9x9,curious-scribbler,2,Mon Jan 26 07:31:45 2015 UTC,"The phrase ""text file"" is vague. Sometimes a file contains only ASCII text, in that case it's clear what it is. Decades ago non-english-speaking countries invented character sets to represent their languages. Often 8-bits are used, the first 7-bits represent ASCII, then if the 8th bit is high those 7 bits represent something else. Then there's the modern approach, Unicode, which attempts to encode all languages.  You've written some text that's not in the coding system ""latin-1"" (ISO 8859-1) which is the system traditionally used by English speaking countries and most European countries. (Windows uses ""code page 1252"" which is the same as latin-1 with some extra stuff added).  The problematic character is the  "" ’ "". That's a relatively new character, in the past single and double-quotes were the same at each side. Like ""this"" not “this”, 'this' not ‘this’. If you go back to that style your doc will probably save as latin-1, if you don't want to do that then save it as utf-8."
emacs,2tp9x9,RobThorpe,1 point,Mon Jan 26 10:45:27 2015 UTC,"If you go back to that style your doc will probably save as latin-1, if you don't want to do that then save it as utf-8.   How do I save it as utf-8?  How do I ensure that this doesn't happen again?   Can I not have emacs know that I want all further files to be accepted as utf-8."
emacs,2tp9x9,RobThorpe,2,Mon Jan 26 10:56:31 2015 UTC,"Read the section on coding systems in the manual.   How do I save it as utf-8?   By setting the coding system to utf-8 then saving: C-x RET f utf-8 RET   Can I not have emacs know that I want all further files to be accepted as utf-8.   Yes, for example: (prefer-coding-system 'utf-8) (modify-coding-system-alist 'file ""\.txt\'"" 'utf-8)  The settings are quite fine-grained. You don't want zip files (for example) to be treated as utf-8. You also probably don't want TeX files treated that way. See the variable file-coding-system-alist which is what modify-coding-system-alist changes.  Changing these settings can be tricky, there are still plenty of programs out there that don't take utf-8."
emacs,2tp9x9,RobThorpe,1 point,Mon Jan 26 12:47:06 2015 UTC,"Lord! Uhmmm I am going to use C-x RET f utf-8 RET as of now.   Later, I'll dig into the rest. Thanks a ton."
emacs,2tmysv,TheFrenchPoulp,2,Sun Jan 25 19:05:01 2015 UTC,"Not exactly answering your question, but I ended up forking a theme I liked (git clone into my site-lisp directory) and tweaking/adding whatever I wanted. It works out pretty well. If I later want to merge any updates to the original theme I have git to help me do that."
emacs,2tmysv,mjhoy,1 point,Mon Jan 26 04:18:38 2015 UTC,"I think I'm going to do that instead. Even though themes aren't really updated often, we won't be able to see updates when invoking list-packages : ( which was why I always installed everything through MELPA. But it's just themes, not a big deal."
emacs,2tmysv,40Cows,1 point,Mon Jan 26 13:25:13 2015 UTC,"M-x customize-faces, you can start typing what you want to customize and Tab for possible completions."
emacs,2tlrif,redguardtoo,1 point,Sun Jan 25 10:28:20 2015 UTC,"Hey, I like your new function to re-render old posts. I also started a nikola wrapper: https://gitlab.com/emacs-stuff/my-elisp/blob/master/nikola.el Mine doesn't render a post to html but adds properties to the post (tags, date, etc) and uses the org plugin (by punchagan also) to generate both org and html files."
emacs,2tlrif,dzecniv,1 point,Mon Jan 26 14:55:42 2015 UTC,Do you think it is possible to export a single org file into multiple blog article files with some layout and a startpage with latest blog articles in elisp only? So everything in emacs without nikola?
emacs,2tj98a,caisah,1 point,Sat Jan 24 18:43:11 2015 UTC,"Brilliant, thanks!  I've been meaning to write a blog post about helm sources; as far as I can tell you pretty much have to know which helm file to look in (helm-source.el) for all the options."
emacs,2tj98a,tryptych,1 point,Sun Jan 25 01:31:45 2015 UTC,"Awesome. Ive been trying to get some stuff working with helm, but im not a very good at reading elisp source code."
emacs,2tkkfj,the_whalerus,2,Sun Jan 25 01:24:29 2015 UTC,Oh the sheer amount of work it takes to make emacs usable from scratch.
emacs,2tkkfj,Erakko,1 point,Mon Jan 26 14:47:19 2015 UTC,Neat! Thanks for the edit!
emacs,2tkkfj,pxpxy,0,Sun Jan 25 03:16:51 2015 UTC,Nice. I have also been thinking of customizing my own emacs instead of using spacemacs. Space has more plugins that I ever need.   Ill probably go with standard emacs plus evil plus guidekey
emacs,2tie0i,rklv,8,Sat Jan 24 13:28:35 2015 UTC,Have you tried this trick?
emacs,2tie0i,rhabarba,1 point,Sat Jan 24 14:00:40 2015 UTC,Thanks a lot! That makes it almost as good.
emacs,2tie0i,hvis,1 point,Sat Jan 24 14:43:55 2015 UTC,"Interesting.  If you're using the unmodified NS port, you should M-x report-emacs-bug about this."
emacs,2tie0i,lazyklimm,1 point,Sun Jan 25 18:00:47 2015 UTC,"AFAIK, there was a TTF version of Terminus"
emacs,2tie0i,TomSwirly,1 point,Sat Jan 24 14:23:35 2015 UTC,"Consider using Aquamacs - for me, it fixes a lot of Mac issues while still being functionally identical to the *nixes I spend most of my day working on."
emacs,2tix2b,Acktung,2,Sat Jan 24 17:01:18 2015 UTC,"This is due to the fact that you're pushing the arrow keys before Emacs has finished loading.   Every time you use the arrow keys in a terminal application you're sending long codes that are then re-interpreted by the application as arrow keystrokes (can't remember the real reason behind, guess it comes from the VT1000 codes), so if your Emacs is still loading and you press the arrow keys, half of the code will then be interpreted as normal keypresses (0B) while the other half will just be ignored by emacs as it wasn't ready to receive the keystrokes.  In order to avoid this you just have to wait until Emacs is completely loaded before pushing the arrow keys!"
emacs,2tix2b,massi_x,1 point,Mon Jan 26 22:25:08 2015 UTC,Makes sense. I will chill out then while emacs is loading.
emacs,2tix2b,RobThorpe,1 point,Mon Jan 26 23:35:41 2015 UTC,"The obvious question is: does it happen with ""emacs -q""?  If it doesn't it's an init file problem, if it does then it's a terminal problem or Emacs bug."
emacs,2tix2b,mickeyp,1 point,Sat Jan 24 18:55:00 2015 UTC,Could be an encoding issue*. Type C-h C RET and it should spit out a bunch of info about the current buffer. It could be a unicode BOM marker.   = meaning it picks up your locale terminal setting
emacs,2tix2b,permetz,1 point,Sat Jan 24 21:57:47 2015 UTC,"You're on Windows? If so, BOM marker would be my guess."
emacs,2tg1qm,BruceConnor,2,Fri Jan 23 21:19:45 2015 UTC,Is Emacs 25 out?
emacs,2tg1qm,__notmythrowaway__,3,Sat Jan 24 00:30:55 2015 UTC,"No. This series of posts is a preview of what's coming. 25.1 is the current development version, so you need to build it yourelf."
emacs,2tg1qm,z27,1 point,Sat Jan 24 03:16:06 2015 UTC,"One could get the OS X version from the Nightlies section here: http://emacsformacosx.com/builds, Currently, GNU Emacs 25.0.50.1 (x86_64-apple-darwin13.4.0, NS appkit-1265.21 Version 10.9.5 (Build 13F34)) of 2015-01-13 on builder10-9.porkrind.org"
emacs,2tg1qm,CodyChan,1 point,Sat Jan 24 14:05:58 2015 UTC,Not the latest stable version.
emacs,2tg1qm,theologe,1 point,Sat Jan 24 00:42:30 2015 UTC,I noticed the other day that I'm already using 25. And I have no memory of how I got it...
emacs,2tg1qm,benfitzg,8,Fri Jan 23 23:46:19 2015 UTC,Richard Stallman spiked your drink then took over from there...
emacs,2tg1qm,fmargaine,1 point,Sat Jan 24 02:51:19 2015 UTC,"If the package descriptor is optional, where do version information and dependencies come from?"
emacs,2thjhb,SalamanderStreet,21,Sat Jan 24 05:13:31 2015 UTC,"The difference between Vim and Emacs:   Emacs is a programming platform shipped with a text editor. Vim is just a text editor, and good at it.   Nowadays you have spacemacs if you want an easy switch from Vim. From the homepage:   Spacemacs is a user-friendly and well-documented Emacs kit that integrates the best Emacs packages out there. It uses Evil Mode to combine the ergonomic editing features of Vim with the extensibility of Emacs.  Spacemacs is designed to be approachable to users coming from Vim--you do not need any prior experience with Emacs to get started.   Everything is already done for you. If not, open an issue and discuss.  If you don't like to use premade configuration, you can always build your own with this guide for Vimmers who switch to Emacs + Evil.  You can see another answer I wrote for a Vim user.  See this page for more demos.  See this comment by a Vim user to know what Vim users may get with Emacs.  Another comment from another Vim user. A blog post of a Vim user switching to Emacs.  Another answer on SE."
emacs,2thjhb,tuhdo,6,Sat Jan 24 06:16:24 2015 UTC,"Emacs is a programming platform shipped with a text editor.   with several text editors (standard, cua, viper, evil etc)"
emacs,2thjhb,lazyklimm,3,Sun Jan 25 18:53:52 2015 UTC,I fully agree :)
emacs,2thjhb,tuhdo,6,Sun Jan 25 19:03:33 2015 UTC,"Vim is just a text editor, and good at it.   Not true. Vim is a text editor with a bunch of additional crap done badly in C. (Emacs is a text editor with a bunch of additional quality features written in a high-level language, Elisp).  This article is a good explanation of what I mean by that: http://geoff.greer.fm/2015/01/15/why-neovim-is-better-than-vim/  It neglects to mention some of the ridiculous ""features"" vim has NIH'd. For example, they wrote their own spelllchecker (complete with their own format for dictionaries) and encryption, in C. Emacs, of course, uses aspell and gpg."
emacs,2thjhb,catern,3,Sat Jan 24 06:41:38 2015 UTC,"It neglects to mention some of the ridiculous ""features"" vim has NIH'd. For example, they wrote their own spelllchecker (complete with their own format for dictionaries) and encryption, in C. Emacs, of course, uses aspell and gpg.   Some of this -- is at times understandable when you consider support for BeOS, Amiga, <insert obsolete platform here>, being considered fundamental and not wanting to have to maintain a separate ported version of those other libs or utilities."
emacs,2thjhb,robertmeta,-2,Sat Jan 24 15:54:09 2015 UTC,not wanting to have to maintain a separate ported version of those other libs or utilities.    writing from scratch and maintaining own version of those are much harder
emacs,2thjhb,lazyklimm,3,Sun Jan 25 18:55:51 2015 UTC,Than porting large libraries to platforms they were never intended for?  I disagree -- but i get your gist.
emacs,2thjhb,robertmeta,0,Sun Jan 25 22:45:17 2015 UTC,"At least BeOS, AFAIK, had unix compatibility layer"
emacs,2thjhb,lazyklimm,3,Mon Jan 26 07:35:55 2015 UTC,"Sure, but the platform list is long, just a few of the more odd duck ones (NOT a complete list) include: Atari MiNT, BeOS, DOS (and compatible, FreeDOS, etc), Windows  95/98/ME, OS/2, OS/390, MorphOS, OpenVMS, QNX, RISC OS, and Classic Mac OS.  Those all don't have compatibility layers, and ""compatibility layers"" just make it less agonizing to port and maintain, not painless.   Now, the debate about if one should worry about such platforms is an open question -- and NeoVim has answered with a resounding ""nope""."
emacs,2thjhb,robertmeta,3,Mon Jan 26 15:33:26 2015 UTC,"Vim has the best text editing concepts, even if the actual code is now frowned upon. Concepts borrowed by evil-mode, without which i wouldn't touch emacs with a ten-foot pole.  About the above linked article - frankly, everyone can target an open source software and disagree with its author(s) until the cows come home, that doesn't make the attackers smarter, efficient or better than they were. Of course the authors have their own hystorical style, their own deficiencies, their own desire about how to work on that software, their own limited solutions that actually worked best for their purpose (after all, some of them worked their asses for more than ten years to develop 'their dream'). Everyone is free to fork and change. Those who attack instead, probably just want some free fame   nanos gigantum humeris insidentes"
emacs,2thjhb,VanLaser,3,Sat Jan 24 16:10:42 2015 UTC,"You should think of Vim as a concept, not an implementation. You have better implementation available now, that's Evil. Obviously, you should switch. Don't bind yourself to a particular Vim implementation."
emacs,2thjhb,tuhdo,3,Sat Jan 24 16:30:30 2015 UTC,"Yes, I'm talking about Vim as a concept, in a context in which I'm not asking advices about switching ..."
emacs,2thjhb,VanLaser,2,Sat Jan 24 16:36:45 2015 UTC,"Vim has the best text editing concepts,   No. That's vi."
emacs,2thjhb,catern,2,Sat Jan 24 16:21:21 2015 UTC,"No, that's not vi. To quote from Evil's manual:   Evil is an extensible vi layer for Emacs. It emulates the main features of Vim1 , turning Emacs into a modal editor.   [..] Vim also adds some functions of its own, like Visual selection and text objects."
emacs,2thjhb,VanLaser,-2,Sat Jan 24 16:28:55 2015 UTC,"Text objects and visual selection are trivial extensions of the core concepts of vi.  If people realised more that they love vi, and not vim, they would be more willing to escape the horror that is vim. vim has held back terminal text editors for years by being so internally awful."
emacs,2thjhb,catern,1 point,Sat Jan 24 16:36:24 2015 UTC,Text objects and visual selection are trivial extensions of the core concepts of vi.   LOL
emacs,2thjhb,VanLaser,2,Sat Jan 24 16:39:50 2015 UTC,"They're just more nouns. People have been promulgating the ""vi as language"" view for long before vim."
emacs,2thjhb,catern,-7,Sat Jan 24 16:45:05 2015 UTC,"NeoVim, another pointless egomaniac product made by people who couldn't accept that Bram would have to review their patches."
emacs,2thjhb,rhabarba,12,Sat Jan 24 13:58:27 2015 UTC,"NeoVim is a response to the fact that Vim was an unwelcome place for contributors.  It become this way for a lot of reasons, most of them understandable but unacceptable in modern times.  Supporting dead platforms (that aren't even tested), insane lack of basic code hygiene, virtually no testing and a single point of failure are all unacceptable.  Additionally, Vim was started long before the ""modern"" way of running open source projects and simply never made the jump.  The guy who started NeoVim is is far from egomaniacal -- exceptional egalitarian actually.  Focusing on community, openness and contributors.  Cleanup the source so more can be involved, have it on github so more can be involved, share the money via bounty-source so more can be involved.  Your comment feels like an ill researched swipe at a project that is basically an inversion of the truth."
emacs,2thjhb,robertmeta,-2,Sat Jan 24 15:40:11 2015 UTC,"As a Vim contributor I can't confirm it to be an unwelcome place for me. I feel fine. All I need to do is follow the rules. Does NeoVim not even have coding style rules? They do? See, so does Vim. And I can't see how ""dropping support for platforms we don't use ourselves"" is a feature or even an improvement."
emacs,2thjhb,rhabarba,4,Sat Jan 24 15:57:38 2015 UTC,"We obviously view vim-dev in radically differently.  Conceal took half a decade+ to get in, breakindent nearly as long.  Async patches, nearly a dozen have been purposed, all of them shut down.  Hell, even updating to ANSI C standards has been shut down.  I suspect the stubbornness (and head-in-the-sand style denial) of the current vim-dev community will be its death, which is fine, renew and refresh.  NeoVim improves in ways that matter: cleaner code, better testing, async, separate backend/frontend, usable as a library, better syntax highlighting and above all else, a more welcoming community that doesn't suffer from a self-justified single point of failure.  Since it works with Vim plugins, really all it takes to get people to switch is a plugin that works on NeoVim, but doesn't work on Vim (of which there will be many, and they will be much faster too boot).    The below exchange was the point I lost a lot of faith in the Vim project.    Q. How can the community ensure that the Vim project succeeds for the foreseeable future? A. (Bram Moolenaar) Keep me alive. :-)   (reference: http://www.binpress.com/blog/2014/11/19/vim-creator-bram-moolenaar-interview/)  EDIT: I am curious about your patches, links?   EDIT2: Feels relevant regarding patches: https://groups.google.com/forum/#!topic/vim_dev/m1RMplyIbug (one of the many threads about patches and patch application, which is why I am so excited to see your successful patch links)."
emacs,2thjhb,robertmeta,-1,Sat Jan 24 16:25:38 2015 UTC,"I won't link anything related to my real name here or somewhere else. :-)  I, for one, take Bram's quote above as a joke."
emacs,2thjhb,rhabarba,4,Sat Jan 24 16:43:21 2015 UTC,You must be very proud of your secret patches to Vim.  /ninjamodeopensourcepatches
emacs,2thjhb,robertmeta,3,Sat Jan 24 16:45:35 2015 UTC,"Eh?  he's saying he doesn't want to link his real name to his Reddit account, not to keep his vim patches secret."
emacs,2thjhb,EatMoreCrisps,1 point,Mon Jan 26 14:12:38 2015 UTC,"I think (s)he doesn't have a single patch to vim, nor is even active on vim-dev list.  My implication is that (s)he is a huge liar.  Even among the most ardent vim developers & supporters (those 10+ years in community, with multiple successful patches) there is a general acceptance there is a problem, normally the discussion comes around to ""but all these solutions are worse than the problem""."
emacs,2thjhb,robertmeta,10,Mon Jan 26 15:38:21 2015 UTC,Few days ago I switched to Emacs and main reason is orgmode.
emacs,2thjhb,atmarama,9,Sat Jan 24 07:06:31 2015 UTC,i wrote a couple blog posts about my switch from vim to emacs.  http://bling.github.io/blog/2013/10/16/emacs-as-my-leader-evil-mode/  http://bling.github.io/blog/2013/10/27/emacs-as-my-leader-vim-survival-guide/  http://bling.github.io/blog/2015/01/06/emacs-as-my-leader-1-year-later/
emacs,2thjhb,hyperbling,4,Sat Jan 24 15:49:41 2015 UTC,"I dwelled on a similar issue for some time about a year ago. I made the switch to Emacs after two years of Vim to try it out. This made me realize that Emacs's integration comes at a cost.   Most of the Emacs equivalents for other programs are 'quirky'. Yes you may run a shell in Emacs, but it will not be as complete as running it in your terminal emulator. You may use ERC, but I found it not to be as polished as irssi. You may manage windows, but just not as good as i3 (or any other WM). You may edit text, just not as comfortably as Vim.  Still, I found no good substitute for Emacs for developing Lisp, taking advantage of interactivity for REPL languages and easily extending your environment. Also, orgmode.  As a result, I now have a working setup in both vim and Emacs. I use vim whenever I want to do a quick edit or I want to develop in C or Python. I use Emacs for Lisp and Haskell. If I want to learn a new language, I try out both vim and Emacs modes of it and see which one I like more.  In the end, you need to try it out for a while to see what you are missing out on and to decide if that matters to you."
emacs,2thjhb,rklv,2,Sat Jan 24 13:01:59 2015 UTC,"Most of the Emacs equivalents for other programs are 'quirky'. Yes you may run a shell in Emacs, but it will not be as complete as running it in your terminal emulator. You may use ERC, but I found it not to be as polished as irssi. You may manage windows, but just not as good as i3 (or any other WM). You may edit text, just not as comfortably as Vim.   I find Emacs as good or better in those applications. I am using i3, and ust comparing about WM features, I miss almost nothing. I haven't used IRC yet, so I cannot say. But what does being polished have anything to do with features?  Magit is vastly easier to use than the stock git. Vastly more productive.  Dired and Helm are more effective ways to navigate files than cd and ls. Dired uses ls anyway, but make it better with a better interface. Similar for Helm, with its live grep, which is ultimately superior to stock grep.  Org-mode is a pretty competitive note taking and todo application.   Finally, even if an application is ""worse"", you can still combine with other applications in the Emacs ecosystem to support it. For example, when writing note with Org, you can compose programming language sources in your Org text using Emacs's own major modes for writing those. Now, if you use a two separate programs, one is code editor and one is markdown, you have to constantly switch to code editor, copy the code and paste back in your markdown editor with no highlighting. Emacs has no such problem, or if you have to do it that way, it is easy to use the same editing facility between both buffers than different editing facilities between two editors.  So, you conclusion about Emacs doing its own ways is worse than the standalone applications is inaccurate.   As a result, I now have a working setup in both vim and Emacs. I use vim whenever I want to do a quick edit or I want to develop in C or Python   What make Vim better than Emacs in C or Python? For Python, it should have similar capacity as the Lisp environment; that is, the interaction between code buffer and REPL buffer. For C, I got all of these things. If you want great clang integration, check irony-mode. I will update my guide with it soon. With Emacs and Helm Projectile, I can jump to any file from anywhere using a single command, even if a project has 30k or 50k files. It can even understand filename at cursor and jump to it in an instantly, even if the filename at point is just plain text like in a .txt file."
emacs,2thjhb,tuhdo,1 point,Sat Jan 24 13:58:35 2015 UTC,"I find Emacs as good or better in those applications. I am using i3, and ust comparing about WM features, I miss almost nothing. I haven't used IRC yet, so I cannot say. But what does being polished have anything to do with features?   Being polished has something to do with being better. As for i3, I think Emacs's window managing capabilities cannot even be compared to it. For my needs, workspaces are indispensable. The closest thing that Emacs has is creating new windows, after which you rely on the window manager running Emacs to stay organized. This is unless, you add something close to workspaces like tabs.   Dired and Helm are more effective ways to navigate files than cd and ls. Dired uses ls anyway, but make it better with a better interface. Similar for Helm, with its live grep, which is ultimately superior to stock grep.   Until the addition of Helm, Dired is not that much more compared to cd and ls. And I did not mention in the previous post that I use ranger and z (primarily z) to navitage within the shell. Comparing them really does not make a lot of sense IMO, they are completely different workflows. In one of them Emacs itself is the parent from which you call everything. A typical Vim workflow of mine consists of managing everything except text editing from outside the editor, and going in and out of multiple Vim instances running inside the terminal emulators that are managed by i3.  As for my preference of Vim for C and Python, I did not make myself clear there. At the moment, I do not use Emacs unless it is a pain to use Vim for the task at hand. This is not necessarily to say that Vim has some features that I need that are unmatched by Emacs.  OP could just as well end up in my situation and I think that is okay."
emacs,2thjhb,rklv,2,Sat Jan 24 16:07:53 2015 UTC,"Being polished has something to do with being better. As for i3, I think Emacs's window managing capabilities cannot even be compared to it. For my needs, workspaces are indispensable. The closest thing that Emacs has is creating new windows, after which you rely on the window manager running Emacs to stay organized. This is unless, you add something close to workspaces like tabs.   The advantage of Emacs's window manager is that you can script it easily to anything you want. See golden-ratio for example.   You can create savable workspaces across sessiosn easily. Check workgroups2.  If you want good looking tabs that works in terminal and GUI, use Elscreen. Here is how it looks like. The tabs are not limited to a buffer like Vim. It is an actual workspace that can hold many buffers.  And not forget that the advantage of having its own window manager is that you do not have to setup it across different OSes, like Windows. You can recreate the same Emacs experience easily whether you are on Linux, OS X or Windows. With Vim, not so easy, especially on Windows and you use plugins in Vim.   Until the addition of Helm, Dired is not that much more compared to cd and ls. And I did not mention in the previous post that I use ranger and z (primarily z) to navitage within the shell.   Dired leaves its buffers behind whenever you enter directories. So, with a simple buffer switch, you can easily go back to where you was. You can use i to insert a subdirectory to operate on two or more directories at once in the same buffer. You can even bookmark the Dired buffers to use across sessions, with sub-directories saved. I don't think you can do such a thing with stock Bash easily compared with what is offered with Dired in stock Emacs. I used fasd, but I do most things in Emacs so it's not relevant anymore.   Comparing them really does not make a lot of sense IMO, they are completely different workflows. In one of them Emacs itself is the parent from which you call everything. A typical Vim workflow of mine consists of managing everything except text editing from outside the editor, and going in and out of multiple Vim instances running inside the terminal emulators that are managed by i3.   But the OP is asking how Emacs is better than Vim. The advantage of doing everything from inside is that the applications inside Emacs can support each other to bring a greater experience as a whole, unlike non-integrated programs that have its own ways of working."
emacs,2thjhb,tuhdo,8,Sat Jan 24 16:28:10 2015 UTC,"emacs can emulate vim (evil-mode, spacemacs).  vim cannot emulate emacs"
emacs,2thjhb,Captain-Commando,4,Sat Jan 24 07:49:46 2015 UTC,"I used Vim for 10 years as my main programming tool (C mainly, but Ruby, C++, shell and Java too).  I use Emacs full-time for a year now, and the main advantage is the integration with external tools. Vim is good as a standalone editor, but the lack of asynchronous operations means doing a lot of clunky hacks with screen / tmux to have a fully working env.  Emacs have some neet things like eshell, gdb integration, flycheck and such.  Plus, Emacs is easier to configure to fit in your workflow, whereas Vim forces you to adapt your workflow to it."
emacs,2thjhb,tampix77,2,Mon Jan 26 09:02:25 2015 UTC,"Control and Customization.  I think the path the Emacs sometimes becomes obvious.  If you have 50+ plugins in Vim -- maybe time to consider Emacs.  If you have a 2000+ line vimrc and are wondering if you should break it into sections and separate files -- maybe time to consider Emacs.  If you constantly think, ""ugh, why can't I just do this in Vim"", probably time to consider Emacs."
emacs,2thjhb,robertmeta,2,Sat Jan 24 15:51:36 2015 UTC,"Consider my comment here: http://www.reddit.com/r/vim/comments/2coqzs/how_do_you_work_with_vim/cjk7ndo  I should expand it into a blogpost, really..."
emacs,2thjhb,catern,2,Sat Jan 24 06:44:02 2015 UTC,"Despite the fundamental difference, the actual difference is not that big. Most often, when people say they're using Vim, they use it almost purely as a text editor and resort to system-level tools for other tasks - like, bash or zsh for working with file system, tmux or i3wm for windowing, git for version control, etc.  When people say, they're using Emacs, most often it means that they ""do everything inside Emacs"": use Dired (internal file manager) for working with filesystem, internal window system, magit to interface with git.  The dissection is not really strict and most people use something in between, but those are the 2 poles.  If ""Emacs way"" rings to you, you can give it a try. Note, that if you simply like the Vim keybindings, there's several ways you can get those inside Emacs (evil-mode being the most common way).    If the whole approach doesn't sound right to you, probably, it's not worth trying."
emacs,2thjhb,sergeinosov,1 point,Sat Jan 24 05:53:39 2015 UTC,"Long time Emacs users often customize it so heavily that it is effectively a bespoke text processing environment. As such, you can see Emacs as a platform for building your own text processor.   It's default text editor is a bit clunky, but the foundation is solid, and the package manager contains a lot of interesting building blocks to get you started."
emacs,2thjhb,bastibe,1 point,Sat Jan 24 13:06:55 2015 UTC,"Funny that this post is so much down voted on /r/emacs, if it was posted on /r/vim why not but here, that's surprising.  Or people are tired to repeat always the same thing ;-)"
emacs,2thjhb,syl20bnr,3,Sat Jan 24 22:49:13 2015 UTC,"To be charitable, I have to imagine a lot of downvotes were along the lines of ""are you too lazy to do a websearch, this topic is done to death out there?"".    I'd like to hope it's not some pissy tribal reaction.  Please?"
emacs,2thjhb,EatMoreCrisps,1 point,Mon Jan 26 14:09:52 2015 UTC,I have used vi/vim since first encountered Unix mid 80's. Tried emacs once and gave away as bad joke due to all the funny keystrokes - too many to remember. vi/vim is modal and a pretty good editor. emacs is more like development environment with editor. I have added evil mode and now working on getting emacs fine tuned so have best of both worlds. I think of horses for courses.
emacs,2thjhb,ozhank,0,Sun Jan 25 05:13:32 2015 UTC,"If you want to learn emacs, just do it and decide for yourself if it's better for you.  If better was the same for everybody, Baskin-Robbins would only sell one flavor."
emacs,2tglsl,michaericalribo,6,Fri Jan 23 23:52:59 2015 UTC,"Hello! This should do the trick:  (defun script-on-org-save ()   ""Run external script on org-mode save""   (when (eq major-mode 'org-mode)     (shell-command-to-string ""command"")))  (add-hook 'after-save-hook #'script-on-org-save)   If you want to include the file path of the file you are saving in the shell command, then add this to previous defun, where ""%s"" is file path:      (shell-command-to-string (format ""command %s"" buffer-file-name))"
emacs,2tglsl,ellakk,2,Sat Jan 24 01:33:43 2015 UTC,"That's right. I don't think you need #'script-on-org-save just 'script-on-org-save will do.  To add to eliakk's reply. Hooks are a list of functions. For a ""normal"" hook each of the functions are executed with no arguments.  They're executed at particular times. They're a bit like callbacks in a GUI toolkit."
emacs,2tglsl,RobThorpe,1 point,Sat Jan 24 17:03:18 2015 UTC,Thanks for the input. What does # do?
emacs,2tglsl,ellakk,1 point,Sat Jan 24 18:06:43 2015 UTC,"My bad, it's not needed and does exactly the same without the #. Check this about what it does."
emacs,2tglsl,RobThorpe,1 point,Sat Jan 24 18:20:19 2015 UTC,"Let's say we have the code: (foo bar baz)  Lisp looks for a function named ""foo"" since it's in the first position.  It looks for variables called ""bar"" & ""baz"" because they're in the positions after.  What do we do when we want to talk about the symbol ""foo"" rather than it's value as a variable. Quote can be used for that 'foo is short for (quote foo). We can also quote a whole list: '(1 2 3). That means we can quote code too.  Code can be quoted and used for execution later. But, such code can't be compiled. It runs slowly through the interpreter, not through bytecode.  Emacs Lisp contains a special way to quote code: #'foo which is a short for (function foo). It roughly means ""this is a symbol representing a function"".  This has two benefits. Firstly, if the symbol given doesn't have an associated function then an error is raised straight away. Secondly, if a list is quoted then we can be sure the list represents code, so it can be byte-compiled. That said, it isn't really necessary these days. The byte-compiler recognizes (lambda ...) as always representing code, so #'(lambda ...) and (lambda ...) do the same thing.  In ellakk's code the #' is unnecessary because ""add-hook"" knows that it's inputs should be symbols representing functions. It checks that they are."
emacs,2tglsl,kaushalmodi,1 point,Sat Jan 24 19:17:09 2015 UTC,Here's more on the use of sharp quotes: http://endlessparentheses.com/get-in-the-habit-of-using-sharp-quote.html
emacs,2tdaus,abhi,2,Fri Jan 23 04:08:27 2015 UTC,Why not use org for the whole flow? You don't need evernote or day one at all.
emacs,2tdaus,p4p3r,3,Fri Jan 23 15:11:52 2015 UTC,"I've noticed when trying to use org for all aspects the collection bits can be cumbersome when away from Emacs. Maybe mobile org is the answer here, but I've yet to have it configured in such a way where it is really useful because I can't simply add an item to an exsiting outline. I do hope someone that is more patient has figured out a good workflow here."
emacs,2tdaus,ionrock,4,Fri Jan 23 16:30:42 2015 UTC,org-trello makes a better mobile alternative.
emacs,2tdaus,tuhdo,1 point,Fri Jan 23 16:54:50 2015 UTC,I came here to recommend using trello to the OP and now I've found this. +kudos!
emacs,2tdaus,Acktung,2,Sat Jan 24 01:15:08 2015 UTC,"Maybe mobile org is the answer here   Some people, when confronted with the problem of using Org on mobile, think ""I know, I'll use MobileOrg."" Now they have two problems.  Seriously, don't bother with MobileOrg or MobileOrgNG: they are a nightmare, with all due respect to the authors. I gave up on using either of them, at least on Android. They are buggy and the workflow is very unorthodox. We would have a better luck with a working mobile version of Emacs."
emacs,2tdaus,alecigne,1 point,Sat Jan 24 14:29:12 2015 UTC,You can use org-capture and then refile at a later point in time if you're on the move
emacs,2tdaus,p4p3r,1 point,Fri Jan 23 17:25:30 2015 UTC,Basically this reason.
emacs,2teinj,bakuretsu,1 point,Fri Jan 23 13:57:13 2015 UTC,"Here's that definition: https://github.com/ejmr/php-mode/blob/master/php-mode.el#L1426-L1427  AFAIK, the quote should be removed."
emacs,2teinj,hvis,1 point,Fri Jan 23 20:21:40 2015 UTC,I opened a pull request.
emacs,2teinj,ericjmr,1 point,Sun Jan 25 16:44:48 2015 UTC,"Maintainer of PHP Mode here, just wanted to apologize for the problem and thank you for the detailed information about the bug."
emacs,2tbpok,mooglinux,3,Thu Jan 22 20:29:50 2015 UTC,"Can org-mode be used as a node graph of information?    You can tag things and you can generate multiple agendas based on tags. So the same task can exist in multiple agendas. It will exist physically at one location, but it can appear in multiple places. So if you use tags you can even put everything into a single file and use only tags to organize them."
emacs,2tbpok,kcin,1 point,Thu Jan 22 21:08:48 2015 UTC,Can an item be edited from an agenda view?
emacs,2tbpok,kcin,1 point,Thu Jan 22 21:21:02 2015 UTC,"I run a fairly old org (lazy to update), so I don't know what's possible with the newest one. With my org version you select the item from the agenda view, it jumps to the physical location, and there you can edit it. A newer org may allow it to edit it in place. It's surely doable."
emacs,2tbpok,abo-abo,2,Thu Jan 22 21:35:23 2015 UTC,"Graphs are hard.  org-mode's natural syntax is a tree. Trying to make a tree look like a graph won't be easy.  I'm fine dealing with a forest of unrelated trees: org-mode fits perfectly for that.  Just put each tree into a different file.  Think of paper notebooks: they're also trees. You can color-code them all you want, you won't coerce a notebook to be a graph.  Still, notebooks are pretty useful. Same thing with org-mode."
emacs,2tbpok,abo-abo,1 point,Thu Jan 22 21:04:14 2015 UTC,"Is there a way to filter for the ""leaves""? For example, if I put a series of tasks on increasing heading levels as sub-tasks of the higher todo, could it be filtered for only those TODO without dependancies?"
emacs,2tbpok,chris_mcmahan,3,Thu Jan 22 21:25:23 2015 UTC,"I don't even know anymore. I think that I'll be declaring org-mode bankruptcy some time this month.  I got started with Organize Your Life in Plain Text! more than a year ago, putting things that I didn't completely understand into my config. I listened to GTD on tape twice, and I was pretty optimistic about it. Now, I see that many things don't work for me:   tracking time with clock in / clock out doesn't work, assigning efforts is out of the question TODO dependencies don't work: it's much easier to just define a flat list of TODOs per-project, and pick them off randomly multiple agendas don't work: it's too much hassle to maintain more than one tags don't work: there's already enough properties for each entity: the file, the heading, the TODO state: that's more than enough for me.   What works:   organizing information in a tree of depth not more than 3 code blocks in wikis HTML export capturing stuff, especially with org-protocol flat per-project TODO lists one agenda for setting deadlines   What I plan to do:   eliminate all agendas but one eliminate all files that contribute to the agenda, but gtd.org flatten gtd.org as much as possible get a better archiving scheme keep all info and flat TODO lists in per-project org-mode wikis. I already have 40 of them. By the end, it will be around 50."
emacs,2tbpok,tuhdo,2,Thu Jan 22 22:06:24 2015 UTC,"I would second kcin on this. Tagging sounds like the solution for you. Your math assignment can have a tag for 'math', 'school', 'assignment', or any other arbitrary categorization you can think up."
emacs,2tbpok,tuhdo,1 point,Thu Jan 22 21:41:59 2015 UTC,"Let's go through one by one:   Collection   As you said, covered.   Organization   Organizing tasks that depend on each other already exists. Check org-depend. You can make tasks that depend like this:   Many tasks are required to start a task. Let's use this sample Org content as an example and paste it in an Org file (the messy text here is for reading only):    +TYP_TODO: TODO NEXT | DONE   TODO Win a million in Las Vegas  :PROPERTIES:  :ID: win-money  :END:       TODO Buy an airplane  :PROPERTIES:  :ID:       buy-a-airplane  :END:       TODO Write report  :PROPERTIES:  :BLOCKER:  buy-a-airplane win-money  :END:    Move point to the first line and press C-c C-c to use only 3 states: TODO, NEXT and DONE for this simple example.  There are 3 tasks. The first two tasks have the IDs: win-money and buy-a-airplane. The last task has no ID but a property called BLOCKER that contains the ID of above tasks. It means that only when the abvoe two tasks are finished, it is allowed to switch to DONE status. Otherwise, if you try to switch next task states with M-<right>, it only changes to the last state except DONE and add a :blocked: tag. Now, change the above two tasks to DONE and try the last task again.   One task blocks many tasks. Let's use this example (click the link to download the actual text, the messy text here is for reading only):    +TYP_TODO: TODO NEXT | DONE   TODO Do math homework  :PROPERTIES:  :ID: math  :END: TODO Do physics homework  :PROPERTIES:  :ID:       physics  :BLOCKER:  math  :END: TODO Write report  :PROPERTIES:  :ID:    report  :BLOCKER:  math  :END:    C-c C-c the top line again.  Now, you can only start the last two tasks with IDs: physics and report only when you finish the first task with ID: math.  Does Org-mode behave like a graph now?   Filtering, querying, etc   Yes, use org-sparse-tree, which is bound to C-c /. After pressing the key sequence, you will see a bunch of options that allow you to narrow to tasks with specific criteria along with its key binding to the left, i.e. [/] regexp (press / to narrow to a certain regex). Sparse tree documentation.  To preserve the original view (because if you narrow to something, Org folds irrelevant things), clone the current buffer with C-x 4 c (commnad `clone-indirect-buffer) and narrow on that.   Focusing on what is important   You can use org-capture and refile (put the captured task into an org file) later.  EDIT: All you want to know about advance searching in Org. It covers things you need like references something related to something."
emacs,2tbpok,JohannWolfgangGoatse,1 point,Fri Jan 23 15:31:09 2015 UTC,"That almost does everything I want. It's very very close.   Is there a straightforward way to specify relationships between two or more specific nodes? Org-index seems tantalizingly close, but it looks more like a list of bookmarks.   I guess I am looking for a way to use nodes themselves like tags. Tags with meta data and contents. Imagine being able to filter and search tags the same way you filter and search nodes. Imagine being able to assign due dates to a tag, and therefore all items with that tag. Then if that big project deadline changes, the deadlines of all subtasks are updated automatically! Nodes could inherit properties from their tags, and that way all have certain properties linked together. Org does have property and tag inheritance, but only for children in outline trees.   The only thing I can think of would be to create a new tag for each node to designate children of that node? Or a node to represent each graph edge, and a unique tag for all nodes who share that edge?"
emacs,2tbpok,kcin,1 point,Fri Jan 23 18:43:24 2015 UTC,"Is there a straightforward way to specify relationships between two or more specific nodes?   One way is using tags. You can group a set of nodes using a tag and can query nodes in the tag. You can also use tag group to group related tags, and later querying that tag group will display all the nodes of the tags in the tag group."
emacs,2tbpok,tuhdo,1 point,Sat Jan 24 05:22:50 2015 UTC,"A key thing for me is the ability to hide everything I am not immediately working on. I can't have a gigantic .org file full of a thousand miscellaneous items sitting in front of my eyes, even if you can fold all the headings.   Have a look at http://www.gnu.org/software/emacs/manual/html_node/emacs/Narrowing.html (especially narrow-to-defun)"
emacs,2tbpok,Whil-,1 point,Fri Jan 23 16:55:38 2015 UTC,"Oooh Cool! Can you narrow multiple regions? If you had different chapters in a book you were writing all in different nodes in different locations in the file, for example, can you narrow down to only the text of one or two nodes which can be edited as if they were a single continuous piece of text? With some dividing line to denote where the contents of one node end and another begins.   There is a software program for writing called Scrivener which offers this ability, and it is one of its greatest strengths. It would be awesome to be able to edit a bunch of nodes as if they were contiguous in the org file, even if the nodes actually existed in different parts of the file (or maybe even different files!?)"
emacs,2tbpok,Whil-,1 point,Fri Jan 23 17:22:42 2015 UTC,Sparse trees can be used for this: http://orgmode.org/manual/Sparse-trees.html
emacs,2tbpok,kcin,1 point,Fri Jan 23 18:27:58 2015 UTC,You should take a look at advance searching in Org. It covers things you need like find all references of something related to something or show all reference material related to calculus or differential equation.
emacs,2tbpok,murdsdrum,1 point,Fri Jan 23 18:43:59 2015 UTC,"It seems you want a taxonomy or keyword-based knowledge system. Kind of like evernote, where you can enter notes and tag them with relevant keywords. Orgmode  can do that. It supports tagging and tag groups. Albeit a bit cumbersome now, but doable. You can ofc also relate things by outline depth but I'd use that with care to start. Problem with relying on outline is the fact that your node has a space-dependency in the system and you'll meet resistance when moving things. You'll also realise pieces of knowledge you'd want to also be somewhere else. So, use tags as much as possible and use the outline mostly for structure ""inside"" the nodes, so to say..  In addition to tags as ways of linking information you can ofc use TODO keywords and categories. Those three ways of marking up your nodes are basically the same, only realised in different ways. Linking nodes directly to each other without keywords can be done using headline-links or custom_id's. Much like links in a wiki.  I would create a flat outline structure to realise the nodes. Let's say every piece of information is a level 2 heading under the main heading ""references"". Then apply tags to your information-pieces as you wish. Use group tags to structure your tags in a structure of its own. And there you kinda have it. Nodes are your level 2 outline items. Tags/todo/categories and links are your edges helping you organise things in a logical structure and linking related notes together.  Another thing not to forget: attachments. Not all things can be said in text. Make nodes with attached items or folders.  Make sure to have clear boundaries between things for reference and things to do though. GTD has good philosophies around that.  Sync with your favourite syncing tool - onenote, Dropbox, Bittorent sync, whatever, and enjoy your system all around. Orgmode still is lacking on mobile. But maybe there'll be a change in that in the future.."
emacs,2ta7hv,redguardtoo,2,Thu Jan 22 12:41:41 2015 UTC,Thanks! Will try this instead of my mu4e setup when I get time. Looks really thourough unlike alot of the email setup guides
emacs,2ta7hv,Mitchical,5,Thu Jan 22 13:28:18 2015 UTC,"I definitely recommend adding offlineimap to any setup (whether it is mu4e which I'm currently using or gnus, which I used before.) Search speed is incredible, and offlineimap makes refreshing non-blocking, at least with mu4e (gnus on its own is blocking, so every time you want to fetch new mails you need to wait for some seconds... It seems like a ""no big deal,"" but once I moved to mu4e I realised how slow Gnus was)"
emacs,2ta7hv,rberenguel,2,Thu Jan 22 17:51:39 2015 UTC,"Maybe it's just me, but I'll take mbsync over offlineimap any day. I haven't used offlineimap in a while, but I didn't like how the configuration was done and it was much slower (maybe it has improved recently)."
emacs,2ta7hv,angelic_sedition,1 point,Thu Jan 22 19:56:10 2015 UTC,"I tried offlinemap two years ago, it took too much time to fetch all my emails, so I gave up. I'm sure it has improved much now, but not verified yet."
emacs,2ta7hv,rberenguel,1 point,Thu Jan 22 23:42:32 2015 UTC,"Well, gnus is ""incredibly slow"" basically because without some helper it fetches data with elisp, blocking the whole emacs session for a good 10 seconds, at least. Offlineimap is (or seems) slower in fetching (I think fetching takes at least 30 seconds,) but it is done in a separate process that runs periodically. Since I don't use ""email as chat"" I can get the emails at offlineimap's pace perfectly. And search through offlineimap is blazingly fast through mu (so, you can search mails offline, too), whereas gnus uses IMAP search on the server, which is not that fast (and also, blocking, you know.)"
emacs,2ta7hv,Mitchical,1 point,Mon Jan 26 10:10:53 2015 UTC,Yeah I currently have offlineimap in a cron job and minimal overhead in my init.el. The speed is pretty great but I am willing to try something new(old) if I can get it to work better
emacs,2ta7hv,lazyklimm,1 point,Thu Jan 22 18:29:02 2015 UTC,"tip: you can call offlineimap from imapfilter (useful by itself, btw). It supports IMAP IDLE, so you don't have to run offlineimap for nothing.  my config.lua looks like this:  repeat      ...      os.execute(""offlineimap -u quiet"")      ...  until not account.INBOX:enter_idle()"
emacs,2t9let,r2k9,4,Thu Jan 22 06:54:30 2015 UTC,"Put cRED below the two nested boxes to get the colors to work out. It's particularly neat when integrated into an org document.  I've also done some experiments with embedding diagrams generated with the obviously-named diagrams Haskell library, but it's not as immediate as artist-mode as shown off here.  Here's an inscrutable, un-narrated screencast I recorded a while ago that includes a bit showing diagrams usage."
emacs,2t9let,acow,3,Thu Jan 22 07:48:13 2015 UTC,"Great stuff. I've been using ditaa for years with Emacs, but never with artist mode. Thanks for the tip!"
emacs,2t9qaf,trezor2,8,Thu Jan 22 08:00:18 2015 UTC,"Hiro is messing around in Flatland. He is doing this partly to conserve the computer's batteries. [...]   But his real reason for being in Flatland is that Hiro Protagonist, last of the freelance hackers, is hacking. And when hackers are hacking, they don't mess around with Metaverses and avatars. They descend below this surface layer and into the netherworld of code and nam-shubs that supports it, where everything you see in the Metaverse, no matter how lifelike and beautiful and three-dimensional, reduces to a simple text file: a series of letters on an electronic page. It is a throwback to the days when people programmed computers through primitive teletypes and IBM punch cards.   Since then, pretty and user-friendly programming tools have been developed. It's possible to program a computer now by sitting at your desk in the Metaverse and manually connecting little preprogrammed units, like Tinkertoys. But a real hacker would never use such techniques, any more than a master auto mechanic would try to fix a car by sliding in behind the steering wheel and watching the idiot lights on the dashboard."
emacs,2t9qaf,washort,3,Thu Jan 22 16:42:14 2015 UTC,"This is key. It’s not that the glasses themselves have to support emacs in any significant way, but that the thing doing the rendering and simulation be scriptable so that you can edit the code on a high resolution text display, and glance over to the side to see the effects of your changes.  Step back far enough, and the take away from emacs is the importance of programmability."
emacs,2t9qaf,acow,1 point,Thu Jan 22 17:36:20 2015 UTC,"Yup, I spend all day hacking in flatland with emacs."
emacs,2t9qaf,hprotagonist,3,Thu Jan 22 17:54:27 2015 UTC,"The primary characteristic of Emacs is that it selects a data format and an editor for that format, and then hosts applications (which make up the majority of its functionality) that edit the same documents. At this point that's become stretched since buffers store a much richer format than a text file, but it's the basic idea.  For AR, that would presumably mean a scenegraph and the ability to edit its contents. Probably physics built in, since I doubt you'd want to do it in Lisp, but for AR you'd need it. We don't have a font editor in Emacs, but I wonder if ARmacs would need a 3d model editor to be complete."
emacs,2t9qaf,phalp,11,Thu Jan 22 15:02:47 2015 UTC,It would be just Kung fu: you would enter commands by executing actual punches and kicks.  Want to call up magit: Eagle Claw WA-TAAAAAH!  save-buffer: Palm Strike WOOOOOOO-ooooOOOO-WAHHHHHHHH!  org-agenda: Leopard Punch KIIAI!  And of course there would be Evil users with their horse stance and bow stance.
emacs,2t9qaf,abo-abo,1 point,Thu Jan 22 09:15:09 2015 UTC,"This AR type technology is not always applicable. Text editing may not be where it's really useful.  After all, even the live MS demo was not very compelling. In some other thread someone wrote that he could have built the same 3D model in Autocad in 10th of the time.  So it could be useful in some areas, but it's not something which makes anything better.  Having said that I can imagine putting multiple buffers side by side not constrained by the size of the monitor. E.g. putting them on the wall of my room like I had a giant projector."
emacs,2t9qaf,kcin,1 point,Thu Jan 22 08:12:09 2015 UTC,"After all, even the live MS demo was not very compelling. In some other thread someone wrote that he could have built the same 3D model in Autocad in 10th of the time.   Watch a good CADer work is like a regular person watch a good emacs/vim user. It's terrifying. Most people I know who area really good with CAD are limited more by how fast they think then the tools.   Having said that I can imagine putting multiple buffers side by side not constrained by the size of the monitor. E.g. putting them on the wall of my room like I had a giant projector.   That actually sound pretty awesome. I could also see having your background buffers literally be in the background."
emacs,2t9qaf,flarkis,2,Thu Jan 22 08:20:03 2015 UTC,"Infinite window space would be awesome actually, especially for code review. I'd like to be able to use spacial relationships to describe code relationships. For example, if I'm looking at a function called by another function called by another function, I'd like to use depth to show where I'm at and be able to get a quick reminder of where I came from."
emacs,2t9qaf,hex_m_hell,0,Thu Jan 22 10:35:32 2015 UTC,"This AR type technology is not always applicable. Text editing may not be where it's really useful.   Indeed. Which is why I said software built according to the same principles.  By that I didn't meant that it had to be a text-editor, but in more general terms a platform or piece of software with a 100% open architecture where everyone can extend everything everywhere, following some sort of unified ""buffer"" model (maybe for holograms/3d objects instead of text-buffers).  What could we build? What sort of mixed integration/modules would be interesting? What would be possible?"
emacs,2t9qaf,Erakko,0,Thu Jan 22 08:50:14 2015 UTC,emacs is totally incompatible with the holo-world =D
emacs,2t6pte,caisah,10,Wed Jan 21 16:59:05 2015 UTC,"If you put an Emacs package online, it's only a matter of time before Steve submits a patch to you to fix up your mistakes. He's like Emacs Batman. I tapped him last year, so I'm excited to watch this one."
emacs,2t6pte,skeeto,5,Thu Jan 22 01:37:37 2015 UTC,I think that Sacha should release these as podcasts as well. I have enjoyed listening to this and I don't think the video is necessary. Even when Steve was doing the ibuffer-vc it was easy to listen to.
emacs,2t6pte,milkypostman,1 point,Thu Jan 22 01:15:44 2015 UTC,"Yup, you can find it at  https://itunes.apple.com/ca/podcast/emacs-chat/id959071949 or subscribe to http://sachachua.com/blog/category/podcast/emacs-chat-podcast/feed (I think)"
emacs,2t6pte,sachac,5,Mon Jan 26 17:27:18 2015 UTC,I don't know how Steve does it. 8/10 cool new packages I read about turn out to be packages he wrote a year ago and I'd just never seen.
emacs,2t6pte,NihilistDandy,1 point,Thu Jan 22 04:12:32 2015 UTC,"I installed whole-line-or-region as soon as I saw about it, previously I had a keybinding to quickly select the whole line. w-l-o-r seems a better solution."
emacs,2t7kru,MyNameIsFuchs,5,Wed Jan 21 20:45:15 2015 UTC,"I'm developing (for over a year now) a vi-inspired Paredit replacement - lispy.  It integrates with CIDER, besides other things. If the cursor is after the very last paren in your expression, with lispy-mode on, all you have to type is:  fe   Here,   f means: move to the same type of paren (open or close) in the appropriate direction. It will move point right after pp). e means: eval. The expression will be evaluated in CIDER and the output will be printed to the echo area.   Of course it's only vi-inspired, it has nothing to do with Evil, but at least the arrow keys h, j, k, l do what you would expect. And it's possible to adapt lispy to Evil, although no one had a large interest of doing so yet."
emacs,2t7kru,abo-abo,4,Wed Jan 21 22:47:38 2015 UTC,"I started to write a wrapper for Evil, here:  https://github.com/bcarrell/evil-lispy/blob/master/evil-lispy.el  It's implemented as a separate state on top of Evil, so when you're in normal mode, ( will jump to the left paren and enter Lispy state, ) will jump to the right and enter Lispy state, gv will mark the current symbol and enter Lispy, etc.  ESC will bring you back to Normal.  Lispy state is a straight up copy of Lispy, so you should get all of the bindings when you're in Lispy state.  In the end, though, I actually stopped using Evil mode here, so I'm not going to maintain the above script.  I actually found that I was less efficient using Evil for Lisp than using Lispy out of the box.  I hung in Normal mode too often, because that's what I was used to.  Once I became comfortable with using Lispy for editing Lisp, I was simply slower with my Vim (Evil) setup.  Your mileage may vary.  I really, really love Vim, but I just don't need it for Lisp when Lispy gives a very comfortable Vim-like experience.  Still, if you're interested in adapting Lispy for Evil, maybe it might serve as a helpful reference.  Another nice part is the safe deletions for Normal mode should work, so even when you're in Normal mode, your buffer shouldn't break when you do things like dd.  I also implemented additional text objects, so things like daf will delete your current form."
emacs,2t7kru,bcarrell,3,Thu Jan 22 01:46:00 2015 UTC,I really like the presmise of your package and been giving it a try on occasions. I meant to ask you the following:   How do you assume user is traversing buffer most of the time?    I often found myself in situations where sticking to established schema would be less convenient than per moving once per charcter?   Do you consider ACE jump to be necessary tool for the experience you envision? What guides your decisions regarding key bindings?
emacs,2t7kru,myeffort,2,Wed Jan 21 23:28:55 2015 UTC,"How do you assume user is traversing buffer most of the time?   Myself, I'm using h, j, k, l, d and f for navigation within a top-level form.  g is very important for switching between top-level forms. Of course, F also falls into that category, along with a debugging binding xj.   Do you consider ACE jump to be necessary tool for the experience you envision?   ACE jump is occasionally useful when doing small refinements to the code or during debugging. In those cases, a can select a symbol for eval, and q can quickly jump to e.g. an if branch. But when the nesting level is small, I don't use ACE, since it requires feedback. And of course, there's t - teleport: it's much faster than anything I could do without ACE jumping.   What guides your decisions regarding key bindings?   I would like to position bindings in a way that the most used ones are given the best positions. At the same time, most of the bindings were established quickly, and now it doesn't make sense to move them.  Still, I'm pretty happy with navigation stuff hjklim all being in one place, while the modification stuff wsrt is the other place. And all the new stuff can go on x prefix."
emacs,2t7kru,abo-abo,2,Wed Jan 21 23:41:27 2015 UTC,"I consider Ace jump a necessary part of Lispy.  I use it non-stop.  H is one of my most frequently used operations, along with q and C-d."
emacs,2t7kru,bcarrell,2,Thu Jan 22 01:48:51 2015 UTC,"I did look at that before but never tried it out since it seems like it doesn't complement EVIL but would replace EVIL, right?  The problem is that some of you bindings (like C: convolute, s: move down) interferes with frequently used VIM bindings and I can't afford that context switch since it'll mess me up when I go back to non-LISPy buffers. If there was key bindings for EVIL that'd be interesting.  Can that be achieved with lispy?"
emacs,2t7kru,abo-abo,2,Thu Jan 22 00:04:32 2015 UTC,"It can. lispy's key binding code is only 100 lines out of 5000, establishing wrappers around plain Emacs commands (i.e. ones that have no idea about lispy state).  You could easily make an Evil state from that. Well, easily, implementation-wise.  The hard thing to do is to decide what to put where. And since I've never used Evil, I did not make an attempt to do this. It needs to be done by an Evil pro, or , better yet, a few of them talking to each other."
emacs,2t7kru,rklv,1 point,Thu Jan 22 08:51:31 2015 UTC,I see. Thanks for you reply. I'll take another close look!
emacs,2t7kru,abo-abo,2,Thu Jan 22 14:17:42 2015 UTC,A bit off-topic but could you share the Emacs color theme that appears in your lispy demos?
emacs,2t7kru,rklv,1 point,Fri Jan 23 14:36:01 2015 UTC,"Sure, it's called eclipse. A remnant of the Dark Ages, this is how Eclipse used to highlight C++ around 4 years ago, when I switched to Emacs. Now the only thing left is this theme."
emacs,2t7kru,abo-abo,1 point,Fri Jan 23 15:27:50 2015 UTC,"Thanks! I stalked your .emacs, couldn't find it."
emacs,2t7kru,bcarrell,1 point,Fri Jan 23 15:44:40 2015 UTC,"I'm planning to publish it at some point, I just have to remove a tonne of embarrassing stuff copy-pasted from the Wiki when I was really new. But this task somehow gets pushed back, as I prefer to work on the projects that I've already published so far."
emacs,2t7kru,zlrth,2,Fri Jan 23 15:57:42 2015 UTC,You might also be interested in https://github.com/syl20bnr/evil-lisp-state.
emacs,2t7kru,ayakushev,2,Thu Jan 22 17:08:43 2015 UTC,"I'll be watching this thread too. I've been using evil-mode and paredit separately out of habit, but I would like them together."
emacs,2t7kru,ayakushev,2,Wed Jan 21 22:28:33 2015 UTC,"I use these Paredit bindings if you are interested: https://github.com/alexander-yakushev/.emacs.d/blob/master/bindings.el#L110 . They are partly driven by the fact that I rebound some other stuff before, so I had to stay consistent.  As for your second question, I don't think there is a predefined CIDER command for that, but it is not clear what exactly is to be done here. Evaluate sexp that begins at this line? Evaluate second-to-top sexp? When you define the behavior it will be easy to write down such command."
emacs,2t7kru,ayakushev,1 point,Thu Jan 22 11:16:18 2015 UTC,Thanks for the link. I'll take a look.  Reg the sexp eval behavior: I guess it's one of the two:   Eval sexp that starts at column one. Eval sexp up to some white space. Edit: Correction: Up to some empty line.   Both definitions would eval what I'd like. It's a very useful command that I use actually 100% at the time in LT.
emacs,2t7kru,nautola,0,Thu Jan 22 14:17:12 2015 UTC,"By your second definition, (form2 <CURSOR> arg etc) is also a form that is preceded by a whitespace."
emacs,2t7kru,daslu,1 point,Thu Jan 22 15:24:08 2015 UTC,"Sorry, my bad. I meant an empty line."
emacs,2t99jf,shackra,2,Thu Jan 22 04:46:58 2015 UTC,Perhaps this helps.
emacs,2t9wkc,curious-scribbler,1 point,Thu Jan 22 09:40:09 2015 UTC,"So your customizations are saved in your init-file. Do a C-h v user-init-file, and keep in mind that usually on Windows 8.1 ~ expands to C:\Users\You\AppData\Roaming, so you probably need to look at a C:\Users\You\AppData\Roaming.emacs"
emacs,2t9wkc,DijiRoomba,1 point,Thu Jan 22 10:10:46 2015 UTC,I guess that should do it :-) Thanks a ton.
emacs,2t9wkc,DijiRoomba,1 point,Thu Jan 22 10:25:16 2015 UTC,You're quite welcome!
emacs,2t9wkc,RobThorpe,1 point,Thu Jan 22 10:50:18 2015 UTC,"That surely helped, I know it was a vanilla question and I should've applied some brains but then I am so overwhelmed with emacs :-P"
emacs,2t9wkc,RobThorpe,1 point,Fri Jan 23 05:10:15 2015 UTC,"DijiRoomba is correct.  On earlier versions of Windows this was stored in C:\User\You\  There may be several files to remove, these are mine: * .emacs.d - standard config directory. * .emacs - init file if you don't use init.el. * .recentf - recent files. * .history - shell history. * .ido.last - Ido history.  BTW, I also did this many years ago.  I found the the config I'd built up was increasingly complex and some of the packages I used were no longer maintained.  So, I started from scratch and kept things simple.  I found it a useful exercise."
emacs,2t592h,howardthegeek,13,Wed Jan 21 06:20:33 2015 UTC,"This isn't using Emacs as a window manager, any more than launching xterm from .xinitrc is."
emacs,2t592h,ccharles,9,Wed Jan 21 20:00:14 2015 UTC,He'd be better off with a minimalistic window manager like ratpoison than with none at all.
emacs,2t592h,angryformoretofu,8,Wed Jan 21 14:43:04 2015 UTC,"Agreed. I think a much better solution would be something like xmonad configured with a single frame that occupies the entire window, no window decorations, and every application other than emacs configured to default to floating.  He'd have exactly the same experience he currently has, except when he launched xterm or chromium, he could at least move and resize the window when he wanted to."
emacs,2t592h,deong,2,Wed Jan 21 15:51:17 2015 UTC,I have a minimal window manager with virtual desktops as I have one monitor. I'd miss that.  However others criticising miss the point that this is at least interesting. We need extremists - they pioneer new ground.
emacs,2t592h,benfitzg,-2,Wed Jan 21 16:50:42 2015 UTC,ratpoison suck
emacs,2t592h,lazyklimm,1 point,Thu Jan 22 00:37:56 2015 UTC,because it doesn't support EWMH
emacs,2t592h,lazyklimm,8,Thu Jan 22 16:06:56 2015 UTC,"While Chromium requires twice the disk space as Firefox, Firefox requires a real window manager in order to bring up menus.   I'm not sure I understand what this comment means, I haven't experienced this."
emacs,2t592h,codemac,3,Wed Jan 21 07:59:27 2015 UTC,"Not to mention that the screenshot of the browser is clearly Firefox, not Chromium."
emacs,2t592h,ghyspran,1 point,Wed Jan 21 17:58:34 2015 UTC,"Very interesting. This sort of thing is almost viable for me. I'm using OpenBox now with lots of keybindings, similarly to using Emacs. What would be missing with Emacs as my window manager is the ability to alt-tab between Emacs and Firefox, and the ability to full-screen those few windows that I need (such as the browser)."
emacs,2t592h,skeeto,2,Wed Jan 21 17:33:14 2015 UTC,Sure thing:   https://github.com/skeeto/dotfiles/blob/master/_config/openbox/rc.xml   I wrote a little summary here awhile back: https://www.reddit.com/r/linux/comments/1kmlrt/_/cbqi5d8
emacs,2t592h,skeeto,-4,Thu Jan 22 01:55:43 2015 UTC,For me this just looks like you are shooting your self in the knee.
emacs,2t592h,Erakko,5,Thu Jan 22 03:12:52 2015 UTC,"Why? I plan on trying that, it looks fun."
emacs,2t592h,fmargaine,1 point,Wed Jan 21 07:13:30 2015 UTC,Because it has no benifits over regular window manager and only subset of features.
emacs,2t592h,Erakko,1 point,Wed Jan 21 07:53:35 2015 UTC,"Not really. I am currently using a terminal VM and controlled it via Tramp. With this approach, I don't have to fully install a full blown window manager to operate on the virtual machine. Just enough to run Emacs, that's all I need."
emacs,2t592h,tuhdo,-4,Wed Jan 21 13:23:58 2015 UTC,You sound like it somehow difficult to install that window manager? Or it takes too much space or memory? These days all of those 3 things are trivial.
emacs,2t592h,Erakko,2,Wed Jan 21 15:31:02 2015 UTC,"I just want to install minimal installation, because opening a window manager consumes more resources, while I only want to allocate less than 500MB RAM for the VM, and I am going to have more than one.   Note that I only intend to run minmal distrubtion in a VM. In my host OS, I still use a window manager. I cannot allow the VMs to be bloated and consume resources of my host OS. And the blog post in the title is about running a minimal VM with only Emacs as its window manager."
emacs,2t592h,tuhdo,-2,Wed Jan 21 17:47:43 2015 UTC,I am not getting this thrive for minimalism. Ram is cheap and so is harddrive space.
emacs,2t592h,Erakko,2,Wed Jan 21 17:57:59 2015 UTC,"Yes I am having a MacBook Air with 8GB RAM and 512GB SDD. But allocating 1GB for each VM is too much, and it wastes CPU cyles, making the host OS less responsive and laggy. Anyway, if you only need a build environment, no need to waste resources like that. Better leave it to run something else like games in your host OS."
emacs,2t592h,tuhdo,1 point,Wed Jan 21 18:00:34 2015 UTC,Are you productive using your MBA all day without an external monitor? or do you use an external monitor with it?
emacs,2t592h,spoofedexistence,1 point,Wed Jan 21 18:11:06 2015 UTC,"I have an external monitor and do most stuffs on it. I use MBA monitor only for reading documents. Currently, I'm using Ubuntu with i3wm as my host OS and Ubuntu server as guest OS."
emacs,2t592h,tuhdo,1 point,Thu Jan 22 06:14:04 2015 UTC,"If you just want one window (emacs), it makes sense, but then it doesn't make any sense to call it a window manager."
emacs,2t592h,angelic_sedition,2,Thu Jan 22 06:23:04 2015 UTC,"His approach seems sensible to me. He's using a mac with a GUI like everyone else. He just stays inside emacs most of the time.  I have emacs start when the computer turns on, similar to the author's xinitrc. Why? On windows 8 they removed the start menu (Bad move that pissed off thousands of windows users). People are paying $$$ for 3rd party start menus. I use the emacs package helm-w32-launcher as my start menu replacement.  Emacs as the OS is a very useful thing."
emacs,2t592h,Starlight100,2,Wed Jan 21 22:01:53 2015 UTC,"He's using a mac with a GUI like everyone else. He just stays inside emacs most of the time.   Not really. He uses an Ubuntu VM with no window manager.  As long as he stays inside emacs, that's kind of like having a window manager. But when he opens a different window, it looks like there's no way for him to move or resize or hide it without closing it.  It's great that it works for him, but it's pretty hardcore. It seems like it would be a total PITA if he did front-end webdev, for example, because then he'd need a javascript-enabled browser window open basically all the time.  ...actually, it looks like he does do webdev, which surprises me. But this VM is for his personal stuff, so maybe he just doesn't do webdev in his personal time? Regardless if that's a bad example, it still seems to me like there are a lot of things that one might want to do that this setup would be annoying for."
