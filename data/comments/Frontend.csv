Frontend,3e6spl,nut315,3,Wed Jul 22 11:54:28 2015 UTC,I work for the same company and helped define these guidelines. Any questions are welcome!
Frontend,3e6spl,hidanielle,1 point,Wed Jul 22 11:58:22 2015 UTC,"I'd really love to implement more structured code like this, I've taken it upon myself to present base level methodologies and conventions to my team just as a introduction. But there are only 3 of us and most of our work isn't long term, large scale sites (though those do come on occassion).   How can I make a case for something like this, to people who are so set in their ways it just seems like a hinderance? Or is it not even worth it?"
Frontend,3e6spl,hidanielle,2,Wed Jul 22 13:22:49 2015 UTC,"3 is a great number; there's three devs in our company too. Some of our web work only takes a few weeks to build and sometimes we don't add anything new for a few months after launch.  But this makes our life much easier. We've optimised our workflow for 2 main things: maintainability and re-use.  This convention for naming allows any of our devs to jump on the project and write code to a pre-defined standard. You can't tell who has written what (the dream!). We also lint (with sublime plugins and grunt tasks) our CSS and js against rules so it's always the same. Once you know the rules it's easy to write code to follow them. The linting is a pass/fail against those rules.  By building individual components, using BEM, it's really easy to strip out a component from site 1 and put it into site 2 and it'll just work because we've written it to not care about anything else in the project. We also build frontend components in Primer (we are open sourcing it tomorrow) so you can worry about frontend only and not the data layer (wordpress, Drupal etc).  Upshot is, it actually makes our dev life easier and quicker now. We wouldn't go back."
Frontend,3e6spl,hidanielle,2,Wed Jul 22 13:41:01 2015 UTC,"I totally understand the benefits of something like this, the rest of my team doesn't unfortunately... I guess it just sounds like more up front work at first, to break your old habits and stuff. Not that it should matter, but I'm the youngest one there and I'm always looking for ways to improve my set up, the rest of the team, however, has kind of just decided that they're comfortable with how it is. I'm just struggling with how to appeal to them.   On a different note, the most difficult thing about BEM IMO, is deciding what to name things. I think I just over-complicate it in my head, lol."
Frontend,3e6spl,dandelyin,2,Wed Jul 22 13:54:30 2015 UTC,"Naming things is hard. Try doing all the naming in one go. We draw up a simple excel doc and name every component before we dev. That way, when it comes to dev, all you need to do is to implement and not name!"
Frontend,3e6spl,kylorhall,1 point,Wed Jul 22 13:57:09 2015 UTC,I like this idea - I'll try it out some time
Frontend,3e6spl,kylorhall,1 point,Wed Jul 22 13:59:40 2015 UTC,Can provide insight in why you should not @extend your base class?
Frontend,3e6spl,evoactivity,1 point,Wed Jul 22 14:13:01 2015 UTC,"We find it unnecessary. The base class should contain all the base styles. For modifiers, they should contain just the code they aim to modify (and not the base styles as well). When there's just one modifier, it doesn't make much difference which way you do it. But it's possible that you have 2 or 3 modifiers on (e.g. .button.button--red.button--large). In this instance '.button' should set up the base styles, '.button--red' only makes it red and '.button--large' only increases font size. In other words, it's the separation of concerns & you shouldn't run into any unexpected specificity issues."
Frontend,3e6spl,renewedhope,2,Wed Jul 22 14:23:38 2015 UTC,"Dang, it's weird for me to come across an article about an opinionated guideline and have everything match up 100% with my own internal guidelines, even down to the __--.  I definitely agree with the point on nesting for component-specifics.  I think my only addition is I'll often style custom versions of a component based on the top-level class instead of relying on a parent that lives outside of the component.  Eg.: ul.dropdown.header__dropdown and do my nesting on .header__dropdown .dropdown__item {} rather than .page__header .dropdown__item {}.  That just depends on whether or not I expect there to be a common parent to all of my custom instances of a component - it tends to be more re-usable for me."
Frontend,3e5tcq,nachoalvarez,1 point,Wed Jul 22 04:31:34 2015 UTC,"I made a starter kit [0] as well.   This is missing two REALLY important things:   Tests. It's fine to not have tests if you're just screwing around, but I'd say having a testing framework setup is of extreme importance when you're making a real app. Asset cache busting. What happens you change any of your assets? You should be adding the file hash at the end of the file name and updating references to the asset. (Or any of the other strategies...)   Since I picked up Webpack I LOVE being able to import styles, images, etc. and having all dependency resolution happen through my code. It means that all of your application's dependencies are explicit, instead of relying on magical file locations.  [0] http://github.com/cesarandreu/web-app"
Frontend,3e2aib,webri_,14,Tue Jul 21 12:14:11 2015 UTC,This was our workflow in 2013 ... Gulp / Webpack / Babel /  PostCSS is the workflow of 2015
Frontend,3e2aib,cport1,4,Tue Jul 21 12:58:24 2015 UTC,Yep. Ridiculous how fast its changing.
Frontend,3e2aib,Glorious-G,6,Tue Jul 21 13:12:51 2015 UTC,"Not necessarily trying to start a war or anything but some of us still use this stuff because it still works. At the end of the day, clients don't care about your build process or tooling, they just want software that works."
Frontend,3e2aib,overneath42,3,Tue Jul 21 23:16:27 2015 UTC,"I've read about ‘PostCSS’, but I really don’t see it as an essential component of my stack. SASS is still so good. What prompted you to “switch”?"
Frontend,3e2aib,das_aether,-1,Tue Jul 21 18:43:33 2015 UTC,"There are some good articles out there but essentially it's just better, more modular architecture which will allow it to evolve more quickly than SASS or LESS.  Already it can do some things that SASS or LESS can't."
Frontend,3e2aib,get2workUslacker,-3,Tue Jul 21 21:10:21 2015 UTC,"Sass is slow bulky and opiniated. Post as is super fast, not opiniated, and can do everything with your css, including linting."
Frontend,3e2aib,klownfa,1 point,Tue Jul 21 23:11:33 2015 UTC,libsass is fast
Frontend,3e2aib,ndjoe,1 point,Wed Jul 22 07:57:13 2015 UTC,"Yes. libsass is much faster than Ruby SASS.  ...and Stylus is faster than libsass, and PostCSS is faster than all of them."
Frontend,3e2aib,RotationSurgeon,3,Wed Jul 22 12:38:34 2015 UTC,"If you think that most people are on the bleeding edge, well, they aren't.  Very few places are even thinking about using Babel/PostCSS, you just think it's more prevalent because it's what you see on blogs/reddit.  The reality is that there are more jobs using what's in the article than the tools you mentioned."
Frontend,3e2aib,hatestheinternet,0,Wed Jul 22 01:56:41 2015 UTC,I guess all of the companies I work with are bleeding edge... I think you would be very surprised at the adoption of Babel.
Frontend,3e2aib,cport1,1 point,Wed Jul 22 02:10:19 2015 UTC,"We use npm rather gulp, and browserify for packing. The tool chain is way leaner."
Frontend,3e2aib,klownfa,1 point,Tue Jul 21 23:09:02 2015 UTC,"Apart from actually running the web dev tools we’ll talk about in a minute, it is generally useful to know some basic bash commands for any software you might install and use via the command line.   Outside of the fact that most systems have bash as the default shell, pretty much none of the command line section has anything to do with bash.  (By which I mean this is generic information that applies to most, if not all, n*x shells."
Frontend,3e0z7a,t0m_serv0,5,Tue Jul 21 03:00:44 2015 UTC,Start to learn both. You'll soon find out which ones caters more to your tastes.
Frontend,3e0z7a,a-t-k,3,Tue Jul 21 06:26:16 2015 UTC,"As a newbie I really love React, it is far easier to learn. Plus I think its just more fun. But I found this out by trying both, which is my advice to you! Try both, stick with the one you like more, you will be able to find jobs for both."
Frontend,3e0z7a,lvrbrtsn,6,Tue Jul 21 06:24:52 2015 UTC,"First, I would not let the Angular 1.x->2.0 change worry you. Two reasons - 1.x will be supported as long as there is significant use. And, the things you learn in 1.x will transfer to 2.0. It is a code rewrite, and may require a small amount of new learning, but it is not going to be completely unfamiliar to someone who knows Angular. Fears about the 2.0 rewrite and pretty unfounded, IMO.   Source: went to ng-conf, talked with many people way smarter than I about this, as well as the numerous talks/podcasts with the authors of Angular since.  Now that that is out of the way, which to learn? I look at them as actually 2 different things. React is for better rendering of DOM stuff. (Their tagline is ""A JavaScript library for building user interfaces"") Angular is for building large scale applications.   React is probably going to be slightly simpler to learn, as it encompasses less scope than Angular. But Angular has 2 things going for it - I believe it still has the developer mindshare and it can build more complex apps (not that you can't build complex apps with React, you just have to add more components alongside React).  Personally, I'm very well versed in Angular and see no reason to jump off the bandwagon. But I will probably start playing around with React and even Ember so I am familiar with both. But for large scale apps, I'd still personally tend to prefer Angular."
Frontend,3e0z7a,Mael5trom,2,Tue Jul 21 03:30:47 2015 UTC,Why not look at Ember as well?
Frontend,3e0z7a,square_cadence,1 point,Tue Jul 21 18:46:54 2015 UTC,Ember seems to be less in demand than angular.  Would you agree?
Frontend,3e0z7a,dizzysfarm,2,Wed Jul 22 12:11:26 2015 UTC,"As a former backbone/marionette dev I prefer react over angular. Another option is learn both, they can be used together"
Frontend,3e0z7a,perfectriot,1 point,Tue Jul 21 19:26:57 2015 UTC,"Try out both for a bit. See which one you like most. Many jobs around here are for Angular, some in React.  They are both frameworks, and neither of them will hurt you if you do learn them. It will give you a broader understanding if you know a bit of both. Then for your next project take a pick.  And I used to work in Backbone/Marionette, it's nice but once I started understanding AngularJS it was like going from a bike to a motorcycle."
Frontend,3e0z7a,jellatin,1 point,Tue Jul 21 07:19:07 2015 UTC,"React is only part of the client-side equation. So yes it's, 'easier to learn' but you're also going to need to learn Flux/Backbone and some other pieces to cover all the bases like Angular does.   This isn't bad or good, it's just something to be aware of.   Try both and pick which you like more, just remember that React alone isn't going to do things like handle routing im your app or fetch data from a server."
Frontend,3e0z7a,wisesascha,2,Tue Jul 21 08:45:44 2015 UTC,"Angular 2 is really cool. The documentation is a little confusing and there are certain issues that still need to be worked out. I started a project with it and its really fun, but difficult to learn. I think Angular might be the future as its Google and Microsoft backed, but React is very nice. Another option is Ember. The ecosystem is better then Angular2 and it enforces a really nice structure for your app."
Frontend,3e0z7a,letsgetrandy,0,Tue Jul 21 04:33:56 2015 UTC,React
Frontend,3dygzp,CorySimmons,2,Mon Jul 20 15:48:07 2015 UTC,Here's a demo you can fork and play with http://codepen.io/corysimmons/pen/VLGZMe?editors=110
Frontend,3dygzp,gnarly,2,Mon Jul 20 15:49:26 2015 UTC,"Using html { overflow-x: hidden; } to deal with the gutters on your .row elements feels like a bit of a hack to me. It's too easy to accidentally drag-scroll the page sideways. I think it'd be better to add a little bit of complication to properly deal with the gutters.  Maybe it's too long dealing with issues in IE6/7/8, but I'm still a little bit wary of using things like font-size: 0; and inline-block for major structural work. You're using calc though, so those clearly aren't an issue here :)  In terms of the HTML, the code to make equally spaced cells is rather different to regular cells. I know they serve a slightly different [visual] purpose, but if my designer asked me to ""change those into equally spaced cells"" I'd just want to change the top-level class, rather than having to remove the cell class from all the children.  Do you plan on building something in to switch off the equal thing on narrow viewports, where traditional table rendering doesn't really work very well?  If you're targeting modern browsers, why not use display: flex;?"
Frontend,3dygzp,mtx,1 point,Tue Jul 21 10:59:23 2015 UTC,"Maybe it's too long dealing with issues in IE6/7/8, but I'm still a little bit wary of using things like font-size: 0; and inline-block for major structural work.   I've been using my own inline-block based grid extensively for the past 2-3 years. I haven't run into any issues with it yet. I actually use font-size: .001px which is even dirtier but this is to support the stock browser for ICS. I like using them over floats because it tends to be simpler (less bloat, no more need to wrap every row of columns with a .row class) and has other benefits (vertical centering, no need for clearfixes).  Still if you're using calc you may as well use flexbox because they require the same browsers... but Cory has said flexbox is overrated for whatever reasons."
Frontend,3dygzp,gnarly,1 point,Tue Jul 21 17:50:09 2015 UTC,Floats don't let you do stuff like vertically center cells too.
Frontend,3dygzp,gnarly,1 point,Tue Jul 21 19:33:08 2015 UTC,"I think my IE8 issues were around resizing inline-block elements with JS. The elements would resize just fine, but nothing else would move around to account for it. Which was awesome."
Frontend,3dygzp,gnarly,1 point,Tue Jul 21 20:17:02 2015 UTC,"Using html { overflow-x: hidden; } to deal with the gutters on your .row elements feels like a bit of a hack to me.   Clearfix feels hacky to me but we use it nonetheless. I ain't afraid of no hacks.   Maybe it's too long dealing with issues in IE6/7/8, but I'm still a little bit wary of using things like font-size: 0; and inline-block for major structural work. You're using calc though, so those clearly aren't an issue here :)   Yeah I just added browser support. IE9+ seamlessly. I might revisit this if people start wanting IE8 support. It would work on IE7 seamlessly if you just replaced https://github.com/corysimmons/lazygrid/blob/master/lazygrid.styl#L20 with font-size: 12px (any unit other than rem) or just used a polyfill https://github.com/chuckcarpenter/REM-unit-polyfill   In terms of the HTML, the code to make equally spaced cells is rather different to regular cells. I know they serve a slightly different [visual] purpose, but if my designer asked me to ""change those into equally spaced cells"" I'd just want to change the top-level class, rather than having to remove the cell class from all the children.   It's actually identical markup. Was just using the .cell class to show people in the Stylus what we were modifying. Simply replace your g-row() call with a g-equal call and everything will work.   Do you plan on building something in to switch off the equal thing on narrow viewports, where traditional table rendering doesn't really work very well?   Just opened an issue and fixed it. I added a responsive demo of it on the pen.   If you're targeting modern browsers, why not use display: flex;?   Flex is IE10+. A lot of companies (my present employer included) still support IE9."
Frontend,3dygzp,KezzBee,1 point,Tue Jul 21 19:29:10 2015 UTC,"My issue with the overflow on the html element was simply that I could still accidentally scroll sideways. Less than ideal!  Additionally I think it'll cut off the side of things like tables that are unable to shrink to fit the viewport, rather than letting me scroll across to see them. That particular problem might be outside the scope of this though :-)"
Frontend,3dygzp,KezzBee,1 point,Tue Jul 21 20:23:15 2015 UTC,"My issue with the overflow on the html element was simply that I could still accidentally scroll sideways. Less than ideal!   Really? Should I be applying overflow: hidden to body instead then? I mean, you can't side-scroll on modals and that's how they do it.   Additionally I think it'll cut off the side of things like tables that are unable to shrink to fit the viewport, rather than letting me scroll across to see them. That particular problem might be outside the scope of this though :-)   You could wrap your table in an element with width: 100%; overflow-x: scroll; and theoretically it should work."
Frontend,3dxzkr,Kriem,20,Mon Jul 20 13:31:39 2015 UTC,I can't help but wonder if they proofread the article when the very first word is wrong.
Frontend,3dxzkr,dangoodspeed,8,Mon Jul 20 14:45:34 2015 UTC,"I image you're right, I don't think they proofread it."
Frontend,3dxzkr,webdevbrian,2,Mon Jul 20 16:07:39 2015 UTC,Can you image when they finally realize?
Frontend,3dxzkr,MaresDoOrgasm,2,Mon Jul 20 23:58:10 2015 UTC,"What's funny is I totally read it correctly, twice. Once when I first read the article, and a second time when I went back to see what was wrong with it. It took a third reading before I noticed, I wouldn't be a good editor."
Frontend,3dxzkr,lechatron,1 point,Tue Jul 21 00:22:39 2015 UTC,They fixed it.
Frontend,3dxzkr,rduoll,6,Tue Jul 21 16:54:18 2015 UTC,"Claims ""no compilers"" and then goes on about a dozen different languages and tools that compile CSS for you."
Frontend,3dxzkr,Glorious-G,6,Tue Jul 21 01:10:38 2015 UTC,"New web standards? Are these companies finally coming together?    No, just a clickbait title about development processes well over a year old."
Frontend,3dxzkr,ThisKillsTheCrabb,4,Tue Jul 21 02:57:03 2015 UTC,"For Grunt, now use PostCss. It does lots of other fun stuff too."
Frontend,3dxzkr,devolute,2,Mon Jul 20 16:34:54 2015 UTC,"What's the difference between PostCSS and using something like autoprefixer (which I currently use in my build process)?  Edit: I guess it helps if I actually read the provided link...   Unlike the traditional approach with separate plugins, grunt-postcss allows you to parse and save CSS only once applying all post-processors in memory and thus reducing your build time."
Frontend,3dxzkr,hevymetaldudemant,1 point,Mon Jul 20 17:52:38 2015 UTC,"For [build automation tool], use postCSS     FIFY  Agreed.  Like support for IE8 fall backs. Bonus, it's way faster then any mixin library could ever hope to achieve."
Frontend,3dxzkr,doiveo,3,Mon Jul 20 17:38:58 2015 UTC,If you're using LESS you can also use lesshat
Frontend,3dxzkr,macneib,5,Mon Jul 20 15:22:56 2015 UTC,Or if you use sass you could use: http://bourbon.io
Frontend,3dxzkr,snarkyturtle,4,Mon Jul 20 15:51:23 2015 UTC,"Sorry, that's not a great solution especially for a fading standard.  You are digging yourself deeper into a vendor method which makes migration and readability harder.  Just use postCSS with the autoprefix plugin.  This is what the LESS compiler does now anyway."
Frontend,3dxzkr,doiveo,3,Mon Jul 20 17:33:28 2015 UTC,oh wow.  just dumped grunt-autoprefixer and swapped in grunt-postcss   Very painless. Thank you sir!
Frontend,3dxzkr,macneib,1 point,Mon Jul 20 18:21:23 2015 UTC,That article feels dated. Autoprefixer was hot and new last year.
Frontend,3dynsc,yaronn01,3,Mon Jul 20 16:36:19 2015 UTC,"At first, I was like ""does it play Global Thermonuclear War?"" but now that I see what it does I understand the reference.   And think it's kinda cool."
Frontend,3e288m,OscarOz,3,Tue Jul 21 11:50:56 2015 UTC,"Find a website that you thinks is awesome, then try to create the front end for it, that's what I did."
Frontend,3e288m,panchoVilla00,2,Tue Jul 21 12:34:58 2015 UTC,"Joining quality newsletters is a great way to get (and keep) an overview of what is out there. I find these helpful:   JavaScript Weekly HTML5 Weekly CSS Weekly RWD Weekly   Also, as thecraighammond mentioned, helper tools like preprocessors, task runners and so on can provide you with a huge productivity boost once you are comfortable with the basics.  I just published an article about the command line tools I use for front end dev, maybe it is helpful to you as well: A Front End Dev’s Workflow in 2015"
Frontend,3e288m,webri_,4,Tue Jul 21 12:54:09 2015 UTC,"If you want to be a front end developer, be a front end developer.   Write code. That's how you start."
Frontend,3e288m,cclites,1 point,Tue Jul 21 12:09:32 2015 UTC,"It's such a broad term that it's difficult to say you should do or learn one specific thing/list of things.  I'd say you have the right foundations so make sure you know as much as there is to know with those and are entirely comfortable putting something together with them.  After this (I use after loosely because there isn't a true 'finished' here) it's free game really because there are so many difficult libraries, frameworks and languages. I found that having a little back end knowledge helps out, just some basic PHP will at least give you a chance to understand what's going on when content management systems or other frameworks get involved (read Drupal, Rails, etc).  I'd recomend getting clued up and comfortable with a 'style' of structuring your code as well as some front-end build systems.  I tend to use Sass (structured with BEM) and Coffeescript for my CSS and JS respectively (someone shoot me down, it always happens) and then Gulp as a build and compilation system. However, get comfortable with where you are first, then do some further reading into these or you'll end up in over your head, and that's where it can start to feel a little less fun.  Finally I'd get reading some blogs, following the relevant sub-reddit's and Twitter accounts and just generally trying to take on board the wider world of front-end - it really helps keep you interested and familiar.  Grab a basic Bootstrap or Foundation framework, set up something like Wamp (Windows) or Mamp (Mac) locally and make stuff in your own time for yourself. That's without a doubt the best way to learn!"
Frontend,3e288m,thecraighammond,1 point,Tue Jul 21 12:40:52 2015 UTC,"Hey thanks thecraighammond. I think i need to go back to basic and build up from there. I know how to code a webpage but i cant code everything from top of my head , i need to cheap checking online etc."
Frontend,3e288m,thecraighammond,1 point,Tue Jul 21 13:16:57 2015 UTC,"There's nothing wrong with checking!  In the real world no one expects you to not use the internet to check. I spend more than a little bit of time each day on Stack Overflow.  If you try to remember all the little details, you're going to forget the big ones.  Once you start building things and playing around with different libraries and such locally you'll start getting used to core patterns.   Have a look at the HTML5 boilerplate - it's a good starting place for any project as it has all the useful folder structures and little tricks/structures in place."
Frontend,3e288m,harborer,1 point,Tue Jul 21 14:01:58 2015 UTC,Let's start with how to Google...
Frontend,3e288m,themitchy,2,Tue Jul 21 17:45:33 2015 UTC,Start with? That's pretty much the entire front-end skill set.  /me ducks
Frontend,3e288m,jimtheflow,1 point,Tue Jul 21 22:31:28 2015 UTC,"Google ? i use google more then i use 'I' , i just wanted to get professionals views on this"
Frontend,3dzbnb,SomeRandomBuddy,6,Mon Jul 20 19:22:50 2015 UTC,"If you want to cover the entire screen, why not use   position: fixed;      width: 100%; height: 100%;   What you're using works, but the idea of position: absolute is that it is absolutely positioned relative to it's parent. Position fixed is definitely the right thing to use in this case. It will go straight to the top left, and then you need to size it accordingly."
Frontend,3dzbnb,StrangeSound,1 point,Mon Jul 20 20:17:02 2015 UTC,Thanks a ton for the feedback. Will give it a go shortly and report back
Frontend,3dzbnb,yellowllama,1 point,Mon Jul 20 22:06:40 2015 UTC,"also depending on where it is in the DOM, you might need to set the z-index value too, to ensure its 'above' everything else"
Frontend,3dzbnb,RichardFingers,1 point,Tue Jul 21 06:06:40 2015 UTC,Quick clarification. Absolute positioning is not relative to the parent. It's relative to the nearest positioned ancestor.
Frontend,3dzbnb,StrangeSound,1 point,Tue Jul 21 21:43:15 2015 UTC,Yeah maybe I should have been clearer. Hopefully not too many people were confused by what I said!
Frontend,3dzbnb,jparkerweb,2,Tue Jul 21 21:52:24 2015 UTC,"I would use position: fixed as @StrangeSound suggested, but would set the top, right, bottom, and left values to 0 as to avoid and margin/padding issues with html/body    position: fixed; top: 0; right: 0; bottom: 0; left: 0;"
Frontend,3dzbnb,dorianblack,1 point,Mon Jul 20 22:57:13 2015 UTC,"Just to clarify the difference between absolute and fixed positioning, and why the latter is the right choice for your circumstance :  fixed position removes the element from the flow of the document, and positions it relative to the viewport. So when you give a width and height of 100%, you're essentially ""overlaying the whole DOM"" which is what you wanted to accomplish. But if you're using Bootstrap, isn't there a class name you just have to add to the element like ""modal"" or something? I would explore that route."
Frontend,3dzbnb,pull_my_finger_AGAIN,-1,Tue Jul 21 12:28:41 2015 UTC,Is there a reason you can't use the modal plugin?
Frontend,3dr1hk,JustDADE,2,Sat Jul 18 17:02:50 2015 UTC,What is it about?
Frontend,3dr1hk,ayjayred,3,Sat Jul 18 20:47:20 2015 UTC,"It's a battle, they have 2 games   Zen Garden (1v1) - Two guys receive HTML markup and doing their best styling it in 60 minutes. They don't have access to anything but CSS. Classic (3v3) - Three guys in each team (HTML/CSS/JS) responsible for their language receiving list of tasks they should finish in 60 minutes.   But the end of the game viewers vote and decide who won the game. Games played each Saturday."
Frontend,3dr1hk,scootstah,3,Sat Jul 18 22:05:03 2015 UTC,That sounds awesome. Will definitely be keeping an eye on this.
Frontend,3dr1hk,10097338,2,Sun Jul 19 00:51:53 2015 UTC,that sounds like fun. How does someone become a player?
Frontend,3dr1hk,ayjayred,1 point,Sun Jul 19 03:14:35 2015 UTC,"You apply through the site http://devwars.tv/games. You will receive confirmation only on Saturday, but feel free to hop in TeamSpeak, usually if someone doesn't shows up you can just say there that you want to participate and there's big chance that you'll get in. Check out the rules on twitch channel page (it's not working on the website at the moment). For 3v3 if you want you can bring other two with you or you'll be placed with other random people."
Frontend,3dr1hk,jalapenoASD,1 point,Sun Jul 19 09:20:14 2015 UTC,"do you have access to CSS information/documentation? (e.g., syntax, etc.)"
Frontend,3dqavh,fiddel_fabulous,23,Sat Jul 18 12:15:24 2015 UTC,"You're at a point now where you're moving past the basics of writing CSS and trying to understand how to best architecture site styles. Start by understanding the popular methodologies. Here's three.   SMACSS (pronounced “smacks”) BEM, ""Block element modifier"" OOCSS, ""Object oriented css""   Then just pick one, and go with it. Understand what lead to the guidelines in one style or another, and adapt it to meet your needs."
Frontend,3dqavh,Tayoko,9,Sat Jul 18 13:23:32 2015 UTC,"I think Harry Roberts cssguidelin.es combines the 3 into 1 (mostly BEM & OOCSS), with his own ideas, and is more up to date, so OP could just go with this one.   Looking at OP's file tho, following strictly from the guideline would require rewrite, but there are some good points to learn from the it. For example, according to the guideline, .btn is better than button because it encourages re-use and the style is not tied down to button, you could apply to anchor tags for instance."
Frontend,3dqavh,GE7H,12,Sat Jul 18 14:14:08 2015 UTC,"Take a look at Harry Roberts cssguidelin.es.  Other ressources:    Nicolas Gallagher's ""About HTML semantics and front-end architecture"" and the naming convention he uses for Suit CSS @fat's explanation of medium.com's css A short article about CSS naming conventions by @drublic"
Frontend,3dqavh,Gibbon_Ka,4,Sat Jul 18 13:12:45 2015 UTC,"The problem of styling globals, eg: ""button"" is that you may want something else to look like a button, but is not a button, such as a link, or even a span (for w/e reason), then you'd have to convert it to some class name anyway, such as .button and you've just wasted time doing that. Do it to begin with. Don't put prefix infront because that just styles globally.  Honestly, standards with CSS are in my opinion very stupid because you should be using something like LESS/SCSS etc to do most of that for you (and including resets and generating all the web kit prefixes automatically), then it becomes a standard for either one of those. And really when it comes down to styling it's probably just best for you and the senior to do something you both understand. And well he is senior, so he probably has more pull than you so fit his style.  In my agency we have a developer who is very into styling and the way that it gets deployed in gulp/scss etc and we all try match his styling. But even if we don't, no one fights over it, it is just dealt with because we all know how to do our job and its just moot really. It's hard to grasp someone getting confused what is styling what when something is "".btn"" or "".main-button"" or ""button.blue"" etc.. it's obvious."
Frontend,3dqavh,vekien,2,Sat Jul 18 13:18:24 2015 UTC,"On your point about not styling global elements, is there some reason your opposed to adding a class to the same styling as your button?  Eg.  button { background: blue }  Turns into  button, .btn { background: blue }  This way you keep the styling for button, then when you do end up specifically needing an anchor tag to look like a button, you just add the .btn class."
Frontend,3dqavh,nyxin,2,Sat Jul 18 15:01:36 2015 UTC,"The problem of that is just ending up with a whole lot of repeated code for essentially the same thing. Why not just assign class btn to buttons? If you're going to use a global style sheet to customize your layout, then that is fine.   I like my own styles and after reset I specifically design all the ""default look"", if you're not going for a default look, then don't globally style the default elements as when another developer comes along and wants a button, it may style not how they were expecting. If eventually you need various different buttons that you have many different classes, then it is not good to globally define them.  I've seen this used a lot, and it can make things look messy, like:  input[type=""button""].blue, button.blue, .button.blue,"
Frontend,3dqavh,vekien,2,Sat Jul 18 16:45:17 2015 UTC,"Yeah this was assuming a global style sheet. What I meant was defining all of the styles that are the same for all buttons (sizes mostly) and add ""stylized"" classes.  So a button looks some way, but you can over ride it with a class. Similarly, if you needed another element to look like a button, just add that class to the same css attributes as your button.  I also don't usually style things like colors on base elements unless nearly all of them should have that attribute. Most of the styling on base elements is structural like defining heights/widths, border sizes, stuff like thay; so bad example on my part."
Frontend,3dqavh,nyxin,2,Sat Jul 18 17:24:06 2015 UTC,"This is bad CSS as well. You should use a button element for semantic reasons not styling reasons and should not be limited to using it based on styling.  In your example, what would I do if semantically I want to use a button but its styling has nothing to do with .btn?  I would just stick to having .btn have all regular button styles and adding that class to most of your button elements."
Frontend,3dqavh,lamb_pudding,1 point,Mon Jul 20 15:20:47 2015 UTC,"I suppose the way I was thinking is that if I know 99% of my buttons (and attributes of those buttons) should look a certain way, style those out, then add a class as an exception to over ride or extend a new Byron that should be styled differently.  This is also under the the pretense that I know that all buttons should basically look one way with few exceptions.  I'm not quite convinced that is ""bad"", but I do see your point."
Frontend,3dqavh,nyxin,1 point,Mon Jul 20 17:17:36 2015 UTC,It looks like he is using Sass and posted the compiled CSS
Frontend,3dqavh,escapefromelba,4,Sat Jul 18 13:34:20 2015 UTC,"I don't have any authoritative reference for it, but AFAIC styling tags directly is about as close as you can come to pure evil, as it makes it absolutely impossible to include external templates or css in the page. in a perfect world you of course control every piece of the possible, making this point moot, but my experience is that the world is not perfect and that you should namespace your styles (ACRONYM-*) to protect yourself from rule collisions the best you can."
Frontend,3dqavh,deliciousleopard,1 point,Sat Jul 18 12:31:17 2015 UTC,"Styling tags directly is not the same as an inline style:  blockquote { margin: 15px; }  != <blockquote style=""margin:15px;"">  Pretty sure you mean styling tags with inline styles."
Frontend,3dqavh,Salamok,1 point,Sat Jul 18 16:58:00 2015 UTC,I meant applying stylesheet rules directly to tags rather than using classes.
Frontend,3dqavh,deliciousleopard,2,Sat Jul 18 22:47:10 2015 UTC,"Use the button class. In this instance, you’ll be using “button” to mean “this button-like look”. This is going to cover you in the future in case you want to detach this look from the actual button element and apply it to anchors, <input type=""submit"" />, and other applications you probably won’t think of until you need it.  A more subtle benefit to this is that you’ll be sticking with an all-class selection scheme, thus every single-item selector you write will have the same specificity. This will help keep things predictable in large projects"
Frontend,3dqavh,adenzerda,1 point,Sat Jul 18 17:18:57 2015 UTC,"Most of that CSS is actually pretty decently classed. It looks like you are using Sass, so you just need to make sure you aren't over-nesting your CSS blocks when you don't need to. Always use just enough classes in your CSS selector and never more.  I agree that you shouldn't directly style a tag but it isn't necessarily evil as there may be a need for it. For example when you want to give all your p tags a certain font and line height. Most global typography styling you do will be done by directly styling tags. Then those can be really overridden for specific components by using classes.  But for most cases, you should be giving classes to all of your components and using CSS selectors that refer to those classes. button.btn is overkill as you should just be using .btn.  It looks like you are using bootstrap so I'll refer you to a very well written code guide written by one of Bootstrap's authors:  http://codeguide.co/  For the most part you two should be agreeing to a specific standard and following it. That code guide could be a good place to start."
Frontend,3dqavh,lockdoubt,1 point,Sat Jul 18 13:26:32 2015 UTC,"Using ""button"" (or whatever tag) alone is bad for portability. If your code is going to be packaged as a widget, or conversely, if it includes 3rd party widgets,  it can cause all sort of problems.   Doing button.class is also bad because you are dictating the markup from the css.  If someone wants class on a another element they won't be able to.   The best approach is to make your css completely independent of the markup, I.e. use classes and only classes everywhere (using oocss or bem or whatever may help). A few exceptions (a:hover and form input fields for example) are ok though."
Frontend,3dqavh,our_best_friend,1 point,Sat Jul 18 22:42:20 2015 UTC,Keeping css in the following categories normally keeps my more pure html/css guys happy (I'm a JavaScript guy):  Reset  Base  Modules (layout / typography / content)  Following one of the guides the others have referenced will give you more details.
Frontend,3dqavh,SgtPooki,1 point,Sun Jul 19 02:50:19 2015 UTC,"In this specific example I would use .btn as the class name. You can then apply this class to make a ""button"" to either a <button> or <a> so you are not limited to only using it with a <button> element. For example, what happens if you or someone else in your team decides to use Angular Material? Where buttons are marked up as <md-button>  I'd recommend that you take a look at Bootstrap, Foundation, Materialize etc to see how they write up their styles."
Frontend,3dqavh,germainelol,1 point,Sun Jul 19 08:17:58 2015 UTC,".btn{...}   Why abbreviate it?  You're only saving ~3 bytes of space at a time by not making it .button{...}, at the sacrifice of clarity.  Yes, almost everybody can figure out what btn is short for, but there's no practical reason not to expand it, no matter what decisions the Bootstrap team made regarding the use of btn.  ( Unless of course you're coding with the same mentality that the ""omg ur dum 4 syng tht"" crowd uses to communicate )"
Frontend,3dqavh,RotationSurgeon,1 point,Mon Jul 20 13:16:02 2015 UTC,"Honestly you're being a little bit of a sasshole, don't nest your selectors so deep - its too hard to manage on both ends.  Plus it makes reusability difficult if not impossible.  I would consider looking at using extends in your Sass more - which it doesn't appear you are taking much advantage of from the compiled CSS."
Frontend,3dqavh,escapefromelba,1 point,Sat Jul 18 14:08:06 2015 UTC,yeah i read a twitter re-styling here a while ago and the guy who styled medium.com said never to do it. i shouldn't have but was working fast.  what is your opinion on having a lot of classes on the html instead of just using a class and styling the selectors inside that class?
Frontend,3dqavh,escapefromelba,0,Sun Jul 19 00:06:45 2015 UTC,Why do you have a .wrapper class and a .container class?  Pick one naming convention and stick to it IMHO.
Frontend,3dqavh,nyxin,1 point,Sat Jul 18 13:31:50 2015 UTC,Was working off the HTML already there. One question is when should I use #ID?
Frontend,3dqavh,RotationSurgeon,3,Sat Jul 18 13:43:13 2015 UTC,"The ONLY time you should use an ID is when you are specifically styling ONLY ONE element on the page and/or are trying to target that element with javascript.  I can't think of a specific scenario where you'd need to STYLE only one element since most (if not all) of your elements will share attributes (fonts, colors, sizes, etc) but say you need to know when a specific element is hovered over, or clicked, or in some other way interacted with, then it is much more useful to give that one element an ID rather than writing some fancy DOM traversing in order to get the element you want.  Hope that makes sense."
Frontend,3dqavh,escapefromelba,2,Sat Jul 18 15:08:32 2015 UTC,thanx all great advice.
Frontend,3dqavh,UltraChilly,1 point,Sun Jul 19 00:07:40 2015 UTC,"Also don't forget that adding a class to an element need not only have a styling purpose, or any styling purpose at all.    For instance, should all of your buttons styled as primary CTA's have their clicks tracked?  Then consider giving them a class like js-click-track and targeting that in your javascript."
Frontend,3dqavh,klownfa,3,Mon Jul 20 12:37:26 2015 UTC,Javascript
Frontend,3dqavh,RotationSurgeon,1 point,Sat Jul 18 14:02:28 2015 UTC,"One question is when should I use #ID?   never.  edit : couldn't pick one good resource, just google ""why you should never use ID selectors"" and you'll find many articles titled just that"
Frontend,3dqavh,UltraChilly,1 point,Sat Jul 18 14:00:38 2015 UTC,"Or when you're styling a unique object. It's much quicker for the browser to style them.  Many people don't take CSS performance into consideration, and because it is the first resource to load and start styling the page, it can slow down what you see right away.  For the past few years people have been doing things like using only classes, and tools like sass making it super easy to string classes together, you end up with very slow CSS."
Frontend,3dqcdy,Kriem,2,Sat Jul 18 12:34:58 2015 UTC,Interesting concept.
Frontend,3dqcdy,Lindenforest,1 point,Sat Jul 18 22:26:22 2015 UTC,Nope
Frontend,3dqcdy,davidf81,0,Sun Jul 19 02:47:30 2015 UTC,You're better off learning the principles of object oriented programming than wasting time with this noise.
Frontend,3dqcdy,biocomputation,0,Sun Jul 19 08:37:29 2015 UTC,"I like the idea of atomic design a lot. I think it goes along with the BEM methodology of CSS. One disagreement I had with what's been published so far is in Chapter 2.   In addition to the tags that make up our user interfaces, atoms can also include more abstract elemental items like color palettes, font stacks, and even invisible things like animations.   I'd argue that design elements like colors, fonts and animations are more like bonds: the forces that hold the atoms together to create molecules."
Frontend,3dnhwq,Kriem,2,Fri Jul 17 18:32:11 2015 UTC,"You know what also should be a last resort? Preventing me from zooming in on your website on mobile. I can barely see your damn pictures. And even when I click on them I STILL can't zoom in on them. And good thing you picked a font size everyone can read perfectly!  Maybe this guy knows what he's talking about, but shit like this makes him lose all credibility for the very thing he's expecting me to believe he is an authority in."
Frontend,3dnhwq,ItsAllInYourHead,1 point,Sat Jul 18 11:59:57 2015 UTC,"Very true, I have to say I didn't bother reading the article when I couldn't actually zoom in to properly see any of the images. I'm not a fan of the menu either, you click the menu and it scrolls to the bottom of the page. Maybe I'm/we're being picky though and it's probably a good article."
Frontend,3dnhwq,germainelol,1 point,Sun Jul 19 12:57:26 2015 UTC,Nicely done but most is obvious  like the layout and design.
Frontend,3dmlx2,magenta_placenta,7,Fri Jul 17 14:28:06 2015 UTC,Dude your username hahaha
Frontend,3dmlx2,Stockholm_Syndrome,1 point,Fri Jul 17 18:15:29 2015 UTC,I think there's cream for that.
Frontend,3dmlx2,weallwearmasks,7,Fri Jul 17 20:37:04 2015 UTC,My company will be able to drop IE8 support ... any .. year.. now...  We still get 8% of our traffic on it!
Frontend,3dmlx2,evildonald,3,Fri Jul 17 20:06:49 2015 UTC,"It's the 7th highest browser in our portfolio at work, we all beg weekly for the drop but the head just won't allow it at that kind of usage. I think won10 and edge releases may be the shift, heck! Microsoft don't support it anymore! Enough reason there right?"
Frontend,3dmlx2,nicholas-c,1 point,Sat Jul 18 01:07:34 2015 UTC,"January 12, 2016!"
Frontend,3dmlx2,PixelatorOfTime,3,Wed Jul 22 04:19:52 2015 UTC,all those xp users
Frontend,3dmlx2,klownfa,4,Sat Jul 18 02:27:35 2015 UTC,For us the IE8 metrics are pretty evenly split between XP and 7.  One thing that is uniform... it's nearly all non-US traffic.
Frontend,3dmlx2,evildonald,1 point,Sat Jul 18 03:58:39 2015 UTC,Which continent do they come from?
Frontend,3dmlx2,klownfa,3,Sat Jul 18 06:14:37 2015 UTC,I remember when I didn't have to support ie 5.5 anymore.  It was...pretty great.
Frontend,3dmlx2,junkmale_,1 point,Fri Jul 17 23:38:03 2015 UTC,"Friend of mine works for a shop whose clients are primarily in China. He still has to support ie 6 because of how popular it is over there. I pity him. He told me they had an opening, I told him ""That's nice."""
Frontend,3dmlx2,coverslide,4,Sat Jul 18 03:15:03 2015 UTC,Date.now() isn't supported in IE8?  I... may be working over the weekend.
Frontend,3dmlx2,CuntSmellersLLP,1 point,Sat Jul 18 00:29:01 2015 UTC,"Nope! I got caught out with this once, it was added in ECMAScript5 - therefore ie9+ :("
Frontend,3dmlx2,nicholas-c,1 point,Sat Jul 18 01:05:57 2015 UTC,"You can do +(new Date), east to shim."
Frontend,3dmlx2,coverslide,3,Sat Jul 18 03:15:58 2015 UTC,Some (but not all) of these you can use already with a polyfill
Frontend,3dmlx2,Mr_Weeble,1 point,Fri Jul 17 17:24:41 2015 UTC,Does anyone else feel like supporting IE8 is making you a worse programmer because you can't use these features?
Frontend,3dmlx2,prettypickle,2,Fri Jul 17 20:50:53 2015 UTC,"well, if anything it makes you a better programmer, because you have to find clever ways to implement the requested functionality even without these features"
Frontend,3dmlx2,fviz,2,Fri Jul 17 23:57:15 2015 UTC,Doing things in clever ways doesn't necessarily make you a better programmer.
Frontend,3dmlx2,Drainedsoul,1 point,Sat Jul 18 11:57:33 2015 UTC,"Ha, true. Worse was probably bad word choice."
Frontend,3dmlx2,prettypickle,1 point,Sat Jul 18 01:09:41 2015 UTC,I miss DOM Level 3 Events and Sparse Arrays on your list...
Frontend,3dmlx2,a-t-k,1 point,Fri Jul 17 14:38:58 2015 UTC,IMO most stuff are just enhancements (but good ones). Your web site shouldn't require these features just to view content.
Frontend,3dmlx2,wibz,1 point,Sat Jul 18 10:06:51 2015 UTC,IE8 doesn't support indexOf on arrays?? Holy crap how did I not know this. I thought that was a pretty standard function you could expect anywhere.
Frontend,3dmlx2,ItsAllInYourHead,1 point,Sat Jul 18 12:16:42 2015 UTC,"we developed a CRM webapp for one of our biggest customers, with thousands of employees, they are still using IE8 and we can't do anything about it because thats their company policy or something... :/  so when we add new features we always have to test the app on IE8.. that SUCKS!"
Frontend,3doxwh,jimtheflow,2,Sat Jul 18 01:39:17 2015 UTC,"Yes indeed! If you're writing pure frontend HTML/JS/CSS, you can save your code as an HTML file (index.html).  Right click on the file and then open with -> (your default web browser).  If you're doing node.js development, that's a whole different story."
Frontend,3doxwh,jamispoon,2,Sat Jul 18 01:48:26 2015 UTC,"Oh, haha, that is a lot easier than I thought. Thanks"
Frontend,3doxwh,alamandrax,1 point,Sat Jul 18 01:49:52 2015 UTC,"Get very familiar with the webkit developer tools on chrome (and safari if you have access to it) along with the developer console on firefox. Go through some of the tutorials online on how to use chrome as your development tool. Very fun introduction to web development.  IE's developer tools on the modern versions are pretty good too, but chrome's my personal favorite."
Frontend,3doxwh,OscarOz,1 point,Sat Jul 18 02:19:39 2015 UTC,I would also suggest setting up a local server on your MAC / PC. something like Wamp (Windows) or Mamp (Mac) locally
Frontend,3dnon3,lyotox,1 point,Fri Jul 17 19:22:07 2015 UTC,.... you built an angular app without having a controller for each page/view? Were you re-using the same controller for many different things?  Not saying that you shouldn't not use it - just    I feel much more confident having controllers for each page and  stuff.   makes me wonder how you built your last app.
Frontend,3dnon3,e82,1 point,Fri Jul 17 19:43:42 2015 UTC,"Sorry, I think you misunderstood. English is not my main language.   This app was one-page stuff, and each page had it's own controller. I think using Angular for a multi-page website is a little overkill."
Frontend,3dnon3,germainelol,1 point,Fri Jul 17 20:04:46 2015 UTC,"After a recent project I did I have to agree, I used Angular as a quick fix for a single page app as I'm familiar with it more than others and the project had a crazy deadline quickly approaching. It wasn't definitely overkill as I just used it for routing and a couple of other things."
Frontend,3dnon3,RotationSurgeon,1 point,Sun Jul 19 13:00:32 2015 UTC,"If it's something quick and simple, try out Riot.js -- it's quick to pick up, and has all the features you'll likely need."
Frontend,3dnon3,dasmikko,1 point,Fri Jul 17 19:50:10 2015 UTC,I think it'll work. Thank you!
Frontend,3dnon3,germainelol,1 point,Fri Jul 17 20:06:08 2015 UTC,Looks really nice! Will give a try.
Frontend,3dnon3,lvrbrtsn,1 point,Sun Jul 19 01:01:33 2015 UTC,Know any of good tutorials for getting started with Riot? It looks perfect for apps where you just need the framework for basic routing etc. I'll certainly give it a try
Frontend,3dkdkd,jimtheflow,11,Thu Jul 16 23:47:22 2015 UTC,"It is important to know that this is perfectly normal. Just keep going! There are lots of professionally employed people who will testify that they feel like they have no clue what they are doing. Eloquent Javascript is a great free book, but be aware that you will be confused working through that too, and that it is normal as well. Eventually you will be making awesome shit, and still feel super confused. Its fun though!"
Frontend,3dkdkd,lvrbrtsn,3,Thu Jul 16 23:56:39 2015 UTC,"Confirmed, I write JS almost on the daily and uhh......."
Frontend,3dkdkd,himynameisdave9,6,Fri Jul 17 13:36:19 2015 UTC,"I'm not a huge fan of Codecademy. Sure you will learn the basics, but there isn't much explanation or real world examples given. The quality of lessons also vary a lot between courses.   I would recommend checking out the TreeHouse JavaScript Basics Course. It does cost $20 a month if you want to stick with it, but there's a 14 day free trial and you can easily finish the course within that time for free.   Also, if you want to be a front-end developer and you've never touched code before, I really recommend you start with HTML & CSS. You don't have to become an expert at it before moving onto JavaScript, but you really should know the basics. JavaScript is kind of useless without it."
Frontend,3dkdkd,B4N4N4P33L5,2,Fri Jul 17 00:00:02 2015 UTC,Thanks for both of your replies i feel a little better lol. I am going straight to html/css after javascript. Then I will go through javascript again using the TreeHouse link you provided. Then jquery etc. I am just trying to get ahead of the curve before I start taking classes in school.
Frontend,3dkdkd,B4N4N4P33L5,8,Fri Jul 17 00:09:03 2015 UTC,"I agree with /u/lvrbrts it's perfectly normal to feel lost and confused. The feeling doesn't go away. There's always something new to be learned and there will always be things you don't know or understand. In this industry you will be learning new things constantly.   It's great that you're starting with vanilla JavaScript before moving onto jQuery though. It will give you a much better understanding, and you will laugh at how simple jQuery is.  Also, here's something I wish I knew when I was starting. Once you understand HTML & CSS thoroughly, learn how to use a grid system (Bootstrap is incredibly simple) and then learn how to use a pre-processor (I recommend SASS). Both are incredibly useful tools and will make your life so much better."
Frontend,3dkdkd,podoka,1 point,Fri Jul 17 00:16:48 2015 UTC,I know basic html/css. Should I move onto bootstrap and learn css more in depth? I have SASS but I know very little about it.
Frontend,3dkdkd,Did-you-reboot,3,Sun Jul 19 19:08:29 2015 UTC,"I would totally recommend getting these and looking over them. I have both and they were awesome ways to take just raw knowledge and take a step back and go ""Great, now what can I do with this?""  Jon does a great way of introducing the topics and showing how to build something with it.  Once you have enough confidence (not knowledge) go ahead and try to build something.  A website, a todo app, or something to where you have to research on what you want to add."
Frontend,3dkdkd,xanarax,6,Fri Jul 17 01:16:05 2015 UTC,"I've been writing JS in a professional sense for about 5 years now, still scratch my head often. Keep at it, if it was easy everyone would be doing it and you wouldn't get those great salary potentials :)"
Frontend,3dkdkd,chainlinks,3,Fri Jul 17 06:32:52 2015 UTC,Yes. Two years later I still do.  Keep going.
Frontend,3dkdkd,alamandrax,3,Fri Jul 17 13:46:59 2015 UTC,"About 10 years in; I remember being completely lost so vividly it hurts. Completely clueless, everything in global variables, sharing state across modules; shudder  Just keep at it and it gets better fast. Pick your tools and get good at them. Learn how to debug and spend some time on that more than anything else. Makes you solve problems faster."
Frontend,3dkdkd,raizor,2,Fri Jul 17 14:24:17 2015 UTC,"Stick at it man, in no time you'll be responding to posts like these and telling others to do the same.  Sure, these things are daunting at first, but each one of the things you mention will become a very valuable tool in your toolbox once you fully understand them. These concepts are universal too, so once you're familiar you can transpose that knowledge across languages. It's an exciting journey, keep going and have fun :)"
Frontend,3dkdkd,Pepsibojangles,2,Fri Jul 17 12:18:16 2015 UTC,"You will always feel lost buddy. ALWAYS. Ive been in the game 4 years, i barely know shit. The thing that seperates the devs from the not devs is the grit and tenacity to figure shit out. Code academy is good to get you started, but don't look at it as your going to be a regular NEO when your finished. I would recomend looking up some Tutorials on the google and go through them. After youve done a few you'll feel a little better."
Frontend,3dkdkd,funkfm,1 point,Fri Jul 17 13:39:02 2015 UTC,"Clarity will come with context, once you start to apply what you've learned to actual project you should get a better grasp on things."
Frontend,3dkdkd,RotationSurgeon,1 point,Fri Jul 17 10:37:42 2015 UTC,"It really doesn't help that pretty much everything is an object in javascript, does it?  In all seriousness though, you're running into the same barrier that a lot of self-taught people do: primarily that you're trying to learn to code without any of the basic fundamentals of computer science that are taught in highschool and college courses.  There are some basic online tutorials that can cover some of this, but getting ahold of some more basic books like ""Computer Programming for Dummies"" might be a good idea.  https://howtoprogramwithjava.com/programming-101-the-5-basic-concepts-of-any-programming-language/  https://code.org/learn  ...and one that's especially fun:  http://codecombat.com/"
Frontend,3dkdkd,RotationSurgeon,1 point,Fri Jul 17 12:26:32 2015 UTC,"Awesome thanks! I will definitely look at those. I actually am enrolled in a software dev curriculum, I don't start my focus area courses until next spring so I have ~6 months to get a head start."
Frontend,3dkdkd,RotationSurgeon,1 point,Fri Jul 17 12:55:59 2015 UTC,"In that case...See if any friends in the program that are already to their major related classes can lend you their textbooks in the meantime!  While a lot of pure CS degree information doesn't completely apply to the web (like compiler design, for example, though that's changing with Web Assembly), learning the ins and outs of data structures (when should I use an array?  A tuple? A stack vs. a queue? A linked list?), the differences between imperative / functional / object oriented paradigms, the basic ways to think about coding problems, and things like that, make it all start to make more sense.  Any idea what language(s) they'll be starting you off in?"
Frontend,3dkdkd,siamthailand,1 point,Fri Jul 17 13:42:15 2015 UTC,"javascript and c#  Yes, one of my friends is a comp sci major at an engineering uni. Hes far into his education and he is willing to lend me a few books he has on basic programming languages."
Frontend,3dkdkd,siamthailand,1 point,Fri Jul 17 14:26:04 2015 UTC,"Given those two languages, definitely download Visual Studio Code, and check out Typescript as well."
Frontend,3dkdkd,a-t-k,1 point,Fri Jul 17 15:14:22 2015 UTC,Do you have a basics in programming or did you jump straight to javascript?
Frontend,3dkdkd,podoka,1 point,Fri Jul 17 14:12:39 2015 UTC,I jumped straight into js on codeacademy. However I am using a 14 day free trial on treehouse and right now I am going through html/css. Eventually the treehouse lessons will get into js and jquery.
Frontend,3dkdkd,Butchbutter0,1 point,Fri Jul 17 14:30:07 2015 UTC,"You really should have a basic understanding of functions, arrays, etc. that is independent of javascript. You can do that and make your life easier OR learn it the hard way by stumbling along."
Frontend,3dkdkd,shanplourde,1 point,Fri Jul 17 14:36:05 2015 UTC,That's normal. Learning only gives you the tools you need to acquire experience. You'll have to do that yourself.
Frontend,3diahb,zerox_me,11,Thu Jul 16 14:25:42 2015 UTC,"In my opinion, the flexbox method is less code and you can have a variable height footer. Flexbox browser support is good now and you can always fall back to this method using Modernizr."
Frontend,3diahb,_squik,3,Thu Jul 16 14:52:28 2015 UTC,"you are right but Flexbox support is not as wide as using VP units and yes we can use it as a fallback. it's just that nobody mentioned it and some friends were glad to hear about the idea, so I wrote the article :)"
Frontend,3diahb,fernker,2,Thu Jul 16 15:21:20 2015 UTC,Seems like it's the slightly less easy way though...
Frontend,3diahb,vinspee,2,Thu Jul 16 20:07:55 2015 UTC,"Agreed. It's the only good solution. If you need to set a height, you're doing it wrong."
Frontend,3diahb,_squik,1 point,Sun Jul 19 02:32:06 2015 UTC,I rarely use height in CSS any more. If you're building responsive sites stuff flows in such a way that the layout would break with heights set
Frontend,3diahb,metalhaze,2,Sun Jul 19 10:06:14 2015 UTC,"I love Flexbox as much as the next person but why is this so complicated? Just do this if you need a simple footer stuck to the bottom of the page.  html, body { position: relative; height:100%; width:100%; }  .container { position:relative; width:100%; height:100%; }  .footer { position:absolute; bottom: 0; width:100%; height: 56px; }   Done."
Frontend,3diahb,metalhaze,3,Thu Jul 16 16:57:20 2015 UTC,This is an older way but it breaks if you have blocks with display table and full screen sections
Frontend,3diahb,metalhaze,1 point,Thu Jul 16 17:16:04 2015 UTC,"Using the same method I posted here (with some tweaks) I think it still gets you what you want.  Check out the codepen demo here: http://codepen.io/ahazel/debug/OVwMPL (resize browser window if it's not scrolling)  I am using ""calc"" on the height of the scroll region to compensate for the height of the footer. Which solves the padding problem that was mentioned in the tutorial. If you need a solution involving variable heights then Flexbox is the truly the best solution.  height: calc(100% - 56px);   EDIT: Sorry, here is the link to the actual code: http://codepen.io/ahazel/pen/OVwMPL"
Frontend,3diahb,thejarls,1 point,Thu Jul 16 18:17:39 2015 UTC,this could work yes but in your case the footer is fixed to the bottom which is not exactly what I was trying to accomplish. It should be pushed under the content
Frontend,3diahb,metalhaze,1 point,Thu Jul 16 18:37:23 2015 UTC,"Simple. Take the footer and put it inside the .container and remove the calc declaration.  The code I posted had the footer outside the container and acts like a footer for a web application.   Once you put it inside the container I think it works the way you want it to.  Either way, this was fun! I like playing around with this stuff!"
Frontend,3diahb,escapefromelba,1 point,Thu Jul 16 18:48:13 2015 UTC,"Yes, I understand if we modify it would accomplish what I need. Indeed it's fine :D"
Frontend,3diahb,DGCA,2,Thu Jul 16 18:56:27 2015 UTC,This could present problems if you have a tall footer (as many sites do these days) on a short screen - you could end up with your footer overlapping the content.
Frontend,3diahb,DGCA,1 point,Thu Jul 16 17:25:37 2015 UTC,"Depends what type of footer you want....If you want a footer that acts as an action bar in a web app then this is ideal.  If you want a giant ""footer area"" then don't do absolute positioning with bottom 0....Just have it follow the flow of the rest of your content."
Frontend,3diahb,gnarly,1 point,Thu Jul 16 17:41:59 2015 UTC,The display: table method gets the job done pretty easily as well
Frontend,3diahb,gburning_,3,Fri Jul 17 02:01:47 2015 UTC,"Lately, I've been doing something like this. Sass makes it easier if you use a variable for the footer's height.  HTML:  <body>   <div class=""main-wrapper"">     <p>This sure is a tiny bit of content.</p>   </div>   <footer>     <p>Footer footer footer.</p>   </footer> </body>   CSS:  footer {   height: 75px; }  .main-wrapper {   min-height: calc(100vh - 75px); }"
Frontend,3diahb,zackwcote,1 point,Thu Jul 16 21:10:10 2015 UTC,so many people mentioned about using calc fn. I'll try it and maybe i'll update the article if it worked well! ... thanks :)
Frontend,3diahb,pull_my_finger_AGAIN,2,Thu Jul 16 21:21:36 2015 UTC,"Give it a shot! Calc has about the same support as viewport units, so if you can use one, you can use the other. Really, though, it's the same effect, just a different method :-)"
Frontend,3dkfks,wolter99,5,Fri Jul 17 00:03:49 2015 UTC,"What seems so daunting about flexbox?  I've used it in a handful of projects and don't remember ""learning"" it.  It's really just a few lines of CSS code.  I guess the learning part would come into play when you want to implement graceful degradation for older browsers, but you can use a polyfill for the majority of situations if you need it.  Just go try it out.  Maybe read a single blog post about it so you know what to try, but it shouldn't take but 30 minutes to ""learn"".  Implement, test across browsers as you normally would, and fix it when it doesn't work, just like any other code.  I think you're overthinking it."
Frontend,3dkfks,kylorhall,14,Fri Jul 17 00:45:29 2015 UTC,"""We are seeking a certified flexbox developer with at least 5 hours of experience. The successful candidate will understand the difference between horizontal and vertical."""
Frontend,3dkfks,bamfomet,3,Fri Jul 17 01:02:13 2015 UTC,What seems so daunting about flexbox?   Nothing seemed especially daunting about floats and negative margins and such but it still took some time working with it on actual projects before I really knew what I was doing. You're right though it probably wouldn't take long but I'm only mostly here to procrastinate :D
Frontend,3dkfks,trafficante,1 point,Fri Jul 17 04:28:33 2015 UTC,"Yeah, this.  Flexbox is incredibly simple to learn and write, especially if you use Autoprefixer or another tool along those lines. Just don't approach it like an extension of the old float+clearfix grid models because it operates much differently. I can't wait for flexbox and vh/vw to gain enough support to use universally, great stuff.  Edit: Read this OP https://philipwalton.github.io/solved-by-flexbox/"
Frontend,3dkfks,RotationSurgeon,2,Fri Jul 17 01:35:39 2015 UTC,"Awesome, the sticky footer alone makes flexbox the shit."
Frontend,3dkfks,adiabatic,1 point,Fri Jul 17 04:30:20 2015 UTC,"I can't wait for flexbox and vh/vw to gain enough support to use universally, great stuff.   vh and vw have great support, IE9+.  The only two (practical) partial support issues are with vmin and vmax."
Frontend,3dkfks,gearvOsh,0,Mon Jul 20 12:24:53 2015 UTC,"I tried to center a h1 in a header. Solved By Flexbox gave me CSS that didn't work in any browser. In fact, there's a lot of outdated information with loads of Googlejuice.  I'll understand it eventually, but it interacts with a bunch of other things weirdly (margin: 0 auto;) and I can't just read the spec and have it work."
Frontend,3dkfks,Spoonzie,3,Fri Jul 17 03:56:50 2015 UTC,"Yes, learn it. Flexbox will completely replace floats for most, if not all layout structuring. The benefits from using flexbox, coupled with responsive design, are too good to ignore.  And who cares about browser support? IE8 and 9 are outdated and broken browsers, you should be pushing clients to drop support. I haven't supported either of these browsers in over 2 years."
Frontend,3dkfks,gearvOsh,1 point,Fri Jul 17 04:24:32 2015 UTC,"And who cares about browser support? IE8 and 9 are outdated and broken browsers, you should be pushing clients to drop support.   This comes across as a very amateurish approach. Indeed, IE8 and IE9 are awful and everyone in web development hates them, however if a large portion of your client's visitors are accessing the website using those browsers, you can't just ignore them and assume they'll download a browser that can render the site properly - most of the time, they won't.  Of course, if your client's analytics show a tiny percentage of users on outdated browsers then you can probably get away with not supporting them, and spend that time/part of the budget on something else. However, immediately ignoring older browsers by default is awful practice and shouldn't be encouraged."
Frontend,3dkfks,Spoonzie,1 point,Mon Jul 20 11:04:45 2015 UTC,"While I agree, we shouldn't be catering to users who refuse to upgrade. We save time, money, and technical debt by not supporting these users. If they want a broken site, that's their choice.  We do the bare minimum of compatibility, as well as provide upgrade browser bars and interceptor pages. These browsers are 6 and 4 years old respectively. They have far outlived their purpose."
Frontend,3dkfks,Boye,1 point,Mon Jul 20 17:10:28 2015 UTC,"While I agree, we shouldn't be catering to users who refuse to upgrade.   In a scenario where the majority of your users are using outdated browsers, you really should. If you launch a website and the client complains 80% of their userbase have gone to a competitor, it's very difficult to just claim it's the users' fault for being uneducated. Exaggerated example, but you get my point.  Some users don't want to upgrade, some don't know how, some literally can't (think big businesses with limited user permissions) and some simply can't be bothered. Progressive enhancement is really important!   I realise I probably now sound like someone who spends hours making sure all dev work runs beautifully on IE8+. That's not true, and in reality most websites we roll out are 'ok' on IE9 at best. However, I think it's really important to look at each set of users and decide on a per-project basis of what support is required - after all, you can always invoice more for large amounts of browser compatibility work if necessary."
Frontend,3dkfks,gearvOsh,1 point,Tue Jul 21 13:05:16 2015 UTC,"And who cares about browser support? IE8 and 9 are outdated and broken browsers   Please tell my boss, if I had a computer with IE6 he'd insist we test on that too..."
Frontend,3dkfks,a-t-k,1 point,Fri Jul 17 11:28:33 2015 UTC,And it's your job to convince him otherwise.
Frontend,3dkfks,driftdeep,2,Sat Jul 18 02:06:24 2015 UTC,"Learn it, because if asked why you don't use it, ""I don't know flexbox"" is probably not the best answer."
Frontend,3dgtox,unakravets,2,Thu Jul 16 04:00:05 2015 UTC,I found this bag from IKEA really useful for solo traveling to conferences. It's small enough to take on the plane and the front zips off as a small backpack to take with me when I leave the hotel.  http://www.ikea.com/us/en/catalog/products/50236454/
Frontend,3dgtox,menno,2,Thu Jul 16 08:45:51 2015 UTC,"Wow, neat!"
Frontend,3dgtox,longshot,1 point,Thu Jul 16 12:51:26 2015 UTC,Discovering that bag was worth the price of admission for me. Now I just need to find someone who'll sell it to me in the UK...
Frontend,3derlx,magenta_placenta,2,Wed Jul 15 18:26:08 2015 UTC,"This is one of those issues that comes up in page speed results where I don't really like the proposed solutions. The async attribute isn't supported on non-HTML5 browsers, and I'm not keen on writing inline CSS.  While this issue will be solved by bandwidth advances over time, what is the best way to deal with render-blocking resources on your page?  (I'm a student, so please forgive me if I'm not entirely knowledgeable on the subject.)"
Frontend,3derlx,schm0,1 point,Thu Jul 16 02:29:53 2015 UTC,Use async tag as described or use a async js function on page load.
Frontend,3dej2f,garretthogan,3,Wed Jul 15 17:28:03 2015 UTC,"check out aurelia.io if you aren't familiar.   If we aren't familiar, how could we answer your question?  What's your experience, have you used any other MV* frameworks before (Angular, Backbone, Meteor, Ember, Etc.)  In general, http://PluralSight.com is the best at what you're looking for. Though I don't know if they cover this specific framework just yet. May have better luck just looking on YouTube."
Frontend,3dej2f,jaredcheeda,2,Wed Jul 15 19:19:53 2015 UTC,"Yeah, Pluralsight have a course by Scott Allen Building Applications With Aurelia, which covers the basics. Bear in mind that Aurelia is still pre-beta, so things are still pretty raw and unpolished.    I see that Scott is listed as a contributor on the project github page, which I think is a great sign that they are planning to take developer education and evangelism seriously."
Frontend,3dej2f,OolonColluphid,-4,Wed Jul 15 20:46:02 2015 UTC,"Did you read the sentence immediately following? ""If any of you are familiar..."" I was only asking for help from those familiar with the framework and pointing to the site as a reference for what I'm talking about to those who aren't familiar. Thanks for your suggestions though."
Frontend,3dej2f,basiclaser,1 point,Wed Jul 15 20:56:52 2015 UTC,"plus one! I'm also asking around for Aurelia resources, nothing apart from the main 2-3 first google results though, it's pretty thin"
Frontend,3decr6,germainelol,6,Wed Jul 15 16:42:53 2015 UTC,Being a good JS developer is not about being able to create impressive effects and animations. It's about being a good programmer (i.e. problem solver).
Frontend,3decr6,vaskemaskine,1 point,Wed Jul 15 18:03:14 2015 UTC,"My point was that I'm perfectly good at the problem solving, but I struggle to think of or do advanced things on the front end."
Frontend,3decr6,RotationSurgeon,2,Thu Jul 16 00:49:52 2015 UTC,"Perhaps learn the GreenSock Animation Platform.    Just be careful that you're focusing on serving a juicier steak, instead of one that just sizzles more loudly."
Frontend,3decr6,Wyck,1 point,Thu Jul 16 04:09:03 2015 UTC,"1000x this.  I work for a company that puts out the websites you;re talking about.  We use GSAP or Canvas for all of our stuff, now transitioning into some webgl."
Frontend,3decr6,a-t-k,1 point,Thu Jul 16 15:53:48 2015 UTC,"It's not easy to come up with a surprising new concept. Practice makes perfect, so don't develop one navigation, but 20. Reuse as much code as possible to learn what helps and what hinders flexibility."
Frontend,3decr6,ForScale,1 point,Wed Jul 15 16:55:55 2015 UTC,Not really sure what kind of stuff you're looking for...   Can you give me an example of a site that really WOW!s you using js?  I mess around with js and css quite a lot to create animations and little projects...  Here's my CodePen if you're interested: http://codepen.io/ForScale/popular/
Frontend,3decr6,ForScale,1 point,Wed Jul 15 18:17:37 2015 UTC,Something like this is quite cool: http://gifmylive.arte.tv/fr (Skip past the intro) I tried to have a go at recreating some of its features in the past and failed miserably.
Frontend,3decr6,ForScale,1 point,Thu Jul 16 01:41:06 2015 UTC,Oh... you mean the ripple effect thing?
Frontend,3decr6,ForScale,2,Thu Jul 16 03:20:35 2015 UTC,"The animation/transition between each slide is very cool, and the hover effects for each one is also pretty good. These are the sorts of things that I would struggle to create. I know this specific example makes use of paper.js but these sort of JS libraries are difficult to get your head around, so I'm wondering if theres anywhere that has some advanced tutorials for things like this. The paper.js website has some awesome showcases, but I wouldn't know where to start recreating them.  I found a good one through a link someone else posted here which is pretty useful."
Frontend,3decr6,ForScale,2,Thu Jul 16 04:01:14 2015 UTC,"I think something like this is quite cool too (the skyline), but it isn't responsive which is annoying."
Frontend,3decr6,ForScale,1 point,Thu Jul 16 04:45:44 2015 UTC,"Cool!   So... did you take a look at my CodePen? I fee like I'm able to achieve plenty of this kind of stuff.   And I think it's worth mentioning that you can do a lot with CSS this days. I've figured out how to do 3d animation with just html/css. And then combining the css animations and transitions/transforms with js... pretty cool stuff can be made!  Let me know if you have a specific idea you want to see (or... is it more of a creative issue for you, rather than a technical one?) implemented and I'll see what I can throw together. I don't know if that would help you out or not, but yeah... just let me know!"
Frontend,3daxyr,hiamretarded,3,Tue Jul 14 21:29:15 2015 UTC,That is a great read! Cheers mate.
Frontend,3daxyr,pabswilder,1 point,Tue Jul 14 23:28:17 2015 UTC,"Found it on http://frontendfront.com. Btw if you got any resourceful websites to find interesting read and news, share it please"
Frontend,3daxyr,Glorious-G,2,Tue Jul 14 23:33:58 2015 UTC,Read for both frontends and designers
Frontend,3dd1dt,Kriem,22,Wed Jul 15 08:54:53 2015 UTC,I'm trying to learn frontend and I feel like all I'm getting out of it is adhd.
Frontend,3dd1dt,cimpire_enema,3,Wed Jul 15 13:18:44 2015 UTC,"I can't upvote this enough. So, so, so very true."
Frontend,3dd1dt,themitchy,14,Wed Jul 15 18:22:41 2015 UTC,No.
Frontend,3dd1dt,anonym1970,4,Wed Jul 15 11:18:42 2015 UTC,Not giving up sass until it's pried away from my cold dead hands
Frontend,3dd1dt,SomeRandomBuddy,0,Wed Jul 15 16:54:46 2015 UTC,"While I agree, there are simply tasks that SASS will never be able to accomplish as a static pre-processor. Being able to compile on the client side means that you can adjust variables programmatically, without having to have blocks of overwriting code in the header. For example, changing a global colour variable.  Unless, of course, I'm totally off and know nothing. That happens a lot."
Frontend,3dd1dt,TrackieDaks,0,Wed Jul 15 19:16:06 2015 UTC,What do you mean by compile on client side? Both sass and post css run on node....
Frontend,3dd1dt,meeeeoooowy,2,Wed Jul 15 21:21:12 2015 UTC,It's entirely possible (and highly likely) that I have a fundamental misunderstanding of how PostCSS works in comparison to SASS.
Frontend,3dd1dt,TrackieDaks,2,Wed Jul 15 21:51:12 2015 UTC,"I haven't spent much time reading about it, but I have yet to see any advantage to switching. Especially for teams that are already using SCSS. But I may have a misunderstanding as well..."
Frontend,3dd1dt,meeeeoooowy,5,Wed Jul 15 22:44:34 2015 UTC,No it isn't.
Frontend,3dd1dt,driftdeep,2,Wed Jul 15 13:27:15 2015 UTC,"CSS metaprogramming is a really interesting idea.  It could get messy if different people pick many different plugins for the same thing, but it's pretty common for a social consensus to develop in this sort of situation over which plugins to use 90% of the time."
Frontend,3dd1dt,gdwatson,1 point,Wed Jul 15 17:44:37 2015 UTC,What the hell is with the anti-postcss mentality in this sub? It's like the hivemind decides it doesn't like that one particular pre-processor and then that's it.   I'm sure I'll get downvotes for this but I don't see a problem with it.
Frontend,3dd1dt,TrackieDaks,6,Wed Jul 15 16:45:30 2015 UTC,"I feel like as someone who writes CSS daily, and loves SASS, I should have been able to glean the practical value of the tool/approach within 3 minutes of reading.  I don’t read this sub more than once every 6 months, so I’d argue that it’s less of a hivemind issue and more of a “we’re inundated with so many tools on such a regular basis, that if you don’t state the value, or the problems it solves immediately, I probably don’t care”"
Frontend,3dd1dt,TempoMuerte,5,Wed Jul 15 18:16:58 2015 UTC,"My take (disagreements below, please...):  There's a feeling of next-best-thing fatigue of late, leading to skepticism of anyone coming around saying they've beaten out sliced bread yet again. In this case, that was prodded by the fact that the previous popular article introducing it had that culty/contentious ""The thing you're all doing is wrong!"" tone that came off as more pressure than presentation. We were expected to throw away our perfectly adequate preprocessors because they were a thing of the past... according to someone.  While this article doesn't necessarily have as much of a head-butting attitude, the title still leads with that presumptuous,  cultish sense of ""everyone needs to do this new thing now!""  Maybe there are better-presented articles about PostCSS out there, but enough of the ones that have been posted here had that sort of mouth-before-money insistence that've turned off those weary of people trying to push next-big-things instead of letting them shine on their merits or happen naturally."
Frontend,3dd1dt,SuperFLEB,1 point,Wed Jul 15 18:25:09 2015 UTC,"I have just emerged from a 2 year crash course in front end development ... Now I can come home and watch or movie or see my friends instead of studying 7 days a week. Last year I persuaded a 8 man team to switch to SASS. There's is no way that I'm giving up my social life and getting the people I work with to switch to PostCSS from SASS.   Going from vanilla CSS to SASS is huge... to me it looks like the jump from SASS to Post CSS is incremental. When you factor in overhauling all your sites and retraining a team, then it's probably a negative."
Frontend,3dbtjz,ashkel,1 point,Wed Jul 15 01:29:21 2015 UTC,"This is great!  I built something like this when I first started out with grunt.  I have since switched to gulp and I would never go back, I highly recommend checking it out!"
Frontend,3d61vc,volar92,2,Mon Jul 13 20:22:26 2015 UTC,"That is, until you hit refresh.   Wish you could make this ""truly"" global and have it persist across page refreshes, but I guess people will forget to set it to normal if that was possible."
Frontend,3d8bu0,wishiknewthat,1 point,Tue Jul 14 08:12:37 2015 UTC,"On contract, the process has averaged a week for me. Last gig was contract-to-hire, but with decent chance to convert. I can't help you with NYC rates, but I wouldn't count on previous years of experiencing helping unless they were in a directly relate-able role.   I don't know if I've had the luck of the devil, but neither position really gave a shit about portfolios. I had coding tests at each (take data and make it look pretty) followed by generic questions about my abilities.   Best of luck with everything! If you ever consider St. Louis, my recruiter is actively looking for junior devs."
Frontend,3d8bu0,toographik,1 point,Tue Jul 14 23:48:49 2015 UTC,PM'd. Thanks.
Frontend,3d8bu0,Wyck,0,Wed Jul 15 11:03:15 2015 UTC,"Yeah, you're going to need more than 3 projects for people to look at you seriously.  You should have at least 6 - 9."
Frontend,3d8bu0,kylelee,11,Tue Jul 14 14:42:12 2015 UTC,"I routinely do portfolio reviews for graphic/web designers, so take this with a grain of salt.  I would rather see your 3 best projects than 3 great ones and 3 mediocre ones.   I always tell students and juniors to not get hung up on having 12 projects in your portfolio. If you only have 3 projects you're proud of, only show those. Only display your best work, never show something you're not proud of or doesn't demonstrate your best skills.  Don't give someone reviewing your portfolio a chance to be disappointed by sub-par work."
Frontend,3d9cdu,AllThingsSmitty,2,Tue Jul 14 14:51:52 2015 UTC,"This really reminds of the full-stack dilemma. Full-stack generally means client-side dev skills and back-end dev skills; Usually with a very strong bias to one or the other.  Now we're seeing great designers and UXperts that dip further down the stack to have some front-end dev skils.  The way I figure, if the industry is so excited to have front-end experts also know the back-end a little then we should be jumping at hiring UX/designers that know front-end dev a little."
Frontend,3d475d,adambsilver,8,Mon Jul 13 11:34:37 2015 UTC,"I want to add a few points:  Standards. The boring frontend developer (BFED) will not only adhere to and use boring Standards, he will try to develop his own code as extensions of existing standards if possible or as analogons if not.  Modularity. The BFED will treat all parts of his frontends as reusable, interchangeable modules - not only JS, but also HTML and CSS.  Concepts and documentation. The BFED will spend more time on these boring activities than on actual coding. To every cool developer's complete and utter amazement, this doesn't mean that the BFED would be much slower."
Frontend,3d475d,a-t-k,3,Mon Jul 13 17:07:02 2015 UTC,Well apparently I'm a BFED. Mostly one anyways...
Frontend,3d475d,wahh,2,Mon Jul 13 18:58:27 2015 UTC,Me too. We should have t-shirts made
Frontend,3d475d,HollandJim,4,Mon Jul 13 20:03:33 2015 UTC,My takeaway: don't use tools that will make your job easier and your code better.
Frontend,3d475d,halibuthero,1 point,Mon Jul 13 21:09:35 2015 UTC,"Then you took the wrong message. It should have been ""don't use tools unless you know why and how you should use them (or not)""."
Frontend,3d475d,a-t-k,1 point,Tue Jul 14 17:26:41 2015 UTC,"Hmm exactly - I mean I don't know about the rest of it, but using SASS over CSS and adhering to some standards of code and code formatting really helps collaborate, debug, and adds longevity to web dev projects - the ability to return to a project a year later and understand what is going really easily and quickly. I'll never go back."
Frontend,3d475d,oinkfu,0,Wed Jul 15 18:02:38 2015 UTC,Everything becomes a fashion eventually .... Even this. Once being a boring front ender becomes HOT then you won't be boring anymore.
Frontend,3d475d,driftdeep,0,Tue Jul 14 13:25:30 2015 UTC,"""Boring"" in this case doesn't mean actually boring, but rather conscientious. And hopefully, that won't change,  no matter how people call it."
Frontend,3d475d,a-t-k,2,Tue Jul 14 17:29:23 2015 UTC,Until conscientious becomes HOT.
Frontend,3d46cv,Kriem,1 point,Mon Jul 13 11:24:32 2015 UTC,"Anyone know of any (more complete) guides to optimising canvas animations (specifically lowering framerate, etc)?"
Frontend,3d449s,Kriem,1 point,Mon Jul 13 10:57:30 2015 UTC,Facebook ad?
Frontend,3d58el,complexissue,1 point,Mon Jul 13 16:58:24 2015 UTC,"So much more junk on the web than I thought! Thinking about what the web's future should be, I think a lot of cleaning is needed."
Frontend,3d58el,MahdiM,1 point,Mon Jul 13 17:00:35 2015 UTC,"I think you are confusing the internet style of democracy with a meritocracy. Neither human nor bot traffic are intrinsically drawn to the most informational or trustworthy sources. But certain bots are taught to. Certain are taught to drive local views to your site. Certain are there to prepare in case their owners users want to share your page. And some are just there to see if /wp-admin 404's or not.  In that climate I think that we should be happy for bot traffic. Google's knowledge graph and related data collection tools are arguably the fastest way to get somewhat trustworthy information there is. Facebook/twitter bots crawl the web to gather OG data, which helps everyone share things quicker/smoother, whether they be informational or not.  Most webdevs aren't fighting this, this should be embraced. In fact bot traffic is probably better at guiding people to the ""good"" places than any other tool, and are cheap bandwidth-wise. They usually don't download videos, images, often not even CSS/JS. If you markup your page in a friendly way for bots you will probably get more human visitors.  If a page I built has 95% bot traffic and 5% human traffic that isn't necessarily a loss as long as some of those bots helped the right humans get there. And some do.  As long as I can block the malicious bots (which is a must), I don't see the downside.  EDIT: Even if you could ""clean the web"", there really isn't a good way to do it. Whitelisting good bots leads to new and interesting services do not find your site. Blacklisting bad bots leads to a neverending arms race with blacklists that are millions if not billions of IP addresses/domains having to be distributed, rechecked, updated, rechecked again and so on."
Frontend,3d58el,Revivalism,1 point,Mon Jul 13 17:21:30 2015 UTC,I think OP just meant to say 'comprised'.
Frontend,3d2kls,718_bkQns,2,Mon Jul 13 00:41:17 2015 UTC,"I've gotta move to USA, British developer salaries suck."
Frontend,3d2kls,germainelol,2,Mon Jul 13 01:18:59 2015 UTC,"Don't be fooled, there is no healthcare, taxes etc. deducted in OP's number. The UK is a great spot to be as a developer right now."
Frontend,3d2kls,eightfivezero,2,Mon Jul 13 05:31:46 2015 UTC,"Yeah...based on the 2015 tax brackets, OP could probably expect to pay ~ $15,000 in taxes (just on the federal level, not including state taxes!!), before taking deductions / non-taxable / other details into account .  ( ~ $5k, + 25% of earnings over ~$38k).  As a single male with no deductions available beyond standard, I end up paying about 30% of my income to state and federal taxes (combined). That's not including my health, vision, and dental insurance, which comes out to about another $1,300 annually ( ~ $25 / week)"
Frontend,3d2kls,RotationSurgeon,1 point,Mon Jul 13 14:53:40 2015 UTC,Thanks for the info! I'm not American nor have I ever lived there so I'm happy to see somebody chiming in with real numbers.
Frontend,3d2kls,eightfivezero,1 point,Mon Jul 13 16:15:12 2015 UTC,"I would agree that London is, although it's incredibly expensive to live there. But even with living costs such as healthcare etc USA seems pretty good for developers? Let's say you were earning $100k (easy number to work with), how much do Americans actually spend out of that on unavoidable living costs such as healthcare, taxes etc.?"
Frontend,3d2kls,germainelol,1 point,Mon Jul 13 05:54:25 2015 UTC,"Here I am in Singapore, earning about USD38k per year and getting turned down for interviews because my asking pay is too high."
Frontend,3d2kls,ketsugi,1 point,Mon Jul 13 01:26:11 2015 UTC,I feel your pain. USA we're coming for you.
Frontend,3d2kls,germainelol,1 point,Mon Jul 13 01:31:53 2015 UTC,"There's also a huge gap in the cost of living between Singapore, Singapore, and New York City, New York, USA:  http://www.numbeo.com/cost-of-living/compare_cities.jsp?country1=United+States&country2=Singapore&city1=New+York%2C+NY&city2=Singapore .  Of course you know your situation better than anyone else, but on paper, it looks like you'd be doing just fine at that rate in Singapore."
Frontend,3d2kls,RotationSurgeon,1 point,Mon Jul 13 16:58:40 2015 UTC,"Oh, I'm not disputing that."
Frontend,3d2kls,ketsugi,2,Mon Jul 13 17:06:20 2015 UTC,"According to GlassDoor, you're right at average for the US and NYC.  http://www.glassdoor.com/Salaries/new-york-city-front-end-developer-salary-SRCH_IL.0,13_IM615_KO14,33.htm"
Frontend,3d2kls,RotationSurgeon,1 point,Mon Jul 13 02:33:47 2015 UTC,"Since nobody seems to be answering with real numbers, I'd say entry level at the top 30% or so of companies is around 90k.   That probably goes up to like 180k if you go to a Google/FB and price in the annual value of stock grants."
Frontend,3d2kls,jad3d,1 point,Mon Jul 13 14:14:17 2015 UTC,"probably around 90-100k in NYC.  I have the same amount of experience as you and my title is Senior UI developer. However, I don't think I'm anywhere near senior level in terms of skill for a company like Facebook or Google"
Frontend,3czz2x,Kriem,1 point,Sun Jul 12 09:00:51 2015 UTC,Blocking the default click event on the demo would be nice.
Frontend,3d06os,jftf,12,Sun Jul 12 11:15:14 2015 UTC,I feel it's insulting to engineers. I'm a Front End Web Developer. I'm not an engineer.
Frontend,3d06os,Rubans89,2,Sun Jul 12 15:02:10 2015 UTC,"Personally, I'm glad to be seeing nuance and specialization getting into the field.  I won't miss the bad old days of everyone being ""Webmaster"" who was responsible for everything that vaguely touched a computer"
Frontend,3d06os,fooey,1 point,Sun Jul 12 19:11:39 2015 UTC,"My thoughts exactly. And it's much more descriptive to those not in the web-tech world.    My mom works as SoC (chip hardware) engineer, and a Front-end Engineer to them is a person who works on the initial stages of the chip-development (usually short for ""front-end-of-line"")."
Frontend,3d06os,PhaZePhyR,1 point,Sun Jul 12 16:17:45 2015 UTC,"Front End Web Developer is more descriptive than Front-end Engineer but I don't see how it's insulting. The definition of an engineer is someone that designs, builds and maintains to solve a technical problem. We do exactly that."
Frontend,3d06os,rjm101,7,Fri Jul 17 22:40:53 2015 UTC,"In Canada, the term 'engineer' is reserved for those people that have graduated with an engineering degree and have completed the necessary work experience requirements. Since there are 'software engineering' programs at every major school, it's technically possible for someone to accurately call themselves a 'front end engineer' after ~4 years of working.  Outside of the professional context, I think using the term 'front end engineer' characterizes a shift from the spaghetti world of jQuery to the Facebook-inspired world of formal software engineering principles, led by Silicon Valley developers who want people to take front end development more seriously (and get paid more)."
Frontend,3d06os,_cott0n,3,Sun Jul 12 15:55:07 2015 UTC,It's just a title. Usually means there will be a heavier focus on JS and whatever framework the company is using. Can't wait for Front End Architect to start being trendy like the engineer title.
Frontend,3d06os,ngly,4,Sun Jul 12 13:59:00 2015 UTC,It's just a title   Not in some countries... https://en.m.wikipedia.org/wiki/Regulation_and_licensure_in_engineering
Frontend,3d06os,ExecutiveChimp,1 point,Sun Jul 12 14:27:45 2015 UTC,"Sounds like it's not so much about the title but their authorization ""to practice engineering and/or provide engineering professional services to the public""."
Frontend,3d06os,ngly,2,Sun Jul 12 14:49:23 2015 UTC,"Read the ""title usage' section. Would have linked directly to it but I'm on mobile."
Frontend,3d06os,ExecutiveChimp,1 point,Sun Jul 12 15:14:10 2015 UTC,"Ah, cool. Yeah, that definitely makes more sense. Thanks, I wasn't aware of that in some regions!"
Frontend,3d06os,ngly,1 point,Sun Jul 12 15:18:52 2015 UTC,Neither was I until a couple of days ago!
Frontend,3d06os,ExecutiveChimp,2,Sun Jul 12 15:21:16 2015 UTC,"As a front-ender looking for a job, that's seemed to be the general distinction to me as well.  Front End Developer jobs tend to be more html and css than js, while Front End Engineer jobs are mostly JS with much less html and css.  And then there's UI/UX Engineer which is related but different, and the new variations I've been seeing of straight JavaScript Developer/Engineer  I have seen UI/UX Architect listed as a position too"
Frontend,3d06os,fooey,1 point,Sun Jul 12 19:06:30 2015 UTC,"My previous title was ""Web Presentation Architect"". I still laugh every time I have to say it."
Frontend,3d06os,one800higgins,3,Sun Jul 12 18:26:34 2015 UTC,"Seems to me when a job description says front end engineer more often than not they are looking for someone with Java or .Net programming skills that will work on the frontend of the application.  When they are looking for a front end developer, they may look for experience working within those environments but not the programming proficiency."
Frontend,3d06os,escapefromelba,2,Sun Jul 12 14:02:10 2015 UTC,"I think this is a good example. While a lot of people would consider ASP.NET MVC a backend technology, I could see some companies considering a dev who integrates MVC with lower tiers a front end engineer."
Frontend,3d06os,UMadBreaux,0,Sun Jul 12 17:50:59 2015 UTC,"It's just the buzz word idiots are using now for the job to make it sound more important. It will be something different in a couple months. Your title could be front-end producer, what are you going to be doing making movies? No. Building the webs as always."
Frontend,3d06os,skeletorcares,2,Sun Jul 12 13:59:09 2015 UTC,"There are producers in many lines of work. Oddly, web is one of them."
Frontend,3d06os,one800higgins,1 point,Sun Jul 12 18:28:10 2015 UTC,"Just my opinion, but I've always thought the engineer/developer divide happened around the time you're getting Big O notation involved and seriously optimizimg algorithms for speed.   If you're just ""writing modules/components inside a framework, probably  a developer."
Frontend,3d06os,jellatin,1 point,Sun Jul 12 19:12:06 2015 UTC,"How is it any different than ""software engineer""? You don't need a degree for that either."
Frontend,3d06os,gearvOsh,1 point,Sun Jul 12 21:47:07 2015 UTC,"I would call myself a back-end & front-end web developer, but not ""engineer"" in any regard or ""full-stack"", I'm not writing assembly to HTML."
Frontend,3d06os,daliwali,1 point,Sun Jul 12 22:03:53 2015 UTC,"if you build sites that can handle large amounts of traffic, function cross-browser and cross-platform, gracefully degrade/progessively enhance, while minimizing 3rd party dependencies, maintaining wpo, all the while spitting out semantic markup and applying appropriate ux and ui techniques, (not to mention readability, findability, and the rest of the -ilities) while supporting accessibility/internationalization in your work, you are a front end engineer, aka fronteer. all fronteers get dirty on the backend as well. its essentially taking every aspect of front-end seriously and applying it to everything that you do."
Frontend,3d06os,jalbertbowden,1 point,Mon Jul 13 02:59:20 2015 UTC,"Two points:  A lot of front end whatever people nowadays are formal CS folks. This is the way front end has been moving so expect to see a lot more of this.  Most software ""engineers"" don't engineer anything, they build things.  The people who write the libraries and frameworks we use, those are typically engineers.  The people who use those libraries and frameworks are typically developers.  People like ""engineer"" in their job title because it makes them sound more important than they really are. See also ""Senior"".  At the end of the day, it's just a job title and doesn't matter."
Frontend,3d06os,magenta_placenta,1 point,Mon Jul 13 14:03:18 2015 UTC,"For me if it has engineering at the end means you have an engineering degree, like software engineering, computer engineering or computer science but you are more interested in front end technologies. It is also fine to using developer too in same situation. I guess not much difference on there .  But if someone doesn't have the engineering degree and uses engineer as the title it can be offensive for some people. As I said using developer is always fine."
Frontend,3d06os,namcojoulder,1 point,Mon Jul 13 14:59:03 2015 UTC,"I think if the skill level warrants the term ""engineer"" it should be used. But for all front-end devs? No way."
Frontend,3d06os,complexissue,-1,Mon Jul 13 17:02:07 2015 UTC,"The ""title"" is more a description, not an actual degree. The description itself is more about the mindset than anything else. An engineer is something who tends to build stuff from scratch, while a developer is more used to iterative processes, incorporating existing resources."
Frontend,3d06os,a-t-k,7,Sun Jul 12 11:50:32 2015 UTC,"The ""title"" is more a description, not an actual degree.   This is true except where having certification is a requirement for practice. You can't just give yourself a title of Doctor and start operating on brains."
Frontend,3d06os,TrackieDaks,0,Sun Jul 12 11:53:22 2015 UTC,"It's a gray area in some countries, in other countries it is a crime."
Frontend,3cxlyw,sofiagarcia,14,Sat Jul 11 18:09:03 2015 UTC,Learn Sass or LESS and learn a package manager like Bower and a task runner like Grunt.
Frontend,3cxlyw,hpm6748,11,Sat Jul 11 18:54:03 2015 UTC,Gulp is good too
Frontend,3cxlyw,anarchy8,10,Sat Jul 11 19:42:00 2015 UTC,"I would recommend NPM over Bower, but that's personal preference."
Frontend,3cxlyw,homesweetocean,0,Sat Jul 11 20:25:24 2015 UTC,"If you are just starting out, postCSS would be a good place to start learning CSS processing."
Frontend,3cxlyw,doiveo,7,Sun Jul 12 02:24:14 2015 UTC,"I think for me it was the separation of a CSS framework to really understand what makes things work.  I honestly say that people should use Bootstrap or Foundation in a project first when learning CSS.  There is SO much value to what they provide.  You can start with a base project and really tinker with overrides and end up with something great.  However, once I got comfortable with the grid and media queries (some of the great things that Bootstrap does) I started to roll my own and I really enjoy it.   I don't do development professionally, so I don't have a huge workflow established.  However, if you are working on few projects find a common denominator (I will need Jquery, Bootstrap, SASS, MVC structure..etc) and create a project Boostrap/Skeleton of your own.  Really helps keep everything inline and shaves precious time of getting your act together for a new project.    I think the thing I wish I knew was to not be worried or afraid about all the technologies out there.  Questions of should I learn Djano or Rails?  Do I need to learn Angular, but wait, what's React.js?  It does get daunting, and the common consensus is that even professional devs get kind of blown away at times though.    Just sticking to something and learning that is WAY better for you than having a familiarity in multiple things.  My example (which I had to find out the hard way) is you want to start a new project that has a huge list of needs (authentication, CMS, and data manipulation (CRUD)) and even though I'm comfortable with multiple technologies to start out I'd still have to learn how to a bunch of that technology for this framework. Rather, if I learned one well I could be 40% into the alpha.   Feel free to PM and exchange contact information. Trying to get a development friendbase going on so I can exchange and bounce off ideas.  TL;DR Take it slow.  Learn something well and don't worry about all the things out there.  Establish your own ground and roll with it.  Cheers!"
Frontend,3cxlyw,Did-you-reboot,7,Sat Jul 11 19:12:26 2015 UTC,"I'll give you a tip that I resisted until it was forced on me, and now I can't do without it.   Use a code style enforcement module. Here's why. Everyone has their own quirks with spacing, braces, camelCasing, etc. Even your own code will vary. When you work on code with other people, it's troublesome to pick through their work and it's annoying when they make fixes to your code and reformat things to be how they like.   Teams need to have a single consistent style. Mainly I'm talking about JavaScript, but this also applies to CSS, html, and anything else with variability.   We used jshint at my old company, but recently that project has moved away from style enforcement. So I've switched to ESLint.   ESLint is amazing. It has a ton more options than jshint did and is even more picky with its defaults. When I was setting it up, I ran it against some of my own jshint'd code and it caught problems.   Linting makes you a better programmer. It makes working with other people on code easier because everyone follows the same rules.   Generally it doesn't matter what set of rules you settle on, as long as you stick with them. ESLint has a lot of great defaults styles that other companies have published.   Lastly, since you're most likely using git, you need to setup ESLint to run in a precommit hook. HOLY CRAP ITS GREAT. You can't check in badly formatted code. It literally prevents you from doing it."
Frontend,3cxlyw,geuis,3,Sat Jul 11 22:05:50 2015 UTC,"For me, a front ender in 2015 must be familiar with the following keywords: sublime javascript bower sass npm git angular react jquery rest balsamik"
Frontend,3cxlyw,yarauuta,2,Sun Jul 12 00:31:26 2015 UTC,"Including a specific text-editor and wireframing service might be a bit much, it's better to let people choose those based on personal preferences and the companies/clients they will work with."
Frontend,3cxlyw,MahdiM,3,Sun Jul 12 11:29:25 2015 UTC,"re: CMS's: Wordpress and Drupal are by far the most popular, but that doesn't necessarily make them the best. My personal opinion (been a web dev for over 10 years now and built commercial sites in most open source CMS's out there):   Stay away from Drupal. It is front-end hostile (requires you to bend your markup around its restrictions) I personally don't love wordpress because I think it's very inconsistent and has accreted features over time without any unifying architecture. That being said, a LOT of people really love Wordpress, and it's pretty much everywhere so it's certainly worth learning. ProTip: use the Advanced Custom Fields plugin. Always. It turns Wordpress from unbearable to workable for non-blog sites. Everything else: the ideal CMS for a front-ender is one that doesn't dictate what your markup should be or how your site should be structured. In my opinion these are good ones:   Craft CMS: it's not free, but it's very popular with experienced designers/developers for very good reasons. Well-designed and clean architecture with a great dashboard for the admins. Stays totally out of your markup  ProcessWire: this one is free/open-source and stays entirely out of your markup. I don't love it though because it is more data-oriented than page-oriented. (Hard to explain succinctly but you create fields separately from page types so it becomes unwieldy to manage IMO). Perch: not free, but very reasonably priced. Great docs and support too. This is probably the easiest to get into for simpler sites. Concrete5: not as architecturally clean as the others, but makes up for it with a fantastic editing interface for site admins -- all editing is done on the front end so people are seeing content in the context of the site (it really makes a huge difference for clients I've found -- we have way less support requests for Concrete5 sites than any other system). Joomla: almost forgot to mention this one. It sucks in every way, don't bother. Used to be really popular so you might see it around, but it has nothing to offer over other systems and is a total mess.    If you'd like any more details feel free to respond with specific questions."
Frontend,3cxlyw,shedsquatch,1 point,Sun Jul 12 02:43:52 2015 UTC,"Joomla: almost forgot to mention this one. It sucks in every way, don't bother. Used to be really popular so you might see it around, but it has nothing to offer over other systems and is a total mess.   Thank you.  One of our decisions makers decided to be a people pleaser one day and let a client dictate what CMS they'd be using.  So the client asked their in-house IT guy.  He happened to have used Joomla! once, so that's what he told them.  I want to slap everybody involved in that decision every time I work on that project."
Frontend,3cxlyw,RotationSurgeon,2,Mon Jul 13 02:52:06 2015 UTC,"You're in a good place to prep yourself for what's actually coming, not what's currently in use.  Here's my take on ""the next big things"" :   SASS and LESS are great (though I greatly prefer Stylus over either), but PostCSS is your best bet moving forward.  Only focus on SASS or LESS if you're also going to focus specifically on a framework that uses one of the two. I love Coffeescript.  I do.  But Google has thrown their hat in with Microsoft's Typescript for Angular 2.0.  That's a big thing.  It bears paying attention to."
Frontend,3cxlyw,RotationSurgeon,1 point,Mon Jul 13 02:44:30 2015 UTC,"TLDR: version manager(git), taskrunner(grunt), Sass/LESS, be active in the community  I'm in a similar stage than you (been taking programming courses for about a year, codecademy, teamtreehouse, doing exercises at codeeval...), and here are some things that generally helped me grow.  First of all you need to pick an MVC that you like and stick with it. I only know Ruby on Rails and AngularJS, but I am pretty sure there is a PHP equivalent as well. After you've made your choice, pick a project and start working on it. Focus on a single project and see it trough. Set a deadline, set goals, and learn while you work. You have to write ugly code, and break things in order to get good.   Work on your development environment   learn and use git or a similar version controller manager. This will help when planning your projects, getting organised and generally improve your workflow. It is also a must when collaborating with people. use a package manager (for instance Bower for javascript), if you're planning on sticking with rails probably something else. It will make your life easier, and save a lot of time. start using a task runner like Grunt or Gulp. See what other people commonly use, and learn from it (I learned grunt by picking up yeoman, generating a basic angular app and then watching what it does). Uglifying and minifying your code, along with automated testing will help you understand how to write efficient code, and keep up with the current standard.   Learn Sass or LESS (as already mentioned). It will make writing CSS a lot easier, and will generally help you understand how Bootstrap and similar libraries work.  Try to follow what other people in the industry are doing, and try to get a basic understanding of why. Find web pages you like, and try to incorporate features you like into your own projects. Build them from scratch, and learn as you go along.  You say you know Bootstrap. Try coding a webpage that has all the functionality that bootstrap provides, without actually using bootstrap. This may sound like a lot of unnecessary work, but it'll be worth it in the long run. You will learn a lot about responsive web design doing this.  Be active in the online community. There are a lot of coding schools, blogs, message boards, chat rooms, podcasts... that are populated by people that want to learn. Ask questions and help others. Write a blog, share your projects, argue, think. Never stop learning.  Start looking for a job. Work on your resume until you start getting interviews. See what kind of people invite you. See what kind of requirements they have, see their working conditions, see what they are working on. The main reason I got into Angular was because 3 out of 4 interviews I've landed in the last half of a year mentioned it. Finding a good programming job (at least in my experience) is hard work, and won't happen overnight. Worst case scenarion, you can evaluate why you fail, and what you need to improve in order to actually work.  Oh, and learn how to google efficiently."
Frontend,3cxlyw,Shooshte,1 point,Sun Jul 12 11:20:20 2015 UTC,Work with as many designers as you can. Most of what I've learned in CSS was when I worked with a new designer and had to implement something I had never done before. You learn a lot when you have to program something someone else designed.
Frontend,3cxlyw,lamb_pudding,1 point,Mon Jul 13 16:00:00 2015 UTC,"http://nodeschool.io Just start to learn javascript and then later learn html and css.  Don't bother with ""Sass, LESS, gulp, bower, grunt and the like. You can go into them later. If you just follow the ""core modules"" of http://nodeschool.io, i recommend:   javascripting scope chains & closures how to npm browserify adventure (teach you how to use the stuff from before in the browser)   If you want to deepen your node knowledge, then also do: * learnyounode ... and basically explore the other ones too as you see it fit."
Frontend,3cxlyw,serapath,1 point,Tue Jul 14 22:19:48 2015 UTC,"the other stuff is NOT FIGURED OUT YET!!! By the way you know the basics, you might be lucky :-)  When it comes to HTML, there is ""Virtual DOM"" and ""hyperscript"" and lots of different approaches that try to overcome slowness and limitations of the DOM.  When it comes to CSS, there is of course the old preprocessors (stylus, sass, less, ...) but also lots of ""CSS frameworks"" and know there are also POST PROCESSORS (rework css & postcss and the like...), but actually, nothing of that might be the answer to the crap CSS is, and instead people try to come up with something that is truly composable and modular.  ... so maybe you should follow: https://github.com/css-modules/css-modules if you are interested, but if you are just starting, start with javascript and by the time you are far enough with that, new ways might have been figured out :-)"
Frontend,3cxlyw,serapath,1 point,Tue Jul 14 22:24:32 2015 UTC,"I'd suggest gulp and a pre-processor for your CSS.  Build a scaffold for yourself to automate your projects (something like this).  Get VERY comfortable with version control and git/terminal.  Framework wise... just pick one and build something with it.  They're all great products, it comes down to functionality and preference."
Frontend,3cxlyw,Wyck,0,Wed Jul 15 21:14:36 2015 UTC,Babies aren't microwavable
Frontend,3cxlyw,ZombieNinjaPirates,-1,Mon Jul 13 14:47:14 2015 UTC,"Have a look at our developing standards. CSS4 and ES7 are just around the corner; some HTML5 standards are relatively unknown.  At the moment, node.js/io.js is about to replace PHP and Ruby for my development backends/CMS.  CoffeeScript is already superseded by ES6/7 transpilers.  Update: I see the tendency to rely on toolkits and frameworks too much as critical. If this carries on, the ""real"" frontend developers will be those who develop frameworks and most of those who call themselves frontend developers will actually be framework users."
Frontend,3cxlyw,a-t-k,-3,Sat Jul 11 18:19:06 2015 UTC,Lmao what the? Node will NEVER replace PHP. You seriously must be new
Frontend,3cxlyw,SomeRandomBuddy,2,Sat Jul 11 19:13:55 2015 UTC,why?
Frontend,3cxlyw,distortednet,2,Sat Jul 11 19:20:26 2015 UTC,"I'm a Frontend developer for over 7 years, Web developer for over 20. And you need to learn to read: I wrote that node is becoming the basid for my development systems, not necessarily for everyone elses."
Frontend,3cxlyw,a-t-k,0,Sat Jul 11 19:23:34 2015 UTC,"Css3 doesn't even exist, they split it all up"
Frontend,3cxlyw,Vordus,0,Sun Jul 12 00:24:03 2015 UTC,"CSS3 is split into selectors and different attribute modules, that is true. Nonetheless, all of this is part of it. Just because there isn't a single document but multiple ones doesn't mean CSS3 doesn't exist."
Frontend,3cxlyw,a-t-k,0,Sun Jul 12 06:19:32 2015 UTC,Css2.1 was the last version
Frontend,3cxlyw,Vordus,2,Sun Jul 12 06:27:24 2015 UTC,Most parts of CSS3 are already widely supported. CSS4 is underway. Please inform yourself to avoid making similarly ignorant statements in the future.
Frontend,3cw3vw,ronaldsvilcins,1 point,Sat Jul 11 07:06:00 2015 UTC,This needs proofread.
Frontend,3csqq6,yashesh321,1 point,Fri Jul 10 13:52:28 2015 UTC,makes dope memes yo. http://imgur.com/7KfjEkk.gif
Frontend,3cqiqy,olololeosha,3,Thu Jul 9 23:36:28 2015 UTC,"From the docs:   ""Oh, the great Tao of programming! Indeed all things are possible within you, for you are perfection itself, indeed all the patterns exist within you, for patterns are your sacred body, indeed all the good practices flow within you, for good practices are your holy blood, indeed all readability and reusability comes from you, for readability and reusablity are your divine breath! But tell me, oh, Magnificient Tao, why have you forsaken the writers of animation libraries, why do they all suck? It is for our sins! Without doubt it is because our defiance to write tests and comments and document our code that you send us such punishment!""   just beautiful."
Frontend,3cqiqy,edanschwartz,1 point,Fri Jul 10 14:22:49 2015 UTC,"ty :)  I wasn't sure if people would appreciate it, was even about to remove it and replace with srs corporative tier docs ;)"
Frontend,3cro18,gsdk_,1 point,Fri Jul 10 05:48:18 2015 UTC,So...the feature on Microsoft's Edge.
Frontend,3crwfo,markokikinda,3,Fri Jul 10 07:30:36 2015 UTC,"Ultimate reset of elements throught modern browsers, without the legacy resets. Combo of best practices created from Normalize.css.   It would be useful to know which browsers are excluded. I'd also like to see some of these ""legacy"" resets, just to know what I'm missing. Normalize.css is something like 7KB uncompressed so it's not a huge gain (although every byte counts, of course)."
Frontend,3crwfo,menno,2,Fri Jul 10 08:30:36 2015 UTC,"Certainly, all of that info will be in the docs with the next release. Excluded browsers are Safari < 7.0, IE7 - 8, ancient Androids and iOS. More focus on Microsoft's newer browsers, IE11 and doing initial testing on Edge. Minified they come pretty close although Canonical.css is still smaller and providing a wider solution. Box-sizing is set to border-box with inheritance, and Canonical.css is opinionated but not limiting. Font scaling and rendering issues have been addressed, also the source is in LESS which might be a better option to some. That's it in a nutshell."
Frontend,3crwfo,devolute,4,Fri Jul 10 09:53:18 2015 UTC,"Box-sizing is set to border-box   To me, this takes us back to the older style or reset (i.e. make some big reset decisions for you).  Not for me. Good luck with the project, though."
Frontend,3crwfo,AntiqueCurtains,1 point,Fri Jul 10 15:46:11 2015 UTC,might be useful to... you know... put that info in the README?
Frontend,3crwfo,klownfa,2,Fri Jul 10 13:35:43 2015 UTC,Believe it or not I plan on doing exactly that. And you made it your mission to deliver your actually helpful advice in such a condescending tone. You can do better.
Frontend,3crwfo,AntiqueCurtains,6,Fri Jul 10 13:46:33 2015 UTC,"You can too, don't put a useless readme, and take 5 minutes to write about yet another css reset before submitting it to reddit."
Frontend,3crwfo,gnarly,1 point,Sat Jul 11 01:00:20 2015 UTC,"""a condescending tone""  ""you can do better""   lol fair enough."
Frontend,3crwfo,gearvOsh,1 point,Fri Jul 10 15:02:29 2015 UTC,"It would be useful to know which browsers are excluded.   Definitely, seeing as some of the resets in here seem to be for IE8?   I'd also like to see some of these ""legacy"" resets, just to know what I'm missing.   Probably best to look at Normalize itself then :) https://github.com/necolas/normalize.css/blob/master/normalize.css  If you want even older browsers: https://github.com/necolas/normalize.css/blob/v1/normalize.css"
Frontend,3crwfo,klownfa,2,Fri Jul 10 09:41:16 2015 UTC,"The only IE8 fixes left, are those affecting IE10, IE11."
Frontend,3crwfo,jaredcheeda,3,Fri Jul 10 09:57:51 2015 UTC,Instead of yet another reset CSS. It would of been nice if you contributed to Normalize to provide a non-legacy compat version.
Frontend,3crwfo,hzhrerherwhhrt,2,Fri Jul 10 23:13:45 2015 UTC,"What makes this modern versus normalized.css? Does it normalize, or reset styles? What makes this better than normalize.css? What features does Canonical.css have?   If styles are reset, then it really isn't a replacement for normalize.css, your title is quite misleading."
Frontend,3cpzby,xbrandnew99,4,Thu Jul 9 21:04:32 2015 UTC,"TL;DR: Back end developers without penetrating understanding of HTML/CSS will cream their pants for this Elm wood, but seasoned front-end developers who completely understand how HTML/CSS/JavaScript interact will probably remain skeptical for...well...a very long time.   [Elm] aims its scissors squarely at the knot of complexity that is frontend development. The tangle of threads, HTML, CSS, and JavaScript, make web development awkward.   I don't find it awkward. It makes perfect sense to me. This statement really confused me.   During his presentation, Evan Czaplicki, Elm's author, vertically centered a page element and the room cheered. The message I got was clear, ""this is how weak our current tools of HTML and CSS are.""  We can use innovative techniques that we've learned in the time since the early 90's (JavaScript, Java, Ruby, Python, etc.) to build better stuff.   Did he just apply a CSS class? Pray tell how he did this without jQuery/JavaScript? The browser still has to render it somehow...and I reckon that browsers don't speak Elm yet.  The room cheered because you were at Emerging Languages Camp--a room full of people who live, eat, sleep and breath object oriented programming and have more computer science degrees and accolades that would cover an entire football field. I read this entire thing as another excuse resource for back-end developers to ignore the need to learn about and use markup languages which aren't OO.  Were it a room of front-end developers, I imagine maybe two or three traitors would clap, but the rest would stare on, eyes glossed with skepticism while wondering when lunch will be provided.  So I Google the author of Elm:   After graduating from Harvard with a degree in Computer Science, I worked at Google as a Software Engineer on the gmail team (source)   Yep. That's all I need. I'm not writing it off. I'll keep it on my radar, but I'm not going to be dropping everything to learn this as it echoes the same feelings of ""wha...why..huh?"" that HAML does.  Edit to add: I would be less skeptical if the author of Elm was someone actually doing front-end dev work the past x number of years, I guess. Not saying he's not a smart guy, obvious Harvard proves that."
Frontend,3cpzby,harborer,5,Fri Jul 10 07:43:25 2015 UTC,Posts like these make me feel like I am the only newbie who actually really likes HTML/CSS and JavaScript. Your comment restored my faith that I am not crazy.
Frontend,3cpzby,lvrbrtsn,1 point,Fri Jul 10 10:08:37 2015 UTC,That's like chip designer ignoring a quantum physicist because he's never laid out a chip.
Frontend,3cnr5v,aloisdg,9,Thu Jul 9 09:44:24 2015 UTC,It feels really weird to have an article targeted at exactly you. Definitely saving this for later.
Frontend,3cnr5v,Ecsta,2,Thu Jul 9 14:41:04 2015 UTC,What I would like to know is how do u tie this in with Express en Node. Like how do I save and retrieve data and render a template both serverside and clientside
Frontend,3cnr5v,Suepahfly,2,Thu Jul 9 15:12:05 2015 UTC,"It's pretty easy, check this out: http://reactjsnews.com/isomorphic-javascript-with-react-node/  Essentially:  var React = require('react'),     Component = React.createFactory(require('componenets/Component'));  router.get('/', function(req, res) {     var componentHTML = React.renderToString(Component({}))      res.render('index', {         component: componentHTML     }; });   The object in there are the props. I'm sure you could replace the Component({}) stuff with <Component /> but I haven't tried it.  Then in the client side code do React.render(<Component />, document.getElementById('component'); like normal to the same node the template's local refers to. This way you're rendering it out on the server, then React on the client will see there's already nodes in there and so long as you don't have different state/props it won't have to re-render it, it'll just attach events/componentDidMount etc.  For transferring the initial data to the client, put the data for the props you used to renderToString in a script in the template and reuse that data as your props when you're doing the React.render call."
Frontend,3cnr5v,deathbysniper,1 point,Thu Jul 9 22:44:11 2015 UTC,That seems like a really interesting resting read. To bad the site simply won't render on Dolphin. But I'll be sure to check it out when I get to the  office.
Frontend,3cnr5v,Suepahfly,2,Fri Jul 10 06:23:40 2015 UTC,"Sentence for people who know just enough jQuery to get by:    ""Go learn Javascript."""
Frontend,3cnr5v,REFERENCE_ERROR,2,Thu Jul 9 18:48:00 2015 UTC,"Loved the tutorial. Great job putting it together, I have thought about trying out react and with this in my pocket it'll be ten times easier :)"
Frontend,3cnr5v,Noaaxoxo,1 point,Fri Jul 10 07:26:51 2015 UTC,I recently picked up React.js. This is a really good tutorial that helps understand React.js and its core model. Thanks!
Frontend,3cqwfj,Deespicable,3,Fri Jul 10 01:30:37 2015 UTC,"Hey Deespicable, I can talk a little bit to this as I use this pattern in a newsletter I make (link for anyone interested).  In some instances, it makes sense to use JSON if you're comfortable editing in the JSON format and you have templates (specifically, fragments of the DOM) that need to fill one or more of the following use cases:   The templates are complex and tedious to type out You reuse the same template patterns over and over You need the templates to remain consistent across the site, in multiple places   I have all of these requirements for my newsletter because I'm writing HTML email templates, I reuse the same patterns constantly, and I want them to look consistent across the page. The way this works is that I define a JSON object which has a property contents which is an array that holds all of my objects that represent chunks of content. For instance:  {     ""template"": ""glitchet-customized"",     ""newsletterTitle"": ""Glitchet 0.4: Life and death by future"",     ""heading"": ""Life and death by future"",     ""issue"": ""0.4"",     ""date"": ""2015-07-10"",     ""contents"": [         {             ""template"": ""title_primary"",             ""heading"": ""Life and death by future""         },         {             ""template"": ""image_block"",             ""url"": ""https://www.facebook.com/groups/Glitchcollective/permalink/782348471886707/"",             ""newsletterImage"": ""http://i.imgur.com/3CrIkYN.jpg"",             ""siteImage"": ""http://i.imgur.com/KbuD649.jpg"",             ""sourceNote"": ""<b>The Cloud Voyeur</b> Rodrigo Garzón""         },     ] }   You need an intermediary step to convert your JSON to a template. You'll notice that my content objects each have a template property - my newsletter building tool looks for this, finds the relevant template, and then shoves the data into it and outputs a rendered piece of content. I gain the following advantages from doing this:   I don't have to write HTML I can ""select"" HTML I want with the template property I can think in terms of content or data as opposed to dealing with tags and classes and styles because I know it's already taken care of If I ever want to port my data to another platform (which I do, because I put my issues on the website after new issues come out), it's as simple as copying my JSON to that other platform I can also take the JSON and store it directly as a document into a document database if I wanted and expose it via an API   There are a couple downsides:   Requires initial setup / tooling (but for most use cases this is pretty simple to do) Writing JSON can occasionally be a little finicky No multiline support, which is annoying, so you'll eventually find yourself wanting to build tooling to convert from rich text to JSON as well   Overall, it's a pretty good approach if you have people who are comfortable editing in that format, and not so much data that using JSON isn't feasible (because it's essentially a flat file format that you have to parse out - at larger scales you generally want to use a DB)."
Frontend,3cqwfj,wayspurrchen,1 point,Fri Jul 10 02:19:00 2015 UTC,"Seems to make sense in your case, but these microsites are structurally different each time. Also we support different languages (German, French, Russian, etc). Can it handle the special characters?  Be aware, the reason he's proposed this method is so he can hand off the file to the marketing people that provide the URLS/copy/Images. I tend to be cautious of handing files that effect my pages to people that don't code"
Frontend,3cqwfj,wayspurrchen,2,Fri Jul 10 02:41:09 2015 UTC,"JSON is just a standard on top of a flat file format, so if you save it in a certain encoding and load the file in the same encoding and then parse it, it should give you back the same special characters so long as those are valid in the browser they're displayed in.  It sounds like a bit of an odd use case, to give JSON to content folks so that they can populate it. If there are some very clearly defined fields that are the same across your individual sites, this might make sense. The templates / structures can differ from site to site, but the benefit would be in having a consistent content ""contract"" that can be loaded into any site's rendering process.  If all of this varies between sites, I can't see a clear reason to use JSON over plain old HTML editing, especially if the sites are small in scope."
Frontend,3cqwfj,wayspurrchen,1 point,Fri Jul 10 02:53:06 2015 UTC,I'm glad to see that there was some validation for my hesitation. It seemed very unnecessary for structurally different microsites. A couple of last questions. Does using this odd method slow down load time compared to the traditional method? Does it affect how Google reads the page (asking for SEO reasons) I'm also thinking of asking the vendor that scrapes our site for mobile if this method will affect them
Frontend,3cqwfj,wayspurrchen,3,Fri Jul 10 03:04:08 2015 UTC,"It shouldn't - loading flat files can have a small overhead, but it's so small as to be negligible unless you handle massive traffic. It also shouldn't affect the page rendering / scraping, as you're still looking at the same HTML at the end of the process."
Frontend,3cqwfj,morphotomy,2,Fri Jul 10 13:34:40 2015 UTC,Thank you so much for all the information. I really appreciate you taking the time to give such a thorough answer
Frontend,3cqwfj,a-t-k,3,Fri Jul 10 14:30:31 2015 UTC,No problem! Happy to help! :)
Frontend,3cpph5,magenta_placenta,4,Thu Jul 9 19:56:25 2015 UTC,"It looks kind of pretty, but the user experience is poor. Am I supposed to be able to type in the box? It looks like I am, but it doesn't work (FF 39, Chrome 43). It seems like it wants to allow me to type and then auto-complete for me, but that's not what happens. Why show a cursor at all? It only serves to confuse the user.  Another problem is keyboard support. Delete and Backspace work for deleting the rightmost selected option, but there's no keyboard support beyond that. Arrows, control, and shift do nothing (as far as I can tell)."
Frontend,3coflr,coffee-makes-me-poop,7,Thu Jul 9 14:15:09 2015 UTC,"I would still say the majority are still using Photoshop for designing websites -- especially if you look /r/webdev and /r/web_design . Traditional slicing though? No, I would say most devs are extracting assets out of psds. Some companies are transitioning to Illustrator and/or Sketch which is more forward thinking, imho. Designing responsive sites and using more flat components -- it just makes sense to use vector based programs (that actually support multiple pages/artboards) and importing raster assets from Photoshop as needed."
Frontend,3coflr,mtx,3,Thu Jul 9 17:34:18 2015 UTC,Ditto on Illustrator. I love my SVG with PNG fallback.
Frontend,3coflr,harborer,3,Thu Jul 9 17:41:54 2015 UTC,"I feel like you misconstrue the variety of positions the title ""front-end developer"" can cover. For example, at a marketing/design agency, the ""front-end developer"" is the guy/gal who creates pixel perfect transformations from wireframes and PSDs to HTML/CSS with some JavaScript functionality.  At a startup, for example, a ""front-end developer"" is charged with application development using primarily JavaScript and/or a JavaScript framework like AngularJS.  Don't discredit a company just because what they are looking for doesn't match what you have studied as...   self-taught over ... the last several months   explains a lot"
Frontend,3coflr,harborer,1 point,Thu Jul 9 17:39:40 2015 UTC,Don't get me wrong. I don't want to discredit anyone. I am definitely still learning. I am just trying to understand what more I need to add to my skillset and what I shouldn't waste time with.
Frontend,3coflr,harborer,5,Thu Jul 9 18:06:33 2015 UTC,"I will assume you have a decent understanding of HTML5/CSS3. While I'm not necessarily a fan of Udacity, check out this checklist for an good resource of the necessary skills a well-qualified front-end dev should have under their belt. Not all need to be checked...like you can stick to one JavaScript MVC Framework (e.g. Angular).  Then read Eloquent JavaScript, and the Airbnb Javascript Style Guide as it will teach you good coding style/technique. Finally, learn the basics of PHP from CodeAcademy because you will likely see a little back-end fun even as a front-end developer."
Frontend,3coflr,harborer,1 point,Thu Jul 9 19:05:30 2015 UTC,Thanks for the links!
Frontend,3coflr,RotationSurgeon,1 point,Thu Jul 9 19:24:54 2015 UTC,"I would recommend you try your hand at finding a design from dribbble, for example, and turning it from the JPEG image (PSD usually not offered) into a full fledged, HTML/CSS/JS Prototype."
Frontend,3coflr,SolutationsToTheSun,1 point,Thu Jul 9 18:56:53 2015 UTC,"It depends on what you mean by ""slicing.""  Do you mean ""producing a series of rectangular images that are then placed in a tabled layout in order to produce a 'pixel perfect' product?""  Or do you mean ""Extracting assets from the designer's mockup?""  If it's the first, then yes, avoid it like the plague.  It's antiquated and generally a bad practice.  If it's the second...well, that's pretty much everywhere, every day, for every project that isn't 100% ""flat.""  What you're going to find, however, is that more and more designers are moving away from Photoshop and Illustrator, and towards things like Sketch, Affinity Designer, Affinity Photo, Pixelmator, etc.."
Frontend,3coflr,RotationSurgeon,1 point,Fri Jul 10 12:13:32 2015 UTC,"Out of curiosity, why would anyone move away from PS and AI? I took them to be as the industry standard currently, and definitely quite efficient."
Frontend,3coflr,SolutationsToTheSun,1 point,Fri Jul 10 14:23:16 2015 UTC,"industry standard currently   Yes.  They're in major common usage.  They're also not built with the web in mind.  It's a bit telling that the most powerful piece of image editing software commercially available still leaves users requiring third party compression programs just to produce an optimized image file.  Also, they're just now catching on to the needs of responsive design with the new aftermarket ""Design Spaces"".  As far as Illustrator goes, it's a great vector software.  But it was still designed with illustration in mind, not vector graphics for the web.  The two come with a hefty price tag, a heavy operating cost (Not everybody finds them ""definitely quite efficient""), and an ingrained mindset of how to operate.  Nothing about the feature set or design of either program answers the question of why they're industry standards, which just boils down to Adobe at one point having cornered the design software market.    Now there are tools being built specifically with the needs of web designers in mind that have comparable feature sets to Adobe's products which are more accessible to newcomers to the industry.  They're cheaper, they're quicker (take a look at Affinity Photo's live effect previews for an example), they're lighter (Affinity Photo is 1/3 the installed size of Photoshop CC 2015, Pixelmator is 4% the size)...They also work with Adobe's file formats.  At this point, the reason people entering the industry use Photoshop because they believe they're supposed to, and because they're told to.  There's no longer a closed ecosystem in which Adobe is the apex predator.  I'm not arguing at all that Adobe's products are dead or useless -- they're powerhouses with tons of community surrounding them, and a firm foothold in the industry.  They're just losing traction, as is wont to happen over time with most anything, and for good reason -- there are finally options available that work.  EDIT: Math"
Frontend,3coflr,JaCeLo3,1 point,Fri Jul 10 15:34:52 2015 UTC,"These are all good points, thank you!"
Frontend,3coflr,JaCeLo3,0,Fri Jul 10 17:17:20 2015 UTC,"I would say not many at all, if any. When it comes to web design, you want to be modern, you want to be up to date. Making a site straight out of PSD you lose so much SEO aspects...it's a huge no-no.  If you're using it for backgrounds, design wise...then no, it's still okay, but less images you use the better load times, etc. - plus in today's design languages, there's lots you can do without using images if need be."
Frontend,3coflr,hatestheinternet,2,Thu Jul 9 14:48:11 2015 UTC,"So if I see a job posting for an entry-level front end position that lists PSD processing as a needed skill, I should avoid that company?"
Frontend,3coflr,JaCeLo3,1 point,Thu Jul 9 17:11:30 2015 UTC,"Not necessarily. Maybe they just want you to know how, etc. - you'd never know until you interview and what not."
Frontend,3coflr,TreeScalper,1 point,Thu Jul 9 17:32:59 2015 UTC,Right on. Thanks!
Frontend,3coflr,JaCeLo3,-1,Thu Jul 9 18:08:26 2015 UTC,"but less images you use the better load times, etc. - plus in today's design languages, there's lots you can do without using images if need be.   How do you think designers make designs to begin with?  They make them in PSDs. Developers extract the assets that have to be images and do the rest in CSS.  The majority of designers do not know CSS/HTML well enough to really do anything and I doubt they will any time soon."
Frontend,3coflr,one800higgins,3,Thu Jul 9 17:57:22 2015 UTC,"You do your mock-ups in PSD sure...but it's not modern practice to take things out of Photoshop and make that your page. As a front-end designer, you NEED to know CSS/HTML VERY WELL because that's what a front-end web designers job is. Unless you're talking from a graphical designers standpoint, then yeah, coding knowledge will lack, but with a job title of a front-end designer, you better know CSS/HTML fairrrrllllyyyy well."
Frontend,3coflr,himynameisdave9,0,Thu Jul 9 19:34:32 2015 UTC,"I disagree with this completely. The best front end designers I know, don't know html or css at all, but they design really nice interfaces that work well. It's the job of the front end dev and UX guy to help guide the designer on what can and cannot be done and create a design that all parties satisfied with."
Frontend,3co91i,720kb,1 point,Thu Jul 9 13:18:06 2015 UTC,Any help really appreciated!
Frontend,3cnt4q,schrik,8,Thu Jul 9 10:13:06 2015 UTC,It's mostly THREE.js rendering in canvas.  http://threejs.org/
Frontend,3cnt4q,magenta_placenta,3,Thu Jul 9 10:32:38 2015 UTC,Typically they write the code which is then executed in the browser.
Frontend,3cnsji,schrik,1 point,Thu Jul 9 10:04:47 2015 UTC,"This is the approach I'm using at the moment as well, with a slightly different approach. data-modulename for the main element, and any children that are part of the module get data-modulename-element. You can kind of think about it as BEM for JS data-attributes (DME?). Its also a good way to ease into a web components mentality.  so <div data-search> and <input type=""text"" data-search-field> might be an example. Its been good to me, and leaves classes for styling only, and ids pretty much unused.  You can also use the module name to namespace any relevant data too, like <input data-search data-search-results=""10""> or what-have-you."
Frontend,3cnsji,Bummykins,1 point,Thu Jul 9 18:10:57 2015 UTC,"Nice, but does that not still require behaviour specific loops in your init code?"
Frontend,3cnsji,Bummykins,1 point,Sat Jul 11 12:10:49 2015 UTC,"Oh yes, i misunderstood that part. I often include auto-initing as part of the module (([data-modulename].forEach..etc), so it is taken care of automatically, but yes it must explicitly defined somewhere."
Frontend,3cnsji,eyalar,1 point,Sun Jul 12 01:29:22 2015 UTC,"What if a module loads a template which contains data-module bindings to additional modules? By the time the template loads, the initialisation code has already finished. In that case, each module which loads a template should manually re-run this code after the template is rendered."
Frontend,3cnsji,menno,1 point,Fri Jul 10 02:04:09 2015 UTC,In both situations you'll have to reinitialise bindings in new templates.
Frontend,3cnji4,wishiknewthat,3,Thu Jul 9 07:52:43 2015 UTC,"You can actually do that without using a VM too.  There are sysop tools out there that will let you configure the state you want your machine to be in, like Chef, Puppet, Ansible, … Sure, you can use those to set up a VM (and even build your production server stack with it), but they can also be used for your local environment. The learning curve of some of those tools is a bit steep, but it's well worth it imo.  For keeping your code in sync, use a version control system like git. Since git is a decentralized VCS, you don't even need a central server, you can basically sync over your local home network (yes, both ways).  Running a separate VM per project is just overkill. You're basically starting an operating system within an operating system. Docker could be an option, but you have to wonder whether you really need it.  We mainly use vagrant+vbox to build our production server stacks (and audit them). I do have one vagrant machine running a dev environment, but it does have its drawbacks (the default folder sharing is slow for example, NFS based folder sharing has a delay, …). The reason I'm running a dev env in a vagrant machine is because the application is built on a stack that MacOS X Yosemite no longer runs properly."
Frontend,3cnji4,masqita,2,Thu Jul 9 09:29:20 2015 UTC,"Thanks.  That's the problem I am having. I keep playing around with bash, etc. and my settings are all screwy. To reset and start again would be awesome."
Frontend,3cnji4,masqita,3,Thu Jul 9 09:56:45 2015 UTC,"If you need to support an outdated stack, go ahead and use vagrant.  I would urge you to automate your VM setup though. I personally prefer Chef over Puppet (emphasis on 'personally'), but if you need to quickly build a VM without knowing how those tools work, you can use https://puphpet.com to set you up a configuration (or at least part of it). The advantage is that if you ever have to rebuild your VM or want to try and migrate to another distro, you have basically everything ready (with minor adjustments) to get going. Vagrant supports both (see docs on their site).  Also use git for everything, including your vagrant setup and server setup automation (i.e. Vagrantfile etc). It allows you to experiment and revert to previous versions if needed."
Frontend,3cnji4,masqita,2,Thu Jul 9 10:17:19 2015 UTC,Thank you.   This is great. Definitely need to do some reading up about this.
Frontend,3cnji4,fjantomen,3,Thu Jul 9 10:38:22 2015 UTC,And behold what just popped up on the webdev subreddit: http://www.smashingmagazine.com/2015/07/09/development-to-deployment-workflow/
Frontend,3cnji4,RotationSurgeon,2,Thu Jul 9 10:45:03 2015 UTC,Lol. Lovely. Thanks.
Frontend,3cnji4,drunkenfaggot,2,Thu Jul 9 10:57:52 2015 UTC,"I think it's better to setup your projects in a way that they don't need a customised environment. Use standards, conventions and automation instead. In the long run it will save you from a lot of hassle and make collaboration much easier."
Frontend,3cl3rg,hackerpotato,3,Wed Jul 8 19:21:46 2015 UTC,How much lighter can it get?
Frontend,3cl3rg,boncros,1 point,Thu Jul 9 00:10:28 2015 UTC,Material design kinda sucks
Frontend,3cl3rg,anarchy8,2,Thu Jul 9 00:30:44 2015 UTC,"That's a nice opinion, man, however I think you'll find yours to be a minority opinion."
Frontend,3cl3rg,Probablynotclever,-2,Thu Jul 9 01:20:30 2015 UTC,Visually I think it's terrible. The ux is mostly good though
Frontend,3cl3rg,anarchy8,4,Thu Jul 9 01:38:56 2015 UTC,"If you put your art above the user's experience (ux), you're a bad designer."
Frontend,3cl3rg,CuntSmellersLLP,-1,Thu Jul 9 02:57:09 2015 UTC,"My art? No. They are turning design faux pas into ""best practices""."
Frontend,3cl3rg,anarchy8,1 point,Thu Jul 9 04:06:50 2015 UTC,Are they improving ux in the process?
Frontend,3cl3rg,CuntSmellersLLP,1 point,Thu Jul 9 04:24:45 2015 UTC,Are they? Have there been third-party UX studies on Material Design?
Frontend,3cl3rg,anarchy8,1 point,Thu Jul 9 04:40:28 2015 UTC,"You said ""visually I think it's terrible. The UX is mostly good though"".  I took this to mean that you consider it an improvement over the status quo of UX at the expense of your artistic taste, and that you don't consider such a trade-off to be an improvement.  if I misunderstood, I retract my statement."
Frontend,3cl3rg,CuntSmellersLLP,1 point,Thu Jul 9 04:52:28 2015 UTC,"Any major company seriously thinking about UX is good. There is a big difference between UI and UX. The user experience is mostly good; I think it tends to neglect the desktop side of things though.  I'm worried (and I already see it) that people are going to make websites with the same shadows, the same color schemes, the same paddings, etc. We need more design diversity, and I haven't seen a framework yet that solves that."
Frontend,3cl3rg,anarchy8,1 point,Thu Jul 9 05:13:02 2015 UTC,"Are you really worried about that? You know material design isn't the first framework/design principle, right? Creative developers aren't going to stop being creative because an idea doesn't adhere to these standards.    If anything, having another major framework aside from bootstrap will make design even more diverse because there are more options to choose from."
Frontend,3clcdj,gydesign,3,Wed Jul 8 20:20:34 2015 UTC,"Under ""background-image fallback for inline SVG""  https://css-tricks.com/a-complete-guide-to-svg-fallbacks/#fallback-inline-svg-bgimg"
Frontend,3clcdj,doiveo,1 point,Wed Jul 8 20:32:40 2015 UTC,Ah! So the SVG tag still exists in the dom but it just doesn't render on old browsers. Cool!
Frontend,3clcdj,emuslovetotalk,2,Thu Jul 9 13:45:45 2015 UTC,https://github.com/jonathantneal/svg4everybody
Frontend,3clrms,esr360,1 point,Wed Jul 8 22:09:47 2015 UTC,"Do you plan to add logic to the plugin to constrain the tooltips to staying inside the viewport?  Currently (at least in Chrome 43.0.2357.132, OS X), the Left and Right versions are especially bad about hiding out of view if the trigger is near an edge."
Frontend,3clrms,RotationSurgeon,1 point,Thu Jul 9 12:08:08 2015 UTC,"Yep I know exactly what you're referring to - there is currently nothing in place to prevent this. I haven't thought too much about it, if I could think of good/simple solution I would probably implement it.   I guess something like reverting to a top tooltip or something when this happens might be the best solution."
Frontend,3ciujp,umayr,12,Wed Jul 8 06:35:53 2015 UTC,"I never understood why every ""Get started with Sass"" guide insists to install Compass. It's just not needed at all."
Frontend,3ciujp,azsqueeze,2,Wed Jul 8 15:28:33 2015 UTC,"Compass is the SASS equivalent of jQuery, obvs."
Frontend,3ciujp,harborer,4,Wed Jul 8 16:07:30 2015 UTC,Ugh no. It's more like mootools.
Frontend,3ciujp,mtx,1 point,Wed Jul 8 16:11:42 2015 UTC,Yeah its not needed anymore now that we have autoprefixr and tasks runners.
Frontend,3ciujp,vrkr,6,Wed Jul 8 16:35:54 2015 UTC,Can anyone offer a coherent argument for Sass > Less? I much prefer LESS in practice
Frontend,3ciujp,roustem_,20,Wed Jul 8 12:31:15 2015 UTC,"I wrote the following for a blog post at my workplace:  We initially used Less because it complemented the rest of our stack, and could be implemented without any additional dependencies; it could be installed and compiled using NPM and grunt. I had used it when I first discovered CSS pre-processors, as at the time there was a JavaScript compiler that allowed me to try it out without much effort. It was pretty buggy, so I decided to take a look at Sass instead. Sass immediately felt more powerful, and I never looked back.  The way Less has added new features on top of plain CSS appears to be ill-thought-out. It has a habit of creating confusion with its syntax. For example, extends are written like so:  .a:extend(.b) {     // styles go here }   It's a strange usage of the colon, which in plain css is used to denote a pseudo state or element:  a:hover {} a:before {}   Sass extends are much more explicit:  .a {     @extend .b;     // styles go here }   Mixins are also confusing in Less, as they're defined and used with classes:  // definition .border-radius(@radius: 5px) {     -webkit-border-radius: @radius;     -moz-border-radius: @radius;     border-radius: @radius; }  // usage .a {     .border-radius(10px);     color: red; }   In Sass, it's much clearer:  // definition @mixin border-radius($radius) {     -webkit-border-radius: $radius;     -moz-border-radius: $radius;     -ms-border-radius: $radius;     border-radius: $radius; }  // usage .a {     @include border-radius(10px);     color: red; }   Scanning and reading through Sass files is much easier because its syntax is intuitive and explicit.  In Less, variables are denoted with @, whereas Sass uses $. $ isn't used anywhere else in plain CSS (except for the rarely-used [attribute$=value] selector), so it's safe to use in this new way. @, on the other hand, is used in plain CSS for directives like @import and @media. Sass uses @ to add its own directives, such as @extend and @mixin, which makes absolute sense.  Overall, Sass has a much clearer syntax that doesn't interfere with or redefine plain CSS, but it's not just the syntax that made us switch; Sass has a more intelligent way handling of lists, loops, and maps, and accepts string interpolation for both properties and values. This leads to more powerful but less verbose functions and mixins that are far easier to understand.  In the following example (adapted from this CodePen), we define two colour palettes. We then use a map function to return palette variations for use in our css. This keeps our project's colours nicely organised and readable:  // set variables $white: #fff; $black: #000;  $palettes: (     maroon: (         base: #8b2c41,          light: #d17f91,         dark: #41000e,         contrast: $white     ),     green: (         base: #488329,         light: #93c478,         dark: #073e10,         contrast: $black     ) );  // palette function @function palette($palette, $tone: 'base') {     @return map-get(map-get($palettes, $palette), $tone); }  // usage .palette-example-1 {     color: palette(maroon); }  .palette-example-2 {     color: palette(green, light);     background-color: palette(green, contrast); }  // output .palette-example-1 {     color: #8b2c41; }  .palette-example-2 {     color: #93c478;     background-color: #000; }   Snippets like this make the Sass community feel bigger and more forward-thinking than Less. Its features and syntax just make sense."
Frontend,3ciujp,haxonite,1 point,Wed Jul 8 12:57:56 2015 UTC,This is a fantastic response!
Frontend,3ciujp,roustem_,1 point,Wed Jul 8 22:08:55 2015 UTC,"It's really preference.  There's some syntax stuff, and each has their advantages and disadvantages.  The biggest advantage of SASS is that it's all pre-compiled on your machine, not on the clients.  I'm not terribly sure, but I think you can do the same with LESS.  The only thing I like about LESS over SASS is just how extending another class works in less.  Say you have a typical clearfix class.  You just add:  .my-class {   .clearfix   other-properties: 0; }   and voila, you have a clearfixed "".my-class"".  In SASS, you have two different options:  .my-class {   @extends clearfix; }   or   .my-class {   @include clearfix(); }   The first uses what's called a Placeholder.  Placeholders look like this: %clearfix { /* styles */ } and when compiled will just place ALL of the selectors that you extended into that space:  .clearfix, .my-class, .my-other-class, .another-class, .random-class, .a-class {   /* styles */ }   This can cause some problems on browsers like IE where there are some selector limits.  Not always the ideal solution.  Another option is to use the mixin, however the problem with mixins is that it duplicates the code across your codebase.  For example:  @mixin clearfix () {   &:after {     /* styles and whatnot */   } }  .my-class {   @include clearfix(); }  .my-other-class {   @include clearfix(); }   will make it so that it compiles down to:  .my-class:after {   /* styles and whatnot */ }  .my-other-class:after {   /* styles and whatnot */ }"
Frontend,3ciujp,cosmicsans,4,Wed Jul 8 12:57:41 2015 UTC,"The biggest advantage of SASS is that it's all pre-compiled on your machine, not on the clients. I'm not terribly sure, but I think you can do the same with LESS.   You should never, ever, ever, send pure LESS down the pipe and have the browser compile it with LESS.js at the end in production. Maybe for development - maybe. There's an entire tutorial on how to compile LESS on the site."
Frontend,3ciujp,email_with_gloves_on,1 point,Wed Jul 8 15:37:52 2015 UTC,Yeah I can't imagine a scenario where the compiling would happen client-side.
Frontend,3ciujp,roustem_,1 point,Wed Jul 8 22:10:21 2015 UTC,"I did it once. Before I discovered Grunt and task runners, I had a switch in my template that would link the LESS and less.js in my development environment and compiled CSS in testing & production. Except I had a typo in 'production' and so it was sending LESS and less.js to the client for a few days.  Oops."
Frontend,3ciujp,email_with_gloves_on,2,Wed Jul 8 22:29:55 2015 UTC,"Can I ask a potentially stupid question? I've wanted to use one of these CSS pre-compilers at my job, because they seem tremendously useful, but the team that I work on is pretty big. I can get everyone to switch, BUT I'm not sure how to make SASS ""work"" with source control; that is, how to make it so other team members can't just check out the post-compile CSS and edit it, but instead are forced to write/compile with SASS.  I can't be the first person to run into an issue like this. Does anyone know a smart approach? Am I even thinking about this correctly? (Having never used a CSS pre-compiler in an application of any real size, I could very easily be missing something incredibly obvious to anyone who has)  Also if someone knows a better subreddit to ask this in, let me know! Thanks."
Frontend,3ciujp,cheshirecatomsk,3,Wed Jul 8 13:31:49 2015 UTC,"We're able to use it in conjunction with Visual Studio and TFS.   How many people are actively working on the stylesheets? (and how many SHOULD be working on them? That's the issue in my office). You will have problems with people just grabbing the CSS and editing it. I start my scss files with a comment about not editing the css, and that gets compiled into the non-minified css file. It's mostly training and building habits.  Most people will jump right on board and have no problem. The others will learn the hard way, after someone else edits the scss, compiles, and overwrites their changes. We ignore changes to css, and only merge with scss. If they didn't follow the instructions, guess who just learned a valuable lesson?"
Frontend,3ciujp,CBNathanael,1 point,Wed Jul 8 13:39:54 2015 UTC,"Thanks, the idea of only merging the SASS is a good one. I suppose now that I've written out my issues, it's not really about getting SASS to work with the version control so much as getting my team members to work with SASS. Not that any of them would be unwilling, it's just a matter of getting everyone on the same page. Thanks for your advice!  Your comment on who ""should"" be editing the CSS (or SCSS) interests me, because we try to prevent code ""ownership"" by keeping all files open to everyone to edit. I suppose if we clearly defined who was a front-end dev and who was not, that might clear things up a bit, but we're still growing so right now everyone still has their hands in everything.  Thanks again for your input!"
Frontend,3ciujp,cheshirecatomsk,2,Wed Jul 8 14:05:16 2015 UTC,"You could also keep your compiled css out of git (using .gitignore), and use grunt or gulp to generate css before viewing the site in your browser"
Frontend,3ciujp,haxonite,5,Wed Jul 8 14:13:54 2015 UTC,"This is basically the answer.  The compiled version of the CSS should not be checked into version control.  You implement a build process (I like gulp, its pretty easy, but you can use grunt, make, etc) that developers run locally and that is also run before code is deployed (or at some point during the deployment process)"
Frontend,3ciujp,mwalters8,1 point,Wed Jul 8 14:33:46 2015 UTC,"We're using VS and TFS at work as well, and I had success with never checking the compiled main.css into source control. Instead, I added a build event to compile on build using gulp and it's been working well. The only hurdle is getting everyone's machine set up initially with Node/all the gulp/gulp-sass packages."
Frontend,3ciujp,enchantx,3,Sat Jul 11 16:15:49 2015 UTC,"Adding to what others have told you, here are a couple of other tips:  You can simply rename your .css files to .scss in your existing codebase, as the syntax will carry over, then you can gradually go through your code-base and switch to pure SCSS syntax, refactor to use Sass built-ins, mixins, etc.  You can use .gitignore to not commit any .css files to the codebase, and then you've got a couple of options:   Use a build system to watch/compile your .scss to .css, so you can test it on your local machine. Have a step in your deployment that compiles your .scss to .css. Use a tool such as Koala (cross-platform GUI watcher/compiler) to get everybody up to speed with compiling .css on their machines. Have a ""no CSS"" policy, and take ownership of ensuring that everybody is onboard with it."
Frontend,3ciujp,omgmog,-4,Wed Jul 8 18:24:08 2015 UTC,Why not Stylus?
Frontend,3ciujp,yeso126,5,Wed Jul 8 07:13:37 2015 UTC,"...because when your product is ""inspired by SASS"" it makes for a horrible argument against SASS."
Frontend,3ciujp,harborer,4,Wed Jul 8 08:46:34 2015 UTC,"lazy coders   Developers, not 'coders.' SASS and its ilk keep large CSS projects modular and manageable. Even if you don't use any of its functions, operators, variables, etc...you can write regular CSS and compile it through SASS. Even when using SASS's fun stuff, there is still the requisite perspicacious knowledge of the intricacies of CSS like it's cascading rules and specificity. So ""lazy"" is kind of a stupid label to apply to the developers who use it."
Frontend,3ciujp,harborer,4,Wed Jul 8 08:36:54 2015 UTC,"SASS   It's Sass not SASS. :D  Sorry, had to say that."
Frontend,3ciujp,dnhdr,2,Wed Jul 8 08:56:43 2015 UTC,Not sASS? XD
Frontend,3ciujp,harborer,2,Wed Jul 8 09:11:39 2015 UTC,"CSS4 will (finally) bring variables into the language, but then we will be looking at trade-offs on performance for processing a stylesheet on end-user device versus preprocessing so the browser can just start painting. Widespread support will also be a huge issue because variables will just not work and every attribute using them will just be skipped by the legacy browser and site will be DOA. We're already seeing that with calc()..."
Frontend,3ciujp,harborer,1 point,Wed Jul 8 09:31:12 2015 UTC,"However, with calc, you can at least set a fallback. If I know I'm going to be working with a particularly pesky fraction (1/3 for example) I will use:  .selector {   width: 33.3333%;   width: calc(100%/3); }   This means I get the precision of calc with a graceful fallback for older browsers where things might be off by a couple of pixels."
Frontend,3ciujp,Yurishimo,1 point,Wed Jul 8 09:52:02 2015 UTC,"I use Sass so that I can break up my styles.  I work at a university, and we typically make Drupal themes that get re-used by many sites.  For example, the College of Engineering will have a certain type of design, and many components will be re-used, but it will have small changes across the board.  By using Sass, I have been able to break components down into something more along the lines of modules, which allows me to easily re-use these styles across sites, rather than having one massive CSS sheet.  Also, nested selectors makes my life super easy.  I have a block called .contact-info, and all of my styles within the contact info block are baked right in, and don't leak into the rest of the website, but it makes it much more readable, because I'm not only in the _contact-info-block.scss file, but also in the .contact-info nest.  14 years huh?  So you're one of those developers who refuses to change because ""that's not how we did it back then.""  I made my first website 14 years ago too.  I was 9, so it wasn't a professional gig, but I hand coded every table into Notepad.exe.  Every <td valign=center align=middle>.    If you've been around long enough, you'll also remember the CSS revolution.  ""What do you mean I need to use CSS?  All of my styles are inline already.  Why learn this other crap just to do the same thing I do now.""  That's what you sound like."
Frontend,3ciujp,cosmicsans,4,Wed Jul 8 10:15:34 2015 UTC,"I know right? I mean what's with all these high level languages too?  Hell, assembly?   If you're not coding in 0s and 1s, you're shit."
Frontend,3ciujp,escapefromelba,2,Wed Jul 8 20:41:27 2015 UTC,"1s and 0s? Code in your head, man. Get on my level."
Frontend,3ciujp,toxicityj,2,Wed Jul 8 13:06:17 2015 UTC,Writing DRY code is lazy?  ...seriously?
Frontend,3ciujp,ClutchHunter,2,Wed Jul 8 11:34:09 2015 UTC,"Yes you do. That's just how CSS is.  Here's an example of a good use for Sass/other preprocessors (there are dozens more that make it worthwhile).  You have a common colour and/or background colour that you use throughout your website. You want to then change that colour. In regular CSS, you have to go through meticulously and change it all.  In Sass, you do the following:  $red: #ec1d26; $blue: blue; // this is an example, it'd be better than this haha  $primary-color: $red;  (then when doing your layout... ->)  .selector {     color: $primary-color; } .other-selector {     background-color: $primary-color; }   Now just change $primary-color and the theme of your entire website has changed in one go. Vanilla CSS simply cannot compete with this, nor can it compete with advanced mixins or other such enhancements.  Another of my favourites is being able to do the following:  @extend %clearfix;   To apply a clearfix to anything using the :after table method. Then, if that's ever updated or improved, I just change %clearfix and it's updated everywhere.  As someone who learned vanilla CSS and then started incorporating Sass late last year, please take my word and the word of everyone downvoting you that it's simply better."
Frontend,3ciujp,ClutchHunter,2,Wed Jul 8 13:53:21 2015 UTC,"ehrmegerd but grep and find + replace duuhhhhhh /s    But in all seriousness, you don't even have to change your css style or USE any of Sass's features in Sass.  You don't have to ""learn"" anything new.  All you have to do is just plop in an old stylesheet and BOOM, you're Sass'd."
Frontend,3ciujp,cosmicsans,1 point,Wed Jul 8 09:53:45 2015 UTC,Yep.  Probably worth clarifying for anyone new to Sass that we're talking with regards to the SCSS syntax.
Frontend,3ciujp,ClutchHunter,2,Wed Jul 8 09:55:29 2015 UTC,"Very good point.  I take that for granted sometimes.  SCSS is Sass with real programming conventions, none of that ruby crap laziness. ;)"
Frontend,3ciujp,cosmicsans,2,Wed Jul 8 11:01:58 2015 UTC,You're an idiot. :)
Frontend,3cj7xb,eyalar,0,Wed Jul 8 09:43:07 2015 UTC,"I am awfully surprised by some of the conclusions in your post.  For example: your conclusion about frameworks and the problems they cause is a bit unusual. As you wrote, ""large codebases and large teams need structure"". Can structure cause problems? Yes, of course. But I don't think that ""hiding the problems we're really trying to solve"" is a good ( or even rational ) example of a problem caused by structure. The structure and opinion imposed by a framework are excellent foils against our own desire to do what we want, and against the chaos that can arise when we don't know how to do something.    What would happen if I sent you a friend request on Facebook? How would you know it was from someone who saw your site rather than just someone who found you on Facebook or wherever?  I don't think it's bad to have a link to your FB profile, but it sure takes guts!"
Frontend,3cj7xb,biocomputation,1 point,Fri Jul 10 09:43:11 2015 UTC,"Can structure cause problems?    I never concluded that structure can cause problems. Only that externally imposed structure which does not fit your application can cause problems. I have actually claimed that structure is a good thing.   The structure and opinion imposed by a framework are excellent foils against our own desire...   I never claimed otherwise.   ... when we don't know how to do something   My point is that we should put more effort into learning how to do the things we want to do.   ...I don't think it's bad to have a link to your FB profile, but it sure takes guts!   What...?"
Frontend,3cem01,enociz,7,Tue Jul 7 08:45:42 2015 UTC,I personally don't think material design looks good on the web. It looks great on mobile but it doesn't feel right on the web.
Frontend,3cem01,10097338,5,Tue Jul 7 17:35:39 2015 UTC,"I think Google's implementation of Material on the web is well executed. Unfortunately, Material is a major undertaking, if you really read the docs. It's ""easy"" to mimic, but very difficult to duplicate if you aren't dedicated to following their instructions.  Personally, I take their principles, and just apply it to my own designs. A lot of the rhythms and patterns are (imo) ""perfect,"" and it's a great base to build off of."
Frontend,3cem01,CBNathanael,1 point,Tue Jul 7 21:49:31 2015 UTC,"While I don't necessarily agree with all of the design principles behind it, the frameworks that try to implement Material Design are pretty cool. The interactive elements such as sidebars, buttons, toolbars etc. are awesome, but a lot of the styles and guidelines are a bit plain and dull as you and the original comment said. So yeah it's definitely a better base to start from than something like Bootstrap in my opinion."
Frontend,3cem01,germainelol,2,Wed Jul 8 06:46:39 2015 UTC,I sort of agree in that I think it depends on the content. I feel using a single column for content makes Material feel too empty. It works way better with higher information density. I think Google made a mistake not making the playlist docked on the right side on wide screens in Google Music.
Frontend,3cemd2,axelut,2,Tue Jul 7 08:50:49 2015 UTC,This is really nice.  Thanks!
Frontend,3cemd2,macneib,1 point,Tue Jul 7 14:58:03 2015 UTC,Bitcoin can't come soon enough.  I bought a blender (don't laugh) online and paid with bitcoin using my phone.  All I had to do was point my phone at the screen and I was done.  Bam.  No typing whatsoever.
Frontend,3cemd2,way2know,-6,Tue Jul 7 14:52:43 2015 UTC,Retarded comment is retarded.
Frontend,3cemd2,siamthailand,1 point,Tue Jul 7 15:07:22 2015 UTC,Someday the pro-bitcoin people may understand they're actually the main problem with bitcoin...
Frontend,3cemd2,captain_obvious_here,3,Tue Jul 7 16:11:03 2015 UTC,Let me tell you how that's actually good for bitcoin.
Frontend,3cemd2,siamthailand,0,Tue Jul 7 16:14:55 2015 UTC,Exactly :)
Frontend,3cbz8n,moklick,1 point,Mon Jul 6 18:54:38 2015 UTC,"tried these today. buttons and tooltips are pretty cool, as well as toggles. tables are ok, not too much added value vs. standard tables. using their layouts is only useful if don't plan on modifying them.   it's really powerful in combination with the icon font, you can have perfect buttons in seconds. very pleasant. I use it all the time.  didn't use the other components yet."
Frontend,3cc04v,magenta_placenta,4,Mon Jul 6 19:00:50 2015 UTC,Google just released their own today http://www.getmdl.io/index.html
Frontend,3cc04v,MyronLatsBrah,1 point,Mon Jul 6 22:51:02 2015 UTC,that's a bit ironic
Frontend,3cc04v,fraincs,2,Tue Jul 7 12:08:32 2015 UTC,Link is broken
Frontend,3cc04v,Liorogamer,1 point,Mon Jul 6 21:22:20 2015 UTC,"It's a valid url (I was just there), though obviously having some dns issues now."
Frontend,3cc04v,pbst,1 point,Mon Jul 6 21:29:01 2015 UTC,CloudFlare was having DNS issues https://www.cloudflarestatus.com but the site is back up https://www.muicss.com
Frontend,3cada3,SheenaTheParasite,14,Mon Jul 6 10:20:42 2015 UTC,Start here: https://www.codeschool.com/courses/shaping-up-with-angular-js
Frontend,3cada3,jdjd1118,5,Mon Jul 6 10:27:09 2015 UTC,I used this course to jump into angular and can recommend it.
Frontend,3cada3,longfloppydisk,3,Mon Jul 6 13:56:38 2015 UTC,That intro music video as cute as fuck.
Frontend,3cada3,Lord_Fluffykins,3,Mon Jul 6 20:26:16 2015 UTC,"This has been recommended so much on this sub that I was actually planning on starting it today. After I watch some Netflix, but still.  ETA: I'm doing this because I did the Code Academy AngularJS tutorial, but afterwards when I was working on my own little project I really felt that didnt understand some key concepts. Now I've done the first lesson on CodeSchool (my gem store is set up if anyone wants to buy gems! :p ) and, for me, the descriptions/instructions were much clearer."
Frontend,3cada3,scarlet_pig,1 point,Mon Jul 6 19:34:55 2015 UTC,I had exactly the same experience as you. Codecademy just doesn't do as good of a job of explaining things as Code School.
Frontend,3cada3,TrackieDaks,3,Mon Jul 6 22:52:22 2015 UTC,I started with scotch.io https://scotch.io/tag/angular-js
Frontend,3cada3,Risse,2,Mon Jul 6 11:35:43 2015 UTC,ng-book is the best book I've read.
Frontend,3cada3,magenta_placenta,1 point,Mon Jul 6 13:59:34 2015 UTC,"I say just run through the first few examples on the angular homepage, then start building something interesting. Its good to have a book or video course to supplement (there are some really good PluralSight videos you can grind through in the free trial) but getting your hands dirty early will be best. Also, read John Papa's Angular styleguide."
Frontend,3cada3,foobar_dev,1 point,Mon Jul 6 15:08:01 2015 UTC,If you really want to understand Angular: http://teropa.info/build-your-own-angular/
Frontend,3cada3,emperor-jimmu,1 point,Mon Jul 6 18:33:22 2015 UTC,"http://teropa.info/build-your-own-angular/   What's that book like out of interest? Is it maintained to keep in line with the latest version of Angular too? It looks like an interesting book as I've never seen any books take the ""Build your own framework"" approach where you actually re-build Angular yourself but learn all the whys and hows."
Frontend,3cada3,germainelol,1 point,Tue Jul 7 07:57:27 2015 UTC,"Well, its about the 1.x versions of angular, so it's probably be 1.4 in the end. I went through a couple of chapters and its really in-depth, and you really learn a lot of things on Angular.js and library development in general. Recommended..."
Frontend,3cada3,emperor-jimmu,1 point,Fri Jul 10 17:50:05 2015 UTC,"Try Slack? There's a few decent Angular groups on there. If you you can't find your answers on stackoverflow, are you sure you're searching for the correct things? Angular seems to be pretty well covered on stackoverflow..."
Frontend,3cada3,germainelol,1 point,Mon Jul 6 20:19:33 2015 UTC,"I'm currently working through the ""Up and Running"" AngularJS tutorial series on lynda.com and have been enjoying it so far despite the fact that is relatively short compared to other tut series I have done on there."
Frontend,3cada3,Lord_Fluffykins,1 point,Tue Jul 7 07:58:46 2015 UTC,"I would say the best way is to learn by doing. I'd use something like http://www.angularjsbook.com/angular-basics/chapters/ to learn about the components in Angular and how they work together. After you've briefly read some theory, I'd go ahead and find a well documented tutorial or guide that goes through creating a basic Angular app. I personally started with https://leanpub.com/mean-machine, where the end result is an Angular app with a login system and CRM which is all built using the MEAN stack (Mongo, Express, Angular, Node). You could also try the Thinkster tutorials (https://thinkster.io/a-better-way-to-learn-angularjs/), where you also learn by doing and building apps from scratch.  Once you've learnt the theory, and gone through a tutorial where you build an app, I would then try to make your very own app from scratch. I would think of an API that could interest you, and go from there. Personally, I chose the OMDb API as I'm interested in TV and film, and wrote a basic app where I can add my favourite movies or TV shows to my a user account.  I think my answer, and the other answers, can apply to literally any framework or language though really. Learn some theory, follow some tutorials where you build an app, and then make your own app."
Frontend,3cada3,germainelol,1 point,Mon Jul 6 20:24:10 2015 UTC,"If you're looking for something a little more challenging, I like egghead.io, which has lots of awesome angular tutorials. Great videos and sample code from some of the best angular developers out there."
Frontend,3cbyt8,trojans10,21,Mon Jul 6 18:51:45 2015 UTC,"To reduce the number of things you're trying to learn simultaneously, I'd build your first site without a framework. That will also give you a feel for the kinds of problems frameworks are trying to solve."
Frontend,3cbyt8,ComputerSherpa,5,Mon Jul 6 18:56:37 2015 UTC,</thread>
Frontend,3cbyt8,DrummerHead,2,Mon Jul 6 20:55:25 2015 UTC,"I feel like I had a very backwards approach, and given the chance to do it again, I would do it this way.  My first real site was built on Bootstrap, and I didn't understand why I was doing anything, or why there was a clearfix class, or anything.  Once I built a site without the framework, I started to realize why certain things existed, what problems they were fixing, etc. and it all made sense."
Frontend,3cbyt8,Enderdan,3,Mon Jul 6 21:47:39 2015 UTC,"if you already know html and CSS it's incredibly easy  Just play around with them and see which one you like. foundation and bootstrap are very similar.  go to codepen it's free and requires no sign-up, click on options button in the CSS panel. click on the ""quick add:"" dropdown and add bootstrap   then go to the getbootstrap website and start copying some of the html and classes. you can piece together a page in a few minutes just by copying and pasting some basic stuff. it really is a huge time saver when it comes to media queries.  Check out the basic components like: container, container-fluid, row, col-xs-12, col-sm-6 ... and so on.  Those are great just for structure. They have a ton of components but some of them tend to look too bootstrappy.  But if you're just trying to put together a prototype real quick, those extra components are pretty great"
Frontend,3cbyt8,designerPaul,2,Mon Jul 6 20:57:47 2015 UTC,"Wow, thanks for the response! Appreciate it. Yes, I know HTML and CSS... little Javascript. But would soon like to dive into some java foundation. Question if you don't mind, since I am a bit confused.  When should you use a framework like bootstrap or foundation rather than starting from scratch? Also, when should you use a framework like angular for a project?  Thanks!"
Frontend,3cbyt8,designerPaul,2,Mon Jul 6 22:17:03 2015 UTC,I don't know anything about angular. Use bootstrap whenever you want though. Just link to their CSS file and start applying the class names to your html.  It's really just a great way to lay down a foundation with responsive containers very quickly.   I just used it to make a quick prototype of a micro-site for my employer. I had to show a working mock-up within two weeks on top of my normal work. If I had to work out the responsive grid and different media queries from scratch I wouldn't have gotten it done.
Frontend,3cbyt8,the_brizzler,1 point,Tue Jul 7 13:13:27 2015 UTC,I would do it by hand with just html and css to start if it is your first project and maybe throw in some javascript.  Pick a smaller project that you could finish in a weekend...otherwise you will get discouraged when it takes weeks/months to finish a project.
Frontend,3cbyt8,germainelol,1 point,Tue Jul 7 03:28:36 2015 UTC,"If you're already familiar with HTML/CSS and some jQuery I'd suggest your first responsive project is built by hand, even if it's not quite on point.  By debugging the plethora of issues that come with RWD you're far more likely to make an informed decision when it comes to picking your favorite libraries for any given task.  That said, for a simple blog/static site I would use Foundation 4/5 (custom built with just the grid) - no need for all the other stuff, it's just page weight and extra requests to the server."
Frontend,3cbyt8,Wyck,1 point,Tue Jul 7 16:07:02 2015 UTC,Foundation/bootstrap and Angular are two very different kinds of frameworks. Are you trying to learn how to make the front-end of the website? Or are you trying to learn how to create the actual functionality of the website?
Frontend,3cb5h8,thejarls,1 point,Mon Jul 6 15:15:22 2015 UTC,Are you me? I have the exact same constraints (US only) and my boss wants me to go to a conference or two.
Frontend,3cb5h8,droctagonapus,1 point,Mon Jul 6 17:54:53 2015 UTC,Google I/O... duh.
Frontend,3cb5h8,Wyck,1 point,Mon Jul 6 20:13:19 2015 UTC,"Have you attended before? If so, just curious what type of front-end work do you do? What did you like most about it?  While there are definitely some interesting workshops I'm seeing, this one would be a hard-sell for my boss as we don't work with many of the technologies they're focusing on here. A lot of our work is evergreen marketing, eCommerce and mobile websites."
Frontend,3cb5h8,mookman288,1 point,Mon Jul 6 20:29:11 2015 UTC,"I'm being sent to TXJS this year, I hope it'll be better than Roost last year."
Frontend,3cb5h8,RotationSurgeon,1 point,Mon Jul 6 21:14:21 2015 UTC,"There's an interesting one-day panel coming up in Atlanta regarding UI / UX :  http://webafternoon.com/ .  Nine speakers, ~ $100."
Frontend,3caouq,errevs,1 point,Mon Jul 6 12:45:23 2015 UTC,"Sounds like a force-directed graph layout in D3.js might help, or a layout from vis.js."
Frontend,3c6fv4,yeabra,9,Sun Jul 5 07:36:17 2015 UTC,"I don't think you'll find really any enterprise level applications that don't heavily modify their implementation of Bootstrap. By using the default styles for Bootstrap, you're completely ignoring any chance for unique brand recognition or differentiating yourself from a CSS style used by thousands. In short, using the default styles for Bootstrap is not a professional approach to web design."
Frontend,3c6fv4,SoundsPlausible,-2,Sun Jul 5 08:22:38 2015 UTC,But using their component markup is. Just add BEM classes and you are good to go.  There is rarely a point in re-inventing the wheel.
Frontend,3c6fv4,hellip,2,Sun Jul 5 16:58:13 2015 UTC,Probably one of the themes @ https://wrapbootstrap.com/
Frontend,3c88c9,tlodude,3,Sun Jul 5 20:40:35 2015 UTC,"Nice work! Although, I'd like to think that you would have made the website responsive whether people cared or not."
Frontend,3c88c9,MafiaMango,3,Sun Jul 5 21:20:15 2015 UTC,Good point. Though feedback from Reddit convinced me to prioritize it.
Frontend,3c88c9,BishopAndWarlord,2,Sun Jul 5 21:38:21 2015 UTC,The 1199px breakpoint is really weird. I'm on a 1920x1080 monitor and I usually keep browser windows around 800-1000px wide.  I actually spent a bit resizing the window and wondering why Happy Apps decided to go full-on hamburger menu for navigation before I finally went > 1200px.  Do you analytics show a substantial number of desktop users browsing with >= 1200px windows?
Frontend,3c400e,guankaishe,1 point,Sat Jul 4 15:37:37 2015 UTC,Sooo.. Browser sync?
Frontend,3c400e,ThisKillsTheCrabb,1 point,Sun Jul 5 07:17:39 2015 UTC,"Actually, it make a HTML projection, not only browser actions sync(it's only have browser scroll sync). The console sync and script inject function are enhanced features for helping mobile debugging. :)"
Frontend,3c400e,ThisKillsTheCrabb,1 point,Sun Jul 5 08:12:51 2015 UTC,Sounds pretty cool!
Frontend,3c24ls,brokentyro,6,Sat Jul 4 01:35:16 2015 UTC,"This is beyond awesome, I certainly learned a few profiling tactics and understood better a few others, such a good work by Paul,  and pretty 'cool' to see how things can derail so fast for so little."
Frontend,3c24ls,supaway,4,Sat Jul 4 02:03:34 2015 UTC,I never fully understood how you use these things. Is there some good article explaining this in-depth?
Frontend,3c24ls,justpurple_,2,Sat Jul 4 06:46:32 2015 UTC,Paul Irish did a free course on dev tools
Frontend,3c24ls,ElectricOrangeJuice,3,Sat Jul 4 16:33:05 2015 UTC,Can someone ELI5 the term 'lazy' in web talk? As in lazy links
Frontend,3c24ls,enesimo,5,Sat Jul 4 07:34:49 2015 UTC,"Lazy loading is delaying the download of an asset until after the rest of the page has finished downloading.  This is useful for non-essential content, or large images like that in slideshows."
Frontend,3c24ls,SquareWheel,2,Sat Jul 4 11:01:23 2015 UTC,"Not only that, lazy is deferring it's execution / evaluation until it's needed, it might never happen or it might when the user navigates a bit more"
Frontend,3c24ls,supaway,3,Sat Jul 4 15:56:55 2015 UTC,Paul is my hero.
Frontend,3c24ls,KnifeFed,2,Sat Jul 4 11:22:56 2015 UTC,"Sweet, very insightful"
Frontend,3c24ls,madou9,1 point,Sat Jul 4 05:21:52 2015 UTC,This is great. We need more examples like this. Let's just hope this doesn't spin off a thousand BS articles claiming React.js has poor performance now.
Frontend,3c0trv,BoraHorzaGobuchul,4,Fri Jul 3 18:58:49 2015 UTC,"Well presented. I don't like to judge, but the page ""A valid HTML document"" isn't valid."
Frontend,3c0trv,hpm6748,1 point,Fri Jul 3 19:18:06 2015 UTC,Any plans to add JavaScript to the mix?
Frontend,3c0nb5,ValarMorghulis6626,2,Fri Jul 3 18:09:04 2015 UTC,"I assume you are going to stick with using Bootstrap for styling. This is fine, but shouldn't be a stand-in for good composition. Here are a few quick fixes that would improve the user experience:   Add more padding in the header, below and above your logo/input fields for readability. The logo. That font is pretty not good. It also screams editorial/journalism rather than application. A quick look might suggest that ""WIW"" is short for ""Where in the World"" rather than ""Who is Where"". You might just spell out the name of your app. If you have nobody in your groups, then nothing appears on the sidebar after login. You should have some sort of message suggesting how users can add people. The navigation at the top after login has ""WhoIsWhere"" as the second link. I can't event guess where that would take me? Am I not already logged in? I now realize that I am already on the ""WhoIsWhere"" page. This should be made evident by use of ""active tabs"". ""Specify Dates?"" should not have a question mark, and should not prompt the appearance of an extra few input elements. This sudden appearance adjusts the entire page layout. Just include these date inputs as optional on the next line. Because this is an application, users will expect and should receive immediate feedback to user action. The navbar links should have hover and active styles, this is an easy fix that would improve the app drastically. Also the nav links shouldn't be gray. Not only are they hard to read, but they might indicate that the link has already been visited, in which case they haven't My profile's default picture is really stretched out and looks like it uses some pretty compressed JPG. Look into using SVG, as the images are lightweight and scalable. On the profile page - the background blue indicates that these items are removable as if they are some kind of alert. I think that is because they use Bootstrap's ""alert"". Search doesn't need a nav link if it's already included in the header On the search page, if you only have a simple search input field, center it and add some padding around the input and text. No reason to cram it in the top left corner. With an app like this, it's not always clear what I should search for. A good solution is to provide an example of what a user might search for, ""e.g. McCarter Theatre Meetups"" Clicking ""Who"" on the ""WhoIsWhere"" page looks like it's trying to load a different map that takes up a larger portion of the screen. But nothing ever loads. Again, selecting input fields should not alter the page layout.   Here are a few general guidelines.   Stick with only a few colors throughout. The purple is good and semi-consistent, but the ""My Profile"" page shouldn't introduce blue to the whole color scheme. Blue and purple are not part of any one, simple color scheme. Here is a great article about using colors and color theory. Keep in mind, for each page, one, primary user action. For example. If I click search, the search bar should be in the middle of the page and in focus. Apart from having bold/medium type on your page, consider using a dark gray color to style additional, optional inputs - like the ones on the search page.   I hope these suggestions help. Try practicing restraint in making fixes and view the page without editing it. Make a list of the things you think need to be changed or fixed. Look at the list and determine which items are actionable, then prioritize the list. If you are focusing on driving users to use the application, you might prioritize those items that serve to enhance the initial user experience rather than ""advanced"" features."
Frontend,3c0nb5,2basco,1 point,Fri Jul 3 19:13:40 2015 UTC,open source it.
Frontend,3bxnwk,SpeedracersOn,6,Fri Jul 3 00:27:21 2015 UTC,"A little part of me wants to believe that having someone solely focused on semantic markup, responsive development and accessibility is a necessity   Sounds like what I do - My position is UI developer. Mostly HTML/CSS/Sass with some jQuery here and there. TONS of accessibility. We support IE7 and have legal accessibility requirements (I work on Government projects). No vanilla JavaScript at all, which is great since I don't know any. I feel like I get paid way too much for what I do. Being a senior developer who doesn't know JavaScript or actual programming raises many eyebrows. But hey, I always wanted to be a designer anyway."
Frontend,3bxnwk,esr360,1 point,Fri Jul 3 13:07:22 2015 UTC,I feel like I get paid way too much for what I do   Are you accepting any remote positions? I wouldn't mind having a share of that payment :-)
Frontend,3bxnwk,inhalingsounds,1 point,Sat Jul 4 00:34:50 2015 UTC,"I am trying to teach myself front-end development, and semantic HTML and accessibility are incredibly important to me. I know some basics, and it pains me to see so many sites (recently developed) that are not at ALL accessible, so I realize there is definitely a chance for me to stand out when I eventually apply for jobs if I have accessibility experience on my side. As someone who deals with this as the pain part of their job, I was wondering if you would be so kind as to share some resources where I can learn as much as possible about it, and any general tips? I would greatly appreciate it."
Frontend,3bxnwk,thewindupowl,2,Sun Jul 5 01:37:32 2015 UTC,"Hey - I would read about everything that is done on Gov UK projects for accessibility. We have tons of resources online about what we do and how we do it, and it's all really great stuff:  https://www.gov.uk/help/accessibility https://gds.blog.gov.uk/2012/01/20/user-testing-accessibility/ https://www.gov.uk/service-manual/user-centred-design/accessibility https://gdstechnology.blog.gov.uk/2014/08/14/improving-accessibility-on-gov-uk-search/ https://gds.blog.gov.uk/2014/01/09/what-are-we-doing-about-accessibility/  Checkout the frontend toolkit we use aswell:  https://github.com/alphagov/govuk_frontend_toolkit"
Frontend,3bxnwk,esr360,1 point,Sun Jul 5 13:26:26 2015 UTC,Thank you! That's great.
Frontend,3bxnwk,thewindupowl,16,Sun Jul 5 23:56:56 2015 UTC,"Its a confusing world out there, but formal education is not what makes it confusing. It is just progress is moving at a rapid rate and you need to be continously learning to keep up.    At best you sound like a web designer who can implement html/css, a little bit of Javascript and understand accessibility requirements. Believe me you can still carve out a decent living with this skill-set including in the Wordpress space - dont be afraid of tools you think are beneath you especially when they power 50% plus of the marketplace.    Having said that, you are not too far from becoming a developer. Get on a few tutorial sites during your weekends and learn Angular. You dont need to be an Angular genius for most jobs - you just need to know how the pieces work together and be able to use it in a team. Most companies ave plenty of existing code you can look at to see their style (and figure out how they use Angular) and also provide training and a mentor to help you if you get stuck. So make a big effort to learn Angular over the weekend, knock out a couple of very simple Angular web apps and then apply for some of those jobs.    On a related  note, I think Angular is on the back-end of its popularity curve, so in another 12 months there will be a new darling framework. Dont panic if you miss the whole fad (this happened to me with Ruby on Rails) - it will pass and all will be good again."
Frontend,3bxnwk,technical_guy,11,Fri Jul 3 00:40:29 2015 UTC,"So make a big effort to learn Angular over the weekend, knock out a couple of very simple Angular web apps and then apply for some of those jobs.   Dude, if you're telling someone to do a couple of projects and then apply for a job that requires Angular, they better be amazingly good at Javascript already.  You're better off spending that time actually learning Javascript. A weekend long project will not teach you enough to confidently talk Angular."
Frontend,3bxnwk,hatestheinternet,7,Fri Jul 3 01:04:20 2015 UTC,"he work I do can be summed up as ""rapid UI prototyping using HTML5, CSS3, LESS, JavaScript, and jQuery, all while ensuring ADA/WCAG 2.0 compliance.""   From OPs original post - he knows Javascript and jQuery. So should be able to pick up basics of Angular in a few weekends/evenings or sooner."
Frontend,3bxnwk,technical_guy,1 point,Fri Jul 3 01:16:59 2015 UTC,"From OPs original post - he knows Javascript and jQuery. So should be able to pick up basics of Angular in a few weekends/evenings or sooner.   From OP's original post, they can use some javascript and jQuery to do RP tasks.  Being able to do some RP work using javascript and jQuery is not indicative of being able to develop applications using a framework.  It doesn't even go so far as to say ""I know that javascript is prototypal, and I know what that means."""
Frontend,3bxnwk,RotationSurgeon,2,Sun Jul 5 02:00:23 2015 UTC,"I agree completely. Angular requires a pretty thorough understanding of development practices; a level that typically exceeds that of a html + css + jquery ""web developer.""  The term ""Frontend Developer"" is, in my opinion, finally getting to where it should have always been. A frontend dev is someone who should be capable of developing a mid-tier app but is, instead, working on client-side code.  A web designer is what more aptly describes OP."
Frontend,3bxnwk,chance--,1 point,Fri Jul 3 17:30:23 2015 UTC,A web designer is what more aptly describes OP.   Or possibly UI / UX developer
Frontend,3bxnwk,RotationSurgeon,5,Sun Jul 5 02:01:23 2015 UTC,"Don't learn the framework just to get a job, it may or may not become obsolete in a year or two. Learn JS as an object oriented language and get your fundamentals down. Then you can pick up any frameworks which come out in the future."
Frontend,3bxnwk,lcjy,1 point,Fri Jul 3 15:59:51 2015 UTC,"Don't learn the framework just to get a job, it may or may not become obsolete in a year or two.    Considering that Angular 2.0 will have zero compatibility with Angular 1.x, and might see a release next year, if not the year after, this is a very accurate statement."
Frontend,3bxnwk,RotationSurgeon,3,Sun Jul 5 02:11:07 2015 UTC,"Don't worry there are many of us like you .. I studied graphic design and moved onto front end development. I'm learning JS and Angular and really it's not as hard as it sounds .. My advice is to not rush it, otherwise you'll get frustrated. Just dedicate part of your work day to learning or find a way to use JS wherever possible."
Frontend,3bxnwk,driftdeep,13,Fri Jul 3 13:31:31 2015 UTC,Angular doesn't take 4 years to learn. More like 4 weeks. Stop underestimating yourself and just learn it.
Frontend,3bxnwk,Viklove,5,Fri Jul 3 00:54:44 2015 UTC,"Angular 1.0 wasn't even out 4 years ago. It came out in 2012. Most people weren't really paying attention to it until 2013, and it's only gotten hugely popular in the last year or so.   https://www.google.com/trends/explore#q=Angularjs  But I guess all these people weren't talking about it because they were spending the last 4 years learning it. /s"
Frontend,3bxnwk,one800higgins,3,Fri Jul 3 14:21:28 2015 UTC,How many hours a day?
Frontend,3bxnwk,nemo3141,4,Fri Jul 3 02:56:01 2015 UTC,"No more than 6, 5 days a week."
Frontend,3bxnwk,Viklove,1 point,Fri Jul 3 03:52:35 2015 UTC,And this heavily depends on how efficient you are at learning.
Frontend,3bxnwk,emaale,7,Fri Jul 3 18:59:37 2015 UTC,"Take the time to learn Angular. I'm going to. I'm also going to learn React.js  I do know how you feel, as I wonder how many companies asking for Angular experience really need it...or if it's just some clueless HR flunky coping the list of skills off another poorly-written job ad. Regardless, they're asking for Angular, so better to learn it so they call you for interviews.  This industry is a massive confusion when you think of job titles. So many blurred lines and loads of gray area. I see our line of work tossed into Web Designer, Web Developer, Front-End Developer, UI/UX Person, etc. The reality is companies want to find one person who can fill many seats hopefully at the price of a junior-level worker. It's sad  In any case, JavaScript front end development isn't going away, so we both have to pick it up."
Frontend,3bxnwk,InternetArtisan,9,Fri Jul 3 03:21:35 2015 UTC,"Front end developer = background in software development, specialization in HTML5/CSS3/JavaScript. I'm affraid it was always expected that the distincition between developer and designer is the knowledge of proper programming.   Yes, Angular, React, Ember and Backbone are all expected nowadays, Angular mostly. Do note that a lot of HR people in these companies are not engineers, so they don't understand how silly it is to look for a specific technology specialists.  http://www.jasonbock.net/jb/News/Item/7c334037d1a9437d9fa6506e2f35eaac"
Frontend,3bxnwk,bmarkovic,4,Fri Jul 3 06:41:42 2015 UTC,"it feels so wrong to call myself a designer when I have skills and interests similar to OP though.  I've come to terms with not calling myself a FED due to my lack of JS knowledge, but a designer?!  Functional designer is a term that I came up with (useless if nobody else uses it or understands it though) as a label I might like, but I've never been the person to come up with initial visual designs and don't really want to be that person either.  I can fix crappy HTML & refactor CSS code all day, make sure stuff is valid, accessible, cross-browser friendly, and can write most of it without having to google very much except for edge case issues that often come up with more complicated things.      I know my way around Photoshop like the back of my hand but I don't use it as a graphic designer... I enjoy retouching and restoring images and have done that for years, quite different than creating visual designs.  I can use PS to squeeze all the quality possible out of the files while making them smaller, but honestly the people who are more programming oriented have their command line utilities that possibly do just as well at this and can do it faster.     Just because I can recognize poor designs (10 different styles of buttons, too many font faces, visual inconsistencies across a site in general) doesn't make me a designer IMO.  I wouldn't even want to consider being responsible for anything more design related without good or strong art direction from an actual designer."
Frontend,3bxnwk,VSXD,6,Fri Jul 3 09:13:06 2015 UTC,"It feels to me like the issue stems from people thinking CSS and HTML are easy or treat it like an afterthought, and I think a huge part of this is when designers/back end devs write some HTML and CSS to get an output and it works but is not reusable or maintainable and they think it's fine and only took 5 minutes therefore they don't need a person dedicated to it, but a year later you know they will be complaining about how hard it is to change anything..."
Frontend,3bxnwk,pelks_ikslop,2,Fri Jul 3 12:35:57 2015 UTC,"How about ""UI guy""?"
Frontend,3bxnwk,driftdeep,1 point,Fri Jul 3 13:34:19 2015 UTC,"I beleive the industry has settled at UI designer or, if your skills improve usability (and often, that is expected), UX designer or UI/UX specialist.  Also, why do people equate design with graphics. When I model data for a relational database, I'm a database designer. Engineering solutions in automation is often labeled systems designer work etc."
Frontend,3bxnwk,bmarkovic,1 point,Fri Jul 3 20:04:57 2015 UTC,never seen someone call themselves a database designer.  I think the design label is changing away from just graphics but amongst the people I work for and have interviewed with that doesn't seem to be the case.  IMO a web designer SHOULD have very good knowledge of HTML and CSS but consider JS literacy a bonus for a designer... the designers I've had the pleasure of working with could barely manage HTML unfortunately.
Frontend,3bxnwk,VSXD,1 point,Fri Jul 3 21:00:15 2015 UTC,"never seen someone call themselves a database designer   It's a pretty common label.  Up there with ""solutions designer,"" or ""information architect.""  Perhaps its a regional / generational thing?"
Frontend,3bxnwk,RotationSurgeon,3,Sun Jul 5 02:07:24 2015 UTC,"I think you know the answer already.  If you are passionate about the more logic driven side of design, you would have started learning React.js by now (knowing the Angular is struggling lately).  On top of your solid current skills, there is a ton of potential in learning CSS animations, SVG, Webfont/icon, Canvas, Webm and other design centric technologies.  All of them will drive you deeper into technical fields but they will keep you away from the business logic where the CS degrees make the biggest impact.  That said, being able to modify an Angular project to implement web/art design stuff while reducing the full stackers' todo lists would win you much respect."
Frontend,3bxnwk,doiveo,3,Fri Jul 3 06:24:05 2015 UTC,"There was definitely a time where you could get by with mostly HTML, CSS, and a jQuery cheatsheet. You probably could still position yourself for a number of years as a UI/UX guy with basic dev skills. But if you're playing for the long game, I'd think you'd want to skill-up your programming abilities and learn some client-side MV* frameworks.   'Responsive' was the must have feature for a few years. Now it  feels like SPA is becoming the next big thing with clients and they want angular or react, even when it may not suit their needs."
Frontend,3bxnwk,daylightsavings,2,Fri Jul 3 10:52:03 2015 UTC,SPA?
Frontend,3bxnwk,boncros,5,Fri Jul 3 12:08:15 2015 UTC,Single Page App. This is a web site that doesn't need page reloads and uses AJAX and DOM manipulation for routing basically.
Frontend,3bxnwk,daylightsavings,3,Fri Jul 3 12:29:57 2015 UTC,Single page application... I think
Frontend,3bxnwk,wiggleslash,2,Fri Jul 3 12:17:22 2015 UTC,"MV* and SPA absolutely require a strong HTML and CSS base - the ""V"" is naked and plain without a design layer (CSS|Canvas|SVG).  More so as the context is fluid so inheritance and specificity can get ugly, fast.  CSS engineers are worth every penny for their command of those.  Frameworks like Bootstrap obfuscate just how complex it is to master CSS and brand-wide design.  I feel this why many back-enders think inline is the future and global styles are dead.  All that does is transfer the same design skills and understanding to the application layer.  Once there, logic has stranglehold and organic flexibility is limited.  If you have to fully recompile your site to get the new article headers to be a pixel smaller, you have too much complexity.  May as well distribute DLLs."
Frontend,3bxnwk,doiveo,1 point,Fri Jul 3 17:56:39 2015 UTC,"Good thoughts all around. I don't like or advocate bootstrap and usually just prefer a light-weight grid though I've built from scratch plenty of times and like a BEM with sass approach.   In any case I by no means meant to insinuate that solid html, css, and design skills are not needed to be a front-end dev. But I think most people can see that strong JS skills and good working knowledge of a mvc framework like angular, ember, react, backbone, etc are becoming prerequisite to being a front-ender.   I'm a bit bewildered by your last statement about recompiling your site meaning you've got too much complexity. I could be misunderstanding so clarify if you feel I'm off base here. But yeah, all of my sites get compiled at every change I make.   Using sass, less, es6, coffeescript, slim, jade, haml, etc with a preprocessor like grunt, gulp, or broccoli is pretty much becoming the de facto workflow for most people in front-end. My code gets recompiled every time I hit cmd-s.   If that feels like it's adding too much complexity then you're probably not working on a big enough project or not working with a team. Because these things are meant to help add organisation, not over complicate it."
Frontend,3bxnwk,daylightsavings,1 point,Sat Jul 4 06:45:22 2015 UTC,"Some clarity, I was referencing this article: https://medium.com/seek-ui-engineering/the-end-of-global-css-90d2a4a06284 and talks of the same nature.   I do use and enjoy pre-processors on a large site with a family of other sites that need the same look and feel. It's not a homogeneous application as different servers run different business functions. JS and CSS have to remain as augmentations of the content. This limits the build concept."
Frontend,3bxnwk,doiveo,2,Sat Jul 4 14:29:33 2015 UTC,"At my workplace, we had front-end engineers responsible for the JavaScript, and designer-developers who owned the design and markup/CSS.  In other places, the developers might be responsible for the markup and CSS as well.   Anyways, it would serve your career well to keep learning new things."
Frontend,3bxnwk,xBrodysseus,2,Fri Jul 3 17:16:13 2015 UTC,"The front end has radically changed in the past 3 years. It hasn't been hijacked, it's evolved into a real discipline. Computer Science is moving from the back end to the front end."
Frontend,3bxnwk,magenta_placenta,1 point,Mon Jul 6 14:03:30 2015 UTC,"I am a frontend dev on paper, and I get where your frustration comes from. We have multiple projects that are using angularjs which is crafted by another guy who's role I consider a frontend engineer. During half a year I find myself somewhat familiar with angular. I can tap into things, trace where they come from, and more or less understand how they work. BUT.. My main job is to write css/html, and only some basic javascript. I consider that both a good and bad thing. Good, because this way javascript becomes my last resort, after I tried all the options with CSS (think dropdowns, toggle buttons, etc), and that adds to site's/app's performance in the end. Bad, because whenever I spend a lot of time writing CSS, I can feel another guy steping miles in front with his angular/js skills. And catching up any time soon seems like an impossible task.   Not that I hate writing CSS, on the contrary, I enjoy it alot. But I'm just starting to get scared that CSS will be another HTML in a couple of years, where in order to stand out you'll have to be good in other skills as well.    Overall, wouldn't you agree that web projects slowly become 'software', just on another platform? And that's why I'd recommend Software Dev or CS for newcomers, instead of something like Multimedia Design. In addition, I think all of the more experienced devs realize, that technologies change but core principle is still 0 / 1. And if you can learn the basics (and I mean learn them very well), then you'll be able to jump to new technologies much faster. There are many ways to write javascript, but in the end it's still javascript.   Time for some personal projects I guess."
Frontend,3bxnwk,dutis,1 point,Fri Jul 3 18:06:48 2015 UTC,"the change you're talking about is that a few years ago, all of the ""app"" was server-side, and the front end just consisted of styled markup with a little behavior.  now more of the app is moving to the client, which means the ""front end"" now also comprises application code (ie entails software development)."
Frontend,3bvhpi,magenta_placenta,2,Thu Jul 2 14:14:07 2015 UTC,"I like the minimalism, but I can't enjoy the classes that state a style as a class name. Classes for green text and borders add an element of style to the structure and break the separation of concerns. To a certain extent all responsive frameworks break this rule, but I'm more comfortable minimizing it to grid and layout classes rather than element style.  Just my two cents. Comes down to developer preference at the end of the day."
Frontend,3bvhpi,noonesboy,1 point,Fri Jul 3 01:19:27 2015 UTC,"I have the same opinion as you and I think you'd love inuit.css. https://github.com/inuitcss/getting-started  Also, it's completely design-less. Just layout. No borders, no colors, no backgrounds and it's easily extendable and you can disable or enable every module as you need to.   Check it out. The guy who wrote it (Harry Roberts) is, IMO, a CSS god regarding modularity, scalability and performance. This is his attempt at a framework (actually, it's the second iteration of his inuit framework). If you don't know him I'd also recommend to check out his blog, csswizardry.com"
Frontend,3bvhpi,justpurple_,1 point,Mon Jul 6 19:12:30 2015 UTC,I am really liking this. I've adopted Foundation as my primary framework and I use Sass to adjust the amount of components down. I'm thinking I'll definitely take this for a spin on a smaller project. Nice find.
Frontend,3bvhpi,noonesboy,1 point,Tue Jul 7 02:45:58 2015 UTC,"This looks great. Thanks for sharing.  I used skeleton in a project recently as I didn't see the need for bootstrap or other large framework. This is exactly what I was looking when I searching for light weight CSS frameworks at the time.  Also, flex-box is the shit. Been using it with angular material and loving it."
Frontend,3bvhpi,PostHumanJesus,1 point,Fri Jul 3 00:50:20 2015 UTC,"Alas, Android 2.x still doesn't support flex box, so you're out of luck and need some fallback. Our current approach is to detect it and use a small script to tweak the meta-viewport setting into putting the nearest breakpoint to 100% and use a basic fixed layout instead. This way, we support older Android browsers with minimal changes."
Frontend,3budbe,logeshpaul,1 point,Thu Jul 2 05:50:28 2015 UTC,jQuery instead of JavaScript?
Frontend,3budbe,shhalahr,3,Thu Jul 2 12:48:25 2015 UTC,Created a pull request for that
Frontend,3budbe,a_raid_in_the_wind,1 point,Thu Jul 2 14:01:55 2015 UTC,"Thanks for correcting me, Merged the pull request"
Frontend,3busw6,RazvanDH,1 point,Thu Jul 2 09:25:52 2015 UTC,Look really nice
Frontend,3buu46,DOG-ZILLA,2,Thu Jul 2 09:43:17 2015 UTC,https://www.mapbox.com/
Frontend,3buu46,ElectricOrangeJuice,3,Thu Jul 2 10:38:32 2015 UTC,Google maps let's you use custom maps add well.
Frontend,3buu46,fraincs,2,Thu Jul 2 10:34:43 2015 UTC,Definitely mapbox and tilemill. You can import data from usgs or other sources and use their cartocss to style everything. Used them on a project recently and was impressed with what the mapbox team has put together.
Frontend,3br53b,magenta_placenta,3,Wed Jul 1 14:03:52 2015 UTC,Performant yes... but I'm still questioning their UX decisions to make their animations so dreadfully slow. Clicking the intended target can be an annoyance when it takes something like half a second for them to finish animating a tile on hover.
Frontend,3br53b,Syndrone,1 point,Wed Jul 1 16:20:20 2015 UTC,"I read in Wired that at any given point there's roughly one thousand different variations of their UI being served to users. They rely heavily on A/B testing and I would assume animation speed is being tested on as well.  It does feel slow to me too, but I think ""In my opinion"" can be dangerous when you're a professional web developer."
Frontend,3br53b,ElectricOrangeJuice,1 point,Wed Jul 1 17:39:24 2015 UTC,"Is it me, or is that font just slightly too small?"
Frontend,3btrem,codyogden,1 point,Thu Jul 2 02:08:30 2015 UTC,Very cool. I've hunted it: http://pintsize.io/?ref=producthunt
Frontend,3bmqk1,styxynx,4,Tue Jun 30 13:51:20 2015 UTC,Soldiers without an enemy? Surely these are just men in fancy dress! (Animated men in fancy dress!)
Frontend,3bmqk1,AllanOcelot,2,Tue Jun 30 16:26:05 2015 UTC,Subreddit about this game its development: /r/feudalwars
Frontend,3bmqk1,lymi,1 point,Tue Jun 30 23:57:17 2015 UTC,would something like this explode in svg?
Frontend,3bmqk1,get2workUslacker,8,Tue Jun 30 16:35:46 2015 UTC,"Probably, depending on how complex the svg is.   Those are sprites, so it's just pixel movement which the gpu can handle extremely well. SVG animation requires more processor intensive calculations, however if you were smart about it, you might be able to optimize it to calculate once and apply it to all the soldiers? You might be able to make it work. Experiment time!  You could always try it and see h"
Frontend,3bmqk1,terrorTrain,9,Tue Jun 30 16:44:17 2015 UTC,He tried it... And died apparently. A true hero.
Frontend,3bmqk1,SoundsPlausible,1 point,Tue Jun 30 17:12:41 2015 UTC,"With my dying breath, i curse zoidberg..."
Frontend,3bmqk1,get2workUslacker,1 point,Tue Jun 30 18:34:38 2015 UTC,Never forget.
Frontend,3bmqk1,ClikeX,1 point,Fri Jul 3 14:12:44 2015 UTC,I guess creating sprite sheets of SVGs dynamically at runtime would be the smart way to go about it.
Frontend,3bp3rz,wisesascha,3,Wed Jul 1 00:22:13 2015 UTC,Looks useful. I highly recommend this Chrome extension: https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en
Frontend,3bp3rz,taosd,1 point,Wed Jul 1 02:52:15 2015 UTC,Would be good except you have to sign in to Chrome to use the good stuff.  Retarded as fuck.
Frontend,3bp3rz,scootstah,1 point,Wed Jul 1 14:38:29 2015 UTC,Yeah - that's a non-starter these days.
Frontend,3bp3rz,HollandJim,1 point,Tue Jul 7 14:03:12 2015 UTC,"Hmm, why is the trial version download 111 MB? This may be an unfair comparison but to give some perspective, curl is ~164 KB."
Frontend,3bl0eu,coffee-makes-me-poop,3,Tue Jun 30 02:08:12 2015 UTC,"Depends if jquery is already available. If it's not, and I have a small use case, I'll just use native stuff."
Frontend,3bl0eu,scootstah,7,Tue Jun 30 03:48:08 2015 UTC,"This is like asking carpenters how often they use a claw hammer vs pry bar when remodeling a house. The answer is: it depends on what I'm doing. I'll stay vanilla JavaScript as long as it's easy coding as there's no reason to add weight to a page if I don't need to. I prefer to stay vanilla when selecting an object by name or ID because it's faster than $('#id') but, even then it depends what I'm going to do with it. Do I only want the raw Dom object or do I need the jquery wrapper so I can run css() or something similar on it?  Stay fast, stay light, and don't use it unless you NEED it."
Frontend,3bl0eu,Zazenp,1 point,Tue Jun 30 03:03:44 2015 UTC,You don't need jquery.
Frontend,3bl0eu,Wyck,1 point,Wed Jul 1 15:22:21 2015 UTC,For me the biggest benefit continuing to use jQuery is the support for cross + legacy browsers. I'm still writing for legacy IE (7/8)...
Frontend,3bl0eu,jesconstantine,-1,Tue Jun 30 12:00:50 2015 UTC,"These days, browsers are similar enought to skip the use of jQuery. I'm not using it anymore at all. The only time I use it, is when I need ""jquery plugins"" which do some awesome job to enable certain features. It's a shame that so many awesome plugins are written in a way so that they do not work without jQuery.  If you do not plan to use any ""jquery plugins"" i would recommend to not use jquery."
Frontend,3bl0eu,serapath,-4,Tue Jun 30 12:59:28 2015 UTC,"I'm mostly using Angular now, so jQuery is avoided at all costs."
Frontend,3bl0eu,Viklove,1 point,Tue Jun 30 06:46:20 2015 UTC,Alright... guess /r/frontend doesn't like Angular?
Frontend,3bl0eu,Viklove,2,Wed Jul 1 01:52:33 2015 UTC,"Considering Angular comes bundled with a jquery light version, his comment doesn't really make sense at all.  Probably why it's downvoted."
Frontend,3bk1h1,mackattack_,5,Mon Jun 29 21:20:53 2015 UTC,"We use Parsley, couldn't recommend it more: http://parsleyjs.org  Most of the checks you make can be made with data-attributes instead of writing additional JS (although you still can if you have to). Just really easy to set-up, use and customize."
Frontend,3bk1h1,bkrall4,2,Tue Jun 30 04:57:58 2015 UTC,"Parsley is great, but it is, however, a bit of a pain to get working with ReCAPTCHA, in my experience."
Frontend,3bk1h1,RotationSurgeon,1 point,Tue Jun 30 11:44:23 2015 UTC,Can it handle credit card validation?
Frontend,3bk1h1,RotationSurgeon,1 point,Tue Jun 30 06:17:55 2015 UTC,"Yes.  Parsley lets you create custom validators, which can handle whatever you want.  It turns out there's a fairly straightforward validation schema for credit cards (StackOverflow answer) as well."
Frontend,3bk1h1,serapath,3,Tue Jun 30 11:43:11 2015 UTC,"It's a bit sad, that all this seems to depend on jQuery. Why would you need jQuery for form validation? I imagine you would use it for selection, but for this purpose:  document.querySelectorAll('form');   ...and the like, works just fine. So if someone builds a simple website where forms are the only important thing, why should they be forced to include jQuery if all they wanna do is form validation?"
Frontend,3bk1h1,PhaZePhyR,2,Tue Jun 30 12:25:16 2015 UTC,"If you're using jQuery, there's a nice, aptly named plugin jquery-validation (github here).   Its pretty easy to configure, and is pretty flexible. It has its limitations (as most plugins do), but as long as you're not doing anything too crazy, it should be fine!"
Frontend,3bk1h1,yellowllama,1 point,Tue Jun 30 00:34:31 2015 UTC,Can't believe I missed this. This is awesome. Thanks a lot!
Frontend,3bk1h1,yellowllama,2,Tue Jun 30 00:55:29 2015 UTC,"HTML5 validation is becoming better and better these days, but if you still want to go with jQuery validation, there's no better plugin IMO, than http://jqueryvalidation.org/"
Frontend,3bk1h1,mach5ive,1 point,Tue Jun 30 05:25:37 2015 UTC,This is most definitely what I'm leaning towards. It's kind of a larger scale project so I can't fuck this up.
Frontend,3bk1h1,ajguk,1 point,Tue Jun 30 06:19:09 2015 UTC,then definitely go with this. heaps of controls for any file type. about as full-featured as you can get
Frontend,3bii0i,magenta_placenta,2,Mon Jun 29 14:33:19 2015 UTC,"This is, like the author says, totally useless and really neat."
Frontend,3bifdh,Drethis,3,Mon Jun 29 14:10:53 2015 UTC,"I'm wondering if it would be better to simply call these plugins/modules based on specific pages that have a need for them   In a word, yes."
Frontend,3bifdh,Spoonzie,2,Mon Jun 29 14:14:27 2015 UTC,Yes load based on elements. I use basket.js in a site which is essentially html with the exception of the odd interactive component splashed throughout. Basket caches too. Works well despite beta status especially if you're not already in a node environment
Frontend,3bifdh,i_am_unco,1 point,Mon Jun 29 18:29:08 2015 UTC,"I'm not sure if I entirely understand. So should I create page modules that are called on their individual pages, and then initialize plugins within that page module?  For example...  var carousel = function() {}; // initializes carousel plugin  var commonModule = function() {}; // loads on all pages  var pageModule = function() { // loads on a particular page     carousel(); };"
Frontend,3bifdh,i_am_unco,2,Mon Jun 29 18:54:40 2015 UTC,"html  <div data-foo-module=""carousel""></div>   init  Window.FOO = {}; //your namespace to not pollute //this uses jquery on load of every page call  //FOO.modules();   loader function  FOO.modules = function() {     $(""[data-foo-module]"").each(function(){         var $this = $(this),             module_type = $this.attr('data-foo-module');         if(FOO.modules[module_type] && typeof FOO.modules[module_type].init == 'function') {             console.log('initialising ' + module_type + ' module');             FOO.modules[module_type].init($this);         }     }); };   and  FOO.modules.carousel = {}; FOO.modules.carousel.init = function(div) {     //load heavier script here };"
Frontend,3bifdh,ElectricOrangeJuice,1 point,Tue Jun 30 05:17:39 2015 UTC,"load speed (in terms of actual download speed) will be negligible unless you're dealing with a metric fuckton of plugins.  The bigger concern is RAM. All the JS is stored in memory and phones run out pretty quickly if you also have a lot of images and other stuff going on.  One approach I like is creating a really small bundle of scripts that deals with layout (masonry for instance) and load that in first and get that initial paint done as quickly as possible. Then load the remaining scripts for that page (for instance stuff needed for a shopping cart on a shop or form validation or what have you).   Another example is if you're building a web app with login, only load the tiny login script on initial page load and then load the bulk of the JS when the user signs in.   If you look at it in terms of ""What is the absolute minimum I need to paint the top part of this page"" you'll find a ton of junk that can be deferred and that will give you a noticeable speed boost."
Frontend,3bifdh,jeppe96,1 point,Wed Jul 1 10:24:09 2015 UTC,How much is a metric fuckton?
Frontend,3bifdh,ElectricOrangeJuice,1 point,Wed Jul 1 11:16:21 2015 UTC,"a thousand fucks, or a thousand fucking kilos.  ... Depends on your perspective."
Frontend,3bifdh,jeppe96,1 point,Wed Jul 1 11:19:58 2015 UTC,How does that convert to the imperial system?  Is a metric fuckton then an imperial fuckload?
Frontend,3bifdh,ElectricOrangeJuice,1 point,Wed Jul 1 14:37:28 2015 UTC,The imperial system needs to get the hell out of my code
Frontend,3bif1p,Lukk1989,3,Mon Jun 29 14:07:52 2015 UTC,"I would highly recommend you learn PHP and WordPress or Drupal or any of the other open source CMS options. You will not have the resources to outsource your graphic design and basic back-end coding initially.  You will not just ""have work"" when you first start out even with two or twenty years of experience. Clients will not come knocking at your door to give you work, you have to pursue them and network in the right circles with hope for referrals. Your month-to-month income will not be a guaranteed salary and you could go a month (or several) without a new project coming in.  When I left agency life and started freelancing, I took a part-time job (20 hours a week) at a coffee shop to have at least some sort of steady pay coming in while I pursued my own business/freelancing on the side. I did that for a year before going FTE in freelancing."
Frontend,3bif1p,theprofessionalfed,2,Mon Jun 29 15:06:47 2015 UTC,"No offense, but the ""higher salary"" bullet-point isn't immediate and most certainly isn't guaranteed. While it's true that you will likely get paid more per hour then at your current job, you still have to GET those hours. There's a lot of self-marketing involved.  That being said, HTML/CSS/JS isn't enough to get you by in the freelance world. People are going to need full solutions, and that includes CMS's to manage their websites as well as skills in various languages like PHP and Ruby. As /r/theprofessionalfed stated, you need to become comfortable in multiple solutions as not every client will just take what you have to offer. They may require that a site is built in X language or Z framework because someone on their team is vaguely familiar with it.   Similarly, for the first couple years, the ""I could choose which projects I accept or reject"" falls along the same lines... It's more like, ""I could choose to eat this month or not."" You're going to take crappy jobs, because you need to open yourself up to the network that comes with that job. Client referrals are your biggest asset and if you are turning down jobs just because they don't interest you early on, your network is going to be quite limited in size.  To be honest, 2 years of experience isn't much at all. If I were you, I'd keep working but start taking some side freelance work where you can. Market yourself out there and see who bites. As your workload starts to pick up, consider reducing your hours to part-time (or finding a part-time job) as you focus more on your freelance job. Eventually, you'll have a network that can hopefully support you.   Keep in mind, freelance means a lot of instability in the rest of your life too. Banks will be less inclined to give you loans for things like a car or house. An economic hiccup could leave you twiddling your thumbs for months or possibly years at a time. It's a risky venture man, and your list paints it as all rainbows and sugar."
Frontend,3bif1p,one800higgins,2,Mon Jun 29 17:19:05 2015 UTC,"I'd keep working but start taking some side freelance work where you can   Make sure you review any employment agreement you have to ensure your non-compete doesn't prevent you from freelancing for non-clients of your employer. I'm not familiar with European employment law, but in the US this could potentially pose a problem.  And even if you are permitted to freelance outside of your agency, don't do any of the work on your employer's time, software, servers or hardware (even a laptop provided for your use) as then you're using company resources for personal projects which will at least get you reprimanded, possibly get you fired and at most get you sued for whatever profit you made doing the freelance work. (Speaking from watching a friend of mine get fired over the same thing...)"
Frontend,3bif1p,theprofessionalfed,2,Mon Jun 29 21:02:28 2015 UTC,"How do I start freelancing?   Tell your boss to go fuck themselves.  Congratulations, you're now freelancing."
Frontend,3bif1p,magenta_placenta,2,Mon Jun 29 19:02:57 2015 UTC,"Congratulations, you're now homeless.    FTFY"
Frontend,3bif1p,one800higgins,2,Mon Jun 29 23:57:49 2015 UTC,"If you are already very good with HTML/CSS/JS, then i recommend you to think about looing at javascript for the backend too.  http://nodeschool.io gets you started with all the core modules. Then you can go to ""browserify adventure"" to learn something about how to apply that style to the frontend, but if you already have your habits there, then try to learn ""EXPRESS"" (there are modules for that too) and get started with backend.  If you need more sophistication out of the box, then you might want to checkout: * http://sailsjs.org"
Frontend,3bif1p,serapath,1 point,Tue Jun 30 12:57:19 2015 UTC,Thanks everyone for their response. Much appreciated!  I still have a lot to learn so I will focus on that first and start making full websites with PHP and Wordpress. I already started on letting people know that I can make a website for them. Already created a few :)
Frontend,3bif1p,Wyck,1 point,Tue Jun 30 14:26:41 2015 UTC,Network.
Frontend,3bif1p,KezzBee,1 point,Tue Jun 30 18:35:04 2015 UTC,"If I were you, from what you've described, I'd consider building and selling theme's rather than freelancing on a client by client basis. Here's why:  1) You can take your HTML/CSS/JS and pair it with only the amount of PHP you need to learn to build a theme for WordPress.  2) Just focusing on themes is much tighter and more predictable on scope. Doing full sites and trying to coordinate clients with things like content, revisions and so on can be like herding cats.  3) You'll probably want to keep your day job at first, because any form of going it alone has low pay to start with and takes time to build up. If you build themes and sell them you won't need to have as much face time with customers as you do clients. Handle support requests when you get home of a night, and take care of any updates your theme(s) require of a weekend. This would fit around your existing job better than freelancing.  4) The ready made markets for selling themes can be a little easier to crack than freelancing markets, though still difficult and requiring considerable investment of time.  5) You free your income potential from your time a lot more. With a few products for sale that people like you can just focus on increasing their sales, as opposed to freelancing's constant need to gain new clients."
Frontend,3bezxt,TimeToogo,4,Sun Jun 28 17:00:22 2015 UTC,Why would I use this over pjax/turbolinks?
Frontend,3bezxt,TheMoonMaster,1 point,Sun Jun 28 17:23:21 2015 UTC,"Pjax requires server side updates so you require control over this development Turbolinks is designed to be used in a rails environment, albeit can probably be used elsewhere   Schmick is designed to not require changes to server side code and as such is more applicable for static sites, prototypes and tacking on to sites that were not designed with this functionality from the beginning."
Frontend,3bezxt,lymi,2,Mon Jun 29 01:08:45 2015 UTC,Why would I use this over SmoothState?
Frontend,3bezxt,Spoonzie,4,Wed Jul 1 00:01:35 2015 UTC,Nice work! Shame it relies on jQuery Ui :(
Frontend,3bezxt,artisinn,1 point,Mon Jun 29 14:17:13 2015 UTC,What would be a better option for the transition animations?
Frontend,3bezxt,neofatalist,1 point,Mon Jun 29 15:30:55 2015 UTC,I'm a big fan of GSAP.
Frontend,3bezxt,artisinn,1 point,Mon Jun 29 16:04:42 2015 UTC,GSAP is great but license agreement felt restrictive... at least the last time I checked. I dont have details but it felt hard to use it because of it. I used to use it a lot for flash. But with javascript it was more obvious that you were using it for commercial purposes.
Frontend,3bezxt,neofatalist,2,Tue Jun 30 17:19:02 2015 UTC,Your project is MIT so in no way would their licensing be restrictive. Check it out https://greensock.com/standard-license.
Frontend,3bezxt,lymi,1 point,Wed Jul 1 02:06:13 2015 UTC,I dont remember the license agreement being that short. Maybe it changed. I remember looking at their pro plan and something about the license turned off the people I worked for at the time. I do like the library... I think I'll come back to it. thanks.
Frontend,3bezxt,foobar_dev,1 point,Wed Jul 1 03:10:20 2015 UTC,"Velocityjs with its UI pack might work! It was made for animations, and looking at the demo it has better performance than jQuery."
Frontend,3bezxt,Ekrof,2,Wed Jul 1 00:03:00 2015 UTC,I'm impressed. Good work! Even got the push-state (history) stuff going.
Frontend,3bezxt,thomasfl,1 point,Sun Jun 28 23:43:28 2015 UTC,This seems interesting for retrofitting websites. Any info on its impact on performance?
Frontend,3bgetc,lrobinson2011,2,Mon Jun 29 00:16:43 2015 UTC,"I suggest looking at Ember.js. It's a very ""complete"" framework and will help you structure your whole application. If you're familiar with Handlebars already, Yehuda Katz (the guy behind Handlebars) is one of Ember's core contributors, and Ember uses the 2nd generation of Handlebars, called HTMLBars, to write your dynamic HTML. The learning curve is a little steep but it will help a lot with guiding you as you build out your app.   Edit: A quick Google search shows that someone has already written an adapter for Parse, which you can check out here. I can't vouch for its quality but if it works for you, you won't have to write any logic at all to get Ember and Parse talking, Ember Data will ""just work"" for you. Trust me, if you haven't had to do it before, writing all that AJAX by hand sucks. Ember helps keep everything really organized."
Frontend,3bgetc,lofro023,1 point,Mon Jun 29 13:18:26 2015 UTC,"It really doesn't matter much. If you're new to frameworks I would go for something simple like Backbone because the learning curve is much smaller than, for instance, Angular.  Parse JS SDK is also built on Backbone so it uses the same method names for saving, updating, reading data and so on.  If you're asking more generally which framework is best you'll get 10 different answers from 10 different people. I personally dislike working with Ember and Angular and have a lot of fun with React.js, so that's what I'd personally recommend.   However, people build cool shit in all of the frameworks and you'll be alright no matter which poison you pick."
Frontend,3bgetc,ElectricOrangeJuice,0,Wed Jul 1 10:34:41 2015 UTC,"Seriously have a look at RiotJs  Its the most simple components implementation out there, play wells with bootstrap.   Its just plain HTML with the added own tag. Plain javascript and plain css.   No new concept like directives nor weird in javascript css like react.   It uses a virtual dom like react to diff changes with real dom to a minimum.   Its fast, easy to pick up and growing in popularity.   Still unsure, Get yourself a month of egghead.io tutorials watch a bunch of angular, react and riotjs videos.   You'll be able to compare in a jiffy.   When you realise RiotJS is the way to go, grap a generator : https://github.com/opture/generator-webpack-riotjs  And start being awesome !"
Frontend,3beasb,alp82,1 point,Sun Jun 28 12:29:41 2015 UTC,This is directly from the Dynamics.js demo page. Are you asking if that API well built?
Frontend,3beasb,prkirby,1 point,Sun Jun 28 13:15:24 2015 UTC,That's one aspect of it. And there are probably more native css-only approaches.
Frontend,3beasb,DrummerHead,2,Sun Jun 28 14:44:18 2015 UTC,For the complexity of the animation manipulating an svg is the way to go
Frontend,3beasb,StrangeSound,1 point,Sun Jun 28 18:54:29 2015 UTC,"I think if you were going to try and make that in only CSS, it would take you a very long time. This is probably the best way."
Frontend,3b9pe2,theprofessionalfed,8,Sat Jun 27 03:18:00 2015 UTC,Why is your title a question? Andrey is a pretty smart guy. I'd assume he picked things that were actually impossible with Sass.
Frontend,3b9pe2,CorySimmons,5,Sat Jun 27 05:16:20 2015 UTC,"His use of ""impossible"" bugged me too. Autoprefixing is a breeze in SASS and LESS - like postCSS, it's done with plugins. There are a lot of interesting features to postCSS but this claim seemed catty."
Frontend,3b9pe2,doiveo,9,Sat Jun 27 07:32:46 2015 UTC,"What? ...prefixing like Autoprefixer does it, is not possible with Sass.  The scenarios Andrey presented are not possible with Sass."
Frontend,3b9pe2,CorySimmons,4,Sat Jun 27 08:07:32 2015 UTC,"The end user doesn't care if functions happen in a pre or post processing plugin - fact is auto-prefixing in LESS and SASS is dead easy.  I've been running LESS plugins from the beginning and consider them a part of ecosystem.  It pedantic to suggest it's impossible.   By the same logic, mixins are ""impossible"" in postCSS because they must pre-process the code before the output is plain CSS.  This is meaningless to a browser until processed:  @define-mixin icon $network, $color: blue {     .icon.is-$(network) {         color: $color;         @mixin-content;     }     .icon.is-$(network):hover {         color: white;         background: $color;     } }   So you can't simply add this to a CSS file and be fine.  You have to pre-process your file to be effective.  Which is impossible because we're stuck on the strict semantics of ""post processing"".    At scale, there is a strong case for both.  I will be exploring postCSS purely from the performance perspective (he had me at 36ms). I would love to offload lots of transformations to postCSS and knock seconds off the initial build.  In all, I found the talk took a defensive tone with smatterings of fanboi diction.  But then, maybe that's just the nature of our industry. You find the same tone in any technology comparison forum - people don't merely discuss features, they evangelize."
Frontend,3b9pe2,doiveo,1 point,Sat Jun 27 15:36:49 2015 UTC,Writing a mixin that does prefixing isn't the same thing as Autoprefixer.  You can write mixins with PostCSS https://github.com/postcss/postcss-mixins
Frontend,3b9pe2,CorySimmons,5,Sat Jun 27 17:27:53 2015 UTC,"Writing a mixin that does prefixing isn't the same thing as Autoprefixer.   Never claimed it was.  I use a LESS plugin.   You can write mixins with PostCSS https://github.com/postcss/postcss-mixins   I reviewed this (hence my example) and it's pretty weak so far.  None the less, anything in a mixin, by its very nature, requires PRE processing.  Hopefully in the browser some day but that remains to be seen.  Instead of saying impossible, because the plugins prove this fundamentally wrong, he should have focused on the fact postCSS is innately better optimized to perform some build tasks far faster and better then a pre-processor.  BTW, thanks for the down vote on a serious conversation."
Frontend,3b9pe2,doiveo,1 point,Sat Jun 27 17:51:13 2015 UTC,"BTW, thanks for the down vote on a serious conversation.   Sorry, I thought you were saying that mixins did the same thing as PostCSS. Reverting downvotes now."
Frontend,3b9pe2,CorySimmons,2,Sun Jun 28 01:55:50 2015 UTC,Alright. So use SASS for the structure and PostCSS for the syntactic sugar. What's the problem?
Frontend,3b9pe2,SomeRandomBuddy,2,Sat Jun 27 19:19:27 2015 UTC,This is what I do (except with Stylus).
Frontend,3b9pe2,CorySimmons,4,Sat Jun 27 21:59:35 2015 UTC,Autoprefixr uses Postcss
Frontend,3b9pe2,fraincs,1 point,Sat Jun 27 10:19:26 2015 UTC,"I see what you are saying but the framing is what bothered me.  One way or the other, preprocessors would have addressed this by doing some post-processing.  Be it a hand off to postCSS or something internal really makes no difference to the end user.  Neither one, pre nor post processing, is sufficient to address where CSS is going.  Particularly at scale."
Frontend,3b9pe2,doiveo,0,Sat Jun 27 18:02:08 2015 UTC,It's not a question. It's just a statement that ends with a question mark.
Frontend,3b9pe2,master5o1,3,Sun Jun 28 01:11:02 2015 UTC,"The transcriber unfortunately had as much trouble understanding some parts as I did, it is littered with (inaudible) throughout.  https://2015.cssconf.com/#videos"
Frontend,3b9pe2,projectfallback,1 point,Sat Jun 27 06:31:40 2015 UTC,Yeah Andrey's accent is strong. =)
Frontend,3b7u5a,Xaviju,3,Fri Jun 26 17:50:06 2015 UTC,May I say it takes a conference to talk about hacks on using a technology? It just how I feel about CSS. It is never straightforward or intuitive.
Frontend,3b7l4d,jamesvg,2,Fri Jun 26 16:45:06 2015 UTC,"I like the idea, but would like the declaration to be more ratio like: <section class=""col-3/1"">   The only trick is that your css needs to be escaped so .col-3\/1{…}  http://jsfiddle.net/nilloc/2r9vo25k/3/"
Frontend,3b7l4d,nill0c,1 point,Sat Jun 27 03:12:12 2015 UTC,"Thanks for the feedback.  At one point I thought about using the colon char -- <div class=""col-3:1""> -- but when I looked at .col-3\3A 1 in the css all I could think of is how frustrated I would be if I inherited the project.  http://jsfiddle.net/2r9vo25k/4/  I've kept it in mind, since classes like .col-1 and .col-11 mean very different things in other grid systems.  Maybe something more verbose .col-ratio-31 would be more appropriate?"
Frontend,3b7l4d,nill0c,2,Sun Jun 28 14:52:39 2015 UTC,"Yeah, ratio is nice, maybe call .col-ratio-3-1 or even .col-3-to-1."
Frontend,3b7l4d,designerPaul,1 point,Mon Jun 29 04:06:01 2015 UTC,"I like the way it is, it's very easy to type and understand after a minute reviewing it. It is also going to keep the HTML very clean. It reminds me of flexbox.  Also, for me the group of numbers helps me identify a new row, without having to use the word row, a word that doesn't make sense to me when things start to stack at smaller widths."
Frontend,3b7l4d,ngly,1 point,Thu Jul 2 14:35:12 2015 UTC,"Good points.  Perhaps with any implementation there's going to be a learning curve -- nothing representative is perfectly semantic at a glance, e.g. strptime().  Might as well avoid being verbose."
Frontend,3b7l4d,ngly,2,Thu Jul 2 15:10:52 2015 UTC,I feel like Quarter is more intuitive than Slim.
Frontend,3b7l4d,hzhrerherwhhrt,1 point,Sat Jun 27 05:37:25 2015 UTC,"Thanks for the feedback.  Initially I did the whole slim/most thing because at lower breakpoints a quarter might behave as a third, or something.  However, I ended up using One-Third and Two-Third, which is really inconsistent.  I'll re-evaluate the labeling on the example. Thanks again."
Frontend,3b7l4d,MakeGoodDecisions,1 point,Sun Jun 28 14:59:50 2015 UTC,"For what it's worth, I updated the labels in the example to fractions.  http://jamesvg.github.io/col-ratio/"
Frontend,3b7l4d,gregolai,1 point,Tue Jun 30 03:34:12 2015 UTC,"Hey, awesome!"
Frontend,3b7drh,wetazn4u6669,7,Fri Jun 26 15:50:59 2015 UTC,"the only factor that dictates a change in my rate across projects is my level of interest in working on project or with client and not so much the complexity. for example, i will charge an agency $125/hour to work on some urgent mini-site, peppered with banner ads and social media. however a small business owner that needs a simple web presence, where a lot of the decisions are left up to me, and there are not 12 people involved in the creative process, i will come down as low as $75/hour. i will sometimes offer a fixed rate as well, if i can define some very specific milestones or expectations.  you should factor in your cost of living and city you're working out of to come up with your rate. i think a good rate for an experienced NYC based freelancer, primarily working on front-end but has some back-end chops would fall in that $75-$125 per hour range.  btw, i have about 8 years professional experience, but when i first started i was in las vegas and my rate was $35/ hour and i primarily was modifying pre-existing WordPress templates."
Frontend,3b7drh,minorvillain,2,Fri Jun 26 16:16:23 2015 UTC,"I'd recommend starting slow on some freelancing websites. At least then you'd be bidding against other developers for the project and getting an idea of how much and how long, as well as getting some real life developer/client experience. After a few months you could then start to charge more and branch out away from the basic freelance websites."
Frontend,3b7drh,germainelol,2,Fri Jun 26 16:11:27 2015 UTC,"This is how I cut my teeth. I started at $20/hour to compete with people on Elance. Avoid doing any large projects at this rate or you'll burn out fast. I for example did a couple of WordPress themes and regretted it right away. Do fix-it jobs, updates/changes, and psd-to-html stuff. If you stay on Elance, once you've got a good reputation and a few positive reviews (4-6) bump up your rate. By the time I hit 12 reviews I think I was charging $40/hour on Elance BUT I no longer took clients from there due to the network of clients/referrals I had gained and people finding me on LinkedIn and seeing my portfolio site.   Another thing I learned late in the game: retainer contracts. Finding new work whenever you finish something is stressful. Hook up with an agency or another developer who has consistent work and can guarantee you a certain number of hours of work per month/week."
Frontend,3b7drh,rye-neat,1 point,Fri Jun 26 16:30:00 2015 UTC,Pretty much this.
Frontend,3b7drh,germainelol,1 point,Sat Jun 27 05:13:47 2015 UTC,https://webdesignquote.beewits.com/
Frontend,3b7drh,djuggler,1 point,Fri Jun 26 18:08:06 2015 UTC,"Don't undersell yourself. Hurts you and your competitors. Don't give work away for exposure. Doesn't work. You are just giving  yourself way. This always means don't discount your work to get a foot in the door (see point 1). Do remember that you will have to pay taxes on your income and that should be factored into your rate.  Do remember to account for training, material goods (photocopies, printer ink, etc), software, hardware, hosting, services you will need such as accountant or lawyer, etc. When I first started working with my lawyer he sat me down and said, ""we bill for everything."" He then picked up a paperclip and said, ""that costs a nickel.""   In short, figure out what it costs for you to live for a year, figure out how much you want in profit on top of that, divide by 2080, and you have your hourly rate."
Frontend,3b7drh,djuggler,1 point,Fri Jun 26 18:14:10 2015 UTC,"There's a decent calculator that does this, plus asks it you questions so you don't miss expenses.  http://motivapp.com/freelance-hourly-rate-calculator"
Frontend,3b7drh,nill0c,0,Fri Jun 26 19:24:27 2015 UTC,Call your local auto repair shop and ask them what their hourly rate is. Work from there. Hourly rates can vary a ton based on your experience and what the client is looking for.
Frontend,3b45ja,magenta_placenta,27,Thu Jun 25 20:37:15 2015 UTC,"I don't get it, who is he trying to convince? If you don't want to be a frontend dev, then don't..."
Frontend,3b45ja,PUSH_AX,25,Thu Jun 25 20:45:19 2015 UTC,I think it's sort of a rant/opinion post. The main point seems to be that he's frustrated with the fast pace of change and short-livedness of many of the frameworks and tool sets in front-end development.   I can see where he's coming from with that. It can be quite overwhelming really.
Frontend,3b45ja,arechsteiner,3,Thu Jun 25 22:21:21 2015 UTC,"I agree that the criticism of the fast-paced changes of the industry is justified, but it's moving in fantastic directions. What gets me is this guy just sounds like he's whining because it's hard. It's an industry that requires dedication, and that's why there aren't many of us. All the statements like, ""X is impossible, don't even bother."" or ""Just get by with the basics for Y - it's too much otherwise."" are simply obnoxious. Many have mastered all that he's listed - and more."
Frontend,3b45ja,ridgehkr,1 point,Fri Jun 26 11:32:36 2015 UTC,"I get what you mean. However, I think that a lot of this kind of whining that I've heard from people that I know is about what is actually being achieved.  Sure, we've made great strides. But the amount of, ""Oh, this new hot framework/whatever is absolutely essential!"" every other week seems a little crazy in terms of what we are actually getting.  At the end of the day, we're making sure that images, text and video appear where they need to be when they are requested. The sentiment that I see, and can identify with, is that is feels kind of ridiculous that this isn't at least a little bit standardized by now.  If you're doing some cutting edge work, doing insane interactive things inside the browser, sure I get it. Staying on the bleeding edge is going to be a constant research project of seeing what new tech/approaches/techniques are out there.  But most of the web simply isn't that. I think a lot of the old timers thought that some generally accepted standards would have solidified by now. At least in terms of making a website that the majority of clients are asking for or need.  imho, my $0.02, YMMV, and so on"
Frontend,3b45ja,ViennettaLurker,1 point,Fri Jun 26 20:08:05 2015 UTC,"On the one hand, you're right. On the other, that criticism applies to just about every programming blog post out there :)  The point of blogs is to vent personal opinions, and to record personal choices. He's not necessarily even trying to ""convince"" anyone."
Frontend,3b45ja,nidarus,23,Fri Jun 26 15:27:53 2015 UTC,"I don't like the claim that any developer can just pick up/absorb HTML and CSS. There still too many browser inconsistencies and legacy hacks that a developer who hasn't been doing it for years will not even know about.  This post seriously discredits the point of have having web standards and valid HTML/CSS code. I have seen seasoned  ""back-end"" developers get extremely upset because they don't understand the basics of CSS's cascade rules, specificity or when they do something like ""ul li ul li ul li ul li ul li a"" (really, though?).  It's not object oriented and they compensate through heavy reliance on CSS frameworks to control their styling which makes every site look exactly the same. (Not making generalizations, just personal experiences).  Let's not forget the new accessibility standards which will be part of the user experience/interaction that will likely be required within the next five to ten years--not voluntary as it is now. There is already precedents being set in US with National Association of the Deaf vs Harvard/MIT regarding free, publicly available content. Once enough precedent is set or a law is enacted with requirements everyone from major corporations, universities/education, non-profits, etc will need major overhauls of the alleged ""basic"" HTML that drives their site to ensure accessibility to the widest audience is reached. (edit: or they will face multi-million dollar lawsuits from advocate organizations)  The only people who will be ready for this are the true front-end developers who are reading the standards documentation and have have advanced (not just ""pick it up and run"") knowledge of HTML, CSS and ECMAScript. I'll be reading it, will you?"
Frontend,3b45ja,theprofessionalfed,18,Fri Jun 26 00:56:18 2015 UTC,"It's kinda funny he says that CSS is easy, then goes on and bitches how hard it is to do responsive, faithfully translate designs from photoshop, etc. When will developers start admitting that CSS is hard? And it's only getting more difficult by the day as browsers get more modernized and even more CSS features become available."
Frontend,3b45ja,Poop_is_Food,2,Fri Jun 26 04:28:07 2015 UTC,"Especially with all the cool almost programming-like things you can do in CSS3, some of it is similar or compliments Javascript and a dev has to know the nuances and quirks of that. Unless they hate learning like this guy seems to.. I mean I get his points but it's not as though you can get better tools without them being something you have to learn and they will obviously be more complex than what we used before."
Frontend,3b45ja,conspicuouscat,2,Fri Jun 26 15:54:46 2015 UTC,"It's easy for the most part to not have much CSS knowledge and get things looking how you need them(not considering responsiveness or cross browser support), but it most certainly won't be written well if you don't dedicate some time to learn it properly, stuff like using !important all over or naming classes stupidly or using incorrect selectors are just a few ways I see people screw up, people who consider themselves front end and can't be bothered to actually learn it. I have had to deal with too much code written by people who write unmaintainable CSS :("
Frontend,3b45ja,pelks_ikslop,6,Fri Jun 26 20:12:08 2015 UTC,So tired of telling the back ends to not do inline styling
Frontend,3b45ja,imicit,2,Fri Jun 26 16:03:16 2015 UTC,"Where's the best place to read up on ""the new accessibility standards"" you mentioned? My accessibility knowledge is patchy at best."
Frontend,3b45ja,Arcade_Fryer,4,Fri Jun 26 10:44:19 2015 UTC,"The best place to start is W3's Web Accessibility Initiative, the HTML 5 ARIA specs or outside of W3 you can look up articles on s508 (applies to US)/web accessibility.  There is also The A11y Project which has a less technical explanation and a nice checklist that covers the biggest areas--and a huge resource list of books, software and further reading.  The first is crucial and this is where we will see standards arise.  And let me repeat, this shit is no joke as Target had to pay the National Federation of the Blind over $9 million USD because their site was inaccessible. And I'm not a ""doom day"" type of guy, but this will eventually and rightfully be compared to not having a digital wheelchair ramp to your online space."
Frontend,3b45ja,theprofessionalfed,3,Fri Jun 26 12:03:17 2015 UTC,"this shit is no joke   Sorry man, but the case was settled out of court and mostly applied because of California.  One case settled 7 years ago obviously doesn't mean a ton given the ridiculous number (millions) of inaccessible websites out there.  Still, make your damn sites accessible, but don't try to scare people into it with some very minor data."
Frontend,3b45ja,hatestheinternet,2,Fri Jun 26 15:41:04 2015 UTC,"You're right that the Target thing is, at most, anecdotal. I guess I was meaning more in terms of large organizations like Target, Google, MIT, Harvard, major sites, etc. Providing accessibility--if we go by the ADA--won't create an ""undue burden"" on these companies. Small sites may claim providing accessibility is an undue burden on their business.  Disclaimer: I'm Deaf, so accessibility is a big talking point of mine. lol Not trying to sound like a jerk."
Frontend,3b45ja,theprofessionalfed,9,Fri Jun 26 16:44:12 2015 UTC,"The author seems infuriated about the ever-evolving front-end trends but more-so JavaScript frameworks. I have seen other front-end devs complaining about the same thing. Since all these frameworks that come and go seem to be JavaScript based, I don't get what's the problem? Is it really that much of a hassle to transition from JS framework to JS framework to TheNextBigThingJS?"
Frontend,3b45ja,Cinnabon2,3,Fri Jun 26 01:37:18 2015 UTC,"Lots of folks are switching from angular to react, you can imagine that a huge difference in wiring. On a large codebase, switching is probably not even going to happen until it absolutely needs to."
Frontend,3b45ja,get2workUslacker,3,Fri Jun 26 05:12:13 2015 UTC,The good thing with react is it's not a fully-fledged framework if you like. It actually would be possible to convert it slowly without any major issues.
Frontend,3b45ja,joemckie,1 point,Fri Jun 26 08:09:38 2015 UTC,Are you sure? http://www.google.com/trends/explore#q=angularjs%2C%20ember.js%2C%20knockoutjs%2C%20backbonejs%2C%20react.js&date=today%2012-m&cmpt=q&tz=Etc%2FGMT%2B4  I am planning on picking up react just to kick the tires.
Frontend,3b45ja,neofatalist,1 point,Tue Jun 30 17:14:12 2015 UTC,"Am I sure about what?    I am sure  ""lots"" of folks are upset about angular 2.0 and so are looking at other frameworks when the time comes to rewrite. Is React the one? I dunno, the noise is out there for sure.   I am sure large codebases take a long time complete a refactoring no matter how easy/hard the claims are to begin with so large companies are in no rush to do so, typically."
Frontend,3b45ja,get2workUslacker,1 point,Tue Jun 30 18:29:57 2015 UTC,"Just using google trends as an example. Also, nobody in my area is looking for devs who use react. Angular for sure...  angular 2.0 and angular 1.x development is currently being developed in parallel. The just released angular 1.4. Angular 2.0 is not even viable outside of using transpilers."
Frontend,3b45ja,neofatalist,2,Tue Jun 30 18:46:36 2015 UTC,IMO This is what makes frontend exciting.
Frontend,3b45ja,AlGoreBestGore,3,Fri Jun 26 17:49:55 2015 UTC,"Adobe Photoshop, Magneto.   It's ""Magento."" Not the X-men character, Magneto."
Frontend,3b45ja,codyogden,4,Fri Jun 26 05:12:35 2015 UTC,"LOL, this article is a joke."
Frontend,3b45ja,Wyck,5,Fri Jun 26 14:16:00 2015 UTC,"Sounds like they're trying to learn frameworks before they've fully learned the languages they're written in. Adapting to different frameworks really takes minimal ramp up time if you've mastered javascript. Also, ecmascript 6 and typescript are making our lives even easier."
Frontend,3b45ja,cport1,4,Fri Jun 26 13:27:26 2015 UTC,"I love how lists the skills required for frontend development: HTML, CSS, Angular/Backbone/Knockout, Photoshop and git, and then proceeds to say how obvious they are... while leaving out the Angular/Backbone/Knockout bit. And then he just proceeds to mention how he thinks Javascript should fall into that category too, as an afterthought. You know, the actual ""front end development""?  Anyway, I agree with the others here, it's a pretty shitty post. Even some of his more valid criticisms (rapidly changing tech, wasting time to learn a framework and having it rendered meaningless in a year), apply to a shitload of other development fields, and certainly to the backend as well.   He could've just written ""I'll get less money"", and that's the only honest-to-god argument I see there. But even that's skewed because in ""front-end developers"" you get both seasoned Angular/Ember gurus, and someone who needs to know a bit of HTML and CSS to maintain a corporate blog."
Frontend,3b45ja,nidarus,4,Fri Jun 26 15:36:47 2015 UTC,Framework-End Developers.
Frontend,3b45ja,delete_it_now,3,Fri Jun 26 14:07:16 2015 UTC,"Front-end development is one of those fields where the frameworks are, by far, the hardest part. Compare something like AngularJS with writing straight up DOM/XHR code. The second option will get out of hand quick, will be far less testable, and will end up in far more code, but it's way easier to learn and grasp than the craziness that's Angular."
Frontend,3b45ja,nidarus,1 point,Fri Jun 26 15:26:21 2015 UTC,"Reinventing the hammer, over and over and over."
Frontend,3b45ja,delete_it_now,2,Fri Jun 26 15:45:28 2015 UTC,"I wouldn't say so, exactly. Just because you could achieve the same results with spaghetti DOM code as you could with Angular, doesn't mean that Angular is completely meaningless. It's kinda like saying that modern GUI frameworks are merely reinventing drawing rectangles on the screen, when that problem was solved in the 1980's. Advances in structuring code are a big part of development.  Although I do agree that the pace in which these frameworks are invented is not really sane."
Frontend,3b45ja,nidarus,2,Fri Jun 26 16:11:10 2015 UTC,Less competition for the rest of us.
Frontend,3b45ja,rduoll,1 point,Fri Jun 26 17:28:02 2015 UTC,God forbid technology evolves.
Frontend,3b45ja,Wyck,1 point,Mon Jun 29 20:41:49 2015 UTC,"Hey ho, go through http://nodecshool.io and the core modules and then continue with ""browserify adventure"" module to learn how to apply javascript in the browser.  Maybe you already know this stuff, but if not, i strongly recommend you to start building solid basics and don't fall for the hypes of all the different frameworks.  After that, i recommend to follow the trend that goes under ""CSS modules"" (https://github.com/css-modules/css-modules) and make yourself familiar with the ""Virtual DOM"" (which doesnt equate to REACT!!!)  The stronger your basics, the less you care about current hypes - because they come and go and its always only the ""Best Shot"" of experienced developers applying all the techniques they learned while making themselves familiar with those basics.  Start building your own ""Best Practices"" and steal from ideas others bake into their frameworks. If you strictly follow that advice, it might take you longer to grow your skills, but it's a sustainable method."
Frontend,3b45ja,serapath,4,Tue Jun 30 12:50:49 2015 UTC,"You disagree that front-end development is a bit of a hot-mess?  Not enough frameworks coming out for you to consider/evaluate?  You think front-end developers are never expected to do design work?  Front-end developers make less that backend?  (check your favorite job search site on that).   There seem to be some valid points there, nice to know some other folks feel similar pains even if I'm still happy as a FE dev."
Frontend,3b45ja,get2workUslacker,1 point,Fri Jun 26 04:21:59 2015 UTC,"front-end developers are never expected to do design work   That's part of the job though. If you don't know any design, well then you really aren't a complete front-end guy.   You shouldn't be responsible for all design, but you should be able to do it to some extent, just like UX work."
Frontend,3b45ja,hatestheinternet,2,Fri Jun 26 05:06:04 2015 UTC,"It's quite annoying that a lot of companies don't appreciate that a front end developer is pretty knowledgable on UX work. You spend your entire day trying to improve the UX, yet generally aren't too involved with the whole UX process and are just seen as a developer."
Frontend,3b45ja,germainelol,1 point,Fri Jun 26 15:44:48 2015 UTC,It's weird isn't it? :-)
Frontend,3b3wc0,alexcasalboni,1 point,Thu Jun 25 19:29:30 2015 UTC,"What I love most about Pure is that it has both a 5ths and 24ths based-grid. The 5ths based grid is helpful if you creating a centered layout with odd numbers of columns, or creating a 10 column grid."
Frontend,3b3wc0,iatek,1 point,Sun Jun 28 10:53:23 2015 UTC,Tried it. It is indeed very small. Most of the times it just too small for me.
Frontend,3b347a,nicholas040,3,Thu Jun 25 16:06:59 2015 UTC,Sweet! What has improved upon 0.9 to 1.0?
Frontend,3b347a,Lukk1989,2,Thu Jun 25 16:22:51 2015 UTC,"It looks like they focused mostly on performance and stability. I used it for a bit when it first came out but it was a little buggy and sluggish so I switched back to sublime. Supposedly its much better now, but still not quite as fast as Sublime. I'm going to try it out the next few days and see how it goes."
Frontend,3b347a,circusfreak123,2,Thu Jun 25 16:36:50 2015 UTC,"It's definitely getting better, however still too many little glitches to make me ditch Sublime Text.  The scrolling is a lot better now, however you can notice a bit of lag from time to time, which I cannot stand. Also, searching can take some time and themes have the odd glitch.  So, just little things, however those little things can really get under your skin when you're working flat out trying to get things done.  I will check back in a few months to see if these things have been ironed out a little bit more."
Frontend,3b347a,R9GsPvy4qgHgwStudP7E,2,Fri Jun 26 01:47:41 2015 UTC,they still don't have project switcher or save a project..pretty much a deal breaker. You still can't drag and drop new folders without it creating a new window...see you in a year atom!
Frontend,3b347a,sime,8,Thu Jun 25 16:44:04 2015 UTC,you're welcome
Frontend,3b347a,erfling,1 point,Thu Jun 25 16:56:15 2015 UTC,"So I just moved from sublime to brackets but I also kind of want a full stack ""IDE"".  Does Atom support IDE like features for JAVA and php?"
Frontend,3b347a,Hordeur,0,Thu Jun 25 17:25:39 2015 UTC,"Yes it does. Maybe not out of the box, but just browse through the big library of packaged and chances are big you'll find the desired functionality you need."
Frontend,3b347a,erfling,1 point,Thu Jun 25 17:41:15 2015 UTC,"Would you happen to know if it supports PHP doc or other ""typing"" fakes?  I'd love it if it would be aware of OOP classes and autocomplete their methods."
Frontend,3b347a,Hordeur,1 point,Thu Jun 25 18:20:41 2015 UTC,"I'm not certain since I'm cute not developing in OOP, nor have I got my dev machine by hand. Will check it out tomorrow if the question hasn't been answered yet."
Frontend,3b347a,erfling,1 point,Thu Jun 25 19:56:40 2015 UTC,"Thanks a bunch.  I've spent a lot of hours lately trying to upgrade my environment and not have to 1. switch between environments when I switch from working on the front end to the back end or vice versa, or 2. pay into and learn the whole world of IntilliJ"
Frontend,3b347a,circusfreak123,1 point,Thu Jun 25 21:24:20 2015 UTC,"Out of curiosity, what made you decide to go from ST to Brackets? Brackets is nice if you do a tonne of CSS by allowing you to quickly edit external CSS on the fly, but that was the only really compelling thing for me, I felt it was sluggish compared (same with Atom)."
Frontend,3b347a,erfling,1 point,Fri Jun 26 02:30:12 2015 UTC,"It is a little sluggish, but I like it's JS code hunting and the way it gives you clever hints about filepaths.  Honestly, the thing that I makes it win over ST to me is the simple fact that the keyboard shortcuts for opening and closing the side panel works.  It never once worked in ST 2 or 3 for me, and that was infuriating."
Frontend,3b347a,daggerdragon,-2,Fri Jun 26 13:28:28 2015 UTC,This article confused the hell out of me until I realized they were not talking about the Atom XML/RSS standard.
Frontend,3b347a,skeletorcares,-1,Thu Jun 25 16:40:45 2015 UTC,"Still slow as shit, and possibly more buggy."
Frontend,3b3ps7,magenta_placenta,3,Thu Jun 25 18:41:24 2015 UTC,"Aurelia is very well done, and IMO it is significantly better than most, if not all alternatives e.g., Angular. My biggest contention however, is that it’s another framework. More and more I’ve been leaning towards using a collection of well thought out libraries, instead of a more forceful framework."
Frontend,3b3ps7,ExceptionNULL,3,Thu Jun 25 21:02:14 2015 UTC,"Somewhat relevant XKCD (replace ""standards"" with ""frameworks"")  I believe Aurelia is essentially the result of Rob Eisenberg's disagreements with the direction of Angular 2.0. He left, and started working on Aurelia."
Frontend,3b3ps7,PhaZePhyR,2,Fri Jun 26 07:48:22 2015 UTC,"Image  Title: Standards  Title-text: Fortunately, the charging one has been solved now that we've all standardized on mini-USB. Or is it micro-USB? Shit.  Comic Explanation  Stats: This comic has been referenced 1681 times, representing 2.4132% of referenced xkcds.    xkcd.com | xkcd sub | Problems/Bugs? | Statistics | Stop Replying | Delete"
Frontend,3b3ps7,xkcd_transcriber,1 point,Fri Jun 26 07:48:32 2015 UTC,"Yup, and with so many breaking changes with 2.0, they better have one hell of a migration strategy/tool.  Oh and I should point out that he actually started with Durandal."
Frontend,3b3ps7,ExceptionNULL,0,Fri Jun 26 17:53:17 2015 UTC,I know.. now if everybody would agree to use RiotJs until we have webAssembly that would be just lovely. Thanks internet !
Frontend,3aysln,karnius,8,Wed Jun 24 16:17:01 2015 UTC,I'm literally about to write an email script and thought I could use this... I have no idea what this product does even after reading everything
Frontend,3aysln,chmpdog,3,Wed Jun 24 20:00:22 2015 UTC,"I'm not clear on what it does either, but I think I sort of understand. It sounds like you code your email templates and define REST endpoints that your website can use to do the actual sending of the email.  For example, I could set up a ""Thanks for subscribing"" email that will send when (shock!) a user fills out my subscribe form. Then, when the form is filled out, I can just make a call to say inker.mysite.com/send/subscribe-reponse and inker will send the email (using some kind of third-party email service that you configure). It's nifty because I don't have to worry about coding all that logic in my web application, and I could use the same service no matter what language my current project is using, be it PHP, ASP.NET, etc.  So if that's how it works, then cool - but it doesn't really ""change the way I think"" about sending transactional emails. It does, however, sound like it would help streamline and organize that process, which I would actually find somewhat valuable."
Frontend,3aysln,MrShupple,1 point,Wed Jun 24 23:30:38 2015 UTC,"Hey guys,  This is a point that keep is coming back, so I have to work on my messaging, inker is 2 separate products, they can be use together or not depending on your needs.  On one side you do get everything to code emails more cleanly, efficiently & output a css inlined html version,  On the other side, it handles your pipeline for sending one to one email, basically instead of adding the SenGrid api to your app code, you can call an api that has no integration within your app.  There is a blog post on why I think it is important but it is a bit long: http://www.position-absolute.com/articles/trends/its-time-to-rethink-how-we-manage-email-development-delivery/"
Frontend,3aysln,skratlo,1 point,Thu Jun 25 19:22:03 2015 UTC,This is pointless. Just use SMTP and run your own server. Centralising e-mail is bad for internet.
Frontend,3aysln,skratlo,0,Wed Jun 24 20:41:00 2015 UTC,"You clearly have no idea what it takes to have a 99% delivery rate, using a service like sendgrid or mailgun is necessary if you care about your product emails to be delivered."
Frontend,3b01ht,nathanaelnsmith,4,Wed Jun 24 21:48:11 2015 UTC,I've built several dozen projects with Roots (now Sage) and it is great. It is usually the first and most popular response when someone asks about a WordPress starter theme with Bootstrap.
Frontend,3b01ht,brokentyro,1 point,Wed Jun 24 22:01:30 2015 UTC,"Right on! I'm getting more into custom themes, and was looking for a better solution than creating a child theme of the default wordpress theme.  Do you use drupal? If so, got anything similar?"
Frontend,3b01ht,zesty_zooplankton,1 point,Wed Jun 24 23:12:18 2015 UTC,Do you know if there's anything like Sage/Roots that uses Foundation instead of Bootstrap?
Frontend,3b01ht,brokentyro,1 point,Thu Jun 25 14:32:46 2015 UTC,"Never used it, but there is a fork of Sage that uses Foundation: https://github.com/thiagodebastos/sage/tree/foundation"
Frontend,3b01ht,GeorgePantsMcG,2,Thu Jun 25 16:03:15 2015 UTC,"Not sure how they compare, but I've always used StanleyWP - http://gentsthemes.com/demo/stanleywp/"
Frontend,3b01ht,ganjamuncha,2,Wed Jun 24 22:54:29 2015 UTC,Roots is actually amazing. I've been using it for a while now and feel so comfortable with it. It's so well organized.
Frontend,3b01ht,TrackieDaks,1 point,Fri Jun 26 19:00:52 2015 UTC,"I've used it for a few projects, but depending on the client, I sometimes use underscores instead. The wrapper they use is great, but tends to confuse some ""developers"" because it isn't like every other wordpress theme."
Frontend,3aypb0,coffee-makes-me-poop,5,Wed Jun 24 15:54:23 2015 UTC,Javascript Under Pressure?
Frontend,3aypb0,theprofessionalfed,2,Wed Jun 24 17:05:22 2015 UTC,This looks interesting. I did the first problem which was as follows:  function doubleInteger(i) {     // i will be an integer. Double it and return it.      return i; }      I solved it as follows:  function doubleInteger(i) {     // i will be an integer. Double it and return it.     var x = 2;     i = i * x;     return i; }      Is there a better way?
Frontend,3aypb0,othermatt,2,Wed Jun 24 18:36:24 2015 UTC,why not just do:   return i*2;
Frontend,3aypb0,Gibbon_Ka,2,Wed Jun 24 21:16:47 2015 UTC,"Well the ""return i;"" line was already built in, so I figured I wasn't supposed to fuck with it, but now that you mention it... facepalm."
Frontend,3aypb0,ngly,1 point,Wed Jun 24 21:34:11 2015 UTC,"oh god, that stallman thing"
Frontend,3aypb0,Gibbon_Ka,1 point,Wed Jun 24 18:21:53 2015 UTC,Does this ever have multiple random challenges? Seems to be the same 5 questions..
Frontend,3aypb0,Voidsheep,4,Thu Jun 25 02:11:14 2015 UTC,www.codewars.com has some really tough challenges
Frontend,3aypb0,TechnoCat,3,Wed Jun 24 18:41:58 2015 UTC,"+1  It's also great since you get to see and vote other solutions to the same problem after you've struggled through it.  I think figuring out something by yourself and then seeing far less complicated ways to tackle the issue is quite helpful learning experience.  I just wish local tests were required for submitting new challenges, far too many require you to write them yourself."
Frontend,3aypb0,Reita,3,Thu Jun 25 07:04:21 2015 UTC,"Seems I created a set of katas and koans that could be what you are looking for. I never completed the detailed explanations, but most should be self explanatory. I created this to self teach myself better front end development and design and to have a system for coming back to practice without thinking about the practice process again.  https://dannyfritz.wordpress.com/2014/12/07/web-design-katas-koans/"
Frontend,3aypb0,chmod777,1 point,Wed Jun 24 18:06:00 2015 UTC,Ooooh! This is cool. Thanks.
Frontend,3aypb0,BigDeadPixel,2,Wed Jun 24 18:42:14 2015 UTC,Project Euler?
Frontend,3aypb0,maruwan,1 point,Wed Jun 24 17:58:04 2015 UTC,were you looking for technical puzzles? or more of the soft stuff that takes up most of the working day?
Frontend,3aypb0,magenta_placenta,1 point,Wed Jun 24 23:36:59 2015 UTC,Stuff that would be used to screen candidates for a junior dev position as well as the stuff that devs do day in and day out.
Frontend,3aypb0,magenta_placenta,1 point,Wed Jun 24 23:46:27 2015 UTC,https://www.codingame.com/
Frontend,3aypb0,magenta_placenta,1 point,Thu Jun 25 06:13:57 2015 UTC,"Build an app from start to finish; nothing else will come close to learning JS. Make it IE9 compatible. If you don't want to make a backend, make a game."
Frontend,3aypb0,magenta_placenta,1 point,Thu Jun 25 13:03:37 2015 UTC,"What can you tell me about this?  class Programming {     Programming() {         System.out.println(""method called."");     }      public static void main(String[] args) {         Programming object = new Programming();     } }"
Frontend,3aypb0,magenta_placenta,1 point,Wed Jun 24 17:23:47 2015 UTC,As far as I know Javascript is classless. That looks more like Java than Javascript.
Frontend,3aypb0,Circlefusion,-1,Wed Jun 24 18:40:38 2015 UTC,"50% correct.  Now, which sentence of yours is ""incorrect"" and can you add a caveat to it?"
Frontend,3aypb0,schm0,1 point,Wed Jun 24 19:20:59 2015 UTC,Man... I dunno... maybe it's C# and not Java?
Frontend,3aw4y5,fiatjaf,3,Tue Jun 23 23:54:33 2015 UTC,CSS Zen Garden is back!
Frontend,3aw4y5,lcsza,2,Wed Jun 24 13:12:10 2015 UTC,cute
Frontend,3ayh4e,cathkay,5,Wed Jun 24 14:50:44 2015 UTC,It's all well and good to be able to pick colors from a Psd or use the type tool to find out what fonts was actually used but if your Frontend people are just sitting down doing things that way and implementing a design exactly as phtoshopped you probably have some fundamental problems with your process as well as only one breakpoint.  Web is not print media and we are doing ourselves a disservice treating it as such.
Frontend,3ayh4e,7535,0,Wed Jun 24 18:26:42 2015 UTC,Step 1 install Sketch
Frontend,3ayh4e,fraincs,6,Wed Jun 24 14:57:31 2015 UTC,"Step 2: See that Sketch isn't available on Linux or Windows, ignore it and choose something else."
Frontend,3attcw,davey_b,1 point,Tue Jun 23 13:29:44 2015 UTC,I dont really think this helps much with anything. All the errors it generates dont look to be all that useful. Majority of them I have found are just ordinary suggestions/style choices. Plus it really does not work well when there is multiple warnings on one element. I know its written in CSS and ultimately they cant really do much about that but you know... they shouldn't have wrote it in CSS if they wanted something that was actually useful.
Frontend,3awhb3,WillCodeForFood13,4,Wed Jun 24 01:39:47 2015 UTC,"A week is fairly standard. It's a little unfair to assume the person applying for the job has a lot of extra time and is willing to spend it all on an extracurricular test.   That being said, the task seems fairly straightforward. Although, they did ask for you to learn, implement, and deliver a project in 3 weekdays."
Frontend,3awhb3,ngly,2,Wed Jun 24 02:00:28 2015 UTC,"They can set the rules, but I'd say that an employer giving you a tight deadline and with specifications outside the parameters is a bad precedent."
Frontend,3awhb3,Violetly,2,Wed Jun 24 10:26:08 2015 UTC,"Personally, I don't do these. If they can't get a gauge of my skillset to make a decision based on a phone screen, possibly multiple in-persons, reviewing my github, fuck them.  These skill tests are a great way to waste a candidate's time with no time wasted on the employer's side."
Frontend,3awhb3,magenta_placenta,1 point,Wed Jun 24 14:09:23 2015 UTC,I just did a coding exercise for a company that requires an Angular developer.  I had no idea how to use Angular before this exercise but I got it all done.  I was given 3 days.
Frontend,3awhb3,JediPhilosopher,1 point,Wed Jun 24 14:41:07 2015 UTC,"A week?! 3 days? We just had one which is similar to this except a responsive gallery and we gave a few hours. It didn't matter if they finished or not, we wanted to see their thought process and coding style and all that jazz. A simple 1 page site thats responsive with some images shouldn't take more than a few hours..."
Frontend,3awhb3,jibjibman,1 point,Wed Jun 24 14:57:16 2015 UTC,"Every test I have taken for a job has not lasted longer than 3 days, ranging from a simple landing page to a full blown out template site using ajax and making custom sliders.    If they don't give you enough time, you can simply tell them that you have other priorities and you'll need more time to finish the test."
Frontend,3atvop,roscos_hun,2,Tue Jun 23 13:50:16 2015 UTC,pro   still scrolljacks
Frontend,3atvop,theprofessionalfed,-4,Tue Jun 23 15:18:07 2015 UTC,yes. professionality is not depending on scrolljacking :-)
Frontend,3atvop,get2workUslacker,5,Tue Jun 23 15:42:01 2015 UTC,"For professionals in our industry, well, yes. Yes it does. (i.e. We evaluate you based on everything from validation to user interaction.)"
Frontend,3atvop,RotationSurgeon,2,Tue Jun 23 18:17:52 2015 UTC,This is tactile junk. Tufte would call it a duck house. Please look up some articles on the latest feedback for f'ing with native scroll.  It's just terrible dude.
Frontend,3atvop,flyercreek,2,Tue Jun 23 16:51:54 2015 UTC,"Tufte would call it a duck house   For those who aren't familiar with Tufte, or what this references:  https://en.wikipedia.org/wiki/Big_Duck#Legacy"
Frontend,3atvop,Wyck,1 point,Tue Jun 23 18:43:19 2015 UTC,The text in your call to action buttons overflows
Frontend,3an823,lvrbrtsn,7,Sun Jun 21 21:50:30 2015 UTC,"""AJAX"" stands for ""Asynchronous Javascript And XML"", you're using AJAX whenever using the XMLHttpRequest object to fetch something from a server. (Note that despite the name, you don't have to fetch XML with XMLHttpRequest; in fact 95% of the time you'll fetch JSON.)  Most libraries that handle getting content from a server from JavaScript usually use XHR under the hood; JQuery's $.get and friends do, and Parse probably does."
Frontend,3an823,adambrenecki,0,Sun Jun 21 22:00:14 2015 UTC,Sweet! So if an employer asks if I understand AJAX and I show them something sweet I built with Parse I wouldn't look like an idiot?
Frontend,3an823,wisesascha,8,Sun Jun 21 22:08:11 2015 UTC,Parse obfuscates the actual request logic so while its using AJAX it's not really AJAX. So you would sort of look like an idiot because that is not what your future boss means. He is probably referring to the way the client interacts with the server
Frontend,3an823,nadavspi,1 point,Sun Jun 21 22:18:31 2015 UTC,So how do I get practice with actual AJAX then? I don't want to build my own backend.
Frontend,3an823,riscie,6,Sun Jun 21 22:29:56 2015 UTC,"Build something that interacts with an existing API such as GitHub, Twitter, etc."
Frontend,3an823,jad3d,3,Sun Jun 21 23:25:01 2015 UTC,ok cool! Thank you.
Frontend,3an823,clakclakclak,3,Sun Jun 21 23:33:33 2015 UTC,You can also use something like this to start. http://jsonplaceholder.typicode.com It lets you build a testing-api real quick. Ideal for learning.
Frontend,3an823,clakclakclak,1 point,Mon Jun 22 06:16:24 2015 UTC,Thanks man! I have been looking for something like this!
Frontend,3an823,clakclakclak,2,Mon Jun 22 08:29:18 2015 UTC,"Basically write any JS that uses the jQuery.ajax function to go to some backend server and fetch data.  Yes there's a million ways to do it without jQuery, but that's the most common. With ES6 people will be using the 'fetch' method."
Frontend,3an823,adambrenecki,1 point,Mon Jun 22 20:40:53 2015 UTC,"I really appreciate everyone helping me out! Thanks man, ES6 sounds like its going to be pretty dope."
Frontend,3alnao,las2k,5,Sun Jun 21 12:44:24 2015 UTC,"I don't know about flashcards but if you're using Firefox: inspect an element, in the Style sidebar go on the Computed tab, then check Browser styles at the bottom, and you'll have a list of all the available properties for that element. I suppose Chromium has something similar."
Frontend,3alnao,leeeeeer,1 point,Sun Jun 21 12:57:12 2015 UTC,"I'm pretty sure I've seen the reverse somewhere on the w3c site. That is, a list of css properties and the corresponding HTML elements that they can be applied to.  I recall a big table on one page many years ago, but a quick search now i found this: http://www.w3.org/wiki/CSS/Properties  under each css property link is a property page that says what elements are applicable to the particular property."
Frontend,3alnao,get2workUslacker,1 point,Sun Jun 21 13:53:04 2015 UTC,Just a Google away:   MDN CSS Reference CSS Values
Frontend,3alnao,wayspurrchen,1 point,Sun Jun 21 14:15:21 2015 UTC,window.getComputedStyle(element) ?
Frontend,3akx95,SomeRandomBuddy,0,Sun Jun 21 05:17:13 2015 UTC,You'll be blocking requests from malicious bots at the DNS level still.  Some improvement on loading static assets too.
Frontend,3akz79,SomeRandomBuddy,2,Sun Jun 21 05:44:17 2015 UTC,"It depends if your blog is really going to be an application, which serves changing dynamic content. More likely it will just be a website, and you'll use a third party service for things like comments and social media interaction. So an SSG may suffice.  If you really know what you're doing, and you're in it for the long haul, then go for it. However, sounds like one of those projects which will end up in the infamous 'app graveyard' that we all have.  Alternatively, check out Roots, it's an SSG made with JS: http://roots.cx/  And here's a blog which has extended Roots with some richer modules which you can fork: http://andyshora.com/building-static-site-with-roots.html"
Frontend,3akz79,KnockoutNed87,1 point,Sun Jun 21 07:10:20 2015 UTC,Isomorphic is so Sunday...What you need to be dropping around these parts is Universal JavaScript.
Frontend,3ahs1g,ronaldsvilcins,4,Sat Jun 20 08:19:31 2015 UTC,Would you know of any good voice recognition libraries for JS?
Frontend,3ahs1g,Ajnin123,1 point,Sat Jun 20 17:05:51 2015 UTC,"I believe that this is (probably) powered using Google's Web Speech API, which is actually embedded into the browser (Chrome, at least) AFAIK. There might be better ones out there, though."
Frontend,3ahs1g,wayspurrchen,3,Sat Jun 20 20:27:14 2015 UTC,"I'd love to see this expanded to commands like    Make the logo bigger, but not too big Take out some text Can you make it pop more? Make it Material Make the buttons 3D More share links Less green   EDIT: Bonus points for ""Does it work on IE6?"""
Frontend,3ahs1g,Switche,1 point,Sun Jun 21 03:34:34 2015 UTC,Thats AMAZING!
Frontend,3ahs1g,ostskiva,1 point,Sat Jun 20 18:50:38 2015 UTC,pretty dope
Frontend,3ahs1g,RunHomeJack,1 point,Sat Jun 20 22:52:45 2015 UTC,My reaction
Frontend,3ahs1g,coffee-makes-me-poop,1 point,Sat Jun 20 23:12:17 2015 UTC,I tried in both Chrome and Safari and it didn't appear to be listening.  Is there a step I'm missing someplace?
Frontend,3ahs1g,dangoodspeed,1 point,Sun Jun 21 03:39:04 2015 UTC,"Trying to set ""background-color: red"" ended up giving me ""background color: read"", which was pretty funny. Spelling it out got me closer: ""background - color: red"", but that still doesn't work. Any suggestions on how to do CSS properties with an inline hyphen?"
Frontend,3aen8f,axelut,17,Fri Jun 19 14:34:55 2015 UTC,"I'm sure you've heard it before, but if your strictly content driven site needs a preloader you're doing something wrong."
Frontend,3aen8f,Smudded,3,Fri Jun 19 23:23:19 2015 UTC,What is the purpose of fading in the content as the user scrolls?
Frontend,3aen8f,nonsensepoem,2,Fri Jun 19 20:54:23 2015 UTC,"It can sometimes be used in conjunction with lazy loading, but given that the site is preloaded it looks to be purely an aesthetic choice aimed at making the page seem interactive and dynamic."
Frontend,3aen8f,DrDuPont,2,Fri Jun 19 23:34:57 2015 UTC,I came here from r/web_design to get away from people posting things like Bootstrap themes ;-)
Frontend,3a9v3k,freeall,2,Thu Jun 18 11:16:53 2015 UTC,"To be honest, I've looked long and hard at a custom solution. The ones posted here are not keyboard accessible. That alone is a huge stumbling block for users.   http://www.thecssninja.com/css/custom-inputs-using-css is a better solution for accessibility."
Frontend,3a9v3k,phantamines,1 point,Thu Jun 18 18:19:06 2015 UTC,"True, I didn't think about keyboard accessibility. I want to see if I can solve that. One thing though is that I generally try to avoid javascript if I can. Just to have less moving parts."
Frontend,3a9v3k,fitz0019,1 point,Fri Jun 19 08:55:45 2015 UTC,Just tweaked it a little to give it a focus style for the keyboard accessibility - http://jsfiddle.net/fitz0019/vjp9f7L2/49/.  It's also important to note that the focused (and checked) state shouldn't rely on just colour as this is another accessibility issue.
Frontend,3a9v3k,stardust-kid,1 point,Wed Jun 24 20:36:17 2015 UTC,"I posted something similar before, and got some really useful feedback, so I thought I'd post again.  I had a problem on a page where the id's started overlapping. I could solve it programmatically but I wanted a more pure solution. It took a little while, but I think this one is pretty nice.  Basically, style all labels (preferably you would do this in a specific group like .radiogroup), and then insert a span inside, which then has a colored border when ""it's"" input field is checked."
Frontend,3a9v3k,stardust-kid,1 point,Thu Jun 18 11:20:15 2015 UTC,"/u/ogurson replied to another thread, but it's actually a response to this:   Nihil novi to be honest and not really the best execution. Here, examine that http://jsfiddle.net/vjp9f7L2/39/ - I've made some corrections to your example.     I implemented his examples in my own code (not on jsfiddle) and it's really much better. Less craziness."
Frontend,3aae3s,jefe317,2,Thu Jun 18 14:26:29 2015 UTC,Pretty cool. You ever use bootstrap? this reminded me of their navbar  you might want to check it out for ideas for naming classes and things like that  http://getbootstrap.com/components/#navbar-default
Frontend,3aae3s,designerPaul,1 point,Thu Jun 18 19:32:24 2015 UTC,I've worked with bootstrap a few times. I wanted to make something that didn't require a framework if I could avoid it.
Frontend,3aae3s,RotationSurgeon,1 point,Fri Jun 19 11:55:20 2015 UTC,"As a tip, when using CodePen, you can click the gear icon on the title bar of the CSS panel, and select to use ""Normalize"" or ""Reset"" without having to paste either one in.  Also, all research shows that adding the word ""Menu"" to the button that expands the navigation on a mobile display leads to much more interaction from users."
Frontend,3aae3s,germainelol,1 point,Thu Jun 18 19:01:47 2015 UTC,"Oh wow, I had no clue about the CSS Normalize through CodePen - thanks!  It's funny you should mention that note about adding ""menu"" to the hamburger icon. I ended up doing exactly that on my working code after doing some testing.  Thanks!"
Frontend,3a5upb,moombahh,3,Wed Jun 17 13:46:13 2015 UTC,"What does this do that uncss doesn't, and why should I consider switching?"
Frontend,3a5upb,evoactivity,9,Wed Jun 17 14:00:09 2015 UTC,"Sure. Uncss's implementation creates a fake DOM then pulls off the styles off of that DOM. That doesn't work too well for single page apps where styles get added in by user interaction.   Purify analyzes your whole app, so it'll be able to pick all styles up. To be honest, if you've been using uncss without any problems/issues you don't really need to consider switching as purify would do the same thing. If you ever create a single-page / heavy javascript app  though, I would highly suggest purify"
Frontend,3a5upb,rikAtee,3,Wed Jun 17 14:15:18 2015 UTC,I have been looking for one that handles SPA. nice
Frontend,3a5upb,evoactivity,2,Wed Jun 17 20:45:35 2015 UTC,"Will keep it in mind, done one or two SPA's but nothing recently, will probably be doing more at some point though, so will be worth keeping it in mind at the very least."
Frontend,3a5upb,kudagembira,2,Wed Jun 17 14:21:47 2015 UTC,"If I understand it correctly, purifyCSS can also works on a static webpage (don't have to be an SPA) ?"
Frontend,3a5upb,geuis,1 point,Fri Jun 19 14:46:13 2015 UTC,"You're correct. My mistake. PurifyCSS works on all apps it seems, just has an emphasis on SPAs."
Frontend,3a5upb,a_raid_in_the_wind,-2,Fri Jun 19 16:46:31 2015 UTC,Prior comment I left. http://www.reddit.com/r/javascript/comments/39p51t/a_tutorial_to_use_grunt_purifycss_to_remove/cs5gbys  Try Helium if you want the real thing. https://github.com/geuis/helium-css
Frontend,3a8fuu,RSG_Vlad,1 point,Thu Jun 18 01:26:55 2015 UTC,https://github.com/Skoks/sassy-borders  Documentation http://skoks.github.io/sassy-borders/
Frontend,3a5r06,seanrreid,3,Wed Jun 17 13:11:58 2015 UTC,Good to see they're citing research in an article rather than hypothesizing.
Frontend,3a5r06,mtx,2,Wed Jun 17 14:31:28 2015 UTC,Not if you mark all fields as required ;)
Frontend,3a5s75,metalhaze,3,Wed Jun 17 13:22:40 2015 UTC,If they were tailoring Photoshop to screen designers they'd have added better vector tools and workflow for working with SVG.
Frontend,3a5s75,mtx,1 point,Wed Jun 17 16:40:32 2015 UTC,"It's madness that we have to open an SVG in AI, then copy it across to PS and paste it in as a smart object, then switch back to AI to change the fill as desired, then save, then switch back to PS to see the result, the switch back to AI to export as an SVG.   FFS, PS must be able to parse SVGs because the copied AI vector is copied as an SVG. I made a similar comment in /r/web_design and got down voted."
Frontend,3a5s75,blakblakblakarak,1 point,Thu Jun 18 11:51:30 2015 UTC,Am I cynical for thinking this is a way for Adobe to get a web frontend beta tested by thousands millions of subscribers before rolling it out to the web?
Frontend,3a6bv3,SomeRandomBuddy,2,Wed Jun 17 15:58:46 2015 UTC,"I don't think there's a one-size-fits-all solution to your problem.  Why are you looking to integrate something pre-exiting into your stack? Just build a nav like you normally would and use media queries to make it responsive?  That's going to be the most painless option I can think of, unless you're looking for some crazy menu/submenu system that might need a dash of JS to work."
Frontend,3a6ejx,kwhali,1 point,Wed Jun 17 16:17:34 2015 UTC,"1) With the meta tag mentioned, do PX values translate to a consistent physical size(regardless of pixel density) across screens?   No, the meta tag will not be true to physical size for all devices.  Your breakpoints will still take into account the device pixel ratio, so that needs to be accounted for.  Some quick ones (portrait) iPhone 5: 320, Galaxy S4: 360, Iphone 6+: 414.   2) With regards to being responsive, should I be using PX units?   Personally, I don't think any of the options are bad.  You're right about fonts defined in PX not changing due to browser default font size.  If you're concerned with accessibility, you may want to avoid PX.  ems are fine as long as you keep in mind the effects a parent element has on its children, but it is one more thing you have to be thinking about.  Rems are relative to the root element (html), so the advantage is that you declare your default font size once in px, then everything else in rems.  For your media queries, you just change the font size for html and everything else is taken care of.  These days, support is pretty universal, so unless you have to deal with older versions of IE it's not a concern.  For future reference, caniuse is great to check browser support.  One other quick note - don't sweat the grid framework decisions too much.  This article is a few years old now but demonstrates how easy it is to write your own simple grid framework."
Frontend,3a6ejx,adiagatwo,1 point,Fri Jun 19 21:19:51 2015 UTC,"No, the meta tag will not be true to physical size for all devices. Your breakpoints will still take into account the device pixel ratio, so that needs to be accounted for. Some quick ones (portrait) iPhone 5: 320, Galaxy S4: 360, Iphone 6+: 414   Those values seem to correlate with the physical screen size(inches) growing? What I meant with my question was that if I have an old device with 480p resolution and a newer one with 1080p or greater but both devices share the same physical screen size of say 4"". Then with the meta tag, the device-pixel-ratio normalizes that CSS px unit to be consistent in physical size, thus 160px would span half of the displays width regardless of it's native resolution?  If that happens, then you can design layout appropriately to these size buckets rather than get worked up on if it's a mobile/tablet/laptop/desktop/etc and their varying resolutions/densities. A grid framework then compliments that approach where small screen layouts will all scale appropriately to their single column view, then as you move up to medium size screens you'd go into two column and so on? Is there any reason I should be concerned about 320,360,414 and so on for these 4-6 inch screen devices using such an approach?   One other quick note - don't sweat the grid framework decisions too much. This article is a few years old now but demonstrates how easy it is to write your own simple grid framework.   I get how a simple grid works, I prefer a grid framework like Susy for the benefits it provides, it might sound counter-intuitive but I find it simplifies things in the long run(this goes for using libs that do one thing well in general), so long as I have a fairly good understanding of what's happening, it's nice to offload that development/maintenance to libs where appropriate."
