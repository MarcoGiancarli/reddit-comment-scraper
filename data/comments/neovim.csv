neovim,3e46ar,cazador481,2,Tue Jul 21 20:39:53 2015 UTC,"Hmm... this is why I want to make it possible to override functions, or find some other way to allow extension of providers without needing to copy-paste the original code. Maybe we should raise an event/autocmd instead of calling provider#foo functions.  Thanks for sharing!"
neovim,3e46ar,justinmk,1 point,Wed Jul 22 02:23:26 2015 UTC,I like the idea of setting & as a register shared with Tmux. But this seems to be an independent fork which would certainly be more sustainable if it comes as an extension.
neovim,3e46ar,bohrshaw,1 point,Wed Jul 22 13:06:32 2015 UTC,I would love that ability to allow an extension to providers.  That certainly would make this more maintainable.
neovim,3e46ar,timonvonk,2,Wed Jul 22 13:52:57 2015 UTC,I don't get it. I run x and tmux and I use the + and * registers all the time for copying stuff between applications. Why would I need this?
neovim,3dw7rm,fmoralesc,4,Mon Jul 20 01:23:03 2015 UTC,That is pretty neat.
neovim,3dw7rm,giodamelio,2,Mon Jul 20 12:36:33 2015 UTC,It reminds me Plan 9 Filesystem Protocol: https://en.wikipedia.org/wiki/9P
neovim,3dw7rm,raindev,2,Mon Jul 20 13:49:40 2015 UTC,That's no accident ;)
neovim,3dw7rm,bobdole1950,2,Mon Jul 20 13:54:07 2015 UTC,Now you just need to re-write it in Limbo.
neovim,3dw7rm,bobdole1950,1 point,Mon Jul 20 19:31:31 2015 UTC,"I thought of writing it in Go (same thing, right ;)), but the python neovim client is more mature."
neovim,3dw7rm,robertmeta,1 point,Mon Jul 20 20:40:35 2015 UTC,"I see, thanks for your time Mr. Morales. Back to you, Bill.  (fade out)  Thanks bob."
neovim,3dw7rm,g1116044,1 point,Mon Jul 20 21:39:25 2015 UTC,"Man, makes me sad that you went the Python way -- hopefully in the future the Go client will be up to snuff so we can get a single binary deploy!  This is a really cool demo of both FUSE and Neovim!"
neovim,3dw7rm,g1116044,2,Tue Jul 21 06:53:09 2015 UTC,kakoune has this feature builtin for a long time.
neovim,3dw7rm,bb010g,1 point,Tue Jul 21 15:08:21 2015 UTC,"Cool, I didn't know that.   EDIT: There seem to be similar things in kakoune, but nothing quite like this. What am I missing?"
neovim,3dw7rm,g1116044,1 point,Tue Jul 21 17:05:22 2015 UTC,Sorry I should have been more clear. What I meant was the server-client architecture kakoune has which seem to be the reason why this plugin is imlemented in the first place.
neovim,3dw7rm,eterps,1 point,Wed Jul 22 09:15:05 2015 UTC,Kakoune looks awesome. Do you use it?
neovim,3dw7rm,eterps,1 point,Tue Jul 21 19:19:31 2015 UTC,I haven't done a complete switch yet but I use it from time to time
neovim,3dw7rm,critiqjo,1 point,Wed Jul 22 09:03:47 2015 UTC,Nice. What use cases can you come up with?
neovim,3cu8fl,bugeats,7,Fri Jul 10 20:38:49 2015 UTC,"If you open a :term then hide it, it will keep running (it's just a buffer). You can save the buffer number in a global:  let g:termbuf=bufnr('%')   You can return to it anytime via   exe g:termbuf.'buffer'   And you can bind that to a key, open a window, etc..."
neovim,3cu8fl,justinmk,2,Fri Jul 10 23:57:29 2015 UTC,"I wrote a function based on what /u/justinmk suggested which allows you to toggle a terminal buffer (using <A-t>) in the way OP described.   "" visor style terminal buffer  let s:termbuf = 0  function! ToggleTerm()      topleft 15 split      try          exe 'buffer' . s:termbuf          startinsert      catch          terminal          let s:termbuf=bufnr('%')          tnoremap <buffer> <A-t>  <C-\><C-n>:close<cr>      endtry  endfunction   com! ToggleTerm call ToggleTerm()  nnoremap <A-t> :ToggleTerm<cr>   Not sure what the best practice is for declaring the initial value of s:termbuf though! Maybe someone wants to chime in on that.."
neovim,3cu8fl,_noxd,1 point,Tue Jul 14 17:50:36 2015 UTC,https://github.com/kassio/neoterm might be what you are looking for.
neovim,3cevyy,fornwall,2,Tue Jul 7 11:05:24 2015 UTC,"I regularly cross compile neovim git master for Android, making it available as a package within the Termux app.  The minor patches needed (forkpty missing in the system libc, no libutil existing and helptag generation when cross compiling) are available at https://github.com/termux/termux-packages/tree/master/packages/neovim"
neovim,3cevyy,TankorSmash,1 point,Tue Jul 7 11:13:13 2015 UTC,"I'm unable to locate the package. Both nvim and neovim. Oh nevermind, apt update solved it."
neovim,3cevyy,chasecaleb,1 point,Tue Jul 7 11:59:01 2015 UTC,"Apparently not compatible with my Galaxy S4 running Android 4.4.4/CyanogenMod 11-20141112-SNAPSHOT-M12-jflte. Is that intentional, or a mistake with your app config?"
neovim,3cevyy,chasecaleb,1 point,Tue Jul 7 23:23:10 2015 UTC,"Sorry - forgot to mention that the app requires Android 5.0 or later (there were some larger changes to the system libc in lollipop, which makes it a pain to support both 5.0+ and previous versions for cross compiled packages)."
neovim,3cevyy,borring,1 point,Wed Jul 8 05:23:09 2015 UTC,"Aw, bummer. I'm pretty dependent on pre-5.0 for Xposed, or I would be tempted to switch. Understandable though."
neovim,3cevyy,borring,1 point,Wed Jul 8 06:06:44 2015 UTC,"This is pretty awesome. (Un)fortunately, it seems like they might've beefed up security in Android M. I'm using the preview and many of the operations (dpkg backup, launching nvim) get ""permission denied"" errors."
neovim,3cevyy,borring,1 point,Wed Jul 8 07:29:44 2015 UTC,"Thanks for trying it out! It works on the M preview for me. Is the error message of the kind ""-sh: nvim: Permission denied""? Have you installed nvim first, with something like ""apt update && apt installl -y neovim""?  The default busybox ash shell prints ""Permission denied"" instead of ""command not found"" when unable to find a command (install bash and set it as login shell, ""apt install -y bash && chsh -s bash"", to get better error messages from the shell)."
neovim,3c5wg0,aaronbp,2,Sun Jul 5 03:04:43 2015 UTC,"Nice, I was using another python script to open files in the current Neovim instance from the terminal but this can replace that and I can use it to keep my (fish)shell working directory in sync with my vim working directory.  function cd   if test $VIM     nvim-command 'cd ' $argv   end   builtin cd $argv end"
neovim,3c5wg0,friendly_nz,2,Sun Jul 5 20:34:38 2015 UTC,"Glad you've found use for it! The added space shouldn't be necessary–It's automatically added by python's string.join().  Here's another idea (assuming you map <Esc> in :term):  #!/bin/sh # Run nvim inside an nvim terminal, unmapping the <Esc> key # Useful for applications like git or sudoedit that launch an editor.  nvim-command tunmap '<Esc>' /usr/bin/nvim ""$@"" nvim-command tnoremap '<Esc>' '<C-\><C-n>'"
neovim,3bpzqa,Wizywig,2,Wed Jul 1 05:31:24 2015 UTC,Yes. <D- is not the meta key. It represents the Command key on a Mac. Use <M- or <A- (:help meta).
neovim,3bpzqa,___violet___,2,Wed Jul 1 13:46:50 2015 UTC,Ah. Sorry I misunderstood. I meant is the Command key supported.
neovim,3bpzqa,fortes,1 point,Wed Jul 1 14:03:44 2015 UTC,"It kinda supports it. Here's the results from my testing: https://github.com/neovim/neovim/issues/2379#issuecomment-94496365  Using the following .vimrc:  nnoremap <Tab> :echom ""Tab""<cr> nnoremap <C-Tab> :echom ""C-Tab""<cr> nnoremap <S-Tab> :echom ""S-Tab""<cr> nnoremap <C-S-Tab> :echom ""C-S-Tab""<cr> nnoremap <M-Tab> :echom ""M-Tab""<cr> nnoremap <M-S-Tab> :echom ""M-S-Tab""<cr> nnoremap <C-M-Tab> :echom ""C-M-Tab""<cr> nnoremap <C-M-S-Tab> :echom ""C-M-S-Tab""<cr>  "" For comparison nnoremap p :echom ""p""<cr> nnoremap <S-p> :echom ""S-p""<cr> nnoremap <C-p> :echom ""C-p""<cr> nnoremap <C-S-p> :echom ""C-S-p""<cr> nnoremap <M-p> :echom ""M-p""<cr> nnoremap <M-S-p> :echom ""M-S-p""<cr> nnoremap <C-M-p> :echom ""C-M-p""<cr> nnoremap <C-M-S-p> :echom ""C-M-S-p""<cr>   The following keystrokes work in iTerm2 & the Mac OS X terminal app if you make sure it is set to send Meta key on Option:   Tab S-Tab M-Tab p S-p C-S-p M-p M-S-p C-M-S-p   The following don't work:   C-Tab: Sends Tab C-S-Tab: Nothing sent M-S-Tab: Nothing on iTerm 2, Tab on Terminal C-M-Tab: Nothing C-M-S-Tab: Nothing C-P: Sends C-S-P C-M-P: Sends C-S-M-P"
neovim,3bhx8m,Darksonn,9,Mon Jun 29 10:49:41 2015 UTC,Will there be slim fit versions? I prefer male tees to female ones but I don't want to look like I'm a sack of potatoes.  I like :wq for the back quite a lot.
neovim,3bhx8m,CaptainYeowang,5,Mon Jun 29 12:27:21 2015 UTC,"Actually, that's a good point - I'm male and even I prefer the slim-fit ones. That's because the shirts are often too short down the torso, so I have to get the XL size for it to reach my belt, but by that point it's like I'm a tent pole :/"
neovim,3bhx8m,jesstelford,4,Mon Jun 29 12:56:03 2015 UTC,"I like version #1, with the logo and text. +1 for the back :wq too!"
neovim,3bhx8m,metalelf0,5,Mon Jun 29 12:42:58 2015 UTC,Why :wq when there's :x?
neovim,3bhx8m,pinusc,1 point,Mon Jun 29 12:57:18 2015 UTC,Is :x a synonym for :wq ?
neovim,3bhx8m,slurmfan,1 point,Tue Jun 30 12:11:17 2015 UTC,:wq is much more universally known as a vim feature.
neovim,3bhx8m,fecal_brunch,2,Mon Jun 29 12:58:27 2015 UTC,How about just the logo larger in the center?
neovim,3bhx8m,jesstelford,1 point,Mon Jun 29 11:50:42 2015 UTC,Yes that's a fine possibility too. I added it to the post.
neovim,3bhx8m,jesstelford,2,Mon Jun 29 12:05:18 2015 UTC,Large center logo with something geeky on the back (:wq is good!). Definitely a light coloured shirt too - that's a big win!  Also: Do you ship to Australia?
neovim,3bhx8m,Mini_Evo,2,Mon Jun 29 12:25:54 2015 UTC,I will ship worldwide.
neovim,3bhx8m,dixius99,1 point,Mon Jun 29 12:37:59 2015 UTC,"Who will you go with for printing?  I did a run of 150 with TNTPrinting for an event in California, USA. If you're located in the states, I highly recommend them!  The details of our order (just so you can get a rough price guide):   canvas (mens) / Bella (womens) shirts discharge process printing Off-white 100% cotton light colored shirts 100 x mens ranging from M -> XXL 50 x womens ranging from M -> XL   It cost us US$7.45 per shirt with a $70.00 setup fee.  We were very happy with the canvas / bella shirts (really nice soft material), they were a great fit for both short / tall / skinny / not-so-skinny / men / women, and the discharge process printing really lasts for ages in the shirt (and isn't that horrible plasticy stuff) :)"
neovim,3bhx8m,zeddisdead,2,Mon Jun 29 13:03:53 2015 UTC,I have been planning to use teespring. I'm not located in the states. Teespring seems to use the same printing method as TNTPrinting.
neovim,3bhx8m,slurmfan,1 point,Mon Jun 29 13:11:14 2015 UTC,"I would be interested in buying one, and I like design #1. I'm not too fussed about the :wq on the back, would this add to costs?"
neovim,3b8i6j,Astrognome,10,Fri Jun 26 20:46:14 2015 UTC,"but one thing keeping me from switching is that terminal is great, except it has limited color support   this isn't true in neovim"
neovim,3b8i6j,nan0A,4,Sat Jun 27 04:18:50 2015 UTC,"I'm not that involved in the community, but you can find a list of related projects here: https://github.com/neovim/neovim/wiki/Related-projects"
neovim,3b8i6j,ThermalSpan,2,Sat Jun 27 01:37:33 2015 UTC,"Depending on your platform, there might be a terminal program you find satisfactory. iTerm for OSX has truecolor support, for example.  ""Mystery escape codes"" - which I agree about! - might be trickier."
neovim,3b8i6j,neon_lines,3,Sat Jun 27 02:38:50 2015 UTC,Stable iTerm2 doesn't have truecolor support. You have to run a nightly build.
neovim,3b8i6j,Frem,-2,Sat Jun 27 19:56:43 2015 UTC,Try neovim-e..
neovim,3b632o,DrkStracker,1 point,Fri Jun 26 07:16:50 2015 UTC,Did you try to manually point to the python interpreter?  In you .nvimrc :  let g:python_host_prog = '/path/to/python'
neovim,3b632o,cHoco-,1 point,Fri Jun 26 09:35:35 2015 UTC,"Tried it but no change, ycm still claims it is unavailable..."
neovim,3b632o,cHoco-,1 point,Fri Jun 26 09:59:44 2015 UTC,"Ok then let's start debugging the problem:   Does python work in nvim at all? Type in nvim command line :python print 1  If it prints 1 without throwing an error then the problem is with YCM. YCM is compatible only with python2, have you installed python2 or 3? YCM has an option to manually set the python interpreter to use, try setting it"
neovim,3b632o,cHoco-,1 point,Fri Jun 26 10:17:22 2015 UTC,"Alright :  1 - gives me an error : Unknown function provider#python#Call  2 - both are installed, 'python' command by itself in terminal launches python 2.7.9  3 -  No change, ycm still unavailable"
neovim,3b632o,cHoco-,1 point,Fri Jun 26 10:24:43 2015 UTC,Ok so neovim isn't able to call python.  Can you post the result of :echo has('python') and the env variables of your environment? Also did you try installing the python neovim package only for the current user (instead of using the sudo command) ?
neovim,3b632o,cHoco-,1 point,Fri Jun 26 10:35:34 2015 UTC,"Here's a pastebin of my environment : http://pastebin.com/RZ9ev5y6  Otherwise, the echo command returns 0  I tried installing for the current user as well and nothing either"
neovim,3b632o,Wazutiman,1 point,Fri Jun 26 10:42:04 2015 UTC,I don't see anything wrong here. How did you install neovim? From source?
neovim,3b632o,Sean1708,1 point,Fri Jun 26 10:46:34 2015 UTC,from the official daily ppa
neovim,3b632o,Wazutiman,1 point,Fri Jun 26 10:47:50 2015 UTC,Ok my last attempt XD Can you post the output of nvim --version
neovim,3b632o,Wazutiman,1 point,Fri Jun 26 10:53:50 2015 UTC,"Here you go :  NVIM 0.0.0-alpha (compiled Jun 25 2015 17:07:29) Commit: ? Build type: RelWithDebInfo Compilation: /usr/bin/x86_64-linux-gnu-gcc -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wconversion -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -Og -g -Wall -Wextra -pedantic -Wno-unused-parameter -Wstrict-prototypes -std=gnu99 -DINCLUDE_GENERATED_DECLARATIONS -DHAVE_CONFIG_H -I/build/neovim-YsDsRG/neovim-0.0.0+git201506250528+1714+9+10~ubuntu15.04.1/build/config -I/build/neovim-YsDsRG/neovim-0.0.0+git201506250528+1714+9+10~ubuntu15.04.1/src -I/build/neovim-YsDsRG/neovim-0.0.0+git201506250528+1714+9+10~ubuntu15.04.1/.deps/usr/include -I/build/neovim-YsDsRG/neovim-0.0.0+git201506250528+1714+9+10~ubuntu15.04.1/.deps/usr/include -I/usr/include/luajit-2.0 -I/build/neovim-YsDsRG/neovim-0.0.0+git201506250528+1714+9+10~ubuntu15.04.1/.deps/usr/include -I/build/neovim-YsDsRG/neovim-0.0.0+git201506250528+1714+9+10~ubuntu15.04.1/.deps/usr/include -I/build/neovim-YsDsRG/neovim-0.0.0+git201506250528+1714+9+10~ubuntu15.04.1/.deps/usr/include -I/build/neovim-YsDsRG/neovim-0.0.0+git201506250528+1714+9+10~ubuntu15.04.1/.deps/usr/include -I/usr/include -I/build/neovim-YsDsRG/neovim-0.0.0+git201506250528+1714+9+10~ubuntu15.04.1/build/src/nvim/auto -I/build/neovim-YsDsRG/neovim-0.0.0+git201506250528+1714+9+10~ubuntu15.04.1/build/include Compiled by buildd@lcy01-11  Optional features included (+) or not (-): +acl   +iconv    +jemalloc  For differences from Vim, see :help vim-differences  system vimrc file: ""$VIM/nvimrc""      user vimrc file: ""~/.nvimrc""  2nd user vimrc file: ""~/.nvim/nvimrc""       user exrc file: ""~/.exrc""   fall-back for $VIM: ""/usr/share/nvim"""
neovim,3b632o,Wazutiman,1 point,Fri Jun 26 10:56:04 2015 UTC,"Your PATH looks like it has a bunch of added stuff at the front of it. Could there be another python in the ""/home/laverg_r/.bin:/home/laverg_r/.linuxbrew/bin:/home/laverg_r/bin"" part that is is trying to run that doesn't have the neovim python package in it?  What does running ""which python"" say?"
neovim,3b632o,Wazutiman,1 point,Fri Jun 26 10:57:25 2015 UTC,nah 'which python' gives /usr/bin/python
neovim,3b632o,Wazutiman,1 point,Fri Jun 26 11:01:53 2015 UTC,What does which pip give you?
neovim,3b632o,wal0,1 point,Fri Jun 26 14:12:18 2015 UTC,"/usr/bin/pip  I got it to work a few minutes ago, but here it is because I still don't know why I had to do my solution"
neovim,3b632o,wal0,1 point,Fri Jun 26 14:21:59 2015 UTC,Do you have to have YCM installed in your .nvim instead of your .vim folder?
neovim,3axxaj,benol,5,Wed Jun 24 11:41:27 2015 UTC,"Do you get colors in normal vim? Make sure you start tmux with the -2 option. Make sure your TERM environment variables are set to something proper (i always set it to screen-256color, but that isn't the proper way to do it even though it usually works)"
neovim,3axxaj,AndreDaGiant,4,Wed Jun 24 12:16:12 2015 UTC,Why isn't that the proper way to do it? That's actually the documented way to do it. I don't have to force -2 if the term is set correctly.  OP:  echo $TERM  tput colors
neovim,3axxaj,habys,3,Wed Jun 24 17:26:47 2015 UTC,"echo 'set -g default-terminal ""screen-256color""' >> ~/.tmux.conf"
neovim,3axxaj,DanielFGray,1 point,Thu Jun 25 05:36:33 2015 UTC,"Thanks, that was it."
neovim,3axxaj,BURN_SHIT_NOW,1 point,Thu Jun 25 08:05:23 2015 UTC,"Currently on the /r/linux frontpage:  https://www.reddit.com/r/linux/comments/3blzew/pimp_your_vim_with_colors_httpvimcolorscom/  So, it's possible one way or another."
neovim,3axxaj,IsSuEat,2,Tue Jun 30 08:53:49 2015 UTC,What does      echo $TERM  tell you?
neovim,3axxaj,borring,2,Wed Jun 24 12:21:37 2015 UTC,Do you have NVIM_TUI_ENABLE_TRUE_COLOR=1 in your environment? Tmux doesn't support true color.
neovim,3axxaj,Tobiaswk,1 point,Wed Jun 24 19:49:20 2015 UTC,You can force tmux to use 256 colours with the argument -2. Your terminal needs support of course.   tmux -2
neovim,3apvuc,tarruda,8,Mon Jun 22 15:20:51 2015 UTC,"Damn, nvim gets better and better all the time."
neovim,3apvuc,Trout_Tickler,3,Mon Jun 22 16:06:52 2015 UTC,This will allow things like Neovim-Atom integration to be Awesome. I can't wait.
neovim,3apvuc,giodamelio,1 point,Mon Jun 22 19:35:55 2015 UTC,"Not at all trying to bash, genuinely curious, why use nvim in atom rather than in a terminal?"
neovim,3apvuc,Trout_Tickler,3,Mon Jun 22 20:18:39 2015 UTC,"You can create remote plugins to nvim using node.js, no?"
neovim,3apvuc,cfcosta,2,Mon Jun 22 22:50:37 2015 UTC,"I've read about that feature, not seen it done, but you can do it in Python if I read it right too."
neovim,3apvuc,Trout_Tickler,1 point,Mon Jun 22 22:53:50 2015 UTC,"Mostly plugins. I'm a Javascript dev, and having my editor completely written in Javascript is awesome. It really comes down to the fact vim-style modal editing is awesome, but the rest of vim is not. I use emacs with evil(which is the only REAL vim emulator) for this very reason. I don't really like emacs though(I can't seem figure out lisp), and something like Atom with full vim-like editing would be my ideal editor.  There are also some things the terminal can never do. For example, I write a lot of things in markdown, and a simple atom plugin gives me a real time preview."
neovim,3apvuc,giodamelio,2,Mon Jun 22 20:29:33 2015 UTC,Fair enough.
neovim,3apvuc,Trout_Tickler,2,Mon Jun 22 20:50:08 2015 UTC,Why not use the vim and ex-mode plugins? You get a decent set of vim features while still useing Atom
neovim,3apvuc,HackingInfo,3,Mon Jun 22 23:28:38 2015 UTC,"I tried that, but they don't emulate vim faithfully enough. I'm not sure what the exact mission for the vim and ex plugins for Atom are, but they basically make it vim-ish. While evil take a more hard-line approach of ""if it acts differently then vim, its a bug""."
neovim,3apvuc,giodamelio,1 point,Mon Jun 22 23:54:33 2015 UTC,"You get a decent set of vim features   The premise of nvim-mode for Atom is to get all of them. Instead of emulating its features, just use (n)vim itself."
neovim,3apvuc,wal0,1 point,Tue Jun 23 15:16:21 2015 UTC,"This is true, but OP was looking for a subset of features, not a full (n)vim experience."
neovim,3apvuc,HackingInfo,1 point,Tue Jun 23 20:33:52 2015 UTC,"for the markdown stuff I can understand, but the fact that the editor is written in javascript I don't see how that could help you."
neovim,3apvuc,vheon,0,Mon Jun 22 22:30:27 2015 UTC,"It doesn't really matter that it is Javascript(though it is nice since JS is what I mostly write), just something better then vimscript."
neovim,3apvuc,giodamelio,2,Mon Jun 22 22:51:53 2015 UTC,I misunderstood then: I thought that it was an advantage that the editor itself was written in javascript while you were referring to the scripting language.
neovim,3apvuc,vheon,1 point,Mon Jun 22 23:36:01 2015 UTC,"A bit of both really. In a my perfect world, I never need to dip below the scripting language, so I don't really care what language the editor is written in. We don't live in that world though, so when I try to modify my editor(by scripting it), I find bugs or bad documentation or lack of features make me dip into the editors source itself. So in Atoms case it is doubly good. It's JS all the way down(Ignoring V8, Blink, LibUV and the code that ties them togather into Electron. Which I will probably never need to use directly). This is also the reason I don't really even consider closed-source editors viable to my use case."
neovim,3apvuc,giodamelio,1 point,Mon Jun 22 23:52:37 2015 UTC,For me because it looks much better and it has its own icon on the OS X dock instead of being put together with all the other terminal windows I.
neovim,3apvuc,Levelpart,1 point,Tue Jun 23 08:09:09 2015 UTC,"Idk because I don't use Mac, but can't you make custom launchers?"
neovim,3apvuc,Trout_Tickler,1 point,Tue Jun 23 11:42:51 2015 UTC,"FWIW, for OS X, there's also neovim.app."
neovim,3apvuc,wal0,3,Tue Jun 23 15:14:41 2015 UTC,Super excited about this! Great work /u/tarruda!
neovim,3apvuc,ajay,2,Mon Jun 22 19:57:55 2015 UTC,"I understand the desire to have a really great product before releasing, I often feel the same way!  Many find it to be a trap though, and the trend in startup companies (which applies here too) is to release early and often. It allows you to get real feedback which helps direct effort. We can only guess at which bugs/features are the most important. Until we actually find out with real usage.  Best of luck!"
neovim,3apvuc,Venar303,1 point,Wed Jul 1 22:14:42 2015 UTC,"I skimmed through it, but this sounds like what I need to create a ui that creates new windows in xmonad for each window in nvim. (this is still a very loose idea)"
neovim,3apvuc,kcuf,1 point,Thu Jul 2 00:19:59 2015 UTC,"Dang, we might be getting closer to full on org-mode!"
neovim,3ahasu,alx741,2,Sat Jun 20 04:23:11 2015 UTC,"Have you tried just pasting? Neovim automatically detects when you're pasting and enables paste mode, so it should just work. I was struggling with the same problem until someone brought it up here."
neovim,3ahasu,luizribeiro,1 point,Sat Jun 20 13:39:16 2015 UTC,Last time I looked at it it was removed and in progress.   But there are some workarounds.   Please check and verify as it may have been added back in this year.  https://github.com/neovim/neovim/issues/583
neovim,3alv6j,g1116044,68,Sun Jun 21 14:26:23 2015 UTC,"Wow, what a troll post.  I will respond in case people take you at all seriously.  Neovim took on a massive task and is slowly working through it -- this isn't a failure so much as a challenging project.    Since neovim project is unofficially dead now   Except of course for its ongoing active development: https://github.com/neovim/neovim/commits/master  (with gobs of contributors: https://github.com/neovim/neovim/graphs/contributors)    having nothing interesting to show after almost 2 years of activity except for a built-in terminal that is already useless for people using screen/tmux   That is a very shallow misunderstanding of the work that has been done.  Modernizing Vim is a non-trivial task, and starts in the ugly C bits... have to crawl before you can walk.  Additionally, I suspect the :term integration will end up being a bit of a killer feature.    and async feature that nobody really seem to adapt   Except of course, for those that do... Floobits deprecated the Vim API in favor of Neovim because of async: https://news.floobits.com/2014/11/04/neovim/ -- there are various plugins that either require the job control stuff, or optionally opt in to it.     not to mention the removal of an already working gui for some reason   Removal of all UIs, which is a part of how Neovim is changing the way Vim functions so it can be plugged into other UIs and frameworks.  Check out neovim + atom: https://github.com/carlosdcastillo/vim-mode   broken features such as man pages and such   Some things will be broken before they are fixed, such is life.    are donations going to be refunded   No, they were donations, and used well.  Neovim has even raised more ongoing support via: https://salt.bountysource.com/teams/neovim/updates/7 -- so not only is it not going to be refunded, they are still getting more money.    or they will keep on piling to be left to the so-called project leaders?   I am a contributor to the project ($250) -- are you?  They raised $30k and put in significant work -- no one is getting rich off this.  More in ""can pay rent and eat"" territory.  If the goal was to get rich -- this is the most terrible project imaginable for it."
neovim,3alv6j,robertmeta,8,Sun Jun 21 15:17:45 2015 UTC,"Surely the OP will respond to this. Surely. holds breath  You seriously just obliterated a troll. Shot him in the face with an acid arrow +5.  Edit: I kinda wouldn't mind if we had the option to upgrade neovim to neovim paid. The advantage would be that the paid version would offer you the "":bestfriendhug"" command which would give you a bear hug in ascii. Totes worth the purchase."
neovim,3alv6j,Wizywig,-14,Mon Jun 22 05:05:12 2015 UTC,"I have actually responded to that with a frozen sword +9 but you may not have seen it because of all the downvotes it got. At the end of the day, people only hear what they want to hear, not the actual truth, hence the downvote spam. If you decide to read it first put your magic shield on because it's gonna be above your level. There are answers to each and every point s/he has made."
neovim,3alv6j,sobri909,-55,Mon Jun 22 07:51:41 2015 UTC,"Thanks for replying with nothing that I don't know already.   Wow, what a troll post. I will respond in case people take you at all seriously. Neovim took on a massive task and is slowly working through it -- this isn't a failure so much as a challenging project.   Slowly? Oh ok sorry, my bad.. Let's just wait for 20 more years.   Except of course for its ongoing active development: https://github.com/neovim/neovim/commits/master (with gobs of contributors: https://github.com/neovim/neovim/graphs/contributors)   Take a look at the list and show me a commit implementing some logic or even something useful other than maintaining the mess that they come up with in the first place.   That is a very shallow misunderstanding of the work that has been done. Modernizing Vim is a non-trivial task, and starts in the ugly C bits... have to crawl before you can walk. Additionally, I suspect the :term integration will end up being a bit of a killer feature.   Rewriting vim from scratch is a non-trivial task and it would have finished already by now after all this effort. If you really wanna see a killer feature learn tmux.   Except of course, for those that do... Floobits deprecated the Vim API in favor of Neovim because of async: https://news.floobits.com/2014/11/04/neovim/ -- there are various plugins that either require the job control stuff, or optionally opt in to it.   WTF is Floobits? Who cares about that?   Removal of all UIs, which is a part of how Neovim is changing the way Vim functions so it can be plugged into other UIs and frameworks. Check out neovim + atom: https://github.com/carlosdcastillo/vim-mode   Doesn't work..   Some things will be broken before they are fixed, such is life.   Thanks master yoda..   No, they were donations, and used well. Neovim has even raised more ongoing support via: https://salt.bountysource.com/teams/neovim/updates/7 -- so not only is it not going to be refunded, they are still getting more money.   Of course the donations are still ongoing. It's called 'fraud', wake up!   I am a contributor to the project ($250) -- are you? They raised $30k and put in significant work -- no one is getting rich off this. More in ""can pay rent and eat"" territory. If the goal was to get rich -- this is the most terrible project imaginable for it.   Sorry for your loss but I guess you don't care much about that since you think $30k isn't worth anything. Half the population on the planet doesn't make that much of money in their entire lives."
neovim,3alv6j,sobri909,3,Sun Jun 21 16:05:44 2015 UTC,"Do you at least accept that ""unofficially dead"" is wrong, considering the project is still under active development?   I mean, you're a dick, but you're not a complete dick, right?"
neovim,3alv6j,sobri909,-18,Mon Jun 22 09:32:07 2015 UTC,"I'm not a dick, I just make sense, that's all."
neovim,3alv6j,Wizywig,5,Mon Jun 22 09:46:11 2015 UTC,"You are the only one who thinks that. The rest of us are happily following the ongoing development of neovim and seeing a bright future ahead.   If the pace of development ever dies off, then maybe we'll call it a failure. But right now it's going strong, and the right things are getting done.  You're the only one that can't see that. Perhaps the problem lies with your understanding? Have you stopped to think that yet?"
neovim,3alv6j,sobri909,-6,Mon Jun 22 09:50:15 2015 UTC,"2 years have passed. We're already in the future and it's not bright at all.  Why should I be happy just because you are so? Why should everyone have the same understanding? Why should I change my mind because everyone here thinks the otherwise?  Think about it, this place is full of people that have high hopes for neovim. But there are also many others. They don't even bother to come here and write something because they know they will be nuked with downvotes just like I am. There is no reason why you should be close to criticism. If you see something I don't then you owe me reasonable explanations. I get more sure of myself with every downvote I get without a reply.  The thing is, bad things will happen when you live in the future instead of the present and when money is involved. So perhaps the problem lies with YOUR understanding. Have you stopped to think that yet?"
neovim,3alv6j,Wizywig,4,Mon Jun 22 10:20:24 2015 UTC,"Were you thinking that neovim was a project to build a spaceship capable of taking humans to Mars?   bad things will happen when you live in the future instead of the present and when money is involved.   How much money have you contributed?   Anyway, right here, in the present, neovim is achieving the goals I expected to see achieved. Not coincidentally, those goals are the same as the project's stated goals.   I understand the project just fine. And it's doing great.   I started out wondering if you were really a dick, or just someone who misunderstood the project. I can safely conclude that you are both."
neovim,3alv6j,sobri909,3,Mon Jun 22 10:31:35 2015 UTC,Further neovim was never about making sublime3. The primary goal was to take vim out of the dark ages of code base. Once it's out we can do things like build plugins to atom by actually using vim rather than making a motion emulator like has been done for decades.
neovim,3alv6j,Wiggledan,2,Mon Jun 22 11:26:46 2015 UTC,"Exactly. Modernise the codebase and refactor it in ways that make it much easier to use with plugins, to integrate into IDEs, and for multiple contributors to actively work on without feeling like they're wasting their time.  The integration with IDEs and third party editors is what excites me the most. I'm sick of using half baked vim modes in IDEs that all work slightly differently and don't support the full set of vim features that I like to use.  Neovim is the answer to that problem, and vim-mode for Atom is a working example of that in action. It's obviously a work in progress, but to me, right there, that unequivocally shows that the project is succeeding."
neovim,3alv6j,Wiggledan,-4,Mon Jun 22 11:34:42 2015 UTC,You know Atom is not an IDE right?
neovim,3alv6j,OriginalSyn,-4,Mon Jun 22 12:20:59 2015 UTC,any progress?
neovim,3alv6j,whiskerbiskit,2,Mon Jun 22 12:20:43 2015 UTC,Yes. There is a plugin showcased in this very subreddit like 5 posts down.
neovim,3alv6j,placeybordeaux,-6,Mon Jun 22 13:09:48 2015 UTC,I have no idea what I should do about you calling me a dick.
neovim,3alv6j,justinmk,3,Mon Jun 22 12:19:50 2015 UTC,"Cry? Grow a pair?  Honestly, everyone here is telling you repeatedly that you're being a dick and that you're just plain wrong. If everyone around you is saying the exact same thing, you need to stop and think that maybe they're right."
neovim,3alv6j,justinmk,-6,Mon Jun 22 12:26:54 2015 UTC,Not really.  If everyone is thinking in the same way as you do then maybe you should try to make conversations with other people having different ideas.
neovim,3alv6j,justinmk,2,Mon Jun 22 12:31:26 2015 UTC,"I know this is a troll post, but you can't say that tmux is better than :term. One requires downloading a separate program, extra configuration/mappings, and even plugins  (for some people). The other is built in and works intuitively with Vim (although I will admit that <C-\><C-n> is.. less than intuitive to stop inserting)"
neovim,3alv6j,gordiep,1 point,Tue Jul 7 15:16:20 2015 UTC,"(on neovim progress) That's fair enough, but also a pretty shallow view of the development progress. Vim has had ~2 decades of pretty organic growth, all while being maintained by a single guy. To refactor that will be pretty long and arduous. But it's important in the long term in order to make it nicer/easier for devs to maintain and easier to add more features. The users won't see much of the benefit of this on their end until the new features get through.  (on :term) Also, reasons for :term being better are that it's built in, and it doesn't need to be configured. I'm aware that installing packages is easy, but installing one is easier than two, and I'd rather not have to set it up every time on a new system."
neovim,3alv6j,gordiep,1 point,Wed Jul 15 09:39:08 2015 UTC,One of the first things I did was:  tnoremap <Esc> <C-\><C-n>
neovim,3alv6j,Sean1708,27,Wed Jul 15 13:03:41 2015 UTC,"I was already a contributor, but upon seeing this I gave some more."
neovim,3alv6j,vheon,-39,Tue Jul 7 21:26:20 2015 UTC,nope
neovim,3alv6j,vheon,1 point,Sun Jun 21 15:40:20 2015 UTC,Told him!
neovim,3alv6j,tinyOnion,24,Sun Jun 21 15:43:58 2015 UTC,"I guess I understand your frustration, but on the other hand you didn't look very deeply at the commit history or progress reports. I'm not going to cherry-pick examples only to see what invective you can retort with: if you really want actual answers to your questions, you'll find them in the commit logs and  progress pages. If the progress isn't good enough for you, then I am puzzled about what you want.   We have achieved most of the original goals:   Hackability: it's easier to add features to Neovim than to Vim, because of (1) code cleanup and (2) continuous integration   It's also much easier to add tests, as well as run the existing ones. This is really important for adding new features.   Job control msgpack API :terminal wasn't even an original goal. Your dismissal of it is shallow, no one is obligated to spoon-feed its usefulness into your brain.   What milestone are you looking for that would convince you the project is a success?  Besides all of the various projects that have sprung up, in particular neovim-e is probably the most promising demonstration of what's in Vim's future. Instead of being stuck (like emacs), we Vim users can piggyback on mainstream efforts (Atom, Intellij, ...) without losing the core features of Vim.  And finally: as always, I wonder what metric people use when they question Neovim's success. Neovim contains all of the features of Vim (though we lag by 100 patches typically). If you consider Vim success, then Neovim is by definition even better."
neovim,3alv6j,vheon,-16,Thu Jun 25 21:45:28 2015 UTC,"I guess I understand your frustration, but on the other hand you didn't look very deeply at the commit history or progress reports. I'm not going to cherry-pick examples only to see what invective you can retort with: if you really want actual answers to your questions, you'll find them in the commit logs and progress pages. If the progress isn't good enough for you, then I am puzzled about what you want.   Maybe I didn't look very closely to the commit history but I did something even better. I tried to actually use neovim and tried to see what it's like. In case you're not aware, this is what matters from a user's perspective. Unfortunately, leaving aside the broken pieces all I could see was incompabilities in return for useless features for people who don't really understand vim's philosophy.   Hackability: it's easier to add features to Neovim than to Vim, because of (1) code cleanup and (2) continuous integration It's also much easier to add tests, as well as run the existing ones. This is really important for adding new features.   What new features? We're already talking about the lack of new features aren't we?   Job control msgpack API   Moar incompabilities..   :terminal wasn't even an original goal. Your dismissal of it is shallow, no one is obligated to spoon-feed its usefulness into your brain.   Your dismissal of the rationales for not adding these kinds of features to vim in the first place is shallow and no one is obligated to spoon-feed their uselessness into your brain.   And finally: as always, I wonder what metric people use when they question Neovim's success. Neovim contains all of the features of Vim (though we lag by 100 patches typically). If you consider Vim success, then Neovim is by definition even better.   Vim was and is actually a success and you're just trying to financially exploit its reputation. I wouldn't call that 'even better'."
neovim,3alv6j,tinyOnion,8,Sun Jun 21 18:17:08 2015 UTC,"Vim was and is actually a success and you're just trying to financially exploit its reputation.    I've never taken a single dollar from the Neovim fund. It funds tarruda, and I'm more than fine with that. I have a day job. Apparently my side-job, however, is responding to crazy randos."
neovim,3alv6j,StorKirken,-19,Sun Jun 21 20:22:50 2015 UTC,Crazy randos? I don't even know what that means. Why are you calling me names anyway?
neovim,3alv6j,justinmk,11,Sun Jun 21 20:34:31 2015 UTC,"No no. I didn't mean you. I was just mentioning my side-job, you know, a complete non sequitur (like your comments!). I'm sure you're a great person. Keep on doing what you do."
neovim,3alv6j,chasecaleb,-6,Sun Jun 21 20:46:32 2015 UTC,ad hominem
neovim,3alv6j,Sean1708,4,Sun Jun 21 21:09:08 2015 UTC,And yet still totally accurate.  What a world.
neovim,3alv6j,Cmckendry,-6,Mon Jun 22 12:17:51 2015 UTC,double ad hominem combo
neovim,3alv6j,paraluna,2,Mon Jun 22 19:59:13 2015 UTC,"You might want to check on what that expression actually means, sport."
neovim,3alv6j,brennanfee,-2,Mon Jun 22 20:44:22 2015 UTC,tu quoque
neovim,3alv6j,wbsgrepit,2,Mon Jun 22 21:11:04 2015 UTC,"We're already talking about the lack of new features aren't we?   Just out of interest, besides man pages (which you are quite right about) and gui (which didn't even come with the majority of vim distros afaik), what features is Neovim lacking?   Moar incompabilities..   Could you just explain in which way these things make Neovim incompatible?"
neovim,3alv6j,AndreDaGiant,0,Mon Jun 22 21:23:18 2015 UTC,"Thanks for trying to be reasonable. This is definitely what we need in this thread.   Just out of interest, besides man pages (which you are quite right about) and gui (which didn't even come with the majority of vim distros afaik), what features is Neovim lacking?   What I meant were features that should exist only in neovim not the other way around. But the case is, not only neovim does not really add anything on top of vim, it takes away some of the features only to work on adding them later on.   Could you just explain in which way these things make Neovim incompatible?   When you make the switch to neovim, one of the first things you discover is that python plugins doesn't work, naturally, since it lacks the necessary package for it. It's relatively easy to install them on your own machine but then there are also servers. Now you need to explain what those packages are to your sysadmin only to discover they are not packaged in that particular distro and you spent the entire day trying to make it work manually."
neovim,3alv6j,wbsgrepit,1 point,Mon Jun 22 13:05:11 2015 UTC,"What I meant were features that should exist only in neovim not the other way around. But the case is, not only neovim does not really add anything on top of vim, it takes away some of the features only to work on adding them later on.   Actually that is the thing I like about Neovim, at least at first: I don't really need more features at the moment but I want it to be shiny under the cover; so a well refactored source code which would bring with it less bug and maybe (hopefully) a faster experience. I was actually pissed off when the :terminal feature was added because it meant that time was spent on a feature that I already have (a real terminal) in favour of stuff that I wanted more like changing all the IO to libuv or this one.   When you make the switch to neovim, one of the first things you discover is that python plugins doesn't work, naturally, since it lacks the necessary package for it   For the python stuff I think that the provider system is not such a bad idea I mean: It is a matter of trade off, from one side you don't use an interpreter linked in vim which in case python crashes it would bring down the whole vim, which IMHO is a positive thing, on the other hand you add an additional step to the installing process which is not good for installing neovim everywhere. But I think the former is much more important: I don't know if you ever used YouCompleteMe, well this issue is a thing that lots of users encounter and only because the vim you have installed on your system is linked to a specific python while you have installed another and it is the first on your path: you try to start vim and it crashes in front of you. That is not good and I personally think that the decision made for the python provider was a good one."
neovim,3alv6j,buttonstraddle,-1,Mon Jun 22 13:45:39 2015 UTC,"so a well refactored source code which would bring with it less bug and maybe (hopefully) a faster experience   I had the same thing in mind while I was still enthusiastic about neovim but in order to be stable you need to stop changing stuff. If you look at the archives you realize that the project diverges continuously from its roadmap and we are left with an half-baked cookie at all times. This is the reason why all the timeline predictions also failed by a large margin and all we get as an answer nowadays is just simply 'when it's ready'.   changing all the IO to libuv or this one   Oh right, I had forgotton all about libuv. I'm not using a windows machine so I may be wrong but isn't that the case that vanilla vim is able to work on windows whereas neovim which is using libuv to solve portability issues is still struggling with its windows build? That's just irony in its purest form.   For the python stuff I think that the provider system is not such a bad idea I mean: It is a matter of trade off, from one side you don't use an interpreter linked in vim which in case python crashes it would bring down the whole vim, which IMHO is a positive thing, on the other hand you add an additional step to the installing process which is not good for installing neovim everywhere. But I think the former is much more important: I don't know if you ever used YouCompleteMe, well this issue is a thing that lots of users encounter and only because the vim you have installed on your system is linked to a specific python while you have installed another and it is the first on your path: you try to start vim and it crashes in front of you. That is not good and I personally think that the decision made for the python provider was a good one.   Well I used YouCompleteMe for some time before I finally gave up. I remember it was crashing from everything, the wrong vim version, the wrong python version, the wrong llvm version, so I doubt neovim will solve the issue. Also I still fail to see why the compiled fuzzy complete logic is not somehow implemented in vim itself instead of being implemented as a separate compiled binary or better be left optional to use clang completion. I think in its current form YouCompleteMe is just another abomination but that's a different story."
neovim,3alv6j,Erakko,3,Mon Jun 22 19:51:21 2015 UTC,"I had the same thing in mind while I was still enthusiastic about neovim but in order to be stable you need to stop changing stuff. If you look at the archives you realize that the project diverges continuously from its roadmap and we are left with an half-baked cookie at all times. This is the reason why all the timeline predictions also failed by a large margin and all we get as an answer nowadays is just simply 'when it's ready'.   I kinda agree with you here, I don't really like the way the current goal always changes, but I like the currents one... at least the ones /u/tarruda is proposing.   Oh right, I had forgotton all about libuv. I'm not using a windows machine so I may be wrong but isn't that the case that vanilla vim is able to work on windows whereas neovim which is using libuv to solve portability issues is still struggling with its windows build? That's just irony in its purest form.   I don't use windows at the moment but it might change in the future so I kinda care about this. Doing IO for windows directly in vim is a burden for maintenance which libuv would remove, plus the async stuff is already done by libuv so I don't think that question that choice is really on the table.   Well I used YouCompleteMe for some time before I finally gave up. I remember it was crashing from everything, the wrong vim version, the wrong python version, the wrong llvm version, so I doubt neovim will solve the issue.    From all the thing you mentioned, the python vim is compiled against is the only thing that could crash YouCompleteMe (since all the others are vendored) so yes, neovim have solved that with the provider infrastructure.   Also I still fail to see why the compiled fuzzy complete logic is not somehow implemented in vim itself instead of being implemented as a separate compiled binary or better be left optional to use clang completion.    So you're suggesting to embed YouCompleteMe or whatever similar approach inside vim. The same vim that said no to the async job?? Well you could try to propose that to vim_dev but I wouldn't hold my hope too high. If you're suggesting to embed YouCompleteMe inside neovim, it has been already done but it isn't a primary thing so it's rightly on hold. That aside I think that it shouldn't be embedded at all, since vim and neovim is an editor and from my point of view it should just have the entry point needed for delegating this stuff and let other tools do this job.   I think in its current form YouCompleteMe is just another abomination but that's a different story.   I'm taking this personally since I look YouCompleteMe really up close ;)"
neovim,3alv6j,AndreDaGiant,1 point,Mon Jun 22 22:03:28 2015 UTC,"I really wish that you could turn off the autocomplete in ycm and only have it pop up when you want it to. It's not always that fast tbh and it slows down typing quite often. it would be nice if pressing ctrl-space, like in visual studio, would pop up the completion and not have it complete every time you press a few characters. it's nice to have the completion pop up usually but there are a lot of times where it doesn't. This feature was suggested as an issue but the maintainer dismissed it out of hand."
neovim,3acky8,NLKNguyen,6,Fri Jun 19 00:31:22 2015 UTC,"You could try to compile it locally with this environment variable : export LDFLAGS=""-static""  The resulting binary will be bigger but it won't depend on external libraries.  Or you could use a virtualized CentOS to compile it. (IMHO, it's cleaner than to statically compile)  And then you just copy the binary somewhere in your $PATH."
neovim,3acky8,Aldarone,1 point,Fri Jun 19 11:48:31 2015 UTC,That sounds reasonable and should work.  I wanted to suggest the same.
neovim,3acky8,QuietParticle,1 point,Fri Jun 19 13:17:44 2015 UTC,You should be able to check out the git repository and build it from source without root privileges. Does that not work?
neovim,3acky8,surnia,1 point,Fri Jun 19 01:32:57 2015 UTC,I forgot to mention. Git is not available :(
neovim,3acky8,surnia,2,Fri Jun 19 02:43:59 2015 UTC,Github provides a zipped version of master that you can download with wget: https://github.com/neovim/neovim/archive/master.zip  EDIT: I guess if you don't have CMake this won't help...
neovim,3acky8,zeddisdead,2,Fri Jun 19 03:29:12 2015 UTC,I guess I'll need to build CMake from source on this server after all. Thanks :)
neovim,3acky8,OriginalSyn,1 point,Fri Jun 19 03:58:06 2015 UTC,You can build neovim with Linuxbrew: http://brew.sh/linuxbrew/
neovim,3acky8,justinmk,1 point,Fri Jun 19 01:53:23 2015 UTC,Seems like it requires Ruby. This server doesn't have Ruby :(
neovim,3acky8,vividboarder,1 point,Fri Jun 19 02:44:46 2015 UTC,You can use rbenv or rvm to install ruby locally as well.
neovim,3acky8,vividboarder,1 point,Tue Jun 23 19:21:15 2015 UTC,"I'm looking for an easy way like this tutorial for installing Vim   That tutorial uses git, mercurial, and cmake...  If your system is ubuntu 64 (you didn't mention any system details at all...) you could try this pre-built binary: https://github.com/neovim/neovim/releases   Otherwise you have these options:   Generate a Makefile via cmake from a similar system which has cmake.   On the system which has cmake+git, run a build so that you get a .deps/ directory containing all the dependencies. Then copy everything to your target system.  Build cmake (and git, I guess) on your target system, then use that to build Neovim. Create a VM which matches your target system; install git+cmake; build Neovim; copy the result to your target system."
neovim,3acky8,vividboarder,1 point,Fri Jun 19 03:35:26 2015 UTC,"That tutorial for installing Vim alone has a way to use wget which is available. I followed it and successfully installed Vim on this server.  Sorry for not mentioning, the server is CentOS, and my machine is on Ubuntu. I guess building CMake from source on this server is the last viable option."
neovim,3acky8,Trout_Tickler,1 point,Fri Jun 19 03:55:10 2015 UTC,"Easiest would be to crosscompile from your local and just use that binary. Or use a vm to build like this guy suggested. I've tried doing what you're doing many a time. After cmake, do you know if there are more dependencies? Might be. Then what?   Also, someone may already have a pre-built binary you can use."
neovim,3acky8,vividboarder,1 point,Fri Jun 19 05:11:00 2015 UTC,I'll keep that in mind. Thanks. I just stick with Vim for now. It's not worth the hassle to go through all these since I only need to work on this server for a couple of weeks.
neovim,3acky8,Trout_Tickler,1 point,Fri Jun 19 07:12:55 2015 UTC,"Actually... Even easier, just use your local Vim or Neovim.   $ nvim scp://user@server:path/to/file/or/dir"
neovim,3acky8,vividboarder,1 point,Fri Jun 19 16:30:26 2015 UTC,"Wow, didn't know that feature exists. It's convenient for editing files. I guess it's not possible to send shell command from Neovim like :!ls to run at the server? The :terminal is also at the local machine only.  Btw, I figured out the : in the middle of the command needs to be / if the path is not absolute  $ nvim scp://user@server/~/.vimrc   I just found out SSHFS is a pretty good option. It mounts the remote directory to my local directory, and all the changes in the local will be updated at the remote seamlessly (video). I tried and it works well if all I need is editing files in vim/nvim and have a separate terminal SSH to the server to interact with CLI. It's however still better to be able to run shell commands at the server directly in vim/nvim"
neovim,3acky8,Trout_Tickler,1 point,Sat Jun 20 05:31:46 2015 UTC,"I know it's not an answer, but what server doesn't have Vim on it? I can understand not having Neovim, but Vim?"
neovim,3acky8,vividboarder,2,Fri Jun 19 05:12:08 2015 UTC,University server. Everything is very outdated. It has Vi.
neovim,3acky8,Trout_Tickler,1 point,Fri Jun 19 07:03:37 2015 UTC,"Vim rarely comes pre-installed, and admins rarely install it because vi does the job fine."
neovim,3acky8,Trout_Tickler,1 point,Fri Jun 19 10:51:14 2015 UTC,"Many distros ship with Vim. There are probably some old systems that don't though.   I mean, Vim has been around from 1991 and CentOS only 2004. Vim was already a fairly mature replacement with backwards compatibility. CentOS just decided not to include it for some reason."
neovim,39wjmq,slurmfan,2,Mon Jun 15 11:24:20 2015 UTC,The most straight forward way would be to edit the color schemes to just have dark backgrounds.  You can also check if your colorschemes are configurable. Some let you assign variables in your .vimrc to configure the theme.
neovim,39semm,xeon1234,20,Sun Jun 14 08:24:51 2015 UTC,"Relying on has('nvim') is bad advice. Please use proper feature detection, as what Neovim supports can change, and what Vim supports can change, and what Vim supports differs from version to version. In this case, you want:  if exists('+guioptions')   set guioptions-=T endif"
neovim,39semm,___violet___,2,Sun Jun 14 13:24:16 2015 UTC,if !has('nvim')     set guioptions-=T endif
neovim,39semm,jochenvdv,2,Sun Jun 14 10:10:58 2015 UTC,"Or if you are of the opinion that practicality beats purity, you could do:  silent! set guioptions-=T   Silencing an error is kinda icky, but easier than writing a conditional."
neovim,39semm,Grimy_,2,Tue Jun 16 18:45:43 2015 UTC,https://github.com/neovim/neovim/wiki/FAQ#how-can-i-tell-if-im-running-nvim-or-vim
neovim,39syh4,xeon1234,2,Sun Jun 14 13:44:09 2015 UTC,"Not built-in (yet), but https://github.com/osyo-manga/vim-over works well.  Italics don't work in Neovim terminal yet. Underline is used instead IIRC. See https://github.com/neovim/neovim/wiki/Related-projects"
neovim,39syh4,justinmk,1 point,Sun Jun 14 18:05:33 2015 UTC,"Italics in TUI work fine for me, at least with a VTE based terminal"
neovim,39syh4,MucNerd,1 point,Mon Jun 15 10:38:21 2015 UTC,"1:   :set incsearch /<search> :%s//<replacement/g   :set incsearch enables incremental search, which highlights as you search, and :%s//<replacement/g replaces your searched (and highlighted) chunks with the replacement. :h 'incsearch' and :h :s for more info. However incsearch only highlights the next match, vim-easymotion is showing all matches.  2: Depends on the terminal you're using. urxvt is able to italicize words. There are several markdown-vim plugins, just try them out. 3: There are a few gui projects, but they're all in beta - generally you're better off using the terminal version."
neovim,39l1xa,ThrowawayTartan,1 point,Fri Jun 12 13:58:08 2015 UTC,Does this only happen immediately after hitting escape (exiting insert mode)? It could be related to https://unix.stackexchange.com/questions/23138/esc-key-causes-a-small-delay-in-terminal-due-to-its-alt-behavior
neovim,39l1xa,stebalien,1 point,Fri Jun 12 15:30:59 2015 UTC,"Hmm didn't work. I still have to double tap "":"" to get it to register. I mean if it was consistent I could live with it and chalk it up to some feature but sometimes it registers on the first click.   Also, for some reason when I use "":q"" or "":q!"", it doesn't quit. It just hangs there waiting."
neovim,39l1xa,justinmk,2,Fri Jun 12 17:40:35 2015 UTC,Sounds like something is mapped to :. What is the output of this command:  :verbose map :
neovim,39l1xa,justinmk,1 point,Fri Jun 12 21:59:37 2015 UTC,No mapping found :/
neovim,39l1xa,wbsgrepit,2,Fri Jun 12 22:50:09 2015 UTC,Does it happen with nvim -u NONE?
neovim,38rxm0,wal0,3,Sat Jun 6 07:59:54 2015 UTC,Ugh I wish someone in the IntelliJ world would be as motivated.
neovim,38rxm0,Wizywig,4,Mon Jun 22 05:09:52 2015 UTC,https://github.com/fdinoff/neovim-java-client got started recently... I also really hope we'll get IdeaNvim at some point.
neovim,38rxm0,justinmk,2,Mon Jun 22 06:27:04 2015 UTC,Nice work Carlos!
neovim,38rxm0,pain666,2,Sat Jun 6 21:00:28 2015 UTC,"This is great. I was skeptical about Atom. It is slow, it lacks things. But recently after installing vim-mode, git-plus and the couple of other vim-* plugins I suddenly felt like I am having almost a proper vim.  The problem is I can't use editors other than vim now, everything feels annoying, but vim itself and neovim has their own share of shortcomings. Now it seems to me that coupling the best of both words together might produce some nice results."
neovim,38rxm0,shriek,3,Sat Jun 6 23:16:32 2015 UTC,"Doesn't vim-mode have lot of conflicts with your regular Atom keybindings? That was the most annoying part of having vim-mode. vim-mode didn't have any alternative for multi-select which I can't live without these days. I did eventually unset lots of keybindings manually but it was a pain.   Also, OP. How do I get this in my atom today? I searched for neovim package and didn't find it on the result."
neovim,38rxm0,pain666,2,Sun Jun 7 01:30:04 2015 UTC,"Yes admittedly it's not a true implementation. But it got me far enough fast yesterday. I also enabled automatic save because my hands were pressing vim shortcuts all the time. Commands I didn't know shortcut for I was launching straight from cmd-shift-p typing them by description.   Yes Atom is not very stable and it's not the real vim, but with almost every day updates it has a good chance. On the other hand NeoVim might get there faster.   I seem to lost the ability of using modeless editor now so I need some sort of vim anyway. And Atom gave me a new perspective. But I was using it for a couple of days only and it's hard to say if it's going to stay."
neovim,38rxm0,Categoria,2,Sun Jun 7 07:46:10 2015 UTC,Atom finally gets a decent Editor!  What about plugins like unite and fugitive? How do they work inside atom?
neovim,386eoy,givemesomelovee,2,Tue Jun 2 04:28:44 2015 UTC,":help :make and :help 'makeprg' can get you started and if you don't know how to map keys, read :help map.txt"
neovim,386eoy,_Ram-Z_,2,Tue Jun 2 10:45:19 2015 UTC,"Simplest way to do this is to add a Makefile at the top level of your project and then use :make, or :Neomake!  Here is a StackOverflow reply which will help you, but I've copied the important bit (The makefile) to this reply.  Just save the following in Makefile and you're good to go.  # ----------------------------------------------------------------------------- # CMake project wrapper Makefile ---------------------------------------------- # -----------------------------------------------------------------------------  SHELL := /bin/bash RM    := rm -rf MKDIR := mkdir -p  all: ./build/Makefile     @ $(MAKE) -C build  ./build/Makefile:     @  ($(MKDIR) build > /dev/null)     @  (cd build > /dev/null 2>&1 && cmake ..)  distclean:     @  ($(MKDIR) build > /dev/null)     @  (cd build > /dev/null 2>&1 && cmake .. > /dev/null 2>&1)     @- $(MAKE) --silent -C build clean || true     @- $(RM) ./build/Makefile     @- $(RM) ./build/src     @- $(RM) ./build/test     @- $(RM) ./build/CMake*     @- $(RM) ./build/cmake.*     @- $(RM) ./build/*.cmake     @- $(RM) ./build/*.txt  ifeq ($(findstring distclean,$(MAKECMDGOALS)),)     $(MAKECMDGOALS): ./build/Makefile     @ $(MAKE) -C build $(MAKECMDGOALS) endif   As for mapping it to a key, well you can just put noremap <F5> :make or noremap <F5> :Neomake! in your .nvimrc"
neovim,386eoy,winnatspass,1 point,Fri Jun 5 17:15:54 2015 UTC,"As /u/_Ram-Z_ pointed out, the canonical way to do this is to use :make and I would strongly suggest you learn how to use this (look into Neomake 'cos it's fucking bad-ass).  However, if you desperately want to do this by opening a terminal in a split then learn some vimscript and write a function.  Here's a very quick, very hacky start. Also I've not tested it at all so if it kills you and everyone you love, ain't my fault.  function s:BuildMyStuff(makeprg)     if isdirectory('build')         cd build     endif      vertical botright new     terminal     sleep 100m     call feedkeys(a:makeprg)     call feedkeys(""\<CR>"") endfunction  command -nargs=1 MyMake call <SID>BuildMyStuff('<args>')   Stick that in your .nvimrc and use it with :MyMake make or :MyMake cmake (you can even do stuff like :MyMake ls -l).  Again though I would strongly suggest learning how to use :make."
neovim,383935,allabout001,10,Mon Jun 1 15:17:44 2015 UTC,"Short answer, probably not :)  Long version - there are a lot of broken bits for Windows right now, or at least they have not been tested yet, so you might be mad at Neovim if you try a Windows build right now.  Having said that, there are automated Windows build zips in PR 810 (Insert disclaimer - unstable builds, you have been warned :D). But since the terminal UI is not working you'd also need one of the third-party GUIs to get going.  The thought had crossed my mind earlier, I should be able to generate NuGet packages from Appveyor too. It still wouldn't be perfect but if we could install nightly builds in Windows with two commands that would be a lot easier. Anyone has experience with NuGet packages in Appveyor?   As long as :term and ctrlp and nerdtree are working, I will bow to your direction expressing my highest gratitude.   :S :term is definitely not working, no one has started on it yet.   I am just jealous, as hell   I'm jealous too - now I feel like coding a bunch of Neovim when I get home."
neovim,383935,equalsraf,4,Mon Jun 1 16:41:17 2015 UTC,"Can you use NuGet to install applications? Maybe I'm wrong, but I thought it was only for libraries? Chocolatey should be the application package manager."
neovim,383935,wal0,4,Mon Jun 1 17:53:54 2015 UTC,I think you're right. But for creating the packages its still nuget/nuspec right? First time using this as a packager :)
neovim,383935,equalsraf,3,Mon Jun 1 18:17:22 2015 UTC,"FWIW for chocolatey users, I created a couple of nuget packages, one for Neovim (from #810) and another for the Neovim-Qt UI.  For Neovim (remember the terminal is broken)   choco sources add -source https://ci.appveyor.com/nuget/equalsraf-neovim -name equalsraf-neovim choco install -pre neovim   This is also generated automatically by Appveyor as part of #810 the contents should be the same as the build Zip.  For the Neovim-Qt GUI.   choco sources add -source https://www.myget.org/F/equalsraf/ -name equalsraf choco install -pre neovim-qt   I did not have a lot of time to test, other than running the executables. Please let me know if you run into issues.  PS: remember to use the -pre flag since these are all versioned as pre-release packages."
neovim,383935,equalsraf,3,Mon Jun 8 19:22:40 2015 UTC,"no problem man, your guys are my heroes! i will check out PR 810, thanks."
neovim,37v1fg,godlikesme,1 point,Sat May 30 17:08:32 2015 UTC,Usually when I see these titles I get excited and then sad that I missen it by a few hours. Happy to catch one for once and neovim at that :)
neovim,378odu,critiqjo,1 point,Mon May 25 19:56:13 2015 UTC,"Please test it out, provide feedbacks, and issue pull requests!  EDIT: Created a demo video: https://youtu.be/aXSNhTH1Co4"
neovim,378odu,Sean1708,1 point,Mon May 25 20:02:48 2015 UTC,"Did you have to do anything extra to get the remote plugin working with vim-plug?  Edit: Never mind, it doesn't seem to be an issue with vim-plug. Should it be as simple as just running :UpdateRemotePlugins?"
neovim,378odu,Sean1708,1 point,Tue May 26 09:31:39 2015 UTC,"After cloning it with vim-plug, simply running :UpdateRemotePlugins and restarting neovim would suffice."
neovim,378odu,Sean1708,1 point,Tue May 26 17:37:01 2015 UTC,"Hmmmm, I just get  Could not find any plugins when attempting to register plugin commands. See :he remote-plugin   whenever I run :UpdateRemotePlugins and then   E492: Not an editor command: LLtarget create target/debug/test_prog   whenever I try to run one of the commands.  Interestingly my .nvimrc-rplugin~ file has the lines  "" python plugins call remote#host#RegisterPlugin('python', '/Users/sean/.nvim/rplugin/python/lldb_ctrl.py', [      \ ])   so it's definitely picking something up, I'm just not sure whether it's the right thing.  I updated neovim this morning and this happens even if I empty out my .nvim and copy in the plugin myself, which makes me think that this isn't a problem on my end.  However the fact that nobody else has this problem suggests it is on my end.  Any ideas?  Edit: I've just tried snake.py and that seems to be working fine, so I have absolutely no idea."
neovim,378odu,gaijin_101,1 point,Tue May 26 18:51:39 2015 UTC,I'm not sure either. Here is my .nvimrc-rplugin~: http://pastebin.com/Jce5Hp0N  But the problem might be because the initializing script is giving you an error. Try running this in your python2 interpreter:  import sys sys.path.append('/Users/sean/.nvim/rplugin/python/') from lldb_ctrl import LLInterface   And see whether it runs without error.
neovim,370bx9,lordmord319,2,Sat May 23 18:00:00 2015 UTC,"something (a mapping, or InsertEnter autocmd) must be be calling ctrl-r."
neovim,370bx9,justinmk,2,Sat May 23 20:30:56 2015 UTC,Found it. It was the autocomplpopup plugin that was causing the problem. Replaced it with YouCompleteMe and the problem is gone.  Any ideas about the automatically entering insert mode?
neovim,370bx9,wal0,3,Sun May 24 06:31:54 2015 UTC,":autocmd TermOpen * autocmd BufEnter <buffer> call feedkeys('i')   This will set up an autocmd that will run for each new terminal (TermOpen) that will in turn set up a nested autocommand that is executed when the terminal's buffer is entered (BufEnter <buffer>) to enter insert terminal mode via i.  This is literally the first autocmd I have ever written from scratch, so probably there's a better way.. but hey, it works :-D"
neovim,370bx9,bohrshaw,1 point,Sun May 24 10:55:46 2015 UTC,Works as long as i don't open the Buffer in a Different View.  Not perfect but it should be good enough thanks.
neovim,370bx9,bohrshaw,3,Sun May 24 11:21:45 2015 UTC,"Try to change BufEnter to BufWinEnter,WinEnter.  Or simply autocmd BufWinEnter,WinEnter term://* startinsert.  Edit: This solution is still not trouble-free. See this issue: https://github.com/neovim/neovim/issues/2733"
neovim,36o3ut,TotesMessenger,1 point,Wed May 20 20:15:27 2015 UTC,"This thread has been linked to from another place on reddit.   [/r/vim] Regarding the 'octal' option in the 'nrformats' option   If you follow any of the above links, respect the rules of reddit and don't vote. (Info / Contact)"
neovim,36o3ut,arecarn,1 point,Thu May 21 15:36:50 2015 UTC,"I don't use it, and even sensible.vim un-sets it."
neovim,36o3ut,fmoralesc,4,Thu May 21 16:41:49 2015 UTC,"The new defaults proposed for  neovim, of which this is part, are actually based on vim-sensible."
neovim,36o3ut,Wiggledan,1 point,Thu May 21 17:18:19 2015 UTC,"Well, since I'm dealing with base 10 more often, I prefer it that way. I only see octal counting being useful in every once and awhile. Also it'd be cool if you could decide between more than base-8 and 10"
neovim,36o3ut,5225225,1 point,Thu May 21 18:32:09 2015 UTC,"You can. binary and hex work, in addition to octal and decimal. I can't think of any other commonly used bases."
neovim,36o3ut,xelxebar,1 point,Thu May 21 22:45:36 2015 UTC,"Base 60 and 12, sort of."
neovim,36libo,thukjeche,5,Wed May 20 07:14:57 2015 UTC,"If you update Neovim, it should work as expected.  Some background: This behavior is Vim's default. However, some (most?) Linux distributions change it, for example Arch Linux has the following in /usr/share/vim/vimfiles/archlinux.vim:  set backspace=indent,eol,start  "" more powerful backspacing   Current Neovim (after [1]) has this default built-in.  [1] https://github.com/neovim/neovim/pull/2639"
neovim,36libo,wal0,1 point,Wed May 20 08:30:11 2015 UTC,"Ah, thank you! Setting that worked. I will update, too, then!"
neovim,36libo,Sean1708,1 point,Wed May 20 23:49:12 2015 UTC,"If you've built within the last week you shouldn't need to set it, it should be on by default."
neovim,36libo,paraluna,1 point,Thu May 21 16:15:17 2015 UTC,"Thanks, I built at the end of April"
neovim,36lan1,timbetimbe,1 point,Wed May 20 05:44:22 2015 UTC,"Builds have been on and off failing recently, is it possible you caught a buggy one?"
neovim,36lan1,Sean1708,1 point,Wed May 20 14:37:46 2015 UTC,It's completely possible. Thanks for the insight!
neovim,36gq5o,yourboyaddi,2,Tue May 19 06:55:22 2015 UTC,Didn't know if this is known or not. I'm using urxvt and had set up ranger outside of neovim and it just worked when I tried it. I know it's a bit finicky so I'm pretty excited.
neovim,36gq5o,paraluna,1 point,Tue May 19 06:56:20 2015 UTC,That is kind of cool. Does it work inside of tmux?
neovim,36gq5o,hudsy,-2,Tue May 19 09:37:39 2015 UTC,Why would someone put neovim inside tmux if you can manage your windows from neovim? why put another layer of terminal multiplexer? Is there something I'm missing?
neovim,36gq5o,fmoralesc,9,Tue May 19 10:10:05 2015 UTC,"tmux does more than managing windows, like handling sessions, dettaching, etc."
neovim,36gq5o,vheon,7,Tue May 19 10:41:29 2015 UTC,because I can quit the terminal and my sessions are still there running
neovim,36gq5o,equalsraf,1 point,Tue May 19 10:42:31 2015 UTC,Or you can just keep nvim running in bg on the server and connect the GUI over an SSH forward :D - ok it takes some .ssh glue but it works like a charm.  NVIM_LISTEN_ADDRESS=... nvim --headless
neovim,36gq5o,paraluna,7,Tue May 19 16:00:20 2015 UTC,"True, but tmux does so much more. Multiple sessions, session sharing, sending keystrokes to multiple splits, automatic resizing when attaching/detaching, etc. :terminal is great but you can hardly compare the two."
neovim,36gq5o,paraluna,1 point,Tue May 19 16:09:20 2015 UTC,Would you want these features to be in vim? They seem like they could be mildly useful.
neovim,36gq5o,grine,2,Tue May 19 18:08:20 2015 UTC,"I think so, yes. Editors and sessions managers share many of the same features (windows/tabs, splits, headless mode) and have steadily become more similar. Uniting them would be nice from a user standpoint.   Tmux's copy-mode pales in comparison to working with text in vim even though it tries its hardest to emulate it.  Sharing your sessions and clever handling of multiple window sizes and inputs would make sense for neovim too (and will probably be possible with messagepack). Not sure how useful stuff like sending keys to multiple splits would be for anything but :terminal though."
neovim,36j5uo,CaptainYeowang,3,Tue May 19 19:47:54 2015 UTC,"As far as I can see, vidir just uses whatever $EDITOR is set to. Why wouldn't it work with nvim?"
neovim,36j5uo,wal0,1 point,Tue May 19 20:03:41 2015 UTC,"Yep, it works just fine. vidir does not even set a filetype so I'm not sure what's the problem with color schemes."
neovim,36j5uo,paraluna,1 point,Tue May 19 20:33:00 2015 UTC,"You're both correct. That's why I'm a bit baffled. It uses my $EDITOR correctly but the colour scheme is messed up. Since it was designed to be used with vi, I might guess the problem lies somewhere within there.  But if it works for your guys correctly, I might just have something fishy going on."
neovim,36j5uo,ddungtang,1 point,Tue May 19 21:41:46 2015 UTC,According to vidir's github you can set VIDIR_EDITOR_ARGS env variable.   http://github.com/trapd00r/vidir
neovim,36j5uo,ddungtang,1 point,Thu May 21 04:26:55 2015 UTC,"Ignore me, looked through the code, by default vidir invokes vi. Thought it was invoking vim with passing - - noplugin flag."
neovim,367bsm,Tarmen,3,Sat May 16 21:32:44 2015 UTC,"Yeah, I don't think that is normal, what system are you on & what keys are you pressing?"
neovim,367bsm,ghillisuit95,1 point,Sat May 16 21:43:17 2015 UTC,"I am on linux mint with the newest nvim version from the repo. Anything that enters input mode leaves ""[illegible-unicode]5 q"" at the bottom. Using replace leaves actually three characters,  the one actually pressed followed by [2 .  Anything that redraws the part affected removes it, like pressing <C-L> or aborting a command.  Note that it all is just visual, it doesn't happen in splits that show the same part and redirecting the output doesn't show ""[illegible-unicode]5 q"". Haven't changed the terminal so pretty sure it's gnome-terminal."
neovim,367bsm,ghillisuit95,2,Sat May 16 21:59:25 2015 UTC,can you use xev to see the exact character inputs that X is seeing?
neovim,367bsm,TankorSmash,1 point,Sat May 16 22:22:27 2015 UTC,"Not completely sure what I am supposed to do with xev? It seem the non printable character is %1b which'd be escape, though."
neovim,367bsm,SplinterOfChaos,3,Sat May 16 23:01:34 2015 UTC,"The box has 4 characters in it, that's the unicode for it.     __  |10|  |15|   --   would be \u1015."
neovim,367bsm,enter2exit,2,Sat May 16 23:23:11 2015 UTC,"Yeah, with %1b I meant \u001b which would be escape.  Edit: Seems to have something to do with gnome-terminal? Not sure what in out-of-the-box neovim might trigger it, though."
neovim,362plh,jayrye,1 point,Fri May 15 16:26:21 2015 UTC,Sounds more a like a plugin issue (did you update your plugins around the same time you updated Neovim?). You should always use inoremap instead of imap.  :inoremap jj <Esc>
neovim,362plh,justinmk,1 point,Sun May 17 02:37:22 2015 UTC,Yeah I did :(   Why should i use inoremap? I'm not a vim expert so I'm still learning the in's and outs of all of it.
neovim,362plh,justinmk,1 point,Mon May 18 21:46:04 2015 UTC,"Did you try it, or not?  http://vi.stackexchange.com/search?q=noremap"
neovim,35ub6j,nXqd,3,Wed May 13 15:57:45 2015 UTC,"Er, it depends on what plugins you have, both in emacs and n/vim.  I have thought about this, and I think it would be reasonable to forego syntax highlighting during scroll. When scrolling stops for ~500ms, try syntax highlighting, but allow it to be interrupted if scrolling starts again.  That's what emacs does, actually.   The file I open is not that big, it's around 300, 400 lines   It's not normal for such a small file to cause problems. Does it have long lines? Care you share the file? What happens if you set synmaxcol=200 ?"
neovim,35ub6j,justinmkw,2,Wed May 13 16:50:46 2015 UTC,It depends on plugins and some other settings. When I'm using vim-latex and set cursorline it is slow. If I set nocursorline it's fast again. It's not just neovim though. This happens in vim and macvim for me.
neovim,35ub6j,k3ithk,1 point,Wed May 13 18:40:22 2015 UTC,"yeah, I don't have cursorline on. It's quite slow and I don't really need it :)"
neovim,35ub6j,justinmkw,1 point,Fri May 15 14:00:15 2015 UTC,"I have tried all those synmaxcol and another tips and tricks, my new neovim setup doesn't have many plugins, just 3 including Vim-plug. I would say it's not that slow for this file, but if I have more buffers and bigger files ( real work ), it becomes quite slow. But in emacs, I have a normal setup as well, around 12, 13 plugins, but it works quite well.  I only use Vim in terminal, I find MacVim is much better actually, but I don't use those since I work mostly through ssh."
neovim,35li6n,rraghur,6,Mon May 11 14:09:11 2015 UTC,"http://imgur.com/IgPErml  Given that neovim on windows is still a little distance away, I was able to use electron shell and Coolwanglu's nice neovim-e repo to get a mostly functional neovim on windows.  It requires a ton of hacks to get it functional - but good fun enough and thought folks here may be interested in trying it out.  Good news - my .vim with all of its 54 plugins surprisingly loaded and worked. editing experience is pretty decent  Bad news: I did run into issues - totally expected... - executable() doesn't work  - so anything depending on external executables is probably not going to work.  My biggest pain - Ctrlp doesn't work on windows :( - otherwise I'd happily try nvim full time.  UPDATE: added screenshot  UPDATE2: Also ran into line endings issues - strangely the build from appveyor expects unix line endings. I ran dos2unix -v -f on nvim runtime folder as well .nvim folder."
neovim,35li6n,equalsraf,1 point,Mon May 11 14:14:54 2015 UTC,"Cheers, thanks a lot for testing this. I've pushed some fixes for this into #810. executable() and the shell should be working now.   Python is not working yet :S, seems to be related to shell escaping when invoking python -c ..."
neovim,35li6n,equalsraf,1 point,Tue May 12 22:53:28 2015 UTC,"Nice... I'll try it out as soon as I'm in front of my machine...  On python,  yeah I saw the error with the '-c' arg. Thought it was just due to :shell being broken :-(  Clipboard seems to require a utility currently (xsel etc).  I can try that once we get python.   Any idea why it barfs on line endings?"
neovim,35li6n,equalsraf,1 point,Wed May 13 00:46:08 2015 UTC,"Any idea why it barfs on line endings?    that one is fixed too, it was just just missing a define, and setting the buffer fileformat to unix instead of dos :D  Some of the options are not being set correctly - the shell was broken because the defaults for set shell and set shellcmdflag were calling sh instead of cmd.exe. Maybe the other issues can be fixed checking if the options are being set correctly e.g. shellxquote, but I have not tested yet."
neovim,35li6n,equalsraf,1 point,Wed May 13 01:15:59 2015 UTC,"Ok - tried it out now. executable and shell are working.   However, earlier Ctrlp used to load but not find any buffers. Ctrlp MRU files used to work flawlessly. Now, for some reason, the plugin never seems to load. I don't see anything in :messages as well. I also doubt other plugins are loading since I don't see the Airline status line. I'll check more.  I got an error in runtime/menu.vim, L355  about variable s:name not being defined. fixed it locally. Don't recall that on my Linux box - so wondering why there's a difference in behavior b/w windows and *nix? Of course, this could be wrong but I can test only after I get back.  Update : Plugins aren't loading and set rtp? only returns first 8 plugin paths and then is truncated."
neovim,35li6n,equalsraf,1 point,Wed May 13 03:41:01 2015 UTC,"I'll have a look later, the only thing that  comes to mind is that the directory ~\.nvim changed to ~\_nvim. Can you send me your &rtp value? and :scriptnames"
neovim,35li6n,brain_emesis,1 point,Wed May 13 07:53:16 2015 UTC,"Sure - here they are...   runtimepath=~/.nvim,~\_nvim,~/.nvim/bundle/vim-signature/,~/.nvim/bundle/L9/,~/.nvim/bundle/ctrlp.vim/,~/.nvim/bundle/vim-pandoc/,~/.nvim/bundle/vim-pandoc-syntax/,~/.nvim/bundle/vim-fugitive/,~/.nvim/bundle/vim-repeat/,~/.nvim/bundle/auto-pairs/,~/.nvim/bundle/vim-i  :scriptnames  1: ~\.nvimrc 2: ~\.nvim\.nvimrc 3: C:\Program Files\NEOVIM\share\nvim\filetype.vim 4: C:\Program Files\NEOVIM\share\nvim\menu.vim 5: C:\Program Files\NEOVIM\share\nvim\autoload\paste.vim 6: C:\Program Files\NEOVIM\share\nvim\ftplugin.vim 7: C:\Program Files\NEOVIM\share\nvim\indent.vim 8: C:\Program Files\NEOVIM\share\nvim\syntax\syntax.vim 9: C:\Program Files\NEOVIM\share\nvim\syntax\synload.vim 10: C:\Program Files\NEOVIM\share\nvim\syntax\syncolor.vim 11: C:\Program Files\NEOVIM\share\nvim\ftoff.vim 12: ~\.nvim\bundle\neobundle.vim\autoload\neobundle.vim 13: ~\.nvim\bundle\neobundle.vim\autoload\neobundle\util.vim 14: ~\.nvim\bundle\neobundle.vim\autoload\neobundle\init.vim 15: ~\.nvim\bundle\neobundle.vim\autoload\neobundle\config.vim 16: ~\.nvim\bundle\neobundle.vim\autoload\neobundle\autoload.vim 17: ~\.nvim\bundle\neobundle.vim\autoload\neobundle\parser.vim 18: ~\.nvim\bundle\neobundle.vim\autoload\neobundle\types\git.vim 19: C:\Program Files\NEOVIM\share\nvim\autoload\provider\python.vim 20: C:\Program Files\NEOVIM\share\nvim\autoload\provider\pythonx.vim 21: C:\Program Files\NEOVIM\share\nvim\autoload\provider\python3.vim 22: ~\.nvim\bundle\vim-monokai-refined\colors\Monokai-Refined.vim 23: ~\.nvim\bundle\neobundle.vim\autoload\neobundle\commands.vim 24: ~\.nvim\bundle\neobundle.vim\autoload\neobundle\installer.vim 25: ~/.nvim/bundle/NeoBundle.lock 26: C:\Program Files\NEOVIM\share\nvim\autoload\provider\clipboard.vim"
neovim,35li6n,Tarmen,1 point,Wed May 13 08:40:02 2015 UTC,"one more thing - on exit, .swp files aren't being deleted. This causes nvim to think it crashed an editing session. ON linux, that doesn't happen - so it could very well be an issue with nvim and electron shell interaction issue."
neovim,35li6n,equalsraf,1 point,Wed May 13 10:37:48 2015 UTC,I'm seeing this as well - I think delete() is not working for some reason.
neovim,35li6n,equalsraf,1 point,Wed May 13 11:34:55 2015 UTC,The rtp issue was caused be me :S when trying to fix the path issues. VimL plugins are loading for me again.
neovim,35h1g1,brandonio21,8,Sun May 10 07:26:50 2015 UTC,If you use powerline/airline adding this to your ~/.nvimrc may help:  if ! has('gui_running')     set ttimeoutlen=10     augroup FastEscape         autocmd!         au InsertEnter * set timeoutlen=0         au InsertLeave * set timeoutlen=1000     augroup END endif   If you use tmux add this to your ~/.tmux.conf:  set -sg escape-time 0
neovim,35h1g1,silencer6,3,Sun May 10 08:27:43 2015 UTC,I do indeed use airline! I will go ahead and try this next time I have access to my machine. Will report back.
neovim,35h1g1,masterarms,2,Sun May 10 17:38:11 2015 UTC,"After adding this bit of code to my .nvimrc, I think that the ESC issue is indeed fixed; however, I am not sure if it is just a placebo affect. Thank you!"
neovim,35h1g1,jzelinskie,4,Mon May 11 05:36:28 2015 UTC,Are you using tmux by any chance?
neovim,35h1g1,justinmk,1 point,Sun May 10 08:00:47 2015 UTC,I am not. I am using termite as my terminal emulator.
neovim,35h1g1,jzelinskie,3,Sun May 10 17:37:28 2015 UTC,"There are a number of GitHub issues that are loosely related to this problem. Basically, the library that neovim uses to get input is attempting to parse a sequence of keys after ESC into a unicode character. The only way it can tell you meant ""just ESC"" is a timeout. The only other option is to use ctrl+c to exit insert mode.  It sucks and is basically a deal-breaker for me on neovim until they figure it out. I constantly insert garbage characters instead of leaving insert mode."
neovim,35h1g1,justinmk,2,Mon May 11 01:13:56 2015 UTC,"Did you try set -sg escape-time 0 (if you use tmux) and set ttimeoutlen=10 ? I literally can't reproduce this issue on Terminal.app, though I do see it  on mintty."
neovim,35h1g1,jzelinskie,1 point,Mon May 11 01:45:28 2015 UTC,I use iTerm2 without tmux and have tried all setting all the different timeouts to 0.
neovim,35h1g1,justinmk,2,Mon May 11 01:48:29 2015 UTC,"Try set nottimeout. I didn't realize I had that as well, but it seems to be the key.  And if there's a reason you don't want nottimeout, please say so. It will help us understand the use cases to be considered.  edit: sorry, I meant nottimeout."
neovim,35h1g1,jzelinskie,1 point,Mon May 11 01:49:54 2015 UTC,"I still get it even with nottimeout. You can checkout my (n)vimrc here. I've tried throwing different stuff below the comment block with the current ttimeout stuff. Haven't been able to get it right. Everything works like a charm on classic vim, though."
neovim,35h1g1,justinmk,1 point,Mon May 11 02:26:51 2015 UTC,"Weird. Thanks for trying. I tried on iTerm2 Build 2.9.20150417-nightly and still cannot reproduce.  Assuming that this command:  set timeout? ttimeout? ttimeoutlen? timeoutlen?   returns something like this:    timeout nottimeout   ttimeoutlen=100   timeoutlen=3000   while you are testing, then your vimrc doesn't really matter."
neovim,35h1g1,jzelinskie,1 point,Mon May 11 02:43:55 2015 UTC,"Actually, I think I might have found the issue: if I put set nottimeout in my vimrc and exit vim, then start vim up fresh and run :set ttimeout?, ttimeout is still set, however if I then execute :source % to reload my vimrc, it actually shuts off ttimeout. I guess I need to somehow guarantee what I have runs after my plugins?   ~/.vim ❯❯❯ grep -r 'ttimeout' .  ./bundle/ctrlp.vim/autoload/ctrlp.vim: \ 'report': 9999, 'sc': 0, 'ss': 0, 'siso': 0, 'mfd': 200, 'ttimeout': 0,  ./bundle/vim-airline/doc/airline.txt:  set ttimeoutlen=50  ./bundle/vim-sensible/plugin/sensible.vim:set ttimeout  ./bundle/vim-sensible/plugin/sensible.vim:set ttimeoutlen=100"
neovim,35h1g1,justinmk,1 point,Mon May 11 03:31:26 2015 UTC,"Ok, well some plugin (maybe sensible.vim?) is setting ttimeout. I'm wondering if it would be a good idea to disable that completely in Neovim. So if you :set nottimeout at runtime, does the problem go away?"
neovim,35h1g1,friendly_nz,1 point,Mon May 11 03:39:37 2015 UTC,Yeah I think it's fine now. I just forked sensible to add the following: https://github.com/jzelinskie/vim-sensible/commit/04e88fb130282a9caad1f1c2c1db7b73b8930cec
neovim,35h1g1,i_know_sherman,1 point,Mon May 11 03:53:50 2015 UTC,"Good to know, thanks."
neovim,359d9i,i_know_sherman,3,Fri May 8 04:58:29 2015 UTC,"You can create a file ~/.nvim/nvimrc  Alternatively, you can create an ~/.nvimrc, but I prefer the first solution."
neovim,359d9i,wal0,5,Fri May 8 05:08:24 2015 UTC,"If you already have one, you can also just symlink your vim config:  ln -s ~/.vimrc ~/.nvimrc ln -s ~/.vim ~/.nvim   For Neovim-specific config, use something like:  if has('nvim')   "" ... endif"
neovim,359d9i,Tarmen,1 point,Fri May 8 07:05:40 2015 UTC,You can also source any file in the ~/.nvimrc which I find easier to keep all files under one folder for easy syncing.
neovim,359d9i,MrJNewt,3,Thu May 14 18:23:09 2015 UTC,"As there is a trickle of neovim-specific stuff coming down the pipe, I prefer to create a .nvimrc like this:  source ~/.vim/vimrc  "" Neovim specific stuff here"
neovim,359d9i,libertarianthug,1 point,Fri May 8 15:50:23 2015 UTC,I like this. How can I get the list of new features?
neovim,359d9i,MrJNewt,2,Fri May 8 23:20:06 2015 UTC,https://github.com/neovim/neovim/wiki/Differences-from-vim  The big ones are the RPC API and the terminal emulator.
neovim,359d9i,aharris88,1 point,Sun May 10 03:51:13 2015 UTC,http://www.adamwadeharris.com/how-to-switch-from-vim-to-neovim/  cp -rf ~/.vim ~/.nvim cp ~/.vimrc ~/.nvimrc
neovim,356z1o,cuducos,1 point,Thu May 7 16:56:54 2015 UTC,Is you locale definitely being loaded corrected? Check with the locale command in a terminal.
neovim,356z1o,MrBushido2318,1 point,Thu May 7 20:18:37 2015 UTC,"I guess so:  user@localhost ~ $ locale LANG=en LANGUAGE=en LC_CTYPE=""en_US.UTF-8"" LC_NUMERIC=""en_US.UTF-8"" LC_TIME=""en_US.UTF-8"" LC_COLLATE=""en_US.UTF-8"" LC_MONETARY=""en_US.UTF-8"" LC_MESSAGES=""en_US.UTF-8"" LC_PAPER=""en_US.UTF-8"" LC_NAME=""en_US.UTF-8"" LC_ADDRESS=""en_US.UTF-8"" LC_TELEPHONE=""en_US.UTF-8"" LC_MEASUREMENT=""en_US.UTF-8"" LC_IDENTIFICATION=""en_US.UTF-8"" LC_ALL=en_US.UTF-8"
neovim,356z1o,_spindle,1 point,Fri May 8 11:14:20 2015 UTC,"I'm on arch linux with gnome, and this works fine with the latest neovim from github. What happens when you use Ctrl+v u201c in insert mode?  On another note, it's probably easier to use digraphs in vim, they're much easier to remember:   Ctrl+K ""6 for “. ("" for quotes, 6 for the shape of the quotes) Ctrl+K ""9 for ”   There's no default digraph for the ellipsis, but you can add one with :digraph .. 8230 (you need to use the decimal rep of the unicode number) and then use   Ctrl+K .. for …   For a full list of available digraphs run :digraph, or use :help digraph for a list of the built in digraphs (this way is nicer because you can search in the file for the character you want)."
neovim,356z1o,justinmkw,1 point,Thu May 7 20:37:12 2015 UTC,"Wow! I didn't know about :digraph and it looks amazing. I'm gonna read more about it and try to get used to it. AnywayCtrl+K ""6 and Ctrl+K ""9worked just fine. Many thanks!  However neovim still doesn't working for Shift + Ctrl + U followed by 201c or 201d, ou when pasting some special chars from elsewhere (even after the today's update)…"
neovim,356z1o,justinmkw,2,Fri May 8 11:21:39 2015 UTC,Do you get different results if you :set paste before you input?
neovim,351p0d,freeroute,10,Wed May 6 11:13:05 2015 UTC,"To set highlight search, you do :set hlsearch. To unset it, instead of doing :unset hlsearch, you have to do :nohlsearch.   There is no such thing as :unset. To switch off boolean options, you can use the no prefix: :set nohlsearch. The 'hlsearch' setting controls whether search matches are highlighted at all. :nohlsearch is not a setting--it is a command that temporarily hides the search highlighting until your next search. I agree that it's confusing and not an ideal implementation.   Why on earth does every config file have # as comment, but vim decides to be all hipster and go with "" as comment?   Vim has a long history. Taking an educated guess: when Vim's scripting language was forming, # already had a meaning as in :b#.   Not possible to do Ctrl+P style menu when searching for spellchecking suggestions (you can only use z=).   Yes, the spellchecking UI is not ideal. That being said, since the results are already fuzzy matches based on the misspelled word, wouldn't it be hard to narrow down the list with fuzzy matching?   Almost impossible to format text of vimhelp so that it fits width. <--- apparent not only in vimhelp.   I don't understand. I guess you mean that the help docs are hard-wrapped, and you are trying to view them in a very narrow window?   :colorscheme default does NOT give me default colorscheme.   Hmm.   In help docs, stuff is wrongly capitalized. Example: :help ctrl-w   Agreed, but it's consistent and doesn't pose any practical problem.   You can not remove the bottom line (where modes are shown).   Why is this a problem?   Which of these points are going to be addressed in neovim?   None are planned, as far as I know. There has been some discussion about replacing the built-in spell checking with integration with an external program, which might open up the possibility of a new UI."
neovim,351p0d,___violet___,2,Wed May 6 13:10:21 2015 UTC,"For spell check, vim-lexical provides a nice improvement. I use it with ycm to get popup spelling corrections."
neovim,351p0d,sandwichsaregood,1 point,Wed May 6 15:00:29 2015 UTC,"I don't understand. I guess you mean that the help docs are hard-wrapped, and you are trying to view them in a very narrow window?   The docs currently only take up half the space on my terminal or browser screen, which for me personally is annoying to read.  About the bottom bar: I already have vim-airline installed and the statusline changes color when I'm in different modes. As such, I wanted to maximize my screen real-estate by removing such redundant information.   Since the most bottom bar where is where showmode is present. I tried doing :set noshowmode but that only removed indication of different modes instead of the bar itself.  Ideally I'd like to only 'unhide' the bar when I'm giving vim a command or when some messages appear."
neovim,351p0d,_Ram-Z_,1 point,Thu May 7 03:00:04 2015 UTC,"The docs currently only take up half the space on my terminal or browser screen, which for me personally is annoying to read.   You may try putting the following in ~/.vim/ftplugin/help.vim:  setlocal textwidth=78 wincmd L vertical resize 78 normal ze   It will open help files on the right side and set the width of the window to 78."
neovim,351p0d,viccuad,1 point,Thu May 7 06:31:12 2015 UTC,"Hey that's pretty neat, not exactly the solution but definitely an improvement, thanks!"
neovim,351p0d,_Ram-Z_,1 point,Thu May 7 10:11:02 2015 UTC,Nice. is there a way to do the same with an autocmd for help files?
neovim,351p0d,xelxebar,1 point,Sun May 10 14:07:22 2015 UTC,"Probably, I don't use autocmds for filetype specific options though, ftplugin is the way to go for that. ;)"
neovim,351p0d,emm386,3,Sun May 10 18:28:18 2015 UTC,"A note about vim-style comments.  Vim extends vi which extends ex (which extends ed). In ex the # character references the ""alternate file"". See :help alternate-file. Particularly useful is <Ctrl-R># from insert mode which will paste in the filename of the last buffer you entered.  I highly recommend the Vim Waz Ere tutorial for grokking the basics of ex which is at the heart of vim:  http://dahu.github.io/vim_waz_ere/  Learning this and a bit about vim's history is something I found quite helpful as well as just plain interesting. Doing the same might ameliorate some of your angst for vim's quirkiness."
neovim,351p0d,xelxebar,1 point,Thu May 7 02:53:22 2015 UTC,"To set highlight search, you do :set hlsearch. To unset it, instead of doing :unset hlsearch, you have to do :nohlsearch.    Yeah that is unintuitive at first, but you can overcome it by executing  :cnoremap unset set no   It also seems less unintuitive when you consider that you can toggle and query using set as well:  :set hlsearch! :set hlsearch?    You can not remove the bottom line (where modes are shown).   Because in neovim the GUI has been decoupled from the core, this should be totally up to the implementation of the GUI."
neovim,351p0d,xelxebar,1 point,Wed May 6 13:01:21 2015 UTC,Just wanted to note that CTRL-X_s gives popup spelling suggestions.  Found this out on the #vim irc recently. Very knowledgeable and friendly group over there.
neovim,351p0d,xelxebar,1 point,Thu May 7 02:29:26 2015 UTC,"I somehow can't seem to reproduce that. Typing C-x-s as well as C-x_s on a misspelled word doesn't popup a window. Are you using gvim by any chance? This is my vim version currently: http://kpaste.net/f978fcf?raw  And yes, I frequent that channel too, it's a nice place and I've learned a lot there :)"
neovim,351p0d,fecal_brunch,3,Thu May 7 02:50:58 2015 UTC,"Also, that vim is 3 years old. You might like 7.4."
neovim,34k1xe,mamunabms,3,Fri May 1 20:46:21 2015 UTC,Did you install the neovim python package with pip? pip install neovim
neovim,34k1xe,k3ithk,3,Fri May 1 21:05:32 2015 UTC,He may need to use pip3 for python3 pip3 install neovim
neovim,34k1xe,cHoco-,1 point,Fri May 1 21:12:26 2015 UTC,Yes. System wide.
neovim,34k1xe,jollybobbyroger,1 point,Fri May 1 21:13:35 2015 UTC,Yes. System wide.
neovim,34k1xe,woegjiub,1 point,Fri May 1 21:13:30 2015 UTC,"Not sure if this is helpful, but just in case it is: When I have built software for python 3.4 that was meant to be built with python 2.x (pyqt and kivy), all I remember doing was make sure all build scripts were calling python3 instead of python.    In other words: just go over all the build scripts and ensure that you're compiling with the python3 executable instead of the python2 executable.    EDIT: This includes all dependencies as well.."
neovim,34cdm9,thukjeche,4,Thu Apr 30 00:47:47 2015 UTC,Can you please export TERM=xterm-256color and then run nvim  to check the result?
neovim,34cdm9,mamunabms,3,Thu Apr 30 02:17:30 2015 UTC,"Awesome, that works! But how do I get it to 'stick'? I've tried adding it to my .bashrc but NeoVim returns to just black and white if I close and reopen the terminal"
neovim,34cdm9,mamunabms,3,Thu Apr 30 09:30:56 2015 UTC,Add      export TERM=xterm-256color to ~/.profile  Exit terminal and reopen. Hope this'll work.
neovim,349noo,mamunabms,3,Wed Apr 29 12:11:13 2015 UTC,Could you perhaps shed any light into what this is trying to achieve? The README is a bit bare at the moment...
neovim,349noo,lorenzfx,3,Wed Apr 29 12:57:25 2015 UTC,"NeoComplete also uses lua, which isn't supported yet as a plugin language on neovim."
neovim,349noo,BluddyCurry,5,Wed Apr 29 15:44:16 2015 UTC,"From what I understand, it's a taylor made version of NeoComplete that takes advantage of the new async features of NeoVim (same Neo, different people)… Sounds great XD"
neovim,349noo,sylvain_soliman,7,Wed Apr 29 13:25:33 2015 UTC,"It's tailor-made. Taylor, whoever he is, didn't have anything to do with deoplete."
neovim,349noo,TheBB,1 point,Thu Apr 30 10:32:21 2015 UTC,"Well, if Taylor Swift talks about security, why wouldn't she use vim? :D"
neovim,349noo,yourboyaddi,1 point,Thu May 7 18:16:58 2015 UTC,That twitter account is gold.
neovim,349noo,woegjiub,5,Mon May 18 23:42:21 2015 UTC,"In addition, as neither neocomplete nor YCM work with neovim and python3, it's going to mean python3 devs will finally get to start using nvim."
neovim,349noo,vheon,1 point,Wed Apr 29 13:41:00 2015 UTC,You mean that YCM can't complete python3 code?? I'm working on it right now :P but my time is limited at the moment :(
neovim,349noo,vheon,1 point,Wed Apr 29 13:52:08 2015 UTC,That's great to know. Can you please share your vimrc when you get time. Thanks.
neovim,349noo,woegjiub,3,Wed Apr 29 18:10:45 2015 UTC,"Maybe I didn't explain myself well. I'm not working with YCM in python3. I'm working on solving that problem. I've wrapped jedi which YCM uses to complete python code in a HTTP+JSON API and I'm writing the completer for YCM that talk to that server, so we can spawn a server for python3 and complete code for it just fine :) But as I said my time is limited at the moment..."
neovim,349noo,bohrshaw,1 point,Wed Apr 29 20:06:34 2015 UTC,For python3 I'm using jedi-vim and supertab with neovim. Not that great experience like YCM but it works.
neovim,3447p3,thukjeche,10,Tue Apr 28 04:08:05 2015 UTC,"Help is your friend! :)  :h nvim_terminal_emulator.txt   But to answer your question: <C-\><C-n> leaves terminal mode. Once you leave terminal mode, you can move to other windows. To enter terminal mode again, press any key that would enter insert mode in a normal buffer.  Tip:  tnoremap <esc><esc> <C-\><C-n>   works pretty well for me.  For other Neovim features' documentations:  :h nvim"
neovim,3447p3,CodeBot3000,1 point,Tue Apr 28 04:14:37 2015 UTC,"Perfect, thank you!"
neovim,3447p3,pacunar,1 point,Wed Apr 29 18:45:31 2015 UTC,why are you using <esc><esc> instead just <esc> ?
neovim,3447p3,CodeBot3000,2,Thu Apr 30 01:14:59 2015 UTC,"I switched from using tmux to using Neovim with terminals in window splits. That means that I need the entire keyboard available for my terminal windows to use with other applications. For example, if I open Midnight Commander in a :term window and I need the escape key, a single <esc> would exit terminal mode, instead of escaping whatever I wanted to in Midnight Commander."
neovim,3447p3,vpetro,3,Thu Apr 30 13:52:22 2015 UTC,"In addition to other tips, you can do this to make movement from terminal to other window splits easier:  "" move from the neovim terminal window to somewhere else tnoremap <C-h> <C-\><C-n><C-w>h tnoremap <C-j> <C-\><C-n><C-w>j tnoremap <C-k> <C-\><C-n><C-w>k tnoremap <C-l> <C-\><C-n><C-w>l"
neovim,3447p3,houshuang,1 point,Wed Apr 29 17:09:39 2015 UTC,"That's awesome, thanks!"
neovim,3447p3,radioact1ve,2,Wed Apr 29 18:42:32 2015 UTC,"Is it possible to set terminal mode to automatically enter insert mode when I make the pane active? I love using alt-HJKL to move from terminal to an editor window, but then when I move back I'd like to start issuing a command right away, instead of having to type i to insert."
neovim,3447p3,lordmord319,1 point,Fri May 1 20:25:52 2015 UTC,I've been looking for way to accomplish this as well. Any luck?
neovim,3447p3,Sean1708,1 point,Thu May 21 03:17:13 2015 UTC,If you have found a solution please share it.
neovim,3447p3,war1025,1 point,Sat May 23 17:41:55 2015 UTC,autocmd WinEnter term://* startinsert   should do the job.
neovim,3447p3,FireThestral,1 point,Wed Jun 3 15:31:52 2015 UTC,"I checked out terminal mode over the weekend for the same reason.  After messing with it for an hour or so, I couldn't really see the benefit of it. Maybe more accurately, I wish you could use vim bindings to edit the commands (I know you can set readline to vi mode, but that never seemed to work well for me).  Also there is a bug where it will clip the terminal text to the smallest split it is displayed in, which makes it not very useful since my splits dynamically resize to give the currently focused one more room.  It seems like a really cool idea. It just didn't seem as amazing as the hype..."
neovim,3447p3,i_know_sherman,5,Tue Apr 28 16:45:28 2015 UTC,"Eh, this is v1 of the terminal. I'm stoked that this means things like Slime could be replaced in Vim. Having a side-by-side repl would be great.  I currently use tmux to get something similar. It's okay for now, but I am excited for what may come of it."
neovim,3447p3,ticviking,2,Tue Apr 28 18:01:19 2015 UTC,You might be into my terminal mappings for nvim (mostly stolen from tarruda)  https://github.com/ianks/yadr-alt/blob/master/editors/vim/settings/neovim.vim
neovim,3447p3,war1025,1 point,Tue Apr 28 19:25:00 2015 UTC,"I've actually got my chroot on my chromebook setup to just launch nvim in the terminal as my ""shell"""
neovim,33sqs1,imslavko,3,Sat Apr 25 06:49:24 2015 UTC,"command! -bang Terminal terminal<bang> $SHELL   There is currently no separate setting, but there's discussion about it on the issue tracker."
neovim,33sqs1,___violet___,1 point,Sat Apr 25 11:52:46 2015 UTC,Can you please explain what does this line do? I am not even sure how to tokenize it.
neovim,33sqs1,___violet___,2,Sun Apr 26 05:38:56 2015 UTC,"It defines a new command :Terminal, which launches your preferred shell:   :command! defines a command (the ! overwrites an existing definition instead of producing an error when re-defining). -bang says the new command accepts a !. Terminal is the name of the new command. terminal<bang> $SHELL is what's executed when you invoke the command. It runs :terminal (with bang if supplied) with your $SHELL (fish) specified as the program to run.   You could just as well run :terminal $SHELL or :terminal fish. This is just a shortcut."
neovim,33qagk,613style,4,Fri Apr 24 17:01:08 2015 UTC,"I know that xterm has cursor shape support for vim and nvim, and that urxvt does not have the '|' shape until v9.21.   If you want to go with xterm, i have my .Xresources config on my dotfiles, if you want to look at it.  Edit:  I went with xterm because of this:   https://www.reddit.com/r/linux/comments/1nmmbn/almost_every_terminal_is_slow_seriously/  TL:DR: run for i in {0..9999}; do echo -n ""------$i-""; done , maximize the terminal and scroll. Gnome-terminal hungs up for me. Urxvt and xterm didn't hang up, and xterm has caret support.  With one of the sane terminals listed there,  Vim will scroll and act more snappier."
neovim,33qagk,viccuad,2,Sun Apr 26 14:35:50 2015 UTC,"What is caret support?  Xterm doesn't reflow text when resized... Urxvt doesn't have any font rendering issues (the post is more than one year old), is as fast (if not faster), and reflows text when the window is resized (no lags). It also supports changing cursor shape and is a lot more configurable (+plugins) than Xterm AFAIK...  The only disadvantage I know of Urxvt is that you have to emulate Xterm keycodes for key-combinations involving extended keys (e.g. Meta-PageUp, Meta-F4 etc.) for (n)vim to correctly identify them (see Xdefaults)."
neovim,33qagk,critiqjo,1 point,Mon Apr 27 16:37:24 2015 UTC,"I have always heard caret as interchangeable with cursor, when talking about terminals and so(eg). But yeah, maybe not the best use of that word.   When I looked into it, urxvt had no '|' cursor support, but now, from v9.21, it should have. Maybe I should move myself to urxvt.  edit: also, xterm has true colour support (useful for neovim), urxvt is listed as not having it"
neovim,33qagk,viccuad,1 point,Mon Apr 27 17:29:11 2015 UTC,"True! You can't use all 24-bit colors at once... But you can map any 24-bit color to any of those 256 colors... I'm using a palette called euphrasia, and was satisfied with it..."
neovim,33qagk,critiqjo,1 point,Tue Apr 28 19:12:52 2015 UTC,"Thank you!  I don't know why I didn't just try xterm.  I think I associated it with being archaic, but with the right ~/.Xdefaults it looks good and supports neovim very well."
neovim,33qagk,jessesherlock,2,Mon Apr 27 22:04:24 2015 UTC,"I'm currently using st and it works there.  That's a very minimal terminal emulator, it might not be for everyone. I was using rxvt-unicode previously and cursor shape worked there as well."
neovim,33qagk,gaijin_101,1 point,Sat Apr 25 22:18:58 2015 UTC,"Thanks, I'll give st a shot.  It looks like a cool project and I've never seen it before."
neovim,33qexs,vividboarder,1 point,Fri Apr 24 17:34:15 2015 UTC,"What happens with python in general? Can you start the python interpreter quickly without seeing the issue? What about when importing neovim with python -c ""import neovim"" ?"
neovim,33qexs,hiptobecubic,1 point,Fri Apr 24 21:06:40 2015 UTC,"(kinda late, I know)  I think this is it. Must be something on my system since every so often when I run ipython I get similar hangs."
neovim,33qexs,justinmk,1 point,Mon May 4 21:18:49 2015 UTC,Did you try since https://github.com/neovim/neovim/pull/2208 was merged?  see also https://github.com/neovim/neovim/issues/2437
neovim,33n3za,OriginalSyn,1 point,Thu Apr 23 21:33:28 2015 UTC,Why doesn't DBGPavim work?
neovim,33n3za,justinmk,1 point,Fri Apr 24 01:55:44 2015 UTC,I didn't have time to trouble shoot it. I'll post an error tomorrow when I get in to work
neovim,33h0y4,brain_emesis,2,Wed Apr 22 13:34:23 2015 UTC,"I found this thread in the google group which pointed me here:  https://ci.appveyor.com/project/equalsraf/neovim  Which contains a link to a binary but according to the thread doesn't come with a UI, so isn't all that useful"
neovim,33h0y4,wal0,2,Wed Apr 22 14:41:00 2015 UTC,"You might be able to use the Atom UI; see here for some more information.  Still, Neovim's master branch does not build on Windows at the moment (but this is being worked on). Once it does, I'm sure it'll be announced here ;-)  Some Github issues to follow: https://github.com/neovim/neovim/wiki/FAQ#when-will-windows-be-supported"
neovim,33h0y4,equalsraf,2,Wed Apr 22 16:13:07 2015 UTC,"Thanks, I'll just wait and keep an eye on those issues."
neovim,33h0y4,brennanfee,2,Wed Apr 22 17:25:53 2015 UTC,"FWIW I'm trying to get the neovim-qt GUI to automatically build with Appveyor too https://github.com/equalsraf/neovim-qt/pull/14 - realistically, keep in mind we are still a bit far from a stable Windows build, any help testing is appreciated though.  If you are looking to build Neovim yourself the full instructions are here (MSVC2013). So far I wasnt able to automate the whole process for Mingw/MSYS2 toolchains, but that shouldn't discourage you from trying. We are also discussing how to build in the upcoming MSVC 2015."
neovim,3312tu,critiqjo,1 point,Sat Apr 18 14:05:20 2015 UTC,"The script accepts any vim command (along with arguments) and executes it. Commands for editing and splitting can take multiple files (behavior is documented in the script). Additionally, 'diff' command is provided which takes 2 files."
neovim,3312tu,luizribeiro,1 point,Sat Apr 18 14:11:42 2015 UTC,"This is super cool. I had a similar setup with a script that sends fake key presses to vim, but this is way better. Do you want to create a github repository for this, add a license to it so others can contribute?"
neovim,3312tu,sandwichsaregood,12,Sat Apr 18 14:48:30 2015 UTC,"Thanks... I haven't thought about creating a repo for this... This can't be installed like a vim plugin, right... Hmmm... Ok. If this gets at least 10 upvotes, I will create a repo for it. I don't know much about licences, though. How about CC-BY license? Isn't it enough to just make that whole repo CC-BY licensed -- anyone can modify, partly or fully, and distribute it, right?"
neovim,3312tu,wal0,1 point,Sat Apr 18 16:04:30 2015 UTC,"I think CC licenses are more for artistic content. Something like the MIT license or BSD is probably the closest equivalent. They basically say ""do whatever you want with the code as long as you include a copy of this license and don't hold me responsible if you blow yourself up."""
neovim,32wzyf,tarruda,13,Fri Apr 17 12:30:59 2015 UTC,This is a totally worthy cause. I mean Sublime charges like $50 or something for a license... and it won't even be open source.  EDIT: We are 83% to the finish line already. Let's make it happen!
neovim,32wzyf,i_know_sherman,5,Fri Apr 17 16:03:14 2015 UTC,Wooo! I hope we can support a full-time dev! That would be so awesome. I have been using nvim for the last few weeks and it is unbelievable on what they have achieved already!
neovim,32wzyf,demizer,4,Fri Apr 17 16:10:08 2015 UTC,How much funding is this going to take to get to release?
neovim,32wzyf,aarobc,6,Fri Apr 17 13:58:19 2015 UTC,"It is already usable and quite stable, so you don't need to wait for a release to use it.  With that said, AFAIK, an official release (1.0) would come as soon as neovim is able to build on windows."
neovim,32wzyf,ingvij,3,Fri Apr 17 14:30:59 2015 UTC,I was under the impression someone got it working on windows already ?
neovim,32wzyf,Chaoist,2,Fri Apr 17 14:33:29 2015 UTC,"It compiles, but the terminal UI doesn't work (you would need to use the Atom client or some other GUI). Windows-specific changes have not been merged back into master yet.  Also see https://groups.google.com/forum/#!topic/neovim/s-Y_9XV1sQw."
neovim,32wzyf,wal0,2,Fri Apr 17 21:16:46 2015 UTC,"I'm on NeoVim about 50-50 lately, just chipped in $5 to get things over the finish line.   @tarruda since I assume you're looking at this thread, any chance my $5 this month can go toward you taking a look at this issue: https://github.com/neovim/neovim/issues/2379 ? :)"
neovim,32wzyf,fortes,6,Fri Apr 17 15:28:13 2015 UTC,"Thanks for the contribution, but I'm not sure what I can do to change [shift]+alt+tab behavior, it is never sent to Neovim"
neovim,32wzyf,fortes,1 point,Fri Apr 17 15:47:48 2015 UTC,"Ah, so there's no way to bind <M-S-Tab>? If it's a platform limitation, then so be it. I wasn't sure since <M-Tab> works fine."
neovim,32wzyf,angelic_sedition,3,Fri Apr 17 16:43:49 2015 UTC,"I can't say anything about OSX, but MS windows and X11 window managers use <M-Tab> and <M-S-Tab> to alternate windows, so it's very likely that these keys aren't even delivered to Neovim"
neovim,32wzyf,fortes,2,Fri Apr 17 18:49:05 2015 UTC,"Only some X11 window managers do, and for most that is customizable."
neovim,32wzyf,justinmk,1 point,Fri Apr 17 20:02:05 2015 UTC,"Fwiw, M-Tab works, so something at least gets through. Regardless, looks like I should figure out better bindings."
neovim,32wzyf,fortes,2,Fri Apr 17 19:48:41 2015 UTC,"If you can find any documentation for binding M-S-tab in any editor, that would be helpful. Even better, if you can find a way to bind that sequence in any terminal application on the terminal you are using."
neovim,32wzyf,justinmk,1 point,Sat Apr 18 02:48:28 2015 UTC,"M-tab in NeoVim on OS X in iTerm2 works just fine (inside and outside of Tmux), using the binding from the GH issue I filed (on mobile, can't share link).   The only thing that doesn't work is M-S-Tab"
neovim,32wzyf,pyro2927,1 point,Sat Apr 18 03:50:00 2015 UTC,Neither works for me on iTerm2 nightly. Details in the GH ticket.
neovim,32wzyf,xgo,1 point,Sat Apr 18 04:42:27 2015 UTC,"I like the idea of supporting this project, though I've been trying to answer the ""why not just regular Vim?"" question for myself.  I don't see myself using any features that Vim currently offers.  I've seen a discussion of a server/client type setup, is that something being worked on?  Could I theoretically connect a local neovim client to a remote machine running neovim server and keep my local ~/.vimrc`?  If that's the case I'd take back my previous statement and donate today!"
neovim,32944o,hahiss,7,Sat Apr 11 18:20:03 2015 UTC,augroup terminal   autocmd TermOpen * setlocal nospell augroup END   should work
neovim,32944o,person808,2,Sat Apr 11 18:42:47 2015 UTC,Thanks!  That totally did the trick.
neovim,32944o,Fireblasto,2,Sat Apr 11 20:54:29 2015 UTC,:set spell!       Works as a toggle. Bind it using a leader combo.
neovim,320wp3,kassioborges,1 point,Thu Apr 9 18:10:20 2015 UTC,Can it handle multiple open terma and keep them paired with the buffers they were opened from ?
neovim,320wp3,zamaterian,1 point,Thu Apr 9 18:28:05 2015 UTC,"I don't know if I really get what you mean.  What it does is keep a reference of the last terminal opened, so you can send commands or run tests in it with maps (shortcuts)."
neovim,320wp3,vdm,1 point,Thu Apr 9 19:11:58 2015 UTC,"This is like the classic emacs inferior lisp mode, and nicely rounds out the new neovim terminal feature."
neovim,31vxk1,IatLat,11,Wed Apr 8 16:04:48 2015 UTC,"That is to say, is it theoretically possible to get away with not writing vimscript, or with only writing a minimal amount for the loading of python/lisp/erlang?   No, vimscript is and always will be Neovim main scripting interface.  The way Neovim supports multiple languages is through the remote plugin infrastructure which runs code in other processes, but it still depends on vimscript for certain tasks.  For example, it's not possible to create commands or autocommands in pure python, though the python plugin host has some API wrappers that create this illusion: http://neovim.org/doc/user/remote_plugin.html#remote-plugin-example  Hosts for other languages are free to do the same: hide vimscript code into idioms that feel native to the language a remote plugin is written in, but vimscript is still there under the hoods.  I suppose someone could wrap a lot of vimscript API and create a way to skip even vimrc, but is it really worth the trouble? Sometimes I think the people take the ""vimscript hate"" a bit too far.  Yes, it's a bad for writing large programs, but it is ideal for configuring and interacting with the editor, since it's what it was created for.  Imagine Neovim only scripting language was python, would you really prefer this:  :vim.write_and_quit()   over this:  :wq   ?"
neovim,31vxk1,tarruda,3,Wed Apr 8 16:32:37 2015 UTC,"I'm not looking to ditch :wq or anything, I'd just like my complex programs in cleaner, more powerful languages, and I've found in practice that my configuration counts as a complex program.  If I could export most or all of the functionality to those other languages, I think it would improve maintainability.  I will take a look at those examples, thanks.  I'm a little confused by your answer, though.  It sounds like you're trying to answer ""no"", but then talk about APIs with which to accomplish the task.  Is there some leaky abstraction or something that I should know about?"
neovim,31vxk1,tarruda,2,Wed Apr 8 18:49:35 2015 UTC,"What I meant that the plugin host(process which connects plugins to Neovim) can offer abstractions to reduce the amount of vimscript required. The python host for example, allows you to create commands and autocommands with a simple decorator applied to a function, but under the hoods there's still some vimscript glue code."
neovim,31vxk1,ingvij,1 point,Wed Apr 8 19:54:18 2015 UTC,"No, vimscript is and always will be Neovim main scripting interface.   Even after lua interface? I mean, after the lua translator, wouldn't it be possible to configure directly in lua, bypassing the need of VimL?"
neovim,31vxk1,tarruda,7,Thu Apr 9 12:28:31 2015 UTC,"It is theoretically possible but I doubt this is something you'd want. As I already said in this thread, vimscript is a good command language for the task, and just because it will be possible to use a more robust language it doesn't mean the experience is better.  I already said this in the beginning of the project: The main goal of integrating lua into Neovim is to use it as a runtime for vimscript. The big problem is not vimscript, but how vimscript is implemented.(Which is horrible BTW).  Maybe scripting directly in lua could be useful for writing large plugins with complex logic, but even in this case I recommend writing a remote plugin and enjoying it's advantges:   Write in your preferred language Plugin is more isolated(harder to crash neovim) Plugin can do heavier processing in multiple cores(completion engines, code intel...)"
neovim,31vxk1,ingvij,2,Thu Apr 9 13:00:35 2015 UTC,that makes a lot of sense
neovim,31vxk1,wbsgrepit,-1,Thu Apr 9 14:17:19 2015 UTC,"Lol,  because if python was the core script language things like wq would be the longest and most descriptive names possible of course.   I too would absolutely hate the  :vim.editor_function_write_to_disk_store_and_then_quit_proccess()  syntax that is the obvious choice were python to be the internal scripting language. =)"
neovim,31vxk1,tarruda,4,Wed Apr 8 18:07:19 2015 UTC,"That was just an example, my point is that vimscript is a good user interface for controlling/configuring the editor, and python with it's more strict syntax, not so much. Even if there was a function named wq(), it's still more pleasant to type a vimscript command."
neovim,31vxk1,wbsgrepit,1 point,Wed Apr 8 18:26:10 2015 UTC,"I would think,  no matter if it was python or ruby or javascript that were to become a backing language for neo or vim (and I am not saying this would ever happen), that any of these languages would be exposed with a DSL for config/actions/settings ontop of the language.   There is no need for much of the complexity of any backing language to be exposed except when you want it to be.   It seems like you are assuming a worst case implementation of such a change,  where I believe if such a change were to happen at least some common sense would be used and the outcome would actually be cleaner than the fairly ugly mess that is vimscript.  I don't even think vimscript is THAT ugly,  it has just obviously mutated over many years and much of that is visable in its current state."
neovim,31vxk1,tarruda,5,Wed Apr 8 18:58:37 2015 UTC,"I don't even think vimscript is THAT ugly, it has just obviously mutated over many years and much of that is visable in its current state.   Yes, Vimscript is nothing but a set of commands, some of which implement control flow for more advanced scripting. It's a  DSL/interface that mutated into a programming language, which is bad. The ideal would be a command language backed by a real scripting language that had full access to the editor data structures.  But vimscript haters seem to forget that Vim's rich command interface actually IS vimscript, and is one of the editor best features. Simply replacing vimscript by another language means we lose that.  ZyX-I with his work on the vimscript->lua translator will hopefully bring the best of two the worlds to Neovim. I haven't worked with him or looked into his code yet, but I believe he is exposing the whole Neovim API to Lua, with vimscript being implemented as a translator to lua that calls this API. This means we will get a powerful scripting engine without losing the convenience vimscript brings to the table."
neovim,31vxk1,wbsgrepit,2,Wed Apr 8 20:13:53 2015 UTC,Yes exactly what I was trying to say.   The end result is that plugins can be written completely in lua (whatever) without needing to be constrained in the DSL or janking out to a linked scripting language.
neovim,31vxk1,justinmkw,3,Wed Apr 8 20:54:23 2015 UTC,"any of these languages would be exposed with a DSL for config/actions/settings ontop of the language.    You might be right. But then designing a DSL (for which language? all?) takes time if it's going to turn out better than vimscript. Doesn't seem like a good use of time.   the outcome would actually be cleaner than the fairly ugly mess that is vimscript.    I see this assumption, and drive-by suggestions, often. But I don't see much actual design, detailed specifications, and detailed requirements. People just assume it will sprout out of the earth. Good design takes time."
neovim,31vxk1,wbsgrepit,1 point,Wed Apr 8 19:56:16 2015 UTC,"vimscript is the DSL.  With neo it looks like Lua will be the backing language for vimscript's DSL.  It really does not matter what the backing language that is chosen is,  all that matters is that if it is designed well it will be natively usable for plugins and back vimscript.  This way you get the command language that is core to vim while also having a very expressive/sane/complete scripting language to build complex plugins with without being constrained in vimscript or janking out to a linked scripting language."
neovim,31vxk1,justinmkw,1 point,Wed Apr 8 20:48:27 2015 UTC,"I'm confused then, because that's already the plan."
neovim,31vxk1,wbsgrepit,-1,Wed Apr 8 20:54:31 2015 UTC,"Read the thread,  I was making a sarcastic remark to :vim.write_and_quit() being the DSL if vim or neo were to implement python as the backing script language."
neovim,31r44r,YesSoupForYou,1 point,Tue Apr 7 14:47:08 2015 UTC,Probably your syntax highlighter is doing that... Add this to your .nvimrc  hi Normal ctermbg=NONE   After both syntax on and the inclusion of any syntax highlighting plugin.
neovim,31r44r,zenware,2,Wed Apr 15 08:01:53 2015 UTC,Thank you ill give this a shot
neovim,31r44r,zenware,1 point,Thu Apr 16 16:20:36 2015 UTC,"Hope it goes well, if not would you mind sharing your .nvimrc?"
neovim,31lt4s,Deewiant,5,Mon Apr 6 07:13:37 2015 UTC,Glad to see Neovim.app mentioned. I've been using it ever since it was posted to /r/neovim. More people using it will be useful !
neovim,31lt4s,placidified,4,Mon Apr 6 23:23:38 2015 UTC,"""Neovim chat room"" link points to gitter itself, not the specific neovim chatroom. Can this be changed?"
neovim,31lt4s,jmlucjav,2,Mon Apr 6 10:20:01 2015 UTC,Just updated it! Thanks for pointing it out.
neovim,31lt4s,passingby,1 point,Mon Apr 6 13:13:09 2015 UTC,You can file an issue here.
neovim,31lt4s,wlhlm,2,Mon Apr 6 12:43:36 2015 UTC,"I subscribed to the Neovim newsletter earlier. But this one I haven't received in my mailbox yet? But this is the most extensive Neovim newsletter I have read. Well done, Neovim team!  I hope that the Windows build gets succeeded, can't wait to try it out!"
neovim,31lt4s,ReneFroger,1 point,Mon Apr 6 08:36:33 2015 UTC,"So, python-client has a gtk UI in it? Looking through the code, it looks like maybe it's intended to be started with:  python -m neovim.ui.cli   However this just creates an empty GTK main window and then hangs. Am I doing this right? Anyone know?  edit: I guess I'm supposed to be starting it with pynvim - but I am getting the same behavior. Maybe there is something wrong with my configuration.."
neovim,31lt4s,quasarj,1 point,Mon Apr 6 18:45:06 2015 UTC,aptitude install python-cairo python-gi-cairo
neovim,31lt4s,AXVxT5vgdUYbyROdBREE,1 point,Tue Apr 7 20:23:37 2015 UTC,"I'm on Arch, but it looks like I have the equivalent installed. Still no luck. Thanks, though!"
neovim,31kv13,warm_fuzzy_logic,2,Mon Apr 6 01:20:05 2015 UTC,"Neo can use C-S-Tab even in terminal now as it uses libtermkey,  See this github thread for details.  Vim does not use libtermkey and has not implemented this."
neovim,314vd7,duhdude,3,Thu Apr 2 00:38:26 2015 UTC,"What version is your neovim python module at? I've been having the same problem, and realized that it's been a while since I updated that. A pip install --upgrade neovim brings it up to version 0.32."
neovim,314vd7,DArcMattr,2,Thu Apr 2 03:24:46 2015 UTC,"I talked to some of the guys on the neovim gitter, and they said that it may be causing a deadlock since the function is run synchronously. I was able to solve this by putting the python in a separate file and using jobstart."
neovim,30lxjp,musicmatze,9,Sat Mar 28 16:09:12 2015 UTC,I like the idea but why use vim as a backend ? Just write your firefox/chrome plug in based on Undo Tree. Requiring neovim as a dependency just to integrate one of its plugins and without making use of its editing power seems like overkill.
neovim,30lxjp,gpyh,3,Sun Mar 29 11:19:35 2015 UTC,"browsing history is quite simpler than text editing history, using Neovim and making it into a complex tree seem a bit overkill? Maybe I am unaware of some advanced usage of browser history information. What do you want to do with the browsing history, besides the browsers' default functionality ?"
neovim,30lxjp,allabout001,3,Sun Mar 29 02:19:24 2015 UTC,"browsing history is quite simpler than text editing history   why? In browsing, you also go back and continue into another direction (which would be a branch in UndoTree), so it would fit perfectly for this usecase! In standard browsing history, you can go back and forth. But consider this:   You go to page A You go A->B You go A->B->C You go back to B You go to A->B->B'   with a tree, you could now visually see where you've been and how you got there. I'd find that really interesting to see how I got from one point to another and so on.  Maybe I'm just an unusual user :-)     But nevertheless: Creating vim-like behaviour for browsers and other tools with neovim is possible, of course. But maybe we should not only focus on how to use neovim to make other tools react to vim bindings, but also how to integrate tools via neovim with vim plugins. Would be a pleasure to see what is possible. And I guess there are millions of possibilities most people have not even thought of!"
neovim,30lxjp,allabout001,1 point,Sun Mar 29 07:01:43 2015 UTC,"Why you find the 'UndoTree' style browsing history interesting? Is it useful for site user experience study, SEO tweaking or something?  I agree there are many possibilities people have not even thought of."
neovim,30lxjp,MuonManLaserJab,1 point,Sun Mar 29 08:55:19 2015 UTC,"It would be useful for normal people in the same way 'back' and 'forward' shortcuts are useful. Without a tree, some of this useful knowledge of the history of a browser session will inevitably be lost."
neovim,30lxjp,allabout001,1 point,Mon Jul 20 04:09:28 2015 UTC,"I guess I am still not sure the usefulness of the tree like preservation of history. Anyway, nowadays browsers will pop up past visited sites when you enter a few words in the url field, that might help a little, although not a tree structure."
neovim,30lxjp,MuonManLaserJab,1 point,Mon Jul 20 05:40:07 2015 UTC,"The usefulness is that you don't have to remember the name of the site, you just have to remember that it was where you clicked 'back' from to get to the last page.  Autocomplete obviously doesn't serve exactly the same purpose. Would you be happy using a browser that only had autocomplete instead of also having 'back' and 'forward' buttons and shortcuts?"
neovim,30lxjp,allabout001,1 point,Mon Jul 20 05:43:56 2015 UTC,"well, would you be happy to use a Vim that only had netrw/MRU instead of also having ""ctrl p"" and ""unite"" and "":vim ..."" ? :)"
neovim,30lxjp,MuonManLaserJab,1 point,Mon Jul 20 07:46:08 2015 UTC,"On the other hand, if what you really want is a history manager exactly like UndoTree -- with full Vim movements, including the ones I've already set myself -- this might be the lowest-effort way to get something fully-featured."
neovim,30lxjp,liquiddandruff,1 point,Mon Jul 20 04:07:40 2015 UTC,there's vimium (I love it). not sure how the way history works now is a problem for you though.
neovim,30lxjp,MuonManLaserJab,1 point,Sun Mar 29 05:37:10 2015 UTC,"A normal browser's sequential history (what you can prev/next between) of a visit to a given page will be lost if you go back from that page and then click a different link. If you lose the sequential history of a page, and you want to find that page in your history, you then have to go to your browser's messy full history when all you wanted was to find what you were looking at in this tab ten seconds ago.  With access to a full history tree like UndoTree's, you no longer risk losing that sequential history."
neovim,30kvl3,binkarus,3,Sat Mar 28 06:55:37 2015 UTC,Hmm nice.  A possible improvement is to have the script wait until the file is closed by the host nvim instance. This way you might even use it as your $EDITOR when running :terminal
neovim,30kvl3,tarruda,5,Sat Mar 28 15:41:59 2015 UTC,Here's a modified version: https://gist.github.com/tarruda/37f7a3e22996addf8921
neovim,30kvl3,tarruda,1 point,Sat Mar 28 16:38:11 2015 UTC,"And with that being the default, I suppose you could just run it in background with & and get the behavior of the original. Nice!"
neovim,30kvl3,lahwran_,2,Sun Mar 29 03:14:21 2015 UTC,"This is what I ended up with:   an nvim-inner command to blockingly open a single file, and set the buffer options so the newly opened window will jump back to the terminal when you close it - just like EDITOR normally would a vim command that will open as many files as you want, and dispatches to the parent or to a new vim depending on whether it's nested a vimcd_ command  that will call cd in the parent vim in my bashrc, EDITOR and GITEDITOR set to nvim-inner, and an alias vimcd that calls both bash cd and vimcd_ statusline highlighting in my vimrc and in nvim-inner to indicate whether you're in an instant-close window that nvim-inner opened a tnoremap mapping for <ESC><ESC> that exits terminal mode and jumps to the last line"
neovim,30kvl3,tarruda,1 point,Tue Mar 31 15:54:24 2015 UTC,"Great stuff.  When libvterm supports a way of handling OSC 7 and we add the TermChangeDir event, the vimcd command will be unnecessary."
neovim,30kvl3,lahwran_,1 point,Tue Mar 31 16:03:50 2015 UTC,"I don't want it to be implicit, though. I could have linked up the promptcommand to do it automatically, but I want to be able to cd elsewhere in the terminal without changing vim's directory."
neovim,30kvl3,kopischke,1 point,Tue Mar 31 19:48:52 2015 UTC,"It just checks for the environment variable and sends the appropriate command to neovim using the neovim package (which should probably be installed anyway through pip install neovim).   The only funny thing is that neovim wouldn't leave terminal mode when it opened the new file, so I had to send the escape sequence first, but I couldn't get it to work unless I used <c-v> to insert <c-\><c-n>. So it looks like I'm feeding invisible keys."
neovim,30kvl3,lahwran_,1 point,Sat Mar 28 06:57:58 2015 UTC,Very nice. May I suggest you send a drop command instead of edit so as not to clobber files already open in Neovim?
neovim,30kvl3,lahwran_,1 point,Sat Mar 28 08:38:53 2015 UTC,"Huh, I thought that was the default behaviour of edit, but drop is actually suited for that. Good call!"
neovim,30akdf,rogual,3,Wed Mar 25 20:33:00 2015 UTC,"I'm liking NeoVim so far but I was really missing the comfort of MacVim, so I had a go at a Cocoa UI for NeoVim. Would love to get your impressions if you have a look."
neovim,30akdf,wal0,2,Wed Mar 25 20:35:03 2015 UTC,"Added a link to https://github.com/neovim/neovim/wiki/Related-projects :-)  Also, Neovim is available over Homebrew, maybe that can simplify your installation instructions a bit. You could also use the Neovim formula as template to ship your GUI with Homebrew."
neovim,30akdf,epage,3,Thu Mar 26 21:50:07 2015 UTC,Does anyone know if some of these UIs will be adopted at some point by NeoVim project?
neovim,30akdf,wal0,1 point,Thu Mar 26 19:23:03 2015 UTC,"I don't know, but do you think it would make a difference?"
neovim,30akdf,epage,1 point,Thu Mar 26 21:35:34 2015 UTC,"Sane defaults are useful. If nothing else, it would help someone unfamiliar to the project to know what would a reasonable, maintained, reputable version to run. I'm not talking versions with tons of built in, more experimental features but something that integrates something like the TUI with desktop enviroments, like this project."
neovim,30akdf,justinmk,1 point,Fri Mar 27 03:35:07 2015 UTC,"We'll get around to that sooner or later, but it's low priority for now."
neovim,30akdf,InternetIsWorking,3,Sun Mar 29 22:42:24 2015 UTC,That’s really nice. Give it a name!
neovim,30akdf,wal0,4,Wed Mar 25 23:23:12 2015 UTC,"I dunno, I kinda just want it to be “NeoVim”. Like how, say, Photoshop for Mac has the same name as Photoshop for Windows.  I guess “NeoVim.app” if you're a developer. Actually yeah, neovim-dot-app could work.   I just don't want to increase people's cognitive load with another clever brand-name, you know?"
neovim,30akdf,silent_b,5,Thu Mar 26 13:18:34 2015 UTC,"I know I'm nit-picky, but I can't help it.. :D The official name is ""Neovim"", not ""NeoVim""."
neovim,30akdf,vividboarder,1 point,Thu Mar 26 21:57:27 2015 UTC,Mac-o-vim
neovim,30akdf,binkarus,3,Fri Apr 10 08:48:46 2015 UTC,"This is very cool! I typically work out of Tmux, but this combined with :terminal when merged could change that."
neovim,30akdf,bugeats,1 point,Wed Mar 25 23:41:59 2015 UTC,"I too love to use tmux, but I've been testing the :terminal branch, and I found that I stopped using tmux as much. It's faster for me to just spin up my branch of Neovim.AS and use it since I have multiple windows working. It's weird."
neovim,30akdf,bugeats,2,Sat Mar 28 07:09:38 2015 UTC,"I'm really excited to see this! Now that :terminal support has been merged to master, I'll be ready to use this daily.   I'm curious about something. Compared to MacVim, this project feels slightly more laggy.  Any hint about where the majority of that lag might be coming from? Is it a consequence of the event-based model?"
neovim,30akdf,pacunar,3,Thu Mar 26 02:34:16 2015 UTC,"Hey, so I did some investigation and it turns out the speed problems are due to my redraw code. I couldn't figure out a quick fix so I've opened an issue on the subject: https://github.com/rogual/neovim-osx-gui/issues/5"
neovim,30akdf,garoththorp,1 point,Thu Mar 26 15:58:07 2015 UTC,"Reading that now. Nice work.  Always room for optimization of the client, for sure.   I'm still really curious about the overhead of using msgpack-rpc. Got a rough percentage of what time is spent passing messages?"
neovim,30akdf,Levelpart,2,Thu Mar 26 16:17:57 2015 UTC,"I managed to get the lag down to a reasonable amount (for me — try out the latest master and see what you think)  Your question got me curious though, so I did some timing.  vim_input, called whenever you press a key, typically takes less than 100 microseconds (round-trip), or about one tenth of a millisecond.  vim_get_current_buffer, also called on every keypress, appears to take longer (38 milliseconds) but that is probably because neovim.app doesn't read stuff from vim's output queue while it's drawing.  In any case, looks like the actual msgpack-rpc overhead is next to nothing."
neovim,30akdf,TwilightTwinkie,1 point,Thu Mar 26 20:26:44 2015 UTC,"I suspect it might be — the Cocoa redraw code really doesn't do much work at all — but I'm going to do some profiling to be sure.  Don't worry though, the lag annoys me too. It'll get fixed somehow :)"
neovim,2zzt0a,xandersvk,7,Mon Mar 23 08:57:22 2015 UTC,"The reason this no longer works is because I wanted to decouple UI configuration from the core, and this plugins relies on setting terminfo codes.  Eventually I'd like to re-enable this kind of advanced customization, but for now you have to rely on the NVIM_TUI_ENABLE_CURSOR_SHAPE environment variable as dr_gangly explained."
neovim,2zzt0a,tarruda,1 point,Mon Mar 23 15:16:32 2015 UTC,"Great, this worked well. But I would rather have solid I-Beam without blinking, is there a way to accomplish this?"
neovim,2zzt0a,justinmk,2,Mon Mar 23 20:36:04 2015 UTC,"Not right now. In the future it may be supported by general UI-specific options (without any need for terminal-specific codes). E.g.:  let nvim.ui.default.cursor = { ""width"": 1, ""height"": 10, ""rate"": ... }"
neovim,2zzt0a,weisenzahn,1 point,Tue Mar 24 02:28:37 2015 UTC,"NVIM_TUI_ENABLE_CURSOR_SHAPE   If you're building NeoVim yourself, you can change the source yourself.  Search for the above and then change the escape code (depending on your terminal), should be in src/nvim/tui/tui.c."
neovim,2zzt0a,dr_gangly,3,Mon Mar 30 01:48:42 2015 UTC,"To enable the cursor changing shape, there's now the NVIM_TUI_ENABLE_CURSOR_SHAPE environment variable that you can set in your shell. See this comment."
neovim,2zqiak,danielepolencic,6,Fri Mar 20 20:09:34 2015 UTC,https://github.com/neovim/neovim/pull/2157 addressed some PVS studio items in Neovim.
neovim,2zpad3,dexafree,3,Fri Mar 20 14:26:11 2015 UTC,"If you use clipboard integration prepare for HELL ON EARTH if you are a vim user that goes beyond #y then p or P.   By myself I found that enabling unnamedplus in clipboard destroys the functionality the no-drop register ""0, block copy-pasting, block insert of any kind, and really any block functions except for in line replacement of columns.  They really screwed the pooch with that one and it will be a long time before they can get it working for all OSes. I use linux at home and OSX at work and the current thread on the ""fix"" for this is to make xsel or whatever provider nvim is using ""behave"" according to the way nvim wants it to.   Because for the developers of nvim the mountain of code to get seamless copy/paste in all OSes was seemigly there for no reason.  tl;dr Try removing unnamedplus from your clipboard selections"
neovim,2zpad3,_pi,3,Fri Mar 27 14:14:07 2015 UTC,"I'm not sure of the details, but my understanding is that neovim significantly changed how the clipboard is handled. See the nvim_clipboard.txt file in doc for some detail."
neovim,2zm7s1,iooonik,11,Thu Mar 19 19:20:45 2015 UTC,First-class asynchronous/multithreaded plugin support
neovim,2zm7s1,afmrak,8,Fri Mar 20 02:33:32 2015 UTC,"FWIW, Shougo (author of neocomplete) just said on gitter that he's going to create an asynchronous completion plugin for Neovim."
neovim,2zm7s1,wal0,5,Fri Mar 20 13:51:20 2015 UTC,I trust Shougo to do it. He could call it... NEOCOMPLETE. lol.
neovim,2zm7s1,binkarus,18,Tue Mar 31 08:42:33 2015 UTC,"For me, the potential to embed a full vim instance into a sophisticated and not-necessarily vim-specific UI is very exciting.  Terminal Vim is fine for cross-platform stuff and I use it a fair amount, but I do 99% of my work on a personal OSX machine that is tweaked just the way I like it, and I like the many UI and UX niceties which modern editing platforms afford.  (At the moment, a few of the current MacVim forks are good enough and are what I use for most Vim work, but overall these are still pretty janky.)   This is esp. true for me since I do a lot of prose writing in Vim as well, and it would be such a treat to use Vim's modal interface and plugin structure with, say, a gui editing framework like NValt. This might be a pipe-dream, sure, but hey, at least the potential is there.  For less pie-in-the-sky features, asynchronous execution will be great if it does what I think it will do for compiling and viewing LaTeX documents (I haven't tried neoVim for a while, this may be working now).  And I will also give a ""huzzah"" for having modifier keys, and the builtin terminal."
neovim,2zm7s1,gordiep,8,Thu Mar 19 20:12:17 2015 UTC,Embedding Vim in any number of applications is the dream result... full Vim with plug-ins in Visual Studio...
neovim,2zm7s1,Basie,3,Fri Mar 20 04:36:13 2015 UTC,Even thinks like vim in the text boxes in your browser! It's a bright future indeed!
neovim,2zm7s1,giodamelio,2,Thu Mar 26 19:45:59 2015 UTC,Into IntelliJ. I don't think life could get better than that. Well... maybe if it was also embedded into my notebook.
neovim,2zm7s1,Wizywig,6,Mon Apr 20 17:09:45 2015 UTC,"So many.   Embedding it into VS and IntelliJ, and every other IDE I need to/have to use. Scripting in Lua instead of VimScript for simple things. Scripting in either Guile or Clojure/ClojureScript for bigger things, making Emacs/LightTable almost obsolete, at least in my eyes. Hopefully¹ being able to create custom text objects (for language-specific structural editing such as with sexpr.vim). Being able to use the Alt/Meta key properly for more custom shortcuts. Embedding it on my own apps, everywhere I can.   And probably more that I'm just not thinking of right now.  ¹I have no idea if this is planned, or if I'm mistaken and that's already a feature of Vim, but I've seen a lot of plugins just try to rebind a ton of command combinations in order to implement their own text objects."
neovim,2zm7s1,Slackwise,8,Fri Mar 20 14:14:22 2015 UTC,Hopefully¹ being able to create custom text objects   This is important and definitely planned (by me at least) but will have to wait until other priorities are wrapped up.
neovim,2zm7s1,justinmkw,2,Fri Mar 20 15:39:57 2015 UTC,"This is excellent to hear, and one of those things that should have been in Vim years ago. Thanks!"
neovim,2zm7s1,Slackwise,2,Fri Mar 20 18:05:54 2015 UTC,Seriously. I would love that. Custom text objects are the most underrated thing in vim probably.
neovim,2zm7s1,binkarus,1 point,Tue Mar 31 08:45:04 2015 UTC,Evil can already do such things with ease.
neovim,2zm7s1,tuhdo,2,Thu Apr 9 07:34:56 2015 UTC,"Yes, I'll be looking at evil for ideas when we get around to designing the interface for text objects."
neovim,2zm7s1,justinmkw,1 point,Thu Apr 9 14:46:06 2015 UTC,"Scripting in either Guile or Clojure/ClojureScript for bigger things, making Emacs/LightTable almost obsolete, at least in my eyes.   Emacs Lisp can be JITed someday.   Hopefully¹ being able to create custom text objects (for language-specific structural editing such as with sexpr.vim).  Being able to use the Alt/Meta key properly for more custom shortcuts.   Emacs had this eons ago. Also see Lisp source code formatting. It works even with 10k lines source file.   Embedding it on my own apps, everywhere I can.   Probably embedding in Chrome is good enough?  Until Neovim can debug it plugins by itself, it's still a very long way to become something like Emacs."
neovim,2zm7s1,tuhdo,2,Thu Apr 9 07:34:53 2015 UTC,"Emacs Lisp can be JITed someday.   I'm not that interested in JIT'd Lisps as I am just in better/more modern ones. I'd love to have a true Emacs successor/clone in Clojure, not what Light Table is with its crazy clientside web-based design. Guile-Emacs is a good alternative, and polyglottal Neovim is going to be excellent too.   Emacs had this eons ago.   That's cool. Emacs has a lot of amazing things Vim doesn't, like a sane extension language and much better general extensibility. As a 17+ year Vim user, and only a recent Emacs tinkerer (thanks to Clojure), I keep constantly considering switching to evil-mode. I'm torn between Neovim being a ""good enough"" extensible editor, or Emacs being an excellent extensible editor with a ""text editing"" mode with evil-mode.   Probably embedding in Chrome is good enough?   Not really a good example. NaCl is essentially cheating on embeddability. I can't just replace a WinForm TextBox with an Emacs buffer, can I?   Until Neovim can debug it plugins by itself, it's still a very long way to become something like Emacs.   That'd be pretty cool. Yet another reason evil-mode is enticing.  Ultimately though, I see Neovim as being a polyglottal Emacs successor that has (almost) the best of all worlds.  While I like the idea of using Emacs for everything such as email and web browsing, the reality is it's a poor substitute for dedicated applications. I'd rather see my editor of choice embedded into dedicated apps, rather than trying to implement everything in textual form inside my text editor. That way I reap the benefits of the developers focusing on their core product and features while I use my editor of choice as a plugin, instead of waiting for developers to port features to my editor, or worse: spending time on constantly playing catch-up by coding said features into my editor.  Meaning, I rather have the full features of IntelliJ + Vim versus Emacs + a meager handful of IntelliJ features in an Emacs plugin.  One can argue IntelliJ just combines a series of what would be plugins like VCS support, but that is just one example I'm using to illustrate what I mean. Having Vim inside Chrome would be nice (and I am currently typing this via wasavi), but porting all of Chrome into Emacs would be insane."
neovim,2zm7s1,Slackwise,1 point,Thu Apr 9 13:53:28 2015 UTC,"That is a fairly precise summary of my feelings as well. I want a nimble, focused, reliable text editor that can piggyback on the big boys. That is the Sun Tzu approach to text editors (lots of leverage with little expense), whereas Emacs approach is like North Korea (never give up, just keep farming...).   porting all of Chrome into Emacs would be insane   I'm sure that's on the GNU roadmap ;) Not even joking... (see also: CEDET)"
neovim,2zm7s1,justinmkw,1 point,Thu Apr 9 14:54:25 2015 UTC,"I want a nimble, focused, reliable text editor that can piggyback on the big boys.   If Emacs did everything, perfectly, with all features, it'd be kinda' cool to just live in a full-screen Emacs session. Just a total, editable, unified, OS. But we both know the reality of the situation.   I'm sure that's on the GNU roadmap ;) Not even joking... (see also: CEDET)   I... I'm afraid to look."
neovim,2zm7s1,Slackwise,1 point,Thu Apr 9 20:02:33 2015 UTC,"I want a nimble, focused, reliable text editor    30 years not for nothing. I am using Emacs daily. If you want something like that, I think NeoVim is going in a wrong direction. In stead of its original goal and focus everything on that, it keeps adding craps.   I'm sure that's on the GNU roadmap ;) Not even joking...    It's more like porting Emacs to Chrome. One day you can run Emacs on it through your web browser everywhere and access your Google drive as your home directory.  But yes, I would love to see Emacs one day in a far future grown into a Lisp machine, in either itself or another that resurrects that idea.   (see also: CEDET)   Yet CEDET is a proper way to add support for new languages. See Xtext, and some people in Emacs community complained that they want something like that. Without such a framework, your text editor is just a text editor."
neovim,2zm7s1,tuhdo,1 point,Fri Apr 10 13:50:56 2015 UTC,"The built-in applications have its purpose. For one, it can work in terminal while other applications can work in GUI only. The built-in browser is not meant for Javascript, but for online HTML documents.   I'd rather see my editor of choice embedded into dedicated apps, rather than trying to implement everything in textual form inside my text editor   Isn't Emacs already a dedicated app on its own? It's a programming environment of its own, not just a text editor. An environment meant for writing programs in it. As long as NeoVim stays a text editor, it is always a different thing.   pending time on constantly playing catch-up by coding said features into my editor. Meaning, I rather have the full features of IntelliJ + Vim versus Emacs + a meager handful of IntelliJ features in an Emacs plugin.   Now you have Spacemacs. It is meant for Vim users who want to use Emacs, designed by Vim users and integrated the finest packages in Emacs. You don't have to do anything. Spacemacs vimified not only editing buffers but almost everything else. However, in the next big release, it also supports Emacs thanks to Evil able to fall back into Emacs state in insert mode."
neovim,2zm7s1,tuhdo,1 point,Thu Apr 9 14:57:16 2015 UTC,"but for online HTML documents.   I doubt it could faithfully reproduce all of HTML/CSS rendering even without JavaScript in the mix. The web is a true beast.   It's a programming environment of its own, not just a text editor.   And that's kinda' what I've been tinkering with Emacs as, for Clojure development. Although right now (literally right now), I'm using Light Table and enjoying the lack of required setup for all the plugins. I've also started adding more Clojure plugins to my Vim config: https://github.com/Slackwise/dotfiles/blob/master/vim/vimrc#L55-L57   Now you have Spacemacs. [...]   Wow, I'm reading the documentation right now and it looks really cool! I'm going to have to seriously try this out when I have time. There's a lot to read. They even rebound s like I do in Vim because it's redundant! Hah! This is really gelling with me right now."
neovim,2zm7s1,Slackwise,1 point,Thu Apr 9 20:12:07 2015 UTC,"Glad you like it :)   When it comes to writing and editing Lisp code, imo nothing is close to Emacs at the moment. See this guide for an example. It also has eldoc at the bottom to always show you the function definition. And for Clojure, you have something like CIDER (already integrated in Spacemacs)."
neovim,2zm7s1,tuhdo,1 point,Fri Apr 10 03:00:15 2015 UTC,"See this guide for an example.   Yea, I love ParEdit, but sexp.vim having text objects is a bit more pleasant, IMO.  Structural editing is something that is so simple conceptually, yet so amazing. People complain about parens and s-expressions, but once you discover structural editing, everything else is so primitive and annoying to work with.   (already integrated in Spacemacs)   Yea, I'm planning to spend some time this weekend tinkering with Spacemacs. Thanks for pointing it out to me!"
neovim,2zm7s1,Slackwise,6,Fri Apr 10 13:38:19 2015 UTC,"The fact that :terminal works so well transformed it from a ""nice to have"" feature into a ""hmm, this could open up a lot of possibilities"" thing. It's amazing how much reliability matters for applications that you use everyday. Imagine if tmux was written in elisp and had the same ""mostly works ok"" standard of reliability--would you use it? tmux's reliability makes it a requirement instead of a curiosity.  :terminal and job control could enable composition of ""unixy"" tools inside Neovim, even though those tools didn't give the slightest thought to that use-case."
neovim,2zm7s1,justinmk,4,Fri Mar 20 05:05:30 2015 UTC,":terminal and job control could enable composition of ""unixy"" tools inside Neovim, even though those tools didn't give the slightest thought to that use-case.   And I do have plans to integrate a small vimscript library that makes two-way integration with interactive programs easier than directly parsing job control output. It will implement the same concept used in neovim_gdb.vim but in a generic way that is useful for controlling any interactive program."
neovim,2zm7s1,tarruda,1 point,Fri Mar 20 17:11:31 2015 UTC,"As someone who lives in the terminal, this would be a very powerful feature, something that I've wanted for a long long time. I can  imagine several tools this feature could enable.   The second would be full vim instance embedability as /u/gordiep explained."
neovim,2zm7s1,cli-junkie,1 point,Fri Mar 20 11:42:30 2015 UTC,is :terminal ready yet? I just tried building from source and it's not showing up.
neovim,2zm7s1,Quick_A_Distraction,2,Fri Mar 20 14:46:24 2015 UTC,"It's not merged yet, see issue 2076."
neovim,2zm7s1,justinmkw,1 point,Fri Mar 20 15:37:20 2015 UTC,"I've yet to experience eshell, ansi-term, or any repl not working okay. I haven't been using any of them long (though I have been using them most every day) which might explain why, but I'm curious to know what problems exist.   The only annoyance I've encountered is eshell's lack of a clear command which is being added. So my answer is yes; tmux's lack of functionality, especially when dealing with repls (even with existing vim plugins), is the reason I started using them."
neovim,2zm7s1,angelic_sedition,1 point,Sat Mar 21 06:21:43 2015 UTC,"Working ""okay"" or working perfectly? If you haven't experienced quirks with eshell then you haven't used it much."
neovim,2zm7s1,justinmk,1 point,Sat Mar 21 14:43:43 2015 UTC,"I've used geiser, slime, and a python repl a lot more than an actual eshell, but yes like I already said, I haven't used it that much. That's why I asked hoping to get some examples of it not being reliable since you keep bringing it up without a single example. I'm not trying to argue that it's perfect; I'm genuinely asking because I've never heard it called particularly unreliable before."
neovim,2zm7s1,angelic_sedition,1 point,Sat Mar 21 14:56:31 2015 UTC,"Rather than document the subtle quirks that I experienced, I'm ok with you thinking that I'm spreading FUD about eshell until you experience the quirks yourself.  Try running vim or fzf in eshell or ansi-term."
neovim,2zm7s1,justinmk,1 point,Sat Mar 21 15:02:06 2015 UTC,"fzf works perfectly in ansi-term. I guess you tried it in Spacemacs with multi-term (even though the command is named ansi-term or term). It is buggy. Tried with stock ansi-term in Emacs and use the fzf, then you will realize that the terminal in Neovim is nothing new.  As for REPL, Emacs properly integrates it and not only wokring ok, but work great. Have you actually used any integrated REPL in Emacs to make such false claim?  Also, have you used GDB in Emacs? I can even debug remotely with it."
neovim,2zm7s1,tuhdo,1 point,Thu Apr 9 07:37:56 2015 UTC,"It's not a false claim, and I'm not using spacemacs.   GNU Emacs 24.3.1 (x86_64-apple-darwin12.4.0, NS apple-appkit-1187.39"
neovim,2zm7s1,justinmk,1 point,Fri Apr 10 03:28:53 2015 UTC,"Too bad, you should upgrade to Emacs 24.4 an use emacs-mac-port since the Emacs For MacOS X is having some problem with crashing. Or the up coming Emacs 24.5 release. And I already showed you a screenshot I ran fzf fine. Probably you should try with Bash? Otherwise probably some weird issue with OS X."
neovim,2zm7s1,tuhdo,1 point,Fri Apr 10 03:39:51 2015 UTC,"Eshell is not a terminal emulator, it's a shell (like bash, not like tmux). It's quirky because it runs in Emacs, so it integrates with anything running in Emacs but some things work differently than bash+terminal; for instance, it can't redirect stdin. It's not really fair to compare it to a terminal emulator, it's more like vimshell maybe?"
neovim,2zm7s1,incongruousamoeba,5,Fri Apr 17 03:49:27 2015 UTC,+1 for terminal emulation
neovim,2zm7s1,zoranz,2,Thu Mar 19 20:32:24 2015 UTC,sorry for not being so fancy but the clipboard and truecolor features are the ones that probably make me most happy
neovim,2zm7s1,pacunar,1 point,Tue Mar 24 02:58:18 2015 UTC,"full lua scripting  I want an editor like emacs that's not as slow as emacs. elisp is sloooow. I'm tired of hearing that emacs is going to eventually get guile support, its been this way for years."
neovim,2zm7s1,nan0A,2,Fri Mar 20 18:15:05 2015 UTC,"Yep, I agree. Speed matters. Google figured this out 15 years ago, but emacs people do backflips to rationalize it away. I'm excited about guilemacs, but it won't be happen for at least 5 years, probably closer to 10. The problem as always is backwards compat issues with plugins.  By that time, nvim will be embedded everywhere."
neovim,2zm7s1,justinmkw,1 point,Fri Mar 20 22:36:23 2015 UTC,"By that time, nvim will be embedded everywhere.   Is that an optimistic or confident vision? Could the integration be less fluent?"
neovim,2zm7s1,bohrshaw,1 point,Sat Mar 21 09:01:42 2015 UTC,"I'm curious. What is slow in Emacs? I can narrow 100k files with Helm fine. Open a 39MB C file with syntax highlighting fine. Without highlighting, I can open a GB text file. I can jump anywhere in Linux kernel source tree using GNU Global integrated with Emacs fine, in an instant. What's so slow, again?"
neovim,2zm7s1,tuhdo,1 point,Thu Apr 9 06:16:17 2015 UTC,"On Windows it's just as easy to customize/create plugins as on  Linux/Unix.  Less frustration such as ""sorry, this plugin is not available on Windows"".  Or is it a Windows-induced issue, even Neovim can't do much about it?"
neovim,2zm7s1,allabout001,1 point,Sat Mar 21 12:24:11 2015 UTC,"True meta and alt support. I love my Alt mappings, and mapping dead keys was annoying."
neovim,2zm7s1,binkarus,0,Tue Mar 31 08:46:12 2015 UTC,Make it work on windows ffs.
neovim,2z538d,phubaba,3,Sun Mar 15 17:38:12 2015 UTC,"I was having a similar issue, but setting set backspace=indent,eol,start  in my .vimrc/.nvimrc seems to have fixed it."
neovim,2z538d,funksta,3,Mon Mar 16 19:50:58 2015 UTC,I agree that this sounds like an issue. I believe it has to do with the backspace option.  :help 'backspace'   might give you more info on what's going wrong here.
neovim,2z538d,vrj,2,Sun Mar 15 18:00:16 2015 UTC,"ineed it looks like  set backspace=indent,eol,start  works, I've seen this set in a few other people's nvimrc's"
neovim,2z538d,ghillisuit95,1 point,Tue Mar 17 00:13:01 2015 UTC,"File am issue on github, if you haven't already"
neovim,2wy9e8,tipu,1 point,Tue Feb 24 03:45:07 2015 UTC,"Possibly related to this bug, or one of the ones mentioned in the thread? Specifically, the nvim colors look a lot like the ones in this comment.  It's possible the system updates changed your $TERM variable, which seems to be at the heart of the bug."
neovim,2wy9e8,Falcorian,3,Tue Feb 24 05:26:14 2015 UTC,"you are correct,  XTERM=xterm-256color   fixes it."
neovim,2wrgy6,zedDB,4,Sun Feb 22 14:50:50 2015 UTC,"https://floobits.com/help/plugins/nvim already has collaborative editing. There might be some bugs until things settle down, though.   Would it be possible to have the neovim ""server"" running and then connect to it with multiple clients? Each client will have it's own cursor and can navigate around and edit files.   You can do this right now, already.   If this is implemented perhaps something like this would also be really easy to do in neovim: https://github.com/terryma/vim-multiple-cursors   Multiple cursors is different than one cursor mirrored to multiple clients. Currently the story there is not any different than Vim, we would need to change the massive assumptions being made throughout the n/vim core about the cursor."
neovim,2wrgy6,justinmk,1 point,Sun Feb 22 17:01:41 2015 UTC,"Does floobits have multiple cursors like this?: https://camo.githubusercontent.com/103f29a87d8a6b4d5e04e94736bdc2f998561c5f/687474703a2f2f692e696d6775722e636f6d2f435a654b6b41492e676966  The examples from the floobits webpage only seems to show one cursor at a time. So if that is a feature, then it's not shown and I've missed it.  I'm sorry if I missed something obvious, but how does one connect multiple clients to the local neovim server?  If multiple cursors isn't possible, then the current way of connecting to the neovim server is not what I'm looking for. As I said, each client should have it's own cursor. That means that each client can have a different buffer open and edit those. But if two (or more) clients have the same buffer open, then the cursor position will still be separate for each one of the clients. So no cursor position syncing.  Perhaps I'm misunderstanding things. If the above is currently possible. Then why couldn't the multiple cursors plugin be mimicked by having several ""fake"" clients connect and edit text at the desired locations?"
neovim,2wrgy6,justinmk,1 point,Sun Feb 22 18:17:21 2015 UTC,"Does floobits have multiple cursors like this?   I'm not sure, but I think so. Personally I am totally bored by collaborative editing, so I've never tried it. It's not too hard to try it out (though I can't be bothered myself)..."
neovim,2w7a4g,VanLaser,6,Tue Feb 17 15:55:21 2015 UTC,"The problem is that the core improves slowly and is hard to write in (since it's written in C), while plugins use dynamic languages and can therefore improve very fast. Just after you implement Unite, someone will come up with a better idea, and the code in the core will be obsolete.  If anything, I think as much as possible should move to dynamic languages, similar to the way emacs does it. Minimize the C core and move any functionality that doesn't require pure speed to Lua or other plugins."
neovim,2w7a4g,BluddyCurry,1 point,Tue Feb 17 22:16:59 2015 UTC,"You can only do that when you editor is an actual (big) interpreter. That is, instead of a minimal command line REPL, your editor is the REPL. Emacs C core is actually not an editor, but a Lisp interpreter implementation written in C and other low level primitives for I/O and GUI and for managing processes, along with few other fast native text processing functions. The majority of features are written in Emacs Lisp, even for file-related operations. Since code is interpreted and could be slow, Emacs has its own byte compiler.  It's perfectly possible to include the OP's feature in Neovim, but in the form of standard utilities that come with Neovim written in its dynamic language of choice. The core does not need to be C; it can also be other utilities written in its own language. Emacs has its C core and Emacs Lisp core; not just C.  The problem is, whether Neovim would go that direction and become a shadow of Emacs."
neovim,2w7a4g,tuhdo,2,Wed Feb 18 10:06:23 2015 UTC,"I don't think that, if Neovim would have an embedded LuaJIT interpreter/byte-compiler, it would become a 'shadow of Emacs'. That's quite an under-the-belt statement :P  Design decisions, the 'nature' of the different language used, plugin authors personality, the fact that emacs is already there, to avoid some of its historical flaws (if any), all count against copying emacs.  Also, don't forget that even when you try to copy someone by truly understanding it (Plotin -> Platon), interpretation makes in the end the result, surprisingly, different."
neovim,2w7a4g,justinmk,6,Wed Feb 18 10:27:38 2015 UTC,"The hard part is designing the requirements and specification. That would be a welcome contribution. See also: https://github.com/neovim/neovim/issues/660  Definitely agree about key bindings, conventions, etc. Conventions are really important, probably the most important asset of vim and emacs. Conventions allow users to intuit how different concepts can be composed, and it allows plugin authors to add value without creating yet another walled garden. Helm and unite are walled gardens but it's forgivable in that case. On the other hand, tpope has demonstrated how to take advantage of existing conventions and powerful it is. E.g., fugitive makes intense use of git conventions (range specs) and vim conventions. While magit is very nice, it pretty much discards git conventions."
neovim,2w7a4g,alols,5,Wed Feb 18 04:44:15 2015 UTC,I think a more generic and improved quickfix-list would do.
neovim,2w5nt1,fmoralesc,4,Tue Feb 17 04:01:05 2015 UTC,Can you elaborate?
neovim,2w5nt1,akkartik,5,Tue Feb 17 04:30:42 2015 UTC,"Sure ;) The legacy TUI was replaced by a new one written on top of libunibilum and libtermkey, which allows for a cleaner input model and better terminal support, fixing some issues with nvim in the terminal. This is a mayor refactor, but very beneficial overall. It will surely introduce some changes that need to be tested, so this was mostly a heads up for people to do so."
neovim,2w5nt1,akkartik,3,Tue Feb 17 04:52:15 2015 UTC,"I'm still lost :) By TUI do you mean the terminal version of neovim, ncurses support, etc? Can you point me at how the new input model is cleaner than the old one, so that I can tell what you mean by 'input model'? Thanks."
neovim,2w5nt1,iooonik,9,Tue Feb 17 05:11:23 2015 UTC,"Yes, I meant the terminal version of nvim. It uses libtermkey, as I said, instead of ncurses. It should now be able to handle more cleanly all sorts of keypresses, like modifiers (Shift, Control, etc) and function keys (not entirely, in my testing), making nvim more similar to gvim's behavior (it's still not the same). AFAICT it now implements this scheme.   Also, some display errors should be fixed with this."
neovim,2w5nt1,iooonik,1 point,Tue Feb 17 05:23:46 2015 UTC,Will ALT keys ever be supported in Terminal now?
neovim,2w5nt1,Tranquilllity,2,Fri Feb 20 04:29:15 2015 UTC,"Do you mean, like in  nmap <A-i> :echom ""test""<cr> ""?   If so, it works."
neovim,2w5nt1,justinmk,2,Fri Feb 20 05:08:47 2015 UTC,That is huge. I've always been a terminal vim user and not having ALT pained me to no end. I'm very impressed.
neovim,2w5nt1,robertmeta,2,Fri Feb 20 18:02:59 2015 UTC,Some ctrl-shift combinations are now possible like for example ctrl-shift-enter.
neovim,2w5nt1,spin-t,1 point,Tue Feb 17 16:50:48 2015 UTC,"Yes, but it should be possible more easily now. The issue is backwards compatibility if I remember correctly."
neovim,2w5nt1,Pugolicious2244,4,Tue Feb 17 18:06:45 2015 UTC,"By TUI do you mean the terminal version of neovim, ncurses support, etc?    Yes, TUI is analogy with GUI. But ncurses is nowhere to be found, it is not a dependency at all. Terminfo/termcap is almost gone as well.   Can you point me at how the new input model is cleaner than the old one   It is cleaner because the nvim terminal UI is now essentially a UI client, like any other nvim GUI or nvim script host. It just so happens to be ""built in"", but it still uses the same API that is available to the GUI clients."
neovim,2w5nt1,Pugolicious2244,3,Tue Feb 17 17:23:28 2015 UTC,Woah!  Libtermkey landed!  This is a major reason to switch to NeoVim IMHO.
neovim,2w5nt1,DArcMattr,2,Tue Feb 17 06:55:51 2015 UTC,"Are keypresses like <C-i> and <TAB> expected to be distinct for neovim now? Because each takes the mapping of the other, as usual, on my newly built neovim on OS X with iTerm2."
neovim,2vjwn2,Erakko,7,Wed Feb 11 17:08:24 2015 UTC,Hoorray for the Neovim team!  But I couldn't find any confirmations of this in the Github thread?
neovim,2vjwn2,ReneFroger,1 point,Wed Feb 11 19:31:00 2015 UTC,I am really happy about this! After a year of work it finally compiles!
neovim,2vjwn2,justinmk,1 point,Wed Feb 11 17:08:57 2015 UTC,"Well, it has compiled on Windows since around August. But the fact that it runs and displays even a single character on Windows, is unexpected..."
neovim,2vjwn2,rraghur,1 point,Fri Feb 13 03:36:48 2015 UTC,"+1000 me too. I've been compiling the Linux version for my personal machines and VMs, but have windows on my primary work machine. Been checking the ticket like once a week for good knows how long"
neovim,2vjwn2,VanLaser,1 point,Thu Feb 12 01:29:03 2015 UTC,I'm new to this; a question - wouldn't be easier to build with mingw-w64 gcc instead of msvc in something like msys2? It should be closer to the linux build.
neovim,2vjwn2,equalsraf,3,Tue Feb 17 21:16:48 2015 UTC,"It does build with mingw64. But building some dependencies natively with mingw is trickier (e.g. they usually want autoconf, or other Unix tools). Cross compile from linux to ming64 works fine, in fact Travis does that for PR#810  Msys2 is probably the best way to build natively with Mingw, but the third-party CMakelists.txt needs to be updated for that to work. It might not be too hard to accomplish, but it would be best to refactor the CMakelists first, it is turning into a mess because the multiple platforms."
neovim,2vjwn2,justinmk,2,Fri Feb 20 13:50:48 2015 UTC,"Sure, but libuv builds nicely in msvc (not so much in msys, last I checked). mingw also tends to be slower (compare haroogan's Vim build vs kaoriya).  Anyways, there is effort on both accounts."
neovim,2uv1x6,frigge,9,Thu Feb 5 11:31:44 2015 UTC,They're opening a pull request for each newsletter on the neovim homepage repository. You can find the current one here.  Seems like they're all quite busy at the moment. I'd guess when Thiago de Arruda has finished his current pull request there is quite a bit of material for another newsletter.
neovim,2uv1x6,passingby,7,Thu Feb 5 14:36:18 2015 UTC,My official reason: https://github.com/neovim/neovim.github.io/pull/82#issuecomment-72993848  I hope to do it in the next few weeks.
neovim,2uv1x6,passingby,6,Fri Feb 6 02:13:29 2015 UTC,"As a side note, people can always help me with it =]  I just had the idea one day and thought it'd be good for the project, anyone is welcome."
neovim,2uv1x6,parnmatt,4,Fri Feb 6 16:48:39 2015 UTC,"Indeed, I was wondering this the other day. I really look forward to reading them, and it's been a little disappointing not get have the update."
neovim,2uv1x6,iooonik,1 point,Thu Feb 5 14:12:32 2015 UTC,"On the plus side, the next one will be really good."
neovim,2ucxfc,DArcMattr,3,Sun Feb 1 00:32:56 2015 UTC,Cheers. I hope you don't mind I've started an issue request in neovim.
neovim,2ucxfc,equalsraf,2,Sun Feb 1 21:31:18 2015 UTC,"I had been compiling my own install of vim on my machines to have a consistent installed version, and was using a separate install of the runtime files. Hence my running with $VIMRUNTIME defined outside of vim. I found this was interfering with NeoVim with the same .vimrc in use between Vim & NeoVim, giving me the following error messages:  UltiSnips requires py >= 2.6 or any py3 Error detected while processing /home/darc/.vim/bundle/vim-phpunitqf/plugin/vim-phpunitqf.vim: line   30: E117: Unknown function: provider#python#Call YouCompleteMe unavailable: requires Vim compiled with Python 2.x support Press ENTER or type command to continue   I made sure that pip installed the neovim package in my system path, and that everything else was in place, but this error was what blocked me from switching entirely to NeoVim."
neovim,2u6peg,pvinis,20,Fri Jan 30 10:36:37 2015 UTC,https://github.com/junegunn/vim-plug
neovim,2u6peg,ingvij,3,Fri Jan 30 13:53:55 2015 UTC,"Vundle works great, that is what I use"
neovim,2u6peg,whiskerbiskit,1 point,Fri Jan 30 16:26:38 2015 UTC,"+1 for Vundle, though I did have to change runtimepath to .nvim instead of .vim when copying over..."
neovim,2u6peg,mikepjb,2,Sun Mar 8 14:47:04 2015 UTC,"Did you install them in .nvim or .vim?  I'm using plug, anyway."
neovim,2u6peg,Lanzani,-1,Fri Jan 30 15:04:00 2015 UTC,neovim uses both paths
neovim,2u6peg,FDinoff,5,Fri Jan 30 20:07:01 2015 UTC,AFAIK it only uses .nvim. However a large number of people symlink .vim to .nvim.
neovim,2u6peg,FDinoff,-1,Fri Jan 30 21:28:01 2015 UTC,Then how the hell all my plugins work when I only slimlink my vimrc?
neovim,2u6peg,wal0,1 point,Fri Jan 30 21:28:52 2015 UTC,I don't know. Are you sure you don't have a .nvim. The only way it would look in vim is if the runtimepath variable somehow got ~/.vim in it. Which might have been added from your vimrc. It is not looked at normally. If you are manually sourcing stuff in ~/.vim one of the plugin managers might be adding the appropriate stuff to the runtimepath.
neovim,2u6peg,chasevasic,3,Fri Jan 30 21:45:39 2015 UTC,I found it. I think this is it:  set rtp+=~/.vim/bundle/neobundle.vim/   I think this is  what i making my nvimrc symlink use .vim.
neovim,2u6oqy,pvinis,12,Fri Jan 30 10:25:51 2015 UTC,"I'm not sure what the question is, but I just symlinked .nvimrc to .vimrc and wrapped Neovim-specific stuff in if has('nvim')."
neovim,2u6oqy,wal0,2,Fri Jan 30 16:50:16 2015 UTC,"Just nvim and .nvimrc here, I'm all in. I keep my old .vimrc around just in case, but the only place it is used is in Windows."
neovim,2u6oqy,equalsraf,1 point,Fri Jan 30 19:42:16 2015 UTC,"I save a copy of both in a private bitbucket repo, depending on what system I am using."
neovim,2u6oqy,whiskerbiskit,1 point,Fri Jan 30 15:50:13 2015 UTC,I use a nvimrc that sources my regular vimrc. That way I can get my normal vim setup plus I can add some neovim specific stuff.
neovim,2tyvi9,cuducos,3,Wed Jan 28 15:14:21 2015 UTC,Try executing :UpdateRemotePlugins (also re-execute this if you decide to uninstall Floobits).
neovim,2tyvi9,wal0,1 point,Wed Jan 28 16:47:30 2015 UTC,"Many thanks /u/wal0 ! Does it make sense to execute it twice? I've already executed it after installing, reboot neovim and… nothing. As you reinforced it, I did it once more and… yay. Anyway – now  it's working! Many thanks!"
neovim,2tyvi9,passingby,3,Wed Jan 28 17:40:02 2015 UTC,"Also, if you have any more problems, Bjorn Tipling and Geoff Greer are pretty responsive."
neovim,2truqj,thatmiddleway,3,Mon Jan 26 22:48:35 2015 UTC,I've just read up on that (to use neocomplete) - the lua transpiler isn't ready yet and so is the lua interface. We'll have to wait.
neovim,2truqj,nath_schwarz,1 point,Mon Jan 26 23:21:37 2015 UTC,Where did you see that?
neovim,2truqj,nath_schwarz,2,Tue Jan 27 03:43:28 2015 UTC,https://github.com/neovim/neovim/issues/1512
neovim,2truqj,Categoria,2,Tue Jan 27 03:46:57 2015 UTC,"You can make lua plugins using the msgpack I believe. Although the client library isn't as ready as the python one yet. Nevertheless, everything that can be done in python should be possible in lua.  As other have mentioned the transpiler isn't ready yet and I haven't seen much progress in it lately either."
neovim,2tjup5,bruno-,1 point,Sat Jan 24 21:40:23 2015 UTC,What does this do that K doesn't?
neovim,2tbn15,Wizywig,3,Thu Jan 22 20:09:38 2015 UTC,"It will be possible after:   https://github.com/neovim/neovim/pull/1820 is merged and you configure your terminal (iterm2, xterm, pangoterm): https://github.com/neovim/neovim/issues/176#issuecomment-37070131 and we may need to add in some #defines that were removed with the Vim legacy GUI code we may even define new keymaps, e.g. <LC-U> could be ""left-control-key, U"""
neovim,2tbn15,justinmk,1 point,Fri Jan 23 04:00:32 2015 UTC,Oh merge merge merge!!!!! :)
neovim,2tbn15,SmileyK,1 point,Fri Jan 23 16:08:18 2015 UTC,Could your terminal be catching this key combo? (iTerm or Terminal.app)
neovim,2sq1dz,woberto,6,Sat Jan 17 10:06:44 2015 UTC,"Neovim's python client has a proof-of-concept UI that works in the terminal (pynvim) or as a GTK GUI (pynvim -g). So Neovim's core should be ready for GUIs.  Also see the list of related projects on the Neovim wiki, which includes links to GUIs."
neovim,2sq1dz,wal0,3,Sat Jan 17 12:35:36 2015 UTC,Cheers for the info. I will investigate further. Just wanted to make sure I wasn't missing something significant.
neovim,2sq1dz,bugeats,5,Sun Jan 18 20:19:07 2015 UTC,"My whole flow has been based around MacVim for years. I wanted to at least start supporting Neovim with my attention and I've since started using it with iTerm + tmux.   Honestly, I think I still prefer the GUI.  Screen redraws in a terminal just look clunky and glitchy.  Neovim GUIs can't come soon enough. It seems that it hasn't yet caught the attention of software designers.  If it had, I would expect a bit more experimentation. There's a lot of new potential opened up."
neovim,2sq1dz,equalsraf,2,Mon Jan 26 17:16:43 2015 UTC,"The tb-remote-ui branch in neovim-qt  has a working gui. There are some issues around the initial redrawing and resizing,  but otherwise it is starting to shape up into something usable."
neovim,2sq1dz,equalsraf,1 point,Sun Jan 25 00:17:34 2015 UTC,Thanks for the heads up. I'd be tempted to try that. I'll let you know if I do.
neovim,2sq1dz,wal0,0,Sun Jan 25 09:19:53 2015 UTC,"Hi, so I tried this and got the following error after running make after the cmake .. in build:  $ make Scanning dependencies of target neovim-qt_automoc [  3%] Automoc for target neovim-qt Generating moc_neovimconnector.cpp Generating moc_neovim.cpp Generating moc_neovimrequest.cpp [  3%] Built target neovim-qt_automoc Scanning dependencies of target neovim-qt [  7%] Building CXX object src/CMakeFiles/neovim-qt.dir/util.cpp.o /home/mike/root/projects/neovim-qt/src/util.cpp: In function ‘QByteArray NeovimQt::toByteArray(const msgpack_object&)’: /home/mike/root/projects/neovim-qt/src/util.cpp:71:19: error: ‘MSGPACK_OBJECT_BIN’ was not declared in this scope   if ( obj.type != MSGPACK_OBJECT_BIN ) {                    ^ compilation terminated due to -Wfatal-errors. make[2]: *** [src/CMakeFiles/neovim-qt.dir/util.cpp.o] Error 1 make[1]: *** [src/CMakeFiles/neovim-qt.dir/all] Error 2 make: *** [all] Error 2   I imagine there are some subtleties in the version of msgpack that I have or something but I wanted to report it in case it was worth covering in the docs. Happy to file a Github issue if you'd prefer."
neovim,2sq1dz,giodamelio,1 point,Sat Jan 31 21:22:23 2015 UTC,"Where did you get msgpack from? Based on the error I'd say it is too old. I've started an issue  You can try using the msgpack version included with Neovim, .e.g.   cmake -DMSGPACK_INCLUDE_DIR=../../neovim/.deps/usr/include/ -DMSGPACK_LIBRARY=../../neovim/.deps/usr/lib/libmsgpack.a"
neovim,2sq1dz,wal0,2,Sun Feb 1 21:40:15 2015 UTC,"There is now a new GUI based on Atom Shell. Note that this is different from the Neovim mode for Atom, which is an Atom editor plugin."
neovim,2sq1dz,giodamelio,1 point,Mon Feb 16 18:59:15 2015 UTC,"I don't think there are any GUIs really. There was that hack with atom, but I haven't heard anything since. There is some discussion in issue #1639, and more in the issue where the first release is being organized  (#1625). From what I gather, work on the GUI should start relatively soon(after some decisions about what GUI library will be used), but it will probably be awhile until anything usable it done."
neovim,2sq1dz,metalelf0,5,Sat Jan 17 11:08:45 2015 UTC,"FYI, the Neovim mode for Atom should now work with Neovim's master branch (although the instructions in its readme have not yet been updated). There's also a new demo video."
neovim,2snl8o,danielepolencic,11,Fri Jan 16 18:53:03 2015 UTC,"I love it. In the comments right below:   While I like the idea behind NeoVim, I don't really think you can dismiss vim script while choosing a language like lua as a replacement. You could have gone for something more... popular like python (via boost or something else) .   https://github.com/neovim/neovim/wiki/FAQ  http://blog.datamules.com/blog/2012/01/30/why-lua/  Honestly it's like people don't even try, especially in this community. You're immediately met with negativity just because it's different. And it is discouraging, especially when it's clear you want to contribute to the community. Good on you for making this post, and saying what many others are thinking."
neovim,2snl8o,p0tent1al,9,Fri Jan 16 19:31:47 2015 UTC,I feel like NeoVim is the kind of project that could make lua more popular. Maybe.
neovim,2snl8o,atimholt,6,Fri Jan 16 19:55:33 2015 UTC,"It's very popular as an embedded language for games/game engines. Plus, for Linux users, the Awesome window manager."
neovim,2snl8o,humbled,6,Fri Jan 16 21:17:59 2015 UTC,Ya. Use in NeoVim would be more like another hook into the general consciousness. Plus I figure that’s a different set of users from who’d be introduced to it as the scripting language for a popular text editor.
neovim,2snl8o,atimholt,4,Fri Jan 16 21:21:44 2015 UTC,"On the other hand you have people fapping about UI integrations when neovim still hasn't figured out copy/paste and python 3 support. Because who doesn't like breaking changes for the hell of it?  Also the point about Lua speed isn't above board in that blog article. Lua is faster because Lua twists your arm by being bare bones. If Lua behaved like Python it would be just as fast as Python. The reason why people don't like Lua in neovim is because python has batteries included, and in reality is easier to work with because it's more semantic than Lua. In reality the decision to go with Lua was that it was easier for the dev team to embed, and everything else is just gravy.  Lua is also a huge wedge within neovim even. Ever wonder why the copy/paste provisioning system requires python but neovim's official plugin language is Lua? Well it's because Lua doesn't really have batteries included for the tons of windowing systems out there. So they said fuck it and went with python for that. Show's how good Lua is for neovim when core features need python to work.  I mean sometimes people bitch about stupid things but the amount of bikesheding (what will be our default colorscheme) and pidgeonholing personal projects has been a bit weird, with the somewhat serious consideration of moonscript before."
neovim,2snl8o,_pi,4,Mon Jan 19 06:19:38 2015 UTC,"The embedded lua is operating at a very low level (it is supposed to replace the viml interpreter), an extensive library is not required at all.   Ever wonder why the copy/paste provisioning system requires python but neovim's official plugin language is Lua?   The current copy/paste (to the system clipboard) methods don't require python at all. bfredl and I are working on this issue, and it is 80% solved already. I created a python prototype because that is super quick to use, but in the end we are most likely provide a native binary that supports vim's weird clipboard format."
neovim,2snl8o,fmoralesc,-1,Mon Jan 19 22:52:09 2015 UTC,"The embedded lua is operating at a very low level (it is supposed to replace the viml interpreter), an extensive library is not required at all.   You're missing the point. If all you need is viml then you may be correct. But that belies the issue, because of python's vast core library writing simple plugins that extend vim with python's lib would be easy and relatively bug free thus high quality. Also anything that requires network connectivity running through Lua would be a pain because LuaSocket is too low level. Case in point the floobits plugin is written in python not lua.   If the Lua libraries for these things start to creep into the required packages for neovim you're further alienating people from running it especially on constrained systems. Case in point many people who stopped/ are turned off by xmonad because of ghc dep.   The current copy/paste (to the system clipboard) methods don't require python at all. bfredl and I are working on this issue, and it is 80% solved already. I created a python prototype because that is super quick to use, but in the end we are most likely provide a native binary that supports vim's weird clipboard format.   That's a very coy way of saying the optimal state of the system doesn't require python, but the current state of the system requires python.   It's nice you're making due but it's telling when one of the first changes in making neovim an interoperable modular system with Lua at its heart -- Lua was dead on arrival. Why? Because there are no Lua libraries for X, and nobody packages lua-gtk. In short lack of libraries and lack of support.  You can defend the Lua in core all you want, but it really shows the efficacy of that decision when the first attempt at modularization Lua was dropped at the threshold of the editor."
neovim,2snl8o,_pi,6,Mon Jan 19 23:31:30 2015 UTC,"You are confusing the embedded lua, which will be used for interpreting viml mostly, and lua support for plugins. They are not the same thing. neovim's plugin architecture allows writing plugins in whatever language that knows how to talk to nvim via the rpc protocol it implements. The fact is the python host got developed earlier than the lua one, but that doesn't mean lua has been put on the wayside; it was a decision based on the fact that currently, there are more python based plugins than plugins written in other languages. Floobits plugin is written in python because the Floobits guys have always used python, even for the vanilla vim plugin. Either way, for plugins neither the use of python or lua is mandated by neovim; people are developing hosts for ruby and go too.  For the use case it has in neovim core, lua is a good choice instead of python, because it is smaller and much faster.   That's a very coy way of saying the optimal state of the system doesn't require python, but the current state of the system requires python.   No, you misunderstand again. On the clipboard issue, we already have a non-python utility that can handle the problem, but it is still not complete. You opened the issue, I imagine you've already read about what's been going on. It's all in the open."
neovim,2snl8o,fmoralesc,3,Tue Jan 20 00:24:40 2015 UTC,"The first option is not possible, because the binary is linked against Gtk (for compatibility with X and wayland), which is a no-no for neovim. I think it's best to keep it separate and just distribute it alongside neovim. This would also remove the clipboard provider dependency on xsel or xclip in *nix, which can't really support vim's clipboard (it uses a custom target to indicate that the data is blockwise, characterwise or linewise) However, it would create a ""soft"" runtime dependency on Gtk.  Just thinking out loud, though, because this hasn't been discussed."
neovim,2snl8o,fmoralesc,2,Tue Jan 20 05:19:36 2015 UTC,"I think for big dependencies, especially those available in most distros such as X/Gtk, we can avoid the embedded download/build and just let the user install it manually"
neovim,2snl8o,tarruda,1 point,Tue Jan 20 05:26:23 2015 UTC,"(You caught me because I was refreshing myself on reddit after finishing porting this set of patches)  I preferred to use Gtk instead of xlib directly because working with the clipboard on X that way is the way of madness.  By soft runtime dep I meant to say that to use the clipboard using this method the user would need to have gtk installed, although optionally (I suppose we could use xsel et al by setting the kind of flags the current version of the fixed provider has; that will only work within a single nvim instance, though)."
neovim,2snl8o,fmoralesc,3,Tue Jan 20 05:35:14 2015 UTC,From the patch mentioned in the OP:   NOTE: Don't use ANSI style function declarations.  A few people still have to use a compiler that doesn't support it.    Good lord...
neovim,2s1fbx,allabout001,13,Sun Jan 11 06:14:34 2015 UTC,"Neovim architecture makes it more easily testable than Vim, and since it makes extensive use of continuous integration tools, developers are more confident about merging changes. Also, we are constantly trying to improve the code, making it more readable and attractive to contributors.  So, I'd say the biggest selling point is that Neovim is more open and maintainable than Vim, which will enhance the project survivability."
neovim,2s1fbx,tarruda,8,Tue Jan 13 10:50:34 2015 UTC,"FWIW, I agree. ""Marketing"" is why I felt it important to change the tagline to ""vim out of the box"". This tagline conveys:   Neovim is vim (lowercase Vim), not a clone or a greenfield rewrite The out-of-the-box experience (for new users as well as stock installations) is very important Neovim opens ""Pandora's box"" by exposing an API (the philosophical inverse of Emacs) Neovim attempts to be less prescriptive about use cases (contrary to Vim's :help design-not)   Of course, the tagline is not a good way to communicate the USP. It's just a tagline :P"
neovim,2s1fbx,justinmk,5,Mon Jan 12 05:32:21 2015 UTC,(the philosophical inverse of Emacs)   Hadn't thought about it that way- nice. :)
neovim,2s1fbx,MrPopinjay,3,Mon Jan 12 09:11:45 2015 UTC,"You will not be able to run a shell inside Vim or use it to control a debugger.  This should work the other way around: Use Vim as a component from a shell or in an IDE.   It will be easier to adhere to Vim's design-not with Neovim thanks to embedding and async plugins. (Stealth edit: it will also be able to do it the other way, in violation of design-not, of course...)"
neovim,2s1fbx,humbled,1 point,Tue Jan 13 19:57:16 2015 UTC,"The ""Pandora's box"" reference is a very smart play, :)"
neovim,2s1fbx,MrPopinjay,15,Tue Jan 13 01:55:38 2015 UTC,"Vim with a cleaner code base, more active development, and async plugins.  I'm not sure you could call Go a C successor..."
neovim,2s1fbx,mkaito,10,Sun Jan 11 11:16:55 2015 UTC,"Go a C successor   By the forgotten gods, no."
neovim,2s1fbx,ismtrn,2,Sun Jan 11 14:21:35 2015 UTC,"Is it correct that code completion plugins in vim has some problems, and that async plugins will fix this?  I don't really know anything about it. Just something I think I have heard. If it is the case then: ""Good code completion"" might be a nice selling point."
neovim,2s1fbx,MrPopinjay,6,Sun Jan 11 11:51:40 2015 UTC,"Depends what problems you're talking about. Personally I'm looking forward to syntax checking in the background, so my editor doesn't lock up while it lints a file. This is especially nice for languages like Scala, where linting requires spinning up the JVM.  Between snippets and neocomplete I feel I already have good enough code completion to be honest."
neovim,2s1fbx,benekastah,7,Sun Jan 11 12:16:03 2015 UTC,"Shameless plug re async linting: check out my project neomake. It works in vim as well (but synchronously). I've been using this with Neovim for several months and it has been great. Contributing a linter in your language(s) of choice is easy and the docs are pretty good. If you try it, please let me know how it goes!"
neovim,2s1fbx,MrPopinjay,2,Sun Jan 11 17:02:04 2015 UTC,Looks very interesting. I might have to try it out in the near future :)
neovim,2s1fbx,drwxrxrx,1 point,Mon Jan 12 09:10:00 2015 UTC,Do you have a walkthrough of how to replace e.g. Syntastic with neomake?
neovim,2s1fbx,benekastah,2,Sat Mar 7 06:58:22 2015 UTC,"Yeah, there should probably be a section specifically on switching. The selection of supported linters supported is much smaller than Syntastic's at the moment, but if you use one of them, you just need to run :Neomake from the file you want to lint. There's also an example autocommand in the readme that shows how to set up neomake to run every time you save a file.  If you want to use a linter that isn't supported yet, you mainly need to know what arguments the program should take and the errorformat. The docs will show you how to get it working from there. If you're not sure exactly what I'm talking about, feel free to PM me and I can explain in more detail."
neovim,2s1fbx,MrPopinjay,7,Sat Mar 7 07:55:06 2015 UTC,"ok, here is a slogan suggestion for Neovim:  Vim Extended In Modern Languages. The reasons are:   it's short and clear. you may ask why focusing on ""languages"" when Neovim has many features(embeddable, better GUI, etc.)? Because 1, a long feature list never works well in marketing, it's better to pick one aspect and make it a memorable standout, 2. our target audience (people in tech fields) knows well that modern programming languages have great power in the hands of competent programmers. If being told that your go-to language can be used easily to extend the editor in any way you fancy, the sense of power is huge. With this mindset, ""embeddable"", ""async"", ""better GUI"" and other yet to be conceived features come along naturally, a matter of time and effort in implementation(in Python, D, Go, Rust, Lua, C++, Julia, Nim, Ruby, etc.). the word ""Extended"" means, by default, it's just vim, only with more and better stuff (like a child class extended from parent class in OOP). This puts current vimmers' minds at ease. The switching from Vim to Neovim is a very easy process. ""Extended"" also means Neovim work in new territories (embedded in other IDEs), in new use cases (reading emails, viewing gif, haha..), on new platforms (browsers, clouds, mobile devices). the words ""Modern Languages"" plays into the public perception that current Vimscript is archaic/slow. Rejoice! The slogan states that a key pain point is solved once and for all. the word ""Modern"", although not glamorous, never goes out of fashion, by definition. In 2025 Neovim can still be extended by any language in vogue."
neovim,2s1fbx,MrPopinjay,3,Tue Jan 13 03:31:31 2015 UTC,"the words ""Modern Languages"" plays into the public perception that current Vimscript is archaic/slow. Rejoice! The slogan states that a key pain point is solved once and for all.   I think the word modern implies it's hipstery new things like Go, Node, Rust, etc. Surely you want to stress that it's in any language the author desires?"
neovim,2s1fbx,MrPopinjay,2,Tue Jan 13 21:53:40 2015 UTC,"even though 'any language' is stressed, in order to write a plugin the author needs an existing client library (to talk to msgpack-rpc API) for her particular language, or she has to write that library first? (my understanding). If this is true it might help to avoid the initial flooding of not-well-made plugins in hipster languages.  meanwhile masters of old languages(Perl, C/C++, Lua, OCaml, lisp langs, etc.) believe their languages are still pretty modern,  I guess, :), so the slogan should appeal to their creative urge too."
neovim,2s1fbx,hallettj,2,Wed Jan 14 01:23:07 2015 UTC,"Lisp is perhaps the second oldest programming language, if that qualifies in the whole as modern we have very different ideas of what modern means.  Marketing problems!"
neovim,2s1fbx,musicmatze,2,Wed Jan 14 08:06:19 2015 UTC,"Modern is in the eye of the beholder :) Maybe the word 'modern' in the slogan should be changed to 'any' or 'powerful' or something? The elusive perfect dose of abstractness/vagueness is the beauty of great taglines. If the word 'modern' is not helping in this aspect, then it should be changed. man, Marketing(and branding) is hard, really hard to do well."
neovim,2s1fbx,Suphek,1 point,Wed Jan 14 08:32:58 2015 UTC,I agree. It's really hard!
neovim,2s1fbx,lakechfoma,6,Wed Jan 14 13:23:30 2015 UTC,"""Embeddable Vim with good async support."""
neovim,2s1fbx,Suphek,7,Sun Jan 11 22:38:56 2015 UTC,"""Embeddable Vim with async plugins in any language.""  I remember when MS .Net came out in 2001, the message of ""you can write in multiple languages with frictionless interoperability"" (because of the CLR) really caught people's attention.  Java's ""write once, run everywhere"" slogan was loud and clear in 1995 ( of course it only took more than 10 years to fulfill that promise), but it was that powerful message (and the memory management with the built-in garbage collection) that launched its meteoric growth in developer mind share in the 90s and 00s."
neovim,2s1fbx,thukjeche,9,Mon Jan 12 00:50:36 2015 UTC,A few points which are at least selling points for me:   vim as a library - include it everywhere Vimscript in fast API for text processing - plugins can be written in any language now!
neovim,2s1fbx,rbonvall,10,Sun Jan 11 13:24:25 2015 UTC,"Improved embedding. I really like having the features in an IDE, except for the stupid ass notepad editors they all seem to have. Conversely, I find Vim to be a good text editor but insufficient by itself. Some people will tell that I can turn Vim into an IDE by using the right addons, but it just doesn't work for me. So, I'm sitting here hoping that the day comes when I can just crack open some IDE and be like ""Choose editor: NeoVim"".  Also, being able to write extensions in any language allows the users more freedom and the ability to harness the power of vim without having to learn vimscript."
neovim,2s1fbx,equalsraf,1 point,Mon Jan 12 01:22:56 2015 UTC,"In the meantime there is eclim, though I have no idea how well it works."
neovim,2qbfcq,VimFleed,10,Wed Dec 24 22:35:05 2014 UTC,AKA: Ultimate bikeshedding.
neovim,2qbfcq,ismtrn,3,Thu Dec 25 01:21:35 2014 UTC,"Seriously? if everything but coding is bikeshedding, then how can this project move forward?  You should consider that some vim users aren't developers, and they can't contribute to the project with code.  If the people who are writing code for Neovim are too busy to discuss such topics, people who'll use the final product -and again some of them don't use it for writing code- can spend some time discussing such topics. Where are talking about a project that have the potential to be the next ""Vim"" for years to come, couple minutes to decide which color scheme  should be the default won't hurt anyone, come on man there's a huge legacy potential there to call it ""bikeshedding""."
neovim,2qbfcq,ismtrn,7,Thu Dec 25 04:28:37 2014 UTC,"You are right. It is not really bikeshedding. It does not seem like it hinders the development of other features, so it doesn't take anything away from the development. Therefore there is no problem in discussing it. Bikeshedding has very negative connotations which are not justified here.  It does have some aspects of bikeshedding though.  It is the second most commented on issue. That is out of proportion with how important discussing it is. I mean, it is pretty important that nvim looks decent by default, but none of the suggested themes directly ugly. It is a matter of taste. If you just took the first suggestion and ran with it, it wouldn't be much worse than what you could come up with from spending hours(months) debating the issue.  The other thing it has in common with bikeshedding is that it is about deciding the color of something. This was why I initially posted my comment without really thinking about it..."
neovim,2qbfcq,AndreDaGiant,3,Thu Dec 25 13:38:24 2014 UTC,"This is so close to the actual story in the bikeshedding analogy, it is hilarious. For sure, it is bikeshedding.  If you want to help but can't code, help write some documentation."
neovim,2qbfcq,p0tent1al,2,Fri Dec 26 14:57:02 2014 UTC,"For sure, it is bikeshedding.   No it's not. Bikeshedding isn't solely concerned about paying attention to trivialities, it's more about the relationship between focusing on trivialities vs the big things. From my perspective, the project is coming along nicely, so it's ok to have a discussion about a default color scheme as the discussion isn't a hinderance... you people make it out to seem like the ""mind share"" dedicated to this question could be used to add complex features to NeoVim... it's quite ridiculous really.  If you buy a new house and spend quite a bit of time deciding on what color to paint your house... is that bikeshedding? Paint ""IS"" trivial compared to the rest of the house. But in reality, for a project or a house you live with choices either bigger in scope or just trivial, so it makes sense to spend time on even the little decisions.   So yeah no it' isn't bikeshedding just because you spend time on a small decision. Now... if NeoVim wasn't coming a long and a colorscheme discussion was happening... maybe. But until then, this is a misappropriation of that term."
neovim,2qbfcq,AndreDaGiant,3,Sun Jan 11 06:50:00 2015 UTC,"Bikeshedding, actually, refers to underqualified people spending inordinate amounts of time on unimportant things that they are able to work on, which is ok - but becomes unproductive as soon as they drag qualified people into their highly trivial bickering about non-essential details.  EDIT: Seems we're both partly right."
neovim,2qbfcq,quasarj,-2,Mon Jan 12 10:44:34 2015 UTC,"TIL the term bikeshedding. Thanks for that! But it won't spare you from my downvote, as I agree this is a reasonably important thing."
neovim,2qbfcq,musicmatze,2,Thu Dec 25 09:16:33 2014 UTC,"Just to clear something, this issue has been open for a long time, the second man in the project Mr. Justin M. Keyes, has said that vim-kalisi will most probably be the default one, but it's never late to join the discussion and give your feedback."
neovim,2qbfcq,ballagarba,7,Wed Dec 24 22:38:16 2014 UTC,"Of course. I consider vim-kalisi as absolute crap! Much too much pale colors... it's ugly IMHO.  github light scheme is way better, as well as wombat and molokai for dark schemes (IMHO)!"
neovim,2qbfcq,justinmk,0,Thu Dec 25 09:44:19 2014 UTC,"I value solarised so muct, and believe it's the best, but unfortunately the developer has lost interest in the project.  vim-kalisi is not my favorite, but it's kinda unique, and resembles Neovim site & logo colors. GitHub's scheme is nice, but it messes the unique touch that solarized has."
neovim,2qbfcq,ballagarba,2,Thu Dec 25 10:56:35 2014 UTC,That's a shame. I think hybrid or base16 are way better. I don't like kalisi at all to be honest.
neovim,2qbfcq,abitforabit,1 point,Thu Dec 25 20:39:18 2014 UTC,"base16 plugin comes with dozens of colorschemes. Which one is way better?  In my terminal, they all look the same, and nothing like the screenshot. The screenshot does look very well balanced though. But if the colorscheme requires setup in the terminal, it won't be a good default."
neovim,2qbfcq,Venar303,2,Wed Jan 14 05:36:28 2015 UTC,"True. I specifically meant Default, Eighties and Tomorrow. Unfortunately base16 requires some extras work to get the colors to look good in the terminal, like setting the correct color scheme for your terminal and sourcing the appropriate file in base16-shell.  Which leads me to think hybrid might be a better fit since it pretty much work out-of-the-box."
neovim,2qbfcq,iooonik,2,Wed Jan 14 07:47:02 2015 UTC,"vim-kalisi is a perfectly fine default choice, it fits the colors of neovim and is well maintained (unlike solarized which has 40+ open issues and the last commit is 4 years ago).  And voting on the default is imho stupid. It's the default, if you don't like it change it. The point of the default is not to save you one line in your .vimrc just because it so happens that your choice won.  I'm still going to be using base16-railscast (which to be honest is kind of a pain to setup if you really want to benefit from every advantage it offers).   But if there would be an official vote (none of that I made a vote and am going to spam it everywhere) I would vote for kalisi.  Edit: I just had another look at solarized. There are close to 40 open pull requests, I think it's clear that whoever created it has all but given up on at least the vim portion of the project."
neovim,2p69ab,ingvij,1 point,Sat Dec 13 14:24:59 2014 UTC,"It seems to me that a neovim IDE will be just a neovim distribution with a bunch of useful plugins..   Imho Vim/Emacs are much more powerful with plugins than any IDE. My flatmate is a C/C++ dev and works mainly with eclipse with a few plugins for e.g. checkstyle.  When I showed him a bit of the things vim can do at stock  (e.g. folding, comment formatting [and this gem], buffers/splits and tabs)  and what it can do with plugins  (filsearch with CtrlP, browsing local changes of the file with undotree, the power of snippets with UltiSnips [eclipse has those, but in our experience they're painful to use], browsing line-changes or file changes or generally commits with GitV, adding line per line and making commits directly from vim while viewing the changes with fugitive and showing the differences from the index copy to the working copy with gitgutter) he was pretty much impressed (not to mention the great github-integration with github-issues.vim, e.g.).  I would say IDEs are more comfortable to use, since they bring an editor and the functionality of our plugins with, while vim/emacs need you to go into the community and look for the plugins you need/want.    So yeah - a neovim IDE would be nothing else than a neovim install with preinstalled plugins (or better - a script that installs neovim and a plugin-manager and puts a few plugins at the start). But this will call other problems - which completion will it use? YCM? Then the neocomplete guys will rampage. Neocomplete? Then the YCM guys will rampage.  Edit: To you first question: Yes, it would be possible to integrate neovim into an existing IDE like eclipse or IntelliJ, ... The question here is how to handle the completions of the IDE vs your own completions (e.g. if you're using YCM and UltiSnips, will the completion of the IDE overwrite the completion of YCM? If so, UltiSnips will be left out - but maybe it can be get to the point that the completion of the IDE is integrated into vims omnicomplete). But personally I don't think I'd use an IDE then - IDEs are way too much clicky-clicky."
neovim,2p69ab,nath_schwarz,1 point,Sat Dec 13 16:19:05 2014 UTC,"while i agree with you as I'm using vim myself at home for C++ development, at work I am forced to use eclipse. And Eclipse has a few neat features I'd love to see in vim maybe through an extension to YCM, namely:   Type Hierarchy (ctrl+t on classes shows you the full hierarchy and ctrl+t on virtual methods shows you where these are coming from and where they're overloaded) Call Hierarchy   These features are really valuable when browsing a bigger source tree you are not familiar with."
neovim,2p69ab,frigge,2,Sat Dec 13 18:40:06 2014 UTC,"Type hierarchy is a neat thing and sounds like something than can be achieved with a bit of ctags-magic - actually tagbar already makes the hierarchy of a single file visible - if this could be applied to a whole project folder we have the full hierarchy you mentioned. For overloading - I guess that would require a bit more of work.  What exactly do you mean with call hierarchy? To see, which other methods are calling the current function? If so, a code-search with the methods name and opening the findings in a quickfix window would be sufficient imho - however that would be rather slow. Maybe theres even a ctags-solutions for that? Edit: try g] over a method-call. I suppose it is something similar to what you want (this requires ctags or cscope - however cscope might also satisfy your needs to jump from a method to its callers)."
neovim,2p69ab,nath_schwarz,1 point,Sat Dec 13 19:00:33 2014 UTC,"I didn't know about that tagbar feature but i think in one file it is quite easy to follow the hierarchy even without any plugin. Across multiple files it gets quite a bit harder though most of the time I'm able to follow by just grepping for "": public Classname"".  In my experience your solution for call hierarchy is not sufficient because often times method names are reused across multiple classes if they do similar tasks. Filtering out the methods you are interested in an redoing this until you are at the hierarchy level you are interested in is quite a bit of work. The only solutions i know of are creating a call graph in doxygen and cscope based plugin i forgot the name of that unfortunately only works for C."
neovim,2p69ab,frigge,1 point,Sat Dec 13 19:13:50 2014 UTC,"I'm a full on Vim guy, but I'll say that one thing that IDE's bring and vim doesn't unfortunately is code analysis. This has nothing to do with vim per se, I think the underlying issues are: 1) I don't think vim's scripting language is good for writing large code that would tokenize/parse/analyze your code 2) Since the advent of JVM based languages, IDEs have become the norm, so such an huge undertaking would have doubtable usefulness."
neovim,2p69ab,ouiyaaa,0,Sat Feb 28 03:27:59 2015 UTC,"and vim doesn't unfortunately is code analysis.   You're right, but thats because vim is a text editor, not a code analyzer. But it can utilize external tools that allow code analysis (e.g. through CI tools or cscope/ctags) to have a desired effect - such as listing the calling procedures (that would be cscope), checking for codestyle (flake8, checkstyle, ...) or the like.  IDEs are a great thing, but most of coding is about writing code - then refactoring and then code analysis. I may not be able to do all those in vim, but I can do the important part and a big chunk of refactoring in vim. After that I'm only looking at formatted output telling me where I'm wrong anyway."
neovim,2p69ab,nath_schwarz,1 point,Sat Feb 28 03:36:32 2015 UTC,"Yes, you can embed neovim in other editors. The 3rd post on this subreddit, in fact, is about a person doing that."
neovim,2p69ab,AndreDaGiant,1 point,Sun Dec 14 13:47:08 2014 UTC,"Yeah, but that was based on a previous PR that has been discarded. The abstract UI interface is the new UI infrastructure, and, as I said above, the question is not only related to 'plug an interface on neovim', but more broadly 'how would an IDE would be implemented using neovim'..."
neovim,2p69ab,AndreDaGiant,2,Wed Dec 17 01:52:41 2014 UTC,"Oh, I was unaware. Sorry."
neovim,2p69ab,hoschi,1 point,Wed Dec 17 05:23:53 2014 UTC,"the project is again up to date. From README:   I've updated it to use the abstract-ui branch, it no longer uses the redraw-events patch.   there is also a new video on Youtube, showing the progress"
neovim,2oqulo,habash1986,12,Tue Dec 9 11:11:02 2014 UTC,None. Unless the devs put some in for fun. I don't want bikeshedders to be hogging folks' time with this.
neovim,2oqulo,AndreDaGiant,6,Tue Dec 9 20:24:34 2014 UTC,The biggest easter egg i'm waiting for is it compiling under windows! :D
neovim,2oqulo,MrBushido2318,2,Wed Dec 10 03:29:41 2014 UTC,"Maybe more of a christmas/newyear egg - the terminal interface is currently broken, but you should be able to build from #810 (and some instructions). You can use the msgpack interface for some quick tests. Hopefully the GUI work will advance quickly.  As for eggs, maybe we can get a different banner for christmas. Or :set cp could reply with ""Oh No you didnt!"" But I'm sure there is a already a Vim plugin for easter eggs somewhere."
neovim,2oqulo,equalsraf,2,Sat Dec 13 00:06:24 2014 UTC,"Or :set cp could reply with ""Oh No you didnt!""   Hahaha."
neovim,2ninp1,ReneFroger,1 point,Wed Nov 26 21:51:26 2014 UTC,"This is actually quite old (Youtube video is from July), but interesting nevertheless."
neovim,2ninp1,wal0,1 point,Fri Nov 28 12:00:31 2014 UTC,I will jump for joy the day IntelliJ adds a nvim plugin!
neovim,2niycm,rockzombie2,1 point,Wed Nov 26 23:26:04 2014 UTC,I am curious. How did the original Vim build on windows and Neovim suddenly not?
neovim,2niycm,Erakko,1 point,Mon Dec 8 09:35:41 2014 UTC,"Several things happened   Switched build systems, and are missing the proper checks - meaning that trying to build in Windows right now may cause you to see invalid build flags being passed to the compiler Lots of non portable code was removed (to be replaced with libuv based alternatives) - while this doesn't happen some code is still missing. Also in some places too much code was removed and needs to be brought back :D Neovim uses C99 - older MSVC versions do not support it"
neovim,2niycm,equalsraf,3,Mon Dec 8 18:39:05 2014 UTC,It will still take someone to get it working well on Windows which will take time.    I think the people putting a bounty on the issue are hoping it will motivate someone to work on it sooner.
neovim,2niycm,passingby,4,Thu Nov 27 02:20:02 2014 UTC,You could say that's the whole purpose of a bounty ;-)
neovim,2niycm,toupeira,4,Thu Nov 27 03:58:27 2014 UTC,Ye that why i did it. I want to try neovim at work ASAP :) (Using Windows 7 here)
neovim,2niycm,xgo,5,Thu Nov 27 09:03:41 2014 UTC,Big thanks for spending your money when (I assume) spending time is unfeasible!
neovim,2niycm,AndreDaGiant,4,Thu Nov 27 15:38:20 2014 UTC,"Would love to contribute code or windows build project, but right now im transitioning from python to c/c++/c# at work.   So right now im not skilled enough do contribute. But i hope in the future i will be able to contribute :)"
neovim,2niycm,xgo,2,Fri Nov 28 03:49:54 2014 UTC,"Thumbs up, thanks for this."
neovim,2niycm,equalsraf,1 point,Fri Nov 28 11:04:45 2014 UTC,"Awesome :). I personally have great confidence that equalsraf will get it working in due time. And the result will be so much nicer for it, both inside and outside."
neovim,2ndggo,surnia,9,Tue Nov 25 14:28:49 2014 UTC,"Great work, your guys (and gals) are making history!   A heartfelt thank you to all who contribute to this great project!"
neovim,2ndggo,allabout001,6,Tue Nov 25 14:47:29 2014 UTC,Glad to see such strong progress!
neovim,2ndggo,AndreDaGiant,4,Tue Nov 25 16:20:21 2014 UTC,Awesome progres. I'm going to install the newest version right away with linuxbrew!
neovim,2ndggo,LeonBo,5,Tue Nov 25 19:46:49 2014 UTC,Great to hear that there is progress around neovim!
neovim,2ndggo,musicmatze,2,Tue Nov 25 21:24:56 2014 UTC,
neovim,2n9xzw,bruno-,4,Mon Nov 24 16:47:15 2014 UTC,"Probably cannot yet. They're more focused on writing code right now, but I bet you could try and take the lead on this if you are interested. There's an active google group for neovim."
neovim,2n9xzw,swartkrans,1 point,Tue Nov 25 01:46:55 2014 UTC,Hoping that this happens. Would buy!
neovim,2mo54n,_pi,12,Tue Nov 18 15:21:44 2014 UTC,"Uhmm... it's alpha, what did you expect?"
neovim,2mo54n,toupeira,-4,Tue Nov 18 15:41:55 2014 UTC,"Tarruda consistently says it's ""alpha but stable for daily use"". Which is essentially him trying to promote his product while absolving the responsibility of the daily use issues that arise.  At least keeping a stable branch in which you don't kill OS integrated copy and paste would be cool, which was a feature that was working before neovim ""fixed"" it and now it's not.  Also this path is splayed out over 3 bugs and 2 repos and 2 different branches within that repo. Just FYI.  https://github.com/neovim/neovim/issues/1407 https://github.com/neovim/neovim/issues/1191  I can't find the third but basically the docs used to say runtime! setup/python_setup.vim when the actual file was python_setup.vim.  They really CBA to do any QA after pushing to the repo but insist nvim is a daily driver.   EDIT: And after hunting those down it still doesn't work.  Also here's another upcomming pivot on clipboard.https://github.com/neovim/neovim/issues/1413"
neovim,2mo54n,TankorSmash,2,Tue Nov 18 15:45:24 2014 UTC,So what would you rather have? Not be able to download neovim at all? The thing's in hot active development.
neovim,2mo54n,danithecake,1 point,Wed Nov 19 02:07:05 2014 UTC,"oh, so that was a problem?-_- I spent almost 2 hours trying to recognize why my recently updated and builded neovim don't play nice with YouCompleteMe, but did it early"
neovim,2mo54n,vompatti_,1 point,Tue Nov 18 17:57:05 2014 UTC,So YCM works with neovim?
neovim,2mo54n,nath_schwarz,2,Tue Nov 18 18:42:35 2014 UTC,"It works fine for me with the pip-package neovim and this snipped at the start:  if has('nvim')                    runtime! python_setup.vim endif                           However I haven't built neovim in about two weeks so it may be easier or harder. Also take care to install the neovim-pip from pip2 - if you use pip3 it won't work, since YCM still uses python2 and pip3 only installs the python3-pip."
neovim,2mo54n,vompatti_,2,Tue Nov 18 20:28:15 2014 UTC,Does this mean that every python(2) plugin will work? :O
neovim,2mo54n,nath_schwarz,2,Tue Nov 18 21:31:24 2014 UTC,Yes.
neovim,2m1w3k,benekastah,5,Wed Nov 12 06:58:14 2014 UTC,"I briefly tried to modify syntastic to be async, but there is just so much going on there. Many options wouldn't work well anymore and lots of edge cases would arise (not to mention the callback hell in a codebase that is already quite large for vimscript).  So, I figured it wouldn't be too hard to make a simple async make / syntax checker designed around job control. My brief search didn't turn up any prior art (correct me if there is anything else like this, I'd be curious to try it out), so I went to work. It wasn't too bad. Hopefully some of you find it useful!  Feel free to ask for clarification / make suggestions."
neovim,2m1w3k,dddbbb,1 point,Wed Nov 12 07:01:27 2014 UTC,I briefly tried to modify syntastic to be async   Did you read through this issue (info about what needs to work and some previous work on making it async).
neovim,2m1w3k,ballagarba,2,Mon Nov 17 00:06:56 2014 UTC,"I had read through that issue before, but I didn't remember that there's a previous attempt with AsyncCommand I might be able to leverage. I'll try that out when I get the chance!"
neovim,2m1w3k,Tranquilllity,2,Mon Nov 17 03:56:57 2014 UTC,Very interesting! Cross post to /r/vim?
neovim,2m1w3k,passingby,2,Thu Nov 13 08:23:50 2014 UTC,Fixed that bug and here's the cross post!
neovim,2m1w3k,passingby,1 point,Sun Nov 16 06:21:24 2014 UTC,That's a good idea. I'll probably do that after I finish this bug.
neovim,2m1w3k,Tranquilllity,2,Thu Nov 13 16:48:48 2014 UTC,"Currently I have to execute it manually, right? When using it as syntax checker triggering it manually doesn't really make sense. Are you planning to change this?"
neovim,2lx3yv,SplinterOfChaos,1 point,Tue Nov 11 01:25:45 2014 UTC,"It should also be mentioned that this will allow out-of-process vimscript execution. So plugins like ctrlp which are pure-vimscript could do their processing in the child nvim(s), without blocking."
neovim,2lx3yv,justinmk,1 point,Tue Nov 11 04:55:40 2014 UTC,"So the difference to the job-control feature is that you can execute vimscript, not only shell commands?"
neovim,2lx3yv,wal0,1 point,Tue Nov 11 13:52:22 2014 UTC,"rpcrequest() and friends can send/receive to/from any process that implements Neovim msgpack-rpc. It just so happens that nvim itself is one such implementation. Therefore, nvim can create a child nvim process and communicate with it. So the parent nvim can send vimscript to the child nvim for processing, which means the child can do work (including vimscript work) without blocking the parent."
neovim,2lx3yv,justinmkw,6,Tue Nov 11 15:00:23 2014 UTC,"Just to clarify, you said ""Neovim msgpack-rpc"" but our msgpack-rpc implementation is fully compliant with the specification. So any program that understands msgpack-rpc over stdin/stdout can be used with rpcstart()"
neovim,2lsgfl,ReneFroger,19,Sun Nov 9 20:17:01 2014 UTC,I have asked josh davis to delay the newsletter to give me time to finish my work on PR 1335. It will probably be released this week though
neovim,2lsgfl,tarruda,5,Sun Nov 9 21:07:22 2014 UTC,"Good to read this. Thanks, will be curious!"
neovim,2lsgfl,passingby,4,Sun Nov 9 23:00:22 2014 UTC,"For future reference, I always open up a PR for the upcoming newsletter a month to half a month before it will be out on the neovim.github.io repo. So you can always check the progress of it there."
neovim,2lsgfl,agsdot,1 point,Mon Nov 10 01:22:52 2014 UTC,Any updates yet?
neovim,2lsgfl,passingby,1 point,Sun Nov 23 21:40:49 2014 UTC,"I'm literally working on it now, haha. I'm adding a section on /u/tarruda's changes now."
neovim,2lfy91,TankorSmash,3,Thu Nov 6 04:22:15 2014 UTC,I believe vim-plug works: https://github.com/junegunn/vim-plug
neovim,2lfy91,jollybobbyroger,1 point,Thu Nov 6 09:38:56 2014 UTC,And Pathogen?
neovim,2lfy91,ReneFroger,2,Thu Nov 6 19:45:35 2014 UTC,"Yes, all Vim plugins, including the various plugin managers, work in Neovim."
neovim,2lfy91,justinmk,1 point,Fri Nov 7 02:27:33 2014 UTC,"I guess this is a bit of a broad question then, but what doesn't work?"
neovim,2lfy91,justinmk,2,Tue Nov 11 22:00:13 2014 UTC,"Technically nothing. There is, temporarily, indirectly, a problem reported here: https://github.com/tpope/vim-pathogen/issues/144  But that's going to go away pretty soon anyways.    edit: If you are asking about plugins other than pathogen, well, lua/ruby/perl plugins do not work yet. Python plugins work very well, unless they use Vim 7.4's bindeval()."
neovim,2lfy91,SplinterOfChaos,3,Wed Nov 12 03:33:04 2014 UTC,"Yes, pathogen works fine."
neovim,2lfy91,SmileyJames,3,Thu Nov 6 22:42:11 2014 UTC,So if pathogen (arguably the the most popular plugin manager for vim) works fine why are people using vim-plug with neovim?
neovim,2lfy91,nXqd,2,Tue Mar 17 15:27:41 2015 UTC,"yes it does, it works fine in neovim :)"
neovim,2lfy91,BluddyCurry,2,Sun Nov 9 01:23:32 2014 UTC,"It would be really great if there was some kind of page showing how much neovim supports at this point in time.  e.g. lua support is needed for shougo's advanced plugins. python support is needed for some other plugins, ruby, etc."
neovim,2lfy91,justinmkw,1 point,Tue Nov 11 18:59:12 2014 UTC,"These pages are generally kept up to date, but they were missing some things so I updated them just now:  https://github.com/neovim/neovim/wiki/Differences-from-Vim  https://github.com/neovim/neovim/wiki/Progress"
neovim,2lfy91,ibn-alfatal,1 point,Wed Nov 12 21:51:16 2014 UTC,"Well, you answered this yourself in your next post, I guess: https://news.floobits.com/2014/11/04/neovim/"
neovim,2lfy91,nath_schwarz,2,Thu Nov 6 07:36:36 2014 UTC,"Vundle works perfectly with Neovim, and makes it very easy to keep your plugins up to date.   Praise the gods!"
neovim,2ldl1t,happy-dude,2,Wed Nov 5 16:11:56 2014 UTC,Github repository: https://github.com/Floobits/floobits-neovim
neovim,2ldl1t,fmoralesc,2,Wed Nov 5 16:12:03 2014 UTC,"Excellent! The floobits guys were one of the groups that pushed asynchronous support in vim forward (even proposing some patches in vim-devel), I'm glad they could find a better platform in neovim."
neovim,2ldl1t,MrPopinjay,1 point,Wed Nov 5 16:53:02 2014 UTC,Go Floobits!
neovim,2kt8hr,Venar303,19,Thu Oct 30 19:39:23 2014 UTC,"Vim in all places I enter text.  BTW, nvim is already my daily driver."
neovim,2kt8hr,whiskerbiskit,4,Thu Oct 30 22:16:08 2014 UTC,This. This is why I am excited for nvim.   I live in the command line and having vim everywhere is the reason to be excited.
neovim,2kt8hr,ticviking,1 point,Fri Oct 31 00:15:36 2014 UTC,Do current vim plugins work?
neovim,2kt8hr,mkaito,3,Thu Oct 30 23:39:46 2014 UTC,"All of mine work except for YouCompleteMe, which I found I wasn't using much anyway.  EDIT: I run Ctrl+P Pathogen Easymotion syntastic surround"
neovim,2kt8hr,whiskerbiskit,3,Fri Oct 31 03:00:33 2014 UTC,When was the last time you tried YouCompleteMe? I think it should work on the current HEAD.
neovim,2kt8hr,SplinterOfChaos,1 point,Fri Oct 31 19:09:31 2014 UTC,"Just tried it again today after pulling the latest, and it complains about Vim needing to be compiled with Python 2.x support."
neovim,2kt8hr,whiskerbiskit,4,Tue Nov 4 15:48:18 2014 UTC,"See :help nvim-python or http://neovim.org/doc/user/nvim_python.html. If it still doesn't work, file a bug ;-)"
neovim,2kt8hr,wal0,17,Wed Nov 5 19:37:54 2014 UTC,I just want an actively developed vim. Asynchronous plugins would be great too- waiting for sbt to lint my file every time I :w is pretty annoying.
neovim,2kt8hr,MrPopinjay,6,Thu Oct 30 23:49:02 2014 UTC,"Two things: First, vanilla vim is actively developed, but the mailing list is a huge bottleneck. Second, people need to start sending PRs or forking their favorite plugins to use jobstart() instead of system(). A few bugs have been found in the jobs system lately and the fact that it took so long to find them points to few people taking advantage of the system."
neovim,2kt8hr,SplinterOfChaos,4,Fri Oct 31 19:07:51 2014 UTC,"First, vanilla vim is actively developed, but the mailing list is a huge bottleneck.   So we have a problem. Neovim provided a better system, and a lot has been done as a result."
neovim,2kt8hr,MrPopinjay,7,Fri Oct 31 19:13:41 2014 UTC,"The omnicompletion of Vim is just inferior, compared with the completion of Eclipse and Visual studio.   Then I hope to run Vim in headless Eclipse: www.eclim.org  Yes, it's working. But not working perfectly. With Neovim it solves it, and with non-blocking feature, I could run plugins simultaneously.   I would like to have images and different font sizes like Emacs too! But maybe.. maybe.."
neovim,2kt8hr,ReneFroger,1 point,Thu Oct 30 21:48:02 2014 UTC,"Depends on the language.  Jedi is superb for Python, and when used with YCM, you get fully context aware completion, definition jumping, and docstrings when tabbing onto a completion option.  The JS support is also very good."
neovim,2kt8hr,woegjiub,6,Fri Oct 31 10:22:24 2014 UTC,"I'm excited for multithreading.  Vim hangs far too often for me on big files/big lists of files in Unite and many other things. It's just so frustrating to love a piece of software so much and hate it so much at the same time.  I'm also waiting for a time when we can finally abandon vimscript for the sake of other, better language, like python for example.  I just wat to be able to praise and recommend vim to people without having to add at the end ""but X, Y and Z is absolutely awful in vim""."
neovim,2kt8hr,Erakko,7,Fri Oct 31 12:59:39 2014 UTC,Windows build!
neovim,2kt8hr,ingvij,5,Sun Nov 2 07:41:48 2014 UTC,"I want to use vim with IDE-like features such as background building, linting, depemdency management and realtime debugging."
neovim,2kt8hr,ikearage,7,Fri Oct 31 16:44:48 2014 UTC,"VIM is just too slow as an IDE. Completion, syntax checking, vertical splits and syntax coloring really bring down performance for me."
neovim,2kt8hr,mbrochh,2,Thu Oct 30 21:00:31 2014 UTC,Strange. I'm using it for Python development and everything is blazing fast for me. I usually have more than 10 instances open for different Django projects in different terminal windows.
neovim,2kt8hr,drunken_thor,3,Fri Oct 31 02:06:28 2014 UTC,"I just want to no longer have segfaults. I have been using nvim for a month now and that has seemed to clear up, while also becoming faster and using less memory. I don't use that many plugins and I keep my vim pretty vanilla but I get a lot of segfaults for some reason. (actually a lot of the time it is syntax handling issues I believe)"
neovim,2kt8hr,aktauk,3,Fri Oct 31 03:30:08 2014 UTC,"The amount of under-the-hood code changing in Neovim vs the old Vim way is high. I mean, 90% of the skeleton of Vim has been ripped out and replaced with something else. This has caused and is causing some problems that will most likely be ironed out before the first beta. However, we can't iron them out if we don't know about them. So please try your hand a reporting bugs on github :). Thanks!"
neovim,2kt8hr,allabout001,3,Sun Nov 9 16:25:09 2014 UTC,"Many things tightly integrated with Vim, so no need to leave Vim for other things, such as light web browsing, emailing, viewing image/video, simple paint like drawing, org-mode stuff, and of course super good shell windows, etc.  no I am serious. I know the Unix philosophy blah blah, and Emacs sometimes got derided by having too many things, but I confess I got certain amount of emacs envy. I want to stay inside Vim because it's a place I am comfortable and everything is configured to the nth degree!"
neovim,2kt8hr,spotta,2,Sat Nov 1 05:27:02 2014 UTC,I just want fast autocompletion in C++.  And semantic highlighting.
neovim,2kt8hr,fecal_brunch,3,Fri Oct 31 21:21:23 2014 UTC,I want a nice GUI like Sublime. Also I hope plugin quality will improve with support for more accessible languages.
neovim,2kt8hr,metalelf0,2,Thu Oct 30 23:08:10 2014 UTC,"This! If I could have a full VIM inside the Sublime GUI, and not the minimal subset that is vintage mode, I'd be much happier. It just looks better."
neovim,2kt8hr,fecal_brunch,1 point,Thu Nov 6 11:12:37 2014 UTC,Doesn't sublime have a vim plugin?
neovim,2kt8hr,mbrochh,1 point,Thu Nov 13 11:15:39 2014 UTC,It's lacking. But not terrible.
neovim,2kt8hr,emptyflask,-7,Thu Nov 13 12:15:05 2014 UTC,"Why not just use Sublime then? If you want a GUI for Vim, you are using Vim wrongly, IMO."
neovim,2kt8hr,mbrochh,4,Fri Oct 31 02:08:18 2014 UTC,"Not sure if this is the sort of GUI fecal_brunch is referring to, but the reason I use MacVim over standard Vim in the terminal is that it fully supports cmd and option keys, better color, and I prefer to keep the terminal open as a separate app that I can cmd-tab over to."
neovim,2kt8hr,fecal_brunch,1 point,Fri Oct 31 03:55:25 2014 UTC,Interesting point about having different apps to CMD-Tab to. I never thought of this because jumping between terminal tabs via CMD-1-9 is just as fast.
neovim,2kt8hr,sigzero,1 point,Fri Oct 31 04:00:21 2014 UTC,"Vim has a GUI anyway. It's just ASCII, which is fine, but I like smooth scrolling and thinner pane borders. You can so some cool stuff with ASCII (nerd tree etc), but at the end of the day it's just an approximation of something that's mute easily achieved with graphics of a higher granularity.  With regards to your misusing comment, I don't think there's really any difference in use. The input is still the same."
neovim,2kt8hr,Kiith-Sa,1 point,Sun Nov 2 08:56:29 2014 UTC,That's just a crap attitude.
neovim,2kt8hr,sigzero,2,Wed Nov 5 18:39:14 2014 UTC,"Possibility of experimental GUI features (like Sublime minimap, but more). Integration with IDEs/ability to create an IDE on top of nvim. Faster development Possibility of better/faster autocompletion plugins"
neovim,2kjcjb,allabout001,9,Tue Oct 28 03:59:13 2014 UTC,"I hope either Lua or Go.  I hope it's not Python or Ruby. While I love both languages, the difficulties I had with plugins based on them (looking for the gems in the wrong location, using the wrong language version) lead me to believe that they are not really suited for writing plugins for vim."
neovim,2kjcjb,Hobofan94,6,Tue Oct 28 22:40:26 2014 UTC,"Go seems attractive in writing plugins, it produces a single executable file for easy deployment, no runtime needed.  it has a high quality comprehensive standard library."
neovim,2kjcjb,SplinterOfChaos,6,Wed Oct 29 12:58:44 2014 UTC,I actually might like writing plugins in C or C++.
neovim,2kjcjb,justinmk,3,Wed Oct 29 21:15:45 2014 UTC,"I'll probably use VimL or Lua, I have strong interest in cross-platform, minimum-dependency deployment. I plan to see how far I can get in Lua, and use that to generate ideas for improvements to the API."
neovim,2kjcjb,justinmk,1 point,Wed Oct 29 04:09:34 2014 UTC,"Lua and LuaJIT are amazing tools. I hope Neovim will have comprehensive Lua documentation (tutorials, API docs, etc.) built into the release, so everybody can easily look things up, learn Lua quickly, and immediately use it to customize their new shiny editor.  I have a question. Does .nvimrc still use VimL statements in it, or use Lua statements/expressions to set things up and define custom functions? Thanks."
neovim,2kjcjb,justinmk,1 point,Wed Oct 29 13:09:26 2014 UTC,"Does .nvimrc still use VimL statements in it, or use Lua statements/expressions to set things up and define custom functions?   It's still VimL. I can't think of any benefit to changing it to lua, it would just cause confusion. See also:   https://github.com/neovim/neovim/wiki/FAQ#are-plugin-authors-encouraged-to-port-their-plugins-from-viml-to-lua-do-you-plan-to-support-viml-indefinitely-1152  It might be a fun exercise to convert one's .nvimrc to lua though, using a :lua << EOF heredoc combined with vim.options.foo = bar statements. This isn't yet possible with the nvim lua client (there's no vim.options yet), but obviously will be in the next few months."
neovim,2kjcjb,sztomi,4,Thu Oct 30 02:57:37 2014 UTC,"I think any effort to phase out VimL gradually has long term benefit.   Considering the young generations who start to learn Neovim in 2015/2016/2017 etc., they don't know VimL and have no attachment to it anyway(except needing some knowledge to use existing plugins and write simple vimrc). So the Lua Way(TM) needs to be presented to them front and center, and be greatly facilitated (while VimL is still available). Combining with the new plugin infrastructure, I can't imagine in year 2022 there would be much serious VimL usage anymore."
neovim,2kjcjb,ingvij,1 point,Thu Oct 30 05:42:36 2014 UTC,"In my opinion the only way VimL will phase out is if another editor DSL replaces it. There's some (very early) work being done on bringing acme/plan concepts to Neovim[1][2] which could potentially serve the purpose of a command-oriented editing language.   But any ""real programming language"" does not serve well for editing tasks. A command-oriented language is needed (Tcl, shell scripting, VimL, acme).   ex commands are also not going anywhere, which means VimL more or less needs to be supported.   young generation who starts to learn Neovim in 2015/2016/2017 etc., they don't know VimL and have no attachment to it   In my case at least it is not a matter of attachment, there are valid use cases for VimL. There's a lot of ""low-hanging fruit"" that can disproportionately improve the new user experience, without stepping in the quagmire of a ""phase out"". Phase-outs are messy and costly, with a low chance of success.  [1] https://github.com/fmoralesc/plan9-for-vimspace  [2] https://github.com/myitcv/neovim/issues/2    edit: I'm speaking of editing tasks above. For writing plugins, sure, there's no reason to use VimL instead of Lua."
neovim,2kjcjb,hoschi,1 point,Thu Oct 30 06:28:58 2014 UTC,"I totally agree that the ""command"" nature of VimL is very nice and serve well for editing tasks. I was thinking about writing plugins."
neovim,2kjcjb,whiskerbiskit,5,Thu Oct 30 09:26:34 2014 UTC,"Python. It's a great language and most developers will want to be at least partially compatible with good old vim (Neovim won't replace vim overnight). So if you have a chance for at least an easy port, Python will be a great choice. Vimscript will also allow this, but everyone hates Vimscript."
neovim,2kjcjb,TankorSmash,2,Tue Oct 28 08:43:14 2014 UTC,"My vote is for Python. It's very popular and many people start their programmer life with it, so you can be almost sure anyone that wants to use neovim seriously will already know python.  Let's just let vimscript die.  EDIT: You could have made a strawpool for this... I would but I'm a lazy bastard."
neovim,2jnago,HackingInfo,8,Sat Oct 18 23:06:23 2014 UTC,"Just prepend a 'n' to  anything: .vim/ becomes .nvim/, .vimrc becomes .nvimrc etc."
neovim,2jnago,ckafi,3,Sat Oct 18 23:11:43 2014 UTC,"In fact, I’m sure you can source your .vimrc from inside your .nvimrc. It’d be much more of a pain if it did automatically source your .vimrc when you didn’t want it to—they really are planning on enough major divergence between the two projects for such a thing to be necessary."
neovim,2jnago,atimholt,11,Sun Oct 19 00:59:19 2014 UTC,I think most people do:  ln -s .vimrc .nvimrc ln -s .vim .nvim
neovim,2jnago,passingby,2,Sun Oct 19 06:23:34 2014 UTC,"Most of your plugins ""should"" work, over time. In the case of my own .vimrc, it will not fit for neovim, I'm using condition checking for things that do not apply, like if has(""python"") etc."
neovim,2jnago,DArcMattr,3,Sun Oct 19 17:18:42 2014 UTC,"Python plugins should work, but currently you must add a snippet to your .nvimrc: https://github.com/neovim/neovim/blob/3ec4e18cd00700abdffb564835dd4cd7e68a0093/runtime/doc/nvim_python.txt#L33-L35"
neovim,2jnago,justinmk,1 point,Mon Oct 20 01:59:36 2014 UTC,"Thats cool, i only use 3 plugins currently. I mainly wanted my various setyings to be universal"
neovim,2jnago,docwhat,1 point,Sun Oct 19 19:38:23 2014 UTC,I have paths like ~/.vim in my .vimrc -- If I symlink it I need a way to detect that I'm under neovim instead of vim and change paths.  Any ideas?
neovim,2jnago,docwhat,1 point,Fri Jan 16 22:41:47 2015 UTC,"Again, I'm on mobile, but a quick if statement to check if vim or nvim could do your job."
neovim,2jnago,docwhat,1 point,Fri Jan 16 23:43:25 2015 UTC,Sure. But check what? The progname?
neovim,2jm13u,passingby,5,Sat Oct 18 15:18:26 2014 UTC,You could send them to first time contributors as a welcome.
neovim,2jm13u,Kummo666,2,Sat Oct 18 19:05:01 2014 UTC,"Currently that is the best idea that I've come up with right now.  Since there might be a bit of grey area with that as what counts as a valid contribution, one idea is to limit it to unit tests since those are fairly discrete. Unit tests are always good."
neovim,2j7r8v,FNHUSA,4,Tue Oct 14 13:42:34 2014 UTC,"There's something you could help with that doesn't require any C experience: writing tests. Take a look at existing functional tests and if you think that a certain feature is missing proper tests, send a PR!"
neovim,2j7r8v,tarruda,3,Thu Oct 16 14:02:46 2014 UTC,"Since nobody has answered yet, I'm going to give it a try.  Get decent at programming, by doing it. Language doesn't matter at this point, but C is a solid foundation and dabbling in more exotic ones will expand your horizon.  Reading code is also an art that has to be learned. It is absolutely necessary to be able to read code efficiently if you want to work your way into a large existing code base. Reading other people's code is often quite the learning experience.  After you know the project well enough to actually make code changes that don't break everything you still have to get those changes merged. Towards that goal you need to get a feel for how open source projects work. Subscribe to a mailing list of a project you're interested in. Start submitting smaller patches, just to get to know the process. A typo here and a documentation fix there won't be groundbreaking for the project, but will teach you how to actually contribute code.  As far as specific tools go, it's more important to get comfortable with using a class of tools in general, than becoming a master at a single one. For example you'll want to use version control. Git is the one you want for neovim in particular, but don't forget about SVN, mercurial, bazaar, etc. Trying some of those will at the very least give you a broader understanding of what problems version control can solve.  Some other specific tools you might want to check out: something like ctags or cscope, grep and friends, make or a basic understanding of build systems, bash or other shell scripting, Unix tools in general. I'm a huge advocate of the ""Unix as an IDE"" principle and fiddling your environment to perfectly fit your needs is a great way to learn some of the tools.  I hope this is a bit helpful and not too vague. And maybe someone else will weigh in, I wouldn't want to have it on my conscience to send a potential contributer down the wrong path."
neovim,2j7r8v,justinmk,5,Wed Oct 15 14:33:29 2014 UTC,"Reading code is also an art that has to be learned   Related to that, any amount of help with reviewing pull requests is always welcome."
neovim,2j7r8v,SplinterOfChaos,1 point,Thu Oct 16 02:14:59 2014 UTC,Thank you very much! I'm already learning C and I have been using git for a while.  I will definitely pursue the other things you mentioned.
neovim,2iwvkh,junegunn,8,Sat Oct 11 02:06:51 2014 UTC,"Thank you for supporting Neovim like this, I started using vim-plug and it's awesome!"
neovim,2iwvkh,tarruda,3,Mon Oct 13 09:27:02 2014 UTC,Awesome! Ill check it out in the morning!
neovim,2iwvkh,HackingInfo,2,Sat Oct 11 05:03:21 2014 UTC,"It is awesome,  thanks for working on that!  A problem I experienced is that if I switched to a different buffer it jumped back at some point."
neovim,2iwvkh,Tranquilllity,1 point,Sat Oct 11 11:13:29 2014 UTC,Thanks for the feedback. Does it happen constantly? I can't seem to reproduce the problem.
neovim,2iwvkh,Tranquilllity,1 point,Sat Oct 11 11:38:45 2014 UTC,I can't reproduce it either.  Now it's just awesome :)
neovim,2iwvkh,musicmatze,1 point,Sat Oct 11 17:20:23 2014 UTC,"So, if I understand things right, the neovim people have merged a plugin manager into the code base of neovim?"
neovim,2iwvkh,Tranquilllity,5,Sat Oct 11 10:10:43 2014 UTC,"No,  vim-plug just utilizes neovims async feature and installs plugins in parallel."
neovim,2iwvkh,musicmatze,3,Sat Oct 11 11:03:29 2014 UTC,"Ah, no, it has nothing to do with the codebase of Neovim. Maybe my wording was a bit misleading. The parallel installer of vim-plug was initially written in Ruby, so it's not available if your Vim does not support Ruby, which is the case of Neovim. But with this new version of the installer, parallel installation is available on Neovim as well."
neovim,2iwvkh,jollybobbyroger,-1,Sat Oct 11 11:05:26 2014 UTC,"This sounds really nice, although I don't use vim-plug (by now).  If the answer had been ""yes"", I would rage-quit right now, but that way it's fine! :-P"
neovim,2iwvkh,fmoralesc,3,Sat Oct 11 11:26:22 2014 UTC,"You should really check it out. Before using vim-plug, I would just use pathogen and vcsh to update. Vim-plug was so easy to setup and offered on-demand plugin loading, which I think is really clever."
neovim,2iwvkh,musicmatze,3,Sat Oct 11 11:58:47 2014 UTC,"I think it would be a good thing if neovim included a decent plugin-manager by default (it would make things more uniform and provide a better experience for new users, for example), so why are you against it?"
neovim,2iwvkh,fmoralesc,-3,Sat Oct 11 19:53:00 2014 UTC,"Because I really do not care about new users in the first place. The good thing about the plugin thing is that there is competition. If you have something installed/enabled by default, why should you care to ""re""implement it?  Thats also the point why I'm against shipping a default configuration, shipping YCM or something similar, etc etc etc.  I consider neovim as really important for the vim community, as I stated several times in different places, but I think they do a lot of things wrong. (The removal of ex mode - I'm still angry because of this one)"
neovim,2iwvkh,SplinterOfChaos,2,Sat Oct 11 20:25:15 2014 UTC,"If you have something installed/enabled by default, why should you care to ""re""implement it?   Sure, but why wouldn't it be good for plugin management to be unified? I think plugin managers are a different beast to other sorts of plugins. If you ask me if should nvim include YCM, I would say ""of course not""/""fuck off"", even though I use it. On the other hand, I consider the proliferation of plugin managers in the vim ecosystem a failure of the community to deal with the mess that plugins can be (for example, the issue that since there is no standard way to handle dependencies, most of the time every plugin is an island of its own, and much effort is wasted reimplementing stuff)."
neovim,2iwvkh,emm386,1 point,Sun Oct 12 00:12:11 2014 UTC,"Not to mention that some plugins are hosted on github, some on google code with SVN, mercurial, or other, and some only as packages on vim.org. It sucks. :("
neovim,2iwvkh,musicmatze,1 point,Wed Oct 29 21:07:51 2014 UTC,"Because I really do not care about new users in the first place.   I'm glad you are not only thinking about yourself.   The good thing about the plugin thing is that there is competition.   There would still be plenty of room for 3rd party implementations of such functionality,  if neovim had a standard method of plugin organization/distribution.    The removal of ex mode - I'm still angry because of this one   Do you actually use it? Ex commands on the commandline are still supported..."
neovim,2iwvkh,SplinterOfChaos,-2,Sun Oct 12 01:57:45 2014 UTC,"Because I really do not care about new users in the first place.   I'm glad you are not only thinking about yourself.   Nah, I guess my wording was a bit misleading. The point I wanted to make: You're a new user for 2, 3, 4 or 5 months, but you are a user for much longer! I ""learned"" vim about 5 months and then I was comfortable with it, so I would say, after 5 months I wasn't a newbie anymore. And now I'm a everyday vim user for over 7 years, and that's the point: You not only have to satisfy the newbies, if they really want it, they will learn it. You also have to be pleasant for the ""old"" users! And doing nasty things might fucks them off.    The removal of ex mode - I'm still angry because of this one   Do you actually use it? Ex commands on the commandline are still supported...   Yes I do, as much as I can (and as you know: You always learn new things when using vim). The point I want to make: You still can use ex mode from the commandline - so there actually is a ex-mode parser and executer in neovim. Why the hell is there an parser, runner and everything else for ex mode in neovim, but not a god damn frontend for me to use it within neovim? That's like ""Hey, we have this absolute killer-feature here in your program, but you actually can not use it, because we do not provide an user interface for it!"" - that's just ridiculous!"
neovim,2iwvkh,musicmatze,1 point,Sun Oct 12 10:47:21 2014 UTC,"Ex mode has not been gotten rid of--you're referring to a bug report where are large number of people said they'd be in favour of removing it, but no one has even submitted a PR for it."
neovim,2ie9ru,SplinterOfChaos,-5,Sun Oct 5 23:03:47 2014 UTC,How about funding the poor developers of Neovim? To be honest I dont give two fucks about icc holland.
neovim,2ie9ru,Erakko,4,Mon Oct 6 03:27:00 2014 UTC,Because it is Bram's charity. Neovim wouldn't be here if it wasn't for his work with Vim.
neovim,2ie9ru,passingby,-3,Mon Oct 6 04:06:04 2014 UTC,Something to do with the poor children of Uganda?
neovim,2ie9ru,Erakko,5,Mon Oct 6 04:25:25 2014 UTC,"If you want to fund the developers of vim, you can always sponsor it on bounty source: https://www.bountysource.com/teams/neovim"
neovim,2hz08s,bakkegaard,4,Wed Oct 1 07:36:21 2014 UTC,Congrats. When is the work on NeoBash starting ? :-)
neovim,2hz08s,macarthy,5,Wed Oct 1 12:46:53 2014 UTC,This project shows some promise :)
neovim,2hz08s,tarruda,2,Wed Oct 1 21:32:45 2014 UTC,"The relationship is actually quite different. Neovim is a refactor of vim, while Elvish doesn't take any code from existing shells. It's a total rethink.  Thanks for the mention though!"
neovim,2hz08s,xiaq,1 point,Mon Oct 13 00:12:58 2014 UTC,Indeed. But fish and zsh are also some good shells!
neovim,2hz08s,musicmatze,1 point,Fri Oct 3 18:37:00 2014 UTC,zsh?
neovim,2hz08s,mlk,2,Tue Oct 28 07:32:42 2014 UTC,Cheers!
neovim,2hpx7d,fmoralesc,7,Sun Sep 28 19:16:00 2014 UTC,"I hope so.  EDIT: To expand a bit. As far as I know, the GUI clients will have unrestricted access to the buffer contents, and should be able to display them as they wish. I would expect initial clients to be conservative in this regard, though."
neovim,2hpx7d,justinmk,6,Sun Sep 28 20:45:52 2014 UTC,"I'm also hoping we can add advanced attributes to the core, so that any coordinate (or at least row+column) can be annotated with rich metadata. This would enable things like floating regions (which could achieve ""inline figures"").  The difficult problem is figuring out how to efficiently move around the coordinate metadata so that it ""follows"" text as editing occurs."
neovim,2hpx7d,fmoralesc,3,Tue Sep 30 01:34:57 2014 UTC,I think the best would be to add start and end points that signaled some extra metadata assigned to a region. This would be similar to what word processors like wordperfect did back in the day. This is efficient because editing inside the region doesn't affect the metadata.
neovim,2hpx7d,SplinterOfChaos,2,Tue Sep 30 03:13:33 2014 UTC,"Maybe look into the marks feature. Haven't peered into the code too much yet, from from the help docs, marks remain consistent with line insertions and deletions unless you deleted the marked line, in which case you delete the mark. Marks save the column position as well, but from my testing, if you modify a marked line, the column position doesn't update."
neovim,2hpx7d,justinmk,1 point,Sun Oct 5 23:23:44 2014 UTC,That's a great idea.
neovim,2hgqiw,jzelinskie,11,Thu Sep 25 20:39:13 2014 UTC,I use set synmaxcol=2048 in order prevent huge slow downs from syntax highlighting in vim.
neovim,2hgqiw,robertmeta,1 point,Thu Sep 25 23:30:14 2014 UTC,"Holy shit, this really helped. Thank you so much! Although I'm not sure how exactly this works. There are no columns over 2k characters long in that file."
neovim,2hgqiw,greduan,2,Fri Sep 26 08:23:32 2014 UTC,"There is some voodoo in there -- I have it set much lower than 2048 -- and it helps performance a lot.  In my case, I noticed the same thing (better performance without crossing the length threshold).  I recommend you set it to whatever you max width lines are in your codebase."
neovim,2hgqiw,angelic_sedition,2,Fri Sep 26 23:19:00 2014 UTC,Neovim will probably have a WAY better syntax highlighting system. So the improvements will probably be huge.
neovim,2hgqiw,SplinterOfChaos,1 point,Thu Sep 25 21:23:28 2014 UTC,"I hope so. With regards to the above discussion, even if lines that are 1000 long are in view, vim gets pretty slow for me. Though I guess I never really need that much."
neovim,2h8p9f,_pi,1 point,Tue Sep 23 16:31:13 2014 UTC,I do not know personally.  But it would fit what I understand about the way NeoVim handles long-running commands outside of the main vim process.
neovim,2glhze,ingvij,21,Tue Sep 16 21:05:42 2014 UTC,"Fair question  Currently I'm focused on making the API/msgpack/plugin infrastructure as stable as I can, and for one simple reason: Every other Neovim-related project(client libraries, plugins, UI programs, etc) depend on it, so it needs to be very solid in order to allow parallel work such as the go client to happen without the need to major rework in the future.  Now, to reach the stable point in the API/msgpack/plugin infrastructure I still need to do the following:   Add first class functions to the API and implement API functions for defining ex commands, autocommands, mappings and other stuff currently only possible in vimscript. I'm working on that right now and will probably open a PR later today. Write a plugin host specification to help programmers bring Neovim extensibility to other languages/platforms(Some ideas were briefly discussed here)   After these two tasks are achieved, the API will leave alpha state and it will be safe to start developing plugins for Neovim. Beyond that here's an idea of what we still needs to be done before a release:   Refactor some parts of the editor that write to the screen directly(user messages, command-line and ex mode) to use the internal screen state Finish work on redraw events, which will pave the way for externalizing UIs Using redraw events, write a lot of integration tests that verify UI features Implement a cross-platform UI using redraw events Delete a lot of legacy code related to terminal-handling. Port to windows(which will be simpler after the above task)   When this is done, we can ""freeze"" features and start testing for the first official release. We have high hopes to make the first release by the end of the year.  With that said, we are always trying to keep the master branch stable, so its already good for daily use if you only need python plugins(I use it full time). You can read some more detailed help of what has been done so far with :help nvim-intro  Yes, Neovim is behind schedule, but it is because of technical barriers I failed to see at the start of the project which lead me to estimate the required time badly, but rest assured that Neovim is still going strong!"
neovim,2glhze,tarruda,2,Wed Sep 17 14:40:34 2014 UTC,"tarruda, thanks for the reply. I'll try to switch to nvim for my daily tasks (which is basically python coding).  Is VimL -> Lua targeted to the first official release?"
neovim,2glhze,tarruda,4,Wed Sep 17 15:34:38 2014 UTC,"I don't think so. While most of the parser/translator was already implemented by zyx, there's still a lot of ex commands and functions that would need to be reimplemented on top of the C api(which is what the generated lua code will use) and that is too much work to be done by the end of year. After the first release, this will be my focus though"
neovim,2glhze,tarruda,1 point,Wed Sep 17 16:23:34 2014 UTC,"I see.. Is this a single, large work or can it be divided in multiple mini tasks? I'm quite initeresed in helping even though I'm not sure if a have the required C skills..."
neovim,2glhze,MrPopinjay,3,Wed Sep 17 19:44:53 2014 UTC,"It can be split into multiple tasks. If you want to contribute to the translator, check this out: https://github.com/neovim/neovim/issues/871"
neovim,2glhze,tarruda,1 point,Thu Sep 18 17:59:15 2014 UTC,"Slightly related question: As VimL is to be translated into Lua, is the intention that we will be able to also just use Lua in place of VimL?  Thanks :)"
neovim,2glhze,MrPopinjay,5,Fri Sep 19 08:31:14 2014 UTC,"The main goal of Lua translation is to remove tons of legacy code, not to replace vimscript, which will remain the main scripting interface for the editor.  This will be done because the way vimscript is currently implement is very bad(eg: there's no parsing or ASTs, just a lot of spaguetti C that walks through strings executing what it finds). You can get more details here  With that said, eventually it will be possible to write Neovim plugins using any language without having to know any vimscript. An idea of how this might look like in python:   vim.define_autocommand('VimLeave', handler1) vim.define_command('UserCommand', handler2) vim.define_mapping('i', recursive=False)   The goal is to have a  C API that is exposed via msgpack-rpc(or to libraries loaded with dlopen for example), and through this API it will be possible to do any kind of scripting that is currently only possible in vimscript."
neovim,2glhze,tarruda,1 point,Fri Sep 19 12:13:40 2014 UTC,Neat! So you'd still need the external interpreter for these other languages then? If we want no dependencies we should still be using vimL?  Thanks :)
neovim,2glhze,MrPopinjay,3,Fri Sep 19 14:28:06 2014 UTC,"So you'd still need the external interpreter for these other languages then?   Yes but Nvim doesn't need to be built with support for an external interpreter, the user may install it separately. For example, say you have nvim installed and need to use a python plugin(assuming you only have vimscript plugins), here's what you need to do:   Install python(eg: sudo apt-get install python) Install neovim python module: (eg: sudo pip install neovim)   After that, the next time you run nvim, has('python') will return 1 and most python plugins should work. For more details on how that python is detected/loaded by nvim, see this file   If we want no dependencies we should still be using vimL?   Once the translator is merged, pure Nvim installations may support plugins written in Lua since it will bundle the luajit runtime. But that is just a side-effect, it doesn't mean we'll start dropping vimscript in favor of Lua"
neovim,2glhze,7sins,2,Fri Sep 19 17:33:02 2014 UTC,"Aye, installation of new packages is super easy, but some people really like avoiding dependencies. :)  Thanks Tarruda!"
neovim,2glhze,surnia,5,Fri Sep 19 17:59:09 2014 UTC,"Good question; I've also been checking on neovim progress since it was started. And since then, a lot has gotten done, for example the async interface is already fully useful afaik(which in one of the major improvements neovim brings). Also remember that some of the other goals were cleanup of the vim-codebase; you won't see much of that except for commits.  I just took a look at https://github.com/neovim/neovim/commits/master and for the last few hours there was at least one commit per hour; So I'd not say that development is slow. It simply needs a lot of man-hours before it is done. And those are being invested by a lot of people. Of course the initial hype has also quieted down. Now its time to be patient, check the progress regularly, and start using it when it seems stable and useable to you. I would say thats the only thing anybody who isn't working on the project can do."
neovim,2glhze,Erakko,2,Tue Sep 16 21:18:41 2014 UTC,"There's a first release milestone which includes a number of issues, but new issues are also often added to that milestone and closed.   I agree with /u/7sins that you should use neomvim when you feel it's good enough, and not worry about an actual release. I've been using neovim since June of this year, and I have not had any major issues. But then I don't use many plugins, and some remaining compatibility issues may be a deal breaker for you."
neovim,2glhze,vompatti_,1 point,Tue Sep 16 21:49:10 2014 UTC,Been waiting for a windows build...
neovim,2glhze,Erakko,1 point,Wed Sep 17 12:58:32 2014 UTC,You could always build it yourself (afaik)
neovim,2g9gzd,countvonfrisch,2,Sat Sep 13 03:48:08 2014 UTC,"I don't have OSX so I can't say for sure,  but if homebrew needs the released msgpack version, the build won't work because as of yesterday we are using the msgpack v5 branch"
neovim,2g9gzd,tarruda,1 point,Sat Sep 13 09:37:33 2014 UTC,You should compile it yourself for the time being. Neovim is moving too fast for the build scripts to keep up.
neovim,2g9gzd,pegasus_527,1 point,Sat Sep 13 07:18:52 2014 UTC,Using the homebrew formula you can only install from the most recent git commit.
neovim,2fwtnb,0x2,10,Tue Sep 9 14:56:21 2014 UTC,Love these updates. Great communication from the Neovim team.  Keep up the good work
neovim,2fwtnb,macarthy,4,Tue Sep 9 15:24:40 2014 UTC,The Python client looks already quite nice. I like the API!  I wonder when they're ready for a first test version.
neovim,2fwtnb,tr4ce,1 point,Tue Sep 9 16:13:42 2014 UTC,"I'm loving the updates here, little shame it's now every other month.   I wonder if there is any mid-level updates?  What I mean by that is git commits and pull requests can be too technical and too 'raw'.  Email lists (if any, I don't know) would also be a little too much maybe.   These are no where near often enough now, but summarise well.   Is there a rss feed or email list for a quick summary of the past week or twos updates?"
neovim,2fwtnb,parnmatt,0,Thu Sep 25 12:13:24 2014 UTC,
neovim,2fwxpy,FNHUSA,3,Tue Sep 9 15:34:18 2014 UTC,"At the moment it's not very different from standard Vim (save a few features for developers). Mostly the internals are changing a lot. So for now, I think it's best to go with whatever you can get easiest :)."
neovim,2fwxpy,aktauk,1 point,Tue Sep 9 15:47:00 2014 UTC,Is it possible to swap escape and capslock within the same file as all your other settings/cfgs?
neovim,2fwxpy,RedditBronzePls,1 point,Wed Sep 10 21:50:44 2014 UTC,"AFAIK there's no way to do that for just vim/neovim, you have to alter that setting system wide."
neovim,2fwxpy,symmetry81,2,Sun Sep 28 14:03:06 2014 UTC,"I have not used neovim, nor kept up with it's development, but it's my understanding it is still not stable. For that reason I would suggest using vim for the time being. They should ultimately have the same interface, but neovim will have an improved plugin system and cleaner code/configuration which will be nice when you are more familiar with the editor and interested in customization, but it should not be a factor for you at the moment."
neovim,2fwxpy,kcuf,1 point,Wed Sep 10 02:00:16 2014 UTC,I have been been using an nvim build from an ubuntu ppa on 14.10 that has been very stable.  Obviously the nightly builds will vary but so far I have had no issues.
neovim,2fwxpy,whiskerbiskit,2,Fri Nov 14 20:48:23 2014 UTC,Neovim isnt ready yet. Use regular vim from www.vim.org.
neovim,2fwxpy,Erakko,1 point,Thu Sep 11 05:10:51 2014 UTC,Yeah I have been for the last few weeks.  My .vimrc and vim folders are already messy
neovim,2fwxpy,Erakko,1 point,Thu Sep 11 13:35:17 2014 UTC,Ah. Good. I have bern using vim for like ~5 years or so and I still learn something new every now and then :) It takes some time to your vimrc and folder to stabilize. I have my config at dropbox :)
neovim,2fwxpy,MrPopinjay,5,Thu Sep 11 20:07:28 2014 UTC,"Dropbox? Come on, we're programmers. Use git :)"
neovim,2fwxpy,Erakko,1 point,Fri Sep 19 08:27:40 2014 UTC,"yeah, have to set that up one day!"
neovim,2fwxpy,ntxhhf,1 point,Sat Sep 20 10:28:00 2014 UTC,"Holman's Dotfiles is a super easy bootstrap into getting your config, just fork and pull it down, then customise away. You need to set aside about an hour or so to get it all worked out, but once you do, keeping everything synced across machines is a breeze."
neovim,2f2lme,pegasus_527,11,Sun Aug 31 09:05:20 2014 UTC,Good thing that they realised it sooner than later. I wasn't convinced a language that hasn't even hit 1.0 should be used in any serious project.
neovim,2f2lme,maskalor,24,Sun Aug 31 09:14:21 2014 UTC,"IMO more importantly it also shows that tarruda is willing to distance himself from his personal pet-requirements, which makes me confident in neovim becoming a success :)"
neovim,2f2lme,maskalor,9,Sun Aug 31 09:31:03 2014 UTC,That's a good point.
neovim,2f2lme,robertmeta,7,Sun Aug 31 10:00:20 2014 UTC,"Yep, I said the exact thing on the other thread: http://www.reddit.com/r/vim/comments/2f2ll4/neovimneovim_pr_moonscript_support_dropped_in/   It is a fantastic sign for the project, doubly so because he defended it against lots of people (myself included) screaming ""Moonscript is an idiotic idea"" -- and was still willing to go ""whoops, bad idea, shifting gears""."
neovim,2f2lme,youngbull,1 point,Mon Sep 1 03:01:10 2014 UTC,Luascript is still being used as the testing language. Does this effect the  possibility of using valgrind to look for memory problems?
neovim,2f2lme,aktauk,3,Mon Sep 8 13:31:21 2014 UTC,"No, it doesn't. The integration tests can still be run under valgrind (or ASan, which is faster) because they don't use LuaJIT. The integrations tests were inherited from vim, and are mostly in vimscript. We're transitioning them to Vroom.  To summarize: only the unit tests can't be memchecked."
neovim,2f2lme,youngbull,1 point,Mon Sep 8 15:19:39 2014 UTC,Wouldnt it be preferable to also be able to run the unit tests with memcheck? I know I always do...
neovim,2f2lme,aktauk,1 point,Tue Sep 9 09:18:28 2014 UTC,"Yep, it would. But I also like the flexibility LuaJIT (and its ffi) gives. Also the unit tests as-is leak a lot of memory, so running them under valgrind would just print a lot of leaks, even if it worked. They're quick and dirty."
neovim,2evdbd,hudsy,6,Thu Aug 28 23:44:33 2014 UTC,Glad you like it. Personally I'm looking forward to see a package manager that does not block and shows progress information while downloading/updating
neovim,2evdbd,tarruda,1 point,Fri Aug 29 00:44:25 2014 UTC,"I mentioned on the mailing list that I had a proof of concept with a port of vim-plug, not sure if you saw it (I kind of botched the delivery).  https://github.com/junegunn/vim-plug  I haven't published the code in any usable manner though, yet."
neovim,2evdbd,justinmk,1 point,Fri Aug 29 07:25:16 2014 UTC,"That looks really cool, and a nice showcase for Neovim's async capabilities!"
neovim,2evdbd,tarruda,1 point,Fri Aug 29 11:31:01 2014 UTC,Since this will be so easy to use and even more with the new plugin architecture. Could we have more than one quickfix list?
neovim,2evdbd,SplinterOfChaos,6,Sat Aug 30 16:54:16 2014 UTC,I'd like to see a fork of syntactic that uses jobstart. I don't know why this didn't occur to before.
neovim,2evdbd,MrPopinjay,1 point,Sat Aug 30 16:14:02 2014 UTC,I would LOVE this.
neovim,2evdbd,ingvij,2,Fri Sep 19 08:33:03 2014 UTC,"This is a great feat that will be basis for future (and awesome) things, such as code checking as you write (switching from input to normal mode could trigger), test running in background and other quality checks..."
neovim,2em7rv,ibn-alfatal,2,Tue Aug 26 11:06:14 2014 UTC,Just in case you haven't seen the Tweet: https://twitter.com/Neovim/status/504448350221901824  The short story: life was especially busy.
neovim,2em7rv,passingby,1 point,Wed Aug 27 04:20:45 2014 UTC,"Cool thanks!   Yep, life can be busy sometimes :)"
neovim,2em7rv,rraghur,1 point,Wed Aug 27 09:00:16 2014 UTC,Think its in the works... Saw a commit a couple of days ago
neovim,2dbgpr,sztomi,5,Tue Aug 12 08:06:19 2014 UTC,"it's a msgpack-rpc based service. running neovim like this:  NEOVIM_LISTEN_ADDRESS=/tmp/neovim-socket nvim   creates a unix socket at /tmp/neovim-socket that accepts msgpack rpc commands. I've been playing with this for a few days, trying to build for fun a ui rendered in QML with over-the-top animatons :)  These links might get you an overview of where things are at:  https://github.com/neovim/neovim/pull/781  https://github.com/neovim/neovim/issues/942  So people have apparently made proof-of-concept ui implementations, but I'm not sure if anyone started up a serious one yet.  My dream is a neovim plugin for Qt Creator that let's me have the full vim experience inside Creator and still use its IDE features."
neovim,2dbgpr,metellius,1 point,Tue Aug 12 09:17:52 2014 UTC,Thank you! Do you happen to have your QML implementation on github or similar? I'd be interested in seeing it.
neovim,2dbgpr,metellius,3,Tue Aug 12 09:37:33 2014 UTC,"I'm nowhere near even making a commit, like I said i've only been playing for a few days. Much difficulty was in understanding the rpc api at all, and overcoming a bug in the framework that I used (neovims api uses integers as method id's, but the msgpack-rpc spec specifically says that the field should be a string)  But if I do get something going, I would definitely post it on /r/neovim :)"
neovim,2dbgpr,SplinterOfChaos,1 point,Tue Aug 12 10:02:50 2014 UTC,"neovims api uses integers as method id's, but the msgpack-rpc spec specifically says that the field should be a string   Where's that? I've been going off of this which clearly states to use ints: http://wiki.msgpack.org/display/MSGPACK/RPC+specification#RPCspecification-MessagePackRPCProtocolspecification  Just so you know, one github member has been working on a Qt client, though s/he hasn't done anything with it recently. Maybe you guys could work together, or at least take some inspiration. https://github.com/equalsraf/neovim-qt  Lastly, we've been having a little trouble as of late. You should be fine for getting your client off the ground, but if it runs too long you might find your messages getting thrashed. https://github.com/neovim/neovim/issues/1063"
neovim,2dbgpr,metellius,1 point,Sat Aug 16 03:59:56 2014 UTC,"I was trying to get things working as a prototype first with the msgpack-rpc ruby gem, and firing off the ""0""-method to get the api. Whatever I did from the client side, I would just get ""method should be a positive integer"". I eventually tracked it down to this in msgpack-rpc source:  https://github.com/msgpack-rpc/msgpack-rpc-ruby/blob/master/lib/msgpack/rpc/session.rb#L186  note method = method.to_s, which will convert the method argument to a string no matter what. So i tried changing that in the msgpack-rpc source, and hey, it worked. Next I looked at the spec that you linked, which states:   method  The string, which represents the method name   The type and msgid sequence numbers should be ints, yes, but the actual method should be a string, no?  And now that I have you here: here's another msgpack-rpc issue that I bumped into: msgpack-rpc ruby regards a notification (such as what I assume you get after using vim.subscribe (I haven't actually gotten it working yet)) as an actual error, and will only handle them when it's a response type notification. See the source here:  https://github.com/msgpack-rpc/msgpack-rpc-ruby/blob/master/lib/msgpack/rpc/transport/unix.rb#L101  A japanese guy wrote a blog post complaining about the exact same issue, and even ended hacking up a pull request (that never got merged). What is your take on this? Might this be the ruby library not fully implementing what it should, or might neovim be using msgpack-rpc for more than the spec says?  As for neovim-qt, that's just a abstraction library that facilitates msgpack-rpc communication through more qt-ish mechanisms, not an UI itself. It's definitely made for building a UI though, and I have already started building my thingy around neovim-qt."
neovim,2dbgpr,SplinterOfChaos,1 point,Sat Aug 16 05:24:49 2014 UTC,"the actual method should be a string, no?   Yeah. And the arguments a list.   Whatever I did from the client side, I would just get ""method should be a positive integer"". I eventually tracked it down...   That's outrageous!   [a guy] even ended hacking up a pull request (that never got merged)   I was going to suggest sending one about the to_s issue, but never mind.   Might this be the ruby library not fully implementing what it should,    We can't say that the ruby library is doing its job when it thinks notifications are errors, can we? This repo only has 6 commits, all of them between August of last year (1) and January (5), so obviously it's not being maintained and a search of github reveals no more up-to-date RPC alternatives.   Are you comfortable with Unix sockets? If so, you can just use a non-RPC msgpack library for ruby to serialize the data and send it yourself through the socket. I ended up doing that because the C++ msgpack library I started with doesn't.   or might neovim be using msgpack-rpc for more than the spec says?   I could not be bothered to read neovim's source on this subject. I've been writing my client in accordance with the specs and have found no discrepancies.   As for neovim-qt, that's just a abstraction library that facilitates msgpack-rpc communication through more qt-ish mechanisms, not an UI itself.   Check out the tb-gui branch. I haven't tested it, but I think I saw a screenshot and he's got code that subscribes to various ""redraw"" events hidden in src/gui that I used as a reference."
neovim,2dbgpr,metellius,1 point,Sat Aug 16 06:21:15 2014 UTC,"We can't say that the ruby library is doing its job when it thinks notifications are errors, can we?   It thinks unsolicited notifications are errors, and only regards responses as being solicited. I really don't know what's correct here, I would just like to shed some light on my findings to make extra sure neovim is following the spec correctly this early in development, before plugin authors really start investing time in the api.   This repo only has 6 commits, all of them between August of last year (1) and January (5), so obviously it's not being maintained and a search of github reveals no more up-to-date RPC alternatives.   Yeah, but that doesn't have to mean it's incorrect. I noticed their api documentation is actually hosted on msgpack.org itself and figured it might be somewhat official.   Are you comfortable with Unix sockets? If so, you can just use a non-RPC msgpack library for ruby to serialize the data and send it yourself through the socket. I ended up doing that because the C++ msgpack library I started with doesn't.   I have learned a lot about unix sockets since I started hacking on this :) But, I'm not going to go with anything ruby anyways here, that was only for experimentation. For my QML prototype thingy I will be using neovim-qt and C++ instead (I work with Qt in my day job, so I'm more proficient here)   Check out the tb-gui branch[1] . I haven't tested it, but I think I saw a screenshot and he's got code that subscribes to various ""redraw"" events hidden in src/gui[2] that I used as a reference.   Cool, I didn't notice that! That really comes in handy. A bit weird that it's kept in its own branch though IMO."
neovim,2dbgpr,SplinterOfChaos,1 point,Sat Aug 16 06:58:06 2014 UTC,"It thinks unsolicited notifications are errors   Far as I can tell (and I even tried to find a source), notifications are unsolicited by design.   I noticed their api documentation is actually hosted on msgpack.org itself and figured it might be somewhat official.   Ditto for Haskell, but its implementation is only a month old.  ""The list of msgpack implementations on the msgpack.org website is generated automatically.""   A bit weird that it's kept in its own branch though IMO.   It makes total sense, but I forgot to mention that s/he based it off of an un-merged PR by turruda: https://github.com/neovim/neovim/pull/781  Not sure what the status is since it hasn't been updated in a while."
neovim,2dbgpr,tarruda,1 point,Sat Aug 16 07:45:37 2014 UTC,"Hi, I have just created a PR with some changes that make Neovim compliant with msgpack-RPC specification: https://github.com/neovim/neovim/pull/1121  Would you mind trying the ruby msgpack-RPC client against that branch?"
neovim,2cpi23,Quick_A_Distraction,2,Tue Aug 5 17:51:24 2014 UTC,"Hey! Could you please log this on the issue tracker: https://github.com/neovim/neovim/issues  I have a suspicion about what it could be, yet I didn't think that change was merged in yet..."
neovim,2cpi23,aktauk,1 point,Tue Aug 5 18:15:08 2014 UTC,"Cool, I just submitted the issue."
neovim,2cpi23,surnia,1 point,Tue Aug 5 22:17:30 2014 UTC,This has been fixed on AUR's side. It was something in the PKGBUILD: https://aur.archlinux.org/packages/neovim-git
neovim,2coz87,pradeek,8,Tue Aug 5 15:03:36 2014 UTC,The executable is called nvim so it won't overwrite vim when you install it.
neovim,2coz87,pourbien,4,Tue Aug 5 15:14:07 2014 UTC,Thanks. Got it working.
neovim,2coz87,justinmkw,3,Tue Aug 5 16:43:23 2014 UTC,"The coolest user-visible changes right now are the jobstart() function and JobActivity autocmd. Here's an example to play with: https://github.com/neovim/neovim/pull/475#issuecomment-39655308  The API and system() command are build on the job control code, so it's well beyond ""playing around"" status. Although we might change the interface a little bit, I'd say it's safe to start making plugins and scripts based on jobstart() and JobActivity (any breaking changes will not require much refactoring)."
neovim,2coz87,macarthy,1 point,Tue Aug 5 23:31:44 2014 UTC,Cool. Will give it a go.
neovim,2coz87,justinmkw,3,Wed Aug 6 01:10:17 2014 UTC,"The website could be clearer on these points :   Is it safe to install ?  How do I  install it? What about my current  vim plugins and settings ?   I had started a pull request for to modify the homepage to address these points, but I got really busy with work.   Was thinking of using some JS OS detection to advise on installation method"
neovim,2coz87,MrPopinjay,5,Tue Aug 5 15:46:11 2014 UTC,"Reason we haven't put much effort into making it very clear at this point is because not making it clear is a convenient way of filtering out people who aren't willing to deal with some hiccups :)  I very much want to get to an 'alpha' state by the end of the year, so by then the site will be more explicit.  Pull requests are also welcome! OS detection would be slick, although there's a risk in moving the installation instructions to the website, because there's more friction than simply editing the wiki page (which is also a repo BTW, but doesn't need pull requests)."
neovim,29860b,musicmatze,5,Fri Jun 27 08:21:41 2014 UTC,"Any contributions by authors who did not sign the CLA remain under the Vim license. This is indicated in #883, but I will make it more explicit in the README and LICENSE.  It's fine if you don't agree to the relicense, but please leave a comment saying so on #883.   https://github.com/neovim/neovim/issues/883"
neovim,29860b,justinmk,2,Fri Jun 27 13:43:07 2014 UTC,What about those that donated? They weren't told about the plan to re-license....the work
neovim,29860b,openstandards,1 point,Thu Jul 10 00:06:47 2014 UTC,What license was it under before?
neovim,29860b,oniony,1 point,Fri Jun 27 10:53:05 2014 UTC,"mmhm... The repo contained a copy of the vim-license, so I guess it was vim-license."
neovim,29860b,pourbien,1 point,Fri Jun 27 11:20:49 2014 UTC,"Here's the commit, with links to an issue and a pull request.  Apparently their rationale is that II.2.c says ""You can choose what license to use for new code you add."".  I think what's going on here is that before that commit was added all contributions were made under the vim license. Now all subsequent modifications are under the Apache 2.0 license. It's hard to tell exactly what they're doing because they just added a LICENSE.txt and they neglected to annotate the source files to say ""this is vim license"", ""this is apache license""."
neovim,29860b,justinmk,3,Fri Jun 27 12:15:13 2014 UTC,"Yes, that's right. This is a stop-gap for new contributions. Most of the code is still under the Vim license. Finding out which code is under which license is academic for the time being, because it's impossible to use one part without the other. To find out which code is under which license, you can look at the logs--but there's no reason to do so until we reach a point where most of the code is ""original Neovim code"" which could conceivably be separated from the Vim-licensed code."
neovim,29860b,pourbien,1 point,Fri Jun 27 13:47:08 2014 UTC,"Aha, okay.  By the way, vim-license.txt II.1 says ""This license text must be included unmodified."" but that commit removes vim-license.txt and I can't find the license anywhere else in the project."
neovim,29860b,justinmkw,2,Fri Jun 27 14:18:51 2014 UTC,"vim-license.txt is something we added, it is not in Vim. The Vim license is included, unmodified, in the new LICENSE file. However, I will also make this more clear at the top of the LICENSE file."
neovim,29860b,pourbien,2,Fri Jun 27 14:49:04 2014 UTC,is this legal?
neovim,29860b,TheBB,5,Fri Jun 27 13:28:02 2014 UTC,"When you contributed the project was under the vim license. Your contribution remains under the vim license. Any future contributions you make (after signing the CLA) will be Apache 2.0 licensed though.  The vim license says it's okay, and those are the terms under which you contributed your code."
neovim,29860b,justinmk,1 point,Fri Jun 27 14:25:03 2014 UTC,"I don't know what your ACK has to do with this, but it says in the license file that   Any parts of Neovim that originated in Vim are licensed under the Vim license."
neovim,29860b,TheBB,-3,Fri Jun 27 13:25:46 2014 UTC,"I contributed to neovim. I never said ""yes"", because noone asked me if it is okay to relicense my work. That's what I mean!"
