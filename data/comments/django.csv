django,3e6at2,semigulov,1 point,Wed Jul 22 07:49:53 2015 UTC,"There's gone some really good effort into this package, even compatibility down to Django 1.4, it's nice to see that people still care enough about all the supported version. The README is nice and clear and complete as far as I can see.  But there are some really strange code smells in it and even more problematic: I'd never ever use a template filter to watermark my images. That's just odd."
django,3e66jz,TheBigBlabberMouth,2,Wed Jul 22 06:54:25 2015 UTC,"Off the top of my head,  did you try  AnswerModel.objects.order_by('userModel__somefieldnamehere') ?  Edit: proper formatting."
django,3e66jz,_eka_,1 point,Wed Jul 22 07:53:47 2015 UTC,This works for me
django,3e66jz,super_cool_kid,2,Wed Jul 22 13:21:30 2015 UTC,I believe it should be userModel__last_login. You should use two underscores when going to a field on a related model.
django,3e66jz,moustachaaa,1 point,Wed Jul 22 11:51:58 2015 UTC,"Reddit markup is swallowing the underscores in your post. Wrap your code in backticks: ``, or indent by 4 spaces."
django,3e5dpp,Mackinstyle,4,Wed Jul 22 02:15:41 2015 UTC,"To deserialize ten objects from a dictionary, first figure out how to deserialize one object. Then do it 9 more times :)"
django,3e5dpp,ubernostrum,3,Wed Jul 22 02:49:34 2015 UTC,"What you're trying to do sounds very straight forward, so I'm unsure what the issue you're having is. Are you having trouble with ""simple"" tasks like deserializing a json object, or creating new database records? Or is there an angle I'm missing?  Also, what does ""a clear path towards serialization too"" mean? What are you trying to serialize? Pre-existing database records back into JSON?"
django,3e5dpp,pyr3,1 point,Wed Jul 22 02:50:21 2015 UTC,"Yeah, so a GET for a record can allow me to perform a query to get both a record and n related records, serialize them all as a json object and return that.  I think I might just have focused too much on the ModelSerializers and ViewSets and as I play more with the building blocks of those, it will become more evident?"
django,3e5dpp,Airith,1 point,Wed Jul 22 02:58:47 2015 UTC,Provide more examples and code. It's too vague to answer.
django,3e5dpp,Airith,2,Wed Jul 22 03:20:11 2015 UTC,"My apologies.  Here's an example of what I want to do.  I'm not sure what other code I can provide as I'm looking for a push in the right direction. I know it'll involve a DRF Serializer that works with a few of my models.  Basically, I want to be able to store key/value pairs in my database without knowing the keys or data types in advance.  from_json = {   'name' : 'Bob',   'age' : 27,   'some_key': 1235.12,   'some_other_key': ""Hello World!"" }  another_from_json = {   'name': 'Not Bob',   'age': 19,   'a_third_key' : 'muffins' }   And my models:  class Person(models.Model):     name = models.CharField(max_length=50)     age = models.PositiveSmallIntegerField()  class PersonAttribute(models.Model):     person = models.ForeignKey('Person')     key_name = models.CharField(max_length=50)     data_type = models.PositiveSmallIntegerField(choices=ATTRIBUTE_TYPE_ENUMS)  # string, int, etc.     data = models.TextField()  # TODO: Probably not a text field."
django,3e5dpp,granduh,2,Wed Jul 22 03:30:54 2015 UTC,"I think I see.  person = Person() for k, v in json.items():     if hasattr(person, k):         setattr(person, k, v)     else:         person_attribute = PersonAttribute()         person_attribute.person = person         person_attribute.key_name = k         person_attribute.data = v         person_attribute.data_type = something # you'll have to figure this part out, either using isinstance() or something         person_attribute.save() person.save()"
django,3e5dpp,davvblack,2,Wed Jul 22 04:14:03 2015 UTC,Oh wow that's simple.  My head was in the entirely wrong place. I can just create my own instances of models and save them manually.  Thank you so much!
django,3e5dpp,brtt3000,0,Wed Jul 22 04:16:59 2015 UTC,"btw, unrelated to answering your question but you should learn about MongoDB."
django,3e5dpp,granduh,2,Wed Jul 22 03:39:39 2015 UTC,NO! do not use mongo.  Use Postgresql or something.  mongo is garbage.
django,3e69t1,alphabeta77,1 point,Wed Jul 22 07:35:54 2015 UTC,"Can you be a little more specific? Radiobuttons are meant for single choice, did you mean checkboxes?   For a way to store multiple choices in the database, check this package. I'm using it and it works just fine.   For the form, use this field with this widget."
django,3e4ybn,askvictor,1 point,Wed Jul 22 00:08:52 2015 UTC,Any dynamic interaction on a page will be done through javascript.  It's the only way.
django,3e4ybn,elbiot,1 point,Wed Jul 22 04:10:13 2015 UTC,"That's obviously true, but I think op was asking if there were any pre-rolled django apps that had it all bundled together with just a little bit of config."
django,3e5wht,Greyfoxen,5,Wed Jul 22 05:03:00 2015 UTC,Definitely. Postgres is the way to go.
django,3e5wht,Galmer,3,Wed Jul 22 06:03:49 2015 UTC,"How do you get to the stage of producing a full stack production site for a business, which presumably involves security, without knowing anything about production dbs? :/  Edit: I realise it sounds very judgemental, but its not intended as such. I wouldn't have the confidence personally, to offer a service with a big knowledge gap."
django,3e5wht,Have_you_tried_this,2,Wed Jul 22 07:47:41 2015 UTC,What's wrong with manage.py runserver 0.0.0.0:80 ?  (I am joking BTW)
django,3e5wht,CraigTorso,2,Wed Jul 22 09:17:15 2015 UTC,"SQLite is not Django's backend. It's just a database. You can use anything for the development version — SQLite, MySQL, Postgres. But for production Postgres is most preferable choice. Next is MySQL."
django,3e2wu8,MetalWeirdo,3,Tue Jul 21 15:27:20 2015 UTC,"Why don’t you use an existing support ticket system instead? I’m not using it myself, but I have heard nothing but good about Request Tracker."
django,3e2wu8,hutcherino,2,Tue Jul 21 16:18:49 2015 UTC,"The support ticket system I did is integrated with our JIRA and we have to keep all this info related to our users, that's why I've chosen to do it myself :\"
django,3e2wu8,vangale,3,Tue Jul 21 16:21:17 2015 UTC,"In the djangopackages.com ""Ticketing"" grid you can see there are two packages that can handling incoming emails.  You might want to copy how they are handling it.  You already have recommendations here for Mandrill and rolling your own using Lamson. Other possibilities are:   django-mailbox django-inbound-email, which has backend support for Mandrill, Mailgun, and Sendgrid. sendgrid-eventhooks django-mailgun-incoming"
django,3e2wu8,koed00,2,Tue Jul 21 21:23:50 2015 UTC,"I've been using Mandrill as an email backend. This gives you many extra options, when tracking your emails, like webhooks on opening, tags etc.  There is even a Django integration called DjDrill."
django,3e2wu8,ubernostrum,1 point,Tue Jul 21 17:18:24 2015 UTC,"I've been using Lamson for this, but it now seems to be unmaintained."
django,3e4259,appa_lover,2,Tue Jul 21 20:10:22 2015 UTC,"While I don't understand the full scope of what you're asking, it sounds like syndication might be something you'd find useful.  You can read about Django's implementation here."
django,3e4259,Nicksil,2,Tue Jul 21 20:26:30 2015 UTC,"Very late here but if I understand correctly, this could be a M2M relationship, and then when you want to read another user's feed you can check if the reading user its in the relationship."
django,3e4259,_eka_,3,Tue Jul 21 22:51:40 2015 UTC,"If I understand your question, I do this on http://www.golfledger.com. Users can follow other users and if they choose, see what the people they follow are posting. I'm on mobile but could link you to the app I used for following later if you want."
django,3e4259,dsizemore,1 point,Tue Jul 21 23:20:30 2015 UTC,wait you made golfledger.com?
django,3e4259,dsizemore,1 point,Tue Jul 21 23:26:44 2015 UTC,I did. :)
django,3e4259,dsizemore,2,Tue Jul 21 23:40:45 2015 UTC,very nice job and thats all in django?
django,3e49d9,Mackinstyle,2,Tue Jul 21 21:01:32 2015 UTC,"Are you trying to use this for a cartesian coordinate system -- like for a game or something?  If so, use geometry fields with no srid."
django,3e49d9,gensyms,1 point,Wed Jul 22 03:07:57 2015 UTC,"Yes. For indoor spaces that might one day have a transform to a world frame.  If I use GeometryField, doesn't that mean I'm talking GeoJSON GeometryCollection  instead of Point / Polygon (for my two tables this relates to) ?  And if I leave SRID blank, doesn't it default to WGS84? That would make GIS functions quite wrong when I go to use them."
django,3e49d9,gensyms,1 point,Wed Jul 22 03:14:42 2015 UTC,"I think you can get away with srid=None and you can still use Point, Polygon, etc. (let me know if it turns out that I'm worng)  Edit:  I missed the part about needing to transform to a world frame.  You'll need a valid SRID for that.  Are these buildings inside the bounds of one of the state plane projections?"
django,3e2hna,copybin,1 point,Tue Jul 21 13:24:23 2015 UTC,I was looking precisely for this solution a while back.   Nice and tidy example as always! Great post!
django,3e2x9m,efflicto,2,Tue Jul 21 15:30:12 2015 UTC,Your custom event 'hidden.bs.modal' isn't passing content to your function. I'd need to see more code to help more.    Do you have a function handling the ajax responses like in the middleware you linked?
django,3e2x9m,Airith,2,Tue Jul 21 17:30:24 2015 UTC,"Thanks for your help!  This is the middleware.py: http://pastebin.com/r3m15cWr  This is the js from the modal: https://github.com/FZambia/django-fm/blob/master/fm/static/fm/js/fm.js  This is the message form:                  <ul id=""messages"">                     {% for message in messages %}                         <li{% if message.tags %} class=""{{ message.tags }}""{% endif %}>{{ message }}</li>                     {% endfor %}                 </ul>   And this is the link which I call the modal:  <a class=""btn btn-xs fm-update"" href=""/asset/asset/edit2/3/"" data-fm-head=""Edit inventory""></a>   I think I don't have a function to handle the ajax response. I just tinkered this together."
django,3e2x9m,Airith,2,Tue Jul 21 17:39:31 2015 UTC,This is more complicated than I thought. The modal does make an ajax request. When it receives the ajax request your messages will be in the context. Where are you trying to show the messages?    I'm not sure if the modal's cleared (because it also listens for 'hidden.bs.modal' event) before you get the messages.    I'd need the whole page.
django,3e1v92,x86kernel,3,Tue Jul 21 08:55:58 2015 UTC,Put the numbers in quotation marks.
django,3e1v92,evenisto,2,Tue Jul 21 09:07:36 2015 UTC,That shouldn't matter because the argument gets converted to int anyways.
django,3e1v92,nahden,1 point,Tue Jul 21 09:35:00 2015 UTC,"i already tried ArticleModel.objects.filter(articledatemonth = ""7"") also  ArticleModel.objects.filter(article_date_month = '7')  but, it goes same result :("
django,3e1v92,nahden,3,Tue Jul 21 09:23:27 2015 UTC,Try this  http://stackoverflow.com/a/22043578
django,3e1v92,andrey_shipilov,1 point,Tue Jul 21 09:45:27 2015 UTC,thx... it's work!
django,3e0q3g,dsizemore,2,Tue Jul 21 01:45:47 2015 UTC,Make a custon handler_500 and look at what does the error say.
django,3e0q3g,andrey_shipilov,1 point,Tue Jul 21 02:34:03 2015 UTC,I'm not familiar with custom handler_500 I guess. Can you explain what that does and would allow me to do in this case?
django,3e0q3g,andrey_shipilov,1 point,Tue Jul 21 17:54:12 2015 UTC,"You can override the original behaviour of Django's 500 error which it doesn't display, and see the actual error. It's coming from the server or environment and not from Django."
django,3e0q3g,pydanny,1 point,Tue Jul 21 17:58:57 2015 UTC,Ok thanks. I'll check into that
django,3e0q3g,brtt3000,2,Tue Jul 21 18:33:11 2015 UTC,Yes. I plan to blog about it sometime soon too.
django,3dy7k0,kankyo,2,Mon Jul 20 14:37:36 2015 UTC,Can anybody compare this to django-tables2?
django,3dy7k0,nkuttler,2,Mon Jul 20 19:26:06 2015 UTC,"I've done some cursory comparison here:  https://www.reddit.com/r/django/comments/3dy7k0/we_just_open_sourced_tritables_a_library_for/ctanfdy  One big difference is that django-tables2 has one more level of convenience that tri.tables does not: just get the list of the columns from the model. I've thought about putting that in tri.tables, but it never seemed super useful to me.  django-tables2 also doesn't handle rowspan, doesn't supply bulk edit or filtering it seems. Those are major features that we need on pretty much all pages so that's a big deal to us.   The two-level header grouping system of tri.tables can be nice, but isn't something everyone needs.."
django,3dy7k0,xinaked,1 point,Tue Jul 21 07:07:32 2015 UTC,"yikes.  seems cool, may be reinventing the wheel (my guess is they weren't aware of django-tables2 or it didn't provide what they needed)  sadly, I looked through and found the syntax/semantics gross."
django,3dy7k0,thelindsay,2,Mon Jul 20 20:54:40 2015 UTC,More yikes: py2 only
django,3dy7k0,xinaked,1 point,Mon Jul 20 21:05:32 2015 UTC,"That's what we use ourselves. Py3 would be nice to have of course, but we've focused first on getting the working version out there as is."
django,3dz2qk,ericfc,1 point,Mon Jul 20 18:20:00 2015 UTC,http://djangoci.com/job/pull-requests-javascript/294/console http://djangoci.com/job/isort/3765/console  Seems to be some dependency errors
django,3dy87a,appa_lover,12,Mon Jul 20 14:42:38 2015 UTC,"Django's documentation is the gold standard. It's really good.   Obviously no documentation will cover everything you can possibly do, but Django probably comes the closest in terms of completeness, accuracy, and quality.   For reference I pretty much exclusively use the Django docs and Two Scoops of Django which is a bible of hints, tricks, shortcuts, and best practices."
django,3dy87a,zed_zed_top,0,Mon Jul 20 15:09:31 2015 UTC,sorry for the late reply but do you think if i built a site like say similar to twitter i would learn most of the functionality in the process?
django,3dy87a,zed_zed_top,2,Mon Jul 20 17:47:02 2015 UTC,"You should probably find a good tutorial app to work alongside if you're just trying Django for the first time. The documentation is great, but to a certain degree you need to know what to look for.   The folks at Django wrote one and it's pretty good.   I've heard good things about Tango with Django as well."
django,3dy87a,sriramracer,0,Mon Jul 20 18:26:59 2015 UTC,Yea I have done both Im not as much as beginner as i led on lol
django,3dy87a,validated1,5,Tue Jul 21 01:24:08 2015 UTC,"Add good as they are, the docs can't cover 'absolutely 100% of what you can do'. That's an impossible goal for any amount of documentation for any tool. There will always be something that the authors didn't think of when they wrote the words.  You'll have to also look at Stack Overflow, all questions on IRC, read Two Scoops of Django, and figure out things. Figuring out things Is why we get paid as developers"
django,3dy87a,YouAreSalty,1 point,Mon Jul 20 15:06:17 2015 UTC,alright man ty!
django,3dwhh1,rdom22,5,Mon Jul 20 02:50:31 2015 UTC,You might want to check out http://shoop.io - it is based on Django 1.8 and is a very nice new ecommerce framework. The good thing about it is that it will not constrain you to some specific type of web shop - it will provide you the means to build a site with a powerful webshop integrated.
django,3dwhh1,jaywinx,4,Mon Jul 20 07:26:24 2015 UTC,"Back when I was building an ecommerce site, I looked into Oscar and Mezzanine.  Both seemed too specific about their use cases to be useful for me.  If I recall correctly, they depended on the concept of a catalogue that needed to be maintained, whereas the stuff I was selling was effectively dynamic, so this requirement meant these modules would be working against me.  Django CMS is great... if you're building a content heavy site.  But if you're doing a social networking thing coupled with ecommerce, you may find the expectations of a CMS to get in your way.  I've never used it though, so you probably shouldn't take my word for it.  TL;DR: It sounds like you want something very specific, so it may be a good idea to avoid large modules with comparatively rigid use cases."
django,3dwhh1,searchingfortao,3,Mon Jul 20 03:21:01 2015 UTC,I've worked with oscar and Django cms in the same project. I think you should build your project from scratch because what you want is more different from what both of them offer.  Plus I used Oscar and it is too big for what you usually need and you will eventually end up customizing alot.
django,3dwhh1,bogdanb86,-3,Mon Jul 20 05:42:53 2015 UTC,Learn Django.
django,3dwhh1,rukittenme,3,Mon Jul 20 02:55:28 2015 UTC,"I already have experience with Django and I know that it is fully capable of building this project. What I would like to know is if Oscar, Mezzanine, Django CMS, etc are well structured for this so I don't have to reinvent the wheel."
django,3dwhh1,koed00,3,Mon Jul 20 03:01:05 2015 UTC,"I have no experience with Oscar, but I have with the other options and I'd say avoid them for what you want.  It might be worthwhile just to start doing a mockup of your site in Oscar, shouldn't take you long. If you feel that Oscar is helping you reach your goal rather than working against you, then go that route.  On the other hand, lots of Oscar features can be found as standalone Django apps. Your idea of letting users sell to other users might well fall outside of the Oscar design. So focus on that bit.  A more lightweight alternative you should look at is Saleor. it's more of a starting point than a framework and might be more suited to what you want."
django,3dswq0,charlesbukowksi,19,Sun Jul 19 03:34:28 2015 UTC,"Your question would be phrased if the 3 piece of software you'r asking about were in the same categorie. Django is framework, PHP and Ruby are Language.  So it would be :    Why Python over PHP or Ruby.   Or   Why Django Over Symfony or Ruby On Rails   It's a wide question. And ultimatly is a matter of taste.  I do have a strong preference, a mild indiference and a slight distaste for the 3 susmentioned technologie. But it might not apply to you.  All of this 3 technos are able to produce very nice piece of software. In the world of webdev. ( and that the trick )  Ask yourself what you wanna do with it.    Django is written in python, it's a language used in wide spectrum of field. From webdev to science labs.  Ruby on rails is a ruby framework... .ruby is a well regarded scripting language. You will find it in several sysadmim/devop tools. Symfony ... well, last time i did some PHP, Symfony did not exist. It was cakePHP and it was still messy. But i heard it got better."
django,3dswq0,imcleannow,2,Sun Jul 19 03:53:57 2015 UTC,"If you were building your own reddit, would you use django?"
django,3dswq0,imcleannow,10,Sun Jul 19 04:56:38 2015 UTC,"I dont know. I would have to ask a bunch of question. But, yes, i would use python and django. But again, that's pretty situational and personal.   Here is a article about rewritting reddit from Lisp to Python. ( with a hesitation about django ). The article is maybe a bit old now. But it give you a idea of what went thought the mind of the guy who actually rewrited reddit.   Edit : the link ... http://www.aaronsw.com/weblog/rewritingreddit"
django,3dswq0,gensyms,2,Sun Jul 19 05:22:36 2015 UTC,interesting read from 18 year old Aaron Schwartz.  I had no idea reddit was originally written in lisp.
django,3dswq0,gensyms,7,Sun Jul 19 05:55:53 2015 UTC,"I'm not the person you asked, but here's my answer:  If I were building my own reddit I'd use Common Lisp.  Specifically, I'd use SBCL, Woo, Caveman2 and Postmodern.  But only because to build reddit I wouldn't have to concern myself with the size, shape, or location of anything.  In my day job I use Ruby on Rails -- a very good framework that is reasonably fun to work with.  And it pays the bills.  But for most of my projects I choose Django for the api, and build the front-end on iPhone and Android.  My reason for choosing django over rails has a lot to do with the Python idea that explicit is better than implicit.    You see in django, when I want to understand the structure of my models all I have to do is look at the source code for the models.  It's all right there and there are no surprises.  In rails however, that information is scattered across the source for the models, the schema file, magical callbacks, delegates, etc.  So instead of looking in one file -- you'd have to do some actual research.  And django  has really good support for geospatial datasets.  It is in fact, the easiest way to build rich applications where the relative locations and shapes of the things represented by your database matter.  PostGIS is the best database backend for geospatial and django simply has the best support for PostGIS.  But if geospatial doesn't matter to you -- then django wouldn't be your only real choice like it is for me.  PHP is something I haven't worked with for a very long time so I can't fairly talk about PHP.  Last time I worked with it though, it was a mess."
django,3dswq0,gensyms,2,Sun Jul 19 14:47:09 2015 UTC,"Reddit was originally written in lisp, iirc the reason for switching to python was better library support.   Do you feel that's not an issue anymore?"
django,3dswq0,stevewedig,3,Sun Jul 19 15:20:26 2015 UTC,"Python undoubtedly has better library support.  But for that to matter -- you'd have to determine that you needed some particular library and that it was more difficult to add that support to Lisp, than to use Python.  Sometimes I actually do make that determination.  And now that we have quicklisp, library support in Common Lisp is considerably better than it used to be -- because now, we have something akin to pip install ('ql:quickload).  And a side note:  I distinctly remember one of the reddit guys at the 2006 startup school, saying that they had made a mistake in switching from Lisp.  I think the real driver for the rewrite was that it's easier to sell a more mainstream language to investors."
django,3dswq0,gensyms,2,Sun Jul 19 15:53:55 2015 UTC,"Well I certainly want to learn lisp, Paul Graham is always gushing on it.    How do you feel it compares to other functional languages like Haskell and Scheme?  Did you find it took long to get into?"
django,3dswq0,mrtron,2,Sun Jul 19 16:05:47 2015 UTC,"Well, Common Lisp is not a functional language.  It's a multi-paradigm language that can take on any paradigm at all.  Including ones that haven't even been invented yet.  It compares favorably to all other languages because it can be whatever language you want it to be.  And it compares unfavorably to all other languages because it can be whatever language you want it to be."
django,3dswq0,ctolsen,2,Sun Jul 19 16:16:50 2015 UTC,"curiosity is added to curiosity, so if it's a language that can be as good as I make it, how can I learn to make good use of it?"
django,3dswq0,chiproller,2,Sun Jul 19 16:24:50 2015 UTC,"Python and Ruby are mainstream choices, both better than PHP. CL would be a non-mainstream choice, so I wouldn't recommend that choice to someone who doesn't already know the pros/cons of that decision. Regardless of technical merit, mainstream vs. non-mainstream is important for the deciding which technology platform to invest in / depend on.  Edit: Also if you wanted to explore Lisp for web development, Clojure is an alternative to CL which seems to have a bit more momentum."
django,3dswq0,ctolsen,1 point,Sun Jul 19 16:44:16 2015 UTC,I've heard about clojure!  If I was purely interested in the other benefits of learning a lisp would CL be the superior choice?
django,3dswq0,blacwidonsfw,1 point,Sun Jul 19 17:10:13 2015 UTC,"Read books and source code.  Read whatever books you need to read so that you can truly understand 'On Lisp', and 'Let Over Lambda'.  'Practical Common Lisp' is a pretty good starting point. So is the first part of 'Paradigms of Artificial Intelligence Programming'.  And the source of CL-PPCRE is an amazing example of good industrial-quality Lisp code.  And as soon as you truly understand Common Lisp's condition system -- you'll never find another programming language sufficient.  But just keep that idea in the back of your head for now.  You have a lot to learn before the condition system will 'click' -- but I assure you it's on about the same level of awesomeness as Lisp macros."
django,3dswq0,npolet,3,Sun Jul 19 16:48:21 2015 UTC,Thanks very much gensyms :)
django,3dswq0,mrtron,3,Sun Jul 19 17:03:13 2015 UTC,"If I was prototyping my own reddit, I would use django.  If I was building a site to handle the current traffic volume of reddit, I would build a completely custom solution, with pieces in Python."
django,3dswq0,ceol_,3,Sun Jul 19 20:01:48 2015 UTC,"To begin with? Maybe. Over time, it would probably be rewritten. Something like reddit means writing for immense concurrent loads, and Django is fairly monolithic – or at least leads you in that direction.  But as a prototype, sure. Even as a working product for a good while."
django,3dswq0,cediddi,1 point,Sun Jul 19 12:43:30 2015 UTC,But....I thought Django was scalable?  Does that claim only apply to certain cases?
django,3dswq0,spookylukey,5,Sun Jul 19 14:19:38 2015 UTC,"That's a question that is incredibly difficult to answer and depends on your use case. The basic paradigms of Django are not well fit to run a site of the type and load as reddit. If you run something that is highly cacheable, such as a news site (which was what Django was first developed for) you can live with Django for a long time.  Several concepts go into this, such as being heavily geared towards relational databases with an ORM that can be difficult to optimise, to making things easier for developers at the cost of performance, and a hundred other things.   None of this matters until you have built a product that is so large that you will have the resources to rewrite whatever bits are necessary, so go with whatever works for you."
django,3dswq0,random314,1 point,Sun Jul 19 14:53:14 2015 UTC,"This is the key argument for Django. It is the best startup solution because 1 guy can design the whole app in a week and it will scale long enough to where if you get the traffic, you will have resources to rewrite it.  I work in consulting and I see a lot of companies to startups to public companies and the ones with the,most traffic have custom systems where it's coded for the specific c9mpany and can't really be put in a framework.  For example they will use Django for backend administration but for the user serving content it will most likely be Java or some industrial language with meme cache, load balancers, and  distributed computing (hadoop, aws, vertica) for the data aggregation and processing,which is all custom tuned for performance, workflow, and whatever the lead engineers preferences are.  When you compare frameworks it should always be in the sense of ""what is best for a startup"" because once you past that part it's all going to be done custom anyways.  Just my 2 cents based on my experiences working with mega internet companies and small startups alike."
django,3dswq0,spookylukey,2,Sun Jul 19 20:17:20 2015 UTC,"I thought Django was scalable?   All of the popular frameworks are 'scalable' in the sense that you can split up your application into database servers, file servers, request servers etc... Infrastructure is what makes anything scaleable. being able to split up your application to different servers is what makes things scalable. Not really the framework itself.   But to answer your question... if you write your application with scale in mind, scaling a django application by splitting it across multiple servers is quite easy. You just need to think more about the flow and structure of your application."
django,3dswq0,random314,1 point,Sun Jul 19 14:53:35 2015 UTC,Scalable also in the sense that you can have a large team working on a Django codebase productively. You can't do that with spaghetti PHP.
django,3dswq0,spookylukey,1 point,Sun Jul 19 20:03:17 2015 UTC,"Something interesting to keep in mind: Disqus, a service that handles tens of thousands of requests a second, is built in Django (and as far as I know still uses it.) Instagram is another large service that uses Django as their web framework. (I'm not sure if they use it for the API, though.)  Even if you get to the scale of reddit, Django can still be a worthwhile tool."
django,3dswq0,CraigTorso,0,Sun Jul 19 20:05:01 2015 UTC,"No, I'd create a new framework, just like what reddit done in the past."
django,3dswq0,HittingSmoke,8,Sun Jul 19 07:00:06 2015 UTC,"Unlike another response says, PHP is both a language and a framework, so it is appropriate to compare to Django/Rails, as well as to Python/Ruby.  First, there is the language issue. PHP-the-language wasn't really designed at all, it just kind of grew from a set of scripts that were never meant to do anything big and complex, and it shows. Once you get to know other languages, you become aware that PHP combines all the weak points of other dynamically typed languages, without any of the strengths (like metaprogramming and introspection techniques that are both powerful and elegant).  The authors of PHP such as Rasmus Lerdorf continue to make extremely poor design decisions. The additional things that are bolted on to the language don't really address its inadequacies.  To make this point another way: how many sensible, experienced programmers would choose PHP for a task if that task wasn't to do with making a web page? Contrast this to Python and Ruby which are both go-to languages for a large range of tasks, quite apart from their usefulness for web sites. Python usage, for instance, is absolutely huge in many branches of science. It is clear that PHP-the-language is an extremely poor contender.  Then, PHP-the-web-framework is just totally inadequate in every way. Almost every decision they made (URL routing, escaping in templates, input handling, database APIs) was wrong, and has led to a lot of security issues.  This means you need to use PHP plus an additional web framework. By this point, you have lost all the advantages of using PHP in the first place - the web framework will make things much slower, and all the simple techniques of just doing <?php ?> in an HTML file, and doing $_GET wherever you need to etc. are now recognised to be anti-patterns that you have to avoid.  So, why use PHP in the first place if you have to un-learn all the things it provides?  In addition Django and Rails have many other advantages, like an ecosystem of high quality libraries, tools, and developers.  PHP will certainly provide you with the advantages of:   large numbers of developers available. Many developers who have experience, sense and take pride in their work will teach themselves new things, and will prefer to work with better tools, though, so finding high quality developers who are happy and continue to be motivated when working with PHP is going to be increasingly difficult. easy deployment - but every single thing that makes deployment easy, also makes it hard to do correctly and securely (see above).   Having done some years in PHP before using Django, it is difficult for me to see PHP as anything other than a legacy technology - sure, you may need to work in it, just as COBOL is still going strong, but I can't  see why you would choose it for any new project that you really cared about."
django,3dswq0,petr0,2,Sun Jul 19 15:15:51 2015 UTC,"it is difficult for me to see PHP as anything other than a legacy technology.  Except it's not. I've seen articles back in 2012 going on pages and pages about how php will fail, throwing around big programming words and theories and all sort of things that it messed up on, but the language has been nothing but successful to this day and will no doubt be for years to come.  I understand that the language of not perfect, not by far, but its versatility covers a middle ground for web applications that no other languages comes close."
django,3dswq0,super_cool_kid,1 point,Sun Jul 19 23:02:05 2015 UTC,"That's why I added the words ""for me"" - that is my perspective.  Of course I'm aware that it is used massively across the world. But I don't know why people still do that. COBOL is also still massively ""successful"" by the metric of ongoing usage, but I wouldn't want to be using it."
django,3dswq0,yaix,1 point,Mon Jul 20 11:19:56 2015 UTC,"The way I see it, being also a Go, Python, Node and C programmer (in addition to PHP), I see PHP as a touring bike, where Go and Python are like triathlon and mountain bikes... can you use a touring bike in a triathlon, road race, and off roading? sure, it'll get the job done, it'll be very easy to use too, but not optimal for any of those."
django,3dswq0,RamirezTerrix,1 point,Mon Jul 20 23:45:20 2015 UTC,"I appreciate this.  I was planning to learn a php stack before learning django and rails, would you recommend skipping that entirely?"
django,3dswq0,rukittenme,2,Sun Jul 19 15:25:50 2015 UTC,"I haven't used any of the PHP stacks - I couldn't comment on them specifically. I don't think they will include any major concepts that you won't find in Django/Rails - the common components of ORM, URL routing, request and response handling, templates etc. seem to be relatively similar among the different options, with variations in things like configuration vs convention.  If you wanted something that would give you broader experience, I would look at one of the frameworks that is designed for single page apps and deep AJAX integration from the beginning e.g. Meteor.  The biggest downside to both Rails and Django is the relative difficulty of deployment, and you can easily get stuck there. I wrote a post about how to learn Django without installing anything which might be of help there."
django,3dswq0,Mekhami,2,Sun Jul 19 15:32:31 2015 UTC,"I will certainly give that a go, and thank you for your advice :)"
django,3dswq0,wulvz,2,Sun Jul 19 16:01:24 2015 UTC,"I'd recommend spending 3 days trying to learn Ruby then 3 days trying to learn python, and then choose the webstack you want to use dependent on which of those languages you find easier to get a handle on.  You won't find many programmers who will recommend you learn php, it's grotty."
django,3dswq0,SadKisser,2,Sun Jul 19 17:52:08 2015 UTC,"If you're looking for something in PHP that's very much ""batteries included"" similar to Django, check out OctoberCMS. Don't let the name fool you. It has some built-in CMS elements but it's extremely developer oriented. It's more of a framework built on top of a framework (Laravel).  It's fairly new so there isn't as much out there for it in terms of plugins but the list is respectable: https://octobercms.com/plugins"
django,3dswq0,__no_preserve_root,6,Mon Jul 20 01:21:26 2015 UTC,"The only reason to use PHP, in my opinion, is having tons of legacy code and no choice really."
django,3dswq0,arrrtoo,2,Sun Jul 19 11:31:26 2015 UTC,"I have nothing to say other than this thread is really really good. Love the appreciation, support, knowledge, and lack of judgements.  I work with Django. I like it. The ability to look at the source code, and the large community / auxiliary support (thinking of books like 2 scoops of django) make it really nice and you feel that you are growing your knowledge each day rather than just repeating yourself."
django,3dswq0,unstoppable-force,2,Mon Jul 20 05:42:36 2015 UTC,"I used to script in Perl, later PHP, and now Python. I chose Python over Ruby because I liked the syntax and philosophy better (PEP020 especially).   PHP is nice too quickly hack together smaller things, but I don't like it for larger projects, it looks just too messy and hard to read.  Django is great because it's very lightweight, yet has everything optionally included. Gives projects a predictable structure and makes it easier to read."
django,3dswq0,unstoppable-force,4,Sun Jul 19 08:30:41 2015 UTC,My 5cent:    PHP is kind of messy Ruby on Rails is the killer app for ruby and the gem system is nice python and django: my favourites - its like giving a (web)-ui to every python script ever written. Well its basicly the same for ruby but I know python better.   Also nice screenname.
django,3dswq0,unstoppable-force,1 point,Sun Jul 19 09:58:24 2015 UTC,"Don't look for a ""killer"" feature.  Most frameworks do everything the other does.  Look for one that gives you the most prospects.  Look for the one you subjectively like more."
django,3ds331,davegri,2,Sat Jul 18 22:34:00 2015 UTC,"If the category is described in the subcategory, just store the subcategory with the summary model, then put in a category method on the summary that pulls it from the subcategory.  For the form logic, you can either make a ajax pair of fields (you'll have to write some JavaScript) or have a subcategory dropdown grouped by categories. There is existing code for both, but I don't have links ATM."
django,3ds331,lovestruckluna,1 point,Sun Jul 19 02:48:35 2015 UTC,I did this with Ajax and some logic in my models/views   Munitag.herokuapp.com
django,3ds331,tryexceptfuckit,1 point,Mon Jul 20 16:36:45 2015 UTC,"It seems like yours doesn't really, work.. it only changes for the first selection, you should probably fix that."
django,3dpx0a,avinassh,3,Sat Jul 18 08:16:55 2015 UTC,Use fixtures. Django even has a mechanism for dealing with initial data: https://docs.djangoproject.com/en/1.8/howto/initial-data/
django,3dpx0a,Ibuildwebstuff,1 point,Sat Jul 18 18:16:29 2015 UTC,"Thank you very much. I think this is what I was looking for. Makes easier.   If I understand correctly, I just need to run:  manage.py loaddata <fixturename>   Now I will see how loaddata can be modified to accept directory containing markdown files.  But how do I manage the sequences? Specifically:  And I should be able to add a chapter in the middle. So, if I add a new chapter 2, the current chapter 2 should be renamed to next number and all the next ones.  EDIT: This is what I am thinking to do. Make a separate script, which loads from markdown files, converts them to json and call loaddata may be using call_command?"
django,3dpx0a,Ibuildwebstuff,1 point,Sun Jul 19 08:44:40 2015 UTC,It sounds like you need a data migration: https://docs.djangoproject.com/en/1.8/topics/migrations/#data-migrations
django,3dpx0a,crazyfreak316,1 point,Sun Jul 19 22:28:50 2015 UTC,"I will look into it, thanks!"
django,3dpx0a,disposition5,2,Mon Jul 20 04:07:34 2015 UTC,You could use flat files or just use sqlite and put it under your source control
django,3dpx0a,fizzgorilla,2,Sat Jul 18 08:45:36 2015 UTC,You could use flat files    What exactly is flat file? just storing data in files right? (like I mentioned in OP)    or just use sqlite and put it under your source control   it will be difficult to manage/review/merge etc
django,3dpx0a,mbrochh,0,Sat Jul 18 08:49:10 2015 UTC,"Correct, flat file = csv"
django,3dpx0a,yaix,3,Sat Jul 18 15:55:27 2015 UTC,"CSV is one type of flat file. A flat file simply refers to a text file of data. That data may, or may not, be in a standardized format, such as CSV, JSON, XML, Markdown, etc."
django,3dpx0a,mbrochh,1 point,Sat Jul 18 19:59:07 2015 UTC,"I'm using Pelican for my blog, which is a static page generator written in Python. The content of my blog posts is simply saved as markdown files. Of course those files are on Github, so people an send pull requests for my blog posts, if they find errors.  Once I have written a post, I run Pelican and it will turn those markdown files into HTML files (in another output folder).  As a final step, I publish that folder via github pages, so that my blog is even hosted on Gitub (but you could upload that folder to any host).  Does this sound like something you want to achieve?"
django,3dpx0a,mbrochh,2,Sat Jul 18 10:38:32 2015 UTC,"That's what I was thinking too. I use ""Nikola"" which is very similar to ""Pelican"", but I liked it better."
django,3dqa8o,Chitrank,3,Sat Jul 18 12:06:18 2015 UTC,Why don't you wanna use already made DRF TokenAuthentication?  http://www.django-rest-framework.org/api-guide/authentication/#tokenauthentication
django,3dqa8o,andrey_shipilov,1 point,Tue Jul 21 10:18:02 2015 UTC,"It looks like you're banned from Reddit. This means all of your posts are hidden until explicitly approved. Subreddit moderators can't do anything about this, except approve your posts in the subreddit one by one.  You may want to contact the Reddit admins about this.  _  Remember that reddit uses ""shadowbans"", in which you can still see your posts and profile, but other users can't. For more information, check out /r/shadowban."
django,3dqa8o,whiskeyfox_,1 point,Sun Jul 19 01:20:45 2015 UTC,"This scared me.  But if I can see it and reply, and he can still post, what's the deal?"
django,3dqa8o,ubernostrum,1 point,Sun Jul 19 02:41:39 2015 UTC,"A moderator (me) manually approved the post to make it publicly visible. Please see the note at the bottom of my original comment for an explanation of what ""banned from reddit"" means and how to find additional information about it."
django,3dm6lj,southof40,2,Fri Jul 17 11:56:52 2015 UTC,"Not sure if it's what you're looking for, but I use django's standard signals in a few places in Tagulous, my tagging app. It stores tags using subclasses of ForeignKey and ManyToManyField (so it's easier to query than tagging/taggit), and uses signals to manage the related tag models - creating tags on demand, removing them when they're no longer used etc. For example, see the code for the ForeignKey subclass.  There's also a slightly more unusual use of signals in the same app, where it can be configured to listen for the class_prepared signal (see code) to detect when models are created; if they contain a TagField, the base class of the model is changed so it automatically subclasses the TaggedModel base class. It's a little weird, so I made it an optional syntactic enhancement; people can turn it off and explicitly inherit if they prefer, but by doing it automatically it makes the use of tag fields as close to standard fields as possible.  The only way to do either of these without signals would have been to monkeypatch django's base model, which sounds like a really bad idea."
django,3dm6lj,radiacnet,1 point,Fri Jul 17 13:22:47 2015 UTC,That sounds really awesome.
django,3dm6lj,AncientSwordRage,2,Fri Jul 17 15:40:59 2015 UTC,"It's worth noting that Two Scoops of Django has a whole chapter devoted to ""The Avoidance of Signals"".   To wit:  ""Do not use when the signal relates to one model and can be moved into that models methods, e.g save()"" ""Do not use when the signal related to a specific view and can be moved into that view""."
django,3dm6lj,tpugsley,1 point,Sat Jul 18 12:35:30 2015 UTC,https://github.com/johnboxall/django-paypal/blob/master/standard/ipn/signals.py maybe
django,3dm6lj,philippeowagner,1 point,Fri Jul 17 12:49:06 2015 UTC,"Users on my site can login via multiple methods (ie local auth and SSO), so the user_logged_in signal is an ideal place to add a message for actions needed. My predecessor tried writing a middleware to do that and keep track of the login views, but it tended to fail in unique and surprising ways."
django,3dm6lj,lovestruckluna,0,Sat Jul 18 01:05:00 2015 UTC,"I've recently started working on an app to put a list of projects I maintain on my personal site. The app has a Project model to represent a project, and a Version model to represent released versions. Indicating which version is the latest is done by a BooleanField on Version (doing it through a field on Project instead would have made some other things more complicated).  So the manager on Version has a method which ensures only one Version of a Project can be ""latest"" at a time (by toggling all the others), implemented as a signal handler for post_save from Version."
django,3dm6lj,ubernostrum,1 point,Fri Jul 17 14:08:03 2015 UTC,Why use signals if the models are in the same app though?   The code for your signal handler could live in Version.save().  Less magic/hidden logic.
django,3dm6lj,ckinsey,0,Fri Jul 17 16:40:50 2015 UTC,It could be done in save(). Personally I prefer anything that queries for/modifies multiple instances of a model to be in the model's manager.
django,3dnsdc,wewereonlydreaming,3,Fri Jul 17 19:49:55 2015 UTC,"This is because DetailView doesn't implement a post method. (See https://ccbv.co.uk/projects/Django/1.8/django.views.generic.detail/DetailView/, which is a brilliant reference, btw), though not sure why you're getting different behaviour to with ListView.  You could 1. implement a post method yourself, or 2. extend FormView too, or 3. send your post to another endpoint.  If you're just sending some very simple post data, then 1 or 3 work nicely. If you've got some complicated post data, then go for either 2 or a combination of 2 and 3 (ie, another endpoint whose view extends FormView."
django,3dnsdc,plum_dog,2,Fri Jul 17 20:18:59 2015 UTC,"holy shit, thats one amazing site. Thanks for posting."
django,3dnsdc,avinassh,1 point,Sat Jul 18 11:37:40 2015 UTC,"What do you mean by ""send my post to another endpoint"" ? It seems like implementing a post method on the DetailView would be the most straightforward way to go about it, but it might come back to haunt me if later on down the road someone else needs to post something else to this view. I played around with doing so for a while but got hung up because my model is Vendor but my post needs to edit a Contact, and I'm not sure how to get the ID properly."
django,3dnsdc,plum_dog,1 point,Fri Jul 17 20:29:25 2015 UTC,"Add a new View that has a post method, called something like ToggleVendorView. Give it a new url, and set that url as the action attribute on the form. When the post data arrives there, you can flip the bit as needed and redirect to the DetailView.  HOWEVER  From what you've described, you're not actually flipping a bit in the database? (If this is wrong, ignore everything from here on...) In which case, you're not storing anything, so you could use a form with method=""get"", and a hidden field of something like ""display_vendor"" and a value of ""true"". Clicking this will load the page with ?display_vendor=true, which you can then read in your view from self.request.GET.get('display_vendor'), and in your template as request.GET.display_vendor (you'll want to alter the value in the hidden field to be the opposite of this value, so value=""{% request.GET.display_vendor == ""true"" %}false{% else %}true{% endif %}"").  Alternatively, if its just hiding stuff in the HTML, the Javascript might be worth looking at, especially if you use jQuery - it might just be a couple of lines! And it'll save a page reload."
django,3dnsdc,ckinsey,1 point,Fri Jul 17 20:40:49 2015 UTC,"I am actually changing the bit in the database. :)  I noticed something strange.   When I click the Hide button on a Vendor, the console immediately shows navigation to the appropriate URL (e.g. ^/vendor-change-state/42), but when I click the Hide button for a Contactit does not show something like ^/contact-change-state/104. Could this be an HTML/JS problem, and not a Django problem? Am I not properly navigating to the correct URL somehow?  Also, I do have a View to change this flag for a Contact that's logically identical to the View I wrote to change this flag for a Vendor."
django,3dnsdc,xBBTx,1 point,Fri Jul 17 20:54:57 2015 UTC,"Give it a new url, and set that url as the action attribute on the form.   I set the URL 'myapp:contact-change-state' contact.pk' as the data-urlvariable in my anchor. I did it the same way on my Vendor page; does it not work in this context because I can't post to a DetailView?"
django,3dnsdc,avinassh,2,Fri Jul 17 21:09:10 2015 UTC,"DetailView is designed for GET requests only.  As a generic class based view it assumes that you are only retrieving information.  It does not have all of the mixins, parent classes that handle forms so POST is disallowed.  You can probably override DetailView.dispatch() to change this (or there may even be a parameter on the view to set the allowed methods), but really if you want to respect the design of the generic class based views, you should create an UpdateView for Contact and POST to that.  You are, after all, updating a single Contact and as you said your detail view for Vendor has many contacts."
django,3dnsdc,cerealcable,1 point,Fri Jul 17 20:14:43 2015 UTC,"I have an UpdateView that uses a form that'll let me manipulate all the Contact information other than the flag. Is there a way to call a specific method within that view without pulling up the entire form?  Right now I've got an anchor on each row that serves as the hide/unhide switch. It pulls up a JS confirm() dialog and hits the DetailView with a POST request on submit. After the user submits, I want to be able to flip that bit without any further interaction or forms and then reload the table so it disappears."
django,3dnsdc,XPostLinker,1 point,Fri Jul 17 20:25:39 2015 UTC,"Sounds like you'd best implement your own view - it might inherit from your original DetailView (to check permissions etc).  Then just implement post:  def post(self, request, *args, **kwargs):     obj = self.get_object()     obj.bit = not obj.bit     obj.save()     return HttpResponse('ok')"
django,3dmfba,qaximor,3,Fri Jul 17 13:30:45 2015 UTC,Pass takes_context=True  to register.inclusion_tag(..) add context to argument list use context['request']   (by eye)
django,3dmfba,lamby,1 point,Fri Jul 17 13:47:36 2015 UTC,"Like so?  @register.inclusion_tag('notifications/_latest_notifications.html', takes_context=True) def latest_notifications():     u = context['request'].user     notifications = Notification.objects.all_for_user(u)     return {'notifications': notifications, 'u': u}"
django,3dmfba,lamby,3,Fri Jul 17 13:58:28 2015 UTC,"you missed ""add context to argument list"""
django,3dmfba,iBlag,1 point,Fri Jul 17 14:00:44 2015 UTC,worked like a charm! Thank you.
django,3dmfba,iBlag,1 point,Fri Jul 17 14:06:49 2015 UTC,"Why not use the built-in 'django.core.context_processors.request', by adding it to the TEMPLATE_CONTEXT_PROCESSORS variable in your settings.py and then use a RequestContext instead of Context objects.  Edit: Had wrong processor."
django,3dlida,enesimo,1 point,Fri Jul 17 06:17:26 2015 UTC,"Standalone apps sometimes write test apps inside their repository to test features. If you are working on a product you don't do this because you already have an app to test!  Just start testing, look at how your favorite sites test."
django,3dlida,ckcollab,1 point,Fri Jul 17 09:54:05 2015 UTC,"Test structures really depend on the type of application you're building.  If you want to learn how to start testing with Django, I recommend reading Test-Driven Development with Python. It teaches you the basics of TDD, unit-testing and functional(/integration/acceptance) testing. I think the book is fairly intermediate level so this might be what you need to really get into testing."
django,3dlida,_under_,1 point,Fri Jul 17 12:17:16 2015 UTC,I personally thing TDD is excessive and a waste of time. If I'm adding a new field to a form do I really need to write at test first.  I usually write code then write tests to verify funtionality and workflows.  Worked for me so far and I can finish a full app in a day versus spending 3 hours trying to get my url test to work.
django,3dlida,tryexceptfuckit,1 point,Mon Jul 20 16:40:02 2015 UTC,"I don't have any resources in hand, but take a look at these files:  https://github.com/caioariede/django-location-field/blob/master/tox.ini https://github.com/caioariede/django-location-field/blob/master/setup.py#L38 https://github.com/caioariede/django-location-field/blob/master/runtests.py#L17 https://github.com/caioariede/django-location-field/blob/master/tests/test.py#L7    Basically, this is what's happening:  The tox (see Tox) command is used to run tests. It calls python setup.py test that uses what's described in the test_suite parameter (see setup.py file). The setup.py will call runtests.py that uses a very minimal Django settings and manually instantiate and execute the TestRunner.  Some projects integrate with Travis, using the .travis.yml file. For my projects, I usually point Travis to call Tox."
django,3dlida,caioariede,1 point,Fri Jul 17 15:25:27 2015 UTC,"standalone packages do this to centralize tests and keep them out of the actual package code. When uploading to PyPI, they can then exclude that folder so that when you install it, you don't install the tests for that project.  I have relatively big project going on (see github), where the project tests are just maintained in the apps themselves."
django,3dlida,xBBTx,0,Fri Jul 17 17:45:24 2015 UTC,"I would 1) learn about making stand alone apps and understand that first. Then 2) explore how to test stand alone apps. I personally model my testing after django-compressor because it lets you test without making a fake project, and I think it's great because it tests various pythons/django distributions. If you want to see that paradigm in an app that isn't as html driven you can check out my project django-djangui, which I adopted compressors approach."
django,3di73h,tomdyson,8,Thu Jul 16 13:57:45 2015 UTC,"responsive, easy to use, open source. What's not to like?"
django,3di73h,gedbarker,1 point,Thu Jul 16 14:32:09 2015 UTC,"Is it easy to extend to an advanced site with tons of customizeable content like file storeage, event management, etc, or is it strictly for simple blogs?"
django,3di73h,jollybobbyroger,6,Thu Jul 16 21:16:08 2015 UTC,"It's not just for blogs. Europe's biggest ticket company is about to launch their new event management platform on Wagtail, and we (Torchbox) are currently migrating a very popular news site for one of the world's biggest broadcasters, with 150k articles, 250k images and a massive global audience."
django,3di73h,ylodi,1 point,Thu Jul 16 21:27:34 2015 UTC,"In that case, do you inherit article model from Page model? Is there any limit for the number of pages (Page records)?"
django,3di73h,gedbarker,1 point,Fri Jul 17 14:51:53 2015 UTC,"Yes, you inherit; no, theres's no limit!"
django,3di73h,jollybobbyroger,2,Fri Jul 17 14:52:54 2015 UTC,"Yes, straightforward. It's been built to be an intuitive platform for admins but also a powerful CMS out the box. If you want to take it somewhere new, it can probably go there.  It's way more than a blog platform. There are beefy, demanding wagtail sites using customised approaches/integrations."
django,3di73h,gedbarker,1 point,Thu Jul 16 21:32:20 2015 UTC,"That's great! Really something I've been looking for.     There are beefy, demanding wagtail sites using customised approaches/integrations.     Link(s) or it didn't happen?"
django,3di73h,BertrandBordage,5,Thu Jul 16 21:42:17 2015 UTC,http://madewithwagtail.org/  It did. Honest.
django,3di73h,BertrandBordage,2,Thu Jul 16 21:50:55 2015 UTC,Didn’t know it! I just submitted one site :)
django,3di73h,chhantyal,3,Thu Jul 16 21:59:23 2015 UTC,"We can't talk about the broadcaster or the ticket company yet, but some of the complex sites we've built on Wagtail include:   http://www.rca.ac.uk/ http://www.globalwitness.org/ https://www.groceryaid.org.uk/ http://royaldrawingschool.org/ http://www.coebank.org/ https://www.meningitisnow.org/   And there's a growing list of sites submitted by other agencies here:  http://madewithwagtail.org/"
django,3di73h,talideon,1 point,Thu Jul 16 21:51:45 2015 UTC,"Yes, it’s done to be extended. It’s more of a CMS framework than a ""static"" CMS. You build your own models, based on a Page model provided by Wagtail with only the common fields in it and a lot of methods to extend it."
django,3di73h,talideon,3,Thu Jul 16 21:25:19 2015 UTC,Congratulations :)
django,3di73h,patrys,3,Thu Jul 16 14:20:49 2015 UTC,How does it compare to Mezzanine?
django,3di73h,IllegalThings,1 point,Thu Jul 16 23:31:46 2015 UTC,"Before we built Wagtail we used Mezzanine, and liked it. Bits of Wagtail were inspired by Mezzanine. The most obvious difference is in the UI; Mezzanine's is based on Django admin, and Wagtail's isn't. Both are easy to install, so we recommend trying them out!"
django,3di73h,chronug,1 point,Fri Jul 17 09:56:09 2015 UTC,Cool! I've been looking for an alternative to Mezzanine with a better UI as I find Mezzanine's to be somewhat clunky. I'm definitely going to try Wagtail out!
django,3di73h,BertrandBordage,2,Fri Jul 17 13:21:33 2015 UTC,Do recommend!
django,3di73h,xBBTx,2,Thu Jul 16 14:23:31 2015 UTC,"Looks good, I used Wagtail for a site or two and really loved it. I wish I could continue working with it.   Does StreamField use SirTrevor? Looks very similar."
django,3di73h,Designer023,3,Thu Jul 16 15:34:29 2015 UTC,"No, but it was inspired by SirTrevor. Here's some more background: https://torchbox.com/blog/rich-text-fields-and-faster-horses/  Glad you enjoyed using Wagtail!"
django,3di73h,BertrandBordage,2,Thu Jul 16 15:37:35 2015 UTC,"I'm confused about the streamfield feature - it is presented as a new innovation, but it doesn't seem any different to how I build sites in Django CMS.  Wagtail's UI for managing plugins is way, way nicer, and I'm not knocking the product (I've been waiting for 1.0 to trial it as a replacement for Django CMS) but I feel I must be missing something because the idea of multiple reorderable plugins in a content area doesn't feel like anything new."
django,3di73h,xBBTx,5,Thu Jul 16 15:41:47 2015 UTC,"In terms of features, StreamField and plugins are similar: they allow you to add different types of contents and sort them.  However, django CMS plugins are separate models, while Wagtail stores StreamField data in a single database column. Plugins are generic, StreamField is specific. This means critical consequences for users:   StreamFields are extremely flexible, while plugins are definitely not. When you write a plugin, you write it in a generic way, with a lot of options (video size, caption, color of the controls, etc) so that it’ll fit all possible uses. This completely misleads most users and finally give them so much control over the layout that it’s impossible to make a consistent layout accross the website. With StreamField, you specify which sets of fields the user wants for a specific page and write its rendering. This is less ""plug & play"" than a plugin, but it’s so simple… Besides, Wagtail doesn’t want to be the next Wordpress (AFAIK), it’s designed so that programmers can easily fit exactly their users needs. The whole back office of a Wagtail page is in one page, while modifying a django CMS page leads to a lot of popups, toolbars, menus, etc. Even I, after 3 years of django CMS use, have to often think ""where can I find this?"". I use Wagtail since February, and it’s far easier to use for anyone. The website is drastically faster with Wagtail, since it doesn’t need to fetch data from a lot of SQL tables (and also: Wagtail is highly optimized, while django CMS is absolutely not). A simple django CMS page with a single text plugin means you always have to fetch data from at least 6 tables: cms_page, cms_title, cms_page_placeholders, cms_placeholder, cms_cmsplugin, & djangocms_text_ckeditor_text. Add another table for each other content type in the page. In Wagtail, you have to fetch data from 2 tables: wagtailcore_page and the table of your page model (Wagtail relies on multi-table inheritance). As a comparison, here are two websites I made:   Criminocorpus, with django CMS, developped actively since 2012 by me, I spend at least a total of 200 hours optimizing it. Most pages still take between 400ms and 1.5s to load (before being cached). And it’s nearly two times slower when a user is connected (displaying the toolbar costs a lot). Terrible performance! And I can guarantee you I optimized it as much as I could! I even developped django-cachalot because of that! Muséum de Rouen, with Wagtail, released today. I did absolutely nothing to optimize it. Pages are not cached. All pages respond in less than 200ms."
django,3di73h,chronug,3,Thu Jul 16 18:02:26 2015 UTC,"How easy would you rate it to convert a site from Django CMS to Wagtail, on a scale from 1 to 10? The company where I work at are all experienced Django devs, and for now Django CMS has been our goto CMS solution. We've never really had the feeling 'this is why we should try wagtail over django cms' for a new project."
django,3di73h,chhantyal,1 point,Thu Jul 16 19:48:28 2015 UTC,I second this question. We use Django CMS and it has it's quirks (to put it lightly).
django,3di73h,chronug,1 point,Thu Jul 16 19:59:52 2015 UTC,"You want me to rate the ease of data + code migration from django CMS to Wagtail, if I understand well? It depends highly on what you’re relying on. For example, I wrote a django CMS plugin to create footnotes, and there’s no mean of doing that in Wagtail for the moment. If you use exclusively text, images and documents (PDFs, etc), this can be done quite easily. For videos it can be more tricky, and for some edge cases like footnotes, I don’t think that’s currently possible. I never did such a migration, and I don’t recommend doing it for now. I’ll probably migrate Criminocorpus to Wagtail in 1 or 2 years. If there’s demand and someone funds it, I can write a django CMS ⇒ Wagtail migrator for data (for famous plugins, such as cmsplugin-filer) and maybe a manual on how to adapt your code to Wagtail.  If you were asking about how easy it is to create a site with Wagtail when we’re used to django CMS, I would rate that 8/10. It’s extremely easy. The only downside is that the admin of Wagtail yet has some missing features compared to Django admin: when deleting data, there is no list of other data linked to this one (this leads to 500 errors with protected foreign keys), a lot of options are not there such as limiting the number of inlines, etc.  In a general way, if I had to rate these two CMS, django CMS would get 5/10 and Wagtail 9/10. Django CMS has way too much flaws, its extensibility is really painful, its performance is poor, it contains heresies like ""loading the entire page tree in memory when you fetch a first page after starting the server"", and more important: it’s really buggy (very often because of the heresies). However, I’m really glad Divio made this CMS and made it open source. It served me well, and considering the complexity of what they had in mind when conceiving this CMS, they did a pretty great job!"
django,3di73h,chhantyal,1 point,Thu Jul 16 20:28:12 2015 UTC,"Thank you, that was quite the wall of text. I'm not really considering data migrations - that will be hell that no one wants. A fresh project is what I'm aiming at.  I think I'm going to push a little to give wagtail a try - or at least prototype the product in both CMS'es to be able to make a nice comparison. I do wholeheartedly agree that DjangoCMS has its quirks - performance being the major killer for me."
django,3di73h,mitchellrj,1 point,Thu Jul 16 21:08:30 2015 UTC,"Interesting that it handles everything in one table. I disagree with your perception of plugins though: that's unfortunately how they tend to be built, but that's not how they have to be.  The default set of plugins provided with Django CMS are clearly designed for developers and power users, not writers and editors. I don't think there's a single one of them that I haven't either simplified or replaced entirely.  Ultimately though, the fact this feature exists in Wagtail is a good thing for me as the move in Django CMS 3 to frontend-only editing and the resulting complexity has upset my clients and has me looking elsewhere. Wagtail is fast becoming mature enough to get me to abandon five years of Django CMS experience and dozens of custom plugins and apps."
django,3di73h,jollybobbyroger,1 point,Thu Jul 16 22:39:51 2015 UTC,"StreamField probably doesn't feel new to you, but it is indeed new.   As far as I understand, Django CMS uses Ckeditor https://github.com/divio/djangocms-text-ckeditor You can throw whatever you want in there, and it will probably keep things. Until you want to organize your content properly eg. fully responsive, tables, quotes etc. Traditional editors use inline styles to do those funky things, which is very limiting and ugly to work.  I find idea of StreamField very interesting, but haven't used it yet mainly because it wasn't stable till now. Guess it's time to dive in."
django,3di73h,jollybobbyroger,3,Thu Jul 16 16:01:01 2015 UTC,"You've not got it quite right - CKeditor is a plugin that you put in a placeholder. You can put lots of plugins into one placeholder.  So I would build a page by adding a text plugin (such as the CKeditor one you linked to). If I have an image, I drop in an image plugin, upload the image, then drop in another text plugin to continue with the text, just like in the streamfield demo. I also have custom plugins for pull quotes, calendars, events, tabular data and so on.  Your misunderstanding might have come because Django CMS also supports embedding plugins within the rich text editor, so I could put in one text plugin and just drop the image in within CK editor, but as you rightly say, that gets ugly quickly."
django,3di73h,chhantyal,1 point,Thu Jul 16 16:18:38 2015 UTC,"yea, I misunderstood your original comment. Thanks for clarifying."
django,3di73h,jollybobbyroger,1 point,Thu Jul 16 21:10:25 2015 UTC,The StreamField makes it possible for a lot more sites that might otherwise have been stuck with Django CMS to consider the option of using Wagtail. It adds a page-oriented option to what was a much more document-oriented product. It's suitable for a lot of situations where Django CMS would just fall over.
django,3di73h,jollybobbyroger,1 point,Thu Jul 16 18:15:15 2015 UTC,"It looks really nice.    I am making a website with multiple components: CMS, file storage and events. How easy would it be to create apps for the latter two and integrate these into wagtail?    Would I be confined to having these two apps as something that would look completely different, or would it be fairly easy to create one's own apps and retain the beautiful UI that wagtail provides?    It would be really sad if I had to hand tune the UI of my own apps and have them feel like tacked on modules."
django,3di73h,chhantyal,1 point,Thu Jul 16 19:49:01 2015 UTC,"You can manage standard Django models within the Wagtail UI using snippets - see http://docs.wagtail.io/en/v1.0/topics/snippets.html  To see this in action, log in to the demo site and create an 'advert' snippet:  http://demo.wagtail.io/admin/ (admin/admin)"
django,3di73h,chhantyal,1 point,Thu Jul 16 20:04:35 2015 UTC,"Thank you. Would it be possible to create models that inherit from both the wagtail.wagtailcore.models.Page model as well as my own Event or FileManager model? I am hoping to get the structure and UI from wagtail, but the backend storage logic be custom to my own needs.    I tried to create an advert on the demo site, but I could never find it being visible on the site anywhere.    I also tried to create a standard page, but got a 502 when I tried to preview it."
django,3di73h,chronug,2,Thu Jul 16 21:11:47 2015 UTC,"Yes, you can use multiple inheritance. Wagtail is flexible, so you can do lot of things with it. However, recommended way is actually your Event model should inherit from Page model. See demo here https://github.com/torchbox/wagtaildemo/blob/master/demo/models.py#L229"
django,3di73h,YuntiMcGunti,1 point,Thu Jul 16 21:17:31 2015 UTC,"Thank you for your informative answers. I must say my interest has been piqued. I have to admit that I'm a bit reserved, as I often have found that frameworks will sometimes be too confining if one has the desire to create something more complex than what the framework creators envisioned when they created the framework API."
django,3dl9sb,marcelosias,2,Fri Jul 17 04:38:51 2015 UTC,Hmm... looks like there are some interesting slides which approach the subject:   http://www.slideshare.net/balakumarp/django-framework http://www.slideshare.net/RomanelliMarcello/sad-demo2   and a PDF diagram:   http://www.jpstacey.info/blog/files/django/django_workflow_with_notes.pdf   and one of the most complete overviews:   https://youtu.be/7KTVws3TiC0 https://speakerdeck.com/andrewgodwin/djangos-architecture-the-good-the-bad-and-the-ugly
django,3dl9sb,Voice_of_Internet,1 point,Sat Jul 18 04:40:24 2015 UTC,This PDF was posted a while back and gave a nice high level view of Django's Request-Response cycle:  https://rnevius.github.io/django_request_response_cycle.pdf
django,3djsq9,caioariede,1 point,Thu Jul 16 21:04:36 2015 UTC,Awesome!  Is there one for boundaries?
django,3djsq9,iBlag,1 point,Fri Jul 17 06:54:43 2015 UTC,Loved the base fields feature! Gonna try it.
django,3djllv,joshfokis,2,Thu Jul 16 20:12:55 2015 UTC,"If Swampdragon didn't work properly for you then you've done something wrong :)  It should do exactly what you're looking for with very little extra work as long as you configure it correctly.  The documentation is pretty thin but it does the job (I can vouch for this, I implemented it recently)."
django,3djllv,mr_baboon,2,Fri Jul 17 00:08:10 2015 UTC,I followed the task list tutorial and the template never rendered the items just displayed the for tags.. I even copied and pasted from the code to my files and same thing. I will look it over again make sure.  EDIT  I did do it over and I got it working some what
django,3djllv,BoumTAC,1 point,Fri Jul 17 00:12:45 2015 UTC,I got the same problem as you. Here is the solution of your problem. http://stackoverflow.com/questions/31361857/swampdragon-how-to-import-js-file/31423301#31423301  And there is also a problem here :DRAGON_URL = 'http://localhost:9999/  There is a ' missing
django,3djllv,chrismit7,1 point,Fri Jul 17 15:49:41 2015 UTC,my issue was I am on windows and without redis on windows but switched to a linux box and ran both manage.py and server.py worked for me
django,3djllv,pemboa,2,Fri Jul 17 16:08:30 2015 UTC,You could have a websocket running in parallel within your django app (just change the url routing for websockets vs django's WSGI). Then just have some javascript or whatever to handle updates on the main page.
django,3dkoxn,Whoopska,2,Fri Jul 17 01:25:40 2015 UTC,Is it possible your template dirs is a string (and thus iterable) and not a list?
django,3dkoxn,AreEmmKay,3,Fri Jul 17 01:28:12 2015 UTC,"In other words, for OP, ""c:/whatever"" should be [ ""c:/whatever""]"
django,3dkoxn,condimentorice,3,Fri Jul 17 01:34:18 2015 UTC,"To add to this:  Look at your list of errors, right before ""/hello.html""   C : \ U s e r s   That's how we can tell that Django is receiving your templates directory setting not as the list of strings it expects."
django,3dkoxn,condimentorice,3,Fri Jul 17 02:04:22 2015 UTC,My...God...you're completely right.  I'm in my car.  Let me pull over to check. EDIT : thank you all! Sorry for the boneheaded mistake.  I assumed I took the brackets out and it was supposed to be a strong like the string above it.  Thank you all.  Seriously.
django,3dkoxn,AreEmmKay,2,Fri Jul 17 02:09:23 2015 UTC,"We've all done it (or something similar).  It's a bit surprising that Django doesn't check this somehow and raise an exception or print a nice warning like, ""Hey...are you sure?"""
django,3dj58a,BrainShane,2,Thu Jul 16 18:14:00 2015 UTC,"The http://twoscoopspress.org/ takes Django to the next level, building a production quality development environment and understanding how a project should be structured. Other approaches available, but this one works for me."
django,3dj58a,tpugsley,2,Fri Jul 17 08:37:41 2015 UTC,"Agreed. As much as OP probably doesn't want to read even more dry tutorials, this is essential knowledge and why learn it all the hard way if you can just read the book in three afternoons."
django,3dj58a,mbrochh,2,Sat Jul 18 13:24:45 2015 UTC,Bought the PDF last night and was very impressed. This is exactly what I wanted. Now I want the print book too. Wish I had bought the bundle. :(  Would love it if they did video...
django,3dj58a,pydanny,2,Sat Jul 18 16:12:00 2015 UTC,"Bought the PDF last night and was very impressed. This is exactly what I wanted. Now I want the print book too. Wish I had bought the bundle. :(   If you want the print book, since you bought the PDF from us (I'm one of the co-authors), we're happy to extend the bundle discount to you.  Just email us or message me your name and order number and once confirmed we'll send you a discount code.   Would love it if they did video...   Is there enough demand for us to do video?"
django,3dj58a,bulletproofvest,1 point,Sat Jul 18 22:33:44 2015 UTC,"Build something for yourself. A blog, a to-do list, a database of movies to watch, a recipe manager. Think of a problem you have and try to solve it. It doesn't even matter if it's a problem that's already been solved a hundred times. Sooner or later every web developer writes a blog engine.  Once you have something functional you can start to learn about deployment, hosting, backup, logging, monitoring, and all the other things that come along with running a real project.  If you build something for yourself you can keep working on it and adding to it as you learn and think of new features to add. It's a satisfying way to learn, and who knows, you might end up building something other people need as well!"
django,3dj58a,Rogergonzalez21,1 point,Thu Jul 16 21:36:31 2015 UTC,"If you don't fell prepared to make your own application, I recommend you ""tango with Django"". It is a very good tutorial that helped me to understand a bit more of Django."
django,3dj6wf,eigenpants,1 point,Thu Jul 16 18:25:40 2015 UTC,"Uhm this might be a bug. Have you tried removing the index from the charField, running the migrations then putting the index back in (and migrate again)?"
django,3dj6wf,xelhark,1 point,Thu Jul 16 22:32:36 2015 UTC,"Hey there, thanks for the response. By index of the CharField, are you talking about the max_length constraint? Or the primary_key attribute?"
django,3dj6wf,xelhark,1 point,Thu Jul 16 22:39:11 2015 UTC,"I'm talking about the primary key attribute.   I am thinking that it might be a problem with the migration engine expecting the pk field to be a number.   Also, I think IDs are faster for indexing, if you're trying to avoid duplicates you can use the unique keyword, is there a particular reason you want a char field to be pk?"
django,3dfyj2,J-is-Juicy,2,Wed Jul 15 23:35:04 2015 UTC,"Make sure you have something like this set up as well as the url:  STATICFILES_DIRS = ( os.path.join(BASE_DIR, ""static""),)   docs   Sorry is this comes out messed up, I'm on mobile, but I literally just solved this for myself a few hours ago."
django,3dfyj2,core_dumpd,1 point,Wed Jul 15 23:48:19 2015 UTC,"I set my STATICFILES_DIR as the docs suggested and have set up all the other static variables just like the SO post, still nothing.   I'm getting an error: ""The STATICFILES_DIRS setting should not contain the STATIC_ROOT setting"""
django,3dfyj2,xBBTx,5,Wed Jul 15 23:58:36 2015 UTC,STATIC_ROOT = /path/to/static/dir/where/you/don't/put/files/yourself STATICFILES_DIRS = ( /path/to/dir/where/you/do/put/files )  files from STATICFILES_DIRS will be copied to STATIC_ROOT when you run collectstatic. These must be different settings.
django,3dem51,davegri,3,Wed Jul 15 17:49:09 2015 UTC,"I think you will indeed need a subject class, but one that has instances that can point to parent subjects. As long as each sub-subject can only have one parent, that should be fine.  class Subject(models.Model):     name = models.CharField(max_length=100)     parent_subject = models.ForeignKey('self')   Then just rework your Summary class to reference Subject as a foreign key instead of using a ChoiceField.   From what I can understand, users should be able to pick from a list of 'base' subjects, then pick more specific subjects after that.   So suppose you have base subjects History and Literature. Those would be entered into the db with no parent subjects. You can find all of the base subjects by querying the db for subjects with null parent_subject.  Suppose a user clicks on History because he wants to see all of the sub-subjects for that subject. All of the sub-subjects of History could be found by querying the db for all subjects with History as the parent_subject. This can be generalized to any depth, for example Literature > Poems > Sonnets.   Does this make sense? I could be totally off base with what you're asking."
django,3dem51,zed_zed_top,2,Wed Jul 15 18:55:18 2015 UTC,"this sounds like exactly the sort of thing that Many to Many and Many to One relationships are designed to handle  https://docs.djangoproject.com/en/1.8/topics/db/examples/many_to_many/  https://docs.djangoproject.com/en/1.8/topics/db/examples/many_to_one/  class Topic(models.Model):     """"""     for example, Literature, History, or Mathematics     """"""     name = models.CharField()     summary = models.Textfield()  class Subject(models.Model):     """"""     for example, Poetry or Calculus     this is a many to many relationship because a subject can belong to multiple topics,     as might be the case with something like 20th Century Literary History,     and because a Topic will have multiple subjects in it     """"""     name = models.CharField()     topics = models.ManyToManyField(Topic)  class SubjectDivision(models.Model):     """"""     for example History A or History B     each Subject can have multiple sub-divisions, but a sub-division only belongs to one Subject.      """"""     name = models.CharField()     subject = models.ForeignKey(Subject)"
django,3dem51,metaphorm,1 point,Wed Jul 15 19:00:24 2015 UTC,"Thanks for the help, I thought of this, however: I wanted to hard-code these divisions associativly, like I did with the available choices of subject for each summary.  I want to be able to have each group divided in a hard-coded fashion with all the names decided in advance, this isn't something dynamic - just associative  For example, History should contain a list of topics for History, and each one of those should have a list of topics related to them and so forth - this should all be hard-coded. however each summary needs to somehow reference a subject and be limited by design to the topics within that subject."
django,3dem51,metaphorm,3,Wed Jul 15 20:56:11 2015 UTC,"I wanted to hard-code these divisions associativly   what's the advantage to hard coding things? that is usually considered an anti-pattern or a code smell. if you do it with database models you can edit in with the built in admin interface, which would allow a non-programmer to make changes to it instead of you having to make those changes yourself anytime someone wanted a change.   For example, History should contain a list of topics for History, and each one of those should have a list of topics related to them and so forth   History would be an instance of the Topic model. the list of topics for History would be a collection of Subject model instances related to the History Topic. each of those subjects would have a collection of SubjectDivision model instances related to it.  this is how relational data models are intended to work. its a major advantage. it makes them editable, it makes them queryable, and it allows you to demonstrate the relationship in code which reduces the cognitive burden on new programmers coming in to work on the system in the future."
django,3dem51,skolsuper,1 point,Wed Jul 15 21:01:42 2015 UTC,"Maybe I haven't made the goals of my website more clear. I think I'm starting to understand that what I want to do should not be done inside a database per se.  The subjects are not going to change, there names are not going to change and the divisions are not going to change, and even if they did It would be a major change in the school system and I would just change the hard-coded values.  Lets say I have a summary model that has a group of choices for the topic and a group of choices for the subject, I just want those groups to be somehow dependent so the summary model knows that if its topic his History, then it's sub topic choices will automatically adapt to maybe a different dictionary that is associated with History and stores all the hardcoded subjects for history"
django,3ddvo7,g-money-cheats,5,Wed Jul 15 14:36:10 2015 UTC,Sounds like exactly what GenericForeignKey is meant for. What's your hesitation?
django,3ddvo7,pemboa,3,Wed Jul 15 16:28:22 2015 UTC,"I've read some folks don't like GFK because you can't use it to index at all. If overused, it can slow down your site. For instance, if I looped over a list of Alerts and called alert.object it would have to 1) do a ContentType lookup and 2) do the actual query to get the object. Not indexed + multiple DB calls per access."
django,3ddvo7,Skiba_,5,Wed Jul 15 16:33:51 2015 UTC,"Just because you can iterate through a collection of GFKs this way doesn't mean you should. The GFK in the use-case you describe is a good use of a design pattern, but this doesn't mean it cannot still be abused.  Instead of looping through all objects and taking the perf hit for all the DB calls, you would want to get the content types at once, then get the respective objects for each content type at once.  For example, you would gather a collection of alerts and find all the content_type_id's in those alerts. Then get all the content types at once:  content_types = ContentType.objects.in_bulk(content_type_ids)   Next, for each model you can gather all the objects:  cls = content_types[content_type_id].model_class() objects = cls.objects.filter(id__in=object_ids)"
django,3ddvo7,ckinsey,1 point,Wed Jul 15 17:09:53 2015 UTC,"I've seen code like this out there, and sometimes denormalization can help.  For example, if you're actually looping through Alert objects and performing some operation with them, then it stands to reason that there is some consistent behavior regardless of type for the related object.  (Unless your loop also contains a bunch of this):  # shoot me if object.content_type_id == ...   So, if I'm correct that there is some consistent structure of these target models or API methods they expose, then perhaps propagating that data up to the Alert object when they are saved is the correct solution.  A lookup like alert.object should then only happen when you are working with a single item, not an iterable of Alerts."
django,3ddvo7,pemboa,1 point,Wed Jul 15 17:13:39 2015 UTC,"Well, content type is a foreign key so it would be indexed. And like Skiba_ said... just don't use it that way."
django,3ddvo7,danielsamuels,3,Wed Jul 15 17:15:12 2015 UTC,"Makes sense to do it that way, it's much better than having n ForeignKeys to various models."
django,3ddvo7,Whoopska,3,Wed Jul 15 14:50:24 2015 UTC,"In my own code, I haven't really run into a reason to use them. Every time I might, I usually know exactly how many foreign key columns I would add and find it easier to just do that. I've used them before. Looking up content types and not easily reversing them is a pain so I don't use them much. For projects like django activity stream or django_comments, they make a lot of sense."
django,3ddvo7,zemmekkis,2,Wed Jul 15 23:45:43 2015 UTC,It is a two edged sword. I personally try to avoid them unless the problem calls specifically for that solution.  Your problem is a good use case. Sometimes though you can solve this with table inheritance.
django,3ddvo7,merrytimes,1 point,Thu Jul 16 04:03:48 2015 UTC,Sounds like well-abstracted OOP.
django,3ddvo7,apreche,1 point,Wed Jul 15 15:29:42 2015 UTC,"It's fine to use GFK for something like this. If you were never supposed to use it, it wouldn't exist.  The problem with GFK is that sometimes it is used improperly. I've seen quite a few people use it to solve problems that are better answered with abstract model inheritance. That resulted in the ORM making bad queries and/or too many queries that destroyed the database server for no reason."
django,3ddvo7,metaphorm,1 point,Wed Jul 15 16:16:06 2015 UTC,"the use case you have described is an appropriate one for GenericForeignKey relations. however, the API for managing generic foreign keys is just not that nice. the price you pay for flexibility is ugly code."
django,3ddvo7,koed00,1 point,Wed Jul 15 19:07:12 2015 UTC,"We use them for comments. Comments on everything from products, projects to users and even comments. You'll even be able to comment on things we haven't thought of yet. What people seem to overlook, is that you now have an easily accessible list of all comments everywhere. Want to see all the comments you made? No problem. In some situations, gfk's are just the right tool."
django,3ddvo7,mfcovington,0,Thu Jul 16 09:25:35 2015 UTC,"I'm currently working on a Django app that leverages GFKs to loosely couple other Django apps in a standardized, easy to use way. It is called django-velcro and is a spin off of a little project where I explored loose coupling of apps with generic m2m relationships. It's been fun and I'm writing it so that the other apps will work totally fine if they are installed alone, but will be 'connected' to other relevant installed apps if django_velcro is installed.  It also allows you to easily specify the types of relationships you want to exist in order to make them less generic and provides auto-generated inline classes for admin and some utility functions for getting related content, etc.  As an example of your case, by using this code you get the equivalent of this code.  Before putting it on PyPI, I plan to add more docs (current documentation is limited to the models/functions), add tests, and check to see how well it scales. Any comments/suggestions/questions are gladly welcomed.  (Note: Its only dependency, django-genericadmin makes it easy to add related content via the inlines w/o having to enter some ambiguous primary key. In order to get 1.7+ compatibility, it is necessary to install django-genericadmin from its git repo. I have a request in to push the changes to a new version on PyPI.)  EDIT: Just noticed that the link to django-velcro is difficult to see due to the inline code formatting. The link: https://github.com/mfcovington/django-velcro"
django,3dfpzb,jv100,1 point,Wed Jul 15 22:28:42 2015 UTC,"It looks like you're banned from Reddit. This means all of your posts are hidden until explicitly approved. Subreddit moderators can't do anything about this, except approve your posts in the subreddit one by one.  You may want to contact the Reddit admins about this.  _  Remember that reddit uses ""shadowbans"", in which you can still see your posts and profile, but other users can't. For more information, check out /r/shadowban."
django,3dfpzb,eigenpants,1 point,Thu Jul 16 09:08:07 2015 UTC,Thanks for letting me know. No idea when/how that happened.
django,3dfpzb,brtt3000,1 point,Thu Jul 16 10:54:58 2015 UTC,"FWIW, I can see both your post and, obviously, the comment to which I'm replying."
django,3dfpzb,radiacnet,1 point,Thu Jul 16 18:29:54 2015 UTC,"In general you should be weary of model inheritance (or polymorphic models) as they add complexity to the queries that can slow you down and is hard to remove later. In this case I might just give Exercise a nullable User field.   Alternately, if the Program model has a User reference then maybe I'd use separate model to connect a Program to Exercise (like a through-model), and give it two references to Exercise; one (shared) default and one (optional) override."
django,3dcw1h,-c0der-,7,Wed Jul 15 07:38:53 2015 UTC,"Hi there!    How to identify different apps in your project, like (user, admin, site, blog etc) and Am I right in considering these as apps?    Looks like you are on the right track (User, Admin and Site are built-in, so you might want to check those before you make custom apps). There is no hard-and-fast rule about breaking down your project into apps.  I generally start with minimum number of apps as possible. As the project progresses, I would refactor parts of functionality into a separate app if 1.) They are reusable in more than one way and/or 2.) It is a logical group of models, forms, views and templates.    How to decide the architecture of my project? After having a look at these two resources I have some idea but still not clear about it may be because of first reason     If you are starting from scratch, try to read more about various Design Patterns. I would especially recommend the ones by Martin Fowler which are freely available on his site. Rather than blindly implement these patterns, understand the kind of problems they solve and use them judiciously. Or, shameless self-promotion alert, I have written a book about it.  The more you work on a domain or a project, the better you'd understand how various parts work with each other and the cleaner your architecture becomes.    And the last on how to identify the use of app local and global static and templates folder?    It is a subjective preference. Use app local templates wherever possible to make your apps self-contained. You can read well-written Django apps to understand this better. For instance, in my Edge project template, I make the user profile templates app-local."
django,3dcw1h,arunvr,1 point,Wed Jul 15 10:53:06 2015 UTC,"Hey, sorry for going slightly offtopic, but I was going through Edge code and I was wondering if you could possibly explain the usage of    {% templatetag openblock %} extends ""base.html"" {% templatetag closeblock %}   instead of   {% extends 'base.html' %}   Stack doesn't really answer it (apart from pretty much copying the documentation, which, you guessed it, doesn't help at all). What's the point of coding it that way?"
django,3dcw1h,evenisto,1 point,Thu Jul 16 09:09:36 2015 UTC,"Sure. Edge is a project template, so its files will be run through Django's template engine. Anything recognized by the templating language must be escaped.  Basically when the first line of code you mention is passed through the template engine, it gets rendered into the second line. This is what we want in the generated project."
django,3dcw1h,arunvr,1 point,Thu Jul 16 10:31:21 2015 UTC,"I still don't get it, the second line way of doing that surely works as well, doesn't it?"
django,3dcw1h,evenisto,1 point,Thu Jul 16 13:04:12 2015 UTC,"The problem is that second line will get rendered when you run startproject and produce an HTML document, which is definitely not what you want in your templates folder."
django,3dcw1h,arunvr,1 point,Thu Jul 16 23:21:46 2015 UTC,"So this would happen only in this case?    If the optional destination is provided, Django will use that existing directory as the project directory, and create manage.py and the project package within it. Use ‘.’ to denote the current working directory.  For example:  django-admin startproject myproject /Users/jezdez/Code/myproject_repo"
django,3dcw1h,evenisto,0,Fri Jul 17 07:51:35 2015 UTC,"Thanks, thats really helpful and now I will start making and I think I will learn more with time.  But I would be grateful if I could get help on one more issue, since I am a Java developer by heart and I generally believe in breaking down application in parts as small as possible, So I was trying to move app/models.py file to app/models/myModels.py, but when I try to do the migrations it was an unsuccessful attempt, so I want to ask whether we could relocate and break default models.py, views.py or we have to acomodate all code in a single file. Although I firmly believe that we could do this but right now I am unable to find any way to do this.  So can you please guide me through this."
django,3dcw1h,arunvr,3,Wed Jul 15 11:44:15 2015 UTC,"Yes, you can break anything into multiple files by creating a Python package. Sounds like you are missing an __init__.py which is usually an empty file in a directory, signifying its a package. To be  clear (src):   Make a directory/package called models Inside that package, put all your model code as separate files On older versions on Django (pre-ver 1.7) on each model set the Meta attribute app_label to the app name. This is no longer needed. Create an __init__.py file inside the package. In the __init__.py file: -- Import all your models -- Declare them using __all__, like this  from blah.models.foo import Foo from blah.models.bar import Bar  __all__ = ['Foo', 'Bar']    PS: You don't need to split every class into a separate file. That practice from Java is usually frowned upon in Python land :)"
django,3dcw1h,keturn,2,Wed Jul 15 14:05:08 2015 UTC,"Breaking the models.py module into a multiple-module models package is not documented (we should really fix that), but it is supported. I'm in strong agreement with arunvr here that it's preferable to use multiple modules within a single django app instead of creating multiple new apps for a single project.  The models are the only place where Django is a little picky about where you define things. There are no constraints on which modules you use to define your views; you just have to import the relevant module when you define the url."
django,3dcw1h,kmmbvnr,1 point,Wed Jul 15 17:28:10 2015 UTC,"Thanks @ketum for raising the ticket after reading my issue, it means a lot.  And yes now I will try making something(learning by doing) and you all are always here to help whenever i got some issue."
django,3dcw1h,brtt3000,2,Wed Jul 15 18:33:20 2015 UTC,"The answers on these questions always was very opinionated and depends on developer point of view.   I always create 2 mandatory apps - site - for things that combine functionality from others apps. And utils - for things that not belongs to any app.   The rule of thumb is to avoid circular apps dependencies as much as possible (remember, this is not possible in all cases). The utils app should not depends on any other. As opposite - any app could depends on utils. No app should depends from site, and site could depends from any other.   I think the best strategy is to start from the simplest structure and evolve with time. The attached png looks well, except, I try to avoid inner in-app static folders. For the templates I thing the right strategy is to use global folder (with subfolders named same as apps) until you are working on reusable app."
django,3dcw1h,souldeux,1 point,Wed Jul 15 11:03:43 2015 UTC,Thank you for the help but I think local static files are good idea since we make them with a view of a separate reusable app and this could help in using the same app in any other project as all our files will be in app itself.  I just can't figure out how to decide which files to put in local static folder and which one in the global static folder.
django,3ddp5e,cwurld,1 point,Wed Jul 15 13:41:05 2015 UTC,That's your database (PostgreSQL I guess) telling you that you have more connections than what it is configured to handle. You should search how to change that in PostgreSQL config file. Another option would be to use connection pooling instead of leaving django to open new connections on each db access query. I think there are packages that can do that for you.
django,3de9yr,H4kor,3,Wed Jul 15 16:22:59 2015 UTC,"Use the UserModel provided by django, seriously.  Everything is in place and you only have to do little work to get the login and register pages on your site."
django,3de9yr,H4kor,1 point,Wed Jul 15 16:27:01 2015 UTC,What about this?
django,3dcuyf,muksha,3,Wed Jul 15 07:25:55 2015 UTC,"If your question wasn't already answered by /u/genmud, I'd like to add that it helps to, for a moment, totally forget about anything related to models, Django, or even Python.  Think about how these entities are related. Let's say you wanted a website to keep track of Oscar results. Let's pretend awards can only go to one person (as opposed to multiple people like the awards for Best Visual Effects, etc.). You've got to keep track of both people and awards. These two things are related, but how?  Ask yourself: how many people can win an Oscar? As we've said, the answer to that is one; there can be only one Best Actor, best Director, etc. Now, flip the question: how many Oscars can be won by a person? The answer to that is zero, one, or many. For all intents and purposes, that means the answer is many--there may be plenty of actors who only win one Oscar, but the point here is that an actor is free to win several Oscars if they land the right roles (and throw the right parties, as I understand it).  So, we've now established that there is a many-to-one relationship between Oscars and actors; actors can have several Oscars, but each Oscar can go to only one actor. Now it's helpful to bring ourselves back to the land of Django. We know that we have a many-to-one relationship between our Oscar model and our Actor model. How do we capture this in data? It would be easy to just add an ""actor"" field to the Oscar model that is a CharField (or TextField if you're worried some actor will have a 256-character name). Likewise, we could slap a list of Oscar names (or IDs, or some other unique identifier) into the Actor model under the ""oscars"" field as a TextField or something. Or if we wanted to get really wonky, we could have an ""oscar1"" column, then add ""oscar2"" and ""oscar3"" and so on to match the highest number of Oscars earned by an actor in our database.   These are all terrible ideas. Why? Because they allow our database to store information that we can't promise matches our established many-to-one relationship. Tom Hanks won Best Actor in 1994. What's to stop us from adding the ID for the Best Actor in 1994 Oscar to Adam Sandler's Actor model (which would be criminal), or worse, to the non-existent actor Schmadam Schmandler? Nothing, if we go with one of the suggestions above. We can try to keep the data entry and management consistent with one of those designs in the previous paragraph, but we will inevitably fail at some point without some sort of additional guarantee of our data's integrity.  It would be great if there was a way of enforcing the abstract relationship between those two models in our database. Fortunately, there is! This is where the ForeignKey field comes into play. Let's start by adding the following line of code to our Oscar model:  ... from django.db import models  class Oscar(models.Model):     """"""     A model used to keep track of Oscar results. Each instance corresponds to a specific award granted in a specific year.     """"""     ...     actor = models.ForeignKey(Actor)     ...  class Actor(models.Model): ...   For the ForeignKey field, we take the model that can only relate to one of another (in this case, Oscar, because each Oscar can only be granted to one actor) and slap in a reference to another defined class (Actor in the code above). This places a few very helpful restrictions on the data we're allowed to write to the database:   The actor in question must exist. Django will raise an exception if we try to create and save an Oscar model that refers to an Actor that doesn't exist in the database. In fact, we can't even use the Actor's primary key in code--we have to be able to reference a specific Actor object* Each Oscar can only match to one Actor. The ""actor"" field must exist in the database, so we can't do anything silly like assign the string ""Bradley Cooper, Daniel Day-Lewis"" to the ""actor"" field.   What's nice too is that the model that can contain ""many"" of the other doesn't need to be touched! How do you find out, then, how many Oscars Tom Hanks has won? We ask the Oscars model. It seems counter-intuitive: we're worried about the Tom Hanks object, not the Oscars model, right? Nope! All we have to do is query the Oscars like so:     tom_hanks_Oscar_count = len(Oscars.objects.filter(actor=""Tom Hanks""))**  And that's many-to-one (1-N) in a nutshell. I don't have time to write out explanations for 1-1 and N-N, but they're not too tough to figure out. The key takeaway here is to think about the abstract relationships between your models before you worry about their implementation. Once you figure out the relationship (1-1, 1-N, or N-N), just follow the documentation to figure out how to implement it.  *I.e. you need:  new_oscar = Oscar(..., actor=Actor.objects.get(name=""Tom Hanks""),...)   ...and you can't do:  new_oscar = Oscar(..., actor=""Tom Hanks"", ...)   ** That code might actually be slightly off for the reason described directly above, but you get the idea."
django,3dcuyf,eigenpants,2,Thu Jul 16 19:07:39 2015 UTC,hey thank you very much!
django,3dcuyf,eigenpants,1 point,Sat Jul 18 20:14:32 2015 UTC,"No problem! This is a question with a pretty wide scope--it's good that you're working on not just understanding the Django ORM, but also relational databases in general!"
django,3dcuyf,davegri,2,Sun Jul 19 23:21:06 2015 UTC,"Depends on the data you are storing and how you want to access it.  For example, let's say your site has a django users table and you have a pictures table.  If a user can only have a single picture for example a profile photo, you would use a one to one relationship. This associates a single photo with a single user.  If for example you wanted a user avatar, where multiple users can use the avatar, you would use a ForeignKey relationship. This means there is a single photo that can be used with multiple users.  Now, if you wanted a user to be able to have multiple photos, you could use one to many, or put the ForeignKey relationship on the photo.  Lastly, if you wanted to associate multiple photos with multiple users, you would use a many it many relationship."
django,3dcuyf,sweetbeems,1 point,Wed Jul 15 09:01:27 2015 UTC,"you could use one to many, or put the ForeignKey relationship on the photo.   I don't get this :/"
django,3dcuyf,cross-bot,1 point,Wed Jul 15 14:28:30 2015 UTC,"Django doesn't have a one-to-many field (I discovered this recently, annoyed the crap out of me). This isn't very intuitive but bare with me. If for example I want to have a blog with articles and comments; i make an Article model and a Comment model, now obviously each article should have multiple comments but each comments should be only part of one article, right? right.    Now intuitivley you would think this would be defined as a one-to-many field within the Article class, after all the article is the one that contains the comments, right? wrong.    In Django you actually need to define a foreign key from the comments class, basically signifying that comments can only have one article, so each comment references their article and an article can be referenced by multiple comments."
django,3dafjq,wengole,18,Tue Jul 14 19:22:46 2015 UTC,"I'm old school and code it directly in the template:  <form method=""post"" action=""{{ request.path }}"">     {% csrf_token %}     {% if form.errors %}     <div class=""alert alert-danger"">         Please fix the errors in the form below.         {% for error in form.non_field_errors %}         <p class=""error"">{{ error }}</p>         {% endfor %}     </div>     {% endif %}     <ul>         {% for field in form.visible_fields %}         <li class=""{% if field.errors %} has-error{% endif %}{% if field.required %} required{% endif %}"">             {{ field.label_tag }}             {{ field }}             {% for error in field.errors %}                 <div class=""help-block text-danger"">{{ error }}</div>             {% endfor %}         </li>         {% endfor %}         <li>             <button type=""submit"">Save</button>         </li>     </ul>     {% if redirect_to %}         <input type=""hidden"" name=""{{ redirect_field_name }}"" value=""{{ redirect_to }}"">     {% endif %}     {% for field in form.hidden_fields %}         {{ field }}     {% endfor %} </form>"
django,3dafjq,youlleatitandlikeit,5,Tue Jul 14 21:32:16 2015 UTC,"For anything other than simple forms, this is the way to go. With complex forms, by the time you faff around getting crispy forms or some other django app configured, you might as well have gone full DIY and done it like. Can't beat the DIY approach for certain things."
django,3dafjq,npolet,3,Tue Jul 14 22:52:30 2015 UTC,"I generally do the same, but I usually don't even loop over the fields, since a lot of the time I'll want to group a few of them inline or something like that."
django,3dafjq,strig,2,Tue Jul 14 22:41:42 2015 UTC,I have problems trying to use Select widget with Bootstrap this way :/  But I prefer to be using pure Django forms nowadays.
django,3dafjq,jlorencetti,1 point,Tue Jul 14 23:50:54 2015 UTC,"Yep. This is the thing now, spend time researching and testing endless packages, or just do it manually."
django,3dafjq,BuddyLindsey,1 point,Wed Jul 15 06:20:36 2015 UTC,"One more vote for DIY I used to try doing form generation stuff, now I just code them out. I too don't do a for loop on the fields though.  However, I have run into situations in the past that I have needed a lot of configuration ability for displaying forms and crispy forms worked really well. And by a lot of configuration I mean about 250 lines total of decisions that had to be made for what to put where, when. That project had a whole host of bad decisions piled into one."
django,3dafjq,leftrightupdown,1 point,Wed Jul 15 14:04:26 2015 UTC,Same here
django,3dafjq,cerealcable,7,Tue Jul 14 22:09:29 2015 UTC,I have used crispy forms and recently moved to django-snipeletes django-sniplates. I'm a fan of it. Gives me the balance between being 100% in control and ability to just quickly toss a form at the template and move on depending on my needs.  Most times we don't need too much customized so it's really worked well for me. The times I do customize it I'll end up doing the fields individually still via snipelets.  Though there is absolutely a point to just do it manually. I don't think its necessarily wrong and you should consider what your best approach is. I found crispy to be the wrong approach as it ultimately brought too much design into code for my liking.  Edit: Shouldn't try to remember names while distracted.
django,3dafjq,cerealcable,2,Tue Jul 14 23:28:52 2015 UTC,I found django-sniplates yesterday (assume that's what you meant). Looked promising. Will have a play later.
django,3dafjq,xBBTx,2,Wed Jul 15 06:17:53 2015 UTC,"Yeah, my bad!  It's currently not a replacement for crispy forms if all you are willing to do is install an app and expect bootstrap forms.  However, if you want to control the content of your forms but also just toss in a form or do it per field I find that it works damn well.  When you get to looking at it, feel free to stop by #django on freenode, I found out from the author there and is active as well. I'm always idling so highlighting me will spur me into action too if you need any help."
django,3dafjq,xBBTx,1 point,Wed Jul 15 06:28:51 2015 UTC,"I've done some contributions to formulation and sniplates as well, and use it actively. Most of the time I'm idling on IRC too, so don't be afraid to hit me up either."
django,3dafjq,virtualmic,1 point,Thu Jul 16 00:19:54 2015 UTC,"Sniplates is great, I swear by it"
django,3dafjq,kmmbvnr,3,Thu Jul 16 00:18:40 2015 UTC,"I have found using AngularJS for forms works great. Specially for custom validation/ client messages etc. Of course, that might be an overkill for small forms. But as your client makes heavy use of forms, maybe you can have a look there."
django,3dafjq,YellowSharkMT,3,Wed Jul 15 06:26:55 2015 UTC,"The core problem with existing forms libraries is mix of html in python code.  I try to overcome it with mine django-material library - http://forms.viewflow.io  The core idea - is to specify all widgets rendering in templates and have things like parts, that allow to redefine widget rendering in-place  {% load material_form %}  <form method=""POST"">     {% csrf_token %}     {% form template='material/form.html' form=form %}         {% part form.username %}                 <input type=""text"" name=""username"" />         {% edpart %}          {% part form.email prefix %}<div class=""input-group-addon"">@</div>{% endpart %}     {% endform %}     <button type=""submit"" name=""_submit"" class=""btn"">Submit</button> </form>   As opposite, Layout is hard to express in html-only, but easy in python  layout = Layout(     Fieldset(""Please open an account at"", 'branch_name'),     Fieldset(""Personal Details (Sole/First Accountholder/Minor)"",              Row(Span2('person_title'), Span10('full_name')),              Row(Column('date_of_birth',                         'email',                         'parent_name'),                  Column('nationality',                         Row('mobile_no', 'existing_bank_account'),                         'partner_name'))),   This all helps to develop complex forms like this just in a few lines of html and python, using good parts from both."
django,3dafjq,Brandhor,1 point,Wed Jul 15 07:48:38 2015 UTC,"I haven't used WTForms with Django yet, but I've used it extensively with Flask and have been pleased as punch.   https://github.com/wtforms/wtforms-django"
django,3dafjq,cerealcable,0,Wed Jul 15 02:14:03 2015 UTC,"crispy forms is still maintained even if there are no new release, you have to get it from github"
django,3daro9,Comm4nd0,2,Tue Jul 14 20:45:42 2015 UTC,https://docs.djangoproject.com/en/1.8/howto/deployment/  the documentation has lots of helpful advice. hopefully some if it will pertain to your situation.
django,3daro9,metaphorm,2,Tue Jul 14 21:43:13 2015 UTC,"Also, searching for stuff on Digital Ocean is nice. They have very good guides for a lot of stuff, even if they're not your host. They run Ubuntu/Nginx/Gunicorn/Django usually."
django,3daro9,brobro2,1 point,Tue Jul 14 22:53:50 2015 UTC,Go it... http://www.binaryadventure.com/2013/10/23/django-on-bluehost-in-five-minutes/
django,3dc1ng,sebdoesntknow,2,Wed Jul 15 02:33:39 2015 UTC,"Is there a reason you aren't using LiverServerTestCase? Have you actually tried loading the page? I suspect it errors because {% load staticfiles %} is not at the top of the file? Also, test_spoiler_in_the_page_title needs to actually load a page. The setUp and tearDown methods are called for every test. You aren't actually loading a page in test_spoiler_in_the_page_title."
django,3dc1ng,ccb621,2,Wed Jul 15 04:55:45 2015 UTC,def test_spoiler_in_the_page_title(self):   Delete this line. This should not have been a new test_method.
django,3dc1ng,pydry,1 point,Wed Jul 15 07:20:05 2015 UTC,"I see what you meant now, It was part of the previous test :) thank you!"
django,3d8wx7,CasualBeer,6,Tue Jul 14 12:37:20 2015 UTC,"Is any particular js framework more suitable to work with Django?   None in particular. Django is agonistic on that front.   What JS framework do you recommend?   React is excellent for keeping sane on large frontend projects.   What are the main advatages of using it over standard Serializers   Loads of auth, permissions, throttling, pagination, versioning options etc. Browsable API. Will help you keep your project to a consistent style throughout the codebase. Generic views to cover the standard cases. Serializers much better suited to API use than Django's serializers (really intended only for fixture loading/dumping) or Django Forms (really intended only for HTML form input, not JSON validation)   How does it affect Djangos performance?   Not significant. You can do stupid things with it if you want to (eg return deeply nested data structures without using select_related/prefetch_related) but nothing you wouldn't also run into if rolling your own. If you do hit into any issues you can always drop down to a lower level of abstraction.   Does it work particulary well with any JA Framework?   Again, no. It's a general purpose API framework. Not built with any one particular frontend in mind."
django,3d8wx7,tomchristie,3,Tue Jul 14 13:17:51 2015 UTC,"I can second React, it's excellent stuff and React Native (near native mobile apps built using React) is looking very exciting.  It has very active backing and is a huge focus of the community. Flight JS is also worth checking out although it's a very different way of solving the problem."
django,3d8wx7,BERLAUR,1 point,Tue Jul 14 21:14:00 2015 UTC,"very different way of solving the problem   Well, now I have to check it out"
django,3d8wx7,MattBD,1 point,Wed Jul 15 07:18:22 2015 UTC,Thanks!   This weekend: React vs Angular benchmark! I must check both frameworks a choose a winner for my next work :) I have a feeling that I can't go wrong here.
django,3d8wx7,Jafula,4,Wed Jul 15 07:17:06 2015 UTC,"For the REST API, I would go for Django REST Framework. I've also used Tastypie and Django REST Framework is IMHO far superior.  As for the JS framework, I've used Angular, Backbone and Knockout to some extent and I wholeheartedly recommend Angular over the others. It's got a fair bit of momentum behind it, and it works well with Django REST Framework."
django,3d9slw,joonseokii,2,Tue Jul 14 16:47:45 2015 UTC,"Make every row of that list a link. If you iterate over objects passed in context, set the url like so Don't, check my comment below.   /path/to/detail/view?id={{ object.id }}    You obviously have to let Django know in urls.py that it should expect a <pk> or something. You actually don't, just don't put '$' at the end of the url mapping in urls.py.  The view also has to expect additional argument. It actually doesn't, you can still get the value with request.GET.get('id').  That's one way to do it. Another one would be going with a form tag with GET method, radiobuttons and submit button, but I suppose you don't want it that way.   I can provide some more code if you're still unsure how to do that."
django,3d9slw,evenisto,2,Tue Jul 14 18:14:46 2015 UTC,"Don't hardcode the url, use the {% url %} template tag."
django,3d9slw,xBBTx,3,Tue Jul 14 18:33:39 2015 UTC,"This. I didn't want to make it too complex, I was trying to focus on the question :) In fact, do it this way:   {% url 'some_name' object.id %}   and in urls.py   url(r'^details/(?P<id>\d+)/$', views.detail_view, name='some_name')   It makes the url look like this though: /details/3/, where '3' is your object.id, so keep that in mind. And NOW the view has to expect additional argument :)  Edit: if you want to make something else than text into a link, eg. a table row, or maybe just one table cell, try to add this argument into any tag:   <tr onClick=""location.href='{% url 'name-of-url-pattern' object.id %}'"">   This will make the entire row clickable."
django,3d8obr,Iqirx,7,Tue Jul 14 11:00:07 2015 UTC,"It seems to work fine. A couple of things I want to mention.  Signing up with an email address should always send a verification email to the address, then allow the user to click a link that completes the signup process. Should really verify that the email address actually belongs to the person signing up with it. You don't need to do this with usernames though.  Visually, it's not that great. Personally, I'm not a huge fan of the default bootstrap theme. While I love bootstrap, I think people should only use to get started, then modify it to make it feel more personal. The default theme is quite cold and bland. I see you have a small amount of custom css, but nothing that gives it your own feel. But seeing as though this is your first project, I don't you were too focused on the aesthetics of it, just the functionality, which seems to work fine.  Nice job. Did you enjoy the process? How long did it take you to get through it all and get to a place that you felt comfortable to show the world?  Also, make sure you learn how to automate updates etc... You should be able to make changes to your local version, then enter only one or two commands to update the server, db etc... I always feel like that is just as important as actually creating a fresh site."
django,3d8obr,npolet,3,Tue Jul 14 12:43:03 2015 UTC,"Thanks for feedback!  It took almost 2 months to go through the book and post project here. I was absolutely new to web frameworks and after small research decided to try Django.  Yes, process of developing Rango was really enjoyable because every time I learned new concepts, features and widen my understanding on how web actually works. The frustrating part was working on frontend, all that HTML/CSS stuff... That's why visually it's just default bootstrap. I tried to focus more on Python/Django and what is called ""backend"".  What you can suggest on updates automation? Currently I'm going through Local update -> Push to GitHub -> Pull at Server chain. Suppose more advanced techniques are exist :)"
django,3d8obr,npolet,3,Tue Jul 14 13:12:53 2015 UTC,"I agree, working on the frontend can be frustrating, but over time I've come to love it. Find a nice css framework (bootstrap is a good one) and then find a decent Javascript framework to help with data binding, keeping your client side code much cleaner and more simple to maintain. If I just need simple data binding, I tend to go to KnockoutJS, for anything else, I've been using Backbone or Angular, but I'm using Angular less and less.  For automation, I would look into using Fabric for small to medium deployments. Your method of Local update -> Push to GitHub -> Pull at Server is great, but fabric will compress that all down to one command, and you can automate database migrations etc.. with it as well. It just allows you to automate running commands on your development server and deployment server. Instead of constantly typing   git add --all git commit -m "".......something....."" git push .... .... ssh -i keygen.pem etc... etc.. etc...   You can just run something like  fab deploy   And all the git/shh/config commands are ran. So your deployment technique is fine, just automate everything where you can. If you feel yourself typing in the same chain of commands constantly... use fabric. Automate it."
django,3d8obr,xBBTx,1 point,Tue Jul 14 13:52:20 2015 UTC,"I am a fan of using Ansible playbooks, example: https://github.com/modelbrouwers/ansible"
django,3d8obr,saurabh_av,2,Tue Jul 14 18:32:38 2015 UTC,"A good first effort, although there are a few suggestions you could look into:  Email confirmation cycle, add in a forgot password cycle as well.  Add auto filling in your search boxes.  Improve the UI/UX. Build upon the existing theme, explore bootstrap or you could look into free themes as well. For starters, use of proper bootstrap elements should improve the site.  You could also dive into integrating angularJS once you are comfortable with frontend designing. This would make the entire site more responsive and faster.  A dislike button is missing. Also you could make the search bar static since it appears on all pages (make it part of the base template if you did follow templating).  And as far as deployment is concerned, for small projects a fabric script (already mentioned) would do but to add to your learning curve, you could look into ansible.  More to do in the backend: Configure logging, add notification mails to be sent to admin on user signup, deployment, writing tests."
django,3d8obr,saurabh_av,1 point,Tue Jul 14 17:57:36 2015 UTC,"Thanks for suggestions and good ideas! Currently I'm mostly concerned on logging functionality, it should help to investigate issues. Is there any tools for logs analysis? Or I should do it via grep :)"
django,3d8obr,npolet,2,Tue Jul 14 18:24:56 2015 UTC,"Configuring logging is pretty easy using Django's in-built logging frame-work.  Just follow the docs, that should get you going."
django,3d8obr,YouAreSalty,2,Tue Jul 14 19:04:28 2015 UTC,"One thing I love doing is making sure Django emails me when there is a server error (500) or someone visits a URL that doesn't exist (404). This has really helped me quickly sort out issues that arise on projects. Django has this built in already, you just to make sure you enter your email into the settings.py and make sure that django has SMTP setup correctly (although I tend to use AWS SES for this). See https://docs.djangoproject.com/en/1.8/howto/error-reporting/ to get started. It's really easy and gives you some insight into errors that users are seeing. You get a full trace of the error, much like you see when using the development server. Well worth setting up."
django,3d8obr,ice2o,1 point,Tue Jul 14 23:25:28 2015 UTC,"Thanks for advise! Actually before launch I set up:  DEBUG = False ADMINS = (('admin_name', 'example@mail.com'),)   In documentation it is mentioned that this works for code error notifications (till now nothing received), but seems for handling 500, 404, etc. additional configuration required."
django,3d8obr,Ibuildwebstuff,2,Wed Jul 15 07:01:55 2015 UTC,"Since you got your first site up and running with Django. I highly recommend also picking up Two scoops of django 1.8. It is a great book with a lot of how-to and best practices (albeit the ice cream analogies are kind of bad).  I always felt stuck in Django, because there is too much freedom that can bite you later. This book cleared up a lot of that for me."
django,3d9rnn,hersi,1 point,Tue Jul 14 16:41:25 2015 UTC,"You should probably use an UpdateView once an account has been created, and a CreateView to create the account if you aren't doing it another way.  The thing is, and this is more about the implementation than django, I reckon you don't want a form field that holds the balance (other than for convenience and it should be read only), you want a table that holds a record of all the transactions which then returns you the current balance.  Ideally you'd run a query against the account transaction table to establish the real time balance, maybe cache it in the account table if it's a very expensive calculation, but a SUM on a table shouldn't be.  If what I suggest is complete overkill for your purposes, I apologise, it's just that I've written financial software in the past, but the update and create view links may help."
django,3d9rnn,CraigTorso,1 point,Tue Jul 14 18:44:43 2015 UTC,"Thank you for your feedback, i will try to use UpdateView."
django,3d9rnn,CraigTorso,1 point,Tue Jul 14 20:24:12 2015 UTC,"that ccbv site I linked to is very useful when you are struggling with class based views.  Whenever I'm unsure which one to go with, I look there and see what functionality they offer.  The other benefit of using class based views is the ease of adding mixins.    You just create an object that implements get_context_data, which has access to the request and you can do many handy things.    I use a MenuMixin to provide menus according to the user's admin level for every view for most of my sites, and once the code is done, you just have to add the extra mixin to each view.  Sorry if again I am straying well out of the remit of what you care about."
django,3d6mfv,davegri,7,Mon Jul 13 22:52:17 2015 UTC,"The beauty of Django is you absolutely don't need to use any of the pieces you don't want to use.  You can very easily write a function based view (or class based view) that looks at post variables and then you write some code to handle them.  You don't have to use a ModelForm. You don't even have to use a Form at all. You can manually handle all of the input and validate it however you want (or don't!).  The strength of Django is the ability to use what you want and extend it as you see fit but also be able to drop back into a more ""low level"" any time you want.  def savestuff(request):     myname = request.POST.get('name')     mymodel = MyModel()     mymodel.name = myname     mymodel.save()     return HttpResponseRedirect('/success')  # or render to response, etc"
django,3d6mfv,HowlingDonkey,3,Mon Jul 13 23:41:58 2015 UTC,"Django tutorials are not intended for learning the basics of web dev, they are for learning Django.  Django exists to remove some of the tedious monotony from web development by providing standard ways to do things everyone does day-in, day-out.  As a beginner, forms being declared in code and then all the HTML and validation handled for you may seem limiting, but once you learn how it works, you'll see how useful it is and how much time you save. Also, look up the DRY principle - it will help explain why Django does the things it does.   If you want to handle form input yourself and validate it manually, then update the database, you can absolutely do that in Django. Just build you HTML, post it to a view, grab your values from request.POST and save them in your database."
django,3d6mfv,chronug,2,Tue Jul 14 08:27:19 2015 UTC,"a ModelForm is a specific type of form that is tied to a single model object, since you are doing something a bit different with the form data you can just use a plain Form https://docs.djangoproject.com/en/1.8/topics/forms/#the-view  the ""magic"" of django is really nice because you don't want to waste time reinventing the wheel but you are not really forced to use it either, for example for form rendering you can write the whole html yourself, you can use django's form.as_p, if you use bootstrap templates you can use something like crispy forms so you get a nice bootstrap form with just 1 line of code or you can make the magic yourself by writing a custom template tag, filter, or form function that render the form the way you want"
django,3d6mfv,Brandhor,1 point,Tue Jul 14 09:03:28 2015 UTC,"i'd recommend using flask for learning. it forces you to make decisions and gain an understanding of decisions that have been made by others... such as those embodied by the django defaults.   nonetheless, i love django, and i use it as my first choice web framework for most things. but if you don't understand the bells and whistles or the justifications for them, start with flask. it's great, too."
django,3d6mfv,nebbly,1 point,Tue Jul 14 23:17:42 2015 UTC,"If you want to learn the underlying mechanics read the source code. The beauty of Django, and frameworks in general, for me is that I can focus on delivering the functionality my endusers need without having to start at the foundational level. I don't necessarily care about the request life cycle. I do care that my data is extracted from the request and stored in the database. Django lets me focus on what is important at the higher level."
django,3d6mfv,ccb621,1 point,Wed Jul 15 05:05:47 2015 UTC,"Sorry for late post, but I felt like adding my two cents about this line:   Why would I want Django to render html elements for me? that seems ridiculous tbh...   A framework's job is to automate certain things, like rendering forms, so that you don't have to manually build them in your template, or handle every field in your view. This is supposed to help the back-end guy work with the front-end guy - you build a form that is ready, complete with all the fields you require, all the handling and data validation etc. You let the front-end guy know the form is in the context and he can access it, maybe give him a list of fieldnames, so that he can arrange the fields and put them in as many divs or uls as he likes. Without this in place, you would have to supply him the model, make him understand what kind of data each model field needs, and then handle EVERY field in your view like in HowlingDonkey's example - not to mention cleaning and validating would be a nightmare, so would things you might want to do with your model/form in the future.  As a back-end guy without anybody to write html/css for you, you really, really want Django to render HTML elements for you, especially when your form consists of 15 fields of various type. It is tedious work. There are downsides, like with everything, for example if you don't like the default way it renders a particular fieldtype (CheckboxSelectMultiple with bullets, wtf?), or when you need a little more customization to some of the fields, like putting a button next to one of them. But with forms defined in forms.py instead of the templates, the view code stays readable and pretty much all you ever need to tinker with is in one file, with proper indentation and field validation already in place (with easy ways to expand it).   There's nothing I despise more than HTML+CSS - just inspect any webpage and try to quickly find what does what (even with highlights!), you'll understand why. I don't want to write any of that manually, just {% for field in form.visible_fields %}, bootstrap it and forget about it."
django,3d7sut,TheVincibleIronMan,3,Tue Jul 14 04:34:34 2015 UTC,You should only be seeing that error if you're making a request from a session authenticated client. Try making the token request from the command line or native app (eg not in the context of an AJAX request by a signed-in user)
django,3d7sut,tomchristie,1 point,Tue Jul 14 11:26:06 2015 UTC,"Dropped the 'django_sessions"" table from my DB, migrated, tried again and now it works! I think the first time I authenticated with the mobile client I didn't have TokenAuthentication on my list. I'm guessing that's the reason it was always making the request as a session client.  Thanks so much, Tom!Can't believe THE Tom Christie answered my question"
django,3d7sut,ccb621,1 point,Tue Jul 14 16:12:27 2015 UTC,You could have just killed your browser cookies to clear the session.
django,3d68ve,Glueon,1 point,Mon Jul 13 21:12:23 2015 UTC,Since you want to just modify the file on the disk you can just trigger a function of post_save signal which would read file from disk and modify it accordingly. This will save the time during save.
django,3d32fv,semigulov,1 point,Mon Jul 13 03:17:17 2015 UTC,"Looks interesting, but I can't say I've ever needed/wanted it."
django,3d32fv,pemboa,1 point,Mon Jul 13 14:29:04 2015 UTC,"""imagine your site needs to run both in secure and non-secure mode - the same content is available at bothhttps or http URLs (depending on whether a visitor is logged in, say). Some browsers will complain loudly (displaying ""Mixed content warnings"" to the user) if the page being displayed is https but some of the assets are http. Spurl can fix this.""  I'd prefer to prefix URL's with //"
django,3d43gb,-c0der-,2,Mon Jul 13 10:46:15 2015 UTC,It seems like you are missing an argument in your URL call. Can you show us that call?
django,3d43gb,Alphare,1 point,Mon Jul 13 11:06:26 2015 UTC,"Thank you for the help.  I just find out that I was using generic.DetailView instead of generic.ListView and after changing, it worked perfectly.  Can you please tell me why it was happening and what is the difference between these two Views."
django,3d43gb,Alphare,2,Mon Jul 13 11:26:43 2015 UTC,I'm guessing (having never user class-based views) that DetailView takes at least one argument whereas ListView doesn't. The docs seem to agree with me : here.
django,3d43gb,TotesMessenger,1 point,Mon Jul 13 11:33:52 2015 UTC,Thank you for your help.. They too have a difference in classes they extend  MultipleObjectMixin extended by ListView  SingleObjectMixin extended by DetailView
django,3d3qzp,andrey_shipilov,2,Mon Jul 13 07:45:20 2015 UTC,"Hi! We don't use a Facebook login (but we might soon!), so these are just suggestions from an ignorant human, but -    Be logged in.  Log in to Facebook with your app id.  Ask for access to email and public profile in the scope variable.  Examine for identifiers and put those in your OneToOne member profile as unique fields.   From FB docs:    You'll need to verify that the app_id and user_id match what you expected from the access token debug endpoint.    so perhaps those are passed back to you?  https://developers.facebook.com/docs/facebook-login/login-flow-for-web/v2.4  Edit: for auth, we use JWT and rolled out own implementation to work with an angular front end since none of the packages we examined seemed to work for that. You might be in the same boat."
django,3d0gr3,kennethlove,4,Sun Jul 12 13:40:29 2015 UTC,I categorically refuse to answer any questions about my possible role in the so-called 'Django Conspiracy': https://www.youtube.com/watch?v=s-OPhgYELv4
django,3d0gr3,pydanny,1 point,Mon Jul 13 04:04:50 2015 UTC,"Great talks, i'm slowly going through them while waiting for a code review. Thanks!"
django,3d179v,caseym,3,Sun Jul 12 17:53:39 2015 UTC,Or you can always try webfaction that has managed Django installs https://www.webfaction.com
django,3d179v,_eka_,1 point,Mon Jul 13 13:51:19 2015 UTC,"There is nothing managed in DigitalOcean AFAIK, they give you access to a VPS with a linux distro of your choice.  After that you are free to provision it the way you want, Puppet, Chef, SaltStack etc...  Or just install everything by hand via ssh shell."
django,3d179v,_eka_,2,Mon Jul 13 11:32:40 2015 UTC,There's also an one click install for Django. :)
django,3d179v,jlorencetti,1 point,Mon Jul 13 13:40:36 2015 UTC,"Hey so AFAIK /u/_eka_ is right. Nothing managed.   Good news is that it's super cheap, and once you get a good platform built you can use Fabric or similar tools to auto-setup a whole new server.   I'm using two droplets now with Django and nginx serving data and it works well. Next up: mail server (yikes)."
django,3d179v,whiskeyfox_,1 point,Mon Jul 13 11:43:11 2015 UTC,"Next up: mail server (yikes).   I am not sure what your intentions are, but mail is a good one to outsource to a dedicated provider, (unless of course you have specific reasons in mind, otherwise it is just a hassle)"
django,3d1r5m,vagara,3,Sun Jul 12 20:36:10 2015 UTC,I've never used django-allauth but I checked the code and it supports AJAX requests. It does so by checking request.is_ajax(). So either your request is not really AJAX or something else is wrong in your setup.
django,3d1r5m,dAnjou,1 point,Sun Jul 12 21:01:37 2015 UTC,"Thank you for your time and I apologize for the late reply. I tried to make xhr calls. The chrome developer tools say that it is a xhr call. Bu t all I get is ""net::ERR_CONNECTION_REFUSED"". According to the docs it seems only Login supports AJAX. I missed that before. I haven't tried that yet. I will try that too. If it works it means I am out of luck."
django,3d1r5m,kmmbvnr,3,Mon Jul 13 22:40:26 2015 UTC,"Here is auth impl for django-rest-framework. Looks it has everything requested, including password reset.  https://github.com/sunscrapers/djoser"
django,3d1r5m,mbrochh,1 point,Mon Jul 13 02:20:42 2015 UTC,Thank you. I will try that. My concern with that is that it uses a custom user model and from what I read it is something generally not recommended.
django,3d16j5,Brachamul,3,Sun Jul 12 17:47:26 2015 UTC,"You can add a captcha to your registration form.  Or add a field ""URL"" which is hidden via CSS. The bot will probably fill it out so when your form gets a URL value, it simply ignores that request."
django,3d16j5,mbrochh,3,Sun Jul 12 18:05:00 2015 UTC,that's a neat trick
django,3d16j5,BestUndecided,2,Mon Jul 13 01:05:17 2015 UTC,django-honeypot and django-recaptcha are what I use to prevent registration spam.
django,3d16j5,porksmash,2,Sun Jul 12 18:29:46 2015 UTC,"First off, do you need to go to the effort? What’s your specific concern? Has the site been targeted in the past? Are you worried about someone trying to use your registration process to send spam? A troublemaker out to overload your system? Or someone trying to scam an affiliate scheme?  I'm not suggesting you ignore the problem, but if this is a commercial project, I would balance the potential business impact against the work required. Plus this sort of thing tends to be a rabbit hole of things you could do.  As well as honeypots, consider limiting account creation to n per hour by IP address. You could allow the account to be created, but just block sending emails if you prefer, assuming that you don't need to click a link to confirm the account before you can use the site.  I would advise against using captchas on user registration forms unless you actually encounter a problem - your user signup rates will be affected and if your business is dependent on signup conversions, your sales people would likely veto it immediately. Maybe code it to only invoke them when you get a subsequent registration request from that IP address."
django,3d16j5,chronug,1 point,Mon Jul 13 11:13:42 2015 UTC,"Good insight. Thanks for all your points.  I'm thinking of logging the emails sent and generating an email alert in case there's too many, so that I can react if this becomes a problem, without wasting time fixing an issue I don't have."
django,3d07tz,Brachamul,1 point,Sun Jul 12 11:33:13 2015 UTC,"Yeh, I'd be keen to see it!"
django,3d07tz,yourfutureyesterday,1 point,Sun Jul 12 14:12:16 2015 UTC,show me the code!
django,3d07tz,awsomntbiker,1 point,Sun Jul 12 16:00:05 2015 UTC,"Currently it's a mess, sitting in an app of my project : https://github.com/Brachamul/elan-democrate/tree/d%C3%A9veloppement/aggregateur  Please note this is my first project, and i'm still wrapping my head around Django / Python / Javascript principles."
django,3d07tz,cerealcable,2,Sun Jul 12 17:44:59 2015 UTC,"Regardless of what others say about writing reddit again, do what you want. It's a fantastic way to learn in my opinion.  With that said, Internet high five!  5"
django,3d07tz,mbrochh,0,Sun Jul 12 19:25:56 2015 UTC,"Hehe, are you aware that reddit is fully open source? I'm not 100% sure but I think it's even a Django project.  Anyways, just go for it, what's your concern? Just put it out there and see what happens.  EDIT: It's not a Django project. Was too lazy to look it up myself while on mobile."
django,3d07tz,dAnjou,2,Sun Jul 12 12:14:57 2015 UTC,Yeah i read some of the code. My idea was more to make an easily pluggable module that just adds a reddit-style forum to your project.  I wanted to test waters first because making my app reuseable and documenting it will not be a trivial task ! Don't want to waste energy on something people don't need/want.
django,3d07tz,thekancer,2,Sun Jul 12 12:35:39 2015 UTC,I'm not 100% sure but I think it's even a Django project.   It's not and it has never been.
django,3czfna,silverpendulum,5,Sun Jul 12 04:27:44 2015 UTC,"Heroku has its advantages, but yeah, the ""no persistent filesystem"" part complicates things. ""use postgresql"" (as others have said) is absolutely the right answer to replace sqlite. For other static files, we use S3 with django-storages, which works as long as you always use Django's FileStorage API instead of open()ing local files directly.  If you don't want to lose out on having a local filesystem, you can use a more traditional VPS host like Digital Ocean or Amazon EC2."
django,3czfna,keturn,2,Sun Jul 12 18:06:55 2015 UTC,"EC2 should be treated as an ephemeral filesystem as well (most instances have EBS-backed roots nowadays, but you can still pretty easily lose data and the root filesystem should not be treated as primary storage)."
django,3czfna,mipadi,10,Wed Jul 15 00:47:57 2015 UTC,"read 12 factors application Buy two scoops of django, It has comprehensive, 'real' deployment insight. Chapter 2 of Marina's guide. for database, use postgres, it's free on heroku although you limited to 10k records. As far as I'm aware, you just need to change the database URL and some settings, no code change needed. Guide for heroku  for static server, use whitenoise. Guide for heroku Use a project template like cookiecutter-django, that one is a very production ready project template specifically for heroku and adheres to two scoops of django and 12 factor app. I think two scoops of django will get you the most knowledge to build a production ready project.   Note that I'm not an expert of this thing, heck I'm not even have a project that hosted on heroku yet."
django,3czfna,DeusImpervius,2,Sun Jul 12 06:01:46 2015 UTC,yeah if you're using the Django ORM it should just be a change in configuration. this documentation page should help.
django,3czfna,msnook,1 point,Sun Jul 12 07:59:38 2015 UTC,This is solid advice.  It's also nicely documented by Heroku in Getting started with Django or try Django-HerokuApp to get you started.  Don't forget that working around a persistent filesystem also makes your app much easier to scale.
django,3czfna,koed00,1 point,Mon Jul 13 11:50:51 2015 UTC,"I wasn't exactly sure how or if heroku supported sqlite3 though, basing on its examples (even across different frameworks). I stumbled on some page with the remark on having the four slashes for the directory of the sqlite db, but then I wasn't sure how it would work out with the filesystem being wiped out periodically."
django,3czfna,mikejohnsonjr,2,Sun Jul 19 09:33:44 2015 UTC,use postgresql
django,3czfna,DoISmellBurning,1 point,Sun Jul 12 16:52:06 2015 UTC,"I will, when I'm ready to deploy for real."
django,3d13v8,sachinrjoglekar,3,Sun Jul 12 17:25:57 2015 UTC,Or use Sentry.
django,3d13v8,dAnjou,2,Sun Jul 12 17:46:32 2015 UTC,Or Opbeat.
django,3d13v8,patrys,1 point,Sun Jul 12 18:23:15 2015 UTC,I guess I can not self-host this?
django,3d13v8,dAnjou,1 point,Sun Jul 12 18:27:19 2015 UTC,"No, it's a service between getsentry.com and newrelic.com."
django,3d13v8,patrys,1 point,Sun Jul 12 18:50:51 2015 UTC,"Sentry is OSS and you can self-host it, here is how."
django,3d13v8,mbi0,1 point,Sun Jul 12 19:08:07 2015 UTC,You're out of your element!
django,3d13v8,dAnjou,1 point,Sun Jul 12 20:42:04 2015 UTC,"Currently using Rollbar, cheaper, good functionality so far."
django,3d13v8,pemboa,1 point,Mon Jul 13 15:12:25 2015 UTC,I'm not sure you're answering the right person.
django,3d13v8,patrys,1 point,Sun Jul 12 20:07:39 2015 UTC,"I don't think this is a good idea. I'd recommend using logging instead and adding a handle to email admin on exceptions. One way to do this that avoids the ""everything was broken for two minutes and now I'm getting 10k emails"" is to use a timed rotating filehandler and email it on rotation. You can play around with the rotation rules. Of course this is just reproducing what a service like sentry does better.  Not a huge deal, but the variable in settings should be DEBUG not Debug"
django,3czmmw,pythondevslack,1 point,Sun Jul 12 05:49:35 2015 UTC,I was reluctant to jump on the slack train for quite a while but recently I moved my own company into slack and we are freaking loving it.  I also got some amazing help about React on reactiflux so having a similarly vibrant django community would be awesome.
django,3czmmw,mbrochh,1 point,Sun Jul 12 12:48:06 2015 UTC,"I've been a Django dev for a few years now, but obviously I don't pass your odd syntax test.   I had to to evaluate the first two in the REPL to get them right (I was sure #2 was pow() equivalent ) and I just guessed that last one.  You might want to alter the questions a little bit, maybe towards something more specific to Django itself and less towards Python syntax."
django,3czmmw,Giggaflop,0,Mon Jul 13 13:46:29 2015 UTC,"Hey GiggaFlop, we just added a simple Python test to get folks with basic Python knowledge, but mostly to weed out the trolls. As for your suggestion of more Django related questions, I think it will alienate some of the Python folks who are just starting to learn Django. Every Django developer must know Python, but every Python developer need not know Django. Ergo, the Python-centric questions."
django,3czmmw,sweetbeems,1 point,Mon Jul 13 17:15:41 2015 UTC,"is there really an issue with trolls? It's not really an issue for this subreddit and these questions wouldn't exactly stop them, since they can be googled pretty easily. I don't know .. it seems unnecessary.  And i'm with giggaflop. I've been doing django for years and haven't needed to use cmp."
django,3cvigd,silverpendulum,5,Sat Jul 11 03:05:55 2015 UTC,These non-profits will learn pretty quickly that they get what they pay for.
django,3cvigd,WallyMetropolis,2,Sat Jul 11 15:11:17 2015 UTC,"I wouldn't count on it.  A lot of non-profits (like many other businesses) are clueless about IT.  A few times now, I've revolutionised non-profits by automating all their systems -- potentially saving them a fortune -- only for them not to even get it.  So yes, the non-profits MIGHT learn that they get what they pay for.  Or the (would-be) developers might learn that their work is respected by about as much as they charge for it."
django,3cvigd,arrrtoo,1 point,Mon Jul 20 21:27:42 2015 UTC,"True, but I would like to thin that FCC staff does quality checks and makes sure they're happy with the product....  however, I have no clue."
django,3cvigd,n0vat3k,1 point,Sat Jul 11 15:27:13 2015 UTC,"Tbh most not for profits will be grateful, even for a trivial website/app."
django,3cvigd,Taiosa,1 point,Sun Jul 12 16:29:14 2015 UTC,"From a quick glance at the Free Code Camp site, I think there are three reasons why their platform looks good.   Apart from in early lessons they don't appear to be keeping users on-site with some gimmicky in-browser IDE. The syllabus seems well distributed across software core concepts and practical tools. The most important point: having the goal of building a real world project gives significant meaning and direction to a student's learning. I regularly see the same advice given to self paced students who are stalling: ""have a project you want to build"" and it is often met with the same response: ""I can't think of anything"". Free Code Camp will mitigate that issue.   If I were starting again I would seriously consider this site, even if 1600 hours sounds like a lot."
django,3cqfk1,stevemcd,1 point,Thu Jul 9 23:10:44 2015 UTC,I have avoided Mezzanine because of the lack of support of modern Django versions. I'm happy with the Django 1.8 support.
django,3cqfk1,dreampython,0,Sun Jul 12 09:20:32 2015 UTC,... I should really update my website. It's only like Mezzanine 2.1 or some shit and I'm just way too lazy.
django,3cs2ny,bykof,1 point,Fri Jul 10 09:01:29 2015 UTC,I check the database logs for more information on this. In PostgreSQL logs it shows the SQL command that failed and why it failed from scanning a few lines. What is your database?
django,3cs2ny,lovestowritecode,1 point,Fri Jul 10 16:45:45 2015 UTC,PostgreSQL. I am ashamed of the way I fixed this problem. I used a regex to get the field and the key which failed and but them out of my list and run the function with the modified list again. It works :D  Info:  The string to regex look like this:  (article_id)=(12345)
django,3crlem,silverpendulum,5,Fri Jul 10 05:19:23 2015 UTC,"In general you'd have separate dev and live dbs. As you say, treat your local db as dummy data; if you want to test with live data, copy from live to dev. If you want to prep data on dev and push to live, look at the dumpdata/loaddata commands.  The way you say ""exclude the local db"", are you using sqlite? If so (and you can't afford to switch to postgres) exclude it from your git repository; only ever make changes directly on the dev side, then you can be confident of always pulling cleanly on live. Similarly, exclude anything else which could change on live, like uploaded files. This will also mean your server only needs read-only access to your git repository.  That way, when you've got a new migration on dev you can commit it to git, push and pull it onto the server, then stop django, run the migration on the live database, and restart django. There are more seamless ways to do this, but for low-volume sites that order should be fine, particularly if you use something like fabric.  You can sometimes run into problems with migrating live data when it doesn't match dev (ie columns with null values when switching it to not null), so if you're using sqlite make sure you back it up first - another reason to use a proper db like postgres, which handles problems a lot better. You could also look at running a staging server - run a second copy of your site on a subdomain, replace its db with a copy of the live, then apply migrations to that to make sure everything will work as expected before you start applying it to live."
django,3crlem,radiacnet,1 point,Fri Jul 10 06:42:56 2015 UTC,"Got it, thanks!"
django,3crlem,ynotna,1 point,Fri Jul 10 07:53:48 2015 UTC,"In steps,  Make changes to schema that do not affect running code  Add code that uses new changes  Remove old code (potentially two steps: remove entry points/code paths first, then the code)  Make changes to schema that are no longer used by the old code  E.g. renaming a field is really copying to a new field, then removing the old"
django,3cqewi,applejuice,6,Thu Jul 9 23:05:04 2015 UTC,Why not just use query strings?
django,3cqewi,pemboa,1 point,Thu Jul 9 23:16:40 2015 UTC,"Yeah, that probably makes more sense.  I was sort of curious, and I liked the idea of having it look more like... a regular looking url?  I just realised I could also pass everything after a keyword (including /) to my function and split it up myself, but maybe that's silly too."
django,3cqewi,blacwidonsfw,1 point,Thu Jul 9 23:30:19 2015 UTC,why dont you just store the info in the session?
django,3cqewi,zemmekkis,3,Fri Jul 10 17:56:00 2015 UTC,You are better off passing everything after the initial host to your function and splitting it up yourself.  The tough part is validation since you might have a arbitrary number of key/value pairs.
django,3cqmxy,ADHD7,1 point,Fri Jul 10 00:09:45 2015 UTC,"I actually have a version of this code in javascript but i am not sure how to implement this in python   //Takes both email and name elements by class and splits them  var p1 = document.getElementsByClassName('emailtest'),         email = [].map.call(p1, function(email) {             return email.value;         }).join(',');      var p2 = document.getElementsByClassName('reciptest'),         rname = [].map.call(p2, function(rname) {             return rname.value;         }).join(',');         var to = [];  //Initialize empty array     var p3 = email.split(',');     var p4 = rname.split(',');   // Function that maps the value      p3.forEach(function(em, i) {         var receipient = {             email: em,             name: null,             type: 'to'         };         if (p4.length > i)             receipient.name = p4[i];          to.push(receipient);     });"
django,3cqmxy,condimentorice,1 point,Fri Jul 10 00:22:47 2015 UTC,"I don't see where you're getting multiple email addresses to send to.  remail is the address you're sending it to when there's only one, right? It has a value like u'user@example.com'  If you had another email address, you can just append it to the array of recipients:  msg = EmailMultiAlternatives(     subject,     message,     from_email,     [remail1, remail2, remail3], )   If you have a string with multiple email addresses, you'll need to break it into a list of strings with one email address in each.   to_list = 'bob@example.com; alice@exanple.com; dana@example.com'.split(';')"
django,3cqmxy,condimentorice,1 point,Fri Jul 10 01:29:35 2015 UTC,"Hey thanks, but how do i map the recipients name to their email"
django,3cmr7r,Rogergonzalez21,4,Thu Jul 9 02:54:27 2015 UTC,"Do you have a github we could check out? Once you have a significant amount of ""proof"" about your work, it should be no problem!"
django,3cmr7r,ckcollab,1 point,Thu Jul 9 06:40:03 2015 UTC,"Yes! I forgot to put my Github link, but here it is:  https://github.com/Rogergonzalez21"
django,3cmr7r,ckcollab,2,Thu Jul 9 12:40:35 2015 UTC,Time to get some apps started and put them on heroku
django,3cmr7r,RecursiveInsanity,1 point,Thu Jul 9 16:36:25 2015 UTC,I'll do that. Thanks!
django,3cmr7r,souldeux,1 point,Thu Jul 9 17:05:43 2015 UTC,"Quick tip, make sure you keep your secret key out of public version control. I recommend having an offline file for your settings and just having the one you put in VC inherit from it."
django,3cmr7r,ckcollab,1 point,Sat Jul 11 20:17:07 2015 UTC,"Could you expand on this? How realistic is it to get a remote freelance position based on one's github repo? I am not a professional programmer, but if you're saying I could potentially pick up some freelance gigs by un-privating the repos for a bunch of my hobbyist stuff, I'd find that pretty cool."
django,3cmr7r,Ibuildwebstuff,1 point,Thu Jul 9 21:17:49 2015 UTC,"That's pretty much it. If in your free time you are expanding your developer knowledge and making cool things: you shouldn't have a problem finding work, so long as you have your communication handled properly.  If I look at your github repo and it's all forks of other people's work then that's not very interesting. If you have committed to multiple projects and started your own from scratch then you're a pretty interesting candidate."
django,3cmr7r,ckinsey,3,Thu Jul 9 23:33:58 2015 UTC,"While finding a full-time remote job might be quite hard, have you looked at some other income streams?  Even fiverr.com could be a good start. If you did 5 jobs even at $5 each, 5 days a week you'd increase your yearly income by 650%.  Then there is sites like Themeforest. Wordpress themes sell for ~$50. If you created one new theme each month and each theme only sold 2 copies per month you'd still make almost $8k in the first 12 months.  Launch your own application. Amy Hoy talks about 30x500, or how if you can provide enough value that just 500 people are willing to pay $30 a month for your service then you'll earn $180k/year. But in your situation if you can even get 100 people to pay $10/month you'll earn as much each month as you normally do in a year.  And remember none of these things need to be mutually exclusive. Maybe you have 6 themes which are earning you $300/month, you're doing 2 fiver tasks every day and you have a small product which is bringing in $400/month you'd be earning $12k+ a year."
django,3cmr7r,redeyeglasees,2,Thu Jul 9 21:20:11 2015 UTC,"We occasionally have entry level gigs that come through my company which I usually turn away since I don't have anyone to put on them.  It's freelance/contract work, so not necessarily full time and there are often gaps between projects.  If you're interested you can PM me and I might be able to find something for you to work on."
django,3cmr7r,yourfutureyesterday,1 point,Thu Jul 9 16:42:25 2015 UTC,I am looking for some entry level freelance django work
django,3cmr7r,blacwidonsfw,1 point,Wed Jul 15 08:39:57 2015 UTC,An option for full time roles: https://weworkremotely.com/
django,3cmr7r,donkeypooper,1 point,Thu Jul 9 05:51:19 2015 UTC,"I check on We Work Remotely almost daily, I even made an IFTTT recipe to send me an email with a job containing ""Django"" in the title."
django,3cmr7r,caioariede,2,Thu Jul 9 12:42:20 2015 UTC,why dont you make your own website where you can make your own IFTTT recipes then put that in your github
django,3cmr7r,dirigeant,2,Fri Jul 10 17:58:09 2015 UTC,"Mmmmmmm, thats not a bad idea! Thank you."
django,3cmr7r,caioariede,1 point,Fri Jul 10 22:14:52 2015 UTC,Check out upwork.com or  freelancer.com. I've found plenty of leads there. Also try posting in /r/forhire
django,3cnjnt,silverpendulum,2,Thu Jul 9 07:55:21 2015 UTC,You need to check for errors. Clean does not raise exceptions and can return a partially valid result.
django,3cnjnt,patrys,1 point,Thu Jul 9 08:01:06 2015 UTC,"for the first line of your clean() method, try:  cleaned_data = self.cleaned_data"
django,3cnjnt,dashdrum,1 point,Thu Jul 9 18:44:02 2015 UTC,"Does that do the same thing? I'm taking it from here   Note that the call to super(ContactForm, self).clean() in the example code ensures that any validation logic in parent classes is maintained."
django,3cnjnt,dashdrum,1 point,Fri Jul 10 05:09:53 2015 UTC,I've just never used that syntax.  There's a note in that section about how in v1.7 and forward the clean method is not required to return anything. Perhaps that is the case with the Form class.  Using self.cleaned_data seems to be a more reliable way go.  Perhaps run in debug mode and look at what the cleaned_data dictionary contains.
django,3cnjnt,xBBTx,1 point,Fri Jul 10 16:58:43 2015 UTC,"be a bit more hesitant, e.g. do checks like this in clean:  password = self.cleaned_data.get('password') if password is not None:     # do extra validation else:     # password is not in cleaned data -> and error was raised in clean_password and      # it will be in self._errors (or whatever the property is)     pass"
django,3co2ih,EmadMokhtar,1 point,Thu Jul 9 12:12:54 2015 UTC,I could get you a job in Malaysia if you're interested
django,3co2ih,LokitAK,1 point,Thu Jul 9 18:05:25 2015 UTC,"Yes, Please"
django,3co2ih,Joyce725,1 point,Sun Jul 12 08:58:31 2015 UTC,I saw yesterday that Visage (a tech startup) is currently looking for a web developer for their founding team :) They mentioned their team is full of crazy geeks and I think you'll love working with them.  http://www.visage.ae/job/co-fundercto-dubai-and-san-francisco/
django,3co2ih,xBBTx,1 point,Fri Jul 10 07:50:28 2015 UTC,"If Amsterdam sounds interesting for you, I can connect you through some people."
django,3cjtu4,michaelherman,7,Wed Jul 8 13:50:18 2015 UTC,"Great tutorial.  I have only one gripe: Since Django 1.7, it is no longer necessary to do the celery import in your _ init _.py file.  The right way to do this is to use the .ready() method of an AppConfig. This will prevent your celery app being initialized multiple times.  To use the example, you would put your celery config into its own app. I usually call mine 'taskman'. The new app is just the celery file and an empty _ init _.py:  taskman      |-- __init__.py      |-- celery.py   In celery.py we then have:  import os from celery import Celery from django.apps import AppConfig from django.conf import settings  # If this module is not running under Django, that means it is running directly # under celeryd. Celery needs the DJANGO_SETTINGS_MODULE configured. We # pull this directly from a user-provided celery_config module if not settings.configured:     os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'picha.settings')  app = Celery('picha')  class CeleryConfig(AppConfig):     name = 'taskman'     verbose_name = 'Celery Config'      def ready(self):         # Using a string here means the worker will not have to         # pickle the object when using Windows.         app.config_from_object('django.conf:settings')         app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)   @app.task(bind=True) def debug_task(self):     print('Request: {0!r}'.format(self.request))   Then, in your INSTALLED_APPS setting, add the app:  INSTALLED_APPS = (     ...     'taskman.celery.CeleryConfig', )   This will ensure that the app's setup will be called once, and only once, when Django starts."
django,3cjtu4,teilo,3,Wed Jul 8 20:23:08 2015 UTC,"The official docs also use the method in the linked article. I personally like your method much better, sits a lot cleaner in a project I think. Might be worth making changes to the celery git repo docs and requesting a pull request. At least mentioning that there is a cleaner way to do things in django 1.7+ might be useful.  Thanks for the tip."
django,3cjtu4,npolet,1 point,Thu Jul 9 02:44:40 2015 UTC,"How do you start the celery worker using this approach? I'm asking because I run into problems with automatic task discovery using the shared_task decorator.  celery -A project.taskman worker -l info runs just fine, but the only discovered task is the debug_task.  Passing force=True to app.autodiscover_tasks seems to solve that, but I don't really like it.  Edit: If you are interested to push this into django-cookiecutter, take a look at this issue"
django,3cjtu4,jayfk,1 point,Fri Jul 10 09:10:15 2015 UTC,"I am using the celeryd init.d script provided by Celery, and am not using force=True.  I have not had any issued with autodiscovery. @sharedtask has worked perfectly for me, so I'm not sure what to tell you. This line: app.autodiscover_tasks(lambda: settings.INSTALLED_APPS) should take care of this. It is supposed to check every app in settings."
django,3cjtu4,teilo,3,Wed Jul 15 15:46:29 2015 UTC,"Interesting read. The asynchronous worker flow is great for interactive websites. Returning your page quickly, while some other process finishes up, is increasingly important for how the user experiences a website. I've been using Celery and other offerings of the task queue persuasion for some years now in commerical websites. I did, however, become increasingly frustrated with some of the aspects of these packages when using them with Django. A few weeks back I decided to flesh out a native task queue solution for Django. You're welcome to have a look at it: http://django-q.readthedocs.org"
django,3cjtu4,koed00,2,Wed Jul 8 20:18:45 2015 UTC,"Thank you.    Could you please share more about why you decided to take matter into your own hands?    I've just gotten introduced to celery and my first impressions are that it seems easy to just get something easy up and running pretty fast, but as soon as you want to go off the well trodden celery path, things can get rocky and difficult to cope with.    I'm really interested in learning more from others experiences as well as my own limited, but growing experience with it."
django,3cjtu4,jollybobbyroger,3,Wed Jul 8 21:03:27 2015 UTC,"Here is an interesting slideshow about the reasons why some people opt for alternatives to Celery A Python Task Queue Story and a topic on stackoverflow. It is pretty much the reason I moved to RQ too. One of the downsides of RQ is that it has no real result storage or hooks for Django and I had a need for it. The other thing is that it's basically a one shot engine. RQ sets up it's environment and executes one task. Over and over again. This makes it very stable and reliable, but a little slow. This becomes more obvious when you introduce long running tasks. They will start blocking the queue and your small tasks have to wait. This can be fixed by running many instances of RQ side by side, but this is not ideal or even possible in some environments.The author of that slideshow has since gone on to start his own project mrq using gevent to handle multiple tasks asynchronously. My take on it uses python multiprocessing and is tightly integrated with Django. That made it different enough to warrant a separate project."
django,3cjtu4,koed00,1 point,Wed Jul 8 21:39:53 2015 UTC,I have been loving django+celery for a while now. So useful for asynchronous image processing and other tasks that I don't want users to wait for. I am always amazed at how simple it is to get async functionality running in a django project (or any python project for that matter) with celery. Really glad it exists.
django,3cjtu4,npolet,-3,Thu Jul 9 02:46:18 2015 UTC,"Again this overly complicated setup ...  Django is a monolithic monster, we all know that. This makes it very easy produce messy code that accesses components all over the place. As a result it can become very hard to refactor smaller parts of the code and/or scale up.  So, how to do this the right wayTM? First of all, Django is a web framework, not a task queue. If possible your periodic tasks shouldn't even know that there is a Django application.  But you need access to the database to work with the data in there? Easy! Create an endpoint in your Django app specifically for your task. Make it return only the data that you need for the task. Then write your task in whatever language you want and just call the HTTP endpoint from there (Shell → curl or wget, Python → requests, Go → net/http, ...). Finally, make it a periodic task using Cron or even Celery if you really need it.  The advantages are cleaner code and architecture, smaller components, brainless scalability, and better possibility of performance optimizations because you can simply replace the implementation of a component, the HTTP interface is universal and will likely stay the same."
django,3cjtu4,dAnjou,2,Wed Jul 8 15:53:20 2015 UTC,"With all due respect, you are entirely missing the point, and do not appear to understand what asynchronous tasks are used for. If someone is using celery for nothing but scheduled tasks, you would be correct. How cumbersome.  But celery is not Django. A web framework needs a task queue if it has to perform asynchronous tasks. You can use celery, or you can hack together some shell process (why in the world???), but either way, you need a task queue.  For example, I have a Django app presenting a REST endpoint that receives notifications. These notifications tell me I need to download a file. Many of these files are large. I need to accept the notification, and return an HTTP 200 response quickly, and then, in the background, download and process the files specified in the notification. This requires a task queue. Celery is an ideal task queue for this purpose.  As for scalability -- Celery is made for scale, and does so elegantly and cleanly. I don't understand your implication that it is messy, top-heavy, and slow."
django,3cjtu4,teilo,-2,Wed Jul 8 19:33:40 2015 UTC,"Please read my other comment.  Saying that I don't understand how Celery works or in what type of architecture it has its place is a pretty bold thing to do assuming you've only read my original comment.  In fact I'm maintaining and gradually refactoring a system that was built like the article suggests. It ended up being a huge mess code-wise, it was unstable and didn't scale at all because the tasks were accessing the DB directly. After refactoring some tasks there hasn't been a problem since with them.  So believe me, I have a pretty decent understanding of how Celery works and how to use it.  UPDATE Did you edit your comment? Anyway, I never implied that Celery was heavy or messy to deal with. The opposite is the case but only if you let it! But to integrate it with Django the way the article suggests has big potential of producing messy code and limiting scalability."
django,3cjtu4,dAnjou,1 point,Wed Jul 8 21:56:37 2015 UTC,"It does not matter what tools one uses. If their design is bad, expect bad results. But if one misuses the tools, they should not blame the tools. You say as much in your response. You fixed the problematic tasks, but didn't abandon celery.  Also, the article specifically warns against accessing the database directly in one's tasks."
django,3cjtu4,teilo,1 point,Wed Jul 8 22:33:44 2015 UTC,"I'd add to this:  Avoid premature optimizations. If your celery queue isn't creating a problem speed-wise, don't worry about optimizing it. Even then, it's often much more cost-effective to scale up your cluster than it is to rewrite a whole lot of functional code. Especially in the case where it's badly designed."
django,3cjtu4,shazammerbammer,0,Thu Jul 9 11:52:44 2015 UTC,I'm not sure what you're saying in the first paragraph but that might be a language barrier on my side (I'm German).  I read the article twice again and couldn't find such a warning anywhere. Can you quote it?
django,3cjtu4,dAnjou,1 point,Wed Jul 8 23:08:43 2015 UTC,"That's pretty smart. Then the main process is the only thing loading the monolithic app and the celery workers just interact with that. When you've done such an endpoint, what sort of security do you use? I suppose a header variable with a long passphrase is probably sufficient. Or would you use something else, like looking at the origin of the request? Or both?"
django,3cjtu4,cowbellemoo,1 point,Wed Jul 8 16:15:22 2015 UTC,In our case we even did it with tasks that got triggered from a Django view.  After a user uploaded a video we trigger a Celery task and pass it some data and the base URL for our API. Then the task converts the video and generates thumbnails. When it's done converting it reports back to the API (not the DB).  Since our API uses token-based authentication we created a dedicated user and simply use that. But requests supports all kinds of athentication.
django,3cl5yb,koed00,2,Wed Jul 8 19:36:47 2015 UTC,"Looks really nice. I also haven't been too happy with the other queue/async offerings, but I think I will look into this seriously. Is it ready to use in a production setting? And do you recommend using something like Supervisor to run the qcluster command?  Nice work."
django,3cl5yb,npolet,2,Wed Jul 8 22:54:27 2015 UTC,"To be honest, the project was only created on paper less than a month ago. I have been running it on several staging and production servers without any problems though and I've been torturing it with all kinds of tests. Of course there will be things that come up in other environments that just don't show up with mine.  Personally I run qcluster as a Heroku worker which doesn't require a supervisor, but it should run fine with Supervisor. Just make sure your run python manage.py qcluster. I do advise to tweak the  recycle and timeout settings before you start using Supervisor to restart the cluster. A big part of the code is dedicated to checking the health of all the workers and restarting them if they  timeout or have been using memory for too long.  Thanks for the pull request btw. Every single system I tested it on apparently had python-future installed by default. Merged."
django,3cl5yb,caioariede,1 point,Thu Jul 9 05:47:03 2015 UTC,"I've added a section about process managers to the documentation, based on your question. Thanks for the feedback. http://django-q.readthedocs.org/en/latest/cluster.html#process-managers"
django,3cmmqp,sebdoesntknow,3,Thu Jul 9 02:17:25 2015 UTC,"When you run your tests, unless you have mirror = True in your settings, the default test database is freshly spun up, empty, and then destroyed after the test.  You told your rand function to give you a range from 1 to 0, it said it can't. To solve, create and save a few objects to the test database then you will actually have some in there to test against."
django,3cmmqp,Thingdeux,1 point,Thu Jul 9 02:34:24 2015 UTC,Thank you! Makes total sense to me. I will try this in the morning.
django,3cmmqp,BitRateChaos,3,Thu Jul 9 03:33:28 2015 UTC,"Django unit tests don't use the live database.  Check out Factory Boy to help generate consistent data for testing against your models.  Also, I found Test Driven Development with Python by Harry Percival to be a huge help in learning how to do this.  You can read it for free and support the author later if you find it worth the $$.  He actually walks you through building a whole Django application.  Hope this helps."
django,3cmmqp,mbrochh,2,Thu Jul 9 02:39:38 2015 UTC,"Have you heard about ""mixer""? I have migrated ally projects away from Factory Boy and use mixer now - there is no meed to create Factories any more, which saves a huge amount of boilerplate code."
django,3cmmqp,BitRateChaos,1 point,Thu Jul 9 04:01:24 2015 UTC,I've never heard about it. Will definitely check it out though! Thanks for the tip.
django,3ck3dl,byrdbirdbyrd,2,Wed Jul 8 15:07:29 2015 UTC,Handlebars was inspired by mustache which was inspired by Django templates. ;)
django,3ck3dl,pydanny,1 point,Wed Jul 8 18:07:50 2015 UTC,https://code.djangoproject.com/wiki/UsingVimWithDjango  Why you are getting that warning? Are you in some way parsing the HTML in your editor?
django,3ck3dl,_eka_,1 point,Wed Jul 8 16:06:38 2015 UTC,"I'm not sure why exactly I'm getting the warning.  They are similar to something like ""local variable <something> is unused"" in an IDE.  Just little things.  That article looks great, the syntax for templates is exactly what I need.    is says to create a file at: $VIM/vimfiles/after/syntax/html.vim but I'm not sure where to put it.  I did a terminal search for a directory called vimfiles, but didn't find anything. any Ideas?"
django,3ck3dl,teilo,1 point,Wed Jul 8 17:19:40 2015 UTC,"Yes, it would really be nice if Django had specified a standard extension for django templates, just like almost every other templating language does. But they didn't, unfortunately. You could choose your own extension, I suppose, and edit the vim syntax file to recognize it.  .djml anyone?  .jinga for jinga2?"
django,3ck3dl,twtuk,1 point,Wed Jul 8 20:39:39 2015 UTC,PyCharm is good
django,3clsvz,erhiot,1 point,Wed Jul 8 22:19:35 2015 UTC,"assuming you want to output html from a model variable you need to mark it as safe, for example  {{ obj.video|safe }}   https://docs.djangoproject.com/en/1.8/ref/templates/builtins/#safe"
django,3clsvz,Brandhor,1 point,Thu Jul 9 08:14:45 2015 UTC,So in this case I have a blog_edit.html  {{ form.as_p|safe|escape }}   Would this work?  EDIT:  I also tried it with the {{ title.text|linebreaks|safe|escape }} where it actually displays the content. Still no luck with either :(  EDIT 2:  I got it with {{ title.text|safe }} now time to try and add the linebreaks~ Thanks! :D
django,3clsvz,Brandhor,1 point,Thu Jul 9 08:40:37 2015 UTC,{{title.text|safe|linebreaks}}   should work
django,3cev65,Taiosa,4,Tue Jul 7 10:54:57 2015 UTC,"save_model should do what you want, if it's specifically when models are saved in the admin site.  Alternatively, you could listen for the model's pre_save signal"
django,3cev65,oliciv,1 point,Tue Jul 7 11:49:25 2015 UTC,Thankyou!
django,3cev65,buckstalin,1 point,Tue Jul 7 17:57:22 2015 UTC,I'd do it via handling the pre_save signal
django,3cev65,buckstalin,1 point,Tue Jul 7 23:01:53 2015 UTC,I did it very quickly using the save_model. What's the benefit of using pre_save signal? Checking errors before submission better?
django,3cev65,jamesturk,1 point,Wed Jul 8 01:29:34 2015 UTC,"I find it cleaner because you're not including logic which isn't 'save' related. It's a minor difference, I think either is acceptable."
django,3cev65,cowbellemoo,3,Wed Jul 8 01:33:51 2015 UTC,"I'd also consider doing this in the browser using JS, there are ambiguous cases and if you do the lookup before submit you can present the user with choices for disambiguation."
django,3cdvuo,ares623,1 point,Tue Jul 7 03:43:07 2015 UTC,"First, don't ever modify a third-projects project's code directly. You want to extend it. If you modify code directly, then you have your own fork, and managing upstream changes will be really hard.  Second, be very careful with dumpdata and loaddata. In theory they work great. In practice they can prove very troublesome.  Therefore, make lots of backups as you explore using them. Or, consider instead writing some Python scripts of your own to manage the migration of data."
django,3cdvuo,pydanny,1 point,Tue Jul 7 17:37:09 2015 UTC,"Thanks. Yeah, I'm going with my 2nd option at the moment, though I have no idea how re-importing the data will work out. I'll probably write a script to carefully re-create the dumped data using the model constructors instead of using loaddata.  (btw, love your 2scoops book. It's helping me a ton on my first big Django project :)"
django,3canw1,good_piggy,3,Mon Jul 6 12:36:01 2015 UTC,Don't you have DEBUG=True in your settings file?  That would show the traceback in the browser.
django,3canw1,mbrochh,2,Mon Jul 6 12:41:27 2015 UTC,Yep.  This is all that shoes in my browser atm
django,3canw1,skolsuper,2,Mon Jul 6 12:47:11 2015 UTC,"Since this an ajax request, your browser won't open the response body automatically. However I can see from your screenshot in OP that the response is 11kb long, so you do have DEBUG=True set and the traceback will be there in the response.  I use firebug in firefox, with that I can open the 'net' panel, right click on a 500 error request and select ""open response in new tab"".  There I can browse the stack trace to my heart's content."
django,3canw1,skolsuper,3,Mon Jul 6 13:05:52 2015 UTC,"Awesome. This is just what I needed, thank you.  I've been trying to debug this for hours. Apparently I was just missing an import at the top of the file.  I am so done for the day."
django,3canw1,Thingdeux,4,Mon Jul 6 13:13:11 2015 UTC,"You're welcome, and I know that feeling.  You might want to take a look at PyCharm.  I was a Sublime Text nut for a long time, and I still miss some things about it, but PyCharm would have highlighted that missing import for you as soon as you typed it.  It has saved me countless hours already."
django,3canw1,YouAreSalty,2,Mon Jul 6 13:41:19 2015 UTC,"Sounds cool. I'll check it out now. Thanks for your help, mate."
django,3canw1,andybak,1 point,Mon Jul 6 13:51:05 2015 UTC,"Be careful, PyCharm is expensive, complex, and powerful.  It may be overkill for your needs if you're just fooling around with Django.    If you're not just fooling around then you should make sure to keep your views light and compartmentalized enough for you easily trace the stack.  When you said you don't want to go diving through your code that worried me a bit.  Make sure to keep your views as light as possible and try not to do too much logic there.  That said, PyCharm is wonderful and if you're going to do this professionally well worth the investment."
django,3canw1,YouAreSalty,2,Mon Jul 6 22:09:12 2015 UTC,"There is a trial version of PyCharm with Django support, and a free version without Django support to try out as well."
django,3canw1,jordanpwalsh,1 point,Tue Jul 7 05:04:53 2015 UTC,'Django support' isn't as critical as it sounds. It's mainly template syntax checking and some other minor bells and whistles.  Most of the really useful parts of Python support is in the free version.
django,3canw1,chintuz,1 point,Wed Jul 8 23:41:31 2015 UTC,"I haven't tried the free version, I got a trial on the pro paid version.  Do the free version do the autocomplete for Django?"
django,3canw1,andrey_shipilov,1 point,Thu Jul 9 02:37:01 2015 UTC,"In addition to /u/skolsuper's suggestion of Firebug, the ""network"" tab of Chrome Developer Tools will show you the output in formatted HTML."
django,3canw1,xcombelle,2,Mon Jul 6 19:11:01 2015 UTC,install a lib called  debug_toolbar and it breaksdown few things for you ...   and you can get useful insights into where things have gone wrong
django,3canw1,Alphare,1 point,Mon Jul 6 22:42:08 2015 UTC,Use loggers next time.
django,3canw1,shazammerbammer,1 point,Mon Jul 6 16:28:13 2015 UTC,how to do it is a good follow up question.    A similar question:http://stackoverflow.com/q/238081/128629 And a pretty good answer for the OP : http://stackoverflow.com/a/6395837/128629
django,3canw1,_under_,1 point,Mon Jul 6 20:57:03 2015 UTC,"I agree. I log to the console, it's really helpful when doing AJAX."
django,3ca65m,efflicto,3,Mon Jul 6 08:33:14 2015 UTC,"django-tables2 support sorting, if you want filtering I think you need to add that yourself and change the queryset based on the GET/POST parameter  although it's more complicated lately I've used angular ui.grid but there are also other alternatives like jquery datatables that might be easier to use if you don't know angular"
django,3ca65m,Brandhor,1 point,Mon Jul 6 09:10:05 2015 UTC,"Thanks for all these sources, will give it a try! There is much to learn I think..."
django,3ca65m,la_gazelle,3,Tue Jul 7 06:17:51 2015 UTC,"I don't know much about djangosuit, but I second what Brandhor suggested--django-tables2.   As for filtering, I just accomplished exactly what you're looking for by combining django-filter with django-tables2. Works great!  There are some StackOverflow answers discussing how to combine them too."
django,3ca65m,raiderrobert,2,Mon Jul 6 12:55:28 2015 UTC,Thank you!
django,3ca65m,ilikedirigibles,1 point,Tue Jul 7 06:18:13 2015 UTC,I actually did this just last week with CBV. Very elegant.
django,3c9sqe,MaldorLevr,5,Mon Jul 6 05:32:11 2015 UTC,A cron maybe?
django,3c9sqe,unklphil,6,Mon Jul 6 05:56:26 2015 UTC,"Seconded. You probably want to implement your logic as a Custom Management Command which gives you a completely initialized django environment with database and all, and call it with a cron each day."
django,3c9sqe,athalean,2,Mon Jul 6 07:21:15 2015 UTC,"This 2 answers, and to add my grain of salt, you can have somewhere in some model a date where this process should trigger, and with cron and the management command you can scan for all the records that needs processing."
django,3c9sqe,_eka_,3,Mon Jul 6 13:18:36 2015 UTC,I think Celery is your best bet.  http://celery.readthedocs.org/en/latest/userguide/periodic-tasks.html
django,3c9sqe,DustPuppySnr,1 point,Mon Jul 6 06:11:32 2015 UTC,I think Celery is a huge overkill for this kind of thing.
django,3c9sqe,roddds,2,Mon Jul 6 12:32:26 2015 UTC,"If the only thing that you need to do is schedule one thing, then I would wholeheartedly agree with you.  I just wrongly assumed that this app would already use Celery. Most lottery kind of apps should use mail and mail should almost always be handled async."
django,3c9sqe,DustPuppySnr,2,Mon Jul 6 15:40:55 2015 UTC,"Agreed -- if there's already a Celery installation in place, might as well use it."
django,3c9sqe,roddds,1 point,Mon Jul 6 19:11:32 2015 UTC,"Considering the fact that celery is really simple to get going in a django project, I would argue that it's not overkill at all. You only need to add a couple of files and install rabbitmq (which is one command) and you have full async power. as /u/DustPuppySnr mentioned, if your doing anything involving sending mail, then it should be done asynchronously. So celery should seriously be considered (and its nice and stable instead of cobbling together some custom solution for a simple task)."
django,3c9sqe,npolet,3,Thu Jul 9 02:51:32 2015 UTC,"Basically you need to schedule a task that will run at a specific datetime. You're looking for some kind of asynchronous task manager. You can go all out and use Celery but it's a bit overkill. There's cron if only people with direct access to the server need to setup the task. You can setup your own, here's a really simple one I keep coming back to. I'm currently writing my own app that is a bit more in depth but very similar to this. I've also been looking at django-async but it hasn't been updated in a while."
django,3c9fd8,fractal_engineer,2,Mon Jul 6 03:12:19 2015 UTC,"So, the remote DB connection is to the customer's DB instance?   The suggested method is almost certainly the best approach.    I once started down the path of the alternative (which is using alternative connections and then re-wiring every database call to make use of the appropriate handler), and it's a painful path.    Just have a single settings file for each customer (note: they can be programmatically generated) and an appropriate nginx/apache file that specifies which settings file to read from (again, can be programmatically generated) and save yourself the headache of trying to be clever."
django,3c9fd8,issue9mm,2,Mon Jul 6 08:06:09 2015 UTC,"If is understand correctly, you will have two Django apps talking to one database: that means that you need to keep your models in sync in both apps. If you only have a couple of basic models it might seem doable, but it can quickly get unwieldy.  You mention adding an API - I would suggest that you start with that and only use that.   The client app can manage its own database and provide an API that the main app can connect to. You lose the nice easy ORM-ness of talking to the database directly, but the end result is much more maintainable, particularly if this system grows to dozens of clients.  Have a look at Django rest framework which will probably do 90% of what you need for an API automatically.  Another option, if the data is read-only on the main app side, is live replication of the database. MySQL handles this really well, but you'll want a reliable connection between the servers for it to work reliably."
django,3c9fd8,chronug,1 point,Mon Jul 6 09:04:13 2015 UTC,"This is the desired effect, yes. Using Django's ORM across two different applications and sharing/keeping the models in sync. The client_app would be running a few simple models, but the main_app would be significantly more complex, using several foreign keys to client_app models.  BUT, based off your suggestion and what others have commented, would this revised architecture be more feasible to develop:  client_app: has a crud api (django rest framework) to interface with its models, in addition to serving as the main engine collecting and organizing sensor/hardware data from on-site. Additional features can be uploaded as django packages and activated from main_app via api.   main_app: establishes a mysql database connection to client_server and uses it as its ORM db. Uses client_app api to access sensor/hardware data. Connections are ssl encrypted. Sub-domains routed to their appropriate settings file.  It's important to the clients to keep all data pertaining to their facility on-site, which is why I want to keep the main_apps database on the same mysql server that client_app is using. Should not be an issue correct? As long as names don't overlap."
django,3c9fd8,chronug,1 point,Mon Jul 6 19:57:08 2015 UTC,"I think it is difficult to advise on this without knowing the whole situation and the origin and business case for the requirements. My instinct if I was brought in to consult on something like this would be to try to re-frame the problem to simplify the requirements, because at the moment it feels like it could quickly become unwieldy and unmaintainable.  How about doing everything on the client app, including the premium features? You could ensure that the client doesn't use them if they haven't paid by requiring an authentication token that expires after a set period of time.  Then your main app just needs to be an authentication server that knows what features each client has paid for and dishes out tokens."
django,3c9fd8,zemmekkis,1 point,Mon Jul 6 21:29:24 2015 UTC,"That's how it currently is, everything hosted on-site. However we want to go towards more of a saas platform in order to avoid having to individually upgrade clients. The ability to modify/upgrade a single Django package and that takes care of all the clients is appealing."
django,3c9fd8,zemmekkis,1 point,Tue Jul 7 08:07:47 2015 UTC,I am pretty confused at this architecture.  Why does each client get their own database?
django,3c9fd8,dAnjou,1 point,Mon Jul 6 06:20:46 2015 UTC,"In the event that they stop subscribing to the service, they physically keep all their data on-site and are able to continue using the barebones version of the system. Client_app, as described above."
django,3c9fd8,Brandhor,1 point,Mon Jul 6 06:35:03 2015 UTC,Gotcha. So in effect an on premise installation.  The hardest things you're going to deal with is scaling and keeping all your clients in sync I imagine. Also tracking which client has which feature enabled. The main app I assume is going to have to handle a lot of that.  I kind of think of it as a thick client model where they have local data store as well as phoning home every so often for updates and licensing.
django,3c9fd8,xdvl,1 point,Mon Jul 6 16:10:23 2015 UTC,"Correct, similar to thick client. In that all client-data is stored to a server they ""own"" but we operate. The nice front-end/extended functionality of the system can only be used/enabled from the central server though."
django,3c9fd8,garion911,1 point,Mon Jul 6 20:02:12 2015 UTC,You should know that this is not at all uncommon mostly for data security and data privacy reasons.
django,3c74yc,jcalazan,10,Sun Jul 5 14:29:19 2015 UTC,"Django. It's decent. It's the default. The django apps you will use in your application already use it. It's basically little different to jinja2 anyway.  I've used both extensively (I tend to use jinja2 for my non-django templating needs) and I've never actually cared much which one I was using.  If you're doing anything complicated with either of them, you're probably doing something a bit wrong anyhow (i.e. putting business logic in your template)."
django,3c74yc,pydry,1 point,Sun Jul 5 14:40:49 2015 UTC,"I think going with the default has a lot going for it. If you don't know that you need a new template language yet, you probably don't?   I dunno, there's a lot of reason to want to use the more standard django setup if you are doing it professionally."
django,3c74yc,shazammerbammer,6,Sun Jul 5 19:00:06 2015 UTC,"I used Jinja2 with Flask once, but I immediately missed the pluralize filter, which I had to add myself. Other than that the syntax was pretty much the same; maybe that it behaved a bit differently with regards to inheritance, but I can't remember to be honest.  I would stick with the built-in template engine. I have never experienced any problems with it, so it feels a bit wasteful to replace it just for the sake of it. But I would happily hear if Jinja2 has any benefits."
django,3c74yc,MaTachi,2,Sun Jul 5 14:39:31 2015 UTC,"I didn't go through the list but I'm pretty sure there are filters in Jinja2 that aren't in Django and the other way round. That's not a very valid reason to choose one over the other.  And specifically the pluralize filter in Django is too naive and simple for real world pluralization. Jinja2 overs a way better solution in it's i18n extension.  Benefits of Jinja2 are speed and flexibility. Filters for example can take more than one additional argument. And there is a feature that Django lacks completely but is pretty convenient: tests (for checking variables against, well, whatever you want to check them against)."
django,3c74yc,dAnjou,1 point,Sun Jul 5 15:54:59 2015 UTC,Jinja2 is faster than the default template engine and thats why I started using it.
django,3c74yc,kevin____,5,Sun Jul 5 18:40:03 2015 UTC,"Use Jinja2, seriously!  For one it's much faster but this isn't even that important because there are other ways to speed things up.  The way more important reason is Jinja2's flexibility. It's more flexible in almost every aspect. Even though you may think at first that you don't need it, sooner or later you'll pull your hair out when you notice that you can't simply access dictionary keys that have a space in them. Or that you can't simply insert a global variable (like settings) into every template's context. Or that filters can't have more than one additional argument.  I know the reasons why Django devs decided to do it that way and I know that people will probably downvote my comment. But I think the reason is - sorry - dumb and the outcome of it is way too restrictive and limiting."
django,3c74yc,dAnjou,5,Sun Jul 5 15:42:02 2015 UTC,Or that you can't simply insert a global variable (like settings) into every template's context.    Yes you can..
django,3c74yc,danielsamuels,1 point,Sun Jul 5 19:53:07 2015 UTC,As far as I understood there needs to be a RequestContext then which isn't necessarily the case in a big already existing code base.
django,3c74yc,dAnjou,1 point,Sun Jul 5 20:18:24 2015 UTC,"If you are dealing with a big existing code base, it is very likely not written with Jinja2 anyway."
django,3c74yc,teilo,0,Sun Jul 5 22:18:05 2015 UTC,"Sounds like you're still using function based views. If you are, I can see why you're having issues with your templating."
django,3c74yc,danielsamuels,1 point,Sun Jul 5 20:20:55 2015 UTC,"What are you talking about? What does one have to do with the other?  CBVs don't change the way you write templates. Neither CBVs nor functional views pass RequestContext unless you tell them to.  Unless of course you are saddling yourself with the generics. I have yet to find a scenario where they weren't more trouble than they are worth. Writing views is easy, whether functional or CBVs."
django,3c74yc,teilo,2,Sun Jul 5 22:29:20 2015 UTC,"I feel the same way about using classes for something that's actually a very functional thing. But I've never used CBVs, so I can't really say anything about them.  For the project I'm currently working on it doesn't matter anyway because it would take a huge effort to refactor everything to CBVs."
django,3c74yc,dAnjou,1 point,Mon Jul 6 06:38:46 2015 UTC,"I find CBVs most useful in those scenarios where you would otherwise be repeating a lot of code in multiple views which are similar, but not similar enough to combine into a single view. However, even then, I have rolled my own, rather than relying upon the generics, which are overly complicated, and top-heavy."
django,3c74yc,teilo,2,Mon Jul 6 13:35:47 2015 UTC,"Eh, I wouldn't consider speed of templating to be a large factor in making your decision. Anything difficult to generate should be cached anyhow."
django,3c74yc,ckcollab,1 point,Mon Jul 6 04:27:08 2015 UTC,That's why I literally said that it's not that important.
django,3c74yc,dAnjou,1 point,Mon Jul 6 06:16:36 2015 UTC,"Use Jinja2, seriously!   Sorry I missed that and I was being too vague, I mean: it seems like the only real reason to switch to Jinja2 is speed. In ~4 years of Django I've never had a problem with the templating. Which to me means Jinja2 vs Django is no big deal, but to be compatible with everything should just use Django. Matter of preference!"
django,3c74yc,ckcollab,1 point,Mon Jul 6 07:08:06 2015 UTC,"So far I didn't hit any performance issues with Django's template engine, so I don't really care about the speed either but it's nice to know that with Jinja2 you'd have to care even less.  The real reason for me are the other things that I talked about in multiple comments here. They've annoyed me quite a bit in the past."
django,3c74yc,dAnjou,3,Mon Jul 6 07:55:17 2015 UTC,"I'm not sure what sorts of advantages Jinja2 provides in this situation. I find Django templates to be more natural to read and write, and I'm not aware of any significant differences in performance or maintainability. I've used Jinja2 for apps using Flask and Pyramid and it was fine, but it always felt like a less polished version of Django templates anyway."
django,3c74yc,msnook,0,Sun Jul 5 15:11:05 2015 UTC,"I don't know why your comment got upvotes. You don't seem to know what you're talking about.   more natural to read and write   It's the exact same syntax.   not aware of any significant differences in performance   You're not well informed then at all.   it always felt like a less polished version of Django templates anyway.   Any specific reasons for this feeling? Because, again, it's the same syntax. If anything felt less natural or less polished then maybe it had something to do with how you were using it."
django,3c74yc,dAnjou,1 point,Mon Jul 6 06:33:07 2015 UTC,"Okay except, it's just not the same syntax. You're simply not correct about that. It's a silly thing to say.  Performance differences... yeah... I mean you will find people running big companies writing blog posts about their performance enhancements from Jinja2, but for small and medium projects there's just nothing at the templating layer approaching an order of magnitude of the performance costs of a single database read/write, so perhaps what I should have said was, ""It's pretty rare to even notice the performance differences"".   I'll give you a point on that last one, but still, you're being a dick about it. Did you have a bad day at work and needed to be rude to someone to feel better about yourself?"
django,3c74yc,msnook,1 point,Mon Jul 6 13:22:22 2015 UTC,"Okay except, it's just not the same syntax. You're simply not correct about that. It's a silly thing to say.   Maybe you have to clarify what you mean by ""syntax"" then. I can only see very few things that make the syntax: {% %}, {{ }}, {# #}, and | for filters. Check Jinja2's and Django's docs about that. It's literally the same.   Performance differences... yeah... I mean you will find people running big companies writing blog posts about their performance enhancements from Jinja2, but for small and medium projects there's just nothing at the templating layer approaching an order of magnitude of the performance costs of a single database read/write, so perhaps what I should have said was, ""It's pretty rare to even notice the performance differences"".   I agree. And as I said in other comments, I don't even care that much about it. But it's still there and it's a significant difference.   I'll give you a point on that last one, but still, you're being a dick about it.   I'm just being blunt. If that already counts as being a dick, then I guess I have to deal with that. Don't take it personally."
django,3c74yc,dAnjou,2,Mon Jul 6 13:49:08 2015 UTC,"It's little stuff, like:   {{ loop.cycle('odd', 'even') }}   vs.   {% cycle 'odd' 'even' %}   Jinja2 looks more like we're invoking an OO function, which is reasonable because Jinja2 actually lets us invoke functions/methods inside the template. Django templates are a bit more strict and pure about separating business logic from template logic, and as a result, the code you write is more readable (IMO) from a front-end-y perspective.   I really like Jinja2 templates when I'm hacking something together and sort of taking a mindset of ""Don't tell me how to separate business from template logic! I can handle myself!"" (It's really good with Flask, which is built with this attitude in mind.) But I think that the strict separation makes Django templates better for guiding newbies to learn good coding patterns, and often times better for small teams with differentiated skill sets."
django,3c74yc,msnook,0,Mon Jul 6 14:26:02 2015 UTC,"It's little stuff, like: {{ loop.cycle('odd', 'even') }} vs. {% cycle 'odd' 'even' %}   Okay, but you chose a very very specific example that they just implemented differently, the syntax is still the same. And about this specific example I'd even say that Django's implementation is kinda weird (why is there a separate tag for something that's basically only ever used in a loop?).  I can't stress enough how strongly I disagree with the mindset that you're describing. Writing maintainable and readable code is the responsibility of the developer, not of the framework! It should certainly encourage best practices but it should never set that hard constraints. Doing so doesn't necessarily prevent you from shooting yourself in the foot, if anything people will find ways to do it anyway.  And since you mentioned guiding newbies: I think the better approach here would be to establish a mindset in the community that encourages them to ask about best practices if they don't know any better. I've yet to see a framework/library documentation that tells users to ask when something is unclear on the conceptual level. But it's the same everywhere else (IRC, reddit, SO, ...), people almost always address only the obvious technical side of a problem, they never ask whether it actually makes sense to approach it that way.  Sorry, I got a bit carried away.   I really like Jinja2 templates when I'm hacking something together and sort of taking a mindset of ""Don't tell me how to separate business from template logic! I can handle myself!"" (It's really good with Flask, which is built with this attitude in mind.)   It's not about hacking, it's about not getting in my way. Because the framework can't possibly know what I have in mind. It shouldn't limit my flexibility. And that's why I prefer Flask over Django anytime."
django,3c74yc,dAnjou,1 point,Mon Jul 6 15:19:50 2015 UTC,"Okay, but you chose a very very specific example that they just implemented differently, the syntax is still the same.   This is a general thing. Django templates basically never use parens (ever??), and the stuff you write in between your braces generally looks a bit more like natural language. It's like the difference between Javascript and Coffeescript. There's ""no difference"", except that there is; people made a choice to write CoffeeScript differently because, for the types of things they found themselves doing over and over again, it seemed more natural to read and write it one way over the other. It's not a big deal, it's just that I find Django templates to be more natural to read and write.    And that's why I prefer Flask over Django anytime.   Yeah. It shows. Ironically, I also prefer Flask over Django for exactly this reason. But we're here on the Django subreddit answering question about Django, so I think my answer was a pretty good one, explaining how Django templates are a bit more opinionated than Jinja2 templates, and how that's just a thing that Django is good at.   If you're not interested in framework-enforced code patterns, use flask, or just use webob--it doesn't matter to me, but you have to admit it's pretty bizarre to come onto the Django subreddit and be all, ""You're so wrong for basically summarizing Django's development philosophy.""  Your quarrel isn't with me; it's with the framework."
django,3c74yc,msnook,1 point,Mon Jul 6 17:53:24 2015 UTC,"But we're here on the Django subreddit answering question about Django, so I think my answer was a pretty good one, explaining how Django templates are a bit more opinionated than Jinja2 templates, and how that's just a thing that Django is good at.  If you're not interested in framework-enforced code patterns, use flask, or just use webob--it doesn't matter to me, but you have to admit it's pretty bizarre to come onto the Django subreddit and be all, ""You're so wrong for basically summarizing Django's development philosophy."" Your quarrel isn't with me; it's with the framework.   Because it is an officially supported option now to use Jinja2 in Django and Op specifically asked about it I think it's only fair to argue for Jinja2 and against Django's original template engine.  And of course I don't have a quarrel with you. All I did was addressing points in your original post that didn't seem very well informed."
django,3c74yc,dAnjou,3,Sat Jul 11 10:48:42 2015 UTC,"A few things:  First, the lack of custom tags and fewer filters are not a disadvantage. In Jinja2, custom tags are not necessary, because you can invoke functions directly. Filters are also just functions.  Second, the speed of Jinja2 is rarely ever a reason to use it. If you are bottle-necking on your template rendering, you probably have other problems rather than the template engine itself.  Third, if you use Jinja2, you lose the ability to call custom tags from any 3rd party apps you may use.  In my opinion: Use Jinja2 if you don't need custom tags from other apps, not because of its speed, but because of its syntax. Otherwise, use django templates, and don't sweat it. You aren't hurting anything by doing so."
django,3c74yc,teilo,1 point,Sun Jul 5 22:11:21 2015 UTC,"Jinja is a good template engine. However, it is not all upside. Compared to the django template engine you gain significantly in render speed, and lose significantly in the size and scope of the built-in filters and tags. If you're going to switch to jinja you need to be prepared to implement your own filters for a lot of stuff."
django,3c74yc,metaphorm,1 point,Sun Jul 5 16:23:12 2015 UTC,"Wow, lots of great info!  After going through the comments, I decided it's best for me to stick with the default Django templating engine.  Thanks again guys!"
django,3c74yc,YouAreSalty,1 point,Mon Jul 6 17:37:38 2015 UTC,"I would say Django templates are well supported in Django, and it is battle tested.   Jinja2 might have it's benefits, but unless you know why, why switch?   I don't expect it, but who knows what sort of issues might crop up.  Stick with the core of Django until there is a significant reason to switch."
django,3c74yc,andybak,1 point,Tue Jul 7 01:38:46 2015 UTC,"I've just inherited a Pyramid codebase that uses Jinja.  For every place I think ""Yeah, it's cool to be able to do that in a template"" there's a dozen more where I scream ""WHY ARE YOU DOING THAT IN A TEMPLATE!!!"""
django,3c74yc,tgdn,1 point,Wed Jul 8 23:45:30 2015 UTC,"I use Jinja2 for every single project I use in Django. Easier to do things, less code, faster rendering, more powerful templates.  Things like  {% ifequal var1 var2 %} {% endifequal %}   translate to   {% if var1 == var2 %} {% endif %}   The use of actual functions or methods such as  {{ myObject.objects.filter(isFriend=1, ... ) }}   or  {{ url('namespace:myurl', pk=1) }}     And for i18n the use of  {{ _('My sentence is here') }}   or  {% trans url=url('namespace:myurl', pk=1) %}     My sentence and <a href=""{{ url }}"">my link</a> {% endtrans %}     Comments  {# my comment goes here #}   {#      and      many      lines      too   #}   I use http://niwinz.github.io/django-jinja/ as it offers already written modules, it is very easy to set up, it offers a way of matching only files depending on a regex such as files with .jinja as extension, it also offers a very simple way of writing new tags and filters (extensions).  It already comes with all the tags and filters from http://jinja.pocoo.org/docs/dev/templates/.  And you can set it up as you like in your TEMPLATES in the settings.py.  For example this is a snippet of code I use in one of my projects  'OPTIONS': {             'match_extension': '.jinja',             'newstyle_gettext': True,             'autoescape': True,             'auto_reload': DEBUG,             'constants': {                 'STATIC_URL': STATIC_URL,                 'timezone': timezone,                 'brandname': _('My brand'),             },   I love it, it's amazing !"
django,3c74yc,pydry,5,Sun Jul 5 17:46:10 2015 UTC,{% ifequal var1 var2 %} {% endifequal %}  translate to  {% if var1 == var2 %} {% endif %}   This is no longer true and hasn't been for some years.
django,3c74yc,tgdn,2,Sun Jul 5 18:13:18 2015 UTC,"Well, I have not used Django templates for a long time then"
django,3c74yc,raimondious,1 point,Sun Jul 5 18:36:05 2015 UTC,"The use of actual functions or methods such as {{ myObject.objects.filter(isFriend=1, ... ) }}   I enjoy the design of Django templates because this is difficult on purpose — you shouldn't be doing queries like this at the template level.  If I find myself fighting with the template language, then it's a reminder to think about if what I'm doing is the best way to do it.  Most of the time what I want is a model property, or something added at the view level.  If you have many queries being executed in your templates, figuring out performance issues is more difficult than it needs to be.   And for i18n the use of {{ _('My sentence is here') }}   You can also do this with Django templates."
django,3c8u7b,lordmayer,2,Sun Jul 5 23:55:15 2015 UTC,"I use webfaction and I use bitbucket. Here's what I did. I used their one click installer to create a Django project. This gave me an Apache server setup configured for Django. This step also gave a Django installation. However I deleted that and installed my application's source code (git clone wherever you want) and dependencies (virtualenv and pip). I then modified the Apache configuration file to refer to my source code's wsgi.py file.  This is my command to upgrade running code on webfaction: ssh username@username.webfactional.com ""cd ~/mywebsite.git; git pull bitbucket master; touch myproject/wsgi.py;"
django,3c8u7b,mssnlayam,1 point,Mon Jul 6 01:11:58 2015 UTC,"Well, I'm too noob to understand the last part of your explanation.   I then modified the Apache configuration file to refer to my source code's wsgi.py file. This is my command to upgrade running code on webfaction:   ssh username@username.webfactional.com ""cd ~/mywebsite.git; git pull bitbucket master; touch myproject/wsgi.py;   Do you have any tutorial about it?"
django,3c8u7b,mssnlayam,1 point,Mon Jul 6 02:09:59 2015 UTC,"The last part talks about two things.  1) Apache configuration: The apache configuration file set up by Webfaction's installer has a line pointing to the wsgi.py file of the Django project that Webfaction created. Modify this line (in httpd.conf) to point to your project's wsgi.py file     WSGIScriptAlias / /path/to/my/project/wsgi.py  2) After you commit a change, how to get it to Webfaction servers. The command I pasted does an SSH to to server, goes into my project directory, does a git pull and touches the wsgi.py file as a result of which Apache reloads the Django application.  Makes sense?"
django,3c8u7b,mssnlayam,1 point,Mon Jul 6 02:51:45 2015 UTC,"Makes sense, but how do I execute the ssh command or where I past it? I appreciate your help"
django,3c8u7b,erewok,1 point,Mon Jul 6 03:45:32 2015 UTC,"You can ssh into the webfaction machine and type the commands specified within quotes in my first comment.  You could also do      ssh username@username.webfactional.com ""the list of commands""   This will ssh to the machine, run the commands on the remote webfaction machine."
django,3c6j9i,TheBigBlabberMouth,6,Sun Jul 5 08:37:36 2015 UTC,"Setting aside the fact that your example makes no sense, you use .exclude() to filter out rows:   QuestionsModel.objects.exclude(name='Tim')   This equates to:  SELECT * FROM question WHERE name <> 'Tim';"
django,3c6j9i,teilo,3,Sun Jul 5 13:58:18 2015 UTC,"I can't see any logical pattern in your filtering. You're saying you want to ""filter out"" Tim's question but in your second table you've crossed out some but not all of Tim's questions and even some of Jill's and Bill's questions.  What is it you want?  EDIT Typo."
django,3c6j9i,dAnjou,5,Sun Jul 5 12:09:42 2015 UTC,WTH is wrong with you?
django,3c6j9i,dAnjou,2,Sun Jul 5 15:58:58 2015 UTC,Don't get mad at him bro you're the one who didn't give a clear example.
django,3c6j9i,snarkhunter,3,Sun Jul 5 16:13:11 2015 UTC,"No it's not. You asked   how do i filter only tim's questions out of the query set.   And then in your example you have 3 Tim answers crossed out (which I take to mean excluded from the result set), 1 Jill excluded, 2 Jills included, and both Bills excluded.  If you wanted to know exclude all Tims from your result, why did you leave one uncrossed? If you wanted your result to ONLY be Tims, why did you cross two of them out?  Attacking people for pointing out that you're being unclear isn't going to get you very far, buddy."
django,3c6j9i,snarkhunter,2,Sun Jul 5 16:07:15 2015 UTC,"I don't understand why you're so worked up, and the over-the-top insults are weird.  People ask questions in this sub because they need help with Django. Sometimes their questions are unclear, so clarification is requested. Normally the OP clarifies and they get an answer.  My guess is that you goofed up your example and are embarrassed about it. It's OK to be a n00b dude, we all were at one point! Hell, I still mess stuff like that up!  But I'm not married, and if I was I wouldn't beat my wife. Domestic abuse isn't funny."
django,3c6j9i,snarkhunter,3,Sun Jul 5 16:08:35 2015 UTC,QuestionsModel.objects.filter(value__nin=[q.value for q in QuestionsModel.objects.filter(user='Jim')])  Maye you can think of a better data model ?
django,3c6j9i,lonely_b,1 point,Sun Jul 5 16:20:19 2015 UTC,This is a good point.  Whenever I find myself making really convoluted queries I stop and rethink how I store my data.  A couple of times restructuring the models has helped immensely.
django,3c2sb6,cscanlin,4,Sat Jul 4 05:42:10 2015 UTC,"Probably using Django (JSON) fixtures which you automatically load into your database upon deployment.  It might also make sense to load it into redis at runtime if you will just use it for straight lookups, and the data won't reference anything else (e.g. by foreign key).  Difficult to know precisely without knowing what kind of data it is and how it will be used, though."
django,3c2sb6,pydry,8,Sat Jul 4 07:07:23 2015 UTC,"When you say ""static data"", do you mean that it is changed infrequently and only by admins/developers, never at runtime by user actions?  I've worked on a few sites that also needed a fixed static database of 1000 to 1 000 000 entries. The users could view and search for this data, and in particular, the custom search algorithm required all entries to be loaded in memory all at once. So there was no benefit to using an actual database: every request would have to reload it in full anyway.  My approach was as follows:   Put all the data in a text file (JSON, CSV, whatever works) in the code repository. Manage it with git just like all other code. At Django startup, read and parse the file into tuples/dicts/etc in memory, store it in a global variable. In the views using the data, just read the global variable directly from memory.  If the data changes, deploy a new version of the codebase and restart the app server.   This will use (data size) x (number of python processes) of memory. But since every request would have used the same, it was actually more efficient to load it only once on startup. With your 50 000 entries, you should be entirely fine unless each entry is huge. But it might be a good idea to use an actual database if:   You want to edit & save changes to the data while the app is running, You only need a small subset of entries for each request, and can write a SQL query to only fetch these entries for the request."
django,3c2sb6,lehmakook,2,Sat Jul 4 06:15:18 2015 UTC,This works really well for us.
django,3c2sb6,RisingStar,1 point,Sat Jul 4 18:23:03 2015 UTC,"I don't know too terribly much about memory management or what django keeps in memory and how to access it,  any particular terms to check out (other than the too obvious) or resources to learn about this?"
django,3c2sb6,timworx,2,Sun Jul 5 02:54:11 2015 UTC,"Hmm. I'm not actually completely sure about Django. I've always just gone with the following flow of thought for Python itself:   Imported modules are kept in memory until the python interpreter exits. Modules can have top-level global variables, which are kept alive in the module. So just put your data in a top-level variable in any module, and you have an interpreter-wide cache. There will be one copy per process (shared by all threads in that process).   For example, in your models.py or any other file:  DATA = None def init():     global DATA  # Needed to write to globals from functions, reading is fine without this.     with open('foobar.csv') as f:         DATA = ....   And you can put a call to init() to the top-level end of models.py (models.pys are imported when Django starts, and will run top-level code on import), or since Django 1.7, into the ready() of the app's config: https://docs.djangoproject.com/en/1.8/ref/applications/"
django,3c2sb6,lehmakook,1 point,Sun Jul 5 06:46:43 2015 UTC,Python already had a module for your use case in its standard library. It's called shelve.
django,3c2sb6,redalastor,1 point,Sun Jul 5 00:33:58 2015 UTC,"For OP's use case, not mine perhaps?  Because it would not have worked for mine at all.   I did not want a writable database - any modifications at runtime are a bug, and should be an error, and certainly not persisted, Loading from CSV was actually better than using pickle, shelve or any other custom format, because the data originally came from a third-party api that gave out CSV. This way we could just inspect the file by hand, and did not need a separate preprocessing step on import."
django,3c2sb6,lehmakook,1 point,Sun Jul 5 06:31:45 2015 UTC,"Static data for website content? I would just leave it in a JSON file and use a Django CLI command to create static HTML pages from there, to serve them via webserver."
django,3c2sb6,yaix,1 point,Sat Jul 4 08:21:22 2015 UTC,"50,000 entries is not that much. (it's only 50Mo if 1Ko by entry) Feel free to store it in the way which is more convenient for you to use it. If accessing it prove to be the bottleneck you will have plenty of occasion to optimize access. (The usual way to optimize access to data is with some cache strategy)"
django,3c2cp0,whiskeyfox_,3,Sat Jul 4 02:54:49 2015 UTC,It helps with all kinds of latitude and longitude calculations.  Have one point on earth? Want to run a query that returns all other points in your database that are within a 5km radius of that point? GeoDjango can do this.
django,3c2cp0,mbrochh,2,Sat Jul 4 04:16:54 2015 UTC,Awesome. This seems like the way to go in the future. My partner thanks you for encouraging another item on the future-to-do-list.  Thanks.
django,3c2cp0,akoumjian,3,Sun Jul 5 01:59:55 2015 UTC,"If you store geospatial fields in your database (points, paths, boundaries), GeoDjango is really helpful for doing geospatial queries on that data. For example, get all of objects X located in the boundary 'Wisconsin'. The database does all the heavy lifting of course (postgres has a module called postgis you will need to install).   The downside to using something like Google is you will need to constantly update them with your data, and if you want to filter on anything more than geo, you have to query them first, then take the results and filtering against that in your database. This significantly increases query time."
django,3c2cp0,nrhinkle,3,Sat Jul 4 04:22:41 2015 UTC,"By the way, have you seen https://www.marinetraffic.com/?"
django,3c2cp0,nrhinkle,2,Sat Jul 4 04:26:20 2015 UTC,I hadn't - now I have! I want to delve into that site and see how they pull their data.
django,3c2cp0,yuga_d,1 point,Sun Jul 5 01:59:14 2015 UTC,"It's pretty cool actually. Their FAQ has a of info. Ships over a certain size are required to transmit location information over AIS transponders, which are basically devices which broadcast location over VHF radio waves. It's meant for ships nearby each other to identify each other to avoid collisions and assist in port management for busy waterways. The MarineTraffic website uses land-based radio recorders to capture AIS data and feed it to their website. They'll actually send out the hardware required for free if you live in an area which isn't covered already. I figured based on the description of the site you want to build that you might find it interesting! When I first found it I spent a good couple days just looking at different ports and watching interesting vessels move around."
django,3c2cp0,dreampython,1 point,Sun Jul 5 05:21:51 2015 UTC,"not sure why you got downvoted, I think this is relevant even though it doesn't exactly answer the question. Cool website too"
django,3c1qzx,YouAreSalty,1 point,Fri Jul 3 23:26:26 2015 UTC,"I assume they are referring to the fact that most IDEs will consider blah_foo to be one word and highlight it when double clicked, etc, and that blah-foo will be blah and foo for the same.  For #2 it's the same thing but for stuff like  {% block blah_foo %} stuff {% endblock %}"
django,3c1qzx,merican_atheist,1 point,Sat Jul 4 01:23:25 2015 UTC,That is a good point. Thanks!
django,3c1qzx,NoLemurs,1 point,Sat Jul 4 03:37:02 2015 UTC,"but it really isn't clear to me why this is bad?   Well, in the first place, it makes the most sense to choose a consistent convention. If sometimes you use add-topping and sometimes you use add_topping you're just increasing your mental load because now you have to remember which one you chose each time you use the name.  It wouldn't be a totally unreasonable choice to use the add-topping version as your convention, but if your view's name in code matches the url pattern name you only have to remember one name, which just makes ilfe a little easier. You don't have to stop and think ""right, this is a url name, not a view name, so I should use a -"", and that's a good thing!  Basically, using dashes isn't terrible, but you should make a consistent choice, and underscore is the more natural and obvious choice."
django,3c1qzx,NoLemurs,1 point,Sat Jul 4 03:03:59 2015 UTC,"The book actually discusses this and is fine with dashes in url's, just not in python/django.  You are right that choosing a consistent convention across is easier, but oftentimes you don't get to make that choice. The other is also that URLs convention is preferred to have dashes, because underscores look like spaces. It might be good mental gymnastics to remember what you are dealing with, but I understand the benefit of having consistency as well.  So far the book has been great though, but I was just curious why the author (or the community) choose this convention?  Thanks for sharing! :D"
django,3c1qzx,thayerpdx,1 point,Sat Jul 4 03:32:33 2015 UTC,"So far the book has been great though, but I was just curious why the author (or the community) choose this convention?   Basically, if you're doing enough coding on enough sufficiently complex projects, the importance of minimizing your mental load is huge. Using underscores just removes one thing you have to think about when coding, and there's not really any argument against using underscores.   If you're just doing one project, so that you can keep a larger part of the project structure in your head at all times, then it matters less, and if you prefer the look and feel of dashes, go for it. It really isn't a big deal.   But I would definitely argue that the two-scoops convention is the clear correct choice here even if it isn't a particularly important decision."
django,3c22cv,ccb621,3,Sat Jul 4 01:12:56 2015 UTC,"I think that to have a good understanding of Django you should probably read the source code.   Why do you think this? I've found the best way to understand a framework is to read the docs while working on a project that actually uses said framework. Reading the source code might help to debug very specific issues, but it won't help you understand the framework as a whole."
django,3c22cv,ccb621,1 point,Sat Jul 4 06:03:58 2015 UTC,"I understand the framework and how to use it, I want to read the source to find out how it works"
django,3c22cv,paradox44,6,Sat Jul 4 06:14:08 2015 UTC,"Start with the request lifecycle.  Edit: For future readers, almost all interaction with Django starts with an HTTP request. If you understand how a request is routed, dispatched, and rendered, you understand a good amount of the framework: URL patterns, views, response objects, middleware."
django,3c22cv,buleria,1 point,Sat Jul 4 06:18:45 2015 UTC,Request Lifecycle is probably a good way to start...
django,3c22cv,xdvl,2,Sat Jul 4 08:20:15 2015 UTC,"I usually read Django source code when I try to wrap my head around how django admin works ;)  Anyway, as /u/ccb621 suggested, try the request lifecycle. You can even go half a step up and check out the often forgotten wsgi.py Django generated for you..."
django,3c22cv,xBBTx,1 point,Sat Jul 4 23:17:30 2015 UTC,You and everyone I know.
django,3c22cv,k4ml,2,Mon Jul 6 12:18:16 2015 UTC,Stay clear from the ORM. Still trying to figure that one out...
django,3c22cv,Taiosa,1 point,Sat Jul 4 23:49:33 2015 UTC,This maybe can help you - http://k4ml.github.io/posts/django-where-does-the-application-start.html
django,3bz51e,maxalon_forte,2,Fri Jul 3 09:26:33 2015 UTC,"You should not do it as part of your Django project.  Ideally you'd write an ""internal"" HTTP API (you don't necessarily need DRF or Tastypie for that!). Then you trigger your scraper periodically for example in a cron job. Or check out Scrapy, it provides a whole infrastructure including a server that let's you do this.  If this is too much overhead/effort (and I see that it could be) I'd implement it as a custom Django command."
django,3bz51e,dAnjou,3,Fri Jul 3 09:47:30 2015 UTC,"Ideally you'd write an ""internal"" HTTP API (you don't necessarily need DRF or Tastypie for that!). Then you trigger your scraper periodically for example in a cron job.    This isn't good practice. Long running tasks should never be made part of a URL request."
django,3bz51e,pydry,1 point,Fri Jul 3 10:07:06 2015 UTC,"Sorry, that was poorly phrased. Of course it shouldn't be done in the request handler! What I meant was that the scraper inserts its results via this internal API.  As an example, at my job we have to convert videos. This conversion happens in a Celery task which is triggered in a Django request handler. When the conversion is finished the tasks reports back to the API. This works very well for us."
django,3bz51e,dAnjou,1 point,Fri Jul 3 11:53:59 2015 UTC,Why not just update the database directly at the end and skip writing the API endpoint / requests boilerplate?
django,3bz51e,pydry,1 point,Fri Jul 3 12:26:11 2015 UTC,I started to explain that in my other comment. I'll continue to elaborate there.
django,3bz51e,dAnjou,1 point,Fri Jul 3 13:12:01 2015 UTC,Scrapy looks really cool!  I'm going to look into the custom django commands first though and see how I go.  Thank you so much for the useful information and links!
django,3bz51e,pydry,2,Fri Jul 3 09:55:28 2015 UTC,"Just a warning: I tried this with scrapy once and I had a hell of a time getting it to play nicely with Django. I tore it out eventually and replaced it with celery, mechanize and pyquery."
django,3bz51e,dAnjou,1 point,Fri Jul 3 10:08:01 2015 UTC,"Well, the point is to completely separate these two. Scrapy shouldn't even know that there is a Django application. When it's done scraping it should send the results via HTTP request to this internal API that I mentioned in my comment earlier. This API can be powered by Django or whatever else you prefer."
django,3bz51e,pydry,1 point,Fri Jul 3 11:56:05 2015 UTC,"This means writing more code than you'd have to otherwise, losing some type safety (REST/JSON has no concept of date, for instance) and slowing down your app (HTTP is a heavy protocol).  There might be valid reasons for doing it anyway, but I would never use the word should in the context of this architecture."
django,3bz51e,dAnjou,1 point,Fri Jul 3 12:19:51 2015 UTC,Since you addressed this in your other comment as well I'll continue to elaborate there.
django,3bz51e,xBBTx,1 point,Fri Jul 3 13:13:38 2015 UTC,Doesn't scrapy have built in Django orm support nowadays?
django,3bz51e,dAnjou,1 point,Sat Jul 4 23:52:09 2015 UTC,Don't know. I wouldn't use it.
django,3bz51e,pydry,2,Sun Jul 5 00:09:54 2015 UTC,"You need celery!  I did this once before like this:   Dumb cron task that runs a dumb django manage command that triggers a celery task every minute or so. The celery task figures out if it should scrape yet (what was the last time I scraped), does all of the scraping with mechanize and pyquery (or whatever) and then updates the django database."
django,3bz51e,dAnjou,1 point,Fri Jul 3 10:03:45 2015 UTC,"Awesome.  I'll give this a go tonight. Seems fairly straight forward, anything I need to watch out for?"
django,3bz51e,pydry,1 point,Fri Jul 3 10:10:25 2015 UTC,"Dumb cron task that runs a dumb django manage command that triggers a celery task every minute or so.    This has like 2 levels of redundancy. One is that Celery provides a cron-like feature that you should use if you're using it for other stuff anyway. And the other one is that you don't need a Django manage command in order to trigger a Celery task.    The celery task figures out if it should scrape yet (what was the last time I scraped), does all of the scraping with mechanize and pyquery (or whatever) and then updates the django database.    It really shouldn't access the DB directly. We've done that in the past and it makes the code messy and doesn't scale. I since refactored part or this code and it's much cleaner now and easier to understand."
django,3bz51e,dAnjou,1 point,Fri Jul 3 12:00:31 2015 UTC,"This has like 2 levels of redundancy. One is that Celery provides a cron-like feature   I've had issues with celerybeat before and I don't trust it any more. Cron is rock solid, though.   And the other one is that you don't need a Django manage command in order to trigger a Celery task.   It's the cleanest way of calling any commands via cron (or any other process outside of django).   It really shouldn't access the DB directly.   I really can't see a good reason why not to do this. An additional REST API is boilerplate code I wouldn't really want to write.   We've done that in the past and it makes the code messy and doesn't scale.   Celery excels at scaling. No problems there. It also has no problem integrating with django, meaning no messiness interacting with the database.  If you tried it with scrapy I'm not surprised the code got messy. It got messy for me when I tried that too. Django ORM is sometimes kind of a headache to run outside of django (and celery) and Scrapy doesn't work well with other libraries in general."
django,3bz51e,metaphorm,1 point,Fri Jul 3 12:10:55 2015 UTC,"I've had issues with celerybeat before and I don't trust it any more. Cron is rock solid, though.   We use Celery Beat as well and didn't have problems yet. But I'm also convinced that cron is much more reliable.    And the other one is that you don't need a Django manage command in order to trigger a Celery task.   It's the cleanest way of calling any commands via cron (or any other process outside of django).   My intention is to make every component as self-contained and independent as possible. So, Django and Celery shouldn't know much about each other especially when it's periodic background tasks that aren't triggered in a request handler anyway.    It really shouldn't access the DB directly.   I really can't see a good reason why not to do this. An additional REST API is boilerplate code I wouldn't really want to write.   Code readability, maintainabilty, and scalability. I'm a big proponent of micro services and SOA. So, when you decide to re-implement your scraper in Go or Java because those are much faster then you can simply replace it because accessing an HTTP API is much simpler than accessing the DB layer directly.    We've done that in the past and it makes the code messy and doesn't scale.   Celery excels at scaling. No problems there. It also has no problem integrating with django, meaning no messiness interacting with the database.   It only excels if you let it. If the tasks are that tightly coupled to your web framework and/or ORM it becomes quite hard to scale up into a distributed system architecture where different services run on different hosts. That's also the reason why I strongly recommend against integrating your web application and your background tasks.   If you tried it with scrapy I'm not surprised the code got messy. It got messy for me when I tried that too. Django ORM is sometimes kind of a headache to run outside of django (and celery) and Scrapy doesn't work well with other libraries in general.   I didn't try it Scrapy although I used it in the past for a different project. But as I said I wouldn't even think about trying it. I'd always design my system architecture in a way that components are decoupled and communicate through their well defined and abstracted APIs (mostly HTTP and AMQP)."
django,3bz51e,iamwithnail,1 point,Fri Jul 3 13:46:58 2015 UTC,"simple solution: write a manage command, launch the command from cron at regularly scheduled intervals."
django,3bxs5s,Oflameo,10,Fri Jul 3 01:06:55 2015 UTC,Want me to blow your mind?  https://docs.djangoproject.com/en/1.8/howto/legacy-databases/  Look at how short that page is. That's how little work it takes.
django,3bxs5s,takennickname,1 point,Fri Jul 3 01:18:09 2015 UTC,Am I missing something? Can we use spreadsheets as legacy databases?
django,3bxs5s,enesimo,3,Fri Jul 3 06:15:05 2015 UTC,"No, but OP said he had a database model already, in which case he could choose to use the linked django legacy database workflow."
django,3bxs5s,brtt3000,2,Fri Jul 3 06:26:20 2015 UTC,"Ok, I misunderstood. Thanks for clearing it up."
django,3bxs5s,enesimo,2,Fri Jul 3 08:14:34 2015 UTC,"Django can do it easily.  One thing that's helped me with avoiding development hell is test driven development.   Like any other coding methodology it has pros and cons, but sticking to it borderline religiously has helped me meet milestones and stay on target really well.  Here is a really good free to read online book about TDD, while covering Django basics at the same time. http://chimera.labs.oreilly.com/books/1234000000754/index.html"
django,3bxs5s,aqua_scummm,2,Fri Jul 3 09:36:16 2015 UTC,Try checking out my new framework: http://hitchtest.com  I wrote it especially to fix the main problems I had doing TDD with Django the regular way. Too many things that should have been easy but ended up being hard (including doing stuff that's in that book). It shouldn't require religious devotion to do TDD. It should be easy and fun.
django,3bxs5s,pydry,1 point,Fri Jul 3 11:03:40 2015 UTC,Really interesting. So is this a better testing starting point (for Django) than your TDD book? What are the main differences? Would love to hear more.
django,3bxs5s,YuntiMcGunti,1 point,Fri Jul 3 17:23:38 2015 UTC,"It's not my TDD book. The TDD book tells you how to use the standard Django testing tools, though, which I found to be cumbersome, so I wrote my own more sophisticated tools for testing.  The main differences are:  1) It tests at a much higher level. It runs the database and all other services for you.  2) It lets you time travel in your tests (see the example).  3) It does separation of concerns for tests (much like django does with templates).  I don't yet have a decent tutorial on how to use it though, and I don't have a tutorial for learning Django either. The tool is also still in alpha right now. So, from a learner's perspective it's not quite all there yet."
django,3bxs5s,pydry,1 point,Sat Jul 4 03:14:18 2015 UTC,"I'll check it out, thanks.  I mean, it will still kind of require a bit of devotion, right, because coming from outside TDD I still think ""gah why do I need to write this test when I know I can get this 10 line function to work without it""."
django,3bxs5s,aqua_scummm,1 point,Fri Jul 3 19:54:53 2015 UTC,"it will still kind of require a bit of devotion, right, because coming from outside TDD I still think ""gah why do I need to write this test when I know I can get this 10 line function to work without it"".   No, not usually. I try to write integration tests instead that surround as much of the application as possible that will indirectly test that 10 line function and everything else around it.  In Django projects I actually very rarely write unit tests at all. I try to test everything as a user scenario in a manner that is as disconnected as possible from the application. No function testing. No views testing. Everything at a high level like in the example on my website.  This minimizes quite significantly the amount of test code I have to write, yet still allowing me to cover a large body of code and detect when it breaks.  The only exception to this is complicated algorithmic functions with simple arguments and simple return values - 100 line functions where it really does get hairy underneath. Those I write unit tests for (those are actually pretty rare though)."
django,3bxs5s,pydry,1 point,Sat Jul 4 02:57:21 2015 UTC,"Django could definitely do that reasonably easily. Not quite sure how much use the schema is, but at least you could use the same general model. Django is a little higher level then most PHP, so instead of designing raw tables you work with models (but general idea is same of course).  I do recommend you spend some time digging through the docs: django has a shit ton of features and many how-to's, tutorials etc on it's own site; best to have a decent idea of the capabilities before you start. Look into models, forms and the generic views, if you bolt those together it should be very straightforward."
django,3bz6lg,ares623,2,Fri Jul 3 09:49:54 2015 UTC,"You can always squash your migrations after you have migrated the database, then you will not have any dependency on the old apps. This is not a problem if you control all instances (i.e. you are not an installable app)."
django,3bz6lg,ProstetnicVogonJel,1 point,Fri Jul 3 11:51:46 2015 UTC,Didn't know you could squash. Awesome!
django,3bymd0,aledista,1 point,Fri Jul 3 05:44:37 2015 UTC,Why not just make it a middleware instead of having to change all your routes in urls.py?
django,3bymd0,squiffs,1 point,Fri Jul 3 08:33:08 2015 UTC,You can selectively choose which view to profile. Middleware hooks into the whole django's request/response processing.
django,3bykmu,semigulov,2,Fri Jul 3 05:28:59 2015 UTC,I suggest you to check django-hijack
django,3bykmu,cediddi,2,Fri Jul 3 07:42:53 2015 UTC,"django-hijack   See also: django-impersonate, django-assume.  There is an entire group of apps that do this: user switching."
django,3bw1ez,Pr0ducer,2,Thu Jul 2 16:48:36 2015 UTC,"It looks like, as long as you provide information to connect to a real Postgres instance in your DATABASES setting, Django will automatically manage creating and destroying test data.  So if you are trying to avoid connecting to Postgres during testing, it doesn't look like that's possible, without rewriting your code sans Postgres-specific fields. If you're only worried about keeping your Postgres instance clean, then you don't need to worry about that.  You can also provide testing-specific options in DATABASES by prefixing them with TEST_  More info"
django,3bw1ez,theywouldnotstand,1 point,Thu Jul 2 17:26:27 2015 UTC,I'm only concerned about speed right now.
django,3bw1ez,xBBTx,1 point,Thu Jul 2 17:59:06 2015 UTC,Is it an option to use the SkipIf/UnlessDBFeature decorators?
django,3bw1ez,Citrauq,1 point,Thu Jul 2 21:34:59 2015 UTC,A good speed up with django 1.8 tests is to use --keepdb.
django,3buztv,corkmask,1 point,Thu Jul 2 11:05:03 2015 UTC,"https://cloud.google.com/appengine/docs/python/refdocs/google.appengine.api.images#google.appengine.api.images.get_serving_url  I've never used it myself, but the docs clearly say that get_serving_url is for images, the transformation error is caused by GAE trying to transform (resize etc) the mp3 like an image  This looks like what you need, https://cloud.google.com/appengine/docs/python/blobstore/#Python_Serving_a_blob"
django,3buztv,ynotna,1 point,Thu Jul 2 15:53:50 2015 UTC,"The thing is that django has both FileField and ImageField and using get_serving_url for the both is a mistake. When someone uses the FileField he expects the storage implementation to take into account files other than images. As I said, I am trying to see if I can make it work without overriding the storage class myself, which I have done."
django,3buztv,ynotna,1 point,Fri Jul 3 07:02:22 2015 UTC,Looks like support for blob urls is in development/experimental?  https://github.com/django-nonrel/djangoappengine/blob/master/djangoappengine/storage.py#L123-L128
django,3bvfcf,cod3r98,4,Thu Jul 2 13:53:25 2015 UTC,"Apart from the suggestion of googling it as Boxidea said, you should at least have done some work before you ask questions like that - similar principle to stack overflow - what have you tried, what are you considering, etc?  No-one's going to do your work for you."
django,3bvfcf,iamwithnail,2,Thu Jul 2 15:27:53 2015 UTC,Check out this short tutorial:  http://www.creativebloq.com/netmag/get-started-django-7132932  There are literally hundreds of tutorials for creating a blog in Django. Just do a Google search.
django,3bvfcf,boxidea,2,Thu Jul 2 15:21:11 2015 UTC,"https://docs.djangoproject.com/en/1.8/ref/models/fields/  that should help. django documentation is very good, I suggest reading it thoroughly.   also, you should probably run through the django tutorial again. It should help with wrapping your head around the core concepts of django and the relationship between django models and the database."
django,3bvfcf,metaphorm,1 point,Thu Jul 2 15:39:17 2015 UTC,Gonna plug my tutorial at http://souldeux.com/blog - it goes from setting up your project through to deploying it online.
django,3bvfcf,souldeux,1 point,Thu Jul 2 16:31:15 2015 UTC,"You guys think that I am trying to create simple blog where I have one text field for blog title, one image field for image, one more text field for blog post content.  What I wanted to do was multiple no of text fields..and multiple no of image fields. Also I need to be able to rearrange the image and text contents. So  that the content team can rearrange the positions of these texts and images. It's not a single blog post"
django,3bvfcf,BitRateChaos,1 point,Fri Jul 3 02:00:37 2015 UTC,Look up Wagtail cms.  Does exactly what you're asking for.
django,3br7jb,martey,5,Wed Jul 1 14:25:40 2015 UTC,Can you compare this to what NewRelic provides?
django,3br7jb,mobredu,2,Thu Jul 2 02:08:27 2015 UTC,"It's in a similar space, but we really tried to pin the user experience down and make it as easy-to-use and powerful as possible. We dogfood Opbeat ourselves, and found lots of optimization opportunities with these performance metrics that we either missed or didn't even show up in NewRelic.  Disclaimer: I'm an engineer at Opbeat."
django,3br7jb,piquadrat,2,Thu Jul 2 13:15:28 2015 UTC,Do you use this in development/testing or does it run in production?
django,3br7jb,brtt3000,2,Wed Jul 1 17:57:17 2015 UTC,It's meant to be run in production :)
django,3br7jb,piquadrat,1 point,Wed Jul 1 19:57:17 2015 UTC,"Looks pretty good - server time analysis is exactly what I am after at the moment. The analysis tables in the video, are they using a dashboard logging in to opbeat.com?"
django,3bsai8,abdelhai,2,Wed Jul 1 19:10:30 2015 UTC,Technologies used: - Django 1.7 - PostgreSQL - Nginx - Gunicorn - Linode VPS Very minimal i know :)
django,3bsai8,YuntiMcGunti,2,Wed Jul 1 19:12:36 2015 UTC,"Well done on your first project,  What did you use on the front end- e.g. your scrolling animation with inertia?"
django,3bsai8,YuntiMcGunti,1 point,Thu Jul 2 09:15:16 2015 UTC,"Ah not to worry, see you used a web flow template."
django,3bsai8,mariocesar,1 point,Thu Jul 2 13:42:12 2015 UTC,"hh, saw this after my response. You should try them btw, it's great for getting stuff done if you don't want to spent time on CSS/JS stuff."
django,3bso85,qaximor,2,Wed Jul 1 20:48:10 2015 UTC,I have this need for galleries but I handle it by uploading a zip file and processing the images in the zip file.  If you need need just a simple 'select multiple files to upload' you might try this - https://github.com/Chive/django-multiupload  It was the first google result for 'django multiple file upload'
django,3bso85,adamrt,1 point,Wed Jul 1 22:14:28 2015 UTC,"I checked it out, what confuses me is that they use a FormView in the views.py, but for me since I have two forms in the same view I can't use this (or can I?), that's why I didn't try it out. I have one form which is normal form, and the other one is the form that needs the multiple image upload."
django,3bso85,adamrt,1 point,Wed Jul 1 22:18:01 2015 UTC,"Well you have two separate issues. You have two separate forms on the page. Is this actually necessary or can you just place the multiple image upload field on the other form and have a single form. If so then just use the formfield that is provided in the link above.  If you actually need two forms, then solve that problem first with a single file upload field on the second form and make sure it all works properly. Two simple forms on the same page is a common need and not hard to deal with. Just google around to see the different ways to solve it (single template and single submit view for both forms, or using single template and separate submit views for each form).  After that all works then move on to the multiple upload issue by changing the single file upload field that comes with django to the multiple file upload field that I linked above.  attachments = MultiFileField(min_num=1, max_num=3, max_file_size=1024*1024*5)  is the important bit of that readme. You dont have to use a FormView thats just showing generic django stuff. Deal with the form however you want. The only custom code is the MultiFileField"
django,3bqtbi,lordmayer,1 point,Wed Jul 1 12:08:44 2015 UTC,"Looks like your models and database aren't in sync. Make sure your blog comments models has an 'approved' field in it. Then run './manage.py makemigrations' and then './manage.py migrate'.   If you have done this, then post your models.py For your blog comments."
django,3bqtbi,npolet,1 point,Wed Jul 1 12:32:02 2015 UTC,"Oh yeah, I run the 'makemigrations' and then the 'migrate'. It's working again. Thank's for the help."
django,3bqtbi,npolet,1 point,Wed Jul 1 12:43:56 2015 UTC,"Not a problem, happy django'ing."
django,3bodad,YuntiMcGunti,5,Tue Jun 30 20:55:16 2015 UTC,render() automatically includes the RequestContext while render_to_response() does not.
django,3bodad,porksmash,2,Tue Jun 30 21:02:10 2015 UTC,this beated me hard at least one time.
django,3bodad,acaban,7,Wed Jul 1 09:08:36 2015 UTC,"render is a shortcut for render_to_response, which automatically uses a RequestContext (just like you use with render_to_response). I almost always just use render."
django,3bodad,npolet,5,Tue Jun 30 21:20:54 2015 UTC,"They're not much different. render_to_response basically lets you specify your own context instance, whereas render uses a RequestContext based on the current request. If that doesn't make sense to you, then you shouldn't worry about it and should use just render.  render_to_response is also older than render; the latter didn't appear in Django until Django 1.3."
django,3bodad,mipadi,1 point,Tue Jun 30 21:06:09 2015 UTC,Thanks for the responses they seem to be largely the same and django dev seem to have discussed possibly deprecating render_to_response() before.  I'll just use render until I see a specific use case that doesn't work.  Thanks.
django,3bodad,metaphorm,-3,Wed Jul 1 13:36:00 2015 UTC,render is just a slightly newer shortcut function than render_to_response. they do the exact same thing. I recommend using render.
django,3bodad,andrey_shipilov,0,Tue Jun 30 21:12:08 2015 UTC,It is not a newer shortcut. They don't do the exact same thing. It's all in docs.
django,3bodad,mipadi,2,Wed Jul 1 11:44:43 2015 UTC,"I believe it is. render didn't appear until Django until 1.3, if I recall correctly."
django,3bodad,andrey_shipilov,0,Wed Jul 1 16:36:25 2015 UTC,Yes. It was 4 years ago.
django,3bjlgp,whelks_chance,1 point,Mon Jun 29 19:25:51 2015 UTC,have you tried the db_manager method described here: https://docs.djangoproject.com/en/1.8/topics/db/multi-db/#using-managers-with-multiple-databases  that suggests that code that looks a bit like this should work  an_A_model_instance.b_sets.db_manager('new').add(a_B_model_instance)
django,3bjlgp,metaphorm,1 point,Mon Jun 29 19:41:29 2015 UTC,"That looks like it should work, and makes sense, and very annoyingly didn't work.  I'm totally stuck."
django,3bjlgp,metaphorm,1 point,Mon Jun 29 21:10:58 2015 UTC,"hmm, yeah, it would work IF django supported this on ManyToMany or ForeignKey relationships  https://docs.djangoproject.com/en/1.8/topics/db/multi-db/#cross-database-relations  :(  seems like a work around is in order. you might try defining a post_save signal that ""moves"" the saved object from one db to another, like this  https://docs.djangoproject.com/en/1.8/topics/db/multi-db/#moving-an-object-from-one-database-to-another  so in other words, the signal handler will immediately create a new instance in the 'new' database, add it to the appropriate M2M fields on the 'new' database models, and then delete the redundant record from the 'old' database.  that sounds like a pain in the butt both in terms of code and performance, but it should produce the correct result. this might be one of those times that dropping into raw SQL and just executing the M2M inserts on an open db cursor connected to 'new' might be a good solution. not very elegant though, but django seems to just not handle this situation very nicely."
django,3bjlgp,xBBTx,1 point,Mon Jun 29 21:19:24 2015 UTC,"Yeah, I wouldn't want to go adding and dropping things pointlessly, as there are many thousands of these things, it would make access times completely tank.  Raw SQL could be the way forward, but as xBBTx below has suggested, it may be my routers are still not right. I only wrote them last week, so I quite probably missed something there."
django,3bjlgp,xBBTx,1 point,Mon Jun 29 22:22:59 2015 UTC,Figured it out explained here  Basically it was my own database routers. Cheers for you help and advice though!
django,3bl81z,triscabor,6,Tue Jun 30 03:13:36 2015 UTC,You might want to link to it :)
django,3bl81z,tanglisha,6,Tue Jun 30 03:49:45 2015 UTC,Why not just use cookiecutter-django?
django,3bl81z,sriramracer,3,Tue Jun 30 07:02:50 2015 UTC,https://github.com/christabor/Skaffold
django,3bl81z,jcda,2,Tue Jun 30 05:20:26 2015 UTC,There is also support for inflection   What does this mean?
django,3bl81z,andybak,1 point,Tue Jun 30 11:45:13 2015 UTC,"Dependencies All  inflection jinja   Django  django-bootstrap factory boy   http://inflection.readthedocs.org/en/latest/  'Inflection is a string transformation library. It singularizes and pluralizes English words, and transforms strings from CamelCase to underscored_string. Inflection is a port of Ruby on Rails‘ inflector to Python.'"
django,3bhq9l,deV14nt,2,Mon Jun 29 09:06:06 2015 UTC,Delete the database and rerun the migrations.   Is this using SQLite?
django,3bhq9l,mervman,1 point,Mon Jun 29 10:20:46 2015 UTC,"It is Postgres. Ok, so I had already deleted the migrations folder. Guess I shouldn't have done that. The rest is working now. I guess I just had to take a step back from it.  (env)$ python manage.py flush  This will IRREVERSIBLY DESTROY all data currently in the 'ddf1sdejqsd9q5' database, and return each table to an empty state. Are you sure you want to do this?      Type 'yes' to continue, or 'no' to cancel: yes    (env)$ python manage.py syncdb  Operations to perform:   Synchronize unmigrated apps: main, messages, staticfiles, django_jinja, mptt   Apply all migrations: admin, auth, contenttypes, sessions Synchronizing apps without migrations:   Creating tables...     Running deferred SQL...   Installing custom SQL... Running migrations:   No migrations to apply.  You have installed Django's auth system, and don't have any superusers defined. Would you like to create one now? (yes/no): yes   (env)$ python manage.py makemigrations No changes detected  (env)$ python manage.py migrate Operations to perform:   Synchronize unmigrated apps: mptt, main, messages, staticfiles, django_jinja   Apply all migrations: sessions, auth, admin, contenttypes Synchronizing apps without migrations:   Creating tables...     Running deferred SQL...   Installing custom SQL... Running migrations:   No migrations to apply.   So surprisingly it worked and admin site is fine and has my models this time. There is still a problem with the MPTT columns, but maybe I should just skip that for now. I think it will work without it anyway.  This is the error message when trying to add a category in /admin  Also, I don't have a migrations directory still. That can't be right."
django,3bhq9l,druski,1 point,Mon Jun 29 10:50:40 2015 UTC,In django 1.7+ you need to run make migrations app-label to initialize migrations for an app. See https://docs.djangoproject.com/en/1.8/topics/migrations/#adding-migrations-to-apps
django,3bhq9l,iamwithnail,1 point,Mon Jun 29 13:00:09 2015 UTC,"if you're using Postgres on Heroku, then in psql DROP DATABASE databasename;  CREATE DATABASE databasename WITH OWNER databaseownerfromsettings.py;  ...will ditch the data - I'd also rerun the migrations, or delete them entirely and redo from syncdb, schemamigration app --auto and into migrate app.  Edit:  I should say - I've literally just done this yesterday, as I was rebuilding something to read in data and needed to lose the existing data."
django,3bhq9l,metaphorm,2,Mon Jun 29 10:30:30 2015 UTC,"Thanks for the SQL. I get an error when I run schemamigration  Unknown command: 'schemamigration' Type 'manage.py help' for usage.  manage.py help doesn't list that command. I still can't figure out how to rebuild the migrations directory. It seems like all the instructions about South and migrations are for a different version of Django.  EDIT: ok, I think I got it. I had a git commit I could roll back to.  git reset --hard <commit id> heroku pg:reset DATABASE   yes, they really do expect you to just type the word DATABASE, then confirm a lot. But it does just give you a nice blank database. I also had thought the DB I was using was local. Oops. I guess I should pull the DB down. Instead, before I had pulled down the config variables instead, which had me connecting to the remote DB.  So I did:  foreman run python manage.py syncdb git push -f heroku master   That last line reverts the remote repo to the same place I rolled git back locally. It would still be nice to know how to rebuild the migrations directory, but at least I'm rolling again."
django,3bhq9l,druski,3,Mon Jun 29 11:22:06 2015 UTC,"prior to django 1.7 basically everyone used a third party tool called South to do migrations. a lot of older tutorials will still reference that. South was so popular that its creator (Andrew Godwin) volunteered to write a built-in migration system for django that would be present in all django projects, regardless of third party apps.   that built-in migration system was released in django 1.7, so if you're using a version 1.7 or more recent (1.8 is the latest release) it will be the new built in migrations and not south. documentation for it here:  https://docs.djangoproject.com/en/1.8/topics/migrations/  the command line interface to it is slightly different. instead of 'schemamigration' the command is now 'makemigrations'."
django,3bdd3g,ThrowawayTartan,58,Sun Jun 28 03:50:00 2015 UTC,"Your questions are really basic so before I answer your questions I want you to know something.  If you like Django or programming or anything in life , don't quit because some asshole on the internet said you're stupid and incapable of learning.  I got a couple of those in my early days and it was really discouraging.  You are capable of learning it -- without a doubt.  Persevere.  On to your questions...   What is Django used for?   Django can be used for lots of different things.  Its kind of like asking what a swiss army knife is for.  But even the swiss army knife had some general purpose in mind when it was created.  Django makes it easy for programmers to build database driven web applications.  It abstracts SQL queries and tables into an ORM.  It serves information based on a specified URL.  And enforces a ""style-guide"" of app based development.  I.e. your question below.   Does everything have to be in the context of an app?   No.  But everything you will ever write in Django will be in the context of an app.  At least for now.  Someday in the far future you may have a reason to deconstruct Django.  Hopefully its a good one.  Probably a more substantive question would be ""what is an app?"".  That is a significantly harder question to answer because an app is up to the person creating it.  You may see the home page and the authentication system tied into one app but I see it as two distinct apps.  How I define applications comes down to the core functionality of the app.  For instance, a blog and a forum are obviously two different apps.  But teams and users isn't so obvious.  A team is just a collection of users so they should be the same app, right?  I don't know the answer for sure.  What I do know is that when I was presented with this problem I opted to create two separate apps.  Why?  Because I realized that:   The only code that was shared was a foreign key There was no reason to make teams dependent on the users app Separating users and teams allowed me to reuse both apps independently of one another    Also, say I have html code that I want to use...   You can use your current HTML with 0 changes.     Research the TemplateView class Add your html file as the template template_name = 'index.html' Drag your template into my_app/templates/ Configure the URL Run the server Open your browser and visit the site"
django,3bdd3g,rukittenme,4,Sun Jun 28 04:21:23 2015 UTC,"Yeah, no doubt on the persevere part. I was always more of a designer, i.e., but photoshop with some HTML and CSS mixed in. No one told me I was incapable of learning, but I felt like I couldn't learn to be a programmer so I used CMS's like Wordpress and ExpressionEngine for the backend stuff. That was until last year when I started learning Python and Django. I took a few months to learn some Python and was comfortable with syntax and all that. I then tried to jump into Django and struggled for a while. It's true that learning a programming language can be fairly easy but learning to be a programmer is the hard part. Over the course of a year or so I just started working on a site and when I got stuck I asked questions. I finally got it built and at some point along the way had the proverbial light bulb moment where things just seemed to click and make more sense. I'm no expert by any stretch of the imagination but I can at least dumb my way through a lot of things and can look at code and get an idea of what's happening."
django,3bdd3g,dsizemore,2,Sun Jun 28 14:50:49 2015 UTC,"Hey there!  Thanks for the awesome reply :) I really appreciate it. I love the insight you put into it. Don't worry, I do a lot of programming in my day to day so I understand the learning curve with something new but I guess that I'm not very sure about how Django ""works"" because it seems like there's a lot of magic going on in the background."
django,3bdd3g,lpaddikt,1 point,Sun Jun 28 17:25:21 2015 UTC,"Great answer rukit, I am on the way to become more proficient at django, thanks for this."
django,3bdd3g,RalphMacchio,1 point,Sun Jun 28 04:56:28 2015 UTC,Hi. So what did you use in the Teams/Users example? Generic FKs? I'm in the process of trying to loosely couple some apps and I would love to hear more about your approach and/or see your code if it is public. Thanks.
django,3bdd3g,greven,5,Sun Jun 28 19:21:07 2015 UTC,"I also started learning Django a year ago. I had a strong web development background but never used a framework like Django (Rails, Sails, etc...), I was in the Javascript and PHP land, around Wordpress, making it to stuff it wasn't intended for. Because of this and because I never really liked PHP much, I turned to Django (it helped that I always loved Python).  With that said I can tell you what helped me in the learning process (but you seem to have some basics questions so I will assume we had different backgrounds).  I started reading the official documentation (https://docs.djangoproject.com/en/1.8/). The documentation is pretty good! But since Django has a bit of Magic in the background sometimes it might be hard for you to understand why some things work like they do. Starting with Django and the Official documentation is perfectly fine but I think you would benefit in starting with another approach, exploring Flask first. Flask, let's say, it's more basic, it's less structured from the beginning, you won't have the concept of apps for instance from the start, is up to the developer to organize things as he sees fit.  That should help you understand the basics of the Request / Response paradigm and routing. I would say spend a couple of hours with Flask, do it's basic starting tutorial, then jump to Django and the official documentation.   Do the Intro Tutorial. The Tutorial is a great overview of the Django capabilities (special the ORM layer).  Take a loot into existing Django projects to consolidate your ideas.  Right now I think it's a good time to do Django project on your own. You learn a lot by practicing and having doubts on how to do something. Use the Django official documentation as a reference but if you search google for a specific doubt you'll find lot's of resources (specially the ubiquitous StackOverflow).  If you feel you have a solid foundation with Django and if you made it so far it means you liked Django. I would recommend reading what is probably the best Django book Two Scoops of Django. I have bought it myself (PDF version) and can't recommend it enough. It will consolidate your knowledge, it will also teach you best practices from the authors and the community. It will make you a better Django and web developer.  You can also refer to Two Scoops of Django website for additional resources like books and Tutorials.  Hope this helps."
django,3bdd3g,Roulock,2,Sun Jun 28 09:42:10 2015 UTC,ppl say read two scoops of django everywhere. Is it worth price? Just wasted $35 on old django book... Don't want do that again.
django,3bdd3g,greven,6,Sun Jun 28 13:30:49 2015 UTC,"Yes it is worth the price. It is not worth it as a beginner book, not on web development and not as an intro to Django. But after you understand the basic principles of Django you will want to follow some standards, some best practices.  Two Scoops of Django is full of good advice that will set you up in your Django incursions."
django,3bdd3g,YouAreSalty,3,Sun Jun 28 13:50:16 2015 UTC,"It is a book about ""good practices"" for seasoned developers. Not for people trying to learn django, web development or programming first time.  Another good book is Test Driven Development with Python. It's free here:  http://chimera.labs.oreilly.com/books/1234000000754/index.html"
django,3bdd3g,jayfehr,6,Sun Jun 28 20:23:10 2015 UTC,"Don't buy it expecting to learn how to use Django. That's not it's purpose. You will learn lots from it though.  It's main purpose is to teach best practices. It only skims over when to use class based views over function based views. However, it spends quite a few chapters on how to use them effectively.  It's a tool, but just know that you're not buying a hammer, you're buying a caliper."
django,3bdd3g,nemmonszz,3,Sun Jun 28 16:54:14 2015 UTC,"It's, as far as i know, the only Django 1.8 book that's out. I read it and found it extremely educational. It's basically just a huge collection of recommendations for best practices and standard ways to do things. I'm sure I'll be referencing it quite regularly in the next few months as I work on my first django project."
django,3bdd3g,an_actual_human,2,Sun Jun 28 13:45:16 2015 UTC,"The official tutorial is very good. I suggest you read it, it should be helpful."
django,3bdd3g,xBBTx,2,Sun Jun 28 08:05:14 2015 UTC,I'm actually going through the tutorial now and that's where I faced the problems. I guess it's because I don't know how to generalize the lesson that it's trying to teach just from the tutorial so I have to build an app on the side making it do what I want and only from there do I understand what's happening.
django,3bdd3g,metaphorm,3,Sun Jun 28 17:26:36 2015 UTC,"People are generally quite positive about the django girls tutorial. It assumes no prior knowledge and starts from the basics, where the official tutorial assumes that you have an idea of what a web application is supposed to do."
django,3bdd3g,metaphorm,1 point,Sun Jun 28 18:41:15 2015 UTC,django has a great tutorial that should help you figure out the answers to most of your questions.
django,3beqwu,silverpendulum,1 point,Sun Jun 28 15:35:10 2015 UTC,"Got it, thanks."
django,3beqwu,zagrebelin,1 point,Sun Jun 28 17:50:38 2015 UTC,"http://ccbv.co.uk/    Classy Class-Based Views. Detailed descriptions, with full methods and attributes, for each of Django's class-based generic views."
django,3bd0lh,bemmu,1 point,Sun Jun 28 01:36:18 2015 UTC,Lots of desire for doc style changes. Interesting...
django,3bd0lh,sriramracer,1 point,Sun Jun 28 11:55:56 2015 UTC,"Speaking as someone who has been using Django for three months now as the sole dev on a fresh project who has used a bunch of different appservers before:  I want some kind of TLDR or FAQ at the head of most doc sections that lists the most commonly used functions and when you use them. Right now the work flow is to go to the very top level of the docs, try to figure out which sub doc to click on, and then look over on the right side to see if I can find something that looks about right. Take the question ""how do I find a user with a specific email address?"" From the top level I find ""the model layer"" and then I probably want ""executing queries"" but I might want ""lookup expressions"". Turns out I wanted the first doc, and now I have to look over to the right. Now do I want ""retrieving specific objects with filters"" or do I want ""retrieving a single object with get""? Wait, maybe I want 'field lookups'! Now I know I want 'get' but the other stuff sounded like it might be right too.  The tutorial helped me get started but I had a lot of trouble bridging from how to do the fairly basic things in the tutorial to more complex things. I ended up spending a lot of time reading the Form and Field source code to understand what was actually going on.  One of my first tasks was to work up a custom login form, which is a pretty common requirement, and nothing in the basic documentation really prepared me to do this. Later on I've also found that common things like Ajax are also not very clearly documented. In both cases it might be argued that they don't belong in the core Django docs because they aren't in core modules, but both are also things that devs commonly want to know how to do almost immediately and they're used to docs from other appservers explaining it concisely."
django,3beh1b,ThorAkureyri,1 point,Sun Jun 28 13:53:55 2015 UTC,"Seems like you're trying to shoehorn something into the admin site that it wasn't made to handle.  The reason why it only updates when restarting the server is because the value of verbose_name is evaluated only once: when Django starts.  This is the same as when assigning the count to a variable, the count doesn't update the variable:  open_tickets = Tickets.objects.filter(closed=False).count())  # let's say this evaluates to 2 Tickets.objects.create(ticketDescription='foo') assert(open_tickets == 2)  # no AssertionError, the new open ticket did not update the variable.   I'm not entirely sure if it is possible, but you could try a post-save hook to update the verbose_name attribute of TicketProxy, but that doesn't sound like a good idea, and I'd advise against it.  Your best bet is probably to find a package that does something similar to what you want, or to do it yourself, by overriding some of the Django templates.    On a side note, it is convention to have model names be singular, not plural, i.e. Ticket not Tickets; and variable/attribute names should be snake_case, not camelCase, i.e. ticket_description not ticketDescription."
django,3beh1b,unklphil,1 point,Sun Jun 28 14:25:36 2015 UTC,"Thanks for the pointers and the advice, I updated the post with my solution. When is it appropriate to use camelCase in Django?"
django,3beh1b,unklphil,2,Sun Jun 28 15:56:56 2015 UTC,"The Django coding style is, for the most part, based on PEP 8, which states that only class names should be in CamelCase (with first letter uppercase), I don't think camelCase (with first letter lowercase) is ever recommended in Python.  Django coding style Python coding style (aka PEP8)"
django,3bd8s4,michaelherman,2,Sun Jun 28 03:03:45 2015 UTC,"Cool! Awesome idea, I should make something like this as a plugin for PyTest...  edit: Nevermind!   To get a list of the slowest 10 test durations:   py.test --durations=10"
django,3bd98k,ThrowawayTartan,3,Sun Jun 28 03:08:36 2015 UTC,plants_are_friends doesn't match that regex.  I dunno why it works in the other case.  Does the user not have underscores?
django,3bd98k,elbiot,1 point,Sun Jun 28 04:58:07 2015 UTC,DAMMIT. Thank you so much :) got any recommendations on how to handle the case of an _?
django,3bd98k,SteveJobsLegalTeam,2,Sun Jun 28 05:14:26 2015 UTC,"Replace the [0-9a-zA-Z] with \w, (it also includes underscores). Like in the django doc"
django,3bd98k,elbiot,1 point,Sun Jun 28 05:37:28 2015 UTC,"Fix the regex.  Sorry, I suck at regex, can't help."
django,3bd98k,elbiot,1 point,Sun Jun 28 05:21:54 2015 UTC,"You should also not let users make usernames that don't match whatever regex you end up using.  Again, I'm no more help than that."
django,3bcple,takennickname,3,Sat Jun 27 23:44:21 2015 UTC,"This video from DjangoCon 2014 by Andrew Pinkham covers the new migrations pretty well. If you’d rather read his transcript, here you go."
django,3bcple,hutcherino,3,Sun Jun 28 00:03:08 2015 UTC,"Search Github for ""Two Scoops of Django"" (or buy the book even) for tons of best practice example code."
django,3bcple,rhgrant10,1 point,Sun Jun 28 03:16:39 2015 UTC,This tut is newer than 1.6 and covers a lot of stuff:  http://www.marinamele.com/taskbuster-django-tutorial  It might be good to scan along with official tut
django,3bdwtq,vintageshinpads,1 point,Sun Jun 28 08:21:45 2015 UTC,"Django-AllAuth might help you integrate existing social networks.  Are you trying to create a social network of your own? Like, competing directly with Facebook, Twitter, Google+, etc.?  Edit: s/cometing/competing/"
django,3bdwtq,iBlag,1 point,Mon Jun 29 04:18:02 2015 UTC,more like medium..in a way exactly like medium
django,3bdwtq,iBlag,1 point,Thu Jul 2 08:45:30 2015 UTC,"I have absolutely no idea what you're talking about. Do you have a link or something?  Sorry, I'm not ""plugged in"" very well and I'm pretty thickheaded."
django,3b7qar,theli0nheart,3,Fri Jun 26 17:22:01 2015 UTC,"Hi all, I've been maintaining this project template for years for work on client projects, but just haven't shared it much. I figured that others might find it helpful. If you see anything missing or would like to contribute, please do! Will happily accept pull requests.  Let me know what you think or if you have any questions!"
django,3b7qar,Vertp,2,Fri Jun 26 17:22:53 2015 UTC,Wooooo this is awesome. Where are instructions for app engine?
django,3b7qar,Peggy_Ice,2,Fri Jun 26 19:45:03 2015 UTC,"Here you go! https://github.com/lionheart/django-template/tree/django-1.4-appengine  I need to merge in the changes to get this working to the 1.8 branch. Stay tuned. Or if you want to merge that in, that would be awesome too. :)"
django,3b7qar,strig,1 point,Fri Jun 26 20:33:08 2015 UTC,"I've got a question:  Can you explain the deployment section for the Heroku templates (https://github.com/lionheart/django-template/wiki/Django-1.7-Heroku)?  I've deployed a few projects to Heroku and have never configured AWS access keys or anything of that sort.  I trust that what you've done here is correct, I'd just love to know more about how I could be using this template.  Thanks!"
django,3b7qar,YouAreSalty,1 point,Sat Jun 27 13:52:57 2015 UTC,"Sure. I probably should add some clarifying information in there. The reason for configuring these access keys and bucket names is because we use Amazon S3 for static media hosting. I've got the config all set up to work well with the AWS toolset.  If you choose not to provide those environment variables, you will need to provide another method of handling image uploads and asset storage. I think an alternative could be swapped in pretty easily with some edits to the settings.py file."
django,3b7qar,YouAreSalty,2,Sat Jun 27 16:39:17 2015 UTC,"I honestly just plain don't understand nginx configs. I've tried reading though the documentation to figure out what individual functions do, but the overall design escapes me.  What are some good resources for becoming proficient at nginx stuff?"
django,3b6vh8,silverpendulum,34,Fri Jun 26 13:24:06 2015 UTC,"Counterproposal: fold /r/djangolearning back into /r/django. Honestly I don't think there's enough Django ""news"" to warrant having to move all Django-related questions to another subreddit.  It's pretty simple to set up a subreddit to redirect to another one.   It's easier to mod one subreddit than two, and in my opinion it's better when you're exposed to more content rather than less. You can always just skip posts you don't care about.  By merging the subreddits you also have the advantage of people interested in Django news coming across interesting Django questions, and people with questions about Django learning about news in the Django community.  Just my opinion, but I think that unnecessary or excessive content curation leads to information degradation."
django,3b6vh8,youlleatitandlikeit,10,Fri Jun 26 14:14:06 2015 UTC,From the perspective of someone who didn't know that /r/djangolearning existed I think the above might be a decent suggestion. :)
django,3b6vh8,tomchristie,3,Fri Jun 26 14:24:03 2015 UTC,"My only worry/concern is that professional/experience devs may not be into answering what they may consider as very easy/""noob"" questions.   On the flip side, the pros are the ones who'll be able to easily answer those questions."
django,3b6vh8,daredevil82,7,Fri Jun 26 14:42:24 2015 UTC,So why not implement a tagging system for questions.  Perhaps something like  [Beginner Question] How do I do such and such?  [Deployment] Apache wsgi issue on Ubuntu server  And the like?
django,3b6vh8,damontoo,1 point,Fri Jun 26 15:33:19 2015 UTC,There's already /r/learnprogramming for noob questions.
django,3b6vh8,whoisearth,1 point,Fri Jun 26 18:51:29 2015 UTC,That's mixed with other languages though.
django,3b6vh8,danielsamuels,2,Sat Jun 27 00:00:53 2015 UTC,/r/learnpython
django,3b6vh8,Roulock,4,Sat Jun 27 02:58:38 2015 UTC,I agree. You could look into a tagging / flair system like most subreddits use these days. The important news tends to be the most upvoted stuff anyway.
django,3b6vh8,pydanny,1 point,Fri Jun 26 16:20:35 2015 UTC,"Also are weekly discussions/tutorials (say a chapter on TDD, as is done right now in /r/djangolearning) welcome here?"
django,3b6vh8,YuntiMcGunti,1 point,Sat Jun 27 00:06:53 2015 UTC,Thank you for this link. Got definitive django book from Amazon but it's out of date...wasted so much money!!!
django,3b90kd,Moby69,3,Fri Jun 26 23:18:45 2015 UTC,Care to share the error with us?
django,3b90kd,keckbug,1 point,Fri Jun 26 23:24:51 2015 UTC,"Sure. It says: python: can't open file 'manage.py': [Errno 21] No such file or directory  I think I followed the instructions that preceded all this on the tutorial page, so I'm not sure what I've done wrong. I'm using Python 2.7.9 and Django 1.8.2  Thanks"
django,3b90kd,porksmash,2,Fri Jun 26 23:34:26 2015 UTC,"Well, are you running the command from the same folder manage.py is in? Is manage.py missing?"
django,3b90kd,orangemintsodapop,1 point,Fri Jun 26 23:41:03 2015 UTC,"In my command line, I have C:\DjangoPrograms> showing up, and inside of the DjangoProgams folder, I have the following folders and subfolders  mysite/     manage.py     mysite/         __init__.py         settings.py         urls.py         wsgi.py"
django,3b3jdo,charettes,9,Thu Jun 25 17:56:41 2015 UTC,People who want a 10 year LTS should find some way to fund this. That's a lot to ask of the core devs.
django,3b3jdo,pemboa,12,Thu Jun 25 18:40:36 2015 UTC,I think 10 year LTS in enterprise only exists because it takes enterprise 10 years to finish a solution.
django,3b3jdo,ckinsey,2,Thu Jun 25 20:19:27 2015 UTC,Which is fine. But I more happy with improvements in Django than worrying about an app 10 years later.
django,3b3jdo,pemboa,1 point,Thu Jun 25 20:36:15 2015 UTC,"More like because solutions get so big, that tracking upgrades becomes very costly... When you're dealing with a million lines worth of Django application, thoughts of having to upgrade it from 1.4 to 1.8 induce more than headaches."
django,3b3jdo,randomrussianlurker,9,Fri Jun 26 07:19:33 2015 UTC,"Just look back 10 years and see how much everything has changed since then.  Back in June 2005 Internet Explorer 6 was the dominant browser, and Django 0.90 hadn't even been released yet - that was November 2005. This was still the time of Python 2.4, the first version to have decorators!  3 years of support for free is quite fair."
django,3b3jdo,phil_py,2,Thu Jun 25 22:49:09 2015 UTC,I feel like three years is plenty.
django,3b3jdo,pemboa,2,Fri Jun 26 01:14:23 2015 UTC,"Yeah, 10 years is insane IMHO."
django,3b3jdo,jlorencetti,3,Thu Jun 25 19:38:55 2015 UTC,"SemVer, ftw."
django,3b3jdo,chhantyal,-2,Thu Jun 25 22:05:26 2015 UTC,"I honestly don't understand the deprecation warnings.  They only serve to annoy me.  Once it actually breaks I fix it, I don't need warnings before hand.  So can someone tell me the use-case?  I'm sure I'm missing it."
django,3b3jdo,deadwisdom,3,Fri Jun 26 08:35:29 2015 UTC,If you act proactively on deprecation warnings and pending deprecation warnings then you know that you've got more upgrade headroom before you need to change everything.  Eg if you have comprehensive tests and no deprecation warnings or pending deprecation warnings then you know you'll typically be able to update to the next two versions without dealing with any deprecations.
django,3b3jdo,tomchristie,3,Fri Jun 26 09:11:53 2015 UTC,"The deprecation warnings are there to give you enough time fix things before they will break. Waiting until something breaks before fixing it is a terrible way of doing development and is only possible in small code bases. If you took that approach on a large, complex codebase, things will get messy very quickly. I absolutely love the fact that the django devs take care to handle backwards compatibility and their plan for immenting new features that cause old features to become deprecated. The warnings are a god send, start loving them."
django,3b4qc5,audtherat,6,Thu Jun 25 23:19:59 2015 UTC,"I'm going to make some assumptions about your project.   You've created an app for a blog, called blog You have a class within blog/models.py named Blog You have a page which lists the title of each blog entry at URI /blog/entries/ On the list page, you want each title to link to it's respective blog entry using the URI: /blog/<model.pk>/   blog/models.py  from django.db import models  class Blog(models.Model):     title = models.CharField(max_length=256)     body = models.TextField()   Here's a way you might accomplish this using Django's Class-Based Views (CBVs)  Reference Django's documentation for more, detailed information regarding these classes.  blog/views.py  from django.views.generic import DetailView from django.views.generic import ListView  from .models import Blog  class BlogListView(ListView):     model = Blog   class BlogDetailView(DetailView):     model = Blog   urls.py  from django.conf.urls import url  from .views import BlogDetailView from .views import BlogListView  urlpatterns = [     url(         r'^blog/entries/$',         BlogListView.as_view(),         name='blog_list_view'     ),     url(         r'^blog/(?P<pk>\d+)/$',         BlogDetailView.as_view(),         name='blog_detail_view'     ), ]   Read about why I used the regular expression within the URL conf for the blog detail view  templates/blog/blog_list.html (Note: reference the docs for reason why I've named the file as such)  <!DOCTYPE html> <html lang=""en"">     <head>         <meta charset=""UTF-8"">         <title>Blog!</title>     </head>     <body>         {% for blog in blog_list %}             <a href=""{% url 'blog_detail_view' pk=blog.pk %}"">{{ blog.title }}             <br>         {% endfor %}     </body> </html>   templates/blog/blog_detail.html (Note: reference the docs for reason why I've named the file as such)  <!DOCTYPE html> <html lang=""en"">     <head>         <meta charset=""UTF-8"">         <title>Blog!</title>     </head>     <body>         <h1>{{ blog.title }}</h1>         <p>{{ blog.body }}</p>     </body> </html>   I can't stress this enough, read the documentation. (it's quite nice, actually)   You'll find out why I named the .html files the way I did You'll read about the specific variables to reference within your templates (e.g. blog_list, blog) You'll understand what the url template tag is all about and why the pk reference is there   Also, do the tutorial  For completeness, let's do this again using function-based views.  blog/views.py  from django.shortcuts import render  from .models import Blog   def blog_list_view(reqeust):     blog_list = Blog.objects.all()     return render(request, 'blog/blog_list.html', {'blog_list': blog_list})   def blog_detail_view(request, pk):     blog = Blog.objects.get(pk=pk)     return render(request, 'blog/blog_detail.html', {'blog': blog})   Note: The only reason I named the variables within the functions the way I did was simply to retain uniformity and are not required to be named as such.  urls.py  from django.conf.urls import url  from .views import blog_detail_view from .views import blog_list_view  urlpatterns = [     url(         r'^blog/entries/$',         blog_list_view,         name='blog_list_view'     ),     url(         r'^blog/(?P<pk>\d+)/$',         blog_detail_view,         name='blog_detail_view'     ), ]   The templates and the variables within can stay the same as outlined above.  Welcome to programming and Django :)"
django,3b4qc5,Nicksil,1 point,Fri Jun 26 01:26:05 2015 UTC,okay just got to this. awesome response i'm definitely going to study over this code but i see the weird expression in the pattern. i knew this had something to do with it i just didn't know quite its implementation.
django,3b4qc5,northben,3,Fri Jun 26 04:36:08 2015 UTC,"Check out the official tutorial. It explains exactly this, using a poll and answers. Happy coding!"
django,3b49rs,metraon,2,Thu Jun 25 21:08:36 2015 UTC,"Do you need to store age in the db? Why not:  @property def age(self):     return (date(2015, 6, 24) - self.birthday).days / 365.2425  If you do (maybe you need to filter/sort on this field) then you need to avoid bulk update/delete methods. They never run any Python code in save() etc unless you override all the bulk manager methods to force them to do so. (regarding masnun_'s answer - I don't think post_save signal will fire either)  You can override update etc on the manager and iterate over every instance - it will be slower but at least your save() method will get called."
django,3b49rs,andybak,1 point,Fri Jun 26 11:45:35 2015 UTC,You might want to put the calculation on the post save signal.
django,3b49rs,masnun_,1 point,Thu Jun 25 21:51:40 2015 UTC,"It looks like you're banned from Reddit. This means all of your posts are hidden until explicitly approved. Subreddit moderators can't do anything about this, except approve your posts in the subreddit one by one.  You may want to contact the Reddit admins about this.  _  Remember that reddit uses ""shadowbans"", in which you can still see your posts and profile, but other users can't. For more information, check out /r/shadowban."
django,3b49rs,masnun_,1 point,Thu Jun 25 23:43:24 2015 UTC,"Hey, thanks for letting me know. I had no idea I was banned :(   I am new to reddit. I haven't posted or commented much on Reddit before. Not sure why I was banned."
django,3b49rs,xBBTx,1 point,Fri Jun 26 16:12:48 2015 UTC,"Which isn't send in queryset.update(), so you'll either have to loop through the queryset and save the instances, or figure out a different way."
django,3b0b4d,ThorAkureyri,1 point,Wed Jun 24 23:02:58 2015 UTC,I wrote an action with an intermidiate form a while back...  https://github.com/mjbrownie/django-admin_action_mail/blob/master/admin_action_mail/actions.py  basically it   1. saves the object id's and return path to  request.session 2. redirects to a regular form view. 3. The form view does the changes and returns back to the return address    django might have since made this easier but it could be a method you can follow.
django,3b0b4d,djangobrownie,1 point,Thu Jun 25 01:51:10 2015 UTC,"The docs provide an explaination of what to do: https://docs.djangoproject.com/en/1.8/ref/contrib/admin/actions/#actions-that-provide-intermediate-pages  Basically, your admin action method should return an HttpResponseRedirect to the intermediary view that will handle the form, etc."
django,3b0b4d,unklphil,1 point,Thu Jun 25 05:55:31 2015 UTC,"Yes but how can I use a template if I'm returning an HttpResponseRedirect? Does this mean I need to make a new entry in urls.py and associate that with a template? Also, it looks like this guy is doing it without using the HttpResponseRedirect object, but trying to copy his code I'm unable to get into the 'do_action' if statement."
django,3b0b4d,spookylukey,1 point,Thu Jun 25 19:24:32 2015 UTC,"In that example, they had:   <input type=""hidden"" name=""action"" value=""set_genre_action"">   You don't have the equivalent in your code.  However, the other comments are right - you should follow the example in the docs, and create a completely new view (with its own entry in urls.py etc.). There are various reasons for this - better use of HTTP (which means you avoid bugs with the browser caching pages in ways that are not desirable), and better re-usability of the functionality, and less complicated code."
django,3ay56z,ramse,3,Wed Jun 24 13:07:59 2015 UTC,Might I suggest irc://freenode/django
django,3ay56z,pemboa,1 point,Wed Jun 24 14:24:02 2015 UTC,Good idea. Forgot about irc.
django,3ay56z,metaphorm,3,Wed Jun 24 14:36:47 2015 UTC,this might help  https://docs.djangoproject.com/en/1.8/howto/static-files/#serving-files-uploaded-by-a-user-during-development
django,3ay56z,ckinsey,2,Wed Jun 24 15:01:46 2015 UTC,"I've stared at that page for a while. I have that in place:  urlpatterns = [     url(r'^post/', include('listings.urls')),     url(r'^admin/', include(admin.site.urls)),     static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) ]  if settings.DEBUG:     urlpatterns += staticfiles_urlpatterns()   Edit: I just moved the static() from within urlpatterns() and put it after staticfiles_urlpatterns() within the if statement and everything works."
django,3ay56z,andrey_shipilov,3,Wed Jun 24 15:24:36 2015 UTC,"Don't do this:  STATICFILES_DIRS = (     os.path.join(BASE_DIR, 'static'),     MEDIA_ROOT )   Unless you want duplicates of all your uploaded media copied to STATIC_ROOT every time you run ./manage.py collectstatic."
django,3ay56z,zealotree,1 point,Wed Jun 24 17:18:15 2015 UTC,"Good point, thanks."
django,3ay56z,DuyBach,2,Thu Jun 25 00:57:13 2015 UTC,"# URL that your STATIC files will be accessible through the browser. STATIC_URL = '/static/'  # Physical system path where the static files are stored. STATIC_ROOT = os.path.join(BASE_DIR, '../static_root')   # List of directories where ""./manage.py collectstatic"" will look for files, which it puts all together into STATIC_ROOT. Each app that you have can have it's own ""static"" files directory. STATICFILES_DIRS = (     os.path.join(BASE_DIR, 'static'), # This is the ""static"" files directory where say most of the CSS/JS/IMG files are stored for the project. )   # Physical system path where the static files are stored. Files that are being uploaded by the user. MEDIA_ROOT = os.path.join(BASE_DIR, '../media_root')  # URL that your MEDIA files will be accessible through the browser. MEDIA_URL = '/media/'   On development environment STATIC and MEDIA files are handled automatically. On the production environment you need to configure your web server to handle STATIC and MEDIA urls to point to STATIC and MEDIA root respectively. Also after every deploy you need to run ""./manage.py collectstatic --settings.project.production""."
django,3ay56z,DuyBach,1 point,Thu Jun 25 00:55:46 2015 UTC,Is this during development? You don't need to specify a media URL in development aka when debug is true
django,3aw2u6,qaximor,52,Tue Jun 23 23:36:26 2015 UTC,PostgreSQL. Always and only PostgreSQL.
django,3aw2u6,jeffbaier,4,Wed Jun 24 00:04:52 2015 UTC,"Now now, not always. If you have to use a relational database though, then yes, always PostgreSQL."
django,3aw2u6,sli,6,Wed Jun 24 06:09:23 2015 UTC,"Well he's asking about using with Django so relational db is implied.   But I'm also going to go out on a limb here and say there's no reason for NoSQL. (Redis excluded of course, for those that consider it a NoSQL db). Anything mongo, etc can do, postgres can do just as well (or better) and more reliably."
django,3aw2u6,jeffbaier,2,Wed Jun 24 10:42:21 2015 UTC,"I just wish postgresql had something like phpmyadmin, phppgadmin is really bad compared to it and it's not always possible or it's too slow to use pgadmin3 over the internet"
django,3aw2u6,Brandhor,3,Wed Jun 24 09:45:33 2015 UTC,Have you tried adminer?
django,3aw2u6,hutcherino,-2,Wed Jun 24 12:47:20 2015 UTC,yeah but it's not as good as phpmyadmin
django,3aw2u6,Brandhor,1 point,Wed Jun 24 13:14:25 2015 UTC,"I can understand your frustration, but man... Phpmyadmin. Combination of two awful techs, php and mysql. An artifact of a more ancient time."
django,3aw2u6,jeffbaier,2,Wed Jun 24 10:44:41 2015 UTC,"I understand but phpmyadmin is really great in terms of ui and functionality if you use mysql, with postgre you have to choose between phppgadmin or adminer which are both lacking or postgresql studio which is made in java and I didn't even bother trying it since it's a pain in the ass to deploy tomcat"
django,3aw2u6,Brandhor,1 point,Wed Jun 24 11:00:21 2015 UTC,could you explain if you don't mind on why PostgresSQL over anything else? Since I am really thinking of using it in the current project.
django,3aw2u6,teilo,9,Wed Jun 24 00:09:11 2015 UTC,Transaction support without worrying about which data store you are using. Less prone to corruption. Vastly superior security model. Just as fast as MySQL. Can be optimized to a far greater degree. Triggers and constraints. Fantastic replication capabilities. The most organized and documented code you will ever find. Stored Procedures. Great extensions (stored procedures in Python!). JSONB and HSTORE fields (fuck NoSQL). Seriously. Use Postgres.
django,3aw2u6,jeffbaier,11,Wed Jun 24 05:14:34 2015 UTC,"I'll leave detailed research as an exercise to the user, but off the top of my head...  Postgres is a little better with joins and subqueries, has a great explain analyze, has fewer quirks, provides nicer error messages and has a better command line.  MySQL has weird quirks. For instance time fields do not record milliseconds. MySQL does not implement the full SQL standard. MySQL is owned by Oracle (fuck Oracle).   The django project leads reccomend Postgres.  Postgres has awesome features like PostGIS (cool location stuff) and hstore/array/range etc   https://docs.djangoproject.com/en/1.8/ref/contrib/postgres/"
django,3aw2u6,pydry,8,Wed Jun 24 00:30:15 2015 UTC,"Put it this way: if you choose postgresql the chances of regretting it are very small. Mongo, on the other hand...  Sqlite is the default in django just because it requires very little in the way of dependencies. Personally I wouldn't recommend it unless your django app is effectively single user and you have some deep desire for all your data to be stored in one file.  Image uploads should be stored on disk as a flat file and referenced by the database."
django,3aw2u6,searchingfortao,6,Wed Jun 24 02:43:46 2015 UTC,http://howfuckedismydatabase.com/
django,3aw2u6,andrey_shipilov,0,Wed Jun 24 07:51:53 2015 UTC,"Oh god, yes :)"
django,3aw2u6,coderanger,2,Thu Jun 25 00:58:56 2015 UTC,"There are two databases in the world:  If you need HA, use Riak. If you don't, use Postgres. Done."
django,3aw2u6,Airith,1 point,Wed Jun 24 00:48:27 2015 UTC,HA?
django,3aw2u6,coderanger,1 point,Wed Jun 24 00:52:03 2015 UTC,High availability.
django,3aw2u6,metaphorm,0,Wed Jun 24 00:53:55 2015 UTC,"So by definition HA means ""In information technology, high availability refers to a system or component that is continuously operational for a desirably long length of time."", and usually everyone wants his app to be available for a long time, that means I should use Riak?"
django,3aw2u6,AlexFromOmaha,4,Wed Jun 24 01:12:40 2015 UTC,no. you should use PostgreSQL until you understand databases and understand what the uses of Riak (and other similar systems) are.
django,3aw2u6,never_safe_for_life,2,Wed Jun 24 02:32:12 2015 UTC,"Unless you know you want NoSQL, stick with relational things. If you need availability guarantees, that's a very well explored topic.  If you do want NoSQL, I'd probably suggest Redis or Mongo over Riak just because there are more mature tools there. If a HA guarantee is a concern, probably Redis + Sentinel. That's a bit of a religious debate, though.  RDBMS on Django is SQLite3 for ease of use when you don't need write concurrency, or PostgreSQL when you do. Any other choice is motivated by leveraging pre-existing skills or interfacing with external databases."
django,3aw2u6,AlexFromOmaha,4,Wed Jun 24 01:22:44 2015 UTC,"There is no way you need a NoSQL database. Unless you are part of a team of 20 building an app that needs to scale to millions of requests per minute it is overkill.   And as everybody else is saying in this thread, Postgres is your champion."
django,3aw2u6,never_safe_for_life,1 point,Wed Jun 24 02:30:29 2015 UTC,"There are other use cases than that. In fact, if all you need are concurrent reads, I'd still push RDBMS in a master-slave architecture.  A KVP store like Redis is a good choice if you need predictable write scaling and your data is amenable to something like map-reduce. You might need hardware scaling for writes on much smaller apps than millions of requests a minute depending on what you're storing.  Sometimes you just need more flexibility in your data storage. This is the one I've seen bite teams more than once. ""What's the data look like?"" ""Anything and everything, why?"" Sane people go running for the nearest stakeholder to get better requirements, but buzzword-driven developers go ""Ok, schemaless it is!"" There are still real use cases there, though. Use cases like this are why NoSQL DBs are popular persistence layers for things like message queues. I've never needed something like this for a Django model, but I could imagine a scenario where Django is really just feeding data into the first part of a great monstrosity of a system and using the ORM to store directly into the ETL system was convenient.  Sometimes you have the exact opposite problem and you need to handle small data sets on flimsy hardware. If you think this is you and you're on Django, you're probably wrong, but I'm not about to stake my reputation on that claim.  There's still good ol' ""big data."" Big data is rare, but there are growing numbers of industries that need to process data sets larger than an RDBMS should. If your query returns don't fit in 4GB of memory or your tables don't fit on a 120TB drive, you might have a big data problem. If you're in one of those industries, analytics could very well be handled by a small team, and they might not even be very time-sensitive.  Then sometimes you just have weird data modelling requirements. We needed a graph database for one of our products, which is one of the NoSQL categories, even if it's not what you'd normally think of in a discussion like that.  ...but all of that comes back to the basic point of ""if you don't know, just use Postgres."""
django,3aw2u6,CatsAreTasty,0,Wed Jun 24 03:46:56 2015 UTC,"Thanks for this response. I was sort of hoping somebody more in the know could list a handful of good use cases for NoSQL.   I could see the ""poor requirements"" use case, as well as the weird requirements one (your graph db example)."
django,3aw2u6,AlexFromOmaha,0,Thu Jun 25 22:55:33 2015 UTC,"This is worth a read if you anyone really thinks that the so-called ""NoSQL"" databases are more than a passing fad."
django,3aw2u6,coderanger,0,Wed Jun 24 01:50:14 2015 UTC,I think you linked the wrong article.
django,3aw2u6,ahulak,1 point,Wed Jun 24 02:38:11 2015 UTC,"HA usually refers to systems with a higher failure tolerance. Postgres offers fairly simple primary-secondary replication meaning all data is copied from the primary server to one or more secondaries. If the primary fails (machine explodes, disk fails, etc) you could promote one of the primaries and keep on truckin'. This provides some level of availability guarantees, but it still has problems. In Postgres (and all SQL systems really), writes can only be processed on a single primary server, so if your cluster gets cut in half by a network failure then some number of your servers may be unable to write to the database (even if they can still read from a local secondary replica). Riak doesn't provide the same data consistency assurances as SQL/Postrgres, but in return you aren't limited to a single-primary model."
django,3aw2u6,ahulak,1 point,Wed Jun 24 01:21:24 2015 UTC,"I've used Postgres and MySQL in large scale applications. Honestly, I kind of prefer mysql if I actually want to be able to use a standalone query browser for random queries/data checkups. Sequel Pro is my query browser of choice and its miles ahead of anything available for Postgres. That said, if your only really using the django orm, postgres is probably the better choice. As others have mentioned, postgres has quite a few features that mysql doesn't (geospatial indexing, faster alter table queries on large tables, transactional queries out of the box, etc)."
django,3aw2u6,ccb621,1 point,Wed Jun 24 02:46:59 2015 UTC,How about for APIs which one stands out more?
django,3aw2u6,imatree,1 point,Wed Jun 24 02:57:48 2015 UTC,"Honestly very, very similar in that respect. Unless you are getting into the nitty gritty and writing lots of custom queries, you won't notice the differences with the django orm. I have more experience with the standard mysql functions so I lean that way, but I'm sure postgres has all of the same functionality and then some."
django,3aw2u6,teilo,1 point,Wed Jun 24 04:41:06 2015 UTC,Why does your e-commerce app have a lot of image uploading?  Why is image uploading a concern regarding database selection? (Please tell me you aren't storing images in your database.)
django,3aw2u6,eighthpence,0,Wed Jun 24 05:26:26 2015 UTC,"It's not really ecommerce, it's more like craigslist, but where the user can upload images. And noooooooo, I am not storing images in my database, I'm using Amazon S3 to store them."
django,3aw2u6,pydanny,0,Wed Jun 24 10:49:22 2015 UTC,In development SQLite3 is enough and very convenient.  In production you should use PostgreSQL.
django,3aw2u6,never_safe_for_life,3,Wed Jun 24 02:03:54 2015 UTC,"Totally disagree. Convenient, yes. Not nearly good enough for serious development. Too much on SQLite is a simulation vs. a real database construct.  Best practice is to develop on the database on which you deploy. Vagrant makes that trivial, but nearly as good and even easier is just install Postgres on your dev machine. It's very easy, and you need to know the requisite commands in production anyway."
django,3aw2u6,ahulak,3,Wed Jun 24 05:18:20 2015 UTC,"This is terrible advice. There are differences between SQLite3 and Postgresql that will manifest themselves extremely negatively if you do anything more complicated than standard Django ORM filters.  Use the same development database as production. Always.  If you don't want to taint your development machine, use Vagrant to create a VM to work in."
django,3aw2u6,cles30,2,Wed Jun 24 09:13:37 2015 UTC,"Won't the code get screwed up if I change Databases? For example in Flask if you want to switch databases the code in the model would look totally different, so you'll need to change that for it to be able to work with the second database you chose to work with. Is it the same thing with Django?"
django,3aw2u6,snarkhunter,3,Wed Jun 24 02:14:48 2015 UTC,"Yes, your code WILL get screwed up. OMG, this was a huge problem for the first 2 years of Django Packages."
django,3aw2u6,cauffe,0,Wed Jun 24 03:56:40 2015 UTC,Not at all. In Django you set up your database in settings.py. The models don't need to know nor care about which database they are being persisted to.
django,3aw2u6,Kronok,8,Wed Jun 24 02:29:00 2015 UTC,"While this is technically true, you should try to use the same DB in production and locally. It isn't very difficult and reduces ANY risk of a bug sneaking in because of differing DB technologies. Additionally, if you need to sync local and remote DBs its much faster to use sql dumps than django fixture updates.  Really though, the main reason is it's not hard and identical production/dev environments is the holy grail."
django,3axu1j,love_humanity,2,Wed Jun 24 10:57:56 2015 UTC,"I'd recommend just going with React.js at that point. I've played with Meteor my fair share of the time, and yes you can add HTTP endpoints but since Meteor uses DDP it is a little odd."
django,3axu1j,granduh,-4,Wed Jun 24 12:16:06 2015 UTC,It's not my choice buddy. I need to do that. Could it be possible? Where to find? There is nothing on Google.
django,3axu1j,ccb621,1 point,Wed Jun 24 13:28:18 2015 UTC,"If it's not your choice, whose is it? Why is someone dictating such an unusual technology stack? Push back! Don't let folks force you to create horrible software."
django,3axu1j,DanielAtWork,1 point,Fri Jun 26 02:08:38 2015 UTC,"I'm not your buddy, guy."
django,3axu1j,Infintie_3ntropy,1 point,Wed Jun 24 15:07:44 2015 UTC,It seems you took it seriously. I will take my words back....no offense...
django,3av9ed,alk3ckwd,1 point,Tue Jun 23 19:55:31 2015 UTC,You want a Foreign Key relationship: https://docs.djangoproject.com/en/1.8/ref/models/fields/#django.db.models.ForeignKey  You can google Foreign Key and get a lot of SQL tutorials that'll help your understanding on the DB side.
django,3av9ed,porksmash,1 point,Tue Jun 23 20:51:20 2015 UTC,"I can do the SQL to get the table of results I want from a regular DB.  I was just wondering if there's a way to do this directly in Django/python without having to inject raw sql into the model.  Is that possible?  I don't understand how I would do the ""OR""s in the table joins."
django,3av9ed,porksmash,2,Tue Jun 23 22:21:42 2015 UTC,"You don't have to worry about the table joins at all, I think. If your models look like this:  class Schedule(models.Mode):     date= models.DateField()     home_team = models.ForeignKey('Teams', related_name='+')     away_team = models.ForeignKey('Teams', related_name='+')  class Team(models.Model):     name = models.CharField(max_length=30)     .... more of your stuff here ....     games_won = models.IntegerField()     games_lost = models.IntegerField()     games_tied = models.IntegerField()     ...more stat fields here....   You could access the stats like this:  game = Schedule.objects.get(date=today) print game.home_team.games_won print game.home_team.games_lost print game.home_team.games_tied"
django,3av9ed,noiwontleave,1 point,Tue Jun 23 22:32:12 2015 UTC,"Note that by using this solution, you will not be able to call team.schedule_set (i.e. you will not be able to return a list of all Schedule objects that are linked to a given Team object). In order to do so, you'll need to define a related name. Defining a related name is required in this case because you are ForeignKey'ing to the same model twice."
django,3av9ed,porksmash,1 point,Wed Jun 24 02:13:32 2015 UTC,"Right, related_name='<actual string>' instead of '+'"
django,3ata1u,iamwithnail,8,Tue Jun 23 09:40:16 2015 UTC,"I think it's that your get_or_create is doing a select with all those parameters which is very slow before attempting an insert.  Do you get some sort of unique ID from twitter that you can use as a lookup on an indexed row to check to see if you have the tweet?  If not, try creating one by creating a hash of all of the parameters which signify uniqueness and then storing that in the primary key and then doing the look up on that before doing an insert."
django,3ata1u,pydry,1 point,Tue Jun 23 11:06:32 2015 UTC,"So the get_or_create uses the string id, which is what twitter recommends, but I haven't indexed it yet - that would definitely make sense.  I think as well, because the tweets shouldn't be new, that I'm going to just create multiple objects and do a bulk create, maybe 1 in 20 to start with, and use the existing method as a fallback.  I'll still need to index the user, though as that'll need a lookup, yeah."
django,3ata1u,shazammerbammer,2,Tue Jun 23 14:17:31 2015 UTC,"I saw your response to my post below. The check on str_id without an index is going to do a full table scan, which is ludicrous.  I'd definitely try adding the index on your tweet table and see if that fixes it. It might.  There's really no reason not to add one index.   python manage.py dbshell  show tables like '%tweet%';  create index on tweet_table_name (str_id);   bam. 5 seconds. Now see if its faster.  Also, double check my sql - i don't use Postgres."
django,3ata1u,shazammerbammer,1 point,Tue Jun 23 14:39:41 2015 UTC,"Oh, awesome.  I'll try that tonight, thanks!"
django,3ata1u,pydry,3,Tue Jun 23 15:25:34 2015 UTC,"Let us know how it goes. Optimization results are always fun to know about :)  Another thought - you can modify the field to use an index I think it's db_index=True in the model field. Then maybe if you do migrations it would add the index for you. I don't use migrations, so i'd double check that too. But you might want to add that to the field in case you re-deploy somewhere."
django,3ata1u,megadeth9999,2,Tue Jun 23 17:25:00 2015 UTC,How did it go?
django,3ata1u,shazammerbammer,1 point,Wed Jun 24 06:35:02 2015 UTC,"Haven't had a chance to implement it just yet - I've got a couple of hours on a train today though, and I usually get a lot done on the train.  I'm going to add the indexing, and rejig the get_or_create, and see what happens, that should take up those couple of hours..."
django,3ata1u,shazammerbammer,1 point,Thu Jun 25 07:17:55 2015 UTC,"Haha, ever so slightly.  65+ tweets/second (4 workers) it's saving from Redis to the database now, and all I've done is index the id_str fields for user and tweet.  Sigh.  N00b.  :)  It's still doing the double lookup (I run get and then get_or_create, which was a real facepalm moment when I had that pointed out.), so it could still be faster..."
django,3ata1u,strig,3,Thu Jun 25 10:09:11 2015 UTC,Do you have index on User.id_str? Unique?   Do you start a transaction before many writes to db?   Profile your queries line by line. I bet you're missing an index somewhere and that the slow part is not writing but querying.
django,3ata1u,metaphorm,1 point,Tue Jun 23 10:43:15 2015 UTC,"Yep, reading this in conjunction with the other ones, that makes sense, going to have a look at that.  Nope, no index, shamefully, I forgot about indexing as I cobbled this together (and ofc, it wasn't an issue at small sizes!) from string and gaffatape."
django,3ata1u,metaphorm,3,Tue Jun 23 14:18:21 2015 UTC,"FYI: your comment was auto-removed by reddit's spam filter, likely because it links to a site that's banned reddit-wide.  Also, memes are kinda low-effort to bring out in a thread for helping someone diagnose and solve a problem."
django,3ata1u,Aingaeng,3,Tue Jun 23 21:19:18 2015 UTC,"I'd put this in celery and set up like 10-20 workers. It would probably go 10-20x faster than just one thread.  On your 4 node 8 gig box you might be able to get away with up to 40 workers running this code, as almost all of the time if spent in very high latency db or redis calls."
django,3ata1u,megadeth9999,2,Wed Jun 24 00:37:42 2015 UTC,"So - this is partly why I was asking, because that was my expectation - moar wurkers, moar speedz, right?  But I can't add more than 6 or it starts to slow down.   I suspect the issue's like pydry said, that it's not indexed properly, just gonna go answer his comment."
django,3aux0v,whelks_chance,2,Tue Jun 23 18:30:55 2015 UTC,"You probably need to look into the ""allow_relation"" method of your DB routers.  You have tables that join django_site even though they are not in the same DB."
django,3aux0v,ckinsey,1 point,Tue Jun 23 20:58:19 2015 UTC,"Having looked into this, if anything I'm more confused. Running:  python manage.py migrate sites --database=db2.1   is now giving:  RuntimeError: Error creating new content types. Please make sure contenttypes is migrated before trying to migrate apps individually.   So, I add contenttypes :  python manage.py migrate contenttypes --database=db2.1   Which gives:  django.db.utils.OperationalError: no such table: auth_permission   So it seems everything needs everything.  I've tried to block all the ""allow_relation"" options. To test what this is doing, I added several ""Print"" lines throughout the ""allow_relation"" method, but the method doesn't even seem to run on either makemigrations, or migrate."
django,3auwm1,yuga_d,1 point,Tue Jun 23 18:28:03 2015 UTC,"Try: map.loadMap(""{% static ""final.svg"" %}"", function() {"
django,3auwm1,rdom22,1 point,Tue Jun 23 18:36:36 2015 UTC,"map.loadMap(""{% static 'final.svg' %}"", function() {   Note the change in types of quote marks, as you're nesting them. Not sure if needed, but could cause issues."
django,3auwm1,whelks_chance,1 point,Tue Jun 23 18:39:01 2015 UTC,I'm assuming this only works if my javascript is inside the template. What if it's in a served static javascript file?
django,3auwm1,Brandhor,2,Tue Jun 23 20:20:30 2015 UTC,"add something like this in the template  var STATIC_URL = ""{{STATIC_URL}}"";   and then use STATIC_URL in the js, you need to add the static context processor though https://docs.djangoproject.com/en/1.8/ref/templates/api/#django.template.context_processors.static"
django,3auwm1,whelks_chance,1 point,Thu Jun 25 14:27:38 2015 UTC,"Then you'll need to add the javascript files location to the template in the same way as the .svg file.  <script type=""text/javascript"" src=""{% static ""jquery/jquery.file.js"" %}""></script>   and to predict the CSS question  <link href=""{% static ""folder/a_css_file.css"" %}"" rel=""stylesheet"">   If you're using this method, your js files can use relative path names (../../images/final.svg) and you don't need to worry about the django template tags. They're really for html only."
django,3ar3ga,wub_wub,5,Mon Jun 22 20:46:34 2015 UTC,Have a look at https://github.com/django-mptt/django-mptt/  A bit of googling should turn up some examples of using this for threaded comments.
django,3ar3ga,chronug,2,Mon Jun 22 21:22:24 2015 UTC,"Okay, I went with this, it's the easiest and fastest method, the performance is better than I expected. I've updated the original thread with some stats. Thank you."
django,3ar3ga,YouAreSalty,2,Tue Jun 23 10:25:24 2015 UTC,Can you give us more details of how you used django-mptt?
django,3ar3ga,stevemcd,2,Tue Jun 23 22:16:20 2015 UTC,"Sure. The initial changes are covered in this commit: https://github.com/Nikola-K/django_reddit/commit/65faeff35bd348e74a9362ffa3d40c9978b9118f  But basically I just have this as my comment model (simplified):  from mptt.models import MPTTModel, TreeForeignKey  class Comment(MPTTModel):     author = models.CharField(null=False, max_length=12)     submission = models.ForeignKey(Submission)     parent = TreeForeignKey('self', related_name='children', null=True, db_index=True)     html_comment = models.TextField(blank=True)   And this as my single comment template:  {% load mptt_tags %}  {% recursetree comments %}     <div class=""media"">         <div class=""media-body"">             <a href=""/user/{{ node.author }}"">{{ node.author }}</a>             <a class='score'> {{ node.score }}</a>             {{ node.html_comment|safe }}              {% if not node.is_leaf_node %}                 {{ children }}             {% endif %}          </div>     </div> {% endrecursetree %}   Which is simply called like this from my main thread template like this:  {% extends 'base.html' %} {% load humanize %}      {% block content %}      [html and js part that shows the submission info, new comment dialog etc]      {% include '__items/comment.html' %}  {% endblock %}   And my view:  def comments(request, thread_id=None):     this_submission = Submission.objects.get(id=thread_id)      thread_comments = Comment.objects.filter(submission=this_submission)     return render(request, 'public/comments.html', {'submission': this_submission,                                                     'comments': thread_comments}   These are all simplified examples of what I have, but they should be working or at least give you the idea on how to use it.  You can view the full code here: https://github.com/Nikola-K/django_reddit/tree/master/reddit  It's also super easy to clone the project and run the code yourself, it's still a new project (basically wrote it over the weekend) so there are no complicated dependencies or complicated setup to get it up and running locally."
django,3ar3ga,phail3d,3,Wed Jun 24 07:11:55 2015 UTC,"Pull all the comments out for one submission in a single DB query, then build a dictionary that maps parent comment IDs to lists of comments. You can then recursively move through those, and the lookup cost of a comment thread is O(1), given dictionary access time. I wrote about this a while back with some sample code as well: http://blog.jupo.org/2010/01/26/linear-traversal-of-adjacency-list-trees/  Mezzanine (a CMS built with Django) uses this approach for hierarchical navigation, and also threaded comments: https://github.com/stephenmcd/mezzanine  There's also a Reddit clone that uses Mezzanine's built-in commenting, rating and user accounts called Drum, you might find it interesting to read about: http://blog.jupo.org/2013/04/30/building-social-apps-with-mezzanine-drum/"
django,3ar3ga,kundun,1 point,Mon Jun 22 21:03:43 2015 UTC,"Thank you very much for the links! I did actually stumble upon drum while looking for solutions, but didn't really look into it a lot - I will do so tomorrow though, I'll check out how it's implemented in mezzanine too :) But I'm pretty sure that you solved the issues that I'm having, so again, thanks a lot!"
django,3aqsek,ThorAkureyri,2,Mon Jun 22 19:25:23 2015 UTC,"You can with iPython's autoreload extension: https://ipython.org/ipython-doc/dev/config/extensions/autoreload.html. If you're not using iPython, you should be because of all the benefits it has (tab completion, history, etc). pip install ipython. Django will use it for the shell if it's installed."
django,3aqsek,High2plus3,1 point,Mon Jun 22 21:58:30 2015 UTC,"And if you are using django_extensions, shell_plus will use ipython if you have SHELL_PLUS = ""ipython"" or call it with --ipython."
django,3aqsek,Whoopska,1 point,Tue Jun 23 00:00:15 2015 UTC,"You can't. It's the same as editing something when running on an external server service. You'll have to restart the 'service' of django shell. Sucks, but them's the bricks."
django,3aqsek,heymanitsmematthew,1 point,Mon Jun 22 21:04:10 2015 UTC,You are running a script right? Why not just use   %load scriptname main()   (assuming you have ipython installed and django is using it as your shell).
django,3aqsek,Whoopska,0,Mon Jun 22 23:18:08 2015 UTC,Not possible.
django,3anl5w,reactify,2,Sun Jun 21 23:49:42 2015 UTC,This has been posted here no less than 100000000 times.
django,3anl5w,Mekhami,0,Mon Jun 22 01:47:49 2015 UTC,Fail: https://github.com/DrkSephy/django-hackathon-starter/blob/master/hackathon_starter/hackathon_starter/settings.py#L106-L157
django,3anl5w,pydanny,2,Mon Jun 22 01:34:05 2015 UTC,+100  When I came into my current project the SECRET KEY was 'change-me'. For a product in production that handles financial data. Correcting that was my first commit.
django,3anl5w,sriramracer,3,Mon Jun 22 17:16:18 2015 UTC,"Having keys open isn't the end of the world. The readme states that they are there for getting up and running faster, and it's noted to get your own keys if you plan to put your application into production."
django,3anl5w,sriramracer,2,Mon Jun 22 01:53:26 2015 UTC,Noted in the README. Not in the settings.py on each line.
django,3anl5w,sriramracer,2,Mon Jun 22 17:15:12 2015 UTC,How often you think people pay attention to README? These are just the ones we know about who dont: https://github.com/search?utf8=%E2%9C%93&q=3da44769d4b7c9465fa4c812669148a163607c23&type=Code&ref=searchresults
django,3an54m,megadeth9999,7,Sun Jun 21 21:24:21 2015 UTC,"This is not a good idea. If your database query takes so long, you should work on optimizing that query. If you are doing searches on the database, you can probably use a search engine, probably one of the ones supported by Django Haystack.  Celery is for things the user doesn't need in the response.  The classic example is a simple contact form. Someone fills out the form. The view would normally look something like this.  def contactform():     # form processing here     send_email(subject, body, from, to...)     return response()   In this example the user is going to press submit on the form. Then they are not going to get a response and a ""success"" page until your web server is done actually sending an e-mail. That means their browser is waiting to load all that time.   Assuming you don't care about telling the user if the e-mail failed to send, you can render that success page without actually sending the e-mail. The problem is you can't do this, even though it would be great. Simply because django, and just about every web framework, is designed to where the return from a function is the http response. Therefore, you can't have a view do anything after the response is sent.   def contactform():     # form processing here     return response()     send_email(subject, body, from, to...)   And THAT is what celery is meant for. With celery you can do this.  def contactform():     # form processing here     send_email.delay(subject, body, from, to...)     return response()   Now the view doesn't actually send an e-mail. It just quickly contacts your RabbitMQ server to insert a job into the queue. That takes a very small amount of time. Then it returns the response to the user immediately with no waiting. The e-mail gets sent sometime later after the user may not even be on your site any more.  TL;DR: If you want to send something to the user, it should be in the response, and you need to process it in the view. Celery is for doing extra work that isn't required to render the response to the user."
django,3an54m,apreche,3,Sun Jun 21 23:40:17 2015 UTC,"This is actually a little similar to the system I'm proposing for Django (http://www.aeracode.org/2015/6/17/beyond-request-response/), but you don't want to do it using Celery really as it's not designed for it; you're going to have to manually encode and decode requests and responses, your return channel is going to be slower than it should be, and other things.  If you're interested in the idea you can give my prototype code a shot - it uses Redis as the transport rather than Celery - but honestly, I'd wait and use a normal webserver until/if this becomes a stable third-party app or makes it into Django."
django,3an54m,aera,3,Mon Jun 22 09:02:50 2015 UTC,"Use gevent instead, and park nginx in front of python - it will help handle long requests.  Once you've done that you can start fixing your slow backend. Probably something with indexes, etc."
django,3an54m,natmaster,1 point,Sun Jun 21 22:25:38 2015 UTC,You are basically trying to mimic non-blocking IO in a system that was not designed for it. Probably won't end well. Is there a reason you want to do this other than curiosity?
django,3an54m,1234applepi,1 point,Mon Jun 22 05:26:43 2015 UTC,"Well, curiosity is one. The second, I have some reports engine - that generates reports. Sometimes it takes a fraction of second, sometimes longer. Right now I'm displaying a message and the user gets another one when the report is completed, via Web sockets.   I thought about generalizing this approach, as having a query that runs for half of second looks somehow similar to me.   As I wrote in the edited post, I'm not interested in advice about indexes and other stuff that is generally considered a traditional approach, because I know traditional approach."
django,3an54m,1234applepi,1 point,Mon Jun 22 07:26:06 2015 UTC,"For reports that is fine, depending on what amount of time ""sometimes longer"" corresponds to. I would probably have used polling rather than websockets, just because it is less complicated, and much easier to set up with Django.   Celery is useful because it processes some tasks in the background, freeing your django processes to serve other (more common) requests that will be served immediately. Offloading everything to Celery is just moving the work from point A to point B, because now instead of tying up your Django processes, you are tying up your celery worker processes. Ultimately, this approach will probably end up being slower, since everything needs to go through a queue before the work actually starts getting done.   Contrast this with a non-blocking environment (which is really what you're after here) like ASP.NET, where the work is being moved from point A to point B, but there is no thread or process blocking for completion of the task, so ultimately you end up with more throughput."
django,3an54m,danielsamuels,1 point,Mon Jun 22 16:26:16 2015 UTC,"This doesn't make any sense. Your query will take the same amount of time whether it's async or not, so the user will have to wait the same amount of time regardless. All you will achieve is adding complexity to your application and gaining literally nothing. Fix your backend."
django,3an54m,patrys,1 point,Mon Jun 22 06:04:58 2015 UTC,User -  yes. Web server process - no.
django,3an54m,metaphorm,1 point,Mon Jun 22 07:22:21 2015 UTC,5 seconds sound like a problem in your backend. If you start queuing tasks that take 5 seconds yet come every half a second you're going to quickly build up hours worth of waiting.
django,3an54m,pwbdecker,1 point,Sun Jun 21 22:02:33 2015 UTC,You're right. Except that they won't block the web server and it will respond to requests for the rest of the website.
django,3alzgz,kowal-tbg,4,Sun Jun 21 15:11:03 2015 UTC,Try:  def get_client_ip(request):     ip = request.META.get('HTTP_CF_CONNECTING_IP')      if ip is None:         ip = request.META.get('REMOTE_ADDR')      return ip
django,3alzgz,mroximoron,2,Sun Jun 21 16:46:02 2015 UTC,def get_client_ip(request):     ip = request.META.get('HTTP_CF_CONNECTING_IP')     if ip is None:         ip = request.META.get('REMOTE_ADDR')     return ip
django,3alzgz,granduh,1 point,Sun Jun 21 23:36:31 2015 UTC,Thank you. It works.
django,3alzgz,Nick4753,1 point,Sun Jun 21 17:50:11 2015 UTC,"We use https://github.com/un33k/django-ipware  Then have this middleware to actually change the request object to reflect the actual IP address:  """"""Middleware to handle IP addresses in the app"""""" from ipware.ip import get_real_ip  class SetCorrectIPMiddleware(object):     """"""Make sure that django has the correct IP even if there is a proxy/CDN""""""     def process_request(self, request):         """"""Process a request""""""         ip = get_real_ip(request)         if ip is not None:             request.META[""HTTP_X_FORWARDED_FOR""] = ip             request.META[""REMOTE_ADDR""] = ip   In your case you'd likely then want this in your settings.py  IPWARE_META_PRECEDENCE_LIST = (     'HTTP_CF_CONNECTING_IP',     'HTTP_X_FORWARDED_FOR', # client, proxy1, proxy2     'HTTP_CLIENT_IP',     'HTTP_X_REAL_IP',     'HTTP_X_FORWARDED',     'HTTP_X_CLUSTER_CLIENT_IP',     'HTTP_FORWARDED_FOR',     'HTTP_FORWARDED',     'HTTP_VIA',     'REMOTE_ADDR', )   Then anywhere in the app you want you can just rely on request.META[""REMOTE_ADDR""] to get the remote IP.  That should give you more flexibility depending on your hosting arrangement (if you turn Cloudflare off, are running it locally, etc)  If you do decide to use this middleware and need the 2.7 unit-tests that go with it, let me know and I'll post them."
django,3alzgz,Kwastie,1 point,Sun Jun 21 17:18:26 2015 UTC,request.META only contains official HTTP headers. See: https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest.META nevermind   I recommend to write a middlware to solve this problem. Use this as an example.
django,3alzgz,teilo,3,Sun Jun 21 16:01:38 2015 UTC,"This is not true. request.META contains all available headers.  The issue is the missing HTTP_ prefix. This is all explained in the docs.  Note especially this:  With the exception of CONTENT_LENGTH and CONTENT_TYPE, as given above, any HTTP headers in the request are converted to META keys by converting all characters to uppercase, replacing any hyphens with underscores and adding an HTTP_ prefix to the name. So, for example, a header called X-Bender would be mapped to the META key HTTP_X_BENDER.   There is no need for middleware. He just needs to change 'CF-Connecting-IP' to 'HTTP_CF_CONNECTING_IP'."
django,3alzgz,mroximoron,1 point,Sun Jun 21 17:04:32 2015 UTC,That also uses request.META
django,3aif1t,silverpendulum,6,Sat Jun 20 14:14:03 2015 UTC,Class-based views are a really bad example of object oriented programming as they use a stateful object (that's why a lot of methods set attributes on self) to represent something that is not stateful (a page view). Each request that hits a class-based view results in a new instance of the view being constructed.
django,3aif1t,patrys,1 point,Sat Jun 20 15:51:22 2015 UTC,It's a simple assignment operation: self.object = self.get_object(queryset=Publisher.objects.all()). Whether self.object exists before the assignment is irrelevant as the assignment operation will still assign a value.
django,3aif1t,ccb621,1 point,Sat Jun 20 21:02:40 2015 UTC,"It is when learning a framework though; I wouldn't know if I was missing something in the docs. Like in this example, you wouldn't know if 'object' was something that you could already access from the other methods. Was it something that had a default, or was it something that you entirely had to create?"
django,3aif1t,ccb621,1 point,Sun Jun 21 00:59:03 2015 UTC,"Assigning values to object attributes is a fundamental concept of object-oriented program and Python classes. If you are not familiar with the lifecycle of a view/request, it might help to step through the view, starting with the dispatch method."
django,3aidki,dsizemore,1 point,Sat Jun 20 13:57:11 2015 UTC,See http://stackoverflow.com/questions/2552516/changing-user-modeladmin-for-django-admin for info on overriding UserAdmin. Add an ordering property to your new admin class: https://docs.djangoproject.com/en/1.8/ref/contrib/admin/#django.contrib.admin.ModelAdmin.ordering.
django,3aidki,ccb621,1 point,Sat Jun 20 21:06:11 2015 UTC,Sorry for my delayed reply. Thanks. I haven't had the chance to try this yet but makes sense I think. I'll try it tonight.
django,3af7se,pydanny,9,Fri Jun 19 17:17:04 2015 UTC,"We put this list together because we keep seeing people referencing or recommending Django books that are five, six, or even seven years old. Considering that 1 programming year is like 10 human years, this can prove disastrous. Therefore, we researched what is out there and combined it into one detailed list for reference. We hope this is useful and please let us know if we missed anything."
django,3af7se,wengole,2,Fri Jun 19 17:17:44 2015 UTC,"Thanks for doing this. I often look to buy another django book and always worry about how much is outdated/missing new features.  I was a ""backer"" to your original 1.5 book, but since then have been doing Plone for my day job, but we're looking to adopt django and my boss would find this list useful."
django,3af7se,memilanuk,2,Fri Jun 19 18:10:59 2015 UTC,http://www.tangowithdjango.com/  http://www.marinamele.com/taskbuster-django-tutorial
django,3af7se,memilanuk,3,Fri Jun 19 18:47:56 2015 UTC,"While a great resource, Tango with Django lacks an ISBN, hence is purely a website. Published books, mainstream or indie, are less transient than a website. If the Tango with Django team decides to formally publish their work (which requires an ISBN), then we'll list them on the page.  Same goes for Taskbuster. While magnificent efforts, and larger than some of the tutorial books out there, they lack an ISBN. Again, if Taskbuster decides to formally publish their work (which requires an ISBN), then we'll list them on the page.  For reference, this required of having an ISBN is specified on http://twoscoopspress.org/pages/current-django-books"
django,3af7se,crozyguy,1 point,Fri Jun 19 18:51:07 2015 UTC,Gotcha.  My apologies.
django,3af7se,happyfeet2039,0,Fri Jun 19 19:08:46 2015 UTC,"or lets say, they are not on amazon and you cannot make money using affiliate sales?"
django,3af7se,new2django,-8,Sat Jun 20 10:35:30 2015 UTC,"As transient as a book that say was only electronic, then say was bought by people, then updated quite recently after publication, but the first bunch who bought it would have to buy that again? I didn't even get all the way through my copy of Two Scoops before another version came out guys.       But yay for your ISBN."
django,3af7se,jlorencetti,1 point,Fri Jun 19 19:10:22 2015 UTC,Can you be even more entitled?
django,3af7se,nerdboydjango,1 point,Fri Jun 19 20:22:36 2015 UTC,"Strange thing this is, when a new ""version"" of a book comes out all the old copies disappear in a ball of fire, right?  I still read and use my Two Scoops of Django 1.6. :)"
django,3af7se,new2django,-12,Fri Jun 19 19:55:00 2015 UTC,"Fuck 'em. They only let for-pay books on their page, but I got all the ebooks from friends for free. Information is free!"
django,3af7se,g-money-cheats,6,Fri Jun 19 19:53:00 2015 UTC,Can you manage to be a larger asshole?
django,3af7se,jlorencetti,1 point,Fri Jun 19 20:24:38 2015 UTC,"I assume this is the same person as /u/djangodork, /u/djangonerd, and /u/djangogeek who all show up here, troll authors, and make the django community (and the world) a slightly worse place."
django,3af7se,crozyguy,1 point,Sat Jun 20 06:12:59 2015 UTC,Aaaaand that's why when I want to buy a book I need to pay 3-4 times more than an US citizen for books authors refuse to publish in digital format.
django,3af7se,chiproller,1 point,Fri Jun 19 20:05:20 2015 UTC,"the books listed, those on amazon, use affiliate links. If blogger links something free, why would anyone buy those books, so that blogger can make money using affiliate sales?"
django,3af7se,new2django,3,Sat Jun 20 10:36:36 2015 UTC,"Just want to say thanks for this list!  As a dinosaur beginner (41 years old), two scoops has been an invaluable resource and my 1.7 book is falling apart!  I hope to learn even more from some of these suggestions."
django,3af7se,g-money-cheats,2,Sat Jun 20 00:32:57 2015 UTC,This is great! I had no idea Django had this many books.
django,3af7se,DanielAtWork,1 point,Fri Jun 19 20:21:29 2015 UTC,"/u/pydanny, pretty sure Django Design Patterns and Best Practices is Django 1.7, not Django 1.8. Just a heads up!"
django,3af7se,crozyguy,1 point,Sun Jun 21 18:01:32 2015 UTC,Thanks! :-)
django,3agnvq,TheBigBlabberMouth,1 point,Sat Jun 20 00:24:11 2015 UTC,Thanks heaps I can't wait to get this task out the way.
django,3agnvq,freework,2,Sat Jun 20 07:51:45 2015 UTC,That tutorial requires you to install and run bitcoind. That in my opinion is way overkill. Instead try out my library: https://github.com/priestc/moneywagon
django,3agnvq,freework,0,Sat Jun 20 08:00:25 2015 UTC,"I'm looking at it now, it seems very cool!  I only installed and requested the the US/BTC spot price so far from python.  So i can use it to transfer bitcoins from my wallet to another wallet?? I will keep reading later when i have time.  I am very impressed with your work! I will donate to you if my project starts making money :3"
django,3agnvq,freework,1 point,Sat Jun 20 22:35:49 2015 UTC,"Yes, this library has the ability to move bitcoins. Tak a look at teh Transaction class in moneywagon. Its pretty rudimentary, but it does work. If you have any problems with the library feel free to make a github issue."
django,3agnvq,freework,1 point,Sun Jun 21 03:05:48 2015 UTC,"could i please ask some questions.  1. Is 1HWpyFJ7N... <-- that the address of the wallet you are sending btc to?  2. What is this KxDwaDis...?  Its not address because it doesn't start with 1 or 3 3. is 1Fs3... the address that the btc is coming from? 4. why do you need to use tx.hex() to generate 00100137876876...  ---- from moneywagon.tx import Transaction tx = Transaction('btc') tx.add_input('1HWpyFJ7N...', 'KxDwaDis...') tx.add_output('1Fs3...', 1.42, unit='btc') tx.hex() '00100137876876... tx.push() ----"
django,3aeax1,whoisearth,3,Fri Jun 19 12:39:31 2015 UTC,"Define static files folder in your settings.py file. This is where you'll put your bootstrap files.  Run the collect static command from manage.py. Add CSS links and other bootstrap code to your templates.    Most people recommend using a separate server for static files. I serve my site with Gunicorn/NGINX.    I'm probably forgetting details of steps, but that's the gist."
django,3aeax1,MrAckerman,1 point,Fri Jun 19 16:11:47 2015 UTC,Thanks!  I actually have all these steps down.  What I'm trying to understand is how I then server data from my django backend into the various charts/etc that are provided from the bootstrap template.  Guess I have some learnin to do :)
django,3aeax1,anniC,2,Fri Jun 19 17:22:38 2015 UTC,"Hello,  I've used https://github.com/django-admin-bootstrapped/django-admin-bootstrapped with success previously for an internal project.  Depends if you're letting non-staff in - there's some more info on that here: http://stackoverflow.com/questions/676931/creating-an-entire-web-application-using-django-admin  Hope that helps!"
django,3aeax1,Thingdeux,1 point,Tue Jun 23 12:32:05 2015 UTC,Thanks!  I've actually taking to using sb-admin just for the POC phase and I'm tying the views into the template based on the user access.
django,3aeuu6,silverpendulum,2,Fri Jun 19 15:37:37 2015 UTC,In https://docs.djangoproject.com/en/1.8/ref/class-based-views/mixins-editing/#django.views.generic.edit.FormMixin.form_valid the missing self argument in the specified definition form_valid(form) is implicit. This is just a convention of the text of the documentation and has nothing to do with Python or Django code conventions. Here's a link to the source https://github.com/django/django/blob/1.8/django/views/generic/edit.py#L104 showing that form_valid accepts two parameters self and form.
django,3aeuu6,mssnlayam,1 point,Fri Jun 19 16:19:47 2015 UTC,"When you call super (e.g. super(ClassName, self).get_context_data(**kwargs) ), does that function still refer to a definition that has self as parameters?"
django,3aeuu6,mssnlayam,2,Sat Jun 20 10:56:50 2015 UTC,"When you call x.foo(params) this calls the function foo(self, params) with the value of self bound to x.  The answer to your question is yes.  For understanding Class based views, take a look at http://ccbv.co.uk/ This shows various views, their hierarchy and what methods get called."
django,3aeuu6,pwbdecker,1 point,Sun Jun 21 03:09:29 2015 UTC,"Thanks, this is great! Where/how did you find this btw?"
django,3a9udw,ph49,8,Thu Jun 18 11:08:04 2015 UTC,"I see a few ways to make these two work, depending on your project. I had the opportunity to employ only the first way.   Use django-rest-framework to create an API and use it from a React frontend. I keep two repositories - one for React frontend with webpack or browserify and another for a Django project exposing API, authentication and admin. This is more suitable for projects that don't have a public facing frontend or projects that don't need SEO. Google started crawling JS rendered pages recently, so even that can be fine. I used this approach in one such project where everything is behind a login. If separating the repos doesn't make much sense for your project, you can include JS and JSX files in your templates with something that will convert JSX to JS when rendered. Packages like python-react, react-python help you here. One of these integrate with jango-pipeline nicely. Include compiled JavaScript files in your templates and delegate JSX compilation to something like webpack/browserify with watch on. I already use a gulpfile to watch for sass/less files for changes (to compile to CSS). JSX compilation can be added to that. Livereload ensures that your browser automatically refreshes after all compilation is done, if you need."
django,3a9udw,ilovekitty,2,Thu Jun 18 11:56:31 2015 UTC,Your point about SEO is not really true. You can run a node server to serve your frontend and use ReactJS serverside rendering. One of the main reasons React is gaining so much traction is because of its serverside rendering abilities.
django,3a9udw,demitrin,1 point,Fri Jun 19 06:04:15 2015 UTC,His point about SEO is true. Google does crawl javascript generated content pages and urls now.  No need for node and yet another thing to manage in your stack. This is /r/django after not /r/node.
django,3a9udw,dalore,1 point,Fri Jun 19 11:26:01 2015 UTC,"Even if you don't want to use node, you can use something like PyExecJs to render your compiled reactjs in your python."
django,3a9udw,demitrin,1 point,Fri Jun 19 16:37:33 2015 UTC,https://github.com/markfinger/python-react  Server side rendering of jsx with Django integration
django,3a9udw,andybak,3,Tue Jun 23 17:44:31 2015 UTC,"I prefer the route of keeping as much JS build process stuff out of django as I can, having webpack/browrserify compile a JS bundle that pipeline can then pull into django-land.  (#3 in /u/ilovekitty's options)"
django,3a9udw,pizzzzzza,2,Thu Jun 18 23:40:58 2015 UTC,"Someone made a set of tools that makes it easier to integrate webpack with Django. Here's the link to the article.  I think it's great. It not only helps people who want to use React with Django, it also assists in managing your front-end stack (ES6, Sass, etc.) This is the best front-end asset management workflow I have ever found for Django so far."
django,3a9udw,_under_,-7,Fri Jun 19 05:07:47 2015 UTC,*You're
django,3a9udw,flipflopity,1 point,Fri Jun 19 05:08:08 2015 UTC,"I'm at about the same place as you, and don't know any React.  My current strategy is to have my pages contain blocks whi ch are populated by very short views that are called by jQuery.load(). It works a charm for me, makes the whole thing fast and reactive.  Not sure it's best practice though."
django,3aazu8,gorkiredd,1 point,Thu Jun 18 17:12:17 2015 UTC,Github? License?
django,3aazu8,iBlag,1 point,Thu Jun 18 20:22:49 2015 UTC,There should be a way to subclass AdminSite or something similar to achieve this without the use of template tags right?
django,3aazu8,ckinsey,2,Thu Jun 18 22:34:54 2015 UTC,"Actually, I went to code this up for 1.9, and saw it's already landed in the master branch in github, so it'll be in 1.9: you can subclass AdminSite and override the method get_app_list(). Lets you filter out apps you don't want to show, or just sort the list in a different way."
django,3aazu8,ubernostrum,1 point,Fri Jun 19 22:56:16 2015 UTC,It's a great news.
django,3aazu8,ubernostrum,1 point,Sun Jun 21 16:22:22 2015 UTC,"The method to override on AdminSite would be index, but unfortunately that method doesn't really delegate generation of its context in a way that leads to simple overriding.  Might be a useful feature to add to Django."
django,3aazu8,andybak,1 point,Fri Jun 19 01:25:22 2015 UTC,Why do so many people capitalize 'apps'? My clients do it. A co-worker does it. What do they think it's an acronym of!?
django,3aazu8,andybak,1 point,Tue Jun 23 17:57:35 2015 UTC,"As someone else mentioned - this will be much simpler in 1.9.  Until then https://github.com/django-admin-tools/django-admin-tools is a great way to have a custom index screen - including collapsible, rearrangeable panels and non-model related content."
django,3ac3qs,TheBigBlabberMouth,6,Thu Jun 18 22:05:10 2015 UTC,"You are rendering a list as a string, and that is Python's string representation of a list containing a single unicode value.  {{ form.user_balance.errors.data.0 }}   Would yield:  Please Specify How Many Bitcoins  If you want to loop through what appears to be possibly many error items, you would use:  {% for error in user_balance.errors.data %}{{ error }}{% endfor %}   And so on."
django,3abygo,TheBigBlabberMouth,2,Thu Jun 18 21:23:39 2015 UTC,"I think it might be because your min and max are so outrageous. Why did you choose those values? This is more of an HTML question than a Django question though.  Edit: In Safari <input id=""id_user_balance"" max=""9223372036854775807"" min=""-9223372036854775808"" name=""user_balance"" type=""number"" value=""1""> renders properly, but gets really strange when you try to use the steppers. The problem goes away with more reasonable min/max. So I wouldn't be surprised at all if it were rendering blank to start in another browser. Follow /u/xelhark's good advice about using a DecimalField."
django,3abygo,quantumbot,0,Thu Jun 18 21:29:49 2015 UTC,"but user_balance is bitcoins so doesn't it have to be that big? i format it to the following with javascipt once its on on the webpage. 21000000.00000000  user_balance = models.BigIntegerField(max_length=2100000000000000, default=0)"
django,3abygo,xelhark,6,Thu Jun 18 21:57:12 2015 UTC,"What.  That number would be able to store like the number of atoms in the universe.  Also it's an integer.  The maximum number of Bitcoins available is 21 million. That fits in a regular integer, you don't need a big integer, not even one which is THAT BIG. Just to give you an idea about what you did there, the ""2100000000000000"" is the number of DIGITS in your number, not its maximum value. The thing is that you don't need integers, you need floats. What is the minimum value you want to store?   Probably 0.00000001 which is 8 digits after the dot.  So every number has to fit in here ->   21'000'000.000000000  Your number is therefore a DecimalField, and as the docs say you need 17 total digits, 8 of which are after the dot.  so   user_balance = models.DecimalField(max_digits=17, decimal_places=8)"
django,3abygo,Vitrivius,1 point,Thu Jun 18 22:15:09 2015 UTC,"The thing is that you don't need integers, you need floats. DecimalField seems to be a good choice here. Float, on the other hand, should not be used for currency."
django,3abygo,xelhark,1 point,Sat Jun 20 10:47:57 2015 UTC,"Nice read, thanks!   I meant floats as 'floating point' though, as opposed to integers."
django,3abygo,Vitrivius,1 point,Sat Jun 20 11:25:38 2015 UTC,Isn'tDecimal implemented as a fixed point data type?
django,3abygo,xelhark,1 point,Sat Jun 20 11:34:05 2015 UTC,"Uhm yeah you're right, otherwise it wouldn't make sense to have the number of digits before and after the point"
django,3abygo,evilsnake,0,Sat Jun 20 11:35:54 2015 UTC,It's probably because the form.user_balance.data is not a number. Had this problem before where my API would return a string and the number field would output empty.
django,3abxf2,ggalage,2,Thu Jun 18 21:16:04 2015 UTC,"What is the expected behavior? What is the actual behavior? ""Nothing...seems to work"" doesn't give folks much to go on."
django,3abxf2,ccb621,1 point,Fri Jun 19 00:58:43 2015 UTC,"I have used Haystack w/ DRF, what are you trying to do? Is your code online for anyone to look at?"
django,3abxf2,_march,1 point,Fri Jun 19 01:37:55 2015 UTC,"so basically i've got elasticsearch as backend running and i've wired up the view with drf-haystack's HaystackViewSet just like in the docs. Also rebuilt the index.  Now when I go on to my search address and type in ( /?topic=haystack ) or something like that which should return me some data, I still get ""detail: Not found""   I'm not sure where to go from here when i've prolly read the doc twice, there are no error logs, and my code is basically almost verbatim to document's examples...  maybe problem with elasticsearch? but when I check on 127.0.0.1:9200/  it does show the json it's suppose to..."
django,3a77zf,estrambolico,11,Wed Jun 17 19:44:19 2015 UTC,"This is way more constructive that the ""Django sucks"" articles.  I personally think that the ideal evolution would allow Django to work in both traditional and consumer mode.  If the core developers can be convinced the design (I'm hoping they already agree with the intent) I would happily contribute to a Kickstarter to this."
django,3a77zf,pemboa,1 point,Wed Jun 17 21:05:41 2015 UTC,A similar idea was proposed at Pycon Sweden in may. Hopefully the DSF will pick up this line of reasoning soon.
django,3accjb,a_Django_Idea,2,Thu Jun 18 23:17:06 2015 UTC,"You've asked a very open-ended question, and the answer is just as nebulous. Simply put: do whatever is most important for your site. There is no one correct way to create a site."
django,3accjb,ccb621,2,Fri Jun 19 00:56:03 2015 UTC,Start reading https://docs.djangoproject.com/en/1.8/intro/tutorial01/
django,3a72dy,efDev,2,Wed Jun 17 19:05:20 2015 UTC,"It is ok to make several DB calls for a view. What you want to avoid is N+1 calls or N2 calls or something like that. For example, average score (without filtering) can be one call. Average score by store name (for a table) would be another call. You would want to get the average grouped by store in a single call. Otherwise, you got N+1 queries. It doesn't scale.  In the end, you want the number of db calls needed to load the page independent of how much data you have. For example you have 18000 records a month. If it takes 10 (or even a 100) queries to load the home page, and then you grow and get 100K records a month and still only need 10 (or that 100) queries to load the home page, you are doing good.  There is no magical number of how many calls to make. Just general concepts. Let the db do the work (average, sort, group, fetch related, etc), limit N+1 queries, batch queries if needed, etc. But don't jump through hurtles to optimize this without knowing if this is your bottleneck. Is the page slow? Fix that. If not, don't worry yet."
django,3a72dy,varikin,1 point,Wed Jun 17 19:54:10 2015 UTC,"Awesome! Thank you for your input.  I was questioning the three ajax calls because I was noticing that sometimes when all three requests were fired at the same time they would came back (for example) in 15 seconds, but individually fired in sequence would take 3 seconds a piece (this is on GAE/CloudSQL) and was wondering if it would be better to just do one 3 seconds query plus the added processing time."
django,3a72dy,varikin,1 point,Thu Jun 18 00:04:50 2015 UTC,"I would first try and figure why 3 concurrent calls take 15 seconds, but 3 sequential calls take 3 each / 9 total.   Then, even though may people talk about REST and make things composable and pure etc, break that when you need. If you have a real need, like performance like this, make one API, like StatsDetail or something like that. But, first, I would say something is weird if 3 calls concurrently takes longer than the 3 separate. I would look into that first. Profile it."
django,3a72dy,dalore,1 point,Thu Jun 18 02:07:36 2015 UTC,You could do the aggregating and calculating the count/average on each view. But wouldn't it be better to only calculate it on change? If the data hasn't changed why do another expensive sql call.  Store the counts/averages when the data changes. This technique is called denormalisation. You could store it in another database table or use something else to store like the django cache would be good.
django,3a72dy,nrhinkle,1 point,Fri Jun 19 11:28:56 2015 UTC,"Side note, if you're planning on actually releasing this app, consider using a review ranking of 1-5. The rdf/micro data format google uses to show review star ratings in search results is on a scale of 1-5. You can set your own upper/lower bound but it'll be rescaled to a 1-5 rating which would give weird fractions of stars for a 1-4 rating system."
django,3a6ys6,iefox,3,Wed Jun 17 18:40:26 2015 UTC,"I use this app: https://github.com/dyve/django-bootstrap3  I had the same requirement as you. No django forms customisation, pure template-side code. It's been great for that.  Edit: more details."
django,3a6ys6,qbitus,3,Thu Jun 18 00:16:23 2015 UTC,"crispy forms does that, the defaults are usually good enough and it's as simple as doing {{form | crispy }} but if you want to customize the output you have to provide a a form helper either from the view or create a custom assignment tag  edit: forgot to mention that the last release is from 2 years ago and there are a couple of bugs but they are fixed if you download the source directly from github https://github.com/maraujop/django-crispy-forms"
django,3a6ys6,Brandhor,1 point,Wed Jun 17 18:45:56 2015 UTC,Crispy forms do the job.  You can try :    Formica. it have a bootstrap template django-Floppyforms.
django,3a6ys6,mrjmad,1 point,Wed Jun 17 19:12:53 2015 UTC,"If you're hand-coding the templates, rather than using something like crispy forms the only thing you need to do is add a form-control class. django-widget-tweaks helps with this.....      {% load widget_tweaks %} <div class=""row"">     <div class=""col-xs-3"">         <div class=""form-group"">             {{ form.first_name.errors }}             {{ form.first_name.label_tag }}             {{ form.first_name.help_text }}             {{ form.first_name | add_class:""form-control"" }}         </div>     </div> </div>"
django,3a76st,porksmash,1 point,Wed Jun 17 19:35:57 2015 UTC,Only one other row will ever refer to this instance in the table   That seems to suggest that you should be using a one-to-one   2x the number of Dudes being displayed   That seems weird. Your worst case should be O(1 + N) queries.  If all else fails:  1. get all the Dude objects you need  2. use Python to transform that list into a list that works  dudes = Dude.objects.all() for d in dudes:     d.evolves_to = [d2 for d2 in dudes if d2.evolves_from_id = d.id]   That makes your SQL O(1) but makes your code O( N2 )
django,3a76st,pemboa,1 point,Wed Jun 17 21:23:44 2015 UTC,"Thanks for the insight. A one-to-one could be a better choice, you're right. I think I've resigned to just making evolves_to a foreign key/one-to-one field instead of a function. Leads to some data duplication in the table, but has vast improvements in performance. I can get all the data I need in a single query and there is no python manipulation required afterwards. This may not be ideal but the table will be static once filled, so I feel the advantages outweigh the risks."
django,3a76st,spookylukey,1 point,Wed Jun 17 22:18:37 2015 UTC,"select_related('evolves_from') is not going to help, because you need dude.dudes_set, not dude.evolves_from.  select_related('dudes_set') doesn't work because select related can only follow singly-related objects. (In latest Django it will complain loudly at this error).  If you change it to a one-to-one, you will be able to use select_related on the reverse relation.  You could also use prefetch_related('dudes_set'), which can follow one-to-many relationship."
django,3a6ue1,-c0der-,2,Wed Jun 17 18:09:04 2015 UTC,"Asking ""which framework is the best"" is like asking ""which editor is the best"". You get lots of opinions, but ultimately it's up to you to try them out and figure out what works for you. Django is totally capable for a site like that. djangosites.org lists plenty of sites that are ""high traffic"", but the framework isn't the only thing that comes into play (same for SEO).  Django also handles several backends for caching, and is customizable. If you have no technical requirement forcing you to use Python 2 then I see no reason to use it. I've never had a problem with Python 3 (even converting my site from 2 to 3).  Maybe you could make a couple prototypes and decide which one suits you the best. Django offers a lot of tools out of the box and stitches them together in a nice way, where other frameworks might require you to build a site ""piece-by-piece"". Both have their pros and cons."
django,3a4out,spoetnik,1 point,Wed Jun 17 05:11:20 2015 UTC,"From django.db.models import serialize   Allows you to return geojson. You could then filter on the client side, reducing the calls to the server. Or do continuous ajax calls passing the extent of the map view to filter.  Data = serialize('geojson' , table.objects.all(), fields=('f1', ))  Sorry, typing on my phone. But this is the gist in you view to get geojson. It's much easier to work with."
django,3a4out,Ebriggler,1 point,Wed Jun 17 12:19:27 2015 UTC,Have a look at GeoDjango. It should make it straightforward to perform spatial  queries.
django,3a4out,MattBD,1 point,Wed Jun 17 06:33:40 2015 UTC,"I wonder, is there a way to do something this simple without GeoDjango/postgis? I feel like I did this so long ago with a MySQL query... maybe I'm nuts."
django,3a4out,ckcollab,1 point,Wed Jun 17 07:30:25 2015 UTC,"There is a formula somewhere for it - a colleague of mine has used it for a project before.  I think you can use GeoDjango with MySQL, however - I think recent versions have improved support for this kind of spatial search."
django,3a4out,MattBD,1 point,Wed Jun 17 08:05:04 2015 UTC,"I have geodjango setup, and my models have geopoints.  The main problem is, how do I handle the spatial search Ajax request?  Do I pass this to a REST framework? This would need the installation of django-rest-framework-gis (https://github.com/djangonauts/django-rest-framework-gis) I think?  Or, do I use Haystack over http, and use the results of a search. Spatialsearch is default in Haystack.  I lean towards the last, as this would also enable a faceted search.  Any experiences, thoughts, code-snippets on this?"
django,3a4out,bennylope,2,Wed Jun 17 09:05:34 2015 UTC,"Using Haystack would be a great solution, but just remember that Haystack is only an intermediary to the search engine, which must support geospatial indexing (ElasticSearch and Solr both do)."
django,3a3t1e,doilift,4,Wed Jun 17 00:30:27 2015 UTC,"This isn't a race condition really, it's the user being dumb. You can help the user be less dumb by disabling the submit button on the form once it has been clicked. You could do this using JavaScript which Google can help you with."
django,3a3t1e,mitchellrj,1 point,Wed Jun 17 06:58:24 2015 UTC,"Thanks, I am gonna implement this.  But i was just being alert that when the app is getting larger, i am gonna see a lot of these errors. And also this may will happen not only in user registration but in other processes as well."
django,3a3t1e,spookylukey,1 point,Thu Jun 18 00:00:40 2015 UTC,"Something like this would work well for the Django admin, which already uses jQuery:  http://stackoverflow.com/questions/2830542/prevent-double-submission-of-forms-in-jquery"
django,3a3t1e,metaphorm,2,Wed Jun 17 09:46:11 2015 UTC,which database are you using? if you're using Postgres or another RBDMS that supports transactions then no race condition should be possible at the database level.   if you think you might have a race condition in your Python code (possible if you're doing concurrency with uwsgi or greenlets) then I would recommend using some kind of locking construct around the critical section. I've used this one in the past and been very happy with it: https://github.com/Xof/django-pglocks
django,3a3t1e,pemboa,2,Wed Jun 17 01:01:46 2015 UTC,"You can definitely have a race condition with Postgres, thought I'm not sure that's the appropriate term. And he's using Django Admin.  If the ADMIN does a select to do the duplicate username check, then it's definitely possible to get an error at the DB level."
django,3a3t1e,yerfatma,1 point,Wed Jun 17 07:00:45 2015 UTC,"I am using Postgres for database and i am using gunicorn for the webserver. I didn't set the worker type, i just set the worker number. I suppose they are sync workers. Yeah, that's what i was trying to say, the race condition is not at the postgres but when django tries to insert a row in postgres.  So apparently i need to modify django admin's source code? Thanks for the link, i will look at it."
django,3a3t1e,digitalice,1 point,Wed Jun 17 01:10:00 2015 UTC,"If you're using Postgres, you should use get_or_create when the user submits the user name and validate based on whether the user was newly created or not. I don't think the Django admin has anything to do with this. It sounds like you're just not validating the user input. If it is a form inside the admin, you can override the form with your own version."
django,3a3t1e,pemboa,1 point,Wed Jun 17 14:25:24 2015 UTC,"i used an app called userena to manage user registration, and in userena, the username duplication is checked. But both requests passed the userena's validation because they are almost at the same time."
django,3a2v4f,pemboa,2,Tue Jun 16 20:12:03 2015 UTC,"Do you mean in database, cache, files or all of them? In the case of databases, most of them can handle atomic operations—atomic means one at a time, in simple terms; memcache, redis cache and mongo cache all support atomic operations too, so if you call client.add, value will be locked until updated and you will avoid race issues; files can be a bit tricky, but there is a really nice module you can use, called lockfile, which helps just with that.  Was that your question?  Edit: meant cache.add, not set."
django,3a2v4f,misterte,1 point,Tue Jun 16 21:47:29 2015 UTC,More info on atomic transactions & django
django,3a2v4f,misterte,1 point,Tue Jun 16 21:50:39 2015 UTC,I mean in databases. Of course ACID compliant DBs handle the operations. But that doesn't do anything about potentially stale data in a <form> overwriting newer data from a <form> due to sequential POSTs.
django,3a2v4f,misterte,1 point,Tue Jun 16 21:54:57 2015 UTC,"Ok, now I understand what you mean. It depends on the result you expect, I guess. What I do is always redirect after POST, of course, rely on permissions and keep track of last edit date and user. I built a process manager about 2 years ago and it's still running with no problems of that kind, at least I've never had complaints. It has around 500 processes but only 200+ users, though. One other app has around 2000 active users, but only admins can edit common data, so no problems with that. I guess my experience won't help you, sorry."
django,3a2v4f,simonw,1 point,Tue Jun 16 22:32:13 2015 UTC,"Yup, I think probability is on our side."
django,3a2v4f,apreche,1 point,Tue Jun 16 23:23:12 2015 UTC,"If you think that might be a problem with your application, the easiest way to protect against it is to include a ""version"" field on the object you are updating. Every time you save changes to that object, increment the version field.  Then, when you provide the user with an ""edit"" form you can include the current version of the row as a hidden form field. When the user submits the form, you can check that the version field on the current row in the database matches the version field in the hidden form field.  If the two differ, you can redisplay the form to the user (along with the data that they entered) and let them know that there was a conflict. Your design challenge is what to do next: depending on the application it might make sense to show the new version and their version and let them pick one, or show them a diff between the two, or do something else entirely.  I've seen this pattern implemented in some wiki software, but not in many other places (that I've noticed)."
django,3a2v4f,apreche,1 point,Wed Jun 17 02:10:18 2015 UTC,"Thanks, I'm familiar with the pattern, was wondering how many of you Django devs actually implement it, or something better."
django,3a2v4f,dalore,1 point,Wed Jun 17 06:01:14 2015 UTC,"This is actually a problem when using the django admin. The situation goes like this.  User A visits an object change form in the admin.   User B visits the same form.  Both forms are loaded with the same data that was just queried from the database.  User A makes changes and presses the save button.  User B makes changes and presses the save button overwriting user A's changes entirely with an SQL UPDATE.  There are solutions to this. HOWEVER, they are largely unnecessary. Most sites/systems are designed such that it is very rare that two people will edit the same thing at the same time. For example, I'm the only person who is going to be editing this reddit comment. If perhaps someone else logs in with my account and tries to edit this comment, and one of us overwrites the other, that's perfectly acceptable behavior."
django,3a2v4f,dalore,1 point,Wed Jun 17 02:31:10 2015 UTC,"This is actually a problem when using the django admin. The situation goes like this.   Technically, this is a problem with any app that doesn't explicitly check for it.   Most sites/systems are designed such that it is very rare that two people will edit the same thing at the same time   I disagree with you slightly here: I'm not sure we ""design"" for this, I think a lot of times probability tends to be in our favour."
django,3a2v4f,kmmbvnr,1 point,Wed Jun 17 06:03:26 2015 UTC,"Well, I design for it. It's definitely on my mind!"
django,3a2v4f,kmmbvnr,1 point,Wed Jun 17 11:29:22 2015 UTC,"Look at django-concurrency it helps solve some of the issues. We got it protecting our important models.  When it detects a conflict we have it throw an error.   The other better way is to design your models using the log pattern. (Nothing to do with logging). This patterns means you try and avoid updating existing models but instead have changes as new models. Let's give an example.  Instead of a status field on a model which requires updating you have a status model and create a new one each time with the new status. So you get a log of status changes with the last one being the current status. If 2 people tried to update the status at the same time the original model is untouched, you get 2 benign status updates as new models. No concurrency issues."
django,3a2v4f,kmmbvnr,1 point,Wed Jun 17 08:34:17 2015 UTC,Thanks. How well have you found django-concurrency to work?  Have you actually implemented the log pattern within the Django ORM in a production env?
django,3a2v4f,joshmaker,1 point,Wed Jun 17 14:38:42 2015 UTC,"We find it works well to catch concurrency errors. They are rare but do happen and we don't want some important models to lose info. We just have throw an exception when it does as we haven't gone further and implemented the views that shows the difference. It was enough for us to show an error and have them try again.  Yes we are using the log/append only in production. We have a booking model that has a payment status, like invoiced, paid, cancelled, declined etc. Moved to having a BookingStatus model that is time-stamped and with a fk to the booking object. Last status wins but it's good as it keeps status changes as history.   Append only is a very common solution outside of django to solve concurrency issues so using it django made sense.  Edit: I would add try and make your policy of write once models. If you aren't updating a model then you won't have concurrency issue. You can use denormalisation say in redis to reassemble them."
django,3a2v4f,ivix,1 point,Wed Jun 17 18:23:51 2015 UTC,"My problem with append only is that it seems, in theory, that it would make read queries significantly more expensive. What would be a simple foreignkey look up is now lookup with multiple results and a sort."
django,3a2v4f,npolet,1 point,Wed Jun 17 18:48:32 2015 UTC,"There are several ways to do the locking in django apps.  The simplest way to get pessimistic lock is to use .select_for_update() call - https://docs.djangoproject.com/en/1.8/ref/models/querysets/#select-for-update This prevents concurrent modifications inside single request processing.  To get over multiple requests concurrency problems (like 2 users requested the form then both save the changes), here is the app that stores list of locked models in database to get pessimistic lock - https://github.com/RobCombs/django-locking Similar approach could be implemented by putting special key to cache (if your cache backend supports atomic add) instead of saving locks to database.  The advantage of proper pessimistic locking that users will never loose they work. The disadvantage - it's easy to get deadlock scenarios if you are locking several entities and have no clear strategy what should be locked and in what order.  For the mine https://github.com/viewflow/viewflow package i'm using pessimistic lock, b/c it's clear to lock only single process instance on request, and assume that enough to get over rest entities concurrent updates. Tracking process tasks state transitions prevents multiple-requests form submissions.  For the optimistic locking take a look to  https://github.com/gavinwahl/django-optimistic-lock It offers optimistic lock base on incremental version field.  I'm using the same strategy for the django-fsm package using FSMState field instead of version - https://github.com/kmmbvnr/django-fsm/blob/master/django_fsm/__init__.py#L387  Low cost is the advantage of optimistic locking. You can just enable and forget, but it could behaves bad on end users submit or background jobs processing failure. Sometimes in low concurrency scenarios is better to wait and continue instead of optimistic failure."
django,3a2v4f,dalore,1 point,Wed Jun 17 08:54:37 2015 UTC,"And one more. Sometimes you don't need locking at all. Even if you are implementing accounting software, you can route all money transfer operations to the single celery worker instance.  Single worker instance performance could be enough for many cases, to avoid thinking about locks at all."
django,3a2v4f,ivix,1 point,Wed Jun 17 08:59:43 2015 UTC,"Single worker instance performance could be enough for many cases, to avoid thinking about locks at all.   That doesn't solve my problem example."
django,3a3wib,silverpendulum,2,Wed Jun 17 01:00:02 2015 UTC,"https://github.com/django/django/blob/master/django/views/generic/__init__.py  There are 'utility' imports in the init.py module, making it possible to import View either way."
django,3a3wib,pydanny,2,Wed Jun 17 02:29:38 2015 UTC,"On __init__.py you can specify a __all__ list of things you would like to import, so people using your library do from requests import Foo instead of from requests.complex.path.decorators import Foo that serves the purpose of hiding your own decision on how to separate your modules while making your package easy to use."
django,3a1ytq,g-money-cheats,5,Tue Jun 16 16:31:12 2015 UTC,"You could add it to a manager.   class FooManager(models.Manager):     """""" Manager for FooModel """"""     def get_with_related(self, *args, **kwargs):         return self.get_queryset().prefetch_related('state')   class FooModel(models.Model):     objects = FooManager()      state = models.ForeignKey('State')   then you should be able to call FooModel.objects.get_with_related().get(pk=1)"
django,3a1ytq,j_syk,2,Tue Jun 16 16:40:37 2015 UTC,"That was going to be my suggestion.   Though select_related() may be more appropriate in this situation, as it will do the join in one query."
django,3a1ytq,colly_wolly,1 point,Tue Jun 16 17:07:40 2015 UTC,"I just used prefetch since that's what the title said. But, yes, actually thinking about the data layout, select_related is probably what OP wants. Good news is that the latest Django tells you when you pick bad field names for prefetch and select."
django,3a1ytq,j_syk,1 point,Tue Jun 16 18:55:41 2015 UTC,You're right. I definitely meant select_related. Thank you!
django,3a1ytq,spookylukey,3,Tue Jun 16 23:36:16 2015 UTC,"As others have said, you probably want select_related in this case.  To ensure that this is always added, you need to add it to the get_queryset method of the model's default manager:  class AddressManager(models.Manager):     def get_queryset(self):         return super(AddressManager, self).get_queryset().select_related('state')  class Address(models.Model):     objects = AddressManager()   From then on, Address.objects.all() will fetch the state along with the address.  In addition, if something else (e.g. User) has an FK to Address, then this will also be efficient without extra work:  user.addresses.all()   If you have cases where you want to fine tune and don't want to include the State, then you can chain select_related(None) to the end."
django,3a1ytq,druski,1 point,Wed Jun 17 10:43:27 2015 UTC,State should almost certainly be refactored to be an enum or enum equivalent.  Django local flavours should be useful here https://github.com/django/django-localflavor/blob/master/README.rst
django,3a1ytq,dalore,1 point,Tue Jun 16 18:53:55 2015 UTC,They might be storing more data on the state model. It might have flags or images for example.
django,3a1ytq,dalore,1 point,Tue Jun 16 19:41:02 2015 UTC,Replace the queryset with a custom one that adds select related.
django,3a2qz3,dggg,3,Tue Jun 16 19:43:57 2015 UTC,"I have been working on something like this for the past 2 years or so, everything is open source and the code is on github. You can use it as a starting point or we can hack on it together :)"
django,3a0rw7,whelks_chance,3,Tue Jun 16 09:33:10 2015 UTC,"The answer is they'd expect both. So prioritise responses that satisfy the AND, followed by OR ...  Answers with all words will be at the top of the list, those with only one of the search words appear at the bottom."
django,3a0rw7,tpugsley,1 point,Tue Jun 16 10:52:34 2015 UTC,"This makes sense, and you're right that this is probably reducable to creating a weighted value of relevance with which to rank results, similar to how ts_vector works with text stemming etc.  My hope was there is a nice library, or at least a well tested system which defines user expectations and happiness with output ordering, based on the standard search engine input formats, such as adding + signs, and encasing multi-word strings in quotes."
django,3a0rw7,rhgp,2,Tue Jun 16 13:27:13 2015 UTC,"What really makes sense here is a relevance term. User does not wants to find every term. Sometimes he wants to find just related document. But you should build result page with documents, sorted by relevance.  So, you should be able to calculate it. Simplest will be like… for each document, try to find which terms are mentioned, for each term - add 1 point. Then, sort by points. So at the top you will get most relevant documents, even if it has just few terms.  But yea, you should write raw sql. Django gives cool things to make it easier tho. But… for search purpose, there is special databases like Sphinx, Lucene, Elasticsearch. They are made to be used as search engines."
django,3a0rw7,xBBTx,1 point,Tue Jun 16 11:00:51 2015 UTC,"I've used Solr/Haystack on a previous project, which worked well to provide an ordered list of relevant terms, but it still required manually building a search query including lists of Q objects and operator.or_ 's.  I was hoping there was a library out there which can parse a human search query such as the cat+dog into Q(text__icontains='cat') && Q(text__icontains='dog') style query filters.  Plus all the other tools a user may add to a search input, such as putting multiple terms in quotes - 'fluffy bunny' - would become text__icontains='fluffy bunny'...  I sort of assumed this problem would have already been solved somewhere, to avoid reinventing the wheel with raw queries each time someone codes up a DB front-end?  My google-fu is failing me though."
django,3a0rw7,wlu56,2,Tue Jun 16 13:23:17 2015 UTC,"that's built in in haystack, see the docs"
django,3a08ky,TalkingJellyFish,3,Tue Jun 16 05:20:15 2015 UTC,"Do you use migrations? I think this might have been quite a bit easier with data migrations. I've created migrations before which use the slugify provided by Django AutoSlug to add a new slug field to a model. Never done it with millions of rows of data, but migrations are designed for this exact use case, afterall.   Combined with django-bulk-update this would probably give much better performance as you wouldn't be hitting the database for every single model object."
django,3a08ky,nrhinkle,1 point,Tue Jun 16 08:33:45 2015 UTC,"django-bulk-update is very handy here, should be bundled like bulk_create."
django,3a08ky,brtt3000,1 point,Tue Jun 16 20:35:24 2015 UTC,"I used a migration but I specified that the slug field could be null so that it would not auto update the field. The primary issue was IOPS depletion on the RDS instance, and I think that even with a bulk update I would have encountered that."
django,3a08ky,pemboa,2,Wed Jun 17 17:48:40 2015 UTC,"Ok, I didn't read everyting, but why wouldn't you go directly to the DB for this?"
django,3a08ky,ahulak,2,Tue Jun 16 15:26:52 2015 UTC,"This was my thought as well... Even if I was worried about running this on a production database (which doesn't seem to be the case here), I would of just sql dumped it out, downloaded it locally, ran the query, and then scp'd the new dump back up.. Depending on DL speeds, sounds like it would be about 15 minutes worth of work. Large scale ETL is kinda fun, but with just 1M rows, just a simple sql query will usually do the trick. The other route, would of been export to csv, rip through it in python (sparing the use of django's save), and then write to csv and use mysql's loaddata from infile.. very fast, single slug definition, and no iops depetion"
django,3a08ky,dysmas,1 point,Wed Jun 24 05:36:28 2015 UTC,"that was kinda my thought, ""lets scroll down and see a chunk of SQL ... oh"",   I'm impressed that it was that slow with only 1m records though, could have probably done it offline in excel   /s"
django,3a08ky,pemboa,1 point,Tue Jun 16 20:34:40 2015 UTC,"I wanted to ensure that the sluging logic (simple as it may be) would be defined in one place, eg not have new instances slugged on python and old ones on SQL.  I got a few similar questions, do you think this would have reduced IOPS depletion?"
django,3a0k56,bykof,1 point,Tue Jun 16 07:40:33 2015 UTC,If you want to update you can just use the update method on a queryset/manager.  You also have a bulk_create available on managers.
django,3a0k56,Gagaro,1 point,Tue Jun 16 09:17:04 2015 UTC,This is not fast enough :/
django,3a0k56,Gagaro,1 point,Tue Jun 16 11:54:46 2015 UTC,What do your queryset looks like ?
django,3a0k56,pemboa,1 point,Tue Jun 16 12:48:12 2015 UTC,What exactly are you trying to do?
django,3a0k56,pemboa,1 point,Tue Jun 16 18:29:26 2015 UTC,Lets say I have a dictionary with 100.000 entries and in this dictionary there are entries which are already in my database and some new entries which aren't in my database. I want to have a fast way to insert or update the rows (depends on some primary keys).
django,3a0k56,pemboa,1 point,Tue Jun 16 21:54:12 2015 UTC,"What are your requirements for ""fast""?"
django,3a0k56,bennylope,1 point,Tue Jun 16 21:56:40 2015 UTC,Lets say 100.000 entries in under 10 seconds validated and saved to the database
django,39wud9,new-player,4,Mon Jun 15 13:25:44 2015 UTC,"https://github.com/justquick/django-activity-stream is great for the feed/post functionality, i use this together with a simple generic comment app."
django,39wud9,snuggl,3,Mon Jun 15 21:02:23 2015 UTC,"Since, it is a very common scenario, is their some already build-in app for this which can get mapped to 'User' model?   perhaps. try browsing around here: https://www.djangopackages.com/grids/g/commenting/"
django,39wud9,metaphorm,2,Mon Jun 15 17:29:48 2015 UTC,It is not trivial to implement something like this.  If you are new to web development you should pace yourself with this one because there is not a one-click solution to do this.
django,39wud9,max_renlo,1 point,Tue Jun 16 05:09:00 2015 UTC,"As far as I know, this kind of stateless, real-time feature is best done with AJAX. You could try using a front end framework like Backbone.js, Angular.js, Ember.js etc to get it done. Using these would require using Django Rest Framework or Django Tastypie to send your server side data to the front end in JSON. Also, everything I mentioned takes a bit of time to learn so if you really want to implement those features, be prepared to put in some serious time. You'll come out of it with good skills and practice when done.   Edit: grammar"
django,39wud9,karlo_tamayo_1010,4,Mon Jun 15 15:07:36 2015 UTC,"It can be done with AJAX, but it is not best done with AJAX.  It is best done with websockets, or server side events.   If you're doing this in Django, your best bet would be to start with something like Crossbar for non-polling realtime push events from the server to the clients.   AJAX would work okay on the small scale, but will require a LOT more scaling a lot quicker comparatively, and is slower updating compared to websockets at the least."
django,39wud9,issue9mm,6,Mon Jun 15 15:15:09 2015 UTC,"I feel like you're not addressing the question. the choice of frontend should have absolutely no bearing on how the django backend is implemented, and I think that's what the OP was asking about.  I also don't see anywhere that the OP mentioned ""stateless, realtime"". The only thing mentioned was ""if a user adds a status it should automatically gets reflected in his timeline without any manual refresh/reload"", which implies AJAX but again, nothing about choice of frontend or stateless/realtime anything.   you're also giving some misinformation here when you say ""Using these would require using Django Rest Framework or Django Tastypie to send your server side data to the front end in JSON"". that is absolutely false. DRF and Tastypie (which is now unmaintained/unsupported btw, it should not be used in new projects) are just tools to streamline JSON APIs from your django app. there is no obstacle whatever to implementing JSON APIs without DRF using just plain python."
django,39wud9,metaphorm,5,Mon Jun 15 17:24:14 2015 UTC,"Well I'm learning just like OP, I've seen questions go ignored so I didn't want to leave them hanging. What I said was my interpretation of their question and how I would handle it with my current level of understanding. I know that one could implement a custom JSON API but I suggested DRF for the same reason I decided to use Django. I also suggested tastypie as an alternative, but I'm glad you brought up that it's now abandoned, I was unaware of that."
django,39wud9,karlo_tamayo_1010,1 point,Mon Jun 15 18:11:02 2015 UTC,u are correct.
django,39wud9,rincewind123,1 point,Tue Jun 16 06:22:06 2015 UTC,"try swampdragon, its a django package for implementing real time stuff with websockets"
django,39wud9,rackmountrambo,-11,Tue Jun 16 06:08:14 2015 UTC,"You'd have to use a javascript server and framework like React or Angular to do this. You could probably do it with a simple polling javascript, but it's a failure waiting to happen."
django,39wud9,metaphorm,9,Mon Jun 15 15:08:00 2015 UTC,You'd have to use a javascript server   why would you even say that?
django,39wud9,andrey_shipilov,-1,Mon Jun 15 17:28:27 2015 UTC,Professionals.
django,39wixu,SeanMWalker,2,Mon Jun 15 11:15:00 2015 UTC,Generating thumbnails is of course one possibility but you can also do it on the frontend side by reacting on scroll events. When an image is not yet in the visible area you just don't load it. There are JS libraries that can help you with that.
django,39wixu,dAnjou,1 point,Mon Jun 15 11:49:31 2015 UTC,There are plenty of lazy loading libraries that will do this. Something like this lib will help to lighten the load of pages as they are rendered.
django,39wixu,npolet,1 point,Mon Jun 15 18:11:12 2015 UTC,"Ah yeah, lazy loading is the term I was missing. Thanks."
django,39wixu,dAnjou,2,Tue Jun 16 13:24:19 2015 UTC,I'm using sorl-thumbnail. Works well.  https://github.com/mariocesar/sorl-thumbnail
django,39wixu,H4kor,1 point,Mon Jun 15 14:23:03 2015 UTC,"How large are the images in bytes? I wouldn't expect 30 900x900 sanely compressed JPGs to be a problem. I would probably avoid resizing and cropping them with Javascript though and use CSS rules instead (background-size: cover for the cropping). Flickering could be avoided with CSS as well.  As an optimization, or if you don't trust users to upload sane images, you could resize and crop the photos using something like PIL/Pillow or pgmagick. In that case, you may want to do the scaling in the upload request handler or in a background task as opposed to scaling them on the fly when users load the detail page, or at least cache the thumbnails once they have been generated, depending on how much CPU you have to spare.  A second option is to use a CDN that can generate thumbnails on the fly."
django,39wixu,pilt,1 point,Mon Jun 15 12:27:43 2015 UTC,"I forgot to mention that I allow the user to upload any size image, and that if it's greater than 900x on width or height, I resize proportionally and save them to amazon s3.  I will take a look at using CSS to resize instead of the javascript for existing images and generating thumbnails for new."
django,39wixu,dirigeant,1 point,Mon Jun 15 15:56:49 2015 UTC,"You can use sorl to create thumbnails when images uploaded. For a better result, you can also use memcache to cache resultset."
django,39wixu,thalience,1 point,Mon Jun 15 12:31:21 2015 UTC,"The other replies here are all good advice, but an aspect not touched on yet is how you are serving the image files.  You may want to look into serving the image files from something like S3 or CloudFiles. This may not be the main bottleneck, but can still be worth doing."
django,39wixu,yaix,1 point,Mon Jun 15 13:30:40 2015 UTC,I am using S3 actually.
django,39x5qg,molszewski,2,Mon Jun 15 15:02:26 2015 UTC,"Try this:  from django.core.urlresolvers import get_resolver resolver = get_resolver(None) resolver.resolve(""path-to-check"")   https://github.com/django/django/blob/master/django/core/urlresolvers.py#L149  resolver.resolve raises Resolver404 if the url does not exist in your urlpatterns. I just tried this in 'manage.py shell' after seeing your question, not sure if it will solve the problem. Lemme know how it goes."
django,39x5qg,red_tar,1 point,Mon Jun 15 17:51:43 2015 UTC,"It works, try/except with resolver.resolve and few more lines of code solves the problem. Thanks for help."
django,39td2c,whiskeyfox_,7,Sun Jun 14 16:11:40 2015 UTC,archive.org:  https://web.archive.org/web/20150406151847/http://jamesbrewer.io/2014/10/31/json-web-token-authentication-part-two/
django,39td2c,mysterpaul,2,Sun Jun 14 19:00:57 2015 UTC,"As a word of warning, Angular isn't great for social sharing and SEO, without a lot of tweaking/mods that are basically hacks. If that's important to you, maybe wait for Angular 2.0, or look at react/backbone.  Angular's great for getting stuff going, but I feel like the 4 months we took to set up something in production in Angular was wasted because we went back and rebuilt in React.  I worked from the GetBlimp docs on JWT, not sure which version of JWT in Django you're working from though - I had to use a custom auth handler to deliver the token (call the token generator directly from my own view), but other than that the docs stepped me through it nicely. I haven't had to touch it since I got it running, though. :)  http://getblimp.github.io/django-rest-framework-jwt/ (Apologies if this is the version you were using!)"
django,39td2c,iamwithnail,1 point,Tue Jun 16 18:43:20 2015 UTC,"Thanks for the note!! Have you seen the ""work-around"" promoting XML-sitemap creation? Much of our work is behind a membership wall, but SEO is (of course) a huge consideration.  Our main desire in beginning with the PANDA stack (PostgreSQL, AngularJS, nginx, Django, API -- I just made that up deal with it) was getting running quickly. AngularJS just made sense, but I haven't worked with React, Ember, Backbone or other frameworks either.  We got it working fine - solution is in my other comment."
django,39td2c,iamwithnail,1 point,Tue Jun 16 19:40:36 2015 UTC,"Thanks, that's really helpful!  Yeah, we'd looked at that, and were going to do a shadowsite from the same backend in meteor.js (similar principle), but decided it'd be less hassle overall to have everything in one place with React.  Feedback from the front end guy was that React was more effort to learn, but he moved faster once he had it - potato/potato, I think! :)"
django,39td2c,qaximor,1 point,Wed Jun 17 15:01:41 2015 UTC,"I was just about to start learning Angularjs to be a kind of a front end for my app to fetch some queries from the database and show them on the base.html. The reasons I wanted to get into Angular is that I wanted to show notifications for the user and those notifications would be displayed in every page, so on the base.html, and I have looked around and it's possible to do it in AJAX but someone suggested it's better to use Angularjs instead, any idea what is a better framework I should use than AngularJS with Django?"
django,39td2c,super_cool_kid,1 point,Sun Jul 5 22:50:19 2015 UTC,Super cool. Thank you both.
django,39sglo,heudebeu,2,Sun Jun 14 09:02:22 2015 UTC,"Does Rails have a similar problem in building ""modern"" web applications?"
django,39sglo,projecktzero,10,Mon Jun 15 02:52:49 2015 UTC,"Shared templates  I don't really get the point of this. He seems to be speaking from a backend developer's POV. But in every real project you'll have a frontend guy, right? There are tons of JS frameworks and libraries that make it easy to manipulate the DOM. Not sure if what I'm saying makes sense but his suggestion seem like a very weird way to address an already solved problem.  Server push    Separate persistent process that Django can pass messages through    Nope. A Django application is not something that runs by itself. It's code that you pass input to and you get output back. It's not concerned with running processes or threads. The application server does that. Besides that, Django is a WSGI framework. So it's inherently not very nice and easy to make it do these realtime things. A setup with a message queue between Django and for example Tornado or NodeJS seems much cleaner and more scalable.  Template components  I agree, that could be easier. Even easier than he suggested."
django,39sglo,dAnjou,2,Sun Jun 14 12:09:34 2015 UTC,"Shared templates are a great idea in my opinion. If you use handlebars js templating client-side then you are half way to having templates that both django and your js framework can understand. I don't think django is responsible for the second half,  though. Handlebars is missing basic things like comparison if statements (e.g. {{# if foo == 4 }}). This requires some amount of planning to work around. One thing I am in the habit of doing: building a main template shell in jinja with python statements and such and also building components of the page with only variables so django and handlebars can understand the template.  I think he is talking pure crazy with push notifications. I don't know what he means when he says ajax polling is too slow. I have a tornado app running now that's completely decoupled from django other than importing session modules to check whether the user is signed in. It is plenty fast enough. Django isn't for sockets.  Template components seem like a good idea, but I have always been of the impression that Django isn't an ""everything including the kitchen sink"" solution a la ruby on rails. I also very much appreciate that fact. Django includes small amounts of behind-the-scenes magic and that, to me, is a good thing because it forces developers to have a deeper understanding of what they are building. What is the problem with just writing components in the way he demonstrated?  If his only gripe is that it inherits from forms.TextInput then its a strange gripe since a date is technically a text input when simplified."
django,39sglo,kevin____,5,Sun Jun 14 15:25:10 2015 UTC,"Django isn't for sockets.   I agree.   but I have always been of the impression that Django isn't an ""everything including the kitchen sink"" solution a la ruby on rails. I also very much appreciate that fact. Django includes small amounts of behind-the-scenes magic and that, to me, is a good thing because it forces developers to have a deeper understanding of what they are building.   Really? Maybe it's a matter of proportion but Django is pretty much the textbook example of an ""everything including the kitchen sink"" solution, at least among the Python web frameworks. And comparatively it does contain a lot of magic. In fact, it's so popular among beginners because it makes a lot of decisions for them."
django,39sglo,dAnjou,1 point,Sun Jun 14 16:06:46 2015 UTC,"I admit in the beginning I used a lot of django's magic, but eventually I learned how to use a little or as much of it as I need/want. I appreciate that django doesn't force magic on you."
django,39sglo,kevin____,1 point,Sun Jun 14 16:42:22 2015 UTC,"Nope. A Django application is not something that runs by itself. It's code that you pass input to and you get output back. It's not concerned with running processes or threads. The application server does that. Besides that, Django is a WSGI framework. So it's inherently not very nice and easy to make it do these realtime things.   That's a lame excuse. It's like saying, we're Django is not a database, so supporting writing to a database is not our problem. To stay modern, Django needs to support modern web applications. It doesn't have to build all of the parts, but at least support it.  If there temporarily needs to be a bare-bones reference implementation, so be it.   A setup with a message queue between Django and for example Tornado or NodeJS seems much cleaner and more scalable.   There's no reason this could not be the recommended way to do it, but Django should provide support the same way it does for mail, db, async, auth, etc backends.  (Side note: saying ""Nope"" makes you sound like an asshole even if you didn't mean to.)"
django,39sglo,catskul,1 point,Sun Jun 14 16:25:47 2015 UTC,"To stay modern Django needs to support modern web applications. It doesn't have to build all of the parts, but at least support it.   I didn't fully understand what you wanted to say (""we're Django is not a database""?) but I think I disagree very much.  Django is good at what it's good at: CRUD applications. And there will probably always be a need for that. And even if there won't be many years from now it won't be a big deal to let it die. Sometimes it's better and cleaner to start fresh. It's nice that people like this framework very much, that goes especially for core devs and contributors who put in much thought and work. But it doesn't make sense to stay overly attached to a piece of software even though its days are numbered, just let go then.   Django should provide support the same way it does for mail, db, async, auth, etc backends.   As I said, for some things it should, yes, but for others it really shouldn't. Django is not an email client library, and at its core it's not build for realtime/async things.   (Side note: saying ""Nope"" makes you sound like an asshole even if you didn't mean to.)   Cultural differences. Also, if someone goes to a national conference and gives a talk that even beginners will watch afterwards, and claim to be a professional in their field, and say stuff like this, I don't mind being a little bit more upfront."
django,39sglo,dAnjou,1 point,Sun Jun 14 16:48:54 2015 UTC,"Django is good at what it's good at: CRUD applications.   That's not saying much. 99% of web applications are CRUD applications in some way or another. And 99% of web applications integrate many other elements.  The whole point of a web framework is to be the thing that makes integration easy.    And even if there won't be many years from now it won't be a big deal to let it die. Sometimes it's better and cleaner to start fresh. It's nice that people like this framework very much, that goes especially for core devs and contributors who put in much thought and work. But it doesn't make sense to stay overly attached to a piece of software even though its days are numbered, just let go then.   It's possible that Django won't survive, but it sounds like you're saying we shouldn't try to evolve it, because it's already doomed.  If you are saying that, that contradicts the whole premise for the conversation about how to improve it. At that point, why even participate?   Cultural differences. Also, if someone goes to a national conference and gives a talk that even beginners will watch afterwards, and claim to be a professional in their field, and say stuff like this, I don't mind being a little bit more upfront.   Perhaps some of it's cultural, but if you have any regard for your audience, there are plenty of others who will interpret similarly. IMO, the difference between ""Nope"" and ""I disagree"" is that ""Nope"" implies you believe that you have the technical authority/cachet for the audience to interpret your word as pretty close to truth."
django,39sglo,catskul,1 point,Sun Jun 14 18:04:10 2015 UTC,"The whole point of a web framework is to be the thing that makes integration easy.   I don't necessarily agree. The web application is not always the core component of a system.   It's possible that Django won't survive, but it sounds like you're saying we shouldn't try to evolve it, because it's already doomed.  If you are saying that, that contradicts the whole premise for the conversation about how to improve it. At that point, why even participate?   I didn't mean to imply that. It's of course totally fine and worth it to continue development on Django but always within a reasonable scope. It doesn't make sense to turn it into something completely different.   IMO, the difference between ""Nope"" and ""I disagree"" is that ""Nope"" implies you believe that you have the technical authority/cachet for the audience to interpret your word as pretty close to truth.   I agree with this except the part about ""authority/cachet"". I don't need to be an authority in the field to be ""more right"". And in this particular case I think I am right. If I'm not anyone is free to call me an idiot, I'd deserve it and could handle it."
django,39sglo,dAnjou,1 point,Mon Jun 15 11:43:07 2015 UTC,"I don't necessarily agree. The web application is not always the core component of a system.   It doesn't matter if it's the core component. The point of the framework is still to make integration of common components easy.   It doesn't make sense to turn it into something completely different.   I agree that ""turning it into something completely different"" would probably be a bad idea, but I don't agree that making it easy to integrate web sockets or some such would put it in danger of that.   It doesn't make sense to turn it into something completely different.   I don't mean to say that you need authority to discuss/make an argument. I'm saying to say ""Nope"" before making your argument without sounding like an asshole to a large portion of your audience you do."
django,39sglo,catskul,-1,Mon Jun 15 14:01:54 2015 UTC,"I am getting the sense that the most important take of this isn't the suggestions, but the fact that django community seems reluctant to change that are pragmatic.   I imagine for the vast majority of django users, I don't think the user think of it as what django ""should be"", but more what it can do and how easy it is to achieve that.  This is what made me learn Django/Python over (at the time) sexier Ruby on Rails. It was supposed to be perfectionism with a deadline i.e. a strike a good balance."
django,39sglo,awesomo4x1000,3,Sun Jun 14 18:56:09 2015 UTC,"I am getting the sense that the most important take of this isn't the suggestions, but the fact that django community seems reluctant to change that are pragmatic   That's an odd conclusion."
django,39sglo,pemboa,-1,Sun Jun 14 19:22:30 2015 UTC,"But in every real project you'll have a frontend guy, right?    Define ""real""."
django,39sglo,pemboa,11,Sun Jun 14 19:25:00 2015 UTC,"Real (adjective): Being or occurring in fact or actuality; having verifiable existence:  real objects; a real illness.   Real (adjective): True and actual; not imaginary, alleged, or ideal:  real people, not ghosts; a film based on real life.   Real (adjective): Of or founded on practical matters and concerns:  a recent graduate experiencing the real world for the first time.     I am a bot. If there are any issues, please contact my [master]. Want to learn how to use me? [Read this post]."
django,39sglo,Define_It,5,Sun Jun 14 19:25:15 2015 UTC,Who's a good bot? You're a good bot!
django,39sglo,Rubykuby,1 point,Mon Jun 15 08:14:32 2015 UTC,I'm gonna go with the third definition of /u/Define_It :)
django,39sglo,dAnjou,2,Mon Jun 15 11:31:19 2015 UTC,I wouldn't consult with that guy...
django,39sglo,andrey_shipilov,2,Mon Jun 15 02:34:02 2015 UTC,"Maybe I'm missing something, but for the server push segment he says the only solution is to build something from scratch. But aren't there existing solutions that allow you to combine Django with WebSockets libraries like Twisted?"
django,39sglo,rspeed,4,Sun Jun 14 11:27:25 2015 UTC,"Yep, a real nice library is SwampDragon. It's a nice combination of tornado, redis for message queue (iirc) and Django."
django,39sglo,xBBTx,1 point,Sun Jun 14 13:38:46 2015 UTC,"While I haven't had first-hand experience with SwampDragon, I tend to agree. You should always use the right tool for the right job."
django,39sglo,xBBTx,0,Sun Jun 14 18:09:16 2015 UTC,"They're kind of weird right? In your wrapper, you create a fake request, pass it to a view, take the return and strip out the junk and send that back through the socket."
django,39sglo,Whoopska,-6,Sun Jun 14 21:18:45 2015 UTC,"I'd give this list of things that need to be improved/fixed:   settings.py - shouldn't ever have been actual django code. should be an actual config or set of config files (preferably yaml). ORM - should be more 'pythonic'. could also do with stronger typing. Should be more decoupled from the framework. Using it outside of django should be trivial. Class based views - IMHO these were just a bad idea. Method based views make more sense and are cleaner. Admin framework should use bootstrap already, by default.   Some packages should also have their features rolled into core - pipeline and crispy forms, for instance.  Still my favorite framework.  I really don't agree with much of the stuff he says, though. Tightly coupling a bunch of javascript crap to a server side framework isn't going to help any. Server-push stuff should be made possible by making it possible to call django from other servers."
django,39sglo,pydry,11,Sun Jun 14 12:30:17 2015 UTC,"Funny. I completely disagree with all your suggestions. Except maybe bootstrap for the admin, couldn't care less about this, though, it's so easy to achieve anyways."
django,39sglo,mbrochh,4,Sun Jun 14 11:35:32 2015 UTC,"Not sure I'd personally want to see bootstrap in the admin.  What I definitely would like is a more modern admin which doesn't look like it's 10 years old. I hope that the new ""flat"" theme will make it into 1.9, and that the core developers don't just sit on the pull request and defer any conversation to the mailing list."
django,39sglo,phil_py,1 point,Sun Jun 14 12:07:51 2015 UTC,What's wrong with wanting to use Django's ORM outside of Django? Totally reasonable.
django,39sglo,kraml,1 point,Sun Jun 14 14:01:49 2015 UTC,"I've only used Linq and SQLAlchemy, so maybe you know better ones, but the django ORM is my favourite. I'd use it everywhere if I could."
django,39sglo,TankorSmash,6,Sun Jun 14 19:08:03 2015 UTC,"Crispy forms should not be in core at all, form styling/markup is something that belongs in templates."
django,39sglo,xBBTx,4,Sun Jun 14 16:44:39 2015 UTC,"I think Django form handling needs improvements.  The current choices inside Django itself are to use form.as_p(), form.as_table(), form.as_ul(), or to go and manually do something weird inside Django templates - the last option being something I strongly dislike doing as you end up repeating yourself too much.  Do I use crispy? Yes. Do I think it's the answer which should land in Django core? I'm not so sure."
django,39sglo,phil_py,1 point,Sun Jun 14 13:36:17 2015 UTC,"Crispy doesn't really do the styling. It mainly just adds the right classes - something that django forms has always done.  If you don't use it, you'll find your django apps will probably end up being not very DRY."
django,39sglo,pydry,3,Sun Jun 14 13:52:44 2015 UTC,"It's still markup that belongs in the template. I'm also against the as_p, as_table... methods, so there's that. Personally I use django-sniplates, the successor to formulation which does some introspection on the forms and allows you to define a 'library' of widgets."
django,39sglo,xBBTx,6,Sun Jun 14 13:49:37 2015 UTC,"Class based views save a lot of code sometimes, but as soon as you're doing anything non-trivial you have to hack them to make them work. So I guess I half agree."
django,39sglo,1234applepi,4,Sun Jun 14 15:59:27 2015 UTC,I you confusing the CBVs with the generic CBVs provided by Django?
django,39sglo,pemboa,3,Sun Jun 14 13:48:52 2015 UTC,"Heh. I have a really complex django app and we cut down the number of lines of code in our views (and complexity) considerably after we started building on both vanilla generic views and django-extra-views.  Although I did end up having to spend a lot of time with the django source code for CBVs to really ""get"" how things work and what needs to be overwritten where."
django,39sglo,Nick4753,-1,Sun Jun 14 19:24:24 2015 UTC,"I've seen some impressive ways in which they saved code as well, but generally I've managed to figure out an equivalent way of doing the same thing with decorators and a method. That usually also ended up being cleaner and more readable in the end.  Seen some nasty CBVs in my time, too."
django,39sglo,pydry,2,Sun Jun 14 18:53:57 2015 UTC,Django still totally supports functional views. They are not considered deprecated and CBVs are not considered default. Neither is default. They are both tools in the bag.
django,39sglo,radicalbiscuit,2,Sun Jun 14 14:28:38 2015 UTC,"Please don't make any of these changes to Django, except maybe the Bootstrap admin, but I rarely use the admin."
django,39sglo,pemboa,2,Mon Jun 15 00:58:49 2015 UTC,"I disagree with settings, I don't see any advantages of using yaml, ini or whatever, python is easy enough to read and it allows you to create more dynamic settings if you need to"
django,39sglo,Brandhor,2,Sun Jun 14 19:23:23 2015 UTC,"I disagree with settings, I don't see any advantages of using yaml   The main advantage is that you won't get odd or difficult to debug behavior caused by one setting overwriting another, and you can guarantee that you won't get different behavior by re-ordering the settings.  An additional benefit would be that you could treat settings as just a dict, which can be passed around more easily than the settings file.  The computer-sciencey rationale is this: https://en.wikipedia.org/wiki/Rule_of_least_power"
django,39sglo,pydry,2,Sun Jun 14 13:24:14 2015 UTC,Modules are just as easy to pass around as dicts in python.
django,39sglo,jcdyer3,3,Sun Jun 14 13:34:00 2015 UTC,I've been using the framework for a long time and have never encountered difficult to debug issues in settings (supporting multiple deployments).  I'd have to agree that settings are fine as they are.
django,39t8vk,llII,7,Sun Jun 14 15:32:38 2015 UTC,"The example for now in 1.8 looks interesting:  {% now ""Y"" as current_year %} {% blocktrans %}Copyright {{ current_year }}{% endblocktrans %}   so  {% now ""Y"" as current_year %} {% url some.route year=current_year %}   might work?"
django,39t8vk,shobble,1 point,Sun Jun 14 18:38:46 2015 UTC,"I have tested it, and it worked for me. I like 1.8 a lot."
django,39t8vk,super_cool_kid,1 point,Sun Jun 14 21:52:43 2015 UTC,"Wow, thanks, that looks good! I'm still using 1.7, so I haven't seen it in the docs.  I guess now it's time to upgrade to 1.8."
django,39t8vk,andrey_shipilov,1 point,Mon Jun 15 06:45:54 2015 UTC,Do not put logic into templates. Get a reversed URL in the view and pass it to the context.
django,39t8vk,shobble,4,Mon Jun 15 02:41:49 2015 UTC,"It's not really logic, and I disagree that you should be constructing URLs in your view if they can be handled by the {% url %} tag in the general case.   The url tag is self-documenting and makes it clear what you're rendering there in the template. Otherwise you need some sort of context naming conventions and have to go somewhere else to look up what that thing actually is. If you have conditionals rendered in your template {% if ... %} and {% for %}, etc, then you either end up duplicating the logic in the view and template, or potentially resolving unnecessary urls.   There's definitely a level of complexity beyond which data structures should be prebuilt in the view and just walked over, but completely forbidding logic in the templates seems masochistic."
django,39t8vk,andrey_shipilov,0,Mon Jun 15 02:58:56 2015 UTC,Models for data. Views for logic. Templates for rendering. I don't see any masochism here tbh.
django,39t8vk,shobble,1 point,Mon Jun 15 04:39:14 2015 UTC,"So, would you go as far as something like:  views.py:  def someview(request, ...)     ...     ctx = {         'show_user_profile': request.auth.user.is_authenticated(),         'user_profile_url': reverse('user-profile',                                       kwargs={'user': request.auth.user})     }     return render('blah.html', ctx)   blah.html:  {% if show_user_profile %} <a href=""{{ user_profile_url }}"">Your Profile</a> {% endif %}   In fact, that still has logic in there! So do you build the whole inner link tag in the view and store it in a context var, or sully your logic-free code with an {% if %} block? Taken to the (il)logical extreme, you end up with something like Mustache/Handlebars.js.    Alternatively, in just blah.html:  {% if user.is_authenticated %} <a href=""{% url 'user-profile' user=user %}"">Profile</a> {% endif %}   And has the further bonus that it's view-agnostic. If you're rendering a template or snippet from multiple views, you don't need to go through that context setup in each view.  Or what about a paginator that could be just:  {% for entry in pagelist %} <a href=""{% url ""list-thingie-page"" page=entry %}>{{entry}}</a> {% endfor %}`   Is that really worse than:  ctx ={ 'pagelist': [(reverse('list-thingie-page', kwargs={'page':p}), p) for p in pagelist }  ....  {% for entry in pagelist %} <a href=""{{ entry.0 }}"">{{entry.1}}</a> {% endfor %}   Do you have any particular reasons for your approach that can be pointed to? Maybe testing, or caching (I know very little about the caching subsystems, so I suppose it's possible), or some other form of reusability I'm not seeing? More code in more places doesn't seem like a design win to me.  I'm happy to be wrong if i learn something, but you're not making much of a case for your side."
django,39t8vk,andrey_shipilov,1 point,Mon Jun 15 10:05:29 2015 UTC,"No of course no. You have is_authenticated on the User object and profile_url should be a models.permalink decorator on presumably Profile object. And entry should have get_absolute_url too of course. All the business logic should be done in the Views. You're talking about a bunch of if/else statements that you obviously need to have in templates.  Good example would be going to a hospital taking the bus 2HO, leaving at the stop 418, and when asked for the medical care number giving them 31415926535. Instead of going from home, calling back home via the phone ""which bus do I need to take"", taking the bus then calling again ""so which stop do I need"", then going to hospital and staring into the nurse's eyes when someone dictates you a number over the phone, you write it down and here her say ""I only need it IF you have it now"".  So answering your question, no I wouldn't do what you proposed, cause logic should be separated from the rendering. And this is a bad example tbh."
django,39t8vk,xBBTx,1 point,Mon Jun 15 11:03:53 2015 UTC,"models.permalink might be removed at any time, it's been removed from the docs since there was a bunch of discussion because it returned a different time than a 'vanilla' get_absolute_url. You shouldn't be using this anymore."
django,39t8vk,andrey_shipilov,1 point,Wed Jun 17 21:36:20 2015 UTC,And URL tag syntax never changed right? :)
django,39t8vk,xBBTx,1 point,Wed Jun 17 23:33:35 2015 UTC,Luckily I've only had to go through that only once. I had already forgotten about it
django,39t8vk,andytuba,5,Thu Jun 18 12:53:10 2015 UTC,"Some alternatives: a url route without the year that 302s to the url with the current year, or make the year optional and default the year parameter in your view to the current year (potentially via a decorator)."
django,39t8vk,awsomntbiker,2,Sun Jun 14 17:49:05 2015 UTC,{% now 'Y' %} will return the current year in a template
django,39t8vk,super_cool_kid,1 point,Sun Jun 14 16:09:45 2015 UTC,The thing is that I want to use the year in an url and not just in the template.
django,39t8vk,super_cool_kid,1 point,Sun Jun 14 16:28:10 2015 UTC,{% url 'named url' year=now|date: Y %}  If that doesn't work you can use pythons time package.  Timezone holds current date stuff.
django,39t8vk,shobble,1 point,Sun Jun 14 15:36:20 2015 UTC,"Thanks, but unfortunately you example doesn't work."
django,39t8vk,super_cool_kid,2,Sun Jun 14 16:04:15 2015 UTC,I don't {% now %} very often. Sorry for the miss info. Add to imports in your view from datetime import datetime Try this. In your view. Context['year']= datetime.now().year  Then your url {% url 'calendar_app' year=year %}
django,39vv69,djangonewbie1,3,Mon Jun 15 05:38:48 2015 UTC,"This is not relevant to django, but what you're describing sounds like a timeline. This stackoverflow thread has a good example that might be useful: http://stackoverflow.com/questions/21916615/horizontal-timeline-in-pure-css"
django,39vv69,arctic_feather,2,Mon Jun 15 06:22:45 2015 UTC,"This doesn't have anything to do with Django, you're rather talking about frontend coding. I'm not sure if you'll get a lot of help here, try StackOverflow"
django,39tqcx,vm_linuz,2,Sun Jun 14 18:09:14 2015 UTC,try to reinstall django maybe it got corrupted
django,39tqcx,Brandhor,1 point,Sun Jun 14 18:26:34 2015 UTC,"Nope, didn't change a thing."
django,39tqcx,Citrauq,1 point,Sun Jun 14 18:58:22 2015 UTC,Are you sure you're using the right version of python? I'm thinking you might have installed using pip for python 2 and then tried to run with python 3 and picked up a different django install. (or vice versa)
django,39tqcx,OseOseOse,1 point,Sun Jun 14 20:35:47 2015 UTC,"Ah, here we are: when I use ./manage.py --version, I get 1.5.11. When I use the same command in a virtualenv project, I get 1.8.2. What's the deal? It should never have gotten 1.5.11, this is a 4 week old install, and I've only ever used the pip default, which should be 1.8.2....       When I run: sudo pip uninstall django==1.5.11 I get: Uninstalling Django-1.8.2 ..........?"
django,39tqcx,timworx,1 point,Sun Jun 14 20:58:30 2015 UTC,"sudo happens outside of the virtualenv. So if you sudo-installed something it is in the global packages, but when you use pip list freeze without sudo you get the local packages."
django,39tqcx,digitalice,1 point,Sun Jun 14 21:10:55 2015 UTC,"Yeah, but here I want it to be global, because I've somehow ended up with a global django version of 1.5.11."
django,39tqcx,Citrauq,1 point,Sun Jun 14 21:14:16 2015 UTC,Did you previously have it installed? There's a chance you installed it previously but not through pip.   I had this issue previously and resolved it by deleting the old one and symlinking.
django,39tqcx,digitalice,2,Sun Jun 14 21:52:47 2015 UTC,"Yup, dnf removed it, and now we're good!"
django,39tqcx,dAnjou,-1,Mon Jun 15 00:49:35 2015 UTC,"Hello, are you running virtualenv? That doen't look like Django 1.8. Run ""sudo pip install django==1.8.2"" Pay attention, it might show you a warning saying that you should delete a previous version by had (rm -rf) and then re-install it."
django,39tqcx,itsallfoodage,5,Sun Jun 14 19:06:36 2015 UTC,"I'm not sure if you intended to suggest this, but using sudo in a virtualenv should be unnecessary and I think could break things."
django,39tqcx,dAnjou,2,Sun Jun 14 19:24:15 2015 UTC,"Well, the virtualenv was just a question."
django,39tqcx,itsallfoodage,2,Sun Jun 14 19:58:11 2015 UTC,Never use sudo with pip! PyPI is not a trustworthy source!
django,39tqcx,mfcovington,1 point,Sun Jun 14 20:21:23 2015 UTC,"When you use sudo, it installs on OS level and not in the virtualenv. sudo pip will invoke the system's pip package and not the virtualenv setuptools."
django,39tqcx,adamrt,1 point,Mon Jun 15 00:19:46 2015 UTC,I know how this works. I've been using Linux as my primary OS for years as well as Python.  The point is that anyone can upload anything to PyPI and you'll install it with root permission. A malicious or compromised package could wipe out your entire system.
django,39tqcx,dAnjou,2,Mon Jun 15 11:27:53 2015 UTC,I just saw the username. I've spoken to you on IRC many times ☺
django,39tqcx,mfcovington,-2,Tue Jun 16 04:42:43 2015 UTC,"Sometimes it asks for it... should I default to not using it, and then use it if I know the package and it asks?"
django,39tqcx,mfcovington,3,Sun Jun 14 21:02:19 2015 UTC,It shouldn't ask for it if you are in a venv though.
django,39tqcx,Bolderthegreat,3,Sun Jun 14 22:27:42 2015 UTC,you shouldn't need it for using it inside a virtualenv
django,39tqcx,mbrochh,1 point,Sun Jun 14 22:35:09 2015 UTC,PyPI packages should never ask for root permissions.
django,39tqcx,kevin____,0,Mon Jun 15 11:29:47 2015 UTC,"In the virtual environments it works, but when I want to quickly create a test project to dink with something before I try it in a real project, it's nice not to have to mess with virtual environments.   $ sudo pip install django==1.8.2 Collecting django==1.8.2   Using cached Django-1.8.2-py2.py3-none-any.whl Installing collected packages: django Successfully installed django-1.8.2       The point of using a virtualenv is to prevent conflicts with the system, but I'm not seeing a conflict with the listed packages."
django,39tqcx,Citrauq,4,Sun Jun 14 19:28:56 2015 UTC,What do you mean 'in a real project'? I use virtual environments for dev and production and everything works great.
django,39tqcx,itsallfoodage,1 point,Sun Jun 14 19:46:12 2015 UTC,Poor use of words. I just mean a project that I'm going to use. (Which I do put into virtualenvs)
django,39tqcx,DasIch,3,Sun Jun 14 20:53:29 2015 UTC,"So why would you ever use sudo pip install django, etc.? And what do you mean 'nice not to have to mess with virtual environments'? Unless you have some real reason, my view is that you shouldn't be doing anything outside of a virtual environment. I'd bet that the problem you are having is due to messing around with the system's (or some other global installation of) python."
django,39tqcx,Ibuildwebstuff,3,Sun Jun 14 22:30:20 2015 UTC,I agree. Virtual environments are so easy to create and use there's no reason you shouldn't be using one. They generally save you more headaches than they can cause.
django,39s2rh,ThrowawayTartan,1 point,Sun Jun 14 05:16:30 2015 UTC,What's your folder structure look like? If Django can't find your modified template file it will automatically pull the default one.   Your modified base_site.html should be in   \project_root\templates\admin\base_site.html
django,39s2rh,porksmash,1 point,Sun Jun 14 05:37:39 2015 UTC,whoops I didn't put it into an admin folder. Thank you very much!
django,39s2rh,maximinus-thrax,1 point,Sun Jun 14 14:31:45 2015 UTC,"Not exactly to answer your question, but to change the admin site header, it's better to do this:  from django.contrib import admin admin.site.site_header = 'The text you want'   In the settings.py file"
django,39pjjn,philgyford,4,Sat Jun 13 14:32:17 2015 UTC,"The typical way of doing this is to include a test or example project in your app repo which you can use to showcase and pilot functionality. This would be in the repo but excluded from the package.  As for tests, if the functionality of your app requires a functional Django project then you can test against the test/example app or use a separate test running script which includes baseline project settings. This method does not necessitate using a test project in order to run your unit tests. I've done this myself based on what other people have done. This again presumes you need a Django project to test. If your Django app doesn't include models or references to Django settings you can sometimes get away with just using the unittest module and eschewing Django scaffolding entirely.  Other than this, look at what other people have done. Find packages you really like and look at what other prolific developers do. Django Packages and GitHub will be your friends here."
django,39pjjn,bennylope,1 point,Sat Jun 13 15:25:41 2015 UTC,"Thanks for the pointers; I hadn't noticed that way of using a test running script before. Do you know an example of the first way, including an example project?"
django,39pjjn,bennylope,1 point,Sat Jun 13 15:41:58 2015 UTC,I set up the tests like that originally in Django Organizations - here's an older release showing this. The runtests.sh script just enters the example project and runs the tests from there.
django,39pjjn,bennylope,2,Sat Jun 13 15:45:37 2015 UTC,"Thanks. It seems that every single project I look at does this stuff in a different way! It's great that there's so much flexibility, but sometimes I wish there was One Standard (and well-documented) Way to do things - it'd be much easier to figure out :)"
django,39pjjn,RalphMacchio,1 point,Sat Jun 13 17:34:53 2015 UTC,"I'm probably being dumb, but... your example app's settings.py has ""organizations"" in its INSTALLED_APPS. But if I do similar and then do the equivalent of $ ./example/manage.py runserver then it understandably complains that it doesn't know where that module is. What am I missing?"
django,39pjjn,megadeth9999,2,Sat Jun 13 18:06:10 2015 UTC,"Probably running python setup.py develop first, so that the package is installed."
django,39poyn,aledista,3,Sat Jun 13 15:25:04 2015 UTC,needs more Darcula.
django,39q9lm,Glueon,2,Sat Jun 13 18:27:34 2015 UTC,"I use the second approach, for example:  var url = ""{% url 'urlpattern_name' 123 %}"".replace('123', $('#myinput').val());   The first approach is OK if you are just appending the primary keys to partial URLs. But if you have URLs where the primary key is in the middle (for example ""/api/foo/123/delete/""), then you would need to duplicate the URL reversing in Django and javascript, and keep both in sync. Replacing a fixed pk in javascript adjusts automatically to these.  Of course, a bit of care is needed to replace the right part in case numbers might appear in multiple places in the URL, either as other parameters or just fixed text."
django,39q9lm,lehmakook,1 point,Sun Jun 14 09:53:14 2015 UTC,"First question: how is the primary key of the object determined in JavaScript code and not the database? MongoDB?  Regardless, it sounds like the base question is how to render dynamic URLs in JavaScript without direct recourse to reverse. Options include hardcoding known portion of the URL in your JS and appending primary keys, rendering the known portion of the URL in a data attribute in the Django template and having the JS fetch that to append the primary key (my preferred method), and creating a separate endpoint (view) just for querying dynamic URLs, say by posting URL names and arguments (see this package). And, yes, replacing hardcoded URL parameters with JavaScript variables.  If, however, the primary keys are generated by the database - which is the most typical pattern I've encountered - then that means you can get data from the Django app, and if that's the case you should be able to provide the object's absolute URL in the same context that's providing the primary key. E.g. if your app is returning JSON with {'pk': obj.pk} then just add the URL, {'pk': obj.pk, 'url': obj.get_absolute_url()} or what have you."
django,39q9lm,bennylope,1 point,Sat Jun 13 19:51:18 2015 UTC,I do not quite understand your suggestion. As I have pointed out in the answer bellow I have page with an input where user types in an pk which is then going to be delete for example.  This pk appears in the URL. I can't move it to the POST data because I use https://github.com/yceruto/django-ajax library which sends ajax requests to the page which is specified in the href tag without any additional data. Also it's quite handy that I do not need to validate pk in my view.
django,39q9lm,bennylope,1 point,Sat Jun 13 23:20:12 2015 UTC,"My suggestion was based on a partial explanation of what your app does. If the functionality here is just a user entering a primary key and then the JavaScript requesting a URL based on that primary key, the simplest thing would be to hard code the relative URL into your JS, e.g. /something/, and append the primary key in the JS. It's the least elegant of the options, but it's also the simplest, and unless this is a big project with several developers split into backend and front-end teams, it should work fine.   Also it's quite handy that I do not need to validate pk in my view.   This I don't understand. I suspect it's unrelated to the question at hand, but it scares me."
django,39q9lm,Skiba_,1 point,Sun Jun 14 00:00:09 2015 UTC,"This I don't understand. I suspect it's unrelated to the question at hand, but it scares me.   If you have a url pattern /blabla/(?<pk>\d+) you are guaranteed to have a number in a pk variable in your view. If I use a post request and add pk to it's body, then in request.POST['pk'] should be validated.   to hard code the relative URL   To me it's the worst solution. If we are on the hardcoding rode then hardcoding pk value is way better."
django,39q9lm,mobredu,1 point,Sun Jun 14 11:09:00 2015 UTC,"If you're getting the PK back in your javascript somehow, perhaps by the result of a get/post, then why not also return the url as /u/bennylope suggests?  Also, i'm not sure how you are reversing the url at a point where the pk is not known. The template is rendered server-side. You cannot do a reverse once the page is already loaded."
django,39kyqu,djangonewbie1,3,Fri Jun 12 13:31:30 2015 UTC,"To answer your main question,    Is it possible to have a field in the manufacturer model that serves as a set of arbitrary size containing arbitrary elements?   Yes, you could use an ArrayField and just list individual cars by name in a single database column. Of course you will be limited to just the name of each car.  To answer your first, about toyota.car_set.all() that will query the database as expected for the set of cars matching the toyota manufacturer instance. I'd just do this, myself."
django,39kyqu,bennylope,1 point,Fri Jun 12 13:58:22 2015 UTC,Why would you pick that method - for the sake of simplicity?  Wouldn't it be an unnecessary overhead if we are dealing with an extremely large database of cars (among which the relevant subset is small) and also we want to query manufacturer.car_set very frequently?
django,39kyqu,metaphorm,2,Fri Jun 12 14:13:17 2015 UTC,"sounds like you're prematurely optimizing. this query isn't actually all the expensive. django's orm will just run a simple select with a where clause on it, its not going to tax performance on any normal sized database (note that normal size extends up to millions of rows).   i would recommend that if you have concerns about performance, first and foremost profile and measure your code's performance and so you will know with certainty if your concerns are justified or not."
django,39kyqu,bennylope,1 point,Fri Jun 12 18:35:41 2015 UTC,"Two reasons. One, all things being equal I'd prefer the data model of having a manufacturer table and a car table.   Secondly, the manufacture.car_set.all() should just be running a query like SELECT * FROM cars WHERE cars.manufacture_id = <id-of-current-manufacturer-instance>. But again, that's an all things being equal assessment. If you're not going to have too many cars per manufacturer and you'll never need more data about a car other than its name, an array field will fit the bill just fine."
django,39kyqu,shazammerbammer,1 point,Fri Jun 12 14:24:37 2015 UTC,Thanks for your insights!
django,39kyqu,nm1000,2,Fri Jun 12 15:01:03 2015 UTC,"The ArrayField is also only supported on Postgres, so if you want to use another DB or deploy your stuff onto something easier to set up, like SQLite, you're SOL.  If you never want to do anything with cars except know the title and the make, you could also just one one model that has the make and model as fields. You generally want to use more models (ie end up with a more ""normalized"" database) if you are going to do more complicated things with those items. IE if you want to have a 'car-part' table that is many-to-many with cars, then you'd absolutely want a car model.  It sounds like you might be starting off on this stuff. I'd recommend going and reading a bit more about how the models turn into DB tables and what some of the ramifications are."
django,39kyqu,OMGRussians,3,Fri Jun 12 15:10:14 2015 UTC,"""Would the system have to go through all cars and select the ones that have toyota as its manufacturer, or is this car_set already prepared?""  Typically yes [1]. However relational database systems were designed to handle this situation; and they handle it very well. Storing the models in an array is unnecessary and violates time tested database design. Don't do it unless you have an extremely good reason. Read about database normalization. Note, you don't need to be an expert at database normalization, but understanding the basics will improve your database designs.  ""an extremely large database of cars""  Every car in the world is a large (but not extremely large) database. Every model of car is a small database.  [1] There are ways to mitigate this for complex queries in large databases. But you don't have that problem."
django,39kyqu,tarbooosh,2,Fri Jun 12 15:27:55 2015 UTC,"Django automatically creates an index in the database for ForeignKey fields. What this means is that the database is essentially storing your ""set"" internally, and so the toyota.car_set.all() call is just about as fast (probably faster, though I didn't actually check) to storing them as a serialized array. Databases are designed for this sort of thing. Don't make your life more difficult by trying to over-optimize!  Edit: If you really want to store them as a serialized array, you can use an ArrayField with Postgres, or try something like the jsonfield plugin, which stores it as a json object in a varchar field. The latter approach should work with any database."
django,39nmta,SidShanker,1 point,Sat Jun 13 01:14:39 2015 UTC,Except for Two Scoops Django 1.8. all those books are old. Why link to old books when there are new ones?
django,39nmta,sriramracer,1 point,Mon Jun 15 06:33:01 2015 UTC,Do you have a list?
django,39nmta,silverpendulum,1 point,Wed Jun 17 01:03:22 2015 UTC,I do. I'll clean it up and list it tomorrow.
django,39nmta,pydanny,1 point,Thu Jun 18 17:01:01 2015 UTC,"Here is our comprehensive list of current, deprecated, and outdated Django books.   Yes! Here is our comprehensive list of current, deprecated, and outdated Django books."
django,39nmta,pydanny,1 point,Fri Jun 19 17:00:20 2015 UTC,There are not much books on newer Django versions. Most books by professionals are on older versions and those older versions are still used heavily in the web industry. As these books are old one can read these books and apply the updates from the official documentation. I hope those older books will be released with updated editions with current popular Django version.
django,39nmta,pydanny,1 point,Wed Jun 17 01:39:41 2015 UTC,"There are not much books on newer Django versions   I completely and totally disagree.   There are a plethora of new Django books. We are actually in a 'golden age' of current and up-to-date Django books. I suspect you have your incorrect impression because discovering Django books is hard. Here is why:   Searches on Amazon for Django are choked with returns that include Django Unchained and Django Rheinhardt. Unlike Rails and some other tools, the Django Project site doesn't list Django books.   Fortunately, I have a personal list that I'll publish tomorrow. :-)"
django,39nmta,pydanny,1 point,Thu Jun 18 17:03:40 2015 UTC,Thanks for that. i'll be waiting for the updated list.
django,39nmta,pydanny,1 point,Fri Jun 19 03:49:38 2015 UTC,"Done! Here is our comprehensive list of current, deprecated, and outdated Django books."
django,39gkqm,mfcovington,2,Thu Jun 11 16:04:10 2015 UTC,If you've got a finite set of tags I wrote a helper for visually managing tags on taggit tagged items that has proven quite helpful for content editors.
django,39gkqm,bennylope,2,Thu Jun 11 20:48:08 2015 UTC,Cool. Thanks. I'll check it out. You should submit a pull request to the django-taggit docs to get it listed in the 'External Applications' section: https://github.com/alex/django-taggit/blob/develop/docs/external_apps.txt
django,39fzgc,jordanpwalsh,10,Thu Jun 11 13:46:06 2015 UTC,I did this for one site once. / served the django app and /blog served the Wordpress site. That's configured at nginx/apache level.
django,39fzgc,_eka_,1 point,Thu Jun 11 14:02:35 2015 UTC,ditto
django,39fzgc,saturdayplace,1 point,Thu Jun 11 20:09:50 2015 UTC,Same.  Added some Ajax apis to serve up cart info for display outside of djangoland.  Should be pretty straight forward for you.
django,39fzgc,zettabyte,1 point,Thu Jun 11 23:16:30 2015 UTC,"Pretty much what I'm looking for except / will be Wordpress and the Django app will live elsewhere, probably a subdomain."
django,39fzgc,SirNarwhal,4,Fri Jun 12 04:14:17 2015 UTC,"You can run them side by side, and, you can actually technically run WordPress on a Django backend (kind of), but in all honesty, I wouldn't recommend it. I'd suggest doing what /u/_eka_ did or your other option is: build a CMS in Django be it on your own via modifying Django Admin or use something like djangocms/Mezzanine.  It really all depends on what exactly they'll need on that front end that will dictate which route to take and if the front end will need to ever be driven from the same database as the app or not."
django,39fzgc,SirNarwhal,1 point,Thu Jun 11 18:17:28 2015 UTC,"From the dev side I'd prefer to have just one system. A friend designed a nice Wordpress landing page (for free), so I want to give it a go. The Django app itself is quite busy - around 500 req/s during business hours, so I'm also a bit leery of having Wordpress installed along side. Adding more machines is becoming necessary, but we're not in the financial situation to do that quite yet."
django,39fzgc,SirNarwhal,4,Thu Jun 11 18:42:50 2015 UTC,"You do know you can just copy landing pages from WordPress into a Django template relatively easily, right? It's all just HTML/CSS/Javascript in the end."
django,39fzgc,SirNarwhal,1 point,Thu Jun 11 18:59:33 2015 UTC,"Yes, but my main goal here is to hand it off to my non-technical partner."
django,39fzgc,Brachamul,3,Thu Jun 11 21:05:59 2015 UTC,"Right, but you've still been incredibly vague as to what you're actually trying to accomplish here. There's numerous solutions, but again, each one hinges on the project you're actually trying to complete."
django,39fzgc,itsallfoodage,1 point,Thu Jun 11 21:10:39 2015 UTC,"Sorry about that - I didn't mean to come across as vague.   The application is targeted at k-12 teachers, which means it needs pretty significant resources for around 6 hours per day and almost none outside of school hours - perfect for cloud servers because the application servers can scale up and down based on load. The actual application is coded using Django. We conducted a private beta test this past semester with several thousand students and teachers with good success.   With a couple of months of usage and feedback behind us, our eye is now on wider usage. To acquire new and support existing customers we need a website which will consist of mostly static content, support documentation, and a blog post here and there. Wordpress seemed like a good fit for this because my co-founder is not technical but will be the one managing this aspect of the company. My goal with Wordpress is get it operational and hand it off to my co-founder to manage long-term.   With that being said: how would you recommend configuring the server(s) to serve both applications? I first thought about having each application server handle both and the load balancer sends requests from either to be handled by a sever in the pool. Meaning each server has both Wordpress and the Django app running. The Django app is already written with this in mind, so it will work across 1-100 servers as needed. But, trying to keep a Wordpress install across servers seems like overkill because it doesn't need near as much scaling as the actual application.  After reading some of the other comments, I tend to agree that the best approach is to have a separate server to handle Wordpress and leave the rest of the application as is.   django_cms and Mezzanine are also viable options, but some internal politics kind of force my hand towards Wordpress."
django,39fzgc,Vitrivius,1 point,Fri Jun 12 04:45:04 2015 UTC,"In all honesty I'd say just go with the standard built in Django admin for that. If you're not doing anything crazy outside of serving static things, the Django admin is just as easy to use as creating a post on WordPress. Yeah, you may have to take a few days to teach him a bit, but on the whole, it'll do what you need it to do.  That said, if you go the WordPress route, have one WordPress install on one server (no need to get crazy with it since it's only serving static stuff) and have it point to a domain on your Django app or be the base and have the Django app point to a domain on it. Either or would work and you'd be serving the Django app at say jordanpwalshcoolsite.com/app whereas the WordPress would be just the root.  I've actually seen some crazy projects out there where it's WordPress running directly on a Django backend, but support will be awful (you have to wait for the third party stuff to update and would have security holes potentially) and it's just all around finicky. I'd say just go for the Django admin though and if there's anything extra you need to add to it, you can modify the admin incredibly easily."
django,39fzgc,pemboa,2,Fri Jun 12 04:52:30 2015 UTC,Wouldn't using something like Mezzanine make it easier for you?
django,39fzgc,HittingSmoke,1 point,Thu Jun 11 14:31:22 2015 UTC,Or django-cms
django,39fzgc,J0emv,1 point,Mon Jun 15 00:27:15 2015 UTC,"I have a webserver with several low traffic web sites. Some are django/postgresql and others are wordpress/mysql.   I would configure nginx to serve example.com/wp/ to the wordpress site, and example.com/ to django."
django,39fzgc,crccheck,1 point,Thu Jun 11 17:27:27 2015 UTC,"Easily, just setup Django with a WSGI server and Wordpress on Apache, and put Nginx in-front of them both."
django,39fzgc,rackmountrambo,1 point,Thu Jun 11 18:22:26 2015 UTC,"You can serve both PHP and Django via uWSGI. It's a little harder to set up mostly because it's much more powerful and has less community documentation than the common alternatives, but it's what I use because it's so powerful and versatile."
django,39fzgc,bennylope,1 point,Thu Jun 11 22:57:39 2015 UTC,"I'm doing this with my startup.  I'm using digitalocean currently although will probably switch to aws at launch.  I have a separate droplet for wp and configured my DNS to serve www.mydomain.io to the wp droplet while *.mydomain.io points to my app droplet.  It's a multitenant saas app so this works.  I did not want to run wp on the same sever as my app, sounded like too much of a pain."
django,39fzgc,spookylukey,1 point,Fri Jun 12 00:51:30 2015 UTC,Thanks - this is almost exactly how I think I'll end up doing it. I'm already spending a decent amount on infrastructure - I started on Digital Ocean but moved to Linode. One more server shouldn't break the bank.
django,39gwlm,DuyBach,1 point,Thu Jun 11 17:14:37 2015 UTC,"Presumably no_photo.jpg is a static asset, so I'd prefer not to refer to static (version controlled assets) in a space for user uploaded data.  My preference in such a case is to make the field nullable and use a separate function to conditionally display either the user's photo or the default holder. A model property could do this, or a template filter.  If you really want to do it this way, then the form class or model's save method are good candidates for places to add this functionality, setting the field's value to no_photo.jpg if the field is otherwise empty."
django,39gwlm,bennylope,1 point,Fri Jun 12 18:12:19 2015 UTC,Alright thanks. Added a function to my model which is returning the image URL. If image is null it's returning the no photo else it's return the normal URL.
django,39gpw8,misterte,3,Thu Jun 11 16:35:00 2015 UTC,"Step one, put everything on GitHub.  We can't really even have a conversation about it until we can look at what you have so far.  Step two, read up on python packaging. There a half dozen ways to make a python package, and lots of out of date materials.  Use the linked guide, it will save you a LOT of trouble.  Step three, ensure you have clean separation of the django app/middleware from the rest of your django project.  Step four, choose a license.  GPL is easy, but will preclude some folks from using your software for commercial reasons (I say meh free software for free software)."
django,39gpw8,isforinsects,1 point,Thu Jun 11 16:49:52 2015 UTC,"Ok, I'll get started with step 1. Don't know if I can follow all steps right away. I'll update the post later. Thanks."
django,39gpw8,dAnjou,2,Thu Jun 11 19:07:21 2015 UTC,Move step 4 all the way up and do it first. Use BSD or MIT.
django,39gpw8,pydanny,2,Thu Jun 11 23:03:19 2015 UTC,+1. Don't use GPL unless you understand how OS licensing works.
django,39gpw8,mrjmad,1 point,Thu Jun 11 23:39:58 2015 UTC,"your github is public ? Choose a license, include this in repository and give the github url here.   Now a good Samaritan can help you .. (if a good Samaritan goes through here )"
django,39gpw8,caffodian,1 point,Thu Jun 11 21:47:07 2015 UTC,Not yet. Will do that this weekend. I'll post the link here. Thanks.
django,39gpw8,rhgrant10,3,Fri Jun 12 04:05:09 2015 UTC,"It's actually surprisingly simple (the docs can be weird at times though.)  There are also a few cookiecutter templates for python / django packages as well, they might be a good start if you don't have too much existing project structure"
django,39gavp,raymestalez,2,Thu Jun 11 15:05:33 2015 UTC,"There are definitely companies out there who would be willing to sponsor a visa, but due to the added burden (both administrative & financial) you have to give them a reason. My concern, based on your description here is that you're not currently working as developer. (And please let me know if I'm misreading).  If I were you, my plan would be to do as much Django work as possible in the interim. Then, upon emigrating, do whatever is necessary to find the right potential employer, even if it means putting in unpaid (since I assume you won't be legal to work) time to prove your worth.  You'll need to choose the people with whom you get involved very carefully, since there will be plenty who see you as exploitable due to your situation. If you really bring value to the table though, there are definitely good people out there who will recognize that and want it enough to sponsor you. Django is a high-demand skill if you're capable."
django,39gavp,AlexFromOmaha,1 point,Thu Jun 11 15:28:04 2015 UTC,"Thank you very much for your reply!     Yes, you are right, I'm not currently working as a full time developer, I am focused on learning and building my portfolio(and freelancing). Unfortunately I don't have a documented work experience, also my degree is in a field not related to CS(I'm self taught), so that is bad. On the upside I don't think I would have a problem proving my skill. I'm hoping that a great portfolio with several awesome open source projects in it would be enough of a reason to hire me. Do you think that is realistic?     I have absolutely no problem doing whatever it takes to prove my worth. I have some money, which would enable me to work for free for a while. I really don't care about making a lot of money, if I could work with Django and live in a safe country - that's all I need to be happy =)     I know that I can work a lot, be competent, and bring a lot of value.  My biggest concern was that Django wouldn't be unique/high-leverage enough skill for companies to sponsor my visa, but your post is really encouraging.  Now the biggest challenge is to figure out how to navigate the logistics."
django,39ckni,SchoolVsWork,4,Wed Jun 10 21:18:07 2015 UTC,"To get python version:  python -V   On my machine this outputs:  Python 3.4.3   Other variations:  python3 -V python3.4 -V python2 -V python2.7 -V   On Windows there's usually only python, but you can alias other versions. Linux usually has all the available versions as commands."
django,39ckni,Airith,2,Thu Jun 11 02:02:34 2015 UTC,"From ""python -V"" i get ""2.7.6"" and from ""python3 -V"" i get ""3.4.0"". I'm trying to run ""python manage.py shell"" but with version 3.4.0.  I get this error:  Traceback (most recent call last):     File ""manage.py"", line 8, in <module>       from django.core.management import execute_from_command_line ImportError: No module named 'django'"
django,39ckni,Airith,2,Fri Jun 12 01:27:42 2015 UTC,You have to install Django for each Python version you have. I generally use pip to install packages.  pip install django   You can install a Python 3 version of pip and call it like so:  pip3 install django   You can use the following to start your django project shell in Python 3:  python3 manage.py shell
django,39ckni,kennethlove,3,Fri Jun 12 02:02:32 2015 UTC,Usually you'll run python3 instead of python when you start a command to make sure it's Python 3.
django,39ckni,kennethlove,1 point,Wed Jun 10 23:02:05 2015 UTC,"I'm trying to run ""python manage.py shell"" but with version 3.4.0.  I get this error:  Traceback (most recent call last):     File ""manage.py"", line 8, in <module>       from django.core.management import execute_from_command_line ImportError: No module named 'django'  PS: This DOES work with just running ""python manage.py shell"" But that brings the 2.7.X prompt. So i tried ""python3 manage.py shell"" to bring the 3.X prompt....but i get that error."
django,39ckni,CasualBeer,1 point,Fri Jun 12 01:29:32 2015 UTC,"So you probably don't have Django installed in Python 3, then. pip3 install django and try the python3 manage.py again?"
django,39ckni,memilanuk,1 point,Sat Jun 13 23:51:51 2015 UTC,"I run both , Python 27 and 34 on my machine.   You can always force version from your command line:  py -3  py -2  e.g. py -3 my_python_script.py"
django,39aggd,philippeowagner,3,Wed Jun 10 12:28:32 2015 UTC,"I am using django-hijack on a project with hundreds of users, wonderful tool for support. Thank you!"
django,39aggd,benzinonapoloni,1 point,Wed Jun 10 17:27:23 2015 UTC,I've been using https://bitbucket.org/petersanchez/django-impersonate and like it as well.
django,39c64v,RjakActual,1 point,Wed Jun 10 19:49:29 2015 UTC,"Ok after struggling with this for several hours, I figured out the problem.  BTW this is an EC2 instance of Ubuntu 14.04.  That error message is misleading. The problem is that I built a custom installation of Python 2.7.10 without having previously installed libbz2-dev. So the steps to fix this were:   sudo apt-get libbz2-dev cd /<untarred python source dir> ./configure --prefix=<my install path> --enable-ipv6 make make install   With this done, I can now create virtual environments and pip install Twisted."
django,399vh7,rainbowgarden,1 point,Wed Jun 10 08:20:36 2015 UTC,Is this supposed to be like Rosetta Code?
django,39bi9o,tuyguntn,2,Wed Jun 10 17:15:34 2015 UTC,It's hard to understand what your question is. Can you boil it down even more?
django,39bi9o,TankorSmash,0,Thu Jun 11 03:39:43 2015 UTC,"Which part would you like to know more?  Basically, I am trying to build apps without recursive dependencies, E.g. Navigation, it has Product categories and Dashboard for registered user, which means navigation should be above all other apps, when clicked category (also different app. category, size, color, dimension, brand models are there), I should show products related to category, this would be inside Products app, but then I cannot show Top products, because Top products belong to Analytics, and also I cannot show Dashboard, because Dashboard belongs to Analytics, Products is below Analytics app, because Analytics depends on Products, not vice versa, this kind of problems arose, thats is why I want to know how would you architecture this kind of projects, Thanks!"
django,39bi9o,tallerholler,2,Thu Jun 11 13:58:38 2015 UTC,"It seems like you are having some trouble deciding how to separate your subapps within your main django project? If that is the case, there isn't a necessarily right or wrong answer but rather you can try group like things as best as possible.   Django promotes the concept of loosely coupled subapps that are DRY etc but often times in real life you will have dependencies between one, many, or all of the subapps. There is nothing wrong with this.  There are ways you can try to limit recursive imports and I suggest you look that up for python but for instance when working with django  models, rather than doing ""from subappA.models import Foo"", you can do ""from django.db.models import get_model"" and then ""Foo = get_model('subappB', 'foo')"" etc.  Also, if things are very heavily intertwined then you may want to look at the data-structures and how you've architected things. You may want to pull things back into one common subapp vs a bunch of smaller ones that are tightly coupled.  Not sure if that is your original problem but you can let me know if you want to know more"
django,39bi9o,pemboa,0,Fri Jun 12 00:32:45 2015 UTC,can anyone help to resolve the problem?
django,39b6jx,megadeth9999,1 point,Wed Jun 10 15:56:26 2015 UTC,You can't just give the agents cookies from authenticated sessions?  Are the agents selenium instances (driving firefox)?
django,39b6jx,elbiot,1 point,Wed Jun 10 16:43:30 2015 UTC,"Yes, I can give them cookies and that's what I am planning to do.  The deal is, I don't want to get throught the whole authentication process from the browser. I want to create a pre-authenticated session in my test and pass that session ID to the browser (selenium+splinter), so it will be sent as a cookie."
django,39b6jx,elbiot,1 point,Wed Jun 10 19:19:14 2015 UTC,Can't you generate 1000 cookies and hand them out to agents as needed?  Maybe that's your question.  You could have a separate requests process just generating and saving cookies.  Right?
django,396xap,hagsteel,1 point,Tue Jun 9 18:16:56 2015 UTC,"I would go with a sensible default option, but make it easy for someone to disable that if they don't want to use it, and to write their own. If enough people want an alternative, you can then include that in your django project as an option.  For example, when I have javascript which relies on third-party code like jquery, I include a version of jquery so it works straight out of the box, but with a django setting to easily disable jquery if they are already using it in their site. If they want to replace my jquery-dependent javascript, they can go a bit deeper and make their own base template, and replace the default script block with their own.  As I say though, I'd try to keep all supported front-end versions in one repository though, stored in separate static/template dirs, perhaps controlled by a django setting - keeps it simple to install and configure for people who don't want too much faff, and when you update your django code you'll probably want to test all javascript variants too anyway."
django,396xap,radiacnet,1 point,Wed Jun 10 16:21:27 2015 UTC,"It seems like the right thing to do is keep the core js and the template js separate.  If it's a package that is used a lot and people want to build it into their own framework they can do so by simply referencing core in their own custom javascript template library.  Hopefully this would then be shared on Github (and / or as an NPM).  So if I wrote the templates in React, someone who wants to use Angular can simply grab the core and build an Angular version on top of this (and possibly share this in a separate repository).  Hopefully the next person who battles with this dilemma will find this useful (or will contribute with additional ideas)."
django,394kmi,aledista,2,Tue Jun 9 05:28:56 2015 UTC,"My first thought is that for testing (well, simulating actually) this kind of behaviour, I'd rather put some sort proxy in front of my API than modify the actual code to be able to perform 'badly'."
django,394kmi,TBNL,3,Tue Jun 9 07:35:04 2015 UTC,"I think the README wasn't clear but if you didn't want to modify your main API code, you could do the following in your tests:  from project.views import MyAPIView  class MyTestApiView(MyAPIView):     @chaos(rate=0.5)     def get(self, request):         return super(MyTestApiView, self).get(request)   And test that instead of MyApiView.   But you're right, I can't think of any cases where you might want to do that instead of using a proxy in the middle (maybe testing other middlewares?)."
django,394kmi,squiffs,1 point,Tue Jun 9 10:58:40 2015 UTC,What type of proxy are you referring to? I mean in which context would you use it? I really appreciate your feedback. Thanks
django,394kmi,TBNL,1 point,Tue Jun 9 18:30:13 2015 UTC,"I was assuming situation where you would test how applications would handle a 'chaotic api'.   Using something like nodejs http-proxy, it's pretty easy to place a latency/error introducing proxy between an api and an application under test.  Taking the latency example as a starting point one could introduce random chaos like error http status codes, error html instead of json etc. etc."
django,392adr,YouAreSalty,9,Mon Jun 8 19:03:15 2015 UTC,"Both Heroku and Amazon Beanstalk support Python 3. They are also easy to get started.  I am using Python 3 with Django. Previously I used Ansible to automate my setup, but am looking to use Amazon Beanstalk now. I've started using Docker Compose for dev env, which works pretty well. There is no reason to use Python 2 at this point unless you have specific dependencies that aren't ported to Python 3 yet."
django,392adr,red_tar,2,Mon Jun 8 19:23:08 2015 UTC,"Ansible itself requires Python 2 on the target machine. Not a huge deal, but it can be mildly annoying."
django,392adr,yen223,1 point,Tue Jun 9 00:20:01 2015 UTC,"Half of the linux distros also require python 2.  IIRC, only CentOS really makes it difficult to install both, side by side."
django,392adr,pydry,1 point,Tue Jun 9 05:17:41 2015 UTC,CentOS   CentOS sucks for Python. Debian better.
django,392adr,sriramracer,1 point,Wed Jun 10 00:04:15 2015 UTC,"I don't know about beanstalk or docker, but is that something you use in addition to AWS or Heroku?"
django,392adr,red_tar,1 point,Tue Jun 9 16:49:46 2015 UTC,"Docker is a tool you can use to run server processes. https://docs.docker.com/  Amazon Beanstalk is a deployment automation service, very much like Heroku. It is part of the suite of services that are together called AWS. http://aws.amazon.com/elasticbeanstalk/  Since you are a beginner, I would recommend using Heroku. It is very easy to host a simple Django app. https://devcenter.heroku.com/articles/getting-started-with-django"
django,392adr,rnevius,4,Mon Jun 15 17:29:06 2015 UTC,It's all I use at this point.
django,392adr,spookyrufus,6,Mon Jun 8 19:34:40 2015 UTC,"Python 3.4 + Django 1.8. No problems whatsoever. I deploy to  a private server though, so no insight on any paas. I would totally recommend moving on to Python 3.4. In fact, I find it annoying that so many users are stuck on 2.7."
django,392adr,jimmy_fm,1 point,Tue Jun 9 13:10:23 2015 UTC,Same setup and work like a charm on WebFaction
django,392adr,devbalt,4,Fri Jul 17 06:31:08 2015 UTC,"Python 3 with Django 1.7.  In order to make it work on Heroku, I had to make a little text file, runtime.txt, in the root of the application.  The file contains one line, ""python-3.4.0""  When heroku builds the app and sees that file, it sets the environment to that version of the interpreter and I'm good to go."
django,392adr,devbalt,1 point,Mon Jun 8 19:53:50 2015 UTC,"Thanks. In my quest with google, I think I saw that.  How do you find the performance of Heroku relative to the price?"
django,392adr,red_tar,1 point,Tue Jun 9 16:51:59 2015 UTC,I haven't used it enough to give you a useful answer for that.
django,392adr,pydanny,1 point,Tue Jun 9 18:11:45 2015 UTC,"Let me rephrase then, what sort of site do you host there and for what cost? Any performance issues?  :D"
django,392adr,Citrauq,1 point,Tue Jun 9 19:27:16 2015 UTC,"Performance sucks in Heroku. And that shitty performance costs a lot too! The only reason to keep using Heroku is if it would cost more using anything else, i.e. the extra cost associated with manually doing all things Heroku automates for you."
django,392adr,_RacecaRacecaR_,4,Mon Jun 15 17:31:37 2015 UTC,"It seems that MySQL in Python 3 isn't well supported anywhere. There is a Python adaptor, but unless you are running PyPy, that won't have the same performance as a C adapter.  Back when I still did consulting, this was one of my arguments for clients to use PostgreSQL. ;)"
django,392adr,a5myth,3,Mon Jun 8 22:00:42 2015 UTC,I use python 3 with Django at work. I think we generally do the server setup ourselves. I think it's been ready to use in production since Django 1.6 if all external dependencies have also been ready. I'm not sure if my company ever had a 1.5 site live.
django,392adr,panchipandol,3,Mon Jun 8 23:55:55 2015 UTC,I use Linode VPS running Ubuntu 14.04. A VPS is my favorite way to roll for web hosting these days. Python 3 is so much better than 2 in so many small ways.
django,392adr,pydanny,1 point,Mon Jun 8 22:16:34 2015 UTC,"Same here, Linode is ideal as you aren't tied to any particular distro or any particular version of anything, I use Debian 8 (encrypted setup), nginx, postresql 9.4, django 1.8 and python 3.4 (all in a venv for easy upgrades later). Linode's support is first class BTW."
django,392adr,adamrt,3,Mon Jun 8 23:08:30 2015 UTC,I use Django 1.7 and Python3 in DigitalOcean.  Webfaction also has support for python3. The only problem i found with the update to python 3 is that a lot of packages has no support yet so you must look for other options.
django,392adr,pydanny,1 point,Wed Jun 17 06:38:20 2015 UTC,How did you configure Python 3 with Digital Ocean?  It is certainly not standard.
django,392adr,adamrt,5,Tue Jun 9 10:42:30 2015 UTC,"Yes. For the kind of higher level work I do with Django, Python 3 makes unicode much easier. we've considered migrating https://www.djangopackages.com to Python 3, but that probably won't happen until after we upgrade from Django 1.7 to Django 1.8."
django,392adr,ctolsen,10,Tue Jun 9 16:55:01 2015 UTC,Hey Danny! Big fan. Love 2Scoops. This isnt really the time or place but is there a reason you guys do the grids on dpackages with the packages on the X axis? Seems like thats much less scaleable as more packages are added. Just and observation that always made me curious.  Keep up the good work!
django,392adr,sebasmagri,3,Mon Jun 8 19:28:44 2015 UTC,"Hi /u/Adamrt! Glad you like Two Scoops of Django! :-)  As for the grid issue, originally we came up with that design back in the madness of the 2010 Django Dash. Afterwards we worked hard to switch the axis just like you suggested. In fact, you can see it now:   https://www.djangopackages.com/grids/g/blogs/ (standard) https://www.djangopackages.com/grids/g/blogs/landscape/    When you look at the landscape grid you'll instantly understand why we reverted back to the old system. We didn't at first, but lots of people complained. It came down to a matter of usability. While in theory the packages on the Y axis make sense, in practice they do not. We were as surprised as anyone else.  When we find the free time work to do serious open source again, we plan to use APIv3 to generate new representations of grids. That would mean transforming https://www.djangopackages.com/api/v3/grids/blogs/ into something lovely using fancy new front-end tools that have emerged in the recent past."
django,392adr,sebasmagri,3,Mon Jun 8 19:36:44 2015 UTC,"Well that certainly makes sense. I pulled the table in emacs and tried to even clean it up, but even at its most minimal, its still harder to get an overview in the landscape view.  Thanks for taking the time to respond!"
django,392adr,kennethlove,2,Mon Jun 8 22:05:40 2015 UTC,"Unless any of your dependencies don't support Python 3, which is a group getting pretty small at this point for a lot of use, there is no reason why you shouldn't use Python 3 for everything you do.  Also, from a higher level view, Python 2's end of life is in 2020. That means your software written in Python 2.x has a lifetime of only five years at this point.  Use Python 3 if you can."
django,392adr,kennethlove,2,Mon Jun 8 22:50:22 2015 UTC,"I've been using Python 3 with Django for a while now. For hosting I've used OpenShift, it provides Python 3 support without hacks."
django,392adr,kennethlove,1 point,Tue Jun 9 08:39:05 2015 UTC,How did you find the setup process for OpenShift?  I kind of avoided them despite them having great prices due to lack of tutorials and information in general to get up and running with them.
django,392adr,mundomuerto,1 point,Tue Jun 9 12:22:55 2015 UTC,It's actually pretty easy from my POV. If you like CLI the rhc tool allows you to handle all the small details while the web console allows you to manage the high level stuff.
django,392adr,CleverEagle,1 point,Tue Jun 9 16:57:22 2015 UTC,Thanks!  I will look into it.
django,392adr,jlorencetti,2,Tue Jun 9 17:26:10 2015 UTC,"I haven't deployed a Django app on Python 3 yet (haven't been doing development for the last year), but I just did an entire course at Treehouse over Django 1.8 using Python 3. Also we've been testing django-braces against Python 3 for the last 2+ years. With very few exceptions, you'll be fine on Python 3."
django,392adr,jlorencetti,2,Tue Jun 9 19:27:50 2015 UTC,"This is an aside, but how was the Treehouse courses?  Was it a good django course?   Did you try their pro plan? Was any of the extras worth it?"
django,392adr,jlorencetti,1 point,Tue Jun 9 16:54:53 2015 UTC,"Well, a few things.   I'm the teacher, so I think the course is great ;) But it isn't actually out yet, so I can't judge 100%. The pro plan is pretty cool if you want to watch a bunch of design conferences and such, but if you're not interested in that, just go Basic http://teamtreehouse.com/hello will get you a free month trial"
django,392adr,enesimo,1 point,Tue Jun 9 19:37:08 2015 UTC,lol!  Thanks for the link. I look forward to seeing the class. Is there only one class planned for django right now?
django,392adr,toyg,1 point,Wed Jun 10 00:21:25 2015 UTC,"One from me soon, one from a guest in the next few months, followed by another from me. I release about one course per month and I'm covering the entirety of Python, Flask, and Django all by myself so there will probably be a month or two gap between Django courses for awhile. Plenty of time to practice on your own!"
django,392adr,toyg,2,Wed Jun 10 04:21:02 2015 UTC,"Python 3.4 and Django 1.8 on Dreamhost  Wasn't exactly ""easy"" but thanks to ssh access on their accounts it did work. I followed their wiki instructions for installing a custom Python installation,  used pip to grab latest django version, and then configured project to use passenger. Works fine, just don't overlook the mention of 'pkill python' in the docs; kept wondering why things weren't updating until I added that to the end of my deployment script.  They also have an easy install script but the version of Django it installs is old (1.4, I think) so I didn't bother trying it."
django,392adr,teilo,2,Wed Jun 10 18:47:06 2015 UTC,"I use dreamhost. Although they use Python 2.7 by default, I was able to download and install python 3 in a virtualenv.  I wrote a blog post a while back to document the process."
django,392adr,J0emv,2,Tue Jun 9 21:02:16 2015 UTC,"I'm using Django 1.7.x and Python 3. I'm using Digital Ocean, very good stuff.  You can also try PythonAnywhere: https://www.pythonanywhere.com/ There's a recent resource they implemented to facilitate the use of Virtualenvs.  Referral link for Digital Ocean: https://www.digitalocean.com/?refcode=9125da8d6399 You will get some credit using this link, and me too. :P"
django,392adr,J0emv,2,Tue Jun 9 23:00:18 2015 UTC,"How do you use Python 3 with Digital Ocean?  How do you find the performance relative to price?   I really like DO because of the prices, but not sure about the ease of use as I want it as click-and-go as much as possible.  If I decide to use DO, I will certainly use that link to give you $25 instead of a coupon! :)"
django,392adr,colly_wolly,1 point,Mon Jun 8 19:28:17 2015 UTC,"How do you use Python 3 with Digital Ocean?   It's just Ubuntu, so you can install anything you want, I use the 3.4.0 version on Ubuntu 14.04 LTS (You can use a more recent version or pick some other distribution). I also use PostgreSQL, nginx, uwsgi and Monit. I also use a headless Dropbox daemon to backup some stuff. I also use virtualenvs to make it easier to isolate the packages. It's my first ""real"" Python/Django/Web project I'm really happy with the stack. Plus, there's a lot of content and tutorials there, good stuff. :)   How do you find the performance relative to price?   My website is really small, and I have everything in the same server, but I think the performance is really great. I wouldn't change it for other provider at the moment. I use a U$ 5 droplet.   I really like DO because of the prices, but not sure about the ease of use as I want it as click-and-go as much as possible.   They have an 'one-click install' feature, if I'm correct, it setup Django, Postgres, nginx and gunicorn.   If I decide to use DO, I will certainly use that link to give you $25 instead of a coupon! :)   Thanks! As I'm running a non-profit website this credit is much appreciated. :)"
django,392adr,marcelosias,1 point,Tue Jun 9 16:53:42 2015 UTC,"It's just Ubuntu, so you can install anything you want, I use the 3.4.0 version on Ubuntu 14.04 LTS (You can use a more recent version or pick some other distribution). I also use PostgreSQL, nginx, uwsgi and Monit. I also use a headless Dropbox daemon to backup some stuff. I also use virtualenvs to make it easier to isolate the packages. It's my first ""real"" Python/Django/Web project I'm really happy with the stack. Plus, there's a lot of content and tutorials there, good stuff. :)   It sounds to me like there is a lot of configuration involved?  I have done these before, but it is just a major pain and something I would not rather deal with rather than build something for the website."
django,390bnt,bykof,2,Mon Jun 8 09:05:27 2015 UTC,"If you're in Berlin we can go grab a beer together. My english is not ideal, but good enough to chat about webdev, i guess. I'm not too thrilled about a skype conversation, though... Sorry."
django,390bnt,GinxXing,2,Mon Jun 8 16:15:23 2015 UTC,"Hey I'd be happy to talk about it. I'm a novice with python and just started learning django, I'm not sure what your skill level is but if you think its a match I'd be happy to Skype or gchat."
django,390bnt,iefox,1 point,Mon Jun 8 17:48:54 2015 UTC,i wrote you an private message :) I am developing django for two years now and python for about 3 years. So I think I can show you some cool features in Django!
django,390bnt,youlleatitandlikeit,1 point,Mon Jun 8 18:35:35 2015 UTC,"I personally can't do this (no time as a full-time worker with a full-time job, three year old, and an old house that needs constant attention) but as someone who has done this in the past, this can be very rewarding and I highly recommend that if people do have free time they consider doing this.  bykof, you might also offer an exchange, spending some time speaking German so that others can learn your language."
django,390bnt,raydlor,1 point,Mon Jun 8 15:48:27 2015 UTC,Sure! I would do that. Its very sad that this is such a bug community but nobody wants to talk about it in real or lets say in a digital face to face :)
django,391a0c,dsizemore,2,Mon Jun 8 14:55:50 2015 UTC,its probably line 39; there's no forward slash between <username> and the other ones.  I'd remove that line and see if things start working
django,391a0c,max_renlo,1 point,Mon Jun 8 15:47:55 2015 UTC,"Hmm... well, when I remove that line I get:  NoReverseMatch at /password/reset/ Reverse for 'profile_section' with arguments '(u'deronsizemore', u'notifications')' and keyword arguments '{}' not found. 0 pattern(s) tried: []   That line is also pointed at accounts.urls, not userena.urls which shouldn't make a difference I don't think? The /password/reset/ would be in the userena.urls. Also, since url(r'', include('userena.urls')), is above that line you mentioned, it should hit that first, correct? Which wouldn't even get down to line 39?"
django,390k3o,SebCorbin,2,Mon Jun 8 10:53:48 2015 UTC,"For the different WorksiteActor subclasses, you will need to move the worksite field to the subclass, so that you can define a different related_name for each one of them.  An alternative is that you put the field onto WorkSite - for OneToOne fields you can choose where you put them. You will get different database schema - it depends on which queries you are likely to want to do. Actually, I would have guessed that a single Architect/Client etc. could be associated with multiple WorkSites, in which case you shouldn't have a worksite OneToOne on the Architect, but an architect FK on the WorkSite.  Tip: the related name of a 'many' relationship (ForeignKey or ManyToMany) should be a plural. e.g. ClientAssistant.worksite should have related_name=""assistants"". If you do this, you will end up with code like worksite.assistants.all() which is less confusing than worksite.assistant.all()"
django,390k3o,spookylukey,1 point,Mon Jun 8 16:10:16 2015 UTC,I was actually taking the problem the wrong way !  I've just heard about Generic relations for my checkboxes :) https://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/#generic-relations
django,38wm51,arctic_feather,2,Sun Jun 7 13:26:02 2015 UTC,"The parent object must exist first before you can add the objects for a ManyToMany field. So even with get_or_create, you have to add your venues after you have your object."
django,38wm51,fizzgorilla,2,Sun Jun 7 13:43:24 2015 UTC,So I can't use get_or_create? Should I just check if the instance is there using get() and exists() and then get or create based on the result?
django,38wm51,fizzgorilla,2,Sun Jun 7 13:54:06 2015 UTC,"You can use get_or_create for your Event object.  You just can't pass venues in your defaults dictionary because that is used in the ""create"" case and you cannot set venues until your object is created.  So in your case, you could do something like this:  event, created = Event.objects.get_or_create(date=validated_data[""date""], venue__in=venues) if created:     event.venue.add(*venues)"
django,38wm51,fizzgorilla,1 point,Sun Jun 7 14:02:26 2015 UTC,"Thanks, the create is working now, but if the record is already in the database I get a MultipleObjectsReturned error.  This is my get_or_create:  event, created = Event.objects.get_or_create(date=validated_data[""date""], venue__in=venues, defaults={""event_name"":validated_data[""event_name""]})   When there is no matching record in the database, it adds it fine.  But when it does exists it says there are 2 records. (I tried a filter and the two records returned are the same identical record, with same pk).  Is this because I passed it a list of 2 venues for the venue field?  EDIT: Sending it three venues results in 3 events being returned, so that seems to be my problem. How can I stop it returning multiples of the same event?"
django,38wm51,itsallfoodage,1 point,Mon Jun 8 01:29:01 2015 UTC,"The get_or_create can only work with one object at a time, which is why you're getting the exception.  If I understand your original post correctly, what you're attempting to do is check if any venue in your list of venues has an even scheduled at it on the given date. If none of the venues have anything on that date, you want to add the event to those venues.  If that understanding is correct, then using get_or_create may not be what you're looking to use for this. The first thing to keep in mind is that get_or_create is only meant to be a shorthand for the following:  try:     obj = Person.objects.get(first_name='John', last_name='Lennon') except Person.DoesNotExist:     obj = Person(first_name='John', last_name='Lennon', birthday=date(1940, 10, 9))     obj.save()   Source: https://docs.djangoproject.com/en/1.8/ref/models/querysets/#get-or-create  So doing the longhand is not necessarily wrong, it's just usually frowned upon if you do this over and over again. That said, I don't think your use case fits this boilerplate code. What you're really looking to do is this:  num_events = Event.objects.count(date=validated_data[""date""], venue__in=venues) if num_events == 0:     event = Event(name="""", date="""")     event.save()     event.venue.add(venues) else:     raise VenuesAlreadyBookedError()   The reason I think the above is what you're looking for and not get_or_create is because you can have a different event at each of the venues in your list which will return you more than one Event object, which cannot be handled by get_or_create.  Hope that helps!"
django,38wm51,xBBTx,2,Mon Jun 8 21:04:03 2015 UTC,"I know this is a little off topic, but you shouldn't be using null=True on CharFields and TextFields. Just blank=True will suffice.  https://docs.djangoproject.com/en/1.8/ref/models/fields/#null"
django,38vezy,Stopmakingascene,3,Sun Jun 7 04:00:19 2015 UTC,"I am also working on an e-commerce site. We chose to build atop Django Oscar which has been quite useful. It sounds like you want an auction system, not necessarily a plain e-commerce system. I would search for existing apps that deal with auctions."
django,38vezy,ccb621,1 point,Sun Jun 7 04:49:46 2015 UTC,"thanks so much!!  sort of, i am more so interested in being able to apply a customized way of which a price is determined. is it possible to do that with Django Oscar?"
django,38vezy,grepawk,2,Sun Jun 7 05:37:45 2015 UTC,"Yes, it is. Oscar uses a strategy class to determine product availability and pricing, making it easy to customize how products are priced. Given a product, the strategy is responsible for, among other things, selecting a ""pricing policy,"" a simple class with several properties whose job is to contain all price (and tax) information about the product."
django,38twsx,Nicksil,3,Sat Jun 6 20:01:13 2015 UTC,"create_user is just a little utility. If you look around the django source, you'll find that it isn't used anywhere. Take a look at UserCreationForm in contrib/auth/forms.py and you'll see that they just call .set_password on the user that is created. What I would probably recommend doing is  class WorkerCreateView(UserCreationForm):     template_name_suffix = '_create_form'     success_url = reverse_lazy('workers:list')"
django,38twsx,Whoopska,1 point,Sat Jun 6 20:27:54 2015 UTC,"Hey, thanks a lot for taking the time to help me out.  I first tried to subclass UserCreationForm instead of CreateView, but it threw an exception as UserCreationForm apparently has no as_view method.  After that, I instead assigned UserCreationForm to the form_class attribute. That rendered a sign-up form, but doesn't plug-in to the custom user auth (it's probably possible, I just didn't give it much time)  Instead, I went with your excellent advice that create_user is just a utility and what I was really missing was the set_password method. This is what I ended up with:  class WorkerCreateView(CreateView):     model = Worker     fields = ('email', 'password', 'role')     template_name_suffix = '_create_form'     success_url = reverse_lazy('workers:list')      def form_valid(self, form):         self.object = form.save(commit=False)         self.object.set_password(form.cleaned_data['password'])         self.object.save()         return HttpResponseRedirect(self.get_success_url())   If you can correct me with a better way of doing things, I'm all ears. For now, though, thanks again!"
django,38twsx,Whoopska,1 point,Sun Jun 7 00:02:54 2015 UTC,My bad! What you have is perfectly fine.
django,38t21c,Taikal,4,Sat Jun 6 16:00:39 2015 UTC,"As others have said, Django 1.8.2 will be almost identical to 1.8.3. But to build the docs yourself:   download 1.8.2 tar -xzf Django-1.8.2.tar.gz cd Django-1.8.2/docs pip install --user sphinx --upgrade make epub"
django,38t21c,spookylukey,2,Mon Jun 8 16:36:12 2015 UTC,"The ""development version"" is the codebase currently in the master branch on github, which will become Django 1.9.  The 1.8.x documentation comes from the stable/1.8.x branch on github. Although the head of that branch is technically ""pre-release 1.8.3"", the branch itself is stable in terms of features and actually has been since before 1.8 was released; the only changes which occur are bugfixes. You can verify this yourself by looking at commits to the documentation in that branch.  If you want to guarantee exactly the 1.8.2 documentation as released, though, you can install Sphinx for yourself, do a git checkout of the 1.8.2 release tag, and make epub from inside the docs/ directory."
django,38t21c,ubernostrum,1 point,Sun Jun 7 02:23:40 2015 UTC,"the only changes which occur are bugfixes.    Then I had no reason to worry about minor differences between the documentation and the version that I am using.  Problem solved, thank you."
django,38s8xt,DuyBach,4,Sat Jun 6 10:51:15 2015 UTC,"The object at request.user is not your UserProfile model. Rather, it's Django's default User model. And of course, the default User model didn't come with a desc field. You actually established a one-to-one relationship with the User model inside your UserProfile model.  To access your UserProfile model, you can take advantage of Django's related objects feature.  {{ request.user.userprofile.desc }}  Have fun"
django,38s8xt,_under_,1 point,Sat Jun 6 12:56:41 2015 UTC,thanks for the answer. just found about it. but i think your link is for one-to-many or many-to-many related context.   https://docs.djangoproject.com/en/1.8/topics/db/examples/one_to_one/  this one is for one on one
django,38s8xt,strig,1 point,Sat Jun 6 13:20:30 2015 UTC,"Your user profile model is a separate model, not the user model itself. Its attributes have to be accessed thorough   user.userprofile    You might also want to add a related name to the one to one field."
django,38s8xt,cerealcable,3,Sat Jun 6 16:54:41 2015 UTC,You can also make a different User object that has desc as a field and use that instead of a UserProfile. I'd probably recommend doing that but everyone's situation deems a different use case too!  Just wanted to point out that it exists and you can look into it!
django,38s8xt,rikAtee,2,Sat Jun 6 16:36:04 2015 UTC,the User model is from the contrib.auth module. Is for auth stuff. 'desc' does not feel very related to auth to me. I think a OneToOne is preferable here when it comes to normalisation.
django,38s8xt,cerealcable,1 point,Sun Jun 7 00:18:28 2015 UTC,"Yes the provided User Model does come from contrib.auth, however we are discussing a User Model and 'desc' might make sense for the application. I really can't think of one, I won't defend it, but it's possible.  When overriding the User Model I think it's OK to put profile fields in the User Model instead of having a separate Model. For instance I put timezone in mine. Eliminates the need for a join our additional query during requests.  Though you still deserve an up vote because you aren't wrong and hopefully one thinks a bit before making any field named 'desc' as it can be vague."
django,38r8j9,autorunexe,1 point,Sat Jun 6 03:15:06 2015 UTC,"It would be accessible in the request object:  request.POST.get('office_id', None)   I like the solution you posted better though."
django,38r8j9,Airith,0,Sat Jun 6 08:14:27 2015 UTC,If it's not part of the form then I don't think you will have access to it. I can't see any way to pass that hidden value to the view other than it being part of the form.
django,38r8j9,garfonzo,1 point,Sat Jun 6 04:00:27 2015 UTC,"to it. I can't see any way to pass that hidden value to the view other than it being part of the form.   I actually made a horrible trick inside forms.py  class Meta:     model = Reserve     fields = ['office_id', ...(all my visible values)...]  office_id = forms.IntegerField(widget=forms.HiddenInput)   then inside clean(),  def clean(self):     cleaned_data = super(ReservationForm, self).clean()     office_id = cleaned_data['office_id']     start = cleaned_data['t_start']     end = cleaned_data['t_end']     conflicts = Reserve.objects.filter(                 office_id=office_id,                 t_start__lte=end,                 t_end__gte=start             ).exclude(pk=self.instance.id)     if any(conflicts):         raise forms.ValidationError(""There's conflicts with another reservations between those dates."")      return cleaned_data"
django,38r8j9,_under_,2,Sat Jun 6 04:32:17 2015 UTC,"I don't think this is a ""horrible trick"" at all. You wanted to add another field that was not in your model in the ModelForm, and that's exactly what you did.  Good job!"
django,38q88k,Nicksil,5,Fri Jun 5 22:20:15 2015 UTC,"you can override get_form in your updateview like this  def get_form(self, form_class=None):         form = super(JobUpdateView, self).get_form(form_class)     form.fields[""workers""].queryset = self.request.user.workers.all()     return form   you can also provide a custom form_class and change the queryset in the __init__ method"
django,38q88k,Brandhor,1 point,Fri Jun 5 22:56:58 2015 UTC,"Man, that's perfect!  Just as you posted this, I had figured out a convoluted way using get_form_kwargs and adding a ModelForm with an adjusted __init__ function. I wanted to stay away from adding a ModelForm to see if I can do it through just using the view class. I was just about to suck it up and move on until you came along.  Thanks a lot!"
django,38o3y7,youlleatitandlikeit,4,Fri Jun 5 13:54:54 2015 UTC,"Test Driven Development is less about tests than it is about drive.  TDD is a methodology for the process of creating -- and more importantly -- designing a project. You write tests first because you want to set in stone how your system should function. You cannot write the tests if you don't have a clear picture of how things will work and interact with each other. That's the real point of TDD. Designing  Saying that, lots of people follow TDD. The Django project is one example. Keep in mind, at most what you'll get from reading their source is ""how to write tests"" and not ""how to do TDD"".  Here's a book that I recommend for people who want to learn how to do TDD. It's specifically for Django too! Obeying the Testing Goat"
django,38o3y7,_under_,2,Fri Jun 5 17:08:13 2015 UTC,"I read up to chapter 6 or 7 in that book, and got sideline and plan to return. However, the impression I get is that you write tests to lead to what you want, but the test sometimes evolve i.e. you start with a minimally viable test and evolve the test until it is what you want it to be.   In that sense it seems to me that the test acts more like a guideline than a thought out specification like in waterfall design. Am I wrong?"
django,38o3y7,YouAreSalty,1 point,Mon Jun 8 19:12:01 2015 UTC,You are absolutely right that it acts like a guideline. But the parts that you're developing is in small enough chunks that it's not waterfall. Waterfall means you'll plan the entire project from start to finish before you even start writing anything.
django,38o3y7,_under_,2,Mon Jun 8 23:17:02 2015 UTC,"Hey, I am developing for my company several applications in Django for data analysis and some kind of automation. First we just programm things then we started to write tests and realized which positive impact we get and how stable our systems become. Then we started a new application and first wrote the tests then the application itself. Well... This is much more work but this procedure lets you think about the programm what really happen. In my opinion it is really important to write tests but TDD is too time consuming especially in todays industrial requirements (fast developing, agile methods etc.)"
django,38o3y7,bykof,2,Fri Jun 5 15:25:33 2015 UTC,but TDD is too time consuming especially in todays industrial requirements   This is arguable. Coding w/ tests saves time on QA and leads to code that is much more reliable long term. Changes can be made to the code base with some modicum of certainty that the code still works.
django,38o3y7,shazammerbammer,2,Fri Jun 5 15:37:34 2015 UTC,"Yeah sure, if you have small changes. But if you change a whole class you can write a whole new test. This is time consuming."
django,38o3y7,bykof,1 point,Fri Jun 5 20:40:41 2015 UTC,"Since I've been working on projects that are trying to get as much test coverage as possible, I've never considered writing tests to 'take longer' or be time consuming, but it is a common complaint I hear from people who don't quite get why they're writing tests.  You need to make sure the code you're writing works, doing that with tests just makes that work reproducible and makes it easy to verify that the code works in a constantly changing codebase.  Writing tests for trivial code is equally trivial. It does take some investment in terms of learning to write effective tests and writing code that is easily testable - with django, using dynamic fixtures and mock both make it a lot easier.   Fortunately, writing more testable code generally means that code is better than it would otherwise be.  It also makes fixing bugs often times a lot simpler. Write a test that reproduces the issue and fix it. Done. If you have test coverage, you can be confident that your fix hasn't affected anything else."
django,38o3y7,shazammerbammer,1 point,Fri Jun 5 20:52:01 2015 UTC,I really support your opinion. But what if you are changing structures of your code and your test is not really useful or lets say: successful?  Writing tests is time consuming and there is nothing to discuss about it. On the other side it makes your application save and more maintainable.
django,38o3y7,bykof,3,Fri Jun 5 22:02:34 2015 UTC,"Writing tests is time consuming and there is nothing to discuss about it.   Agreed.  But testing is time-consuming, no matter how you perform it. Test-Driven Development tries to streamline and automate the process."
django,38o3y7,Taikal,2,Sun Jun 7 10:59:20 2015 UTC,"It's not time consuming for me. When i write code, I need to verify that it works or someone else does. The tests do that to a large degree. The time spent is the same. In one case you have a body of tests that you keep, in the other you have a body of tests you do once and throw out.  The time spent is the same.  If i'm changing structures then I now have code that is untested. Verifying that the new code works is still the same amount of work whether I do it manually or do it with tests.   And none of this is taking into account the best part about tests. When your code does break - say in production, you know right off where it isn't broken. Many of the possible cases are already accounted for, making any time spent fixing issues much much less.  there is a learning curve to writing tests and code that is easily testable. And a lot of good tools that make it a lot easier and faster to write and maintain. if you haven't read it, I'd recommend Clean Code by Martin. Here's his site: https://cleancoders.com/"
django,38o3y7,shazammerbammer,2,Fri Jun 5 22:48:20 2015 UTC,Django itself is fairly TDD in that every change is accompanied with appropriate tests - you can check out the recent merged PRs on github to see each patch and any discussion around its testing: https://github.com/django/django/pulls?q=is%3Apr+is%3Aclosed Any bugfixes are especially worth understanding - normally the accompanying test shows the bug when run before the bugfix is applied.
django,38o3y7,adamchainz,1 point,Fri Jun 5 16:50:00 2015 UTC,TDD is a development methodology. I'm not sure it's even possible to tell if a project has been developed using it.  Do you just want to see some large Django projects with tests?
django,38o3y7,pydry,2,Fri Jun 5 14:54:00 2015 UTC,"I imagine some developers might be upfront that they use the methodology when developing, and thus their projects' tests would reflect that.  Django projects with tests would be useful, but I have to imagine that the way the tests are written will look different than they would if they're written after rather than before the coding takes place."
django,38o3y7,pydry,1 point,Fri Jun 5 15:08:06 2015 UTC,I have to imagine that the way the tests are written will look different than they would if they're written after rather than before the coding takes place.   Why?
django,38o3y7,shazammerbammer,1 point,Fri Jun 5 15:12:22 2015 UTC,I think its easy to see projects that aren't developed with TDD.   I'd be curious for people who use TDD methods how much of their projects do they do 100% TDD. I know I tend to do about 50% pure TDD and 50% some kind of hybrid where I'm not too strict about the coding/testing order and such.
django,38o3y7,pydry,1 point,Fri Jun 5 15:02:00 2015 UTC,I think its easy to see projects that aren't developed with TDD.    Sure. They don't have any tests.
django,38o3y7,shazammerbammer,1 point,Fri Jun 5 15:10:07 2015 UTC,"well, you can go back and write tests for code you didn't do with TDD. Those are pretty obvious."
django,38ojrw,jmprobert,2,Fri Jun 5 15:43:17 2015 UTC,"Really good idea, thank you for sharing this :)"
django,38ojrw,eliotberriot,1 point,Fri Jun 5 22:12:40 2015 UTC,You bet!
django,38p683,silverpendulum,3,Fri Jun 5 18:04:55 2015 UTC,If you use the generic delete view you can just link the delete button to that view. The way it works in that case is the GET request loads a confirmation of the delete and the POST will confirm the delete.
django,38p683,HowlingDonkey,1 point,Fri Jun 5 21:20:45 2015 UTC,what stops a user from tampering with a form to create a POST request to confirm a delete that they shouldn't be able to do?
django,38p683,nemmonszz,2,Sat Jun 6 00:03:33 2015 UTC,"https://docs.djangoproject.com/en/1.8/ref/class-based-views/generic-editing/#django.views.generic.edit.DeleteView  The generic delete view is built on the SingleObjectMixin so the view will naturally throw a 404 if they try to delete something that doesn't exist (on the GET request - not 100% sure on the POST but probably also a 404.)  For permissions, you'll have to do the usual overrides to allow who can and cannot delete. You'll also want to probably indicate that on the button in the original form (show it disabled or don't show it at all) as well."
django,38p683,HowlingDonkey,1 point,Sun Jun 7 22:35:11 2015 UTC,You control that in the view. Throw a 404 if you cant find the object
django,38p683,adamrt,2,Sat Jun 6 01:44:25 2015 UTC,Also if they don't have permission to delete that object. Always assume that anything from the client has potentially been tampered with.
django,38p683,spookylukey,1 point,Sat Jun 6 18:30:00 2015 UTC,gotcha. thanks!
django,38p683,nemmonszz,0,Sat Jun 6 18:22:48 2015 UTC,You can (and should) create custom validators to ensure that the data they submit meets your requirements.
django,38p683,nrhinkle,1 point,Sat Jun 6 05:08:04 2015 UTC,"ah, okay. brain fart. thanks!"
django,38p683,nemmonszz,1 point,Sat Jun 6 18:22:38 2015 UTC,"Do you know about Model Forms and Model Formsets? Model Formsets can be passed can_delete=True, adding a delete checkbox similar to that seen in the Admin next to each entry."
django,38p683,nrhinkle,1 point,Fri Jun 5 18:26:34 2015 UTC,"Thanks, took a look at it. Is this how the Admin is implemented? Are Formsets the usual way to display blog posts?"
django,38p683,nrhinkle,0,Tue Jun 9 04:40:30 2015 UTC,"I'm not sure, I haven't dug deeply into the admin code."
django,38j43l,Glueon,3,Thu Jun 4 15:42:58 2015 UTC,"I assume you're trying to run MyModel.objects.filter(emails=['test@test.com']) which I can confirm raises the same error for me.  This looks like either a Django or Psycopg2 bug and I encourage you to report it.  Possible workarounds:   MyModel.objects.filter(emails__contains=['test@test.com']) if you don't mind that there might be other elements in the array. MyModel.objects.filter(emails__contains=['test@test.com'], emails__len=1) if you want results that only have the elements of your list, but don't mind their order. MyModel.objects.filter(emails__0='test1@test.com', email__1='test2@test.com', emails__len=2) if you want results that only have the elements of your list, and want them in a specific order. (note: array comparison in Postgres is order sensitive, so this workaround is closest to how it would work if MyModel.objects.filter(emails=['test@test.com'])had worked as expected)"
django,38j43l,unklphil,1 point,Fri Jun 5 06:36:20 2015 UTC,Posted a bug report
django,38j1go,atteroTheGreatest,1 point,Thu Jun 4 15:26:45 2015 UTC,"Just a nitpick - DRF is not a widely known acronym for a lot of people. Using the acronym is obfuscating what you're writing about. I'd replace it with ""Django Rest Framework"" especially in the title of the article."
django,38j1go,shazammerbammer,1 point,Thu Jun 4 21:33:03 2015 UTC,That makes sense. Thanks for the comment!
django,38j0v3,ggalage,3,Thu Jun 4 15:22:49 2015 UTC,"Why do you need separate models for man, woman and child? i.e. Why not just have a 'person' table?  Even if you want different fields on man, woman and child - you can just leave them as null when they don't apply to that instance.  And if you need it to seem like you have separate models for  any reason - have a single 'real' Person table and then have proxy models for man, woman and child (which can differ in most other ways as long as they share the same db fields)"
django,38j0v3,andybak,4,Thu Jun 4 17:08:42 2015 UTC,Check your gender collumn privilege.   Everyone is a Person with a gender field (nullable Enum because cis-boolean's are repressive).   If you must set generation boundaries you could choose to add a many-2-many relation between Person's.
django,38j0v3,brtt3000,1 point,Thu Jun 4 18:12:22 2015 UTC,FLUSH PRIVILEGES ;
django,38j0v3,megadeth9999,1 point,Mon Jun 8 08:43:40 2015 UTC,"This is how I would make the models:  class Family(models.Model):     #any family field go here.  class Person(models.Model):     GENDER_CHOICES = (         ('M', 'Male'),         ('F', 'Female'),     )     family = models.ForeignKey('Family', related_name=""family_members"")     gender = models.CharField(max_length=1, choices=GENDER_CHOICES)     is_child = models.BooleanField()"
django,38j0v3,kundun,0,Thu Jun 4 22:17:14 2015 UTC,"so I'm still struggling with this.  What would I do if I wanted those Men, Women, Child objects to be very different. For example, Men would be Video object, Women would be Text object, and child would be Music object or something like that..."
django,38j0v3,CraigTorso,1 point,Fri Jun 5 00:50:30 2015 UTC,"there's a database cost to implementing polymorphism in django, whilst that library appears to be hiding some of the real nastiness, I suspect it'll still carry much of that cost.  What you end up with is a multitude of tables, some sharing primary keys and the common information and the rest containing just their relevant class information.  I've done it, and unless you've got a good reason to go down that route, I don't really recommend it, it causes more headaches than it provides neat solutions."
django,38hmen,Flycal6,2,Thu Jun 4 07:15:44 2015 UTC,No reason at all. I recommend you use the 17.0
django,38hmen,willyhakim,1 point,Thu Jun 4 07:26:21 2015 UTC,Awesome.  Thanks for the info.
django,38enrc,khabees_aadmi,6,Wed Jun 3 18:39:28 2015 UTC,"You need to create your own serializers for every model you have, but you can use ModelSerializer to save time and effort, and use it like this:  # models.py class Account(models.Model):     ...  # serializers.py class AccountSerializer(serializers.ModelSerializer): class Meta:     model = Account   Then that's it. It's useful to configure read only fields via the read_only_fields attribute, which you might want to be serialized as read-only but not stored as read-only at the model level. You can also use it to present models in slightly different ways, or use SerializerMethodField to add fields with some logic."
django,38enrc,Aurora0001,3,Wed Jun 3 20:11:23 2015 UTC,"Upvote for ModelSerialzier.  It's also really nice because you can use it to GET with nested fields.  For instance, if you have a model called Book and a model called Author, and Book has a foreign key to Author, you can do something like this to include the Author's Book list in the response:  from rest_framework import serializers  class BookSerializer(serializers.ModelSerializer):     class Meta:         model = Book         fields = ('pk', 'num_pages', 'genre',)     # define some fields here     # ...  class AuthorSerializer(serializers.ModelSerializer)     class Meta:         model = Author         fields = ('name', 'email', 'books',)      books = BookSerializer(many=True, read_only=True)   So when you call AuthorSerializer on the Author's detail, you'll get all of the books that belong to that Author:  {     ""pk"": 1,     ""name"": ""Howard Stern"",     ""books"": [         {             ""pk"": 1,             ""num_pages"": 100,             ""comedy""         },         {             ""pk"": 2,             ""num_pages"": 105,             ""drama""         },         {             ""pk"": 3,             ""num_pages"": 221,             ""autobiography""         },     ] }"
django,38enrc,TheKuchenBurglar,1 point,Wed Jun 3 22:01:30 2015 UTC,Nice. Just one question. Can you also show me how the models of both Book and Author would look like?
django,38enrc,TheKuchenBurglar,1 point,Thu Jun 4 07:59:57 2015 UTC,Pretty much what you would expect.  Book would have a models.ForeignKey reference to Author.
django,38enrc,TheKuchenBurglar,1 point,Fri Jun 5 15:31:23 2015 UTC,"I've found serializers to be useful for a bunch of standard backend operations:   Validation - for instance, if you want to make sure that an attribute of the model instance being created is unique on a subset of other model attributes, or if you want to make sure it fits some sort of regex expression.  This is easier and more flexible than putting in on the model, because you can define serializers for each user role in your application. Error Messages - validators also let you easily define custom error messages when a request fails validation. Data Formatting - serializers provide a standard way to transform data for rendering to users. Field Operations - they also let you define which fields are read-only, which fields are write-only, which ones are required, and lets you specify custom validators for each individual field.   Essentially, it gives you another layer to define more complex rules (for things like permissions, access, etc.) on your objects so that you don't have to clutter your model code with validation logic."
django,38enrc,caffodian,1 point,Wed Jun 3 21:51:14 2015 UTC,"I haven't used it myself, but there appears to be a mongoengine support addon here that provides serializers for mongo docs.  I've never tried MongoEngine, does it still use Django models?  Modelserializer will work for almost any model using the most of the built in fields.  Most custom fields (from other packages) will just work, more complicated fields will require you to write your own serializer.  edit:  went braindead, reversed my link markdown"
django,38enrc,OswaldZeid,1 point,Thu Jun 4 03:18:24 2015 UTC,"MongoEngine was designed to mimic the Django ORM's patterns, but behaves differently enough that django-rest-framework's ModelSerializer isn't able to handle it.   django-rest-framework-mongoengine provides its own DocumentSerializer and field serializers for all the basic MongoEngine fields, and works pretty well for extending drf functionality to work with MongoEngine. The main catch is its approach to serialization isn't careful about MongoEngine's tendency to dereference ReferenceFields automatically, which can cause performance problems with models that use ReferenceFields a lot. On the plus side, it makes it a lot easier to build the serializers for your models, especially if you're using things that Django doesn't have, like EmbeddedDocuments.  Shameless self-promotion: I've been working on a fork of django-rest-framework-mongoengine for a project that involved some complex and very normalized data models. It might be worth a look if OP's data is complicated enough, but there's still some options that haven't been fully implemented - it handles the use-cases we needed, but I haven't been able to polish it up yet. It also does a pretty good job of automatically building the serializer and deriving default settings based on your model, which saves a lot of time if you don't need anything too special."
django,38bxyi,jakewa84,2,Wed Jun 3 05:53:55 2015 UTC,I'm not sure that the Azure support in Django-storages actually works (or has ever worked) as I never got it working either.   Try another library.
django,38bxyi,chronug,1 point,Wed Jun 3 12:37:39 2015 UTC,"I had no luck getting most of the django-storages backends to work reliably, if at all. The only solid backend seems to be Amazon S3. This is a sorry state of affairs, as django-storages is really crucial for scaling out your django application layer if you let users upload media files, as is often the case."
django,38bxyi,olifante,2,Wed Jun 3 15:22:09 2015 UTC,There are some forks/replacements for the S3 part on pypi.
django,38bxyi,brtt3000,1 point,Wed Jun 3 18:17:53 2015 UTC,but why? The Amazon S3 backend was the one that I actually found to work quite well.
django,38bxyi,olifante,1 point,Wed Jun 3 19:47:21 2015 UTC,"check out my site, www.barknights.com the cms images and images in the venues page were upload and hosted via azurestorage backend."
django,38bxyi,pydanny,2,Wed Jun 3 15:57:53 2015 UTC,"update:  I was able to get storages to work with azure, had to apply a fix: https://bitbucket.org/david/django-storages/issue/196/windows-azure-bug-report  I'm able to upload custom models as well as cms plugin files directly to blob.  The problem comes from the Image class, when using the AzureStorage backend, the Image url is always empty and doesn't use MEDIAROOT.  I was able to hack the djangocms_picture app to prepend my blog container before the Image name, which actually worked.  Now I'm having a problem with filer as I don't know where to make these similar changes.  I have a feeling that a custom Image class would work as well but I don't know what that would look like."
django,38ea59,originaljewedlaw,1 point,Wed Jun 3 17:22:55 2015 UTC,"Date/time code is always an ugly hassle and takes disproportionate amount of work compared to most other stuff. Just slog it and do whatever needs to happen; I use isodate, dateutils and pytz packages, plus the Django timezone features (see docs), and some regular python modules. It is terrible.  My recommendation is to always use timezone-aware datetimes and use ISO 8601 format as string (JSON/forms etc). And verify your program reads/writes  the timezone correctly. Django does well but it's easy to mess-up when converting to timestamps (so try not to).  Then just make a helper function? And maybe a Validator if you're into those.  If you use a input widget try to have it output ISO format with timezone, the browser should know it."
django,38ea59,brtt3000,1 point,Wed Jun 3 18:04:26 2015 UTC,Quick example:  from django.http import HttpResponse import simplejson as json import datetime  today = datetime.datetime.today()  return HttpResponse(json.dumps(today.isoformat()))
django,38ea59,WittilyFun,1 point,Wed Jun 3 18:46:04 2015 UTC,"I think the datetime strptime method would work.  https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior  something like:  x=datetime.strptime(request.data.get(""startdt"") , ""%Y-%m-%d"")"
django,38ea59,Digital_Charon,1 point,Wed Jun 3 18:33:42 2015 UTC,Arrow
django,38dvl5,pemboa,3,Wed Jun 3 16:02:12 2015 UTC,"There is really no way around the task queue. You need to send a response, while the processing continues. However, you don't need all the overhead of Celery, task brokering, etc.  Take a look here: http://stancarney.co/2013/01/simple-django-asynchronous-processing/  That said, my opinion is that Celery + RabbitMQ is very easy to setup. Once it is setup, using it is super easy. You don't need to know about all of it's capabilities. It's all I use, even for simple async task scenarios."
django,38dvl5,teilo,1 point,Wed Jun 3 16:13:40 2015 UTC,"I already have celery in my stack, just didn't want to overuse it just because I have it. Also, I haven't found a convenient way to launch the manage.py server and the celery process in parallel easily (without to shells open) so it complicates the debug/dev process a bit.  Thanks for your response. I figured this was the way, but wanted to be sure."
django,38dvl5,teilo,1 point,Wed Jun 3 19:07:51 2015 UTC,"So, I have done this a couple of different ways.   My favorite shell method is to use tmux with a script like this:  #!/bin/sh  tmux new-session -d './manage.py runserver' tmux split-window -v 'celery -A taskman worker -l info' tmux -2 attach-session -d   Then there's pycharm - were you can let the Django server run in the console tab, and use the terminal tab to run celery."
django,38dvl5,andybak,1 point,Thu Jun 4 00:23:45 2015 UTC,"Glad to see this. I've got a bit of a beef with ""just use Celery"" as it's a weighty beast and I resent adding that much extra complexity just to simply run background tasks. Not everyone needs ""an asynchronous task queue/job queue based on distributed message passing"". It might be easy to set up but that's not the only metric when adding a dependency.  You can do something as simple as just spawning a process and then poll via ajax to see if it's been completed. But there are simple apps that make this a bit more robust.   See my previous rant here: http://www.reddit.com/r/django/comments/34xsfe/today_we_released_the_100_version_of/cqzcwpy"
django,38dvl5,uncommonguy,1 point,Thu Jun 4 17:22:25 2015 UTC,"If you are delivering a file for download you can use a streaming HTTP response and a generator to put the download into the browser background. We use this for reports that take about 90 seconds to generate. the download starts in a few seconds after initial database call (using .iterator() on the queryset) which produces rows of CSV in chunks. This lets the user keep browsing normally while the download proceeds.  However for live reports, you will have to take a task-oriented approach using Celery or similar, where you alert the user it is ready as they continue browsing, or put a big spinner up on the page while the user waits.   That also means you should cache them for at least a while so if user looks at it, browses away, then comes back, you don't redo all that work and cause another delay."
django,38dvl5,megadeth9999,1 point,Wed Jun 3 18:03:46 2015 UTC,"This is VERY GOOD question and here's what I came up with, after a few years of both noticing the problem AND giving it some thought.  First, use task queue or you will timeout. No other solution.  Second, poll is not the best idea. I used SSE with Django and it was totally NOT perfect. Now I'm experimenting with this module: https://github.com/wandenberg/nginx-push-stream-module and I'm having very good results. TL;DR: 1) if you're going to end up with another web server anyway (tornado, gunicorn+gevent, twisted web, whatever), why not patch nginx with production-quality code and 2) just leave realtime OUT of Django, Django + WSGI + some proxy web server inbetween is NOT a good solution for realtime push notifications.  Then, when you have a working setup as above, you can create something like a ""wait page"" - user clicks ""generate report"", then web server notifies the browser when the report is done. With some proper javascript, it could redirect the user to a proper web page.   My idea (and I haven't implemented it yet) was to push almost everything to the task queue and silently wait for the return notification that the data is available. I wonder how scalable would it be - basically the web servers would return at once and the task queue would be used a lot.   Have fun implementing your solution!"
django,38969a,Glueon,1 point,Tue Jun 2 18:39:51 2015 UTC,"This is not a simple task (and probably not covered in a tutorial) but it's possible.   Basically you need to render ServerAddForm and AccountFormset inside a <FORM> tag separately via crispy forms.  forms:  class ServerAddForm(ModelForm):     def __init__(self, *args, **kwargs):          super().__init__(*args, **kwargs)          self.helper.form_tag = False          self.helper.disable_csrf = True      class Meta:           model = Server   class AccountForm(ModelForm):     def __init__(self, *args, **kwargs):          super().__init__(*args, **kwargs)          self.helper = FormHelper(self)          self.helper.form_tag = False          self.helper.disable_csrf = True      class Meta:           model = Account  from django.forms.formsets import BaseFormSet  class AccountFormset(BaseFormSet):     pass   view:  import vanilla   # http://django-vanilla-views.org/ from django.forms.formsets import formset_factory   class ServerAddView(vanilla.TemplateView):      def get_server_form(self, data=None):         return ServerAddForm(data)      def get_account_formset(self, data=None, num_accounts=5):         FormSet = formset_factory(             AccountForm,             formset=AccountFormSet,             max_num=num_accounts,             extra=num_accounts)          return FormSet(data=data)      def get(self, request, *args, **kwargs):         ctx = self.get_context_data(             server_form=self.get_server_form(),             account_formset=self.get_account_formset())         return self.render_to_response(ctx)      def post(self, request, *args, **kwargs):         server_form = self.get_server_form(request.POST)         account_formset = self.get_account_formset(data=request.POST)          if server_form.is_valid() and account_formset.is_valid():             return self.forms_valid(server_form, account_formset)         return self.forms_invalid(server_form, account_formset)      def forms_valid(self, server_form, account_formset):         server = server_form.save()          for account_form in account_formset:             account = account_form.save(commit=False)             account.server = server             account.save()  # you may want to call account_form.save_m2m() also          return redirect(self.get_success_url())      def forms_invalid(self, server_form, account_formset):         ctx = self.get_context_data(             server_form=server_form,             account_formset=account_formset)         return self.render_to_response(ctx)   template:  <form method=""POST"" >     {% csrf_token %}      {% crispy server_form %}      <br>      {{ account_formset|as_crispy_errors }}      {{ account_formset.management_form }}  {# this is internal stuff #}      {% for account_form in account_formset %}         {# form.helper is not getting picked up implicitly #}         {% crispy account_form account_form.helper %}     {% endfor %}         <br>          <input type=""submit"" name=""submit"" value=""SUBMIT""> </form>   Feel free to PM me if you get stuck."
django,38969a,Znt,1 point,Wed Jun 3 19:45:38 2015 UTC,"Thanks very much. I ended up creating a comma separated field, because the form in a formset contained only one field. But i'll definitely look into your solution."
django,388qvp,JediSange,2,Tue Jun 2 17:17:49 2015 UTC,I like mongoengine because it can be used outside of Django.
django,388qvp,new2django,2,Wed Jun 3 18:04:23 2015 UTC,"My team at work compared the two and decided on mongoengine because it's syntax is close to that of django's own ORM. Mongodb-engine requires Django non-rel which downgrades Django to 1.5 which is a concern for us since the client wants the ""latest and greatest"" technologies."
django,388qvp,khabees_aadmi,1 point,Wed Jun 3 18:06:42 2015 UTC,Oh that's great to know.  I had no idea it required Django 1.5.  Thanks for this!
django,388qvp,pydanny,0,Wed Jun 3 18:31:19 2015 UTC,"Also about Django 1.5, it's unsupported. Which means no more security patches."
django,388qvp,kevin____,1 point,Wed Jun 3 21:36:32 2015 UTC,Django nonrel is up to 1.6 now
django,3885px,ycon,1 point,Tue Jun 2 15:16:32 2015 UTC,"Hi,  OpenShift is ""not"" a server, is a PaaS (platform as a service) thingie, for the looks of it following this guide/example should do the trick.  The thing is that openshift gives you a git repository were your app lives, and everytime you push a change to that repository your app gets restarted with all the changes, you can access it with the link they give you on OpenShift (it should be something like https://project_name-domain.rhcloud.com) with whatever project name and domain name you setup."
django,3885px,cmoran_cl,1 point,Tue Jun 2 17:24:01 2015 UTC,"Openshift is intended to be a deployment vehicle. Typically you don't edit/run/debug etc on Openshift. Typically you develop your application elsewhere (perhaps locally) and then ""push"" (with git) the application to Openshift.  There is more than one way to get started. I think the easiest way to bring up a fresh Django application is to use the Openshift ""dashboard"" to create a Django application. Once the application is created, Openshift will display a page with basic instructions to clone the application with git -- and how to push changes back to Openshift.  <EDIT>  I don't think I was clear that you would edit and run the application locally and only push it to Openshift to deploy it.  Note, in theory you can edit, push, test on Openshift, edit, push, test on Openshift etc. However that would be very tedious because pushing the application to Openshift takes time.  </EDIT>  Openshift also allows you to start with an existing application, as described in cmoran_cl's comment.  FWIW, it is possible to develop on Openshift. I don't recommend this because, if you aren't careful you could lose your work. With that disclaimer, ssh to your application. Look in ""app-root/repo/wsgi"" to find your source code. Following changes, restart your application with the command ""gear restart"". Since that is not the intended workflow, you are ""on your own"" to backup your source code. And other things might not work as documented."
django,3883aq,silverpendulum,1 point,Tue Jun 2 15:00:30 2015 UTC,"Are all of the unique_together fields included on the ModelForm? ModelForm checks for uniqueness and returns user-friendly errors only if all of the fields in the unique_together constraint are present on the form.  If only some but not all of the fields are on the ModelForm, then it won't check for unique_together, and try to save data to the database (which will always do the full check, and may throw an IntegrityError).  If this is the case, one potential solution is to override clean_fieldname() or clean() on the form and add the uniqueness check that uses fields not present on the form yourself."
django,3883aq,lehmakook,1 point,Wed Jun 3 06:02:38 2015 UTC,"Got it, I didn't include the unique_together in the fields (I thought of them as just a property, and not like a new column/field that would thus be included in the ModelForm's fields.)  By the way, where is this behavior specified? Or is that what is meant by ""enforced at the database level"" in the docs? https://docs.djangoproject.com/en/1.8/ref/models/options/#unique-together"
django,3883aq,lehmakook,1 point,Fri Jun 5 04:51:59 2015 UTC,"I thought of them as just a property, and not like a new column/field that would thus be included in the ModelForm's fields.   Ah no, the unique_together isn't a column/field. It's a list of fields, and it can't really go into the form's field list? What I mean is the following: If you have a model  class Person(models.Model):     first_name = models.CharField()     last_name = models.CharField()     age = models.PositiveSmallIntegerField()      class Meta:         unique_together = (('first_name', 'last_name'), )   And then have two different ModelForms:  class FormA(forms.ModelForm):     class Meta:         model = Person         fields = ('first_name', 'age')  class FormB(forms.ModelForm):     class Meta:         model = Person         fields = ('first_name', 'last_name')   Then FormA will not check the unique_together constraint, because last_name is not included in the form, and it only checks unique_together constraints whose all component fields are present on the form. Instead, FormA will happily say that the form is_valid(), and once you try to save the first_name/age to the database, the database will complain with IntegrityError if the unique_together constraint is violated. The user will most likely see a Django 500 Server Error page unless you catch and handle the IntegrityError.  FormB has both components fields of the constraint present on the form, so it will check for duplicates when doing form.is_valid(). It will add error text to the appropriate fields, letting the user know that a person with this first and last name already exists.  If you want to for example have a form where first_name is not editable by the user, but is part of the unique_together validation, then you have a few options:   Add first_name as a field with widget=HiddenInput (but watch out for people still submitting new values by messing with HTTP POST data in the browser), Add a custom clean_last_name() function, which does checks the database for the first_name, last_name pair."
django,3883aq,lehmakook,1 point,Fri Jun 5 06:37:29 2015 UTC,"I see. I take it that unique_together isn't really meant for hidden fields then?  My model Wall has a name (CharField), author (ForeignKey(User)) and slug (SlugField). A user can create different walls, but as the walls will be accessed via name-related-slugs (e.g. /user1/this-my-wall), I set name-author and slug-author as unique_together.  For now, the only input I need from the user is the name of the wall. If I am checking the unique_together of the slug and the author, then I will have to include the slug in the form (which I don't really need) in the form of a HiddenInput. Now this wouldn't be null, so by default it will raise a form error, even if I can manually set the slug in the view. I can add a default value in the HiddenInput by passing something through the template's context, but this would be redundant/useless as I would be saving its ""true value"" in the view.  (And as you've mentioned already, people can mess with the POST data).  And then there's the second option (the one that raises ValidationErrors in the clean function), which I wasn't sure was ""standard""/""good practice"" as something like error_messages exists.  So, do people really go for the first method? Thanks in advance. :)  EDIT: I suppose I can just set blank=True for the slug so I wouldn't need to manually fill the HiddenInput. (Still doesn't seem like a clean way to me though.)"
django,3883aq,lehmakook,1 point,Fri Jun 5 18:00:00 2015 UTC,"I take it that unique_together isn't really meant for hidden fields then?   unique_together is meant for database data validation constraints, and it works very well there!  The issue is with ModelForm - it has been decided that if a field is not present on the form, then ModelForm should not validate its correctness. And if any field that is part of a constraint is not present on the form, then the form won't check that constraint before saving to the database. The reason why checking partial unique_together constraints would create other problems is best described here: https://code.djangoproject.com/ticket/13091#comment:19  So for the slugs: you only ask for a name. What is supposed to happen when the generated slug already exists (might even happen if names are different)?   Does the user have to change the name until the generated slug is different? Does the user get to choose the slug? Or do you always generate unique slugs, for example by adding some numbers at the end?   And for changes:   Once the wall already exists, can the user change the name? Does that also change the slug or not? Can the user change the slug later or not?   I can offer some suggestions once I know more :)"
django,385u4s,SeanMWalker,3,Tue Jun 2 01:44:47 2015 UTC,Depends on how you're deployed.   The easiest way is probably to look at response times as logged by your web server.  A better way might be to use the logging module to log actual timings for intensive tasks
django,385u4s,jthess32,1 point,Tue Jun 2 03:48:19 2015 UTC,"Hello,   I use Opbeat (https://opbeat.com) for metrics in production. (They can also catch error )."
django,385u4s,mrjmad,1 point,Tue Jun 2 06:07:53 2015 UTC,I just setup opbeat and so far its pretty sweet. I like how it tells you the response time by view. That's pretty much what I was looking for I hope.
django,385u4s,pawpawbears,1 point,Tue Jun 2 11:43:37 2015 UTC,do the metrics only have response times in them? can I use them to debug memory leaks? what about the number of requests Im getting
django,385u4s,TasticString,2,Tue Jun 2 16:20:06 2015 UTC,"This may be very relevant, I watched it yesterday and it was very interesting.  https://www.youtube.com/watch?v=gqmAwK0wNyw"
django,385u4s,mrjmad,1 point,Wed Jun 3 13:34:51 2015 UTC,With Opbeat you have responses times and request per minutes.  I don't think you can debug memory leaks. Maybe try New Relic.
django,3847k8,port274,1 point,Mon Jun 1 19:03:32 2015 UTC,"It's possible, but requires two things. A subclass of models.AutoField and adding the new internal type name (E.g. ""BigAutoField"") to DatabaseWrapper._data_types for the database backend that you're using."
django,3847k8,manfre,1 point,Mon Jun 1 22:17:13 2015 UTC,"Thank you, see the edit."
django,3847k8,ZetaV,1 point,Tue Jun 2 16:44:13 2015 UTC,"I did this on django 1.5 on both MySQL and Postgres. If nothing mayor changed I can look for the code and post it, it may help."
django,3847k8,ZetaV,1 point,Tue Jun 2 13:30:10 2015 UTC,"Thanks, but I got it working"
django,385gqb,dogweather,1 point,Tue Jun 2 00:06:21 2015 UTC,"Are you planning on putting this on a website at some point? If not, and you are planning on putting this into a database, you might want to look at SQLAlchemy. If you insist on using Django, you'll need to use validators - there are built in min and max validators."
django,385gqb,shebazz42,1 point,Tue Jun 2 02:44:09 2015 UTC,But that's the thing - I want to use validators and nothing else. There's no database or web app. It's just a data parsing library.
django,385gqb,shebazz42,1 point,Tue Jun 2 04:52:01 2015 UTC,"So do your validating in init or in a separate method. The idiomatic Python thing to do would be to raise an error of some sort (probably ValueError in your case) on validation failure. This is possible in Django, but you are adding a lot of overhead for little gain."
django,385gqb,shebazz42,1 point,Tue Jun 2 11:53:46 2015 UTC,"Yes, exactly; doing the validation in an init method.   I'm implementing open standards like this one in the form of objects. I'm going straight from the standards doc, and it's clearest if I can write declarative code. People around the world will be writing adapters that produce these objects for their local cities; by having the validations, the application code knows that the adapters are compliant.  I don't see much overhead pulling in Django — I'm placing a priority on programmer efficiency. This code will run nightly, and speed isn't an issue."
django,385gqb,titusz,1 point,Tue Jun 2 23:06:19 2015 UTC,Understood. Try something like validator.py. That way you aren't using a full on ORM where you don't need one.
django,38295b,Gruzdaz,7,Mon Jun 1 09:37:49 2015 UTC,"If you are building an API, DRF takes care of a lot of ""boilerplate"" stuff for you (serialization for example) that you otherwise would inevitably end up wasting time implementing yourself."
django,38295b,mmmflapjacks,6,Mon Jun 1 11:11:50 2015 UTC,"You need it for example if you want to use a JS frontend framework like AngularJS or React. Those need to send AJAX requests to some backend API in oder to fetch the data that needs to be rendered. DRF makes creating APIs really simple and awesome, especially when it comes to authentication, permissions and throttling."
django,38295b,mbrochh,1 point,Mon Jun 1 11:30:42 2015 UTC,"DRF is great. Easy to use, documents itself, lots of articles. The core docs aren't that good, but otherwise it's the best library for Django. They should merge it into core."
django,37zlgo,akkalio,2,Sun May 31 19:12:05 2015 UTC,This project is awesome! I dont really have a use case but the idea is very cool! Thumbs up!
django,37zdxs,tgdn,2,Sun May 31 18:15:14 2015 UTC,"If you want contributions to help finish it, flesh out the README to include state of development and TODOs. Adding a Vagrantfile for the multimachine architecture wouldn't be a bad idea, either."
django,37zdxs,ronocdh,1 point,Sun May 31 19:26:30 2015 UTC,"Thanks, I might do that :)"
django,37xc8f,xngzng,4,Sun May 31 04:34:02 2015 UTC,"Your stack will be similar to any other django stack. Deployment will be heavier if you need GDAL, proj4, etc. Some of those packages are a very long compile. For your database, you probably want to be running postgis on Postgres. I agree with the other poster though, it doesn't seem like you did much/any research on your own before posting. The exact requirements of your project aren't known to us and you will have to figure out a lot more details before you can make informed decisions about your stack."
django,37xc8f,dailytentacle,5,Sun May 31 06:08:45 2015 UTC,"Did you conduct any research before posting here? The first couple hits on Google when searching for ""geolocation django"" go right to the Django docs: https://docs.djangoproject.com/en/1.8/ref/contrib/gis/."
django,37xc8f,ccb621,4,Sun May 31 04:49:44 2015 UTC,"This question is part of my search. I should rephrase it as ""Beside PostGIS and GeoDjango, what other apps and services people are using for their Django geolocation backend?"". Intention is to get feedback, comments, options from Django people who have actually implemented a geolocation app."
django,37xc8f,LVNGD,1 point,Sun May 31 07:00:53 2015 UTC,"I've done this in a few apps and used PostGIS/Geodjango. I used the google maps API to geocode addresses.   If you implement something like this, I would love to know how you handle the geocoding. Unless you save the results of each geocode somewhere/cache it/whatever, you have to geocode the address each time someone searches for it. I know the google api has a limit on the number of requests. Mine were just hobby apps so they aren't even really finished and don't have a ton of users, so I didn't pursue the issue.   I liked Geodjango for this - it's pretty simple to do a query for any other points in a circle around a radius."
django,37xc8f,searchingfortao,1 point,Sun May 31 14:08:42 2015 UTC,"I wrote a cascading geocoder some time ago.  It would check the cache, then Google, and if it failed, then it would check another one (GeoNames I think), and if that failed, still another.  This wasn't all that slow, but I wouldn't do it while the user waited unless I absolutely had to."
django,37xc8f,naithemilkman,1 point,Sun May 31 16:37:09 2015 UTC,What else do you need that GeoDjango doesn't provide? It's pretty de facto if you're building a location based app.
django,37xc8f,metaphorm,2,Sun May 31 14:40:10 2015 UTC,PostGIS/GeoDjango are by far the best options. if you're even considering something else you had better have a very good reason to do so.   if you're looking for a good address geocoder I recommend the Here.com REST api.
django,37xc8f,bennylope,1 point,Sun May 31 16:44:23 2015 UTC,There's really nothing new to say here with regard to the database (PostgreSQL with PostGIS unless you have a compelling reason to the contrary). The big question you need to answer is what countries will you be geocoding addresses for? Many geocoding services are going to be limited to one country or a limited subset. I've happily used Geocodio with my own Python API wrapper but it's limited to US addresses.
django,37u158,ycon,1 point,Sat May 30 11:30:56 2015 UTC,"You'll either need to modify the script or dispense with it.  The key to installing with virtualenv is that, aside from needing virtualenv installed, you need to specify the Python path to use when installing packages. So prior to installing from the requirements file, you need to install virtualenv and activate the environment. The top revision here is a quick example so just take it as illustrative of what you'd need to do."
django,37u158,bennylope,1 point,Sat May 30 14:31:07 2015 UTC,"Thanks bennylope.  In the top revision, I don't see an install wagtail pip so I'm not quite following.  From your example- here's my attempt at it.  https://dpaste.de/E3u6#L6  Could you please have a look? Thanks"
django,37u158,bennylope,1 point,Sun May 31 05:25:12 2015 UTC,"I don't see an install wagtail pip so I'm not quite following   Presumably wagtail is included in the pip requirements file named production.txt. The referenced revision in that Gist only shows that you need to install virtualenv, create your virtualenvironment, and activate it prior to installing your Python packages."
django,37u158,mipiano,1 point,Sun May 31 15:49:20 2015 UTC,"Hi, that script says that is for production (deploying). Is that what you want to do?"
django,37u158,mipiano,1 point,Sun May 31 05:54:33 2015 UTC,Ah (I'm very new to this). No- this is just for building/developing a site.  What's the procedure for setting up the site to build in with virtualenv?
django,37qzmj,pydanny,3,Fri May 29 18:17:33 2015 UTC,Just in time! My team recently had to upgrade to 1.8
django,37qzmj,TehMoonRulz,0,Fri May 29 18:27:33 2015 UTC,Whew! We're glad we made it. :-)
django,37qzmj,rocketplex,2,Sat May 30 04:07:41 2015 UTC,"Pfft, got you beat, I upgraded just 'cos the book came out."
django,37qzmj,jlorencetti,4,Mon Jun 1 14:00:44 2015 UTC,"That's awesome! If it's as good as my 1.6 version it's one of the most enjoyable tech read in my whole life, congratulations for you and Audrey!"
django,37qzmj,rnevius,2,Fri May 29 18:49:27 2015 UTC,Wow! that's a wonderful compliment! :-)
django,37qzmj,JoshAddington,3,Sat May 30 04:10:16 2015 UTC,Does this mean a new PDF version is due out soon as well? Maybe I missed it...I think the last version I received was still an early release. Looking forward to it!
django,37qzmj,rnevius,3,Fri May 29 20:15:01 2015 UTC,"According to Two Scoops twitter, the final update for the PDF will be going out tonight."
django,37qzmj,Ibuildwebstuff,1 point,Fri May 29 21:38:11 2015 UTC,Yup. We'll send out the PDF update and run the code extractor so everything in https://github.com/twoscoops/two-scoops-of-django-1.8/tree/master/code is up-to-date.  Then we're going out for ice cream. :-)
django,37qzmj,new2django,1 point,Fri May 29 21:40:33 2015 UTC,We just sent out the update!
django,37qzmj,BitRateChaos,2,Sat May 30 04:07:25 2015 UTC,Got it! Thanks!
django,37qzmj,Redbaron67,9,Sat May 30 05:32:40 2015 UTC,"It was a lot of work, and /u/audreyrg and I couldn't have done it without the encouragement of friends and the support of our readers. When I hold the lovely book in my clumsy fingers all that effort seems so worthwhile. :-)"
django,37qzmj,mbrochh,1 point,Fri May 29 19:53:51 2015 UTC,"Hey /u/pydanny and /u/audreyrg I got my early release purchaser code, thanks for that! Are either of you going to be at DjangoCon Europe next week? Will you have paperback copies of the book with you?  I've not had a chance to read all of the early release PDF yet, but I've enjoyed the sections I have read. So thank you very much for doing a 1.8 version."
django,37qzmj,Redbaron67,2,Fri May 29 22:13:07 2015 UTC,Shut up and take my money!  Just ordered my print copy. Best investment I ever made besides learning Django was buying your book last year..
django,37qzmj,originaljewedlaw,0,Sun May 31 03:16:02 2015 UTC,"Alas, no DjangoCon Europe for us. :/  We had no idea when the 1.8 paperbacks would be done so couldn't make any arrangements with DjangoCon Europe."
django,37qzmj,shifting,1 point,Fri May 29 22:16:30 2015 UTC,Purchased! Thanks again for doing these. Looking forward to the new material.
django,37qzmj,avinassh,3,Fri May 29 22:23:40 2015 UTC,Yes! Time to jump back on the Django wagon. Had to learn PHP and Codeigniter for a new job.
django,37qzmj,avinassh,1 point,Fri May 29 19:38:04 2015 UTC,So you are also jumping back from the new job?
django,37qzmj,spookyrufus,3,Sat May 30 02:02:46 2015 UTC,"Nah, just have some more free time now that I have gotten up to speed with their stack."
django,37qzmj,marinamele,3,Sat May 30 04:13:08 2015 UTC,Bought!
django,37qzmj,marinamele,3,Fri May 29 19:46:14 2015 UTC,Awesome! Just made a purchase. Thanks for all your hard work!
django,37qzmj,acaban,1 point,Sat May 30 03:42:55 2015 UTC,Thank you. Your words make us very happy. :-)
django,37qzmj,rnevius,3,Sat May 30 04:06:51 2015 UTC,"any idea when it will be available in Indian stores, Flipkart or Amazon.in?"
django,37qzmj,sriramracer,1 point,Sat May 30 09:57:59 2015 UTC,"As soon as possible! Now that we have a print version ready, we can commence modifying the format to fit the particulars of our Indian printer. We have to see the end results, but as they do great work we're pretty sure the book will be available on Flipkart and Amazon.in within 30 days."
django,37qzmj,sriramracer,2,Sat May 30 15:44:29 2015 UTC,"great, can't wait for it!"
django,37qzmj,CashewGuy,3,Sat May 30 18:09:30 2015 UTC,Congratulations and thank you for your work. Two Scoops for 1.6 was a fantastic read and it is a valued reference for me.
django,37qzmj,JoshAddington,3,Sat May 30 10:00:59 2015 UTC,Just bought mine! Can't wait to have it!! :-) Congratulations and thank you for your hard work!
django,37qzmj,CashewGuy,1 point,Mon Jun 1 15:49:20 2015 UTC,"Coming from you that is a very high compliment. So in return, thank you for all your hard work on the Taskbuster tutorial, we recommend it on our site and in the book.   :-)"
django,37qzmj,mbrochh,1 point,Mon Jun 1 15:59:06 2015 UTC,Thanks! :-)
django,37qzmj,CashewGuy,2,Mon Jun 1 16:02:51 2015 UTC,"amazing as usual! I was wondering at why do people prefer printed copies of tech books, pdf are searchable easily and you don't waste paper for a thing that will be deprecated in 3 years."
django,37qzmj,mbrochh,1 point,Sat May 30 08:28:10 2015 UTC,"I find it easier to flip back and forth between pages in a print version. That said, I only bought the PDF version of Two Scoops."
django,37qzmj,rocketplex,1 point,Sat May 30 09:52:50 2015 UTC,"I prefer print books because they are easier to use and can be placed next to my laptop. Also, highlighting and folded corners are really useful."
django,37qzmj,rocketplex,1 point,Sat May 30 14:57:23 2015 UTC,"People usually state similar reasons: bookmarking, page flipping, physical references. The important thing worth know is that we sold 5x print versus ebook on the 1.5 edition, and this version is following that same pattern. Our readers just like print. ;)  On that note, we prefer print as well. Our work desks are covered with our favorite tech books."
django,37qzmj,angus_khan,2,Sat May 30 15:46:42 2015 UTC,Just ordered mine!
django,37qzmj,cargie,2,Sat May 30 14:55:56 2015 UTC,"I'd like to grab this, but I'm concerned about buying print development books. On one hand, I find PDFs very hard to actually ""read"" - so when I do buy them I always always buy print versions.   On the other, once they're out of date, they're out of date. How long will this book be applicable? Is it a safe buy for long-term reference?  I've only done two/three rather simple Django projects, so something like this could be valuable to me, but I'm concerned about buying something that may not be totally usable to me.  Then again, I referenced Digging into WP for a very long time when I was still doing WP development.  One other question, specifically for /u/pydanny - will there ever be a spiral bound edition? I find spiral binding is fantastic for dev books."
django,37qzmj,sriramracer,4,Sat May 30 01:38:18 2015 UTC,"1.8 is The Long Term Support release, so it will likely be the de facto version for a while. Two Scoops 1.6 was still considered a worthwhile book up until Danny and Audrey announced they were writing the 1.8 book, which leads me to believe that this book will stay relevant for a while."
django,37tb6b,barriossteven,3,Sat May 30 05:35:07 2015 UTC,"The PyCharm IDE doesn't have a Django version...it's the same as the Django website.  I'd actually recommend skipping the IDE until you're comfortable with Django. Head to the Django website and do their tutorial in a code/text editor like Sublime Text. Then do Django Girls' tutorial. Then set up your IDE and build something.  Before starting, you should also know HTML, and a bit of CSS, as well as how an HTTP request/response works."
django,37tb6b,rnevius,2,Sat May 30 05:54:39 2015 UTC,Start from django official website. There is nice short tutorial  and there is all documentation. It will be enough for the begining
django,37tb6b,gorkiredd,1 point,Sat May 30 08:09:50 2015 UTC,"I'm also learning, but as I learned, I have written tutorials at http://riceball.com/d/content/django-18-tutorial.  They aren't perfect, but I'm trying to do things in a generic way, and also touching on some issues that shorter, more focused tutorials aren't.  Comments, edits, criticisms, corrections, are all appreciated."
django,37tb6b,wildgift,1 point,Fri Jun 12 07:21:17 2015 UTC,"I started doing djangogirls tutorial followed by Some video from an Indian dude, who walks you through building a Django blog in 17 minutes (do djangogirls first though)."
django,37tb6b,MekkaGodzilla,2,Sat May 30 08:07:52 2015 UTC,"You're probably referring to Arun Ravindran (/u/arunvr), and this screencast: http://arunrocks.com/recreating-the-building-a-blog-in-django-screencast/  Arun has some great stuff. I highly recommend flipping through his blog."
django,37rhlu,akaTreyT,0,Fri May 29 20:19:42 2015 UTC,"It depends of what are you trying to get better in. If it's just using DRF, the best would be to read docs, write code using it and read DRF source code from time to time.  If you would like to get better in designing REST API's, there are books and many articles about it. Api UX is a pretty interesting site http://apiux.com/  You should also look at public popular APIs, like https://developer.github.com/v3/  And read a jsonapi specification (isn't compatible with DRF, but can give you some good insights) http://jsonapi.org/  Two Scoops would probably help you with standardizing how you write django apps. There are many good practices in TSoD, however API isn't a focus of this book."
django,37rhlu,atteroTheGreatest,1 point,Mon Jun 1 05:37:37 2015 UTC,Thanks. All great info!!
django,37slp9,Qawba,1 point,Sat May 30 01:33:03 2015 UTC,If I'm wanting to install this on Ubuntu (not Vagrant) with virtualenv- do you know how to go about it?
django,37slp9,ycon,1 point,Sat May 30 13:00:45 2015 UTC,"I guess it's mentioned on the last part of installation, you can create a virtualenv and install wagtail then create a new project using wagtail command line. Read the last part of the article."
django,37po0s,frankwiles,2,Fri May 29 12:27:42 2015 UTC,I'm not 100% sure what's causing it...but text overlaps like crazy ~50% of the time I load the page. It was unreadable until I messed with it in dev tools...I think someone may have mentioned this in the past.
django,37po0s,rnevius,1 point,Fri May 29 13:33:41 2015 UTC,"bah that's right I see it when refreshing too! Apparently THAT is what I should have worked on tracking down this morning when I couldn't sleep.  I'll find some time today to figure it out, such an odd bug."
django,37po0s,sriramracer,1 point,Fri May 29 15:17:57 2015 UTC,"So you'll never guess what the issue was.  It was only Chrome, not FF or Safari, but it was the fact I was using link-prefetch and dns-prefetch tags to help speed Chrome up.  Removing those (amongst a dozen other things I tried) is what ultimately did the trick.    UPDATE: bah nevermind, seems it went away from a few minutes and now it back. I hate browsers sometimes."
django,37po0s,pydanny,1 point,Fri May 29 21:34:32 2015 UTC,Or maybe it is fixed? Seems to happen 1 out of 100 times for me now rather than roughly 50%.  So confused!
django,37po0s,pydanny,2,Fri May 29 22:00:11 2015 UTC,We just started using this in our tests. Best move we've made in a while. Still hate my company though.
django,37po0s,shazammerbammer,3,Mon Jun 1 23:34:21 2015 UTC,I love this library!  Frank taught me these patterns when I worked for him in 2010. We squeezed it into Two Scoops of Django 1.8 right before we sent it to print.
django,37po0s,mbrochh,2,Fri May 29 17:10:32 2015 UTC,"Great now I'm REALLY going to have to support it! Just kidding, thanks!"
django,37po0s,epicserve,2,Fri May 29 18:29:20 2015 UTC,I'm happy to contribute.
django,37po0s,shazammerbammer,1 point,Fri May 29 19:50:48 2015 UTC,I wonder what people think about django-dynamic-fixtures vs factory boy. I've only used django dynamic fixtures.   http://django-dynamic-fixture.readthedocs.org/en/latest/index.html
django,37po0s,rnevius,2,Fri May 29 13:22:31 2015 UTC,I switched away from Factoy Boy to Mixer. It's amazing. No more boilerplate.
django,37po0s,epicserve,1 point,Fri May 29 14:02:53 2015 UTC,I switched away from factory boy in favor of Model Mommy. This is the first I've heard of Django Dynamic Fixtures. It looks similar to Model Mommy.
django,37s5fp,syphon7,1 point,Fri May 29 23:16:59 2015 UTC,"It's a bit hard to understand your problem. You should probably post your serializer, urls, and JS code in a gist.  That being said, check the debug console of your browser. Does the request even get through or come back with an error. If your API is served from a different port than your frontend, you will run into CORS errors. You can install django-cors-headers and simply allow all.  Then check your terminal where you are running runserver. The request should show up there. If it is a 404, your URLs might not be hooked up correctly (or you are requesting a wrong URL). If it is a 401, your authentication is wrong. With token auth, make sure that your user actually has a token (you have to manually create them) and make sure you add the HTTP header 'Authentication' with the content ""Token blabla"".  If it is a 500, something is wrong in your ViewSet, place a breakpoint in the entry method and step through it to see where it crashes.  ALSO: Are you able to see the browsable API that DRF generates for you? Is this about POST or GET requests?"
django,37s5fp,mbrochh,2,Sat May 30 01:58:32 2015 UTC,"I really appreciate the response. While going through your suggestions, I found that I was posting an incorrect variable from angular. I was misreading the information in the debugging window, and went down a rabbit hole I shouldnt have."
django,37s5fp,mbrochh,1 point,Sun May 31 06:19:57 2015 UTC,"So very often in programming, when you hit a roadblock, you just have to say it out loud in the office, not even expecting anyone to bother with an answer. And then just as often any random answer will trigger that random neuron on your brain which will suddenly leads to the solution.  I love programming :)"
django,37s5fp,buleria,2,Sun May 31 06:29:41 2015 UTC,Say hello to your new friend ;)
django,37s5fp,autowikibot,1 point,Mon Jun 1 12:05:40 2015 UTC,"Rubber duck debugging:       Rubber duck debugging is an informal term used in software engineering for a method of debugging code. The name is a reference to a story in the book The Pragmatic Programmer in which a programmer would carry around a rubber duck and debug their code by forcing themselves to explain it, line-by-line, to the duck.  Many other terms exist for this technique, often involving different inanimate objects.  Many programmers have had the experience of explaining a programming problem to someone else, possibly even to someone who knows nothing about programming, and then hitting upon the solution in the process of explaining the problem. In describing what the code is supposed to do and observing what it actually does, any incongruity between these two becomes apparent.  By using an inanimate object, the programmer can try to accomplish this without having to involve another person.    Image i - A rubber duck in use by a developer to aid code review     Interesting: Hydro Thunder Hurricane | List of Amstrad CPC games   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
django,37qmzr,kvnn,1 point,Fri May 29 16:53:52 2015 UTC,I'd be stoked if anyone found this useful. I'm happy to answer any questions about the tech stack.
django,37lkrj,stolen_loom,61,Thu May 28 14:44:07 2015 UTC,Yes.
django,37lkrj,cerealcable,18,Thu May 28 15:16:09 2015 UTC,Yes.
django,37lkrj,touchthismonkey,10,Thu May 28 22:34:24 2015 UTC,"Has anyone said yes yet? If not, YES!"
django,37lkrj,lexbuck,14,Thu May 28 23:32:51 2015 UTC,No.   I mean wait. Yes. Fuck yes.
django,37lkrj,Eurynom0s,11,Fri May 29 00:51:22 2015 UTC,"virtualenv seems like one more piece that can break   nope, it won't break, its incredibly stable. what virtualenv does is pretty simple actually. its basically just a shell script that modifies your python path to point at a self-contained installation of the Python interpreter and to install all of your Python packages in that spot as well. how is this achieved? nothing complicated or magical. just ordinary use of the file system. in short it just creates a folder where it installs python and another folder where it installs all your python packages and it makes sure that when you're in the virtual environment you'll be using those installs instead of system or default installs.   i recommend using this for both development environment (so you can develop multiple python projects on the same machine and not have dependency version conflicts) and your production environment (so you don't need to hassle your sysadmin or webhost to install packages for you, just do it yourself in the virtualenv)."
django,37lkrj,metaphorm,4,Thu May 28 16:34:07 2015 UTC,"Best answer. You've sold me. I think I'm just weary of learning new things right now, since the last six months has been an extreme brain-drain of constantly new things. But if I'd used virtualenv then I think I could have avoided complications in the past."
django,37lkrj,aphoenix,6,Thu May 28 18:38:29 2015 UTC,"Luckily, in 10 minutes you're a virtualenv user. It's pretty straight forward."
django,37lkrj,Eurynom0s,4,Thu May 28 20:14:18 2015 UTC,Learning virtualenv is much less work than having to unfuck a package versioning conflict.   ESPECIALLY if you're at the point where learning another package makes you nervous.
django,37lkrj,pydry,9,Fri May 29 00:52:34 2015 UTC,"Definitely worth the effort in your dev environment. It keeps your project environments and your system environment all isolated from one another, which prevents horrible conflicts caused by packages in those different environments wanting to use different versions of each other.  Might be useful in production too if you want to isolate your system's python environment from your application's python environment, but that isn't always useful."
django,37lkrj,mattsl,4,Thu May 28 14:52:54 2015 UTC,"Can you elaborate on why it isn't useful in production? I would think that the same benefits would apply. Plus, running everything in a virtualenv would allow much more painless hardware/OS upgrades."
django,37lkrj,pydry,1 point,Thu May 28 17:56:45 2015 UTC,Depends if you care about isolation between your production's system python and application python.  I do usually use it in production but I wouldn't necessarily resent somebody who didn't.
django,37lkrj,jthess32,2,Fri May 29 00:41:57 2015 UTC,"100% agree.  Also, think about using virtualenvwrapper locally since it makes it very easy to create a virtualenv, install packages, switch between virtualenvs and delete them.  Having ""disposable"" envs means it's very easy to make sure your requirements.txt is up to date.  Just create a new one, run pip install -r requirements.txt, then run your application or tests to make sure everything works."
django,37lkrj,pydry,1 point,Thu May 28 18:52:01 2015 UTC,"I don't like using virtualenvwrapper or workon. If using a virtualenv is modal, it's too easy to accidentally use the wrong one, which is something you want to avoid at all costs (debugging obscure errors caused by slightly different versions of libraries being installed than you expected can eat up a lot of time).  I just put it in projectdir/venv/ and call from the project like so : ./venv/bin/python"
django,37lkrj,_under_,2,Fri May 29 01:03:00 2015 UTC,"I name my virtualenvs based on which project they are for. I've never accidentally used the wrong venv. Even if I did, it's super obvious because the current active venv is displayed on my bash."
django,37lkrj,pydry,0,Fri May 29 05:57:54 2015 UTC,"I script repetitive actions, so I won't necessarily see a prompt. The times when it was not obvious was when I was running a script that did something like this:  $ workon virtualenv [ this command failed, but not in an obvious way ] $ python dosomething  $ python dosomethingelse   [ slew of obscure errors caused by wrong package versions ]"
django,37lkrj,_under_,1 point,Fri May 29 07:14:00 2015 UTC,"Sorry I think I wasn't clear. I've configured my bash to display the current git branch and the current virtualenv. Like this  This is what I meant by ""current active venv is displayed on my bash"""
django,37lkrj,Deggor,6,Fri May 29 07:50:22 2015 UTC,"Should you use virtualenv in development?  Absolutely! Should you use virtualenv in production? Absolutely!  People have addressed why it's good for multiple applications running on the same server.  And they're right.  But even if you've only got one app running on a server, thoroughly tested in development, it's still a good idea to isolate your project environment from the OS' environment.  Unless you're never doing any updates (that's bad, mmkay?), your server operating system is a highly mutable environment.  If you're on Ubuntu for example, a bunch of system tools use python (uninstall python and you'll be left unable to even apt-get it back). Updates to any of these packages may result in an update your site-packages.   At some point, without ever touching your code, your application breaks.  Now it's on you to figure out why.  Once you have, what are you going to do?  Update your code and push it out hastily to get your application running? Or do you try and do a system rollback (this always goes well)?  Virtualenv is going to be completely separate from your project or code.  Don't think of it as another piece of it that can break.  Instead, think of it as a tool like git/svn, there to prevent things from breaking, or to make it easy to recover when things do."
django,37lkrj,mrjmad,12,Thu May 28 16:35:23 2015 UTC,You must use virtualenv  for dev and for prod.   And you can use virtualenvwrapper for simplify your job.
django,37lkrj,eighthpence,4,Thu May 28 16:30:53 2015 UTC,"Yes. I find virtualenv makes my life easier, and feels like it adds fewer parts and pieces, because it is all self contained and doesn't interfere with the rest of my OS or the applications that run. It all feels cleaner.  As for running a virtualenv on production, you would use something like this in your uwsgi.ini  # mysite_uwsgi.ini file [uwsgi]  # Django-related settings # the base directory (full path) chdir           = /path/to/your/project # Django's wsgi file module          = project.wsgi # the virtualenv (full path) home            = /path/to/virtualenv   It isn't much different to running natively.  (code snippet from http://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html)"
django,37lkrj,BaltoRouberol,6,Thu May 28 15:09:51 2015 UTC,"Also note that home is an alias of the virtualenv uwsgi setting. I prefer the latter, as I find it more explicit.  My .02$"
django,37lkrj,eighthpence,1 point,Thu May 28 15:26:56 2015 UTC,I agree.
django,37lkrj,jonr,4,Thu May 28 19:46:39 2015 UTC,"Yes.   E.g. I have an internal webserver with more than 1 python app. I can mix 2.x and 3.x projects, and avoid conflicts between different versions of packages."
django,37lkrj,Joshka,4,Thu May 28 15:36:11 2015 UTC,"Yes.  However, I prefer Linux Containers myself. It's admittedly overkill, but has it's advantages."
django,37lkrj,Joshka,1 point,Thu May 28 19:43:01 2015 UTC,"Linux containers?  I use Webfaction where the installation is largely separated from the rest of the server. They have a pretty good setup. My Python and my Django are installed locally for my user folder, and nobody will mess with them. I just had permission errors which I still haven't' deciphered, and lots of tutorials use virtualenv, so I thought I'd field some opinions. And they're overwhelmingly positive, so I'll probably try it.  But what are Linux Containers?"
django,37lkrj,MegaKEK,1 point,Thu May 28 20:05:47 2015 UTC,"Linux Containers are kinda the new way to virtualize. Something between chroot and a virtual machine.  Basically, it's a virtual machine without the overhead of a virtual machine. It shares the host's kernel and you don't need to allocate a specific amount of memory / CPU cores / Disk Space etc. to the container. It uses only the resources you need.  You can also allocate IP addresses to each container.  Because each container is it's own separate universe, you don't need virtenv."
django,37lkrj,philippeowagner,1 point,Thu May 28 20:45:15 2015 UTC,"To add to Joshka's explanation, the most popular tool for setting up and managing these Linux containers (aka LXC) is Docker.   It's not difficult to get the hang of them thanks to Docker, if you're familiar with Linux and work in Linux, because LXC don't work in Windows and OS X (without virtual machine).   I think starting with virtualenv is a safe choice. But when you notice that you need more isolation from your OS or consistency between development and production machines than just for your Python packages, remember LXC."
django,37lkrj,shazammerbammer,3,Fri May 29 12:26:15 2015 UTC,Yes - and case you have multiple of them on the same machine I suggest to use virtualenv-mgr.
django,37lkrj,TankorSmash,3,Thu May 28 15:20:21 2015 UTC,"I don't see this so I'll add it. I use this:  http://virtualenvwrapper.readthedocs.org/en/latest/command_ref.html  Which adds a few really useful macros like: mkvirtualenv new_environment workon new_environment  etc. For flipping between them and setting them up, it's very nice."
django,37lkrj,flynnguy,3,Thu May 28 18:03:01 2015 UTC,"I don't use it, but today, just after updating to 1.8, it would have been nice to have a venv with 1.6 and 1.3 on them, so I could go back say 10 or 100 commits and run the code, without doing a ton of work."
django,37lkrj,GhostfaceHecklah,1 point,Thu May 28 23:45:49 2015 UTC,virtualenv is a godsend when you are upgrading django versions. I am currently in the process of upgrading from 1.4 to 1.8 and being able to switch back and forth is a must. That combined with git branches.... I don't know what I'd do if I didn't have git branches and virtualenv.
django,37lkrj,benzinonapoloni,3,Fri May 29 13:41:11 2015 UTC,"Yes. It only takes like 10 minutes to understand. http://www.dabapps.com/blog/introduction-to-pip-and-virtualenv-python/  We use it in every environment and even left it on our new off-prem, single-app EC2 nodes."
django,37lkrj,wjdp,2,Fri May 29 02:34:34 2015 UTC,"If you work on multiple projects and if you want separated dev/test/prod environments, definitely yes!"
django,37lkrj,spookyrufus,2,Thu May 28 17:39:33 2015 UTC,"A warning, using virtualenv will make you hate other platforms environment tools (looking at you Ruby)"
django,37lkrj,MaTachi,2,Fri May 29 02:29:59 2015 UTC,"While virtualenv and virtualenvwrapper may be slightly confusing at first (they were for me, at least), they are vital tools. Highly recommended both on test and production."
django,37lkrj,rukittenme,1 point,Fri May 29 07:11:54 2015 UTC,"If you are using Python >= 3.3 you can use the bundled tool pyvenv, which is basically virtualenv if I understand it correctly. I know some Linux distros are already shipping Python 3.4, so chances are that you got pyvenv already available."
django,37lkrj,einwenig,1 point,Fri May 29 00:24:24 2015 UTC,If you're on python 3.4 it couldn't be easier to make an environment.  Change directory into your project.  pyvenv env will make an environment named env.  Activate it by typing source ./env/bin/activate.  Install your requirements and go!
django,37lkrj,dogweather,1 point,Fri May 29 11:52:46 2015 UTC,This tutorial helped me a couple of years ago to set it up: http://theneum.com/blog/webfaction-virtualenv-how-to/  Note: you might want to open the element inspector in your browser and change the background color.
django,37lkrj,colly_wolly,1 point,Sun May 31 18:35:01 2015 UTC,Isn't it now called pyvenv and included with Python 3?
django,37lkrj,softiniodotcom,2,Tue Jun 2 00:00:24 2015 UTC,Oh I don't know. I'll look into that.
django,37lkrj,mehphp,1 point,Wed Jun 3 04:58:55 2015 UTC,"Yes use it.  Its not too difficult to understand. Setting up deployment is a little e trickier, but its worth it in the long run."
django,37nm8h,cpt_bushwookie,5,Thu May 28 23:29:45 2015 UTC,"Let's say the function is hooked up to the url /example/.  Presumably, example/view.html includes a form that looks something like this:  <form method=""post"" action=""/example/"">     <input type=""hidden"" name=""the_input"" value=""value""/>     <input type=""submit"" value=""Submit""/> </form>   When a user first hits the page using a GET request, the body of the if statement will not execute (request.POST is false), so the page will be rendered. Then, when the user submits the form, the browser will send the data to /example/ (i.e., the form's action). Now, when view runs, request.POST is true, so the body of the if statement will execute.  (Also, it's more typical to see if request.method == ""POST"" than if request.POST in Django code, but either will work in this case.)"
django,37nm8h,mipadi,1 point,Fri May 29 00:04:00 2015 UTC,Side note: using if request == 'POST' is best practice because request.POST can sometimes give you an unexpected falsey value that will cause unwanted behavior.  source
django,37nm8h,fluffington,1 point,Wed Jun 3 00:00:07 2015 UTC,"Okay, I get it now. So when the form is submitted to /example/, the view is invoked again? In that case, instead of writing ""return render()"" at the end of the view function, can I write ""yield render()"" at the beginning of the function?"
django,37nm8h,mipadi,2,Fri May 29 00:10:28 2015 UTC,"No, the function isn't an iterator. It's just called every time a URL is hooked up to it is requested. In the case of such a form, that URL is requested twice: once when a visitor first visits the page, and again when the form is submitted (because the form POSTs to the same URL)."
django,37mvz2,voxl,1 point,Thu May 28 20:14:05 2015 UTC,"Django comes with a Paginator class. To make it even more easier, Django's built in generic ListView has a paginator object. You just have to specify a 'paginate_by' variable. Check the documentation for more info.  As for the form, you can pass it by adding it to the context of the ListView by overriding get_context_data() method.  from django.views.generic import ListView from .forms import MyForm from .models import MyModel  class MyListView(ListView):     model = MyModel     template_name = 'app/mymodel_create.html'     paginate_by = 5   #number of items to display per page      def get_context_data(self, **kwargs):         context = super(MyListView, self).get_context_data(**kwargs)         context['myform'] = MyForm()         return context   Now, to display the form in a template.  {{myform}}"
django,37mvz2,np-,2,Fri May 29 16:41:05 2015 UTC,"Looks like I did not read your OP correctly.   I think you could create a method that returns a sliced version of list based on the ?page=x parameter. Pass it as a context object in get_context_data method.  def return_items(self):     initial_number_of_items = 5     list_of_data = []     try:         page_number = self.request.GET['page']     except Exception:       #put appropriate exception here         page_number = 1      to_index = number_of_items * page_number     from_index = to_index - initial_number_of_items     return list_of_data[from_index:to_index+1]  def get_context_data(self, **kwargs):     context = super().get_context_data(**kwargs)     context['my_list'] = return_my_items()     return context   This should work. But have not checked.  Edit: corrected the slicing of index"
django,37mvz2,np-,1 point,Sun May 31 07:02:43 2015 UTC,Thanks so much for your help. However I can't seem to get this to work. Maybe it just isn't possible to paginate a list that's in a FormView context because FormView uses POST and pagination uses GET? Does that sound right?
django,37jzs4,notabigdeal256,3,Thu May 28 04:31:48 2015 UTC,You could probably use a case-insensitive collation for your user table. Have a look at https://stackoverflow.com/questions/7005302/postgresql-how-to-make-not-case-sensitive-queries
django,37jzs4,BaltoRouberol,3,Thu May 28 07:42:00 2015 UTC,"2 things you need to do:   On registration, do a case-insensitive query on the database to check that the same username with a different case isn't already present. User.objects.filter(username__iexact=<username>).exists() On login, retrieve the User object using a case-insensitive query again.    Personally, I'm not a big fan of case-insensitive queries, but it's doable."
django,37jzs4,yen223,1 point,Thu May 28 09:41:34 2015 UTC,"I'm not sure how using case-insensitive queries will affect your index in the DB. This means, it could potentially slow you down if you have a lot of records. Somebody more familiar with django and how it handles the DB can better answer that (or do a test).  An alternative is just to lowercase everything in the authentication username, but keep a separate column or table for the correct case on the username to display to users."
django,37jzs4,YouAreSalty,1 point,Thu May 28 19:03:07 2015 UTC,you can implement custom authenticate function
django,37jzs4,mick88,1 point,Thu May 28 13:01:29 2015 UTC,The correct way to do this in django is to create a custom user model https://docs.djangoproject.com/en/1.8/topics/auth/customizing/#specifying-custom-user-model  Have the username field lower cased and a display_name field that has it as the user originally typed it.
django,37jzs4,Digitalxero,1 point,Thu May 28 20:57:15 2015 UTC,Convert all usernames to lower case with .lower()
django,37jzs4,takennickname,1 point,Thu May 28 05:30:06 2015 UTC,"I've already considered that, but allowing users to be able to have upper and lowercase letters in their usernames is something that I don't want to get rid of. I'll spend the extra time to write my own user model and authentication backend before I resort to that."
django,37jzs4,cerealcable,1 point,Thu May 28 05:45:00 2015 UTC,That tends to be the problem with using baked in solutions instead of writing your own it seems. I tend to spend more time wrangling with how to best handle the situation.  I'd probably suggest using a custom user model that stores a username with proper case in a field and the lowered on in the username field so you can have the best of both.
django,37jhdc,karlo_tamayo_1010,1 point,Thu May 28 01:59:54 2015 UTC,"CBV's are bit tricky to say the least. but some advice: determine what you are trying to accomplish. Focus on the basics first, add later.  What Model does it utilize? Is that model a list, or a single target?   What other ancillary objects do you want included when the page is rendered?"
django,37jhdc,TasticString,1 point,Thu May 28 03:44:13 2015 UTC,"Thanks for this, I'll remember these questions during implementation."
django,37jhdc,mrjmad,1 point,Fri May 29 14:23:09 2015 UTC,"Hello,   The Part of the doc that talks about CBV is a good reading (https://docs.djangoproject.com/en/1.8/topics/class-based-views/ and the next chapter ) .   I like the book two scoops of Django 1.8. The CBV chapter is well written.  ccbv.co.uk is a useful site for check methods, attributs or mixins of CBV but it is not very good at teaching.   And to really understand CBV, you need to understand the mixin concept."
django,37jhdc,dashdrum,2,Thu May 28 08:29:30 2015 UTC,"Getting started with Generic Class Based Views by Daniel Samuels really made the concept click in my head. I started with the docs but I guess my problem is that it describes exactly how they work and all the working parts, but lacks in showing how to actually use them in an applied setting."
django,37jhdc,iankit,1 point,Fri May 29 14:34:15 2015 UTC,"For most of my needs the generic CBVs provided are sufficient.  I throw in a few mixinis, such as those in django-braces, and I can do most things.  However, there have been a few where I have stepped back to the View class and built the rest custom, such as a page with two forms, formsets, complicated updates, etc.  ccbv.co.uk is always opened in a tab when I'm programming."
django,37i42j,ThorAkureyri,2,Wed May 27 20:19:24 2015 UTC,"You probably want to subclass XMLRenderer and replace the _to_xml method. The drf-xml uses an undocumented django.utils.xmlutils.SimplerXMLGenerator, but that's really just a wrapper around xml.sax....  The only thing you need to do in your subclass is call xml.startElement('tag', {'some_attr': foo}) instead of the empty dict it uses in the example above."
django,37i42j,shobble,1 point,Thu May 28 02:33:22 2015 UTC,"Thanks, this got me going in the right direction."
django,37i42j,tsantor,1 point,Tue Jun 9 20:38:39 2015 UTC,"Care to share some of your XMLRenderer class code? I'm struggling to find any information on how to do this as well. I, like you only need certain fields of the model as attributes while others can remain tags. Thanks in advance."
django,37e3mw,chrismit7,2,Tue May 26 23:24:22 2015 UTC,"This is something I'll definitely get use of.  Been creating some CLI Python utilities that I wanted to put a UI around. A couple questions.   Does this support Python 3? I know you support argparse currently. Any plans to add additional support for other CLI packages, like Click?"
django,37e3mw,streetmapp,2,Wed May 27 12:11:49 2015 UTC,"Awesome to hear.   It doesn't support Python 3, though it's high on my list. I need to rewrite the CLI parser since I use types in my dictionary mapping and a few other things that will break python3. I'm going to move the argument parsing code to its own package, which will then expand to the other CLI packages. This is part of python3 support.   Thanks for your interest!"
django,37e3mw,streetmapp,1 point,Wed May 27 13:41:47 2015 UTC,"Nice, thanks for the response!  So I started to work on getting this spun up in a sandbox capacity, and ran into the following on a 2.7.9 virtualenv:  $ djanguify.py -p sandbox Traceback (most recent call last):   File ""/opt/python/envs/djangui/bin/djanguify.py"", line 90, in <module>     sys.exit(main())   File ""/opt/python/envs/djangui/bin/djanguify.py"", line 78, in main     shutil.move(os.path.join(project_base_dir, 'settings.py'), os.path.join(project_base_dir, 'settings', 'django_settings.py'))   File ""/opt/python/python27/lib/python2.7/shutil.py"", line 302, in move     copy2(src, real_dst)   File ""/opt/python/python27/lib/python2.7/shutil.py"", line 130, in copy2     copyfile(src, dst)   File ""/opt/python/python27/lib/python2.7/shutil.py"", line 83, in copyfile     with open(dst, 'wb') as fdst: IOError: [Errno 2] No such file or directory: '/web/sandbox/sandbox/settings/django_settings.py'       I thought maybe my virtualenv being named too close to the package could be throwing things off, so I tore it down and started again. But now the bootstrapper is just sitting there at step 1."
django,37e3mw,streetmapp,1 point,Wed May 27 14:44:34 2015 UTC,Thanks for the report. It's fixed. I had a naive way of finding the templates dir for the bootstrapping.
django,37e3mw,streetmapp,1 point,Wed May 27 15:10:28 2015 UTC,"No problem, I'm getting farther now.  Got myself up and running, but when I try to add a script (command line or through admin) I end up with the following.  Converting /tmp/scripts/tomcat.py usage: manage.py [-h] [--ver VER] {list,get,new} manage.py: error: argument action: invalid choice: 'addscript' (choose from 'list', 'get', 'new') Error while loading /web/sandbox/sandbox/user_uploads/djangui_scripts/tomcat_ZC9h4c4.py: Traceback (most recent call last):   File ""/opt/python/envs/sbox/lib/python2.7/site-packages/djangui/backend/argparse_specs.py"", line 159, in __init__     module = imp.load_source(script_name, script_path)   File ""/web/sandbox/sandbox/user_uploads/djangui_scripts/tomcat_ZC9h4c4.py"", line 9, in <module>     args = parser.parse_args()   File ""/opt/python/python27/lib/python2.7/argparse.py"", line 1701, in parse_args     args, argv = self.parse_known_args(args, namespace)   File ""/opt/python/python27/lib/python2.7/argparse.py"", line 1740, in parse_known_args     self.error(str(err))   File ""/opt/python/python27/lib/python2.7/argparse.py"", line 2374, in error     self.exit(2, _('%s: error: %s\n') % (self.prog, message))   File ""/opt/python/python27/lib/python2.7/argparse.py"", line 2362, in exit     _sys.exit(status) SystemExit: 2   And I have verified that my script works fine on the command line on its own."
django,37e3mw,streetmapp,2,Wed May 27 15:46:39 2015 UTC,"Could you post your script? It seems like it's executing the argparse actions on script loading. I'm guessing you don't have something like if name == ""main"": in it which allows you to control what code is executed on importing."
django,37dh2b,mmcardle,2,Tue May 26 20:47:18 2015 UTC,Great Work! (y)  Instead of   name = CharField(max_length=255)  name = models.CharField(max_length=255)   is considered as best practice.
django,37dh2b,mamunabms,1 point,Wed May 27 20:03:07 2015 UTC,"Thanks, i shall update that"
django,37dh2b,boxidea,1 point,Thu Jun 4 19:11:03 2015 UTC,That's pretty sweet. Thanks!
django,37dh2b,br05,1 point,Tue May 26 22:31:04 2015 UTC,Very cool.
django,37dh2b,chrismit7,1 point,Wed May 27 03:23:47 2015 UTC,"Really slick. Only downside I see is you sort of need to know what to do to create useful views, which if you know how to do, you probably don't need this. Impressive you did this on a github-pages site though."
django,37dh2b,iCHAIT,1 point,Wed May 27 04:30:14 2015 UTC,Nifty!
django,37dh2b,marklyon,1 point,Wed May 27 11:11:34 2015 UTC,A few suggestions:   Prompt for required arguments on fields Add support for choices Add ability to save and restart work on an app RemovedInDjango18Warning: Creating a ModelForm without either the 'fields' attribute or the 'exclude' attribute is deprecated - form reviewerAdminForm needs updating
django,37dmft,spookyrufus,3,Tue May 26 21:23:36 2015 UTC,"That advice from /u/Whoopska is probably the best advice I've seen for getting started in testing. Do that! What I would also recommend:   Learn the difference between Unit, Integration and Acceptance tests and where is best to apply each. A simple rule of thumb in Django is if you are using the test client it's an integration test not a unit test. Use automated tools: travis, codeship. Set them up so tests are triggered automatically and make it a rule that no code can be deployed until the tests pass Use  coveralls or some other code coverage checker. Then challenge yourself that code coverage can remain the same or go up, but can never go down. Set up automated integration tests with Selenium (saucelabs) they can scheduled to run hourly/nightly/etc. There are browser plugins which make creating basic tests as easy as clicking round your site. These will be your first line of defence to let you know something is wrong / has changed.   I know some of the services listed above can be quite costly, they're just the easiest way to get started. You can build your own testing infrastructure using the likes of Jenkins. And most of the tools (Travis, Coveralls) only charge when accessing private repos."
django,37dmft,Ibuildwebstuff,1 point,Wed May 27 13:17:00 2015 UTC,"Thank you for the insight. I am currently a one-man company providing custom software solutions. I take pride in developing using as many of the best technologies that I know and to never stop learning, but I really do have a hard time how to fit in the whole new major block of tasks that comes with testing. My average client spends 1 to 5k euros on the software solutions he wants, and as you may imagine this budget is extremely tight most of the time."
django,37dmft,Whoopska,1 point,Wed May 27 14:53:28 2015 UTC,Thanks! Just a word if warning for people using coverage with django-nose http://stackoverflow.com/q/24668174
django,37dmft,Whoopska,2,Wed May 27 23:22:48 2015 UTC,"Next time you find a bug in your app, make a test that fails due to the bug. Then make the test pass by fixing the bug. Sometimes the test will be really dumb like ""make sure the page loads!"" after you accidentally kill a dependency.   Soon you'll start anticipating where the page is likely to break. Maybe you have some complex conditionals. Add a test for each leaf in your logic tree.  Maybe you'll break a page and not find out until later because it was a break in JavaScript. Add a selenium test that fires the JavaScript.  Once you start to like tests, the literature will make more sense. You'll write more isolated code and start to play around with things like TDD."
django,37dmft,honeybadgerUK,1 point,Tue May 26 22:07:07 2015 UTC,"Ok, this makes sense to me."
django,379moy,Rogergonzalez21,2,Tue May 26 00:15:01 2015 UTC,"You're printing only visible fields, and the field 'id' is hidden, so you're missing a {{ phone_formset.id }} or something like that under {{ phone_formset.management_form }}"
django,379moy,SebCorbin,1 point,Tue May 26 11:12:22 2015 UTC,Yes! It worked! Thanks.
django,376ly0,ggalage,2,Mon May 25 08:38:30 2015 UTC,Django is simply not made for websockets. You should use another tool like Tornado or Node.js.  UPDATE Or this one: http://websocketd.com/#tutorial
django,376ly0,dAnjou,2,Mon May 25 13:47:27 2015 UTC,"What about this?  http://jpadilla.com/post/74391616727/the-easiest-way-to-add-websockets-to-django  We have web views which currently poll, that I will be replacing with a websockets implementation within the next month or so. I was going to start with the above, and if it didn't work I was going to figure out some kind of work around (we absolutely cannot scale with our current polling model, so even if I have to run a separate tornado process or something, it has to be done)."
django,376ly0,RjakActual,2,Mon May 25 14:26:21 2015 UTC,Check out Swamp Dragon.
django,376ly0,iBlag,2,Tue May 26 03:01:13 2015 UTC,It's still Django which means it's a bike with square wheels.
django,376ly0,dAnjou,1 point,Tue May 26 13:00:41 2015 UTC,"Actually it's Django with Tornado + Redis. You know, that same Tornado you said people should use in your first comment."
django,376ly0,Ibuildwebstuff,1 point,Tue May 26 18:28:07 2015 UTC,I know that. And exactly this combination makes it said bike with square wheels. Each one without the other is perfectly fine in their scope of application.
django,376ly0,dAnjou,2,Tue May 26 18:45:32 2015 UTC,"Tornado is just a web server, an IO loop. Something has to provide the data for Tornado to serve, why shouldn't that something be Django?  To be honest Swamp Dragon's use of Django is almost incidental. Swamp Dragon is a serializer and a router, I could see it developing in the future to be more standalone with a contrib.django. Much in the same way as django-social-auth evolved into python-social-auth.  The Websockets connection never touches Django, it is purely Tornado and Redis."
django,376ly0,Ibuildwebstuff,2,Tue May 26 19:40:19 2015 UTC,"+1 after researching and trying out many approaches, I think that tornado and websocketd have the best chances to achieve what you want.   Nginx routing a certain url namespace to uwsgi+django and another to tornado maybe.  I still haven't decided whether exposing tornado to their real world is a good idea."
django,376ly0,dlhero,1 point,Tue May 26 16:19:05 2015 UTC,how about building a RESTful API
django,376et1,MekkaGodzilla,3,Mon May 25 06:55:26 2015 UTC,"For the simple case, I would add a model with an ImageField, allowing you to upload images. This could be a standalone model, or something with a foreign key to your post model, or a ManyToMany to your post model.  These files are stored in your MEDIA_ROOT, not STATIC_ROOT.  Then your markdown needs to reference the files, using the prefix you set in MEDIA_URL"
django,376et1,spookylukey,1 point,Mon May 25 10:08:23 2015 UTC,"Sounds like a plan, I'll look in this direction in the doc. Thanks."
django,376et1,irony,1 point,Mon May 25 10:22:55 2015 UTC,"When you're ready for something more complex, try https://github.com/theatlantic/django-cropduster"
django,376et1,inetman,1 point,Mon May 25 13:34:21 2015 UTC,"Thank you! I will go for the standard ImageField first, then try django-cropduster."
django,376et1,spookyrufus,2,Mon May 25 14:27:42 2015 UTC,Does django-markdown just create Template files? Then {% static 'path/to/img.jpg' %} should work
django,376et1,RalphMacchio,1 point,Mon May 25 09:54:47 2015 UTC,"Django Markdown provides a markdown toolbar in the admin interface to edit a blog post entry, and a filter in the templates to transform the content of blog entries from markdown tagged text to html.  Anyway I still need a way to upload pics to the static folder somehow."
django,3764tq,kenanbek,1 point,Mon May 25 05:04:11 2015 UTC,"You state that Django caches every view by default, that's only true if you enable the cache middleware.  Furthermore, why don't you just implement the__str__ method and mark the model python2_unicode_compatible, instead of implementing both __str__ and __unicode__?"
django,3764tq,xBBTx,1 point,Mon May 25 10:54:27 2015 UTC,In my project cache framework is enabled.  What is disadvantages of implementing both str and unicode?
django,3764tq,tw_f,1 point,Mon May 25 18:01:37 2015 UTC,That was a good read and took care of some of the doubts I still had about CBVs.  Thank you!
django,3764tq,DistrictRails,1 point,Mon May 25 20:48:04 2015 UTC,"Thanks for the article. The tutorials I'm using to learn all want me to incorporate Angular to write forms, but I'd rather not if I can get around it. (I don't really understand why I need Angular either (its a small project)). Thanks again"
django,378et9,Finbel,3,Mon May 25 18:48:30 2015 UTC,"Have you ever used Python before? Or Django? Honestly, I don't know how you're going to build an app of that size in just 4 days if you've never used Django."
django,378et9,g-money-cheats,1 point,Mon May 25 20:01:35 2015 UTC,"Yeah it sure feels daunting. Thing is, I feel it could be really rudimentary and not have any extra stuff in it. But maybe you're right. Some other guys in my class use php and I perhaps I should switch to that. It's just that two people in my class (without precious experience as well) said that they made theirs with Django in two days."
django,378et9,lexbuck,0,Mon May 25 21:11:46 2015 UTC,Was their app this involved? Sorry to say but two days for this app isn't happening.
django,378et9,lexbuck,1 point,Mon May 25 21:38:53 2015 UTC,"Exact same assignment, so yeah :>"
django,378et9,bocephus607,1 point,Mon May 25 22:24:09 2015 UTC,"Ok. Did they have prior programming experience? I wasn't trying to break your hopes and dreams as it seems like you don't have much choice but to try, but it sounds like you don't have much experience with Django or Python given that you just went through the official tutorial?  I'm speaking as someone who started with Python and Django about a year and a half a go and it was a long road to get where I am. Once you wrap your head around things it's not too hard to do a great deal of basic things, but getting to that ""ah-ha"" moment for me took about nine months. Of course, I came from a background of nothing but design/front-end type work so if you actually have programming experience you may pick it up faster.  If you don't have any Python experience, then you'll need to get up to speed on that first. I tried to jump into Django first before learning Python and I can tell you that you're in for a bad time. Everything in Django views, forms, etc. is written in Python, so you can understand why you'd need to learn it. It's not exactly something you can just learn ""as you go"" with Django.  I just know that some of the apps I've written, on paper they all seems pretty straight forward and no big deal. As I dug into things and started coding I started to inevitably realize pieces that I needed to make it work which I hadn't considered and just little things like that. I just don't see how anyone could complete and ebay type project in a few days from start to finish.  I wish you luck though."
django,373mai,zac428,2,Sun May 24 15:48:13 2015 UTC,"Personally I think django's a really bad fit for small sites, especially if you plan to hand them off to clients. I'd either look at something PHP-based (perch, for example), or use one of the many static site generators like Jekyll. You lose very little in terms of long-term flexibility - the work required to convert a well-built 1-3 page static site to django will be trivial, especially if you find something with similar template syntax.  The two main disadvantages you're going to face building self-contained small sites with django are:   server-side requirements - django sites run in their own separate processes, so require a fair chunk of memory when compared with static or php sites in a conventional configuration. Your choices for hosting will be a lot more limited (and almost certainly more expensive to rent and maintain) than with PHP. keeping it up-to-date - there's a new version every 8-12 months, and upgrades can be quite involved. There are LTS releases which are supported for ~3 years, but if you stick with those you'll miss out on new features, risk compatibility issues with third-party apps, and face a bigger job when you come to upgrading. Clients need to be aware that these upgrades may include security fixes, so are not optional.   If you plan to build tiny 1-3 page static sites and hand them off to clients to host and manage themselves, I suspect that a django site will be terrible value for money for them in the long-term. It'll also be harder for them to find someone else to work on it after you (although you may consider that a good thing).  If on the other hand you want a long-term relationship with your clients by selling them a hosting and maintenance contract, one practical way to run lots of small sites using django would be to build a CMS which supports running multiple separate sites from a single process - many of the existing cms apps already do that. Build out the basic common functionality (admin, contact forms etc), and you'll just have a single installation to host and upgrade (perhaps with something like django-staticgenerator or varnish to reduce load and improve performance). If you then set that up as a self-contained package, when you need to grow a site you can clone it into a new django project and copy the site data across, ready to start adding custom code. That said, you're committing yourself to a lot of extra work to make sure things keep running, which could be difficult to justify if you're providing competitive rates for your clients."
django,373mai,radiacnet,1 point,Mon May 25 07:45:08 2015 UTC,"Yeah, I can see it being quite a hassle with maintenance and server-side implementation Thanks for your answer."
django,373mai,dirigeant,2,Mon May 25 12:19:22 2015 UTC,"You simply create data model and you have fully-functioned admin site. And all customers love an easy-to-use admin site. You can also convert any html template to a website easily with django template engine. So I think, Django is absolutely best option to develop websites (simple or advanced).  You can use DigitalOcean or Linode for simple applications."
django,373mai,Whoopska,1 point,Sun May 24 16:57:15 2015 UTC,"Yeah, that is what I was thinking, thanks."
django,373mai,_under_,2,Sun May 24 18:24:46 2015 UTC,"Django is a great tool for building simple and complex sites. For simple sites though, you may find that there are simpler tools for the particular job. Are you building a blog? There are solutions that will get you off the ground faster than installing your favorite django blog. Are you building an e-commerce site? Ditto. If the idea is custom, I'd totally go for django, but if you are just setting up a simple site, a streamlined solution lets the client install plugins and customize everything after you've moved on."
django,373mai,_under_,1 point,Sun May 24 17:15:47 2015 UTC,"We want to use one platform that can handle simple 1-3 page sites, with the capability to be expanded to more like e-commerce."
django,373mai,spookylukey,1 point,Sun May 24 18:25:56 2015 UTC,"Is there a particular reason as to why you'd want to do this? In my opinion, you should be using different tools for different things.  If you're making static ""brochure"" sites (as I like to call them), then you're better off just sticking with static html. I personally use this generator to get started with those. generator-webapp  If you're making a ""website"" that doesn't really need to do anything special, but you do need the ability to add pages and edit content, you might have better luck just sticking with WordPress. It's tried and tested and your clients would have an easier time working with it.  On the other hand, if you're making something that needs customized behaviour, like say, a hotel reservation system, then Django would be better suited for that.  It's all about choosing the right tools for the job. Of course, nothing's stopping you from using Django for all of those cases. It's well equipped for that. All I'm saying is that Django route might not be the simplest path to go on for all cases."
django,373mai,unstoppable-force,1 point,Mon May 25 03:45:54 2015 UTC,I've been in the process of learning Django and I wanted to put it to use but I suppose other options would be easier for the simpler websites.
django,373mai,Singularitty,2,Mon May 25 12:21:31 2015 UTC,"Sure! That's great. While other options might be available, nothing's really stopping you from going for it. So go for it. :D"
django,3728rv,Vertp,13,Sun May 24 04:35:57 2015 UTC,"Its in fact pretty much the same as flask.   Just open settings and comment out the middleware and default apps, and django is nothing more than a router.  You can even write you view inside settings and have a one file app, just like flask.  Difference is that in flask, you call the router flask, the db stuff something else, the template again something else etc. Learning how a router works is of course easier than to learn how everything you need works.  Think of it as learning flask and werkzeug and jinja and whatnot all at the same time, and its all called django.  Also: all the ""magic"" is optional always. Django just likes stuff really DRY."
django,3728rv,yaix,7,Sun May 24 13:34:17 2015 UTC,"Why don't you start with just the basic Django and Django tutorial? You use a project (cookiecutter) designed for magic, but don't like the magic."
django,3728rv,pemboa,8,Sun May 24 14:31:46 2015 UTC,"You're looking for Lightweight Django, which didn't exist when I learned Django, but is still a good read.   I had a similar experience. I tried Django, got confused; went to Flask, loved it; came back to Django, was still confused, but it eventually caught on.   Lightweight Django starts off by breaking a Django project down into a single file (much like a basic Flask app). The first few chapters are definitely the best.  Oh, and if you want a preview for the kind of stuff contained in the book, here's a sample and there's this great blog post by the author."
django,3728rv,rnevius,4,Sun May 24 06:11:39 2015 UTC,"Just comment out the default apps and middleware in settings, that's all. The django is just a url router. Pretty much exactly like flask."
django,3728rv,yaix,1 point,Sun May 24 13:38:07 2015 UTC,I think you meant to reply to the OP.
django,3728rv,rnevius,2,Sun May 24 13:46:29 2015 UTC,Thank you very much.
django,3728rv,RobinReborn,3,Sun May 24 06:15:36 2015 UTC,"Haven't used much Flask but here's some comments based on my general programming knowledge.  Going from one framework (or language) to a similar one can be harder than going from a framework (or language) which is very different.  This is because if they're similar it's easy to assume that everything in them will be similar and get frustrated by the minor (and arbitrary) differences between them.  Short answer, it's because you learned Flask first.  If you learned Django first, you'd probably have trouble learning Flask."
django,3728rv,boshlol,2,Sun May 24 14:27:57 2015 UTC,just a note about django-cookiecutter: it uses a non standard structure  he explains it in this issue: https://github.com/pydanny/cookiecutter-django/issues/132  Personally I've had issues with it breaking third party apps that expect the standard structure.
django,3728rv,pydanny,3,Sun May 24 09:18:46 2015 UTC,"Could you let me know which third party apps break on cookiecutter-django? Everything should 'just work', and if it it doesn't, then that would be a bug we need to fix. :-)"
django,3728rv,boshlol,1 point,Mon May 25 01:52:42 2015 UTC,"The one that I remember was django-assets:  https://github.com/miracle2k/django-assets  it was struggling with the auto discovery. you can set 'ASSETS_ROOT' to partially fix it, but you loose the ability to distribute your assets across apps.  I believe that my co workers experienced similar issues in other apps, but off the top of my head I can't recall which ones they were."
django,3728rv,dorioo,2,Mon May 25 08:13:38 2015 UTC,You can find some of the better resources at the link below. Including the taskbuster project someone linked to.  http://twoscoopspress.com/pages/django-tutorials
django,3728rv,dAnjou,2,Sun May 24 10:17:47 2015 UTC,"I don't really remember my journey exactly but it was roughly like this: I tried to do the Django tutorial and found it really cumbersome. Then a long time after that I discovered Flask and was really excited about its straight-forward-ness. Now I have a full-time job working with Django and it wasn't really that hard anymore to grok it.    The main difference is probably where it all starts, where the ""root"" of the application is. In Flask that's super obvious: app = Flask(__name__). And then you use app to define your routes and everything and attach view functions. In Django it's a little bit more tricky. It all basically starts in settings.py. It feels like there are a lot of conventions but everything is actually more or less explicitly configured. It's just not very obvious and even though the documentation doesn't hide it, it doesn't tell you to the face either.  Now about forms (ignoring the fact that Flask neither has ""forms"" built-in nor suggests or recommends any library, and assuming you use wtforms): they work pretty much the same way. Their primary purpose is to validate input which is the main reason why I think ""form"" is a really really bad name for the whole thing."
django,3728rv,rnevius,1 point,Sun May 24 14:05:10 2015 UTC,"I've been trying to decide what I'd rename ""forms"" to. Any ideas? It wouldn't be ""validators""...as those are a part of forms. I'm at a loss."
django,3728rv,dAnjou,1 point,Tue May 26 12:33:19 2015 UTC,For me validator would be perfectly fine. I don't use the form rendering part anyway.  Maybe you could separate them? Then instead of ModelForm you'd have ModelValidator and if you really like the rendering thing there could be Form which gets Validator or ModelValidator injected as an optional dependency.  That's just a rough idea though.
django,3728rv,thekingofcrash7,4,Tue May 26 13:09:23 2015 UTC,"I only used flask for a couple simple things before learning Django. I dont think Django brings that much magic actually. Once you get to using it more, and dive into the source a couple times you'll see its actually pretty logical and simple. The hardest part is that it is so big.  As far as learning, start with the official tutorial on django website."
django,3728rv,lehmakook,1 point,Sun May 24 05:19:45 2015 UTC,"Already did it, looking for something more in depth. The thing I do in Flask, I could never do in Django (it could be done, just not by me in my current understand of it)."
django,3728rv,pydanny,6,Sun May 24 05:27:12 2015 UTC,"Could you perhaps tell us more more about the things that are difficult? Then we could hopefully explain how they work.  You are entirely correct in that Django is ""big"" compared to Flask. It's a big framework with a lot of modules and functionality included. Having these included tends to be extremely convenient when the project gets to a moderate size.  I think working off django-cookiecutter is actually making things worse not better. It sets up the project with a lot of complex third-party extras and ""best practices"" for big, mature web apps. If you have a simple app or just want to learn Django, you don't want to store uploaded files on Amazon S3 and Facebook login and so on.  If you start a plain Django project with   django-admin startproject fooproj cd fooproj ./manage.py startapp fooapp   Then there will be a lot less of the extras included by default, and a lot simpler to understand."
django,3728rv,karlo_tamayo_1010,3,Sun May 24 09:36:19 2015 UTC,"As the creator of cookiecutter-django, I agree. It is not meant for people just getting into Django. Maybe I should put up a warning?"
django,3728rv,pydry,1 point,Mon May 25 01:53:55 2015 UTC,"I'm in a similar situation as you. I started off with the official polls tutorial a few months ago, moved on to Tango with Django (which has it's flaws, but provided further learning and reinforcement). I've been jumping around chapters of Two Scoops of Django, which provides plenty of great tips and best practices for a relative newbie.    I am currently digging into two resources recommended by the Two Scoops authors (as well as other folks):   Marina Mele's Django tutorial, which is more advanced than the others I mentioned. It's great if you are looking to learn how to integrate TDD into your Django workflow. Buddy Lindsley's Go Django video series goes over some of Django's beefier inner guts. It's a subscription service but even the free videos are pretty damn good."
django,3728rv,_under_,5,Sun May 24 22:59:25 2015 UTC,"Something like adding another form item is taking me 30 minutes   What, like going from this:  class EmployeeForm(forms.Form):     name = forms.CharField()   to this?  class EmployeeForm(forms.Form):     name = forms.CharField()     phone_number = forms.CharField()"
django,3728rv,pydry,3,Sun May 24 08:25:49 2015 UTC,"I can empathize with this. Not this particular example, but the struggle of learning something new. The good thing is, he's already spent that thirty minutes. Next time he needs to do it, it would take a significantly shorter amount of time."
django,3728rv,canhazraid,1 point,Sun May 24 12:11:57 2015 UTC,"I can empathize with this. Not this particular example, but the struggle of learning something new.   I can empathize with the struggle of learning something new as well, but it's not django's fault he's only used to using flask."
django,3728rv,skolsuper,1 point,Mon May 25 03:30:25 2015 UTC,You forgot to makemigrations and then migrate your database schema.
django,3728rv,canhazraid,2,Sun May 24 22:24:22 2015 UTC,For a form?
django,3728rv,mondschatten,1 point,Mon May 25 00:57:03 2015 UTC,Oop.  -1 to me.
django,3728rv,omegote,1 point,Mon May 25 01:05:42 2015 UTC,"You might learn a lot about the ""magic"" happening in django from this ""Django in depth"" talk: https://www.youtube.com/watch?v=tkwZ1jG3XgA"
django,3728rv,merican_atheist,1 point,Sun May 24 08:24:32 2015 UTC,"Well the exact opposite happened to me the first time I tried Flask. Being used to Django, where there's existing code for pretty much anything, when I tried Flask I felt overwhelmed by the amount of work I was gonna have to do to achieve anything. I guess that, at the end of the day, it's just about the mindset."
django,3728rv,Emnalyeriar,1 point,Sun May 24 20:38:27 2015 UTC,I'd recommend you pick up a copy of Two Scoops of Django (they have a version for 1.8 out as early access right now). Django is definitely everything and the kitchen sometimes.
django,3728rv,enesimo,3,Sun May 24 05:25:20 2015 UTC,"I did purchase it, but it's not a guide, it's best practices. I want a tutorial, I have never touched Django before a few days ago."
django,3728rv,ryangallen,5,Sun May 24 05:26:27 2015 UTC,"I'm recently learning from this  http://www.marinamele.com/taskbuster-django-tutorial  but if you already know Flask it might be a little to slow-paced for you, but you should try it anyway, just skip what you already know."
django,3728rv,TankorSmash,2,Sun May 24 05:48:52 2015 UTC,Wow this is a gold mine. Thanks for sharing
django,3728rv,OmegawOw,3,Sun May 24 06:56:07 2015 UTC,http://chimera.labs.oreilly.com/books/1234000000754/ch01.html
django,3728rv,rnevius,0,Sun May 24 06:08:13 2015 UTC,"The django tutorial is what I used. I had a full on JS pong game going, with leaderboards and stuff, within 48 hours. Never used web server stuff before that.  There is a ton of magic to it though."
django,3728rv,skolsuper,4,Sun May 24 05:44:57 2015 UTC,"What does ""magic"" mean though ?"
django,3728rv,metaphorm,2,Sun May 24 07:50:18 2015 UTC,I never understood what people mean by this either.
django,3728rv,zoner14,0,Sun May 24 08:04:19 2015 UTC,"It's when the framework makes decisions for you.  Like for example if django didn't require you to set a media root/staticfiles storage in settings and instead just set sensible defaults. You could put file and image fields in models and they would just work, ""like magic"".  Ruby on Rails has a philosophy of ""Convention over Configuration"", so this is the sort of thing that might be in RoR (I haven't used it in a long time). It is great to a point, you can get a prototype up in double-quick time, but most devs don't really like too much magic as there are factors that need to be considered in decisions like this, like how much storage is there on the server for example."
django,3728rv,evenisto,1 point,Sun May 24 09:58:02 2015 UTC,"it usually refers to code that is defined out of scope to what you are immediately working on but that affects the behavior of your code anyway.  so for example, in django quite a lot of the behavior of generic class based views is magical. like, if you have a generic form view for editing a model, where does the form come from? its generated magically via introspecting the model class associated with the view. like magic."
django,3740gg,bayernownz1995,1 point,Sun May 24 17:50:57 2015 UTC,"You'll have to do that separately. You can do that with an AJAX request for example before you submit the article. But you can do it in one request as well. In your view function you'll have to create the article and the tag separately though.  (Sorry, I'm on my mobile right now, otherwise I'd elaborate on that.)"
django,3740gg,dAnjou,1 point,Sun May 24 19:03:36 2015 UTC,"Seems simple enough to me. So basically it would be along this lines of this?  class ArticleForm:      class Meta:         model = Article         fields = ('title', 'content',)      # some way of toggling between these two fields     # select an existing tag:     tags = forms.ModelChoiceField(Tag)     # and/or create a new tag     tags = forms.CharField()"
django,3740gg,Whoopska,1 point,Sun May 24 19:15:51 2015 UTC,"I think the issue is that you're using the wrong widget by default with the ModelChoiceField. You'll by default get a multiselect right? i think you probably want to use just a CharField and parse out the tags as csv (nice input with this same underlying value is supported by most javascript tag plugins that I've seen). When you want to save / add tags, you'll probably want to parse them out after determining the form is valid. Something like looping over the values and creating new tags when necessary and then adding them all to the many to many field.  As an example of a library that does this, checkout django-taggit      existing = self.through.tag_model().objects.filter(         name__in=str_tags     )     tag_objs.update(existing)      for new_tag in str_tags - set(t.name for t in existing):         tag_objs.add(self.through.tag_model().objects.create(name=new_tag))      for tag in tag_objs:         self.through.objects.get_or_create(tag=tag, **self._lookup_kwargs())   https://github.com/alex/django-taggit/blob/develop/taggit/managers.py#L168  I'd recommend replacing your Tag implementation with django-taggit if it matches what you want."
django,3715ag,questionbox,3,Sat May 23 22:06:45 2015 UTC,"I wrote a tutorial here that takes you through building a simple note-taking application. It's intended to follow the official Django tutorial and might be of use to you. It's easily adapted to multiple users, and that's a start.  As far as payment processing, Stripe has a great API and Python package. I would definitely recommend looking at them.   Hope this helps."
django,3715ag,souldeux,1 point,Sun May 24 03:42:45 2015 UTC,The tutorial is for version 1.7 correct? could it work the same for version 1.8 or should I just change my django project ?
django,3715ag,souldeux,1 point,Sun May 24 04:09:46 2015 UTC,"Correct, it's for 1.7 but is totally 1.8 compatible as written."
django,3715ag,Emnalyeriar,1 point,Sun May 24 04:50:40 2015 UTC,"Thanks, I'll check your tutorial!"
django,3715ag,HipposGoneWild,3,Sun May 24 06:03:06 2015 UTC,What does your app not yet do what you want it to do?
django,3715ag,HipposGoneWild,2,Sat May 23 22:11:33 2015 UTC,"I made a mistake, I want to create an app that functions like airbnb* All I have so far is the a basic template added to django"
django,3715ag,Ciccio99,5,Sat May 23 22:20:07 2015 UTC,"Ok so you need to break down what you're trying to do. It seems to me like you are trying to do too much at once and are feeling overwhelmed. Do you understand how the views, urls, and models files work? That's where I'd begin to get a basic understanding of how django works.   Then figure out what the minimum amount of functionality your app needs in order to viable and tackle them one at a time. Django is well documented if you are looking for how to do something specific."
django,3715ag,rnevius,1 point,Sat May 23 22:29:22 2015 UTC,"ok, thanks for the advice. I don't understand that too well, is there a better tutorial discussing views, urls, and models online that you would recommend?"
django,3715ag,leonardo_o,2,Sun May 24 04:08:49 2015 UTC,"The idea is based off of the Model-View-Content pattern, or in Django's case, the Mode-View-Template. The Model: handles all of the data and storage of data. If it is more familiar, think of it as a Class in object oriented data. Or better yet, it is an entity for a entity-relationship type database.  The View: handles what information will be displayed to the user. (It's important to recognize that the view does NOT control HOW the data is viewed, but WHAT data is viewed. It funnels the model data you want.  The Template: Sets up the actual visual representation to the user. It takes the data passed on by the view, and allows the template to display this information and interact with it through html forms.  There is loads of more information out there about this. But understanding this really helps you attack a project.  In your case you would need to make an outline of what models you will need (more models can always be added/edited later if necessary). Then figure out what pages will display what information. Get at it from there. I wish you the best of django adventures."
django,3715ag,Emnalyeriar,2,Sun May 24 06:12:27 2015 UTC,"Take a look at this diagram. Then read this overview page (seriously, just read it; don't click anything).  Now, break your problem down into models, views, forms, and templates. Start building.  There's no tutorial out there that will fit your needs 100%. The only way to move forward is to start building something. Break it down, and work on a small piece at a time."
django,3715ag,mrjmad,3,Sun May 24 06:18:04 2015 UTC,"i think you has to focus in one task, first models, after the view, i dont not but make one thing to the time, dont attack all the problem at once"
django,3715ag,tpugsley,3,Sun May 24 02:33:11 2015 UTC,"I'm doing this tutorial  http://www.marinamele.com/taskbuster-django-tutorial  it says how to set up your django app but for other, harder task, you need to find something else."
django,36x7b4,lonahex,9,Fri May 22 21:28:01 2015 UTC,"I don't have a problem using collectstatic in combination with grunt/bower. When deploying these are the steps:   bower install (download front-end dependencies like jQuery) npm install (download grunt dependencies like grunt-contrib-uglify) grunt production (compiles scss to css, concatenates and minifies javascript files) manage.py collectstatic   These steps are wrapped in a custom management command. In my template there's an if statement for production, to include the files created by grunt, instead of multiple dev files.  This is really easy to set up, and exactly the way I want it. I'm scared that when Django gets an opinion about how I should integrate npm/bower/grunt, they'll make this more difficult or complex."
django,36x7b4,me-at-work,3,Sat May 23 09:49:36 2015 UTC,"This is exactly what I am proposing. Frontend build process should be decoupled from django. You are doing it the right way IMO.  P.S, was the blog post not clear on this? Did it give away the wrong idea?"
django,36x7b4,pydry,1 point,Sat May 23 10:01:21 2015 UTC,This is exactly what I am proposing. Frontend build process should be decoupled from django.   If you completely decouple it from django how do you get assets that are part of django apps (e.g. the admin html/css/js) and integrate it into the same minifying/concatenation pipeline?
django,36x7b4,TBNL,1 point,Sat May 23 12:43:08 2015 UTC,"A valid concern and part of the bigger problem. I've mentioned in the post about this limitation but this is something I can live with for now. I can use a ""legacy"" system for admin assets but I would rather decoupled frontend tools to generate my actual app."
django,36x7b4,me-at-work,1 point,Sat May 23 13:13:22 2015 UTC,"Sounds solid and easy. Was wondering though, how do you handle browser cache invalidation if the concatenated result changes? Etag?"
django,36x7b4,me-at-work,2,Sat May 23 12:05:24 2015 UTC,This part is handled by Django's CachedStaticFilesStorage.
django,36x7b4,me-at-work,1 point,Sat May 23 14:50:18 2015 UTC,"This is really easy to set up, and exactly the way I want it. I'm scared that when Django gets an opinion about how I should integrate npm/bower/grunt, they'll make this more difficult or complex.   To clarify, I also don't want django get an opinion on integrating with frontend tools. It should do the bare minimum which is know where the bundles will be stored."
django,36x7b4,Skiba_,1 point,Sat May 23 13:30:08 2015 UTC,Tying in with Django's collectstatic is as simple as running grunt before running collectstatic. It doesn't get any more bare minimum than Django not even having to be aware of front-end tools.
django,36x7b4,skolsuper,2,Sat May 23 15:11:21 2015 UTC,Once more. That is exactly what I am proposing. You use your build tools outside django. What are we disagreeing on ?
django,36x7b4,Skiba_,1 point,Sat May 23 15:38:48 2015 UTC,I disagree on using a library or a Django change for this.
django,36x7b4,pydry,1 point,Sun May 24 12:04:42 2015 UTC,"Oh. Okay. If it works for you without adding support for django then fine. I like my dev server to block requests when webpack is compiling. I like devserver to throw errors when webpack raises them... And I like to build bundles with hashed names and give django a way to automatically pick up latest the latest bundle irrespective of the name. If  you don't need those things, then obviously you don't need a library or anything like that."
django,36x7b4,pydry,2,Sun May 24 12:09:43 2015 UTC,"I think people make this more of a problem than it has to be. I use bower and grunt, and it's part of the build deploy for me. I never have an issue concat/minifying my various groups of css/js files and serving them up in my app using the staticfiles loaders.  What exactly is the problem that is trying to be solved?  I've also looked at django-pipeline, but it doesn't seem to use the right approach. If i'm correct, doesn't it load all the static assets on page load? I feel like this is the wrong implementation and that your static assets should be compiled properly prior to release."
django,36x7b4,jstrong,3,Sat May 23 02:55:56 2015 UTC,"Pipeline compiles, compresses (and optionally gzips) everything it needs when collectstatic is run, I think. You put named bundles in your settings to use in templates."
django,36x7b4,brtt3000,2,Sat May 23 03:11:37 2015 UTC,"Ah, ok. Thanks for clearing that up."
django,36x7b4,brtt3000,1 point,Sat May 23 03:17:07 2015 UTC,"What exactly is the problem that is trying to be solved?   To not hook up build/compile process with staticfiles but do it before like you are doing and at the same time make sure django knows exactly how to find any files generated by the bundles.   I've also looked at django-pipeline, but it doesn't seem to use the right approach. If i'm correct, doesn't it load all the static assets on page load? I feel like this is the wrong implementation and that your static assets should be compiled properly prior to release.   This is exactly what I feel as well. We are exactly on the same page. Wasn't that clear from the post?"
django,36x7b4,Whoopska,1 point,Sat May 23 05:35:55 2015 UTC,"This is exactly what I feel as well. We are exactly on the same page. Wasn't that clear from the post?   Yes, but Django pipeline does compile prior to release (during the collectstatic step).  I still don't really see what problem you're trying to solve that pipeline doesn't already do..."
django,36x7b4,Whoopska,2,Sat May 23 12:40:20 2015 UTC,"Yes, but Django pipeline does compile prior to release (during the collectstatic step).   I don't think collectstatic should compile. I think it should collect. How do you use npm/bower with pipeline? I know it supports that but by writing special code to support bower. What happens when JS community comes up with something better than bower? Then we've to add more python code to support that system. What if you want to use browserify? You'll need another python app called django-pipeline-browserify.   See https://django-pipeline.readthedocs.org/en/latest/compressors.html#write-your-own-compressor-class for when you want to use something that is not supported by default. If it exists in the JS world, I should be able to use it without worrying about wrappers and django integration being available for it.  Also, I don't like how tightly coupled pipeline is with django. If I wanted, I should be able to just implement the backend with django while keeping the iOS, Android and web frontends a separate projects. Makes sense for iOS and Android right? Why not for web? Web is also an independent platform.  I think we should embrace the tools JS community has built and use them directly without writing python wrappers over them so we get to define our configuration in settings.py and avoid running an extra command on the shell."
django,36x7b4,pupupeepee,0,Sat May 23 12:59:59 2015 UTC,"I don't think collectstatic should compile. I think it should collect.    I think if it does a good job of compiling (and it does), then it should compile.   How do you use npm/bower with pipeline?   bower install your packages into a static directory beforehand?   Also, I don't like how tightly coupled pipeline is with django.    Django-pipeline is too tightly coupled to... Django?"
django,36x7b4,natmaster,2,Sat May 23 14:59:15 2015 UTC,"Sure. If it doesn't work for you. It doesn't work for you. You can keep using pipeline if you want. I just don't like how it compiles assets. It doesn't work for me. It is too rigid for me to use my tools of choice. Yes, it is too tightly coupled with django; It depends on the staticfiles app and doesn't work without that."
django,36x7b4,natmaster,2,Sat May 23 15:37:23 2015 UTC,+1
django,36x7b4,_under_,1 point,Sat May 23 12:28:06 2015 UTC,"I don't know about the blog but I like the webpack modules. Does this mean every file can be named with hashes, from entry points to split bundles, the whole thing?"
django,36x7b4,andrey_shipilov,1 point,Fri May 22 21:45:46 2015 UTC,"You should be able to do anything you can do with regular webpack as it is just that. Webpack supports bundle splitting and all that stuff, so yes, it should work."
django,36v267,spoetnik,13,Fri May 22 10:30:55 2015 UTC,"Maybe too simple? In this example it's fairly hard to even see the utility in using AJAX. Not to mention you're not even return data, just a text string!   This article doesn't go into any reasons why you'd want to use AJAX, nor does it show how you'd actually process it or make use of it.  You might want to rewrite it to do something useful — say, an autocomplete field where you type a word and the front end generates a table listing all records that match that word."
django,36v267,youlleatitandlikeit,1 point,Fri May 22 14:11:52 2015 UTC,Also with these example always try to have a live working demo and not just the source code link.
django,36v267,Kareck,2,Fri May 22 17:51:31 2015 UTC,"I believe you should be using the deferred queue rather than the success callback.   Deprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are deprecated as of jQuery 1.8. To prepare your code for their eventual removal, use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead.   source: https://api.jquery.com/jQuery.ajax/  more details: https://api.jquery.com/jquery.deferred/"
django,36v267,newpong,2,Sat May 23 09:32:57 2015 UTC,haed
django,36v267,andrey_shipilov,2,Sat May 23 09:52:16 2015 UTC,"This article doesn't mention with a single word what AJAX actually is and how it's different from normal HTTP requests. The short answer: it isn't. The long answer from Django's point of view:  class HttpRequest(object):      # ...      def is_ajax(self):         return self.META.get('HTTP_X_REQUESTED_WITH') == 'XMLHttpRequest'      # ...   Articles like this don't make it easier for beginners, they make it harder ..."
django,36x14t,syphon7,3,Fri May 22 20:39:44 2015 UTC,"""python manage.py runserver"" has a built in reloader if the project has debug set to true"
django,36x14t,Hyatt03,1 point,Fri May 22 20:59:01 2015 UTC,You mean runserver right?
django,36x14t,lonahex,1 point,Fri May 22 21:26:59 2015 UTC,Yes
django,36x14t,Hyatt03,1 point,Fri May 22 21:29:05 2015 UTC,This is exactly what I was looking for! Thank you!
django,36x14t,phinnaeus7308,1 point,Fri May 22 22:08:04 2015 UTC,"In addition to runserver, I highly recommend PyCharm, which handles that for you."
django,36vpi6,dsizemore,1 point,Fri May 22 14:26:23 2015 UTC,"The box you are seeing is the default input widget. You can activate groups and permissions by selecting them (see the help text):   Hold down ""Control"", or ""Command"" on a Mac, to select more than one.    You are expecting the filter_horizontal widget you can manually enable in your own admin classes. filter_horizontaluses JavaScript to replace the default Select widget. You probably have a problem regarding the (js) statics in your production setup. Try running manage.py’s collectstatic command again and look out for errors. Also check your static files configuration.    edit: wording"
django,36vpi6,isstatingtheobvious,1 point,Fri May 22 15:43:40 2015 UTC,"Thanks for the reply. I'm not sure I follow you completely.  I don't have filter_horizontal widget manually enabled anywhere in my code, so I'm not sure how that's showing on local but not on production server. That ""what I should see"" screenshot above is just what you see by default in django admin if I'm not mistaken?  Seems like my static files configuration is okay considering everything else appears to be working?"
django,36vpi6,isstatingtheobvious,1 point,Fri May 22 18:19:41 2015 UTC,"Yes, you are right, the filter_horizontal is preconfigured for the user model. Sorry for the confusion with the manual configuration. I just wanted to point out where the problem might come from.  As I know close to nothing about your configuration I can only guess what’s going wrong in your production setup. From what I know I still would start by checking if the JS is the problem:   Have you tried calling collectstatic again and pay attention to possible errors – maybe there was a problem last time you called it and only some files where copied / linked … Try loading the Django Admin’s JS files in your browser to see if there is a static file or permission problem (404 or 403 errors when loading /static/admin/js/SelectBox.js or the like – depending on your static files configuration. Check your source code!) Have you included additional Admin-Media-JS-Files? Check your JS console for errors. Generic: Check the error logs of your server"
django,36uh4g,Prokinetics,2,Fri May 22 05:47:30 2015 UTC,"I'm pretty sure the issue is if  if request.method == 'POST':   Evaluates to false, the method doesn't return anything. You need to return something from the else."
django,36uh4g,HipposGoneWild,1 point,Fri May 22 05:52:18 2015 UTC,Thank you for this. It was an syntax error - indentation errors.
django,36tn61,arctic_feather,2,Fri May 22 00:53:08 2015 UTC,"Your question is discussed here: http://stackoverflow.com/questions/14666199/how-do-i-create-multiple-model-instances-with-django-rest-framework  TL;DR:  POST a list (json, xml, etc.) to a ViewSet that maps to a serializer with many=True in its definition.   The relevant docs: http://www.django-rest-framework.org/api-guide/serializers/#dealing-with-multiple-objects"
django,36tn61,ezrock,1 point,Fri May 22 03:46:00 2015 UTC,"I haven't tried to set this up, but DRF supports nested objects so you might be able to create a container object that contains a list of child objects. When you post the container it should/may create all the children as well."
django,36rt49,willyhakim,9,Thu May 21 16:45:25 2015 UTC,"[edit: Just realised how rambling this response was once I posted it. Sorry!]  Generally I have found that people who build HTML/JS for a living are pretty reluctant to install dev environments because it's outside of what they have needed to do in the past. Installing and managing a dev environment can be pretty intimidating if you've not done it before.  If you are working with people that understand source control and aren't too scared of a command line, it is probably worth getting them to setup a local dev environment. If not, stick the site on something like a AWS micro instance and give them SFTP access. You can then login and commit their changes into git when they give you the nod.  Vagrant takes most of the pain out of getting a dev environment to someone else, with the added benefit that you don't have to worry about what OS they are running, or what other stuff they have installed that could conflict. It works best if everyone uses it.  A populated database is also important. I provide a shell script that pulls down the latest live DB.  Whichever dev environment method you use, one issue that comes up often is not knowing where templates come from. Directory hierarchy, inheritance, includes, CMS plugins, clashing filenames, inline HTML in the views, etc, all gets pretty confusing. Trial and error based experience seems to be the only answer here.  If they are working on existing templates, just pointing them to the template markup docs is sufficient in many cases. If they are starting from scratch, maybe a little more background is required.  While frameworks like Django make it sound like your front end people will never need to (or shouldn't) touch your models and views, in practice all but the most minor amends usually require some changes up the chain. If you have people willing to make those changes rather that ask you to do them, pull requests are probably the best way to oversee that sort of thing.  I pretty much only work with freelance designers nowadays, so our process is less integrated: They deliver static HTML and JS and their responsibilities end there. I take their code, pull it apart and template it up. Any changes after that are my responsibility or they update their static code and I use diffs to work out what to copy and paste over (sounds painful, but it's usually just a few lines)."
django,36rt49,chronug,3,Thu May 21 18:01:49 2015 UTC,"We have very few backend engineers and very many front-end. We have everyone checkout the source code with Git and setup a local development environment. It might not be something they already know how to do, but they can learn. Everyone here is a technology professional who is getting paid money for this job. If they can't deal with that, then they aren't qualified.   So far not one person has had a problem."
django,36rt49,apreche,2,Thu May 21 18:31:53 2015 UTC,I really like using docker with django so front-end devs can edit templates and not have to worry too much about getting their environment set up. I still expect them to know a few basic django commands like how to remake the database.
django,36rt49,bufke,1 point,Thu May 21 19:59:35 2015 UTC,I try to always make some kind of fab fresh_db command to boot everything up and generate some fake data to play with.
django,36rt49,ckcollab,2,Thu May 21 21:04:12 2015 UTC,"at my company we emphasize versatility. everyone can do at least a little work on the frontend or backend if necessary. however, people still have specializations and their natural comfort zones.   our guys who specialize on the frontend don't write much code for the django side of the app, but they are expected to be fully literate with Python and django's design patterns. They need to, at minimum, be able to look through the code base for the server endpoint they are working with and figure out what its behavior will be. They should be able to extend the functionality of that endpoint if necessary, for simple changes anyway."
django,36rt49,metaphorm,1 point,Thu May 21 20:11:13 2015 UTC,"That would probably depend on if you're using a JS framework to handle the front end or using the templating engine.  If you're using the templating engine make things like your object_list an understandable name. The flow control, loops, and filters on the front end are pretty easy to learn as you go so I wouldn't stress it if they had zero django experience."
django,36rt49,TehMoonRulz,1 point,Thu May 21 17:10:12 2015 UTC,"I've been working a few django projects with strictly front-end coders.  The way I've gotten around them knowing/installing django is I put deploy on a server with their own git branch, make a list of files that they can edit and let them connect with Sublime Text.  It works very similar to a local env but gives me a lot more control and less setup baggage for the other coder.  Also means instant reviews for the client."
django,36rt49,almithani,1 point,Thu May 21 17:22:26 2015 UTC,Front-end engineers don't necessarily need to know any Django. It's great when they are interested and want to learn as a full-stack team member is more valuable. But at my current company our front-end people have more than enough AngularJS to keep them busy.
django,36rt49,never_safe_for_life,1 point,Fri May 22 06:32:31 2015 UTC,"I'm a designer/frontend dev comfortable installing requirements, setting up VMs, making some minor django model edits, and then migrating my local database so I can keep working. I'm much more comfortable designing and writing HTML/CSS, but it was a very good day when I learned how django templating worked (after nothing but hacking at PHP spaghetti before). I picked it up very quickly, and after about four years it's a drag to work on anything else.   Here are some things that would make working with me easier for both of us.    before you send me your repo, make sure the requirements file is accurate. I can now trudge my way through ""X not found"" error messages, but when I was new to this stuff, command line errors felt like I had broken something, and I felt helpless. If there's anything beyond the typical VM setup that I'll need installed before I start, let me know. I have postgres, Command Line Tools, and Xcode installed already, but if your developer needs those things, ask him to get those started before you're both sitting there staring at his screen (because Xcode is a huge download). Same goes for things like sublime text plugins that you take for granted, etc.  Regarding templates, give them a quick overview of extends, includes, blocks, and comments. Show them how to find the name of a template tag in a models.py file. Then show them an example of a for loop. They don't necessarily need to know how to write their own of each of these things right off, but knowing what to look for as they're copy/pasting will be a good start.    Be patient during this process and consider it an investment. If they're familiar with how any modern templating system works they'll pick up what you need them to know in Django pretty quickly. If this is their first experience with a templating system, hopefully they see the potential quickly and soak it up. Good luck!"
django,36rt49,TheRover06,1 point,Fri May 22 13:33:46 2015 UTC,We don't require anyone to spend time and/or setup new development environments.  By using Vagrant/Ansible (Insert your favorite orchestration tool) we create identical environments for each developer.  It's important to think of this problem as one for every developer and not just for the front end guys.  All developers can benefit from an easy to setup and consistent environment.
django,36rt49,dstegelman,0,Sun May 24 02:49:59 2015 UTC,Setup something like https://www.pythonanywhere.com/  Its just easier for everybody
django,36r404,RamirezTerrix,9,Thu May 21 13:31:57 2015 UTC,"I lean to fat models, so yes, put the function on the model. You can also create a utils.py where you put your helper functions."
django,36r404,xBBTx,3,Thu May 21 13:38:50 2015 UTC,"Putting the logic at the ORM level makes it very hard to optimize. You end up with information retrieval coupled with information processing which leads to problem such as ""I have the data ready at hand but the formatting function insists on querying the database""."
django,36r404,patrys,2,Thu May 21 15:25:19 2015 UTC,"Very valid point, I like to be naive in this though. Get it working first, and when your app gets popular enough, then start scaling and optimizing.  For a project I've done we have a lot of actions on the models, and starting optimizing by prefetching stuff and checking the prefetch cache on the instance to avoid additional queries."
django,36r404,xBBTx,1 point,Thu May 21 17:36:47 2015 UTC,"Good point. Is there an Mord elegant way instead oft making a list oft dictionarys and Hand it over to the template, well in the end the database objects are Mord vor less thr same thing"
django,36r404,yaix,1 point,Thu May 21 16:00:07 2015 UTC,"If that list is very memory expensive for some reason, you could do it as an iterator. But remember PEP20, ""Simple is better than complex""!"
django,36r404,metaphorm,1 point,Thu May 21 16:46:10 2015 UTC,"this is a concern, you're right. a lot of the time its solved by making good use of prefetch_related and select_related on your queries though, so its not always a problem."
django,36r404,eddieSullivan,2,Thu May 21 19:37:54 2015 UTC,"I started out thinking like you, but as time goes on I'm leaning more towards keeping the models really simple and putting all the logic in the views.  For one thing, I only want there to be one method on each model object that commits data, and that is ""save()"". That way I can see exactly when and where the database gets updated by grepping. I keep my model methods read-only for the most part.  Obviously it's a matter of personal taste, but that's what works for me in practical usage."
django,36r404,buleria,1 point,Thu May 21 15:40:36 2015 UTC,"I think keeping models simple is good. I'd rather treat them as a simple DAO with some conveniece read-only methods.  Things get tricky when you have, say, a DRF-driven API for the typical user (frontend) coupled with django-admin (backoffice, administration).  In such case the logic begs to be factored out to either functions or some 'I know the business logic' object that takes arguments from either a DRF Serializer, or a Django form. Keeping this logic in models is tempting, since there's no better default place for this.  Django's views are in fact controller-views, which is ok for simple stuff, but I think it's good to plan ahead and detach the logic from views and forms early on."
django,36r404,Airith,1 point,Thu May 21 21:48:38 2015 UTC,"Yeah, fat models could help me loose some of theese nested loops like:  for car in cars:      data = {name: cars.name}      # get all the stuff via relations and      # multiply the stuff...   I use a utils.py for generating graphics out of the data."
django,36r404,ckinsey,3,Thu May 21 13:42:58 2015 UTC,As long as the function supports select_related to avoid unnecessary queries then in the model is fine. You could also write the function in the views that only actual views can see (ie not in urls).
django,36r404,metaphorm,1 point,Thu May 21 17:09:26 2015 UTC,select_related... well I will use it from now on
django,36nn4s,charettes,1 point,Wed May 20 18:26:11 2015 UTC,Anyone know if updating from v1.8 will break things? Sorry if this question is naive but it'll be my first time updating a live site.
django,36nn4s,enesimo,6,Thu May 21 09:52:35 2015 UTC,"No, shouldn't break anything.  It's always worth reading the release notes to see if any backwards incompatible changes are mentioned. There are none mentioned here, nor in the 1.8.1 release notes (https://docs.djangoproject.com/en/1.8/releases/1.8.1/)  Generally minor version releases (where only the final part of the version number changes) are completely backwards compatible, although always worth reading the release notes to be absolutely sure, as they will break backwards compatibility if absolutely necessary (eg for a security concern). I can think of at least one example where that was the case, but it's extremely rare."
django,36nn4s,Rolo,1 point,Thu May 21 10:03:01 2015 UTC,That's all I needed to know-- where to look for the info I need to know for next time. Thanks Rolo.
django,36qnfi,stolen_loom,6,Thu May 21 10:25:39 2015 UTC,Should be in a migrations directory inside your app directory.
django,36qnfi,SMG247,2,Thu May 21 10:32:18 2015 UTC,"You may find that faking the migrations works better for what you need to do (I assume that you had a failed migration somewhere). If you add the --fake flag to the migrate command, it will mark the migrations as run but won't actually run them. You can also edit them directly since it's just Python code."
django,36qnfi,01hair,1 point,Thu May 21 11:15:37 2015 UTC,"It was a weird error which wouldn't let me alter a field in a model, but which kept trying to complete the failed migration even after I changed the model back to its safe form."
django,36qnfi,01hair,1 point,Thu May 21 17:17:33 2015 UTC,"Was it a MySQL unique constraint? I had an issue where MySQL wouldn't let me alter the unique constraints - something about a foreign key, if I remember. I ended up dumping the table with mysqldump, manually editing the SQL table definition, and then loading the table back in."
django,36qnfi,spookylukey,1 point,Thu May 21 18:29:47 2015 UTC,"It's with PostgreSQL. I think there was something about a unique constraint but to be honest I don't fully understand what happened. It stopped the site from working completely, so I just worked as fast as I could to delete the changes back in time until I got to a place where everything was okay.  Now I've deleted the whole table and re-created a nearly-identical one, and I'm going to be more careful with my ManyToManyField migrations.  It had been a ForeignKey and I changed it to a M2M field. The weird thing is that I've done that before and it was okay.  Oh well... everything's fine now. I wish I understood it better though."
django,36qnfi,colly_wolly,2,Thu May 21 20:20:09 2015 UTC,"The definition of migrations are stored in a 'migrations' folder inside each app used in your project. (They could also be in other folders if you are using South e.g. 'south_migrations', or whatever is defined in SOUTH_MIGRATION_MODULES  Then there are database tables which store information about which migrations have actually been applied to that database."
django,36qjih,willm,10,Thu May 21 09:28:37 2015 UTC,"If you find yourself needing to access the request object in lower layers of your code you might want to make sure your entire architecture is not upside down. You are never meant to pass the request to layers below the view, such as forms or the ORM. There is always a better and cleaner way to do what you want. For example if you need to access the user, pass the object explicitly as a parameter."
django,36qjih,patrys,2,Thu May 21 10:31:03 2015 UTC,"you might want to make sure your entire architecture is not upside down   ˙dn ʎɐʍ ʇɥƃᴉɹ ǝɥʇ s,ʇI"
django,36qjih,DustPuppySnr,2,Thu May 21 13:01:11 2015 UTC,"Yes. I'm a firm believer that the request object should not leave the view. There may be exceptions, but they are few and far apart."
django,36qjih,spookylukey,1 point,Thu May 21 10:58:53 2015 UTC,"Totally agree. There are a lot of hidden costs to the global request object i.e. not explicitly passing request information in to every function that needs it:   when you need to test some code and find out that it needs some global setup to work correctly when you realise that some code takes a while to run, and can and should be done as a background task. You set it up as a background task e.g. using celery, but suddenly there is no ""current request"". Your code will now break - either loudly if you assumed get_current_request never returns None, or, worse, silently if the code assumed get_current_request might return None.   Instead:   pass the request object through each layer that needs it or, better, pass the things that are needed from the request (e.g. the current user, current language) through the layers.   IMO, it is only acceptable to use a global request object is when you are using a framework or library which 1) is very important to you and otherwise fits your needs well and 2) makes it impossible to do it any other way.  I do also make an exception for things that are both non-critical and very much cross cutting, for which it would otherwise be very awkward to pass the request information to explicitly. For instance, if I want to do analytics tracking of certain events, I might fire a signal when that event occurs. The event handler needs to include information from the request, such as IP address and user, and then log it. For these things I might use a global request object."
django,36qjih,pemboa,0,Thu May 21 13:07:55 2015 UTC,"How about a situation where you need to query for an IP address to a network service, which may be used multiple times in a given request (and from many places in the code base). The IP can and does change from time to time.  Then a new requirement comes in that the host IP must not change during the processing of a request. Suddenly you require a 'host' parameter which must be passed through several layers of callstack.   One option would be to update the signatures of dozens of methods in a 5 year code base, so that 'host' gets to where it is needed. That would work, but the 'host' parameter would be a confusing addition to many methods. And if I need to use the service anywhere else, I would have to repeat the process every time.  Or, you write a simple middleware which caches the host on the request object. Not a 'global request object' per se, but a thread local request object. Since it is treated as a cache, it doesn't change the behaviour of external scripts and background tasks.  I've gone 5 years without a 'get_current_request' method, but I think this a reasonable solution."
django,36mo8x,arunvr,3,Wed May 20 14:39:32 2015 UTC,Arun...I know I've said it before...but you really do rock.
django,36mo8x,rnevius,1 point,Wed May 20 17:36:11 2015 UTC,You just made my (cake) day :)
django,36mo8x,rnevius,1 point,Thu May 21 10:54:04 2015 UTC,Happy cake day!
django,36mo8x,sriramracer,1 point,Thu May 21 11:58:15 2015 UTC,Arun is the best. :-)
django,36mo8x,mroximoron,3,Thu May 21 21:27:03 2015 UTC,Exception syntax is the wrong way around:  BaseException as e
django,36q2gt,ploopley_kid,1 point,Thu May 21 05:44:30 2015 UTC,"Do you know Python?  Start with that.  HTML and CSS (descriptive languages) are entirely different beasts than Python/PHP (programming languages).  It's a long road, take it one step at a time, start with some Python experience, then move to Django."
django,36q2gt,aqua_scummm,1 point,Thu May 21 07:23:04 2015 UTC,I would recommend this youtube series: https://www.youtube.com/watch?v=3DccH9AMwFQ&list=PLEsfXFp6DpzRgedo9IzmcpXYoSeDg29Tx&index=1
django,36q2gt,rdom22,1 point,Fri May 22 14:30:44 2015 UTC,"The best way to get yourself up to speed as python webdev is to use the realpython.com tutorials. These guys are simply the best, and the money you pay is well worth it."
django,36q2gt,willyhakim,1 point,Fri May 22 15:36:35 2015 UTC,Create a Django project from scratch (Python 3 friendly!) http://www.marinamele.com/taskbuster-django-tutorial
django,36i9nb,_DrkSephy,8,Tue May 19 16:17:15 2015 UTC,"Cool, but is it really a good idea to expose all of your keys like that?"
django,36i9nb,catskul,2,Tue May 19 20:27:46 2015 UTC,"I wonder if the keys are real, I've been told there are bots searching github for those keys constantly."
django,36i9nb,Whoopska,2,Tue May 19 22:18:48 2015 UTC,I'm not familiar with startproject --template=... but this seems like what it was made for. Any reason not to use it?
django,36i9nb,Whoopska,0,Tue May 19 22:40:59 2015 UTC,"/u/Catskul, the reason for providing starting keys is so that developers can get up and running quicker. There are minimal risks with exposing the keys if they are not tied to a personal account. Thank you for the feedback,  I have been thinking of other ways to provide keys while not exposing them in a public repository.  /u/Whoopska, the keys are real. There are bots searching Github for keys, but not many APIs do this. Twilio, for example, does indeed search the web to check if their keys have been leaked.   With regards to the template, those templates do not provide OAuth support out of the box. Having the ability to access various protected resources from Twitter or Facebook for example requires writing a fair amount of code. While the code to do this isn't extraordinary, at a hackathon (or perhaps a personal project), there may not be time to do all of this from scratch. Django Hackathon Starter instantly gives you the ability to access all of this API data, and allows a developer to spend more time building out their application instead of focusing on functionality such as basic user registration, Sign in with Twitter, use OAuth 2.0 protocol to get Twitter data, etc."
django,36i9nb,Whoopska,2,Tue May 19 22:50:17 2015 UTC,"If you mention people with /u/whoopska instead of @whoopska, it will notify them (or reply to their comments). I saw there were some more comments and checked out this thread, but it is unlikely that /u/catskul will see your comments."
django,36i9nb,sriramracer,3,Wed May 20 08:20:27 2015 UTC,The keys are real and you are keeping them in public repo? I can't believe you are even trying to defend this! What  part of security do you not understand?  API keys provided by django-hackathon-starter: https://github.com/DrkSephy/django-hackathon-starter/blob/master/hackathon_starter/hackathon_starter/settings.py#L110-L155
django,36i9nb,dohko_xar,0,Tue May 19 23:23:49 2015 UTC,I'm well aware that the keys are public - it is not the first project to do such a thing: https://github.com/sahat/hackathon-starter/blob/master/config/secrets.js  The keys provided in Django Hackathon Starter are throw away keys that are not tied to any important account. I'm not trying to defend it (but I am also not against it) - it's simply to help developers get the project up and running without having to gather their own keys.
django,36i9nb,droidballoon,3,Tue May 19 23:30:30 2015 UTC,Do you understand that those keys will be used to abuse the APIs and then become useless as they get canceled?
django,36i9nb,droidballoon,2,Wed May 20 12:09:18 2015 UTC,If the accounts are not important for anyone then there's no harm done.   One more important thing is that newcomers can get the idea that posting keys are the norm.
django,36ezcc,seanboyd,10,Mon May 18 21:35:30 2015 UTC,"We maintain a list of high quality, current tutorials at http://twoscoopspress.com/pages/django-tutorials"
django,36ezcc,pydanny,1 point,Mon May 18 22:05:56 2015 UTC,Thanks very much for this! I will check this out
django,36ezcc,JoshAddington,1 point,Mon May 18 22:39:49 2015 UTC,"pydanny, is there a reason that you and your wife decided not to include Tango With Django? Is it because it still focuses on Python 2.7?"
django,36ezcc,pydanny,1 point,Tue May 19 03:32:28 2015 UTC,"It's been a while since we visited it, but the last time we updated the page, Tango with Django 1.7 had a number of issues that were causing grief for beginners. We took them off not out of malice, but because we try to present only the best the community has to offer.  If Tango with Django 1.7's issues are resolved, we would be delighted to put them back up. Tango with Django is a very good reference and we love having them in the community. :-)  As for Python version, we consider any tutorial that works for Python 2.7 or 3.4+."
django,36ezcc,garfonzo,3,Tue May 19 15:15:16 2015 UTC,"What about the tutorial that they provide right from the website? When I first started, I did this tutorial straight through and learned a tonne. From that tutorial I felt confident to start a smallish project, like a blog."
django,36ezcc,Gargan_Roo,2,Tue May 19 04:51:31 2015 UTC,https://realpython.com/ - Course 3 is focused mainly on Django.
django,36ezcc,Gargan_Roo,1 point,Tue May 19 02:15:48 2015 UTC,This looks great! I am buying it!
django,36ezcc,Gargan_Roo,2,Tue May 19 02:24:45 2015 UTC,"Try this promo code, see if it still works:  40OFF4KS  https://realpython.com/promo/"
django,36ezcc,rayed,1 point,Tue May 19 02:31:06 2015 UTC,"It does work, thanks alot dude!!! 20 bucks off, did you take this course then?"
django,36ezcc,kennethlove,1 point,Tue May 19 02:41:18 2015 UTC,"No prob. I just got it myself but am pretty impressed so far.  Here's the blog post I found it through: https://realpython.com/blog/python/learn-python-the-methodical-way/  Something I plan to use in conjunction with the method above: https://sivers.org/srs  Good luck, and godspeed!"
django,36ezcc,IAmNotWizwazzle,2,Tue May 19 03:39:23 2015 UTC,"Not tutorial per se, but I wrote a small simple CRUD app, but I found it useful introduction to my team members:  Django CRUD (Create, Retrieve, Update, Delete)  https://rayed.com/wordpress/?p=1266  Based on pydanny and Miguel Araujo presentation:  http://www.slideshare.net/pydanny/advanced-django-forms-usage  Thanks pydanny :)"
django,36ezcc,pydanny,2,Tue May 19 20:11:05 2015 UTC,"I'll be releasing my first Django course on Treehouse in about a month. That link will get you a free month, btw."
django,36dh9b,michaelherman,3,Mon May 18 14:51:31 2015 UTC,"What do you recommend for resetting security-related info (Postgres password, Django secret key etc)? I can imagine it would be tempting to just clone the repo and deploy, and everyone ending up with the same DB_PASS and SECRET_KEY in .env.  Is there a streamlined way to force a reset of all sensitive variables before deploying?"
django,36dh9b,chhors,1 point,Mon May 18 23:52:08 2015 UTC,Nope. Just update the file by hand.
django,36dh9b,chhors,2,Tue May 19 02:32:36 2015 UTC,"In that case, since the Postgres container doesn't get the .env file passed into it, I imagine there would also need to be a step to manually update the postgres user password to reflect any changes made to DB_PASS?  Additionally, rather than using the postgres account, it may be worth adding a non-superuser account to Postgres, which only has the privileges it needs on the Django DB itself.  I'd also suggest not adding .env directly into the repo, but replacing it with something like .env_sample. Then, the user would make their own, non-source controlled .env file based on .env_sample. If a fork of this code with actual passwords gets pushed back up to Github, credentials may be exposed in the commit history."
django,36dh9b,chhors,1 point,Tue May 19 03:03:26 2015 UTC,"Good points.  Yes, you can update the database manually or use a Dockerfile to build it with a custom username/password/etc.  Perhaps I'll just update the wording of the blog post to state that the .env file is an example only and should be updated and not kept in version control. Sound good?"
django,36dh9b,chhors,1 point,Tue May 19 03:44:10 2015 UTC,"Personally, I'd opt to assume people won't read the instructions, and include a manual step (e.g. copying an .env_sample file) to force those forking to create their own settings. It's easy to accidentally commit sensitive info into the repository, and painful to undo later."
django,36dh9b,ben174,1 point,Wed May 20 01:50:30 2015 UTC,"There's only so much that can be done. If a dev does not have any understanding of sys ops, s/he should probably not be deploying an app on anything but a PaaS."
django,36dh9b,Mekhami,1 point,Wed May 20 14:52:00 2015 UTC,"Well, it's certainly subjective. We all suffer from Dunning Kruger effect in some realm of our knowledge, and for some of us, it's going to be deploying apps / how to handle credentials. Some people just aren't going to know they don't know enough, and so I tend to bias towards more development effort up front to present self-administered foot shooting later."
django,36dh9b,Mekhami,3,Fri May 22 01:05:32 2015 UTC,Thank you for this. I've been looking for an example of a Dockerized setup without using runserver. It's scary how many people out there are just creating containers with single command ./manage.py runserver and deploying to produciton.
django,36dh9b,mbrochh,1 point,Mon May 18 17:12:02 2015 UTC,I've been bashing my head against Vagrant+Ansible to set up a simple django project.  Is it possible that Docker is this much simpler? Or am I missing something?
django,36dh9b,Mekhami,2,Mon May 18 15:22:16 2015 UTC,"Yes, it's much easier. Do you just want to get it setup locally?"
django,36gcfr,mignonmazion,1 point,Tue May 19 04:18:40 2015 UTC,"Interesting. I love seeing how people handle patterns that aren't necessarily well handled by django. I usually do this by having a form with only the field I want to change, setting field=value in the get_initial, and letting it save as normal. The form's clean_value makes sure that submitting it saves the right thing (no sense in letting users give themselves refunds when they haven't yet paid for something if we're talking status change). I think if I wanted to do a confirmation, I'd probably opt for onsubmit=""return confirm('Ya damn sure?')""but that is more because it is easily available than a good experience (though it is probably better on mobile).  Another option that might be preferrable if the action is something like triggering a payment is not to update any fields, but just to have the form_valid change the status / execute the payment as we'd want."
django,36fmfu,IamYourGrace,3,Tue May 19 00:32:35 2015 UTC,"Your post is missing two important things for anyone who wants to help you: the traceback and the Python code (we probably only need the views.py from your app, but the error could be in models.py as well).  Finding the traceback from an error on your production server (with DEBUG=false) depends on the details of your hosting. With many shared hosting situations, they are available in a log file on the server.  Ideally, you would reproduce the error in your dev environment (with DEBUG=True). Then the traceback would be displayed in the browser, instead of the 500 error page."
django,36fmfu,thalience,2,Tue May 19 00:56:37 2015 UTC,"yes. Definitely. If I had to guess, it sounds like Unicode decoding errors in python2, but my first thought was, ""did OP read and/or Google the traceback?"""
django,36fmfu,erewok,1 point,Tue May 19 05:10:08 2015 UTC,"Yes I've tried google it and find a solution in other forums for a few days now but I just forgot to write that, my bad. I've come to that conclusion as well and it really bothers me because on all the other views and functions were I handle unicode input data (that haven't been POSTed with ajax) it works just fine. So it must be a combination of the datatype from the ajax post and some python unicode problem. I've posted the traceback code and view code in this thread. If you wouldn't mind please have a look. Maybe I've just stared myself blind on this problem."
django,36fmfu,thalience,1 point,Tue May 19 16:45:17 2015 UTC,"Edit; All the print are just for me when I've tried find where the error might occur... Here is the code for the view:  def save_translations(request): lang = request.POST.get('lang', None)  new_translations = request.POST.get('newTranslations', None) //newTranslation is what i called     arrayWithStuff in the original post print type(new_translations) new_translation_array = eval(new_translations)  # Turn the data into an array save_translation_background(new_translation_array, lang)  languageform = SelectLanguageForm token = get_or_create_csrf_token(request) c = {'form':languageform, 'csrf_token': token}  # c.update(csrfcontext(request))  return render_to_response(""base.html"", c)   and here is the function that handles the input data and saves it to the database:  def save_translation_background(trans_list, lang): print ""KOM IN"" for ele in trans_list:      cleanPhraseID = ele[0]      x = len(cleanPhraseID)-1     id = cleanPhraseID[1:x]     # print id     cleanPhrase = CleanPhrases.objects.get(pk=id)     # print cleanPhrase     new_translated_phrase = ele[1]     # print new_translated_phrase     allNewPhrases = []     # new_translations = eval(new_translations)      if len(new_translated_phrase) > 1:          y = 0         addPhrases = []         allClean = CleanPhrases.objects.filter(language=""en"")         phrase = """"         for i in new_translated_phrase:             j = urllib2.unquote(i)             print j             if j == ""glass"":                 j = "" glass ""             if j == ""ingredient"":                 j = "" ingredient ""             if j == ""tool"":                 j = "" tool ""             phrase += j          # Substitute dubble(or more) white spaces with one white space         re.sub(r' +', ' ', phrase, re.UNICODE + re.IGNORECASE + re.DOTALL)          for p in allClean:             if p.phrase_text == cleanPhrase.phrase_text:                 addPhrases.append(p)                 # print p           # print phrase         z = 0         # print addPhrases         while z < len(addPhrases):             aP = addPhrases[z]              # print addPhrases[y].drink             phrase_PL = eval(aP.phrase_pos_list)             new_phrase = phrase             # print phrase_PL             for ing in phrase_PL:                 # print ing[0]                 term_ins = Termbank.objects.get(pk=ing[0])                  if Termbank.objects.filter(term_id=term_ins.term_id, language=""sv"").exists():                     term = Termbank.objects.get(original_term=term_ins)                     # print term.name                      # print ""-----""                     # print new_phrase                     new_phrase = re.sub(r'\s\bglass\b', "" [""+term.name+""|glass|""+term.term_id+""] "", new_phrase, 1, re.UNICODE + re.IGNORECASE + re.DOTALL)                      # print new_phrase                     new_phrase = re.sub(r'\s\btool\b', "" [""+term.name+""|tool|""+term.term_id+""] "", new_phrase, 1, re.UNICODE + re.IGNORECASE + re.DOTALL)                       print ""Ingrediens""                     new_phrase = re.sub(r'\s\bingredient\b', "" [""+term.name+""|ingredient|""+term.term_id+""] "", new_phrase, 1, re.UNICODE + re.IGNORECASE + re.DOTALL)              print new_phrase             pos = aP.original_phrase.position             d = aP.original_phrase.drink             translated_phrase = Phrase(phrase_text=new_phrase, position=pos, drink=d, language=lang)             translated_phrase.save()             # print translated_phrase             print ""SAVED!""             z += 1   This is the error message I get in the Javascript-console in Chrome: POST http://127.0.0.1:8000/save_translations/ 500 (INTERNAL SERVER ERROR)jQuery.ajaxTransport.send @ jquery-1.10.2.js:8706jQuery.extend.ajax @ jquery-1.10.2.js:8136(anonymous function) @ main.js:169jQuery.event.dispatch @ jquery-1.10.2.js:5095jQuery.event.add.elemData.handle @ jquery-1.10.2.js:4766  and line 169 in main.js is the one were the jquery Ajax function starts:  $.ajax({                 type: 'POST',                 url: '/save_translations/',                 dataType: 'json',                 data: {                     'newTranslations': allPhrases, 'lang': language                 }             });   I have DEBUG=True in the settings file and unfortunatly it doesn't display anything else then what i wrote above here. And then again, it works perfectly fine when there aren't any special characters like åäö and so on. So im thinking that there is an encoding problem somewhere but I can't figure out where it could be. If i get any success I'll let you guys now so no one helps me in vein."
django,36fmfu,thalience,3,Tue May 19 16:10:49 2015 UTC,"The thing that immediately jumps out to me is this line:  new_translation_array = eval(new_translations)  # Turn the data into an array   EVAL() IS NOT HOW YOU PARSE JSON DATA!!! EVER!   Sorry for shouting, but this is a remote-takeover exploit of your site, right there. Anyone who can POST to that URL can execute arbitrary python code inside your app. Even if you are 100% positive that your site will never be publicly accessible, doing this is a sure source of obscure bugs.  Python has a built-in json module for parsing and formatting JSON data, so use that instead.  This may not 100% solve your problem, but it should get you a meaningful error message if it doesn't. Reading the unicode section of the django docs should get you the rest of the way there."
django,36fmfu,thalience,1 point,Tue May 19 17:34:56 2015 UTC,"Thank you! I know this isn't the best of code and I'm no programmer, im just building this site for evaluating a user interface for a school project that only runs locally on my computer, this code will not be one any server that can be access from any computer. I'll look it up! Thanks again.  EDIT; I've had a look at that I now it works perfectly fine :) Thank you. I just have to redo the function that handles and saves the data but that's no problem."
django,36d6s1,spookyrufus,1 point,Mon May 18 13:18:40 2015 UTC,Take a look AngularJS and Django Rest Framework.
django,36d6s1,TheFrenchPoulp,1 point,Tue May 19 00:40:42 2015 UTC,"what would you say the learning curve is for Angular? I've almost picked it up many times, but never really did because of how long it may take to get up to speed. Comments?"
django,36d6s1,TheFrenchPoulp,1 point,Tue May 19 06:23:49 2015 UTC,"You could use jQuery instead but AngularJS adds structure to your front-end application which is what you need to avoid boilerplate code. With jQuery of with vanilla JavaScript you will often find yourself do things by hand in a non-generic way.  To smooth your learning curve you could see some simple AngularJS + Django project, in order to feel the good practices.   I'm a back-end developer, and after a few weeks I was already fluent with AngularJS."
django,36d5hl,spookyrufus,1 point,Mon May 18 13:05:16 2015 UTC,"You can set up the initial data for step N + 1 in the get_form_initial() method, having it look up data based on what was submitted in step N.  get_form_initial() gets the current step passed in to it, making it easy check which step you're on and make decisions, then you can get the cleaned form data from step N using get_cleaned_data_for_step(), using that to get your template name and process the template as needed to go into step N+1's form."
django,36d5hl,jmichalicek,1 point,Mon May 18 20:48:32 2015 UTC,thank you. I like the solution. What would you recommend instead for temporary data that needs to be stored across steps? Should I just have some extra fields in the FormWizard class and assign them within the get_form_initial() method? or would that be a bad practice?
django,36d5hl,jmichalicek,1 point,Mon May 18 21:05:54 2015 UTC,"If this is not data that is directly part of a previous form, but things such as calculations looked up based on the form data, you could stick them on request.session (or in the cookie if you're using the Cookie based wizard) and retrieve them at a later step - this is what the FormWizard is doing with the previous form data already when you call get_cleaned_data_for_step(), so adding a bit more data is no big deal.  Just make sure to not overwrite the old form data keys and clean your session data up so that you don't get weird artifacts from using the form once and then going to it a second time.  Putting them in the form as hidden fields would also work, but it would allow curious/malicious users to fiddle with them."
django,36d2ka,Gruzdaz,2,Mon May 18 12:34:07 2015 UTC,"Yes! This will work! Just create your repo on Github and push the changes to it from your local machine. Then SSH into the VPS and clone that repo onto it. Then do all the needed deployment operations (like collect static files, make messages and whatnot) and lunch the server, using the correct settings file.  regarding the settings, I found a great pattern to be that explained in Two Scoops of Django. You can have a look at their proposed settings files structure from the official book's repo."
django,36d2ka,spookyrufus,1 point,Mon May 18 13:09:35 2015 UTC,"That's unnecessary. You can deploy via git push, without having to SSH into your server and pull from Github. In fact, you don't even need Github to do it."
django,36d2ka,rnevius,1 point,Mon May 18 13:56:03 2015 UTC,Don't you need to have some git daemon running server-side to do that?
django,36d2ka,spookyrufus,1 point,Mon May 18 18:40:46 2015 UTC,"Nope. You can just push over ssh and your client and use the git-receive executable on the otherside to unpack and validate your push.  The custom git-receives like what Github will be using can add a lot of bells and whistles, even gitolite adds stuff like audit logs, per-repo read/write authorisation. But everything you need is in the standard git package."
django,36d2ka,alex_w,1 point,Tue May 19 22:02:09 2015 UTC,"that sounds cool. I didn't know any of that, thank you. any specific links to get up to speed with it?"
django,36d2ka,spookyrufus,1 point,Tue May 19 22:14:32 2015 UTC,"There's not a lot to it honestly. You'd git init --bare in the target dir on the server, then add the remote with the typical address format eg: user@host:~/some/path/to/repo on your client machine. Then git push <remote> <branch>.  I'd start with the specifics of adding and managing remotes: https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes And check out the args to init: https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes    Though I personally prefer the man pages a lot more."
django,36d2ka,alex_w,2,Tue May 19 22:24:40 2015 UTC,You can push directly from you local git repo to a repo on your VPS without using GitHub.
django,36d2ka,Vitrivius,1 point,Mon May 18 13:30:12 2015 UTC,"This is correct. The OP should look into bare repositories. It's a simple way to deploy via git push, and doesn't require Github, Bitbucket, etc."
django,36d2ka,rnevius,1 point,Mon May 18 13:56:52 2015 UTC,Sharing is caring though
django,36d2ka,bigirnbrufanny,0,Mon May 18 21:17:47 2015 UTC,"Github has decent instructions for adding an existing project using git here.  Since you're a total noob hopefully this will get you going. With your local project:-  cd /path/to/your/project git init  (creates a new local repo)   Add all local files (Warning: This will add all files, you shouldn't add files with passwords, etc. I prefer adding files individually):-  git add .      Add files individually:-  git add /path/to/file   /path/to/another/file   Check what is in your repo before commiting:-  git status git commit -m ""initial commit""    (Commit your additions)   Next, create a github (or bitbucket) account and create a new repo. Copy the repo url (https) and tell your local repo about it:  git remote add origin <your remote repo url> git push origin master  (upload your local repo to github)   Then on your VPS:  git clone <your remote repo url>   If you make any more changes to files you can see what you've changed with:-  git status   Add changed files with git add, commit and push:-  git add file1 file2 git commit -m ""Tweaked the flux capacitor driver to reduce speed to 87mph, will work 2 weeks ago"" git push   To get the changes on your VPS:  git pull"
django,36d2ka,bigirnbrufanny,0,Mon May 18 13:30:20 2015 UTC,Bitbucket has free unlimited private repositorys.
django,369epz,raymestalez,14,Sun May 17 13:40:21 2015 UTC,What you are describing is not real-time. It's simply client-side rendering. You can already do this with Django by using it as an API server. Third-party apps such as Django REST Framework make the task even simpler.  I do not expect this to become a core component of Django as REST API implementations vary too drastically.
django,369epz,ccb621,1 point,Sun May 17 15:26:09 2015 UTC,"+1 this. I use a django backend and Ember.js frontend on my current project.  Specifically, I use tastypie in django to do the REST api stuff and ember-tastypie-adapter on the ember.js side to sync to and from the server. It's pretty fun working up at that level, its certainly non-traditional Web development."
django,369epz,flubba86,9,Mon May 18 08:51:08 2015 UTC,"Node is certainly not a requirement for building single-page apps. Since you ask this, I would suggest learning more about the request/response lifecycle via HTTP, learn more about HTTP headers and methods and learn more about how web servers/CGIs work.  Regarding Python frameworks and ""real time"", look into Tornado, Twisted. Regarding Django specifically, look into Django Rest Framework. None of these are ""required"" either, you can build REST based apps with any language/framework that can parse/process HTTP headers and has bindings with a web server. Heck, you can even build your own web server with Python and most languages."
django,369epz,mmmflapjacks,5,Sun May 17 14:09:40 2015 UTC,"I would build a server to handle whatever the ""realtime"" backend component is with pyuv, and then just import the django features that you need, as you need them (e.g. the ORM/redis handling code).  pyuv = the python interface to libuv. libuv = the (very good) event-oriented C library node is built on.  I hate realtime apps, though. Other than chat, I don't really see the point, and I think stuff like ember and angular are at the peak of a huge hype cycle (they will never go away, but I bet they'll be a lot less popular in 2/3 years). I avoid this stuff. End users don't really care as much as people think they do, and this type of app is much, much harder to debug."
django,369epz,pydry,4,Sun May 17 16:17:22 2015 UTC,"what makes you say ""the future of the web is single-page realtime apps""? maybe you've just been reading too many node.js blogposts."
django,369epz,metaphorm,4,Mon May 18 04:27:38 2015 UTC,Well there is SwampDragon which is built exactly for this purpose. Never used it though. http://swampdragon.net/
django,369epz,unhappyrobot,3,Sun May 17 20:19:24 2015 UTC,Why is the future single page apps?
django,369epz,dalore,2,Mon May 18 08:50:26 2015 UTC,You can run Django on top of Tornado or Twisted and seamlessly get persistent connections within Django.
django,369epz,hylje,0,Sun May 17 16:14:20 2015 UTC,and if you do that at your workplace increase the chances of getting fired by 100% :D
django,369epz,tbarbugli,2,Tue May 19 08:28:20 2015 UTC,What's an example of a single page app?
django,369epz,TankorSmash,1 point,Mon May 18 02:17:57 2015 UTC,"Sorry for late answer, but I guess OP meant eg. web clients for gmail or dropbox."
django,369epz,evenisto,1 point,Sun May 24 20:11:40 2015 UTC,"Oh, right. Good examples. Thanks!"
django,369epz,TankorSmash,2,Sun May 24 20:14:54 2015 UTC,There is going to be a talk about this at this year's DjangoCon Europe in a couple of weeks - Effortless real time apps in Django
django,3694xq,Glueon,3,Sun May 17 11:19:18 2015 UTC,"The way you were modeling it originally with three tables I think is the best way. If you use the ""through"" option to point at your third table, then the ORM will join properly.  https://docs.djangoproject.com/en/1.8/ref/models/fields/#django.db.models.ManyToManyField.through  I know there's a strong urge to use HStore because it's cool, but it's not really meant for this situation. What HStore is for is when you have data that has no set schema.   For example, you have your products database. Well, some products are t-shirts, so they have sizes. You don't want to make a size column, because it would be pointless for all the non-clothing products. Also, what kind of field would it be? Some shirts have sizes in numbers, some have S/M/L/XL. Stick that in the HStore.  Then someone comes along and adds a new product to the database. It's a video game for PC. You need to put the minimum system requirements somewhere. Obviously you're not going to be able to add columns to Product for CPU, GPU, RAM, etc. You're also not going to make an entirely new VideoGame subclass of Product with all the video game specific fields. HStore to the rescue!"
django,3694xq,apreche,1 point,Sun May 17 14:33:12 2015 UTC,Thanks for the input. I was just a little sad because just to fetch client's orders I need to do a tripe JOIN. So maybe in a feature that would result in performance issues. While hstore version would require just one JOIN.
django,3694xq,apreche,1 point,Mon May 18 10:00:43 2015 UTC,Databases are really fast. This kind of join is what a relational database is designed to do. It's a basic operation. Don't worry about performance unless things are actually slow for the user.
django,3694xq,patrys,2,Mon May 18 11:33:06 2015 UTC,Note that even with a third table you still need two queries to fetch both the order and its contents as there is no way to do a M2M JOIN. You might want to go with an SQL representation for other reasons though: with an HStore field you won't be able to do any aggregate analysis of the orders present in your database for example to try and figure out which products sell best during winter.
django,3694xq,patrys,1 point,Sun May 17 12:50:24 2015 UTC,"still need two queries to fetch both the order and its contents as there is no way to do a M2M JOIN   Well, given a primary key pk I would use a join:   SELECT * FROM Orders AS O INNER JOIN ProductOrder AS PO ON (O.id = PO.OrderID) INNER JOIN Product AS P INNER JOIN ON (P.id == PO.ProductID) WHERE O.id = pk   Or what do you mean? That it's impossible to do that join using Django ORM?  It's also possible to get this working with hstore using the raw SQL. I thought it should be possible like this:  SELECT * FROM Orders AS O INNER JOIN Product AS P ON (ANY(O.Products) = P.id)"
django,3694xq,patrys,1 point,Mon May 18 09:55:26 2015 UTC,You're asking the database to return a product (in the mathematical sense) of all orders and products where a connection exists. Without grouping you'll end up with as many duplicate orders as you have ordered items in that order. With grouping on order ID you'll lose the product information.  Am I missing something?
django,3694xq,lonahex,1 point,Mon May 18 14:21:24 2015 UTC,"I do understand I'kk end up having many-many duplicates of my order info.   Without ORM I would just use Order info from the first row and the iterate over all to get the actual products within the order.  Maybe not that perfect, but makes sense. No?"
django,3694xq,lonahex,1 point,Mon May 18 15:47:55 2015 UTC,"Depends. At minimum you waste a lot of bandwidth between your backend server and your database server. If your order gets a second M2M relationship (say, payment attempts) then you end up with K × M order duplicates, K product duplicates and so on. I'm not convinced saving a single SELECT … WHERE id = 7 is worth the complexity it introduces."
django,3694xq,thelindsay,1 point,Mon May 18 16:03:48 2015 UTC,For me that was an open question. Is bet better to perform two requests instead of one with an extra join.  There are situation when you need more then 3 JOIN - here no doubt it's better to break it into subrequests. But with 1 to 3 I don't know. Because having this big JOIN request DB has more information about what you are going to fetch so it could perform some additional query scheduling instead of situation when you just push 2-3 different queries which will be performed non-optimized. That's just some hydromancy )
django,3693ik,adamchainz,1 point,Sun May 17 10:54:19 2015 UTC,link seems to be dead :(
django,3693ik,mondschatten,1 point,Sun May 17 11:59:39 2015 UTC,"My bad, I misconfigured my jekyll shortly after posting. Thanks for letting me know, I've fixed it now."
django,3693ik,tbarbugli,1 point,Sun May 17 12:14:40 2015 UTC,writing thousands of LoC just not to setup and maintain Redis seems insane to me.
django,3693ik,tbarbugli,1 point,Tue May 19 08:43:59 2015 UTC,"Maybe I'm just insane, but I enjoyed the exercise :P Anyone, no one else has to write the code now :)"
django,3693ik,mamunabms,1 point,Tue May 19 11:05:11 2015 UTC,No offense but I would still stick to Redis ;)
django,367dm0,JuicyORiley,4,Sat May 16 21:49:56 2015 UTC,"Looks like a nice first step but it is not isomorphic, so Google would only just see an empty page.  For internal side projects that is probably OK most of the time but not for real world projects.  I don't see any way to marry Django with React  without running node.js as the main frontend server and setup an express app that can render all your components before sending the response to the browser."
django,367dm0,mbrochh,2,Sun May 17 05:31:37 2015 UTC,"Thanks!  But i was afraid of this, with comments i don't mind as such because i'm sure Disqus suffers the same problem on sites.  But i do intend to use it for more than comments so i'll have a look into doing React the ismorphic way, thanks :)"
django,367dm0,mbrochh,2,Sun May 17 08:12:10 2015 UTC,"I have seen this idea of ""Components as a Service"". Django would send requests to a local node.js instance that just sits there to render JSX components, but I really don't know what the performance penalty would be.   That way you stay the closest to your Django stack (routing and all, Django still serving behind the frontend webserver)."
django,367dm0,mbrochh,2,Sun May 17 08:23:22 2015 UTC,Is this something trying to give this idea to Python directly vs using Node? https://github.com/markfinger/python-react  Edit* There's also this by React themselves: https://github.com/reactjs/react-python
django,367dm0,sweetbeems,2,Sun May 17 08:32:17 2015 UTC,Hmm yea this could work. I was aware of this but for some reason I had dismissed it. Need to look into this again.
django,3686wb,ploopley_kid,6,Sun May 17 02:45:01 2015 UTC,One month Python is crap. Screw them. There are better video courses. Anything by a run rocks or coding for entrepreneurs.
django,3686wb,sriramracer,6,Sun May 17 06:33:19 2015 UTC,"I'll be releasing the first Django course on Treehouse in June (assuming no major disasters). We have a lot of stuff on Python, web design, web development, Java, Android, iOS, etc."
django,3686wb,kennethlove,3,Sun May 17 17:32:49 2015 UTC,Aren't you the guy behind django braces?
django,3686wb,sriramracer,2,Mon May 18 00:32:27 2015 UTC,Yep.
django,3686wb,kennethlove,2,Mon May 18 16:59:56 2015 UTC,This post made my day.
django,3686wb,IamVeryLost,1 point,Tue May 19 17:00:15 2015 UTC,"June 1st, mid-June, or end of June? I have basic programming down and now I want to expand and do some projects."
django,3686wb,nibble25,1 point,Thu May 21 03:20:54 2015 UTC,I'm filming on Tuesday next week (May 26) so mid-to-late June is the likeliest release time.
django,3686wb,kennethlove,3,Thu May 21 15:56:55 2015 UTC,"Not sure if it's the same course, but it got bad review recently.  http://www.reddit.com/r/learnpython/comments/35mdvb/thinking_of_doing_one_month_python_dont/"
django,3686wb,nibble25,2,Sun May 17 06:18:23 2015 UTC,"Thank you, that link was extremely helpful, and you saved me the trouble of going through onemonth hell :)"
django,3686wb,nibble25,1 point,Mon May 18 19:08:04 2015 UTC,"No problem, learning is hard enough by itself. No need to add difficulties from inadequate course."
django,366rkw,butwait-theresmore,2,Sat May 16 18:28:45 2015 UTC,"Your view is accessing the POST data in an odd manner. First request.POST's get method only takes a single argument. It is the equivalent of doing request.POST['arg']. Second, even if you were only using a single argument called 'data' if it isn't the name of a key in the dictionary then it won't return anything and Django will yell at you for trying to access a key that doesn't exist and spit out a 500 error."
django,366rkw,kevin____,1 point,Sat May 16 21:14:26 2015 UTC,"I wasn't quite sure how post data worked. Everything I'd tried to pass in before was url data, so I thought the view wanted basically everything passed in as a separate argument instead of the body of the request."
django,366rkw,kevin____,1 point,Sat May 16 22:33:36 2015 UTC,You should read up on Django's Request and Response objects. These concepts are easy to learn.  The view doesn't want or require anything as far as your data goes.  It is up to you to do something (or not do anything) with the data you pass to your view. GET and POST are attributes of the request object. Their values are dictionaries of the data you included when you issued the original request. If you have a view that can be accessed via a url http://127.0.0.1/yourView?foo=bar then the key 'foo' will be available in your view as request.GET['key'] if it was a GET request and request.POST['key'] if it was a POST and it's value would be bar. I'm glossing over the url aspect of this to make my point.
django,366rkw,thataccountforporn,2,Sat May 16 23:29:14 2015 UTC,"My first step would be logging the response in the error function, that might give you a better understanding on what's going on..."
django,366rkw,TheXaviB,1 point,Sat May 16 19:22:21 2015 UTC,That was a good first step
django,366rkw,ccb621,1 point,Sat May 16 20:22:23 2015 UTC,propably a CSRF protection error. try using a @csrf_exempt on the view you are using for eventData
django,366rkw,ccb621,2,Sat May 16 22:31:09 2015 UTC,"I actually do have that on the view, and I've manage to fix numerous other issues as well. I've updated my post to reflect the changes."
django,366rkw,ccb621,1 point,Sat May 16 23:04:25 2015 UTC,"There should be a traceback pointing to exactly where the error occurs. Is this not the case? You can also put in a breakpoint and step through the code to determine where the error is occurring. Also, you should be using request.body instead of request.POST: http://stackoverflow.com/questions/24958705/django-request-post-json."
django,366rkw,BillyBBone,1 point,Sat May 16 19:02:56 2015 UTC,"There is no traceback message. When I press the button, the POST request is sent and a 500 is raised. The javascript shows the alert that I added.  error : function(xhr,errmsg,err) {         alert(""didn't work"");         // Show an error         $(""#h4"").html(""didnt work""); // add error to the dom     }"
django,366rkw,rnevius,2,Sat May 16 19:13:06 2015 UTC,"So did you try stepping through the code (or at least adding print statements)? A lack of a traceback in the Django output would indicate that either (a) Django is not setup in DEBUG mode, or (b) you do not have logging setup properly. Check https://docs.djangoproject.com/en/1.8/topics/logging/. The default logging configuration should log all messages at INFO level or higher to the console."
django,366rkw,tgdn,1 point,Sat May 16 19:19:11 2015 UTC,"added    error : function(xhr,errmsg,err) {             alert(xhr.status + "": "" + xhr.responseText);             // Show an error         }   and got back  500: TypeError at /scheduling/eventData/eventData() takes at least 2 arguments(2 given)"
django,366rkw,tgdn,1 point,Sat May 16 19:55:24 2015 UTC,"You keep showing me JavaScript when the problem is clearly in Python. Again, make sure you have proper Django logging setup.  With that said, there seems to be an issue with your view. Why do you have the two data and email arguments if they aren't being used? Also, how is the URL pattern for this view configured in urls.py?"
django,365ikh,tHEbigtHEb,2,Sat May 16 09:48:47 2015 UTC,"The traceback indicates an issue with the middleware. The response value should be an HttpResponse instance, not a str. How did you setup this project? Does it actually run and serve the page in question? If not, start debugging there."
django,365ikh,ccb621,1 point,Sat May 16 18:56:10 2015 UTC,Peeps over at /r/djangolearning/ are going through Test Driven Development with Python if you'd like to ask over there. :)
django,365ikh,TacosBuenos,1 point,Sat May 16 15:28:03 2015 UTC,"Thanks, I'll look into it!"
django,365ikh,raiderrobert,1 point,Sat May 16 16:49:16 2015 UTC,"I don't believe that the TeatCase class has an attribute that creates an instance of the Client class on itself.  That is to say, self.client.get(), isn't a valid statement. (Doing this from memory. So pardon me if I'm wrong.)  You need to first import Client:    from django.test import Client    Then you can instantiate it in a setup method on the Test Case class:    class SimpleTest(unittest.TestCase):       def setUp(self):           self.client = Client()"
django,365ikh,raiderrobert,1 point,Sat May 16 10:34:45 2015 UTC,"Just tried it out, still getting the same error.  edit: Why are you inheriting unittest.TestCase instead of the TestCase class from django.test?"
django,365ikh,raiderrobert,1 point,Sat May 16 10:41:45 2015 UTC,"Ah, that's my bad. The django Test Case class includes a Client instance.  The only other guess I have is there's something wrong with your reverse.  I'd suggest pulling out the reverse function onto a separate line. And use debug to figure out what reverse is returning there.   Also, if you're not using pycharm to work, I'd suggest you do that and save yourself some heartache."
django,365ikh,skolsuper,1 point,Sat May 16 11:02:21 2015 UTC,"Okay, I'll try out the suggestions. I was planning on installing PyCharm but I didn't want to get locked in to single IDE."
django,365ikh,TacosBuenos,3,Sat May 16 11:15:53 2015 UTC,"I understand that, and I was using my favorite text editor for a while. But seriously, pycharm is that good."
django,365ikh,TacosBuenos,1 point,Sat May 16 11:24:26 2015 UTC,"Noted , and I guess the time is also right because 4.5 was released."
django,365x28,dsizemore,2,Sat May 16 13:30:33 2015 UTC,StringIO objects are 'file-like' objects.  What happens when you use img_into_memory instead of mugshot_image?
django,365x28,max_renlo,1 point,Sat May 16 16:56:58 2015 UTC,I get:    AttributeError at /submit/ StringIO instance has no attribute '_committed'
django,365x28,waterskiaddict,1 point,Sat May 16 17:21:06 2015 UTC,"This article seems to deal with a similar issue: http://stackoverflow.com/questions/9496528/overriding-model-save-causes-error-in-django-admin  But the solution they give, I'm not sure what pieces I need to make ti work: https://snipt.net/danfreak/generate-thumbnails-in-django-with-pil/  My testing hasn't worked as of yet."
django,365x28,mbi0,1 point,Sat May 16 17:37:25 2015 UTC,Could you save the image object to disk?  .save()
django,3662fn,sureshdsk,2,Sat May 16 14:29:57 2015 UTC,"I'm not sure what you mean exactly, but I think what you want is a ForeignKey or ManyToMany field to Tag- admin will list them all for you."
django,3662fn,whiskeyfox_,2,Sat May 16 15:16:22 2015 UTC,"Hello, I think use a charfield for tag is not a very good idea.   You can use ManytoMany as proposed by whiskeyfox_ or use a third-app like django-taggit ( https://github.com/alex/django-taggit )"
django,3662fn,mrjmad,2,Sat May 16 15:50:28 2015 UTC,"just a comment on style - naming fields with a (model_name)_variable is pretty redundant. When you use it it will look like:  a_recent_post.post_title  As others have said, if you want to display the tags as a dropdown, you need to use a many to many field. (look into django-taggit) as suggested."
django,362bw8,filippovd20,7,Fri May 15 14:36:43 2015 UTC,The new manage.py integration is a pretty big improvement. I generally just used a terminal to run manage.py tasks because the way PyCharm did it before (basically running tasks blind) was almost useless.
django,362bw8,rspeed,1 point,Fri May 15 17:55:16 2015 UTC,"What is PyCharm, and what are the benefits?"
django,362bw8,Mwahaaaa_The_French,3,Fri May 15 15:50:13 2015 UTC,"It's Intellij for Python.  benefits over what? it's an IDE so you get all the benefits IDEs normally give you like code completion, VCS integration etc."
django,362bw8,mick88,2,Fri May 15 16:16:03 2015 UTC,"It's the best Python IDE there is. Great debugger: watchpoints, remote debugging, inline variable examination (in the code) during a breakpoint. Virtualenv support. PEP8 enforcement. Refactoring. Database browser. VIM mode. Git/Mercurial. Lots of great plugins. Syntax highlighting for everything (Django templates, JS, CSS, etc.) Less and Sass compilation. Anything you can imagine is in there, and well organized."
django,362bw8,teilo,1 point,Fri May 22 18:59:04 2015 UTC,Thank you. Now I must get it!
django,362bw8,Mwahaaaa_The_French,1 point,Sat May 23 17:43:12 2015 UTC,... And ansible!
django,3647wx,throwaway_482,1 point,Fri May 15 23:56:57 2015 UTC,"This is a complex problem, and my gut feeling is this is probably the wrong tool for the job. There is probably something out there which is better-suited to describing and querying such complex ontologies, but it's not something I have experience with, so I can't point you at anything.  That said, lets look at how you could map your data structure using django models.   The two main problems that you'll almost certainly run into are 1) you're going to find it difficult to come up with one set of models which covers every possible eventuality, and 2) it's going to be hard to ensure consistency in your data in the long-term. For example, if brown hits grey in the face, you may say it hits the parts ""nose"" and ""mouth"". A year later you may enter an almost-identical image; you have to build your UI to ensure you say the same thing, and don't say ""face"", or describe brown beaver as ""dark brown squirrel"" etc. On the other hand, you may want to search for where brown hits grey in the face, in which case you now need to make Part a container for other Parts, and so you can find everywhere that brown hits grey in the mouth, nose, eye etc.  I've rearranged your models.py here: http://pastebin.com/R0gcdgz1  The main differences are:   Although your models seem to match your data structure fairly well, you've got your ForeignKey relations back to front; they define many to one relationships, not one to many. I added some comments to indicate where models are the subject of FK relationships. I also changed your frame type to a set of integer choices. This will help ensure consistency, among other things. I added a through model called PartAction. This means your actions are independent of the targets; you'll want to have a single ""hit"" action, not separate ones for different targets.   This should match your data structure a little more closely, and help you start implementing it in django - but as I said, I'd have a look around for other tools for storing and querying complex ontologies first."
django,3647wx,radiacnet,1 point,Sat May 16 08:57:00 2015 UTC,"I had actually thought about writing them this way before, but it honestly didn't make much sense to me—I wanted Frame to be within Image, because really, the frames are part of the image. The Parts are part of the Instances, etc. I'm not experienced with this kind of database structure enough to fully understand it quite yet, but I'm following a little better now.  Your model setup seems far more logical, and it appears to be working fine and making more sense now that I've spent some time with it implemented. I'm sure the needs of the application will evolve if I continue to develop and test it out in Django, and my models will have to be revamped occasionally, but this is definitely a push in the right direction. I have a better grasp on a few concepts that didn't really make sense to me before.  I'm probably stubbornly fixated on trying to get this done in some sort of web framework, as that's what I like to work with for the most part, but I definitely hear you on maybe trying to find something else. I appreciate the suggestion and I'll keep that in mind for the future in case things really don't seem to be working out this way.  Thank you very much for your insight! You were an incredible help."
django,3647wx,ccb621,1 point,Thu May 21 23:20:16 2015 UTC,"Serious question: why not use an existing photo management tool such as Lightroom, or full-fledged digital asset management software?"
django,3647wx,John--117,1 point,Sat May 16 19:06:51 2015 UTC,"I've never come across something that looked like it could accomplish quite what I'm looking to do. I'd thought about trying to work with Picasa, but really, it wouldn't be nearly as versatile. I haven't heard much of DAM software, but I'm not sure it would be quite as intuitive or effective for this use specifically.  I like that if I make something, it looks and performs exactly how I want it to. I know exactly what I want it to do, and I'm not sure anything else at this time could hit all the points that I'm looking for. It's an idea that spawned during high school while I was in the middle of learning PHP, and I hadn't heard of anything like it before. I've really enjoyed trying to figure it out; it's been a fun personal project if nothing else, I suppose. Thanks for your input!"
django,362nvf,g-money-cheats,1 point,Fri May 15 16:12:38 2015 UTC,"You really shouldn't edit any migrations.   Instead you should remove any dependency to the application to be removed within the rest of the project (look for imports and ForeignKey like fields). Remove said dependencies with migrations if needed.  Now the issue you could be facing is when someone needs to run older migrations, in that case I give that person a database dump."
django,362nvf,TheFrenchPoulp,1 point,Fri May 15 17:50:39 2015 UTC,One issue is with running tests. In Django 1.8 the full set of migrations are run each time (unless you use the --keepdb option).
django,362nvf,ynotna,2,Fri May 15 18:25:04 2015 UTC,squash?
django,362nvf,TheFrenchPoulp,1 point,Fri May 15 18:56:41 2015 UTC,"Ah I didn't know that behavior of 1.8. Well, then you must use this option. That or delete all migration files and create a database anew.  Don't forget to remove dependencies in tests as well :)."
django,361p20,joanmiro,8,Fri May 15 10:33:02 2015 UTC,"If they didn't ask when you were being interviewed, they either think it's common knowledge (it's not) or that you can pick it up after a while.  So come clean and ask one of your coworkers to give an overview on how things work with BDD in the company ('cause, you know, not everyone follows things exactly like the script says). The worst thing you can do now is trying to seem to know and look like an idiot. ;)"
django,361p20,juliob,7,Fri May 15 10:56:35 2015 UTC,"This BDD tutorial looks good: part one, part two"
django,361p20,estrambolico,1 point,Fri May 15 10:45:09 2015 UTC,That was great! Thank you.
django,361p20,tw_f,7,Fri May 15 23:19:18 2015 UTC,"Also, don't be afraid to ask your co-workers! :)  We're all learning, all the time. You'll be doing your team a big favor if you have the confidence to speak out when you're not sure of something."
django,361p20,tomchristie,1 point,Fri May 15 11:22:18 2015 UTC,"I agree.  Let's look at it a different way, by asking your co-workers for help on a topic you don't know, you are demonstrating a willingness to learn. I'll take that over a self-declared 'expert' any day of the week."
django,361p20,pydanny,1 point,Fri May 15 17:48:02 2015 UTC,"In every single job I've ever had, doing that would only lead to people talking shit about you constantly to your managers about how incompetent and unqualified for the job you are. It's great if being open and honest about something like that would work for you, but in most workplace environments there are always N jackasses who want to get rid of you so they can try to get some of the money you're getting."
django,361p20,itsaCONSPIRACYlol,1 point,Tue May 19 16:29:31 2015 UTC,"Alas, I can't say I disagree with you. In retrospect, I've been there, and it has caused problems. I know EXACTLY what you mean.  Right now I'm fortunate that isn't the case, that my team is good about this stuff."
django,361p20,pydanny,2,Tue May 19 17:07:16 2015 UTC,https://leanpub.com/50quickideas-tests http://chimera.labs.oreilly.com/books/1234000000754/ape.html
django,361p20,structfoo,1 point,Fri May 15 14:21:01 2015 UTC,"If it wasn't in the job spec, just say you don't know it."
django,363eut,MinimalistKid,1 point,Fri May 15 19:43:36 2015 UTC,"Add a custom field to the modelform. In your form_valid after getting your form.save called, create the instance of the other model with that value (self.objext.other_set.create).  If that doesn't make sense, can you write out what the models are and what you want to happen in more concrete terms."
django,363eut,Whoopska,0,Fri May 15 23:24:32 2015 UTC,Use django-allauth. There should be a setting that allows you to override the signup form with a custom form.
django,35yzjc,xBBTx,7,Thu May 14 18:15:34 2015 UTC,"I make web apps. I've used Backbone, Angular, Ember and Knockout. I'm yet to build something with React.  Knockout is currently my tool of choice. I'm building a web page designer of sorts using Knockout components and loving it. I don't think my code could be made simpler for what it does. I know from experience that Backbone would be okay but more boilerplate, Angular code would be way too contrived and I at high do like Ember, it's still maturing and as you said is intended for entire applications.  Knockout is very focused, let's you use any other library you need with absolutely no problem, and feels lean and mean. It won't help you with talking to an API but that's no big deal since its bindings come into play as soon as you load or modify data."
django,35yzjc,qbitus,4,Thu May 14 22:56:26 2015 UTC,Knockout is the underrated middle ground for people who want more than jQuery but less than a SPA.
django,35yzjc,ItsAPuppeh,1 point,Fri May 15 06:03:23 2015 UTC,Exactly. Very focused and useful tool.
django,35yzjc,qbitus,3,Fri May 15 10:15:15 2015 UTC,"Thanks for the perspective.  Question: when you say it doesn't help you when talking to an API, but it's no big deal because of bindings, what do you mean?  Like you have to write how to talk to the API, but it automatically does some sort of reconciliation when it senses dirty or stale data?"
django,35yzjc,almithani,3,Fri May 15 06:46:59 2015 UTC,"The main thing you use Knockout for is binding DOM attribute or node values (and DOM events) to data sitting in JavaScript variables (including arrays). The data in the variable changes: it affects the DOM, the DOM fires events: the data can be kept up to date automatically. This is done using a mechanism called observables (think of it as Knockout observing what happens on both sides, data and DOM, and keeping it all in sync), and another called computeds.  Knockout won't load the data from, or send it to an API. All you need is to have data in JavaScript variables somehow. So you have it in the page directly or fetched say upon page load using jQuery's $.ajax or any other way you want. When for example you delete an element in an HTML list, Knockout can help you know that this happened, and keep your corresponding array of data up to date, but it won't magically call some API for you. You would again have to do this yourself.  Putting it in an MVC paradigm (even though it's not structured like this), Knockout makes life very simple to deal with your frontend model, controller(s) and views but doesn't handle backend communication.  I hope that's clear enough... If not just try the tutorial and docs. They're great and to the point."
django,35yzjc,qbitus,1 point,Fri May 15 10:14:47 2015 UTC,Thanks =)
django,35yzjc,almithani,4,Fri May 15 18:18:51 2015 UTC,I took an online course for Angular and hated almost everything about it. The syntax is a mess and it mixes logic and markup in a really off-putting way.
django,35yzjc,rspeed,2,Fri May 15 03:06:04 2015 UTC,Have you looked at Aurelia.io? That looks pretty promising
django,35yzjc,JuicyORiley,1 point,Fri May 15 06:36:24 2015 UTC,"I have not, I'll have a look after work"
django,35yzjc,mibmibmib,3,Fri May 15 09:04:06 2015 UTC,How do you feel about React?
django,35yzjc,kpurdon,3,Thu May 14 18:58:16 2015 UTC,"I have briefly glanced at it, and like /u/daekano  says, it didn't seem to suit my needs because it's only the view component, and on top of that, I really don't like HTML in my JS, which is why I'm a fan of Handlebars templates - string based and easily extendible with custom helpers (filter/tags in Django)."
django,35yzjc,daekano,2,Thu May 14 22:43:41 2015 UTC,Flux is the design pattern for the rest of the application stack using react as the view. Lots of good stuff to look at with flux.
django,35yzjc,Sector_Corrupt,1 point,Fri May 15 01:51:45 2015 UTC,"React is just View, it's not the full front end package.  It's possible to replace Backbone.View with React."
django,35yzjc,daekano,1 point,Thu May 14 19:29:02 2015 UTC,"I usually use Backbone, as it provides some basic structures to build off for a useful base but it's maximally flexible. For a lot of stuff I build my own little interfaces + the like for different components and Backbone doesn't really push a philosophy, so I can just build some conventions around components and it just works. Things with 2 way binding are cool, but a lot of times when I need to do something more specific it all falls apart."
django,35yzjc,almithani,1 point,Thu May 14 20:07:53 2015 UTC,"I must say that I was really doubting whether I should just go with backbone or not, but stuff like this puts me of:  var person = new Person(); person.set({ name: ""Thomas"", age: 67});  var age = person.get(""age""); // 67 var name = person.get(""name""); // ""Thomas""   or the way defaults are set...  I just want to be able to do stuff like  person.name = 'Thomas'; person.age = 67;  var name = person.name; var age = person.age;   Which is a lot closer than 'plain' Objects, but combined with getters/setters via some sort of MetaClass in Javascript should have some potential I think."
django,35yzjc,andrey_shipilov,3,Thu May 14 22:48:33 2015 UTC,"Until JavaScript observable objects are more pervasive, there must be some kind of a getter/setter to be able to trigger change events for properties.  Object.observe has only found support from Chrome and Opera."
django,35yzjc,andrey_shipilov,1 point,Thu May 14 23:01:15 2015 UTC,"I used Backbone once, and liked it for some tasks, but the data binding was terrible.  I think it works really well with REST APIs, but if the API isn't pure REST, then you lose a lot of the ""automatic"" functionality.  I'm currently using Angular.  It's not bad, but it's very opinionated.  Whether or not you agree with its opinion will determine if you like it.  /u/qbitus post on Knockout got me interested, so maybe I will take a look at that."
django,360p08,MinimalistKid,2,Fri May 15 02:42:41 2015 UTC,Address.objects.get()     This will return an Address object. Not quite what you wanted.  address = Address.objects.get(user__username=username1) user = address.user   This gets you the user.   user = User.objects.get(username=username1)   This seems more like what you're after though.   address = Address.objects.get(user_id=user_id)  user = address.user   The user_id kwarg in the above example refers to the hidden field of the Address object. This is different from the username though.   user = User.objects.get(username=username1)  address = Address.objects.get(user=user)   To use the user kwarg you need a User object.
django,35z4vg,spookyrufus,1 point,Thu May 14 18:57:30 2015 UTC,Nice. Thank you for the input.
django,35ycey,mayupvoterandomly,8,Thu May 14 15:17:26 2015 UTC,This should work:  Model.objects.aggregate(*[Sum(x) for x in LIST_OF_FIELDS])
django,35ycey,mibmibmib,1 point,Thu May 14 15:40:04 2015 UTC,Ah! I didn't think of unpacking it. Thank you!
django,35ycey,metaphorm,0,Thu May 14 18:05:28 2015 UTC,https://docs.djangoproject.com/en/1.8/topics/db/aggregation/#cheat-sheet
django,35zsu2,DoctorOctagone,3,Thu May 14 22:00:29 2015 UTC,"It doesn't really matter except for the FACT that you will make much greater use of python in the future via a whole host of tasks, big data analytics, visualizations, machine learning, etc."
django,35zsu2,guerciotti,1 point,Fri May 15 00:19:44 2015 UTC,"Thanks, I agree. A lot of the graphics programs I use like Maya and Nuke allow for python scripting."
django,35zsu2,Ke0,1 point,Fri May 15 00:32:42 2015 UTC,"Pretty much. Don't get me wrong you can't go wrong with either. But if you ever get tired of web development as a rubyist...well there really isn't anything else for you to do. Some people are completely fine just being a rubyist, but honestly if you ever get the itch to do anything else go Python."
django,35zsu2,kpurdon,2,Thu Jun 4 14:45:36 2015 UTC,Consider starting small and building up with something like flask.
django,35zsu2,Meinkrafter,1 point,Fri May 15 02:06:06 2015 UTC,"Thanks, I will definitely consider flask"
django,35zsu2,ralusek,1 point,Fri May 15 03:39:48 2015 UTC,I might get shot around here for saying this but if you know javascript node/express would probably work well.
django,35zsu2,K33nzie,0,Fri May 15 04:41:10 2015 UTC,"You're much better off going with Node/Angular for a modern application. MVC has moved to the client, most modern backends are API's and validation.  But if you must choose between those two, Django times a million. You will use Ruby in exactly one place: a Rails application. Python, you will find everywhere."
django,35zsu2,ralusek,3,Fri May 15 07:40:26 2015 UTC,MVC has moved to the client   what do you mean? Some examples? You mean that nowadays modern apps are basically javascript only?
django,35zsu2,yarrowy,3,Fri May 15 12:51:58 2015 UTC,"Yes, most modern apps are single page applications that rely on calls to data API's as opposed to requesting new views.  Take a profile page, for instance. Instead of asking the backend to return you the page, which requires a lot of logic and view building on the backend, I instead just request a json structure for the logged in user.  The api just returns:  {   first_name: 'John',   last_name: 'Doe',   profile_thumbnail: 'http://somes3bucket.jpg' }  Then inside of a front end template (will be slightly different depending on Angular, React, Backbone), you display that information as you see fit. But the logic is kept on the client, and it makes for way smoother experience that feels like an application, not a webpage.  The other benefit is that the way your API is structured makes it usable by any number of clients, as it's now serving data...not views. That means if you decide to build an Android or IOS application later on down the line, your backend is already done. It doesn't matter who is requesting the data, the format will always be the same: a data API that returns nothing but JSON.  As far as examples go, there are tons of them. Gmail is a single page application, YouTube is a single page application. Facebook is a hybrid. Google maps is a single page application."
django,35zsu2,ralusek,1 point,Fri May 15 16:53:25 2015 UTC,"Interesting, are these type of websites called ""single page apps"" or is there a better name for them? I've heard that term used before, just didn't know the meaning behind it."
django,35yfu8,gck1,2,Thu May 14 15:43:38 2015 UTC,Not sure if it's of any help but django-cms started as a fork of django-page-cms which seems to be maintained to this day.
django,35yfu8,patrys,2,Thu May 14 16:17:38 2015 UTC,"Mezzanine provides WYSIWYG editing in the admin and front-end. You can also configure your own editor, I believe ckeditor has been used before.  http://mezzanine.jupo.org/docs/admin-customization.html#wysiwyg-editor"
django,35yfu8,stevemcd,1 point,Fri May 15 04:43:52 2015 UTC,"I was wary about that in the beginning too, but it's not that bad. Front-end editing gives you a better impression about how stuff is going to look, and you still sort-of get into the backend (via a sidebar) to change page settings (like the template used).  Furthermore, you can edit all you want, it's not visible yet until you publish the page again."
django,35yfu8,xBBTx,1 point,Thu May 14 18:17:29 2015 UTC,"If you're already using 2.4 and it works for what you want, why not just stick with that?  Maintaining your own fork of 2.4 for security and Django version compatibility is probably far less work than rolling your own CMS if you need anything more than the most basic functionality."
django,35yfu8,chronug,1 point,Fri May 15 09:21:58 2015 UTC,"I would advise exactly the opposite - it is far too easy to underestimate the work required to maintain a project.  django-cms 2.4 is about 27,000 lines of Python, 8,000 lines of HTML, 21,000 lines of Javascript, 4,000 lines of CSS. All of that becomes your responsibility if you fork the project. Much of it might be external libs (especially Javascript), but it's still your responsibility to work out what is what, and when it needs upgrading etc.  You are also then in the situation that you cannot benefit from any bug fixes or feature additions in later versions of django-cms. You are facing a massive duplication of work, all to maintain an obsolete piece of software that is going to remain stuck in the past.  My advice is to learn to live with what one of the major CMSes can give you (django-cms, Mezzanine, Wagtail)."
django,35yfu8,spookylukey,1 point,Fri May 15 15:58:06 2015 UTC,"Point taken, but I think it is a viable option in this particular instance.   OP is suggesting abandoning their existing project that already uses 2.4 to build their own CMS.   Compared to starting from scratch, forking is a valid option; particularly if you only need to maintain the particular parts of the CMS code that your site uses.   I'm not suggesting doing anything more than essential fixes when moving to new versions of Django or if a security flaw is found. Yes, you don't get new features, but you don't get anything if you roll your own solution."
django,35v73z,willyhakim,2,Wed May 13 20:00:31 2015 UTC,"I don't think there's really anything django specific that is any different than working with any other framework. The only thing I can think of is that if two people make migrations at the same time, they might overlap, so you have to deal with that. South had a feature to merge migrations, not sure if the new official migration system does it as well."
django,35v73z,apreche,1 point,Wed May 13 20:57:57 2015 UTC,"the new migration system is basically south++, so yes, it can."
django,35v73z,caffodian,-9,Wed May 13 21:29:32 2015 UTC,"I really don't understand how you can post advice to /r/Django and not know that south was merged into Django core not this version, but the one before it."
django,35v73z,Mekhami,3,Wed May 13 21:33:24 2015 UTC,Because a lot of Django people don't use 1.7 or 1.8 yet and don't read up on features they don't use.
django,35v73z,shazammerbammer,1 point,Wed May 13 21:59:30 2015 UTC,"You might not realise this quite yet but reading your history, you come across as an incredibly nasty, vindictive piece of work. The Python community (hell, any community) really does not need people with your kind of attitude."
django,35v73z,signal_trace,-2,Thu May 14 14:50:19 2015 UTC,k have a good life
django,35v73z,Mekhami,1 point,Thu May 14 16:53:27 2015 UTC,"I think it's pretty clear that I did know that, since I mentioned it in my post.   The new official migration system that is merged isn't exactly 100% South. There are quite a few significant differences. I think the merge function is a parameter to the makemigrations command, whereas in south it was part of the migrate command."
django,35v73z,apreche,1 point,Wed May 13 22:02:47 2015 UTC,"Hey, be nice!  You really should watch this talk by Jacob Kaplan-Moss https://www.youtube.com/watch?v=hIJdFxYlEKE"
django,35v73z,caffodian,2,Wed May 13 22:12:14 2015 UTC,"here is my brief experience:   try to divide work by app first (when you have less things done) everyone has their own db in dev use git-flow for managing feature branches and develop when merges are accepted into develop, also run your migrations against your shared staging db (for some box that always runs whatever is in develop) and resolve any migration merge conflicts in the merge since develop's migrations should generally be in a functional state, run your prod migrations when you do your master releases"
django,35v73z,WallyMetropolis,1 point,Wed May 13 21:29:18 2015 UTC,How do you keep dev dbs in sync?
django,35v73z,abriemme,2,Thu May 14 14:34:32 2015 UTC,"In my team we have a shared DB on a develop server, just open a port."
django,35v73z,caffodian,2,Thu May 14 14:54:55 2015 UTC,"We don't keep the actual dev data in sync, just the schemas (via migrations) - and even then the schema is just synced to whatever branch they happen to be on.    If there is recurring data that needs to be there for every dev (like placeholder text, metadata etc) we take care of it with fixtures."
django,35v73z,AlexFromOmaha,1 point,Thu May 14 15:03:05 2015 UTC,"The most efficient way is to line up your team, incapacitate them all, and do it yourself.  Barring that, Django does lend itself well to a lot of small files. We're a Mercurial shop instead of the more popular Git, but the general idea is the same: keep people working in different files to minimize risk of merge conflicts. Like any other project, the key to making this work is a good up-front design. The majority of your models should be determined in advance, and migrations are filed under change management. For day-to-day operations, assign devs to apps (one to many) and try to confine them to tasks/views/urls/models and the equivalent for your team. If you have separate front end people, they float around and handle the templates. If not, those go to the devs too.  Things like middleware probably don't belong in an individual project's repository. If you're actually going to the trouble of writing middleware, you're probably looking at something easily reusable. I'm sure there's someone out there somewhere who writes middleware instead of decorators for widely distributed snippets, but I don't know him."
django,35we5r,addooolookabird,2,Thu May 14 01:49:37 2015 UTC,"This is using django templates, correct? Unless shopuser_set is a filter that you've created, you can't just pipe to an attribute. You can access attributes with dots, but not pipes. Filters have to be added in python (i.e. https://docs.djangoproject.com/en/1.8/howto/custom-template-tags/ )   The second issue is that you can't have spaces around the |  The way I'd typically handle this is to either do that filtering in the view, or to add a function on the view model (assuming this is a model?) of view.shops_with_users that does the filtering for you"
django,35we5r,finder83,1 point,Thu May 14 02:14:59 2015 UTC,gotcha. not sure about how shopuser_set is built.  But I also like the suggestion about simply adding that function to the view model.  thanks for the tips
django,35we5r,andrey_shipilov,1 point,Thu May 14 02:17:11 2015 UTC,"{% for shop in view.shops.shopuser_set|slice:"":3"" %}   Although it would be more correct not to put logic into templates. Pass the variable ""view.shops.shopuser_set()[:3]"" into context instead."
django,35v0qb,frontierman,4,Wed May 13 19:12:22 2015 UTC,"Did you add the app to the INSTALLED_APPS for the server settings? It looks like Django just doesn't 'know' about your new app, and it's easy to forget if your settings files differ for development/production environment."
django,35v0qb,xBBTx,2,Wed May 13 19:23:00 2015 UTC,Thanks for the reply and suggestion. I checked my settings and indeed the server side was missing the app from INSTALLED_APPS. I thought I had made the change but must have failed to upload the settings file. Such a simple solution. Thanks for helping me. I was quite confused.
django,35v0qb,xBBTx,4,Wed May 13 19:33:03 2015 UTC,"It sounds like you should use VCS (git, mercurial) on your server (too)! Updating the code on the server is then nothing more than doing a  git fetch origin git checkout <my-release-tag-or-branch>   Practically for my projects, masteris always a branch that can be deployed, and deploying is nothing more than a git pullfollowed by the usual python manage.py migrateand python manage.py collectstatic.  If you're not using VCS yet, now is the time to start doing so!"
django,35rzlx,mipadi,3,Wed May 13 00:45:19 2015 UTC,"Very cool, but I've always thought this sort of thing is a bad idea. There's too much that can go wrong in a deployment; it seems silly to try and manage all of that in a post push hook."
django,35rzlx,unconscionable,4,Wed May 13 13:57:53 2015 UTC,"Continuous Delivery as an accepted approach used by big, well-known companies. What the author does is pretty much an implementation of this approach."
django,35rzlx,dAnjou,2,Wed May 13 14:21:53 2015 UTC,"Continuous delivery is great, but it's a bizarre way to deploy something by pushing to a certain branch.. version control is a great and powerful tool, but it's not really built to be a packaging and deployment vehicle.  You may want to have staging instances automatically build test environments when you push to certain branches, but promoting to production often involves state dependent changes that wouldn't necessarily get reproduced in a staging environment depending on what state it was in.  Again, continuous delivery is an ok strategy.. but VCS is a very limiting tool to manage it all."
django,35rzlx,unconscionable,3,Wed May 13 19:33:10 2015 UTC,Next step. Move to jenkins with a git hook that can handle other things and multiple servers.
django,35rzlx,dalore,2,Wed May 13 17:15:52 2015 UTC,And then you add migration and it all breaks after your single-command update?
django,35rzlx,cramur,1 point,Wed May 13 13:31:15 2015 UTC,"Obviously DB schema changes are a special case and should be treated separately. But they shouldn't happen that often once your application is out of its initial phase. Also, some schema changes are pretty simple, like adding a field/column."
django,35rzlx,dAnjou,1 point,Wed May 13 14:23:51 2015 UTC,"Once my app is out from the initial stage, I don't need to update it that often and even then, if I'm so keen on one-liners I can use additional arguments to ssh"
django,35rzlx,cramur,0,Wed May 13 17:15:21 2015 UTC,"I'll be somewhat blunt but hopefully not disrespectful now: what you're saying sounds naive. Software is never finished. At work we're maintaining a product that has a pretty solid data model that rarely changes (maybe an additional field here and there once in a while but as I said that's relatively simple). But we're constantly fixing bugs, improving things, and even adding new features without changing the model.  And using ""additional arguments to ssh"" quickly becomes unmaintainable, especially if you have more than just a CRUD website to maintain (we have at least half a dozen components written in different languages, with different test suites, and different deployment requirements)."
django,35rzlx,dAnjou,1 point,Wed May 13 17:41:57 2015 UTC,"That's exactly what I'm saying!  In my experience, once you pass the initial stage, the 'update the code on production' is, most often a git push/pull and an optional server restart. And every serious case still needs your intervention, for example, by running migrations or a few management commands. Making your one-line makefile working for each of that cases is a huge maintenance PITA in my book, especially if you happen to work with different servers that have different paths and everything."
django,35rzlx,cramur,-4,Wed May 13 17:59:42 2015 UTC,People still use Apache? What is this? 1995?
django,35rzlx,omgplsno,5,Wed May 13 06:38:55 2015 UTC,Lots of people still use apache :P  What are you evangelizing?
django,35rzlx,davvblack,1 point,Wed May 13 14:02:37 2015 UTC,Not the OP but I use nginx these days
django,35rzlx,CraigTorso,3,Wed May 13 15:08:10 2015 UTC,http://news.netcraft.com/archives/2013/06/06/june-2013-web-server-survey-3.html
django,35rzlx,cramur,2,Wed May 13 13:33:55 2015 UTC,How about something from 2015 instead: http://news.netcraft.com/archives/2015/04/20/april-2015-web-server-survey.html
django,35rzlx,lehmakook,1 point,Wed May 13 16:57:25 2015 UTC,"So, 'quite a few', right?"
django,35rzlx,cramur,1 point,Wed May 13 17:13:05 2015 UTC,"Apache: 51% of active sites, 49% of the top million busiest sites.  Nginx: 15% and 21% respectively.  Node.js is buried somewhere in the ""Other"" category.  What this does not capture is caching. How many of the busiest sites are being fronted by Cloudflare or similar? That's really important, and these stats don't capture those number."
django,35rzlx,teilo,3,Thu May 14 16:52:24 2015 UTC,"Completely irrelevant to the topic, and hopefully a joke. Otherwise I'd have to assume you're humongously naive.  And yet, people are upvoting this crap ..."
django,35rzlx,dAnjou,-2,Wed May 13 14:27:07 2015 UTC,Upvotes for comedic gold!
django,35u09h,AncientSwordRage,0,Wed May 13 14:30:09 2015 UTC,"This is the test from the question, for the curious who'd rather not go on SO.   I'm trying to use Django-Angular's djangoRMIProvider to give my angular app that sits on top of django access to some django methods.  The snippet I've copied in (and customised the my_app name), and added a console.log to is:  {­% load djangular_tags %­}     …     <script type=""text/javascript"">     console.log(""djangoRMIProvider: ""+djangoRMIProvider);     my_app.config(function(djangoRMIProvider) {         djangoRMIProvider             .configure(                 {­% djng_current_rmi %­} <!--errors here -->              );     });     </script>  It turns out that neither {­% djng_current_rmi %­} nor {­% djng_all_rmi %­} expand out to what they should.  I've gone as far as copying the Django-Angular file djangular_tags.py under:  my_app          ↳ templatetags              ↳ djangular_tags.py  And I'm certain that both my_app and django_angular (I had to rename the Django-Angular app djangular to django_angular as there is another package, Djangular, with the app name djangular - try saying that ten time fast) are in 'INSTALLED_APPS'.  I even used this dirty hack to force the tags into the builtins but either I've done it wrong, or it doesn't work (I do get errors saying it's looking in django.templatetags.my_app.templatetags.djangular_tags, which is not right, or other erros, if I put anything but my_app.templatetags.djangular_tags in that function call)"
django,35q1w8,cneumann81,3,Tue May 12 15:59:55 2015 UTC,"This page contains errors.  First, the ""correct"" example also uses backslashes.  Second, the backslashes are used incorrectly, and will not compile.  There are two fixes for this:   Escape the backslashes: ""\\path\\to\\my\\static\\files"" Use a raw string: r""\path\to\my\static\files"""
django,35q1w8,jcdyer3,0,Tue May 12 16:55:13 2015 UTC,"Thanks, will fix it. Feel free to open an issue on GitHub if you like."
django,35q1w8,raydlor,2,Tue May 12 16:58:15 2015 UTC,https://github.com/quantifiedcode/python-anti-patterns/issues/54
django,35q1w8,mipadi,3,Tue May 12 22:23:32 2015 UTC,"Anti-pattern: Putting every teeny-tiny section on a separate page, instead of one single page."
django,35q1w8,sriramracer,1 point,Wed May 13 19:52:26 2015 UTC,Second 'practices' website in a week doing it. Is annoying as fuck.
django,35q1w8,Tysonzero,1 point,Wed May 13 20:14:14 2015 UTC,Does that mean if I am doing any joins for the settings that use a file path I should import join from posixpath?
django,35q1w8,mipadi,1 point,Wed May 13 14:40:09 2015 UTC,You should use join from os.path.
django,35q1w8,Tysonzero,1 point,Thu May 14 00:12:18 2015 UTC,But then it will put a backslash for windows which is what the article explicitly told me not to do...
django,35q1w8,mipadi,1 point,Thu May 14 00:17:56 2015 UTC,"Oh, right. In the case of settings that require a /, you might as well just use a literal /. Not all file path settings require a literal /.  In fact, I think it's safe to use os.path.join. I think the reason they say in the docs not to is that it will cause problems if you use a literal \ but end up deploying or running the project on a non-Windows machine, whereas Python on Windows can always handle a / character in paths. However, if you're using os.path.join, the project will always be using the correct path separator for the platform it's running on anyway.  Also, if you use a literal \ but don't escape it correctly, it will cause errors. For example, \p is a p, but \f is a form-feed character. Avoiding the use of \ entirely prevents these errors."
django,35q1w8,Tysonzero,1 point,Thu May 14 00:37:11 2015 UTC,"That's a fair point about the literal \ vs os.path.join because of windows. The reason I sometimes don't use literal / is because I am using variables. Such as join(DJANGO_ROOT, 'static'). I guess I could do '{}/static'.format(DJANGO_ROOT)."
django,35q1w8,raiderrobert,1 point,Thu May 14 01:01:02 2015 UTC,"How is using the normal BooleanField an antipattern? It seems that if you didn't want a null to show up, you'd want to pick a db field that would fail the transaction.  Edit: I'm an idiot and should have read further....carry on!"
django,35q1w8,Glueon,1 point,Sat May 16 11:11:23 2015 UTC,"There is probably an error on here.   Media and static root are identical  STATIC_URL = 'http://www.mysite.com/static'  MEDIA_URL = 'http://www.mysite.com/media'   Identical? Folders?   Ensure, STATIC_URL and MEDIA_URL point to different folders.  """""" settings.py """"""  STATIC_ROOT = '/path/to/my/static/files'  MEDIA_ROOT = '/path/to/my/media/files'   Again, folders?"
django,35q1w8,dysmas,1 point,Mon May 18 18:32:44 2015 UTC,This was a copy/paste issue. Just fixed it. Will be deployed soon.
django,35q1w8,Vitrivius,0,Mon May 18 19:36:19 2015 UTC,http://docs.quantifiedcode.com/python-code-patterns/django/all/security/django_secrect_key_published.html   Best Practices   Load key from environment variable   /proc/ would like a word with you
django,35q1w8,nathforge,4,Tue May 12 16:57:59 2015 UTC,What is the problem with that?
django,35q1w8,dysmas,3,Wed May 13 06:38:54 2015 UTC,"Hey - do you have any more details on this?  Have figured how to see another user's command line, but not environment variables.  Command-line argument:  # cat -- - --secret=something  $ ps a 28796 pts/0    S+     0:00 cat -- - --secret=something   Environment variable:  # SECRET=SOMETHING cat -  $ ps a 28796  pts/0    S+    0:00 cat - $ cat /proc/28796/environ  cat: /proc/28796/environ: Permission denied $ ls -l /proc/28796 -r-------- 1 root root 0 May 12 19:45 environ"
django,35q1w8,pydry,0,Tue May 12 19:47:28 2015 UTC,"Agree, probably ""Best practice"" is the wrong wording here. ""Alternative"" would be more appropriate. Will open an issue for that and elaborate the downsides of this approach. Thanks for raising this point."
django,35q1w8,sriramracer,1 point,Tue May 12 17:07:03 2015 UTC,"yeah, i was thinking the same after posting the above - I didn't mean it too snarkily - so apologies if it sounded that way!  ""Better practices"" certainly ;)"
django,35szdn,butwait-theresmore,2,Wed May 13 06:40:03 2015 UTC,"What do you mean it causes the page to not load? That shouldn't be the case at all, as this is all frontend code.  However, this block is obviously wrong:          {% for event in employee.daysandtimes_set.all %}             {                 title: ""{{ employee.employee_name }}""                 start: ""{{ event.clock_in|date:""c"" }}""                 end: ""{{ event.clock_out|date:""c""}}""             },         {% endfor %}   Do you see any errors in your browser console?"
django,35szdn,rnevius,1 point,Wed May 13 06:52:51 2015 UTC,"No, it's just a white page. I probably should have mentioned that this script is an extension and works as intended when the events are typed out by hand.  {% extends base.html %} {% block content %} <script> . . . <\script> {% endblock %}"
django,35szdn,rnevius,2,Wed May 13 06:56:29 2015 UTC,A white page means there's a server-side error. Turning Debug on would tell you exactly where the problem is. My hunch is that employee.daysandtimes_set.all isn't returning what you think it is.
django,35szdn,rnevius,1 point,Wed May 13 06:58:42 2015 UTC,"I don't think there's a server error. I do have debug enabled.  Ok, so when I have the stuff displayed...   <p>{% for event in employee.daysandtimes_set.all %}                 {                     title: ""{{ employee.employee_name }}""                     start: ""{{ event.clock_in|date:""c"" }}""                     end: ""{{ event.clock_out|date:""c""}}""                 },             {% endfor %}</p>   This is displayed on the page, like I expect.  { title: ""My Name"" start: ""2015-05-13T01:00:00"" end: ""2015-05-13T01:30:00"" }, { title: ""My Name"" start: ""2015-05-13T01:30:00"" end: ""2015-05-13T02:30:00"" },"
django,35szdn,bulletproofvest,4,Wed May 13 07:00:13 2015 UTC,"You need commas after all of those values:                  title: ""{{ employee.employee_name }}"",                 start: ""{{ event.clock_in|date:""c"" }}"",                 end: ""{{ event.clock_out|date:""c""}}"","
django,35rj13,kazanjian,1 point,Tue May 12 22:29:04 2015 UTC,"idk what's going on, please help!"
django,35r6oh,Rogergonzalez21,1 point,Tue May 12 20:57:23 2015 UTC,"Just add   max_num=1, can_delete=False   To your inlineformset_factory in your create view fun.  For edit fun add:   max_num=1, can_delete=True"
django,35r6oh,Kamatori,1 point,Tue May 12 22:05:24 2015 UTC,"I'm reading the ""inline_formset"" documentation and it says that by default it has ""extra=3"", maybe I have to set it to ""extra=1""... I'll try that"
django,35r6oh,Kamatori,1 point,Tue May 12 22:34:06 2015 UTC,"maybe I have to set it to ""extra=1""... I'll try that   extra will not work in that case. 'max_num' is used to limit formsets, not extra.   https://docs.djangoproject.com/en/1.8/topics/forms/formsets/#limiting-the-maximum-number-of-forms"
django,35r50n,Kanthes,2,Tue May 12 20:45:36 2015 UTC,"The problem is this line:  ChatFeed_object = get_object_or_404(ChatFeed, pk=chatfeed_id)   This runs every time your action handler runs, and every time it creates a new ChatFeed object, retrieved from the database. Django doesn't use a cache to give you the same instance back, so you get a fresh instance every time.  How to fix it? The first answer is don't. The whole design of ""shared nothing"" systems is that your persistence layer is the database and not the application. You do not want to be in a situation where restarting your application server (Django instance), or having more than one Django process (which is actually the default with every system you would deploy to) suddenly causes lost data or bugs.  If you have any data that needs to be persisted from one request to the next, you should be saving it to a datastore, such as a SQL database, or some other database e.g. Redis, which sounds like it might be more appropriate for the kind of data you want to store. You can also introduce caching using something like memcached once you have done that.  If you are absolutely sure you want to ignore the above, one way to achieve what you want is as follows:  Store the ChatFeed object in a global variable in the module:  cached_chat_feed_objects = {}   Then access it in the view:  def action(request, chat_feed_id):     if chat_feed_id not in cached_chat_feed_objects:         chat_feed = cached_chat_feed_objects[chat_feed_id] = get_object_or_404(...)     else:         chat_feed = cached_chat_feed_objects[chat_feed_id]      ...   However, this will break as soon as you have a multi-process server, and will break every time you reload the server."
django,35r50n,spookylukey,1 point,Thu May 14 13:25:37 2015 UTC,"Thank you for a wonderful response.  I actually managed to already ""solve"" the issue in a manner almost identical to the way you describe it, by using ""from mysite import config"" as a form of global variable across the whole of the site. Probably a terrible practice, but it works.. for now.  Luckily, this is simply meant to be a personal tool and personal experience, meaning I'm likely never going to be deploying it on anything more than the development server. Nonetheless, I very much thank you for describing the general practices, so that I have a better idea of what ""should"" be done in the future!"
django,35r50n,phinnaeus7308,1 point,Thu May 14 18:33:05 2015 UTC,"I highly recommend the tutorial in the official Django docs. It's good to go through the whole thing, but I think this section specifically may help you see what you're doing wrong: https://docs.djangoproject.com/en/1.8/intro/tutorial01/#playing-with-the-api  Good luck!"
django,35r50n,cjwelborn,1 point,Tue May 12 22:53:53 2015 UTC,I think people are running a separate server (like with Tornado) to connect web sockets to (via django-socketio). Here are some django chat apps. Models are for storing stuff in a database. It's like speaking to the database in Python instead of SQL (but SQL is still possible).
django,35qtfn,garfonzo,2,Tue May 12 19:20:57 2015 UTC,"I usually look for a bootstrap template. This way avoids me hours of tedious html/css programming. I still need to personalize some things though. I usually look for templates at https://wrapbootstrap.com/ and also found a nice theme for my blog (http://django.zone/) at http://shapebootstrap.net/.  For the admin part I'm developing a package for bootstrap theming and some stuff that looks like this (default theme): http://i.imgur.com/lxYNjFS.png or this (bootstrap dashboard): http://i.imgur.com/FZ83s4l.png. It still need some improvements, I'll post here when it's ready =). Anyway, there are also other admin packages like grapelli, suit, material, etc."
django,35qtfn,blckdt,1 point,Wed May 13 07:20:50 2015 UTC,Thanks for the links. Last night I stumbled across Bootstrap Live Customizer which I think I'll be using.
django,35qtfn,blckdt,1 point,Wed May 13 13:44:11 2015 UTC,I didn't know about this site. Always customized throught the bootstrap customization page itself. Thank you too :D
django,35qtfn,peterpirat,1 point,Wed May 13 14:15:29 2015 UTC,Well. In my experience a webapplication rarely fits in a standard template(unless you're doing the most basic stuff).   My webapplication (http://trysmartplan.com) is for employee scheduling and as such has a scope that I doubt any template would be suitable for.   So we designed everything ourselves.   But I guess a template could be fine for a proof of concept. After all many Django projects use the admin module until it simple doesn't cut it anymore...
django,35qtfn,peterpirat,2,Tue May 12 20:25:03 2015 UTC,"http://trysmartplan.com   Your website is beautiful. Nicely done!  I feel like I'm heading down the ""no template can fit what the app does"" road. I've never used the admin panel for end users, so my web apps need something to make it look half decent. Starting with the ubiquitous Bootstrap CSS/JS stuff and customize from there. It also feels cleaner to go the Bootstrap route (or a base CSS/JS set) instead of loading all sorts of template extras unnecessarily."
django,35qtfn,ynotna,1 point,Tue May 12 21:19:44 2015 UTC,Thanks :)  Just out of curiosity - what kind of web app are you building?
django,35qtfn,peterpirat,1 point,Wed May 13 12:06:31 2015 UTC,"I have a few actually. One web app I started about 4 years ago and have been maintaining ever since for a company. Its a web app that basically runs a whole company and was, at the time, a one-off proprietary app. It handles basically everything in the company's work flow such as Estimates, Sales, Scheduling, Client Management, Work Orders, Accounting, etc. Part of the app is accessible by smart phones for field crews to complete their work orders (the office schedules the crews' routes, and the crew completes them in order through their phones).  When I built that web app, I didn't really pay too much attention to overall theme, but just made it look clean and decent. I used the 960grid system, but that was about it for ""theming"". I'm looking to redo that app, as well as make a few others and wanted to handle the UI better. I think I'm leaning heavily towards making a themed Bootstrap using this site."
django,35qtfn,twoblokeswithapostie,2,Wed May 13 13:43:04 2015 UTC,"Great looking site, haven't gone past the frontpage but forwarded to work to check out!"
django,35n7cx,stevemcd,1 point,Mon May 11 21:53:57 2015 UTC,They briefly had a 1.8 release but then they found some language package was causing problems or something.
django,35n7cx,poleethman,1 point,Tue May 12 15:45:11 2015 UTC,"1.7 and 1.8 have been supported on the dev branch for quite a while now. There's an outstanding issue in a dependency (https://github.com/deschler/django-modeltranslation/issues/304) that's blocking us from doing an official release, but the development branch is otherwise good to go."
django,35nhae,Molag_Balls,2,Mon May 11 23:11:27 2015 UTC,"Create a table with historical prices for all items. In this table, keep an additional field that specifies until when the price is valid.  class HistoricalPrice(models.Model):     item = models.ForeignKey(Item)     price = models.DecimalField(max_digits=10, decimal_places=2)     valid_from = models.DateTimeField()     valid_to = models.DateTimeField()   Under this model definition, valid_from is the same as the ""Time (unix)"" column in your CSV. valid_to is equal to valid_from of the next row. The last row in the CSV, corresponding to the current price, has valid_to set to infinity. Whenever you get a new entry, you add a new row to the table as well as update the valid_from of the previously current row. With this data model, you can get the price of an item at a specific time t with the following query  HistoricalPrice.objects.get(item=item, valid_from__lte=t, valid_to__gt=t).price"
django,35nhae,mssnlayam,1 point,Tue May 12 01:30:06 2015 UTC,"Unless you intend to allow for price overlap, you don't need a valid_from and a valid_to field.  In fact that will just make things more confusing.  Instead, I'd suggest going with something like:  class Price (models.Model):     item = models.ForeignKey(Item, related_name=""prices"")     valid = models.DateTimeField()   and then use this when looking up the price for an item:  item.prices.order_by(valid).latest()   or, better yet, if you want to save the extra query every time, you can add a price field to Item and have it auto populate whenever Price is updated (either with a signal or by overriding Price.save()."
django,35nhae,searchingfortao,1 point,Tue May 12 07:38:07 2015 UTC,"You are correct in saying that valid_from and valid_to are not required. However, these fields make some queries simpler. For instance, if someone wants the price of all items as valid on a particular date d:  Price.objects.filter(valid_from__lte=d, valid_to__gt=d)   will get this list. Without the valid_to field, one will have to sort each individual item's price separately, and get the latest value for each item."
django,35nhae,mssnlayam,1 point,Tue May 12 12:17:46 2015 UTC,"Where does the item come into it?  I just see prices and times.  If you have a CSV per item, you would have a separate table with just one row per item, and give it a one to many relationship with the price history data, which would look like the data you posted plus an item_id column.  https://docs.djangoproject.com/en/1.8/topics/db/examples/many_to_one/  Are you looking for anything more than this?"
django,35nhae,davvblack,1 point,Mon May 11 23:38:19 2015 UTC,"Yeah sorry I should have been more explicit. Yes, I have a CSV per item.   I think I'm confused about how the price data itself will be in the table. I can imagine it looking something like...    item_id data    1 [12345,123\n 12346,124...]   2 [12345, 54\n 12346, 55...]    But that seems unwieldy and I'm not even sure if this is what you mean? Is there another way?"
django,35nhae,tastycat,3,Mon May 11 23:53:11 2015 UTC,"I would do something like this as a Price History table, separate from the Item data:    item_id Time (unix) Price    1 129381238 123   1 128319192 124   1 123123123 123   1 129312329 125   2 129381234 54   2 128319197 55   2 123123190 54   2 129311233 56   ... ..."
django,35nhae,tastycat,1 point,Tue May 12 00:03:16 2015 UTC,"How quickly would retrieving by item_id and sorting by unix time could it take, if it were structure like this? I have several years worth of daily data for each item. And there are, what, thousands of items in the game?"
django,35nhae,davvblack,1 point,Tue May 12 00:11:17 2015 UTC,"I can't really say, given that I don't really use Django's ORM that much, and know nothing about your server configuration.  The SQL statement required to get the result you're looking for are pretty simple, though, so they shouldn't be very slow; you''d just need something like:  SELECT item_id, MAX(time)  FROM PriceHistory WHERE item_id = 1   or   SELECT item_id, time FROM PriceHistory WHERE item_id = 1 SORT BY time DESC"
django,35nhae,scoobertron,1 point,Tue May 12 00:20:16 2015 UTC,"You could create an index on (itemid, time) to make that query lightning fast. Look up compound index mysql."
django,35nhae,thrownaway21,1 point,Tue May 12 00:23:23 2015 UTC,"I had a similar thought, thanks for pointing me in the right direction though, I probably wouldn't have known where to look!"
django,35nhae,scoobertron,1 point,Tue May 12 00:34:53 2015 UTC,"Just out of interest, is there a reason why the following would be a bad idea?  Class Price(models.Model):     date = models.DateTimeField(...)     price = models.DecimalField(...)  Class Item(models.Model):     name = models.CharField(...)     price = models.ForeignKey(Price)   Would I be right in thinking that getting the item price by getting the latest price would be more inefficient because it involves another model each time you want the item price?"
django,35nhae,thrownaway21,1 point,Tue May 12 10:42:33 2015 UTC,"models.ForeignKey is going to be a one to one relation with the price, in this instance, which won't give you any sort of history. If that price changes, it's changed. What you want to set up is the ability for Item to pull in multiple prices, in chronological order starting from the newest.  I'm not an information architect... so I'm not sure if this is correct, but I'd put the models.ForeignKey on the Price, so that has reference to the Item. That would be a quick way to represent a many to one relationship... get all prices whose Item is ""this one""  I feel like that is dirty, for some reason... but a many to many field is even more wrong.  tl:dr My solution would be:  Class Item(models.Model):     name = models.CharField(...)  Class Price(models.Model):     date = models.DateTimeField(...)     price = models.DecimalField(...)     item = models.ForeignKey(Item)   with a function on Item to return all related Price models in the correct order."
django,35ktrk,abhimskywalker,7,Mon May 11 09:01:05 2015 UTC,"(I'm going to answer this about breaking up large files generally rather than settings files specifically)  I think you are approaching this like you might approach sorting a box of nuts and bolts you found in your garage rather than thinking like a programmer.  You're seeing this big file and figure that breaking it up into smaller pieces and labelling them clearly will make it easier to find things later.  I would argue that replacing one file with a dozen tiny ones each with just a few lines in it is basically a mild form of obfuscation and will increase your overhead (in multiple ways: your brain will have to do more thinking, your editor will have more files open, diffing changes involves more files) when you are working on this code.  If you have file that is more than a couple of thousand lines, consider finding the largest chunk that is all very closely related and move that into a separate file."
django,35ktrk,chronug,2,Mon May 11 11:34:44 2015 UTC,"you are assuming they are tiny. what if he is asking to break it up into several large files? and i think a couple thousand lines is pretty excessive, no one wants to deal with that file. I generally try to keep files under 500 lines, although settings might be an exception."
django,35ktrk,bro_montana,1 point,Mon May 11 16:53:17 2015 UTC,"Unless I am reading the original post wrong, OP is talking about lots of tiny files: one for database settings, one for static files, one for caching. Some files might only have one line in them.  Breaking up a 2k line file into four 500 line files is fine. But OP seems to be talking about breaking up a 500 line file into 50 separate ones.  Personally I tend to start feeling files become unwieldy at around the 2k mark, but it is a matter of preference and is probably affected by the UI for your editor of choice and how you use search/jump to/etc features to navigate your code."
django,35ktrk,chronug,2,Mon May 11 20:11:19 2015 UTC,There is nothing wrong with doing such a thing. It comes down to how you want to manage your website.
django,35ktrk,mattwritescode,2,Mon May 11 10:26:29 2015 UTC,"I personally wouldn't because the order stuff appears in that file can matter sometimes. Ordering in one file is conceptually easier to deal with than ordering in 5 files, one of which orders the other four.  It's also easier to spot that you put the same setting in twice when they're both in the same file.  I just group the settings by section and put comments (### TEMPLATES) delineating the sections."
django,35ktrk,pydry,1 point,Mon May 11 12:29:17 2015 UTC,Just curious...What would be the purpose/benefit?
django,35ktrk,rnevius,1 point,Mon May 11 09:21:01 2015 UTC,"The base settings file has continued to grow large with people adding various settings for the new apps coming in, and now it is a few hundreds of lines long... It just looks very long and it seems quite a few logical chunks of code/variables can be housed in separate files to make this file look more readable and settings more modular without loosing any functionality.  TLDR: I just want it to look more readable and pretty. That's how I like most of my python. ;)"
django,35ktrk,ccb621,1 point,Mon May 11 09:27:30 2015 UTC,"Your settings file doesn't really need to be pretty aside from logical groupings of app/feature-specific settings. Other than this, how often are you really touching this code that making it ""pretty"" is an actual benefit?"
django,35ktrk,thrownaway21,1 point,Sat May 16 19:27:43 2015 UTC,"Shouldn't any performance impacts only occur during initial startup?  I quite like splitting the settings into ""modules"" like you're suggestion as that file typically gets large."
django,35ktrk,jairtrejo,1 point,Mon May 11 11:18:53 2015 UTC,"If you split it and then you see from settings import A_THING, you won't know where to look for it, you'll have to go through the settings subfiles.  Sure, if it is email-related you'll look in settings.email, but some of your settings will be harder to classify."
django,35ktrk,megadeth9999,1 point,Mon May 11 17:43:01 2015 UTC,"I think it will be worse. I did something similar in the past and I don't recommend this. What if files depend on each other? What if order of their inclusion is important? What if you have circular dependencies in them? With one file it is easier. With many files, you end up not knowing where a given setting is.   Unless you're having some kind of base file and per-app settings files... which are totally isolated from each other.   I suggest large base file with smaller files for production and staging. This works for me the best."
django,35lvis,turkeysaurusrex,4,Mon May 11 16:00:15 2015 UTC,"As far as I know there's three levels to the ORM. Raw sql, extra, and python. They all eventually become sql but at different levels of abstraction. You're pretty much right in your assessment though. Use annotate when you can, drop to extra if you have to, raw sql if nothing works. Django 1.8 added sql functions at the python level and the ability to do expressions in annotate/aggregate. I updated most of my extra/raw to python. One thing to consider is that extra/raw can be faster or more efficient  as the ORM isn't perfect."
django,35lvis,Airith,1 point,Mon May 11 16:38:33 2015 UTC,"the result of annotate can be used in further filter/exclude statements, something that is not possible with extra for instance.  So yes, try to use annotate before dropping into extra. I'm not sure about this, but I think I read that the Django devs would love to get rid of extra, because it's so in-between."
django,35lvis,xBBTx,1 point,Thu May 14 18:27:17 2015 UTC,"There is no silver bullet. Develop an ORM isn't a very simple job, and better than he is going to have some case not covered in Django (core) tried to make a not too intrusive form of SQL language access (via Python objects). Many case you can do using .annotate(), for the cases that did not begin to be made, slow or uncomfortable to use the .annotate() you can leave for .extra() and set up the way you think best."
django,35lvis,avelino0,1 point,Fri May 15 04:30:33 2015 UTC,"It looks like you're banned from Reddit. This means all of your posts are hidden until explicitly approved. Subreddit moderators can't do anything about this, except approve your posts in the subreddit one by one.  You may want to contact the Reddit admins about this.  _  Remember that reddit uses ""shadowbans"", in which you can still see your posts and profile, but other users can't. For more information, check out /r/shadowban."
django,35lvis,avelino0,1 point,Fri May 15 09:31:16 2015 UTC,What I wrote wrong?
django,35kahv,gabrielemcinerney,2,Mon May 11 04:27:30 2015 UTC,Interesting thought. I've struggled with the philosophy of context processor usage a bit so I'm glad to read about this. But why not just write assignment tags instead of this approach?  https://docs.djangoproject.com/en/1.8/howto/custom-template-tags/#assignment-tags
django,35kahv,phinnaeus7308,2,Mon May 11 05:50:24 2015 UTC,"The suggestion doesn't even work in Django; it's using a Jinja2 mechanic.  Even if it did, it fails at the second requirement which is to make variables explicit. {% set debug_info = debug_info() %} doesn't make ""debug_info"" any more specific, it just means you have to call it.  Better is to use a custom templatetag.  If you find that a template processor takes up too much time, create a simple assignment template tag that creates a variable.  An example might be to get the users' favorite blog posts, which you probably won't want to do with every template render, but will do often enough that you don't want to add it to every view function.  Here we get only the favorite posts with a status of ""published"":  some-app/templatetags/favorites.py::  register = Library()  @register.assignment_tag def get_favorite_posts(user):     return user.favorite_posts.filter(status='published')   any-template.html::  {% load favorites %} {% get_favorite_posts request.user as favorite_posts %} <h2>Favorites</h2> <ul>       {% for post in favorite_posts %}            <li><a href=""{{ post.get_absolute_url }}>                       {{ post.title }}            </a></li>       {% endfor %} </ul>"
django,35kahv,deadwisdom,1 point,Mon May 11 09:37:30 2015 UTC,"+1. Asked the same in the post itself about the templatetags part. About the jinja2, since Django 1.8 jinja2 is supported natively."
django,35hvwr,meerkatydid,11,Sun May 10 15:12:23 2015 UTC,I thought this was going to be a blog post about how to run django on actual oranges. somewhat disappointed.
django,35hvwr,boshlol,9,Sun May 10 20:47:19 2015 UTC,"The first thing is to use a server based on an ARM processor for low current requirements. The Raspberry Pi operates on 1.21W and is adequate for a server, you can install ubuntu directly onto it and django should be up and running shortly afterwards.  By using magnesium and copper anode/cathode, a lemon will provide 1mA according to Wikipedia at 1.5V. I think that means you need 833 lemons. As oranges have a lower acidic content let's round that up to 1000 oranges.  Obviously the key problem here is the physical logistics. I would recommend a 32 x 32 wooden lattice with 10cm x 10cm holes. If the wooden frame is mounted on springs then emptying several barrels of oranges followed by several good kicks should fill the holes accurately enough. Then a second wooden lattice with the magnesium and copper spikes spaced appropriately could be lowered to complete the orange battery.  Of course you want to use a reverse proxy such as varnish in front of your django app to keep cpu to a minimum. This will prolong the lifespan of the oranges.  I don't know of any distros with orange specific optimisations but if you do come up with any please don't forget to contribute them back.  Phillip."
django,35hvwr,ptemple,1 point,Mon May 11 15:34:27 2015 UTC,Good luck with that
django,35hvwr,iamwithnail,4,Mon May 11 13:46:47 2015 UTC,"DO gets a +1 for me, not so much Webfaction (see previous thread on this) - depends how much you need the assist from the one-click setup from Webfaction.  Knowing what I know now, I wish I'd taken the pain of learning earlier."
django,35hvwr,MikeyN0,2,Sun May 10 15:49:53 2015 UTC,What are the mentioned problems with web faction? I've been using it for the last 4 months and absolutely love it.
django,35hvwr,TankorSmash,1 point,Mon May 11 01:34:57 2015 UTC,"This is my experience with web faction too, I absolutely love it"
django,35hvwr,iamwithnail,1 point,Mon May 11 06:53:09 2015 UTC,"http://www.reddit.com/r/django/comments/34a8kb/django_site_performance_on_webfaction/  Don't get me wrong, Webfaction is fine/very good for some things, particularly getting stuff up and running, but it's nowhere near as performant as a dedicated instance on Digital Ocean or similar. (I find AWS to be too much of a pain, and Azure is just a nightmare now).  Hetzner are good but very expensive.        Like I say - if you don't need the help of the one-click installers on WF, use something else. If you do, that's fine too, and use WF."
django,35hvwr,lehmakook,1 point,Mon May 11 08:18:27 2015 UTC,"I've been using it over 3 years for ""small sites"", and it's okay.  But more and more recently, I've been noticing performance instabilities. Sometimes a page takes 20 seconds to load instead of the usual 200ms, sometimes writing to Postgres fails, and so on.  I guess these are a fact of life on shared hosting where other customers might be doing whatever on the same machine. But I've been thinking of moving all my small sites to a VPS with some minimum guaranteed slice of the CPU of the host."
django,35hvwr,ptemple,1 point,Wed May 13 13:54:31 2015 UTC,"Thanks! :) I've heard so many good things about DO, that I'm tempted to make the switch immediately."
django,35hvwr,iamwithnail,3,Sun May 10 16:53:07 2015 UTC,"I would switch to Webfaction first, then switch to DO when you outgrow it. This lets you concentrate on Django rather than being a sysadmin. They are both cheap with no setup fees so switching is easy. I use both and am happy with both of them. Tip: don't use the DO django droplet, do a standard install then set up as required.  Phillip."
django,35hvwr,dysmas,2,Sun May 10 17:49:12 2015 UTC,"Sage advice, this - I wish I'd seen it before I spent about a day and a half trying to configure the django droplet.  It only took me about 2 hours to do the standard install from scratch in the end. :("
django,35hvwr,dysmas,3,Mon May 11 08:19:12 2015 UTC,"Just curious, What problems have you encountered?"
django,35hvwr,sdiepend,1 point,Sun May 10 19:24:12 2015 UTC,Their documentation is subpar and inaccurate.
django,35hvwr,andermic,1 point,Mon May 11 13:54:07 2015 UTC,Do you have root to a normal linux instance? or is it a heroku type managed app type system?
django,35hvwr,iamgort,2,Mon May 11 16:40:30 2015 UTC,Have Django running on DO. So far no complaints at all.
django,35hvwr,iamgort,2,Sun May 10 21:41:30 2015 UTC,I would jump ship to another provider like Digital Ocean. Last night I used my ansible scripts to completely deploy a full Django App to a new Digital Ocean instance and it works perfect. It's always best to have a platform that is as standard as possible.
django,35fm08,Qawba,6,Sat May 9 21:54:33 2015 UTC,Doesn't work on mobile.  UPDATE Clicking the links in the TOC doesn't work on mobile and desktop.
django,35fm08,dAnjou,3,Sat May 9 22:45:07 2015 UTC,Worked for me on android.
django,35fm08,elbiot,3,Sun May 10 01:55:24 2015 UTC,Clicking the links in the TOC doesn't work on mobile and desktop.   Yep. TOC is #admin-interface while the navigation is #awesome-django-admin-interface
django,35fm08,moustachaaa,4,Sun May 10 02:22:29 2015 UTC,"Design is very nice but it's very hard to read with that low contrast colors and those thin fonts.  Also, https://www.djangopackages.com/"
django,35fm08,ionelmc,3,Sat May 9 23:25:57 2015 UTC,"As co-maintainer of Django Packages, I just want to say I like both sites. :-)"
django,35fm08,pydanny,1 point,Sat May 9 23:59:59 2015 UTC,Just view it directly on Github: https://github.com/rosarior/awesome-django/
django,35fm08,brtt3000,1 point,Sun May 10 09:36:36 2015 UTC,There's a lot to go through here. Does anyone have suggestions on must sees? So far django-secure is one I'm going to try out. Also which Angular? django-angular or djangular? edit: found out django-secure was merged into django 1.8
django,35hbma,vintageshinpads,3,Sun May 10 10:48:22 2015 UTC,Did the same thing like 9 months ago. Django-rest-framework and SO was pretty much what I needed. I think you can make it without tutorials (maybe drf's ones)
django,35hbma,kamotos,1 point,Sun May 10 11:31:21 2015 UTC,SO?
django,35hbma,dAnjou,1 point,Sun May 10 11:48:51 2015 UTC,"StackOverflow. And I agree with /u/kamotos, just go with the official documentation."
django,35hbma,developthese,3,Sun May 10 12:09:50 2015 UTC,Have you taken a look at python-eve? The documentation is solid and here's a good podcast on it.   DRF is pretty great. It maps onto your models w/ incredible ease and provides a lot of functionality w/ minimal writing on your part. Pretty effortless to build with.
django,35hbma,rnevius,2,Sun May 10 18:20:24 2015 UTC,You also may be able to do it without DRF. Are you sure you need DRF?
django,35hbma,iamwithnail,-2,Sun May 10 12:12:51 2015 UTC,Suggest something for a native android app
django,35f82g,tisuthrowaway,3,Sat May 9 19:46:09 2015 UTC,"Try it with port 8000. Nginx is listening on 8000, and that's where static and media are served from."
django,35f82g,bpainter327,1 point,Sat May 9 20:37:08 2015 UTC,"Port 8000 meaning    upstream django {      # server unix:///path/to/your/mysite/mysite.sock; # for a file socket     server 127.0.0.1:8000; # for a web port socket (we'll use this first) }   ? If yes, I just tried it with port 8000 and Django still gives the same 404 error."
django,35f82g,pemboa,2,Sat May 9 20:57:18 2015 UTC,Does your static work either? Here's mine for an example:  location /static/ {     alias /var/webapps/projectgroup/projectvirtuanenv/project/static/;     expires 30d; }
django,35f82g,fjortisar,1 point,Sat May 9 20:30:48 2015 UTC,"I'm currently using DjangoRestFramework and only returning JSON objects. I'll make it so that I return an HTML template which links to a static image and I'll let you know once that is done. Currently, after placing media.png in my static folder, if I go to  127.0.0.1:800/static/media.png   it gives   Page not found (404) Request Method: GET Request URL:    http://127.0.0.1:8000/static/media.png Using the URLconf defined in CMS.urls, Django tried these URL patterns, in this order:  The current URL, static/media.png, didn't match any of these."
django,35f82g,bpainter327,2,Sat May 9 21:02:02 2015 UTC,"If you're getting a Django error, something probably isn't right with nginx config (since those requests shouldn't be getting forwarded to django).  What do you get if you just go to http://192.168.***.***:8000 ?"
django,35f82g,fjortisar,1 point,Sat May 9 21:08:09 2015 UTC,"When I got to   http://192.168.***.***:8000    Django returns a 404:   Page not found (404) Request Method: GET Request URL:    http://127.0.0.1:8001/ Using the URLconf defined in CMS.urls, Django tried these URL patterns, in this order: ^CMS/ ^admin/   which is fine because I didn't put   r'^$'   in my urls.py. Basically, when I go to   http://192.168.***.***:8000   Django runs through the urls.py."
django,35f82g,fjortisar,2,Sat May 9 22:08:54 2015 UTC,"Sorry, on mobile. 8000 for nginx and 8001 for django. Since you are getting a django error when accessing the file, it seems that nginx is not using the location that you have setup. What if you set nginx with ONLY the media and static locations, and remove all references to the django server?"
django,35f82g,fjortisar,1 point,Sat May 9 21:15:22 2015 UTC,"Okay, so what I did was change my CMS_nginx.conf file to:  upstream django {     server 127.0.0.1:8000; # for a web port socket (we'll use this first) }  # configuration of the server server {     # the port your site will be served on     listen      8000; }   and then, from the terminal, did   uwsgi --http :8001 --module CMS.wsgi   So basically, I'm running Django on :8001 and Nginx on :8000. Now, when I go to  127.0.0.1:8000/media/media.png   Nginx returns a 403 Forbidden. When I go to  127.0.0.1:8001/media/media.png   Django returns a 404 Not found:  Page not found (404) Request Method: GET Request URL:    http://127.0.0.1:8001/media/media.png Using the URLconf defined in CMS.urls, Django tried these URL patterns, in this order:"
django,35f82g,fjortisar,2,Sat May 9 22:03:56 2015 UTC,"That's better, at least nginx is trying to access the file (giving you a 403).  You might have a permissions problem, so check the nginx error log to see what it says when trying to access /media/media.png"
django,35f82g,sdiepend,1 point,Sun May 10 00:10:07 2015 UTC,"The error log said  2015/05/09 18:02:18 [error] 25960#0: *1 open() ""/home/a/Documents/media/media.png"" failed (13: Permission denied), client: 127.0.0.1, server: 192.168.***.***, request: ""GET /media/media.png HTTP/1.1"", host: ""127.0.0.1:8000""   so then I checked the permissions on the folder and the file. Turns out that the folder had read access but the file did not, so then I changed the permissions on the file and gave it read access. Now, when I run Django on :8001 and Nginx on :8000 and try  127.0.0.1:8000/media/media.png   it shows up, but if I try  127.0.0.1:8000/CMS/users   Nginx gives a 502 Bad Gateway status code. Going to   127.0.0.1:8001/CMS/users   works though because I'm using port :8001 (Django). Any idea how I can use Django and Nginx on the same port (basically, let Nginx serve the media files and let Django handle everything else)?  Edit: when I try to do  upstream django {     server 127.0.0.1:8001; # or when I try  server 127.0.0.1:8000; }  # configuration of the server server {     # the port your site will be served on     listen      8000; }   and then try going to  127.0.0.1:8000/media/media.png   Django returns the 404 status code saying that the URL does not match anything in urls.py."
django,35f82g,ezrock,2,Sun May 10 03:33:21 2015 UTC,"You can't have two services on the same port (easily). Nginx should serve requests for /media, /static and forward everything else to the wsgi service  try replacing your server_name line with:  server_name    _;"
django,35f82g,autowikibot,1 point,Sun May 10 05:09:17 2015 UTC,"Okay, so I tried:  upstream django {     # server unix:///path/to/your/mysite/mysite.sock; # for a file socket     server 127.0.0.1:8001; # for a web port socket (we'll use this first) }  # configuration of the server server {     # the port your site will be served on     listen      8000;     # the domain name it will serve for     server_name _; # substitute your machine's IP address or FQDN }   and when I go to  127.0.0.1:8001/media/media.png   it says that ""this webpage is not available"" (Chrome can't load it). Note that Django is running on :8000.  If I change it to  upstream django {     # server unix:///path/to/your/mysite/mysite.sock; # for a file socket     server 127.0.0.1:8000; # for a web port socket (we'll use this first) }   and then visit  127.0.0.1/media/media.png   Django returns the 404 status code (because Django is on :8000 is as well). How would I make it so that Django runs on :8000 but when I go to ""/media"" or ""/static"" then it is served by Nginx?"
django,35f82g,LittleHelperRobot,2,Sun May 10 16:54:14 2015 UTC,"You can't. You need to have all requests go through nginx  It should work like this  nginx on 8000, django on 8001  nginx accepts all requests, if it's for /media or /static it serves the appropriate file, if it's for anything else it gets forwarded to the wsgi service running the django app."
django,35f82g,eastern_sun,1 point,Sun May 10 17:01:22 2015 UTC,"ohhhhh, okay, now it's starting to make sense. So what I did is, first run Django on :8001:  uwsgi --http :8001 --module CMS.wsgi   and then did:  upstream django {     # server unix:///path/to/your/mysite/mysite.sock; # for a file socket     server 127.0.0.1:8001; # for a web port socket (we'll use this first) }  # configuration of the server server {     # the port your site will be served on     listen      8000;     # the domain name it will serve for     server_name 192.168.174.131; # substitute your machine's IP address or FQDN }   and started Nginx on :8000. Now, when I visit  127.0.0.1:8000/media/media.png   Nginx returns the image, and when I go to  127.0.0.1:800/CMS/users (this is a url in my Django project's urls.py)   Nginx returns a 504 Gateway Time-out status code. The error.log says:  2015/05/10 13:18:38 [error] 28911#0: *6 upstream timed out (110: Connection timed out) while reading response header from upstream, client: 127.0.0.1, server: 192.168.174.131, request: ""GET /CMS/users HTTP/1.1"", upstream: ""uwsgi://127.0.0.1:8001"", host: ""127.0.0.1:8000""   I'm Google'ing around right now and will let you know if I find a solution."
django,35eika,petr0,2,Sat May 9 15:53:04 2015 UTC,You could use this:  https://github.com/ericholscher/django-test-utils/blob/master/test_utils/management/commands/makefixture.py  It's basically a smarter dumpdata that does what you want.
django,35eika,pydry,1 point,Sat May 9 16:04:22 2015 UTC,"Thanks! Would you recommend using this in production though?   Cause I don't want it for tests or moving some data between environments. I want it as a backup solution in production, to be able to backup some parts more often or give users ability to backup their stuff by themselves."
django,35eika,pydry,1 point,Sat May 9 16:35:42 2015 UTC,"Provided you tested it and verified that it works I don't see why not.  I would be wary of giving this data to users, though."
django,35ccja,HittingSmoke,7,Fri May 8 23:10:26 2015 UTC,"""a little newer"". The distro package, especially RHEL is usually extremely out of date."
django,35ccja,merican_atheist,3,Sat May 9 00:33:56 2015 UTC,I just love the distro packages in centos 6.  Code doesn't run? OH. Python 2.6.  Always fucks me up.
django,35ccja,d4rch0n,2,Sat May 9 08:35:29 2015 UTC,"CentOS 5.11 (yep, still stuck with that) has Python 2.4...  And supervisor 2.x version, which was released in 2007"
django,35ccja,xBBTx,2,Sat May 9 09:37:50 2015 UTC,"Debian backports usually has a fairly up to date version, does it not?  Is there no equivalent in RHEL/CentOS?"
django,35ccja,merican_atheist,2,Sat May 9 00:46:58 2015 UTC,"I can't speak to Debian, but RHEL/CentoOS is atrocious when it comes to python packages."
django,35ccja,pydry,3,Sat May 9 01:37:19 2015 UTC,"I never considered uWSGI to be a ""python package"" and I was shocked to see it in pip to begin with. I know it was originally designed for Python but it supports so many more languages and use cases."
django,35ccja,northben,2,Sat May 9 02:05:05 2015 UTC,"Not as up to date as pip, but might still be sufficient."
django,35ccja,stefantalpalaru,3,Sat May 9 04:25:38 2015 UTC,"Your build environment will likely be more controlled. If you specify the uwsgi version in your list of requirements, but maybe you sysadmin controls is level applications, you can have a more repeatable environment.  Less troubleshooting is always better in my book."
django,35a4cb,zeenfaizal,4,Fri May 8 11:39:40 2015 UTC,"Was anyone else confused about the question relating to the ""most useful parts"" of the Django documentation? What are the differences between the ""Topic guides,"" ""References guides,"" and ""How-tos""? Or, at least, how are they distinguished?"
django,35a4cb,rnevius,3,Fri May 8 15:13:36 2015 UTC,"Topic guides are deep-dives into a particular feature, eg. https://docs.djangoproject.com/en/1.8/topics/db/models/ that cover the important details of the features.  Where-as the reference guides cover the whole API, included every attribute, parameter etc, eg. https://docs.djangoproject.com/en/1.8/ref/models/fields/  This explains it pretty well: https://docs.djangoproject.com/en/1.8/intro/whatsnext/#how-the-documentation-is-organized"
django,35a4cb,Mavus,1 point,Fri May 8 18:37:51 2015 UTC,"Yes, I was kind of confused by that."
django,35b5bg,cocochito,3,Fri May 8 17:11:05 2015 UTC,"I'd love to help but I'm not really willing to design your entire data model for you. If you have some more specific questions I'm more than happy to try to answer them, specifically."
django,35b5bg,metaphorm,1 point,Fri May 8 19:19:35 2015 UTC,"Fair enough, neither do I want you to design a model for me, just guidance. My main question was if I was designing my model right, but as guerciotti pointed out, it seems like it's a mess. Can you point me in the right direction about what am I doing terribly wrong? Thanks!"
django,35b5bg,guerciotti,1 point,Fri May 8 20:57:45 2015 UTC,"I just glanced at your diagram and ... it confused me. Your scenario sounds like a fairly standard ""Line of Business"" app. A typical design pattern would be a header & a lineitem/detail record, ie. a one to many pair. Eg. Orders would have a single Order Header record and then one or more individual lineitems associated with it. Their are tons of similar data model patterns in LOB apps but they often have very custom logic depending on the business and its practices and culture.  Since this is new to you, check out this classic book for some insight into proper model design.  http://www.amazon.com/Data-Model-Resource-Book-Vol/dp/0471380237/ref=sr_1_1?ie=UTF8&qid=1431113842&sr=8-1&keywords=data+models"
django,35b5bg,ardzoht,1 point,Fri May 8 19:50:04 2015 UTC,"That's right, it's what I need. a LOB app, didn't know that it had a name. I will check that book. Thanks!"
django,35amti,charlesbukowksi,8,Fri May 8 14:43:17 2015 UTC,"Learning django thoroughly is not going to happen via books/classes/and tutorials. Those things will help you get started then fill in gaps of knowledge along the way of actually using django.  To start use the django project docs  If you want text move on to tango with django and/or django girls.  After that get two scoops of django, django design patterns and high performance django. Those are sources to get you close to learning it thoroughly.  Finally start reading the django code itself. That is where I learn the most even found feature doing so that I have overlooked I the django docs.  However, you can read all of those resources, unless you do many projects large and small you won't actually know what is going on.  Also there are video options for getting started and continuing education:  GoDjango and plural sight are good as well.  Just a note I am the person behind GoDjango."
django,35amti,BuddyLindsey,1 point,Sat May 9 18:07:01 2015 UTC,Thanks this was really helpful
django,35amti,new2django,3,Sun May 10 04:02:11 2015 UTC,Django Girls tutorial to get started. Two Scoops of Django when you are done with the tutorials.
django,35amti,jlorencetti,1 point,Fri May 8 14:48:04 2015 UTC,What about Lightweight Django?   I'm thinking about start it.
django,35amti,sriramracer,1 point,Fri May 8 17:28:31 2015 UTC,lightweight django is good. Just wish it had Angular instead of Backbone.
django,35amti,abhimskywalker,1 point,Tue May 12 06:10:03 2015 UTC,"looks good, i will check it out :)"
django,35amti,abhimskywalker,3,Sat May 9 05:02:08 2015 UTC,"I will share my experience (I went from Econ-grad Business Analyst at Citigroup to a full-stack developer role at a startup in about a year, and have been enjoying it here for about 2 years now). I went through this route: 1. Basic google python training was more than enough for me to get started 2. Next was official Django tutorial 3. Read the djangobook (http://www.djangobook.com/en/2.0/index.html) (it's quite out of date now, so I would say to rather skip this, but this was very helpful) 4. Dived into two scoops of django, and it was bloody good decision with lot's of best practices 5. Kept doing a lot of tutorials, watching Pycon talks on youtube to get ins and outs of python in general and Django in particular  I would strongly suggest that once you are done with the official django tutorial try to follow along with this video with Kenneth Love (https://www.youtube.com/watch?v=KZHXjGP71kQ) It's a short 3 hours video ;), but you will probably end up learning weeks worth of stuff if you do follow it up till the end. Then follow this up with Two Scoops of Django book (Preferably the latest 1.8 or even 1.6 would be good and also coherent with the previous video) and by the end you should emerge quite an expert at Django. All the best!  Oh and new book for two_scoops_of_django_18 is out: http://www.reddit.com/r/django/comments/346vng/two_scoops_of_django_18_early_release_pdf_is_out/ Definitely worth the price and more."
django,35amti,kennethlove,2,Mon May 11 09:56:25 2015 UTC,<3 thanks  my background is finance and I also decided to move away from it.  tech seems much more creative and satisfying so far (at least for me)
django,35amti,abhimskywalker,2,Mon May 11 11:36:42 2015 UTC,"Yep. IMHO tech is a much better enabler to be able to create actual value in the world, rather than most of the financial alchemy. :)"
django,35amti,adamrt,1 point,Thu May 14 11:16:30 2015 UTC,"I know your ""short 3 hours"" was tongue-in-cheek but OMG did that time go by way too fast."
django,35amti,shazow,1 point,Tue May 12 20:39:46 2015 UTC,"Oh I just meant it to be encouraging. You know just like LOTR series are also short 3 hour movies that once you start, you get so involved that by the end of it you hardly notice where did the time go... :)"
django,358b1r,tisuthrowaway,3,Thu May 7 23:03:58 2015 UTC,"In this application, api is an app, and I believe api.py is basically their views.py.  This is exactly how I've gone about it. Simply create an app (call it whatever you want, it doesn't have to be api). Then you use the DRF views and serializers in that app. Then you hook it all up by including the api urls in your project's urls.  This is what my current drf application looks like  . ├── api │   ├── admin.py │   ├── models.py │   ├── permissions.py │   ├── serializers.py │   ├── urls.py │   ├── utils.py │   └── views.py ├── project_name │   ├── settings.py │   ├── urls.py │   └── wsgi.py ├── manage.py ├── readme.md ├── requirements.txt"
django,358b1r,CleverEagle,2,Thu May 7 23:17:28 2015 UTC,"I do mine completely opposite of that.    I have an api folder, and it has most of those files in it, but I also have more apps than just ""the api app"" that I expose via the API.  For example, I have a blog app that has the traditional urls.py, views.py, models.py, but I also store the blog's serializer.py in the blog folder.    In the api folder, I import the API route from blog and add it to the API router, but I keep the application logic in the application, where I think it belongs."
django,358b1r,issue9mm,2,Thu May 7 23:32:04 2015 UTC,"I also use this setup. I actually began with the ""complete opposite"", and spent a painful few days refactoring it a year or so into the project.  An app's api.py is the the app-specific implementation of a general concept, just like models.py, admin.py etc."
django,358b1r,execrator,1 point,Fri May 8 05:10:21 2015 UTC,"Would you be able to provide a visual representation of your file structure (by visual, I mean like how ClevelEagle did it)?.  You mentioned ""In the api folder, I import the API route from blog and add it to the API router"". By this, do you mean that in your blogs/urls.py file you tell it to look at api/urls.py and in api/urls.py, you state which URL leads to your blogs app?  Also, by ""application logic"" do you mean the applications views.py file? If you keep the logic in blogs/views.py, then what exactly do you put in api/views.py?"
django,358b1r,CleverEagle,3,Thu May 7 23:55:34 2015 UTC,"For my original example, I was describing a project that was only the api. He is describing a better way to separate things out when the api and another app have shared models.  I think he is describing something like this, where the api is simply the api router, permissions, and api views. In this case, in api/urlspy, we would import the routes from blog/api.py. This keeps the api and blog separate, while still allowing the blog application to be exposed via the api.  . ├── api │   ├── permissions.py │   ├── urls.py │   └── views.py ├── blog │   ├── admin.py │   ├── api.py │   ├── models.py │   ├── permissions.py │   ├── serializers.py │   ├── urls.py │   └── views.py ├── project_name │   ├── settings.py │   ├── urls.py │   └── wsgi.py ├── manage.py ├── readme.md └── requirements.txt   /u/issue9mm, please correct me if I misunderstood you."
django,358b1r,issue9mm,1 point,Fri May 8 00:44:51 2015 UTC,"In the example above, what's the difference between blog/api.py and blog/urls.py?  Also, what would be in api/views.py?   For example, if api/urls.py was:   from blog import views url(r'^ users$', views.user_list.as_view()),   then it is using the views in blog/views.py, right? What would be the use of api/views.py, blog/urls.py and blogs/api.py?"
django,358b1r,CleverEagle,3,Fri May 8 00:57:52 2015 UTC,"A lot of projects surface their views through mixed HTML + Template transclusion (e.g., standard Django) for their regular views, and reserve their API views for things like Android / iOS applications.    If that's the case, your api/views.py is the API Router, as well as views particular to the API (e.g., you might have a login view in yourapp/views.py, and the API equivalent in yourapp/api/views.py). If a user hits /blog through the regular web interface, they hit urls.py, which invokes the sub-URLs at blog/urls.py, which invokes blog/views.py which renders some kind of a response.  This may be entirely different from accessing http://yoursite.com/api/blog/1/  The blog/serializers.py has the model -> json serialization methods, and at that point, you can store the view for surfacing the JSON/API view as either blog.views.list_view() or as api.views.blog_list_view().  I prefer the latter, because I view the blog's API view to be a part of the blog.  /u/clevereagle view's the blog's API view as part of the API (correct me if I'm mistaken).  There's no wrong answer here, just a matter of preference.  I just personally prefer to look for bloggy things in yourapp.blog, but surfacing them via the API router is done in either api/views.py or api/urls.py (depending on the overall design of the project).     then it is using the views in blog/views.py, right? What would be the use of api/views.py, blog/urls.py and blogs/api.py?   You probably have api/views.py serving your API's login methods, at the very least.   Your blog's URLs.py should serve the ""regular"", non-API views (if you're using them, I personally haven't used them in a long time, preferring the API exclusively), and blogs/api.py doesn't generally exist for me...   Edit: I probably shouldn't be posting technical things, because I am NOT sober.  That said, I don't think I'm so intoxicated that I can't program.  I'll remind myself to sobriety check this for later.   Edit: /u/clevereagle definitely did not misunderstand me, which is impressive.  Also, why doesn't this sub have the reminder bot? I will not remember to check this again when I'm sober."
django,358b1r,never_safe_for_life,1 point,Fri May 8 02:03:24 2015 UTC,Great points! It is definitively a matter of preference in how you structure your application.  Edit: I should also check this when sober...
django,358b1r,dirigeant,1 point,Fri May 8 06:24:30 2015 UTC,I think this is a good structure. It's what I use.
django,359i11,nemomeimpune,1 point,Fri May 8 05:57:25 2015 UTC,"Thanks for the explanation!   On the second loop, you are saying if get-played's-value, value that is 0, so you have if 0 which is false, so you get to the else section again.   I was expecting this to check if any value has been assigned to played, i.e. if request.session['played'] exists. So I thought the first time the player played, it would go to the elsesection, and the next time, it wouldn't enter the else part again, looping through the request.session.get('played')for the rest of the attempts.  Thanks!"
django,355ubc,burlsprunk,9,Thu May 7 10:42:08 2015 UTC,"Or you could, you know, just set your $PYTHONPATH and $DJANGO_SETTINGS_MODULE and use django-admin..."
django,355ubc,yousai,1 point,Thu May 7 13:01:40 2015 UTC,"OP is here. Nope, the problem hasn't been solved. I don't want to do this setup per each project. I just want an easy drop in solution. Kinda lazy..."
django,355ubc,Timonweb,1 point,Thu May 7 21:02:38 2015 UTC,"Actually, this has been solved, if you're using virtual environments (which you should be) and are setting the environment variables as mentioned by /u/yousai. There are plenty of tools out there that can set environment variables for you...so you shouldn't have to repeat anything."
django,355ubc,rnevius,1 point,Fri May 8 08:23:30 2015 UTC,"no, please read above once again :) I don't want any manual setups. And trust me, I use virtualenv. In any case, don't want to use it don't use, the world is free (at least in dev)"
django,355ubc,Timonweb,2,Sat May 9 06:04:27 2015 UTC,I just use this in cron jobs: /var/virtualenv/djangoproject/bin/python /var/apps/djangoproject/manage.py command_name
django,355ubc,waterskiaddict,2,Wed May 27 14:58:03 2015 UTC,We have a command to simply symlink the manage.py file to the virtualenv bin folder when the project is bootstrapped via a Makefile so any time you source the corresponding virtualenv the manage.py command is available everywhere.  Example Makefile  .PHONY: all requirements dev live local pep8  all: requirements  env:     virtualenv env     ln -fs ../../src/manage.py ./env/bin/manage.py  requirements: env     ./env/bin/pip install -r ./etc/requirements/frozen.txt  dev: requirements     ./env/bin/python src/manage.py migrate --noinput --settings=settings.dev     ./env/bin/python src/manage.py collectstatic --noinput --settings=settings.dev  live: requirements     ./env/bin/python src/manage.py migrate --noinput --settings=settings.live     ./env/bin/python src/manage.py collectstatic --noinput --settings=settings.live  local: requirements     ./env/bin/python src/manage.py migrate --noinput --settings=settings.local     ./env/bin/python src/manage.py collectstatic --noinput --settings=settings.local  pep8: requirements     ./env/bin/flake8 src --max-line-length=120 --exclude=src/*/migrations/*
django,355ubc,leonmarksmith,2,Thu May 7 19:30:59 2015 UTC,One of the most annoying aspects of developing in Django for me is running manage.py commands   Is it really?
django,355ubc,pemboa,1 point,Thu May 7 19:59:49 2015 UTC,believe it or not
django,355ubc,Timonweb,1 point,Fri May 8 06:16:53 2015 UTC,"I created a more general solution to this problem : https://github.com/crdoconnor/projectkey  You create a key.py file in the root folder of your project and put all those tasks in it that you need to run a lot (like manage).  You can call those commands from any directory beneath the key.py folder like so: ""k manage argument""."
django,355ubc,pydry,1 point,Fri May 8 08:59:12 2015 UTC,"I'm using simple tox.ini. It's also creates/activates virtualenv,  checks that virtualenv always matched to the requirements and yes, allows to start commands from any subdirectory.  [tox] envlist = py27 skipsdist = True  [testenv] deps = django==1.7.1 commands = python manage.py {posargs:runserver} setenv =    PYTHONPATH={toxinidir}    PATH={envdir}/bin:{env:PATH}"
django,355ubc,kmmbvnr,0,Thu May 7 17:22:35 2015 UTC,"If you're going to do this, why not just symlink manage.py to /usr/local/bin?"
django,355ubc,never_safe_for_life,-1,Fri May 8 08:06:52 2015 UTC,control-r is your friend.
django,352hst,frankwiles,8,Wed May 6 15:39:08 2015 UTC,"Good tip on the connection pooling.   Occasionally you’ll have a situation where it’s actually faster to do the extra queries vs using joins [..]   We recently seen this in a project. It happens when adding too much fields to select_related, and remember the database has it's own query-cache that makes it not so straight forward to tune queries.  Also django-debug toolbar is good but limited unless you use it against produciton scale database.  Maybe next article talk about caching? Django standard caching, ORM caching, own custom caching etc."
django,352hst,brtt3000,4,Wed May 6 19:20:24 2015 UTC,"That's a good idea, we haven't done a comprehensive caching guide type post.  My favorite ProTrick with caching is to use Varnish ESI (Edge Side Includes) to cache and include fragements as a more robust/controlable version of the {% cache %} tag"
django,352hst,pydanny,7,Wed May 6 19:35:19 2015 UTC,Varnish could definitely use better documentation. :P
django,352hst,ramsesthedog,2,Wed May 6 19:37:39 2015 UTC,I second the request for a post on caching!
django,352hst,MrAckerman,7,Wed May 6 19:36:39 2015 UTC,"This is great, thanks.   As somebody with intermediate programing skills, but totally new to Web programing, it's nice to read about optimization and beat practices.  Will definitely add these to my toolkit."
django,352hst,pemboa,2,Wed May 6 17:29:34 2015 UTC,Happy to help! Glad you liked it.
django,352hst,fgd,3,Wed May 6 18:11:18 2015 UTC,'CONN_MAX_AGE': 600   I've actually encountered deadlocks with this particular setting in production. I've since stopped using it myself.
django,352hst,pemboa,1 point,Thu May 7 03:30:48 2015 UTC,Same here. Did you ever measure the difference with/without connection overhead?
django,352hst,pemboa,1 point,Thu May 7 09:57:08 2015 UTC,"No. It wasn't appreciable, but I'm sure it was probably measurable. I got a way bigger boost by switching from db sessions to cache sessions, along with Redis caching."
django,352hst,pemboa,1 point,Thu May 7 17:30:39 2015 UTC,Deadlocks are usually a sign of bad transaction management actually.  Two transactions that end up depending on the same resource.
django,352hst,Fajkowsky,2,Thu May 7 15:00:53 2015 UTC,"Deadlock is likely the wrong term, just the best I could come up with. What would happen is that after a few hours of the app being cold, (so generally overnight) none of the processes would be responsive the next morning, and would eventually error out with some database issue. It's happened to me on three separate apps, one of which was MySQL the other two Postgres I believe -- all in production. So i just removed it.  I may try it again some time, when I have enough time to debug further however."
django,352hst,andrewingram,2,Thu May 7 17:29:34 2015 UTC,I bet you're running into paragraph #3 here https://docs.djangoproject.com/en/1.8/ref/databases/#connection-management
django,352hst,YouAreSalty,1 point,Fri May 8 15:58:55 2015 UTC,"Possibly, but this feature should work with default RDBMs setups, didn't for me. I had to restart Guinicorn every time."
django,352hst,ramsesthedog,3,Fri May 8 16:45:05 2015 UTC,This is a great article. Thanks!  Small typo:   django.contrib.sessions.backends.cache_db   should be:   django.contrib.sessions.backends.cached_db
django,352hst,pydanny,5,Wed May 6 19:29:53 2015 UTC,"Whoops! Thanks for pointing that out.  Just fixed it, will be live in 5 minutes after the cache clears."
django,352hst,mroximoron,2,Wed May 6 19:34:16 2015 UTC,Really good thing! Thanks for sharing.
django,352hst,mroximoron,2,Wed May 6 18:52:08 2015 UTC,"I'm pretty sure there's a difference between connection pooling and persistent connections. My understanding is that Django's persistent connections allows a single process to keep hold of a DB connection between requests. Whilst connection pooling (which Django doesn't support natively?) essentially allows a process to pick an existing connection out of a shared pool, use it, then return it to that pool."
django,352hst,true_religion,2,Thu May 7 11:56:15 2015 UTC,"You're absolutely right they are entirely different things and I worded that badly, just fixed it. Thanks for pointing that out!"
django,352hst,tbarbugli,2,Thu May 7 15:06:54 2015 UTC,Great tips!  Bookmarked for the future.
django,353sc3,MarketMan123,5,Wed May 6 21:30:22 2015 UTC,Sorry I cringe when I see developer/designer.  They exist sure but it seems strange looking for the equivalent of a hairstylist/accountant.  I have had better success finding the two roles separately and IMHO you'll get better salary feedback in this post if you do.  Despite my criticism could you elaborate on what you're trying to do?  Where do you want the candidate to be located?  There are a lot of variables.  Once answered I'll be able to provide a more constructive response.
django,353sc3,wintermute_ai,2,Wed May 6 23:41:52 2015 UTC,"I agree you are correct in the hairstylist/accountant comparison. What's important to me is someone who can update our website with new features with an eye for design so we don't have to spoonfeed our ideas.  I'm based in NYC, but in the age of the internet location almost doesn't matter."
django,353sc3,wintermute_ai,2,Thu May 7 01:33:17 2015 UTC,"What would you say is the average time frame of your projects?  Is it a SaaS product?  How many people are on the team?  I also stay away from looking for full stack Devs as well.  I would prefer my backend guys focusing on test coverage, ensuring we're developing based off of best practices and maintaining documentation.  Lastly and not least important, have them work on anything besides the current project so they are current and having fun.  These are just small examples.  Depending on what you're trying to accomplish eye for design is the last thing I want them worried about.  Obviously if something looks off the expectations are to bring it up or resolve it.    I still maintain that this field of software development can be very broad and require specialized skill sets.  If you were building a house you don't hire just a carpenter to build it.  Imagine if we had a single full stack house builder of one guy?  I have digressed and will answer your question though.  Our django (only) Devs make between $58k to $124k a year.  Good luck!  As a fellow business owner I would be more than happy to have more dialog with you if you have any further questions."
django,353sc3,ItsAPuppeh,3,Thu May 7 03:43:03 2015 UTC,"My current going rate for full stack Django dev work is $75/hr which I have been receiving from multiple clients for both short and long term work, all remote. I feel like I could push for more if I wanted, but I'm content where I am."
django,354yqt,garfonzo,5,Thu May 7 03:37:35 2015 UTC,"/u/ccb621 is on point here.  You can't compare Django to Django-Rest-Framework any more than you can compare Windows to Oracle for Windows.    Django Rest Framework requires Django as a dependency.  Further, Django can do everything that Django Rest Framework can do, you'd just have to write a lot of code to replicate the functionality of Django Rest Framework.  DRF gives you a lot of convenience, like authentication modules, json serializers/deserializers, API routing and documentation, etc., etc."
django,354yqt,issue9mm,2,Thu May 7 04:15:17 2015 UTC,"Ya, it all makes sense now. I do see the advantage of having DRF as part of the project to serve up a good API.   It's all so much clearer now :)"
django,354yqt,ccb621,9,Thu May 7 04:28:35 2015 UTC,DRF is a third-party app for Django. You have to have Django first. It might help to walk through the DRF tutorial.
django,354yqt,dirigeant,2,Thu May 7 03:50:28 2015 UTC,"Uh... wow, I totally missed the mark on that one. It all makes so much more sense now. I did do the tutorial, got my API up and rolling, things working nicely.   DRF being a third party app makes so much more sense now. The tutorial has you add rest_framework as an installed app. That should have been a big clue for me! I was thinking that DRF was stand alone, while Django was also stand alone."
django,3548hf,10week,4,Wed May 6 23:41:42 2015 UTC,"You should make your code conform to pep8 also, flake8 is a good tool to check the code style.  pip install flake8  flake8 your/code/dir"
django,3548hf,ckcollab,1 point,Thu May 7 06:52:28 2015 UTC,thanks I'll look into that
django,3548hf,tgdn,1 point,Thu May 7 09:25:28 2015 UTC,"Maybe you should reshare this on pastebin or github for example, it would make your code a lot more readable. Also, I don't know if you know, but there are forums such as StackExchange where questions such as yours can be viewed and answered by many developers which gives you a lot more feedback compared to reddit which is not really meant for that"
django,3548hf,ccb621,2,Thu May 7 20:38:34 2015 UTC,No one on stack overflow seemed interested but I can check a few others out. Just thought I'd give the django community here a try
django,3548hf,ccb621,0,Thu May 7 20:54:39 2015 UTC,"Your factory is very confusing. It would help if the comments were directly above the line being commented on, and you had a bit more whitespace.  It's not really clear you need a dynamic serializer. The response will take a dict. You can simply create a new dict with the fields you actually need.  What is the third-party API with which you are interfacing? Is there no C# library?"
django,353q43,dambles,1 point,Wed May 6 21:13:43 2015 UTC,"In order to help, it would be better if you could post the Asset model and the AssetForm."
django,353q43,DarkSector2,1 point,Thu May 7 01:38:20 2015 UTC,"The whole project is on github, you can find my models here, https://github.com/jdambly/datacenter/blob/master/racklayout/models.py"
django,353q43,kennethlove,1 point,Thu May 7 15:41:54 2015 UTC,You should be able to replicate this by overriding the save() method in your CreateView.
django,353q43,kennethlove,1 point,Thu May 7 15:39:56 2015 UTC,the reason that I didn't over ride .save() is that I need to take into account location which I used to calculate which rack units the asset is being placed into. I didn't see a way to just .save() so I ended up doing it this way. maybe I made a wrong choice tho... I don't really a see any other way to do it. any input would be helpful
django,353q43,kennethlove,1 point,Fri May 8 04:19:10 2015 UTC,How are you getting location now? I see it in the function signature. Could it be passed to the form?
django,34yte8,respondcreate,3,Tue May 5 18:11:44 2015 UTC,Wow. It looks great.  I will try to use it in one of my next projects.
django,34yte8,einsiedler,2,Tue May 5 19:39:18 2015 UTC,Thanks! I definitely need this right now in one of my projects!
django,34yte8,krautsch,2,Tue May 5 21:43:52 2015 UTC,You're welcome! If you run into any issues (or have questions about implementation) don't hesitate to drop me a PM!
django,34yte8,SebCorbin,2,Wed May 6 02:16:50 2015 UTC,"Nice one, I'm new to django and already loving the simplicity of this package!"
django,34yte8,ut2222,1 point,Wed May 6 08:40:25 2015 UTC,Does it work with services like AWS?
django,34yte8,andrey_shipilov,1 point,Wed May 6 06:16:41 2015 UTC,"Yup! django-versatileimagefield works great with Amazon's Simple Storage Service (S3), in fact I'm using it right now on about five different projects. For a quick example on how to set it up check out this comment."
django,34xsfe,philippeowagner,8,Tue May 5 13:20:23 2015 UTC,"A little background info, for those who have no idea what this is:   Django Background Task is a databased-backed work queue for Django, loosely based around Ruby's DelayedJob library.   In Django Background Task, all tasks are implemented as functions (or any other callable).  There are two parts to using background tasks:   creating the task functions and registering them with the scheduler setup a cron task (or long running process) to execute the tasks"
django,34xsfe,rnevius,9,Tue May 5 13:51:08 2015 UTC,How does this compare to celery?
django,34xsfe,shellghost,8,Tue May 5 14:25:15 2015 UTC,This app is super simple solution compared to Celery. Celery requires a lot of infrastructure and resources around Django itself.   I posted weeks a go a tutorial telling how to setup Celery.
django,34xsfe,brtt3000,4,Tue May 5 14:51:43 2015 UTC,"Cool, but how does it compare to RQ?"
django,34xsfe,xinaked,4,Tue May 5 16:48:28 2015 UTC,I never used RQ myself but as it seems you have to run a Redis server/worker to process the jobs.
django,34xsfe,lordrashmi,3,Tue May 5 19:28:45 2015 UTC,"rq is great, and tested. i already have redis up anyway for convenience, easy caching, and general awesomeness (all session queries moving there is great)"
django,34xsfe,andybak,4,Wed May 6 01:06:10 2015 UTC,Thanks for that :)
django,34xsfe,lordrashmi,2,Tue May 5 13:57:03 2015 UTC,Starred the project as it seems like it would fit my needs. Currently have celery setup but I feel it is overkill for my project.
django,34xsfe,ramsesthedog,8,Tue May 5 15:22:14 2015 UTC,I've been ranting against Celery for what seems like forever. Nothing wrong with it per se but it's become the go-to app for anything that requires scheduled tasks - and it adds a hell of a lot of complexity that I'm fairly sure 90% of use cases don't benefit from.  My pro-tip for another common use-case - if all you need is to run a slow task and not block a request there's this: https://github.com/defrex/django-after-response
django,34xsfe,badkitteh,2,Tue May 5 18:46:13 2015 UTC,Thank you!  After response is exactly what I need!
django,34xsfe,andybak,2,Tue May 5 18:55:20 2015 UTC,Indeed a good tip for a simple and effective way for running slow tasks afterwards.
django,34xsfe,badkitteh,2,Tue May 5 19:22:08 2015 UTC,"This looks fantastic! Just what I need for a project I'm working on--something simple, since Celery was overkill (at least for the stage we're at now). Thanks for posting!"
django,34xsfe,kroustou,4,Wed May 6 05:20:31 2015 UTC,I find uWSGI to do this pretty nicely if you happen to use it using it's workers/spooler concepts and injected API. I'm sure this could be a nice alternative if uWSGI isn't available.
django,34xm1q,road_laya,3,Tue May 5 12:16:30 2015 UTC,"For truly normalized data you should look into Data warehousing techniques. This would allow you to keep your data how you want on the application side then move it over into a completely normalized format for data aggregation and reporting.  You are on the right track in this case though for normalization and just try not to repeat any information that fits solely into one table. I just wrote up a quick example of what these tables might look like.  Product - ProductID - CanonicalProductID - StoreID - Price  Store -StoreID -StoreName -StoreZip -StoreWebAddress  CanonicalProduct - CanonicalProductID - CanonicalProductName - CanonicalProductHighPrice - CanonicalProductLowPrice - CanonicalProductCategory  I hope this helps a but, let me know if you have anymore DB specific questions. I can't help so much with the Python stuff.... yet."
django,34xm1q,BigZen,2,Tue May 5 12:39:38 2015 UTC,"Nice! One problem is that I don't have the CanonicalProductID when I find a new Product. Another problem is that I rescrape the website multiple times to make a log of the price history.  So I think I'll build upon your example like so:  Price   ProductID StoreID Date Currency Price   Product   ProductID ProductName StoreID URL   Store   StoreID StoreName StoreZip (This is Europe, forget about zip codes) ;D StoreWebAddress   CanonicalProduct   CanonicalProductID CanonicalProductName CanonicalProductCategory   ProductMapping   CanonicalProductID StoreID ProductID   Workflow: The first time a product is found on a site, automatically create a Price and Product. Subsequent scrapes of the URL only yield a Price.  Assign Products to CanonicalProducts by creating a new ProductMapping once. Create new CanonicalProduct if no good match is found.  Name and characteristics remain in Product as well in CanonicalProduct, but the ones in Product are ignored and CanonicalProduct is considered the authorative source."
django,34xm1q,BigZen,1 point,Tue May 5 13:11:57 2015 UTC,I think you're on the right track with the price table. Either update that table or create many records only grabbing the MAX(Date) and leaving historical data in there to track overtime.
django,34xm1q,spoetnik,2,Tue May 5 15:23:59 2015 UTC,Add a foreignkey relation to a 'shop' model. Make SKU and Shop relation unique to the product model.
django,34xm1q,metaphorm,1 point,Tue May 5 12:28:30 2015 UTC,"a Shop has one or more ShopItems for sale. ShopItems store data about the specific instance of that good for sale in the Shop, such as price, number in stock, and shipping cost.   A ShopItem has  exactly one CatalogueItem, though a CatalogueItem will certainly have many ShopItems (one for each different store that sells the item). The CatalogueItem stores data about the physical attributes of the item, such as name, color, size, etc. These attributes should not be repeated on ShopItem except where they differ from those same attributes on the CatalogueItem. Ideally this never happens though."
django,34xomj,devonmargel,1 point,Tue May 5 12:45:12 2015 UTC,"It looks like you're banned from Reddit. This means all of your posts are hidden until explicitly approved. Subreddit moderators can't do anything about this, except approve your posts in the subreddit one by one.  You may want to contact the Reddit admins about this.  _  Remember that reddit uses ""shadowbans"", in which you can still see your posts and profile, but other users can't. For more information, check out /r/shadowban."
django,34to45,mcfc_as,6,Mon May 4 13:54:25 2015 UTC,This looks pretty cool. Does anyone have an experienced take on this app and/or a comparison with similar ones?
django,34to45,little_oaf,18,Mon May 4 20:16:16 2015 UTC,"Over the past year I've been converting a trade publication (with whitepapers, email newsletters, a store, and a few other business-y features) from using WordPress/Magento and a few custom plugins to using Wagtail/Django and python libraries. The site isn't in production yet, so I can't speak to performance, but so far I haven't regretted choosing Wagtail as the CMS component of the project and I've been able to do some powerful things.  Highlights of what I've gotten Wagtail to do:   Use concrete model inheritance for specialized non-physical product types (which are managed in Wagtail) that work well with a custom ecommerce storefront (vanilla django). For example, a ""deliverable"" product type which lets us sell PDFs or other files or a ""webinar"" type which can use the G2Webinar API to register purchasers. They all inherit from the same concrete Product class, though, so they're easy to manipulate in querysets and lump together in places like a shopping cart or an index page. Using the RoutablePage contrib class, which lets you extend a basic Wagtail Page class with custom routing (the same URLconf system that vanilla Django uses), I created a few gated content types similar to the products. So, for example, a free report class which allows each instance of that content to display: a) a landing page preview of the content with a registration form, b) an unlocked version of the content with full-text, and c) lead-gen information collected about who's viewing that content. All of that in a single, relatively easy-to-maintain class. Using hooks which let you inject CSS/JS into the Wagtail editor, I created a email newsletter builder which can pull in news and event content elsewhere in Wagtail to populate an email-specific template. I had done exactly the same thing in the old WordPress site, but it was a giant nightmare and (while functional) was awful to maintain. Implementing the same thing in Wagtail was a breeze since all the concerns are separate (the JS interface, the content fragments, the final rendering stuff, separate newsletter models, etc.). I could even do fancy stuff like lint the CSS to make it email-ready, since it's so easy to override the default rendering of Wagtail Page classes. Wagtail made it really effortless to write code I was proud of instead of the kludgy mess that I always manage to do in WordPress.   Low points:   It can be hard to figure out what patterns you should be following for anything more complex than the Wagtail demo site. Until I did a big refactor to use concrete inheritance for the Products in my store, it was a huge mess composing a bunch of disparate classes to work together. The RoutablePage class was a huge plus, but that too I had to struggle with until I figured out how to use it well. I spent alot of time in the Wagtail internals just seeing how requests were routed around. Tagging could be better integrated. I have so, so, SO much dumb boilerplate code to make use of django-taggit in my Wagtail classes. If I were smarter I could have made an abstract class that takes care of all the uses I had for tagging, but I'm not, so it's dumb dumb dumb. I really wish Wagtail did that heavy lifting. I'm sort of sloppy when it comes to keeping migrations in order, deleting stuff from the database directly, and creating mock content. I ran into a bunch of problems with orphaned content types and wagtail page revisions which would halt my development progress while I repaired something or chased an error message. I wish Wagtail had exercised a bit more ""magic"" there and knew when to fix those sorts of things by itself during a migration. The management commands weren't much help, either. Getting Factory Boy working with Wagtail models was more effort than it should have been. It should be easier to write integration tests or mock content generators for your models right out of the box. The cache-busting contrib module isn't as flexible as I'd like.   Anyway, those are my thoughts so far. I'm happy to answer any questions."
django,34to45,cowbellemoo,1 point,Tue May 5 01:19:57 2015 UTC,I'm about to do an Oscar/Wagtail integration...I'm curious what kind of eCommerce/shopping cart solution you used for your project (or maybe you rolled your own?).
django,34to45,rnevius,1 point,Tue May 5 13:26:54 2015 UTC,"I rolled my own using a very minimal framework (Satchless) with Stripe for payments. It's basically just a vanilla Django application that happens to use Wagtail models for products. Wagtail only comes into the equation for product pages and indexes, which aren't complex. I got to customize the checkout to exactly what we wanted, but I probably should have gone with something more prescriptive."
django,34to45,cowbellemoo,1 point,Tue May 5 15:02:57 2015 UTC,"Thank you for this great detailed comment, I'm going to to have to save this for when I have to implement either this CMS app or something else.   Seeing as to how you are referring to patterns, which book or other resources would you recommend? I am currently going through 2 scoops, buying Ravindran's Django Design Patterns in June and maybe the GOF Design Patterns book later on. I'm trying to get my project going but I am working cautiously to minimize my potential for serious design flaws."
django,34to45,little_oaf,2,Tue May 5 18:45:40 2015 UTC,"I'm not a great authority on patterns, but after maintaining a complex and brittle WordPress site my main goal with my Wagtail/Django project was making it as easy as possible to understand when I come back to it in 6/12/18 months. So essentially, DRY and code readability above all else. With Wagtail, where most of your code is building out classes based on the Wagtail Page class, that means being very smart about abstract classes, concrete inheritance, the django content_types framework, django managers, and the internals of the Page class.  The last book I read about Django was High Performance Django and it was amazing since my weakest point is deployment and everything involved with the technology stack that gets built around Django. It was really helpful for knowing patterns around the subject of caching.   Oh, and they don't really point people to it, but Torchbox keeps alot of their projects in their github account. Wagtail originated as they built the Royal College of Art website, so you can browse that repo as an alternative demo site where they made real-world compromises and so forth."
django,34to45,cowbellemoo,1 point,Tue May 5 20:51:52 2015 UTC,"I'm workon on implementing email newsletters in wagtail, and i'm struggling to do what i've done before, with celery and django admin, in wagtail.  Does it have to be a page or can you create another section like the users, auth, sites, etc sections?"
django,34to45,LightShadow,0,Mon Jun 29 05:08:44 2015 UTC,"I've been testing CMS packages for the last few weeks and only spent an hour or so with wagtail. It had installation issues and never really ""worked."" (within my fiddle-with-it time frame)  It looked nice, but it wasn't easy to test it out so I moved on."
django,34to45,MattBD,3,Tue May 5 07:36:02 2015 UTC,"Really? You should be able to test it really easily. On the demo repo on Github, they have a ""Deploy to Heroku"" button so you can deploy it there for evaluation purposes with a single click."
django,34to45,rnevius,3,Tue May 5 11:04:27 2015 UTC,"I literally git cloned the demo, and then vagrant uped to run the demo.  To install the actual CMS on an existing project (without using the demo or vagrant), I simply did pip install wagtail and copied the relevant settings for Django Compressor to my settings file...  The ticket with a big project like this is to read the documentation. There's a great section dedicated to installation and another for configuration"
django,34to45,LightShadow,1 point,Tue May 5 13:32:48 2015 UTC,The instructions do not work on Windows.
django,34to45,thelindsay,1 point,Tue May 5 19:21:23 2015 UTC,"As long as its not compiling anything it should be just a matter of pip install.   If psycopg2 is a dependency, there are precompiled binaries (and maybe even wheels) available online, which you can install first."
django,34to45,LightShadow,0,Tue May 5 21:52:44 2015 UTC,"""Should"" is the big catch here. I'm telling you after an hour of fiddling it did not work."
django,34to45,CleverEagle,1 point,Tue May 5 22:05:27 2015 UTC,Same issue here. I thought it was interesting that the readme didn't even have a simple pip install wagtail blurb. They just point you to an outdated example project.
django,34to45,rnevius,2,Tue May 5 07:51:32 2015 UTC,https://github.com/torchbox/wagtail#getting-started  Second list item has nothing to do with the example project and has step-by-step instructions.
django,34w5al,ice2o,4,Tue May 5 01:29:43 2015 UTC,"It looks like you're returning the python representation of a dictionary, not JSON. They look similar, but as you've found out they're not the same."
django,34w5al,moustachaaa,1 point,Tue May 5 01:34:04 2015 UTC,The part that is driving me crazy is I don't see how to return it as json. It is coming from the StylistViewSet in my view.py but I'm not sure how to tell it to return json and not the object itself.
django,34w5al,moustachaaa,5,Tue May 5 01:49:42 2015 UTC,"In the DRF documents, there's a snippet on how to return JSON.   To finalize the serialization process we render the data into json.   content = JSONRenderer().render(serializer.data)   http://www.django-rest-framework.org/tutorial/1-serialization/"
django,34w5al,sli,1 point,Tue May 5 02:00:35 2015 UTC,json.dumps perhaps?
django,34w5al,tyroneslothtrop,1 point,Tue May 5 01:52:58 2015 UTC,"stylist is just a charfield, right? But it looks like you're trying to save JSON (or actually the string representation of a python dictionary) to it. Probably the best thing to do would be to set up the proper models (stylist, profession), with all the necessary fields (email, name, certification, etc.), and connect through the right relationships (manytomany, foreignkey, etc.). If you get all of that worked out, it should work as you'd expect.  Edit: Actually, a profession model probably isn't necessary.  Edit: StylistSubmission seems like an odd model to have. Why not just stylist on its own?"
django,34rhwa,cocochito,3,Sun May 3 22:54:12 2015 UTC,"I saw in a forum that creating a class that contained the identical elements from employees and groups (for example, names) and then make the other two inherit from that class, so that instead of being model.Model, it should be Assignees or something like that. Seemed like a good idea at first, but didn't worked.   I think this should work if you put a foreignkey to the base model inside the task model   And obviously I tried with ForeignKey but that didn't worked because I needed two.   you can have two foreignkey in the task model with blank=True and null=True so they are not both mandatory   Another question related to models, I want to be able to assign contact information to the employee and groups. This means that an employee can have multiple phones and multiple emails, each one labeled as work, home, etc. I tried creating a model for Contact info which includes the email, phone and type and using a foreign key relate it to the employee or group.   that is correct, you should just use an inline so that they can be added/modified/deleted in the same page as the employee/group"
django,34rhwa,Brandhor,1 point,Sun May 3 23:06:10 2015 UTC,"Thanks for your answer! I'm trying to implement the contact information and I set this on the model:  class Employee(models.Model):     name = models.CharField(max_length=100)     contact = models.ForeignKey('Contacts', blank=True, null=True)  class Group(models.Model):     name = models.CharField(max_length=100)     contact = models.ForeignKey('Contacts', blank=True, null=True)  class Contacts(models.Model):     type = models.CharField(max_length=60, blank=True, null=True)     phone = models.CharField(max_length=12, blank=True, null=True)   But whenever I try to add a new phone in either the employee or the group, a dropdown menu shows me the numbers that I have saved. What am I doing wrong?   Also, I tried the inline but showed error when I tried to syncdb, about Foreign Key, so I better commented it while I solve this. I think is somewhat related..  Any help would be great! Thanks!  Also, sorry for my terrible english!"
django,34rhwa,01hair,2,Mon May 4 02:33:26 2015 UTC,"Look into InlineModelAdmin objects - they'll do what you want them to do.  Also, if there's not a compelling reason to have the contact information as a separate object, I would just store them in the Employee and Group objects. If you want them to have an arbitrary number of ""Contacts"" objects (a Many-to-one relationship), the foreign key needs to be in the ""Contacts"" model."
django,34rhwa,Brandhor,1 point,Mon May 4 05:30:31 2015 UTC,like /u/01hair said you have to put the foreignkey inside contacts if you want multiple contacts for each employee/group
django,34rhwa,lonahex,2,Mon May 4 08:07:56 2015 UTC,"If you know that you'll always need to support just these 2 relations then why not add 2 foreign keys to the table? You could add some validation to make sure a task must have at least 1 of the 2 FKs == NULL.  You could write a little code to make the interface of tasks handle both cases for you like,  class Task(models.Model):     user = FK(User)     group = FK(Group)      @property     def assignee(self):         return self.user or self.group     ...   This won't work with the ORM though. There you could use something like this (provided you want to fetch task for either a group or user)      ...  from django.db.models import Q  Task.objects.filter(Q(user=my_user) | Q(group=my_group))   ...   With related_name feature, you'll be able to fetch the tasks like this,   class Task(models.Model):      user = FK(User, related_name='tasks')      group = FK(Group, related_name='tasks')   my_user.tasks.all() # or my_group.tasks.all()   ..."
django,34rhwa,thayerpdx,1 point,Mon May 4 08:54:51 2015 UTC,Doesn't it make more sense to have Task be the model referenced by FK from the other models? Then you can use the view to split it out.
django,34rhwa,lonahex,1 point,Thu May 7 19:12:15 2015 UTC,"Depends on the relationship. If a task can only have 1 assignee, then FK has to be from the Task to the Person. If one person can be assigned to only 1 task, FK has to be from Person to Task.   If each task can have multiple assignees and each person can have multiple tasks assigned then an M2M between the two from either side (same thing) works."
django,34rzko,dj_jar,1 point,Mon May 4 01:34:21 2015 UTC,"So, result 2 is likely the way you want to use it.    For just running a factorial, it's kind of hard to illustrate a good example, but what's the end goal of running the factorial?  If it's to run the factorial out of band without occupying the current user session, you can poll the task for task.ready() periodically until it shows the result. When it shows the result, then do something, like notify the user.   More traditionally though, if you're using this for a web framework, you want to do something afterwards.  You can either put that task in the task that you're doing, to be finished when the result is complete, or you can use an on_success handler (like a callback).  So, TLDR, lets say you're writing an RSS feed parser.  User signs up and uploads his OPML file.  You retrieve the OPML file, and begin parsing it to get all the news from the sources in the OPML file.  This could take a minute or ten.  You kick off a task with .delay() that does the importing, return a 201 to the user, and tell them that you're importing the files.  They'll get an email when it's finished importing, but they can keep refreshing the page and see results as they come in.    Your tasks can be set up like this (or a variety of other ways, I like the handlers and abstract classes, personally):   def import_opml_file_and_email_user(opml_file):     chain = import_opml_file.s(opml_file) | email_user.s()     chain()  @app.task() def import_opml_file(url):     # do things     return email_user(user_email)  @app.task() def email_user(user_email):     result = mail.send(""whatever"")     return result"
django,34rzko,issue9mm,1 point,Mon May 4 04:09:51 2015 UTC,"For just running a factorial, it's kind of hard to illustrate a good example, but what's the end goal of running the factorial?   For larger numbers to calculate the factorial takes several seconds. I thought it is better example than calling time.sleep().  This is just an example. My goal is to run FFmpeg or Libav, which will re-encode video file uploaded by the user.  I don't understand many things, for example: why you are using @app.task() decorator instead @shared_task; why my tasks do not appear in the admin panel 127.0.0.1:8000/admin/djcelery/taskstate/."
django,34rzko,pydry,1 point,Mon May 4 11:42:31 2015 UTC,"I removed most unnecessary code from the sample project leaving only the second method and modifying it a little bit. Full working example is available at github.com/dj-jar/celeryexample2. I pasted most important files below.  tasks.py  from __future__ import absolute_import from celery import shared_task   @shared_task def add_task(a, b):     return a + b   @shared_task def mul_task(a, b):     return a * b   @shared_task def fac_task(n):     result = 1     for i in range(1, n+1):         result *= i     return result   views.py  from django.core.urlresolvers import reverse from django.http import HttpResponseRedirect from django.shortcuts import render from celery.result import AsyncResult from mathapp.tasks import add_task, mul_task, fac_task   def add_delay(request, a, b):     t = add_task.delay(int(a), int(b))     return HttpResponseRedirect(reverse('m:task_result', args=[t.task_id]))   def mul_delay(request, a, b):     t = mul_task.delay(int(a), int(b))     return HttpResponseRedirect(reverse('m:task_result', args=[t.task_id]))   def fac_delay(request, n):     t = fac_task.delay(int(n))     return HttpResponseRedirect(reverse('m:task_result', args=[t.task_id]))   # view queued task def task_result(request, task_id):     res = AsyncResult(task_id)     ctx = {         'status': res.status,         'result': res.result     }     return render(request, 'mathapp/task_result.html', ctx)   The aforementioned functions are accessible at the following addresses:   http://127.0.0.1:8000/math/add/6/7/ http://127.0.0.1:8000/math/mul/6/7/ http://127.0.0.1:8000/math/fac/5/"
django,34rzko,metaphorm,1 point,Mon May 4 11:15:06 2015 UTC,"Is the third method the appropriate way to use Celery?   I would probably do something like this, yes.  Most of my celery tasks involve updating the database to indicate completion if there's a result that the user needs to see at the end of it."
django,34rzko,metaphorm,1 point,Mon May 4 11:23:57 2015 UTC,celery is an asynchronous task queue manager. factorial can't be run asynchronously in any interesting way (just each process calculates its own factorial). your examples make it kinda hard to make good suggestions about how to use it.  what are you going to be using this for in real life? once we know your real problem its much easier to give real advice.
django,34rzko,sriramracer,1 point,Mon May 4 13:43:28 2015 UTC,My goal is to run FFmpeg or Libav to re-encode video file uploaded by the user.
django,34qlsr,lunadigital,3,Sun May 3 18:19:17 2015 UTC,"databases are usually a 1:1 key value relationship   nope, this is not true at all. and possibly where you're getting confused. relational databases are not like key:value datastores. SQL works on a fundamentally different principle than something like Mongo or Riak or anyother NoSQL style key:value store.  relational databases represent relationships between sets of objects. the most fundamental way to think of a relationship is in terms of number. ForeignKey represents a Many-to-One relationship between the objects. ManyToManyField represents (as you might expect) a Many-to-Many relationship between the objects.   In your case it seems clear that you have a ManyToMany relation between Employees and Projects. This means that each Project can have multiple employees assigned to it, and that each Employee can be assigned to multiple projects. Django has a built in field type called ManyToManyField that should handle this for you pretty elegantly.   https://docs.djangoproject.com/en/1.8/topics/db/examples/many_to_many/"
django,34qlsr,metaphorm,1 point,Tue May 5 15:55:44 2015 UTC,This is really helpful. Thanks for taking the time to explain it - I've been a hobby programmer for years (3D artist by trade) but I've done little to no real database interaction. I think between you guys and the SQL expert in the office I'll get a hang of this in no time.
django,34qlsr,kevin____,2,Wed May 6 23:46:42 2015 UTC,"A many to many will let you reference one other model. Your Employees could reference multiple Projects in an M2M attribute called ""projects"". You could then do the same for invoices, and estimates. The thing to note is that in the scenario I just described the Employees, Estimates and Invoices only have knowledge of each other through their respective projects. If they share projects then that's a cool coincidence, but to access a Project's Estimate through, say, an Employees instance you would need to first access the instance's ""project"" attribute/related manager and then access the Project's Estimate through it's reverse relation. Hope this helps. Good luck"
django,34qlsr,bulletproofvest,2,Sun May 3 20:01:31 2015 UTC,"It really depends if your estimates, invoices and employees need to belong to more than one project.  For estimates and invoices, I would assume they are unique to a project, so on those models you'd want a ForeignKey field to the Project model:  class Project(models.Model):     # fields for project model  class Estimate(models.Model):     project = models.ForeignKey(Project, related_name=estimates)   This is a 1 to many relationship - the estimates belong to one project, and a project can have many estimates. You can access estimates through the related_name property on the Project model: some_project_object.estimates will contain a list of Estimate objects.  For the employees you might want to have employees exist in many projects. For this you'd want a ManyToMany field:  class Employee(models.Model):     projects = models.ManyToManyField(Project, related_name=employees)   Now you can add the same employee to multiple projects. some_project_object.employees will contain a list of Employee objects, and some_employee_object.projects will contain a list of Project objects."
django,34qlsr,lonely_b,1 point,Sun May 3 21:17:39 2015 UTC,"There is 1:1 relationships and many to many relationships, the later in SQL it is usually implemented with a ""join"" table containing the ids of the 2 models : http://sqlrelationship.com/wp-content/uploads/2012/01/many-to-many.png  It is implemented this way in Django: https://docs.djangoproject.com/en/1.8/topics/db/examples/many_to_many/  Best of luck"
django,34qlsr,dAnjou,1 point,Sun May 3 18:44:49 2015 UTC,I think I understand. So using a many-to-many value will let you associate more than one model with the variable and Django will keep track of it all?
django,34qlsr,metaphorm,-2,Sun May 3 19:02:32 2015 UTC,"No. Django is not doing any of that, nor does any other web framework. The RDBMS takes care of that after you've normalized your data structure properly. This is all very basic stuff. You should know that even before you start coding."
django,34qlsr,dAnjou,1 point,Sun May 3 20:01:09 2015 UTC,"your technical advice is correct, but your tone is counter-productive.   its basic stuff but not everyone has been doing this for years. how do you even learn the basics in the first place? everyone is new at something once. try to be more accommodating to beginners. OP was asking for help in good faith, and asked good questions. don't belittle him/her for asking good questions."
django,34qlsr,metaphorm,1 point,Tue May 5 16:00:15 2015 UTC,"I'm starting to get sick of people interpreting any kind of tone into what I say. My tone was as neutral as it gets (as opposed to this very comment here, which has a quite annoyed tone).   its basic stuff but not everyone has been doing this for years.   I'm not sure what this means. If you agree that it's basic stuff, then don't you think people should learn it very early on? Probably even before they start coding their app?   how do you even learn the basics in the first place?   Easy. You either go to a place where they teach this (evening courses, online courses (this YT video gives an introduction to what OP is looking for in merely 5min), university/college, meetups, workshops, conferences, ...) or you read about it by yourself. And yes, of course that's boring and exhausting and nobody likes to chew these dry bones. But after all, software development is real work, and especially for web development there are a lot of concepts to understand first. That doesn't make it a good place for people who are totally new to programming.    I just saw that you tried to scratch on the surface of SQL in your reply, but really, people should at least understand conceptually how relational databases work. Sure ORMs abstract that to a degree that they make it easier (not easy) to work with databases in your programming language or framework. But it's still necessary to understand the underlying concepts. Same goes for HTTP, you can not work efficiently with a web framework if you don't understand HTTP."
django,34qlsr,dAnjou,1 point,Tue May 5 18:06:10 2015 UTC,"If you agree that it's basic stuff, then don't you think people should learn it very early on? Probably even before they start coding their app?   no. everyone comes from a different background and learns in a different style. I went to school for computer science and learned database stuff before I started learning how to program web servers. Obviously the OP did not come from this background and wanted to learn how to make a web app first. That's totally reasonable actually, and pretty normal. I work with a team of 6 engineers at my dayjob. Only 2 of us came from traditional computer science backgrounds.    But after all, software development is real work, and especially for web development there are a lot of concepts to understand first.   there really are. web development is very complicated, just in terms of how many different technologies, systems, and concepts are involved. I think its very pragmatic for a learned to try and learn the framework first though. Its a path to building something tangible, which is a huge motivator and really important for a lot of people when they're climbing the steep learning curve initially.   I don't think its important to learn the concepts in a specific order. As experienced developers we can see that there is a kind of natural hierarchy of concepts and that relational databases is at a lower level than framework ORMs. however, a learner won't know this, and needs an experienced developer to help him/her reach that conclusion.  you basically just tried to bludgeon the OP with the conclusion. ""this is basic. you need to learn this first."" you didn't mean to sound annoyed or condescending, but you did. I'm not the only one who downvoted your post after all. its very easy to give the wrong impression with this kind of thing. I think its more helpful to suggest some facts or ideas to the OP that will help him/her discover for themselves what they need to know. People only learn when they are able to teach themselves. Its probably counter-productive to just tell them ""this is what you're supposed to already know""."
django,34mxoz,kracekumar,1 point,Sat May 2 16:56:34 2015 UTC,Do the positions change at all when the size of the responses increase? I wouldn't think so...but those are some tiny responses.
django,34o7xv,EasierThanIThought,4,Sat May 2 23:58:14 2015 UTC,You can use  open source admin dashboard templates like https://github.com/almasaeed2010/AdminLTE or purchase commercial admin templates from Themeforest.
django,34o7xv,mamunabms,1 point,Sun May 3 01:05:52 2015 UTC,"That's really impressive and I may end up using it, however, I was hoping for something even simpler.  I read a bit about pinax, but it seems is not very active right now."
django,34o7xv,rideh,1 point,Sun May 3 23:41:16 2015 UTC,http://startbootstrap.com/template-overviews/sb-admin-2/
django,34l98d,RalphMacchio,6,Sat May 2 03:41:27 2015 UTC,"I've read and recommend Two Scoops. It's rather a mash of good, practical concepts and features that you'll need to use in life as a professional Django developer."
django,34l98d,shavenwarthog,3,Mon May 4 01:45:15 2015 UTC,This was answered by the author of DDP in another thread.
django,34l98d,rnevius,1 point,Mon May 4 07:22:54 2015 UTC,Thanks for the link.
django,34d55j,lewisehmann,5,Thu Apr 30 04:45:17 2015 UTC,So they went back to a PDF and book release? Didn't they make a huge deal about it a while ago when they went book only?
django,34d55j,dohko_xar,3,Thu Apr 30 18:50:34 2015 UTC,"Yeah, and I'm particularly glad that they changed their minds. As I live in Brazil I paid more than three times the price for the dead-tree version."
django,34d55j,jlorencetti,2,Thu Apr 30 19:01:56 2015 UTC,"Three times! Wow! I'm glad they changed their mind, just for your sake."
django,34d55j,new2django,2,Thu Apr 30 19:58:57 2015 UTC,Yeah they complained about piracy and said they weren't going to do a PDF version. So annoying to carry around the book
django,34d55j,dalore,-1,Thu Apr 30 20:06:27 2015 UTC,"Speaking of which, anyone got a PDF of this one? (Just kidding!)  Edit: Wow, some people really didn't get the sarcasm. I'll have you know that I've bought every single TSoD so far."
django,34d55j,danielsamuels,3,Thu Apr 30 21:50:42 2015 UTC,People like you make the software world a worse place.
django,34d55j,g-money-cheats,1 point,Thu Apr 30 22:12:18 2015 UTC,Anyone know how this compares to Arun's new Django Design Patterns and Best Practices?
django,34d55j,RalphMacchio,1 point,Fri May 1 03:03:16 2015 UTC,Is it any good?
django,34f3k0,philgyford,3,Thu Apr 30 16:53:47 2015 UTC,"It's a perfectly logical idea, but in my experience, Django (and many reusable Django apps) don't properly test out use cases with multi-table inheritance. I've often run into issues due to it."
django,34f3k0,pemboa,3,Thu Apr 30 18:21:03 2015 UTC,"We had same use-case, also a catalogue of generic content items with some specific sub-flavours. We were also wary of the query complexity.   But we definitely needed everything in one list, so what options are left besides multi-table inheritance? You could add decoration objects; with GenericRelation/ForeignKey or maybe add various m2m relations. Still you be able to add your extra data you need to add additional tables and incur some query complexity.  We couldn't come up with something better for our case so now we're using django-polymorphic. So far it's decent but I think it depends on your requirements and architecture.  It definitely adds some complexity, not ideal if you code straight from DB. But considering any decent app needs architecture with a caching strategy it becomes a different picture. In our case most of the hot data comes pre-assembled from a redis cache, and the ORM is usually only hit after content cache-miss/invalidation.  So we think we can afford to pay a little overhead on multi-table inheritance to have it conceptually correct. I definitely like how our application can mix content subtypes everywhere. There are a few issues of course, like some unsupported ORM features.  It's only a few months and we're still optimising so we'll have to see how it holds up."
django,34f3k0,brtt3000,2,Thu Apr 30 18:49:43 2015 UTC,"Thanks - it's great to hear from someone who's been through this and weighed up the pros and cons. As with so many things, it seems like there's 100% correct solution."
django,34f3k0,HowlingDonkey,3,Thu Apr 30 20:09:57 2015 UTC,"One good approach to use abstract models for something the Item - this is convenient since it's DRY but doesn't help to write queries across all your models at once.  To actually run the queries I'd suggest using a search index - like Elastic or Solr. A search index like this will be very friendly to the commonly named data attributes (title, created, modified, etc) and give you all kinds of advanced search functionality that you'd normally be lacking with a RDBMS."
django,34f3k0,new2django,1 point,Thu Apr 30 21:37:16 2015 UTC,Isnt the multi-table inheritance problem due to using concrete models? Can't you just use non-concrete?
django,34f3k0,andybak,1 point,Thu Apr 30 19:57:20 2015 UTC,Why not go with single table inheritance?  Essentially all your columns exist on the base class but subclasses only expose a subset of them.  Only disadvantage is that any field that isn't on all tables has to be nullable or have a default value.  Advantages? Faster queries...
django,34f3k0,sr33,0,Mon May 4 16:43:21 2015 UTC,"Hey op, it's generally good to use multi table inheritance only for things like meta data. I use it things like create, edit, delete dates. Anything else that is model specific has to go in that particular model. Hope this helps"
django,34e5a4,philippeowagner,1 point,Thu Apr 30 12:26:57 2015 UTC,Today we released a security update for django-hijack that fixes a security vulnerability in the admin (HTML escaping issue). We recommend to update your projects ASAP. You can get the latest version (1.0.7) from the Github release page or from PyPI.
django,34aemp,frankwiles,7,Wed Apr 29 16:03:42 2015 UTC,"Great post! I'm right in the middle of a month-long site build with Wagtail. It has definitely taken some time to get used to its conventions, but it has been a pleasure to use. Hooking up Django REST Framework was super simple for some ""single page app"" type features as well (although Wagtail 1.0 will ship with its own simple data API).  The only thing I don't like is how difficult it is to deal with things like image carousels with unlimited items. Building these is easy enough...but doing anything useful outside of using the image template tag is often a pain in the rear. This is partially due to the way modelcluster works its magic...but I had a heck of a time pulling carousel image URLs into DRF page views."
django,34aemp,rnevius,3,Wed Apr 29 20:45:39 2015 UTC,"Really going to have to look into the new StreamField type. I've been slowly building a personal website using wagtail - and had modified it so that you could embed snippets into RichText fields (with the snippets rendered by their own template). Worked reasonably for having structured content in pages, but StreamField looks like it could be a better solution."
django,34aemp,marus25,2,Thu Apr 30 03:08:38 2015 UTC,"I'm not exactly sure what your use case is, but the StreamField is still a bit buggy in some configurations. I still haven't incorporated it...but YMMV."
django,34aemp,rnevius,3,Thu Apr 30 10:17:25 2015 UTC,"As marus25 says, StreamField is in beta, so there are a couple of rough edges, but we're using it successfully in production Wagtail sites, e.g. on https://www.globalwitness.org"
django,34aemp,tomdyson,1 point,Thu Apr 30 13:18:03 2015 UTC,"Well, after my first bit of experimentation I have to say that I'm impressed with it; still a little bit rough around the edges but so far I haven't ran into any critical issues; mostly some minor glitches in the admin interface and a few styling things in the interface that I think aren't great (although those I can easily override). Not to say I won't run into bigger problems if I make more extensive use of it."
django,34aemp,marus25,1 point,Fri May 1 23:34:13 2015 UTC,Well it is a new feature in a beta release - so I don't expect it to be perfect - but a new feature to be explored for sure as it has a lot of potential.
django,34aemp,marus25,3,Thu Apr 30 11:10:37 2015 UTC,"Thanks for the post! I'll definitely try Wagtail one day. Could someone briefly enlighten us about the respective approaches, strengths and weaknesses of the most common Django CMSes (Django CMS, Mezzanine, Wagtail)? I'm quite happy with Django-CMS, but something more out-of-the-box would be definitely welcome."
django,34aemp,niconoe,1 point,Thu Apr 30 11:04:58 2015 UTC,How about you? Do you have any Django-CMS pain points? :-)
django,34aemp,rnevius,2,Thu Apr 30 14:04:09 2015 UTC,"Copying my comment from the /r/Python X-post as discussion seems more active here:  This was really useful.  Wagtail seems to be progressing well.  I evaluated CMS options for Django at the beginning of this year and, after narrowing it down to a choice between Django CMS and Wagtail, I ended up going with Django CMS.  The thing that made me choose Django CMS -- and I would love to hear more about Wagtail's approach for this -- is the ability to integrate regular Django apps into the CMS.  Django CMS has this concept of an app hook which allows you to attach a Django app to a CMS managed page.  The reason why I would want this is because it allows you to keep your database tables clean and well structured by using regular Django best practices in your models. Instead of adding fields to a Page object (which you can also do in Django CMS), you can integrate a separate Django app/model which allows you to loosely couple your database tables and utilise the benefits you get from the Django ORM and an MVC-like design pattern.  This video gives an example of this pattern and outlines some of the benefits.  For me, a good CMS built on top of Django should allow you to utilise all the things that Django does well already.  tl;dr How can I integrate regular Django apps and manage their content with Wagtail?"
django,34aemp,Kenpachi-,2,Thu Apr 30 14:58:24 2015 UTC,"I reckon it would be reasonably easy to set up a direct equivalent of the example in that video, using the hooks Wagtail provides http://docs.wagtail.io/en/v0.8.6/core_components/pages/editing_api.html#admin-hooks - a logged-in editor gets a pop-out toolbar when browsing the site, and this can be customised on a per-page basis via the 'construct_wagtail_edit_bird' hook. However, that's probably not a true like-for-like comparison, given the difference in philosophy between the two systems...  In Wagtail, a page is a Django model that knows how to serve itself in response to an HTTP request - the serve logic can be as simple or as complex as you like. (Admittedly this does depart from the MVC pattern a fair bit, but I'd argue that's the nature of page-content-based web sites as opposed to conventional Django web apps.) This means that the model itself essentially takes on the role of an app - and one tool Wagtail provides to bridge that gap is the 'RoutablePage' contrib module, which allows defining a Django URLconf within a page's URL space: http://docs.wagtail.io/en/v0.8.6/core_components/pages/advanced_topics/routable_page_mixin.html  (Note that the RoutablePage API is changing in Wagtail 1.0, due to Django 1.8 compatibility issues: http://docs.wagtail.io/en/latest/contrib/routablepage.html)"
django,34aemp,gasmanic,1 point,Thu Apr 30 17:59:53 2015 UTC,Is there a reason why we need this? http://i.imgur.com/dMhR0vL.png
django,34aemp,andrey_shipilov,1 point,Thu Apr 30 01:05:58 2015 UTC,Anybody else seeing that? I'm not...but you now...browsers.
django,34aemp,rnevius,2,Thu Apr 30 07:03:32 2015 UTC,Chrome latest build. Refresh several times.
django,34aemp,andrey_shipilov,1 point,Thu Apr 30 15:29:39 2015 UTC,Odd I'm not seeing it with Chrome Version 42.0.2311.135 (64-bit) on OSX.  Can you send me version and we'll look into it.  Thanks for reporting it!
django,34aemp,rnevius,1 point,Fri May 1 14:52:30 2015 UTC,"You have to hit refresh really fast, a bunch of times in a row. It's likely a non-issue."
django,34aemp,andrey_shipilov,1 point,Sun May 3 07:38:31 2015 UTC,Sure thing man http://i.imgur.com/CM8hiQm.png  Version 42.0.2311.90 m. Go to the page and refresh several times. Works 2/5 times.
django,34aemp,new2django,-1,Sun May 3 16:58:00 2015 UTC,"in their defense, that website's design looks pretty old."
django,34a8kb,bigirnbrufanny,4,Wed Apr 29 15:17:42 2015 UTC,"A few observations - we use webfaction for www.strike.ly, which is generally low traffic by any metric - couple of hundred users/day, spread across the full 24 hours with a couple of minor bumps around UK eveningtime and lunchtime.   Angular front end on a DRF back-end.  It's incredibly variable as to the performance,  and I find that I have to reset apache periodically, as it just times out for no discernible reason.  Periodically (maybe once a week, the apache process will just blow up to ~250Mb with no obvious traffic change (and no, there's nothing that loads the entire site into memory or anything like that)., and gets the process killed by WF auto-protect.  WF are good for starting out, but once you don't need the magic anymore, move.   Think it's entirely down to the server load at any given time.    I don't have any of these problems on Digital Ocean, btw, and once this build (react.js) is out of the way, we're moving over (well, more accurately, the staging for this build is on DO, and we'll just keep the production environment there."
django,34a8kb,iamwithnail,2,Wed Apr 29 16:43:47 2015 UTC,Have you tried using nginx instead of apache? Memory usage should be a lot better.
django,34a8kb,iamwithnail,1 point,Wed Apr 29 18:10:28 2015 UTC,"I hear that's the thing - I spent ages messing around with nginx and couldn't grok the setup for it - I suspect we'll move over later as, apache is as many people have said when i've mentioned this, a dinosaur.  But for now, it's a dinosaur that I know how it works. :)"
django,34a8kb,tmnvex,1 point,Thu Apr 30 07:58:11 2015 UTC,"If you setup a symbolic link to your django static directory as a new Webfaction 'static app', Webfaction will automatically serve that directory with nginx."
django,34a8kb,iamwithnail,1 point,Wed May 6 10:22:57 2015 UTC,"Ah - should have said, I was trying to set it up from bare metal on a non webfaction server.  I get the WF setup will do that for the static app, etc.  Good point, though."
django,34a8kb,iamwithnail,1 point,Sun May 10 13:34:14 2015 UTC,"Yes, I'll be moving. I do like the API they provide but meh, I'm comfortable on the command line. Cool site btw"
django,34a8kb,rom16384,1 point,Wed Apr 29 17:58:31 2015 UTC,"Thanks!  Yeah, that's where I got to.  When I started deploying stuff into the real world I had no clue what I was doing.  Now I can install the site from bare server from the command line, so don't need the extra magic anymore."
django,34a8kb,iamwithnail,1 point,Thu Apr 30 07:57:09 2015 UTC,"Apache going bonkers with RAM once in a while is not that surprising. Make sure you are defining a value for MaxRequestsPerChild in apache2.conf, which causes that apache process to restart after it has processed that number of requests. I use 5000, but that may be too much for your use case."
django,34a8kb,_eka_,1 point,Wed Apr 29 21:43:58 2015 UTC,"Ah, nice, thanks for that!"
django,34a8kb,nieuweyork,3,Thu Apr 30 07:58:23 2015 UTC,I wonder why would I choose WF when I can get 1 VM for $5 a month in DigitalOcean ?
django,34a8kb,journalctl,1 point,Wed Apr 29 18:28:37 2015 UTC,"I don't know, and I think I should switch."
django,34a8kb,misterte,1 point,Wed Apr 29 21:40:17 2015 UTC,There's really no reason to unless you're not comfortable setting up and maintaining your own Linux system.
django,34a8kb,misterte,2,Thu Apr 30 14:25:20 2015 UTC,I currently use WF but have no issues like yours. What's the nature of your site? Architecture? Machine number?
django,34a8kb,HittingSmoke,1 point,Wed Apr 29 16:39:44 2015 UTC,"web94. I'll be quitting that service soon though and shift everything to the other host, load times are consistently fuck off fast with their server (to use the technical term)."
django,34a8kb,ice2o,1 point,Wed Apr 29 18:01:16 2015 UTC,"I have a smaller instance in a machine under #300. I recall some of those machines are quite old. Performance is slower on that server, but the other server is fast enough—my projects get between 700-1500 reqs/day.  I asked for a new server via the upgrade form."
django,34a8kb,nederhoed,0,Wed Apr 29 22:56:47 2015 UTC,You're on a much older server. Is it running CentOS 5 or 6?
django,34a8kb,misterte,2,Wed May 6 16:56:40 2015 UTC,I haven't really had any problems with WF. The customer service could be better but I can say that about any host I have used.
django,34a8kb,nieuweyork,1 point,Wed Apr 29 16:48:00 2015 UTC,"I'm actually quite satisfied about their customer support. They respond fast and so far I had insightful answers.  Regarding speed, I'm not an expert, but the combination of Apache and wsgi works reliably, but not very fast. API calls to my Django site take around 200 msec, normal template render calls around 600 msec.  For my next setup I will consider nginx."
django,34a8kb,dsizemore,1 point,Wed Apr 29 20:04:48 2015 UTC,"I know it's kind of off-topic, but I created an app listening to port, installed and configured nginx with an alternative wsgi.py file, pointed my domain to my new app and was working with the new site in 20 minutes. No down time."
django,34a8kb,ccb621,2,Wed Apr 29 23:01:03 2015 UTC,"I use WF for a variety of reasons, but super helpful support is not one of them. They regularly reboot the server which hosts my site, without any prior notice; when I asked why not, they told me the outages weren't log enough to merit prior warning."
django,34a8kb,dsizemore,2,Wed Apr 29 16:58:41 2015 UTC,I've got http://www.golfledger.com on WF and haven't experienced anything like you're experiencing.   I've considered digital ocean as I've heard good things. I'm sort of just afraid that I'll get in over my head with all the configurations with Digital Ocean. I'd like to just build sites and not have to worry about being a sys admin too
django,34a8kb,andrey_shipilov,2,Thu Apr 30 00:35:33 2015 UTC,Vagrant + Ansible/Chef/Salt makes configuration really simple.
django,34a8kb,this_is_trash_really,1 point,Thu Apr 30 01:02:14 2015 UTC,Thanks. I'll google those tomorrow and read up. I'm not familiar with them.
django,34ana9,TheBigBlabberMouth,18,Wed Apr 29 17:07:16 2015 UTC,Sometimes I cry.
django,34ana9,jlorencetti,6,Wed Apr 29 19:11:13 2015 UTC,Me too.
django,34ana9,pydanny,2,Wed Apr 29 19:44:42 2015 UTC,Maybe I'm on the right path so. :)
django,34ana9,jlorencetti,2,Thu Apr 30 19:09:38 2015 UTC,Sometimes I cry after I delete the code that I thought was unnecessary.
django,34ana9,cramur,12,Wed May 13 15:14:10 2015 UTC,"Old me is a dumbass. Unfortunately, as time goes on, this never seems to change."
django,34ana9,Eurynom0s,8,Wed Apr 29 23:27:23 2015 UTC,Yeah that is a good situation really. It means that you have improved as a programmer. Or you may have dementia.
django,34ana9,Znt,2,Wed Apr 29 19:08:35 2015 UTC,haha ;-)
django,34ana9,TheLameloid,3,Wed Apr 29 19:10:57 2015 UTC,I just do this.
django,34ana9,metaphorm,2,Wed Apr 29 23:51:26 2015 UTC,almost every day. its a constant learning process. present me is a much better developer than past me.
django,34ana9,_eka_,2,Wed Apr 29 19:59:34 2015 UTC,"Most of the time I can recognise it as I my child, but sometimes, sometimes I'm awestruck that I can't.  Edit: I realise is mine looking at git blame."
django,34ana9,ttha_ttha,2,Wed Apr 29 22:57:58 2015 UTC,"Some of the worst code I've written is after my oldest daughter was born.  I was reviewing some code Sikhs making updates about 3 months after she was born and came across this bit that seemed like a overly complex implementation.  Was really looking forward to making fun of the co-worker who did it, until I realized the last check in on the file was done by me a few weeks after she was born.  Either that, or I got really really good at coding due to lack of sleep."
django,34ana9,Ibuildwebstuff,2,Thu Apr 30 05:10:31 2015 UTC,"Sometimes after a frown i will comment out a whole chuck of code and put it aside. Just in case there was a logical reason for it. (which i had obviously forgotten.)   Why? If there is no use for it delete it. If you're not sure if it has a use, delete it and run your tests. If you delete it and discover later that you needed it then restore it using git checkout."
django,34ana9,shazammerbammer,1 point,Thu Apr 30 12:05:33 2015 UTC,thank you
django,34ana9,fratkabula,2,Thu Apr 30 12:35:14 2015 UTC,If i find myself commenting out a lot of code. I just delete it instead.  Then I run my tests to make sure nothing broke.   The only comments I allow are either temporary for pseudo-code and can obviously be deleted or comments that are pointing out something counter intuitive like this:  do_task.delay() # actually does the task now.
django,34ana9,iamwithnail,1 point,Thu Apr 30 20:19:03 2015 UTC,All the time! I throw away so much code its depressing.
django,34d1o5,djangonewline,1 point,Thu Apr 30 04:11:04 2015 UTC,is it a textfield or charfield? also when you output html newlines means nothing you need to use <br/> so with django you have to use linebreaks or linebreaksbr
django,34d1o5,Brandhor,1 point,Thu Apr 30 08:03:27 2015 UTC,"I was using CharField for all of them but I tried TextField for the ones that need newlines and it worked, thanks!"
django,349d36,YouAreSalty,6,Wed Apr 29 09:54:46 2015 UTC,This may be helpful: https://weworkremotely.com. You'll often find remote Django jobs pop up on there.  I'm interested in how the job market is going with Django especially in the context of Rails & Node.
django,349d36,monkeyboymelb,4,Wed Apr 29 12:07:17 2015 UTC,"https://djangogigs.com/ is another good place. When looking for work, I use a bunch of recipes at ifttt.com to read RSS feeds for ""Django"" and send me emails. You get a few false positives from the ""ALSO GOOD TO HAVE"" section of some dopey listings, but it works well."
django,349d36,yerfatma,1 point,Wed Apr 29 13:57:01 2015 UTC,ifttt sounds interesting. mind sharing those recipes?
django,349d36,Mekhami,1 point,Tue May 5 16:17:55 2015 UTC,https://ifttt.com/recipes/290219-django-jobbers-gigs https://ifttt.com/recipes/290220-most-hired-django   Didn't have a lot of luck publishing them due to weird RSS feeds. I also get them from    http://remojobo.com/feed/ Local craisglist RSS Freelancermap
django,349d36,yerfatma,3,Wed May 13 14:32:03 2015 UTC,http://careers.stackoverflow.com/jobs?searchTerm=django&type=permanent&location=San+Francisco&range=100&distanceUnits=Miles  seems like a good starting point.
django,349d36,metaphorm,3,Wed Apr 29 12:38:21 2015 UTC,"In my region, it's in very high demand. Perhaps by looking for Django-specific, and not Python in general, you're missing out on many that are actually Django."
django,349d36,ezrock,2,Wed Apr 29 18:13:23 2015 UTC,What region is that?
django,349d36,ph49,1 point,Wed Apr 29 23:56:20 2015 UTC,Not grandparent but NYC and NJ usually have a good number of Django jobs.
django,349d36,virtyx,2,Thu Apr 30 22:24:17 2015 UTC,"I recently graduated. I was looking for a django job in sf, but was having a hard time with entry level or junior positions. Ended up taking a good offer as a PHP engineer.  Still hopeful to get back into django and python."
django,349d36,duffles0,2,Wed Apr 29 13:27:57 2015 UTC,"Certainly, there's a bunch of Python jobs in New York. Have you spoken to agents?"
django,349d36,nieuweyork,3,Wed Apr 29 17:13:01 2015 UTC,"SPEAK. TO. AGENTS. NEVER. SHOULD. ANYONE.  Slime of the earth, they are."
django,349d36,WorkerBeeNumber3,2,Thu Apr 30 02:52:25 2015 UTC,I'm sorry you feel that way. I've used a recruiter several times and have yet to regret it.
django,349d36,raiderrobert,1 point,Fri May 1 02:11:16 2015 UTC,"I've actually found that with a bit of discernment, one can find good agents with good jobs on their books."
django,349d36,nieuweyork,1 point,Thu Apr 30 07:11:41 2015 UTC,"True, it's also generally not worth trying to sort the wheat from the chaff in my experience, both as a recruiter and as a candidate."
django,349d36,iamwithnail,1 point,Thu Apr 30 07:38:27 2015 UTC,"Hmm, as a candidate, I do think it's worthwhile. Working with agents, even though I don't frequently take the jobs through them, exposes me to high quality job opportunities very quickly, which tends to give me options when it comes to making the decision."
django,349d36,nieuweyork,2,Thu Apr 30 11:26:48 2015 UTC,"Django jobs are everywhere.  Many of them tend to get filled via networking from my experience.  If you're interested in contract work, send me a PM."
django,349d36,ckinsey,2,Wed Apr 29 22:54:54 2015 UTC,Pacific Northwest.  No issues with finding work (startups).
django,349d36,druidjaidan,1 point,Thu Apr 30 04:24:25 2015 UTC,Same. I've been doing full time Django development for the last 6 years.
django,349d36,never_safe_for_life,2,Thu Apr 30 06:45:19 2015 UTC,"Are you invested in Django at this point in your career? If you're just starting out then I wouldn't worry too much about whether you're coding in Rails, Django, Node.js, or I hate to even say it, PHP (I'd stay away from Java and Microsoft stacks).   Any of these technologies will get you programming web/cloud scale applications and teach you the fundamentals.  Also, say you went Rails for 5 years like a good friend of mine. When he came to work on Django with me it was easy enough for him to learn. Furthermore he was able to cross-pollinate some of the best practices.   For the record, I started developing full-time in Django 6-7 years ago. I love it and don't particularly care to switch to a different stack."
django,349d36,never_safe_for_life,1 point,Thu Apr 30 06:51:51 2015 UTC,"I live in the UK and there were loads of Django jobs when I was looking. Though, my commute is around 90 minutes to work."
django,349d36,eighthpence,1 point,Wed Apr 29 12:48:56 2015 UTC,"Whereabouts in the UK, out of interest?"
django,349d36,allan_w,2,Wed Apr 29 14:25:22 2015 UTC,"I live in North Wales and work in Cheshire. Suitable jobs I saw for Django were in Bangor, Chester, Liverpool, Manchester, and Crewe, that I would be happy to commute to."
django,349d36,eighthpence,1 point,Wed Apr 29 15:05:29 2015 UTC,There are always a few Django jobs up on the Python job board https://www.python.org/jobs/
django,349d36,frankwiles,1 point,Wed Apr 29 16:04:50 2015 UTC,Perhaps checkout Meetups: http://www.meetup.com/ladjango/
django,349d36,stevewedig,1 point,Wed Apr 29 22:00:51 2015 UTC,"If you are open to Los Angeles,  PM me and I can send you the details of my company, we're always looking for good Django people. Otherwise I've had some luck with https://www.whitetruffle.com/ or just tweaking your Linkedin profile slightly and letting the recruiters come to you."
django,349d36,mxchickmagnet86,1 point,Wed Apr 29 23:05:26 2015 UTC,Tons of these available in SF to those with a solid grasp on Django and web development in general.
django,349d36,Communist_Sofa,1 point,Thu Apr 30 05:15:44 2015 UTC,You can always apply to http://www.toptal.com/ or something similar. If you are ever in montreal (long shot) we are hiring. https://nixa.ca/en/
django,349d36,notomoro,1 point,Sat May 2 07:33:46 2015 UTC,There are hundreds on Indeed.com: http://lmitfy.com/?q=django&l=
django,34b79w,MrAckerman,4,Wed Apr 29 19:30:32 2015 UTC,Anchors?  <a href='#jumphere'>Jump to that position</a> ... <div id='jumphere'>Here is the content</div>   Or HTML4:  <a href='#jumphere'>Jump to the content</a> ... <a name='jumphere'>Content</a>
django,34b79w,juliob,2,Wed Apr 29 19:44:23 2015 UTC,I think we're getting close. Can you just append the anchor to the URL if it was coming from a different page?
django,34b79w,niconoe,2,Wed Apr 29 19:46:45 2015 UTC,"Sure:  <a href=""http://www.example.com/other-page#jumphere"">Other page</a>"
django,346vng,pydanny,19,Tue Apr 28 19:48:33 2015 UTC,"Surprised to see that there will be a PDF version after the very strong position against one in the previous release. Although I think this is awesome, I'm curious what brought about the change."
django,346vng,rnevius,1 point,Wed Apr 29 06:01:05 2015 UTC,"I thought the opposition was more about ebooks because they take a long time to get them just right. But pdf are the same files sent to printers for the physical copy.  At least, that's what I thought the problem was."
django,346vng,enesimo,1 point,Sat May 9 07:21:37 2015 UTC,"While that was part of it, PDFs were also requested and thoroughly denied."
django,346vng,rnevius,10,Sat May 9 08:59:03 2015 UTC,"Thanks for doing this! Last I heard, you were calling it quits on the books. Glad to see that change, because they are some of the best tech books I've read. Will definitely buy the paperback when it's out."
django,346vng,BitRateChaos,3,Tue Apr 28 22:30:02 2015 UTC,We'll try to have the paperback out by the end of May.
django,346vng,little_oaf,1 point,Wed Apr 29 01:18:53 2015 UTC,Will there be a hardcover version?
django,346vng,little_oaf,1 point,Thu Apr 30 15:17:28 2015 UTC,"We're not sure yet. It is a bit of work for us, but we're seeing a good amount of demand, but it is unclear how much exists.  Would it make sense for us to create a google form where people could add their email if they were interested?"
django,346vng,ramsesthedog,1 point,Thu Apr 30 16:48:57 2015 UTC,"I'd say that would help. If the pdf early release discount would apply in the same or a reasonably adjusted amount I would be very interested in getting it. I tend to travel and trash my books a bit, and this is one book I would want to keep in good condition for as long as possible.   Edit: I meant early, not pre release."
django,346vng,ramsesthedog,1 point,Thu Apr 30 19:08:16 2015 UTC,"How much will the paperback cost? I'd prefer to buy the physical book, but I have to factor in price in determining whether to buy the PDF or the paperback."
django,346vng,granduh,1 point,Wed May 6 04:40:28 2015 UTC,"Apologies, but as the size isn't finalized, we can't yet give a hard number. I can say it will be at least US$44.95.  If you do decide to get the early release PDF, when the print book comes out we'll extend to you the same discount we provide to purchasers of the ebook/print bundle."
django,346vng,granduh,1 point,Wed May 6 06:04:44 2015 UTC,The bundle sounds great! Do you have any approximate idea yet as to what kind of discount the bundle will have versus buying them separately? I looked through the 1.8 FAQ on your website but couldn't find any specifics.
django,346vng,little_oaf,6,Wed May 6 18:56:50 2015 UTC,Thanks for posting this! I didn't know it was out! Purchased! Should I expect any changes to the pdf between now and the print version? If so how will you be notifying users?
django,346vng,xBBTx,8,Tue Apr 28 20:42:13 2015 UTC,"Yes, there will be changes. A bit more polish and content. When there are PDF updates, we'll send out an email notice telling people about the new download. :-)"
django,346vng,little_oaf,4,Tue Apr 28 20:51:12 2015 UTC,"Very cool, thanks for all your hard work!"
django,346vng,toracle,3,Tue Apr 28 21:57:54 2015 UTC,I just saw this when I went to check the status out of curiosity. Does anyone know when the print versions will be available for order?
django,346vng,maheart,5,Tue Apr 28 20:14:24 2015 UTC,"Yes! We hope to have the print version out in mid-to-late May. Also, you might want to check out the details of the forthcoming ebook/paperback bundle: http://twoscoopspress.com/pages/two-scoops-of-django-1-8-faq#will-there-be-a-bundle"
django,346vng,Ibuildwebstuff,5,Tue Apr 28 20:21:46 2015 UTC,will any print versions/bundles be available at DjangoCon EU?
django,346vng,marklyon,2,Tue Apr 28 21:44:36 2015 UTC,"That's a big maybe. The problem is that the print edition isn't slated to come out until mid-to-late May, and DjangoCon EU starts May 30th. There is a very good chance it won't be out in time to get it to Wales before the event is over. :/  That said, I'll discuss it with Daniele and see what we can do."
django,346vng,Redbaron67,3,Tue Apr 28 22:03:26 2015 UTC,"http://twoscoopspress.com/pages/two-scoops-of-django-1-8-faq#will-there-be-a-bundle   Awww sweet! That's great, especially since I am partial to the caveman version when I'm out in nature and the electron only version for urban times! :D"
django,346vng,Thingdeux,3,Tue Apr 28 20:27:05 2015 UTC,Will 'eBook' format includes EPUB/mobi also or PDF only?
django,346vng,jayfehr,2,Wed Apr 29 01:15:40 2015 UTC,PDF only. We aren't doing epub/mobi.
django,346vng,sriramracer,3,Wed Apr 29 01:18:03 2015 UTC,"I'm very happy to see another edition being released, especially given that the future of Two Scoops was uncertain after the release of the last edition.  I purchased the last edition. I'll be purchasing the updated edition shortly in both PDF and physical copy.  From the FAQ: ""Why the new version? We changed our minds for many reasons. The main reason was to support Django 1.8, a long-term support release, by popular request from readers."". Thank you very much for thinking about, and supporting the Django community  Thanks guys!  P.S. This edition's cover artwork is amazing."
django,346vng,rnevius,3,Wed Apr 29 05:43:28 2015 UTC,"Hey /u/pydanny, the image on the FAQ has (US & India) under the print paperback release date. Does this mean the paperback won't be available in the UK or that it will be available at a different date?"
django,346vng,new2django,2,Wed Apr 29 12:56:52 2015 UTC,"Ahem... well... how do I say this without coming across like a cad?  Oh well, here goes: By 'US & India' we mean many of the places Amazon ships. That includes US, India, UK, France, Mexico, Australia, Germany, Spain, and a bunch of others places.  If you order the print paperback direct from us, we'll ship anywhere."
django,346vng,shazammerbammer,2,Wed Apr 29 17:14:59 2015 UTC,A quick heads up - there's something wonky when picking PayPal and using Washington DC as the City.  It never actually sends me to PayPal.  Screenshot  Direct credit card payment worked fine.
django,346vng,new2django,1 point,Wed Apr 29 00:44:31 2015 UTC,"I notice your address is listed as Washington, DC, DC. PayPal might have a bug in their system."
django,346vng,webology,2,Wed Apr 29 01:18:32 2015 UTC,"Awesome, I look forward to reading it."
django,346vng,new2django,2,Wed Apr 29 12:40:19 2015 UTC,"Purchased mine last night, glad to see that some conventions I came to on my own are de facto best standards (well, to be fair ... one) .. have to go vastly shake up my current projects code base now!"
django,346vng,new2django,2,Wed Apr 29 13:22:50 2015 UTC,"Thank you so much! Both for writing a new edition (I was sad when you called it quits) and releasing a pdf (I scanned my 1.6 for a digital version, but made sure not to share with anyone).  Instant sale here. I'll also order the paper version when it's released too.  Thanks again!"
django,346vng,dzak23,2,Wed Apr 29 15:23:06 2015 UTC,PDF? PDF! ebook? Buying right now!
django,346vng,dzak23,6,Tue May 5 19:34:35 2015 UTC,Isn't this like 25% of the price of most university textbooks? Sounds like a steal to me...
django,346vng,_grump,2,Tue Apr 28 22:38:09 2015 UTC,It is a steal!  I was really broke when I bought 2scoops 1.6. Saved up and it was worth every sacrifice. A much better investment then  Djangocon. Ugh. What a waste of money. Ive thought about writing about what happened. :(  The good news is thanks to 2scoops 1.6 and a friendly redditor I got a good job. The book helped me in the interview so much!
django,346vng,rnevius,1 point,Wed Apr 29 06:55:03 2015 UTC,What happened?
django,346vng,zmoses93,2,Wed Apr 29 17:32:47 2015 UTC,"About Djangocon? I spent a lot of money I couldn't afford to spend, went into debt (lost work time, conference ticket, bus ticket). Cashed in favors to have my kids watched. Watched some talks that could have been seen on youtube. Missed dinners because I was living off PB&J. Missed parties because I don't drink and wasn't staying at hotel (courchsurfed). Watched the conference organizer (Holden) yell at another attendee. No job offers. I felt like an outsider and didnt know how to break in. Came back frustrated and intimidated."
django,346vng,ckcollab,2,Thu Apr 30 17:46:32 2015 UTC,"As one of the new organizers of DjangoCon US, I want to apologize and personally say I'm sorry. We have taken several large strides to address the problems you mentioned here including creating a non-profit to oversee future conferences and Django events: https://2015.djangocon.us/blog/2015/04/07/new-year-new-djangocon-us/  A few of these we have not announced yet but we are actively working on is our financial aid program, child care, and inclusive environments for minors and non-drinkers. We made sure our opening party this year is going to be held at a venue where attendees under 21 and non-drinkers would feel comfortable too instead of here's some bottled water. We are committed to publishing our talks publicly on Youtube for free so that anyone may watch them.   We are also sensitive to attendee ticket prices because we want the conference to be affordable. One of my main motivators in getting involved to help is because I was personally frustrated with the state of ticket and hotel prices. I don't want to organize conference which isn't still affordable students and individuals who are paying for their own way. This year we made great strides but we have work to do here including looking at venues which are more affordable for DjangoCon 2016.  However, I understand that talk is cheap and we have a lot of work to do. Please feel free to reach out to me (jeff at defna dot org) if you want to follow up."
django,346vng,jayfehr,2,Thu Apr 30 19:21:54 2015 UTC,"Jeff, thank you for your response. Seems like the winds of djangocon are blowing in a better direction.  I would love to go this year but I have to pay off debts from last year, not just djangocon either. My new job is great, but they wont pay for it, including hours taken off from work. My hope is that by 2016 I will be in a better place and can attend. Until then, it's Two Scoops and videos for me."
django,346vng,jayfehr,1 point,Thu Apr 30 21:51:58 2015 UTC,Bought my copy a few hours ago. Loving it so far!
django,346vng,jayfehr,1 point,Fri May 1 17:21:19 2015 UTC,"Just bought the book, but not receiving the email. Am I impatient?"
django,346vng,g-money-cheats,2,Wed Apr 29 00:42:48 2015 UTC,"Possibly. How long has it been since you placed the order?  The name dzak23 is not in our system, not as part of an email or name so we can't look up your order and see if there was a problem. If you share that with me, I can get a better insight into what's going on."
django,348pom,mignonmazion,2,Wed Apr 29 04:34:18 2015 UTC,They don't ship to Peru :*(
django,348pom,_eka_,1 point,Wed Apr 29 14:36:01 2015 UTC,Brazil is out of the list too. :P
django,348pom,jlorencetti,1 point,Wed Apr 29 20:06:47 2015 UTC,I think they choose a bad provider :(
django,348pom,_eka_,2,Wed Apr 29 21:37:53 2015 UTC,"A lot of companies don't deliver here, and the ones who does charge a huge fee.  I think we live in the wrong side of the Equator line. :P"
django,348pom,jlorencetti,2,Wed Apr 29 22:19:07 2015 UTC,"Is it possible to find a South American t-shirt maker, have them make the shirts, and send the profits to the DSF?"
django,348pom,pydanny,1 point,Thu Apr 30 02:52:23 2015 UTC,"I don't know anyone, unfortunately. :("
django,348pom,jlorencetti,2,Tue May 5 11:42:19 2015 UTC,No XXXL. Yes I'm a big guy. Yes I should lose weight. But that's not going to happen between now and the time the sweater arrives. The last campaign had XXXL and that sweater fits me perfectly.
django,34778m,Vector919,1 point,Tue Apr 28 21:10:19 2015 UTC,I've not run into it myself but I would suggest putting that logic into a clean_field() or clean() method and then extending those instead of overriding via the fields themselves.  This is probably the cleanest way to handle it.
django,34778m,HowlingDonkey,1 point,Wed Apr 29 01:14:28 2015 UTC,"I'd thought of that (overriding the validate() method i think it is actually), but what of the validators problem? don't django Validators get run regardless?"
django,34778m,HowlingDonkey,1 point,Wed Apr 29 06:05:58 2015 UTC,"No, I mean using the clean() methods.  The validate methods belong to the field. The clean methods belong in the form. Because you're extending the functionality of the form it would make sense to use clean().  If you wanted to extend a field class that's fine too in which case you would then use that newly extended field class and override the field you want to replace in the form when you want to use it.  Unless I'm totally misunderstanding - you either want to write custom clean() and clean_field() methods OR override individual fields entirely (don't change them on init)."
django,34778m,radiacnet,1 point,Wed Apr 29 08:58:09 2015 UTC,"I think maybe I don't get how your solution applied to the problem. The issue for me is, that django won't allow me to have dynamic field validation criteria. like the example that's on the site where you need to change come field's maxlength on __init_. form clean basically just runs all of the individual field clean() methods and then lets us know if there was any validation issues.   It's confusing because the problem is in a field while you're working with a new form. The only thing you can do with the form AFAIK is override the field completely (when you get big forms this gets bad), if you override form clean() you still have to run all the field clean() methods, we're overriding a form->field.attribute in this case"
django,341c9y,done_holding_back,16,Mon Apr 27 15:09:41 2015 UTC,"Have a look at Celery - you can have it run tasks on a schedule, or start an async task as a result of a user action that will continue running after the response has been returned."
django,341c9y,Hovercross,2,Mon Apr 27 15:31:50 2015 UTC,"You can also look at a cron job, depending on how you're deploying the app. Most platforms have some tool to do this that involves fewer moving parts than Celery. Write the task as a function you can call from a management command and set up cron to run ever 10-15 minutes, however frequently it needs to. You can write the task to exit quickly if there's nothing new for it to do."
django,341c9y,itsucharo,1 point,Mon Apr 27 21:29:56 2015 UTC,"If you write it as a management command, instead of a cron job you could call it as needed from your view, using the linux command at now. That will run it as a separate process. Obviously it's not as flexible as celery, and you'll have to do more to make it work reliably, but it's a practical option if it's not going to be used heavily and you have a good reason not to use celery.  You have to pipe commands into at, so you'd have to put something like this in your view:  from subprocess import Popen, PIPE p = Popen(['/usr/bin/at', 'now'], stdout=PIPE, stdin=PIPE, stderr=PIPE) stdout_data = p.communicate(input=MANAGEMENT_COMMAND_PATH)[0]"
django,341c9y,radiacnet,1 point,Tue Apr 28 06:59:28 2015 UTC,"I would probably avoid this unless crons and celery were both unavailable. It requires at available (and if crons aren't, there's a good chance at isn't) and any time you're dropping from a web request into a subprocess call you're adding some nasty security surface area—not to mention the fragility of how tightly coupled this would be to the environment/settings (settings module) and deployment (virtualenvs)."
django,341c9y,itsucharo,1 point,Tue Apr 28 12:09:11 2015 UTC,"I'm not sure I agree with you entirely - provided you only pass at the hard-coded management command path, as in my example, it seems no more risky, fragile or tightly-coupled than a cron job - the only real difference is it's run immediately, which is why I mentioned it.  However, I entirely agree that it's not a brilliant idea - I wouldn't want to use it for anything important, and I'd probably want to run the management command using cron periodically anyway to check nothing was stuck.  With either approach though you'd need a safe reliable way to get data in and out, with a locking mechanism which checks for stale locks, and logging and alerting to catch errors - none of which you have to worry about implementing with celery. I'd class both cron and at as last-resort tools, only to be used if you have a very good reason as to why you can't use celery."
django,341c9y,radiacnet,1 point,Tue Apr 28 14:19:15 2015 UTC,"/u/Hovercross has the right answer.  Effectively, you need a background worker of some kind.    The process, at its core, is to do something like this:    Receive request from user Insert job into queue Return response to user as soon as job is created, indicating successful job creation Process job out of band (e.g., not in the request / response cycle), and send the user some sort of notification when job processing is complete.   Celery is good here, as is rq (which is easier to use than Celery, and will likely meet your need, but not as robust overall).  They'll each need something to store jobs, tasks, etc., whether it's another database, redis or RabbitMQ."
django,33tcvu,dmv1975,3,Sat Apr 25 12:55:20 2015 UTC,"You need to save() the instances by using c.save(), after line 68."
django,33tcvu,rnevius,2,Sat Apr 25 13:17:20 2015 UTC,"That worked. Thank you, I was kind of stumped."
django,33tcvu,rnevius,1 point,Sat Apr 25 13:49:29 2015 UTC,You're welcome! Something to keep in mind is that Django won't save much of anything to the database unless you explicitly tell it to.
django,33tcvu,_eka_,0,Sat Apr 25 14:00:10 2015 UTC,Why not using a Django Management Command?   https://docs.djangoproject.com/en/1.8/howto/custom-management-commands/
django,33tcvu,hueoncalifa,3,Sat Apr 25 15:23:44 2015 UTC,Tango has this populate part in their book so students can learn about the ORM and understand object creation in a pythonique way. It helped me figure some stuff out a few months ago.
django,33po56,Bobvork,13,Fri Apr 24 14:09:09 2015 UTC,"Django is a database-centric back-end framework, but you seem to imply your app will be mostly front-end centric, consuming data from an external database via a REST API.   So I would suggest you skip Django for this project, and have an Angular (or other REST-consuming front-end framework) app talk to the REST API directly."
django,33po56,mbi0,3,Fri Apr 24 14:24:55 2015 UTC,"Agreed.  Having a backend request another backend to communicate with a frontend seems redundant since you'll be doubling down on any request time/network latency.  Django would be useful if, for example, you wanted to rewrite the REST API you mentioned to make it easier to develop on and extend.  However, I've worked with people who have translated medium-sized APIs from PHP to Django and they said it was a freaking nightmare."
django,33po56,TheKuchenBurglar,2,Fri Apr 24 15:11:16 2015 UTC,"Double-agreed.  My favorite day-job project is one in which we migrated from a Django + Angular project to a Django project and an Angular project, in which the Django project and the Angular project have separate maintainers (I do the Angular).    Aside from the webserver, which has an Nginx caching proxy for the API calls, there's nothing backend that can break.  If you have a proven, robust backend with an API, just use those, and be thankful that you don't have to worry about filesystems filling up, applications running out of memory, or any of the myriad backend server problems that can arise.  Of course, you get to trade them for browser compliance, resolution independence and all that jazz, but at least you don't have to deal with both sets of problems."
django,33po56,issue9mm,2,Fri Apr 24 16:11:45 2015 UTC,"Triple agreed. Unless you need some special things that the REST api is not giving you, or you want to store the other data in your database for whatever reason go straight to Angular (or your js framework of choice).  Maybe you can have django intercept some but not all the calls? cache them?"
django,33po56,dvidsilva,1 point,Fri Apr 24 18:48:04 2015 UTC,"Thanks for the reply (and the ones below) The thing is, I used the same reasoning for version 1, assuming I wouldn't need much of a back-end.  I ended up with more back-end than I thought, and there's a lot of javascript code I'm not particularly happy with. The 'thin' layer of PHP is not so thin anymore, and every special case that is added makes it worse. The interaction between front end and backend is another thing I'm unhappy with. Too much of the heavy lifting is currently done in javascript.   A lot of functionality is dynamic (it's a build once, deploy many times kind of thing.) So it's more than just CRUD calls to the API. There are file uploads and downloads (in a number of ways), functions and features of the CMS depend on permissions, and can be different between deploys. Putting together the site depending on a bunch of configuration and user properties is one of the things I struggle with currently.  What thought I would gain from a framework like Django, is a more structured approach to building the whole site, easy extendability of features and less dependency on javascript for everything.  Any other thoughts on this?"
django,33po56,TheKuchenBurglar,1 point,Sat Apr 25 10:27:20 2015 UTC,"I recommend looking into django-rest-framework if you're not already familiar.  It has built-in permissions classes, serializers, validators, and viewsets; pretty much any tool/feature you can think of is there, and if it's not there it's easy to take existing ones and mix them in to extend their functionality.  For instance, it's easy to extend the default permissions classes to do whatever magic you'd like for complex user hierarchies.  As for file IO, it's pretty easy to make a CRUD interface for uploading and downloading and will save you headache down the line.  I recommend using an asynchronous task library like celery for uploading since you don't want upload times to slow down your throughput.  I personally like to just hook into an Amazon AWS instance to store uploads; that makes CRUD really easy, since you can just store the URL to the upload in your database and run standard CRUD on those DB rows from there.  Generally speaking, you should almost always keep the front and back ends loosely coupled so it's easy to test each one in isolation.  It also gives you the benefit of having more options down the road if, for instance, you want to completely swap out your client setup in favor of Angular (which I also highly recommend over vanilla jQuery or javascript)."
django,33po56,HookahComputer,2,Sat Apr 25 23:07:37 2015 UTC,"I went through the same thing, and settled on using Slumber.  This is just a lightweight wrapper around the requests library; you could use it directly instead.  In my case, I had to make a few changes to Slumber to get it to work in Python 3."
django,33po56,andybak,1 point,Fri Apr 24 17:07:53 2015 UTC,"The CMS manages users, posts, etc through an existing REST API   Sounds like most of the backend already exists and your task is the largely the front-end code!  What's left for your back-end to do?"
django,33pz2i,mrinos,1 point,Fri Apr 24 15:33:35 2015 UTC,"I don't think the admin uses post_save - iirc it opens the normal add form for the related model in a popup, with a GET param like _popup=1 so it knows to render the template differently. The javascript opens the popup, and waits for the popup to return the PK of the new object, which it then adds to the drop-down.  As you're using a OneToOneField, I presume most times someone is using the interface to add a patient, they'll also be adding the corresponding user. In that case, it would probably make more sense to look at using two django forms in one html form - one for User, and one for Patient excluding the user 1:1 field. In your view you'd then do something like:  if request.POST:     user_form = UserForm(request.POST, prefix='user')     patient_form = PatientForm(request.POST, prefix='patient')     if user_form.is_valid() and patient_form.is_valid():         user = user_form.save()         patient = patient_form.save(commit=False)         patient.user = user         patient.save()         patient_form.save_m2m()     # and so on   You'll just have to make sure that the Patient.user 1:1 field cannot be blank, and use the admin to set up patient entries for any existing users."
django,33pz2i,radiacnet,1 point,Fri Apr 24 22:49:32 2015 UTC,Found this: Django Signals - an Extremely Simplified Explanation for Beginners - see if it helps?
django,33ksvg,mattwritescode,4,Thu Apr 23 09:32:00 2015 UTC,Should be awesome. See you there!
django,33ksvg,adrianh,7,Thu Apr 23 20:02:01 2015 UTC,"It would be great to try and make this more of a global celebration, I would love to see an event in the UK, I'm sure others would be interested in organising meet-ups in their respective countries."
django,33ksvg,danielsamuels,2,Thu Apr 23 10:34:02 2015 UTC,"That's a good idea.  I'll see if we can come up with some way to include the rest of the world other than just ""join us on IRC during the sprints""."
django,33ksvg,frankwiles,1 point,Thu Apr 23 15:12:20 2015 UTC,"Very keen for the UK! I'm going to try to poke some of the Python UK folk, and UK types in #django (are you in there?)"
django,33ksvg,DoISmellBurning,1 point,Fri Apr 24 16:03:58 2015 UTC,"I'm not an IRC frequenter unfortunately, but please do see if more are interested!"
django,33ksvg,danielsamuels,6,Fri Apr 24 16:22:20 2015 UTC,Can't wait for this! Ever since I started working at the Journal World we talked about doing some kind of event in Lawrence and it's great to see that it's happening. Many thanks to the organizers!
django,33ksvg,coleifer,-2,Thu Apr 23 18:34:04 2015 UTC,GTFO
django,33ksvg,silent1mezzo,1 point,Thu Apr 23 17:28:35 2015 UTC,It is a way to show my dislike of a comment though.  Edit: In the same way you downvoted mine.
django,33ksvg,silent1mezzo,0,Thu Apr 23 20:46:33 2015 UTC,I didnt downvote yours.
django,33ksvg,rackmountrambo,2,Thu Apr 23 20:57:44 2015 UTC,Downvoting people who act like a jackass helps the community.
django,33ksvg,rspeed,1 point,Thu Apr 23 21:07:44 2015 UTC,You blamed the Ada Initiative for the dongle incident.
django,33ksvg,rspeed,1 point,Thu Apr 23 23:10:51 2015 UTC,"How is that response relevant to my point?  Also, is english not your first language?"
django,33n3b2,mamunabms,5,Thu Apr 23 21:28:26 2015 UTC,"It looks like you're banned from Reddit (your user page is a 404 and your post automatically went into the spam queue). This means all of your posts are hidden until explicitly approved. Subreddit moderators can't do anything about this, except approve your posts in the subreddit one by one.  You may want to contact the Reddit admins about this."
django,33n3b2,weisenzahn,1 point,Fri Apr 24 03:58:21 2015 UTC,Thanks. I've sent a message and it seems this has been fixed now.
django,33n3b2,weisenzahn,2,Fri Apr 24 14:57:34 2015 UTC,"Try Neovim, which just for better Python 3 support. Jedi-vim will use your $VIRTUAL_ENV. I am using jedi-vim now directly for python files, instead of via YouCompleteMe."
django,33n3b2,weisenzahn,2,Fri Apr 24 13:35:49 2015 UTC,Just tried with Neovim. jedi-vim works with Python3 without complain. Two issues here. 1. On pressing . it automatically inserts first available completion. Can't get rid of this. 2. Pressing up and down key it don't insert selected completion. Need to manually press enter.  Can you please share your nvimrc file so that I can get better insight. Thanks.
django,33n3b2,lsd_is_awesome,2,Sat Apr 25 20:17:30 2015 UTC,"My vimrc is at https://github.com/blueyed/dotfiles/blob/master/vimrc. I have quite a lot of local changes, so maybe something does not work / is weird.  It's also rather huge and messy nonetheless.   On pressing . it automatically inserts first available completion. Can't get rid of this.   See the 'completeopt' option.  Adding ""longest"" to it helps with that:  set completopt+=longest   The problem is that Jedi-vim triggers <C-x><C-o>, which then selects the first entry by default.  After all it appears to be a bug in jedi-vim, with a suggested fix at https://github.com/davidhalter/jedi-vim/pull/392.  See also the g:jedi#popup_on_dot and g:jedi#popup_select_first options in this context.   Pressing up and down key it don't insert selected completion   Use Tab/Shift-Tab or Ctrl-N/Ctrl-P for that.  You might be also intereseting in this snippet:  "" Use default python with Jedi. "" Will be provided by https://github.com/davidhalter/jedi-vim/pull/387. let s:def_py = system(""python -c 'import sys; sys.stdout.write(str(sys.version_info[0]))'"") if s:def_py   let g:jedi#force_py_version = s:def_py endif"
django,33n3b2,jollybobbyroger,1 point,Sun Apr 26 01:43:45 2015 UTC,"Thanks a lot. This is really great help to me. I've failed to make completeopt working. Still set completeopt=longest,menuone has no effect on me but I'll keep exploring on it. Decided to use <C-p> for the time being to deselect auto inserted first item. I'm now ok with Ctrl-N/Ctrl-P for inserting selection. The last snippet is very handy for dynamic python version though I'm using default vim for python2 with YouCompleteMe and I'll keep using neovim for python3 only until I get everything working as expected. Thanks a lot."
django,33n3b2,Rapt0r-,2,Sun Apr 26 11:36:22 2015 UTC,Cool. Have you tried the fix from https://github.com/davidhalter/jedi-vim/pull/392? Would be good to get it confirmed there.
django,33nqmg,originaljewedlaw,1 point,Fri Apr 24 00:45:16 2015 UTC,"After many many hours... lesson learned: When using multiple WSGIDaemonProcesses in distinct VirtualHosts, remember to correctly set WSGIProcessGroup to mirror the server name.   Oye vey."
django,33nqmg,garfonzo,1 point,Fri Apr 24 06:12:33 2015 UTC,"So you got it working?   I just managed to get a similar setup working. Two Django projects, two different domains (not a sub like you have), both running on the same server with Apache. That's some fun debugging!"
django,33nqmg,Brandhor,1 point,Fri Apr 24 06:25:03 2015 UTC,also if you have more than one django app under the same virtualhost but different subfolders remember to put WSGIProcessGroup  inside a Location section
django,33ku0m,RalphMacchio,3,Thu Apr 23 09:49:35 2015 UTC,"I might be missing something, but I don't think generic relationships would be that useful here. An example of a more appropriate use of a generic fk with those models would be if you wanted to have a House.rule_maker - a FK where it could be any one of Adult, Kid, Cat etc. I can't really see it working well in the other direction.  Besides, although generic relations can be useful, they're often a second-class citizen in django - a case of ""now you have two problems"". I rarely use them without regretting it at some point, so try to avoid them whenever possible.  I think your situation is more of a UI problem; your existing FK arrangement seems like the most appropriate way to set up your database, so if you don't like having separate sets of inline models, you may need to write something yourself.  I'd guess this isn't an uncommon problem, so there may be a project out there which does exactly what you want, but if you can't find one, I'd probably look at using separate inline formsets for Adult, Kid and Cat, then write some javascript to merge the inlines into one, perhaps using django-dynamic-formset for inspiration."
django,33ku0m,radiacnet,2,Thu Apr 23 12:26:24 2015 UTC,"I agree with /u/radiacnet that this is an admin UI problem, not a schema issue.  It seems like your desired workflow is for a user to select what type of FamilyMember they'd like to create, display the appropriate form, and let them submit. In order to display the correct form, you could either use separate inlines or use custom javascript to load the rest of the form after the user selects the type.  If I were you I would just use separate inlines and set extra=0 to avoid the clutter of a bunch of empty forms.   Django's admin system is awesome and easy to customize, but if you have extremely strict interface requirements you'll need to spend a lot of time tweaking things. I've found that there is usually a very simple ""close enough"" solution, and drastic customization is rarely worth the effort."
django,33j10p,TehMoonRulz,7,Wed Apr 22 22:25:53 2015 UTC,"DRF brings quite a bit of magic, but it is, for the most part, fairly obvious magic.    Effectively, it's a couple of components:    Serializer  Deserializer Router Authorization framework Convenience Mixins   It's very easily doable without DRF, but you'll find yourself rewriting basically those things, quite a bit.  Having written a number of Django/REST/Angular apps, DRF is nice, but it takes a bit to fully utilize all of its components, and I often find myself resorting to using APIView when I get stuck on something, only to eventually refine it later using tools that were present in DRF the entire time.    Ultimately though, with Class Based Views and a decent Token-auth handler (which is easy as hell to write), the biggest value in DRF is the serializer/deserializer and how effectively it works at convenience mapping relationships, backrefs and all that, but I've used Marshmallow as well, and it's also quite good.    Just as a thought, if it is just for a prototype, you can skip writing a token handler and just use Django's session auth, but I don't think it's a great choice for production."
django,33j10p,issue9mm,3,Wed Apr 22 23:06:42 2015 UTC,"...you can skip writing a token handler and just use Django's session auth, but I don't think it's a great choice for production.   I'm prototyping my first app using Django, DRF & Angular. I have no experience of running a battle-hardened production stack. Would you be able to explain why Django's session auth is not a great choice for production?  Many thanks!"
django,33j10p,s0m-81,3,Thu Apr 23 10:32:11 2015 UTC,"The reason you would not use Session Auth in production is because it's just less portable.  Session Auth will work for web clients, otherwise, clients would have to implement some kind of session handler.  This is sub-optimal for android apps, ios apps, etc.    It is less to do with security and more to do with portability.  Also, if you're building a HATEOAS compliant-rest provider, it should be stateless, such that authentication/authorization is performed as part of each request, and not held over with a session."
django,33j10p,issue9mm,1 point,Thu Apr 23 14:03:14 2015 UTC,"This is excellent advice.  I ended up rolling my own serialisers, because I'd mis-specified my models, basically, so was serialising a bunch of stuff that weren't models.  We're refactoring now to include CBVs for most things by including them as models (side point, really).   Angular and DRF is nice, btw, but it's worth pointing out all of the hacks you have to do to make Angular play nice with SEO and social sharing (it does NOT play well with FB and Twitter without a lot of tweaking and pre-rendering) - having looked into meteor and shadow.js, and a bunch of other solutions, we came to the conclusion that the right solution for those problems was just to rebuild it in react.js, which is looking about 40-50% faster to render the same pages anyway.  (Re: token handler, the Django Rest Framework JWT library is good, usable and extensible: https://github.com/GetBlimp/django-rest-framework-jwt)"
django,33j10p,iamwithnail,2,Thu Apr 23 14:30:20 2015 UTC,"I'm still not sold on JWT, but probably just because I'm old.    I get that it has the utility of encoding arbitrary values in the token, and that's cool, but my login routine already returns those values on success, and I just cache them at the client level.    Beyond that, I debate whether or not a short-lived token (requiring more constant re-authentication) is preferable to a longer-lived, revocable token that can be consistently used in a variety of clients."
django,33j10p,issue9mm,3,Thu Apr 23 15:09:21 2015 UTC,"Django Rest Framework will save you a ton of time and provide features you would never implement on your own. For instance, an admin site that allows you to browse your endpoints.  Serializers are really slick. About half my site uses them, the other half are hand-rolled and I wish they all used serializers.  The class-based views they provide are extremely useful. For instance, you can subclass RetrieveUpdateDestroyAPIView, point it to a model, and you've got GET, PATCH, DELETE endpoints written with close to 0 code on your end."
django,33j10p,never_safe_for_life,1 point,Thu Apr 23 03:58:13 2015 UTC,"I'd suggest going through the tutorial to see for yourself. I've rolled my own serializer for another project. It's definitely do-able relatively easily, but I really dig the productivity I get from using DRF's models. I also really like the self-documenting api pages (for use during development) and the relatively straightforward integration with other third party apps. I'm on a relatively small team, and (especially since we're iterating fairly quickly) I find the api pages helps keep everyone (front-end/back-end) on the same page in terms of supported features."
django,33j10p,davidb_,2,Wed Apr 22 22:37:58 2015 UTC,Sounds good. I get what you mean regarding the self-documentation. I saw that in a DjangoCon video featuring Nina Zakharenko and was impressed.
django,33lb3t,Rogergonzalez21,5,Thu Apr 23 13:24:03 2015 UTC,<h1>Test</h1>     {% for client in clients %}     <h1>{{ client.name }}</h1>         <ul>{% for phone in client.clientphone_set %}             <li>{{ phone.phone_number }}</li>         </ul>{% endfor %}     {% endfor %}
django,33lb3t,svilgelm,1 point,Thu Apr 23 13:42:01 2015 UTC,"Thank you! This fixed it. I just had to fix ""client.clientphone_set.all"" and it worked. Thanks!"
django,33lb3t,svilgelm,1 point,Thu Apr 23 14:12:44 2015 UTC,Enjoy ;)
django,33hfev,Rogergonzalez21,11,Wed Apr 22 15:28:43 2015 UTC,"You're looking for inline formsets - Django's documentation is pretty good: admin site, and normal forms.  If you're using normal forms, you'll make a form for the Client model, then an inline model formset for the ClientPhone. I find django-dynamic-formset to work well for using javascript to add new ones."
django,33hfev,radiacnet,1 point,Wed Apr 22 15:50:26 2015 UTC,"I think this is just what i've looking for. I did not know that ""inline formset"" was its name. Thanks! :D"
django,33hfev,lexbuck,2,Wed Apr 22 16:00:16 2015 UTC,This seems to be my biggest obstacle. I know what I need and know it's a thing just don't know what it's called and thus googling turns up nothing.
django,33hfev,lexbuck,1 point,Fri Apr 24 19:25:27 2015 UTC,"I haven't tried the solution that was commented here before, because I haven't made the form yet, but it seems like the way to go. Try that and let me know if that worked."
django,33ga06,Nikita008,2,Wed Apr 22 07:34:52 2015 UTC,"Your best option is likely to do the geolocation work in JS, then populate the form fields when you get the lat / lon, you would then store those values in an object, then output them into the JS when you want to display the location on a map."
django,33ga06,danielsamuels,1 point,Wed Apr 22 08:43:01 2015 UTC,"This is something new for me, as I am a novice in web dev, will try this and will ask if I am having some problem following your hint :) Thanks anyway :)"
django,33ga06,Ebriggler,2,Sun Apr 26 12:37:06 2015 UTC,"Look at making some views that only handle your form posting. For the lat/lng, use a callback method to get the click events. Use ajax to submit the form data to your view. You can also make a view to return JSON and populate the map with it."
django,33ga06,Ebriggler,1 point,Wed Apr 22 11:46:43 2015 UTC,"This is what I needed, I figured out the rest of the queries I had regarding the prob I posted and your post solves the rest. Thanks a lot ;)"
django,33ga06,metraon,2,Sun Apr 26 12:32:13 2015 UTC,Your welcome. Happy django-ing!
django,33ga06,metraon,2,Sun Apr 26 13:01:02 2015 UTC,There is a google maps api in python you could use.   There is even a package for this : https://pypi.python.org/pypi/googlemaps/
django,33ga06,AnotherParakeet,2,Thu Apr 23 13:01:54 2015 UTC,"I have already implemented a lot of functions with the Google maps API, in Js.WIll see if somewhere this could be useful or not :) Thanks anyway:)"
django,33dyjg,CleverEagle,3,Tue Apr 21 19:17:54 2015 UTC,"Cool idea man, and open sourced the right way with PyPi, Travis, etc. thanks for sharing."
django,33fcqn,violincovers,1 point,Wed Apr 22 01:46:36 2015 UTC,https://www.livecoding.tv/
django,33epkv,kiwibird2,1 point,Tue Apr 21 22:35:43 2015 UTC,"I'm not sure if I fully understand, but you might be better off with RadioSelect for your camp selection. If you add the @property decorator above is_full, you can access that from the template.  Edit: also I think your size method should be Registration.objects instead of Camp.objects."
django,33epkv,CleverEagle,1 point,Tue Apr 21 23:13:24 2015 UTC,Don't hardcode HTML attributes in your classes. Use widget tweaks instead https://pypi.python.org/pypi/django-widget-tweaks
django,33c0mo,idreamofwarpspeeds,6,Tue Apr 21 08:10:33 2015 UTC,"For javascript apps i usually make the following setup   Use normal Django models and RestFramework's serializers and views. If you are doing a web-only REST interface, dont bother with the fancy authentications, just use plain DjangoAuth. Do NOT use django-pipeline or django-compressor or similar, just use the toolchains of the frontend to keep them separated. On intial page load, Django will gather all data needed for the initial client side render and put that as a JSON blob in the template for the JS app to load. If you have a isomorphic frontend stack you can render the actual app in the template server side too. If you have non-dynamic content like headers/footers you can have them in the template too.  Send it all to the browser, let the JS app render and request additional data via REST interface. Use Djangos cache directives to cache the whole templates except this JSON blob.   So its a version of option B, but with a minimal template. A is very hard to get as you need some kind of html file to kick start the JS app. C sounds messy and i have a hard time see what the gain would be.  And the relevant parts of my tech stack is   Postgres, Django, Rest-framework on the server side Superagent or Fetch for XHR on the client side, React to render it.   I like it because these parts together made web development reasonable and easy to work with."
django,33c0mo,snuggl,1 point,Tue Apr 21 10:54:33 2015 UTC,"Well... Version A sounds like angular.js  You'd essentially be making a django-single-page app. You load all the javascript from no body HTML file, and it'll make a call to the backend to actually get the data for that page. The templates are client side javascript."
django,33c0mo,true_religion,1 point,Tue Apr 21 14:16:36 2015 UTC,"No you need at least one html response to start the application regardless of what framework you use to make the frontend, which is why option A - pure REST api wont happen while at the same time serving an web app.  With a static html file template you lose the possibility to front load the data that you know the app needs and have to resort to fetching those in extra requests after the page load."
django,33c0mo,snuggl,1 point,Tue Apr 21 14:26:58 2015 UTC,"Well no a pure REST api needs something to call it.  Would you call an HTML template (given below), a part of the application or just static content (like a marketing page would be)?  <head>      <script src=""load.js""> start() </start> </head> <body> </body>"
django,33c0mo,true_religion,2,Tue Apr 21 14:42:43 2015 UTC,havent read it carefully but check this out http://blog.kevinastone.com/getting-started-with-django-rest-framework-and-angularjs.html
django,33c0mo,manimal80,1 point,Wed Apr 22 07:42:50 2015 UTC,"I use version C because i find that aysnchronously loading parts of a page is slow unless either (a) that single part requires a lot of load time and is not the focus of the page, or (b) the user needs to interact with the page before we can tell what to load from them."
django,33e82q,TheBigBlabberMouth,3,Tue Apr 21 20:25:44 2015 UTC,"payload = {""foo"": ""bar""} r = requests.post(url, data=json.dumps(payload))   Try wrapping a json.dumps() around the data array."
django,33e82q,randomwolf,1 point,Tue Apr 21 21:16:50 2015 UTC,"Yeah, this is it. The request isn't actually sending JSON data, it's sending standard POST data. It's somewhat unfortunate that Python dicts look like JSON, but they're not the same thing."
django,33e82q,danielsamuels,0,Wed Apr 22 08:44:40 2015 UTC,The problem is the data=
django,339ioi,JamalKRX,6,Mon Apr 20 18:52:25 2015 UTC,"Most changes for 1.8 are in areas that will not affect you, as a learner. So most content fro 1.6 and 1.7 will still be relevant. Only thing is in 1.7 migrations were brought in as native so use them instead fo south."
django,339ioi,BuddyLindsey,4,Mon Apr 20 19:50:25 2015 UTC,"Very happy that Danny and Audrey have seen the light, and will be offering eBooks again."
django,339ioi,teilo,2,Tue Apr 21 17:59:29 2015 UTC,"Hurrah! I didn't buy it before because I have far too many physical books, and had decided not to buy more. I will definitely buy this now (or as soon as it's released, at least)."
django,339ioi,marblepebble,5,Wed Apr 22 07:53:49 2015 UTC,pydanny is updating Two Scoops of Django for 1.8  See https://twitter.com/pydanny/status/586663664003911680
django,339ioi,adamcollard,13,Mon Apr 20 20:01:54 2015 UTC,pydanny and /u/audreyrg. I'm just the loud one. ;)
django,339ioi,pydanny,5,Mon Apr 20 20:33:47 2015 UTC,You also do WAY more cartwheels.
django,339ioi,frankwiles,5,Mon Apr 20 23:32:31 2015 UTC,https://instagram.com/explore/tags/100daysofcartwheels/ :-)
django,339ioi,pydanny,1 point,Mon Apr 20 23:53:27 2015 UTC,Just in time for pay day! :-)
django,339ioi,little_oaf,1 point,Tue Apr 21 00:58:30 2015 UTC,Oh awesome! I've been poking through the 'polls' tutorial in my spare time at work so I'll pick up a copy of the new Two Scoops when it comes out.
django,339ioi,EmporerNorton,1 point,Tue Apr 21 01:16:39 2015 UTC,If you haven't built a full app yet two scoops won't be very helpful.  It took me building probably four or five apps before I understood two scoops and its intentions.
django,339ioi,mjgcfb,2,Tue Apr 21 22:26:22 2015 UTC,"Most likely 1.9 will be out or nearly out by the time books are published for 1.8.  I wouldn't worry too much about being a version behind.  Get what you can out of the book, and then read the documentation for the changes."
django,339ioi,jcdyer3,6,Mon Apr 20 19:48:38 2015 UTC,"1.8 is an lts release, there will be books!"
django,339ioi,dysmas,3,Mon Apr 20 20:51:06 2015 UTC,Good point.
django,339ioi,jcdyer3,1 point,Mon Apr 20 21:59:31 2015 UTC,"Two Scoops of Django for 1.8 will be released soon so I'd wait for that one. If you can't wait the last one (written for 1.6) is still very good and mostly applicable, you just have to modify some parts of your projects, but Django gives great instructions and information regarding backwards incompatible changes."
django,339ioi,new2django,2,Mon Apr 20 19:03:13 2015 UTC,Is there a pre-order page yet?
django,339ioi,dAnjou,3,Mon Apr 20 19:26:25 2015 UTC,Not yet from what I can tell. I follow the authors on Twitter and they said they're putting the finishing touches on it right now. Maybe some time this week.
django,339ioi,asdfor,1 point,Mon Apr 20 19:45:10 2015 UTC,I'll wait until its released. Anything else I should get?
django,339ioi,andrey_shipilov,3,Mon Apr 20 23:07:34 2015 UTC,"Why do you need a book? If I'm not totally wrong the underlying architecture and concept of Django hasn't changed for ages. Just read the docs, or get them as PDF."
django,33734m,JTode,4,Mon Apr 20 03:40:43 2015 UTC,"Sorl Thumbnail for resizing, caching images. https://sorl-thumbnail.readthedocs.org/en/latest/  Django Any Image Field for displaying thumbs in admin https://github.com/edoburu/django-any-imagefield  As for CSS I'm guessing you need that in case the image needs different centering?"
django,33734m,andrey_shipilov,2,Mon Apr 20 07:51:47 2015 UTC,Second for Sorl-Thumbnail.  Don't reinvent the wheel man!
django,33734m,RCXw4qGOCU,1 point,Mon Apr 20 08:02:15 2015 UTC,"I'll read up on sorl-thumbnail, thank you.  Here's the problem, as I see it: I need the different image sizes for the different screen sizes to be generated and stored right when the user uploads the image in the admin. This is because django doesn't know the screen size before it serves the page - therefore, it does not know, before serving the page, which image size is the right one for the person making the request. Choosing which file is the right one is up to style.css, which does the media query and does know.   So that's the key - the users need to just upload one, large file, and then after they do, I need it turned into small, medium, large and zipped versions, stored in their proper places, and one way or another, add the css rule. Actually, the css rules could be added for each file by generating an image_id.css file and then generating the links to the files in the <head> with template variables and a for loop.  /u/andrey_shipilov says I shouldn't reinvent the whee, but I'm still a baby, isn't wheel-reinventing what I'm supposed to be doing? :>  Just don't know how to do it yet..."
django,33734m,andrey_shipilov,2,Mon Apr 20 11:53:42 2015 UTC,"Well you still will be generating files of all sizes for the CSS queries. There's no problem with that. Sorl thumbnail generates them ones, caches and that's it. You control the dimensions in templates, compressor controls the CSS cache, sorl controls the file cache."
django,33734m,zoner14,1 point,Mon Apr 20 12:02:21 2015 UTC,"So I'm assuming you've figured out how to upload the image to your site through a POST request in your admin. Once the POST gets to your view, if you want to do this from scratch, you will need to do a couple of things.   Download pillow. It's what everyone uses for image manipulation. Check out https://docs.python.org/3.4/library/io.html#io.BytesIO. You are going to store the image in an instance of BytesIO so that pillow can read it. You might be able to use a bytearray, but I'm not sure if pillow supports those or not. The bytes will be used in the constructor of pillow's Image. pillow will provide a variety of resizing functionality. If the image you want to create is smaller than the uploaded image, there is a thumbnail function you can use: http://pillow.readthedocs.org/en/latest/reference/Image.html?highlight=thumbnail#PIL.Image.Image.thumbnail. If you want to enlarge the uploaded image, there is a resize function: http://pillow.readthedocs.org/en/latest/reference/Image.html?highlight=thumbnail#PIL.Image.Image.resize You can call Image.save() with your new resized Image instances. You will then need to save these images to the DB using Django ImageField: https://docs.djangoproject.com/en/1.8/ref/models/fields/#django.db.models.ImageField. ImageField should take care of saving the image binary to the file system as well as saving some metadata about the Image to your DB. Each of the uploaded files can be accessed using a different URL. It will depend on how you handle MEDIA_URL. Regardless, in your css media query, you can redirect based on screen size to the appropriately sized image. The upload_to attribute of the ImageField will let you specify a function to  determine the name of the URL the image is uploaded to.    Hopefully this helps."
django,33734m,issue9mm,1 point,Tue Apr 28 04:29:05 2015 UTC,"If I were doing it, I would have them upload full-size images, then automatically resize them to the various dimensions that were necessary, and save the paths to the press-shot and web-shot in separate fields.    You can super save() on that model, and have it resize there is the smaller sizes don't exist.    So, something like this:   def makeThumb(f_in, size=(128, 128), pad=False):     f_out = f_in # fix this, cause you don't want it to save over the same file, like I did.     image = Image.open(f_in)     image.thumbnail(size, Image.ANTIALIAS)     image_size = image.size     thumb = ImageOps.fit(image, size, Image.ANTIALIAS, (0.5, 0.5))     thumb.save(f_out)     return urlized_path_to(f_out)  class Image(models.Model):     fullsize = models.URLField(upload_to=blah)     smallsize = models.URLField(upload_to=blah)     type = models.CharField(# seed with a choice field, web or full)      def save(self, *args, **kwargs):         if not self.smallsize:             self.smallsize = makeThumb(options)         super(Image, self).save(*args, **kwargs)   As for the responsiveness, just let bootstrap and img-responsive deal with it, unless you're just looking for a programming exercise."
django,33734m,xelhark,1 point,Mon Apr 20 05:17:04 2015 UTC,"Hey as it happens I did a Django app that does exactly what you're describing. Its name is 'Django image tools', it's available on pypi so you can just plug it in and use it.   If you're more interested in the coding as to learn, the app is open source and documented, if you have any questions about the code I am available to explain the process too! :)   Edit:  Repo link: https://github.com/bonsaistudio/django-image-tools/  Documentation: http://django-image-tools.readthedocs.org/en/latest/"
django,33734m,xelhark,1 point,Mon Apr 20 07:17:03 2015 UTC,"Beautiful, I will check it out, and thanks for the offer of explanation, I will probably be messaging you later to pick your brain. I figured that DRY would have kicked in for this already, so this is perfect.  I'll probably be in touch. :>"
django,33734m,frankwiles,1 point,Mon Apr 20 11:58:13 2015 UTC,"You're welcome, I'm not very experienced either so don't take my code like some sort of holy grail, it probably has lots of flaws, but it's something :)"
django,33734m,amusikal,1 point,Mon Apr 20 12:13:22 2015 UTC,"At this point, I'm a lot more comfortable working out what a simple piece of code does than I am with working with a ""black box"" app. I will probably end up just writing my own, because my goal at this point is still to learn, rather than just to get it done and move on. I want to linger on this.  Edit: probably take me a week to figure out writing my own, rather than having it done a couple of hours from now, but well worth it, in my view."
django,33734m,andrey_shipilov,1 point,Mon Apr 20 12:33:26 2015 UTC,"Surprised no one has mentioned django-imagekit yet.  It's my ""go to"" for this."
django,33734m,andrey_shipilov,1 point,Mon Apr 20 16:37:00 2015 UTC,"Hi there!  I'd recommend easy-thumbnails as a good place to start.  I've used this with good results on lots of projects. It will auto generate  scaled images, crops etc on the fly to whatever sizes you need, and cache then for reuse. It's really customisable and supports retina versions too.  Good luck!"
django,33734m,andrey_shipilov,1 point,Mon Apr 20 07:39:52 2015 UTC,"I was looking at that, but the docs aren't clear on something - it refers to generating the specified sizes ""as needed,"" just before serving the files. However, this will not work for me, because I need all the sizes generated and waiting in the static dir before the page gets served, because django doesn't know the screen size before serving the page.   Is there a way to force this behavior in easy_thumbnails? I was indeed looking at that (it's installed in my app, in fact) but I've also been thinking I'm better off just figuring out how to do it myself with a modified view or some such. Do you know if easy_thumbnails can be forced to generate the images right away?"
django,33734m,andrey_shipilov,1 point,Mon Apr 20 11:39:49 2015 UTC,Why do you need them right away? You generate images once and then they are cached. What's the point?
django,33734m,ckinsey,1 point,Mon Apr 20 11:56:17 2015 UTC,"the package wants to generate the images just before serving the page to the user. The problem is that the correct-size image for the page being served is chosen just after the page is served.   Once the images are generated and in the static dir, it's all good forever, but until the images are generated, the app would presumably just serve some default image for that model, because django does not know the size of the screen before serving the image.  That's why I need them right away."
django,33734m,amusikal,1 point,Mon Apr 20 12:31:53 2015 UTC,"Ok, what? :) How would you tell Django the size of the screen or how the different image is going to be used according to your expectations? No holywar, just trying to understand what do you mean."
django,338hjb,thewhitetulip,5,Mon Apr 20 14:18:55 2015 UTC,"I'm not sure you understand the terminology, AJAX is just a method of transport that is executed asynchronously whereas AngularJS is a complete framework for building webapps.  They are not mutually exclusive in any way (AngularJS uses AJAX calls in its $http service for instance). If you were to exclude AngularJS you would still need to use or write something that takes care of the actual application layer/UI updates and field-value bindings, essentially reinventing the wheel.  Let me ask you this instead: What do you mean when you say ""ajax"" and why do you feel AngularJS would not be a good choice from a maintenance (what does that entail in this case?) point of view and if you were to use manually written AJAX request for server communication what would you do for updating the DOM/HTML with the new information?"
django,338hjb,loptr,2,Mon Apr 20 14:48:24 2015 UTC,I wonder when they say AJAX if they mean JQuery. Ive made that mistake before
django,338hjb,new2django,1 point,Mon Apr 20 15:34:02 2015 UTC,I see now that OP actually edited it to say jQuery after I wrote my answer.
django,338hjb,loptr,2,Mon Apr 20 16:34:05 2015 UTC,"My bad, sorry. I have updated the details."
django,338hjb,tres_bien,2,Mon Apr 20 16:46:54 2015 UTC,Well now it doesn't say AJAX or jQuery!
django,338hjb,loptr,1 point,Mon Apr 20 17:02:48 2015 UTC,"Haha let's focus on the question as it's asked now and try to apply the principles in my argument, keep any that still makes sense and disregard the rest. I can't keep up. :D"
django,338hjb,new2django,1 point,Mon Apr 20 17:20:04 2015 UTC,"That is because I never intended to ask about jquery/javascript, I wanted to ask is there point in using angular because of the negative things I read about it over hacker news and more places. :D"
django,338hjb,loptr,1 point,Mon Apr 20 17:25:13 2015 UTC,"I like Angular. The HTML tags are superpowers. The JS is okay. Maybe I'm stupid but I find defining models and controllers annoying on the front-end. The real problem is the schism over 2.0, which won't be backwards compatible.  I don't care about the politics. Angular works now and by the time it breaks, there will be something better. Everyone is talking ReactJS maybe that is it."
django,338hjb,s0m-81,1 point,Mon Apr 20 19:31:00 2015 UTC,true that
django,338hjb,issue9mm,1 point,Tue Apr 21 16:00:11 2015 UTC,"Yes, my bad, I wanted to ask if I should write my own ajax for everything or use djangular. I have read many things about angular2.0 and all.  So should I use or should I not? I am actually not having any idea or experience in webapp dev, this is my 'first real project' let me put it this way, it would help me immensely to get a real answer :D, I have been searching on the internet but without any output"
django,338hjb,issue9mm,1 point,Mon Apr 20 16:30:56 2015 UTC,"I would say absolutely, I haven't used djangular so I'm not a 100% sure what it actually offers, but adding AngularJS yourself to a django project should be easy enough.   If I was to go with Angular for the first time I would probably prefer using it on it's own, i.e. not wrapped in a django-app like djangular, just to make sure I learn it properly and start picking up what is and isn't Angular specific things.   But with that said I think Angular 1.x will live on for quite some time so I don't think djangular is a deal breaker in any way, so you shouldn't feel too rushed to go to 2.x. (If you implement Angular on your own I would go with 2.x though..)  With jQuery/plain javascript you will find yourself repeating a lot of tasks and reinventing the wheel. Can be useful for learning but time spent doing that is time that could be spent on other things in the code base instead.   I have only good things to say about using AngularJS in general and nowadays I only use jQuery for random utils/prototypes or augmenting existing websites.  AngularJS was essentially created to get away from reinventing the wheel with jQuery-based manual DOM manipulation in webapps. So unless it's strictly for learning purposes I primarily see downsides to choose jQuery based solution over AngularJS.  If you want to experience writing a webapp/frontend from scratch(ish) go with jQuery and vanilla javascript to learn everything about the event handling and DOM, otherwise I would go with AngularJS to make sure I don't have to write lots of boiler plate code and manually update the HTML/DOM."
django,338hjb,never_safe_for_life,2,Mon Apr 20 16:52:42 2015 UTC,"Okay, I am convinced that I should use angularJS, I found that angular framework is fantastic, truly. But I wasn't sure. Now I am.  One thing though, I was under the impression that one has to use that django-angular or djangular things to write angular in django, I will learn using angular on its own now. thanks :)"
django,338hjb,issue9mm,2,Mon Apr 20 17:18:08 2015 UTC,"I've been happily using Django & Angular, with some initial pain around authentication, CORS and drawing the right lines of separation. Here's my stack:  AngularJS and Bootstrap on top. There are lots of great choices out there. There are lots of critical articles about Angular, Bootstrap, jQuery; functional vs. declarative, etc. Choose what you're most comfortable. I chose Angular for the same reason I chose Django: Great user community and off the shelf modules.   Django models + Django Rest Framework, which serves up data. (As suggested by most of the replies).   Django serves my initial Login, Signup and Password reset pages. These are plain old HTML & Django Templates. I can redirect browsers which don't satisfy minimum requirements for Angular. (I believe it's safer this way too).  Once logged in, a user is served my JavaScript enabled index.html, which loads angular.js, other libraries (ui-router, ui-bootstrap, etc.) and my app.js, which is my root application JavaScript file. From this point on, it's a One Page Application experience that Angular excels at.   Here's where it get's political. The app.js is served by Django and has some constants defined by Django template variables, {% url %} and {% static %}. Yikes! Mixing Django template variables and Angular JS notation is never advisable for maintainable, clean code. Nevertheless, I've done it all in one place and heavily commented (using a mix of JS comments and Django comments no less) for future maintainer to curse me.   Extract:  (function () {     ""use strict"";      angular.module(""myApp"", [])         .constant(""urlConfig"", {             // Partials & Images             ABOUT_HTML:                  ""{% static 'app/partials/about.html' %}"",             FEEDBACK_HTML:             ""{% static 'app/partials/feedback.html' %}"",             BANNER_1_JPG:                ""{% static 'images/banner_1.jpg' %}"",          })         .run(function (userService) {             // Load User Profile & Permissions from Django directly             userService.user = {% autoescape off %}{{ USER_DATA }}{% endautoescape %}         }); })();   As my root index.html and app.js files are served by Django, it circumvents having to deal with CORS (Cross-origin resource sharing) headers, etc. All behind @login_required, to leverage Django's auth system.   This is where the Django + Angular mashup shenanigans end. Everything else is pure REST calls, which are wrapped up in a Angular Factory. (Adding CSRFTokens to the HTTP calls).   (function () {     'use strict';      angular.module('myApp')         .factory('dataFactory', ['$http', '$cookies', function ($http, $cookies) {              $http.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';             $http.defaults.headers.common['X-CSRFToken'] = $cookies.csrftoken;              var dataFactory = {};             var baseURL = '/django_app/api/v1/';              dataFactory.getAllData = function () {                 return $http.get(baseURL + 'data/');             };              dataFactory.updateItem = function (id, data) {                 return $http.put(baseURL + 'data/' + id, data);             };                 return dataFactory;              }]);  })();   I then injects urlConfig, userService and dataFactory into my Angular controllers.   Your milage may vary. Good luck!"
django,338hjb,issue9mm,1 point,Wed Apr 22 09:48:47 2015 UTC,"/u/loptr's comments are correct, in that I think you've got your terminology confused.    That said, well written Angular is about as maintainable as well written Javascript.  For something as tightly scoped as a note-taking app, maintainability is probably not your biggest concern.    Still though, angular is pretty easy to maintain, especially if you start with something structured like angular seed."
django,338hjb,issue9mm,1 point,Mon Apr 20 16:35:23 2015 UTC,"Okay, I was confused, for a note taking app what approach would be better angular or writing js by myself? Angular is huge right, it has many components and all. The thing about angular, first is the angular2.0 is a rewrite, and I am not sure when djangular will port to angular.  what should I do, write js by myself or use angular?"
django,338hjb,WelshDwarf,2,Mon Apr 20 16:38:53 2015 UTC,"If it were me, I'd use Angular, but with caveats.  1) I really like Angular.  2) I don't use Djangular, for anything, ever.  Every python project I start nowadays begins with writing REST endpoints in DRF.  Angular is, mostly, just a nice way to organize your JS components.   I'm also a bit worried about how long the lifespan of Angular 1 will be after Angular 2 drops, but I'm really looking forward to Angular 2.  From the bit of it I've seen, it seems to be the good parts of Angular plus the good parts of React.    If you're worried about it though, you might also look into React, which is slightly more functional, and paradigmatically opposite (IMO) to Angular 1, but which has some really nice bits as well.   On the whole, if the project is large, you should probably be using some kind of framework to structure it to make it more maintainable.  Whether the framework is Backbone, React, Angular, or some other thing isn't as much of a big deal as is your comfort developing against those frameworks.    For what it's worth, something like Backbone gives you structure, while also basically being more closely comparable to just plain old jQuery and AJAX.  Might be your most straight-forward path."
django,338hjb,rspeed,2,Mon Apr 20 16:49:50 2015 UTC,+1 to AngularJS front-end communicating exclusively through a REST API to Django. This is an excellent pattern that I am seeing more and more of (and use myself)
django,335mkz,whiskeyfox_,3,Sun Apr 19 19:50:33 2015 UTC,"For more realtime support, check out #django on the freenode irc network.  As you can see from the attempted URL resolver keyword arguments, your problem is that vendor_item.slug is blank / erroring. Are the first three vendors in this queryset all returning a slug?  >>> [vendor.slug for vendor in Vendor.objects.annotate(Count('deal')).order_by('name')[:3]]   Are you sure your application is running with the same project settings as when you are using ./manage.py shell?  Hrm, and are you sure your wsgi server is running in the same python environment?"
django,335mkz,SmileyChris,1 point,Sun Apr 19 22:09:45 2015 UTC,Definitely the same python environment. I didn't set up a virtualenv because this was just a droplet I spun up to specifically see if I could deploy this app.
django,335mkz,andrey_shipilov,2,Mon Apr 20 08:43:02 2015 UTC,"By the way, I'm not trying to freeload here. I am more than happy to pay for this help if it means I get the problem fixed. http://www.reddit.com/r/forhire/comments/331vpm/hiring_remote_djangopython_dev_for_a/ Or free is nice, too. I actually prefer free, but sometimes time is most valuable."
django,335mkz,andrey_shipilov,2,Sun Apr 19 20:03:50 2015 UTC,Is local and remote db the same. Are there slugs in both of them?
django,335mkz,tmjoen,1 point,Sun Apr 19 20:09:48 2015 UTC,"I set up a Postgres DB on the droplet, so the uploaded app is using that. Here's what happens when I query a slug from the shell.  >>> myvendor = Vendor.objects.get(slug = 'my-first-vendor') >>> print myvendor My First Vendor >>>"
django,335mkz,tmjoen,2,Sun Apr 19 20:15:29 2015 UTC,"Vendor.objects.values_list('slug', flat=True)   What does that show on both machines?"
django,335mkz,zagrebelin,2,Mon Apr 20 01:04:09 2015 UTC,"Are you doing any db caching? I've had silly problems like this with cacheops. Or template caching?  If you have ipython, I would debug by inserting this after your data['vendors'] = vendors line in views.py  import ipdb; ipdb.set_trace()   See if vendors has been assigned anything here."
django,335mkz,tmjoen,1 point,Sun Apr 19 20:22:14 2015 UTC,"I'm using vanilla Python 2.7.  As far as caching, I haven't set that up anywhere. Unless it's somehow enabled by default on Digital Ocean droplets (Ubuntu 14.04).  I am using (for the first time) gunicorn with nginx on this droplet. Am I right in thinking that if gunicorn was incorrectly configured that app wouldn't run at all?"
django,335mkz,fotcorn,2,Sun Apr 19 20:28:05 2015 UTC,With vanilla python you can do  import pdb; pdb.set_trace()   You have to do this with ./manage.py runserver though.  Load the problem page and step through your code with n and check vars by typing their name like vendors. Type c to continue afterwards.
django,335mkz,CaptainBlood,1 point,Sun Apr 19 20:38:09 2015 UTC,"Thanks for the help... I'm even more confused now.  (Pdb) vendors [<Vendor: My First Vendor>, <Vendor: My Second Vendor>] (Pdb) data {'deals': [], 'slides': [], 'vendors': [<Vendor: My First Vendor>, <Vendor: My Second Vendor>], 'top_categories': [<Category: Miscellaneous>]} (Pdb) data['vendors'][0].slug u'my-first-vendor' (Pdb)   It looks like it's... working. But not."
django,335mkz,pemboa,1 point,Sun Apr 19 20:55:25 2015 UTC,So under the test server it's now working with lynx. Still getting the same error with nginx via gunicorn...
django,333nyv,ahulak,3,Sun Apr 19 05:24:53 2015 UTC,"I don't understand your description at all...but you can pass an additional queryset to the context of your DetailView:  class LandingPageView(DetailView):     ...     def get_context_data(self, **kwargs):         context = super(LandingPageView, self).get_context_data(**kwargs)         # Add 4 LandingPages to your context         context['landingpage_list'] = LandingPage.objects.all()[:4]         return context   The list will then be accessible in your template via the landingpage_list variable.   I recommend this site when you're trying to tweak the functionality of GCBVs."
django,333nyv,rnevius,1 point,Sun Apr 19 06:33:39 2015 UTC,"Damn, pretty unfortunate I couldn't convey my idea successfully... but thanks for the resource! I was looking for something like that and just couldn't find anything. Thanks!"
django,333nyv,jnns,1 point,Sun Apr 19 18:56:03 2015 UTC,You should definitely read the Django documentation about Avoiding complex scenarios in generic views and then do it like rnevius described.
django,332gxv,rayed,2,Sat Apr 18 21:58:39 2015 UTC,I like the site structure used in your example. Never thought about setting it up that way.
django,332gxv,dsizemore,1 point,Mon Apr 20 03:17:27 2015 UTC,"I couldn't understand why people keep changing the Django project name, it is very confusing, this why I always use ""apps"" and I have seen pepole using ""core"" too.  Consistency also make it easier to document and write turorials."
django,332gxv,dsizemore,1 point,Mon Apr 20 05:58:46 2015 UTC,Definitely. I've only got one site under my belt with Django so I really didn't know what I was doing (still don't a lot of the time) but here's how I set up the folder structure: http://i.imgur.com/MxcgZZi.png  A lot less clean. Having things separated would be nice. Basically just have all my apps sitting out there not in their own folder.
django,332gxv,dsizemore,1 point,Mon Apr 20 15:36:16 2015 UTC,"I used to have a ""templates"" directory in my BASE_DIR, and static files under the webserver root directory, but nowadays I put the templates directory inside each application, this way I have views, models, urls, tempaltes, and static files under one roof.  It makes application easier to reuse too.  My final structure looks like this: http://i.imgur.com/x73C0el.png"
django,332gxv,new2django,1 point,Mon Apr 20 17:09:28 2015 UTC,Thanks. I like that format a lot!
django,332gxv,Airith,2,Tue Apr 21 15:49:12 2015 UTC,Lovely article that I just bookmarked. I always get didn't on the multipart form definition.
django,331o83,Wargazm,2,Sat Apr 18 17:35:17 2015 UTC,You need to have a custom many to many field so you can have a order field  https://docs.djangoproject.com/en/1.5/topics/db/models/#extra-fields-on-many-to-many-relationships  Best of luck
django,331o83,lonely_b,1 point,Sat Apr 18 17:50:23 2015 UTC,that seems like precisely what I need to do.  Thanks!
django,331o83,iBlag,2,Sat Apr 18 18:37:16 2015 UTC,"Use a custom through model with an order field, then order the photo set by gallery__order."
django,331o83,jpozzed,1 point,Sat Apr 18 17:58:45 2015 UTC,See https://github.com/jpwatts/django-positions/
django,331o83,meatypocket,1 point,Sat Apr 18 21:22:06 2015 UTC,"You can have a look at how django-photologue does it using django-sortedm2m.  Using that, I've just created a dashboard that allows drag and drop ordering of photos within a gallery. The photologue admin gives an example."
django,331o83,meatypocket,1 point,Sun Apr 19 14:04:06 2015 UTC,"thanks, I've looked at photologue a bit.  I thought about just using it straight up, but I wanted to try to roll my own to learn.  Are you the main dev?"
django,33151k,iwan933,1 point,Sat Apr 18 14:30:13 2015 UTC,Sounds like you would be better off building your own. The contrib admin is really not intended to hand off to your end users.
django,33151k,volksman,2,Sat Apr 18 21:04:09 2015 UTC,Thats actually quite sad. :(
django,33151k,volksman,2,Sat Apr 18 21:29:29 2015 UTC,"Not really.  It's very easy and much better to build your own.  First off the contrib admin is a very raw interface to the models.  Doesn't easily handle field level permissions.  Is sometimes hard to enforce data normalization or relationships depending on the complexity of your apps.  It generally will get in the way of you trying to customize it.  A good example is that most systems are keyed off a User model. So lets say you have a User, that could have relationships with a Subscription model and an Invoice model etc.  They are all scattered in the contrib admin.  Where most central admins would have that information in a tab or something under the User, the admin has that in three very distinct sections.  Meanwhile you can easily build the same thing with class based views, but better yet you can create an interface tailored to your data/user experience.   That said I do use the admin sometimes.  It really depends on the app but from what you said in your original post you are going way outside the realm of the basic contrib admin.  Even with some of the mods out there, save your time and build your own."
django,33151k,megadeth9999,1 point,Sat Apr 18 22:09:47 2015 UTC,"Thank you for the explanation. :) Seems like i got a little bit flashed by the list stuff which is actually pretty easy to ""implement"". I'm definetly looking forward to build my own interface now. :)"
django,32x2i7,Brachamul,9,Fri Apr 17 12:58:21 2015 UTC,The django-developers mailing list is where new features are often discussed.
django,32x2i7,metraon,2,Fri Apr 17 13:17:19 2015 UTC,"More broad 'where is Django heading' discussions also happen at DjangoCons and PyCons around the world too, I think. I know it was the subject of a talk or two at DjangoCon AU last year."
django,32x2i7,adambrenecki,8,Sat Apr 18 11:51:50 2015 UTC,"I think at this point Django has a pretty solid future. I think part of its strength is knowing what it's for, and focusing on that.  For example a lot of frameworks eventually start spending a lot of time implementing front end features and Django has really stayed away from that and allowed that to be part of external libraries.  The truth is I can't really think of any additional ""features"" that Django needs, and anything else can always be provided by 3rd party libraries."
django,32x2i7,youlleatitandlikeit,2,Fri Apr 17 14:47:46 2015 UTC,"It's true, but 3rd party libraries are an extra mile for people who are learning a framework. They also bring maintainability issues.  Bringing things into the core is a great way to keep a framework attractive, as long as its done sensibly."
django,32x2i7,Eurynom0s,7,Fri Apr 17 15:02:11 2015 UTC,"Bringing things into the core is a great way to keep a framework attractive, as long as its done sensibly.   Bring the South guy onboard to basically bake South into Django is probably the ultimate example of this.  (If I'm confusing South for another 3rd party library--you know what I mean, they brought on a developer of a major 3rd party migrations package so they could bake it into Django itself.)"
django,32x2i7,youlleatitandlikeit,3,Sat Apr 18 04:13:47 2015 UTC,What is missing from Django's core though?
django,32x2i7,metaphorm,14,Fri Apr 17 15:16:18 2015 UTC,"RESTful API views. this hasn't been needed in core because Django-Rest-Framework does a great job of providing this functionality as a third party plugin, but arguably this use case is becoming so prominent on the web these days that it deserves to be brought in to core."
django,32x2i7,metraon,9,Fri Apr 17 15:36:34 2015 UTC,"I think it will be one day, like migrations and south once was."
django,32x2i7,shazammerbammer,-1,Fri Apr 17 15:50:34 2015 UTC,"Maybe its because I have a lot of DB background, but I really don't like migrations and south at all. I don't trust it to do the right thing. i also find it extra BS to deal w/ when having dev/production environments.  I've been stuck on 1.6 because of this, but recently had a few libraries that are moving ahead on 1.7/1.8 and I kind of want to upgrade.  This makes me wonder if there is a way to just disable migrations in 1.7/1.8.  I should add, I understand the utility of migrations, especially for 3rd party libraries that use them."
django,32x2i7,adamrt,10,Fri Apr 17 16:15:34 2015 UTC,"Why don't you trust them to do the right thing? If they aren't doing the right thing, then its a bug. There are thousands and thousands of installations using migrations successfully. Do you have such wild DB changes that the django migrations can't figure out what you are doing?  Having migrations removes BS when you have dev/production environments by having a reproducible migration path. Its one of the benefits. What extra BS are you finding?  You are on 1.6 because you don't want migrations, but you didn't even check to see if you could disable migrations?"
django,32x2i7,shazammerbammer,1 point,Fri Apr 17 16:51:29 2015 UTC,"I'm primarily on 1.6 because I started on 1.6 and upgrading my project requires a lot of work besides whatever headache migrations involve - ie checking libraries, etc. It's typical small company stuff. Do I spend time upgrading something that doesn't really need to be upgraded or do something that will make the company some money.  And all that for very little benefit. I've already identified that migrations aren't that useful to me. My main interest in 1.8 is a particular library that the author isn't supporting older versions on.  That library isn't even vital.  I'll look more into migrations. As I said before DB stuff is already in my wheelhouse, so doing that manually isn't a big deal for me, and in fact, I like knowing where my indexes are, how they're set up, etc.  I don't trust them because the one time I tried to use them, they didn't work properly. I'm sure this was my fault and lack of knowledge. Yet, why spend time sorting out something that to me adds unnecessary complexity.   Let me put it this way. For the insanely small gain I get, the risk of migrations fucking up my database is just not worth it. I don't think it ever will be. If anyone is going to fuck up my DB, it will be me."
django,32x2i7,thelindsay,5,Fri Apr 17 17:00:14 2015 UTC,"If the generated makemigration scripts are wrong or broken, you can correct or write them manually either in ORM style or using SQL. I think there is a ""--fake"" switch if you want an empty migration file with no guesses at all. The most useful part is migration dependencies, so you can build a smooth upgrade path for models."
django,32x2i7,rackmountrambo,5,Fri Apr 17 18:00:00 2015 UTC,I thought all the same things as this guy until I started actually using migrations. Now I realize I was just a stubborn idiot and could have saved myself a lot of effort over the years.
django,32x2i7,adambrenecki,5,Fri Apr 17 20:25:49 2015 UTC,"I'm primarily on 1.6 because I started on 1.6 and upgrading my project requires a lot of work besides whatever headache migrations involve - ie checking libraries, etc. It's typical small company stuff. Do I spend time upgrading something that doesn't really need to be upgraded or do something that will make the company some money.   It sounds like this is the kind of project that might benefit from being on a LTS release of Django.  Normally, only the last two releases of Django are supported, which means 1.6 now is out of support and won't receive future security patches; LTS releases are supported for at least 3 years so 1.8 LTS will be supported until at least April 2018."
django,32x2i7,shazammerbammer,1 point,Sat Apr 18 11:48:30 2015 UTC,"Yeah, this is one of the arguments for moving to 1.8. I started it last night and there was some issue with celery. Everything else seemed pretty minor.  I think the error is due to this or that needing a specific non-release version."
django,32x2i7,Ibuildwebstuff,4,Sat Apr 18 15:39:25 2015 UTC,"Ahh ok, so you're one person, working by themselves, without automated deployments or scaling. Then sure manage your own database."
django,32x2i7,metraon,3,Fri Apr 17 22:23:56 2015 UTC,"I can understand. I have one colleague who have the same reservations as you and even have doubts on the ORM system. He is a full fledged software engineer and he have a lot of experience. But in the end, the added values (development speed and visibility) convinced him.  From my small professional experience (2 eCommerce and 1 management system) I haven't encountered a scenario where my migrations screwed up something. I encountered a lot of migration prompts when I had to make mass changes to a table and rename practically everything, but even in that case the migration system wasn't to blame because it didn't want to create the migration files unless I confirm everything line by line with it.  For me the migrations allows me to keep changes of my table structures and allow my colleagues to see them as well. Reverting to previous migrations is also easy.  I must say that, so far, we keep a very tight production/staging environment and we dot a lot of unit testing."
django,32x2i7,shazammerbammer,2,Fri Apr 17 17:18:43 2015 UTC,"Thanks for the feedback. Like I said, I can see the utility of it, especially with multiple people. I'm the solo dev on this project for the foreseeable future. It's also very likely that if it does become part of my workflow, I'd be fine. I outlined some of my concerns in another post to another gentleman. It's mostly risk/reward based.  Out of curiosity what would happen with those migration prompts if you were doing the install from an automated tool like fabric over say a few different servers?  I haven't had fabric do anything that required prompting."
django,32x2i7,adamrt,3,Fri Apr 17 17:31:44 2015 UTC,Fabric will prompt in this case.
django,32x2i7,metraon,3,Fri Apr 17 17:59:52 2015 UTC,We use ansible and it support prompts.  For fabric there is an extension called fexpect (I have never used it).
django,32x2i7,Ibuildwebstuff,3,Fri Apr 17 18:20:33 2015 UTC,"The only time they need to prompt is for default values and the like. You can write your migration files so that they populate them without user input.  Also if you're deploying a new server, in an environment which does not currently have a database you can skip the migrations. Migrations are only useful when there is a previous schema to update. For a new database you can tell it to skip the migrations and create the db from your models."
django,32x2i7,Ibuildwebstuff,2,Fri Apr 17 22:27:49 2015 UTC,"How do you do schema migrations without migrations? If you're updating a database you're going to have to write a migration, I see no other way.   If you do not trust South/Django to generate the migrations for you, good news! You don't have to. There is nothing which says you have to use makemigrations you CAN write your own."
django,32x2i7,shazammerbammer,2,Fri Apr 17 22:19:35 2015 UTC,"python manage.py dbshell   make changes  exit  :) TBH most of what I thought when I first saw south and migrations was that it was a shortcut for people who didn't want to have to learn how their DB works. As I said, that's not an issue for me. At the same time, I can imagine cases where an automated DB system would do dumb things when making DB changes. (maybe those are all avoided, I don't know). Only so much time to learn about different things in this world."
django,32x2i7,YouAreSalty,2,Fri Apr 17 23:17:47 2015 UTC,"Well mistakes happen!  Do you want to be the guy messing up a production site?  I'm sure an automated system makes dumb decisions, but you can drop in and edit the migrations yourself which you should test first unless you are on a tiny site."
django,32x2i7,Ibuildwebstuff,1 point,Sat Apr 18 12:57:13 2015 UTC,"Ok now replicate those changes across your production, uat and staging servers. Also ensure every developer's local database has been updated in the same way.  But oh no! Disaster has struck and you need to rollback to commit #e529c0 from 3 weeks ago before some bug was introduced. So please return all databases to the exact state they were in when that commit was made.  Managing your database(s) yourself is completely impractical once you're working on anything non-trivial in size."
django,32x2i7,thekingofcrash7,-2,Sun Apr 19 06:44:14 2015 UTC,Wtf is this guy on about haha
django,32x2i7,youlleatitandlikeit,2,Fri Apr 17 21:29:10 2015 UTC,Considering south started out as a third party library it's conceivable that the Django project might eventually include Django-Rest-Framework
django,32x2i7,tyrionlannister,1 point,Fri Apr 17 19:22:29 2015 UTC,"Better support for websockets would be nice..  There are a couple of options with external packages, but they seem mostly like kludges."
django,32x2i7,apreche,10,Sat Apr 18 18:52:27 2015 UTC,"I think there are two main factors inhibiting django.  One is that more and more people are making real-time web applications. Django doesn't do that very well, if at all. Python does it well with things like Tornado, but not Django. The thing is, Django is really really good at web apps that aren't real-time, and most actual sites are not real-time. So while it's not the new hotness, it's still very powerful and useful.  The other thing is that Django is Python. It requires backend development to make things work. Nowadays the popular thing is to just hire people who know JavaScript only, then use something like nodejs so you can have those frontend developers do everything. Then outsource the backend and abstract it as much as possible. Personally I'm not a fan of this, but it is a trend in the industry that is moving people away from Django and similar frameworks."
django,32x2i7,metaphorm,10,Fri Apr 17 17:55:38 2015 UTC,"Nowadays the popular thing is to just hire people who know JavaScript only, then use something like nodejs so you can have those frontend developers do everything.   I don't think this is a real thing. Every web developer already knows JavaScript and probably also one or more backend languages. Where do you even find people who only know Javascript?   Additionally, JavaScript is just a programming language, and an easy to learn language at that. Server-side programming and backend development is a whole skillset and knowledge domain unto itself. Acquiring that skillset and knowledge is a MUCH bigger obstacle than learning the JavaScript language. Node.js doesn't help you at all. If you need a backend developer you can't just decide to use Node and put a frontend dev on it. There are no shortcuts here. If your app requires a backend you need a backend developer (or a full stack dev who is comfortable on the backend)."
django,32x2i7,ApatheticGodzilla,6,Fri Apr 17 20:10:39 2015 UTC,"JavaScript the language is easy to learn. JavaScript the ecosystem is a different matter, it's a morass of frameworks and build tools that's as hard to follow as a Mexican  soap opera."
django,32x2i7,Eurynom0s,1 point,Sat Apr 18 12:44:23 2015 UTC,"Just to play devil's advocate: do you think there's no employers out there who don't get that they need proper backend developers as well to have a secure, functional website?"
django,32x2i7,monotux,2,Sat Apr 18 04:15:42 2015 UTC,[citation needed]
django,32x2i7,pemboa,1 point,Sat Apr 18 07:11:00 2015 UTC,One is that more and more people are making real-time web applications.   This sounds like such a fad that even the terminology is incorrect. It is definitely not a real time application.
django,32x2i7,apreche,1 point,Sat Apr 18 07:15:18 2015 UTC,So true!
django,32wyfv,semigulov,1 point,Fri Apr 17 12:13:01 2015 UTC,"Nice! What kind of data is available?  EDIT: On second glance, it looks like this is not actually worldwide airport data...but rather data for airports that have commercial operations. This unfortunately accounts for a small percentage of the total airports out there, but still useful. Thanks for sharing!"
django,32wyfv,rnevius,0,Fri Apr 17 12:23:03 2015 UTC,thanks for a kind of 'feature request'
django,32wyfv,ahulak,1 point,Fri Apr 17 12:28:11 2015 UTC,"Nice thanks for sharing.. I got to learn about two new django packages because of this post... django-airports, but also django-cities"
django,32zcd0,stolen_loom,1 point,Sat Apr 18 00:07:41 2015 UTC,"I moved from Hostmonster to WebFaction because WebFaction gives you way more options and freedom. I can't say anything about the other companies because I haven't used them, but deploying a Django app on WebFaction is super easy. Even upgrading python/django versions isn't bad if you have a decent way to deploy the application itself. I use git, with some files absent from the repo, so it's pretty quick for me. I just moved from Python 3.3 to 3.4, and Django 1.7 to 1.8 today."
django,32zcd0,cjwelborn,1 point,Sun Apr 19 05:38:16 2015 UTC,I haven't tried 1.8. Have you noticed any differences yet?  I love Django and I love webfaction.
django,32zcd0,cjwelborn,2,Sun Apr 19 05:59:27 2015 UTC,"I switched so I could play with some of the new features (multiple template engines, query expressions, ..) and get a few security fixes. In one of my latest updates I introduced a bug that the manage command warned me about right away, so that was nice. I haven't been able to dig into it yet. I try to keep my laptop environment and server environment as compatible as possible, so I made the switch locally and tested everything  (no major problems going from 1.7 -> 1.8, except debug_toolbar had to be updated), then I made the switch on my server so I can mess around and push the stuff I want to keep to my server. I've been putting it off for a while because last time I upgraded I had a bunch of warnings and errors to fix, but this time it was pretty smooth."
django,32zcd0,andrey_shipilov,1 point,Sun Apr 19 06:10:06 2015 UTC,There could be packages for Py3 only. There could be packages for Py2 only. There are no problems with running Django on Py2.
django,32zcd0,elsjaako,1 point,Mon Apr 20 08:00:24 2015 UTC,"As the others have said, you should just try.  In the ideal case you will have written unit tests, so you can just check to see what doesn't work. I know with many jobs this doesn't happen (the customer doesn't want to pay for it), but if you find problems, write tests for those problems and keep them. That way you can run them every release and prevent at least those problems from happening again.  You should probably also check out https://wiki.python.org/moin/3to2"
django,32zcd0,strycore,0,Sat Apr 18 11:15:48 2015 UTC,Nobody here has the source code for your website except you. What is keeping you from installing Python 2.7 and trying it out yourself?
django,32zcd0,strycore,2,Sat Apr 18 00:41:44 2015 UTC,That's what I've been doing between the time of writing the post and reading your response. I'm looking for opinions from people with experience with both versions.
django,32zcd0,andehpandeh,3,Sat Apr 18 00:54:57 2015 UTC,"It completely depends on the features used in the codebase, some will work on 2 and 3, others will only work with one of those or require the use of a compatibility such as six."
django,32zcd0,YouAreSalty,3,Sat Apr 18 01:04:47 2015 UTC,"Why not use heroku, linode or DigitalOcean?"
django,32xbj7,jeffbaier,1 point,Fri Apr 17 14:19:44 2015 UTC,http://slackatwork.com  http://careers.stackoverflow.com
django,32xbj7,akaTreyT,1 point,Fri Apr 17 15:07:56 2015 UTC,https://djangogigs.com/
django,32xbj7,mbi0,1 point,Fri Apr 17 15:35:19 2015 UTC,hacker news job board.   stack overflow job board ( if its still there).
django,32trxs,arunvr,6,Thu Apr 16 17:27:53 2015 UTC,What are your thoughts on CBV vs just functions?
django,32trxs,maximinus-thrax,2,Fri Apr 17 09:49:53 2015 UTC,"When I had started using Django, views always meant plain functions. So I used to hate class-based views, when they were introduced. Later, I realized that while generic class based views like ListView were cumbersome, the concept of class-based views was superior to using just functions.  Essentially, the problem with view functions are that you can only wrap functions around functions. Parameters tend to grow in real-world view functions until it gets unmanageable. Class-based views are much more easier to parametrize. Add view mixins and you can write very DRY code.  I find myself replacing function-based views with class-based views in my projects even if it is just a class derived from the View base class. Designed properly, it makes it much more reusable and flexible."
django,32trxs,maximinus-thrax,2,Fri Apr 17 13:20:56 2015 UTC,"Thanks for the thoughts.  I must say that for myself, CBV's can be hard to follow in terms of execution flow, and also that they seem to solve a problem that I don't have. If I find myself writing any heavy code in Django, it tends to be in the models.  This could be because I tend to offload a lot of stuff onto Javascript; for example. I never use a ModelForm because I usually handle that in the front-end and then just issue an AJAX call to the server, by which time most of the data has already been sanitized."
django,32trxs,adamrt,5,Fri Apr 17 14:05:10 2015 UTC,"Checkout django-vanilla-views which is by /u/tomchristie (the same guy that does django-rest-framework).  Much nicer and simplified take. I use it for new projects after years with Django's included CBVs.   I never use a ModelForm because I usually handle that in the front-end and then just issue an AJAX call to the server, by which time most of the data has already been sanitized.   Also just a heads up, you should definitely still be using ModelForms (or some form of validation/sanitization). Just because you clean it up on the client side, any one can change that data or manually modify POST/PUT/DELETE requests before sending it to the server. You can't trust client side validation."
django,32trxs,maximinus-thrax,3,Sat Apr 18 05:02:22 2015 UTC,"Thanks for the heads up!  And yes, I do server-side validation as well. In fact I have it set up to auto-generate the javascript validation code from the python model and validation code."
django,32trxs,new2django,3,Sat Apr 18 05:26:35 2015 UTC,How does your book compare to Two Scoops?
django,32trxs,pydanny,8,Thu Apr 16 18:23:16 2015 UTC,"Two Scoops is a very comprehensive book on Django. My book tries to focus on the common Django design patterns and looks at certain broader aspects of development like debugging and legacy code in around 200 pages. While there might be inevitable overlap, I believe we have different styles and approaches. Depending on the reader, one might prefer one over the other.  I hope that my book would be useful to more than just Django developers. It deliberately tries to explain web development concepts say security issues, in a simpler fashion. While this might be already known to a seasoned web developer, I believe there are many Django newbies who are daunted by terms like CRSF and TDD, which I have tried to address using diagrams and references. (Plus, it has a cool sci-fi story)  I believe if my book evokes your interest in Django and wish to go deeper, then I would whole-heartedly recommend 'Two Scoops'.  TLDR; Try my book for patterns and a broader overview, go deep with ""Two Scoops""."
django,32trxs,theMooch,7,Thu Apr 16 18:46:25 2015 UTC,"As one of the authors of Two Scoops of Django I think /u/arunvr/'s description is an excellent comparison. I respect and admire all of Arun's work. Indeed, I am planning to give his book a review this weekend."
django,32trxs,pydanny,5,Thu Apr 16 20:25:08 2015 UTC,"Thanks a lot, Danny. Looking forward to your review."
django,32trxs,Omakara,2,Fri Apr 17 01:41:05 2015 UTC,Did you post this review over the weekend or have you not yet had time? Looking forward to reading it! :-) AND looking forward to Two Scoops 1.8!
django,32trxs,sajithkaimal,3,Tue Apr 21 03:22:30 2015 UTC,No time yet! Trying to get our book out but I'll try to at least skim it this week.
django,32trxs,sajithkaimal,3,Tue Apr 21 16:17:15 2015 UTC,"Hi Arun,  How important do you think is it to get the database structures right? Does the book has any guidelines on how we should structure our database tables (and model fields)?  Thanks"
django,32trxs,JamalKRX,3,Fri Apr 17 07:04:10 2015 UTC,"Hi Omkara, Thanks for the great question. Actually, I devote a lot of space to database design in one of my biggest chapters - Models. I introduce essential database fundamentals, which many skip or find confusing, like Normalization and various normal forms, then explain how it can be translated to Django models with code examples. Later, I explain where various patterns like Model mixins and property fields are used and how they can be effectively applied.  I think Models are more important that most people think. If your models are well designed, the rest of the components like model forms and generic views can be easily derived. They are also used when you run management commands or test scripts. So, I would definitely recommend spending some extra time on model design."
django,32trxs,roaaar,3,Fri Apr 17 07:32:39 2015 UTC,"Good work Arun ""rocks"". How did you make time to write the book given you have a full time job and you are the head of the family (day 1 to the day it got published)? What does your typical day look like?"
django,32v2e7,misingnoglic,3,Thu Apr 16 23:16:48 2015 UTC,"https://github.com/etianen/django-reversion should be a good starting point  When a change is made to a model, it's a new version  One version is live, the rest are not live (e.g. draft)  Have a permission for controlling who can set a version live"
django,32v2e7,ynotna,2,Fri Apr 17 05:55:39 2015 UTC,"Neat question. You'd have to have some way to resolve conflicts, since changes wouldn't cascade until approved. Maybe you could serialize changes made by each admin in custom save methods for each model (with a mixin that checks admin perms), instead of actually performing the action save the serialized format somewhere. Then write an admin interface for deserializing the changes, resolving conflicts, and running them. Maybe that's too complicated; perhaps something leveraging transactions instead?"
django,32v2e7,kangaroomerang,1 point,Fri Apr 17 01:08:50 2015 UTC,"I don't think there's anything built-in, but I've built something like this before. The easiest way would probably be to have two models, Published and Draft; users make changes to a single instance in Draft, the admin reviews the draft, makes any further changes there, then publishes it to Published. You could then use something like django-reversion on the draft model to keep track of changes.  Give the Draft model published = models.ForeignKey(Published, blank=True) so you know if it has been published, and if so which one you need to update. Add a publish method to your Draft.objects manager, to either create a new Published object or update the existing entry.  To expose that in the admin, the easiest way would probably be to add a publish action to the ModelAdmin for Draft (which calls Draft.objects.publish), then override DraftModelAdmin.get_actions to check the user's permission and limit its access to admins only. You can then manage access to the two model admins normally.  You'd also need to handle deletes; the best way would probably be to limit delete permission on Draft to admins only, then have a pre_delete signal listener on Draft which deletes the corresponding Published. You may also want a corresponding listener on Published to unlink published items from their drafts, in case you want to temporarily unpublish something.  The draft table could then also hold meta information which is irrelevant to the published table, such as who the last user to make a change was, when they last edited it, whether the current version has been published etc."
django,32v2e7,radiacnet,1 point,Fri Apr 17 08:59:07 2015 UTC,"We built something like this into our CMS, it's was fairly straight-forward.  You can see the diff for the feature being added here."
django,32uegs,Bealz,8,Thu Apr 16 20:09:04 2015 UTC,"You should really switch off Apache and onto nginx with a uwsgi backend like gunicorn. Apache is extremely heavy weight and not the best engine for Django.   I run said combo, nginx/gunicorn, never had issues."
django,32uegs,never_safe_for_life,3,Fri Apr 17 01:18:04 2015 UTC,I'm also running nginx/gunicorn with a very high throughput on a micro EC2 instance. I've heard performance can be even better with nginx + uWSGI -- gunicorn lacks some of uWSGI's tuning options.
django,32uegs,lebocajb,3,Fri Apr 17 01:31:00 2015 UTC,"uwsgi is extremely more performant and feature rich, however it takes some tuning to get right. gunicorn is hella easy to setup."
django,32uegs,natmaster,3,Fri Apr 17 02:57:43 2015 UTC,"I haven't found a big difference in performance in most cases, but if someone has several projects taking advantage of uWSGI's Emperor mode can make things a lot simpler.   http://uwsgi-docs.readthedocs.org/en/latest/Emperor.html  http://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html"
django,32uegs,huxley1970,3,Fri Apr 17 13:28:05 2015 UTC,This is really the best solution. Apache is practically a dinosaur at this point.
django,32uegs,sli,1 point,Fri Apr 17 02:50:35 2015 UTC,Amateurs tend to say things like that.
django,32uegs,andrey_shipilov,0,Mon Apr 20 08:03:48 2015 UTC,TIL everyone in this thread is an amateur except for you.
django,32uegs,sli,1 point,Tue Apr 21 01:36:52 2015 UTC,"I was talking about Apache only. It could be old as Earth, but it never meant that you cannot scale it, that it cannot run in multiple threads, recompile with memory optimisations, recompile modules and write proper configs.  Nginx is obviously better and load balancing is a matter of seconds, yes. But it doesn't mean that Apache is a bad web server. Amateurs tend to say things like that."
django,32uegs,andrey_shipilov,1 point,Tue Apr 21 01:42:44 2015 UTC,Where did I say any of that? I said Apache is practically a dinosaur at this point and agreed that nginx would probably be better for OP.
django,32uegs,sli,1 point,Tue Apr 21 01:45:31 2015 UTC,The fact that is a dinosaur...   doesn't mean that Apache is a bad web server
django,32uegs,andrey_shipilov,1 point,Tue Apr 21 01:52:04 2015 UTC,"Ok. I'm not sure who you're trying to argue with here, because it's not me."
django,32uegs,sli,1 point,Tue Apr 21 02:53:36 2015 UTC,I'm lost too now :)
django,32uegs,andrey_shipilov,1 point,Tue Apr 21 03:02:25 2015 UTC,"is gunicorn a good option when running several django sites on the same server? from what I've read in the past you have to run each gunicorn daemon as a separate process with a different port and they don't start automatically with the webserver, with apache+wsgi is relatively easy since you only have to add a few lines for each site and it was even easier with fastcgi since it didn't require any changes in the main apache config file"
django,32uegs,Brandhor,1 point,Fri Apr 17 09:58:22 2015 UTC,This is where uWSGI comes in.
django,32uegs,rackmountrambo,1 point,Fri Apr 17 20:29:46 2015 UTC,"Yes, gunicorn is good for running multiple sites.    You're correct, each gunicorn process is its own daemon. To get them to autostart you can use supervisord, which is a standard Pythonic way to do this. You just create a simple config file for each gunicorn process you want and supervisor will handle starting, restarting, and all of that stuff I don't use ports for gunicorn, I use sockets. It's trivial to set up a different socket for each process Finally in nginx you create what are called upstream blocks which point to your gunicorn sockets   Apache may do a few of those steps automatically, but it's at the cost of using an outmoded, bloated piece of software. I believe it is well worth the time to learn the modern way of running a web app: use nginx as a reverse proxy to a uwsgi app server like gunicorn/uwsgi"
django,32uegs,never_safe_for_life,2,Sun Apr 19 04:14:35 2015 UTC,"nginx + gunicorn works best for me , Digital ocean sets this up easily"
django,32uegs,ssg691,1 point,Fri Apr 17 02:47:12 2015 UTC,"to build on this, what I've been doing lately is keeping my gunicorn scripts (prod and dev) local in my project directory and having supervisor run them from within my project. I also keep a copy of the supervisor script in my project. This way if I need to move servers I just pull, move the supervisor script to supervisor's conf folder and I'm ready to rock."
django,32uegs,akaTreyT,2,Fri Apr 17 15:11:35 2015 UTC,"I too would recommend Nginx, but I've used Apache with mod_wsgi successfully as well."
django,32uegs,pemboa,1 point,Fri Apr 17 18:36:00 2015 UTC,"This thread has been linked to from another place on reddit.   [/r/apache] Growing pains with Apache and Django:[xpost r/django]   If you follow any of the above links, respect the rules of reddit and don't vote. (Info / Contact)"
django,32uegs,TotesMessenger,-1,Thu Apr 16 20:26:24 2015 UTC,Are you caching anything? If not you should set up Memcached as it will really reduce the demand on the wsgi workers.
django,32w0k2,mjgcfb,2,Fri Apr 17 04:20:55 2015 UTC,"You should do this using straight SQL. The clue to this is the fact that your required result set doesn't correspond well to Model instances.  The following query (tested in sqlite) gives the answers you want:  select flair, count(flair) from     (select max(timestamp), flair from comments group by username) group by flair;"
django,32w0k2,spookylukey,1 point,Tue Apr 21 15:10:55 2015 UTC,Thanks for the help!  Do you find yourself using raw sql often in your projects?
django,32w0k2,spookylukey,2,Tue Apr 21 15:29:59 2015 UTC,"No, very rarely. However, knowing when you should do so, and give up on Django's ORM, is important.  In some cases I've needed to use SQLAlchemy to construct a query - for cases where you need to build up the SQL dynamically. The library aldjemy is useful in this case. But note that you need to know SQLAlchemy for this to be any help!"
django,32w0k2,dershodan,0,Wed Apr 22 14:22:52 2015 UTC,"I'm trying to count author flairs by the max timestamp   Please rephrase, this makes little sense. What is the expected result?"
django,32w0k2,andrey_shipilov,1 point,Fri Apr 17 08:32:36 2015 UTC,"In my model I can have the following entries    comment_id body body_html timestamp author authorflair_text    1 .... .... 04/17/2015 1:00 am dershodan non presser   2 .... .... 04/17/2015 1:05 am dershodan presser   3 .... .... 04/17/2015 1:06 am mjgcfb non presser   4 .... .... 04/17/2015 1:07 am mjgcfb non presser   5 .... .... 04/17/2015 1:08 am cooldude non presser   6 .... .... 04/17/2015 1:15 am cooldude presser    I want to get a query set that is the count of authorflair_text by distinct author.  However, If an author had two flairs I only want to count the one with the latest timestamp.  My resulting queryset should look like.    Flair Count of Author    non presser 1   presser 2"
django,32w09v,frozensaliva,2,Fri Apr 17 04:18:26 2015 UTC,"Firstly there's an easier way to access reverse ForeignKey relations than the way you're doing it; for example, on line 46 the student's ledgers are already accessible pre-filtered from your Student model, as student.ledger_set.all() (see docs). You could change that to student.ledgers.all() by changing your ForeignKey definition on line 30 to student = models.ForeignKey(Student, related_name=""ledgers"") (see docs)  To answer your question though, you might find that the best way to get started would be to convert the querysets into your own data structure of dicts and lists, then pass it through python's standard json module, eg:  import json from django.core.serializers.json import DjangoJSONEncoder def get_data(request):     students = []     for student in Student.objects.all():         ledgers = []         for ledger in student.ledger_set.all():             ledgers.append({                 ""grade_level"": ledger.grade_level,                 ""tuition_fee"": ledger.tuition_fee,             })         students.append({             ""name"": student.name,             ""ledgers"": ledgers,         })     return HttpResponse(         json.dumps(students, cls=DjangoJSONEncoder),         content_type='application/json',     )   That's a very messy way to do it, and obviously it's incomplete, but it should get you started. To tidy it up you should look at giving each of your models a to_dict method which builds dicts from their data; they would then recursively call to_dict on any related models.  It's also not great because it's building a single large data structure in memory - if you have a lot of records it may be worth looking at how to use generators with python's json module, to avoid building it all in memory first."
django,32w09v,radiacnet,1 point,Fri Apr 17 09:22:38 2015 UTC,"Firstly there's an easier way to access reverse ForeignKey relations than the way you're doing it; for example, on line 46 the student's ledgers are already accessible pre-filtered from your Student model, as student.ledger_set.all() (see docs). You could change that to student.ledgers.all() by changing your ForeignKey definition on line 30 to student = models.ForeignKey(Student, related_name=""ledgers"") (see docs)   Why did I not know about this? T_T"
django,32vra2,ssg691,1 point,Fri Apr 17 02:52:12 2015 UTC,i could override change_list.html but how do i set classes and ids to change the specific css
django,32tvyg,be_haki,3,Thu Apr 16 17:56:33 2015 UTC,I've only ever used it for migrations.  It's highly useful to be able to pull stuff out of your source datebase and migrate it directly into Django.
django,32tvyg,bumblechuckle,2,Thu Apr 16 19:12:11 2015 UTC,"You can use table partitioning and keep the curent data and archive data in separated partitions so the current data table is fast to query.   Archiving would be as easy as ie. obj.update(archive=true) then a db trigger can move the record to the archive partition table.  The archive partition table you can keep in a different tablespace (even on a different physical disk, I have never tried it, however I believe postgres can do this),   also... would it be even faster if you kept the current data in an nosql in-memory storage?  EDIT: In case of table partitioning you don't have to worry about maintaining relationships. From the django's perspective it's gonna be just like a one normal table."
django,32tvyg,_herisson,1 point,Thu Apr 16 20:50:38 2015 UTC,I started with redis to store and manipulate my near real time data but I quickly realized that it's very hard to model complex relations in a nosql db (even when using an object mapper such as rom). So I moved to an in memory sqlite using django's orm with mssql as the archive db.   I'm not resorting to partitions in this case because 1. i don't want to use mssql and this is a constraint for this project and 2. I want to have control over what data is exposed in the archive db (e.g make sure I finished processing it).  P.S I've been a DBA long enough to tell you never to use triggers !
django,32tvyg,_herisson,1 point,Fri Apr 17 06:31:04 2015 UTC,"Thanks. It doesn't have to be a trigger though. :) It can be save/update function override. Is it the way how you deal with archivisation to the secondary db?    ""I want to have control over what data is exposed in the archive db (e.g make sure I finished processing it).""  I believe this still can be done with multilevel partitioning however I'm not experienced in this technique, just my thoughts... Ofc, I agree, the 2 dbs solution makes sense."
django,32tvyg,apreche,1 point,Fri Apr 17 08:48:32 2015 UTC,"Using the multiple databases in django is quite easy, and it should definitely work for your archive purposes. Maintaining relations shouldn't be an issue.   However, depending on your specs, multiple databases might not be the best archive solution. You may be better off archiving to files and storing them somewhere safe and organized. Or perhaps saving the archives in some other type of non-relational database."
django,32tvyg,lebocajb,1 point,Thu Apr 16 20:25:32 2015 UTC,"Yep, I've used Django's multiple db support. It's quite effective. You set a default database, then every transaction you want to run not using that database you run using the ""using"" function. I use it for a management command that imports data from a legacy MySQL database to a production Postgres one."
django,32tvyg,JustJudge,1 point,Fri Apr 17 01:28:20 2015 UTC,"Yup, we use it at work to allow users to access a Django admin, make changes that are then done to both our staging and production databases.   There are some gotchas if you'll be modifying the data via the admin, especially if you're deleting data from both databases."
django,32tvyg,new2django,-2,Fri Apr 17 03:09:51 2015 UTC,I have some experience but I'm no expert.
django,32ummt,nlytnmnt,1 point,Thu Apr 16 21:09:42 2015 UTC,"It looks like you want to subclass the ModelChoiceField and override the label_from_instance function.   From the docs:  from django.forms import ModelChoiceField  class MyModelChoiceField(ModelChoiceField):     def label_from_instance(self, obj):         return ""My Object #%i"" % obj.id   I'd do something like the following:  from django.forms import ModelChoiceField  class MyUserChoiceField(ModelChoiceField):     def label_from_instance(self, obj):         return ""%s %s"" % (obj.first_name, obj.last_name)"
django,32tof3,GnarlyChaplin,2,Thu Apr 16 17:01:36 2015 UTC,"Whereas revision control such as git exists for text files, there's no such thing for databases. A best practice I follow is to treat your main database as the canonical source. Any other copy should consider itself a second class citizen, and be very careful when syncing its data with the source.  This is a hard problem to get right, and I don't recommend this approach at all. What happens if new records are added in both databases, so the primary keys from your LAN copy are invalid?  You say that you don't trust your wifi connection? Then the solution is to use https. If that's not enough, create a ssh tunnel. Public key encryption is the solution to untrusted networks, not database copying/merging.   If you insist on this approach, the best thing I can think to do is write a utility that exports a CSV with new records, then another script that imports into your main database."
django,32tof3,never_safe_for_life,1 point,Fri Apr 17 01:31:17 2015 UTC,"Sorry, by ""don't trust the wifi"" I mean we're worried about internet bandwidth, or even access to internet at all. We're setting up a LAN so we don't have to rely on the venue's internet connection in case it's bad. We already use https, this isn't so much of a privacy/security issue.  And exactly you're right why its difficult. Generally every user's data remains pretty separate, so if a user is at our event they're probably not creating data on the main server, there will probably not be conflicts. But what if they also sign in right after the event? Yep it's tricky.  Django's dumpdata tool exports to JSON, so that's what you're suggesting more or less.  A coworker had a crazy idea of putting a sqlite file or JSON data dumps in git to see if git could sort it out. Could be fun?"
django,32tof3,never_safe_for_life,1 point,Fri Apr 17 02:39:28 2015 UTC,"I see, you're dealing with no internet connectivity.   Have fun with that sqlite/git thing. My developer senses are tingling and saying ""warning!"". But I don't actually know enough to say why, so I can't deter you.   Still, I think your best bet is:   Only accept specific input at events. E.g. users signing up. Write a script that dumps new users to a json file. There's probably a package that already does this like you mention Carefully import them, but do not use something off the shelf! Write your own script that is keyed off a unique identifier, like email address. Then only import users that don't have a match in your main database.  For any conflicts, go the git route of flagging them but not trying to do anything smart. Maybe build a page that shows the two side-by-side   Anyhow, good luck and happy coding!"
django,32rdaj,glucosetracker,1 point,Thu Apr 16 02:27:51 2015 UTC,"Hi,  Where is a tox in your suggestion?"
django,32rdaj,svilgelm,1 point,Thu Apr 16 16:41:14 2015 UTC,My typical is:  myproject ├── bin/ ├── data/ │   ├── csv/ │   ├── fixtures/ │   ├── json/ │   ├── sql/ │   ├── sqlite/ │   └── xml/ ├── docs/ ├── myproject/ │   ├── core/ │   │   ├── ajax/ │   │   ├── management/ │   │   ├── migrations/ │   │   ├── templatetags/ │   │   ├── views/ │   │   ├── models.py │   │   ├── search_indexes.py │   │   ├── urls.py │   │   └── utils.py │   ├── auth.py │   ├── enums.py │   ├── settings.py │   ├── urls.py │   ├── utils.py │   ├── wsgi.py ├── static/ │   ├── css/ │   ├── emails/ │   ├── img/ │   ├── js/ ├── templates/ │   ├── search/ │   │   ├── indexes/ │   │   │   └── std/ │   │   └── search.html │   ├── core/ │   ├── 401.html │   ├── 403.html │   ├── 404.html │   ├── 405.html │   ├── 500.html │   ├── 503.html │   └── template.html ├── tmp/ ├── uploads/ ├── www/ │   └── robots.txt ├── manage.py └── requirements.txt
django,32rdaj,pemboa,1 point,Thu Apr 16 20:21:09 2015 UTC,I prefer something like this:  myproject ├── docs │   ├── api │   │   ├── core.rst │   │   └── index.rst │   ├── _build │   ├── conf.py │   ├── index.rst │   ├── intro.rst │   ├── make.bat │   └── Makefile ├── myproject │   ├── core │   │   ├── __init__.py │   │   ├── models.py │   │   ├── settings │   │   │   ├── __init__.py │   │   │   ├── base.py │   │   │   ├── local.py │   │   │   └── test.py │   │   ├── static │   │   │   ├── css │   │   │   ├── js │   │   │   ├── img │   │   │   │   ├── favicon.ico │   │   │   │   └── logo.png │   │   │   └── less │   │   │       ├── bootstrap │   │   │       └── core.less │   │   ├── templates │   │   │   ├── base.html │   │   │   ├── site.html │   │   │   └── index.html │   │   ├── tests.py │   │   ├── urls.py │   │   └── utils.py │   ├── functional_tests │   │   ├── general_page_tests.py │   │   ├── home_page_tests.py │   │   └── __init__.py │   ├── manage.py │   ├── static │   │   └── media │   │       └── uploads │   └── wsgi.py ├── LICENSE ├── README.rst ├── requirements │   ├── base.txt │   ├── local.txt │   └── test.txt └── wireframes.ep
django,32rdaj,lsd_is_awesome,2,Thu Apr 16 06:33:10 2015 UTC,Shouldn't core be another nested myproject? Isn't that the new default after 1.4?
django,32rdaj,trouble32,2,Thu Apr 16 15:33:58 2015 UTC,"I personally prefer to keep templates in the root, and not in individual apps. But I like your style."
django,32rdaj,pemboa,1 point,Thu Apr 16 20:02:57 2015 UTC,I still don't comprehend the concept of separate requirements files. Sure you don't need to have debugtoolbar installed on production but it just sits there if you don't use it.
django,32rdaj,huyaroo,2,Thu Apr 16 15:10:30 2015 UTC,"Yeah, I used to separate my requirements file as well but found that it wasn't worth the extra effort on all the projects I've worked on so far.  The differences in requirements for each environment would normally be no more than 3 packages."
django,32rdaj,globalnamespace,1 point,Thu Apr 16 17:04:19 2015 UTC,I've found that if I'm running my development environment on windows and deploying on Linux compiled libraries like psycopg2 and uWSGI either won't install from source on the windows or I am installing from a binary package.
django,32rdaj,Ibuildwebstuff,1 point,Thu Apr 16 15:41:25 2015 UTC,Less code means less places for something to go wrong. What if there is a security error in one of your applications you use for development? There is zero benefit of having them in production so why take the chance?  You can have one requirements file import from another anyways so it is not a huge deal. It's not as if you're having to duplicate your entries or keep multiple files updated. Just place development only packages in your local.txt not your base.txt
django,32rdaj,huyaroo,1 point,Thu Apr 16 23:56:40 2015 UTC,"Wouldn't you say that could happen to production dependencies as well? :) I understand what you mean, the less worries the better.  How do you go around managing pip freeze and package updates?"
django,32rdaj,Ibuildwebstuff,5,Fri Apr 17 02:06:18 2015 UTC,"I think the whole pip freeze > requirements.txt is an anti-pattern. When you install something via pip it may have its own dependencies listed in its setup.py, when you do a pip freeze these dependencies are listed as well. I only place my top level dependencies in my requirements files and then let them handle their own dependencies.  To keep my packages up-to-date I use requires.io and pip tools"
django,32s9ag,ramsesthedog,2,Thu Apr 16 08:26:00 2015 UTC,how do you redirect them? I believe that the next variable is set automatically when you enclose a view in a @login_required or @user_pass_test decorator
django,32s9ag,Brandhor,1 point,Thu Apr 16 09:00:01 2015 UTC,"@login_required is what I'm using most of the time. The issue is that, if they haven't signed up yet, they'll click the ""sign up"" link from the login url and I want to redirect them back to the original page once they sign up."
django,32s9ag,svilgelm,2,Thu Apr 16 17:16:25 2015 UTC,"This is my login function:  @csrf.csrf_protect @cache.never_cache def login(request):     auth.logout(request)     redirect_to = request.POST.get('next', request.GET.get('next', '/'))     redirect_to = (redirect_to                    if http.is_safe_url(redirect_to, request.get_host())                    else '/')     form = forms.AuthForm(request.POST or None)     if request.method == 'POST':         if form.is_valid():             auth.login(request, form.user)             if not form.cleaned_data['remember']:                 request.session.set_expiry(0)             return shortcuts.redirect(redirect_to)     return shortcuts.render(request, 'login.html', {'form': form,                                                     'next': redirect_to})   Also the user form:  class BaseUserForm(forms.Form):     email = forms.EmailField(required=True)     password = forms.CharField(widget=forms.PasswordInput, required=True)   class AuthForm(BaseUserForm):     remember = forms.BooleanField(initial=True, required=False)     user = None      def clean(self):         cleaned_data = super(AuthForm, self).clean()         self.user = auth.authenticate(email=cleaned_data.get('email'),                                       password=cleaned_data.get('password'))         if self.user is None:             raise forms.ValidationError(""Wrong email or password."")         elif not self.user.is_active:             raise forms.ValidationError(""The user is not activated."")         return cleaned_data   Ant the 'login.html' templae:  {% extends ""base.html"" %}  {% block content %}     <form method=""post"" action=""{% url 'login' %}"">         {% csrf_token %}         <table>{{ form.as_table }}</table>         <input type=""submit"" value=""login"" />         {% if next %}         <input type=""hidden"" name=""next"" value=""{{ next }}"" />         {% endif %}     </form>     <a href=""{% url 'register' %}"">Or sign up</a> {% endblock %}"
django,32s9ag,signal_trace,5,Thu Apr 16 10:11:03 2015 UTC,"redirect_to = request.POST.get('next', request.GET.get('next', '/'))   This is dangerous, please read. The code is not sanitising the next variable which is provided by user input via the request's query parameters.  Note the following scenario:   User gets sent link by attacker to http://example.com/login/?next=http://not-example.com/login/ Your code sets next to be http://not-example.com/login/ User has successful login which results in the 301 redirect response Due to that, user gets redirected to http://not-example.com/login/ Attacker has made the page that exists there to look exactly like your login page albeit with a ""incorrect username/password message"" designed to mimic a messed up login. User thinks they entered auth details incorrectly and re-enters them. Attacker now has auth details for user and can compromise account on your site.   To remedy this, Django provides a function @ django.utils.http.is_safe_url which returns True when the URL is safe to be used as a redirect; in the case of a False return, you'd simply use a default path to redirect to.  I wrote more on this a while back: ""A word on redirect dangers"". NB: 4 year old article, has been updated to Django 1.6 but extra cases have been added to is_safe_url since then to provide greater security."
django,32s9ag,svilgelm,2,Thu Apr 16 15:50:30 2015 UTC,"Hi, thank you very much, What do you think Is the below code enough?   redirect_to = request.POST.get('next', request.GET.get('next', '/'))  redirect_to = redirect_to if http.is_safe_url(redirect_to, request.get_host()) else '/'"
django,32s9ag,signal_trace,1 point,Thu Apr 16 16:27:25 2015 UTC,"Yes, perfect!  You can also see it in use just like that in the Django codebase itself."
django,32s9ag,svilgelm,2,Thu Apr 16 16:40:57 2015 UTC,"Yep,  It was my first step :)"
django,32ssbx,nsomaru,3,Thu Apr 16 12:46:09 2015 UTC,You'll have to fork the project you are pip installing. First git clone to get the code. Make some migrations in there. Commit them. Push that new fork up to somewhere else. Then use pip install -e to install from the new location.
django,32ssbx,apreche,1 point,Thu Apr 16 13:19:26 2015 UTC,"right, its already been forked and I've been making commits. I'd like to generate the migrations. how?"
django,32ssbx,apreche,2,Thu Apr 16 17:30:56 2015 UTC,"Oh, you have to make a separate project and put this other app into that project directly, not with pip. Then generate migrations as usual."
django,32roiu,theredknight,1 point,Thu Apr 16 04:06:56 2015 UTC,"I don't know of a plugin, but I think it would be fairly easy to parse a simple syntax (one which isn't arbitrarily nestable) and construct the query. Have you worked with Q objects before?"
django,32roiu,user_rx,-1,Thu Apr 16 05:24:21 2015 UTC,"Yeah, I've worked with Q objects. It seems though, that you'd have to use a pretty savvy collection of filters, &s, |s and excludes in order to do what google's syntax is, depending on the logic behind the boolean string. I guess I was curious if anyone had already decoded a boolean string like google's into that logic.    In the meantime, I'm coming up with maybe 30 example queries I'd want to be possible. Will post once I get it finished."
django,32roiu,Ibuildwebstuff,1 point,Thu Apr 16 16:04:13 2015 UTC,Haystack
django,32oqii,Mr_Not_Funny,1 point,Wed Apr 15 14:19:30 2015 UTC,Based on this tutorial
django,32oqii,andrey_shipilov,1 point,Wed Apr 15 14:22:16 2015 UTC,Static root is a directory path. Not just a string.
django,32n1cf,nestedstructure,3,Wed Apr 15 02:28:13 2015 UTC,"As other said, it's better for performance if you don't use tree like structures to store you data.  If you really need this kind of thing, you might want to look into Django MPTT."
django,32n1cf,thibaultj,1 point,Wed Apr 15 06:25:54 2015 UTC,"Thanks, so what are some alternative way of storing nested comment threads?"
django,32n1cf,thibaultj,2,Wed Apr 15 06:30:25 2015 UTC,Have you looked into the link I posted? You should find everything you need there.
django,32n1cf,iBlag,1 point,Wed Apr 15 06:58:26 2015 UTC,"It seems like using tree like structure will run into some performance issue, so I was just curious is there a way to circumvent it? I was thinking of storing the entire structure flat. Also I am dabbling with mptt right now, thanks for the suggestion"
django,32n1cf,thekingofcrash7,2,Wed Apr 15 07:03:47 2015 UTC,"MPTT is likely the wrong data structure for you, because of exactly what you said - adding comments will continuously get slower and slower. You want this one, with a NULLable parent column."
django,32n1cf,issue9mm,2,Wed Apr 15 07:49:38 2015 UTC,"I really want to help you, but im having a hard time understanding the question. It sounds like all you need is this model:  class Comment (models.Model):     # if parent is blank, comment is top level     parent = models.ForeignKey('Comment',                                related_name='children'                                null=True)     text = models.TextField(blank=True)     commenter = models.ForeignKey(User)     created = models.DateTimeField(auto_now_add=True)     last_edited = models.DateTimeField(auto_now=True)      def __repr__(self):         return self.commenter + self.text[:50]   Add a ForeignKey field for whatever the 'target' object of the comment is (like Comment.post).  You can serialize the model django-rest-framework very easily.  Finally, if the 'target' model of the comment could vary (maybe users can comment on Reviews and Products), youll want to look at the ContentType framework.   Sorry if this does nothing to help you, I hate seeing a question with no attempted answers."
django,32n1cf,issue9mm,1 point,Wed Apr 15 04:02:13 2015 UTC,"I also had trouble reading the question, but from my reading, that is the right answer.    The only distinction between whether a comment is a ""comment"" or a ""main comment"" is whether or not it has a parent, so there's plainly no purpose to having them be in separate tables.   The only thing I'd change from your example is, possibly, to stick the 'text' column in its own table, FKd to Comment, so that it didn't slow down paging and such, but that could be avoided by writing careful queries... of course, Django doesn't do careful queries out of the box."
django,32n1cf,Soupinmyfly,1 point,Wed Apr 15 04:24:48 2015 UTC,"So right now my model look like the following  Main_Comment     comment_list = models.ForeignKey(Comment)  Comment     main_parent = models.ForeignKey(Main_Comment)     # the reason for two parent is because some comment has parent as main_comment and some have parent as comment     parent_comment = models.ForeignKey(Comment)     parent_main = models.ForeignKey(Main_Comment)     child_comment = models.ForeignKey(Comment)   its suppose to imitate a tree structure, but I am not sure how to query it"
django,32n1cf,thekingofcrash7,2,Wed Apr 15 05:52:02 2015 UTC,"Yeah, your model needn't have a separate Main_Comment model.  The ""Main_Comment"" can be a ""Comment"" that has a null parent.    Change the Comment model to look like this:   Comment     parent_comment = models.ForeignKey(Comment, null=True, blank=True)     # other stuff, like a TextField, maybe a title CharField, etc.   To get a list of ""main comments"" now, looks like this:      Comment.objects.filter(parent_comment is None)  To get the ""comments"" under a parent, like, in a forum thread, do this:   main_comment = Comment.objects.get(pk=1) child_comments = Comment.comment_set.objects.all() print(""%s :: %s"" % (main_comment.title, main_comment.text)) for comment in child_comments:     print(comment.text)"
django,32n1cf,thekingofcrash7,0,Wed Apr 15 13:33:03 2015 UTC,Lose the main_comment model and just check to. see if parent is empty to determine if a comment is top level.  I'd then query for comments where parent is null to get a list of top level comments.
django,32lpai,DrDima,2,Tue Apr 14 20:10:14 2015 UTC,"Not trying to undermine your using apache for it, however, why apache? I used to use apache back in the day, but have switched everything to nginx and never looked back.  I just wondered if there was a reason for using apache."
django,32lpai,Rodr1c,2,Tue Apr 14 21:46:58 2015 UTC,"My biggest reason for avoiding nginx is documentation.  They do a terrible job of versioning it.  At least they used to.  Once you're in bed with one of them, it takes a compelling reason to train up on a new one.    Edit: Looks like it's still the case.  Here's a good example:   In the modern nginx versions variables $status (1.3.2, 1.2.2), $bytes_sent (1.3.8, 1.2.5), $connection (1.3.8, 1.2.5), $connection_requests (1.3.8, 1.2.5), $msec (1.3.9, 1.2.6), $request_time (1.3.9, 1.2.6), $pipe (1.3.12, 1.2.7), $request_length (1.3.12, 1.2.7), $time_iso8601 (1.3.12, 1.2.7), and $time_local (1.3.12, 1.2.7) are also available as common variables.   Are you kidding me?  Version that for me!  I ain't your maid!  :-)"
django,32lpai,zettabyte,1 point,Tue Apr 14 23:20:59 2015 UTC,"Solid point tbf.  I thought the nginx documents were pretty bad full stop, never mmind the versioning."
django,32lpai,iamwithnail,2,Wed Apr 15 09:11:53 2015 UTC,"I do have multiple django apps even under the same virtualhost on an apache server managed with cpanel  WSGIDaemonProcess app1 user=app1user threads=5 processes=2 WSGIScriptAlias /app1 /path/to/wsgi.py <Location /app1> WSGIApplicationGroup %{GLOBAL} WSGIProcessGroup app1 </Location>  WSGIDaemonProcess app2 user=app2user threads=5 processes=2 WSGIScriptAlias /app2 /path/to/wsgi.py <Location /app2> WSGIApplicationGroup %{GLOBAL} WSGIProcessGroup app2 </Location>   also in wsgi.py add something like  sys.path.insert(0, '/path/to/project')"
django,32lpai,Brandhor,1 point,Tue Apr 14 22:25:10 2015 UTC,Check out this video starting at about 8:20. https://www.youtube.com/watch?v=bmkajH5pEaQ  Its not exactly your setup but it should give you an idea of a way to accomplish what you are trying to do.
django,32lpai,n33ktheg33k,1 point,Tue Apr 14 21:26:50 2015 UTC,"The only practical way of doing this is:  Use virtualenv, and have one for each app.  In your wsgi.py, you need to add   sys.path.insert(0, '<path to project in your virtualenv>')   Then, configure a separate WSGIApplicationGroup in each of your vhost configs in Apache.  This will allow them to co-exist without interference from one another.  EDIT:  In the above code, I referenced the project directory. That is an error. This should be the site-packages directory of your virtualenv, which should already have a .pth file to pull in your project directory. See zettabyte's example below."
django,32lpai,teilo,1 point,Tue Apr 14 22:31:57 2015 UTC,"To further this, from my local dev box.  In Apache 2.4 example.conf:  WSGIDaemonProcess example display-name=example \ user=me group=me \ maximum-requests=1 \ processes=1 threads=25 ... WSGIProcessGroup example WSGIScriptAlias / /workspace/example/wsgi/example.py   And the Python WSGI script:  # WSGI file for Apache.  # Add the virtual environment. import os, site SITE_DIR = os.path.normpath(os.path.join(os.path.dirname(__file__), '../ve/lib/python2.7/site-packages')) site.addsitedir(SITE_DIR)  # Set the Django module. import os os.environ['DJANGO_SETTINGS_MODULE'] = 'project.settings.local'  import django.core.handlers.wsgi application = django.core.handlers.wsgi.WSGIHandler()   Get your project working with a Virtual Environment, then get Apache to use that VE to serve the site."
django,32lpai,zettabyte,1 point,Tue Apr 14 23:36:05 2015 UTC,my vhost config:  <VirtualHost *:80> ServerName mysite.com ServerAlias www.mysite.com  WSGIScriptAlias / /var/www/home/home/wsgi.py WSGIDaemonProcess mysite.com python-path=/var/www/home:/var/www/home/env/lib/python2.7/site-packages WSGIProcessGroup mysite.com  </VirtualHost>  <VirtualHost *:80> ServerName myapp.mysite.com ServerAlias www.myapp.mysite.com  WSGIScriptAlias / /var/www/myapp/myapp/wsgi.py WSGIDaemonProcess myapp.mysite.com python-path=/var/www/myapp:/var/www/myapp/env/lib/python3.4/site-packages WSGIProcessGroup myapp.mysite.com  </VirtualHost>`   the problem right now is it goes to mysite.com virtual host regardless Added the sys.path.insert as well
django,32lpai,pemboa,1 point,Tue Apr 14 23:41:50 2015 UTC,Did you enable named virtual hosts?
django,32lpai,pemboa,1 point,Wed Apr 15 15:51:08 2015 UTC,You don't need virtualenv for this to work.
django,32lpai,teilo,1 point,Wed Apr 15 15:50:32 2015 UTC,"If you don't want your apps sharing the same set of packages, then yes, you most certainly do. mod_wsgi doesn't support virtualenvs. However, virtualenvs allow you to easily setup a separate site-packages dir for each vhost. Then the path hack makes it work."
django,32lpai,ghostdogkure,1 point,Mon May 4 14:47:58 2015 UTC,"I was too late, but this problem was almost certainly from settings file conflicts congrats!"
django,32lpai,Deifyed,0,Wed Apr 15 10:51:54 2015 UTC,"This is not an answer to your question, but have you heard about Dokku? I'm using it to achieve the same outcome.  https://github.com/progrium/dokku"
django,32lqwg,mrinos,1 point,Tue Apr 14 20:21:32 2015 UTC,"First thanks for the reply, but i know this will sound like a dumb question but how do i get the instance from the db?  So I did a quick google search and it said that in modelform the instance is accessible via self.instance so i tried that but now in my update, its not filing in the info for the patient. So im not sure if its the correct way to do this."
django,32jioj,ZedsDed,1 point,Tue Apr 14 08:16:05 2015 UTC,"looks like a problem with the test smtp server, you could use the console backend if it's just for testing"
django,32jioj,Brandhor,1 point,Tue Apr 14 08:55:29 2015 UTC,"its weird, i've tried it with the console backend, the smtp backend with the debuggserver with no luck. The settings were right for that. Then i tried with both the gmail and live smtp servers, the settings were right for that too, with TLS = true, and the PORT set to the correct tls port for the smtp. still no joy. im using the django-registration-redux, which works with python 3 and django 1.7, which is what i have. so this is confusing!"
django,32jioj,Rodeopants,1 point,Tue Apr 14 19:14:56 2015 UTC,"Use these settings:  EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'     EMAIL_HOST = '127.0.0.1' EMAIL_PORT = 1025   Run this command in a terminal window:  python -m smtpd -n -c DebuggingServer localhost:1025   Now start your Django server and do something that should trigger an email. Does anything print out in that terminal window? Apologies if you've already done this, but from your post it's not totally clear that you had the python debug server running (which it is running, even though you're just seeing a blinking cursor) with the proper settings."
django,32jioj,pydry,1 point,Wed Apr 15 00:12:15 2015 UTC,"hey, thanks! yeh i tried this configuration numerous times but to no avail. With django-registration, all you have to do is register through the registration form, that should trigger an email, but it never happens, not with the console/debugging, or the smtp/smtp. Im going to look into django-allauth as an alternative, i've read that its better and more up to date. I've also read that django-registration is no longer being developed and contributed to, but i dont know how true that is!"
django,32hat5,timworx,5,Mon Apr 13 20:13:24 2015 UTC,"Tutorial?  I don't know of any.  But I think you have the design you're looking for.   Form Submit Create new model instance. Start an Asynchronous Celery job, passing the model instance (or PK) as a parameter. Return user to page with PK and possible Javascript-y progress meter. Job progresses, updates are sent to client via AJAX requests. Job completes, updates the model instance.   FYI, I don't know what SSE's are.  Are you looking for Celery Tutorials? AJAX tutorials? It sounds like you're on the right track.  Maybe work backwards?  Get a Job working, then kick one off via a web request, monitor the model instance in a shell, then tie in an AJAX request."
django,32hat5,zettabyte,1 point,Mon Apr 13 20:35:49 2015 UTC,"""SSE"" or Server Side Events are something I came across while researching this. Something like a less complicated version of web sockets for real-time stuff. However, I don't even know about websockets. ha  I found a decent celery tutorial and have started to jump into it - working backwards like you said!"
django,32hat5,iamwithnail,5,Mon Apr 13 22:26:42 2015 UTC,This is a fairly decent tutorial that walks you through Celery and Django.  It's for older Django (1.6 I think) but shouldn't matter too much.   http://www.marinamele.com/2014/02/how-to-install-celery-on-django-and.html
django,32hat5,jairtrejo,3,Mon Apr 13 21:17:10 2015 UTC,This is a nice library for that use case: http://policystat.github.io/jobtastic/
django,32hat5,LibidinousIntent,1 point,Mon Apr 13 21:51:47 2015 UTC,"Oh man, this looks perfect."
django,32hat5,tep616,3,Mon Apr 13 22:29:22 2015 UTC,"A lot of good answers already so I will just chime in with a trick I used for something similar.   I put a status field in the model associated with the task. The celery job updated the field and the user was redirected to the results page, which refreshed on a js timer  until the status was complete. Quick dirty and effective."
django,32hat5,tpugsley,1 point,Tue Apr 14 10:49:39 2015 UTC,I did something just like this utilizing celery and memcache.  I kicked of a celery process that ran on a separate windows server doing file conversions that could take a long time(hour) depending on the file size.  I had the celery worker process update memcache on the linux machine and used jquery/django to read this and display the progress.  I'm not sure if this is what I followed exactly but it gave me the framework to write what I had.  tutorial
django,32hat5,colly_wolly,1 point,Tue Apr 14 02:00:34 2015 UTC,"As a rough idea ... ... Start process (celery) ... Store some process identifier in session cookie ... User goes away, makes coffee, browses around ... User comes back to pre-defined url ... Check session cookie for running task ... Show screen/message to indicate process.  Or the same but with a User login ... check all processes initiated by that user."
django,32hat5,colly_wolly,1 point,Tue Apr 14 08:56:20 2015 UTC,"I have used Celery for this type of thing, but its quite a bit of setup. I read that Huey was a more lightweight alternative when I asked a similar question."
django,32hat5,Bealz,1 point,Tue Apr 28 20:52:07 2015 UTC,"I have used Celery for this type of thing, but its quite a bit of setup. I read that Huey was a more lightweight alternative when I asked a similar question."
django,32hg10,misingnoglic,5,Mon Apr 13 20:50:43 2015 UTC,"I would record the 3 separate parts in 3 different fields: Year, Month and Day, each as a SmallIntegerField, and mark whichever ones you want to be optional as ""null=True"".  This will give you the most flexibility over using the data, such being able to query all events that happen in January and NULL rows won't be returned.  If you make year required, then you can just query for all events of a given year, or year range.  Overall that would make your queries much simpler overall.  If you need to do date arithmetic on the events, such as display how long ago they were, then create a fourth field as a DateField with some sort of approximation for the dates.  In other words, if the month and day isn't known, then just set it as, ""January 1st, 2015"", and then you can always check in your code if the month and/or day fields are NULL so you know it's an approximation."
django,32hg10,Niicodemus,1 point,Mon Apr 13 23:57:11 2015 UTC,"Thank you! I have multiple instances of this problem, is there a way to make my own custom field that consists of 3 SmallIntegerFields, so I don't have too much copy/pasted code?"
django,32hg10,Niicodemus,1 point,Tue Apr 14 00:51:18 2015 UTC,"Sure, just create an Abstract Model then inherit from that Model in all your models that you want the fields added to."
django,32hg10,jef79m,6,Tue Apr 14 02:24:20 2015 UTC,"As developers, we very rarely have dates with models. I'm sure there's a joke there somewhere..."
django,32hg10,ynotna,3,Tue Apr 14 04:18:34 2015 UTC,"Keep the date field so you keep the advantages of validation and date logic/not having to convert for free, and have an accuracy field with choices (day/month/year)"
django,32hg10,jordanreiter,2,Tue Apr 14 05:16:07 2015 UTC,"Shameless plug: here is my implementation, although it was written a while back and could probably stand some improvements/refactoring: https://github.com/JordanReiter/django-flexibledatefield  It stores dates as integers in the format yyyymmdd. This makes it easier to do some in-database calculations (for example getting the date by subtracting two values and dividing by 10000).  It includes a custom object for storing the value as well as a model field and form field. The custom object performs a lot of the same functions as a datetime object."
django,32hppi,Kareck,2,Mon Apr 13 22:02:32 2015 UTC,"Django-nopassword interfaces with twilio, maybe they already have code for this kind of thing that you could borrow"
django,32hppi,thelindsay,1 point,Tue Apr 14 09:01:05 2015 UTC,"I'll look into it, thanks!  Edit: No luck, the code they have implements what I have already working."
django,32hppi,1con-,2,Tue Apr 14 12:05:16 2015 UTC,Can't you just perform this within the done callback?  $('#twilio-form-status').html('Thank you for your interest in our app');
django,32c23q,Baresi,14,Sun Apr 12 14:33:37 2015 UTC,"Here are the slides, if anyone wants to grab them to follow along."
django,32c23q,ubernostrum,3,Sun Apr 12 17:29:30 2015 UTC,"Thanks for the great talk! I've watched a previous incarnation of it, and it is nice to have an up to date one."
django,32c23q,pubcoder,2,Sun Apr 12 18:32:16 2015 UTC,This was a really good talk. Thank you for giving it.
django,32c23q,leosh,2,Tue Apr 14 01:01:20 2015 UTC,This is a really fantastic talk. Thank you James!
django,32dzct,tifuScarePrank,10,Mon Apr 13 00:29:09 2015 UTC,"When it becomes obvious that certain models and behavior can be separated (and should be for readability), then it's usually time to push them into separate apps.  Models are typically the core defining feature of any particular app, so I tend to treat models.py files as special and I also try, if possible, to restrict cross-importing, meaning importing modules from one app into another. In my experience, the more you can separate stuff cleanly, the easier your future work will be.   Anyway, once I realize I can draw a box around a set of models and related behavior and views, then I do it.  Users are a bit special because they get check a lot but the user object is available on the Request."
django,32dzct,erewok,2,Mon Apr 13 02:05:20 2015 UTC,"I find cross importing is hard to fight, so we settled for allowing importing only in certain directions. So the apps on our content layer are not allowed to import stuff from the publishing layer, which in turn is not allowed to import from the services layer, only the other way around (services import from publishing who import from content). It's arbitrary but offers some structure at least."
django,32dzct,brtt3000,1 point,Tue Apr 14 06:14:02 2015 UTC,"Ah, thanks for the comment. It sounds like you've run into the same eventual issues with code messes and circular dependencies."
django,32dzct,erewok,3,Tue Apr 14 13:16:26 2015 UTC,"I will go against the general wisdom here and state that you should be stingy with creating new apps in your project.  I try see apps as ""reusable"".  E.g., a Payments app that is used by an e-commerce Project.  If the functionality you want to ""app-ify"" isn't standalone, then don't separate it.  From the Tutorial:   Projects vs. apps  What’s the difference between a project and an app? An app is a Web application that does something – e.g., a Weblog system, a database of public records or a simple poll app. A project is a collection of configuration and apps for a particular Web site. A project can contain multiple apps. An app can be in multiple projects.     Some folks subscribe to a philosophy of ""every little conceptual thing is an app!  Go hog wild!""  It's way too granular and violates the original intent what an app is.  What's worse is that maintainance sucks (where you have to guess as to where URLs, Views, and Utils landed), and you have to be very careful with your imports (see the .get_model() comment elsewhere).  I would say you have the right philosophy.  Keep things together.  You can namespace within an app if need be.  Organize your views, your models, utils, whatever.  There is no rule that says everything must go within a single views.py and models.py."
django,32dzct,zettabyte,3,Mon Apr 13 20:56:39 2015 UTC,Always put in a separate app if you think you might want to use it in different projects. Just as your blog app could be transplanted to various websites.
django,32dzct,tpugsley,5,Mon Apr 13 09:40:20 2015 UTC,"Hmm, always?  Ideally, each workflow and use cases centered on certain models should be their own app. Payment, purchase, accounts, search, etc."
django,32dzct,Daishiman,2,Mon Apr 13 05:26:07 2015 UTC,The best answer I read is if you can't describe what the app does in one short sentence. It's doing too much. I think it was on a stack exchange post.  Obviously there are always exceptions but I think it is a good rule of thumb to use.
django,32dzct,erroneoustwain,2,Mon Apr 13 06:57:21 2015 UTC,"You should be able to describe the entire purpose of the app in one (or at the very most two) short sentences.  Good:   Allow users to register an account, receive an activation email and activate their account via an activation URL.   Bad:   Allow users to register an account, receive an activation email and activate their account  via an activation URL. Once activated it will handle all authentication (login/logout) and let the user create/update their user profile (including links to external social networks). Implements friend/follower relationships to manage who can view the user's profile once created."
django,32dzct,Ibuildwebstuff,1 point,Mon Apr 13 11:50:15 2015 UTC,"Out of curiosity, for the bad part how would you split that app up?"
django,32dzct,YouAreSalty,1 point,Thu Apr 16 18:44:50 2015 UTC,"I would likely have separate apps for user registration, authentication (login/logout), user profile and user relationships. The management of who can view profiles I wouldn't place in the relationship app but instead use a permissions application with object-level permissions, like rottweiler."
django,32dzct,Ibuildwebstuff,1 point,Thu Apr 16 23:51:26 2015 UTC,keep in mind there are pros and cons. it's good for code organization but does create import issues. get to know models.get_model ... it's a lifesaver.
django,32dzct,jstrong,1 point,Mon Apr 13 19:58:43 2015 UTC,"Lots of good responses, here. I'll add my 2 cents:  The whole app concept is good, but not great. I've been working in Django for over 5 years and never come to a satisfying answer one way or the other on how to use them.   Code organization is important, obviously, but how you do it is up to you. Some of my friends prefer using one app, but splitting things up. E.x. models.py becomes a folder with models/foo.py and models/bar.py.  I like creating lots of apps on the other hand. I find that any discrete chunk of code will invariably add a few random files to the base level of the folder. Examples are context_processors.py, middleware.py, cron_jobs.py, etc. With one big app you build up a lot of these in the root folder. With small apps, you can scan through the folder easily and see what belongs to what.  And on another note, another friend and solid Python developer opines that open source packages fail over time when they re-invent something that the Python language already does, only slightly differently. That's what apps are -- simply python modules that have a models.py in them."
django,32b0dk,jzelinskie,2,Sun Apr 12 04:55:41 2015 UTC,Wagtail has great internals and uses well Django's strengths.
django,32b0dk,cowbellemoo,2,Sun Apr 12 09:21:58 2015 UTC,"I would put a caveat on that to look elsewhere for good testing examples. The Wagtail tests are fine as integration tests, but from initial reading of their code they seem to be lacking any real unittesting."
django,32b0dk,Ibuildwebstuff,2,Mon Apr 13 11:57:17 2015 UTC,Take a look on official Python's website source it's pretty clean and well structured.
django,32b0dk,xdvl,3,Sun Apr 12 16:51:32 2015 UTC,"For a full fledged and well tested project, you might look at djangoproject.com."
django,32b0dk,CleverEagle,2,Sun Apr 12 05:12:05 2015 UTC,"I haven't read it, but I imagine the source for Django Packages is probably pretty good. Its maintainers, /u/pydanny and Audrey Roy (not sure if she's on Reddit), wrote a couple books on best practices in Django."
django,32b0dk,spiffyman,3,Sun Apr 12 05:39:56 2015 UTC,"Ahem... Django Packages has been one of the places where we learned best practices. Often through mistakes. Parts of the code base are not as good as we like.  As for our book, before you get it you might want to know about https://twitter.com/audreyr/status/586663089140936705"
django,32b0dk,pydanny,2,Sun Apr 12 17:24:30 2015 UTC,Good to know. Everyone has those projects.  And I'm surprised/happy to hear about the 1.8 version coming out soon! I'll definitely be picking it up.
django,32b0dk,spiffyman,1 point,Sun Apr 12 21:52:27 2015 UTC,"@audreyr   2015-04-10 22:52 UTC  Thinking of getting Two Scoops of Django? Wait, hold off temporarily! Stop! The ebook and paperback for #twoscoops18 are coming out soon     This message was created by a bot  [Contact creator][Source code]"
django,329ztd,a5myth,9,Sat Apr 11 22:57:07 2015 UTC,Just use Vagrant.
django,329ztd,1con-,1 point,Sun Apr 12 03:00:23 2015 UTC,Can you tell me more about how you use vagrant for django dev on windows? I'm currently in the process of setting up a server with sshfs for my front end dev associate to work on but vagrant might be easier than that.
django,329ztd,enesimo,2,Sun Apr 12 06:12:32 2015 UTC,"I use a single vagrant vm for all my work projects. The Vagrantfile is in my root project folder, so the sharing feature conveniently shares all my projects at once. Then I install virtualenv on the VM (and also virtualenvwrapper) so I can isolate python versions and packages.   In the vagrantfile I use the port forwarding feature to map a whole bunch of ports from 8000 up. Then just ssh into it, activate a virtualenv project and runserver it to one of the ports. I also have postgres and redis and such on the vm.   Originally I planned to have a single Vagrant vm per project but it is annoying to boot each one whenever a task comes up, and so far it's not necessary as os-level dependencies of work projects are nearly identical (the real differences are covered by virtualenv).   I didn't use vagrants fancy provisioning feature. Just installed the few things I needed manually over ssh. But I do make an occasional vm snapshot box via vagrant, handy if you botch it."
django,329ztd,brtt3000,1 point,Sun Apr 12 09:00:24 2015 UTC,"Great, thanks for the breakdown.  Have you had problems with line endings or sym links? Those two are the big reasons I still haven't found a solution that works for my team."
django,329ztd,enesimo,2,Sun Apr 12 09:04:58 2015 UTC,Line endings have never been a problem as long as own code supports both. Sym links we simply don't really use in the project structure itself. I believe virtualenv might set a few on the vm and that all works fine.
django,329ztd,brtt3000,2,Sun Apr 12 09:22:30 2015 UTC,"Install Vagrant and VirtualBox on each developer machine.   Start Windows Command Prompt and navigate to the directory you want to work within. Run this command:   vagrant init hashicorp/precise32  This will create a Vagrantfile within your current working directory. Make sure you open that file and uncomment forwarded_ports. You want the guest port (8000) to forward to 8888. Then run vagrant up.  SSH into your VM (I use PuTTy) using host 127.0.0.1:2222, username and password both being vagrant.  Now that you're in the VM run these commands:  sudo apt-get install python-pip  pip install django   python startproject projectname  python manage.py migrate  python manage.py runserver 0.0.0.0:8000  Go back to your browser and check http://localhost:8888 to see if Django is successfully running."
django,329ztd,1con-,2,Sun Apr 12 20:53:36 2015 UTC,"Well.  Django works.  Django runserver and that extra runserver_plus work. Or, werkerzeug for example... this works too.  PyCharm is great IDE for running and debugging on Windows.   The rest of the stack... SQLite, yes, you guessed it, it works. PostgreSQL... you can set it up on Windows, with EnterpriseDB you even get PL/Python... or, you can set it up on Virtualbox VM... or HyperV VM in case you have Windows 8.1 Proffessional.   Web servers... well. Gunicorn doesn't work on Windows last time I checked. Same for Nginx. Basically I use Windows only for development so I use django's runserver command.   What else do you need? Redis? Works on Windows or can be set up on VM.   My own setup... I write stuff in PyCharm for Windows (the GUI of PyCharm is fastest when ran natively), I test it on Windows, I push it to my VCS on external server, then either I build stuff in Jenkins (which is running on a Linux virtual machine) or I run Ansible (which also runs in a Linux virtual machine). I was using Hyper-V for VMs but switched to VirtualBox because Vagrant makes it very sweet.   How the development compares to Linux? Well, Windows supports my hardware better. I have Thinkpad W530 and I use it with docking station and an external monitor. Recent Ubuntu does not support my hw config properly, mouse cursor blinks, second display has some minor problems, I don't want to fix that. I want something that works. So, I use Windows. On Windows I believe I have a faster, more responsive GUI (at least in PyCharm and Chrome).   And, I would still have to use a staging server, either on external machine or in a VM, so the development is really not that different.   I don't work on layers low enough to justify working just on Linux.   Also, I like to run stuff on another OS, because if anything is written badly (in a non-portable way), it will show itself in tests."
django,329ztd,megadeth9999,1 point,Sun Apr 12 00:06:35 2015 UTC,Dependencies are going to be a hassle. You can always use Hyper-V (vm hypervisor included for free in Windows 8) which works very well and fast. Virtualbox is slower and has less OS integration.
django,329ztd,ionelmc,1 point,Sun Apr 12 00:56:17 2015 UTC,"+1 for Hyper-V. It doesn't have graphics acceleration, so running desktop linuxes (especially resource-heavy ones like Ubuntu) will be noticeably laggy, but for servers it's great."
django,329ztd,Lucretiel,1 point,Sat Apr 18 00:27:50 2015 UTC,"I work on a product built with django 1.4 and python 2.7.9. I use a Mac and it is great, the rest of the team uses windows and as far as I know it works great as well. Our product itself runs on Linux and we use vagrant + virtual box/VMware to run the code on our dev systems. Hope that helps!"
django,329ztd,deviantpdx,1 point,Sun Apr 12 03:45:05 2015 UTC,"I learned how to develop with python/Django on a windows 7 machine for about a year before switching over to Mac. There are a lot of instances where things are made more difficult, especially when it comes to 3rd party packages. But overall there wasn't anything that couldn't be done and the challenges made for interesting learning experiences."
django,329ztd,rcarrigan87,1 point,Sun Apr 12 14:28:32 2015 UTC,"Some things aren't as good (mostly with package's dependencies), but here's my setup working flawlessly: * Python 3, Django 1.8 * Sublime Text 3, Anaconda plugin * Git Bash // most important! * SQLite * Firefox Postgres is running on my test server (Ubuntu) and then a mirrored setup for production."
django,329ztd,Airith,1 point,Thu Apr 16 04:07:46 2015 UTC,"Python on windows is not so bad, but I've found setting up Django to be a pain. Installing other packages is probably bad too. Your best bet if you're tied to a windows machine is probably a virtual box setup."
django,329ztd,AetherGrey,3,Sat Apr 11 23:58:23 2015 UTC,"I agree, any package that depends on any C library is a pain to install  on Windows, you have to look over internet for pre-compiled packages instead of just installing it with pip.  Last time I've tried to code something on Windows I caught myself installing Vagrant to make my life a little easy."
django,329ztd,xdvl,2,Sun Apr 12 00:14:06 2015 UTC,Can you ELI5 on how you use vagrant/windows to this advantage?
django,32b8xy,pwjiwjer,1 point,Sun Apr 12 06:52:06 2015 UTC,Check TEMPLATE_LOADERS setting and try the app and filesystem loaders of the example.
django,32b8xy,brtt3000,1 point,Sun Apr 12 11:19:54 2015 UTC,"Are you using Django 1.8 ? If so, there have been major changes to template system that you have to take into account... Among others, django.template.loaders.filesystem.Loader now expects a DIRSoption to tell it where to look for templates.  See the upgrade guide and the detailed doc of the loader."
django,32b8xy,niconoe,1 point,Sun Apr 12 12:43:00 2015 UTC,"Thanks, So does it mean that TEMPLATE_DIRS is obsolete? Is it best practice to put templates in each of the app and project that you installed?"
django,32b8xy,niconoe,1 point,Sun Apr 12 20:40:45 2015 UTC,"TEMPLATE_DIRS is indeed deprecated. But the upgrade guide I posted above also specify:   During the deprecation period, Django will create a backwards-compatible TEMPLATES based on the TEMPLATE_* settings if you don’t define it yourself.   But given your issues and the possible version mismatches, it would be wise (if you're indeed on 1.8) to rewrite your templates settings the new way.  For your second question, it depends. Generally speaking, the Django philosophy would advise to write re-usable and self-contained apps (also keeping their templates close to the rest of the app, inside the app directory). But in a project, you sometimes have templates that are a bit more global and shared by multiple applications. In that case, it's perfectly acceptable to put them in a global directory, just like you want. Hope this helps!"
django,32b8xy,raydlor,1 point,Sun Apr 12 22:14:35 2015 UTC,Thanks that makes alot of sense. Really appreciated it
django,32anhu,coolstorybro80,3,Sun Apr 12 02:39:20 2015 UTC,"Did you create a migration before you migrated? The manage.py migrate command actually won't do anything unless you make a migration first by either manage.py makemigrations appname (Django 1.7+) or manage.py schemamigration --auto appname migrationname (Django <1.6 + South).  The way migration works is that they have a list of conversion steps (forwards and backwards) in the migrations folder, and Django keeps track of where the database is at. For consistency, it won't automatically make them if you just run migrate, since you may have made an unintentional/inconsequential schema change or may require additional logic in them, like converting data or backing up data from a removed field.  Edit: just read your last sentence. What is the error you're getting, and the version of Django?"
django,32anhu,lovestruckluna,2,Sun Apr 12 03:03:41 2015 UTC,"This is because a ManyToMany fields uses another table to do these mappings.  For example, if you have a Person with Hobbies. Your models would look like this:  class Person(models.Model):     name = models.CharField(max_length=50)     hobbies = models.ManyToManyField(Hobby)  class Hobby(models.Model):     name = models.CharField(max_length=50)   So say you have a Person with:    id name    1 Bob    And you have Hobbies:    id name    1 Running   2 Swimming    If Bob had both of these hobbies, there would be a table that has:    person_id hobby_id    1 1   1 2    TL;DR With a ManyToManyField, you aren't supposed to see a column in the table for your model."
django,32anhu,fizzgorilla,1 point,Sun Apr 12 03:02:39 2015 UTC,"Ok, makes sense and there is a program_program_category with:  program_id category_id  Then question, when i want to add a Program, how do I save the category for the program?  When I try to save a program_category I get an error saying that the field doesn't exist or something along those lines (don't have the error message here)."
django,32anhu,fizzgorilla,2,Sun Apr 12 03:14:49 2015 UTC,"With ManyToManyFields you have to add them after you save your object.  So in my example from above, you would do the following:  running = Hobby.objects.get(name='Running') bob = Person(name='Bob') bob.save() bob.hobbies.add(running)"
django,325zts,platypython,8,Fri Apr 10 21:35:09 2015 UTC,"Hey /r/django! I'm the author. :)  Some backstory (copy/pasted from my thread on /r/learnprogramming/):  I'm a designer who taught myself Python/Django a few years ago to launch a startup. I've always been super frustrated about current programming tutorials, since usually they assume some programming knowledge (throwing around terms like MVC and whatnot) and most Django tutorials, including the official one, don't get to the ""website"" stuff and templates until the very end or not at all.  I've been working on a beginner web app development book for the last year and it's finally coming out next month on May 4th: Hello Web App  Some of the things I tried to do differently:   The first thing you do is set up static files and templates, so you can see the web app as an actual website before jumping into databases and models. Anything that isn't crucial to know starting out, I don't mention to keep things simple. I'm hoping to help people launch a web app as fast as possible, even if there is a bit of ""hand-waving"" magic going on during. Learn by doing! (Also the motto of my alma mater.) The tutorial isn't anything specific, like making a polling app. You made a ""collection of things"" which you're encouraged to update to what you want to build (a blog is a collection of posts, a store is a collection of products, a directory is a collection of people... etc.) Hoping adding creativity will help the material stick. Includes deployment on Heroku, which honestly was the hardest chapter to write. I ended up making my own deployment package to make it easier: https://github.com/hellowebapp/hellowebapp-deploy Added (and continuing to add) a bunch of additional help and instructions on a public GitHub repo: https://github.com/hellowebapp/hellowebapp   Also, the whole book was laid out and designed by me as well, which was a really fun process.   Website: http://hellowebapp.com  Happy to answer any questions and would love to know what everyone thinks — like ways to improve the website, recommendations for the book (yay for self-publishing, I can easily make a new edition), places I can share this with... anything appreciated. Thanks!"
django,325zts,limedaring,2,Fri Apr 10 22:31:25 2015 UTC,Glad to see this cross posted from HN. B-)
django,325zts,rnevius,1 point,Sat Apr 11 04:25:44 2015 UTC,"I ordered a copy during the kickstarter so I've already read it. It's really well done. I finally wrapped my head around django, after a long time of trying. I'd recommend it."
django,325zts,damontoo,9,Fri Apr 10 21:36:01 2015 UTC,What's your relationship to the author of this book?
django,325zts,limedaring,3,Sat Apr 11 00:11:53 2015 UTC,"I have no relationship, just bought the book via kickstarter and followed its progress."
django,325zts,damontoo,3,Sat Apr 11 00:23:16 2015 UTC,"Also, he emailed me to let me know that he was posting here, which is why I popped in so quickly. :)"
django,325zts,limedaring,2,Sat Apr 11 00:58:20 2015 UTC,Ah. Alright. I saw your copypasta followed him between subs which seemed fishy.
django,325zts,limedaring,1 point,Sat Apr 11 01:30:34 2015 UTC,I panicked and grabbed what I wrote from /r/learnprogramming since it had all the relevant details already. :)
django,325zts,issue9mm,1 point,Sat Apr 11 01:33:41 2015 UTC,Thanks for posting! <3
django,325zts,darcoder,2,Fri Apr 10 22:31:02 2015 UTC,"Not to get too much into the ""Appeal to Authority"" here, but for those of you questioning the author's credentials, it's worth noting that this is limedaring.  She isn't jresig, mind you, but she is pretty active in the community, and you can see other examples of her writing here:    https://packaging.python.org/en/latest/   and samples of her code, here:   https://github.com/limedaring  I too was wondering why I would care about some random book, but since I recognized the name, and realize that not everyone would, I thought it worthwhile to at least pop in and mention that this isn't just some random person."
django,325zts,issue9mm,2,Sat Apr 11 06:33:32 2015 UTC,"I've pre-ordered the book because I believe in authors and more tutorials.  However, the author's open source contributions are minimal. For example, in packaging.python.org what was contributed is entirely related to style of code, not content:   https://github.com/pypa/python-packaging-user-guide/commit/92e372e7ec990b9adfddd9dc69304c453334f2ec https://github.com/pypa/python-packaging-user-guide/commit/c4b7935e6b297de6a555ece26bfbcbe446331e85"
django,325zts,darcoder,2,Sat Apr 11 18:23:33 2015 UTC,"Either you read me wrong, or I spoke poorly.    I wasn't saying ""This is a big name that you'd know if you follow open source"", I was saying ""This is NOT a big name, but still is a quality Django developer despite her limited exposure.""  I posted the code samples not to illustrate her open source involvement, but to illustrate the quality of the code for those who are capable of evaluating it, as that could indeed bear on the quality of the book.    That said, I don't have any ties to limedaring, so it's a passive endorsement at best."
django,325zts,rnevius,0,Sun Apr 12 01:26:44 2015 UTC,Download link?
django,325mzv,g-money-cheats,1 point,Fri Apr 10 19:55:25 2015 UTC,"The problem with this is that some service functions don't fit nicely in one app because they interact with models from several apps.   Not really a problem, is it? More like one of your app has a dependency on another app."
django,325mzv,cmsimike,1 point,Fri Apr 10 21:34:21 2015 UTC,"And if you have a bunch of functions or business logic that hits things across your whole domain then maybe those things need to live in their own app?  It's not like you're paying by the app. I'm about 2/3rds of the way through a pretty big rebuild of an extant system from .NET into Django. We have a couple dozen apps. Some of them handle a specific set of functionality - like that relating to the application process to get into our program. Some handle the workflow needs of a specific set of users, needs that touch things all over the rest of the system. A few handle abstract behavior (like how we're logging things) that get inherited all over the place.  At the very start of the project last winter when we were beginning to think things through, we were pondering choices like you were. Watching this video helped get our heads back in the right space a lot."
django,325mzv,snarkhunter,1 point,Fri Apr 10 22:43:22 2015 UTC,"A good pattern can be to have two app-directories, apps, and libs, parallell to each other. apps contains anything user-facing, and libs provides libraries that contain abstractions of concepts.   Two apps in apps may never call each other, period. If something needs to be shared, it goes into libs.  An app in libs can provide a services.py if it makes sense for the pattern. Other variations may be appropriate depending on the case. But never access models directly from other apps.  Now the only question that remains is, can two apps in libs call each other? Well, sure, if you have two different concepts abstracted into two apps, but both of those concepts are interdependent on each other for your business/organization/project, then that is your reality. But as a general rule, you should of course avoid it and try to isolate them."
django,325mzv,thnee,1 point,Sat Apr 11 10:58:16 2015 UTC,That's not services at all. A service is a separate application running on its own servers with its own database etc.
django,325mzv,ivix,0,Fri Apr 10 22:45:01 2015 UTC,"Service layer, business layer, business-logic layer, you know what I mean."
django,325mzv,thnee,0,Fri Apr 10 23:08:18 2015 UTC,"You are thinking about the design pattern Micro Services. But that design pattern does not have a monopoly on the word ""service""."
django,3243y6,shabda,1 point,Fri Apr 10 12:40:08 2015 UTC,"Maybe you should have made this more generic, as I could use something similar for Mailgun"
django,3243y6,pemboa,2,Fri Apr 10 15:47:42 2015 UTC,"Yeah, we plan to add it and make it more generic. Have to start with one."
django,3243y6,pemboa,1 point,Fri Apr 10 16:36:22 2015 UTC,Won't the project name make that a bit troublesome?
django,3243y6,vangale,1 point,Fri Apr 10 17:06:21 2015 UTC,"Indeed, but I can start a new project. :)  My philosophy is that starting from specific and then generalising leads to better design than starting from general case and adding specific things."
django,3243y6,vangale,1 point,Fri Apr 10 17:14:40 2015 UTC,I would also like a package that is more portable between services. In the meantime maybe this will work for mailgun https://github.com/hedberg/django-mailgun-incoming (haven't used it so can't vouch for quality).
django,323aos,fedzz,2,Fri Apr 10 05:55:18 2015 UTC,"good write-up, saved!"
django,323aos,ynotna,1 point,Fri Apr 10 11:18:19 2015 UTC,"Great post, specially on a topic that's asked too often in python-social-auth. If you don't mind, I've linked it from the python-social-auth docs."
django,323aos,omab,1 point,Fri Apr 10 16:07:08 2015 UTC,"Sure!! But be aware that it's my solution and it's not tested or anything and may not follow rigorous practices, but it works and it's a good starting point for similar projects. Thanks!!"
django,323aos,jeffbaier,1 point,Fri Apr 10 16:35:53 2015 UTC,Very well written post. I like your solution to the third party auth for APIs. Also liked how you had a simple example project and walked through all the steps.   One suggested edit: I think you forgot the step to edit your beer model to include the 'owner' foreign key to user. You talk about editing the api views to filter by owner but its not part of the model.
django,323aos,akaTreyT,2,Fri Apr 10 18:12:54 2015 UTC,Thanks! Edited :)
django,323aos,akaTreyT,1 point,Fri Apr 10 18:25:58 2015 UTC,"Found a few issues:   users/views.py should be beers/views.py When you edit beers/models.py to add  owner = models.ForeignKey('auth.User', related_name=""beers"")  you don't migrate the db afterwads.  url(r'^users/', include('users.urls')), is added to beerstash/urls.py before the app is created, which causes an error and http://localhost:8000/o/applications/ gives me error 404, The current URL, accounts/login/, didn't match any of these.  Page not found (404) Request Method: GET Request URL:    http://localhost:8000/accounts/login/?next=/o/applications/ Using the URLconf defined in beerstash.urls, Django tried these URL patterns, in this order: admin/ beers/ admin/ users/ o/ The current URL, accounts/login/, didn't match any of these.           My code is posted here, so any help that you can give in solving this would be appreciated.  https://github.com/akatreyt/DjangoSocialOAuth  But this is a great writeup and will help tremendously.   Edit:  might of also forgot url('', include('social.apps.django_app.urls', namespace='social')) in beer stash/urls.py ?"
django,323aos,akaTreyT,1 point,Fri Apr 10 20:42:03 2015 UTC,"fixed my 404 issues, user must be logged in. oops. :)"
django,323aos,akaTreyT,1 point,Fri Apr 10 20:45:20 2015 UTC,Thanks a lot!!! I'll fix them up! I've coded the app first before writing this so yeah there might be a few mistakes.
django,323aos,akaTreyT,1 point,Fri Apr 10 21:46:23 2015 UTC,"without that line I get 'social' is not a registered namespace.   But I have updated my code on github. I still get, with that url line, 400 for Facebook and 403 for twitter. If you have time to pull and take a look / fix whatever I missed that would be great."
django,323aos,akaTreyT,1 point,Fri Apr 10 21:55:01 2015 UTC,Is everything working as expected now?
django,323dot,KayEss,4,Fri Apr 10 06:32:46 2015 UTC,"I found this article very frustrating. It makes a number of claims, but doesn't provide any detail to allow me to understand what the author is actually complainging about.   The biggest change in 1.7 was the alteration of Django's transaction handling.   How did it change?   [...] it seems to me that the defaults for new projects are still broken and unsafe [...]   What is unsafe about the defaults?   This unsafe-by-default behaviour is compounded by the difficulty of testing transactions in Django   Why is this difficult? An example would be useful."
django,323dot,Citrauq,1 point,Fri Apr 10 17:45:48 2015 UTC,"the behaviour you get would be what you'd probably expect   Expect from what? Other systems I've used left the transactions completely up to the developer, I was happy that Django was willing to help at all with it."
django,323dot,pemboa,-1,Fri Apr 10 14:19:11 2015 UTC,Good general critique about the default behaviour of Django transactions and feasibility of automated testing.
django,3229dw,akaTreyT,5,Fri Apr 10 00:12:10 2015 UTC,Yep!
django,3229dw,martolini,1 point,Fri Apr 10 00:25:53 2015 UTC,Awesome thanks!!
django,3229dw,bennylope,3,Fri Apr 10 00:52:09 2015 UTC,"There was a blog post from Digital Ocean about deploying Django WSGI servers last month.  If you've never set up a server like this before, my advice is to try doing it ""manually"" the first time, and then automate it from there on out. You can use Fabric and Cuisine to do this or a full configuration management tool like Puppet or Ansible. I prefer using Ansible myself. Strictly speaking such tools aren't necessary for simple deployments, but they make it much easier to test out what you're doing, make changes, and know what's set up and how. And yes, even on a single server!"
django,3229dw,cediddi,1 point,Fri Apr 10 01:00:15 2015 UTC,heard of Fabric and Ansible. Once I'm more familiar will definitely check those out.
django,3229dw,metaphorm,1 point,Fri Apr 10 19:14:58 2015 UTC,"I got a fabric script, a nooby one but it works. First you setup server, then you create domain. It's not for production but you can get an idea of what fabric looks like in a django setup.  https://github.com/Cediddi/common-scripts/tree/master/do_server_setup"
django,3229dw,kmmbvnr,3,Fri Apr 10 19:29:16 2015 UTC,"12 factor app  this isn't specific to django, but its one of the best guides I've yet encountered dealing with this topic."
django,323396,bryantee,1 point,Fri Apr 10 04:32:00 2015 UTC,Just like anything else...Pass the model instances to your view's context and render them in your template?
django,323396,rnevius,1 point,Fri Apr 10 05:27:25 2015 UTC,"what's your actual question? please be more specific. the way you've phrased the question now the only answer I can give is ""write some code"". If you'd like a better answer, please ask a better question."
django,323396,metaphorm,1 point,Fri Apr 10 09:02:24 2015 UTC,Yeah sorry. I mean how might my template language look in terms of logic? Would Bootstrap be a good fit for something like this?
django,323396,jpozzed,1 point,Fri Apr 10 14:25:59 2015 UTC,I suggest going through the polls tutorial.  See the view and template code in the link below.  You need to get a list of objects (questions/cards/whatever) in your view and then loop through them in the template.  You can wrap the loop/objects in whatever html you want.  Bootstrap is fine.  https://docs.djangoproject.com/en/1.8/intro/tutorial03/
django,323396,kangaroomerang,1 point,Fri Apr 10 19:09:43 2015 UTC,"You might enjoy http://materializecss.com/ instead of bootstrap, though it is less battle tested."
django,3228dv,Ngenator,2,Fri Apr 10 00:03:57 2015 UTC,Needs to be a string  def __unicode__(self):     return unicode(self.user)  def __str__(self):     return str(self.user)
django,3228dv,garfonzo,1 point,Fri Apr 10 00:19:17 2015 UTC,"Hey there Ngenator, as I said below I'm just returning home. I will try what you suggested also (as /u/garfonzo made a suggestion also) and update you also.  And thank you a ton for taking the time to respond, I really appreciate it!  edit Tried your method first and it worked! Thank you!"
django,3228dv,garfonzo,2,Fri Apr 10 00:37:57 2015 UTC,"You're returning the built in Django user with return self.user  Change that to return self.user.username and it'll return the username. Or return self.user.first_name  The error is telling you it's expecting to show a string, but you're trying to return a user object"
django,320lfy,psycojoker,9,Thu Apr 9 16:51:25 2015 UTC,I don't understand the point of this. this functionality is already in django as part of the View class.  https://docs.djangoproject.com/en/1.8/topics/class-based-views/intro/  I can understand wanting to avoid the (in my opinion) overly complicated generic class based views. Its very possible to just inherit from the base View class and not use the generics or mixins. that gets you the http verb based dispatch for free with no additional complexity.   source code for reference:  https://github.com/django/django/blob/master/django/views/generic/base.py#L28
django,320lfy,metaphorm,2,Thu Apr 9 17:10:12 2015 UTC,You can also do basically the same thing automagically in Django Rest Framework with Routers and you also get all of the benefits of a fantastic API framework.
django,31ypzx,garfonzo,3,Thu Apr 9 04:51:22 2015 UTC,"Do keep in mind that going from standard Django to Django Rest Framework + AngularJS or something similar will mean a complete rewrite of the app: entirely new templates, views/forms rewritten as a rest API. About the only part you can keep is the models.  Although I haven't done something similar, I am sort of regretting not going the same route now. I have a large app that has grown over two years, and recently it was decided to give it a visual look update and some ajaxification to make it react ""faster"" in the client.  A full rewrite seemed to be too expensive, so I decided to go half way: render page components as HTML snippets on the server side, load these with ajax from the client, and swap them into an existing HTML page with jQuery.  In the end, the result was a huge mess of unorganised javascript with random bugs here and there. I would guess that the update took longer in the end than actually learning AngularJS and doing it properly.  Random jQuery will be fine if it's just a few small animated details on a page. But if you want to have client-side navigation between pages, forms and data entry, then do make use of some modern client-side Javascript framework like Angular."
django,31ypzx,lehmakook,2,Thu Apr 9 12:15:33 2015 UTC,"This is kind of my situation - a large web application that has grown over the last couple of years and, because of random ""half-way"" updates, the site is a bit of a mess code-wise. Visually, it's not bad, but it could use an update to modern standards. I'm also both aware that going to REST+Angular would mean an almost complete re-write, and quite excited at the opportunity for the upgrade and excited to learn a new framework.  I'm in a fortunate situation that the business that uses this web app has a significant seasonality to it and they just entered their season. Our rule is, once the season starts, there are no code updates to the production server. Also, we're do for a new server.   So I'm thinking, ""ok, we need a new server and I have a lot of time on my hands before I'm even allowed to push code to the production server"". I might as well take advantage of this ""down time"" to attack this beast of an upgrade. I feel like a lot of the views/templates I have now are redundant and that a lot of the logic that was used to implement the web application a few years back could be far better. So, it'll be a logic + visual update I suppose.  I also don't want to jump into this project thinking I can go it half way. If, as you mention, it's better to go all in knowing it'll be an almost full re-write, then so be it."
django,31ypzx,codekoala,2,Thu Apr 9 13:25:04 2015 UTC,"Having a restful api will open the doors for just about anything to spice up your site, be it angular, jquery, extjs, knockout, polymer, wx, qt, gtk, etc, etc."
django,31ypzx,cediddi,2,Thu Apr 9 08:31:30 2015 UTC,"And mobile development, that's a very very important door nowadays."
django,31ypzx,pemboa,2,Fri Apr 10 19:38:52 2015 UTC,Is there a solid business case? Or do you just want to play with AngularJS?
django,31ypzx,pemboa,1 point,Thu Apr 9 20:19:08 2015 UTC,"Well, whether there's a solid business case might vary, depending on who's asking. From my perspective (the original developer, and current maintainer) I see the code and spot the weaknesses and see where it could fail. It's working, and things are moving along daily in the business, but I can see how maintenance will slowly just get more and more cumbersome. There are areas of code that I look at and shake my head given its unnecessary complexity and inefficiency. It could be so much better!  From the users and management's perspective, they know that some areas are slow to load, some areas are clunky to use, but overall, their feelings are ""it works for our purposes"". I think their position is ""meh, it's fine"".  So from my perspective, yes, I think there's a solid business case. And perhaps as the head of IT I should just make the call that ""yes, we're devoting time to this"". I just want to ensure that I'm making an educated decision."
django,31ypzx,pemboa,1 point,Thu Apr 9 20:27:53 2015 UTC,"You've described ""bit rot"" and why the application might be due for major maintenance or a rewrite, but you haven't really explained why to completely re-architecture and use AngularJS though."
django,31ypzx,cediddi,1 point,Thu Apr 9 20:56:24 2015 UTC,"Well, perhaps I'm being a bit romantic with the idea of using AngularJS. Maybe it's not what I'm actually looking for and maybe all I really need is a rewrite, using the current architecture but with a focus on efficiency, scalability (this company is growing!), and maintainability.  My main concerns with the current state of the app are those three things: efficiency, scalability, and maintainability. Looking at how to go about resolving these issues, it feels like the best approach is to do a massive re-write of the code (with the exception of the models, with I feel are fine). Refactoring old code, I believe, would take just as much time, if not more, than doing a ""clean start"" so to speak mainly because I want to tackle so many different areas. So if I'm doing a ""restart"" of the code, this might be a good time to look at a different architecture which, by nature, could solve some of the above noted issues. My research lead me to AngularJS, and hence the question posted here.   From my understanding, AngularJS provides a framework on which large enterprise web applications can be built. AngularJS provides a ""real time"" feel to a web page, making the interaction with data far more tangible. The goal of my web app is to make a web page feel like you're using a stand alone application you might install on your computer. There's an immense amount of data to be displayed and managed, and interacting with the data can be complicated for the user, especially when there's lag due to page loads and page refreshes. I feel like AngularJS would give me a platform where I could present data to the users efficiently, and allow them to manipulate the data in real time, and provide an overall better user experience.   Having said all that, I do feel that I might be able to solve these three main issues with the current architecture and a heavier reliance on jQuery and ajaxification. However I worry that I'm simply repairing a leaking pipe with a whole bunch of bandaids (lots of jQuery work) rather than just replacing the pipe itself (by going with AngularJS). If continuing with Django+jQuery (current architecture) is in fact the best solution, then I'm happy to go that route. I just want to ensure I'm making the right decision at a juncture where switching architecture is easy, rather than later when a switch is nearly impossible.  That's where I'm coming from and you're quite right to question my rationale for replacing the current architecture with something else. I'm glad you're pushing the question, because I'm not sure myself. I'm still researching/thinking. You're helping me think through the decision at a more logic, rather than idealistic, level."
django,31ypzx,pydry,1 point,Thu Apr 9 22:16:07 2015 UTC,"I'm not saying AngularJS won't work, and if there's no cost to the time, then sure go for it. Bust AngularJS is mostly about doing more (all?) of the UI work client side. It's not really going to fix slower queries, for example."
django,31ypzx,pydry,2,Fri Apr 10 02:25:49 2015 UTC,"That's absolutely true that AngularJS won't fix slow queries. In any event, thanks for the thought exercise :)"
django,31ypzx,codekoala,1 point,Fri Apr 10 03:18:28 2015 UTC,"It won't fix slow queries but! It can fix the slow templating. Also yesterday there was the library, serpy, in /r/django , it says it's very fast compared to DRF's serializer. This may also speed up views. So yeah, AngularJS with DRF might solve templating and view slowdowns."
django,31ypzx,codekoala,1 point,Fri Apr 10 19:37:21 2015 UTC,"That looks interesting. Might be a good combo, serpy+AngularJS"
django,31ypzx,codekoala,1 point,Fri Apr 10 19:42:54 2015 UTC,"I'm wondering if anybody has done this. Would this be a good strategy, or am I adding unnecessary complications to my already complex web application?   I would say so. I would generally prefer to go the other way.  If you want to make your website speedier, there are probably a few much lower investment ways to do so."
django,31ypzx,istinspring,1 point,Thu Apr 9 13:44:46 2015 UTC,"I would say so.   You would say it's a good strategy, or you would say I am adding unnecessary complications?  My main goal isn't speed (though speed will be a nice side effect), it's overall user experience. Making the whole web app a far snappier experience, using the ""single page app"" design idea. There are a lot of areas in our web app where this design style could be put to very effective use."
django,31ypzx,cediddi,1 point,Thu Apr 9 14:11:21 2015 UTC,"Snappier = speed!  I would say that this is adding unnecessary complication. I also generally prefer the UX of plain old web apps because they usually behave in a more predictable way. No ""broken back buttons"", etc.  I gave an example here of a core UX principle that is frequently violated in the 'one page app' model:  https://www.reddit.com/r/django/comments/2xjnhy/why_use_an_endless_pagination_plugin/cp0s288?context=3  I used a cinema booking website the other day build on angular.js that was anything but snappy, thanks mainly to its heavy images (with no effort to make their loading more efficient, curiously). Oh, and if it didn't finish loading on my flaky mobile internet, it didn't show the name of the movie, it just showed {{ movie.name }}. Great user experience, right? They swallowed the angular koolaid pretty hard.  These things are all possible to fix, but unless you've got massive amounts of time & resources to throw at it, or your app is heavily dependent upon it (e.g. your core product is maps), the chances are the benefits of the one-page model aren't really worth the drawbacks.  Ask your users what they want, instead. Do that."
django,31ypzx,istinspring,1 point,Thu Apr 9 15:19:24 2015 UTC,"I quite agree that a massive, single page application, would be brutal for a large web application. I had planned to separate the web application into logical chunks, and make those areas (largely) single page applications. For example, I make the ""invoice"" area a single page application. The user could edit the invoice, add items, remove items, etc. all from the single page. Instead, right now, there's a lot of ""click here to add a new item"" and the page refreshes, or ""click here to remove this line item"" and the page refreshes. That kind of thing. Certainly there are other areas that would take advantage of the SPA mentality a lot better, this is just an example.   The users generally take my lead on how to design the software. I'm often getting their input as to how they'd like the logic to flow, but then it's up to me to make it ""work well""."
django,31ypzx,cediddi,1 point,Thu Apr 9 20:37:58 2015 UTC,"OK, now that I have a bit more time on my hands than I had earlier, I'll share a little more about my personal experience doing essentially the same thing with a rather large in-house project over the past three years.  It started out as your classic site rendered using django templates with JavaScript sprinkled here and there. As the project continued to grow, JavaScript became ""necessary"" for more and more critical portions of the ui. We started using basic jquery stuff, then trying out angular when things with jquery just became too bothersome.  Eventually, we decided that angular was still too bothersome and ill-suited for what we were trying to build. After a little experimentation with various frameworks, we landed on extjs.  At first, we just replaced very specific pieces of the ui with the more advanced extjs. It worked well, and it was well-received by the users. That eventually lead to buy-in from higher ups to redo the entire ui with extjs. It took a good amount of time and effort to rebuild the django-rendered pages using extjs, but it proved to be a very rewarding transition.  We finally removed all django views and templates about a year ago. Since then, I'm convinced the ui has been far easier to extend and enhance than a similar ui rendered using django views and templates ever could have been. I would absolutely prefer to write Python or whatever instead of JavaScript, but that's what whole ""right tool for the job"" discussion.  One key difference between what you're facing (from what I understand) and my situation is that I started building a restful api into the django project from day 1. I knew I'd have to integrate it with other tools, so a good api was a given.  All of the backend processes for this project have always used that api to access and manipulate data in the database; never have they had a direct link into the database. This design gave me the confidence I needed to bite the JS-powered ui bullet without much to worry about, knowing that the api was already fully functional and capable. Newer members to the project have complained about not having direct database access in backend processes. Naturally, that would be more convenient, but I would absolutely take this path again on future projects.  So, my advice would be to gradually replace parts of your ui with angular or whatever framework strikes your fancy today. Lay the groundwork for a generic, powerful restful api. See how those smaller changes are received by your users. Then decide how to move forward from there."
django,31ypzx,istinspring,1 point,Thu Apr 9 23:49:10 2015 UTC,"This is great to hear. The only difference (from what I'm reading) between my scenario and yours is that you built a solid API from the start. I, however, have not. I would be starting with nothing more than a MySQL DB and a whole bunch of model.py files. I would need to build that API as well as the new client side stuff.  What I like about your story is that you've mentioned that since removing all the Django views and templates, the UI has been in a better position to move forward and extend. This is basically what I'm after. A better UX, but also a better platform that I can extend in the future, giving me options down the road.   I'm curious, if you were to make that same decision today (ExtJS vs AngularJS) would you still go with ExtJS or would AngularJS (now version 2 I think?) be a stronger candidate?"
django,31ypzx,KayEss,1 point,Fri Apr 10 03:23:24 2015 UTC,"Quite honestly, my experience with angular is such that I probably wouldn't choose it again for much of anything. But my experience with it is also limited and very outdated. Don't let me deter you from exploring it if it seems useful for your project. I'm sure it's capable of great things.  If I had to do it all over again with my project, I most likely would choose extjs for the ui again. It's built to be more of a desktop-like application than a web page, and extjs handles that niche quite well. If I had to choose something for a different, more web-y project I would probably give polymer a serious look. I like what I've read about it and how reusable and encapsulated the components are. If extjs weren't an option for my current project, polymer would probably be what I would spend the most effort trying to use (based on my current view of the various frameworks out there).  Which comes back to the ""right tool for the job"" thing. If you're not dead-set on using angular and you have the time, perhaps consider prototyping some interesting part of your project using 3 or 4 frameworks. Get familiar with the capabilities and workflow each framework offers. Then choose the one you're most pleased with.  You don't need to scrap the entirety of the django ui to do this, nor do you need to implement the entire api right away. Start with only what's required to power the prototype for the interesting part. Slowly and carefully transition another piece, striving for a solid foundation to continue building upon both in the api and the ui. Refactor for reusability and DRYness.  If your project is anything like mine, you'll find that the transition accelerates to the point where you can start offering an entirely new ui after porting ~40% of the django ui. Building out the remaining 60% was actually very quick for my project. Then came polish. I maintained both versions of the ui during the transition, just in case the users needed to do something that was not yet implemented or broken in the extjs ui.  Hope that helps."
django,31ypzx,istinspring,2,Fri Apr 10 06:16:51 2015 UTC,"Thanks for your thoughts. I might do as you say and start pulling off logical chunks of the project and re-write them in various frameworks to get a feel for which might be the best alternative. Polymer certainly looks impressive, so I might give it a shot.   ExtJS also looks nice. Do you pay for the commercial license, or do you use the open source version? It looks like there's a few options, and I'm not sure which is appropriate. I know it would be based off our specific needs, I'm just curious what you went with."
django,31ypzx,KayEss,1 point,Fri Apr 10 13:55:21 2015 UTC,"Originally, my supervisor purchased a single developer license for extjs for me to use. We learned that some other departments started using extjs a while later, so now we have more developer seats.  From what I gather from your other comments, I assume you would probably need a commercial license too. Perhaps not. It is a fairly steep investment on the surface, and it comes with a considerable learning curve. If you plan to try extjs, you might consider using the open source version on an open source side project to become familiar with it before trying to buy a license for your main project."
django,31ypzx,KayEss,1 point,Fri Apr 10 14:19:11 2015 UTC,That's what I was thinking too -- start by testing out the open source version before purchasing the license. Thanks for the info.
django,31z64t,FishBowl98309,4,Thu Apr 9 08:13:26 2015 UTC,Myset.objects.exclude(order_status='pending')
django,31z64t,skolsuper,3,Thu Apr 9 09:03:19 2015 UTC,you sir... are a genius!
django,31z64t,unklphil,7,Thu Apr 9 09:37:15 2015 UTC,"You can also use Myset.objects.filter(order_status__in=('filled', 'canceled', 'expired'))"
django,31z64t,zoner14,2,Thu Apr 9 10:54:38 2015 UTC,"Be careful doing something like this. If someone updates the model a year from now to include another status option, your code might stop working the way you want.  If you were to add another status option, do you think you would always want to include it in the query? If not, then use Q objects to do an OR query."
django,31z64t,Brandhor,1 point,Fri Apr 10 04:04:07 2015 UTC,thank you
django,31z64t,xBBTx,1 point,Fri Apr 10 15:42:51 2015 UTC,"that's an AND query, you need to use Q to make an OR query https://docs.djangoproject.com/en/1.8/topics/db/queries/#complex-lookups-with-q-objects"
django,31x8ms,Wargazm,6,Wed Apr 8 21:35:41 2015 UTC,"Everyone here is pointing out that it's free, but just FYI, Heroku is currently floating pricing that will severely limit the availability of its free tier. That's likely to reduce the number of people who toss side projects on it. (Which is probably the point.)  But there are other reasons to use it! At the startup where I work, we use Heroku because we have limited dev resources (1 FT dev, one CEO who has better things to do) and don't think managing machines is currently cost effective. It's more expensive than AWS, sure, but for many firms those costs make sense -- at least in the short run."
django,31x8ms,spiffyman,5,Thu Apr 9 02:15:40 2015 UTC,"People use Heroku because it is free. It does much more to help you set up python environments than Dreamhost does.  On Dreamhost you have to user Passenger to serve your application. It took me a while to set up my environment on Dreamhost, but it works well now that its set up, and I like the level of control that I have over the server. I wrote a blog post about setting up a django environment on Dreamhost that should help you out."
django,31x8ms,CleverEagle,3,Wed Apr 8 22:02:31 2015 UTC,"On a side note, there are rumors that Heroku will not remain free for much longer, meaning you might want to look at something like Digital Ocean or DreamHost instead. Here is the article."
django,31x8ms,joelathome,1 point,Thu Apr 9 04:02:11 2015 UTC,"great blog post, bookmarked.  I'm sure it'll be very handy, thanks!"
django,31x8ms,lehmakook,3,Wed Apr 8 22:11:42 2015 UTC,"If you want to stick with shared hosting, do check out Webfaction. They support Django deployments out of the box.  I've hosted about five ""nobody ever visits"" hobby sites on a single $10/month plan there for years, and haven't had any issues yet."
django,31x8ms,apreche,6,Thu Apr 9 13:30:55 2015 UTC,"Because people learn Python and web development without learning Linux and web server administration. If they wanted to use any sort of non-managed hosting like AWS, Linode, etc. it would require a lot more learning. If their app only uses one dyno, Heroku is free. Different hosting solutions are right for different people and different apps."
django,31x8ms,RamirezTerrix,3,Thu Apr 9 04:45:35 2015 UTC,I learned Linux first and it is far cheaper to use a root-server but on the other hand it isn't a plug and play thing like heroku. Some might say sys admin stuff is wasted time but I think it is good to have a solid foundation
django,31x8ms,bdh2,1 point,Thu Apr 9 13:22:36 2015 UTC,Is it really cheaper?
django,31x8ms,RamirezTerrix,1 point,Thu Apr 9 17:16:52 2015 UTC,Knowledge is priceless man.
django,31x8ms,cayetano91,1 point,Thu Apr 9 18:24:03 2015 UTC,Yeah i mean I'm just wondering cause i know linux and i assumed they are all the same price and id save myself the pita by using one of the easy systems like heroku but if it's cheapest to use something like digital ocean id just use them
django,31x8ms,MikeyN0,1 point,Thu Apr 9 18:28:47 2015 UTC,Depends in your counting. If you don't count the setup costs. You pay around $15 a month for a Server in which you can host a bunch oft projects ( I am at 10 now and its still OK). Well in the other Hand they are pretty small. Just for companys and a limited number oft people. In my usecase the Server is cheaper than heroku
django,31x8ms,danielsamuels,4,Fri Apr 10 07:01:24 2015 UTC,"Because it's free but only when you are using one dyno, setting up is easier, and you can upload directly to your site with a simple heroku push. I could recommend it to start to develop on Django and take care of your app instead of a lots of configurations BUT considering costs and other features i don't really recommend it, I'm actually using Amazon AWS and even thought it's harder to set up at the first time I fell in love with AWS. So for getting started it could be a good way BUT you can use Amazon AWS and use their free tier program where you can deploy several instances for free, you can check out more options."
django,31x8ms,patrys,4,Wed Apr 8 23:40:39 2015 UTC,I tried Heroku after everyone was talking about it but I switched to WebFaction primarily for two reasons.    Web faction has Shell access which I really wanted. Web faction is tons cheaper. Heroku looked like it could get pretty expensive.
django,31x8ms,damontoo,3,Thu Apr 9 02:31:34 2015 UTC,We did the same. Webfaction has become so unreliable in the past few years and their support has gone downhill too. Now we have our stack exactly as we like it on DO. Couldn't be happier.
django,31x8ms,TankorSmash,1 point,Thu Apr 9 03:57:50 2015 UTC,"We switched from DO to Google Cloud. At the start of this year Digital Ocean started to migrate some of their customers to some new infrastructure that was supposed to be better (not like you had anything to say in that regard). The result was that the very day our first machine was migrated, a $320/month database server, the machine disappeared for 12 hours. Its IP would not respond to any traffic from any network and DO's own remote access tools would say the machine is impossible to reach and impossible to reboot. Great. Half of the time was spent trying to get their staff to either do something or at least admit that there is a problem. Nope. In the end the machine suddenly resumed reporting to New Relic and we've noticed that the load was climbing up very fast before the machine disappeared and slowly falling down when it reappeared. At that time Digital Ocean sent us an email saying that the machine is back so everything is fine. Asked about their 99.99% availability guarantee they were quick to point out that the guarantee only means that we'll be credited with free 12 hours next month and that they'll see if our problems were an isolated incident. Then, two days later, the same thing happens. And two days later. I confirm that all three happen at the same time. Backup time. Digital Ocean replies that it's expected for the load to climb slightly during backups. I ask whether 12 hours of downtime is considered a slight climb. By the time they answer we have one very pissed customer and a service that is now well below the 90% mark in availability. DO's reply is very helpful: they outright tell us to disable backups. That's correct. They want us to disable their own backup infrastructure that was working perfectly fine until the machine was migrated. We disable backups, confirm that the machine stays online and immediately start looking for a new host. The move takes a month to complete, each week we have to disable backups on more and more servers as they get migrated over to the new infrastructure."
django,31x8ms,eflin,1 point,Thu Apr 9 06:14:40 2015 UTC,"This reminds me a lot of when Media Temple migrated all their shared customers to ""grid hosting"". If hosts are going to force a migration they better be 1000% sure it will go smoothly and that the new platform will be a better experience immediately."
django,31x8ms,Airith,1 point,Thu Apr 9 07:51:33 2015 UTC,"I second WebFaction, it's super helpful to get it going ASAP with the Application stuff it has going. Really really happy I made the switch from hostgator to Webfaction."
django,31x8ms,CleverEagle,3,Thu Apr 9 08:13:55 2015 UTC,"Here's a blog post that covers some benefits to using Heroku: http://www.pydanny.com/you-should-heroku.html  It's a very convenient, time-efficient way to deploy projects."
django,31x8ms,cediddi,1 point,Thu Apr 9 03:40:56 2015 UTC,"Cool, thanks for the link."
django,31x8ms,never_safe_for_life,2,Thu Apr 9 01:30:18 2015 UTC,"I've heard that Dreamhost has terrible up-time. That may have changed in the last while. I also didn't like their setup when I used them. I think a lot of people jumped on Heroku because it was new and easy to set up, but I haven't used it myself. I've used DigitalOcean and they were great, easy, and affordable. I'm currently using Azure through their BizSpark program (free) and it's very in depth, a bit complicated though."
django,31x8ms,colly_wolly,1 point,Thu Apr 9 01:42:58 2015 UTC,"I haven't had any issues with Dreamhost. In fact, they are upgrading all of the shared servers to SSDs now, so hosting should be even faster now."
django,31x8ms,ghostdogkure,1 point,Wed Apr 8 22:22:53 2015 UTC,"Well, I don't deploy on heroku but I like the idea of heroku. There's also an alternative now, Dokku. You can get a preinstalled dokku server on digitalocean. You can deploy multiple sites on dokku."
django,31x8ms,metaphorm,1 point,Thu Apr 9 06:24:17 2015 UTC,"I just switched my companies site off heroku and said goodbye to  random stalled processes, periodic deploy outages, and having to deal with a 512MB memory limit. IMHO heroku is for hobby projects and if you're doing anything serious get off of it and learn how to deploy to AWS."
django,31x8ms,ghostdogkure,1 point,Fri Apr 10 19:31:52 2015 UTC,My guess is because it offers free hosting for getting up and running without needing to pay anything. pythonanywhere.com is way nicer than Heroku in my opinion.  https://www.pythonanywhere.com
django,31x8ms,metaphorm,1 point,Fri Apr 17 01:47:36 2015 UTC,AWS is the best IMO. More flexibility and you can actually learn web administration instead of suckling the teat of a black boxed web platform. The only blackbox I want to have is the actual hardware itself
django,31x8ms,ghostdogkure,2,Tue Apr 28 21:04:55 2015 UTC,"AWS is a great host for real production systems, especially systems that need to be able to scale up in a cost efficient way.   However, a lot of people are just doing side projects or are newbies trying to learn. Heroku is a good platform for them because it is convenient and free or cheap at low scale. The sysadmin stuff is important to learn, eventually, but there is a time and place for everything. Not everyone is ready to dive in to the deep end. Not everyone needs to."
django,31x8ms,damontoo,1 point,Thu Apr 9 03:14:46 2015 UTC,Yeah but even so setting up something like Django that has a WSGI can get massively frustrating when the abstracting layer attempts to shortcut that for you
django,31x8ms,ghostdogkure,1 point,Thu Apr 9 19:33:10 2015 UTC,"Its been a couple of years since I used Heroku, but last time I did I was playing around with django on their Cedar stack. It was totally smooth and easy. No WSGI related hangups at all. Heroku is designed to just do stuff for you. If you try to fight it and customize outside of the parameters they allow you to customize it will get ugly. When you go with the flow its easy as pie."
django,31x8ms,damontoo,1 point,Thu Apr 9 19:40:40 2015 UTC,I agree it's a good tinkering platform
django,31x8ms,colly_wolly,0,Thu Apr 9 19:45:07 2015 UTC,Not everyone can afford to waste time on sys admin.
django,31xnuq,Greekie,2,Wed Apr 8 23:29:53 2015 UTC,"Have you installed all the requirements?    You say you are using a requirements.txt which leads me to believe it's for pip.  If you haven't installed the requirements, go ahead and try pip install -r requirements.txt  If you get errors, rerun it as root."
django,31xnuq,myropnous,4,Wed Apr 8 23:38:33 2015 UTC,I would also recommend setting up virtualenv (preferably with virtualenvwrapper) to install your requirements into.
django,31xnuq,PhaZePhyR,2,Wed Apr 8 23:54:56 2015 UTC,"Yup, I recommend virtualenvwrapper, too.  Shit's nice."
django,31xnuq,myropnous,1 point,Wed Apr 8 23:58:10 2015 UTC,Is using virtualenv any different than using Vagrant with Virtual Box ? Is my route too overkill ?
django,31xnuq,mbrochh,2,Thu Apr 9 00:04:10 2015 UTC,vagrant will be used to setup your virtualbox and install all the things - one if those things should definitely be virtualenv.
django,31xnuq,myropnous,2,Thu Apr 9 03:52:30 2015 UTC,"Yes, thank you for clarifying this. The devs mentioned this file to me and I thought it was magical how everything installed when I ran pip install -r requirements.txt   Still no luck running the server even with these installed"
django,31xnuq,myropnous,1 point,Thu Apr 9 00:02:10 2015 UTC,Can we get a full error log?  Screenshots or a gist would be a huge help.
django,31xnuq,Condorr_,1 point,Thu Apr 9 00:03:44 2015 UTC,Yes! Gist coming atcha  This is the error with the PYTHONPATH set up
django,31xnuq,frankwiles,2,Thu Apr 9 00:10:32 2015 UTC,"My initial guess is that django_bitly is not installed.  Can you check if it is in the requirements.txt file?  If it is missing, go ahead and add it, and run pip install -r requirements.txt again.  What the error says is that it can't find the models.py file for the django_bitly app.  This generally means that the app isn't installed."
django,31xnuq,rackmountrambo,1 point,Thu Apr 9 00:13:59 2015 UTC,It looks like it was missing from the requirements file so I had to install it manually.  The server runs with no errors!!   But no HTML is served in Chrome and I see:      Error code: ERR_CONNECTION_REFUSED.   I'm not sure what would be helpful at this point now but I can provide my best
django,31xnuq,myropnous,3,Thu Apr 9 00:27:45 2015 UTC,"On your runserver, can you try serving it on 0.0.0.0 and whatever port your using (looks like port 8000).  Serving it on 127.0.0.1 or localhost means it will only accept connections from the local computer but seeing as how your running Vagrant, it may be seeing it as outside of localhost  This will allow outside connections to the Dev server."
django,31xnuq,myropnous,1 point,Thu Apr 9 02:05:54 2015 UTC,This will fix it. Localhost is usually fine but it's the VM's localhost not your Mac so you need to runserver with 0.0.0.0 to have it run on all network interfaces.
django,31xnuq,EddieLomax,1 point,Thu Apr 9 03:20:11 2015 UTC,"Yes, thank you! This helped to get the page serving and see all the fun Django Debugging errors.   Myropnous has been extremely helpful and I cannot thank him enough.  I do have this error now and I can't seem to figure it out... and I can't find anything on this networkEvolution  Exception Type: SyntaxError Exception Value:     invalid syntax (pca.py, line 79) Exception Location: /usr/local/lib/python2.7/dist-packages/gmane/networkEvolution.py in <module>, line 9"
django,31xnuq,thekingofcrash7,1 point,Thu Apr 9 13:26:58 2015 UTC,There's a reason people tell you to post full errors.  https://github.com/ttm/gmane
django,31xnuq,bdh2,1 point,Thu Apr 9 20:46:23 2015 UTC,Are you running this locally or from a dev machine somewhere else?
django,31vxcq,CaptainMelon,1 point,Wed Apr 8 16:03:19 2015 UTC,@RailsGirlsSoC:   2015-04-08 15:30:41 UTC  RT @djangogirls: 💕 @djangoproject is now a part of @RailsGirlsSoC!   Get funding to work on contributing to Django whole summer :)  👉 https…     [Mistake?] [Suggestion] [FAQ] [Code] [Issues]
django,31vxcq,TweetPoster,1 point,Wed Apr 8 16:04:54 2015 UTC,Accepted projects:    [Django] Integration with alternative data stores  [Django] Improve Formsets to allow customized Form construction   All proposals
django,31w1ak,enesimo,5,Wed Apr 8 16:30:35 2015 UTC,"My quick guide I give to students (applicable for more than Django):  1 - Plan a small project for yourself.  2 - Figure out what tools, technologies, parts of the framework, external libs and so on you want to explore while making it. Always bear in mind you don't need to use the whole of Django to make it work, just focus on what you'd be interesting in using.  3 - Prototype, see how far you get.  4 - After a period of time, review what you've done, how it could be better and what else could be incorporated it.  5 - Go to Step 2. Repeat until you feel comfortable taking on a major project.  I've found that most tend to learn by doing. Reflecting on what you've done is important - you can always do something better. Use this to lead you down the rabbit hole, rather than falling down thinking you need to know everything before you start - you really don't."
django,31w1ak,thisisthechris,1 point,Wed Apr 8 16:46:05 2015 UTC,"Please forgive me ignorance, what do you mean by prototype?"
django,31w1ak,punsnammo,2,Wed Apr 8 22:41:00 2015 UTC,"(I'm not comment OP, but) A prototype is a first version of something."
django,31w1ak,freework,4,Thu Apr 9 09:17:39 2015 UTC,"Don't spend too much time trying to do everything the 'right' way. ""Right' and 'wrong' are subjective terms when it comes to computer code, and can change depending on your point on view. Do it the way that works fr you, take 'best practices' with a grain of salt.  That said, if you're still learning, I suggest you stay away from class based views. lso stay away from forms. Once you get function based views and simple moving data between front end/backend/template/javascript, then you can start trying out forms and classed based views."
django,31w1ak,DonHaron,2,Wed Apr 8 18:15:11 2015 UTC,"Exactly. If you're trying to get everything ""right"" or pretty the first time and don't allow yourself to do something wrong or what you might consider ugly, you will never get any code done.   That is often one of my problems at least, and that's also when I devolve into chain reading tutorials and docs.  Just try to do it one way, and later come back and refactor it to something that looks nicer."
django,31w1ak,rackmountrambo,2,Wed Apr 8 21:16:42 2015 UTC,I've been working primarily with Django fulltime since 0.96 and this is my current workflow:   get shit working.  refactor into pretty code refactor into CBV refactor into pretty code refactor again finally be comfortable with people seeing it and posting it on github
django,31w1ak,rackmountrambo,1 point,Wed Apr 8 22:32:25 2015 UTC,Why do you make FBV before CBVs? Is it just your process or do you tihnk this method is better in some way?
django,31w1ak,jason_rootid,1 point,Thu Apr 9 09:16:26 2015 UTC,"Its usually a mix of both to start out, but then I try to switch everything in an effort to make the codebase smaller."
django,31w1ak,kewlness,2,Thu Apr 9 11:24:39 2015 UTC,"There's no substitute for real experience. If you're just trying to soak up knowledge you're going to end up doing what you're doing now, bouncing around reading stuff. But this is programming, you're not expected to keep the docs in your head, it's important know what's possible, not to memorize everything.  Start a small project, use the docs as you need them for that project. That's how they're meant to be used. Make a Todo list app or something, programmers love Todo list apps."
django,31w1ak,mleonard87,2,Wed Apr 8 18:59:49 2015 UTC,"I don't know if it will help you or not, but I absolutely love the Test-Driven Development with Python book. It is pre-order right now (due to be released on April 29th) but you can read it for free here:  http://chimera.labs.oreilly.com/books/1234000000754/index.html  It covers a lot more than the tutorial did and also gives you a good systematic approach to building Django applications.  I hope this helps."
django,31wdd3,DozNuts,2,Wed Apr 8 17:56:39 2015 UTC,"That looks very useful...  If you don't mind educating me, is there a reason to use virtualenv and virtualenvwrapper inside the VM? Or are these included just for running the app on the host?"
django,31wdd3,tw_f,2,Thu Apr 9 12:58:06 2015 UTC,"So your right there is no immediate need to use virtualenv in a VM because technically you could have multiple vagrant VM's per Project.  But in the scenario where you wanted to run multiple Python projects in the same box, virtualenv is available to separate python dependencies"
django,31wdd3,tw_f,2,Thu Apr 9 13:53:17 2015 UTC,"But in the scenario where you wanted to run multiple Python projects in the same box, virtualenv is available to separate python dependencies   Makes sense...TY!"
django,31u9ud,caduvall,8,Wed Apr 8 05:02:14 2015 UTC,"Do you have any thoughts on why this library is so much faster? Usually there is a trade off made for speed, or maybe it is objectively better - but that's not something that's clear from the graphs."
django,31u9ud,thelindsay,2,Wed Apr 8 05:39:29 2015 UTC,The approach serpy takes is very minimalist. Most of the work of figuring out how to serialize a field is pushed to the serializer metaclass instead of being done during serialization. The metaclass compiles the fields to a very simple tuple representation that in most cases ends up just being a attrgetter() call on serialization.
django,31u9ud,LightShadow,2,Thu Apr 9 19:34:13 2015 UTC,How would I swap this into a django-rest project to see if there's any noticeable performance gains?
django,31u9ud,ionelmc,1 point,Thu Apr 9 06:15:58 2015 UTC,"Right now you would just have to recreate your serializers using serpy, but usage of them should be pretty identical. I was toying with the idea of making some way to do auto conversion of DRF serializers but haven't implemented it yet."
django,31u9ud,sk3tch,1 point,Thu Apr 9 16:03:41 2015 UTC,Any comparative benchmarks? (this could help).  EDIT: Now I see that you actually have some benchmarks. However besides them being inconvenient to run (no tox env for them) you appear to have cheated: Marshmallow serializes to json (as a string) while serpy skips that step. Also DRF uses OrderedDicts - can that be disabled?
django,31u9ud,jeffbaier,2,Wed Apr 8 05:27:22 2015 UTC,"Benchmarks have been fixed, marshmallow no longer serializes to json (switched .dumps to .dump).  Also, you can now run the benchmarks using the benchmarks.sh script, or tox -e benchmarks.  It doesn't look like its possible to disable OrderedDicts in DRF, it seems pretty hardcoded: https://github.com/tomchristie/django-rest-framework/blob/master/rest_framework/serializers.py"
django,31u9ud,ionelmc,2,Wed Apr 8 06:24:52 2015 UTC,"In DRF you define serializers in your project, subclassed from the base implementations. Therefore, there is nothing stopping a developer implementing their own base serializers (perhaps using the existing base ones, perhaps not) to eliminate the use of OrderedDict."
django,31u9ud,pbacterio,1 point,Wed Apr 8 13:28:18 2015 UTC,There's a page where they compare it to marshmallow and DRF.   http://serpy.readthedocs.org/en/latest/performance.html
django,31u9ud,pyronhell,1 point,Wed Apr 8 05:40:19 2015 UTC,"I have noticed that and edited the comment. However, there are some problems with the benchmarks ..."
django,31whvu,pubcoder,4,Wed Apr 8 18:28:16 2015 UTC,"Two answers:   Chapter 12 means you are looking at the Definitive Guide to Django, which has been out of date for years. Use another resource, here is a bunch of recommended ones: http://twoscoopspress.com/pages/django-tutorials If on Apache, use mod_wsgi. Otherwise consider nginx and uwsgi options."
django,31whvu,pydanny,2,Wed Apr 8 18:58:04 2015 UTC,"mod_python is obsolete! Also If you ever have problems with mod_wsgi or apache, just switch to nginx+uwsgi (or nginx+gunicorn which is easier), nginx is faster and easier to setup than apache, uwsgi or gunicorn is also very very easier than mod_wsgi.   Apache is a great project, but an awful software (my personal opinion)."
django,31srou,yuga_d,4,Tue Apr 7 21:48:21 2015 UTC,This will be django auto escaping. You want to disable it for the parts that are not HTML output  (i.e. the subject line):  https://docs.djangoproject.com/en/1.8/ref/templates/builtins/#autoescape  or   https://docs.djangoproject.com/en/1.8/ref/templates/builtins/#std:templatefilter-safe
django,31qgxs,ghickman,9,Tue Apr 7 10:52:36 2015 UTC,"An invaluable resource. Every time I visit, I wonder why it's not just merged with the official docs..."
django,31qgxs,rnevius,3,Tue Apr 7 11:07:46 2015 UTC,If the site goes down (happened only once to me) it is almost worse than Github going down :)
django,31qgxs,mbrochh,2,Tue Apr 7 11:58:13 2015 UTC,http://web.archive.org/web/20141218114011/http://ccbv.co.uk/  ;-)
django,31qgxs,rnevius,1 point,Tue Apr 7 12:04:36 2015 UTC,Genious!
django,31qgxs,mbrochh,1 point,Tue Apr 7 12:11:35 2015 UTC,Because there's no pull request?
django,31qgxs,dAnjou,0,Tue Apr 7 13:40:19 2015 UTC,"I really do not want this merged into the official docs. By keeping it outside core it allows for faster development cycles and the capability for new features to be added without committee approval.  However, I do believe the official documentation should link to this site."
django,31qgxs,pydanny,2,Tue Apr 7 19:02:01 2015 UTC,"New features? Why would documentation on CBV need to develop faster than the Django core? Also, for what it's worth, the Django docs and core can and do update at different intervals."
django,31qgxs,rnevius,3,Tue Apr 7 19:28:38 2015 UTC,The usefulness of this website is the strongest argument I can think of against django's implementation of CBVs.
django,31qgxs,2_many_books,2,Tue Apr 7 18:39:14 2015 UTC,"dumb argument. at most, it's an argument for this documentation over django's official cbv documentation."
django,31qgxs,Mekhami,1 point,Tue Apr 7 22:40:52 2015 UTC,Can you expand on that comment?
django,31qgxs,enesimo,1 point,Tue Apr 7 21:46:30 2015 UTC,"I'd be interested in having this conversation because I go back and forth on CBVs myself.   The one I use most often is   FormView  . When I first encountered CBVs, I was most struck by the idea of separating GETs and POSTs into two separate methods, and I still think that's a great idea. It's intuitive and straightforward and I think it makes the views cleaner.  The complaint I have most often is that a number of the methods themselves are not too intutive, so while I really like the resource originally linked here, I also wonder sometimes if needing something like this means the API is too unintuitive."
django,31qgxs,erewok,1 point,Wed Apr 8 02:54:02 2015 UTC,"I like Django's class based views, but I find myself never using the provided generic classes."
django,31qgxs,pemboa,0,Tue Apr 7 16:22:30 2015 UTC,@meshy:   2015-04-07 10:45:20 UTC  ccbv.co.uk has now been updated for #django 1.8!     [Mistake?] [Suggestion] [FAQ] [Code] [Issues]
django,31rcjt,CleverEagle,1 point,Tue Apr 7 15:49:38 2015 UTC,"I like this. I think that with time it could be pretty cool. I think you'll need to support a lot more options though, since you're using ApiView and I think a lot of people (or at least I do) use ViewSets.  It would be nice if there were switches for using ModelViewSet or things like ListAPIView."
django,31rcjt,jason_rootid,3,Tue Apr 7 20:45:10 2015 UTC,"I had lots of time yesterday, so I implemented ViewSet views by defualt on version 0.1.5. You can still get APIViews with the --apiview option.  Thanks again for the tip!"
django,31rcjt,jason_rootid,1 point,Wed Apr 8 21:40:33 2015 UTC,"That's awesome!  I wish I could help out with this as I do think it's a great idea, but free time is something I just don't have these days."
django,31rlf2,Spidey_Sense81,4,Tue Apr 7 16:52:37 2015 UTC,"Have you tried the official Django tutorial ? I always found it gives a very good overview of all parts of the framework, and it's very polished and up-to-date (like all the Django documentation)."
django,31rlf2,niconoe,4,Tue Apr 7 17:26:46 2015 UTC,"Check out Real Python. The Django portion, details how to upgrade a Project from Python 2.7 to 3.4. Plus, we it shows how to setup a basic Django Project with a blog App along with Bootstrap 3.   For a quick start, check out Starting a Django Project.  (Note: I am the co-founder/author of Real Python)."
django,31rlf2,michaelherman,3,Wed Apr 8 16:56:57 2015 UTC,"I would work through Tango with Django Python 3.4 vs 2.7 shouldn't matter as much, you can look up specific syntax changes."
django,31rlf2,yuga_d,1 point,Tue Apr 7 17:13:07 2015 UTC,"I think the only differences will be using str (self) instead of unicode(self) and print(""blah"") instead of print ""blah"".   Other than that, Tango with Django should have no issues."
django,31rlf2,ramsesthedog,2,Tue Apr 7 17:20:06 2015 UTC,"Just use the official tutorial. It is long, yes, but it provides a good fundamental understanding of the framework. Don't expect to understand how to use it if you don't want to put in the effort!"
django,31rlf2,John--117,1 point,Tue Apr 7 21:23:11 2015 UTC,The Django Girls tutorial is up to date with 3.4 and Django 1.8. It's my favorite beginner tutorial.
django,31sd3f,brtt3000,2,Tue Apr 7 20:05:42 2015 UTC,Have you tried uwsgi ?
django,31sd3f,XarothBrook,3,Tue Apr 7 20:14:21 2015 UTC,"Agreeing with everyone else on this. Plus, it's still a good tool for running application servers even if they aren't written in Python."
django,31sd3f,rspeed,3,Wed Apr 8 00:18:57 2015 UTC,"The obvious alternative to gunicorn is uWGSI. It's probably a bit faster, and changing from one to the other shouldn't be very complicated.   https://docs.djangoproject.com/en/1.8/howto/deployment/wsgi/uwsgi/"
django,31sd3f,Vitrivius,3,Tue Apr 7 20:22:45 2015 UTC,"Yep, uWSGI works great for me, with nginx."
django,31sd3f,clausconrad,3,Tue Apr 7 20:37:11 2015 UTC,What makes you think that your latency is nginx+gunicorn related? Your application and database queries are much more likely to be the culprits
django,31sd3f,enricom,1 point,Wed Apr 8 04:51:21 2015 UTC,"We're considering everything in our stack, but to keep it focussed in this post I ask about nginx+gunicorn. Next time we'll talk about queries and caching and all the other things."
django,31sd3f,leosh,3,Wed Apr 8 07:20:33 2015 UTC,"Odds are your issues have nothing to do with nginx/gunicorn.  The first step is to take your app and profile it. That will tell you where the issues are in a structured way. Don't just guess at what might be slow. Start here - http://stackoverflow.com/questions/2361985/profiling-django - or just google for ""profiling django"".  Not only will that help you figure out where the slowdowns are but will also give you explicit metrics that you can use to evaluate any changes you make."
django,31sd3f,cediddi,1 point,Wed Apr 8 14:55:06 2015 UTC,"I agree with enricom, nginx is known for it's speed and gunicorn is not much slower than uwsgi. I'd rather use uwsgi than gunicorn."
django,31sd3f,merican_atheist,2,Fri Apr 10 19:47:05 2015 UTC,I'll second uWSGI.  Lots of configuration options and easily run under supervisord.
django,31sd3f,rackmountrambo,1 point,Tue Apr 7 20:20:06 2015 UTC,Why would you do that what it has a process manager built into it?
django,31rrs3,OmegawOw,4,Tue Apr 7 17:37:00 2015 UTC,django rest to the rescue? http://www.django-rest-framework.org/
django,31rrs3,gnarjunkie,1 point,Tue Apr 7 17:48:36 2015 UTC,"thanks, any suggestions as to which parts specifically and will I have to have a working Django knowledge to use this ?"
django,31rrs3,CleverEagle,2,Tue Apr 7 17:58:14 2015 UTC,"You will need to know how to define your models in the Django style. Besides that, It's pretty starightforward if you follow the tutorials. I just wrote a rest framework package to help jump-start API development if you'd like to take a look. drf-generators"
django,31rrs3,gnarjunkie,1 point,Tue Apr 7 19:59:56 2015 UTC,Have a look at the quickstart and the thorough tutorials on the site.
django,31rrs3,metaphorm,3,Tue Apr 7 18:04:48 2015 UTC,do the django tutorial do get a basic idea on how to declare models and how to wire up some views that can query those models and return an http response.   then do the django-rest-framework quickstart tutorial and learn about how to create RESTful endpoints as your views.  that should be enough to get started.
django,31rrs3,CrimsonRay,1 point,Tue Apr 7 18:40:27 2015 UTC,I would ordinarily take the time to learn it thoroughly but time is short and I'm desperate need of a Hack job   Check out django-conduit.
django,31rrs3,Whoopska,1 point,Tue Apr 7 18:09:24 2015 UTC,"This is a really shitty question. You don't need anything other than basic django to do this. You emphasize SQL queries, but django doesn't care (as long as you are using a model and supported backend) and you emphasize HTTP as if django is suddenly going to be only responding to SMTP. It's designed for exactly what you want, http requests and serving data from databases.   query an SQL database and serve the responses to HTTP requests[that an android app will be sending to it].   Just like the polls application in the tutorial? What is so special about these http requests or responses that you need a hack job?  Quick and easy tutorial? Follow the tutorial, it's quick and it's easy. This question is like going into a hardware store any saying you want to install a door to your house  ! and it has to be a quick hack job. Sure you can add a mail slot r a door bell, but you're just asking for a door. It isn't a hard job. Don't throw any extra libraries into the mix until you understand what django does.  I think the issue may be that you have an existing database and you don't want to set up an infrastructure from scratch. If that is right, why not state that in the question? If that is right, add django models for the existing db. https://docs.djangoproject.com/en/1.8/howto/legacy-databases/  python manage.py inspectdb > models.py   and get to writing your queries. Unless the queries are very simple and you're not in a huge rush, just write the queries directly to the connection like (from the linked page)  from django.db import connection  def my_custom_sql(self):     cursor = connection.cursor()      cursor.execute(""UPDATE bar SET foo = 1 WHERE baz = %s"", [self.baz])      cursor.execute(""SELECT foo FROM bar WHERE baz = %s"", [self.baz])     row = cursor.fetchone()"
django,31o67k,tifuScarePrank,10,Mon Apr 6 20:57:42 2015 UTC,"Why should one use a RESTful framework? To make no assumptions about the client that will be consuming the data.  By default, Django is mostly for full-stack applications - a framework that responds to requests with HTML. Note the ""HTML"" part - returning HTML does not make sense if you want to use the same server for iOS let's say. You've then got to implement more functionality to be view-independent, and because of this you might have to double your logic or add yet another layer of abstraction.  If you use Django Rest Framework (or build one yourself!) you then return json instead of html and any client can then consume that json into whatever native view you want - so JavaScript can then turn json into HTML (all clientside) or iOS could take your json and build your App's view from it."
django,31o67k,cmsimike,6,Mon Apr 6 21:54:05 2015 UTC,"Just a friendly note for people that doesn't seem to be common knowledge, you can also return XML or anything else through a REST API, and it doesn't even have to be through HTTP.  Nowadays REST API is synonymous with HTTP API in the industry but that's not what it means by definition, and a lot of APIs are called RESTful when they actually aren't (particularly missing the HATEOAS bit).  But as far as Django REST Framework goes, the default is JSON but you can add on XML as well, but neither is required for an API to be RESTful. It can be any valid internet media type.  It's a really smart design by Roy T. Fielding and I highly recommend reading more on his dissertation if you haven't.  Edit:  The worst part of it I think is that people are calling services RESTful, but they'd be much better off if they completed the design to actually fit the requirements. A lot of APIs would simply be easier to use.  Some ""REST"" APIs are impossible to figure out unless you have documentation, but a true REST API would be much more obvious simply from the client standpoint, having only a base URL to query. Your state transitions and available actions should be obvious from each point forward given a proper RESTful response. It really is a good design."
django,31o67k,d4rch0n,1 point,Tue Apr 7 02:38:15 2015 UTC,"Also, you don't need REST API to return JSON, XML, or any other format.  REST and your return format are completely separate concepts."
django,31o67k,boxidea,1 point,Tue Apr 7 11:38:01 2015 UTC,"Out of curiosity, is returningJSON/XML then using JavaScript to turn the data into HTML the way to go?  It used to be, and I'm ssuming it is still so not Search Engine friendly to render with JavaScript and that this is not a good approach for that purpose?"
django,31o67k,YouAreSalty,1 point,Sat Apr 11 10:47:52 2015 UTC,Basically. That is the general workflow for the web-based client.  I only have anecdotal evidence that show (at least Google) executes javascript on web pages now but I personally would do it.
django,31o67k,cmsimike,1 point,Sat Apr 11 19:46:38 2015 UTC,"There was talk about Google doing checks on Javascript loads as well, but I don't know the quality of it or even how well Google can do that.  I think I would stay far away from it with content I want indexed."
django,31o67k,YouAreSalty,1 point,Sat Apr 11 19:49:53 2015 UTC,I have personally seen ajax'ed content be indexed by google.
django,31o67k,cmsimike,1 point,Sat Apr 11 19:58:07 2015 UTC,"Pardon my lack of knowledge, but why does returning HTML not make sense if I want to use the same server for iOS?   For my normal Django app, I return html pages (passing variables to these pages). I can load this page from any of my devices (whether it's an Android phone using Chrome, the iPad using Safari, a Mac Book (which uses iOS, right?) etc.)."
django,31o67k,mibmibmib,4,Mon Apr 6 22:01:24 2015 UTC,"For native applications. Since they have their own set of layout rules, it doesn't make sense to send them your html and try to grab the useful data out of that.  e: to quickly try and expand:   If you want other developers, or a native application (or a few more that aren't coming to me this second) to be able to work with the data driving your app. That's when you want a REST Framework.   There's also the case where you want to render a page, then dynamically populate somewhere with new data.  (Apologies if I sound a bit disjointed.)"
django,31o67k,our_lord_quas,1 point,Mon Apr 6 22:13:15 2015 UTC,So a REST Framework will respond as an API in whatever language it's queried with? Otherwise I could just serve JSON responses.
django,31o67k,hhh333,3,Mon Apr 6 23:06:30 2015 UTC,"Here, this will clear things up:   REST framwork are used to build APIs REST frameworks can support one or more query/response language like json, xml or yaml The supported query/response languages are generally widely implemented among popular programming languages which makes it easy to implement reusable API wrappers It's all about abstracting the client(s) from the backend, which offers numerous advantages depending of your application roadmap and future goals.   Building an API also means the backend can evolve at a different pace than the frontend client(s), which can be mobile apps, websites, desktop application, embed softwares or anything that can write and read bytes through a socket.  An API can itself talk to other APIs behind the scene, offering a transparent abstraction and isolation."
django,31o67k,our_lord_quas,2,Tue Apr 7 00:58:55 2015 UTC,"Thanks for this. I know everybody's going for the ELI5, but some tech speak really helped me solidify some really vague language."
django,31o67k,brtt3000,1 point,Tue Apr 7 01:16:26 2015 UTC,"An API can itself talk to other APIs behind the scene, offering a transparent abstraction and isolation.   Bonus points if your webpage servers are pulling from the same API as your widgets and native-app apis."
django,31o67k,metaphorm,7,Tue Apr 7 20:22:37 2015 UTC,"returning HTML makes sense for exactly one client: a web browser. while its true that the web browser might be running on a desktop PC, a laptop, a tablet, or a phone its still a web browser.   not every client is a web browser. suppose your client is an iPhone game written in Swift that upates high scores and leaderboards via http request? your server backend can talk to the iPhone game just fine because they both speak http but the iPhone game doesn't want to get html back in the response. it wants just the data, structured in a way that is convenient to parse, so probably some JSON or XML would be a better response to send."
django,31o67k,strig,1 point,Tue Apr 7 01:41:39 2015 UTC,"If you're building an iOS app, as opposed to a mobile web page, you may want to interact with your server via a REST API (the output format could be json but could also be XML).  You don't need to use DRF, it's just a framework on top of django that makes building a REST API quicker. You can just as well write views that accept/return json."
django,31o67k,jason_rootid,3,Mon Apr 6 22:37:51 2015 UTC,"Someone should use a RESTful framework because it's the best solution to a problem they are trying to solve.  Generally speaking, if you're trying to get data into multiple types of applications, you're going to need to provide that data in a way that all of those applications can understand. If you're only going to display data in a web browser, then HTML may be the smartest way of going about things and you can safely ignore DRF (Django REST Framework), unless you want to use something like Ember or AngularJS.  If you want to create a mobile app that isn't using a WebView but is directly pulling data from your server, and have a website, and use the same data for both, then it's likely going to be easier to use DRF than it will be to code views in Django, especially since a lot of problems are solved in DRF in nice general ways (token based authentication, serializing data, and rules for authorization)."
django,31o67k,tummy_yummy,2,Mon Apr 6 22:46:50 2015 UTC,"In terms of the benefits of Django Rest Framework itself, it's exceptionally well written and documented, has very nice tools for API discovery (e.g. auto-generated interactive documentation for your API) and, for me at least, one of the main benefits was that using it taught me how REST APIs are actually supposed to work!"
django,31o67k,twigboy,2,Tue Apr 7 01:01:10 2015 UTC,"You don't HAVE to use it, but it helps guide you to create a when creating an API for other devs to use your service which is consistent with other RESTful APIs  Less decisions by you means lead deviation from the pseudo standard REST API"
django,31o67k,colly_wolly,1 point,Tue Apr 7 03:25:48 2015 UTC,"I haven't checked recently, but I would imagine that there are third party libraries for connecting a ""standardised"" REST service from django (i.e. django-rest-framework) to other front end frameworks  like Angular or Backbone. Saves you some work and testing."
django,31o67k,colly_wolly,1 point,Tue Apr 28 21:14:10 2015 UTC,"Django Rest Framework will really shine if you want your REST resources to match your models closely. Django Rest Framework will allow you to do that with very little code and in a Django style.    There are a set of API views which are very similar to Django's class based generic views - except they will return a REST resource (usually a JSON representation of an object) rather than an HTML page. Serializers, which take your Django model and turn it into JSON are very similar in use to Django's model forms.  So if you know how to use one, you are 75% of the way toward being able to use the other. It keeps your code style consistent, and concise.  (Less code usually leads to less bugs in my opinion).   Of course maybe your models don't match the output you want to create so precisely.  Or maybe you don't use class based views. In that case, some of the obvious benefits are gone, but there are still plenty of things you are going to need to write yourself, that are included in the Rest Framework."
django,31o67k,user_rx,1 point,Tue Apr 7 08:43:23 2015 UTC,"""because we want the freedom to bolt-on any framework we like for the client's front-end"""
django,31o67k,freework,0,Tue Apr 7 11:47:58 2015 UTC,"These kinds of frameworks are good for when you're first learning, but once you get a hold on how restful services work, you can leave the framework behind. These days if I want to build an API based backend, I'll just use regular views that return JsonResponse  Dn't listen to all the hype about how it'll make your API 'standard' or whatever. No matter what, your clients are going to have to do work in order to consume your API. There is no magic bullet that makes your API automatically usable with no effort."
django,31o67k,YouAreSalty,1 point,Tue Apr 7 05:54:20 2015 UTC,I was wondering about that. Why do you need Django Rest framework?  Can't you just respond with json/xml upon a request instead of html?
django,31o67k,andrey_shipilov,1 point,Sat Apr 11 10:55:31 2015 UTC,"Yes you can. You can also write your own web server, web framework, test runner, your own compiler or even your own language. DRF is an abstraction layer from your business logic to a 3rd party client through a RESTful API. With all the validation, permission control, authentication and authorization."
django,31o67k,Joshka,-1,Thu Jul 2 02:26:53 2015 UTC,"Basically, you should be using it because it's a standard every credible developer understands. You don't have to explain HOW it works, just provide an API call list and anyone can use it immediately.  Furthermore, It's the standard most commonly supported by clients. You don't need to write a custom client, because browsers, curl, etc, already support it.  Then consider the fact that you don't need to write a custom server. Apache, Nginx, do that for you and if you don't want the overhead, most standard libraries in pretty much every language has a module which does Representational State Transfer for you."
django,31o67k,jollybobbyroger,0,Mon Apr 6 23:46:41 2015 UTC,"By making your web app restful, I suppose you can control it by sending HTTP requests. This means that anything that can send HTTP requests can talk to your web app."
django,31o67k,frankwiles,0,Mon Apr 6 21:50:31 2015 UTC,"Correct me if I'm wrong, but if I go to http://www.reddit.com/, then that means I am sending an HTTP request right?  Suppose my Django app's domain name is mydjangoapp.com. If I go to mydjangoapp.com from my laptop, phone, tablet etc., regardless of if my app is using the Django Rest Framework, can't all the devices still talk to my Django app?"
django,31o67k,jollybobbyroger,3,Mon Apr 6 21:55:29 2015 UTC,"You would have views and entries in urls.py for your ""web"" (aka HTML) data for users viewing your site in a browser.  django rest framework is a library that helps build JSON based API interactions for code (often written in other languages) to talk to your site.  Taking your reddit example, when in my browser I go to this thread (http://www.reddit.com/r/django/comments/31o67k/can_i_get_an_eli5_answer_to_what_benefits_does/) I get a usable webpage.  When I go to this URL with .json added to the end (a feature of Reddit) I get the JSON data of the page (link: http://www.reddit.com/r/django/comments/31o67k/can_i_get_an_eli5_answer_to_what_benefits_does.json) DRF would be useful for providing the later of those two."
django,31qptn,Anam_Habeeb,1 point,Tue Apr 7 12:41:42 2015 UTC,"If you add four spaces before each line of code, the formatting should work itself out."
django,31pm8y,DHarry,2,Tue Apr 7 04:02:58 2015 UTC,Googling Postgres reset user password gave the Postgresql docs page that answers the question.  Log in to postgres and use the command:  ALTER ROLE [username] WITH PASSWORD [new_password];
django,31pm8y,JoshAddington,1 point,Tue Apr 7 17:12:45 2015 UTC,"You should reset that user's password, using a superuser account. For obvious reasons, there's no way to ""recover"" it..."
django,31pm8y,rnevius,1 point,Tue Apr 7 06:04:27 2015 UTC,Do you have a ~/.pgpass file?
django,31oqve,cwurld,5,Mon Apr 6 23:33:56 2015 UTC,Sometimes your operating system or other applications rely upon certain python versions or package versions. Such as Yum on CentOS.  By using virtualenv you can isolate your applications requirements from those packages or even python versions which may come pre-installed with your OS (or which may get updated when you install patches).
django,31oqve,Ibuildwebstuff,4,Mon Apr 6 23:53:54 2015 UTC,"If you ever want to run multiple applications within the same virtual machine, virtualenvs can still be helpful to isolate dependencies.   Also, not that it would change things, but there is always a benefit in keeping your dev environment as close to production as possible. So if you're using virtualenv locally to run/test apps, you could keep the VMs the same as well."
django,31oqve,sankethkatta,3,Tue Apr 7 00:40:17 2015 UTC,"Some OS's like ubuntu use their own older Python and it gets a bit iffy if you want to use an alternate, more specific version. This is not a problem if you run a more metal linux but we use ubuntu for its wide support.  And I use virtualenv simply because I just don't want to worry about versions and package spaces and whatever.  Only downside is the hassle of setting it up (ansible of dooom)"
django,31oqve,brtt3000,1 point,Tue Apr 7 19:41:50 2015 UTC,"virtualenvs will be lighter weight. As I understand it, one box with multiple VM's will have to split a number of resources, memory, filesystems, etc. That will all take their toll on the server whereas they can be shared under virtualenvs. It probably really depends what you want to do with your multiple setups."
django,31oqve,colly_wolly,-1,Tue Apr 28 21:10:37 2015 UTC,It is mostly redundant in a VM. It's very redundant in a docker container.
django,31oqve,ivix,1 point,Tue Apr 7 09:05:34 2015 UTC,Is there any benefit to using docker if you know how to set up a virtualenv properly?
django,31pr88,Wargazm,3,Tue Apr 7 04:51:35 2015 UTC,"I had to check this for myself, currently I have files/images uploaded to specific folder/time settings.     app/field/%Y/%m/%d I submitted two identical files with the same filename at the same time, it appended a random string to one of the filenames. pic.jpg became pic_dj382hj.jpg"
django,31pr88,Airith,3,Tue Apr 7 07:33:47 2015 UTC,"that must be kinda new, I remember a few years ago that the file was overwritten, that's why I always generated random folders for each uploaded file like this  def upload_to(instance, filename):      return ""uploads/%s/%s""%(uuid.uuid4(), filename)"
django,31pr88,Brandhor,1 point,Tue Apr 7 09:32:40 2015 UTC,So are you able to keep the original filename somehow in your model?
django,31pr88,Airith,2,Tue Apr 7 15:01:20 2015 UTC,One had the original the other didn't. You'd have to do something like Brandhor said.
django,31pr88,Airith,1 point,Tue Apr 7 18:14:45 2015 UTC,"Let me clarify what I meant:   Let's say I'm building a picture locker.  Each user can upload their pictures to their own locker, then download them.  And my picture locker promises to maintain the file names.  Now, let's further suppose that I am an idiot.  Being an idiot, I chose to dump all pictures into one giant upload directory shared by all users.  I link the files that belong to a user via the database.  So when user a uploads ""pic.jpg"", before I rename it to ""whargarbl.jpg"" I need to save ""pic.jpg"" as a string somewhere.  That way when the user clicks ""download this pic"" I know to rename ""whargarbl.jpg"" back to ""pic.jpg""  What I don't know how to do is how to save ""pic.jpg"" anywhere.  I've found plenty of documentation on how to rename a user upload (all a variation on what Brandhor said) but none on how to rename it AND save to original name the user provided."
django,31pr88,Airith,2,Tue Apr 7 20:04:59 2015 UTC,"I'd assume most people wouldn't need the filename. You could add a description as a TextField to the model instead. But since you asked, in your view (or in the save method for the model/field) you would grab the filename and store it in a Char/TextField."
django,31p5bm,mrinos,1 point,Tue Apr 7 01:31:01 2015 UTC,Patient should be lower case when accessing the reverse. user.patient.dob
django,31obkh,otreblatercero,2,Mon Apr 6 21:36:42 2015 UTC,"Hello, I did the official Django tutorial like 4 times and I couldn't get it, then when I was disheartened I checked the tango with django tutorial and I understood most of it. What I did was following 1 or two chapters and I would make an app that copied the functionality of rango, then I would change bits to make it my own app, so, as I advanced through the TWD tutorial I advanced on my own app and reinforce all the knowledge. I have finished the tutorial and keep applying what I learned and adding things not covered. I can now search the django documentation and other resources with confidence."
django,31obkh,rnevius,1 point,Mon Apr 13 19:19:54 2015 UTC,"I'd recommend Python first, Django later"
django,31obkh,dsizemore,1 point,Mon Apr 6 21:54:51 2015 UTC,"Sounds like me. I'm a sys admin / support role by day and dabble with Django in my free time. You definitely need to learn Python first. I tried to jump into Django thinking I would learn Python along the way and I quickly found out that wasn't happening. I purchased ""Python in a day"" kindle book and read through it and then went through about 32 chapters of ""Python the hard way."" After those I felt like I was more able to grasp things in Django although I admit it still wasn't easy. I jumped in and started building a website and about seven months in or so I got the proverbial light bulb moment. I'm no expert but at least can make some sense of most things now."
django,31obkh,rnevius,1 point,Mon Apr 6 23:44:24 2015 UTC,"I am copying /u/nevius  I have written several scripts in Python. Admin type of scripts. So I am familiar with Python. I have been at it for three months now trying to convert all of my Bash admin scripts to Python and it has worked like a charm. It wasn't easy, especially at the beginning but I did it. And I mainly did it to learn python.  Here is is a gist of all the things I learned in three months with Python.  I must admit, classes is something I need to get more comfortable with at a functional level. I learned classes but have not used them in any of my scripts.   Get a listing of all subdirectories and their size on a Linux system. Present it in a human readable manner Get a listing of all running processes, their owner and their RAM usage. Calculate Apache MaxClient setting by calculating the System's RAM usage while Apache is running and while Apache is not running by taking into account the largest Apache process running at the time Centos 7 – PostgresSQL9.4 : Check if Python Modules and PostgreSQL packages are installed and install them if missing. PostgresSQL9.4 – Check if PostgresSQL is installed. If not, install it and setup a Database with roles Check IPs for DNS entries and see if host is UP or DOWN, check SSH login. Export info to a CSV file PSQL postgresql Client check and installer. Replace a string in multiple files with in a directory. Search for specific types of files and rename the files or part of the files Change one specific extension type of files in a directory that contains multiple types of extensions Parse files from yum directory to check if links are up/down before executing yum on Centos. Searching for text in files within a directory Check IPs for DNS entries and see if host is UP or DOWN. Export info to a CSV file Fabric: Connect to a remote server and execute few simple commands. Get hostname and IP from remote hosts. Capture dynamic system info and write it in a PostgresSQL 9.4 database ElementTree XML parser Parse through an XML file generated by Nmap and generate report Scan network for a specific service and send a string via socket to obtain more information about the running service. Use threading to get all quotes from all NASDAQ symbols. VLSM CIDR Subnet Calculator   These are all the modules I used so far.   Classes  Functions Modules  argv  CSV  ElementTree  fabric  humanize  math  netaddr  netifaces  nmap  NmapParser  OS  paramiko  platform  psutil  psycopg2  pwd  re  shelve  SOCKET  subprocess  sys  threading  urllib  urllib2"
django,31md0i,Stanulilic,4,Mon Apr 6 12:25:44 2015 UTC,"Ignoring the model for a moment1 , let's examine how Reddit operates (in other words, let's describe the domain of the problem):  First, you have users, who can do some actions in the side. Django already has this, so you don't need to worry too much about it for now.  Second, users can create subreddits, which are ""groups"" about related stories (or, at least, that's what we expect). Subreddits have a name, an owner (for the sake of easiness, let's keep just one owner) and a bunch of moderators.  class Subreddit(models.Model):     name = models.CharField(max_length=30)     owner = models.ForeignKey(get_user_model())     # I *think* it's get_user_model()     moderators = models.ManyToManyField(get_user_model())   Then you have stories, which are URLs or texts posted to Subreddits. No matter which type of story you post, they have a title, people who upvotes and people who downvoted (and I'll skip the shortlink, but it could be kept here). Link stories have a single link and text stories have a textfield but no link.  class Story(models.Model):     title = models.CharField(max_length=100)     subreddit = models.ForeignKey(Subreddit)     # those two probably need some more thought     upvorters = models.ManyToManyField(get_user_models())     downvoters = models.ManyToManyField(get_user_models())  class LinkStory(Story):     link = models.URLField()  class TextStory(Story):     text = models.TextField()   ... or something like that (I'm far from my Python machine, so I can't run the code right now).  And, after all that, my suggestion: When you write first, in plain English (or your native language) the requirements for your project, everything else comes naturally.  [1] Actually, it was your model that made me thought about all this, due the ""moderator"" being a part of the story."
django,31md0i,juliob,2,Mon Apr 6 12:58:26 2015 UTC,"I believe reddit stores Text and Link submissions in the same table. A few years ago, you could (through some API tomfoolery) submit both text and a link together and have both show up on the same comments page. (Then again, years ago, I'm pretty sure they had two tables for everything and kept the metadata in one and the submitted content in the other.)  I personally would have a Submission() model and either have a type field or imply the submission type based on which link/text field has content. Removes the need to do a join when selecting submissions to display on a front page."
django,31md0i,ceol_,1 point,Mon Apr 6 19:31:33 2015 UTC,"That's another possibility. I used the hierarchy stuff to show how Django can use OO models.  On a related note, I'm not sure if the base class (Story) being the one with the ForeignKey to Subreddit wouldn't create a Subreddit.story_set back or the two subclasses (linkstory_set and textstory_set). Again, I'm not on my Python machine so I can't test."
django,31md0i,juliob,1 point,Mon Apr 6 20:25:41 2015 UTC,"Wow, thank you very much, I have finally had a massive load off my chest. I was really stressed out because I didn't know where to start. Thanks you to you I now know the direction I should take.   And, after all that, my suggestion: When you write first, in plain English (or your native language) the requirements for your project, everything else comes naturally.   I have never thought of this method before. I guess it is about time I start spending more time designing a program on paper before I start coding it.   I hope am not bothering you but do you know any good django-apps that would help me clone reddit."
django,31md0i,juliob,2,Mon Apr 6 13:41:24 2015 UTC,"I hope am not bothering you but do you know any good django-apps that would help me clone reddit.   Sorry, no. Actually, I never really tried to find something that would do that.  There is a massive list of Django apps around (first result for something like that was https://www.djangopackages.com/  but I'm not sure how good it is). But, at the same time, it's interesting to write something simpler just to get a ""hang"" on how Django works and then jumping to ready-made apps, so you'll understand what the apps are doing."
django,31md0i,bigirnbrufanny,1 point,Mon Apr 6 13:45:58 2015 UTC,"Okay, thanks for your time."
django,31md0i,Ibuildwebstuff,1 point,Mon Apr 6 14:05:20 2015 UTC,"You could have a look at Drum   From the link:-  Created by Stephen McDonald  Drum is a Reddit / Hacker News clone, built using Mezzanine and Django. It is BSD licensed, and designed to demonstrate some of the non-CMS capabilities of Mezzanine, such as threaded comments, ratings, and public user accounts.  Check out the blog post Building Social Apps with Mezzanine, which contains a detailed walk-through of how Drum was built. A live demo of Drum is also available."
django,31md0i,Ibuildwebstuff,11,Tue Apr 7 09:32:36 2015 UTC,git clone git@github.com:reddit/reddit.git
django,31md0i,Mekhami,2,Mon Apr 6 14:07:24 2015 UTC,I already have the source code but I just can't understand it. It is just too complicated and I don't know pylons too.
django,31md0i,Joshka,11,Mon Apr 6 14:11:20 2015 UTC,"I was being (mostly) facetious, but I also wanted to point out that Reddit is opensource, as some people might not have known that (and it is Python).  However not knowing Pylons shouldn't put you off. You don't have to 100% grok the code to get an idea of how it's structured. I don't know Pylons either but I had a quick look, this is my train of thought while looking at how they structure their post models.   Most of the folders in the root sound like deployment related things (upstart, scripts, sql) what is r2? Reddit version 2 maybe?  Ok cool, this looks more promising, what's in models No post model, but there is a link.py lets try that Awesome! This looks like a post It inherits from Thing. Where does Thing come from? So I've found Thing and cool, this is where a bunch of the properties get added   and so on. Of course I don't understand all of the code yet, but in just a couple of minutes I can start to build a mental map of how it is structured.   Being able to read and understand someone else's code is more important than being able to write code."
django,31md0i,dvidsilva,1 point,Mon Apr 6 14:58:16 2015 UTC,You would do well by checking out the python PRAW library. I learned quite a bit about reddit and how it might be designed by reading through that source code.
django,31md0i,Joshka,1 point,Mon Apr 6 14:04:42 2015 UTC,Thanks for the link. I will check it out
django,31md0i,dvidsilva,0,Mon Apr 6 14:11:52 2015 UTC,Here's what I'd do.  Create each sub-reddit as it's own stand-alone Django application. Pop it into a LXC container and then clone that container each time a new sub-reddit is created.
django,31md0i,Joshka,4,Mon Apr 6 16:41:37 2015 UTC,/r/shittyprogramming
django,31md0i,dvidsilva,2,Mon Apr 6 17:08:03 2015 UTC,"Serious question. How so? It's a valid technique. You'll see it a lot more in the future as containers gain popularity.  It's preferable even, (compared to a monolithic build) if only for the sake of load balancing and maintaining sanity.  There was actually a really good MIT course posted on Youtube that went over this. I'll try and find it..."
django,31md0i,Joshka,2,Mon Apr 6 17:45:16 2015 UTC,"I thought you were joking.  Every subreddit would be the same codebase and you will ""copy paste"" it many times?   would each one of them have its own database? if so I would have to create an user for each db.  If not, then the db is going to be a bottle neck the same way that it would be in an 'alternative' solution and you wouldn't have gain anything. Db is the hardest part when scaling a system*  Many subreddits have little traffic, while others have a lot, you would be wasting a lot of money on those machines running with little traffic and having scale issues on the machines with a lot of traffic.  If you change some code in one of them you would have to replace it on all the other instances, if a subreddit has a special design or configuration how would you administer it when the code is all the same.  Those came to my mind quickly but there's probably a lot more."
django,31md0i,dvidsilva,3,Mon Apr 6 17:54:21 2015 UTC,"BTW... Here's the MIT video I promised that kinda goes over the technique. I've implemented it in my own systems and am happy with the results.  Anyway, I kinda oversimplified the solution and didn't explain it well, so I guess it could have been misconstrued as a bit sarcastic. But roll with me here. I'm not joking.  In such a system yes, there would be multiple databases. But that's OK as a sub-reddit is, for the most part an ""isolated system"". It would of course communicate with a centralized ""auth system"" which itself is an isolated application. then you would also have a ""router"" application which manages and balances traffic.  It sounds kinda complicated because ""It's not a normal way of doing things"", but in the future I see it becoming a standard.  Anyway, It's not an easy concept to explain here in brief. Watch the video. Let me know if you have any questions.  I also reccommend looking into vibed which kinda embraces this idea."
django,31md0i,Joshka,1 point,Mon Apr 6 18:09:10 2015 UTC,"I can't watch the whole video now, but if it's privilege separation I think that wouldn't be a sound implementation.  In django you can create multiple applications and have a 'parent' one that uses/loads all of them, each application can have it's own processes, access to certain resources, and be used in a different project if needed; there's lots of advantages to this, we do it at work.  The difference with this and your approach is that the kind of system to implement what you suggest would remove some of the advantages of this. Usually you would want to identify components or modules of your application you can separate and have them in different apps, for example everything auth related will go in a different app, profiles will go in another and so on. They can share models, constants, databases and some resources and some others can be isolated, and you can replicate or increase the resources of the heaviest utilized ones and reduce on the other parts.   This is a good answer on this http://stackoverflow.com/a/11491940/1603521 we might be talking about different stuff tho :P"
django,31md0i,hylje,1 point,Mon Apr 6 19:54:18 2015 UTC,"The MIT course was specifically about privilege separation (Which isn't really what we are talking about), but the technique (in general) does apply to what we are talking about. (Think of privilege separation as an added security bonus)   In django you can create multiple applications and have a 'parent' one that uses/loads all of them, each application can have it's own processes, access to certain resources, and be used in a different project if needed; there's lots of advantages to this, we do it at work.   Yes, that is essentially what we are talking about here. Except there isn't a ""Parent"" they are all peers which do a specific job. (sub-reddit, auth, routing, etc.) Think in terms of Unix Philosophy: ""Do one thing and do it well""  We are just moving from a ""monolithic system"" to a ""distributed system"". We put apps in containers so they can be distributed better. LXC Containers are not necessary, but they make a lot of headaches go away. (Especially when it comes to databases)   Usually you would want to identify components or modules of your application you can separate and have them in different apps   Exactly.   for example everything auth related will go in a different app   In this case, I would use LDAP and have each application communicate with that as needed.   profiles will go in another and so on. They can share models, constants, databases and some resources and some others can be isolated, and you can replicate or increase the resources of the heaviest utilized ones and reduce on the other parts.    Sounds like we are on the same page. Essentially, the only difference between this technique and a ""normal"" django app is that each app functions as a stand alone application and can be cloned and distributed as needed. If one app depends on another they can communicate normally through models, HTTP, DBus, rabbitmq, etc."
django,31md0i,Joshka,1 point,Mon Apr 6 20:36:14 2015 UTC,"ok, yeah I feel we're on the same page, I just think that the separation could be better done in a different place.  Instead of each subreddit being it's own application maybe the separation should be in commenting, users, routing, assets, moderation tools, etc; because a subreddit will probably need a lot from all of them."
django,31nko6,kaizen_cucumber,3,Mon Apr 6 18:23:35 2015 UTC,"You can't include more than one view per template. However, you can:   Take view logic, place it into functions or classes, then use that in your single view. This is pretty straight-forward, and the recommended approach. Use multiple-inheritance with Class-Based Views to expose more logic in your view. This approach can be challenging."
django,31nko6,pydanny,1 point,Mon Apr 6 18:52:54 2015 UTC,"I do like option 1 because of it's simplicity. I had thought of doing this before, but wasn't sure where I should put that file. I was thinking of utils.py (which I think I heard of thanks to your book which I'm just diving in to). Would that be the best file or is there a better option that's more used?"
django,31nko6,pydanny,1 point,Mon Apr 6 18:58:44 2015 UTC,"utils.py is a good place to start. Whatever you do choose, use that convention across your project. :-)"
django,31nko6,apreche,2,Mon Apr 6 19:10:53 2015 UTC,"If there is a bit of something that is included on multiple pages, that's usually a sign to me that it should be a template tag of some kind."
django,31kusi,ramsesthedog,7,Mon Apr 6 01:18:18 2015 UTC,"This seems like a great opportunity to improve the existing code there. Download it, runs the projects tests on a Django 1.8 install and see what happens! Hopefully it will run okay and any small changes can be made.   Contribute and get what you want while supporting others!"
django,31kusi,tsodv,1 point,Mon Apr 6 10:22:45 2015 UTC,"This! To the OP: this a huge point of tests. Since this app is well-covered, all you should have to do is run the tests and it'll tell you exactly what needs to be upgraded."
django,31kusi,rnevius,2,Mon Apr 6 10:44:35 2015 UTC,Considering it's a very small app/repo and most files in it are <25 lines of code there's not much that can go wrong and updating anything broken to be 1.8 compliant should be easy as pie if need be.
django,31kusi,loptr,-9,Mon Apr 6 10:02:33 2015 UTC,"Doesn't sound terribly useful to me. What's your use case? Would it be such a big deal to require a real account from the beginning?   UPDATE Whoa people, I said nothing that would justify a downvote. Calm down."
django,31kusi,dAnjou,3,Mon Apr 6 02:42:57 2015 UTC,Conversions
django,31kzqq,Kareck,2,Mon Apr 6 02:00:06 2015 UTC,"I think this would be best handled by a custom template tag.  https://docs.djangoproject.com/en/1.8/howto/custom-template-tags/   You'd write the tag then include it in your footer on your base template (or wherever) and it would include the same form in every url/view.  Read the docs for the best example. But I did something very similar and love twilio.   Edit:  I'm in mobile else I'd give some better code examples, but if you go to the link above and scroll down to ""Writing custom template tags"" (skip past the filters and such) you see some good examples. Look at the inclusion_tag in particular."
django,31kzqq,teewuane,1 point,Mon Apr 6 05:31:38 2015 UTC,"Great reply, thanks for the response! I'll give it a shot and tell you how it goes.  Update: Through the inclusion tag I managed to embed the form on every webpage through my footer and allowed the button to send an SMS through Twilio when I had the phone number hardcoded in.  Update 2: I figured out the issue. I made a silly mistake and forgot to add value=""{{ phone_number }} the input tag in the form. Thanks for the help!  Now i'm attempting to send the SMS via a user submitted number however my form is failing the if form.is_valid(): check. My code is below (with identifying features removed), any suggestions? I'm assuming it is because the user input isn't properly getting passed to that function.  app_name/custom_tags.py  @register.inclusion_tag('text_user_link.html', takes_context=True) def text_user_link(context):     request = context['request']     if request.method == 'POST':         account_sid = config['twilio_key'].get('twilio_account_sid')         auth_token = config['twilio_key'].get('twilio_auth_token')         client = TwilioRestClient(account_sid, auth_token)          form = TextLinkForm(request.POST)          if form.is_valid(): # All validation rules pass             user_number = form.cleaned_data['phone_number']             message = client.messages.create(to=user_number, from_=""+TWILIONUMBER"", body=""Test from button"")         else:             print(""FORM FAIL"")      return {}   app_name/forms.py  from django import forms  class TextLinkForm(forms.Form):     phone_number = forms.CharField(max_length=20)   project_folder/text_user_link.html  <form action="""" method=""post"">  {% csrf_token %} <input id=""phone_number"" type=""text"" class=""text-link-form"" placeholder=""xxx-xxx-xxxx""> <input class=""btn btn-default btn-text"" type=""submit"" value=""Send Text""> </form>"
django,31lqit,spookyrufus,3,Mon Apr 6 06:36:02 2015 UTC,You're going to need to post your changes to models and your most recent migration.
django,31lqit,Airith,0,Mon Apr 6 07:20:52 2015 UTC,"for example, last one. I deleted a model and ran makemigrations. the models.py in question contained only 3 simple models. I deleted one, ran makemigrations, no changes detected.  Or if I change a field in an existing model, same story."
django,31lqit,rnevius,2,Mon Apr 6 07:29:25 2015 UTC,You should consider posting your the contents of the most recent migration for one of your apps.
django,31lqit,rnevius,0,Mon Apr 6 07:38:04 2015 UTC,"I now deleted all migrations trying to fix the issue, so I can't do that.   edit: you mean the actual migration py file, right?"
django,31lqit,CrimsonRay,2,Mon Apr 6 07:40:37 2015 UTC,"Yes...But if you deleted all the migrations, you need to run migrate in order to generate your initial migrations. makemigrations will do nothing until you have initial migrations already applied."
django,31lqit,colly_wolly,1 point,Mon Apr 6 07:43:06 2015 UTC,why the downvotes??
django,31lqit,rnevius,0,Mon Apr 6 11:31:47 2015 UTC,"yep. did migrate. Then made change to models, tried makemigrations, still no changes detected."
django,31lqit,rnevius,2,Mon Apr 6 07:48:03 2015 UTC,Could you post your models.py?
django,31lqit,danielsamuels,1 point,Mon Apr 6 15:27:00 2015 UTC,"Sure thing,  here you go."
django,31lqit,rnevius,2,Tue Apr 7 06:10:38 2015 UTC,"I had a similar problem when I migrated from 1.6 using South to 1.7.  The problem was I had a script that copied my production database to my dev machine along with the migration files. (It worked well with South, keeping both machines in sync). Reading the docs, it seems that I was doing things back to front, I should have  1) created migration files on my dev machine (manage.py makmigrations)  2) migrated the dev machine (manage.py migrate) 3) Copy models.py and migrations.py to prod 4) migarte production, without makemigrate on prod (manage.py migarte)   Anyway, now that things are out of sync, two things to check  1) yourapp/migrations.py and see what ones are in there.  2) also look in the django_migrations table. Delete any entries that don't seem to be in synch, and related migration files.   For me it was easier to delete both and set up migrations again from scratch (I am using MySQL, ad backwards migrations are unlikely to be used)."
django,31fbb4,garfonzo,15,Sat Apr 4 15:16:43 2015 UTC,"Don't work on the master branch...Work on your own feature branches, and merge into master when you're done with a feature."
django,31fbb4,rnevius,12,Sat Apr 4 15:26:08 2015 UTC,"Better still:   Don't work on the master branch.  Create a 'develop' branch that you use for development, then work on your own feature branches, and merge into develop when you're done with a feature.    Merge into master after you've verified that all tests and continuous integration suites are passing cleanly."
django,31fbb4,issue9mm,4,Sat Apr 4 17:25:41 2015 UTC,"Well sure, why not go the extra mile and create official release tags, hotfix branches, and a release candidate branch. A full ""gitflow workflow""..."
django,31fbb4,rnevius,7,Sat Apr 4 17:56:39 2015 UTC,This is the branching model I've been following.  Works amazingly well.
django,31fbb4,d4rch0n,3,Sun Apr 5 06:45:31 2015 UTC,"That's the ""gitflow workflow"" I was referring to."
django,31fbb4,rnevius,2,Sun Apr 5 07:07:37 2015 UTC,"This is the branching model I've been following.   I just read through that article. This looks like a solid development model, one I will likely adopt. Thanks for this link!"
django,31fbb4,issue9mm,3,Sun Apr 5 14:00:12 2015 UTC,"I stopped short of going full gitflow, but not for any good reason.  Just, to me, the idea that master should always be deployable is the best core tenet of gitflow, and it's easily accomplished by not pushing to it willy nilly until tests coverage and passage are confirmed."
django,31fbb4,issue9mm,1 point,Sat Apr 4 18:20:48 2015 UTC,"This sounds like an interesting way to go about managing the project without having full, separate ""development"" server and separate ""production"" server. Just have more main branches. Once everything is smooth, only then does it get merged to master."
django,31fbb4,AeroNotix,2,Sun Apr 5 00:46:27 2015 UTC,"Development server for me is usually a vagrant box, or docker image (running on Vagrant usually).    ""Stage"" and ""test"" boxes are usually just CircleCI hooks."
django,31fbb4,skolsuper,1 point,Mon Apr 6 17:10:08 2015 UTC,Then why does it get merged into develop unless it's passed CI et al?  The extra develop branch is unnecessary if you were to just run your CI suites against the branch you merge your feature branches into.
django,31fbb4,leftrightupdown,1 point,Sun Apr 5 13:39:38 2015 UTC,"I never work on the master branch, either when working solo or in a team."
django,31fbb4,deviantpdx,1 point,Sat Apr 4 15:49:04 2015 UTC,"Problem solved then. Do early pull requests: when you start on a new feature, branch and open a pull request right away, that way the other guy is aware of your branch, can make comments or suggestions (if you're using github/bitbucket etc) if needed, and will be made aware of any migrations added."
django,31fbb4,hueoncalifa,8,Sat Apr 4 17:21:04 2015 UTC,"here is 10 years of experience in company that works just fine   Get a ticketing solution, it helps, describe work in tickets with details. Redirect work from / to each other with tickets. If its not in ticket then its not a task. Talk to person that needs to do ticket before you write ticket, arrange all details and then write what you talked and agreed that needs to be done  Talk near whiteboard, sketch the app, get the design more or less right Get a mockup app , balsamiq or similar and sketch out what you need to do. Picture is worth 1000 words If you don't have, and you can afford, get someone who likes and does UX. Also if project is big you can hire ux guy per project, it will save you time doing iterations to get happy clients Code ownership, if you touch a class its yours, bugs are fixed by you unless its really really urgent which should be really rare. That way everyone spends his time improving his code and not looking around what has changed in his code About backend /frontend work.. html guys know a bit of django, enough for basic view. If something more important is needed then its handled by backend team, which writes functionality with API which communicates to frontend via ajax or is in backend/ directory which is just plugged into view"
django,31fbb4,LittleHelperRobot,1 point,Sat Apr 4 17:41:44 2015 UTC,"This is great advice, thanks! We'll look into implementing some of these points."
django,31fbb4,autowikibot,1 point,Sun Apr 5 00:44:25 2015 UTC,I was looking for his post. My team works on the same django project day in and day out and the main thing that helps us is having tickets/stories to split up the work. Once you break all the work up into stories there is very little difference between doing them yourself or with a team.
django,31fbb4,ludw,1 point,Sun Apr 5 03:28:11 2015 UTC,"Once you break all the work up into stories   What do you mean by ""stories""? Do you mean the apps within the project? I generally split up a project into apps of similar logic, so maybe that's the same idea?"
django,31fbb4,dAnjou,1 point,Sun Apr 5 03:33:53 2015 UTC,"When he says stories, he's talking about tasks. He probably comes from an 'Agile' background- here's some info. http://en.m.wikipedia.org/wiki/Agile_software_development"
django,31fbb4,dAnjou,1 point,Sun Apr 5 06:57:42 2015 UTC,"Non-mobile: http://en.wikipedia.org/wiki/Agile_software_development  That's why I'm here, I don't judge you. PM /u/xl0 if I'm causing any trouble. WUT?"
django,31fpn2,TheLameloid,3,Sat Apr 4 17:25:51 2015 UTC,"You could try, except instead.  try:     # django 1.8 except [[exception that 1.7 throws]]:     # django 1.7"
django,31fpn2,plum_dog,3,Sat Apr 4 18:16:41 2015 UTC,What's the advantage of   try    over   if    statements?
django,31fpn2,hueoncalifa,2,Sun Apr 5 07:26:18 2015 UTC,"It's just a bit less brittle. If (in my example above) Django 1.7 changed to work the way 1.8 does, try-except would still work, but version checking wouldn't.  Though with something as stable as Django, changes like this are unlikely, but it's probably a better habit to be in than version number checking."
django,31fpn2,plum_dog,1 point,Sun Apr 5 08:47:55 2015 UTC,"if thingThatDoesNotExist:    print(thingThatDoesNotExist)   ...Will halt program execution. But ...  try:     if thingThatDoesNotExist: except:     print(""thingThatDoesNotExist does not exist"")   ...Will allow your code to continue to the next statement."
django,31fpn2,tpugsley,1 point,Sun Apr 5 08:01:00 2015 UTC,"Yes that's how try works, but why use try in this context?"
django,31fpn2,Etlam,2,Sun Apr 5 12:55:13 2015 UTC,"Why does people think if version > some version is hacky? It doesn't get any cleaner than that!? the alternative would be specific versions of the package targeting django versions. Which is actually an okay way to do it, though further development would get tedious."
django,31fpn2,Etlam,1 point,Sun Apr 5 12:55:46 2015 UTC,"Why you think its too hacky? It's actually became very clear solution, when  time to drop old django versions support came.  Another approach - to implement new django version api based on old django code."
django,31fpn2,kmmbvnr,1 point,Sun Apr 5 04:00:26 2015 UTC,You can just make your test runner ignore all migrations and just create the database syncdb style.
django,31fpn2,danielsamuels,0,Sat Apr 4 19:58:13 2015 UTC,import django django.get_version() >>>1.6.1   you can use this pattern for if conditions
django,31gld5,meepleproject,3,Sat Apr 4 21:59:26 2015 UTC,"The problem is that get() has to call self.list()to paginate the data, which yours doesn't do.  Check here in DRF's source code to see what I mean.  You can probably just override get_queryset() and leave the rest to DRF's default behavior, since that's the only part that needs to be customized.  Check DRF's default get_queryset() method for inspiration."
django,31gld5,TheKuchenBurglar,1 point,Sun Apr 5 01:08:21 2015 UTC,"Thanks, I was trying to override get_queryset(), but I didn't found out how to override it because I needed pk.  But now I finally found out :)  lookup_url_kwarg = ""pk"" def get_queryset(self):     pk = self.kwargs.get(self.lookup_url_kwarg)     obj = self.get_object(pk)     return obj.game_set.all()   Thanks for you help!"
django,31gld5,TheKuchenBurglar,1 point,Sun Apr 5 09:15:33 2015 UTC,"No problem.  A side note:  I don't think you need to manually fetch the PK of the object.  It should be as simple as obj=self.get_object() and returning obj.game_set.all().  DRF's built-in get_object behavior should get the parent object for you, as long as you've defined the lookup_url_kwarg and model attributes on the view class.  I'm actually kind of surprised that feeding the PK into self.get_object() didn't throw an error, since the only variable it accepts is a Django queryset object.  But hey, if it works, it works right?"
django,31gld5,TheKuchenBurglar,2,Sun Apr 5 18:17:03 2015 UTC,"yeah, it was working :)  I change it to:  def get_queryset(self):     pk = self.kwargs.get(self.lookup_url_kwarg)     obj = get_object_or_404(self.klass, pk=pk)     return obj.games   So I can have abstract class for different classes"
django,31fmab,jlorencetti,3,Sat Apr 4 16:57:45 2015 UTC,"Are you sure that the issue is that your user_id is not 1? If you run the test by itself does it work? Can you reverse instead of hard-coding the id into the test? reverse(""user_edit"", args=[user.id]) should work.  If those don't tell you enough, paste the smallest test here so we can take a look. I think you are saying this should fail:  from django.test import TestCase class UserCreate(TestCase):     def test(self):         user = get_user_model().objects.create_user(             username='username',              password='password')         self.assertEqual(user.id, 1)"
django,31fmab,Whoopska,1 point,Sat Apr 4 20:34:56 2015 UTC,"Yes, if I only run this particular test it pass. Sure I can use a reverse but I found the situation strange and decided to ask.  I think the most important part of the test class is here, but I'll be open source the whole stuff tomorrow. :)"
django,31fmab,Whoopska,3,Sat Apr 4 22:57:23 2015 UTC,"If this test alone passes, it seems like there is another test that is not cleaning up after itself. Do you have any TransactionTestCases, SimpleTestCase, or unittest.TestCases that might be polluting the users table? (note that even if a transaction test case cleans up after itself, the auto increment wont be reset since there is no transaction (horrible name imho))"
django,31fmab,erewok,1 point,Sat Apr 4 23:50:45 2015 UTC,"As I said yesterday, the whole code is here, the real name of the model with ""problem"" is Pet, used User to be more easier to understand. It's not 100% english yet, but the most important part is.   Thanks for you answers they gave my some insight.  Also, from the PostgreSQL docs:   Important: To avoid blocking concurrent transactions that obtain numbers from the same sequence, a nextval operation is never rolled back; that is, once a value has been fetched it is considered used, even if the transaction that did the nextval later aborts. This means that aborted transactions might leave unused ""holes"" in the sequence of assigned values. setval operations are never rolled back, either."
django,31fmab,Whoopska,2,Sun Apr 5 14:07:37 2015 UTC,"Well, your tests aren't guaranteed to run sequentially, so if you have other test methods in this test class (you said it's part of other code) then they're all setting up users and possibly deleting users, you'll have no idea what the pk is going to be for this test method and no idea what pks are valid.  That's why you should do:  pet = self.pet_creator() url = ""pet/{id}/edit"".format(id=ped.it)"
django,31fmab,erewok,2,Sun Apr 5 03:24:19 2015 UTC,"I'd stick to reverse(""user_edit"", args=[user.id]) or else you'll run into problems trying to change the urls."
django,31fmab,erewok,2,Sun Apr 5 03:49:46 2015 UTC,Fair enough. That makes sense to me.
django,31fmab,erewok,1 point,Sun Apr 5 03:53:26 2015 UTC,I'll be doing it. Thanks.
django,31ewcs,_under_,2,Sat Apr 4 12:21:51 2015 UTC,What are the advantages of this over django-behave?
django,31ewcs,callistotbh,2,Sat Apr 4 13:43:54 2015 UTC,"A few things.   You choose where your feature folders are set up Automatic database transactions You can use Django's test client You can use unittest + Django's assert library   It's been tested on Python 3.3 and 3.4 with no issues. But I heard behave itself has issues with Python 3.x, behave-django can't really do anything about that. :/"
django,31ewcs,kmmbvnr,1 point,Sat Apr 4 14:19:21 2015 UTC,"if it have no py3.x issues, it should looks better"
django,31anhc,kmmbvnr,14,Fri Apr 3 10:14:21 2015 UTC,"Hi, guys!  I am happy to announce first public release of django-material.  Djando-material provides Material Design for Django forms and Administration with easy template driven rendering.  Forms are pretty useful already,  work on admin part is on initial stage. Only basic admin features are available.  Feel free for any questions.  Mikhail"
django,31anhc,OriginalEnough,11,Fri Apr 3 10:17:07 2015 UTC,Why do you have to log in to a repo account to see the documentation?
django,31anhc,OriginalEnough,2,Fri Apr 3 18:11:29 2015 UTC,"yep, that's artifact from viewflow/pro docs. I need some time to disable it."
django,31anhc,qbitus,1 point,Sat Apr 4 13:56:14 2015 UTC,"Fair enough, and I'm glad to hear it."
django,31anhc,lehmakook,8,Sat Apr 4 14:00:26 2015 UTC,"took a quick look at it and django-viewflow and it's rather impressive. Keep up the good work, and thank you for open sourcing, great to see quality libraries addressing business-related use-cases..."
django,31anhc,Skiba_,2,Fri Apr 3 12:37:49 2015 UTC,"I love their pricing model: free on Python 3.3+, paid if you want 2.7 support :)"
django,31anhc,lexbuck,6,Sat Apr 4 12:21:42 2015 UTC,"This looks really good.  I do have one point I'd like to bring up. The main reason I never use any form-utils like this (crispy, bootforms, etc) is that I feel like I can't control my fields the way I want. It's {% load form %} or nothing. It'd be awesome to have more field-level loading options.  Again, great work"
django,31anhc,rickmoranus,2,Fri Apr 3 16:11:59 2015 UTC,This is a great point and I'm the same. I like to have more control over my forms for styling purposes.
django,31anhc,jollybobbyroger,2,Fri Apr 3 22:22:20 2015 UTC,"Same here! This is pretty powerful, might check it out if you haven't already.  https://docs.djangoproject.com/en/1.8/ref/forms/api/#more-granular-output"
django,31anhc,jollybobbyroger,3,Sat Apr 4 14:40:42 2015 UTC,"When I viewed the examples on a 1080 pixels wide screen, the label text was broken into multiple lines were the line break would render some of the label text on top of the text field.    I really hope these things gets fixed, as it really is a beautiful theme that I would love to use for my web site."
django,31anhc,rnevius,2,Fri Apr 3 21:07:20 2015 UTC,"Could you show me screenshot/browser/os?  I see the problems with long labels on small screens, but not for 1080 wide."
django,31anhc,kingkilr,2,Sat Apr 4 13:57:41 2015 UTC,"FF36, Linux x86_64: http://imgur.com/bvmG09G"
django,31anhc,Brachamul,2,Sun Apr 5 00:08:47 2015 UTC,"yeh fixed, that's mutch better - https://www.uploady.com/download/UPv2xUEXDc_/SvFozBy25W8Wz5YG"
django,31anhc,hoonboof,2,Sun Apr 5 04:41:18 2015 UTC,Great work on those forms! Excited to see this...materialize...
django,31anhc,commanderCool09,2,Fri Apr 3 10:22:14 2015 UTC,Did someone change the password on the admin? I can't seem to log in.  Looks awesome though!
django,31anhc,teewuane,1 point,Fri Apr 3 19:57:26 2015 UTC,"looks good, keep at it"
django,31anhc,MattBD,1 point,Fri Apr 3 11:44:20 2015 UTC,"I was just gearing up to start writing something like this, how convenient!"
django,31anhc,lesuspect,1 point,Fri Apr 3 15:26:04 2015 UTC,This is gorgeous
django,31anhc,lesuspect,1 point,Fri Apr 3 16:36:06 2015 UTC,I'm installing this when I wake up in morn. Looks way good!
django,31anhc,AnActualWizardIRL,1 point,Sat Apr 4 06:37:53 2015 UTC,"Great project! I've been looking for a decent admin skin for a while and I really like this one.  I've noticed a couple of typos, so I have submitted a pull request."
django,31anhc,lesuspect,1 point,Sat Apr 4 12:13:10 2015 UTC,"yep, thanks!  Actually, any help, especially with design ideas for the admin is highly appreciated."
django,31anhc,lesuspect,1 point,Sat Apr 4 13:59:02 2015 UTC,"Super nice layout. It changes from all the suits and other grapellis.  But I have a model in the admin with an GenericTabularInline, and the inline doesn't show. I get the ""ManagementForm data is missing or has been tampered with"" error."
django,31e9p0,that_thisGuy,3,Sat Apr 4 06:04:23 2015 UTC,Do you have the app listed in INSTALLED_APPS in settings.py?
django,31e9p0,teewuane,2,Sat Apr 4 06:51:34 2015 UTC,"The app is listed in INSTALLED_APPS in the settings.py INSTALLED_APPS = (     'django.contrib.admin',     'django.contrib.auth',     'django.contrib.contenttypes',     'django.contrib.sessions',     'django.contrib.messages',     'django.contrib.staticfiles',     'pd',     'stdimage', )  (pd is the name of my application)"
django,31e9p0,josh_legs,2,Sat Apr 4 07:04:58 2015 UTC,"check to see if you're in a virtualenv and that you're using the program inside that virtualenv. If you installed it inside the virtualenv but arent inside that venv, or vice versa, it would give this error, i believe."
django,31e9p0,josh_legs,2,Sat Apr 4 06:28:09 2015 UTC,"I'll give that a shot, but I don't think that the case as I'm not running a virtualenv in my dev environment (I'm currently running python 3.4.2 on a windows machine)"
django,31e9p0,josh_legs,2,Sat Apr 4 07:08:02 2015 UTC,Sounds like you're accessing a global install of Django or something simliar. Especially if you're using it inside your application and it works there. IDK how things work on windows tbh. Ubuntu user here. But this kind of error usually shows up when I'm using a different Django install than the one that i'm using for the application I'm in. That's the only thing I can think of that would give a remotely similar problem.
django,31e9p0,tpugsley,2,Sat Apr 4 07:13:32 2015 UTC,"Thanks for the help, most of the guides and docomentation for django I use mainly seem to be targeted for linux use. So there may indeed be something I've forgot to setup differently for windows, which I'll look into now. Cheers"
django,31e9p0,iamwithnail,1 point,Sat Apr 4 07:20:20 2015 UTC,"Yeah, sorry I can't help more. I remember windows being a big pain to even get python set up on when I played with it on my old work computer, let alone Django.  How did you install the library? through pip? One thing that might help is to have your application print a log out in the application log of where it's importing the library from. That may help you get a clue how the module is installed on your computer, and might give you clues how to access it from the django manage.py command."
django,31cd84,timworx,2,Fri Apr 3 19:26:33 2015 UTC,"the default variable name in the template is object_list, did you change context_object_name to ""site"" ?  also is it a foreignkey from site to category or from category to site? if it's the former you have to use the foreignkey variable name not category_set"
django,31cd84,Brandhor,1 point,Fri Apr 3 20:38:08 2015 UTC,"Ah, sorry. Here is the template code:          {% for site in object_list %}         <tr>             <td>{{site.domain}}</td>             <td>{% for category in site.category_set.all %}             {{ category.category }}             {% endfor %}</td>             <td>{{site.date_built}}</td>             <td>{{site.build_type}}</td>         </tr>         {% endfor %}   The foreign key field resides in the site model (as one site has one category, and many sites may be in that same category)."
django,31cd84,Brandhor,1 point,Sat Apr 4 00:07:47 2015 UTC,"then you shouldn't use category_set, that's for the reverse model, you should just use site.category without the for since it's just one assuming that the foreignkey is called category"
django,31cd84,Brandhor,1 point,Sat Apr 4 00:14:34 2015 UTC,"That's actually what I originally had because that what intuitively seemed to be the way, and it didn't work.  Should I be making a loop with that as the argument (not sure the proper term there) ?"
django,31cd84,Brandhor,1 point,Sat Apr 4 02:09:49 2015 UTC,should be something like this      {% for site in object_list %}     <tr>         <td>{{site.domain}}</td>         <td>{{site.category}}</td>         <td>{{site.date_built}}</td>         <td>{{site.build_type}}</td>     </tr>     {% endfor %}   if this doesn't work try to post your models
django,31cd84,Daishiman,1 point,Sat Apr 4 02:35:03 2015 UTC,"That's totally what I thought it would have been, but, doing that raises the error invalid literal for int() with base 10:''.  Just now copying and pasting this, I realized I missed something in that error: the single quotes at the end that are empty of any str, int, etc.  I initially thought this was because it was returning the ID. So next I had tried the format of site.foreignkey.categoryModelField, so, site.category.category, but no dice.  Here is the full info:  models.Category  class Category(models.Model):     user = models.ForeignKey(User, related_name=""categories"")            category = models.CharField(max_length=100)   models.Site  class Site(models.Model):     DEFAULT_SERVER = 1     user = models.ForeignKey(User, related_name=""sites"")     server = models.ForeignKey(Server, blank=True, null=True, default=1)     category = models.ForeignKey(Category, related_name=""related_sites"",  blank=True, null=True)     domain = models.CharField(max_length=100)   views.py  class sites(generic.ListView):     template_name = 'pwnetwork_app/sites.html'      def get_queryset(self):         self.request_user = self.request.user         return Site.objects.filter(user=self.request_user)   template (don't mind any additional fields, I condensed the models above.)  {% for site in object_list %} <tr>     <td>{{site.domain}}</td>     <td>{{site.category}}</td>     <td>{{site.date_built}}</td>     <td>{{site.build_type}}</td> </tr> {% endfor %}   Current error: invalid literal for int() with base 10:''  Other info: I can see that a query is being run for the category now!  Although, oddly there is setup to search by ID (good), and 3 that just return all of the columns and entries in category table."
django,31cd84,josh_legs,2,Sat Apr 4 11:06:28 2015 UTC,"ok that means that something calls int(), check the traceback in the error page from bottom to top till you find your code  usually templates don't raise errors like that unless there is a function called from the template, maybe you have a __str__ or __unicode__ function in Category"
django,31cd84,cediddi,1 point,Sat Apr 4 11:35:24 2015 UTC,"Got it! (from following the tracebacks better). They pointed me in the direction of the django modules that dealt with model fields.  After a bit of trial and error I found that the problem stemmed from the foreignKey for category in the site model not having a default setting (an integer, of course) while having null=True, blank=True. The null was throwing it off, apparently.  Fortunately, everything still works OK with it required. If anything, it's better because it saves me from being lazy while entering data and leaving it uncategorized."
django,31dqz6,JungleBoy2015,1 point,Sat Apr 4 02:35:35 2015 UTC,"Please clarify your question. In your mind what does it mean for a queryset to be ""free"" or ""used""?"
django,31dqz6,ccb621,1 point,Sat Apr 4 05:14:21 2015 UTC,yeah sorry im struggling with how i can explain this  i just want to mark widget1 with a 0 or a 1 so i can use a view to do something if its 0 or something else if its 1  the only way i know how to do this is to have two models both containing the same name of widget1 and so on
django,31dqz6,jmichalicek,2,Sat Apr 4 05:27:54 2015 UTC,"I think maybe you're misunderstanding how to use models.  If I were doing this, not knowing your full use case, I would have  class Widget(models.Model):     name = models.CharField(max_length=35)     status = models.ForeignKey(WidgetStatus)  class WidgetStatus(models.Model):     name = models.CharField(max_length=25)   Then in your view  def get_free_widget(request):     # using constants for your statuses is recommended in real code     # rather than using the string literal directly     try:         free_widget = Widget.objects.filter(status__name='free').first()     except Widget.DoesNotExist:         return HttpResponse('no free widget')     return HttResponse('Free widget is %s' % free_widget)   Then you have a migration pre-fill your statuses or just have them user created initially or whatever.  Or if you don't need the statuses to be dynamic, save yourself a model and just make Widget.status a CharField() with choices specified.  Basically your model is a blueprint for a single object. Each instance of the model is a single instance of that object, not a representation of all of them in the system."
django,31arn4,MarniStarghill,2,Fri Apr 3 11:21:06 2015 UTC,"Does anyone know what the ""sprints"" portion of the event includes?"
django,31arn4,ahulak,1 point,Fri Apr 3 20:53:34 2015 UTC,"Sprints are loosely-organized gatherings of developers in a single room, to work on a project or projects they care about. They're common at conferences, because often the core/major contributors of various pieces of software are there and can use the opportunity to interact in person with each other and with people who want to get involved."
django,31arn4,ubernostrum,1 point,Sat Apr 4 02:40:20 2015 UTC,Anyone know the ticket price? I want to submit a talk but I can't afford to spend as much as I did in 2014.
django,31arn4,new2django,2,Fri Apr 3 19:14:26 2015 UTC,"I don't know the prices, but I've heard that they will be cheaper. Substantially cheaper."
django,31bd9h,kwirled,1 point,Fri Apr 3 15:06:18 2015 UTC,"OP here. oTree is an open-source, Django-based toolset for multiplayer turn-based strategy games, like the prisoner's dilemma and other games from game theory and economics. It is also useful for single-player games and questionnaires -- essentially, any app that consists of a predefined sequence of pages with forms.  Here are some features:   GUI installer and launcher API suitable for novice/intermediate programmers. Multiplayer test runner: Define a ""bot"" in tests.py, and the test runner will simulate multiple bots playing together concurrently, according to a predetermined or random strategy. Composability: you can define the sequence of pages in an app by defining a page_sequence = [...] in views.py, and you can define the sequence of apps by defining an app_sequence = [...] in settings.py. Pages in the sequence can be skipped dynamically Waiting pages that synchronize all players in a group before proceeding Publish your game to Amazon Mechanical Turk The properties of a form field can be easily defined at runtime, like: choices, min/max, label. Play as different users in different browser tabs Live updating game results dashboard   Links:   The repo with the games is here: https://github.com/oTree-org/oTree The core libraries are here: https://github.com/oTree-org/otree-core The installer/launcher is here: https://github.com/oTree-org/otree-launcher   I hope some of you find it useful and I look forward to any feedback."
django,31cj8y,chingy0chongy,3,Fri Apr 3 20:13:16 2015 UTC,"MyModel.objects.filter(set_status__exact='free').order_by('-whatever_attribute_makes_it_""first""')[0]"
django,31cj8y,ckinsey,10,Fri Apr 3 20:36:17 2015 UTC,"that would cause an exception if the list is empty, since django 1.6 you can use .first()"
django,31cj8y,Brandhor,2,Fri Apr 3 20:42:52 2015 UTC,TIL .first()  Thanks.
django,31cj8y,sr33,1 point,Fri Apr 3 23:08:45 2015 UTC,Good call!
django,31aorv,netscape101,3,Fri Apr 3 10:36:55 2015 UTC,"When you define a model with a charfield, this one have a max_length option. Here, it's certainly 25 characters. So you can't send a value with more than 25 characters."
django,31aorv,zarglex,2,Fri Apr 3 10:45:38 2015 UTC,"I usually get this error when the constraint is on the database column but not in your models (max_length=25 or whatever). So when you type in a 30 char value for that field and hit save, it passes the validation in python/django but the database comes back saying it didn't mean IT's requirements."
django,319u80,djangorockro,2,Fri Apr 3 03:42:00 2015 UTC,"DATABASES = { 'default': {     'ENGINE': 'django.db.backends.postgresql_psycopg2', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.     'NAME': 'dbname', # Or path to database file if using sqlite3.     # The following settings are not used with sqlite3:     'USER': '',     'PASSWORD': '',     'HOST': '', # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.     'PORT': '', # Set to empty string for default.     } }"
django,319u80,wskyindjar,1 point,Fri Apr 3 04:14:17 2015 UTC,"Thanks, So if   ec2-user@ec2-54-246-27-243.eu-west-1.compute.amazonaws.com  is my ip address, I just put that into the host? with my superuser username and password?"
django,319u80,wskyindjar,1 point,Fri Apr 3 04:38:00 2015 UTC,"If that is the host of your database then yes, that will go into the Host parameter.  User and password are the database credentials (put those in an env variable so you aren't typing them directly in, but for testing, can put it in).  Port should be set as it may not be the default (5432)."
django,319u80,mrarnoldpalmer,2,Fri Apr 3 14:58:06 2015 UTC,The easiest way is using the DATABASE_URL environment variable. In your project settings.  import dj_database_url  DATABASES = {'default': dj_database_url.config(default='postgres://USER:PASSWORD@HOST:PORT/NAME')}
django,319hxs,sphere_is_so_cool,1 point,Fri Apr 3 01:52:11 2015 UTC,"Oscar doesn't handle payments. Sure, it has some helper views...but you're going to need to integrate a payment processor, ideally that supports webhooks."
django,319hxs,rnevius,1 point,Fri Apr 3 06:36:38 2015 UTC,"Thanks for the clarification. They offer five connecting modules, along the lines of 'oscar-paypal' so I assumed there would be more out there, or at least that one of these would come with batteries included.  After I reviewed these modules today, I decided to go with django-stripe-payments for recurring payments.  What does integrating the payment processor entail?   I am not afraid of a challenge but it would put me really far ahead if there were some open source examples out there."
django,319hxs,rnevius,1 point,Fri Apr 3 07:50:06 2015 UTC,Stripe is a great choice. I highly recommend going through the official Stripe Subscriptions tutorial. They have some great Python examples there.
django,313t4d,captcha_man,19,Wed Apr 1 20:24:28 2015 UTC,"Thank god the django team are seriously good at documenting deprecated features. Moving up versions is always nice and easy without much tinkering needed.   The addition of a standardized template api looks interesting, although I don't really have any reason to use another template engine over djangos own."
django,313t4d,npolet,11,Thu Apr 2 00:01:15 2015 UTC,Long term release designation is nice.
django,313t4d,zed_zed_top,1 point,Wed Apr 1 23:15:06 2015 UTC,Hell yea brother. LTS all the way.
django,313t4d,npolet,6,Thu Apr 2 23:18:24 2015 UTC,I was hesitant to dive into Jinja2 but now I have no excuse.  I imagine some innovative new template engines will result from this as well.
django,313t4d,joesapo,10,Wed Apr 1 22:52:20 2015 UTC,And we'll end up with a bunch of tools performing search functions and shit in the templates. The Django template language was simple as fuck for a reason.
django,313t4d,rackmountrambo,2,Thu Apr 2 04:42:43 2015 UTC,"Yes, and if you need a super powerful tag for some specific purpose, you can just create one."
django,313t4d,chrisrazor,2,Thu Apr 2 10:26:29 2015 UTC,Is it possible to convert a models.CharField that I use for a UUID to a models.UUIDField?
django,313t4d,pemboa,10,Wed Apr 1 23:42:33 2015 UTC,"Add field, migrate Custom migration copying CharField to UUIDField, migrate Remove field, migrate"
django,313t4d,Airith,-12,Wed Apr 1 23:53:37 2015 UTC,So that's a no then. I was hoping it was a simple drop-in.
django,313t4d,pemboa,14,Thu Apr 2 00:35:34 2015 UTC,"from django.db import migrations  def forwards_func(apps, schema_editor):     # We get the model from the versioned app registry;     # if we directly import it, it'll be the wrong version     Model = apps.get_model(""app"", ""Model"")     db_alias = schema_editor.connection.alias     for model_instance in Model.objects.using(db_alias):         model_instance.UUIDField = model_instance.CharField         model_instance.save()  class Migration(migrations.Migration):     dependencies = [('app', 'previous_migration'),]     operations = [migrations.RunPython(forwards_func,),]"
django,313t4d,Airith,-18,Thu Apr 2 00:58:54 2015 UTC,"Thanks, I get how to make data migrations."
django,313t4d,pemboa,12,Thu Apr 2 01:03:36 2015 UTC,"obviously you don't or you would recognise that /u/Airith has been kind enough to provide your ""simple drop-in""."
django,313t4d,Ibuildwebstuff,-2,Thu Apr 2 07:24:46 2015 UTC,"I appreciate it, but it was a yes or no question, I didn't say I didn't know how to make a migration to do the job. A direct conversion of the data type would have been ideal -- hence my question. Copying the data to a different column I get."
django,313t4d,pemboa,2,Thu Apr 2 15:42:32 2015 UTC,This is exciting stuff! I haven't been using the admin section since converting my templates to jinja and now it looks possible. The documentation only talks about rendering a single template with a non-default engine. Does anyone have any idea how I would render all views originating from a specific set of urls with a non-default engine?
django,313t4d,kevin____,1 point,Thu Apr 2 01:29:33 2015 UTC,"I noticed that session.get(SESSION_KEY) now returns a string, that is intended right?"
django,313t4d,Tysonzero,-1,Thu Apr 2 09:49:04 2015 UTC,And then I remembered that today is April Fool's day :P
django,313t4d,_eka_,8,Wed Apr 1 22:19:54 2015 UTC,"It's not a joke, though... It really was released."
django,313t4d,g-money-cheats,3,Wed Apr 1 22:23:15 2015 UTC,"It has actually been released, though."
django,313t4d,YellowSharkMT,2,Wed Apr 1 22:23:53 2015 UTC,"They should've announced that they're moving to Alembic for migrations, would've been amusing to see if anyone took it seriously."
django,313wfi,charettes,1 point,Wed Apr 1 20:45:00 2015 UTC,But... I'm still learning 1.7!!!
django,315w6n,stolen_loom,2,Thu Apr 2 05:59:29 2015 UTC,"...Yes. It's just a set of CSS/JS files.  Unless you go the SASS route, there's nothing different about the process."
django,315w6n,rnevius,2,Thu Apr 2 07:09:17 2015 UTC,That's a big relief. So far I can't get it to work and I was afraid it was Foundation-related.... but it's just django-noob related.
django,315w6n,rnevius,2,Thu Apr 2 13:38:13 2015 UTC,Ha...we've all been there :-)
django,315x5l,The_Grand_Jester,1 point,Thu Apr 2 06:11:34 2015 UTC,"Try attaching it to a button and see if you can get a refresh on demand. If so, it's a JavaScript problem with your settimeout call. You may try setTimeout(refresh(),10000) directly, since it looks like there's some caution around the other syntax. You may also want to put setTimeout in a different named function which gets called on success and cleared on an Ajax error.   https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout"
django,315tju,HotGirlCoder,3,Thu Apr 2 05:29:35 2015 UTC,"Am I missing something? Why don't you just use BigInteger? It goes up to 9,223,372,036,854,775,807 which is several orders of magnitude above what you need.  https://docs.djangoproject.com/en/1.7/ref/models/fields/#bigintegerfield"
django,315tju,iamwithnail,3,Thu Apr 2 09:09:09 2015 UTC,What about the comment was condescending? Sounds like /u/iamwithnail was genuinely curious why you wanted to stick with an IntegerField. He/she then proceeded to provide a good recommendation.
django,315tju,rnevius,1 point,Thu Apr 2 10:49:16 2015 UTC,"Huh.  Missed that.  It was a genuine question, I wondered if there was some limitation/version constraint.  There are a bunch of issues trying to use BigInt for, for example, twitter message IDs."
django,315tju,iamwithnail,1 point,Thu Apr 2 12:12:09 2015 UTC,"You should store Twitter message IDs as a string, I believe it is recommended in their API docs"
django,315tju,sathoro,1 point,Thu Apr 2 14:15:10 2015 UTC,"Yeah, I got to that after many hours of heartache. :D I was just, ""oh, integer, oh ok, that's too big, bigInt... WHY DOES IT ONLY WORK INTERMITTENTLY!??"".  That'll teach me to read the docs fully. :)"
django,315tju,iamwithnail,1 point,Fri Apr 3 20:28:25 2015 UTC,"What kind of numbers are these, anyway? Have you considered using a string? Or making your own field that uses long?"
django,315tju,m1ss1ontomars2k4,-1,Sat Apr 4 08:09:45 2015 UTC,"Break it up into two integer fields, hugeint%2000000000 and hugeint//2000000000"
django,315hsq,HotGirlCoder,3,Thu Apr 2 03:35:39 2015 UTC,You dont seem to understand how this works. max_digits is the amout of digits before the comma and decimal_places is the maximum amout of decimal places behind the comma. Check out the source code  This field doesnt allow you to set a maximum value rather a maximum length.  After a 2 second google search i came accross this blog post. might be worth it. the other solution to your problem would be to override the save method and validate the new value yourself. and if someone wants to set it higher dont allow it.
django,315hsq,resignresign1,1 point,Thu Apr 2 12:47:50 2015 UTC,"On mobile, so can't link, but lookup validators and max value validator in the Django docs  Edit: Validators, MaxValueValidator"
django,315hsq,moustachaaa,1 point,Thu Apr 2 09:46:49 2015 UTC,"I'm not familiar with Django,  but is that not working?  if not what error are you getting?  are you on a 64 operating system?"
django,315hsq,redpistachios,0,Thu Apr 2 04:19:44 2015 UTC,"I haven't tried it yet because there was no official option in the django docs to set a max value, or i just don't know how to find it maybe,  but actually i found a way on stack overflow, you have to write another definition that adds constraints here"
django,315hsq,redpistachios,1 point,Thu Apr 2 05:19:11 2015 UTC,"yeah, bitcoin.stackexchange is a much better place to post your dev questions."
django,313fwv,dsizemore,3,Wed Apr 1 19:05:14 2015 UTC,"Open it in python, read it into data then do data.encode ('base64'). Base64 is just a way to encode any binary data, 6 bits per character, in printable characters (even has an url safe version)."
django,313fwv,d4rch0n,1 point,Wed Apr 1 20:08:28 2015 UTC,"Thanks. Can you tell me if there's documentation on this somewhere?  Also as for a url safe version, is that something I need to do manually or is it already url safe by default? And if I return this Base64 image to my template and view source will it be a regular path to the image or a huge string of characters?"
django,3129k4,dzyl,1 point,Wed Apr 1 14:52:57 2015 UTC,"Why don't you make a new backend module for django-registration-redux? Writing them isn't documented (as afar as I know), but I know it is doable because I've done them: https://github.com/macropin/django-registration/tree/master/registration/backends  FWIW, django-allauth makes this kind of thing a little bit easier."
django,3129k4,pydanny,1 point,Wed Apr 1 15:48:01 2015 UTC,The reason many packages get away from first and last name is that that paradigm is really only applicable in western nations.
django,3129k4,rackmountrambo,1 point,Wed Apr 1 17:27:57 2015 UTC,"I get the reasons for storing the name in one field, but unfortunately western clients expect to be able to do things like get a list of users ordered by surname and are incredulous when you explain that not only can't you do that, but it's a feature not a bug."
django,311dpy,bykof,9,Wed Apr 1 09:43:12 2015 UTC,I have come to the same conclusion and I'm currently exploring ways to only use django-rest-framework on the backend and react.js on the frontend.
django,311dpy,mbrochh,6,Wed Apr 1 09:57:07 2015 UTC,So am I. I use also django-rest-framework in the backend and angularjs in the frontend.
django,311dpy,granduh,2,Wed Apr 1 10:16:06 2015 UTC,"same here, I almost moved to using Loopback as my backend but I'm in love with Django's ORM. For anyone interested in web sockets check out Swampdragon, easy to implement.  I might go with Meteor though for my next project since live updating is a must and Django's request/response cycle isn't good enough."
django,311dpy,signal_trace,1 point,Thu Apr 2 01:31:05 2015 UTC,Take a look at Elixir's Phoenix framework if you're interested in websockets.
django,311dpy,never_safe_for_life,1 point,Fri Apr 3 03:35:28 2015 UTC,"My front-end is already in AngularJS and accesses the back-end via a REST api. I am in the process of separating the two even further. Ideally my Django app will have one view that renders base.html. All it should do is convert necessary Django context to Javascript. So, thinks like STATIC_ROOT, and api endpoints ala {% reverse %}  That said, I've toyed with the idea of decoupling even more. If I were running a nodejs front-end I could use their package management tools to import all my dependencies, which would be nice."
django,311dpy,scuba-phteven,0,Fri Apr 17 01:56:45 2015 UTC,AJAX
django,311dpy,holandes,4,Wed Apr 1 19:10:57 2015 UTC,"Same here, drf in the backend with ember and ember-data in the backend."
django,311dpy,MarsupialMole,6,Wed Apr 1 10:24:04 2015 UTC,"https://www.youtube.com/watch?v=XRHFzdl918s  Django is batteries included. You can build great stuff with django, but it tries not to move faster than you can maintain your project. If you want to move faster, you don't have to use the batteries that come with Django, but then you need to know what you want. When a paradigm wins, it's probably going to be integrated into a batteries incuded framework eventually (see migrations).  Another option is to go with Flask and make the conscious tradeoff of integration for freedom?"
django,311dpy,RamirezTerrix,2,Wed Apr 1 12:51:09 2015 UTC,I came form python to django to the whole webstuff - and this is a bit off topic but anyhow:  What are theese super dynamic things you do with javascript and this rest stuff? The only dynamic thing I've done is adding rows to a form.  What more is there? And the again there are so many names like Angular Ember and node? Are they to javascript like django to python? I don't get it.  Where do I start? (Also I have next to none exp in js)
django,311dpy,Ibuildwebstuff,1 point,Wed Apr 1 12:36:06 2015 UTC,"These super dynamic things ARE adding things to a row or just add or manipulate data. If you have an application, lets say it's just an application like twitter, you want your user to be satisfied with your application if he use it. Also there is a good aspect in the traffic you recude if you will use REST. Because you doesn't reload the page again and again you just reload the things you really need and this is a very good way to limit your data transfer for only the needed things.   Angular.js, Ember.js and Node.js are all Javascript (.js) Frameworks. And it's not comparable to Django because Django is written in Python and Django is a complete Web Framework. As far as I know Angular, Ember and Node are not. Angular and Ember are Javascript Frameworks for the Frontend to, lets say, Manipulate the Website or getting data of REST sources (like a django application) and node.js is a Javascript Framework for the Backend to handle requests and creating routes.   Start with just making angularjs applications. Which holds data in just json files. Then create some django applications and just in the end try to combine this two brothers together :D"
django,311dpy,RamirezTerrix,3,Wed Apr 1 13:26:50 2015 UTC,Node.js is not a framework it is a platform. The closest equivalent of Django on Node would be Sail.js
django,311dpy,jstrong,2,Wed Apr 1 15:32:13 2015 UTC,Ok - so lets say I have a page where a javascript calles some of theese REST pages to get some new data. This is the displayed on the first page in a nice js-style way. Ergo: Dynamic Webpage!?  I think things will sort out if I take a look at angular.js
django,311dpy,jstrong,2,Wed Apr 1 13:35:12 2015 UTC,Yes and if you make a Cron that pulls the data every minute than you will have a more dynamic website because it will refresh by itself. Sure this is only a really micro example but yeah these are the first steps. :)
django,311dpy,cantchangeit,2,Wed Apr 1 13:37:26 2015 UTC,"Personally I have found it easy to create views that return a json object for my js stuff to use. I have an app in my project called ""api"" for those. Other people use rest framework for the same thing. My stuff isn't super js heavy though."
django,311dpy,_esistgut_,1 point,Thu Apr 2 01:40:02 2015 UTC,"Yeah for a couple things this is totally good but if you plan a big project which is high dynamicly and is build on REST you can't use the django views any more, it will blow up the views.py"
django,311dpy,metaphorm,1 point,Thu Apr 2 11:10:54 2015 UTC,out of curiosity - what do you mean it will blow up views.py?
django,311dpy,pemboa,1 point,Thu Apr 2 13:38:40 2015 UTC,Ouh I misunderstood your answer. Sorry for that. I think we talked about cross purposes :)
django,311dpy,pemboa,2,Thu Apr 2 16:42:29 2015 UTC,"I don't understand why there is so much hate for using Django as a front-end framework. Using Django where you can and JavaScript where you have to has been a very successful approach for me.  For example:  Consider that you have a blog. On this blog you have the articles you write and the comments your readers leave behind.   On a blog, the main content is the article, and best practices tell us that the main content should always load quickly. Comments, on the other hand, are normally read after the main content, so they don't need to show up as quickly. There is also more interactivity when it comes to displaying comments (increasing perceived performance of taking actions: liking, commenting, etc).  All of this adds up to one thing: The main content should be rendered using Django and the comments are a good candidate for being rendered via Web Components (or similar current-generation technology).  Am I missing something?"
django,31217n,enesimo,1 point,Wed Apr 1 13:52:00 2015 UTC,"You can use get_queryset method and parent / children objects.  If you want new/top/rising create parent class with all the functionality, in child object inherit parent class and override get_queryset method to filter what you need.  For lower readabilty you could provide queryset as param for your generic view in urls.py  Embedding too much logic in templating is generally not advised and is bad approach to mvc."
django,31217n,leftrightupdown,1 point,Wed Apr 1 19:38:14 2015 UTC,"I'm not sure if I understand your answer, however, after re-reading my question, I believe I totally over-complicated my question.  I have page A, that renders using Generic List View. I want to create page B that renders the same list but with filtered results.  The only method I know of doing this would be to overwrite the get_context_data and returning the filtered results as well as the non filtered. Then grabbing that in the template. Is this the correct method?  In any case, thanks for the answer and taking the time to reply!"
django,31217n,leftrightupdown,1 point,Thu Apr 2 13:28:45 2015 UTC,check out get_queryset()  method in genericviews
django,310uhu,issackelly,1 point,Wed Apr 1 05:40:54 2015 UTC,What's the takeaway?
django,30yug3,misterte,8,Tue Mar 31 20:28:52 2015 UTC,"TLDR :Time and client management.   When your selling that extra time you need to be careful. Don't neglect friends and family, but most importantly, don't neglect yourself. It can be painfully easy to slip into bad habits - one too many late nights add up over time and will only make you feel terrible.   Be strict with yourself - give yourself set hours and stick to them. It's difficult at first, but eventually you will be able to slip in and properly focus for those few hours, and you'll get a lot more done.  As for clients, beware. Don't just take anyone. Ask yourself: ""is this client going to make constant changes to the brief? Do they understand what they're paying for? Are they going to be on my back constantly for support?"" And so on. You want to vet them in same way they will be vetting you. Get it right and you'll build a great relationship with your client, and they will keep coming back to you.  Very importantly, your client must know you're doing it as a side gig. If they need someone on call 24/7 they need to dig into their pockets and hire a company to do the project. You're just doing it on the side, and the client must respect your time and not demand from you.  Lastly - charge what you think you're worth! This will be likely more than you think. Negotiating is fine, but never try to compete with someone else for a client. Remember: the client should respect you. You're the expert here.  (That got a lot longer that I initially expected! For context, I'm a developer, research assistant and associate lecturer at a university, and I've been doing small bits of freelancing on the side. Hope this all helps, best of luck on your endeavours!)"
django,30yug3,thisisthechris,3,Tue Mar 31 23:53:02 2015 UTC,"And to add to the second to last point, if they expect support after the job is done. They should expect to pay for support."
django,30yug3,granduh,1 point,Wed Apr 1 00:10:09 2015 UTC,"Hey, thanks for the detailed reply. I have experience managing a team, so I agree 100% with what you say. I never considered being completely transparent about working on my spare time, but seems like a smart move if you want to set proper expectations.  Have you had some experience freelancing? Where do you find gigs? How do you promote yourself.  Thanks! A."
django,30yug3,thisisthechris,1 point,Wed Apr 1 12:59:25 2015 UTC,"I get all my freelance gigs through referrals, so being 'known' in a network of people is important.   It's notable that nothing I've done has Django specifically requested as a technology - I'm more known for being able to get stuff done, meaning I get to pick my tools."
django,30yug3,never_safe_for_life,1 point,Wed Apr 8 16:51:17 2015 UTC,"+1 on the support issue. When I was freelancing I asked clients to sign up for a support contract, which had to be a minimum # of hours per month. It never really netted me any extra revenue, but it protected me from clients who wanted me to do 30 minute tasks whenever they felt like it."
django,30yug3,jeffbaier,3,Fri Apr 17 01:59:29 2015 UTC,"How much time do you have to devote to freelancing? Python/Django are good skills to have, some frontend/javascript would be helpful as well.  Use places like reddit and hacker news to find gigs. For example here's the HN monthly freelancer thread - https://news.ycombinator.com/item?id=9127243"
django,30yug3,amfoejaoiem,5,Tue Mar 31 21:03:27 2015 UTC,"I disagree with using reddit and hacker news to find gigs. I did a bit of contracting (software / hardware engineering but not Django) and my best clients always came from people I met in person. I highly suggest finding engineering / startup / maker / developer events, going to as many as possible and meeting people and telling them your skillset. PM me if you have questions."
django,30yug3,jeffbaier,2,Wed Apr 1 05:39:14 2015 UTC,Thats great advice as well. Networking is so important. Unfortunately not everyone lives in largely populated areas with lots of tech events and people.   I've had great success with remote working and I encourage others to go that route as well.
django,30yug3,amfoejaoiem,2,Wed Apr 1 06:14:24 2015 UTC,"Good point, I don't know where the OP lives."
django,30yug3,appfiction,1 point,Wed Apr 1 06:24:48 2015 UTC,"Hey! I have about 1-2 days a week. To add to /u/jeffbaier 's comment, I currently live in Chile... so there's that :)  There's a market in SCL (Santiago), but there seems to be quite a demand for developers with data analysis experience in CA. As I'm comfortable using english as my first language, I figured there could be some way of working there(ish) while still living here.  EDIT: format"
django,30yug3,appfiction,2,Wed Apr 1 13:10:12 2015 UTC,I would do a lot of research before.  Check your competition on odesk.com and freelancer.com.  Be honest to yourself. Why should a client hire you for python/django jobs and not the other guys?   I would also try to find a niche where you can shine with some open source projects for example.
django,30yug3,garry__cairns,1 point,Wed Apr 1 07:43:10 2015 UTC,"+1 on the open source projects. Not my strong suit yet, need to work on that."
django,30yug3,BobbaGanush87,1 point,Wed Apr 1 13:12:10 2015 UTC,"Yea, thats a big plus these days. In fact, if i hire a freelancer i always ask him for open source projects as references too."
django,310ktq,HotGirlCoder,4,Wed Apr 1 04:17:22 2015 UTC,"Django is architected around the request-response lifecycle of HTTP. Basically that means that the client (web browser) has to make a request before the server (your django application) can make a response.   There are several methods used to get around this in order to 'push' data to the client. Some search terms to find out more would be: 'long polling', 'short polling' and 'websockets'. The polling methods are arguably easier to implement in django as they don't require an additional websocket server/message queue etc. However they generally create a bit more server load and bandwidth, especially if you have many users connected."
django,310ktq,DoubleBrowne,0,Wed Apr 1 08:48:30 2015 UTC,thank you very very much
django,310ktq,Brachamul,3,Wed Apr 1 23:24:44 2015 UTC,"Hello,  Once a page is loaded, Django doesn't call the server again unless the user starts a new action.  So normally, a page can't be updated with a push request from your Django server.  However, if your users are navigating your website and loading several pages, you can use the messages system.  You can launch a ""warning message"" when your server is about to go under, and the next page that is loaded will display the message."
django,30yhim,HotGirlCoder,1 point,Tue Mar 31 18:59:13 2015 UTC,Need to see the page the request is coming from too.  I assume it is on the same domain and you have a valid CSRF token on that page?
django,30yhim,iamgort,0,Tue Mar 31 19:07:17 2015 UTC,its a test http callback from http://www.bitcoinmonitor.net/help/  i don't know what their form looks like  it from a different domain
django,30yhim,iamgort,0,Tue Mar 31 19:21:02 2015 UTC,Well that's why.  The whole point of having the CSRF middleware is to prevent sites from posting to your project without a valid CSRF token.  You can remove the CSRF from the middleware in your settings.py file if you want.
django,30yhim,saturdayplace,0,Tue Mar 31 19:24:08 2015 UTC,is there any way to just not need a csrf token for that view?
django,30yhim,dzyl,2,Tue Mar 31 19:31:52 2015 UTC,"So /u/iamgort is right. The CSRF middleware is doing exactly what it's designed to do: prevent 3rd-party sites from sending potentially malicious requests to your application. You can disable CSRF protection for specific views using the @csrf_exempt decorator.  The bitcoinmonitor.net/help page has documentation about how it calculates a signature for the payload it's sending. You'll want to make sure that the view that you exempt from CSRF protection validates the signature of the data it receives.  [edit] And make sure that you guard the HTTP security token bitcoinmonitor.net gives you. If anyone ever gets ahold of that token, they'll be able to create valid signatures and send bogus requests to your application. If that token ever leaks out onto GitHub, or in an email or IM or something, you'll want to rotate it."
django,30yhim,rackmountrambo,1 point,Tue Mar 31 19:33:27 2015 UTC,Did you send a CSRF token with the request? https://docs.djangoproject.com/en/1.7/ref/contrib/csrf/#csrf-ajax
django,30yhim,rackmountrambo,0,Tue Mar 31 19:08:04 2015 UTC,its a test http callback from http://www.bitcoinmonitor.net/help/  i don't know what their form looks like  it from a different domain
django,30yhim,granduh,0,Tue Mar 31 19:21:05 2015 UTC,So it's working normally is what you're saying.
django,30yhim,rackmountrambo,-1,Wed Apr 1 17:52:57 2015 UTC,"sry this is an anti bullying community thank you  of course its working normally  I fixed the problem, it was because the external site's form does include a csrf token  so I needed to exempt that view and use an md5 hash key to check if its an authentic post"
django,30vy41,hhh333,4,Tue Mar 31 03:29:23 2015 UTC,"Kudos. Definitely going to try it out for my next project. Without having tested it, it looks to be on a good level of abstraction.  Oh, and like /u/mitchellrj noted, what's up with the requirements?"
django,30vy41,Konradicus,2,Tue Mar 31 09:42:57 2015 UTC,"Keep calm, the max constraint was removed https://github.com/h3/django-pdfutils/commit/a5a15dad417de7c67af4da931c823faebf95ad8b :-)"
django,30vy41,ionelmc,7,Tue Mar 31 13:52:13 2015 UTC,Django < 1.5.99? Really?
django,30vy41,mitchellrj,3,Tue Mar 31 06:37:48 2015 UTC,"Well, seeing as it's on github, you're more than welcome to fork it and make a version that's compatible with 1.6+…  Heck, I'd be interested to do so if I can scrape some spare time for it…"
django,30vy41,youlleatitandlikeit,1 point,Tue Mar 31 14:45:07 2015 UTC,"Yeah I should update that, the probject was created circa django 1.3.  I decided to package it because I realized that more people than I thought was using it."
django,30vy41,zettabyte,1 point,Tue Mar 31 18:36:52 2015 UTC,"You don't work on big, long running projects with skeleton crew and tight budgets, do you?"
django,30vy41,thayerpdx,2,Tue Mar 31 13:04:25 2015 UTC,"You know that thing, where you bang your head against a problem for hours and hours and only after you finally figure out a solution does a simpler way to do it appears? Yeah."
django,30wpxh,enesimo,3,Tue Mar 31 09:24:46 2015 UTC,You may wanna try this: https://django-model-utils.readthedocs.org/en/latest/models.html#timestampedmodel (it probably uses the same code as the stackoverflow tho)
django,30wpxh,catcint0s,2,Tue Mar 31 11:11:56 2015 UTC,"In that case, wouldn't it just be easier to add these few lines of code instead of having dependencies and installing an app? Or am I missing something? I am quite new to django so I can't tell really."
django,30wpxh,frankwiles,1 point,Tue Mar 31 11:36:44 2015 UTC,It's just a pip install. You already have a dependency in Django itself. You'll have a much better time if you embrace using third party apps instead of building everything yourself.
django,30wpxh,catcint0s,1 point,Tue Mar 31 19:37:21 2015 UTC,I checked the source and it's the same code as yours. If you have multiple projects it's easier to use this imho than adding the same class to each project.
django,30wpxh,catcint0s,1 point,Thu Apr 2 10:33:45 2015 UTC,"Yes, in fact its almost exactly the same, but do you know what the underscore is for?  AutoCreatedField(_('created'))"
django,30wpxh,dashdrum,2,Thu Apr 2 11:26:39 2015 UTC,"from django.utils.translation import ugettext_lazy as _   It means that the string is marked for translation, you can read more about it here."
django,30wpxh,Jwpevans,3,Thu Apr 2 11:44:29 2015 UTC,"I have used a variation of this method (with a custom save() method), and have had no problems.   However, there is no expectation of the models.Model class being modified.  Use your BaseModel class as the parent class for your application's models.  class Author(BaseModel): ..."
django,30wpxh,rcarrigan87,2,Tue Mar 31 13:00:11 2015 UTC,"Oh ok, I understand. So I would have to have all my current classes inherit from the baseModel class? I would have to manually add 'BaseModel' to each class?  In what order should it inherit? I already have classes that inherit from other classes, so should I add it before or after these?  Thanks"
django,30u2q1,dzyl,2,Mon Mar 30 18:45:29 2015 UTC,"The 'refresh and it still does it thing' is why we say 'Always redirect after a post!' that way your current action is not still post. So, do it! Always redirect after post."
django,30u2q1,Mekhami,1 point,Mon Mar 30 18:59:08 2015 UTC,"I'm currently not using forms though, it's just a link to a view that does the swap. Should I use forms for this?  Edit: How to approach using a form for this? Should I keep it in the same page and use some hidden variables?"
django,30u2q1,Mekhami,2,Mon Mar 30 19:00:20 2015 UTC,"No, you should still just return an HttpRedirect so the browser isn't pointed to /up/4/"
django,30u2q1,Mekhami,1 point,Mon Mar 30 19:03:20 2015 UTC,"Alright that did it, thanks a lot :)"
django,30u2q1,Mekhami,2,Mon Mar 30 19:16:45 2015 UTC,btw are you the twitch streamer dzyl by any chance?
django,30u2q1,Mekhami,1 point,Mon Mar 30 19:19:03 2015 UTC,"Haha, I am :) my fame knows no bounds (unlike my Django knowledge)  Edit: One more thing I don't understand:  I'm now using       return redirect('/todo/')   which works, but this doesn't:  return redirect('whole_list')   and neither does:  return redirect('whole_list',request=request)   how do I use the view instead of hardcoding the soft url?"
django,30r4vt,ce0168,2,Mon Mar 30 00:17:13 2015 UTC,"Sounds like you've got it more or less right. When you run Django as a WSGI service, it won't serve the static files for you like it does in runserver. Standard web servers are better at that sort of thing. The documentation for these variables will likely cover this better than I could."
django,30r4vt,OriginalEnough,2,Mon Mar 30 00:39:14 2015 UTC,"I'm not too familiar with web servers etc. Can you explain what you mean by 'as a WSGI service'?   My understanding of  the settings seems to hold true when running django on the server (as a WSGI service I'm assuming), but on the runserver the variables don't do at all what I'd expect"
django,30r4vt,erewok,5,Mon Mar 30 00:58:48 2015 UTC,"Think about it like this: you want your server (apache, if you're on webfaction) to serve static content without your django project having to deal with it. Why? Because it's a waste otherwise. Here's why:  Web server applications like apache were initially designed to serve static files. If you ever made a plain index.html  and opened it up on your local computer, you'll get a feel for what web dev used to be like 20 years ago when server responses were not too dynamic. At the time, when users requested a website, the server would locate the plain HTML file requested and send that file back. That was it.  As a result, Apache can be configured to take a URL route and a directory and just serve whatever is in the directory as if it's a route (no URLs.py  necessary). For instance, you can configure an apache route called ""static"" and point it at some directory. Then, put a file called ""stuff"" in that directory and you can now access it at ""static/stuff"". Apache will serve plain old boring files upon request for them and it's fast and good at this: it doesn't need some other programmatic environment to exist to send those files back to the user upon request.  Django is different because it's a python application, so it has to be run inside a python environment and apache needs to hand off requests for a django project to something like mod_wsgi which will spin up a python instance and execute the code in order to construct a response for the user.  Thus, static files are not actually being served by your django application. Your STATIC_URL is the route django forwards ""static"" requests to when you urlreverse for static in your templates {% static ... %}.  This is a convenient way of letting django know which url your staticfiles are located at and it's only a convenience: you could host your static files anywhere else (like on a cdn, for instance) and hard code those static routes in all of your templates and leave those attributes completely out of settings.py.  Your STATICFILES_ROOT is the directory somewhere where django will copy static resources it knows about, so that static-files-serving server you are using can do its thing with those files. You can have django copy them to a directory on the same server where apache can serve them or to another server, or you could have django send them up to amazon if you wanted. Django doesn't care where they are or even what they are. This is also just a convenience. You could copy the stuff yourself or not at all if you wanted.  Finally, Django has some magic runners which look for static directories inside your project's various applications. However, you may have some staticfiles which don't belong to particular apps. Thus, just as you can with TEMPLATE_DIRS, you can tell Django, ""Hey, when you're looking for staticfiles, don't forget about these other directories, please!"" That's what STATICFILES_DIRS are."
django,30r4vt,erewok,3,Mon Mar 30 03:25:04 2015 UTC,"you could host your static files anywhere else (like on a cdn, for instance) and hard code those static routes in all of your templates and leave those attributes completely out of settings.py   That is what made it click for me. I did not realize it was optional and thought there was some other functionality involved besides just being a shortcut so that you can do     {% static %} in a template.  Thanks, your explanation was really through and easy to understand."
django,30r4vt,OriginalEnough,2,Mon Mar 30 03:59:17 2015 UTC,"Sure. Glad to be helpful. I wish the docs had something like that breakdown because beginners often get confused about staticfiles locally vs in production. The confusing thing is probably that runserver does it for you locally because you dont want to set up apache or nginx and have it running on a different port just to serve static files in development. So django does it for you and then people always ask, ""wait, why does django do it locally but not in production again?"""
django,30r4vt,Pilferer,1 point,Mon Mar 30 04:53:47 2015 UTC,"WSGI stands for Web Server Gateway Interface and is the way web servers, such as Apache and Nginx communicate with Python. I'd look up the Wikipedia article for more information as I'm not an expert.  runserver ignores those settings as it does all static hosting for you. You don't need the benefits of using a web server when it's only going to be you using it."
django,30r4vt,ilovekitty,1 point,Mon Mar 30 01:22:26 2015 UTC,"An easy way to get around this limitation is to use a plugin like DJ-Static. With a couple tweaks to your settings.py and wsgi.py files, you can serve your static files in production just like on your development machine. It works for media files, too (file uploads)."
django,30r4vt,Mekhami,2,Mon Mar 30 02:54:19 2015 UTC,"This post is a bit long, but answers most of your questions: http://agiliq.com/blog/2013/03/serving-static-files-in-django/"
django,30r4vt,Mekhami,1 point,Mon Mar 30 03:31:31 2015 UTC,That is really helpful!
django,30r4vt,eddwinn,2,Mon Mar 30 03:48:01 2015 UTC,"http://blog.doismellburning.co.uk/2012/06/25/django-and-static-files/ My favorite blog post on the subject, very comprehensive and easy to understand."
django,30r4vt,chuwy24,2,Mon Mar 30 18:28:59 2015 UTC,Ooh that is good too! Thanks. Does the fact that its from 2012 make any difference though? I've been burned by that before (markup filter!)
django,30r4vt,chuwy24,1 point,Tue Mar 31 00:31:48 2015 UTC,nope i use it daily
django,30r4vt,andrey_shipilov,1 point,Tue Mar 31 00:43:11 2015 UTC,"Im learning as well, good question"
django,30r4vt,raydlor,1 point,Mon Mar 30 00:27:48 2015 UTC,"In every app you have a static dir. When in development mode (runserver) you're trying to access STATIC_URL (see in your urls.py), Django one by one search through all these static dirs to find requested file and serve it by django.views.static (should be enabled only when DEBUG = True). But this could be way too long on production, so we have manage.py collectstatic command, which collect all your static files in your STATIC_ROOT (it's file path on your computer).  So, yes you're basically right, except you can omit STATICFILES_DIRS at all, because 'static' dir in every app."
django,30r4vt,raydlor,1 point,Mon Mar 30 00:41:41 2015 UTC,"So does that mean that I don't need to set STATIC_ROOT when in development mode? And omit STATICFILES_DIRS when deployed?  Taking the example of a project saved locally with only one static file location:  C:\Websites         MyProject         BlogApp         MainApp         static   what would the values for each be for development? How would those change after deployment? The folder static is where the static files are store BEFORE collection.  From what I understand, the values for development (runserver) mode should be:  STATIC_URL = 'C:\Websites\Myproject\static\'  <- This is confusing, because in deployment, this just refers to a url that maps to the static directory. STATIC_ROOT = Is this required? If I did 'C:\Websites\Myproject\assets\' would that be WRONG? STATICFILES_DIRS = But wait...shouldn't THIS be set to 'C:\Websites\Myproject\static\'   I AM SO CONFUSED!!!"
django,30r4vt,teilo,1 point,Mon Mar 30 01:17:00 2015 UTC,"Your problem is in STATIC_URL. It have to be URL, and it's file path in your configuration. Examples of STATIC_URL: ""http://MyProject.com/mystatic"", ""http://somecdnservice/myproject/"", ""/static"" (last one is relative URL, not file path).  Yes, you don't need STATIC_ROOT while in dev mode (but you definitely will need it in prod mode). You can omit STATICFILES_DIRS in both modes, in most cases you don't need it at all.  Important note: your configuration shouldn't be changed when you're switch from dev to prod mode. You only have to change DEBUG variable and nothing more.  Again, the main idea is simple:   'static' dir in every app 'collectstatic' collects all files from previous item in your STATIC_ROOT (you have to run it every time you changed something it 'static' dirs from previous item) you have to configure your web server (nginx or apache) so it serve STATIC_ROOT file path as STATIC_URL URL   You'll find it very simple and handy once you understand it."
django,30r4vt,raydlor,1 point,Mon Mar 30 02:15:55 2015 UTC,"I'm gonna sound like a dick I know, but how's that not enough? https://docs.djangoproject.com/en/1.7/howto/static-files/"
django,30rmg5,spitfire21,3,Mon Mar 30 02:54:56 2015 UTC,"you probably want a many to many through relationship, where the through model has (user_id, object_id, permission), and permission is some sort of indication if they are the owner, creator, editor, or just viewer (Not sure your exact business needs).  https://docs.djangoproject.com/en/1.7/topics/db/models/#extra-fields-on-many-to-many-relationships"
django,30rmg5,davvblack,0,Mon Mar 30 04:28:32 2015 UTC,"Thanks for your reply! Okay, so if I do that then I should create a custom permission checking to see if they are a viewer?"
django,30rmg5,into_the_wilderness,3,Mon Mar 30 04:40:34 2015 UTC,You can use django-braces's PermissionRequiredMixin.
django,30pdm8,Neb519,8,Sun Mar 29 15:13:55 2015 UTC,"First of all, if you are uploading CSV data in a browser, I assure you this is not big data. If you want to plot even 100k points though, I wouldn't place that burden on a client side library. Matplotlib is a good choice, but you might need to use celery or something if your computations are going to take a while to run."
django,30pdm8,quantumbot,7,Sun Mar 29 15:32:49 2015 UTC,"Everyone seems to assume they are dealing with ""big data"" these days."
django,30pdm8,colly_wolly,1 point,Sun Mar 29 16:46:57 2015 UTC,I want a user to be able to provide roughly 1M rows of data (by about 10 columns) tops although 50K rows would be more typical.  What's the best approach for transferring this data if not by CSV upload?
django,30pdm8,quantumbot,3,Sun Mar 29 17:54:54 2015 UTC,"CSV upload will probably be fine for 1M rows, I'm just saying that's not even close to the scale of ""big data"". It will probably be on the order of hundreds of megabytes though, so you might want to put some effort into the upload experience.  You should visualize the histogram client side rather than using matplotlib to generate an image. Google charts is a good choice. I've also used rickshaw in the past, which I liked."
django,30pdm8,WallyMetropolis,1 point,Sun Mar 29 18:25:59 2015 UTC,Makes sense.  Thanks for the info.
django,30pdm8,TheKuchenBurglar,2,Sun Mar 29 18:41:32 2015 UTC,"As a rule of thumb, if you can fit all your data on one machine, it's not ""big data."""
django,30pdm8,jpozzed,2,Mon Mar 30 00:47:49 2015 UTC,"I recommend off-loading the computation to Celery or some other asynchronous task library, otherwise the client will be left with huge response times for the calculations to run.  Your view could have a form submit that handles uploading the CSV (or other format of your choice), then you could have Celery tasks spun off in the POST handler for calculating whatever statistics you want and making them available to the front-end by saving the result to a model in your DB.  A successful 200 or 201 status from that CSV POST upload could say something like ""your upload is being processed..."", and the front end will display this message until the plot data is ready (although there are ways to continually monitor the status of a task in Celery, so you could even have an upload progress bar on the front end if you were knifty enough with it)."
django,30osyq,ThorAkureyri,1 point,Sun Mar 29 10:27:49 2015 UTC,"Some of those should be working, especially if you can import from the shell.   You should be able to use:  from . import view_helper   ...or  from .view_helper import url_key   ...or   import .view_helper   Notice the dot . in all of these, and read up on Relative Imports"
django,30osyq,rnevius,1 point,Sun Mar 29 10:32:29 2015 UTC,"I found the issue, it seemed to be something strange with a rate limiting library I was using."
django,30lz11,thatrguynamedtrevor,5,Sat Mar 28 16:22:53 2015 UTC,"Just make an HTML form in the modal where the action corresponds to your login page.   Ex:  <form action=""{% url 'login' %}"">   Edit:  you can handle errors on that page with an {% if form.errors %} above the form"
django,30lz11,myropnous,1 point,Sat Mar 28 18:31:20 2015 UTC,I will try this and report back! Thanks!
django,30ndh9,dsizemore,1 point,Sat Mar 28 23:41:54 2015 UTC,You are using Pillow instead of the abandoned PIL right? It seems that the second return value may be the pixel where the color appears first?
django,30ndh9,BalconyFace,1 point,Sun Mar 29 02:10:24 2015 UTC,"Yeah I am using Pillow.   As for the pixel where the color first appears, I'm not sure. I don't think I even need the getcolors() for what I need but getpalette() is also confusing. I'm not sure how to get the rgb values from that list."
django,30ndh9,BalconyFace,1 point,Sun Mar 29 03:13:14 2015 UTC,"from scipy.misc import imread    im = imread('image.jpg')   Each element of your x-pixels by y-pixels ndarray im contains an RGB triplet.  If you don't want to depend on scipy, you can do"
django,30ndh9,BalconyFace,1 point,Sun Mar 29 04:12:46 2015 UTC,I can do what? Don't leave me hanging!
django,30ndh9,jokikinen,1 point,Sun Mar 29 13:02:54 2015 UTC,"Oops  im = PIL.open('image.jpg') dat = numpy.array(im.getdata)   But there's the numpy dependency.  The ndarray is very useful, though."
django,30ndh9,jokikinen,1 point,Sun Mar 29 15:25:48 2015 UTC,Thanks. I'll check it out.
django,30ndh9,jokikinen,1 point,Sun Mar 29 19:05:16 2015 UTC,"If your'e looking for a primer on colormaps and ndarrays, check out matplotlib.  http://matplotlib.org/gallery.html#color"
django,30ndh9,jokikinen,1 point,Sun Mar 29 19:24:25 2015 UTC,"It's states here that getpalette()   Returns:   A list of color values [r, g, b, ...], or None if the image has no palette   So it's probable that every fourth integer in that list begins to describe a new colour, as you guessed in your post.   [117, 70, 88, 119, 70, 89, 148, 72, 101, 131, 71, 94, ...]     (bolding added just to differentiate the groups of three from each other)  You can use   def rgb2hex(r, g, b):       return '#{:02x}{:02x}{:02x}'.format(r, g, b)     To convert RGB values to HEX."
django,30kuut,sinopsychoviet,7,Sat Mar 28 06:44:26 2015 UTC,"It might, if and only if:   You have determined that there is a problem - end users complained or you've measured page load times that have been determined to be a problem, e.g. > 400-500 ms. You have determined that the number of database queries are actually the source of this problem (by profiling them). You have figured out which queries specifically are the biggest problem and have figured out a way to reduce their number by preparing lists of dicts before hand (for instance).   However, if you haven't even measured anything yet, then no, it makes no sense whatsoever, and you need to drill this quote into your head until it sticks, because you're probably in the 97%:  http://c2.com/cgi/wiki?PrematureOptimization   In DonaldKnuth's paper ""StructuredProgrammingWithGoToStatements"", he wrote: ""Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil."
django,30kuut,pydry,4,Sat Mar 28 12:34:13 2015 UTC,"Like /u/mbrochh notes it is easier to debug performance if you prepare your template data. But there is another possible benefit:  You've probably noticed that many time you need to process your model data a little before display. Maybe format some dates, transform some urls, add some linked data etc. You could do this with filters and template tags but: 1) you now are hiding logic from view (literally :), and 2) it doesn't scale: at some point you'll have to do add some data lookup logic to the display code, but by then you are invested too deep in view code (and risk the mentioned code quality and performance hazards).  Another thing: I'm doing a site/app that has both a HTML views and a JSON api for native mobile apps and embeddable widgets. I've unified the 'serialisation' of data, so the display processing is shared between HTML and JSON output and the templates are using the same structured JSON-like data (eg: dicts/lists, no methods) while the api just JSON-serializes the same. It cuts down on code/logic duplication.  This also means there is a clear data layer above the views (great for testing) and the actual view handlers are just glue to pull together from a data system and send it through the serializers (which are also very testable). And because now all data is simple it is also a lot easier and safer to cache (no pickle problems)."
django,30kuut,brtt3000,1 point,Sat Mar 28 09:42:52 2015 UTC,I'd bet you a not inconsiderable amount of money you could make far greater performance gains by looking at your ORM usage.
django,30kuut,dysmas,1 point,Sat Mar 28 23:01:15 2015 UTC,"I'd argue that if you are looking for speed advantages, your bottleneck is the template engine itself, and the ORM.  Optimising the data passed to the template may have benefits in terms of code clarity and reuse, but it's way down the list in terms of improving speed - all you're doing is moving something the template engine does for you into your own code. You might be able to optimise it a little, but you're in marginal gains territory."
django,30kuut,chronug,1 point,Sat Mar 28 10:22:41 2015 UTC,"Hi, thanks for your answer. So what do you suggest? Skipping using the template engine?"
django,30kuut,chronug,0,Sat Mar 28 11:14:23 2015 UTC,"There are faster template engines available, such as Jinja2. So if that's where your bottleneck is, give that a try.  If you just want to improve performance generally, optimise your database queries. The Django ORM makes it very easy to build very inefficient queries, but with a bit of care, you can massively improve performance without going as far as using raw SQL. Install the debug toolbar and work on reducing queries (model functions are the usual culprits).  Before any of that though: caching. Cache everything. Cache entire responses wherever you can and use template fragment caching where you can't. Also ensure your database caches are sufficient for your requirements."
django,30kuut,andrey_shipilov,1 point,Sat Mar 28 12:51:46 2015 UTC,"In short — no it's not worth it.  Don't waste your time. The object accessed in the views are accessed in templates in absolutely the same way.  If you care about large amounts of data and performance issues — that's what caching for. Cache properties, cache blocks, cache pages. And don't use templates for logic — that's what views are for."
django,30kuut,mbrochh,-4,Sat Mar 28 10:52:42 2015 UTC,"I'd say yes, it is worth it. It keeps possible performance bottlenecks in your views, where they are very easy to debug."
django,30kuut,rnevius,3,Sat Mar 28 07:22:52 2015 UTC,"How much does this really help, performance-wise? I mean...If I'm processing objects in views and assembling new lists, and then passing those lists into the templates where they are still being looped over...doesn't this add another step that would eliminate any performance benefits?"
django,30kuut,mbrochh,1 point,Sat Mar 28 07:29:36 2015 UTC,"That's a good question. Logic dictates that this would be a waste of if CPU cycles. However, the temptation to call an object's method in a template is irresistible - if that method makes DB calls and is nested in some loops, you suddenly get potentially hundreds of small additional DB calls. If you collect all data in your view, it's more visible to a developer how many queries are being fired.  When you follow the current craze about React and Flux, you will see that Flux promotes the idea of gathering all data and giving into a wrapper component and it will just pass down the data to it's child components (or here, sub-templates).   Disclaimer: I'm currently playing around with these ideas and will probably drop Django templates completely."
django,30i2oi,ipmb00,2,Fri Mar 27 15:48:02 2015 UTC,Loved the video. Was checking out another blog post and the video isn't working on there.
django,30i2oi,cezar,1 point,Fri Mar 27 18:32:36 2015 UTC,Fixed!
django,30i2oi,never_safe_for_life,2,Fri Mar 27 18:39:34 2015 UTC,"Very cool. Though deploying a cloud-based site with a task queue, load balancer, cache, and database in 15 minutes without understanding what's going on in exquisite detail is a recipe for disaster."
django,30i2oi,TehMoonRulz,1 point,Sat Mar 28 05:25:46 2015 UTC,The HPD book link isnt working =/
django,30i2oi,TehMoonRulz,1 point,Fri Mar 27 15:58:35 2015 UTC,Thanks... fixed :)
django,30i2oi,pydanny,2,Fri Mar 27 16:03:40 2015 UTC,Awesome! I currently build internal business intelligence apps using Django hosted on Google App Engine. Aside from the types of best practices mentioned in readings like the Two Scoops series what can I expect to get out of reading High Performance Django?
django,30i2oi,TehMoonRulz,4,Fri Mar 27 16:20:31 2015 UTC,"Two Scoops is great at showing you the best practices for writing Python/Django apps. HPD is more focused on tuning, optimization, scaling, and deployment. The deployment stuff is taken care of for you on GAE, but you still want to build fast efficient sites. HPD will show you how/where to optimize DB queries, apply caching, use background tasks, etc. HTH!"
django,30i2oi,jlorencetti,5,Fri Mar 27 16:37:59 2015 UTC,"Having co-written Two Scoops of Django, I can back up what /u/ipmb00/ says. HPD's focus lets them really dig into the meat of performance, serving as an excellent companion to TSD. If you have any traffic on your site, at $39 HPD is an absolute steal for the value it provides."
django,30jr8x,stolen_loom,3,Fri Mar 27 23:40:05 2015 UTC,"To expand on what /u/ivix said... Typically, most people develop locally, using a version control system, and then when they're happy locally, push their code all at once to the remote location, perform a final test, make sure it's still good, and call it a day =P"
django,30jr8x,wpg4665,2,Sat Mar 28 00:09:26 2015 UTC,When running locally I can probably do 'runserver' and everything will work?  This is how I'll start doing it.
django,30jr8x,wpg4665,2,Sat Mar 28 00:28:03 2015 UTC,"Yes, from the Django manage.py. It's not recommended to run that way in production, but it's perfect for local development!"
django,30jr8x,ivix,2,Sat Mar 28 01:16:41 2015 UTC,"You should probably use version control, like git or mercurial."
django,30jr8x,ivix,1 point,Fri Mar 27 23:56:38 2015 UTC,I started doing it that way. It's clearly the right way.
django,30jr8x,nm1000,2,Wed Apr 1 03:13:58 2015 UTC,"Next is building a docker image, testing locally, then deploying that to your server."
django,30jr8x,nm1000,1 point,Wed Apr 1 08:34:50 2015 UTC,docker image?
django,30jr8x,nm1000,2,Wed Apr 1 15:31:58 2015 UTC,I do most of my development on Webfaction. It's just more convenient for me. You can still (and should) work on development instances and deploy to production instances. There is no reason that you can't do both on Webfaction. Version control is always a good idea.  If you learn emacs or vi then developing on Webfaction is quite natural. If you wish to continue editing files locally there are file transfer programs that detect changes to local files and will upload them automatically. What operating system and editor(s) do you run on your local machine?
django,30jr8x,nm1000,1 point,Wed Apr 1 02:08:22 2015 UTC,"I just started doing something similar to that today. I've been editing locally, pushing to an instance on webfaction (as a buffer), and then pulling to the live one. Git is amazing lol.  I would like to just work directly on a development instance and skip the whole local aspect. But are there full-featured editors that I can use for that? You mentioned emacs and vi... can I edit files on webfaction with emacs or vi from the SSH? And they'll just save my changes directly to the development isntance? That would be pretty grand. That seems like a really useful tool to learn.  edit:  oh yeah. I'm using Windows right now but I have Debian on my laptop. Does Linux make it easier to edit remote files?"
django,30jfrs,pewpewpewmoon,2,Fri Mar 27 22:03:00 2015 UTC,Go to inspector and see if the name is loaded correctly maybe its misspelled
django,30jfrs,Chahhhles,1 point,Fri Mar 27 22:30:55 2015 UTC,"Im intrigued, can you tell me more or link where it is in the docs? I only recently started using django"
django,30jfrs,Chahhhles,1 point,Fri Mar 27 23:02:57 2015 UTC,"When you are doing runserver, in your browser open you inspector and click on console.  Since its a 404 you should see the error. Usually when its a 404 its because you didnt load it right in the template.  Post some example code, and I can be of better help."
django,30jfrs,majormunky,1 point,Sat Mar 28 02:43:03 2015 UTC,"Usually when this happens to me, this is how I figure it out.  Going to assume your using Chrome:  1 - Right click on the background of your page, and choose view source 2 - Find the area where your calling your css file.  It should show up as a clickable link, click it. 3 - You should see your css file now.  If you don't, then your page is having the same problem you are.  You might be able to see an error or something in your console if your running the server on your own computer.  I'm sorta leaning on that maybe the css file thats having a problem has some sort of permission issue, it could be set so that only a certain user can read the file or something."
django,30jfrs,zarglex,1 point,Thu Apr 2 20:40:13 2015 UTC,"Hi,  Did you check permissions on this specific file ?"
django,30jl6z,frontierman,3,Fri Mar 27 22:47:31 2015 UTC,"Redirect to a GET page, while saving the information that was posted either with a cookie or an identifier in the url.  A bit of my code where I did this (part of the view function):  if post:     # Got a POST request - make form     form = AForm(request.POST)     if not form.is_valid():         # Missing data for at least one field         return render_to_response('foo/index.html', {             'form': form,             'error': 'Please fill in all the required information',             }, context_instance=RequestContext(request))      # Save the query for future reference     form.save()     query = form.instance     return redirect(query)"
django,30jl6z,natched,1 point,Sat Mar 28 00:24:06 2015 UTC,"Thanks for the reply. I tried replacing my HttpResponseRedirect line with the redirect you suggest. I receive a TypeError and argument of type 'WorkoutInfo' is not iterable. Below is the change I made.       query = form.instance     return redirect(query)     #return HttpResponseRedirect(reverse(""workout.views.workout""))   I don't quite understand what you mean by redirect to a GET page. In my template my form starts with:  <form method='POST' action='' class=""form-horizontal"" role=""form""> {% csrf_token %}   Isn't the line HttpResponseRedirect redirecting to a GET page? And the form data is saved in the request.session.   Any other insight?"
django,30jl6z,natched,1 point,Sat Mar 28 04:00:19 2015 UTC,"Sorry, I hadn't noticed that you were already using a redirect; I thought it was going through the render_to_response at the bottom.  I'm not sure exactly what the error is that you mention. In order to redirect to a Model you need to have its get_absolute_url(self) method defined, but I don't know what that would have to do with being iterable.  Looking back at your original code, I suspect that for some reason your form isn't valid and it isn't actually redirecting. Put some debug statement in there to make sure the redirect is actually happening, and it isn't just going past that, since I'm guessing it redirects to the same URL."
django,30iajh,avinassh,1 point,Fri Mar 27 16:47:35 2015 UTC,Grappelli has serious issues where many third party apps don't work in it. It also tends to fail every time you upgrade django. It's too tightly integrated into django.
django,30i8op,yuga_d,1 point,Fri Mar 27 16:33:21 2015 UTC,"Why not write your own? If it's just one type of product, it shouldn't be too much work. There's also saleor and satchless.  That said, I'm curious to hear what others have to say. IMHO, the ecommerce landscape in Django is severely lacking. Especially when compared to Rails projects (and landing pages) like this: https://spreecommerce.com/"
django,30i8op,rnevius,1 point,Fri Mar 27 18:07:05 2015 UTC,"I was thinking more something along the lines of this functionality: http://www.e-junkie.com/ej/help.file-downloads.htm but with the whole business logic available in python.   This is for a business idea I have so I just want to whip it together and see if it works without sinking too much time into it writing a whole digital download business logic backend.  You know, I don't like Ruby, but since Rails does have a lot more plugin power and this is a very basic project, it COULD work."
django,30i8op,chronug,1 point,Fri Mar 27 18:59:15 2015 UTC,"For the downloads, use xsendfile (Apache) or x-accel-redirect (Nginx) headers so that you can serve the PDF as static content, rather than having to load it and stream it out in your Python process.  An commerce solution might be overkill for the storefront, but it depends on your requirements and skill level. If you are using an easy to integrate payment provider like Stripe and you don't have complicated tax or accounting issues, etc then you could probably throw something together from scratch in a couple of days.  If your business is producing those PDFs and building a storefront would just be a diversion from what makes you money, then consider using gumroad.com who specialise in exactly this and will just take care of everything for you."
django,30i8op,chronug,1 point,Sat Mar 28 13:17:12 2015 UTC,"Thanks for the suggestions. For another, much larger project that it looks like I will be taking on, the specs will be to build a large storefront with categories, search functionality, robust shopping cart, and have admins upload products. What would you suggest for that in the Django ecosystem? Or are there other solutions that you think would work as well? I can write Java (C# would fine as well), don't really want to do Rails unless I have to, and would like to stay away from PHP/Wordpress."
django,30hcpr,ThorAkureyri,1 point,Fri Mar 27 11:43:34 2015 UTC,"the error says that it can't import vh, if that's the actual error you are trying to import vh directly not ""view_helpers as vh"", maybe in another file that you import from views.py"
django,30hcpr,Brandhor,1 point,Fri Mar 27 11:59:17 2015 UTC,"Ok, when I change the import line to 'import view_helpers' or 'from view_helpers import *' it gives me the message 'No module named view_helpers'."
django,30hcpr,jamsquad87,1 point,Fri Mar 27 12:08:23 2015 UTC,Try:  from . import view_helpers as vh   or to just get that function  from .view_helpers import url_key
django,30hcpr,jamsquad87,1 point,Fri Mar 27 17:53:54 2015 UTC,"I tried both, they both give the same error 'No module named view_helpers'."
django,30hcpr,dalore,1 point,Fri Mar 27 18:59:08 2015 UTC,Do you have a __init__.py file within the folder?  (Empty or not)  You need that file for python to import things from that directory
django,30h9jj,mippen,4,Fri Mar 27 10:57:50 2015 UTC,Put the dashboard in a third app.
django,30h9jj,anossov,1 point,Fri Mar 27 11:13:05 2015 UTC,Thanks for the help. I hadn't really thought of having 'apps' that are just models.
django,30i2s5,gigglypop2015,3,Fri Mar 27 15:48:46 2015 UTC,"This is a broad question. Are you talking about django apps?  If you are using well documented apps, there is little need to wade through the code. As long as pip / virtualenv is set up, then there are tons of incredibly useful apps to effortlessly pull in.  Certainly for core functionality, but if there is already an app with unit tests for something i'd pull it in."
django,30i2s5,michaelpb,4,Fri Mar 27 15:53:22 2015 UTC,"I don't know what this post is supposed to be about...yes you will probably love writing code over reading someone else's but in a professional environment you are reading code WAY more than writing it, so I wouldn't take a stance against this."
django,30i2s5,floydianspiral,1 point,Fri Mar 27 15:52:03 2015 UTC,(user was banned for this comment)
django,30de8h,brianyesh,2,Thu Mar 26 13:50:12 2015 UTC,This explains so much. I've been on the verge of pulling my hair out on multiple occasions because logging events weren't propagating for no apparent reason.
django,30dyd0,developthese,1 point,Thu Mar 26 16:32:15 2015 UTC,"in the save method of your serializer, you might want to use get_or_create instead of create.  https://docs.djangoproject.com/en/1.7/ref/models/querysets/#get-or-create"
django,30dyd0,metaphorm,1 point,Thu Mar 26 18:12:45 2015 UTC,Could you post the contents of your models.py file?
django,30dyd0,TheKuchenBurglar,1 point,Thu Mar 26 18:52:24 2015 UTC,"It doesn't seem like it's trying to create the model twice, it seems it's trying to insert data in the database with an invalid storage with duplicate keys -- your current database have a duplicate key, you're adding a new constraint and it can't do because the data doesn't fit it, or something like that.  Remove (or fix) the duplicate key in the current database and try again."
django,30dyd0,juliob,1 point,Thu Mar 26 17:26:52 2015 UTC,Do you mean something along these lines.  I've reset the primary key field. But it did not resolve the issue.
django,30eonw,MrAckerman,3,Thu Mar 26 19:36:57 2015 UTC,"Yes, you will probably want to make a ManyToMany relationship for the Keywords. This is pretty common for tagging, etc. You might even consider using a tagging app, since that sounds like what you want https://github.com/alex/django-taggit"
django,30eonw,michaelpb,2,Thu Mar 26 19:55:06 2015 UTC,"If you don't mind something cutting edge, and you are using Postgres (recommended) you can use the ArrayField that is coming in 1.8:  https://docs.djangoproject.com/en/dev/ref/contrib/postgres/  Django 1.8 is not far away, and there are stable betas out - https://www.djangoproject.com/download/  Edit: there are other Django apps that may provide some of this too: https://www.djangopackages.com/grids/g/postgresql-integration/  However builtin support in Django 1.8 is likely to be better."
django,30eonw,spookylukey,1 point,Thu Mar 26 19:51:47 2015 UTC,"In addition to what the others have said, another option is to store a comma-separated list of strings in a textfield. This will require you to manually join and split the stored strings whenever you need to write or read."
django,30eonw,strig,1 point,Thu Mar 26 22:15:07 2015 UTC,"This is pretty bad database design and means you can only use it to show in your template what words are part of it, not use it in any meaningful way to search on."
django,30eonw,dzyl,2,Mon Mar 30 18:56:52 2015 UTC,"Yeah, M2M is probably the way to go, just pointing out another possibility."
django,30c6xt,akaTreyT,1 point,Thu Mar 26 04:15:53 2015 UTC,Rackspace is managed. A portion of what you are paying for is their support team and you could pay more and basically not hire sysops for a good amount of time as a start up.  Linode is unmanaged and you won't be able to get help beyond logging in as root and network issues.
django,30c6xt,STRiDEX,1 point,Thu Mar 26 05:57:59 2015 UTC,https://www.linode.com/managed
django,30c6xt,daekano,2,Thu Mar 26 16:09:09 2015 UTC,Or they both have managed then.
django,30c6xt,STRiDEX,1 point,Thu Mar 26 16:45:49 2015 UTC,"Interesting, didn't know Linode offered managed. Honestly about a year ago I switched over to DO form Linode and never looked back. Seems they have had a serious performance upgrade in that time also. Good stuff."
django,30c6xt,atmatech,1 point,Thu Mar 26 22:16:27 2015 UTC,Use AWS.  It has heaps of flexibility.
django,30c6xt,michaelpb,1 point,Thu Mar 26 15:45:51 2015 UTC,"Going to a AWS thing in Dallas in a few weeks, since I know absolutely nothing that Amazon has to offer, after that I'm sure I will be in love."
django,30c6xt,vangale,1 point,Thu Mar 26 22:17:24 2015 UTC,"Personally I'm a fan of Digital Ocean, cheaper than AWS, easiest interface and fast and good featureset. But AWS is pretty popular also.  If you want the thing 100% managed and don't care about cost you should just go down the heroku route.  But these are all just taste, tbh."
django,30ahqw,TomNook91,9,Wed Mar 25 20:14:08 2015 UTC,Absolutely
django,30ahqw,rnevius,3,Wed Mar 25 20:24:15 2015 UTC,Yep.
django,30ahqw,jlorencetti,2,Wed Mar 25 20:47:52 2015 UTC,"Yes, the book shows you very good the best practices which you can use for your django projects. So I would suggest you too to read it :)"
django,30ahqw,bykof,2,Wed Mar 25 20:41:21 2015 UTC,"Yes, the practices shown in the book are still very relevant and the changes in 1.7 are minimal compared to the large amount of knowledge in the book."
django,30ahqw,new2django,1 point,Wed Mar 25 21:41:39 2015 UTC,Certainly my copy has helped at a job with Django 1.7.  What is really exciting is that https://github.com/twoscoops/two-scoops-of-django-1.8/issues has recent issues added!
django,30ahqw,ramsesthedog,3,Wed Mar 25 20:48:27 2015 UTC,/u/pydanny can you confirm that there will be a Two Scoops 1.8?! Any idea about the timeline? I was so disappointed there was no 1.7! I loved TS 1.6 and would preorder 1.8 right now if I knew for sure that it's coming!
django,30ahqw,pydanny,2,Thu Mar 26 05:09:00 2015 UTC,https://twitter.com/audreyr/status/586663089140936705  :-)
django,30ahqw,ramsesthedog,2,Sun Apr 12 05:09:34 2015 UTC,I'm so excited! Thanks for all the great contributions you and Audrey make to the Django community.
django,30ahqw,pydanny,2,Wed Apr 15 17:00:53 2015 UTC,"You are welcome! FWIW, a large part of why we are printing the next version is to justify our time working on open source projects. We can't recommend something if it doesn't work, right? ;)"
django,30ahqw,TweetsInCommentsBot,1 point,Wed Apr 15 17:33:21 2015 UTC,"@audreyr   2015-04-10 22:52 UTC  Thinking of getting Two Scoops of Django? Wait, hold off temporarily! Stop! The ebook and paperback for #twoscoops18 are coming out soon     This message was created by a bot  [Contact creator][Source code]"
django,30ahqw,new2django,2,Sun Apr 12 05:10:19 2015 UTC,I would say it's confirmed:   https://github.com/twoscoops/two-scoops-of-django-1.8/issues/5 http://twoscoopspress.com/pages/two-scoops-of-django-1-6-faq#update
django,30anlq,new2django,4,Wed Mar 25 20:56:02 2015 UTC,sounds a lot like google drive? If that's the route your going to go they have a restful api - of course users need a google account.    alternatively openpyxl is library that reads/writes xlsx files.
django,30anlq,jimmy_frog,5,Wed Mar 25 21:23:36 2015 UTC,"Incidentally I just had to read in xls data for a project at work today. I highly recommend these packages. xlrd is for reading, xlwt is for writing excel sheets. I only needed xlrd,  but I was able to interpret xls data in minutes, it was smooth really. xlwt must be the same I imagine. Great docs too."
django,30anlq,criticalshit,3,Wed Mar 25 21:45:48 2015 UTC,"I haven't used xlrd, but I recently used xlwt and it was quite easy. I, too, recommend those packages."
django,30anlq,lamintak,1 point,Wed Mar 25 22:40:46 2015 UTC,"xlwt only supports xls meaning it can't handle more than 256 columns, personally I would suggest using xlsxwriter instead."
django,30anlq,catcint0s,2,Fri Mar 27 15:12:02 2015 UTC,I tend to use a Google docs api library for python called gspread in django to write or read directly from a Google docs spreadsheet
django,30anlq,theredknight,1 point,Thu Mar 26 16:27:04 2015 UTC,Thanks!
django,3062fo,tbarbugli,7,Tue Mar 24 19:51:27 2015 UTC,Disclaimer: I am the author of the linked app (and co-founder of getstream.io). This is a follow up on a tutorial that I wrote weeks ago (https://gist.github.com/tbarbugli/97bf26f400ecf1443ef6)
django,3062fo,pupupeepee,3,Tue Mar 24 19:53:00 2015 UTC,You guys have a really cool product and make a lot of great content. Keep it up!
django,3062fo,sheshtawy,1 point,Wed Mar 25 03:01:03 2015 UTC,Awesome Product man!! But it has some bugs in UI design Responsive capabilities
django,3062fo,avinassh,1 point,Wed Mar 25 12:37:21 2015 UTC,Live demo of the app - http://tw.getstream.io/  Really nice!
django,306arf,pemboa,1 point,Tue Mar 24 20:49:46 2015 UTC,Approach 2 is the only sensible option.  Amazon S3/Rackspace's offering.  There are plenty of apps/extensions for managing user uploads out there.
django,306arf,Livesinthefuture,1 point,Tue Mar 24 21:51:21 2015 UTC,"There are plenty of apps/extensions for managing user uploads out there.   True, but they don't seem to offer any hooks to help with application generated files."
django,306arf,Livesinthefuture,1 point,Tue Mar 24 21:55:24 2015 UTC,Pull requests or see if you can use the in-built Django signals on your application to trigger them.
django,306arf,aball730235,1 point,Tue Mar 24 22:11:34 2015 UTC,I've used amazon s3 / cloudfront for hosting user uploaded content.  Multiple django servers running on heroku.  I used the library django s3 direct.  https://github.com/bradleyg/django-s3direct  Majority of the time was configuration... Only a little bit of extra code was written to adapt the s3 direct library for my application
django,306arf,Brandhor,1 point,Tue Mar 24 23:51:09 2015 UTC,you can also use a filesystem like glusterfs
django,307blb,dsizemore,3,Wed Mar 25 01:26:49 2015 UTC,"if I had to guess it might be because your MEDIA_URL is a subfolder of STATIC_URL, that means that the url dispatcher sees that you are trying to access something in /assets/ when you access /assets/uploads/ and it sends the request to the staticfiles app since it comes first"
django,307blb,Brandhor,1 point,Wed Mar 25 09:11:12 2015 UTC,"You guessed it. I've always had media and static files living under one umbrella folder called ""assets"" and have never had this issue before. Guess something must have changed in django 1.7.  I appreciate the help."
django,307blb,Brandhor,1 point,Wed Mar 25 15:59:56 2015 UTC,you can probably have them both under assets but in different subfolders like   MEDIA_ROOT = '/Users/Deron/Sites/sitename/sitename/assets/uploads/' MEDIA_URL = '/assets/uploads/' STATIC_ROOT = '/Users/Deron/Sites/sitename/sitename/assets/static/' STATIC_URL = '/assets/static/'
django,307blb,atmatech,1 point,Wed Mar 25 16:12:04 2015 UTC,Thanks. Looks like that also worked. I guess it just won't work the way I had it with not specifying a folder inside of assets for static.
django,307blb,atmatech,1 point,Wed Mar 25 16:36:38 2015 UTC,Try and collect static to gather all the files you're using:  https://docs.djangoproject.com/en/1.7/ref/contrib/staticfiles/#management-commands  Also add this to your main urls.py: from django.conf.urls.static import static
django,303w9f,tutuca_,6,Tue Mar 24 06:55:53 2015 UTC,"I've tried JS text editors like Atom and Brackets, but they're just so damn slow. I honestly can't understand why anyone would use them over Sublime Text."
django,303w9f,rnevius,2,Tue Mar 24 06:58:41 2015 UTC,%s/Sublime Text/vim/g
django,303w9f,dorsal_morsel,1 point,Tue Mar 24 12:56:52 2015 UTC,%s/\zevim/neo/g
django,303w9f,ComradeRikhi,1 point,Tue Mar 24 13:07:25 2015 UTC,"A while back I explained why I thought everyone should give a traditional Unix text editor at least one genuine try.  I still stick to that advice (and, personally, to Emacs)."
django,303w9f,ubernostrum,2,Tue Mar 24 22:12:56 2015 UTC,"Brackets didn't seem slow to me, though (in my opinion), it's pretty much restricted to frontend work. Main reason I use Brackets for frontend is the Extract for Brackets, which is really handy with the amount of PSDs I have to work with.  In terms of anything backend related, I prefer Sublime Text for smaller to mid-size projects, and PyCharm (or similar IDEs) for larger projects."
django,303w9f,Radau,1 point,Tue Mar 24 07:34:09 2015 UTC,"I've been using PyCharm, but haven't reached my 30-trial period yet. Is Sublime better? PyCharm seems fine. Standard."
django,303w9f,stolen_loom,1 point,Thu Mar 26 00:13:47 2015 UTC,"I use both, to be honest. They're completely different beasts. Sublime Text is a text editor. Pycharm is an IDE. If you're happy with Pycharm, I'd say stick with it."
django,303w9f,rnevius,1 point,Thu Mar 26 02:07:33 2015 UTC,"IDE's feel so cumbersome, but I like how they spot problems in a framework that I would have to work hard to catch."
django,303w9f,stolen_loom,1 point,Thu Mar 26 03:40:16 2015 UTC,"Agreed. IDEs do a lot, which I definitely appreciate when I'm working on a big project. If I'm doing a quick demo, or need to make a quick bug fix, a text editor like Sublime is completely adequate."
django,303w9f,rnevius,3,Thu Mar 26 04:01:16 2015 UTC,"Your attitude is not what we expect from the Django community, and as such your comment has been removed. Please review the Django community's code of conduct so as to familiarize yourself with our expectations."
django,303w9f,rnevius,4,Tue Mar 24 14:30:45 2015 UTC,I use PyCharm as well. The discussion was about text editors...not IDEs. You should learn a bit more before trying to shame people.
django,303w9f,blbil,3,Tue Mar 24 22:10:40 2015 UTC,Mind providing some empirical evidence from primary sources?
django,303w9f,arcticblue,3,Tue Mar 24 14:36:01 2015 UTC,"I don't do Django stuff any more, but I use Atom.  It's much faster these days than it used to be.  I really like it!  But yeah, if you're looking for good code completion / ""intellisense"" type stuff, something like PyCharm is your best bet."
django,303w9f,brtt3000,3,Tue Mar 24 14:54:26 2015 UTC,"PyCharm is the one for me. It cost some money, uses a ton of RAM but it has never let me down when projects grow."
django,303w9f,alceal,2,Tue Mar 24 16:19:39 2015 UTC,I prefer sublime over atom but I have had troubles when I tried to build within a virtual environment. So I changed to Liclipse (Eclipse + PyDev) and I'm very happy. Try it.
django,303w9f,wmil,2,Tue Mar 24 13:47:37 2015 UTC,Back when I first tried to use PyDev getting the Python library paths set up correctly was nightmare.  Is that still an issue?
django,303w9f,alceal,1 point,Tue Mar 24 17:38:44 2015 UTC,I haven't got any issues yet. I love Liclipse's autocompletation. It's as good as Pycharm's one or even better imo.
django,303w9f,mattwritescode,1 point,Tue Mar 24 09:14:41 2015 UTC,Tried using the virtualenv package?
django,303w9f,alceal,1 point,Tue Mar 24 18:12:12 2015 UTC,"Yes, I did. My packages were Anaconda, Virtualenv, SublimeREPL, Terminal, SidebarEnhancement and Theme Lyte."
django,303w9f,Pilferer,2,Wed Mar 25 09:54:03 2015 UTC,"The strength of Atom lies in its plugins. I've been using it instead of PyCharm CE for a couple months. Check out these plugins:   django-templates autocomplete-plus-jedi linter-pylint   Those will give you Django template support, intelligent autocompletion, and inline code checking. Atom is based on Chromium and is a bit of a memory hog, but it's been treating me well."
django,303w9f,Pilferer,1 point,Tue Mar 24 19:41:53 2015 UTC,Did you managed to configure jedi to work with a given virtualenv?
django,303w9f,aftli_work,2,Wed Mar 25 09:56:27 2015 UTC,Did you managed to configure jedi to work with a given virtualenv?    The plugin Readme says to launch Atom from the command line while your virtualenv is active to have the Jedi recognize it.
django,303w9f,thewhitetulip,1 point,Tue Mar 24 12:44:48 2015 UTC,I should be doing something wrong then. I've give it another run.
django,303w9f,dieselpowa,2,Tue Mar 24 17:09:32 2015 UTC,"You all will probably hate me for it, but I love it: I use Visual Studio with Python Tools for Visual Studio. I come from the C++ world, so Visual Studio is something I'm used to (and, honestly, it's a pretty good IDE), and PTVS works excellently. I can't really think of a shortcoming. If you already have Visual Studio, PTVS is free, definitely give it a try."
django,304989,thewhitetulip,6,Tue Mar 24 10:30:26 2015 UTC,"Based on this code:  def home(request, auth_form=None, user_form=None, notes_form=None, category_form=None, message=None, notes=None, categories=None, stub=False):     stub = stub     message= message or ''     if not notes:         notes=notes     categories = categories or None   I think that you might think that there is some distinction between variables set as parameters and variables set within a function. There isn't.   I wonder particularly about these lines:      if not notes:         notes=notes   If notes has no value, and you are wanting to give it a value, you cannot give it a value by setting it to itself! There is no difference between the notes on the left side of the = and the right side of the =.  These seem like problems of not understanding basic fundamentals of programming. Are you just starting out with programming?  More, briefer notes:   you have unused imports in models auto_now always set the field to datetime.datetime.now() so you don't need to override the save function there is a models.SlugField that you should use instead of models.CharField. Whenever possible, use the most exact form of field you can. you should move the notes urls to notes/urls.py don't auto-set the slug field on every save. It's not a hard rule but in general practice the slug is used as an identifier so it shouldn't really change after creation. Also, if for some reason an admin wants to change the slug field they're not able to because you're always overwriting it. move the login views outside of the Notes app. In fact I would just use Django's built in contrib.auth.views for this. there is no reason to send every view to the home function. In fact, I would refactor that view considerably — almost all of it should be moved out into other views instead of checking for login in each view and then redirecting or returning different views, you can just wrap each view function with django.contrib.auth.decorators.login_required which will automatically redirect the user to the login page.   I think much of the code is not doing what you think it is doing (for example, notes_by_category will show everyone's notes, not just yours). Especially for a basic app like this I would strongly encourage you to use class-based views which will handle most of the logic for you.  Also your test cases are way too focused on things like redirects, logins, etc. These aren't the most important tests. For more important to test that, e.g. when you save a note the information is saved correctly, that users only have access to their own notes, etc. You definitely don't need to test things like whether adding a user works — that's already built into Django and they have spent several years writing many many tests which cover all sorts of possible problems. Their tests will be better. In fact, as far as I can tell your test_add_user will always fail."
django,304989,youlleatitandlikeit,1 point,Tue Mar 24 17:13:12 2015 UTC,"Thanks a lot for the feedback!  The notes=notes thing is stupid! I feel like an idiot! I wanted to save the note parameter to the note variable of the function, you are totally right I should use class based views, in a class based view it would have been like this  self.notes = notes ergo when a user is redirected to home from some other view then the notes sent by the particular function.   test cases   also regarding test cases, I actually haven't ever written test cases so was just trying to add some test case for the sake of testing the code, I am still learning how to write test cases.   redirecting to the home view   I thought that when I begin implementing ajax then it would be good for having one view, I am not sure of it though, and initially I had different views but then I merged it with the home because I had to duplicate the code of fetching categories & notes every time something new happened, could you please tell me more about it?   notes_by_category shows every user's notes I forgot to add a user=user to the Notes.objects.filter()   I realized few days ago that I should be using class based views, now I will surely implement them!"
django,304989,youlleatitandlikeit,1 point,Wed Mar 25 12:14:07 2015 UTC,For Ajax it's even worse to have only one central function.
django,304989,avinassh,1 point,Wed Mar 25 14:07:49 2015 UTC,"Okay, my bad, next time i work on it, I'll do as you suggested. Thank you :)"
django,304989,youlleatitandlikeit,1 point,Thu Mar 26 03:31:24 2015 UTC,For Ajax it's even worse to have only one central function.   can you elaborate why?
django,304989,Nick4753,1 point,Fri Mar 27 16:35:13 2015 UTC,"Yes. Ajax functions are generally very specific: update this record, create this other record. They benefit the most from having very, very specific purposes and outputs.   A single central function is more useful when you're rendering a page with multiple overlapping functions: for example, a page with 2 or more forms where you want to be able to process submissions from those forms and return the multi-form page again."
django,304989,mbi0,3,Sat Mar 28 02:17:11 2015 UTC,"Don't have a ton of time to go through everything, so I'll just comment on part of notes/tests.py and let others go forward  Be sure to flesh out your view tests more. Have more unittests instead of one big unit test. And use setUp() to set self.client if you want to use a single client object across your entire test.  You can take advantage of inheritance here too.  https://github.com/plyrs/onweb/blob/master/notes/tests.py#L9-L10  class LinkTestCase(TestCase):     client = Client()   Should be (I think)  class LinkViewTestCase(TestCase):     """"""Link Test""""""     def setUp(self):         """"""Setup the Link Test""""""         self.client = Client()  class HomeViewTest(LinkTestCase):     """"""Test for home view""""""     def test_authenticated_user_post_whatever(self):         """"""Test when a user is authenticated and there is a post or whatever""""""         result = self.client.post('/path/', {'data': 'here'})         self.assertEqual(result.status_code, 200)  class LoginViewTest(LinkTestCase):     """"""Test for login view""""""     def test_logout_get(self):         """"""Test a GET request does nothing""""""         # FYI, you probably want the GET request to be the request that         # logs out a user         result = self.client.get('/logout-view/')         self.assertEqual(result.status_code, 302)"
django,304989,ramboIII,1 point,Tue Mar 24 13:58:41 2015 UTC,"That is a good idea. Thank you for the insight! I have never written test cases before, could you please provide me a link to some good django testing tutorial which you think is good?"
django,300n4k,nathforge,9,Mon Mar 23 15:03:16 2015 UTC,"it's nice to see an updated theme but I think they should also update its functionality, lately I've been using xadmin (demo)  and it offers a lot of customization, the only problem is that the docs are in chinese and you have to dig through the code sometimes to understand how things works"
django,300n4k,Brandhor,2,Mon Mar 23 16:43:16 2015 UTC,that is pretty cool. is it really drop-in or do you need a lot of stuff to make it work right?
django,300n4k,brtt3000,3,Mon Mar 23 19:16:40 2015 UTC,I think crispy forms is the only requirement
django,300n4k,Brandhor,4,Mon Mar 23 19:17:37 2015 UTC,"elky here. Hi everyone. Just found this thread in google. Few words on this django theme.  I intentionally made css changes only - this is one only chance to make this theme merged in django repo now. Otherwise it will be just another app. Third-party apps are often use their own layout/style -so we can't control it - that's why slight css changes are good solution and that's why we always see issues in popular apps trackers like ""add grappelli support"".   If my theme merged in 1.9 - next step is to add font icons instead of small gif images.  Feel free for any questions.  King regards, Alex."
django,300n4k,elkyf1,3,Thu Mar 26 18:40:13 2015 UTC,"I agree with the other comments that 'flat' has passed and 'material' is the new hip design thing, but still I think your CSS is a real improvement over the current default and I hope it gets merged.   We're still using django-suit, it is good enough for corporate use, but it looks a bit dated. The customisations are nice though, just enough to make admin sorta work for daily use."
django,300n4k,brtt3000,3,Mon Mar 23 19:15:45 2015 UTC,"We're still using django-suit, it is good enough for corporate use, but it looks a bit dated. The customisations are nice though, just enough to make admin sorta work for daily use.   Try the bs3 version.    pip install -U https://github.com/darklow/django-suit/tarball/bs3"
django,300n4k,danielsamuels,5,Mon Mar 23 22:19:40 2015 UTC,"Maybe someone with more exposure than myself has an opinion on this.  My thought is the django admin rarely gets attention in the release cycles because it is not used in depth in a lot of implementations. At our office, we write a custom admin that is branded for every project we have.  The current admin looks fine for a few changes if something odd occurs, but in general i dont think people are using the default admin every day.  That being said, WordPress admin looks so much cleaner."
django,300n4k,thekingofcrash7,2,Mon Mar 23 21:24:45 2015 UTC,"I go the same route. Not only is wiring up my own views/logic easier than using the admin, but I get to keep the admin pages looking exactly like the rest of my site with very little effort."
django,300n4k,Skiba_,2,Mon Mar 23 22:11:41 2015 UTC,"I wondered the same thing.  On my current project, django-admin gives too much power to the users who would be using it, so I wrote my own views with more restricted functonality.  If I am needing to do things on the site, it is often easier for me to just use the shell.  So django-admin falls somewhere in between those two extremes and doesn't get used much."
django,300n4k,scoobertron,15,Tue Mar 24 09:55:06 2015 UTC,"Great that it's being updated...but even the update looks like it was designed 3-5 years ago. There's a reason ""flat design"" is no longer as widespread as it once was.   That said, I think it's great that the Admin is seeing some attention. It would be great if it would continue to evolve on a per-release basis (a la WordPress Admin). Thanks to the Django team!"
django,300n4k,rnevius,2,Mon Mar 23 15:22:41 2015 UTC,"There's a reason ""flat design"" is no longer as widespread as it once was.   I am new to web development. Is there a specific reason or just something that changed over time?"
django,300n4k,Bambonke,3,Mon Mar 23 16:31:30 2015 UTC,Flat design is just overused now-days.
django,300n4k,ionelmc,2,Mon Mar 23 17:08:11 2015 UTC,These days everything new is overused and that's precisely why the hip status is lost
django,300n4k,thewhitetulip,2,Tue Mar 24 10:28:46 2015 UTC,"""Overused"" is subjective. There are plenty of actual reasons why flat design isn't ideal for all elements on a page."
django,300n4k,rnevius,7,Mon Mar 23 17:11:39 2015 UTC,"Its quite nice, but I think I prefer django-admin-bootstrapped.   https://github.com/django-admin-bootstrapped/django-admin-bootstrapped  Its not overly flat like this."
django,300n4k,colly_wolly,4,Mon Mar 23 18:04:07 2015 UTC,"I'd rather look at a theme implementing material design TBH, if flat design is the way forward. Flat layouts are dull and make things hard to distinguish without any shadows."
django,300n4k,ionelmc,12,Mon Mar 23 17:10:14 2015 UTC,Actually i'm working on material design for django admin - https://github.com/viewflow/django-material  But it's hard to represent all features of django admin in material design
django,300n4k,kmmbvnr,1 point,Tue Mar 24 04:53:41 2015 UTC,Any screenshots of it?
django,300n4k,ionelmc,8,Tue Mar 24 09:05:12 2015 UTC,Just made some - http://imgur.com/a/rsoSy
django,300n4k,kmmbvnr,1 point,Tue Mar 24 13:43:55 2015 UTC,Dude that looks awesome. How usable is it in its current state?
django,300n4k,tr4ce,1 point,Tue Mar 24 14:08:16 2015 UTC,"This looks much better than django-flat-theme. Keep up the good work, it's awesome!"
django,300n4k,ionelmc,1 point,Tue Mar 24 17:42:48 2015 UTC,Wow! It looks incredible. I shall watch with great anticipation.
django,300n4k,erroneoustwain,1 point,Wed Mar 25 02:01:06 2015 UTC,that's just so...awesome! can't wait for final version.
django,300n4k,avinassh,1 point,Fri Mar 27 16:41:56 2015 UTC,Very nice job. Could you tell us what is hard to represent in Material?
django,300n4k,clint74,1 point,Mon Apr 6 16:50:51 2015 UTC,Awesome!! It works also for the admin ?
django,300n4k,vaporic,1 point,Sun May 3 22:01:54 2015 UTC,Love it.
django,300n4k,skolsuper,1 point,Mon Mar 23 15:31:14 2015 UTC,I love it
django,300n4k,tbarbugli,1 point,Tue Mar 24 20:43:59 2015 UTC,Am I right in saying that the HTML behind the admin is the same and its purely a CSS update?
django,300n4k,mattwritescode,1 point,Thu Mar 26 08:04:13 2015 UTC,No mention of Grappelli?
django,304crp,amfoejaoiem,3,Tue Mar 24 11:21:57 2015 UTC,"What's the error?  First one is dispatch, if it's a GET request it adds the form to the template context, if it's a POST it validates the form and if it's valid form_valid gets called."
django,304crp,catcint0s,1 point,Tue Mar 24 11:26:04 2015 UTC,"Teach a man to fish and all that, FormView is documented here:  https://docs.djangoproject.com/en/1.7/ref/class-based-views/generic-editing/#formview.  From that, we can see that a FormView inherits from the following:   django.views.generic.base.TemplateResponseMixin django.views.generic.edit.BaseFormView django.views.generic.edit.FormMixin django.views.generic.edit.ProcessFormView django.views.generic.base.View   The View class shows the following method flowchart:   dispatch() http_method_not_allowed() options()   dispatch() is indeed called first on views.  You can follow the hierarchy on all of those for more information."
django,304crp,aftli_work,5,Tue Mar 24 14:50:17 2015 UTC,Also this website is extremely useful: http://ccbv.co.uk
django,304crp,TasticString,1 point,Tue Mar 24 15:16:30 2015 UTC,"Ah yes, that is very useful, thanks!"
django,304crp,aftli_work,1 point,Tue Mar 24 15:33:10 2015 UTC,Thanks to both of you! I'll trace this down a bit more now.
django,304crp,youlleatitandlikeit,1 point,Wed Mar 25 10:44:54 2015 UTC,anon_next_question is almost certainly a custom method not included in standard Django. So either it is a method you wrote yourself or you are using a FormView from another library.
django,3035bo,slrqm,6,Tue Mar 24 02:12:10 2015 UTC,"I've found Foundation very difficult to use and poorly documented. This may have changed in the last few months, but it's an opposite experience to Bootstrap. So much documentation, many themes to choose from all over the Internet, and it's tied into quite a few things already.   I'd pick Bootstrap, I love how it makes whipping up neatly organized things quick and easy. https://github.com/dyve/django-bootstrap3"
django,3035bo,ckcollab,1 point,Tue Mar 24 06:38:14 2015 UTC,"I've looked into both, Bootstrap and Foundation, maybe already 2 years ago. Both had pretty much the same quality and quantity of documentation.  Here's Foundation's documentation today. What's missing?"
django,3035bo,dAnjou,1 point,Tue Mar 24 20:24:39 2015 UTC,"It's not that things were missing, it's that they were hard to find or the weren't presented in an easy-to-read way. For example, just glancing at each site now I can get exactly where I want to in 1 click with bootstrap and ctrl + f, in Foundation there are so many places to look for what I want. Another example, say I want to compare the different kinds of navs... I have to click + scroll through 10 different sections that don't need to have their own section.  It just doesn't... feel right. Bootstrap gets it, Foundation doesn't -- that's 100% opinion and I'm probably an idiot."
django,3035bo,ckcollab,1 point,Tue Mar 24 20:39:38 2015 UTC,In my own opinion with limited experience I find that bootstrap site very samey. I can often tell a site is bootstrap just by looking at it but that's not to say it looks bad just not unique. That said I've found it very quick to pick up though learning how to get padding working properly took a while.
django,3035bo,meatdragon,3,Tue Mar 24 09:23:39 2015 UTC,"This is a common complaint of Bootstrap, but i think this is just because people simply add the bootstrap css, add some rows, then leave it."
django,3035bo,thekingofcrash7,1 point,Tue Mar 24 12:03:56 2015 UTC,"Foundation CSS are definitely better for custom design. Bootstrap has too many padding/margins and shadows everywhere, that makes hard to customize it, even with less/sass variables.  I used both for backend, and found only one small issue. Bootstrap have fixed-width form prefix/suffix elements, but with foundation width of form field prefix will scale in fluid container. That looks terrible on full hd screens.  That's basically why I found bootstrap more suitable for backend )  Btw. if you are not bound with old browsers, I recommend to use https://github.com/ptb/flexgrid or http://flexboxgrid.com/ instead of grid component of any other framework. Flex makes layout more predictive and composable without bad side effects.  Also it's not worse to check some modern alternative - http://materializecss.com/ If you are worry about end user satisfaction."
django,3035bo,kmmbvnr,2,Tue Mar 24 05:08:34 2015 UTC,"I disagree about Bootstrap being difficult to customize. I use the SASS port of Bootstrap frequently, and none of my sites look Bootstrappy. I highly recommend it if you go the bootstrap route."
django,3035bo,rnevius,0,Tue Mar 24 05:29:33 2015 UTC,I don't mean that customizing Bootstrap is so difficult. It's just harder than Foundation
django,3035bo,kmmbvnr,1 point,Tue Mar 24 06:15:57 2015 UTC,"Answer is no. Completely irrelevant to Django being the back end. To answer your irrelevant question that belongs in another forum, I tend to use Foundation for in-house projects as I find it better designed. I use Bootstrap for anything I have to hand over as it has more momentum. This way if I don't want to maintain it there are cheap freelance programmers that will.  Phillip."
django,3035bo,ptemple,0,Tue Mar 24 23:28:14 2015 UTC,Use whichever works best for you. The advantages/disadvantages are subjective.
django,3035bo,ccb621,-1,Tue Mar 24 02:15:36 2015 UTC,Absolutely none at all. No advantage
django,3035bo,cmsimike,0,Tue Mar 24 05:13:22 2015 UTC,"Django is a backend application framework, Bootstrap and Foundation are layout and style frameworks. If either kind of framework interfere with the choice of the other then don't use it.  Besides that I'd say it's a matter of preference."
django,3048lf,erroneoustwain,1 point,Tue Mar 24 10:21:08 2015 UTC,Look into using curry  http://stackoverflow.com/questions/18567596/django-how-to-filter-foreignkey-choices-e-g-with-request-user-with-modelform  (This might not be relevant after thinking a bit more about your particular situation)
django,3048lf,TasticString,1 point,Tue Mar 24 16:38:32 2015 UTC,Thanks for that. It looks like more brain hurting is ahead of me.
django,3048lf,TasticString,1 point,Tue Mar 24 22:38:00 2015 UTC,"It is worth a look to see if it would actually fit your case.  Formsets beyond the incredibly simplistic, are challenging to wrap your head around at first!"
django,301j6s,akshar-raaj,2,Mon Mar 23 18:58:05 2015 UTC,Could you redo this tutorial using DRF?
django,301j6s,new2django,1 point,Wed Mar 25 20:51:15 2015 UTC,"Yep, plan on doing it."
django,301j6s,Mekhami,1 point,Thu Mar 26 15:29:17 2015 UTC,Your social media like and share bar thing is completely disruptive of the mobile experience for your blog.  You should remove it on mobile or affix it to the left top or something cause right now it floats over the content.
django,301j6s,new2django,1 point,Thu Mar 26 21:41:20 2015 UTC,Thanks!
django,3036eg,cactuslunch,3,Tue Mar 24 02:21:34 2015 UTC,"I think the hard thing for me is that I don't really understand what these do just by reading the README files. Since you're a graphic designer, throwing together a couple of quick screenshots or animated gifs as a ""demo"" would really help clear this up."
django,3036eg,rnevius,2,Tue Mar 24 07:17:43 2015 UTC,"Hi rnevius. I added screenshots to the README, and put a demo site up. Login with admin/admin."
django,3018oj,dsizemore,3,Mon Mar 23 17:44:49 2015 UTC,"Unless you're scraping Asynchronously it's not a matter of BeautifulSoup scraping the data too fast.  Beautiful soup can be passed a number of different objects to do it's thing, you can pass it raw html or an open file object.  Chances are you're passing it the raw html from some http library (like requests).  What you need to verify is whether or not the http library that you're using to get the raw html is actually returning data.  Some websites will actively block headers from known scrapers so I imagine that's what you're seeing, but it's simple enough to debug ... read the html response into a variable then log out that output as well as the status code and make sure you're getting a valid response.  Chances are the request is just being blocked."
django,3018oj,Thingdeux,1 point,Mon Mar 23 17:54:07 2015 UTC,"Chances are you're passing it the raw html from some http library (like requests).   Yes, I'm using urllib2   What you need to verify is whether or not the http library that you're using to get the raw html is actually returning data. Some websites will actively block headers from known scrapers so I imagine that's what you're seeing, but it's simple enough to debug   Yeah, I thought this could also be the case. Urllib2 is returning data as it's only a few sites that beautifulsoup seems to not be able to get data from.   Chances are the request is just being blocked.   Ok thanks."
django,3018oj,Brandhor,1 point,Wed Mar 25 00:10:26 2015 UTC,"if the content is generated in js you can try casperjs/phantomjs, although I never used it with python/django only standalone but it's pretty much a programmable headless webkit client"
django,30029z,psykopotatis,2,Mon Mar 23 11:25:01 2015 UTC,looks like im getting married!
django,30029z,xinaked,2,Tue Mar 24 00:30:47 2015 UTC,http://i.imgur.com/jKdhk7n.png  Good choice! XD
django,30029z,oscarcp,1 point,Mon Mar 23 12:14:33 2015 UTC,Lunch decision sorted! http://decisionhelpr.com/114/what-should-i-have-for-lunch
django,30029z,alien_protein,1 point,Tue Mar 24 11:17:16 2015 UTC,"nice, perhaps you can share the code?"
django,30029z,tbarbugli,1 point,Tue Mar 24 19:39:11 2015 UTC,Thanks. Maybe i can put it someplace. I'll check!
django,30029z,sheshtawy,1 point,Thu Mar 26 11:11:09 2015 UTC,That's nice! But what is the decision is built on ?
django,2zzgp9,little_oaf,3,Mon Mar 23 05:44:35 2015 UTC,"When you use .get you shouldn't use square brackets [], rather parentheses (). Change both of the .get lines to:  username_input = request.POST.get('username') password_input = request.POST.get('password')   .get() is a method which requires you to pass a keyword as an argument. Read about it in the official docs."
django,2zzgp9,rnevius,1 point,Mon Mar 23 07:47:35 2015 UTC,Here's where my confusion came from. (The login() section)  So request.POST['key'] is the python deprecated form of request.POST.get('key') ? I'm not sure why one would get used over another.
django,2zzgp9,rnevius,1 point,Mon Mar 23 17:14:04 2015 UTC,"No, it's not deprecated. Basically, .get() tries to get the value of a POSTed variable. If it doesn't exist, no error is thrown. If you simply use request.POST['key'] directly, and there's a problem with the key (for example, it doesn't exist), it'll kill your whole program.  So, not deprecated...but .get() is definitely preferred."
django,2zzgp9,rnevius,0,Mon Mar 23 17:26:24 2015 UTC,"I forgot to mention (I was falling asleep when I wrote it) that I did try that already. That's what prompted me to make the post. I get the same error.   Edit: thank you for linking the python doc, I was looking at Django documentation before so I'll take a look to try to understand it better."
django,2zzgp9,rnevius,1 point,Mon Mar 23 14:14:01 2015 UTC,That's not possible. You would at least have a different traceback. Post up the actual question if you still need help with the problem.
django,2zzgp9,swolecoder,1 point,Mon Mar 23 14:42:17 2015 UTC,"I'm following the tangowithdjangotutorial, this is the section I am looking at. So after changing back to request.get.POST( ), it resolves to the second inner else returning 'None' for the password  else:     print ""Invalid login details were provided: {0}, {1}"".format(username_input, password_input)     return HttpResponse(""Invalid login details supplied."")   EDIT: I have tried changing the username and password variables that capture input from the form to username_input and password_input to avoid referencing the wrong object/variable."
django,2zyz1m,spaznuski,1 point,Mon Mar 23 02:36:07 2015 UTC,Can you be more specific?  The ReadMe in the repo seems to cover everything pretty well.  Use jquery-pjax on the front-end to handle the requests and then decorate the views that you will be requesting with @pjax_block or set up the config variable DJPJ_PJAX_URLS if you want all URLs of a certain pattern to work.
django,2zyz1m,electric_creamsicle,1 point,Mon Mar 23 02:49:42 2015 UTC,"Maybe its just me...but I'm not seeing much advantage of using this package over plain pjax. In most cases, you should be fine using pjax by itself..."
django,2zwbzw,tuyguntn,2,Sun Mar 22 12:19:40 2015 UTC,Have you looked into InlineFormSets?
django,2zwbzw,Airith,1 point,Sun Mar 22 20:48:23 2015 UTC,"You may have to customize your form and do some AJAX calls if you want to have the complete CRUD when you all {{form}}. As far as I know (someone please correct me if I'm wrong), but Django doesn't have CRUD capabilities right out of the box."
django,2zwbzw,yuga_d,1 point,Sun Mar 22 22:42:24 2015 UTC,"I've used UpdateWithInlinesView in the past with https://github.com/elo80ka/django-dynamic-formset  but recently I found out about django viewset, and it can do the same thing but it's much easier to use"
django,2zwbzw,Brandhor,1 point,Mon Mar 23 09:49:17 2015 UTC,"You can take a look into admin itself. or even reuse it js/css files  Basically {{ form }} renders <select multiple> as usual, but additional functionality implemented with javascript:  https://github.com/django/django/blob/master/django/contrib/admin/static/admin/js/SelectFilter2.js"
django,2zwbzw,kmmbvnr,1 point,Tue Mar 24 05:17:17 2015 UTC,"not sure if this will exactly match your use case, but I'd like to suggest an alternative to copying the admin inline UI. I've had a lot of success in the past using this widget for multiple selects. it works pretty well with a ModelMultipleChoiceField on the backend of the form.  http://harvesthq.github.io/chosen/"
django,2zvz8x,Mekhami,2,Sun Mar 22 08:10:37 2015 UTC,"never use except:  ever.  if you have a try: except: block, specify the error you are expecting to catch. If you're expecting an error, do one better and create you own error class and catch it that way.   naked except's are the most common, and most destructive, python anti-patterns."
django,2zvz8x,Mekhami,1 point,Thu Mar 26 18:42:35 2015 UTC,What's so bad about them?
django,2zvz8x,Thirster42,2,Thu Mar 26 19:30:59 2015 UTC,"It catches and hides every error that you might otherwise receive at runtime. Think of it like a fishing net. If you fish with a solid net, you catch everything, including the water. If your net has holes, you catch only the things you want. naked except: is a solid net.  to clarify, instead of: try:     stuff except: stuff  you should do- try:     stuff except IndexError:     stuff  specifying the error like that."
django,2zvz8x,Whoopska,1 point,Thu Mar 26 19:48:47 2015 UTC,"the first think i see is that you have ""itm.subscribers"" instead of ""item.subscribers""    what is ""name_config"" returning?  the queryset?  i would try removing the try - except for now and see if the code in there works with correct data.  also, you're not doing anything if the form data is invalid."
django,2zvz8x,Whoopska,1 point,Sun Mar 22 09:01:30 2015 UTC,"nothing save to db, even if I give it a string like name='test'. But it will show up as expected in the template if I manually insert the data in Sqliteman"
django,2zvz8x,Whoopska,1 point,Sun Mar 22 17:16:05 2015 UTC,I'll second the comments here already (modelform and itm) and add that except: has no place here. Something like this (assuming you're not using django1.8 with jinja2) would have caught the undefined variable for you.
django,2zvz8x,rnevius,1 point,Sun Mar 22 14:21:38 2015 UTC,"I've confirmed that nothing is getting saved to the database. If I manually insert data into the db, it displays as expected. I was using a modelform but i had the same problem so i switched to this method to see if the problem cleared up"
django,2zvz8x,boshlol,1 point,Sun Mar 22 16:19:36 2015 UTC,Are you running with runserver? Time to break out the ipdb.set_trace() and step through the view (but please for the love of Guido Van Rossum don't make multiple requests at once to this endpoint)
django,2ztjhv,chillaranand,3,Sat Mar 21 17:07:45 2015 UTC,quietly fixes a bunch of code
django,2ztjhv,Whoopska,1 point,Sat Mar 21 21:33:37 2015 UTC,:)
django,2zt7mw,WinningSimba10,3,Sat Mar 21 15:18:33 2015 UTC,"have you worked through the django tutorial, yet? I think it has a lot of analogous tasks to what you are trying to do and you might have a better idea of where to start on your personal project after doing the tutorial."
django,2zt7mw,metaphorm,2,Sat Mar 21 16:34:01 2015 UTC,"So, I'm assuming you have some background in HTML. What you will have to do is a few steps after you get django running. Look at the Getting Started with Django tutorial for more in-depth stuff. Top of the head tutorial follows.  First, you'll want to create a new 'app' within your site. Create a coach model class in appname/models.py, which you populate with variables of Field types (CharField and ImageField). You go into appname/admin.py and call the register function to make it show up in the admin pages. Next you want to make a page and view for what's actually displayed, this goes in appname/views.py and site_tmpl/foo.html, and is discussed in depth in the tutorial. Add a line in sitename/urls.py to show this page for a certain URL. Lastly, call ""manage.py migrate"" (or syncdb if using an earlier version) and then run your server.   Yes, it seems like a lot of steps, but this makes it easy to maintain as you know exactly where what code goes once you get some experience."
django,2zt7mw,lovestruckluna,1 point,Sat Mar 21 16:30:32 2015 UTC,"Sorry I don't have time to type out a much more detailed post but I recently did just about exactly as you described.   You will want to look into Media serving (and static files as well) if you haven't already. This will allow you to store the file on the server not in the DB (Bad idea).   You also will want to look at Pillow for re-sizing images uploaded through the admin panel (if you choose to go this route, I'd highly suggest it).  You will also want to look into templates. This will allow you to create a simple loop for each coach in the database and display it.  Here is an example I used for events to give you an idea (Template HTML).   <h1>CURRENT EVENTS </h1> {% for event in events %} <h2>{{event.title}}</h2> <div id=""event_img""> <img src=""media/{{event.image_display}}""> </div> <div id=""event_info""> <p>Location: {{event.location}}</p> <p>Event Date: {{event.event_date}}</p> <p>{{event.long_description}}</p> {% if event.start_time != null %} <p>Start: {{event.start_time}} -  End: {{event.end_time}}</p> {% endif %} </div>   Here is the model I used for events  class event(models.Model): title = models.CharField(max_length = 50) short_description = models.TextField(max_length = 500) location = models.CharField(blank = True, max_length = 500, default =""None"") long_description = models.TextField(max_length = 5000) start_time = models.TimeField(null = True,blank = True) end_time = models.TimeField(null = True,blank = True) event_date = models.DateField(null = True,blank = True) end_date = models.DateField(null = True,blank =  True) another_date = models.DateField(null = True, blank = True) image_display = models.ImageField(upload_to='Images/events_images', blank = True, default = ""Images/events_images/No_image_available.png"")    Finally here is the view render:  def events(request): today = datetime.date.today() #Filter for events that are happening either today or in the future (avoid past events) events_cur = event.objects.filter(Q(event_date__gte = today)) return render(request,'events.html',{'events': events_cur})   Hopefully this will give you an idea of where to look at. You can modify the above to tailor it to your stuff but is relatively close. Feel free to ask questions and I will do my best to help.  (obviously there are tab issues because formatting)"
django,2zt7mw,xNTRx,1 point,Sat Mar 21 21:13:06 2015 UTC,"I totally just saw this, got kinda busy with work and whatnot. But soon things should be calming down and I will definitly give what you have a look over, at first glance it looks very helpful for what I am doing.  I'll let you know how it goes. Thank you very much!"
django,2zt7mw,xNTRx,1 point,Sat May 9 18:47:03 2015 UTC,"No problem, if you have questions about it I will do my best to answer them feel free to message me."
django,2zuefp,ajhavery,2,Sat Mar 21 21:39:22 2015 UTC,there are open source versions of this out there have you looked at these yet?
django,2zuefp,sfall,1 point,Sat Mar 21 22:06:48 2015 UTC,Could you please point me to a few??
django,2zuefp,xc0m,1 point,Sun Mar 22 08:59:23 2015 UTC,https://www.djangopackages.com/grids/g/ticketing/
django,2zuefp,sfall,1 point,Sun Mar 22 09:37:01 2015 UTC,https://github.com/rossp/django-helpdesk
django,2zpu5y,blckdt,1 point,Fri Mar 20 17:03:14 2015 UTC,"Great post. If I could of read this a couple of months ago it would of saved me a lot of time.   Just a heads up, in the celery docs it says to not to use the -B flag when using a worker in a production environment. (However I have actually done this in production).  Link to docs   You can also start embed beat inside the worker by enabling workers -B option, this is convenient if you will never run more than one worker node, but it’s not commonly used and for that reason is not recommended for production use"
django,2zpu5y,technicallyimhomless,1 point,Sat Mar 21 04:09:16 2015 UTC,"Thank you! =).  Yes, it's true. But as I say in the end of the post, the execution of the celery is for testing purposes and I clarify in ""Next steps"" that it should be running as a daemon (linking to the docs on how to daemonize celerybeat and celeryd). I may rewrite that part to clarify, I'm new writing posts so any comments are welcome =)."
django,2zrbq1,coolstorybro80,5,Sat Mar 21 00:16:05 2015 UTC,"Think of it like this: there are many posts in a category, and there can be many categories to a post. Thus, it's a manytomany relationship."
django,2zp8tr,deltadada,3,Fri Mar 20 14:13:11 2015 UTC,"I'm a big critic of the Forms API, but the truth is that there is not framework out there that's going to encapsulate the entire universe of form functionality under the specs that you want.  Most form logic in frameworks deals with the tedium related to parsing form data into a single model or a single model with simple relations.   Dynamically changing form fields is, in general, a bad idea, and retrofitting old frameworks to this is always going to take some work.  However, the Forms API has a lot of underlying tools that can help. You can overload the form saving logic, you can use the Form Wizard to make multi-page forms, you can use ModelForms for forms that correspond directly to models, and you have ModelFormsets to deal with multiple inline forms.  The documentation for all these things is not as accesible as other parts of the framework, so looking at examples on Github is very useful, as well as diving directly on the framework code, which isn't really that complicated either."
django,2zp8tr,Daishiman,1 point,Fri Mar 20 14:23:14 2015 UTC,I'm really confused about trying to put multiple related models in what django calls a form.  I will look into ModelFormsets again and suss out the Django code iteslf.  It seems like I'd be better off creating a plain old view and seeing what Django can do with the response.
django,2zp8tr,Daishiman,2,Fri Mar 20 14:47:25 2015 UTC,You might want to look into this.
django,2zp8tr,frankwiles,2,Fri Mar 20 14:59:38 2015 UTC,"You don't put multiple models in a ModelForm, you pass multiple forms to the template. And then validate each, is that maybe what is confusing you?"
django,2zp8tr,colly_wolly,1 point,Fri Mar 20 15:05:10 2015 UTC,"Show us what your models look like, it will probably give us an idea of what to suggest."
django,2zp8tr,yuga_d,1 point,Fri Mar 20 17:47:58 2015 UTC,"class contacts(models.Model):   contact_id = models.AutoField(primary_key=True, blank=False, null=False)   first_name = models.CharField(max_length=500, blank=True, null=True)   last_name = models.CharField(max_length=500, blank=True, null=True)   ... more junk   contact_type_lookup = models.ForeignKey('contact_type_lookup', to_field=""contact_type_id"", db_column=""contact_type"", blank=True, null=True)   role_tags = models.CharField(max_length=1000, blank=True, null=True)  class contact_role_tags_lookup(models.Model):   contact_role_tag_id = models.AutoField(primary_key=True, blank=False, null=False)   contact_role_tag_name = models.CharField(max_length=250, blank=False, null=False)  class contact_type_lookup(models.Model):   contact_type_id = models.AutoField(primary_key=True, blank=False, null=False)   contact_type = models.CharField(max_length=500, blank=False, null=False)  def str(self):     return u'%s' % self.contact_type  ... maps org (contact_type 2) with POC (contact_type 1) class org_contact(models.Model):   org_contact_id = models.AutoField(primary_key=True, blank=False, null=False)   person_id = models.ForeignKey('contacts', related_name = 'person_id', blank=False, null=False) # related name because two fields linked to same table   org_id = models.ForeignKey('contacts', related_name= 'org_id', blank=False, null=False) # related name because two fields linked to same table  class notes(models.Model):   note_id = models.AutoField(primary_key=True, blank=False, null=False)   type_id = models.ForeignKey('note_type_lookup', blank=False, null=False)   note_date = models.DateTimeField('date published')   user_id = models.ForeignKey('contacts', blank=False, null=False)   note = models.TextField(blank=False, null=False)   subject = models.CharField(max_length = 255, blank=True, null=True )  ...maps note to contact class note_type_lookup(models.Model):   note_type_id = models.AutoField(primary_key=True, blank=False, null=False)   note_type = models.CharField(max_length=250, blank=False, null=False)"
django,2zp8tr,honestbleeps,1 point,Fri Mar 20 18:08:36 2015 UTC,wow that's ugly  basically contacts have a contact_type going to a contact_type_lookup and also have notes going to a note_type_lookup connecting to notes to contacts org_contact connects org contacts to person contacts that's how it was designed in the db
django,2zp8tr,colly_wolly,1 point,Fri Mar 20 18:17:08 2015 UTC,Do you have a link to how to create multi-page forms? I have a couple use cases for that and didn't know that existed.
django,2zp8tr,Daishiman,1 point,Fri Mar 20 15:36:26 2015 UTC,"I'm a django newbie and I'm hearing ""avoid forms"" a fair amount now.  Question though: how would I override a form that's being used by an external app I'm using?  I'm not married to sticking with the form API - but I'm trying to learn the django basics and I have not yet figured this one out.   I've figured out how to override templates from external apps, I've figured out how to extend a model from an external app (but the app does have a config setting to tell it to use my new model, so I'm not ""overriding"") - but I have not figured out how to make the app's form see my new fields, because its form class has a list of fields hard coded in the Meta.  What's the cleanest/most correct course of action here?  Any input would be much appreciated."
django,2zp8tr,honestbleeps,1 point,Fri Mar 20 17:01:53 2015 UTC,"They are  a bit complicated to lean, but worth it in the long run. Especially if you have a lot of data to validate."
django,2zp8tr,spookylukey,1 point,Fri Mar 20 17:46:40 2015 UTC,"I haven't used that use case, but it's something that should be a Google search away if it's reasonably possible."
django,2zp8tr,rnevius,1 point,Fri Mar 20 19:11:33 2015 UTC,"yeah, my google-fu failed me or I wouldn't have asked... there's a lot of similar things, but nothing to guide me sufficiently toward exactly what I need... thanks anyway, though! :-)"
django,2zp8tr,rnevius,3,Fri Mar 20 19:25:47 2015 UTC,"I think the essential thing here is to only use the Django functionality that is going to be a close fit. That means you don't have to use a ModelForm, and you don't have to use a Form at all - you can just handle request.POST directly.  So, for this case, I wouldn't have the initial radio button be driven by a Django form field - this field is entirely client side in nature, it just selects between two forms (which I assume you would have on the page, but make invisible to start with).  You could then use a PersonForm and OrganizationForm as a shortcut for the simple pieces of data. These probably shouldn't be ModelForms.  For the extra things which are not handled well, just use manually created HTML and handle request.POST data yourself."
django,2zp8tr,colly_wolly,1 point,Fri Mar 20 14:47:52 2015 UTC,"Okay, so the Org/Person selector is not a form input, but just shows PersonForm or OrganizationForm, which are two distinct Django forms, or formsets, as the case might be.  Makes sense."
django,2zp8tr,colly_wolly,1 point,Fri Mar 20 15:20:06 2015 UTC,"Django provides a lot of useful tools...but there's nothing preventing you from writing plain HTML forms, and using Django's form validation to validate it all...You don't need to try to hack multiple ModelForms together, and definitely don't need to ""undo"" any Django."
django,2zo6go,bashhike,7,Fri Mar 20 05:28:48 2015 UTC,"A couple years ago, I saw a demo where someone got the Django admin to populate using the Twitter API (no database). I think this is the project: https://bitbucket.org/david/django-roa/wiki/Home but it was so long ago I don't remember."
django,2zo6go,crccheck,4,Fri Mar 20 14:43:43 2015 UTC,Do you have to use the existing Admin? It would be much easier to implement your own admin dashboard that does this stuff...
django,2zo6go,rnevius,1 point,Fri Mar 20 05:58:17 2015 UTC,Yes I would like to use the existing Admin because it's so easy to get it running. I needed an admin portal for my application which only interfaces through an API. I thought of using Django Admin. However I cannot write directly to the application's database. I can only send it XML messages.
django,2zo6go,rnevius,5,Fri Mar 20 06:54:04 2015 UTC,It's only easy to get the Admin running when you use its default functionality. While you could do what you're asking using the standard admin interface...it would be easier and faster to roll your own solution.
django,2zo6go,steeeveb,4,Fri Mar 20 07:28:25 2015 UTC,with django 1.8 you will be able to do use the new Options API like in this example: https://github.com/PirosB3/django-mailer/blob/master/mailchecker/options.py
django,2zo6go,zagrebelin,3,Fri Mar 20 11:06:43 2015 UTC,May be write your own database backend?
django,2zo6go,Brandhor,0,Fri Mar 20 07:47:19 2015 UTC,There's already a backend present. The application's backend.
django,2zo6go,lovestruckluna,5,Fri Mar 20 08:53:15 2015 UTC,"you either create a custom db backend or you override the models or forms save method, for the latter you'll still have the data saved on your db"
django,2zo6go,zagrebelin,3,Fri Mar 20 09:12:24 2015 UTC,"By 'Backend' we mean 'database wrapper'. If you can only access your database by way of api calls, write your own that passes database queries through it and plug it in. If your api is not flexible enough for that and you can't directly access the database, using the django admin isn't a good idea. It's not that hard to write your own ui, an you can even base it off the django admin."
django,2zo6go,colly_wolly,6,Fri Mar 20 17:09:01 2015 UTC,"So what's the problem? Specify your backend in ModelAdmin (https://docs.djangoproject.com/en/1.7/topics/db/multi-db/#exposing-multiple-databases-in-django-s-admin-interface), and go on."
django,2zo6go,coleifer,2,Fri Mar 20 09:17:42 2015 UTC,I wanted something similar a while back and this came up. (I ended up just doing something with django-rest-framework syncing to my normal tables.)  https://github.com/charles-vdulac/django-roa
django,2zo6go,andrey_shipilov,2,Fri Mar 20 17:58:34 2015 UTC,"As Jacobkm or ubernostrum is fond of saying, the admin is not your app. You're going to be fighting it the whole way."
django,2zo6j3,twigboy,2,Fri Mar 20 05:29:42 2015 UTC,https://docs.djangoproject.com/en/1.4/topics/logging/#django.utils.log.CallbackFilter  https://www.google.com/search?q=SuppressUnreadablePost&oq=SuppressUnreadablePost
django,2zo6j3,xinaked,1 point,Fri Mar 20 07:58:37 2015 UTC,"Thank you sir, I'll give it a try on the weekend!"
django,2zkm31,jairtrejo,4,Thu Mar 19 10:42:12 2015 UTC,I personally approach the door
django,2zkm31,jangojangojip,1 point,Thu Mar 19 12:12:44 2015 UTC,To me class based views aren't that hard to understand or code with. If you find them to be unwieldy you can try this out http://django-vanilla-views.org/
django,2zk7re,netscape101,2,Thu Mar 19 06:42:57 2015 UTC,I think posters need to separate web development questions from Django questions.
django,2zk7re,pemboa,3,Thu Mar 19 16:59:53 2015 UTC,Most people posting the questions don't understand the difference.
django,2zk7re,teilo,1 point,Fri Mar 20 01:09:29 2015 UTC,"It's pretty straight forward. Yes, use AJAX if you want to get the values from the server. I use Jquery to start the AJAX request and load the HTML select after the results are returned. I use an old style function (i.e not class based view) in my views to handle the request. The only tricky part is if you are using a ModelForm with a ModelChoiceField. It will raise an error if you return choices that it does not know about. Here is a blog post about that."
django,2zk7re,cwurld,1 point,Thu Mar 19 12:57:40 2015 UTC,"Depends exactly what you mean by dynamic.  Most dropdowns in Django can be dynamic.  If you use a modelchoice field you should supply a queryset, and you can manipulate that as you see fit. If you use a normal choice field you can programatically tell it what choices to be populated with.  Or do you need something that changes on a user interaction (instead of on the page load). You will need to play with Javascript for that."
django,2zi42w,rnevius,1 point,Wed Mar 18 19:40:45 2015 UTC,"Wagtail dashboard is heavily customised (it's completely separate from django admin),  so I think it's quite difficult."
django,2zi42w,chhantyal,1 point,Thu Mar 19 23:15:10 2015 UTC,"Is that from experience? Or are you guessing? I understand it looks and behaves differently, but the Wagtail dashboard can also be modified."
django,2zi42w,chhantyal,1 point,Fri Mar 20 04:24:54 2015 UTC,"I too wanted to use it instead of django admin, but found it to be different thing. May be things have changed now? I tried to use it half a year ago."
django,2zh840,sriramracer,7,Wed Mar 18 15:54:26 2015 UTC,Also worth checking out Django-oscar. It is well maintained and has good documentation.
django,2zh840,banjochicken,4,Wed Mar 18 21:01:05 2015 UTC,I've used django-shop for a small online shop. It was good experience.
django,2zh840,brotheronweb,4,Wed Mar 18 16:48:38 2015 UTC,Well...what are your needs? Kind of a broad question.
django,2zh840,rnevius,1 point,Wed Mar 18 17:41:19 2015 UTC,"Just want to piggyback on the question:  Under what circumstances would a Django CMS be superior to rolling your own?   Edit: To clarify, I am curious about what would drive the decision to use an ecommerce package over another? Are most of these well maintained? Let's say I choose poorly and next year my ecommerce package is abandoned, how difficult would it be to port your system over to something else?"
django,2zh840,little_oaf,1 point,Wed Mar 18 22:28:33 2015 UTC,Big driver is access to payment system APIs and a cart object as far as I understand the problem.
django,2zh840,sphere_is_so_cool,2,Thu Mar 19 06:10:41 2015 UTC,Cartridge was easy to get running. Built on top of Mezzanine CMS so if you're used to managing CMS content it will be familiar.
django,2zh840,flagrantaroma,1 point,Wed Mar 18 21:51:23 2015 UTC,"I've been wanting to get started with mezzanine, any good resources or tutorials you can recommend?"
django,2zh840,yuga_d,1 point,Thu Mar 19 02:04:10 2015 UTC,"Sorry, I didn't find a lot to go on besides the docs on their site."
django,2zh840,flagrantaroma,2,Thu Mar 19 10:30:29 2015 UTC,Have a look at Satchless. It is pretty easy and the documentation is well maintained.
django,2zh840,seventh_deathstroke,2,Thu Mar 19 05:39:15 2015 UTC,Interesting...I found the documentation to be pretty terrible compared to just reading the source. Maybe its just the verbiage that was odd to wrap my mind around.
django,2zh840,rnevius,1 point,Thu Mar 19 05:51:48 2015 UTC,"Probably.. but the examples provided in the documentation helped me understand what was going on. Once you get the hang of it, it is actually pretty convenient to use. At least that's what I felt."
django,2zh840,seventh_deathstroke,1 point,Thu Mar 19 08:47:59 2015 UTC,"This is a difficult question to answer. If you just need a traditional cart, lots of these are fine.  But if you have very specific needs, or need to tweak your order process to follow a certain logic, then you will want to look at django-shop. It's not a working cart, but it gives you all the pieces you need to make one, without tying you down to the design decisions of a more complete package. You need to implement your own product models and checkout process, but that's a feature, not a bug. It gives you all the stuff that's a pain in the ass to code - like payment integrations."
django,2zh840,teilo,1 point,Wed Mar 18 17:58:15 2015 UTC,"I am still evaluating ecommerce packages. I've put a few days in to  Django Oscar, and so far it is surpassing my expectations. There's even active development for Django Rest Framework integration, if you'll be needing a RESTful API."
django,2zh840,ezrock,0,Thu Mar 19 00:49:57 2015 UTC,"We are using a fork of django-shop. The main repository has maintenance ""issues"" and seems stucked."
django,2zh840,philippeowagner,1 point,Wed Mar 18 23:41:56 2015 UTC,Does django-shop require django-cms?
django,2zh840,rnevius,0,Thu Mar 19 06:12:22 2015 UTC,no
django,2zh840,ojii,0,Thu Mar 19 08:32:21 2015 UTC,"That's what I get for not RTFD.   Even though you can run django SHOP as a standalone app, we highly recommend to use it as an extension of django CMS.    Question answered. Thanks."
django,2zi481,rev91,3,Wed Mar 18 19:41:45 2015 UTC,"Skagway offers a web sockets solution: that's when the web client and the server maintain a constant connection along which the server can push data to the client spontaneously; a javascript event listener on the client can receive the data and represent present it on the user's screen.  Another solution is AJAX polling: every five to thirty seconds or so, javascript on the webclient asks the server for any new posts. The server responds with data representations of any new posts, and javascript presents those on the user's page. To accomplish this, you have to have a page which is capable of serving up new ""posts"" in data form.  The entire architecture is too much for me to go into now, but if you search for either Django AJAX polling or Django websockets, you'll probably find a few paths."
django,2zi481,R3dPillAndFeminist,2,Thu Mar 19 04:31:40 2015 UTC,"I like swamp dragon when working with real time data and Django. It requires tornado and Redis, so it may not exactly agree with your stack."
django,2zi481,Skagway,1 point,Wed Mar 18 20:01:45 2015 UTC,I looked in socketIO but that also needs node running(I think). I found nginX pushstream module but not really sure how to use it with django. :)
django,2zi481,rackmountrambo,1 point,Wed Mar 18 20:52:20 2015 UTC,Sounds interesting but comet seems to work well too.
django,2zi481,riklaunim,1 point,Wed Mar 18 23:44:27 2015 UTC,Comet is old technology while websockets are the new and preferred.
django,2zi481,rackmountrambo,1 point,Thu Mar 19 06:49:13 2015 UTC,I've had a pretty shitty experience with gevent and have since gone back to a comet server.
django,2zi481,granduh,1 point,Thu Mar 19 12:32:32 2015 UTC,"Hey /u/Skagway, if you don't mind me picking your brain a little over PM or email? I'm curious about swamp dragon from someone who has been using it."
django,2zi481,saturdayplace,1 point,Thu Mar 19 19:29:26 2015 UTC,"I think Facebook's implementation is optimistic, in that the post is added to the page instantly, and in the background the data is sent to the server. Then, if the server-call fails, an error message is displayed to the user.  To pull something like this off, essentially you'll write JavaScript that  gets a user's comment and adds it to the page, and fires off an Ajax request in the background that sends the comment to the server."
django,2zi481,granduh,2,Wed Mar 18 20:32:09 2015 UTC,I could do that but I am looking for 2 different users as in have user A comment on user B's post and USER B sees it instantly on his page for approval :)
django,2ziul4,yuga_d,3,Wed Mar 18 22:55:03 2015 UTC,I think this is probably the fix:  from django.utils import timezone now = timezone.now()
django,2ziul4,Whoopska,1 point,Wed Mar 18 23:46:06 2015 UTC,"Yeah, that looks like it took care of it. Thanks"
django,2ziul4,jz9,1 point,Thu Mar 19 01:40:07 2015 UTC,"Ok, my app is just for one timezone so far...so I set USE_TZ =False and it worked. Anyone with a more elegant, scalable solution, please comment."
django,2zhpjk,dsizemore,3,Wed Mar 18 17:59:07 2015 UTC,"What have you already tried? Could guardian not be listed in 'installed apps'? (""Is is plugged in?"")"
django,2zhpjk,kangaroomerang,3,Wed Mar 18 18:27:52 2015 UTC,And thanks for the fix.
django,2zgmwt,RamirezTerrix,5,Wed Mar 18 12:48:04 2015 UTC,"You're going to want two tables, ultimately. One table holds your questions. It can be something like: id, question, question type (short answer, multiple choice, whatever else), meta data (the possible multiple choice answers, let's say), userid (fk to user). Maybe sort order.  Then you want what's called an inverted table. A table that has its column stored as part of the row and the value for that column next to it. So the answer table can be something like id, questionid (fk to question), userid(fk to user), answer"
django,2zgmwt,cmsimike,1 point,Wed Mar 18 14:46:43 2015 UTC,"Thanks for the hint, now I have a starting point.  This got me into a really bad mood yesterday"
django,2zgmwt,ElFernandez,2,Thu Mar 19 09:17:03 2015 UTC,"I had a similar thing on another project. Found the quickest way to do it was to manually render the HTML for the form, and then have if statements which checks for the users permission before showing them the fields. Then in the form class you need to override the clean method and check that the form was filled out correctly - i.e make sure all the fields required based on the user and their permissions are filled out properly and throw a validation error if not.  I'm sure there is a cleaner, less manual way to do it. I just did it like that for the sake of a few forms."
django,2zgmwt,thelindsay,1 point,Wed Mar 18 14:47:30 2015 UTC,I think I will do the manual rendering of the HTML via if-Statements this sounds good.
django,2ze50d,dambles,3,Tue Mar 17 20:47:49 2015 UTC,I was looking at this article just last night. I also would like an answer to this question.
django,2ze50d,01hair,1 point,Wed Mar 18 02:26:13 2015 UTC,"Hi there, there are several thrid party projects that deal with this. For example:   https://github.com/rasca/django-enhanced-cbv (I'm the author) https://github.com/AndrewIngram/django-extra-views   These provide new GCBV that can deal with more than just inline fomrsets in an easy way"
django,2ze50d,rasca,2,Wed Mar 18 13:55:44 2015 UTC,I was hopping to get an answer that didn't involve adding another dependency. Adding you package might solve the issue but then I haven't learned anything. I am by no means a django expert and I am trying to better understand CBVs.
django,2ze50d,colly_wolly,1 point,Wed Mar 18 21:32:02 2015 UTC,"I use django-extra-views. They all work in a similar way to the class based views, and will enhance your understating rather than distract from it. Django-rest-framework uses similar conventions as well, so you end up using them in similar ways. One produces a form one produces a REST response."
django,2zbyzy,spookylukey,4,Tue Mar 17 08:52:08 2015 UTC,"Any method declared on your view is passed to template, so actually you can do something like  ## views.py  class IndexView(TemplateView):     def total_users(self):         return User.objects.count()  ## index.html  Registered users: {{ view.total_users }}"
django,2zbyzy,xdvl,1 point,Tue Mar 17 19:29:53 2015 UTC,"I kind of dislike this myself, as it binds the template too strongly to the view.   For instance, if you wanted to re-use the template or part of the template from a different view (which I very often do), or re-implement the view using a function rather than a class, you would have to either change the template or implement your view in an unnatural way. This is a sign that the template is too tightly coupled to the view implementation in my opinion."
django,2zbyzy,rthinker,3,Thu Mar 19 09:56:48 2015 UTC,"CBV are probably the worst part of Django. After having used them for quite some time I've come to using them only in simple situations when little to none customization is required (e.g., TemplateView is great for views with little dynamic content)."
django,2zbyzy,rnevius,2,Tue Mar 17 22:14:51 2015 UTC,"Thanks for sharing! Great post...  If there's anything I wish GCBV made easier, it's adding things to the context. Like you, I can't stand that I need to super just to add something."
django,2zbyzy,xdvl,5,Tue Mar 17 09:35:34 2015 UTC,Django Vanilla Views tries to solve this
django,2zbyzy,rnevius,1 point,Tue Mar 17 19:32:46 2015 UTC,"I've heard of DVV, but hadn't ever looked into it. After skimming the into page, it sounds neat. Thanks for the link!"
django,2zbyzy,teilo,1 point,Tue Mar 17 19:35:08 2015 UTC,"I have never understood how GCBV is useful as complicated as they have made it.  Once CBVs were introduced, I created my own class hierarchy for those cases where CBVs actually make sense (meaning, when they improved readability and DRY), and continued so use functions everywhere else.  I have yet to work on a project where using even the old generic views made sense. There was always some behavior I needed beyond the generics. Writing views is not that hard."
django,2zf7wz,android2222,2,Wed Mar 18 01:55:33 2015 UTC,"This is probably a question for /r/docker. When you post there, you should explain what you mean by ""the app doesn't run"".  Also, no Docker is not necessary. I prefer Vagrant."
django,2zclko,copybin,3,Tue Mar 17 13:48:12 2015 UTC,I was recently looking into doing something very similar recently but backed by Redis. I was bummed to find out gevent-socketio is no longer actively maintained by the author and does no support the API changes made in socket.io 1.0. It sucks even more as it looks like it is a well designed API with decent documentation.
django,2zclko,ItsAPuppeh,1 point,Tue Mar 17 19:30:33 2015 UTC,"I wrote this a while ago, doing real-time notifications. It's using Redis pubsub (it's using SwampDragon which is using Redis pubsub):  http://wildfish.com/blog/2014/12/09/swampdragon-real-time-django-notifications/"
django,2zdb6e,cryptografreak,2,Tue Mar 17 17:12:10 2015 UTC,https://github.com/bitmazk/django-booking
django,2zbuxb,TheBigBlabberMouth,2,Tue Mar 17 07:41:05 2015 UTC,what are a and b?
django,2zbuxb,acaban,1 point,Tue Mar 17 08:53:29 2015 UTC,anything really.. I just need to attach a 0 or a 1 to either and check with js what the data contains
django,2zbuxb,acaban,2,Tue Mar 17 09:33:29 2015 UTC,"is the data cannot come from 2 separated endpoints, so distinguish it by that, you need to do something like   HttpResponse(json.dumps({             'type':'a',             'content': content,}), content_type='application/json')  and in the js  $.get(endpoint).success(function(resp){      if (resp.type == ""a"") break;  });"
django,2zbuxb,Pilferer,2,Tue Mar 17 09:41:34 2015 UTC,awesome thank very very much
django,2zbuxb,acaban,1 point,Tue Mar 17 09:49:37 2015 UTC,JsonResponse({...}) Would work well here.
django,2zbuxb,will_code_for_tea,1 point,Tue Mar 17 10:57:10 2015 UTC,"JsonResponse   yes, if you are on >=1.7 you could use that."
django,2z8jme,thoas,1 point,Mon Mar 16 14:55:30 2015 UTC,This might actually be interesting.
django,2z8jme,pemboa,1 point,Mon Mar 16 15:49:15 2015 UTC,How are timelines stored in Redis?
django,2z8jme,tbarbugli,1 point,Tue Mar 17 18:09:34 2015 UTC,"Same representation as follows, zrange (date, uid) and the uid points to an hash to link with an existing django database object"
django,2z9sdx,plopinthehole,3,Mon Mar 16 20:27:15 2015 UTC,Mine is a poor lost soul who was traumatized by abandonment and torn between cultures. I'm slowly weaning it off its feral PHP ways. Someday it will be fully capable of living in modern polite digital company. Unfortunately it has to do this while getting tens of thousands of hits daily...
django,2z9sdx,dorsal_morsel,1 point,Mon Mar 16 22:28:22 2015 UTC,A good problem to have :)   Mine takes a fair bit of time despite getting hardly any hits but I love it.
django,2z9sdx,elktea,2,Tue Mar 17 09:32:31 2015 UTC,I just ignore any problems with it and hit the gym
django,2za0jd,mrinos,2,Mon Mar 16 21:27:20 2015 UTC,I think your clean method should actually be called cleanPassword2.  A method called clean relates to the entire form and your not displaying {{form.errors}} anywhere. You're just displaying the field errors.  Renaming that method should make it a display a field error next to password2.
django,2za0jd,mleonard87,2,Mon Mar 16 22:57:22 2015 UTC,wow thanks. I'm surprised the fix was that simple. I cant even tell you how many hours i spent trying to get this to work
django,2z7kew,maximinus-thrax,2,Mon Mar 16 07:02:05 2015 UTC,"Change r = self.client.get('/my/url') to r = c.get('/my/url')  You are creating a client instance and logging in, but you are not using this client to make the request."
django,2z7kew,hagsteel,1 point,Mon Mar 16 07:23:27 2015 UTC,A mistake in reducing the code a little for the sake of making ir easy to read - now corrected!
django,2z7kew,metaphorm,2,Mon Mar 16 07:25:24 2015 UTC,Related to your second edit. Don't worry about making tests DRY. Test code is one of the places DRY isn't necessary because you want it to be straightforward. What you likely did was override default behavior accidentally.
django,2z7kew,banjochicken,1 point,Mon Mar 16 07:38:28 2015 UTC,Is that user created in a Django TestCase? Also the client is a built-in part of TestCase as self.client. Paste your code into a paste site like gist.github.com or dpaste and add something with more context.  Try something like https://gist.github.com/59bc1e1920229b16073f
django,2z7s4s,plopinthehole,2,Mon Mar 16 09:14:27 2015 UTC,"Check the documentation in the last few versions of Django the way model forms are laid out has been changed.  https://docs.djangoproject.com/en/1.7/topics/forms/modelforms/#overriding-the-default-fields  from django.utils.translation import ugettext_lazy as _  class AdvertisementForm(forms.ModelForm):     class Meta:         model = AdvertisementModel             fields = (                 'ad_question',                 'ad_image1'             )             labels = {                 'ad_question': _('ad_question'),                 'ad_image1': _('ad_image1')             }   That being said the labels will be the name of the field by default"
django,2z7s4s,Eccleshall,1 point,Mon Mar 16 09:49:48 2015 UTC,"This should help.  You're using the Widget directly on the form.  The Widget is an attribute of the Field.  Here's the code from the docs, for the click-impaired:  from django import forms  class CommentForm(forms.Form):      name = forms.CharField()      url = forms.URLField()      comment = forms.CharField(widget=forms.Textarea)"
django,2z8ob2,theh1982,1 point,Mon Mar 16 15:34:17 2015 UTC,"Have you designed the page and have assets/PSD ready to develop? $100 is not a lot of money for something that involves a modal dialog that connects to a 3rd party website, a native form that posts information to a DB (or email), creating the templates, possibly designing the templates also, setting up a new Django app server instance, organizing the domain then testing it and maintaining it. You might need to increase your budget"
django,2z8ob2,tomahony,1 point,Tue Mar 17 13:12:22 2015 UTC,"Yes I actually have the PSD ready, the django server configured and working, the analytics API configured + all the necessary auth ids. Just the template cut up is needed.. I also have a django-cms setup with allauth configured so it shouldnt take more than two hours to do to be honest"
django,2z8ob2,philgyford,1 point,Tue Mar 17 23:12:50 2015 UTC,"Not everyone here is a ""guy""."
django,2z8ob2,philgyford,1 point,Tue Mar 17 13:16:30 2015 UTC,"I find saying ""Hey Guys and Girls"" a bit childish."
django,2z8ob2,philgyford,1 point,Tue Mar 17 23:15:02 2015 UTC,"And it still wouldn't cover everyone. You'd have to say ""Hey Guys, Girls and Women"", which gets a bit cumbersome."
django,2z6z8v,dsizemore,1 point,Mon Mar 16 02:59:48 2015 UTC,"Try:     class Meta:         model = Post         exclude = ('title', 'summary', 'submitter', 'rank_score')         parsley_extras = {             'category': {                 'minlength': '1',                 'error-message': 'Category is required.',             },         }"
django,2z6z8v,primozk,1 point,Mon Mar 16 09:49:01 2015 UTC,"Thanks. that doesn't seem to have worked. Still getting the default error message: ""this field is required.""  Here's my updated code. See anything wrong?:  class Meta:     model = Post     exclude = ('title', 'summary', 'submitter', 'rank_score')     parsley_extras = {         'category': {             'minlength': '1',             'error-message': 'Category is required.',         },     }"
django,2z46xp,oploid,4,Sun Mar 15 11:56:02 2015 UTC,"Hey guys, I have read through the book twice already, and recently started it a third time. Although the book is great, I feel that it is definitely missing a concise reference / appendix that summarizes the core concepts.  I have decided to start making a cheat sheet / reference guide for the Selenium, Python, and Django methods used in the book. I'm hosting it in a public Github repo here: https://github.com/rnevius/tdd-with-python  Feel free to contribute to it by opening up an issue, suggesting an addition, and submitting a pull request."
django,2z46xp,rnevius,2,Sun Mar 15 20:25:02 2015 UTC,This is really cool. I'll be sure to put it in the sidebar when we start TDD.
django,2z46xp,TacosBuenos,1 point,Sun Mar 15 22:04:36 2015 UTC,Thanks!
django,2z46xp,megadeth9999,-1,Wed Apr 1 20:20:24 2015 UTC,"Worst fucking book ever. Makes me want to pull my eyes out. I'm not buying a book to get me through everyday hassle, I'm not buying a book to trigger my PTSD (programmers traumatic stress disorder). I'm buying a book to actually learn something, and well, I did. After skipping 80% of it.   Tldr :don't buy this book, look for another, better one."
django,2z46xp,rnevius,1 point,Mon Mar 23 08:51:53 2015 UTC,Is there a better resource for TDD with Python or Django that you can recommend?
django,2z46xp,TacosBuenos,1 point,Wed Apr 1 20:49:06 2015 UTC,"I havn't looked at other books so I have nothing to go on, but do you have any other recommendations?"
django,2z46xp,megadeth9999,1 point,Sun Apr 5 04:17:30 2015 UTC,"Well, to be honest, looks like I was a bit too harhsh.  I totally don't like how he suggests using fabric today, when we've got Ansible available.   I totally dislike the style of all those first chapters, doing a really shitty project line by line, like a compulsive psycho.   I don't like that ""testing goat"" joke.   BUT, I have to tell you, I did learn some new things from the book. About Sinon.js, some stuff about mocks, some stuff about context menagers in test cases... not crucial things, but pretty useful.   So... this book could be thinner, maybe. Or better written. But still, it can teach you some stuff."
django,2z46xp,TacosBuenos,1 point,Wed Apr 8 10:24:11 2015 UTC,"project line by line   I don't like many tutorials that are line by line. But I do agree, it could definitely be better written."
django,2z46xp,TacosBuenos,1 point,Wed Apr 8 15:21:57 2015 UTC,"So... this book could be thinner, maybe.   After going through it some more, I totally agree."
django,2z4hoa,daredevil82,5,Sun Mar 15 14:21:39 2015 UTC,An example of what you are asking about is right in the docs
django,2z1hh8,SanketDG,7,Sat Mar 14 18:18:43 2015 UTC,"Nice work!  You may also find this library interesting: http://hashids.org/python/  Using the above technique, you wouldn't need to store a short_id as a string in the database - you could simply convert the primary key integer to a string (and vice versa)."
django,2z1hh8,unconscionable,3,Sun Mar 15 02:02:02 2015 UTC,https://github.com/SanketDG/djurl/blob/master/djurl/tests.py  write some tests. how do you even know if it works if you haven't tested it?
django,2z1hh8,metaphorm,2,Sat Mar 14 19:14:52 2015 UTC,"I asked for a ELI5 of tests above and you seem to know about them, in case you want to answer."
django,2z1hh8,hueoncalifa,1 point,Sat Mar 14 22:48:30 2015 UTC,Noted. Thank you.
django,2z1hh8,DoktorRF,2,Sat Mar 14 19:44:10 2015 UTC,"Your secret key is publicly visible in settings.py, which is very bad. Either read the key from an external file and have your VCS ignore it, or set an environment variable and read it from there."
django,2z1hh8,eIix,0,Sun Mar 15 05:09:45 2015 UTC,"Yes, I will keep that in mind. Thank you."
django,2z1hh8,eIix,2,Sun Mar 15 05:23:09 2015 UTC,"Good job, works great! I recommend getting into the habit of writing tests as you develop your applications, this book is a really good resource for that: www.amazon.com/Test-Driven-Development-Python-Harry-Percival/dp/1449364829"
django,2z1hh8,hueoncalifa,1 point,Sat Mar 14 19:05:36 2015 UTC,"Yes, I have been looking forward to do so! I would really right now love something online (video or text), so that I can get started quickly."
django,2z1hh8,Ibuildwebstuff,2,Sat Mar 14 19:45:15 2015 UTC,There you go: http://gettingstartedwithdjango.com/en/lessons/testing-microblog/
django,2z1hh8,SeanMWalker,2,Sat Mar 14 19:52:07 2015 UTC,"Could we get a ELI5 of tests on django and programming in general? I've seen videos, read articles and I can't grasp the basic concept of it."
django,2z1hh8,Ibuildwebstuff,1 point,Sat Mar 14 22:45:32 2015 UTC,You have the potential to create a never-ending loop here: https://github.com/SanketDG/djurl/blob/master/djurl/views.py#L39-L48  You're better off just converting the primary key from base10 to base36.
django,2z1hh8,pydanny,1 point,Sat Mar 14 21:30:38 2015 UTC,I'm curious how that would create the never-ending loop. Can you share with us how that would happen?   Thanks
django,2z1hh8,pydanny,1 point,Sat Mar 14 21:32:21 2015 UTC,"join(random.choice(char) for x in range(length))  what it is produces the string ""aaaaaa"" on each iteration? It's unlikely, but as it is random it has a chance.   But even though it is unlikely, you're still doing at least one database read you don't need to and for each match you do find that's an extra database look-up which shouldn't be required. So as unlikely as entering a never-ending loop might be, it's not as far fetched that you may end up making half a dozen queries you don't need to."
django,2z1hh8,6086555,2,Sat Mar 14 21:47:17 2015 UTC,Using base36 or base64 is easier than you think:  from django.utils.baseconv import base64 base64.encode(model.id)   My own example implementations * Base64 example: https://github.com/pydanny/shortener_project/blob/master/shortener/links/models.py#L37-L39 * Base 32 case study: http://www.pydanny.com/case-study-url-design-for-petcheatsheetscom.html
django,2z1hh8,Ibuildwebstuff,1 point,Mon Mar 16 00:01:27 2015 UTC,"I don't know whether you will reply or not, but what should I base64.encode if I dont have a id for my model?"
django,2z1hh8,trymas,1 point,Tue Jun 23 20:01:20 2015 UTC,"Django models, by default, come with an id field whether or not it is specified. In other words, https://github.com/SanketDG/djurl/blob/master/djurl/models.py#L4-L8 comes with idbuilt-in."
django,2z42rq,plopinthehole,5,Sun Mar 15 10:43:30 2015 UTC,Doesn't form.name.value still work?
django,2z42rq,shebazz42,1 point,Sun Mar 15 12:42:42 2015 UTC,"Make a custom template filter and pass in whatever the name of the attribute you want is you want, then use make/find a regex that returns the attribute.  So when you're finished {{ form.name|get_attribute:""value"" }} would return the string ""a"""
django,2z1zjq,LeTristanB,1 point,Sat Mar 14 20:48:08 2015 UTC,"First of all, the real init() function of a model is called __ init__ (), with double underscores (There should be no spaces between the underscores and text, but Reddit's formatting...)  However, that will only be called when the object is first created, so it wouldn't be useful here anyways. Along the same lines, simply by virtue of creating an object, __ init__ () gets called, so calling init any other time doesn't make sense.  Additionally, you need to define temp_attribute as models.IntegerField(), or some other model field, rather than simply declaring it. You can specify a default value, along with a bunch of other options: Docs.  One solution would be to override the save method of the BlogPost class to include modifying members of its comment_set:  class BlogPost(models.Model):     name = models.CharField()      def save(self, *args, **kwargs):         for comment in self.comment_set.all():             comment.temp_attribute += 1             comment.save()         super(self, BlogPost).save(*args, **kwargs)  class Comment(models.Model):     blogpost = models.ForeignKey(BlogPost)     temp_attribute = models.IntegerField(default = 0)   With these models, your view would look something like:  def index(request):     blogpost = BlogPost.objects.create()     comment = Comment.objects.create(blogpost = blogpost)     # Do some stuff     blogpost.save()  # This ticks comment's temp_attribute up by 1     for comment_instance in blogpost.comment_set.all():         print(comment_instance.temp_attribute)     # Or, with a list comprehension:     print comment.temp_attribute for comment in blogpost.comment_set.all()   For more information on overriding the save() method, visit the docs. If this doesn't float your boat, you could also investigate hooking into the model's post_save Signal, which would get called immediately after that model instance is updated in the database. Docs for that."
django,2z1zjq,doobadoobadoo,1 point,Sun Mar 15 17:30:19 2015 UTC,"Thanks for helping. To clarify, I showed here the simplest code to reproduce the situation, it's not my actual code (I'm making a turned based game).  In my actual code, I have an init() function. I used this named because I didn't wanted to mess with the actual init() since I've read that it can cause problems with Django. I manually call it to finish initializing the instance with other parameters pertaining to resolving a game turn.  I used a simple integer to demonstrate what I'm trying to achieve but I'm actually setting complexe objects as attributes. Objects that I don't want to save to the database because I wont need them once the response is sent (and the turn is resolved).  I initially had completely seperate classes to describe the game behavior of my objects, but I wanted to avoid boiler plate code to load and save the data to the model instance representing each game object, so I figured I could just merge the behavior with the model code. I'm starting to think that's a bad approach ."
django,2z0iji,CrimsonRay,4,Sat Mar 14 12:38:29 2015 UTC,Bootstrap. Bower.   Nope.
django,2z0iji,andrey_shipilov,4,Sat Mar 14 13:55:58 2015 UTC,I'm curious too. Can you say more?
django,2z0iji,Voice_of_Internet,3,Sat Mar 14 15:21:07 2015 UTC,Yeah sure. I don't understand why it should be in a django skeleton.   Bootstrap is completely out of this and bower... Yeah but why again. Environments should not cross.
django,2z0iji,andrey_shipilov,1 point,Sat Mar 14 15:25:43 2015 UTC,"You're right, I should remove Bootstrap. Bower stays though, I use it a lot in my workflow. If you do not wish to use it, simply remove .bowerrc and bower.json. Updated the repo, will update the README later to include instructions on Bower and django-compressor."
django,2z0iji,andrey_shipilov,1 point,Sat Mar 14 18:40:08 2015 UTC,"Yeah no worries. Although I gotta say if you use it for a lot of projects I'm curious where are the dev/staging/production settings, dev related modules, deployment scripts and such. Don't get me wrong but to me it looks like a django template with django compressor enabled and bower of course :) you know what I mean?  Here's what I do https://bitbucket.org/sveltestudios/django_svelte_template/src"
django,2z0iji,F0RTY4,1 point,Sat Mar 14 22:21:18 2015 UTC,"That's on the to-do list :-) So far, I've only used this in two projects, they're working well but not exactly in production yet; I still have some stuff to figure out. It's very minimal for now, I'll definitely add more stuff to it in the near future.  Thanks for the link, I'll check it out :D"
django,2z0iji,hueoncalifa,1 point,Sun Mar 15 05:21:18 2015 UTC,"Out of curiosity, what do you use to manage front end deps on django?"
django,2z0iji,slrqm,1 point,Sat Mar 14 21:01:36 2015 UTC,I'm pretty new to all this- why don't you like bootstrap?
django,2z0iji,iBlag,2,Sat Mar 14 14:28:36 2015 UTC,"I have the same question. Django is back end, bootstrap is front end, they seem to complement each other nicely.  Now saying that, I have not used bootstrap. But I was about to start, so I'm genuinely curious why its not a good fit."
django,2z0iji,iBlag,3,Sun Mar 15 04:55:15 2015 UTC,He could be a Foundations fanboy.
django,2z0iji,ahulak,1 point,Sun Mar 15 08:25:01 2015 UTC,He could be a Foundations fanboy.
django,2yxwd0,wtjones,14,Fri Mar 13 19:23:21 2015 UTC,"https://docs.djangoproject.com/en/1.7/intro/tutorial01/  that is the official (""Polls app"") tutorial. it is up to date with the latest release, and I legitimately think its a good tutorial. you should try to complete it.   as far as setup goes, its only hard if you're not using the right tools. please please please use virtualenv and pip."
django,2yxwd0,metaphorm,2,Fri Mar 13 19:32:26 2015 UTC,Thank you very much for this! I've go virtualenv and pip installed and I used them the first time through TWD.  Why is the fact that you can select different versions of the tutorial hidden in the bottom right hand corner?
django,2yxwd0,metaphorm,3,Fri Mar 13 19:42:29 2015 UTC,"not sure. the documentation for django is very comprehensive and well written, but the UI on the website for it is just bleh (good enough, not great). now you know! that's half the battle.  I am really glad that they keep the docs for every version of django online though. Having just gone through a pretty big version upgrade, being able to consult multiple versions of the docs was really nice.  for future googling, I highly recommend you always include the django version you're using in your search. for example: ""django 1.7 queryset api reference""."
django,2yxwd0,pemboa,2,Fri Mar 13 19:45:22 2015 UTC,Why is the fact that you can select different versions of the tutorial hidden in the bottom right hand corner?   It's in the URL as well.
django,2yxwd0,spookylukey,1 point,Fri Mar 13 20:14:33 2015 UTC,"And on the right hand side, under the search bar."
django,2yxwd0,jlorencetti,9,Mon Mar 16 16:18:45 2015 UTC,"I think both are well written.   What was your problem? Message error, etc.  You can also try the Django Girls tutorial: http://tutorial.djangogirls.org/"
django,2yxwd0,kindofapigdill,3,Fri Mar 13 19:34:53 2015 UTC,I think Tango with Django is for an older version and hasn't been updated? You can switch versions in the django docs.   The Django tutorial(and docs in general) are some of the best out there though. Go through it a few times if you need to.
django,2yxwd0,a_atalla,2,Fri Mar 13 21:45:48 2015 UTC,This is the 1.7 version of TangoWithDjango  http://www.tangowithdjango.com/book17/
django,2yxwd0,yuga_d,2,Fri Mar 13 21:57:40 2015 UTC,"Yeah this is the one I followed and there are some parts missing towards the end but overall is it very solid. If you understand MVC and web frameworks, Tango with Django should be enough to get you on your way to building your own app. Django documentation will fill in the gaps. I suggest following step by step, not skipping around because you will break stuff. I think /r/djangolearning is going through it right now."
django,2yxwd0,andehpandeh,1 point,Fri Mar 13 23:46:12 2015 UTC,"/r/djangolearning is almost finished but you can still go back and go through it yourself, reading the comments along the way."
django,2yxwd0,awsomntbiker,2,Sat Mar 14 07:20:50 2015 UTC,"Its been a year since I've looked at the Tango with Django Tutorial, but it really got me started with Django. you also might want to check out Coding for Entrepreneurs link and Mike Hibbert's videos on youtube link"
django,2yxwd0,gledi,2,Fri Mar 13 21:37:02 2015 UTC,There's the Django by Example tutorials over at lightbird.net that were updated recently to work with Django 1.7.  I have not read the updated tutorials but I read the old ones back when I was learning Django and I recall finding them very helpful.
django,2yxwd0,_eka_,3,Fri Mar 13 23:57:09 2015 UTC,You can try this also http://twoscoopspress.org/
django,2yxwd0,banjochicken,3,Fri Mar 13 22:55:29 2015 UTC,"OP is still fighting his way through the Django Tutorials, recommending Two Scoops is asking OP to run before he can walk, the book is not a tutorial but rather a guide to best practices.  OP should complete the polls tutorial and spend a bit of time with the documentation first."
django,2yxwd0,mjgcfb,2,Sat Mar 14 10:58:11 2015 UTC,I bought this book based on recommendations here and I still can't understand why people recommend it as a tutorial.  Its like the folks recommending it haven't even read it themselves.
django,2yxwd0,banjochicken,1 point,Sat Mar 14 16:17:45 2015 UTC,"Don't get me wrong, it is an excellent book, but yes, it is not a tutorial."
django,2yxwd0,andrey_shipilov,1 point,Sat Mar 14 16:24:36 2015 UTC,Yes: https://docs.djangoproject.com/en/1.7/
django,2yxwd0,souldeux,1 point,Sat Mar 14 11:07:35 2015 UTC,"I'm late to the party, but I hope nobody will mind if I pimp my own tutorial series here. It's designed for Django 1.7 and goes from startproject all the way to deployment. Part one is here, and you can see the index with all seven parts here."
django,2yxwd0,thekingofcrash7,-4,Tue Mar 17 00:35:10 2015 UTC,"The official tutorial is pretty damn good overview, at least try to make it through page 4.  It might not be Django that you're finding difficult, its more likely it Python. If you're using Windows, I'd recommend getting an Ubuntu VM on DigitalOcean or AWS, or creating a local Ubuntu VM with Vagrant. Python on Windows can be a headache.. Plus having a VM is nice because if software packages get fucked, you can just blow it up."
django,2yxwd0,awsomntbiker,5,Fri Mar 13 20:47:44 2015 UTC,A referral link warning would be nice :)
django,2yxwd0,marklyon,2,Fri Mar 13 21:34:47 2015 UTC,c9.io will also let you set up - for free - a rather nice development VM.
django,2yvn7g,chiproller,3,Fri Mar 13 04:35:19 2015 UTC,Django itself and wagtail are worth a look.
django,2yvn7g,rnevius,2,Fri Mar 13 08:28:29 2015 UTC,The Django source is a GREAT resource for understanding what you're really importing.
django,2yvn7g,new2django,1 point,Fri Mar 13 08:35:30 2015 UTC,"Thanks, what I'm mostly interested in is seeing some examples of different ways of writing views."
django,2yvn7g,dsizemore,3,Fri Mar 13 18:11:24 2015 UTC,The best example of views with explainations: http://www.pydanny.com/tag/class-based-views.html
django,2yvn7g,doobadoobadoo,3,Fri Mar 13 18:27:39 2015 UTC,Maybe not the answer you're looking for but after doing the beginner tutorials i just dove into a project and asked questions when I got stuck and feel like my knowledge grew as a result faster than if I was doing tutorials that maybe didn't really apply for what I needed to do or examining code. It took a while for the proverbial light bulb moment but I feel like I know my way around pretty well now even though I wouldn't consider myself an expert by any stretch
django,2ywhfb,sarathsomana,1 point,Fri Mar 13 12:03:15 2015 UTC,"This is cool, but be careful with how you define these things -    If you use custom Manager objects, take note that the first Manager Django encounters (in the order in which they’re defined in the model) has a special status. Django interprets the first Manager defined in a class as the “default” Manager, and several parts of Django (including dumpdata) will use that Manager exclusively for that model. As a result, it’s a good idea to be careful in your choice of default manager in order to avoid a situation where overriding get_queryset() results in an inability to retrieve objects you’d like to work with. from the docs   And maybe it's just me, but if this is what you need then I'd just go ahead and pass the request.user object to the model. Kinda wish there was a better way to do that. I've got a few use cases, and I can make do with passing a user in. Maybe some sort of middleware?"
django,2ywhfb,snarkhunter,1 point,Sat Mar 14 01:23:11 2015 UTC,"Thanks for the comment. I agree that the first manager that Django comes across is said to be used in a special way. But I've faced the problem only with the auth_user model that I've overriden with a similar manager. Other than that everything works fine with my custom manager being the default manager.  Passing request.user doesn't always solve the problem for me. Not sure what your usecase is. For example, when an anonymous user is accessing the site request.user might not have the information that you need."
django,2ywhfb,kalyanvarmak,1 point,Wed Mar 18 06:03:14 2015 UTC,"There is a more canonical (and easier) Django way of doing this: custom queryset methods.  class BookQuerySet(QuerySet):      def twain(self):         return self.filter(author__name='Twain')      def rowling(self):         return self.filter(author__name='Rowling')   Then you have  Book.objects().twain().filter(name__contains=’Huckleberry’) Book.objects().rowling().filter(name__contains=’Harry’)   FYI, in this case you attach this manager to the class this way  objects = BookQuerySet.as_manager()   I question your use of hard coded pk's. In my example I went with last name. If you really wanted to use id's it would be proper to define constants  AUTHOR_ROWLING = 1 AUTHOR_TWAIN = 2   I generally find that it's only worth creating a queryset method if you're going to filter on more than one field. In my early days I would create methods called 'active' (that filtered on the active boolean field), but it wasn't worth the effort to consistently use it."
django,2ytdkp,iSimar,6,Thu Mar 12 17:36:09 2015 UTC,"This is a good method, though I think Celery may be better for advanced uses."
django,2ytdkp,imcleannow,4,Thu Mar 12 21:11:05 2015 UTC,I would also go with Celery for a more complex infrastructure.
django,2ytdkp,thekingofcrash7,3,Thu Mar 12 22:34:25 2015 UTC,"i was thinking the same things, but without actual experience of it.  I just read about celery a couple of time.  What the advantages ? Less tie to the OS ? Better control of the event?  ( though a API i guess )"
django,2ytdkp,thekingofcrash7,5,Thu Mar 12 21:58:00 2015 UTC,"Less ties to the OS, better control and it can be distributed. You can use a solution like Redis or RabbitMQ to handle the messages so that your jobs/tasks are distributed and threaded across multiple machines. I'm in the process of implementing Celery with Redis on a Django backend to handle Foreign exchange trades for a project at my job and it seems to fit our needs well."
django,2ytdkp,imcleannow,1 point,Thu Mar 12 22:01:11 2015 UTC,"We use celery and rabbit for any asynchronous activity, works well once you read some docs"
django,2ytdkp,TasticString,1 point,Thu Mar 12 22:09:41 2015 UTC,"Yeah, it seems like it'll fit well in our project. Though we haven't been able to test yet because the data providers we're working with are taking forever to respond with credentials to communicate with their servers (the great part of working in the banking industry...)"
django,2ytdkp,badkitteh,1 point,Thu Mar 12 22:13:45 2015 UTC,"Hah, i know the story, were currently trying to figure out what to do about API timeouts when calling our own legacy backends. Apparently 6 second timeouts are not enough..."
django,2ytdkp,badkitteh,-4,Fri Mar 13 10:24:26 2015 UTC,distributed   that the shit.
django,2ytdkp,yuga_d,2,Thu Mar 12 22:06:54 2015 UTC,I was just working on a scheduling app with tons of calculated ETA's and it was a snap with celery.  I had previously been using celery for small tasks and once setup it is excellent to interface with.
django,2ytdkp,mxchickmagnet86,3,Fri Mar 13 01:41:07 2015 UTC,"If you are using uWSGI, it has something simple built in called ""spoolers"" or ""mules""."
django,2ytdkp,OMGRussians,1 point,Fri Mar 13 06:35:02 2015 UTC,"Neat, didn't know about them. Thank you! :)"
django,2ytdkp,thundersnow,2,Fri Mar 13 14:06:03 2015 UTC,"That way you can simply ""spool up"" a task, like doing some file system work, sending emails, zipping/generating files without having to make the client wait for the task to finish. You can pass parameters and arguments to the jobs and have them use the ORM like you would in django view code."
django,2ytdkp,mbrochh,3,Fri Mar 13 14:21:31 2015 UTC,Perfect since I just posted this yesterday: http://www.reddit.com/r/django/comments/2yqbqm/what_should_i_use_for_running_scheduled_scripts/
django,2yu0tn,mirth23,2,Thu Mar 12 20:26:27 2015 UTC,I think you want django-hstore
django,2yu0tn,pemboa,1 point,Thu Mar 12 21:21:00 2015 UTC,"Ah nice, I'll check that out too. Thanks!"
django,2yu0tn,iBlag,1 point,Thu Mar 12 21:54:36 2015 UTC,[https://pypi.python.org/pypi/django-hstore/1.2.3](django-hstore)   Your link is messed up - you swapped the URL with the text you wanted to display - it should be:  [django-hstore](https://pypi.python.org/pypi/django-hstore/1.2.3)  which renders as:  django-hstore  Edit: /u/pemboa fixed it.
django,2yu0tn,pemboa,1 point,Fri Mar 13 02:29:50 2015 UTC,Thanks
django,2yu0tn,teilo,2,Fri Mar 13 07:03:06 2015 UTC,"I didn't realize they pulled JSON Field support from 1.8. Man, that sucks. But they are making the right decision. jsonb is the right way to do this."
django,2yu0tn,xBBTx,1 point,Fri Mar 13 01:47:07 2015 UTC,"Based on the Django Packages list I mentioned in edit2, this looks like the best bet since it supports both json and jsonb: https://github.com/djangonauts/django-pgjson/  This is a runner up but it stores everything in jsonb: https://bitbucket.org/schinckel/django-jsonfield/"
django,2yu0tn,huxley1970,1 point,Thu Mar 12 21:13:50 2015 UTC,"There's not really a need to use json, just go with jsonb already. It's faster and has more features for querying. At least, that's what I got out of a Postgres talk I attended recently."
django,2yu0tn,xBBTx,3,Fri Mar 13 20:18:39 2015 UTC,"You should be aware of a few tradeoffs that jsonb makes: it discards whitespace, doesn't maintain key order (it alphabetizes the keys), and if it detects a duplicate key, it discards all but the last one.  Nothing that is a deal killer if you understand that walking in, but it could be a nasty surprise if you had expectations that the stored json data would exactly match the original input."
django,2yu8xb,codefisher2,5,Thu Mar 12 21:25:59 2015 UTC,"I don't get it. Isn't this the whole point of django, or a framework in general? You just pip install django-allauth and you have that one piece you need?   What makes using this any easier or stronger than pip installing a few separate packages? You're going to need to learn the quirks of each part regardless, whether they're lumped into one pip install or many.  I feel like this would be appropriate as a skeleton of a django project, that people could clone and start editing right away, but maybe I'm missing the point of it."
django,2yu8xb,d4rch0n,1 point,Fri Mar 13 06:33:46 2015 UTC,"The problem is that they don't always play nice together.  One problem is for example with theming them, but here, them one thing, and you have 95% of the work done for all of them.  Or different ways of playing with the authenification system. Also they can better intergated together, even if I am trying to avoid couping them together.    It really just started out with me writting little apps for my own wesite, that I now want to release all packaged together, in the hope that some might find it useful."
django,2yu8xb,squiffs,1 point,Fri Mar 13 09:29:20 2015 UTC,Why not make importnews.py a fixture? I'm not sure what the function of this management command is.  Maybe things like forum_fix_refs.py should be implemented as a signal so you don't have to run this as a cronjob presumably?
django,2yu8xb,rnevius,1 point,Fri Mar 13 08:43:54 2015 UTC,"I should delete importnews.py, it copied data out of some old data dumb from an older blog I had.  And forum_fix_refs.py I used a lot when trying to track down some bugs.  I would still use it if I manually deleted stuff (ie. using SQL) from the database."
django,2yu8xb,rnevius,1 point,Fri Mar 13 09:22:45 2015 UTC,Is it just me...or are you not hashing passwords at all before saving them to your database?
django,2yu8xb,Zacharilius,1 point,Fri Mar 13 10:36:36 2015 UTC,Django does that for me...
django,2yu6w3,topos__,2,Thu Mar 12 21:10:30 2015 UTC,Are you using the X-Frame-Options middleware?
django,2yu6w3,martey,1 point,Thu Mar 12 21:38:47 2015 UTC,Yes I do. I disabled it for testing and it works! :) Thanks for the hint!!! :)
django,2yu6w3,unklphil,2,Fri Mar 13 11:21:51 2015 UTC,"In Chrome, open developer tools (cmd+alt+i on Mac, or Menu > More Tools > Developer tools) then click on the icon to the left of Elements that looks like a phone.  Other browsers possibly have similar tools."
django,2yu6w3,Brandhor,1 point,Fri Mar 13 05:23:37 2015 UTC,"F12 works as well for chrome, firefox and ie"
django,2yot7n,nathforge,4,Wed Mar 11 16:00:02 2015 UTC,"Neat. Not sure if django-social-auth should appear on the list though since it has been replaced by python-social-auth (which has python3). Sure people still use it, but new projects should not and I don't think it will be actively worked on in the future."
django,2yot7n,Whoopska,1 point,Wed Mar 11 16:59:40 2015 UTC,"Ah right, good call - will include a link."
django,2yot7n,Whoopska,1 point,Thu Mar 12 08:24:38 2015 UTC,You're already good! The python3wos addresses this by having a little lock icon and some hover-text saying that the library is python2 permanently.
django,2yot7n,rnevius,1 point,Thu Mar 12 11:09:58 2015 UTC,"This is really awesome. Thanks for sharing.  I wonder why the proportion of apps that support Python 3 is so low...Compared to the Python WOS, there's a lot of red."
django,2yot7n,hylje,2,Wed Mar 11 16:43:20 2015 UTC,"Django is one level down in the dependency chain. Django's Python 3 support is fairly new, while Python 3 itself has plenty of headway."
django,2yot7n,rnevius,1 point,Wed Mar 11 18:03:40 2015 UTC,Good point. Django has only supported Python 3 for just over two years (since Django 1.5).
django,2yot7n,chuwy24,1 point,Wed Mar 11 20:37:47 2015 UTC,So how are you figuring out if Python 3 is supported or not? I see some in the Python 2 column that do in fact work with Python 3 (like django-autoslug and django-mock.)
django,2yot7n,BuddyLindsey,1 point,Thu Mar 12 05:36:13 2015 UTC,"Good question, need to write that up for the site.  The package's setup.py contains a classifiers section, with entries like Programming Language :: Python :: 3 - same way the original wall works.  Will look at a manual override for those (and see if they'll accept a PR for new classifiers)  Thanks for your help!"
django,2yot7n,resignresign1,1 point,Thu Mar 12 07:42:55 2015 UTC,"I think they checking out a PyPi category. If package maintainer wants to declare a py3k support, I think it's the best way."
django,2yqzzo,dsizemore,2,Thu Mar 12 02:04:55 2015 UTC,"In your example, just change the weight you give to the time, no?  In your case 1/45000  also:  http://www.evanmiller.org/how-not-to-sort-by-average-rating.html"
django,2yqzzo,elbiot,1 point,Thu Mar 12 06:01:50 2015 UTC,"Thank you. I wasn't sure if the 1/45000 bit was the weight. I've been messing around with it and it looks like it's doing more what I was expect now. Thanks. Also, thanks for the link."
django,2yqzzo,tpugsley,1 point,Sat Mar 14 18:26:50 2015 UTC,A good article with many links to other resources on how sites (including Reddit) manage their rankings. Here
django,2yoc53,thoas,1 point,Wed Mar 11 13:33:43 2015 UTC,This is looking interesting. How does it compare to django-hvad?
django,2yoc53,xBBTx,1 point,Fri Mar 13 20:24:50 2015 UTC,"Everything in linguist is explicit to facilitate maintainability, migrations etc.  I'm not a big fan of the translation model creation of django-hvad or django-parler which is not explicit enough.  see https://github.com/KristianOellegaard/django-hvad/blob/master/hvad/models.py#L55 for example"
django,2yqbqm,yuga_d,4,Wed Mar 11 22:41:14 2015 UTC,Use Django management commands and call them in the crontab.
django,2yqbqm,_eka_,1 point,Wed Mar 11 23:08:01 2015 UTC,Is this in the default django admin or this is an add-on package?
django,2yqbqm,_eka_,3,Wed Mar 11 23:26:40 2015 UTC,https://docs.djangoproject.com/en/1.7/howto/custom-management-commands/  http://kvz.io/blog/2007/07/29/schedule-tasks-on-linux-using-crontab/
django,2yqbqm,adisbladis,2,Wed Mar 11 23:34:15 2015 UTC,Are you running on just one server? Then you can do what /u/_eka_ says and use management+crontab.  If you are using multiple servers or just want one place to manage your periodic tasks I would set up Celery beat for this: http://celery.readthedocs.org/en/latest/userguide/periodic-tasks.html
django,2yqbqm,tpugsley,1 point,Thu Mar 12 05:36:57 2015 UTC,My plan is to run on Azure since I have some credits. I know they have something called WebJobs but I haven't looked too much into and I would like to try something out before deploying too much out there.
django,2yrp0y,72intra27,2,Thu Mar 12 06:16:16 2015 UTC,URLField
django,2yrp0y,felidae_tsk,1 point,Thu Mar 12 06:37:54 2015 UTC,"i have a paypal button on my webpage, and when the button is clicked i want it to load the paypal payment screen in a div on the same page instead of a new page  i have tried to setup an ajax call with e.preventDefault(); but it does nothing  how have you done it on your webpage?  <form id='paypal_form' action=""https://www.paypal.com/cgi-bin/webscr"" method=""post"" target=""_top"">     <input type=""hidden"" name=""cmd"" value=""_s-xclick"">     <table>     <tr><td><input type=""hidden"" name=""on0"" value=""Credit Amount"">Credit Amount</td></tr><tr><td><select name=""os0"">         <option value=""Five Dollars"">Five Dollars $5.00 USD</option>         <option value=""Ten Dollars"">Ten Dollars $5.00 USD</option>         <option value=""Fifty Dollars"">Fifty Dollars $50.00 USD</option>         <option value=""One Hundred Dollars"">One Hundred Dollars $100.00 USD</option>         <option value=""One Thousand Dollars"">One Thousand Dollars $1,000.00 USD</option>     </select> </td></tr>     </table>     <input type=""hidden"" name=""currency_code"" value=""USD"">     <input type=""hidden"" name=""encrypted"" value=""-----BEGIN PKCS7-----MIIIW ... Yw0=-----END PKCS7-----     "">     <input id=""paypalsubmit"" type=""image"" src=""https://www.paypalobjects.com/en_AU/i/btn/btn_buynowCC_LG.gif"" border=""0"" name=""submit"" alt=""PayPal — The safer, easier way to pay online."">     <img alt="""" border=""0"" src=""https://www.paypalobjects.com/en_AU/i/scr/pixel.gif"" width=""1"" height=""1""> </form>  <script type=""text/javascript"">     $(""#paypalsubmit"").click(function (e) {         alert('k');         e.preventDefault();         $.ajax({            type: ""POST"",            url: 'https://www.paypal.com/cgi-bin/webscr',            data: $(""#paypal_form"").serialize(), // serializes the form's elements.            success: function(data) {             alert(data);            },            dataType: 'html'          });     }); </script>"
django,2yrp0y,jangojangojip,0,Thu Mar 26 21:43:03 2015 UTC,"what do you mean exactly? http is hyper text transport protocol, which is the format used for sending requests/responses on the web.   what are you trying to do with your django model?"
django,2yrp0y,metaphorm,0,Thu Mar 12 15:21:42 2015 UTC,"I was trying to bake a cake, I just can't figure out all these knobs"
django,2ynwkv,thoas,3,Wed Mar 11 10:10:50 2015 UTC,What is it?
django,2ynwkv,rnevius,1 point,Wed Mar 11 13:36:17 2015 UTC,Did you read the README?  It's a Django application to affect badges to your users using recipes.
django,2ynwkv,rnevius,2,Wed Mar 11 13:41:23 2015 UTC,"Of course I read the README. It's the first thing on the page...but the description is 4 words long. The word ""badge"" means nothing to me.  Facebook uses badges, Stack Overflow has badges, Mozilla has an Open Badges project.  I just don't understand what this app is actually for. Creating your own badge system?"
django,2ynwkv,rnevius,2,Wed Mar 11 13:54:48 2015 UTC,"Exactly, you mark a good point the README is not explicit enough.  Thanks!"
django,2ymwa8,yuga_d,1 point,Wed Mar 11 02:36:12 2015 UTC,Plenty of payment processing options here .. but I think you'll need to write your own models/business logic for the account management side.
django,2ymwa8,tpugsley,1 point,Wed Mar 11 08:42:11 2015 UTC,Yeah that's what it's looking like. I haven't seen any account management plug-ins which is a real shame. Not that hard to write but it would be nice to grab something that implemented all the core features out of the box
django,2ymwa8,martolini,1 point,Wed Mar 11 20:05:55 2015 UTC,"Check of stripe as payment processor for simplicity. django-merchant is a possible library, as well as django-stripe-payments."
django,2ymwa8,martolini,1 point,Wed Mar 11 09:35:35 2015 UTC,"Any reason why Stripe is better than PayPal? What are the advantages of using that, any personal experience?"
django,2ykkgx,django_api,2,Tue Mar 10 16:18:58 2015 UTC,"Are there better docs hiding somewhere? It looks nifty, but I'm not quite sure how to use it without delving into code."
django,2ykkgx,AlexFromOmaha,1 point,Tue Mar 10 20:09:40 2015 UTC,Thanks Alex. The README has some sample code which shows typical usage. Could you list what else you'd like to see?
django,2ykkgx,AlexFromOmaha,1 point,Tue Mar 10 22:46:50 2015 UTC,"Sure.   I made a page with an HTML form, but no associated Django form. What do I do with that? Error codes can be associated with messages, even multiple messages per error code. I have no idea how to trigger them. Can I specify something other than type when working with a model? Like, filter on a property of the model? If so, how? Can I specify that model instances are optional? Can I only use (request, args, *kwargs) as the method signature? Are you expecting a certain URL configuration to support that?"
django,2ykkgx,catskul,1 point,Wed Mar 11 01:26:28 2015 UTC,How does this compare to django-rest-framework. Does it compete or compliment?
django,2ykwus,72intra27,2,Tue Mar 10 17:48:33 2015 UTC,try  random_question = AnswerModel.objects.order_by('?').exclude(user=request.user)[0]   Just to see if that makes a difference. I didn't think HttpRequest had a user_id
django,2ykwus,pemboa,0,Tue Mar 10 21:25:32 2015 UTC,Yes.  You are missing the extra underscore  random_question = AnswerModel.objects.order_by('?').exclude(user__id= request.user_id)[0]
django,2ykwus,thataccountforporn,5,Tue Mar 10 20:55:14 2015 UTC,If you use the double underscore syntax it will result in a useless join on the user table.
django,2ykwus,charettes,1 point,Tue Mar 10 21:25:18 2015 UTC,You are missing the extra underscore   He would have gotten an error if user_id didn't work.
django,2ykwus,pemboa,1 point,Tue Mar 10 21:22:53 2015 UTC,"Heh, didn't think of that. In that case, I have no idea."
django,2ykwus,thataccountforporn,0,Tue Mar 10 21:25:33 2015 UTC,"If you run your code on the django console, you'll get to see the SQL query and maybe that sheds light on your issue.  Seems like a great point to include some tests, too!  EDIT: If the AnswerModel has a user FK and you are trying to refer to it, I think the syntax is user__id, with TWO underscores -- otherwise you're just pointing to the user_id field; maybe that was your intention."
django,2ykwus,mondongo,2,Tue Mar 10 19:24:46 2015 UTC,"If the AnswerModel has a user FK and you are trying to refer to it, I think the syntax is user__id   user_id works just fine, or he would have gotten an error."
django,2ykwus,pemboa,1 point,Tue Mar 10 21:22:13 2015 UTC,"Couldn't you just use the entire object to avoid confusion, like user = request.user?"
django,2ykwus,yuga_d,2,Tue Mar 10 19:45:38 2015 UTC,Well the documentation encourages you to use IDs whenever possible: https://docs.djangoproject.com/en/1.7/topics/db/optimization/#use-foreign-key-values-directly
django,2ykwus,mondongo,1 point,Tue Mar 10 19:47:10 2015 UTC,"Ah thanks, nice point. Will remember for use in my projects"
django,2yjhdd,philippeowagner,2,Tue Mar 10 09:09:11 2015 UTC,"This improved version of hijack comes with a lot fixes, optimisation and configuration options, for example    Do not allow staff users to hijack superusers Add setting to choose which user attributes can be used for hijacking a user Use a more liberal/naive approach to regex checking for an email Code cleanup Check staff status against logged in user instead the user being hijacked (bugfix) Only include 'disable-hijack-warning' url if HIJACK_NOTIFY_ADMIN is enabled   Get it from Github or install it from PyPI https://pypi.python.org/pypi/django-hijack/1.0.6"
django,2yjhdd,rnevius,2,Tue Mar 10 09:11:42 2015 UTC,Thanks for adding that first feature. That's one of the main things that has kept me from using hijack. I'll definitely check it out now.
django,2yjhdd,firdaus,2,Tue Mar 10 09:44:51 2015 UTC,I just implemented something like this in my Django app...
django,2yjhdd,zerok,1 point,Tue Mar 10 15:14:52 2015 UTC,As is always the case with any feature :-) First you do research to see if there is a solution out there that does what you need. After not finding anything you create it yourself and in the meantime the internet was faster ;-)
django,2yle4b,vikrampriya,3,Tue Mar 10 19:51:22 2015 UTC,"I suspect your UI problem is best solved entirely on the frontend using some kind of Javascript MVC framework (like Backbone.js or whatever else you might prefer). You can set up some kind of client side Model to represent the form data and sync it with the client side View so that it updates on change events fired off by the form.   I wouldn't bother with saving partially updated forms to the database on the backend. Save the model on the backend only once, when the user is done updating the form."
django,2yle4b,metaphorm,1 point,Tue Mar 10 20:13:17 2015 UTC,"Sounds like you want some two-way data binding, Angular style."
django,2yle4b,beardsarecool,1 point,Thu Mar 12 05:24:05 2015 UTC,"Sounds like you want an autocomplete widget or a typehead widget. There are a number of packages for django. I installed Django auto-complete-light recently (though it seems anything but light, but it works well in the admin). I think I found django-simple-auto complete easier to use when I tried it a while ago.    Or you could get a jQuery widget and write a small view to send the JSON to it. Here is how I did it myself. http://colinkingswood.blogspot.com.es/2012/05/automcomplete-in-django-search.html"
django,2yjocn,marklit,6,Tue Mar 10 10:59:11 2015 UTC,"This is actually a validation error, not a permissions error (though you can argue the other way). If you logged in and tried to view a page you don't have permissions for, they'll return a 403."
django,2yjocn,Whoopska,1 point,Tue Mar 10 12:58:25 2015 UTC,My concern is that this gives a chance to run a dictionary attack against the login. If fail2ban is monitoring nginx's logs or django's logs directly the response for a failed login and a correct one look the same.
django,2yjocn,Whoopska,4,Tue Mar 10 13:06:33 2015 UTC,"I'm not sure what exactly you're trying to report here, but could you please use security@djangoproject.com if you think it's security-impacting?"
django,2yjocn,rnevius,2,Tue Mar 10 19:33:54 2015 UTC,A valid login will be a 302 I believe. I haven't used fail2ban before so I hope that is sufficient.
django,2yjocn,rnevius,2,Tue Mar 10 13:51:20 2015 UTC,"Correct. A valid login executes a HttpResponseRedirect, which results in a 302."
django,2yjocn,pydanny,2,Tue Mar 10 14:08:10 2015 UTC,"You can rate limit in Nginx. You can also limit the number of simultaneous connections for the assigned session.  As /u/Whoopska mentioned (and as I alluded to in my Stack Overflow comment), this is a validation error...not a permissions error.   You would receive a permissions error if you limited the admin login page to a specific subset of IPs and tried to access it from one that wasn't on the whitelist (another option for securing the admin). But as it is now, anyone has server-side permission to try to log in."
django,2yjocn,kezabelle,4,Tue Mar 10 13:54:04 2015 UTC,"Okay...   If this is a mistake on Django's part (which I don't believe it is - the HTTP 200 code is likely just fine), then it has to do with authentication. Authentication is arguably part of Django security. If this is a security issue (which it probably isn't), you should have reported it to security@djangoproject.com instead of blasting it across the internet.    Please, next time you (or anyone reading this) uncovers an authentication/security issue involving Django (or it's myriad of third-party packages), notify security@djangoproject.com. Let them deal with it and announce a resolution. They'll give you major credits for reporting if it proves out correct."
django,2yjocn,pydanny,1 point,Tue Mar 10 16:16:30 2015 UTC,"They'll give you major credits for reporting if it proves out correct.   I think major credits might be overselling it, tbh :)"
django,2yjocn,kezabelle,2,Wed Mar 11 19:13:21 2015 UTC,"On the contrary! :)  Finding and reporting real security flaws that require official patches takes a bit of skill, talent, and discretion. Therefore, any time I see the name of someone who gets their name mentioned in a security patch for a tool I use I file away their name for future reference.   I also do the same for those people who exercised discretion in reporting a flaw, were ignored, then did the ethical thing and broadcasted the issue.   On the other hand, for people who show no discretion and loudly broadcast proven or unproven security holes without giving the maintainers a chance to fix things, I struggle to take them seriously after the fact.   I'm not the only person who read security patch announcements this way."
django,2yjocn,pemboa,1 point,Thu Mar 12 16:53:59 2015 UTC,"[...] I'm not the only person who read security patch announcements this way.   Sure, and that's nice to know,  but if all the credit is silent [beyond the actual announcement credit, you understand--which is all that might be considered due], it's hard to view it as major in any way. It's a neat humble-brag, though :)"
django,2yjyz5,netscape101,1 point,Tue Mar 10 13:12:42 2015 UTC,"Well, the question is, does the form represent some kind of object? Do  you have an object with corresponding fields or do you want those things saved and manipulated separately? If it does represent an object, say a ""UploadFile"", it would probably look something like,     class UploadForm(models.Model):         client = models.ForeignKey(Client)         file = models.FileField()         date = models.DateField()  If you just need to manipulate data with those inputs, then you can take them out of the form object with form.cleaned_data['field_name'] and do whatever you want with them in your views.py  Also make sure you include the class Meta and either fields or exclude for your forms (if you're using 1.7)"
django,2yimyx,Mandoryan,1 point,Tue Mar 10 02:47:50 2015 UTC,"So for getting people logged in with their google account you can use django all-auth. Technically speaking if there is a google adwords API and you have the clients google information, you should be able to display it. But theres quite a bit of unique business logic there that you would have to work through by yourself"
django,2yimyx,yuga_d,1 point,Tue Mar 10 16:23:13 2015 UTC,"Thanks for filling me in on allauth, looks like that'll get the first step done and dusted."
django,2yhc94,johnnythejames,2,Mon Mar 9 20:43:32 2015 UTC,"yes, its a good idea to have your workers running on their own machine, provisioned with sufficient resources (memory, CPU power, etc.) to complete their tasks as quickly as possible. you don't want to bottleneck yourself with a CPU resource contention problem on your app servers. let the celery workers run independently of that."
django,2yhc94,metaphorm,1 point,Mon Mar 9 22:38:30 2015 UTC,"Keeping in mind the status communication between app servers and workers back to the user doesn't have to pass back through celery perse.  You could offload work into celery (because its good at that) but use a message queue to push data to user (picked up by socket server, maybe logged to a db if the user went away while the job runs on)."
django,2yhc94,brtt3000,2,Wed Mar 11 20:12:35 2015 UTC,"yes, a common approach to this (that I favor because its easy to set up) is to use Redis as a message broker."
django,2yhc94,metaphorm,1 point,Wed Mar 11 20:27:28 2015 UTC,Which package are you using for the websockets part? (just curious).
django,2yhc94,blckdt,1 point,Tue Mar 10 12:09:55 2015 UTC,django-websocket-redis
django,2yhc94,blckdt,1 point,Tue Mar 10 13:42:59 2015 UTC,Have you tried swampdragon? I have to start a new project and I can't decide which of the two it's better.
django,2ydmhj,djangonewb,6,Sun Mar 8 22:13:03 2015 UTC,You'd want to use groups.   https://docs.djangoproject.com/en/dev/topics/auth/
django,2ydmhj,jpetersonmn,4,Sun Mar 8 23:57:54 2015 UTC,"There are several ways you could do this, in varying degrees of complexity. A simple way would be to use user Groups. You could create a Group for each payment level (if there are more than one). When a user pays, you assign the appropriate Group to them (user.groups.add()).    Then you add a decorator to your view methods that redirect the user if they are lacking the appropriate Group (payment level) to view the page."
django,2ydmhj,Mials,1 point,Mon Mar 9 00:04:29 2015 UTC,"Thanks, this makes sense. So now bringing in the payment process, do people typically do a monthly check to see if the person paid, or does any of the 3rd party systems have any tools to notify my server via some api that the user hasn't paid this month so I can knock them back down to a free user?"
django,2ydmhj,Mials,4,Mon Mar 9 00:14:30 2015 UTC,"It depends on the service you use. My company uses Recurly, and they do support webhooks to call your site when a person's subscription lapses. I think most services probably support webhooks and API interactions. Otherwise...why use them"
django,2ydmhj,true_religion,1 point,Mon Mar 9 00:33:38 2015 UTC,"Excellent, this answers all of my questions. I see stripe uses webhooks so I think they will work perfectly.  Thanks again!"
django,2ydmhj,rnevius,2,Mon Mar 9 00:58:12 2015 UTC,"What I did....  I used Stripe to handle the payments, and created a Subscription model with a termination_date field, and is_active. Every day, a cron job fires up and checks if any active subscription are past termination and if so, then sets is_active to false."
django,2ydmhj,tpugsley,2,Mon Mar 9 05:05:38 2015 UTC,How do you handle kicking users off if they're already logged in when the subscription expires? Did you account for that?
django,2ydmhj,YouAreSalty,1 point,Mon Mar 9 07:54:01 2015 UTC,If you're using a decorator - it won't matter that they were logged in at the time. If the database says 'subscription = False' then they won't get access.
django,2ydmhj,blacwidonsfw,1 point,Mon Mar 9 10:52:02 2015 UTC,It might be a good idea to cache it. Hitting the database every view unless absolute necessary might be a drain on your computing resources. You can expire it after a few hours.   I don't think ending it right on the spot is that necessary for most applications.  Also like SpideyIRL you should alert your users well in advance that their paid membership is about to expire soon.
django,2ydmhj,YouAreSalty,1 point,Mon Mar 9 16:19:48 2015 UTC,can you explain the process of caching and how/why its different than database calls and where the cache is storeD?
django,2ydmhj,autowikibot,2,Mon Mar 9 19:47:57 2015 UTC,"caching is the process of storing recently used data for fast retrieval at a later date.   So how is this different from a database?  a) a database is a persistent storage for large quantity of data organized in some manner  b) often times stored on the hard drive and optimized for as fast retrieval as possible  So how is this different than a cache?  a) Cache is often times stored in memory for fastest possible data access  b) it is based on locality principal where recent used data is expected to be used again  c) it is often times not persistent, and eventually gets written out to the database if necessary.  Of course caching applies to several other ""things"" as well, not just data from a database i.e. you can cache a webpage result (Django uses memcache for this).  In short, before you do any optimization, the first thing is to profile your site before optimizing the wrong place!  More info here:  http://en.wikipedia.org/wiki/Locality_of_reference https://docs.djangoproject.com/en/dev/topics/cache/#the-low-level-cache-api"
django,2ydmhj,SpideyIRL,1 point,Tue Mar 10 19:15:13 2015 UTC,"Locality of reference:       In computer science, locality of reference, also known as the principle of locality, is a phenomenon describing the same value, or related storage locations, being frequently accessed. There are two basic types of reference locality –  temporal and spatial locality. Temporal locality refers to the reuse of specific data, and/or resources, within a relatively small time duration. Spatial locality refers to the use of data elements within relatively close storage locations. Sequential locality, a special case of spatial locality, occurs when data elements are arranged and accessed linearly, such as, traversing the elements in a one-dimensional array.     Interesting: Principle of locality | Loop interchange | Processor register   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
django,2ydmhj,naithemilkman,1 point,Tue Mar 10 19:15:44 2015 UTC,"You can add an alert using the messages framework, so they won't be surprised when your paid views redirect them to the purchase page."
django,2ydmhj,silent1mezzo,1 point,Mon Mar 9 11:22:52 2015 UTC,Check out django-guardian for a good row based ACL plugin.
django,2yh4s8,blacwidonsfw,3,Mon Mar 9 19:49:28 2015 UTC,"It looks like django-socketio is not being actively worked on anymore. I haven't worked with it, but I have heard some good things about swampdragon."
django,2yh4s8,kundun,1 point,Mon Mar 9 20:55:35 2015 UTC,"+1 for swampdragon, it is having more activity recently. You can also check websocket-redis but it seems harder to setup."
django,2yh4s8,blckdt,0,Tue Mar 10 12:20:18 2015 UTC,Worst. Headline. Evar.
django,2yd68o,javierbg,8,Sun Mar 8 19:59:00 2015 UTC,"Sounds like django will work well for this. You may want to look into django-rest-framework, if you haven't already. It'll make interfacing from the app easier."
django,2yd68o,rnevius,2,Sun Mar 8 20:14:55 2015 UTC,"Ok, I've heard before about REST, but haven't really understood what it is. What is it for, exactly?"
django,2yd68o,rnevius,5,Sun Mar 8 20:22:15 2015 UTC,"Rather than write a long response from my phone, I'll send you this for now. Let me know if it's still unclear: https://www.reddit.com/r/explainlikeimfive/comments/1fevr4/eli5_representational_state_transfer_rest_or/"
django,2yd68o,joepeg,6,Sun Mar 8 20:26:11 2015 UTC,"Thanks to you, and thanks to ELI5. The example in the top comment was perfect :) . It's clearer now, it's time for me to learn something new!"
django,2yd68o,iBlag,3,Sun Mar 8 20:33:29 2015 UTC,"The one aspect of REST everyone gets wrong is not using links. When you visit a website, you only know the root url. For example, to get to reddit, you go to www.reddit.com. Same with google, facebook, etc.   Once you access the root site, it sends back a bunch of links that you can follow to do or get something else. When you want to follow a link on a website, do you look at the uri it points at or have to manually type in each url? No, you just follow the link. How did you get here? Do you remember any of the urls you clicked?  The same is true for REST; you hit the api root and it returns a bunch of links. The client has to know about ""relation"" types to understand what a link is. This is equivalent to a human reading the link text to figure out what you want to follow.   Everything you read says that the client builds these URLs but they don't matter.  What is the url of this page? Does it matter? No, just being able to navigate here via links matters.   This is called HATEOAS if you want to read more. Another name for REST done right is hypermedia api."
django,2yd68o,nharding,1 point,Mon Mar 9 02:58:35 2015 UTC,"Here's a good explanation of REST, and it basically builds a theoretical app from a bunch of HTTP methods into a RESTful application."
django,2yd68o,thekingofcrash7,2,Tue Mar 10 05:23:42 2015 UTC,"REST is a way accessing resources, so get a list of users you would go to site.com/users/ to get the details of an individual user you would go to site.com/users/1, you can update user 1 with POST to site.com/users/1. The response is normally returned in JSON format, which is easier to parse."
django,2yd68o,colly_wolly,6,Sun Mar 8 20:28:51 2015 UTC,"Django + django-rest-framework + django-celery will do this for you.  Django as the core and primarily for declaring your models  Django-rest-framework for allowing easy RESTful API interaction between the app and the django app  Celery for defining cronjob type tasks to be run periodically  All these components bundled up and running with Gunicorn, smells like success already"
django,2yd68o,Nick4753,1 point,Mon Mar 9 01:09:25 2015 UTC,Celery is pretty heavyweight unless you are sending stuff off to different machines.
django,2yd68o,Nick4753,1 point,Fri Mar 20 19:26:42 2015 UTC,So... yes. You can use a django REST framework to do this. BUT you'll have to handle situations where either the django app is down or (more likely) there is some form of connectivity problem or latency with the device.  It might make more sense to build your app around interacting with a 3rd party service and then letting that 3rd party service interact with your servers/database/etc.  Here are 3 services worth looking into:  https://aws.amazon.com/cognito/  https://developers.google.com/games/services/  https://www.parse.com/
django,2yd68o,thekingofcrash7,1 point,Sun Mar 8 21:11:29 2015 UTC,"I don't really understand what these are... I would like to create some sort of cache data in my app for when this happens, but nothing more"
django,2ycxxe,MattV_NL,1 point,Sun Mar 8 18:50:35 2015 UTC,You could add a top_comments and bottom_comments merits to the media model.
django,2ycxxe,thebru,1 point,Sun Mar 8 22:47:37 2015 UTC,"as in denormalize them? Is it the preferred way in this case? It came into my mind, it just seems that it isn't really in line with regular database design."
django,2ycxxe,thebru,1 point,Sun Mar 8 23:26:14 2015 UTC,"You could also put it on the Comments object manager, but you'd need to pass the Media object as a reference.  It could be done in the context of the view, but that feels a little less general IMO(which isn't necessarily the correctly one ;) )"
django,2yctjv,dougshmish,2,Sun Mar 8 18:13:03 2015 UTC,Check this out in the django documentation about relationships between models:  https://docs.djangoproject.com/en/1.7/topics/db/models/#relationships
django,2yctjv,overthink94,1 point,Mon Mar 9 00:02:32 2015 UTC,overall grades
django,2yctjv,sfall,1 point,Sun Mar 8 23:11:31 2015 UTC,"Follow the tutorial!. Then start again, changing the models to your apps settings and it should all become clear (it won't be overnight!)."
django,2y9p5i,underwatr_cheestrain,6,Sat Mar 7 20:04:01 2015 UTC,"Django activity stream is pretty good for this (and well-maintained, from what I can tell) -- https://github.com/justquick/django-activity-stream .  It makes things more abstract in that you can have any model follow any other model.  The docs are dense and not the best, but once you get it, its nice to implement and use."
django,2y9p5i,vikparuchuri,2,Sat Mar 7 21:00:03 2015 UTC,I'm curious how you would use this for following functionality? I'm using it on a site to show when someone does follow another user but I'm not sure I see how the app itself could be used for the actual following?
django,2y9p5i,dsizemore,1 point,Sat Mar 7 22:04:01 2015 UTC,Seconded on this.  I'm using it for this exact purpose on my project.
django,2y9p5i,vitriolix,4,Sun Mar 8 07:00:03 2015 UTC,"If you are in a DIY mood, try this out   http://charlesleifer.com/blog/self-referencing-many-many-through/  Found it pretty helpful"
django,2y9p5i,vintageshinpads,2,Sat Mar 7 21:10:19 2015 UTC,Have you looked at https://github.com/revsys/django-friendship/? If it doesn't do exactly what you want it will make a wonderful reference point to start from.
django,2y9p5i,offmessage,2,Sat Mar 7 20:24:00 2015 UTC,"I took this app and altered it into a ""follow"" app. Just renamed everything from ""favorite"" to ""follow"" and it works great.   http://www.bytebucket.org/last_partizan/django-favorites"
django,2y9p5i,dsizemore,1 point,Sat Mar 7 20:37:48 2015 UTC,Same here. Works great.
django,2y9p5i,SeanMWalker,1 point,Sun Mar 8 22:23:14 2015 UTC,"We use https://github.com/caffeinehit/django-follow to ""follow"" users and other things. Works like a charm!"
django,2yabst,Brachamul,5,Sat Mar 7 23:29:39 2015 UTC,"This is a very good question! We need to take two things into account   A vote changes the score As time increases, the score should go down   The problem is with the second one as you can easily hook into a post_save signal and update the relevant score. So, 2., the best technique here, in fact the one that reddit itself uses, is to give every vote a base score related to the time, and then add to that the input from the votes. This means that a post that is generated after another with automatically have a higher score than all those before it, unless they have been voted on.  Relevant reddit code"
django,2yabst,will_code_for_tea,2,Sat Mar 7 23:55:00 2015 UTC,"Tutsplus has a Django video that has you build a hacker news clone, including the logic for votes.  They calculate the score when the page is loaded. Current time vs when the lift was created"
django,2yabst,slrqm,1 point,Sun Mar 8 03:01:23 2015 UTC,"I'll check it out, thanks :)"
django,2yabst,Whoopska,1 point,Sun Mar 8 09:25:17 2015 UTC,"Or should I recalculate scores each time there is a vote or a post creation? That sounds like it would be heavy work.    Sounds like the best option. Are you worried about having a new post and having it calculated 100 times a second? How about a mix of two of your options: every 5 minutes update the score of any post that has had any votes. Then you don't have to worry about updating old posts with no changes.   Or, should I recalculate all the scores whenever a user actually asks for the data by loading the page ?   will work for the moment though. I wouldn't get caught up in a detail like this until you are releasing to production and finding the volume is significant or the page load times are long."
django,2yabst,yaix,1 point,Sat Mar 7 23:46:02 2015 UTC,"every 5 minutes update the score of any post that has had any votes.    Additionally, ""archive"" old posts, like Reddit does. If it was posted a couple months ago, you can't vote on it anymore. That way, you only have to update scores on new posts (that users will actually see) that have changed."
django,2ybqvp,patroqueeet,1 point,Sun Mar 8 10:03:10 2015 UTC,I bet his documentation is superb as well.
django,2ybg0c,dli511,7,Sun Mar 8 06:49:03 2015 UTC,Good article on what is a web framework (django is a web framework!): http://www.jeffknupp.com/blog/2014/03/03/what-is-a-web-framework/
django,2ybg0c,sankethkatta,6,Sun Mar 8 07:32:30 2015 UTC,"Very simply, Django is a free and open source web application framework. Think of a framework as a toolbox. Django's primary goal (and the goal of any ""framework"") is to ease the creation of database-driven websites; but a database isn't necessary to use Django...It includes a lot of tools for handling data, forms, writing html templates, security, and more."
django,2ybg0c,rnevius,1 point,Sun Mar 8 07:04:03 2015 UTC,Its just like how PHP uses MYSQL?
django,2ybg0c,searchingfortao,5,Sun Mar 8 07:13:18 2015 UTC,"No.  PHP is a language, just like Python is a language.  Django is a web framework for Python, like Cake/Symphony/CodeIgnighter/etc is a web framework for PHP."
django,2ybg0c,rnevius,2,Sun Mar 8 08:37:40 2015 UTC,"No, not at all actually. Django includes an ""ORM"" that makes it much simpler to interface with a database than using plain PHP."
django,2ybg0c,Zuvielify,1 point,Sun Mar 8 07:21:56 2015 UTC,"Django follows the Model-View-Controller paradigm. Linking to a database is a big part of MVC (""Model"" is the database part). Django, and other frameworks, are there to help facilitate a sophisticated web-app. Connecting to the database is the easy part, but what if you want to show different kinds of users different things? You have to make those kinds of decisions in code, and that code has to exist somewhere. Frameworks like Django reduce the amount of code you have to write to make decisions in your web server.    Django also comes with tools to be able to render your web content. You can build templates that you can inject your data (typically from the database) into, and then return it to the user's browser.    Django is really deep, and has a ton of features. You'd have to read their extensive docs to learn them all. Basically, the features are all there so you can write less code to do complicated things."
django,2ybg0c,yuga_d,1 point,Sun Mar 8 10:26:49 2015 UTC,You might want to start on something smaller like Flask or Bottle if you're new to web dev. Django is a bit big for someone who's just figuring out what a framework is.
django,2ybg0c,yuga_d,1 point,Tue Mar 10 02:48:34 2015 UTC,I just want to be able to run python code on a website. Is Django overkill? I also want access to database stuff like SQL.
django,2ya504,Ciccio99,1 point,Sat Mar 7 22:25:20 2015 UTC,"Thank you, you beautiful person!"
django,2ya114,qweatpjoqwiejtpqwt,1 point,Sat Mar 7 21:49:21 2015 UTC,"That would allow any user to be assigned to owner, rather than the currently logged-in user - which probably isn't what you want."
django,2y4tx5,mikehearn,2,Fri Mar 6 13:39:05 2015 UTC,"As a newbie to django (less than a month), could someone eli5 what this would be used for?"
django,2y4tx5,Thirster42,2,Fri Mar 6 21:34:52 2015 UTC,"It makes it super easy to create an API to interact with your object with JSON for example, think AJAX interface, etc."
django,2y4tx5,0xdeadbee,4,Fri Mar 6 22:34:33 2015 UTC,Would this be an ideal library for creating an android app's interaction with my db?
django,2y4tx5,hueoncalifa,3,Sat Mar 7 06:36:06 2015 UTC,"It really depends what your app would do, but possibly. If you want a way to access, update, create or delete your Django objects through a  remote serialized interface (JSON, XML, etc.), then it's the way to go.  Note that there are also other frameworks out there such as Tastypie or Restless."
django,2y4tx5,0xdeadbee,1 point,Sat Mar 7 10:16:52 2015 UTC,"a way to access, update, create or delete your Django objects through a remote serialized interface   What would be another possibility if not this? (just for the sake of having counterexamples)"
django,2y4tx5,hueoncalifa,2,Sat Mar 7 12:33:53 2015 UTC,This and nothing more.
django,2y4tx5,einsiedler,1 point,Sat Mar 7 16:00:25 2015 UTC,"Sorry, I'm not sure I understood your comment. Do you mean to say there aren't other possilibilites? In that case, what did 0xdeadebee's comment refer to?"
django,2y4tx5,hueoncalifa,1 point,Sun Mar 8 10:07:49 2015 UTC,"so as a newb to both json and ajax (having only read a little, haven't used it yet), can you eli5 this?  ;-)"
django,2y4tx5,Thirster42,1 point,Sat Mar 7 20:40:23 2015 UTC,+1 for adding context to the custom exception handler.
django,2y8kzb,MyMotivation,2,Sat Mar 7 13:29:48 2015 UTC,"Protip for the future: when asking questions like this I find it best to include WHY you want to get accomplish, not just what you want to accomplish do give people answering a better sense of the problem  There are 2 ways. The first sans Jquery is to do something like this:  I'm on my phone so apologies if this isn't 100% right but it should get you most of the way there: {% url 'login' %}  Should be changed to something like {% url 'login' task.title %}  In your url Conf and views add the argument title and use it there.   Again knowing WHY you want to do this would help because doing it in Jquery is a bit tricker  The a href link is going to cause the page to change immediately so you would need to do something like   Setup a click handler in Jquery Stop the original event from propagating  Make an Ajax call to your view and use something like $(this).attr('id') as the argument to your Ajax call When the Ajax call completes then change the page view javascript   That is REALLY messy, for the most part breaks the way you expect links and the web to work, and again can probably be accomplished much easier some other way...but we don't have enough info"
django,2y8kzb,jellofiend84,1 point,Sat Mar 7 13:59:35 2015 UTC,"I think I know what I'm doing with jquery which is why I asked how to call the tag in views.py, it's how to interact with the jquery/template with a function that I don't understand.  By clicking the link in the table I want to update that row in my tasks model (active to do items are completed = False), this is all I have so far:  def complete_task(request):      if request.is_ajax():         Item.objects.filter(title = ??)update(completed=True)"
django,2y8kzb,jellofiend84,3,Sat Mar 7 15:44:02 2015 UTC,"Ok first off you want to change:  <a href=""{% url 'login' %}"" name=""tick_complete"" id=""{{tasks1.title}}"">complete</a>   To:  <a href=""#"" name=""tick_complete"" id=""{{tasks1.title}}"" class=""complete_link"">complete</a>   As a said before, the href attribute will cause the browser to render a new page and stop all javascript, using ""#"" in the href won't  I also added a class to the anchor tag to make the jquery easier  the jquery is going to look something like this (note all the code in the post is untested, but it should get you close) See links to help you out:  http://api.jquery.com/click/  http://api.jquery.com/jquery.post/  https://realpython.com/blog/python/django-and-ajax-form-submissions-more-practice/  $('.complete_link').click(function() {     var task_title = $(this).attr('id');     var url = '????'; //THIS NEEDS TO BE THE URL TO YOUR VIEW     var data = {'task_title': task_title};     var success = function () {         console.log('yay');     };     $.ajax({          type: ""POST"",          url: url,          data: data,          success: success     });     });   Then your django view would look something like this:  def update_task(request):     if request.method == ""POST"":         task_title = QueryDict(request.body).get('task_title')         Items.objects.get(title=task_title).update(completed=True)   Another thing to consider is you should almost certainly be using the task id or primary key NOT the title So really everything should look like this:  <a href=""#"" name=""tick_complete"" id=""{{tasks1.id}}"" class=""complete_link"">complete</a>     $('.complete_link').click(function() {     var task_id = $(this).attr('id');     var url = '????'; //THIS NEEDS TO BE THE URL TO YOUR VIEW     var data = {'task_id': task_id};     var success = function () {         console.log('yay');     };     $.ajax({          type: ""POST"",          url: url,          data: data,          success: success     });  });     def update_task(request):     if request.method == ""POST"":         task_id = QueryDict(request.body).get('task_id')         Items.objects.get(pk=task_id).update(completed=True)   *Edit: formatting"
django,2y8kzb,yuga_d,1 point,Sat Mar 7 16:06:03 2015 UTC,"Amazing, thank you!"
django,2y8kzb,6086555,1 point,Sat Mar 7 16:13:05 2015 UTC,extra points for you because now I know how to get data out of JSON dicts on the view side. Nicely explained.
django,2y8kzb,Whoopska,1 point,Wed Mar 11 02:40:14 2015 UTC,Can you be a little more precise? You want to do an ajax request?
django,2y8kzb,skolsuper,1 point,Sat Mar 7 13:46:47 2015 UTC,"I think the question may be about forms, in which case field.auto_id is what you are looking for. So if you have  {{ form.title }}   and you wanted to get the value, you would say $(""#{{ form.title.auto_id }}"")"
django,2y5coz,douglogue,1 point,Fri Mar 6 16:34:08 2015 UTC,"I've actually been trying to decide what I should use for my next project, this made my decision for me. Thanks for this!"
django,2y5coz,Fishkillah,1 point,Sat Mar 7 16:14:34 2015 UTC,I started my new project in django. Its a dream!
django,2y4i3t,bykof,9,Fri Mar 6 10:30:54 2015 UTC,"I think the problem is that update_or_create has to make a query each time to check if the object exists and another to insert/update, if you can delete everything and just do inserts with bulk_create it would be a lot faster but that would mess up the primary key if it's an autofield  another option would be to use sql directly, it's not great but if you need speed it's usually faster than the orm"
django,2y4i3t,Brandhor,1 point,Fri Mar 6 12:58:06 2015 UTC,"Oh, that's gonna be super handy for what I'm working on."
django,2y4i3t,dorsal_morsel,1 point,Fri Mar 6 22:51:26 2015 UTC,"Sorry if this is a dumb question, what do you mean by using sql directly?  does it mean writing the schema yourself without using model?"
django,2y4i3t,styleScience,1 point,Sat Mar 7 21:46:50 2015 UTC,"the models are still useful but the insert/updates can be written in sql like this https://docs.djangoproject.com/en/1.7/topics/db/sql/#executing-custom-sql-directly , I think the orm does some other stuff before executing each query so if you have 100k inserts it can make a difference"
django,2y4i3t,Brandhor,1 point,Sat Mar 7 22:01:08 2015 UTC,Sounds good I will try pure SQL I think...
django,2y4i3t,EmadMokhtar,1 point,Sun Mar 8 12:27:16 2015 UTC,"Yeah, update_or_create() need to make sure if the row is exists in the database to decide to Insert or Update the row, so if you have 1M records so this will make ORM generate 2M queries 1M for checking the existence and 1M for update or insert."
django,2y4i3t,kmmbvnr,1 point,Sun Apr 12 13:55:23 2015 UTC,"It looks like you're banned from Reddit (your user page is a 404 and your post automatically went into the spam queue). This means all of your posts are hidden until explicitly approved. Subreddit moderators can't do anything about this, except approve your posts in the subreddit one by one.  You may want to contact the Reddit admins about this."
django,2y4i3t,colly_wolly,4,Sun Apr 12 15:46:06 2015 UTC,"In case of 105 data rows, i think no orm and even plain sql will not helps you.  You have to get to know about your database bulk load abilities and constraints checking disabling.  Also you can check this project - https://github.com/aykut/django-bulk-update But it looks not so popular."
django,2y4i3t,moustachaaa,2,Fri Mar 6 12:53:54 2015 UTC,With those sort of numbers you are probably better doing it with something like Postgres's COPY command.
django,2y4i3t,autowikibot,3,Fri Mar 20 19:40:22 2015 UTC,"As others have said, update_or_create() is pretty slow. It does a select to see if it exists, then the update or insert.  If you know you're going to be overwriting everything, then you could truncate the table then bulk_create().  If you have to update the objects, then it would be faster to use the SQL MERGE statement.  Both require executing SQL statements directly, instead of going through the ORM."
django,2y4i3t,Whoopska,1 point,Fri Mar 6 13:36:37 2015 UTC,"Merge (SQL):       A relational database management system uses SQL MERGE (also called upsert) statements to INSERT new records or UPDATE existing records depending on whether or not a condition matches. It was officially introduced in the SQL:2003 standard, and expanded in the SQL:2008 standard.     Interesting: SQL | SQL Server Compact | Microsoft SQL Server   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
django,2y4i3t,rockhoward,2,Fri Mar 6 13:36:47 2015 UTC,Maybe select out the ids that already exist and insert the others in a bulk statement?
django,2y4i3t,WorkerBeeNumber3,3,Fri Mar 6 14:51:51 2015 UTC,Here is a good place to start: https://highperformancedjango.com/
django,2y4i3t,pydanny,4,Fri Mar 6 12:02:30 2015 UTC,nice try lincoln loop...
django,2y4i3t,rockhoward,2,Fri Mar 6 13:20:45 2015 UTC,I don't work for Lincoln Loop (I work for Eventbrite) but I'll back up Rock Howard:  High Performance Django is a great book for exploring and resolving performance related issues for working with Django.
django,2y4i3t,danielsamuels,2,Fri Mar 6 15:40:30 2015 UTC,I haven't worked for lincoln loop for over 3 years. I left long before they started putting this book together. I get nothing out of recommending this book other than getting a good feeling from letting people know about this useful addition to any django developers library.
django,2y4i3t,kpmah,1 point,Fri Mar 6 16:53:59 2015 UTC,Summary of the book: cache all the things.
django,2y4i3t,plahcinski,1 point,Tue Mar 10 11:16:24 2015 UTC,"I haven't maintained it for a while, but some people are using https://github.com/KMahoney/django-bulk for this problem"
django,2y4i3t,colly_wolly,1 point,Fri Mar 6 12:52:40 2015 UTC,You should get some gains by running .exists() yourself then adding non existent fields to a list and bulk create those items every 1000 items.   Updating can't be done well in bulk afaik
django,2y4i3t,plahcinski,1 point,Fri Mar 6 13:47:03 2015 UTC,"updating can be done in bulk, but it needs to be the same value.  https://docs.djangoproject.com/en/1.7/ref/models/querysets/#update"
django,2y4i3t,be_haki,1 point,Fri Mar 20 19:36:56 2015 UTC,"Ya, but a standard update query is not useful in this situation where you are trying to sync an external dataset to your database. You'd have to do row by row."
django,2y4i3t,seventreats,1 point,Fri Mar 20 19:48:15 2015 UTC,Ask your self these two questions:   Is there complicated logic that requires the data to go through an ORM ?  Is this transform something that need to work on multiple platform (e.g a product you are developing) ?    If the answer to both these questions is no then you have no business moving data around using an ORM.
django,2y4i3t,colly_wolly,-1,Sat Mar 7 13:44:14 2015 UTC,I know this is a hard choice but I recommend moving to different database. We use Cassandra that handles large volumes of writes (17k/s). There is a python driver and even a ORM (cqlengine). Also the data will only continue to increase so you're better off switching now moving than later..  What we have done is keep transactional data in Django/Postgres and move all stream data to Cassandra. It is seamless to the client (we use rest framework). The views switch between django or cqlengine ORM based on api and other request parameters. Scales well!  Ping me if you need more details.
django,2y4uua,Saturnix,0,Fri Mar 6 13:49:36 2015 UTC,my guess is that you did not compile messages AND restarted your webserver
django,2y4uua,tbarbugli,1 point,Fri Mar 6 19:48:50 2015 UTC,"The ""it"" translation works fine. The ""en"" translation would work fine if I'd compile it.  The problem is if a Russian guy visits the app, he will still see the messages ids. There's no way to specify a default translation to show when no translation is available in the user language.  As long as only one translation is available (and in settings.py I told Django to use that one as default), no message id should be seen by any user in any circumstance."
django,2y3d1b,fitman14,4,Fri Mar 6 02:07:57 2015 UTC,"You can put everything in one file if you want to. Django won't care where they are, as long as they are somewhere it can use them, so you're free to arrange things in whatever way makes sense to you.  I'm curious, do you mean you are actually creating models from this data, or are you creating model instances?"
django,2y3d1b,dorsal_morsel,2,Fri Mar 6 02:14:46 2015 UTC,"You could create a new file called something like api_utils.py, and just shove everything API related into that file. Then, just import it wherever you need it...from .api_utils import SomeClass. This would keep things nicely organized...  But as /u/dorsal_morsel mentioned, it can go almost anywhere."
django,2y3d1b,rnevius,2,Fri Mar 6 07:15:34 2015 UTC,Sounds like you could handle this with regular Django forms to me  http://www.pydanny.com/core-concepts-django-forms.html
django,2y3d1b,jnpkr,1 point,Fri Mar 6 07:50:04 2015 UTC,This or the suggestion to use Django Rest Framework.  Basically Django Forms have a better cleaning framework than you'll be able to develop on your own. Then you can use the ModelForm subclass to have it automatically save to a new model instance.
django,2y3d1b,never_safe_for_life,2,Tue Mar 24 03:25:57 2015 UTC,"Assuming that you mean to say that you're creating model instances, then you really should look into using Django Rest Framework.  It's the defacto standard for this very process and the methodologies are very clean."
django,2y3d1b,searchingfortao,1 point,Fri Mar 6 08:56:35 2015 UTC,Well the manager already has a create method so you could have a create from api on the model manager. But have it use your api lib
django,2y1w6y,Coding_Bad,4,Thu Mar 5 19:18:59 2015 UTC,You are confusing frontend and backend by the looks of it.
django,2y1w6y,yaix,2,Fri Mar 6 01:35:06 2015 UTC,By models do you mean people or database models? Either way I would set up an AJAX call that triggers a function that gets you information. This should be a pretty simple ORM call (model = Models.objects.get(pk=id) with id being passed in the ajax call) and then serialized to JSON. Then once you have the data you can implement the twitter bootstrap modal (if using jquery the AJAX function has a success() callback to handle this).  Hopefully this is enough to get you started!
django,2y1w6y,TehMoonRulz,1 point,Thu Mar 5 19:30:47 2015 UTC,"Ah yes it is database models. Thanks for the answer!  I actually have never touched Ajax, I guess its time to start."
django,2y1w6y,TehMoonRulz,1 point,Thu Mar 5 19:34:22 2015 UTC,"It's fairly easy to learn. Start with the view and get it to return a json response of the data ('/info/<model_name>/json' for example). Then look into jQuery's .ajax(), .get(), or .getJSON() methods. You are essentially making the call to grab the data and then using JS to manipulate the page. I'm at work and can't help too much but keep at it and ask questions!"
django,2y1w6y,shearichard,1 point,Thu Mar 5 20:32:37 2015 UTC,"I have some code which may be useful to you.   I've recently been doing pretty much what you want in an old Django project and I wrote some non-django code to test out how to do it.  The code is shown below. It's not very pretty because it's just me trying things out.  The link of interest is the one labelled 'add (via div)'. You want to change the hard-coded url in the $("".wizlink-b"").click handler.  The jQuery-ui dialog used would probably be better of being positioned in a more attractive way for real world use.  <!DOCTYPE html> <html>   <head>     <meta charset=""utf-8"">      <title>Dialog with page</title>     <link rel=""stylesheet"" href=""http://code.jquery.com/ui/1.11.1/themes/smoothness/jquery-ui.css"">     <script type=""text/javascript"" src=""http://code.jquery.com/jquery-1.11.1.js""></script>     <script type=""text/javascript"" src=""http://code.jquery.com/ui/1.11.1/jquery-ui.js""></script>     <script type=""text/javascript"">     $( document ).ready(function() {         $("".wizlink"").click(function() {             opendialog(this.href, this.title);         });         $("".wizlink-b"").click(function() {             opendialog(""http://localhost:8000/organisations/person/add"", ""Person Add Test"");         });          function opendialog(page, dialog_title) {             var viewportWidth = $(window).width();             var viewportHeight = $(window).height();              var $dialog = $('#somediv')             .html('<iframe style=""border: 0px; "" src=""' + page + '"" width=""100%"" height=""100%""></iframe>')             .dialog({                 title: dialog_title,                 autoOpen: false,                 dialogClass: 'dialog_fixed,ui-widget-header',                 modal: true,                 height: viewportHeight * 0.75,                 minWidth: viewportWidth * 0.75,                 minHeight: viewportHeight * 0.75,                 draggable:true                 /*close: function () { $(this).remove(); },*/                 /*buttons: { ""Ok"": function () {         $(this).dialog(""close""); } }*/             });             $dialog.dialog('open');             }              console.log( ""ready!"" );     });      </script>   </head>   <body>     <div id=""somediv"">       Click me!         <a  href=""#"" title=""Add Site"">add - NOT THIS ONE</a>     </div>     <div>         <div id=""wizlink"">             <p>Version 5</p>             <a  class=""wizlink-a"" href=""http://localhost:8000/organisations/person/add"" title=""Person Add"">add (via anchor)</a>             <a  class=""wizlink-b"" href=""#"" title=""Person Add"">add (via div)</a>         </div>     </div>     <div>     </div>   </body> </html>"
django,2y1w6y,jnpkr,1 point,Thu Mar 5 20:49:19 2015 UTC,"If you already have the data that you would expect to be displayed in the modal available (from the query that populates your initial page) you could also render this as JSON with the original page request.  That way you could use JavaScript to populate the modal without having to perform additional AJAX requests.  If you're considering SEO or users without JavaScript enabled, and you'd potentially want the modal content to be reachable as a page of its own, then I'd recommend going down the AJAX route.  This would allow you to use request.is_ajax() [1] to determine whether to render a complete page, or just return JSON  [1] https://docs.djangoproject.com/en/1.7/ref/request-response/#django.http.HttpRequest.is_ajax"
django,2y1w6y,Whoopska,1 point,Fri Mar 6 01:00:49 2015 UTC,"Here are some typical options:  1) Render the modal for each object in the list of models.  2) Render the modal once and pull in the data each time from a datastore that you serve with the page  3) Render the modal once and pull the data in from an ajax call.  I think (2) is probably the most interesting. (1) ends up being a pain in the ass because you can't use ids, you are serving gigantic pages, you have to worry about accidentally stacking... With (3), you'll end up costing users time for extra page loads. If you have a ton of models to render, (3) might be the best option and you can store the returned values, but (3) will make your website feel bad. (2) can be done in a few ways. If you know any javascript, you can serve all of the model's data as data- attributes on something like an li <li data-name=""{{ obj.name }}"" data-age=""{{ obj.age }}"">{{ obj }}</li>  $(""#name"").text(li.data(""name"")); $(""#age"").text(li.data(""age""));   this gets old fast though. Another approach that requires a bit more set up is to chose a javascript framework and do some data binding / template rendering. As an example, you might have a template for the modal in reactjs and every time you click an li to show the modal, you rerender it with the relevant objects data. Instead of replacing the modal wholesale, react should do some nifty calculations to figure out which parts need replacing and only replace those.  This all gets a lot tougher when you want to make a form render instead of just some static data. If you were to replace the form out and pass an extra parameter to the backend with the id of the object that you are updating, you'll be basically."
django,2y0z2u,Kanthes,3,Thu Mar 5 15:07:57 2015 UTC,"Hi  This could help you with the various methods you could use for running your code  http://stackoverflow.com/questions/8068945/django-long-running-asynchronous-tasks-with-threads-processing  Appart from that, Django with it's integrated admin would make short work of most of your interface needs. So yes, give it a go :).  OTOH if you want something simpler, flask-admin + sqlalchemy might be up your street.  Happy coding"
django,2y0z2u,WelshDwarf,2,Thu Mar 5 15:58:41 2015 UTC,"Thank you very much for your response!  So running Django with long running asynchronous threads is fine? That'd be wonderful! I'm assuming that the threads will continue to run in between site visits, as well? That is what seems to make the most sense to me.  Additionally, is there any danger in generating a lot of model instances? Say.. 100 a second, or more. Or is that something that should be reserved for more less often generated objects?"
django,2y0z2u,WelshDwarf,2,Thu Mar 5 16:11:41 2015 UTC,"Frankly, for running long instances, YMMV. I don't have any real experience with using Django for this kind of stuff.  For creating 100 model instances a second, the major bottleneck would probably be the database, so you'll have to make sure that is smooth first. You could also send pure sql to the database in those cases if the ORM got too heavy."
django,2y0z2u,npolet,2,Thu Mar 5 16:17:54 2015 UTC,"You should be fine creating ~100 model instances/second (obviously this is dependant on the complexity of the models and the data being stored within it.  For your long running processes, I would look into SwampDragon which allows you to use websockets for your application. This will be useful as it will allow you to easily update and clients about changes/updates/progress on the server. It's a really nice library that fits really well into django. Plus the developer is really active and is great at providing support and helping to fix the library if you encounter any issues. Can't recommend it enough.  Good luck."
django,2y0z2u,ComradeRikhi,3,Thu Mar 5 21:46:42 2015 UTC,"You could get away with something much more lightweight like flask or bottle.  I would modify your script so it also saves it current status to the database, then just use a simple view & template to display the script's status & the newest data. For error reporting, I would catch every unhandled exception, logging the exception, it's value and the fact that the script has stopped into the database, then you can have it exit.  You could make a toggle view that forks a new process and marks the script as running in the database. If the database says it's already running, the view could kill the script instead(maybe store it's pid in the db when you start the process). You can tie the view into your status page using a button that points to the views URL.  If you don't want to have to refresh the page, use a timer & AJAX to update the status information & send the toggle requests."
django,2y0z2u,pydry,3,Thu Mar 5 16:07:28 2015 UTC,"Can you use celery for your long running multithreaded task?  If so, yes, it shouldn't be too difficult to manage the queue with a django admin. You'll probably find a lot of the code to do that type of thing is already written (django and celery integrate very well)."
django,2y0a8z,overthink94,8,Thu Mar 5 09:35:00 2015 UTC,"Google ""Django settings the one true way""  mysite/   settings/     common.py     dev.py     prod.py   dev.py and prod.py both have the import import * from .common.  On a related note, any new django dev should read Two Scoops of Django after completing their first project (not just the tutorial)"
django,2y0a8z,thekingofcrash7,2,Thu Mar 5 18:48:28 2015 UTC,"This is the best way. Your developers should all share the same settings file, and it should be in version control.   System specific settings(like the secret key & db connection info) should be set using environmental variables. Devs can add exports for these variables in their virtualenvs activate script. export DJANGO_SETTINGS_MODULE=mysite.settings.dev prevents a lot of --settings= switches too."
django,2y0a8z,ComradeRikhi,2,Fri Mar 6 21:45:54 2015 UTC,"Honestly, I messed about with a variety of settings configs trying to do this. The absolutely, MVP base simplest way to do it is: Production settings in settings.py  Local settings in local.py   Run your local environment as runserver --settings=project.local   Edit: for a variety of reasons, we have two production environments, and for the second, I modified the wsgi.py file in the server to point to the revised file.  Don't do that, if you've got that issue, use one of the other setups. :)  but for straight Dev/production, this way works.   Bish bash bosh, done."
django,2y0a8z,iamwithnail,0,Thu Mar 5 10:31:01 2015 UTC,thank you!
django,2y0a8z,Mekhami,0,Thu Mar 5 10:36:47 2015 UTC,12 Factor  This is how you need to manage your settings. From dev to deploy. This 'philosophy' (which is almost a requirement these days) will take care of the whole thing.
django,2y0a8z,xdvl,1 point,Thu Mar 5 15:00:36 2015 UTC,"This, this, this...   Don't use multiples settings.py files in your project, it's terrible to maintain and it's annoying to use since you have to pass --settings to every damn command.  The 12 Factor way should be the only valid way to store per-environment configurations.  And I strongly recommend https://github.com/henriquebastos/python-decouple"
django,2y0a8z,Mekhami,2,Sat Mar 7 04:41:49 2015 UTC,blows my mind how many people in this thread are upvoting garbage.
django,2y0a8z,ComradeRikhi,1 point,Mon Mar 9 16:53:33 2015 UTC,export DJANGO_SETTINGS_MODULE=core.settings.local
django,2y0a8z,martolini,3,Sun Mar 8 18:31:54 2015 UTC,"Create a file called dev_settings.py where you keep your dev settings like DEBUG = True; INSTALLED_APPS += .... Then at the end of settings.py do  try:      from dev_settings import *; except ImportError:     pass   Then add dev_settings.py to your .gitignore. When you're ready for production, add the new app to settings.py and do a commit/push."
django,2y0a8z,martolini,0,Thu Mar 5 09:39:24 2015 UTC,i tried this:  try:     from dev_settings import *  except ImportError:      pass   but this doesn't seem to work
django,2y0a8z,rnevius,1 point,Thu Mar 5 10:38:28 2015 UTC,"dev_settings needs to be in the root folder, if not you'll need to do a relative import."
django,2y0a8z,pemboa,1 point,Thu Mar 5 10:42:50 2015 UTC,thanks works perfectly!
django,2y0a8z,pydry,1 point,Thu Mar 5 10:43:53 2015 UTC,This is how I do it.
django,2y0a8z,DoiDorski,1 point,Thu Mar 5 10:08:32 2015 UTC,I just environment variables a simple IF statement. Nice and clear. http://arthurpemberton.com/2013/10/varying-django-settings-environment
django,2y0a8z,thekingofcrash7,0,Thu Mar 5 22:43:27 2015 UTC,"I keep three files in my repo:  dev_settings.py prod_settings.py general_settings.py  At the end of dev_settings and prod_settings, they import general_settings, which contains non-environment specific settings.  I don't keep a file around called settings.py at all. I find that if you do, somebody will inevitably use it in the wrong environment (it's the default) and come and ask me why their system is behaving weirdly, whereas if you don't, they will figure out what the right one is fairly quick."
django,2y0a8z,DoiDorski,-2,Thu Mar 5 18:13:13 2015 UTC,I usually use 2 branches (develop and production) and each one is deployed to its specific environment. This way you can handle conflicts on merges rather then pulls.
django,2y0a8z,thekingofcrash7,5,Thu Mar 5 15:04:36 2015 UTC,This is a terrible strategy lol
django,2y1j1i,Smool,2,Thu Mar 5 17:40:46 2015 UTC,"first of all, for search i would suggest to take a look at  django-haystack and pick a search engine to your liking. (whoosh is nice and simple to start with)  If you really want togo with using django ORM for search make sure to use select_related on the relationships you need in your view/template otherwise they will hit your DB even if you cache the queryset.  Can't help much more without a code example you have in place"
django,2y1j1i,Docccc,1 point,Thu Mar 5 18:37:35 2015 UTC,"I actually am using django-haystack, with reddis as a storage backend. Im also currently using load_all () on the queryset.   Is there a way to not do all that though? Ideally the view would look at the URL, notice that that specific query has already been searched for previously, and load the results from the cache."
django,2y1j1i,Docccc,3,Thu Mar 5 19:03:11 2015 UTC,I think you mixing stuff up. Reddis is not an haystack backend. For haystack let go of the term caching as the search engine will do the heavy lifting.   You have to add an search backend to haystack other then the simple backend which is just using the database and is basicly just for testing.  Take a look at there configuration docs to help you get started on an search backend.  And if you just want to use the database (i highly advice against it) then remove haystack and just manually create a view and cache the querysets result based on input.
django,2y1j1i,Docccc,1 point,Thu Mar 5 19:28:04 2015 UTC,"I'm using haystack-redis, as I'm using Heroku.    For haystack let go of the term caching as the search engine will do the heavy lifting.   Alright, thank you!"
django,2y1j1i,mbrochh,2,Thu Mar 5 19:47:27 2015 UTC,"Ah, didnt know about that backend, its still using whoosh though ;) But all i can say is it shouldnt hit your database if you dont access the object in your template. So put everything you need in the index definition. and don't access the 'result.object' in your template."
django,2y04he,riliam,2,Thu Mar 5 07:57:11 2015 UTC,"Some thoughts:  In my experience porting to django, (which is a bit dated at this point), Django's ORM is somewhat limited when it comes to managing existing databases.  It is really designed for creating DBs from scratch. The main obstacle here is if you have multi-column primary keys (a.k.a. composite keys).  It looks like there there are a few third party solutions for working with composite keys, but I haven't used any of them. That said, there is nothing tying you to Django's ORM right out of the gate.  A porting strategy might involve handling the legacy database with SQLAlchemy, and migrating to django's ORM as time and refactoring permit.  They say cool URLs don't change.  On the other hand, cool URLs also don't end in .php.  If you have uncool URLs in your PHP app, you might want to create a redirect mapping from the old URL scheme to the new one.  This might take one line at the top of your urls.py file:  url(r'^(?P<url_base>.*)\.php$', RewriterView.as_view())   RewriterView could contain all the URL mappings of .php urls.  For an incremental migration, you could serve up the old site at /php/, and any URLs that haven't been handled yet could just redirect to /php/{url_base}.php  Depending on the size of your code base, you may want to set up RPC endpoints to handle calling business logic functions between PHP and python during the transition.  If the project is small enough, this may be overkill."
django,2y04he,jcdyer3,1 point,Thu Mar 5 13:25:58 2015 UTC,"It sounds crazy enough for me to use SQLAlchemy with Django, since all third party apps with models are intended to be used with Django ORM. I wonder what difficulties did you encounter and how did you solve them.  As for my project, it's been decided to not use incremental approach, but just write Django project from scratch. Thanks for sharing your experience about such a migration"
django,2y04he,thnee,2,Thu Mar 5 19:55:48 2015 UTC,"I know some people who love Django, yet they only use it for the routing, views, templates, and static files. You know, some projects get all their data from external API's over the network, then you don't have a single model in the project. There is still lots of useful third party plugins that you can utilize. And if you ever wanna expand the scope, everything is prepared for it.  So using SQLAlchemy is not at all far fetched. The only thing I usually depend on anyway, in a normal database-driven project, is the admin, and that's just tentatively during the early stages of a project."
django,2y04he,thnee,1 point,Thu Mar 5 21:37:48 2015 UTC,"Sure, for some kinds of projects better tools exist. But isn't advantage of Django in its self-containment and strong integration? And for another project, where Django's and Django ecosystem's abilities are not enough, less integrated environment could be used (like Flask).   p.s. i'm not experienced developer, so asking you these questions to gain more knowledge, not for holywar"
django,2y04he,rnevius,1 point,Fri Mar 6 13:30:26 2015 UTC,"I would never engage in a holy war, so no worries =)  You could say that one of the ""selling points"" of Django is the strong integration, but even without the ORM, it's still a really sweet framework. I would still prefer it over Flask for any ""normal""/generic web apps. I would prefer Flask for thin stuff like interfaces, proxies, API wrappers.  Other examples of really useful features in Django, that don't depend on the ORM are:   Apps, that allows you to organize your code into separate concerns. Forms, that can validate user input data. Middlewares, that allow you to hook into the request/response cycle. Authentication, which can be highly adapted to custom needs.   A couple of extremely useful third party apps that also don't depend on the ORM:   Django compressor Django REST Framework   The list can be made long..."
django,2y04he,jcdyer3,1 point,Fri Mar 6 17:05:24 2015 UTC,"django, (which is a bit dated at this point)   Explain what makes Django ""dated""...Honest question."
django,2y04he,rnevius,3,Thu Mar 5 13:42:18 2015 UTC,It's not. Read the whole sentence.
django,2y04he,jcdyer3,4,Thu Mar 5 13:49:05 2015 UTC,"English is fun...you were referring to ""your experience"" being dated...not Django. Yes?"
django,2xyu4z,Chronic8888,5,Thu Mar 5 00:29:53 2015 UTC,"I would look into django-cms, or perhaps wagtail. Wagtail is new, but shows promise"
django,2xyu4z,Chahhhles,3,Thu Mar 5 00:45:34 2015 UTC,"Wagtail looks like a clean and simple project, maintaining compatibility with fewer Django versions, it's almost a ""greenfield"" project, look really cool.  Django-CMS have some mileage, the guys behind it are really nice and kind, have some really nice features too and looks like it's really easy to integrate with an already existing site.  I think you should play a little with both and choose what you think fits better your use case and mindset.  Maybe I like Django-CMS the most."
django,2xyu4z,jlorencetti,2,Thu Mar 5 01:42:25 2015 UTC,I like wagtail. I made this app to somewhat mimic how wordpress blogs are modeled. https://github.com/thelabnyc/wagtail_blog
django,2xyu4z,bufke,2,Thu Mar 5 03:57:37 2015 UTC,"Wagtail looks like the future, but it seems like it's meant for a company that can afford to independently maintain the codebase indefinitely. Use Wordpress for your gig now and try out Wagtail when you have a team to help you do the work.   Mezzanine lacks because the UI/UX is clunky. Wagtail has basically overhauled the standard Django admin backend and replaced it with something that is fun to use."
django,2xyu4z,kevin____,1 point,Thu Mar 5 02:20:51 2015 UTC,it seems like it's meant for a company that can afford to independently maintain the codebase indefinitely   What do you mean by this?
django,2xyu4z,rnevius,2,Thu Mar 5 06:50:54 2015 UTC,"There is no guarantee that wagtail is going to continue to be maintained. Right now using it is a risk, though I really like it and think it's a wonderful addition to the django landscape"
django,2xyu4z,thrownaway21,2,Thu Mar 5 13:52:21 2015 UTC,"but I want to able to come to them with ""fuck wordpress, we are using X now""   Why?   satisfy the people who will be managing content on the site the same way WordPress does   If people are fine with the current system, stick to it."
django,2xyu4z,yaix,3,Thu Mar 5 08:09:13 2015 UTC,"A) I don't know wordpress  B) I'd rather not learn it  C) I'd much rather maintain something that I have control over creating instead of hacking around trying to figure out how to fix something  D) When I say ""the same way"", I just mean that it looks good and is relatively easy for someone who doesn't know what they're doing to add content to the site.   E) They're not even using it yet, they just had someone set up a godaddy/wordpress server and bought a theme... that's it."
django,2xyu4z,thrownaway21,1 point,Thu Mar 5 08:18:19 2015 UTC,"A) I don't know wordpress B) I'd rather not learn it   you should have a better reason than that when they ask you. The best thing you can do for your client is to suppress the human ego, and give them legitimate reasons as to why wordpress is not the proper solution. Such as, at its root, it's a blogging platform and not suitable as a magazine site without alterations of the basic functions.  Further, you don't really need a CMS to develop a magazine website. Django was originally created as a framework to support multiple newspapers. Using the framework to produce a magazine CMS for them is probably the best route... and hey, maybe it's something you end up open sourcing."
django,2xyu4z,thrownaway21,1 point,Thu Mar 5 16:41:58 2015 UTC,"Well of course, I'm not going to give those as reasons. But thank you! That's the kind of insight I'm looking for so I can form a more reasonable explanation for my choice.   Honestly, I love Django, I've built a few simple CMSs for businesses with it already. It's so nice to have the admin prebuilt and working out of the box, but it looks a little dated/boring and it would be nice not to have to spend too much time sprucing it up or trying to add more complex functionality... I think I'm going to check out wagtail, it looks like it does a decent job of sexing the admin up without adding too much."
django,2xyu4z,obbodobbo,1 point,Thu Mar 5 19:23:12 2015 UTC,"Wagtail does quite a lot, take a look through their documentation as you'll want to have an understanding of their decisions prior to jumping in.  The demo site is very nice, and they've made it super easy to check out since they've got a vagrant machine all figured out, or you can one-click deploy to your heroku account.  Though, I've had some issues building the demo locally and deploying; but that's more my own misunderstanding w/ heroku since I'm a heroku novice.   I really like wagtail, and I'm going to use it for a client project. I'm also giving PencilBlue a shot for another client — it's a node cms that looks promising."
django,2xyu4z,obbodobbo,1 point,Thu Mar 5 20:32:47 2015 UTC,"I don't know too much about GoDaddy's capabilities, but can you even run Django (or anything non-PHP) off of a GoDaddy account?"
django,2xyu4z,thrownaway21,1 point,Thu Mar 5 12:09:53 2015 UTC,"Yes, but you have to use a more expensive shared hosting / VPS option that gives you server/shell access, and I would never use GoDaddy for this purpose (or any other), as it's over-priced and poorly supported. There are a lot of better options for VPSs that give you more power and control.  This requires some more knowledge and tuning, but I'd argue its worth it to learn. This is how it's done: https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-django-with-postgres-nginx-and-gunicorn"
django,2xyu4z,dsizemore,0,Thu Mar 5 12:18:07 2015 UTC,"Yes, I'm fully aware of how to deploy Django. ;) I was just questioning whether or not GoDaddy is a capable host for anything non-PHP."
django,2xyu4z,dsizemore,1 point,Thu Mar 5 16:53:14 2015 UTC,"Sorry, I just assumed you had no idea what you were doing because of your question... If you search ""go daddy vps"" you have your answer in about one second."
django,2xyu4z,mbrochh,1 point,Thu Mar 5 19:14:48 2015 UTC,my recommendation is to use the django framework itself to develop the CMS best suited for a magazine website.
django,2xyu4z,stevemcd,1 point,Thu Mar 5 16:43:32 2015 UTC,You've got a lot of answers for CMS's so I won't comment with the same but have you considered building your own with django taylor made for their needs? I use Django suit and it gives the Admin area a nice overhaul and pretty interface. Maybe use suit along with Django redactor wysiwyg so they have control over their posts still like Wordpress?
django,2xyu4z,lehmakook,1 point,Thu Mar 5 23:53:37 2015 UTC,"That sounds like an excellent solution. Those are basically the only things I want out of a CMS, the pretty interface and a WYSIWYG editor with rich text / image support.  I'll check suit and redactor out. Thanks."
django,2xyu4z,stevemcd,1 point,Thu Mar 5 23:59:38 2015 UTC,Cool. There's a few redactor editors out there but Here's the one I have experience with: https://github.com/douglasmiranda/django-wysiwyg-redactor  With that app the developers purchased the OEM license for redactor so as long as you're using that app you don't need to purchase a license. It works pretty well in my experience.  I'm also using Froala editor right now on a site and it works well too.
django,2xyu4z,mbrochh,-2,Fri Mar 6 00:50:15 2015 UTC,Do not use Mezzanine. django-cms is by far superior and has a more active community.
django,2xyu4z,stevemcd,4,Thu Mar 5 02:06:09 2015 UTC,"Author of Mezzanine here.  I'd ask that people take with a grain of salt any opinion mbrochh provides on Mezzanine - whenever someone has something negative to say about Mezzanine, 9 times out of 10 it's mbrochh making the comment. He has an active history of trash talking the project every time the words ""Django"" and ""CMS"" come together on Reddit or Twitter. Mezzanine didn't work the way he wanted it to, and Django CMS did. We get it. I've had dozens of people say the precise opposite over the years. Different software fits different use cases - quelle surprise.  From what I understand, Django CMS comes with a greater feature set, such as things like workflow and bigger focus on front-end editing over the admin interface. This comes at the cost of complexity though. I'd invite anyone to peruse the code bases of each project - I guarantee you'll grok how Mezzanine works overall much, much quicker. That's not a criticism of Django CMS either, but the simplicity of Mezzanine is an explicit feature that's been striven for over its years of development.  Mezzanine also gets you started much quicker - blogging, galleries, forms are all there out of the box. A lot of people put together a site and simply skin the templates, without writing a line of code - it's actually very similar to Wordpress that the OP is coming from in that regard.  A valid argument against Mezzanine is that it has fallen behind in keeping up with the latest Django version and features. It has been tough over the last 12 months to find the time to keep things up to date. Unlike Django CMS and Wagtail, Mezzanine has always been entirely community driven without the commercial interest of a web agency backing it. Yet week in and week out, Mezzanine is being actively developed. The current development branch fully supports Django 1.7 and the unreleased 1.8, with support for multi-lingual content finally landing this week! :-)  As for the more active community, just glance at each project's mailing list and you'll see that Mezzanine actually has a higher amount of activity, with less unanswered queries. I understand mbrochh asked some questions in the Mezzanine IRC channel once that went unanswered, which I'm guessing is where that comment comes from."
django,2xyu4z,lehmakook,1 point,Fri Mar 6 01:41:37 2015 UTC,"The current development branch fully supports Django 1.7 and the unreleased 1.8, with support for multi-lingual content finally landing this week!   That's fantastic to hear, I'm just looking for a Django-based CMS and the lack of multilingual support in most of them was a big issue.  How usable is the latest dev branch compared to the stable release? Or when do you predict this will be released?"
django,2xyu4z,stevemcd,3,Fri Mar 6 08:21:44 2015 UTC,"The dev branch is generally very stable, and there's really no difference between it and an official release aside from ceremony, so I'd recommend trying it out right now."
django,2xyu4z,mbrochh,1 point,Fri Mar 6 10:54:02 2015 UTC,"One day I will do you the favor and write an extensive blog post and put both system side to side to prove my point.  The problem is: This would take me a day or two and simply don't have the time. After all, I know which system is better, that's all I need to go on with life. I could save others from making a mistake but ultimately, that's even more business for me. Every time a client comes to me and tells me that they just fired their last developer and they desperately need a new one to take over the project - guess what, it's a Mezzanine project (happened four times already).  Right now we have four large scale projects (among many others), two running on Mezzanine and two running on django-cms. All projects are pretty much identical when it comes to features and requirements, which is, why I feel that I have a very good basis to compare both, which is, why I often wrote these rants. If I didn't know Mezzanine well, I'd keep my mouth shut.  Furthermore, I have touched every corner of both projects' core and I can say with absolute certainty that Mezzanine is the least Pythonic app that I have ever seen and it is also the least Djangonic (for the lack of a better word) app out there. Extending Mezzanine (and more so Cartridge) is a nightmare.  The main problem is that Mezzanine doesn't even try to be a nice reusable app in the Django ecosystem. You are trying to be your own framework on top of Django.  For a long time I have stopped bothering even commenting, especially because you always step up to defend your software (understandably). Reddit will sort it out. I'll either get upvotes from people who have felt the pain before or I'll get downvotes. Until I have time to write a in-depth blog post, that's the best I can offer to my fellow Djangonauts."
django,2xyu4z,ComradeRikhi,2,Fri Mar 6 08:38:55 2015 UTC,"The main problem is that Mezzanine doesn't even try to be a nice reusable app in the Django ecosystem. You are trying to be your own framework on top of Django.   That's exactly right - it's not a single Django app, it's never claimed to be one. Like I mentioned, Mezzanine has a huge focus on providing the developer with a usable site right out of the box. In order to do this it goes way beyond the scope of what a single Django app would do.   Now third-party Django apps can be added straight into a Mezzanine project with zero modification - that's a feature that's been intentionally crafted into Mezzanine. Meanwhile Django CMS expects third party apps to contains ""CMS hooks"" or some such thing. Using Wagtail means that the Django admin interfaces for third-party Django apps are no longer considered, unless you plan on providing two different admin systems to clients. So which projects are more Django friendly? Again I stress, those aren't criticisms of these projects - they have a different focus and different goals, but the answer of course is going to be in the eye of the beholder. And that's actually what the real problem is here - you don't seem capable of understanding how different projects with different goals are suited to different use cases. You tout that Mezzanine doesn't work for you, which is really fine! But you then imply it can't possibly work for anyone else, which is just ridiculous. There have been countless success stories with Mezzanine. Extending it is a nightmare? Many have stated otherwise. A huge portion of it is built toward extending it with different content types, simply by creating Django models and templates. No doubt you hit a wall with that, but guess what? It has worked incredibly well for a ton of others who have had different needs and expectations than you.   I really don't mind constructive criticism, but when you pop up saying ""Don't use Mezzanine"" and ""Mezzanine is terrible"" (http://www.reddit.com/r/django/comments/1qj54v/moved_to_mezzanine_from_wordpress/), you come across as really short-sighted and immature."
django,2xyu4z,yuga_d,2,Fri Mar 6 11:44:22 2015 UTC,"So is your opinion that Django-CMS is better for sites that are a complex web app and want add a few ""editable"" pages? And Mezzanine is more of a Wordpress-like full deployment, for sites that don't need much custom features?"
django,2xyw9c,a5myth,2,Thu Mar 5 00:47:49 2015 UTC,"The reason that your urls are getting stacked is probably because your anchor hrefs are in the form ""about/"" when they should have a leading slash => ""/about/"".    If you've spent any time using a terminal, it's the same concept as ""cd /usr/lib/"" vs ""cd usr/lib/"". The first will start at the root directory and go to usr, while the second will start at the current directory and go to usr."
django,2xyw9c,JoshAddington,2,Thu Mar 5 04:27:36 2015 UTC,"Which gives a further clue that the author is probably not using {% url ""about"" %}, and is instead hard-coding URLs in the template, which is something that should be patched up too."
django,2xyw9c,issue9mm,1 point,Thu Mar 5 07:14:29 2015 UTC,"I've got my links as href=""{% url 'about' %}"", I'll do some cleaning up, i've relplied to a deeper thread to u/yuda_d with some more specifics including some code snippets. I am sure it's something simple I've overlooked or misunderstanding."
django,2xyw9c,yuga_d,1 point,Thu Mar 5 11:55:07 2015 UTC,This should clear some stuff up. http://www.tangowithdjango.com/book17/chapters/login.html if you're still having problems after that post your specific question
django,2xyw9c,yuga_d,1 point,Thu Mar 5 00:59:36 2015 UTC,"hi, i'll have another look in detail over that, that is my favourite resource, but I've skipped a lot of it, reading again just now i think i've seen a few things i've missed, so thanks for the suggestion, i'll be sure to give u a shout if i get stuck Thanks"
django,2xyw9c,yuga_d,1 point,Thu Mar 5 01:19:17 2015 UTC,"Yeah don't skip anything, go through the whole thing carefully and it should clear things up for you."
django,2xyw9c,yuga_d,1 point,Thu Mar 5 01:41:28 2015 UTC,"As for having your login URL be outside your app, does it really matter? You would need to map it differently in the projects URLs.py but it should be pretty straightforward"
django,2xyw9c,yuga_d,1 point,Thu Mar 5 01:42:49 2015 UTC,"All my current urls are within the same app at the moment,which is whats confusing me, why does login append to about,it should jump back to the root url then to login right. I just want a clean logical url structure site wide thats transparent to the end user, I'm pretty sure django's url mechanisms can work some real magic if need be. I dont want 'www.mywebsite.com/about/login', that's just silly isn't."
django,2xx58v,tbarbugli,7,Wed Mar 4 16:32:47 2015 UTC,"Hi guys, some times ago I shared this Django app on github. It basically allows you to send emails using multiple mail backends. I guess most people don't ever need this, but if you send lot of emails (transaction right ;)) and need to migrate from provider X to Y or if you want to see deliverability differences between provider X and Y. This package will save you some time :)"
django,2xx58v,rnevius,1 point,Wed Mar 4 16:35:20 2015 UTC,Thanks for sharing!
django,2xx58v,erewok,1 point,Wed Mar 4 16:38:22 2015 UTC,"I could see some value in this if it makes it, for example, to send email campaigns with mandrill, but other programmatic emails using the standard django email backend."
django,2xx58v,patroqueeet,1 point,Thu Mar 5 04:26:42 2015 UTC,"you can actually do that, it's just a matter of configuring the routing conditions properly ;)"
django,2xxy5h,Kraimoar,5,Wed Mar 4 20:09:22 2015 UTC,"This can get really tricky. Sending 40 requests and wait for the responses will result in a super long loading time and your request will likely timeout.  Sending them somehow in parallel would help, but then you need to look into multithreading. I had tried that once and gave up and just used node.js which was 10x faster than Python with lesser lines of codes.  If you want to show a progress bar that shows how many of the 40 scraping requests have been fetched, you will have to deal with something like socket.io, which is a pain in the ass with Django - again, much easier with node.js  Finally, since multithreading is probably not get you anywhere easily, you might want to look into queueing, use something like celery.  Idea:   user selects search query and sends request to your server your server quickly creates all relevant srcaping requests and adds them to a queue and also creates a ""Job"" object in your Django db that holds the total number of scraping requests and the number that has been processed. user gets response page that says ""please wait"" that page sends ajax calls every second to Django, asking for the current progress and updates the progress bar your celery queue works itself off, each queue item calls a Django method which will send one scraping request, update your DB with price information and increase the ""done"" count in your Job object Finally you need to make it smart. Scraping the same site for the same product just a few minutes after the last scrape would be a waste of time since prices probably don't change every day. So add some timestamps and dismiss queue items if the last scrape was less than 24 hours ago.   That way you only have to add celery to your stack, which is quite easy and you don't have to deal with multithreading, socket.io and nodejs  Here is how you write tasks in Django that can be executed from your celery workers: http://celery.readthedocs.org/en/latest/django/first-steps-with-django.html#using-celery-with-django  Good luck. It's gonna be painful. Scraping is ugly business ;)"
django,2xxy5h,mbrochh,1 point,Thu Mar 5 02:17:29 2015 UTC,Thanks for such in-depth answer. It really helps!
django,2xxy5h,yuga_d,4,Thu Mar 5 08:44:38 2015 UTC,I would start with tango with django and then move on from there. It will give you a really good feel for the django ecosystem
django,2xxy5h,tpugsley,1 point,Thu Mar 5 00:57:40 2015 UTC,"Thanks, I'm reading it now :)."
django,2xxy5h,Mials,2,Thu Mar 5 08:40:32 2015 UTC,I've doing a similar thing - sounds fairly easy but gets difficult very quickly when you find the same products (skus) using different part numbers and descriptions. Take a look at www.icecat.biz for getting product info ...  I also use BeautifulSoup/requests to get data - and Selenium for sites that refuse to be scraped ;-). Look at putting your routines into a Celery background task.  Good Luck
django,2xxk6i,PartialMilkHotel,2,Wed Mar 4 18:26:24 2015 UTC,"You can just create a html template and render    <form action=""YOUR_API_URL"" method=""get"">     <input type=""text"" name=""a"" />     <input type=""text"" name=""b"" />     <input type=""submit /> </form>   This will do a GET - Request to your api url and submit the values from the text inputs named by ""a"" and ""b"" :) Hope this helped you!"
django,2xxk6i,bykof,1 point,Wed Mar 4 19:03:46 2015 UTC,"Ahem... method should be method=""post""."
django,2xxk6i,pydanny,1 point,Wed Mar 4 21:28:33 2015 UTC,Ah yeah sure :P
django,2xxk6i,bykof,1 point,Wed Mar 4 21:52:29 2015 UTC,Thanks!
django,2xwsf8,hueoncalifa,0,Wed Mar 4 14:49:07 2015 UTC,It'd be a better question for /r/learnprogramming
django,2xwsf8,redalastor,1 point,Wed Mar 4 15:35:42 2015 UTC,"ok. sorry, will post over there. thanks for the feedback."
django,2xvejw,matheuskiser,1 point,Wed Mar 4 04:18:14 2015 UTC,"You could do an Android App where you can place a widget on the home screen. The widget just have an input field and a button. If you type notes in the input field and press the button you send a request to your django application which tracks when you do this, what you write and tries to categorize the note in a pattern (yea thats a lot of algorithm magic but quite nice :P ). For the request handling you can just use django-rest-framework and send the data by using REST. To create a quick MVP you can start with just the android app, which have the widget and sends just a POST to your django application and the django application stores the data in a model. Then you can go further and create these nice features like tracking when you received the data and manage the categorization :) Hope I helped you."
django,2xtq6g,a5myth,2,Tue Mar 3 20:28:40 2015 UTC,"I'm pretty sure there are.  I created the original Python North-West list back in the day -- regular list meetings are still held in Manchester, but there are lots of lurkers/occasionals from Liverpool to Lancashire, Cheshire and beyond. At one point in past years, the Liverpool crowd was much more active than the Manchester one, so chances are that someone on the list can point you in the right direction.  (If you join, make sure to write something, even just a one-liner, in the ""describe yourself"" box -- it's purely an antispam/antibot measure, I approve every human being unconditionally --  and wait 10 minutes from approval before posting, so i have time to remove default moderation from your account -- again, simply an antispam measure, the group is not moderated)."
django,2xtq6g,toyg,1 point,Tue Mar 3 23:26:30 2015 UTC,ahh cheers man! i'll take a look later.
django,2xqto1,allTestsPassed,4,Tue Mar 3 02:58:41 2015 UTC,Did you run collectstatic?  Check and make sure that nginx/apache is serving your static files from the same location you've set up in your settings.py.
django,2xqto1,tanglisha,2,Tue Mar 3 03:41:59 2015 UTC,collectstatic has been run and has no issues. How do I check that my apache server is serving my static files from the same location I set up in settings.py?
django,2xqto1,tanglisha,3,Tue Mar 3 03:49:21 2015 UTC,"I haven't used apache for years, so I found you a post :)  https://stackoverflow.com/questions/5682809/django-static-file-hosting-an-apache  Your STATIC_URL in settings.py should match the alias location you set up https://docs.djangoproject.com/en/1.7/howto/static-files/"
django,2xqto1,Skiba_,4,Tue Mar 3 03:51:22 2015 UTC,"So, this part is really important:  Alias /static/ /home/ubuntu/test_site.com/testproject/static/  <Directory /home/ubuntu/test_site.com/testproject/static>     Require all granted </Directory>   It basically tells the apache server to take all URLS for /static/ and map them to a directory pointed at .../static/ on the disk of the EC2 instance.  You also need to make sure you STATIC_ROOT setting is set properly. When you are working on your local server, using the runserver command, the static files are automagically being found through your various 'static' directories.  Using the example from the link you provided, make sure your STATIC_Roort is  /home/ubuntu/test_site.com/testproject/static   If that doesn't work, try posting a gist of your settings.py."
django,2xqto1,Skiba_,1 point,Tue Mar 3 06:54:02 2015 UTC,"WSGIScriptAlias / /home/ubuntu/Project/App/wsgi.py WSGIPythonPath /home/ubuntu/Project/  <Directory /home/ubuntu/Project/App>     <Files wsgi.py>         Require all granted     </Files> </Directory>  Alias /static/ /home/ubuntu/Project/static/  <Directory /home/ubuntu/Project/static>     Require all granted </Directory>  Alias /media/ /home/ubuntu/Project/media/   <Directory /home/ubuntu/Project/media>     Require all granted </Directory>    Above is what I have for a .conf file in the sites-enabled directory under apache2 on the EC2 server. I substituted the actual names in this example for what the project and app names are.  The portion of the settings.py that deals with Static files is below  # Static files (CSS, JavaScript, Images)  STATIC_ROOT = ""/home/ubuntu/Project/""  STATIC_URL = '/static/'  STATICFILES_DIRS = (     ('assets', '/home/ubuntu/Project/static/'), )   in my base template  I have the initial line as:  {% load static %}   and the style sheets lines in the template as :    <link href=""{% static ""assets/css/default.css"" %}"" rel=""stylesheet"">"
django,2xqto1,Skiba_,2,Tue Mar 3 21:21:22 2015 UTC,"I think your STATIC_ROOT is wrong. You want the full path to the static dir:  STATIC_ROOT = ""/home/ubuntu/Project/static/"""
django,2xqto1,ynotna,1 point,Tue Mar 3 22:26:47 2015 UTC,"Ive tried .../static/ and also .../assets/ for the static root and still get the same 404 error. What would be some good debugging methods to resolve this? According to the above code, should a link like this, www.website.com/static/assets/css/bootstrap.min.css, resolve correctly?"
django,2xqto1,brtt3000,2,Wed Mar 4 03:11:36 2015 UTC,"debugging static assets can be tricky. Can you please confirm if you have the following on disk?  /home/ubuntu/Project/static/assets/css/bootstrap.min.css   I also think there may be a logical problem with your staticfiles_dirs setting. Is there a reason you have this set? Look at the docs here: https://docs.djangoproject.com/en/1.7/ref/settings/#std:setting-STATICFILES_DIRS  I never use this setting in my projects, so I may be incorrect. If I interpret this right, it will take the dirs/files in the path provided ('/home/ubuntu/Project/static/') and put them in the dir name ('assets') in your static root. So essentially you are taking everything from your static_root and putting it in another dir in your static root called 'assets'.   Can you try to remove the staticfiles_dirs from your settings and accessing the css without the 'assets' namespace?"
django,2xqto1,metaphorm,1 point,Wed Mar 4 05:31:38 2015 UTC,"Sorry for the late reply. I checked the directories and moved the /assets into the /static directory and it worked! Its a step in the right direction knowing that it can actually work at some point. I followed this tutorial when I was creating the static files.  Following the tutorial, collectstatic would take the files located in '/home/ubuntu/Project/static' and create two directories in'/home/ubuntu/Project/' directory , one /assets/ and the other /admin/.  It would work on my local dev server but not on the EC2 instance. I'm assuming it has to do with the server config and where it was looking for that assets directory. I plan on investigating on what exactly is the solution this weekend when I have some spare time and will post the results in an edit. Thanks for your help!"
django,2xqto1,brtt3000,5,Fri Mar 13 03:32:15 2015 UTC,https://pypi.python.org/pypi/whitenoise
django,2xqto1,retkomey,6,Tue Mar 3 09:10:23 2015 UTC,If you use AWS then you might want to move your files to S3 and/or use cloudfront. Saves a ton on server load (and it's cheaper per GB transfer).
django,2xpkai,nlytnmnt,8,Mon Mar 2 21:03:46 2015 UTC,Django-sendfile is probably what you want to use in this case: https://github.com/johnsensible/django-sendfile
django,2xpkai,mbi0,7,Mon Mar 2 21:39:49 2015 UTC,"You could serve the files using the webserver’s X-Sendfile module. (Although the naming is slightly different it is common in both, Apache and nginx setups.)  Webserver and django setup may be a bit confusing at first, but luckily there’s an app for that: django-sendfile  The readme of django-sendfile should be sufficient for a basic setup.  Edit: comment by /u/mbi0 already has the essential information!"
django,2xpkai,isstatingtheobvious,1 point,Mon Mar 2 21:45:41 2015 UTC,The simplest solution would be to use AWS S3 to store uploaded files and create signed URLs when a user wants to download a file: http://www.gyford.com/phil/writing/2012/09/26/django-s3-temporary.php
django,2xpkai,mssnlayam,1 point,Tue Mar 3 16:27:17 2015 UTC,The send_file example from this page: https://djangosnippets.org/snippets/365/  You would need to check if the user has permissions first and change the content type of the HttpResponse.
django,2xqk5p,beohoff,2,Tue Mar 3 01:38:13 2015 UTC,This strangely feels like an unboxing video.
django,2xqk5p,dershodan,1 point,Tue Mar 3 17:12:41 2015 UTC,Django unboxed. I watched that movie once.   Or maybe it was unchained. hmm.
django,2xrqex,jangojangojip,3,Tue Mar 3 08:53:20 2015 UTC,"Typically, there's an annual fee."
django,2xrqex,rnevius,2,Tue Mar 3 08:57:54 2015 UTC,Nope. You have to renew it usually on a year per year basis...
django,2xrqex,garmoncheg,2,Tue Mar 3 09:02:27 2015 UTC,AGAIN this is not about Django. Try /r/webhosting
django,2xrqex,Ibuildwebstuff,1 point,Wed Mar 4 13:02:29 2015 UTC,"It has an annual fee + privacy protection (sometimes). If your local currency is non-stable to dollar (i.e. UAH), it's better to purchase for 10 years (max)"
django,2xrqex,Makhauser,1 point,Tue Mar 3 10:30:34 2015 UTC,... and find out the annual renewal fee before signing up with the cheapest registrar you can find.  I always sign for 2/3 years. Works out cheaper and gives flexibility if/when you want to move.
django,2xnrei,learn_linux,4,Mon Mar 2 11:35:27 2015 UTC,Selenium is a testing framework for web frontends. There's nothing Django specific about it or in the article.
django,2xot2z,softiniodotcom,5,Mon Mar 2 17:45:22 2015 UTC,"Use uWSGI.  It's fast, easy to use, convenient and offers tons of throughput.  I've never tried Passenger with Python code (cause it isn't listed as a supported language on their site), and while there were a handful of folks using it a few years ago (before uwsgi really hit its stride), I don't know of anybody that's still doing it today.    uWSGI is the recommended choice for pretty much all scenarios I can imagine with Django/Python, especially if being used alongside gEvent."
django,2xot2z,issue9mm,5,Mon Mar 2 19:57:27 2015 UTC,I use uwsgi/nginx and gunicorn/nginx for django apps on production servers. Both of them works good.
django,2xot2z,dirigeant,2,Tue Mar 3 03:21:05 2015 UTC,Been using Gunicorn successfully myself.
django,2xorvx,PartialMilkHotel,1 point,Mon Mar 2 17:36:16 2015 UTC,It sounds like you want to convert non-relational databases into relational databases. I can't imagine any way to automate that.
django,2xorvx,rspeed,1 point,Mon Mar 2 18:37:48 2015 UTC,"What's the overall problem you are trying to solve? You mention ""serializer."" If you are working with Django REST Framework, note that the data returned by your view's get_queryset() method can be any object or iterable, not only a QuerySet."
django,2xorvx,ccb621,1 point,Tue Mar 3 06:34:23 2015 UTC,"I have a few databases. I accept a database name and a field value from the user. The program then accesses that database and queries it using the field value input. Since the databases don't have similar fields, I need a model for that object based on the user's input i.e., at runtime, then return the resulting data on the browser"
django,2xorvx,ccb621,2,Tue Mar 3 18:02:19 2015 UTC,You don't need a model. You can always query the DB directly if the using the ORM is too onerous.
django,2xnqlz,MattV_NL,3,Mon Mar 2 11:22:33 2015 UTC,"It sounds like you might be better off coding your own simple ratings app. This one hasn't been updated in over two years and is likely more complex than you need. If you really want to use something third party, look for a maintained fork or an alternative.   Django Packages is usually a good source for finding alternatives, though not sure there's a lot out there for rating systems.  I would also encourage you to look through the code for django-generic-ratings to get an idea of how it works. If you decide to build your own then use it for some ideas of how a rating system could work. Think about whether you're only going to rate the one object type (videos) or if you might want to rate other things. If only the one, you could might  be able to get by creating a rating field on that model and limit it to a choice of 1-5.   If you think you'll rate other objects or want to do more complex ratings then you'll want to create a separate Rating model and use a Foreign Key field to connect a Rating to what is being rated. This would also be necessary if you have multiple people rating an object, since you need to tie a Rating to a User as well.   Where are the templates being generated from? It looks like django-generic-ratings is using templatetags for most things."
django,2xmg4a,vicstudent,7,Mon Mar 2 01:50:51 2015 UTC,"Django has fantastic notes for upgrading between versions, and it's usually painless. 1.7 is a special case because it introduces core migrations.   If you're currently using South to handle your database migrations, then you probably want to move to using core migrations. Take a look at https://docs.djangoproject.com/en/1.7/topics/migrations/#upgrading-from-south. If you don't know if you're using South, try python manage.py migrate --list in your Django 1.6 project. If it lists anything, you're using South.  If you're not using South, then you're going from using no migrations, to using core migrations. Check out https://docs.djangoproject.com/en/1.7/topics/migrations/#adding-migrations-to-apps.  When you're ready to proceed, update your virtualenv's Django to 1.7. If you're not using virtualenv, _PillzHere_ is right -- use it :) When your Django is upgraded, try out python manage.py validate. You'll probably get some errors. Use your mighty programmer powers, and the upgrade notes, to figure out what's broken and how to fix it.   When validate is happy, follow whichever migration docs I mentioned above are appropriate (south->core or nothing->core). To be sure your production data survives, pull down a dump to your local database and try running your migrations against it."
django,2xmg4a,execrator,1 point,Mon Mar 2 04:31:38 2015 UTC,"Thanks for the info! I got virtualenv working well. I'll take a look soon. I'm not sure if I will be changing my database structure, but regardless I was wondering this. In the case I wanted to change my database structure (e.g., add an attribute or foreign keys), how can I do this without losing any data?"
django,2xmg4a,execrator,1 point,Tue Mar 3 19:13:33 2015 UTC,"Safely changing your database is exactly what migrations are for.  If you follow the instructions at https://docs.djangoproject.com/en/1.7/topics/migrations/#adding-migrations-to-apps, your project will be using migrations without having changed your database.   Once you're using migrations, you're in a position to make database changes. You can read the docs for the full details, but briefly, you make changes to your Django models, and migrations will apply those changes to your DB.  If you run into any SQL errors, your database and your models were already out of sync. You'll need to manually sync them up first."
django,2xmg4a,execrator,1 point,Tue Mar 3 23:59:55 2015 UTC,"Okay cool, this clears thing up. Thank you!"
django,2xmg4a,Destos,2,Wed Mar 4 03:16:48 2015 UTC,Feel free to PM me if you need a hand.
django,2xmg4a,mbrochh,7,Wed Mar 4 03:54:04 2015 UTC,"Judging by the way this post was written, I'm guessing you're not using virtualenv. If my guess is right, you should read up immediately on how to use virtualenv and then use it for your website's environment. Once you're using virtualenv, updating Django is as simple as pip install --upgrade django."
django,2xmg4a,nathforge,3,Mon Mar 2 03:14:45 2015 UTC,"Good advice, but he's probably talking about API inconsistencies and depreciated code."
django,2xmg4a,kundun,3,Mon Mar 2 03:49:53 2015 UTC,"Okay, so I believe I did this properly.   My app runs fine with virtualenv, after following this guide. My httpd.conf is changed and everything. When I check the version in virtualenv it shows I'm at 1.7. I can ./apache2/bin/restart in virtualenv and it's all good.  I guess everything worked? Is it normal to upgrade and not have to do anything with the database or anything else? Everything seems to be intact.   Thanks by the way.   Edit: When I deactivate and restart the server, it still works. When I check the version it says 1.65. Not sure what the problem is."
django,2xmg4a,kundun,5,Mon Mar 2 05:54:54 2015 UTC,"You must check the release notes in the Django docs to see if there are backwards compatible changes. Most notably you will no longer be able to use South with 1.7, so just upgrading is actually not quite simple."
django,2xmg4a,kundun,4,Mon Mar 2 10:25:15 2015 UTC,"Most notably you will no longer be able to use South with 1.7   There's a bit of work, but it's doable:  http://treyhunner.com/2014/03/migrating-to-django-1-dot-7/"
django,2xmg4a,Destos,1 point,Mon Mar 2 12:14:15 2015 UTC,"When I deactivate and restart the server, it still works. When I check the version it says 1.65. Not sure what the problem is.   You are probably still using your global Django installation instead of the one in your virtualenv. You need to set the python path to your virtualenv."
django,2xmg4a,dsizemore,1 point,Mon Mar 2 10:36:19 2015 UTC,"This is what my httpd.conf looks like, where ""test_app"" is the name of my app, etc. The python path is pointing to my virtualenv packages, so I'm not really sure what the problem is.       ServerRoot ""/home/my_username/webapps/test_app/apache2""  LoadModule dir_module        modules/mod_dir.so LoadModule env_module        modules/mod_env.so LoadModule log_config_module modules/mod_log_config.so LoadModule mime_module       modules/mod_mime.so LoadModule rewrite_module    modules/mod_rewrite.so LoadModule setenvif_module   modules/mod_setenvif.so LoadModule wsgi_module       modules/mod_wsgi.so  KeepAlive Off Listen 12345 MaxSpareThreads 3 MinSpareThreads 1 ServerLimit 1 SetEnvIf X-Forwarded-SSL on HTTPS=1 ThreadsPerChild 5  WSGIRestrictEmbedded On WSGILazyInitialization On  NameVirtualHost * <VirtualHost *>     ServerName  example.com      # Logging configuration     LogFormat ""%{X-Forwarded-For}i %l %u %t \""%r\"" %>s %b \""%{Referer}i\"" \""%{User-Agent}i\"""" combined     CustomLog /home/my_username/logs/user/access_test_app.log combined     ErrorLog /home/my_username/logs/user/error_test_app.log      # Django WSGI settings     WSGIDaemonProcess test_app processes=5 python-path=/home/my_username/webapps/test_app/test_django:/home/my_username/webapps/test_app/lib/python2.7/site-packages:/home/my_username/webapps/test_app/lib/python2.7 threads=1     WSGIProcessGroup test_app     WSGIScriptAlias / /home/my_username/webapps/test_app/test_django/test_django/wsgi.py </VirtualHost>"
django,2xmg4a,michaelherman,2,Mon Mar 2 14:41:59 2015 UTC,"That looks OK. I think the problem is that your virtualenv inherits the packages from your global site-packages directory. So instead of using the Django installation from your virtualenv, it is using the global Django installation.   The solution would be to either remove your global Django installation or to create a new virtualenv with the --no-site-packages option.  Step by step I would suggest you do the following:  Create a new virtualenv at your desired location:  virtualenv myenv --no-site-packages   Activate the created environment:  source virtualenv/bin/activate   Install Django and all other used python packages:  pip install django   In your apache configuration file, point to your new virtualenv:  WSGIDaemonProcess test_app processes=5 python-path=/home/my_username/webapps/test_app/test_django:/path/to/myenv/lib/python2.7/site-packages:/path/to/myenv/lib/python2.7/site-packages   Restart Apache. If it works, you can remove the global django installation. If it does not work, revert back to your old virtualenv.  In noticed that you put your project in the same directory as your virtualenv. This is not necessary. What I like to do is to put my virtual environments in a separate directory. I create a new environment with every update. Test if everything works. Then update my configuration file to work with my new virtualenv. This way you can always revert back to an old virtualenv if something unexpected happens."
django,2xmvie,jangojangojip,3,Mon Mar 2 04:07:46 2015 UTC,You should pass an html element to .append() because it operates on the DOM tree. So it appends a node or nodes under a certain node in the DOM tree.  You can do several things based on data you are returning from the server. If data is an html snippet that you want to show in #div1_mail then you can just do $('#div1_mail').html(data). If data is some json then again you might need to do something else entirely.
django,2xmvie,gledi,3,Mon Mar 2 09:53:17 2015 UTC,/r/jquery  /r/javascript  /r/learnjavascript    Just because something is web related does not mean it belongs in /r/django
django,2xmvie,Ibuildwebstuff,1 point,Mon Mar 2 11:53:38 2015 UTC,"well this is /r/django, not /r/jquery...   but it would make sense to me to switch your functions to .html().append(data), but that might be entirely wrong."
django,2xkd44,Vigilantplayer1,2,Sun Mar 1 15:16:41 2015 UTC,"For the most part, django doesn't care about which environment it runs under, but from what I can tell, you are concerned about running under a windows server. While apache for windows works just fine (as well as any windows variants of other servers), Microsoft's default server is IIS, which is apparently pretty fast. This supports only the FastCGI method of running Django, vs the preferred wsgi method, but it works just fine, with the django-windows-tools helper.  As for hosted services, the vast majority are Linux/Unix based and will work with apache,gunicorm,nginx, etc. If you have a shared server space, you might have to request shell access, python/virtualenv installation, or wsgi support to make it work; if you have a VPS or privileged access to a server, then just follow Django's instructions, but it falls on you to keep the server online and patched. I'm currently running under a very locked down shared space with nothing except FastCGI enabled (not even shell!). It is difficult to work with certain configurations, but Django can use just about anything with some tweaks."
django,2xkd44,lovestruckluna,1 point,Sun Mar 1 16:28:00 2015 UTC,This is what i needed to know thanks. VPS price doesn't sound as bad now lol.
django,2xkd44,lovestruckluna,1 point,Sun Mar 1 17:01:13 2015 UTC,"It really depends on your use case. If you're just trying to learn how, a cheap VPS is a good place to start (I recommend DigitalOcean for personal experiments). On the flip side, premaintained environments are nice as they almost guarantee better uptime; you mentioned Dreamhost before, and their default web hosting package supports Django quite nicely, and I've always liked their support. The only difference at this level is how far into the guts of your system you want to go, and how much control you want."
django,2xkd44,damontoo,1 point,Sun Mar 1 17:20:44 2015 UTC,I'm not really sure what you mean. You should be able to deploy your project to most servers without much problem.
django,2xhuah,manliness,15,Sat Feb 28 20:59:12 2015 UTC,"Django is probably the best documented web framework. It has myriad apps and associated packages. Depending on what you're building, the admin interface can do lots of your work for you. Have a look at what other packages might be available for getting done what you need.  Also, insert the usual ""I prefer python to php"" reasons here."
django,2xhuah,plum_dog,1 point,Sat Feb 28 21:16:05 2015 UTC,Good documentation is a good sign of a good framework!
django,2xhuah,execrator,3,Sat Feb 28 22:00:23 2015 UTC,"If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea.   edit: this is from ""The Zen of Python"": https://www.python.org/dev/peps/pep-0020/"
django,2xhuah,execrator,17,Sat Feb 28 22:30:55 2015 UTC,"I worked with PHP for four years, in the dark pre-composer days. A lot of the problems with PHP at that time came from the awful copy-paste community, but since I worked with good colleagues, PHP seemed OK.  I tried a Python project on the side, and suddenly PHP seemed ridiculous. Python is like kicking off your shoes and socks after a long day. You can relax, it's on your side. If you don't know how to use a language feature, dream up the simplest syntax for it, and there's a good chance it will actually work.  I vividly remember learning how to check whether an item existed in an array in Python. I was still on the mental defensive, me versus the language, having come over from PHP. I had a few guesses but no luck, and assumed, since it didn't work at first, there was going to be some weird standard library method with unguessable arguments. I headed off to the docs.  Turns out the test is if thing in things. It's so beautifully simple -- and PHP had conditioned me that it couldn't be that simple. A lot of things in Python are like this. Small ones that align so well with your expectations that you immediately forget about them and just get on with coding.  To counter the language bashing vibe of the above: I work at a Python shop now, but we still use PHP for small internal service sites, because they're so quick to get going. The ease of deployment is tough to beat."
django,2xhuah,rspeed,1 point,Sat Feb 28 22:48:04 2015 UTC,"Wow, I can't wait to try it.  By the way, when referring to the ""cut & paste community"", are you referring to code duplication among peers (rather than refactoring), or ripping off code and calling it one's own? I ask b/c I see a lot of copy & paste code duplication on a large project at my shop."
django,2xhuah,execrator,5,Sat Feb 28 22:56:08 2015 UTC,"I think he means there's a lot of posting ""here's how I did this"" in a comment on the documentation pages of php.net. People would find it through a Google search, paste it into their codebase, then fiddle around until it works. It's a terrible practice."
django,2xhuah,omgplsno,4,Sun Mar 1 02:57:18 2015 UTC,"Yes, that's exactly it.   Pasting other code is fine as long as you understand it. Unfortunately, one of PHP's greatest strengths is also a weakness, in that it's very easy for beginners to start using it. Consequently a lot of folk out there are pasting code without understanding it."
django,2xhuah,dershodan,8,Sun Mar 1 05:17:59 2015 UTC,This.
django,2xhuah,pydry,1 point,Sat Feb 28 23:13:55 2015 UTC,"This is impressive. I did a PHP project way back in the day, and kinda didn't like it. But as a rather unexperienced programmer i figured, that's probably ""the way it is"". On the next web project, out of curiosity, I decided to give django a shot. Needless to say, I never looked back.  This link you posted explains the overall feelings I have towards PHP. But if someone asks me, I cannot really say why I would never do anything in PHP ever again. It's a gut feeling for me.  Thanks for sharing, this was really refreshing :)"
django,2xhuah,yaix,5,Tue Mar 3 17:42:28 2015 UTC,"1) x = ""5"" + 6  In javascript the answer is 56. In PHP the answer is 11. In python the answer is ""don't add strings to numbers, dumbass.""  That's one main reason why I like python: strongly typed.  Why is this important? https://en.wikipedia.org/wiki/Fail-fast  That sort of thing - when a string is accidentally passed to a function instead of an int (or any other type) - leads to all sorts of fucked up behavior. You get the failure quickly in python, before it gets really expensive to fix. You get the failure in PHP after it's been deployed to production and you have to do a day's detective work to figure out why you just charged a customer $8000 instead of $8.  This type of problem also compounds, the more libaries you build your app upon. If a subtle but harmful bug caused by that is in a libary that is foundational for your app, you are doubly fucked.  2) Laravel, which is still the best PHP web framework out there, was inspired by django. However, PHP doesn't ever inspire python projects that I know of.  3) The same PHP program written in python, all things being equal, will be shorter in python, often considerably shorter. And easier to read. The syntax and language features are just better designed.  4) The django/python community is generally more professional. The quality of libraries is usually better."
django,2xhuah,zagrebelin,6,Sun Mar 1 10:46:00 2015 UTC,"Readability of Python.  Its just much nicer to look at Python code than it is to look at PHP mess.  Also, PEP-20. Its just a really great philosophy for software development.  As for Django: I looked at some other frameworks to decide for one. Django has awesome documentation and comes with everything included. But, its not ""heavy weight"", because you can just comment out what you don't need in the setiing.py file (down to Django not doing more than resolving the request path and calling a function)."
django,2xhuah,zenberserk,4,Sun Mar 1 01:08:06 2015 UTC,I hate $variables.
django,2xhuah,__no_preserve_root,0,Sat Feb 28 22:35:12 2015 UTC,"I used to hate $variables too (Perl&PHP), until I noticed that it prevents collision between variables and reserved keywords:  Try using variables ""object"", ""class"", or ""try"" in Python, as opposed to $object, $class and $try (hint: convention is to suffix colliding variables with underscore, e.g ""object_"", ""class_"", ""try_"").  I still hate Perl & PHP, but for different reasons :-)  (Edit: Reddit swallowed my underscores, had to escape them)"
django,2xhuah,bigirnbrufanny,3,Sun Mar 1 07:55:29 2015 UTC,"At least in perl the sigil means something. $scalar, @array, %hash. I think it was inherited from shell scripting. (Using $, that is.)"
django,2xhuah,g-money-cheats,1 point,Sun Mar 1 08:28:12 2015 UTC,And passing a reference to a hashmap is really straight forward in perl. Sarcasm due to a wasted hour doing just that after not touching perl for 10 years. I love Python :)
django,2xhuah,iwan933,6,Tue Mar 3 10:19:24 2015 UTC,"Because people hate PHP. They hate the weird syntax, they hate the == operator, they hate the inconsistent standard library function naming/function parameter order (which, admittedly, Python isn't perfect on either), they hate mixing code with HTML, they hate the shitty documentation, etc. etc."
django,2xhuah,execrator,0,Sat Feb 28 21:15:19 2015 UTC,"""They hate mixin HTML code"" is not correct - as there are frameworks to manage this seperatly."
django,2xhuah,Mekhami,3,Sat Feb 28 22:04:05 2015 UTC,"If you need frameworks to manage it, I think you're making an argument in favour of OP, not against."
django,2xhuah,iwan933,0,Sun Mar 1 05:20:07 2015 UTC,it is still correct. how can you say 'many people's opinion' are not correct. that's ignorant.
django,2xhuah,xBBTx,1 point,Sat Feb 28 22:16:49 2015 UTC,"Sorry if I explained my opinion missunderstandable. My intention was just to say, that HTML mixin code can be seperated with php frameworks - so this should not be one of the reasons to pick on Django - while there of course are many others. ;)"
django,2xhuah,codekoala,5,Sun Mar 1 08:42:41 2015 UTC,"I haven't, actually got into PHP after knowing Django because I couldn't find a Django gig as a student, but I could with PHP.  So, what makes me love Django and look down on PHP?   Python syntax almost reads like regular English and is more consistent than PHP PEP8, and it's enforcement. PHP has no official style guide. You have the Symphony style guide, PEAR style guide, ... and they all differ. The company where I do PHP has a massive copy-paste mentality and is afraid to do modern stuff - something I'd say is a typical PHP thing. People don't advance, a shit ton of websites run on the dead PHP 5.3, while 5.6 has been stable for a while. In Python/Django, stuff actually gets cleaned up after two 'major' versions, it doesn't linger around for x more versions in deprecated state Clear model - template - view separation Django, where a lot of PHP developers still argue that 'PHP in itself is a template language'. Lots and lots of third party modules on PyPI, although with composer that has massively improved in PHP. Most of all, Python is fun for me, and PHP more or less just feels like a job that pays the bills."
django,2xhuah,badkitteh,2,Sat Feb 28 22:55:31 2015 UTC,"I used php almost exclusively for some 7 or 8 years when I started working for a small web shop. We had several tools that we sold to a very specific group of clients. They were all written in php, and our clients liked what we had to offer. I went to a trade show with my boss to rake in more clients, and shortly afterwards, it became more and more frustrating to maintain the collection of client websites. They all shared a common codebase, but they all had customizations to that codebase. Bringing upgrades and bug fixes to each client was time consuming and error prone.  I started looking into other options to help reduce the maintenance burden while also allowing us to get up and running quickly. I don't remember everything that I looked at anymore (this was back in 2007), but I remember ruby on rails and django were the most promising for our setup. Django won for several major reasons: 1) Python's syntax, 2) extensive standard library, 3) large collection of high quality 3rd party tools, 4) django's excellent support for pluggable apps, and 5) django's built in admin. The more we used django, the more confident we were that we made the right choice. We were able to easily port our in-house apps quickly and our customers noticed the increased reliability. And this is despite the fact that none of us really had any notable experience with Python prior to the transition.  I still happily use django almost daily, some 8 years later."
django,2xhuah,pemboa,2,Sun Mar 1 05:20:12 2015 UTC,REGISTER GLOBALS ON
django,2xhuah,badkitteh,1 point,Sun Mar 1 08:48:02 2015 UTC,"Python is simply a better language. Django just happens to be my framework of choice,"
django,2xhuah,andrey_shipilov,1 point,Sun Mar 1 07:57:10 2015 UTC,"I hate PHP, too. Define ""better"", though."
django,2xhuah,bigirnbrufanny,2,Sun Mar 1 08:47:27 2015 UTC,Proper oop. End of thread.
django,2xhuah,LeoG7,1 point,Sun Mar 1 16:32:30 2015 UTC,<thread>  === <--- wtf PHP?
django,2xhuah,snarkhunter,1 point,Tue Mar 3 10:21:46 2015 UTC,"Flask framework, python is easy to learn and build apps in, I m working on facial recognition app can you beat that, i could  bearly program a CRUD app with PHP"
django,2xhuah,gledi,1 point,Sun Mar 1 15:17:37 2015 UTC,"For the first few years of my career I worked with PHP more than anything. In 2006 my small team built a small webapp in Ruby on Rails and it blew our minds. If I remember correctly, it was blowing most everyone's minds back then. Since then I'd done a pretty wide variety of stuff. Lots of fixing or adding minor extensions to PHP sites. Application support that was for services written mostly in Perl, but also some C++ and Python mixed in. A couple years ago my expansive knowledge about where data was located and how to put it into a meaningful form across a very wide and disparate corporate environment made me the reporting guru. Python was THE tool for me to use. I could turn around a request FAST because Python let me write my code in really reusable ways. Sales guys had their graphs to show off to customers, Ops was happy because they had the data that told them where the issues were happening. I never had a real chance to even use any of the really good data-analysis tools in Python. Most of the magic was just integrating data from MySQL, SaaS APIs, and random piles of data.  I moved on from that job to another job - specifically to rebuild a website (actually an integrated suite of websites). The current state was very legacy PHP/MySQL, and then like a year before some company had come in and redone a bunch of stuff in C#.NET and MSSQL.  SQL Server Integration Services is the worst technology I have ever worked with. SSIS is how I know that Microsoft hates me. And god damn do I hate SSIS back.  So I was tasked with rewriting this thing. I was already biased towards Python because I knew how fast I could move with it. Flask and Django were the two frameworks that most intrigued me. I'd started to use Flask at my previous job. It was really nice and lightweight, great for building an API. I went with Django because it gave me more out-of-the box. I knew I could accomplish the same with both tools.  We're about halfway through this project and our codebase is neat, clean, and well-organized. We have a couple dozen Django apps that nicely divide our model and business logic in to logical pieces. We've written a handful of mixins for models and CBVs that abstract out our common logic. For instance - a lot of objects in our system have effective dates, and it was nice to move that logic into one place that could then be used wherever it needed to be.  We are three developers with varying levels of experience in varying fields. I've been all over the place, another one has worked almost exclusively in the .NET world, and the other guy is mostly PHP and mobile development. There have been bumps in the road. Something we have all noticed is that whenever we hit a snag, the answer is always ""do it in the Django way"" - meaning to do it either using the tool that Django (or Python itself) gives us, or to do it in the way that the framework and language most lends itself to.  To me, that's what sets a good tool apart from a bad. A good tool solves a problem, a great tool solves a problem with a minimal amount of extra thought. Using Python and Django lets us focus more on how to make a great application that will really help our users (in this case, our coworkers) do their jobs more efficiently and effectively. The other day I was giving an update to our director and I really, really enjoyed reiterating how we haven't written a single line of custom DDL. We've got over 100 tables in our DB. I graphed it on Friday, and it was beautiful."
django,2xhuah,obbodobbo,1 point,Sun Mar 1 18:05:50 2015 UTC,I just felt that python was better suited to my way of thinking. Also when working in Python I am much more productive and I don't have to check the documentation as often as with PHP.  It has been mentioned by others here as well but python is so much more expressive and so close to pseudo code that your guesses on how something should be written tend to be right.
django,2xhuah,x3al,1 point,Mon Mar 2 09:58:23 2015 UTC,"I'm regularly coding in Java, PHP or Python. Between the three, writing Python is the most enjoyable, quickest and easiest to read. Python is such a versatile language that I'm rarely ever questioning if its the right tool for the job."
django,2xibr1,Kraimoar,1 point,Sat Feb 28 23:32:56 2015 UTC,"Yep, that's where the file is:  mysite/templates/admin.   Also  TEMPLATE_DIRS = [os.path.join(BASE_DIR, 'templates')]   p.s. Sorry for the poor editing, I'm on mobile right now."
django,2xibr1,ccb621,-1,Sun Mar 1 04:18:42 2015 UTC,Why do you want to edit the title of the admin panel?
django,2xjnhy,jangojangojip,5,Sun Mar 1 08:10:34 2015 UTC,"Be very careful with endless pagination. Under certain common circumstances it can violate the UX principle of least surprise in a really nasty way:   Clicking on a link and then clicking the back button - this often brings you back to the beginning of a list. This is infuriating if you were on ""page 15"" and you have to scroll all the way down again. Using with flaky internet - with some endless pagination implementations, if one AJAX call to get the next page fails, it gives up. This is, again, infuriating if you are on ""page 15"" and the only way to get to 16 is by refreshing the whole page and scrolling 'down' 15 times again.   If you can't deal with #1 and #2 then non-AJAX pagination is far superior. This is also why naive implementations of endless pagination suck."
django,2xjnhy,pydry,2,Sun Mar 1 13:09:31 2015 UTC,"So much frustration with sites that insist on being fancy ""oh, you don't have to click those stupid, old links -- let me get more stuff for you"" but then dump you back to square one because you had the nerve to navigate to another page."
django,2xjnhy,Brian-Puccio,1 point,Sun Mar 1 20:40:35 2015 UTC,that's why you should update the anchor link (#) with the current pagenumber.
django,2xjnhy,gronkkk,5,Mon Mar 2 14:49:19 2015 UTC,"Because there is no need to reinvent the wheel. This works out of the box, 0 errors and I use it always: https://django-endless-pagination.readthedocs.org/en/latest/"
django,2xjnhy,shymek,2,Sun Mar 1 09:29:12 2015 UTC,"awesome, thank you"
django,2xhq85,chiproller,1 point,Sat Feb 28 20:24:40 2015 UTC,"As I understand it you want to do something like (in pseudo):  for day in days:     {{ day }}     for job_component in job_components_for_this_day:         {# output table headers #}         for job in jobs_for_this_day_and_component:             {# output row for job #}   So I think you'd need to regroup twice.  {% regroup job_list by target_drop_date|date:""Y/m/d"" as day_list %} {% for jobs_for_day in day_list %}     {# output the day #}     {{ jobs_for_day.grouper }}     {# so jobs_for_day.list is a list of jobs for this day %}     {% regroup jobs_for_day.list by component as component_day_list %}     {% for jobs_for_component_for_day in component_day_list %}         {# output the component #}         {{ jobs_for_component_for_day.grouper }}         {% for job in jobs_for_component_for_day.list %}             {# output the row for the job #}             {{ job.name }}   Alternatively, sort it all out in your get_context_data method on your JobBoardView, and pass out something like an OrderedDict of OrderedDicts."
django,2xgsa3,dougshmish,4,Sat Feb 28 15:21:59 2015 UTC,That's exactly what django is for.
django,2xgsa3,andrey_shipilov,1 point,Sat Feb 28 15:33:52 2015 UTC,"Do you know of an example or tutorial that would model this kind of functionality, which I could work through as the first step in the learning process?  I've peeked at the Tango with Django book but perhaps there is another tutorial that is more focused on the traits I described?  BTW, I haven't used reddit a lot.  Is this the proper way to respond to comments? My response is to one particular comment from andrey_shiplov, but really this comment applies to anyone in the thread.  thanks"
django,2xgsa3,SmileyChris,2,Sat Feb 28 19:04:32 2015 UTC,"Start with the tutorial in the official docs. It'll give you an understanding of the database ORM, the admin, url mapper, and forms.  There's a very helpful group on irc at #django or freenode to help with any problems you have."
django,2xgsa3,SmileyChris,1 point,Sat Feb 28 19:09:33 2015 UTC,"Great, thanks. I'll download an irc client. I guess I should I use PostgreSQL for this project?"
django,2xgsa3,SmileyChris,1 point,Sat Feb 28 20:00:52 2015 UTC,"Yes, that's probably a good idea. But you can start the tutorial with the built-in sqlite library and worry about that later 😉"
django,2xgsa3,a5myth,1 point,Sat Feb 28 20:08:06 2015 UTC,"I downloaded mIRC, signed into freenode but there wasn't a #django channel. Does that mean that no one else was signed into #django, or does it mean that I was doing something wrong?"
django,2xgsa3,a5myth,1 point,Sat Feb 28 20:17:45 2015 UTC,Something wrong. There's 500+ in the room. Think you need to register your nick with freenode to join.
django,2xgsa3,dieselpowa,1 point,Sat Feb 28 20:34:14 2015 UTC,"You could even use Sqlite3, not to say postgresql is not what would work, it would, but for a simple app like urs sqlite will be easier."
django,2xgsa3,MyMotivation,1 point,Tue Mar 3 20:25:49 2015 UTC,"Do people often download existing django apps or models to add functionality to their websites, without having to re-write code? I thought this would be common. So I half expected to be able to google something like ""users import django"" and get code that is ready to almost plug n play into my app.  However, I haven't found this to be the case. For some apps that that I have found, the differences between all the different django versions and requirements seem to make this unfeasible.  Sorry if the above question/scenario seems weird. I'm just trying to wrap my head around how people share and re-use existing apps or models.  thanks"
django,2xgsa3,dAnjou,1 point,Thu Mar 5 05:41:08 2015 UTC,"Well it's all part of the Django framework, so i feel i would benefit more by learning to do this myself than to employ a plugin."
django,2xgsa3,Destos,4,Thu Mar 5 17:05:53 2015 UTC,Pretty darn easy
django,2xgsa3,simonw,3,Sat Feb 28 15:54:29 2015 UTC,"You would do this all in the models.py of your app, you just need to plan out your databases first really."
django,2xgsa3,LeoG7,2,Sat Feb 28 16:57:02 2015 UTC,Almost trivial.
django,2xgsa3,Thirster42,1 point,Sat Feb 28 16:41:39 2015 UTC,"In-fact, I'm pretty sure I saw a Django app with these exact abilities at some point."
django,2xh5lg,Pulec,1 point,Sat Feb 28 17:29:02 2015 UTC,"Thank you sir. This is a great advice.  I had a lots of ideas from games to usable hardware stuff with micropython to ""interesting"" existing web applications but I finished only very simple stuff and didn't quite dedicated my free time to one useful thing or project yet.  Few last weeks I have been watching few Microsoft Virtual Academy courses and playing with the stuff (monkey see, monkey do) and it has been great so far, also codeacademy is quite good starting point at least for JavaScript in my situation. This studying eats a up quite some time, but its bit more rewarding then hours spent in college.  I mainly tried to learn the stuff, that I have little or no skill yet, which would help me get a better job. Don't know which job that will be yet (IBM Automation Engineer job interview tomorrow).  So I better start with something relatively simple, probably with that card app. Similarly like with Invent with Python I start from simple stuff and then build more and more complex.  Just get the job done."
django,2xh5lg,tanglisha,1 point,Sat Feb 28 20:14:30 2015 UTC,"Make your idea and put it up for people to use.  Give your users a way to send feedback, then implement the changes/suggestions they have that you like.  Going through an entire project start to end is going to teach you a lot.  It sounds like you have a sort of flash card app in mind - be sure to separate out that portion and put it on pypi as a package other people can use.  Don't worry about going too simple or easy.  Complex things start out simple :)"
django,2xh5lg,dAnjou,1 point,Sun Mar 1 11:28:35 2015 UTC,"Wow a package sounds nice, never thought about that. Thanks.  If I am able to make something good enough that would be usable I will gladly share."
django,2xgaeq,woohooigotthis,2,Sat Feb 28 10:53:55 2015 UTC,"if form.is_valid():     Todo.objects.owner = request.user     save_it = form.save(commit=False)     save_it.owner = request.user     save_it.save()   Shouldn't this be doing the trick? Right now you're saving without modifying anything after the commit = False. I might be wrong though, I don't know what   Todo.objects.owner = request.user   is actually doing.  On an unrelated subject, I'd advise you to replace render_to_response by render which doesn't need RequestContext"
django,2xgaeq,6086555,1 point,Sat Feb 28 11:39:20 2015 UTC,"A couple of things I can see:  I think for your form you want this:  if form.is_valid():     todo = form.save(commit=False)     todo.owner = request.user     todo.save()   In your other view, you could use get_object_or_404 to fetch the user, and you could throw PermissionDenied to render your 403.html template if the user isn't the owner:  from django.shortcuts import get_object_or_404 from django.core.exceptions import PermissionDenied  @login_required def single_user(request, username):     member = User.objects.get_object_or_404(username=username)      if request.user not member:         raise PermissionDenied      todos = Todo.objects.filter(owner=member)     return render_to_response('userpage.html', {'todos': todos}, context_instance=RequestContext(request))"
django,2xgaeq,bulletproofvest,1 point,Sat Feb 28 11:57:12 2015 UTC,"Yes, this worked! Thanks a lot! (and apologies for my delay in reply)"
django,2xgaeq,skolsuper,1 point,Sun Mar 1 17:12:02 2015 UTC,"I don't know about troubleshooting your exact problem, but this snippet:   if request.user == member:   will always return false, as request.user is a SimpleLazyObject. The simple hack I use for this use-case is request.user.id == member.id. The 'proper' way to do it, and the much better way if you have more complex permissions like admins and mods etc, is to use an per-object-permissions app like django-guardian.  Also I second the advice that you could use a few of django's shortcut functions to make your code more readable."
django,2xeqmy,cruisezero,5,Fri Feb 27 23:42:33 2015 UTC,There is always this one: http://www.django-rest-framework.org/tutorial/quickstart/ in case you missed it (I found it good).
django,2xeqmy,hagsteel,1 point,Sat Feb 28 00:09:50 2015 UTC,"I dont how you could miss that one but in case anyone hasn't gone through it, I'd also recommend it. It's a great introduction."
django,2xeqmy,erewok,0,Sat Feb 28 04:02:23 2015 UTC,I did see that but I was wondering if there were any others out there.
django,2xeqmy,Livesinthefuture,2,Sat Feb 28 05:21:38 2015 UTC,It's by far the best tutorial for REST Framework.
django,2xeqmy,tomchristie,2,Sat Feb 28 10:21:46 2015 UTC,There's a bunch of different tutorials linked to from here: http://www.django-rest-framework.org/topics/third-party-resources/#other-resources  Plus the official 6 part tutorial: http://www.django-rest-framework.org/tutorial/1-serialization/ And the 1 page quickstart: http://www.django-rest-framework.org/tutorial/quickstart/
django,2xeqmy,brylie,2,Mon Mar 2 11:14:15 2015 UTC,Coding for Entrepreneurs has a course covering the Django REST Framework https://www.codingforentrepreneurs.com/projects/django-rest-framework/
django,2xeqmy,zaphod_dent,1 point,Sat Feb 28 07:04:13 2015 UTC,There's an excellent chapter in RealPython pt. 3
django,2xcga8,SeanMWalker,6,Fri Feb 27 12:29:42 2015 UTC,"looking through the boto documentation I see that that boto.s3.bucket has a method called delete_keys that can remove multiple objects from s3 in one request.   in your case it might make sense to defer the actual s3 delete request for batch processing later. you could just put a boolean flag field on your ProjectImages model called ""active"" or something like that. when a user marks a file for deletion you flag the model active=False (and consequently exclude inactive models from your queries for ProjectImages everywhere you query for them). then, later, you can run a background process that finds all the inactive ProjectImages, produces a list of their s3 keys, and uses s3.bucket.delete_keys to remove them."
django,2xcga8,metaphorm,1 point,Fri Feb 27 14:50:17 2015 UTC,This is not a bad idea. I will give it a try.  Thanks!
django,2xcga8,d4rch0n,1 point,Fri Feb 27 16:21:19 2015 UTC,This is a little above my knowledge level. Do you have an example on how I can use this? I looked at some documentation and understand the concept but not sure how to implement it.
django,2xdenf,metraon,2,Fri Feb 27 17:40:32 2015 UTC,"If what you need is translations and your app needs to support multiple languages, you should probably be utilizing Django's translations framework: https://docs.djangoproject.com/en/1.7/topics/i18n/translation/  Then your model code would become:  from django.utils.translation import ugettext as _ ... class MyModel(models.Model):     ...     CHOICES = ((True, _(""Yes"")), (False, _(""No"")))     bring_this= models.NullBooleanField(choices=CHOICES, default=None)   So wrapping strings you want translated in a call to_(). You then run ./manage makemessages to generate a .po file that you then translate. But the Django docs go into much better detail."
django,2xdenf,plum_dog,1 point,Sat Feb 28 22:05:29 2015 UTC,Thanks ! That what I ended up doing. I didn't think it was possible but it works.
django,2xdenf,plum_dog,1 point,Mon Mar 2 01:03:04 2015 UTC,The translations stuff does feel a bit like magic to me sometimes. Glad it helped!
django,2xdenf,bykof,0,Mon Mar 2 21:20:06 2015 UTC,"Why you use ""yes"" or ""no"" as a choice for a boolean field?  I would rather use just a checkbox and a BooleanField."
django,2xcmbb,netscape101,3,Fri Feb 27 13:45:14 2015 UTC,I don't think you can without subclassing TemplateView and defining get_context_data like this https://docs.djangoproject.com/en/1.7/ref/class-based-views/base/#templateview
django,2xeayo,ChristosKon,3,Fri Feb 27 21:38:12 2015 UTC,on SourceLair *
django,2xeayo,rnevius,3,Fri Feb 27 21:54:29 2015 UTC,"Exactly. We don't need no SourceLair malarkey to be trying this out. Just need to run   pip install https://www.djangoproject.com/download/1.8b1/tarball/   OP, thanks for this useless post."
django,2x9lgt,thoas,3,Thu Feb 26 19:41:57 2015 UTC,Django 1.8 has official support for Postgres hstore. Seems like that's probably a better solution in most cases. But this is still good for those who aren't using Postgres or have some other reason.
django,2x9lgt,apreche,1 point,Fri Feb 27 04:11:26 2015 UTC,You are right but I don't use hstore at this moment.
django,2x9lgt,wjdp,1 point,Fri Feb 27 09:35:02 2015 UTC,I will use them in the next 1.8 :)
django,2x9lgt,jazzydag,1 point,Fri Feb 27 09:40:11 2015 UTC,Looks interesting. How long lived should you expect the data to be? i.e. Is there chance of loss?
django,2x9lgt,dalore,1 point,Fri Feb 27 02:40:48 2015 UTC,You can setup persitence on redis and it's easy to setup :)  See http://redis.io/topics/persistence
django,2x9lgt,iBlag,1 point,Fri Feb 27 09:36:41 2015 UTC,I read the README file. The examples are clear but I don't understand the use cases. When do you need to store metadata in another storage backend? When and where do you need to request these metadata in your Redis instance?
django,2x9lgt,iBlag,1 point,Fri Feb 27 07:38:19 2015 UTC,"A simple use case : if an user is following another user I want to shoot only once the email notification.  Also, I use it to generate a tiny url once for projects.   It's globally the same use cases for hstores."
django,2x7zsc,bykof,5,Thu Feb 26 10:52:27 2015 UTC,"Are you sure it needs that much effort?  100,000 rows is nothing.  I've just run a naive 100,000 row insert python script, on a completely-untuned database running as whatever comes OOTB on the Debian package.  conn = psql.connect(""dbname='testpsql'"") cur = conn.cursor() for x in range(0,100000):     cur.execute( """"""INSERT INTO Sample (Code,Description) VALUES (%s,%s)"""""", ('X',x) ) conn.commit() cur.execute( """"""SELECT COUNT(*) FROM Sample"""""" )   With this result:  $ time python pgtest.py [(100000L,)] Done  real    0m6.120s user    0m0.512s sys     0m0.340s   Now; this is a stupidly simple table, but I can't imagine that PostgreSQL slows down much with more fields per record.  Are you doing your insert in a transaction?  Are your inserts doing lookups to other tables as you go?  Are those lookups on indexed fields?  Have you got indexes on some fields you're inserting?  It can sometimes be quicker to drop indexes, insert in bulk, then recreate indexes.  100,000 rows inserted once a day just doesn't seem like it would take so much time that it would be annoying.  Even if my test is an order of magnitude out -- we're still talking a minute or so, not hours.  So it makes me think the slowness you're experiencing is coming from something other than the row quantity.  Perhaps you could tell us a bit more about the table being populated; and how you're doing it?  I'm not sure splitting it up into threads will help you -- database inserts are likely to be I/O bound, and threading doesn't really help then.  If it's not I/O bound, then that's indicative that you're making the CPU do more work than it should -- and again, threading is a bit of a sledgehammer for that nut -- find out why the CPU is doing so much for something as calculation-free as an insert.  Edit: it occurs to me that maybe you're doing some complex scientific calculation on each row as it's inserted -- would you not be better deferring that calculation?  Do your inserts fast, then run a cron-job to process that data at your leisure.  It's then much easier to divide up that work into multiple threads, or even between multiple systems by just querying for ""records that haven't been processed yet""."
django,2x7zsc,kingofthejaffacakes,1 point,Thu Feb 26 13:18:01 2015 UTC,"It is not about the inserts. It's more about creating Django Models and save them to the database from a json which I get from a server.  Here is an example:  This is what i get from the Server:      {         ""ID"": 2,         ""NAME"": ""Article1"",         ""PREIS"": 2.99     }   I parse the json to a python dict. So I have to save it like this:  article_id = response['id'] del response['id'] article, created = Article.objects.get_or_create(     id=article_id,     defaults=response )   This process of saving 100000s of them lasts really long! :("
django,2x7zsc,kingofthejaffacakes,10,Thu Feb 26 14:58:55 2015 UTC,"A couple of things occur to me then:   Unless you really need get_or_create() -- can you do without it?  You're making every INSERT do a SELECT first.  Provided you've got a unique index on the ID column, the database will do a dupe-check for you, so the SELECT is just expense. Are you wrapping these in a transaction?  Or do you have autocommit on?  Particularly, if you're forcing a commit after every INSERT, then that's going to really slow things down. I'd be surprised if Django's ORM were actually making this slow, but have you considered doing INSERTs manually to remove that as a possibility? I'm also wondering if the JSON parse is slow.  From memory, I think Python's json parser is notoriously slow.     Couldn't help myself; got interested enough to do my own test.  Bear in mind the following were on exactly the same system as the initial 6-second insert was done on.  I added this test to one of my Django project's unittests:  def test_insert_speed(self):     logger.info(""BEGIN test_insert_speed"")     for x in range(0,100000):         t, created = SomeTable.objects.get_or_create(                 code='_FAKE_CODE%d' % (x,),                 description = 'Fake description %d' % (x,)                 )     logger.info(""END test_insert_speed"")   And it was incredibly slow -- just like you're getting.  While it was going on top showed CPU at 75% in the python and 25% in postgresql.  So I added another test:  def test_sql_insert_speed(self):     logger.info(""BEGIN test_sql_insert_speed"")     cur = connection.cursor()     for x in range(0,100000):         cur.execute( """"""INSERT INTO SomeTable (Code,Description) VALUES (%s,%s)"""""",                  ('_FAKE_CODE%d' % (x,), 'Fake description %d' % (x,) ))     logger.info(""END test_sql_insert_speed"")   This completed, much quicker, with the CPU this time at 83% postgres, 17% python.  Here's the log output for the run (this wasn't the first time, so should be considered ""cache hot"")...  15:24:54 [INFO ]  BEGIN test_insert_speed 15:29:04 [INFO ]  END test_insert_speed 15:29:04 [INFO ]  BEGIN test_sql_insert_speed 15:29:23 [INFO ]  END test_sql_insert_speed   Just over four minutes for the Django-model version.  Just under 20 seconds for the raw SQL insert version (I don't know why 20 seconds in this case and 6 seconds in my previous example, maybe the string formatting).  I then changed get_or_create to just create.  15:33:45 [INFO ]  BEGIN test_insert_speed 15:35:00 [INFO ]  END test_insert_speed   About half the time... 2:15.  That is kind of expected, since we've removed half the queries (i.e. just INSERT instead of SELECT/INSERT).  My conclusion is that Django's ORM is surprisingly costly (I predicted I'd be surprised).  For fast INSERTs you should switch to using a low-level database cursor and just write SQL.  There might be more to this, so I wouldn't call this a definitive test (we'd have to delve into Django's Model class for more) -- I've not tried very hard, just enough to answer the question.  But I think it's enough to suggest that you'll get good results from a little mucking about with SQL.  In terms of cost/benefit, I'm pretty sure you'll get more from this than going to the immense effort of making a threaded version.  If your ratios are like mine, then you'll take 91% off your runtime (1 - 20/240 = .91)"
django,2x7zsc,_alexkane_,5,Thu Feb 26 15:42:05 2015 UTC,Look in to managing the transactions manually and using bulk_create
django,2x7zsc,kingofthejaffacakes,2,Thu Feb 26 15:53:37 2015 UTC,"I'm sure you're right that there are even more things that could speed it up.  Bear in mind that I wasn't going for ""optimum"", I was only really trying to demonstrate to the OP that inserting 100,000 rows shouldn't be an annoyingly expensive operation, even if you do it as naively as I did in my tests."
django,2x7zsc,_alexkane_,3,Thu Feb 26 16:00:11 2015 UTC,"Okay shame on me! I use roundabout 2 years Django and never heard of bulk_create. This function is so fundamental for my applications because I think it will speed up my import enormously!  And very big thanks to kingofthejaffacakes for the detailed research, it helped me a lot too!  So now it is on my own, how to manage the full thing :)  Again, thank you very much guys :)"
django,2x7zsc,kingofthejaffacakes,1 point,Thu Feb 26 16:22:39 2015 UTC,"Your comment was great, I actually meant to reply to the original thread."
django,2x7zsc,bobx11,1 point,Thu Feb 26 16:17:19 2015 UTC,No problem; and thank you very much.
django,2x7zsc,apreche,2,Thu Feb 26 16:53:21 2015 UTC,"Why not use an aggregate/group-by query to get data and save the updated derivative data?  I assume you are not updating 100k rows every day, or if you are just saving the same value on every record then update in place using sql or the relevant model methods."
django,2x7zsc,subconciousness,2,Thu Feb 26 12:59:31 2015 UTC,This sounds like a job for a recurring celery task.
django,2x7zsc,metaphorm,2,Thu Feb 26 20:05:14 2015 UTC,"try bulk_create, or even convert your JSON with an intermediate step to CSV and then bulk insert with LOAD DATA or similar."
django,2x7zsc,Samus_,2,Fri Feb 27 00:31:38 2015 UTC,"Python is not going to give you very good performance with threading. Its a single-threaded interpreter so the thread abstraction used in the language doesn't really access all of the hardware capabilities in the way you would expect.  if you're looking to get a speed up with concurrency I would suggest segmenting the data you import and processing each segment in a separate python process (not thread, process, meaning it has its own interpreter instance).   before you go and do anything like that though, I have to ask, have you profiled this? 100000 rows does not strike me as a particularly large data set. it might take a few minutes, but is that really a problem? what are your requirements here?"
django,2x7uvi,hueoncalifa,2,Thu Feb 26 09:31:20 2015 UTC,"I have implemented basically that exact ""demo system"" for my app. Depending on what exactly you want to do you'll probably need something different.  Users can click on a 'try this' (view for demo entries), they are automatically logged in and can click around. They get a flag in the user profile to mark them as guests. Then a cron job deletes them and their data regularly (I let the data live around 1 week, but you might want to reset everything sooner)"
django,2x7uvi,ProstetnicVogonJel,1 point,Thu Feb 26 12:01:09 2015 UTC,"Yes, this is exactly what I'm looking for. Did you find any good online resources?  Is your project open source on github?"
django,2x7uvi,ProstetnicVogonJel,2,Thu Feb 26 12:16:07 2015 UTC,"Yes, I only write open source software ;) I have linked the view and the management commands.  What you could perhaps also find useful is a middleware I wrote that generates guest users on the fly if they visit any url that matches a configurable list. The advantage of this is that you can e.g. leave the full navigation bar with all the options for all users and if an anonymous user clicks there, he will get auto logged in."
django,2x7uvi,ProstetnicVogonJel,1 point,Thu Feb 26 13:22:37 2015 UTC,"I didn't see your links, I was commenting on my phone and I didn't notice. I will totally take a look at that, thanks!  In an tangentially related point; is open source code truly compatible with startups and private companies? For example, in the case of a web application, isn't it kind of risky to take the open source route?"
django,2x7uvi,rnevius,1 point,Thu Feb 26 14:10:19 2015 UTC,"Uff, this is almost a philosophical question :)  The short answer is yes. I work for a company that does (as in make) only free and open source software, so that is definitely possible. You can probably find the long answer on other places by other people that are more eloquent than I am. But my impression is that the fears you usually read or hear about are not all real, more like a fear of a (radically) different model of doing things, since it doesn't allow you absolute control over the software (you can turn this around and make it an argument for yourself: look, we are so confident that you will want to stay with us that you could host software x yourself or with any other company)."
django,2x7uvi,ProstetnicVogonJel,1 point,Thu Feb 26 15:32:14 2015 UTC,"Is there any reason you don't just ""sandbox"" the entire thing and have a completely separate database/application for the demo?"
django,2x7uvi,rnevius,2,Thu Feb 26 10:41:09 2015 UTC,"I also thought about this approach when I needed something similar, but found that it wasn't really easy to make django route to the correct database based on session data (i.e. 'real' users go here, anonymous go there, etc.). Do you have some app or other nice solution for this?"
django,2x7uvi,rnevius,2,Thu Feb 26 13:25:56 2015 UTC,"I've used a subdomain...http://demo.myapp.com/  That has worked well for me; but I could see where there may be issues if you want the demo to happen on the same domain, and not a sub."
django,2x50xf,br05,11,Wed Feb 25 18:42:43 2015 UTC,"Noteable features / changes in 1.8:   Multiple template backends and out-of-the-box Jinja2 support.  UUIDFields, and the ability to use them as IDs Postgres-specific fields and widgets, validators, hstore support Used of database functions in query annotations Postgress 9.0 or greater only Specifying view as a string in django.conf.urls.patterns() and url() deprecated django.contrib.comments is gone   Remember back when they said that there would be no more backwards-incompatible changes? Wow is the list ever huge this time. It appears they are making a big effort to clean up a lot of cruft in anticipation of 2.0."
django,2x50xf,teilo,4,Wed Feb 25 21:42:50 2015 UTC,I don't recall them saying there would be no more backwards-incompatible changes. Django has an established deprecation path of two versions for a deprecation.
django,2x50xf,teilo,1 point,Wed Feb 25 23:54:02 2015 UTC,"It was here:  https://docs.djangoproject.com/en/1.3/releases/1.0/  and here:  https://docs.djangoproject.com/en/1.3/misc/api-stability/  With each release, this has become less and less true. With 1.8, it looks like it's pretty much ignored. I'm not complaining. As painful as it can be, I much prefer the practice of progressively cleaning up the API, and eliminating the cruft."
django,2x50xf,rspeed,4,Thu Feb 26 00:47:48 2015 UTC,"I think you're misinterpreting what that says.  In a nutshell: If you develop something that works in version 1.7, it will still work in 1.8. The catch is that it has to work in 1.7 without using any depreciated APIs. Similarly, if you have something that works in 1.8, it will still work in 1.9.  So nothing is removed that wasn't already depreciated."
django,2x50xf,ubernostrum,4,Thu Feb 26 02:48:45 2015 UTC,"The policy you link to -- from back in the days of Django 1.3 -- does not say that backwards-incompatible changes are forbidden. It does say that the process will involve providing backwards-compatible aliases for moved APIs, and deprecating to-be-removed APIs, over a multi-release period, raising warnings so you'll know about it well before anything you were using actually disappears. The only exception is when ""a bug or security hole makes it completely unavoidable"".  And as far as I can tell, we've held to that. There are APIs being removed in 1.8, but the fact that they'd be removed was announced in 1.6 and they've been doing the incrementally-louder deprecation warnings since then, for example."
django,2x50xf,teilo,1 point,Thu Feb 26 06:03:59 2015 UTC,"I see what you mean. I was referring in particular to this:   We’ll only break backwards compatibility of these APIs if a bug or security hole makes it completely unavoidable.   I read this as if the only backward-incompatible changes to the APIs would happen for bugs or security reasons.  Such a policy cannot account for changes in behavior, such as a changing return types. No way to deprecate that. It just has to break.  In any case, I notice a large number of changes in 1.8 under the miscellaneous section that I saw no reference to being deprecated in 1.6. Perhaps they were, but were not documented, or perhaps they were considered internal.  I also notice that things like the admin are not covered in the stability policy, so there's that."
django,2x50xf,Brandhor,4,Sun Mar 1 18:07:40 2015 UTC,as someone that never used jinja2 what are the advantages compared to the django templates? and will there be any differences with custom and built-in filters and tags when using another template backend?
django,2x50xf,teilo,2,Thu Feb 26 10:18:35 2015 UTC,"Template tags are specific to django-temlates. They will not work anywhere else. Each template language would have it's own method of extension. This means that you will NOT be able to directly use custom tags included with any 3rd-party apps.  Jinja2 has an extension API, but they are very difficult to implement. However, they are not really necessary in most cases, because Jinja2 includes a lot more functionality out-of-the box than does django-templates.  You can also use a regular Python function as a filter just by decorating it. The same is true of functions, which can be used in most places you would use a custom tag. So really, extending Jinja2's functionality is even easier than with django-templates."
django,2x50xf,YouAreSalty,1 point,Sun Mar 1 18:24:37 2015 UTC,"as someone that never used jinja2 what are the advantages compared to the django templates?    I have not used Jinja2, but my little google research all indicate to that Jinja2 is significantly faster than Django template engine:  http://tomforb.es/just-how-slow-are-django-templates  However, it is difficult to say, because benchmark only takes into account certain situations.  Interresting article about why instagram uses Jinja2 instead of Django:  http://www.quora.com/Why-did-Instagram-choose-Jinja2-instead-of-Django-Templates"
django,2x50xf,rnevius,1 point,Thu Feb 26 14:34:43 2015 UTC,"That's a terrible benchmark. For one thing, the tester used Jinja2 with Flask. It's not even the same framework...Django automatically does a lot more than Flask behind the scenes."
django,2x50xf,YouAreSalty,1 point,Thu Feb 26 14:53:17 2015 UTC,"As I said, it was a google research so take it with a grain of salt, but it seem to be the consensus. Regardless of it being correct or not. For that you will have to likely do the benchmark on things that matter to you."
django,2x50xf,teilo,1 point,Thu Feb 26 15:49:15 2015 UTC,"Jijna2 templates are substantially faster than Django's. This is because they are compiled into Python bytecode, either at run time, or beforehand, and cached.  However, Django Templates have made some decent speed improvements in recent versions, and even at their worst, it is rare that one's web app is bottle-necking at the template engine, especially if they are caching (as they should be).  If someone were looking at Jinja2 simply for its speed, I would counsel them to reconsider. In most cases, it's not a valid reason to switch, especially since you lose the ability to use 3rd-party custom tags."
django,2x50xf,eyeballTickler,1 point,Sun Mar 1 18:31:54 2015 UTC,Specifying view as a string in django.conf.urls.patterns() and url() deprecated   What does that mean?
django,2x50xf,zagrebelin,2,Thu Feb 26 04:22:39 2015 UTC,"urlpatterns = [     url('^$', 'app.views.IndexView') ]"
django,2x50xf,rnevius,2,Thu Feb 26 05:17:21 2015 UTC,"This is actually incorrect (or partially correct). As of 1.8, you no longer reference views as strings: https://docs.djangoproject.com/en/1.8/releases/1.8/#passing-a-string-as-view-to-url"
django,2x50xf,eyeballTickler,1 point,Thu Feb 26 06:29:06 2015 UTC,"Thanks, I didn't even know you could do that. I've been writing them without strings for a couple months now."
django,2x50xf,rnevius,1 point,Thu Feb 26 06:12:38 2015 UTC,Please see my comment above. You won't be writing them as strings in 1.8 either.
django,2x50xf,mbrochh,4,Thu Feb 26 06:29:38 2015 UTC,"Shit man. They are fast. I will struggle to upgrade my projects from 1.6 to 1.7 because of those bloody migrations, and now I even have to worry about 1.8 as well already. First world problems :)"
django,2x50xf,weffey,3,Thu Feb 26 03:16:27 2015 UTC,I hear ya. We're barely a week into having running 1.7 in production.
django,2x50xf,skolsuper,3,Thu Feb 26 05:57:36 2015 UTC,"IIRC 1.8 is a LTS (Long-Term Support) release, meaning that once you upgrade to 1.8 you can pretty much leave it as it is and get patches and security updates for a few years at least."
django,2x50xf,rnevius,2,Thu Feb 26 09:29:29 2015 UTC,"You can basically just update your URL conf, and upgrade from 1.7 to 1.8. There shouldn't be any huge breaking changes...Unless I'm simplifying your situation."
django,2x50xf,kingofthejaffacakes,3,Thu Feb 26 09:51:05 2015 UTC,"I've only recently started using Django.  I tried it out on a whim; and was so impressed that I've moved a project over to it.  I was previously running a home-rolled framework, which was as much work to maintain as the project itself.  It's a delight to be able to let the Django developers maintain the framework, rather than me :-)  That being said -- what's great about it is that, so far, I've not found anywhere (database engine supplied defaults were tricky) that I haven't been able to stick a crowbar in (without altering Django's code of course), prise open the classes, insert a new intermediate or a mixin and make the django-version compatible with the home-rolled version (I'm speaking mainly about the database, but the non-framework code was pretty easy to change over too).  I think that is a testament to the devs having built a flexible system -- it works well as it is, but doesn't prevent you from bending it to suit you, rather than vice versa.  TLDR; thanks guys -- superb work.  Hugs and kisses,  Recent Django convert"
django,2x50xf,rnevius,2,Thu Feb 26 14:43:20 2015 UTC,Were you running a home-rolled python framework?
django,2x50xf,kingofthejaffacakes,3,Thu Feb 26 14:50:46 2015 UTC,"Yes.  I'm quite pleased with myself in that looking at it now, it was obviously leaning towards doing things in a Django-like way, which might explain why I've found Django such a good fit.  That being said, compared to Django, it was completely inadequate, so there is absolutely nothing to be gained by me continuing with it (other than perhaps some misguided NIH attitude).  It's one of those things that in hind-sight, I wish I'd put the time I spent writing that into learning Django; but while I knew the name ""Django"" and kind-of what it was for, I'd never spent any serious time with it -- I should have, it would have been time well spent.  I suppose it's the curse of all engineering -- hindsight always shows you how you could have done it better.  That's all a bit beside the point -- I only really wanted to say thanks to the Django guys, it's not often that you find something that made as much of a difference as it has made to me, even discovering it late."
django,2x50xf,rnevius,1 point,Thu Feb 26 14:57:54 2015 UTC,That's awesome. Django is a wonderful thing!
django,2x50xf,new2django,6,Thu Feb 26 15:07:53 2015 UTC,If only there were an updated version of Two Scoops to go with these releases!  https://github.com/twoscoops/two-scoops-of-django-1.8  /u/jlorencetti pointed this out and should get all the credit and upvotes. :)
django,2x50xf,jlorencetti,8,Wed Feb 25 19:20:59 2015 UTC,There's hope for you. :)
django,2x50xf,new2django,5,Wed Feb 25 19:59:40 2015 UTC,!!!
django,2x50xf,rusticarchon,7,Wed Feb 25 21:01:28 2015 UTC,Yeah they stopped after people criticised them for only releasing the second edition in dead tree form.
django,2x50xf,rusticarchon,4,Wed Feb 25 20:39:43 2015 UTC,Seriously. No ebook version of Two Scoops 1.6 because piracy is a thing. When people called BS they said they wouldn't write any more of them.
django,2x50xf,new2django,2,Wed Feb 25 21:01:18 2015 UTC,That's not how the authors explain at http://twoscoopspress.com/pages/two-scoops-of-django-1-6-faq#format-1.6.
django,2x50xf,rusticarchon,1 point,Wed Feb 25 21:26:16 2015 UTC,"Yeah, but claiming that exporting their existing electronic text (I assume they're not writing by hand and sending the manuscript to a publisher to be typed) to epub and mobi is 'more difficult' than arranging the formatting, typography, printing and distribution of a physical book gets filed in the 'not very plausible' category. The only valid point they raise (that formatting of code snippets is difficult for reflowable ebook formats) could be solved by a ""formatting may be messed up"" disclaimer like lots of other technical books have."
django,2x50xf,dmpayton,11,Wed Feb 25 21:29:20 2015 UTC,"You want to talk about entitled whiny hipsters? This subthread is exactly why the authors gave up. Danny and Audry are awesome people who put a lot of work into 2SoD, only to have their work shat on by the likes of you."
django,2x50xf,pizzzzzza,9,Wed Feb 25 23:13:25 2015 UTC,"They wrote a book, and it's entirely up to them how they wish to distribute it. I don't think calling them names and insulting them is going to change their minds."
django,2x50xf,new2django,6,Wed Feb 25 21:34:01 2015 UTC,Seeing these diatribes and hatred from multiple people makes me understand why they gave up. They get my respect for going back to work even in the face of such dislike and general nastiness.
django,2x50xf,philipn,6,Wed Feb 25 22:38:43 2015 UTC,"Logged in to reddit just to downvote you. Stop shitting on other people's hard work. One of the hardest things about making things is that, no matter how much praise you get, one dickish comment from an anonymous Internet troll can still hurt. My guess is that's why they stopped: idiots like you."
django,2x50xf,jlorencetti,6,Wed Feb 25 23:00:58 2015 UTC,"Have exchanged some e-mails with Danny, he is a really nice guy!  It's their work and effort, they can distribute it in the form they want too, even as an audio book.  You can buy it or not, that's your choice, but no one have the right to be a dick and tell shit about others effort.  They both give talks, share their knowledge, distribute useful tools for free. What you have done for the community?  This attitude is what is wrong with the internet, people often confuse free speech with the right to tell bullshit about others.  Stop this hateful attitude, stop being a dick. Let's remember that behind each nickname there's a person. If you have something to say, say it in a constructive way."
django,2x50xf,rnevius,1 point,Wed Feb 25 23:10:44 2015 UTC,"And of course, someone scanned 1.6 and is distributing it online anyways."
django,2x50xf,devnullpy,-5,Thu Feb 26 00:43:30 2015 UTC,Could you sending me the link? i already have the print version
django,2x50xf,tomchristie,2,Thu Feb 26 01:59:52 2015 UTC,"Their work, their choice. End of story."
django,2x50xf,tomchristie,2,Thu Feb 26 02:38:36 2015 UTC,There's nothing ugly or draconian about it - it's a totally valid decision for them. Why such vitriolic language?
django,2x50xf,devnullpy,1 point,Wed Feb 25 22:00:27 2015 UTC,"Completely agree with you. They own the book, they can do the fuck they want with it. My company will buy it in whatever format they provide. They should do an ebook, all they are doing now is hurting their own sales."
django,2x50xf,ficiek,1 point,Wed Feb 25 22:22:37 2015 UTC,Finally an easy way to replace slow templates.
django,2x50xf,xBBTx,12,Thu Feb 26 12:01:06 2015 UTC,So you've optimized all the rest and your templates are now the bottle neck?
django,2x50xf,andrey_shipilov,1 point,Thu Feb 26 12:47:15 2015 UTC,Templates are not for logic. If that's the case.
django,2x50xf,ficiek,2,Thu Feb 26 17:01:14 2015 UTC,Of course not. I was rendering a relatively large page on Raspberry PI - Jinja 2 performed noticeably better then Django templates.
django,2x50xf,andrey_shipilov,1 point,Thu Feb 26 13:20:00 2015 UTC,"Can you share the view and the template code mate? Just as an interest, what's going on there."
django,2x50xf,YouAreSalty,1 point,Wed Feb 25 19:49:51 2015 UTC,I'm curious too. Please share if you do find out!
django,2x50xf,rspeed,1 point,Wed Feb 25 22:57:01 2015 UTC,Caching?
django,2x6dmz,jangojangojip,4,Thu Feb 26 00:33:52 2015 UTC,"This may be overkill for your application, but Django REST framework has some nice pagination functionality. You get bonus points if you use the REST (lol puns) of the framework for great good!  Alternatively, Django has some built-in pagination classes.    Good luck!"
django,2x6dmz,mrefish,3,Thu Feb 26 02:40:41 2015 UTC,"you really don't need a ""plugin"" for this. Just some AJAX"
django,2x6dmz,pemboa,2,Thu Feb 26 04:24:07 2015 UTC,"Exactly. Djando can handle pagination out of the box. In this case, it sounds like DRF and Angular are unnecessary."
django,2x6dmz,rnevius,2,Thu Feb 26 05:36:34 2015 UTC,"yeah, ive decided to put some javascript to detect the bottom of the div on scroll and then append the next 20 elements from the database with ajax  what do you think?"
django,2x6dmz,rnevius,2,Thu Feb 26 07:03:02 2015 UTC,Sounds like a great way to do it.
django,2x6dmz,mistalaba,2,Thu Feb 26 07:22:02 2015 UTC,thank you ^
django,2x6dmz,TheFrenchPoulp,1 point,Thu Feb 26 07:25:18 2015 UTC,I did a quick google search and came up with this: https://github.com/frankban/django-endless-pagination. Perhaps it's useful :)
django,2x6sch,jangojangojip,3,Thu Feb 26 02:34:09 2015 UTC,"user_questions is a list of models, and 'do you like soccer'. By default at least, a string will never be equal to a model instance."
django,2x6sch,pemboa,1 point,Thu Feb 26 03:50:22 2015 UTC,"Although you could loop through the objects in the template, you should do this processing in the view..."
django,2x6sch,rnevius,1 point,Thu Feb 26 06:38:18 2015 UTC,"also, it would be {% if not 'do you like soccer' in user_questions %}"
django,2x3sbg,nathforge,2,Wed Feb 25 12:18:56 2015 UTC,"Native English speaker based in Spain.   Looking for some part time freelance projects to get started (with freelancing). I can manage around 16 hours a week.  I have worked with people in other contents so remote is not a problem.   4 years full time Python / Django & various add on packages. I have 12 years experience as a software engineer, full stack,  mainly database applications, 8+ years of Perl and Java.   If you want a sophisticated database back end to produce complex reports, or a REST API then I am your developer.  I can do front end, but it is not my strong point. I am not the person to make it look pretty. If the content is important then I am.   A small example of my work (my main Django project is a complex in house database application, so I can't show it off).   colinsapp.herokuapp.com"
django,2x3sbg,colly_wolly,1 point,Wed Feb 25 16:16:54 2015 UTC,"NYC here. New to Django, working on a personal project, looking to hone my skills with others."
django,2x3sbg,TheConfirminator,1 point,Wed Feb 25 14:46:16 2015 UTC,"Looking for part-time freelance  Available for part-time freelance work, based in US. 3 years experience with Python, 1.5 years with Django. Work with Linux on a daily basis.   GitHub Personal Website"
django,2x3sbg,rageinside,1 point,Wed Feb 25 15:48:19 2015 UTC,"Senior PHP developer but I've been writing Python + Django after hours for my own growth and enjoyment. Interested in client services or product work. Interested in the full stack but slightly rusty but still very capable with front-end development. Highly interested in single page applications using Ember or Angular. Loves working with RESTful webservices.   Fulltime Remote, possibly onsite in the midwest Using Python + Django for personal projects over the last year. Plenty of valuable experience from the PHP world that carries over. Please message me privately for LinkedIn. Contact me for email address and/or phone #."
django,2x3sbg,envint,1 point,Thu Feb 26 04:34:30 2015 UTC,Looking to freelance full-time remotely.  I've worked as a freelancer before and have contracted for oDesk (not for others on oDesk but for oDesk itself). I've been working as a CTO at the valley based startup. I'm growing tired of the job and am thinking of contracting again. I can work part-time (8-10hr/week) for the first month for the first month and start full-time after that. I want to notify my team well in advance and help find a replacement for myself before I leave.   I'm a full-stack engineer and have designed complex systems from the group-up.   Lets PM on reddit to get started and then I can share more info like LinkedIn and email.
django,2x3sbg,lonahex,1 point,Fri Feb 27 06:31:25 2015 UTC,"Fullstack Python/Django/AngularJS dev looking for part time/full time Remote/Freelance projects. Based in Macedonia (Europe). I have 3 years professional experience leading successful startups (one funded with $2.2M, and other that became profitable after six months). List of skills:  Front-end: AngularJS, JQuery, JavaScript, Ajax, REST, Bootstrap, Less, XML, HTML5,  Back-end: Django, webapp2,  Databases: PostgreSQL, MySQL, Redis, MongoDB, SQLite  Cronjobs: Celery  Search engines: ElasticSearch  APIs: Stripe, Twillio, Facebook (Graph API), Twitter, Campaign Monitor  VCS: GIT  Testing: Unit Test  Web server: Nginx, Appache  Automated deployment: Fabric  Hosting: AWS, Heroku, Linode  Projects: https://angel.co/milanpecov"
django,2x3sbg,VolkotLos,1 point,Fri Feb 27 12:31:37 2015 UTC,"Freelancer looking for extra work I don't want anything full time as I already work at Frostburg State as their webdev, but I do want some extra work for extra cash.  I have 6 years experience in Python and Django, 10 years in Linux, 7 years in MySQL, and about a year in Postgres.  [My Site](www.jeremyspencer.me)"
django,2x3sbg,JeremyTiki,1 point,Fri Feb 27 18:10:05 2015 UTC,"Fluent English speaking Python (Django) / Angular JS developer based in Vilnius, capital of Lithuania  Looking for freelance, or full-time? 30 hours / week  Remote, or on-site? Actually, both :)  Experience with Django, Python, web technology in general. 2 Years of experience with Python (Django) and Angular JS  Link to CV/resume, or LinkedIn profile. Link to my Linkedin profile  Contact details - Reddit messaging is fine, email address is better. eimantas.stonys@gmail.com"
django,2x3sbg,Eimis_,1 point,Sat Mar 7 15:27:55 2015 UTC,"Looking for remote freelance. Based in the UK.  Available up to 15 hours a week. Tech lead with six years Django experience, decent Linux skills. Have worked for startups, large corporations, and design agencies. Experienced remote worker and scrum master.   LinkedIn GitHub email@nreynolds.co.uk"
django,2x3sbg,evilsnake,1 point,Wed Feb 25 13:37:21 2015 UTC,XPOST from the other thread since I can't read apparently.  I'm a dev looking to switch stack. Currently working full time with PHP and part time with Python / Django. Looking to go full time with Python.
django,2x3sbg,evilsnake,1 point,Wed Feb 25 13:30:37 2015 UTC,"Where are you? Are you looking for remote, or happy to relocate?"
django,2x3sbg,jlorencetti,1 point,Wed Feb 25 13:31:26 2015 UTC,"Currently living in snowy Montreal, Canada. Looking for remote or relocation, I'm really open to anything as long as I change stack!"
django,2x3sbg,rnevius,1 point,Wed Feb 25 13:39:07 2015 UTC,"I'm also looking to switch stack. But I'm not a web dev yet. :(  Currently working with Java EE with a Swing Client, but have worked with Delphi and VB6 (yes, it's still alive).  I'm studying full stack web dev in my free time. Available to help in some open source project too. :)  GitHub  Based in Brazil, hopefully moving to Ireland next year, up to relocate to Europe."
django,2x3sbg,nullslash,1 point,Wed Feb 25 13:40:19 2015 UTC,"Looking for remote part-time/freelance. USA native, based in Italy.  I'm a full-time web developer who loves building efficient and effective Django web applications.  I am available 20 hours per week to work on anything Django or PHP. You can learn more about me on my website, and see some of my recent activity on StackOverflow."
django,2x3sbg,kovak,1 point,Wed Feb 25 14:01:25 2015 UTC,"OP, you should ask people to post their resumes and emails."
django,2x3sbg,kovak,1 point,Wed Feb 25 14:14:45 2015 UTC,"Yeah, that's an idea. Don't want any hard and fast rules, happy showing suggestions though. Thanks!"
django,2x49ua,coolstorybro80,2,Wed Feb 25 15:21:51 2015 UTC,"I've spent a lot of time doing this sort of thing at work and there's no sure way of doing it programmatically.  The reason is that your source needs to specify if products are an accessory or not. If there is a clear distinction then you should be ok, but if there isn't then you're going to have a huge gap in prices for some products.  Another source for mismatching is sources that load up product names with specs. ""dell xps 13 8gb 256gb Intel i5 comes with Norton antivirus"". It' might come up with a false positive against ""toshiba satellite 15 8gb 256gb Intel i5"".  Then there are product variations with the same name. Nintendo 3ds, Nintendo 3ds xl, new Nintendo 3ds, new Nintendo 3ds xl, and then you factor in the colour choices too.  What helped me was having a model/table which stored the names of companies. That keyword helps you narrow down the product a little when using weighting in your query."
django,2x49ua,twigboy,1 point,Wed Feb 25 20:13:17 2015 UTC,"Yeah I agree with you, it is very hard to to create an algorithm which sorts articles by their names. I think if you can get more metadatas like which company and what kind of article you have there than you can build up an algorithm which sorts the articles to proper article groups. It is a big and slow process to get to really good results but hey, thats computer science :P"
django,2x49ua,bykof,1 point,Wed Feb 25 20:32:01 2015 UTC,It's insanely expensive and time consuming to update daily. Product lists average in the 10s of thousands and it's already quite slow as it grows exponentially.  Elastic search or something of the like will help a great deal.
django,2x49ua,twigboy,1 point,Wed Feb 25 20:40:25 2015 UTC,"The first things sounds very good, this is the way I would do it too! But the second way... I think I would rather search for an existing library and map the things together.  i.e:   Notebooks, PCs -> Computers Mice, Keyboards -> Periphery for Computers etc...   Your way is kind of a little bit risky because the programm could map things together which dont match. I would use a proper dictionary which knows what articles belong to which article groups.  I also work on an application which maps articles to article groups. But the mapping is a procedure by the users, because they know best which article belongs to which article group."
django,2x2ygc,nullslash,6,Wed Feb 25 05:21:11 2015 UTC,"we're working on a payment solution and actively looking for mid/sr level django developers. if you are interested in working in lovely istanbul, send your resumes to cv@paytrek.com. you can pm me if you've got any questions."
django,2x2ygc,TheSmoke,3,Wed Feb 25 10:23:59 2015 UTC,This is a great idea. Are you going to start these threads each month/week?
django,2x2ygc,honeybadgerUK,3,Wed Feb 25 16:31:40 2015 UTC,"No, I will make a thread for each quarter."
django,2x2ygc,touchthismonkey,1 point,Wed Feb 25 16:41:11 2015 UTC,This should be a sticky post!  Especially if you're going to only be doing this each quarter.
django,2x2ygc,Entrepreneurdan,1 point,Wed Feb 25 23:23:20 2015 UTC,"Sent to the mods, and got no response."
django,2x2ygc,dieselpowa,2,Thu Feb 26 02:06:55 2015 UTC,"Orange county, Irvine, CA area here.  Not actively hiring now but always looking to meet new devs for when we are."
django,2x2ygc,Entrepreneurdan,1 point,Wed Feb 25 15:29:27 2015 UTC,Any possibility for remote for at least half a year?
django,2x2ygc,dieselpowa,1 point,Wed Feb 25 16:34:57 2015 UTC,Currently no. Where are you located?
django,2x2ygc,minester,1 point,Wed Feb 25 17:10:52 2015 UTC,I'm in Chicago. Just junior/mid level dev looking for something more challenging!
django,2x2ygc,dAnjou,2,Wed Feb 25 17:18:20 2015 UTC,"Vancouver, BC, Canada enterprise startup Procurify here, looking for mid level/proficient django developer with experience in django restframework. We focus heavily on team values and aim to learn and grow together in the face of business challenges.  Message me your email or resume, full time on-site only."
django,2x2ygc,mbrochh,3,Wed Feb 25 16:55:47 2015 UTC,"Does it really make sense to look specifically for Django developers? I started a ""Django job"" and I only did the tutorial once years before that. My Python skills were decent though and I used Flask a lot. Picking up Django was fairly easy.  My point is, why not looking for clever person who have a decent understanding of Python and web stuff (HTTP etc)?"
django,2x2ygc,little_oaf,7,Wed Feb 25 11:03:47 2015 UTC,"I'm doing Django 100% full time for four years now, homing in to 5000 hours of failures and painful knowledge accumulation.  I can tell you this: If you finished the tutorial of Django, you know nothing about Django. If you read Two Scoops Of Django, you know a little bit, but after reading such a book, the bigger picture might appear in your head for a moment or two but in your every day work you won't recall that concentrated knowledge when you need it, so you will still make a ton of mistakes (or you wont get anything done because you keep trying to find passages in the book).  I know the complete Django ecosystem because I was there when it was built, I know which developers can be trusted on Github and Twitter, so I know which third party apps I can safely include in my project without causing any harm. I know whom to shoot an email if I need an opinion about a freakish software stack because I know the CTOs of at least 10 startups that run on Django.  No one, no matter how smart, will be able to pick up Django just like that and build something meaningful and complex that is supposed to be maintainable in two years time and be the backbone of your fancy little startup.  Most importantly, I have hosted free Python and Django beginner classes at Hackerspace Singapore and seen with my own eyes how fucking complex Django is and how much smart and young people struggle to wrap their heads around it. Sure. Batteries included and all. You get to Hello World easily. But from there onwards it's walking down a freaking rabbit hole that simply never ends.   I have also given paid three hour tutorials at PyCon Singapore about just one tiny detail of my Django stack. Those people were industry professionals, smart people, people who know the vocabulary, people who were eager to learn (because they paid for the lesson) - they still had a hard time keeping up (and I thought I had kept it really really simple).  I'm not saying that I'm smart. I'd probably fail every IQ test. I'm just saying that experience is worth A LOT."
django,2x2ygc,mbrochh,1 point,Wed Feb 25 15:12:37 2015 UTC,"I know the complete Django ecosystem because I was there when it was built, I know which developers can be trusted on Github and Twitter, so I know which third party apps I can safely include in my project without causing any harm. I know whom to shoot an email if I need an opinion about a freakish software stack because I know the CTOs of at least 10 startups that run on Django.   I am new to Django, and want to know which packages are generally safer and why. Is there any resource that can inform newbies on Django app selection aside from Djangopackages.com?"
django,2x2ygc,rnevius,1 point,Wed Feb 25 16:42:23 2015 UTC,"I guess djangopackages is the only ressource out there. Then there are some strong opinions that you will get frome the hive mind when you pay attention to reddit and twitter, like:   django-cms is better than Mezzanine Oskar is better than django-shop and Cartridge allauth is better than social-auth and django-registration compressor is better than pipeline easy_thumbnails is better than... I forgot the name of the other one"
django,2x2ygc,execrator,6,Thu Feb 26 02:29:37 2015 UTC,"Of course it makes sense. Although a technically proficient python programmer could pick up Django relatively quickly, an experienced django developer will know best practices, common pain points, gotchas, and will have a better understanding of the core. This is likely to save both time and money."
django,2x2ygc,rnevius,3,Wed Feb 25 12:43:32 2015 UTC,"The longer the term you're hiring someone for, the less their specific skills matter."
django,2x2ygc,willm,0,Wed Feb 25 13:38:23 2015 UTC,Obviously
django,2x2ygc,colly_wolly,1 point,Wed Feb 25 13:55:20 2015 UTC,"Both points of view have merit.   Given enough time though, it's the better developer who will be more productive, regardless of their knowledge of Django when hired. If I was hiring for a full time position, then Django would be a nice-to-have but not a requirement. For a short term contract, then Django experience would be more valuable.  To be honest though, that period where Django experience is a bonus, is probably only 3 months tops. For a 6 month contract, I wouldn't put Django experience is a requirement."
django,2x2ygc,willm,1 point,Wed Feb 25 13:35:56 2015 UTC,I am still learning things about the framework after 4 years full time use.
django,2x2ygc,colly_wolly,2,Wed Feb 25 16:29:47 2015 UTC,But I'll bet you've been proficient in it for a large part of that 4 years. You don't need to know the framework inside out to use it effectively.
django,2x2ygc,mattpavelle,2,Wed Feb 25 16:46:46 2015 UTC,"I picked up Django on the job as well 4 years ago (as an experienced developer). Look at the Django code I wrote then and look at the Django code I write now. Far more concise and cleaner, and just generally better.  Would I be correct in assuming that you don't use class based generic views? (You should be, as they are good once you get your head around them ).   Its a damn big framework and after using it for 4 years full time, I would say I know about half of the framework (going by the amount of documentation I have read)."
django,2x2ygc,plahcinski,2,Wed Feb 25 16:27:21 2015 UTC,"I've got two opportunities for Django devs (I'm a busy man):  One is a fashion startup in NYC making configurable clothing via a web app. Stack is Django, Bootstrap as the front-end framework, AngularJS (fed via Django REST framework) as the web app, also an iOS App. Hosted on AWS (Ubuntu, MySQL/RDS, Varnish, etc.).  One is a wine seller in Philadelphia doing flash type sales. Stack is being rebuilt right now in Django, Foundation as the front-end framework. Hosted on AWS (Ubuntu, MySQL/RDS, Varnish, etc.).  Full time only, remote could be ok if you can work 90% East Coast USA hours, but being in NYC or Philly is better.  Looking for experienced Django devs - 3+ years. I know it's quick to pick up, but I need people who can hit the ground running.  PM me if you're interested and qualified!"
django,2x2ygc,iamgort,1 point,Wed Feb 25 14:10:19 2015 UTC,"Always looking for a developer in Windsor,ON Canada. Will interview any Canadian willing to work at the office with varying skill levels. We're not above training if the personality fits with the team ideals.   Mostly do insurance quoting https://quote.insurancehunter.ca"
django,2x2ygc,iamgort,1 point,Wed Feb 25 14:06:09 2015 UTC,"Washington, DC area always looking for resumes.  AngularJS/Django programmers."
django,2x2ygc,tbarbugli,2,Wed Feb 25 14:47:04 2015 UTC,Are you a recruiter or an employer?
django,2x2ygc,DjangoNYC,1 point,Wed Feb 25 19:51:14 2015 UTC,Employer looking to bolster our talent.
django,2x2ygc,keninsd,1 point,Wed Feb 25 20:32:20 2015 UTC,"At Stream (current Techstars NYC batch) we are looking for talented Django developers to join the founders' team. Remote is ok, opportunity to work from Techstars office until mid-April (Manhattan).  Job listing on our blog: http://blog.getstream.io/"
django,2x2ygc,evilsnake,1 point,Thu Feb 26 04:10:15 2015 UTC,"I'm looking for a partner to build out an MVP with me (Django/Python/MySQL/Bootstrap).  Can pay cash/equity or a combination.  Freelancers welcome.  PM me if you're interested.  We're in NYC, but geography doesn't really matter as long as we can collaborate consistently and be openly communicative."
django,2x2ygc,rnevius,1 point,Wed Mar 18 00:07:29 2015 UTC,"We are a bootstrapping small company in San Diego CA. with a need for a django developer to fully convert our iOS and android code to an html5 app. Browser portion of our software was done in django/python and it seems to follow that we should continue to use the infrastructure for the project changes as we move from the mobile platforms. Other needs are adding Paypal adaptive payments and another API for a criminal background check.  Remote developer OK, PM with examples of work and availability."
django,2x2ygc,evilsnake,0,Wed Jul 15 00:31:28 2015 UTC,I'm a dev looking to switch stack. Currently working full time with PHP  and part time with Python / Django. Looking to go full time with Python.
django,2x2ygc,ShumBola,3,Wed Feb 25 13:24:26 2015 UTC,I think you meant to post in this thread
django,2x5msj,Prokinetics,1 point,Wed Feb 25 21:17:44 2015 UTC,Sorry bro if I don't really will answer your question but there is so many stuff on google.  Here is an example which will probably answer your question: http://stackoverflow.com/questions/6583877/how-to-override-and-extend-basic-django-admin-templates
django,2x5msj,bykof,1 point,Wed Feb 25 21:42:08 2015 UTC,"PS: The one important line that you should look at again is:  {% extends ""admin:admin/index.html"" %}"
django,2x5msj,bykof,1 point,Wed Feb 25 21:43:44 2015 UTC,"Could you post your template and settings.py?  Anyway, I recommend not doing this the tutorial's way, do it like this instead: admin.site.site_header = 'Polls Administration' in your admin.py. I don't think there are many cases where you have to override admin templates. For more info, see https://docs.djangoproject.com/en/1.7/ref/contrib/admin/#adminsite-objects."
django,2x5msj,CrimsonRay,1 point,Thu Feb 26 03:42:48 2015 UTC,"settings.py  This is what my tree looks like after doing some of the steps in the thread I linked to:  . ├── db.sqlite3 ├── manage.py ├── mysite │   ├── __init__.py │   ├── __init__.pyc │   ├── settings.py │   └── ... └── polls     ├── templates     │   └── admin     │       └── base_site.html     └── ...   base_site.html  I also verified that everything points at the right place, the same as the redditor did in the thread I linked to and it is."
django,2x5mn1,MyMotivation,2,Wed Feb 25 21:16:34 2015 UTC,"If you want something that is truly ""live"" than you have to set up django-rest-framework in your django application and serve your data from your database to the client by REST. Then you can use JQuery or a JavaScript Framework like AngularJS to GET your data to show the to-dos and also to POST your data to create your to-dos. Hoping I helped you with my answer :)"
django,2x5mn1,bykof,1 point,Wed Feb 25 21:22:47 2015 UTC,"Excellent, thank you. :)  What would be the alternative to not using a django-rest-framework out of interest, so something that is close to ""live"" but just using python?"
django,2x5mn1,bykof,2,Wed Feb 25 21:29:28 2015 UTC,Hm django-rest-framework is just the python way :P  Its like a plugin for Django and if you are a beginner than you can just have a look at youtube videos or several sources where you can easily set up a django project with django-rest-framework. If you want it to do really old school than you can create views that serve json and link them to the urls.py and then GET the information through JQuery or a framework you like.  If your question was based on the fact that you want to do really EVERYTHING with python and only html/css than I have to say this is going really hard because I couldn't imagine ANY way to do so. Sorry :(
django,2x5mn1,fizzgorilla,1 point,Wed Feb 25 21:39:05 2015 UTC,"If your question was based on the fact that you want to do really EVERYTHING with python and only html/css than I have to say this is going really hard because I couldn't imagine ANY way to do so. Sorry :(   Not at all, I just like asking questions and playing devil's advocate a bit."
django,2x3nfh,overthink94,3,Wed Feb 25 11:06:26 2015 UTC,This.
django,2x3nfh,rnevius,1 point,Wed Feb 25 12:58:15 2015 UTC,Shortcut https://github.com/jcalazan/ansible-django-stack  Though one should read the blog post first.
django,2x3nfh,unreal5811,0,Wed Feb 25 13:09:58 2015 UTC,All these tutorials where written with python2.7. I wanted it all to be in python3.4 that was my problem. I will definitely write a guide on how to do it with python3.4.
django,2x3nfh,rnevius,2,Wed Feb 25 17:43:48 2015 UTC,That guide isn't python 2 specific at all...
django,2x3nfh,tehyosh,3,Wed Feb 25 18:02:03 2015 UTC,"I had some problems as well following the DigitalOcean guide and it turned out to be bad configs and different commands.  My setup is for Python 3.2 and Django 1.7. I installed Python 3.2 in a virtualenv and Gunicorn was installed via pip install. The virtualenv is  located at /var/www/virtualenvs/testproject.  To install Python 3 in a virtualenv on a server that has Python 2 as the default:  virtualenv --python=`which python3` env_name   The following are my configs, maybe they will help you out.  /var/www/testproject/gunicorn.conf      command = ""/var/www/virtualenvs/testproject/bin/gunicorn""     pythonpath = ""/var/www/virtualenvs/testproject/""     bind = ""0.0.0.0:9033""     workers = 3   Make sure nginx loads your virtualhost from whatever location you want by checking out /etc/nginx/nginx.conf and look for something like:  include /etc/nginx/conf.d/*.conf;   or  include /etc/nginx/sites-enabled/*;   In my case the ""sites-enabled"" didn't exist so I had to create it and add it to the config.  My virtualhost located at /etc/nginx/sites-enabled/testproject:  server {   server_name testproject.com;    access_log /var/www/testproject/logs/access.log;   error_log /var/www/testproject/logs/error.log;    # Path to static files   root /var/www/testproject/testproj/static;    location /   {     try_files $uri @proxy_to_app;   }    location /static   {     alias /var/www/testproject/testproj/static;   }    location @proxy_to_app   {     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;     proxy_set_header Host $http_host;     proxy_redirect off;      proxy_pass http://127.0.0.1:9033;   }   }  Now to start things up for DEBUGGING purposes. If you have a virtualenv, enable it:  source /path/to/virtualenv/bin/activate   Then restart nginx to load the new config (if you changed it) and the virtualhost:  /etc/init.d/nginx restart   Then go to your project, in the location where your manage.py file is and start gunicorn in debug mode:  gunicorn --log-file=- -c /path/to/gunicorn.conf testproj.wsgi   Note here that testproj.wsgi isn't an actual file. testproj is the directory containing the wsgi.py file.  Here's the dir structure to better illustrate this  /var/www/testproject ├── testproj │  ├── __init__.py │  ├── settings.py │  ├── urls.py │  ├── wsgi.py ├── gunicorn.conf ├── logs │  ├── access.log │  └── error.log ├── manage.py └── misc_files   If gunicorn fails to start saying something about workers failing to boot make sure you enabled the virtualenv. Or try running as root.  For production I don't think it's safe to run gunicorn as root. I haven't launched the project yet so I'm not entirely clear on how to run gunicorn in a production setting.  Running gunicorn in foreground with the above command should at least tell you if nginx redirects requests to it and if there's an error maybe the error message is helpful.  I hope this hels a bit or at least gives you some extra info that you didn't have that leads to a solution. I may have messed up some paths as most of them were written by hand or modified to remove hints about the real project's name.  TLDR   Make gunicorn.conf Make virtualenv cd to project Start gunicorn with ""-c /path/to/config project.wsgi"".   disclaimer: it's late and i may have misunderstood the OP's problem completely and this post was for nothing"
django,2x3nfh,brtt3000,2,Wed Feb 25 23:29:02 2015 UTC,Meta: why is everyone being patronizing to someone trying to expand his skills?
django,2x3nfh,mbrochh,2,Wed Feb 25 18:02:04 2015 UTC,"If you can drop gunicorn for uwsgi, you can have a look at this: https://github.com/bitmazk/ansible-ubuntu-django"
django,2x3nfh,B0ZZ,2,Wed Feb 25 15:22:06 2015 UTC,This thank you for your reply. I just managed to get it all working. I will test this out too.
django,2x3nfh,joelathome,1 point,Wed Feb 25 17:33:47 2015 UTC,Can I ask you about your comment?  I landed here while trying to find info on whether or not gunicorn is still actively developed. The last updated repository they have for Ubuntu is Raring (2013). This was part of the stack that made Instagram responsive and probably one of the reasons Facebook acquired them.  Is there something wrong with the simplicity of gunicorn or am I a dummy and uwsgi is better.
django,2x3nfh,mbrochh,2,Wed Feb 25 23:38:55 2015 UTC,"Gunicorn is indeed still being developed, 19.2 was released just a few weeks ago. I would suggest always using pip to install python modules, as opposed to something like APT, as you're more likely to get the most up-to-date version of the software."
django,2x3nfh,dAnjou,1 point,Thu Feb 26 03:43:42 2015 UTC,"I'm not too sure. I have never used Gunicorn myself. When I finally made the step away from Apache/mod_wsgi I did some research and it seemed to me as if more people were using uwsgi, so I just sticked to that."
django,2x3nfh,zettabyte,1 point,Thu Feb 26 02:24:23 2015 UTC,"It's key to really understand how things work!  Ready tutorials and copy&pasting configurations doesn't cut it. Read about TCP/IP, HTTP and WSGI."
django,2x3nfh,dAnjou,1 point,Wed Feb 25 12:14:05 2015 UTC,"Set up your stack locally (not running Linux?  Tsk tsk.  Install VirtualBox and a VM).  If you can do it locally, that will help with understanding all of the moving parts.  Which should, in turn, should help with deploying whatever box DigitalOcean is putting you in."
django,2x3nfh,rnevius,0,Wed Feb 25 13:23:21 2015 UTC,All these tutorials where written with python2.7. I wanted it all to be in python3.4 that was my problem. I will definitely write a guide on how to do it with python3.4.
django,2x3nfh,aliteralmind,1 point,Wed Feb 25 17:35:17 2015 UTC,When it comes to deploying your app it doesn't matter at all whether it is written in Python 2.* or 3.*.
