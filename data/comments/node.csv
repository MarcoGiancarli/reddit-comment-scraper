node,3e3s9o,ryan4888,7,Tue Jul 21 19:03:17 2015 UTC,What is your system? OSX?  after you fix permission you may still need to do  sudo npm cache clean  in order to clean up your cache
node,3e3s9o,TheAlphaNerd,4,Tue Jul 21 23:09:48 2015 UTC,You're the winner. Reinstalled node from the default installer and ran this command. For whatever reason this worked.
node,3e3s9o,TheAlphaNerd,11,Tue Jul 21 23:17:09 2015 UTC,when you npm install with sudo all the files in the cache end up being owned by root. When you then later try to npm install you don't have permission to access those files :(  sudo npm cache clean will blow away the cache and make sure that everything is owned by the correct user
node,3e3s9o,aeflash,4,Tue Jul 21 23:22:31 2015 UTC,Feel free to go answer my question on stackoverflow if you have an account. I'll mark it as the correct answer for you.
node,3e3s9o,aeflash,3,Tue Jul 21 23:33:43 2015 UTC,Thank you! You solved a day long frustration.
node,3e3s9o,chrwei,5,Tue Jul 21 23:28:38 2015 UTC,"sudo chmod -R a+w /usr/local/lib/node_modules/   Give yourself write access to node-modules, so you can install stuff without sudo.  The other thing to try is sudo chown -R $USER ~/.npm  in case sudo npm install created files and dirs owned by root in your user's npm cache."
node,3e3s9o,chrwei,1 point,Tue Jul 21 20:42:20 2015 UTC,Still throws the same errors. Thanks for the effort though.
node,3e3s9o,akula07,1 point,Tue Jul 21 21:02:18 2015 UTC,There was an error above -- what about sudo chown -R $USER ~/.npm?
node,3e3s9o,deliciousleopard,1 point,Tue Jul 21 23:50:57 2015 UTC,are you out of disk space?  filesystem get remounted read only for some reason?  can you manually create files in that folder?  there's only a few things that can cause permissions errors.
node,3e3s9o,deliciousleopard,1 point,Tue Jul 21 20:03:25 2015 UTC,"I'm not out of diskspace. If I do npm install yo, it works fine. But for some reason if I add -g, so its npm install -g yo it fails and starts throwing errors."
node,3e3s9o,TheAlphaNerd,1 point,Tue Jul 21 20:14:39 2015 UTC,"if ""works without -g"" is your only test?  are you sure you have plenty of space on /usr?"
node,3e3s9o,deliciousleopard,-2,Tue Jul 21 20:17:53 2015 UTC,-g installs globally...i.e. system wide....which means you need to be root to run it. If you have root privileges you can run: sudo npm install yo -g
node,3e3s9o,tortus,1 point,Tue Jul 21 20:31:51 2015 UTC,When I use sudo it still throws the errors.
node,3e3s9o,a0viedo,1 point,Tue Jul 21 20:34:50 2015 UTC,how did you install node? via homebrew?
node,3e3s9o,deliciousleopard,1 point,Tue Jul 21 20:04:34 2015 UTC,Literally went to the Node website and downloaded the installer.
node,3e3s9o,kafoso,2,Tue Jul 21 20:11:53 2015 UTC,fuck that. uninstall it and go this route instead: http://brew.sh
node,3e3s9o,elijahwright,3,Tue Jul 21 21:56:39 2015 UTC,I'm more a fan of nvm personally
node,3e3s9o,Jakobud,1 point,Tue Jul 21 23:08:40 2015 UTC,"nvm is also available via homebrew, so all would be good."
node,3e2efp,modoak,3,Tue Jul 21 12:54:01 2015 UTC,"This isn't the first, but it is the only node module with complete Giphy API support. It is also very well tested!"
node,3e2efp,onedr0p,4,Tue Jul 21 12:54:56 2015 UTC,"Good work, may I suggest using promises (like bluebird) instead of callbacks?"
node,3e2efp,onedr0p,2,Tue Jul 21 14:01:53 2015 UTC,Thanks. I'll look into implementing that. PR's are welcome too!
node,3e2efp,bro-away-,2,Tue Jul 21 15:16:27 2015 UTC,"The only down side to using promises on a small module is that if someone else is using a different promise library, then they might not be compatible."
node,3e2efp,PlNG,1 point,Tue Jul 21 15:24:15 2015 UTC,"All that is taken care of when the developer runsnpm install just add it to you package.json as a dependency.  ""dependencies"": {     ""bluebird"": ""^2.9.33"", },"
node,3e2efp,TheNiXXeD,4,Tue Jul 21 15:47:58 2015 UTC,"That's not what he's talking about.    He's talking about the incompatibility between them.  It's the same reason why not many libraries use fibers.  If you want the fiber version, just wrap it yourself.  IMO, ship a plain callback based library and let people promisify themselves.  Anything else is chaos AND, more importantly, not compatible with async/await."
node,3e1xnl,itsmoirob,1 point,Tue Jul 21 09:28:13 2015 UTC,"I have never used AWS (prefer Digital Ocean VPS's) but I have used the cron module with the request module plenty of times for my scheduled tasks. Essentially, just create a module, require it in the cron job, and call the method you need. I usually set it up so the cron is on a different machine, since I use it for a second set of ""is it up"" tools."
node,3e1xnl,losingthefight,1 point,Tue Jul 21 10:18:33 2015 UTC,"Thanks for that.   So far I have   var http = require('http'); var CronJob = require('cron').CronJob; new CronJob('*/1 * * * *', function() {   var options = {       host: 'my-website-name.elasticbeanstalk.com',       path: '/api/testCron'   };   http.request(options).end(); }, null, true, 'UTC');   I was thinking, if I needed to do two (or more) cronjobs, that have the same interval (in this case one minute) should i duplicate the code above, or put a the ""options"" in a loop?  var http = require('http'); var CronJob = require('cron').CronJob; new CronJob('*/1 * * * *', function() {   var options = {       host: 'my-website-name.elasticbeanstalk.com',       path: '/api/testCron?=1'   };   http.request(options).end(); }, null, true, 'UTC');  new CronJob('*/1 * * * *', function() {   var options = {       host: 'my-website-name.elasticbeanstalk.com',       path: '/api/testCron?=2'   };   http.request(options).end(); }, null, true, 'UTC');   Or like this  var http = require('http'); var CronJob = require('cron').CronJob; new CronJob('*/1 * * * *', function() {   var options1 = {       host: 'my-website-name.elasticbeanstalk.com',       path: '/api/testCron'   };   var options2 = {       host: 'my-website-name.elasticbeanstalk.com',       path: '/api/testCron?=2'   http.request(options1, options2).end(); }, null, true, 'UTC');   or something different like this  var http = require('http'); var CronJob = require('cron').CronJob; new CronJob('*/1 * * * *', function() {   for(i=1;i<=2;i++) {     var options = {         host: 'my-website-name.elasticbeanstalk.com',         path: '/api/testCron?='+i     };     http.request(options).end();   } }, null, true, 'UTC');"
node,3e1xnl,losingthefight,1 point,Tue Jul 21 12:55:27 2015 UTC,"Think DRY, or Don't Repeat Yourself. Consider how you would scale it from two to three if you needed two. What would make that easy even if you never have to do it."
node,3e1xnl,TaxExempt,1 point,Tue Jul 21 15:01:42 2015 UTC,"I am going to have to disagree with /u/nexd  I would put them in separate jobs for two main reasons. First, what if you don't always want them to go off at the same time? Maybe, due to resources or changing requirements, you have them go one at even seconds and one at odd?   Second, what if you need to put them on separate hosts?  For your use case, it probably doesn't matter, but for bigger systems, I prefer to break things out so I can move and tweak them as needed. Just my two cents."
node,3e1xnl,runvnc,1 point,Tue Jul 21 16:17:11 2015 UTC,You can most likely use whatever OS's job scheduler to launch you node script.
node,3dyqw2,yaronn01,2,Mon Jul 20 16:58:03 2015 UTC,Haha.  Nice.  But do you know how to swim?
node,3e0k6b,brianthetechguy,1 point,Tue Jul 21 00:57:22 2015 UTC,"If anybody has any questions, comments, feedback, etc. we'd love it."
node,3e0k6b,MunchGamer,1 point,Tue Jul 21 01:07:28 2015 UTC,"Other TLC author here-  I also like using TLC for deferred event handling on the client:  $('body').on('click', '[data-click]', function(event){     e.preventDefault();     tlc.run($(this),event,{'tlcAttr':'data-click'}); });"
node,3e0k6b,actuallyAPoopThought,1 point,Tue Jul 21 01:08:56 2015 UTC,What's isomorphic development?
node,3e0k6b,MunchGamer,1 point,Tue Jul 21 04:25:46 2015 UTC,JavaScript that runs on the server and on the browser
node,3e0k6b,virdvip,1 point,Tue Jul 21 05:47:06 2015 UTC,"Isomorphic might seem like a complicated concept - but it's really powerful especially for SEO.  True isomorphic apps can recycle display logic on both server and client. Render the first ""page"" on the server, then render all links as either ajax data loads (best user experience), OR as hrefs (best SEO/linkability)."
node,3e0k6b,MunchGamer,1 point,Tue Jul 21 17:16:48 2015 UTC,"Performing operations on variables using tags. Yep, I've seen it earlier in coldfusion.  https://en.wikipedia.org/wiki/ColdFusion_Markup_Language  <cfexecute name=""C:\\winNT\\System32\\netstat.exe"" arguments=""-e"" outputfile=""C:\\Temp\\out.txt"" timeout=""1"" /> Similar?  IMO I like discover such projects but there is one simple argument not to use it.  javascript -> TLC/coldfusion/etc more code.  javascript -> coffeescript/typescript/livescript/even closurescript less code.  less code (of course not APL) - better readability, less debug time due larger field of view in my editor. Even J is good but sacrifices some readability. So I think tag oriented languages need some really good pros for wide use."
node,3e13mn,-killertofu,1 point,Tue Jul 21 03:38:55 2015 UTC,http://www.amazon.com/gp/product/B00B97Y4BY http://devdocs.io/
node,3e13mn,ockhams-razor,1 point,Tue Jul 21 16:21:13 2015 UTC,"Thanks, I've been avoiding that book since it hasn't been updated since 2013. Although I may check it out since I imagine a good chunk of it will still be applicable. Also the socket.io documentation is notoriously bad, doesn't mention some of the features."
node,3e13mn,ockhams-razor,1 point,Tue Jul 21 20:05:29 2015 UTC,"I agree, there's not a ton of docs because it's really just a websocket interface for node.  Now, take this with a grain of salt, I've spend the last 2 weeks working on socket.io.    I have over 18 years experience with programming and i'm currently applying those skillz to socket.io."
node,3e1x5x,katy2015,1 point,Tue Jul 21 09:21:59 2015 UTC,"I'm about to KO so if you end up replying I'll be asleep by then but:  Ok assuming you set up your variable server correctly:  server.listen(8000, function() {});   as you can see the second parameter must be a callback not a string.  Now when your running that on your computer the IP is localhost:8000 or 127.0.0.1:8000. Now I'm assuming you want to connect from let's say your phone or something what you want to do is get your laptops's ip address:  I'm a windows user so hopefully you're using windows, but if not just look it up for whatever you're using.  1.Open Command Prompt 2. Enter the following and press enter:  ipconfig /all | find /i ""Ip""  either next to IPv4 or IPv6 you should see your local ip address now you can connect from your other devices via that ip address which should be something like 192.168.1.10:8000"
node,3e1x5x,eorroe,1 point,Tue Jul 21 10:31:05 2015 UTC,Start a server on the server w the ip you want to listen and forward all to your actual server maybe?
node,3e17un,melancholical,2,Tue Jul 21 04:18:50 2015 UTC,"I'm not sure if i correctly understand your problem, and my knowledge of node and programming is still quite basic, but i'll share my thought about a message buffer.  What about a service running postal js (https://github.com/postaljs/postal.js)?   Different applications or clients could write there and subscribe to channels.  I'm also thinking about pairing this setup with http://senecajs.org/"
node,3e17un,trebh,2,Tue Jul 21 08:04:53 2015 UTC,Use streams.  For multiprocess maybe cluster module?  Also see webworker-threads.  Other than that maybe you could actually share and lock/unlock a buffer in a C++ addon.  Whats wrong with message queues though?  Zmq is lightweight I think.
node,3e17un,runvnc,1 point,Tue Jul 21 08:14:44 2015 UTC,"It will eventually go to ""built-in queue msg"" in consumer( or producer) maybe"
node,3dxuoo,paperelectron,1 point,Mon Jul 20 12:45:11 2015 UTC,This looks awesome.
node,3dxuoo,Quietlike,1 point,Tue Jul 21 12:35:17 2015 UTC,"Thanks! Its really just a culmination of the way I have been building express apps for the past 2 years or so. I wanted a way to remove all of the boilerplate I was putting into every application I wrote.  The version on NPM right now has a slightly different file structure than the version represented in the docs. You don't have to define the mount path for your routes any more, it derives it from the autoloader as it requires them. so ./routes/index.js would map to '/' and ./user/list.js would map to '/user/list'. You can of course override this, by just defining routes in the standard express fashion, but you would have to do it from the index file, or from an index file in a subdirectory in the ./routes/ directory.  Anyway, thanks for the feedback, I have been working on getting the docs updated to reflect the recent changes for the past few days."
node,3dxuoo,Capaj,0,Tue Jul 21 12:59:01 2015 UTC,I don't really see DI useful for Javascript. Manual orchestration is just as easy in JS so the amount of work saved is minimal.
node,3dzcs9,ashmoney12,2,Mon Jul 20 19:30:51 2015 UTC,Do you have code or examples?
node,3dzcs9,jstuartmill,1 point,Mon Jul 20 19:37:40 2015 UTC,"well i tried using the tutorial from the npm page for hapi-auth-basic but no matter what when i log in it says not a valid bcrypt hash  EDIT: i basically have a running hapi server, not really anything else"
node,3dzcs9,jstuartmill,1 point,Mon Jul 20 19:53:00 2015 UTC,I would recommend Blankie: https://github.com/nlf/blankie. You should be able to set route by route policies with this. Without code I can help much besides offering modules.
node,3dzcs9,saulorama,1 point,Tue Jul 21 04:21:15 2015 UTC,"var users = {     admin: {         id: 'admin',         password: 'pass',         name: 'Admin Account'     } }    var validate = function (request, session, callback) {      var user = users[username];     if (!user) {         return callback(null, false);     }  console.log(""here"");  return callback(null, true, request.auth.credentials); };   var Cookie = require('hapi-auth-cookie');  server.register(Cookie, function (err) { });  server.auth.strategy('cookiemonster', 'cookie', {     password: 'secret',     cookie: 'maincookie',     ttl: 1000,     validateFunc: validate });    server.route({      method: 'GET',     path: '/admin',     config: {          auth: 'cookiemonster',        },     handler: function (request, reply) {console.log(""here"");             var creds = request.auth.credentials;             console.log( ""creds"" +creds);             request.auth.session.clear();             request.auth.sesssion.set(creds);             return reply.file('/static/admin.html');     }       });"
node,3dyhd4,Ncksllvn,3,Mon Jul 20 15:50:44 2015 UTC,"My suggestion is to just stick with Node. That's because most NPM packages are probably going to work 100% with it. io.js does have more ES6 features, so if that's something you want to play with, go for it.  Honestly, I would say it doesn't matter either way. Just pick one, install it, and go with it. When they merge, I'm sure it'll be quick an easy to move to that version."
node,3dyhd4,jchmura,4,Mon Jul 20 16:43:45 2015 UTC,You can also use babel to get most of the ES6 features in NodeJS.
node,3dyhd4,IllegalThings,1 point,Mon Jul 20 16:49:41 2015 UTC,"Great point, yes you can."
node,3dyhd4,jchmura,1 point,Mon Jul 20 16:51:33 2015 UTC,Do we know when they will merge?
node,3dy5wc,sdawson26,5,Mon Jul 20 14:24:39 2015 UTC,"I'm still kinda new to node ... is node's stack different than most languages?    usually reducing the max stack doens't actually reduce ram usage, it just crashes your program if there's not enough, preventing a runaway.  you need to quantify what's making it slow. is it locking the data making things wait?  are you maxing out disks?  maxing out ram?  maxing out CPU?  these are a good start for the OS itself.    then, adjust code to alleviate. maybe process in smaller chunks, or add delays to artificially slow it down and let production catch up, or even move the task to another server.  sometimes even pulling the data to another database, processing, and pushing the updates back is what's needed."
node,3dy5wc,chrwei,2,Mon Jul 20 15:20:36 2015 UTC,"I'm still kinda new to this kind of programming, so I'm not sure what the comparison is to other languages other than the ""single threaded"" thing we deal with in node vs PHP.  I'm maxing out the RAM. It climbs to about 97% usage when these processes are fired. I think artificially slowing it down is probably my best bet. I'll look further into that and post back here if I'm successful with it. Thanks!"
node,3dz3rz,phragg,4,Mon Jul 20 18:27:01 2015 UTC,"Just a very shallow code review with some pointers (didn't have a lot of time, sorry)   Get rid of node_modules in git, your package.json file will contain all the needed info to restore this dir. Same goes for public/vendor, this is contained by your bower.json file start your js files with ""use strict""; -> see why at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode check out use jscs  and jshint to enforce coding standards in your projects try to add some data validation, https://github.com/ctavan/express-validator contains some easy to use middleware for express   To answer some of your questions:   does express have any way to separate the logic from the routes? such as a MVC method?   Check  the mvc example in https://github.com/strongloop/express/tree/master/examples  how could I remove all the db calls so I use a more DRY principle?   create a model that will interact with your db, the example above should point you in the right direction"
node,3dz3rz,soIheard,1 point,Mon Jul 20 21:44:02 2015 UTC,"d'oh meant to get rid of node_modules a while back, something wonky happened when I was setting up the project.  Thanks for the other resources, I'll see to implementing them"
node,3dz3rz,drunk-giraffe,2,Tue Jul 21 02:12:23 2015 UTC,"Hey all, having gone through the basic nodeschool tutorial I am still relatively new to NodeJS. I figured no better way to learn a language than to dive into creating a quick little project.  This project is still in progress as there a couple things left to implement.  Feel free to look over the code, let me know what you think I could be doing different/better.  A couple questions that I have:   does express have any way to separate the logic from the routes? such as a MVC method? how could I remove all the db calls so I use a more DRY principle thoughts on integrating AngularJS as part of the ""MEAN"" stack? any files you think I should remove or modify my .gitignore to? (i know node_modules is pretty useless to include)   Thanks!"
node,3dz3rz,chiminage,2,Mon Jul 20 18:30:48 2015 UTC,does express have any way to separate the logic from the routes? such as a MVC method?   If you just want to separate your routes from the actual logic: route seperation. Basically you end up with a list of routes where you specify any middleware and the target method/function for that route.   how could I remove all the db calls so I use a more DRY principle   Check out mongoosejs. Essentially you access the db through your models. I think a good example would be to check out the source code for MEAN.io.
node,3dz3rz,DrCorporate,2,Mon Jul 20 23:50:13 2015 UTC,"Cool...from what I have been hearing is that you might want to replace your Mongo DB with something like Rethink, Couch, or PostgreSQL. Mongo looses data and is not very reliable.  Edit: if Im going to get downvoted...can you please explain why so I can learn something?"
node,3dz3rz,chiminage,2,Mon Jul 20 19:29:45 2015 UTC,"Not sure who down-voted without saying why, however, I have heard recently that MongoDB is as unreliable as you had said.  I'm thinking about moving towards PostgreSQL"
node,3dz3rz,addmoreice,1 point,Mon Jul 20 20:53:14 2015 UTC,"You are being downvoted because of baseless assumptions and no source to back it up.   Mongo looses data and is not very reliable.   Anything can loose data and nothing is truly ""reliable""."
node,3dwm7p,ClassicTeddyBear,-6,Mon Jul 20 03:34:11 2015 UTC,"had me interested up until   typed functional languages will, without a doubt, be the best place to code in the style presented by this book   get real. the whole nodejs revolution is a counter reaction to typed languages. typing is for university neck beards who prefer purity and correctness over pragmatism. I've yet to make a single mistake that was due to say my list of strings being a list of integers. it just doesn't happen often enough to warrant the tediousness of typing. let go and be productive instead."
node,3dwm7p,LovelyKarl,4,Mon Jul 20 09:10:03 2015 UTC,"I've yet to make a single mistake that was due to say my list of strings being a list of integers.   I am calling bullshit on this.  I work professionally writing PHP and Javascript, both untyped languages. I make type mistakes and so do all my colleagues. Either you're lying or you haven't done a serious amount of programming.  Try picking up a types language like Go and you'll be amazed how much easier it is to write code when you've got types on your side..."
node,3dwm7p,swedglish,1 point,Mon Jul 20 09:25:46 2015 UTC,"TypeScript. Great sugar on top of JavaScript. Saved us a ton of work in our Company. Especially with more complex JSON objects it has been a great help. No more figuring out is it ""object.something"" or ""object.somethingElse"" because the compiler catches these when compiling form TS to JS."
node,3dwm7p,LovelyKarl,2,Mon Jul 20 10:40:59 2015 UTC,"lol. I've got 18 years professional experience of which 12 were Java (and yes, I was seriously into type templates). last 6 years browser JavaScript. node and now coffeescript. call as much bs you want. typed languages just aren't as productive."
node,3dwm7p,nschubach,2,Mon Jul 20 11:20:36 2015 UTC,"I've been developing since the early 80s and I'm right there with you on typing.  I understand why some people like it, but I really haven't had any serious issues with JavaScript not having any signifigant typing.  The only thing that bothers me from time to time is other devs using nulls as some sort of flag to determine logic.  I generally skip null altogether and rely on values being either assigned or undefined."
node,3dwm7p,LovelyKarl,1 point,Mon Jul 20 11:51:29 2015 UTC,yes. i'm totally with you there. i like falsey/truthy. but making a difference between undefined and null. not sure that's helpful.
node,3dwm7p,mrahh,1 point,Mon Jul 20 12:05:28 2015 UTC,"It's not just about safety, it's about maintainability. I see typed functional languages like building a PC; you can't mess up because the pieces won't fit together unless they're meant to, and if you do mess up, its a logical error like putting your two sticks of memory in slots 3 and 4 instead of 1 and 2.   Working with JavaScript is without a doubt faster and you can maybe get things done faster, but its very much at the expense of maintainability and confidence that it will always work. It's like trying to connect your PC components by soldering loose wires from connector to connector on all the pieces.   I've been working with Elm recently and its slow to get into the right mindset, but I have complete confidence that when the time comes to refactor the code, it will be a walk in the park and there won't be any errors except maybe syntactical or logical - but those will be immediately caught by the compiler. Hate on types all you want, but I get real tired of adding something like if(typeof  x !== 'String'){ // deal with the mistake }"
node,3dy755,elekaton,1 point,Mon Jul 20 14:34:06 2015 UTC,"Excellent, every time I need something like this, I end up scrapping Perl's CPAN Locale-Country module :  All Country Codes (alpha-2 and alpha-3) expressed in all possible languages.  [edit] it's made of Colon Separated Values but can easily be crunched into JSON"
node,3dy755,tobozo,1 point,Mon Jul 20 14:46:55 2015 UTC,This is also helpful: https://github.com/substack/provinces
node,3dwy9y,sachinrjoglekar,1 point,Mon Jul 20 05:38:39 2015 UTC,"This is excellent. It's straightforward and gives me exactly the info I expected to receive. Have you experimented with running multiple instances of the same node socket.io server and using sticky sessions in nginx to balance them? I'm going to be trying that soon for an upcoming project, and I wonder how well it works in practice."
node,3dwy9y,bschwind,1 point,Tue Jul 21 04:06:07 2015 UTC,"My application doesn't really necessitate the use of sticky sessions, frankly. So I just use least-connections as a method for load-balancing between multiple (but identical) server instances. And since we are in a development phase right now, performance is something we will gauge soon :-). In any case though, I love Nginx for its ease of configuration!"
