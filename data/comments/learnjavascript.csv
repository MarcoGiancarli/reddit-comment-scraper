learnjavascript,3e4dpn,giscard78,12,Tue Jul 21 21:31:55 2015 UTC,"I do that, but I'm fifty five years old. Excuse me a minute while I shovel more coal into my computer's boiler.   Where was I? Oh, printing code! I have a fountain pen filled with red ink for marking the bugs :-)"
learnjavascript,3e4dpn,AlanCrowe,4,Tue Jul 21 22:51:24 2015 UTC,"My work colleague has done this. He's mid thirties.  I think the only time I ever printed out code was to analyze a project I was taking over to get familiar with the authors style and project layout, and found it easier than using a big honking laptop on a plane.  On the one hand I rely on color syntax highlighting to speed up the eye (function, property, loop) and draw focus to what's relevant. And potentially highlight errors.  But honestly most of us whiteboard quite often and I don't think it's weird to want to look at something off screen for a better perspective at all."
learnjavascript,3e4dpn,Raijuu,2,Wed Jul 22 00:27:21 2015 UTC,"I do this all the time.  It's especially useful when I'm trying to rewrite code, because I find it's easier to spot patterns that can be  reduced to a function.  I also do it when my code gets too long.  If I've written 10,000 lines of something I'll print it out (four 'pages' per sheet) to help trace through it or put postits on things.  Paging through assembly language or complex code like a regular expression parser isn't easy on-screen only.  I could probably eliminate that with a modern editor, but I've been using 'vi' for everything for about twenty years.  :)  Heck, I even wrote my thesis and part of a book (using DocBook) with vi."
learnjavascript,3e4dpn,7fb2adfb45bafcc01c80,1 point,Wed Jul 22 05:57:24 2015 UTC,"I whiteboard all the time for GIS tasks all the time but they're usually more complex than my single sheet of JavaScript with eight functions and a couple of variables. I think explaining what I trying to do has been helpful, I feel like I don't see a lot of comments to either talk something out."
learnjavascript,3e4dpn,BBQLays,2,Wed Jul 22 00:41:15 2015 UTC,A guy on my team regularly did this. He just retired 2 weeks ago.
learnjavascript,3e4dpn,cport1,2,Tue Jul 21 23:51:50 2015 UTC,I almost always write out my functions with a pencil... I think it dates back to grade school and writing out each detail of my math problems.
learnjavascript,3e4dpn,Lucius_Veratius,2,Tue Jul 21 23:53:51 2015 UTC,I print it out if I want to mull it over while I'm walking to my car.  Easier than walking with my laptop out.
learnjavascript,3e4dpn,99AFCC,2,Wed Jul 22 01:55:49 2015 UTC,"I print out code that I really want to get to know well. I too, use a red pen for marking."
learnjavascript,3e4dpn,guohuade,1 point,Wed Jul 22 02:23:08 2015 UTC,"Nothing abnormal about printing out code, especially if its large and not changing too much."
learnjavascript,3e4dpn,xbrandnew99,1 point,Wed Jul 22 01:41:00 2015 UTC,"Large, really? I would have thought the opposite or /s?"
learnjavascript,3e4dpn,sonofabullet,1 point,Wed Jul 22 02:38:26 2015 UTC,"I actually just did this for a project I've undertaken - basic front end redesign of a website. I printed out the html and JS. Next, I taped the few pages of html vertically lined up on my wall. Then I, scissor in hand, cut out the javascript specific to a section or element of html and taped it right next to that part of the html doc. This made it much easier to visualize the functionality of the site all at once, and provided a means of separating tasks - tonight, I'll debug/get done these 3 sections of javascript."
learnjavascript,3e6amw,translunar_injection,2,Wed Jul 22 07:47:18 2015 UTC,"Couple of thoughts:   learn by doing and reading code a lot of OOP production code is a mess book tips if you're in business software: Fowler PoEAA, Gang of Four design patterns, Evans DDD, Uncle Bob Patterns, Principles, Practices of Agile software development"
learnjavascript,3e619b,moonsout_goonsout,1 point,Wed Jul 22 05:53:38 2015 UTC,Is this just a question about getting user input? There are tons of ways you can do that with JavaScript. I can't really be more specific unless you clarify on what you're trying to accomplish.  Here is an extremely simple example of getting user input: JSFiddle
learnjavascript,3e619b,happy_dev,1 point,Wed Jul 22 06:07:43 2015 UTC,"So, how would you run that from an HTML page without it being a JS popup? Forgive my ignorance if this is an incredibly simple thing. Your coding does make sense to me, I'm just wondering if you can do that, but using JS through HTML... If that makes sense."
learnjavascript,3e619b,happy_dev,3,Wed Jul 22 06:25:57 2015 UTC,"Sure there is, I'm just not sure how much JS you know. Here is a simple example of how you can use an input element to get user input.   Let me know if there is anything in the code you don't understand. I use document.getElementById() to get elements from the DOM, and then I added a click listener to the button so that a function will run whenever the button is clicked on.  If there are things that look new to you, I'd recommend you look into basic DOM manipulation techniques and creating event listeners with JS."
learnjavascript,3e3bn4,DimitriMikadze,2,Tue Jul 21 17:10:49 2015 UTC,"Hmm... I've been looking for something as feature complete as slick.js but without jQuery, but this does not seem to be quite there as far as features yet."
learnjavascript,3e3bn4,MahdiM,2,Tue Jul 21 18:22:11 2015 UTC,"madloba, gaixare"
learnjavascript,3e4ubn,ecopally,2,Tue Jul 21 23:36:44 2015 UTC,"I see the culprit:  Warrior.prototype.name = function(n) ...   (""Albert"" is .n , from name it would be .name(), name itself is a function)"
learnjavascript,3e4ubn,senocular,1 point,Tue Jul 21 23:56:52 2015 UTC,Thanks!
learnjavascript,3e2uqf,tunabee,1 point,Tue Jul 21 15:11:44 2015 UTC,"You create the var val in the loop, but that var is scoped to the addEventHandlers function which is called only once.  This means that var is created only once, and each time you create a listener for a button, each of those closures will reference that same, single var.  As one var it changes value in the loop and what each listener ends up referencing when a button is clicked is the last value assigned to val.  There are a couple of ways to handle this. You can assign the value of val in the loop to the button and reference it from the button in the listener. Or you can encapsulate val var in another function - one for each iteration of the loop, so each listener has its own copy... you just need to have the value of val for that loop iteration persist and be unique for each listener."
learnjavascript,3e2uqf,senocular,1 point,Tue Jul 21 15:24:19 2015 UTC,"Wow, I think I just learned something about JavaScript :) Thank you.  My solution, which seems to have worked: I just created an addSingleEventHandler() function, which my addEventHandlers function calls. Since each call creates a new scope (correct me if I'm wrong), this effectively does what you suggested.   http://jsbin.com/koteti/36/edit?html,js,output"
learnjavascript,3e2uqf,senocular,1 point,Tue Jul 21 15:40:19 2015 UTC,"Its good that you learned something :D  That definitely works.  Then again, looking at the code more closely (vs my initial scan and blindly comment ;) ), since val actually referenced button.value, you can also use:  button.addEventListener(""click"", function(event) {    expression.append(event.currentTarget.value) }, false);   Event listeners get passed an event object which has a reference to the object you called addEventListener on (button) as a property called currentTarget. Since thats your button, you can get the value directly from that."
learnjavascript,3e41xr,FricoSuave,2,Tue Jul 21 20:09:08 2015 UTC,"Thats because this changes.  When you have a function, this is [generally] the value of the object calling it.  When you give a function to jQuery's click it calls the function with this being the element clicked.  When you extract that into another function then call that function yourself without it being attached to an object, then the this of that function [generally] becomes global, or window in the case of the browser.  The value of this is correct in your anonymous function that you're giving to click, but since you're calling swap yourself, you then are the one determining what this is.  What to do: The easiest thing is to get rid of the anonymous wrapper:  newUnit.click(swap);   Then jQuery is back to calling swap and this is as expected.  Alternatively you can force swap to be called with the this value you want using call  newUnit.click(function(){     swap.call(this); });   Using call to call the function means you get to specify what this is explicitly changing what would otherwise be window."
learnjavascript,3e41xr,senocular,1 point,Tue Jul 21 20:28:23 2015 UTC,"Ahhh, makes sense now. I knew I was losing the right identity of this somewhere along the way and had a funny feeling that I shouldn't be using an anonymous function but it never clicked until reading your explanation. Thanks for helping cement that one in!"
learnjavascript,3e3v0a,LoLVernum,1 point,Tue Jul 21 19:22:14 2015 UTC,"Instead of adding the data to the predefined buttons, Is it possible to create buttons as the information comes ?    Yep.   var info = document.getElementById(""userInput"").value; document.body.innerHTML += ""<button>""+info+""</button>"";   Make sense?   Maybe not even create them, but is it possible to Hide/Show a button based on if there is a Value within the button?   Yep.  var buttonId = document.getElementById(""buttonId""); buttonId.style.display = ""none""; /*or .visibility = ""hidden""*/ if(buttonId.innerHTML !== """") {   buttonId.style.display = ""initial""; }   Get it?"
learnjavascript,3e3v0a,ForScale,1 point,Tue Jul 21 20:16:16 2015 UTC,"You can do it like this:  http://jsbin.com/cehuyuzawo/1/edit?html,js,output"
learnjavascript,3e1qf2,Upper90175,0,Tue Jul 21 07:47:52 2015 UTC,"It's possible.   Try something like that:  var timeBegin = Date.now();  //set up event listener for key presses document.addEventListener(""keydown"", function(e) {     if(e.which === 65) { //'a' key pressed      var delta = Date.now() - timeBegin; //delta = time difference in ms    } })"
learnjavascript,3e1qf2,exane,1 point,Tue Jul 21 08:37:26 2015 UTC,"I really have no idea what a majority of that means, but knowing that its possible I will start learning javascript :) thanks"
learnjavascript,3e1qf2,EgoistHedonist,1 point,Tue Jul 21 19:50:44 2015 UTC,"I think you mean something like this:  var inputElement = document.getElementById('input'); setTimeout(function () {     inputElement.value += 'a'; }, 326);   This adds the character 'a' to the input element's value after waiting 326ms. If you need to simulate the keypress, you can do something like this instead (requires jQuery):  setTimeout(function () {     var e = $.Event(""keydown"", { keyCode: 65});     $(""#element_id"").trigger(e); }, 326);"
learnjavascript,3e1qf2,guohuade,1 point,Tue Jul 21 11:05:55 2015 UTC,I'll look at both of those and see if they work :) thanks for the help
learnjavascript,3e1qf2,warfangle,1 point,Tue Jul 21 19:51:17 2015 UTC,Really curious what the use case is here.... why do you need to press a specific key at a specific time within millisecond precision?
learnjavascript,3e1o40,UseThisWhenNotAlone,2,Tue Jul 21 07:17:33 2015 UTC,"Not with a local variable, but you can with an object variable using a getter.  var obj = {   get RealtimeVariable () {     return Math.sin(Date.now() * 10);   } };   console.log(obj.RealtimeVariable); // -0.5177438047249923 setTimeout(function() {      console.log(obj.RealtimeVariable); // 0.24875211886919904 }, 1000);   What you have in your found solution won't run each time you access RealtimeVariable. Its an IIFE (Immediately Invoked Function Expression) which is a function that runs immediately and what RealtimeVariable becomes is the return value of that function.  Each time you access RealtimeVariable from then on, it will be that same initial value.  The only way to have it change is to execute a block of code, which means calling a function, which normally means using (). But how you can run a function without () is using a getter or setter which translates the getting and setting of a property into a function call that you can define.  To set up getters for non-literal objects, you can use defineProperty: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"
learnjavascript,3e1o40,senocular,2,Tue Jul 21 08:29:15 2015 UTC,I've been coding javascript for years and didn't know about this feature.
learnjavascript,3e1o40,fukitol-,1 point,Tue Jul 21 15:23:50 2015 UTC,Maybe like this: https://jsfiddle.net/ug0kgdew/1/  There build in way to do that.  With a function is good.
learnjavascript,3dzyr4,moring1,4,Mon Jul 20 22:07:25 2015 UTC,"Because it's returning an object literal. He is defining values inside the object literal, which requires him to use colon to define key value pairs.   Anytime you define key value pairs inside an object literal, you need to use this definition type. Using the equals operator would not work inside an object literal.   Also, this is actually called a Revealing Module pattern."
learnjavascript,3dzyr4,00mba,1 point,Mon Jul 20 22:12:49 2015 UTC,"Ok.Module is an object literal. So, why the functions inside it don't have colons?"
learnjavascript,3dzyr4,00mba,1 point,Mon Jul 20 22:56:07 2015 UTC,"The entire module is an IIFE - https://en.wikipedia.org/wiki/Immediately-invoked_function_expression  var Module = ()();  // IIFE   The internals of the module are the properties, methods, and the return statement. Encased in another function.  var Module = (function(){     var privateProperty = 0;     var privateMethod1 = function(){};     return {}; })();   The properties and methods are private now. By adding a reference to an internal object into the return statement, you are making it public, thereby controlling the permission of the property or method, making it public.   var Module = (function(){     var privateProperty = 0;     var privateMethod1 = function(){};     return {           publicMethod : privateMethod1     }; })();   The only thing the return statement does is make your methods and properties public. ""return"" allows the outside to access anything youve declared in your returned object.   Here is some fantastic reading on the patterns!  http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/  https://carldanley.com/js-revealing-module-pattern/ (note the other design patterns at the bottom of the page)"
learnjavascript,3dzyr4,web-slingin,3,Mon Jul 20 23:44:30 2015 UTC,"This part is object literal:  { key: value }  {} is the object. Inside of it there is a member named ""publicMethod"" that is defined as the function publicMethod."
learnjavascript,3dzyr4,xeronotxero,1 point,Mon Jul 20 23:28:36 2015 UTC,"Now it's more clear to me, thank you. last thing, How the object knows how to pick the publicMethod function? this function is outside the object. And, how the function in the value is without parentheses? like this:  publicMethod: publicMethod()"
learnjavascript,3dzyr4,pmw57,1 point,Mon Jul 20 23:42:14 2015 UTC,"i think i can help here:  |How the object knows how to pick the publicMethod function? this function is outside the object.  variables are scoped to the function level, in this case the IIFE ""module"" encloses both the object literal in the return statement and the ""publicMethod"" function, which means your object in the return statement can access any of the variables assigned within ""module.  |And, how the function in the value is without parentheses? like this: publicMethod: publicMethod()  i am still a beginner so please someone jump in if i got this wrong, but here is how i understand it:  publicMethod() is a function call, while publicMethod is just a reference to the the function. if you make the function call you are assigning the output of that function as the value, while omitting the parentheses means you are assigning the function itself as the value."
learnjavascript,3dykzc,cmartin616,8,Mon Jul 20 16:16:19 2015 UTC,"Literally, each one of the things you've listed (backbone included) basically do the same thing. Chances are, if you're not looking for something specific, you should just focus on using one until you run into limitations. You can get the same base product from any of them and they all work in similar ways.   Once you've really gotten to know the one you're using and find that it's not working, there are subtle differences. React is generally stronger with componentizing your app. If you have a lot of reusable modules with shared functionality, react might be better for your case. Ember is generally better at the persistence layer, if you find you're working a lot with requesting and posting data, it might be a stronger framework for you. Angular is okay; although the community is currently divided amongst angular 1 and 2, which are entirely different and so it might be a bit difficult to navigate all the documentation. Backbone is lightweight and good at being extremely flexible and generally not biased with how you should do things, that's both its power and its weakness.   Ultimately, they're all pretty similar until you find yourself needing something different. I'd just choose one and focus on it (maybe you could set up an array, shuffle it and do a Math.floor(Math.random * 4). It would probably do you more good than trying to determine the 'best' one without having used them."
learnjavascript,3dykzc,kevinambrosia,2,Mon Jul 20 17:38:22 2015 UTC,"I'd disagree and say React really shines at rendering speed and its ability to mix in with existing frameworks, like Backbone.    Also I haven't seen any big disagreements about Angular 1 or 2, could you point me towards articles or discussions on what people are disagreeing about?"
learnjavascript,3dykzc,jellatin,1 point,Tue Jul 21 02:32:29 2015 UTC,"Yeah, I would say that rendering speed is why it's so good at componentizing. Making complex, but contained Dom/data structures (components) that render at great speeds due to the shadow Dom. Totally agree with you there.   Also, I'm not aware of any major disagreements within the angular community except that both version 1 and 2 exist with mostly different APIs. It's divided in that not everyone uses angular 2.0 yet and there is online documentation (mostly in the form of stack overflow questions and blog articles) that pertain to both. The difficulty in using it comes from the surplus of information about either, not all of which applies to both."
learnjavascript,3dykzc,kevinambrosia,1 point,Tue Jul 21 02:57:01 2015 UTC,Angular 2 isn't even released yet (it's quite a long ways off) so the people you are seeing asking questions and using it are doing so just to see what it will be like.
learnjavascript,3dykzc,jellatin,1 point,Tue Jul 21 03:18:16 2015 UTC,Hmm; do you feel the release of angular 2 is going to make the discussion and documentation better?
learnjavascript,3dykzc,kevinambrosia,2,Tue Jul 21 03:58:05 2015 UTC,"Literally, each one of the things you've listed (backbone included) basically do the same thing.   http://todomvc.com/"
learnjavascript,3dykzc,Pantstown,1 point,Mon Jul 20 20:10:44 2015 UTC,"Thank you for your feedback.  I guess I poorly phrased my question.  I understand that each of those frameworks accomplish similar goals but I'm not sure when to use a framework.   I make a single page leaflet map - doesn't make sense to use a framework, right? Now the single page web map has a header/footer bar with buttons/controls - is this when you'd start to leverage a framework? Basic website with no user interaction (portfolio) - Framework for navigation between pages, single page with buttons changing content, leave it to vanilla/jQuery?"
learnjavascript,3dykzc,kevinambrosia,1 point,Tue Jul 21 12:53:21 2015 UTC,"This is a very nuanced question. I would say it's best to think of using a framework like you would think of using a tool. It is almost never worth using it unless you know how to use it. And once you know how to use it, you understand its best and worst use cases. I would say specifically, you can think of it in terms of three major decision points.    Firstly, the byte overhead. How heavy is the framework? If it's heavier than the module you're writing, it might not be the best tool for the job.   Secondly, the mental overhead of using it. Do you know the framework? Do you feel confident enough in your ability to learn how to use it?   Thirdly, the mental overhead of not using it. Frameworks do a whole lot more than just add functionality. In fact, everything they do can be done in pure javascript. One of the key draws of any framework is standardization in how you do things. This can help you program quicker in the long term. If you think of breaking things down 'the angular way', you always have a set method of problem solving and solution developing. Unless you program a TON in pure js, chances are you don't have a programming style, you might not fully understand why you do the things you do with it. This is fine in the short-term and is part of the learning process, but in the long term, when you come back to your code, your coding style might change. You might start questioning why you made the decisions you did. By using a standard framework, you free up a lot of these decisions. If you use backbone, you can bet that the page is updated in the render function. If you use angular, you know that you link functionality with dom flags.   The first two decision points are easy. For a simple map with leaflets, a framework is probably too heavy. For a simple navigation, frameworks still might be too heavy (although maybe backbone is light enough). For the full single-page app experience, you probably want to use a framework. The final decision point, though, might justify a framework's usage in all scenarios. Do you develop quickly in React? You could probably pop out a map/leaflet component quickly using that framework and you'd be able to easily understand it later. Navigation? Super simple with Angular and the rest of the site is in angular, so it fits the code environment.   Overall, it's entirely up to you. I would definitely suggest picking up one framework and sticking with it, trying to fully understand its benefits and its deficits. Know its limitations. Use it for everything. The more you use it, the more you'll understand if its the right tool for any job. Where I currently work, we use backbone for EVERYTHING. from small toggle modules to larger form wizards. The reason is not that it's necessary or 'best' for all scenarios, but it's best for the code environment and best for a team of developers that already know backbone."
learnjavascript,3dykzc,fireball_jones,1 point,Tue Jul 21 16:42:41 2015 UTC,"Try them, out see what you like. I can't stand Angular, but React makes a lot of sense to me. You might be the other way around.  There's nothing lost by playing with any / all of them. At the end of the day it's just JavaScript."
learnjavascript,3dykzc,jellatin,1 point,Tue Jul 21 02:23:36 2015 UTC,"Kudos for not being one of the overly-zealous React fans, this sub has too many of those.  I enjoy both but ultimately use Angular more often.  That being said I think React is pushing the entire industry in a great direction, and providing ""competition"" for Angular is only going to make it better."
learnjavascript,3dyisn,meesloo,11,Mon Jul 20 16:00:58 2015 UTC,"To understand JS inheritance you need to realise that a 'class'  consists of two parts; the constructor and the prototype. The constructor function sets all the instance variables for each member of the class, for example setting 'dept'  to 'sales'. The prototype is where you put all the methods so that they're shared across members of the class and not duplicated in memory.   Thus, when we make a subclass, we need to inherit the parent's instance data, and its prototype. To inherit the instance data we need to call the parent's constructor function (the WorkerBee function) on the SalesPerson class. But how can we do that? A constructor doesn't modify an existing object, it just creates a new one. To get around this, we .call the parent constructor in the child constructor, and pass in this as the first argument. What call does is call a function, but also set the value of this in that function to the first argument of call, allowing us to use a constructor function as more of a modifier function.   Then, to inherit the prototype, we need a different approach - we want our new class (SalesPerson) to have access to the existing prototype chain of WorkerBee (you might need to do some reading on what a prototype chain is) , so we create a new prototype for our constructor function, but set this prototype's prototype to the WorkerBee prototype (that's what Object.create does - it creates a new object and sets its prototype to the passed in object). This connects SalesPerson to the prototype chain.   So to answer your questions .call is used here to get all the instance data from the parent class onto instances of the child class. The last line is used to connect the child class to the prototype chain of the parent class. You'll have to read on exactly how prototypes work - I believe MDN has other articles on that. Finally, the constructor function is a function like WorkerBee or SalesPerson that creates an object, and not only sets its instance data, but also sets its prototype (its .__proto__) to the value of the constructor function's prototype property (.prototype is not the function's prototype, that's what __proto__ is for, rather it's a value that's used for all the instances' prototypes)"
learnjavascript,3dyisn,TMiguelT,2,Mon Jul 20 16:39:56 2015 UTC,"thanks for the thorough answer. My brain is pretty fried right now and isn't registering everything, but I think I'm slowly starting to grasp. Will re-read over the next couple days to try and get it!  Thanks muchly."
learnjavascript,3dyisn,thwartski,2,Mon Jul 20 19:01:02 2015 UTC,"I'm just learning this too, but here's an example from my current project that I hope helps illustrate how WorkerBee.call(this) is working. I think it makes more sense when there are other arguments being passed to the constructor besides just this.  In this code, RatingButton is an object which inherits from Button:  00 01    function Button(centerX, centerY, w, h, text) { 02        this.centerX = centerX; 03        this.centerY = centerY; 04        this.w = w; 05        this.h = h; 06        this.text = text; 07    }; 08 09    function RatingButton(centerX, centerY, w, h, text, ratingNum) { 10       Button.call(this, centerX, centerY, w, h, text);     //call the Button constructor 11       this.ratingNum = ratingNum;                          //capture the new argument as an attribute 12    }; 13 14    RatingButton.prototype = Object.create(Button.prototype); 15   Creating a new Button takes 5 arguments, which define where it is and how it looks etc (my real code has a few more than this).   In line 09, you can see that RatingButton takes those same 5 arguments as Button, and another new argument called ratingNum.   In line 10, I'm passing the first 5 arguments to the Button constructor. As /u/TMiguelT said, this means that those values can be set as attributes via the parent Buttonobject, without having to do that work twice or spend the memory twice.   Now about this, which is referring to the new object of type RatingButton that will eventually be created when I call the code to create a new RatingButton object.   If I forget to include this on line 10, when calling the Button consctructor, the RatingButton doesn't get connected properly to the Button functionality, and basically it can't do anything that a Button can do. This more or less means that inheritance isn't doing its job at all.   I know that this breaks everything because I've accidentally left it out like FIVE TIMES now, and spent a bunch of time trying to debug things =)  Next, you can see on line 11 that I have to take that new ratingNum argument and do something to capture it. It hasn't been passed to the Button constructor along with everything else, because it's a new thing that Button doesn't support.   The main reason to make this new child object is that I want to extend the functionality of Button, and by capturing the new argument with this.RatingNum = ratingNum, I am baking that new attribute into the RatingButton object.   Later on, I'll be able to make new methods on the child object, which read and write and do things based on that new attribute (like rate a book with 1-5 stars when a RatingButtonobject is clicked).   Finally, if I were to make a child class of RatingButton later, it might look like this:   00 01    function NewChildClass(centerX, centerY, w, h, text, ratingNum, newAttribute) { 02        RatingButton.call(this, centerX, centerY, w, h, text, ratingNum);     //call parent constructor 03        this.newAttribute = newAttribute;                           //capture new argument as attribute 04    }; 05     06    NewChildClass.prototype = Object.create(RatingButton.prototype); 07    }; 08   As you can see in line 01, this new object type, NewChildClasstakes:   All 5 arguments of the Button constructor,    plus    The added ratingNum attribute defined by the RatingButtonconstructor   and   A new attribute specific to the NewChildClass constructor, called newAttribute.   In line 02, 6 of the 7 arguments are passed on (along with this, being the NewChildClass object) to the RatingButton constructor.    Then in line 03 that 7th argument is captured as a new attribute of the NewChildClass object.   Because this third class is a child of a child, calling the RatingButton constructor will capture the 6th RatingNum argument as an attribute of RatingButton, before passing on the original 5 arguments to the Button constructor for the ""grandparent"" object to deal with.   In theory we could keep create a greatgrandchildren object, and on and on.   Because we call each object's parent constructor, we would only have to deal with the new attributes at each new level, and let the preexisting arguments be filed away by work we've already done further up the chain.   Hopefully this helps a little (and is actually correct based on my limited understanding)!"
learnjavascript,3dyisn,thwartski,2,Mon Jul 20 20:16:51 2015 UTC,"This was intimidating at first to read, but after getting it, I really appreciate the work you put into posting it. I think this makes sense. I have one so question (so far).   Why is it, that when you make a new constructor (ex. ""ratingButton"") that you have to create ""arguments"" that have 4/5 arguments that are in ""button"" alone... (ie. centerX, centerY, w, h, text). Is it because, the next line down you are ""calling"" button to Ratingbutton? As in, you have to link all the ""arguments"" in ratingButton to Button with the call(this...)?  Thanks again."
learnjavascript,3dyisn,senocular,1 point,Tue Jul 21 00:43:46 2015 UTC,"Nice, I'm glad it helped a bit.   Yes, I believe that is exactly what happens.   Later on, when we actually want to run this code, we create instances of these objects, by calling their constructor with the word new.  var oneStarButton = new RatingButton(200, 200, 30, 15, ""5 Stars"", 5); var twoStarButton = new RatingButton(200, 215, 30, 15, ""4 Stars"", 4); var threeStarButton = new RatingButton(200, 230, 30, 15, ""3 Stars"", 3); var fourStarButton = new RatingButton(200, 245, 30, 15, ""2 Stars"", 2); var fiveStarButton = new RatingButton(200, 260, 30, 15, ""1 Stars"", 1);   This creates 5 objects, all of the RatingButton type.    We give each object an argument for: centerX, centerY, w, h, text, and ratingNum.  By saying new RatingButton, we're calling the constructor from RatingButton, which knows to accept 6 arguments.   It takes the ratingNum argument, and says, oh hey, I know what to use this for. I'll save this as my this.ratingNum attribute.   The rest of them it wouldn't know what to do with in its own constructor, but that's where Button.call() comes in.   oneStarButton's constructor (the RatingButton constructor) calls its parent (theButton constructor), and passes it the remaining 5 arguments that aren't ratingNum:  Button.call(centerX, centerY, w, h, text);   Which is what the code actually says, but the VALUES that the code passes from oneStarButton will actually will be these values, which it got from its arguments:   Button.call(200, 200, 30, 15, ""5 Stars"");   If we tried to pass ratingNum to the Button constructor, it wouldn't actually do anything with it, because it's not one of the arguments we originally defined as part of Button.   This isn't super great or anything, but here's a project I was doing a couple weeks ago to test all this stuff out:  https://www.khanacademy.org/computer-programming/reddit-example-constructors/6552799367266304"
learnjavascript,3dyisn,senocular,1 point,Tue Jul 21 03:27:22 2015 UTC,"This again, was super helpful!  I understand better now that you've put this into a context... I think the confusing thing for me was that I wasn't thinking about this in the context of a new object. In your new RatingButton I can see that the values have to relate to something, and since the first 5 aren't defined in the arguments of ratingButton they need to be attached / parented to button.   One other question. When it comes to a line like this:  RatingButton.prototype = Object.create(Button.prototype);  This is what links the two buttons together so that Button is the parent and RatingButton is the child right?  In your code, that line occurs outside the function... on a line on it's own. Could you break down each type of that line?   I'm guessing that .prototype is technically a object property right? because of the . notation -- and prototype refers to __prototype__ I think (from what I've read / taken notes on...)  So is that line a variable statement? Is it determining the value of an ""object key / property"" (/ whatever it's called?)  is prototype an arbitrary word or is it a reserved word in javascript? And in this case, it now = Object.create(Button.prototype);  I guess I just have a hard time understanding that single line and what it does...  Any more help would be greatly appreciated - you've already done a lot so thanks again."
learnjavascript,3dyisn,epileptic_pelvis,1 point,Tue Jul 21 10:58:00 2015 UTC,"This is the tricky part.  The prototype is where the magic happens (I referred to it as ""voodoo"" before, particularly in the case of Object.create).  So you know that whole prototype chain bit?  Where if a value isn't found on an object, this ""chain"" is searched and if the value is found there, that value is used?  That's where this stems from.  Its part of the language that does some extra leg work at runtime that goes beyond just putting a value on an object and getting a value from an object.  There's that hidden, internal process that runs and performs an extra lookup for a value in this chain thing.  The chain itself is largely hidden from the user.  However the user (thats us) does have control over how that chain is formed when we create objects or set up constructors (classes) that inherit from one another, defining how that chain is created for new instances of those classes.  Breaking it down...  The prototype chain is built of prototypes.  A prototype is an object that another object can ""inherit"" values from if it doesn't have those values itself.  A prototype can have a prototype of its own, which can give you multiple, linked objects which together form the chain.  If the first object doesn't have a value, its prototype is checked.  If that object doesn't have a value its prototype is checked, and so on until there are no more prototypes.  The newest revision of JavaScript has a method for setting prototypes called Object.setPrototypeOf() we can use to demonstrate this but note that not all browsers have this yet (I think all modern browsers except Safari have it right now):   var backup = { beer: 'MGD' }; var main = { wine: ""Wente"" };  console.log(main.wine); // -> ""Wente"" console.log(main.beer); // -> undefined  // setting main's prototype object we can // give it an object to look to when values // aren't found in the object itself Object.setPrototypeOf(main, backup);  console.log(main.beer); // -> ""MGD"" // ^ not found in main, but is found in backup, the prototype of main   Object.create() does something similar to setPrototypeOf() only it also handles object creation.  It's also been around longer so its safer to use.  The above example can be re-written with Object.create as follows:  var backup = { beer: 'MGD' }; var main = Object.create(backup); // backup is prototype of a new object (main) main.wine = ""Wente"";  console.log(main.wine); // -> ""Wente"" console.log(main.beer); // -> ""MGD"" - found in prototype   But even Object.create is kind of new, in the age of JavaScript things.  Before that, what you would need to to is use new with a constructor function to set up prototype relationships.  Given the above, you're probably wondering how that works.  Its all part of the automatic magic behind using new and how functions are defined in JavaScript.  Whether you notice it or not, every function in JavaScript is created with an extra property assigned to it (an instance variable!) with the name ""prototype"".  var emptyFunc = function(){}; console.log(emptyFunc.prototype); // -> Object!   This exists in the case you use new with that function making it a constructor.  Because you don't specify a prototype with new as we did with setPrototypeOf and Object.create, JavaScript makes one of its own and uses that - the prototype property of the function you're using as the constructor.  So if we use emptyFunc as a constructor with new it effectively becomes this:  var emptyFunc = function(){      // object automatically created     var this = {};       // set up prototype to the object defined in     // the function's prototype property     Object.setPrototypeOf(this, emptyFunc.prototype);      // ...run user-defined function code...      // automatically return the created object     return this; };   The previous beer/wine example in constructor format:  var Main = function(){     this.wine = ""Wente""; }; Main.prototype.beer = ""MGD"";  var main = new Main(); console.log(main.wine); // -> ""Wente"" console.log(main.beer); // -> ""MGD"" - found in Main.prototype   The problem with this is that Main.prototype is pre-defined.  Its created when the function is created and it didn't let us say we need it to inherit from something else - to have a different prototype - so that we can set up our inheritance chain.  Well luckily, instances from constructors only get associated with that object after they're create with new so before we even let any instances get created, we can redefine what prototype is (its not a reserved keyword, btw, just a property with a name) to be something else - a something that has some other prototype.  And how can you do that?  Why, with Object.create, of course!  We'll adjust the example with two constructors:  var Backup = function(){  }; Backup.prototype.beer = ""MGD"";  var Main = function(){     this.wine = ""Wente""; }; Main.prototype = Object.create(Backup.prototype);  var main = new Main(); console.log(main.wine); // -> ""Wente"" console.log(main.beer); // -> ""MGD""   So what this does is re-defines Main.prototype into a new object who's prototype is the Beer.prototype object so when values aren't found on Main.prototype, it looks to Beer.prototype.  And what looks to Main.prototype? The main instance, thus completing the chain.  You might be wondering why we just don't do something like  Main.prototype = Backup.prototype; // oops, won't work   The problem with that is that they become the same object, and if you start adding properties to Main.prototype, its also adding properties to Backup.prototype meaning what should be only for Main starts leaking over into Backup too.  You may see older code that looks like this:  var Backup = function(){  }; Backup.prototype.beer = ""MGD"";  var Main = function(){     this.wine = ""Wente""; }; Main.prototype = new Backup();   This is pre-Object.create code.  It still works, because what does new do afterall?  It creates an object, assigns the prototype to the constructor function's prototype object (Backup.prototype) and returns it.  For this example with Backup, its the exact same thing!  The big difference is the user code in that would be in the constructor function of Backup. That is code that should be run on the instance, not the shared prototype object (think Backup.call(this) in the constructor instead).  There's no code in Backup now, but most other constructor functions would have something there, and we don't want that code to be run for the prototype object.  The prototype is just for sharing the prototype chain. Constructors are for the instances themselves.  Really we want something more like this:  var Backup = function(){     this.beer = ""MGD""; }; Backup.prototype.drink = function() {     console.log('Drink ' + this.beer); };  var Main = function(){     Backup.call(this);     this.wine = ""Wente""; }; Main.prototype = Object.create(Backup.prototype); Main.prototype.sip = function() {     console.log('Sip ' + this.wine); };  var main = new Main(); console.log(main.wine); // -> ""Wente"" console.log(main.beer); // -> ""MGD"" - from Backup.call  main.sip(); // -> ""Sip Wente"" main.drink(); // -> ""Drink MGD"" - from prototype"
learnjavascript,3dyisn,senocular,1 point,Tue Jul 21 14:34:47 2015 UTC,"Can you expand on the term ( i basically need dumbed down explain it like I'm 5...):   instance data? / instance variables? is ""calling"" the same as ""passing through?"" clarification: constructor functions are what sets the object up to be built... but it is not built until the ""new"" keyword is used... where as the modifier function is found within the object (and is really a 'method')? so the constructor is for setting ""instance variables"" (not sure what those are yet)... whereas the prototype is for defining the ""method"" (functions within objects)"" to be stored in the constructor function for when it's called with 'new'? -I have done some reading on prototype chains - I think it's where the new object looks for the local instance of a value and if it can't find it, it moves on up the prototype chain to the next parent object to look for the value?   I think that's all for now. Feel free to answer this if you want, I know it's a lot.  Really appreciate your help."
learnjavascript,3dyisn,senocular,2,Mon Jul 20 22:46:14 2015 UTC,"instance data and instance variables are more or less the same thing - values assigned to an instance (i.e. an object).  Generally these are the same thing as a ""property"".  The SalesPerson object has instance variables dept and quota which you can see defined in the constructor of your example.  More specifically the term refers to values that are created for and unique to each object instance created.  And namely that requires that they be defined in the constructor and not inherited. ""calling"" is running the code in a function.  If you have a function and call it, the code in that function is run and performs some action that may or may not result in a return value.  This is not the same as ""passing through"" Yes constructors set up an object, and yes the object is built when the constructor is run - as a consequence of using the new keyword with a function. That use of the new keyword is what makes the function change from a normal function call to a constructor function call.  As a constructor: A new object is created and assigned to this in the function, that object is associated with the function as an ""instance"" of that function and what represents its ""class"" (namely getting access to shared properties assigned on that function's prototype object), and the this object is automatically returned without a return statement.  Now, when you're dealing with inheritance, you have these constructors which perform setup to objects that you also want to inherit. SalesPerson needs to get the same setup step that WorkerBee gets because its inheriting from WorkerBee.  This is where those instance variables are being defined that need to be inherited, afterall. However, since new Salesperson() already did the job of creating an object, we don't want to run WorkerBee as a constructor.  We need it to run as a normal function setting values to the object we already have.  Thats why WorkerBee needs to be something that ""modifies"" our object rather than creating it.  And that's why it is used with call so that we can call WorkerBee as a function but force its hand to make this in that function call the value of our SalesPerson instance (which is what the call() method does - changes this in a function call). Pretty much, yes.  Prototype objects are where shared values go, which usually means methods (object functions).  However methods can be instance variables as well.  And a prototype can be given not function (non method) values.  function MyConstructor() {      // instance variable     this.myMethod = function() {         console.log(""instance method!"");     } }  MyConstructor.prototype.myValue = [1,2,3]; // shared  var one = new MyConstructor(); var two = new MyConstructor();  one.myMethod(); // -> ""instance method!"" two.myMethod(); // -> ""instance method!"" console.log(one.myMethod === two.myMethod); // -> false - not the same  console.log(one.myValue); // -> [1,2,3] console.log(two.myValue); // -> [1,2,3] console.log(one.myValue === two.myValue); // -> true - the same! // (myValue is not found on instance so prototype chain is // searched and its value is found there in a prototype that is shared)  // Oh Noes! one.myValue.push(4); console.log(one.myValue); // -> [1,2,3,4] console.log(two.myValue); // -> [1,2,3,4]"
learnjavascript,3dyisn,pickten,1 point,Tue Jul 21 13:21:42 2015 UTC,"Very helpful post, thank you!"
learnjavascript,3dyisn,senocular,4,Mon Jul 20 23:45:50 2015 UTC,"Good explanations so far, but it can be hard to parse all the text.  This has text too :P but its in an annotated code format which might help make it clearer. It also kind of walks you into it all from very humble beginnings. Hopefully it helps:  // I need to make an person object.  var person = {     name: ""Alan"" };  person.getPrefixedName = function() {     return ""Mr. or Ms. "" + this.name; };   // REVISE: // I need to make lots of persons. // How about a function to make it easier.  function makePerson(name, id) {     var person = {         name: name     };      person.getPrefixedName = function() {         return ""Mr. or Ms. "" + this.name;     };      return person; }  var person1 = makePerson(""Alan""); var person2 = makePerson(""Barb""); var person3 = makePerson(""Carl"");   // REVISE: // getPrefixedName never changes, it should // be shared instead of duplicated which is // happening now because a new version is // created in each makePerson call.  function person_getPrefixedName() {     return ""Mr. or Ms. "" + this.name; }  function makePerson(name) {     var person = {         name: name     };      person.getPrefixedName = person_getPrefixedName;      return person; }  var person = makePerson(""Alan"");   // REVISE: // Huh? JavaScript has a feature that does // some of this automatically? Use it!  // Constructor function to create a new object instance // and assign properties to these objects when the function // is used with `new <Function>` function Person(name) {      // `this` is an automatically created object     // replacing what was person = {} when `new` is     // used with the Person function     this.name = name;      // No function assignment needed here; `new`     // makes the function available through the      // shared person prototype.  Persons created     // with `new <Constructor>` share all values in      // `<Constrcutor>.prototype`      // The `this` object is automatically returned }  // prototype object for sharing values  // among all persons created with `new Person`. // It starts off empty. Add stuff to it to have // those values available to all persons. Person.prototype.getPrefixedName = function() {     return ""Mr. or Ms. "" + this.name; };  var person = new Person(""Alan""); // <- now uses new   // REVISE: // I need a new object. It must be just like a person // with a little bit more added on.  function AgedPerson(name, age) {     this.name = name;     this.age = age; }  AgedPerson.prototype.getPrefixedName = function() {     return ""Mr. or Ms. "" + this.name; };  AgedPerson.prototype.canDrink = function() {     return this.age >= 21; };  var person = new AgedPerson(""Alan"", 18);  // REVISE: // AgedPerson is duplicating what Person already // does! How can that be shared?  AgedPerson should // define what's unique to itself and inherit the // rest from Person. It needs to 1) get assignments // from the constructor and 2) share the same values // shared with Person instances from the prototype  // ... Person definition ...  function AgedPerson(name, age) {      // Using call is like calling Person(name) but changes     // what `this` in Person would be to the `this` that     // is `this` here - the `this` created to be our AgedPerson     // instance (as specified in the first argument of call).     // So this means all assignments in Person() get assigned     // for this now-being-created instance of AgedPerson     Person.call(this, name);      // AgedPerson's unique value     this.age = age; }  // AgedPerson.prototype is empty right now, but we can redefine // it to be a new object that automatically inherits values // from another object (via JavaScript voodoo known as  // Object.create). We want to have AgedPerson share the same // things that get shared with Person objects meaning we want it // to inherit the values from Person.prototype. AgedPerson // instances will then share values from AgedPerson.prototype as well // as Person.prototype. (Thanks to Object.create - which basically // does the same thing `new` does, allowing instances to inherit // shared values from a <Constructor>.prototype, this instead does // it with a function call and no custom constructor, plus you have to // specify the shared object rather than it automatically using the // object defined as <Constructor>.prototype) AgedPerson.prototype = Object.create(Person.prototype);  // AgedPerson's unique shared values AgedPerson.prototype.canDrink = function() {     return this.age >= 21; };  var person = new AgedPerson(""Alan"", 18); console.log(person.name); // -> ""Alan"" // assigned in Person constructor console.log(person.getPrefixedName()); // -> ""Mr. or Ms. Alan"" // from shared Person.prototype console.log(person.age); // -> 18 // assigned in AgedPerson constructor console.log(person.canDrink()); // -> false // from shared AgedPerson.prototype"
learnjavascript,3dyisn,senocular,1 point,Mon Jul 20 22:23:53 2015 UTC,"Thank you for your thorough answer. I have yet to look through it. Will edit with questions shortly. I might need even more comment explanations hahah--but yes, having commented text helps A LOT."
learnjavascript,3e0oql,Oldmangramps,2,Tue Jul 21 01:34:55 2015 UTC,Probably this: http://stackoverflow.com/questions/13869627/unable-to-access-json-property-with-dash  You need to use brackets to access any property whose key is contains a mathematical operator.
learnjavascript,3e0oql,MahdiM,0,Tue Jul 21 06:44:53 2015 UTC,"You're going to need to elaborate a little more than that. ""app.controller"" is... what? You're apparently using a framework of some kind, what framework? Have you checked the output using curl, or the Chrome dev tools, etc, to figure out if it's even a server-side problem?  Because, empirically, when I paste your JSON into a javascript console, the object I get back looks fine."
learnjavascript,3dy8dx,Prometheus0110,1 point,Mon Jul 20 14:44:01 2015 UTC,"I think you may be able to do this with with Twitter's Bootstrap and their tabs component.  It may work right out of the box, you may want to use what you have learned to alter the code to your liking, or maybe even reverse engineer what they did to write your own version."
learnjavascript,3dy8dx,kevan,1 point,Mon Jul 20 15:54:37 2015 UTC,"A simple, brute force method would be to bind an onClick event to each button and each onClick populates the innerHtml/text of the text area (which holds the script).  Basic jsfiddle here.  You could stick all the onclicks into the buttons as well."
learnjavascript,3dy8dx,cmartin616,1 point,Mon Jul 20 16:33:55 2015 UTC,Ah this is a perfect thing to build from.  Awesome.  Thanks!
learnjavascript,3dy8dx,_daniel___,2,Mon Jul 20 17:20:30 2015 UTC,"I forked the above fiddle, it might be better for your long term learning to begin isolating your concerns whenever possible."
learnjavascript,3dy8dx,Biscuit_Baron,1 point,Mon Jul 20 18:49:41 2015 UTC,"From an absolute beginner, thanks.  I hadn't heard the term ""Separation of concerns"" yet - reading up on this helps me to demystify code patterns I'd seen previously but couldn't fully grasp. Much obliged!"
learnjavascript,3dy834,Promios,2,Mon Jul 20 14:41:45 2015 UTC,Inspiration for sure. I should do something like this...
learnjavascript,3dx7ox,For_The_Fans,10,Mon Jul 20 07:41:48 2015 UTC,"Aside from exploring other sources of learning, I think it's important to point out that this is normal.  Learning programming can be challenging, and sometimes that can be fatiguing.   Even though I've written in 4+ languages professionally, this still happens to me when I find a language that doesn't work like the rest.   I've found taking a rest, looking at a range of different explanations, and practicing at a slow-and-steady pace has helped.    It's also a great learning experience to pick one very small program and try to implement that.   For instance, depending on your current level, a 'dice-roll' site, that gives you a random number from 1-6 every time you click a button."
learnjavascript,3dx7ox,hughfdjackson,3,Mon Jul 20 08:50:40 2015 UTC,"I've been learning JS since March and I'll even say that Codewars is tough. Definitely not recommended for beginners, even the 8 kyu difficulty.  What worked for me early on was refusing to move on from a concept until I've come up with an idea to use it, come across bugs, experience new errors, and learn to fix them.  For instance, while I was learning JS, I had a ""choose your own story"" RPG game I was working on with the new concepts I was using. It started off by asking for character info with prompts. And then integrated loops and functions and then objects. It became more and more complex and I had to rework things every time I learned something knew, but I knew that what I was learning was sinking in.   I'd say come up with a small project to work on slowly as you learn. It will help cement things like syntax and new concepts as you learn them and build on them."
learnjavascript,3dx7ox,Brozekial,2,Mon Jul 20 12:39:43 2015 UTC,"I've been teaching myself to program for almost a year now and I can tell you the best way to deal with the feeling of 'just not getting it' is to make friends with it.  That's the feeling you get right before you understand something, so acknowledge the feeling, let it pass, and then get back to the code.  Sooner or later your thing will work and your understanding of the tool (js) and the problems it can solve will level up -- leaving you with another set of unknowns to overcome.  It's part of the process, don't let it discourage you."
learnjavascript,3dx7ox,FricoSuave,3,Mon Jul 20 14:09:08 2015 UTC,"You've only been at it for 2 weeks; that's maybe enough time for someone who's already a great programmer to pick up the basics of javascript and work with it, but even for them it'll take many months of working with it first hand to 'master' it or learn the more obscure knowledge that levels them up. Unfortunately, as much as all these new ""learn to code in a week with just 30 minutes a day!"" bootcamps and mantras like to sell you that it's going to happen that quick, it just won't. It took most people (including me) about a year or more before things started to 'click' to a degree and I wasn't just pushing code around without truly understanding it. Your instant gratification will not be had here, you have to keep trying."
learnjavascript,3dx7ox,taterNuts,2,Mon Jul 20 15:02:15 2015 UTC,"https://www.khanacademy.org/computing/computer-programming/programming  Khan Academy has a great program for JS beginners. As for forgetting syntax and hitting stumbling blocks along the way, that's natural anytime you're learning a new skill. Just stick with it and practice frequently. You'll get the hang of it.   Proficiency++"
learnjavascript,3dx7ox,jpdoofy,1 point,Mon Jul 20 08:23:13 2015 UTC,"I've been working with JavaScript for over 15 years and it can still confuse me. Don't let it get you down.  Just keep at it. The more you use it and read about it, the more things will settle in and become second nature.  Don't try to learn it all at once. Its ok to coast on what you know for a while before moving on.  It helps to branch out on your own and try making some things that you think sounds fun based on what you already know."
learnjavascript,3dx7ox,senocular,1 point,Mon Jul 20 15:34:34 2015 UTC,After a few years of this you'll realise that programming is just perpetually this. Except once you get used to it you'll figure out better ways to find what you need to move to the next problem :-)
learnjavascript,3dvz13,nemeth,2,Mon Jul 20 00:04:14 2015 UTC,This is more CSS than JS. Don't confuse presentation (CSS) with functionality (JS).  /r/webdev /r/frontend
learnjavascript,3dvz13,papers_,1 point,Mon Jul 20 00:09:28 2015 UTC,"I disagree.  The images need to be repeated in a javascript increment loop as i'm fetching the image paths from a database.  I also need to add in functionality like the image transitions which will be css but will require javascript to change these values based on parameters set, i.e   config = { transition: fadein, rows: 5, columns: 10 }   Granted css width can decide on the image sizing maybe but I need to use javascript to change these values in the DOM.  Also I should have mentioned config in the above text, so apologies for not including it."
learnjavascript,3dvz13,papers_,1 point,Mon Jul 20 00:21:15 2015 UTC,"If you're interacting with a database, then JS is not the answer. Especially if you're querying the database for the image paths, PHP would be a better option (security) and you can inline it without a problem. However, if you know the image paths, assuming they all follow the same pattern, then yes you can use a loop with JS to insert each one. Again, assuming something like imgs/image###.jpg.   will require javascript to change these values based on parameters set   A simple event listener will do the trick."
learnjavascript,3dvz13,stejni,1 point,Mon Jul 20 00:36:37 2015 UTC,"Ah ok, well im getting the values in a json string so I prefer to use js. I think the main goal is to calculate the browser height and width then take the values ( 10 columns, 5 rows for ex) and then calculate css img boxes for those values.    Then when resizing from say 1920x1080 to 1280x720 it will recalculate the images and adjust so it contains 10 columns and 5 rows.  I want to use JS because I want to pass values through as parameters so if was changed to 5 columns and 3 rows , it would adjust.  But as im typing this I see an issue with that as the boxes wouldnt be square which I want them to be.  There would be some overflow which I could manage but calculating browser height wouldn't allow the clipping.  PHP is outta the question as im using nodejs.    Seems my logic is flawed as what im trying to achieve is impossible to do, but many thanks for your help."
learnjavascript,3dvz13,andersevenrud,1 point,Mon Jul 20 00:54:48 2015 UTC,"Okay I might have misunderstood the problem, however could this be done with flexbox in css? You would then have X amounts of images that would be resized according to the browser automatically. In that case it would only require adding each img element to a container."
learnjavascript,3dvz13,andersevenrud,2,Mon Jul 20 10:50:50 2015 UTC,Put together a little something for you. Something like this ? http://jsfiddle.net/e630b7a2/
learnjavascript,3dv9jr,rogue1987,2,Sun Jul 19 20:27:15 2015 UTC,Your link is broken so I don't really know what you're talking about but both of your things seem easily doable
learnjavascript,3dv9jr,6086555,1 point,Sun Jul 19 20:39:42 2015 UTC,"I am sorry, I updated it with the correct one :)"
learnjavascript,3dv9jr,6086555,2,Sun Jul 19 20:42:23 2015 UTC,"You just need to put conditions in your updateTimer function. The beeps will be the hardest part but if you do it in a clever way it should be ok:  Something like   if(remainingTime < 1000 * beepCount){ playBeep(); beepCount = beepCount -1; }    For the color thing, a condition like  if (remainingTime<10000){     changeColor(); }   You could also store the fact that you changed the color in changedColor boolean to avoid doing it over and over"
learnjavascript,3dv9jr,DanFreedse,1 point,Sun Jul 19 21:05:06 2015 UTC,"Thank you so much. Will look into the beep thing, it did not look to simple to accomplish.. :/"
learnjavascript,3duuaz,endziu666,4,Sun Jul 19 18:18:43 2015 UTC,"Well, there's no need to check for the ""both true"" case, because the result is identical to the ""isSelected"" case, so you could just cut it out:  if (isSelected) {   selClass += "" selected""; } else if (isHoveredOver) {   selClass += "" hovered""; }   If you want a one-liner, you could also use a ternary:  selClass += (isSelected) ? "" selected"" : (isHoveredOver) ? "" hovered"" : """";"
learnjavascript,3duuaz,Triplanetary,2,Sun Jul 19 18:53:56 2015 UTC,Please don't nest ternaries without a good reason. It makes code much harder to maintain.
learnjavascript,3duuaz,androbat,2,Sun Jul 19 19:13:55 2015 UTC,"I do what I want.  Nah jk, I'll remember, thanks."
learnjavascript,3duuaz,Triplanetary,1 point,Sun Jul 19 19:16:07 2015 UTC,Thx for the answer. Didn't know that you can use ternary like this ;)
learnjavascript,3duuaz,suck_at_coding,5,Sun Jul 19 19:22:17 2015 UTC,Every person who ever has to read your code in the future thanks you for NOT using a double ternary like this.
learnjavascript,3duuaz,suck_at_coding,1 point,Sun Jul 19 19:29:47 2015 UTC,I'll keep that in mind.
learnjavascript,3duuaz,ConceptualCreation,5,Sun Jul 19 19:34:57 2015 UTC,"I think this is the most readable version. You don't really need the initial && check, but it's not very expensive and helps convey that isSelected trumps isHoveredOver  var selectedClass = function( isSelected, isHoveredOver ) {   if ( (isSelected && isHoveredOver) || isSelected ) {     return 'row selected';   }    if ( isHoveredOver ) {     return 'row hovered';   }    return 'row'; }"
learnjavascript,3duuaz,papers_,2,Sun Jul 19 19:53:54 2015 UTC,"I like this version. If explicitness is what you want this is the way to go, I think. Clearly show in your code how ""selected"" takes precedence over ""hovered"". +1"
learnjavascript,3duuaz,ForScale,1 point,Sun Jul 19 20:31:41 2015 UTC,I agree. This version most clearly expresses what I wanted to do. thx!
learnjavascript,3duuaz,Triplanetary,4,Sun Jul 19 20:10:57 2015 UTC,"You could make it even make it a one liner:  var selectedClass = function( isSelected, isHoveredOver ) {   return ( (isSelected && isHoveredOver) || isSelected ) ? 'row selected' : ( isHoveredOver ) ? 'row hovered' : 'row' }   But that's ugly. Don't do that."
learnjavascript,3duuaz,ForScale,2,Mon Jul 20 00:05:26 2015 UTC,"Hmm... first off, I don't think those ifs and else ifs are nested. If they were nested it'd be like  if (x === true) {   if(y === true) {    } }   You have to have statements within statements for those statements to be nested... I believe.  That being said, I think your code would produce the same output if you take away the first if statement with the && logical operator. Just do  var selectedClass = function(isSelected, isHoveredOver) {   var selClass = ""row"";   if (isHoveredOver) {     selClass += "" hovered"";   }   if (isSelected) {     selClass += "" selected"";   }   return selClass; };   That cuts down on the keystrokes a bit."
learnjavascript,3duuaz,senocular,1 point,Sun Jul 19 19:10:07 2015 UTC,"You need the else if in this case, because in your example, if both cases are true, "" hovered selected"" will end up getting appended to the string."
learnjavascript,3duuaz,jml26,1 point,Sun Jul 19 19:12:12 2015 UTC,"if both cases are true, "" hovered selected"" will end up getting appended to the string.   I assumed that's what he was after... but, yeah, looking at his code, it seems he just wants "" selected"" added if they're both true."
learnjavascript,3duuaz,suck_at_coding,3,Sun Jul 19 19:42:40 2015 UTC,"Or maybe something like  var matrix = [   ["""",          "" hovered"" ],   ["" selected"", "" selected""] ];  var selectedClass = function(isSelected, isHoveredOver){   return ""row"" + matrix[+isSelected][+isHoveredOver]; };   Where all da ifs go?"
learnjavascript,3duuaz,ConceptualCreation,2,Sun Jul 19 23:42:46 2015 UTC,"Based on u/suck_at_coding's and u/Triplanetary's responses, as good combination would be  var selectedClass = function (isSelected, isHoveredOver) {     if (isSelected) return 'row selected';     if (isHoveredOver) return 'row hovered';     return 'row'; };"
learnjavascript,3duuaz,ConceptualCreation,1 point,Mon Jul 20 10:27:15 2015 UTC,"If you ever write production javascript, you'll soon get out of the non-braces habit, especially that cramped, 1-line syntax that no one wants to read. When I have to go through your code to figure out why something might not be working, and I have to add in braces so I can add a console.log() in there to make sure it's hitting the right logic, it get's annoying."
learnjavascript,3dv8gp,mathcanbefun,2,Sun Jul 19 20:17:55 2015 UTC,"rows passed in to rowHeights is expected to be a two dimensional array.  So looping through rows will give you arrays represented as row.  Each element in a row is a cell which has at least a method called minHeight().  So what map does is maps all the original row arrays into new values - as thats what map does.  But those new values aren't row arrays, they're single values since the value returned inside of the map callback is the result of a reduce. And since reduce returns one value from an array, what was a row is now a single value.  And what value is that? Its the max minHeight value of all the cells.  So in the end, rowHeights(rows) gives you a new array where each element is the max min height of all the cells in the row represented by that location in the rows array."
learnjavascript,3dv8gp,senocular,2,Sun Jul 19 20:28:01 2015 UTC,"reduce is a way of applying a function that takes two arguments across a whole series of things.  For example, if you had a list of ten items, and a max() function that takes two things and returns the larger of the two, then reduce will let you combine that function with the list of ten items to find the largest item of the whole list, calling the function over and over to reduce the list until there is a single result.  In the example, that is being applied to each row of rows, so it's finding the cell with the highest minHeight in each row, and returning that array.  As a side note, Math.max() is a variadic function that can take any number of parameters, so there's ordinarily no reason to use reduce for that.  In this case, since the values being compared are generated by calling cell.minHeight(), that means that you would at the least have to use another call to map() to generate the array of numbers to feed to variadic Math.max() (via apply) so there's already a callback function, and by using reduce you can fold the minHeight call into the reduce callback."
learnjavascript,3dv8gp,Rhomboid,2,Sun Jul 19 20:58:04 2015 UTC,"Here's a line by line breakdown  //a function that takes an array of rows function rowHeights(rows) {   //run this function for each row. All the new results will be returned in a new array of rows   return rows.map(function(row) {     //go across each cell in the row looking for the largest cell     return row.reduce(function(max, cell) {       //whichever cell is largest will be 'max' in the next cell comparison       return Math.max(max, cell.minHeight());     }, 0);//the starting 'max' value is zero   }); }"
learnjavascript,3duhdt,reckscene,1 point,Sun Jul 19 16:27:42 2015 UTC,"vars inside an object (instanced function) are encapsulated, unless exposed through an instance property (this.propertyName) or a function, you can't access it.  This gives the language a form of access control (since true access control doesn't exist in JavaScript)."
learnjavascript,3duhdt,Stephen110,1 point,Sun Jul 19 16:32:27 2015 UTC,Can you give an example of what you're talking about?
learnjavascript,3duhdt,senocular,1 point,Sun Jul 19 16:40:34 2015 UTC,"it is a codewars question, so i can't really edit it to add a privilege function 3 kyu Hard Time Bomb"
learnjavascript,3duhdt,senocular,1 point,Sun Jul 19 17:21:06 2015 UTC,"3 kyu Hard Time Bomb   Ok, well the key to this question is that its a global var. And global vars are assigned to the global this. They're not just locally scoped vars.  So what you can do is use a for..in loop to go through all the global properties to find what you're looking for.  There's a hint in the description that will help you isolate which one, though you can do it in a more brute force manner too ;)"
learnjavascript,3duhdt,lauritzsh,1 point,Sun Jul 19 17:31:18 2015 UTC,"TypeError: Object function BuildBomb(global) {    var myWireVar = 'boom' + ~ ~(Math.random() * 10),         bomb = function bomb() {       this.Explode = function {         var myWire = 0;         eval('myWire = ' + myWireVar + ';');         console.log('The wire was ""cut"":');         Test.expect(typeof myWire === 'undefined', 'BOOM! You failed to cut the wire!');       };       this.CutTheWire = function {         var myWire = 0;         eval('myWire = ' + myWireVar + ';');         console.log('A numeric wireCode is specified:');         Test.expect(typeof wireCode === 'number', 'BOOM! You have to specify the number ID of the wire to cut.');         console.log('Correct wireCode is specified:');         Test.expect(wireCode === myWire, 'BOOM! You cut the wrong wire!');         eval.call(global, 'var ' + myWireVar + ' = undefined;');       };     };     eval.call(global, 'var ' + myWireVar + ' = ' + Math.random() + ';');     global.bomb = new bomb();     return global.bomb;   }"
learnjavascript,3dto9e,Archheretic,2,Sun Jul 19 10:22:00 2015 UTC,"To clarify, we're referring to transparency, not transcendence. When I'm near my PC I'll dig into this."
learnjavascript,3dto9e,dbpcut,2,Sun Jul 19 15:48:05 2015 UTC,"*transparency  Why do you want it in an array?   Here, dude's not losing his transparency:  html  <div id='player'></div>   css   body {   background: url('http://i.imgur.com/4haA682.png');   background-repeat: no-repeat;   background-size: 200px 200px; }  #player {   height: 64px;   width: 64px;   position: relative;   top: 124px; }   js  var array = [""url('http://opengameart.org/sites/default/files/styles/watermarked/public/lpc-art/professor_walk_cycle_no_hat.png') 0 128px"", ""url('http://opengameart.org/sites/default/files/styles/watermarked/public/lpc-art/professor_walk_cycle_no_hat.png') 64px 128px"", ""url('http://opengameart.org/sites/default/files/styles/watermarked/public/lpc-art/professor_walk_cycle_no_hat.png') 128px 128px"", ""url('http://opengameart.org/sites/default/files/styles/watermarked/public/lpc-art/professor_walk_cycle_no_hat.png') 196px 128px""];  var player = document.getElementById(""player"");  var i = 0; setInterval(function() {   i += 1;   if (i === 3) {     i = 0;   }   player.style.background = array[i]; }, 100);"
learnjavascript,3dt87i,Scowlface,1 point,Sun Jul 19 05:50:33 2015 UTC,"Here Is what I have. I had no idea what any of this means but, you basic principal is to use mouse to get what you click, pass it to reset function and set all other frames except the one passed in.   Here is fiddle of the working example. I put comments too.      https://jsfiddle.net/jghkuf63/3/      Most efficient would be a toggle class you append to the mapframe, but i don't know how to do that with google maps api."
learnjavascript,3dt87i,uda4000,1 point,Sun Jul 19 13:51:44 2015 UTC,"Hey thanks a lot!  I figured it had something to do with how I was trying to access the property but just could not fix it.  Any idea why I couldn't just copy the example on the mapbox api?  From what I understand about these layers, there shouldn't be a difference between a point marker and a multipolygon."
learnjavascript,3dsyik,segmentationfaulter,5,Sun Jul 19 03:54:25 2015 UTC,"Chrome sources tab, load whatever scripts you want throw in breakpoints and refresh the page.   Every browser has its version but chrome is the only one I can recite from memory on mobile."
learnjavascript,3dsyik,ArchieMoses,1 point,Sun Jul 19 05:08:07 2015 UTC,"This is exactly what debugging code will give you.  https://developer.chrome.com/devtools/docs/javascript-debugging  A shortcut to bringing up the debugger as an alternative to setting breakpoints is to place the term debugger; in your code.  (The link might mention this, I didn't read it)"
learnjavascript,3dsyik,senocular,1 point,Sun Jul 19 11:53:52 2015 UTC,"You can use Chrome's sources tab like the previous posters have said, and if you're trying to debug back end NodeJS code you can use node inspector.  https://github.com/node-inspector/node-inspector"
learnjavascript,3dtns3,Titanium_Expose,2,Sun Jul 19 10:13:56 2015 UTC,"var diffOne = (a,b) => a.filter((el) => ~~b.indexOf(el));  var diff = (a,b) = diffOne(a,b).concat(diffOne(b,a));   Wrote on my phone in about 1 minute so probably doesn't work quite right."
learnjavascript,3dtns3,guohuade,1 point,Sun Jul 19 10:33:24 2015 UTC,"Not sure why you're getting downvoted.  Despite doing it on your phone (with minor typos) its right on (assuming ES6 is OK)  var diffOne = (a,b) => a.filter((el) => !~b.indexOf(el)); var diff = (a,b) => diffOne(a,b).concat(diffOne(b,a));  diff([1,2,3,4,5,6],[4,5,6,7,8,9]) // -> [1,2,3,7,8,9]"
learnjavascript,3dtns3,senocular,0,Sun Jul 19 16:37:29 2015 UTC,"(assuming ES6 is OK)   Free Code Camp uses your browser's JS engine to execute the code you give it, so what's OK or not just depends on your browser. The latest releases of Firefox and Chrome both support => if I'm not mistaken."
learnjavascript,3dtns3,Triplanetary,1 point,Sun Jul 19 19:05:24 2015 UTC,Thanks for the fix.
learnjavascript,3dtns3,guohuade,1 point,Mon Jul 20 00:56:57 2015 UTC,"I'm not sure this is any more succinct.  function diff (a, b) {     return []       .concat(a.filter(function (i) {           return b.indexOf(i) === -1;       }))       .concat(b.filter(function (i) {           return a.indexOf(i) === -1;       })); }"
learnjavascript,3dtns3,foo13,1 point,Sun Jul 19 12:07:49 2015 UTC,"Something like this?  function diff(arr1, arr2) {     var found1 = arr1.filter(function(it) { return arr2.indexOf(it) === -1; });     var found2 = arr2.filter(function(it) { return arr1.indexOf(it) === -1; });     return found1.concat(found2); }"
learnjavascript,3dtns3,notoriousb1t,1 point,Sun Jul 19 14:23:41 2015 UTC,"What is the ""it"" part of this?"
learnjavascript,3dtns3,rsh412,1 point,Sun Jul 19 14:50:33 2015 UTC,It is just the name they gave to the argument that represents each array element in the filter loop. You could name it anything you want.
learnjavascript,3ds93c,chiwoojo,4,Sat Jul 18 23:31:48 2015 UTC,"I'm in the process of learning JavaScript as well so I can't provide solid advice just my experience. There are a few highly recommended JavaScript books and many will say you must read them first. I started out with Eloquent JavaScript and loved it, although for me it complicated pretty fast. About half way through I got fed up with learning theory, did the basic tutorial from code school for AngularJS and started a project. Half way through the project I'm having issues because I don't have a thorough understand of JavaScript so I jumped back to the book. Guess what? That crazy inheritance stuff he was talking about makes sense because I'm making stuff with it!   Don't restrict yourself to reading and finishing one book or understanding all of JavaScript. Don't jump into a framework with no understanding and expect to figure out the problems that arise. It's your learning path and you control it. Personally I would recommend doing some codeschool or codecademy courses for basics of JS and syntax, poke around one of the good JS books like Eloquent JS, run through the tutorial for your framework of choice and start making something."
learnjavascript,3ds93c,natemallison,2,Sun Jul 19 01:47:30 2015 UTC,"Hey thanks for the reply. Have you any experience with Free Code Camp? Seems a bit tough, but the curriculum seems really practical."
learnjavascript,3ds93c,natemallison,1 point,Sun Jul 19 05:00:03 2015 UTC,I don't have experience with it. But I've read really good things.
learnjavascript,3ds93c,ArchieMoses,3,Sun Jul 19 10:50:30 2015 UTC,"Everybody learns differently. Some people excel reading specs and api docs. I'm a problem solving learner, I do way better with projects. Go until I hit a wall, figure out how to solve it and move on.   Try them both and figure out what works best for you."
learnjavascript,3ds93c,zechies,2,Sun Jul 19 05:28:59 2015 UTC,I think it's important to do a combination of both projects and learning environments especially if this is the first programming language you're learning. Having a guided learning env can be helpful for basics and getting a feel for the language/style aspects. A project simply allows you to apply that learning and stretch yourself.
learnjavascript,3ds93c,guohuade,1 point,Sun Jul 19 06:26:36 2015 UTC,"For me its definitely projects. I can watch lessons til the cows come home but working with real code, trying to solve real problems for my exact use case - that makes me think and learn very quickly. Don't be afraid to write anything. Just write a bunch of nonsense if that's all you can do. Refactoring is totally normal, and you might need 3 or 4 tries (or more!) to get a function or module to do what you want.  I wish I had learned this first but: get started with git right away. If you invest an hour or two into some basic git workflow techniques, you'll save tons of headaches during the learning process. Specifically, at least set up a local repository and use branches for different things that you're learning or when you write a new module. It will keep you sane as you progress and things get more complicated. You don't need a remote repository / GitHub to start with (though it doesn't hurt if you're working on different computers), just a local one will be fine."
learnjavascript,3ds93c,guohuade,1 point,Sun Jul 19 13:28:31 2015 UTC,"Thanks. I didn't see Git as really important but when you brought it up (I only saw it passing on some websites but didn't pay close attention to it), I can see why. I did some Google research into Git and it seems like something you learn to organize different updates to your projects. I have a feeling that GitHub is very popular to use. Would you recommend learning to use this over a local version if I will likely work on 2 separate computers?"
learnjavascript,3ds93c,guohuade,1 point,Sun Jul 19 17:22:19 2015 UTC,Actually you need to understand the local version in order to use git. If you just know how to push and pull from a hosted repository you'll be using about 2% of the amazing functionality that git offers :P
learnjavascript,3ds657,1playerpiano,1 point,Sat Jul 18 23:03:08 2015 UTC,"First, remove those semicolons after if statements' brackets inside the else if block.  Second, why the exclamation point in the else if block's condition? Aren't you checking for the presence of ""February"" rather than the absence of it?"
learnjavascript,3ds657,Triplanetary,1 point,Sun Jul 19 00:27:36 2015 UTC,"if (day > 31) {         document.getElementById(""day_check"").innerHTML = ""Months can't have more than 31 days."";         return false;     }  else if (month.match(/^(Feb|February|FEBRUARY)$/)) {     if(day === 29){         if((year % 4 != 0) && (year % 400 != 0)) {             document.getElementById(""remaining"").innerHTML = ""<h1>This year isn't a leap year. February only has 28 days in "" + year + "".</h1>"";             return false;         }     } };   Like this? As for the exclamation point, I was reading on another thread about how to compare strings to see if they were equal, and this is what came up. I have fixed it... I used that system earlier and I forgot to take the ! out."
learnjavascript,3dpnnk,LikeAScientist,5,Sat Jul 18 06:01:35 2015 UTC,"What are you trying to accomplish with this code? There should be basically no reason whatsoever to use an iframe nor inline JavaScript. What you're probably looking for is a self executing function, which looks like this:   (function() { console.log(""runs on page load""); })();   Append data to or replace data in divs, not iframes."
learnjavascript,3dpnnk,proskillz,1 point,Sat Jul 18 06:30:30 2015 UTC,"Yeah, I'll be honest I'm not extremely experienced with javascript, and I've basically taught myself. But, the idea that there's no reason to use an iframe and no reason to use inline Javascript both seem a bit absurd to me.   Seriously, I'm not a professional, so correct me if I'm horribly mistaken, but unless there's some way to point a div to an html page I think iframe has its place. I doubt I should write entire subpages into the javascript. I really really doubt that's best practice. (and no, normally these subpages should not have to interact with the main page as I'm clearly trying to do right now, but sometimes little features like changing a picture are cool.)  As for the inline Javascript, it's still useful for testing is not? Because yeah, I intended to make a function elsewhere, but for now I need the iframe to communicate when it has changed. And it doesn't as you can see from the tested code.   Unless I just don't understand what your saying I feel like you're hung up on the way I use write, or in my case innerHTML or maybe alert rather than the actual problem of it not communicating.  Maybe that's my fault for not saying the      document.getElementById('myframe').src; was going to be searched in a function... Sorry."
learnjavascript,3dpnnk,JRrebel5534,1 point,Sat Jul 18 16:20:34 2015 UTC,"If you want to insert a div into part of the page on page load (I think that is what you are trying to do) you can use jQuery then use .append(). So if you have JQuery installed you can do $(""#mydiv"").append(""<div Id='newdiv'></div>""); inside of a document ready. I suggest watching some JQuery tutorials. It is very simple once you get the hang of it"
learnjavascript,3dpnnk,proskillz,-1,Sat Jul 18 16:34:35 2015 UTC,"Hahaha, no. Oh god I must be really bad at explaining things.   Also, no JQuery, please.  No what I'm quite exactly trying to do is change an insignia on the main shell page when the sub page's address contains a certain string. the rouble I'm running into is document.getElementById('myframe').src; doesn't seem change or perhaps onload doesn't seem to run each time the iframe changes. Onchange also didn't seem to work."
learnjavascript,3dpxu6,Sennon,9,Sat Jul 18 08:30:35 2015 UTC,You should just use them always.  This isn't CoffeeScript.
learnjavascript,3dpxu6,Rhomboid,0,Sat Jul 18 08:53:30 2015 UTC,What is your reason?
learnjavascript,3dpxu6,Rhomboid,12,Sat Jul 18 09:04:59 2015 UTC,"Not using semicolons introduces the possibility of bugs, either by you or by a collaborator not familiar with your coding style (not to mention any tools you use like minification) and necessitates keeping a set of arcane grammar rules in mind at all times.  Why the hell bother?  I'm always looking for ways to make it impossible for certain types of bugs to occur, and always using a semicolon where it's required and not relying on ASI to put one there for me is one way of doing that.  It's far less mental work to just use them."
learnjavascript,3dpxu6,DullMan,2,Sat Jul 18 09:11:24 2015 UTC,Fully agreed.
learnjavascript,3dpxu6,theQuandary,5,Sat Jul 18 11:13:31 2015 UTC,"Always use them. In my experience that's going to be the coding standard at any decent company. Even if you find them personally annoying, forcing the standard both saves the occasional hard-to-find bug and the frequent easy-to-find idiot with a keyboard."
learnjavascript,3dpxu6,Evanescent_contrail,4,Sat Jul 18 09:06:32 2015 UTC,You will create bugs that are hard to track down.
learnjavascript,3dpxu6,Eartz,2,Sat Jul 18 12:23:21 2015 UTC,"beside the obvious reasons (code readability and appreciation from your colleagues), it will make some bugs related to the automatic semicolon insertion very difficult to spot.  e.g.:  return  1 + 2   will always return undefined, because a semicolon will be inserted right after the return statement. This mistake is easy to spot if you use semicolons."
learnjavascript,3dpxu6,CertifiedWebNinja,1 point,Sat Jul 18 13:13:06 2015 UTC,"This example doesn't make any sense.  You're saying this:   return 1+2   is bad, but this:  return 1+2;   is good, because you see a semicolon?  Fun fact: semicolons or not, the same thing happens. undefined is returned."
learnjavascript,3dpxu6,Eartz,2,Sat Jul 18 16:10:24 2015 UTC,This is indeed a mistake in both cases.  It happens because a semicolon is automatically inserted when a return statement is followed by a line break.  What i'm saying is that it's easier to spot in your code if you are using semicolons everywhere else.
learnjavascript,3dpxu6,CertifiedWebNinja,-1,Sat Jul 18 16:45:39 2015 UTC,That's a bunk argument.
learnjavascript,3dpxu6,bikolya,1 point,Sat Jul 18 17:26:28 2015 UTC,https://youtu.be/bo36MrBfTk4?t=12m41s  I think you should trust this guy.
learnjavascript,3dpxu6,CertifiedWebNinja,1 point,Sat Jul 18 13:14:39 2015 UTC,https://www.youtube.com/watch?v=gsfbh17Ax9I
learnjavascript,3dpxu6,youtubefactsbot,2,Sat Jul 18 16:11:36 2015 UTC,Are Semicolons Necessary in JavaScript? [7:44]   Should you use semicolons when writing JavaScript? Explores why omitting semicolons can be bad and why I have chosen to not use semicolons when teaching JavaScript.   Kyle Robinson Young in Science & Technology  297 views since Jul 2015   bot info
learnjavascript,3dpxu6,IxD,1 point,Sat Jul 18 16:12:24 2015 UTC,It is error correction feature and you should freak out when you learn how it works.   when compiler encounters syntax error it tries to fix it by adding a semicolons to previous line ends
learnjavascript,3dmoeu,tunabee,7,Fri Jul 17 14:49:09 2015 UTC,"Adding a new keyword to a language that has been around for a while and has lots of users is so hard and painful that there's pressure to think of all the possible reserved words that you might ever need up front so that you don't have to add any later, even if you don't have a use for them initially."
learnjavascript,3dmoeu,Rhomboid,3,Fri Jul 17 18:04:03 2015 UTC,They basically copied the Java reserved word list and then added a few others because they sounded good or because JS actually needed them (eg 'function').
learnjavascript,3dmoeu,theQuandary,2,Sat Jul 18 01:13:14 2015 UTC,I think this MDN article has the answers: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Future_reserved_keywords  Tl;dr forward planning by older versions of Javascript
learnjavascript,3dndbt,abrarisland,1 point,Fri Jul 17 17:58:24 2015 UTC,I have a conditional which raises the rate to 85 when the controlled circle covers the entire inner circle   What's your code for that?
learnjavascript,3dndbt,ForScale,1 point,Fri Jul 17 20:05:11 2015 UTC,"There's just an extra else if.  else if (inner_distance + 1.4 * inner_circle.radius < spot_control.radius + inner_circle.radius) {     firing_rate.text = ""85"";     firing_rate.base = 85; }   Not the best code, so I'm hoping to replace it."
learnjavascript,3dndbt,ForScale,1 point,Sat Jul 18 02:45:36 2015 UTC,"This isn't elegant, but why don't you just write different if/elses or a switch to handle all the different percent-of-coverage conditions?"
learnjavascript,3dlp5m,reckscene,2,Fri Jul 17 07:46:13 2015 UTC,"Hmm, you could do so by storing a reference to this (the instance of Human) in a local variable.  http://jsfiddle.net/r4vcqopo/1/  this is a reserved word, and it behaves differently from ""normal"" local variables. (It doesn't follow the same rules of function scoping and all that.)."
learnjavascript,3dlp5m,Eartz,1 point,Fri Jul 17 09:59:18 2015 UTC,"thanks it works, i guess because the this if called in the object refers to the object instead of the human?"
learnjavascript,3dlp5m,Eartz,1 point,Fri Jul 17 10:22:04 2015 UTC,"Yes, kind of. The value of this inside a function depends on how this function is called.  You can see a little demonstration of what I mean here. If you want to know more, I suggest you read this : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call"
learnjavascript,3dlp5m,theQuandary,2,Fri Jul 17 21:22:30 2015 UTC,"You have a constructor that assigns this and then returns an object. That's bad coding style and will give you problems. Let me show you three solutions (ES5.1 constructors, ES6 classes, and then ES5.1/6 module pattern -- generally the best pattern).  var isUndef = function (x) { return x === undefined; };  var Human = function (myFruit) {   //if the user doesn't give a fruit value, set it to 'apple'   this.myFruit = isUndef(myFruit) ? 'apple' : myFruit; };  Human.prototype.publicTitle = ""Hey!""; Human.prototype.getFruit = function () {   return this.myFruit; }; Human.prototype.getPublicTitle = function () {   return this.publicTitle; }; Human.prototype.setFruit = function (newFruit) {   this.myFruit = newFruit; };  var person1 = new Human(); var person2 = new Human('Annoying Orange'); console.log(person1.getPublicTitle); console.log(person2.getPublicTitle);   This is how it works (for example, with person1). When you use 'new', a new Object is created. This object is passed to Human as the 'this' of the function and  the prototype of the new object is set to the prototype of Human.  this.fruit sets the default fruit on the new object and the object is automatically returned. You should NOT return a value from a standard constructor.  When we call the getFruit() function, our person1 object checks itself for the function. It won't find the function, so it checks it's parent prototype and finds it there. When it executes the function, it passes the this of your object instead of the Human object. Likewise, if you asked for publicTitle then it would find it in the Human prototype.  person1.publicTitle = ""Something, something, something, something prototypes...."";   Note that if person1 added it's own publicTitle, then it won't affect person2. After adding it's own, local property, person1 won't be able to access the Human property.  When you call person1.getPublicTitle() the person1 object will check if the function is inside itself (but it isn't since we didn't make one), then it will check it's parent prototype and find it there. When the function runs, it will pass the this of person1, so when it attempts to access this.publicTitle it will find it immediately and return it.  If we run the same function with person2 it will find the function in the Human prototype. The this of the function will be person2, but when it searches for this.publicTitle , it will once again find it in the Human prototype.  class Human {   //this is your Human function from before   constructor(myFruit) {     //if the user doesn't give a fruit value, set it to 'apple'     this.myFruit = isUndef(myFruit) ? 'apple' : myFruit;   }   getFruit() {     return this.myFruit;   }   getPublicTitle() {     return this.publicTitle;   }   setFruit(newFruit) {     this.myFruit = newFruit;   } } //we can't add non-function items to the //constructor in ES6. This may change in ES7 //Luckily, we can still access the prototype manually Human.prototype.publicTitle = ""Hey!"";  var person1 = new Human(); var person2 = new Human('Annoying Orange'); console.log(person1.getPublicTitle); console.log(person2.getPublicTitle);   There's not too much to say about this that wasn't said before. The advantage here is simply the easier syntax  (there are other advantages like 'extends' and 'super', but they don't factor in here)  var makeHuman = (myFruit) => {   var myFruit = isUndef(myFruit) ? 'apple' : myFruit;   var publicTitle = ""Hey!"";    var getPublicTitle = () => publicTitle;   var getFruit = () => myFruit;   var setFruit = (newFruit) => {     myFruit = newFruit;   };    return {getFruit, setFruit, getPublicTitle}; };  //looks similar and basically works the same but without the edge cases var person1 = makeHuman(); var person2 = makeHuman('Annoying Orange'); console.log(person1.getPublicTitle); console.log(person2.getPublicTitle);   There are several different things here. The first is that the first letter isn't capitalized. If you don't use the new keyword, your function shouldn't be capitalized. I use 'make' before module factories so my users know what they are at a glance.  The second thing is => syntax (called 'fat arrow'). It is an ES6 feature and differs from function in that it has no arguments object and it is lexically bound to it's declaring  scope (that doesn't matter for this example, but is important to know). Finally, if it has only one statement, it automatically returns the result of the expression and also doesn't need any curly braces.  You will also notice that the return object doesn't have any : <val> present. In ES6, return {foo, bar} is the same as return {foo: foo, bar: bar}. It's a bit easier to read and is also easier to write.  Next, you will see that I don't need the this keyword anywhere. I find this to be very useful becaue (as you read above) it can be very complex to use with a lot of edge cases. For what it's worth, the factory is also shorter to write.  This function is also different in another important way. You cannot modify myFruit without using the getter/setters. Further, you may not ever modify publicTitle. This is because the return statement creates a closure (that is, the functions in your object can continue to access all the variables we defined inside the makeHuman function).  This last feature of factories is what makes them most desirable IMHO. You can't get private variables when you use constructors, but you can when you use factories and the module pattern."
learnjavascript,3dlp5m,senocular,1 point,Sat Jul 18 09:02:43 2015 UTC,"You really don't want to be usingthis in the constructor for this approach. Because you're returning an object from the constructor, the this object gets discarded.  The parasitic approach doesn't use this, instead focusing on the internally created object that is returned from the constructor.  Create an object, augment that object, then return the object.  this is not part of that and shouldn't as the value of this would change depending on whether or not use use new with the constructor (where with parasitic inheritance new is optional)."
learnjavascript,3dlpap,thinkvitamin,2,Fri Jul 17 07:48:12 2015 UTC,Can you post a full example?
learnjavascript,3dlpap,zachwolf,1 point,Fri Jul 17 09:26:38 2015 UTC,"If you're talking about a google search results list, the problem is probably because that attribute isn't added until after you click on a link.  Try opening a few links in new browser windows/tabs and re-running that query."
learnjavascript,3dle3k,SCrusader,2,Fri Jul 17 05:25:31 2015 UTC,"Your second example  var cashRegister = {     total:0,     cashRegister.add = function(itemCost){         this.total += itemCost;     } };   is invalid JavaScript. Objects take the form  var obj = {     key: value,     key: value     // ... }   whereas you have done  var obj = {     key: value,     obj.key = value }   The closest thing to what you wrote that would be valid is  var cashRegister = {     total:0 };  cashRegister.add = function(itemCost){     this.total += itemCost; }   and that is equivalent to your first example."
learnjavascript,3dle3k,jml26,1 point,Fri Jul 17 09:31:07 2015 UTC,"function StaffMember(name, discountPercent) {     this.name = name;     this.discountPercent;  }  var sally = new StaffMember(""Sally"",5);   the reason for using 'this' is so that the function can access the arguments. without 'this' sally.name would be undefined, whereas with 'this' sally.name would be ""Sally"".  check it http://repl.it/x1W/1"
learnjavascript,3dle3k,nofreedinner,1 point,Fri Jul 17 07:08:00 2015 UTC,So is this.discountPercent just acting as a placeholder for the sake of the example or should it also be this.discountPercent = discountPercent in order to be useful?
learnjavascript,3dle3k,FricoSuave,1 point,Fri Jul 17 15:58:58 2015 UTC,the latter. this.discountPercent = discountPercent binds the object property to the argument passed into the functon
learnjavascript,3dle3k,nofreedinner,1 point,Fri Jul 17 17:58:04 2015 UTC,So it's non-functional in the example?
learnjavascript,3dle3k,FricoSuave,1 point,Fri Jul 17 18:26:55 2015 UTC,"For more on the second example, when you use new with a function, it turns that function into an object constructor. As a constructor, a new object is created in the background and assigned to what is represented as this in the function.  Once the function is complete that this object is automatically returned, as if return this was automatically inserted into the end of the function.  Nothing automatic happens with the parameters as part of this process, so if you want them to be properties of the object being created, they will need to be copied in.    Could they have been automatically created as object properties?  Sure, but that would be going with the assumption that everyone would expect all constructor parameters to be object properties and that would be pretty presumptuous.  For example, if you create a new Date instance using new Date(""2015, JANUARY, 25"");, that format string is not expected to be a property of the date. Its just there to determine what date the Date object represents.  So if you want parameters to become properties, its done selectively and manually.  P.S. in your particular example this.discountPercent is not made a property of the object created because it is never assigned a value."
learnjavascript,3dlbuc,biGb1313,1 point,Fri Jul 17 05:00:50 2015 UTC,You'll wanna look at adding a collider (Circle Collider) to the Shapes you're drawing.  See: here.
learnjavascript,3djivf,Subdepth,2,Thu Jul 16 19:52:33 2015 UTC,"window.open() should return a reference to the window it opens.  so instead, do something like:  var w1 = window.open();     w1.moveTo();"
learnjavascript,3djivf,mattlag,1 point,Thu Jul 16 20:14:24 2015 UTC,Thanks!
learnjavascript,3diuss,ronbrugal,3,Thu Jul 16 16:58:50 2015 UTC,"I'm new to React, but I want to say no, it doesn't replace it; it's solving different problems.   React creates a virtual DOM, compares that to the actual DOM and updates accordingly. As far as I can tell, React doesn't manipulate nodes that exist outside of the app. Maybe there's a way to do that, but I haven't seen it yet."
learnjavascript,3diuss,Pantstown,2,Thu Jul 16 17:42:57 2015 UTC,Thanks
learnjavascript,3diuss,kor_the_fiend,3,Thu Jul 16 17:56:09 2015 UTC,jquery would be a more direct solution
learnjavascript,3diuss,DevonAero,2,Thu Jul 16 23:29:19 2015 UTC,"That depends. For simple things plain JS will probably do, but more advanced stuff the two data binding of Angular comes in handy. That or a templating framework."
learnjavascript,3diuss,theQuandary,2,Thu Jul 16 17:36:36 2015 UTC,Thansk
learnjavascript,3dg291,Oldmangramps,1 point,Thu Jul 16 00:06:03 2015 UTC,I'm not sure I understand your exact question but can you make a class to style each and swap classes on click?
learnjavascript,3ddphe,reckscene,2,Wed Jul 15 13:44:04 2015 UTC,"Ok first off, JS is not a class oriented language. Those topics in the video are true yes for true class oriented languages like Java or C#. The ""classes"" that you see in a JS are a sort of hack to mimic classes. There is no such things as private, rather think of it as scope.  The most common pattern you will see is the prototypal pattern, however I strongly recommend you read through the You Don't Know JavaScript book series. To quote the book:   While we may have a syntax that looks like classes, it’s as if JavaScript mechanics are fighting against you using the class design pattern, because behind the curtain, the mechanisms that you build on are operating quite differently. Syntactic sugar and (extremely widely used) JS “class” libraries go a long way toward hiding this reality from you, but sooner or later you will face the fact that the classes you have in other languages are not like the “classes” you’re faking in JS."
learnjavascript,3ddphe,papers_,1 point,Fri Jul 17 03:10:47 2015 UTC,"to add to your reply and quote crockford :   I have been writing JavaScript for 14 years now, and I have never once found need to use an uber function. The super idea is fairly important in the classical pattern, but it appears to be unnecessary in the prototypal and functional patterns. I now see my early attempts to support the classical model in JavaScript as a mistake.   http://www.crockford.com/javascript/inheritance.html"
learnjavascript,3ddphe,Eartz,1 point,Fri Jul 17 10:23:08 2015 UTC,how about Parasitic vs prototypal as i believe crockford came up with it
learnjavascript,3ddilp,Cosmologicon,1 point,Wed Jul 15 12:38:25 2015 UTC,Like going to the javascript optometrist!
learnjavascript,3ddc42,Gerret58,3,Wed Jul 15 11:23:47 2015 UTC,"The names are inserted here https://github.com/wilhelm/learn-kana/blob/master/script.js#L54  You can see it just takes ""Level "" and puts a number behind it.  Edit If you want to rename then, the simplest would be something like:  function generate_checkboxes() {   var labels = [""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H""]; // Your texts here    for (var i = 0; i < level.length; i++ ) {     // ...     var caption = document.createTextNode(labels[i]);     // ...   } }"
learnjavascript,3ddc42,andersevenrud,1 point,Wed Jul 15 11:55:57 2015 UTC,"Thank you, but still I too new to JS. How should it look like? Something like this or I should delete all of old code for generating checkboxes ?   var caption = document.createTextNode((i + 1)); label.appendChild(checkbox); label.appendChild(caption);   function generate_checkboxes() { var labels = [""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H""]; // Your texts here  for (var i = 0; i < level.length; i++ ) { var caption = document.createTextNode(labels[1]); var caption = document.createTextNode(labels[2]); var caption = document.createTextNode(labels[3]);  } }"
learnjavascript,3ddc42,Sandbucketman,2,Wed Jul 15 13:08:32 2015 UTC,var caption = document.createTextNode(' Level ' + (i + 1));   You can change the text between the quotes(which is ' level ' right now) to become something else. the (i + 1) is for the number.
learnjavascript,3ddc42,andersevenrud,2,Wed Jul 15 13:54:38 2015 UTC,Change the function too look like this: https://gist.github.com/andersevenrud/3b0ef8ed7aae3ec49be4  I just swapped out the parts with the stuff I noted in previous comment
learnjavascript,3ddc42,andersevenrud,1 point,Wed Jul 15 13:55:43 2015 UTC,"Thank you all for help, this is working."
learnjavascript,3daany,cygnus83,3,Tue Jul 14 18:50:44 2015 UTC,"Actually, there might be a much, much easier way.  Are all these lines similar?  If so, you can just open them up in a text editor like Sublime Text, highlight one instance of the similar text, and Sublime will highlight the other ones for you.  If you want to highlight several different things, you can actually do that using regular expressions still in Sublime Text by just doing a search."
learnjavascript,3daany,xiipaoc,2,Tue Jul 14 23:35:38 2015 UTC,"Oooh.. that's neat... i never thought sublime had that regexs, that's definitely the simplest way to go.  If you do javascript you need to learn about, variables, loops, functions, scope, and learn how to program. While regex's well you can just instruct it on what exactly you want to find, then do something with it, if it's formatted text, then it's very simple to find things with regex.  Simple visualization/better tutorial would be this http://regexr.com/."
learnjavascript,3daany,SimonWoodburyForget,1 point,Wed Jul 15 05:36:06 2015 UTC,"Ideally I would be able to do it in browser, as all of the info is in a VersionOne (agile tracking) story.  If I do have to copy it out somewhere, your approach sounds great - thank you!"
learnjavascript,3daany,fukitol-,1 point,Wed Jul 15 14:36:07 2015 UTC,"Yes, and once you've got your data structure look at console.table()"
learnjavascript,3daany,Vordus,1 point,Tue Jul 14 20:18:13 2015 UTC,Regular Expressions in JS
learnjavascript,3daany,xBrodysseus,1 point,Tue Jul 14 23:47:39 2015 UTC,"Yeah, you could write a little bookmarklet to use RegEx to find those matching strings, and wrap them with a <span> element that has has some CSS styles applied to highlight the text."
learnjavascript,3daany,00mba,0,Wed Jul 15 04:56:57 2015 UTC,Yes.
learnjavascript,3daany,cport1,1 point,Tue Jul 14 19:11:07 2015 UTC,"Haha, ok cool - thank you =D  Follow up: what is the correct term for a little snippet of code maybe positioned on one's bookmark bar, which would serve as the trigger for this highlighting?"
learnjavascript,3daany,Evervision,2,Tue Jul 14 19:34:18 2015 UTC,a bookmarklet?
learnjavascript,3daag0,reckscene,3,Tue Jul 14 18:49:16 2015 UTC,"In the first link the private variable is created every time the Parent constructor is run.  How many times do you run it?  Once. And to use it to define the value for Child.prototype - the object which represents values shared across all instances of child.  This means flipPrivateVariable and getPrivateVariable are shared as well as the single variable they access.  The second link is awkward because you're newing Child2, but returning an instance of Parent2. So no child is created and no inheritance is happening.  If you use new with a constructor function that returns something, what you get is what was returned.  function Foo() {   return {bar: 'bar'} } var foo = new Foo() console.log(foo instanceof Foo) // -> false console.log(foo) // -> {bar: ""bar""}   So with Parent2 instance you get unique private vars because the Parent2 constructor is run for each instance so each get their own copy of the var (and flipPrivateVariable and getPrivateVariable methods).  What it seems like you want is the first link but with Child defined as:  function Child() {     Parent.call(this); // super }  Child.prototype = Object.create(Parent.prototype);   Object.create shares the Parent prototype definitions with Child without running the constructor on the prototype. That constructor is what is needed at the instance level which is handled with Parent.call() in the Child constructor."
learnjavascript,3daag0,senocular,1 point,Tue Jul 14 20:16:09 2015 UTC,thanks alot for the explanation. it really cleared my mind
learnjavascript,3daag0,senocular,1 point,Wed Jul 15 06:47:18 2015 UTC,second link required NOPE. They're just side by side. Didn't see.
learnjavascript,3d9euy,ero_mode,4,Tue Jul 14 15:10:33 2015 UTC,"This is an interesting question. For me, the answer is maybe, but probably not the type of change you'd expect.   In a way it's made me a better problem solver, forced me to break down my problems into smaller, more reasonable chunks, but I feel that would be true of any programming language. One thing in my problem solving I've focused on that is probably more due to JavaScript is a stronger focus on the order of operations or the sequence in which I tackle problems. I'd say that's due to super weird race conditions and undefined functions and variables that aren't hoisted properly. Once you hit those a certain number of times, you start really focusing on the actual order of your solution.   JavaScript's prototype design and its flexibility in object creation has lead me to be a bit more experimental in how I solve problems, too. It's so flexible and while there is an 'idiomatic' way to do things, it's far from the best or only way to do things. Experimenting with different methods has definitely expanded the possible solutions I consider. Because of how much you can do with it, learning JavaScript has taught me to be clear and concise in my programming and how I describe things. There's nothing quite like going into an old code base and not knowing what the hell you were doing just because you were being clever and unexplicit.   The JavaScript developer community has taught me to always question if a solution has any value at all. Not because of a general consensus shared by the community, but because of the sheer number of useless or duplicate libraries out there. There's just way too much shit to try everything and most are just a copy of something else. Programming in JavaScript has honed in my ability to spot the difference between an opinion and a fact because in JavaScript there are tons of ways to do most anything, but most programmers will claim their way to be the only way without contest or consideration for other possibilities. So too they will scoff at or avoid whole features of the language simply because it's not in their reportoire.   Also, because of this, learning JavaScript has taught me to question everything, has taught me that there is no best solution and even the most accepted solution has its flaws. It has taught me to be more critical when considering a solution's value and an opinion's worth."
learnjavascript,3d9euy,kevinambrosia,1 point,Tue Jul 14 15:50:29 2015 UTC,"Yup.  The fact that JS has so many caveats and quirks forces you to go about any problem with ""What if it isn't what I think it is"".  Makes me look at the broader issue from a more objective perspective where I'm just a part of the scenario and not ""the subject"" in the scenario.  I appreciate other peoples situation far better through that."
learnjavascript,3d9euy,Bunnymancer,1 point,Tue Jul 14 18:19:08 2015 UTC,"Yea I definitely enjoy general problem solving more in every day situations / refuse to not figure something out that I know I can do. Also, it makes me naturally want to break down a problem and go about it more strategically than I previously would have."
learnjavascript,3d9euy,fsites,1 point,Tue Jul 14 19:45:42 2015 UTC,"Changed it? Absolutely. Helped it? Debatable. Sometimes the best way to figured out one of the ""quirky"" parts of javascript is to brute force it and work backwards. This is great, for javascript. In other situations I think the ""keep doing it this way"" brute force mentality prevents me from stepping back and reevaluating my strategy and instead I end up with a convoluted, barely correct solution."
learnjavascript,3d9euy,commitpushdrink,1 point,Tue Jul 14 20:38:29 2015 UTC,I wish relationships were as easy to debug.
learnjavascript,3d9euy,jaysprout,1 point,Thu Jul 16 00:59:33 2015 UTC,Absolutely. I think it really effects how you problem solve (debugging). You have more patience and you can categorize your big problem into smaller problems. Also with things like general organization. The need for me to make clean code has trickled down into other areas of my life.
learnjavascript,3d9euy,00mba,1 point,Tue Jul 14 15:49:39 2015 UTC,"Yes, I now think more algorithmically about ""real world"" problems."
learnjavascript,3davy1,giscard78,2,Tue Jul 14 21:14:56 2015 UTC,"Using an id (#) means there is only one. It would be invalid to have two ids of the same name in the same document.  If you want to reuse names, classes (.) are used instead.  If it were based off a class, there might need to be more specific targeting to specify which one depending on the circumstances. Yes. It sets up an event listener - a function that gets called after something happens. In this case, the function after the 'click' gets called any time someone clicks on the '#add' element referenced by the add variable. As the comment indicates, it prevents the default behavior of the submit button which, usually when clicked, will submit a form posting its information to a new url (unloading the page and loading the form destination). This is a browser behavior automatically attached to submit buttons. preventDefault is the JavaScript way of saying, ""Hey browser! Don't do what you normally do. kthxbye!"" Yes. You could also use append which adds it to the other end of the list. http://api.jquery.com/category/manipulation/dom-insertion-inside/ Item text seems to be wrapping for me. What browser are you using? Only if there's something else you don't understand ;)"
learnjavascript,3davy1,senocular,1 point,Tue Jul 14 21:32:50 2015 UTC,"Oh I see, so on var listContainer it knows to add to <ul>id=list</ul> back in the html then the function adds it with the html <li></li> with the thing listed in the center, gotcha!  on = event listener that goes off with a click then performs a function.  I did not know that submit buttons want to open up a new url. Is it standard for adding to a list to use .preventDefault() ?  Append/prepend, got it.  I am using chrome but now it is fine. I am not sure what is going on.  inputValue = $('#input').val();    This is what is the thing that is taking input and moving it to be prepended to the listContainer?  Thank you for help, I really appreciate it! Even just typing this stuff out helps it make more sense."
learnjavascript,3davy1,senocular,2,Wed Jul 15 02:24:09 2015 UTC,"Yeah, listContainer is a variable that represents a piece of HTML in the document. Its actually a jQuery object which is a list of 0 or more references, and when you call functions from a jQuery object, it runs that function on each of those references. But since '#list' only matches one html object, that's whats in the listContainer variable.  The prepend call is what does the adding into the HTML - into the HTML that listContainer represents. If there were more matches for what was passed into $() when listContainer was created, then prepend would be applied to each one of those.  preventDefault doesn't have to do with adding to a list.  It pertains to the event itself - what caused that function to run.  What you do in that function (adding, removing, alerting, whatever) doesn't really matter as far as preventDefault is concerned.  What matters is if you want the browser to do what it normally does during such events or do you want to stop it. In this case, I would have just used a regular button rather than a submit button. Then you wouldn't have to call preventDefault because regular buttons do nothing on their own.  What makes submit buttons useful is that they perform an action even if you don't code a thing. So they can be useful for a fallback, but again, for this example I wouldn't use one.  inputValue - yes.  '#input' targets an HTML element, specifically the text field.  Being used with $() a jQuery object is created and then .val() is accessed off of that.  val() gets the value of a jQuery object, which for text fields is the text it contains.  That text is assigned to the variable inputValue which is then used to generate the HTML for the list item (used in prepend).  I should add that this fiddle is doing tripple-load detection. The fiddle by default will run code in the load event for the page, meaning everything has loaded.  This code - on top of that - adds $(document).ready(function () { AND $(function () { ... which is a shorthand version of ready().  The ready event is like the load event except it only pertains to the DOM, or the HTML hierarchy of the page, not the content of the page. So it will happen before the load event since the load event has to wait for other things to load (not just the HTML) such as images.  So when the code of the fiddle runs, its running in the load event - the whole thing is wrapped (you dont see it). Then on top of this, ready() and the ready shortcut are used which are completely superfluous at this point.  Even just one ready() would be unnecessary (maybe someone didn't know the fiddle runs code in the load event or maybe the code was copied and pasted from another location), but including 2 is simply incorrect.  Both of those ready event handers could be removed. :)"
learnjavascript,3davy1,Rhomboid,2,Wed Jul 15 04:16:44 2015 UTC,"I just want to note that event.preventDefault() is completely bogus and incorrect.  This is relying on event being a global variable, which is an IE-ism that I believe WebKit adopted for compatibility.  But it's completely non-standard and should not be used.  If you run the fiddle under Firefox (and possibly other browsers), it does not work properly because of this.  If you're using jQuery, the proper way to prevent the browser default behavior is to return false from the event callback.  If you're not using jQuery, then an event object is also passed as the first parameter to the callback, and it will have a preventDefault() method that you can call.  (This is also the case under jQuery, except that the event object is a jQuery object in that case that models the ideal browser event object.  That might be the source of the confusion, because the jQuery documentation says you can call event.preventDefault() like what was written in this fiddle, but that is predicated on writing the function as taking event as an argument, which is not the case here.)"
learnjavascript,3davy1,Rhomboid,1 point,Tue Jul 14 22:07:32 2015 UTC,"Phone posting from the gym so forgive me for the brevity but I'm trying to digest it, why does it still function? When I greyed it out earlier, it did not work."
learnjavascript,3davy1,Rhomboid,2,Tue Jul 14 22:22:03 2015 UTC,"It works because, as I said, you happen to be using a browser that implements that particular bit of IE non-standard behavior.  That is not the case of every browser."
learnjavascript,3d7nwr,Subdepth,6,Tue Jul 14 03:51:58 2015 UTC,Join us on IRC: http://webchat.freenode.net/?channels=learnjavascript  People are pretty friendly and ready to help if you're actually trying.
learnjavascript,3d7nwr,FricoSuave,1 point,Tue Jul 14 14:30:56 2015 UTC,"Yes! I would love to do this! I like helping people with js and doing so helps me to learn!  I'm no master... I'd say I'm n00b to intermediate... maybe finally more intermediate than n00b...  Anyway, anyone with any questions or who would like to collaborate on anything, feel free to shoot me a message or comment here or whatever!  Also, op, if you're interested in getting something more formal going... I'd love to advertise/throw together a tutor group... business? I'd love to help others, learn, and make some $ in the process! :)  Here are samples of little projects I've done, if anyone is interested: http://codepen.io/ForScale/popular/"
learnjavascript,3d7nwr,ForScale,1 point,Tue Jul 14 13:31:07 2015 UTC,Sure
learnjavascript,3d7nwr,utuxia,1 point,Tue Jul 14 18:43:10 2015 UTC,Glad you made this OP. I could use the tutoring from my peers.
learnjavascript,3d7nwr,necronkode,0,Wed Jul 15 03:39:42 2015 UTC,No problem! :)
learnjavascript,3d4hs5,frankyfrankfrank,22,Mon Jul 13 13:28:06 2015 UTC,"Node.js allows you to run JavaScript outside of a browser. The implications of this are pretty huge for JavaScript. Node allows you to use JavaScript to perform actions on your local machine, things that you would have otherwise needed languages like Python, C++, or Java to do since JavaScript is no longer bound to the browser.  Node also comes with the ability to run HTTP applications written in JavaScript, essentially playing the role of other applications such as Apache's httpd. This has given rise to the development of isomorphic web applications which run JavaScript in the browser as the client experience and JavaScript on the backend to handle client requests. Since it's JavaScript in both realms there is an opportunity to share code between the two reducing the test and maintenance costs of the application overall."
learnjavascript,3d4hs5,Meefims,2,Mon Jul 13 14:24:13 2015 UTC,"Thank you, I'm going to have to do some follow-up googling, but this helps me."
learnjavascript,3d4hs5,what-the-what-what,1 point,Mon Jul 13 14:53:17 2015 UTC,Node is single threaded so that is very much different than the other server-side languages
learnjavascript,3d4hs5,LurnRuby,2,Mon Jul 13 21:59:59 2015 UTC,"One of the difficulties of learning Javascript was figuring out how to get user input to work locally. Besides chrome dev tools, is there any way to prompt user or get user submitted information locally on my device while I'm testing my code?  Node has been great, but I don't see any user input functions for it and makes my learning experience tougher."
learnjavascript,3d4hs5,suck_at_coding,2,Mon Jul 13 20:25:39 2015 UTC,"There's a built-in lib with the newer version of node here: https://nodejs.org/api/readline.html  Or you can use this NPM package: https://github.com/flatiron/prompt  I think the better way to go is to just execute the script and pass in the arguments, like node myScript.js arg1 arg2. You can use commander.js to make this easier as well, or just use process.argv[2]"
learnjavascript,3d4hs5,jaysprout,1 point,Tue Jul 14 00:15:55 2015 UTC,Excellent answer.
learnjavascript,3d4hs5,zigzagzig,9,Thu Jul 16 00:53:50 2015 UTC,Here is a good intro video I found:  https://www.youtube.com/watch?v=G4rJKNNUkbQ
learnjavascript,3d4hs5,ProgrammingPro-ness,1 point,Mon Jul 13 15:10:39 2015 UTC,bahaha the intro
learnjavascript,3d4hs5,suck_at_coding,1 point,Mon Jul 13 15:14:16 2015 UTC,That intro was great ^_^
learnjavascript,3d4hs5,Ob101010,5,Mon Jul 13 20:22:36 2015 UTC,"A lot of programmers use this thing called javascript to make all the websites pretty and cool. Up until now, they could only use this javascript thing on websites, but now they can use it anywhere. A lot of the people who are fans of javascript are pretty happy about that because they can do new things now without learning another language. Javascript is a weird language that does a couple important things really well (async/event loop), kind of like that smelly kid on your basketball team that can't dribble or pass (tooling, language features and gotchas) but has a hell of an outside shot.     A little less ELI5: Certain programming languages and environments are better for certain things. For decades, Javascript's domain has been the browser and you simply couldn't use it to write a webserver or really anything that couldn't be run inside of the browser. That limits a lot of what you can do. Other languages and environments were used for this stuff like Java, C#, Go, C, etc. Node.js cracks this open using Googles V8 engine (written in C++) to bridge the gap, so that node can be used in any context that any other language can be used in.  What's good about node? The main advantage is the asynchronous nature of the language, which is caused by the single-threaded event-loop, which is a fancy way of saying ""I can schedule a bunch of jobs simultaneously, and I'll be able to answer them as soon as they are done processing - no job that is done will have to wait around for me to get around to it because I'll know instantly"". Most other languages execute a line of code at a time, and can't move to the next until that line is done. Since most other languages don't do this, you have to write javascript in a different way and a lot of developers hate that (callback hell)."
learnjavascript,3d4hs5,SirSourdough,1 point,Mon Jul 13 22:22:46 2015 UTC,Thank you for ELI5 language :)
learnjavascript,3d4hs5,Ob101010,3,Mon Jul 13 22:33:56 2015 UTC,"Ok, you know how javascript is single threaded?  Compare to java, which is multithreaded.  Whats this mean?  Imagine this setup :  nGB of ram on modern server hardware.  Java : each thread consumes some of this ram. You can get 4,000 or so connections going at the same time before running out of resources.  Javascript : Single thread. Each 'event' comes in, is delegated to wherever, and javascript keeps churning away.  Same setup, 1,000,000 connections before you run out of resources.  Numbers pulled out of my ass but you get the picture. 250x is not a stretch though.  This is why companies like netflix use it : performance.   Theres other reasons to use it as well. Theres server side frameworks like express that let you replace PHP with javascript. So now your whole stack, from server, web framework, front end, and database are all javascript."
learnjavascript,3d4hs5,00mba,7,Mon Jul 13 19:32:11 2015 UTC,Dude you know some fucking brilliant 5 year olds...
learnjavascript,3d4hs5,Ob101010,1 point,Mon Jul 13 19:40:56 2015 UTC,"I dont believe this is all that out of grasp for most 5 year olds.   It is out of grasp of most 'programmers' Ive met though.  Fun experiment : explain something like this to a 5 yr old and see what you get. When you throw away ego, and arent afraid of looking dumb, you end up with really great questions."
learnjavascript,3d4hs5,suck_at_coding,1 point,Mon Jul 13 21:56:40 2015 UTC,This is counter intuitive. I would assume as a layman that multithreaded would be better.
learnjavascript,3d4hs5,00mba,1 point,Mon Jul 13 20:07:10 2015 UTC,"Threading adds a crapton to the heap. Havent done it for awhile so I dont know how much its changed, but a fun exercise is to do java performance testing."
learnjavascript,3d4hs5,xiipaoc,1 point,Mon Jul 13 21:53:54 2015 UTC,"It's a bit of a misnomer. Node.js isn't really single-threaded. The event loop is a single thread, but all the work is done in other threads which are handled by libuv"
learnjavascript,3d4hs5,fsites,0,Mon Jul 13 22:38:10 2015 UTC,"Man, this is why I love asking questions here. Thanks!"
learnjavascript,3d4hs5,fukkus,3,Mon Jul 13 23:04:12 2015 UTC,"Real simple.  Node.js runs JavaScript.  When you write some JS, it's a text file, right?  Well, something needs to go and actually do the stuff in the file.  That's Node.  Node isn't the only way to run JavaScript.  You can also make a JS file and open it in your browser, and your browser will do the stuff in the file.  For example, let's say you make a JavaScript file that says console.log('hello world');.  Simple, right?  If you double-click it, you'll get a text editor with a file that says  console.log('hello world');  and you can edit it.  If you drag it to Chrome, you'll get a blank window and if your developer console is open, you'll get a new line that says ""hello world"".  That's because Chrome went through your file and did the stuff it told it to do!  Chrome has a console object that it knows about, and it understands that the dot means that you're going to access one of its keys, in particular, the log key, which it knows is a function, and it receives the string 'hello world' as a parameter because it understands how functions work.  So does Node.  If you use Node to run this file, well, Node knows about the console as well, and Node's console also knows how to log things, and Node also understands dot notation and functions and stuff like that.  Of course, the browser's console -- it's in Developer Tools and has all sorts of nifty features -- and Node's console -- which just outputs text to the command line -- are different.  Still, both Chrome and Node provide consoles, and both of them execute your code.  Your text editor does not!  Now, why would you want to use Node?  Because you have some JS that you want to run!  Node has a lot of nice features.  So do Python, Perl, Ruby, etc.  Even Java and C and C++ have nice features.  Different ones, generally!  In particular, Node makes it really easy to set up a server.  A server is basically a program that listens for requests and responds to them with some data.  Node also has a nice package system and a nice way to handle package dependencies.  Node is single-threaded and makes asynchronous execution easy -- that's when you tell Node to do something but don't wait for it to finish.  Instead, you give it a function to call when it's done.  So instead of sitting around waiting for that database operation to happen, for example, your program is free to listen to other requests, and when the database is done, it will tell you.  Finally, Node lets you program your entire web app in one language -- JavaScript.  Nifty, huh?"
learnjavascript,3d4hs5,rkho,2,Mon Jul 13 23:42:39 2015 UTC,Perfect
learnjavascript,3d5wln,cmartin616,1 point,Mon Jul 13 19:46:24 2015 UTC,What kind of templating are you doing already that isn't this different approach?
learnjavascript,3d5wln,senocular,1 point,Mon Jul 13 20:13:58 2015 UTC,I'm using Backbone views to inject pre-built component based HTML into elements.  This felt like it necessitated a different approach due to the dynamic but procedurally created content.
learnjavascript,3d5wln,senocular,1 point,Mon Jul 13 20:27:31 2015 UTC,To me it seems like Backbone views still works here.  That's pretty much what they do.  You give them data and they produce/update the HTML.  Multiple instances of the same view can render different data sets as separate chunks of html.
learnjavascript,3d5wln,TMiguelT,1 point,Mon Jul 13 21:03:18 2015 UTC,"Realistically, I think this whole thing could be much better done with a static HTML templating engine. You don't really need any of this to be written in JavaScript because none of it is dynamic (as in none of it changes after the page is loaded - static templating engines still generate dynamic pages from data like you've done)  If you do that, you've got a huge amount from options of existing template languages for every language imaginable. My absolute favourite would have to be Jade, which uses Node so it should be really easy to install (npm install jade -g). Have a look at how beautifully simple its syntax is. If your resume is just part of an existing website, you can use jade as part of your build step (I suspect there's a plugin for webpack and browserify, as well as gulp and grunt). And if it's not for a website, you can just use jade resume.jade from the command line to compile it.  Some other great template engines are jinja2 for python or it's node port, Nunjucks."
learnjavascript,3d4frv,RobertoLisak,1 point,Mon Jul 13 13:08:22 2015 UTC,"I often do things like this in sites that I design, though a bit simpler.  Like this site, if you click on the ""Our Services"" link, it fades out the current content and fades in a new page, changing the URL and everything."
learnjavascript,3d4frv,dangoodspeed,1 point,Mon Jul 13 17:29:49 2015 UTC,<sarcasm> WTF is Ajax? Is that a new programming language? </sarcasm>
learnjavascript,3d6i43,jquestion2,2,Mon Jul 13 22:19:09 2015 UTC,You should attach your key events to $(document) instead of a div so that they can be captured.  You generally only want to target something specific when you're listening to specific key inputs for something like a text input field rather than just general key detection (which it looks like you're after)
learnjavascript,3d6i43,senocular,2,Mon Jul 13 22:43:15 2015 UTC,"And now for an explanation as for why you should attach to document:  Events in Javascript (such as keydown, mouseover, click, etc.) propagate throughout the DOM (the DOM is basically a way for machines to understand HTML, by splitting it up into a tree of nodes with children, siblings, parents, etc.) - that is, they ""bubble"" up through the hierarchy of elements, until they reach the root node, triggering the event on every element it moves through (you can also use ""capture"" propagation, which moves down the hierarchy instead of up. See this fiddle. Bubbling is the most used, and supported, one though).  Let's imagine that you wanted to catch a click event, not a keyup/keydown event here. If you attach the event handler to .ryu, it'll only be called if a child (or grandchild) of the .ryu element is clicked. If any of its siblings, or its parent (or grandparents...), is clicked instead, the handler won't be triggered. Sad day indeed. Therefore, if you want to catch all click events, you'll need to attach your listener to the highest node in the DOM, document.  Basically the same thing applies to keyup/keydown, although there is the caveat that they are fired directly on <body> if you don't have focus on an <input> or similar.  Also keep in mind that event handlers can stop propagation by calling Event.stopPropagation, thereby stopping the event from reaching the root node. You shouldn't worry about that, though.  TL;DR: Events move through the DOM. If you want to catch all events, attach the listener to the highest node in the DOM. Oh, and keyboard events are fired on <body> by default."
learnjavascript,3d5hne,valisi,1 point,Mon Jul 13 18:02:49 2015 UTC,So you've found the source code but you're having trouble interpreting it?
learnjavascript,3d5hne,FricoSuave,1 point,Mon Jul 13 19:45:03 2015 UTC,Yeah I couldn't understand what they were doing. I opted to do everything in the canvas instead of using images like they did.
learnjavascript,3d5f9x,FrustratedLogician,2,Mon Jul 13 17:46:06 2015 UTC,"There's an omnibus post on the side of the learnjavascript. for example, there is this group that studies eloquent javascript here. i didnt use the group, but i read parts of the book and found it very useful"
learnjavascript,3d5f9x,fahdsheikh,1 point,Mon Jul 13 22:12:27 2015 UTC,#learnjavascript (which is from this sub) and ##javascript on Freenode are both good places to hang out and share knowledge / ask questions.
learnjavascript,3d5f9x,guohuade,1 point,Tue Jul 14 00:49:29 2015 UTC,I am also currently learning and on the experienced dev track as well.
learnjavascript,3d1upj,skillDOTbuild,5,Sun Jul 12 21:05:47 2015 UTC,"I was in your shoes once.  I learned javascript as much as I could from books and online articles here and there.  After trying to code everything in vanilla javascript, html, and css I found out I am quite a bit outdated.  You definitely need good understanding of the the 3 basics if you want to do web dev, don't know if you do.  However learning what is current and good practices are hard to understand, at least for me, when starting.  You'll want to learn things like webpack, github, etc that they don't mention in books and online lessons, at least for the most part.  Right now I still feel like React is a huge hurdle to learn especially for a beginner, it often involves a lot of different approaches to things you're not even familiar with.  That's just me  though."
learnjavascript,3d1upj,Sennon,2,Mon Jul 13 02:44:24 2015 UTC,What specially in React makes it a huge hurdle to learn for beginners? And do you have any tips on how to overcome these hurdles?
learnjavascript,3d1upj,nofreedinner,6,Mon Jul 13 07:19:31 2015 UTC,"The problem is, most junior developers jump straight to code without understanding the problems the framework is trying to solve. I did the same mistaken, but when I gave React a second changes, I made sure I got it right.   Checkout this intro to React on YouTube: https://www.youtube.com/watch?v=XxVg_s8xAms"
learnjavascript,3d1upj,Sennon,2,Mon Jul 13 09:23:13 2015 UTC,"This is just from me but I feel it has a heavy requirement in experience to fully engage with react.  You practically NEED to use tools like webpack so it adds to the learning.  I haven't come across much use of actual javascript aside from attempting at flux/redux actions, which are on a whole new level for me despite how others say it's extremely simple.  Knowing what state is and understanding state adds to the challenge of the component.  I feel it solves a lot of problems experienced developers run into but not something a beginner would.    There are plenty of guides/tutorials but not all of them are consistent or up to date, much less targeted towards beginners.  When I talk about consistency the articles out there use a mixture of ES5 & ES6 syntax guides and some even ES7 which adds to the confusion of reading the code for understanding.  What gets worse is some of the guides use libraries you might not be familiar with and brief over it but if you don't full understand that library it comes back to haunt you in your code.  Best practices vary and as a beginner they are the holy grail; you prevent problems rather than fix them.  If you want an exemplar to good practice in coding I recommend you follow gaearon, Dan Abramov, on github, twitter, and I believe he is also on reddit as well.  I have learned a ton from his guides, his methods are consistent, up to date, and despite being a beginner I find his code, 'beautiful'.   I originally fiddled with polymer, then angular and I can see why angular is a lot better for beginners as it comes fully packaged with all your needs to start out, very mature community, and plenty of libraries for it.  It is the ""MVC"" you keep hearing about rather than the 'V' of react, however I feel like react has so much more potential and more worthwhile once you become an experienced developer.  I can rant more about the complexity of React as a whole, not just the basic introduction to react guides out there, but nobody really wants to hear excessive ranting so here are some of my favorites from my journey:   map reduce & filter This pops up a lot in react so it is good to get a heads up.  I skimmed this one but still proved helpful. ES6 recommend you learn ES6/7 to make your code look so much cleaner/nice.  I used the medium artciles to refresh my memory on ES6 syntax I learned from ""You Don't Know JS"" ES6 part. react hot boilerplate From gaearon, the guy I mentioned earlier.  This is a boilerplate to help you jump right in to testing your component writing skills.  He has plenty of resources you can use for learning and he even updates his previous examples or projects to newer syntax and more current methods. react dnd again from gaearon but I just wanted to post this as a very valuable tutorial, if not the best I have come across when writing react code."
learnjavascript,3d1upj,Midas7g,4,Mon Jul 13 09:28:15 2015 UTC,"You still need to learn javascript to be effective in those frameworks. What the frameworks provide are a common architecture and a ton of useful functions, so you can focus on just putting in the features you want. This is great for people who are new to the language and environment, but experts quickly find frameworks like this restricting.  Once you understand what javascript can do (and can't do) you'd be better off using your own streamlined architecture with just the capabilities you need."
learnjavascript,3d1upj,Pantstown,2,Sun Jul 12 21:43:53 2015 UTC,"Would you mind elaborating further on:   experts quickly find frameworks like this restricting   Do you mean to say Netflix, Twitter, Google, and Facebook don't use JS frameworks?"
learnjavascript,3d1upj,Midas7g,4,Sun Jul 12 22:06:42 2015 UTC,"Sorry, I kinda glazed over the title. ReactJS is a library, not a framework. Frameworks are a structure you work inside, which might not provide all the capabilities you want.  ReactJS, like other libraries, is an external source of functionality that you can build your own framework or architecture around. Much less limiting in general.  Twitter's framework Flight is component based, which makes it a very lightweight scaffolding to hang functionality on.  AngularJS is the framework-du-jour, but it suffers the same problem all frameworks do: it's typically heavier than you need, and will get in your way if you want to do anything off-script."
learnjavascript,3d1upj,Ogesana,3,Sun Jul 12 22:38:23 2015 UTC,"Kyle Simpson has a good analogy for this:   Libraries are like paper maps—it gives you the tools but you choose your route. Frameworks are like phone GPS navigation—it will tell you where to go, but you can go wherever you want and it'll find a solution. However, not following it will bring more trouble than it's worth. Platforms (Simpson says Rails is a platform) are like self-driving cars. You have no control on how to get to point B."
learnjavascript,3d1upj,Ogesana,2,Mon Jul 13 01:39:44 2015 UTC,"Do you mean to say Netflix, Twitter, Google, and Facebook don't use JS frameworks?   Facebook created React to use it for Instagram. Instagram is a React app.  Netflix uses React.  No idea what Google uses. Twitter used to run on Rails but moved to Java for better performance."
learnjavascript,3d1upj,_daniel___,1 point,Mon Jul 13 01:35:36 2015 UTC,No idea what Google uses. Twitter used to run on Rails but moved to Java for better performance.   IIRC Google uses Closure Tools
learnjavascript,3d1upj,Pr3fix,0,Mon Jul 13 12:15:23 2015 UTC,Likely companies of that size use internally constructed frameworks.
learnjavascript,3d1upj,Ogesana,3,Sun Jul 12 22:13:35 2015 UTC,React was written for use in Instagram. React is actually Facebook's  internally constructed framework.
learnjavascript,3d1upj,Pantstown,-1,Mon Jul 13 01:36:01 2015 UTC,"True, I suppose. But Netflix does uses React, and I'm pretty Gmail does too. I definitely agree that, at that level, they'll have the money and the man-power to create the leanest, most efficient tool for their specific job."
learnjavascript,3d1upj,Pantstown,2,Sun Jul 12 22:22:42 2015 UTC,"I doubt Gmail runs on React. That would be the biggest win for Facebook for attracting talent. One of the many reasons for open sourcing your internal framework is for free bug fixes/reporting and attracting talent - ""We are so cool, we give back to the community""."
learnjavascript,3d1upj,Stockholm_Syndrome,1 point,Mon Jul 13 09:25:44 2015 UTC,"This is anecdotal experience from someone who considers himself to be really new at both.   Ultimately, I don't think it's really possible to quantify the time it takes to learn a JS Framework or JS because, when are you really done learning?   In any case, here are some numbers for you:    3 months to feel like I could do some semi-comlicated things in Javascript, but still didn't understand some of the more high-level things about the language, e.g., when to use map vs forEach, what the heck bind, call, and apply are, etc.  2 more months to feel confident enough to start using a JS framework.  2 weeks to learn the basics of React.    I can't to anything crazy in React. In fact, this is the most complicated thing I can build in React that I don't need help with. (This only works in Firefox and Safari I think. JSBin is being weird for me).  There's still a bunch of essential things about React I need to learn, e.g., Flux and React Router. And there's probably a million things in JS I still don't understand. But in my limited experience, they aren't really the same kind of learning. Learning JS is like learning a programming language and how to use it to manipulate the DOM, do cool programming stuff, and think like a computer. Learning React, for me, has been about learning ""the React way"" and how to write React syntax. I've heard similar things about Angular.   I suppose my answer to your question is no, it doesn't take as long, but it's a different experience. You're focused on different problems."
learnjavascript,3d1upj,Pantstown,3,Sun Jul 12 22:03:01 2015 UTC,"Just fyi, bind, call, and apply all allow you to set what ""this"" and the arguments are in the function.   Call and apply run the function immediately and differ by the way you feed in the parameters (array vs a simple list of arguments)  Bind allow you to run the function later with the new values at a later time (for example, as a callback)"
learnjavascript,3d13la,wulvz,2,Sun Jul 12 17:23:56 2015 UTC,"In my time with js (albeit not very very long), I've found that design patterns are essentially ""whatever works"". Some people will advocate using the (revealing) module pattern, or this or that, but at the end of the day, JavaScript is unsafe and doesn't really allow for proper implementation of design patterns the same way other languages do. Nothing is ever truly private, and everything can be passed around, so its impossible to say what is best without knowing the full context of application.   That said, I find that following as functional a paradigm as possible helps. Avoid this, try to keep things contained and out of the global scope, and refactor as required. It's too easy to prematurely optimise with JavaScript because everything is first class and often examples we see and learn from come from large entities working on massive codebases instead of a small pet project.   I guess this really wasn't an answer to your question, but I think it needs to be said in the JS community more often; don't overthink too much, just write. It's so easy to move code around that the time spent planning for future theoretical issues is often wasted effort."
learnjavascript,3d13la,mrahh,2,Mon Jul 13 00:19:10 2015 UTC,"JS is such an interesting language because you can choose whatever style you want for development.   I know of no other language like this.  But if you really invest some time in the language you will find that it is actually an incredible language that supports what I believe the most productive style of development.  I would suggest spending some time learning FP techniques and then use them in JS.   What does not make sense, IMO, is using classical OO approach with JS."
learnjavascript,3d13la,bartturner,2,Tue Jul 14 12:32:17 2015 UTC,"learn closures and avoid ""this"", because ""this"" sucks. Same goes for ""apply"", ""call"", ""bind"" ...maybe sometimes you can't or at least can't easily avoid them, but most of the time you won't need them, maybe you can develop a style that completely avoids them.  ""this"" is an implicit intransparent parameter to every function, that is hard to reason about and no matter what ""this"" stands for, it's name, unlike other params, is always ""this"", which is total crap. Best practice is to give names to variables that document your code and make sense.  And closures are very awesome and without them, there would not be such an awesome module system as we have it today :-)  I recommend you to check out the ""core modules"" on http://nodeschool.io/#workshopper-list Do them in that order: * javascripting * Scope chains & closures * learnyounode * how-to-npm * browserify adventure  The last one will teach you how to organize your javascript code in the browser :-)"
learnjavascript,3d13la,serapath,2,Sun Jul 12 18:34:29 2015 UTC,"I understand closures and scoping, I guess I just don't know how to leverage them."
learnjavascript,3d13la,serapath,1 point,Sun Jul 12 18:45:05 2015 UTC,"you could try this...  function Person (name, age, address) {     return {         getName: function () { return name; },         getAge: function () { return age; },         getAddress: function () { return address; }     }; }"
learnjavascript,3d13la,Pr3fix,1 point,Tue Jul 14 21:52:26 2015 UTC,"After some scrounging I am starting to settle on something like this (please critique):  var Something = Something || {};  // Main implementation (function(core) {      var self = core;     self.options = 'Core parameter';      self.call_environment_run = function() {         self.environment.run();     }      // Everything here is public  })(Something);  // Modules var Something = Something || {}; Something.environment = (function(core) {      var self = this;      self.options = 'This is a local option'      this.run = function() {         console.log('environment.run got called');     }      this.check_parms = function() {         console.log('Parent: ' + core.options);         console.log('this:   ' + self.options);     }      // Make public     return { check_parms: this.check_parms, run: this.run }  })(Something);  Something.environment.check_parms(); // 'Core parameter\nThis is a local option' Something.call_environment_run(); // 'env.run got called'"
learnjavascript,3d13la,thatoaklandkid,2,Sun Jul 12 21:07:01 2015 UTC,so basically revealing module pattern + IIFE. Pretty much what I use.
learnjavascript,3d13la,thatoaklandkid,1 point,Mon Jul 13 00:38:26 2015 UTC,Good to hear. I toyed with it today and it seems to be working as a pretty good pattern. I just need to start really leveraging the functions as first class objects bit to stop entangling my modules.
learnjavascript,3d22q3,SCrusader,2,Sun Jul 12 22:11:11 2015 UTC,"Because you have 2 ++ operators. remove the second one, the for loops is the only one y ou need."
learnjavascript,3d22q3,cerealbh,1 point,Mon Jul 13 00:14:56 2015 UTC,damn i did not realize that. thank you
learnjavascript,3d22q3,senocular,1 point,Mon Jul 13 01:19:09 2015 UTC,"Assuming you have your dimensions correct (which I would be cautious of using em and px and borders), the problem is that you're skipping every other div by including divCount++; in the loop body when that's already being taken care of in the increment expression portion of the for.  Take that out and let the loop handle divCount"
learnjavascript,3d113n,benjamin3878,2,Sun Jul 12 17:03:14 2015 UTC,the function needs to be a property of the object itself  https://jsfiddle.net/6mvad6ug/1/
learnjavascript,3d113n,mkze,2,Sun Jul 12 17:50:37 2015 UTC,Thank you!
learnjavascript,3d113n,Pantstown,2,Sun Jul 12 18:12:33 2015 UTC,"The printStr function needs to be a method, not a function. Basically, what you were missing was :  this.printStr = function(){ alert(this.str) };   For some reason my code wasn't working for me in jsfiddle (I hate jsfiddle), so here's a jsbin."
learnjavascript,3cwu5z,rogue1987,2,Sat Jul 11 13:46:53 2015 UTC,"I wrote out a new implementation more or less from scratch. I designed it more like what I would expect programmers working with me to write. It's designed to be extensible and I added a couple extensions to put you on the right track. There's plenty of comments and JSDoc strings to help you understand what's going on. If you have any questions, feel free to ask.  /** * @factory makeTimer * takes an end time and a function to run on update * @param {Number} endTime - time to end as Date.now() + ms * @param {Object} callbacks - functions to run based on event * @return {Timer} - timer object with run method *  * callback object may contain: * { *   start: Function  //before starting timer *   update: Function //runs each animation frame *   end: Function    //as timer ends * } * * callback will receive an object of the following form * { *  time: Number, //total time in ms *  raw: { *    ms: Number, sec: Number, min: Number, hr: Number *  }, *  padded: { *    ms: String, sec: String, min: String, hr: String *  } * } */ var makeTimer = function (callbacks) {   //make sure callbacks exist   callbacks.start  = (typeof callbacks.start === 'function')  ? callbacks.start  : function () {};   callbacks.update = (typeof callbacks.update === 'function') ? callbacks.update : function () {};   callbacks.end    = (typeof callbacks.end === 'function')    ? callbacks.end    : function () {};    /**   * @private {Number} endTime   * when the update function will stop running   */   var endTime = 0;    /**   * @private {Boolean} isRunning   * true when updateTimer is running   * This prevents multiple callbacks doing weird stuff   */   var isRunning = false;    /**   * @func padZeroes   * Takes a number and the amount of digits needed   * and returns a string of that length adding zeros as needed   * @param {Number} num - number to pad   * @param {Number} pad - minimum number of digits needed   * @return {String} - number as string padded to minimum length   */   var padZeroes = function (num, pad) {     var str = num.toString();      while (str.length < pad) {//keep adding zeroes until we reach the min length       str = '0' + str;     }     return str;   };    /**   * @func makeTime   * Takes time in ms and returns time converted to   * ms, sec, min, and hr in both raw and padded form   * @param {Number} time - time in milliseconds   * @return {Object} - custom time object   */   var makeTime = function (time) {     var total = time;     var ms  = time % 1000;     time    = (time / 1000)|0;      var sec = time % 60;     time    = (time / 60)|0;      var min = time % 60;     var hr  = (time / 60)|0;      return {       time: total,       raw: {         ms: ms, sec: sec, min: min, hr: hr       },       padded: {         ms: padZeroes(ms, 4),         sec: padZeroes(sec, 2),         min: padZeroes(min, 2),         hr: padZeroes(hr, 2),       }     };   };    var updateTimer = function updateTimer() {     var remainingTime = endTime - Date.now();      //stop looping when we have no time left     if (remainingTime <= 0) {       isRunning = false; //allow another time run       callbacks.update(makeTime(0));       return callbacks.end(makeTime(0));     }      //trigger callback then wait for next frame     callbacks.update(makeTime(remainingTime));     requestAnimationFrame(updateTimer);   };    /**   * @method run   * starts timer that should after given period   * @param {Number} time - time in ms until timer should end   * @return {Boolean} - true if success else false   */   var run = function (time) {     if (isRunning) {       console.warn('Only one timer may run at a time for a given Timer instance.');       return false;     }      isRunning = true;              //we're now running     endTime = Date.now() + time;   //set our end time      callbacks.start(makeTime(endTime - Date.now())); //call starting callback     updateTimer();    //set our timer incrementing     return true;      //let user know it was a success   };    /**   * @method addTime   * add time to timer   * @param {Number} time - time to add in ms   * @return {Boolean} - true if success else false   */   var addTime = function (time) {     //don't add time if the timer isn't running     if (!isRunning) {       console.warn('Timer already quit running.');       return false;     }      endTime += time;     return true;   };    /**   * @method changeCallbacks   * switch callback(s) to new callbacks   * @param {Object} newCbs - object containing callbacks   * @return {Boolean} - true if success else false   */   var changeCallbacks = function (newCbs) {     //change callbacks if they exist otherwise keep the old callbacks     callbacks.start  = (typeof newCbs.start === 'function')  ? newCbs.start  : callbacks.start;     callbacks.update = (typeof newCbs.update === 'function') ? newCbs.update : callbacks.update;     callbacks.end    = (typeof newCbs.end === 'function')    ? newCbs.end    : callbacks.end;   };    //the functions here are public   //everything else is private   return {     run: run,     addTime: addTime,     changeCallbacks: changeCallbacks   }; };   Here's an example of using it  var timer = makeTimer({   start: function (time) { console.log('starting time at: ' + Date.now()); },   end: function (time) { console.log('ending time at: ' + Date.now()); },   update: function (time) {     $('#foo').html(time.padded.hr + ':' + time.padded.min + ':' + time.padded.sec + ':'  + time.padded.ms);   } });  timer.run(3000); timer.updateCallbacks({ end: function (time) { console.log('Just ending...'); } }); timer.addTime(500);"
learnjavascript,3ctu88,MinoForge,2,Fri Jul 10 18:53:36 2015 UTC,Chrome includes this functionality natively. Except you would type r derp
learnjavascript,3ctu88,fukitol-,2,Fri Jul 10 19:29:43 2015 UTC,"Sorry, should have included that. Would prefer to use firefox. Just tested it in chrome, and that's freaking awesome."
learnjavascript,3ctu88,jotted,1 point,Fri Jul 10 19:49:52 2015 UTC,"Firefox also has this. Search engines and Bookmarks can be given keywords from their respective Managers. For bookmarks, it's the same %s url syntax as the Chrome article. The quickest way is to right-click reddit's search box and choose 'Add a keyword for this search' and edit the URL before after saving."
learnjavascript,3ctu88,Cust0dian,1 point,Sat Jul 11 09:35:34 2015 UTC,"You beautiful person.  Many thanks to everyone in this thread, for taking the time to respond."
learnjavascript,3ctu88,dbpcut,2,Sat Jul 11 13:37:01 2015 UTC,"You won't be able to do it with GreaseMonkey: it doesn't have access to browser chrome where location bar resides, so you can't change it or text inside of it.  You would need to write an add-on to achieve this sort of behavior. Writing add-ons for Firefox isn't that hard, and I encourage you to try writing one yourself.  If you don't really feel like writing whole add-on yourself, there already is one with similar behavior: URL Alias. Install it, go to its Preferences, paste this line:  r    https://www.reddit.com/r/%1   and it'll work the same way Chrome works: if you type r all into location bar it will be replaced with https://www.reddit.com/r/all."
learnjavascript,3ct1id,cornjuliox,5,Fri Jul 10 15:20:04 2015 UTC,"If you are still new to JS, don't worry about it. Just try to learn the basics and write some working apps, even if they are imperative and Python-like.  Read You Don't Know JS as /u/guohuade recommended.  When you feel more confident, I think learning functional programming is a great idea. Here's a book about it in JavaScript. Some libraries you'll want to use are Ramda and Immutable. Don't worry if they don't make sense to you know."
learnjavascript,3ct1id,Ogesana,1 point,Fri Jul 10 16:49:20 2015 UTC,"Yup, I've got a couple of basic apps working with angular.js, and I'm tacking in functionality as I move along.   I'm feeling my way through the examples I find, and I think I'm beginning to understand how angular works."
learnjavascript,3ct1id,azium,1 point,Fri Jul 10 16:56:27 2015 UTC,mostly-adequate-guide but also an excellent read! Thanks for sharing!
learnjavascript,3ct1id,androbat,1 point,Sat Jul 11 09:51:28 2015 UTC,I'd also recommend Javascript Allonge as a very good (and gentle) introduction to functional programming.
learnjavascript,3ct1id,guohuade,4,Sat Jul 11 16:13:39 2015 UTC,"Well, JS is pretty versatile but well suited to functional programming. I was from a Python background too and JS was very weird for me for a long time, but it definitely makes a lot of sense the more time you put in.  I suggest You Don't Know JS, its free on GitHub."
learnjavascript,3ct1id,jhartikainen,1 point,Fri Jul 10 15:40:12 2015 UTC,"I think the main functional concepts that would help with JS are first class functions, higher-order functions and closures. I think other functional concepts don't really map so directly, although could still be useful to know."
learnjavascript,3cu821,haxx1,3,Fri Jul 10 20:35:55 2015 UTC,"Nothing wrong with it, but why not allow both new Person(""Tom"") and Person(""Tom"") instead?  function Person(param) {   if (!(this instanceof Person)) {     return new Person(param);   }   this.name = param; };  Person.prototype.getName = function () {   return this.name; };  var tom = new Person('Tom'); var dick = Person('Dick');"
learnjavascript,3cu821,PM_FOR_SOMETHING,2,Fri Jul 10 20:43:53 2015 UTC,"Doesn't stop me from doing:  var guy = new Person.create(""Tom"");   ;)"
learnjavascript,3cu821,senocular,2,Fri Jul 10 20:53:25 2015 UTC,"There's nothing wrong with avoiding built-in syntax, but at some point you might wonder why you're using the language at all if you're inventing new patterns to replace core syntax all the time. You might also alienate people who aren't familiar with your custom patterns."
learnjavascript,3cu821,krilnon,1 point,Sat Jul 11 01:28:42 2015 UTC,"Why not use the revealing module pattern instead? It's a lot less work and makes life easier by avoiding 'this'.  var makePerson = (first, last) => {   var name = {first, last};    var getFullName = () => name.first + ' ' + name.last;    return {name, getFullName}; };  var p = makePerson( 'John', 'Aster'); p.name.first = 'Jacob'; console.log(p.getFullName());"
learnjavascript,3cu821,theQuandary,1 point,Sat Jul 11 02:20:38 2015 UTC,Isn't the extra closure a potential performance issue?  What's the motivation for this pattern?
learnjavascript,3cu821,DarthDerrr,1 point,Sat Jul 11 12:22:16 2015 UTC,"That's what I am worried about. On the other hand, I always need some ""private"" variables inside my Constructors and I do return a ""new"" so I suppose it won't really matter.."
learnjavascript,3cu821,papers_,1 point,Sun Jul 12 19:25:17 2015 UTC,"Nope, just like there's nothing wrong with the following three:  var foo = {}; var foo = Object.create( Object.prototype ); var foo = new Object();"
learnjavascript,3ct65q,Moridn,3,Fri Jul 10 15:56:15 2015 UTC,"There's the JScript User Guide from Microsoft, although I personally ain't a fan (I've never seen Microsoft do documentation even close to decently).  I'd recommend you have a look at Node.JS instead, though. Not only is it a lot more popular (meaning more tutorials, libraries, etc.), but it's also cross-platform and (based on a very brief look at JScript) a lot more user-friendly."
learnjavascript,3ct65q,birjolaxew,1 point,Fri Jul 10 17:20:06 2015 UTC,"yeah, problem is I know the command line and PowerShell, so I thought JScript would be a logical extension. I know nothing about writing network apps, (which from what I am reading is what Node.JS is for) but would like to learn eventually."
learnjavascript,3ct65q,birjolaxew,3,Fri Jul 10 17:33:54 2015 UTC,"Node.JS is just a runtime environment for Javascript (it's built on the V8 engine, which is what actually executes the JS). It is bundled with a few default libraries, some of which allow you to quickly set up an HTTP server, but that definitely isn't the only thing it can be used for."
learnjavascript,3crtkx,Pantstown,3,Fri Jul 10 06:53:37 2015 UTC,"Your questions indicate you are under the impression this person on IRC knew what he was talking about. ;)  ...  To be fair, lets pass this off as pseudo code as to say ""this doesn't work, but we don't expect it to, so that's ok; it's pointing us in the right direction.""  If we want to make it functional, we just need to clean some things up and it should make more sense:  var fizzbuzzArray = new Array(100).fill(0).map(   (x, i) => {      var f = i % 5;     return (i % 3) ? (f ? i : 'Buzz') : (f ? 'Fizz' : 'Fizzbuzz');   } );   What needed to be fixed: Mainly all your questions ;).   The original sparse array was filled for map since map won't iterate over undefined eleemnts. The first parameter for map is the callback which was incorrectly set as i in the original code, when that i should have been part of the callback's parameter list (and the second parameter representing the index, not the element value which we've filled all to be 0). The return was separated from the var statement and used in conjunction with the ternary statements determining 'fizz' vs 'buzz'. The variable 'five' was represented as both 'five' and 'f' so that was consolidated to just 'f' (its the only variable so no comma needed). The ternary results needed to be flipped since it was inverting the fizzbuzz results."
learnjavascript,3crtkx,senocular,1 point,Fri Jul 10 13:15:47 2015 UTC,Thanks for responding. I'm glad I'm not crazy. I thought I was losing my javascript marbles haha.
learnjavascript,3ct7ze,TOPTRTA,2,Fri Jul 10 16:09:55 2015 UTC,"I don't know what's in that introduction on CA. I agree with GlowInTheDarkDonkey that you should probably try to make something. It does not have to be very large or flashy.  Maybe some kind of text based game? Or it could use some kind of simple graphics in the browser if you are familiar with HTML and that too.  Or you can try ProjectEuler problems if you are into math. Just trying to solve/make something without detailed intructions is what you want to do.  If you want to try more advanced graphics then check out canvas (that link only shows very breifly what it can do, but perhaps some of the side to the left can give you more information, or search google for some tutorial.)"
learnjavascript,3ct7ze,tufflax,2,Fri Jul 10 16:41:44 2015 UTC,"Coderbyte  Khan Academy  /r/programming  Check out my CodePen: http://codepen.io/ForScale/popular/  look in to    DOM manipulation (you can write like 99% of an entire webpage using just script... did you know that?); ternary operators timing functions canvas Date(); promises and callbacks... whatever the fuck those are... ;)   Oh! And http://eloquentjavascript.net/  Also, Sololearn apps/website are good augmentation/reinforcement of Codecademy skills."
learnjavascript,3ct7ze,ForScale,2,Fri Jul 10 17:31:12 2015 UTC,"If you didn't already have something you wanted to make in mind before you started learning then you've turned-on the oven before having the groceries to make the dinner.  Make something.  Nobody learns much by doing exercises prescribed to them.  You learn by wanting to find a solution to a problem you actually have, and thus it has meaning and purpose.  Make something.  In case it's not clear.  FUCKING MAKE SOMETHING, which will no doubt just be copying an existing idea BUT IT'LL BE YOUR CODE and will work or fail on the merits of what you figure-out."
learnjavascript,3ct7ze,GlowInTheDarkDonkey,1 point,Fri Jul 10 16:21:53 2015 UTC,codewars.com is pretty neat
learnjavascript,3ct7ze,fuczak,1 point,Mon Jul 13 13:29:16 2015 UTC,"Try to solve some small coding tasks using JS and you will learn more and more. Practice make sense. Also I would recommend http://www.quizful.com/browseQuizes/javascript , there you will find a lot of JS coding puzzles that may help you to understand how JS works."
learnjavascript,3ct7ze,alexvsop,1 point,Tue Jul 14 08:53:19 2015 UTC,Try following this: http://javascriptissexy.com/how-to-learn-javascript-properly/  Currently doing the same.
learnjavascript,3csb6p,rogue1987,1 point,Fri Jul 10 11:02:59 2015 UTC,"You'll probably need to change your setInterval time.  Also instead of using a counter in the interval callback, you should use Date.now() to get the actual time and compare against that.  Your interval isn't guaranteed to be called with actual timing.  In other words a counter for 3605 in a one second interval may take more or less time than 3605 seconds to complete."
learnjavascript,3csb6p,senocular,1 point,Fri Jul 10 12:43:01 2015 UTC,Hmm what would date.now() do?  I want to be able to reset the clock easily by F5 :)
learnjavascript,3csb6p,senocular,2,Fri Jul 10 14:32:12 2015 UTC,"Date.now() gives you the current time in milliseconds.  You can use that to know exactly how many milliseconds have passed.  You seems to be doing a count down timer, so you would want to have a start time, then figure out the time at the point of the end of the count down (now + count-time) and then take that subtracting Date.now() in your screen updates (which are inconsequential to time calculations) to see how much time has is remaining.  Example (not including your format conversions):  http://jsfiddle.net/o8tv55qg/"
learnjavascript,3csb6p,senocular,1 point,Fri Jul 10 14:48:14 2015 UTC,"Ah ok.  But can you also show me how to make the timer show double digits if it is under 10? Like 10, 09, 08 and so on to 00?  I tried writing this, but it does not work:  if  (count < 10){             output.text = ""0"" + count.toString();     } else {       output.text = count.toString();     }"
learnjavascript,3cs93e,rionosaurus,1 point,Fri Jul 10 10:34:51 2015 UTC,"Looks like this is about your Hit functions.  For example, playerHit is a function, so if (playerHit) doesn't make make much sense in that context since that is effectively saying ""does the value named playerHit (a function) exist?""  It does, because its defined above, so its always true, but I don't think thats what you want to check.  As a function, if you want to use it, you need to call it like:  playerHit()   But all it does now is assign a local variable to a random number which, once complete means nothing.  if in an if condition like if (playerHit()) the if checks the return value of playerHit(), which right now is nothing (undefined) because there's no return statement in that function.  if (undefined) always resolves as false.  So it looks like instead of assigning those random values to variables in your functions, you want to return those values so they can be evaluated in the if conditions. BUT, your random values also have a +1 in them meaning they'll never be 0 so the if will always be true. So we can drop the + 1 to make it more random  var playerHit = function() {     return Math.floor(Math.random() * 2); // 0 or 1 } // ... if (playerHit()) { // ..."
learnjavascript,3cs93e,senocular,1 point,Fri Jul 10 12:53:01 2015 UTC,"But all it does now is assign a local variable to a random number which, once complete means nothing. if in an if condition like if (playerHit()) the if checks the return value of playerHit(), which right now is nothing (undefined) because there's no return statement in that function. if (undefined) always resolves as false. So it looks like instead of assigning those random values to variables in your functions, you want to return those values so they can be evaluated in the if conditions. BUT, your random values also have a +1 in them meaning they'll never be 0 so the if will always be true. So we can drop the + 1 to make it more random   Thank you. It's much more clear now. Though I am still having problems with the code. I cannot run it. It still crashes even after the changes I've made. There's gotta be another error somewhere that's why it cannot run. But I do not know what is causing it. :/  // VARIABLES  var battle = true; var playerHP = 10; var dragonHP = 100; var round = 0;  // FUNCTIONS  var playerHit = function() {     return Math.floor(Math.random() * 2); }  var dragonHit = function() {     return Math.floor(Math.random() * 2); }  var playerDamage = function() {     return Math.floor(Math.random() * 50 + 1); }  var dragonDamage = function () {     return Math.floor(Math.random() * 5 + 1); }  // GAME  while (battle) {     console.log(""//===================="");     console.log(""Round : "" + round)     console.log(""Player's HP : "" + playerHP);     console.log(""Dragon's HP : "" + dragonHP);     console.log(""//===================="");     round++;      // CALLER BEFORE BATTLE STARTS     playerDamage();     dragonDamage();     // CALLER BEFORE BATTLE STARTS      if (playerHit()) {         console.log(""You attacked for "" + playerDamage + "" damage."");         dragonHP -= playerDamage;         console.log(""Dragon's HP: ("" + dragonHP + ""/100)"");          if (dragonHP <= 0) {             console.log(""The dragon has been defeated!"");             battle = false;         } else {             console.log(""But the battle is not finished just yet!"");         }     } else if (dragonHit()) {         console.log(""You missed and now the dragon attacked you for "" + dragonDamage + "" damage."");         playerHP -= dragonDamage;         console.log(""Player's HP: ("" + playerHP + ""/10)"");          if (playerHP <= 0) {             console.log(""You have been defeated!"");             battle = false;         } else {             console.log(""But the battle is not finished just yet!"");         }     } }"
learnjavascript,3cs93e,Missing_Minus,1 point,Sat Jul 11 00:58:50 2015 UTC,"OK I got it working, and now it actually works!  Here is the pastebin ( since I hate the code thing for reddit) pastebin   What you did wrong was having it return the player damage/dragon damage in the      dragonHP -= playerDamage  By doing that you minused it by the function which doesn't work. But setting up a global variable (ex: damagePlayer) and having it set the variable to      Math.floor(Math.random() * 50 + 1); works, so whenever it is run it generates a new number. Then just do the same thing to the dragonvariable.  Now it should work, just copy the  code from the pastebin and use that!"
learnjavascript,3cs93e,Missing_Minus,1 point,Sat Jul 11 03:53:03 2015 UTC,"Ahh yes it is working now! I do not know why but why are my functions not working?  And also I declared it as global variable like this:  var damagePlayer = Math.floor(Math.random() * 50);   but after I run it. The player seems to have static damage and not moving. So i tried putting this inside the while() loop:  damagePlayer = Math.floor(Math.random() * 50);   and it seems by doing so it gave random damage everytime the program restarts. Is it the only way or is there other ways I can make the code shorter? Right now here is my code:  // VARIABLES  var battle = true; var playerHP = 10; var dragonHP = 100; var round = 1; var damagePlayer = Math.floor(Math.random() * 50 + 1); var damageDragon = Math.floor(Math.random() * 5 + 1);  // FUNCTIONS  var playerHit = function() {     return Math.floor(Math.random() * 2); };  var dragonHit = function() {     return Math.floor(Math.random() * 2); };  var screenCall = function() {     console.log(""//===================="");     console.log(""Round : "" + round);     console.log(""Player's HP : "" + playerHP);     console.log(""Dragon's HP : "" + dragonHP);     console.log(""//====================""); }  // GAME  while (battle === true) {      screenCall();     damagePlayer = Math.floor(Math.random() * 50 + 1);     damageDragon = Math.floor(Math.random() * 5 + 1);      if (playerHit()) {         console.log(""You attacked for "" + damagePlayer + "" damage."");         dragonHP -= damagePlayer;         console.log(""Dragon's HP: ("" + dragonHP + ""/100)"");          if (dragonHP <= 0) {             console.log(""The dragon has been defeated!"");             battle = false;         } else {             console.log(""But the battle is not finished just yet!"");             round++;         }     } else if (dragonHit()) {         console.log(""You missed and now the dragon attacked you for "" + damageDragon + "" damage."");         playerHP -= damageDragon;         console.log(""Player's HP: ("" + playerHP + ""/10)"");          if (playerHP <= 0) {             console.log(""You have been defeated!"");             battle = false;         } else {             console.log(""But the battle is not finished just yet!"");             round++;         }     } else {         console.log (""You both missed each other!"");         round++;     } }   and if i run it, it shows like this:  //==================== Round : 1 Player's HP : 10 Dragon's HP : 100 //==================== You attacked for 44 damage. Dragon's HP: (56/100) But the battle is not finished just yet! //==================== Round : 2 Player's HP : 10 Dragon's HP : 56 //==================== You attacked for 22 damage. Dragon's HP: (34/100) But the battle is not finished just yet! //==================== Round : 3 Player's HP : 10 Dragon's HP : 34 //==================== You attacked for 49 damage. Dragon's HP: (-15/100) The dragon has been defeated!  ... which is completely fine.. I just want to know if there are some other ways I can make my code shorter or neat looking :)  Thanks for all the help!"
learnjavascript,3cs93e,Missing_Minus,1 point,Sat Jul 11 06:31:58 2015 UTC,"Well your functions weren't working because you can't minus something by a function, if you minus something by something that's not a number, like try doing 100 - ""hi"" it will show up NaN (Not a Number). So you have to make the function assign a random number to a variable and have the program use that.  To make it shorter there is probably ways, but it's perfectly fine I would say right now. A good idea would be to expand upon it so then you learn some more. You could add where the user decides what to do, like attack, or drink potion, you could also make more monsters, and do something so it randomly chooses.  I am actually making something like this somewhat where it will randomly generate a dungeon and then you fight monsters in that room. It's still in progress, but I've only got a bit on the dungeon generator so it will assign the current monsters in dungeon to whatever monsters it is, which I already know how to do, it's just trying to shorten it down.  A suggestion if you make more monsters do something like this:     var monsters = {     dragon = {     health: 100,     attack: (your equation would probably work here),     }     } that is objects, if you haven't done objects yet you should learn them they are fairly useful!"
learnjavascript,3cs93e,tufflax,1 point,Sat Jul 11 12:27:39 2015 UTC,"Oh, and the reason your      var damagePlayer = Math.floor(Math.random() * 50 + 1);     var damageDragon = Math.floor(Math.random() * 5 + 1); at the start didn't work was because that code is only ran once, at the very start. So you had to either add it to a function or a way where it's repeated(ex: the while loop)  Well you might be able to make it shorter by just defining the player/dragon damage variables in the while loop, since that's the only place that you need them. So in the while loop change it to var at the start of both, and remove them from the very start.  Because it is just generating a random number at the start, then generating another so the first one isn't even used so you might as well have it defined in the while loop."
learnjavascript,3cs6yf,thinkvitamin,3,Fri Jul 10 10:04:25 2015 UTC,"As a Node programmer, literally none of my JS code in Node is manipulating the DOM.  When I write a canvas app, almost none of my JS code is manipulating the DOM, though at some point I do need to get a reference to the canvas itself, right?  If I'm dynamically generating sound, there's very little DOM involved -- I do have to get the audio context, which can be considered (or not) part of the DOM.  You only deal with the DOM when you have to mess with HTML elements or the like.  If you're not doing that, or if you're manipulating data, the DOM isn't involved."
learnjavascript,3cs6yf,xiipaoc,1 point,Fri Jul 10 12:03:51 2015 UTC,"jQuery's main goal is to make a single error-handled API, compatible with as many browsers as possible. A lot of this has to do with the DOM, but some minor non-DOM methods exist too (eg. $.ajax).  As for how much of Javascript has to do with handling the DOM, that depends on what you're doing.   If you're creating a site, using Javascript for interaction, you'll be using the DOM a lot (whether abstracted through a framework such as Angular, made easier by a library such as jQuery or just hard, vanilla JS).   If you're creating a game, you almost won't be using the DOM at all, as you'll be writing a lot more logic than anything else, and in the end, you're likely writing to a canvas instead of to the DOM.  If you're writing backend code (eg. Node.JS), you won't be using the DOM (unless you're writing a scraper with one of the many pseudo-DOM libaries)."
learnjavascript,3cs6yf,birjolaxew,1 point,Fri Jul 10 17:25:40 2015 UTC,"Javascript is a language. It is used everywhere. Qt uses it for UI work. Apple is using it to automate tasks (moving away from appleScript). There are guys using it in microcontrollers (Espruino) and as an embedded language in C/C++ programs (http://www.embeddedjs.com/).  If you're interested in something like a JS cheatsheet of libraries, then look at https://github.com/sorrycc/awesome-javascript  When it comes to the browser, you're likely to hear about MVC. This is the idea that dynamic web pages (in fact, most interactive programs) generally have three parts.  They have the part that stores and processes the data. This is where you AJAX in data and store it someplace so you can use it or combine it in ways the user might be interested in. This is the Model.  They have a part that deals with how the user sees this data and enters input (clicks, forms, etc). This is the HTML and CSS. This is the View.  Finally, there is a go-between that processes user input to tell the model what to do and then sends the response back to the UI. This is the Controller.   In various frameworks, you see different takes on how these are combined and broken down, but that's the classic perspective.  I'll leave how jQuery fits into this as a thought exercise for you, but I don't believe it can do anywhere near everything I need to do on a modern, interactive web page and it certainly cannot do that in a way that is maintainable."
learnjavascript,3cs6yf,androbat,1 point,Sat Jul 11 16:43:08 2015 UTC,"You'd need to be more specific about what you're using it for... there are so many different parts of JS and so many use cases, unless you just want to learn all of them (which I do recommend), you'll need to be more specific.  You can even use JS to programmatically manipulate PDFs in Adobe Acrobat - JS is literally everywhere."
learnjavascript,3cq24a,thwartski,6,Thu Jul 9 21:26:12 2015 UTC,"I did a search of the linked document and couldn't find a mention of the word hoisting so I'd like to help with a clarification of what that actually means.   Hoisting is a mechanism of the JS runtime whereby before the script is executed all variable and function declarations are moved to the top of a function.  An important distinction is that a function expression is different from a function declaration  function declaration(){...}  var expression = function(){...}   The defined function will be 'hoisted', and the variable 'expression' will be hoisted, but its value ( ie the actual function we are assigning to the variable ) will not.  Therefore, this means that using the declarative form of a function will allow you to access that function in a line before it was written, because of the hoisting mechanism.  However trying to access the function 'expression' before it has been assigned will not work as variable assignments are not hoisted, however the declaration of the variable will be moved to the top.  This is important to your question because what the big DC is recommending to you is a syntax style that improves readability by declaring all the important variables right at the top.   This means a reader knows right away that these are persistent properties for the lifetime of this function ( also semantic naming of these variables can give an overview of what's going on in the function) whereas hoisting is something that you need to be aware of rather than contributing directly to, other than in the way you address your assignments and declarations."
learnjavascript,3cq24a,mispelledyouth,3,Thu Jul 9 21:56:47 2015 UTC,"However trying to access the function 'expression' before it has been assigned will not work as variable assignments are not hoisted   To clarify for OP, it depends on how you're running your code.  In a web app, for example, the expressions for the function definitions will probably happen before you actually call them."
learnjavascript,3cq24a,xiipaoc,1 point,Thu Jul 9 23:40:45 2015 UTC,"Thanks, I'm still just in Khan Academy, but I'll keep an eye on this as I move forward."
learnjavascript,3cq24a,theQuandary,1 point,Fri Jul 10 07:25:05 2015 UTC,"Thank you! I believe I undertand how this works, but my terminology was pretty muddled up before reading your comment.   Just to clarify, in your example would you put the expression var at the top of your file/function?"
learnjavascript,3cq24a,cport1,3,Fri Jul 10 07:24:35 2015 UTC,"Here's my take.  Variable declarations at the top don't hoist their declaration any further.  (function () {   var foo = 12,       bar = 22; }());   If variables have side effects, they get their own 'var' statement because it makes debugging a little easier.  (function () {   var foo = doSomething() + somethingElse();   var bar = 22; }());   Rebinding of 'this' ALWAYS goes at the top of the function and does not get rebound under any circumstances. 'this' is confusing enough on it's own. I want everyone reading to be perfectly clear.  I generally use 'self', but as a side note, 'self' is the global scope inside web workers (so you need to use another name there). Also, be careful nesting 'var self = this' declarations when you have functions inside functions as this can become hard to maintain. Finally, if I rebind 'this', then 'this' may NOT be used anywhere else inside the function. We don't need two different aliases floating around (especially when one might change while the other does not).  (function () {   var self = this;   //do stuff }());   In the same vein, default arguments (in ES5) go at the top of the function just below the 'this' rebind if it exists (in case you need to use it). While it's tempting to use '||' when checking if a variable exists, it often causes bugs with strings or numbers where 0 or empty string will be rebound. Prefer typeof and a check against undefined  var isNullUndef = x => x === null || x === undefined; var isRealNum = x => typeof x === 'number' && x === x && isFinite(x); var isObj = x => Object.prototype.toString.call(x) === ""[object Object]"";  (function (num, obj, fn, any) {   var self = this;   num = (isRealNum(num) ? num : 123;   obj = isObj(obj) ? obj : {};   fn = (typeof fn === 'function') ? fn : function () {};   any = (any !== undefined) ? any : ""something"";    //do stuff }());   Variables declarations for function names should be inline. Put their declarations at the top if you re-assign the value of the variable (this generally relates to the next section though).  (function (fn) {   var preDeclaredFunc;    var myfunc = () => log('keep name inline');    if (typeof fn === 'function') {     preDeclaredFunc = fn;   } else {     preDeclaredFunc = function () {};   } }());   Hoist declarations out of blocks. This helps programmers from other languages who don't know JS very well. I also hoist loop variables like 'i' unless they are in very short functions (or if it is used in multiple loops).  (function (arr, fn) {   var foo, bar, i;    if (123) {     foo = 345;   }    for (i = 0; i < arr.length; i += 1) {     bar = fn(arr);   }    for (i = 0; i < arr.length; i += 1) {     console.log(arr[i]);   } }());  //this is small enough to inline the 'i' and 'acc' declaration without confusion var map = function (fn, arr) {   for (var i = 0, acc = []; i < arr.length; i += 1) {     acc.push(fn(arr[i]));   }   return acc; };   If my function is very long (sometimes unavoidable -- for example, when I wrote a parser by hand), then I will have batches of variable declarations above each logical section.   Finally, JS is a functional language. Modern implementations are very aggressive about inlining functions, so there's not a penalty for having lots of small functions. If you keep your functions smaller, they will be easier to reason about and easier to test. In addition, these guidelines can be relaxed a little as there isn't as much room for mistakes."
learnjavascript,3cq24a,DangerRangerous,2,Fri Jul 10 02:09:51 2015 UTC,"Wowwwwww this is incredibly helpful, thank you!!  This covers all the cases I was worried about, plus giving me glimpses of a bunch of stuff I haven't seen yet (especially arrow functions, ternary operators, and your section on default arguments).   I super appreciate you taking the time to write so much example code; I was able to clear up a lot of confusion by looking at them.   I didn't even realize you could declare and assign in chunks like this:   (function () {      var foo = 12,          bar = 22; }());   I thought you had to do:   (function () {     var foo, bar;     foo = 12;     bar = 22; }());   Which was one of the reasons this convention seemed so awkward to me.   Anyway I really appreciate your help. The other posts were very informative and interesting, but this was the kind of stuff I was actually hoping to find out."
learnjavascript,3cq6kw,Mike_Dexter,1 point,Thu Jul 9 21:59:51 2015 UTC,There's a few syntax errors and logic errors. I did my best to document my changes.  Codepen   You should use the other windows for js and css. You don't need head and body   JS   how to generate random number in range. onclick is lowercase vanilla js onclick is different than jquery onClick getElementById !== getElementByID need to parseInt on value because it's a string set up logic to prevent infinite loops   Here's a working version.
learnjavascript,3cq6kw,Pantstown,1 point,Thu Jul 9 22:45:02 2015 UTC,"Thank you, this helps a lot."
learnjavascript,3cpxfv,kitschlich,2,Thu Jul 9 20:50:42 2015 UTC,I keep the license at the top of the file for big libraries I'm using but for 8 lines of code I would definitely just use it. Chances are you'll refactor a couple things over time and in a month you won't recognize it anyway.
learnjavascript,3cpju7,biGb1313,8,Thu Jul 9 19:15:55 2015 UTC,"First try out the Codecademy course. This should take you an hour or two, tops, and will give you a chance to learn some of the idioms.  After that, start getting comfortable with DOM manipulation (making things appear / disappear, moving items around, adding and removing items).  After that, start doing some research into javascript game libraries. There are almost certainly some excellent tutorials out there. Crafty seems to be a reasonable library. Also, the Khan Academy has a games and visualization track.  Good luck! This sounds like it should be a lot of fun!"
learnjavascript,3cpju7,Ektastrophe,2,Thu Jul 9 19:32:11 2015 UTC,Thanks! I'll start asap
learnjavascript,3coogk,Volk64,2,Thu Jul 9 15:23:11 2015 UTC,"That's not much to go on.  The problem could be any number of things.  Is the relative path correct?  Maybe you're running the script before the elements exist — where's this <script> tag located in the HTML relative the elements you're trying to access, and are you using any kind of onload/DOMContentLoaded event handler?  (BTW, you don't need those, just run your script at the end of the document.)  Regardless, the browser console should have an error or warning that tells you what's wrong.  That should always be the first place you check."
learnjavascript,3coogk,Rhomboid,2,Thu Jul 9 15:56:52 2015 UTC,"Ok, problem solved. I was calling the script in a place it apparently had no way to run.  Calling the scripts in the body tag seems to have worked just fine. Now I'm running into some other problem, but it's most likely due to the google maps api I'm trying to use. Thanks a lot for the help, /u/Rhomboid"
learnjavascript,3coogk,theywouldnotstand,2,Thu Jul 9 17:37:59 2015 UTC,"javascript executes inline, so the browser stops walking through the html until the javascript has loaded and executed.  When loaded in <head>, your script is immediately trying to point to elements that don't yet exist. If you wrap it all inside a function and assign that function to the window.onload handler, i.e.:  window.onload = function () {     // your code here };   Then it will wait to try to do any of that stuff until after the entire page is ready to be displayed and the DOM is ready.  The alternative, as you've already discovered, is to put your <script> tag inside <body>, preferably at the bottom so that everything else is processed and loaded in first."
learnjavascript,3coogk,Rhomboid,1 point,Thu Jul 9 19:32:58 2015 UTC,"Ok, I added the code to the original post. Thye script I'm trying to add is at the head of the html file"
learnjavascript,3coogk,Rhomboid,1 point,Thu Jul 9 16:03:00 2015 UTC,"What does the browser console say?  (Also, this is quite suspect: <script src=""../src/javascript/index.js"">initialize</script>.  Script tags with src should be empty and not have any inner content before the closing tag.)"
learnjavascript,3co9sm,Kalfira,2,Thu Jul 9 13:25:12 2015 UTC,"Although, personally, I enjoy working in the JS MVC frameworks, it sounds like you have the most experience in .NET MVC. I'd go with the technology I personally felt strongest in (especially if this is for production).  As for IDEs, I'm using Sublime at the moment and it meets my needs. For large, inherited, projects I switch over to Webstorm as I've found the Resharper functionality to be infinitely helpful in making heads or tails of poorly documented code."
learnjavascript,3co9sm,whirlyboy,1 point,Thu Jul 9 14:14:35 2015 UTC,"the usual analogy is that of buying a car. cars have different features, some you want, some you need, some you just don't care about. sometimes it's worth putting up with quirks for one that you really like. you may want a minivan, slow but with a lot of utility. or a racecar, super fast without any trunk space. or if you are in a business, you want to have something common that your entire fleet can use.  but like cars, you can read all you want about them, but without a test drive, its hard to tell if one meets your needs."
learnjavascript,3co9sm,chmod777,1 point,Thu Jul 9 14:32:09 2015 UTC,I thought Microsoft just announced Angular support in the next version of Visual Studio.
learnjavascript,3co9sm,mens_libertina,1 point,Thu Jul 9 16:54:51 2015 UTC,"Happen to have a link for that? I'd be real interested. I know they support SOME angular stuff at the moment with Intellisense. But I'm really looking for tools to help me debug and refactor code, not just made code suggestions. The nature of JS is such that you can find yourself hopelessly lost on where the problem lies"
learnjavascript,3co9sm,mens_libertina,2,Thu Jul 9 17:46:13 2015 UTC,http://www.itworld.com/article/2894936/googles-angular-2-being-built-with-microsfts-typescript.html
learnjavascript,3co9sm,rsh412,1 point,Thu Jul 9 17:59:15 2015 UTC,it is inherently cross platform since it's just HTML/JS   I'd be careful with this statement. JS is definitely not inherently cross-browser compatible. Each browser runs its own JavaScript engine that interprets the language a bit differently.
learnjavascript,3coy7g,sojohnnysaid,2,Thu Jul 9 16:35:00 2015 UTC,"Javascript, not Java - as the saying goes, Java is to Javascript as ""car"" is to ""carpet"".  When you call sheet.getActiveCell, the value returned is a Range. If you want the content of the cell, you'll need to call the getValue method of the Range.  I'd really recommend you read the documentation for anything you're trying to work with."
learnjavascript,3coy7g,birjolaxew,1 point,Thu Jul 9 16:42:24 2015 UTC,thank you
learnjavascript,3coq4g,WinchenzoMagnifico,2,Thu Jul 9 15:35:10 2015 UTC,"func.apply(thisVal, argsArray) calls func() with this set to thisVal and the arguments from the array argsArray.  In your example, func is Array.prototype.concat so the example is equivalent to  [].concat(1, [2], [3, [[[4]]]])   The flattening comes from the inherent behavior of concat.  To quote the documentation:   concat creates a new array consisting of the elements in the object on which it is called, followed in order by, for each argument, the elements of that argument (if the argument is an array) or the argument itself (if the argument is not an array).  apply is only there to convert an array into a series of arguments for concat.   For each argument, if it's an array, it adds to the concatenation each element in that array, otherwise it just adds that argument directly.  It essentially strips one layer of array-ness, if it exists, from each argument.  There is only a single call to concat.  Everything derives from the behavior quoted above."
learnjavascript,3coq4g,Rhomboid,2,Thu Jul 9 16:10:18 2015 UTC,"concat adds 1 or more values to an array, creating a new array as a result.  In addition, it is able to recognize values if they are an array and add them as individual element values rather than a single array value, so:  [1,2,3].concat([4,5,6]) == [1,2,3,4,5,6] // instead of [1,2,3,[4,5,6]]   it only does this one level down though, so nested arrays remain arrays.  apply takes a function and calls it with an array in place of an arguments list.  So what would normally be (a,b,c, ...) in a call can be instead represented as ([a,b,c, ...]) but still appear as (a,b,c, ...) to the function.  So for your example:  [].concat.apply([], [1, [2], [3, [[[4]]]]]))   is the same as  [].concat(1, [2], [3, [[[4]]]])   And because concat can identify arrays and add their elements individually (for the first level) you get:  [1, 2, 3, [[[4]]]]   since 1 is just 1, [2] is flattened to 2, and [3, [[[4]]]] becomes 3 and [[[4]]].  The use of apply does the reduction of the top-most array (in the second argument, the first argument ([]) is context which doesn't really matter here, reducing it to what is basically a comma separated list of arguments which when passed to concat does the next reduction, but since concat is adding it back into the [] array from which it was called (well, technically creating a new one) you really don't see the effects of apply and instead just see what concat did with each of the elements within it."
learnjavascript,3cmdz0,SCrusader,5,Thu Jul 9 01:07:04 2015 UTC,How many times is 15 being added to your sum?
learnjavascript,3cmdz0,Meefims,1 point,Thu Jul 9 01:56:31 2015 UTC,Ohhhhhhh shit I'm adding the same numbers. But is my syntax correct? Cause I get an undefined after the number
learnjavascript,3cmdz0,birjolaxew,1 point,Thu Jul 9 02:08:36 2015 UTC,"Your code seems to run fine for me (except for the double-counting) - keep in mind that some crucial parts of your code (var totalSum = function (x,y) { and }; console.log(totalSum(3,5));) are outside the code block here on Reddit. You might have copy-pasted from here, but missed those lines.  Also remember that you're not returning anything - console.log(totalSum(3,5)) will log undefined, as there is no return statement in the function."
learnjavascript,3cmdz0,Evanescent_contrail,1 point,Thu Jul 9 02:31:24 2015 UTC,You are double counting numbers which occur in both lists.
learnjavascript,3cmdz0,DoctorKraz,1 point,Thu Jul 9 02:09:59 2015 UTC,"Ok - first - while getting the exact answer you need, this will sort of do (if you remember your doubling every 15), it doesn't scale well - and I assume you are doing this to learn Javascript/improve your Javascript...  Imagine if you were doing this for all multiples of 3's and 5's - but for 1000000 instead of 1000 - now you are looping through a million twice...  (actually if you were to do it for 10 million, even on modern browsers it would take a good 15-20 seconds (or longer depending on your PC) for this to run as it would be looping 20 million times - which will slow down a browser for a few seconds...)  so first - I would not loop through twice, do it once...  for (var i = -1; ++i < 1000;) {     if (i % 3 == 0 || i % 5 == 0) count += i; } return count;   That will save you from looping through twice (remember % is modulo, or what is the remainder if I divide x by y so i % 3 would = 0 for any divisible of 3 )  Now, for the record - there is even a better way to do it that doesn't involve loops - but would require you to do a little math research!  (For scaling purposes - if you were to do this for up to trillions, it would still only take a few milliseconds to get your answer)."
learnjavascript,3cmp2g,Brozekial,1 point,Thu Jul 9 02:37:14 2015 UTC,You could write something like this.   function isNumeric(n) { return !isNaN(parseFloat(n)) && isFinite(n) && n > 0; }
learnjavascript,3cmp2g,T-MoneyAllDey,1 point,Thu Jul 9 02:42:40 2015 UTC,"Do some looking into the parseInt() method and see what happens if you give it different inputs (a positive integer, a negative integer, 0, some text, some text that has a number in it but not until the end, a number followed by some text, a floating point number, etc.)  All information coming in through prompt(); is, by default, a string (that is, it's treated as text). So no matter what you'll have to do some work to get integers out of that.  Check out this Stack Overflow thread for a bit more on how to make this happen."
learnjavascript,3cmp2g,Ektastrophe,1 point,Thu Jul 9 02:44:49 2015 UTC,"All information coming in through prompt(); is, by default, a string (that is, it's treated as text).    I had no idea! Thanks for including that small, yet important, detail."
learnjavascript,3cmp2g,r3jjs,1 point,Thu Jul 9 03:05:21 2015 UTC,"Free JavaScript debugging hint:  Manually check all of your expectations.  When dealing with a strange code base (or when I was learning my way around), it wasn't uncommon for me to add debugging code like this:  var val = ""some unknown value""; console.log(val); console.log(typeof val);   The typeof operator is very important in this case.  Not all consoles show a difference between number and string values.  I think it was the old IE6 that showed array values as a string."
learnjavascript,3cmp2g,utuxia,1 point,Thu Jul 9 03:44:50 2015 UTC,var isInteger = /^\d+$/.test(string);
learnjavascript,3cmp2g,izy521,1 point,Thu Jul 9 06:47:36 2015 UTC,"There are a number (hehe) of ways to do it!  if (Number(num) || parseInt(num) || +num || !isNaN(num)) {     console.log(""It's a number"");     if (num > 0) {         //Your code here     } else {         throw new Error();     } } else {     console.log(""It's not a number""); }"
learnjavascript,3cmp2g,fieldOfThunder,1 point,Thu Jul 9 07:18:46 2015 UTC,"Look into using Math.abs(yourValue). It'll return The absolute value for your number. That basically means converting numeric strings to integers and always returning positive integers. You'll still have to check for Nan, but abs() should take care of your other requirements.  Read more on MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs"
learnjavascript,3cmp4e,tomByrer,1 point,Thu Jul 9 02:37:43 2015 UTC,"i would suggest learning ES2015 (ES6).  Basically: When you know ES6, you can always transpile it to ES5 using babel.io  So yes, you can use ES6 in Production right now thanks to transpilers (and a lot of sites already do so)  http://babeljs.io/docs/learn-es2015/"
learnjavascript,3cmp4e,martintrenker,1 point,Thu Jul 9 09:02:44 2015 UTC,"Just to give the flipside of this argument, there's no shame at all in sticking with older and less complex versions of Javascript to start out with. I started some 10+ years ago and it's been easy for me to pick up the new stuff since I was already familiar with everything else, but I can't imagine all of it being easy for newbies. (Partly because most tutorials on ES2015 are written like ""Remember doing this like A? Now you can do this like B!"")"
learnjavascript,3cmp4e,dada_,1 point,Thu Jul 9 09:10:36 2015 UTC,"Im kinda new to js, and never used a transpiler. How is it to debug or change transpiled source code, is it messy? I was thinking if other people do this on big project and people later on have to do changes to the source code without having access to the original ES6 file."
learnjavascript,3cmp4e,Archheretic,1 point,Fri Jul 10 16:12:36 2015 UTC,"if they want a job in the next year or two, then they should learn ES5."
learnjavascript,3cmp4e,utuxia,-1,Thu Jul 9 06:46:27 2015 UTC,It's nice to understand what's coming but its not like you can really use it outside of personal experiments.
learnjavascript,3cmp4e,wizang,1 point,Thu Jul 9 04:00:20 2015 UTC,"This isn't totally accurate. It's becoming very popular to use es2015 (es6) features in production applications using a transpiler (babel, typescript, traceur ) I've been using babel for months and loving it!  That said, it might not be the best choice for a beginner. At least not yet. The necessary build step is added complexity for a beginner, and since es6 is essentially just additions to JavaScript plain-Jane JS (es5) is a reasonable place to start.   I'd do a codeschool.com, codecademy.com, Kahn academy, udemy, pluralsight, mdn course, etc..., then dig into articles and some new es6 features. Lots of great resources out there. Read the sidebar on /r/JavaScript for more."
learnjavascript,3cmp4e,foobar_dev,1 point,Thu Jul 9 04:33:08 2015 UTC,"With transpiling, it's fine to use it in production. I am, and so are lots of other people. Plus, it's nice to have forwards-compatible production code. :)"
learnjavascript,3cmdw8,thinkvitamin,2,Thu Jul 9 01:06:26 2015 UTC,"Like /u/99AFCC said, you probably want to use slice for something like that. For example,  var arr = [0,1,2,3,4,5,6,7,8,9]; console.log(arr.slice(0,5)); // [0, 1, 2, 3, 4]"
learnjavascript,3cmdw8,Pantstown,1 point,Thu Jul 9 04:01:19 2015 UTC,Getting a single element from an array is indexing and getting a range would be called slicing
learnjavascript,3cl8o4,i_am_squish,3,Wed Jul 8 19:55:19 2015 UTC,"I think it's because it's translating from its initial position.  So, say your circle starts at 50px from the top, and you want to translate it up 20px, it's now 30px from the top. Then say you want to translate it 20px back down to it's initial point, if you were to translate -20px you're actually going down 40px. Basically, the element doesn't forget where it started; all movement is in relation to its initial position.   As for actually getting it back to its initial position, I think you have to translate to negative 1/2 of the circle's height, because when you translate to 0px, it's putting the top of the circle at 0px rather than the center. But I'm not 100% sure on that. To get to it back to where it started I had to put in a negative value. ¯\(ツ)/¯  /u/jodraws' solution was better. just set all the transforms to an empty string:  circle.css({     ""-webkit-transform"" : """",     ""-ms-transform"" : """",     ""transform"" : """" });   Hope this helps!"
learnjavascript,3cl8o4,Pantstown,2,Wed Jul 8 21:24:34 2015 UTC,Thanks! That makes sense actually.
learnjavascript,3cl8o4,jodraws,3,Thu Jul 9 15:28:14 2015 UTC,http://jsfiddle.net/dtrsntsb/11/
learnjavascript,3cl8o4,jodraws,3,Wed Jul 8 21:42:40 2015 UTC,"Appreciate it, thanks"
learnjavascript,3cl3dh,thepersonaboveme,2,Wed Jul 8 19:19:07 2015 UTC,"Try logging out this. I bet you'll be surprised by the result you get. For more information, check out the Mozilla Developer Network page on this. In general, Mozilla Developer Network is a great learning resource for JavaScript."
learnjavascript,3cl3dh,rsh412,1 point,Wed Jul 8 19:32:27 2015 UTC,"Thanks man :) I'm so used to the python ways, it's kinda hard to transition :)"
learnjavascript,3cl3dh,user3825,2,Wed Jul 8 20:39:49 2015 UTC,"jsBin is your friend: original example As /u/rsh412 stated;  ""this"" is not what you think ""this"" is: ""fixed"" example, maybe don't click this if you don't want the answer handed over   More info on what's going wrong  Practice proper indentation and put semicolons where required."
learnjavascript,3cl3dh,mispelledyouth,1 point,Wed Jul 8 20:18:17 2015 UTC,"Thanks, looks like an awesome site :) About my indentation, i see that I should have indented everything beneath <script> one more time, but except that, I don't see anything wrong with it. Is there?"
learnjavascript,3cl3dh,mispelledyouth,2,Wed Jul 8 20:39:01 2015 UTC,"this is set when then function is called not when it was written!!  Any time a function is called on an object the value of this is set to that object:  var obj1 = { name:'Bob' } var obj2 = { name:'Pete' }  function speak() {      console.log(this.name); }  obj1.speak = speak obj2.speak = speak  obj1.speak() // Bob obj2.speak() // Pete.  See how calling a function defined on an object sets the value of this to that object.   However when you pass just the function reference in ( ie you are not executing that function on another object using dot syntax ) the value of this is not being explicitly set and will default to the global object which does not have the properties you are looking for defined.  So, rather than pass the stringGetter function to the logger function, pass the myObject and then call getString().  The execution context of the function ( ie what this resolves to ) will now be myObject.  Alternatively you can 'bake in' the execution context of the function by using the .bind function property.    myLogger(myObject.getString.bind(myObject));   However you may be more interested in closures and accessing instance properties without using this at all:  function myClass() {     var myString = 'Hey';      return {         getString: function() {                 return myString;         }     }     }    var myLogger = function(stringGetter) {     console.log(stringGetter()) }  var myObject = new myClass()  myLogger(myObject.getString);   This WILL give you what you want, whereby you can pass a function to a method, call it and it has access to properties set on the function it was defined on.  See how I declared a variable inside a function and returned an object that has a method referencing that variable declaration."
learnjavascript,3cltey,embernoob,2,Wed Jul 8 22:23:23 2015 UTC,"Error's a constructor if I'm not mistaken. So while you have the code right, you forgot ""()"".  throw new Error();"
learnjavascript,3cltey,izy521,2,Wed Jul 8 23:09:30 2015 UTC,Hey thanks! Actually I typed that out on my phone and forgot to include () but that is actually in my code and the error it throws counts against me. There is some discussion on the kata regarding how to throw an error but the author isn't giving any advice on what should be thrown exactly.
learnjavascript,3cltey,izy521,2,Thu Jul 9 00:46:37 2015 UTC,"Hm, I've never used this CodeWars site but I'm signing up. Does it ask for a certain type of error? Like RangeError() or TypeError()?"
learnjavascript,3cltey,izy521,2,Thu Jul 9 01:00:05 2015 UTC,"This is all it says with regard to the throwing of errors:  undo() Undo the last operation (set or del) on the object. Throws an exception if there is no operation to undo.  redo() Redo the last undo operation (redo is only possible after an undo). Throws an exception if there is no operation to redo.  Edit: Forgot to mention, yes, definitely sign up - its a lot of fun!"
learnjavascript,3cltey,izy521,2,Thu Jul 9 01:11:47 2015 UTC,"It sounds a bit weird that they'd request an exception considering that'd stop the execution thread. I'm currently doing the exercise now, but on one of their test lines it says:   Test.expect(false, 'It should have thrown an exception');   Maybe the creator of the test used the wrong terminology? Try making it   return false;    instead."
learnjavascript,3cltey,izy521,2,Thu Jul 9 01:57:02 2015 UTC,"Thanks, I just tried return false; and no luck there. I've tried wrapping my statements in a try/catch but that didn't work either. I'm stumped at this point."
learnjavascript,3cltey,izy521,1 point,Thu Jul 9 05:10:30 2015 UTC,"Don't worry, there's something wrong with his logic. I'm sure he must have changed it afterwards and not proofread it. I completed the Test but not the Submission. The area where it fails is:  set/del-> redo tests Test Passed: Value == {""x"":5,""y"":6} Test Passed: Value == {""x"":5} Test Passed: Value == {""x"":5,""y"":66} It should have thrown an exception. After set call, there is nothing to redo one undo call - Expected: {""x"":5}, instead got: {""x"":5,""y"":66} one redo call - Expected: {""x"":5,""y"":66}, instead got: {""x"":5,""y"":6}   However, obviously it didn't throw an error on the redo, because on the second line it performed an undo operation on the 'y' value.  I understand it says ""set/del -> redo"", but it's not. If you want to, here's my code:  function undoRedo(object) {     return {     undoActions: [],     redoActions: [],     addToUndo: function(actionName, key, value) {       var tempObj = {};       tempObj.actionName = actionName;       tempObj.key = key;       tempObj.value = value;       tempObj.exist = object[key] === undefined ? false : true;       this.undoActions.push(tempObj);     },         set: function(key, value) {       this.addToUndo('set', key, object[key]);       console.log(this.redoActions);       object[key] = value;     },         get: function(key) {       return object[key];     },         del: function(key) {       this.addToUndo('del', key, object[key]);       delete object[key];     },         undo: function() {       if (this.undoActions.length > 0) {         var tempObj = this.undoActions[this.undoActions.length - 1];         var redoObj = {};         redoObj.actionName = tempObj.actionName;         redoObj.key = tempObj.key;         redoObj.value = object[tempObj.key];          object[tempObj.key] = tempObj.value;          this.redoActions.push(redoObj);         this.undoActions.splice(this.undoActions.length - 1, 1);       } else {         throw new Error();       }     },         redo: function() {       if (this.redoActions.length > 0) {         var tempObj = this.redoActions[this.redoActions.length - 1];         this[tempObj.actionName](tempObj.key, tempObj.value);         this.redoActions.splice(this.redoActions.length - 1, 1);       } else {         throw new Error();       }     }     }; }   On the ""set"" function, I have a console.log(this.redoActions) (My array for redos).   The Submission test returns:   set/del-> redo tests [] [] Test Passed: Value == {""x"":5,""y"":6} Test Passed: Value == {""x"":5} [ { actionName: 'set', key: 'y', value: 6 } ] Test Passed: Value == {""x"":5,""y"":66} [ { actionName: 'set', key: 'y', value: 6 } ] It should have thrown an exception. After set call, there is nothing to redo one undo call - Expected: {""x"":5}, instead got: {""x"":5,""y"":66} [ { actionName: 'set', key: 'y', value: 6 } ] one redo call - Expected: {""x"":5,""y"":66}, instead got: {""x"":5,""y"":6}   As you can see, there's something inside the redo array. So he didn't use 'del', he used 'undo'."
learnjavascript,3clqfc,MEAT_FIST,1 point,Wed Jul 8 22:00:19 2015 UTC,"Do you have any other nested routes other than the default route?  I can't see any reason why it wouldn't work :/  double check and see the LoginForm is exporting correctly and everything?  *edit  Might be stupid and i'm sure you have it, but in your App make sure you have a <RouteHandler /> ..."
learnjavascript,3cjprj,LeanRammus,4,Wed Jul 8 13:13:39 2015 UTC,"I prefer to keep my HTML and JavaScript separate.  I use HTML to lay the foundation and build the walls.  JavaScript is the functionality.  The two needn't cross.  It makes managing a bit easier as well.  As for your question, give the button an ID or class in the HTML.  I prefer class but an ID will work.  Then, in the JS, bind an onclick event like this:  (selector).on('click', function(){   console.log('clicked'); });   The selector can be done several ways:  Vanilla JS:  document.getElementById('id');   or  document.getElementsByClassName('class');   JQuery:  $('#id')   or  $('.class)   Hope that helps!"
learnjavascript,3cjprj,cmartin616,2,Wed Jul 8 14:14:49 2015 UTC,"Ideally you would attach a listener event to the button in your javascript. I see you're using jquery, so you can use   $('.btn-default').on('click', myFunction);"
learnjavascript,3cjprj,dbpcut,2,Wed Jul 8 14:12:50 2015 UTC,You can use addEventListener() or if you're using jQuery then you could use click().  Example: https://jsfiddle.net/pjen0ojb/
learnjavascript,3cjprj,blitterobject,1 point,Wed Jul 8 14:15:13 2015 UTC,"but how do I associate the HTML button to run the function?   You can write it right in to the html. Write a function in the js portion of your code... then in the html just write  <input onclick=""yourFunction()""></input>   That will make it so that clicking on that input element calls yourFunction() in the js."
learnjavascript,3cjprj,ForScale,2,Wed Jul 8 13:24:35 2015 UTC,"Okay, so in my example on Jsfiddle I would use  onclick=""header-login()""  Not 100% sure if that is correct"
learnjavascript,3cjprj,crilen,1 point,Wed Jul 8 16:48:59 2015 UTC,"Avoid dashes in your functions... headerLogin is more appropriate. But don't do the onclick in the html part of code. cmartin616's method is again, more appropriate."
learnjavascript,3cjprj,ForScale,1 point,Wed Jul 8 17:50:04 2015 UTC,"What is the name of the function you want to call? That is what should be in your onclick. Like this:  onclick=""nameOfFunctionToBeCalled()""   And for some reason, people like to be snobby about separating html and js... it makes sense but it's not an absolute necessity. So know that you can go to your js and do  document.getElementById(""yourId"").addEventListener(""click"", function() {   /*do stuff*/ });   Make sense?"
learnjavascript,3cjprj,ForScale,2,Wed Jul 8 17:50:54 2015 UTC,"Yes it does make sense. I'm trying not to pick up bad habits along the way which is why I asked here - thanks guys!   It seemed I had it correct in the first place, however my JS isn't running for some reason."
learnjavascript,3cjprj,ForScale,2,Wed Jul 8 18:19:44 2015 UTC,"Looks like you're using jQuery... you're using jQuery, right? I think you have to do something special on jsfiddle to run jQuery.  What is your goal? Just to understand how to have an html button call a js function? Cause I can give you a dirt simple example of both the onclick and .addEventListener means of achieving that goal..."
learnjavascript,3cjprj,ForScale,2,Wed Jul 8 18:26:42 2015 UTC,"Yeah my mistake - I am using jQuery. Basically when the user clicks on my HTML object ""Login"" the jQuery function will be ran (I'm doing this on my apache setup). It drops down and shows a box, however nothing happens at all - I assume its not being ran or ive done something wrong.  I have used cmartin's method. It looks different because I haven't included the CSS in jsfiddle.   https://jsfiddle.net/tu0a2eot/"
learnjavascript,3cjprj,blitterobject,2,Wed Jul 8 18:34:54 2015 UTC,"Honestly, I don't like jsfiddle. I like to use CodePen.  If you change the Onload thing in the right sidebar to ""No wrap - in <body>"" and then click Run at the top and then click your Login button... something does happen. It says:  {""error"": ""Please use POST request""}"
learnjavascript,3cjprj,blitterobject,2,Wed Jul 8 18:49:48 2015 UTC,"Oh interesting, would I need to post the jQuery? This has all come from a template and was working, and I don't understand why it isn't now"
learnjavascript,3ciork,Reuels,1 point,Wed Jul 8 05:27:52 2015 UTC,Seconding this.
learnjavascript,3ciork,plumbe0,1 point,Wed Jul 8 08:04:24 2015 UTC,"I did it and I liked it. The course doesn't take too long and when I initially went through it, I may have spent a bit too much time straining over details. The projects are great and following along the reddit omnibus posts help a lot ( on my phone, so Google it ). You get to look at other people's approaches and get a community feel. Also, Ive done some of the Odin Project for JS, and the whole program seems very well made. Odin Project takes a lot longer though, I believe. If you have more time, I'd say go for Odin project"
learnjavascript,3ciork,xheyhenry,1 point,Wed Jul 8 08:32:54 2015 UTC,"I'm in about week 5 of it (on Ajax right now), and I'm really liking it. I am more of a visual learner, so I've been using Duckett's book along with the Beginning Javascript text the program recommends. It's been one of the best learning experiences I've had.  That said, no single source will be your end-all answer. I use this subreddit, /r/javascript, /r/frontend, and /r/webdev as well as other videos and texts to help you along the way. ""JavaScript Properly"" is a great guideline and time management tool if you're looking for a program that will help keep you focused and on track, but always be willing to use other sources as well."
learnjavascript,3ciork,coffee-makes-me-poop,1 point,Wed Jul 8 09:26:54 2015 UTC,"Seconding the Jon Duckett book. I've gone through tons of JS stuff online (Treehouse, Lynda, Codecademy, etc.) and the Duckett book is the first one I really felt like I was learning the true nature of the language. I've learned more from it than any of those other sources.  Also seconding that there's no canonical way to 'properly' learn a language. People learn in different ways, and one method that works incredibly for someone can possibly do nothing for another. It's just a matter of finding what works best for you."
learnjavascript,3ciork,Sean_May,1 point,Wed Jul 8 11:33:31 2015 UTC,This one http://www.amazon.com/JavaScript-JQuery-Interactive-Front-End-Development/dp/1118531647/ref=la_B001IR3Q7I_1_2?s=books&ie=UTF8&qid=1436384123&sr=1-2 ?
learnjavascript,3ciork,orlybg,1 point,Wed Jul 8 19:37:55 2015 UTC,"That's the one, absolutely stellar stuff. He has a book on HTML/CSS as well if you're just getting started in front-end.  You can get both as a set for $25, it looks like.  They're really well-formatted and visually pleasing. Coming from a graphic design background myself, these were just what I needed."
learnjavascript,3cl8vx,cubid0,1 point,Wed Jul 8 19:56:43 2015 UTC,"What you are doing seems like a pretty standard usage of the 'new' paradigm. Yes, having Employee in the global scope isn't great. Most libraries handle this through namespacing (hiding everything under a global object.. ie $/JQuery), and inner functions to hide variables etc."
learnjavascript,3cl8vx,wizang,1 point,Wed Jul 8 20:49:11 2015 UTC,"myAPI[""Employee""] = (function() {     function Employee(firstName){          this.firstName = firstName;     };      Employee.prototype.getFirstName = function(){          return this.firstName;     }     return Employee })();  // myAPI is an object in the global scope initialized before this library 'module'...   This will make a common api namespace by keeping Employee in a separate file and attaching it to  a global objects method. i.e window.myAPI.Employee"
learnjavascript,3ck4kn,Ilikebook_s,3,Wed Jul 8 15:16:10 2015 UTC,"You probably want to look into the modulus operator, represented by ""%""  which is a key part of the fizzbuzz challenge, I'll leave it at that because it still gives you an opportunity to solve it yourself but if asked for I could give you further help!"
learnjavascript,3ck4kn,Sandbucketman,1 point,Wed Jul 8 15:40:27 2015 UTC,"Thats the part I do know on my own. I am not sure how or where to declare x, y, and n.  for (var i = 1; i <= n; i++){         if (i % x === 0 && i % y === 0){             console.log(""FB"");         }         else if (i % x === 0) {             console.log(""F"");         }         else if (i % y === 0){             console.log(""B"");         }         else {             console.log(i);         }     } }"
learnjavascript,3ck4kn,Sandbucketman,1 point,Wed Jul 8 15:46:36 2015 UTC,"You declare the variables before the loop begins. That way the loop will be able to use them.  so:  var x = 3; //the first number you'll check for ""Fizz"" var y = 5; //the second number you'll check for ""Buzz"" var n = 100; //the number you want i to increase up to before stopping the loop    Then run your loop that uses x and y for comparisons and n to know for how long the loop will have to run."
learnjavascript,3ckl1o,gagaboy,2,Wed Jul 8 17:14:10 2015 UTC,"Sure - a few moments of googling reveal two libraries for this specific purpose: Javascript-ID3-Reader (with demo) and id3.js. Both support the File API.  As for writing tags, that's not really possible in the browser (since Javascript is sandboxed, it can't write to files)."
learnjavascript,3ckl1o,birjolaxew,1 point,Wed Jul 8 18:29:21 2015 UTC,Use node to do file io with JavaScript.
learnjavascript,3cje2x,16495701722,3,Wed Jul 8 11:08:09 2015 UTC,var rand = Math.floor(Math.random()*backgrounds.length);  I think you mean background.length
learnjavascript,3cje2x,butterandguns,1 point,Wed Jul 8 11:21:16 2015 UTC,"Whoops, I've just edited that but it still doesn't work :/"
learnjavascript,3cje2x,raoulduke85,2,Wed Jul 8 14:23:42 2015 UTC,"The current code works for me. But if you want it to be random on every single hover, you need to recalculate your rand variable, as now it is set once at initialisation, so i.e. something like this.   $(function () {     var background = [""#FF0000"", ""#00FF00"", ""#0000FF"", ""#FFFF00"", ""#FF00FF""],         text = [""#FF00FF"", ""#FFFF00"", ""#0000FF"", ""#00FF00"", ""#FF0000""],         rand;      $('h1,a').hover(         function () {             rand = Math.floor(Math.random() * background.length);             $(this).css('background', background[rand]);         },         function () {             $(this).css('background', '#fff');         }     );     $('h1,a').hover(         function () {             rand = Math.floor(Math.random() * background.length);             $(this).css('color', text[rand]);         },         function () {             $(this).css('color', '#000');         }     ); });"
learnjavascript,3cjuzt,mrpunchy,2,Wed Jul 8 14:00:27 2015 UTC,JavaScript and Jquery by Ducket. It is more for the visual learner making it easy to read. Not your usual text book
learnjavascript,3cjuzt,clamjabber,1 point,Wed Jul 8 14:03:00 2015 UTC,"I have it, and yeah, that is what you need."
learnjavascript,3cjuzt,zetogaizka,1 point,Wed Jul 8 14:38:01 2015 UTC,Eh! Thanks for your feedback on the book!
learnjavascript,3cjuzt,clamjabber,1 point,Wed Jul 8 14:44:11 2015 UTC,Nice... found this.
learnjavascript,3cjuzt,Ctrl13,2,Wed Jul 8 14:44:39 2015 UTC,Nice that's a good deal. I have the set too
learnjavascript,3cjuzt,Ctrl13,2,Wed Jul 8 15:02:27 2015 UTC,"I didn't find the HTML&CSS book to be much more than a glossary. So far the JS JQuery book is okay, I don't think it serves as a good introduction into programming, and I wouldn't recommend it to a complete novice."
learnjavascript,3cjp47,matstars,1 point,Wed Jul 8 13:07:38 2015 UTC,I got it! thanks to /u/guohuade    I had a remnant where i was binding the scope to app.Posts::url() -- removing that worked fine!
learnjavascript,3cgs6o,iNeedHelpFriends,8,Tue Jul 7 20:06:40 2015 UTC,"This is actually because you're naming your function click. Here's why:  When an event handler (eg. onclick) is ran, it runs inside the button scope.   Now, when you ask Javascript to run a function, it first tries looking for the function in the current scope. If it can't find it, it moves up one scope. If it still can't find it, it keeps moving up until it reaches global scope.  You've defined click on the global scope (or would have, if you didn't run it in JSFiddle with onLoad set as the script injection type). That means that, if any of the scopes that connect the code and the global scope have a property named click, that will be run as a function instead of the function you defined.  And it just so happens that all elements have a click method. In other words, you're running the click method of the button (since your event handler is run in the element scope), not your own function. Either specify the function to be window.click (window is the global scope), or call it something else."
learnjavascript,3cgs6o,birjolaxew,-1,Tue Jul 7 21:10:53 2015 UTC,"2 things:  1/ The <link> tag isn't closed properly, should be <link ...... /> 2/ Where is your JS file, I see the reference to it but it doesn't appear to be loaded?"
learnjavascript,3cgs6o,williamwebsworth,4,Tue Jul 7 21:07:38 2015 UTC,This is wrong. <link> is a void element which:   only have a start tag; end tags must not be specified for void elements.   And a little further down the page:   [The '/' character] has no effect on void elements  I think he put the linked file as the JS on JSFiddle - at least the content of it makes sense for what he's trying to do.
learnjavascript,3cgksf,matstars,1 point,Tue Jul 7 19:15:27 2015 UTC,Well I'm sure someone will help if you ask a question... you should post it here but PM me if you want.
learnjavascript,3cgksf,guohuade,1 point,Wed Jul 8 02:01:59 2015 UTC,I'm bookmarking this in hopes that I will one day need a Laravel guy. Sorry if you thought this was a lead XD
learnjavascript,3cfwqs,Spurioun,6,Tue Jul 7 16:30:26 2015 UTC,"Besides the missing ""+"" sign right before the last ""?"", I'm assuming that you are wondering why ""age + 1"" isn't adding 1 to the actual value of ""age"" but instead a ""1"" is appended to the end of the value of ""age""? It's because the value of age is a string (text) and not an int (a number).  You can either use parseInt(age) to convert age into an int before adding 1 to it like this:  alert('So' + ' ' + name + ',' + ' ' + 'in one year you will be' + ' ' + (parseInt(age) + 1) + '?');     or you can use the unary (+) operator which indicates a math operation:  alert('So' + ' ' + name + ',' + ' ' + 'in one year you will be' + ' ' + (+age + 1) + '?');     Hope this help."
learnjavascript,3cfwqs,kougaa,1 point,Tue Jul 7 16:53:53 2015 UTC,Perfect! thank you so much :D
learnjavascript,3cfwqs,Orakar,2,Tue Jul 7 17:25:58 2015 UTC,"Also, why are you adding spaces as separate items in the strings you're building? Instead of 'foo' + ' ', why not do 'foo '?"
learnjavascript,3cfwqs,Benmjt,0,Tue Jul 7 19:49:19 2015 UTC,"Because I've been coding for a combined total of 2.5 hours and that's what Code Academy told me to do. So, I don't have to have spaces as separate strings?"
learnjavascript,3cfwqs,MarkyMarksAardvark,4,Tue Jul 7 19:56:49 2015 UTC,"Nope, you can pop them in as part of the string.  Also, I would suggest giving Treehouse a go, I tried Codecademy and found it really lacking. I've picked up a much better understanding from their JS series. Here's a referral link to get your first month 1/2 price if you're interested."
learnjavascript,3cfwqs,Orakar,2,Tue Jul 7 20:04:26 2015 UTC,I second this. I started programming a few months ago and have found Treehouse way better and more in depth than Codecademy.
learnjavascript,3cfwqs,Orakar,3,Tue Jul 7 20:16:03 2015 UTC,"Nope, you don't need to add spaces separately to string literals, just add a space in the literal (a string literal is a string you've typed in quotation marks like ""this""), but you do need them to add spaces in between string variables. So this is bad [""hello"" + "" "" + ""world""] and should be [""hello world""], but this is needed, where foo and bar are string variables containing ""hello"" and ""world"" respectively: [foo + "" "" + bar].   I didn't mean to sound critical in my previous post -- I know you just started out. I was only trying to help!  Good luck with the coding!"
learnjavascript,3cfwqs,Ob101010,1 point,Tue Jul 7 22:08:29 2015 UTC,"Sorry, I didn't read your comment as critical, I was going for humorous with my response but it came out snarky lol Thank you for the info though! :D   Also, how would you recommend I rewrite what I have?"
learnjavascript,3cfw41,sojohnnysaid,6,Tue Jul 7 16:26:01 2015 UTC,"It's kind of backwards, but if you reverse it:  for (var j=i; j < (i + myName.length); j++)   It makes it easier for me to tell you it's moving the ending position up to ""i"" and adding the length of your name to it.  Remember a for loop's construction?  for (initial point; ending point; what it does to reach the end)   Your first E is found at myStr[30], so the for loop would start at 30. The length of your name is is 4. So without adding the ""i"", it would look like:   for (var j = 30; j < 4; j++)   The starting point is higher than the ending point, which is why it's not giving you any results. But with the ""i"":  for (var j = 30; j < 34; j++)   I'm not exactly sure I got those values right, but I'm just explaining the logic."
learnjavascript,3cfw41,izy521,2,Tue Jul 7 16:40:53 2015 UTC,"This is just an aside, and doesn't pertain directly to OP's question, but I did feel like it's worth discussing.   for (initial point; ending point; what it does to reach the end)   While most for loops will that match that description, it's worth pointing out that it's more flexible than that. I would describe it more like:  for (<initialization>, <continuation test>, <after iteration>)   Where:   <initialization> is a statement that will execute exactly once before the loop begins. <continuation test> is an expression that is evaluated before an iteration begins, and is evaluated for truthiness. The loop will continue if this evaluates to true. <after iteration> is a statement that is run each iteration after the code inside the curly braces, and before <continuation test> is evaluated.   Some unconventional for loops:  // Don't actually run this, it's an infinite loop for (;true;) {}  // Executes once for (var a = 1;a;a = 0) {     console.log(""This should appear exactly once.""); }  // Executes once, variant var a = true; for (;a;) {     console.log(""This should appear exactly once."");     a = false; }  // Doesn't execute at all for (;false;) {     console.log(""This should never appear.""); }  /* Empties an array, printing values to   * console in reverse order as it goes.  */ for (var a = ['a','b','c']; a.length;) {     console.log(a.pop()); }   Whether or not loops like these are a good idea to use is a different discussion altogether. I just wanted to point out that it can be more than just for( start; stop; step ) { ... }  edit: Another unconventional usage of for loop structure, a coin flipping bot:  function coinFlipper() {   for (var coin = Math.random(); coin > 0.5; coin = Math.random()) {     console.log(""You flipped heads! Flipping again..."");   }   console.log(""You flipped tails. Game over.""); }   Yes, it could and should be done with a while loop, but we're tinkering with for loop structure."
learnjavascript,3cfw41,theywouldnotstand,1 point,Tue Jul 7 20:06:47 2015 UTC,very insightful.  I appreciate this break down and how to look at for loops in a way that offers more utility.  Thanks!
learnjavascript,3cfw41,izy521,1 point,Tue Jul 7 20:44:00 2015 UTC,"You're explaining the logic and you've successfully blown my mind!  haha thank you so much I really get it now.  i index represents the position of the E's location in the string which numerically in one case is 30 and the length of myName is 4.  The rule is LESS than so index 30 is the E plus 4 is R - I - C - "" ""  but since the rule is LESS than not equal to the for loop stops before that space, leaving E,R,I,C getting pushed into the array.  I hope that made sense.  Thank you so much!  edit: I just tried to see what would happen if I changed the rule to equal instead of less than.  It crashed....so i guess i'm not completely understanding.  But I do have a better understanding than I did before =D"
learnjavascript,3cfw41,arbitrary_aphid,1 point,Tue Jul 7 20:21:17 2015 UTC,"I don't generally use = (equal), but if you're trying to, use <= (less-than-or-equal). I've used = once before, and I remember the for loop continuing forever."
learnjavascript,3cfw41,izy521,1 point,Tue Jul 7 21:22:26 2015 UTC,"Do you mean to check equivalence (==)? If so it'll just quit the for loop and display the log message because  j will always be smaller than myName.length + i.  That is to say  for(<initialization>; <conditional>; <iteration>){//...}   the loop will only continue to the next iteration(cycle) if the conditional statement (true/false) is true. So for the second for loop you had, on the first iteration and with i = 30 and myName.length = 4, it would be:  for(var j = i; j < (myName.length + i); j++)   substitute i = 30:  for(var j = 30; j < (myName.length + 30); j++)   substitue j, and myName.length:  for(30; 30 <  (4 + 30); 30++)   With the == it would be:  for(30; 30 == (4 + 30); 30++)   obvious 30 is not equivalent to 34.   On the other hand if you used the assignment operator (=), it is not a conditional (true/false; boolean), and may be seen by the interpreter as empty but valid. A for loop only ends when the conditional becomes false, so a for loop that is always valid will loop forever. And looping forever causes bad things."
learnjavascript,3cfz93,Tasdilan,2,Tue Jul 7 16:48:00 2015 UTC,"Yes, I've provided an example in this JSFiddle: http://jsfiddle.net/fknphdxc/  If you want to make just one document, and not a separate JavaScript file, then just include the JavaScript inbetween <script> //HERE </script> tags."
learnjavascript,3cfz93,izy521,1 point,Tue Jul 7 17:14:22 2015 UTC,"Thanks! Can i place the input box at the bottom of my html code (below the x3dom box) or is it important that the input part is at the beginning?  EDIT: I did something wrong, pasted the code in a jsfiddle (didnt even know that tool before you helped me out btw, seems like its awesome!): http://jsfiddle.net/z1dckc9o/  Id be really happy if you have the time to take a quick look over it! :)"
learnjavascript,3cfz93,izy521,2,Tue Jul 7 17:47:22 2015 UTC,"Right now I'm on my phone because I'm out, however I took a quick look at it. It looks like you included the <script> before the elements. Try moving the script to the end of the body.  The input box can be below the x3dom, in the html. Just make sure the script is below that."
learnjavascript,3cfz93,izy521,2,Tue Jul 7 18:15:17 2015 UTC,"Yeah, that must have been it. Here's a trick if nothing works and you feel it might be a JavaScript issue: Open the JavaScript console (Ctrl + Shift + J). It'll tell you some information."
learnjavascript,3cfz93,izy521,1 point,Tue Jul 7 18:37:33 2015 UTC,Its working now!  Thanks a lot for your help - it was very easy to understand thanks to you!
learnjavascript,3ce4v1,chunged,1 point,Tue Jul 7 05:10:20 2015 UTC,"Switch your else if and else statements so that   } else {     return ""Paper wins""; }  Is your last statement."
learnjavascript,3ce4v1,aresdesmoulins,1 point,Tue Jul 7 05:18:17 2015 UTC,"Thank you! Life saver.  (Javascript has been very fun to learn so far, but it is so easy to get lost at this stage)"
learnjavascript,3ce4v1,thunderbug,0,Tue Jul 7 07:48:25 2015 UTC,"} else {             return ""Paper wins"";         } else /*<--problem*/ if(choice1 === ""Paper"") {   You can't have an else after an else.  You did this:             if (x) {             } else {             } else if {             }  If x is false, the first ""else"" will run and there is no way code execution can ever reach the ""else if""."
learnjavascript,3ce4v1,endee21,1 point,Tue Jul 7 05:29:01 2015 UTC,"This.  more specifically, you're checking if choice1===""Paper"" in the scope in which you know that choice1===""Rock"" from the surrounding if."
learnjavascript,3cb5gw,Ob101010,3,Mon Jul 6 15:15:19 2015 UTC,hurpdurp lol... whoever you are that was the first thing said in this app
learnjavascript,3cb5gw,BBQLays,2,Mon Jul 6 15:18:29 2015 UTC,"Since people seem confused... Click the usernames in the column on the right. It will ""unravel"" the text to show what that person said. The main box is characters that everyone said.  It does look like white space is ignored which makes reading it challenging though."
learnjavascript,3cb5gw,BBQLays,2,Mon Jul 6 15:26:12 2015 UTC,"hmm.. I noticed that too.. the first bug report! ty  edit : fixed, now to push / pull the changes... going to have to restart it, take 2 secs..."
learnjavascript,3cb5gw,BBQLays,2,Mon Jul 6 15:27:08 2015 UTC,Doesn't seem to be working quite right.  Your Text  Did I make a username?Read the Github readme.It explains it.  User Text  DiImaeuenme?ReateGihueam.Itexlinit.
learnjavascript,3cb5gw,utuxia,2,Mon Jul 6 15:27:18 2015 UTC,"Did you click on that user in the right side list?   You typed 'Did I make a username?Read the Github readme.It explains it.'  Some other guy (you clicked his username) typed 'DiImaeuenme?ReateGihueam.Itexlinit.'  Thank you for this feedback, I know the instructions are unclear, Im trying to make it better."
learnjavascript,3cb5gw,Resquid,2,Mon Jul 6 15:32:21 2015 UTC,"I clicked my own username. I'd expect both those text boxes to match, other than the white space issue I already mentioned."
learnjavascript,3cb5gw,dkran,1 point,Mon Jul 6 15:35:29 2015 UTC,"already fixed the spaces issue.  Another thing I noticed was typing fast can result in missed characters. Its because theres a delay, client -> server -> client  Not sure how Id fix that."
learnjavascript,3cdfb1,sin-so-fit,3,Tue Jul 7 01:22:42 2015 UTC,"I think the description is just missing a space ;)   Create a web page that gets the length and width of a rectangle from the user.   And   Report in the web page (do not use prompts or alerts) the area and perimeter of the rectangle.   Basically use HTML without popups to handle user input and to show the user (""Report"") information about the rectangle.  It took me a second to see that... :D"
learnjavascript,3cdfb1,senocular,2,Tue Jul 7 01:28:48 2015 UTC,"HOLY SHIT I'M FUCKING DUMB.  EDIT: I spent half an hour scratching my head, I'm now going to laugh myself to sleep after I turn this in."
learnjavascript,3cdfb1,senocular,2,Tue Jul 7 01:30:28 2015 UTC,But if you read it as a js property it almost makes perfect sense!
learnjavascript,3cdfb1,Ob101010,1 point,Tue Jul 7 01:31:44 2015 UTC,"It almost does! I should email my professor this thread, I'm sure she'd laugh at the misunderstanding too."
learnjavascript,3ce3ja,hi_new_here_me,6,Tue Jul 7 04:56:56 2015 UTC,"You're actually assigning an array to myArray[0], not a string.  The following code fragment stores the string ""steve jones"" in slot 0 of the array:  myArray[0] = ""steve jones"";     myArray[0] = [""steve jones""] constructs an array with 1 element and stores the array in slot 0 of myArray."
learnjavascript,3ce3ja,calzoneman,1 point,Tue Jul 7 05:10:19 2015 UTC,"myArray[0] is an array with a string in it. Array does not have a substring method, but strings do.  What you need to do is remove the [ and ] from around ""steve jones"" and your code will work."
learnjavascript,3ce3ja,aresdesmoulins,1 point,Tue Jul 7 05:13:02 2015 UTC,"or  myArray[0][0].substring(1,3); // ಠ_ಠ"
learnjavascript,3cdxce,BeatMastaD,1 point,Tue Jul 7 03:57:15 2015 UTC,"I think most of it looks fine but I just spottet some typos, compare your version to   <a href=""p1.html""><img src=""thumbnails/t1.jpg"" alt=""photo 1""/></a>"
learnjavascript,3cd86d,RivtenGray,3,Tue Jul 7 00:22:57 2015 UTC,You use node. Like you said.  There should be a node module on npm that will output a picture file which is your rendered graph.
learnjavascript,3cd86d,ahref,1 point,Tue Jul 7 00:38:01 2015 UTC,Thank you for your answer.  So there is basically no way to make a lib such as Chart.js work with node ? I just need to find the proper node library which suits my need ?
learnjavascript,3cd86d,ahref,1 point,Tue Jul 7 00:41:16 2015 UTC,Chart.Js relies on the html5 canvas. I'll poke around for you on npm
learnjavascript,3cd86d,izy521,1 point,Tue Jul 7 00:50:26 2015 UTC,Ok ! Got it.  Thanks a lot :)
learnjavascript,3cd86d,GrantDG,1 point,Tue Jul 7 04:14:22 2015 UTC,You can try Node-Webkit. It allows you to make programs with HTML DOM. https://github.com/nwjs/nw.js/
learnjavascript,3cbpmk,Krehzzzy,2,Mon Jul 6 17:47:01 2015 UTC,"The line is declaring two variables:  var node, current;   Except the first one happens to have an initializer:  var node = /* blurg */, current;"
learnjavascript,3cbpmk,Rhomboid,1 point,Mon Jul 6 18:10:52 2015 UTC,"Ok, so current is the same as if I were to just write var current;? It has no correlation to Node? Thanks for the help."
learnjavascript,3cbpmk,ForScale,2,Mon Jul 6 18:17:25 2015 UTC,"Something to play around with:  var string = ""text data"", two = 2, tOF = true, undf;  console.log(string); console.log(two); console.log(tOF); console.log(undf);"
learnjavascript,3cbpmk,senocular,1 point,Mon Jul 6 18:35:27 2015 UTC,"yup.  var node = new Node(element), current;   is the same as  var node = new Node(element); var current;   You may also see this used with a single var across multiple lines (still comma separated)  var node = new Node(element),     current;"
learnjavascript,3ccynz,segmentationfaulter,1 point,Mon Jul 6 23:07:12 2015 UTC,I'd suggest checking out http://todomvc.com/  Its one simple app written many different times each with different frameworks (as well as different compile-to-js languages).
learnjavascript,3ccxay,DoesIGetIt,2,Mon Jul 6 22:57:07 2015 UTC,"PostCollection is a constructor for creating new PostCollection collection instances but it looks like you're trying to listenTo PostCollection directly rather than a PostCollection instance in your AppView.initialize method.  So instead of the PostCollection constructor, create a PostCollection instance and listen to that instead.  var myPosts = new PostCollection( ... ) ... this.listenTo(myPosts, 'add', this.render);"
learnjavascript,3cboz7,OzzyHere,4,Mon Jul 6 17:42:47 2015 UTC,"The value of this depends on how the function was called.  If it's called as  obj.func(arg);   ...then this is set to obj for the duration of the call to func.  This happens only if the call has that exact form.  If you had written:  var f = obj.func; f(arg);   ...then that would no longer be the case.  The function is being called as a free function here, so this is set to the global object, which is window in the case of a browser.  The fact that func is a property of obj is lost when you assign it to f and then call it as f(arg).  And that's essentially exactly what you're doing when you write setInterval(obj.func, 100);.  You're passing obj.func as an argument to a function.  Inside that function, it has some name, like f above.  The fact that it's a property of obj is not retained.  This is just a reference to a function now, there's nothing connecting it to the object obj.  When the browser calls your callback, it calls it like a free function (because that's the only information that it has), so this is set to the global object.  Passing a string to setInterval() works because that string is eval-d.  In that case, the call site does look like obj.func(...), because eval-ing a string works as if that string had been written as a line of code that is executed.  But don't do that.  You never want to use the string form of setInterval() and any form of eval is very distasteful.  There are two ways to get what you want:  setInterval(function() { engine.gameFrame() }, 10);   or  setInterval(engine.gameFrame.bind(engine), 10);   The latter creates a bound copy of the function that has its this bound to engine.  It's essentially the same thing as the first one, except that it also passes through any arguments, but there are none in this case.  (Note: function.prototype.bind is an ES5 feature, so it won't work with a few older browsers.)"
learnjavascript,3cboz7,Rhomboid,3,Mon Jul 6 18:23:49 2015 UTC,this in JavaScript is very different from this in other languages. Its value depends on how a method was invoked.
learnjavascript,3cboz7,Meefims,3,Mon Jul 6 17:46:18 2015 UTC,"It depends on the context. Its one of the most confusing things about javascript, so youre fine.  Since youre a developer already, youll like these docs, theyre the best : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this  Bookmark it and use it a lot.  After understanding that, watch Douglas Crockford : javascript the good parts. Its older, but man is it good : https://www.youtube.com/watch?v=hQVTIJBZook  After that, look at this video for how the event loop works. https://www.youtube.com/watch?v=8aGhZQkoFbQ  After that, read these chapters of 'you dont know javascript' : https://github.com/getify/You-Dont-Know-JS  And at that point, youre ahead of the curve."
learnjavascript,3cboz7,Ob101010,1 point,Mon Jul 6 20:30:53 2015 UTC,"thank you for linking YDKJ. the scope and closures, and objects and prototypes chapters are incredibly helpful."
learnjavascript,3cboz7,eggn00dles,1 point,Tue Jul 7 01:49:10 2015 UTC,This may help: http://journeyintojavascript.quora.com/understanding-this-once-and-for-all
learnjavascript,3cc196,pickten,1 point,Mon Jul 6 19:08:17 2015 UTC,"At the point you're trying to execute bork.array. anything, bork.array doesn't exist.  You have to define it as an object first (and maybe name it something other than array, since it won't be an array.)"
learnjavascript,3cc196,dbpcut,1 point,Mon Jul 6 19:20:13 2015 UTC,"It's defined first in the same document.  EDIT: I should also mention that it's named ""array"" because it pretty much (with the exception of bork.array.progress) serves to approximate an array of size much larger than javascript can handle with only 50 or so terms."
learnjavascript,3cc196,dbpcut,1 point,Mon Jul 6 19:27:05 2015 UTC,"You may need to provide a more complete code example for us to help you out then, if senocular's comment doesn't assist."
learnjavascript,3cc196,dbpcut,1 point,Mon Jul 6 19:30:39 2015 UTC,"I mean, there's not really a more complete code example to be had.   The scripts which define the functions called in bork.bar are loaded, then this is loaded, then some other stuff that doesn't interact with this is loaded, then the html consists of a button with onClick=""bork.bar()"", a div with id ""ProgBar"" (as seen in the jQuery) containing the progress bar that is changed and a p with id ""val"" (as also seen in the jQuery). No other code uses bork.bar (it's also not overwritten, not to worry), and all the entirety of the present code does is load, define variables and functions, and then bring this html into existence. I really can't think of anything anywhere else that is even possibly called, let alone applicable. If needed, I can provide the other functions, but I'm not too sure how that could cause bork.bar to register as not being a function. If my understanding of js is correct, the only way that something else could cause this to cease to be a function would be if it were overwritten, and certainly isn't. (I checked: besides this and the html button, there is no other call of bork.bar)"
learnjavascript,3cc196,senocular,1 point,Mon Jul 6 19:43:28 2015 UTC,"So when you write  function bork.bar(){as before}   What is it you're trying to achieve? If you want to run the function, you need only write  bork.bar();   if you wish you redefine it, you'd have to write  bork.bar = function() { .... etc }"
learnjavascript,3cc196,senocular,1 point,Mon Jul 6 19:54:39 2015 UTC,"the function bork.bar(){as before} was to replace it to see if it would stop the mistake, not to run it or to redefine."
learnjavascript,3c9wm2,xplozive,2,Mon Jul 6 06:18:21 2015 UTC,What if I want to use sass?
learnjavascript,3c9wm2,cosmicsans,2,Mon Jul 6 13:33:26 2015 UTC,Use CSSNext
learnjavascript,3c9wm2,RankFoundry,2,Mon Jul 6 14:58:35 2015 UTC,"Sorry, it was a bad joke.  Because I don't UseLess.  I UseSass.  And I just realized that this is not /r/Frontend, like I thought it was.  Oops."
learnjavascript,3c9wm2,cosmicsans,2,Mon Jul 6 15:18:11 2015 UTC,"It's ok, I was making a joke too. Not a fan of LESS or SASS."
learnjavascript,3c9wm2,RankFoundry,1 point,Mon Jul 6 15:30:25 2015 UTC,I think it will be funny to actually use SASS in the example code for the framework :)
learnjavascript,3caxjv,Heinz69,2,Mon Jul 6 14:10:42 2015 UTC,"You said your other URI worked, have you tried specifying the port for your site? (http://www.ridepricing.com:80)  Slightly unrelated to the question, but doing things like WebAPI calls are generally done on a back-end system (like Node.JS) and pushed to your website (like with websockets, or something). As they've stated:    Please note that your server_token is still considered sensitive and it is your responsibility to protect it.   I was able to see your server token just by viewing the page's source."
learnjavascript,3caxjv,izy521,1 point,Mon Jul 6 18:09:41 2015 UTC,"http://www.ridepricing.com:80 did not work.  To your point on using back end system, I did manage to write Python code to retrieve all this information from the Uber API. What is the best way for me to now push this info onto the website? Which language or framework should I use? Any specific pointers or code you can point me to?  Thanks"
learnjavascript,3caxjv,izy521,1 point,Mon Jul 6 21:02:52 2015 UTC,"Ah, I'm not knowledgeable in Python, however I am aware that they have websockets, which is what you want to use.  Just about every modern browser supports being a websocket client with a simple  var websocket = new WebSocket()   Here's a full example on JSFiddle https://jsfiddle.net/zev5vku3/ . You just need to find a websocket server for Python, which I'm sure there are plenty.  If you need any more help, I can aid."
learnjavascript,3caxjv,izy521,1 point,Mon Jul 6 22:12:07 2015 UTC,"Ah, I made a mistake in my code.   Since I assume you're Python server won't have SSL certs, you're to use ""ws://yourIPordomain:portIfNeeded"", however I used ""wss://echo.websocket.org"" because JSFiddle was loaded through HTTPS. ws = WebSocket, wss = WebSocketSecure."
learnjavascript,3caxjv,izy521,1 point,Mon Jul 6 22:17:08 2015 UTC,"Thanks, I'll take a look. How is a websocket different from a framework (like Django or Bottle are apparently frameworks for Python) ?"
learnjavascript,3caxjv,izy521,1 point,Tue Jul 7 07:47:18 2015 UTC,"and can I not just insert python code inside of HTML code, much like you would do by having <script> ....javascript code here </script> ?"
learnjavascript,3caxjv,izy521,1 point,Tue Jul 7 07:48:13 2015 UTC,"That, I'm not sure of. I believe Python would have to be server-side to use it on the web. Like you'd require CGI knowledge.   If you don't mind me asking, what is your current server setup? Are you just using a webhost to host your site, or do you actually have a server?"
learnjavascript,3caxjv,birjolaxew,1 point,Tue Jul 7 09:46:22 2015 UTC,"I bought a domain and website on godaddy.com, and I upload files via ftp on filezilla when they are ready. In the meanwhile I test them using the program called ""brackets"".  I am actually thinking of maybe doing the back-end on PHP. Would that be easier to connect to HTML and javascript than Python would? I know as much (or as little, hah) PHP as Python, so I'm different between the two.  Thanks for being so helpful."
learnjavascript,3c8nka,jayisrad,3,Sun Jul 5 22:53:30 2015 UTC,"Express is used with Node in developing server side code, especially APIs and servers. If you're not working on the back end, you really won't ever need Express. In short, it abstracts away a lot of the boilerplate code that you'd need to implement your server or API in plain Node. Think of it like jQuery or Angular on the client side. Express also has built in routing that allows you to expose end points and react to incoming requests to the different urls in your app.   This is the short explanation of Middleware from the book Programming JavaScript Applications by Eric Eliott.    Middleware is software that takes an incoming request, processes it, and passes it on to the next piece of middleware in the chain.   An example in Express is:  app.use(function (req, res, next) {   req.foo = ""bar"";   next(); });   This example takes the incoming request from the client, adds a property foo to it, sets foo to the string ""bar"" and then calls next() to pass the request on to the next step. In essence, middleware sits in between the client and the final handling of the request in your server and processes it. You can string a bunch of middleware together to process requests in different ways. A popular middleware module for Node/Express is Connect."
learnjavascript,3c8nka,rsh412,1 point,Mon Jul 6 00:06:37 2015 UTC,"Middleware is amazing and you should basically use it liberally. So in express, your routes get request and response objects that have information about how to process the request and how to render the response.  Your request will have information like query parameters (the part after the & in a URL), a body if you need to get form POST info, accepted language or encoding information, etc. Your response is ultimately responsible for deciding what data (typically a string of HTML or JSON, etc) gets sent to the client.  Between those 2 endpoints (ie, income and outgoing messages), you might need to do some stuff. For example, hit a database, authenticate a user, validate a token, select display text from a localization tool, etc. And most of the time, those processes are repeated on every route and every request. In order to keep them flexible, reusable, ordered and so on, each type of processing can be broken out into a Middleware function. You then simply place all of the middleware needed for a request right before the final ""endware"" (ie, the final function that actually sends a response). Since the middleware has access to both the request and response objects, and the ability to continue or halt the middleware processing from one function to the next, its a piece of cake to attach information that will be used further on down the line or bail out entirely when something goes wrong.  TLDR: Every function that processes a request/response object on a web server is middleware."
learnjavascript,3c9w0n,Heinz69,3,Mon Jul 6 06:11:44 2015 UTC,"If a script is running in the context of mobywebsite.com then it can only make AJAX/XMLHttpRequest requests URLs that have the same origin as mobywebsite.com.  That means something like foo.mobywebsite.com would be okay (as a subdomain is considered the same origin), but not api.uber.com.  The request can be allowed if api.uber.com specifically adds CORS headers that say it's okay.  That means that the browser actually makes the request unconditionally, but it only makes the results available to JS if the headers were present.  (There are some types of requests, such as POSTs, where it's broken into two parts, the first to verify that the request is allowed and the second to actually perform it.)  There are a couple of ways of getting around the same-origin policy.  JSONP is the most common.  As long as the remote API provides responses in JSONP format, they can be used anywhere, regardless of CORS.  This uses the fact that scripts can be hosted anywhere, and treats the data like a script that is included on your page.  Consequently, it's insecure as all hell.  But you still see a lot of sites using it.  Another option is to proxy the data.  You could have the server make the request on behalf of the client, for instance, or you could use some public service to do it, although you're throwing security out the window there.  And in both cases you add a lot of latency."
learnjavascript,3c9w0n,Rhomboid,1 point,Mon Jul 6 07:29:14 2015 UTC,web page = mobywebsite.com  another domain / domain from which the resource originated = uber.com  Basically when you're at mobywebsite.com you can't normally make requests to domains that aren't mobywebsite.com. The browser would throw a cross-origin error.
learnjavascript,3c9w0n,realistic_hologram,1 point,Mon Jul 6 06:51:43 2015 UTC,"Thanks guys. Appreciate the response.  Aren't MOST api requests then done via CORS ? It seems to me that if a website is sending a get request to get information from some kind of public data source, then inevitably that public data will be housed in a completely different website than the website that is making the request, right?  I thought the whole point of an API request was to ask for data that your website doesn't already have...so doesn't that imply that you almost always ask for data from some sort of other website than yours?"
learnjavascript,3c9w0n,realistic_hologram,1 point,Mon Jul 6 11:34:56 2015 UTC,Not necessarily. There's lots of reasons for you to make a request to your own site. What if you want to register a new user? You're not going to send your new user credentials to some other site. You would use your own server-side api and store them from your own servers.
learnjavascript,3c9w0n,realistic_hologram,1 point,Mon Jul 6 14:25:41 2015 UTC,"Also, this whole issue of CORS only arose when I tried to get uber api data with Javascript. There didn't seem to be any such issue when I was using Python to get uber api data. Why is that?"
learnjavascript,3c9w0n,plumbe0,1 point,Mon Jul 6 11:50:15 2015 UTC,"Because cross-origin requests are really only a problem when you're in the browser. The main problem is something called cross-site request forgery. Basically the problem is that if you're logged onto, let's say, facebook and then you open my site in another tab, it would be possible for me to send authenticated api calls for your facebook account from my site. So mainly the problem is the possibility of being on multiple tabs and the browser automatically sending cookies that might include passwords or some other sensitive data. When you're making a request with python that's not an issue."
learnjavascript,3c9ld6,MowgliB,2,Mon Jul 6 04:10:51 2015 UTC,"Then why not actually use :nth-child()?   var name = ""Jimbob"",     score = ""14,000"";  for (var i = 1; i < 9; i++) {     var $tdName  = $('tr:nth-child(' + i + ') td.name'),         $tdScore = $('tr:nth-child(' + i + ') td.score');        $tdName.fadeOut().html(name).fadeIn();     $tdScore.fadeOut().html(score).fadeIn(); }   So, a couple things: (1) jQuery lets you chain function calls; (2) if you use jQuery to select DOM elements it's good to store them in variables so jQuery only has to find them once."
learnjavascript,3c9ld6,itsappleseason,1 point,Mon Jul 6 05:01:12 2015 UTC,"I thought ""eq"" was practically the same as ""nth-child""? Is this not the case?    I will keep in mind the storage of variables. I didn't know that!"
learnjavascript,3c9ld6,itsappleseason,1 point,Mon Jul 6 05:16:23 2015 UTC,In modern browsers :nth-child() will perform better due to it being a legitimate CSS selector and not a jQuery-specific extension.
learnjavascript,3c9ld6,dbpcut,2,Mon Jul 6 05:29:17 2015 UTC,This is exactly what .each() was built for.  var myTableRows = $('tr);  myTableRows.each(function(index) {   $(this).find('td.name').fadeOut() // etc..... })
learnjavascript,3c8hu3,99AFCC,2,Sun Jul 5 22:01:42 2015 UTC,I don't know much about either Typescript of Visual Code editor. I did a quick Google search... but do you care to give me a primer on each? What are they/what makes them cool/what makes them better than javascript?
learnjavascript,3c8hu3,ForScale,1 point,Mon Jul 6 13:55:53 2015 UTC,"Sure thing. I'm a beginner but I can give the basics I think.  TypeScript is what is known as a superset of JavaScript. It's like javascript but with more features. Most notable is the ability to declare types.  So a function that adds two numbers in plain javascript could look like this:  function add(a, b) { return a + b; }   But this function can accept more than just numbers. There's a lot of different things a or b could be. So even if your intention is this function should only ever accept numbers, you don't have a way of enforcing that without a lot of extra code.  With Typescript, I can explicitly state what types a and b should be. If I try to misuse this function during development, Visual Code will highlight it with a red line and if I mouseover the line, it will give me the reason for the error. If I don't see the error, then the transpiler will catch it for me when I go to convert TS into JS and display an error message.  That same function from earlier in Typescript:  function add(a:number, b:number) {return a + b; }   Here it is in pictures:  Here you can see I created add and typed a and b to be number types. I then tried to use add with a string and an array. There is a red line there saying ""hey something isn't right"".  Here is the picture from mousing over the red line    That's the basic part, being able to add types. Typing not only makes catching errors easier, it makes development easier with autocomplete.   Since the editor knows the type it can give you a list of options for methods.  Here's another picture. I typed a period after a and Visual Code has a little list popup with different methods I can use. That works for just about everything, even custom objects you make.  Here's a quick example. I made a quick object and when I go to use it later, Visual Code pops up with not only the properties I made, but also the property types.   It's very cool and makes developing easier and faster.    There's more you can do with TypeScript. I honestly don't know most of it yet. I do know that I can use some ES6 features now, maybe it supports all, I'm not sure.  As an example, I'm using template strings to inject some html. I have this in the typescript file:  `<div class=""mt-layout-block"">${header}</div></th>`   and it transpiles to   (""<div class=\""mt-layout-block\"">"" + header + ""</div></th>"")     So how do I transpile? I set up a task in visual code. The code was mostly already there.  {     ""version"": ""0.1.0"",      // The command is tsc. Assumes that tsc has been installed using npm install -g typescript     ""command"": ""tsc"",      // The command is a shell script     ""isShellCommand"": true,      // Show the output window only if unrecognized errors occur.      ""showOutput"": ""silent"",      // args is the HelloWorld program to compile.     ""args"": [""${file}""],      // use the standard tsc problem matcher to find compile problems     // in the output.     ""problemMatcher"": ""$tsc"" }   Really basic task. When I press ctrl+b it builds it to javascript. If there is an error, it displays it, otherwise it's quiet.    I'll stop here, there's way more you can do with both typescript and visual code but I'm still learning them."
learnjavascript,3c8hu3,ForScale,1 point,Mon Jul 6 16:56:26 2015 UTC,"Interesting, thanks!!"
learnjavascript,3c8yvy,Ob101010,3,Mon Jul 6 00:38:07 2015 UTC,"This is the proper way to do it. It's a property accessor mostly used for when you either have a dynamic key name (as in your case), or if the key name isn't a valid Javascript variable name."
learnjavascript,3c8yvy,birjolaxew,2,Mon Jul 6 01:10:03 2015 UTC,"And don't worry.  Its core to the language and every browser will support it.  Have no fear!  ...however, if you ever see it being used in an object literal like so:  obj = {    [k]: 'bob' }   then that would only be available in the newest version of JavaScript (i.e. ES2015 or ES6) and that's not something you can really depend on working natively in browsers right now as that's super new stuff.  If you do want to use that, and other new features, you would want to look into https://babeljs.io.  For now, all dynamic properties are best defined after the object is defined as in your example  obj[k] = 'bob'"
learnjavascript,3c7fsu,Heinz69,1 point,Sun Jul 5 16:23:44 2015 UTC,"To pass query parameters, you'd just include it like you would in any URL:  js var url = ""https://some.api/v1/products?longitude=111&lattitude=222""   Make sure you sanitise input if it's not hardcoded."
learnjavascript,3c7fsu,PM_FOR_SOMETHING,1 point,Sun Jul 5 16:38:52 2015 UTC,"that's what I thought too but then I tried this code and it didn't work:   <!DOCTYPE html> <html> <head> </head> <body>  <h3>Output:</h3> <div id=""id01""></div>  <script>     var xmlhttp = new XMLHttpRequest();        xmlhttp.open('GET', 'https://api.uber.com/v1/products?server_token=oG9hjfj7S7J65Wu5bcJw-JvOu7EoKvgoOpiULtlb&latitude=37.7759792&longitude=-122.41823', true);     xmlhttp.send();      var obj=JSON.parse(xmlhttp.responseText);     document.getElementById(""id01"").innerHTML = obj; </script>  </body> </html>   any idea what's going on here that may be wrong in my code? Thanks"
learnjavascript,3c7fsu,PM_FOR_SOMETHING,1 point,Sun Jul 5 16:46:59 2015 UTC,"?oG9hjfj7S7J65Wu5bcJw-JvOu7EoKvgoOpiULtlb&   This part doesn't make any sense (query parameters should be in key=value format). I've never used the Uber API but it seems like some kind of authentication code, have you read https://developer.uber.com/v1/auth/?"
learnjavascript,3c7fsu,birjolaxew,1 point,Sun Jul 5 16:51:30 2015 UTC,yeah you're right i fixed that but still doesnt seem to work
learnjavascript,3c7fsu,birjolaxew,2,Sun Jul 5 16:57:31 2015 UTC,"From the Uber API documentation linked by /u/PM_FOR_SOMETHING:   In order to access protected resources you can pass your API Token, called a server_token. This must be passed as an Authorization header with type Token.   (emphasis mine).  It helps to read the documentation for whatever you're trying to work with - in this case, you shouldn't pass the authorization token as a query parameter, but as an authorization header:  var token = ""XXXXX"", // insert your auth token here     xmlhttp = new XMLHttpRequest(); xmlhttp.open(""GET"", ""https://api.uber.com/v1/products?latitude=37.7759792&longitude=-122.41823"", true); xmlhttp.setRequestHeader(""Authorization"", ""Token ""+token); xmlhttp.send();   Heck, they even have this exact example in their API documentation."
learnjavascript,3c7fsu,birjolaxew,1 point,Sun Jul 5 17:31:24 2015 UTC,"Ok thanks. I did read this passage but I didn't understand what it meant. I now changed my code to the following but it still doesn't work. Any thoughts?  <!DOCTYPE html> <html> <head>  </head> <body>  <h3>Output:</h3> <div id=""id01""></div>  <script>      var xmlhttp = new XMLHttpRequest();       var url='https://api.uber.com/v1/products?latitude=37.7759792&longitude=-122.41823';     var server_token='oG9hjfj7S7J65Wu5bcJw-JvOu7EoKvgoOpiULtlb';      xmlhttp.onreadystatechange = function () {         if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {             var myarr = JSON.parse(xmlhttp.responseText);             document.getElementById(""id01"").innerHTML = myarr;         }     }      xmlhttp.open('GET', url, true);     xmlhttp.setRequestHeader(""Authorization"", ""Token ""+server_token);     xmlhttp.send();  </script>  </body> </html>"
learnjavascript,3c7fsu,xbrandnew99,1 point,Sun Jul 5 17:48:31 2015 UTC,"Learn to troubleshoot. Have you checked your console? Odds are you have an error there, which will tell you that the remote server doesn't respond with an Access-Control-Allow-Origin header - in other words, it doesn't support CORS:   You will need to set an Origin URI when creating your application to allow for CORS to whitelisted for your domain   If that isn't the problem, then you want to have a look at the HTTP status code returned (xmlhttp.status). It'll explain to you what is going wrong.  You also have a problem in that you're saying <Element>.innerHTML = <Object> - that won't work. The HTML has to be a string."
learnjavascript,3c84ib,LeanRammus,1 point,Sun Jul 5 20:08:27 2015 UTC,I think the best way to do this would be through some type of regex data binding .
learnjavascript,3c84ib,cport1,1 point,Sun Jul 5 20:49:28 2015 UTC,"(If I understand you correctly) You have to recursively traverse the DOM and search for a string. Just wrote this quick example for you. Hope it helps!  function iterate(search, node, depth, onFound) {     for ( var i = 0; i < node.childNodes.length; i++ ) {         var child = node.childNodes[i];          if ( child.childNodes.length ) {             iterate(search, child, depth + 1, onFound);         } else {             var text = (child.textContent || '').trim();             if ( text && text.match(search) ) {                 onFound(child.parentNode, text);                 break;             }         }     } }  var search = /some text to find/i; iterate(search, document.body, 0, function(found, text) {     console.log(found, text); });   Edit Fixed spelling.  Edit Also this assumes the texts are contained in their own elements, like a span or something.  If you are using jQuery and have a certain layout and set of elements you want to search it could be done much simpler like:  $("".my_searchable_boxes"").each(function(idx, el) {   if ( $(el).text().match(/something/i) ) {       // Do something   } });"
learnjavascript,3c84ib,andersevenrud,1 point,Sun Jul 5 22:06:19 2015 UTC,Are you opposed to using a JS framework? This would be the easiest thing ever in Angular.
learnjavascript,3c84ib,dawiyo,1 point,Sun Jul 5 22:17:11 2015 UTC,"I wanted to use just pure JS, I don't know the language itself well enough so I would rather not use a framework"
learnjavascript,3c84ib,birjolaxew,1 point,Mon Jul 6 08:25:51 2015 UTC,"I'd personally do it like this:  var elementsToFilter = document.getElementsByClassName(""category-item"");  searchInput.addEventListener(""input"", function(){     var searchStr = this.value.toLowerCase().trim();     for (var i = 0, j = elementsToFilter.length; i < j; ++i) {         var elm = elementsToFilter[i],             elmStr = elm.textContent.toLowerCase().trim();          if (elmStr.indexOf(searchStr) === -1) {             // hide element         } else {             // show element         }     } });   Demo here. Keep in mind that this is very primitive - you might want to look into more intelligent matching algorithms."
learnjavascript,3c7ygd,eventmelody,1 point,Sun Jul 5 19:14:50 2015 UTC,Try changing mouseenter to mouseover
learnjavascript,3c7ygd,cport1,1 point,Sun Jul 5 20:58:08 2015 UTC,"No dice.  It works if I include the JS in the spec file, but that's the same problem as with ""mouseenter""."
learnjavascript,3c7ygd,errantwriter,1 point,Sun Jul 5 21:07:35 2015 UTC,"It looks like you are using Jasmine Jquery. If you look at the docs the example they give is expect($('<div class=""some-class""></div>')).toHaveClass(""some-class"")  I'm not sure why but it seems to only work if you give the exact HTML element for example I would  do something like    var beforeHover = $(""pE1"")[0].outerHTML;  \\This returns the string ""<p id=""pE1"">pE1 text</p>""  expect($(beforeHover)).not.toHaveClass(""red"")  $('#pEl').trigger('mouseenter'); var afterHover = $(""pE1"")[0].outerHTML;  expect($(afterHover)).toHaveClass(""red"");   This is cumbersome but that's the only I've found that it works with that plugin.   If you found another please share"
learnjavascript,3c7ygd,errantwriter,1 point,Sun Jul 5 22:25:29 2015 UTC,"Yep, I'm using Jasmine Jquery.  I get the error: ""Expected ({ 0: HTMLNode, length: 1 }) to have class 'red'.""  Just got the same error when placing ""var fixture = setFixtures(""<p id='pEl'>pEl text</p>"" directly before the mouseenter trigger.  I can still get it to pass if I place the hover JS directly in the spec test."
learnjavascript,3c7ygd,errantwriter,1 point,Sun Jul 5 23:09:22 2015 UTC,I got the same error with my test before I did the workaround I showed typed up.
learnjavascript,3c7ygd,errantwriter,1 point,Sun Jul 5 23:17:20 2015 UTC,"I experimented with:  $(""#pEl"").outerHTML   and  $(""pEl"")[0].outerHTML;   The second one throws this error:  TypeError: Cannot read property 'outerHTML' of undefined"
learnjavascript,3c6u8u,JohnMcharra,3,Sun Jul 5 11:58:41 2015 UTC,"for...in   Loops over the property names, you access them with square brackets.  for (var i in someObject) {     console.log(someObject[i]) }"
learnjavascript,3c6u8u,guohuade,2,Sun Jul 5 12:39:48 2015 UTC,to access numbers you can use dic.query.pages[208561].pageid  for(var i in dic.query.pages){     console.log(dic.query.pages[i]); }
learnjavascript,3c6u8u,einarkristjan,1 point,Sun Jul 5 12:42:04 2015 UTC,"Holy Mother Of Zeus, thank you bro, you saved me some white hairs!"
learnjavascript,3c6u8u,birjolaxew,2,Sun Jul 5 12:50:11 2015 UTC,"Should be mentioned that for ... in loops are usually used in conjunction with <Object>.hasOwnProperty - this method checks if the property is defined on the object, not through the prototype chain. Here's an example:  // Nifty function we want available on all objects Object.prototype.deepSearch = function() { ... };  // The object we want to loop through var obj = {x: 1, y: 2};  // for ... in loop for (var k in obj) {     console.log(""Key: "",k,"", value: "",obj[k]);      // » Key: x , value: 1     // » Key: y , value: 2     // » Key: deepSearch , value: function Object.deepSearch() }  // With hasOwnProperty for (var k in obj) {     if (!obj.hasOwnProperty(k)) continue;      console.log(""Key: "",k,"", value: "",obj[k]);      // » Key: x , value: 1     // » Key: y , value: 2 }"
learnjavascript,3c66b1,NewHighScore,2,Sun Jul 5 05:10:06 2015 UTC,Your = is in the wrong place:  var = game new c99.Game();   should be  var game = new c99.Game();   Also don't forget to include the createjs library in the dropdown on the left.
learnjavascript,3c66b1,senocular,1 point,Sun Jul 5 05:28:57 2015 UTC,Wow! I overlooked that so many times. Thanks!!
learnjavascript,3c50fd,Krainz,1 point,Sat Jul 4 21:11:21 2015 UTC,"I haven't found any documentation for it, but some people say that an ""backbutton"" event is fired when clicking the back button - Apache Cordova also supports it."
learnjavascript,3c50fd,birjolaxew,1 point,Sat Jul 4 22:28:50 2015 UTC,so   $(window).backbutton(function(ev){             if (ev.which === 8) {                 goBack();                 ev.preventDefault();             }         });       like this?
learnjavascript,3c50fd,birjolaxew,1 point,Sat Jul 4 22:33:34 2015 UTC,"Well, no. ""backbutton"" is an event, one that jQuery doesn't have a shortcut for.  You really need to try to understand what your code is doing, rather than just copy-pasting different solutions together. event.which is jQuery's version of the vanilla event.keyCode - that is, it gives you a value that shows which button is clicked, for keyboard/mouse presses. 8 indicates backspace. The ""backbutton"" event is completely seperate from any keyboard/mouse events, and doesn't have a keycode for that reason.  Your code would look something like  function goBack() {     ... };  $(document).on(""keydown"", function(ev){     if (ev.which === 8) {         ev.preventDefault();         goBack();     } }).on(""backbutton"", function(ev){     // not sure if it overwrites default behaviour - if not, throw in an `ev.preventDefault()`     goBack(); });"
learnjavascript,3c50fd,birjolaxew,1 point,Sat Jul 4 23:05:11 2015 UTC,Thanks!
learnjavascript,3c50fd,birjolaxew,1 point,Sat Jul 4 23:32:02 2015 UTC,"Damn, still not working :$  Care to take a look? view-source:http://douglaslins.github.io/"
learnjavascript,3c50fd,birjolaxew,1 point,Sat Jul 4 23:41:44 2015 UTC,"As mentioned, can't find any documentation - it's possible the event simply doesn't exist, or isn't supported by all phones/browsers.  That being said, your code still shows that you haven't understood what's going on, and are simply trying to copy-paste things, hoping that they'll magically work - don't do that. Read through your entire code again. If there's any part of it you don't understand, learn what it means.  function onDeviceReady() {     document.addEventListener(""backbutton"", onBackKeyDown, false); }   What's onBackKeyDown? You haven't declared a function by that name at any point. When is onDeviceReady called? I assume you took this code from Apache Cordova, which is intended for creating native mobile applications with HTML/CSS/JS, not for the web.  The most likely issue is that ""backbutton"" isn't supported in your browser (or rather, that it doesn't exist outside of Apache Cordova), which of course isn't your fault. You'll have to rely on some more vanilla JS, such as detecting navigation - I can't help you more than Google can, since I don't own an Android."
learnjavascript,3c50fd,arctic_feather,1 point,Sun Jul 5 00:35:51 2015 UTC,I just want the android back button to do the same thing the backspace key press is doing on PC...
learnjavascript,3c50fd,arctic_feather,1 point,Sun Jul 5 01:23:38 2015 UTC,"Well, if you find a properly supported event for that, I know plenty of people on StackOverflow who would be interested."
learnjavascript,3c4qkf,reckscene,2,Sat Jul 4 19:40:52 2015 UTC,"Hey man, a bit busy at the moment but I will help a bit later. Two things though: perhaps try a more descriptive title and also perhaps check out /r/angularjs"
learnjavascript,3c4qkf,lilred181,1 point,Sat Jul 4 20:13:10 2015 UTC,myWeather on the html element should be typed out with a hyphen. It should be my-weather. That will solve at least one problem.
learnjavascript,3c28n1,eggn00dles,10,Sat Jul 4 02:14:12 2015 UTC,"JavaScript is the language - the core syntax used making up the code.  It consists of keywords, symbols, and a standard library of objects such as Date and Math that exist with every version of JavaScript wherever you are able to use it.  Depending on where you use it, other objects may be added as an additional API.  The DOM is one of those APIs (e.g. the document object).  The DOM API is added by the browser as a way to access elements within the HTML page (and other stuff).  If the browser supports running other languages, it would want to make the DOM API available to them as well (if those languages are to be useful at all).  On the other side of the spectrum, for JavaScript used outside of the browser, like in Node which can be run through the command line/terminal, then the DOM API isn't available because it was never added - it wasn't needed or doesn't apply since there is no HTML.  Because JavaScript is so tightly associated with the browser it can be hard to separate what's part of JavaScript itself and whats added in after the fact (like the DOM). You don't really have to know, but that's the distinction being made there."
learnjavascript,3c28n1,senocular,1 point,Sat Jul 4 02:45:18 2015 UTC,It's actually fairly easy to tell what is native JavaScript and what is provided by the host environment.    The EMCAScript standard defines what is the language.  Everything else is the environment.
learnjavascript,3c28n1,r3jjs,3,Sat Jul 4 14:29:20 2015 UTC,"If you look at the international standard that defines JavaScript (which is really EcmaScript, but that's another discussion), you won't see any mention of document.getElementById() anywhere.  It's not part of the core language or standard library, but it's an API (i.e. a library) made available to code written in JS that is running in the context of the browser.  JS running in other contexts, such as Node.js, won't even have a document object, let alone a getElementById() method.  (Although you can find Node.js modules that emulate a browser for the purposes of testing client-side code.)  The text that you're quoting is saying that these DOM APIs could also be implemented in other languages, but that's hardly relevant to someone learning JS."
learnjavascript,3c28n1,Rhomboid,1 point,Sat Jul 4 07:10:00 2015 UTC,"One easy way to understand the difference is that document and window aren't available in non-browser environments, like Node.js."
learnjavascript,3bzofs,jaysprout,4,Fri Jul 3 13:23:28 2015 UTC,I always use the following rule: parameters of a function (declaration) and arguments to a function (call).
learnjavascript,3bzofs,Djatha,2,Fri Jul 3 19:21:38 2015 UTC,"I don't agree. I do agree with /u/xiipaoc. This is what Wikipedia says about it:   A mathematical function has one or more arguments in the form of independent variables designated in the function's definition, which can also contain parameters. The independent variables are mentioned in the list of arguments that the function takes, whereas the parameters are not. For example, in the logarithmic function f(x) = \log_b (x), the base b is considered a parameter.   I always use the term 'argument', seems less ambiguous than 'parameter'. Also, you can say 'actual argument' or 'formal argument' if you want to be really specific."
learnjavascript,3bzofs,tufflax,4,Sat Jul 4 21:48:35 2015 UTC,"There's no real difference.  You can use ""parameter"" and ""argument"" interchangeably.  (I'm not sure about their capitalized versions, which you learned about.  What's the difference between a regular parameter and a Parameter?  An everyday argument and an Argument?)  Semantically, a parameter is a piece of data that restricts or specifies behavior in some way, and an argument is, more mechanically, the stuff that gets passed into a function.  You could technically say that some value set outside the function is a parameter.  If you have var a; function foo (b) {...}, a and b may (or may not) both be parameters, but b is the only argument.  But, again, these distinctions are relatively meaningless, and there's no real reason to disambiguate.  Parameter, argument, same thing."
learnjavascript,3bzofs,xiipaoc,1 point,Fri Jul 3 15:52:30 2015 UTC,I only remember the difference because of the arguments object inside functions. Super handy tool to know about
learnjavascript,3bzofs,Stockholm_Syndrome,1 point,Fri Jul 3 19:22:23 2015 UTC,Parameters are the variables assigned to passed values inside the function/routine.    Arguments are the values passed in the function/routine call which are then assigned to the parameters.
learnjavascript,3c0v0s,Aardvarkjon,3,Fri Jul 3 19:07:55 2015 UTC,"Figured it out!  function palindrome(str) {   // Good luck!   var newStr = str.replace(/[A-Z0-9]/ig, """").toLowerCase();   var rev = newStr.split("""").reverse().join("""");  if (rev == newStr) {     return true;   } else{     return false;   } }  this is the code if anyone is interested."
learnjavascript,3c0v0s,blitterobject,3,Fri Jul 3 19:41:54 2015 UTC,"You could return (rev == newStr) since it will be true or false:  function palindrome(str) {   var newStr = str.replace(/[^A-Z0-9]/ig, """").toLowerCase(),       rev = newStr.split("""").reverse().join("""");   return (rev === newStr); }"
learnjavascript,3c0v0s,utuxia,1 point,Fri Jul 3 21:51:48 2015 UTC,return rev === str;
learnjavascript,3c1vdi,eggborne,3,Sat Jul 4 00:06:11 2015 UTC,"I think query parameters might be what you're looking for. Although, where you say ""custom password url"", keep in mind that, outside of learning exercises, it's best to keep sensitive information out of query strings, and probably out of urls entirely."
learnjavascript,3c11y0,SickFinga,2,Fri Jul 3 20:02:03 2015 UTC,"jsfiddle automatically starts scripts onload.  wrap your js in in a ready() function and it should work. ex:  $(document).ready(function(e) {    var tableOffset = $(""#table-1"").offset().top; var $header = $(""#table-1 > thead"").clone(); var $fixedHeader = $(""#header-fixed"").append($header);  $(window).bind(""scroll"", function () {     var offset = $(this).scrollTop();      if (offset >= tableOffset && $fixedHeader.is("":hidden"")) {         $fixedHeader.show();     } else if (offset < tableOffset) {         $fixedHeader.hide();     } });   });"
learnjavascript,3c11y0,chmod777,1 point,Fri Jul 3 20:47:03 2015 UTC,"Thank you, it makes sense now."
learnjavascript,3c1taa,DinoDogan,0,Fri Jul 3 23:46:34 2015 UTC,"I just learned that grouping a bunch of variables together results in speedier execution.    How did you 'learn' this?  Let me guess, somebody sent you a link to a JSPerf that ""proves"" it's faster?  Well guess what, it's completely irrelevant, despite what some poorly written microbenchmark might say.  You can make almost anything seem true by writing a misleading benchmark.  Writing a proper benchmark is something that actually takes a lot of skill, because if you're not careful you end up measuring things that are completely irrelevant, like the time it takes to do nothing."
learnjavascript,3c1taa,Rhomboid,1 point,Sat Jul 4 09:24:57 2015 UTC,"hmmm...interesting. I'm glad you said that, because it did sound too good to be true.   As for where, it wasn't JSPerf, but thanks for the tip, I'll check it out.   I saw it in either Lynda or Tuts video...or PluralSight...I forget exactly which video."
learnjavascript,3c0ytf,TheTurkey5689,3,Fri Jul 3 19:37:00 2015 UTC,"When I was starting out, I used Treehouse. I had a lot of confusion/frustration understanding what they were talking about, it felt like they skipped over a lot in the intro JS course. (The one with Jim Hoskins)  I eventually switched over to codecademy and did their JS course and now I can follow along on Treehouse tutorials with ease."
learnjavascript,3c0ytf,_kidnotorious_,1 point,Fri Jul 3 19:45:31 2015 UTC,"I think they must have updated the 'Intro to JS' course now, as i've just completed it and it was with a guy called Dave. Also, I found to be a really good primer, I found myself being left high and dry quite often Codecademy."
learnjavascript,3c0ytf,Benmjt,1 point,Sat Jul 4 13:13:26 2015 UTC,"That could make all the difference. Jim Hoskins, while a very smart Full Stack dev, might assume too much of his 'intro' students. I'm curious if Dave took it down a few notches to make it a little less robotic.  And in all honestly, I've found that people have to learn in their own way. Personally I like to read to learn, while some others prefer videos tutorials."
learnjavascript,3c0ytf,_kidnotorious_,1 point,Mon Jul 6 15:47:10 2015 UTC,"https://github.com/airbnb/javascript <-- this is a pretty good collection of javascript best practices. although some items i find questionable. for example in the object creation section, its my understanding that there are certain instances where you would use a constructor for object creation as opposed to a literal. im still learning myself so maybe someone else can elaborate on this."
learnjavascript,3c0ytf,eggn00dles,1 point,Sat Jul 4 02:29:03 2015 UTC,Its alright until they try to throw you from js and more into jquery. Switch to the js track is my advice.
learnjavascript,3bxviq,get2workUslacker,13,Fri Jul 3 01:36:46 2015 UTC,This is the IIFE pattern. The function created a closure to keep your variables from becoming globals and the parens are a neat trick that causes the function to execute itself immediately after it is parsed.
learnjavascript,3bxviq,im_nullable,3,Fri Jul 3 01:46:57 2015 UTC,Also in this case it means the 'use strict'; won't affect any other code if you concatenate this file with others.
learnjavascript,3bxviq,Cosmologicon,1 point,Fri Jul 3 02:54:17 2015 UTC,"ah, cool; i see how that fits together now"
learnjavascript,3bxviq,dodeca_negative,1 point,Fri Jul 3 03:40:18 2015 UTC,"Thank you, this clears that up.  It was hard to search for this answer on google as it just saw the ""function"" keyword and not the syntax."
learnjavascript,3bxviq,tufflax,5,Fri Jul 3 03:38:43 2015 UTC,"Since it wasn't stated, ""IFFE"" stands for ""immediately-invoked function expression""."
learnjavascript,3bxviq,dirtybutler,1 point,Fri Jul 3 06:48:41 2015 UTC,"I understand the bold parens here: (function(){}())   But why is the whole expression wrapped in extra parens?  Also, the code in Mastering the Module Pattern that /u/noonesboy mentioned is slightly different: (function(){})()  But here too, the parens around the function seems unnecessary. Or?"
learnjavascript,3bxviq,noonesboy,2,Fri Jul 3 11:58:57 2015 UTC,Check out this blog post. It's the best explanation I've found on IIFEs: http://benalman.com/news/2010/11/immediately-invoked-function-expression/
learnjavascript,3bxviq,dotzak,2,Fri Jul 3 13:26:22 2015 UTC,Great link. Needed that. I wasn't familiar with the differences in the closing parenthesis placement. I had always just written it one way because that's how I learned.
learnjavascript,3bxviq,Jeremy_is_posting,3,Sun Jul 5 06:27:10 2015 UTC,Why does it occasionally end with (jQuery)?  (function($){   $.fn.function_name = function(x){}; })(jQuery);   Is that just a protected method for $ to work within the closure? Or is there some other value?
learnjavascript,3bxviq,Rhomboid,5,Fri Jul 3 05:01:19 2015 UTC,"You're passing in jquery as a parameter, usually to write a plugin"
learnjavascript,3bxviq,r3jjs,3,Fri Jul 3 05:13:00 2015 UTC,"That's done so that you can use $ inside the IIFE even if outside of the IIFE $ is owned by some other library and jQuery must accessed via jQuery.  You can't assume that jQuery will always own $, as several libraries make claim to that identifier and jQuery allows you to relinquish control of it back to whoever had it before jQuery was loaded."
learnjavascript,3bxviq,noonesboy,1 point,Fri Jul 3 06:32:16 2015 UTC,"It also creates a variable called $ slightly higher on the chain, so it accesses a touch faster than working all the way back to the global object's $."
learnjavascript,3bxviq,elemenofi,2,Fri Jul 3 09:51:39 2015 UTC,"I've used the module pattern a ton to clean up code that ended up looking too disjointed and unorganized. Is easy to read, highly maintainable, and creates closures.  Mastering the Module Pattern"
learnjavascript,3bz3su,Sundodger04,2,Fri Jul 3 09:10:03 2015 UTC,"This might be an interesting read: http://stackoverflow.com/questions/15851751/what-is-the-max-number-of-files-to-select-in-an-html5-multiple-file-input   The number of files depends on the number of characters all file names are combined.  In the Windows API, the maximum path length limitation is 256 chars, the Unicode version API is 32,767 chars."
learnjavascript,3bz3su,andersevenrud,2,Fri Jul 3 14:15:59 2015 UTC,"Thanks for the link, this seems to be my problem.  It looks like this code would only work on Firefox and not Chrome :("
learnjavascript,3bz3su,andersevenrud,1 point,Fri Jul 3 19:25:27 2015 UTC,Maybe you can do it in chunks ? Like have 5 [multiple] file inputs and have a notice that you can only select ~1000 in each ?
learnjavascript,3bz3su,coderjewel,1 point,Fri Jul 3 19:35:56 2015 UTC,"I'm not sure if there is a limit on the number of files, but if the files get up to 4GB in size, and you are on a 32-bit OS, that could be the problem."
learnjavascript,3by7hc,whoisearth,2,Fri Jul 3 03:26:07 2015 UTC,"are you including all js and css? getting any errors in your console (f12 on IE and Chrome, cntl+shift+k in firefox)? can you get their example file working without any customization?"
learnjavascript,3by7hc,chmod777,1 point,Fri Jul 3 15:23:47 2015 UTC,ah cool I'll check the console tonite and see if I can clean anything from it.
learnjavascript,3bvvmv,DumplingKing1,4,Thu Jul 2 16:03:42 2015 UTC,"Hey! I was actually doing something at work that involved fading colors in [pure] javascript. So I cut out some of the parts and created a fiddle for you... hope it helps :)  http://jsfiddle.net/c6eq004m/  Edit In case you're wondering how it's done... It's through the magic of https://en.wikipedia.org/wiki/Linear_interpolation . You have two numbers and ""fade"" between them using a scale (0.0 - 1.0)"
learnjavascript,3bvvmv,andersevenrud,1 point,Thu Jul 2 17:40:11 2015 UTC,"just curious, why would you want a solution using JS when you can do this with CSS?"
learnjavascript,3bvvmv,rog3r,5,Thu Jul 2 16:09:44 2015 UTC,because I'm new and learning JS/JQuery and that's what the project calls for!! I already know how to do it w/ CSS and looking to learn more JS :-)
learnjavascript,3bvvmv,ForScale,1 point,Thu Jul 2 16:17:35 2015 UTC,http://codepen.io/ForScale/pen/zGRaqo
learnjavascript,3bvvmv,dbpcut,1 point,Thu Jul 2 19:38:47 2015 UTC,"While this is over complicating things (the tool for this is definitely CSS,) your best bet is to set an event on mouseleave that fires a loop that iterates over the elements color.  The easiest way to go about this is to make sure it's in RGB or HSL format and parse it that way, hex can be a pain to work with. There are a few useful snippits out there that can help you with the calculations if doing it yourself becomes cumbersome.  To go about it correctly, you should really just be toggling the appropriate css classes."
learnjavascript,3bvvmv,Pantstown,2,Thu Jul 2 16:58:16 2015 UTC,"He could do it using jQuery Color plugin.   $(this).animate({backgroundColor: 'gray'}, 2000);   OP, would it be cheating to toggle a css class? Like other people said, you could accomplish this in css in no time."
learnjavascript,3bvvmv,dbpcut,1 point,Thu Jul 2 17:06:03 2015 UTC,I might be able to toggle. How would I go about that?
learnjavascript,3bvvmv,chmod777,2,Thu Jul 2 17:33:29 2015 UTC,"Your best bet is to have a class added on hover (using .addClass()) that has the new pink color associated with it.  The element could have a transition property associated with it that'd take care of the animation for you. Sorry I'm on mobile or I'd give some code snippits, but if you Google the individual bits they're all very well documented."
learnjavascript,3bvvmv,Pantstown,1 point,Thu Jul 2 17:38:37 2015 UTC,"$("".item"").toggleClass(""active""); <div class=""item""></div>"
learnjavascript,3bvvmv,theywouldnotstand,1 point,Thu Jul 2 18:01:38 2015 UTC,"You could do this.  Someone better than me can correct me if I'm wrong, but you'll notice that I used     !important  in the css color. Javascript injects css inline, which is more 'important' than external css. In order to override the css written by javascript, you need to add an important tag, which is the highest importance."
learnjavascript,3bvvmv,ForScale,1 point,Thu Jul 2 18:32:11 2015 UTC,"If you want to make background-color have a slow, fading transition using jQuery, you'll need to use a plugin like jQuery.Color, or you'll need to use jQuery UI. Source.  That being said, in order to have it do something on mouseout, you'll need to add another callback function as a second argument to .hover(). Read the jQuery docs page for more info."
learnjavascript,3bvvmv,gacis,1 point,Thu Jul 2 17:02:49 2015 UTC,Likea dis: http://codepen.io/ForScale/pen/zGRaqo
learnjavascript,3bwtc4,SovietChaoz,1 point,Thu Jul 2 20:17:02 2015 UTC,"Your code works fine when I run it. I get all 9 items. However, the last 5 entries are the same. Maybe your problem has something to do with your server?"
learnjavascript,3bwtc4,einarkristjan,1 point,Thu Jul 2 20:44:12 2015 UTC,"Yeah the last ones are the same. I just wanted to make the document longer.   I do not know why. I just have the file local on the same server. Hmmm I'll have to take a look at it later. Thanks,'it's good to hear it's working for you hahaha"
learnjavascript,3bwtc4,Ob101010,1 point,Thu Jul 2 22:02:05 2015 UTC,"Rename the file, reload the page. Does an error come up?"
learnjavascript,3bwtc4,Ob101010,1 point,Thu Jul 2 23:52:25 2015 UTC,"When I renamed the file, it did work. However, when I changed that file's contents, it did not show up when I refreshed the page. Any insights?"
learnjavascript,3buzrq,stardust-kid,3,Thu Jul 2 11:04:11 2015 UTC,"As simple as I can make it:  /* es5.1+ only */  var A = function A(param) {     this.thing = param; }; A.prototype.fun = function () {     console.log(this.thing); };  var B = function B(param1, param2) {     A.apply(this, arguments); }; B.prototype = Object.create(A.prototype); B.prototype.constructor = B; B.prototype.noFun = function noFun() {     console.log('nofun'); };  var b = new B(""x"", ""y""); b.fun(); b.noFun(); console.log(b.thing);     /* es6 only */      class C {         constructor(param) {             this.thing = param;         }         fun() {             console.log(this.thing);         }     };     class D extends C {         constructor(param1, param2) {             super(param1);             this.other = param2;         }     }      let d = new D('x');     d.fun();"
learnjavascript,3buzrq,ggolemg2,2,Thu Jul 2 12:50:55 2015 UTC,"function A(params) {     if(typeof params !== ""undefined) {         this.init(params);     } } A.prototype.init = function init(params) { };  function B(params) {     this.init(params); } B.prototype = new A(); B.prototype.myMethod = function myMethod() { }   It keeps the prototype chain, you can create an instance of either A or B...  I don't always use it, but I like it.  edit: In ES6 I obviously use the new, much clearer syntax."
learnjavascript,3bu7vm,Ob101010,8,Thu Jul 2 04:48:45 2015 UTC,"a polyfill for requestAnimationFrame. Pull up some doc on raf loops, you'll get some nice performing apps :)"
learnjavascript,3bu7vm,kogsworth,2,Thu Jul 2 04:59:39 2015 UTC,"royal air force loops? Heh kidding, your answer got me to the answers, thank you."
learnjavascript,3bu7vm,dbpcut,1 point,Thu Jul 2 20:10:11 2015 UTC,This is the correct answer.
learnjavascript,3bu7vm,00mba,0,Thu Jul 2 06:11:42 2015 UTC,Does anyone care to ELI5 'Polyfill' for us noobs?
learnjavascript,3bu7vm,kogsworth,1 point,Thu Jul 2 23:16:53 2015 UTC,"A polyfill is a script that will emulate a browser feature that is not present in the version of the browser you're using. They're generally the poor man's answer to the optimized version that native browser code can provide. It ""fills in the cracks"" so to speak."
learnjavascript,3bu7vm,utuxia,2,Fri Jul 3 00:12:09 2015 UTC,"It's minified, but can easily be reverse engineered if you really wanted to know what something does on the client side:  ""undefined"" == typeof requestAnimationFrame && (requestAnimationFrame = ""undefined"" != typeof window && (window.msRequestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.oRequestAnimationFrame) || function(e) {         return setTimeout(e, 17)     }),     function(e, n) {         ""object"" == typeof exports && ""undefined"" != typeof module ? n(exports) : ""function"" == typeof define && define.amd ? define([""exports""], n) : n(e.timer = {})     }(this, function(e) {         ""use strict"";          function n() {             r = m = 0, c = 1 / 0, t(u())         }          function t(e) {             if (!r) {                 var t = e - Date.now();                 t > 24 ? c > e && (m && clearTimeout(m), m = setTimeout(n, t), c = e) : (m && (m = clearTimeout(m), c = 1 / 0), r = requestAnimationFrame(n))             }         }          function i(e, n, i) {             i = null == i ? Date.now() : +i, null != n && (i += +n);             var o = {                 callback: e,                 time: i,                 flush: !1,                 next: null             };             a ? a.next = o : f = o, a = o, t(i)         }          function o(e, n, t) {             t = null == t ? Date.now() : +t, null != n && (t += +n), l.callback = e, l.time = t         }          function u(e) {             e = null == e ? Date.now() : +e;             var n = l;             for (l = f; l;) e >= l.time && (l.flush = l.callback(e - l.time, e)), l = l.next;             l = n, e = 1 / 0;             for (var t, i = f; i;) i.flush ? i = t ? t.next = i.next : f = i.next : (i.time < e && (e = i.time), i = (t = i).next);             return a = t, e         }         var a, m, r, f, l, c = 1 / 0;         e.timer = i, e.timerReplace = o, e.timerFlush = u     });"
learnjavascript,3bu7vm,Nebu,1 point,Thu Jul 2 08:26:57 2015 UTC,I'm guessing the piece of the puzzle you're missing is that a&&b is equivalent to if (!a) { b }.
learnjavascript,3bug38,Brain_itch,3,Thu Jul 2 06:23:50 2015 UTC,"String is the string constructor function and String(cows) is one way of converting something to a string.  When printFarmInventory() is called, the cows parameter is the number 7, but this code needs it as a string so that it can check its length in characters.  Strings have a length property, but numbers do not.  (It also needs to be in the form of a string so that the leading zero string can be prepended to pad the width, although attempting to use the plus operator with a string and something else always causes that something else to be converted to a string first, so if that was the only reason there would be no need to do the conversion explicitly.)  There's a little bit of subtlety here in that using it with the new keyword (i.e. new String(...)) returns a String object (capital S), whereas calling it as a plain function (i.e. String(...)) returns a string primitive (little S).  Primitives don't have methods, so later when the code tries to access cowString.length that primitive gets automatically boxed into a temporary object.  As I alluded to earlier, that is but one way of converting something to a string.  Other ways include:  var cowString = cow.toString();   or  var cowString = cow + '';   These both also result in primitives rather than objects."
learnjavascript,3bug38,Rhomboid,3,Thu Jul 2 06:52:15 2015 UTC,Have you seen the annotated version? It will be really helpful as you go along.  https://watchandcode.com/courses/eloquent-javascript-the-annotated-version
learnjavascript,3bug38,gordonmzhu,2,Thu Jul 2 08:00:52 2015 UTC,THANK YOU!
learnjavascript,3bug38,gordonmzhu,1 point,Fri Jul 3 18:15:53 2015 UTC,You're welcome! Let me know what you think as you read along.
learnjavascript,3bug38,gordonmzhu,1 point,Fri Jul 3 18:33:09 2015 UTC,"Did you create it?  It's fantastic! I just finished chapter 3 but so far so good. Although I have to keep my version on Kindle open since I need highlight important parts.  A lot of developers have told me to start on a project I'm passionate about to internalize what I've been learning so far. I have one in mind, it's a rather simple web app, but with so many frameworks and such I'm not sure exactly where to start. Any thoughts?"
learnjavascript,3bug38,gordonmzhu,2,Fri Jul 3 19:41:22 2015 UTC,"Yes I did. Glad you're finding it helpful.  ""Starting a project"" is one of those tips that sounds good in theory, but is almost impossible when you're truly a beginner. There is just too much that you have to know to even get a project running.  To make it more manageable, you should go through a tutorial that teaches you how to build something. And then after that, take the code that you made in that tutorial and transform it into something new.  This is pretty much exactly the problem I tried to solve with my main project (http://www.angularcourse.com). It walks you step by step through a full application so that you can actually learn the steps you need to know. After you do something like this, you'll know enough to start building things on your own."
learnjavascript,3bug38,arctic_feather,1 point,Sat Jul 4 23:26:47 2015 UTC,Awesome I'll check it out! Good luck with everything :)
learnjavascript,3buh28,roydl7,6,Thu Jul 2 06:35:51 2015 UTC,"Assignment acts as an expression which yields the variable being assigned to.  So the first chunk is just a shorter way of writing:  d = Date.now; s = 0; t = d();   The first line is creating a shorter name for Date.now because it will be used again later.  Technically, the third line is really equivalent to t = d(s); but Date.now() doesn't take an argument, or rather it ignores the argument provided.  This is a trick to save a single character.  By moving the assignment into the argument, which is ignored, is saves having to delimit the two statements with a semicolon:  s=0;t=d()   vs  t=d(s=0)   The second chunk uses the ternary conditional operator as well as that same semicolon-saving trick and is equivalent to:  ++s; e = d() - t; if(e < 15e3) {     style.margin = (e % 300) + ' 0 0 ' + (e * 7 % 300); } else {     alert(s); }   So s is a counter that's incremented on each click.  d calculates the difference between the current time of the click and the time when the page loaded (t).  If that difference is less than 15 seconds (expressed in milliseconds, i.e. 15000ms expressed as a float literal in scientific notation, again saving a few chars) then adjust the margin of the <p> element.  Otherwise alert the value of the counter.  This shows how many clicks you were able to get before 15 seconds elapsed."
learnjavascript,3buh28,Rhomboid,1 point,Thu Jul 2 07:32:19 2015 UTC,"That clears it up, thank you!"
learnjavascript,3br1ba,RobertoLisak,6,Wed Jul 1 13:29:40 2015 UTC,"I've always found the MDN much more useful than those random blog posts - not only because it actually explains the methods in depth, but also because it can be used for everything regarding JS, instead of having to hunt for new blog posts when you want an overview for arrays, objects, numbers, etc."
learnjavascript,3br1ba,birjolaxew,1 point,Wed Jul 1 14:31:19 2015 UTC,Another fun toString() one :  (6).toString(2)   Converts a number to binary.
learnjavascript,3bsrhp,DumplingKing1,2,Wed Jul 1 21:11:58 2015 UTC,"Since you didn't want solutions (props to you!), I'll just leave you with this:  Here is an example of a grid in HTML. Try to recreate that in Javascript - you're going to want to use a for loop."
learnjavascript,3bsrhp,birjolaxew,1 point,Wed Jul 1 21:41:21 2015 UTC,thanks for your response! for some reason your HTML example appears to be blank for me.
learnjavascript,3bsrhp,birjolaxew,2,Wed Jul 1 21:45:23 2015 UTC,"Whoops, I forgot to click that save button :P I update the link."
learnjavascript,3bsrhp,Ob101010,1 point,Wed Jul 1 22:07:23 2015 UTC,"Thank you VM! :-)  I was actually about to figure it out on my own using JS, but this was another approach that I will try next time."
learnjavascript,3bsrhp,Ob101010,2,Thu Jul 2 03:15:23 2015 UTC,"To add on to what birjolaxew said,  for(cols) {     for(rows) {         // stuff here     } }   Nested for loops... Not entirely obvious.   Also, if you put your code up on jsfiddle for critique, that will help."
learnjavascript,3bsrhp,thothsscribe,2,Thu Jul 2 04:58:28 2015 UTC,"So I actually figured out a lot of things on my own and pretty proud of my work. It took maybe 3+ hours of straight work. :-) Take a look at what I've accomplished so far here:   http://codepen.io/anon/pen/XbZaMv  I do have a question though...I've been trying to make it so when you hover your mouse over the boxes, they will fill in w/ color and then after a few seconds it fades back to the original background color, in this case gray.   Right now I can hover the mouse over boxes and it will change color, but it doesn't fade back to gray. I've played around with timeOut, fadeIn, fadeOut, and I just can't get it going. Can anyone help me with this?"
learnjavascript,3bsrhp,thothsscribe,2,Thu Jul 2 05:50:37 2015 UTC,"fading example :  http://codepen.io/j932kdsfl303c/pen/xGYzqr  I see below that you 'cant do css to solve', that you just want to use jquery. Well guess what!   $('.someClass').style({'background':'red'});   You can use CSS / apply CSS styles / modify existing CSS with jQuery.  Edit : also forked yours :  http://codepen.io/j932kdsfl303c/pen/NqyzvQ"
learnjavascript,3bsmjw,Krainz,2,Wed Jul 1 20:35:54 2015 UTC,jsfiddle
learnjavascript,3bsmjw,einarkristjan,1 point,Wed Jul 1 22:24:08 2015 UTC,Thank you!!
learnjavascript,3bree6,haxx1,5,Wed Jul 1 15:19:47 2015 UTC,"Some functions require this to be set to a certain value (in the case of window.performance.now, it requires this to be set to window.performance). If you try to call some native functions with the wrong this value, they'll throw an ""Illegal invocation"" error.  The way to fix this is to use Function.prototype.bind to ""bind"" window.performance as the this value of window.performance.now.  When it refers to performance, Javascript looks up through the chain of scopes for a variable named performance - if it doesn't find one, it'll eventually reach the performance in the global scope (window)."
learnjavascript,3bree6,birjolaxew,1 point,Wed Jul 1 15:42:39 2015 UTC,Thanks for clearing that up for me!
learnjavascript,3bree6,Rhomboid,5,Fri Jul 3 09:16:02 2015 UTC,"The function window.performance.now() expects to be called as window.performance.now(), or performance.now(), which is equivalent in a browser context.  There is some function now, that when called as performance.now() will have its this set to performance.  If you create a reference to that function can try to call it, that will not be the case and it will complain:  < var foo = performance.now > undefined < foo() > TypeError: 'now' called on an object that does not implement interface Performance.   This function expects to be invoked as performance.now(), not as now().  It's complaining because its this is set to the global object instead of performance.  That's why a bound copy of it must be created, with this bound to performance.  < var foo = performance.now.bind(performance) > undefined < foo() > 555735.6840545831   This has nothing to do with the ternary conditional operator.  The code you quoted is merely using that as a shortcut.  It could also be written as:  var now;  if(performance && performance.now) {     now = performance.now.bind(performance); } else {     now = Date.now; }   Date.now apparently does not mind being invoked unbound.  The use of self here is rather confusing and unnecessary, since window has a property window.self which refers back to window.  Again, in the context of a browser, window.<anything> is the same as <anything> is the same as window.self.<anything> is the same as self.<anything>."
learnjavascript,3brlzx,Krainz,1 point,Wed Jul 1 16:15:21 2015 UTC,"jQuery overrides anything you wrote with @media because it uses inline styles. Since inline styles are above stylesheets in the CSS cascading order, they overwrite your stylesheets - unless you specify !important on the style you want to keep.  If you want to avoid using !important, you can also use Window.matchMedia in your Javascript to check whether a certain media query matches. Alternatively, you could use window.innerWidth to get the width of the page."
learnjavascript,3brlzx,birjolaxew,1 point,Wed Jul 1 16:53:11 2015 UTC,"That worked, thanks!"
learnjavascript,3bq7ba,utuxia,1 point,Wed Jul 1 06:59:28 2015 UTC,"I have bought one or two from cheapssls.com, now called ssls.com  Bevare though, if you visit their website you are doomed to watch ""cheap ssls from 4.99"" ads for the rest of the eternity. I still keep getting them even if I was looking for a cert more than a year ago."
learnjavascript,3bq7ba,didzisk,1 point,Wed Jul 1 07:21:19 2015 UTC,"Do you need a single domain or wildcard? A single domain certificate generally costs on average $9/year, while a wildcard can start as low as $30/year.  You can also get a Class 1, single domain certificate, for free at StartSSL. They are reliable and accepted by all browsers, I've never had issues with it.  Keep watching LetsEncrypt also, backed by major players, they promise free certificates.  If none of these options work for you and you're set on paying, check out Namecheap, a domain registrar I use which also sells SSL certs."
learnjavascript,3bq7ba,thecementmixer,1 point,Wed Jul 1 07:35:01 2015 UTC,"Wow. StartSSL looks a little scary tbh.  LetsEncrypt looks promising, but I can't wait that long.  Namecheap I know and trust and seems cheap enough. I can front $10 for a cert. Man, that rapidssl is a rip. That was the cheapest I found a few years ago when I researched it. I guess heartbleed changed all that.  Thanks for the post."
learnjavascript,3bq7ba,GunjanTripathi,1 point,Wed Jul 1 08:05:49 2015 UTC,I would like to suggest you to visit CheapSSLShop once. Where you can find major trusted CAs and price starts from just $4 per year. I hope this will help you.
learnjavascript,3bq7ba,Voziv,1 point,Wed Jul 1 09:27:05 2015 UTC,"I've been pretty happy getting my certs from Namecheap. They resell from several providers. I usually go with their comodo ssl offering.  It's also worth noting that I bought an SSL cert but didn't use it (didn't have a cert signed yet or anything) about 6 months ago and it's still showing as a brand new cert (meaning it will be good for 1 year once I activate it). I have no idea if that's standard practice across other providers, but I found it to be a nice addition."
learnjavascript,3bq7ba,JasonParm,1 point,Wed Jul 1 13:10:32 2015 UTC,"A great value, lower cost, very fast and reliable service! Recommended - https://www.ssl2buy.com"
