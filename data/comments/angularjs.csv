angularjs,3e3vy5,zwacky,2,Tue Jul 21 19:28:34 2015 UTC,Missing Canada. Also the ability to check multiple countries at the same time. Maybe putting a flag in the corner where its available.
angularjs,3e606q,c4d4,4,Wed Jul 22 05:41:37 2015 UTC,"So they invented exta attributes that work like id and class, but only work for tests because that's the only reason for you not to randomly change them around?"
angularjs,3e606q,vinnl,2,Wed Jul 22 06:42:57 2015 UTC,Error: name conflict. https://github.com/angular/protractor
angularjs,3e606q,TheNiXXeD,2,Wed Jul 22 10:27:59 2015 UTC,A nice alternative to protractor: http://minium.vilt.io/  It's based on Selenium and JQuery
angularjs,3e2but,technofattie,9,Tue Jul 21 12:27:34 2015 UTC,It would have been nice to get an explanation as to what the individual test result columns mean. Otherwise it's hard to really understand how these 3 frameworks differ and where they are currently individually excelling.
angularjs,3e2but,one800higgins,2,Tue Jul 21 20:01:36 2015 UTC,"Angular benchpress is a new tool, so there's not a lot of documentation about it.  But there is at least this page containing some more technical details:  https://github.com/angular/angular/blob/master/modules/benchpress/docs/index.md"
angularjs,3e2but,dfbaskin,2,Wed Jul 22 12:48:01 2015 UTC,"Isn't react a view controller and Angular a MVC? This is comparing apples to oranges, no? Maybe they should start doing tests using Angular + native view controller and Angular + react as its view controller. Just a suggestion?"
angularjs,3e2but,Beaulne,2,Tue Jul 21 22:00:12 2015 UTC,"It's very possible that this is not an apples-to-apples comparison.  However, my understanding is that the measurements represent the time from the start of some operation to the end of that operation, including the final DOM rendering.  This would make for a valid comparison it seems to me (regardless of the model/view functionality used)."
angularjs,3e2but,dfbaskin,1 point,Wed Jul 22 12:58:11 2015 UTC,"You are 100% correct. I just think people have to understand its not angular or react. There is a lot of uninformed hate for angular, even though its such a pleasure to code with."
angularjs,3e2but,Beaulne,-1,Wed Jul 22 13:39:41 2015 UTC,How many stacks can you bench bro?
angularjs,3e2jwm,jbdemonte,1 point,Tue Jul 21 13:44:44 2015 UTC,"How is this different from ngmap which also claims to ""Expose all original Google Maps V3 api to the developer""?"
angularjs,3e37k1,ragnarmcryan,-3,Tue Jul 21 16:43:35 2015 UTC,"Google could have told you. Check out timeout in the config parameter, https://docs.angularjs.org/api/ng/service/$http You can give it a promise that will cancel the request when it resolves."
angularjs,3e37k1,kogsworth,3,Tue Jul 21 16:46:45 2015 UTC,Hey thanks for the quick reply. I saw this but I'm new to angular and I wanted to make sure that was the right way to do it. It seemed weird to cancel a request using something called timeout when the request wasn't really timing out.
angularjs,3e1uua,fast74,6,Tue Jul 21 08:50:17 2015 UTC,There is! Tutorial
angularjs,3e1uua,harisb2012,5,Tue Jul 21 10:05:28 2015 UTC,I would also add another post that I wrote a couple days ago How to use ES2016 decorators to avoid Angular 1.x and ES2015 boilerplate code. Github project can be found here.
angularjs,3e1uua,martinmicunda,2,Tue Jul 21 12:06:33 2015 UTC,holy fuck that is some beautiful code
angularjs,3e1uua,ogrechoker,2,Tue Jul 21 13:09:53 2015 UTC,"Both of these are fantastic, thanks!"
angularjs,3e1uua,gonzofish,5,Tue Jul 21 15:59:23 2015 UTC,"I've started using TypeScript 1.5 & Webpack with Angular 1.x right now...I'm hoping at some point to either put up a see project or blog post or something somewhere of my trials & tribulations.  I've been building my apps component-based for quite a while now (closing in on a year). Some small projects, some enterprise-level projects. You'll find it much easier to reason/work with the projects that way--truthfully approaching them this way has made me scratch my head when I hear people's complaints about Angular because I don't have those issues...  But as you & others have said on here:   Components, components, components! (aka, directive with a controller) Don't use ng-controller Use the controllerAs syntax, don't use $scope unless 200% necessary .services are your best friend"
angularjs,3e1uua,jmkni,1 point,Tue Jul 21 15:15:21 2015 UTC,.services are your best friend   Can you explain that one a bit more?
angularjs,3e1uua,gonzofish,2,Wed Jul 22 11:05:21 2015 UTC,"Absolutely...  One of the biggest mistakes someone new to Angular makes is that they do a ton of data processing inside a controller--think things like $http.getor creating giant methods to process data in some respect.  This is absolutely not where data processing should happen.  Services (.service or .factory) are the appropriate mechanism for handling your data. Why? Well, an easy answer is that controllers can't (and shouldn't) talk to each other. Instead, you should be using your services to act as the location that the controllers look to for data.  Services are such a simple and effective way to share data between controllers without any of the crap that $scope.emit& $scope.broadcast and all that nonsense brings (I have never used emit or broadcast for anything other than a quick-and-dirty, non-production test).  Why .service over .factory?  This answer is simpler than you think. The major apparent difference between .service & .factory is that a .service acts like a regular ""class"" by using the this keyword where a .factory returns a JSON object.  And when a .service is instantiated, it is (as far as I know) wrapped with a .factory (someone correct me if I'm wrong).  With ES6, TypeScript, Babel, etc. having classes, using a .service just makes the most sense since this is essential to writing classes. The code is cleaner & leaner, too. I haven't written a .factory in a while now and the only thing that's changed is an improvement to readability."
angularjs,3e1uua,jmkni,2,Wed Jul 22 13:32:20 2015 UTC,"Thanks for the reply, that more or less aligns with how I am coding at the moment, but a well written clarification :)"
angularjs,3e1uua,gonzofish,2,Wed Jul 22 13:44:57 2015 UTC,no problem...it's always good to have your ideas reinforced.
angularjs,3e1uua,jmkni,3,Wed Jul 22 14:14:05 2015 UTC,"Short answer: Components.  Basically don't use ng-controller, and write everything as a component, there's a good article on it here."
angularjs,3e1uua,technofattie,2,Tue Jul 21 14:29:12 2015 UTC,"I did a presentation recently about this very topic, and published the repo to github: https://github.com/jwcarroll/preparing-for-angular2.  If you look at the ""tags"" you will see a steady progression from typical ng1 application to something that will be much easier to port to ng2."
angularjs,3e2sk3,ebens8989,3,Tue Jul 21 14:55:10 2015 UTC,"You can either make it two different apps, which sounds like not what you want to do. You can always make two SPAs with shared components.  That being said I have a large app I'm working on that has three ""modes"" which require totally different layouts. I'm using UI Router and my first state is the entirety of my index.html. My index has the head content and a body containing only a ui-view tag.  I then define an abstract states for each layout type. In the case of the application example linked below I have an 'app' parent state that defines the layout for most of the application and a 'dashlayout' state that defines the layout for the various dashboard states.  http://plnkr.co/edit/EdpAzti7zxBnMaxp2tqv"
angularjs,3e2sk3,chew827,1 point,Tue Jul 21 17:18:52 2015 UTC,Thanks! This really solves alot. Allows me to keep the sections together and not create separate apps. Now I just need to sit down and look over UI-Router to get a feel for it.
angularjs,3e3rjs,remotejs,1 point,Tue Jul 21 18:58:40 2015 UTC,Please spam somewhere else :(
angularjs,3dzl0s,get2workUslacker,4,Mon Jul 20 20:29:37 2015 UTC,"This pretty much covers the basics, assuming you're going to use Karma with Jasmine. The Angular Phone Category tutorial shows at every step how you can test the application. Hope this helps!"
angularjs,3dzl0s,weirdwater,1 point,Mon Jul 20 21:09:47 2015 UTC,"that could be what I was looking for, thanks!"
angularjs,3dzl0s,thomascgalvin,3,Tue Jul 21 00:44:24 2015 UTC,"Angular JS: Up and Running is the book I used to teach myself Angular, and covers unit tests as a fundamentally important part of development from (very close to) the beginning."
angularjs,3dzl0s,juristr,1 point,Tue Jul 21 00:07:18 2015 UTC,"ok, cool, i have access to that."
angularjs,3dzl0s,PaleBlueThought,2,Tue Jul 21 00:43:37 2015 UTC,I've written down some articles while diving into Angular. Some also cover aspects of testing: http://juristr.com/blog/2014/11/learning-ng-series-intro/  What exactly have you been looking for? (so I can maybe extend these articles a bit further :) )
angularjs,3dyase,zefcfd,4,Mon Jul 20 15:02:09 2015 UTC,"Ugh - Coffeescript, and Grunt? :P I'm very familiar with Angular and I wouldn't mind helping out....but man. Coffeescript? I guess at least I wouldn't have to write any Grunt configuration, as it's already been done, but....hmm.  I'll definitely check out the project, though. Sounds interesting. I'm guessing that if you're hosting the API on Heroku, you're following twelve-factor for scalability. If the API is open-source, I'd love to check that out. (I'm guessing it's written in Ruby, not node, since you're using Coffeescript? Am I wrong?)  (Also, note that I'm not a fan of Coffeescript - but the reason I'm bringing this up is because you may have alienated part of the user base that might want to contribute. That isn't meant with malice - it's just a note, for future awareness.)"
angularjs,3dyase,lunchmeat317,1 point,Tue Jul 21 01:56:19 2015 UTC,"Re: coffeescript - I agree with your sentiments about it alienating some of the people. However I think that goes both ways. I know quite a few people who would be very sad if I weren't using coffeescript. In fact, you're the first person I've heard that was opposed to it haha. I agree it's geared towards people who aren't javascript purists though, and I can respect that.  Re: heroku - Yes it's currently on heroku, although if heroku becomes too pricy Ill be moving to aws. I've been load testing the API, and I think I can get away with heroku for atleast the first year or so, until there is some financial incentive to make the switch (cost wise)  Re: open source api - The api isn't open sourced currently. It's not that I'm opposed to the idea of open sourcing it, I'd just like to have all my ducks in a row before making it public (e.g. make sure the launch goes well) . Also the client application is where most of the heavy lifting is done.  And yeah that would be awesome! if you checkout the repo, there are some open issues, and we have a chat https://gitter.im/chutterbox/chutter if you have any feedback or suggestions."
angularjs,3dyase,nutyourself,6,Tue Jul 21 02:10:58 2015 UTC,"I agree with parent, I really don't understand some people's obsession with coffeescript. TypeScript, ES6 would be much better choices IMO. I hate when I come across npm modules or other JS libs whose source is coffeescript."
angularjs,3dyase,fleshintogear,1 point,Tue Jul 21 02:20:00 2015 UTC,"I agree there would be marginally better choices out there. But I think coffeescript is incredibly easy to read, and feels much less laborious to write. But yeah, I respect your points and think they're valid, but I don't think coffeescript is causing any immediate hindrances with respect to the project."
angularjs,3dyase,wmeate1099,5,Tue Jul 21 02:49:15 2015 UTC,"Voat can't stay up, what is your plan?"
angularjs,3dyv13,jewdai,4,Mon Jul 20 17:26:32 2015 UTC,"Pretty sure that you can't inject $scope into factories (you can inject $rootScope and create a new scope instance). But, there is no reason for you to have $scope in that service anyways."
angularjs,3dyv13,e82,1 point,Mon Jul 20 17:29:01 2015 UTC,im trying to share functions between controllers that depend on scope. Is there a better way to do it?
angularjs,3dyv13,e82,3,Mon Jul 20 17:35:20 2015 UTC,"Refactor the functions to not rely on scope. You /could/ pass $scope into the function - but bad things will happen. They might not happen immediately, but at some point - something weird will happen and you will have no idea of what is going on.  I usually try to be pretty explicit with what I pass into my ng-submit / ng-click / ng-change / etc, ie:  <form ng-submit=""ctrl.submitForm(ctrl.contact)"">   <input ng-model=""ctrl.contact.firstName"">   <input ng-model=""ctrl.contact.lastName""> </form>   Then try to have my submitForm not rely on anything that isn't explicitly passed into it.   In your case, you could simply pass in the FacultyMember object.  functionCollection.isFulltimeFaculty = function (facultyMember) {     return (facultyMember && (facultyMember.FacultyType === ""Full-Time"")); }"
angularjs,3dyv13,interactionjackson,1 point,Mon Jul 20 17:44:12 2015 UTC,"instead of using $scope in your edit service you will want to pass in a faculty member object or use the FacultyMembers service you wrote. Also, Angular gives us an $injector service to retrieve dependancies.  pass $injector into your function and then call it like:   $injector.get('$state').transitionTo('some.page');"
angularjs,3dykhw,johncat_,3,Mon Jul 20 16:13:03 2015 UTC,"What you're asking about is more of a back end related series of tasks that would be done in PHP, C#, Java, Python etc. AngularJS would be used for the user interface, but you have described no interface other than a few form fields (that are getting data from somewhere else anyways). If you had to use AngularJS, you would send the field values with $http.post, then the back end would do the real work with that data and render the document. I think it would be far easier to do this in jQuery with AJAX if you don't know angular for less of a learning curve."
angularjs,3dykhw,chancechants,1 point,Mon Jul 20 16:35:49 2015 UTC,"Okay, sorry you're totally right, I just realized I wasn't being anywhere specific. I want to do a http basic authentication with Angular..."
angularjs,3dykhw,weirdwater,1 point,Mon Jul 20 17:18:25 2015 UTC,"So basically you want to pull data from source A, and store it in place B? Shouldn't a Python or PHP script, that writes the data to a local plaintext file, suffice?"
angularjs,3dykhw,weirdwater,1 point,Mon Jul 20 16:59:29 2015 UTC,"Yea I messed up, I want to do a http basic authentication with Angular..."
angularjs,3dwsck,natdm,1 point,Mon Jul 20 04:34:22 2015 UTC,"The league variable is available from inside the ng-repeat, so in your click handlers you can either pass the entire thing, or just the property you need.  I'm not entirely sure how your leagues array looks, but here's a quick example:  <button ng-click=""addPlayers(league)"">Add Players</button>  Then in your controller:  $scope.addPlayers = function (league) {   league.players.push({     name: 'Dave',     age: 27   }); }"
angularjs,3dwsck,jameswyse,1 point,Mon Jul 20 05:26:11 2015 UTC,How would you suggest using that to create one table per team with the amount of players as rows?
angularjs,3dwsck,acidiclove,1 point,Mon Jul 20 05:36:58 2015 UTC,"Your table structure should be:  Leagues (LeagueId INT, LeagueName VARCHAR(400))  Teams (TeamId INT, TeamName VARCHAR(400), LeagueId INT)  Players (PlayerId INT, TeamId INT)  Then if you have a many to many relationship, you will need to add mapping tables. Look up many to many relationships for that.  So you would go   <div id='league' ng-repeat=""league in leagues"">    <div id='team' ng-repeat=""team in league.teams"">      <div id='player' ng-repeat=""player in team.players"">      </div>    </div>  </div>"
angularjs,3dwsck,dmackerman,1 point,Mon Jul 20 05:57:26 2015 UTC,"That's a lot of watchers. Ideally the data structure would be more optimized to get rid of that last player in team.players, and just return a players[] when you do the initial fetch on a team."
angularjs,3dwsck,jascination,1 point,Tue Jul 21 13:25:23 2015 UTC,"If I'm understanding correctly, when you click ""add players"" you want to take the clicked league's ID and do some biz with it?  What you want is to send that data to your controller and do the logic there. For instance:  <div ng-repeat=""league in leagues"">     <strong>{{league.name}}</strong>     <strong>{{league.players.length}}</strong> <!-- assuming league.players is an array, if it's just a stored number you don't need the .length -->     <button ng-click=""addPlayers(league.id, $index)"">Add Players</button> </div> <table ng-show=""selectedLeague"">   <tr ng-repeat=""league in selectedLeague"">      <td>{{league.name}}</td>      <td>{{league.id}}</td>      <td>{{league.players.length}}</td>   </tr> </table>   In your controller:  $scope.addPlayers = function(id, index){   $scope.selectedLeague = $scope.leagues[index];   // Whatever else you want to do in here }   Clicking the ""Add Players"" button will pass in the ng-repeated id, as well as the iteration index. This maps nicely to the array index. HOWEVER I don't remember whether $index starts at 0 or 1, if it starts at 1 then you'll need to change the code to $scope.selectedLeague = $scope.leagues[index - 1]; so that we're picking out the correct element in the $scope.leagues array."
angularjs,3dwsck,shristi_trainer,1 point,Mon Jul 20 06:57:43 2015 UTC,"Here's what I've done so far. A little different than what was suggested, but I think it provides more clarity on what I want to do. This information needs to be passed to another page in the view. So, a listing of leagues. A button/link to ""add players"", takes that league ID, the teams, and players per team, and creates the ng-repeat table.   Within the main controller, I have this function:      $scope.createTeam = function(id, teams, format) {         console.log('League Details: ' + id);         console.log('League Details: ' + teams);         console.log('League Details: ' + format);          $location.path('/create/team');          $scope.current_id = id;         $scope.current_teams = teams;         $scope.current_format = format;         $scope.getNum = function(num) {             return new Array(num);         };     };   Then on the button for the league, I have:   ng-click=""createTeam(league.id, league.team_count, league.format)""   It logs the details, sends me to the new page, without any of those details. The ng-repeat wasn't working (""ng-repeat team in getNum(current_teams)""). So I just put {{current_teams}} and all the other information on that page to see if it'd at least output it. However, it doesn't. Any idea why?  Also, they are both on the same controller.   .when('/create/team', {             templateUrl: ""/pages/teams.html"",             controller: 'mainController',             map: 'teams'         })   Also, I'd totally make this a fiddle but it's using http requests from a local database, so you wouldn't have any data to see."
angularjs,3dtkla,lukejohnbrown,32,Sun Jul 19 09:13:05 2015 UTC,You are never wasting your time when learning something. Angular is and will continue to be a heavily used framework for web apps. The job market and demand for angular devs is very large too.
angularjs,3dtkla,PUSH_AX,1 point,Sun Jul 19 09:39:09 2015 UTC,Thank you :)
angularjs,3dtkla,devsquid,10,Mon Jul 20 03:34:03 2015 UTC,"This question gets asked here at least twice a week, but what the heck:    Angular 2 is still a long way away, its in alpha/dev preview and a lot of things are subject to change. The Angular team has said that they'll continue supporting Angular 1. If you take a look at the [changelog], they even add fixes to 1.2 and 1.3 from time to time. (https://github.com/angular/angular.js/blob/master/CHANGELOG.md)  In addition to the new concepts, some of the concepts from Angular 1 will transfer to Angular 2. Also some are going to be dropped. I think its a good thing since it will clear up all of the confusion between services/factories/providers/controllers and when to use what. There's going to be an upgrade path/guide if you're migrating from 1 to 2."
angularjs,3dtkla,AlGoreBestGore,1 point,Sun Jul 19 14:39:52 2015 UTC,"Regarding your 4th point: unless all the libraries built for angular that we use in our projects also get updated, then it will be a pain in the ass to migrate the projects to 2.0"
angularjs,3dtkla,itsmegoddamnit,2,Sun Jul 19 15:51:27 2015 UTC,"True, we'll have to wait a while for all the dependencies to migrate."
angularjs,3dtkla,AlGoreBestGore,16,Sun Jul 19 15:58:13 2015 UTC,"You're wasting time asking questions like this.  I'm not trying to be snarky. Just sharing from my own experience. 15 years into this game, the amount of wasted effort agonizing over what to learn and if it is 'useful'. It's a form of procrastination, spend the time learning stuff instead."
angularjs,3dtkla,ramblerman,2,Sun Jul 19 15:21:42 2015 UTC,You said it's a waste of time asking questions like this and said just start learning 'stuff.'  Can you elaborate on what that means? Do you mean learn everything? Or always learn the latest hype? I'm curious on your proposed alternative.
angularjs,3dtkla,erceth,1 point,Mon Jul 20 01:00:39 2015 UTC,"Pick what you find interesting now and dig in. If you just spend time chasing something you think is popular or might become popular, you'll just get burned out trying to learn something you didn't care much about in the first place.   In the context of this post, learning angular 1.x will teach plenty of cross purpose skills in JavaScript. It's definitely worth learning."
angularjs,3dtkla,gorillatick,1 point,Mon Jul 20 01:38:01 2015 UTC,"Follow your instinct. You wanted to learn angular for whatever reason so just do it. Don't put the handbrake on with the destructive question 'Is this useful?'  By learning it for yourself you will be in a far better position to judge what you enjoy, let that be your guide. If a framework/language has a subreddit, then it's an employable skill, done, let's play with it now."
angularjs,3dtkla,ramblerman,1 point,Mon Jul 20 07:05:23 2015 UTC,"It would be more accurate, I think, to say that it is usually a waste of time to ask questions like these. There are times when it is a good idea to investigate what to learn -- for example, if you wanted to go into a very specific segment of an industry and weren't sure what the best tech to learn is. But it's a slippery slope, and usually you can spend your time better (and answer your own question) by spending just a few hours with the technology being questioned."
angularjs,3dtkla,z0d14c,1 point,Tue Jul 21 18:47:48 2015 UTC,"I think you're very right. The shear number of posts I see here talking about angular 2 and coding in it, and it's the next best thing, and my, look how fast it is.  People... stop. What's your current project's requirements? Can existing, well supported, tech handle it? Can Angular 1.x do what you need? Then go with it, you're going to have FAR less headaches using a framework that's well bedded in now.  Anyone writing actual applications now, trying to use Angular 2 would be seemingly just setting themselves up for massive headaches as they discover all the parts that aren't done, aren't compatible, are changing... and the massive number of modules and libraries that currently exist for Angular 1.x are just going to be painful to get working with it.  I'm starting a really large project at a new company. It's probably going to go on for years. Some would say 'You should do it with a view to moving to Angular 2.x... why be stuck with Angular 1.x when it's all old?'  Why not? I can code Angular 1.x very well now, I find it's a great framework, I can do everything this application will require in it.   Why chase imagined gains?  I think it's only worth jumping onto new tech when there's a clear benefit, not just because it's new and shiny."
angularjs,3dtkla,spoco2,3,Tue Jul 21 23:43:47 2015 UTC,"I don't think so. Even though 2 will be completely different from 1, there will still be fundamentals and such that will be transferable. Or just start learning 2 now instead of 1?"
angularjs,3dtkla,jameselliottphp,3,Sun Jul 19 09:25:16 2015 UTC,"Another quick side note on using 2.0... How many of these projects will be client facing? If its all for your own personal projects, start using 2, and you'll be ahead of the curve when its an actual release. At the end of the day, keep coding, coding is coding and will learn valuable lessons either way."
angularjs,3dtkla,sn0n,1 point,Sun Jul 19 11:03:31 2015 UTC,i started with 1 and haven't even gone on to 2 yet. from what i understand there's a pretty big philosophical difference between the two and I'd say just get comfortable with building a project or two in 1.4 and then look at 2. i haven't seen that many companies use 2 in production at all (i think alpha was just released anyways)
angularjs,3dtkla,fahdsheikh,1 point,Sun Jul 19 21:48:53 2015 UTC,"Problem with learning 2 now... is that you can't code any actual code in it.  It's not finished, not ready. No-one should be putting anything written in 2 into production."
angularjs,3dtkla,spoco2,2,Wed Jul 22 00:02:39 2015 UTC,"Chances are, even if you advertise as an Angular2 pro, you'll come across Angular1 projects that need to be updated because the previous owner left/was fired/died/disappeared mysteriously.  Not all projects will be greenfield where you get to write it all from scratch.  By ignoring Angular1 you will have rendered yourself ineligible for the vast majority of work out there. That is very bad.  Not only that but a lot of the changes in Angular2 are in response to shortcomings of Angular1, and your knowledge of the strengths and weaknesses of both versions will make you an authority on the subject. That is very good.  So no, you're not wasting your time."
angularjs,3dtkla,ihsw,3,Mon Jul 20 03:17:50 2015 UTC,"I was in a totally situation as you about 3 weeks ago. Asked the same question and someone gave me shit for asking the same question someone else asked a few days before. :(  Here is what I thought.  On one hand, learning something is never a waste of time. But given a limited amount of time and a specific goal, learning the wrong shit could be. If I wanted to become a lawyer in 3 years time, learning anything other than law is a waste of time.  So I thought, well should I keep learning 1.x knowing that come next year, it wont be the latest hot shit. I would also need to spend a lot of time recoding the entire codebase if I wanted to use 2.0, not to mention learning a fuck load of new concepts. Now if I was some developer, I shouldnt really complain about learning new web technologies as it really is my job and passion. But Im in corporate finance / analytics and Im learning web dev to implement my app ideas as side projects. I dont care about learning the latest web technologies so develop myself as a great web developer. I just want to learn a tool that doesnt get outdated within a few years and gets the job done. Well, 1.x does get the job done but I read a few articles that said I should avoid relying on full blown frameworks - especially Angular as you are not really coding javascript, you are coding Angular. If you rely too much on angular, you are really putting yourself at the mercy of one framework to not go through a major update.  So I decided I wont go with Angular at all and look into React. Plus, for a noob like me, learning a new framework takes bloody ages and I think I have below average intelligence because it takes so much of my brain power to understand new concepts (ie took me ages to understand two way data binding, and the MVC model). I wont do it for the sake of learning as well.  If you want to be a web dev, I definitely think it is worthwhile to learn it as it seems like it has and continue to be the most popular frontend framework and a lot of the concepts will be useful when you learn 2.0 (which apparently will be a really good framework)."
angularjs,3dtkla,tonylee0707,3,Sun Jul 19 10:25:49 2015 UTC,"I just want to learn a tool that doesnt get outdated within a few years and gets the job done.   Aside from learning languages. design patterns, architectural concepts, etc, there is no such thing. Welcome to being a software developer.  Another thing that you guys asking these questions need to remember is that a giant chunk of your duties as a dev will be maintenance, bug fixes, component refactors, and the like. If you step in to just about any angular shop a year, or even 2 years from now, I'd bet a whole lot of cash that they'll have a lot of 1.x code with no current plans to refactor to 2.0. What happens if you don't know 1.x syntax and are expected to be able to support their existing codebase?"
angularjs,3dtkla,AlmightyThumbs,1 point,Sun Jul 19 16:38:24 2015 UTC,"Like i said in my answer, i said it would be great to learn v1.x if you're a developer but since im in a completely different field, it may not apply to me."
angularjs,3dtkla,tonylee0707,2,Sun Jul 19 19:02:46 2015 UTC,"It's fair enough, this same topic and answers are recycled daily. Use the search."
angularjs,3dtkla,Have_you_tried_this,1 point,Sun Jul 19 16:08:33 2015 UTC,"Thanks a bunch for your reply! I didn't realise how much this question had been asked already, my bad! I think I'm going to continue learning and hopefully catch on to 2.0 when it arrives. Best of luck at your end!"
angularjs,3dtkla,one800higgins,0,Sun Jul 19 10:30:07 2015 UTC,"It's asked frequently enough that it deserves a sidebar answer and for posts like this to be removed by moderators, in my opinion. After Angular2 was announced, I had to unsub for a couple months to avoid the train wreck of people posting this question and others bitching about the rewrite."
angularjs,3dtkla,tonylee0707,1 point,Sun Jul 19 21:19:06 2015 UTC,No worries mate :) Everybody asks questions that has already been asked on the net. Hope you have a good time with Angular!
angularjs,3dtkla,Have_you_tried_this,2,Sun Jul 19 10:32:17 2015 UTC,"Argh please just use the search, this comes up so so often."
angularjs,3dtkla,another_math_person,1 point,Sun Jul 19 16:06:23 2015 UTC,"If you don't know backbone, a tour of frameworks might be useful to see how we got where we are.  And remember, you can build things in an old language or framework. People did, and old systems continue to be maintained."
angularjs,3dtkla,fullstackmonkey,1 point,Sun Jul 19 13:31:53 2015 UTC,"Great question, 100% Keep going!   Software will always be a moving target. But it is almost impossible to waste time learning. You will take a lot away that isn't angular specific.   Once 2.0 is released you should start using it when appropriate. Maybe create a dev branch in your projects specifically for the new version of angular and work through the changes.  Good luck and if you ever need a hand just ask."
angularjs,3dtkla,jeffreyparker,1 point,Sun Jul 19 18:48:26 2015 UTC,"I was unaware of the 2.0 update   There's already plenty of great answers regarding your question, so I just wanted to address this. The javascript world moves at an incredible pace; I highly recommend trying to keep up-to-date with the ecosystem so that more changes like this don't blindside you.  Twitter is a great place to start, I recommend following everyone on the Angular core team as well as contributors to other frameworks e.g. the Ember.js core team. Not everything they post will be directly relevant to you, but it's great to have a pulse on the direction the javascript community."
angularjs,3dtkla,kisses_joy,0,Mon Jul 20 00:32:54 2015 UTC,This is an Angular sub so you're not gonna get many deviating from the party line. But if I was you I'd not waste my time learning what is ultimately going to be legacy code very soon. Spend time in React.
angularjs,3dtkla,RICHUNCLEPENNYBAGS,1 point,Sun Jul 19 14:40:12 2015 UTC,"I don't understand why people are constantly saying that React is nothing like Angular because React handles views exclusively whereas Angular is intended to be a framework to do everything, then in the same breath recommending it over Angular."
angularjs,3dtkla,SomeRandomBuddy,1 point,Mon Jul 20 00:35:31 2015 UTC,"More or less, yeah"
angularjs,3dtkla,abyx,0,Sun Jul 19 14:58:30 2015 UTC,"As people here said, it's valuable since it will be supported for years to come and knowing it will probably help you get started faster with 2.0 when it's out.   But, each case is different. If you want to learn something to start working on client projects or find a job, Angular is currently quite popular and many places will be using 1.x many , many years ahead.   If, on the other hand, you're just learning things for fun, you might prefer to spend your time learning something else and maybe giving Angular another look in a year :) In the mean time you can learn other things, like Italian, mobile development, cooking, ember.js or even React! :)"
angularjs,3dtkla,utuxia,-1,Sun Jul 19 19:38:07 2015 UTC,Aurelia needs to be mentioned here.
angularjs,3dtkla,bigmac90,0,Mon Jul 20 01:28:18 2015 UTC,Like the other comments say mate. You are never wasting your time learning something new.
angularjs,3dqwvi,NashGargol,1 point,Sat Jul 18 16:22:23 2015 UTC,"For awhile I wondered 'what would the point of a decorator be?', then on a recent project I've found them to be very useful. Sort of lets you get into aspect oriented programming, and do some neat things that would clutter up logic else-where otherwise."
angularjs,3dqwvi,e82,1 point,Sat Jul 18 22:36:17 2015 UTC,"I justice used decorators to add support for translations in Angular Material dialogs and toasts, really useful."
angularjs,3dqwvi,tuhoojabotti,1 point,Sun Jul 19 00:14:07 2015 UTC,"Good article on the use of decorators in angular. To make sure that even uncaught exceptions are logged, it is better to use the $exceptionHandler service. Ben Nadel has an excellent article in this here - http://www.bennadel.com/blog/2855-piping-global-errors-into-the-exceptionhandler-service-in-angularjs.htm"
angularjs,3dslmd,angdev,1 point,Sun Jul 19 01:36:14 2015 UTC,"Angular does have a $window module that wraps window which you can inject into services, controllers and directives. It has the same functionality, so you should be able to just use $window.navigator.onLine. You can listen for this globally by using the global app module's .run() method as demonstrated in this Stack Overflow article."
angularjs,3dnj7o,schizoduckie,1 point,Fri Jul 17 18:41:38 2015 UTC,"If you're looking for something to try it on, open http://duckietv.github.io/DuckieTV/ :)"
angularjs,3dnj7o,Martinspire,1 point,Fri Jul 17 20:44:19 2015 UTC,Seems nice. Perhaps integrate it with ng-inspector or angular batarang?
angularjs,3dnj7o,kanzelm3,1 point,Sat Jul 18 12:48:20 2015 UTC,This is pretty freaking dope. Good work.
angularjs,3dpd1n,natdm,1 point,Sat Jul 18 04:04:15 2015 UTC,Does data in the success function return the right value? Does the error function run? Does the Network tab show a successful return of the POST call?
angularjs,3dpd1n,kogsworth,2,Sat Jul 18 04:29:32 2015 UTC,"Nothing in the success function runs. Nor the error. Network tab just shows a Bootstrap map file. Client side console is empty  Server side console is here: http://pastebin.com/r5QJ16Zv  Also, I added some console.log tests to the success and nothing prints out.   AAND I figured it out. Server side wasn't sending a res. Doh.  Thanks for your help."
angularjs,3dpd1n,kogsworth,1 point,Sat Jul 18 04:56:11 2015 UTC,it's all about tracing your assumptions until you find the faulty one :)
angularjs,3dpd1n,newmanoz,1 point,Sat Jul 18 05:08:19 2015 UTC,"Yep. It dawned on me to call either error or success, you probably need data returned. :-P  Thanks man."
angularjs,3dpd1n,joaozitopolo,1 point,Sat Jul 18 05:12:27 2015 UTC,"You aren't catching exceptions here, and they are possible."
angularjs,3dpd1n,joaozitopolo,1 point,Sat Jul 18 07:08:35 2015 UTC,You mean do try/catch?.. Never tried that before.
angularjs,3dofil,mrv1234,3,Fri Jul 17 22:53:12 2015 UTC,We're using Bootstrap too but Material does look fantastic.
angularjs,3dofil,RICHUNCLEPENNYBAGS,2,Sat Jul 18 00:36:11 2015 UTC,We are using angular material (https://material.angularjs.org/) for our new enterprise project (a conversion of our old windows apps to the web)...Its a little frustrating waiting for some components and some are a little under featured so we have sourced some from elsewhere or developed our own.  In general it has been going ok with that library.
angularjs,3dofil,zimzam99,1 point,Sat Jul 18 00:44:29 2015 UTC,"Same here, though I struggled to find 3rd party components that work well with angular-material.. Would love some recommendations if you have any?  edit: md-data-table is one I use: https://github.com/daniel-nagy/md-data-table"
angularjs,3dofil,jameswyse,1 point,Sat Jul 18 12:09:34 2015 UTC,http://mgcrea.github.io/angular-strap/ ++
angularjs,3dofil,phyrz,1 point,Sun Jul 19 05:18:25 2015 UTC,Right now there isn't a Material Design lib for Angular that is enterprise ready.   Here's one I'm working on: http://wthomsen.github.io/ng-materialize  Take a look at the Alternatives section for some of the different options out there.
angularjs,3do0m1,uncletroll,2,Fri Jul 17 20:52:22 2015 UTC,"Lets say I have a button on page - perhaps in a directive with an isolated scope.  And I want the background to transition to a random color when the button is clicked.  Am I expected to wrap the background div in a directive, put the transition in the link function... and then broadcast the click event into the directive?  That seems cumbersome. Should I just wrap the entire page in a directive, so I have access to a link function in which to do dom manipulations?    Each directive should ideally have its own template and you'd then use the directive. So instead of <button>Click me!</button> you'd say something like <my-button></my-button> and have a template in the directive with the button code. The link function has an argument (usually called el) that references the top-level DOM element in the directive's template which you can use to react to events like a click and you can either manipulate the CSS directly (Angular's version of jQuery, jqLite, has a .CSS() method) or you can toggle a class (jqLite has addClass() and removeClass() functions).  Also, since someone else mentioned it, you should try to use an isolate scope whenever possible. It's generally best practice. You can do exactly what you're trying to do without accessing the parent scope at all.    On a related note, Is it also 'un angular' to invoke something which causes a dom manipulation from a controller?  For example the material design function :$mdBottomSheet -- is it a bad practice to invoke that from a controller, or should I only invoke it from a directive's link?   Yes. DOM manipulation should not occur in a controller. There's no performance issue necessarily as you ask later, but it has to do with the idea of separation of concerns.   In general when programming, it's best practice to keep each piece of code that controls a different piece of functionality separate. In particular, a design pattern known as Model-View-Controller or MVC has become common place in a wide range of applications. Angular is specifically a flavor of MVC known as MV* (M-V-star) because it doesn't necessarily have true controllers in spite of the name. Services/factories/providers act as the model and control application state, views act as the view and control UI, while controllers act to bridge the gap between models and views by processing user input and outputting any processing of models to the UI. In a traditional MVC pattern, the controller is responsible for updating the UI and keeping it in sync, but in Angular, data-binding is handled in the view itself which is why Angular is considered MV*. It's simply best practice to keep the functionality separate. The whole point of directives is to manipulate the DOM, so you should keep DOM manipulation confined to directives.   Imagine you need to update something in regards to your material design UI. If you put some of it in controllers, now you have to think where it might be located. Also, since controllers are often tied to a single view, mixing DOM manipulation into a controller makes the code less reusable.   If you're interested, the difference between the compile and link functions in a directive is that the compile function is run before the DOM is constructed. If you have to manipulate the DOM before any user interaction occurs, you would have to do it in the compile function. This is, for example, how ng-repeat creates many copies of an element. The link function then runs after the DOM has been built. You can still manipulate the DOM but only by reacting to events. The reason that the functionality is divided has to do with how Angular is converted into the DOM. When an application starts up, the HTML is searched for directives and those directives are registered and interpreted during the compile phase which is when the compile function is run. This helps to create the DOM, which is why up-front DOM manipulation has to go here. The link function then simply adds JavaScript actions and processing to the DOM elements after the fact.   If you want to get a better understanding of directives, this two-part Sitepoint post is worth bookmarking. It's been enormously helpful and I still reference it when I need to build directives. Hope this was helpful!"
angularjs,3do0m1,rsh412,1 point,Sat Jul 18 03:40:06 2015 UTC,"Thank you... my original background is in numerical/computational programming, so I do struggle with some of the best practice philosophies like MVC.  So stuff like this is very helpful."
angularjs,3do0m1,RICHUNCLEPENNYBAGS,1 point,Sat Jul 18 16:05:42 2015 UTC,"If you're interested, the difference between the compile and link functions in a directive is that the compile function is run before the DOM is constructed. If you have to manipulate the DOM before any user interaction occurs, you would have to do it in the compile function. This is, for example, how ng-repeat creates many copies of an element. The link function then runs after the DOM has been built. You can still manipulate the DOM but only by reacting to events. The reason that the functionality is divided has to do with how Angular is converted into the DOM. When an application starts up, the HTML is searched for directives and those directives are registered and interpreted during the compile phase which is when the compile function is run. This helps to create the DOM, which is why up-front DOM manipulation has to go here. The link function then simply adds JavaScript actions and processing to the DOM elements after the fact.   This part is like, needlessly hard to understand from the docs but it's a really important point."
angularjs,3do0m1,RICHUNCLEPENNYBAGS,1 point,Sat Jul 18 17:22:24 2015 UTC,"Lets say I have a button on page - perhaps in a directive with an isolated scope. And I want the background to transition to a random color when the button is clicked. Am I expected to wrap the background div in a directive, put the transition in the link function... and then broadcast the click event into the directive? That seems cumbersome.   Uh, no, man.  You're giving your directives templates, right?  You can just use other directives.    If you're creating reusable components, you probably want an isolate scope.  So imagine something like this:  myApp.directive('myDirective, [ function() {   scope: {},   compile: {     return {       post:  function(scope)         {            scope.isGreen = false;            scope.setGreen = function() {scope.isGreen = true;}          }     }   } } ]   And then in your template, just do something like this  <button type=button ng-click=""setGreen()"">Make the other button green</button>  <button type=button ng-class=""{'green': isGreen}"">In your app this probably does something</button>   I typed this out in the comment box so I'm sure there are a couple errors but does this help?  As for why you don't want to manipulate the DOM in controllers, it's a nightmare to test and it's giving the controller responsibilities it doesn't need that you then need to debug everywhere you want to do that.  Nothing will blow up if you do it but you're likely to regret it later.  Angular is meant to be declarative.  edit:  OK, sorry, I should have read more closely... you want to set the background color of the page, not another button (not sure where I got that). I'll leave this here in case it's useful anyway."
angularjs,3do0m1,RICHUNCLEPENNYBAGS,1 point,Sat Jul 18 00:54:35 2015 UTC,"Firstly, thank you for your response.    Per your edit - when manipulating the background through a scope variable.  Should I make the background into a directive, so that I can do the transition in its link function?"
angularjs,3do0m1,thlem,1 point,Sat Jul 18 15:52:56 2015 UTC,"It's an option, but I don't think you need to.  You can simply use the built-in ng-class directive.  The big thing is getting something into the background's scope that it can look at.  You could reach up into parent scopes, you could use the root scope, or you could broadcast an event.  Or you could just create a service that both the controller containing your body and your directive depend on (actually this might be the easiest/best approach)."
angularjs,3do0m1,RICHUNCLEPENNYBAGS,0,Sat Jul 18 17:14:35 2015 UTC,"Hey, first i am not an expert . Directive allow you to manipulate the DOM (it doesn't allow you to change the dom). This is not the job of the controller to manipulate the DOM. Keep your architecture clean, i don't know if there is performance issue, but it will be more maintainable. From angularjs.org :     Do not use controllers to: * Manipulate DOM — Controllers should contain only business logic. Putting any presentation logic into Controllers significantly affects its testability. Angular has databinding for most cases and directives to encapsulate manual DOM manipulation. * Format input — Use angular form controls instead. * Filter output — Use angular filters instead. * Share code or state across controllers — Use angular services instead. * Manage the life-cycle of other components (for example, to create service instances)."
angularjs,3dnmoc,jetblackgreen,2,Fri Jul 17 19:07:37 2015 UTC,"You need html 5 for this and contenteditor attribute.  There are numerous editors already out there in angularjs.. Pasting will kind of work with minimal effort until you get to the clipboard, but its fairly easy."
angularjs,3dnmoc,ihavenofriggenidea,0,Sat Jul 18 02:16:30 2015 UTC,Could you point me to some? A quick google search returned a lot many of them and I am confused which one to follow.
angularjs,3dnmoc,pandavr,1 point,Sun Jul 19 10:00:29 2015 UTC,In angular you may find some good html editors: - AngularJSFormBuilder - cse112AngularFormBuilder  You also have some dashboard editors: ADF Widgets Registry I have implemented a widget for ADF that use the textAngular WISIWYG editor. But I didn't have the time to contribute it.   These are the option you have that I'm aware of. If someone have other alternatives it would be nice to know.  I hope this could fit your requirements in some way.
angularjs,3dnmoc,yarhouse,1 point,Sun Jul 19 10:21:50 2015 UTC,"Your drag & drop widget functionality sounds similar to a project I'm working on as well. I'm using textAngular for my text editor widget and its been superb. Its pretty customizable if you know what you are doing, too."
angularjs,3dmrq6,sammib15,3,Fri Jul 17 15:14:39 2015 UTC,I'm still at the Junior level. One of these days...
angularjs,3dmrq6,bjpcjp,2,Fri Jul 17 16:42:59 2015 UTC,Don't rush yourself! happy cakeday!
angularjs,3dltmj,krumoksnis,5,Fri Jul 17 08:52:20 2015 UTC,The Angular team already has Gitter for these type of questions: https://gitter.im/angular/angular
angularjs,3dltmj,youngroger,1 point,Fri Jul 17 09:07:09 2015 UTC,"Thank you for mentioning. Not everyone uses Gitter, though."
angularjs,3dltmj,Have_you_tried_this,2,Fri Jul 17 09:08:01 2015 UTC,I wonder if #angularjs2 might be a more sensible name.
angularjs,3dltmj,Foxandxss2,1 point,Fri Jul 17 10:00:48 2015 UTC,"It would need to be ##angular2 following the Freenode guidelines (https://freenode.net/policy.shtml#channelnaming). That said, in the long term angular2 will become a standard and everyone will be calling it just ""angular""."
angularjs,3djy23,fuczak,3,Thu Jul 16 21:44:06 2015 UTC,Trying to get a job as a Junior Web Dev so I figured I should make something to expand my portfolio. What do you think? Any glaring mistakes? Works best in Chrome.  You can play notes using your keyboard.
angularjs,3djy23,gatman02,2,Thu Jul 16 21:45:24 2015 UTC,"That's pretty sweet. At first I thought it didn't work because I was clicking the keyboard and nothing was happening. Obviously a better experience your computer keyboard anyway, but maybe notify a person if they click the keyboard that they can use the keys xyz.. for playing."
angularjs,3djy23,buttonkop666,1 point,Fri Jul 17 02:56:28 2015 UTC,That's a great idea!
angularjs,3dib2s,zefcfd,8,Thu Jul 16 14:30:23 2015 UTC,You will need to hire Victoria to organize the AMA part.
angularjs,3dib2s,fundieInAChainWax,1 point,Thu Jul 16 15:34:32 2015 UTC,"How would I even get ahold of her? It's much more complete and scalable than Voat, so I think she'd be interested if she still wanted to moderate"
angularjs,3dib2s,dbbk,3,Thu Jul 16 16:41:11 2015 UTC,How would you plan on paying her?
angularjs,3dib2s,Vordus,2,Thu Jul 16 19:14:24 2015 UTC,Does it have the extra features voat has. That was a huge reason people took to that site and not others
angularjs,3dib2s,jimschubert,1 point,Thu Jul 16 23:24:24 2015 UTC,"I want to say absolutely, but just be clear what exactly are you referring to"
angularjs,3dib2s,0x2a,1 point,Fri Jul 17 00:27:34 2015 UTC,/u/chooter is her I think.
angularjs,3dib2s,Narcicyst,4,Fri Jul 17 02:03:41 2015 UTC,"What's your plan for the infrastructure? If this gets only a small precentage of reddit's traffic the bandwidth/servers will rack up a huge bill in no time, won't they?   Unless of course you have some p2p backend, that would actually be cool as hell."
angularjs,3dib2s,ambewas,0,Thu Jul 16 19:17:23 2015 UTC,I work on service oriented rails apps for a company that serves millions of requests per day. The tech is pretty scalable so I'm not too worried about
angularjs,3dib2s,ambewas,7,Thu Jul 16 22:26:52 2015 UTC,But.... who pays for it?
angularjs,3dib2s,hillmanov,0,Fri Jul 17 01:25:10 2015 UTC,"There will be ways to support the site, similar to reddit. An extremely cheap subscription that will unlock power user features, real time feeds, etc... is what I have planned. Reddit users will pay for a great alternative to reddit. Voat had donations pouring in, and I think its a pretty ad-hoc reddit clone. If someone does it right, and offers a legitimate means to support the site, running costs wont be an issue.  I have the means to pay for it in the interim until the community support catches on."
angularjs,3dib2s,PostHumanJesus,3,Fri Jul 17 20:26:07 2015 UTC,Definitely interested to contribute! Let me know once you're ready for any pull requests.  A few questions:   What's your plan on keeping this thing running? How will you cover server costs/monetize?  What are you planning on doing differently than what Reddit is now?  what's running in the back end ?
angularjs,3dib2s,DangKilla,1 point,Thu Jul 16 19:37:17 2015 UTC,"These are huge questions, and trust me when I say that you're asking precisely the same questions I asked myself while developing the core features. Give me about a week, and Ill have the open source code up so you can check it out. I'll collect the username's in this thread and send out a PM for you to check it out."
angularjs,3dib2s,PandemoniumX101,1 point,Fri Jul 17 20:28:04 2015 UTC,"Ok cool, looking forward to it!"
angularjs,3dib2s,T-rex_with_a_gun,2,Sat Jul 18 10:56:57 2015 UTC,I'm interested! Pm the repo when you can.
angularjs,3dib2s,swordd,1 point,Thu Jul 16 16:34:02 2015 UTC,will do!
angularjs,3dib2s,general_landur,1 point,Thu Jul 16 17:06:57 2015 UTC,Sounds rad. Pm me the github when ready.
angularjs,3dib2s,fahizzled,1 point,Thu Jul 16 15:15:57 2015 UTC,will do!
angularjs,3dib2s,BBQLays,1 point,Thu Jul 16 15:22:19 2015 UTC,Same.
angularjs,3dib2s,Seus2k11,1 point,Fri Jul 17 14:24:53 2015 UTC,"Interested in just to see how you are handling some aspects.  I also know someone who is junior angular developer and would like some open source experience, if you are interested."
angularjs,3dib2s,BaliCoffee,1 point,Thu Jul 16 16:21:42 2015 UTC,"will do, plenty of little things to do for junior guys as well"
angularjs,3dib2s,cjthomp,1 point,Thu Jul 16 17:06:50 2015 UTC,put it on GH. i will help
angularjs,3dib2s,PhoenixAwoken34,1 point,Thu Jul 16 17:36:15 2015 UTC,Also interested. Developed two mid-scale angular intranet applications. Maybe i can help.
angularjs,3dib2s,jacalata,1 point,Thu Jul 16 17:53:58 2015 UTC,Would be very interested in checking this out! Is it on GH? Where are you hosting?
angularjs,3dib2s,migpok35,1 point,Thu Jul 16 17:54:36 2015 UTC,Probably will be hosted on aws or some derivative of it. And yes it'll be on github in the next week or so :D
angularjs,3dib2s,mchandleraz,1 point,Thu Jul 16 23:02:17 2015 UTC,"Hey I'd be interested as well. I have some experience with Angular (more PHP/Laravel) but I'm currently a BA, so I can help with some of the documentation and BA side of things.  Also, are you planning on having a Slack or Gitter?"
angularjs,3dib2s,q00p,1 point,Thu Jul 16 18:10:54 2015 UTC,here you go! https://gitter.im/chutterbox/chutter
angularjs,3dib2s,w4rtortle,1 point,Mon Jul 20 16:53:22 2015 UTC,I'd be interested in taking a look at the code and open issues you have to see if I can contribute. When do you think you'll have it open sourced? Assuming it'll be on GitHub?
angularjs,3dib2s,PurdueKenny,1 point,Thu Jul 16 18:14:13 2015 UTC,"Yep that'd be great, it'll probably be within the next week or so"
angularjs,3dib2s,kaeku,1 point,Thu Jul 16 23:03:02 2015 UTC,What is the API built in?
angularjs,3dib2s,McSick,1 point,Thu Jul 16 18:40:32 2015 UTC,"Rails api ( stripped of any templating engine / unnecessary bulk) persistence layer is in PostgreSQL, but the main secret sauce is the redis clusters and the way they're being used"
angularjs,3dib2s,axs221,1 point,Thu Jul 16 22:28:25 2015 UTC,"How do you plan to scale rails? Reddit seems quite realtime to me, without much benefit from caching. I run a rails site that gets 300M pageviews a month and varnish is the only saving grace. I really am starting to use Go for everything"
angularjs,3dib2s,cport1,1 point,Fri Jul 17 04:56:10 2015 UTC,"Really shocked you didn't say Java, Go, or Node.  Have you done any load testing?"
angularjs,3dib2s,thenumber24,1 point,Fri Jul 17 19:22:32 2015 UTC,"Re load testing: Yes I've done load testing and I think I'll be more than fine. I'm sure there will be issues, everyone has them. But there is a very small likelyhood of hours/days of downtime (like voat). I believe rails is scalable, lots of apps far bigger than mine are built upon rails to some degree.   Re java: I've actually built it with the expectation to move to the jvm if things become an issue scaling wise. I'm assuming you know already why I would do that, but for anyone that doesn't: MRI has a global interpreter lock which makes parallel threading impossible. With jruby, you get paralellism. Aside from that - as well as native support for some great java libraries, I don't see why I'd need to move to jruby just yet. It may be something I do in production, but I just cant justify sinking time into that when I think it would have a relatively low speedup factor.  Re go lang / node: I wrote upbeat (see post description) in node.js. It's horribly impractical for an application like this. Same with go lang. Go is great, but isn't the right fit. It has some interesting features that I might leverage in the future. That being said, any use of node.js or go lang would be for ancilary services only. If I find api endpoints that really arent scaling well due to long processing time (which so far I don't have any cases of, becuase of how much I'm using redis and queuing any writes that aren't absolutely critical) then I might break those out into a separate service.   just my two cents"
angularjs,3dib2s,jarekb84,1 point,Fri Jul 17 20:14:19 2015 UTC,"Im currently working  with angular materials on another front end that has a similar fuctionality, could lend my hand."
angularjs,3dib2s,DoNotLookDown,1 point,Thu Jul 16 19:12:05 2015 UTC,"I'm interested, I used to work on a decently sized angular app in my last job and want to keep my hand in."
angularjs,3dib2s,ogmonster,1 point,Thu Jul 16 21:40:16 2015 UTC,Heck yes please
angularjs,3dib2s,lostinstl,1 point,Thu Jul 16 21:50:59 2015 UTC,"I'm interested. Not too strong on Angular yet, but I'm a UX developer working for a SaaS company on a big app."
angularjs,3dib2s,RICHUNCLEPENNYBAGS,1 point,Thu Jul 16 22:12:05 2015 UTC,"Looks good. Like others, pls pm when ready!"
angularjs,3djyje,abyx,3,Thu Jul 16 21:48:00 2015 UTC,"obligatory ""face"" comment"
angularjs,3djyje,ctanga,1 point,Fri Jul 17 16:05:38 2015 UTC,Just checking if anyone's paying attention.
angularjs,3djyje,sathoro,5,Fri Jul 17 19:44:06 2015 UTC,"Hmm, I'm honestly a big fan of $resource. It provides just enough abstraction that there is really not much to learn but is more convenient than $http. Generally I can create a model and API endpoint and then a couple lines with $resource gives me a nice client side API to interact with the server. I once worked on a project with Restangular and found it abstracted a little too much and was cumbersome."
angularjs,3djyje,drinksta,1 point,Fri Jul 17 06:01:52 2015 UTC,I use $resource too. I've always why PUT and PATCH are not predefined methods?
angularjs,3djyje,ctanga,2,Fri Jul 17 15:33:39 2015 UTC,"I like Restangular's way of building paths for child objects.  I usually put my Restangular .all() .one() calls behind a service facade, however."
angularjs,3djyje,elktamer,1 point,Fri Jul 17 16:08:58 2015 UTC,That's a good move IMO. Letting those special objects loose in the code base makes me uneasy.
angularjs,3djyje,gonzofish,1 point,Fri Jul 17 19:44:46 2015 UTC,Is there a demo app that uses restangular with a one to many relationship?
angularjs,3djyje,budmademewiser,1 point,Fri Jul 17 17:34:43 2015 UTC,I like your conclusion!
angularjs,3djyje,RICHUNCLEPENNYBAGS,1 point,Fri Jul 17 01:31:42 2015 UTC,Best practice in the angular community is a combination of $http and $q.
angularjs,3djyje,budmademewiser,1 point,Fri Jul 17 16:27:13 2015 UTC,"Uh, according to whom?"
angularjs,3djyje,RICHUNCLEPENNYBAGS,2,Sat Jul 18 02:04:45 2015 UTC,"According to the angularJS team, egghead.io, angularUI team, and anyone who's used angular extensively for over 2 years."
angularjs,3djyje,budmademewiser,1 point,Sat Jul 18 03:08:50 2015 UTC,When did the AngularJS team recommend against it?
angularjs,3djyje,RICHUNCLEPENNYBAGS,2,Sat Jul 18 03:29:54 2015 UTC,"Many times. Can't recall anything specifically but I've heard/read it multiple times - from Igor, John Linquist, and other prominent angular contributors. Anyone who's used angular for >6 months in a professional environment should probably come to the same realization."
angularjs,3djyje,budmademewiser,1 point,Sat Jul 18 03:33:29 2015 UTC,It's just not really obvious to me what's so wrong with it.  I've been using Angular longer than that.
angularjs,3djyje,RICHUNCLEPENNYBAGS,1 point,Sat Jul 18 03:51:44 2015 UTC,"Ya I mean to each their own for sure, if you're comfortable with it and it works for you keep doing it. You will eventually run into issues though with the amount of abstraction $resource has and will be forced to user $http or some other http service/module at a lower abstraction level."
angularjs,3dkju0,angularlover,1 point,Fri Jul 17 00:41:20 2015 UTC,"I can't speak to the performance as a lot of factors play in and this methodology can be performant or not depending on those factors. What I will say is that this is the most future-proof way to develop and will make porting your code to Angular 2 or other frameworks easier. Directives should, for the most part be the lifeblood of your application.   I haven't used standalone controllers for about a year. Between directives and states (with ui-router), all my V and C needs are met. This is actually pretty common practice and is suggested behavior in the John Papa style guide, which advocates against controllers except when tied to directives."
angularjs,3dkju0,one800higgins,1 point,Fri Jul 17 15:25:03 2015 UTC,"are you using directives for managing views too? is this possible and better than using controllers?  right now I'm using one controller for every view, and every single component has its own directive"
angularjs,3dkju0,m3l7,1 point,Fri Jul 17 16:26:11 2015 UTC,"I'm not, well I guess I technically am since I'm using ui-router to create state management out of a directive.  However, if I were to use ngRoute again, I'd use directives for views for future compatibility reasons alone."
angularjs,3dkju0,one800higgins,1 point,Fri Jul 17 16:40:01 2015 UTC,http://teropa.info/blog/2014/10/24/how-ive-improved-my-angular-apps-by-banning-ng-controller.html
angularjs,3dkju0,simpixelated,-1,Fri Jul 17 14:27:08 2015 UTC,"I'm not an expert by any means, but wouldn't it make sense to use a different framework? The way you're thinking is more like React."
angularjs,3dkju0,MyronLatsBrah,1 point,Fri Jul 17 06:26:23 2015 UTC,"Listen here pal, I'm an Angular lover, not a React lover! (just kidding)        Yeah, I was thinking the same too. I was thinking why am I using Angular if I am so gung-ho about component-izing everything. I guess I was just trying to prepare myself for the upcoming Angular2 release."
angularjs,3dkju0,m3l7,1 point,Fri Jul 17 11:57:40 2015 UTC,The way he is thinking is like a design pattern. Not like a framework. And angular directives are good enough
angularjs,3dkju0,one800higgins,1 point,Fri Jul 17 14:35:41 2015 UTC,"What he's describing is actually what is prescribed by most modern frameworks, including Angular2. It's also what people have been saying in popular Angular style guides for at least a year."
angularjs,3dm8a7,savynic,2,Fri Jul 17 12:16:25 2015 UTC,There is never a silver bullet and nothing is truly superior.  It is about using the right tool for the right job and understanding the advantages and disadvantages of each framework or language.  A circle jerk over a framework or language is a waste of time.
angularjs,3dm8a7,PandemoniumX101,1 point,Sat Jul 18 00:58:48 2015 UTC,i appreciate your point PandemoniumX101!
angularjs,3dm8a7,one800higgins,1 point,Mon Jul 20 13:20:49 2015 UTC,It's not a pissing match...
angularjs,3dm8a7,one800higgins,-2,Fri Jul 17 12:33:01 2015 UTC,Hey!   i have included angularjs tag with this article. The article is all about angular-js framework! Tell me if there is any issue with this.
angularjs,3djahi,pandavr,1 point,Thu Jul 16 18:51:42 2015 UTC,Wat?
angularjs,3djahi,dontera,1 point,Thu Jul 16 19:30:54 2015 UTC,Angular Dashboard Framework Widget Registry is a registry for the widgets of Angular Dashboard Framework. The ADF is a framework allowing to easily build interactive dashboards composed of  widgets. You can find a demo here. It's a nice project.
angularjs,3djahi,KumbajaMyLord,1 point,Thu Jul 16 20:13:51 2015 UTC,"You might want to take a moment to proofread. There are only 3 paragraphs of text on the site and there is at least one grammatical error or spelling mistake in each of them. Regardless of the qualit of the ADF or the widgets posted on your registry, this looks very sloppy and makes me not want to look into it."
angularjs,3djahi,KumbajaMyLord,3,Thu Jul 16 21:53:18 2015 UTC,"Please, mind that not everyone in the word is a native speaker. Anyway, thank you for your comment I will try to find those errors out.   Regardless of the qualit   :)"
angularjs,3deq19,SomeRandomBuddy,12,Wed Jul 15 18:15:39 2015 UTC,You could create a transparent overlay element that is placed above all other ui elements and use ng-hide and a service to enable it during http requests.  I find this is easier than individually disabling elements and managing the controller variable for when it should be disabled or not.
angularjs,3deq19,tbugrara,3,Wed Jul 15 18:55:26 2015 UTC,"Adding pointer-events:none to the <body> would also work, might even work better than a transparent overlay."
angularjs,3deq19,leptons,5,Thu Jul 16 03:16:41 2015 UTC,"Both these solutions still allow keyboard commands to hit your app.  Use ng-disabled as mentioned by /u/utuxia.  to shorten, wrap the fields you're worried about the user hitting in a fieldset:  <fieldset ng-disabled=""isSaving""> ... inputs ...</fieldset>"
angularjs,3deq19,Karmafia,1 point,Thu Jul 16 04:12:24 2015 UTC,"Awesome, didn't know that existed!"
angularjs,3deq19,tbugrara,12,Thu Jul 16 03:36:08 2015 UTC,"usually I would do something like this:  <button ng-disabled=""isLoading""> and set a flag $scope.isLoading to true when you send an $http request...and set it back to false when the response comes back."
angularjs,3deq19,utuxia,1 point,Wed Jul 15 22:57:37 2015 UTC,+1
angularjs,3deq19,PEi_Andy,5,Thu Jul 16 01:58:28 2015 UTC,I once read about this httpInterceptor method. You could try searching for how to make angular spinners with httpInterceptor.
angularjs,3deq19,general_landur,1 point,Wed Jul 15 18:54:15 2015 UTC,"Yep, I vote for this method"
angularjs,3deq19,rbelmega,1 point,Wed Jul 15 19:01:44 2015 UTC,"I have used this multiple times.   You want to keep a tally of requests, so request => +1, response => -1. Broadcast lock message (or alter service – I think I've done it that way too) if tally > 0."
angularjs,3deq19,project2501,2,Thu Jul 16 02:04:40 2015 UTC,"Make a loading variable in your scope, and set it to true when the $http starts, then when the promise finishes, inside of your callback set that variable to false. You can use ng-hide or ng-if to hide your DOM elements or ng-disabled as well.  Example Plunker"
angularjs,3deq19,mbsurfer,1 point,Wed Jul 15 18:38:27 2015 UTC,Yeah that's what I usually uses! hey mb ;)
angularjs,3deq19,Aesdotjs,1 point,Thu Jul 16 14:32:20 2015 UTC,"We're building an app with multiple parent/child relationships which all have to prepop from various sources (services, entity framework etc.).  Friend of mine just used the $rootScope to add a loading screen  today.  I'll update with more details tomorrow at at work if you still need it."
angularjs,3deq19,Ishaz,1 point,Wed Jul 15 19:07:22 2015 UTC,"could use an http interceptor to set a flag for all requests and display an overlay.   Thing is - Angular apps can be rather noisy with HTTP requests, and having templates load/etc could also trigger that flag.   IMO - better to go with a more granular approach."
angularjs,3deq19,e82,1 point,Wed Jul 15 19:25:20 2015 UTC,I suggest using an interceptor to handle these things  You can read about it here. They're super easy to make
angularjs,3deq19,trunked,1 point,Thu Jul 16 08:52:57 2015 UTC,I use BlockUI for that sort of thing.
angularjs,3deq19,callmejay,1 point,Thu Jul 16 12:00:59 2015 UTC,Perhaps ladda button would solve your problem
angularjs,3deq19,Chemical_Scum,1 point,Thu Jul 16 13:41:46 2015 UTC,"Depends. Don't ask a question without describing what you want to do. I assume you want a kind of multi-click protection? In this case, you should note, that while this is possible on the client-side, it is not sufficient, you will need to implement a flooding protection on the backend.  It should be simple to implement this by setting a flag:  ng-disabled=""isActive""   Which is set in your controller:  if (isActive) return $q.defer().promise; isActive = true;  return $http.something(...)     .finally(function() {         isActive = false;     });   I didn't test it, but you should get the idea."
angularjs,3deq19,wordsoup,2,Wed Jul 15 18:36:54 2015 UTC,"Be careful returning $http(...).finally(), since it strips out the $http-specific success and error callbacks.  One option is to do something like this:  let httpPromise = $http.something(...); httpPromise.finally(() => isActive = false); return httpPromise;"
angularjs,3deq19,OverZealousCreations,1 point,Wed Jul 15 19:28:51 2015 UTC,"Yeah, don't cling to those. They'll go the way of the dodo in the foreseeable future: https://github.com/angular/angular.js/pull/12112"
angularjs,3da3fe,gdi2290,2,Tue Jul 14 18:01:24 2015 UTC,"oh damn, perfect timing! i needed to jumpstart my familiarity with angular 2. btw i'm guy from the bart a couple of days ago out in oakland! can't wait to check this out."
angularjs,3da3fe,fahdsheikh,1 point,Wed Jul 15 10:50:54 2015 UTC,"kool, yeah ping me on gitter if you have any questions"
angularjs,3da3fe,tarthon2,2,Wed Jul 15 20:43:43 2015 UTC,Why webpack instead of JSPM / SystemJS?
angularjs,3da3fe,ogrechoker,1 point,Wed Jul 15 13:11:31 2015 UTC,performance and practical reasons
angularjs,3da3fe,guybedford,1 point,Wed Jul 15 20:43:16 2015 UTC,"I'd like to hear these reasons, as I find jspm to be the superior alternative since it's also a ES6 module polyfill."
angularjs,3d9dyf,jaymz58,6,Tue Jul 14 15:03:30 2015 UTC,"jsPDF creates PDFs in Javascript. I am using it, its working fine!"
angularjs,3d9dyf,redyar,1 point,Tue Jul 14 15:54:36 2015 UTC,"Thanks, looks pretty simple. I'm looking for something that would do a few different formats but I'll keep this bookmarked."
angularjs,3d9dyf,redyar,1 point,Tue Jul 14 17:27:48 2015 UTC,you can change the format with jsPDF.
angularjs,3d9dyf,yesman_85,4,Tue Jul 14 17:29:02 2015 UTC,"Using SheetJS for excel, it's pretty powerful: https://github.com/SheetJS/js-xlsx"
angularjs,3d9dyf,bhannman_,1 point,Tue Jul 14 18:40:16 2015 UTC,"Agreed. Being able to both import and export to/from different versions of Excel (+ odf, csv, tsv, etc) is very nice."
angularjs,3d9dyf,Tetraflexagon,1 point,Tue Jul 14 23:23:33 2015 UTC,"Looks promising but the site seems to be down, can't find the documentation so I'll have to look into it later. Thanks!"
angularjs,3d9dyf,james_bell,2,Wed Jul 15 13:12:30 2015 UTC,"I think you'll be better off finding one library for each format (to use as an Angular service) instead of a single library to handle all of them.  I've used pdfmake to render tables in pdfs. What I liked about it is you just need to format a javascript object containing all of your data to pass in, instead of html or having to call a bunch of API methods. But if you already have your tables in html and not structured in js, then it would be more difficult."
angularjs,3d9dyf,shytelord,1 point,Tue Jul 14 18:05:20 2015 UTC,Really like pdfmake; thanks for the lead.
angularjs,3dau6a,EnigmaticCode,3,Tue Jul 14 21:02:32 2015 UTC,"How are you creating your html files? Are you using nodejs with express & swig Or PHP?   You can do something like  index.php  <head>     ...     <script type=""text/javascript"">         var config = <?php              print( 'hello world!!! Here you can use PHP to read in config.json and print it here?' )         ?>     </script>     ...   </head>  now config is available with $scope.config in your javascript.  or you can use cachefactory"
angularjs,3dau6a,Dark_Cow,1 point,Wed Jul 15 00:02:10 2015 UTC,Java is used for the API and html.
angularjs,3dau6a,buttonkop666,3,Wed Jul 15 13:12:14 2015 UTC,"What I do is leverage my build process to transform my configs into an angular constant, and just inject it where needed."
angularjs,3dau6a,e82,3,Wed Jul 15 03:37:01 2015 UTC,"As part of your build process, can inject the config into your page  If you only need the config in controllers - could make use of the resolve on your routes and inject it there Deal with getConfig().then(.... all over - annoying, but nature of async Manually bootstrap your angular app, but only after making an ajax request to the JSON file and putting it into a global/variable on the window - but still be a good idea to wrap it into an angular service to inject it where needed"
angularjs,3dau6a,cport1,2,Wed Jul 15 11:25:45 2015 UTC,Could you store it in indexeddb?
angularjs,3dau6a,schizoduckie,2,Wed Jul 15 01:24:42 2015 UTC,"I have explicitly chosen not to go this route because of the problem you describe.  I store my user settings in either localstorage, or chrome synced storage, An HTTP request is just too slow to act upon on app boot, since I also need my settings in templates and didn't want to introduce a promise-wait timer.  This is my current implementation, if you're looking for more info on how that could work"
angularjs,3dau6a,mourning_air,1 point,Wed Jul 15 06:26:20 2015 UTC,I would recommend the manual bootstrap method. More details here: https://blog.mariusschulz.com/2014/10/22/asynchronously-bootstrapping-angularjs-applications-with-server-side-data
angularjs,3ddqic,fightmediocrity,1 point,Wed Jul 15 13:53:31 2015 UTC,when will this course be available? It's showing August 15th on the gumroad page
angularjs,3d79tg,thlem,1 point,Tue Jul 14 01:56:55 2015 UTC,"cool that you share your stuff!  i got some remarks tho:   the code is not very the angular way. this link will explain lots of wha it's about in bower.json you should put the file(s) that will be needed by other projects by tools like wiredep you could add a dist folder where you concatenate all files to 1 file by a build tool of your choice (grunt, gulp, ...). so IIFEs only have to be applied once"
angularjs,3d79tg,zwacky,1 point,Tue Jul 14 11:26:47 2015 UTC,"Thanks a lot,  * for the 3rd point, you mean I have to push the minimified code in git repo ? Something like : -Repo --src ---js (all my .js files) ---css (all my .css files) --dist (all minimified/concatenate files)  * I didn't know wiredep, it's cool !  * I will read the angular way entirely but if you can point some points that are bad it would be cool :)."
angularjs,3d79tg,zwacky,1 point,Tue Jul 14 12:07:18 2015 UTC,"yeah, just out of convenience offer a bottom-nav.js and bottom-nav.min.js. so people can decide which to use, if they don't use wiredep. this you'll usually do with a task in grunt or gulp.  angular way: you don't modify the dom inside your directive or controller directly. you change the variables (in ctrl/directive) that change the dom (in html)."
angularjs,3d79tg,zwacky,1 point,Tue Jul 14 14:03:00 2015 UTC,"Hey, some updates on the module with your remarks. Thank you again. Is there a way to share and see modules of developers like us ? I make search about it but no good answers (or not the good question !)."
angularjs,3d79tg,jaymz58,1 point,Wed Jul 15 00:44:28 2015 UTC,you can find lots on bower package search.
angularjs,3d62f0,AlGoreBestGore,2,Mon Jul 13 20:26:08 2015 UTC,"We've run into this exact issue with some of our larger projects when they hit around 700+ tests. PhantomJS 1.x has an issue with garbage collection between tests.  We solved it by switching the test runner to Chrome.   If you have OSX or unix, or feel like messing about with npm packages, you can also try switching to PhantomJS 2 which has the memory issue fixed. Problem is the PhantomJS 2 npm package doesn't work on windows :(  Lastly, you can also get around this by splitting your unit tests up into different gulp/grunt tasks, batching up the tests. This will restart the test runner each time. Effectively giving you a manual garbage collection.  I'm keen to see if there are any other work arounds out there. :)"
angularjs,3d62f0,liquid_cow,2,Mon Jul 13 21:05:14 2015 UTC,"Actually I managed to install and run PhantomJS 2 on Windows. No leaks so far! Are you aware how stable it is (I think its in alpha/beta)?  I was also considering trying SlimerJS, its like Phantom but it runs on Gecko."
angularjs,3d62f0,liquid_cow,1 point,Mon Jul 13 21:12:19 2015 UTC,"Tbh I gave up on getting PhantomJS to work on Windows for the moment because of it not cleanly installing on our continuous integration server. That was a good few weeks ago though, so I should maybe have another look.   I can't really comment on stability, since I've only used PhantomJS 2 under OSX for a tiny project. :)"
angularjs,3d62f0,liquid_cow,1 point,Mon Jul 13 21:21:36 2015 UTC,"Slimerjs looks good, I'll check it out some time. Thanks for pointing it out."
angularjs,3d73jq,FrontLoadedAnvils,5,Tue Jul 14 01:07:19 2015 UTC,"A few points:   You're saying ""too many"": how did you decide that's too many? How much is OK? Scopes themselves do not have a performance hit speed-wise - watchers are those who create speed issues. Scopes are regular JS objects essentially. Are you worried about having too many strings, too? Angular cleans scopes once the elements are no longer on screen. Just because you have a couple dozen scopes does not mean you have a memory leak. A leak means things stay there longer than they should. Do you see your app's memory use keep increasing with time and use for no reason?   Basically: I think you got the wrong impression mate. I don't see a problem here - a dozen scopes are no biggie.  EDIT: typo"
angularjs,3d73jq,abyx,3,Tue Jul 14 10:01:23 2015 UTC,"I'm not sure I'm understanding the problem without seeing the code. It seems you're using a directive that has it's own scope so yes, every instance of that directive will be scoped. This is quite common in Angular, and really JS in general since scope is for the most part just syntactic sugar for this. What's the problem?"
angularjs,3d73jq,one800higgins,1 point,Tue Jul 14 02:49:58 2015 UTC,I want to make sure that I don't use up too much memory on scopes I'm not using. I am generating a lot of instances of directives.
angularjs,3d73jq,one800higgins,3,Tue Jul 14 02:51:04 2015 UTC,"Do you have any basis to this or just general fear? Have you taken some heap snapshots that give you cause for concern? I ask because I have built massive apps with literally hundreds of directives, multiple concurrent states, and probably thousands of two-way binds at a time and I have yet to run into memory issues.   That's not to say you can't create memory leaks, but having a couple dozen scopes certainly won't do it."
angularjs,3d73jq,one800higgins,1 point,Tue Jul 14 02:56:51 2015 UTC,My app will be accessing a backend which will serve objects that I use to create directive instances to display to a user.
angularjs,3d73jq,one800higgins,1 point,Tue Jul 14 03:00:33 2015 UTC,Sounds like pretty standard fare.
angularjs,3d73jq,johnrbaur,1 point,Tue Jul 14 03:12:38 2015 UTC,"Still, I don't want to create a lot of empty scopes without cleaning them out somehow. Not sure how though."
angularjs,3d73jq,johnrbaur,1 point,Tue Jul 14 03:15:15 2015 UTC,"I think you're misunderstanding what scope is which is leading you to worry about this menial concept.    function blah () {   console.log(this); }   I just created a scope.   When Angular references scope, it's referencing the current instance of an object... i.e. this. Scope is the most meaningless term and has been a huge source of confusion for newbies to Angular. You'll find common Angular style guides advocating the controllerAs syntax which reduces confusion and creates more portability to your code as it ties controllers to common JS objects rather than this scope abstraction that is unique to Angular. All controllerAs does is allow you to bind directly to this and reference it through whatever name you want, which is all that scope is doing in the first place. It's more verbose to write, but it might help you out.  On that note, every single object created in JavaScript is a ""scope"". If you're worried about the couple dozen in your code, you should think about the thousands that went into making it so you could write code in Angular, or even ES5 in general.   Scope, or objects, don't create memory leaks. I can think of a dozen things you should worry about long before you worry about a couple dozen nearly empty objects that Batarang pointed out to you. I really suggest getting a better understanding of framework first."
angularjs,3d73jq,Ishaz,2,Tue Jul 14 15:51:37 2015 UTC,"From a quick look, the directive you're using contains an ng-repeat. Each element created by an ng-repeat has its own scope. This is normal, and angular will clean up the scopes when the element with the ng-repeat is destroyed."
angularjs,3d2mwc,WillCodeForFood13,7,Mon Jul 13 01:00:44 2015 UTC,"I suggest you look at the docs, since you already listed $http in your code:  https://docs.angularjs.org/api/ng/service/$http  In short, $http.get('whatever/url').success(function(){});  I suggest you look into $resource though which adds an abstraction layer on top of $http that is even easier to use and build robust API requests on top of."
angularjs,3d2mwc,one800higgins,6,Mon Jul 13 01:18:33 2015 UTC,"ngResource does help abstract your resources well, but I disagree with recommending it as an alternative to beginners who are struggling with basics. $http is more jQuery-like, and very straight forward, $resource brings up a lot of Angular-specific--and $resource-specific--questions.  It's useful to throw yourself in like that, but it isn't like resource is necessary to use an API. It forces a beginner to learn about providers, promises, and of course the still-rather confusing $resource documentation, and uri templating.  It's a good name drop, anyway. Beginners should know some next steps. But it mostly makes nice abstractions for intermediate users."
angularjs,3d2mwc,Switche,3,Mon Jul 13 12:07:33 2015 UTC,I personally skipped $http completely so it's my natural first step. However you make a very valid point.
angularjs,3d2mwc,one800higgins,1 point,Mon Jul 13 12:38:10 2015 UTC,"I jumped right in myself but it really harmed my productivity, bloated the learning curve. I didn't think I lacked the knowledge to tackle resource until I tried it. We always have a tendency to want to have and give the whole picture, so barebones advice became my preference.  For example, one wouldn't normally recommend API calls stay in the controller, but that's a design refactor more than a functional need. Moving that call to a provider  is a nice second step, then returning and consuming the promises, then refactoring with a resource.  I still think mentioning it all to beginners is important, as any best practice, but stressing it can throw beginners for a loop, I've found. Best to give working examples and advice with disclaimers, which I think we've done nicely in this conversation."
angularjs,3d2mwc,Switche,3,Mon Jul 13 17:12:21 2015 UTC,"The question has been answered here, but you should consider putting your API handlers in a service and exposing functions in it like getPersonInformation(), where that function returns an $http.get() promise, and then your controller will do something like myService.getPersonInformation(somePersonId).then(function(result){ activate(result); });  and then your activate(personInformation) function has all the controller's actual stuff in it (like setting $scope.personName = personInformation.name). Having an activate() function is considered best practices for AngularJS. Here's a great style guide: https://github.com/johnpapa/angular-styleguide#controllers"
angularjs,3d2mwc,KyleG,2,Mon Jul 13 04:38:55 2015 UTC,Angular has the $resource service built in. We use Restangular instead.
angularjs,3d2mwc,dylanyo,1 point,Mon Jul 13 01:06:58 2015 UTC,"yes, check Restangular."
angularjs,3d2mwc,rasparac,2,Mon Jul 13 16:22:02 2015 UTC,"$http.get('youraddress.com/APIRoute').success(function(returnItemData){$scope.items = returnItemData}).error(function(returnData) { alert(""The API call failed due to "" + returnData); }  Make sure you map your controller to your view appropriately."
angularjs,3d2mwc,acidiclove,1 point,Mon Jul 13 01:54:58 2015 UTC,others have pointed you to $http and $resource/restangular.  Here is an example of $http http://jsfiddle.net/ger103d1/2/
angularjs,3d2mwc,YuleTideCamel,1 point,Mon Jul 13 04:23:33 2015 UTC,Give restangular a go. We use it at work and love it
angularjs,3d2mwc,mcdngr,1 point,Mon Jul 13 06:07:40 2015 UTC,"To put content into {{item}} you'd do:  $scope.item = 'hello world';   Obviously, you'd put the result of your service into it instead of 'hello world' but you get the idea. Now, if you want to iterate over 'items' then do:  $scope.items = ['one','two','three'];   It needs to be an array. It can be an array of objects."
angularjs,3d2mwc,bonestamp,1 point,Mon Jul 13 06:43:35 2015 UTC,"You may want to do your api calls in your resolve of your router, so you don't run into async madness when other calculations rely on data from certain API calls."
angularjs,3d4fvn,lorthirk,3,Mon Jul 13 13:09:38 2015 UTC,"Other people have answered, but let me be clear about the question in the title:  Don't use 2.0. It's still under heavy development and changes rapidly  Use the latest stable version (currently 1.4.x) and have fun with that. It works (not an alpha version like 2.0), it will keep working (Angular team will support it for years to come).  You're hearing a lot about 2.0, but that just hype. I ranted quite a bit about this a couple of weeks ago."
angularjs,3d4fvn,abyx,2,Tue Jul 14 10:22:55 2015 UTC,Pretty clear :) Honestly i was kinda hoping something similar!
angularjs,3d4fvn,deeptime,2,Tue Jul 14 18:26:45 2015 UTC,"I was an Angular 1 early adopter at my company.  The v2 fiasco left me with some doubts, and I've since moved on to other projects that don't require a SPA framework.  That being said, if I was to make a new choice today about what to use, I'd at least consider Aurelia.  I don't have firsthand experience with this at the moment, but I've seen an interesting comparison between the two frameworks in which Aurelia seems to leverage more sensible default conventions and so requires less overall code."
angularjs,3d4fvn,mugen_kanosei,1 point,Mon Jul 13 18:50:29 2015 UTC,"Thanks for the input, I'll have a look at it."
angularjs,3d4fvn,wordsoup,1 point,Tue Jul 14 08:04:46 2015 UTC,"I don't think you'll have a problem there. I would also look at making your directives as reusable components if possible. I've only got a years worth of experience with JavaScript, but I think the hardest part is remembering the proper ways to do the type checking yourself. ES6 is just the latest version JavaScript and I don't think it adds static typing. Typescript and maybe coffeescript for that, but they both just get turned into plain old JavaScript. Not sure I can give an informed opinion on this one not using Angular 2. But 1.x will still be supported for awhile. You also should take into consideration browser support. Do you need to still support IE8? Then your stuck with angular 1.2.x. UI you have the Angular material design as well as Angular bootstrap, probably others. But it's not that hard to make your own. It's just html and CSS with a smidge of JavaScript to add some functionality. You can wrap those in directives to make them reusable.   As a final thing, the JavaScript runs client side so I would not rely on client side validation alone to protect you from malicious users. I would make sure there is proper server side validation of the inputs."
angularjs,3d4fvn,nnyegaard,1 point,Mon Jul 13 14:15:10 2015 UTC,"Thanks for your answers. However I still can't understand what should I do exactly in order to use TypeScript with Angular, should I decide to use it...  Another issue is that it will be really hard to get server side validations since my web server will be pretty low level. I'll see what I can come up with."
angularjs,3d3k1n,TheBeardofGilgamesh,2,Mon Jul 13 06:12:50 2015 UTC,"Just do it. It's not much of a hassle and it'll take no longer tahn 5 mins. You said youre familiar with ruby, go for that, otherwise im a really huge fan of node + express. It's very leightweight, dynamic, easy setup and use (imo).  If thats actaully a no go and the cors is the only issue youre encountering, you can enable cors in your broser settings, or even easier install a plugin that just adds cors.allow headers to all your request which. eg chrome plugin only use that in development and disable for real browsing (security issue), dont forget to test your app in the real final setup."
angularjs,3d3k1n,And7s,0,Mon Jul 13 09:49:24 2015 UTC,"I am a future fan of nodejs only wrote one app, but can't wait to abandon rails."
angularjs,3d3k1n,AlGoreBestGore,2,Mon Jul 13 18:23:40 2015 UTC,"Yes, you need to have a server if you're loading the partials from a templateUrl. Otherwise you can:  a) Inline it in JS  b) Inline it in HTML by wrapping it in a ""<script type=""text/ng-template"" id=""templateId.html"">"" and specifying the id as the templateUrl."
angularjs,3d3k1n,jimlei,1 point,Mon Jul 13 19:55:39 2015 UTC,"You should use a web server when developing web apps. Using rails you've probably just used the included ""rails server"". You can (should?) do the same when doing other development.  I don't want to mess up my local OS installation with lots of tools/server software, so I use Vagrant or Docker to run a virtual machine with all I need.  You are probably already using a build tool for your angular project. These have plugins to do what ""rails server"" does. If you're using Gulp you can just follow this http://www.browsersync.io/docs/gulp/ and then you're able to ""gulp-serve"" afterwards to get a web server running."
angularjs,3d3k1n,danielbsig,1 point,Mon Jul 13 06:41:53 2015 UTC,python -m SimpleHTTPServer 8080   assuming you've got Python 2.7 installed. Run this command from the folder which includes your index.html file.   EDIT: then you simply visit localhost:8080 in your browser. You can obviously pick any port number you like (8000 is commonly used).
angularjs,3d3k1n,Nightsparkle,1 point,Mon Jul 13 11:48:03 2015 UTC,"ok thanks, atleast I now know it infact does require a server to be running. This will save me lots of time. Thanks."
angularjs,3d31cd,mugen_kanosei,1 point,Mon Jul 13 03:07:51 2015 UTC,"Works as designed. LOL. IE, what a turd."
angularjs,3d16ys,ianveshi,6,Sun Jul 12 17:51:09 2015 UTC,"For folder structure, look for John Papa's guide on Github for Angular best practices (which includes a section for Application Structure). Moreover, I recommend using Gulp instead of Grunt (programmable and faster). For testing, their are some options like Protractor or Mocha. Pick one that suits your needs best. Need some help? Check out Pluralsight for very good videos on how to set up your workflow."
angularjs,3d16ys,NickyLenaers,3,Sun Jul 12 18:18:21 2015 UTC,"Protractor and Mocha are frameworks for e2e testing and unit testing, respectively, so you don't have to choose one or the other. Instead of Mocha, you could use Jasmine for unit testing."
angularjs,3d16ys,chazzlabs,2,Mon Jul 13 03:07:54 2015 UTC,"Regarding folder structure, in my latest Angular project I've found that using directives, and services to make directives communicate, helped me in making my app modular. Before using them I had just two huge controllers which handled everything. Here's the before and here's the after."
angularjs,3d16ys,fukkus,1 point,Sun Jul 12 23:03:54 2015 UTC,"that looks tidy, gj!"
angularjs,3d16ys,zwacky,1 point,Mon Jul 13 12:35:13 2015 UTC,I use something like this
angularjs,3d16ys,jellatin,1 point,Sun Jul 12 19:16:53 2015 UTC,"I'd suggest using Yeoman as a project generator, which provides grunt and jasmine as standard. With correct structure too"
angularjs,3d16ys,philhudson91,1 point,Mon Jul 13 17:12:15 2015 UTC,"Yeah I've read about that, but it's actually bit complicated. If I use yeoman without any prior experience with grunt I feel it will become much more difficult when I need to add a new plugin or such. Nevertheless, I've started using grunt from scratch (i.e. empty Gruntfile). Thanks."
angularjs,3d16ys,philhudson91,1 point,Tue Jul 14 02:59:15 2015 UTC,Actually I think it massively simplifies the process and doesn't make it harder to add it in later on. Each to their own :)
angularjs,3d16ys,krassik,1 point,Tue Jul 14 10:17:16 2015 UTC,"A little more information would be helpful. Do you have experience with any task runners? What does your non-angular build pipeline look like?  If you're starting from scratch, it might be worth paying the subscription and checking out something like http://www.pluralsight.com/courses/javascript-build-automation-gulpjs then taking what you learn there to create something that makes sense for you."
angularjs,3d3tyq,lazydeveloper_,6,Mon Jul 13 08:26:22 2015 UTC,"slowly learn this list one at a time https://github.com/gdi2290/ngExam (don't worry, most angular developers only know 30% of the list)"
angularjs,3d3tyq,gdi2290,1 point,Mon Jul 13 10:05:04 2015 UTC,"This is a pretty decent coverage and I'm somewhere around 80% but that is taking into account the following. If I focus only on actual angular questions I'm closer to 100%. The things I dislike about this are that questions that involve other frameworks, and the fact it focuses several questions that are clearly geared towards angular-ui. If those are removed and perhaps added to a separate set of exam questions and this one filtered down to just angular I think it would be golden. I will be using it to test hires going forward (albeit without angular-ui).  There should probably be a section on testing and how to test each, and what to test in each type of 'thing' (angular itself stole all the good words) that angular can provide."
angularjs,3d3tyq,AngularGuyPerson,1 point,Mon Jul 13 12:33:37 2015 UTC,"lol, what a joke: ""Do other frameworks use dependency injection if only intervally? ""  Newsflash: passing parameters to functions is Dependency Injection. If you write a function that takes a parameter, you're doing dependency injection. The magicy-schmagicky thing Angular does is Inversion of Control."
angularjs,3d3tyq,buttonkop666,0,Wed Jul 15 03:40:59 2015 UTC,I can answer every question in this list and I still have daily struggles with angular due to the way this company uses it. Everything is easy until you actually get into a workplace and sit down to do this stuff.
angularjs,3d3tyq,w4rtortle,6,Thu Jul 16 23:32:25 2015 UTC,"Better than understanding everything at once, try to understand what is the core business of the company you are working for. And understand what is their overall vision of the product you will be working on.   If they have a super defensive approach and are the type that don't like risks, then you might wanna try to learn about testing (the different types and how to implement them).  On another example, let's say if they plan to build a new form, then you should start reading what makes more sense (angular-formly, tokens, whatever).  And please, embrace the Imposter Syndrome - rather then fear it - and it will make you a better developer.   Good luck and have fun!  TL;DR adapt to what they want rather then trying to learn everything at once."
angularjs,3d3tyq,noreddithandle,9,Mon Jul 13 10:26:32 2015 UTC,"Unless nobody there knows what they're doing, you'll be outed very quickly."
angularjs,3d3tyq,rootfiend,5,Mon Jul 13 12:50:40 2015 UTC,"Learn how to unit test services, controllers and directives.  Learn communication of directives through controller sharing. You'll need it with validation stuff and lots of other stuff. With it it's easy to make reuseable directives that are easy to use."
angularjs,3d3tyq,Awkwardosaur,4,Mon Jul 13 10:17:17 2015 UTC,"Read up on this style guide and keep in mind Angular is data driven (passing objects around) in stark contrast to ie Jquery that is event driven.  If you feel the need to emit/broadcast events and watch stuff for a lot of things you're trying to achieve it might be a better (?, at least more angular) way of doing things. Note there are valid use cases for the above, but they are kinda rare.  If you absolutely need a plugin that uses jquery then wrap it in a directive."
angularjs,3d3tyq,jimlei,2,Mon Jul 13 09:15:02 2015 UTC,"Oh I have seen so many examples of taking this styleguide and perversing it to the extreme, that I would hardly recommend it to anyone.  First thing that comes to mind is that you really should have some kind of modules- use webpack or JSPM or browserify. Then wrapping your code in IIFEs is just a waste of your and everybody's time. The fact that John Papa encourages IIFEs in every file instead of using webpack or JSPM or browserify is just wrong."
angularjs,3d3tyq,Capaj,1 point,Mon Jul 13 10:10:16 2015 UTC,Could you explain this further? I can't immediately see the point of wrapping your angular app up in another DI methodology when all your angular code itself is going to be wrapped up inside a single angular object in the window.
angularjs,3d3tyq,_daniel___,1 point,Mon Jul 13 12:21:34 2015 UTC,"modules are not a DI supplement. They cover bigger ground than raw DI. They are more powerful abstraction. That is the biggest downfall of angular 1.x-it promotes DI containers everywhere, but Javascript is not java. There is no point in injecting helper functions for example."
angularjs,3d3tyq,Capaj,1 point,Mon Jul 13 15:19:00 2015 UTC,"While webpack, jspm and co are really really great tools, I feel like they don't fit in the angular workflow at all. Sure, you can make them fit in, but that's a hassle.  Just the whole workarounds e.g. with browserify and tests..."
angularjs,3d3tyq,zwacky,3,Mon Jul 13 11:28:18 2015 UTC,Write unit tests. Good luck.
angularjs,3d3tyq,homezlice,6,Mon Jul 13 12:07:51 2015 UTC,"I hope someone more technically qualified for the position didn't get passed over because you managed to memorize some common interview questions.   I'm a development manager currently interviewing candidates and would fire you without hesitation if I later discovered you had lied during the interview process, no matter how quickly you managed to pull together some experience."
angularjs,3d3tyq,erikmad,2,Mon Jul 13 12:36:01 2015 UTC,"hahahah, Angular would be a good start."
angularjs,3d3tyq,this_is_trash_really,1 point,Mon Jul 13 14:09:53 2015 UTC,I dont think you need to know much more than that.
angularjs,3d3tyq,utuxia,1 point,Mon Jul 13 08:52:25 2015 UTC,IDK if posting this question here was a good idea =P
angularjs,3d3tyq,toky89,1 point,Mon Jul 13 20:25:50 2015 UTC,"I would like to add my piece of advice about angular DI. You might not need it. When you don't need it, it is better not to use it. It doesn't really help you. Let's say you have a project with browserify and you need to share a function like this in few of your controllers. Well your noobish instinct would tell you to wrap it in angular.module().valueorfactory and the get it through angular dependency injection. While it will work, your commonJS modules should be the primary abstraction, only use DI when you need to mock these.  With the example function there is no reason to mock it other than performance. SO unless your tests call that function 10 000 times, you are better off not mocking it."
angularjs,3d3tyq,Capaj,1 point,Mon Jul 13 10:01:59 2015 UTC,I would like to add: lolz.
angularjs,3d0lvi,ScumAndVillain,1 point,Sun Jul 12 14:39:55 2015 UTC,Looks like a solid lineup with some interesting talks
angularjs,3cz2b8,gdi2290,1 point,Sun Jul 12 02:09:52 2015 UTC,"Jasmine* tests. Karma is just the test runner, and Jasmine is the test framework. It's a common misconception."
angularjs,3cz2b8,SpyMaster356,1 point,Sun Jul 12 14:21:15 2015 UTC,"This is a little off topic, but do you have a good resource to learn Jasmine?"
angularjs,3cz2b8,STATSKID,1 point,Mon Jul 13 04:01:10 2015 UTC,"Other then the official docs (http://jasmine.github.io/2.3/introduction.html), not really. It's very similar to other frameworks I've used and found it easy to pick up."
angularjs,3cz2b8,SpyMaster356,1 point,Mon Jul 13 04:05:12 2015 UTC,Ah ok. My problem is that I've never used any other unit testing frameworks. So I'm having a bit of hard time with it. Thanks.
angularjs,3cz2b8,STATSKID,1 point,Mon Jul 13 14:44:16 2015 UTC,"and Jasmine is the test framework. It's a common   Thanks you're right, I didn't want people to comment about using Mocha over Jasmine. Although, conflict of opinion leads to higher popularity in Reddit so I really should have"
angularjs,3d1w05,TheBeardofGilgamesh,2,Sun Jul 12 21:16:22 2015 UTC,I believe that is the handlebars template library
angularjs,3czdz3,FallenAdvent,1 point,Sun Jul 12 04:09:13 2015 UTC,Change template to templateUrl inside the directive
angularjs,3czdz3,stayclassytally,1 point,Sun Jul 12 04:39:13 2015 UTC,"Thank you, That helped some. I may be able to figure out a bug I have from here"
angularjs,3cy0vx,sonemonu,1 point,Sat Jul 11 20:18:35 2015 UTC,looks familiar :p
angularjs,3cy0vx,gdi2290,1 point,Sun Jul 12 02:10:20 2015 UTC,?
angularjs,3cy0vx,gdi2290,1 point,Sun Jul 12 02:19:32 2015 UTC,the repo is an old copy of angular2-webpack-starter and he replaced webpack with gulp and used systemjs.  https://github.com/angular-class/angular2-webpack-starter
angularjs,3cy0vx,gdi2290,1 point,Sun Jul 12 02:30:06 2015 UTC,"This project is not a copy of the angular-webpack-starter; as I specifies in the credits section, that project is one of the bases of angular2-minimalist-starter. I removed several things, simplified, improved and added other ones."
angularjs,3cxiws,angularlover,5,Sat Jul 11 17:42:50 2015 UTC,"It's probably not best to invest yourself into an ecosystem that is only in the alpha stage.  If your interested in a job in front end coding, you might want to hone your skills in a language that is currently used in industry (ie angular 1.4).   That said, Typescript itself looks like a good tool to have in your toolbelt. Also, it is a very good practice in this line of work to at least be familiar with the languages/frameworks coming down the pipe; should they prove to be viable when they arrive, you will be more ready to start using them.   You mentioned getting a career in Angular2. If you somehow managed this, I doubt it would be a very long career. Frameworks come and go so it is best to learn the paradigm(s) used by any given framework so you can more easily work with another framework sharing one or more paradigms. It's really a matter of not being married to a particular syntax for providing a software solution and instead being able to conceptualize the solution such that you could implement it in a number of languages/frameworks.   Do you currently have a programming job?"
angularjs,3cxiws,abstract-alf,2,Sat Jul 11 18:22:49 2015 UTC,"I've been specializing on Angular1 and feel it paid off for the last two years by landing me nice jobs. But it took a while for big companies to adopt it.  Angular2 will still take a while to be stable, to have people move over to it, and then to have mainstream jobs. Ionic2 will help with that, but we're not there yet.  Typescript is not the future - ES6 is, and it's here to stay. Typescript is essentially ES6 with better tooling support (which is great). You won't need typescript to write Angular2 apps, and most companies won't feel the need to get their frontend workforce to learn another 'language'."
angularjs,3cxiws,Liistrad,2,Sat Jul 11 20:19:23 2015 UTC,Typescript is essentially ES6   There's no static typing in ES6.
angularjs,3cxiws,_pixie_,2,Sat Jul 11 23:03:34 2015 UTC,Hence the better tooling bit - the static typing is mostly there for better tooling support from the editor /ide.  http://victorsavkin.com/post/123555572351/writing-angular-2-in-typescript
angularjs,3cxiws,Liistrad,1 point,Sat Jul 11 23:11:15 2015 UTC,You think static typing is for tooling? That's a side benefit. Compile-time type checking eliminates an entire class of errors from Javascript.
angularjs,3cxiws,_pixie_,1 point,Sat Jul 11 23:51:15 2015 UTC,"Yup, I've been specializing in Angular1, and although I admit that it has a lot of blemishes, career-wise it still remains the most popular front-end job requirement. If you see a front-end job position, it will probably be an Angular job.       You're right that ionic2 will help with the adoption of Angular2. Just made me realize that the next framework that will 'win' will be the one that has the best tooling and the best ecosystem. It just goes to show, if you want your framework to win, start writing cool components for it!        With that said, I'm not really a big fan of Typescript. I've used it, but the javascript output isn't so pretty."
angularjs,3cxiws,lifebeyondwalls,2,Sat Jul 11 22:11:37 2015 UTC,I work professionally with Typescript at my 9-5 and I've got to say that I've come to love it. Interfaces and types are indispensable when working on a large project.
angularjs,3cxiws,yesman_85,2,Sat Jul 11 23:02:40 2015 UTC,"Agreed. Types are very helpful in large projects. You're lucky btw. Despite what I've said about Typescript, I'd still like to experience what it's like to work with it 9-5."
angularjs,3cxiws,RICHUNCLEPENNYBAGS,1 point,Sun Jul 12 00:01:19 2015 UTC,"Untrue, we have been schooling our developers to use Typescript. Which was easy because it feels way more like C#. And I rather attract C# programmers that write TS than JS programmers."
angularjs,3cxiws,yesman_85,1 point,Sun Jul 12 03:16:58 2015 UTC,"Oh God.  Please, the last thing the world needs is more JavaScript programmers who don't understand and don't want to learn how JavaScript works (and TypeScript does not really try to paper over that; it just adds typing)."
angularjs,3cxiws,RICHUNCLEPENNYBAGS,0,Sun Jul 12 03:51:02 2015 UTC,Turns out our 50k lines app does fine in 100% TS.
angularjs,3cxiws,brianvaughn,1 point,Sun Jul 12 04:07:11 2015 UTC,That is totally not my point.
angularjs,3cxiws,sonemonu,2,Sun Jul 12 04:11:31 2015 UTC,TypeScript is fantastic and worth consideration regardless of whether you end up using Angular 2. :)
angularjs,3cxiws,m3l7,1 point,Sun Jul 12 03:07:10 2015 UTC,"Angular 2 do not force you to use TypeScript, you has the option of using ES 5 / 6, or even Dart. TypeScript is just a superset of ES6 with optional types. Learning Angular 2 looks like a good bet ;)"
angularjs,3cxiws,SomeRandomBuddy,1 point,Sun Jul 12 00:00:32 2015 UTC,how are you studying angular2? ng-book2?
angularjs,3cwzat,mrmonkeyriding,1 point,Sat Jul 11 14:42:39 2015 UTC,Your question is a bit confusing. Could you provide some more detail?  Do you already have a view that shows your items?
angularjs,3cwzat,the-anconia,1 point,Sat Jul 11 15:25:39 2015 UTC,"Hey - I do, I currently have 3 views.   Main Store (where the items are all displayed) item (where a single item will be displayed from which even item was clicked on in store view)  For example. There's five items:   item 1,  item 2, item 3, item 4, item 5,  all displayed in /store view. Clicking item 1 would open a new page using /item view and display item 1's data, so the product name, price for that specific item. Then so on for each item."
angularjs,3cwzat,the-anconia,2,Sat Jul 11 15:28:12 2015 UTC,"This is all really quick so excuse any errors but I think you want something like this. In your Main Store view where all your items are displayed, use an ng-repeat and track by its index.  <div ng-repeat=""item in items track by $index"">     <div class=""store-item"" ng-click=""main.doSomething($index)""></div> </div>   As you can see above, whenever a user clicks an item you can pass that index to a controller function.  Now in your controller, you have access to the index of the item that was clicked from your array of items. Then you should be able to do your redirect.  $scope.doSomething = function(index) {     $location.path('/item/' + myItems[index]); }   Just rename my variables and function names to whatever you have."
angularjs,3cwzat,rsh412,1 point,Sat Jul 11 15:38:39 2015 UTC,"<div ng-repeat=""item in items track by $index"">         <div class=""store-item"" ng-click=""main.doSomething($index)""></div> </div>  This is the correct answer from what OP has said. It should probably be noted that you seem to be using the controller-as syntax (main.doSomething instead of doSomething) which may be confusing for OP. Controller-as may be helpful for OP if you have more than one controller on a page.  The main point for OP is that you need a new route using an item id. In other words, your route would be something like ""/item/:id"" and you'd use $location to pass in the id number and affect the route change. When the route resolves, you'd have to grab the id out of the route (again using $location) and getting that item from your server and loading in the info to your view."
angularjs,3cwzat,the-anconia,1 point,Sat Jul 11 18:25:01 2015 UTC,"Yes, you're right. I should have mentioned the controller-as syntax."
angularjs,3cwzat,ihavenofriggenidea,1 point,Sun Jul 12 14:30:33 2015 UTC,"Hey, I'm not sure if it's wrong or I'm doing it wrong, but it's not working. also, the scope is declared already as $scope.item = StoreService.items();   My items are being stored in a service (StoreService) and being injected into the store controller and the scope set."
angularjs,3cwzat,the-anconia,1 point,Sat Jul 11 20:55:28 2015 UTC,"I presume you want something like this from my understanding?  <div ng-repeat=""item in items track by $index"">     <div class=""store-item"" ng-click=""main.doSomething(item)""></div> </div>"
angularjs,3cwzat,ihavenofriggenidea,1 point,Sat Jul 11 21:51:07 2015 UTC,How is that different than mine?
angularjs,3cwzat,the-anconia,1 point,Sun Jul 12 14:30:02 2015 UTC,"my apologizes, I misinterpreted someone else's response as yours."
angularjs,3cwzat,zappymong,1 point,Mon Jul 13 00:46:46 2015 UTC,Why don't you want to use ng-repeat for what it's designed for ?
angularjs,3cwzat,ihavenofriggenidea,1 point,Sat Jul 11 16:37:53 2015 UTC,I believe I worded/understood it wrong. I've been given advice to create a function in twine with ng-repeat. :)
angularjs,3cvzdo,lilred181,3,Sat Jul 11 06:05:47 2015 UTC,"First of all (optional), you can write your code like this  <directive ng-repeat=""item in items"" attribute=""item""></directive>   Due to the prototypal nature in javascript, you need to make sure your that you are using dot notation, so you would need to do something like   <directive ng-repeat=""item in data.items"" attribute=""item""></directive>   this will ensure that 2 way binding updates the scope in the parent controller as well as the scope in the directive.  If you had just 'items' and not 'data.items' the data would still update in the directive but not the parent controller."
angularjs,3cvzdo,carbondry,2,Sat Jul 11 08:38:44 2015 UTC,So you are suggesting to wrap my array of items in another level of an object?  edit: I implemented your first suggestion although the second suggestion does not seem to fix the issue.
angularjs,3cvzdo,axlee,1 point,Sat Jul 11 14:12:05 2015 UTC,"Ideally, you would use the controllerAs syntax and bind your array directly to the controller's this.  <div ng-controller=""ItemController as vm"">  <directive ng-repeat=""item in vm.items"" attribute=""item""></directive> </div>   function ItemController(){   this.items = [] }"
angularjs,3cvzdo,xBrodysseus,1 point,Sat Jul 11 14:23:40 2015 UTC,Sadly the controller as syntax did not work either. I am using ui-router as well so just set a controller as in the state but that did not fix it. Thank you though.
angularjs,3cvzdo,teropa,1 point,Sat Jul 11 16:45:20 2015 UTC,Could you expand on what you're changing and where it fails to show up?  There might be some prototype inheritance funkiness going on. See http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs
angularjs,3cvi1p,idba0987,1 point,Sat Jul 11 03:01:52 2015 UTC,"I've never used transclude on an attribute directive before, is it really necessary?"
angularjs,3cvi1p,wagedomain,1 point,Sat Jul 11 14:21:46 2015 UTC,I used transclude to make the api nicer. The gen-user directive will populate its scope with random values and rerender its child nodes (which would be able to access the values from the directive scope)
angularjs,3cvi1p,rsh412,1 point,Sun Jul 12 07:57:44 2015 UTC,"I'm also thinking you don't need anything as involved as transclude. You also are injecting $log but you never use it. You have regular old console.log instead, but even this should be removed from production code. I'd definitely get rid of $log."
angularjs,3cuxkv,Danh91,3,Fri Jul 10 23:55:30 2015 UTC,There should be a bin directory in your npm prefix where symlinks to your apps are being created. Just add it to your path.  I followed this tutorial here and didn't have a problem with npm afterwards. As you can see is just some few envvar configs and you don't even need root to set it up.  Dunno if there is a better way but this worked for me in various distros without a problem.
angularjs,3cuxkv,codestation,2,Sat Jul 11 00:37:48 2015 UTC,Thanks a lot. The link you attached was also really helpful
angularjs,3cuxkv,manisto,2,Sat Jul 11 01:10:33 2015 UTC,"I would really recommend checking out node version manager. I had the same issues as you, in addition to ""being stuck"" on the outdated version of node that my distribution of Linux provided. nvm solved all of that."
angularjs,3cuxkv,Have_you_tried_this,0,Sat Jul 11 05:54:31 2015 UTC,You could just build it from source.
angularjs,3cuxkv,manisto,1 point,Sat Jul 11 12:26:03 2015 UTC,"I could, but that would be significantly less easy than just doing nvm install 0.10.36. I just assumed that you were going for ""more easy"". :-)"
angularjs,3cuxkv,Have_you_tried_this,0,Sat Jul 11 12:55:35 2015 UTC,Yeah but its one less dependency and you have a better idea of what's actually happening.
angularjs,3cuxkv,Have_you_tried_this,1 point,Sat Jul 11 13:03:41 2015 UTC,:s I've always just installed the CLI packages globally and had no issues.
angularjs,3ctbn4,Arth95,3,Fri Jul 10 16:38:07 2015 UTC,"Angular (really any front end MVC framework) isn't the best bet for rendering lots of static content like a blog. Generally, its a lot easier to render the static html on a server and push it off to the users.   The other downside of using something like angular for a site with static content is that search engine crawlers have only recently started rendering javascript. Google does (you can see a preview with webmaster tools) but AFAIK neither yandex, Bing, or baidu do -- not a huge deal if you're only serving US audiences, but something to keep in mind.  Tl;Dr - angular is probably overkill for a cms as you won't have so much dynamic content that you can't keep track of it using just jQuery."
angularjs,3ctbn4,nagi2000,1 point,Fri Jul 10 23:56:58 2015 UTC,"I didn't know about it. I just thought it will be interesting experience. Anyway, I will try to do something with it, maybe I will learn something interesting. Thanks for response."
angularjs,3ctbn4,nagi2000,1 point,Sat Jul 11 00:04:23 2015 UTC,"If you're just working to learn angular, you can absolutely try building a cms with it. It's a common use case for web sites in general and will give you a good feel for the framework. I was just trying to point out some of the dowsides of using something like angular for rendering static content."
angularjs,3ctbn4,SomeRandomBuddy,-2,Sun Jul 12 04:00:14 2015 UTC,You're in need of /r/reactjs
angularjs,3ctbn4,nagi2000,1 point,Sat Jul 11 01:28:10 2015 UTC,"Suggesting react in this case is like saying, ""oh, a bowling ball isn't what you need to kill this ant...a bazooka is!"" I'm sick of the angular/react debate, they're both awesome frameworks that do some great things; but they both have similar use cases,. If you don't need angular for a project chances are that you won't need react."
angularjs,3ctbn4,SomeRandomBuddy,0,Sun Jul 12 03:56:22 2015 UTC,Except for that react is SEO friendly...
angularjs,3ctbn4,emcniece,1 point,Sun Jul 12 04:23:05 2015 UTC,Also overkill and needless for a blog
angularjs,3ctbn4,SomeRandomBuddy,0,Sat Jul 11 05:26:53 2015 UTC,"Huh? React solves SEO problems and its architecture allows for a modern, responsive feel, regardless of the application. Just FYI, before you speak out of your ass, you should know that both facebook and ESPN (and probably many, many other big media companies) use this architecture by serving html rendered server-side to their apps for static content. What's the problem?"
angularjs,3ctbn4,emcniece,2,Sat Jul 11 19:09:49 2015 UTC,"Woah take it easy buddy! Lots of arguments in lots of directions here, but choosing a toolset is best done when considering the needed features.  There are plenty of options for performing SEO in AngularJS, like Prerender. To say that a platform ""solves SEO problems"" might be a little misleading - we'll probably want to add React modules to achieve some desired functionality too, so insinuating that Angular doesn't SEO is a bit half-baked.  We're probably familiar with the ""Big Companies"" argument, so we'll skip this one. What is more important is that they have big communities, especially for devs seeking resources!  React does some awesome handling and its use of stores makes it great for presenting collections of data in regions... and it definitely does give us the ability to create novel browsing experiences. However if we're just chatting about ""perceived speed"", there are again many options for optimizing both Angular and even WordPress or static HTML.  No problem, really - to iterate /u/nagi2000, it's overkill for a cms on top of another cms unless there are specific feature requirements."
angularjs,3ctbn4,castironpuppet,2,Sat Jul 11 20:08:35 2015 UTC,"You would likely get better feedback at /r/WordPress, because these questions sound more pertinent to the API than to angular itself."
angularjs,3ctbn4,Findiglay,1 point,Fri Jul 10 18:45:32 2015 UTC,"I think it would be much easier to build your own simple custom CMS with Angular, for the Angular app."
angularjs,3ctbn4,dylanyo,1 point,Fri Jul 10 21:50:55 2015 UTC,"Hmm, I didn't think about it. Maybe that is good way, thanks!"
angularjs,3cse1n,ttz29,9,Fri Jul 10 11:40:03 2015 UTC,"When I was using ASP.NET MVC + Angular JS, my approach was  I had one MVC 'View' Controller, that would serve up my Razor views. I didn't make use of any of the MVC Data Binding - I might pass in an empty model so I could use some of the HTML Helpers, and had wrote some helper functions to generate markup that would play nice with angular.  I modified my view lookup so I didn't need to keep creating a controller/view for every template that I wanted.   However, /if/ I was to go back in time to that project - I wouldn't even do that. I'd stick to the ASP.NET WebAPI, and stick to static HTML files and not bother with Razor at all.  Being able to keep your HTML files close to where the JS that uses them lives is nice. Having my 'SomeCtrl' in one folder, then the template for it living in never-never land leads to a whole lot of jumping around the project that is annoying.    Look at the controller name Look at my routing file to see my templateUrl Mentally think 'where does this map to in my MVC views folder?' Jump over there (or search for the file)    But if the template lived next to the controller - much nicer.   MVC5+EF can be a decent combo, but I would suggest   Stick to using WebAPI -minimize your use of normal MVC controllers - maybe for login/landing pages/setting up session, but not for your main 'Angular App' Keep your HTML files close to the JS that is using them, and don't bother with Razor Setup your .NET JSON seralizer to take care of converting from PascalCase<->camelCase - it will make your life easier"
angularjs,3cse1n,e82,1 point,Fri Jul 10 12:14:44 2015 UTC,Thanks for the tip! I'll try it right now :D
angularjs,3cse1n,gonzofish,1 point,Fri Jul 10 12:25:02 2015 UTC,I'm about to start working on my first project with a .NET backend (only used Java & Python until now) and it's nice that my instinct on how to approach development can be reaffirmed.
angularjs,3cse1n,CptAmerica85,3,Fri Jul 10 14:32:24 2015 UTC,"A place I used to work at used WebAPI as RESTful services to hook our angular app to the database.  WebAPI is also built on top of MVC, so you're still hitting controllers to get your JSON data, and it also passes everything back as JSON by default.   It's also pretty nice to have Visual Studio scaffold your WebAPI controllers.  It will stub out your basic CRUD methods in the controller by default, so you only have to worry about adding extra functionality to your controller (if you need it)."
angularjs,3cse1n,agaskell,2,Fri Jul 10 12:52:52 2015 UTC,It can be helpful to think of your Angular client as if it were an iOS or Android client. Your server exposes an API and your Angular app is a consumer of that API. One nice side effect is that if you set up CORS on your server your Angular app can be hosted completely on a CDN.
angularjs,3cse1n,goofygrin,2,Fri Jul 10 14:34:01 2015 UTC,"I recommend you look at Breeze: http://www.getbreezenow.com/ for dealing with data.  As for your question, you should be able to find the layout in the template and create an ASP.NET MVC layout page to use on your server side rendered pages."
angularjs,3cse1n,vacatola,1 point,Fri Jul 10 14:41:11 2015 UTC,"I think breeze wouldn't fit in this project due to users getting access to the main datasource(which I wouldn't want). Anyway, I have read your comments and I appreciate you guys for helping :D Many thanks! :)"
angularjs,3cse1n,vacatola,1 point,Fri Jul 10 16:14:27 2015 UTC,"Just curious, what do you mean about users getting access to the main datasource? I'm building some enterprise apps with Angular+Breeze+WebAPI+Entity Framework and can lockdown  whatever data we need to in the WebAPI"
angularjs,3cse1n,goofygrin,1 point,Fri Jul 10 16:25:08 2015 UTC,"On my understanding of Breeze, your clients connect directly to your datasource, its a security risk if your app is public cause it technically grants clients access to modify the database. (Correct me if i'm wrong though)  EDIT: Addition, unlike if you're on a server, your database isn't exposed to the client. (Just my 2 cents, I have nothing against Breeze :D)"
angularjs,3cse1n,vacatola,1 point,Fri Jul 10 18:06:10 2015 UTC,"You're right in the context of taking one of the Breeze sample apps and applying it to a new app. The IQueryable WebAPI calls are pretty wide open. We have to do a lot of different security checks, including cutom authorize attributes, locking down navigation properties on the IQueryables, and running data authorization on each row of data that is being saved. Our applications have become very different animals from what you see in the samples."
angularjs,3cse1n,goofygrin,2,Fri Jul 10 18:15:30 2015 UTC,"I posted to OP, but you might check out one of my developer's tools, Business Time: https://github.com/timgit/Breeze.BusinessTime  It helps pipeline what you're describing."
angularjs,3cse1n,fixthemess,1 point,Fri Jul 10 20:33:19 2015 UTC,"Nice, this is worth looking into. Thanks!"
angularjs,3crkik,halibut_master,3,Fri Jul 10 05:09:49 2015 UTC,Try wrapping the {{i+1}} in a <td> tag
angularjs,3crkik,Chevalric,1 point,Fri Jul 10 05:22:46 2015 UTC,Thank you. I knew it was something obvious.
angularjs,3cnyfd,ifps123,8,Thu Jul 9 11:24:19 2015 UTC,"From angular docu:  var object = angular.extend({}, object1, object2)   params in your snippet:  param1: new (extend(function() {}, { prototype: parent }))() => destination  param2: extra => source  new (extend(function() {}, { prototype: parent }))()   => extend anynoymous function (destination), with prototype of ""parent"" which was provided as a parameter and create an instance of it (every function can be used as a constructor function)  So you create an object from constructor function which gets provided parent as a prototype and then extend it with provided extra parameter (eg object with some properties).  They do it so that the extended object gets the specified prototype so it inherits the prototype functionality.  EDIT: EXAMPLE & formatting:  function Parent() {} Parent.prototype = function doStuff() {console.log('OK!');}  var extra = {extraProperty: 'extra'} var result = inherit(Parent, extra);  result.doStuff() // ... OK! result.extraProperty // ... extra"
angularjs,3cnyfd,tomastrajan,8,Thu Jul 9 12:00:38 2015 UTC,"/u/tomastrajan is correct.  This code is how we do protoypal inheritance.  That function is terse, but terrible to read.  So, let's refactor this code to be more readable:  function inherit(parent, extra) {   // Define a constructor function   var tempConstructorFunction = function () { };    // Set the constructor's prototype to the parent object   tempConstructorFunction.prototype = parent;    // Create a new instance of the object   var emptyObjectWithParentPrototype = new tempConstructorFunction();    // Copy the ownProperties from ""extra"" over to the new object   var result = angular.extend(emptyObjectWithParentPrototype, extra);    // The resulting object has all the ownProperties of the ""extra""    // object and has the ""parent"" object as __proto__   return result; }"
angularjs,3cp7m2,SomeRandomBuddy,1 point,Thu Jul 9 17:41:28 2015 UTC,A pub/sub service with rootscope listeners and broadcasters would probably work better (for both LTM and error handling) than endless try/catch blocks
angularjs,3cmf2t,spoco2,3,Thu Jul 9 01:16:10 2015 UTC,"could not read it yet due to proxy issues, but in any case in Angular 1 beware of some lazy loading limitations: there is only one global pool of objects, all injection is by name and modules with the same name get silently overwritten.  This means if you are in one route and have object ""backendService"" injected, then go to another route and lazy-load a bunch of angular modules, including a second implementation of ""backendService"", the second implementation will silently overwrite the first.  This is a feature to allow for example angular-mocks to overwrite $http for testing purposes.  So lazy loading can lead to undetermined behaviour, where the application can behave differently depending on the user navigation sequence.  Angular 2 fixes this with an hierarchical injector, where different parts of the app might get injected a different implementation with the same name.   But its just a corner case, by avoiding giving the same name to multiple services it all should just work OK"
angularjs,3cmf2t,mrv1234,2,Thu Jul 9 12:03:48 2015 UTC,"Yeah, there's a lot I'm being conscious of namespaces. The same is true of css as well. And there's not much that can be done other than being diligent with naming of things.  Angular 2 seems to be very much heading in a good direction. Pity it's still so very far off actually being usable. (And then a whole other length of time before plugins and modules and directives catch up)"
angularjs,3cmf2t,oriphinz,2,Thu Jul 9 21:48:06 2015 UTC,"I just wrote this, and thought it would be of help to others because I've spent weeks now nutting out a bunch of the issues involved.  If you're after a way of having an Angular application that can load in portions dynamically, and have those portions be individually optimized and managed in your VCS... this may be a way to do so. I certainly hope so, as it's how I'm moving forward with a large scale project at the moment!  I'd love to hear any thoughts on my approach."
angularjs,3cmf2t,nickguletskii200,2,Thu Jul 9 01:18:03 2015 UTC,"Great article. We have gone through something similar recently, ended up on OC Lazyload + requirejs. Good to read about alternatives!"
angularjs,3cmf2t,ctanga,1 point,Thu Jul 9 09:55:28 2015 UTC,"Great to hear that OCLazyLoad does the job for you :) I did play with it for a while, and it was only the dynamic definitions and splitting that caused me issues with it."
angularjs,3clnj9,axlee,4,Wed Jul 8 21:39:16 2015 UTC,"it may also be possible/logical for your scopes to be nested, in which case your two $scopes literally refer to the same data model - here is an article about it."
angularjs,3clnj9,dust4ngel,6,Thu Jul 9 02:53:20 2015 UTC,"$rootScope, no one even debates me about it anymore."
angularjs,3clnj9,chancechants,3,Thu Jul 9 02:06:17 2015 UTC,do you all TDD your js?
angularjs,3clnj9,dust4ngel,2,Thu Jul 9 02:50:42 2015 UTC,"Do the two need to be in sync at all times, or do you want a specific action in 1 controller to trigger an update in the other.   If you want both to be in sync at all times, is it a want ""because it's neat that I can type in area, and see the change update in many spots at once"", or is it a want because there is a real requirement/value to be driven from it?  I'm becoming a fan of the idea of ""two-way binding between a specific controller and a view (e.g: a component), but one-way data flow between components"" - and it's becoming increasingly rare that I have use cases that justify two-way flow between multiple components."
angularjs,3clnj9,e82,2,Wed Jul 8 22:02:37 2015 UTC,"http://plnkr.co/edit/XxJD0YTbyT6QBFV5lDku  You could do something like this. Use a service to store some variables, so that you can inject that service into the 2nd controller and retrieve the stored variable."
angularjs,3clnj9,TreeScalper,1 point,Thu Jul 9 01:18:08 2015 UTC,Isn't that a factory?
angularjs,3clnj9,hancedvariation,1 point,Thu Jul 9 11:01:57 2015 UTC,"Yes, it's a service factory.  A factory is a type of service, if i'm reading the documentation properly.  https://docs.angularjs.org/guide/services"
angularjs,3clnj9,TreeScalper,4,Thu Jul 9 23:53:14 2015 UTC,"Factories and services are both providers. The only difference between a service and a factory is how they are constructed.  Factory has to return something- service will return this.  Why call them services and factories? As far as I can tell, to confuse the piss out of everyone."
angularjs,3clnj9,Sekret_One,1 point,Fri Jul 10 13:54:19 2015 UTC,"Then why not just call it a factory? There is a different service creation syntax:  app.service('testService', function(){     this.sayHello= function(text){         return ""Service says \""Hello "" + text + ""\"""";     };             this.sayGoodbye = function(text){         return ""Service says \""Goodbye "" + text + ""\"""";     };    });   Is this wrong now?"
angularjs,3clnj9,hancedvariation,2,Fri Jul 10 07:59:13 2015 UTC,"$scope should remain in controllers, not services.   That being said, you can create a controller to act in an abstract manner that both controllers can then depend on. Shared logic, services and data can reside in the parent while unique logic, services and data can reside in the children.   Or you can use $rootScope and then any controller can access it."
angularjs,3clnj9,one800higgins,2,Thu Jul 9 02:42:02 2015 UTC,"I agree that using scopes in services can feel fishy, but I usually use them in this case in a hidden way to allow easy pub-sub. And I also agree with /u/e82 - I prefer to use one way data flow.   If you insist on 2 way binding, you can simply have the service expose the model and have the controllers explicitly watch that model. But I dislike it , especially since it makes tracking changes hard (""did I just change the value or am I being triggered by an outside change?"").   Using a service that encapsulates the model and then having the controllers explicitly tell the service something changed and have the service explicitly update subscribers is my preferred option.   Here's a basic sample in a blog post of mine from a couple of months ago about something very similar."
angularjs,3clnj9,abyx,2,Thu Jul 9 03:27:18 2015 UTC,"Store data in service itself and bind it to interested controllers, i wrote article explaining how to do it, you can use ""protomodels"" or full blown models"
angularjs,3clnj9,tomastrajan,1 point,Thu Jul 9 07:15:31 2015 UTC,"There is $brodcast and $emit https://www.youtube.com/watch?v=heUHh7vqPvY, but can promote tight coupling betweeen parts of the app that should be separate.  I don't think there is an established best practice. Here is something that would work: inject a service that provides both a subscribe() and a submit() to submit value changes to subscribed listeners.   The same works with a directive, I prefer that to a service as I tend to think of the service as stateless: build a directive with the subscribe() and submit() functions and inject it where needed using require."
angularjs,3co6x5,ctaborda,8,Thu Jul 9 12:57:24 2015 UTC,"This is a pre-release version that is approximately 25% complete. Updates will be released as they are finished (roughly every week). Buying now entitles you to a discounted price and free updates!   I didn't realize books now come in alpha states.   Seriously though, if the language is constantly changing in it's early state, why would I want to keep up with changes via a third party book which will inherently always be behind the specs and will contain examples that don't necessarily make sense. Until the framework is stable, trying to follow another person's interpretation would be 10x the confusion when I could just follow Angular's documentation to keep up with the latest changes."
angularjs,3co6x5,one800higgins,4,Thu Jul 9 13:12:51 2015 UTC,"I picked up this book when it first came out, and found it full of errors, ommissions and even whole sections missing (As in, there would be parts of the book referencing other sections in the book that simply did not exist!) - would be interested to know if they've fixed all the issues up now!"
angularjs,3co6x5,BigWesternMan,2,Thu Jul 9 13:01:34 2015 UTC,It's a pre-release. It won't be done for quite a while yet.
angularjs,3co6x5,theavengedCguy,1 point,Thu Jul 9 15:18:41 2015 UTC,"""The in-depth, complete, and up-to-date book on Angular 2. Become an Angular 2 expert today.""  The site's ad copy is getting ahead of itself."
angularjs,3co6x5,lampshadish2,1 point,Fri Jul 10 00:11:42 2015 UTC,"Yeah, you're not kidding. Quite the over-statement if you ask me. The previous version of the book for 1.4, yeah, that I can see - but not this."
angularjs,3co6x5,theavengedCguy,1 point,Fri Jul 10 00:40:44 2015 UTC,"I realize that releasing early is important, but that seems a little rushed :P"
angularjs,3ckbrf,AndyJessop,1 point,Wed Jul 8 16:08:09 2015 UTC,Looks nice and clean - thanks for posting!
angularjs,3ckbrf,Base10Propaganda,1 point,Wed Jul 8 17:05:57 2015 UTC,"If you are looking for more fun, make a yeoman generator for it! You could even use the base angular/fullstack angular generators as a starting place."
angularjs,3ckbrf,raegx,3,Wed Jul 8 20:46:36 2015 UTC,"Piggybacking on this: if folks are interested in a Yeoman generator for best practices, I've been working on ng-poly, which aims to align with Todd Motto's and John Papa's styleguides."
angularjs,3ckbrf,dspeck,1 point,Wed Jul 8 23:55:49 2015 UTC,"Or better, enforce the style in the current angular-generator (gulp version).  https://github.com/Swiip/generator-gulp-angular"
angularjs,3ckbrf,ackerlight,1 point,Wed Jul 8 22:12:20 2015 UTC,"Ah, now that seems like a great idea. I think I'll get onto this later today. Thanks for the suggestion."
angularjs,3ck204,sanketsahu,9,Wed Jul 8 14:56:45 2015 UTC,That was actually a very bad comparison (imho).
angularjs,3ck204,eyko,1 point,Wed Jul 8 21:41:23 2015 UTC,Suggestions to improve it would help! Thanks man! It's work-in-progress.
angularjs,3ck204,Porsche924,2,Thu Jul 9 06:44:02 2015 UTC,Seeing how this is added to /r/angularjs you didn't even mention Angular Material. The separate project from Google that is probably the best way to go out of the three if you're doing an angular app.
angularjs,3ck204,takakoshimizu,3,Wed Jul 8 15:36:03 2015 UTC,"I gotta disagree. Angular Material has terrible performance problems in everything but Chrome. It's an amazing project, and easy as hell to use, but they really gotta fix the performance first."
angularjs,3ck204,Porsche924,2,Wed Jul 8 16:45:09 2015 UTC,"They gotta release version 1 first, really."
angularjs,3ck204,m3wm3wm3wm,1 point,Wed Jul 8 17:05:53 2015 UTC,"By the time they release angular material 1.0, angular 1.0 is deprecated..."
angularjs,3ck204,Porsche924,2,Wed Jul 8 20:10:56 2015 UTC,I have a feeling that angular 2 will launch with a compatible angular material version.
angularjs,3ck204,m3wm3wm3wm,1 point,Wed Jul 8 20:15:44 2015 UTC,Reference?
angularjs,3ck204,takakoshimizu,1 point,Wed Jul 8 20:10:20 2015 UTC,"Anecdotal, from my own work. Even with a mostly empty application there were noticeable delays in interactions.   The same logic implemented with material bootstrap had no such delays."
angularjs,3ck204,wtsn,1 point,Wed Jul 8 20:42:44 2015 UTC,Go to their demo pages on mobile and click around. It's fairly obvious.
angularjs,3ck204,my_ledge_ends,2,Thu Jul 9 01:40:46 2015 UTC,"I'd hesitate to compare a plug-and-play CSS lib like MDL to a full-blown UX library. Angular Material is more comparable, in my eyes, to Angular UI Bootstrap. Different solutions for different needs."
angularjs,3ck204,Porsche924,2,Wed Jul 8 16:26:52 2015 UTC,"Right, the comparison between Angular UI Bootstrap and Angular Material seems like the comparison to make on this subreddit."
angularjs,3ck204,boompleetz,1 point,Wed Jul 8 16:29:28 2015 UTC,Does that mean I can take a single component from Angular Material or do I have to use the full library?
angularjs,3ck204,my_ledge_ends,2,Wed Jul 8 20:32:42 2015 UTC,"You can take single components, but they don't (appear to) have a checkbox build system like Angular UI does. Here are instructions for how to do it with task runners. Of course, if nothing else, you could also just delete things by hand after import."
angularjs,3ck204,boompleetz,1 point,Wed Jul 8 23:17:10 2015 UTC,"thanks, that's helpful."
angularjs,3ck204,Sekret_One,1 point,Thu Jul 9 01:23:43 2015 UTC,I have added that now. Thanks!
angularjs,3ck204,Porsche924,1 point,Thu Jul 9 06:44:53 2015 UTC,"I use Angular Material. I don't think I would recommend it. Too many performance issues, and too much see-saw of features being changed and broken. Especially if you're trying to make a hybrid app."
angularjs,3ck204,Sekret_One,1 point,Fri Jul 10 18:24:12 2015 UTC,"Yeah, I haven't gone full into a project with it yet. I just check it every now and then to see whats new and when I can use it."
angularjs,3ck204,darkmagnus,1 point,Fri Jul 10 18:39:32 2015 UTC,"The parts that work are fantastic. The parts that don't are . . .   Used it a lot making a hybrid app for a Pathfinder character sheet. For an app that's some basic display some posts / some pics and fill in some values probably fine. But if you need to take the reigns too much, the library feels like it gets in the way more times than it helps. Plus in hybrid, lot of times certain things would bug out or take huge performance hits.  Plus it has neat look and feel, but almost by design you can't hook in and make say some custom things to piggy back on the material color scheme, ripple effects, etc. Again, if you stay within the circumscribed tools you're mostly fine."
angularjs,3cjvfa,zero_over_zero,3,Wed Jul 8 14:03:47 2015 UTC,"You shouldn't need to use jQuery. But you will need to mess with ngSanitize a lot if you are outputting raw html.  This project will require a great bit of learning on your part, but is perfectly doable on your own.  :)"
angularjs,3cjvfa,TurboGranny,3,Wed Jul 8 15:26:43 2015 UTC,"Also worth noting that Angular has a built-in subset of jQuery called jqlite. It'll use jQuery if it's available, but you'll have much of the core functionality of jQuery provided by Angular without having to include jQuery itself."
angularjs,3cjvfa,Asmor,2,Wed Jul 8 16:11:32 2015 UTC,Ace Editor is where I'd start... http://ace.c9.io/
angularjs,3cjvfa,goofygrin,2,Wed Jul 8 15:31:29 2015 UTC,I just started making something like that! Using angular. PM me! Meaby we can talk about your project and mine and look for the best posible solution!
angularjs,3cjvfa,omss24,1 point,Wed Jul 8 18:32:17 2015 UTC,Thank you all for providing advice. I'm definitely looking into what all you have suggested so far.
angularjs,3cjvfa,nmarshall23,1 point,Thu Jul 9 00:36:42 2015 UTC,"Get a clearly defined set of expectations. Learn how to write project requirements. What are they expecting?   A WYSIWYG web page builder/editor for a small business, is far too open ended. You need to scale that down.  What behaviors do they expected? What user stories do they have?  Do not neglect to ask who is using this tool, and what kind of small business would it serve. Just how much of editing or site building do they expect this tool to be capable of?   You need to ask these questions, and narrow the focus of this project. You only have a 6 months, some of which you will not be able to solely focus only this project. You are not going to come close to replacing wordpress, so I would focus on building something that fits specific needs."
angularjs,3cjvfa,Narcicyst,0,Fri Jul 10 03:21:06 2015 UTC,"I wouldn't use Angular for this. Angular should be used for full-scale applications, not for one-off modules.  Use React instead."
angularjs,3cjvfa,BradChesney79,1 point,Wed Jul 8 20:57:41 2015 UTC,"/u/Narcicyst has a point. Angular may be overkill. That being said:  Right tool for the right job all the way-- when you are on the client's dime. If you are basically donating your time and you want to use a particular technology...  Because time is money, this is your dime, so you get to pick. Which technology would you rather have on your resume from this project?  (I would do the application in Angular-- more Angular hungry employers than React hungry employers, IMHO.)"
angularjs,3cketd,OpenCredo,3,Wed Jul 8 16:30:32 2015 UTC,"With as much that has been broken between alpha.27 and alpha.30, I would be very leery regarding the use of this boilerplate without it being updated first."
angularjs,3ck8wh,demize2010,3,Wed Jul 8 15:47:24 2015 UTC,"This may seem like an odd thing to do, however the use case here is for a widget which needs to operate outside of an iframe.   I'm not sure what you mean by this. If you're talking about javascript running inside the iframe that needs to communicate with the parent frame this is possible but only if the two documents are on the same domain, port, and protocol.   What is it you're trying to actually accomplish with this implementation?"
angularjs,3ck8wh,fukitol-,2,Wed Jul 8 17:55:05 2015 UTC,I think he's trying to implement a reusable widget in angular that may have to live in a page that also includes angular for other things.
angularjs,3ck8wh,yads12,1 point,Wed Jul 8 20:37:15 2015 UTC,"Yep this is correct, an iframe is not an option I'm afraid."
angularjs,3ck2ra,cajun_super_coder2,2,Wed Jul 8 15:02:34 2015 UTC,"first of all ..   $scope.person.name = { name: ""Ari Lerner"", greeted: true };   should be  $scope.person = { name: ""Ari Lerner"", greeted: true };   but this may was just a typo here in reddit and it's still not working?"
angularjs,3ck2ra,_ds82,1 point,Wed Jul 8 15:06:32 2015 UTC,"Yea, that was a typo from switching between the two.  When I change it to $scope.person = {....}, the databinding seems to fail.  I'll try a newer version of Angular...."
angularjs,3ck2ra,e82,1 point,Wed Jul 8 15:12:35 2015 UTC,"Using 1.4.2:  https://ajax.googleapis.com/ajax/libs/angularjs/1.4.2/angular.js  I still get the same result.  Angular newbie speculation:  It seems to me that something in Angular is holding on to the original object that was assigned to $scope.person and setting $scope.person to a new object ""loses"" the data binding."
angularjs,3ck2ra,nickdres,3,Wed Jul 8 15:29:40 2015 UTC,"Thats pretty much what is going on, and also it's generally considered bad-practice now to rely on $scope inheritance, and the move towards 'controllerAs' syntax.  Angulars use of $scope  prototype inheritance  in Angular is such a mess, that $scope is getting killed in Angular2, amongst many other things.  IMO - treat  '$scope'  as code-smell, and see if there is a way of doing it another way."
angularjs,3cj8kf,miketa1957,1 point,Wed Jul 8 09:52:47 2015 UTC,"What I was actually after, was timing each watcher separately, and finding out which specific watchers are taking longest."
angularjs,3cj8kf,JTurtle,1 point,Wed Jul 8 10:13:30 2015 UTC,"I think to get a realistic view of this, you'd have modify angular.js particularly around $watch registration and $apply/$digest when it's debouncing/updating the watchers."
angularjs,3cgwxc,abyx,6,Tue Jul 7 20:39:53 2015 UTC,"OMG, it finally used an image that isn't a picture of me drinking beer!"
angularjs,3cgwxc,ma-int,2,Tue Jul 7 20:40:15 2015 UTC,Was about time...I got quiet annoyed of your face :D
angularjs,3cgwxc,ctanga,3,Wed Jul 8 12:49:52 2015 UTC,I'll try not to take it personally
angularjs,3cgwxc,jetrii,2,Wed Jul 8 12:52:50 2015 UTC,:( I miss the face
angularjs,3cgwxc,McDLT2,6,Fri Jul 10 16:32:03 2015 UTC,"Nice tips. You can also use $0 - $4 to evaluate the last 5 selected DOM objects.  Also, not specific to angular, but console.table is very nice.   console.table([{name: 'Snap'}, {name: 'Crackle'}, {name: 'Pop'}]);"
angularjs,3cgwxc,Lone-Wolf-Party,4,Tue Jul 7 22:55:27 2015 UTC,"Wow that's awesome, never knew about that."
angularjs,3cgwxc,jetrii,2,Wed Jul 8 01:29:33 2015 UTC,How do you use $0 through $4?
angularjs,3cgwxc,RobertMuldoonfromJP,2,Wed Jul 8 05:06:45 2015 UTC,"Just enter $0 or $4 in your browser's JS console. $0 will target the most recently selected element, $1 the 2nd most recent, etc."
angularjs,3cgwxc,muffsponge,5,Wed Jul 8 13:21:56 2015 UTC,I use angular.element a lot as I feel a lot more comfortable in the console.  You can also pass in selectors to angular.element (i believe it uses jqLite) so you can select a scope tied to a specific class/element
angularjs,3cgwxc,zafety,3,Wed Jul 8 03:08:46 2015 UTC,This is awesome.
angularjs,3cim3w,halibut_master,1 point,Wed Jul 8 04:59:36 2015 UTC,look at events.js line 85. Is that your code or some library?
angularjs,3cim3w,utuxia,1 point,Wed Jul 8 05:34:37 2015 UTC,"There is 9 events.js files in the whole project, scattered around everywhere. I have downloaded the official files - shouldn't it be working as it is?  Any idea how to locate the events.js that is causing it? Because there are multiple different ones called the same but having different source."
angularjs,3cim3w,utuxia,1 point,Wed Jul 8 05:45:25 2015 UTC,ack 'throw er;' .
angularjs,3cim3w,utuxia,1 point,Wed Jul 8 05:48:59 2015 UTC,Apparently none of these 9 files contains that text.  Do you think I'll be able to complete the tutorial without using the E2E testing?
angularjs,3cim3w,chazzlabs,1 point,Wed Jul 8 05:52:54 2015 UTC,sure. testing is optional.
angularjs,3ci2b2,natdm,1 point,Wed Jul 8 01:59:18 2015 UTC,I'm wondering if this is somehow because the page is rendered in EJS and the views are HTML.   I will remake the app in pure html and see what goes on.
angularjs,3ci2b2,pitne,1 point,Wed Jul 8 04:59:42 2015 UTC,"Doesn't change anything. All my pages are html, none rendered by Node. Still have the issue."
angularjs,3ci2b2,pitne,1 point,Wed Jul 8 16:16:23 2015 UTC,"i would do 'angular.module('myApp').controller/directive/etc' because intellisense doesnt recognize the myApp variable in separate files. also i wouldnt bother with the ['',function(){}] minfication technique and instead i would use a gulp task runner to do it for you, saves lots of time  im not seeing the <div ng-view></div> in the html where the template gets inserted when the route in the url matches your configured routes"
angularjs,3cgc5p,batoure,1 point,Tue Jul 7 18:16:26 2015 UTC,"The UTF8 magic may be helpful - or very harmful. Otherwise, if you can leave Internet Explorer 9 behind, just use the native methods: https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64  Lastly if you find yourself dealing with a log of binary data, take a look at Blob and ArrayBuffer. These will be faster and use much less memory."
angularjs,3cgc5p,realityking89,1 point,Tue Jul 7 20:46:14 2015 UTC,"I think updating the utf8 part to make it optional would be a good idea. the native methods are cool but seem to have been problematic at times in projects that I worked on. This felt like a no muss to fuss option, wanted to be able to have something I could inject where if I want to know how it works go I can go look at it in this case."
angularjs,3cg03j,jm_me,1 point,Tue Jul 7 16:54:20 2015 UTC,I have created an Ionic app that dynamically configures the states based on a JSON file. It shouldn't be too hard to refactor it so it uses a database.   https://github.com/beeman/ionic-dynamic
angularjs,3cg03j,beeman_nl,1 point,Tue Jul 7 20:19:53 2015 UTC,"I'll check it out, thanks."
angularjs,3cg03j,PeasDude,1 point,Wed Jul 8 02:49:25 2015 UTC,Maybe this.
angularjs,3cg03j,e82,1 point,Tue Jul 7 22:53:51 2015 UTC,I've seen that one. It doesn't really address the issue I'm having of getting the data there. Thanks.
angularjs,3ceud3,orizens,1 point,Tue Jul 7 10:43:54 2015 UTC,404 on the repo.
angularjs,3ceud3,ShepherdBookshelf,1 point,Tue Jul 7 22:46:31 2015 UTC,hi. Please try again - the url to the repo is github's. it should be online.
angularjs,3ceud3,Pumpt,1 point,Fri Jul 10 08:40:25 2015 UTC,"Tried to check it out twice from within Alien Blue and it just spun, then crashed the app."
angularjs,3cbfg4,kanzelm3,1 point,Mon Jul 6 16:32:26 2015 UTC,nice
angularjs,3cbfg4,aakilfernandes,1 point,Mon Jul 6 19:35:12 2015 UTC,"Really nice project! Could you please make it so your landing page for it either doesn't play sound, or has a way to turn it off though? If I were to use this in a site, I would make sure the video didn't have sound."
angularjs,3cbfg4,jpallen,1 point,Mon Jul 6 21:06:38 2015 UTC,"Yeah I can turn it off, there is already an option for that, I just have it enabled on the demo site."
angularjs,3cbfg4,reddotyg,1 point,Tue Jul 7 02:40:40 2015 UTC,so cool! great job
angularjs,3cbfg4,jakblak90,1 point,Mon Jul 6 22:54:24 2015 UTC,Thank you!
angularjs,3cbfg4,tummy_yummy,1 point,Tue Jul 7 02:53:43 2015 UTC,"Cool, nice contribution."
angularjs,3ceq91,tony_soulchild,1 point,Tue Jul 7 09:46:33 2015 UTC,This may help http://stackoverflow.com/questions/16703276/angular-watch-for-ngshow-nghide-changes-in-ancestors-that-affect-child-dom-ele
angularjs,3ceq91,dhaneshpurohit,1 point,Tue Jul 7 17:43:40 2015 UTC,Try this http://plnkr.co/edit/9lNTNwM8OpIvsKiDKRYI?p=preview
angularjs,3cdhyq,pfooti,1 point,Tue Jul 7 01:44:30 2015 UTC,"The ui-bootstrap project is more than likely the most complete. Angular Material is getting there, but still has a ways to go in terms of bug fixes / completion."
angularjs,3cdlfp,compNerd0101,1 point,Tue Jul 7 02:13:09 2015 UTC,"Your nvd3 directive is invoked before the $http.get is resolved in the controller therefore options is undefined therefore your chart is never created in the updateWithOptionsfunction. (whew, I think the angular-nvd3 is very overly complicated).  You can quickly fix this by adding ng-if=""options"" to the nvd3 tag but the best way may be to use a resolve."
angularjs,3cdlfp,Hypercubed,1 point,Tue Jul 7 04:54:14 2015 UTC,"I'm not exactly sure what you mean by using a resolve in a different way. Also does it matter when in the nvd3 tag to include the    ng-if=""options""    ?"
angularjs,3cdlfp,Hypercubed,1 point,Wed Jul 8 16:26:01 2015 UTC,"Adding the ng-if=""options"" actually worked thank you. What exactly does it do though/why does it make it work...I have only used ng-if for the classic ""if this, display this"" usage."
angularjs,3ca8yj,utuxia,1 point,Mon Jul 6 09:16:50 2015 UTC,"Are you using angularitics?  I haven't had any issues with tracking, but I did comment out the pageview track on the GA embed code and programmatically track one after I update the title/desc/ogp data for the page."
angularjs,3ca8yj,devourment77,1 point,Mon Jul 6 12:28:32 2015 UTC,I'm using segment.io with GA enabled. I fire a page event when route change succeeds. This seems to be working fine as far as event tracking goes. The problem is mainly with keywords in webmaster tools. Data just seems off.
angularjs,3cc8av,saladfingers6,1 point,Mon Jul 6 19:55:51 2015 UTC,"i'm no expert on $resource, but i think Alt 1 allows ajax, while Alt 2 does not.  in other words, your program will halt on Alt 2 while it waits for the data, whereas with Alt 1 it'll keep chugging until its promise is fulfilled, at which point it'll loop back, handle the data, then continue."
angularjs,3cc8av,my_ledge_ends,1 point,Mon Jul 6 20:43:46 2015 UTC,"No, a program will not halt execution while waiting in alt 1. It's a simple callback, meaning everything else will execute while the callback waits to be called."
angularjs,3cc8av,paparhein,1 point,Tue Jul 7 03:31:06 2015 UTC,thanks :) so would alt 2 simply be a more verbose version of alt 1?
angularjs,3cc8av,my_ledge_ends,1 point,Tue Jul 7 05:26:33 2015 UTC,There's really no difference besides callback vs promise preference.
angularjs,3cc8av,paparhein,1 point,Tue Jul 7 05:28:14 2015 UTC,"I got used to the first syntax because if you're gonna use $q to combine the requests you must use an array of promises as argument.  Besides, I think they work the same"
angularjs,3cc8av,fixthemess,1 point,Wed Jul 8 22:15:14 2015 UTC,Ok thanks.
angularjs,3c9cq7,ShMcK,1 point,Mon Jul 6 02:46:46 2015 UTC,Because angular is awesome. I'm not going to go with a stack that forces me to use mongodb though.
angularjs,3c9cq7,lampshadish2,1 point,Mon Jul 6 12:32:32 2015 UTC,"I should have been more clear. Meteor has official support for Redis, & Mongo, with community built support for PostGresSQL, AlaSQL & RethinkDB as well."
angularjs,3c6oay,sdeering,2,Sun Jul 5 10:11:08 2015 UTC,"Hi guys, I love AngularJS and as a side personal project I made this website https://ngmodules.com. Can I ask if it is useful and how it can be improved to help you find decent AngularJS modules? There is over 1,500 modules so far and tagging, categories, filters by Core Angular Version, modules licenses and module type: Directive, Services etc and you can also login with GitHub and save modules to a personal favorites list. There is also a stats page which might be useful https://ngmodules.com/stats and a the core focus of the project is detailed here: https://ngmodules.com/about What features would you like to see? Thanks in advance. Sam"
angularjs,3c6oay,cport1,3,Sun Jul 5 10:14:57 2015 UTC,Your desktop version has some divs overlapping .. OSX Chrome Version 45.0.2432.4 canary (64-bit)  edit: screenshot:: http://i.imgur.com/pl75cAA.png
angularjs,3c6oay,jameswyse,1 point,Sun Jul 5 18:59:57 2015 UTC,"Oh boy that doesn't look too good! I'm using regular Chrome, I'll try it with Canary. Thanks cport1"
angularjs,3c6r61,Base10Propaganda,7,Sun Jul 5 11:04:15 2015 UTC,Yeoman and the Angular Fullstack includes passportjs as well as a custom REST authentication methods included.
angularjs,3c6r61,ionchariot,2,Sun Jul 5 11:32:51 2015 UTC,https://github.com/sahat/satellizer
angularjs,3c6r61,twa8,2,Sun Jul 5 11:58:37 2015 UTC,"I've used Firebase and Parse.com on separate apps for the Authentication/Authorization.   Firebase is pretty good, their boilerplate AngularFire is well rounded, basic, and messy with organization. But otherwise the API is fantastic and so are the security permissions.  Parse is what I'm working with now and haven't had much experience with it. So far it's good. The security settings are a bit foggy though.  Haven't tried any of the other suggestions yet."
angularjs,3c6r61,orderofout,2,Sun Jul 5 14:36:43 2015 UTC,https://github.com/witoldsz/angular-http-auth  http-auth is the best all around response framework for client side auth
angularjs,3c6r61,batoure,2,Sun Jul 5 20:07:29 2015 UTC,Brilliant - that looks perfect.
angularjs,3c6r61,batoure,1 point,Sun Jul 5 20:10:48 2015 UTC,If you have additional questions about it feel free to ask here. I am not the original developer but I have done some significant work wrapping code around it and making it work with token based authentication.
angularjs,3c6vmv,_httpete_,1 point,Sun Jul 5 12:20:42 2015 UTC,Neat.
angularjs,3c6vmv,PilsY86,1 point,Mon Jul 6 05:09:27 2015 UTC,"It's actually quite nice, apart from having the template, directive & controller all within the one file (altho that might be personal preference...)  Richard / Pilsy http://cleverstack.io"
angularjs,3ca9mh,tonylee0707,6,Mon Jul 6 09:26:28 2015 UTC,"Everything will be obsolete in 2-3 years.  In the evolution of JavaScript frameworks, we're just getting to the point where things are starting to mature.  I'm talking the end of the beginning, not the beginning of the end.  Anyway, when you throw WebAssembly into the mix, I have no idea what 2-3 years from now will look like."
angularjs,3ca9mh,RagingAnemone,0,Mon Jul 6 10:14:30 2015 UTC,"right right. Damn, its not like excel or word where you learn it once and you can rely on it to be the same in a 100 years... thanks for the reply"
angularjs,3ca9mh,vinnl,1 point,Mon Jul 6 10:37:42 2015 UTC,"Ha, didn't they introduce the Ribbon at some point? :P"
angularjs,3ca9mh,wtsn,0,Mon Jul 6 13:09:02 2015 UTC,probably the single biggest change in word/excel history!
angularjs,3ca9mh,compubomb,1 point,Mon Jul 6 19:37:41 2015 UTC,"That charting rewrite that came with the ribbon was brutal, too!"
angularjs,3ca9mh,UnicornOfHarmony,3,Thu Jul 9 01:53:10 2015 UTC,"like any good framework, angular 1.x will splinter off into it's own world, and people will start using angularjs 2.x stuff, how quick did the python people switch from 2.x to 3.x? took forever, and still haven't completed the transition."
angularjs,3ca9mh,pfooti,0,Mon Jul 6 09:34:49 2015 UTC,"so does that mean if I build an app using 1.x now, could it still be functional/working even after Google stops providing support?  Sorry for the stupid question. As you can tell, Im a hardcore noob"
angularjs,3ca9mh,OrionTurtle,8,Mon Jul 6 09:43:41 2015 UTC,"Code does not stop working just because someone stops providing support :) you don't get new features, but everything already built is going to work just fine."
angularjs,3ca9mh,m0okz,1 point,Mon Jul 6 10:17:47 2015 UTC,ah!!! right! that changes everything! thanks
angularjs,3ca9mh,m0okz,1 point,Mon Jul 6 10:36:26 2015 UTC,The angular 1.4 branch will be supported for at least a year after 2.0 becomes production ready.
angularjs,3ca9mh,pitne,1 point,Mon Jul 6 13:25:28 2015 UTC,"http://www.infoq.com/news/2015/03/angular-2-concerns-addressed   One of the biggest worries was about how long Google was going to support version 1.X. To allay these fears, Google has taken a new approach to determining where the community is at and what they want. The Angular 1.X project will continue to be hosted at angularjs.org. Angular 2.0, now in Alpha, will be hosted at angular.io.  The team will look at the traffic to both sites, along with GitHub, in order to determine where the community is still invested. This means that if a majority of traffic is still at angularjs.org, the team will continue to focus resources on 1.X. Angular 1.X will not end life until the majority of traffic has moved to 2.0. ""We'll continue releasing Angular 1 releases until the vast majority of you migrate to Angular 2,"" said Minar."
angularjs,3ca9mh,pitne,1 point,Mon Jul 6 16:25:26 2015 UTC,Yes it will always work.
angularjs,3ca9mh,Richardinho,1 point,Mon Jul 6 10:19:58 2015 UTC,haha... thanks. Sorry
angularjs,3ca9mh,AfterNite,2,Mon Jul 6 10:36:43 2015 UTC,Don't apologise! Nothing wrong with asking questions especially in this industry.
angularjs,3ca9mh,Richardinho,-6,Mon Jul 6 11:49:08 2015 UTC,your a hard core idiot. your stupid ass posts like this are what fuel the ignorance in the community
angularjs,3ca9mh,Chryssie,5,Mon Jul 6 17:29:17 2015 UTC,"your a hard core idiot   Agreed. But you cannot imagine the irony of this single comment. I would normally stop here but you probably will never understand it if I didn't explain further.  It is not ""your a hard core idiot"", it is ""You're a hard core idiot"". Why is it ironic? Well, you are criticising me for not knowing that AngularJS 2.0 will continue to work (although I am sure you are born with that knowledge) but at the same time, you make a commonly made but very basic English grammar mistake while pointing it out!   your stupid ass posts like this are what fuel the ignorance of the community.   Ah, its like you are writing down the words I am thinking right now :)"
angularjs,3ca9mh,vinnl,1 point,Mon Jul 6 19:05:02 2015 UTC,Lol I like it
angularjs,3ca9mh,vinnl,2,Mon Jul 6 19:32:52 2015 UTC,have an upvote lol
angularjs,3ca9mh,aaaqqq,3,Mon Jul 6 19:37:01 2015 UTC,"If you know Angular1 and  can get 2-3 years worth of work on contractor rates then your weeks of learning it will have been more than worthwhile. In fact, although Angular2 is a rewrite it still uses many of the concepts in Angular 1 such as data binding and dependency injections so if you understand these then the transition to Angular 2 will not be too painful. Most frameworks have something in common so it's never a waste of time learning one as you will always be able to apply that knowledge to others."
angularjs,3ca9mh,MrGirthy,1 point,Mon Jul 6 10:05:26 2015 UTC,"Ah Im not a developer and wanting to learn to build apps on the side. Ok, so there are many transferables... so just asking the question I asked above,  if I build an app using 1.x now, could it still be functional/working even after Google stops providing support?"
angularjs,3ca9mh,go-ive,1 point,Mon Jul 6 10:10:55 2015 UTC,Support has no relevance as to whether your  app will work or not...
angularjs,3ca9mh,pfooti,1 point,Mon Jul 6 11:02:17 2015 UTC,Yes. 'Support' means that Google will continue to develop the code and fix bugs. Once you have a copy of the code itself in your browser (e.g. angular.js) then this will work forever. Google have no control of scripts within your own application!
angularjs,3ca9mh,pfooti,2,Mon Jul 6 16:36:00 2015 UTC,"One day, I hope Angular 1.x will be like the COBOL of the web and finally I will become rich.  (Please don't hurt me, I'm only joking)  Realistically, the way our Angular 1.x project is set up, I'm hoping to make a translator between the object definitions, which should be possible I think."
angularjs,3c5bz0,AfterNite,6,Sat Jul 4 23:06:10 2015 UTC,Why would it be great to find a solution without using resolve? That is its entire purpose.
angularjs,3c5bz0,paradox41,1 point,Sun Jul 5 01:35:50 2015 UTC,"I guess I didn't fully understand the purpose of a promise then, once I implemented the resolve it worked perfect, though it seems a lot to add when you have a bunch of routes, it works so all good, thank you :)"
angularjs,3c5bz0,paradox41,1 point,Tue Jul 7 12:26:11 2015 UTC,"Great to hear. I should note that resolve blocks rendering of the view until all the promises have been resolved. If there are a lot of requests, that might not be desirable. In which case you actually load the non-essential stuff - if there is any - in the controller."
angularjs,3c5bz0,paparhein,1 point,Wed Jul 8 11:02:55 2015 UTC,"Most pages require some form of dynamic content, besides from that there shouldn't be any massive promises. Thanks for the heads up though, I guess a small animation somewhere would help.  Ng-loading looks cool or just a spinner."
angularjs,3c5bz0,dorkcrusher51,4,Wed Jul 8 12:13:23 2015 UTC,"use ng-cloak. it sounds to me like you don't have the proper css rules in place.   [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {     display: none !important; }"
angularjs,3c5bz0,gdi2290,2,Sun Jul 5 02:01:27 2015 UTC,Resolve was made for this purpose
angularjs,3c5bz0,feelingsofwhite,2,Sun Jul 5 01:57:46 2015 UTC,resolve
angularjs,3c5bz0,8bitsquid,1 point,Sun Jul 5 00:57:10 2015 UTC,"Okay firstly:resolve. However I may guess why you want to avoid that because I kinda do in one spot. What I have is a loading state  (and that maps to the url) which on controller object conduction programmatically changes state to another (which uses resolve, and also cannot be navigated to directly by url). So user sees a loading screen and later sees a fully rendered screen. Resolve is slick and awesome but can make links feel like they didn't worth. User clicks. Nothing happens. 3 seconds later ui-view changes. Sometimes a load screen is in order.  And resolve is a good thing. Ymmv"
angularjs,3c4h5a,jasonrichardsmith,6,Sat Jul 4 18:15:58 2015 UTC,seems like a lot of 'hoops' to jump through to see the admin side...
angularjs,3c4h5a,chazeg,1 point,Sat Jul 4 19:07:54 2015 UTC,The login requirement has been removed.
angularjs,3c4h5a,CorsairRazion,1 point,Sun Jul 5 12:21:19 2015 UTC,"Well I am assuming most people on here are almost always signed into github, so that is two clicks and the issue submission is just a subject line saying ""Request admin access."" Sounds like two minutes of work."
angularjs,3c4h5a,CorsairRazion,4,Sat Jul 4 19:16:24 2015 UTC,"People are inherently lazy. There's a bunch of CMS out there, and almost all of them provide a demo with a preset username and password.   Sure, people could do the ""2 minutes of work"", but the point is to present your product in a way that requires as little work as possible. Otherwise you're going to be skipped over for other options."
angularjs,3c4h5a,CorsairRazion,0,Sat Jul 4 19:30:31 2015 UTC,"I agree most people are lazy, but to be honest, I don't know of another CMS that is completely API driven via AngularJS.  There are also only like two other CMS systems written in Go and neither of them offer a demo."
angularjs,3c4h5a,itgivesyouwings,2,Sat Jul 4 20:23:16 2015 UTC,"RespondCMS is Angular + API driven. You can also see a visual representation of most of the features without having to do any work. Your site tells me nothing about the project. I can't see any images or screenshots of what it looks like and how it works. The demo isn't easily accessible.  All I'm trying to say is that you need to market your product effectively if you want people to try it out and use it, and that isn't happening right now. If I were to come across your page during a google search of Angular CMS, I would immediately close the tab since there's nothing to draw my interest."
angularjs,3c1f37,how-to-seo,2,Fri Jul 3 21:46:06 2015 UTC,Awesome intro:D
angularjs,3bzx47,thesystemx,1 point,Fri Jul 3 14:44:12 2015 UTC,Does anyone know if there are performance improvements in a big app using the controller as syntax (and thus not injecting $scope)?
angularjs,3bzx47,timonvs,1 point,Sat Jul 4 12:18:28 2015 UTC,"Not that I've ever seen. I maintain a large app and have never had any issues.  Edit: I just realized it was improvements not issues.    In regards to performance improvements, it's still using scope behind the scenes, still setting up watchers, etc."
angularjs,3bzx47,BStruthers,1 point,Sat Jul 4 12:52:21 2015 UTC,"Yeah the biggest problem is mobile. We've got a timeline which loads more items once you reach the bottom of the page, and the app really slows down once you've loaded quite a lot of items (on mobile that is)."
angularjs,3bzx47,timonvs,1 point,Sat Jul 4 12:54:59 2015 UTC,Changing to ctrl as wouldn't help you there. How many DOM elements are you creating? How many watchers are there? Are you one way binding when you can?  Track by index?
angularjs,3bzx47,BStruthers,1 point,Sat Jul 4 13:11:11 2015 UTC,Yeah we're already using one way binding and tracking by index ;).
angularjs,3bzx47,timonvs,1 point,Sat Jul 4 13:26:53 2015 UTC,"Yeah, those are the quick fixes.    A potential approach would be limiting the DOM elements to only those items in view.  Scrolling up or down would replace the update the existing elements with new data."
angularjs,3bzx47,BStruthers,1 point,Sat Jul 4 13:38:48 2015 UTC,"thats because each time you are adding {{ }} it is setting a watcher  I am doing the same thing as you, but i have no issue loading 2000+.  solution?  use one way data binding when possible (i.e titles)   <ng-repeat=""myVar for array""> {{::myVar}}   This will create 1 way databindings (only available i think 1.2+?)  If you are using something less, i recommend bindonce module: https://github.com/Pasvaz/bindonce"
angularjs,3bzx47,T-rex_with_a_gun,1 point,Mon Jul 6 19:01:22 2015 UTC,I'm using one way binding :). But thanks anyways.
angularjs,3bzx47,timonvs,1 point,Mon Jul 6 19:13:45 2015 UTC,Can you still do broadcast and emit events with controller as?
angularjs,3bzx47,devourment77,1 point,Sat Jul 4 12:37:38 2015 UTC,Just inject $scope into the controller so you can broadcast/emit.
angularjs,3bzx47,BStruthers,1 point,Sat Jul 4 12:51:13 2015 UTC,"Shouldn't your directives be watching for changes, not services"
angularjs,3bzx47,ogrechoker,1 point,Sat Jul 4 13:19:47 2015 UTC,"There's a time and a place for all things.    That said, I haven't made much use of either broadcast or emit.  Instead, relying on directives and controllers to communicate state changes."
angularjs,3bzwxx,I_know_HTML,1 point,Fri Jul 3 14:42:52 2015 UTC,"I don't really know what you'd tie to Angular. Essentially, all Angular would be providing is the wrapping container and model for whatever library provides the SVG portion. That being said Raphael is extremely powerful at what it does, but depending on what you are building you may be able to go with a more focused solution. For instance, D3 is fantastic for data visualizations. Three.js is an impressive WebGL wrapper. Etc etc.   Your question is focused on the SVG part, as such, the Angular portion is kind of a moot point since Angular does little to interact with the SVG."
angularjs,3bzwxx,one800higgins,1 point,Fri Jul 3 17:46:45 2015 UTC,You can tie Angular directly to SVG. See https://github.com/DavidSouther/flaming-sansa and https://www.youtube.com/watch?v=m9-MwCSG15w
angularjs,3bz9v9,judd48,2,Fri Jul 3 10:32:20 2015 UTC,You can't build it with 2.0 today because it doesn't exist as a complete solution. Parts of it don't even exist yet.  1.x is going to be around for a long time after 2.0 is released. I've embraced that I'll have to change things for 2.0. It's the nature of web development for things to change with time.
angularjs,3bz9v9,dorioo,1 point,Fri Jul 3 11:06:51 2015 UTC,"Start with 1.4. When 1.5 and the new router arrives, migrate to the new router. 1.x will slowly receive parts from 2.0 and in the end the migration to 2.0 will be easier later. You could even start using TypeScript today, even though example code online for angular mostly are in plain js."
angularjs,3bz9v9,saladfingers6,1 point,Fri Jul 3 11:54:08 2015 UTC,Did you know that our subreddit has a FAQ? And that there's only one question on it?  https://www.reddit.com/r/angularjs/wiki/index
angularjs,3bwgbq,vivainio,2,Thu Jul 2 18:40:23 2015 UTC,"We are migrating a bunch of ES6 code to TypeScript, and are compiling a ""scratchpad"" of recommended patterns.  If you have feedback (""now that's obviously all wrong!"") or good ideas, fire away. This is still very much a living document."
angularjs,3bwgbq,Hypercubed,2,Thu Jul 2 18:44:55 2015 UTC,"Why do you choose to add services (and controller and directive) to angular within each ES6 module file?  Would it not increase re-usability (at least in the case of services) if the ES6 modules were standalone, exporting only the class, then imported and added to angular in the ""feature specific root module"" ?  Then in your ""feature specific root module"" why not export the module name?  So your ""feature specific root module"" would be:  // add things to the created angular module here import MyService from ./MyService' import FancyButtonDirective from './FancyButton';  angular   .module('fbSomeFeature', ['dep1', 'dep2'])   .service('MyService', MyService)   .directive(""fbFancyButton"", () => new FancyButtonDirective());  export default 'fbSomeFeature';"
angularjs,3bwgbq,Hypercubed,2,Fri Jul 3 02:49:30 2015 UTC,"We weighed the options back in the day (when using ES6), and the team agreed that it's more convenient to have those next to the class. Once we want to use the class outside the usual angular context, it's easy to remove those lines.  One benefit is seeing exactly how it's exposed to Angular from the same file (e.g. fbFancyButton => fb-fancy-button).  Clear drawback of this is e.g. when renaming angular modules - you have to touch every file.  We also have a good bunch of ""normal"" (non-angular) ES6 modules, that obviously don't have such annotations."
angularjs,3bwgbq,skitch920,2,Fri Jul 3 07:48:01 2015 UTC,I see... how about unit tests?  Do your unit tests of a service happen within the angular module or do you test the class directly (i.e. import MyService ...)?  If you test the class directly you might have trouble with the angular.module('fbSomeFeature') line in each ES module file.  I hope my questions are helpful... perhaps good points to add to your style guide.
angularjs,3bwgbq,Hypercubed,2,Fri Jul 3 08:31:41 2015 UTC,"Yup, good questions, and something we discussed internally as well :).  When you write unit tests with Karma, you use angular DI to create the modules. Therefore, there is no need to make classes ""individually testable"".  I created a stub page for ""further discussion"", I'll add some of these points there (trying to keep the main page minimal)."
angularjs,3bwgbq,hahaNodeJS,2,Fri Jul 3 09:05:53 2015 UTC,"Some thoughts from my own migration:  /*@ngInject*/ contructor(private $http: ng.IHttpService, private MyService: MyService) { }   ng-annotate - No sense in writing the same thing twice...  link(scope: ng.IScope, element: ng.IAugmentedJQuery,          attrs: ng.IAttributes, controller: any): void {     element.find(""#main-title"").text(controller.text); }   It's a function, so why not take advantage of the Class syntax?  Like /u/Hypercubed, I just export all the classes and maintain a single angular Module.ts file.  It re-exports as needed and has an export default of the angular module.  This way, I know what all is bound in a module:  export {default as MyService} from './MyService'; export default const MODULE: angular.IModule =     angular.module('foo', [             'bar'         ])         .service('MyService', MyService);   So for a sub project that is dependent, you can just use the angular module's name property:  import Foo from 'foo'; export default const MODULE: angular.IModule =      angular.module('foobaz', [             Foo.name     ]);   Overall, I try to avoid using the word angular in multiple files, since it won't be there in 2.X"
angularjs,3bwr3t,Threat_Level_PI,1 point,Thu Jul 2 20:00:30 2015 UTC,"Honestly, if you want starter code, you can't go wrong with Github. Here's one I found within a few seconds of a simple Github search."
angularjs,3bwr3t,my_ledge_ends,1 point,Thu Jul 2 20:15:27 2015 UTC,I was looking for the same thing and ended up making my own. Check it out: http://adamweeks.com/2015/06/29/angular-base-seed-project-with-gulp/
angularjs,3bwr3t,misterlazer,1 point,Fri Jul 3 02:13:58 2015 UTC,What kind of issues are you running into building your own gulp process?
angularjs,3bwr3t,accul2ate,1 point,Fri Jul 3 02:23:04 2015 UTC,"I'm in the middle of my first project where I implemented Gulp. I've used Codekit for the longest time, but recently I'm moving more and more to command line tools, so decided to get stuck into Gulp.  My priority was simply to achieve what I had used Codekit for:    compile my LESS into a single style.css file code injection / live-reload stuff JS minification   This is the file that I currently have in place: http://pastebin.com/raw.php?i=c7wRwH3c  And in case you need it, my package.json file: http://pastebin.com/raw.php?i=9jFeN1kF  Good luck"
angularjs,3bv84r,CodeNewa,6,Thu Jul 2 12:42:56 2015 UTC,"We use highcharts in production right now and while it produces good output reliably, it can be a big pain to configure so we have taken the configuration responsibility by wrapping it in our own directive; It was not fun.   I'm currently messing with getting D3 to render a top level menu/main page and that's going fairly well. From what I can see so far, D3 is pretty powerful.   I haven't used the other charting tools that you mentioned but maybe I'll look into them as part of this D3 tech spike."
angularjs,3bv84r,YashdalfTheGray,6,Thu Jul 2 13:41:48 2015 UTC,"Hey there, I'm using Highcharts as well in production and I'm not sure what exactly you mean by it being a pain to configure?  I'm currently also pairing Highcharts with highcharts-ng (https://github.com/pablojim/highcharts-ng) and it's been working out great for me."
angularjs,3bv84r,cYnbios,1 point,Thu Jul 2 15:41:20 2015 UTC,"So I can't comment on this further since I haven't directly dealt with Highcharts, I just hear everyone working on highcharts going on and on about how much of a pain it is during our standups. But, I will let the team know about highcharts-ng, maybe it could help!  Thanks for that!"
angularjs,3bv84r,YashdalfTheGray,1 point,Thu Jul 2 16:06:32 2015 UTC,Please let us know what you find out. I'll check out the highcharts-ng as well.
angularjs,3bv84r,ours,1 point,Thu Jul 2 21:35:12 2015 UTC,"It takes a while to get the hang of it, to get the charts to look just the right way you want them to. Honestly their documentation goes a long way but there are a few things that require way to much dark magic to get to work.  All in all I still think it's very good."
angularjs,3bv84r,redbull188,1 point,Fri Jul 3 05:02:05 2015 UTC,"Same. I made a service to handle most of the config, but it doesn't cover everything."
angularjs,3bv84r,nbktdis,1 point,Thu Jul 2 14:04:54 2015 UTC,"We are using highcharts and highcharts-ng in production and it is working fine.  One trick with highcharts-ng is that it doesn't handle everything highcharts can do, so you need to pass the extra config items into the options parameter."
angularjs,3bv84r,gardnebm,6,Sun Jul 5 23:38:13 2015 UTC,"Straight D3 was really hard for me to wrap my head around.  I still want to learn it more in depth, but just haven't had the time.  angular-nvd3 was pretty easy to use and has a lot of awesome charts."
angularjs,3bv84r,redyar,1 point,Thu Jul 2 13:49:16 2015 UTC,"+1, I am using it, its pretty simple"
angularjs,3bv84r,gardnebm,1 point,Thu Jul 2 18:57:46 2015 UTC,"I've also heard good things about Highcharts, but have not used it myself.  edit: FYI, its only free for non-commercial projects."
angularjs,3bv84r,one800higgins,1 point,Thu Jul 2 19:21:36 2015 UTC,"nvd3 looks awesome. /u/shouperman pointed out the library not being updated at some point causing issues. But as long as I'm careful about the updates, it should be ok for me. That's one more library to look at next week. :)"
angularjs,3bv84r,shouperman,3,Thu Jul 2 21:37:56 2015 UTC,Use D3! It's easily the best charting framework out there and it's not even a charting framework. Integrating it with Angular isn't too bad.
angularjs,3bv84r,Switche,0,Thu Jul 2 14:01:36 2015 UTC,"Thanks /u/gardnebm pointed to angular-nvd3. I'll definitely look at it. It seems to be more than a charting framework. So, it could be an overkill."
angularjs,3bv84r,Strat-O,2,Thu Jul 2 21:39:54 2015 UTC,"If you have the time, I would recommend that you pick any of the base libraries (e.g. D3 or chart.js) and build your own directives with them for three reasons.   1) Shorter dependency chain should lead to fewer update/upgrade fixes.  I was using a directives library on top of NVD3, which is itself on top of D3.  One party updated their library (or didn't) and things broke down. 2) Less library-specific learning / code-wrangling.  If you learn D3, you can build D3 charts with any framework.  If you learn the 'my-awesome-chart-directives' way to define/code the charts, you end up locked into their solution.  As I mentioned above, something broken in my chain.  I didn't know enough about either NVD3 nor D3 and their many methods/settings, so I was faced with learning 3 libraries to fix one simple chart issue. 3) Customization to your needs.  I've looked at many different charting packages, and none of them were done the same way.  They're all opinionated toward their needs because the scope of parameters/customization is too prohibitive.   My demands are rather light (one pie and one series) but with specific use cases, so your mileage my vary.  Also, keep in mind the method in which you want your charts drawn; SVG (D3) vs canvas (chartjs).  SVG seems more resilient, but I'm not a fan of how clunky messing with the DOM becomes."
angularjs,3bv84r,AlmightyThumbs,1 point,Thu Jul 2 14:40:03 2015 UTC,"I definitely plan on learning D3 as it seems to be a very powerful tool capable of much more. However, I don't think I have the luxury of doing that right now. If my stakeholders ask for more customization, I can look at this then."
angularjs,3bv84r,arodang,2,Thu Jul 2 22:01:18 2015 UTC,"Be careful! Your stakeholders rely on you for a professional evaluation. Now is the time to caution them in the dangers of a short release cycle relying on shortcuts.  Armed with that decision in their hands, they'll be more likely to see you as an ally to do it right after it is done quickly, if they decide to, rather than stick you with maintaining a sub-par system they can pin you to. Your career can suffer on these setbacks as much as the system does.  I'd take the previous advice straight to them. It's an option they should consider, or at least hear out."
angularjs,3bv84r,mbsurfer,2,Fri Jul 3 01:44:37 2015 UTC,"Being serious here, why use any charting library at all?  If the graphics you are doing is relatively simple and straight-forward and allows you to make it exactly the way you want it then, yeah, maybe use a graphic package.  Otherwise, use SVG directly in an angular view.  Because SVG is an XML format similar to HTML, you can make custom graphics in the same vein as building an HTML interface in Angular and it will feel almost like the same development process.  Also the graphics can be interactive."
angularjs,3bv84r,tuhoojabotti,1 point,Thu Jul 2 15:41:52 2015 UTC,"It sounds like fun and is definitely a side project that I can look at but I am looking for a straight forward charting library for this prototype. So, I'll pass on this for now.   I did not want to make a decision on the charting libraries without looking at other options. I've found great libraries to look at in this thread."
angularjs,3bw1w5,natdm,3,Thu Jul 2 16:52:26 2015 UTC,"rather than stressing on this for another six hours, you could just use angular ui, which has wide usage and good testing"
angularjs,3bw1w5,my_ledge_ends,1 point,Thu Jul 2 17:45:45 2015 UTC,I'll take a look at it. Thanks!  Definitely not stressing on this for six hours. :-)
angularjs,3bw1w5,itgivesyouwings,2,Thu Jul 2 17:52:10 2015 UTC,You could use ui-router and have handy things like: ui-sref and ui-sref-active  It makes it super easy.
angularjs,3brn3r,lenogen,4,Wed Jul 1 16:22:54 2015 UTC,"You've got the right mindset.  At my company we've wound up splitting the different ""pages"" into their own mini angular application within our rails app.  Basically everything gets put into it's own module (UI gets one, Model services each get one, etc), and included in the ""page"" app only if it's needed.  So each of our ""pages"" gets a base application.js that includes all common things across every page and then a specific angular module that includes only what it needs (controllers, directives, etc).  So like you mentioned, each page becomes it's own mini-app.  We still use rails forms for signup and login.  One huge-ass SPA is great... in tutorials.  But maintaining it in real life, scaling, etc, is a major pain in the ass."
angularjs,3brn3r,pipituu,3,Thu Jul 2 02:29:09 2015 UTC,"We recently came to this same exact conclusion. We fought it for a while because SPA all the things, but in the end of the day, you have to get work done and we had to scale and breaking up as you just described was the way to go. Once we let go of the SPA unicorn dream, all was well again."
angularjs,3brn3r,jasonsolis,2,Thu Jul 2 12:03:42 2015 UTC,"Glad I am not alone. I do  love the UX aspects of SPA but, the project also has to get done and be stable.  I recently checked out Rails 5 and it looks like it has some interesting features that might mitigate the need for a full SPA (ActiveCable, Turbolinks 3).  Thanks for the input!"
angularjs,3brn3r,pipituu,1 point,Thu Jul 2 13:34:14 2015 UTC,"That is exactly what I have pictured...I am even using Rails. I know just about everything CAN be done SPA-style but, there are certain things I would feel more comfortable if it was kept in the server.  Thanks for the feedback!"
angularjs,3brn3r,m3l7,2,Thu Jul 2 13:31:53 2015 UTC,"Yeah, using Angular with Rails is very different then using it with something thin like Node.js.  There's not really a point to using rails unless one is going to leverage all the great back-end stuff it comes with ... which really isn't leveraged if you go 1 big SPA.  I've done a production ONE SPA ONLY and it sucks.  It requires so much patch work, testing, and retooling just because of how janky they get after a certain size."
angularjs,3brn3r,jakblak90,1 point,Thu Jul 2 22:30:21 2015 UTC,"A different nice solution could be to load a single angular minimal core and lazy loading components inside angular instead of the backend, to provide a smoother experience"
angularjs,3brn3r,ecmdome,2,Sat Jul 4 17:23:26 2015 UTC,Here is an example of what's considered best practice for large apps.  https://github.com/jakblak/eggly  You break them up into features.  The main app file is eggly-app.complete.js.  This will load the modules for 'categories' and 'bookmarks' which in turn loads modules for their respective features.  The common folder contains factories that make calls to an API and used by various controllers hence are deemed 'common'.  The eggly-app.finish.js file is what you have if you include everything into one file (so your not confused by this).
angularjs,3brn3r,ecmdome,2,Wed Jul 1 18:17:44 2015 UTC,I like this idea coupled with the microservices  back end architecture.  So each part of the app is extremely scalable independently
angularjs,3brn3r,my_ledge_ends,2,Thu Jul 2 14:19:43 2015 UTC,That was my thoughts on it as well. I think something like Sinatra (or Rails/Rails-API) or Flask would be quite nice.
angularjs,3brn3r,interactionjackson,2,Thu Jul 2 14:41:29 2015 UTC,"I've been using Golang for microservices and I really like it.  It can be a putoff for people who enjoy Sinatra/Rails any other vetted framework because the consensus is piece together your own framework based on the net/http package.  So that can be a lot of work, but I'm loving the results."
angularjs,3brn3r,my_ledge_ends,2,Thu Jul 2 18:17:41 2015 UTC,"In Angular, this is simple (and best practice, depending on the size/scope of your app) using their module system. In fact, this is how you load libraries written in Angular (like ngRoute or Angular UI); you declare their module as a dependency of the main app module.  With this, you get a proper separation of concerns for functionality, which makes it much easier to test, debug and maintain as your app grows and lives."
angularjs,3brn3r,Sekret_One,1 point,Wed Jul 1 17:11:22 2015 UTC,"Would this also work in a situation where some parts of the site are server rendered and others are SPA?  For example: A payroll application. The payroll system has a module for adding employees, another for entering payroll data, and another for the employee side(see their checks) but, the report and check generation is server side.   Is that perfectly normal?"
angularjs,3brn3r,accul2ate,3,Wed Jul 1 17:49:32 2015 UTC,"If i understand you correctly, you are describing a service. But they would all be contained within a 'payroll' module that you'd add as a dependency to the angular app."
angularjs,3br97s,natdm,9,Wed Jul 1 14:39:24 2015 UTC,I do not understand a good case to render templates on the server and use Angular. It adds complexity without adding benefit.   The only use for dynamic templating I have found is to bake some config data into the root html doc to avoid having to make an AJAX call before bootstrapping my application. However I don't even use server templating for that any more. I now use gulp to swap out all of my dynamic tokens that are specific to each environment.  If anyone uses server templating and Angular together I would love to hear an argument for why you would add that complexity to your application.
angularjs,3br97s,cowardly_lying,2,Wed Jul 1 15:55:20 2015 UTC,"Thanks for the reply.  I'm pretty new to most of this but wouldn't you benefit from the server-side rendering if there was a LOT of data to post to the screen on a page?  Pull the data from a db, post it to the page while on the server, then send to a client, rather than the clients machine rendering the page that has quite a few records.  No?"
angularjs,3br97s,cowardly_lying,4,Wed Jul 1 15:58:57 2015 UTC,"You must have server side pagination for large data sets regardless of your client rendering.   Most clients are really fast these days so the performance difference should be minimal for displaying a usable data set. If you must display 1000 records in a single browser page, you might consider using traditional web dev techniques rather than a SPA. I have seen very few instances where showing 1000+ records at one time was the best solution.  If you use client-side rendering you can offload some of the processing requirements on your clients. This could make your servers more responsive. I don't think there is a clear performance winner for all situations. I don't think that performance is as important as it once was."
angularjs,3br97s,ThunderTherapist,3,Wed Jul 1 17:47:30 2015 UTC,"Great, thank you! Pretty much what I needed to know."
angularjs,3br97s,foobar5678,1 point,Wed Jul 1 17:52:13 2015 UTC,"The performance issue here isn't rendering, it's fetching. That's why we use paging on our api anyway. I imagine there's a virtualized grid which doesn't try to render Dom that isn't visible in the viewpoint"
angularjs,3br97s,foobar5678,2,Thu Jul 2 17:04:49 2015 UTC,"No.  The biggest performance lag usually comes from the network lag of moving the data from the server to the client. Prerendered data is much larger than raw data. So send the raw data to the client and have the client render it.  However, from a more big picture point of view, I think you're misunderstanding how things work. Please explain, in further detail, how you think this works:   post it to the page while on the server, then send to a client, rather than the clients machine rendering the page"
angularjs,3br97s,letmebeeee,1 point,Wed Jul 1 19:04:33 2015 UTC,"Instead of this.. Information sent to client Client then sends $http.get to server Server hits database, gets info, sends to client Client renders information to page  This:  Server hits database Server renders ejs page with database results Server sends page with rendered results from the database to client Client shows static data, rendered from server, without having to make a call."
angularjs,3br97s,dvidsilva,3,Wed Jul 1 19:25:42 2015 UTC,"If you want to avoid having the client make an $http.get after the page has loaded, then just include the data with the original page. You can either write the data directly onto the page (I'll just assume you're using php):  <script> var data = <?php echo json_encode($data); ?>; </script>   or use JSONP  <script> var data = {}; function saveData(obj) {     data = obj; } </script> <script src=""https://status.github.com/api/status.json?callback=saveData""></script>   However, if this is data that isn't going to change after the page is loaded, and the data is only going to rendered once, I have to wonder why you're using Angular at all?  EDIT: I clearly didn't pay enough attention the first time I read your post. If you render everything on the server, and there is no dynamic content on the page, then it's not a single page application. Angular is a framework which people use to make single page applications. There is literally no reason to use Angular if you're serving static content.  I think the real question to ask is WHY are you using Angular? What features of it are you using? If you have an interactive site, where the data is constantly changing, then what you want to make is an SPA that sends data back and forth. So obviously prerendering, and thus needing to reload EVERYTHING on the page and not just the data, is a bad idea. But if you're creating a static page and you're only using Angular because it's a framework to keep your code organized, then you should be looking for a server side framework, not a client side one.  EDIT2: And just some extra free advice, you keep mentioning that there is A LOT of data. If you do decide to go down the SPA route, I've got two terms for you that will make you're life infinitely easier on this journey: Pagination and Virtual Scrolling."
angularjs,3br97s,ThunderTherapist,1 point,Thu Jul 2 03:50:30 2015 UTC,"I think you should time how many ms you save by avoiding that one HTTP call (real world UI's, btw, typically make dozens if not more) and compare that with how hacky your Angular code becomes lol."
angularjs,3br97s,cowardly_lying,9,Wed Jul 1 22:02:37 2015 UTC,"Jokes on you, sucka.  I'm so new, it's hack no matter what. :-P"
angularjs,3br97s,EricTboneJackson,1 point,Wed Jul 1 22:05:40 2015 UTC,"If you're using NodeJS is much better to deliver all that data in JSON as quickly as possible and let the client render it.  JS/NodeJS is single threaded, so all the time that the server is spending in rendering those templates it won't be able to respond to requests, and do whatever else it should be doing."
angularjs,3br97s,Nexum666,2,Wed Jul 1 22:16:00 2015 UTC,"I use it. We've got a multi tenant multi client system where tenants can have sub clients. There are certain features we don't want certain tenants to access so we build menus server side to not just hide elements but make sure they are never rendered for certain users. We could do that client side but I like to do it server side so the client code isn't really concerned with ""security"". Yes this is security through obscurity but we also have other checks.  Doing it server side means we can take advantage of the security code that's being used by the api to check privs for each menu item."
angularjs,3br97s,Nexum666,1 point,Thu Jul 2 17:02:49 2015 UTC,Awesome! It sounds like you have a good reason to justify using both.  It sounds like you have complex requirements and those complex requirements are worth adding the code complexity.
angularjs,3br97s,Nexum666,3,Thu Jul 2 17:59:00 2015 UTC,"How much to render server-side?   None. It's a rich client. The client fetches raw data and takes care of all presentation logic. Duplicating presentation logic on the server, using a different code path and likely a different language, is messy as hell.   If I had a lot of data to render, I'd prefer to stay away from the client-side rendering if possible.   That data is going to transfer much faster if you don't mark it up first, and you can use client code to take care of efficiently presenting subsets of it efficiently. You're not planning on dumping 20 pages of data into the client and making the user scroll indefinitely, right?"
angularjs,3br97s,Nexum666,1 point,Wed Jul 1 22:29:53 2015 UTC,"For SERVER-side rendering of Angular partials... this was the setup.  //Angular Views router.route('/spa')     .get(function (req, res) {         res.render('myApp/spa')      });   //Changed all PARTIALS to HTML docs, moved from EJS files in views to html in public/partials. router.route('/main')     .get(function (req, res) {         res.render('main', {             user : req.user,             title: 'SPA'         })     });  router.route('/second')     .get(function (req, res) {         res.render('second')     }); //end Angular Views   The Express routing code above.  And Angular:  myApp.config(function ($routeProvider) {     $routeProvider         .when('/', {             templateUrl: '/main',             controller: 'mainController'         })         .when('/second', {             templateUrl: '/second',             controller: 'secondController'         })         .when('/second/:num', {             templateUrl: '/second',             controller: 'secondController'         }) });   May not be 100% complete - just a quick edit. In the code, those Express routes are commented out and the Angular routing information is changed to /partials/[page].html"
angularjs,3br97s,Nexum666,1 point,Wed Jul 1 15:12:21 2015 UTC,"I used only client rendering and had one single file with ""compiled"" templates also i minified the file so it is one request for all templates wich can be cached by the client. Works well and on mobile you dont have 1000 template requests. Also even for a page with a lot of data de json size is under 5kb"
angularjs,3br97s,dvidsilva,1 point,Wed Jul 1 19:16:18 2015 UTC,Can you elaborate on what you mean? Compiled from the server with database data on them? Minified with what?
angularjs,3bqpmp,ericdale121,12,Wed Jul 1 11:20:42 2015 UTC,"There are a number of blog posts that get you about as far as this one does - setting up karma and jasmine and running your very first test.  Does anyone have good recommendations for what the next step would be?  As in, how to write appropriate tests for a fairly simple controller, directive, or service?  I could really use some concrete examples beyond the ""Hello world!"" tests."
angularjs,3bqpmp,semanticore,2,Wed Jul 1 12:46:05 2015 UTC,"Initially I was going to say that the next step in this tutorial isn't Angular-specific and that it involves just writing unit tests and learning Jasmine, but after going through the tutorial on my own I have to say this tutorial isn't that great.  It's ok for setting up Karma and Jasmine, I guess, but the code itself doesn't follow current Angular best practices and could use a lot of refactoring.  I think I can put together an example for you that demonstrates how to better setup an Angular project and write some decent unit tests.  Give me some time, and I'll post it for you."
angularjs,3bqpmp,chazzlabs,1 point,Wed Jul 1 13:28:55 2015 UTC,That would be wonderful if you have time.  Thanks!
angularjs,3bqpmp,semanticore,3,Wed Jul 1 14:35:25 2015 UTC,"https://github.com/chazzlabs/angular_example  Here's a good start, I think.  I took the article's concept and refactored the user list into a directive and added a couple simple functions in the controller so I could have some example unit tests.  The app now also uses Angular's ""controllerAs"" syntax.  A couple of things to look for:   Organization of the tests using ""describe"" and ""it"" Keeping a reference to our controller so we can call its functions and access its attributes Using Jasmine's spyOn() to spy on functions called within our target function Directive unit test is very simple since our directive isn't doing much   Let me know if you have any questions.  If there's anything specific you want to know, I can try to add an example to the project."
angularjs,3bqpmp,chazzlabs,3,Wed Jul 1 15:44:07 2015 UTC,"Many thanks for this.  I'll let you know if anything comes up, but it's making sense to me so far."
angularjs,3bqpmp,semanticore,2,Wed Jul 1 17:43:00 2015 UTC,"In other words, get on the bike and start pedaling. You might crash a few times but you'll figure it out. :)"
angularjs,3bqpmp,semanticore,1 point,Wed Jul 1 13:20:57 2015 UTC,Anyone have any luck getting code coverage for unit tests in visual studio?  I've tried Chutzpah but to no luck.
angularjs,3bq2rs,doctorsound,5,Wed Jul 1 06:04:38 2015 UTC,"It is better practice to use a bottom catch instead of a parallel error handler.  // errorFn will only catch errs from promise, not successFn promise   .then( successFn, errorFn );  // errorFn will catch errs from both promise AND successFn promise   .then(successFn)   .catch(errorFn)   If you have a method that returns promises, you almost NEVER need to create new promises using a constructor or deferral; doing so is usually an anti-pattern. Just use return to modify your promise. Also, it looks like you have two independent promises but you are chaining them serially; better to run both simultaneously and wait for both to resolve using $q.all. Error handling is usually better left to the consumer of this function too, not handled mid-stream (though it's possible to do so with more complex code than I show here).  function postTransaction(transaction) {   independentPromises = [UrlService.getUrl(), TokenService.getToken()];   return $q.all(independentPromises).then(function(results){     vm.gatewayUrl = results[0];     vm.token = results[1];     return GatewayService.postRequest(vm.gatewayUrl, vm.token, transaction);   }); }   Similar logic holds for your getUrl function but in my battle between insomnia and need to get up tomorrow, the latter is beginning to win (finally)."
angularjs,3bq2rs,gabedamien,1 point,Wed Jul 1 06:35:56 2015 UTC,"Thanks for your response (I fought the insomnia battle hard myself before wrapping this post up last night)  I really like that $q.all() function :) In my mind for the example, the two processes needed to run synchronously, but I want to try out running them async.  You raise a good point about handling the error handling, I was frustrated because I wasn't catching errors that happened in the child services, but to your point, I'm not using .catch()  I build my own promise inside the child services (i.e. getToken below) because I wanted to resolve the promise if the value was cached, or reject it if it was an invalid response. Is building my own promise still the best way to do so? I feel like the .catch() is unnecessary, if we're just returning the rejection, but I can't seem to get my example to work that way.   function getToken() {   $log.debug(""TokenService.getToken called"");   return $q(function (resolve, reject) {     //$log.debug(""Current TokenService scope: "" + JSON.stringify(this));     if (vm.token !== '') {       $log.debug('Returning cached token: ' + vm.token);       resolve(vm.token);     } else {       $log.debug('No cached token, making http request...');       setTimeout(function () { // Artificial delay         $http.get('app/resource/token.json')           .then(function (result) {             if (isValidResponse(result)) {               $log.debug(""token get received valid response: "" + JSON.stringify(result));               vm.token = parseResponse(result);               resolve(vm.token);             } else {               $log.debug('Response marked as invalid, rejecting');               reject('Invalid Token Response.');             }           }).catch(function (result) {             $log.debug('FAILED Token, Result:' + JSON.stringify(result));             reject('Token Request Failed.');           });       }, 1000);     }   });   Thanks again!"
angularjs,3bq2rs,gabedamien,2,Wed Jul 1 12:58:50 2015 UTC,"function getToken() {   $log.debug(""TokenService.getToken called"");   if (vm.token !== '') return $q.when(vm.token); // resolves to vm.token   $log.debug('No cached token, making http request...');   return $http.get('app/resource/token.json')     .then(function (result) {       if (isValidResponse(result)) {         $log.debug(""token get received valid response: "" + JSON.stringify(result));         vm.token = parseResponse(result);         return vm.token; // resolves to vm.token       } else {         $log.debug('Response marked as invalid, rejecting');         throw new Error('Invalid Token Response.'); // rejects       }     }); }   Again, the basic rule of thumb is either return or catch promise chains, don't do both (unless you manually re-throw the Error). Your function returns a promise so the consumer of that promise should attach a catch."
angularjs,3bq2rs,gabedamien,2,Wed Jul 1 21:12:45 2015 UTC,"Awesome, it makes a lot more sense seeing it now. Thanks for your help!"
angularjs,3bq2rs,Pytim,2,Wed Jul 1 21:17:19 2015 UTC,"No problem.  Of course if your service has no way of invalidating the cache (i.e. setting it back to empty string), then you can simplify this even further by running the promise and storing it in a variable when the service initializes. Then you'd just make that promise a public property of the service.  As it is now though, a small function like this.invalidate = function(){ vm.token = '' } will reset the cache and allow you to make a new async request with getToken."
angularjs,3bq2rs,Pytim,3,Wed Jul 1 21:21:51 2015 UTC,Nothing wrong with using vm in a service but it is misleading as a service doesn't have a view model.
angularjs,3bq2rs,kevrom,1 point,Wed Jul 1 09:56:36 2015 UTC,It did feel wrong. What's an alternative when working in a service?
angularjs,3bphx0,NotReallyDifferent,3,Wed Jul 1 02:44:50 2015 UTC,You need to specify your app's name in the ng-app attribute.
angularjs,3bphx0,AlGoreBestGore,2,Wed Jul 1 18:13:30 2015 UTC,Are there any errors in the browser's console when running in node?
angularjs,3bphx0,abyx,1 point,Wed Jul 1 03:21:35 2015 UTC,"No, none.   I did change the file type to EJS and now the code works. I wish I knew why though."
angularjs,3bphx0,2basco,2,Wed Jul 1 04:11:26 2015 UTC,"Your HTML syntax seems to be fine. You said something about loading up node, but I don't see a node file. Is this what you mean when you say ""it won't run in the app""?"
angularjs,3bphx0,2basco,1 point,Wed Jul 1 03:49:23 2015 UTC,"When I run it as a app as a whole it won't shop up but it will show up if I were to render the page as its own entity. Changing from HTML to EJS worked though, I just wish I knew why."
angularjs,3bphx0,abyx,1 point,Wed Jul 1 04:11:03 2015 UTC,"You're problems lie outside the scope of what you have provided, I wish I could help you without knowing more about how your app is structured."
angularjs,3bpao8,deej_bong,6,Wed Jul 1 01:42:08 2015 UTC,"You could check out Firebase, they offer simple JSON formatted hosting, and they have a great library for AngularJS."
angularjs,3bpao8,adventurerh,1 point,Wed Jul 1 02:49:38 2015 UTC,"definitely use Firebase. It's free for small applications and offers just what you need.  The problem with the MEAN stack is not only that you need to learn the basics of each component and how they work together, but also that you need to deploy the services and manage them.  Using a service like Firebase will let you focus on Angular only, and you can just host your application on github pages or any other free static hosting. You'll probably need some dev time to get it working but you'll love the learning experience!"
angularjs,3bpao8,jminuscula,1 point,Wed Jul 1 03:16:57 2015 UTC,"+1 for Firebase. It's a very impressive and developer-friendly  technology that will save you a lot of time and troubles. You can literally make a serverless app with it (I know because I have), which greatly reduces the overal complexity of your stack."
angularjs,3bpao8,Brazilll,1 point,Wed Jul 1 07:33:44 2015 UTC,"I'll definitely check out firebase. I'm halfway through setting up MEAN, so I might as well give it a try. Firebase seems to be what I'm looking for though."
angularjs,3bpao8,adventurerh,1 point,Wed Jul 1 03:31:27 2015 UTC,"Yeah, its awesome. I love it. I started with Firebase then I moved towards the MEAN stack, that's what I do now. It's a great introduction."
angularjs,3bpao8,abyx,5,Wed Jul 1 03:51:45 2015 UTC,"Angular does not have to be used along the other 3. Angular's is a client side framework that talks with your server, and doesn't really care how it's written. Some people like MEAN because it lets you work mainly in JS all across.  If you have experience with other languages and tools, there's nothing stopping you from writing a client with Angular but use Ruby/Python/Whatever for the server with whatever data storage you want (e.g. MySQL, Postgres, files).  If, OTOH, you don't have experience with backend stuff let me join /u/adventurerh in recommending you use some Backend-as-a-Service such as Firebase (or Parse)  - these tools make it amazingly simple to start writing basic apps."
angularjs,3bpao8,jewdai,2,Wed Jul 1 03:26:31 2015 UTC,"The database is used for persistent storage, you could always store it on your servers file system however that is highly discouraged. (Mongo is used to store the data)"
angularjs,3bpao8,jewdai,1 point,Wed Jul 1 02:30:38 2015 UTC,"ExpressJS, AngularJS, and Node.js   Can I use MongoDB without using ExpressJS and Node.js? If so, is there a decent tutorial or article on that?"
angularjs,3bpao8,dutchmaster,2,Wed Jul 1 02:32:08 2015 UTC,Yes and no.  Yes you can use it without express and nodejs but then how are you going to interact with the database?  You could use another language that you are more familiar with.   ExpressJs and NodeJs (basically treat it like one thing) are super easy to get running. You can literally have a web server in 5 lines of code.
angularjs,3bpao8,ravi_kiran_vs,2,Wed Jul 1 02:35:41 2015 UTC,"Unfortunately I don't think there is an easier way. You need a  database (postgresql, MongoDB, MySQL) and a backend of some sorts (PHP, python/Flash, Nodejs/express) to connect to the database and output the data so that it is accessible on the frontend by angular. If you're most convertible with javascript than a MEAN stack would be the way to go. Alternatively you could play around with something like local storage which wouldn't require a database. Keep in mind that local storage is stored in the browser so if the user uses another device or browser they wouldn't be able to access their content."
angularjs,3bpao8,KyleG,1 point,Wed Jul 1 02:33:14 2015 UTC,Looks like I'll be going with a MEAN stack then. Was just trying to avoid overloading myself with too many new technologies at once. Thanks!
angularjs,3bpao8,infidelux,2,Wed Jul 1 02:37:06 2015 UTC,"Use yeoman and it's mean generator.  It's got everything you need, mongodb setup with node and express. Also has authentication built in, supports google's and facebook's oAuth.  It's what I use to quickly get started building Angular apps."
angularjs,3bpao8,Aesdotjs,1 point,Wed Jul 1 04:47:39 2015 UTC,"If you're only ever going to use this from one computer, just write to localStorage. It won't be a RDB or anything, though. Just write a dict of your data."
angularjs,3bmpwk,catstanza,3,Tue Jun 30 13:45:41 2015 UTC,wtf with all the overlay divs popping up all over they place?
angularjs,3bmpwk,yaix,1 point,Tue Jun 30 20:19:49 2015 UTC,Open up /src/Token.php   with(new TokenValidator)->check($value);   Is with() a Laravel specific function? Where's the source for it?
angularjs,3bmpwk,foobar5678,1 point,Tue Jun 30 22:35:26 2015 UTC,Might be here: laravel/framework/src/Illuminate/Support/helpers.php
angularjs,3bmpwk,foobar5678,1 point,Wed Jul 1 01:53:58 2015 UTC,Line 752 https://github.com/illuminate/support/blob/master/helpers.php  Thanks!
angularjs,3bmveq,FrankieTheAlchemist,2,Tue Jun 30 14:30:45 2015 UTC,"We are using Webpack to inline the html during a build. Of course, the end result is html strings in your JavaScript, but imho the looks of production code is not important (as long as you have good source maps!). The separation of the code is important during development. Once it goes into production, you'll be uglifying it anyway, so no human will read it if they can avoid it!  I hope this helps you find a solution."
angularjs,3bmveq,Chevalric,2,Tue Jun 30 17:40:03 2015 UTC,"I was in a similar situation and ended up using a Gulp task to prepopulate the templateCache. But the Gulp plugin, gulp-angular-templatecache, allows you to output the inlined HTML as a separate module which you can then register as a dependency on your application module (or better still, your component module in this case). You can then either configure the plugin to prefix the entry in the templateCache with a part of a URL or rename the references to the templateUrls in your directive declarations."
angularjs,3bmveq,benduder,1 point,Tue Jun 30 18:57:51 2015 UTC,"This looks like the strategy we've decided to go with too.  I've been kicking a few options around the office and (since we all like Gulp) the favored solution is to use a Gulp plugin and the template cache.  While I force our Gulp expert to figure that out, I've temporarily moved all of my templates to JS objects so that the Karma tests stop crying about missing files :-)"
angularjs,3bik9s,tomdush,4,Mon Jun 29 14:52:27 2015 UTC,"Registering a new account is not SSL.  Credit card form is, but if the password isn't sent via SSL, that's a problem."
angularjs,3bik9s,wmeate1099,2,Mon Jun 29 23:43:40 2015 UTC,This same class by the same company is $10 at Udemy for a another day or so.  https://www.udemy.com/learn-angularjs-development/?dtcode=dHJ38yu3bBWm
angularjs,3bik9s,jwjody,1 point,Tue Jun 30 02:21:34 2015 UTC,Shows up for 199 for me
angularjs,3bik9s,thebusiness11,1 point,Tue Jun 30 04:16:34 2015 UTC,I think you have to purchase on the mobile app.
angularjs,3bik9s,theblang,2,Tue Jun 30 04:40:33 2015 UTC,That was the trick. 10$ is a nobrainer for that scale of material. Thank you.
angularjs,3bik9s,Indyaner,1 point,Tue Jun 30 09:59:55 2015 UTC,You might need to be logged in.
angularjs,3bik9s,jwjody,2,Tue Jun 30 11:06:37 2015 UTC,"seems cool, but never heard of this site, is it good?"
angularjs,3bik9s,downhillonslicks,2,Mon Jun 29 16:40:02 2015 UTC,"I'm interested in these topics, but don't know how well this website presents the material"
angularjs,3bik9s,Hakuna_Potato,2,Mon Jun 29 17:01:42 2015 UTC,"Just bought it, skimming through some videos now. It's not the best, but well worth $20. It's rehearsed in a less strict manner than professional courses @ lynda or pluralsight and some may even like it more like that because it shows you the true grit of making a project from scratch. Overall 8/10."
angularjs,3bik9s,deadtree123,2,Mon Jun 29 18:28:15 2015 UTC,the true grit of making a project from scratch   This is what I'm looking for. Thanks for the review!  1 taco /u/changetip
angularjs,3bik9s,Hakuna_Potato,3,Mon Jun 29 18:29:52 2015 UTC,Hahah 1 taco :P
angularjs,3bik9s,Majache,1 point,Mon Jun 29 20:23:24 2015 UTC,"The Bitcoin tip for 1 taco (5,715 bits/$1.50) has been collected by deadtree123.    what is ChangeTip?"
angularjs,3bik9s,changetip,2,Mon Jun 29 18:34:06 2015 UTC,"It has money back guarantee, and paypal is safe."
angularjs,3bik9s,downhillonslicks,1 point,Mon Jun 29 16:46:02 2015 UTC,"good points, thanks!"
angularjs,3bik9s,jakblak90,2,Mon Jun 29 17:14:30 2015 UTC,I've done a few of the projects and they're decent.  I would describe the courses as pretty basic but good. We don't explore any more advanced or interesting things we can do after hooking up backend or API's. Some good CRUD examples and the usage of backend/api's. Not a big fan of his design style and there is some wonky code like how he defines controllers both in the view and router.
angularjs,3bik9s,dexigo,1 point,Tue Jun 30 15:07:14 2015 UTC,coupon?
angularjs,3bik9s,thebusiness11,1 point,Mon Jun 29 16:31:25 2015 UTC,How long is it on sale for?
angularjs,3bik9s,BBQLays,1 point,Mon Jun 29 20:02:19 2015 UTC,"I participated in this Kickstarter. Got my reward (the course) a few days ago, but haven't been able to give it a try. What are people's first reactions so far?"
angularjs,3bik9s,MikeTheWebDev,1 point,Mon Jun 29 21:42:44 2015 UTC,"I'm interested, but can anyone comment on how good the code quality is. How well does it fit Todd Motto's style guide is the real question?!"
angularjs,3bik9s,chancechants,1 point,Tue Jun 30 01:08:44 2015 UTC,This is on sale on Udemy for $10 (along with a lot of other courses) https://www.udemy.com/learn-angularjs-development/?dtcode=gfNGHz93bBG8
angularjs,3bik9s,bvbrandon,0,Tue Jun 30 02:06:51 2015 UTC,Not required
angularjs,3bkfbm,slidebean_blog,2,Mon Jun 29 23:10:02 2015 UTC,"This is a bit outdated.  These days you'd probably be better off using ng-model-options="" {getterSetter: true }"" for binding with ng-model."
angularjs,3bkfbm,rq60,1 point,Tue Jun 30 02:28:26 2015 UTC,Great stuff
angularjs,3bkfbm,jpczcaya,1 point,Mon Jun 29 23:10:15 2015 UTC,"I'm curious, where's the banner shot from?"
angularjs,3bjo1u,ryangallen,2,Mon Jun 29 19:44:16 2015 UTC,"Protractor's basically has everything you need, but it's really, really hard to find. Once you get it, you'll be able to find everything you need - just like Angular's, really. (An important thing to know here is how Protractor is built around WebdriverJS, and how sometimes you'll have to look in the documentation of that.)  I didn't really have an issue with Jasmine's, though."
angularjs,3bjo1u,vinnl,1 point,Tue Jun 30 07:37:01 2015 UTC,"It really is like riding a bike: just keep trying until you get it. I kept trying to do things overly complicated like:  browser.findElement(protractor.By.id('some-id')).getText()     .then(function(foundText) {         expect(foundText).toEqual('xyz');     });   instead of:  expect(element(by.id('some-id').getText()).toEqual('xyz');   I guess my biggest complaint is the variety of similar but distinctly different objects and methods e.g. by vs. By, .getText() needing a .then() callback for one case but not the other...  Good and rolling now though, thank you for the response."
angularjs,3bjo1u,vinnl,1 point,Tue Jun 30 16:01:08 2015 UTC,"I think that latter point is exacerbated due to a rapidly changing API when it was still a pre-release, and it already being widely used at that point. The result is a lot of conflicting blog (or rather: StackOverflow) posts that refer to a now-deprecated or superfluous API."
angularjs,3bjo1u,Strat-O,1 point,Tue Jun 30 19:00:50 2015 UTC,"I disagree with the statement ""Protractor's basically has everything you need"".  My application is graphic and has a largely drag-and-drop interface.  I find that Protractor has virtually nothing that I need and have totally given up on it."
angularjs,3bjo1u,vinnl,2,Wed Jul 1 15:55:59 2015 UTC,"Note the 's, I was talking about the documentation. That said, drag and drop can be done: browser.actions().dragAndDrop(element, {x: 10 , y: 0}).perform();"
angularjs,3bjo1u,my_ledge_ends,1 point,Thu Jul 2 06:19:01 2015 UTC,"at the risk of appearing condescending, Protractor has a tutorial."
angularjs,3bj8wv,_daniel___,1 point,Mon Jun 29 17:57:05 2015 UTC,"Is this what you're trying to do?  HTML  <body ng-controller=""Ctrl"">     <div ng-repeat=""item in data"">       <p ng-click=""click(item)"">{{item.name}}</p>     </div>      <div>       <h3>sound</h3>       <input custom-input user-select=""{{user.sound}}"" ng-model='foo.sound' />        <p>{{vm.user.sound}}</p>       <h3>name</h3>       <input custom-input user-select=""{{user.name}}"" ng-model=""foo.name"" />        <p>{{user.name}}</p>     </div>     <button ng-click=""persist(user)"">persist changes</button> </body>   js  angular.module(""app"", [])  .service(""util"", function() {   return {     data: [       { animal: ""dog"", name: ""napoleon"", sound: ""woof"" },       { animal: ""cat"", name: ""bob"", sound: ""meow"" },       { animal: ""horse"", name: ""wallet"", sound: ""neigh"" },       { animal: ""angler fish"", name: ""suffering"", sound: ""blurble"" },     ]   } })  .controller(""Ctrl"", [""$scope"", ""util"", function($scope, util) {   $scope.data = util.data;   $scope.foo = {};   $scope.click = function(obj) {     $scope.user = obj;     $scope.foo.sound = obj.sound;     $scope.foo.name = obj.name;   }   $scope.persist = function(obj) {     alert(JSON.stringify(obj, null, 3))   } }])  .directive(""customInput"", function() {   return {     restrict: ""A"",     scope: { ""userSelect"": ""@"" },     controller: function($scope) {        $scope.$watch('userSelect', function(){          console.log(""UserSelect"", $scope.userSelect);        });     }   } });"
angularjs,3bj8wv,snwstylee,2,Tue Jun 30 08:46:47 2015 UTC,Ah it was really that easy huh? Thanks for the help.
angularjs,3bj8wv,snwstylee,1 point,Tue Jun 30 12:14:15 2015 UTC,"If you want to improve, be sure to follow the standard Angular style guidelines.  Angular Style Guide  html  <body ng-controller=""ctrl as vm"">     <div ng-repeat=""item in vm.data"">       <p ng-click=""vm.click(item)"">{{item.name}}</p>     </div>      <div>       <h3>sound</h3>       <input custom-input user-select=""{{vm.user.sound}}"" ng-model='vm.foo.sound' />        <p>{{vm.user.sound}}</p>       <h3>name</h3>       <input custom-input user-select=""{{vm.user.name}}"" ng-model=""vm.foo.name"" />        <p>{{vm.user.name}}</p>     </div>     <button ng-click=""vm.persist(vm.user)"">persist changes</button> </body>   js  (function() {   angular     .module(""app"", [])     .constant('utilConstant', utilConstantFn())     .controller('ctrl', ctrlFn)     .directive(""customInput"", customInputFn);      function utilConstantFn() {       return {         data: [           { animal: ""dog"", name: ""napoleon"", sound: ""woof"" },           { animal: ""cat"", name: ""bob"", sound: ""meow"" },           { animal: ""horse"", name: ""wallet"", sound: ""neigh"" },           { animal: ""angler fish"", name: ""suffering"", sound: ""blurble"" },         ]       };     }      ctrlFn.$inject = ['utilConstant'];     function ctrlFn(utilConstant) {       var vm = this;       vm.data = utilConstant.data;       vm.foo = {};       vm.click = click;       vm.persist = persist;        function click(obj) {         vm.user = obj;         vm.foo.sound = obj.sound;         vm.foo.name = obj.name;       }        function persist(obj) {         alert(JSON.stringify(obj, null, 3))      }    }     function customInputFn() {      var directive = {         restrict: 'A',         scope: { 'userSelect': '@' },         link: linkFn       };       return directive;        function linkFn(scope) {         scope.$watch('userSelect', function(){           console.log('UserSelect', scope.userSelect);         });       }      } }());"
angularjs,3bi6n3,toddmotto,2,Mon Jun 29 12:44:31 2015 UTC,"I put this together over the weekend, improvements/suggestions welcome. It includes partial functionality backported from Angular 1.3+ ""ngMessages"" Directive that allows $error state toggling of validation messages while users are filling out forms. It doesn't support the includes functionality but thought it'd be useful to open source!"
angularjs,3bi6n3,pitne,1 point,Mon Jun 29 12:45:43 2015 UTC,ng-messages-include is the only reason to use ngMessages at all
angularjs,3bjy2v,compNerd0101,1 point,Mon Jun 29 20:55:07 2015 UTC,"Have you tried taking your working plunkr code and just serving that with Grunt? Then if that works as intended, slowly add components back in until something breaks."
angularjs,3bjy2v,my_ledge_ends,1 point,Tue Jun 30 01:23:08 2015 UTC,"Yes...it's honestly the same code but there is something going on with the Grunt build that is preventing it from loading the files correctly. And its just the nvd3/d3/angular-nvd3 stuff that its not loading correctly because the rest of the page (borders, formatting, css) displays consistently. Unfortunately I have no idea what is going on in the Gruntfile.js that could be doing this."
angularjs,3bjy2v,hoffentlich,1 point,Tue Jun 30 15:15:42 2015 UTC,Too much magic.
angularjs,3biqiw,jordanleeartist,4,Mon Jun 29 15:42:35 2015 UTC,"I don't understand how your ""art"" is related to angularjs."
angularjs,3biqiw,trunked,1 point,Mon Jun 29 21:43:45 2015 UTC,I would love to buy one but like /u/trunked my hesitation is also about the art connection with angular logo. There needs a bit of relevance for me personally. I appreciate your efforts though. Keep it up. In case you re-design angular tee with this consideration I would love to check back again.
angularjs,3bf6r6,Puigcerber,2,Sun Jun 28 18:01:06 2015 UTC,"There are some misconceptions in this article.   First, call throughs imply you're not unit testing. That means more than the unit under test is being executed.   Second, using dependencies, even $q mean you're not unit testing as well.   In order to truly unit test, you're going to need a mocking framework to help. My favorite is sinon.js. With this, it's much easier to mock behavior than making methods as described in this article."
angularjs,3bf6r6,TheNiXXeD,2,Sun Jun 28 22:59:56 2015 UTC,"Jasmine already comes with tools for mocking. That, with $httpBackend gets you pretty much everything sinon does without yet another library to keep track of.   In the frontend world I wish we could just call it testing and not get overly concerned about semantics. Large dev teams have the luxury of being able to make tons of ""proper"" tests. For small teams and freelancers I think any testing is much more testing than zero."
angularjs,3bf6r6,knifie_sp00nie,1 point,Mon Jun 29 15:27:33 2015 UTC,I've been having a look about testing AngularJS with Sinon.JS and it might make sense to use it. But how would you go about testing promises resolution without using $q?
angularjs,3bf6r6,TheNiXXeD,1 point,Tue Jun 30 21:06:27 2015 UTC,"You can mock the entire promise pretty easily in Sinon, but it's easier using the Sinon plugin. Sinon as promised, I believe."
angularjs,3bh1l2,NotReallyDifferent,3,Mon Jun 29 03:52:36 2015 UTC,@NotReallyDifferent  First: The image should be accessible at '/images/iphone6front.jpg' instead of '../public/images/iphone6front.jpg'  Second: You need to put the ng-app attribute in the html (commonly html or body tags) to initialize angular on the page and then assign the controllers to divs within which they will function  Some more ejs code would help understand the issue better.
angularjs,3bh1l2,dhaneshpurohit,1 point,Mon Jun 29 10:45:05 2015 UTC,"<!DOCTYPE html> <html ng-app=""devicePortal"">  <head>     <link rel=""stylesheet"" type=""text/css"" href=""css/bootstrap.min.css"" />     <script type=""text/javascript"" src=""js/angular.min.js""></script>     <script type=""text/javascript"" src=""js/bootstrap.js""></script>     <script type=""text/javascript"" src=""js/app.js""></script>     <script type=""text/javascript"" src=""js/jquery.js""></script> </head>  <body>      <div ng-controller=""portalCntrl as portal"">         <ul class=""list-group"" ng-repeat=""device in portal.devices"">                 <h2>{{device.name | uppercase}}</h1>                 <br />                 <hr id=""style-one"">             <!--    <img ng-src=""{{device.images[0].full}}"" /> -->                 <br />             <!-- TABS -->             <section ng-controller=""tabCntrl as tab"">                 <ul class=""nav nav-pills"">                     <li ng-class=""{active: tab.isSelected(1)}"">                         <a href ng-click=""tab.selectTab(1)""> Description</a>                     </li>                      <li ng-class=""{active: tab.isSelected(2)}"">                         <a href ng-click=""tab.selectTab(2)""> Specifications</a>                     </li>                      <li ng-class=""{active: tab.isSelected(3)}"">                         <a href ng-click=""tab.selectTab(3)""> Applications</a>                     </li>                 </ul>                 <!-- TAB INFORMATION -->                 <div class=""tab"" ng-show=""tab.isSelected(1)"">                     <h4>Description</h4>                     <p>{{device.description}}</p>                 </div>                  <div class=""tab"" ng-show=""tab.isSelected(2)"">                     <h4>Specifications</h4>                     <p>{{device.price | currency}}</p>                 </div>                  <div class=""tab"" ng-show=""tab.isSelected(3)"">                     <h4>Applications</h4>                     <p>{{device.applications}}</p>                 </div>              </section>         </ul>     </div>  </body>   </html>  And this all works when I load it by itself on my python server but when I tried combining it with my Node app it just didn't load any of the Angular code which makes me think it's a small path issue."
angularjs,3bh1l2,BansheeThief,2,Mon Jun 29 12:22:55 2015 UTC,Are you getting any errors in the console? That should provide the first step to debug this issue and provide possible next steps.
angularjs,3bh1l2,BansheeThief,2,Mon Jun 29 06:25:35 2015 UTC,"My guess without seeing any console errors is you aren't loading the index page, so it's not loading angular so the page won't be rendered correctly.   Also, you shouldn't need to include both bootstrap.js and bootstrap.min.js"
angularjs,3bh1l2,hoykg,2,Mon Jun 29 06:30:12 2015 UTC,and jquery should appear before bootstrap
angularjs,3bh1l2,Fossage,1 point,Mon Jun 29 07:11:54 2015 UTC,I can load the index.html page perfectly fine. I just can't get the phones.html page to render the angular portion of the page but it will render the html.
angularjs,3bh1l2,kachhalimbu,2,Mon Jun 29 12:18:50 2015 UTC,"Just out of curiosity, is there a reason you are using EJS and Angular together?"
angularjs,3bh1l2,askuriel,1 point,Mon Jun 29 06:49:40 2015 UTC,It was more of a habit from my last web app. I reverted back to html.
angularjs,3bh1l2,raegx,2,Mon Jun 29 12:30:48 2015 UTC,Instead of   this.devices = phones;   do  var portal = this; portal.device = ... // assign properties and functions on 'portal'   then in your html you should access the scope properties function using the controller alias 'portal'     portal.devices
angularjs,3bgvxa,gonetosea,1 point,Mon Jun 29 02:56:15 2015 UTC,Was it Angular UI?
angularjs,3bgvxa,Mash_X,1 point,Mon Jun 29 04:30:54 2015 UTC,"No, it a lot cooler looking widgets than that. It wasn't KendoUI either. Still not sure what it was. The date and time pickers were awesome."
angularjs,3bgvxa,Capaj,1 point,Mon Jun 29 05:27:17 2015 UTC,I think lumx has nice datepicker: http://ui.lumapps.com/directives/date-picker
angularjs,3bgvxa,Aesdotjs,1 point,Mon Jun 29 11:11:31 2015 UTC,"Google's material design have some slick component, I really like the input! I don't remember if there was a datepicker tho"
angularjs,3bgvxa,korreWorre,1 point,Mon Jun 29 11:25:40 2015 UTC,This one? http://ionicframework.com/docs/api/directive/ionNavView/
angularjs,3bfb3d,abyx,6,Sun Jun 28 18:37:10 2015 UTC,"To people who are sick of seeing my avatar - I added an image to this post just for you, but reddit doesn't pick it up. Please tell me what I'm doing wrong (seriously)."
angularjs,3bfb3d,newguy2445,4,Sun Jun 28 18:38:08 2015 UTC,"I wouldn't sweat it dude, it's just a thumbnail. I think it's pretty funny going through your submissions and seeing all the comments about the thumbnail."
angularjs,3bfb3d,aaaqqq,6,Mon Jun 29 03:37:06 2015 UTC,The reddit bot is hopelessly infatuated with you and there's nothing you can do to stop it from stalking you.
angularjs,3bfb3d,trunked,5,Sun Jun 28 21:15:34 2015 UTC,"I highly doubt that there are any ""smart"" people out there wondering whether they should be using Angular 1.x - A stable releasy. or Angular 2 which currently is in alpha. No company in their right mind would go into production using an entire framework thats still in alpha."
angularjs,3bfb3d,Jwkicklighter,5,Sun Jun 28 22:09:23 2015 UTC,"Look, I also find it clear which version should be used. But, it is obviously an issue for a lot of people - scroll through this sub's history and see. At any time about half of the top posts here are about ng2. What should new comers think? It is very easy to get the feeling that you're ""missing"" something, and I don't think that makes them ""not smart"" :)"
angularjs,3bfb3d,trunked,4,Mon Jun 29 04:17:48 2015 UTC,"Pretty sure this isn't aimed at companies that know what they're doing. It's for devs looking to make a new app, ready to learn Angular, who see a ton of buzz about Angular 2.0."
angularjs,3bfb3d,Jwkicklighter,-4,Mon Jun 29 05:38:07 2015 UTC,Well if that's the case then I disagree with the article entirely. If you're simply wanting to make an app with no actual business case then use whatever framework you feel like - There's no harm in getting comfortable with either seeing as they're both gonna.
angularjs,3bfb3d,SomeRandomBuddy,2,Mon Jun 29 05:54:22 2015 UTC,"And in the case that I have no idea which framework is stable, but am starting a new app for a startup? I didn't say it was a personal project, just that it isn't someone familiar with Angular/working for an established company."
angularjs,3bfrgp,TheBeardofGilgamesh,1 point,Sun Jun 28 20:52:37 2015 UTC,/r/titlegore
angularjs,3bcugn,rikAtee,1 point,Sun Jun 28 00:32:46 2015 UTC,"Full disclosure: this is my blog. There are links to my paid-for-app, but angular developers are not target customers (FWIW the target customers are teachers)  :)"
angularjs,3b79z5,technofattie,7,Fri Jun 26 15:23:48 2015 UTC,"Yea now that they've stopping trying to make two way binding happen under the hood. React has proved a one way binding system is totally faster. It's night and day. In before ""you can still two way bind""-- I'm taking about what's happening in the library not what the developer is creating. You write it as if it's two way binding but it actually has a retailed binding system."
angularjs,3b79z5,sovietmudkipz,1 point,Fri Jun 26 18:10:45 2015 UTC,Yea now that they've stopping trying to make two way binding happen under the hood   So I'm admittedly woefully behind on Angular2 news and am still playing catchup. Mind explaining why they stopped and how we're supposed to have interactive forms now?
angularjs,3b79z5,xueye,1 point,Fri Jun 26 22:37:05 2015 UTC,"Under the hood it's different but at the library API you're still doing the same things.  Basically, nothing changes on your end.  You still get interactive forms.  Just, uh, assume it's magic.  Or google it (sorry, on mobile)"
angularjs,3b79z5,sovietmudkipz,1 point,Sat Jun 27 04:15:48 2015 UTC,"I have done some work with React, and while I don't care for their syntax and approach, I love the unidirectional data flow model. Having that implemented in Angular2 is great, and the performance improvements are substantial."
angularjs,3b79z5,SomeRandomBuddy,2,Fri Jun 26 18:25:29 2015 UTC,"Actually bud, the performance enhancements aren't derivative of the respective techniques at hand. There is a LOT of code behind react's virtual DOM. The performance gains come from the fact that a unidimensional data flow encourages the design of components that aren't built like, well, shit. Bi-di data binding tends to trigger unintended cascading updates in enterprise projects, which is where the performance in angular apps tends to really suffer."
angularjs,3b79z5,e82,3,Sat Jun 27 04:32:59 2015 UTC,"The performance gains are directly a result of the unidirectional data flow. In Angular 1.X, the two way data binding means you cannot have a deterministic way of knowing if a change had a side effect, and therefore the $digest loop hast to keep running until it no longer detects any changes.  The more watchers you have, the longer the digest loop takes, and if you have to do that more than once, you end up with a sluggish app.  In both React, Angular2 and event git, they enforce a directed acyclical graph (DAG). This means that even in the worst case scenario, you would only have to traverse the nodes of the graph once.  This is why React can be so efficient at UI updates because it is able to diff the result of one virtual DOM against another very quickly simply by comparing nodes.  I agree with you that it is very easy to create a poorly constructed web of components in Angular 1.x, but even if you designed an Angular 1.x app to have a very nice component model, you would still not have the kind of performance you could get from Angular 2."
angularjs,3b79z5,yourwatchisnice,1 point,Sat Jun 27 15:00:01 2015 UTC,"I'm fine with this change. Recently I've been trying to keep with a one-way data flow and minimize the two-way binding/flow within my applications.  Between a single component/model - sure, a little bit, however still be explicit about thrings (ie: ng-submit=""ctrl.submit(things,I,explicitly,need)"" and having my submit only rely on what's being passed in - not reach outside of it to get extra info.    But, having 3 different views two-way bound to the same model (ie: list view, detail view, and an edit modal) - nope. Pass a copy around, once an update is done - fire off an event to let the other things update in response.  In some areas it's resulted in a little extra effort - but the end result has been worth it, as it's very rare I get into a ""a bunch of things bound to the same object, with weird cascading side effects""."
angularjs,3b700p,sanketsahu,1 point,Fri Jun 26 14:05:59 2015 UTC,I thought there was going to be more to it to be honest - it's pretty bare-bones!
angularjs,3b700p,Base10Propaganda,0,Fri Jun 26 20:53:16 2015 UTC,"Yes, it's pretty bare-bones. We will be adding more things soon. It's not actually a theme but more of a starter kit."
angularjs,3b700p,PromaneX,1 point,Sat Jun 27 07:41:38 2015 UTC,This is a nice start but it is very very bare - it would be more useful if it had at least one layout like the premium themes you link to do.   Although I guess it's doing it's job because I'm considering buying the Ani theme lol
angularjs,3b700p,PromaneX,1 point,Sat Jun 27 07:21:14 2015 UTC,I am planning to improve it and add more widgets and content there. Thanks for considering to buy Ani theme.
angularjs,3b6il2,DareDevil__,1 point,Fri Jun 26 11:02:47 2015 UTC,"Whenever I work with login, it is a completely separate entity that is a prerequisite to see the main contents of the application.    It sounds like that isn't your case?  If I am understanding correctly, you have the 'frame' and then you have the dynamic content.  So what I would expect to see is:  <body>     <header></header>     <nav></nav>     <div ui-view></div>     <footer></footer> </body>   where the div will change based on the page being rendered.  Is that what you are looking for?   EDIT: Re-reading, I think what you are looking for is:  I am not sure what server technology you are using, but you will want to have a separate route that goes to your login page, where you have only the login page.  All you need to do here is to make sure the styling matches the rest of your application.  In regards to the session management, most frameworks give that to you for free and you just need to create the users.  This page should log the user in or allow them to register.  That is it.  After this user is logged in, they will be redirected to your application with the html I showed above.  But it should be two separate .html pages and you should not expose any of your application content in the login page.  Lastly, you need to make sure that the user is logged in to access your main applications content."
angularjs,3b55q4,Tain101,3,Fri Jun 26 01:34:55 2015 UTC,"$stateProvider.state('app',{   url: '/',   views: {       'headerView': {         controller: 'state3Controller',         templateUrl: 'pages/header.html'         }    }  }) .state('app.home', {    views: {        'mainView': // etc    }  }   Have main root state, that would have your ui-view='header' / ui-view='main' ui-view='footer' in the template. In your child states, you should only need to define the 'main' view."
angularjs,3b55q4,e82,1 point,Fri Jun 26 11:11:21 2015 UTC,"you can also initialize your header/footer as views that are never altered (code is from a dashboard project i was working on):  $stateProvider     .state('app', {         url: '/',             views: {                 'header': {                     templateUrl: 'templates/partials/header.html'                 },                 'content': {                     templateUrl: 'templates/partials/login.html'                 },                 'footer': {                     templateUrl: 'templates/partials/footer.html'                 }             }         })          .state('app.dashboard', {             url: 'dashboard',             views: {                 'content@': {                     templateUrl: 'templates/dash/dashboard.html'                 },                 'window@app.dashboard': {                     templateUrl: 'templates/dash/dashboard.data.html'                 }             }          })          .state('app.dashboard.directory', {              url: '/directory',              views: {                  'window@app.dashboard': {                      templateUrl: 'templates/dash/dashboard.directory.html'                  }              }          })"
angularjs,3b55q4,my_ledge_ends,1 point,Fri Jun 26 16:18:22 2015 UTC,your not giving the views a controller? Am I missing something?  I've updated my OP after trying to figure out the parent.child thing.
angularjs,3b55q4,my_ledge_ends,1 point,Fri Jun 26 23:13:50 2015 UTC,"you don't need to give views a controller in the router. you can specify that in the markup with ng-controller or you can just serve a ""plain"" view.  basically, you can have a controller if you need/want it but it's not a requirement."
angularjs,3b55q4,mdwvt,1 point,Sun Jun 28 01:33:42 2015 UTC,The children need a controller for the headerView. Is that doable?   I've updated my OP after trying to figure out the parent.child thing.
angularjs,3b55q4,mdwvt,1 point,Fri Jun 26 23:21:16 2015 UTC,Yeah this is basically what I was saying but if he needs to do special things for each header then I don't see how he can not specify the template and controller for each child state/view.  It's just what you have to do.
angularjs,3b55q4,Bambuh,2,Fri Jun 26 23:40:27 2015 UTC,"I think that you could probably get away with declaring the header view in a parent state.  Whether the parent state is abstract or not depends on what you want to do really.  I'm not sure, but I think if you declare a ""default"" header view template in the parent it will be used unless a child state overwrites it.  Anyone else reading this, does that sound right/like it will work.    Now, if you really do want to be changing the header content with every state that's loaded, I don't know if there's an easier way to write out the declaration of your views and their templates.  Hope this helps!"
angularjs,3b354o,jewdai,1 point,Thu Jun 25 16:13:56 2015 UTC,"You will need to show your controller, because if I use your above code and then in my controller I have:  $scope.FacultyMember = {};  $scope.FacultyMember.FacultyType = ""Visiting"";  The box gets defaulted to Visiting to Books.  Also something I've noticed in your label you have a for=""FacultyType"" but no ID like that on your select.  EDIT: Also one other thing you really shouldn't hard code your combo box values, rather try using ng-repeat."
angularjs,3b354o,ghostcyp3r,1 point,Thu Jun 25 19:04:53 2015 UTC,you're right i realized that later....but foir some reason it was adding whitespace to it... i had to trim the values manually when retrieved from the server... its frustrating....
angularjs,3b24ld,FourGGGG,2,Thu Jun 25 10:28:07 2015 UTC,"I have not really had time to digest the code, but a simple look, and I wonder why you don't just do an ng-repeat for the template, in your view. Every element ng-repeat writes could be a directive with an isolated scope.  so instead of having your directive  iterate through an array to write itself to the dom, you have a controller to hold the array, and the view will write the directive.  however, I could be misunderstanding your needs.  good luck!"
angularjs,3b24ld,Beaulne,1 point,Thu Jun 25 14:15:42 2015 UTC,I would also suggest putting this in jsfiddle or something and using something like https://github.com/rwaldron/idiomatic.js/ to style your code so others can read it faster and easier!
angularjs,3b2ly9,highhard_one,9,Thu Jun 25 13:44:21 2015 UTC,"I believe the motivation is to generate automated (or at least semi automated) change logs from the commit messages. I don't think they want to establish a standard for all github projects, but rather facilitate their workflow and safe valueable time when creating release notes."
angularjs,3b2ly9,KumbajaMyLord,7,Thu Jun 25 15:19:55 2015 UTC,This is exactly why it is done. We use this style of commit message on Aurelia. We're able to produce a change log for each release based upon the commit messages like this: https://github.com/aurelia/templating-binding/releases
angularjs,3b2ly9,NewNole2001,1 point,Thu Jun 25 20:15:08 2015 UTC,"I hate how things get truncated at 50 chars. I also use pivotal tracker integration. Tried keeping with that format, but   [fixes #1234567] feat(thing): Don't leave a whole lotta room to say what I need in 50 characters.   Although, could possibly write a tool to pick up the pivotal number - use their API, and get that to generate my change logs ... and also tag the stories to what version it's in and ... and .. and .. goes off to code"
angularjs,3b2ly9,e82,1 point,Fri Jun 26 11:42:11 2015 UTC,"It's not perfect, I'll give you that. But you're still able to go in to as much detail as you'd like in the commit message body. You're always going to have to deal with constraints."
angularjs,3b2ly9,NewNole2001,2,Fri Jun 26 13:06:15 2015 UTC,"Yeah,  I actually like the idea of the angular-style commits. Guess I'm more annoyed with how much room the Pivotal tags take up.   When you only have 50 characters to work with, having up to 20 of them taken up by pivotal messages is a bit of a challenge."
angularjs,3b2ly9,e82,1 point,Fri Jun 26 13:27:43 2015 UTC,"If you were to avoid this style, you'd probably still end up writing something with a similar effect (Fixed blah blah in Foo component) but there'd be no standardization. This way allows you to namespace your changes right off the bat - fix(foo): x now does y - so you don't have to explain that fact in the bulk of your message. And, as others have said, the added benefit is documentation generation and a standardized way to sift through messages.  It's a commit message, so at the end of the day as long as it's readable and makes sense to your team do whatever you want. The only time I can see it not making sense is if you're already working on an isolated branch (feature/some-component) in which case this commit style is probably redundant."
angularjs,3b1zsv,een_coli,1 point,Thu Jun 25 09:18:32 2015 UTC,"For anyone reading this afterwards the fix was to change the directive to be      restrict: 'A' Making it an attribute instead of element directive and to remove the replace line.  I then reference the directive in index.html via <thead table-headers>  This is because thead only expects a small subset of tags within it, such as <tr>. It doesn't account for custom directives even if you use the replace keyword"
angularjs,3azctf,jeeezu,7,Wed Jun 24 18:43:01 2015 UTC,"So a lot of people in here are playing the ""I'm shocked no one is doing this!"" card, I've worked on many enterprise angular projects and what is surprising to me is what people call unit tests. People are claiming ""yeah I have 100% coverage"" and that it's ""easy"".. it is not easy to write meaningful quality tests. Writing unit tests is like writing code itself, it's possible to write complete garbage unit tests, and most people do in my experience."
angularjs,3azctf,PUSH_AX,2,Thu Jun 25 06:13:05 2015 UTC,"That's exactly my thought! The thing is, if you want to learn writing unit tests to ensure code quality, if you write bad code, you are going to write bad unit tests.   But what's the difference between quality, meaningful tests and just tests that just waste time? And I think that is something that scares many people of in the beginning (including me).  I mean where do you start? what books or blog posts should you read to get you started ?"
angularjs,3azctf,thunderGunXprezz,6,Thu Jun 25 11:02:48 2015 UTC,"As a software tester this is extremely depressing to hear. I feel like a lot of developers would benefit from having a better understanding of what software quality truly is. And if they did, they would never dare ask why unit tests are important."
angularjs,3azctf,cport1,3,Thu Jun 25 02:13:40 2015 UTC,I think the biggest thing here is junior devs vs senior devs... As well as writing software vs simply prototyping. A lot of junior front-end developers aren't aware what goes into building real production ready software.
angularjs,3azctf,pitne,4,Thu Jun 25 02:37:01 2015 UTC,"From someone that just picked up angular developement -  If I would work for a company i would probably do testing because of the  different styles the people probably structure their code and such. So the testing would ensure that everything is really working, even maybe if written in a hurry.   But if you write small to medium sized projects, you really think more about the structure of the project and if you do it properly you also think about the modules and all the details. And from my experience you ""test"" the project by just checking it with console.log or something similar and if it works, why should there be a reason that it won't work later on ? But that's just from my perspective with not much angular experience.   But the next thing i really want to learn is everything about testing and what the best way would be to write projects with testing in mind. Maybe you have some helpful ressources that you could provide, that helped you get into testing?"
angularjs,3azctf,couchjitsu,1 point,Thu Jun 25 03:14:47 2015 UTC,"tell that to the boss who doesnt give a shit about you or your job and hates dealing with you because hes a networker and your a programmer, what documentation bitch!! go baby sit this vendor and get me some purchase orders"
angularjs,3azctf,KyleG,3,Thu Jun 25 09:41:10 2015 UTC,I am disappointed but not surprised. Testing is talked about WAY more than it's done.
angularjs,3azctf,dkran,1 point,Thu Jun 25 06:59:16 2015 UTC,"LOL yeah. I've seen companies talk about their comprehensive unit and regression testing suites, but few have ever been able to show one to me when I, as the lawyer for a tech company, ask to see it before we partner with them."
angularjs,3azctf,theywouldnotstand,2,Thu Jun 25 03:32:12 2015 UTC,"As of now I don't know how to do angular unit tests.  I just learned how to do mocha unit tests and it's amazing, so I'd imagine as I learn to test in the future I'll continue.  It's really amazing having the ability to not find sudden broken areas in my code.  When I first wrote my REST api unit tests, I found that like half the routes had minor errors.  I was like WTF"
angularjs,3azctf,dkran,1 point,Thu Jun 25 04:10:43 2015 UTC,"I imagine you can write unit tests with any testing framework, but they specify Jasmine and the angular-mocks module in the documentation.  I'm not sure how easy it is compared to Mocha, but it looks pretty straightfoward to me."
angularjs,3azctf,cport1,1 point,Wed Jun 24 21:24:26 2015 UTC,"I wasn't saying I would write my angular tests in mocha, I was just saying that since I learned to do basic testing, I don't think I would write new apps without testing. Too much went wrong in my first testing phase and it immediately made me realize the importance haha edit: Jasmine and the angular-mocks never looked much different from the mocha and other tests."
angularjs,3azctf,BStruthers,1 point,Wed Jun 24 23:28:35 2015 UTC,I am shocked more people don't test than do... What kind of companies do yall work for...
angularjs,3azctf,cport1,4,Fri Jun 26 23:42:22 2015 UTC,"I'm pretty shocked too.  I've never had much interest in automated unit tests until I started doing Angular.  Now all my projects are around 100% code coverage.  100% may seem excessive but it's caught a lot of issues and gives me piece of mind.  Plus, it's really not that hard to do.    My advice to those who aren't doing them- Start!  And do them as you go, don't wait till the end."
angularjs,3azctf,cport1,2,Wed Jun 24 23:36:23 2015 UTC,"Im quite new to angular and I'm working on a personal project and I just can't decide if I should start writing unit tests.  I researched the topic and read some interesting articles, but for a personal project I'm not quite convinced that unit tests really offer me something I need - (at least for now)  I didn't write a test yet, but what I don't quite get yet is - why would you write all that lines of code for a unit test, just to check that your code isnt shitty? And if your code is shitty, then I don't think the unit tests will be much better."
angularjs,3azctf,dkran,2,Thu Jun 25 00:47:56 2015 UTC,It's one thing to not test when you're simply prototyping... But as your application grows (especially with large data sets on the backend and different data types) it's going to save you a lot of time narrowing down the issue. It also helps a lot when collaborating with different teams on the front end and backend.
angularjs,3azctf,letmebeeee,1 point,Wed Jun 24 23:40:36 2015 UTC,"For a team I really understand unit testing because of the differences in the programming style. But I mean how can I prepare for that as someone that yet never worked on a team ?  How do I know what to test and what to just ignore? That's kinda holding me back from really digging in to testing, because, what if i learn unit testing, and then later I realize that what I learnt is to know good use if i work together with a team"
angularjs,3azctf,KyleG,5,Wed Jun 24 23:49:33 2015 UTC,One of the biggest things unit testing accomplishes is separation of concerns. As your application grows so does the complexity. Unit testing forces you to separate all these different aspects of your code. Take for instance an application making many asynchronous calls and constantly updating the dom. You can decouple all of these calls into tests to narrow down an issue ...the best part about unit testing at this point is your ability to revert and refactor your code. ALSO Don't write tests for every function you make. It's not about being an arduous task. It's about finding failure points where you get bad data.
angularjs,3azctf,KyleG,2,Wed Jun 24 23:54:02 2015 UTC,"This is a very thought-provoking comment, thanks.    edit:  it's also how I used my simple tests I made.  not testing every single freaking thing, but the broad picture.  The broad picture found most of the single freaking things that were there."
angularjs,3azctf,letmebeeee,1 point,Thu Jun 25 00:51:17 2015 UTC,"To me it's just like... Write quality code that gets the job done. If a team unit tests to achieve that, good for them. If not, so what?"
angularjs,3azctf,KyleG,2,Fri Jun 26 23:48:49 2015 UTC,"Write quality code that gets the job done   You talk as if writing quality code is as easy as going ""naw, I'm tired of writing shit code, time to write quality code.""  It's impossible to write quality code that survives ad hoc changes  as management/clients request them without unit testing or wasting a shitload of time tracking down new bugs. No matter how robust your code was originally."
angularjs,3azctf,letmebeeee,1 point,Thu Jun 25 01:17:02 2015 UTC,"yeah, that's right, are there any articles, blog posts etc. you can recommend?"
angularjs,3azp1o,cappie013,4,Wed Jun 24 20:15:12 2015 UTC,depends on what you are trying to do. Sounds like you might want to make use of https://github.com/angular-translate/angular-translate
angularjs,3azp1o,DTownSMR,0,Wed Jun 24 21:46:09 2015 UTC,This ^
angularjs,3azp1o,Narcicyst,1 point,Wed Jun 24 22:10:49 2015 UTC,"Angular 1.4 added some key support (http://angularjs.blogspot.com/2015/05/angular-140-jaracimrman-existence.html), and the official i18n module can be found here: https://github.com/angular/i18n"
angularjs,3azp1o,fatty1380,1 point,Wed Jun 24 21:21:20 2015 UTC,"As /u/DTownSMR said, Angular Translate is the way to go. We use it at work. It's easy to set up - just add it as a dependency and load your translations. From there, you can either use the 'translate' directive or you can pipe strings through the provided 'translate' filter. I wrote up a 'getting started' guide if you want to check it out: http://daveceddia.com/angular/multilingual-angular-using-two-or-more-languages-in-your-app/"
angularjs,3azp1o,simcptr,2,Thu Jun 25 00:26:38 2015 UTC,"So you decide the quality of a plugin based on dank memes? and then talk about ""too tacky to use for an enterprise project""? yeah..   Maybe you could further explain what the advantages of angular-gettext are ?"
angularjs,3axo7t,anurag619,2,Wed Jun 24 09:33:31 2015 UTC,A while back I compared the performance of typehead vs my implementation. You are welcome to check it out (beware of endless digests ... )
angularjs,3ay4eg,Sarke1,5,Wed Jun 24 13:00:10 2015 UTC,"Facts:     V2 is not yet here There's no guarantee there won't be a V3 V1 is here and despite what many say, it's more than just good enough.   Decide for yourself."
angularjs,3ay4eg,aaaqqq,2,Wed Jun 24 13:23:13 2015 UTC,"Real possibility: Even when v2 is out, it's so different that many people won't EVER upgrade.  For example, there are lots of people still happily using Python 2.x because Python 3.x was so different and backwards incompatible."
angularjs,3ay4eg,skrowl,2,Wed Jun 24 15:02:51 2015 UTC,This is probably more fact than probability. It won't be fun maintaining those apps but someone has to do them. source: I maintain these legacy apps.
angularjs,3ay4eg,kai3x5,1 point,Wed Jun 24 18:29:14 2015 UTC,"HOPEFULLY someone will at least make a ""here's an addon that allows you to use controllers in 2.x"" to help us some in migration (or just be lazy and continue using controllers forever)."
angularjs,3ay4eg,skrowl,3,Wed Jun 24 18:40:24 2015 UTC,"If you learn Angular2, you will not really be able to build anything ""real"" with it for quite awhile. The fact is, Angular2 is in a very Alpha state. There are app breaking changes weekly, major concept changes monthly, and almost zero documentation for most things.   On the flip side, the transition from Angular1 to Angular2 is really not that bad if you develop in Angular1 correctly."
angularjs,3ay4eg,snwstylee,2,Thu Jun 25 16:25:35 2015 UTC,"I'm just getting past the beginner phase with angular and my opinion is as follows:   it's never bad to learn something new, especially if that something is a complex client side framework angular 1 is not going away the moment angular 2 arrives.  there will be some shared concepts between the two frameworks    Start learning angular 1 because as you said there are more resources. Maybe once you get your feet underneath you, follow a couple of a2 tutorials to get an idea of what the framework is all about. We'll know a lot more once the framework reaches release candidate status"
angularjs,3ay4eg,RobertMuldoonfromJP,1 point,Wed Jun 24 13:39:15 2015 UTC,"Watching the 2015 ng-conf presentation, Google were expected to migrate their first internal Angular 1.3 project to Angular 2 in May this year. They came up with both inside-out and outside-in methods for migrating applications. So we do expect the industry to catch up on this. How fast? I think nobody can predict. I don't have examples of such popular short-lived technologies as Angular 1, tbh.  If you like to be an early adopter, ahead of time, you should start playing with V2."
angularjs,3ay4eg,mihneasim,1 point,Thu Jun 25 12:18:11 2015 UTC,"Maybe by May 2016... but after seeing the progress on the current state of NG2, there is no way it will be ready for production anytime soon.  On the flip side, the finished product is going to be pretty amazing."
angularjs,3ay4eg,snwstylee,1 point,Thu Jun 25 16:35:59 2015 UTC,"If you're open-minded, take a look at react and flux. It has everything now that angular 2 essentially adds to angular 1. If you're hard on angular, then you've got no choice but to use 1.x, which is already vastly outdated and will more or less be obsolete by the time angular 2 is out of beta."
angularjs,3ay4eg,SomeRandomBuddy,1 point,Wed Jun 24 18:15:09 2015 UTC,Vastly outdated?
angularjs,3ay4eg,lampshadish2,0,Wed Jun 24 19:00:40 2015 UTC,"Do a little digging on bi-directional data binding (prominent feature which originally made angular 1.x popular). It's been removed in angular 2. Edit: also outdated in the sense that people who are interested in using angular are in complete limbo right now. On one hand, why start a project using a framework which is about to be almost totally overhauled? On the other hand, it's successor isn't ready yet..."
angularjs,3ay4eg,SomeRandomBuddy,3,Wed Jun 24 19:12:53 2015 UTC,"people who are interested in using angular are in complete limbo right now. On one hand, why start a project using a framework which is about to be almost totally overhauled? On the other hand, it's successor isn't ready yet...   That's exactly how I feel right now."
angularjs,3ay4eg,ccrabb,1 point,Wed Jun 24 19:39:39 2015 UTC,I vote v1 using ES6 (ES 2015) or TypeScript.  You'll be using v1 in kind of a v2-ey way that will help for a future migration or rewrite.  If you choose ES6 use babel.
angularjs,3ay4eg,ccrabb,1 point,Wed Jun 24 18:26:16 2015 UTC,I was planning on using typescript. Any reason to suggest babel over it?
angularjs,3ay4eg,dawar_r,1 point,Wed Jun 24 19:43:57 2015 UTC,"Nope. I use TypeScript professionally and love it. With babel you'd be able to use nearly every feature of ES6, with TypeScript not so much but most of the big pieces are there. Just depends on if that's important to you."
angularjs,3ayc6i,BelgoCanadian,3,Wed Jun 24 14:11:04 2015 UTC,You have to be careful when mixing AngularJS and JQuery. It's two different systems trying to make changes to and read from the DOM at the same time.  For this thing it would be best to either 1. Create directives for your UI controls or 2. Drop angular and go completely JQuery
angularjs,3avgtp,schizoduckie,3,Tue Jun 23 20:48:13 2015 UTC,No body actually answered your question.. I think you should split it off and turn it into a separate project.. Please notify me when you do ! I'd love to see it and contribute
angularjs,3avgtp,epicpoop,3,Wed Jun 24 02:01:13 2015 UTC,"Are they position absolute?  Looks cool though, definitely something that would be useful generically."
angularjs,3avgtp,jewishobo,1 point,Tue Jun 23 21:19:23 2015 UTC,"Yes, they are absolutely positioned (within the container)  There are some padding options for top and left programmatically currently.  For those interested, my current (uncleaned and undocced) implementation is here:  https://github.com/SchizoDuckie/DuckieTV/blob/angular/js/directives/seriesList.js#L42  And a template that it's used in using can be found here: https://github.com/SchizoDuckie/DuckieTV/blob/angular/templates/serieslist/favorites.html#L4  There's obviously a lot to improve to make it generic, but it should be very possible"
angularjs,3avgtp,wilburspeaks,3,Tue Jun 23 21:26:49 2015 UTC,That is really cool. How long did it took to make that?   Really impressive.
angularjs,3avgtp,wearemjc,1 point,Tue Jun 23 21:35:57 2015 UTC,"Thanks :) It took about an evening of tinkering to get the basics working from the float-based layout I have in the current version. The most work was the thought process and getting the interaction with the right panel working properly, which was about another evening of work :)"
angularjs,3avgtp,RunHomeJack,2,Tue Jun 23 21:50:11 2015 UTC,How are you doing the scrollbars and the overflow? a directive?
angularjs,3avgtp,atticusw,2,Tue Jun 23 21:36:02 2015 UTC,"That's just plain css. It's an absolutely positioned div with overflow-y:auto and a left,right,top and bottom set onto it. which makes the overflow scroll system work with absolutely positioned elements inside there (positioned by the new grid directive) :)"
angularjs,3avgtp,pandavr,2,Tue Jun 23 21:52:28 2015 UTC,"Looks very snazzy but one usability thing. when the available space changes and things move to a new line, it's confusing a bit, and i wasn't sure whether the images preserve order (they do, right?).  it has a bit to do with the way images float to the new line. i like how they float when filtered, it's a much bigger change, but the continuity of just breaking lines, the animation might be a bit too much.  just my thoughts. love it otherwise! :)"
angularjs,3avgtp,KumbajaMyLord,1 point,Wed Jun 24 02:30:59 2015 UTC,"That's specifically why I created this and added the yellow highlight and scroll into view part. Since my UI relies a lot on the dynamic resizing of the split panel on the right, espcially when it was still floats I found that you couldn't keep track of the current show at all. Now you'll notice the yellow outlined active show that's always in the top row.  If you have any further suggestions to improve this, feel free to share them!"
angularjs,3avgtp,cmac458,2,Wed Jun 24 18:44:26 2015 UTC,Oh well this looks familiar :)  (angular-translate-once author)  Great work! And would love to see it broken into an independent module
angularjs,3avgtp,cmac458,2,Wed Jun 24 04:56:04 2015 UTC,Absolutely :)
angularjs,3avgtp,devourment77,2,Wed Jun 24 09:41:00 2015 UTC,"Looks pretty cool, both the grid and DuckieTV as a whole. Will definitely check it out."
angularjs,3awpqq,gdi2290,-1,Wed Jun 24 02:53:04 2015 UTC,ya preboot seems like pretty sweet shit. looking forward to rubbing that shit all up in my code
angularjs,3awpqq,pitne,1 point,Thu Jun 25 07:26:02 2015 UTC,graphic
angularjs,3axe6p,chronixlol,3,Wed Jun 24 07:09:48 2015 UTC,"Generally what i've done, was on the main applications .run() I would inject $rootScope, and listen to any state change issues from there, the ""top"" of your application. Then I could also use maybe  bootstrap or material toast message or pop up a dialog there with error information.  That way you are only putting your state change listens in one location. No need to put them all over in different controllers, duplicating code."
angularjs,3axe6p,BoleroDan,1 point,Wed Jun 24 13:32:33 2015 UTC,"It gets a little tricky depending upon how modular your app is (i.e. defining states in modules). Assuming you aren't doing that, I'd agree that putting your state change listeners in your app run makes the most sense."
angularjs,3axe6p,zomgwtfbbq,1 point,Wed Jun 24 19:02:23 2015 UTC,"Good idea, would it be bad tho to also listen to $stateChangeError on login controller so I could hide the login spinner? If I hide it before changing state there's no indicator that something is happening in case the resolves take longer."
angularjs,3axe6p,snwstylee,1 point,Thu Jun 25 06:58:32 2015 UTC,Keep it modular.  You're best bet is to probably create a separate spinner directive that sits in your index file. This directive listens for a $rootScope.broadcast telling it when to start (show) and stop (hide).  It also give you complete control over when you are showing and ending your spinner.
angularjs,3avlr8,pass_by_reference,3,Tue Jun 23 21:22:40 2015 UTC,"Well, as you know, a reference is just that.  So if the values stored in the $scope.songs[0] object changed, so would the same values in $scope.currentSong and visa versa.    Later in the tutorial they make changes to currentSong which would show up in the songs array if they didn't make a copy.  :)"
angularjs,3avlr8,TurboGranny,2,Wed Jun 24 00:18:41 2015 UTC,"If they do a copy, modifications made to the $scope.currentSong value will not modify the value from the array."
angularjs,3avlr8,ssmathias,1 point,Tue Jun 23 21:39:19 2015 UTC,"I tend to use angular.copy in modals. Usually I copy the value in the beginning and if the user presses ""Cancel"", I can restore the original value from the backup."
angularjs,3auc59,compNerd0101,1 point,Tue Jun 23 16:02:22 2015 UTC,have you added .json as a static content file type in iis?
angularjs,3auc59,Drchrisco,1 point,Tue Jun 23 16:39:19 2015 UTC,"OP said they're using http-server, not IIS.  EDIT: Whoops. I meant to say, but your point stands. http-server may be serving the file with a content type of text/plain instead of application/json."
angularjs,3auc59,BishopAndWarlord,2,Tue Jun 23 17:27:04 2015 UTC,I have a hard time reading.
angularjs,3auc59,Drchrisco,1 point,Tue Jun 23 17:29:24 2015 UTC,"does this help ?   var app = angular.module('scattChartApp', ['nvd3']) .controller('MainCtrl', function($scope, $http) {   $http.json('chartConfig.json').success(function(response) {     if (typeof response === 'string') {       resonse = angular.fromJson(response);     }       response.options.chart.tooltipContent = function(key) {          return '<h3>' + key + '</h3>';       };       $scope.options = response.options;       $scope.data = response.data;   }); });   if not can you $log response and see what's it like."
angularjs,3auc59,dvidsilva,0,Tue Jun 23 21:28:16 2015 UTC,mime type?
angularjs,3ax5b0,consultwithmike,2,Wed Jun 24 05:25:40 2015 UTC,"Because it appears to be an HTML5 data attribute and those are used for arbitrary data; AngularJS is not going to even look at that value!   No, this is garbage and it's not accurate.   You can preface ALL of your angular directives and scope vars with data- in the HTML and angular automatically strips off the data-. The data- is there to make old browsers and IDEs happy. It's purely optional. Once it's stripped off the data-, angular uses whatever is left. In his example, data-source would become just source. THAT'S why it isn't binding (dataSource != source). He has no idea how angular works.  Edit: And he wants $30/15mins to ""mentor"" you. Lolz."
angularjs,3ax5b0,zomgwtfbbq,1 point,Wed Jun 24 18:54:49 2015 UTC,"yeah, the TL:DR of this article spam is just - dont use stupid prefixes..  so that'll be 200 billion dollooors for the mentoring pls.."
angularjs,3auand,ram_kris,1 point,Tue Jun 23 15:50:49 2015 UTC,I thought this was just a link to download Angular for a minute...  Took me a while to realize the left nav menu is actually the sections of the tutorial.
angularjs,3auand,simcptr,1 point,Thu Jun 25 01:19:26 2015 UTC,How up to date is this?  I really like the format but want to ensure it's not teaching the wrong things first.
angularjs,3auand,een_coli,2,Thu Jun 25 09:46:55 2015 UTC,"If you are new to angular, check out the free course from codeschool - http://campus.codeschool.com/courses/shaping-up-with-angular-js/  Helped me to understand the core concepts of angular, I can only recommend it!"
angularjs,3asv4t,tomdush,2,Tue Jun 23 06:09:54 2015 UTC,"Sad that almonst none of the pages use angular as the main framework. If it is used as the main framework, it's low quality code.  Sad to see."
angularjs,3asv4t,noruega,2,Tue Jun 23 10:37:04 2015 UTC,Also any app that is built in Ionic Framework
angularjs,3asv4t,CertifiedWebNinja,2,Tue Jun 23 13:41:48 2015 UTC,What about itunesconnect.apple.com ?
angularjs,3asv4t,placidified,1 point,Wed Jun 24 03:53:25 2015 UTC,Whey. Our app made that list!
angularjs,3asv4t,wedgybo,1 point,Tue Jun 23 08:18:50 2015 UTC,Not famous yet but Satta makes a lot of use of what angular has to offer. Good list by the way.   Disclaimer : I've worked on it.
angularjs,3asv4t,cristiano2lopes,1 point,Tue Jun 23 09:30:46 2015 UTC,"I think Netflix dropped Angular with the re-design, no?"
angularjs,3asv4t,Switche,1 point,Tue Jun 23 16:55:02 2015 UTC,Last time I looked the online ordering portion of the Jimmy Johns website was angular.
angularjs,3asv4t,Riggs109,1 point,Tue Jun 23 20:52:17 2015 UTC,iTunes Connect should be in there. And that too is poorly written.
angularjs,3ath6j,oromier,2,Tue Jun 23 11:19:07 2015 UTC,"With angular and $http, you don't need to do deferred.resolve, because $http.get/etc already returns a promise.  Once you are in a promise chain, every 'then' will return a promise (even if the function inside of it isn't explicitly returning one).   Could have   function someFunction() {    return $http.get(url)            .then(function(response) {                return myFunc(response.message);              });  }  function myFunc(message) {      return $http.get(someOtherUrl)               .then(function(response) {                  var result = doStuff(response);                  result.someText = 'Hey now!';                  return result;                }); }   // then, when you do  someFunction()  .then(function(result) {       // result would have someText being equal to 'Hey Now';    });"
angularjs,3ath6j,e82,1 point,Tue Jun 23 12:11:58 2015 UTC,is working thx
angularjs,3ath6j,sgalenw,1 point,Tue Jun 23 21:28:57 2015 UTC,You need to make sure you return each part of your calls to promsies.  function myFunc(message) {     return $http.get(url).success(function(response){          return deferred.resolve(response);      }); }
angularjs,3aq6az,Foxandxss2,1 point,Mon Jun 22 16:40:55 2015 UTC,Nice article! Been looking for an overview like this.
angularjs,3aq6az,badsyntax,1 point,Mon Jun 22 20:39:54 2015 UTC,Is webpack and jspm the same thing?
angularjs,3aq6az,ogrechoker,2,Mon Jun 22 20:57:54 2015 UTC,"No, it is not. I will try to write an article about JSPM as well."
angularjs,3aq6az,Ryantown,1 point,Mon Jun 22 22:17:59 2015 UTC,"I've had trouble finding some good articles about JSPM and Angular so I support that idea.   Although, wouldn't the process be pretty similar to how this Webpack project is set up?"
angularjs,3ar2jd,MordorStroller,2,Mon Jun 22 20:39:41 2015 UTC,You could use a service as they are singletons that will be shared across all controllers but can you provide some more information? It's more than likely that you're trying to fit a square peg in a round hole.
angularjs,3ar2jd,ccrabb,3,Tue Jun 23 00:04:23 2015 UTC,Second this - could you provide some more information? A sample use case?
angularjs,3ar2jd,the-anconia,1 point,Tue Jun 23 00:48:07 2015 UTC,How would you get the information into a service?
angularjs,3ar2jd,clakclakclak,3,Tue Jun 23 00:16:06 2015 UTC,"if its controller -> view, theres already two way binding.  have your shared service there.  if you want more control, use directives in your views and inject the service."
angularjs,3ar2jd,Switche,1 point,Tue Jun 23 01:06:13 2015 UTC,"From the view, you could use standard models via ng-model, which you could have previously bound to a service property in the controller, ie ""$scope.myModel = MyService.myModel"".   That, or use directives like ng-change or others, including custom directives, to more explicitly set the service property. For ng-change, ng-change=""setWhatever()"", in your controller have a function $scope.setWhatever, and in that set myService.whatever = $scope.whatever. Then the other view will have that service's property set already.  You could also use stateParams or a few other solutions. Best design depends highly on what your situation is. If you can explain I can try to help tomorrow morning."
angularjs,3ar2jd,ccrabb,1 point,Tue Jun 23 04:19:45 2015 UTC,"I have user information from a sails.js backend being displayed with an angular.js view on the frontend via a controller. The purpose of this view is to edit the information, which is successful. I want to take that newly edited information and use it on an entire different view. Should I use a service is the original controller (the one that receives user info from the backend) and then use that same service in a different controller for the second view since it will then contain current/updated information?"
angularjs,3ar2jd,ccrabb,1 point,Tue Jun 23 19:28:20 2015 UTC,"Can you do something like this?:  <div ng-controller=""MordorStrollersController as vm"">    <directive1 user=""vm.user""></directive1>    <directive2 user=""vm.user""></directive2> </div>   Else, if you really need both controllers to remain separate, then yeah it sounds like an angular service is what you want. Something like this:  module.factory('sharedUserService', ['$http', function() {     var currentUser;     function fetchUser(userID) {         // return $http request        // set currentUser = response     }      return {         currentUser: currentUser,         fetchUser: fetchUser     } }]);   Inject the service into both controllers. Then something like:  if(!sharedUserService.currentUser ||     sharedUserService.currentUser.ID != id) fetchUser   tl;dr: Basically what /u/TreeScalper posted yesterday."
angularjs,3ar2jd,ccrabb,1 point,Tue Jun 23 23:20:55 2015 UTC,"Thanks for the response. I'm not too familiar services (or angular for that matter) and would appreciate a few explanations. In your example, what exactly is ""userID"" being passed into ""fectchUser?"" Also, how do I use a service in a controller (syntactically)?  edit: I think I'm sort of getting it, but it keeps saying it's undefined."
angularjs,3ar2jd,TreeScalper,2,Wed Jun 24 18:38:26 2015 UTC,"Well it sounds like what you need, more than help on a specific issue, is to read an angular tutorial.  With that said, here's this: http://jsfiddle.net/wk907tdy/  It's not 'sharing data between controllers' but more the angular way of doing things."
angularjs,3aqilh,pflanner1231,2,Mon Jun 22 18:12:14 2015 UTC,http://offsite.careers
angularjs,3aqilh,utuxia,1 point,Mon Jun 22 18:48:28 2015 UTC,"Wow this is very helpful, thank you!"
angularjs,3aqilh,the-anconia,1 point,Mon Jun 22 18:59:47 2015 UTC,I'm located in Atlanta. Do you have an email address I should send info to?
angularjs,3aqilh,gdiocarez,1 point,Tue Jun 23 00:49:43 2015 UTC,Hi do you accept junior developers?
angularjs,3aqilh,invalid_dictorian,1 point,Tue Jun 23 02:24:58 2015 UTC,"Do you accept part time? I've got varying hours of availability from week to week, but I work fast ;)"
angularjs,3aj787,jeeezu,9,Sat Jun 20 18:42:35 2015 UTC,"Absolutely not. It's a great use case, but a lot of the time I need to do DOM manipulation and that's where you do it. Or if you need to do performance optimizations and the component or feature isn't necessarily re-usable.  I think the thing to keep in mind is that you should build things with re-usability in mind. Just like you try to not write one-off CSS selectors. Even if you think you may not use it down the line, there's a chance you will.   Also a lot of the time it just makes logical sense to isolate complex functionality in a directive."
angularjs,3aj787,dmackerman,2,Sat Jun 20 19:04:45 2015 UTC,"p in mind is that you should build things with re-usability in mind. Just like you try to not write o   That's what I thought, I used them in that way but after taking a look at the styleguide from john papa, where he only has one ""widget"" folder and I did not find any other directives outside of this (https://github.com/johnpapa/ng-demos/tree/master/cc-bmean/src/client/app/widgets ) folder - I was confused.   Where is a good place to put directives when you expect them not to be reused? Using the ""by feature"" folder structure I would just put them into the fitting module folder - or should all the directives be in one folder ?"
angularjs,3aj787,willgresham,2,Sat Jun 20 19:18:21 2015 UTC,"Personally, I treat directives like features and put all directive code (HTML/Controller/Directive declaration...) in it's own folder; folder named based on the directive, suffixed by '-directive'.   That folder then goes in the app root along with the feature folders for reusable components, or within a feature folder for feature specific directives."
angularjs,3aj787,ogrechoker,5,Sat Jun 20 20:36:30 2015 UTC,"I feel like directives should be treated as a non-spec compliant ""web component"", which is what angular 2 is embracing iirc. So my belief is even if you aren't going to reuse it in your app, if it could theoretically be used by someone else, somewhere, it should be a directive. Look at angularstrap or ui bootstrap, all of their features are directives -- they just also happen to be used by other people (you and me)"
angularjs,3aj787,abyx,2,Sat Jun 20 23:03:54 2015 UTC,Of course that using them for reusable stuff is great and an obvious use case. Keep in mind that Angular 2 will make directives the basic building blocks we use - so they'll be the right tool for pretty much anything with a template I think.    I'll add that even before the 2.0 rumblings I've long started using directives with lots of isolation because I find it makes code more maintainable and less spaghetti prone (a bit shameless link to an old yet popular post of mine about this).
angularjs,3aj787,djvirgen,2,Sun Jun 21 04:20:34 2015 UTC,"Great blog post! I just shared it with my team, and I think they're really going to like your example of using the ""requires"" feature."
angularjs,3aj787,ghostcyp3r,1 point,Mon Jun 22 16:15:27 2015 UTC,Great question and there are already some good answers.  One other point I would like to make is even if you create a directive and you will only use it once you still make your code cleaner by keeping your DOM manipulating code out of your business code.
angularjs,3aj787,utuxia,1 point,Sun Jun 21 05:05:55 2015 UTC,"Typically yes, but I also use it to isolate piece of the code that could potentially be re-usable or provide one piece of distinct functionality."
angularjs,3ai790,ghostcyp3r,3,Sat Jun 20 12:33:01 2015 UTC,"Hey, nice writeup! This is bound to be useful for anybody coming into angular who wants a quick overview of directives.  The only quick improvements I'd suggest offhand are around restrict:   You've got a typo in your code and your explanation; it should be restrict: ""E"", not restric: ""E"". Nothin' major, but it might trip up a newbie following along who doesn't know better. While you're describing the restrict attribute, it might be useful to mention that while ""E"" means ""Element"", ""A"" means ""Attribute"", allowing for directives like ng-class or ng-show. I don't know that I'd mention ""C"" (class) or ""M"" (comment), since those are not usually considered ""good practice"" except in really odd cases.   Other than those couple of things, nice job, and thanks for putting stuff together to help newcomers out!"
angularjs,3ai790,tapesmith,1 point,Sat Jun 20 16:12:54 2015 UTC,"Thank you for the feedback, facepalm about the typo, need to fix my code too :P  Also great point about explaining that ""A"" means attribute clearer."
angularjs,3ai790,jakblak90,2,Sat Jun 20 16:24:24 2015 UTC,"It would be easier to follow if more code was directly in the blog post.  I had to re-read and look at the repo to understand exactly what the directive was doing.    The most confusing part is understanding scope.  So we are using the 'album' variable defined in the ng-repeat to reference the albumData. Then album: '=data', gets the json so we can say album.name in the html.  Instead of saying albums.name which is how it is defined in the controller."
angularjs,3ai790,toddmotto,1 point,Sun Jun 21 12:18:07 2015 UTC,Thanks for the feedback. Will keep it in mind for my next post.
angularjs,3ai790,my_ledge_ends,1 point,Sun Jun 21 13:20:37 2015 UTC,"Some ideas for expanding/future posts: You touched on isolated scope, some more on this and best practices would be really great, such as why a developer should use ""=data"" in their scope Object for two-way binding, the other values you can pass in (such as ""@""), how using { data: '=' } is the same as { data: '=data' }. A follow up post on custom directives would be great with a tonne more info!  I'd also recommend keeping your isolate scope names the same as your attribute names (using { data: '=' }) otherwise when your app scales and directives grow it makes it more readable and cross referencing DOM attributes to child scopes is made easier through doing so."
angularjs,3ag5kb,AllStyled,6,Fri Jun 19 21:41:03 2015 UTC,My only suggestion is that you make the menu a true drawer and not an overlay because it fucks up the scrolling.
angularjs,3ag5kb,bliitzkriegx,2,Fri Jun 19 23:12:45 2015 UTC,Also you can click on a different subreddit without it being out
angularjs,3ag5kb,YodaLoL,1 point,Fri Jun 19 23:55:37 2015 UTC,"Thanks, fixed"
angularjs,3ag5kb,dawar_r,3,Sat Jun 20 07:18:50 2015 UTC,"A bunch of updates for you guys:   Card design is now optional (disable in header) Non-mobile users can now view the subreddit's sidebar Various responsive improvements Sidebar is no longer clickable, and scrollbar isn't visible when closed Active subreddit is showed in the header Css fixes  Users with hoverzoom can now again zoom links Improved redirecting behaviour Browsing over https is now supported New posts now load more early Various other fixes   Please keep the great feedback coming ! :)"
angularjs,3ag5kb,Majache,2,Sat Jun 20 08:05:10 2015 UTC,Did you remove the loading spinner icons too?  I remember checking this out yesterday and the (huge) loading spinner icons really intensified the loading times.   The reddit thumbnail agrees.
angularjs,3ag5kb,dawar_r,2,Sat Jun 20 11:41:48 2015 UTC,"Yeah I did, some people didnt like it. I'm contantly trying to improve the site :)"
angularjs,3ag5kb,Majache,2,Sat Jun 20 11:42:58 2015 UTC,"Nice work! Looks and functions almost identically to the website. Actually, infinite scroll and loading comments is a lot snappier in angular vs. RES and the actual website. What was the workflow like when you were developing this? I'd love to peek inside the source if you have it up anywhere."
angularjs,3ag5kb,Majache,2,Sat Jun 20 03:09:38 2015 UTC,"I believe this is being hosted with github and the source code should be under his name, which is in the URL."
angularjs,3ag5kb,Kryxx,2,Sat Jun 20 04:26:43 2015 UTC,"Hmm...didn't notice that, thanks!"
angularjs,3ag5kb,deadtree123,2,Sat Jun 20 05:03:03 2015 UTC,"Source is up here, feel free to fork it"
angularjs,3ag5kb,ralusek,2,Sat Jun 20 07:19:25 2015 UTC,"This is great, I've been learning angular and this is something I didn't think about. With reddits api on github it should have clicked but either way this is amazing. Angular is such a great tool. I'll definitely dig into the source and add some code if I can."
angularjs,3ag5kb,emcniece,1 point,Sat Jun 20 04:36:08 2015 UTC,If you want to start a project yourself feel free to hit me up with a PM if you need help :)
angularjs,3ag5kb,foobar5678,1 point,Sat Jun 20 08:05:36 2015 UTC,"Thanks! I just need to think of an angular project first, but I'll definitely get in touch."
angularjs,3agiv3,DeadPixel_,1 point,Fri Jun 19 23:36:43 2015 UTC,"I haven't used ES6/Babel for angular 2. I have an example of gulp and typescript here. The project is using electron, so it doesn't follow the same unit/e2e testing as you would for the browser.  I have another similar project setup using Aurelia. It uses gulp and babel, but I'm not precompiling.  If you have a repository, I can take a look at some point and see if I can help."
angularjs,3agiv3,jimschubert,1 point,Sat Jun 20 22:17:43 2015 UTC,"Hmm, still not a big fan of typescript. I prefer to code in ES6 and transpile it to ES5."
angularjs,3agiv3,jimschubert,1 point,Sun Jun 21 17:11:35 2015 UTC,"Yeah, I don't like the workflow required to make Typescript work. I much rather use Babel.  What problems are you having exactly? Are you trying to precompile, or have client transpiling with jspm/system.js?"
angularjs,3agiv3,jimschubert,1 point,Sun Jun 21 18:44:01 2015 UTC,Precompile.
angularjs,3agiv3,sbbowers,1 point,Sun Jun 21 18:49:21 2015 UTC,"To precompile, output to dist\, then set System.js config to alias ""*"" : ""dist\*.js"".  I think jspm 0.16-beta will remove the .js, at least I've noticed that and had to go back to using 0.15.7."
angularjs,3ae906,coffeejs,2,Fri Jun 19 12:17:44 2015 UTC,"I'm growing a little tired of these ""learn the basics"" tutorials. There's no shortage of them online, but nowhere have I found a way of transitioning my large, matured app over. We use config blocks and providers and a slew of directives that communicate through parent-child relationships. How do I do that in Angular  2? How do I do my unit testing? Will jasmine be ported over to use Angular 2 also?"
angularjs,3afl05,ghostcyp3r,1 point,Fri Jun 19 18:58:14 2015 UTC,"So does this mean that their ""html5"" routing with no hash in the url is the dedault, and that it won't feel like a huge hack to have a standard url pattern that's SEO friendly?  Also, any word on how Angular 2.0 will work with crawlers and making content available without running something like phantomJs in a separate instance to serve up the content to crawlers?"
angularjs,3afl05,blarsen06,1 point,Sat Jun 20 11:28:12 2015 UTC,"To be honest I'm still learning about routing in 2.0 but I would give your question a ""tentative"" yes."
angularjs,3afl05,blarsen06,2,Sat Jun 20 12:53:13 2015 UTC,"I understand, and it's not really finalized either.  There have been a lot of annoyances for me around this.  My company does mostly SEO, and for this to be a framework with origins from Google, and not really search engine friendly, really drove me up the wall.  I only used in for back end / admin / intranet purposes because of this, but I'd like to be able to rely on it for public usage knowing that all somewhat modern browsers and search engines can support it."
angularjs,3agtzc,CheddarOps,1 point,Sat Jun 20 01:26:57 2015 UTC,Look up ng-class. You can dynamically add a class to apply left or margin-left to the content
angularjs,3agtzc,trose89,1 point,Sat Jun 20 02:00:31 2015 UTC,"Thanks for your suggestion.  Taking your advice, I came up with this css class.  .sidenavOn { margin-left: 314px; }   Is this an intelligent way to do this or is there a better way where I tie the margin to the width of the sidenav, since that can technically change."
angularjs,3agtzc,trose89,1 point,Sat Jun 20 02:58:49 2015 UTC,Well you could measure your sidenav width with jquery and then use that to dynamically set the margin-left. I'd suggest avoiding a dynamic width unless you really must have it for some reason.
angularjs,3agtzc,dmackerman,1 point,Sat Jun 20 03:55:31 2015 UTC,"I don't need it per se, I was just thinking I should program defensively in case it might ever change.  However, that doesn't seem likely and easily fixed  in regression testing should it ever come up."
angularjs,3agtzc,enchantx,1 point,Sat Jun 20 04:00:12 2015 UTC,"Seems fine. Just know that at smaller widths, you probably do want it to come over top of the content."
angularjs,3agtzc,ghostcyp3r,1 point,Sat Jun 20 19:06:12 2015 UTC,That's a great point. I'll try to add that in and see how it goes.
angularjs,3agtzc,ghostcyp3r,1 point,Sat Jun 20 19:19:07 2015 UTC,"It seems you have a root issue of the elements being taken out of document flow somehow - are they floated or absolutely positioned? Setting both to display: inline-block will allow them to sit next to each other, and the content to sit to the left if the sidebar is hidden with ng-hide. No angular is really needed on this one."
angularjs,3agtzc,jameswyse,1 point,Sat Jun 20 21:07:07 2015 UTC,Have you tried using bootstrap grids? And dynamically updating the .col-md-* value?  http://getbootstrap.com/examples/grid/
angularjs,3aex6y,codeorelse_nl,1 point,Fri Jun 19 15:56:16 2015 UTC,Rip-ed
angularjs,3aeto7,ower89,1 point,Fri Jun 19 15:27:54 2015 UTC,"Yep, looks like this is good news for Java/Spring devs!"
angularjs,3aeto7,MikeTheWebDev,0,Sat Jun 20 01:17:23 2015 UTC,wait till its finalized and dont adopt it the SECOND it drops maybe
angularjs,3aegb2,CodeNewa,4,Fri Jun 19 13:34:26 2015 UTC,I am working with https://github.com/sdorra/angular-dashboard-framework. It is working like a charme!
angularjs,3aegb2,redyar,1 point,Fri Jun 19 15:11:30 2015 UTC,Looks pretty good except that the grids have to be preconfigured. But it might just work for me. Thanks
angularjs,3aegb2,pandavr,1 point,Fri Jun 19 18:09:49 2015 UTC,"I'm building a portal-like application with angular. Being lazy as I am, I have done a lot of research on the field. The closest to a working product is Sebastian Sdorra adf. But to obtain a portal one would need to work on it. Currently I have done quite a lot of PoCs with adf, including: A structure editor; Widget of Widgets; A very simple visual code editor.  Currently I am trying to have configurable rows and columns.  I would say everything is possible but require a god understanding of Angular and adf."
angularjs,3aegb2,MikeTheWebDev,2,Sat Jun 20 08:53:45 2015 UTC,"Guys, I am working on the same thing for my startup actually."
angularjs,3aegb2,MikeTheWebDev,1 point,Sat Jun 20 01:18:26 2015 UTC,"Wow, this is awesome. How far along are you? I just got a working prototype by mixing ng-Dragdrop and ng-gridster. Do you want to take a look? I'm just starting with angular so I may have got a few of things wrong. Maybe you can tell me if I'm doing it right."
angularjs,3ael8s,MordorStroller,2,Fri Jun 19 14:17:25 2015 UTC,"Never used sails, but if its anything like express, may be this will work for you ?  getUser = function (req, res){   return res.send(req.user);  }"
angularjs,3ael8s,RedditorFor8Years,1 point,Fri Jun 19 15:55:35 2015 UTC,"I have something similar to that right now, but my  main question would be how do I return it to an angular controller?"
angularjs,3ael8s,RedditorFor8Years,1 point,Fri Jun 19 16:05:22 2015 UTC,"You would retrieve it form front end the same way you are retrieving list of users,  Not sure whats the question here is.. your front end controller would like something like this:   appModule.controller(""myController"", [""$scope"", $http"",   function($scope, $http){   $http.get(""/api/getCurrentUser"").then(function(result){   $scope.currentUser = result;  });   }]);"
angularjs,3ael8s,RedditorFor8Years,1 point,Fri Jun 19 16:10:59 2015 UTC,"I'm pretty new to this so I'm sorry if my questions are worded a little weird. What is ""getCurrentUser,"" and how does it relate to the function you wrote in your first comment? I've seen/tried so many solutions like this and keep failing. Basically, HOW does getCurrentUser get the current user?"
angularjs,3ael8s,spdaly,2,Fri Jun 19 16:17:58 2015 UTC,"No problem,  getCurrentUser is the controller function in your sails application. Basically what you want to do is to open an endpoint that returns your current user data.  Looking very briefly into sails documentation, i see it is done by writing a controller. (Sails controller has absolutely nothing to do with angular controller. they are both entirely different. dont get confused by the naming). - Documentation for sails is here : http://sailsjs.org/#!/documentation/concepts/Controllers  module.exports = {   hi: function (req, res) {     return res.send(""Hi there!"");   },   bye: function (req, res) {     return res.redirect(""http://www.sayonara.com"");   },   getCurrentUser : function (req, res){     return res.send(req.user); } };   Now you will have to pass a session id or cookie information to this endpoint while making your call from angular controller for the sails application to load the user's session context.  Hope this helps !"
angularjs,3abtjt,JobspressoTeam,3,Thu Jun 18 20:47:53 2015 UTC,Dreamfactory are cool. This would be a good job.
angularjs,3abtjt,Rafzzz,1 point,Thu Jun 18 21:09:22 2015 UTC,Indeed! It's cool to see an established company embracing remote/telecommuting work from anywhere in the world.
angularjs,3abtjt,haptiK,3,Thu Jun 18 21:25:42 2015 UTC,"agreed, it would be a real burden if the telecommuting was limited to a specific area, say... Harare, Zimbabwe, for example."
angularjs,3abtjt,moofasa1015,1 point,Thu Jun 18 21:31:31 2015 UTC,"There are some companies that do limit this.  For example some prefer candidates within certain time zones, to facilitate real-time collaboration.  Others may say ""Anywhere in the US only"", because they can legally hire only within the country.  But in this case, DreamFactory is hiring from around the world."
angularjs,3abtjt,Specialjyo,3,Thu Jun 18 21:50:50 2015 UTC,"Time to update the ol' resume, this seems like a pretty cool opportunity"
angularjs,3abtjt,utuxia,1 point,Fri Jun 19 03:28:19 2015 UTC,"Awesome, good luck!"
angularjs,3abtjt,green1010,3,Fri Jun 19 04:55:59 2015 UTC,"I used to work there. Good people, West coast type open source shop."
angularjs,3abtjt,mojo_juju,0,Fri Jun 19 05:03:13 2015 UTC,How is the pay?
angularjs,3acrog,blakah,3,Fri Jun 19 01:32:18 2015 UTC,"2.0 isn't even close to ready yet. Unless you already have a solid foundation, stick with production ready versions."
angularjs,3acrog,TheNiXXeD,1 point,Fri Jun 19 01:58:55 2015 UTC,"Hell I'm still stuck with 1.2.28 due to IE8 support...  but then again my Angular Implementation is nothing like one would expect... reqJS, dynamically loading directives and controllers  dynamically registering modules..."
angularjs,3acrog,Booyanach,1 point,Fri Jun 19 07:19:21 2015 UTC,Why bother using Angular at all? What made you pick Angular over other solutions or even React?
angularjs,3acrog,Bromlife,1 point,Fri Jun 19 07:55:58 2015 UTC,"React was in Alpha when we started implementing it, we wanted a way to easily integrate data watching and real-time updating information for customers...  we're currently still migrating from jQuery but things are looking better..."
angularjs,3acrog,Booyanach,-2,Fri Jun 19 08:05:04 2015 UTC,"What do you mean why bother using angular at all? You say it like it's the worse piece of shit ever. I guess you're one of the kids that like the new shiny thing and is ready to ditch everything for it. All the work put in, all the lessons learnt, all the codebase, just rewrite everything with facebook's new cool named framework."
angularjs,3acrog,hoffentlich,1 point,Fri Jun 19 13:07:08 2015 UTC,"I wouldn't even consider Angular 2 until the documentation is completed, code stable (still alpha at this stage) or possibly 1.x branch support is dropped."
angularjs,3acrog,sandjs,1 point,Fri Jun 19 08:12:14 2015 UTC,"2.0 is no where near ready. Keep up to date with it for educational purposes, but if you need to deploy an app to production within the next year it's going to have to be 1.4.  Learn ES6, and use a transpiler. Learn best practices using controllerAs and use directives everywhere. Use ES6 modules."
angularjs,3acrog,rattygloves,1 point,Fri Jun 19 16:30:34 2015 UTC,I think if you are trying to get work focus on 1.4 mainly but understand what the changes in 2.0 are.   Most employers will check that you know 1.4 but also that you are in touch with the changes that are coming.  Focus on getting a strong base in 1.4 and then go from there.  Edit: Changed some grammar
angularjs,3acrog,ghostcyp3r,1 point,Fri Jun 19 18:52:47 2015 UTC,"What about a compromise?  Start using TypeScript to build 1.x AngularJS apps.  You can use the beta of TypeScript 1.5, which gives you a lot of ES6 features.  Making the jump to ng-2 should then be less painful, (although it probably won't be that painful anyway). If you haven't already, take a look at WebStorm, and Sublime Text 3, both have TypeScript support."
angularjs,3acrog,red_phooby,1 point,Sat Jun 20 09:06:50 2015 UTC,"I would highly recommend not using Angular2. It likely won't be production ready for another year at the very least and A LOT will change on a monthly basis.  Keeping that in mind, learn Angular1 using Angular2 concepts."
angularjs,3acrog,snwstylee,-6,Tue Jun 23 05:47:38 2015 UTC,"I'd say start getting comfortable with 2, and ES6. Employers are either going to want to migrate, and you'll be ahead of the curve, or, they're going to want to stay on 1.X, in which case run away. A sure sign of a company creating legacy unmaintable code.   Personally, I'd much rather learn the new, than the old."
angularjs,3acrog,doctorsound,2,Fri Jun 19 03:28:18 2015 UTC,It's not like 1.4 is unusable or u maintainable. If you built a 1.4 app today it would for sure be fine for 3-5 years at which point you'd probably be looking to rebuild anyhow. And with proper modular ideation you would t even need to necessarily throw everything out when you rebuild.
angularjs,3acrog,xmashamm,-1,Fri Jun 19 04:38:58 2015 UTC,"Maybe I'm a little harsh, 1.4 is fine, and we'll be on it for a while. We don't have a lot of code to migrate either. I just would rather focus on the new, and be in a better position in the job market."
angularjs,3acrog,doctorsound,1 point,Fri Jun 19 05:08:06 2015 UTC,"That's a fine attitude, but there's also something to be said for building with a framework you actually know, rather than only ever building when the framework just comes out, then dumping it immediately."
angularjs,3a9g1h,sandjs,1 point,Thu Jun 18 07:39:23 2015 UTC,Do you think the performance problems are a short term issue?
angularjs,3a9g1h,pagalvin,1 point,Thu Jun 18 13:30:11 2015 UTC,"Judging by how some animations in components behave on my iPhone 5S (which I think is not that old device) and one of the latest Sony Xperia, I doubt the performance is a short term issue. So far, the best results were on Safari, but I think it's mainly because of the effort put by Apple. It's definitely not smooth, anyway. Oh, I forgot: we had a test case also on one of embedded browsers in smart tv. That was horrible, but made only for fun. :D Besides, there are much more serious problems with material design itself when you want to create native mobile app. Android 5 usage is minimal and support libraries are, well, not so good. Try to recreate FAB on Android, you'll have plenty of fun. :)"
angularjs,3a9g1h,Narcicyst,1 point,Thu Jun 18 15:01:15 2015 UTC,I'm not sure how they possibly messed up the performance this bad though. I'm guessing because this started out as a proof of concept.   I feel Angular Material needs to straight up be redeveloped from scratch now that the actual basis is set in stone.
angularjs,3a9g1h,ThunderTherapist,1 point,Thu Jun 18 19:56:07 2015 UTC,Everything is a directive. Surely the fact that it all has to be translated to html is the cause. Why not use standard html+css templates for most of the components? That also seemed to make it really difficult to migrate an existing project to angular-material. I've just gone for the material bootstrap theme.
angularjs,3a9g1h,Narcicyst,1 point,Thu Jun 18 22:11:20 2015 UTC,Everything being a directive is perfectly fine. Angular handles that great. I manage multiple projects that have far more directives involved. The code structure itself is not well-optimized and isn't following performance practices. A lot of it is in the directive compilation part yes.
angularjs,3a9g1h,rikAtee,-2,Thu Jun 18 23:30:05 2015 UTC,shameless self promotion: I have been using Angular Material since version ~0.4 and made this.
angularjs,3a9g1h,Porsche924,3,Thu Jun 18 14:19:44 2015 UTC,"Feels nice, but needs responsive help."
angularjs,3a9g1h,rikAtee,1 point,Thu Jun 18 14:55:29 2015 UTC,good feedback :)
angularjs,3a6nei,ReefJunkie,3,Wed Jun 17 17:21:12 2015 UTC,"I wrote something like this a while back. Not sure if its what you're looking for, but it might be a step in the right direction.  Its basically an open source example app showing the differences between a basic implementation of a handful of Angular and Rails libraries. On the client side, it uses Bootstrap, and compares Angular’s ngResource vs. Restangular, and Angular’s ngRoute vs. Angular-UI-Router. On the server side, it compares using Rails vs. Grape to serve up the API. Its an Angular front end with a Ruby API sitting on the Northwind sample database.  Front end  Back end  Screenshot"
angularjs,3a6nei,mr-aaron-gray,1 point,Wed Jun 17 22:00:23 2015 UTC,You should put a working demo on http://github.io/
angularjs,3a6nei,foobar5678,2,Thu Jun 18 00:19:19 2015 UTC,Would be interested in this too. So far I've only found this link to be of some help: http://codecondo.com/useful-workflow-tools-for-angularjs-developers/
angularjs,3a6nei,imcm,2,Wed Jun 17 18:56:42 2015 UTC,"I would just start with ui-router & your CSS framework of choice, ie: Foundation or Bootstrap. Not sure if that answers your question but IMO that's a pretty standard combo to start with."
angularjs,3a6nei,WhatWouldBBtonoDo,1 point,Wed Jun 17 19:39:22 2015 UTC,"My boss wants to demo multiple ui frameworks because some people are very set on EXT JS. To me, it is a no brainer."
angularjs,3a6nei,herir,1 point,Wed Jun 17 19:57:22 2015 UTC,"You mean graphic templates? components? Not sure of your definition of ""UI"""
angularjs,3a6nei,bonesingyre,1 point,Thu Jun 18 03:21:17 2015 UTC,"Just a basic evaluation components. I would like to compare bootstrap, angular material, kendo UI, etc..."
angularjs,3a6nei,monokrome,1 point,Thu Jun 18 12:01:35 2015 UTC,You mean something like this?   http://todomvc.com/
angularjs,3a6lvg,compNerd0101,2,Wed Jun 17 17:10:07 2015 UTC,"Could this be a case of the browser blocking locally accessed files from accessing other files, since this seems to be on your local filesystem and not actually a remote resource? What browser are you using? I know with Chrome, it would stop this from running with a ""local access file error / same-origin policy"". Or perhaps you are running these from a web server?"
angularjs,3a6lvg,BoleroDan,1 point,Wed Jun 17 23:57:02 2015 UTC,Download http-server using NPM. It's a perfect little web server for stuff like this. Just make sure you install globally.
angularjs,3a6lvg,immigrantnightclub,1 point,Thu Jun 18 00:48:34 2015 UTC,Okay so I'm running with Chrome...but I use the http-server command to host my local .html file.
angularjs,3a6lvg,pagalvin,1 point,Thu Jun 18 16:42:22 2015 UTC,"What does ""not working"" mean?  Getting an error of some kind?  I'd try changing the $http.get('/data.json') to just $http.get('data.json').  I think your code is in /scattPlot and /data.json would be at the same level the folder.  Also, if you haven't done it before, download Fiddler and learn how to use that.  It will give you some idea.  Also, put a .error() as that may give you more details."
angularjs,3a6lvg,pagalvin,1 point,Wed Jun 17 17:41:10 2015 UTC,"by ""not working"" i mean that the webpage is blank when i load it. I also changed it to .get('data.json')"
angularjs,3a6lvg,simcptr,2,Wed Jun 17 18:37:49 2015 UTC,"In that case, I'd look at Fiddler or the ""network"" tab on whichever browser you're using to see if the HTTP call is 1) being made at all and 2) what kind of response is coming back.  That should give you more helpful info."
angularjs,3a6lvg,benduder,1 point,Wed Jun 17 18:55:23 2015 UTC,"I have...I literally think it's something so small that it normally wouldn't be addressed. Ive changed my ctrl.js file to this but its still not working:  1 var app = angular.module(""scattPlot"", ['nvd3ChartDirectives']); 2 app.controller('ExampleCtrl', ['$scope', '$http', function ($scope, $http){ 3     $http.get('data.json').then(function(data){ 4         $scope.exampleData = data; 5     }).error(function(err){ 6         throw err; 7     }); 8 }]);"
angularjs,3a6lvg,rsh412,3,Wed Jun 17 19:21:12 2015 UTC,"Assuming you're not getting console errors, try putting in some console.log(""whatever"") statements. One before the controller (after line 1), one inside the controller (after line 2) and one inside the get (after line 3). Do any of them run?"
angularjs,3a6lvg,mrpeabodynsherman,2,Wed Jun 17 19:42:06 2015 UTC,Also try navigating to data.json in your web browser to ensure it's being served correctly.
angularjs,3a6lvg,mrpeabodynsherman,1 point,Wed Jun 17 19:51:41 2015 UTC,$http uses success() and error() usually. You can use then() but you just have to pass it success and error callbacks anyway. I'm not sure if that's a typo because you have success and error in the original code but maybe double check that?
angularjs,3a6az9,zulhilmizainudin,1 point,Wed Jun 17 15:52:36 2015 UTC,"Note: I already read and try all answers inside this question (http://stackoverflow.com/questions/14788652/how-to-filter-key-value-with-ng-repeat-in-angularjs).  Unfortunately, it's not working for me and I got no luck."
angularjs,3a6az9,simcptr,1 point,Wed Jun 17 15:53:17 2015 UTC,"You can create your own filter, something like this seems to work:  app.filter('withCurrency', function() {   return function(quotes, currencyName) {     if(!currencyName) {       return quotes;     } else {       var result = {};       for(key in quotes) {         if(key.slice(3, 6).startsWith(currencyName)) {           result[key] = quotes[key];         }       }       return result;     }   }; });   And then, use it like:  <ul ng-repeat=""(key, quote) in quotes | withCurrency:searchCurrency"">   See the working Plunker: http://embed.plnkr.co/6qAmvE0wFaIPe2VZpyE1/preview"
angularjs,3a464r,Chevex,3,Wed Jun 17 02:19:26 2015 UTC,Thats the most exciting spinner library I've ever seen.  I've done global loading spinners a few times using http interceptor's.
angularjs,3a464r,stephen789,2,Wed Jun 17 13:23:31 2015 UTC,"I like the thought that went into the architecture for just a humble loading spinner! I'll keep this in mind for the next time I need a spinner control, thanks :)"
angularjs,3a464r,simcptr,1 point,Thu Jun 18 02:26:26 2015 UTC,Glad you liked it :)
angularjs,3a546d,tomdush,-2,Wed Jun 17 08:24:20 2015 UTC,MicroStore is perfect if you have couple of products or services
angularjs,3a4pef,TheBeardofGilgamesh,2,Wed Jun 17 05:16:46 2015 UTC,You could look into using local storage to store the scope objects. It will still need to be redrawn though
angularjs,3a4pef,bowersbros,2,Wed Jun 17 07:44:32 2015 UTC,"For the storage part, I've used Angular Storage on a few projects.  Small and very simple to use."
angularjs,3a4pef,voicestalktome,2,Wed Jun 17 12:50:50 2015 UTC,You can setup a service which both pages can inject. Generally you want to avoid stateful practices like that unless the app behavior requires it. Local storage will work but I think it is putting a bandaid on a larger design flaw.
angularjs,3a4pef,trose89,1 point,Wed Jun 17 14:01:16 2015 UTC,"You can selectively use ng-cloak on elements that you want to leave hidden until they're ready to render. Don't just lather it on by applying it to the <body> tag or something though, or nothing will render until the entire app loads."
angularjs,3a2naq,troch11,3,Tue Jun 16 19:18:09 2015 UTC,no demo :(
angularjs,3a2naq,rikAtee,1 point,Wed Jun 17 08:53:25 2015 UTC,"I post it here since you haven't found it: http://blog.reactandbethankful.com/angular-multi-step-form  Hint: on Github, usually the link is placed above the source code. Also in my README there are 7 links to specific examples."
angularjs,3a20h5,bitsofcode,1 point,Tue Jun 16 16:43:05 2015 UTC,"This blog post is very useful - thanks!  But I took a look at the first part and I really think that the data structure you use is not good, nor recommended by firebase -  take a look at this - https://www.firebase.com/docs/web/guide/structuring-data.html  It seems that you store all the posts in your user array - at least that's what you state in the first part of the blog post. And that's really contradicting. In your second post it seems like you almost structured the data in a right way.   Except that in my opinion ( and I also discovered firebase 2 weeks ago ), you should create an own object for the ""comments"" - why? because lets say on the ""frontpage"", if you have the comments as a part of the ""stories"" you would load all the comments even if you only would want the title, upvotes and the creator for example.   So I would suggest, that you create a comments array with the an object key of the ""stories"" ID. So you will reduce the bandwith and the loading time alot."
angularjs,3a20h5,jeeezu,1 point,Thu Jun 18 04:57:20 2015 UTC,"Thanks!  I actually didn't store the posts in my ""users"" array. The posts were/are stored in a ""stories"" array. But, I also included each user's post information (title, url) in their own user array so I could access just that information from their profile.  You are right about having a separate ""comments"" array though. This is something I noticed when I was doing the security rules because having the comments in the stories array meant I was nesting too far. I didn't consider the bandwidth implications either which, as you point out, is key.  Thanks for sharing that documentation page, it was something I hadn't come across before and is very very useful!"
angularjs,3a36el,wallaby_al,2,Tue Jun 16 21:31:27 2015 UTC,Done it. Love it. Use $resource. Makes it easy as cake.   https://docs.angularjs.org/api/ngResource/service/$resource
angularjs,3a36el,krautgamer,1 point,Tue Jun 16 21:47:38 2015 UTC,"Thank you so much for the pointer, it looks like I'm more useless than I thought at this, I'll see if I can work out what I need to do."
angularjs,3a36el,krautgamer,2,Wed Jun 17 08:14:06 2015 UTC,"btw, before you spend more time then needed, this is my approach:   The Factory  function apiFactory($resource){  return $resource(apiURL + ""/:p1/:p2/:p3/:p4/"");  }   The instantiation  angular.module('demoApp', ['ngResource']).factory('WPAPI', ['$resource', apiFactory])   The usage  WPAPI.query({p1: ""post""}, null, function success(response){         // Success         $scope.posts = response;     }, function error(e){         // Error         var msg = $filter('i18n')(""Could not reach the server. Please try again later."");     });"
angularjs,3a36el,krautgamer,1 point,Wed Jun 17 08:24:19 2015 UTC,"Don't worry, I know your feel. Took me some time myself to figure that out. Always that ""this can't be that hard"" feeling in my gut and the client on my back. :D"
angularjs,3a24vx,natdm,1 point,Tue Jun 16 17:13:02 2015 UTC,"Also, I'm still learning so sorry if it's a typo or something silly. Probably is"
angularjs,3a24vx,redyar,1 point,Tue Jun 16 17:22:23 2015 UTC,"http://stackoverflow.com/questions/11442632/how-can-i-post-data-as-form-data-instead-of-a-request-payload/11443066#11443066  Had the same issue today, this helped me."
angularjs,3a24vx,JviPayou,1 point,Tue Jun 16 17:47:24 2015 UTC,Haven't tried it yet.. but... It's better to do..  $http({ method: post etc})   than:  $http.post(etc)   ? Seems like it could take more parameters than the way I have implemented.
angularjs,3a24vx,JviPayou,1 point,Tue Jun 16 18:55:06 2015 UTC,"Your express delete route is binded on ""get"" verb. In your angular application, you use a ""post"" request...  That's explain why if you directly try to access localhost this works. It's because you do a get request.  You have to sync your front and your back and I think that will be fixed !"
angularjs,39ykqw,badaei,3,Mon Jun 15 21:04:14 2015 UTC,why do you have to do it like this?
angularjs,39ykqw,w4rtortle,1 point,Tue Jun 16 07:21:14 2015 UTC,"don't have the solution for you, but gave you an upvote as it seems like a well-put-together question. Good first contribution to StackOverflow!"
angularjs,39ykqw,foobar_dev,1 point,Mon Jun 15 22:18:30 2015 UTC,"two isn't defined as a scope variable on secondDirective, and the attributes argument doesn't $parse the value so you're just getting the string. i think this is what you are going for: http://plnkr.co/edit/seTq6xp3WphDtblLVrug?p=preview  edit: simplified example"
angularjs,39ykqw,cactauz,1 point,Tue Jun 16 00:00:37 2015 UTC,"So many questions. What exactly are you trying to do? You set scope to true but you're not actually specifying how you want your attributes to be bound to scope, so all you are getting is a string. Is that what you want? If you want isolate scope, and you just want a string, why not specify that? Why are you specifying transclude if you aren't using ng-transclude in your template anywhere?  So maybe do something like this -   scope: {  one: '@'   },  bindToController: true,  controllerAs: 'model',  controller: function() {},  template: ""<second-directive two=""{{model.one}}""></second-directive>"""
angularjs,39z4kb,amcdnl22,3,Mon Jun 15 23:30:52 2015 UTC,"""A data-table for AngularJS that doesn't suck"" and no unit tests/code coverage?"
angularjs,39z4kb,tanguy_k,-2,Tue Jun 16 01:13:22 2015 UTC,@tanguy_k - It was just released!  coming very soon!
angularjs,39z4kb,snotsnot,2,Tue Jun 16 12:26:27 2015 UTC,Where is the link to the online demo?
angularjs,39x0ek,cactussss,10,Mon Jun 15 14:18:24 2015 UTC,"It took me about a year of working in the evenings to get this website in the production. The technology stack is Angular (of course), ASP.NET MVC WEB API with a bit of SignalR. it does not look like there is much to it - just a couple of pages - one might think, but if you ever wrote a full website from the scratch - you'll know how much really goes in it. Anyway, any feedback is welcome and appreciated!"
angularjs,39x0ek,ThunderTherapist,2,Mon Jun 15 14:24:47 2015 UTC,Getting started in the ASP.NET stack takes ages too because using things like Yeoman generators is almost impossible
angularjs,39x0ek,kai3x5,1 point,Mon Jun 15 21:14:03 2015 UTC,YAY!    The only suggestion I have is that I couldn't immediately navigate certain pages because the buttons kind of meld with the background. I had to turn off flux to see it. screenshot
angularjs,39x0ek,IntricateRuin,2,Tue Jun 16 04:08:53 2015 UTC,Thanks for feedback! I'll look into the styles!
angularjs,39x0ek,utuxia,3,Tue Jun 16 05:15:44 2015 UTC,"I see what you did there ;-)  If you don't mind me asking, what're you using SignalR for?"
angularjs,39x0ek,Zwitty,1 point,Mon Jun 15 19:40:28 2015 UTC,"Sure, there is a messaging system once you log in. It works pretty much like a chat. That's where SignalR came in"
angularjs,39x0ek,octanepenguin,2,Mon Jun 15 21:56:51 2015 UTC,"Its free for them to pet sit? Or free for me to search. Not sure what you mean by ""free"""
angularjs,39x0ek,octanepenguin,2,Tue Jun 16 01:40:04 2015 UTC,It's free to use the website - whether you are a pet sitter or a pet owner. Perhaps I should look into clarifying it somehow
angularjs,39x0ek,filterspam,1 point,Tue Jun 16 03:52:51 2015 UTC,"Cool, congratulations on putting it in production."
angularjs,39xzas,ceorackcity,1 point,Mon Jun 15 18:34:46 2015 UTC,"Thank you! Coming from a relational db background, normalizing data in firebase has been a bit of a hurdle for me. thx!"
angularjs,39wz1e,ghostcyp3r,1 point,Mon Jun 15 14:06:28 2015 UTC,"Pretty cool post, even if you are not into building games. It shows some different ways of thinking about things."
angularjs,39w7qd,gsans,1 point,Mon Jun 15 08:25:22 2015 UTC,Good article but I wish you would have provided some numbers in order to showcase the performance gains.
angularjs,39w069,enkideridu,1 point,Mon Jun 15 06:37:26 2015 UTC,Slides: https://ngforms.firebaseapp.com
angularjs,39uie3,neofatalist,3,Sun Jun 14 22:04:28 2015 UTC,I can entirely recommend WordPress with the REST API. Add Advanced Custom Fields in and a plugin I've written to include ACF data in the API for quick and easy code-free extensibility.  I've written more about this here: https://medium.com/digital-times/my-wordpress-renaissance-ff4c0a224f30
angularjs,39uie3,Htch,6,Mon Jun 15 06:19:27 2015 UTC,"I built a ""headless"" Drupal site using Angular and it was actually pretty straightforward. If you are up to speed on Drupal's concept of nodes, content types, relationships, and views you can accomplish a lot. IIRC, the module you'll need to output views content as JSON is views_datasource."
angularjs,39uie3,keubs,1 point,Sun Jun 14 22:15:43 2015 UTC,"I am totally new to Drupal, actually I have yet to install it. I am also exploring Joomla + Angular as well. I will check views_datasource out though once I have installed Drupal.  Currently, it is not easy to manipulate the WP API output... and out of the box it just has too much content.  Do you mind sharing your project if its public?"
angularjs,39uie3,shaboomsenthusiast,3,Sun Jun 14 22:26:07 2015 UTC,"I don't want to sound like a typical PHP hater (it definitely has its place) but I think if you've got a good grasp of angular then using node backend would come quickly. My personal preference for non-angular stuff is a C# MVC backend but I really like the angular-fullstack yeoman generator when I'm using angular. Node has a giant community, I'm sure there are great CMS npm modules.  Depending on the project I find it's best to think of the CMS as just one piece of the project."
angularjs,39uie3,shaboomsenthusiast,0,Mon Jun 15 01:14:21 2015 UTC,considering node but staying away from any visual studio stuff. I need to do some research on CMS available for node. Planning to use heroku for node but eventually I need a server that will have node or allow me to install it. Currently have 1&1 and they are straight up annoying me.  On the short term a php based cms is the low hanging fruit.
angularjs,39uie3,rodneon,3,Mon Jun 15 01:26:56 2015 UTC,"Totally understand the low hanging fruit appeal, nothing wrong with it. Microsoft has started to do some pretty awesome stuff with visual studio in regards to open sourcing it along with the C# compiler and other stuff associated with it. I think we're still a while away from a cross platform full version of VS but when it comes I really encourage you to to check it out. MVC and the entity framework really are pretty awesome.   Edit - check out Amazon web services for hosting, they have a free tier for testing it out and getting used to it before diving right in. Fair warning - AWS can be super intimidating at first but there are a lot of getting started resources."
angularjs,39uie3,neb636,1 point,Mon Jun 15 01:30:32 2015 UTC,I did check out AWS. Their pricing schemes ... their whole control panel set up is a little complicated.  VS MVC is partially supported in mono supposedly but I feel that I need to wait until the community and projects behind open source VS needs to get more mature before I invest in it. For now there is still so much for more to learn and try.... like Node.
angularjs,39uie3,CritterM72800,1 point,Mon Jun 15 02:03:33 2015 UTC,"Cloud9 is an excellent playground for Node, IMO."
angularjs,39uie3,kingoffortlauderdale,2,Mon Jun 15 05:33:58 2015 UTC,"As someone who use to work at a company that specialized in building CMS sites for small to enterprise clients I think Drupal would be the best choice for a headless CMS out of the PHP frameworks. That said if you don't know Drupal or know someone who is familiar with it, I would recommend against it. It is a lot less coding and a lot more UI button clicking to get it working. It has a very steep learning curve in my opinion.   I think choosing the right CMS depends on your needs. If it is going to be client facing I might choose something like WordPress, Joomla, or SiteCore. They have been around for a while, have wide adoption, and their UI has had many iterations due to user feedback. If it is just for you I might try some of the more bare bones and less mature node CMS's like Keystone or hatchjs built with node. I am sure you would feel more at home coding in JS."
angularjs,39uie3,whooyeah,1 point,Mon Jun 15 02:05:03 2015 UTC,Hey thanks. I'll check out keystone and hatchjs.  I'll consider your advice with Drupal. I suppose it will have its trade offs. I am very much looking for a headless CMS.
angularjs,39uie3,tvanro,2,Mon Jun 15 02:22:54 2015 UTC,"Check out https://github.com/Gizra/generator-hedley which is currently the most active project doing something like that, and it's built by a company with a very good reputation in the Drupal community.   Also, join us in /r/drupal!"
angularjs,39uie3,whooyeah,1 point,Mon Jun 15 02:27:37 2015 UTC,Will do thanks!
angularjs,39uie3,ninja_lazorz,1 point,Mon Jun 15 02:44:39 2015 UTC,I've been looking at RESTful-Drupal/restful. Are there good examples of very secure persistent local token or session in cookie storage authentication with AngularJS? I'm not even sure where to begin.
angularjs,39uie3,ajohnclark,2,Thu Jun 18 21:15:44 2015 UTC,I like working with Umbraco. It's simple to create a custom data model and gives nice forms for users to update data documents and collections of object.  The CMS portal is actaully built in angular.  http://24days.in/umbraco/2014/angular-powered-frontend/
angularjs,39s46h,tomdush,10,Sun Jun 14 05:37:43 2015 UTC,What's Polymer doing there?
angularjs,39s46h,_wsgeorge,5,Sun Jun 14 06:58:15 2015 UTC,"These aren't workflow tools. These are either frameworks or modules for working with Angular. I don't think you really know what Workflow tools are, dont you?"
angularjs,39s46h,Martinspire,2,Sun Jun 14 16:48:04 2015 UTC,Yep. I was very disappointed. Worst title of the day.
angularjs,39s46h,myliverhatesme,3,Sun Jun 14 17:08:27 2015 UTC,"Why are all of these things listed as ""Angular this"" and ""Angular that""? ""Angular IDEs""? What?"
angularjs,39s46h,one800higgins,1 point,Sun Jun 14 18:46:10 2015 UTC,"Webstorm is probably the closest to an Angular IDE, but it is an IDE that supports Angular well, not an Angular specific IDE."
angularjs,39s46h,alexsomeoddpilot,3,Sun Jun 14 19:00:52 2015 UTC,"That's the point I'm making. Most of these are development tools, not Angular tools."
angularjs,39s46h,one800higgins,1 point,Sun Jun 14 19:02:32 2015 UTC,How is webstorm?  I have been looking at it.   Using ST3 now.
angularjs,39s46h,Bajawah,1 point,Sun Jun 14 21:54:37 2015 UTC,"I started out on ST3, moved to Vim a year ago, and just picked up Webstorm. I love that all the functionality (including a fantastic Vim emulator mode) comes right out of the box.  It has built in support for:   ES6 Typescript Node Debugging   These are things I had to rely on plugins for in the past and the integration always required tinkering and fine tuning. I like that it ""just works"" out of the box."
angularjs,39s46h,alexsomeoddpilot,1 point,Sat Jun 27 17:59:42 2015 UTC,What made you switch from ST3 to Vim (I assume heavy modded)?
angularjs,39s46h,Bajawah,1 point,Sun Jun 28 06:46:46 2015 UTC,Curiosity and the fact that I was starting to spend a lot of time on the command-line.
angularjs,39s46h,alexsomeoddpilot,3,Wed Jul 1 12:43:32 2015 UTC,"You should mention Yeoman, while not specifically an AngularJS tool, the Angular Generator will save you a lot of effort. Where you don't have to worry about boilerplate.  http://yeoman.io/"
angularjs,39s46h,ghostcyp3r,6,Sun Jun 14 11:49:43 2015 UTC,"Though the official generator for angular has a bad folder structure for projects with multiple directives, controllers and views.  Oh and by the way, i think this is just blogspam - look at his post history"
angularjs,39s46h,jeeezu,1 point,Sun Jun 14 12:22:18 2015 UTC,Thanks for pointing out that it's just blogspam. I didn't notice.  Out of curiosity (and for the sake of learning) why would you say the default generator is bad? Because it puts all the views in a view folder etc?  You can do something like this to specify sub folders:  yo angular:view adapter/adapterview  Is there some other generator you would recommend?
angularjs,39s46h,ghostcyp3r,3,Sun Jun 14 13:05:08 2015 UTC,"I just started using yeoman and angular, but I just think that if you have multiple controllers and views, it gets messy really fast.  For example if you want to find the template for directive, you have to first go scroll to ""views"", and then for the template file.   In my opinion that is just really time consuming and gets annoying really fast.  https://github.com/johnpapa/generator-hottowel   This generator uses a different approach"
angularjs,39s46h,jeeezu,1 point,Sun Jun 14 13:12:18 2015 UTC,"Thanks for the link to that generator. I agree with you about how messy Yeoman makes things, I've only just started using it but as yet I can't see what benefit it offers."
angularjs,39s46h,timmyriddle,3,Mon Jun 15 09:24:00 2015 UTC,"I personally find generators a blight on the development landscape, but, best practice for project layout is the ""fractal layout"" - see https://github.com/johnpapa/angular-styleguide/blob/master/README.md#style-y152"
angularjs,39s46h,elprophet,1 point,Sun Jun 14 13:20:46 2015 UTC,and why do you think so ? what do you dislike about them?
angularjs,39s46h,jeeezu,1 point,Sun Jun 14 14:18:33 2015 UTC,"I find the code you get from a generator to be inflexible to future changes. I would prefer using a library that provides a robust API for project configuration over copy/pasting code among hundreds of files.  If DRY is considered a ""good thing"" (and I think it is), generators are the antithesis of that ideal.  (NB: This is coming from someone who wrote and delivered projects that heavily relied on generators in the CodeIgnitor PHP platform.)"
angularjs,39s46h,elprophet,1 point,Sun Jun 14 14:59:52 2015 UTC,"Yes, I am slowly seeing that for angular development, the generators are really bad. I mean yes, the setup of grunt and such is really useful and that's why I tried yeoman.   I think it's pretty bad, that the official generator is not offering an alternative filestructure and some other generators that offer the ""by feature"" structure, have many other disadvantages in my opinion.   I think I will just take the template that I got from the official generator and change all the file structure manually and then stop using yeoman."
angularjs,39s46h,jeeezu,1 point,Mon Jun 15 19:15:32 2015 UTC,Take a look at HTTPS://rupertjs.io a library I maintain to ease full stack development with a focus on MEAN.
angularjs,39s46h,elprophet,1 point,Mon Jun 15 19:35:32 2015 UTC,I would definitely choose angular-material over LumX.
angularjs,39s46h,skitch920,1 point,Sun Jun 14 15:23:41 2015 UTC,I've just barely started working with Angular so I'm curious you would choose MD over Lumx... Aside from what to me is obvious in choosing one Google technology to work with another Google technology.
angularjs,39s46h,ieatpotatochips,1 point,Sun Jun 14 19:28:16 2015 UTC,"The obvious answer is community size and support.  You want to choose something that will get the most gains in the long-term.  LumX: 12 contributors, 1169 likes, 146 forks, 99 open issues, 117 close issues  angular-material: 99 contributors, 8836 likes, 1386 forks, 770 open issues, 1986 closed issues"
angularjs,39s46h,skitch920,1 point,Sun Jun 14 19:40:51 2015 UTC,Good points. Thanks.
angularjs,39sryd,jeeezu,2,Sun Jun 14 12:19:29 2015 UTC,"One good use case is that you want to optimize a template (for performance reasons). If you wanted to remove DOm elements, but didn't want to take the performance hit using ngIf, etc. you can manipulate your template in the compile phase, and that's the template ""stamp"" that gets used.   I've used it where I was repeating a lot of directives with ngRepeat, and didnt want to setup needless watchers that a particular instance of that directive didn't need.   I can give you an example, but I'm mobile."
angularjs,39sryd,dmackerman,1 point,Sun Jun 14 13:38:12 2015 UTC,"That's what I thought, thank you, because im currently facing the same problems with nested directives, where I call ng-if, but that did not seems like quite bad practice, because as far as i understood, ng-if compiles the whole dom and then just removes the element.   It would be great if you could link the example when later. Thank you a lot for your help"
angularjs,39sryd,dmackerman,1 point,Sun Jun 14 13:48:29 2015 UTC,"Exactly. Basically in the compile phase you have access to the template, pre compilation. To remove stuff, just use raw JS or jqlite, and delete the DOM nodes you don't need based on attributes (you can still access those) etc.   When the directive is ready to be linked it'll already be optimized"
angularjs,39sryd,davidonium,2,Sun Jun 14 13:55:31 2015 UTC,"If you are doing a jquery plugin adaption and you have to insert some dom that uses angular syntax using the compile function will make it work. Although I haven't tried it thoroughly, it's a use I can think of."
angularjs,39sryd,abyx,2,Sun Jun 14 20:35:02 2015 UTC,"Adding to what /u/dmackerman said, I also find it useful in situations where I have some sort of feed/timelines with different types of items in it.   In those cases, compiling can have a benefit on more maintainable code, but always beware of using it prematurely! I have written about this exact use case and posted it here about a month ago, see here in case you're interested."
angularjs,39sryd,abyx,1 point,Mon Jun 15 03:15:40 2015 UTC,"yes it's a feed kind of thing. currently im using a list directive, then a directive for the element where i use ng-repeat and then in that directive i have two different directives with the two possible types.. and theeen in thaat directive i planned to have a directive that displays comments and stuff..  yeah and that just felt really wrong.. the nesting is so bad that with my current ""by type"" file structure it's just annoying.  and hopefully compile can help me clean up that mess a bit.   thank you for the link, im currently reading the article and it really helps me to understand the compile function better!  // EDIT  The article is relly nice! But may I ask why you put all the logic in the link function? and not in the compile function of the directive? that's where I get confused"
angularjs,39sryd,miketa1957,2,Mon Jun 15 03:25:01 2015 UTC,"In general, it is considered safest to do DOM manipulation inside a directive's link function (which is the equivalent of the post linking function you can return in compile, see the docs here).  I would say that I might, if things get bigger, push some of the logic out to a service and then have the directive's link function basically ask the service for the directive that needs to be compiled and stick it into the DOM after compiling."
angularjs,39ssix,crisprcas9,1 point,Sun Jun 14 12:27:09 2015 UTC,You know what my Angular needs?  A lot of scripts that are counter to how Angular is designed.  Ew...  https://i.giphy.com/TmUw8dUQkaDXG.gif
angularjs,39ssix,the9trances,1 point,Sun Jun 14 18:45:56 2015 UTC,"This is a good quirk to know about, but the recommendation of using jQuery doesn't address a more ""angular way"" alternative to include the JavaScript on your main/index page alongside your angular app.  jQuery can fix this when you are stuck in a corner without control of your includes' script tags or ability/resources to refactor code into a more event driven pattern, and Igor gives you the benefit of the doubt with that answer. Still, Angular apps are typically handled with concatenated JavaScript on initial page load for a SPA, and that use case bears repeating when someone wants to get ng-include to act outside the Angular norm, reasonable as the request seems.  I think there's a good reason why most Angular devs will never encounter this quirk of jQL and ng-include. Still good to know."
angularjs,39pjtl,jeeezu,6,Sat Jun 13 14:34:51 2015 UTC,Read this: https://css-tricks.com/svg-sprites-use-better-icon-fonts/  I usually compile a script that injects it right after the <body> tag then create a simple directive that outputs the symbol wrapped by a div.  Or you can use this: http://evil-icons.io and just output <icon> tags.
angularjs,39pjtl,snarkyturtle,1 point,Sat Jun 13 15:59:39 2015 UTC,"That sound's awesome, i think that's exactly what I was looking for!  Thank you alot!"
angularjs,39pjtl,snarkyturtle,1 point,Sat Jun 13 17:12:08 2015 UTC,and how do you include the svg file ? do you use ng-include?
angularjs,39pjtl,djvirgen,1 point,Sat Jun 13 20:56:06 2015 UTC,I haven't really thought of ng-include but that might work.  I usually do something similar to this: https://github.com/outpunk/evil-icons/blob/master/assets/evil-icons.js#L11  I use gulp-inject to inject the svg source into the script.
angularjs,39pjtl,2basco,2,Sat Jun 13 20:58:20 2015 UTC,"ng-include works, maybe this will be helpful for others -   <div id=""svg-incl"" ng-include=""'_includes/svg-defs.svg'""></div>  the ""problem"" with this approach is that you have to hide the div if you place it as the first child of the body tag"
angularjs,39pjtl,deedubaya,1 point,Sat Jun 13 21:24:36 2015 UTC,"Take a look at grunticon by the filament group. Their latest version adds support to ""easily style and animate your SVGs with CSS or add interactivity with JavaScript."" We haven't tried the new 2.0 feature yet but we've been using it successfully with static SVGs."
angularjs,39pjtl,_Aardvark,1 point,Sat Jun 13 18:35:34 2015 UTC,"The best way to use SVGs in Angular is to link to it with ng-include. This way, you can still style the SVG via CSS and you don't have to insert the verbose SVG code in your markup."
angularjs,39p0ws,monnef,2,Sat Jun 13 10:51:51 2015 UTC,"Check the repository for angular, it actually includes the md work. https://github.com/angular/angular/tree/master/modules/examples/src/material"
angularjs,39p0ws,bbsss,3,Sat Jun 13 11:17:08 2015 UTC,"That's a minimal implementation, without nearly the feature set of the full Angular Material project. Just a heads up, you'll be missing a lot of their functionality."
angularjs,39p0ws,elprophet,1 point,Sat Jun 13 11:58:10 2015 UTC,"Thank you, it looks great :)."
angularjs,39os6g,Feelcat,2,Sat Jun 13 08:42:21 2015 UTC,"It sounds like there are some gaps in your knowledge that you need to fill before any answer will be meaningful. Certainly angular-ui-tree can do what you want.  You seem to be new to Angular and how to work with it, I'd suggest getting to grips with it before going any further. The Code School ""Shaping up with Angular"" course is a great place to start."
angularjs,39os6g,ChuckChunky,1 point,Sat Jun 13 10:05:04 2015 UTC,"Thanks for your reply! I already guessed that must be the case, but as I am working with limited time and I've already come quite far (I've been able to make all the features I want) and only need one specific thing to make it all ""work"" I asked this question.  However, I'm open and willing to looking into this, but I'm really short on time so I'm curious if general Angular knowledge would help me a lot with this."
angularjs,39os6g,ChuckChunky,1 point,Sat Jun 13 11:36:22 2015 UTC,The Shaping Up With Angular course shouldn't take more than a few hours and will give you more than enough knowledge to be able to make proper use of angular-ui-tree.
angularjs,39os6g,xBrodysseus,1 point,Sat Jun 13 12:54:11 2015 UTC,"I don't know the specifics about angular-ui-tree, but I'm guessing that you're gonna need to read up on tree data structures: how to traverse them, how to build them, etc."
angularjs,39ox5p,Madd0g,2,Sat Jun 13 09:57:16 2015 UTC,"I'm no expert, but the advantages seem to be twofold:   Web components are not tied to any one framework. Polymer makes it easy to work with (and adds some back compat) but it's a web standard. This way, if you decide one day you hate AngularJS, you have one less barrier to switching away. Because it's a standard, the performance capability is higher. Angular1 is pretty fast when configured correctly and Angular2 seems to be fast out of the box, but you're adding layers (and slowness) between you and the browser. It'll likely be a bit harder to set up, but web components at least have the capability of being faster than AJS directives. Whether that's something that actually happens depends on the developer.   Edit: To be clear, I have not had the opportunity to use web components in Angular yet."
angularjs,39ox5p,fishfacemcgee,1 point,Sat Jun 13 10:35:28 2015 UTC,"thanks, maybe I should have emphasized that the question I really care about is   Why would anyone choose to develop parts of their angular app as web-components?   So just for speed of the shadow DOM? But if you're wiring two-way binding manually, won't $digests still run as often as they would with regular DOM?"
angularjs,39ox5p,foobar_dev,1 point,Sat Jun 13 11:05:19 2015 UTC,The main reason I am considering it is reusability. Do things in angular that are likely only to be ever used in that one single application. Use web components for code that you may want to use elsewhere.
angularjs,39ox5p,aaaqqq,2,Tue Jun 16 03:47:27 2015 UTC,"If you want a custom component in angular, you'd probably create a directive or a component. The same effort would be required to create a web component using Polymer. There are a few advantages of this approach:     You're hedging your bets. If some day you decide to port your application to another framework, you won't have to rewrite these components. You can have people who don't know Angular, work on these components.   There are a few downsides too:     You have to learn about web components & Polymer If you use certain features of Polymer that need a polyfill, it might mean a performance hit in that specific section of your app   So if you're absolutely  certain that you'll never need to reimplement the components in any other framework, it might be better to stick with Angular directives/components."
angularjs,39ox5p,aaaqqq,1 point,Sat Jun 13 10:59:11 2015 UTC,"but but, all the wiring to angular seems like I'll be doing the same work twice - maybe the article makes it look harder than it is? Anytime I need to use some special ng-* binding I need to jump through hoops?  I mean, for me, components are a lot more than just markup - it's behavior and connected data and concerns on the directionality of data/scope. The article makes that part look really awkward, with all the manual wiring."
angularjs,39n3z4,based2,1 point,Fri Jun 12 22:38:01 2015 UTC,The idea behind this was to allow for a scenario in which the end user wants to set some sort of recurring task that you have set up on your end to adhere to cron syntax.  So this UI is not for a developer to use but for an end user.  Thant being said I think it is always better to have another solution and not need it then to not have one at all.
angularjs,39nbph,vladovidiu,5,Fri Jun 12 23:39:47 2015 UTC,"So you'd test this request by using the $httpBackend mock.  But before that, man, stop using deferred!!  $http already returns a promise. Just return the $http call. You're duplicating code and introducing the possibility of errors.   Please look into many recent posts about promises. Deferred could be considered and anti-pattern."
angularjs,39nbph,takakoshimizu,2,Sat Jun 13 00:19:03 2015 UTC,Is there a way to modify the response from http? I've been wrapping my http requests using deferred so I can futz with the data returned before passing it on.
angularjs,39nbph,ex1machina,2,Sat Jun 13 03:12:58 2015 UTC,"Sure. Return the $http response with a .then already chained. Within that .then, return the modified value.  This is because a promise can also be a value. A promise returns a promise. A promise that returns a hard value can still work as a promise.   return $http.get('/resource').then((data) => data.contents);  If the promise passes, the next .then fires and returns a value. In this case, data.contents. This value will be passed to the next .then, which you'll bind in a controller.  If it fails, your controllers catch handler will hit."
angularjs,39nbph,takakoshimizu,0,Sat Jun 13 05:24:16 2015 UTC,"Awesome, thanks!"
angularjs,39nbph,ex1machina,1 point,Sat Jun 13 05:53:42 2015 UTC,Can you go into more detail on why not to use $q.defer?
angularjs,39nbph,thenumber24,1 point,Sat Jun 13 03:16:21 2015 UTC,"He's probably referring to the preference of using $q constructor syntax:  return $q(function(resolve, reject){     resolve(""some value""); ));   The strongest argument for using $q this way over $q.defer() is that it's more inline with how you use ES6 promises:  return new Promise((resolve, reject) => {  });"
angularjs,39nbph,Click_Clack_Clay,3,Sat Jun 13 04:02:09 2015 UTC,"He's referring the fact that $http already returns a promise, and therefore there's no need to wrap it in a deferred:  https://gist.github.com/robwormald/742c459cda9c92f1d641  The only time you need to do either of those things is when you're wrapping a non-Promise-returning async function."
angularjs,39nbph,bobertian,0,Sat Jun 13 04:10:59 2015 UTC,"Unless you need to work with the data in the service before resolving the promise, and OP didn't post that part for brevity. What's so hart about sticking to the actual question?"
angularjs,39m81i,djvirgen,2,Fri Jun 12 18:48:56 2015 UTC,"I just started this yesterday, but I needed a cache that would drop old entries before pushing out the least-recently used entry. This drop-in replacement works just like Angular's $cacheFactory but allows you to specify a TTL for each entry. This helps prevent stale content from appearing indefinitely for users by letting them expire and result in a cache miss after the specified TTL has passed.   Are there any other cache features you'd like to see? Perhaps tagging support, or maybe a persistent backend (e.g. local storage)?"
angularjs,39jrn0,mgonto,1 point,Fri Jun 12 05:32:22 2015 UTC,Gonto killing it as always :D
angularjs,39jrn0,Narcicyst,1 point,Fri Jun 12 18:18:17 2015 UTC,Thanks :):):). Glad you liked it!  I'll be speaking and showing this repository on jQuerySF :).
angularjs,39jrn0,vilczy,1 point,Fri Jun 12 22:21:32 2015 UTC,Where can i watch the talk?
angularjs,39mqxe,sirlori97,7,Fri Jun 12 21:01:45 2015 UTC,You can try google's material design which work really well with angularjs  https://material.angularjs.org
angularjs,39mqxe,Aesdotjs,0,Fri Jun 12 23:10:53 2015 UTC,"I want to use them, but in a mobile-only version. I think that paper elements are uncomfortable when you don't have a touchscreen :D"
angularjs,39mqxe,Specialjyo,5,Fri Jun 12 23:13:39 2015 UTC,First tell us why ui-bootstrap isn't an option. It's fairly complete and straight forward.
angularjs,39mqxe,CodeNewa,-3,Fri Jun 12 21:45:28 2015 UTC,"Even if I kinda like bootstrap, it isn't a option because it's too utilized.  There are just too many websites out there that use bootstrap, and this would make my site just like another website made in 5 minutes with bs. So it's the really last option!"
angularjs,39mqxe,ThunderTherapist,3,Fri Jun 12 21:52:09 2015 UTC,"Are you trying to stay away from bootstrap because a lot of sites use the default bootstrap files?? If so, try looking at various templates for bootstrap. They might be helpful to you. Check out bootswatch and wrapbootstrap for templates.   Have not really tried them with ui-bootstrap though."
angularjs,39mqxe,Specialjyo,-1,Sat Jun 13 03:23:57 2015 UTC,"I know that there are templates, but it's not the problem. I planned to do a template myself. The problem are the components that are too recognizable imho."
angularjs,39mqxe,mrv1234,2,Sat Jun 13 08:49:46 2015 UTC,You know that recognisable components are what makes it easy for uses to quickly learn how to use your app right? All UI design guidelines say you shouldn't try to reinvent the wheel
angularjs,39mqxe,Aesdotjs,0,Sat Jun 13 13:00:21 2015 UTC,"I'm not saying that the way to go is reinventing the wheel. But I just don't want something mainstream. I'm not against bootstrap you have to admit that its components are too used. So my solution for now is to use foundation and backbonejs.  You see, foundation does not reinvent the wheel, but you couldn't tell that is bootstrap, especially because it's not bootstrap!"
angularjs,39mqxe,TotesMessenger,1 point,Sat Jun 13 15:08:39 2015 UTC,Ahh   Then read this.   http://www.sitepoint.com/beyond-bootstrap-foundation-frameworks-never-heard/
angularjs,39krq3,_v8,3,Fri Jun 12 12:28:25 2015 UTC,"You use ng-repeat=""columnPackages in packageList"" in your template. but in your controller you update the $scope.packageDetails."
angularjs,39iv00,Scotty_the_Hamster,3,Fri Jun 12 00:52:03 2015 UTC,I prefer more John Papa's Style Guide over many things on that video:  https://github.com/johnpapa/angular-styleguide
angularjs,39iv00,ackerlight,1 point,Fri Jun 12 17:14:20 2015 UTC,I'm somewhere between a beginner and intermediate Angular dev and was looking at some articles and videos to help me structure my apps better. This was the highlight of all the stuff I read/watched. It's almost an hour long but believe me it's worth it if you're like me and were a little overwhelmed with concepts like how large applications come together and how they're structured.
angularjs,39h1pw,abyx,2,Thu Jun 11 17:43:46 2015 UTC,"I tried using ngchange on mobile and it really slows things down when typing on, for example, a text input and saving after every change. I guess you can fix this by adding a delay and only running the ngchange code if no change had happened for 500ms or something."
angularjs,39h1pw,negative34,8,Thu Jun 11 18:01:41 2015 UTC,"you can use the ng-model-options to control when the 'change' actually happens, (ie: on blur isntead of keydown), or set a debounce if you do want things to update on keypress/etc."
angularjs,39h1pw,e82,1 point,Thu Jun 11 18:33:49 2015 UTC,thats awesome! thanks!
angularjs,39h1pw,negative34,5,Thu Jun 11 19:01:19 2015 UTC,getting tired of seeing this guys face and a beer
angularjs,39h1pw,pitne,1 point,Thu Jun 11 21:01:59 2015 UTC,"This is why all blog articles should have an image in them. The picture should relate to the story, not to the author."
angularjs,39h1pw,Bromlife,1 point,Fri Jun 12 05:08:46 2015 UTC,Kind of a dick comment...
angularjs,39h1pw,JeefyPants,-1,Thu Jun 11 21:55:23 2015 UTC,yeah but it's true.
angularjs,39h1pw,whooyeah,1 point,Fri Jun 12 03:47:22 2015 UTC,"Why use either?  You have prototypal set/get functionality!  No watches, no events.  var _x = 'foobar'; Object.defineProperty($scope, 'x', {     get: function () {         return _x;     },     set: function (x) {         if (_x !== x) {             _x = x;             // What you would normally do with `$watch`             // goes here.         }     },     enumerable: true,     configurable: true });"
angularjs,39g3q2,awerlang,1 point,Thu Jun 11 14:17:12 2015 UTC,"I'd like to add that if you have some stylesheet or table layout that needs some work to make it look good alongside this module, just open an issue on GitHub or comment here. I'd be glad to work with you."
angularjs,39hff8,TheBeardofGilgamesh,2,Thu Jun 11 19:03:36 2015 UTC,"the client receives the HTML, CSS and javascript and then angular bootstraps the app. If you don't take measures the the ugly {{}} will be shown initially, until the app bootstraps. To prevent this use ng-cloak.   Using $http is not a bad practice, it works great.   Angular stopped supporting IE8 in version 1.2. The core at least used to be 44k minified and compressed which won't cause problems. no matter how big, your app is likely much less than the framework.   For most apps you will not find performance issues specially since 1.3. unless your are building and IDE in the browser that needs to run on tablets, or some other extreme use case. Even then, I think we could still make it work for that but in that case might as well go native."
angularjs,39hff8,mrv1234,1 point,Fri Jun 12 07:51:05 2015 UTC,"no but it will use D3, which I have noticed is a pretty small library(in file size), but I will build custom tools using it which may cause problems I dunno. Do modern browsers start slowing down if there is too much dom manipulation and things going on?"
angularjs,39hff8,Narcicyst,1 point,Fri Jun 12 15:42:49 2015 UTC,"Yes, it starts with ugly. That's how all JS works unless you do server-side bootstrapping. It waits for the entire html to load, and then it executes JS. No. Space doesn't matter. Yes, GPU and CPU matter for various things. Anytime you're manipulating the DOM or building it, different things consume various resources. We have tools to watch this consumption and fix it. Angular is heavy if you don't follow good practices and you don't have good control over your watchers. Then they probably wouldn't be using your site."
angularjs,39hff8,Aesdotjs,2,Thu Jun 11 21:21:44 2015 UTC,yeah that user would probably be trying to download the latest Apogee shareware off his dialup connection.
angularjs,39cxy9,simcptr,2,Wed Jun 10 22:44:32 2015 UTC,"Delicious Pizza: Pineapple and bacon, amirite?   u r rite"
angularjs,39cxy9,cjthomp,2,Thu Jun 11 14:02:39 2015 UTC,nom nom nom
angularjs,39cxy9,swizzcheez,2,Thu Jun 11 14:44:16 2015 UTC,"Two thoughts:   It would be good to see RestaurantListCtrl actually get used (the docs use MainCtrl as a stand-in, but using the actual controller in the examples would be helpful). How should one parameterize the RestaurantListCtrl?  Suppose I want to pull that in via HTTP and somehow provide the URL to load?  What is the recommended approach for that?  (My typical approach is directives, and I know that's a different page, but scope isolation makes that tricky.)"
angularjs,39cxy9,swizzcheez,2,Thu Jun 11 16:06:29 2015 UTC,"That's a good idea. I will try to put up a Plnkr with a working example. I'll assume when you say ""pull that in via HTTP"", you mean the data, and not the controller itself (dynamically loading controllers is probably possible, but not really a common or advisable pattern).   One way to do it is to use UI-Router and its ""resolve"" property in order to inject the data into your controller directly. That frees the controller from having to know about the RestaurantData service at all, and it could just be presented with a parameter called ""restaurants"" which is an already-loaded list of restaurants.  You could then combine that with Angular's $resource to specify the URL endpoints for restaurants and handle the actual loading of them. Create a resource called 'Restaurant', inject it into your UI-Router resolve function, and return Restaurant.query(). At that point, the Restaurant resource would basically replace the RestaurantData service. I wrote a bit more about using $resource here -- it talks about using Rails as the backend but you can ignore that stuff if you're using something else."
angularjs,39cxy9,swizzcheez,2,Thu Jun 11 16:47:13 2015 UTC,"Indeed, I was meaning data.  But it could be any configuration of the controller.  For example, let's say I had a HelloCtrl and I wanted to be able to configure the ""who"" via the DOM.  What is the best way to do that?  ng-init, directives that have loose coupling to the controller, directives with controllers (but then do you specify the scope variable for the inner HTML to use), others?  e.g.  <div ng-controller='HelloCtrl ...' ...>      ...      Hello {{ hello.who }}! </div>   What goes into the ...'s such that hello.who becomes ""you"" via DOM configuration?  Adding ""as hello"" to the first ... is great, but then the directives need to know how to bind to the ""hello"".  Directive require chains can't use regular controllers as defaults.  Directive scope isolation makes some of that clumsy and seems to require more inner bits than I want.  I have occasionally added directive ""managers"" that define the object and will optionally put it into the parent scope via ""into"" attributes (e.g., ""=into""), and then use other ""config"" directives to fill in the bits, but the whole thing feels a bit weighty and brittle.  I'm hoping there's a clearer more Angular way.  It's also possible that's an anti-pattern, but having the web designers not have to produce JS would be nice.  (Even I prefer not to have to whip out JS just to configure every little thing.)"
angularjs,39bk6i,jackhanford,1 point,Wed Jun 10 17:28:10 2015 UTC,Would I still need to use ng-annotate with this if I am doing minification?
angularjs,39bk6i,dk01,1 point,Wed Jun 10 19:22:38 2015 UTC,"Yes.   In some cases, you may need to put /* @ngInject */ comments in the constructor arguments.   class MyClass {   constructor(/* @ngInject */ $http) {   } }"
angularjs,39bk6i,impeached,1 point,Wed Jun 10 19:26:50 2015 UTC,"Eww. Could I use ""ngInject"";  instead?"
angularjs,39bk6i,dk01,1 point,Wed Jun 10 21:19:44 2015 UTC,Yes you can!
angularjs,39bk6i,dk01,1 point,Thu Jun 11 00:35:06 2015 UTC,How might this work with ionic where yo router is built in? Are classy's states its own implementation?
angularjs,39bk6i,impeached,1 point,Thu Jun 11 03:10:39 2015 UTC,You can use it with Ionic.   Source: I'm a main contributor to Ionic.
angularjs,39bk6i,dk01,1 point,Thu Jun 11 20:35:03 2015 UTC,And that's awesome.
angularjs,39bk6i,based2,1 point,Sun Jun 14 01:18:38 2015 UTC,https://news.ycombinator.com/item?id=9693818
angularjs,39coet,TheBeardofGilgamesh,1 point,Wed Jun 10 21:42:19 2015 UTC,"One more piece of info, I am using various z-indexs, not sure if it could be related but thought i should share it"
angularjs,39coet,PandemoniumX101,1 point,Wed Jun 10 21:46:26 2015 UTC,"It is almost impossible to verify what the issue is without having a single code snippet, but my immediate guess is this is a css issue, not angular.   Open up the dev console Click on the magnifying glass icon Highlight the element that is being impacted and look at the right hand pane of the dev console and look a what styles are being set."
angularjs,39coet,simcptr,1 point,Wed Jun 10 22:47:33 2015 UTC,"It sounds like a CSS issue to me. Like /u/PandemoniumX101 said, open up that dev console and have a look.  Once the console is open, select an element which causes the problem when you hover over it (right-click Select Element if you need to). Then find the little icon that looks like a dotted box with a mouse cursor, in the top-right of the Styles tab, click that, and check "":hover"". See if the problem occurs, and if it does, track down the styles that came into effect."
angularjs,39coet,CorsairRazion,1 point,Wed Jun 10 23:39:40 2015 UTC,"Definitely a CSS issue, not Angular. ng-hide/ng-show do exactly that; Show and hide content. Since nothing is being hidden/shown on hover, then it's definitely a style issue.  Related/Unrelated to your question, I see that a lot of your posts are in framework boards (rails, angular, etc) and quite a few are related to issues which are more about general web design(HTML/CSS) than they are about utilizing frameworks.   I'm not going to make assumptions about your level of experience, but I'd highly recommend getting a solid foundation in HTML/CSS/JS before getting too in-depth with things like this. It'll save you a lot of time and headaches."
angularjs,39coet,simcptr,1 point,Thu Jun 11 03:21:24 2015 UTC,"Interesting... never heard of backface-visibility. From MDN:   The CSS backface-visibility property determines whether or not the back face of the element is visible when facing the user. The back face of an element always is a transparent background, letting, when visible, a mirror image of the front face be displayed. https://developer.mozilla.org/en-US/docs/Web/CSS/backface-visibility"
angularjs,39ci28,madbrush,2,Wed Jun 10 21:02:03 2015 UTC,"IMO the answer to #3 is no.  But if you have to, here's some resources that should help: http://weblogs.asp.net/dwahlin/dynamically-loading-controllers-and-views-with-angularjs-and-requirejs http://www.syntaxsuccess.com/viewarticle/angular-with-requirejs-amd http://solutionoptimist.com/2013/09/30/requirejs-angularjs-dependency-injection/"
angularjs,39ci28,infidelux,1 point,Wed Jun 10 22:23:21 2015 UTC,Can I ask why?
angularjs,39ci28,wickedmike,1 point,Thu Jun 11 12:17:24 2015 UTC,Because the benefit gained doesn't come close to the amount of code required to make it work for 99% of cases.  The only time that changes is if you have an absolutely huge amount of JS code that is getting loaded up front and you're running into issues with memory and performance.
angularjs,39ci28,infidelux,1 point,Sun Jun 21 17:35:24 2015 UTC,Also I should clarify my answer to no to module systems that are asynchronous code loaders like RequireJS (AMD).  You should definitely make use of Angular's module system to break your application into smaller subsections.  But the only real gain from that is code organization.  All of the JS is still loaded up front and available to Angular's DI system.
angularjs,39ci28,infidelux,1 point,Sun Jun 21 17:37:45 2015 UTC,We have a fairly large project and have had success just concatting all our files and leveraging angulars built in module system
angularjs,39ci28,fenduru,1 point,Thu Jun 11 12:26:04 2015 UTC,"I'm currently working on a big-ish angular project and decided to go with jspm. http://jspm.io/.  So far, it has been an absolute pleasure. I would definitely recommend giving it a look, especially if you're considering using es6."
angularjs,39ci28,vmaimone,0,Wed Jun 10 23:26:10 2015 UTC,"We used RequireJS in our app for about a year, and ended up getting rid of it (which was annoying, because it was embedded in every file). It's possible that we were ""doing it wrong""... but to me it seemed like RequireJS added more process and abstraction without much if any upside."
angularjs,39ci28,simcptr,-1,Wed Jun 10 21:16:37 2015 UTC,"If you abandoned RequireJS and didn't replace it, then you're definitely doing it wrong. I can't fathom what it would be like to work on enterprise AngularJS without AMD or CommonJS"
angularjs,39ci28,SomeRandomBuddy,1 point,Wed Jun 10 23:31:21 2015 UTC,"Good to know :) The project was started by a contractor who was new to angular, and then myself and the other dev were also new to angular when we started. We've learned at lot, but perhaps the way it was initially was set up was just too broken."
angularjs,39ci28,simcptr,-1,Wed Jun 10 23:35:27 2015 UTC,"Modularization is really critical in front end development. When you have a bunch of includes in your index file, it's not immediately clear which files (or objects/functions within) are dependent on others, and in what order they should be loaded. It's very important to alleviate this concern by using either AMD or CommonJS, because it saves you time, and helps you write better code. Both systems also bring about the benefits/conveniences of lazy initialization. Modules aren't loaded until they're used (versus smearing all of your files on the DOM manually, where they're all loaded when index.html is requested)"
angularjs,39ci28,SomeRandomBuddy,-1,Wed Jun 10 23:54:32 2015 UTC,"Browserify seems to be the most popular as of late! However, I'm personally using AMD (RequireJS) in both small and enterprise projects, and it works quite well."
angularjs,39a05f,Arth95,3,Wed Jun 10 09:21:59 2015 UTC,https://github.com/angular/material/blob/master/src/core/services/theming/theme.palette.js
angularjs,39a05f,devvie,2,Wed Jun 10 12:15:51 2015 UTC,"You can configure the palette via the $mdThemingProvider, there is no need fiddle with the css. Check the latest angular material documentation"
angularjs,39a05f,codestation,1 point,Wed Jun 10 14:32:58 2015 UTC,"what is a ""specific palette color""?"
angularjs,39a05f,rikAtee,1 point,Wed Jun 10 11:15:35 2015 UTC,"Depends on the tools / frameworks / libs you use.  Otherwise you can define your own color palette like so:  var themes = {     dark: {         headline_color: ""#CCCCCC"",         headline_background: ""#333333""     } };   And so on.  You could then change CSS values on the fly. Or you could load a whole new CSS file. The limit is the sky :)  ... $scope.changeTheme = function(name) {     var oldCSSRef = document.querySelector('link #theme');     oldCSSRef.parentNode.removeChild(oldCSSRef);     var newCSSRef = document.createElement('link');     newCSSRef.setAttribute('rel', 'stylesheet');     newCSSRef.setAttribute('href', 'styles/themes/' + name + '.css');     newCSSRef.setAttribute('id', 'theme');     document.getElementsByTagName('head')[0].appendChild(newCSSRef); };   For example. A material design is just a bunch of colors defined in a CSS file."
angularjs,39a05f,embero,1 point,Wed Jun 10 11:39:57 2015 UTC,"Yes, I know that I can make my own pallette. I want to make my own transition animation  and would be great to get same color as toolbar is."
angularjs,396pqf,teropa,1 point,Tue Jun 9 17:28:18 2015 UTC,"So you can just add the class ""content"" to the directive template and it will pass any markup from the parent template through automatically? That sure beats ng-transclude for tidiness."
angularjs,396pqf,dafragsta,1 point,Tue Jun 9 23:49:12 2015 UTC,"In the example with the ""content"" class the insertion was done manually from the directive code.  The only automatic transclusion insertion that Angular does is with ng-transclude. You can use it as an attribute:  <div ng-transclude></div>   or element:  <ng-transclude></ng-transclude>   or CSS class:  <div class=""ng-transclude""></div>"
angularjs,396pqf,dafragsta,1 point,Wed Jun 10 05:20:46 2015 UTC,"Yeah, I was using a self closing tag."
angularjs,396pqf,fenduru,1 point,Wed Jun 10 05:37:40 2015 UTC,It is invalid to use self closing tags like that in HTML 5
angularjs,396pqf,dafragsta,1 point,Thu Jun 11 12:35:31 2015 UTC,I didn't think so. I still use <br/> all the time.
angularjs,396pqf,fenduru,2,Thu Jun 11 13:08:12 2015 UTC,"<br/> is equivalent to <br>, which works fine because br does not take a closing tag. However <ng-transclude/> is equivalent to <ng-transclude> which is missing its closing tag and you'll end up with a mismatch   http://stackoverflow.com/questions/3558119/are-self-closing-tags-valid-in-html5"
angularjs,396pqf,fenduru,1 point,Thu Jun 11 13:22:12 2015 UTC,I would avoid advocating ngTransclude as an attribute directive due to this nasty bug : https://github.com/angular/angular.js/issues/8914
angularjs,396pqf,pipituu,1 point,Thu Jun 11 12:37:21 2015 UTC,Just posted some thoughts to that Github issue.  I don't think it really matters whether ngTransclude is used as an attribute or not though. To me it looks like a problem with nested transclusions where ngTransclude and another directive with transclude: true is applied on the same element.
angularjs,3973xj,_daniel___,2,Tue Jun 9 19:00:25 2015 UTC,"My personal suggestion is to not use ngController and instead define your own directives. Then you can use the require property of the directive and have a third directive as a shared parent, allowing you have multiple of these things if you want.  Here's a small guide I found quickly on the component pattern for angular"
angularjs,3973xj,Chryssie,2,Tue Jun 9 22:20:56 2015 UTC,"In my opinion using ng-contoller should be reserved for demo pages, but should not be used in cases like yours. Angular is declarative, and directives are what give you the most declarative power. The design you currently have is very fragile, and it is not clear where the boundaries of distinct concepts are.   I recommend :   creating a custom directive for your form, and another for your table  write a service that abstracts away all of the fetching logic. Since services are global, you can inject it in multiple places and have access to shared data"
angularjs,3973xj,fenduru,1 point,Thu Jun 11 12:50:40 2015 UTC,"I probably need some connecting service/factory that will bus data between the controllers   That is exactly what you need. Not to be rude, but I typed ""share data between controllers angularjs"" into Google and this was the 2nd result - http://stackoverflow.com/a/20181543/540001  EDIT: You don't even need to create real functions. Take a look at this simple JSBin - http://jsbin.com/legomu/4/edit?html,js,output"
angularjs,3973xj,foobar5678,1 point,Tue Jun 9 19:49:37 2015 UTC,"edit: watching this video now, I guess a more recent preferred practice is to include one controller in your html file have it share states among ""child"" controllers?  Hmm maybe I should have clarified more. After reading more, I think it is obvious I need to export the entire promise as a service. However, because the click handler's method is tied to a certain controller's scope, I'm not sure how to access that scope in a different controller. I can easily inject a promise via service into a controller, but if that promise consumes objects within the scope of another controller...that's where I get lost.   I understand how to encapsulate a promise into a service, but when data from one scope must be captured via a click event and then transported into another controller's scope, that really throws me off.  <div ng-controller=""scopeOne"">     <input />     <button ng-click=""methodOfScopeOne""></button> </div>  <div ng-controller=""scopeTwo"">     <span ng-repeat=""obj in object""></span> </div>   ........  .controller(""scopeOne"", function($scope) {     $scope.methodOfScopeOne = function() {         return new Promise //etc...     }     //this does nothing because we can't inject a controller into another one     return $scope })  .service(""getJson"", function($scope) {     //no clue how to get scopeOne's properties in here     //so that we can include them in a promise });   //this is how it's supposed to work, but I can't figure out how to //get public properties from scopeOne into here .controller(""scopeTwo"", function($scope, getJson) {     getJson()         .then(function(data) {             //do something with data         }); });"
angularjs,3973xj,beardedlinuxgeek,2,Tue Jun 9 20:24:47 2015 UTC,"Your design doesn't make much sense. Why are formInput and  populateTables different controllers? Why do you want to handle the ""then()"" of the promise in a controller instead of in the service? You could bind the object in scopeTwo to getJson.result and put and ""then()"" function in getJson which sets the result to a property of the service. Then you don't need to worry about promises in the controllers.  Like /u/okwg said, populateTable should probably be a directive. AngularJS is an MVC framework and the directives are the V. But you're trying to use a Controller to render a table instead of a View.  All that said, here is how you could do it if you really wanted:  http://jsbin.com/qofimadiyi/1/edit?html,js,output"
angularjs,3973xj,beardedlinuxgeek,1 point,Tue Jun 9 22:10:46 2015 UTC,"Ah this clears it up a lot, thanks for the advice. I ended up just defining my controller in the body tag so I could share the same model between the input form and table.  I kept seeing examples like this or like this so this kind of pattern seems sort of prevalent:  <div ng-controller=""ctrlOne"">     {{scopeOne}}     <div ng-controller=""ctrlTwo"">         {{scopeTwo}}     </div> </div>   These examples are very generic, but, as you said, it has more to do with design than anything."
angularjs,3973xj,fenduru,1 point,Tue Jun 9 23:53:13 2015 UTC,"Make sure you use the ""Controller as"" syntax. In the second link you posted, this was one of the examples:  <div ng-app ng-controller=""ParentCtrl as pc"">     <div ng-controller=""ChildCtrl as cc"">         <pre>{{cc.parentCities | json}}</pre>         <pre>{{pc.cities | json}}</pre>     </div> </div>   It's easier to avoid bugs when your code is cleaner like this."
angularjs,3973xj,okwg,1 point,Wed Jun 10 18:05:55 2015 UTC,"-1 you should use controller as, but you should use meaningful descriptive names everywhere"
angularjs,3956gt,Rockroxx,2,Tue Jun 9 09:44:08 2015 UTC,"You'll need to use the ng.IDirectiveFactory interface. This is a static function on your directive class that returns an instance of your directive with the proper injections.   I'm on mobile so I can't find you an example, but search that interface and you will find what you need."
angularjs,3956gt,takakoshimizu,1 point,Tue Jun 9 11:33:28 2015 UTC,I have tried doing it with the IDirectiveFactory but still getting an $compile is not a function error.
angularjs,3956gt,knifie_sp00nie,0,Tue Jun 9 12:06:34 2015 UTC,Try not using that crap and write in Javascript.
angularjs,393bke,felippenardi,2,Mon Jun 8 23:21:09 2015 UTC,Can't wait for release :). I feel like I am missing some testing skills. Do you have any date of release in mind already?
angularjs,393bke,Luseerr,1 point,Wed Jun 10 09:53:39 2015 UTC,Thanks :) I'm planning on start releasing the first screencasts this month!  You can follow the progress here: https://github.com/AngularTDD
angularjs,393bke,ndboost,1 point,Sat Jun 13 17:35:44 2015 UTC,"a bit of a click-bait tbh. although I did sign up, I wish your title said it was upcoming and not released yet.  It got me all antsy in my pantsy until I read the site :("
angularjs,39428t,grimdeath,2,Tue Jun 9 02:48:32 2015 UTC,"When you do scope.dirLinkVar = someService.method();, it runs only once when the directive's link function executes. If you had multiple copies of the directive on a page, I'd expect to see it log once for each instance.  Once that line runs, the value of scope.dirLinkVar is set to whatever someService.method() returns -- and if angular needs to read the value again, well, it's already stored in that variable and it doesn't need to call method() again.  The reason that scope.dirLinkVar = function(){ return someService.method(); }; will run multiple times is because of Angular's ""digest cycle"". It's how angular magically picks up on changes and keeps data binding working, and it'll run any time there's some user interaction, like a keypress or mouse click. It also runs on page load. And it can run multiple times, basically until all of the values ""stabilize.""  So it might be running 3 or 4 or 7 times, and when your HTML has a binding like {{ somePlainVariable }}, it'll just stick the value of the variable in there. But if the binding is {{ someFunctionCall() }}, angular will call that function every time a digest cycle occurs, leading to your multiple console outputs.  Hope that helps!"
angularjs,39428t,simcptr,1 point,Tue Jun 9 03:12:31 2015 UTC,"Yep, that makes total sense. Thanks for the quick reply! I was banging my head on this one all day.  Just to be clear - each time this digest cycle runs, the function is truly run again, right? So there could be an exponential performance hit if this function was doing something intensive, correct?  If so I'll definitely want to tread carefully to avoid that going forward!"
angularjs,39428t,simcptr,2,Tue Jun 9 03:23:04 2015 UTC,"You're welcome :) And yep, it really does run the function every time, in its entirety. The performance hit isn't necessarily ""exponential"" but it could be pretty bad if you're doing intensive stuff, so yeah, generally best to avoid that.  Other things to watch out for:   Make sure your function doesn't return a unique value every time it's called (like return new SomeObject(data);). That'll cause lots of console errors saying something like ""10 $digest() iterations reached. Aborting!"" -- remember, the value needs to stabilize, or else angular will worry that the change might've caused some OTHER change, and re-run the digest cycle. You can use one-time binding to reduce watchers and increase performance a bit. If you know that a value won't change once a page is loaded, change the binding from {{ someVariable }} to {{ :: someVariable }}"
angularjs,391890,newmanoz,3,Mon Jun 8 14:42:24 2015 UTC,How do I get the updated version if i bought the original one? Is there something to download?
angularjs,391890,TrikkyMakk,1 point,Mon Jun 8 15:59:20 2015 UTC,"I'm assuming you bought it from https://leanpub.com, so log in there.  They're supposed to have a push service for e-reader updates, but it has never worked for me, despite painstakingly setting up and verifying both sides of it every time I remember to go update. I'm pretty sure leanpub is just not well managed, as their Web site is also a pain to use."
angularjs,391890,Switche,2,Mon Jun 8 17:01:33 2015 UTC,I got it off of Amazon. After contacting them last time I was able to get the source code download. I've contacted them again to see about the updated version of the book.
angularjs,391890,TrikkyMakk,1 point,Mon Jun 8 18:40:05 2015 UTC,"Ah, yeah, Ari at least used to caution against Amazon since you don't get guaranteed updates. If you figure it out, be sure to come back here with how, someone is bound to need it."
angularjs,391890,Switche,1 point,Mon Jun 8 21:47:43 2015 UTC,"from email:  To get the updated ebook, either:  If you created a Gumroad account when you bought the book, head to your Gumroad account and navigate to your library to view files. Clicking on the big download button in your original purchase email."
angularjs,391890,kelemvor,1 point,Mon Jun 8 17:44:42 2015 UTC,Is this book something you'd recommend to a beginner? Is the content good enough to get up and running to production or is it lacking in some areas?
angularjs,391890,jakblak90,1 point,Tue Jun 9 07:31:39 2015 UTC,"The book acts as an expanded documentation.  So it can act as a good reference but although at 600 pages covers the constructs of angular, does not go into any depth or offer very many real world examples.  A better alternative would be to pay for a month of pluralsight which offers some great angular courses, egghead.io free stuff or youtube."
angularjs,392t27,vs845,3,Mon Jun 8 21:07:20 2015 UTC,Something like this will prevent the modal from opening repeatedly:  var modalIsOpening; $scope.openModal = function() {     if (modalIsOpening)         return;      modalIsOpening = true;     myService.apiEndpoint(....) };  $scope.closeModal = function() {     modalIsOpening = false; };
angularjs,392t27,foobar5678,1 point,Mon Jun 8 23:40:12 2015 UTC,"This is the method I decided to use to handle this case, but wanted to see if there were other alternatives since a colleague didn't like this approach.  Thanks!"
angularjs,392t27,josemussa,1 point,Tue Jun 9 15:54:39 2015 UTC,Your other option is to disable click events on the button once the modal is opened and then re-enable them when it's closed. But using a flag like above is simpler.
angularjs,392t27,ttmiller,1 point,Tue Jun 9 19:54:51 2015 UTC,Are you using UI Bootstrap to open the modal?
angularjs,392r9g,compNerd0101,2,Mon Jun 8 20:55:01 2015 UTC,"Check out the plnkr here: http://plnkr.co/edit/AjsXMGkUBcVVODbpA9jL?p=preview  There were a few things that needed to be fixed to make it work:   You've got 'scattPlot' in your body ng-app attribute, but the angular module is named ""nvd3TestApp"". These two things need to match in order for angular to load your app. If you get this wrong, you'll get a console error like ""Module 'scattPlot' is not available! ..."" Your controller function isn't actually set up as an angular controller. To do that, you just need to add a line like:  app.controller('ExampleCtrl', ExampleCtrl);   That registers ExampleCtrl as the name of a controller that Angular will know about, and so when you use ng-controller=""ExampleCtrl"" in your HTML file, Angular will know what code to run.   The colorFunction and colorArray should be moved inside the controller function (you'll get a ""$scope is undefined"" error otherwise)   I think that's pretty much it!  Generally, the first thing I'll do if an app isn't working is look at the browser's console. In Chrome, click on the 3 bars to the right of the address bar > More Tools > Javascript Console. In Firefox, Tools > Web Developer > Web Console.   Once that's up, make sure you're on the Console tab, then refresh the page and look for any errors that pop up and fix those first. If you get NO errors, try putting some ""console.log('hello')"" calls around your code to see if any of it is even running, or set breakpoints in the Sources (Chrome) or Debugger (Firefox) tab.  Good luck! Let me know if you have any other questions."
angularjs,392r9g,simcptr,1 point,Tue Jun 9 02:01:58 2015 UTC,Dude you're the king. This has helped tremendously.
angularjs,392r9g,simcptr,1 point,Tue Jun 9 03:15:14 2015 UTC,You're welcome!
angularjs,392r9g,simcptr,1 point,Tue Jun 9 03:24:57 2015 UTC,"Question, if I were to want for my data to be in a separate .json file (making a separate .json data file and controller.js file) how could I do that. I have been looking all over for examples that will help me understand how the different files (.html, .json, .js) will integrate but to of no avail. I have the understanding that you need to use the $http.get() function but I may be wrong."
angularjs,392r9g,simcptr,1 point,Tue Jun 9 17:35:42 2015 UTC,"Yeah, you're on the right track with the $http.get() for the JSON data. It's trickier to do if you're running off from files on disk without a web server -- $http.get() won't work without a server to pull from.  For that I'd suggest installing node.js if you haven't already, and then install the http-server package: https://www.npmjs.com/package/http-server  It will let you run ""http-server"" from a command line and instantly have static files served up. Put your .json file in that directory along with your index.html and whatever js files you've got, and then inside your controller you can do something like:  $http.get('/data.json').then(function(response) {     $scope.exampleData = response.data; });   (make sure to put '$http' as a parameter in your controller function, so that angular will inject the $http service)  In terms of ""best practices"", calling $http directly from a controller isn't great -- you should move it to a service eventually. But to get things up and running, this is fine.  For the controller.js file, just include it in your HTML with a script tag. Make sure to put it after the script tag for angular.js."
angularjs,392r9g,simcptr,1 point,Tue Jun 9 18:49:58 2015 UTC,"so if I globally installed http-server I would be running it with my application's path (in my case, ~/.../scattPlot/ )?"
angularjs,392r9g,simcptr,1 point,Tue Jun 9 20:06:05 2015 UTC,"Yeah, that would work. You could also 'cd ~/Projects/scattPlot; http-server .'"
angularjs,392qxl,saladfingers6,2,Mon Jun 8 20:52:50 2015 UTC,"You could create public properties on the UserService object, then attach that service in the controllers for those views, and have the view bind to those values. Then, as they update later in the UserService, it would automatically be noted in that view."
angularjs,392qxl,ssmathias,1 point,Mon Jun 8 22:06:59 2015 UTC,Here's a StackOverflow post that might help you.  http://stackoverflow.com/questions/21714655/angular-js-angular-ui-router-reloading-current-state-refresh-data
angularjs,392qxl,drizzlelicious,1 point,Mon Jun 8 22:24:20 2015 UTC,"One way to refresh the data is to do $state.go($state.current, {}, {reload: true});  I think that's the easiest thing to try first.  If that's not what you need, you could look into broadcasting updates - maybe the ""user"" object could register a listener with $rootScope.$on('userChanged', ...) which could then update the properties on itself when it receives that message. Whenever you cause the user data to change, run $rootScope.$broadcast('userChanged') and all the listening user objects should update."
angularjs,38zx1u,gdi2290,2,Mon Jun 8 06:05:05 2015 UTC,"I currently have a project that takes up to 20 seconds to build and concat completely with Babel, using Gulp. Any idea how JSPN would perform on this?"
angularjs,38z14e,TheBeardofGilgamesh,4,Mon Jun 8 01:19:22 2015 UTC,$http.get for making get requests  https://docs.angularjs.org/api/ng/service/$http  $resource is a wrapper for $http specifically for dealing with restful resources  All of them are asynchronous - you didn't post full code so can't tell if you're using them properly  You can't interact with your database directly from the front end - you make http requests to interact with a web server - the web server does the database stuff and sends a response
angularjs,38z14e,okwg,2,Mon Jun 8 02:04:22 2015 UTC,I posted the code
angularjs,38z14e,okwg,2,Mon Jun 8 03:24:26 2015 UTC,Yeah you're not using those asynchronously  Try  Courses.query(function (response){     console.log(response); });   Or  Courses.query().$promise.then(function (response){     console.log(response); });
angularjs,38z14e,okwg,2,Mon Jun 8 03:54:58 2015 UTC,"Hey I followed your advice and it worked but now I have a few other questions. Imgur in this image you can see the code and the response i got in the console. My main question is so I have been sent back an object i believe that contains two objects or actually an object and an array of objects. I tried to access the Lessons object by doing myHttpRequest[:lessons] but it doesn't seem to work, how can i access the array of lessons and assign it to a new variable?"
angularjs,38z14e,nsamuell,1 point,Wed Jun 10 17:10:25 2015 UTC,my other question is why am I getting back two responses for each console log rather than just one? It sent back the object twice.
angularjs,38z14e,groberts2001,1 point,Wed Jun 10 17:11:29 2015 UTC,"You need to make use of the callbacks to save that data to variables - probably $scope since you seem to be using it, and this seems to be view data  So you'd do something like:  $http.get(lookupLessonString)     .success(data){         $scope.course = data.course;         $scope.lessons= data.lessons;         console.log($scope);     }"
angularjs,38z14e,simcptr,1 point,Wed Jun 10 17:40:25 2015 UTC,"Thanks for the help, i really appreciate it!"
angularjs,38z14e,pitne,2,Wed Jun 10 18:36:48 2015 UTC,"You're just printing out the $resource ""class"" object. Read the $resource docs for more detail on usage...  https://docs.angularjs.org/api/ngResource/service/$resource"
angularjs,38z14e,pitne,2,Mon Jun 8 02:52:25 2015 UTC,Restangular is an Angular service that magically gives JS objects methods to perform CRUD calls to the server side.  I love it.  https://github.com/mgonto/restangular
angularjs,38z14e,vtdev,1 point,Mon Jun 8 07:39:30 2015 UTC,"$resource isn't really meant to be used every time you need to make a request. It constructs ""objects"" that can then be used to make the requests. Plain old $http might be easier to use for what you're doing.  But if you like the idea of using $resource (it is pretty cool), I'd suggest moving the code that fetches objects into a 'resolve' in your route, and then injecting the object. That'd look something like this:  Route:  $routeProvider.when('/courses', {     controller: ""CourseListController"",     templateUrl: ""app_name/courses.html"",     resolve: {         courses: function(Course) {             return Course.query();         }     } });   Then in your controller:  app.controller('CourseListController', function($scope, courses) {     // When this controller loads, 'courses' will already be loaded     $scope.courses = courses; });   This assumes you've got some factory called ""Course"" which is your $resource object:  app.factory('Course', function($resource) {     return $resource('/api/courses'); });"
angularjs,38yon6,TheBeardofGilgamesh,3,Sun Jun 7 23:35:42 2015 UTC,"wait never mind I am sorry, It already does that."
angularjs,38uczd,whatispunk,1 point,Sat Jun 6 22:14:14 2015 UTC,"This article needs to do a better job of explaining why I would want to use ngModelController instead of rolling my own. I traipsed through the code and prose explaining stuff, and about 25% of the way through, I still had no idea why I was reading the article or what the article was going to tell me that was useful (maybe I'm just stupid), so I stopped."
angularjs,38uczd,KyleG,1 point,Sun Jun 7 06:44:42 2015 UTC,"Same here.  Read the first bit and started scrolling for the fiddle/plnkr example. No fiddle/plnkr... came back to reddit to bitch about it.  This idea sounds interesting, but I don't have a lot of time to dig though and see for myself.  Edit: found a fiddle"
angularjs,38uczd,macneib,1 point,Sun Jun 7 14:51:44 2015 UTC,"What is this intended to accomplish? I don't see anything I couldn't do just as easy another way. Like I said, I'm probably just dumb and don't see it."
angularjs,38uczd,KyleG,2,Sun Jun 7 17:35:12 2015 UTC,"it's a slick way to do data-binding between a model in a controller and a directive.  Normally I just use scope with '=' however this seems to work a lot better and I don't require a watch, instead use something like this:        // Specify how UI should be updated   ngModel.$render = function() {     element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));   };"
angularjs,38uczd,macneib,1 point,Sun Jun 7 21:04:43 2015 UTC,"You didn't describe advanced behavior of the components, precedence/priority and how they interact with each other, e.g. unshifting and returning undefined."
angularjs,38uczd,wordsoup,1 point,Sun Jun 7 11:58:16 2015 UTC,I am not the author. Those points sound important though. Perhaps leave a comment on the article instead.
angularjs,38sur2,damacisaac,3,Sat Jun 6 14:59:40 2015 UTC,"Is there something wrong with just sticking the service into the scope?  myApp.directive(""myDirective"", [""myService"", function (myService) {     return {         scope: {},         templateUrl: ""my-directive.html"",         link: function (scope) {             // Grab just part of the service             scope.someStuff = myService.someStuff;              // Wrap a method from the service             scope.aMethod = function () {                 doSomeBusyWork();                 myService.aMethod();             };              // Or even pass the service in wholesale             scope.myService = myService;         }     }; }]);"
angularjs,38sur2,Asmor,2,Sat Jun 6 18:41:28 2015 UTC,"I would say it's ok if the service is meant to be used in the template, but I find putting the whole service into the view overkill, and would rather limit myself to just binding functions that I need. It works though, and is better than the other solutions that tend to be proposed."
angularjs,38sur2,__mrwhite__,0,Sat Jun 6 19:22:35 2015 UTC,"Pretty much this. Binding the whole service to the scope adds unnecessary overhead. An alternative approach could be designating a service to specifically store the state of your component, much like a React store, binding that to your scope and using another service to hold your business logic and binding that as needed as well."
angularjs,38rknb,rahil471,3,Sat Jun 6 05:13:43 2015 UTC,> May 2015  > still using $scope. notation  > I seriously hope you guys don't do this
angularjs,38rknb,wickedmike,1 point,Sat Jun 6 16:30:35 2015 UTC,why? Is it to make the transfer to 2.0 easier?
angularjs,38rknb,BadugiChamp,3,Sat Jun 6 16:54:09 2015 UTC,"That's one reason and the other one is because you should be using the Controller As syntax as well. And if you're perhaps wondering why you should be using Controller As, try giving this article a read."
angularjs,38ox8j,Foxandxss2,12,Fri Jun 5 17:10:14 2015 UTC,"""Why is that? People are afraid to change, thinking that they wasted their time learning something that is now going to change in a radical way.""  As a backend developer, I find it absolutely ridiculous the problems that I hear frontenders talk about every day.  The bleeding edge aspect of js development doesn't honestly garner much respect from me, because from my perspective all I see are made up problems using platforms that aren't stable enough to be used in a serious effort."
angularjs,38ox8j,bobjohnsonmilw,2,Sat Jun 6 02:39:47 2015 UTC,"You have to keep in mind that the frontend as we see it today is pretty young. It started from simple databinding to make the applications a bit more responsive, but from there it started to evolve really really fast, and in the last couple years, a bunch of new technologies and ideas started to emerge.  That doesn't mean that Angular 1 is not stable. It is really really stable and works very well. It only means that Angular 1 doesn't have the latest goodies on front dev.  About people afraid to change, that is not something new on frontend.  I know a lot of people who won't move from X backend to something else because they don't want to learn again.  The problem here is that the change is not about learning a different framework, let's say from angular to react, the problem is that angular will be completely different and that scares the people because they will need to change yes or yes eventually."
angularjs,38ox8j,pitne,1 point,Sat Jun 6 10:55:14 2015 UTC,angular1 to angular2 has a very nice upgrade path. there's nothing to complain about. your dev's are getting in your heading making you think incorrectly about the front-end development
angularjs,38ox8j,bobjohnsonmilw,1 point,Sat Jun 6 07:05:12 2015 UTC,What I see is a lot of over budget projects because they're fighting made up problems all the time.
angularjs,38ox8j,utuxia,1 point,Mon Jun 8 00:46:48 2015 UTC,I like angular 1.x but I will use Aurelia over angular 2.x
angularjs,38qdw7,Neophyte-,2,Fri Jun 5 23:01:44 2015 UTC,"Seems like not a good time to pick a book, rather go with a online documentation. mainly since angular is going thru major changes that will be outdated in any already published books.   See this thread as well - https://www.reddit.com/r/angularjs/comments/38owps/found_some_good_books_on_angularjs_which_one_do/"
angularjs,38qdw7,priyankadandekar,1 point,Sat Jun 6 04:26:41 2015 UTC,"ive been learning off 1.3, and now 1.4 is out, and then 2.0. I tried to find the differences between the versions but it wasn't clear and there isn't enough information about 2.0 to really get any idea. I'll stick with 1.3 for now and move on to learning 2.0 when its stable and some tutorials / books come out.  Books suite my learning style, especially the pro series in my case proangularjs where it steps you through building a simple web store and explaining the concepts. I guess I might go through that process again when 2.0 comes out if its drastically different."
angularjs,38qdw7,YashdalfTheGray,1 point,Sat Jun 6 05:28:15 2015 UTC,"I've just recently gotten into Angular and I was recommended the ng-book through some co-workers and a podcast.   If you buy it from the source, you get the updates when the author updates the book. It was (recently) updated for angular 1.4 which is pretty quick after the 1.4 release."
angularjs,38owps,priyankachopracho,3,Fri Jun 5 17:07:05 2015 UTC,"Right now, angular is in a huge state of change, and any book in publication now, was out of date the day it was printed. The changes in best practices between 1.2 and 1.3 were huge, 1.4 is out, and new-router and 2.0 are on the horizon.   If tutorials aren't your thing, try out some online courses. Check out egghead.io or any of the other countless resources out there before settling for a book"
angularjs,38owps,fatty1380,3,Fri Jun 5 19:40:20 2015 UTC,"This exactly.  In general, I recommend buying books on concepts, and using online resources on tools (and/or languages).   So if I'm learning, say, Rust, I'll look online. But if I'm learning purely-functional programming, I'll buy a book.  The reason for this is that concepts change much more slowly than tools do; yes, procedural programming of the type used in APL or Fortran are uncommon now, but that took decades of change. At their core, books on OOP written in the 90s are still applicable today.   Meanwhile, a book on Spring 1.x is basically useless now, any books on ECMAScript 3 have only historical value, and even C is now a different critter in many ways than it was when Kernighan and Richie wrote The C Programming Language.  A great example of this is Elements of Programming Style; most of the axioms it lays out are still useful (""Write clearly, don't be too clever"", ""Modularize"", ""Make it right before making it faster""), but some are almost comical now for their antiquity (""Avoid gotos completely"", ""Use debugging compilers"", ""Avoid the Fortran arithmetic IF"")."
angularjs,38owps,tapesmith,2,Sat Jun 6 15:56:45 2015 UTC,Thanks a lot for your response. I appreciate it. You saved me few bucks. Will continue my learning online and wait for latest version books.
angularjs,38o7ea,robbhimself,1 point,Fri Jun 5 14:18:50 2015 UTC,why don't you checkout generator-angular-fullstack and save yourself the trouble of reinventing the wheel?  it has a pretty good implementation with passport with angular.
angularjs,38o7ea,macneib,1 point,Fri Jun 5 18:01:33 2015 UTC,Well I was trying to understand how everything works and to learn some best practices along the way.  Thanks for the link though!
angularjs,38o7ea,macneib,1 point,Fri Jun 5 21:52:54 2015 UTC,I think you're misunderstanding me.  The solution to your problem is in the angular-fullstack project.  Run it and have a look at the code and you'll see a pretty well respected method to get auth working.  Pick out what you like for your project and leave the rest.
angularjs,38natu,webmanio,2,Fri Jun 5 09:14:31 2015 UTC,"http://plnkr.co/edit/Y7alafirmR8IyMZvPKCr?p=preview  Your calculations were wrong for swipe up and swipe down. I fixed you using the wrong axis in swipeUp, and in swipeDown the distance traveled will always be negative on the Y-axis.   I don't have time to make the text for up and down appear, but this fixes your fundamental problems. Also, I would suggest not using time as a factor in the swiping. Some people have disabilities that would make swiping take longer than what you're assigning it.  Some more suggestions. Don't prefix your directives with 'ng', that's a native angular thing and is bad practice. You don't put the logic that modified the DOM inside the directive controller, you usually put that inside the directive's link function.   You're also not using the directive's scope effectively. You can pass the variable for the 'up', 'down', 'left', right' through an attribute to the directive's scope using the '@' symbol. I also noticed you want to execute an action on the directive from an attribute passed to it through the element, you can do this by putting that action in a separate attribute, and then reference that in the directive's scope using the '&' symbol.  I'll work on your directives a bit more at lunch to help you out some more.  This is a good start though. Directives are probably the trickiest aspect of AngularJS to understand, and they took me quite some time to really wrap my mind around them (and I don't know everything yet).   EDIT: I updated the plunkr after working on it for a bit. http://plnkr.co/edit/Y7alafirmR8IyMZvPKCr?p=preview. Still at the same URL. You can still see the history for it to see what I changed on yours before I made mine. Just as a note. I did not apply a lot of best practices to my newest plunkr. I just wanted to get it to work."
angularjs,38natu,rduoll,1 point,Fri Jun 5 15:15:28 2015 UTC,"Thanks a lot for looking at it, an even more thanks for using time to explain yourself and help me get to best practice. Really appreciate it man."
angularjs,38natu,rduoll,1 point,Mon Jun 8 07:31:03 2015 UTC,"You're welcome.  You do know that the angular-touch (or ngTouch) has an ng-swipe-left, and ng-swipe-right directive, right? If not, here's some documentation on it: https://docs.angularjs.org/api/ngTouch  That would probably be even better for you to use.   Also, take a look at John Papa's style guide for AngularJS. It's what I use. Some dispute it and don't like it, but it works for me. https://github.com/johnpapa/angular-styleguide  I'm willing to answer other questions you have if you ever want to PM me. Teaching is the best way to learn as they say!"
angularjs,38jkhp,catstanza,1 point,Thu Jun 4 17:25:41 2015 UTC,"Awesome, I will definitely check this out."
angularjs,38otk7,mootzy,1 point,Fri Jun 5 16:45:57 2015 UTC,How does the remote session work
angularjs,38otk7,Grim_Leaper,1 point,Fri Jun 5 17:10:06 2015 UTC,we have a custom streaming service - you ll be able to follow the class - ask question and talk to other students - you will also be pair programming remotely
angularjs,38hnuu,tomdush,1 point,Thu Jun 4 07:34:53 2015 UTC,"Oh, awesome! Thanks for sharing"
angularjs,38hnuu,DaCan0n,1 point,Thu Jun 4 17:25:26 2015 UTC,"Wow, there a few pretty cool ones in there, gonna bookmark this :)"
angularjs,38g7bf,angular2day,4,Thu Jun 4 00:22:06 2015 UTC,I am developing app with ES6 and AgularJS 1.x. The code is available on GitHub if you are interested. https://github.com/martinmicunda/employee-scheduling-ui
angularjs,38g7bf,martinmicunda,3,Thu Jun 4 08:59:01 2015 UTC,I'd go with typescript over straight es6 as typescript had more features (optional) and is what the angular team uses. We've used it for multiple enterprise applications and it's a huge time saver. Check out visual studio code for great typescript support in a text editor
angularjs,38g7bf,badcookies,2,Thu Jun 4 18:00:21 2015 UTC,We do it. As part of the gulp script we transpile to es5. Works well.   We also support typescript the same way in some projects.
angularjs,38g7bf,goofygrin,1 point,Thu Jun 4 05:21:48 2015 UTC,Thanks for the input. I'll look at typescript as well
angularjs,38g7bf,goofygrin,1 point,Thu Jun 4 13:54:54 2015 UTC,"It's my experience, that the more people on the project, the more helpful strongly typing is."
angularjs,38g7bf,Kohortis,1 point,Thu Jun 4 14:10:17 2015 UTC,use this https://github.com/angular-class/NG6-starter
angularjs,38g7bf,wickedmike,1 point,Thu Jun 4 08:10:29 2015 UTC,"I don't think it's a bad idea to use ES5 today, but think why you're not using ES6. I'm doing exactly the same right now, but for a smaller project on which I'm the only dev. I'm not using ES6 because I'm still learning JS and angular and I didn't feel comfortable enough with it.  I used angular 1.3 with ES6 at my last job, but somebody else set it up.  If you have at least one guy on your team that's a senior dev, I'd suggest going with ES6 and transpiling down to ES5 using babel or traceur or whatever. Writing controllers as classes, arrow functions and the ES6 module system are pretty neat things that I'm sure can be used learned quickly if you have at least one person who's capable to help others.  What I've learned is that if you're going to push new technologies on your team, you better make sure you offer them the proper support in learning them. So if nobody's willing to lead the effort and help the team catch up, stay with what everybody already knows."
angularjs,38g7bf,IMAHiji,1 point,Thu Jun 4 10:03:28 2015 UTC,Agreed.  That is also the reason we decided not to move to react.
angularjs,38g7bf,kommentz,1 point,Thu Jun 4 13:56:19 2015 UTC,"We use it as a team to code in development, and it's friggin amazing.  Though we do pack it all up with webpack and transpile with babel."
angularjs,38g7bf,KavetKerek,-3,Thu Jun 4 20:20:23 2015 UTC,"Because of this, I'd say absolutely not. I would consider 1.4 with TypeScript though."
angularjs,38g7bf,atticusw,4,Thu Jun 4 01:18:11 2015 UTC,most people that say go with ES6 are really saying -> code with ES6 but use something like Babel to Transpile
angularjs,38g7bf,dmackerman,2,Thu Jun 4 02:00:02 2015 UTC,You don't deploy ES6 code! You develop and transpile as part of your build process..
angularjs,38gwmf,crusty_meatball,1 point,Thu Jun 4 03:15:03 2015 UTC,"However, as soon as a new element with a [foo] tag is added after page load as a sibling of the other [foo] elements   How are you ""adding"" it?"
angularjs,38gwmf,atticusw,1 point,Thu Jun 4 05:39:16 2015 UTC,"I'm using angular-flexslider, and it will add a new element for you when you add a new object into the array of elements."
angularjs,38gwmf,simcptr,1 point,Thu Jun 4 06:11:35 2015 UTC,"Maybe angular-flexslider is creating the element and compiling it before inserting into the DOM in the correct place? That would mean it doesn't have the parent 'form' for its first compile, but after it's inserted it would work correctly.  You could try making it an optional parent (""?^form""), and put a console.log in your link function to see how many times it's being called for each ""add""."
angularjs,38epu8,deimyts,6,Wed Jun 3 18:51:09 2015 UTC,"I used to break my apps up in to a lot of modules, but have since strayed away from this practice, as it was just a pain in the ass to manage when apps really start growing (even with a task runner like gulp to inject all of my scripts). Now, I use one module for the app and I create a separate module for any directives. I create a new controller for each route/subroute. Each modal gets its own controller. I also frequently break out reusable components into directives with their own isolate scopes.  If you want more good info, take a look at the style guides by John Papa's and Todd Motto. They might have some conflicting suggestions, as style guides are often opinionated, but they should be very helpful."
angularjs,38epu8,AlmightyThumbs,4,Wed Jun 3 20:36:20 2015 UTC,"I would absolutely second John Papa's style guide. It's great. The Angular guides were originally pretty bad. The newer ones are better, but I still prefer Papa's.  I'd second the usage of a single module for your application, but I still split out all areas of my app into different modules. Then I just bring them together in the app module's dependencies. I also have modules for common shared elements like directives, navigation, etc."
angularjs,38epu8,zomgwtfbbq,1 point,Wed Jun 3 21:44:53 2015 UTC,"Those styleguides look incredibly useful. One issue I have trying to learn from the angular docs is that they often seem demonstrate about 10 different ways of doing the same exact thing, but in a pretty disorganized fashion. It's good that they're so comprehensive, but it's not great if you're just trying to figure out how it all works.  I can see that sticking to the proscriptions of a guide would solve a lot of issues I've had with not knowing which syntax to use at any given time."
angularjs,38epu8,bowersbros,2,Thu Jun 4 02:35:01 2015 UTC,"The way we do it is a single module for the software and each section has a controller, the same way we break up the backend code in php"
angularjs,38epu8,bowersbros,1 point,Wed Jun 3 19:37:55 2015 UTC,"When you say 'section,' do you mean say, each page of the application, each visual section on a single page, or each conceptual 'section,' for example controllers for each important function of the aplication?"
angularjs,38epu8,Martinspire,1 point,Thu Jun 4 02:36:35 2015 UTC,"The example I'll give is ecommerce  Say I have a page to add products, edit, list and view. Then In php they would all be products/action whatever. Now we use the first part of the route to tell us where angular controllers make sense. We also use directive and factories a lot to move boilerplate etc"
angularjs,38dwcx,gdi2290,2,Wed Jun 3 16:06:46 2015 UTC,"I made a typo in the title. I meant to say it uses ng-show afterwards. You would normally use ng-if for perf reasons (if you have a lot of bindings) and ng-show for dom perf. This allows you to get the benefits of both as ac-if-show=""hasValue"".  If you have any questions submit an issue or tweet us at @AngularClass"
angularjs,38dwcx,giszmo,3,Wed Jun 3 16:09:51 2015 UTC,I must confess I don't know the difference between ng-if and ng-show and thought they were interchangeable. Aliases maybe. Could you explain a bit?  (I taught angularJS to myself for a project I'm working alone on since months.)
angularjs,38dwcx,IvyLoL_Avendium,4,Wed Jun 3 18:29:31 2015 UTC,"If ng-if evaluates to false, that element will not exist in the DOM. If ng-show evaluates to false, that element will exist in the DOM but will have the class ng-hide applied, which by default has display: none"
angularjs,38dwcx,giszmo,3,Wed Jun 3 18:45:01 2015 UTC,"Ah, cool, thank you. So if ng-if does the job, ng-show would be a waste of resources.  Edit: And to continue on my enlightenment, ng-show makes more sense to quickly switch between those states and without loosing data.  Edit: May I tip you 0.5 USD for sharing your helpful thoughts? /u/changetip"
angularjs,38dwcx,IvyLoL_Avendium,2,Wed Jun 3 18:51:14 2015 UTC,"Yes, typically if your evaluated statement is not going to change much, you're probably better off using ng-if as then you don't have unused listeners, etc. However, if it's something like an accordion then it would make more sense to use ng-show as then you're doing less DOM modification."
angularjs,38dwcx,IvyLoL_Avendium,2,Wed Jun 3 18:55:12 2015 UTC,I appreciate the gesture but knowledge is free!
angularjs,38dwcx,giszmo,4,Wed Jun 3 19:27:54 2015 UTC,Knowledge is or should be free. Finding the right piece of information is full of friction though and pointing others to it is not free. It's painful work at times and I appreciate you do it.
angularjs,38dwcx,changetip,1 point,Wed Jun 3 19:58:33 2015 UTC,"/u/IvyLoL_Avendium, giszmo wants to send you a Bitcoin tip for 0.5 USD (2,318 bits/$0.50). Follow me to collect it.    what is ChangeTip?"
angularjs,38dwcx,esiege,2,Wed Jun 3 18:56:10 2015 UTC,ng-if doesn't compile it's child elements (elements inside it) unless it's true which can be used to avoid a lot of unnecessary bindings. ng-show only hides the elements from the user while the elements are still in the dom and still have data-binding
angularjs,38dom4,jimjenkins,1 point,Wed Jun 3 15:21:07 2015 UTC,doesn't stripe do this by default via their client-side API?
angularjs,38dom4,ndboost,1 point,Wed Jun 3 16:18:41 2015 UTC,"Yes, but for the best user experience, you want to validate this info client side.  I'm not super familiar with Stripe, but are you still charged for declines?"
angularjs,38dom4,doctorsound,2,Wed Jun 3 16:58:57 2015 UTC,The Stripe client-side API can do the check on the client-side...and no you are not charged for declines (or returns).
angularjs,38dom4,wtsn,1 point,Wed Jun 3 17:03:29 2015 UTC,"do'h, I totally read over the ""client-side"" portion of /u/ndboost's post :|"
angularjs,38dom4,doctorsound,2,Wed Jun 3 17:42:44 2015 UTC,"I use angular-payments when the form is submitted it calls  a function off of $scope.stripeCallback() which does the validation and initial processing and obtains the stripe token from Stripe's API (via the client-side js file you include), on validity it then fires Checkout.process() factory which actually pushes the transaction details to the backend and processes the payment.  this repo I worked on has a very remedial implementation of angular/stripe but it worked..   checkout the files on how I did stripe processing in    src/app/checkout/checkout.controller.js src/app/checkout/index.html src/app/services.js   There are probably way better ways to accomplish what you want, but this is just how I did it a few months ago when I was really new to angular (still am really new to it lol).  edit:  to add to your initial question.. stripe can do zip code validations and one of the responses back from the stripe client-side API is those validation results.. I think you have to have reject for invalid zipcode enabled though in the stripe settings. you can query for those and update the info accordingly in the forms. angular-payments just wraps the stripe libraries validations.. you can read more about those here   card.validateCardNumber card.validateExpiry card.validateCVC card.cardType"
angularjs,38dom4,ndboost,1 point,Wed Jun 3 17:46:01 2015 UTC,I have angular-payments set up but it doesn't look like it checks zip/address/cvc (AVS). I'm talking about legitimately checking to make sure the cvc and the zipcode are valid to the actual card. Not just if the formatting is correct.  The result always comes back as unchecked. I don't see anywhere in your code to see if you check for these.
angularjs,38dom4,ndboost,1 point,Wed Jun 3 17:54:48 2015 UTC,"address/zip are not checked through angular-payments. you need to write custom validations for those. I do not have validations in place on my code for address/zip.  cvc should be validated - and this does work, as I am using it.  <div class=""form-group"" ng-class=""{ 'has-error': (ccForm.cvCode.$invalid && ccForm.cvCode.$dirty) || hasError }"">   <label for=""cvCode"">CV CODE</label>   <input type=""password"" class=""form-control"" name=""cvCode"" placeholder=""CV"" required ng-model=""cvc"" payments-validate=""cvc"" payments-format=""cvc"" payments-type-model=""type"" /> </div>"
angularjs,38dom4,rsh412,1 point,Wed Jun 3 18:01:06 2015 UTC,"I know the address/zip are not checked through angular-payments. Sorry if my question wasn't literal enough, but I was initially asking if there are other modules that actually do check for AVS. The code you posted is only making sure the format is right. That does nothing for me as ""123"" would be valid and the card would definitely fail to charge."
angularjs,38dom4,wtsn,1 point,Wed Jun 3 18:03:21 2015 UTC,"I don't think there's really any way to do this client-side without relying on Stripe. I'm not aware of any way to validate CVC numbers apart from ensuring that they're included and 3 digits (or 4 with AmEx). It's not like card numbers that are different for each card issuer.  What you can do instead is handle the rejection of the card as it will come back from Stripe with an error code and tell you what went wrong. I believe it's something like ""Your CVC is incorrect."" You can catch this and display it or write your own or whatever."
angularjs,38dom4,wtsn,1 point,Thu Jun 4 03:19:34 2015 UTC,yea I think you are right. I didn't realize the validation came after you try adding a card and not the same time as tokenization.
angularjs,38dom4,wtsn,1 point,Thu Jun 4 19:07:49 2015 UTC,Use the custom option of Stripe's checkout.js (https://stripe.com/docs/checkout). You can create the handler/open it with angular and set the validate zip code option.   It outputs the token into a callback which you can then pass along to your back-end.  Very simple and easy to setup.
angularjs,38cxvt,Jobspresso,2,Wed Jun 3 12:22:29 2015 UTC,Prefers strong background in design...uses Lobster on homepage.  (Just joking...sort of)
angularjs,38cxvt,wtsn,1 point,Wed Jun 3 19:29:44 2015 UTC,But... it's such a pretty font... :)
angularjs,38cxvt,iamgort,3,Wed Jun 3 19:58:33 2015 UTC,If only the salary were likely to be competitive with what I make now.
angularjs,38cxvt,briznady,1 point,Wed Jun 3 13:33:13 2015 UTC,The salary range provided by the employer is in the listing. Have you taken a look?
angularjs,38fqn0,ndboost,1 point,Wed Jun 3 22:33:10 2015 UTC,"Ummm, loop the array in advance and add up the sizes?  Store result in whatever the parent is for the item array."
angularjs,38ckvy,mark1278,1 point,Wed Jun 3 10:06:23 2015 UTC,Very cool.
angularjs,38b0v2,ndboost,1 point,Wed Jun 3 01:26:25 2015 UTC,"basically throughout my app i have various sections for comments to be left. for now, comments can be attached to one of three different models..  rack, location, item.. comments are associated by the model's ID.. I basically have the code I linked to in each view and controller for rack, location, item. Seems redundant.."
angularjs,38b0v2,abyx,1 point,Wed Jun 3 01:27:48 2015 UTC,"Here's a basic directive that replaces your comment form. Obviously it can also take over the part of displaying existing comment with a little change:  angular.module('app').directive('commentForm', function(CurrentUser, CommentModel) {     scope: {         object: '=',         objectType: '@'     },     templateUrl: '...', // This template should have your form     link: function($scope) {         $scope.leaveComment = function() {            var comment = {                comment: $scope.newComment,                user: CurrentUser.user().id            };            comment[$scope.objectType] = $scope.object;             CommentModel.save(comment, ...);         };     } });   And you call use it like so:  <div comment-form object=""location"" object-type=""location""></div>"
angularjs,38b0v2,atticusw,1 point,Wed Jun 3 03:21:57 2015 UTC,"thanks, this is the method I ended up going with.. I changed it up a bit to retrieve the comments..  this is the code I ended up with. https://gist.github.com/mikedevita/9ef687dc7b5f279f8f32"
angularjs,389ys7,abyx,8,Tue Jun 2 21:12:06 2015 UTC,"I think I, respectfully, find myself in disagreement on nearly almost all of these points   Might feel slow/laggy/stuck  If that route has a resolve that takes a few seconds to complete, you won’t get any feedback about anything happening until the resolves are resolved.   Any routing system that has asynchronous route resolve dependencies is going to have to complete before the route finishes. A very simple solution is to listen for the stateChangeStart in a top-level location, like .run, and change state for an indicator to become visible. Then dismiss it on stateChangeSuccess or stateChangeNotFound. This is just how asynchronous resource depenencies work, and every router will have these problems. You luckily have the option to choose what resources you'd like to defer onto the route side, and pick others that you'll resolve once your controller and route have been loaded to unblock the UI and progressively fill out the view.   Errors happen in no-man’s-land  You have a resolve that makes an AJAX $http call. Eventually it will fail. Where will you handle the error? You don’t have a controller yet to manage things at this point.   This is pretty agnostic to any router system as well.. Your resolves may fail, and sometimes you want them to fail loading the route and enter a special state. Say a 401 response, you get to listen for those with an $httpProvider.interceptors and kick the user back to the login. Or a 404 you can bring up a not found view. A lot of these things you don't want to worry about in your controller. I don't want to have to handle every 401, 404, or 500. You can handle this at a high level, that's the beauty of resolves and interceptors.. Otherwise, it's pretty typical to .catch the rejection and pass out null. I don't see anything wrong with this, nor do I see any of it being an antipattern. It actually provides a good level of control.    It adds complexity to the code  The dependencies of the controller are now pushed away to a place far far away. Some of the setup of the controller now happens in a different place, even though it is still very coupled – each resolve maps to an argument for the controller.   But that's the beauty of separation. I don't have to care about how the data is fetched, i just need it. The resolve for the data can take the route param, say users/:id, and fetch the user by that ID. And I also don't think this promotes tight coupling, you can make these resolve functions sharable. Sure, there might be some controller-specific resolves, but I think it's a fair tradeoff. And who's to say that you can't create a provider for all your controller-specific resolves and use that in the config phase of the lifecycle where you build your routes? I think if you organize well, this promotes a terrific separation of concern along with making common resolves sharable.  For example, instead of  angular.module('app').config(function($stateProvider) {     $stateProvider.state('goat', {         url: '/goat',         controller: 'GoatCtrl as goatCtrl',         templateUrl: 'goat.html',         resolve: {             goat: function(GoatService) {                 return GoatService.getGoat();             }         }     }); });   You can define your resolve functions separately, even split them into different files relative to the component, and reference them  angular.module('app').config(function($stateProvider) {     function getGoat (GoatService) {       return GoatService.getGoat();     }      $stateProvider.state('goat', {         url: '/goat',         controller: 'GoatCtrl as goatCtrl',         templateUrl: 'goat.html',         resolve: {             goat: ['GoatService', getGoat]         }     }); });"
angularjs,389ys7,atticusw,4,Tue Jun 2 23:27:38 2015 UTC,Easy way to show your users data is loading: https://chieffancypants.github.io/angular-loading-bar/
angularjs,389ys7,tjwallace,2,Wed Jun 3 06:49:25 2015 UTC,"https://chieffancypants.github.io/angular-loading-bar/   Wow, that's really well made. Thanks for sharing"
angularjs,389ys7,atticusw,2,Wed Jun 3 17:52:28 2015 UTC,"Yeah, I agree with your comments on error handling in ui-router.  I think the way ui-router completely eats uncaught errors would have been a better resolve ""pitfall"" to mention.  I've wasted much time on multiple occasions because a resolve threw an error and ui-router ate the error message so I never knew it happened.  Basically you should always set up a $stateChangeError handler first thing when using ui-router."
angularjs,389ys7,rq60,1 point,Wed Jun 3 00:55:40 2015 UTC,"Heyo, First, thanks for the informative response :) I'll start with saying that I mention several times that I love resolves and ui-router and that these are basically things people, at first, don't think about and that they should. Not that everything there is ui-router's fault and you should never use it. Just things most ui-router tutorials never mention.   Yes, any routing system with async stuff will have these problems. And yes, sometimes a global loading indicator is OK, but look around at twitter, Gmail, whatever. How many have a global spinner that shows up whenever you're waiting for something? Whenever I stumble on a site with these, it makes everything feel slower. Specific spinners (e.g. the template starts loading and a part of it indicates there's some work still going on), IMHO, feel more responsive. That's why I opt for the more specific use case, for better UX. Yes, I even link in that paragraph to a post of mine about setting up a generic interceptor for handling most generic errors. But that's the pitfall - making you aware that you should do something that most examples don't tell you anything about. Totally acceptable POV, this is a matter of taste/style. I prefer explicitness usually - my controller don't care how things are fetched, but if they specifically use some service to fetch it inside them, and handle the asynchronous nature of the fetching, it sometimes ends up feeling like better code to me. But again, not always - I use resolves quite a lot."
angularjs,389ys7,atticusw,3,Wed Jun 3 02:26:57 2015 UTC,"Classic case of not reading everything the author discusses -- thanks for taking the time to clarify.   Specific spinners (e.g. the template starts loading and a part of it indicates there's some work still going on), IMHO, feel more responsive. That's why I opt for the more specific use case, for better UX.   That's true. We started using some progressive loading techniques, where it stubs out a few of the items that will be repeated. We're currently making the request within the controller. But it would be pretty cool if you could define these as dependencies for the controller's route, but specify them to be non-blocking. Something like the following would be cool  angular.module('app').config(function($stateProvider) {     $stateProvider.state('goat', {         url: '/goat',         controller: 'GoatCtrl as goatCtrl',         templateUrl: 'goat.html',         resolve: {           goats: function () {             return [];           }         },         nonBlockingResolve: {             goatPromise: function(GoatService) {                 return GoatService.getGoat();             }         }     }); });   Where you could then treat it like a normal promise in the controller  goatPromise.then(function (goat) {   $scope.goat = goat; });   But even that feels kind of silly, where you might as well in the end just call GoatService.getGoat() inside the controller...   Yes, I even link in that paragraph to a post of mine about setting up a generic interceptor for handling most generic errors.   Yea, totally overlooked that. Glad you have identified it. It seems like tutorials geared towards explaining how to set up your first router would consider that a little advanced, but it is an important pattern that should at least be referenced and linked to into another discussion, as you have done. Even if the tutorial/post on the router is not an introductory article, it is kinda a different topic.   but if they specifically use some service to fetch it inside them, and handle the asynchronous nature of the fetching, it sometimes ends up feeling like better code to me.   In cases where you want to avoid blocking the route, and lazy/progressively load the content I'd agree. If you don't care for it to block, I'd almost always advocate for treating it as an asynchronous dependency in the route resolve. It is a balance, and there's no fantastic pattern for these cases where you want non-blocking asynchronous dependencies -- you are unfortunately forced to prepare it in the controller and that scales poorly in the organization of the controller's codebase. I feel like a good design could provide for a more elegant solution, perhaps an inheritance approach with a ""parent"" controller that encapsulates a solution for this dirty work."
angularjs,389ys7,foobar5678,5,Wed Jun 3 03:43:18 2015 UTC,The fucking thumbnail everytime this site is posted...
angularjs,389ys7,nothingbutcontempt,2,Wed Jun 3 05:55:02 2015 UTC,YES.
angularjs,389ys7,madskillzelite,1 point,Wed Jun 3 12:03:58 2015 UTC,"Hey /u/abyx, check out my reply on your article. =)"
angularjs,389ys7,netherwise,1 point,Wed Jun 3 02:43:12 2015 UTC,"Hey, nice comment :) and first time I hear about your article, will give it a look"
angularjs,387ayh,cgaudreau,11,Tue Jun 2 10:52:20 2015 UTC,"I don't know why they skipped over the entire AngularUI library. Buttons, modals, and more - https://angular-ui.github.io/"
angularjs,387ayh,zomgwtfbbq,3,Tue Jun 2 14:31:07 2015 UTC,+1 It should be at the top of any list like this imho
angularjs,387ayh,ChuckChunky,1 point,Tue Jun 2 19:58:41 2015 UTC,"Ui.bootstrap is fantastic except for that datepicker! Actually, the datepicker's code is nice, but the default template is atrocious. It looks like 1998."
angularjs,387ayh,wtsn,1 point,Wed Jun 3 17:11:04 2015 UTC,I like that half of those use jQuery which is an Angular no-no.
angularjs,388jr1,rahil471,1 point,Tue Jun 2 16:40:58 2015 UTC,"Surprised this promotes a custom filter for pagination.   With angular 1.4's limitTo you can specifiy page size and offset. Meh, this likely targets 1.3 as 1.4 just came out. Good article though"
angularjs,388jr1,atticusw,1 point,Tue Jun 2 23:40:57 2015 UTC,"Not finished yet, but I like it so far.  I know this is the wrong topic to discuss it, but am I alone in my total animosity for this kind of pagination? As a user I want to access as much content as possible preferable everything, I prefer an ""intelligent"" infinite scroll mechanism over numbers at the bottom."
angularjs,387lrw,auhlrich,1 point,Tue Jun 2 12:45:21 2015 UTC,"Well, i'm actually glad with the things that are in it. Animations are now much easier, but i also like the limitTo change for ng-repeat. Much easier to implement pagination (for whatever reason people might still design em this way)  And if you are already using ui-Router, then there isn't much to gain, just that it will be implemented in angular directly"
angularjs,387lrw,Martinspire,1 point,Tue Jun 2 12:49:10 2015 UTC,Agreed on all points. I suppose it sucks for those that were anticipating the router for an early/starting a project.
angularjs,387b3l,mark1278,1 point,Tue Jun 2 10:54:05 2015 UTC,I like the idea of saving the structure in one json string. You can easily save/load it with https://github.com/grevory/angular-local-storage
angularjs,387b3l,redyar,1 point,Tue Jun 2 18:58:38 2015 UTC,I've been using this for hierarchy management in a project recently and it works very well
angularjs,387igz,ReefJunkie,2,Tue Jun 2 12:16:39 2015 UTC,"Modules can depend on other modules - use dependency injection the same way you would were it a service.  If the project has multiple top-level modules, create a single parent module that depends on all of them, then inject that parent module into your new project.  To get the code in one JS file, just put it in one JS file.  Copy and paste, or use some automation tool (concat) if you're going to be updating the old project and want to keep it maintainable"
angularjs,387igz,okwg,2,Tue Jun 2 15:36:35 2015 UTC,"I already have a parent module that uses all the modules as dependencies, so it sounds like I am in a good place. The disconnect for me is that the modules are registered to the angular app name. Would you happen to know of an example I could look at?  Example: How would I inject all the functionality of John Papa's Hot Towel App into my own?  Hot Towel  edit: added example"
angularjs,387igz,okwg,2,Tue Jun 2 16:58:45 2015 UTC,"Most angular extensions will work this way - take a look at ui-utils for example.  There's a parent module (/modules/utils.js) which depends on a bunch of sub modules, which are defined in JS files in those subdirectories.  They have a gruntfile which, among other things, automates the task of combining all those JS files into one JS file.  That combined version isn't in the source, but you can download and look at it from the main page  Then, to use it, all you have to do is include a reference to the ui-utils js in your html, and add the parent module (ui.utils) as a dependency in your own module"
angularjs,383djh,eikaramba,21,Mon Jun 1 15:49:31 2015 UTC,"The real problem with Angular is not that it is inheritly slow. The problem is that it's easy to write bad code that makes it slow.   People who read angular performance docs would not do these mistakes. React's advantage is that you can read less and still have less performance issues.   Source: 2 years with angular and love it. Still, appreciate the fact that react is a great framdwoek that learned from the issues that angular has ."
angularjs,383djh,chtulhuf,9,Mon Jun 1 21:39:38 2015 UTC,The problem is that it's easy to write bad code   Like PHP!
angularjs,383djh,OutThisLife,3,Mon Jun 1 23:16:43 2015 UTC,In PHP it's hard to write good code.
angularjs,383djh,ralusek,1 point,Tue Jun 2 16:17:44 2015 UTC,"Is it ever good? I thought the best is ever reached was ""not terrible."""
angularjs,383djh,until0,5,Tue Jun 2 19:48:11 2015 UTC,And every other language.
angularjs,383djh,m0okz,2,Tue Jun 2 06:42:22 2015 UTC,"Some languages have ways to help prevent this, at least a little. For example ""use strict"" can help you not make bonehead mistakes in Perl and I think some other languages use that one as well."
angularjs,383djh,Blimey85,2,Tue Jun 2 08:02:51 2015 UTC,Javascript :)
angularjs,383djh,m0okz,1 point,Tue Jun 2 12:02:17 2015 UTC,And Go. I love Go. Go is life.
angularjs,383djh,OutThisLife,1 point,Tue Jun 2 14:52:18 2015 UTC,"Haha, yeah.. I've seen some fucked up Python."
angularjs,383djh,OutThisLife,13,Tue Jun 2 14:52:29 2015 UTC,"This validates what I've seen even with Angular - Angular handles a lot of data really well, but the browser chokes on massive DOM changes and/or huge DOMs in general. The only way to fix it is to simply not render pieces the user can't see and load more as they scroll. Only virtualizing things while you're changing them and then applying the changes en masse still doesn't solve the basic problem - your browser doesn't want to render 1,000 table rows."
angularjs,383djh,zomgwtfbbq,6,Mon Jun 1 17:15:21 2015 UTC,"angular 2 addresses the issues i believe. but even with angular 1, the performance issues are in rare areas"
angularjs,383djh,pitne,4,Mon Jun 1 22:44:18 2015 UTC,"Well, if you compare them like this, sure.  But angular isn't about making pages interactive (which is where react is good at), but about making webapps. Handling data across multiple pages and creating forms, doing data calls and whatnot.   Repeating data for tables or lists is something that React is pretty fast at, but i'd still rather work with Angular as it is much more readable, separates things the right way and is better for large projects with multiple people working on it.  Most of the comparisons are about a specific thing that one or the other might be better at, but i also see lots of em who use Angular wrong, or have some code that either entirely wrong or can be improved greatly. Just like the ""track by $index"" you see there.  I wanna see React devs make a big and difficult app, rather then an interactive page about listing data or charts or whatever. My first big Angular app was quite the ballbuster, but i've learned a lot and now i'm confident in making more apps like it. I feel that the current Angular structure and logic is much easier to use to cooperate and develop in large group whereas React is still quite a mess if i have to be honest. Mixing templates, styles, logic and structure in a way that has no real standard. Its one of the reasons jQuery and jQuery Mobile weren't doing it for me either. Not because it was slow and hard to get into, but because the endresult was very messy.  For me performance isn't the only reason for using a framework. And a single performance metric (which most tests are about, how well does the ng-repeat handle lots of data are 99% of the ""performance comparisons"") isn't why i use a framework at all. How easy is it to use, how easy is it to work on other peoples code and how well does it work with my building tools is of the same importance as how fast is it looping through data, how fast does it load and how fast can it change pages."
angularjs,383djh,Martinspire,6,Tue Jun 2 10:55:44 2015 UTC,I think this is an ad for JSBlocks
angularjs,383djh,vt97john,2,Mon Jun 1 21:13:05 2015 UTC,"yea, that pretty much got called out in the comments. but this article brings up good points of being mindful of what you're actually testing."
angularjs,383djh,uberpwnzorz,1 point,Tue Jun 2 05:26:49 2015 UTC,"Insightful, cheers for the link."
angularjs,383djh,madou9,-16,Tue Jun 2 08:54:31 2015 UTC,"Na actual code samples plus links to ""You need to sign up to view this"".  No. Fuck you. Have a downvote."
angularjs,383djh,ma-int,9,Mon Jun 1 22:26:48 2015 UTC,"wow..... clap .... just wow. Did you even looked at the article, because there ARE code samples... ""oh no i need to look at the source code and i'm too lazy"""
angularjs,385wi6,barretodavid,1 point,Tue Jun 2 02:01:52 2015 UTC,"This is pretty slick. Usually I just include bootstrap as a dev dependency, copy the root sass my styles folder and change the paths of the component files as I create custom versions of them.  The article's approach is more streamlined. That said, after project setup, I rarely create enough css files to make automated injection worth implementing."
angularjs,384pfa,funkyangles,5,Mon Jun 1 20:58:23 2015 UTC,"2.0 is currently in developer preview, so things can change drastically. It is better to use 1.4"
angularjs,384pfa,BadugiChamp,3,Mon Jun 1 23:44:29 2015 UTC,I updated the wiki to try and capture the answer to this oft-asked question. One could say: it's a frequently-asked question. It may be our only real FAQ.
angularjs,384pfa,pfooti,2,Mon Jun 1 22:21:39 2015 UTC,"Angular 1.x still has a lot of life left in it. There are a great number of companies who have built robust applications with it, and who continue to do so. Most of them have no plans to refactor that code to support the Angular 2 overhaul."
angularjs,384pfa,AlmightyThumbs,1 point,Tue Jun 2 04:43:44 2015 UTC,"1.4. No question. 2.0 is not out yet, and it would be counter productive to use a library in development."
angularjs,384pfa,Beaulne,1 point,Mon Jun 1 21:35:57 2015 UTC,"I think you can safely close the book based on the answers here.  I too am just starting up a brand new project which will be a monstrous application with many pieces. The only thing I toyed with using was the new router, but even that is unstable (it's been brought into 1.x).  You will be hitting wall after wall of code that isn't working if you coded in 2. Or/and you'll code stuff that works, and then that feature will change the way it works in the next release and you'll have to refactor.  You don't always have to follow the new and shiny, only jump onto them when there's a pressing need."
angularjs,384pfa,spoco2,1 point,Tue Jun 2 05:50:18 2015 UTC,Checkout aurelia
angularjs,384pfa,utuxia,1 point,Wed Jun 3 00:07:19 2015 UTC,Absolutely 1.4. You don't want to build a product on a developer preview release of a framework that also has no community yet. 1.X will not be disappearing overnight either.
angularjs,384pfa,atticusw,1 point,Wed Jun 3 00:47:13 2015 UTC,"Without a doubt 1.4.   However a potential migration to 2.0 down the road doesn't have to be a pain if you start thinking in an Angular2.0/Web Component way. Have a look at John Papa's Style Guide for Angular apps, particularly the ControllerAs syntax and Folders by Feature structure  Last I heard, John is writing the style guide for 2.0 so expect many similarities and layout preferences to carry over."
angularjs,384pfa,fast74,0,Wed Jun 3 12:26:03 2015 UTC,I think angular 2.0 will never be finish.
angularjs,386qef,spoco2,2,Tue Jun 2 06:32:06 2015 UTC,"The architecture I have made for this kind of thing is slightly different since I don't use ngRoute, I needed very dynamic and hierarchical, recursive routing. Additionally I don't use a template/controller approach and instead go for a directive based approach which has served me very well.  I defined some requirejs plugins to handle the different types of dependencies (this includes a template html file, allowing that to be inlined into the bundle). As well as a strict naming/folder convention so that names of a component related to their location.  Finally, for the build process I have something that traces the folder structure and dynamically generates the configuration object in iojs."
angularjs,386qef,Chryssie,1 point,Tue Jun 2 07:46:01 2015 UTC,"Yeah, I was actually wondering whether purely going with directives might work, I mean, it's basically what a route is doing anyway, loading a template with a controller.  Thanks for the info"
angularjs,38579o,supburger,2,Mon Jun 1 23:00:16 2015 UTC,sanity check? npm/bower update?
angularjs,38579o,uberpwnzorz,1 point,Tue Jun 2 08:41:24 2015 UTC,"Definitely worth a check. At work we had build failures that I couldn't reproduce locally... turned out that the build was re-installing npm + bower fresh every time, but my local copy was out of date.  rm -rf node_modules bower_components && npm install && bower install   just to be on the safe side."
angularjs,38579o,simcptr,1 point,Tue Jun 2 23:22:14 2015 UTC,Rails doesn't use bower. I fixed it though. Thanks anyways.
angularjs,38579o,jimschubert,1 point,Wed Jun 3 02:01:02 2015 UTC,"How are your files loaded? Are you using angular-loader to allow loading files out of order? Also, where is the alerts module declared?  If you're using any 3rd part things like angular-ui, you could have a conflict in your controller name. You could rename the controller and see. This could change based on where your files are included relative to the other modules."
angularjs,38579o,parronator,1 point,Tue Jun 2 03:15:22 2015 UTC,"Are you using minification in production? With minification you should declare controllers and directives like this: .controller(['$scope','directive', function($scope,directive){ }])"
angularjs,38579o,simcptr,1 point,Tue Jun 2 09:08:03 2015 UTC,"The way OP is doing it will also work -  alertController.$inject = ['Flash'] function alertController(Flash) { ... } angular.controller('alertController', alertController);   is equivalent to  angular.controller('alertController', ['Flash', function(Flash) { ... });   It's just a different style. I personally like and use the former one, it just seems a little easier to read for me.  Even better! Integrate ng-annotate into your build and stop worrying about forgetting to update the damn inject array: https://github.com/olov/ng-annotate  I can't tell you how many times I added a function parameter and forgot to put it in the array, only to get strange ""undefined is not an object"" errors :/"
angularjs,382ruy,pagalvin,3,Mon Jun 1 13:05:49 2015 UTC,"https://angular-translate.github.io/  Works really well, easy to use too."
angularjs,382ruy,korreWorre,2,Mon Jun 1 13:30:00 2015 UTC,Just used this on a production app.  Works well.
angularjs,382ruy,strcrssd,1 point,Mon Jun 1 15:50:21 2015 UTC,"Thanks, that looks right on the money."
angularjs,382ruy,simcptr,1 point,Mon Jun 1 14:04:41 2015 UTC,"Angular Translate is the way to go. We use it at work. It's easy to set up - just add it as a dependency and load your translations. From there, you can either use the 'translate' directive or you can pipe strings through the provided 'translate' filter. I wrote up a 'getting started' guide if you want to check it out: http://daveceddia.com/angular/multilingual-angular-using-two-or-more-languages-in-your-app/"
angularjs,381xet,tomdush,1 point,Mon Jun 1 06:58:35 2015 UTC,Big fan of Pascal Precht's work. angular-translate is great
angularjs,37wpeh,eikaramba,5,Sun May 31 01:00:38 2015 UTC,"Interesting to see this framework gaining some ground. Though it addresses (what seem like) obvious problems with the ""angular way"", I'm curious to see how it compares to react + flux (or any other semi-popular isomorphic js frameworks) Edit: late and tipsy"
angularjs,37wpeh,SomeRandomBuddy,2,Sun May 31 05:06:20 2015 UTC,Your comment is difficult to read.   I agree with your sentiments though.
angularjs,37wpeh,rduoll,1 point,Sun May 31 05:14:03 2015 UTC,Updated Thanks for the heads up haha
angularjs,37wpeh,SomeRandomBuddy,2,Sun May 31 05:23:24 2015 UTC,"As an angular 1.* dev for around a year and a react + flux dev for about 8 months now I can provide (practically useless) anecdotal evidence that react is a much better setup. Then again my react flux setup uses ES6 and I have fingergasims every time I write something. That said, in excited to jump into angular 2 since they're triming the fat from angular 1 and using ES6 concepts baked into the framework.  Keep in mind I'm the kind of developer who likes shiny new things."
angularjs,37wpeh,sovietmudkipz,1 point,Sun May 31 13:19:56 2015 UTC,"i'm also quite impressed by Aurelia, i think it's much more developer friendly then angular 2.0 - some would even say that Aurelia looks more like the next angular version, than angular 2.0 looks like :)  Nevertheless, a comparison between react and so on would be nice.  I'm currently trying to maintain http://jsperf.com/angular-vs-knockout-vs-ember/629 and have a comparison in terms of performance. However it is not so easy to integrate Aurelia into this comparison."
angularjs,37wpeh,SomeRandomBuddy,0,Sun May 31 16:29:17 2015 UTC,"That's why its creator left the Angular team some time last year and decided to go FT on Aurelia. I also like its forward-first architecture, but a few other things strike me as suspicious when it comes to considering it for use in a long-term project.  The first, being bi-directional data binding which, depending on how implemented, could create performance (and maybe organizational) problems for enterprise users from the get-go. I'm much more in favor of react's virtual DOM paired with flux (at the moment, anyway), unless Aurelia can prove their implementation to be somehow superior.  The second being isomorphic consideration. As of now, Aurelia has no plans to impose it (which some think is a positive thing) on users of the framework, but the founder mentioned on GitHub that it might in the future. Isomorphic apps and sites have seemed to pick up a lot of steam in recent months, so either Aurelia is already a few years behind, or Tom is a genius"
angularjs,37wpeh,elprophet,3,Sun May 31 19:48:21 2015 UTC,"Every time he posts one of these, I look at it and think it's missing flexibility. From the comparisons, I could take Angular 2, write some framework code that handles convention over configuration, and have all of Aurelia in a heartbeat. (Template expression differences aside.)"
angularjs,37wpeh,elprophet,1 point,Sun May 31 13:06:43 2015 UTC,"maybe one should do exactly that and hence improve the comparison by a 3rd column. But i don't think you can can easily have the same boilercode reduction that aurelia provides, e.g. two-way data binding removes quite a lot of lines (despide whether it's good or not ->see react USP of having a streamlined state)"
angularjs,37wpeh,noreddithandle,3,Sun May 31 16:25:53 2015 UTC,NG2 has 2-way binding with ([obj.prop])
angularjs,37wpeh,no_guru,2,Sun May 31 17:39:35 2015 UTC,"It would be great if Aurelia could be backed by a big company, in a similar way that facebook is to React and Google is to Angular. I assume it would scale up in terms of resources and specially would give the community a sense of ""hey, Aurelia is here to stay"". On the other hand, that would probably condition what future would the framework follow."
angularjs,37wpeh,bgale,0,Sun May 31 09:21:44 2015 UTC,"I believe Microsoft is going endorse Aurealia. Not because it is better than Angular but simply because they need to give all the Visual Studio users some kind of ""out of the box"" solution for this problem.  Also majority of devs and projects want solutions that are supported for years to come without the need to rewrite everything when next version of that library is released. The reason why ASP.NET MVC has been popular is because of the good backwards compatibility. Yes there are issues but devs learn to work around them. It is easier to learn the tricks during the first year than keep learning new framework/library every year. Especially when all you are learning is a new way to do the same thing you already knew how to do it."
angularjs,37wpeh,RobertMuldoonfromJP,5,Sun May 31 14:06:25 2015 UTC,"Microsoft has been pushing Angular pretty hard, especially with the Typescript stuff in v2."
angularjs,37wpeh,no_guru,1 point,Sun May 31 20:02:04 2015 UTC,I cant see the motivation in them doing that. They couldn't make it proprietary and make money off of it so why bother?
angularjs,37wpeh,no_guru,1 point,Mon Jun 1 02:07:10 2015 UTC,They don't need to make money of it. .NET stuff is already free and open source.  This means mostly backwards compatibility. I know e.g. Entity Framework didn't do this but for most part the .NET side has been stable since 2.0 (released 2006) which means you can start using new framework without breaking everything.  Angular and others are not so widely used. Yes they might have been around for years but relatively speaking there aren't that many projects using them compared to traditional web sites and there certainly isn't lot of old code that someone needs to maintain. I think people will realize the backwards compatibility and stability in 2020 when they need to work with huge app that has been built with angular 1.2.
angularjs,37wpeh,ralusek,1 point,Mon Jun 1 02:55:32 2015 UTC,"Could someone please explain me why angular is using syntax like this for bindings:  <input type=""checkbox"" #chkbox [checked]=""item.completed""   The usage of [] reminds me more or and array indexer than anything to do with binding.  I think Aurealia's way is much cleaner and it is obvious what checked.bind does. It also seems future proof because you can use checked.foo checked.bar in the future if needed."
angularjs,37wpeh,dvidsilva,3,Mon Jun 1 03:18:07 2015 UTC,"For clarity in reading and speed in compiling. People dislike it because it's different, but it's actually a pretty great way of looking at a template and telling exactly what's going on.  Take a directive in angular 1.  <my-directive info=""ctrl.info"" new-data=""ctrl.newData(data)""> </my-directive>   You could look at that and guess that ctrl.info was maybe an object being passed in and new-data was an event handler. But maybe new-data also expects and object and you're just calling a function on the controller that returns an object. It's very unclear. I have to go into the directive's code and check the isolate scope definition. Maybe it's not defined, so then I have to go into the directive link function or controller and look for the $parse-ing of attributes.  In angular 2 you can look at the template and tell immediately what's going on.  <my-directive [info]=""ctrl.info"" (new-data)=""ctrl.newData(data)""> </my-directive>   It's very clear that info is going to be passed in data and new-data is a callback function. Readability made 100x easier."
angularjs,37wpeh,hatestheinternet,2,Sun May 31 14:00:35 2015 UTC,"Is valid HTML and more flexible than the previous way. Not that I agree 100% but that's what Igor ""told me""."
angularjs,37utcr,devixgp,1 point,Sat May 30 16:06:42 2015 UTC,Seems alot less painful than I expected!
angularjs,37utcr,yesman_85,6,Sat May 30 18:07:18 2015 UTC,There aren't very many huge changes (apart from ngAnimate).
angularjs,37qnni,sonofahorse,1 point,Fri May 29 16:58:07 2015 UTC,"Can someone explain what a bidirectional DDP connection is   DDP is a protocol created to handle two-way data communication over a websocket connection. The server and client both listen for and register events, which enables them to communicate directly within JS rather than requiring a protocol like HTTP and therefor something like REST.  REST is passive. To keep a data source on the client up to date with REST you need to constantly monitor the endpoint, which is very expensive for both the client and the server.  Angular is just muddying the waters for you here. It doesn't matter what technology stack you're using on the client. There are packages like angular-meteor designed to simplify angular application building on top of Meteor."
angularjs,37qnni,SparserLogic,1 point,Fri May 29 18:47:28 2015 UTC,Thanks! That's exactly what I needed to know.
angularjs,37r907,cstaway120012,6,Fri May 29 19:20:40 2015 UTC,"Don't fall in to the trap of thinking everyone knows more than you so how can you possibly be good enough. Think of an idea, build it, sell it. Working for other people is overrated."
angularjs,37r907,MattBlumTheNuProject,2,Sat May 30 05:14:45 2015 UTC,"Have you tried applying to anything anyway?  Assuming your JavaScript and general purpose knowledge is sound, it sounds as though you're on par with a lot of candidates I've seen.  You may not have mastery of Angular, but it's still a framework. Angular isn't quite to the level of ""You're expected to know it in detail"" as, per se, jquery has been (yet). If you have skills to back up what you can do and steer interviewers towards your strengths, then knowing only Angular's basics should certainly get your foot into some doors."
angularjs,37r907,wkalata,3,Fri May 29 19:42:14 2015 UTC,"Sorry. But I disagree strongly. I would never hire an Angular developer without a lot of real world experience (or some big personal project written in Angular).   Majority of their time will go towards re-factoring their code as they learn more. If not, you will have pretty bad Angular code."
angularjs,37r907,letmebeeee,3,Fri May 29 21:25:49 2015 UTC,"I would never cast doubt the idea that your policy absolutely makes sense for you, your company and your team, or that he would be ubiquitously accepted anywhere.  It doesn't take away from the fact that people like me exist, and the fact that he'll find better direction (and maybe even employment) if he gets in contact with organizations he's interested in working for.  To clarify my position, we have a lot of code under our roof, and would have no issue finding value in a smart JavaScript candidate with nominal Angular experience.  The value we find may not even be in Angular code, per se.  If we bring on a smart person who's hell bent on strengthening their front-end and Angular skills, then surely it's in our best interest to foster and encourage that area of development, and surely a talented individual could easily end up working on Angular code full time if they did work on that area of development."
angularjs,37r907,wkalata,1 point,Fri May 29 21:44:08 2015 UTC,"I have not applied to anything yet, the ""experience"" and ""portfolio"" scares me away from a lot of the applications since some of them look for angular specific experience/portfolio (or in the portfolio case, a live portfolio of work I've done).   Everything I've built is internal and can't be put on public github but I have enough knowledge of Angular to talk about it. I just don't have a problem to solve or an idea to implement the more advanced concepts of angular so the portfolio kind of stays empty."
angularjs,37r907,RagingAnemone,1 point,Fri May 29 19:48:22 2015 UTC,"I'm advertising for an Angular job at the moment, and I agree with the others here and interview anyway.  Mine's also a corporate job (enterprise), and I'll probably be mostly interested in the small tools you've create for work rather than your other projects.  I'm going to care that you can solve a real world problem.  And from talking to you I'll know what level you're at in general.  GitHub is a nice to have."
angularjs,37r907,goody_71,2,Sat May 30 09:39:12 2015 UTC,"How are your skills in the supplemental tools that can be used with Angular?  eg Node, Bower, Gulp/Grunt, Git, LESS/SASS?  And your Unit testing with Karma, Jasmine, and Protractor?  Build up an Angular demo app that has a solid build process, tests, and host it on Github/Bitbucket.    And always stay up to speed on JavaScript.   If you can talk to all of the above topics confidently in an interview you'll be in good shape."
angularjs,37r907,utuxia,1 point,Mon Jun 1 22:04:43 2015 UTC,"Good at bower, eh at node...learning the MEAN stack at the moment (I've gone through some courses, trying to build a to do app on my own now).   Grujt./gulp, decent...still need to learn a few more things but I've done some basic task automation.  Less/sass is where I'm kinda shit. Need to improve me design, CSS and CSS pre processor skills"
angularjs,37r907,Aesdotjs,0,Wed Jun 3 03:02:42 2015 UTC,I do not know what else to create/make with Angular   wow. i have a list a mile long of ideas.
angularjs,37r907,utuxia,2,Mon Jun 1 00:26:20 2015 UTC,go ahead :D
angularjs,37otwm,grimdeath,4,Fri May 29 05:52:43 2015 UTC,Gulp and Grunt arent Testing tools. They are task runner.
angularjs,37otwm,suchb,1 point,Fri May 29 11:52:31 2015 UTC,"Yep I'm aware of that. However, Gulp at least seems to be capable of running Jasmine tests:  http://www.rexfeng.com/blog/2014/07/how-to-unit-test-your-js-and-use-it-in-the-browser/  I've heard of some folks running Jasmine directly via Gulp like this, and I've heard of others using Jasmine+Karma+Gulp in some fashion. I'm just unsure what's the benefit is to either setup. That's why I made this post, to gauge what is popular."
angularjs,37otwm,mrv1234,3,Fri May 29 15:53:55 2015 UTC,"This might help, this gulp build runs tests using karma, jasmine and phantomjs -> https://github.com/jhades/angularjs-gulp-todo  These tools are great to test the service layer of the app by mocking $http with angular-mock. but for directives and ng-model, it often requires a DOM and thats where phantomjs comes in.  Beware that those tests that require a DOM are no longer unit tests but integration tests - they break easily and are much harder to maintain and cannot be run all the time - they are much slower.  One of the reasons why Angular 2 will be a rewrite is to make it more testable, in principle everything can be tested without a DOM. This might explain why you see less activity in the testing front for v1"
angularjs,37otwm,mrv1234,1 point,Fri May 29 14:35:08 2015 UTC,"Great response thank you. I think you're the first to give me an answer for the halt in development (devs are switching gears to Angular 2). It makes sense!  I understand the basics of Karma and Gulp, but I've never truly used them. Can you give me a high level / ELI5 overview of your process using Gulp+Karma+Jasmine+PhantomJS? I'm just trying to understand how all the bits fit together."
angularjs,37otwm,simcptr,2,Fri May 29 16:05:37 2015 UTC,"Hello, sure. I think the best would be to run the build in your local machine, you would see the sequence of the tasks and the tests,  a running example is the best way to go I believe. basically Gulp is a task runner, it runs a series of tasks in the most parallel possible way.  One of those tasks is a plugin that integrates with karma. Running the task 'gulp test' is like running karma from the command line."
angularjs,37otwm,foobar_dev,1 point,Fri May 29 18:13:09 2015 UTC,"I'm with you except for this part...   it runs a series of tasks in the most parallel possible way   I always imagined these task runner tools to run things in linear fashion. So if I'm minifying and concatenating files, that might happen in parallel to the tests running or what? I'm not sure I understand. Can you define what tasks are run in parallel or does it determine this automatically?  Maybe I'm over thinking it :D"
angularjs,37otwm,char27,1 point,Fri May 29 23:08:19 2015 UTC,"One big difference between Gulp and Grunt is that Gulp will run everything in parallel, while Grunt will run things sequentially.  There are a bunch of tasks that can run simultaneously - minify+concat, less/sass compile, copying individual components into a dist directory, running tests, and so on. Gulp takes advantage of that.  The trick is that you do have to specify the ordering. You can set up dependencies, like saying 'concat' requires 'minify', and 'minify' requires 'ng-annotate'. Then they'll run in the correct order. There are also plugins like runSequence that make it easier."
angularjs,37otwm,foobar_dev,1 point,Wed Jun 3 02:18:49 2015 UTC,"I had a crash course session this weekend, spent probably a good day and a half watching videos, reading tutorials, etc about Grunt, Karma, Jasmine, NPM and Bower.  I've actually started integrating these into my workflow at work this week and I'm already seeing some great benefits. So far I've nearly reached feature parity with my previous CodeKit setup. Plus I see the potential to easily surpass it in the near future.  Great tools overall."
angularjs,37otwm,T-rex_with_a_gun,3,Wed Jun 3 03:55:32 2015 UTC,"Karma + Jasmine is still probably the most common choice still. I use these and like them quite a bit. RUN your tests with a task-runner like Gulp/Grunt. Getting them all set up is a bit of a pain though; took me the better part of a day for a 'hello world' test.  I recommend filtering your google results by only stuff from the last month or year. I do the with pretty much all searches about Angular and similar rapidly changing tech.  Thats pretty crappy of Karma to not update that video for that long, but I imagine that the tool hasn't changed too much since.  There are some good recent videos on PluralSight for testing Angular,... the trial membership should be enough to get through 'em.  Personally, testing in Angular, and on the front-end in general, has been somewhat confusing and difficult, but it is rewarding."
angularjs,37otwm,chazzlabs,2,Fri May 29 13:38:12 2015 UTC,A day would be nice. I am thinking more like half a week.
angularjs,37otwm,foobar_dev,1 point,Fri May 29 14:18:32 2015 UTC,I think you'd be surprised. Especially if you follow a tutorial on a fresh project. It only took me a day b/c I was trying to jump into the deep end before learning to swim.
angularjs,37otwm,foobar_dev,1 point,Fri May 29 15:51:27 2015 UTC,"I've been off and on for about a week so far! So far I know how to write Jasmine tests and utilize the stand alone version of Jasmine. I've also scoped out the other tools folks typically recommend (Karma, Grunt/Gulp, Protractor, etc)."
angularjs,37otwm,foobar_dev,1 point,Fri May 29 15:58:35 2015 UTC,Same with me. I had ton of issues with TemplateURL for directive testing
angularjs,37otwm,TheNiXXeD,1 point,Sat May 30 15:01:20 2015 UTC,"Getting them all set up is a bit of a pain though; took me the better part of a day for a 'hello world' test.   Specifically, what did you have issues with when setting up your test configuration?"
angularjs,37otwm,TheNiXXeD,1 point,Fri May 29 15:13:57 2015 UTC,"Ehh.. there were several things. Getting my templates in the template cache, figuring out how to work it in my first ever gulp project, I had angular-mocks and angular-scenario both loaded which apparently conflict with eachother, and I'm sure a few other gotchas. Mostly me being daft I'm sure ;-)"
angularjs,37otwm,Chevex,1 point,Fri May 29 15:46:11 2015 UTC,I'm still a bit shaky on what angular-scenario and angular-mocks actually do. Can you explain?
angularjs,37otwm,lampshadish2,1 point,Fri May 29 16:17:37 2015 UTC,If only I could :). I think angular-scenario is more for End to End tests maybe? I'm not sure even if my tests use or require angular-mocks but I put it in there lol.
angularjs,37otwm,elite_killerX,1 point,Fri May 29 19:48:11 2015 UTC,"Lol, ok. Thanks for the honesty! :D"
angularjs,37otwm,foobar_dev,1 point,Fri May 29 23:10:48 2015 UTC,"Thanks for the detailed response. You can see from my other post that it does appear to be possible to run Jasmine directly from Gulp. Can you explain the ""how and why"" you would still utilize Karma? It seems like a middle man and I don't understand the benefit."
angularjs,37otwm,lampshadish2,1 point,Fri May 29 15:57:23 2015 UTC,"Yea... not super clear on it all myself.. but I think that Karma is required to run your code in a real browser, and gives you more options for test output/feedback?"
angularjs,37otwm,SomeRandomBuddy,1 point,Fri May 29 19:49:54 2015 UTC,"Ahh that makes sense. Yeah I know Karma has extensions for various browsers - Chrome, Firefox, IE, etc, plus can run headless with PhantomJS.  So Karma would give you a great breathe of devices to test on. Got it. Thanks!"
angularjs,37otwm,SomeRandomBuddy,3,Fri May 29 23:13:23 2015 UTC,"Which ever runner you pick, make sure you're actually unit testing. There are a ton of ways to inject multiple real units into your tests making it more of an integration test instead."
angularjs,37pxwh,taijuten,2,Fri May 29 13:56:22 2015 UTC,have you tried using the longer dependency injection syntax? maybe ngAnnotate is getting confused? and can you post your model?  I guess you can also test by returning a regular object in your resolve
angularjs,37pxwh,thruiethruthier,1 point,Fri May 29 14:13:45 2015 UTC,"Thank you, this helped me solve it.  Turns out I wasn't returning a valid object in the resolve."
angularjs,37pxwh,thruiethruthier,1 point,Fri May 29 14:18:21 2015 UTC,Glad I could help
angularjs,37pxwh,vivainio,1 point,Fri May 29 16:57:06 2015 UTC,"Hard earned experience: use strictDi before going to production, to avoid rushing it when you have other urgent stuff to address"
angularjs,37pxwh,gatman02,1 point,Fri May 29 19:04:14 2015 UTC,"One thing bothered me about ui-router was that exceptions that occurred in resolves would not output an error to the console. This can be fixed by adding   yourApp.run([     '$rootScope', '$state', '$stateParams',     function ($rootScope, $state, $stateParams) {         // Attach state variables to rootScope so we can access them         // in controllers.         $rootScope.$state = $state;         $rootScope.$stateParams = $stateParams;         $rootScope.$on('$stateChangeError', function (event, toState, toParams, fromState, fromParams, error) {             throw error;         });     } ]);   to your app.js file. I found this solution as a comment on a ui-router issue."
angularjs,37mztg,ProLoser,1 point,Thu May 28 20:41:37 2015 UTC,This...... this is great.  +1 for ES6
angularjs,37nfj2,Findiglay,6,Thu May 28 22:38:24 2015 UTC,"Your promise is probably still unresolved. You will need to chain .$promise to your method call in your route resolutions.   $resource by default returns the data object that will later be populated, allowing two way binding to kick in. You need the extra step for the promise."
angularjs,37nfj2,takakoshimizu,1 point,Fri May 29 00:45:56 2015 UTC,"You cannot directly access the resource in the controller other than to set it as a scope property or log it to the console. Trying to access any property on the returned object will return undefined. A resource returns a promise object immediately and only fills in the values when the data is returned from the server. You're essentially trying to access a property before it exists. That's why the view can access resource properties but the controller can't. The view has two way binding and automatically updates when the promise resolves while the controller doesn't.   To access properties of the resource in the controller, you have to resolve the promise.   var self = this; info.$promise.then(function(response){   //the promise has been resolved and response is the full object returned from the server with all the properties populated   self.data = response.data; });"
angularjs,37nfj2,rsh412,1 point,Fri May 29 03:58:55 2015 UTC,this.getInfo = function () { return User.get().$promise;}
angularjs,37m8oq,mchandleraz,1 point,Thu May 28 17:30:11 2015 UTC,"I did this course this week and can recommend it: http://www.pluralsight.com/courses/angular-best-practices  Take a look through the other angular PluralSight courses. I like to recommend the Line of Business Applications course as I am still using the design patterns she teaches in it, and she uses the controllerAs pattern throughout, so it should be just what you're looking for."
angularjs,37m8oq,nirgle,0,Thu May 28 23:38:28 2015 UTC,"This isn't a course, but Todd Motto has a lot of great information on some best practices: http://toddmotto.com/"
angularjs,37lx28,chronixlol,4,Thu May 28 16:09:16 2015 UTC,"Don't put business logic inside a directive, instead, inject a service containing the logic inside your directive.  For example, for the authentication, you could have a Auth service, and you could interact with it through the Auth.logIn(username, password) method within your LoginForm directive.  I personally made the choice to use exclusively directives in my AngularJS application to enforce the isolation and the roles between all my components.  You can easily decompose an application into a tree of directives, starting with the App directive for example.  I usually use 3 kinds of directives :   ""dumb directive"", they're usually stateless and highly reusable, for example a SearchInput ""smart directives"", they're more focused and can contains dumb and other smart directives, for example a TodoList, which contains TodoItems ""screen directives"", as the name suggest, they are the routables ones, they gather the other directives and act as the full (or partial with sub-routes) screen you actually see when you hit a link in your application, for example your LoginScreen, which could contain a LoginForm.   Here is an article on the component pattern with Angular : http://teropa.info/blog/2014/10/24/how-ive-improved-my-angular-apps-by-banning-ng-controller.html"
angularjs,37lx28,_jgx_,1 point,Thu May 28 19:31:38 2015 UTC,Reusable smallish components and plugin integration.
angularjs,37lx28,kuroiryu,1 point,Thu May 28 17:01:58 2015 UTC,"Everything! (except what should go in a service)  Moving towards directive-based design and development is going to bring you much closer to the new web standards which are heavily based around components. Look at Angular 2 and Polymer to be two bigger players in this space over the next year or two. Also, watch this: https://www.youtube.com/watch?v=dF_ObGgzGE8"
angularjs,37lx28,meandev,1 point,Thu May 28 22:31:19 2015 UTC,"They should be kept small and reusable. For the most part, you want it to be anything requiring custom DOM manipulation. Something like a form doesn't really require a directive because a standard form doesn't need any custom functionality. In your example though of a form and authorization, the form would be the directive (assuming you're doing something custom) and authorization would most likely go in a service which can be injected into a directive if necessary.   I'll give you a real life example that I recently made. We were using jQuery solely for a date picker which seemed like a huge waste. I developed a directive to implement a custom date picker that uses native JavaScript, Angular functions and Angular's jQLite only so we could get rid of the jQuery dependency. The directive is concerned solely with creating, showing, hiding and manipulating (for example, changing months) the date picker. I have a separate Calendar service which handles the actual logic of creating the dates which I inject into the directive. Not all directive have to be complicated or even DOM elements though. You can also create directives that act as attributes on existing elements. For example, I have a directive that will turn off scroll wheel events on number inputs so that scrolling while its focused doesn't cause the number to go up and down. Hopefully that might give you a better idea of how to use a directive in a real app.   TLDR: if you find yourself wanting to manipulate the DOM through Javascript, use a directive."
angularjs,37lx28,rsh412,1 point,Thu May 28 22:40:23 2015 UTC,Visual elements and code related to visual elements (non primitive of course). Non visual elements should be a service/factory. There's some exceptions.  Just my distilled opinion.
angularjs,37lx28,invalid_dictorian,0,Sun May 31 06:35:30 2015 UTC,"for component based app. better directive, better app:)"
angularjs,37l76m,jasonrichardsmith,9,Thu May 28 13:00:39 2015 UTC,"Come on people, stop releasing things without a working demo.  If you can't even take the time to give me an example of your project running, why would I take the time to look at it?"
angularjs,37l76m,hatestheinternet,0,Thu May 28 17:43:47 2015 UTC,"Sadly, I can only upvote this comment once."
angularjs,37l76m,SpikeBolt,0,Thu May 28 20:20:19 2015 UTC,"I have really been working hard on this project for a while, and I understand the importance of a demo, but it was all done on my own time.  No one subsidized this project. And to be truthful this wasn't about an admin interface.  The truth is, the admin interface is crap, but it is so easy to build a new one however you want. My demo is the install process and the infrastructure, not your ability to click around on an admin UI. To be honest my AngularJs code is only 200 lines long.  I would prefer you were critical of that, and not my ability to spend my free time making this easily accessible to you."
angularjs,37l76m,fleshintogear,-1,Sat May 30 00:38:51 2015 UTC,"cuz, mongo in the name brah"
angularjs,37k1si,saily007,1 point,Thu May 28 04:51:54 2015 UTC,This one is a cheap paid plugin I use for images... great cropper / editor built with Fabric.js / Angular: http://codecanyon.net/item/pixie-image-editor/10721475   How to integrate into your app (hard to find the link on that page): http://pixie-integrate.vebto.com/
angularjs,37lp9k,AjitSingh1313,7,Thu May 28 15:14:41 2015 UTC,"For instance you are on a single page application and you start browsing for details such as about the company, services provided by the company, etc., you will experience that whenever you click a button you are getting scrolled upwards/downwards on the same page instead of getting redirected to a new page.   Sounds like the author is confusing SPAs with single page scrolling sites. That's not the same thing at all."
angularjs,37lp9k,dead-fish,1 point,Thu May 28 21:32:13 2015 UTC,http://en.wikipedia.org/wiki/Single-page_application
angularjs,37lp9k,autowikibot,1 point,Fri May 29 06:55:44 2015 UTC,"Single-page application:  NSFW ?      A single-page application (SPA), is a web application or web site that fits on a single web page with the goal of providing a more fluid user experience akin to a desktop application. In a SPA, either all necessary code – HTML, JavaScript, and CSS – is retrieved with a single page load,  or the appropriate resources are dynamically loaded and added to the page as necessary, usually in response to user actions. The page does not reload at any point in the process, nor does control transfer to another page, although modern web technologies (such as those included in the HTML5 pushState() API) can provide the perception and navigability of separate logical pages in the application. Interaction with the single page application often involves dynamic communication with the web server behind the scenes.     Interesting: Rialto Toolkit | TiddlyWiki | Chaplin.js   Parent commenter can   delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
angularjs,37lp9k,dead-fish,1 point,Fri May 29 06:55:52 2015 UTC,Where does the wikipedia article mention button clicks causing scrolling upwards or downwards on the page?   That sounds like you're talking about a site like one of these. That's a very different thing from a SPA like an angular or ember app.
angularjs,37guw2,CHRIST_DIED_OF_AIDS,4,Wed May 27 15:15:06 2015 UTC,Plunker's 1.4.x template updated (automatically): http://plnkr.co/edit/tpl:8rFfZljYNl3z1A4LKSL2
angularjs,37guw2,ggoodman,3,Wed May 27 19:15:19 2015 UTC,Does this have any new-router stuff in it or will that come later in 1.5 or 1.6?
angularjs,37guw2,dk01,3,Wed May 27 20:24:07 2015 UTC,"It's looking like the new router will come as its own project, at least for the foreseable future. You'll include it similar to how you'd include ui-router today.  https://github.com/angular/router"
angularjs,37guw2,elprophet,2,Wed May 27 21:23:52 2015 UTC,Oh goody!
angularjs,37guw2,deiwin,1 point,Wed May 27 19:20:27 2015 UTC,nooice https://code.angularjs.org/1.4.0/
angularjs,37guw2,pitne,1 point,Wed May 27 18:33:59 2015 UTC,I'm confused. Is this still an rc build?
angularjs,37guw2,trunked,1 point,Wed May 27 20:01:46 2015 UTC,Seems like no.
angularjs,37guw2,IxD,1 point,Wed May 27 20:14:21 2015 UTC,"I don't currently have Angular projects, but all the improvements seem great."
angularjs,37igfk,victorantos2,1 point,Wed May 27 21:38:52 2015 UTC,Like Gmail?
angularjs,37igfk,MeanOfPhidias,1 point,Thu May 28 13:52:23 2015 UTC,Is gmail built with ng?
angularjs,37igfk,yaix,1 point,Thu May 28 15:52:32 2015 UTC,I don't think so
angularjs,37igfk,Have_you_tried_this,1 point,Thu May 28 16:12:20 2015 UTC,"yes, Gmail but for jobs"
angularjs,37igfk,jimschubert,1 point,Thu May 28 16:11:42 2015 UTC,That API...
angularjs,37hofx,officehax,4,Wed May 27 18:36:34 2015 UTC,I just cat and minify my angularjs code and use angular's DI system instead of that other stuff. Works fine; I feel like the rest may well end up being too much work just for the same results.
angularjs,37hofx,pfooti,1 point,Wed May 27 19:45:37 2015 UTC,Yeah works better for most situations. Main app is mostly larger than any stuff it will require after it anyways
angularjs,37hofx,Martinspire,1 point,Wed May 27 19:53:15 2015 UTC,"Yeah, the only tricky bit is making sure that you declare modules before you use them. I do that by convention - I put each module in its own directory, and always put the module declaration call - angular.module('this.thing', []) in module.js. Then in other files, I can say angular.module('this.thing').controller... and am fine. My build process (which uses gulp) orders the files so that all the module.js files are first in the resultant concatenated file. So I don't get any of that no-such-module stuff that causes headaches."
angularjs,37hofx,pfooti,1 point,Fri May 29 00:28:45 2015 UTC,"Jup, ditto. Setting it up properly is important. Re-use of a good setup makes every new project much easier"
angularjs,37hofx,Martinspire,3,Fri May 29 08:04:22 2015 UTC,"Helps for module management without having to ever manually enter (read: mistype, refactor, maintain, etc.) module definitions.  export default angular.module('your.directives.someDirective', [])   .directive('someDirective', someDirective);   Then when you want to include that directive (or factory, service, etc.) somewhere:  import { name as SomeDirectiveModule } from 'your-directives-some-directive';  export default angular.module('your.directives.anotherDirective', [   SomeDirectiveModule ])   .directive('anotherDirective', anotherDirective);   You don't get the full benefits of reusability with Angular 1.0 because of its outdated module system, but it is still useful to use a loader of some sort."
angularjs,37hofx,zuko_,2,Wed May 27 20:17:51 2015 UTC,"one of the goals is to solve dependency hell in the browser, like supporting multiple versions of a library. but in practice if libraries use globals or don't have noConflict mode its not that much of a difference because the support for mutiple versions is lost.   Browserify seems a bit better, there is no single file with a bunch of dependencies, we just point to the entry script and it build the dependency tree.  I think its fine now to just concat and use modules, and use things like ocLazyLoad only if script volume becomes an issue. lazy loading is one of selling points of webpack AFIK, but depending on the app it might not be as critical.  Probably jspm will change things in a while once the use of ES6 becomes more frequent but for the moment, i would keep doing it like that unless there is a compelling reason. Browserify seems to be better supported, the angular team recently published angular in npm with useful exports, to make it easier to browserify it"
angularjs,37hofx,mrv1234,2,Wed May 27 23:12:36 2015 UTC,I love abstracting my angular modules using browserify. Lets you have one file to see all of your injector options and makes the rest of your files lightweight. Example: https://github.com/travisbloom/highscore/blob/master/src/app.js
angularjs,37hei6,BradChesney79,3,Wed May 27 17:29:53 2015 UTC,The new Angular 2 router will let you use components of different angular versions.  The upgrade path is to stay with a stable release and upgrade 1.x until 2.0 is ready for production.  There was even talk of the Angular team working with UI-router to create a good upgrade path to the new angular router in 2.0.
angularjs,37hei6,emackn,3,Thu May 28 01:11:44 2015 UTC,"Yes, the new Angular router works with both 1.4+ and 2.x. You can route parts of your 1.x app to Angular 2 components, for example. Brian Ford talked about it at ng-conf: https://www.youtube.com/watch?v=vecg70fPDFw"
angularjs,37hei6,teropa,3,Thu May 28 02:29:37 2015 UTC,"It was pulled out of 1.4, scheduled for 1.5, unfortunately."
angularjs,37hei6,vinnl,2,Thu May 28 06:48:13 2015 UTC,Still says 1.4 will be supported here: https://github.com/angular/router
angularjs,37hei6,teropa,1 point,Fri May 29 02:03:36 2015 UTC,"They probably didn't get around to updating that, since http://angularjs.blogspot.com/2015/05/angular-140-jaracimrman-existence.html   There were two features that were pulled out of the 1.4 release. The component helper (#10007) and the component oriented hierarchical router. The main reason for this decision was that both of these deliverables were not ready for the important task of simplifying the migration path from Angular 1 to Angular 2. Rather than delay the 1.4 release further, we decided to move these two deliverables into the 1.5 release."
angularjs,37hei6,vinnl,2,Fri May 29 19:45:11 2015 UTC,"They've said that there will be an ""upgrade path"", but afaik its not available yet. From what I've heard some 2.0 components will be compatible with 1.3 (e.g. the new router or the new i18n)."
angularjs,37hei6,AlGoreBestGore,2,Wed May 27 18:44:39 2015 UTC,"1.4, they'll be in 1.5"
angularjs,37hei6,dk01,0,Wed May 27 22:37:13 2015 UTC,Its still in 1.4.
angularjs,37hei6,AlGoreBestGore,2,Thu May 28 03:58:16 2015 UTC,"I think the idea right now is you won't be able to utilize them in parallel like you describe. But rather they want a clear cut path for migrating from one to the other. That path is still in the process of being established.  If you worried about the change in semantics and such, I recommend reading up on Jonn Papa's style guidelines. Continuing to use the latest 1.x release (1.4 just dropped today!). As well as looking into the new routing and animation modules.  That should give you a good head start from v1 to v2"
angularjs,37hei6,grimdeath,2,Thu May 28 06:37:11 2015 UTC,"Yes, but not yet: in 1.5 they will ship a new router that will allow you to pick, per component, which version of Angular to use. This way, you can start coding in 1.X now, and then piece by piece upgrade to Angular 2.X."
angularjs,37hei6,vinnl,1 point,Wed May 27 18:46:25 2015 UTC,I made this decision recently and I realized that 2.0 probably won't be stable enough (edit: and supported enough)  for a couple years and so since I'm doing something now that needs to work I don't really have any choice but to go with 1.3. If 2.0 is that amazing I'll just rewrite it or use it on a future project.
angularjs,37iuw1,mrv1234,2,Wed May 27 23:15:16 2015 UTC,"You know, for all the dread about 1.x and breaking changes in 2 they do seem to have a good grasp of the pain points in angular 1.x and the advantages of other frameworks and a good plan to resolve them."
angularjs,37iuw1,michaelstripe,1 point,Thu May 28 14:39:49 2015 UTC,"in the Javascript runtime, everything is patcheable by design - we can change the Number class if we need Angular at startup will patch all points of asynchronous interaction:   timeouts Ajax requests browser events Websockets, etc.    pls no."
angularjs,37iuw1,Hostilian,1 point,Thu May 28 14:44:00 2015 UTC,"This is apparently how Angular 1 works, Angular 2 will be based on the same mechanism. The creators of the framework call it ""open heart surgery in the browser"" :-) seems about right :-)"
angularjs,37iuw1,Hostilian,1 point,Thu May 28 14:57:22 2015 UTC,"Can you point at any examples of where Angular 1 does this? It provides wrapped alternatives to some browser constructs, but I can't think of any place where it overwrites native object functionality."
angularjs,37ikjq,m0ngr31,1 point,Wed May 27 22:05:59 2015 UTC,"This would be fairly simple to do, here is a plunk showing a concept: http://plnkr.co/edit/p0eZSQEMW8b1mLjgM2VX?p=preview  What is does is keep track of the elements that have been stuck to the top of the viewport in a service, so that it is simply and easily available to all instances of the directive.  This service is used to determine the offset from the top of the screen when sticking elements. Would be simple to apply similar logic to the scroll checks, so that elements stick when passing stuck elements, rather than when they go off the top of the viewport."
angularjs,37ftix,Capaj,7,Wed May 27 09:08:36 2015 UTC,"Via the docs:   Call this method to enable/disable various debug runtime information in the compiler such as adding binding information and a reference to the current scope on to DOM elements. If enabled, the compiler will add the following to DOM elements that have been bound to the scope  ng-binding CSS class $binding data property containing an array of the binding expressions You may want to disable this in production for a significant performance boost. See Disabling Debug Data for more.   My question is, why the heck is this enabled by default then?"
angularjs,37ftix,AlGoreBestGore,1 point,Wed May 27 16:32:32 2015 UTC,"Disabling debug info will break the angular.element scope() method, which some apps may rely on. So I guess doing it by default would have been too much of a breaking change when this was introduced in 1.3."
angularjs,37ftix,teropa,3,Fri May 29 02:35:57 2015 UTC,$compileProvider.debugInfoEnabled(location.host.match(/some pattern to match the environment you want to debug yo/))
angularjs,37ftix,Karmafia,3,Wed May 27 15:05:31 2015 UTC,"hmm, this implies that debugInfo is enabled by default?"
angularjs,37ftix,evanlec,2,Wed May 27 15:33:37 2015 UTC,Unfortunately yes
angularjs,37ftix,guywithalamename,2,Wed May 27 17:12:19 2015 UTC,What does it do?
angularjs,37ftix,starfeeder,0,Wed May 27 15:09:21 2015 UTC,"If you incorporate this in your app, your tooling and workflow is... weird."
angularjs,37ftix,YodaLoL,2,Wed May 27 16:32:02 2015 UTC,I am using JSPM. The workflow and minification is trully a breeze. I don't ever want to replace strings and do other sorts of brute black magic in my build process ever again.
angularjs,37ftix,YodaLoL,1 point,Wed May 27 17:43:46 2015 UTC,I find having code like this in production very ugly (not to mention the deficiency in determining app environment by looking at the hostname).
angularjs,37ftix,slccsoccer28,1 point,Wed May 27 18:38:01 2015 UTC,But then I have to have a backend!!!!!!!
angularjs,37ftix,elprophet,-17,Wed May 27 17:29:16 2015 UTC,"Sorry, some of us develop using real hostnames in our local environments."
angularjs,37ftix,yaix,11,Wed May 27 10:33:23 2015 UTC,"And some don't.  Even if you use something like ""dev.example.com"" for local development, you can still check for the ""dev."" part instead of localhost."
angularjs,37ftix,e82,6,Wed May 27 10:52:01 2015 UTC,and you can change localhost to be your dev hostname.
angularjs,37ftix,one800higgins,5,Wed May 27 11:35:15 2015 UTC,"Shhh, that's some advanced shit right there."
angularjs,37ftix,elprophet,0,Wed May 27 13:03:05 2015 UTC,"On a team, that's going to cause problems. Please don't hard code host names into client-side code."
angularjs,37ftix,elprophet,1 point,Wed May 27 14:44:36 2015 UTC,"Ok, on the team put that regex in the config and then use that for the check. Acceptable?"
angularjs,37ftix,bowersbros,1 point,Thu May 28 06:44:18 2015 UTC,"Closer - I'd argue for a more robust environment toggle based on build-side environment flags, or alternative have the index set a cookie indicating the environment that drives the logging level."
angularjs,37ftix,allensunbo,1 point,Thu May 28 10:14:33 2015 UTC,"Or, since it's a regular expression, simply match whatever your local environments will be"
angularjs,37ftix,ecancil,5,Wed May 27 17:38:07 2015 UTC,"never note this before, nice tip! @elprophet, in that case, you can change localhost to your actual env."
angularjs,37hvjw,laggingreflex,3,Wed May 27 19:23:40 2015 UTC,"Try: ""angular 2"" templateurl"
angularjs,37hvjw,RedditSchloer,2,Thu May 28 02:16:04 2015 UTC,Exactly. Read this and level up your google skills: https://support.google.com/websearch/answer/2466433?p=adv_operators&hl=en&rd=1
angularjs,37hvjw,jameswyse,2,Thu May 28 16:31:20 2015 UTC,"Given that it is still being worked on and isn't production ready yet, is that a surprise?"
angularjs,37hvjw,aaaqqq,2,Wed May 27 19:31:21 2015 UTC,Even in the future any Angular 2 search will be polluted with just Angular results. Similar effect can be seen with bootstrap 3
angularjs,37hvjw,mrv1234,2,Wed May 27 19:57:22 2015 UTC,"Have a look at this curated list of learning material, its being kept up to date -> https://github.com/timjacobi/angular2-education"
angularjs,37hwuj,VelourFog10,1 point,Wed May 27 19:32:28 2015 UTC,Updated again. Now has TypeScript!
angularjs,37iurr,compNerd0101,2,Wed May 27 23:14:24 2015 UTC,"If you need to get up to speed on the basics of Angular, try Angular Fundamentals in 60-ish Minutes on YouTube.   Here's an Angular recipe for getting JSON data. Angular's built in $http module will handle AJAX requests nicely. Alternatively, you can build a $resource which abstracts away even the $http methods, but they're best for interacting with APIs. Using a $resource to hit a single endpoint is arguably overkill.   If you're building a scatter plot, you may be interested in the D3 library. Here's an example of a D3 scatter plot. The library works nicely alongside Angular."
angularjs,37iurr,rsh412,1 point,Thu May 28 04:17:23 2015 UTC,you're the king
angularjs,37iurr,vitriolic_amalgamati,1 point,Thu May 28 15:07:32 2015 UTC,"well to start.. you should use a service to retrieve data like json. Directives are supposed to be really just for DOM manipulation. controllers are best for just getting the data from your json through the service (typically you'd inject the dependency into it) and pass it into scope so the data can be displayed in your view through data-binding. no business logic should be in your controller, should keep that mostly in your service"
angularjs,37iurr,Malaray,1 point,Thu May 28 00:06:26 2015 UTC,"I didn't mean directive in the programming sense. More of in the literal sense as in I was given the task to do that. And, kind of just reiterating, I am very unfamiliar with keywords such as dependency injection, data-binding, etc...just to kind of give a little insight to where I'm coming from. I know nothing but Java, C++, and Python. This task seems extremely basic though, even if one doesn't have any javascript knowledge. Could you help?"
angularjs,37iurr,parronator,1 point,Thu May 28 00:28:34 2015 UTC,Angular has a tutorial on their homepage which goes through the things you described hands-on and provides documentation for further digging.  https://docs.angularjs.org/tutorial  Could this be of any use?
angularjs,37iurr,Have_you_tried_this,1 point,Thu May 28 07:54:54 2015 UTC,yes. thank you greatly
angularjs,37gw4y,ratking11,3,Wed May 27 15:23:53 2015 UTC,"Instead of chaining the expressions in the HTML, you should perhaps write a service or filter to do it. For some of my projects I use a service as I need to do paging and other manipulation after filtering. Here's this snippet: (dependencies are lodash and angular-filter)  function filterList(objectArrayToSearch, searchProperties, searchQuery, searchQueryDelimiter) {     var filterBy = $filter('filterBy');     var delimiter = searchQueryDelimiter || ' ';     var hasSearchTerm = !_.isUndefined(searchQuery);     var hasSearchProperties = !_.isUndefined(searchProperties) && !_.isEmpty(searchProperties);     var searchTerms = hasSearchTerm ? searchQuery.split(delimiter) : [];     var stringKeys = [];     var list = objectArrayToSearch;      // Bail out if there is no work to do     if (!hasSearchTerm || _.isEmpty(list)) {         return objectArrayToSearch;     }      stringKeys = hasSearchProperties ? searchProperties : _.keysIn(_.first(list));      // use the terms as an AND filter     _.forEach(searchTerms, function (searchTerm) {         list = filterBy(list, stringKeys, searchTerm);     });      return list; }   // Edit for code formatting"
angularjs,37gw4y,Canlador,1 point,Wed May 27 18:30:50 2015 UTC,Very nice! Thank you!
angularjs,37ca8c,teropa,9,Tue May 26 15:58:56 2015 UTC,"I'm sure my opinion of this will change over time and with more use, but I find this extremely hideous and overcomplicated. It's going to take a lot of getting used to, and I'm not sure I see the benefit."
angularjs,37ca8c,roboguy12,6,Tue May 26 16:51:06 2015 UTC,"Frankly, Angular2 looks just plain retarded."
angularjs,37ca8c,gregersriddare,1 point,Tue May 26 18:38:15 2015 UTC,"Everything is well motivated though. And they really take SoC and patterns seriously, which I like. But yeah it does look intimidating."
angularjs,37ca8c,YodaLoL,0,Tue May 26 19:47:44 2015 UTC,"I can't fully agree with that. Angular 1 is a perfect library for achieving certain things. Just like other libraries excel at others.  However, Angular 2 just looks like a Frankenstein's monster where they are trying too hard at being something they can't really achieve with the current state of Javascript.  I honestly think Javascript is a shitty language for this (and a lot of other things (I want types, classes and neat inheritance dammit!).)  I'm sorry if I'm ranting, I'm drunk, frustrated and writing from mobile."
angularjs,37ca8c,gregersriddare,3,Tue May 26 20:07:38 2015 UTC,"Sure, but Angular 2 is meant to be written in ES6/TS though."
angularjs,37ca8c,YodaLoL,1 point,Tue May 26 20:15:43 2015 UTC,Checkout aurealia
angularjs,37ca8c,utuxia,0,Tue May 26 21:08:22 2015 UTC,Checkout aurealia
angularjs,37ca8c,utuxia,1 point,Tue May 26 21:08:19 2015 UTC,"Aside from being written in ES6/ES7, this really is no different than angular 1.x. If I were going to move to a different framework, it'd likely be react at this point; I don't see a lot if sense in moving from angular 1.x to this.   That being said, I kind of wish I discovered this first because it looks a lot nicer."
angularjs,37ca8c,roboguy12,1 point,Tue May 26 21:40:37 2015 UTC,except react isn't a framework.
angularjs,37ca8c,utuxia,1 point,Tue May 26 22:11:05 2015 UTC,"Pretty bad argument, as the ecosystem and development culture around React has more than enough to be considered a ""framework"" at this point."
angularjs,37ca8c,dmackerman,2,Wed May 27 00:42:21 2015 UTC,"enough to be considered a ""framework"" at this point.   React is not a framework since it's only the view but there are frameworks that use it: Flux Official Site, Flux Comparision, RefluxJS, Fluxxor, Flummox, Marty, McFly, Alt, DeLorean, Fluxible, Dispatchr, Fetchr, to name a few"
angularjs,37ca8c,gdi2290,-1,Thu May 28 04:43:54 2015 UTC,"It's very much non-intuitive. I'm quite proficient in angular 1.x, yet I  cannot understand anything about 2.x so far just by looking at it, that's pretty terrible.   Why was there a need to change so much of the syntax? I can't see any good reasons why EVERYTHING needed to change. It's confusing and makes me want to go to React as it's much easier to understand and use from a quick glance."
angularjs,37ca8c,hatestheinternet,0,Tue May 26 21:37:15 2015 UTC,What don't you understand? The templating syntax? It takes like 5 minutes to learn.
angularjs,37ca8c,YodaLoL,6,Tue May 26 21:56:22 2015 UTC,"Our main design goal was to make templates more explicit, so the developer can reason about the template without knowing what directives are used there, and how they work.   I think this is the main point. The syntax lets you understand how the data flows in and out of the component without looking at the directive's source. This is similar to having explicit type annotations (TypeScript). Some people think it's ugly and pointless, others find the additional information invaluable. Both also enable more advanced tooling."
angularjs,37ca8c,icholy,5,Tue May 26 20:24:13 2015 UTC,"god that is ugly.   Our main design goal was to make templates more explicit, so the developer can reason about the template without knowing what directives are used there, and how they work.   I mean, I understand that, but why not go with a completely different template engine setup, rather than this horrid html/template mix abomination.  I have no problem with what they are doing. I just think they are doing it terribly."
angularjs,37ca8c,Vultatio,2,Wed May 27 00:11:47 2015 UTC,This is not much different than what I saw angular 1.x for the first time. Just get used to it and keep learning:)
angularjs,37ca8c,allensunbo,1 point,Wed May 27 10:58:59 2015 UTC,"The syntax does look over-complicated and appalling. But I remember people saying the same thing about React and (more specifically) JSX when it was just released, and now look at its reputation. So I guess time will tell if Angular 2 is a step in the right direction."
angularjs,37b9r4,kumarmax,5,Tue May 26 10:32:44 2015 UTC,The maintainer of that module has no idea what he's doing. It does its job though.
angularjs,37b9r4,YodaLoL,2,Tue May 26 18:12:25 2015 UTC,"How come?   By the way, I use this all the time. Would recommend."
angularjs,37b9r4,Aedan91,5,Tue May 26 22:43:01 2015 UTC,"this.toast = {     type: params.type,     title: params.title,     body: params.body,     timeout: params.timeout,     bodyOutputType: params.bodyOutputType,     clickHandler: params.clickHandler,     showCloseButton: params.showCloseButton,     uid: params.toastId };    As an example. Know of any simple commands that you could extend that object with?"
angularjs,37b9r4,Lazarus-Long,1 point,Wed May 27 00:49:21 2015 UTC,"Oh if I only got a dollar every time I see this. Seriously, if you don't extend objects yet, you should start today."
angularjs,37b9r4,Capaj,3,Wed May 27 06:45:27 2015 UTC,"A few examples I found;  https://github.com/jirikavi/AngularJS-Toaster/commit/1f6768673389e6e4eed39cdde0b9e803b2660222#diff-7eb31b0868a499f8e6ad2d31453b7181L2  https://github.com/jirikavi/AngularJS-Toaster/commit/ac3a2267e869933a07edd147766e977db27ab6d9#commitcomment-10411868  https://github.com/jirikavi/AngularJS-Toaster/commit/22af7f63975ffce934b2be38ac13d1a91247c2d2#commitcomment-7921826  And then just look through the code and issues and you'll find lots of stuff. I have used it before and while it works, don't really count on it (might wanna fork it)."
angularjs,37fp8h,ericdale121,4,Wed May 27 08:06:57 2015 UTC,This such a superficial comparison.
angularjs,37fp8h,placidified,2,Wed May 27 08:38:37 2015 UTC,To the point of making the reader stupider after reading it.
angularjs,37fp8h,filterspam,1 point,Wed May 27 08:54:40 2015 UTC,"I think this comparison is better: http://angularjs-emberjs-compare.bguiz.com/  ... I'm the author, so may be a little biased!"
angularjs,37fp8h,bguiz,1 point,Wed May 27 11:29:42 2015 UTC,"Is this a joke?  In a comparison table you don't use the other library as a reference point,  this is s terrible read and not even close to being as in depth as it should be"
angularjs,37fp8h,bbrink68,0,Wed May 27 12:28:09 2015 UTC,"Sorry mate, do you have any good tutorials or comparisons for these frameworks? I found some on SERPs but if you have anything specific, do let me know."
angularjs,37b0l1,cynicalreason,4,Tue May 26 08:25:47 2015 UTC,There are no Interfaces in JavaScript. What you did is actually not an Interface but some kind of prototypical inheritance. I think you can use ngResource to do what you want.
angularjs,37b0l1,gsans,2,Tue May 26 12:40:45 2015 UTC,"I try to rely on $resource as much as possible.  It provides similar behavior out of the box without all the extra code.  var Model = $resource(BASE_URL + '/models/:id', {     id:'@id'   }, {     update: { method:'PUT'},     queryOpen: { method: 'GET', params: { status: 'open', after: '2015-03-16' }}   });  // later on...  // Request URL: /api/service/models?after=2015-03-16&status=open // Request Method: GET $scope.open = Model.queryOpen();  // Instance methods also Model.prototype.close = function() {   this.status = 'closed';   return Model.update({     id: this.id   }, this); };  // later on... $scope.model = Model.get({id: 45 });  // little bit later on ... // Request URL: /api/service/models/45 // Request Method: PUT // Request Body: { //      ""title"":""title 1"", //      ""id"":45, //      ""status"":""closed"" //  } $scope.model.close();   This is a small example but it shows how to get beyond your basic CRUD calls."
angularjs,37b0l1,cforres,1 point,Tue May 26 13:17:12 2015 UTC,Before finding the snippets above I didn't really understand how java inheritance works. Now that I know I never thought of extending the $resource with my own methods like in your code.  I do really enjoy the angularjs community and I can honestly say I've learned a lot through resources & articles posted here.
angularjs,37b0l1,liquid_cow,0,Wed May 27 06:15:22 2015 UTC,I would also recommend using ngResource over $http as much as possible.  ngResource is quickly becoming the go to standard for restful crud in angular.   I also like ngResource because it promotes the usage of promises over callbacks.
angularjs,37b0l1,budmademewiser,1 point,Tue May 26 15:40:06 2015 UTC,"This is not true, most experienced angular developers find that ngResource unnecessarily abstracts out the $http service. ngResource takes a lot of control away from the programmer.   It's actually been a reoccurring problem in the angular community. A lot of developers new to angular encounter this problem pretty early on and find themselves googling ngResource vs $http.  A lot of new angular developers start out with ngResource because of comments like this and similar blog posts.  Best practice currently in the angular community, and IMO, is to use a combination of the $http and $q services. Use $q's defer promise pattern in conjunction with the angular's $http service."
angularjs,37b0l1,liquid_cow,0,Tue May 26 16:20:16 2015 UTC,"Thanks /u/budmademewiser, you really made me think about this issue.  I'd agree that ngResource probably isn't the best option for a new angular developer, because of the extra abstraction that hides what's going on underneath. For new guys who are just getting started, $http will serve perfectly without the learning of to use ngResource. Adding ngResource's learning curve to the already daunting learning curve for angular won't do the angular community any good.  Having said that; for larger projects, the $http requests tend to get buried and abstracted away into services anyway. Furthermore, with multiple developers, each tailor-made $http request looks a little bit different to the next.   On the other hand, ngResource provides a neatly packaged resource that can be treated like a service for dependency injection.  In my experience, ngResource code tends to be minimal and consistent in usage.  I value consistency in code, even if the code is bad, because I think it makes it easier for another developer to pick up and work with at a later stage in the project's life.  At the end of the day, I'd say that choosing between ngResource and $http is decision that the developers need to take depending on the type of application they're building, and then stick with it for the remainder of the project. Mixing ngResource and $http would make the project difficult to maintain in the long run?  tl;dr  I think that ngResource provides the right balance of consistency of code, with minimal boiler-plate code, at the expense of some abstraction."
angularjs,37b0l1,Have_you_tried_this,1 point,Tue May 26 18:17:39 2015 UTC,"You certainly can use ngResource, this is more of a 'you can do things like this'  I went into angular with too little knowledge of Javascript and I realize know that I was missing out on a lot. I think there are a lot of people here that kinda did the same. I hope these little snippets of code will give others a 'ah .. i get it now' moment like they gave me."
angularjs,37b0l1,Have_you_tried_this,2,Wed May 27 06:11:12 2015 UTC,Just thought of this - everytime you use create a new ICustomFactory will be instantiated in CustomFactory.  So say you have CustomFactory used in ControllerA instantiated as above ( using create) and then you have a CustomFactory in ControllerB that you instantiate with different parrameters.  This will change the details of the factory in ControllerA - so ideally you want to use the  create for a factory once.  I'm thinking probably instantiating it in a module's run and then using it as CustomFactory throughout the module
angularjs,37byvn,taijuten,2,Tue May 26 14:37:28 2015 UTC,You could make use of the resolve functionality of UI router or the onEnter callbacks to re-fetch the data on entering your 'app.articles' state.  https://github.com/angular-ui/ui-router/wiki
angularjs,37byvn,liquid_cow,1 point,Tue May 26 15:27:34 2015 UTC,Would something like this still work if create is a sub-state of articles?
angularjs,37byvn,simcptr,3,Tue May 26 15:31:36 2015 UTC,"Here's an idea of what that would look like:  angular.module('articles', [     'app.models.articles',     'articles.create' ])     .config(function($stateProvider) {         $stateProvider             .state('app.articles', {                 url: '/articles',                 views: {                     'posts@': {                         controller: 'ArticlesController as ArtCtrl',                         templateUrl: 'app/posts/articles/list/article-list.tmpl.html'                     },                 },                 resolve: {                     articles: function(ArticlesModel) {                         return ArticlesModel.getArticles();                     }                 }             })     })     .controller('ArticlesController', function ArticlesController($stateParams, articles) {         var ArticlesCtrl = this;          ArticlesCtrl.articles = articles;     });   Notice that the name of the resolve key (""articles"") matches the injected parameter in the controller. UI-Router will ensure that the promise returned by that resolve function is, well, resolved... before it instantiates ArticlesController.  Then, change the way you call $state.go to cause the articles to be reloaded:  $state.go('^', {}, { reload: true });"
angularjs,37byvn,liquid_cow,1 point,Tue May 26 23:58:57 2015 UTC,"Thank you, this really helps. Makes the controller look much cleaner than the other options I've been attempting."
angularjs,37byvn,BoleroDan,2,Wed May 27 07:10:37 2015 UTC,"As far as I'm aware, there's no difference between a sub-state and a normal state other than the hierarchy dependency, i.e. 'app.articles.create' can't exist without 'app.articles'  We've used resolve to do breadcrumbs of states and ui-router state change events like onEnter to do user role validation for the state that they are about to enter. All with state trees 2-3 levels deep."
angularjs,37bujo,onedialectic,1 point,Tue May 26 14:03:51 2015 UTC,There is always Firebase.  It's my new favorite.
angularjs,37bujo,kaceydubs,0,Thu May 28 13:30:56 2015 UTC,"So, how do I go about attaching it to firebase?"
angularjs,37bujo,kaceydubs,1 point,Thu May 28 20:01:00 2015 UTC,Here ya go: https://www.firebase.com/docs  also: http://code.tutsplus.com/courses/real-time-web-apps-with-angularjs-and-firebase
angularjs,37bujo,badcookies,0,Fri May 29 02:20:49 2015 UTC,"It depends on what you want to use for your backend. It looks like it had a few starter templates for asp.net, rails and metor. The rest is up to you"
angularjs,378udt,abyx,4,Mon May 25 20:38:55 2015 UTC,"If we use success() we’ll still have to use then() in every other place that has a promise, which makes this syntax sugar more of a cognitive leak in my opinion than anything useful.   Although I agree with this point, reading this sentence is just very obnoxious.   Second, it couples your code in a subtle way – you’re telling everyone you’re actually reaching to the network to get something.   No, success() is not called when the network isn't reached. error() is.   This means that all users of ProductsService definitely know that getProduct() goes out to the web to get data. What if you later add caching?   Never mind the irrational first sentence. How does success() interfere with caching, which is already supported by $cacheFactory? Or if you're writing your own caching layer on top of $http, $http will still need to use either success()+error(), or then() (take your pick no one is forcing you), and whatever api you expose for caching is your responsibility.  Funny how at the end he says ""what I like to do instead"" and then shows usage of .then() with only one callback. What you don't write for the case of no network connectivity?"
angularjs,378udt,thelurkingdead,3,Tue May 26 08:03:22 2015 UTC,"Seems silly to me; creating a false dichotomy between exposing the network call and not liking the desugaring.  I would simply use  angular.module('app').factory('ProductsService', function($http) {     return {         getProduct: function(id) {             return $http.get('/products').success(function(data,status,headers,config) {                 return data;             });         };     }; });"
angularjs,378udt,eof,3,Tue May 26 11:57:34 2015 UTC,"I also avoid using .success. Primarily, because it makes it a lot harder to stub these calls out when writing tests, as it deviates from the Promise spec.  The tight coupling is also a good point."
angularjs,378udt,drizzlelicious,0,Mon May 25 23:13:18 2015 UTC,Not a problem for programmers who are using services/factories/repositories properly.
angularjs,378udt,yesman_85,2,Tue May 26 04:21:31 2015 UTC,Example showing the difference?
angularjs,3796xv,nlp911,1 point,Mon May 25 22:11:43 2015 UTC,"How is John Resig a leader in AngularJS? I see Misko, Brad, Igor, AngularJS, AngularJSNews, but Substack? I guess Browserify is as important as Angular? I'd say your algo needs quite a bit of tweaking; this finds JS developers focused on the Angular keyword, not Angular developers."
angularjs,3796xv,elprophet,-1,Tue May 26 11:18:26 2015 UTC,I tried to Google but couldn't find anything which explains what their selection & ranking method is. I liked their apache storm feed though. Relevant articles!
angularjs,3796xv,bs2sb,0,Tue May 26 11:38:09 2015 UTC,"Definitely the selection algo needs work. The rankings I'd agree with, given that Twitter is their only data set (eg, I think developers would list Misko and Igor higher than Brad, but Brad tweets more)."
angularjs,3796xv,elprophet,-1,Tue May 26 12:17:43 2015 UTC,interesting. How is 4th twitter handle (NodeJS) with much more followers behind 3rd with just 13K followers? How do you calculate rank & score??
angularjs,377y3f,yarauuta,1 point,Mon May 25 16:49:59 2015 UTC,You could use batarang (Google chrome extension) to visually inspect scopes
angularjs,377y3f,carvefx,1 point,Tue May 26 05:28:35 2015 UTC,It has bugs and requires a reload
angularjs,377y3f,simcptr,1 point,Tue May 26 07:01:09 2015 UTC,"There are some nice console tricks described here: http://blog.ionic.io/angularjs-console/  To summarize:  Access $scope for an element  angular.element('div.your-thing').scope() angular.element('div.your-thing').isolateScope()   Obtain the instance of a service  angular.element('html').injector().get('MyService')   Obtain the controller for a directive  angular.element('some-custom-thing').controller()   Maybe you could use the .scope() trick to find what you're looking for.  The other idea, as badcookies suggested, is to use controllerAs syntax so that it's easier to tell the scopes apart when they're nested. If you haven't used controllerAs yet, Todd Motto has a nice writeup here: http://toddmotto.com/digging-into-angulars-controller-as-syntax/"
angularjs,377y3f,badcookies,0,Wed May 27 00:31:44 2015 UTC,Use controller as syntax and then you declare it
angularjs,377i1i,kingofhawks,4,Mon May 25 14:47:32 2015 UTC,"If you have Mac, Dash."
angularjs,377i1i,YodaLoL,1 point,Mon May 25 15:20:11 2015 UTC,Or Zeal if you're on Windows.
angularjs,377i1i,chazzlabs,1 point,Mon May 25 18:35:32 2015 UTC,"Yes. I have tried Zeal, it is wonderful. Thanks you!"
angularjs,377i1i,BadugiChamp,2,Tue May 26 00:52:36 2015 UTC,You can try http://devdocs.io. I believe it has an offline version
angularjs,377i1i,luxifertran,1 point,Mon May 25 15:18:07 2015 UTC,Great online document browser!
angularjs,377i1i,AncientSwordRage,2,Tue May 26 00:52:10 2015 UTC,You can use devdocs.io.
angularjs,377i1i,poolunion,1 point,Mon May 25 15:19:14 2015 UTC,You need to compile it from .ngdoc files. That's all I know. Never tried it.
angularjs,375oib,victorantos2,1 point,Mon May 25 02:30:40 2015 UTC,anyone interested to work on this open source project?    this is a demo http://angjobs.com/#!/jobs/inbox
angularjs,3733sd,Aesdotjs,2,Sun May 24 12:33:01 2015 UTC,"Whoa, did you build the engine as well? This is really cool. What about Angular helped you with this?"
angularjs,3733sd,dagumak,3,Sun May 24 15:10:28 2015 UTC,"I built the API to interact with the timer db using PHP, the surf server mod is coded in python by a friend of mine.  Angular helped me for almost everything, i can't even imagine how much lines it would had if I'd have used raw php/html/js(even using some MVC php framework like Laravel).  Every single features are really modulable, works smoothly and are rather easy to debug. For example, any wrong request sent to the API result in a 500 http status and an Error object, on the angular side i've an http interceptors which detect if there's an error object and push it to the error service.  Implementing infinite scrolling was also so easy, i felt like everything was easy to code and implement.  Here is the git repo of the front-end git (inb4 its not commented)  Angular is for me one of the best thing that happend to web dev. :D"
angularjs,3733sd,sathoro,2,Sun May 24 15:18:24 2015 UTC,204 isn't a good choice for returning an error
angularjs,3733sd,Bongoalot,1 point,Sun May 24 22:05:32 2015 UTC,"Messed up i use 204 for no content, im on mobile dont have the src close to me but i use 500 for error if i recall"
angularjs,3733sd,Bongoalot,2,Sun May 24 22:39:37 2015 UTC,"Fellow surfer and Angular developer here. I don't plan on looking through the code, but from viewing the website I would first say that the interface is very complicated for a first view. However if I were an avid nightmare surf server user, I probably would get use to the layout quick. But if you are trying to help bring in new players to the surf community or even that specific server, this would deter me instantly. Just from the landing page, I would make the side nav bar a top nav bar underneath the logo/sign in. This should be a fast easy change. I would make all the ""top X"" div's collapsible accordion style and stack them on the right side, and less of a flow layout. make the news feed bigger with the change of the side to top nav bar (should look nice when there is actual content, I would assume it would hold the info that the landing page for the nightmare server has with all the server rules and stuff). Other than that it looks ok aesthetically. Some centering styling needs to be finished. and there are 4 errors in the console. Im viewing in Chrome Version 43.0.2357.65 m with a 1920 X 1080 resolution display. I know this is less angular advice and more bootstrap but I don't have time to traverse 4500 lines of code. Awesome work and keep at it!"
angularjs,3733sd,mbsurfer,1 point,Sun May 24 21:56:26 2015 UTC,"Thanks for the feedbacks, many players asked for the collapsed Tops so i'm gonna do it. for the left side menu I kinda disagree since i have sub menus like maplist which have 400+ entries plus the other widgets in that panel which self refresh and are out of ng-view, idk how I can fit this on a  fixed top navbar.   For the console error, is it the .map thing and font? I have to look at it.  Thanks :)"
angularjs,3733sd,fusionove,1 point,Sun May 24 22:48:29 2015 UTC,"the errors were all GET calls on http://nightmare-surf.com/beta/%7B%7Bcomment.avatarUrl%7D%7D , http://nightmare-surf.com/beta/%7B%7Buser.avatar%7D%7D , and http://nightmare-surf.com/beta/%7B%7Buser.avatarmedium%7D%7D . Only getting 3 of the 4 errors now when i reach your landing page. When you are using <img src=""{{user.avatarmedium}}""/> the front end is performing a GET call using your apps base url and the {{user.avatarmedium}} as the path but there is no value being set for user.avatarmedium etc. Also most users will probably never check console to see these errors. Looks like your .map is taken care of though!"
angularjs,3733sd,s992,1 point,Sun May 24 23:49:22 2015 UTC,"oh thanks, I think I used src instead of ng-src"
angularjs,3733sd,s992,2,Mon May 25 00:58:33 2015 UTC,Great job Aes ;)
angularjs,3733sd,s992,1 point,Sun May 24 22:51:20 2015 UTC,Thanks ;)
angularjs,3753hp,natdm,1 point,Sun May 24 23:19:57 2015 UTC,"The problem is the empty action on the form, with this there it will essentially cause a page reload on submission.  If you are processing the form with a method on the Angular controller, then there is no need for an action attribute.   For this reason, Angular prevents the default action (form submission to the server) unless the <form> element has an action attribute specified. (https://docs.angularjs.org/api/ng/directive/form)"
angularjs,3753hp,willgresham,1 point,Mon May 25 01:22:44 2015 UTC,Amazing - thank you! Simply erasing the form action did it. It was there by default from Emmet.
angularjs,376d8k,var198907,2,Mon May 25 06:34:38 2015 UTC,sudo npm install n -g n stable (or latest)   ... and you have latet version of node. With 'n' you can even switch 'on the fly' node versions installed with it
angularjs,376d8k,nightman,1 point,Mon May 25 08:21:30 2015 UTC,Can I reply to that after I get back home ? I will post the error itself (which is what I should I have done in the first place).
angularjs,376d8k,nightman,2,Mon May 25 08:53:52 2015 UTC,"Yes, please do. Also you can:  sudo npm update -g   ^ this will update all your system global npm packages"
angularjs,376d8k,nightman,1 point,Mon May 25 10:18:05 2015 UTC,https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-an-ubuntu-14-04-server  I followed these steps and its been good so far.
angularjs,376d8k,nightman,1 point,Mon May 25 15:03:00 2015 UTC,I have been able to get everything done except the grunt serve(server) running. It is saying that I need bower. And I did run bower install.Dont know what the problem is now.
angularjs,376d8k,willgresham,1 point,Tue May 26 05:17:30 2015 UTC,I didn't follow above link howerwer make sure you've install bower with npm globally (with -g flag) - http://bower.io/#install-bower
angularjs,36zf76,Urigold,6,Sat May 23 12:47:29 2015 UTC,"To each his own I guess. Some people like putting peanut butter on their hamburgers. Sounds like shit to me, but whatevs."
angularjs,36zf76,utuxia,4,Sat May 23 20:41:01 2015 UTC,MAN stack   ftfy
angularjs,36zf76,7yl4r,1 point,Sat May 23 16:41:20 2015 UTC,"So perhaps today a MEAN stack is more about “The best Angular,  Mongo, and Node stack” than strictly the acronym per se.   If you're going to try and alter the meaning of the acronym, why not go all out and say that it means MEteor ANgular ?"
angularjs,36zf76,jimimimi,1 point,Sun May 24 08:18:56 2015 UTC,So in your opinion the is no reason for people who use the MEAN stack to know about Hapi.js? I think they should know about it as they should know about angular-meteor and then decide what's best for them.  Even if it's not exactly what the acronym say
angularjs,36zf76,jimimimi,1 point,Sat May 30 19:08:18 2015 UTC,"Of course, by all means, I have no beef with the product itself, just with the way you're trying to market it."
angularjs,36zf76,JohnA11,1 point,Mon Jun 1 08:17:14 2015 UTC,"I fail to understand why this has so many negative comments - Meteor gives 3 way data binding without firebase, plus andriod and iso versions, plus Mongo db without mongoose - plus much much more!"
angularjs,36zf76,SomeRandomBuddy,-13,Wed May 27 06:48:44 2015 UTC,"Shit article. Shit idea. Shit combo. The frontend dev world has realized that bidirectional data binding is not infact cool or useful in most cases, which is why Angular 2 has done away with it. Just another sad story of a relatively obscure framework trying to leverage big names to stay relevant. Yawn."
angularjs,36zf76,SomeRandomBuddy,-2,Sat May 23 17:28:43 2015 UTC,"Downvote all you'd like folks. But incase you missed the memo, people are trying to write JavaScript that is LESS dependent on opinionated frameworks. Ie, not use more obscure combinations of them."
angularjs,36zf76,GreySim,12,Sat May 23 19:20:14 2015 UTC,"I haven't voted you one way or the other, but I'm guessing your initial comment isn't being downvoted for the idea, but for the delivery."
angularjs,36zf76,SomeRandomBuddy,1 point,Sat May 23 19:25:27 2015 UTC,I'd say that's pretty damn spot on
angularjs,37063e,cynicalreason,1 point,Sat May 23 17:09:33 2015 UTC,P.S. I would somehow want to avoid LocalStorage / cookie. I would like something that I don't need to inject as a dependency in other factories / services / controllers .. if possible.
angularjs,37063e,dk01,1 point,Sat May 23 17:10:05 2015 UTC,You can use sessions. Then set use restangular to create a service provider for your API. Use   RestangularProvider.setDefaultHttpFields({     withCredentials: true });   Then you just pass in the API service as a dependency to any services that need to make API calls and it'll always use the session when making calls to the API.
angularjs,37063e,dk01,1 point,Sat May 23 18:27:08 2015 UTC,So rather than $http you'd inject Restangular.
angularjs,37063e,vtdev,1 point,Sat May 23 18:27:56 2015 UTC,"the built-in $cacheFactory works quite well imho, nothing extra to load.  in your own factory:  function setCache(authData) {     var auth = $cacheFactory('authObject');     auth.put('authObject', authData); } function fetchCache() {     var authStuff = $cacheFactory.get('authObject').get('authObject');     return authStuff;   }  notice though the funky retrieval syntax: .get().get();  took some serious googling to figure that one out!"
angularjs,3707jp,hackfall,5,Sat May 23 17:22:49 2015 UTC,If you want to use it for a project going into production in the next year I'd use 1.x.
angularjs,3707jp,dk01,6,Sat May 23 18:20:50 2015 UTC,"Angular 2 is not at all close to being final. It's still a work in progress and is not stable enough to build anything that you expect to throw into production. You should play with it if you want to be familiar with the changes it will introduce but, to build anything real at this time, you should use 1.x.  Not great but continuous learning is a part of web development."
angularjs,3707jp,dorioo,3,Sat May 23 18:22:12 2015 UTC,"Angular 2 is in pre-alpha form at the moment and I wouldn't foresee it being officially released until a year or two out. If you're planning to do any sort of production level work, go with 1.x  If you want to prepare for 2.x, follow style guides from folks like John Papa, utilize the 1.4 when it drops, and give the new router a go. They'll prep you for some of the changes."
angularjs,3707jp,grimdeath,3,Sun May 24 03:46:24 2015 UTC,"If you know Angular 1 already, then that's a sank cost, use it. If you do not know it yet, do not waste your time on learning abandoned product (Angular 1). Either go straight to Angular 2 if you are not in a hurry and are ok with betting on a alpha quality software.  Or a better alternative: learn React. It is an amazing library, you will be productive very quickly. And your knowledge will be relevant for a long time, since it is very popular right now and is not going anywhere (API is stable, no breaking changes are expected)."
angularjs,3707jp,vagif,2,Tue May 26 22:53:48 2015 UTC,"Depends on what your goal is. If you want to learn it so you can find a job in a year or so, and you don't mind changing APIs (it's still pre-alpha), and the lack of an ecosystem around it, then use Angular 2.x.  If you want to get a job today, then go with Angular 1.x. It'll still be in demand a year or two from now."
angularjs,3707jp,utuxia,2,Sat May 23 20:43:56 2015 UTC,"The underlying ideas and concepts from 1.x will serve very well in 2.0, they just get some new names. Learn 1.x, put it in production, and focus on writing clean, modular, well-designed code. That will give you the best base to then migrate future projects to 2.0, after it's gotten to a stable point."
angularjs,3707jp,elprophet,2,Sat May 23 23:08:47 2015 UTC,Will there even be a need to migrate to 2.0? The 1.x branch is going to continue to be supported after 2.0 is out. You'll be able to stay on 1.x for a very very long time.
angularjs,3707jp,dbbk,1 point,Sun May 24 17:25:03 2015 UTC,2 isn't out yet other than beta and is unstable.
angularjs,36wf2e,SomeKittens,3,Fri May 22 17:59:27 2015 UTC,"For some reason it stays blank on my iPad Safari. Works on Android Firefox, though."
angularjs,36wf2e,felipelessa,1 point,Sat May 23 01:35:55 2015 UTC,Yup. Same here.
angularjs,36wf2e,shozzlez,2,Sat May 23 11:29:32 2015 UTC,"I really like this and it makes me want to build something in Angular again. I built a used and new car search system in Angular but we found it's not good for SEO in the long run, as our entire site isn't Angular, just those 2 pages."
angularjs,36wf2e,m0okz,2,Fri May 22 21:37:33 2015 UTC,"+1 for  ""Will I be updating the DOM more than I'll be needed the space in my watcher budget?"" for ng-if's Vs. ng-show's. Always knew the technical difference between them, never knew the right question to ask oneself in order to choose one over another."
angularjs,36wvjl,SketchVandal,4,Fri May 22 19:57:55 2015 UTC,"Check out John Papa's style guide. It details best practices that should ease the migration to 2.0. Also, check out (shameless plug) these AngularJS resources. I wrote it to help people learn about Angular 0 to 100, including best practices. I'm actively building a large AngularJS app at inventive.io so I actively update the resources. Other than that, I would recommend just diving in since that's the best way to learn. Also, if you're looking for video tutorials, Egghead has a really great Angular series."
angularjs,36wvjl,__mrwhite__,2,Fri May 22 20:41:06 2015 UTC,"Only thing is, I disagree with easing migration to 2.0  Although yea, this is the best style guide to go with right now, but 2.0 simply involves a ton of ES6 and modularization.  I suggest you look at AirBNB's ES6 styleguide for that as well."
angularjs,36wvjl,Narcicyst,1 point,Fri May 22 21:23:14 2015 UTC,"Great response, thank you.  The AngularJS resources look amazing."
angularjs,36wvjl,gonzofish,2,Fri May 22 20:45:07 2015 UTC,Todd Motto's styleguide is also pretty good. I'm fairly sure they've swapped and merged some ideas.
angularjs,36wvjl,neb636,2,Fri May 22 21:05:27 2015 UTC,I say keep Angular 2.0 in mind but don't worry about it too much. Things are still rapidly changing and it is still very early in its development. For resources egghead.io is great for short in depth videos on a specific topic. If you don't mind paying I cannot recommend pluralsight.com enough. They have many angular courses that are up to date with the current best practices. The directives course in particular is very beneficial. I think they have a free trial if you want to check them out. Well worth the money in my opinion.
angularjs,36wvjl,badcookies,1 point,Sat May 23 18:29:59 2015 UTC,thank you - certainly don't mind paying if the resource is good. Appreciate the recommendation!
angularjs,36ul1k,mostr,14,Fri May 22 06:33:46 2015 UTC,"I've known this for so long now, that I've sort of forgotten that it can nail new people in the ass.  The last one registered with the name wins - which means you have to be mindful about how you name things, or prefix/namespace them.  The other issue that can happen, is once something is defined as a dependency somehow in your app - every other module can use it, even if it was not an explicit dependency.  angular.module('a',['b','c']; angular.module('b',[]).factory('bFactory',function(cFactory) { }); angular.module('c',[]).factory('cFactory',function() { });   When you run your app, module b can access cFactory, even though you never defined it as a module dependency.  However, when writing my unit tests - I'll only do a beforeEach(module('b')) - in which case, the unit test would blow up and fail about not knowing about cFactoryProvider. Helps keep me honest about keeping my module dependencies in check and being mindful about where I'm getting things from, even if when running as an app - that sort of goes out the window."
angularjs,36ul1k,e82,2,Fri May 22 11:38:19 2015 UTC,"It seems there is a global pool of objects for all injections, and that  if we load a module with the same name it gets silently overwritten even if it does something completely different. this is apparently a feature and not a bug and is meant for testing. Have a look at this post -> http://victorsavkin.com/post/102965317996/angular-2-bits-unified-dependency-injection Angular 2 will fix this using hierarchical injectors (it looks like it will be transparent for us)"
angularjs,36ul1k,mrv1234,2,Fri May 22 12:08:22 2015 UTC,"Yeah, I got the impression that the Angular 2 DI seemed to do away with this and can help get towards 'true' modularization.  Went to ng-vegas, and learned quite a few neat things that I've been meaning to do some proof of concept apps with to get my head around it, and also prove to myself that it works the way I think/they say it will."
angularjs,36ul1k,e82,1 point,Fri May 22 12:10:08 2015 UTC,"Regarding tests, see my comment above (reploy to e82) . This is good for testing on one side indeed, but can be dangerous on the other side."
angularjs,36ul1k,one800higgins,2,Fri May 22 12:33:08 2015 UTC,"DI is more for the reusability of modules overall, not just within your app. You define your dependencies so that if you pick up that module and put it anywhere, not just within the same same app, it's self sustaining."
angularjs,36ul1k,e82,2,Fri May 22 12:26:51 2015 UTC,"Just out of curiosity, how did you find out about this? Because I can't find it explicitly stated in docs. I had to be kicked in the ass yesterday by the app itself to start digging and to discover that thing.   Regarding tests, the case you describe is good, but there is another one: in tests you use correct dependency because you load ""only"" modules you need (not all). Tests pass but in the app itself you may end up with completely different dependency being injected because something somewere loaded a module having service with the same name. And this is dangerous I think."
angularjs,36ul1k,BunsOfAluminum,2,Fri May 22 12:30:36 2015 UTC,"Was burned by it once in one of my first larger angular apps. I think I had something like   angular.module('entityTypeOne',[]).factory('reports', function {});   angular.module('entityTypeTwo',[]).factory('reports', function {});   and then got tripped up when I wasn't getting the reports that I expected. Thankfully it was the first case/time I ran into the issue - so was a simple change to be 'ok, entityTypeOneReports, entityTypeTwoReports'  You are right though about my testing approach - it does run the risk of - if someone registered two things with the same name, the unit tests would pass but the in-app behavior may be different.   I could do a 'just load the main module' for all of my tests - which I used to do before I know better, but then you run into the issue of all of the initialization code on every module (in the config/run block) firing off - and ended up in an endless rabbit chase of 'mocking a million things that had nothing to do with my test to get the test to pass'.  It's the lesser of two evils - and I've generally worked on 'single-team' projects, so there has been minimal risk of someone introducing a duplicate name for something and it can be easily avoided. But, by avoiding generic names for things can go along way to avoiding this from being an issue.  If you are using the annotation style syntax (which I'm not a fan of, I'd rather let ngAnnotate deal with that for me), I've seen people do things like  angular.module('users',[]).factory('users.reports',function() { }); angular.module('something',['users'].factory('something.service',['users.reports',function(whateverThisDontMatter) { });   to try and 'namespace' their service names - but rather just stick with camelCase."
angularjs,36ul1k,SomeRandomBuddy,1 point,Fri May 22 12:45:41 2015 UTC,"I had this happen when we had developed a module that had a directive in it for rendering list items specific to that module. Then, in another module, we needed another directive to render list items in a format required by that module. The directives just happened to both get named something way too generic, like ""ListItem"" or something. This was months apart.   We had a hard time figuring out why the list in one module wasn't rendering properly when the directive looked fine. That was when I discovered the naming overlap. I told our contractor to prefix module-specific controllers/services/directives with the module-code from then on."
angularjs,36ul1k,e82,1 point,Fri May 22 12:37:33 2015 UTC,Jasmine saves my ass every time
angularjs,36ul1k,jeeezu,1 point,Fri May 22 17:37:42 2015 UTC,More of a Mocha man myself ;)
angularjs,36ul1k,joesb,1 point,Fri May 22 20:04:33 2015 UTC,"Im new to AngularJs, but isn't there a naming convention (at least they tell you that at codeschool)  to name all service recipes like -    angular.module(""<ModuleName>"")   .factory(""<ServiceName>"", function <ServiceName>Factory(){   });  so you would not run into issues like that.. Maybe I just missunderstood something but if you name your services like that, it's obvious that there will be a problem?"
angularjs,36ul1k,kshitagarbha,1 point,Sat May 23 00:24:28 2015 UTC,"The issue in the article is exactly this problem.  <ServiceName> can clashed with other module, think CacheService or http. Unless you name your service with module prefix like mcCacheService. Which destroys the whole point of having a module."
angularjs,36ul1k,Capaj,3,Sat May 23 03:40:34 2015 UTC,"Well it will be gone soon anyway and we can do this:  import {hello as hello1} from 'thirdParty1'; import {hello as hello2} from 'thirdParty2';   and then just use hello1() hello2() without any DI  You can even do this now if you are using angular 1.4, you are transpiling your ES6 code and if each of the modules exports in the common fashion."
angularjs,36ul1k,elprophet,4,Fri May 22 13:01:11 2015 UTC,"if you are using angular 1.4   Yes, you can use ES6 notation to load files instead of having script tags in html, but to register an injectable, you still have to use angular ""module"" notation. Quite a difference there.  You're right that it might be best to just use filters, controllers and directives because those are the only means how to manipulate the DOM in angular. Services and factories, you really should not use if you have ES6, AMD or CommonJS modules, because it just makes things more difficult.  I'll have to do a writeup about this."
angularjs,36ul1k,Swingline0,2,Fri May 22 14:11:50 2015 UTC,"just use filters, controllers and directives ... Services and factories, you really should not use if you have ES6   That's actually a really good point, and will take developers a long way towards building 1.x apps that easily upgrade to 2.0."
angularjs,36ul1k,chazzlabs,2,Fri May 22 20:08:25 2015 UTC,"We just realized this recently as well. As much as the title sounds click baity, I kind of agree.   The whole module DI concept really leads one to feel like there is a scope provided for all objects but the reality seems that it is more of a global type of situation."
angularjs,36ul1k,RJCP,1 point,Fri May 22 11:07:46 2015 UTC,"My team recently ran into this issue with a couple popular libraries: https://github.com/mgcrea/angular-strap/issues/521  To get around it, we had to tweak our build to rename one of the conflicting components at build time."
angularjs,36ul1k,YodaLoL,1 point,Fri May 22 18:54:17 2015 UTC,"TL;DR: watch out for namespace conflicts, be diligent with namespacing your module's components"
angularjs,36x5rz,ejfitz,2,Fri May 22 21:15:03 2015 UTC,"I've used bassmaster to do API batching. It's pretty reasonable and works kind of out of the box. Furthermore, I wrote this little module here to handle api batching. It gathers up calls to BatchRequest.get over a certain timespan and then sends them off to the backend.  The problem is that then all your responses are as slow as the slowest response (which can be a giant pain to optimize) and you're only really conserving the handshake overhead time on the request. It's probably a lot better (if you're worrying about that kind of stuff) to better optimize your calls in the first place (like having rest methods be optimistic about the extra stuff you'll need and attach that to their responses if it's inexpensive to do so).  angular.module('clientApp.apiModel').service('BatchRequest', function($q, Server, $http, $timeout) { var get, postBatch, queue, timeoutPromise; timeoutPromise = null; queue = []; postBatch = function() {   var requestQueue;   requestQueue = queue.map(function(req) {     return {       method: 'GET',       path: req.url,       deferred: req.deferred     };   });   queue = [];   timeoutPromise = null;   return $http({     method: 'POST',     url: """" + Server.api + ""/api/batch"",     data: {       requests: requestQueue.map(function(i) {         return {           method: i.method,           path: i.path         };       })     }   }).then(function(data) {     return requestQueue.forEach(function(val, i) {       if (data.data[i].statusCode != null) {         return val.deferred.reject(data.data[i]);       } else {         return val.deferred.resolve(data.data[i]);       }     });   }); }; get = function(url) {   var deferred;   if (timeoutPromise == null) {     timeoutPromise = $timeout(postBatch, 50);   }   deferred = null;   queue.forEach(function(thing) {     if (thing.url === url) {       return deferred = thing.deferred;     }   });   if (deferred === null) {     deferred = $q.defer();     queue.push({       url: url,       deferred: deferred     });   }   return deferred.promise; }; return {   get: get }; });"
angularjs,36x5rz,pfooti,2,Fri May 22 22:23:43 2015 UTC,Is it not much better to send 3 requests? At least that way client can get some feedback when first is finished and would allow each request to hit different server if required for performance. (assuming requests are not dependent)
angularjs,36x5rz,craigvl,1 point,Sat May 23 02:49:47 2015 UTC,and isn't the performance gain obvious?   ...no?
angularjs,36x5rz,rq60,1 point,Fri May 22 23:30:23 2015 UTC,"this is a problem and facebook might have solve it using graphQL, but apparently, it might requires you to rewrite the API call thingie  https://facebook.github.io/react/blog/2015/05/01/graphql-introduction.html"
angularjs,36uo0q,tsafou,1 point,Fri May 22 07:10:51 2015 UTC,"use something like grunt or gulp to concatenate all your files into one, then include a script reference into your html like normal. In fact, setup grunt so that when you modify files in your source it automatically preps everything for deployment, then you can spend the rest of your time focussing on your code."
angularjs,36uo0q,chreestopher2,1 point,Fri May 22 16:42:29 2015 UTC,"Hey! I think I understand what you need.  You need to create a module, you usually start your app with the lines: angular.module('app', []) //..... You're creating a ""namespace"" for your app. The cool thing is that you can pass your app1 module name into that array and app2 will take it as a dependency: angular.module('app2', ['app1']), then you can call your app1 controllers, services, whatever as you usually do, but take into account their names, they can collide. Use a namespace, you don't want a main_Ctrl definition inside app1 and app2, you can rename one of them to app*.main_Ctrl.  I think this plnkr will explain it a little bit better: http://plnkr.co/edit/aXF49BrVMPnYGvNlARjk?p=preview  Please let me know if it I indeed understood the issue."
angularjs,36scp2,hfalucas,0,Thu May 21 19:01:19 2015 UTC,thumbs up ;)
angularjs,36qqwx,tomdush,1 point,Thu May 21 11:13:49 2015 UTC,What's is an MVW? I don't know what the W stands for...
angularjs,36qqwx,musman,3,Thu May 21 15:37:48 2015 UTC,Whatever
angularjs,36qqwx,EpidemiK,1 point,Thu May 21 17:46:22 2015 UTC,thanks!
angularjs,36qqwx,musman,-2,Thu May 21 18:23:10 2015 UTC,Angular is dead. It's all about Aurelia now
angularjs,36qs70,bitsofcode,2,Thu May 21 11:30:39 2015 UTC,"Although I like the idea of a full js app that is just interacting with the database directly, what is stopping a user from cloning your app, hacking it and hitting firebase to set the story vote count to 10,000?"
angularjs,36qs70,toddffw,2,Thu May 21 12:48:32 2015 UTC,"You don't even need to go so far as clone the app. Just replay the API request to add 1 to the vote, except this time add a billion.   Client side checks like this should be done to improve the user experience, not as a security implementation -- that should all be done server side.   Additionally, for something as critical as voting, you should make a custom route specifically to vote that does all this on the server and on the client you just listen for an error. I'm not familiar enough with firebase to know if they have custom routes but that's the proper way to do it."
angularjs,36qs70,ADHDengineer,3,Thu May 21 13:13:51 2015 UTC,"You don't need a server to accomplish what you describe as Firebase has a Security Rules feature that you can use to validate incoming data (such as sender must be logged in, vote count can only increment by 1, etc)."
angularjs,36qs70,lowe0292,0,Thu May 21 14:09:15 2015 UTC,"Kinda takes the fun out of it?   Meaning, I have to go write code and deploy it to firebase itself.  Id rather just build a middle-tier."
angularjs,36qs70,toddffw,1 point,Fri May 22 09:17:16 2015 UTC,"As lowe0292 said, Firebase has security rules to handle things like this. I didn't include them just because I was focusing on building the app itself"
angularjs,36qs70,suchb,1 point,Fri May 22 09:04:04 2015 UTC,There is no need to iterate through all users. Just save the users like this:   users -simplelogin:100 --username --email --firstname --lastname   Then call var ref = new Firebase(FIREBASE_URL + '/users/' + authData.uid);
angularjs,36qs70,suchb,1 point,Thu May 21 17:39:16 2015 UTC,The problem with that is that Firebase doesn't let you save new arrays with a custom key anymore. They have their own randomly generated one
angularjs,36qs70,the-anconia,1 point,Fri May 22 09:05:03 2015 UTC,Do you have a link to this? Because its still working fine for me (working with AngularFire 1.0.0 and Firebase 2.2.2)
angularjs,36qaoo,utuxia,3,Thu May 21 07:21:35 2015 UTC,"I've been hanging out in the gitter channel a lot. Seems like a pretty active community, but not nearly as much attention as Angular 2 is receiving right now. A lot of the concepts are similar, as they're all based on very forwrd thinking technologies like ES6, System, module loaders, web components, etc.   The general population of devs aren't quite ready for either of them yet. Both suffer from overly verbose APIs at the moment - but I'm sure that will change as both frameworks come closer to an ""official"" release."
angularjs,36qaoo,dmackerman,5,Thu May 21 15:50:06 2015 UTC,I'm curious for an example of perceived verbosity in Aurelia. It's a criticism I haven't heard before.
angularjs,36qaoo,Davismj,3,Thu May 21 16:11:51 2015 UTC,Me too. I like it because it's not verbose.
angularjs,36qaoo,eikaramba,1 point,Fri May 22 06:20:01 2015 UTC,"here you find a example implemented in 9 different frameworks, also angular 2 and aurelia among them. https://www.reddit.com/r/javascript/comments/2yrws1/data_binding_code_in_9_javascript_frameworks/"
angularjs,36qaoo,vagif,0,Thu May 21 16:41:52 2015 UTC,"Spend a weekend, write Todo app. Then come back and report to us what you find :)"
angularjs,36owg0,kenhowardpdx,1 point,Wed May 20 23:34:48 2015 UTC,Listened  to a Scott Allen webinar put on by Apex Systems  today at lunch.  He covered this.  Interesting stuff.
angularjs,36owg0,dick1856,1 point,Thu May 21 01:29:57 2015 UTC,"$resource tends to have some very funky behavior, especially when used in the resolve of UI-Router. I've heard better things about JS-Data as a front-end model layer."
angularjs,36owg0,gabedamien,1 point,Thu May 21 02:01:35 2015 UTC,Do you have an example? I use this setup exclusively and had no issues so far.
angularjs,36owg0,kenavr,1 point,Fri May 22 10:46:41 2015 UTC,"I recently started using $resource heavily in my projects. It's really nice, I haven't had any issues.  I would not recommend this post to learn about good practices for $resource."
angularjs,36owg0,WesAlvaro,0,Thu May 21 06:01:50 2015 UTC,You need to return the data during your then if you want something else to have access to it. Also use .catch as your error handler because it will catch errors that you have inside your . then
angularjs,36q88h,Ginko_Biloba,2,Thu May 21 06:52:10 2015 UTC,"You could make your keypad directive require ngModel, and then you'd be able to propagate changes to the model without a separate input. This would allow you to bind multiple keypads to multiple models.  Have a look here: https://docs.angularjs.org/api/ng/type/ngModel.NgModelController  You'd just need to require: 'ngModel' in your DDO, and then use ng-model in your template whereever you use the directive. I can elaborate more in a gist if you want.  One of the bigger ""misconceptions"" about ngModel is that it can only be used on inputs - which is just not true. You can use it and require it's controller on any custom directive, as itself is just another directive."
