javascript,3e4wa4,neofatalist,2,Tue Jul 21 23:52:41 2015 UTC,"Great podcast, it's one of a few I always listen to at work. Adventures in angular is another good one on devchat.tv if you're interested in angular."
javascript,3e3l8g,pinhead26,10,Tue Jul 21 18:15:43 2015 UTC,"Its not OK.  But if it's removed/disabled, the interwebs breaks.  It got grandfathered in."
javascript,3e3l8g,senocular,1 point,Tue Jul 21 18:21:41 2015 UTC,"And the reason that this doesn't cause many practical problems is that, because we know that JS is the exception, we don't include dynamic data in our script files.  Philosophically, we shouldn't have to think about that, but we do, and things work out."
javascript,3e3l8g,matchu,4,Wed Jul 22 01:17:38 2015 UTC,Also you can do an AJAX call to retrieve some data from another origin. The requested origin needs to opt-in to that behavior though.
javascript,3e3l8g,ub3rgeek,2,Tue Jul 21 20:07:19 2015 UTC,"On newer browsers, yes, but that hasn't always been the case."
javascript,3e3l8g,wiseaus_stunt_double,3,Tue Jul 21 21:16:43 2015 UTC,"How does the browser know you're retrieving static data, and not exfiltrating cookie values or other info from the page to the cross-origin server?  Of course, it is possible to do that anyway, via img tags or script tags. So... I dunno."
javascript,3e3l8g,_doingnumbers,3,Tue Jul 21 20:31:35 2015 UTC,Opt-out for the former:  https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Using_Content_Security_Policy  Opt-in (by the other domain) for the latter:  https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
javascript,3e3l8g,x-skeww,2,Tue Jul 21 21:46:22 2015 UTC,Imagine you logged in your bank account in Tab 1 and that a malicious site in Tab 2 do a POST on your bank domain to make a wire ... This is an example of what is really dangerous with non CORS requests
javascript,3e3l8g,jucrouzet,3,Tue Jul 21 20:06:53 2015 UTC,"You could do that without CORS. Create a form element, add some hidden fields with the right names, make the action attribute point to your bank's domain. Submit the form. CORS doesn't prevent this."
javascript,3e3l8g,jcready,2,Tue Jul 21 21:32:10 2015 UTC,Indeed and it is called Cross Site Request Forgery (CSRF) and there are other ways to protect against that.
javascript,3dzra2,nightman,46,Mon Jul 20 21:13:16 2015 UTC,"In the old days, we pored over manuals. Manuals were gold and hoarded as such. Googling for answers is way more productive. I get the satire BTW."
javascript,3dzra2,PQQKIE,-32,Mon Jul 20 23:19:58 2015 UTC,"Programmers never want to learn their tools in-depth.  I'm not saying that things were really any better in the ""poring over manuals"" days, mind.  On the one hand, you'd regularly pick other useful information by accidental osmosis, but I think that's balanced out by the number of basically stupid mistakes that you'd make because the manuals seldom featured ""real-world usecases""."
javascript,3dzra2,trebor89,26,Tue Jul 21 02:16:15 2015 UTC,Programmers never want to learn their tools in-depth.   I'm... not too sure about that.
javascript,3dzra2,clessg,17,Tue Jul 21 03:42:06 2015 UTC,"I've met enough java programmers who implement equals without implementing hashcode, then wonder why their home-rolled caching implementation never generates cache hits, to disagree.  I'd say the average programmer doesn't spend enough time learning their technology stack in depth, and realistically that includes me; no superiority complex here."
javascript,3dzra2,trebor89,7,Tue Jul 21 03:54:40 2015 UTC,"I definitely agree. But there are a few of us! Speaking as someone who enjoys getting into the weeds, I quite honestly don't understand how others do it without breaking everything. I like to understand even fairly minute details of the tools I use, and whenever I'm missing those details, I feel like a blind man.  Edit: That said, a good portion of frontend developers I've met are eager to learn. How else would they put up with the fast rate of change, sans narcotic abuse?"
javascript,3dzra2,clessg,3,Tue Jul 21 04:03:30 2015 UTC,"Thats the secret! ""Break everything first."" If it's not spelled out for all to see in huge bold text, it's the next most expedient way to learn."
javascript,3dzra2,ericanderton,7,Tue Jul 21 14:17:35 2015 UTC,"Sadly, most jobs don't pay programmers to learn their tools well, they pay them to get things done.   They also tend to keep their programmers at full capacity - and if there is downtime, load them up with more work instead of giving them the time to learn things on the job.  Not enough places seem to promote a learning culture. My current job does, and it's great - and it's something that most people that work with me comment on coming from other companies, and find it ot be a very refreshing change of pace."
javascript,3dzra2,e82,1 point,Tue Jul 21 12:00:22 2015 UTC,"Yeah after many years in different jobs I finally landed one that lets me set up time to learn, or that lets me take a week off adding features to refactor code or write tests. It makes a huge difference.  I can see why he thinks that many programmers are lazy and don't want to learn anything but generalizing is terrible, around here there are so many meetups and so many places to learn cool stuff and practice and every event is always full capacity."
javascript,3dzra2,dvidsilva,3,Tue Jul 21 17:22:53 2015 UTC,"I spend more time in the plumbing of my tools than my own code, especially when writing JS apps."
javascript,3dzra2,davidf81,1 point,Tue Jul 21 05:09:57 2015 UTC,usually I learn my tools in the downtime I have or when I had a feature I really liked in one tool (Ctrl+D in sublime text saves my ass so much time) i try to figure out how to do it in a new editor. (Sadly I need a paid plugin for Visual Studio)
javascript,3dzra2,jewdai,4,Tue Jul 21 15:49:51 2015 UTC,"Well, you're partly right.   Programmers don't have enough hours in the day to learn every tool to the depth needed to master it. You have guys who will put in a 80 hour week and then code at home and even they don't have the time.   I've got 10 projects on my plate right now in some state between conceptualize and deliver.   All of them hit a relational database in some way (some under very high real time loads) so I make the effort to improve my depth of knowledge in SQL and database performance whenever I can.   One of the smaller ones that we have inherited uses a front end Javascript framework that is no longer en vogue and will likely disappear into the great nobody cares anymore in the next 5 years. We'll be completely rewriting it Q1 next year. Gotta tell you, I'm Stack Overflowing through every work order I can because every moment I spend learning that tool is a moment wasted that I can never get back."
javascript,3dzra2,daedalus_structure,3,Tue Jul 21 07:50:38 2015 UTC,"It's relevant to point out that your knowledge, skills and abilities still allow you to understand the big picture.  The fact you knew what to Google is very important.  If this is a language feature you'll be using a lot, you'll commit it to memory, but only if you were forbidden from making a library for it.  In my 15+ years of coding, I forget so much shit, and I suck at doing anything like string manipulation, stack/queues and traversal algorithms because everything has been abstracted.  BUT, I know the common problems with those so I can check that I'm not creating a problem, and for the rest... I'll just Google. :)"
javascript,3dzra2,MastersInDisasters,1 point,Tue Jul 21 11:44:58 2015 UTC,Why should you need to learn an entire framework/library/whatever to get anything done?
javascript,3dzra2,rocketblob,8,Tue Jul 21 03:23:37 2015 UTC,"You shouldn't need to learn an entire framework, but if you don't learn the concepts of a framework or tool, you misuse it and make your job harder.  You see it a lot with Angular, for instance; I'll run into someone who never looked into how directives work, so they keep too much stuff in the main scope, and hacking around the perceived complexity by offloading too much into the javascript side rather than using the tool the way it was designed.  Another good example is Spring.  I worked with a guy who would always pull stuff out of spring because he didn't want something to be a singleton, never realizing about prototype scope.  There are also tons of examples of security issues that can be caused by misusing frameworks.  I've seen enough broken home-rolled JAAS auth implementations to last a lifetime, and I haven't even been in the field all that long.  Or if you google any problem in the linux world to do with server administration, you'll get a ton of examples of how to do thing insecurely.  I'm not saying ""read the documentation for every tool you work with"", but cobbling something together based on copy-and-paste from stackoverflow is not enough.  I'm not criticizing /u/PQQKIE's statement, because I agree, if you read my comment.  But stackoverflow is not enough; sooner-or-later you run into a problem where you have to have conceptual knowledge, rather than particular knowledge."
javascript,3dzra2,trebor89,2,Tue Jul 21 03:43:02 2015 UTC,I guess I misunderstood your point; I'd agree that hacking things together from StackOverflow ends up being damaging.  I was suggesting that the trend toward libraries that are usable without an enormous learning curve--through intuitive design and documentation--is a positive one
javascript,3dzra2,rocketblob,-3,Tue Jul 21 03:49:32 2015 UTC,Right. I don't have all the answers because I don't want to. Got it.
javascript,3dzra2,jpfau,3,Tue Jul 21 04:04:32 2015 UTC,"That's not what I said in my original post or any of my responses.  Developers spend a lot of time on small-picture problems, when oftentimes they're blindly bumping up against a larger-scale problem that could be solved by reading something higher-level.  Sometimes that's documentation, sometimes that's a book.  The only advantage of the bad-old-days of no-google is that sometimes, the middle-of-the-road lazy people would be forced into reading and understanding at a conceptual level.  It didn't help the super-lazy people, because they'll just cobble things together anyway, only slower, and it didn't help the high-performers, because they took the time to understand already."
javascript,3dzra2,trebor89,2,Tue Jul 21 04:25:56 2015 UTC,"Having programmed in the ""bad old days"" I'd say most people would fall into your super lazy category. I'd probably skim manuals and reference material at a pace that wouldn't allow for any in-depth analysis and typically kludge-up what I needed from examples and reading few paragraphs.  In contrast, your typical internet discussion (bug tracker discussions and SO included, to an extent) will often include (often irritating, but sometimes very useful) people who totally orthogonally advise you not to do what you asked how to do, but to consider doing what you probably should have been doing all along. And since most of these are answered already, you'll typically learn fast, get shit done, and if you're open-minded enough to understand WHY some solution is chosen, you'll also likely become a better engineer for it."
javascript,3dzra2,bmarkovic,31,Tue Jul 21 15:51:16 2015 UTC,"I rarely get an in-date answer from Stackoverflow, any more. These days it's almost always a solved GitHub issue or README.md that contains an answer."
javascript,3dzra2,AutomateAllTheThings,13,Tue Jul 21 00:18:01 2015 UTC,"StackOverflow solves very particular problems. Just today I was finding out a way of using Jersey to serialize a DOM Document into JSON without causing a (drum rolls, please...) stack overflow. I had to quote ""stack overflow error"" to avoid getting random answers from the site. And naturally, the answer was in stackoverflow.  Three or four answers from the top one led me to the json.org site. In half an hour I fixed the code."
javascript,3dzra2,otakuman,3,Tue Jul 21 01:13:10 2015 UTC,Silly question: How do you 'quote' something in Google? Do you literally just put it in double quotes?
javascript,3dzra2,10097338,7,Tue Jul 21 03:15:57 2015 UTC,yep
javascript,3dzra2,rocketblob,2,Tue Jul 21 03:25:30 2015 UTC,how did i never know that ...
javascript,3dzra2,10097338,3,Tue Jul 21 03:30:07 2015 UTC,"That's for exact phrases. You can also include AND and OR operators. In fact, check these out!"
javascript,3dzra2,SirRealle,1 point,Tue Jul 21 03:37:45 2015 UTC,"this is great, thanks"
javascript,3dzra2,10097338,2,Tue Jul 21 03:52:30 2015 UTC,There's also https://www.google.com/advanced_search for lazy people like me who don't want to learn google's markup.
javascript,3dzra2,hulfsy,1 point,Tue Jul 21 06:53:59 2015 UTC,Yup. double quotes.
javascript,3dzra2,otakuman,1 point,Tue Jul 21 03:35:33 2015 UTC,You can also put a minus in front of words to exclude them from your search. Try cookie vs cookie -clicker.
javascript,3dzra2,Swimbo,4,Tue Jul 21 05:44:54 2015 UTC,Try limiting the search results from google to some acceptable timespan. That's been helping me a lot lately.
javascript,3dzra2,qualiaqq,4,Tue Jul 21 06:57:43 2015 UTC,Here's a great one about a PayPal bug that helped me today:   http://stackoverflow.com/questions/20781504/paypal-payment-data-transferpdt-error-4002/30386965#30386965
javascript,3dzra2,Aardshark,1 point,Tue Jul 21 16:07:20 2015 UTC,"Wouldn't it be nice if stack overflow deprecated answers as their versions went out of date? ... By which I mean, some form of archive.  But I don't need Django 1.1 answers while 1.8 is out."
javascript,3dzra2,WStHappenings,1 point,Tue Jul 21 12:12:49 2015 UTC,I really detest StackOverflow - the ability of (pretty much) anyone to edit other answers/questions drives me insane. I'd much rather my question/answer/whatever deleted than have it rephrased by someone else - I stopped using it years ago because of that.
javascript,3dzra2,CashewGuy,7,Tue Jul 21 12:15:53 2015 UTC,"The scariest thing about this article is the comments section, man some people are stupid."
javascript,3dzra2,a-sober-irishman,0,Tue Jul 21 02:47:06 2015 UTC,TIL The internet is full of them.
javascript,3dzra2,dhdfdh,5,Tue Jul 21 13:58:00 2015 UTC,does that mean it will be ok for me to google the answer to interview questions while in the middle of the interview?
javascript,3dzra2,sclarke27,17,Tue Jul 21 00:02:51 2015 UTC,"The more I hear about programming interviews, the more I don't get them and the more they scare me. Most of what makes me great at my job cannot be expressed by sitting me down and having me go through a coding exercise.    The answer to most of the questions that websites preparing you for code mill interviews, for me, are, ""I would Google for a bit to see how other people approach the problem, identify the differences in my problem space vs. these examples, and formulate what is likely a very similar but specific solution to my problem. I would then document how and why I solved it the way I did, and write unit tests throughout development of the code, not at the end, to help me test the solution as I build it to more quickly identify if the proposed solution doesn't feel right.""   That would be my answer for almost every question.  I guess my biggest fear about one day having to find another job is that I'll be interviewed by people who ask the wrong questions and I'll never get a job again because I'm not able to jump through the hoops they're holding up for me. =("
javascript,3dzra2,Mackinstyle,5,Tue Jul 21 01:30:12 2015 UTC,"""I would Google for a bit to see how other people approach the problem, identify the differences in my problem space vs. these examples, and formulate what is likely a very similar but specific solution to my problem. I would then document how and why I solved it the way I did, and write unit tests throughout development of the code, not at the end, to help me test the solution as I build it to more quickly identify if the proposed solution doesn't feel right.""   And that's exactly how it should be.  Granted, after a while you'll already know certain patterns for solving particular types of problems, but you'll always end up needing to find a solution to something you don't know. Most of the time it's just easier to google and go from there instead of trying to write it from scratch.  But yeah, that shit happens when you go to an interview and get asked a question about something you aren't at all familiar with solving. But don't worry, there's always another interview and if you keep learning and improving your skills, you won't ever have a problem finding a job."
javascript,3dzra2,hatestheinternet,6,Tue Jul 21 01:36:24 2015 UTC,"Yeah. I'm in a more senior position now and am interviewing people for various programming positions. One thing I care more about than anything else is that someone is effective at learning how to solve new problems. ""Learning how to learn"" if you'll pardon a cliché term.    I love asking questions that I also don't know the answer to.  ""Say the embedded systems guys all win the lottery and quit tomorrow. We have a robot that has to be shipped on Friday. How would you and I figure out how to revert the current test firmware so that the robot will turn on again?"""
javascript,3dzra2,Mackinstyle,3,Tue Jul 21 01:46:26 2015 UTC,"Say the embedded systems guys all win the lottery and quit tomorrow. We have a robot that has to be shipped on Friday. How would you and I figure out how to revert the current test firmware so that the robot will turn on again?   Jesus, I'm going to stay jobless...unless the answer is check SO..."
javascript,3dzra2,Base10Propaganda,2,Tue Jul 21 11:33:16 2015 UTC,"And that's exactly how it should be.   Google is fine for common and/or well-known problems.  But what if the problem involves specific internal system design for an aging solution built on a technology that was never du juor; developed by a guy who moved to another company years ago. There's no Google, the implementation is a trade secret ""sauce"", the approach is ""trial and error"" - now what?   You need to demonstrate ability to solve problems using nothing but first principles understanding of data structures as well as deduction without relying on research. Exposure to previous diagnosis of similar situations counts more."
javascript,3dzra2,Uberhipster,3,Tue Jul 21 15:46:40 2015 UTC,"""I would google for a bit to see how other people approach the problem, identify the differences in my problem space vs. these examples, and formulate what is likely a very similar but specific solution to my problem.""   I am just going to start using this as an answer and see how far it gets me :D"
javascript,3dzra2,sclarke27,4,Tue Jul 21 01:44:41 2015 UTC,"I have a science background so I'm bewildered by any answer that does not begin with, ""I will work to describe the problem in unambiguous terms and then research the hell out of it."""
javascript,3dzra2,Mackinstyle,7,Tue Jul 21 01:47:42 2015 UTC,"""I will work to describe the problem in unambiguous terms and then research the hell out of it.""   that sounds kinda magical. maybe programming was the wrong field for me. :)  I wish i could tell producers and product managers, ""describe the product you want in unambiguous terms and i will build the hell out of it."" and have it turn out ok when i delivered what they asked for. Sadly unambiguous terms also means batshit crazy ideas which should never see the light of day, and they don't realize how stupid an idea was until its implemented and staring them in the face."
javascript,3dzra2,sclarke27,2,Tue Jul 21 01:55:09 2015 UTC,"Deliverables of any design, before any implementation has begun, need to include the overall design, a list of known risks, details on work (research, planning, strategy) done or will be done to mitigate these risks, and remaining risks / possible unknowns.  So you could set expectations with a wacky or ambiguous request that way.  It forces all parties to better understand the problem, be on the same page with expectations of deliverables, and often to rethink the problem when they're not prepared to say, ""I'm okay with the chance that this idea will cause delivery to be delayed by a week."""
javascript,3dzra2,Mackinstyle,2,Tue Jul 21 02:00:45 2015 UTC,more things which sound magical. It often feels more like this: https://www.youtube.com/watch?v=BKorP55Aqvg
javascript,3dzra2,sclarke27,1 point,Tue Jul 21 03:18:20 2015 UTC,I LOVE that sketch!
javascript,3dzra2,Mackinstyle,1 point,Tue Jul 21 03:19:39 2015 UTC,Did a technical test last night with a giant timer counting down from 60:00. Really put me off and put stress on me so I'm pretty sure I did badly. Trying to read badly written instructions under pressure sucks.
javascript,3dzra2,TheWobling,1 point,Tue Jul 21 06:44:16 2015 UTC,"I don't go much into coding problems/challenges while doing interviews. But when I do, generally more interested in the thought process then the right answer.  I'll also give hints, poke holes in the answer, ask 'what about this...?', I also try to frame them in the context of something you would actually be doing and avoid 'tricky for the sake of being tricky' questions.  Hell, even chicken scratch, boxes and arrows pointing around to convey a general idea/logic flow - and not caring about the syntax can be fine. Or, even just talking through the solution.  But, some people are just bad at white-board/coding questions in an interview - and they are not the be all and end all in my final choice. I find that talking through a problem and possible solutions can be pretty informative without ever having to actually write anything down."
javascript,3dzra2,e82,3,Tue Jul 21 11:54:49 2015 UTC,I've conducted interviews with coding exercises where they were completely free to google something if they needed.
javascript,3dzra2,msiekkinen,4,Tue Jul 21 00:10:06 2015 UTC,"To be honest, i have done it myself. It just always feels like cheating even when they say it's ok."
javascript,3dzra2,sclarke27,9,Tue Jul 21 00:11:43 2015 UTC,"Which is interesting, considering that the ability to Google and find the answer to an already-solved problem is arguably one of the most important attributes of a good programmer."
javascript,3dzra2,clessg,6,Tue Jul 21 00:16:32 2015 UTC,as well as and being able to understand that solution. Doesn't help to find the perfect solution if you don't understand basic programming in the first place :D
javascript,3dzra2,sclarke27,4,Tue Jul 21 01:48:02 2015 UTC,Indeed! coughjQuerycough
javascript,3dzra2,clessg,2,Tue Jul 21 01:55:48 2015 UTC,I hate it if I search for something in javascript and every fucking solution is jquery.
javascript,3dzra2,coloroftheskye,2,Tue Jul 21 23:00:10 2015 UTC,I think the difference is do you spend most of your time trying to find a copy/paste solution or you need to look up an argument list that your IDE might be providing you with anyway.
javascript,3dzra2,msiekkinen,1 point,Tue Jul 21 00:21:42 2015 UTC,I don't like cut and paste solutions. I like to understand why a given solution works so i can better integrate that solution into my code and also so i can understand how to fix it if it breaks.   IDE autocomplete is a whole separate problem and i don't think we appreciate how much autocomplete does for us until being asked to write code on a white board. :D
javascript,3dzra2,sclarke27,1 point,Tue Jul 21 01:41:57 2015 UTC,"I encourage it. If a developer then proceeds to ignore that advice and try to hack away at the problem, specifically stating that they want to not use that crutch, I go down a different talent tree.  Interviewing: The Text Adventure"
javascript,3dzra2,alamandrax,4,Tue Jul 21 03:48:39 2015 UTC,"Rarely hit stack overflow for development anymore, just the api docs. SO can come in handy for bugs though - paste the error is a proven algorithm!"
javascript,3dzra2,izztmzzt,2,Tue Jul 21 02:55:39 2015 UTC,That's implying that everybody blindly copy and pastes. Good programmers will understand the code that they are copying before moving on.
javascript,3dzra2,LalienX,1 point,Tue Jul 21 13:40:46 2015 UTC,I think that is only in the ideal case.
javascript,3dzra2,JamesBarnes007,1 point,Tue Jul 21 13:47:39 2015 UTC,"SO was much more useful when I wasn't fluent in syntax or the standard libs, and had poor code organization. Now it's mostly for learning code golf like obj[Object.keys(obj)]"
javascript,3dzra2,e13e7,2,Tue Jul 21 14:38:35 2015 UTC,HAHAHAHAHAHAHAHAHA  ahhhhh. Yeah.
javascript,3dzra2,incarnatethegreat,2,Tue Jul 21 02:42:33 2015 UTC,I use DuckDuckGo
javascript,3dzra2,andreicristianpetcu,2,Tue Jul 21 05:15:59 2015 UTC,This is what I was gonna say.
javascript,3dzra2,PoetheProgrammer,1 point,Tue Jul 21 11:32:52 2015 UTC,"I thought programming was going to be renamed ""updating composer.json""  😀"
javascript,3dzra2,webdeverper,1 point,Tue Jul 21 12:01:36 2015 UTC,"God damn it, you were at the marionettejs conference last night."
javascript,3dzra2,jewdai,-1,Tue Jul 21 15:45:44 2015 UTC,Was I stupid to assume that /r/javascript would be about JavaScript and not shit posting the same overused jokes?
javascript,3dzra2,n0mel7,2,Tue Jul 21 11:17:46 2015 UTC,"Yeah, I thought it would be downvoted into oblivion. Surprises are surprising."
javascript,3dzra2,clessg,-1,Tue Jul 21 11:20:42 2015 UTC,LOL
javascript,3dzra2,compubomb,-1,Tue Jul 21 02:37:48 2015 UTC,K
javascript,3e52yt,small-wolf,1 point,Wed Jul 22 00:47:15 2015 UTC,"I think this is what TypeScript is for, and IntelliSense (even while editing plain JS) should at least be able to tell you the names of the formal parameters."
javascript,3e52yt,lewisje,1 point,Wed Jul 22 01:12:08 2015 UTC,"That sounds like a big task, so what I would do is just use is write a small snippet that writes this:  console.log(arguments);   then you can figure out the args, but if this ever does happen that'd be really nice, especially for sublime."
javascript,3e3bcj,bevacqua,1 point,Tue Jul 21 17:09:00 2015 UTC,"You mean to say you can seamlessly transition between Markdown, html, and WYSIWYG, and it can output to markdown?   NodeBB is interested... definitely."
javascript,3e3bcj,mailto_devnull,1 point,Tue Jul 21 21:58:15 2015 UTC,"That's right, yes. And with some styling it actually looks better than the demo, which has very crappy styles in the button bar."
javascript,3e2aqw,Vanillacitron,4,Tue Jul 21 12:16:32 2015 UTC,"As a back end REST services developer, my team has a standard against writing anything UI specific. We try to write endpoints that are process specific. Including anything that isn't necessary to the process generally makes the endpoint code modeling that process less maintainable, understandable, and reusable.  You asked for reasons aside from extra work, but as a developer extra work is a killer and one of the main reasons we don't cater to the front end. UI's change frequently while the underlying processes don't. Having to update back end code for what are arguably cosmetic changes is a huge waste of time. Different UI's and even automated processes consume our services, so if we do something specific for one, we have do to it for all, another huge waste of time."
javascript,3e2aqw,camoeron,1 point,Tue Jul 21 18:17:43 2015 UTC,"Thanks, great points!"
javascript,3e2aqw,robotfarts,3,Tue Jul 21 18:19:09 2015 UTC,"I haven't seen people do both at the same time much, but generally I would do the one I really need.  Prematurely generalizing things can be a waste of time like prematurely optimizing things can."
javascript,3e33tw,freebit,2,Tue Jul 21 16:17:23 2015 UTC,"And here I am just going by what jslint/hint and my autoformatter defaults to.      And he doesn't used named functions in his function declarations but advocates using named functions when inlining them later on, why not just always use them?     Avoid prototypical inheritance models   No, if I can reduce and reuse I will.    Bad  var args = [].slice.call(arguments); Good  var i; var args = new Array(arguments.length); for (i = 0; i < args.length; i++) {     args[i] = arguments[i]; }       then near the bottom...  Use Array.prototype.slice.call to cast array-like objects to true arrays.  var args = Array.prototype.slice.call(arguments);"
javascript,3e33tw,ggolemg2,1 point,Tue Jul 21 16:56:08 2015 UTC,"I'd stick with using named function declarations only on the right side of an assignment to a variable (so as not to crash Safari) and naming them the same as the variable you're assigning them to (so as not to make an extra variable in oldIE); in a context like Node or a browser extension, these considerations don't apply."
javascript,3e3mf9,Mike,2,Tue Jul 21 18:23:36 2015 UTC,"The onclick event passes the relevant object to the function it calls (as ""this"").  var buttons = document.getElementsByTagName('button');  for (var i=0; i<buttons.length; i++) {     buttons[i].onclick = function ()     {         console.log(this.innerHTML);     } }"
javascript,3e3m1o,Javin007,2,Tue Jul 21 18:21:07 2015 UTC,"If you're asking if it's possible to get custom behavior without writting code, then no.  Now, with javascript, you could subscribe to the error event of the window object and that should trigger in case of a 404 (among other) in which case you can write your code."
javascript,3e3m1o,atnpgo,1 point,Tue Jul 21 18:25:23 2015 UTC,"If you're asking if it's possible to get custom behavior without writting code     I have no idea how you came to that conclusion from the text of my question?     Now, with javascript, you could subscribe to the error event of the window object and that should trigger in case of a 404 (among other)     So you're saying embed the CSS in the HEAD anyway, and then capture the 404 event?  This seems like a kind of messy way to do it, and would it not also fill the window's console logs with error messages?  Would it work in every browser?"
javascript,3e3m1o,anubgek,2,Tue Jul 21 18:29:31 2015 UTC,I don't think you can have a client check the server for anything without an xhr. It may be beneficial to load the default css to start and if the xhr comes back 200 to replace it
javascript,3e3m1o,pear22,1 point,Wed Jul 22 00:13:32 2015 UTC,"Maybe just set some expected css property from the external file. Check if that was set or not with perhaps jQuery's .css() method.    Edit: Also, it appears most modern browsers support the onerror event on link elements, so you could just check that after adding it to the head section."
javascript,3e3m1o,pear22,2,Tue Jul 21 18:34:38 2015 UTC,"Maybe just set some expected css property from the external file. Check if that was set or not with perhaps jQuery's .css() method.   Definitely not an option.  The question was ""Check if file exists on server without JQuery or HTML5?""  I'm just trying to create a clean ""fileExists()"" function here.  I wouldn't think it should be this hard."
javascript,3e3m1o,pear22,0,Tue Jul 21 18:46:46 2015 UTC,with perhaps jQuery's .css() method   I said perhaps... you can check element properties without jQuery you know?
javascript,3e3m1o,pear22,1 point,Tue Jul 21 18:50:11 2015 UTC,"It's still not clean enough.  It would then require that all .CSS files have this ""expected property"" as well as limit the ""fileExists"" function to only work with THOSE CSS files."
javascript,3e3m1o,zobier,2,Tue Jul 21 18:51:50 2015 UTC,"Would this help?  var fileExists = function(filename, callback){     var link = document.createElement(""link"");     link.setAttribute(""rel"", ""stylesheet"");     link.setAttribute(""type"", ""text/css"");     link.setAttribute(""href"", filename);     document.getElementsByTagName(""head"")[0].appendChild(link);     link.onerror = function(){ callback(false); };     link.onload  = function(){ callback(true); }; }; fileExists(""/css/somefile.css"", function(ret){     console.log(ret); });"
javascript,3e1ohh,alexcasalboni,1 point,Tue Jul 21 07:22:41 2015 UTC,"The problem I have with your code examples is that first of all, they are in TypeScript, and secondly that they exclusively use Constructor functions.  Using TypeScript for static type checking is one thing, but using it as an OOP replacement that compiles to JS like CoffeeScript or Dart is something I can't get behind.   If you do use TypeScript, don't use interfaces, classes, constructors, or other classical inheritance patterns.   Use factories, prototypes, Object.create, etc."
javascript,3e1ohh,PitaJ,1 point,Tue Jul 21 15:10:09 2015 UTC,Why
javascript,3e1ohh,aequasi08,-1,Tue Jul 21 18:25:54 2015 UTC,"Why? Because it matches the underlying workings of the language itself.   The language is not classical, it is prototypal."
javascript,3e1ohh,PitaJ,0,Tue Jul 21 22:51:59 2015 UTC,"yet ES6 is introducing classes, turning it into a hybrid. They can exist together. Its ok."
javascript,3e1ohh,aequasi08,2,Tue Jul 21 22:56:29 2015 UTC,"Nope. They aren't true classes, just syntactic sugar for people who want classes.   Despite what many may want, ES6 does not have classical inheritance. JS will probably never have classical inheritance."
javascript,3e1ohh,PitaJ,0,Tue Jul 21 22:58:41 2015 UTC,"But there are still classes. Syntactic sugar or not, they are still there, and its not a bad thing. If you don't like them, don't use them, but don't play it off like they are the spawn of the devil."
javascript,3e3fyt,Druxo,2,Tue Jul 21 17:39:54 2015 UTC,"the best two options are websockets and ajax for loading templates n data.  websockets is probably 50ms faster, but you only have one response handler so you have to do something like switch(data.action){ ... every app function needs a case here ... }. at least with ajax you can write a pretty normal REST backend: $.get('/posts/', somefn)  socket.io is decent for websockets and backend.  the newer option would be flux from facebook and its backend which is either ajax or websockets + their query language + optionally React for frontend"
javascript,3e3fyt,mc_hammerd,2,Tue Jul 21 18:09:25 2015 UTC,Thanks! I will have a look at these options.
javascript,3e3fyt,amenadiel,1 point,Tue Jul 21 18:29:58 2015 UTC,"Keep your backend in php since you already know it. Just use a minimal framework to get started, one that provides routing+json responses and leaves UI apart. My favorite for that matter is Slim Framework but I bet you have your own.   Since you already know a little jQuery you can get started right now manually crafting your requests, but I encourage you to learn to use a framework to deal with models instead of raw requests. Backbone is nice, although these days AngularJS has all the attention. EmberJS is nice too."
javascript,3e38gi,haywire,2,Tue Jul 21 16:49:40 2015 UTC,The problem is how specific you would like your selector to be. Only the id? id+tag? id+tag+classes? id+tag+classes+attributes? I think you'd be better off writing it yourself for whatever use case you have.
javascript,3e38gi,kogsworth,3,Tue Jul 21 17:03:57 2015 UTC,"Well this is the tricky part, it's actually not a fully solve-able problem.   I guess it'd just be case of figuring out what's the simplest combination that targets that specific thing. Obviously an ID is perfect, but once you get classes and tags it approaches nightmare mode.  Selenium builder attempts to solve it, albeit poorly."
javascript,3e38gi,kogsworth,4,Tue Jul 21 17:15:56 2015 UTC,"the simplest combination   the simplest combination for what though? For only selecting this one element? To select all similar elements? If so, what is the similarity between the elements?  Not an easy thing to do generically :)"
javascript,3e38gi,power78,2,Tue Jul 21 17:17:58 2015 UTC,"I guess for what we need, this one element, which would be the ""path"" in the easiest form, however, that would be extremely brittle."
javascript,3e38gi,joshTheGoods,2,Tue Jul 21 17:51:29 2015 UTC,You need to define your problem better in order to find a solution
javascript,3e37k2,Elelegido,1 point,Tue Jul 21 16:43:35 2015 UTC,"Not to plug my own stuff, but I implemented a similar thing based on Java's Optional type if you prefer that API."
javascript,3e33qw,freebit,1 point,Tue Jul 21 16:16:54 2015 UTC,"I don't think this is entirely accurate. Take for instance lodash's _.curry() function:  var curried = _.curry(function (a, b, c){   console.log(a, b, c) });   I can pass curried one, two, or all three parameters.  curried('a')('b')('c') curried('a', 'b')('c') curried('a')('b', 'c') curried('a', 'b', 'c')   By your definition of a curried function, only the first example is allowed."
javascript,3e33qw,jcready,1 point,Tue Jul 21 16:47:14 2015 UTC,"The curry function in lodash isn't ""true"" currying. You can't really have true currying in javascript. But it emulates it. Really its just fancy wrapper for partial application. But from a practical standpoint it doesn't really matter much and I think you might as well call it currying."
javascript,3e3tso,soupjs,1 point,Tue Jul 21 19:13:55 2015 UTC,"Not sure why, byt the codepen gets rendered as :  $(document).ready(function () {     $('.tbutton').click(function () {         (true);     }); });   From what I can see, codepen just strips out ""location.reload""  since if I use window.location.reload(true) it renders as window.(true)"
javascript,3e3tso,atnpgo,1 point,Tue Jul 21 19:25:06 2015 UTC,"I actually starred at my code like a lot of times..I was thinking like..what the heck? I must be doing something wrong...but after a lot of checking and making sure jquery was included...no typos and all that...at least now I know they strip out ""location.reload"".   Not sure why, but thanks for helping me out :)"
javascript,3e3tso,g3bj45hg34857,1 point,Tue Jul 21 20:05:25 2015 UTC,Codepen actually removes the location.reload from your code before running.  It doesn't seem to be mentioned in the docs. They do mention that they remove meta refresh tags so it makes sense that they would remove location.reload calls too.
javascript,3e3tso,g3bj45hg34857,1 point,Tue Jul 21 19:37:58 2015 UTC,I'm trying to write a function that will refresh my codepen page when a button is clicked. Is there something else that I can use besides location.reload(true) to actually achieve this?  Thanks btw for all your help.
javascript,3e3tso,g3bj45hg34857,1 point,Tue Jul 21 20:03:45 2015 UTC,The question is why. Why do you need to reload your codepen?
javascript,3e3tso,g3bj45hg34857,1 point,Tue Jul 21 20:13:35 2015 UTC,"Well...suppose we have this scenario: I get input from the user, I empty the input page and show something completely different...based on the input from the user.  I was thinking of using a button that will refresh the page in case the user wants to submit different information.  *Not sure if I explained very well. -^"
javascript,3e3to5,dickheaddanny,2,Tue Jul 21 19:13:04 2015 UTC,"Depends on the type of data you will be storing, and there's a very strong chance your data is relational (which would be an argument against MongoDB). Hard to say without knowing more, though."
javascript,3e3to5,dvlsg,2,Tue Jul 21 19:48:37 2015 UTC,The application will be an ecommerce application. So this would include users accounts and products.
javascript,3e3to5,way2know,3,Tue Jul 21 19:51:08 2015 UTC,Sounds like a bad fit.
javascript,3e3to5,dvlsg,1 point,Tue Jul 21 21:55:16 2015 UTC,"I agree. That data sounds very relational to me. Commerce data is almost guaranteed to be relational.  If you are using node.js, I would strongly suggest looking into using Postgres and using either Sequelize or Knex for interfacing with the database. I have had a great experience using these so far."
javascript,3e3to5,slvrsmth,2,Wed Jul 22 01:28:56 2015 UTC,"I would not store the primary copy of data related to finances in a mongo database. Primarily due to lack of transactions. Secondarily due to the many horror stories I've heard of data corruption.  Also, e-commerce data tends to be HIGHLY relational. NoSQL in general would be a bad fit. My personal preference and recommendation would be Postgres. SQL does not bite, and by the time you could potentially benefit from the scaling of mongo, your e-commerce application will be taking on Amazon."
javascript,3e3to5,Cody_Chaos,1 point,Tue Jul 21 20:08:25 2015 UTC,"Should I use MongoDB?   Probably not.   I've been looking into and playing around with the MEAN stack   Eh, it's a not a bad tool for learning, experimenting, and banging out quick prototypes.  Be careful that you budget time to rip it out and switch to a real data store before actually writing the real version of the app though.   and was considering it for a scalable web application    No.  Or rather, almost certainly not.  In general if you're trying to do anything important or scalable, you should avoid Mongo.  If you're doing something very specific with, I dunno, aggregating anayltics in a way that just won't work with Riak, Cassandra, Postgres, etc., they sure, maybe Mongo is the right choice for you.  But if you have to ask, the answer is no.  Conversely, most web apps are just doing basic relational CRUD operations, like ecommerce; that's never a good application for Mongo.   The application will be an ecommerce application. So this would include users accounts and products.   Do not use Mongo for this.  That's like, the poster child for something that Mongo would be inappropriate for.  Using Mongo for that rather than a good relational DB like Postgres is all downside; you'll kick yourself for giving up transactions and ACID guarantees, but you won't be in a position to benefit from the features NoSQL offers.  Edit:  Here's the rule of thumb I work with:   I want to write a serious app that will be stable, reliable, scale, and not lose data.  I don't want to ever look back and go ""man, I selected the wrong damn data store"".  Pick Postgres, with some Redis for cacheing or Elasticsearch for indexing as appropriate.  Yes, it's what everyone else is using.  There's a reason. I want to do something cool and awesome with cutting edge technologies.  I don't mind it ending in flames as long as there's a chance of learning something awesome.  Pick RethinkDB.  I want to do offline-first mobile apps with deep support for syncing and master-master replication.  Pick CouchDB.   Offhand, I can't think of anything that MongoDB is actually best at, and little it's even particularly good at.  Easy to install in a dev environment, I guess?  Decent at storing non-relational data in a flexible way if you're one of the 16 developers on the planet who actually need that (rather than one of the hundred million developers who falsely think they need to do so, and don't understand the difference between ""schemaless"" and ""implicit schema"")?"
javascript,3e3to5,joshburgess,1 point,Tue Jul 21 22:07:19 2015 UTC,Look at PostgreSQL & RethinkDB.
javascript,3e3to5,Bartrail,-1,Tue Jul 21 21:59:31 2015 UTC,"I'm using mongodb with php (symfony2 and doctrine-mongodb) for quite some time (+3 years), also on production and am actually really happy about it. Though I never had to deal with clustering and never had any of the mentioned problems of this post http://cryto.net/~joepie91/blog/2015/07/19/why-you-should-never-ever-ever-use-mongodb/  The only thing that really annoys me is setting up the authoriziation/authentification method.. everytime a new dev or prod env is needed, this is always pain in the ass. Besides that, I really like using it once you've ""free"" yourself from relational thinking. Especially in terms of inheritance of objects (or documents) It is really powerful (maybe only because of doctrine.. as it facades very much of it) But as criticsm continues to grow on MongoDB I will definately take a deep look at CouchDB and the JSON/BSON features of PostgreSQL."
javascript,3e27k4,kikobeats,1 point,Tue Jul 21 11:42:47 2015 UTC,"Why this over semantic-release?  Edit: Bad question. Bumped looks to be manual, whereas semantic-release is automatic. Both valid ways of doing it."
javascript,3dyi8j,magenta_placenta,7,Mon Jul 20 15:57:10 2015 UTC,I got the following error in Chrome:  line 458: dat is not defined   EDIT: It occurs because requested an insecure script 'http://dat-gui.googlecode.com/git/build/dat.gui.min.js'. Additionally I get an 403 if I try to get the file manually :/
javascript,3dyi8j,theLine7,4,Mon Jul 20 19:34:52 2015 UTC,cloudflare has a copy that you can use in the settings for this codepen.  https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.5/dat.gui.js
javascript,3dyi8j,lazyshot,1 point,Mon Jul 20 19:51:22 2015 UTC,Same. It can't seem to get this file:  https://dat-gui.googlecode.com/git/build/dat.gui.min.js  Says the bandwidth is over quota.
javascript,3dyi8j,subtlefarts,1 point,Mon Jul 20 19:39:14 2015 UTC,Ditto.
javascript,3dyi8j,mmouth,1 point,Mon Jul 20 19:44:03 2015 UTC,"Same.  Here's the response headers.  HTTP/1.1 403 Forbidden X-Error-Detail: Over quota. Content-Type: text/html; charset=UTF-8 X-Content-Type-Options: nosniff Date: Mon, 20 Jul 2015 19:46:37 GMT Server: git_frontend Cache-Control: private Content-Length: 1467 X-XSS-Protection: 1; mode=block Alternate-Protocol: 80:quic,p=0"
javascript,3dyi8j,zaxnyd,5,Mon Jul 20 19:48:16 2015 UTC,"I love how if you have enough gravity points combine they end up exploding in a ""big bang"" sort of way."
javascript,3dyi8j,BadleyHairless,3,Mon Jul 20 18:18:23 2015 UTC,Kudos on the gravity points themselves pulling toward one another if they get too close and then growing. I was able to create a nucleus with all my electrons spinning around it infinitely without touching the sides.   Great idea.
javascript,3dyi8j,TheSpanxxx,2,Mon Jul 20 18:39:39 2015 UTC,"Oh, and if it gets too big it collapses on itself, imploding. Nice touch!"
javascript,3dyi8j,TheSpanxxx,4,Mon Jul 20 18:42:41 2015 UTC,"This is all wrong. The source of gravity sits at one of the foci of the orbiting object's ellipse, not in its exact center. Fastest speed is at perihelion, slowest at aphelion. (Sorry, just read Seveneves and couldn't help myself. I'll see myself out.)"
javascript,3dyi8j,greim,3,Mon Jul 20 21:50:19 2015 UTC,"Helios, the Greek sun God, would not approve using his holy name without referring to an orbit around the sun. Apoapsis/periapsis is more generic as of what body is orbited. Just a tiny detail worth remembering. Good point otherwise. (I’ll see myself out as well)"
javascript,3dyi8j,timseverien,3,Tue Jul 21 07:25:55 2015 UTC,"Very nice, steering behaviors are so much fun."
javascript,3dyi8j,ggolemg2,2,Mon Jul 20 16:42:34 2015 UTC,More from this pen's author  http://codepen.io/akm2/
javascript,3dyi8j,_daniel___,1 point,Mon Jul 20 20:40:26 2015 UTC,this one is really cool http://codepen.io/akm2/pen/BonIh
javascript,3dyi8j,rondog469,2,Mon Jul 20 22:41:21 2015 UTC,not working on mac/chrome  js error are:  http://dat-gui.googlecode.com/git/build/dat.gui.min.js Failed to load resource: the server responded with a status of 403 (Forbidden)  index.html:493 Uncaught ReferenceError: dat is not defined
javascript,3dyi8j,downhillonslicks,1 point,Mon Jul 20 21:51:00 2015 UTC,Order restored.
javascript,3e12ii,mkmoshe,1 point,Tue Jul 21 03:29:21 2015 UTC,"That is pretty sweet! It'd be great if it could do video or audio streaming too, I wonder if it can broker that."
javascript,3e12ii,mustardhamsters,1 point,Tue Jul 21 03:38:39 2015 UTC,So am I correct in that the best application for this is real time secure audio and video? Such as a browser version of Skype and/or Vonage?
javascript,3e12ii,Seus2k11,1 point,Tue Jul 21 04:38:47 2015 UTC,"WebRTC is mostly used for those applications– audio and video. This should be able to set up that connection and enable some fallback to reconnect if things go wrong. However, WebRTC isn't supported on all modern browsers yet, so it's not quite ready for the big time."
javascript,3e12ii,mustardhamsters,1 point,Tue Jul 21 05:50:14 2015 UTC,I'd also like to see things like p2p maps and databases.  Basically just remove centralization from any one source by distributing it.
javascript,3e3c7d,etre_be,8,Tue Jul 21 17:14:40 2015 UTC,Am I the only one who thinks the original JavaScript is much cleaner than the miel version? Tracking scope without clear {} can lead to issues and no difference between var and let. IDEs don't know and and will treat it as errors.
javascript,3e3c7d,Ericth,1 point,Tue Jul 21 17:21:13 2015 UTC,"Yup, and wouldn't be great for those who use linters and coffeescript is a option that currently has more support."
javascript,3dxlxc,kevincennis,8,Mon Jul 20 11:09:35 2015 UTC,"I used this ""trick"" to implement semi working nix like pipes some time ago  https://github.com/dzautner/jsPipe"
javascript,3dxlxc,iSmokeGauloises,5,Mon Jul 20 14:50:03 2015 UTC,"EDIT: Just wanted to add that I like your post and think it's a great introduction to .valueOf().  Is there any reason to prefer .valueOf() over get/set in general? Get/set seem ideal in the integer case because the automatic boxing means that things like obj.value = 123; work transparently.  var num = {   _value: 12,   get value() { return _value; },   set value(n) { _value = n; } };"
javascript,3dxlxc,androbat,5,Mon Jul 20 15:36:20 2015 UTC,"Is there any reason to prefer .valueOf() over get/set in general?   One works with built-in functions and the other doesn't. For example:  var A = {   value_: 12,   get value() {     return this.value_;   } }; var B = {   value_: 12,   valueOf() {     return this.value_;   } };   Given the above 2 objects, the following will be the output:  Math.min(5, A); // NaN Math.min(5, B); // 5"
javascript,3dxlxc,brianvaughn,5,Mon Jul 20 15:58:46 2015 UTC,I see this syntax a lot:  Object#valueOf   What does that # mean? Prototype?
javascript,3dxlxc,Gymnocalycium,4,Mon Jul 20 17:23:46 2015 UTC,"Kind of, yeah.  The syntax is:  Class#member   Where member is a member variable (property or method) of an instance of Class. This is a distinction between what could be written as:  Class.member   Though that represents a static member (a member on the Class object).  The hash lets you know its a member of instances, not the class itself.    In casual conversation you usually just see it used with the dot operator and the reader gets to figure it out, but for more structured text, like in javadoc comments, the separation becomes important for linking to the correct definition."
javascript,3dxlxc,senocular,2,Mon Jul 20 18:25:41 2015 UTC,"So yes, replacing # with .prototype. would give the exact same meaning."
javascript,3dxlxc,PitaJ,1 point,Mon Jul 20 20:22:14 2015 UTC,"Not exactly. The member part of this format doesn't have to be prototyped.  It includes prototyped members, but is not exclusive to them. Instance members still apply.  function Foo() {    this.bar = 1; // Foo#bar } var foo = new Foo();"
javascript,3dxlxc,senocular,2,Mon Jul 20 20:49:40 2015 UTC,"No, it does not apply to instance variables which change, at least not in practice.   jQuery doc is the most common use of this syntax, and it is not used in non-constant instance variables, at least as far as I know."
javascript,3dxlxc,PitaJ,2,Mon Jul 20 21:09:32 2015 UTC,Oh yeah? What do they use?  I'm thinking javadoc where # applies to fields as well.
javascript,3dxlxc,senocular,2,Mon Jul 20 21:35:14 2015 UTC,"They use #, or at least used to."
javascript,3dxlxc,PitaJ,1 point,Mon Jul 20 21:50:04 2015 UTC,"I don't know that you two are really disagreeing. If I, say, returned a Proxy from new Foo that always had a bar property, it'd make sense for people and documentation to refer to Foo#bar to indicate an instance variable.   From an end-user programmer / API-consumer perspective, it very often doesn't matter per se where instance properties are located. Sort of like the bound Array method duplication in AS3, where [].AS3::filter !== Array.prototype.filter. Of course if you introduce new edge cases, you'll eventually trip some people up, but whatever."
javascript,3dxlxc,krilnon,2,Tue Jul 21 06:56:00 2015 UTC,I've never seen that before reading this thread.  How/why is that a convention over just typing out prototype?
javascript,3dxlxc,ericanderton,2,Mon Jul 20 20:23:41 2015 UTC,"For one its more concise - less typing.  Everyone loves that. Additionally it can be applied to many different languages, including those that have no prototype."
javascript,3dxlxc,senocular,1 point,Mon Jul 20 20:59:30 2015 UTC,"I'm not arguing that it's not concise, informative, or even a bad idea. I'm just wondering how the heck we arrived at such a thing;  it has no analog in any programming language that I'm aware of.  That's not even what # means in CSS, or any other regular grammars that I've used.  So then I'm asking myself: how did this little thing manifest... where did it come from?  To put it in perspective, I've been writing software for 15+ years, am all over various programming subreddits these days, and know several different programming languages.  This is the first time that I can recall that I've seen # used as an abbreviation for class/prototype.  It makes me wonder what else I managed to miss.  Nevermind.  It's a Javadoc convention - it only gets used when you have to reference some class static member or method from a Javadoc comment. So it's unusual, but not rare. See: @link"
javascript,3dxlxc,ericanderton,2,Tue Jul 21 16:14:49 2015 UTC,It's just easier than typing out the whole thing.
javascript,3dxlxc,PitaJ,2,Mon Jul 20 21:49:18 2015 UTC,"Yeah, exactly.  So Object#valueOf would be Object.prototype.valueOf, and Object.keys is just Object.keys.  It's just instance method vs static method."
javascript,3dxlxc,postmodest,3,Mon Jul 20 18:20:58 2015 UTC,"Or ""Reasons you might want to pick up the Rhino book today."""
javascript,3dxlxc,_doingnumbers,3,Mon Jul 20 16:05:58 2015 UTC,Actually - and please understand it took me quite a long time to figure this out - it's better to just read the spec.
javascript,3dxlxc,LukaLightBringer,2,Mon Jul 20 16:39:41 2015 UTC,"This is the first I've heard of this function, i knew toString was there tho. This might be useful for sorting objects."
javascript,3dxlxc,siegfryd,2,Mon Jul 20 14:14:13 2015 UTC,"Probably not, overriding valueOf doesn't work that well with equality checks because it doesn't work for ==. So the only way to check if two objects are ""equal"" with valueOf is to do A >= B && A <= B. Might as well just have a function that returns the comparison value for the object instead of relying on coercion."
javascript,3dxlxc,tencircles,2,Tue Jul 21 11:40:18 2015 UTC,decent intro to the topic but I seriously cringed when you put arithmetic methods on your Int prototype...then I cringed again just now when I remembered it. Please remove that from your article...for the love of god.
javascript,3dxlxc,tencircles,3,Mon Jul 20 18:34:35 2015 UTC,"Fair enough, I guess. But I feel somewhat compelled to remind you that the Int class was just an example to demonstrate a concept.   It's not like I gave it a Github repo and started trying to convince people to use that in real programs.   I needed an object that represented a numeric value, and that was a quick way to do it."
javascript,3dxlxc,x-skeww,2,Mon Jul 20 20:39:29 2015 UTC,"We both know that it was just a way to demonstrate valueOf, but my concern is that many readers who might just be learning javascript (or programming in general) might not pick up on that. There are plenty of other examples that could have been used that don't enforce the idea of non-reusability. I mean, your example holds up just as well if you just do int1.value + int2.value. Then you can even further demonstrate the value of valueOf by just using the +, -, *, and / operators at the end of the article."
javascript,3dxlxc,PitaJ,2,Mon Jul 20 20:56:22 2015 UTC,"ES7+ should get value objects and operator overloading.  So, you'll actually be able to do that kind of thing in sane manner.  SIMD and vector stuff will look just as sexy as it does in Dart."
javascript,3dycew,getify,5,Mon Jul 20 15:14:07 2015 UTC,"Interesting, but the same consistency argument made about ; vs => seems to apply with respect to the ~ trick vs say, foo && foo().  Arguably, foo && foo() is practically idiomatic by comparison to the obscure ~ operator.  (Note: this is not an argument about the ~ trick, which I actually use.  I'm just noting that the argument the author uses to attack things he/she doesn't like, can also be used to attack the things he/she does like.  So it seems like a weak argument.)"
javascript,3dycew,pje,1 point,Mon Jul 20 20:37:30 2015 UTC,"Just FTR, I was not attacking any of the things I talked about in the article. I was saying I think they're more clever than clear. I fully admitted that the ~ thing is a pretty slight edge -- it could go either way.  I also tried to make the point several times that all of this is subjective and not objective fact like a lot of people imply when they throw around phrases like ""more readable"". :)"
javascript,3dycew,EsperSpirit,2,Tue Jul 21 01:22:57 2015 UTC,"Serious question: What is the problem with the =>syntax? I think using arrows to represent functions is probably the most intuitive and concise way.   When I first saw haskell type annotations used in javascript (somefunction :: String -> Int) I immediately understood what was going on, even without knowing about Haskell or FP back then.   In fact, I find it ironic that some of the same crowd that loves to remove punctuation like ; prefers to insert punctuation in place of keywords, like =>. Come on! Is punctuation good or bad for code!?   It's not about punctuation, it's about not writing useless, meaningless stuff, that's cluttering the code. Expressing a lambda function is something specific and different from a constant value or a reserved keyword. It has meaning. Semicolons after every line don't really have meaning. You just type them because you have to.  I'm with you on the clear > clever part, but putting in semicolons doesn't in itself make code clearer, quite the contrary imo. In the case of javascript you should do it to avoid pitfalls, but that's not clarity, that's a workaround."
javascript,3dycew,MunchGamer,3,Tue Jul 21 17:22:28 2015 UTC,"I immediately understood what was going on   Given that I spend my whole ""job"" time in front of JS learners, especially (now) those new to the language or even new to programming entirely, I can confidently say that the vast majority of them don't see arrow function syntax and ""immediately"" understand them. It takes a bit of explanation. More than a bit, sometimes.  The normal function syntax as (lambda) expression also takes some teaching, but I've found the mental barriers to be far less cumbersome on the whole.  As I've eluded to elsewhere, I think this kind of argument you're making -- that arrows are universally (or even mostly) taken as a readability improvement -- to be based on false assumptions and confirmation bias.   What is the problem with the =>syntax?   I generally don't like them because I believe it to be a bit of ""abuse"" of the mechanism just to save characters, on the assumption of prior familiarity with such constructs and at the expense of being readable to new eyes. They were primarily designed to solve the ""lexical this"" problem -- a real problem that I'm glad they solve, but one that is rarer in my code than is often asserted -- and the shorter syntax should be seen, IMO, as a far distant secondary side-effect.  Moreover, I think they don't carry their own weight, given the several syntactic quirk special rules. I go into a lot more depth about arrows and their pluses/minuses in this book section -- basically the case for and against them --  if you are interested in more specific detail:  https://github.com/getify/You-Dont-Know-JS/blob/master/es6%20&%20beyond/ch2.md#arrow-functions"
javascript,3dycew,ericanderton,8,Wed Jul 22 01:43:37 2015 UTC,"Not enough devs think about what happens when the next guy has to come in and maintain their code.  Good read, thanks for the submission!"
javascript,3dycew,mattdesl,3,Mon Jul 20 15:50:58 2015 UTC,"I swear, I've read some code that was written as to completely scare away any future maintainers;  it's as if the coder adhered to Job Security Driven Development."
javascript,3dycew,thebosz,5,Mon Jul 20 20:29:21 2015 UTC,"Whether or not you choose to use semicolons in your code, you should at least take a few minutes to understand the rules of ASI. It's better to understand the issue rather than pretend it doesn't exist.   Sadly many posts on the subject are more about calling out specific developers or code styles and trying to make a mockery of them."
javascript,3dycew,mattdesl,2,Mon Jul 20 18:45:02 2015 UTC,"Just so I don't repeat myself in comments, see here: https://www.reddit.com/r/javascript/comments/3dycew/well_actually_not_all_semicolons/ctbm6fo"
javascript,3dycew,sime,11,Wed Jul 22 01:37:28 2015 UTC,"Wait, there's an anti-semicolon movement? How stupid can you be?!?"
javascript,3dycew,mattdesl,9,Mon Jul 20 16:15:42 2015 UTC,"I find it amusing that a lot of people who think semicolons should be removed from end-of-lines will admit that semicolons are necessary if the next line begins with [ or ( or whatever, so they suggest putting the semicolon as a prefix to start the line!  I assume the only way you come to that conclusion is if you've already decided semicolon line endings are bad, and you get forced to solve these ASI issues and are unwilling to compromise on the line-ending."
javascript,3dycew,spacejack2114,-2,Mon Jul 20 19:02:46 2015 UTC,"Here's another way you might reach the same conclusion:  The only time you need a semicolon is preceding a statement starting with [ ` ( + * / - , .  By preceding these statements with a semicolon, you are showing your intent more clearly and safeguarding yourself against a potentially ASI-breaking statement.   To me, ASI-style code is more clear to read, produces less lint noise, and makes potential ASI-breaking statements more obvious. However, it took me a few weeks to come to this conclusion; before that I had no idea what ASI was, and just assumed JavaScript works in mysterious ways with regards to semicolons."
javascript,3dycew,mattdesl,21,Mon Jul 20 19:20:01 2015 UTC,...or we could just use semicolons to terminate our statements and skip all of this error prone nonsense above.
javascript,3dycew,spacejack2114,-6,Mon Jul 20 20:03:49 2015 UTC,"Sure. You are taking one approach: fixing the problem by patching every line. The ASI-style developers take a different approach: fixing the problem by patching problematic lines.  If you look at the rules, they are really simple. It is better to understand ASI, even if you prefer to use semicolons, than to pretend it doesn't exist.  PS: At the end of the day, a linter can catch all of these problems, so the whole discussion is moot. Use a linter, then choose whichever style you prefer."
javascript,3dycew,mattdesl,-2,Mon Jul 20 21:10:04 2015 UTC,"For my latest project I decided to try no semicolons. I like it a lot more than I thought I would. Now I find I'm in a hated minority group.  Idiot that I am, I wrote about 3KLOC without actually looking up the ASI rules and there were only two (initially mystifying) lines that the linter pointed out to me. One, I have an old, pointless habit of writing ++i instead of i++ when I don't need the before/after value of i. Two, an IIFE.  I'm having a hard time thinking of a way lines could start with , or . (that aren't continuations.)  One thing the linter doesn't seem to catch are files that start with a problem character."
javascript,3dycew,leptons,2,Tue Jul 21 00:52:33 2015 UTC,"What linter? I've been enjoying feross/standard and its tooling (plugins, formatters, etc). It took me a little while to get used to the indentation/spacing.   If you need something more custom, eslint is good. If either of those break on files starting with params, it might be a bug."
javascript,3dycew,Cody_Chaos,0,Tue Jul 21 04:09:50 2015 UTC,jshint gives me this. I simply can't abide by some of feross/standard rules though. :) jshint is currently broken for Atom so I might give eslint a try.
javascript,3dycew,Cody_Chaos,3,Tue Jul 21 12:52:57 2015 UTC,"showing your intent more clearly   I for sure don't get that from semicolon-prefixed lines. It takes a particular code perspective to think that (one which is, btw, backwards from the spirit of the specification).  I don't think there's much argument or precedent that developers new to a piece of code will look at a line with a semicolon prefixed and assume, ""oh, they're fixing an obscure ASI rule there, cool!"" Especially if that code has all other semicolons omitted, I would think the more likely assumption is an errant typo (that just happens to not break).  The point of this article is to encourage more developers to err on the side of code that is either more familiar to a larger audience, OR if learning must be done to understand it, let that be learning that is as broadly applicable as possible.  The more niche the trick they have to learn to decipher the cleverness, the less I find that learning as justification for the cleverness."
javascript,3dycew,TheIncredibleWalrus,0,Tue Jul 21 01:27:21 2015 UTC,"Everything is unfamiliar to a beginner. Using Function#bind() for partials, slicing arguments to an array, using process.nextTick in browser modules, using Array#some(), etc. These all appear in real-world JavaScript development whether or not you agree with them.  The goal of the JavaScript educator is to explain and demystify these problems. Instead, your article further shrouds ""ASI-style"" in mystery, and goes to great lengths to call out some developers by name for their coding style.  The ;[ expression was strange when I first saw it. After several minutes reading about ASI, it became pretty clear. By understanding the simple ASI rules, I felt better equipped to spot and avoid ASI errors (which can occur in any situation where linting is not enforced).  This is why I suggest developers learn about ASI regardless of their preferences or coding style."
javascript,3dycew,androbat,2,Tue Jul 21 05:22:00 2015 UTC,"I agree developers should learn ASI. Absolutely. I taught about it in detail in my ""Types & Grammar"" book (https://github.com/getify/You-Dont-Know-JS/blob/master/types%20&%20grammar/ch5.md#automatic-semicolons). This notion that I shrouded it in mystery is non-sense. I said at the beginning I wasn't going to re-tread the same ground already covered many times.  But more importantly, I don't think learners should have to learn ASI to understand your code -- or rather why your code broke -- as is illustrated in that final code example of my article.  I am a huge proponent of developers being encouraged/challenged to learn more, and coding is a primary vehicle to spur that on. But one of the main points of my article applies here, so let me just quote myself:   This is the most important take-away from this post, so don’t miss it! Learning a core mechanism like coercion will keep paying off throughout the current and all future code, so the effort is more than worth it. When a future developer on your team has to learn a specific trick that you’ve always liked, that learning (perhaps nothing more than just memorization) often has far less widespread applicability.   The takeaway should be that we favor -- when possible -- writing code that encourages learning of things that are widespread applicable (even, say, beyond the language in question) so that the learning pays off.  I would argue learning ASI has a drastically lower payoff, so it's one of the last things I want developers to learn, not one of the first."
javascript,3dycew,PlNG,-2,Wed Jul 22 01:34:26 2015 UTC,"I find it amusing that a lot of people who think semicolons should be removed from end-of-lines will admit that semicolons are necessary if the next line begins with [ or ( or whatever, so they suggest putting the semicolon as a prefix to start the line!   You know what I find amusing? I see a lot of superstitious usage of semicolons, all over the place. People putting semicolons where they don't need to just because they assume a line without a semicolon will somehow cause something bad to happen, or catch the ire of the semicolon-dogma-squad.  You can't have it both ways, and it seems that many of the people suggesting that semicolons are mandatory don't always know where not to use them, so they just add them everywhere."
javascript,3dycew,mattdesl,7,Mon Jul 20 21:11:15 2015 UTC,"Here's a hint:  Style guides and linters are 100% about things which are NOT mandatory.  You don't need a style guide to remind you that JS functions need a return keyword in order to actually return a value; you need a style guide to remind you that your team has decided that there should always be a space between return and any trailing parentheses.  Is the space in return (foo) optional?  Could it be written as return(foo)?  Yes!  Should you write return(foo)?  I dunno, it's up to you, although you probably shouldn't, no.  Should you write condescending Reddit comments about the superstitious usage of spaces, and people putting spaces where they aren't needed?  No."
javascript,3dycew,sime,2,Mon Jul 20 21:55:46 2015 UTC,"I know, right?  Amusingly, one of the better code linters around is named Standard, which is actually written by the ""Feross"" mentioned at the start of the linked article.  And it enforces a no-semicolon style, which is funny because that's not a common style in the JS world, and is absolutely not the standard.  But it's okay, for those who want to use standard with standard semicolon usage, the ironically named semistandard is a fork of standard that follows actual language standards.  In case it's not clear, the whole naming thing strikes me as absolutely hilarious.  :)"
javascript,3dycew,mattdesl,2,Mon Jul 20 21:56:25 2015 UTC,it's wishful thinking.
javascript,3dycew,sime,-2,Wed Jul 22 01:36:09 2015 UTC,Jesus Christ this is exactly the reason why us JavaScript devs are made fun of every day.
javascript,3dycew,PlNG,2,Tue Jul 21 02:42:14 2015 UTC,disclosure: self submission.
javascript,3e0ajd,clessg,4,Mon Jul 20 23:38:19 2015 UTC,"Modules! The most significant feature, imho."
javascript,3e0ajd,hulfsy,1 point,Tue Jul 21 06:27:50 2015 UTC,Another vote for modules here.
javascript,3e0ajd,maxk123,1 point,Tue Jul 21 09:30:49 2015 UTC,"I love the function of arrow functions but I kind of hate the syntax. Not that I have a better suggestion off the top of my head, but they look so out of place to me."
javascript,3e0ajd,Mackinstyle,-1,Tue Jul 21 01:25:16 2015 UTC,"I want the thin arrow to go with it but the fat arrows are definitely my favorite feature. It made it possible to use the OO paradigm. People often use the class keyword as an example of new or refined OO in the language, but not losing this context actually lets you use instanced when you need to."
javascript,3e0ajd,Rezistik,1 point,Tue Jul 21 06:32:41 2015 UTC,"Destructuring!  Love the convince, and the ability to split out an options object so easily.   Default values!  FINALLY - Is all I really have to say here.  Spread  and rest  These three work really well together. They are my favorites"
javascript,3e0ajd,Gelus,1 point,Tue Jul 21 02:04:01 2015 UTC,"Probably get the most use out of arrow functions and object literal enhancements (mostly method syntax and {foo, bar} shortcut). But destructuring + spread is my subjective favorite. I like how it enables new terse patterns for things. Like, tuple-returning functions aren't absurd now."
javascript,3e0ajd,radhruin,1 point,Tue Jul 21 02:50:05 2015 UTC,"And I can destructure function params now! So I can write stuff like this:  function everyOther([first, second, ...rest]){     if (!first) { return []; } // base-case of []     else { return [second].concat(everyOther(rest)); } }   Now just bring in full-on pattern-matching and I can write nice OCamlish Javascript! :D  ...but that usually requires a type system..."
javascript,3e0ajd,tapesmith,1 point,Tue Jul 21 13:28:52 2015 UTC,"Destructing is a language feature that I went from being ambivalent about, to finding that I can't even write JS without it these days."
javascript,3dx1pu,triscabor,4,Mon Jul 20 06:20:59 2015 UTC,d3issoamazingicantwaituntilireallyunderstandit.js   I bet all D3 devs have been there. :D
javascript,3dx1pu,I_Pork_Saucy_Ladies,4,Mon Jul 20 11:16:21 2015 UTC,Major kudos for the dedication and these are pretty damn cool!  although you might consider adding a seizure warning to a few of them.
javascript,3dx1pu,Neurotrace,1 point,Mon Jul 20 21:19:07 2015 UTC,"Haha, thanks!"
javascript,3dx1pu,duchampsfountain,2,Wed Jul 22 01:27:26 2015 UTC,Full github link: https://github.com/christabor/etude
javascript,3dx1pu,ClassicTeddyBear,2,Mon Jul 20 14:17:28 2015 UTC,"I've been tempted to do something like this, but one a day always seemed a bit unfeasible. Nice job keeping it up."
javascript,3dx1pu,duchampsfountain,2,Mon Jul 20 12:07:31 2015 UTC,"Suppose one could do these in advance, like if you are in a super-flow-like mode one day you could pull out five of these and just let it rest for the next four days. All depends on how you count it and how you see it."
javascript,3dx1pu,eorroe,4,Mon Jul 20 12:45:32 2015 UTC,Maybe I'll aim for 365 in a day and spend the remainder of the year reflecting on the experience.
javascript,3dx1pu,marinated_pork,1 point,Mon Jul 20 17:44:38 2015 UTC,"Feedback: Make each day link open a new tab so I don't have to keep requesting your page again, and don't have to wait till it loads.  You could just add a <base target=""_blank""> to your <head>"
javascript,3dx1pu,pricks,1 point,Mon Jul 20 22:50:44 2015 UTC,Want to open a github issue and I'll fix it?
javascript,3dx1pu,I_Pork_Saucy_Ladies,1 point,Wed Jul 22 01:37:12 2015 UTC,This is great!
javascript,3dy3kn,bojzee,-1,Mon Jul 20 14:06:01 2015 UTC,"Following /r/javascript's advice, you end up with:  Tech Stack"
javascript,3dy3kn,KravenC,1 point,Mon Jul 20 19:04:05 2015 UTC,jsbin?
javascript,3e22pv,annoyedlittleshitt,6,Tue Jul 21 10:38:19 2015 UTC,It's more about what you can't do without JavaScript - interactive web interface.
javascript,3e22pv,tomaskikutis,4,Tue Jul 21 10:52:05 2015 UTC,"The point is that whatever you did in Java or C# could be done in JS and run in a browser. Meaning, you don't have to pay Apple or Google to publish or approve your software, or convince someone to install an executable on their PC, and your users have a fairly solid guarantee that you can't do anything nasty with your app."
javascript,3e22pv,spacejack2114,3,Tue Jul 21 13:17:24 2015 UTC,"You're being downvoted because of your not-so-charming blend of ignorance and arrogance, but I'm going to try to help out anyway.  JavaScript is a programming language like Java and C#. There's nothing you can do in JavaScript that you can't also do with Java and C#, with one major exception: JavaScript is ubiquitous.  In order to run your Java or C# program, you have to convince somebody to visit your web page (or app store page), download your app, install it, and run it. That's a lot of hoops, and users have been taught not to run untrusted programs. You're going to lose a lot of them between step 1 and step 4.  In order to run your JavaScript program, you have to convince somebody to visit your web page. Done. The browser automatically downloads and runs your program. Immediately. Without prompting the user*. It just goes. If you release a new version, everybody automatically gets the latest version*.  *Except a few special cases not worth mentioning right now.  If you're trying to get people to use your software, this is huge. Less hoops = more users = more opportunities to make money.  If you're trying to be agile and deliver frequent updates, hassle-free release is also huge. Everybody on the same version = simpler maintenance and lower support burden = lower costs. Plus: small, frequent releases = more opportunities to iterate = better product = more opportunities to make money.  JavaScript is big because it's the only language* that works this way. There is nothing else that allows you to deliver software as transparently and cheaply as JavaScript. Nothing.  Every modern web site on the Internet is actually software that your browser downloads and runs when you visit the site. These sites makes billions of dollars. The software is written in JavaScript (and HTML and CSS). The sites wouldn't function without JavaScript. Reddit wouldn't function without JavaScript. There's no other way* to do it.  And that's why people care about JavaScript."
javascript,3e22pv,jdlshore,3,Tue Jul 21 19:05:45 2015 UTC,seen google docs? gmail? html5 games? chrome experiments? it's all javascript.
javascript,3e22pv,recrof,2,Tue Jul 21 11:10:29 2015 UTC,gtfo
javascript,3e22pv,changingminds,6,Tue Jul 21 10:54:54 2015 UTC,I somewhat agree here. Mainly because:   I somehow never needed anything other than pure Java or C# (no PHP either)   This tells me OP has no interest in self learning a new language.
javascript,3e22pv,papers_,2,Tue Jul 21 14:19:45 2015 UTC,"its common to call your library [library]dotjs in the javascript world.  nodejs is the v8 javascript engine (from chrome) as a stand alone executable. they added a file system api and other apis and called it node, so you can write javascript scripts for shell/linux/windows desktop too. and it has a built in webserver so you can write a webserver/web app with it.  express is a nodeJS library. its basically a node webserver with a nicer api, routing and templates. socket.io is express.js with websockets, and so on...  backbone is a html+js framework.  gl :)"
javascript,3e22pv,mc_hammerd,1 point,Tue Jul 21 11:12:01 2015 UTC,"As a language meant for embedding, it can't do anything outside of its VM unless you introduce some APIs to it. V8 by itself can't even write to stdout.  So, you could, for example, register some method for firing a machinegun. Scripts running inside that VM would now be able to fire it.  Scripts running in Node can just read/write files. Scripts running in the browser can't."
javascript,3e22pv,x-skeww,1 point,Tue Jul 21 12:05:12 2015 UTC,"Nowadays you can do a lot with only JavaScript and ""HTML5"" features. Some browser demos can be found at Chrome Experiments and Mozilla Demo Studio. NodeJS brings JavaScript to servers and it's also used for many command-line applications. Also it's possible to develop mobile and desktop applications with Cordova, Qt QML, NW.js, GNOME3 and many other places."
javascript,3e22pv,mtaon,1 point,Tue Jul 21 13:49:01 2015 UTC,This video might clear things up.
javascript,3dxcjt,chris_engel,6,Mon Jul 20 08:55:02 2015 UTC,Do you have an example of a large web application built with the library?
javascript,3dxcjt,exomind,6,Mon Jul 20 09:42:10 2015 UTC,"We've used the library so far mainly to create apps for our customers, so I'm a bit in trouble showing ""large"" examples. The largest app that will be available for ""the public"" is InSite Feedback ( http://insite-feedback.com ) I'm currently working on. Both website widget and control center has been built with modoJS.  I've also prepared updates for SimpLESS ( http://wearekiss.com/simpless ) and SpritePad ( http://wearekiss.com/spritepad ) that are both based on modoJS, but are not online right now because I'm not ready with them :(  I'm working hard to at least make those projects all available for public access, soon - bear with me, I only have two hands and 24hours a day :D"
javascript,3dxcjt,maximinus-thrax,4,Mon Jul 20 11:43:31 2015 UTC,"Hey - I am the author of the library and will happily answer any questions about it!  I've spent the last two years building it and writing all the docs but there is still a lot of work that can be done, so I'd love to find some additional contributors :)"
javascript,3dxcjt,ndjoe,4,Mon Jul 20 08:58:21 2015 UTC,"Looks good at a first glance, but there are a few bugs (in Firefox 38 for Linux Mint) on http://docs.modojs.com/kitchensink/:   Default popup cannot be closed or moved around Dropdown box text is not vertically centered (on the button) Switching to Darkspot theme gives me a SyntaxError: JSON.parse: unexpected character at line 1 column 1 of the JSON data Clicking on any button leaves a dotted box inside the button   Otherwise, it does look good. Just one more thing; could you explain the logic behind the line   <script>!window.jQuery && document.write('<script src=""lib/js/jquery-2.1.4.min.js""><\/script>')</script>   Considering you already load jquery on the previous line?"
javascript,3dxcjt,pholmq,5,Mon Jul 20 14:41:51 2015 UTC,"Yup, the kitchen sink is a mess. One of the unfinished parts of the project. Actually listed in the ""to do"" page... I think I just forgot to remove the kitchensink URL in the themes section, sorry ^  The line you refered to is a way to make sure jquery is being loaded if the CDN is down/not reachable. If the previous script has a timeout, the script will be loaded from the ""local"" webserver. Thats a pretty common pattern in the web."
javascript,3dxcjt,pholmq,2,Mon Jul 20 15:05:15 2015 UTC,"no virtual dom? no ""pure functional bla bla bla programming"" style ? BLASPHEMY!!! lol jk, maan i miss the old days when building website i just slap some jquery and then im good to go, not need to worry about anything else"
javascript,3dxcjt,usagiusagi,2,Mon Jul 20 18:38:48 2015 UTC,"No blabla, just a dead-simple library that really helps. Just like in the ""old days"" when you could slap some jquery ;)  But don't get me wrong: the library won't encurage sloppy coding like in the old days! ;)"
javascript,3dxcjt,usagiusagi,7,Mon Jul 20 19:41:32 2015 UTC,"http://hilton.org.uk/blog/javascript-frameworks-days.png  Sorry, could not help it. Im sure its a great library"
javascript,3dxcjt,_basem_,5,Mon Jul 20 10:40:02 2015 UTC,"You will laugh: EXACTLY because of that I always call this project just a library, not a framework. :D  And exactly because of this, the library is based on BackboneJS and jQuery - because ""I've seen milk lasting longer than some frameworks"" ;)"
javascript,3e02fb,TheBeardofGilgamesh,3,Mon Jul 20 22:35:00 2015 UTC,"Maybe look into Yahoo's YQL. I see there is a public table for Google searches. No need to make use of a backend.  A query like ""select * from google.search where q = ""linux"" returns a JSON response - truncated below:  ""results"": [     {      ""GsearchResultClass"": ""GwebSearch"",      ""unescapedUrl"": ""https://www.linux.com/"",      ""url"": ""https://www.linux.com/"",      ""visibleUrl"": ""www.linux.com"",      ""cacheUrl"": ""http://www.google.com/search?q=cache:RFwrCUQ-Uw4J:www.linux.com"",      ""title"": ""<b>Linux</b>.com | The source for <b>Linux</b> information"",      ""titleNoFormatting"": ""Linux.com | The source for Linux information"",      ""content"": ""<b>Linux</b>.com - For the community, by the community, <b>Linux</b>.com is the central \nsource for <b>Linux</b> information, software, documentation, how-tos and answers \nacross ...""     },     {"
javascript,3e02fb,philsco,2,Tue Jul 21 03:07:20 2015 UTC,"I've not tried this, so take it with a grain of salt.   You could try using AJAX to submit a query to the Googs: http://www.google.com/search?q=[**your+string+here**]&ie=utf-8&oe=utf-8  Then you could parse the returned document for the result.   Just spit balling, there maybe a better solution that I'm not aware of, but I'm about 10 minutes from bed time so....  Also, is there a reason you don't want to register your app? Most APIs require a key to prevent people from spamming the service."
javascript,3e02fb,madman86,1 point,Tue Jul 21 03:01:03 2015 UTC,"Pretty much the same solution I recommended.  Just not certain if he'll run into XSS issues directly querying Google via AJAX?  Also good point about registering as eventually if Google sees the activity as suspicious, it will start requiring a captcha code to make sure you're not a bot and the AJAX requests will fail."
javascript,3e02fb,sus3k,1 point,Tue Jul 21 03:16:28 2015 UTC,Make an XMLHttpRequest to Google with the search term in the query string.  You may have to do this server side as you'll probably get a cross-site scripting error trying to do it with JavaScript.  You can then load the response in DOM object and parse the results for the first YouTube link.  So your JavaScript would essentially be making a request to your server side code that is making the request to Google to get the search results.
javascript,3e0mwy,MunchGamer,1 point,Tue Jul 21 01:19:21 2015 UTC,"Comments, questions, feedback, etc... greatly appreciated!"
javascript,3e0mwy,XPostLinker,1 point,Tue Jul 21 01:19:50 2015 UTC,XPost Subreddit Link: /r/node   Original post: https://www.reddit.com/r/node/comments/3e0k6b/tlc_template_language_great_for_isomorphic/
javascript,3dzqno,sovanyio,1 point,Mon Jul 20 21:08:45 2015 UTC,"Implemented something similar last week, but after a bunch of thought went with { ""value"": ""label"", ""value"": ""label"", ... }. My labels will generally have non-alnum chars, while my ""values"" will always be DHT document references. It seemed slightly counter-intuitive at first, but the reasoning is that the highest precedence is on the left, nothing unexpected will happen if labels are duplicated, it's easy to recover when a label is missing, and weird chars/long strings won't make their way into the hashmap.   Nothing you couldn't argue either way, but I think the most important thing is that ""labels"" are subservient to (right of) ""values"", just as values are to the right of keys. A sidenote, didn't end up going with JSON Schema, as it would have had to be shoehorned in too much to fit with what we wanted to do - so take this with a grain of salt."
javascript,3dzqno,neftalydotcom,1 point,Mon Jul 20 22:09:46 2015 UTC,"Having trouble understanding what you mean. When using ASF, it seems only be able to use an enum of strings (or other simple types) and chokes on the object.  I do have an example of objects being used, but it requires duplicating the enum outside of the schema into the ASF form definition. I can probably just copy this programatically, but it seems clunky.  I am playing with serializing the object into the value as json though and deserializing before the form's model is passed into the schema validator, since the validation is where I am getting chocked up with my current modification to support the object enumeration."
javascript,3dzqno,neftalydotcom,2,Mon Jul 20 22:58:54 2015 UTC,Does oneOf cover what you're describing? Hopefully you wouldn't need to change anything (aside from your data structure).   https://github.com/json-schema/json-schema/wiki/enumNames-(v5-proposal)
javascript,3dzqno,neftalydotcom,1 point,Mon Jul 20 23:42:03 2015 UTC,"Thanks for this, I hadn't seen that syntax before. Unfortunately ASF doesn't support oneOf currently ಠ_ಠ.  I may end up doing the following which at first glance seems to accomplish what I want:  $scope.schema = {     type: ""object"",     properties: {         first: {             title: ""Question?"",             type: ""object"",             enum: [                 {                     value: 01,                     ""desc"": ""One""                 },                 {                     value: 02,                     ""desc"": ""Two""                 },                 {                     value: 03,                     ""desc"": ""Three""                 }             ]         }     } }; $scope.form = {     key: ""01"",     type: ""select"",     titleMap: [         {             name: ""Display value of 1""             value: {                 value: 01,                 desc: ""One""             }         },         {             name: ""Display value of 2""             value: {                 value: 02,                 desc: ""Two""             }         },         {             name: ""Display value of 3""             value: {                 value: 03,                 desc: ""Three""             }         }     ] }   By only defining it on the schema and then pulling it out and throwing it on the form programmatically. That way I can pass the object around and receive both values on the form while having the label->value support."
javascript,3dytkp,TheBeardofGilgamesh,2,Mon Jul 20 17:16:33 2015 UTC,"So, the entire browser becomes unresponsive or just the tab you were working with ?  If it's only that one tab it can be a memory leak issue or a loop/timer that is stuck somewhere. Or just a good 'ol infinite loop. Chrome usually works fine even though a tab is unresponsive.  You can check how much memory the tab takes up under ""Tools > Task Manager"" in chrome (sorry, I do not have english UI, so it might be spelled differently). You can also use the profiling tools to take a snapshot to see exactly what is taking up memory.  Tried clearing your cache ? Try running a profile to log what is happening over a period of time.  Edit Also try disabling plugins. Fresh reinstall... or in worst case create a new profile and import the old one."
javascript,3dytkp,andersevenrud,1 point,Mon Jul 20 20:13:23 2015 UTC,"Well the interesting thing is that the actual localhost application works just fine, other websites work fine too. but google acts weird."
javascript,3dytkp,andersevenrud,1 point,Mon Jul 20 22:39:11 2015 UTC,"Weird. If you find out let me know! If I get some ideas, I'll let you know"
javascript,3dytkp,lewisje,1 point,Tue Jul 21 09:32:55 2015 UTC,"for (var thing in window) window[thing] = null;  or for a more thorough environment cleanup,  function cleanup(node, count) {   'use strict';   var clean = (typeof node === 'function' ||                (typeof node === 'object' && node != null)) ?               node : window,     i = count > 0 ? count : 1, test;   for (test in clean) {     try {clean[test];} catch (e) {continue;}     if (typeof clean[test] === 'function' ||         (typeof clean[test] === 'object' &&          clean[test] != null)) {       if (i < 10) cleanup(clean[test], i + 1);       try {clean[test] = null;} catch (e) {}     } else {       try {clean[test] = null;} catch (e) {}     }     try {delete clean[test];} catch (e) {}   }   try {     clean = null;     node = null;   } catch (e) {} } cleanup(window);   It still won't get rid of functions and timers and other such things defined in closures, without any handles from external code, but it should be a start. 😉"
javascript,3dytkp,immibis,3,Mon Jul 20 20:27:35 2015 UTC,for (var thing in window) window[thing] = null;    Totally not going to break anything.
javascript,3dytkp,lewisje,1 point,Tue Jul 21 04:18:53 2015 UTC,The longer script I posted actually causes an attempt to navigate to /null so maybe I should just skip over window.location and related properties; also I am trying to get everything to stop on the page. 😎
javascript,3dytkp,palmerj3,1 point,Tue Jul 21 22:28:33 2015 UTC,"Seems like there might be something else going on causing the lockups.. but if there is, in fact, a conflict there is a possibility you're running your local server on the same port as the chrome remote debugging api.  https://developer.chrome.com/devtools/docs/debugger-protocol"
javascript,3dy73j,elekaton,1 point,Mon Jul 20 14:33:47 2015 UTC,"I like to use https://github.com/umpirsky/country-list, as I can get the country names in different locales, making internationalization easier."
javascript,3dy73j,realityking89,1 point,Mon Jul 20 15:27:58 2015 UTC,This should be on npm instead of a gist.
javascript,3e08ks,alejalapeno,1 point,Mon Jul 20 23:22:53 2015 UTC,You’re current solution stops working as I navigate around the page. The way to fix this is by passing in callbacks for the onAfter and onBefore events that Smooth State provides. Customize your options for the smooth state plugin to bind and unbind the event listeners based on the current url path when the onAfter and onBefore events are fired. This is the exact reason why these events are provided with the plugin.   Currently in your minified code I am not seeing you passing any options into your instantiation of the plugin. You should unminify and comment it if you'd like more help on it.
javascript,3e08ks,marinated_pork,1 point,Tue Jul 21 03:40:51 2015 UTC,"You’re current solution stops working as I navigate around the page.   Could you tell me how you get it to stop working? Navigating anywhere, even to the same page, or refreshing the page doesn't stop it for me.  And you're right, I am not passing options. I am simply running the moveMe() function onStart and onAfter. Instead of checking for the current url path, moveMe() simply checks for #about-page and my variable canvasListentells it whether or not it should add the listener or remove the listener. What benefit would I have moving these if checksums to the smoothState callbacks?  onStart: {   duration: 250,   render: function ($container) {     moveMe();     $container.addClass('is-exiting');    } }, onReady: {   duration: 0,   render: function ($container, $newContent) {     var href = smoothState.href;     var myID =  href.substring(href.lastIndexOf('/') + 1);     $('body').attr('id' , myID + '-page');     $container.removeClass('is-exiting');     $container.html($newContent);   } }, onAfter: function ($container, $newContent) {     if (nameHidden) {         hideName()         nameHidden = false;     }     s.refresh();     moveMe();     ga('send', 'pageview'); }   That's the requested unminified, thanks for the help!"
javascript,3e08ks,marinated_pork,1 point,Tue Jul 21 03:56:30 2015 UTC,If I go to the contact page.
javascript,3e08ks,marinated_pork,1 point,Tue Jul 21 04:05:18 2015 UTC,"Thanks! My Javascript was inside the smoothState container on that page. ""Bug"" fixed."
javascript,3dy9zf,guthran,3,Mon Jul 20 14:56:08 2015 UTC,"If you're using Angular your best option is protractor for e2e testing and they recommend Karma & Jasmine for unit, they have a pretty comprehensive guide here: https://docs.angularjs.org/guide/unit-testing"
javascript,3dy9zf,helderroem,2,Mon Jul 20 15:37:14 2015 UTC,"if there's no testing yet, it might be hard to start out with karma and jasmine due to current code design. in that case, you can bring some flows under test using selenium, and then refactor the existing code to be testable using karma/jasmine."
javascript,3dy9zf,freekpaans1,2,Mon Jul 20 16:30:40 2015 UTC,"Jasmine is pretty great, quite easy to get up to speed on."
javascript,3e148y,yuningalexliu,2,Tue Jul 21 03:44:49 2015 UTC,How does this compare to five? It seems like this module cuts down on functionality to focus on the core concept.
javascript,3e148y,I_Pork_Saucy_Ladies,0,Tue Jul 21 07:47:18 2015 UTC,I don't think you get it? Try googling: the answer to the ultimate question of life the universe and everything
javascript,3e148y,eorroe,1 point,Tue Jul 21 10:32:58 2015 UTC,"Try clicking the link I posted and you'll see that I do, indeed, get it. :)"
javascript,3e148y,I_Pork_Saucy_Ladies,1 point,Tue Jul 21 11:02:46 2015 UTC,"I did, and it seems like it actually does something, you have five.map([1,2,3])and five.reduce([1,2,3]) where this post its just simply returning 42 no more, no less. But w.e"
javascript,3dyeaj,levraifix,4,Mon Jul 20 15:28:16 2015 UTC,http://d3js.org/ :)
javascript,3dyeaj,andersevenrud,2,Mon Jul 20 15:43:19 2015 UTC,"Theres a slew of these JS libraries. D3 is the highest at customization at the moment, but if you just want your typical charts then ChartJS works too."
javascript,3dz6v3,vt97john,2,Mon Jul 20 18:48:15 2015 UTC,Drop me (geertjan.wielenga@oracle.com) a mail and we'll work on a NetBeans TypeScript plugin together on GitHub.
javascript,3dz6v3,geertjanwielenga,1 point,Mon Jul 20 20:52:37 2015 UTC,"Just use VS Code / Visual Studio, Atom, Sublime, Eclipse, or WebStorm."
javascript,3dz6v3,x-skeww,1 point,Mon Jul 20 19:07:06 2015 UTC,I prefer Netbeans because I do a lot with Java and I don't like Eclipse and I don't want to pay for IntelliJ or WebStorm and I don't like non-IDEs like Sublime or Atom.
javascript,3dz6v3,x-skeww,1 point,Mon Jul 20 19:55:07 2015 UTC,Netbeans doesn't even support ES6 properly.  Just use VS code for the time being.  https://netbeans.org/bugzilla/show_bug.cgi?id=233197 https://netbeans.org/bugzilla/show_bug.cgi?id=242387
javascript,3dz6v3,x-skeww,1 point,Mon Jul 20 20:09:00 2015 UTC,But I like IDEs that have good Java support too.  IntelliJ is probably the best but I think a lot of the Federal contract jobs in my area (DC) only allow Eclipse and Netbeans.
javascript,3dz6v3,hulfsy,1 point,Tue Jul 21 14:53:45 2015 UTC,"But I like IDEs that have good Java support too.   You can just run one application for the backend stuff and another one for the frontend stuff.   I think a lot of the Federal contract jobs in my area (DC) only allow Eclipse and Netbeans.   I don't really see how that is supposed to improve anything. Netbeans and Eclipse plugins can do whatever they want.  Well, you can either use Eclipse, port the Eclipse plugin, or pay someone to port the Eclipse plugin."
javascript,3dxb8j,krumoksnis,8,Mon Jul 20 08:34:30 2015 UTC,"The reason the DOM is slow is because it has to support every possible use case.  Something as simple as reading some attribute of an element might cause an expensive reflow or recalculation of styles, because that attribute is in some way related to information that is only known after everything's been laid out.  And you can never quite be sure when that's going to happen.  It's got nothing to do with partial diffs.  It's that there's nothing you can do with React's quasi-DOM that can possibly trigger a reflow, because that doesn't even exist.  (And also that there are no host objects involved, it's all pure JS.  Pure JS is easier for the engine to optimize then when code is constantly sprinkled with calls into and out of native code.)  That also means that you can't do all the things you would be able to do with the real DOM (e.g. query elem.clientWidth of an element.)  A browser can't suddenly stop supporting those things, because tons of pages would break."
javascript,3dxb8j,Rhomboid,1 point,Mon Jul 20 08:54:19 2015 UTC,So if you're using react and need the width of an element how would you go about it?
javascript,3dxb8j,Jon889,2,Mon Jul 20 14:14:03 2015 UTC,"You need to wait the page layout, because this particular width might depend on a lot of things on the rest of the page. And yes, this means reading from the DOM.  Ideally, you shouldn't be needing this width for anything. Remember that each browser, screen size, etc. may lay out things differently - you should accommodate those users writing a responsive site, not with hacks."
javascript,3dxb8j,protestor,2,Mon Jul 20 15:52:35 2015 UTC,"Say you have two lines of javascript code. One changes the width of an element, another checks the position of another unrelated element. For DOM to work, browsers have to completely reflow and rerender after the first line of code so that the second line gets a valid result; because its impossible to predict whether or not the first affects the result of the second, it just has to do all the work every time you do anything. There's a lot of optimization that can happen here, but with React you just don't have that requirement; you basically construct a model and then push it to the DOM once when you need to rerender. This is faster than, say, JQuery style manipulations where you touch the DOM a lot, because you only need to rerender once instead of many times."
javascript,3dxb8j,LossFor,2,Mon Jul 20 15:10:39 2015 UTC,Say you actually need to see something in your screen...
javascript,3dxb8j,g3bj45hg34857,1 point,Mon Jul 20 17:12:45 2015 UTC,"Eventually, everything works with the DOM cause the elements MUST be inserted. React, (iirc cause it's been a while since I read about it), builds everything ""off DOM"" and then inserts it into the DOM. So the document tree is built outside the browser, if you will.  You can do the same thing yourself."
javascript,3dxb8j,dhdfdh,1 point,Mon Jul 20 13:29:15 2015 UTC,"What react does is create basically a giant hash of what your DOM looks like, almost like a cache of it.  It's quicker for react to check the single properties that are changing under it's control then it is for the browser to watch all of those elements and properties.   The magic of the virtual DOM is actually really simple which is one reason it's so awesome. It's also why dozens of tiny react-alike platforms without JSX emerged after React. React's main benefits are JSX and it's diff algorithm."
javascript,3dyd69,sarahd094,2,Mon Jul 20 15:20:01 2015 UTC,If you're using the leaflet tutorial then you'll need to change the URL used for the basemap to something you own   You can create a free account at mapbox to get basemapping URL.  If that's not the issue then post your code.
javascript,3dyd69,uncookedprawn,1 point,Mon Jul 20 18:57:59 2015 UTC,"I had a look at mapbox but I couldn't work out how to upload it or anything to get the url.  I'm using this image: http://i.imgur.com/ygJBIbv.jpg  Then I've cut it into tiles and used the code below. I just can't add markers. I've seen other websites use the same/similar code but it's all a bit confusing when you're new to java :S  I'll post the whole thing soon on my website so you can look at the source codes.        function init() {     var mapMinZoom = 3;     var mapMaxZoom = 6;     var map = L.map('map', {       maxZoom: mapMaxZoom,       minZoom: mapMinZoom,       worldCopyJump: false,       crs: L.CRS.Simple     }).setView([0, 0], mapMaxZoom     );         var mapBounds = new L.LatLngBounds(         map.unproject([0, 13459], mapMaxZoom),         map.unproject([15000, 0], mapMaxZoom));      map.fitBounds(mapBounds);     L.tileLayer('img/map/{z}/{x}/{y}.png', {        minZoom: mapMinZoom, maxZoom: mapMaxZoom,       bounds: mapBounds,       tms: false,       noWrap: true,       continuousWorld: true               }).addTo(map);   };"
javascript,3dte2d,clessg,67,Sun Jul 19 07:16:40 2015 UTC,Dude had a major case of impostor syndrome.
javascript,3dte2d,compubomb,17,Sun Jul 19 11:13:13 2015 UTC,This describes my life.
javascript,3dte2d,RyeBrush,5,Sun Jul 19 14:50:37 2015 UTC,I think of it as of a natural reaction to becoming an adult.
javascript,3dte2d,gngl,14,Sun Jul 19 21:54:34 2015 UTC,"I've been programming for over 20 years. I have certifications out the wazoo. Masters degree in EE. I always feel like a fraud. If you never feel this way, chances are you are incompetent and are self delusional. Psychological studies show that a feeling of competency is actually a sign of those who are incompetent."
javascript,3dte2d,EnIdiot,7,Sun Jul 19 21:31:24 2015 UTC,So having confidence means you're actually incompetent? wat
javascript,3dte2d,scootstah,9,Sun Jul 19 22:05:51 2015 UTC,"It's the whole ""you know what you don't know"" deal.   By feeling that you need to step your game up, you push forward and learn. On the flip side, if you think you are a god, why would you learn new things?"
javascript,3dte2d,Bajawah,-1,Sun Jul 19 22:57:53 2015 UTC,"Who said anything about thinking they are a god? He said that he has lots of certifications and experience, but yet he feels like a fraud, and that if you don't think that way you must be incompetent and/or delusional.  I do not think I am a god, and I know that there is a ton left to learn and things I can improve on. But at the same time, I recognize my accomplishments and have confidence in the skill level that I am at. I recognize that I am a lot better than I was a year ago.  So again, why does confidence mean that you are actually incompetent or delusional? Sounds exactly like imposter syndrome to me."
javascript,3dte2d,scootstah,1 point,Sun Jul 19 23:16:46 2015 UTC,"I'm not talking about you personally... ಠ_ಠ   I was only trying to say that confidence isn't bad.   But, God syndrome is bad."
javascript,3dte2d,Bajawah,1 point,Mon Jul 20 00:18:03 2015 UTC,"But God has knows a lot and even guided the creation of programming, so why should he feel like a fraud?"
javascript,3dte2d,magiclasso,6,Tue Jul 21 00:52:50 2015 UTC,"You can have confidence in your ability to accomplish the task at hand, but also know that you aren't as competent as you could."
javascript,3dte2d,shableep,4,Sun Jul 19 22:11:39 2015 UTC,"Sure, there's always room for improvement. That's not the same thing as feeling like a fraud, or feeling that your accomplishments mean nothing."
javascript,3dte2d,scootstah,2,Sun Jul 19 22:13:12 2015 UTC,"So having confidence means you're actually incompetent? wat   Feeling confidence isn't the same thing as feeling competence.  In such fast-moving fields, whether it's I.T., law or medicine, you should rarely feel ""competent"" because there is always more to learn. Feeling 100% competent implies you don't think you need to learn anything more. On the other hand, you can feel perfectly *confident* in your ability to rise to the challenge of new... er, challenges. Confidence in your ability to always improve your competence.  Don't tell your clients that, though. As far as they're concerned, you are 100% competent. :)"
javascript,3dte2d,waveform,3,Mon Jul 20 04:59:58 2015 UTC,"Basically Dunning-Kruger. As you learn more, you also discover even more that you don't understand."
javascript,3dte2d,Breaking-Away,2,Sun Jul 19 23:18:21 2015 UTC,"Absolutely, but that doesn't mean you can't have confidence in what you do know. How do you even land a job if you can't even prove to yourself that you know what you're doing?"
javascript,3dte2d,scootstah,2,Sun Jul 19 23:28:46 2015 UTC,"Well, a combination of things. I'm very confident in my skills as a web developer, but I am definitely not confident at all in my skills with C or rust. What I've found works for me is having confidence in my ability to learn, but it took a while to come to that mindset for myself."
javascript,3dte2d,Breaking-Away,4,Sun Jul 19 23:33:10 2015 UTC,Dunning–Kruger effect
javascript,3dte2d,Maguspk,1 point,Sun Jul 19 22:58:24 2015 UTC,"I disagree.  For me, one of the most important parts of handling this feeling is seeing and hearing other people talk about it and see them deal with it.   Every time I start getting down about myself, I remind myself that this is a common problem in the industry.  Chances are I'm still doing good work (haven't gotten fired yet) and haven't anything to worry about.  Imposter syndrome is one of the few things that I honestly believe the cure is simply know that it exists and is rather common."
javascript,3dte2d,slccsoccer28,97,Mon Jul 20 06:33:06 2015 UTC,"it's just CRUD frameworks and APIs doing all the real work for you.   Because ""real"" programmers reinvent the wheel every time they need to implement something more complex."
javascript,3dte2d,AlGoreBestGore,38,Sun Jul 19 10:22:50 2015 UTC,"Yeah, that mentality bugs the hell out of me.  I've been a professional programmer for more than a decade and have done everything from web work to writing graphics stuff for desktop systems and the whole ""real programmer"" thing is asinine.  Everyone in our field uses templates, libraries, and frameworks.  Everyone.  In fact, if I see a junior programmer trying to implement something from scratch I will often say that while I think it's admirable that they want to learn how to do that themselves, I'd prefer if they use a library if possible since more thought, planning, and analysis has gone into most libraries.  Plus, it's faster; in my experience dev teams tend to be overworked and libraries are an efficient way to implement features.  I think this mentality stems from the low point of entry that web programming has.  I think that's a good thing though; a web designer generally knows enough to be dangerous, because the point of entry is so low.  That can be beneficial for the overworked dev as the designer can do simple stuff while the dev does more complex things.  It's also worth mentioning, during my career I've seen plenty of folks who've gone from one of the ""real"" fields into webdev and they struggle just as much at first as a webdev into a ""real"" field.  The difference is that there is so much educational literature in webdev that they can read and get unstuck relatively easily, where in graphics for example you are generally just stuck with a API guide (if you're lucky) and the advice of others."
javascript,3dte2d,weegee101,13,Sun Jul 19 11:54:58 2015 UTC,"if I see a junior programmer trying to implement something from scratch I will often say that while I think it's admirable that they want to learn how to do that themselves, I'd prefer if they use a library if possible since more thought, planning, and analysis has gone into most libraries.   For production work you're probably right. But tinkering with low-level stuff is crucial for deep understanding any technology and should be encouraged. You'll never get the kind of drive for experimentation like when you first break new field, might as well max out on it.  Granted, you'll not often get the occasion to write an XMLHttpRequest call by hand, or raw HTTP, or a CGI, or a web server, or implement your own login and session logic, and so on. But developers who can are better off for it."
javascript,3dte2d,kare_kano,4,Sun Jul 19 15:32:59 2015 UTC,"I agree.  It's worth mentioning I'm always encouraging everyone to try new things.  We try to have enough time to do a little training or POC projects and that sort of thing.  For prod code we are generally on a very tight timeframe so efficient is better, because there are code reviews and the subsequent improvements from those reviews."
javascript,3dte2d,weegee101,2,Sun Jul 19 15:42:38 2015 UTC,"Yeah, I've written software that uses ARP tables and graph theory to make a network map because nobody else on my team could think of a way to do it.  Now, I work on a web dev team and most of what I do is using rails and frameworks and coaching other devs on doing the same. Kind of silly to think that I'm any less of a programmer just because I don't have to do anything like that on a regular basis anymore.  To be fair, we do have multiple services, front end apps, rails engines, a java core app and multiple other backend systems to work with. But I feel like it's no less complex than when I was writing Node.js/C for embedded devices that had a web interface (everything from manually sniffing packets in C to realtime data via web sockets in Node)."
javascript,3dte2d,fresham,1 point,Sun Jul 19 20:58:26 2015 UTC,"Doing something for your job? Use existing tools and libraries! If you need to modify or add something, try pushing it up upstream too!  But if you're doing something for fun / as a personal project, go nuts and reinvent all the wheels! Reinventing the wheel is a great way to learn, and you could end up actually making something that's better from the ""norm""."
javascript,3dte2d,TheAceOfHearts,27,Mon Jul 20 01:36:20 2015 UTC,"I'm a real programmer. I don't even use directX when I write games, I write my own drivers in assembly."
javascript,3dte2d,10097338,13,Sun Jul 19 16:00:21 2015 UTC,I scribe mine directly into silicon with a pin.
javascript,3dte2d,blasto_blastocyst,7,Sun Jul 19 21:46:11 2015 UTC,when I program I blow on a butterfly which wings diffuse a gammaray which flips a bit.
javascript,3dte2d,coloroftheskye,2,Sun Jul 19 23:36:28 2015 UTC,There's an emacs command for that
javascript,3dte2d,LookWordsEverywhere,1 point,Mon Jul 20 08:31:19 2015 UTC,Hardcore.
javascript,3dte2d,blasto_blastocyst,10,Mon Jul 20 07:12:41 2015 UTC,"I work in the security space, and it's a red flag if you reinvent the wheel instead of building off a trusted base of battle-hardened open source libraries and protocols.   NIH opens you up to serious vulnerabilities."
javascript,3dte2d,dustinmm80,5,Sun Jul 19 14:54:43 2015 UTC,Who invents new libs and protocols?
javascript,3dte2d,kare_kano,4,Sun Jul 19 15:33:55 2015 UTC,Shops with engineers lacking experience in the security space. There are a bunch of home-grown solutions that you never hear about unless you get on a call under NDA
javascript,3dte2d,dustinmm80,2,Sun Jul 19 16:21:54 2015 UTC,I think their question was who invents the battle-hardened open source libraries and protocols to begin with though. They have to come from somewhere.
javascript,3dte2d,siegfryd,12,Mon Jul 20 04:19:13 2015 UTC,"I agree, to me you reinvent to wheel only to learn how it works"
javascript,3dte2d,RyeDraLisk,8,Sun Jul 19 13:03:42 2015 UTC,Or if you can do it better...
javascript,3dte2d,skitch920,5,Sun Jul 19 16:05:03 2015 UTC,Yeah. Or that.
javascript,3dte2d,RyeDraLisk,8,Sun Jul 19 20:54:00 2015 UTC,"People say reinvent the wheel like everyone today still used wood wheels from ancient chariots. Why people get mad at those reinventing the wheel when they're not famous or couldn't get luck with the whole bandwagon judging their work? I am quite sure most piece of technology today are wheels reinvented. They just turned out better and survived over time. Heck some of them aren't even better than the old wheels, quite the opposite, they've just got more hype. But we can't know any of that before actually trying new wheels and discarding most of them."
javascript,3dte2d,mikedelfino,15,Sun Jul 19 13:30:22 2015 UTC,"The vast majority of programmers are not qualified to reinvent the wheel.  It takes years of experience and understanding, as well as a true understanding of why the wheel needs to be improved to be qualified to do so.  Few people reach that point in their career."
javascript,3dte2d,weegee101,2,Sun Jul 19 15:49:17 2015 UTC,"You don't have to be qualified to invent new wheels, especially in software. Inventing crappier wheels is okay, because one day one of them might actually turn out better.  The problem is not that crappier wheels are being invented, the problem is that they're used in production."
javascript,3dte2d,immibis,13,Tue Jul 21 04:22:26 2015 UTC,"I'm not against people reinventing wheels, my point is that nowadays  (almost) nobody deals with the low-level, ""real"" programming. One way or another you're working with some kind of library/framework/API."
javascript,3dte2d,AlGoreBestGore,-6,Sun Jul 19 13:44:01 2015 UTC,"Truth. ""Reinventing the wheel"" is a reddit apology for laziness and not knowing how things work. If no one wrote their own code then no one would know how things work and they'd all become redditors."
javascript,3dte2d,dhdfdh,2,Sun Jul 19 14:04:54 2015 UTC,"This is a strawman point. No one thinks that things should be reinvented gratuitously.  The prevailing mentality (as was put by a friend of mine) is that ""web developers are too comfortable relying on magic.""  The idea stems from the simple fact that the barrier of entry is extremely low."
javascript,3dte2d,emgram769,1 point,Mon Jul 20 03:00:01 2015 UTC,"""web developers are too comfortable relying on magic.""   ... but what's the answer if there's so much new stuff coming out all the time? 'Web development' is a massively broad range of topics from databases to network security to video encoding."
javascript,3dte2d,redditierre,1 point,Mon Jul 20 11:02:59 2015 UTC,"Yeah, and they build their own processors and computers from scratch too."
javascript,3dte2d,pier25,25,Mon Jul 20 01:08:00 2015 UTC,"But the damage to my self esteem has been done, and the negative thoughts have been ingrained   I wrote a long piece about me because I've had a hard time due to stress and this story resonates with me, but instead, I wanted to make a comment directed to Joe.  You're 20 something and you have been providing for your entire family. I'm sure that would have put you through a lot of stress and you're commitment to help your family is admirable in itself. But a lot of what you are describing sounds like an ongoing stress response and without help its very difficult to get back on even ground. Might I suggest that you find someone to talk through everything with, possibly professionally since you may need that level of help to get to where you want to be.  And believe me, I say the above wishing you all the best!"
javascript,3dte2d,morphemass,15,Sun Jul 19 11:19:48 2015 UTC,"I ask stupid questions, I hate my code and think it's not good enough, I've only finished one personal project of like at least 60-90 ideas"
javascript,3dte2d,relyon,7,Sun Jul 19 08:26:46 2015 UTC,"I smugly criticize 90% of the projects I see, but don't have any thing better to show for my self.   I'm proud that I have a few pieces of code that are popular, but deep inside I know that they are horrible.   I enjoy seeing the Google Analytics peeking on my blog, but I know that if anyone enjoyed the article, it's because of my English skills, and not my programming skills.  ¯_(ツ)_/¯"
javascript,3dte2d,iSmokeGauloises,4,Mon Jul 20 04:58:46 2015 UTC,¯_(ツ)_/¯   You've even lost your right arm. :(
javascript,3dte2d,I_Pork_Saucy_Ladies,4,Mon Jul 20 10:08:07 2015 UTC,The life of a Software Engineer is a dangerous one  (⌐■_■)
javascript,3dte2d,iSmokeGauloises,4,Mon Jul 20 10:10:02 2015 UTC,"Indeed. I once hit the table with my knee. Several seconds passed before the pain went away. Stay safe, my brother!"
javascript,3dte2d,I_Pork_Saucy_Ladies,11,Mon Jul 20 11:08:33 2015 UTC,"I feel that the web developper's main task is to use the right tool for the right job.   Using the right framework and libraries to achieve a goal by doing the least complex programming possible.  At least that's my experience, because I learned all by myself, I'm not a good programmer. I suck at maths and when I take a look at some code in JS libraries I just keep telling myself ""I could never do that, that's way too complicated"". So I keep searching for libraries that do the job instead of doing it myself  I know PHP, JS, HTML/CSS, NodeJS, MeteorJS, Ruby on rails, I learned the basics of so many languages: java, C, C#, Actionscript, but never achieved anything with these.  I can make simple websites, but I feel like I'm not that good.  I'm going back to school at 23 and hoping I can really get good at what I'm doing"
javascript,3dte2d,Hapistoric,6,Sun Jul 19 10:39:15 2015 UTC,"I feel that the web developper's main task is to use the right tool for the right job.   Fully agree, it is awesome if you are able to do everything from scratch and hence depending on the project you might even need that knowledge when using a library, but if you once worked with JS/Ruby/Rails/Python you learn that most more complex tools are already created, and often so optimized over the years that you could barely write something better without stealing straight from it.  Like i could write a login system in rails in maybe one hour, it would work and over the next months i may can log enough data to see the open attack vectors and issues. Or i just use devise, 10 minutes, fully featured, and basically as secure as it gets."
javascript,3dte2d,talkb1nary,2,Sun Jul 19 12:18:34 2015 UTC,"If you're looking at a framework as a whole, it can be a bit intimidating. Try reading through the source code of individual methods and you'll see its not that complicated. Reading Angular's source code has helped me understand a lot of concepts that I though were very complex."
javascript,3dte2d,AlGoreBestGore,20,Sun Jul 19 14:03:32 2015 UTC,"I can relate in a very similar way.  I went to school and earned two degrees in geographical information systems (GIS).  This had me learning a lot about many sub-fields of geography, databases, vector and raster data, and data analysis.  The only programming I took was 1st year intro to CS via. Java. It was awful because despite being declared as ""for non Math/CS students"" it was unnecessarily math heavy.  ""Let's teach you how to write a function by making a demo function where you factor one of those ax2 + bx + c expressions that you forgot in high school""  I felt empowered to do some basic Python to script recurring GIS tasks.  It was awesome.  I did some impressive work on co-op terms. I won some awards, I did some basic web development to make interactive GIS applications.  I got a GIS job in robotics and quickly realised just how much I didn't know. Surrounded by absolutely genius engineers was this challenge to not fall back into the pit of feeling inadequate that I lived in in my high school and early undergrad years.  The GIS part of my job went away and I became a software developer for an assortment of tasks. Nothing too low level, but always touching in some way a full gamut of hardware and software technologies. Primarily I did a lot of the GUI stuff, so I lived in Python and JavaScript.  At this point, 95% of what I know about how to be a programmer was learned on the fly at my job.  I'm still on a roller coaster of, ""holy crap I know so much. I'm awesome at this job!""  and, ""wow, there's so much I never learned because I don't have an engineering or computer science degree.""  I've come to appreciate that both of those feelings are true.  I prove regularly that I am able to do a good job. I am eager to learn whatever I need to complete the job and I am always very receptive to advice, criticism, anything to make me better.  And yes, I will ask a stupid question about once a day because something you learn in school I never learned.  ""What's an off-by-one error?""  But I think what makes it all OK is that I learned how to learn. Not that everything can be learned on the fly in a workplace environment,  but most jobs don't require you abruptly learn an entirely new discipline.  Because I had touched Python before, I was capable of going from not having ever heard of Qt before, to writing my first ever MVC application in PyQt in about a week.  I still ask about one 'stupid question' each day, but I'm no-longer embarrassed by it. I have proven to myself and my employer that I am capable of unbounded growth. It doesn't matter that my programming requires much less education than our PhDs who do algorithms all day, because it still requires the same amount of actual application to become effective at it.  /rant"
javascript,3dte2d,Mackinstyle,15,Sun Jul 19 08:15:22 2015 UTC,"I no longer beat up on myself whenever I feel inadequate in my job. After all the sanity and well being of my brain matters.   If I constantly torment it with feelings of inadequacies and low self esteem then I'm not going to be productive at all. All my work is going to suffer.   Instead, for 90% of the time on job I wear the hat of an intermediate-learner who knows stuff but has a lot to learn. And merrily I go on my way.  The rest 10% of the time I just don't care if I know anything or not. I just push through it without having any feelings for the work that I do or produce."
javascript,3dte2d,gwevidence,1 point,Sun Jul 19 08:42:49 2015 UTC,These are my precise thoughts and experiences on the matter. Can't upvote enough.
javascript,3dte2d,rDr4g0n,1 point,Sun Jul 19 16:30:05 2015 UTC,"I'm still on a roller coaster of, ""holy crap I know so much. I'm awesome at this job!"" and, ""wow, there's so much I never learned because I don't have an engineering or computer science degree.""  I've come to appreciate that both of those feelings are true.    You know, this is not something special for programmers. Everyone that works in a field where there is so much to learn that you can't possibly learn all of it will be on this rollercoaster. If you asked Eric Clapton about his guitar skills, he'd probably tell you that he feels bad about not knowing how to play flamingo guitar."
javascript,3dte2d,I_Pork_Saucy_Ladies,21,Mon Jul 20 10:22:15 2015 UTC,"Web Development is not real programming  ...  Setting up a Wordpress blog takes significantly less knowledge and effort than building an operating system.   That's because ""setting up a Wordpress blog"" is not web development."
javascript,3dte2d,scootstah,19,Sun Jul 19 15:24:30 2015 UTC,"Indeed. That comment really annoyed me. Screw the ""Web development is not real programming"" mentality. That's total BS. There is so much that goes into building complex web apps... especially if you are multi-disciplinary and also handling things like UI/UX design on your own... you have to think about modularity & maintainability (the ""engineer"" perspective), you have to optimize for performance both on the server and the client, you have to think about usability and user experience, you have to think about design, style, animation, you have to be familiar with (often) multiple databases and query languages, you have to keep an eye on the latest build tools and know how to use them, you have to constantly keep up with the rapidly evolving front-end JavaScript landscape... and on and on and on. It's usually only people who have no experience with real web development who write it off as ""easy"" and not worth doing."
javascript,3dte2d,joshburgess,5,Sun Jul 19 21:53:50 2015 UTC,"If you ever want a raise, ^ here's your template."
javascript,3dte2d,skitch920,1 point,Sun Jul 19 22:44:34 2015 UTC,"To be honest, I think ""web development"" has been split into different categories. One of them are the marketing people who investigate which Google Adwords have a high pay per click, order some graphics for the subject from India, slap them onto a Wordpress template and wait for the money to roll in.   Is this hard to do? No. Is it ""web development""? I guess so. But it is quite far from those of us who actually sit around and do actual programming on complex apps all day long, using and contributing to open source projects, maintaining back-ends and so on.  I've been part of both worlds and they have almost no people or mentality in common. As a programmer, I prefer the latter by far."
javascript,3dte2d,I_Pork_Saucy_Ladies,2,Mon Jul 20 10:14:58 2015 UTC,Exactly. It's literally made to be as easy as possible for non-technical people.
javascript,3dte2d,ngly,1 point,Sun Jul 19 16:38:27 2015 UTC,Can you explain what it is then that these junior developer jobs that ask for experience with WordPress actually do? Because they are quite prevalent when I look for jobs.
javascript,3dte2d,schm0,1 point,Mon Jul 20 00:34:47 2015 UTC,"Installing WordPress, installing WordPress plugins, installing WordPress themes, configuring all of the above to work together, etc. There might be a small amount of tinkering with the theme, or if there is a custom theme you might have to code it.  It's pretty rare that you'd want to do something in WordPress that you can't find in an existing plugin."
javascript,3dte2d,scootstah,1 point,Mon Jul 20 01:30:47 2015 UTC,I was under the impression that creating a custom WordPress theme or plug-in takes a bit of Web development skill...
javascript,3dte2d,schm0,1 point,Mon Jul 20 01:36:50 2015 UTC,"It does. But I consider that more ""modifying WordPress"" than ""setting up WordPress""."
javascript,3dte2d,scootstah,11,Mon Jul 20 01:43:37 2015 UTC,"Impostor syndrome is one of the hardest things to get past, even if you have all the 'right' qualifications. Believing there is a 'better' level of knowledge just out of reach will keep you frustrated forever, because no matter how hard you look there will always be someone doing something harder nearer the metal. The answer (for me) is staying focused on the output. We're all using tools created by others before us. The real measure of achievement is what you do with those tools and whether you can make something great. ""If I have seen a little further it is by standing on the shoulders of Giants."" - Isaac Newton"
javascript,3dte2d,thecommissarvanishes,3,Sun Jul 19 12:04:54 2015 UTC,"""If I have seen a little further it is by standing on the shoulders of Giants."" - Isaac Newton   Exactly, he stood on their shoulders, he didn't half ass, stop half way and settled for sitting on their belt. Imposter syndrome isn't the same as wanting to achieve more and reach some unattainable level, its about feeling you never belong to a group and a devaluing of your current level of knowledge. People in this thread don't seem to understand that and keep echoing 'be happy with what you know' without adding that that doesn't mean you have to give up trying to attain a greater level of understanding/knowledge of a field."
javascript,3dte2d,nikola_dev,26,Sun Jul 19 19:19:46 2015 UTC,"Web development is a Frankenstein of moving parts that barely fit together, but it somehow works, and that to me embodies the human spirit.   well said!"
javascript,3dte2d,bytesandbots,13,Sun Jul 19 08:58:39 2015 UTC,"I don't know, I think that's a fairly naive way of looking at it. We spend a lot of time thinking through the features of our website and how to implement them best. It's probably 75-80% thinking and eliminating options with about 25-20% actually implementing the code. It's rarely a surprise or thought process of, ""Well, it somehow works -- let's merge to staging for testing."" The hard part is deciding what technology to use and how to seamlessly implement with the existing codebase."
javascript,3dte2d,ngly,10,Sun Jul 19 16:31:55 2015 UTC,"I took this more about how the web works. Like html kinda sucks, css definitely sucks, JavaScript kinda sucks, and all of this runs in specialized browsers that implement features in different ways and could be evergreen or several years old"
javascript,3dte2d,wherethebuffaloroam,2,Sun Jul 19 20:58:12 2015 UTC,"Right, we used to have a ton of test devices and vms just to screenshot our site to make sure it really does work.  Web is a lot of testing just to make it work across the board.  And things are always changing and moving.  Things that work before don't work now. For example, we used a canvas hoverstate for some of our content articles.  Worked great until 6 months later an update of chrome came, then it started crashing chrome.    In some ways, proper web dev is actually a slower process because your neat little trick you tried last time might not work, thus making you always test to see if what you know is still true."
javascript,3dte2d,perestroika12,1 point,Mon Jul 20 06:09:10 2015 UTC,"I think that's a fairly naive way of looking at it. We spend a lot of time thinking through the features of our website and how to implement them best.   That immediately reminded me of this:   So this is like, how to organize a website to make it easy for users to find information and streamline their workflow. I’d question whether anyone in the industry can really be said to be “solving” these problems rather than just continually debating which solution they arbitrarily think is best."
javascript,3dte2d,gngl,15,Sun Jul 19 22:00:00 2015 UTC,"The top comment on hackernews about this article (by patio11) is very poignant and well written - especially if you're getting most of your opinions on coding from reddit or #javascript.    If any of the ""self-hating web dev"" resonates with you, then I'd recommend reading patio11's post a few times!"
javascript,3dte2d,mrspeaker,3,Sun Jul 19 13:23:33 2015 UTC,"Wow yeah that was spot on. You can apply that to most of reddit, really"
javascript,3dte2d,Glorious-G,9,Sun Jul 19 16:13:19 2015 UTC,"My god. I needed this piece of advice so bad!  I'm from a completely unrelated niche (although I am trying to learn JS to learn the nuances of other frameworks and build web apps - and failing miserably).  I work as a writer + content strategist and the past year has been hugely disappointing.    After that, I went through a phase of landing a contract/job, exhibiting the same behavior that led to me losing my previous job, and quitting before the company had a chance to fire me. I felt like I couldn't do anything anymore. It's like I just forgot how to program, I forgot how to think. I couldn't do a job I once believed I was above.   This is exactly what I am going through right now. Thank you so much for putting to words what my mind couldn't really gleam clearly.  Thank you so much for writing this and for publishing this. This gives a new hope!!"
javascript,3dte2d,chandru89new,12,Sun Jul 19 10:16:45 2015 UTC,"There are a lot of programmers out there who are doing web development as their chosen profession even after getting a comp sci degree.  Don't ever feel guilty that is what you do, or how you've made money for yourself. Not having a job feels a whole lot worse, and you can't do shit for yourself when you have no $$$. Learn to be more proficient with the technology you already use.  I currently use: php,js,html/css (linux,mysql,redis,memcache,rabbitmq,zeromq) in my current stack using silex, doctrine2, composer, underscore,jquery,ratchet, just to name a few, and this is by far not even encompassing.  Learning to be an experienced programmer is mostly about learning to solve a problem(s), either in school or by oneself.  Good web developers are more on par with good software engineers because of the process it takes to build a site from the ground up, especially one with very specific pieces. Programmer writes code, often disorganized to solve problems. Software Engineer builds a maintainable application / framework / documentation / ecosystem.  Good Web Developers are multi-disciplinary in how problems are solved from choosing the right frameworks, organizing information in a usable way, knowing when to use specific libraries, reading often enough to be exposed to libraries and holding on to information for later dates.  The ""Engineer"" in Web Developers is usually derived later in ones career after having seen a lot of ""battles"" working with people or experiencing a lot of shall we say abomination/Frankenstein codebases. Some engineers as they flower decide to move away from their 1st language, some decide to improve with their existing tools and become better. The key is how people respond, either cut cold turkey to learn better habbits in a new language or modify existing habbits to write smarter / more maintainable code.  Don't ever let yourself think that just because you write markup all day doesn't mean you don't have to organize it. Build it in modular fashion. Organize your stylesheets. Not doing one of these things and then handing over to some ""code monkey"" to take on your mess? No, the software engineer/web developer approach is F that, do it right or do it twice. Web Developers usually are jacks of many trades. Often times ""self-taught"" which is rare to see someone really ""learn web development"" from college."
javascript,3dte2d,compubomb,6,Sun Jul 19 11:30:55 2015 UTC,"I am a learned software developer who loves web as a platform way to much to let it go. For me personally it might have been using linux since years and the browser was basically the simplest platform to create things that work everywhere.  I agree with you, and i think those are just 2 different mentalities mostly. The classical software developer tends to find his topics and get very good at them over the years. The typical webdeveloper is the guy who wants/trys new stuff all the time and is willing to change the whole dev stack every other year.  IMHO none of them is generally worse as the other. But in my experience webdeveloper tend to miss to build a deeper understanding for their anyway temporary tools."
javascript,3dte2d,talkb1nary,5,Sun Jul 19 12:25:25 2015 UTC,"This is awesome... I can relate to a lot of this.  It's taken me a while too- but I think I've found a place where I'm content to say ""I'm a web developer"" ... I can't make drivers... I don't know C  But I can make you a hell of a nice website.  And I enjoy it.  So for what it's worth- that's solid enough for me. Think of all the people in the world that can't ... or won't learn PHP, HTML, CSS or JS  If you know those, like know those. You're going places... that's not nothing.  As for WordPress - that's just as huge anymore... calling a WP developer stupid or lazy is like calling any other user of a CMS stupid or lazy.  You don't use them because you're stupid or lazy... you use them because it's smart to not re-invent the wheel and spend months making and fixing your own CMS.  Anyhow... /ranting now...  Thanks for an excellent post."
javascript,3dte2d,godofleet,4,Sun Jul 19 14:30:43 2015 UTC,"This is a powerful article and I find it ironic that I was just in the middle of writing almost the same exact thing, because of the same exact thread (I actually got to your article from that thread and I'm happy to see people enjoying it on /r/javascript as well!)  What you're talking about reminds me of how the various communities treat each other: PHP lovers hate Ruby, Ruby people think PHP sucks, Javascript is hated and loved by everyone, Python gets some crap, too, etc. And on a bigger scale, web development is often not seen as rigorous of a programming profession as others. I think this is mainly because web development doesn't resemble the other fields.  The main differences lie in the ability to start very small:   getting a WP blog up and running and messing around with CSS can be learned within a single week. making your own WP themes can take a couple of months of studying.   This creates the illusion that webdev is easy and has a low barrier of entry. It has a low barrier of entry for junior work, not everything else. Think about it for a second, professional webdev on mid or senior level involves so much more and is more cs-oriented which can create a difficult transition for developers that simply jumped into it and expected it all easy."
javascript,3dte2d,antoninj,4,Sun Jul 19 15:46:49 2015 UTC,"Be a programmer long enough, you see enough of your work become obsolete, and see enough people make the same historical mistakes, it effects you. Your self-confidence doesn't necessarily grow, but you learn to recognize other's opinions as just that: opinions, not facts.   If you make an automation machine perform a task it otherwise would not have you are a programmer, all else is opinion."
javascript,3dte2d,Doctuh,3,Sun Jul 19 15:38:04 2015 UTC,"""Web Development is not real programming"".  I haven't figured out if you decided you were wrong about that, or if you still believe that.  It's not true.  It's just a different programming.  And there are most definitely a huge difference between accomplished javascript / php developers and the lowest tier.  This is true of all languages, all systems.   A long time ago, a guy once told me that he believed that anyone could program anything given enough time.  The best programmers shine by doing it better, or doing it in less time, or doing it in a more efficient manner.  (he also said that he thought i could program anything in any language faster than anyone else that he could find .. which while flattering, is definitely not true, i am far better with interpreted languages than compiled languages.. but that's because i'm very good at finding ways to improve my workflow when i'm not stuck waiting for things to build)  Javascript is actually really far more interesting to me, and to a lot of people now, than it was a few years ago, because it has become so ubiquitous, and is found in so many more places other than the browser -- there's browser, node.js, qt qml, unity game engine, someone's working on a way to interface it to Unreal Engine 4..  and if you take a look at something like the (formerly Palm, formerly HP, then Open and now LG) webOS system -- a huge chunk of that system is built on 3 of those 4 technologies that incorporate Javascript."
javascript,3dte2d,FormerGameDev,1 point,Sun Jul 19 22:21:10 2015 UTC,this
javascript,3dte2d,tesseta,7,Mon Jul 20 07:45:13 2015 UTC,"repeat after me ... fuck the haters  not bad.  a little louder this time ... Fuck The Haters  better.  louder this time ... FUCK THE HATERS  good.  now, say it a couple times in a row .... FUCK THE HATERS.  FUCK THE HATERS.  FUCK THE HATERS.  i don't know who came up with this ""real"" programmer bullshit but it ain't got nothin' to do with reality.  if you're programming and paying the bills and enjoying yourself then you're doing a whole hell of a lot better than many.    the industry has turned into a dick measuring contents and i refuse to have anything to do with it.  i've done PHP.  don't like it?  fuck you. i've done Java.  don't like it?  fuck you. i've done Python.  don't like it?  fuck you.  seriously if you do your job and do it well and write stuff that works and can be maintained then that's all you need to be capable of doing.  if some fool is so screwed up he's gotta make himself feel better by putting down what you do, then fuck him."
javascript,3dte2d,anon0108,2,Sun Jul 19 22:05:14 2015 UTC,shout out to the cobol massive - fuck the haters!
javascript,3dte2d,HerbertSpliffington,4,Mon Jul 20 01:30:30 2015 UTC,"The truth is that web development is closer every year to other forms of programming.  15 years ago doing web dev was really simple. Today we worry about performance, memory usage, oop patterns, scalability, low level graphics, and long etcetera. Pretty much the same concerns a desktop / mobile / game dev deals with every day."
javascript,3dte2d,pier25,2,Mon Jul 20 01:06:07 2015 UTC,"I don't mean to sound harsh, but the articles makes me want to be the (seemingly) devil's advocate..         I feel like i'm reading a couple of confused thoughts, and a little unnecessary despair.. While i agree web development is very often called ""easy"", i don't hear that so much about Javascript, which, since Javascript - the good parts, seems to gain some deserved recognition. But then the most disturbing thing is how the only thing you're looking at is your abilities, or worse, the ones you perceive. In the long run, motivation takes real good advantage of a little self-denial. Why is it so hard to accept that: yes lower level programming requires heavy abstraction skills, way beyond the incredible mess that we call internet. Yes, when you get to take into account memory management daily in (C, assembly etc.), or optimisation, or to put it simply: dealing with critical parts of computing that so very few people will get to even acknowledge, well when you do that, you do rely on greater mental skills that you need. I'm sorry but stereotypes exist for a reason, and the one saying web development doesn't really compare i find hard to argue with.          All in all i just think you got the wrong approach, compare raw brain powers and yes it's very reasonnable to think you're not as good as a linux kernel developper, you're better off accepting that. But hey, what made you compare the two in the first place, what do those have in common really? If you ask me, it's not the same job, the keyboard is the same, but the minds required are so far appart.           For what it's worth, i've got an analogy for you: take guitar and bass, they look alike don't they? Strings, neck, amps. Well, you'll find a lot of bassists telling you: bass playing is closer to drumming. Web development is sure made possible by computers, but there you deal with actual users, you deal with the largest chunk of legacy code that was ever produced, you deal with everything, at once. No wonder you don't get your brain to the beautiful fields of mathematical abstractions when reality strikes you every second..."
javascript,3dte2d,QuietPort,1 point,Sun Jul 19 15:56:47 2015 UTC,"Let me help you and us here. Now that you idenified the real struggle, now that you have that angry/sad emotions down in your stomach and now that you understand what you really want even tho you dont see it yet; Go out there, create a better way, create and do what you love and dont stop until you find it. Rock the fcking world baby! ;)"
javascript,3dte2d,f3nnix,3,Sun Jul 19 17:06:59 2015 UTC,"I've been where you are, unable to get any work done. It's not an existential crisis, you're suffering from undiagnosed depression.  But the racing thoughts make it seem like the issue is logical, and not chemical.  Are you suffering from chronic fatigue, inability to focus (your focus wanders), lack of motivation?"
javascript,3dte2d,shoetiefreely,1 point,Sun Jul 19 18:52:34 2015 UTC,"I am currently seeing a psychiatrist. The prescribed medication has helped with the fatigue and general motivation. I've been on the medication for about a month, and it's nice being able to accomplish day to day tasks again.  But a shift in mindset was still required to conclude that web development was worth spending this new pool of energy on.  The medication gives me back the ability to make a choice, but the right choices still have to be made :)  Thank you for voicing your concern."
javascript,3dte2d,JoeQuery,4,Mon Jul 20 19:35:06 2015 UTC,"I'm not sure if this article is trolling or not. Calling web development not real programming probably just means you're not confident in your abilities as a developer. Based on what I read, it seems that is the case.  You should look up impostor syndrome in lieu of generalizing web developers as lower on the totem pole than ""real development"", because it basically identifies exactly how you're feeling."
javascript,3dte2d,speed3_driver,4,Sun Jul 19 13:54:10 2015 UTC,It sounded to me like he came to the (correct) conclusion that attitude was just wrong.  At least I hope so.
javascript,3dte2d,damagedcake,2,Sun Jul 19 20:21:59 2015 UTC,"Man. I'm working on a CS degree and enjoyed data structures, discrete math, assembly language, etc.; they were pretty easy/interesting classes to me. But then I had a really hard time in web dev. It seemed like there was SO much stuff to know and a lot of it just seemed like wizardry."
javascript,3dte2d,ooblie,1 point,Sun Jul 19 14:22:52 2015 UTC,"If you understand the formal language of JavaScript and how to interact with the DOM, everything else out there is just icing on the cake; granted, it's a shitload of icing.  My suggestion is to (and this doesn't apply to just JavaScript; it applies to every language):    When you need something accomplished, explore what's popular in the scope of your problem.  There is no practicality in using something that nobody else is using.  What happens if something breaks, do you have the time to fix it? Get good at reading documentation.  You shouldn't read someone else's code, before reading the documentation.  If the documentation doesn't match the result, shit's broke. Learn to complete simple tasks without someone else's code.  See what you are capable of, see where you need work.  Might I recommend Codewars.  It has simple to challenging tasks in JS, that are often real-world and assume you have nothing, but knowledge of the language."
javascript,3dte2d,skitch920,1 point,Sun Jul 19 16:18:06 2015 UTC,"...granted, it's a shitload of icing.   In web development, for every 1 thing you learn, 4 other things will now break. So at the root level, the code is ""easy"". But how you put that code together in complex enterprise applications so that it's manageable, extendable, and reliable - that's where 99.95% of my paycheck comes from."
javascript,3dte2d,shoetiefreely,1 point,Mon Jul 20 03:57:56 2015 UTC,"Web development has an extremely low barrier to entry in comparison to, say, systems programming. Setting up a Wordpress blog takes significantly less knowledge and effort than building an operating system.   ? And installing Windows ""takes significantly less knowledge and effort"" than building a blog system. Pretty weird argument.  You have ""system programmers"" doing basic stuff all day and you have ""web developers"" managing crazy clusters with a lot of crazy interesting things going on. It's all software development in the end, this separation is pretty stupid honestly. When it comes to more than installing wordpress or developing drupal plugins I would expect a web developer to have some strong knowledge of operating systems as well. Their applications are usually running on Linux. Not knowing anything about Linux is harmful.  Honestly, it seems like the writer got bored of his job and in the same time had an extreme case of ""Burnout"" with the stress at home.   I wouldn't expect any one to be as productive on a boring task  as he is on an interesting one. But from the sound of it, OP wasn't just ""less productive"" but straight out did nothing for 6 months?   The best thing to do would be a long long vacation, focusing on the things that interest you, developing in your own interests and not your employer's.   Sadly, that's rarely a possibility when you are a provider and have people depending on you.  I hope OP will bounce back in the game and kick some ass."
javascript,3dte2d,iSmokeGauloises,1 point,Mon Jul 20 04:53:58 2015 UTC,Web developers are real programmers. I know for I am one. I can install the wordpress.
javascript,3dte2d,phillaf,2,Mon Jul 20 05:37:00 2015 UTC,"Here is something interesting I've learned in my many years as a web developer:  ""Real"" software engineers are behind some of the absolute worst websites I've used and maintained.   What matters is being a professional in your discipline, and being able to speak and develop with authority. The best C++ engineer will never make anything nearly as good as a good web developer."
javascript,3dte2d,xXxdethl0rdxXx,2,Sun Jul 19 14:49:58 2015 UTC,"Honestly, a good programmer that 80% of companies need are integrators. Hooking up framework A with database B through platform C.   If you find yourself writing low level code, I hope you are a embedded systems engineer or work for Microsoft."
javascript,3dte2d,yesman_85,-2,Sun Jul 19 23:15:21 2015 UTC,xpost from /r/cringe? This is the stupidest thing I've read in awhile.
javascript,3dwo2v,EnterMeTayne,8,Mon Jul 20 03:52:20 2015 UTC,Is there a reason why you don't just link to the intended destinations in the original links?  No JS required!
javascript,3dwo2v,jeff_purple_wiggle,2,Mon Jul 20 03:56:08 2015 UTC,I too would like to understand the use case for this.
javascript,3dwo2v,one800higgins,3,Mon Jul 20 04:56:41 2015 UTC,"This answer on the page you linked has everything you need — it's practically a pre-made solution.  ""it just won't work"" is useless.  If you want help, show us exactly what you've tried, describe what happened, and describe how it differs from what you wanted to happen."
javascript,3dwo2v,Rhomboid,1 point,Mon Jul 20 04:00:35 2015 UTC,"You're right, my post was flippant.  I was able to hammer out a quick and dirty solution...  <html> <body> <script> if (window.location.hash.substring(1) == ""Idaho"") { window.location = ""http://www.reddit.com""; } else { document.write (""NOT TRUE"");  } </script> </body> </html>   This will say if what appears after the # is ""Idaho"", it redirects to reddit.  If its not, no redirect.  I just need to make 3 of these if/then statements and I'm good to go."
javascript,3dwo2v,Rhomboid,4,Mon Jul 20 04:17:52 2015 UTC,"I just need to make 3 of these if/then statements and I'm good to go.   Don't do that.  The answer I linked to demonstrates a much better way, by using object properties (i.e. a key/value map.)"
javascript,3dwo2v,corgrath,2,Mon Jul 20 04:24:08 2015 UTC,Thanks got this to work!
javascript,3dwo2v,hattmall,2,Mon Jul 20 12:27:33 2015 UTC,"Here is a more flexible solution using an ""object"" (which is really a key-value pair data structure):  <script>     var nameToDestinationMap = {         ""Idaho"": ""http://www.reddit.com/"",         ""google"": ""http://www.google.com"",         ""fb"": ""http://www.facebook.com/""     }      var name = window.location.hash.substring(1);     // writing object[key] returns the value of the key (called property on a javascript object)     // Its the same as writing, for example, 'nameToDestinationMap.google' but we cannot write that     // syntax dynamically, hence we write nameToDestinationMap[name]     var destination = nameToDestinationMap[name];      // If there isn't a value found in the map based on the 'name',     // then 'destination will be 'undefined' which is a false value in JavaScript     if ( destination  ) {         window.location = destination;     } else {         document.write (""NOT TRUE"");      } </script>"
javascript,3dwo2v,isitfresh,2,Mon Jul 20 07:28:08 2015 UTC,"Yes, you can do a switch in js  http://www.w3schools.com/js/js_switch.asp"
javascript,3dwo2v,clessg,-4,Mon Jul 20 05:02:58 2015 UTC,"if op googled for hours, he must not be too good at googling..."
javascript,3dwo2v,isitfresh,6,Mon Jul 20 07:03:53 2015 UTC,Do you feel better about yourself now?
javascript,3dwo2v,clessg,1 point,Mon Jul 20 07:14:26 2015 UTC,"Is javascript the actual language needed for this? Can't the redirection happen server side? If not writing a regex in http rules, PHP could do it.  What happens if the person has no js on. Why would I have, as a user, the need to load the whole DOM to actually be moved to another page? What is the purpose of this?"
javascript,3dwo2v,corgrath,5,Mon Jul 20 07:21:08 2015 UTC,"I dunno man, but there's no need to an asshole about it. Seems like he's a beginner."
javascript,3dwo2v,drunkenfaggot,2,Mon Jul 20 07:30:47 2015 UTC,Thanks.  I am a beginner.
javascript,3dwo2v,whatisfailure,2,Mon Jul 20 12:26:58 2015 UTC,I don't think he is on that level yet to do back-end configurations.
javascript,3dwo2v,lajw,2,Mon Jul 20 07:32:21 2015 UTC,"Guys, guys, he's right here listening to you talk about him"
javascript,3dxdn9,Zaemz,2,Mon Jul 20 09:11:14 2015 UTC,I've never heard of it. Combined with the typo I'd recommend another templating engine for now.
javascript,3dufd6,elekaton,3,Sun Jul 19 16:09:14 2015 UTC,"I was frustrated at how much boilerplate is inevitable because of how many packages out there in npm and Bower don't seem to be exactly to a standard.  I write in Browserify and other compilation tasks only to find that as my import list grows, I have to keep throwing in shims here and there.  Not that there was an obvious ""better"" way to do it for each case, but I just so appreciate being back on the back-end, not having to worry too much about making all my assets work properly.  I hope that we can settle on one module story and even if it's not the best choice for everything, having just one and not four or five will make it far more optimal."
javascript,3dufd6,Mackinstyle,1 point,Mon Jul 20 01:54:35 2015 UTC,There's a far easier way: watchify -dv -t babelify index.js -o dev/bundle.js
javascript,3dufd6,jnt8686,1 point,Mon Jul 20 04:16:49 2015 UTC,You can't ship this in a development app. You can on the other hand ship the express middleware for devs and then use a proper build step for prod deployment.
javascript,3du1w2,kevincennis,2,Sun Jul 19 13:47:45 2015 UTC,"This function actually seems easier to understand (and is shorter). I find it helpful to step through the function to understand it, so let's do that.  var basicAutoCurry = function (fn) {   var curryN = function (len, prevArgs, fn) {     return function (...args) {       var currArgs = prevArgs.concat(args);       return (currArgs.length >= len) ? fn.apply(this, currArgs) : curryN(len, currArgs, fn);     };   };   return curryN(fn.length, [], fn); };   To explain it, we turn the basicAutoCurry function into three arguments. The length of the function, the list of previously curried arguments, and the function itself. Let's focus in on curryN from here out.  var curryN = function (len, prevArgs, fn) {   return function (...args) {     var currArgs = prevArgs.concat(args);     return (currArgs.length >= len) ? fn.apply(this, currArgs) : curryN(len, currArgs, fn);   }; };   When it is called, it returns a function that takes any number of arguments (note that len, prevArgs, and fn are trapped in a closure). Here's curryN applied manually.  var add6 = (a, b, c, d, e, f) => a + b + c + d + e + f; var add6Curried = curryN(6, [], add6); var add6Curried2 = add6Curried(1, 2);   When we call add6Curried(1, 2) the function adds them to the previous arguments []. Since this is less than 6, it returns us a new function by calling curryN(6, [1, 2], add6 (note: we actually return the function add6 points to. If we changed add6, our function here would stay the same).  var add6Curried5 = add6Curried2(3, 4, 5);   Here we repeat the same process except that the previous arguments is now [1, 2] and we return curryN(6, [1, 2, 3, 4, 5], add6)  add6Curried5(6); //=> 21"
javascript,3du1w2,androbat,1 point,Sun Jul 19 19:04:30 2015 UTC,"Yep. That works too, although I'd argue that it works pretty much the exact same way as the function I wrote in the article.  Only semi-significant differences I see:   You're using an array + ES6 rest params instead of calling Array#slice() on the arguments object.  I'd absolutely have done the same if I was writing an ES6 example. It's much cleaner this way. You're not immediately invoking curryN. Maybe it's easier to understand your way. I just didn't see the point of assigning a function expression to a variable only to turn around and invoke it right away. The IFFE just felt more efficient to me.   Unless I'm missing something, there's no need for your curryN function to accept fn as a parameter, since it will always have access to fn via closure from your outer curry function.  Anyway, there are a million ways to do all of this, and I'm certainly not going  to argue that mine is the Right Way™. This post was really just to introduce people to the concept of currying, and maybe force them to think a bit about closures and first-class functions.  Thanks for the feedback."
javascript,3du1w2,androbat,1 point,Sun Jul 19 19:40:51 2015 UTC,"It's pieced together from a larger auto-curry function I made a while ago (I'm thinking about extending it with a placeholder like in Ramda). I just copied the relevant bits.  export var curry = (function () {   var curry1 = function (fn) {     return function curry1fn(a) {       return (arguments.length > 0) ? fn(a) : curry1fn;     };   };    var curry2 = function (fn) {     return function curry2fn(a, b) {       switch(arguments.length) {         case 0: return curry2fn;         case 1: return curry1(function(b) { return fn(a, b); });         default: return fn(a, b);       }     };   };    var curry3 = function (fn) {     return function curry3fn(a, b, c) {       switch(arguments.length) {         case 0: return curry3fn;         case 1: return curry2(function(b, c) { return fn(a, b, c); });         case 2: return curry1(function(c) { return fn(a, b, c); });         default: return fn(a, b, c);       }     };   };    var curryN = function (len, prevArgs, fn) {     return function (...args) {       var currArgs = prevArgs.concat(args);       return (currArgs.length >= len) ? fn.apply(this, currArgs) : curryN(len, currArgs, fn);     };   };    return function (fn) {     switch(fn.length) {       case 0: return fn;       case 1: return curry1(fn);       case 2: return curry2(fn);       case 3: return curry3(fn);       default: return curryN(fn.length, [], fn);     }   }; }());"
javascript,3du1w2,davidf81,1 point,Mon Jul 20 00:41:38 2015 UTC,"Yeah. I like the idea of fast-pathing the common cases.  If I was writing a curry function that I intended to use in production, that's definitely something I'd want to do. Saving all the array copies will keep you from generating a ton of garbage."
javascript,3du1w2,inmatarian,5,Mon Jul 20 01:44:38 2015 UTC,"Why would I want this? Currying is at best an unnecessary obfuscation for trivial algorithms. Using functional programming just to ""do functional"" isn't useful.   If you're an algorithm guy, it would be cool to see an example of using currying for a real purpose. Autocurrying seems pretty useless."
javascript,3du1w2,Silverwolf90,3,Mon Jul 20 00:09:13 2015 UTC,"Anywhere you'd pass a curried function into another function as an argument. Last week this link was on /r/javascript, Professor Frisbee's Mostly Adequate Guide To Functional Programming, in which he gives a LOT of fantastic examples. This is one in chapter 9:  var setStyle = curry(function(sel, props) { /* omitted */ });  var applyPreferences = compose(join, map(setStyle('#main')), join, map(log), map(JSON.parse), getItem);   Here you'll see that setStyle is called with a single argument, but it's defined with two arguments. That's typically where you get most of your utility out of curried functions, i.e. part of chains."
javascript,3du1w2,davidf81,3,Mon Jul 20 01:49:43 2015 UTC,"Totally agree, currying and/or partial application is the most useful if you are using function composition.  Which is something I would highly suggest integrating into anyones daily use of JS.  Lodash has some function composition methods: _.compose (right-to-left) and _.flow (left-to-right).  I prefer flow because left to right is more intuitive to me."
javascript,3du1w2,androbat,1 point,Mon Jul 20 08:03:41 2015 UTC,"Ah, ok. Thanks. I completely had a different understanding of what currying was, and apparently it was a little off!"
javascript,3du1w2,davidf81,1 point,Mon Jul 20 22:20:15 2015 UTC,"I find them very useful at reducing boilerplate (especially when paired with compose). Sure you can manually wrap your functions, but why go through the trouble when auto-curry makes it easy?"
javascript,3dtknr,clessg,1 point,Sun Jul 19 09:14:22 2015 UTC,"I've used proxies semi-recently to implement an RPC library. Without proxies, we were doing something along the lines of:  yield client.rpc(""functionName"", argument1, argument2...)   With a good proxy, now it's much nicer:  yield client.rpc.functionName(argument1, argument2...)   They're extremely powerful tools.  Edit: Used yield from as I do in python like a jabroni. Fixed for how it actually looks."
javascript,3dtknr,AMorpork,1 point,Sun Jul 19 15:46:35 2015 UTC,"I like using them to use negative indices on arrays.  new Proxy(arr, {     get: function (target, name) {     var i = +name;     return target[i < 0 ? target.length + i : i];   },   set: function (target, name, val) {     var i = +name;     return target[i < 0 ? target.length + i : i] = val;   } });   See this article from 2013: http://dailyjs.com/2013/11/15/negative-array/"
javascript,3dtknr,jcready,1 point,Sun Jul 19 16:02:11 2015 UTC,I can't get over how beautiful accessing the last element via arr[-1] is.  I assume this has to be done a case by case basis?
javascript,3dvo8p,nik3t,2,Sun Jul 19 22:31:26 2015 UTC,"It's a little bit hackish, but you can just define an array of 7 offsets, one for each day of the week.  For example, if the current day of the week is Sunday, the offset is 2, as you need to add 2 days to get to Tuesday.  Here's an example.  I'm assuming that you don't want the same day, i.e. the next available date for a Tuesday is Wednesday, but you can adjust the offsets if that's not the case."
javascript,3dvo8p,Rhomboid,1 point,Sun Jul 19 23:16:52 2015 UTC,"Later should be able to accomplish what you need, if you still want to use a library that's semi-similar to momentjs. This is probably a good starting point."
javascript,3dunrl,brettdavis4,3,Sun Jul 19 17:23:40 2015 UTC,"Your problem is essentially this:  var cb = []; for (var i = 0; i < 3; i++) {   cb.push(function(){     console.log(i);   }); } cb[0](); // 3   And here is the inconvenient fix:  var cb = []; for (var i = 0; i < 3; i++) {   cb.push(     (function(k){       return function(){         console.log(k);       };     }(i))   ); } cb[0](); // 0   With ES6, you can just replace the ""var i"" with ""let i"" in the first example.  This is the ""for-loop statement scope"" feature (expand ""let""):  http://kangax.github.io/compat-table/es6/  Anyhow, I recommend to use event delegation for this. One event listener is enough.  Edit: http://jsfiddle.net/qzzfq8e9/"
javascript,3dunrl,x-skeww,1 point,Sun Jul 19 17:30:46 2015 UTC,Thanks a bunch!  That was really helpful in my project.
javascript,3dunrl,medja,2,Mon Jul 20 15:36:25 2015 UTC,This isn't really an answer to your question but try adding the event to the table instead. And fell free to use capturing if your using the addEventListener function. Then just find the td inside the event object and your good to go. You should be able to calculate everything you need from it and avoid a loop for adding the event listener.
javascript,3dtvjw,StrenghOfFuriousGods,1 point,Sun Jul 19 12:24:42 2015 UTC,"you werent passing a contactid to displaysingle()...  first you have to find what ID it is.... then pass the id to display single, ala: http://jsfiddle.net/9oq7y4rh/"
javascript,3dtvjw,mc_hammerd,1 point,Sun Jul 19 12:36:30 2015 UTC,"http://jsfiddle.net/9oq7y4rh/   I think I love you, can you explain to me how this code works and what it's doing?  var contactid = null; for (i in contactarray)   if ($(event.target).html() == contactarray[i].name) contactid = i displaysingle(contactid); })"
javascript,3dtvjw,mc_hammerd,1 point,Sun Jul 19 12:54:01 2015 UTC,"sure - after the view (html) is rendered, theres no way to tell what link the person clicks.. only that '.item' was clicked... so we have to find which item was clicked.  this code sets id to null, so we can check later if it didnt find anything  then it loops through contactarray, comparing the clicked items html and the name of the current item in the contact array  $(event.target) is the clicked item...  .html() will print the html of the clicked item  contactarray[i].name is the name property of the current item  if it doesnt match one it console.log()'s and returns  if it does it calls displaysingle(contactid)"
javascript,3dsvi0,falconerd,1 point,Sun Jul 19 03:20:37 2015 UTC,"Edit: http and st were redundant as browserSync seems to start a local server on 3000. They were left over from when I was using gulp-livereload.  Currently using this for a game dev project utilizing pixi.js.  I hope somebody finds this useful. As someone new to gulp, it took me a while to scrape all the needed bits together."
javascript,3dv5in,hermanya,2,Sun Jul 19 19:52:26 2015 UTC,"Well, you had me at the name 🌹"
javascript,3dqvwf,webhamsters,9,Sat Jul 18 16:12:50 2015 UTC,So this is essentially a fancy wrapper for web workers to give a browser-independent client-side multithreading experience. Nice.
javascript,3dqvwf,SOLAR_FIELDS,3,Sat Jul 18 22:26:21 2015 UTC,"Glad you like it. That's correct, the main goal of the library was to allow individual functions to be executed in parallel, therefore speeding up execution by taking advantage of multiple cores. It's been optimized to use as few resources as possible while taking advantage of everything the web worker spec allows so you don't have to think about it yourself.  Something that I personally believe is a killer feature is the ability to run many parallel functions concurrently, you aren't limited to running just a single thing at a time in fact you can be running functions on their own threads while running others across multiple threads. We are currently working on getting more detailed documentation onto the website so in the mean time if you have any questions or need any guidance on how to integrate into your own projects feel free to reach out."
javascript,3dqvwf,SOLAR_FIELDS,3,Sat Jul 18 23:20:20 2015 UTC,"What are your thoughts as to the relevance of multithreading in the browser today? Someone wrote some software six years ago that made use of multithreading in the browser. His comments on the state back then were the following:    Over the course of my work I compared the behavior of a few web browsers under the heavy load of Telly.  One of the most unpleasant problems I had to solve is there by design—browsers unavoidably throw a warning dialog to the user when a script program runs for a certain time. Usually the time is 5 seconds, but Internet Explorer throws them after 5,000 statements or lines of code or some such, which makes it difficult to predict and prevent from the JavaScript program itself.  Another problem is that the JavaScript implementations, also by design, do not provide for multi-threading. Even worse, the browser itself becomes unresponsive as long as a JavaScript program runs. Only Opera does this better. To defeat the browsers, I had to cut the work into time-sliced chunks and give the browser short intervals of free time. The grotesque consequence is that my program could be perfectly multi-threaded, yet the browsers cannot make use of this and force it back into a single thread.  My impression was that I was not working with and using the browser, but fighting them and defending against their undesirable behavior, because they refused, by design, to do what I think they should do. In short, today's browsers are still a rather poor platform for general cross-platform computing, but they seem to be getting better.   What, if anything, has changed in these 6 years that makes multithreading a more viable approach on the client side?   Interested in hearing your thoughts on this as you inevitably had to do quite a bit of research and experimentation to write this wrapper."
javascript,3dqvwf,SOLAR_FIELDS,7,Sun Jul 19 01:15:10 2015 UTC,"Excellent question, the first and foremost thing that makes multithreading more viable today is the introduction of worker threads. Six years ago worker threads as far as I know were not on the scene or were still in a very rudimentary form. Since web workers allow you to create physical threads on the OS level it has opened up serious potential that simply wasn't there before, I have some gripes with the way the standard was written as I find it unnecessarily complex. We've also started to reach serious physical limitations on what can be accomplished with single threaded/single core designs, with modern smart phones shipping with up to 10 cores on their own now it's hard to see a future where concurrency/parallelism won't become a factor.  I'm not entirely sure how this person was achieving ""multithreading"" but I'd imagine they were doing thread simulation which is similar to the legacy fallback functionality, this certainly allows you to execute things asynchronously and perhaps even concurrently however it is more akin to tricking the system than actually using multiple threads. This may be what they meant by using time slices, using setTimeOut accomplishes a similar thing where you are essentially telling the JIT to only execute the logic when it has a free time slot / it's not busy with other work.  I have not run into any issues where execution time was an issue, the JIT and javascript vm have really come a long way in the last few years in both performance and compatibility. That being said there are still limits on what can be done client side, currently during my testing the maximum array size I can successfully send to any single thread is roughly 45 million items depending on the browser. Scaling that up to say 4 cores gives you the ability to process 180~ million items at once which in my opinion is pretty impressive for a client side language.   During development there were a few edge cases depending on the browser that certainty threw me some curve balls such as Microsoft introducing unnecessary security restrictions making true multithreading in IE10 less than viable. However in general besides a few older browser quirks I was able to develop the library to run on even a monochrome kindle 3 tablet.   In regards to being unable to run X number of lines of code at once I'm not sure exactly what that developer was doing but something the library implements is a fully working thread pool, in the event that your device can run say 3 threads concurrently and you invoke a function spanning across 24 threads the library will simply fire up 3 threads and pool the work by reusing each thread as it opens up until all the work is complete. So you should never really encounter a situation where the browser locks up unless you're simply calculating too much for your device to handle.  Sorry for the winded response, that really is a difficult question to answer."
javascript,3dqvwf,equallyunequal,2,Sun Jul 19 01:36:30 2015 UTC,Thank you for this awesome and insightful response!
javascript,3dqvwf,Klathmon,1 point,Sun Jul 19 01:39:01 2015 UTC,"No problem, I hope that covered why I think it's important moving forward and the technical changes that have been made over the last few years. We are moving into the age of what i would call massive parallelism where we have processors and devices with N cores and if our programs are only able to make use of 1/Nth of those cores then we are going to be severely limited in what we can accomplish. The majority of software today is still written to be single threaded because frankly writing good multithreaded code is for lack of a better word..difficult and that presents a real bottleneck that I'm hoping we can move past by making use of libraries like webhamsters."
javascript,3dqvwf,Klathmon,2,Sun Jul 19 13:30:37 2015 UTC,outstanding promo video
javascript,3dqvwf,Klathmon,1 point,Sat Jul 18 21:40:40 2015 UTC,So the license looks like its apache 2 with a requirement to rename any forks?
javascript,3dqvwf,awgl,2,Sun Jul 19 00:55:38 2015 UTC,"The license is actually ""Artistic License 2.0"" You can read the full license at the link below, it is not associated with the apache license.  https://github.com/austinksmith/WebHamsters/blob/master/LICENSE"
javascript,3dqvwf,SOLAR_FIELDS,1 point,Sun Jul 19 01:10:55 2015 UTC,"Yeah I was trying to read it over and get an understanding to it.  I meant that it's ""similar"" to the apache except you must rename after a fork. Any other major differences that you know of?  I really want to look into using this and just wanted to make sure it's compatible."
javascript,3dqvwf,awgl,3,Sun Jul 19 01:12:43 2015 UTC,"I completely understand, here is a good basic run down of what the license permits and does not permit. Hopefully this clears up some confusion, https://tldrlegal.com/license/artistic-license-2.0-(artistic)"
javascript,3dqvwf,awgl,2,Sun Jul 19 01:14:09 2015 UTC,"That's what I use! Fucking love them.  Anyway if that's the case then it looks like i can use it!  Thanks, and awesome looking library!"
javascript,3dqvwf,awgl,1 point,Sun Jul 19 01:16:32 2015 UTC,"No problem , out of curiosity what kind of projects do you plan to incorporate multithreading into? Just trying to get a baseline for what use cases people have in the real world."
javascript,3dqvwf,awgl,1 point,Mon Jul 20 14:30:40 2015 UTC,"Do you guys have support for transferrable objects (haven't had much time to look at the documentation yet)?   Yes the library makes use of transferrable objects when you are making use of the optional dataType param which makes use of javascripts typed array support. If you are not using the dataType param it'll fall back to using structured cloning which has been optimized to the best of my abilities depending on the browser used, worse case scenario firing up a thread and sending data and receiving response should take 60ms or less if not using dataType and 0-1ms if you are.   Sounds pretty cool let me know how it goes, I see quite a few places you can thread your logic just looking over it in github. Also just fyi you can chain threaded functions together ;)"
javascript,3dqvwf,awgl,2,Mon Jul 20 14:42:23 2015 UTC,"This is pretty nice. I see that it's a wrapper around web workers, which is cool.  I also have a similar project going that wraps web workers, but it is specifically focused on math, stats, and linear algebra parallelization. It's called mathworkers, if you care to take a look. It actually does work to speed up calculations.   One thing I did in addition to web workers, though, was to hack a way together so that the library could work for node.js also using the cluster module. Have you given any thought into how WebHamsters might be portable to node.js? Or is that not in scope? I'm curious because I feel like what I did to get it to work was a serious hack."
javascript,3dqvwf,zamadatix,3,Mon Jul 20 16:38:05 2015 UTC,"I have actually researched a node implementation and I still have plans to create one however the v8 simply does not ship with a native web worker implementation. There are a few third party ones that I have researched however I'd like to keep the library as vanilla as possible and that's the biggest blocker for me at the moment.  What all did you have to do to get yours to run on node itself? With WebHamsters reliance on browser specific functionality at the moment in the event that a version was made to be node compatible it would simply be a new project such as NodeHamsters or something similar, I'm also unsure how to detect logical core count via node at the moment."
javascript,3dqvwf,Mackinstyle,1 point,Sun Jul 19 01:27:09 2015 UTC,What would be an advantage of multithreading in Node vs just using spawn to create new processes? Less overhead and/or more control?
javascript,3dqvwf,damagedcake,1 point,Sun Jul 19 01:47:35 2015 UTC,"That's getting into a concurrency vs parallelism situation, for example you can spawn a new process but is that process going to run any faster? The goal of parallelism is to actually speed up the execution of a given task typically by performing the same operation on a given set of data that can be broken down into smaller chunks, concurrency allows you to execute multiple task at once but you are not necessarily going to make any one task faster since each task is only using at most 1 thread at a time.   Similar concepts of course but different goals."
javascript,3dqvwf,placius,1 point,Sun Jul 19 02:03:51 2015 UTC,"In my library, I happened to use the cluster module for node.js. I don't know the pros/cons of spawning a child process versus what the cluster module does. Does the child process instantiate a new instance of v8? I'm pretty sure that's how the cluster module works, but not sure. For web workers, that is essentially what happens when you launch a worker: you get another copy of the javascript engine, and its left up to the operating system to figure out how to divvy out among the CPU cores.  All of these things (web workers, node.js cluster, spawning child processes) are still not ""true"" multithreading, in the sense that each worker does not share memory with other threads. I guess it's more multiprocessing. Compare this to something like OpenMP in C/C++, where memory is shared between threads. That is one of the biggest drawbacks--and the reason why you have to do message passing--with web workers. If the memory was shared among processes in web workers, that would be a huge boon, saving on communication time and memory. (Perhaps this is possible and I just don't know about it?) To get around the distributed memory issue, in my library I make duplicate copies of data being sent out to the workers so that they effectively all have the same data. This is not great memory management, and I realize if my project grew into something more serious, I'd want to optimize that more. For now, though it works.   So, to answer your question, if shared memory multithreading was available in node.js or web workers, it would reduce memory overhead and make parallel computation faster and easier to program."
javascript,3dqvwf,PM_ME_INSIDER_INFO,1 point,Sun Jul 19 02:21:08 2015 UTC,"You are correct, currently you cannot share memory between threads. I personally find this to be a good thing as you would encounter far more race conditions where threads are modifying the data of other threads.  In regards to performance however my approach is to split the data between threads, with the introduction of typedarrays this also allows me to create a pointer for each data set so the thread itself can simply fetch the data instead of it being cloned. Of course that is only if your problem can make use of typedarrays. What is great about this approach is once the pointer (buffer) is handed off its no longer in the memory of the main thread. In effect this allows you to create a thread and start work within roughly a single millisecond without increasing heap allocation.  Is there a specific reason you want multiple threads to have access to the same data rather than giving each thread a subset like is done in WebHamsters? I also fear the security implications of that approach.  Wanted to add however to look into emscripten 7 I believe they are adding just what you describe."
javascript,3dqvwf,placius,1 point,Sun Jul 19 02:35:18 2015 UTC,"Yeah, context switching the typed arrays is certainly the way to go to for web workers. I use that also in mathworkers.   Actually, I forgot to mention that for node.js, I do another crazy hack for the interprocess communcation, since context switching the memory is not available in cluster:  MathWorkers.util.ab2str = function(buf) {     return String.fromCharCode.apply(null, new Uint16Array(buf)); };  MathWorkers.util.str2ab = function(str) {     var buf = new ArrayBuffer(str.length*2); // 2 bytes for each char     var bufView = new Uint16Array(buf);     for (var i = 0, strLen = str.length; i < strLen; i++) {         bufView[i] = str.charCodeAt(i);     }     return buf; };    The reason for that is that I want to send/receive an array in one communication operation, as opposed to sending each individual element, which involves a massive overhead. And cluster's communcation cannot send arrays. So I encode the whole array in a string like this. This hack surprising works okay in my experience so far.   Is there a specific reason you want multiple threads to have access to the same data   Yes. Sometimes I need all the workers to know about some data. For example, in matrix-vector multiplication, I need to have all threads know what the vector is. I parallelize this by dividing up the rows of the matrix, sending out the different set of rows to the threads. But, I still need to send the vector out to all the threads also. That's where I clone the vector for each thread. So, I'm now using N_workers times as much memory as I really need were I to simply instead have all threads be able to access that vector. I do a similar kind of thing for parallel matrix-matrix multiplication. Furthermore, if the memory was shared between workers and/or the master thread, then I wouldn't need to communicate between them, which would cut out some overhead.  edit: forgot one of the functions"
javascript,3dqvwf,Mackinstyle,1 point,Sun Jul 19 02:46:27 2015 UTC,"Ah I see, this is a little off topic but have you looked into webGL at all? You can accomplish your matrix needs by making use of compute shaders. I'll admit I only have a basic understanding of them at the moment as I'm still learning but it seems that would be much more viable for what you are looking for in the long run with much less overhead."
javascript,3dqvwf,placius,1 point,Sun Jul 19 03:08:46 2015 UTC,"Thanks for the suggestion. I haven't dug into webGL but have always had it in the back of my mind to give more consideration. Maybe I should actually just do it now.   So, for background, this mathworkers project mostly sprung out of curiosity about if I could parallelize javascript computations. I didn't seem to find any other libraries around that did that. Also, I kind of felt like I could write faster code than some of the more common math js libraries out, so I kind of challenged myself to do that. I've seen some js things out there that kind of do some parallelization/async/optimization, but still not like what I am trying to do with mathworkers. Web workers was just the first tool that I came across that seemed like it might work, and it does!   At this point, mathworkers is mostly an experimental project. If I can shape it into something more solid and user friendly (and maybe put a fancy site on top of it like you did with WebHamsters ;) ), maybe then more people might consider using it. With a larger user base, maybe I'd try to do more optimizations or webGL integrations. Dunno. I don't think a lot of javascript applications really demand high performance computing for math/stats. My sort of pie-in-the-sky idea for it was that maybe I could write some kind distributed compute application mathy/sciencey application that would offload the computation onto the client-side, as opposed to needing a bunch of servers."
javascript,3dqvwf,Mackinstyle,1 point,Sun Jul 19 13:24:16 2015 UTC,"Here is the course i'm currently taking, might help you get started.  https://www.coursera.org/course/webgl  I didn't create this but I did multithread the startup however this is an example of conways game of life using compute shaders in webGL.   http://hamsters.io/test/life/"
javascript,3dqvwf,placius,1 point,Sun Jul 19 18:19:10 2015 UTC,"Thanks, I think I'll give that class a try... but I guess without doing the work since it looks to be too late for that."
javascript,3dqvwf,Mackinstyle,1 point,Mon Jul 20 11:52:20 2015 UTC,"Well, like I said, I used the cluster module. And I basically create a thread pool of workers for either web workers or node.js according to a user set flag:  if (global.isNode) {     // Node.js cluster workers     global.nodeCluster = require(""cluster"");     if (global.nodeCluster.isMaster) {         for (i = 0; i < nWorkersInput; ++i) {             worker = global.nodeCluster.fork();             worker.send(createInitData(i));             this.workerPool.push(worker);             this.nWorkers = this.workerPool.length;         }     } else if (global.nodeCluster.isWorker) {         // worker loads script here         require(workerScriptName);     } } else {     // HTML5 Web Workers     MathWorkers.util.checkWebWorkerSupport();     for (i = 0; i < nWorkersInput; ++i) {         worker = new Worker(workerScriptName);         worker.postMessage(createInitData(i));         this.workerPool.push(worker);         this.nWorkers = this.workerPool.length;     } }   I realize it's probably a little ugly to jam a ""require"" in there like that, but meh. (I am far from being a great JavaScript programmer.) Outside of that branching for the thread pool, all the message passing between the master thread and the thread pool is wrapped into a common communication interface so that my functions don't have to know if they are using node.js or web worker communication. E.g.:  comm.postMessageToWorker = function(workerIndex, message, buffer) {     var worker = global.getWorker(workerIndex);     if (global.isNode) {         worker.send({data: message});     } else {         worker.postMessage(message, buffer);     } };   Finally, the most hacky thing is that I have to surround the core executed code in a big old if, something like this:  // Branch the master thread if (MathWorkers.Global.isMaster()) {     // Begin the computation once the workers are ready     coord.onReady(function() {         coord.trigger(""compute"");     });      // Obtain the resulting dot product     coord.on(""done"", function() {         var dot = coord.getBuffer();         console.log(dot);          // Disconnect from the workers to terminate the program         coord.disconnect();     }); }   That part makes me cringe a little. It's really ugly, but if I don't do that, then all my node.js cluster workers execute that code also when they get launched. I don't really know how else to get around that. It's weird then because if I don't have the master disconnect from the thread pool, I get errors or the worker threads never finish. This is where I am kind of unsure about what to do to make it cleaner. Overall, there are a number of things I'd like to do to clean up mathworkers or increase the abstraction. Any suggestions are welcome."
javascript,3dqvwf,PM_ME_INSIDER_INFO,1 point,Mon Jul 20 14:25:31 2015 UTC,Looks pretty cool. Any real world examples to go along with the guide? Is it possible to get a speedup in real time canvas applications with this or is the overhead / sync to high vs the speed gain at such quick intervals?
javascript,3dqvwf,PM_ME_INSIDER_INFO,1 point,Sun Jul 19 02:48:18 2015 UTC,"The speed up is really dependent on your specific problem, if you are using typed array support you can expect some pretty good scaling. I had some demos on jsperf but since it's been down I'm in the process of building a benchmark like suite so people can test different devices and get a good understanding of potential performance. Have you read about Amdahls law? I think that would be a good place to start if you are new to multithreading. Expect maybe 20-30% performance improvement without typed array and really the sky is the limit if you are using them since the transfer cost is almost 0  Wanted to add, these are not performance comparisons but if you want to test if a specific device is able to make use of the library there are a few test cases you can run.  http://hamsters.io/test/  http://hamsters.io/mobile/  http://hamsters.io/kindle/  These should only be used to test if a device is able to run the library, not really useful for performance comparisons."
javascript,3dqvwf,placius,2,Sun Jul 19 04:48:45 2015 UTC,"By looking into this I learned about the existence of Web Workers.  So, while I admittedly don't know a lot of things about JavaScript, I'm a bit surprised it took so long to learn about these. They sound REALLY useful, but not hearing about them until now suggest they aren't super commonplace.  What's the catch with them?"
javascript,3dqvwf,PM_ME_INSIDER_INFO,1 point,Sun Jul 19 12:34:12 2015 UTC,"No real catch, the way the spec was written was really to allow people to compile existing programs in c or c++ into JavaScript. It is in my opinion unnecessarily complex and the traditional way of using them expects you to reference an external file to run on its own thread instead of being able to thread individual functions hence why I wrote WebHamsters. The barrier to entry for it is just really steep if you are not using an abstraction layer."
javascript,3dqvwf,placius,1 point,Sun Jul 19 05:09:03 2015 UTC,"I notice you've gotten much fewer ""wtf"" type of comments as you continue to work on your library and post it (this is the third time?).  Good for you."
javascript,3dqvwf,PM_ME_INSIDER_INFO,1 point,Sun Jul 19 12:30:46 2015 UTC,"I think the difference this time around is really explaining its purpose and what is possible. Previously the available info was pretty scarce and people are always resistant to things they don't fully understand, still work to be done in regards to documentation though"
javascript,3dqvwf,placius,-2,Sun Jul 19 20:28:50 2015 UTC,"I guess it maybe makes sense for a website about JavaScript to be completely unusable without JavaScript enabled, but..."
javascript,3dqvwf,placius,4,Mon Jul 20 03:16:58 2015 UTC,If you disable JavaScript the internet doesn't owe you usability.
javascript,3dqvwf,placius,1 point,Sun Jul 19 03:26:28 2015 UTC,"I use noscript. If I want to use a site that needs JavaScript for its functionality, I'll obviously let it. But you don't need to interpet and compile a programming language just to put static text on my screen. This seems to be a very unpopular opinion here. This is one of the very few places where this is an unpopular opinion."
javascript,3drlq0,PaulBGD,2,Sat Jul 18 19:57:27 2015 UTC,What does it do and how do you use it? The readme is pretty sparse.
javascript,3drlq0,ChiperSoft,2,Sat Jul 18 23:52:07 2015 UTC,"I agree it is, feel free to make a PR. Basically it allows you to send and read UTF8 data from a WebSocket (more types coming soon!)"
javascript,3drlq0,SubStack,1 point,Sat Jul 18 23:57:56 2015 UTC,"This is a bit of a strange way to do it:  https://github.com/PaulBGD/WebSocketTester/blob/de2bf3e5918a111878939cd8cc64ed2730acfad8/bin/websocket-tester#L11  Why not accept that as an argument on process.argv? Then it could work like netcat, similar to wsnc and you could use the command programmatically from scripts. The ""friendly"" extra > output makes this tool difficult to use from scripts: https://github.com/websockets/wscat/issues/2"
javascript,3dt3a0,Bromethei,3,Sun Jul 19 04:46:27 2015 UTC,You need to clarify your question. <textarea> tags already allow you to copy and paste text while retaining the number of spaces and tabs. What is it that you really want to do that textareas don't do by default?
javascript,3dt3a0,xanados,1 point,Sun Jul 19 06:21:48 2015 UTC,"I don't know what is wrong with your textareas. If you just put textarea.value into innerHTML it's not going to display properly (I'm guessing that's the problem). So if you want to display whitespaces as they were written, you have to encode them:   <br> - \n (new line, ""enter"") &nbsp; - Non-wrapping space &#9; - tab &lt; - < character &amp; - & character"
javascript,3dt3a0,lajw,1 point,Sun Jul 19 07:11:39 2015 UTC,"sometimes this is done by having two textareas, one hidden but focused for capturing input and one for display, sometimes with another hidden one for preserving original data...  not sure if that helps but thats how its done in libraries like code mirror."
javascript,3dqrq1,zoidberghoneydew,9,Sat Jul 18 15:32:19 2015 UTC,"Disclaimer: Never used it myself  I've heard really good things about phaser. I've been interested in it for a while and the documentation looks simple enough. It may be overkill, but it would be worth looking into."
javascript,3dqrq1,K1NNY,2,Sat Jul 18 17:14:38 2015 UTC,"Recently started a project with Phaser, i always avoided it as it felt to bloatet with all the features but when i actually worked with it i noticed it is just awesome. Also the performance is just awesome, i usually had to optimize much more to get it running smoothly."
javascript,3dqrq1,talkb1nary,1 point,Sat Jul 18 19:18:26 2015 UTC,"Can confirm, phaser is quite awesome. For simply rendering, Pixi.js is great (Phaser uses this)."
javascript,3dqrq1,seiyria,2,Sat Jul 18 22:26:40 2015 UTC,"OP should look into both libraries and  then see if he really needs the extra features that Phaser offers, otherwise pixi.js should fit him perfectly."
javascript,3dqrq1,KCdehImposter,1 point,Sun Jul 19 00:39:44 2015 UTC,"Doesn't very few hours with phaser so far and me and my kids already have a game with sprites and sounds and collisions and scores. Like less than 6hrs total and that's including audio recording and graphics processing (I have mild experience in these domains, and small prior experiences in Javascript, gulp,etc so ymmv).  But yeah phaser is so easy and wow! Just amazing. I've barely scratched the surface.  I'm on tutorial#2 and we're like ""fuhgetaboutit let's just make a game"" I would highly recommended it for a n00b like myself. (and I only heard about phaser about 2 weeks ago)  I haven't push the latest (with sound effects and more) but it's  https://github.com/feelingsofwhite/games and I'll push sometime tomorrow if you care. But nothing special; follow the tutorial and an hour or three later you'll be at the same spot I am"
javascript,3dqrq1,feelingsofwhite,4,Sun Jul 19 03:00:32 2015 UTC,"As /u/K1NNY says, Phaser is fantastic. I love using it, simple and powerful. There's also a new game engine add-on for p5.js. Provides basic features but is very easy to us if you just want to get going."
javascript,3dqrq1,sirmarcus,2,Sat Jul 18 18:14:26 2015 UTC,"I too mostly recommend Phaser, which is the one I had the best experience with from day 1. Like, it just works :)  If you want a really minimal library which just provides some boilerplate on top of the canvas, you could also try Coquette."
javascript,3dqrq1,jimeowan,1 point,Sat Jul 18 19:35:00 2015 UTC,"Phaser and Impact just didn't get through to me. EaselJS was the one that allowed me to actually, finally, make something.  Since then, I've looked for a scalable library with good design patterns and found PandaJS to be very promising.  Your point about taking a data structure and rendering it as a picture (bitmap) sounds something like the tilemap plugin for pandajs. It's pretty awesome."
javascript,3dqrq1,krazyjakee,1 point,Sat Jul 18 18:40:34 2015 UTC,"The Canvas API is exactly that. It's simple 2D drawing API which does all the basic stuff like drawing images, lines & rectangles, and text. It also supports transformations, clipping, and blending modes.  For simple games, you really don't need anything else.  E.g. for a chess game, you'd just draw the board (could be as simple as drawing a single large image) and then you'd draw the images of the pieces on top. That's it.  It's just one drawImage call and another one in a loop. You don't need a library for that.  This talk covers all the basics:  Google I/O 2011: Super Browser 2 Turbo HD Remix: Introduction to HTML5 Game Development https://www.youtube.com/watch?v=yEocRtn_j9s  Slides:  http://io-2011-html5-games-hr.appspot.com/  The only thing that has changed in the meantime is the requestAnimationFrame prefix stuff on slide #32. The prefixes aren't needed anymore. You only need the fallback for IE9 (if you care about IE9)."
javascript,3dqrq1,x-skeww,1 point,Sat Jul 18 22:44:57 2015 UTC,"If you want something super light weight, try Canvasquery and Playground.js. It handles canvas rendering as well as mouse events (which appears to be what you need). The library doesn't force you to structure your code in a specific pattern. It acts more like the boilerplate code you would write should you decide not to use any engine at all. I prefer to program at at lower level and have little dependencies. Been using them for my game and had no issues so far. The library code is very short and readable, so you can just debug it when something goes wrong."
javascript,3dqrq1,fishtastic,1 point,Sun Jul 19 02:37:35 2015 UTC,"Hey, just wanted to throw this out there: since you said you're experienced in programming you might want to check out Pixi.js.  If all you want is a graphics/interaction library then this is for you.  You can get it rendering graphics in 20 or 30 lines of code.    For your game, you'd probably want to create a  Sprite for each of your game pieces and use its mousedown and mouseup events to implement dragging.  Performance doesn't seem like a big deal for your game, but this library is fast and you could probably use it for future projects, too."
javascript,3drrse,JAwesomeness-Rocks,4,Sat Jul 18 20:51:53 2015 UTC,"jsfiddle tip:  The bottom left pane is for JavaScript so you don't have to worry about putting it into script tags in the html.  This makes it much easier to work with!  http://jsfiddle.net/sxhL8qv5/3/  Note that by default jsfiddle will automatically wrap this code in an onLoad handler which will incidentally cause functions and variables you write there not to be accessible by the HTML, for example with how you have your button click set up whatDoYouLike(), but the drop-down on the left lets you change this and putting it in the body (or head) will allow it to be seen. :)"
javascript,3drrse,senocular,0,Sun Jul 19 03:03:40 2015 UTC,oh did you know that it doesnt work with the javaxcript tab yknow functions
javascript,3drrse,senocular,0,Sun Jul 19 11:42:44 2015 UTC,sorry what i meant to say was functions in javascript dont work in the javascript tab
javascript,3drrse,lewisje,2,Sun Jul 19 11:43:48 2015 UTC,Not sure I follow you.
javascript,3drrse,GabrielMtn,1 point,Sun Jul 19 16:29:32 2015 UTC,"They actually do work in that tab: Senocular's fiddle even shows it.  Another way to make that function work is to set up the event handlers in your JS, rather than in HTML event-handler attributes, like setting id=""like"" on the button element in HTML, and then in JS, using a line like document.getElementById('like').onclick = whatDoYouLike;"
javascript,3drrse,Combinatorilliance,1 point,Mon Jul 20 01:25:53 2015 UTC,It's a start! Now try to do it with a text input rather than a prompt!
javascript,3drrse,calsosta,1 point,Sat Jul 18 21:28:51 2015 UTC,"Heh, shame on the downvoters, I remember being excited about building a text to pyglatin converter. The implementation consisted of two function calls and a + sign. I even console.log'd it so you could see it in the console!"
javascript,3drrse,Mackinstyle,2,Sat Jul 18 23:21:39 2015 UTC,Honestly don't get the point of downvotes on smaller subs like this.   If it's off topic or against the rules mods should remove it.   If you don't like it just move along.
javascript,3drrse,sqrtnegative1,1 point,Sun Jul 19 05:22:45 2015 UTC,"That feeling of writing one of your first programs and starting to see how it can all come together is so empowering. I'm a few years into being a programmer and as my toolbelt grows, I keep feeling added layers of that original feeling.  I can't imagine being a non-programmer.  I really hope one day everyone gets the basics in school as a required set of courses."
javascript,3drrse,thebigkick,2,Sat Jul 18 23:39:40 2015 UTC,"Welcome to Javascript!    www.jsbin.com is usually faster/nicer/kinder/lovelier than jsfiddle.  There are others, but as an avid javascripter I've always thought jsfiddle was the slowest."
javascript,3dqknw,srw,4,Sat Jul 18 14:19:04 2015 UTC,What about using console.trace?
javascript,3dqknw,incarnatethegreat,1 point,Sat Jul 18 18:59:07 2015 UTC,I assumed the point is so you can show the trace somewhere other than the console.
javascript,3dqknw,defproc,1 point,Sat Jul 18 20:21:30 2015 UTC,"Eh. The more ideas, the better."
javascript,3dqknw,incarnatethegreat,1 point,Sat Jul 18 20:33:18 2015 UTC,Too bad this isn't standard: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Stack
javascript,3drimh,velmu3k,2,Sat Jul 18 19:30:35 2015 UTC,"Having just come off of a Star Trek thread, I was expecting this post to go in a different direction..."
javascript,3drimh,kurzweilfreak,1 point,Sun Jul 19 14:49:40 2015 UTC,Can anyone speak to the top Javascript development tools that Windows has?
javascript,3drimh,steezefries,1 point,Sun Jul 19 03:26:22 2015 UTC,"MS Code is fantastic, though I've always been partial to Sublime Text, which Code is almost a direct ripoff of.   Webstorm is also another great tool, a bunch on our team use it and love it.  The major problem with Node on Windows is all the dependency trees.   They can get too deep for the OS to handle at times due to the API call node is making for directories.   Just a small warning..."
javascript,3drimh,creathir,2,Sun Jul 19 03:35:35 2015 UTC,"npm 3 (currently in beta, npm install -g npm@3) fixes this by installing dependencies flat unless there is a conflict."
javascript,3drimh,smrq,1 point,Sun Jul 19 07:09:37 2015 UTC,"Yeah, I can't wait for that."
javascript,3drimh,creathir,1 point,Sun Jul 19 12:23:28 2015 UTC,"Both of those are multi platform though. The article just said it in a way that made Windows sound really awesome for Node development, and in my own experience I've had a much better time w/ *nix. I was just curious about the development experience in general in Windows. They seem to be bringing a lot of new things to the table, things I love about Linux."
javascript,3drimh,steezefries,1 point,Tue Jul 21 06:28:51 2015 UTC,"Corporate IT is not nearly as heterogenous as this author would like it to be. Speaking from 15 years of experience, Windows tends to be synonymous with corporate IT when we're talking about ADS, email, and workstation OS, but in serverland I've seen it all. Windows only environments exist and MS is definitely moving toward being more invested in OSS and Javascript in particular, so more homogenous environments on the MS stack will be increasingly viable."
javascript,3dtkm0,Kempster3,2,Sun Jul 19 09:13:26 2015 UTC,"The script can't find id 'user_choice', move the script to the end of the page, or wrap it in something like  window.onload = function() {     // everything here };"
javascript,3dtkm0,massReduced,1 point,Sun Jul 19 09:48:05 2015 UTC,"Cheers, I'll give that ago."
javascript,3dtkm0,massReduced,2,Sun Jul 19 09:53:14 2015 UTC,"Actually no, you have some major problems in the code here.   These two lines have the same identifier name:   // This immediately prompts the user to supply a variable var user_choice = prompt(""Paper, Scissors, Rock."");  // This then replaces the above, with ""null"" because the element its trying to find doesn't exist var user_choice = document.getElementById('user_choice');    In the HTML, you use it like so:  <form onsubmit=""compare(user_choice, computer_choice)"">     <input type=""text"" id=""user_choice""> </form>   If you didn't replace user_choice the second time, after submitting the form, the first argument in compare would be the value from prompt.  I'm not sure what you're trying to accomplish - your program has two forms of input for the user to choose rock/paper/scissors?  Suggestions: You can forgo the <form> entirely, and do everything immediately after the prompt(), since the user would have already supplied a choice. If you want to use the <form>, you can only use getElementById if the element exists in the page at execution time. So move the script just before the last </body> tag, or use a window.onload function."
javascript,3dtkm0,massReduced,1 point,Sun Jul 19 10:01:52 2015 UTC,"Thanks dude, I thought I commented out the var user_choice = prompt(""Paper, Scissors, Rock.""); my mistake Thanks heaps!"
javascript,3dqpv6,based2,1 point,Sat Jul 18 15:13:40 2015 UTC,This looks pretty promising.  I'll have to fool around with it this week.
javascript,3dq4bc,bebxp,5,Sat Jul 18 10:22:51 2015 UTC,I'm not a smart man
javascript,3dq4bc,domainkiller,2,Sat Jul 18 12:51:49 2015 UTC,"Being smart is relative, I don't really see what this is useful for, does it have a real use case?"
javascript,3dq4bc,krazyjakee,1 point,Sat Jul 18 18:24:05 2015 UTC,"Very nice. The code is nice and easy to follow, not what I expected for this kind of library!"
javascript,3dq4bc,trevorsg,1 point,Sat Jul 18 14:50:03 2015 UTC,"Very cool idea. Your code could be a bit more readable though ...    var s = 0, t = 1, u = 1, v = 0;     while (a !== 0) {          var q = b / a | 0, r = b % a;         var m = s - u * q, n = t - v * q;          b = a;         a = r;         s = u;         t = v;         u = m;         v = n;     }   I have no idea what's going on here at all and there's no reason your variables couldn't have a tad bit longer names. And that's coming from me, who is all into /r/tinycode"
javascript,3dq4bc,nexe,1 point,Sat Jul 18 15:57:28 2015 UTC,"I used to do the same thing, however, I ended up creating some massive projects without comments and it was painful to revise. Now I try to spell out each variable name and have as many comments as I can."
javascript,3dq4bc,MercDawg,1 point,Sat Jul 18 18:33:41 2015 UTC,"The egcd is a well known standard algorithm, which expresses ggt(a,b)=sa+tb. As this is a mathematical function, I used to keep the mathematical notation of this function and think that it is still readable and easy to follow."
javascript,3dq4bc,nexe,1 point,Sun Jul 19 18:45:24 2015 UTC,Fair point. I'd add a wiki-link to the algorithm in the comment then maybe.
javascript,3dpct0,olds123,67,Sat Jul 18 04:01:52 2015 UTC,"Absolutely. JavaScript is really a wonderful little language. While it does have its quirks (what language doesn't?), programming in JavaScript is a really unique experience. If you're already doing a lot of development in in a language, it's probably best to learn how that language works on a fundamental level, right?"
javascript,3dpct0,tubbo,29,Sat Jul 18 06:12:45 2015 UTC,"Yes.    It removes a lot of the magic,  knowing what patterns are the framework and which are JavaScript let's you have more power within the framework.  When the framework doesn't cover something, you'll know the solution.  When there's a bug in the framework, you can contribute with better feedback,  code,  etc. It also means you'll be better prepared to patch your app.  You'll learn frameworks faster.    But, I do realize there's only so many hours in the day for training."
javascript,3dpct0,snlacks,1 point,Sat Jul 18 04:30:15 2015 UTC,"Your last sentence sums up the issue for me, I've been trying to get to grips with JS but I'm constantly asked to do new things with new frameworks. Endless cycle it seems right now."
javascript,3dpct0,germainelol,9,Sat Jul 18 04:45:05 2015 UTC,"I like to think of it as a RPG, leveling up means the old monsters are easier, but now you have access to monsters that are more challenging, requiring more thinking and creativity, despite having higher skill levels.  Except the gil is real."
javascript,3dpct0,snlacks,4,Sat Jul 18 14:25:28 2015 UTC,"That's why learning to effectively learn is better than the actual knowledge gained.  If you don't want to learn new things on a fairly regular basis, javascript and web Dev may leave you behind. It's evolving very quickly."
javascript,3dpct0,terrorTrain,2,Sat Jul 18 07:08:20 2015 UTC,"If you don't want to learn new things on a fairly regular basis, javascript and web Dev may leave you behind. It's evolving very quickly.   Or at least, it sometimes seems to be. I'd argue that one of the biggest advantages to learning the fundamentals rather than specific tools is that you can reliably distinguish real advances from minor conveniences or pure hype. As with any programming ecosystem, the latter is often the biggest group, and the useful but non-essential conveniences far outnumber fundamental changes that you really do need to understand to use the full potential of what's available."
javascript,3dpct0,Silhouette,1 point,Sat Jul 18 19:03:11 2015 UTC,Fully agree. A lot of JS stuff is just conversions of stuff used in Java in the 00s (and Lisp in the fifties). Just new wrappings.
javascript,3dpct0,fatso83,0,Sat Jul 18 19:47:05 2015 UTC,"I fully agree, and I'm confident enough with JS as it stands, but I would like to further that knowledge, which I find difficult to do at my current workplace, simple as that. You don't need to patronisingly tell me to up my game."
javascript,3dpct0,germainelol,4,Sat Jul 18 07:34:04 2015 UTC,I apologize if I came off patronizingly. It was not my intent. I find I come off a little too snappy when I comment on my phone.  I intended the comment to be about how learning how to learn new javascript stuff quickly is very valuable as javascript is changing so quickly.  Sorry if I came off as an ass!
javascript,3dpct0,terrorTrain,32,Sat Jul 18 13:31:40 2015 UTC,"Learning JavaScript itself will be very helpful for learning JavaScript frameworks. Be warned, however: learning advanced JavaScript can be a rabbit hole, especially when you get into learning about prototypes and ""classes"". You Don't Know JS is a good resource for the lesser-known aspects of JavaScript.  The one advanced JavaScript concept that you should definitely learn about is scope and closures.  You may also want to learn about this and prototypes. Classes and the this keyword are pretty confusing concepts in JavaScript, especially if you don't use ES6 (the just-finished new version of JavaScript).  I'd recommend learning advanced JavaScript and your JavaScript framework of choice simultaneously.   I can't speak to how useful knowing manual DOM manipulation is for learning frameworks. I did manual DOM manipulation for years, long before learning any JavaScript framework, and it definitely gives you a different outlook on things, but that comes mostly from experience. Of course, it will make you better able to understand what's going on under the hood, and do stuff under that hood if you need to. But there are a lot of developers who know nothing but jQuery and do fine. (Insofar as employment goes, anyway... the rest of us have to put up with it.)"
javascript,3dpct0,clessg,19,Sat Jul 18 04:29:30 2015 UTC,"I understand why scope and closures would be considered advanced, but I feel like JavaScript isn't even usable without understanding scope.  You'd get so freakin' frustrated so fast wondering why  this.member is undefined when called by that.methodB() vs. this.methodA()"
javascript,3dpct0,Mackinstyle,4,Sat Jul 18 06:55:55 2015 UTC,"When you start googling common error messages it generally leads you to your missing new statement or that you need to attach to the prototype, so many can stumble through without actual knowledge of how it works."
javascript,3dpct0,Klathmon,1 point,Sat Jul 18 12:41:33 2015 UTC,"But it rarely leads you to  ""You need to use a binding library or call or apply if you want to call another prototype's methods in their scope."""
javascript,3dpct0,Mackinstyle,3,Sat Jul 18 15:38:46 2015 UTC,"Agreed, scope keeps biting me in the ass and I'd consider myself above average at this point."
javascript,3dpct0,YourShadowDani,7,Sun Jul 19 01:35:48 2015 UTC,"Yes, (note: Node JS isn't a framework though).    Learning the basics and JavaScript well will make picking up other frameworks / libraries / etc easier.  As at the end - they are all just JavaScript."
javascript,3dpct0,e82,6,Sat Jul 18 13:53:22 2015 UTC,Absolutely.  Once you understand how things work most of the framework functionality happens to feel a lot less mysterious.  My recommendation is to learn ES5 + ES6 and use Babel to use all the goodness of future browser technology today (this works on the server side too).  Then explore all of those frameworks and make yourself comfortable with their abstractions and API.  Good luck!
javascript,3dpct0,alp82,3,Sat Jul 18 09:16:57 2015 UTC,Its called ES2015 and ES2016 now.  Its an important distinction because ES2016 allows class properties and thats probably what most people want.
javascript,3dpct0,destraht,2,Sun Jul 19 04:34:03 2015 UTC,Thanks for the correction.
javascript,3dpct0,alp82,1 point,Sun Jul 19 17:41:59 2015 UTC,"Actually, ES2015 is the new name for ES6, while ES5 is still ES5; ES2016 is the new name for ES7."
javascript,3dpct0,lewisje,6,Mon Jul 20 01:42:55 2015 UTC,I would say that one of the worst things is working on code from someone who doesn't have a strong fundamental understanding of JavaScript.
javascript,3dpct0,xXxdethl0rdxXx,11,Sat Jul 18 14:40:26 2015 UTC,A strong knowledge of vanilla JS makes you realise frameworks are not necessary much of the time.
javascript,3dpct0,landofcats,6,Sat Jul 18 07:21:14 2015 UTC,Learning vanilla JS plus the advent of modern browsers make jQuery fairly useless.
javascript,3dpct0,octatone,2,Sat Jul 18 11:06:54 2015 UTC,I'm finding that as well.  I'm porting my app now to webpack with Babel.  I was using jQuery Ajax but now I'll be using the fetch polyfill.  I was building some elements with jquery but now I'm using a better templating language.  Now I'm also using Ampersand instead of Backbone and its built to reasonably not use jquery at all.  Then I'll probably use velocity for any animations.  So my goal now is to completely remove jQuery from the main bundle and to only use it in an optional bundle for a feature that uses a jQuery UI widget.
javascript,3dpct0,destraht,2,Sun Jul 19 04:32:11 2015 UTC,"Sort of true.  Frameworks are different from languages, and they do have purpose.  It's mostly about inversion of control.  Why should I write a lot of code to do something, when there is already a framework that I just need to ""plug"" in to?"
javascript,3dpct0,skitch920,1 point,Sat Jul 18 13:19:53 2015 UTC,Depends how much time it takes to learn the framework though.
javascript,3dpct0,sfdud,1 point,Sat Jul 18 17:32:35 2015 UTC,Fuck frameworks. Frameworks never stick around. Just find some good libraries that you can bring from one project to the next. Also makes exchanging bits and pieces easier.
javascript,3dpct0,fatso83,1 point,Sat Jul 18 19:58:03 2015 UTC,"I agree, you sit there with jquery doing $(window).resize(function() {}); and it's the only way you remember how to do it, even though the vanilla way window.addEventListener('resize', function() {}); is barely different at all ... and then you realize this happens a lot in just one jquery library, let alone all the other libraries in existence."
javascript,3dpct0,qudat,5,Sat Jul 18 15:13:38 2015 UTC,You can't go wrong learning the fundamentals of a language before diving into frameworks.  I recommend Crockford's JavaScript: The Good Parts.
javascript,3dpct0,karptonite,3,Sat Jul 18 12:33:11 2015 UTC,"As you've seen, the answer is a strong YES. However, I want to point some things out:  First of all, node.js. It seems you are most interested in it, but are a bit confused about what it really is. node.js is a runtime, not a framework. Basically, it's a program (written in C++, by the way) just like any other program in your computer. Just like Firefox, iTunes or Photoshop. However, unlike those programs, node.js lacks a GUI. What node does is, basically, run javascript (using the v8 engine specifically) in an environment that has access to your file system, effectively making it possible to access your files (and, thus, execute stuff in your computer) using JavaScript.  The apps you write to run in node are, thus, written in vanilla JavaScript. Sure thing, it does come with some additional functions tha tare not part of the ES specification (like require), but is still vanilla JavaScript for the most part.  That is, until you start installing packages. Say, you could install underscore running npm install underscore and use it with  var _ = require('underscore');  _.each([1,2,3], function() {...});   That's not vanilla anymore. You are using a method of the _ variable which is importing the underscore library using require.  This leads me to my second point. JavaScript has an Array.forEach method to iterate through arrays. Why would you use underscore? It makes sense in the browser, because you have no idea what runtime will be executing your JavaScript, so it may be an old engine (like the one Internet Explorer 7 uses) and it may not have support for the Array.forEach method. Libraries are meant to abstract methods you may use often. There are a few options on what these methods may be. I'll be using jQuery as an example:   They may be methods that are already present in the specification (vanilla JS), like Array.each. jQuery's $.each is an example of this. It's meant to standardise and/or polyfill a method. As engines adhere more to the standard, these are less and less required. [*] They may be custom methods you do over and over again. $('div').empty() is a good example of this. As you can see from the source code, it's an abstraction of an often-used method: iterate through a parent's children and cleaning them out. They may be abstractions of a little bit of both. $.ajax is a great example of this. It's a wrapper for the XMLHttpRequest object in the specification, that standardises the method across browsers (IE6 uses ActiveXObject.aspx) instead of XMLHttpRequest), and creates a nifty wrapper for frequently used methods (so it's very easy to write a success callback or a fail callback. The $.ajax wrapper has a nice API to do this, whereas the standard library does not.   [*] The concern is now gearing more towards optimisation, rather than polyfilling/standardising, but that's a whole other discussion.  I'm telling you all of this for a simple reason. Imagine you are used to jQuery but now want to learn some underscore and backbone. All these libraries do very different things, but they share a lot of functionality. So you are now using underscore and want to iterate through an array, but alas, you can't. You don't have $.each here. Underscore has a _.each And you also have the alternative of using Array.forEach. They all do the same thing! (well, not the SAME thing, but you can achieve what you want to do using any of them). They might not use the same syntax or API, but if you understand Array.forEach, you understand $.each and _.each. All you need to adjust is the syntax of the framework you chose. Insta-learning!  This was an example with a very simple method, but now imagine you are using Backbone and you call Backbone.View.render();. If you don't know the inner workings, it's all magic to you, and the moment you want to go and learn, say, React, you'll struggle with the concept of render and how Backbone handles it. If you, on the other hand, understand the core of the library (the vanilla part), you'll more easily grasp what Backbone.View.render is doing and how it's different from React.render. It'll also make it easier to debug your problems.  So yes. Vanilla JavaScript is awesome. It'll make you a fast learner (which is a MUST in our field. The amount of libraries that come and go is too damn high), build faster and help you understand HOW things work rather than just assume they work."
javascript,3dpct0,MeTaL_oRgY,3,Sat Jul 18 18:01:53 2015 UTC,Yes.
javascript,3dpct0,Dwengo,2,Sat Jul 18 16:42:40 2015 UTC,"Absolutely.  6 years ago I had 10 years of on/off experience with Javascript.  With no prior ExtJS experience I got hired for an ExtJS contract due to that experience, and within two months I was being contacted by then head of ExtJS to possibly work for them.  (Idiotically now despite the above nobody will consider me for Angular positions although I now have FIFTEEN+ years Javascript experience)"
javascript,3dpct0,dexygen,2,Sat Jul 18 13:26:12 2015 UTC,Absolutely. Especially because without additional frameworks node is just vanilla JavaScript.
javascript,3dpct0,RecycledAir,5,Sat Jul 18 14:50:55 2015 UTC,You're on the right track. Just do that for one more year
javascript,3dpct0,GoosyTS,1 point,Sat Jul 18 08:39:21 2015 UTC,"I want to learn frameworks like node, express, angular, and jQuery   Not to hate, but node is not a framework. It's an event-driven runtime, seperate from the browser. It's basically a server engine that happens to use javascript.  Node and express are completely separate from angular and jQuery, as they are meant for server-side programming, not front-end work. Express is a tiny wrapper on top of node's standard library server.  As for your question, learn advanced js. It's a weird but great little language. I like the mix of OOP and functional programming."
javascript,3dpct0,Tankenstein,1 point,Sat Jul 18 10:43:36 2015 UTC,Strong knowledge of core JS isn't necessarily a need for learning frameworks but if you want do well in this field you should have strong knowledge of core JS.   Frameworks come and go but core JavaScript stays so you should be good at it. Many things like jQuery etc would likely disappear because language(ES6 for example) and browsers become lot more sophisticated in future.
javascript,3dpct0,jagtial,1 point,Sat Jul 18 15:54:50 2015 UTC,"Learning enough JS to reach a point of frustration that a framework solves will make you all the more eager to learn that framework. And once you're learned a framework, guess what, All the bits in between framework calls are just vanilla JS anyway.  But it's not just JS. If you want to learn web services or ajax calls, then look into the HTTP protocol. You should understand request, response, HTTP verbs, headers, response codes, Idempotent, mime types, and application/x-www-form-urlencoded. Then you turn around and see how jQuery does this and it's no longer magic, it's just extremely convenient and you can understand and handle issues when they come up."
javascript,3dpct0,sotopheavy,1 point,Sat Jul 18 16:15:54 2015 UTC,Absolutely. Functions that take or return functions are key to eloquent javascript. Understanding lexical scope is key to understanding functions. Also first thing I check on job interviews is if the candidate actually knows javascript.
javascript,3dpct0,IxD,1 point,Sat Jul 18 16:23:35 2015 UTC,...YES
javascript,3dpct0,cultofmetatron,1 point,Sat Jul 18 17:30:38 2015 UTC,"Damn, I did not expect to see this many responses, let alone quality responses. Thank you all"
javascript,3dpct0,one800higgins,1 point,Sat Jul 18 19:18:23 2015 UTC,"Yes.  jQuery gave JavaScript a bad name because it essentially replaced all JavaScript requirements for DOM manipulation and made it so developers could write JavaScript without knowing JavaScript. That being said, it does a damn good job of DOM manipulation.   Anyway, most other JS frameworks provide layers of abstraction over JS, but still require you to know and understand how JS functions. This is a good thing. You definitely need to learn JS if you plan to get into things like MVC frameworks or really anything outside of jQuery.   If you plan to use Node, then you absolutely need to know JS. Node isn't really a framework in the same sense as Angular or jQuery. Node is just a means for running JS on a server and also provides some extra functionality related to the server. However, you will still be writing vanilla JS for Node."
javascript,3dpct0,cport1,1 point,Sat Jul 18 19:23:39 2015 UTC,It is essential that you learn it. I won't hire anybody that simply relies on jQuery.
javascript,3dpct0,madman86,-1,Sat Jul 18 22:09:31 2015 UTC,"Yes! But always keep in mind, JavaScript is NOT an OO language despite a lot of people coercing it into looking like one. It is a prototypical, functional language."
javascript,3dpct0,oldfatandslow,2,Sat Jul 18 13:27:52 2015 UTC,"JavaScript is as object oriented as they come - everything is an object. That said, as mentioned previously, it isn't a classical object oriented language (despite efforts in es6 to make it look that was.. Classes, smh.)  Prototypal object orientation is at least as powerful as classical object orientation. It's just... Very different. And those differences trip up lots of people who come from classical (Java, c#, etc) backgrounds."
javascript,3dpct0,lewisje,1 point,Sat Jul 18 12:55:13 2015 UTC,"It's often said that everything is an object, but that's not quite true: Every value is either an object, a scalar primitive (boolean, number, string, or the new ES6 type, symbol), or null or undefined, and out of the primitives, only the scalar primitives can be acted on like objects.  The language uses temporary wrapper objects for the scalar primitives in some cases, like retrieving data properties or invoking methods, while if you try to access or set a property on null or undefined you get a TypeError; also, if you use the Object conversion function on a scalar primitive, you will respectively get a wrapper object that is instanceof for Boolean, Number, String, or Symbol (and for the first three, you can explicitly use the constructors, while new Symbol() throws an error), but there are no Null or Undefined constructors, and if you use the Object function on them it's just like {}, an object with no own properties that inherits from Object.prototype. (There's no good reason to make persistent wrapper objects in this way; exposing the wrapper constructors was done to attempt to appeal to Java programmers.)  Later versions of the language do allow primitives to be used more like objects; for example, if you invoke a method on a scalar primitive then this will be the primitive itself, rather than the wrapper object, and you can even use call or apply or bind to set this to be null or undefined (for example, in ES5 and later, Object.prototype.toString.call(null); returns '[object Null]')."
javascript,3dpct0,slccsoccer28,2,Sat Jul 18 18:36:16 2015 UTC,"JS is most definitely and OO language but (1) it uses prototypal inheritance and (2) most people don't use it in an OO fashion.  The first point is in my opinion the biggest reason people don't think it's OO.  People are used to seeing Class and Extend that languages like Java provide. Using a function as a class is weird, but it's still OO."
javascript,3dpct0,SawyerDarcy,0,Mon Jul 20 02:04:47 2015 UTC,It's both.
javascript,3dpct0,madman86,2,Sat Jul 18 14:00:05 2015 UTC,Not really
javascript,3dpct0,Ogesana,0,Sat Jul 18 13:21:26 2015 UTC,You are almost there. JavaScript is OO without classes (new syntax being just sugar). Eric Elliott and Kyle Simpson refer it as Objects Linked to Other Objects—OLOO.
javascript,3dpct0,qudat,0,Sat Jul 18 13:34:08 2015 UTC,If it looks like a duck and quacks like a duck ...
javascript,3dpct0,sfdud,1 point,Sat Jul 18 14:04:09 2015 UTC,Could be a human in disguise
javascript,3dpct0,dhdfdh,0,Sat Jul 18 15:15:05 2015 UTC,"Like I said in my other post, reddit is stupifying, and you won't gain anything by expressing factual knowledge here."
javascript,3dpct0,dhdfdh,-5,Sat Jul 18 18:52:48 2015 UTC,I don't even think it was a year ago I said the same thing as all these commenters and was downvoted into oblivion. Reddit is just stupifying.
javascript,3dpct0,one800higgins,1 point,Sat Jul 18 16:55:12 2015 UTC,And yet you are still here...
javascript,3dpct0,dhdfdh,-1,Sat Jul 18 12:48:31 2015 UTC,Looking for links and to make fun of stupid reddit posts like yours.
javascript,3dpw0z,BigPopcornThing,41,Sat Jul 18 08:01:35 2015 UTC,"The language was designed to be written by people that didn't necessarily have a programming background (i.e. web designers), so the simplicity of having a single numerical type was considered worth the tradeoff.  That's not an entirely crazy decision; other languages have made it as well, such as Lua.  And IEEE doubles can represent all integers in the range [-253, 253] which is much more than you'd get with a typical 32 bit int type, so it's not like you have to give up something.  Implementing things like hashes is a little bit of a challenge, but still doable.  64 bit integers have always been the missing piece and I believe they're on the table for ES7.  Edit: you can also see this in other aspects of the language design, such as automatic semicolon insertion and type coercion when using ==.  The idea was to make people not have to worry so much about things like missing semicolons (a perennial newbie mistake) and having to convert strings to numbers when comparing.  Those have proved controversial decisions, but they were rooted in the idea that the language should be as accessible as possible to people with no programming background."
javascript,3dpw0z,Rhomboid,20,Sat Jul 18 08:51:02 2015 UTC,"The language was designed to be written by people that didn't necessarily have a programming background (i.e. web designers)   Initially read that as ""The language was designed by people that didn't necessarily have a programming background (i.e. web designers)"""
javascript,3dpw0z,clessg,6,Sat Jul 18 09:08:44 2015 UTC,"Interestingly enough the == evaluation is nice not being type bound when working with third party libraries that are sometimes..... not always the best. The fact that you can still do explicit type matching === means that in the long run, I really do think it makes it more accessible and a little less punishing. That being said, obviously there is a trade off, but I've always enjoyed JS, it feels more like Jazz than Classical Music (as in, it lets you lean on the rules a little heavier and do your own thing) which is great for learning."
javascript,3dpw0z,dotpan,3,Sat Jul 18 18:26:41 2015 UTC,"I hated Java development when I first started learning it. After a while, I stuck to Web Design and Front-end Dev since it seemed easier (and then in more demand). JS is easier to work with, far less stingy than Java, yet powerful. Now that I'm a lot more proficient with coding, I want to get back into Java."
javascript,3dpw0z,incarnatethegreat,0,Sat Jul 18 18:46:02 2015 UTC,web designers   Pretty sure that was not a thing when JS was being designed.
javascript,3dpw0z,defcon-12,4,Sun Jul 19 00:39:48 2015 UTC,"In 1995 when JS was designed the web had already existed for several years, so by definition there were web designers.  They might not have called themselves that at the time, but they were people who designed web pages, and they often lacked a programming background."
javascript,3dpw0z,Rhomboid,-4,Sun Jul 19 01:00:08 2015 UTC,"This is hilarious because JavaScript is so needlessly complex and broken in other ways. They tried to make a language that was easy to use and ended up not making a language that is easy to use in the parts that are important  The whole semicolons thing is a riot. The language that powers the web was designed to allow people to make mistakes, why why why"
javascript,3dpw0z,rowe92,16,Sat Jul 18 09:22:30 2015 UTC,"I can't second that. JS is a minimalistic language approach similar to lisp (what lists are to lisp are hashmaps to JS). As it was kind of ad-hoc there are some quirks, however in practice these are just not that problematic as all those eye-rolling JS hating suggests.  Its just a very basic and flexible, paradigm-free approach to a language design. You can use functional style, you can use class based OO style, but its not built ""into"" the language.  Its simple, not complex."
javascript,3dpw0z,moru0011,20,Sat Jul 18 12:36:42 2015 UTC,"Consider the following languages that were also aimed at non-programmers   PHP COBOL AppleScript Visual Basic Matlab   Compared to them, JS looks pretty good."
javascript,3dpw0z,theQuandary,6,Sat Jul 18 09:38:30 2015 UTC,"VB is to VB.net as Java is to JavaScript, as car is to carpet, as ham is to hamster."
javascript,3dpw0z,Arffman,-12,Sat Jul 18 17:00:53 2015 UTC,PHP is good these days an the rest are no longer or not really used in production. But I still don't understand why you'd make a language for non programmers outside of education.
javascript,3dpw0z,rowe92,9,Sat Jul 18 20:08:26 2015 UTC,Vb is very much still in production for Windows scripting
javascript,3dpw0z,d1sxeyes,4,Sat Jul 18 09:48:36 2015 UTC,There are loads of COBOL stytems still in production. Legacy == fastest growing market ;)
javascript,3dpw0z,moru0011,5,Sat Jul 18 10:05:47 2015 UTC,"why you'd make a language for non programmers   at various points in the last 40 years, there has been a ""movement"" (for lack of a better word) to make scripting tasks accessible to non-programmers. its motivated by the idea that 1) real programmers have better things to do; and 2) non-programmers are actually willing to do these tasks.   in reality we've learned that 1) there are many types of skillsets that real programmers can develop, and high level business logic scripting is a valuable skill indeed; and 2) non-programmers are generally unwilling, and if willing frequently unable to do these tasks competently."
javascript,3dpw0z,metaphorm,2,Sat Jul 18 12:23:47 2015 UTC,PHP is good these days   Good joke.
javascript,3dpw0z,nothingbutcontempt,1 point,Sat Jul 18 14:05:30 2015 UTC,"4 out of 5 see widespread use. Almost everything you see that is engineered has Matlab involved somewhere. Almost every large business has tons of VB stringing their MS stuff together. Most banks, insurance companies, etc have systems written in COBOL. If you know what language a website runs, about 80% of the time that language will be PHP.  As for the one (Applescript) that doesn't see widespread use, it's still available on every mac until they decide to completely switch to Javascript.  Finally as a note about PHP. Version 7 deals with a lot of inconsistencies, but even after that, it still remains true that pound for pound, no other language in the top 20 is even close to the inconsistent weirdness that is PHP."
javascript,3dpw0z,theQuandary,14,Sat Jul 18 18:14:26 2015 UTC,"It's almost like   it's really fucking hard to write a programming language it's almost impossible to write a good one given the trade offs, it ain't that bad Let's see the language you designed since you seem so critical of JS' design decisions and knowledgeable about language design   I'm not even trying to defend JavaScript, it's just that there are so many knobs on the internet who criticize every decision that's made, whether they understand it or not. It's not like Eich went into JavaScript blind and produced a piece of crap. He had a very specific set of constraints, and he was aware of the tradeoffs he was making at the time."
javascript,3dpw0z,benihana,-1,Sat Jul 18 16:11:46 2015 UTC,Agreed on all points but don't use that awful fallacy where I have to have written a programming language in order to know a shit one when I see it. Such a terrible argument
javascript,3dpw0z,rowe92,2,Sat Jul 18 12:47:28 2015 UTC,"Your posts about the quality of JavaScript ITT are pretty bad but I'll agree with you here. It's like saying ""I don't like this band"" and then someone demanding to see the major-label record you've released. Not relevant."
javascript,3dpw0z,xXxdethl0rdxXx,0,Sat Jul 18 12:52:15 2015 UTC,"Except it's more like criticizing how the band writes a song, not what the band produces.  He isn't attacking Javascript applications, just the language itself.  If you're gonna attack a guitar player's style as shitty, you better fucking know how to play guitar yourself."
javascript,3dpw0z,hatestheinternet,2,Sat Jul 18 16:48:29 2015 UTC,Give an example of a good one then and state why its better than just calling a language crap. We have no context.
javascript,3dpw0z,DirtyDiatribe,1 point,Sat Jul 18 17:29:43 2015 UTC,Automatic semicolon insertion is a pretty surface level complaint. You don't have to have created your own language to critique others. But you should at least have an understanding of what kind of things matter.
javascript,3dpw0z,toolate,1 point,Sat Jul 18 15:33:24 2015 UTC,The value of this for a start
javascript,3dpw0z,rowe92,6,Sat Jul 18 20:58:52 2015 UTC,Yes Javascript is so broken the web doesn't run
javascript,3dpw0z,dexygen,3,Sat Jul 18 21:23:45 2015 UTC,Upgrade your computer out of Windows 95.
javascript,3dpw0z,CertifiedWebNinja,3,Sat Jul 18 14:57:00 2015 UTC,And lose all my Netscape bookmarks? No way.
javascript,3dpw0z,jthei,1 point,Sat Jul 18 16:04:10 2015 UTC,You mean Windows ME wasn't an upgrade?
javascript,3dpw0z,dexygen,2,Sat Jul 18 17:13:09 2015 UTC,At least it is relatively minimalist and not completely needlessly bloated as is one another language that is similarly named.
javascript,3dpw0z,cincilator,2,Sat Jul 18 19:06:02 2015 UTC,"Actually, this comment is hilarious. Funny that such a 'poor' language is more widely installed than any other language, like, ever, and that it drives the application logic of the single most common client known to computing.  JavaScript has warts, sure. But to call it a bad language because of things like ASI? The 90s called. They want their opinion back."
javascript,3dpw0z,oldfatandslow,0,Sat Jul 18 14:22:39 2015 UTC,"this comment is hilarious   His was accurate. Yours is typical newbie hilarity.   Funny that such a 'poor' language is more widely installed than any other language, like, ever   The language isn't. The runtime is included in browsers. ASM and DOS scripting is probably still more popular by runtime. But hey, this is the /r/javascript circlejerk where JS is beyond critique and anything else is less.   it drives the application logic of the single most common client known to computing   It doesn't. It manipulates the DOM and is triggered from eventing, allowing for applications to be built on the application.    But to call it a bad language because of things like ASI?   You're competent enough to understand what a language is. If you think it's just ASI, you're being intellectually dishonest with yourself.  ESX is a comedy of half-fixes (because even THEY recognize it has flaws) and new shitty syntactical half-measures. Because people who worship JS are mentally defective."
javascript,3dpw0z,KravenC,2,Sat Jul 18 18:49:32 2015 UTC,"Okay. Cool. I'm a newbie. Great. Educate me.  You say es6 is a 'comedy of half fixes'. I'd say it's progress - considering the time between 5.1 and 6, the effort to get to 5, and the plans for 7, it's steps in the right direction. Do I think it's solid gold? Hell no. Classes, for example, are stupid. JS isn't a classical language. Adding classes is just going to upset more people who want to treat JavaScript like Java or whatever other classical language they learned first. Newsflash: it ain't.  Don't pretend JavaScript is something that it isn't, and it's fine. I don't pretend it's perfect. I do think it's not nearly as bad as you, and others, want to make it out to be.  But you know what? That's great. You go on thinking how terrible js  is. I'll accept it, warts and all, and continue making a good living with it in my toolset."
javascript,3dpw0z,oldfatandslow,1 point,Sat Jul 18 19:14:56 2015 UTC,I wonder if there's a reason I'm missing for why scope couldn't have been done differently. Is it because of prototypes vs classes? Is that because prototypes work better in the web env?  I feel like a simple Python like class and scope would have been much easier.
javascript,3dpw0z,Mackinstyle,3,Sat Jul 18 22:20:31 2015 UTC,"Take a look into Python meta classes and then into eigenclasses. If you're going to have dynamic classes, then prototypal is by far the best way to go. The only issue is that Eich was told that those classes still had to look and feel like static Java classes. The result is that other prototypal languages like Lua or self have much better implementations and syntax (though this has gotten better with each JS version).  Don't underestimate the object literal syntax in JS. It combines very well with closures to create a small, but powerful model of processing."
javascript,3dpw0z,theQuandary,-5,Sat Jul 18 15:22:32 2015 UTC,Why why why   Marketing.
javascript,3dpw0z,instant_sunshine,6,Sat Jul 18 16:22:55 2015 UTC,"I love this part of Douglas Crockford's The Better Parts talk: ""JavaScript got it right by having only one number type. Unfortunately it was the wrong type.""  He argues that having a choice in number types provides no benefit and only introduces chances for errors - but, also says double is a crap format. He proposes the Dec64 type to overcome the shortcoming of double, and let us use the sane option of only one number type.  Though I think he also has low hopes of people adopting this, as it took decades before people stopped using goto and that was a no brainer ;)"
javascript,3dpw0z,mrspeaker,3,Sat Jul 18 09:27:21 2015 UTC,"While I don't presume to be able to say myself whether Crockford is right about preferring Dec64, I will say that it seems to be an extremely unpopular opinion."
javascript,3dpw0z,Cosmologicon,2,Sat Jul 18 11:28:35 2015 UTC,"Well, IEEE 754 and ints of various sizes is what we got in hardware. I prefer having those two (very different) types.  In Dart, you got double and (arbitrarily sized) int. There is also a num type which is either. Finally, there is SIMD and various flavors of typed arrays. This seems about right for a modern versatile scripting language. It covers every typical use case.  I think that having a single type would oversimplify it. An engine which uses DEC64 could, under the hood, use real integers for integer values to speed things up a bit. However, it won't be able to do the same for floating point stuff since this would change the outcome.  In a sense, it would be like having software floating point."
javascript,3dpw0z,x-skeww,4,Sat Jul 18 21:41:58 2015 UTC,"The language has always had an integer type. Bitwise operators truncate the 64-bit float, convert to integer, perform the operation, then convert back to float. Thankfully, it's not that inefficient in modern JITs. In fact, they are usually using integers under the hood for a lot of different things (only converting back to float if necessary). In most modern JITs, typing var foo = 12345|0; is all that's required to force that variable to be an integer (that's how asm.js works).  A very important idea in JS is making it hard for the language to break things. Even experienced programmers will find that weird bug where the 16-bit int overflows because ""there'll never be 65K <junk>"" or some similar bug. These become very rare when you are forced to use larger, safer types.  That said, TypedArray allows you to specify other integer and float types if you really need them. Also, as mentioned by someone else, better (that is, more publicly accessible) integers are coming in the future."
javascript,3dpw0z,theQuandary,5,Sun Jul 19 04:41:12 2015 UTC,"The language has always had an integer type.   The language only has one numeric type. It's ""number"" (64-bit IEEE 754 floating point aka ""double"").  > var foo = 12345|0 undefined > typeof foo ""number""   Dart, for example, is language with doubles and ints. The type of 5 would be int and the type of 5.0 would be double. ""5"" is an integer literal and ""5.0"" is a double literal.  Under the hood, the Dart VM uses 3 different representations for ints, but they aren't exposed at the language level. The language does not have 3 kinds of ints."
javascript,3dpw0z,x-skeww,0,Sun Jul 19 09:48:41 2015 UTC,"The language explicitly requires that numbers be converted to 32-bit integers in several cases (read ECMA-262 12.11.3 for one such case).  The fact that the language requires that the external typeof operator returns 'number' for all numeric types specified by the language has nothing to do with this. Externally generic labels aren't important (Fun fact: typeof new Number(123); gives us the result 'object' because of boxing).  To prove my point, on a byte-addressed machine, the only numbers that exist are 8-bit unsigned integers. Signed numbers are an abstraction over twos-complements. larger numbers are abstractions over concatenation of 8-bit numbers. Floating point numbers are an abstraction over signed numbers which treat specific parts of the number differently.  The fact that this abstraction happens in hardware does not matter. I can do all these same operations with an 8-bit micro-controller without a FPU and without support for integers (only support for 2s complement is required).  Likewise, JS specifies a type called 'number'. It makes two guarantees. The first guarantee is that you may treat a number like a 64-bit float and it will work. The second guarantee is that specific operations (bitwise operations primarily) will convert that number to a 32-bit integer, perform the calculation, then return the result. Finally, the language guarantees that Number.isInteger() will return true if you are dealing with an integer and that the number will be an integer until you do an operation that converts it to a decimal."
javascript,3dpw0z,theQuandary,2,Sat Jul 18 09:30:04 2015 UTC,"The language explicitly requires that numbers be converted to 32-bit integers in several cases   Yes, but that doesn't mean that there is an integer type. The important bit is that they are converted back to doubles at the end. If I do the math with euros, but pay you in dollars, you still don't have any euros.  Here is the list of types:  https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-data-types-and-values  Here is the number type:  https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-number-type  Here is Number.isInteger:  https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isinteger   4. If floor(abs(argument)) ≠ abs(argument), return false.   That's how it's defined. Semantically, there are only doubles. The language has no integer type.  What happens under the hood doesn't matter as long as the semantics of the language are preserved. That's why a VM can inline some functions, rearrange instructions, or use different internal representations (e.g. the Dart VM has smi, mint, and bigint for ints)."
javascript,3dpw0z,x-skeww,1 point,Sat Jul 18 20:53:42 2015 UTC,"Yes, but that doesn't mean that there is an integer type. The important bit is that they are converted back to doubles at the end. If I do the math with euros, but pay you in dollars, you still don't have any euros.   I request an integer and I get back a number that is indistinguishable from an integer. In fact, it usually is an integer both semantically and in reality. If I check that a number is an integer, I get a guarantee that it is an integer of some type. If I perform a bitwise operation, I am guaranteed that it will be performed. Further, I'm even guaranteed that if I'm using a float representation of an integer larger than 253 then it will be truncated (something that would not happen with a float-64 implementation).    7.1.5  ToInt32 ( argument ) The abstract operation ToInt32 converts argument to one of 232 integer values in the range -231 through 231-1, inclusive. This abstract operation functions as follows:  1 Let number be ToNumber(argument).  2 ReturnIfAbrupt(number).  3 If number is NaN, +0, -0, +∞, or -∞, return +0.  4 Let int be the mathematical value that is the same sign as number and whose magnitude is floor(abs(number)).  5 Let int32bit be int modulo 2 32 .  6 If int32bit ≥ 231, return int32bit  232 , otherwise return int32bit.  NOTE Given the above definition of ToInt32:   The ToInt32 abstract operation is idempotent: if applied to a result that it produced, the second application leaves that value unchanged. ToInt32(ToUint32(x)) is equal to ToInt32(x) for all values of x. (It is to preserve this latter property that +∞ and -∞ are mapped to +0.) ToInt32 maps -0 to +0.   12.11.3 Runtime Semantics: Evaluation  The production A : A @ B, where @ is one of the bitwise operators in the productions above, is evaluated asfollows:  1  Let lref be the result of evaluating A.  2  Let lval be GetValue(lref).  3  ReturnIfAbrupt(lval).  4  Let rref be the result of evaluating B.  5  Let rval be GetValue(rref).  6  ReturnIfAbrupt(rval).  7  Let lnum be ToInt32(lval).  8  ReturnIfAbrupt(lnum).  9  Let rnum be ToInt32(rval).  10  ReturnIfAbrupt(rnum).  11  Return the result of applying the bitwise operator @ to lnum and rnum. The result is a signed 32 bit integer."
javascript,3dpw0z,theQuandary,3,Sat Jul 18 22:39:04 2015 UTC,"That's form ""Abstract Operations / Type Conversions / ToInt32 ( argument )"".  Here is how that ""Abstract Operations"" sections starts:  https://people.mozilla.org/~jorendorff/es6-draft.html#sec-abstract-operations   These operations are not a part of the ECMAScript language [emphasis added]; they are defined here to solely to aid the specification of the semantics of the ECMAScript language. Other, more specialized abstract operations are defined throughout this specification.   Please read the list of types I mentioned earlier. There is no integer type in the language."
javascript,3dpw0z,x-skeww,2,Sat Jul 18 23:05:39 2015 UTC,"There is no need to use type ""hinting"" like that unless you are in a ""use ASM"" block.  All modern engines will box them as an int until the hidden class changes (it'll convert to a float when needed)"
javascript,3dpw0z,Klathmon,2,Sun Jul 19 00:06:53 2015 UTC,"In addition to what has already been said, the language was created within a span of days so there may have simply been the reason ""we don't have time for that"". However, it's goal to reach the simple-minded web designer is brought a little closer by having one type of integer. Also along with that comes the whole dynamic type thing too."
javascript,3dpw0z,ShortSynapse,-10,Sun Jul 19 00:14:17 2015 UTC,When JavaScript was being designed   There's your first mistake.
javascript,3dq1ce,relyon,3,Sat Jul 18 09:32:26 2015 UTC,"Step one: don't think in terms of MVC anymore! MVC works well for the backend, where the code lives for only one request. In the front end however, your code lives during the whole session, so tracking and reacting to state becomes very important. For that, we have Flux.  You don't have to say goodbye to routing however, as we have the fantastic react-router library which helps you build your UI according to various routes. The React components you attach to the routes then become something akin to the ""controllers"" of yore.  For ""models""... well, Flux stores aren't models. The data you load into it becomes state, so you would store the data elsewhere and load the subset you need into a store and do stuff with it. I'm partial to building the backend, with databases or other data storage, as an API. Then simply request resources from there and load them into your stores. Just don't think of stores as data storage and you'll be fine.  Hopefully that helped."
javascript,3dq1ce,fieldOfThunder,6,Sat Jul 18 21:13:56 2015 UTC,Flux? GraphQL?
javascript,3dq1ce,-Nii-,7,Sat Jul 18 10:59:35 2015 UTC,"Flux   In particular, use Redux. Best flux library so far."
javascript,3dq1ce,clessg,5,Sat Jul 18 13:05:13 2015 UTC,I like alt. It is pretty simple to get going with and scales well.  http://alt.js.org/
javascript,3dq1ce,cc81,1 point,Sat Jul 18 14:53:52 2015 UTC,Just did my first flux project with alt. It's pretty cool and quite simple! Still have to dig in to this whole decorator stuff though. But I haven't tried out any others so I can't say whether it's cooler than the others.
javascript,3dq1ce,kuenx,2,Sun Jul 19 14:22:50 2015 UTC,Eh I think reflux was more interesting to me.
javascript,3dq1ce,-Nii-,4,Sat Jul 18 13:12:10 2015 UTC,"Reflux is a good library, but it misses a lot of the ideas of Flux (Uses magic action names and actions do not go through the same dispatcher). Those features help in debugging and managing complex apps.  Dan did a great writeup on the evolution of Flux frameworks. https://medium.com/@dan_abramov/the-evolution-of-flux-frameworks-6c16ad26bb31 . I have no doubt ideas might change in the next few years, but I think Redux is a step in the right direction.  The javascript community is moving towards functional programming.  Forget about complicated classes and just use simple functions. It makes code so much less complex. Redux is a great example of just using pure functions. React itself is moving towards being just pure functions as well. https://github.com/reactjs/react-future/blob/master/01%20-%20Core/03%20-%20Stateless%20Functions.js"
javascript,3dq1ce,helloworldjs,3,Sat Jul 18 14:40:31 2015 UTC,"As /u/helloworldjs says, Reflux loses a lot of the ideas of Flux. I wrote about some of the problems with Reflux a few weeks ago."
javascript,3dq1ce,clessg,3,Sat Jul 18 20:14:14 2015 UTC,"""The V in MVC"" is a bit misleading on the part of the developers. React is the controller too (it tightly binds the controller to the view).   The part you're looking for is a way to make one-way dataflow easier. For this, you have either flux/reflux or some reactive framework (bacon, kefir, RxJS, etc). If you're looking for a persistent datastore, then I'd suggest PouchDB or LocalForage (from Mozilla)."
javascript,3dq1ce,theQuandary,2,Sat Jul 18 17:44:47 2015 UTC,Flux  https://facebook.github.io/flux/  https://www.youtube.com/watch?v=o5E894TmHJg
javascript,3dq1ce,10097338,3,Sat Jul 18 14:12:05 2015 UTC,Meteor  Meteor: the missing infrastructure for building great React apps
javascript,3dq1ce,Glaaki,1 point,Sat Jul 18 14:27:45 2015 UTC,"I think Lee Byron's talk on Immutability has a great point on this, in React you don't have to write specific model or view classes that become coupled to your UI. So while people say React is just the V in MVC, it's because you don't need an M because you have regular JS objects and arrays and normal control structures for your application's business logic."
javascript,3dq1ce,Josh1337,1 point,Sat Jul 18 18:14:53 2015 UTC,wow people have really jumped on the flux/react bandwagon.
javascript,3dqxj2,gabu69,6,Sat Jul 18 16:28:10 2015 UTC,"function calculateHeadroom($) {     if ($(window).width() > 927) {         ...     }      ... }  $(document).ready(calculateHeadroom);  $(window).on('resize', function(){     calculateHeadroom($); });   This could probably be done better with CSS3 breakpoints using @media queries?"
javascript,3dqxj2,Buckwheat469,2,Sat Jul 18 16:55:23 2015 UTC,"Also if you are going to attach a function to the window's resize event, it's a good idea to throttle it using something like _.throttle."
javascript,3dqxj2,Magnusson,1 point,Sat Jul 18 18:20:48 2015 UTC,I cant use a js within css media queries
javascript,3dqxj2,Buckwheat469,1 point,Sat Jul 18 18:45:07 2015 UTC,Sorry. I wasn't aware of what headroom was all about.
javascript,3dqxj2,le_chad_,2,Sat Jul 18 20:15:40 2015 UTC,Yeah you should really check out CSS media queries
javascript,3dqxj2,jimeowan,1 point,Sat Jul 18 17:22:13 2015 UTC,But how could he reconfigure his jQuery plugin dynamically with media queries?
javascript,3dqxj2,le_chad_,1 point,Sat Jul 18 19:49:05 2015 UTC,"It's not a plugin, he's just setting classes on elements at different widths. He can find out how by checking out the link I provided :)    Also he should look into debouncing the window resize function so it's not firing off more than necessary."
javascript,3dqxj2,jimeowan,1 point,Sat Jul 18 23:35:04 2015 UTC,"Well we're not seeing the same code then?  $("".nav-primary"").headroom({ ... })   It seems like he's using this jQuery plugin, and in his code for instance he's setting different ""offsets"" according to the window size, whatever that means it doesn't look like something that can be addressed by media queries.  I was curious if there's a good practice for this kind of use case, but I guess the only way is to listen to $(window).on('resize') and reconfigure the plugin."
javascript,3dqxj2,jimeowan,2,Sun Jul 19 10:14:55 2015 UTC,"Yup, i was speaking about this...  here they provided me a solution https://www.reddit.com/r/jquery/comments/3dqys3/recalculate_jquery_function_on_window_resize/"
javascript,3ds1qq,Jay_Burd,4,Sat Jul 18 22:22:10 2015 UTC,"On your first line (var myName = ""Billy"";) you created a variable called myName and assigned it the value of ""Billy"". Variables, as their name suggests, can change over time. Try the following in your console.  var myName = ""Billy""; console.log(myName); myName = ""Brad""; console.log(myName);   That should get you most of the way there.  As for the new name, think about your speak function. Speak says ""take a phrase, and log it to the console."" How would you answer the question ""What is the phrase?""   If it helps, you can think of arguments as being the same as variables."
javascript,3ds1qq,Hefticus,1 point,Sat Jul 18 23:20:04 2015 UTC,"Hey thanks for the response. I was unaware you could change the value of a variable after you have already declared a value for it.  So here is what I ended up with:  function changeName(newName) {     myName = ""Franky"" } changeName();  function logName() {     console.log(myName); } logName();   Which technically works and outputs ""Franky"" but what I am confused on is why they had me give the function ""changeName"" an argument of ""newName"". Was I supposed to use it? I'm confused about arguments/parameters in general.  Like in my speak function, ""phrase"" is just a variable basically. Whatever I put inside the quotations when I call the function will be stored as ""phrase"" and then will be logged by the console. So ""phrase"" could really be anything, like ""x"" or ""bh5zq"". Right?"
javascript,3ds1qq,commitpushdrink,0,Mon Jul 20 06:18:27 2015 UTC,Edit: Whoops
javascript,3ds1qq,kare_kano,2,Sun Jul 19 01:46:46 2015 UTC,"It's actually a bit trickier than that. JS uses call by sharing, which is neither call by value nor call by reference but can look like either one of them in certain cases.  The variable is shared between the caller and the function, not referred, so assignments to the argument won't affect the outside variable but instead replace it with a local one (they will ""break the reference"").  On the other hand, modifications done to the ""inside"" of the variable will be propagated to the caller. Now, for types like number or string there are no ways to modify anything inside them without reassignment, which would break the reference, so it ends up looking like they were passed by value. But with objects or arrays you can modify their internal values/properties, and such modifications will propagate to the caller, making it look like pass by reference."
javascript,3ds1qq,senocular,2,Sun Jul 19 19:57:53 2015 UTC,"A big part of this is understanding that functions have access to variables that are defined outside of them.  With your first function, sayMyName, it does exactly this.  myName is not a function parameter (which become variables in the function), and no where is the myName variable created in that function, but myName is still accessible and you can see Billy logged for a second time when sayMyName() is called.  This is because that function has access to that external variable. Alternatively, speak does not do this.  It has a function parameter which is the only variable that speak uses. It does not reach out into the outside scope for variables, though it could have if it wanted to.  This behavior is what would allow changeName to work.  Just as sayMyName logs, myName, so can you use changeName to set it to a new value.  I'm actually a little confused by steps 3 and 4 since they sound like what you already have with sayMyName because that function is accessing the same outside-the-functions myName variable that changeName would have changed... or is that something you did on your own that just happened to be something you needed to do anyway? :)"
javascript,3ds1qq,senocular,1 point,Sun Jul 19 02:43:47 2015 UTC,"Ok so from what you said I took away that I had to re-declare myName inside the changeName function. AKA reaching out of the scope of the function for the variable. Here is what I have:  function changeName(newName) {     myName = ""Franky"" } changeName();  function logName() {     console.log(myName); } logName();   This outputs ""Franky"" but why do they want me to give changeName a parameter of newName? Where was I supposed to use it? newName that is.  P.S. How do you put single words into code format like you did in your comment?"
javascript,3dn2hb,rmdmachado,6,Fri Jul 17 16:37:44 2015 UTC,Yes it is. I first was using snap.svg(http://snapsvg.io/) but the performance wasn't quite there. Also GSAP solves many cross-browser issues.
javascript,3dn2hb,Jvxtv,5,Fri Jul 17 18:31:34 2015 UTC,Uses TweenLite - looks like an interesting library for transitions. http://greensock.com/tweenlite
javascript,3dn2hb,kandetta,5,Fri Jul 17 16:52:19 2015 UTC,GSAP is probably the gold standard for Javascript animations. Very performant and easy to use.
javascript,3dn2hb,NookShotten,2,Fri Jul 17 18:34:45 2015 UTC,Very cool!
javascript,3dn2hb,azium,2,Fri Jul 17 18:32:24 2015 UTC,Ah... pretty cool! I like the look of the buildings and the pop up animation!
javascript,3dn2hb,ForScale,2,Fri Jul 17 19:58:14 2015 UTC,Pretty. Fucking. Sweet.
javascript,3dn2hb,davidpanik,2,Fri Jul 17 21:29:54 2015 UTC,Worked perfectly on mobile too. Impressive.
javascript,3dn2hb,saitilkE,1 point,Sat Jul 18 03:51:12 2015 UTC,Geeez! I think you just leveled me up! Thanks.
javascript,3dn2hb,ddrt,1 point,Sat Jul 18 05:07:28 2015 UTC,Not heavy either. Total page load is 130kb which includes jquery and analytics.
javascript,3dn2hb,am0x,1 point,Sat Jul 18 05:08:54 2015 UTC,I think you could achieve the same thing using CSS3 (haven't tried) which can take advantage of hardware acceleration and may actually come in weighing less to.
javascript,3dn2hb,madman86,2,Sat Jul 18 13:00:51 2015 UTC,"GSAP, the library I'm using for the animations takes advantage of hardware acceleration too. But yes probably using only CSS3 I could have lose more height."
javascript,3dn2hb,Jvxtv,1 point,Tue Jul 21 15:15:55 2015 UTC,Such beautiful code <3
javascript,3dn2hb,hhcharles,1 point,Sat Jul 18 14:02:28 2015 UTC,"That's awesome. Curious, how hard do you think it would be to create templates and procedurally generate the buildings? Just as a measure of how much ""hacking"" you did to make this look this good."
javascript,3dn2hb,Mackinstyle,1 point,Sat Jul 18 00:21:13 2015 UTC,"Quick reference to the code looks like it would be a lot more work to make them procedural, but it would be about as much as making any animation procedural. However it is decently light as is.   I still wouldn't want to use it on a site if it pushed over 300kb total. Page load speeds are way more important than cool animations."
javascript,3dn2hb,am0x,1 point,Sat Jul 18 05:11:08 2015 UTC,"Probably the building generation will be the trickiest part, but if you could find a nice way to generate them the rest should be pretty straight forward, I'm just applying scale animations to groups."
javascript,3dpu9l,superlampicak,3,Sat Jul 18 07:32:41 2015 UTC,"Dan Abramov - very smart individual that's contributed a lot to the React community. Reginald Braithwaite - aka raganwald, aka homoiconic. A fellow Canadian and mentor of all things JavaScript. Axel Rauschmayer - aka rauschma, writer at 2ality. Brendan Eich - an obscure individual; not sure who he is or why he's on my Twitter. Paul Irish - benevolent god of devtools and website performance profiling. Eric Elliott - a JavaScript enthusiast and tutor. Evan Czaplicki - lead designer of Elm. David Nolen - Clojure! Lee Byron - works on GraphQL and Immutable.js. Yehuda Kats - has worked extensively on Rails and Ember. Never sleeps. Ever. Ryan Florence - co-author of React Router. Pete Hunt - the guy who made people stop hating React. I believe his official job title is ""the social media guy for React""."
javascript,3dpu9l,clessg,4,Sat Jul 18 09:06:34 2015 UTC,Seems like a pretty react-centric list
javascript,3dpu9l,drunkenfaggot,1 point,Sat Jul 18 10:30:29 2015 UTC,"Yep. :) A lot of that is merely the fact that my work has been focused on React (and related things) lately, but perhaps more crucially, I notice that I learn a lot of generic architecture stuff by being around that crowd."
javascript,3dpu9l,clessg,1 point,Sat Jul 18 12:03:14 2015 UTC,Mostly Gary Bernhardt and Paul Phillips for insightful remarks and constant reminders that my profession still has a long long way to go...  Li Haoyi and Roland Kuhn to stay up to date with awesome scala stuff.
javascript,3dpu9l,EsperSpirit,1 point,Sat Jul 18 10:15:20 2015 UTC,"70% of my twitter feed is Gary Bernhardt: ""this is normal"""
javascript,3dpu9l,Combinatorilliance,1 point,Sat Jul 18 23:26:10 2015 UTC,"Paul Irish, Rob Eisenberg, Eric Elliot are all pretty good and focus almost exclusively on tech (i.e. they don't spout a lot of personal philanthropy)."
javascript,3dpu9l,madman86,1 point,Sat Jul 18 20:40:33 2015 UTC,"Bret Victor - Benevolent master of the arts of both software engineering and design. One of the most influential persons in software and design right now. Gary Bernhardt - Generally very intelligent person, is disturbingly discontented with the current state of software. James Long - Firefox developer tools developer. I use Firefox, so it's nice to see where it is going. Lambda the Ultimate - Twitter account for the programming languages discussion site, with a suspiciously similar name Jonathan Edwards - Incredibly intelligent person, not much to say about him though Joe Edelman - Initiatior of the meaningful software design revolution, this man will be in the history books some day. Mike Bostock - Creator of d3.js. Really cool guy also Steven Wittens - The dude behind that website with that controversial header, is incredibly intelligent, but I don't think I've ever seen him tweet anything. Better check out his website instead! (althought I haven't seen him add any new content to his website either, really unfortunate as his content is incredibly in-depth and generally interesting/useful)"
javascript,3dpu9l,Combinatorilliance,1 point,Sat Jul 18 23:38:15 2015 UTC,"A few web dev/design people I haven't seen mentioned: Jeffrey Zeldman, Chris Coyier, Luke Wroblewski, Val Head, Lea Verou, A List Apart, Smashing Magazine, Addy Osmani, and Cody Lindley."
javascript,3dpu9l,rsh412,0,Sun Jul 19 07:00:12 2015 UTC,I don't have a twitter account/only use facebook for chatting
javascript,3dpu9l,EenAfleidingErbij,1 point,Sat Jul 18 08:14:29 2015 UTC,"There is not just Twitter or Facebook. There is also Instagram, Youtube, Pinterest and many more.  So from whom are you learning? What are your idols?"
javascript,3dp7py,griffonrl,2,Sat Jul 18 03:11:29 2015 UTC,"Very interesnting, finally what I needed.  Link to the (Part 2) is broken. (404)"
javascript,3dp7py,jordimaister,1 point,Mon Jul 20 15:08:21 2015 UTC,Part 2 is getting peer reviewed as we speak. It is a much bigger and in depth followup post. I would say in the next 2 days would be online.
javascript,3doz10,BrunoAzevedo,1 point,Sat Jul 18 01:49:35 2015 UTC,"Hey man! really cool, added some 3D control to it with the cursor :) Welcome to try!"
javascript,3dmpr6,nikgraf,0,Fri Jul 17 14:59:37 2015 UTC,"Hi, I'm one of the creators of Belle,  Belle currently includes these components: Toggle, ComboBox, Rating, TextInput, Button, Card & Select. Many more like DatePicker, NumberInput, DropZone & Menu will come soon.  We built Belle with desktop, mobile and ARIA support and aim to provide the best possible UX while making the components highly configurable to allow users applying their own theme. For demonstration purposes Belle comes with two themes (Belle, Bootstrap3)  Let me know if you have any questions."
javascript,3dmpr6,funny_games,1 point,Fri Jul 17 15:10:36 2015 UTC,"Very nice, do you take in requests? If so select2 component would be a nice to have."
javascript,3dmpr6,Vertp,1 point,Fri Jul 17 17:34:42 2015 UTC,Sure :)  I'm curious which feature of Select2 you are looking for? (We have ComboBox/AutoComplete & Select which should cover most of the Select2 use-cases)
javascript,3dpoua,Antrikshy,1 point,Sat Jul 18 06:16:37 2015 UTC,"This doesn't seem to do anything aside from printing a few lines of assembly for a return statement. It doesn't match the architecture, either."
javascript,3dpoua,dkms0t,1 point,Sat Jul 18 06:28:02 2015 UTC,Just wrote this in the past few hours. It's fresh. I just learned SPARC assembly at school so thought I'd use that first. :)
javascript,3dpoua,purmou,2,Sat Jul 18 06:31:53 2015 UTC,Rick's CSE30? I loved that class! I wrote https://github.com/dymk/sparc-optim for it to learn more about the extra credit optimization problems he gives out.
javascript,3dpoua,k3q3,0,Sat Jul 18 16:53:22 2015 UTC,Apparently these are very early stages. I found it on my computer science department's Facebook group.
javascript,3dmjg6,alexcasalboni,4,Fri Jul 17 14:07:06 2015 UTC,"If you think debugging JavaScript is easy, I suggest trying C#. You'll shit your pants."
javascript,3dmjg6,hahaNodeJS,-4,Fri Jul 17 20:08:34 2015 UTC,"I read this as ""Easily debunking Meteor.js"""
javascript,3dmmyx,pwkad,1 point,Fri Jul 17 14:37:00 2015 UTC,"XPost from /r/aureliajs: Unit Testing your ES6+ Custom Elements    I am a bot, PM me if you have any questions or suggestions"
javascript,3dmmyx,OriginalPostSearcher,1 point,Fri Jul 17 14:39:15 2015 UTC,"Why ""Custom Elements""? That's already a thing and just makes it confusing."
javascript,3dmmyx,pertheusual,1 point,Fri Jul 17 17:20:47 2015 UTC,Custom elements are pretty much just custom elements.  Not sure what's confusing about the name?  That's all they are intended to be :)
javascript,3dmmyx,pertheusual,0,Fri Jul 17 22:02:23 2015 UTC,"From the title, I expected this to be an article about Web Component Custom Elements done in ES6, the spec I linked to, that's all I'm saying."
javascript,3dmwmt,krumoksnis,4,Fri Jul 17 15:52:52 2015 UTC,"For Angular 2, I'd definitely recommend using TypeScript, as it has support for annotations, and is the language Angular 2 is written in.  TypeScript Advantages:   Acts as the compiler rather than just typechecker (with Flow you'd need to use Babel) The TypeScript compiler is faster to compile Has wider IDE support / better tooling as of right now (Visual Studio, Visual Studio Code, Sublime, Atom, WebStorm, others).   Flow has some advantages over TypeScript as well   Deeper understanding of types Better generics/self referential types Type propagation (this allows you to get an error at the call site)"
javascript,3dmwmt,BecauseItOwns,2,Fri Jul 17 16:31:36 2015 UTC,"The problem is that I like Babel initiative. TS feels alien to me.  However, I have tried implementing Flow and unfortunately, they lack ES6 support, not to mention experimental features such as decorators. Flow for now is out of the picture (unless you are writing code in ES5)."
javascript,3dmwmt,hahaNodeJS,0,Fri Jul 17 16:33:55 2015 UTC,TypeScript.
javascript,3dm83d,Killavus,4,Fri Jul 17 12:14:03 2015 UTC,"I just replied this in the other thread about ES6 classes with React, but I think it's just as relevant here:  Personally I prefer using the old-fashioned createClass, but that's probably solely because of mixins. If they could somehow support mixins in the ES6 syntax I would happily switch. Mixins just seem so much cleaner and more flexible than inheritence."
javascript,3dm83d,arendjr,5,Fri Jul 17 13:05:03 2015 UTC,You can use https://github.com/brigand/react-mixin to get mixins with es7 style decorators
javascript,3dm83d,icewind1991,2,Fri Jul 17 13:08:41 2015 UTC,"Ah, that's good to know. Thanks!"
javascript,3dm83d,arendjr,3,Fri Jul 17 13:42:04 2015 UTC,People should note that one of the goals in react long term is to remove the need for mixins
javascript,3dm83d,muzmath,1 point,Sat Jul 18 03:26:16 2015 UTC,X-post Subreddit Link: /r/reactjs   Original post: https://www.reddit.com/r/reactjs/comments/3dm819/what_react_component_class_syntax_should_i_use/
javascript,3dni2z,Mattonicide,2,Fri Jul 17 18:33:24 2015 UTC,"You need something with a virtual DOM and a diffing engine to really handle this without a TON of boilerplate.  I would suggest mithril.js as it has inherent support for these out of the box, works well with Typescript and has type definitions, and is really just javascript that gets out of your way.  Mithril has its own router though, so you may have to get rid of grapnel.  I've never tried to make it play well with another one."
javascript,3dni2z,ondreian,1 point,Fri Jul 17 21:25:52 2015 UTC,"Thanks, I'll look into this. I was looking at https://github.com/Matt-Esch/virtual-dom and found it to be almost overwhelmingly complex."
javascript,3dni2z,ondreian,1 point,Fri Jul 17 21:28:40 2015 UTC,"It would be a lot of leg-work to tie his virtual-dom into something else, but you can checkout https://github.com/matt-esch/mercury which ties his ideas of ""immutable"" DOM and ""immutable"" data structures together.  The benchmarks still aren't quite as good as Mithril, but it's the only competitor out that I have come across really.    I just love the simple way mithril has over the redraw logic.  It was the only thing I could get to have a ""snappy"" feel when dealing with some visualizers that interactively allowed you to build aggregations for some largish timeseries datasets."
javascript,3dni2z,MunchGamer,1 point,Fri Jul 17 21:51:29 2015 UTC,"I find myself in the same boat.  I've been working with / on a proprietary App Framework for my company for a little over 2 years now.  There's really not a great answer out there yet.  I'd share our work with you, but unfortunately it's nowhere near ready for anyone else to use at this point, and it'd just be overwhelming. :/"
javascript,3dni2z,petepete,1 point,Fri Jul 17 18:37:42 2015 UTC,"I use TransparencyJS. It's incredibly simple, fast and intuitive."
javascript,3dni2z,petepete,1 point,Sat Jul 18 17:08:32 2015 UTC,"This makes more sense to me than anything. No crazy overhead of an entire framework etc, works with regular html and is still just javascript. Thanks for sharing! Now if only I could find some Typescript definition files for it..."
javascript,3dni2z,maxk123,1 point,Sat Jul 18 19:46:33 2015 UTC,Unfortunately this guy disappeared!
javascript,3dntw6,nerdsnyped,2,Fri Jul 17 20:01:02 2015 UTC,http://www.espruino.com
javascript,3dntw6,sotv,1 point,Fri Jul 17 20:50:03 2015 UTC,awesome! thank you! checking it out now.
javascript,3dntw6,ondreian,1 point,Fri Jul 17 20:56:29 2015 UTC,"https://tessel.io/  Tessel supports NPM, which I find to be a major boon."
javascript,3dntw6,marinated_pork,1 point,Fri Jul 17 21:21:42 2015 UTC,I actually saw a sick presentation on JavaScript robots at a conference earlier this year. Can't find the repo exactly but I do know there is a johnny-five Arduino framework.
javascript,3dntw6,lostsheik,1 point,Fri Jul 17 21:35:09 2015 UTC,You can run Node on a Raspberry Pi. There are several modules in NPM that will assist with interfacing with the GPIO and Camera and other features.   http://weworkweplay.com/play/raspberry-pi-nodejs/ https://github.com/fivdi/onoff https://www.npmjs.com/package/raspicam
javascript,3dpjld,YeahDino,5,Sat Jul 18 05:13:16 2015 UTC,"Bad luck, the vanilla JS version of the library has a bug too. But we can work around it.   moveTo() tries to remove .active from the .onepage-pagination li a jquery.onepage-scroll.js:473 But since you initialised onePageScroll({pagination: false}) it actually hasn't created the pagination dom elements. Thus, trying to change the className of a non-existing element... Uncaught TypeError.   The onePageScroll developer has forgotten to surround this piece of code with:  if(settings.pagination == true) {     _removeClass(.....);     _addClass(.....); }   Wanna learn how to easily debug these kind of errors? Pause on Exception is your friend.    https://developer.chrome.com/devtools https://developer.chrome.com/devtools/docs/javascript-debugging"
javascript,3dpjld,IAMAnuttysquirrel,1 point,Sat Jul 18 08:02:56 2015 UTC,Thank-you so much! And for the follow up resources. Would you mind if I post your fix in the plugin's github and credit your username?
javascript,3dpjld,IAMAnuttysquirrel,1 point,Sun Jul 19 03:59:19 2015 UTC,Of course I don't mind!   I like the visual style of your portfolio btw :)
javascript,3dpjld,drunkenfaggot,3,Sun Jul 19 10:09:16 2015 UTC,"PS: I've been learning jQuery, so pure java is a bit more foreign to me.   The Java language would be pretty foreign to me too if I were just learning jQuery.  Not sure what the hell it has to do with javascript though."
javascript,3dohi5,notconstructive,1 point,Fri Jul 17 23:10:03 2015 UTC,"Mostly. I think you have the right idea, but its backwards (maybe just a typo...).  Its more like:   functions that are contained in (via then()) promises are executed when the value of the promise becomes available   Promises don't affect the function they're in, but they do call functions supplied in then() (and catch()) once the promise gets resolved and its value resulting from the async operation its assoicated with is available."
javascript,3dohi5,senocular,1 point,Fri Jul 17 23:20:15 2015 UTC,So effectively the function that contains a promise stalls waiting until the promise is resolved?
javascript,3dohi5,senocular,2,Sat Jul 18 00:44:33 2015 UTC,"No. That's what I meant by, ""Promises don't affect the function they're in..."" For example  function foo() {     console.log(1);     var promise = asyncOpReturnsPromise(2); // assignment, keep going...     console.log(3); }  foo(); // -> 1, 3   This will immediately log 1 and 3 without stalling despite there being a promise created inside the function foo.  The promise does not stall anything here, nor does it ever stall anything anywhere.  The promise is an object that represents something to be completed in the future.  When that something is complete, meaning the promise gets resolved, it then has the opportunity to call a function that's been given to it via a call to then().  Note that this function isn't ""stalled"". It just isn't called until the promise is resolved. (So much rhyme!).  This is also why I reversed the ""contains"" bit. There is no meaning around ""function contains a promise"".  That describes the above example where there is no difference to a function whether it does or does not contain a promise.  However a promise can ""contain"" a function when you use promise.then(function).  This will cause the promise to cache the function and wait until the promise resolves (when whatever asynchronous operation it relates to completes) before it gets called.  No stalling, just calling - in a sense thats like setTimeout.  Pass a function, have it called after the timeout completes.  var promise = asyncOpReturnsPromise(); promise.then(function(){     // asyncOp complete     console.log(1); });  console.log(2);  // results: // -> 2 // -> 1 (when asyncOp completes)   Promises, as objects, are persistent, though.  They exist as long as you hold on to them.  So unlike setTimeout, you can call then on a promise multiple times to have it call multiple functions.  You can even call then to give a promise a function after it resolves, and the promise will call that function right after the completion of the current call stack (noting that this happens after as then-ed callbacks in promises are always executed asynchronously; again, no stalling, but also not being synchronous with the code around them).  var promise = asyncOpReturnsPromise();  promise.then(function(){     // asyncOp complete     console.log(1);      // third then, same promise.     // even though the promise for asyncOp     // is resolved at this point, the promise     // still exists and still works. it just     // acts as though the promise gets resolved     // again right after all code in this      // call stack completes     promise.then(function(){         console.log(1.2);     });      // part of this call stack and will be     // called with 1, but before 1.2     console.log(1.3); });  // second then, same promise promise.then(function(){     // asyncOp complete     console.log(2); });  console.log(3);  // results: // -> 3 // -> 1 (when asyncOp completes) // -> 1.3 // -> 2 // -> 1.2   This may be a little hard to follow, but its just showing that you can have any number of thens on promises, and they even work after a promise is resolved.  So if you're ever handed a promise, you never have to worry about what it relates to and whether its already happened because your callbacks will still work (even if late).  Calls to then() actually return a new promise which allow for chaining, but that's beyond what I wanted to cover here.  The takeaways are: promises don't affect functions they're in.  They don't stall anything.  But they do accept callback functions which they will call when the promise is resolved (completed).  You can add many of these to the same promise, and they even work when the promise has already been resolved.  And that these callbacks occur in a brand new call stack separate from and after other code that is currently being executed."
javascript,3dohi5,fforw,1 point,Sat Jul 18 22:35:47 2015 UTC,"You're still thinking about it the wrong way. ""Contains"" is not a very useful concept in this regard.  A promise is an object representing a potentially asynchronous thing happening -- usually outside of the JavaScript itself.   The main thing being that a promise is something given to you and not a callback you give in.  The differerent Promise APIs then contain standard functions to deal with these promise values.  Most simply to act when the action has either suceeded or failed. But also composing multiple promises together -- chaining them one after another, executing them in parallel then waiting until all of them finished etc."
javascript,3dnhem,smeloa,2,Fri Jul 17 18:28:23 2015 UTC,"Game Dev Tycoon was built in javascript, using Node Webkit, but the studio has since switched back to Unity.  The obvious disadvantages of javascript are the single-threaded environment, JIT compiling being not as fast as C and other low-level languages, though in recent years it has improved astronomically.  Also, the frameworks and tools for JS game development are still catching up to the older languages, so in a lot of ways, it's working on the bleeding edge.  A huge advantage, in my opinion, is native support for HTML for GUI elements.  HTML is built for UI, and laying it on top of your webGL canvas makes a ton of sense.  There's a decent number of JS devs over at /r/gamedev, I would recommend asking around over there as well."
javascript,3dnhem,MunchGamer,1 point,Fri Jul 17 18:43:28 2015 UTC,"It can run on any modern computing device/There's a lot of different modern computing devices Any game. With WebGL, even sophisticated 3d rendering is possible in the browser Last year Humble Bundle released an asm.js bundle, https://support.humblebundle.com/hc/en-us/articles/203331430-Humble-Mozilla-Bundle-Powered-by-asm-js-System-Requirements Not sure you can still check that out. Both Unity 5 and UE 4 can generate JavaScript at least at an alpha stage I'm currently writing my own 2d webgl accelerated engine, but then that's my jam"
javascript,3dn4xb,kandetta,1 point,Fri Jul 17 16:56:31 2015 UTC,"I've never gone from ""ugh this is probably another wannabe framework"" to ""this is the greatest wannabe framework I've ever seen"" faster in my life.  It's like angular but not restrictive and scope-y"
javascript,3dn4xb,PySnow,1 point,Sat Jul 18 03:13:00 2015 UTC,Saw two way databinding and noped the fuck out of there.    I've been burned way too many times by having that available as a first class construct in projects I've worked on.
javascript,3dnnpd,bits_and_bytes,2,Fri Jul 17 19:15:06 2015 UTC,You might take a look at reactive extensions. They're MS tech and have similar APIs in both .NET and JS.
javascript,3dnnpd,theQuandary,1 point,Sat Jul 18 00:51:42 2015 UTC,Check out whether Amplify Request can help you with your api calls.   I use and recommend Knockout-Validation for model validation. Validation can be added to your model markup - or you can add on-the-fly validation. It's fully extensible and has full support for async validation.
javascript,3dmqwe,magenta_placenta,1 point,Fri Jul 17 15:08:20 2015 UTC,Why would someone use this instead of Ionic?
javascript,3dm7g8,aTTENT10N,1 point,Fri Jul 17 12:06:23 2015 UTC,"You can use the :target pseudo class for this. Like querySelectorAll, it's supported by all modern browsers and IE9+.  https://developer.mozilla.org/en-US/docs/Web/CSS/%3Atarget  [Aside: It's ""focus"" with a single 's'.]  Edit:  Simple demo:  http://jsfiddle.net/w1LgggLt/ http://fiddle.jshell.net/w1LgggLt/show/#one"
javascript,3dm7g8,x-skeww,1 point,Fri Jul 17 12:15:59 2015 UTC,Hey! Thanks for the answer. But unfortunately this isn't what i'm looking for.  The step-process is: domain.com/checkout -(click)> domain.com/contact(highlight div)  and i can only use javascript. No access to modify the code within the website itself. I just got a lightbox from our company running in the background. eg. document.getElementById(id).style.backgroundColor= '#ff0000';
javascript,3dm7g8,x-skeww,1 point,Fri Jul 17 12:34:42 2015 UTC,"document.querySelector('.span-mail').style.backgroundColor = 'yellow'   That's all you need. You only want to highlight that single span, right?"
javascript,3dm7g8,x-skeww,1 point,Fri Jul 17 13:07:39 2015 UTC,yes. but i don't think you quite understand.  The problem lies within me browsing from one page to another one and still running the script onload of the new page which i linked. :) Thanks for your help!
javascript,3dm7g8,x-skeww,1 point,Fri Jul 17 13:28:11 2015 UTC,Do you want to run some JS on a different site?   The step-process is: domain.com/checkout -(click)> domain.com/contact(highlight div)   Are these domains different?  You can't do that (for obvious security reasons).
javascript,3dm7g8,x-skeww,1 point,Fri Jul 17 13:35:18 2015 UTC,no. same domain. but different pages. So i pretty much have to store a variable in the browser console. i've heard that you can do that. because i have a function that needs to be executed on the page in the thread. but it should take effect on redirect so to speak.  google.com/images -> click link-> google.com/mail (highlight area on website)
javascript,3dm7g8,madman86,1 point,Fri Jul 17 15:18:27 2015 UTC,"Right. So, your problem is the entry point?  http://jsbin.com/zagibayuto/edit?html,js http://output.jsbin.com/zagibayuto http://output.jsbin.com/zagibayuto#foo"
javascript,3dm7g8,petrosh,1 point,Fri Jul 17 19:12:15 2015 UTC,cheers man. cannot get it to work however. not even in the jsbin :/
javascript,3di5bn,alexcasalboni,12,Thu Jul 16 13:42:30 2015 UTC,Original Creator http://www.falstad.com/circuit/
javascript,3di5bn,mamoen,1 point,Thu Jul 16 15:53:05 2015 UTC,So glad someone at least ported this one; it's nearly impossible to get java applets to run now.
javascript,3di5bn,rocketblob,6,Fri Jul 17 07:08:05 2015 UTC,"And if you think that's cool, here's  an emulation of the 6502 cpu."
javascript,3di5bn,OolonColluphid,3,Thu Jul 16 18:56:28 2015 UTC,This is amazing
javascript,3di5bn,daedius,3,Thu Jul 16 14:49:58 2015 UTC,the original program was very useful in complementing ee lectures! thanks for the port
javascript,3di5bn,nkgentile,3,Thu Jul 16 16:04:47 2015 UTC,This is one of the most amazing things I've seen built on Javascript. Bravo.
javascript,3di5bn,AutomateAllTheThings,3,Thu Jul 16 17:25:52 2015 UTC,"You are a horrible human being, I had stuff to do tonight!"
javascript,3di5bn,wonkifier,2,Thu Jul 16 22:40:02 2015 UTC,"I've recently been doing more work with electronics, and this is by far the easiest to use and understand tool I've found. Really awesome!"
javascript,3di5bn,toromio,1 point,Thu Jul 16 23:50:26 2015 UTC,"Very cool! Thanks for the link.  Someone should x/post to an electronics subreddit, but I dont visit any."
javascript,3di5bn,fluoroamine,1 point,Thu Jul 16 15:41:46 2015 UTC,Wow so cool!
javascript,3di5bn,azium,1 point,Thu Jul 16 16:16:00 2015 UTC,Awesome!
javascript,3dlvfm,richtr,1 point,Fri Jul 17 09:19:56 2015 UTC,"Long time lurker on this subreddit. I thought I'd post this here as it may be useful for anyone that wants to start developing device and/or screen orientation aware web applications.   The device orientation and screen orientation emulation should be very precise when compared to any Chromium-based browser running on Android.  You can only access the emulator if your device does not support device orientation events natively since there is no way to suppress the firing of native device orientation events. So try it out in Chrome, Opera or Firefox on a desktop computer and lemme know what you think!"
javascript,3djfby,magenta_placenta,5,Thu Jul 16 19:26:46 2015 UTC,"I saw a couple of examples and looks really great. What are the main differences with Paper.js or Raphael.js? Anybody know?  Upvoted!  Edit: ok, I noticed that WebGL can used with this library for advanced drawing."
javascript,3djfby,franverona,2,Thu Jul 16 19:29:04 2015 UTC,"Interesting. How far away do you think image support will be?  If it supported images as some sort of texture fill for rectangles, I'd consider comparing against pixijs as a render for my 2d game.  Do you think it would be as performant as pixijs as a 2d game render? Or should I just stick with pixijs?"
javascript,3djfby,stephencarmody,1 point,Fri Jul 17 01:22:09 2015 UTC,"Downvoted because the framework has been around for a long time and the post has nothing new - no discussion or comment or anything.  Two.js looks cool and I could definitely consider using it! But this post is similar to just linking directly to angular, d3, or one of the many other staple frameworks.."
javascript,3dm2t3,iHEx4Sex,1 point,Fri Jul 17 11:06:22 2015 UTC,"The obvious solution is to throw a few more libraries, frameworks and build tools into that mix."
javascript,3dm2t3,dhdfdh,1 point,Fri Jul 17 12:39:53 2015 UTC,This is pretty standard issue for angular scaffolding. Would you rather reinvent the wheel?
javascript,3dm2t3,dhdfdh,1 point,Fri Jul 17 13:07:58 2015 UTC,"""reinvent the wheel"". Standard reply to anything on reddit.   The noise involved with these things, libraries upon libraries upon build tools to build build tools to build libraries to build frameworks, is my complaint and the noise has been deafening."
javascript,3dm2t3,caffeinep0wered,-1,Fri Jul 17 15:10:30 2015 UTC,"Firebug + Coffeescript + Yeoman + Angular + Grunt. Ouch. I'd replace the first with FF Developer Console and knock the last four on the head entirely. jQuery only or GTFO.  Is it any wonder that Web sites these days are getting slower and slower and their memory usage is creeping ever higher?  Also, get off my lawn."
javascript,3dm2t3,leptons,0,Fri Jul 17 19:39:54 2015 UTC,"Take Coffeescript out of the equation, and you don't have this problem.  Coffeescript is not a good or best practice, and the problem you're having is one of the big reasons why."
javascript,3djiby,MuricanWillzyx,8,Thu Jul 16 19:48:44 2015 UTC,"One day, components may be defined as actual functions."
javascript,3djiby,clessg,6,Thu Jul 16 20:13:37 2015 UTC,"I can't wait for them to get that model to a comfortable, powerful situation. As JS paradigms become more and more functional, I become increasingly tempted to leave behind original language altogether and move over to something like more Elm. In time, in time."
javascript,3djiby,theQuandary,3,Thu Jul 16 20:19:08 2015 UTC,This approach is similar to Omniscient. I'm a big fan of how it works. Closures are better than constructors and dealing with 'this' everywhere.
javascript,3djiby,metanat,6,Thu Jul 16 23:16:35 2015 UTC,"Your expectations seem to indicate a misunderstanding of what JSX desugars to. JSX sugars to React.createElement, which is used to turn a component class (or ES6 class) into a React element or component instance. It doesn't simply instantiate your class and return it, that job happens under the hood (wrapped up in a ReactElement). And you can understand why, when a render method is called, calls to React.createElement within the render method shouldn't necessarily instantiate a new instance of your class, otherwise you would lose state etc, it doesn't need (and shouldn't) instantiate the class when the resulting react id would be the same.  You mentioned below your interest in other languages, well as it turns out, React's move away from createClass (or at least now independence from) actually makes things a lot easier for languages ClosureScript (Om) and Haskell to target React as a renderer."
javascript,3djiby,Josh1337,5,Thu Jul 16 23:02:13 2015 UTC,"The class system provides an intermediate escape hatch for developers as the React core team looks into providing pure models. It also places some restrictions on developers in order to favor object composition over mixins.  Quote from Sebastian Markbage:   The class system provides an optional escape hatch when you need it rather than completely stopping you.  The primary feature that our class system provides is an ""instance"" handle this has several features.  1) It provides a certain level of familiarity and convenience. You can use this as a middle man to refer to a group of arguments. This is a foot-gun but makes it easier to onboard new people.  2) The instance is an ID that you can use to refer to a place in the tree. It allows APIs like React.findDOMNode(component) and third-party APIs that can unify around it.  3) It provides single or multiple inheritance features if someone needs to create an abstraction and just can't figure out how to do it using composition. This is unfortunately a very common problem."
javascript,3djiby,andrew24601,7,Thu Jul 16 23:30:54 2015 UTC,"In my admittedly limited experience, ES6 classes work great for React classes.  The core of your problem is that <MyComp/> isn't an instance of MyComp - it's a description for an instance.  i.e. React will only create an instance of MyComp once it mounts a <MyComp/>.  They still have constructors - in fact the ES6 class constructor replaces the requirement for getInitialState - and any additional methods on the object can be cheerfully called once it has been mounted (which is basically React talk for instantiated)."
javascript,3djiby,imstillreallybored,5,Thu Jul 16 22:28:31 2015 UTC,Finally someone who understands..
javascript,3djiby,andrew24601,3,Fri Jul 17 00:47:20 2015 UTC,"Interesting. This makes me much more sympathetic to the class model. I was thinking from a conceptual perspective--that these classes are, abstractly, models for creating components, and that one should treat the mounting to DOM nodes kind of like an implementation detail (for the most part). I didn't think about the time between creating a <MyComp/> and the creation of an actual instance. I still prefer a functional model for use in JS itself, but it looks like that's their primary target for the future anyway (e.g. /u/josh1337's comment), and if the class model really is as useful as they say for compile-to-JS languages, then that certainly raises its value (/u/metanat)."
javascript,3djiby,azium,2,Fri Jul 17 15:38:50 2015 UTC,"The main place this gets interesting is with child nodes of the rendered component. While a DOM component will always mount its children, a React component doesn't necessarily have to.  return <MyComp>   <MyOtherComp/> </MyComp>   MyOtherComp will only be mounted if MyComp causes it to be mounted (typically by rendering props.children in its render method, but even then only if it's ultimately rendered by a DOM component eventually).  Where this gets even more interesting is when these child components are ref tagged, because the ref is only fulfilled in a completely different component - ie the component where it is ultimately caused to be mounted."
javascript,3djiby,sfdud,3,Sat Jul 18 04:56:55 2015 UTC,I'm also a bit confused. A lot of boilerplate with class that seems unrelated to React Components. So far I've been pretty happy with their design decisions so maybe it'll make sense to me once I dig into it more.
javascript,3djiby,azium,1 point,Thu Jul 16 20:11:54 2015 UTC,"There's been a lot of strange decisions since 0.13. This class stuff is one of them. Too many cooks, I think."
javascript,3djiby,sfdud,0,Thu Jul 16 21:27:55 2015 UTC,"I've been using Riot lately. Having never made anything really substantial with React I didn't feel so attached to it, whereas Riot's syntax really speaks to me. That and it seems to work just fine."
javascript,3djiby,azium,0,Thu Jul 16 21:58:38 2015 UTC,"Riot is nice, I've been trying it out. The templating part is its weakest point I think, but maybe I'll get around to it."
javascript,3djiby,sfdud,1 point,Thu Jul 16 22:31:14 2015 UTC,"The 'templating' part? That's like all it does, isn't it? That and provide an observables api?"
javascript,3djiby,ArseAssassin,1 point,Thu Jul 16 22:39:15 2015 UTC,"The tags, specifically. I've gotten used to JSX and would like to see that instead."
javascript,3djiby,arendjr,3,Thu Jul 16 22:50:11 2015 UTC,Because everyone loves classes and OOP!
javascript,3djiby,jsNut,1 point,Fri Jul 17 11:19:11 2015 UTC,"Tensely waiting for an ""Edit: \s"""
javascript,3djiby,theQuandary,2,Fri Jul 17 15:11:50 2015 UTC,"Personally I prefer using the old-fashioned createClass as well, but that's mostly because of mixins. If they could somehow support mixins in the ES6 syntax I would happily switch (and don't come and tell me to use inheritence instead, because mixins are so much cleaner and offer more flexibility)."
javascript,3djiby,papers_,3,Fri Jul 17 12:53:11 2015 UTC,"Personally I like using the class syntax, its really nice and clean and easy to read and reason about. I understand that it is not like a classic system, but i know this and therefore it is fine. For most purposes they do function as expected."
javascript,3djiby,muffsponge,3,Thu Jul 16 20:26:17 2015 UTC,"its really nice and clean and easy to read and reason about   It's not that much different once you realize that ES6 has shorthands for functions in objects.  var MyComp = React.createClass({   getInitialState() {     return { bar: 'abc' };   },   appendBar(stuff) {     return stuff + this.state.bar;   },   render() {     return <div>{appendBar('cde')}</div>;   } });  class MyComp extends React.Component {   constructor(props) {     super(props);     return { bar: 'abc' };   }   appendBar = (stuff) => {//yay for no auto-bind     return stuff + this.state.bar;   }   render() {     return <div>{appendBar('cde')}</div>;   } }"
javascript,3djiby,papers_,5,Thu Jul 16 23:13:18 2015 UTC,"Or get rid of classes altogether since JS is not a class oriented language:  var MyComp = {     getInitialState() {         return { bar: 'abc' };     },     appendBar(stuff) {         return stuff + this.state.bar;     },     render() {         return <div>{appendBar('cde')}</div>;   } };  Object.setPrototypeOf(MyComp, React.Component);"
javascript,3djiby,papers_,1 point,Fri Jul 17 02:51:56 2015 UTC,"Not familiar with react. But wouldn't this create a single instance and not a class? I guess you could wrap it in a factory function.  Personally, I like using classes and more classical inheritance for the core structure of my applications. Probably due to years of habits and stuborness. I've tried doing things the modern functional way, but I just end up with soup."
javascript,3djiby,Lubestia,1 point,Fri Jul 17 14:42:21 2015 UTC,"When you think of it in terms of ""classes"", yes. The key line is the last one Object.setProtoTypeOf(). You can think of this as inheritance in class based design. So, I inherit all the properties from the parent React.Component.  I too like classes as it's what I was taught in University (senior CS major). It's more explicit or strongly typed."
javascript,3djiby,jsNut,1 point,Fri Jul 17 22:56:53 2015 UTC,"I would agree, but React's classes really aren't classes in the Java sense. They're much more like factories, which are idiomatic for JS. Use of prototypes, IMO, is overrated. I see them more as a perf benefit."
javascript,3djiby,TheRealSeeThruHead,1 point,Fri Jul 17 15:18:23 2015 UTC,"And React's classes aren't really classes either, in fact it's just an object that returns an object (Yes factory), but React's createClass property also links to another object, rather, it explicitly sets it's prototype to another. So the classes syntax is just sugar of the prototypical mumbo jumbo going on. But yes I agree, the prototypes is a overrated."
javascript,3djiby,defcon-12,1 point,Fri Jul 17 23:13:18 2015 UTC,"Good call. And you don't have to apply modifiers to the class after creation, since everything's baked into the factory.  Honestly I don't know how I feel about this shorthand, but it will make some of the class-proponents more comfortable (for better or worse)."
javascript,3djiby,drunkenfaggot,4,Thu Jul 16 23:56:28 2015 UTC,"Using a class syntax will make one's code easier to reason about if you're writing classes and using the facilities of the class system, but React's 'classes' aren't classes.      I understand that it is not like a classic system, but i know this and therefore it is fine.   This defeats the original alleged purpose of using the class syntax, though: normalizing the interface used by frameworks for making objects. Not only that, but it adds confusion, because people will see that this claim has been made, they'll see familiar syntax, and they'll assume that they already understand what's happening in the framework, while in reality React's components work nothing like instances of classes.      its really nice and clean and easy to read and reason about   Maybe at this point this is too much about personal experience and preference, but if we are using a model based on factories, it should be clear that we are using factories, and pretending that they are classes doesn't make anything easier to reason about (IMO--not tryna flame u). To me the model of passing a set of methods as named arguments (what we have now with React.createClass) is more honest and reflective of what's actually happening, and allows for more power in customizing the component. This last issue is something people are already trying to hack around within the class model. To me it seems like an abuse of new syntax, with tons of extra complications.     (wow, longer than i expected. like i said, just discussing it, not tryna attack u)"
javascript,3djiby,Ridley,1 point,Thu Jul 16 20:39:28 2015 UTC,"The object passed to React.createClass is not an object specification, it is a bunch of named arguments for React to use in creating a factory function.   By your own indirect admission, the named arguments can be misunderstood as an object specification to those without the knowledge, just as the familiar syntax makes [people] assume that they already understand what's happening in the framework. Either way, you have to dig in to understand.  Not that I don't see where you're coming from, but much of it is the same old ""Down with abstractions!"" rhetoric (Even if I am quite attracted to ideas like 'everything is a pure function')."
javascript,3djiby,_doingnumbers,1 point,Thu Jul 16 23:30:29 2015 UTC,"For me i just see it the same as i see JSX; it makes my code cleaner, i understand it and it does what i want and expect. Therefore i am happy with it. But I don't think the original method of creating component is going anywhere is it?"
javascript,3die2m,hideula,1 point,Thu Jul 16 14:54:53 2015 UTC,"Solid. I've used this one too, which is similar in a lot of ways -- https://github.com/8th713/common-history"
javascript,3die2m,rpkarma,2,Fri Jul 17 01:26:16 2015 UTC,"Oh that looks good, but relies on HTML5 and ES6 which aren't supported on too many browsers yet- the main idea behind Stateless.js is that we support both evergreen ES5 and those that are not too much lower (IE6, anyone?).  Another major feature that Stateless has is that it offers asynchronous handlers via the hashchange event, I don't know if common-history supports that."
javascript,3dle46,CromulentSlacker,2,Fri Jul 17 05:25:43 2015 UTC,"Do a bit of googling on json schema forms. With extensibility support, I find it to be the cleanest approach to form building.  If you're using a language with type safety, you can usually find a library or create your own method to generate a json schema based off of the class / data object. Then you can customize the field properties and actions with metadata which affect the schema generation.  If you're doing pure JavaScript, then you should manually create the json schema."
javascript,3dle46,schooley,2,Fri Jul 17 07:31:13 2015 UTC,"Are the forms always the same? If so, I'd suggest using a templating library."
javascript,3dle46,dantheman999,2,Fri Jul 17 07:31:54 2015 UTC,"You could create a function that creates an element and adds its attributes on the fly. This way you would have an array of elements like:  var elements = [     { tagName: 'label', attributes: { for: 'firstname', textContent: 'First name:' } },     { tagName: 'input', attributes: { type: 'text', id: 'firstname' } } ];   Here is an example implementation of such function:  function createElement (tagName, attrs, appendTo) {     var element = document.createElement(tagName);      for (var attr in attrs) {         if (!attrs.hasOwnProperty(attr)) continue;          switch (attr) {             case 'textContent':             case 'innerHTML':                 element[attr] = attrs[attr];                 break;              default:                 element.setAttribute(attr, attrs[attr]);                 break;         }     }      if (appendTo) appendTo.appendChild(element);     return element; }   With that, creating an element is easy as:  createElement('label', {     for: 'firstname',     textContent: 'First name:' });   It's also able to directly append the new element to another one. A working example is available in this jsFiddle.  That been said, there are probably already some libraries focused on doing just that. Also, automatically generating a form has lots of limitations since you don't have full control over the markup."
javascript,3dle46,Zhouzi,1 point,Fri Jul 17 07:33:44 2015 UTC,"IMHO: Line 5: continue, not return."
javascript,3dle46,radekmie,1 point,Fri Jul 17 08:00:36 2015 UTC,"Thanks for the heads-up, fixed! :)"
javascript,3dle46,Zhouzi,1 point,Fri Jul 17 09:07:59 2015 UTC,"Why are you generating the form in javascript?  One way to go about it is simply embed it in your page somewhere (<script type=""html/template""> comes to mind).  If you're dead-set on doing it in JS (perhaps you have a dynamic form?), do check out the crel npm package.  Another way to go about it is resig's microtemplates."
javascript,3dle46,maruwan,1 point,Fri Jul 17 09:29:03 2015 UTC,"Since you are using jQuery, here is a non-OOP way if you just need static building:  $(function() {     var prefill = $('#item_' + item_id.toString()).text();     var form = $(""<form/>"", {         method: 'POST',         action: '/create/',         id: '#edit_item_form'     }).append(         $(""<label/>"", { for: 'id_item' }).text(""The text item""),         $(""<input/>"", { id: 'id_item', name: 'item', type: 'text', class: 'form-control' }).val(prefill),         $(""<input/>"", { type: 'submit', class: 'btn btn-primary' }).val(""Submit"")     ); });   Edit: bugs"
javascript,3di54m,bitsofcode,2,Thu Jul 16 13:40:39 2015 UTC,People still use JQuery UI?
javascript,3dhhx3,ElDyudo,9,Thu Jul 16 08:56:03 2015 UTC,Just a small comment about your point 3. You shouldn't be using floating point arithmetic for dealing with money in any language. You should be using integers or a specific decimal type which is designed to given the right answers to base 10 questions. This isn't a flaw in JS per se.
javascript,3dhhx3,sime,0,Thu Jul 16 14:33:08 2015 UTC,"There is no ""decimal"" format in JS from what I gathered. And integer are only going to be good until you have to make a division. But since it's only for some reporting, and not anything legal or for transactions, I won't worry to much about it now."
javascript,3dhhx3,bmarkovic,3,Fri Jul 17 07:30:44 2015 UTC,"Do note (if you haven't) that Sails is based on two established libraries: ExpressJS 2 and Socket.io. So basically, if you cannot find something specific for Sails you could look for solutions for Socket.io or ExpressJS middleware for your specific use-case. Websockets themselves, and especially WSS, are still kinda bleeding edge, and their use (esp. the latter's) is not that widespread still, which is why there isn't too much info on it. Still, I've seen Node.js/Socket.io SSL implementations talked about on SO and a few blog posts as well.  Also I'm not entirely sure what's the problem here. You seem to have set a rather specific and kinda unconventional combination of technologies and requirements. It's pretty given that you'd have to code your way around it yourself."
javascript,3dhhx3,aireater,1 point,Thu Jul 16 12:30:37 2015 UTC,"Well, It's not only the one problem of the jwt through websocket, (which I hacked through now, just sending my token as data since I cannot find headers on websocket requests, is there a difference from a security stand point?). It's more about full stack javascript webdev experience as a whole. But looking at integrated solution like meteor, I may have made the process more painful for me than it could have been."
javascript,3dhhx3,bmarkovic,2,Thu Jul 16 13:09:35 2015 UTC,I thought meteor would've been simpler as well while reading your post. Are you going to try it?
javascript,3dhhx3,maruwan,1 point,Thu Jul 16 13:32:38 2015 UTC,I have to see about it. It certainly seems to be easier. But I am not yet convinced I need to switch yet.
javascript,3dhhx3,bmarkovic,1 point,Fri Jul 17 07:35:28 2015 UTC,"I suppose if you came from something well integrated it would be. I just don't know how full stack Python dev differs, since Django doesn't cross over to the front-end, the REST API addons are painful to say the least, and model scaffolding is much nicer (not to mention less verbose) in Sails.  Also, I just read the part about headers in websockets. The reason Socket.io doesn't support header editing is IIRC because not all underlying implementations (browsers, web servers) support them well. IE, apparently and expectedly, is the main culprit here.  HTTP request is a block of text and socket is almost exactly the same. Whether something is in the header or in the body makes absolutely zero difference from security standpoint."
javascript,3dhhx3,amiritegaiz,11,Fri Jul 17 06:02:08 2015 UTC,"Good code is boring code.  Throw out everything that is ""clever"" and replace it with something sturdy.  Do not trust the ""hipsters"", the best developers aren't writing blogs posts about it: they're shipping boring old jQuery / Backbone based code that is derided by people who feel the need to try out a new framework every 6 months.  JavaScript on the server is for masochists.  Do you even need websockets or are you trying to impress? Just know that people are most impressed by projects that ship.  Make a boring DB schema (not NOSQL), add a boring API (PHP or whatever, who cares), write a boring frontend. It's just CRUD and it has been done a million times. It's very easy to write a boring CRUD app."
javascript,3dhhx3,SubStack,4,Thu Jul 16 11:40:17 2015 UTC,It's not about trying to impress but more about getting an understanding of the new technologies out there. I am quite free in my technological choices and I thought it would be a good opportunity to learn more. The real-time application promises were something I feel I had to investigate. Node and sailsjs are actually not too bad on the server side. All they do is expose a RESTful API for my boring Postgresql DB.
javascript,3dhhx3,slvrsmth,2,Thu Jul 16 12:37:28 2015 UTC,"Sails.js excels at ""boring"" use-cases. It has a pretty sturdy ORM that works well with basic DB choices (like MySQL or Mongo), decent MVC engine that leaves you to do pretty much everything, supports Socket.io as a very simple websocket implementation, glues it to Express with some magic, and the only thing it automates is that it can spit out a perfectly functional RESTful CRUD API and database schema from the same model definition (i.e. Blueprints). It just works so far.  However...  First, it's totally front-end agnostic and provides no backend functionality per se, apart from basic, basic CRUD. Apart from forcing you to use socket.io as a websocket client (it uses it as server component) it doesn't really care what you use as front-end (it is sort-of playing nice with Backbone models but that's just because both revolve around the same concept of plain vanilla REST-ful CRUD).  It's not an opinionated framework, but it's also zero-to-little configuration due to the fact that you cannot configure stuff you need, you need to actually write the code (or plug some npm library into your stuff). Stuff like authentication requires you to think in ExpressJS, which is different from both Django and myriad PHP MVC libs way of doing things -- you ""install"" some Express middleware and plug it into the request/response chain for it to do what you need it to do.   I think that is OP's main issue. Blueprints give you impression Sails.js does a lot with little code, but nothing could be further from the truth. It does the most basic of basic scaffolding for your app, and then it just moves out of the way, and you have to do everything else yourself."
javascript,3dhhx3,beardChamp,2,Thu Jul 16 12:46:14 2015 UTC,"I find the best way to evaluate new technologies and libraries is to integrate them incrementally.  Typically I find that projects called <framework>-data-<framework> are terrible ideas because it:   Couples these two things which should be de-coupled Breaks as soon as one of these two frameworks updates   The best way to learn is to gain an understanding of the fundamentals, by working with modules that are modular + low level.  Or you could try reading the framework's source code (but this is much more difficult).    Every high level framework will fuck you over at some point if you do not understand, in detail, every single component of the stack that comprises that framework."
javascript,3dhhx3,bmarkovic,3,Thu Jul 16 18:59:08 2015 UTC,"The problem is that big tools have lots of opinions about everything. The more big tools you have in a project, the more likely those opinions are going to clash and give you all kinds of headaches and problems. Worse, the more features a tool has, the less attention they usually get and the less configurable they are.  I prefer the unix approach of small tools that each do one thing well. You'll need to do slightly more work to get some basics set up, but I find this approach scales much better and is much less frustrating. Plus, you can understand each library completely in isolation with separate documentation and tests. Here are some of my go-to server-side libs: http://substack.net/some_libraries_I_use_to_build_webapps plus leveldb for persistence.  On the client, I'm partial to virtual-dom but I could very easily swap that out for react if I wanted or my requirements changed. For the client, I think the more important thing you can do is to use a build system like browserify to open up the wealth of packages on npm for small narrowly-defined problems, like json web tokens or many more."
javascript,3dhhx3,bmarkovic,2,Thu Jul 16 11:50:58 2015 UTC,"Stringing different pieces of technology together is always a headache - that's why I usually prefer one big framework to many libraries glued together. From what you are describing, https://www.meteor.com/ could have been nice end-to-end solution for you. Maybe check that out, if you aren't in too deep with the current solution yet?  But the thing is, nobody is really forcing you to use the latest versions of everything. If ember-data-sails doesn't like the new ember version, don't upgrade yet. Wait for it, the upgrades will come. Or they won't, and you will run on an old version for some time, before a new solution is found. But at least you will have a working solution instead of excel being bounced around.  As for JWT auth, maybe that can somehow be done during the initial websocket upgrade request? No personal experience, just bouncing ideas around."
javascript,3dhhx3,SuchInferno,1 point,Thu Jul 16 10:52:39 2015 UTC,"Meteor seems nicely integrated. I should have considered it sooner. Maybe it's not too late.  As for the JWT Auth; login is my app entry point and is done through HTTPS. My problem was sending the token back with every request through websocket once authenticated and connection upgraded, but I am not even sure it makes sense from a security point of view. Literature at my level of understanding (Duh) is hard to come by on this subject. Anyway, I have hacked something up and my token gets sent now as an additional request ""body"" object. Not sure it is a good idea though."
javascript,3dhhx3,ArseAssassin,2,Thu Jul 16 12:19:31 2015 UTC,I second the Meteor recommendation. It seems like it could cut out a couple of headaches for you.
javascript,3dhhx3,slvrsmth,2,Thu Jul 16 13:32:19 2015 UTC,"Yes you need to send the token with every http request, how else would the server know you're authenticated?   With sockets it's highly recommended to authenticate over https, then receive a token which should be used in socket handshake request, b/c there are identified socket hijack attacks that this deters, which should authenticate the channel as long as it's open.  Sending tokens in further communication (for example with every request) could even be dangerous due to enabling short-term man-in-the-middle attacks. This way security fully relies on CSRF/Origin as security for the open channel without relaying security sensitive data  (Origin header checks are AFAIK fully functional OOTB in Socket.io without any need for user setup).  These are reccomendations for websocket security best practice how I understood them and since I'm a (relatively) old fart who's done auth against various legacy security systems such as Kerberos and LDAP this aligns with what I know of network security in general. Still, I'd suggest reading more rather than taking my advice at face value.  Finally, RE: Meteor, I'd highly suggest you read a lot about it before selecting it. If I read your initial post well I can see the Mongo-only aspect of it (some other DBs are supported, but not with full ""reactivity"" i.e. real-time data sync) and tons of magic that is integral part of Meteor experience, both might be a serious no go for you. Furthermore it's a monolitic behemoth that doesn't fit nicely into the npm space, unlike sails/express/socket. It's kind of it's own world, somewhat like ASP.Net."
javascript,3dhhx3,ArseAssassin,1 point,Fri Jul 17 06:26:20 2015 UTC,Very insightful. I am a huge Postgresql fan and I know next to nothing on mongoDB or nosql besides all the hype it's getting.  I'll definitely have to read some more on both the security aspects and Meteor. Any particular resource on security you might recommend?
javascript,3dhhx3,gdmno,1 point,Fri Jul 17 08:41:52 2015 UTC,"Well tbh there is little to know about NoSQL for SPAs. Most of them are just key-value stores for JSON objects that you can somehow search through and perhaps use some map/reduce aggregation on. Those that keep data in ram and refer to OS for swapping (like Mongo) go against everything I've learned about engineering software so I too mostly stay clear of them :) RethinkDB looks nice tho :)  I don't really know where to point you for security info. You should probably start by learning about traditional unix security systems like NIS, X.500 and Kerberos, and then move over to how Kerberos/LDAP made foundation of Microsoft's Active Directory, then skip to more modern concepts like PKI, X.509 and SSL. I can't remember ever reading a full book (that wasn't some manual) on security that I could really recommend."
javascript,3dhhx3,genericallyloud,1 point,Fri Jul 17 09:02:19 2015 UTC,"I don't see why you would continue this path for prototyping a web app, when Meteor so easily covers all you need done here."
javascript,3djzdc,fuczak,1 point,Thu Jul 16 21:54:06 2015 UTC,Play notes by using your keyboard.  Can anyone suggest me an elegant way for DRYing up this file a bit? https://github.com/fuczak/RumcaJS/blob/master/app/scripts/dsp.js  Starting at line 144 there are a lot of functions that update currently plaing voices. Every time I iterate over the array of voices and update their parameters. I wrote a function at line 113 which actually works even though it throws error every time it fires.  Please help! I want this project to be a gateway to my first web dev job.
javascript,3djzdc,Magnusson,2,Thu Jul 16 21:58:23 2015 UTC,"Hi there, nice work with your synth! I built this synth pretty recently, and I'm actually prepping to give a presentation on it at a meetup this weekend, so I can tell you how I handled this issue. My synth is written in Backbone.Marionette, but hopefully the ideas are helpful.  I created object setters for my synth parameters, like this. I gave my UI elements data-params to correspond to my synth modules and parameters, and every time the UI gets changed, an event is fired with that data-param and the new value. That event causes the synth model to be updated. Updates to the synth model trigger a method at the top level, which parses the relevant parameter and value from the update event and updates the active voices concisely using the setter methods:  synthUpdateHandler: function(update) {                      var param = Object.keys(update.changed)[0];         var value = update.changed[param];         var component = param.slice(0, 3);         var attr = param.slice(4);          _.each(this.activeVoices, function(voice) {             voice[component][attr] = value;         }); },   I'd also consider separating your init patch from the rest of what you're doing in dsp.js. And you might want to think about how to handle envelope updates that happen mid-note. On an analog synth, changes to the envelope can take effect at any time when a note is playing. You can see how I approached that in this file."
javascript,3dkpqv,webstrous,1 point,Fri Jul 17 01:33:17 2015 UTC,"My current employer started out making pick-connected websites. Fortunately for me, I started after they broadened their clientele (too few pick programmers and clients to grow the business).  You might have better luck looking for books, given the age and lack modern popularity. A quick Google search for pick basic programming yielded a few results.  Good luck!"
javascript,3dieu4,wjohnsto,1 point,Thu Jul 16 15:00:50 2015 UTC,XPost Subreddit Link: /r/typescript
javascript,3di4ko,epicaricacy12,10,Thu Jul 16 13:35:32 2015 UTC,"It's less about the backend and more about what you want to do with the data.   Backbone (by DocumentCloud, also known for Underscore) is fairly unopinionated but it can quickly become incredibly messy for large applications AngularJS (by Google) is a popular choice for SPAs and is very testable and easy to get started with but can cause you grief if the complexity of the application logic or the size of the data sets becomes non-trivial React (by Facebook and Instagram) is a brilliant view layer but provides no affordances for getting data in and out of the frontend; there are a lot of competing architecture libraries that try to solve this problem but no clear winner -- in theory you could just bolt React onto any existing technology, though Ember (by the Ember team) is probably one of the best matching frameworks for your problem if all you have is a (Rails-like) REST API; I have no experience with Ember and an irrational dislike for it, but it's definitely worth checking out Flight (by Twitter) is ... interesting, but it never gained much popularity and most people seem to consider it dead (though the GitHub repo is still active) Knockout (by Microsoft ... kinda) is similar to React in that it only provides the view layer and similar to Backbone in that it is pretty unopinionated and prone to letting you shoot yourself in the foot -- I don't recommend it but it seems to be geared towards REST APIs if only in spirit jQuery (by the jQuery Foundation) may actually be an option (surprisingly enough) if your UI is more of a website and less of an application -- yes, really Meteor (by the startup sharing its name) is entirely irrelevant and not a good fit at all, but it gets so much hype I thought it's probably a good idea to point out how poorly it would fit your problem before someone recommends it"
javascript,3di4ko,sigwhite,1 point,Thu Jul 16 14:20:56 2015 UTC,"Tell me more about this ""irrational dislike"" for Ember if you will."
javascript,3di4ko,marinated_pork,3,Thu Jul 16 16:19:37 2015 UTC,"If I could say more about it, it wouldn't be irrational."
javascript,3di4ko,sigwhite,1 point,Fri Jul 17 07:41:46 2015 UTC,I also dislike Ember...  You have to climb a hugely steep learning curve... only to end up at the same place Angular started.
javascript,3di4ko,walkoffaith,1 point,Thu Jul 16 18:52:13 2015 UTC,I think Durandal is a more accurate comparison than knockout to the rest of the list.  It is easy to shoot yourself in the foot though lol.
javascript,3di4ko,Acchariya,2,Thu Jul 16 17:07:59 2015 UTC,"I say it depends on how complex the ui/app is you are building. If it is small and doesn't have the potential to get very big over time I would stick with Backbone. If it is complex with lots of interactions and state I might choose more robust framework. Although I am a Angular guy, I think either Angular or Ember would be a good choice for bigger and more complex apps. React by itself is just a view rendering layer and you would need to add something else to handle the rest interaction. I don't know enough about Meteor to comment but the people who use it have great things to say."
javascript,3di4ko,neb636,1 point,Fri Jul 17 05:27:24 2015 UTC,React is definitely a much better choice!
javascript,3di4ko,radubrehar,1 point,Thu Jul 16 14:00:47 2015 UTC,"I use angular js, if I had to communicate with an API, it  provides you with an MVC architecture on the client side."
javascript,3di4ko,kabbab,1 point,Thu Jul 16 21:32:31 2015 UTC,I use backbone and it does a great job of using AJAX to send/retrieve data as well as matching return data back to HTML templates. But the real REST implementation is just me remembering to use PUT/POST/GET/DELETE and passing data either in the querystring or header/body as appropriate for a RESTful implementation.
javascript,3di4ko,OneEyedMule,1 point,Thu Jul 16 22:03:40 2015 UTC,"I implement the following interface when interacting with any rest APIs.  It's not a framework, just a philosophy, but I think it's a pretty useful approach:  var requestOneId = client.enqueue(requestObject, function(data){     console.log(data); //json for for the first request }); var requestTwoId = client.enqueue(requestTwoObject, function(data){     console.log(data); //json for for the second request }); client.dispatch(function(data){     console.log(data[requestOneId]); //Same as data passed to first callback     console.log(data[requestTwoId]); //Same as data passed to second callback });   The implementation details inside in most cases are just opening an XmlHttpRequest and POSTing the requestObject with the appropriate headers and whatnot.  I use the ""enqueue"" and ""dispatch"" because some API's allow you to pipeline multiple requests into a single POST.  Having a callback for the dispatch also allows you to run some code when you're certain that all of the enqueue'd requests have returned, in case your next step is reliant on multiple API requests."
javascript,3dk2pu,Omarscarn,1 point,Thu Jul 16 22:19:43 2015 UTC,You could run the JS inside the parent frame and access the iframe's document using frame.contentWindow.document
javascript,3di6nk,doctorlongghost,2,Thu Jul 16 13:53:56 2015 UTC,Zero width space
javascript,3di6nk,azium,2,Thu Jul 16 17:02:10 2015 UTC,Here's another (trickier) one:  'naïve' == 'naïve'   Hint (in rot13): Qba'g sbetrg gb abeznyvmr lbhe fgevatf!
javascript,3di6nk,skeeto,2,Thu Jul 16 20:00:37 2015 UTC,"The entire notion of string equality is much more complex than most people realize. Many of us are lucky enough to only have to deal with the latin characters but even those have some complexities like your naïve example. Also, probably the following should be true for many applications: ""ﬀ"" === ""ff""."
javascript,3di6nk,radhruin,1 point,Thu Jul 16 20:56:51 2015 UTC,right-to-left override  mind blown.
javascript,3djqgz,krumoksnis,2,Thu Jul 16 20:47:57 2015 UTC,"React is pretty much only for view. There is Flux (I believe that is what they are calling it) but that isn't a framework, but more of a architectural design. So I don't think you can really compare the two in an honest manner. React can be used with Angular as the V part of the MVC. I believe Angular 2 also borrows some ideas from React to help speed up it's DOM operations as well."
javascript,3djqgz,madman86,1 point,Thu Jul 16 21:21:40 2015 UTC,"Flux is just a type of architecture. There are some flux libraries - a few of them are meant to be used with react, some are framework agnostic and can be used with any other framework (or no other framework).  I have a bit of a flux-ish architecture in my current app which is an Angular 1 app, and if I was to start over - I'd try and do it that way from the start."
javascript,3djqgz,e82,0,Fri Jul 17 11:49:42 2015 UTC,"In terms of rendering performance, Angular 2 already appears to be considerably faster.   Try it for yourself:  https://rawgit.com/alincc/angular-test-table/master/angular2/dist/index.html"
javascript,3djqgz,ShMcK,3,Thu Jul 16 21:53:31 2015 UTC,"not sure that's a fair test, it'd be nice to see what the result looks like on a production version of react with precompiled templates. Nobody is going to run the live jsx transform stuff on production code."
javascript,3djqgz,dizzr,3,Fri Jul 17 07:07:03 2015 UTC,"Yeah. Besides, React's performance advantage is mostly in updating existing HTML, not inserting 5,000 nodes in one go. Either way, both Angular 2 and React seem to be very fast. I've used both, and I'd say A2 is a bit faster out-of-the-box for now, but much harder to optimize. It's very straightforward to optimize a React app in comparison."
javascript,3djqgz,clessg,2,Fri Jul 17 08:15:45 2015 UTC,You're right. A better performance comparison can be found here: http://www.wintellect.com/devcenter/dbaskin/angular-benchpress-and-performance-tests. There's a link to the repo where you can see the code & run the tests for yourself.
javascript,3djhpp,bluelinux,2,Thu Jul 16 19:44:35 2015 UTC,"You don't need to, strictly speaking, but most shops would probably expect you to know a few things about it... there are some good reasons for that: frameworks turn over every few weeks, you want to know the underlying principles.  Try this: http://youmightnotneedjquery.com/"
javascript,3djhpp,bkimmel,1 point,Thu Jul 16 20:13:45 2015 UTC,Thanks for the link..
javascript,3djhpp,eorroe,2,Thu Jul 16 20:18:46 2015 UTC,And take a look at this :)
javascript,3djhpp,eorroe,1 point,Sat Jul 18 00:43:57 2015 UTC,Thanks. Great link.
javascript,3djg9h,bilornah,1 point,Thu Jul 16 19:33:36 2015 UTC,Chrome refuses to load particles.js because it's not served over HTTPS.
javascript,3djg9h,kumiorava,1 point,Thu Jul 16 20:17:58 2015 UTC,"As /u/kumiorava said, cdn should be over https. I added this is <script src=""//cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js""></script> in your html and got a response"
javascript,3djg9h,DanFreedse,1 point,Thu Jul 16 20:38:14 2015 UTC,im using firefox and I got a grey screen
javascript,3djg9h,DanFreedse,1 point,Thu Jul 16 23:09:19 2015 UTC,"I would choose something other than particlesjs, to unreliable"
javascript,3demz3,sime,24,Wed Jul 15 17:54:50 2015 UTC,"tl;dr: MS is working on making the <template> tag inert.  After that, they'll look into Shadow DOM.    You'll still need polyfills for a long time."
javascript,3demz3,theillustratedlife,16,Wed Jul 15 20:00:09 2015 UTC,"If you only support evergreen browsers, things won't be that bad.  I also get the feeling that in the next few years Safari will become the party pooper #1."
javascript,3demz3,x-skeww,11,Thu Jul 16 00:32:13 2015 UTC,"IMO it already is, if only because of its release cycle. Unless the next version is literally a year ahead of everyone else, its going to be the one browser dragging everything else down."
javascript,3demz3,Klathmon,2,Thu Jul 16 01:41:18 2015 UTC,I'm sure someone has made a GIF describing the letdown you feel when WWDC comes and goes without your favorite new feature having been added to WebKit.
javascript,3demz3,theillustratedlife,7,Thu Jul 16 08:12:34 2015 UTC,Safari is currently shitting the bed
javascript,3demz3,drunkenfaggot,1 point,Thu Jul 16 04:04:14 2015 UTC,"Since Edge barely beats current Safari, according to html5test.com, I would think the Edge developers are the ones who should be worried about keeping their jobs."
javascript,3demz3,dhdfdh,0,Thu Jul 16 11:53:37 2015 UTC,Do you even ECMAScript bro?
javascript,3demz3,yotamN,0,Sat Jul 18 10:30:22 2015 UTC,ECMAScript is not a browser and only one of the functions of a browser. You can't base the competence of a browser on one thing alone.
javascript,3demz3,dhdfdh,1 point,Sat Jul 18 12:28:36 2015 UTC,So does HTML5 but you mention it above as if this is the way to check which browser is better.
javascript,3demz3,yotamN,1 point,Sat Jul 18 12:32:40 2015 UTC,"You're ignoring the point. That poster said ""Safari is currently shitting the bed"" but the reality is, Edge is Microsoft's new browser and it barely beat a version of Safari which has been around for years. Apple is bringing out a new version of Safari soon. I can only imagine who will be doing the shitting then."
javascript,3demz3,dhdfdh,1 point,Sat Jul 18 12:37:54 2015 UTC,"The problem is that Safari is the last not evergreen browser of all the big 4 browsers, Microsoft do a big improvements in their browser while Apple just take the time and doesn't do much."
javascript,3demz3,yotamN,1 point,Sat Jul 18 12:41:08 2015 UTC,"Obviously not. Edge is virtually tied with Safari and the current version of Safari has been out for years. And ""big improvements"" in their browser still can't hold a candle to Chrome or Firefox."
javascript,3demz3,dhdfdh,2,Sat Jul 18 13:44:20 2015 UTC,"The blog post actually refers to Apple as being part of the standardisation process. Beyond that I've seen very few signals from Apple about what they plan to implement.  Apple were also meant to be on recent Web Assembly announcement too, but were too busy at the time to sign on to the official announcement text. Apple's secrecy about their plans is really annoying. Do they treat their OS X and iOS developers the same?"
javascript,3demz3,realityking89,2,Thu Jul 16 07:56:42 2015 UTC,"Essentially, yes. You get a huge dump of information at WWDC in June, the stuff announced there will be available in September when the nexts releases roll around. Beyond hat it's mostly guesswork.  In a way, web devs are better off. What's in Webkit by late May will likely be in the next Safari."
javascript,3demz3,dhdfdh,1 point,Thu Jul 16 13:06:59 2015 UTC,"According to html5test.com, Edge only beats out today's Safari by 8 points on their scale; a virtual tie."
javascript,3demz3,yotamN,1 point,Thu Jul 16 11:52:17 2015 UTC,Well yeah but Edge also will be evergreen browser like Chrome and Firefox and it's still a lot and I mean alot better in ECMAScript 6
javascript,3demz3,dhdfdh,1 point,Sat Jul 18 10:32:27 2015 UTC,"They need to prove themselves and Microsoft has never proven they can maintain such a pace. Their ""next browser"" is always supposed to be the best but this ""next browser"" isn't even close to Chrome or Firefox."
javascript,3demz3,yotamN,0,Sat Jul 18 12:27:45 2015 UTC,I'm not going to use Edge as a user but as long as it's have better support for HTML5 and ECMAScript and it's evergreen it's better then safari.
javascript,3demz3,immibis,1 point,Sat Jul 18 12:34:05 2015 UTC,"If you only support evergreen browsers,   then a large number of users will not be able to use your thing."
javascript,3demz3,SnapAttack,1 point,Fri Jul 17 01:16:27 2015 UTC,"Just remember that Microsoft considers Edge (and Windows 10) as evergreen, so we won't need to wait for a new version of Windows before we can use new things. They've already announced that new features will become available as they're ready."
javascript,3demz3,aaronshaf,6,Thu Jul 16 06:44:49 2015 UTC,Yet still hasn't started on EventSource / Server-Sent Events. :-(
javascript,3demz3,Akkuma,2,Wed Jul 15 22:23:20 2015 UTC,I think SSE is essentially dead. It is kind of sad when SSE actually does a better job in most use cases and from what I saw scaled better.
javascript,3demz3,utuxia,10,Wed Jul 15 23:44:56 2015 UTC,Those have both been superseded by sockets.
javascript,3demz3,Akkuma,3,Wed Jul 15 23:53:13 2015 UTC,"Is that an official superseded, thus deprecation, or just what you think? Back in the day, http://matthiasnehlsen.com/blog/2013/05/01/server-sent-events-vs-websockets/, tested them and had significantly better results with SSE."
javascript,3demz3,utuxia,3,Thu Jul 16 00:05:34 2015 UTC,This is just what i've come to know over the years. sockets is bi-directional so it won out.
javascript,3demz3,aaronshaf,1 point,Thu Jul 16 00:09:06 2015 UTC,"No, SSE is a finalized spec and a legitimate alternative to WebSockets with distinct benefits."
javascript,3demz3,x-skeww,2,Thu Jul 16 14:01:43 2015 UTC,I think SSE is essentially dead.   Based on... what? The spec was finalized earlier this year and it's supported by all browsers except for IE.  http://www.w3.org/TR/eventsource/ http://caniuse.com/#feat=eventsource
javascript,3demz3,Akkuma,2,Thu Jul 16 00:30:54 2015 UTC,"I think it's dead because of how little effort people seem to put behind it from writing about it to actually using it. I rarely see people talk about ""realtime"" apps and demonstrate using SSE. Rather, they all seem to use websockets, because on paper it can do anything SSE can do, and with IE not officially supporting it it makes people often just jump right onto websockets."
javascript,3demz3,MrBester,8,Thu Jul 16 01:44:05 2015 UTC,"There is a lot to consider, prioritize, and resolve as the specs are not finalized and the current implementation in Google Chrome is already incompatible with recent changes to the specs.   Yeah, like their version of Flexbox was. They fixed it when the spec was finalised and everybody got it in the updates months ago. If Microsoft embraced that methodology instead of patch bug, patch bug, patch bug ... (two years later) ""Hey, here's a new awesomesauce version with all the stuff that was already in every other browser when we planned it"" then developers would be happier. Instead they are still the asshole who turns up late to a party and obnoxiously hogs the dance floor with their new take on disco."
javascript,3demz3,alleycat5,6,Wed Jul 15 21:56:11 2015 UTC,"I'm not sure what you're trying to say, but I think the counter point would be A) Edge is now evergreen, so no Big Bang anymore and B) they have said, and shown that they'll be more responsible implementing things."
javascript,3demz3,MrBester,-4,Thu Jul 16 01:21:55 2015 UTC,"I guess we'll see what they mean by ""evergreen""."
javascript,3demz3,Anathem,-1,Thu Jul 16 02:45:26 2015 UTC,But will it have dev tools that are worth a shit?
javascript,3demz3,OfekA,3,Thu Jul 16 03:03:38 2015 UTC,"The dev tools in IE11 have improved an awful lot. MS hasn't just been doing security fixes for IE11 but have also been improving the tools, adding features etc between releases."
javascript,3demz3,Anathem,1 point,Thu Jul 16 06:52:55 2015 UTC,They are still bad compared to Chrome's and Firefox's devtools.
javascript,3demz3,dhdfdh,1 point,Thu Jul 16 17:57:32 2015 UTC,"I just used the IE11 dev tools to fix some cross-browser compat shit (of course we had problems with IE), and it was a nightmare."
javascript,3demz3,marcusklaas,0,Thu Jul 16 21:36:38 2015 UTC,Just being better than shit is still shit.
javascript,3demz3,drunkenfaggot,1 point,Thu Jul 16 11:56:07 2015 UTC,Not as a general rule.
javascript,3demz3,drunkenfaggot,-13,Thu Jul 16 12:18:48 2015 UTC,"Microsoft Edge Team has started work on Web Components   Ctrl + F ""react""  [0 results]  ...hmmm...."
javascript,3demz3,x-skeww,8,Thu Jul 16 07:25:24 2015 UTC,React really has nothing to do with it.
javascript,3demz3,theillustratedlife,-8,Thu Jul 16 08:00:41 2015 UTC,Microsoft.
javascript,3demz3,xXxdethl0rdxXx,5,Thu Jul 16 08:01:35 2015 UTC,"No, really, React has nothing to do with Web Components.  You can use Web Components if you use React or vanilla JS or Angular or Ember or Mithril or whatever. As far as your app is concerned, Custom Elements are exactly the same as native elements. You add/remove them the same way and you interact with them the same way."
javascript,3dh1lg,azium,3,Thu Jul 16 05:19:55 2015 UTC,"looks good, small state bug where after one side wins you can keep playing and the other side can win the next turn and the game changes the msg of who won...  are you sure your supposed to use backticks for jquery selector strings? this looks weird to me and i thought it was for strings with variables in them? if so i wouldnt use them there. i dont use babel/es6 so i could be wrong.  still a really good intro to fp"
javascript,3dh1lg,mc_hammerd,1 point,Thu Jul 16 11:29:36 2015 UTC,"Backticks just turn into strings, so it doesn't really matter, however using them in place of normal strings has some advantages besides being able to to interpolate values, such as handling quote escaping. Consider this crazy string:  let x = `'q'u""o""t'e""s'`   This gets compiled to   var x = ""'q'u\""o\""t'e\""s'"";"
javascript,3dh1lg,bartturner,2,Thu Jul 16 14:11:33 2015 UTC,"2nd the book you linked to.   Just picked it up recently as I pick up a lot of books.   But this one I could not put down.   Found it to be very good.  BTW, I am a very firm believer the immediate future for software development is FP.   It is just a much better approach.   Also, after decades of using classes it is obvious to me that there is a lot of negative with classes.  But some will resist."
javascript,3dh1lg,cghio,2,Thu Jul 16 12:33:55 2015 UTC,"Honestly, FP is a really old paradigm (older than OO), and it also isn't mutually exclusive from OO (see: CLOS, OCaML).  Also, the best things about FP are found in other paradigms too. Mercury, a logic programming language, has purity and immutability by default without being FP at all. In fact, it's the only language with compile time garbage collection which is basically impossible in all of the FP languages now.   He future is probably more in the area of total programming, which is much newer and standing on the shoulders of the FP greats. Rust, for example, a multi-paradigm language, is probably the most mainstream language that gets anywhere near totality. Check out Idris for some of the neat things total programming gets you.   Either way, FP is basically just a buzzword at this point that doesn't mean a whole lot. I have people telling me that Java is a functional language now because it has function sugar that gets turned into a Runnable instance.  If you're interested in the field, hit me up; I'm a professional Clojure/Haskell guy—books only get you so far. :)"
javascript,3dh1lg,bartturner,1 point,Thu Jul 16 19:04:55 2015 UTC,"I am extremely interested! Like I said in my post, I've been dicking around with Clojure / ClojureScript and I have a burning desire to take my programming to the next level and I see a lot of promise in FP, FRP, Logic etc. Anything you would recommend?  Edit: To be more specific, I want to get into AI, machine learning. I'm at the bottom of a big mountain, but I have the zen for it I think."
javascript,3dh1lg,cghio,1 point,Thu Jul 16 19:46:14 2015 UTC,"Yes I realize that the second language basically invented, Lisp, is a functional language.   Scheme was created in 1970 and  influenced by Lisp.   Then JavaScript was influenced from Scheme.   BTW, I am a really old guy.  FP is not just a buzzword, IMO.   There is so little independent thinking in CS so we end up doing things that are really not all that smart for a very long time.  We have never really had a popular functional language.   With Javascript that has changed.   Javascript is exposing FP concepts to a much larger audience.   That are realizing this is just a far better approach.   Also, JS is making many realize that there are some pretty big negatives with classes especially deep classes.  It will take a generation to change programming approach but it is happening.     I actually think we would have got here faster if Lisp was not tied to AI.  BTW, I don't believe we could get to FP without having a popular language like JS that can be a functional language but can does not force it.   Sometimes you have to work pretty hard to make it functional but you can."
javascript,3dh1lg,I_Pork_Saucy_Ladies,1 point,Fri Jul 17 12:20:34 2015 UTC,"I mean, Python, Perl, PHP, Java, Scala, ad nausem can all be ""functional"" without forcing it. It hasn't helped advance the cause; in fact, it just steers newcomers away and creates misinformation.   I think Clojure, F#, and Racket have been doing much more to seriously advance the paradigm, and Haskell is about the best functional language we have right now. Forcing functional programming is about the only way you can actually get the benefits of the paradigm. Otherwise, you just have map in place of for loops and not a lot of real benefit   Also, just a note, but LISP is far from the second oldest language. It is the second oldest language family still in widespread use (right behind Fortran, I think), but even LISP is sitting on the shoulders of giants."
javascript,3dh1lg,cghio,1 point,Fri Jul 17 17:10:47 2015 UTC,"As someone putting a lot more emphasis on FP at the moment, what do you think of something like cycle.js?  To me, it seems like understanding the concept of streams is much harder than the usual OOP/MVC. On the other hand, implementing complex, async logic seems a lot easier with streams, once you understand them?"
javascript,3dh1lg,cghio,1 point,Mon Jul 20 15:22:28 2015 UTC,"The best part about streams/generators/etc is composibility. Once you have a streaming API, you basically have a very efficient map/filter/reduce set which gets you most of the way to LISP, at least."
javascript,3dh1lg,cghio,2,Mon Jul 20 23:28:40 2015 UTC,"Hey! Nice work, but the states variable is mutable accessible from your entire module.   The better way to do this is to change your listener a bit:  element.onclick = {   let states = [];   return function (ev) {     //mutate state in here   } };   This is the idiomatic way to do it in just about every FP heavy language.   Note that the scope syntax may not work in JS... It's been a while since I've been heavy into JS programming and you may have to make it a IIFE, but I think ECMAScript 2015 buys you this..."
javascript,3dh1lg,cghio,1 point,Thu Jul 16 19:11:22 2015 UTC,"Won't your code wipe the state clean after every click though? This is definitely one of the hardest parts of FP to grasp. I want at the end of the game for there to be an array or stream of board states. Does that make sense?  Edit: I stared at that for another 20 minutes, and I think I know what you're talking about now. Let me give this a go. (I'm still curious if I'm thinking about states as a stream, Lisp style list of new values derived from old ones, correctly, and different ways to implement that.)  At the end of the day, I'm not married to JavaScript (though I do like it a lot)"
javascript,3dj6le,mathcanbefun,1 point,Thu Jul 16 18:23:29 2015 UTC,"If you know your method is being called as a method of the object - ( i.e. myObject.myMethod('somearguments') ), then you can reference the parent object as this.  So simply: this.myProperty.  If it's being called in another way - ( i.e. myFunction = myObject.myMethod;  myFunction('someArguments'); ) you'll need to do something else.  Remember the ""Everything/Nothing Rule"" in JS:  scope has everything to do with declaration and nothing to do with calling protocol.  this has everything to do with calling protocol and nothing to do with declaration.  (This rule will no longer hold in ES6, but it's good for now).  So you can either 1) Cal the function specifically in a way so that this does equal the parent object (i.e. myFunction = myObject.myMethod.bind(myObject);  myFunction('someArguments'); ), or put a reference to the parent object somewhere outside the function's scope where the function can reach it."
javascript,3dj6le,bkimmel,0,Thu Jul 16 20:02:06 2015 UTC,This.variable
javascript,3dj6le,johnnyvibrant,3,Thu Jul 16 18:31:23 2015 UTC,"Without meaning to be too picky:   this.propertyName   A variable is a scoped name that refers to a value, which is different from a property, which is a slot on an object that refers to a value.  It's probably best to explicitly distinguish between the two, if just to avoid later confusion."
javascript,3dj6le,hughfdjackson,2,Thu Jul 16 18:45:18 2015 UTC,"This is false. What 'this' refers to depends on what calls it, or what is bound to 'this' using .bind"
javascript,3dj6le,muzmath,1 point,Sat Jul 18 13:06:34 2015 UTC,Javascript is case sensitive with its variable names.
javascript,3di7ey,bakunin95,3,Thu Jul 16 14:00:18 2015 UTC,I don't think this is quite right
javascript,3di7ey,azium,1 point,Thu Jul 16 18:11:21 2015 UTC,Its still in beta but thanks for the screen. I need output like this to fix it.
javascript,3dfwkk,nekrtemplar,5,Wed Jul 15 23:19:23 2015 UTC,It looks like it's about time to revive ECMAScript for XML  (E4X) Specification which handles JSX in a generic way
javascript,3dfwkk,theQuandary,2,Thu Jul 16 02:05:18 2015 UTC,Relevant: JSX: E4X The Good Parts
javascript,3dfwkk,clessg,0,Thu Jul 16 07:39:35 2015 UTC,I'd rather revive this.
javascript,3dfwkk,jsr0x0000,2,Thu Jul 16 02:16:51 2015 UTC,Someone already has a custom element implementation of that.
javascript,3dfwkk,theQuandary,1 point,Thu Jul 16 03:11:00 2015 UTC,"I'm a huge fan of React, but if JSX is going to be widely supported, I'd far rather have a standard implementation than a proprietary one which is based on the standard one."
javascript,3dfwkk,clessg,1 point,Thu Jul 16 03:00:25 2015 UTC,"I wasn't disagreeing, but I do want my CSS9 <blink> element to be returned. :) Thank you, /u/jsr0x0000! But I won't stop until <blink> is returned to the browser as a native element. That is my goal in life."
javascript,3dfwkk,theQuandary,1 point,Thu Jul 16 03:18:10 2015 UTC,"What would a standard implementation actually do, though? JSX itself is just ""a concise and familiar syntax for defining tree structures with attributes"". It doesn't mandate what's done with the output."
javascript,3dfwkk,tencircles,2,Thu Jul 16 09:30:06 2015 UTC,"The elements in JSX translate into React-specific code when you put them through Babel or some other transpiler. If multiple groups want JSX, then we need to use a standard. History shows that when standards don't exist (or are not works in progress), the web diverges and everyone suffers."
javascript,3dfwkk,clessg,3,Thu Jul 16 13:03:53 2015 UTC,"what happened to ""having html in your JS is a bad thing""?"
javascript,3dfwkk,tencircles,6,Thu Jul 16 04:15:11 2015 UTC,See the seminal talk.
javascript,3dfwkk,siegfryd,-8,Thu Jul 16 04:20:01 2015 UTC,"Avoiding separation of technology by putting one technology inside the other? Honestly the issue is simply HTML, whether it's in JSX or .hbs, or ng-whatever, or document.createElement(); The DOM/HTML is a fucking terrible way of rendering stuff on a screen. I am amazed at the hoops people want to jump through to hang on to a shitty markup language."
javascript,3dfwkk,tencircles,8,Thu Jul 16 05:00:42 2015 UTC,"JSX isn't HTML though because you can use JSX for React Native / Canvas etc. I don't see what's wrong with XML-like syntax for UIs, it works fine for WPF with XAML."
javascript,3dfwkk,clessg,1 point,Thu Jul 16 07:02:58 2015 UTC,"The problem with it is that you're only describing half of your UI. Essentially, ""put a box here with this text"" Then elsewhere in another language you have to specify the other half of the information about the box (""style"")."
javascript,3dfwkk,Rezistik,1 point,Thu Jul 16 14:35:42 2015 UTC,Exactly right. Which is why solutions like Radium exist. See also vjeux's presentation.
javascript,3dfwkk,tencircles,4,Thu Jul 16 16:58:22 2015 UTC,"What's your alternative then? JSX is an alternative to HTML, not to the DOM but to HTML. It's fairly good.  I've seen how other languages do templating and I haven't been impressed at all.   I think you're just saying something you've either heard someone else say, or saying something you've said for a really long time without reconsidering the world around you as it's changed."
javascript,3dfwkk,Rezistik,2,Thu Jul 16 05:19:50 2015 UTC,"JSX isn't an alternative to HTML. It is HTML, just with javascript mashed in. Do I need an alternative to point out that something is inherently flawed? And thanks for the vote of confidence :) I'm just parroting something I read on the interwebs herpy derp."
javascript,3dfwkk,tencircles,1 point,Thu Jul 16 14:39:57 2015 UTC,But you're not pointing out what the inherent flaws are.   I don't know what problem you have with HTML other than disliking the templating options that have evolved around it.
javascript,3dfwkk,tencircles,1 point,Thu Jul 16 15:00:39 2015 UTC,"It's a language for creating UI that lacks any ability to describe what the UI actually looks like without using another language (CSS). CSS was basically an afterthought to correct the shortcomings of HTML. It also lacks the ability to describe behavior. So we get javascript basically spackled into the cracks that neither HTML nor CSS covered. So we end up with this weird amalgamation of three languages that many people have tried to improve in various ways through various means in each of the three languages, templates/directives for HTML, LESS/SASS for CSS, and every flavor of JS under the sun. But I've yet to see a project with just abstracts away the entire mess and gives you a clean solution which covers behavior and display in a coherent way without resorting back to, or just augmenting the profoundly retarded system that it's trying to fix. Maybe this sounds like crazy talk, but in an ideal world you'd just write code that describes a UI component in it's entirety while avoiding developer-facing HTML/CSS in any form."
javascript,3dfwkk,muzmath,1 point,Thu Jul 16 16:12:15 2015 UTC,"If you've ever heard the phrase ""you can't polish a turd"". That applies here. HTML kinda sucks to deal with in interactive applications, so instead of getting rid of it we're just throwing the turd in JS. Don't get me wrong, JSX/React is convenient and IMO leagues better than the jQuery spaghetti people were writing 5 years ago, and a step up from opinionated MVC, I just don't think it's the end-all be-all that people seem to be shouting so loudly lately."
javascript,3dfwkk,jellatin,1 point,Thu Jul 16 16:19:21 2015 UTC,There's no such thing as final ultimate syntax/framework. Sounds like you are just a grumpy old programmer :)
javascript,3dfwkk,tencircles,5,Sat Jul 18 03:48:07 2015 UTC,"It's kind of like what Angular did for DI.  People didn't understand the need for it, then they started using Angular in droves, all of a sudden there were all these DI evangelists.  Same thing - most of the people who were dead set against mixing html/js started using React and then hopped on the ""real"" separation of concerns bandwagon.    Converts do seem to make the best zealots.  In reality there are pros and cons to JSX like any other paradigm.  If it works for you and your team, awesome.  If it makes your life harder, skip it.  It is not The One True Way™ nor is it an abomination against gods and men, it's just another way of tackling a problem."
javascript,3dfwkk,drunkenfaggot,1 point,Thu Jul 16 04:35:04 2015 UTC,well said.
javascript,3dfwkk,theQuandary,0,Thu Jul 16 05:02:00 2015 UTC,Reminds me of XML hype in the early 00's
javascript,3dfwkk,tarthon2,3,Thu Jul 16 03:00:27 2015 UTC,It's no worse than HTML and at least it forces strict XML compliance (which is better than HTML). I'd also argue that it's better than string templates because it's converted into functions and evaluated natively instead of calling 'eval'.
javascript,3dfwkk,trueadm,2,Thu Jul 16 03:29:18 2015 UTC,Well she's a guy so...
javascript,3dfwkk,achen2345,0,Thu Jul 16 03:43:36 2015 UTC,What part of JSX do you find hideous? Maybe t7 can address some of those problems? https://github.com/trueadm/t7
javascript,3dhru2,hughfdjackson,2,Thu Jul 16 11:20:40 2015 UTC,"I'm self-taught, intermediate level. I struggle with conceptualizing callbacks and promises. Here's my n00bish understanding:   Callbacks - a function calls another function when some specified criteria is met.  Promises - they are essentially a callback that circumvents synchronous firing of functions... they provide asynchronous action... which means they allow things to occur at different times. Someone said setTimeout() within a function is essentially a promise...  Can you help me to get a more advanced (please try to keep the explanations simple though) understanding of callbacks and promises?   Thanks!!"
javascript,3dhru2,ForScale,1 point,Thu Jul 16 14:41:40 2015 UTC,I'd love to - a DM is coming your way.
javascript,3dhru2,ForScale,1 point,Thu Jul 16 18:15:10 2015 UTC,"Great, thanks!"
javascript,3di61p,imstillreallybored,2,Thu Jul 16 13:48:46 2015 UTC,So this is a question an interviewer gave you or you're practicing?
javascript,3di61p,jodraws,2,Thu Jul 16 14:46:06 2015 UTC,It was an interview question i came across on Glassdoor. I'm just practicing algorithms/data structures and making sure i can code and whiteboard each question.
javascript,3di61p,marinated_pork,2,Thu Jul 16 15:04:16 2015 UTC,"When you ask for help on code, ALWAYS post whatever code you have written. If you don't have code, tell us how you think the code would work.   It is a total party fowl to simply say ""Here's a problem, solve it for me. Thanks.""  Where would you start with this problem? What is the first thing you would do?"
javascript,3di61p,jml26,1 point,Thu Jul 16 16:18:18 2015 UTC,"haha sorry about that, i don't need it solved for me i was just curious on how others would solve it. It's good practice, i ended up looping through the numbers and joining each set of strings together. Then i used a permutation to count the combinations of the letters in the string."
javascript,3di61p,mc_hammerd,1 point,Thu Jul 16 17:22:04 2015 UTC,"Not the complete answer, but John Resig (of jQuery fame) was playing around with dictionary lookups in JavaScript a while ago. You may find these helpful.  http://ejohn.org/blog/dictionary-lookups-in-javascript/ http://ejohn.org/blog/javascript-trie-performance-analysis/ http://ejohn.org/blog/revised-javascript-dictionary-search/"
javascript,3di61p,Ericth,1 point,Thu Jul 16 16:22:54 2015 UTC,"So i tried using a permutation to solve the problem, if you aren't familiar with permutations it just goes rearranges the numbers to find combinations. You can see the jsfiddle here, not sure how well it scales but it works.  http://jsfiddle.net/ptofe58p/"
javascript,3di61p,ForScale,1 point,Thu Jul 16 16:51:27 2015 UTC,"https://jsfiddle.net/fx80bv41/  if you could get dict as a hash... ex dict[""word""] // => true or ""word"", you could save like 200 loops through the dictionary and just do:  for (p of phonecombos)   if (dict[p])     console.log('valid combo:',p)"
javascript,3di61p,ForScale,1 point,Thu Jul 16 17:06:13 2015 UTC,"Am I missing something or does It sound like an easy question? Basically: Parse phone number for array of numbers Generate all possibilities from numbers (4 to the power of 12 ~ 16M is manageable) Loop over all possibilities and against object for matches.   A more efficient solution is to generate all permutations of only the first 3 Numbers, collapse the dictionary space to words that start with those letters, iterate over the space and stop when no more matches are found.   You could probably use the second method with a sliding window to find words in the phone number that ignore say the first 2 digits.   Edit: adding to this, efficiency is down to the data structure. You'll need a hash map for quick lookup of all words (dict['word'] As mentioned) and a list of word chunks at all lengths. So array of 1 to maxwordlength with at each index a object of unique chunks from the dictionary. This allows you to recursively search the limited dict space for matches and verify if you have a finished word to add to the results list.   If this is a question on implementation instead of algorithm outline then I think the others have given pretty much all snippets needed to solve the issue."
javascript,3di61p,mc_hammerd,-1,Fri Jul 17 08:03:55 2015 UTC,"As someone who primarily uses js to manipulate the dom and add functionality/user interaction (and cool little animations) to webpages, that problem sounds tough as fuck! ;)  If I were properly motivated to solve such a problem, I'd start over at /r/math asking for the algorithmic logic needed to solve it. I'd then translate the algorithm/technique in to js code.  Regarding matching English dictionary words, there has to be a database of words somewhere, right? You could simply loop through such a database looking for matches."
javascript,3di61p,ForScale,1 point,Thu Jul 16 15:02:19 2015 UTC,Yeah haha it seems like more companies are asking algorithmic and data structure questions. I just had an interview where i had to implement a Stack/Queue data structure and then create a Queue using two Stacks as the private members in javascript. It's not too hard if you know LIFO and FIFO and the implementation details but it definitely caught me off guard haha
javascript,3dhlgp,yarauuta,7,Thu Jul 16 09:47:08 2015 UTC,moment.js?
javascript,3dhlgp,tony_soulchild,2,Thu Jul 16 10:23:12 2015 UTC,Yep use juration https://github.com/domchristie/juration
javascript,3dhlgp,a-sober-irishman,1 point,Thu Jul 16 11:13:49 2015 UTC,thanks alot!
javascript,3dgem2,automathematics,1 point,Thu Jul 16 01:48:07 2015 UTC,"No React, just Babel + Backbone:  find js/src -name ""*.js"" -type f -exec node_modules/.bin/babel {} \; | node_modules/.bin/uglifyjs -c -m | wc -c // 1735350   That's about 150KLOCs. We also pull in some deps from node_modules, and that doesn't include handlebars templates. So ~2MB, though we split it into a few separate files to load in parallel.  We don't worry about it much though because we're an app that people leave open for long periods of time.  For local development, we get sourcemaps, and do an overall build with unittests (another 250KLOCs) that ends up being about 20MB while doing local dev work because sourcemaps are huge."
javascript,3dgem2,pertheusual,1 point,Thu Jul 16 03:14:37 2015 UTC,"I'm not sure whether you are doing it already but you should make sure NODE_ENV is set to production when minifying React. That will remove some development specific checks and will slim it down somewhat.  You may also want to split it at least in two bundles. One for your app deps and one for the app itself. If you attach hashes to filenames, this gives you nice client side caching. I.e. if only app code gets updated, then user will have to download only that provided he has visited the page before.  The next step would be to add lazy loading per route to fetch possible extra dependencies on the fly. There are smaller tweaks like these which you can implement if necessary."
javascript,3dgem2,bebraw,1 point,Thu Jul 16 04:04:21 2015 UTC,Do you think you're just writing that much code? My backbone code base (before switching to react) was much smaller than my current one.   How much do you think babel is adding?
javascript,3dgem2,pertheusual,1 point,Thu Jul 16 04:06:50 2015 UTC,Sorry this comment was for /u/pertheusual!
javascript,3dgem2,pertheusual,1 point,Thu Jul 16 04:51:47 2015 UTC,"Mostly code we've written, I don't think Babel adds much as long as you're using the runtime transform or external helpers."
javascript,3dgem2,pertheusual,1 point,Thu Jul 16 05:10:43 2015 UTC,I'm not sure I follow. That's browserify right? I've been using webpack lately.
javascript,3dgem2,pertheusual,1 point,Thu Jul 16 05:31:33 2015 UTC,"By default, Babel puts all of the helper functions it needs right at the top of each file. That means if you're bundling your code up for a browser, you're going to end up with a ton of duplication. Babel provides two ways to avoid that. runtime or external helpers.  Babel does add more code just because it's necessary to implement some features, but more of the very repetitive chunks of code are placed in helpers."
javascript,3dgem2,pertheusual,1 point,Thu Jul 16 06:08:33 2015 UTC,Great! I have a feeling webpack may do some of this with the dedupe plugin but I'm going to investigate further. Thanks!
javascript,3dgem2,pertheusual,1 point,Thu Jul 16 06:37:06 2015 UTC,found the connection in here for any other webpack users!  https://github.com/babel/babel-loader/blob/master/README.md
javascript,3ddjuh,Ob101010,16,Wed Jul 15 12:50:38 2015 UTC,"Basically, there is a Cookie called ""pc"" (Poisoning Canary) that is added into the dynamic JS configuration object (see r.setup() and r.config). Your cache is ""poisoned"" when these two values differ.  Try this in the console:  r.cachePoisoning.checkPoisoned(); r.config.poisoning_canary = 'different'; r.cachePoisoning.checkPoisoned();   If your cache wasn't ""poisoned,"" you should see false, then true. Also, the next time you load the page, you may see the notice about sending the report.     So that's what it does. Why does it do that? If I had to guess, my first thought is some weird subreddit that has a use for it (note that the code for the /r/thebutton is in that same js file). It could also be looking for user manipulation of their object, but it seems too specific to be generalized outside of some other purpose.  Maybe there is a browser that keeps messing with their object - throwing errors - and this is just a debugging attempt.     EDIT: I should note that changing the cookie has no affect because that cookie is then sent to the server, which generates the code to initialize the config object to that cookie's value. The only way I can think of to cause ""poisoning"" is how I described in the code snippet."
javascript,3ddjuh,lemminman,4,Wed Jul 15 17:16:52 2015 UTC,"So you're basically correct, except for the reason we do it. This cookie is sent with ever request and sent back in every page that's not meant to be cached by intermediary proxies (either by your workplace, your school, or maybe your mobile ISP.) Basically, we don't want to send pages meant for you to other users.  We store a random, non-identifying value in that cookie (there's only 1000 or so possible values,) send it with every request, and then include the value on the page we sent back. If the cookie doesn't match the value on the page, we assume you got sent a page meant for someone else and report it to the server.  It's meant to make it easier for us to tell if there's a sudden spike in people getting sent pages meant for other people, and give us the information we need to fix it quickly, and to figure out who was affected. We don't know that it happened from our end unless someone reports it (or some client-side code reports it for us,) hence the JS.  @ u/Ob101010: You might not have been served a page from a poisoned cache, I'm still checking through the data to make sure there are no false-positives. I'd need to know more about your setup (what extensions you have enabled, whether you're on a work network, if you have a local caching proxy, etc.) The only reason that code hasn't been open-sourced yet is because I forgot."
javascript,3ddjuh,lemminman,1 point,Thu Jul 16 17:48:37 2015 UTC,That makes sense. Thanks for the insight!
javascript,3ddjuh,largenocream,1 point,Thu Jul 16 18:06:54 2015 UTC,"setup       Ubuntu 14.04 (up to date)  Chrome (up to date)  Home network (can provide IP if you need)  local caching proxy? No.  I do some web dev / testing on this machine though, run apache as a service, as well as things like mongod, but I dont see how any of that could interfere this way.  extensions that were enabled at the time :   AdBlock (sorry, Ill unblock reddit now, the status of it did not affect the outcome though)  Angular JS Batarang (disabled now)  Google docs  Postman  And hey, its back. 1:24PM CST Sent cache poisoning report to server. If you need to know anything else let me know.  EDIT :  Closed all other chrome windows and tabs, then closing chrome, then open 1 instance of chrome, and opened reddit. Adblock greenlit for reddit. No error on the home page. Login. No error there. Inbox. Sent cache poisoning report to server. 1:40CST."
javascript,3ddjuh,largenocream,1 point,Thu Jul 16 18:29:27 2015 UTC,"I think I see what it is now, I didn't set path=/ on those cookies so the check might mess up depending on which page you first visited after the check was added, writing a possible fix for it now."
javascript,3ddjuh,largenocream,1 point,Thu Jul 16 20:37:56 2015 UTC,"Holler when ready Ill test here.  edit :   my guess as to what /u/largenocream thought at one point today :  Man, ob101010 really likes /r/boobs  /yes. yes I do."
javascript,3ddjuh,p337,1 point,Thu Jul 16 20:53:22 2015 UTC,"Should be fixed now. It might happen a couple more times as we throw out the broken cookies that're still laying around, but the javascript will fix them when it sees them."
javascript,3ddjuh,mashermack,1 point,Thu Jul 16 23:15:57 2015 UTC,"It might happen a couple more times as we throw out the broken cookies   Thats what happened. I refreshed the page a few times, message no longer appears.   edit : and r.cachePoisoning.checkPoisoned(); reports false"
javascript,3ddjuh,mattman00000,1 point,Fri Jul 17 13:32:07 2015 UTC,"Rad, thanks for checking! :)"
javascript,3ddjuh,MrBester,25,Fri Jul 17 17:53:03 2015 UTC,"I can't read anything in your screenshot. Use pngs for text, not jpg. Maybe my eyes are just bad, but I feel like you didn't even need to blur the rest of the text because the compression artifacts are so intense.   I could not reproduce the message, but...  edit: The messages comes from this script: https://www.redditstatic.com/reddit.en.bub3H_Pd-kk.js  Still trying to figure out what it's supposed to do... it's kinda hard since it is minified, and this code, as far as I can tell is not on their GitHub.   Maybe /u/largenocream would be interested/have an answer.   edit 2: are you using any plugins/malware that would mess with your request headers and could be tripping their mechanism for detecting that?"
javascript,3ddjuh,chars19,6,Wed Jul 15 14:39:59 2015 UTC,Second that. You have an extension which most likely is triggering this.
javascript,3ddjuh,timseverien,5,Wed Jul 15 16:21:17 2015 UTC,"I went through and disable all the extensions one by one, testing after each. It was still there.  So I cleared everything from the cache. The message is now gone. I enabled all the extensions, and the message is still gone. Something about the cache was triggering it.  After going over the script in question and finding nothing nefarious (darnit), Im going to chalk this up to 'dont watch intrracial midget tossing porn at work anymore'.  //unless its Friday"
javascript,3ddjuh,largenocream,3,Wed Jul 15 16:37:42 2015 UTC,"midget tossing   Is that like propelling a small person through the air, or subjecting them to whatever it is that ""tossers"" in British places do?"
javascript,3ddjuh,quackers_82,3,Wed Jul 15 17:47:35 2015 UTC,Tossing a midget is completely different from tossing off a midget...
javascript,3dgs49,billautomata,1 point,Thu Jul 16 03:45:22 2015 UTC,"I prefer when I am done setting up my graph, to have an iterable array of javascript objects that I can transition or remove individually. I have found that cache-ing individual element selectors on an array is a workable model for scaling apps that don’t rely on querying the DOM by element type, class or ID.   I can't see any need for this approach when you can just do this:  var divs = example1.selectAll('div.foo')   .data(data)   .enter()   .append('div')   .attr('class', 'foo')   .style('background-color', 'white')   .html(function(d) {     return d;   });   And re-selecting just to do the transition is probably a bad idea. So rather than doing this:    d3.selectAll('div.foo')   .transition()   .duration(2000)   .style('background-color', function(d) {     var v = color_scale(d)     return d3.rgb(v, v, v)   });   You can reuse the selection:  divs   .transition()   .duration(2000)   .style('background-color', function(d) {     var v = color_scale(d)     return d3.rgb(v, v, v)   });   Or just don't break the chain in the first place."
javascript,3dgs49,DecentOpinions,1 point,Thu Jul 16 16:51:33 2015 UTC,Because you can't see a need for this doesn't mean there is no use for this.
javascript,3dhc2s,ARX8X,2,Thu Jul 16 07:29:31 2015 UTC,"Which is why you see posts about immutability, or functional programming - things get passed around by reference, and when you modify it within the function, instead of making a copy and modifying the copy - you can end with weird side effects/results that you might not expect"
javascript,3dhc2s,e82,1 point,Thu Jul 16 10:49:58 2015 UTC,"Thanks   So when you assign  a value from a variable to another, it's changed everywhere?  How do I copy?"
javascript,3dhc2s,e82,1 point,Thu Jul 16 14:05:34 2015 UTC,"Yep - which can be handy in some ways, but also cause lots of confusion in other ways.   For example: https://jsfiddle.net/s7thsw1y/  Hit run and look at the console - it's not really obvious that x & y are pointing to the same thing.  There are various ways to copy - lots of projects use Ramda, Underscore, LoDash, etc which are rather handy - and have copy/clone functions as part of them. They are pretty handy for other reasons - so useful to use them anyways.  A quick way to copy an object/array: var clonedObj = JSON.parse(JSON.stringify(Obj));"
javascript,3dhc2s,zoomzoom83,1 point,Thu Jul 16 14:46:30 2015 UTC,Defensive copying in JS is difficult to get right and potentially a major performance bottleneck. Your best bet is to use immutable values as much as possible - I'd recommend giving a library such as immutable.js a go.
javascript,3dhc2s,x-skeww,1 point,Fri Jul 17 12:39:17 2015 UTC,"Create a test case on jsbin or jsfiddle.  Edit:  You mean this?  function foo(a) {   a[0] = 'b'; } let array = ['a']; foo(array); console.log(array); // [""b""]   Yes, that's how that works. You can create a copy via concat, slice, spread (ES6), Array.from (ES6), and so forth."
javascript,3dhc2s,x-skeww,1 point,Thu Jul 16 09:56:46 2015 UTC,Thanks   I need to learn more
javascript,3dhc2s,geon,1 point,Thu Jul 16 14:03:09 2015 UTC,Also why are you using let keyword?
javascript,3dhc2s,KPABA,1 point,Thu Jul 16 14:09:13 2015 UTC,"Because I don't use JS' ""var"" anymore.  Anyhow, here is how creating a copy with ES3/5 looks like:  // A var copy = original.concat(); // B var copy = original.slice();   ES6:  // A let copy = Array.from(original); // B let copy = [...original];"
javascript,3der8a,magenta_placenta,1 point,Wed Jul 15 18:23:35 2015 UTC,"Love the fire and smoke effects.  I don't like not being able to push two keys at once ( Up and Left, Down and Right . . . )"
javascript,3der8a,JeromeAtWork,1 point,Wed Jul 15 23:41:52 2015 UTC,There's something about the parallax that really screws with my driving.
javascript,3der8a,Mackinstyle,1 point,Thu Jul 16 00:48:30 2015 UTC,"Thanks for the feedback! This was created a few months back now. Once I clear out some current projects, stay tuned for a multiplayer asteroids-style game."
javascript,3deq2l,milehighacro,2,Wed Jul 15 18:15:56 2015 UTC,"At the last job I had to produce a lot of complex prototypes.  I was a consultant working remotely at the client where I had to work to the specifications provided by the employer, often as proofs of concept, to the client in order to demonstrate that a seemingly complex idea was easily achievable.  I stress the word easily because the employer is extremely well known for pushing cutting edge ideas and the client was absolutely incompetent.  The prototypes had to come extremely fast for a couple of reasons:   Fewer days of effort demonstrated the feasibility of a given idea Allow for turn around time because scope creep always happens when the client has something to play with   More important still is that I could transfer the prototype in the form of a single HTML file as an email attachment. This way everybody at both the client and employer had equal access to open the prototype and nobody had to go through build process insanity.  Suggestions would come fast and I could make changes or experiment with new ideas in the document in real time and send it back out faster than they could make additional requests.  Because I had no dependencies (not even jQuery) I could experiment with absolutely anything without constraint.  This also made the document smaller and faster to transmit over email, which is important because it is only a matter of time before the document swells substantially from advanced feature creep and changes.  The best part of not having any dependencies was not even in JavaScript compatibility, but in CSS.  On one big effort I completed the large results page to almost a pixel perfect match and included some basic sorting/filter to match the visual comps in roughly 4 days of initial effort.  I never bothered to look at this in old IE, because it is just a prototype. Two months later this document took on a life of its own and evolved from a proof of concept to a work model by which the production artifacts should be modeled from.  Eventually I had to look at this thing in IE8 and it was broken.  After all that effort and even though the document looked mutilated there were only three minor things to fix in the CSS, which took roughly an hour of effort.  The document remained light and cross browser issues remained quick to fix.  I couldn't have done this if there were a bunch of frameworks trying to magically do it for me.  The result of this effort and some smaller prior efforts completely changed the employer's approach to prototyping.  By working in strictly vanilla code a complex idea can be delivered in an extremely portable manner that works with durability and in rapid time.  I learned something completely different than the employer did.  I learned that by building a page, feature, or tool as rapidly as possible as a prototype like this I could find out where all the pain points were before I spent the extra time to find them in the architecture and debug them and review it with business.  It completely changed how I perceived estimates.  It makes so much sense to dedicate one guy to evaluate the idea as a prototype for a couple of weeks instead of spending an entire team to go through these discoveries over a couple months when instead the prototype can be used to feed the production effort."
javascript,3de6eg,ns0,0,Wed Jul 15 15:57:17 2015 UTC,"I'm not a react hater, but how is that better than:  window.addEventListener('load', function() {     var books = [       {name: ""Hitchhiker's Guide to the Galaxy""},       {name: ""1984""},       {name: ""Dune""},       {name: ""Fahrenheit 451""}     ];     var app = document.getElementById('app');     app.insertAdjacentHTML('beforeend','<input type=""search"" id=""search""><ul id=""results""></ul>');     var search = document.getElementById('search');     var results = document.getElementById('results');     books.forEach(function(book) {         results.insertAdjacentHTML('beforeend', '<li>' + book.name + '</li>');     });     search.addEventListener('keyup', function() {         for(var i=0; i < results.childNodes.length; i++) {             results.childNodes[i].style.display = (result.innerHTML.indexOf(search.value) > -1) ? 'list-item' : 'none';         }     }); });"
javascript,3de6eg,drunkenfaggot,5,Thu Jul 16 04:06:50 2015 UTC,"Um, I think you just counterpointed yourself.  Could you imagine maintaining (or growing) that?  Reckless dom mutation isn't the way forward."
javascript,3de6eg,ns0,1 point,Thu Jul 16 07:27:43 2015 UTC,"Ok, well, sure i could make it better.  Complete with assertions.   function BookSearch(location) {     console.assert(location && typeof(location) === 'string',          'The location was not defined or was not a CSS selector as a string.');     BookSearch.initialize.call(this, document.querySelector(location));     var search = document.querySelector(location + ' > .search');     var results = document.querySelector(location + ' > .results');     var privateBooks = [];      Object.defineProperty(this, 'books', {         get:function() { return privateBooks; },         set:function(b) {             console.assert(Array.isArray(b), 'The list of books was not an array!');             b.forEach(function(i) {                  console.assert(i.name && typeof(i.name) ===  'string',                      'The books list did not have a name property on one of the items!');              });             privateBooks = b;             privateBooks.forEach(function(book) {                 results.insertAdjacentHTML('beforeend', '<li>' + book.name + '</li>');             });             BookSearch.runSearch.call(this, search, results);         }     });     search.addEventListener('keyup', BookSearch.runSearch.bind(this, search, results)); } // Static, yet private, so that we can unit test this. BookSearch.runSearch = function(searchDom, results) {     console.assert(searchDom && searchDom.insertAdjacentHTML,          'The search parameter passed in was not a DOM node or was not defined.');     console.assert(results && results.insertAdjacentHTML,          'The results parameter passed in was not a DOM node or was not defined.');     for(var i=0; i < results.childNodes.length; i++) {         results.childNodes[i].style.display = (results.childNodes[i].innerHTML.indexOf(searchDom.value) > -1) ?                                                  'list-item' : 'none';     } } // Static, yet private, so that we can unit test this. BookSearch.initialize = function(app) {     console.assert(app && app.insertAdjacentHTML,          'The application parameter passed in was not a DOM node or was not defined.');     app.insertAdjacentHTML('beforeend',         '<input type=""search"" class=""search""><ul class=""results""></ul>'); }  window.addEventListener('load', function() {     var bookSearch = new BookSearch('#app');     bookSearch.books = [       {name: ""Hitchhiker's Guide to the Galaxy""},       {name: ""1984""},       {name: ""Dune""},       {name: ""Fahrenheit 451""}     ]; });"
javascript,3de6eg,drunkenfaggot,2,Fri Jul 17 00:55:53 2015 UTC,"Sorry, after writing React components, you can't talk me into writing or maintaining hodge-podge code like this"
javascript,3de6eg,daliwali,0,Fri Jul 17 03:12:52 2015 UTC,"There are some problems with that specific implementation, such as string templating and relying on id, however don't assume that direct usage of the DOM API is reckless, it is often times more performant than an additional abstraction layer on top."
javascript,3de6eg,dreamtugboat,4,Thu Jul 16 10:17:13 2015 UTC,"The direct use of the DOM API isn't the issue. The issue is watching how this way of writing an app will (or will not) scale. Imagine as this (or any) app grows in complexity and you still need to keep your DOM in sync with your state (or cache, or whatever you want to call it).  As someone who uses React at work there are definitely things I like about it. Writing components is really easy. Composing them is really easy. And compared to our old DOM abstraction we're going to have huge performance gains. All of that being said, far and away the best feature of React (in my eyes anyways) is being able to DECLARE what your DOM should look like and never have to care about how to implement mutations between state changes. React does that for you. You're avoiding an imperative mess which, as any app scales, will introduce massive cognitive overhead. Syncing your DOM with application state of arbitrary complexity is not easy to do at all (especially in big apps, or apps with complex views). In my experience React makes this about 90% less painful."
javascript,3de6eg,gojukebox,1 point,Thu Jul 16 13:16:36 2015 UTC,yeah not a great example of why use react.js but it really is a great framework and the virtual DOM offers a remarkable increase in performance in lots of cases.
javascript,3de6eg,ns0,1 point,Thu Jul 16 06:08:14 2015 UTC,"I can't find any benchmarks comparing vanilla javascript to virtual dom diffing, except for this one, and its not very promising: https://aerotwist.com/blog/react-plus-performance-equals-what/. At over a 1,000 photos ""flicker feed app"" the tests for react were taking ~1.2 seconds for layout, vanilla javascript came in at around 70ms.  Where were you finding the benchmarks for virtual DOM?"
javascript,3de6eg,gojukebox,1 point,Fri Jul 17 00:28:17 2015 UTC,my case is dea.ing witn\h humdreds of millions of rows round 150 columns with two way binding to most cells.
javascript,3de6eg,dreamtugboat,1 point,Fri Jul 17 09:32:36 2015 UTC,"virtual DOM offers a remarkable increase in performance in lots of cases   [citation needed] - this sort of unsupported claim drives people to write more of those comparative benchmarks which seemingly-always have 10,000 things in them (?) and nearly always miss the point of whatever they're benchmarking against.  Virtual DOM makes it not slow by default to write declarative code which generates a view based on some state. That's the benefit of it, however ""not slow"" isn't the same as ""fast"".  Well-written manual DOM manipulation will always be faster (virtual DOM is an abstraction over it, after all), but is more painful to write, read and maintain as the amount of stuff happening grows."
javascript,3de6eg,muzmath,1 point,Thu Jul 16 09:16:45 2015 UTC,"People are often far too reductive when debating performance with React (not you, though!).  React by default is pretty fast, and especially given how easy it makes syncing DOM with application state, the vast majority of people will prefer React to no abstraction (which of course would be faster in most cases... though you'd also have to implement something around change batching which would be super painful).  With all of that said, React offers APIs (specifically shouldComponentUpdate) which make it very easy to fine tune performance as it becomes necessary. These APIs, along with the profiling tools React provides, make achieving better-than-default performance really easy (not to mention if we use immutable datastructures to manage state optimizing components becomes easier still).  I think the most bothersome thing about all of this is that it appears most of the people participating in these debates understand the arguments, but they repeat them over and over, beginning from reductive stances until ultimately we all decide ""just use what's best for you, then!"". Super tiring!"
javascript,3dewjh,mateogianolio,1 point,Wed Jul 15 19:00:23 2015 UTC,Why?
javascript,3dewjh,Chryssie,1 point,Thu Jul 16 08:59:36 2015 UTC,Because hacking is fun!
javascript,3dewjh,hughfdjackson,1 point,Thu Jul 16 09:04:40 2015 UTC,"I quite like this pattern - I did something similar in my .tap library (https://www.npmjs.com/package/tap-chain + blog post http://hughfdjackson.com/javascript/tapping-into-the-method-chain/).  I think there's something genuinely useful in being able to add in functions in a chain - it can help readability.   Have you seen http://babeljs.io/blog/2015/05/14/function-bind/, which solves the same problem with a proposed extension to the language?"
javascript,3ddyoh,germainelol,2,Wed Jul 15 14:59:47 2015 UTC,I recently saw this blog post that does a pretty good job of covering what I see as the basics.
javascript,3ddyoh,fyrilin,1 point,Wed Jul 15 18:36:59 2015 UTC,"Really awesome post, a lot of great designs there."
javascript,3ddyoh,lajw,1 point,Thu Jul 16 01:48:57 2015 UTC,"Easy.  Current trend: Use colorful non-rounded squares, box-shadow: 0px, 0px, 30px rgba(0, 0, 0, 0.3); and transition: 0.5s on every element (a'la Material Design). Looks decent even if browser doesn't support it. Also flat-colored-svg icons. And font-width: 100 on h1. Wide HD background images, but content width @~600px. Flashiness guaranteed.  Expanding menus and other crap can be done with pure :hover. Unless you're drawing graphs/loading stuff while page is running, you don't need JS.  Besides, XMLHttpRequest is so 2008 \s."
javascript,3ddyoh,lajw,1 point,Wed Jul 15 21:16:46 2015 UTC,"I was thinking something more along the lines of http://gifmylive.arte.tv/fr (Skip past the intro). I tried recreating it a while ago and failed miserably. The sort of hover effects and trends that you mentioned above I have no issue with already, I'm talking about something more."
javascript,3ddyoh,kirofficial,1 point,Thu Jul 16 01:43:13 2015 UTC,"Technically it's mostly canvas/paths. You need to learn basics of real-time game programming (smooth time-dependent animation). Then doing such stuff will be trivial. Again, material design guidelines when it comes to motion come in handy. And read this if you lack inspiration: http://blog.codinghorror.com/our-programs-are-fun-to-use/"
javascript,3ddyoh,kirofficial,1 point,Thu Jul 16 11:15:44 2015 UTC,It's mostly the actual doing it I struggle with rather than inspiration or creativity. I've found a little animated skyline that uses Paper.js and canvas so I'll play with that and see how I get on. Hopefully I can progress to something like the above some day.
javascript,3ddq79,mattdesl,2,Wed Jul 15 13:50:43 2015 UTC,Thanks for this. I was thinking of writing a wrapper a few days ago. Maybe I can help you maintain it.
javascript,3ddq79,aliirz,1 point,Wed Jul 15 18:53:49 2015 UTC,"Sure, feel free to post any issues if you see problems!"
javascript,3ddq79,MunchGamer,1 point,Wed Jul 15 19:32:46 2015 UTC,Why force a user to clone the repo? Couldn't you just make the constructor take the api keys as arguments?
javascript,3dd0mc,vscode,4,Wed Jul 15 08:44:07 2015 UTC,"Looks pretty good!  I think the best thing to improve the code would be to break it down a bit. Right now everything is in this one object, which makes it a little confusing.  For example, a filterNode could be it's own component. There's a lot of code for setting up the DOM object and events for each item - if you split it off you'd have a ~70 line component that's easier to take in in one piece.  Also consider using JS prototypal inheritance to create your FilterObject methods. Right now you do this.getSelectedItemObj = function () {} for each function inside your FilterObject constructor.  Instead you could assign the functions to the prototype object like this: FilterObject.prototype.getSelectedItemObj = function () {}."
javascript,3dd0mc,kandetta,4,Wed Jul 15 11:10:07 2015 UTC,"This looks terrible!  Basic complaints:   Unnecessary complexity. KISS! Lack of backwards compatibility: addEventListener, querySelector, etc. You have one gigantic classless ""God"" object. You don't really use classes. You use cryptic/misleading object/method/variable names: reflectToDOM, FilterObject, SelectFilter, etc... You want to put JS into HTML for ""config"" purposes. You are setting default properties improperly (hasOwnProperty/getKeys/map/for...in are much better) You should conceal all your stuff within (function(){/*stuff*/})() if you want it to be ""reusable"". You won't need this/self variable repeated everywhere.   Automatic resizing is not a part of filtering.  Clicking on item can be handled using document's click event. It's also not a part of the filtering.  IHMO this is pointless library.   You're duplicating the functionality of <option> element. And in the real world results are pulled from the server, and server does the filtering.   Here's shorter, dirtier version https://jsfiddle.net/omxow2qq/"
javascript,3dd0mc,lajw,1 point,Wed Jul 15 21:27:13 2015 UTC,Completely agree. Much better and keeping it simple!
javascript,3dg20d,octalmage,0,Thu Jul 16 00:04:02 2015 UTC,When would this ever be useful or safe?
javascript,3dg20d,talksdowntoyou_,2,Thu Jul 16 09:35:15 2015 UTC,"macros, automation, etc - he gives the example of AutoHotkey - and since it isn't available for mac, he's wanting to make something like it. But being able to hit a key-combo and having a macro run can be handy."
javascript,3dg20d,e82,1 point,Thu Jul 16 10:54:01 2015 UTC,Here's a few example apps:  http://octalmage.github.io/PebbleFlix/ http://maxogden.github.io/screencat/
javascript,3dehus,sojohnnysaid,1 point,Wed Jul 15 17:19:49 2015 UTC,"Post your code and the problems you're having with it. Or, if you really want a good answer quickly, post the smallest possible snippet of code that demonstrates the problem."
javascript,3dehus,joenyc,1 point,Wed Jul 15 17:40:31 2015 UTC,"This code will look through column A (skipping the header) and perform this evaluation:  if the cell value is equal to the next cell value below it count it (a cell counts as 1 the value inside the cell is not relevant for this)  if the cell value is not equal to the next cell value than perform this operation:  ( 30 (this is a static number that won't change) - (whatever the cell count is at that point) = X  insert X number of rows below the last cell that was equal. (so there is now X number of empty rows between the cells that are not equal.  ***I think is next rule might be better to use at the very end which would be this operation:  look for any blank cell in column A and fill in with the text ""empty""  ok this is basically what i'm trying to do but the code isn't functional  var sheet = SpreadsheetApp.getActiveSheet(); var startRow = 2; // First row of data to process, assuming headers var startColumn = 1; // Last row of data to process var lastRow = sheet.getLastRow(); // Number of rows to process var lastColumn = sheet.getLastColumn(); // Fetch the range of cells where data exist var dataRange = sheet.getRange(startRow, startColumn, lastRow, lastColumn)     // Fetch values for each row in the Range.  var data = dataRange.getValues(); var j = 0; for (i in data) {     var row = data[i];     var nextRow = data[i+1];     var prevRow = data[i-1];     var bin = row[1];     var nextBin = nextRow[1];     var prevBin = prevRow[1];     if (oldBin == prevBin) {         j++         }     if (nextBin != bin && nextBin != ""empty"" && j>=29) {             var j = 0;             }         else if (nextBin != bin && nextBin != ""empty"") {             sheet.insertRowAfter(i);             sheet.getRange(i + 1, 1).setValue(”empty"") //marking the row as “empty""             }     } //End “for”"
javascript,3dehus,joenyc,1 point,Wed Jul 15 17:56:10 2015 UTC,"for (i in data) is very suspicious. You're using i as an index, so I think you should try writing it as for (var i = 0; i < data.length; i++)."
javascript,3dehus,Strat-O,1 point,Wed Jul 15 20:02:45 2015 UTC,Why do you say that?  Do you know for sure that the variable data is a standard array with numeric indicies?  What if it's an object?
javascript,3dehus,joenyc,1 point,Wed Jul 15 20:42:19 2015 UTC,"The docs say it's a two-dimensional array).   Arrays begin at 0 in JavaScript, not 1.   The very first time through your loop, won't prevRow be undefined? And won't that make the code crash on var prevBin = prevRow[1].   This is actually a fair amount of code to simply say ""it isn't functional"". What's the smallest amount of code that exhibits behavior you can't understand?"
javascript,3dfual,Gaurav0,1 point,Wed Jul 15 23:01:41 2015 UTC,"Who is EmberSherpa, and why should I ask them questions?"
javascript,3dfual,kenman,1 point,Thu Jul 16 01:27:44 2015 UTC,EmberSherpa is the wellspring of all Ember knowledge.
javascript,3dcp5h,scarcella,4,Wed Jul 15 06:12:39 2015 UTC,"Tell babel to use externalHelpers (see options) then require the runtime when you bootstrap from the bundle. You can find it all in the docs, its just not explained specifically."
javascript,3dcp5h,jsNut,3,Wed Jul 15 07:35:14 2015 UTC,"You're not building production JS, as instructed on the React download page   Note: by default, React will be in development mode. To use React in production mode, set the environment variable NODE_ENV to production. A minifier that performs dead-code elimination such as UglifyJS is recommended to completely remove the extra code present in development mode.   I've never used browserify, as I jumped from requirejs to webpack. I believe you'll need envify to set the env varible, then probably gulp-uglify to perform the dead-code removal.   Looking at your gulpfile, I would split the js task into two -- one for production, one for dev."
javascript,3dcp5h,mindlessLemming,2,Wed Jul 15 10:07:49 2015 UTC,No need to use envify just NODE_ENV=production gulp or set process.env.NODE_ENV = 'production' in the gulpfile.  Also for uglify with browserify: uglifyify
javascript,3dcp5h,petecoopNR,1 point,Wed Jul 15 15:16:24 2015 UTC,You still need envify to replace references to process.env.NODE_ENV in your code with the configured value so uglify can perform dead code elimination.
javascript,3dcp5h,petecoopNR,1 point,Thu Jul 16 08:09:55 2015 UTC,"Question here is though, why would I need to set an ENV for node, im building the JSX (ES6) to JS (ES5), building and then deployed on S3."
javascript,3dcp5h,petecoopNR,1 point,Thu Jul 16 23:55:52 2015 UTC,because React uses the NODE_ENV environment variable to swap out production/development code.
javascript,3dcp5h,andrewburgess,1 point,Fri Jul 17 12:58:46 2015 UTC,"babelify   I've updated the gulpfile, with what i've got there now... It hasn't made a difference to the file at all, even ran through a diff."
javascript,3dcp5h,jazzyjaffa,1 point,Fri Jul 17 00:05:12 2015 UTC,Are you running it through uglify?
javascript,3dcp5h,mindlessLemming,2,Fri Jul 17 12:59:07 2015 UTC,"If you specify the debug option, then yes, the file is huge.  I'm building a fairly sizable project with React + Babelify: in development, the file is pushing 4MB, but the production build is down around 650KB (170KB with gzip)"
javascript,3dcp5h,jazzyjaffa,3,Wed Jul 15 07:51:07 2015 UTC,"I've got 12MB in development, 2.3M in production. More than I'd iike, but then all those npm modules are soooo tasty."
javascript,3dcp5h,automathematics,7,Wed Jul 15 08:49:18 2015 UTC,O____o  time to investigate webpack chunking to load on demand?
javascript,3dcp5h,automathematics,1 point,Wed Jul 15 09:58:00 2015 UTC,Yeah.. thinking of making the jump to webpack anyway. Thanks for the extra prod.
javascript,3dcp5h,iSmokeGauloises,1 point,Wed Jul 15 13:04:36 2015 UTC,More info on your FE stack? I just finished our big react/flux project (with webpack + babel + ES6) and even factored out jquery completely. I'm still at 500KB. So I'm curious how many modules you're using!
javascript,3dcp5h,drunkenfaggot,1 point,Thu Jul 16 01:40:57 2015 UTC,Are you possible able to provide your build file for the JS?
javascript,3dcp5h,pertheusual,1 point,Thu Jul 16 23:56:28 2015 UTC,Assuming you meant me! Here's the production webpack config I'm currently using:  https://gist.github.com/framerate/2f1c04ed5d248d8f0343
javascript,3dcp5h,pertheusual,3,Fri Jul 17 00:14:39 2015 UTC,12MB in development   ಠ_ಠ how big is the project?
javascript,3dcp5h,floydophone,3,Wed Jul 15 11:35:27 2015 UTC,"Uh wtf?  That's not acceptable dude, lol"
javascript,3dcp5h,SirHound,1 point,Wed Jul 15 16:30:16 2015 UTC,Are you minifying the production build though?
javascript,3dcp5h,novacrazy,1 point,Wed Jul 15 16:48:33 2015 UTC,"Yeah, the problem isn't the obfuscation as much, its more the ES6 pollyfill babel functions, being spat into each of the ""file"" blocks. This line exists like 50 times through out the file ""Super expression must either be null or a function, not "" and its all part of that function.. Basically looking for a much cleaner build process i guess."
javascript,3dfmc4,rotaercz,3,Wed Jul 15 22:01:00 2015 UTC,"I would recommend these 3 (pick any that you like best and the future will be guaranteed :D)   React + (some flux library) Angular 2.x Ember 2.x   Component oriented, modular, build-systems friendly, big/mature teams, experienced/big communities."
javascript,3dfmc4,hadriandeoliveira,1 point,Thu Jul 16 05:16:08 2015 UTC,Thanks for the suggestions. Can you briefly tell me their differences?
javascript,3dfmc4,joenyc,2,Thu Jul 16 05:38:52 2015 UTC,"I'd recommend something like Browserify or RequireJS to organize and load code. Other than that, though, I'd just look things up as you need them."
javascript,3dfmc4,Evanescent_contrail,1 point,Wed Jul 15 22:01:53 2015 UTC,Thanks for the reply. I've never heard of those. Can you explain a little about what they do?
javascript,3dfmc4,jodraws,1 point,Wed Jul 15 22:04:19 2015 UTC,I'll throw on a vote for head.js. Small. It just works.
javascript,3demzw,adam_ay,1 point,Wed Jul 15 17:54:58 2015 UTC,ha. my laptop almost exploded when this site loaded. fans rotating at 7000 rpm (I didn't know it was even possible to go that fast).
javascript,3dfj3m,pro-tip,1 point,Wed Jul 15 21:36:50 2015 UTC,"What, no plasma and flames?"
javascript,3de301,voter101,1 point,Wed Jul 15 15:31:36 2015 UTC,XPost Subreddit Link: /r/reactjs
javascript,3dfefw,sthies,3,Wed Jul 15 21:03:13 2015 UTC,"Hi /u/sthies, it looks like you're new to reddit, welcome!   Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our guidelines. In short, you should post from a variety of sources, and not just sematext.com.  Thanks for your consideration!    domain submitted from count %    blog.sematext.com 12 100%"
javascript,3dfc1b,Xeon06,3,Wed Jul 15 20:46:58 2015 UTC,The older DOM searching functions getElementsByClassName() and getElementsByTagName() work that way too.
javascript,3dfc1b,Rhomboid,1 point,Wed Jul 15 21:22:05 2015 UTC,You might also like Matches. http://caniuse.com/#search=matches
javascript,3dd3up,AprilHigrim,1 point,Wed Jul 15 09:29:15 2015 UTC,"How did this get so many upvotes and no answers?  Anyway, personal opinion, jsFiddle sucks! Use CodePen instead.  Here: http://codepen.io/anon/pen/rVKQwW"
javascript,3dd3up,ForScale,2,Wed Jul 15 13:50:26 2015 UTC,I guess they liked the question :P  Thanks :)
javascript,3dd3up,ForScale,1 point,Wed Jul 15 21:42:58 2015 UTC,Anytime!
javascript,3dard2,ratchetxys,7,Tue Jul 14 20:43:33 2015 UTC,"What do you guys think? I feel like not many, if any, applied with ES6 solution. Is it the right way to use generators? Any improvements?  I would love to see some, or even just a simple review!"
javascript,3dard2,skitch920,20,Tue Jul 14 20:57:13 2015 UTC,"The only push-back I would give you, is don't modify the Array.prototype.     ""Don't modify objects you don't own."" - someone like 10 years ago   It may not be a problem for you on your own website, but as an example, Date.js modifies the Number.prototype which causes issues for d3.js.  It's little shenanigans like this that make Javascript developers pissed off.  Feel free to do it, if you understand the ramifications.  That being said, cool script.  I'd hire you."
javascript,3dard2,jkoudys,6,Wed Jul 15 01:30:39 2015 UTC,"Hah, I almost felt bad for watching the demo, seeing something clearly well thought through, but putting that niggling discomfort in my head to see someone modifying the prototype of Array.  imho there's only one acceptable time to modify a builtin global object: when you're shimming it. e.g. it's perfectly acceptable to set Object.assign to a function that implements what it would do, were the code running in es6. This is 100% acceptable if the proposal has been finalized, and okay too if it's not, but you're able to go back and update your shim and its callers in the event it does change."
javascript,3dard2,bwaxxlo,3,Wed Jul 15 05:29:22 2015 UTC,"What about:  Object.defineProperty(Array.prototype, ""newMethod"", {enumerable: false, value: function(){...} })"
javascript,3dard2,paperelectron,2,Wed Jul 15 09:17:07 2015 UTC,"The only push-back I would give you, is don't modify the Array.prototype like it was just some plain old object.   The GH issue you linked shows the correct method."
javascript,3dard2,alamandrax,8,Wed Jul 15 06:17:40 2015 UTC,"why use let to declare functions? declare them directly  let myFunc  = function (...) {     ... };   is better written as   function myFunc(...) {     ... }   You get named functions instead of anonymous ones, to boot."
javascript,3dard2,exomind,2,Wed Jul 15 06:23:50 2015 UTC,Because ES6
javascript,3dard2,ogrechoker,1 point,Wed Jul 15 09:29:44 2015 UTC,"It is a (early) ReferenceError to use a variable textually before its point of declaration (more specifically, initialisation). This restriction includes even functions, i.e., ""hoisting"" does not apply. The only exception is that mutual recursion between consecutive ‘function’ declarations, or (separately) between consecutive ‘class’ declarations, is allowed (essentially, they are treated as a letrec). For classes, forward references are only legal from within methods, and only if the referenced class does not have a (direct or indirect) backwards reference to the original class outside any method. [V partially]   Google ""Strong Mode"" strawman"
javascript,3dard2,ay_dizzle,1 point,Wed Jul 15 13:10:24 2015 UTC,Either way is fine. I usually prefer function expressions rather than declarations. See here for more info. I usually do named function expressions for easier debugging though.
javascript,3dard2,kenman,1 point,Wed Jul 15 09:07:39 2015 UTC,"While I agree with some of the points, I don't agree with some of the arguments.   a) Function Declarations feel like they were intended to mimic Java style method declarations but Java methods are very different animals. In JavaScript functions are living objects with values. Java methods are just metadata storage. Both the following snippets define functions but only the Function Expression suggests that we are creating an object.   So, avoid them because they *might* be confusing to someone with Java experience (and of course, little JS experience)? No thanks.   b) [...] If you want to create an anonymous function [...] you need a Function Expression.   Incorrect:  > new Function() < function anonymous()    b) [...] If you want to [...] assign a function to a prototype or as a property of some other object you need a Function Expression.   Also incorrect:  function Constructor() {} function method() {} Constructor.prototype.method = method; Constructor.prototype.slice = Array.prototype.slice;"
javascript,3dard2,ay_dizzle,2,Wed Jul 15 21:17:20 2015 UTC,"Yeah, sorry about that link, it's not great, I just wanted to give some points to consider. The original point of my reply, is that I believe either way is fine for the purposes of OP's exercise.   Personally, I suppose I don't like the way a function statement anywhere is basically a macro for writing a named function expression at the beginning of the scope, which is what that guy is talking about when saying it mimics Java syntax. Realistically though, I haven't found it to be an issue."
javascript,3dard2,gregersriddare,0,Wed Jul 15 22:07:18 2015 UTC,"Why?  Edit: Yes it's a one-word-question since that links examples are plain fucking stupid.  If you're even in that same situation it's not the code you should be worried about, it's your mental sanity or if you are inclined to hire ten-year-olds."
javascript,3dard2,x-skeww,5,Wed Jul 15 18:06:19 2015 UTC,"As others have already mentioned, don't mess with the built-ins.  There is a ""var"" in line 45.  I wouldn't use ""=== false"" with booleans.  You forgot a few semicolons (21, 26, 38, 72). I'd just use function declarations. The hoisting isn't a problem and it's less to type.  Using ""CALLBACK"" as the name for your main entry point is kinda odd. It isn't even a callback. Why is it all caps? Think about what this function does and then try to find a name which reflects this.  The width of the boxes should come from CSS.  Wrong type of quotes around ""Arial Black"" in the CSS tab. The quotes actually aren't needed in this case. Spaces aren't a problem."
javascript,3dard2,TheIncredibleWalrus,4,Wed Jul 15 06:38:31 2015 UTC,I'd hire you :)
javascript,3dard2,hahaNodeJS,1 point,Wed Jul 15 00:38:51 2015 UTC,"I would ask ""Why did you decide to write this using the ES6 spec?"" and curiously await your response."
javascript,3dard2,Zurlap,1 point,Wed Jul 15 19:33:14 2015 UTC,"To experience, I write code because I enjoy it"
javascript,3dard2,nodealyo,3,Wed Jul 15 20:30:56 2015 UTC,"A word of advice: Don't try to be too clever on a job interview.   I would say that this is the upper bound of cleverness that I would be comfortable with when interviewing a candidate, so you're alright here, at least if I was interviewing you. It shows a good understanding of new technologies and applies it in a sensible and appropriate, if unique, manner.  But, at the same time, something like this could send up warning flags for a more conservative interviewer. I've actually seen candidates rejected in the past for being too clever; the worry is that you'll be constantly trying to prove how intelligent you are and therefore you'll write tons of incomprehensible (and therefore: unmaintainable) code that nobody else can understand.   So, just be careful."
javascript,3dard2,Zurlap,0,Wed Jul 15 13:01:59 2015 UTC,That's kind of an unfair assumption.
javascript,3dard2,kenman,8,Wed Jul 15 14:12:14 2015 UTC,"To a point. It's based on past experience. We've had candidates dazzle us with their brilliance before, and then when they get hired, they create unusable monstrosities of software. There's a certain class of developers who are more interested in trying to impress everyone with how smart they are rather than being a team player.   We had one guy come in and move us off of our HTTP server and completely wrote his own. It was about 4% faster than the one we were using before, but the one he made was such an insane spaghetti mess that it completely sunk the entire product line when  he moved on and we tried to maintain it.   Another one created the largest and most generic CMS system I'd ever seen. Not a single line of SQL code in it, however, because the entire system used a massive network of SQL-generation code to do it for us. It was by all means brilliant, but the problem was that while he was brilliant, he also thought he was smarter than he actually was, and after a certain level of system complexity, the SQL queries became so intensely complex that they caused our product to grind to a literal halt once they surpassed a certain number of users. We lost a lot of customers over this ordeal, and the sheer amount of code he wrote was so vastly large and complex that we ultimately just threw it all out and started over with something simpler.  My ultimate failure, however, was the one guy I hired. I have a ""Kobayashi Maru"" (https://en.wikipedia.org/wiki/Kobayashi_Maru)"" test that I give my candidates. I won't go into the details here for confidentiality reasons, but it's as impossible of a problem to solve as you can get in computer science. I like giving it because it gives me an insight about how my candidates approach a problem they've never seen before; essentially it lets me examine their problem solving technique.  Now this one guy came in, took a look at the problem, and got hard to work. Most people get puzzled by it and sit there thinking for a long time; he just opened up his browser and got to work. His solution? He downloaded an open source compiler, modified the compiler to support the linguistic features that my problem required to solve, and then wrote his solution in his newly modified language.  By all means, this was the most brilliant solution I'd ever seen, and I made a point to make sure this guy got hired. I lobbied like I'd never lobbied before, and I was convinced we'd lose him if we didn't push hard. We got him, and unfortunately that ended up being a mistake. Every single thing he wrote was a monument to his ego. Whenever a sorting algorithm was needed, he'd write his own, claiming that the built-in Java sorts were too slow. He wrote his own JSON parsing code. In order to compare two date objects together, he built a gigantic SOAP web service to determine if one date happens before another. The solutions were technically complex; but they were always OVERLY complex. He was basically building complex things for the sake of making them complex.   We eventually had to let him go, and I voluntarily removed myself from the interviewing process after that debacle.   The bottom line is that cleverness can help, but excessive cleverness can set off some warning bells and indicate that the candidate may be one of the types of people who aren't interested in keeping things as simple as needed for a smoothly-functioning team."
javascript,3dard2,Zurlap,1 point,Wed Jul 15 14:57:24 2015 UTC,Thanks for sharing! I'll take that story with me
javascript,3dard2,davidf81,1 point,Wed Jul 15 20:37:09 2015 UTC,"Every single thing he wrote was a monument to his ego. Whenever a sorting algorithm was needed, he'd write his own, claiming that the built-in Java sorts were too slow. He wrote his own JSON parsing code.   I'll echo your warning, it's a very real thing that I've witnessed as well. Hired a guy that had a PhD in EE, IEEE software development cert, and was obviously very talented. Left in a silo, perhaps in R&D, is where guys like him shine, because in a team environment he was probably worse than hiring a fresh grad. I'm not sure I'd chalk it up to ego (he was very quiet and reserved), I just think he lacked the soft skills to realize the totality of the situation.  His code was so clever that even he had trouble debugging it after being away from it just a few days, much less anyone else. Without hesitation, he'd rewrite (or write his own) version of practically everything he touched, whether there were in-house or long-standing FOSS versions or not.   When tasked with refactoring a component, he invented his own MVVM micro-framework (and ""framework"" is stretching it, since it only catered to his very specific needs). The code was bullet-proof, met all the requirements, and had tests for everything. He also made all sorts of documentation (UML, wiki, etc.). Bugs weren't that bad to fix, once you found that one magical line that it was hiding in -- which could take the better part of a day. However, new features, which weren't supported by his framework, were a nightmare.   We removed/refactored as much of his code that we could soon after he left, due to maintenance reasons. Frankly, it was beautiful to see what he would come up with, but only until you realized that someone (other than him) would eventually be maintaining it."
javascript,3dard2,alamandrax,1 point,Wed Jul 15 21:33:16 2015 UTC,"he invented his own MVVM micro-framework (and ""framework"" is stretching it, since it only catered to his very specific needs).    Oh God. Was his name Alex by any chance?? :D"
javascript,3dard2,gypsy4,1 point,Thu Jul 16 01:14:50 2015 UTC,"The solutions were technically complex; but they were always OVERLY complex. He was basically building complex things for the sake of making them complex.   This is the definition of complication, imo, in terms of programming. Uncalled for complexity."
javascript,3dard2,alamandrax,3,Sun Jul 19 03:00:26 2015 UTC,"Can't you use destructors destructuring to swap easily?  [this[j], this[j + 1]] = [this[j + 1], this[j]];"
javascript,3dard2,gypsy4,2,Wed Jul 15 06:07:07 2015 UTC,"A perfect mid point between troll and informative...  Yes, you can use destructuring to achieve element swapping without creating a temporary variable."
javascript,3dard2,alamandrax,3,Wed Jul 15 06:51:42 2015 UTC,I don't think I was trolling. I used the commenting style I use at work when reviewing code. Suggest rather than mandate.
javascript,3dard2,x-skeww,1 point,Wed Jul 15 14:47:15 2015 UTC,"It wasn't the tone, it was the terminology. JS does not have destructors."
javascript,3dard2,alamandrax,1 point,Wed Jul 15 19:56:06 2015 UTC,oh right. i hate learning terminology. i should know this though.
javascript,3dard2,Something_Sexy,3,Wed Jul 15 19:57:21 2015 UTC,"without creating a temporary variable   ...yourself.  It's important to remember that it's not actually free.  Swapping two variables like this looks pretty nice:  let a = 1, b = 2; [a, b] = [b, a]; console.log(a, b); // 2 1   But, for items inside some array, it's just too messy. It's not an improvement.  With a virtual methods (ES7 maybe), you could write it like this:  import {swap} from 'my-funky-array-extensions'; ... array::swap(j, j+1);"
javascript,3dard2,Something_Sexy,1 point,Wed Jul 15 09:32:56 2015 UTC,"Tried that now, it give me an Error..."
javascript,3dard2,the_meme_grinch,1 point,Wed Jul 15 13:28:04 2015 UTC,Weird. I tried it in the codepen and it worked. Or at least I thought it did.
javascript,3dard2,utuxia,2,Wed Jul 15 14:40:44 2015 UTC,Did you white board this in the interview then added it to codepen to show us or did they ask you to do it and send them your solution?
javascript,3dard2,nschubach,3,Wed Jul 15 03:26:34 2015 UTC,They gave me couple of hours to do it at home
javascript,3dard2,thomasfoster96,1 point,Wed Jul 15 04:08:04 2015 UTC,"That is cool that they allowed you to do that, makes way more sense then trying to whiteboard a solution like this."
javascript,3dard2,CaptainInsane-o,2,Wed Jul 15 14:31:17 2015 UTC,"So, one thing, and it's really a nonissue for this example... but, know and understand the best css properties to animate. Instead of left, I'd suggest using transform since it doesn't cause layout renders and repaints which will really kill fps of your animations when things get much more complex. http://csstriggers.com/ for more info. Good luck."
javascript,3dard2,CaptainInsane-o,1 point,Wed Jul 15 03:32:06 2015 UTC,Thanks!
javascript,3dard2,check_ca,1 point,Wed Jul 15 13:30:27 2015 UTC,This is cool. Does anyone know of a javascript sorting library that implements the various sorting algorithms?
javascript,3dard2,fluoroamine,2,Wed Jul 15 03:11:35 2015 UTC,I wasn't aware that people still messed about with sorting algorithms.  I remember it being a 'thing' back in the 80s/90s because most languages and libraries didn't handle sorting for you and you pretty much had to roll your own.  Today though it feels more like it's just a way to flex the brain?
javascript,3dard2,simoncave,1 point,Wed Jul 15 10:23:21 2015 UTC,There's a bunch of (rather old) implementations on Rosetta Code: http://rosettacode.org/wiki/JavaScript
javascript,3ddus8,MorrisCasper,2,Wed Jul 15 14:29:16 2015 UTC,"The problem is inside the for block.  When you use for(var next in neighbors) {     // here ""next"" is a reference to the key of the ""neighbors"" array elements }  So inside the for block where you use ""next"" you actually want to use ""neighbors[next]"""
javascript,3ddus8,vlad27aug,1 point,Wed Jul 15 14:48:44 2015 UTC,Thanks a lot! Exactly what I wanted to know
javascript,3ddus8,SawyerDarcy,1 point,Wed Jul 15 16:56:42 2015 UTC,"Arrays should not be iterated with for-in, for one. Use a C-style for loop or the for-of loop.  In other situations, you could use functional Array methods such as .forEach, but in your case, that would disrupt your ability to yield in your generator."
javascript,3da4d1,Anon_8675309,19,Tue Jul 14 18:07:43 2015 UTC,Here you have 3 resources:   A nice free ebook about the DOM: http://domenlightenment.com/ Excellent free ebook about basics of Javascript (including a chapter about the DOM) http://eloquentjavascript.net/13_dom.html Paid Lynda course about the DOM: http://www.lynda.com/HTML-tutorials/JavaScript-Enhancing-DOM/122462-2.html   PS: and https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model for a detailed reference.
javascript,3da4d1,bnibbler,3,Tue Jul 14 18:41:00 2015 UTC,Thanks for the links.
javascript,3da4d1,MrBester,7,Tue Jul 14 19:47:42 2015 UTC,+1 for MDN
javascript,3da4d1,turgotZ1,7,Tue Jul 14 22:12:27 2015 UTC,I use these for reference  youmightnotneedjquery.com/ or plainjs.com
javascript,3da4d1,buttonkop666,6,Tue Jul 14 21:33:42 2015 UTC,"Really, MDN + caniuse.com pretty much covers everything. As someone who learned web development pre-MDN, I can't emphasize enough how absofuckinglutely amazing it is to have it around."
javascript,3da4d1,stickflickpick,-2,Wed Jul 15 03:32:01 2015 UTC,this
javascript,3da4d1,achen2345,5,Wed Jul 15 03:53:58 2015 UTC,"Enjoy! http://prettydiff.com/guide/unrelated_dom.xhtml  edit  Just want to say that I wrote this one, so if it isn't helpful please flame me so that I can improve it."
javascript,3da4d1,NodeMasterPro,2,Tue Jul 14 18:49:45 2015 UTC,"""Every JavaScript framework, library, and abstraction that accesses the DOM ultimately does so through the standard DOM methods.""  More people should be aware of this :)"
javascript,3da4d1,lontlont,2,Wed Jul 15 04:52:15 2015 UTC,"It's worth learning them all.  But also keeping in mind that they're generally terrible, and there's not much impetus to improve them atm. That's part of the reason frameworks came to exist in the first place, and continue to be popular."
javascript,3da4d1,etrom,1 point,Wed Jul 15 11:01:09 2015 UTC,"Oh, awesome. I'll check it out."
javascript,3da4d1,franker,2,Tue Jul 14 19:47:24 2015 UTC,I recently did this exact thing. My approach was to basically build everything in vanilla and spent lots of time in mdn looking things up. You would be surprised how much you can learn when you force yourself to build everything from scratch and not just plug and play with jQuery.
javascript,3da4d1,rbobby,2,Wed Jul 15 02:58:36 2015 UTC,"If you want some DOM exercises, the Smarter Way to Learn Javascript page has some (see numbers 58-68): http://www.asmarterwaytolearn.com/js/index-of-exercises.html"
javascript,3da4d1,lontlont,1 point,Wed Jul 15 20:08:33 2015 UTC,I would think the JQuery source might be a good starting point. The challenge in direct DOM manipulation are weird edge cases in individual browsers.
javascript,3da4d1,eorroe,1 point,Tue Jul 14 18:23:01 2015 UTC,True. Didn't think about jumping into the jquery source.
javascript,3da4d1,oculus42,1 point,Tue Jul 14 19:48:08 2015 UTC,"It's chock full of really neat stuff, though unfortunately a little harder to piece together now that's its proper and modular. The old single page annotated source versions are a great place to start though, as long as you keep in mind that they probably contain bugs and specific approaches potentially later abandoned.  Underscores annotated source is also a great read, even though I prefer lodash."
javascript,3da4d1,eorroe,1 point,Wed Jul 15 11:04:15 2015 UTC,"After you learn the native DOM APIs, I'd check out my small lib which will allow you to use those same APIs. Check it out. Only thing is its written in ES6 (which you can transpile with babel) but then again it's still using ES6 methods. TBH I don't think I'm going to rewrite it into ES5"
javascript,3da4d1,Mackinstyle,2,Wed Jul 15 02:08:34 2015 UTC,I'm curious: on what platform are you developing/testing pure ES6 DOM manipulation?
javascript,3da4d1,Mackinstyle,1 point,Wed Jul 15 03:06:41 2015 UTC,Chrome Canary
javascript,3da4d1,bart2019,0,Wed Jul 15 03:28:26 2015 UTC,"I can appreciate the merit behind doing this, ""just because it's good to understand the basics.""  But I'm curious, is there a practical reason you want this?"
javascript,3da4d1,double_integration,6,Tue Jul 14 23:03:43 2015 UTC,Why is manipulating the DOM in JavaScript impractical?
javascript,3da4d1,double_integration,2,Wed Jul 15 02:05:14 2015 UTC,"I'm saying that avoiding JQuery seems impractical. I'm curious why you would want to do so, to better understand times where I should consider it.  But as /r/dhdfdh said, apparently there's things that are significantly slower in JQuery, so that's one pretty evident reason."
javascript,3da4d1,double_integration,2,Wed Jul 15 02:28:25 2015 UTC,The goal isn't to ignore jquery nor is it to imagine myself building something better. The goal is to understand the interaction between javascript and the DOM better than I already do. I'm a fundamentals person. I need to know how things work. It's how I'm wired. Some people are content to just use a framework. That's fine. I need a deeper understanding than that.
javascript,3da4d1,double_integration,2,Wed Jul 15 03:24:08 2015 UTC,"How portable do you want it to be?  You can use fine native DOM methods available in the newer browsers, but they won't work in slightly older browsers. So if you're writing code for a real website, and not just for yourself, you're f*cked.  These DOM libraries, and that includes jQuery, are mainly intended to deal with the non-portability of DOM methods. At best, they switch to native methods if available ,and to emulation, if not."
javascript,3da4d1,bart2019,0,Wed Jul 15 07:57:01 2015 UTC,"I believe DOM manipulation, especially without the help of a framework like Angular or jQuery, can be a good way to inadvertently introduce cross-browser issues and unnecessary headaches. You can end up with a bunch of very specific IF conditions trying to manually update a value in browser X that doesn't work in browser Y...it makes things harder to understand. DOM manipulation at its core isn't something a developer should seek out, but rely on some tested method (like a framework) so you can feel at least mildly comfortable it might work as intended and it's presumably less ad-hoc."
javascript,3da4d1,achen2345,3,Wed Jul 15 03:02:52 2015 UTC,But that's like saying developers shouldn't understand assembly language. Of course they should. Nearly all just shouldn't use it.  Knowing fundamentals like how plain javascript interacts with the DOM is a good thing to know. It doesn't mean you have to ignore all the frameworks.
javascript,3da4d1,double_integration,1 point,Wed Jul 15 03:26:58 2015 UTC,"I'm in agreement with you about the learning, just trying to advocate that DOM manipulation isn't necessary on your own for the same reasons that releasing apps in assembly isn't. To the other point, it's generally not an acceptable solution...especially for a customer facing application. There's new tech out there to be taken advantage of that helps save time and headache. However, the basics you're learning will help you solve a problem you wouldn't otherwise with a framework. You don't have to manipulate the DOM by hand just because it's more manly...do what's easier to write and maintain."
javascript,3da4d1,achen2345,1 point,Wed Jul 15 05:04:10 2015 UTC,"Also, I guess it might be a difference in the end goal (requirements) and/or developer style. I'd rather spend my time worrying about code readability and accuracy than rebuilding the engine...if that makes any sense. I think this is probably difficult to accomplish if you're manipulating the DOM however you choose."
javascript,3da4d1,double_integration,1 point,Wed Jul 15 03:11:35 2015 UTC,My goal isn't to rebuild anything. It's simply to understand.
javascript,3da4d1,achen2345,1 point,Wed Jul 15 03:27:52 2015 UTC,For sure. I was just trying to heed warning that JavaScript DOM manipulation can get you into trouble when you're on your own. I'm sure it's a great thing to understand but it has the potential to make life hell without the safety net of some proven technology.
javascript,3da4d1,double_integration,1 point,Wed Jul 15 03:31:35 2015 UTC,"In that case, this page might be of some help: How to forget about jQuery and start using native JavaScript APIs (reddit thread)"
javascript,3da4d1,achen2345,1 point,Wed Jul 15 08:06:29 2015 UTC,"I believe DOM manipulation, especially without the help of a framework like Angular or jQuery, can be a good way to inadvertently introduce cross-browser issues   Like what?"
javascript,3da4d1,NotMyRealNameAgain,1 point,Wed Jul 15 03:13:12 2015 UTC,"This is a bad example, but let's say you change the DOM to set a particular element to invisible using DOM manipulation. Maybe the code hides the element in IE but it doesn't in Firefox because instead of setting it to invisible you need to actually set the width and height to zero. I totally made this example up, but that's the basic idea. One would hope that using a framework gives you the ability to just say element.hideyourself() and it works on both IE and Firefox with no special conditions. I know this isn't always the case, but it's intended."
javascript,3da4d1,buttonkop666,2,Wed Jul 15 03:24:09 2015 UTC,"The differences cross browser for the DOM (and this is really just IE8 and lower) are:   IE would not create DOM nodes for white space between tags, when the standard is to represent this as a text node. This is only problematic when walking between siblings and is easily accounted for by checking the node type. IE8 did not support the popular getElementsByClassName method.  You work around this though, but it took extra code.   Please don't use your ignorance to advocate not learning a foundational skill every JavaScript developer really should know."
javascript,3da4d1,Mackinstyle,1 point,Wed Jul 15 03:42:11 2015 UTC,1) I'm not ignorant. 2) You're not more bad ass for doing shit no one else can read. 3) I didn't tell the guy to not learn the skill.
javascript,3da4d1,dhdfdh,0,Wed Jul 15 05:06:54 2015 UTC,"2) You're not more bad ass for doing shit no one else can read.   This is a common newb complaint.  The readability of code is less important that the problem the code solves.  Bad code can always be refactored later, but clean code that doesn't direct address the problem is absolutely worthless.  Furthermore, code readability is completely subjective (particularly from someone who cannot understand the DOM)."
javascript,3da4d1,snarfy,1 point,Wed Jul 15 15:47:59 2015 UTC,"Coming from someone who hacks shit together and calls it a solution, your opinion isn't very highly regarded. Anyone can spend a few hours and hack a problem, but it takes finesse to make it production strength."
javascript,3da4d1,Mackinstyle,0,Wed Jul 15 16:40:12 2015 UTC,"but it takes finesse to make it production strength   I have had 120,000 NPM downloads in the last month and not from dependents.  There are less than 0.1% (probably less than that) of NPM modules that can make that claim.  Somebody must think the code is production strength.  https://www.npmjs.com/package/prettydiff  Once you have solved a challenging problem then perhaps we can resume this conversation. In the meantime I presume you are speaking from fantasies instead of experience."
javascript,3da4d1,utuxia,1 point,Wed Jul 15 19:05:14 2015 UTC,Some frameworks such as Angular recommend against using jQuery for DOM manipulation.
javascript,3da4d1,achen2345,1 point,Wed Jul 15 00:30:52 2015 UTC,"which is why jqLite is bundled with Angular, and directives provide a jqLite wrapped element in link functions, I presume?  /sarcasm"
javascript,3da4d1,utuxia,1 point,Wed Jul 15 05:02:58 2015 UTC,Ah.  Why?
javascript,3da4d1,achen2345,4,Wed Jul 15 00:34:20 2015 UTC,There is a list of jQuery things that are slower than doing it yourself.
javascript,3da4d1,utuxia,2,Wed Jul 15 02:02:57 2015 UTC,There is usually an Angular way of what you are trying to do. Most likely you want to update the model and let angular deal with the DOM.
javascript,3da4d1,double_integration,2,Wed Jul 15 01:27:14 2015 UTC,Ah. So presence of JQuery is a sign of an anti-pattern where you're subverting what Angular is trying to do in an Angular way.  Gotcha!
javascript,3da4d1,achen2345,-1,Wed Jul 15 02:28:56 2015 UTC,"Shouldn't be doing DOM manipulation these days, but checkout the book ""DOM Scripting""."
javascript,3da4d1,double_integration,1 point,Wed Jul 15 03:08:32 2015 UTC,Why not?
javascript,3da4d1,double_integration,1 point,Wed Jul 15 03:11:15 2015 UTC,Look at some of the MV* frameworks that are available now.
javascript,3da4d1,achen2345,-1,Wed Jul 15 03:12:29 2015 UTC,That is a pretty cryptic answer for asking somebody to ignore a foundational skill.  I recently got second place at a work hack day because I was able to throw together an additional tool in roughly 90 minutes.  I couldn't have done this if I were shackled to some bloated MVC insanity.
javascript,3da4d1,double_integration,3,Wed Jul 15 03:19:49 2015 UTC,Suit yourself.
javascript,3da4d1,double_integration,0,Wed Jul 15 03:25:48 2015 UTC,"People know what they know. I would turn a beginner to an MVC framework before I told them to go rewrite the DOM. Your 90 minute case probably doesn't stand up against most JS devs. I'd say a lot of us write JavaScript because we have to, not because we are strong in it and prefer it over a server side technology or a palatable JS MVC framework that takes something foreign into the realm of understanding."
javascript,3da4d1,utuxia,0,Wed Jul 15 03:44:31 2015 UTC,"before I told them to go rewrite the DOM.   What does that even mean?  You don't have to rewrite the DOM.  The DOM is provided to you by every browser with exactly the same API or by phantom.js for Node.  You just have to access the DOM which you would have to do anyways using a completely different (non-universal) API provided by a given MVC framework.   I'd say a lot of us write JavaScript because we have to, not because we are strong in it and prefer it over a server side technology or a palatable JS MVC framework that takes something foreign into the realm of understanding.   I read this and it sounds like you are apologizing for being a shit developer. I am sure this not what you meant and I doubt you are a crappy developer, but that is exactly what that statement says.  Incompetence is not a strong selling point.  Seriously... what are you suggesting?  That JavaScript is your primary life skill and means of income, but its too hard to learn a single API and find 2 hours in your life to practice it?  In the meantime go read why this line of thinking is an epic fail: http://prettydiff.com/guide/unrelated_rockstar.xhtml"
javascript,3da4d1,double_integration,1 point,Wed Jul 15 03:57:33 2015 UTC,"I didn't literally mean rewrite the DOM but by manipulating it, that's pretty much what you're doing.  I am not apologizing for being a poor developer, just trying to inform people that there's a reason why MVC frameworks are in place.  I'm suggesting that some people are into proven methodologies because they get the job done and others want to make it harder on themselves at typically a negative to small gain. You can learn a lot about development by writing everything in assembly language but that doesn't sell and I believe it's a waste of time."
javascript,3da4d1,icanevenificant,1 point,Wed Jul 15 04:12:59 2015 UTC,"Also, do you even code? You're throwing around these completion times and linking me to rockstar development articles. You sound more like a project manager."
javascript,3da6ks,sime,4,Tue Jul 14 18:22:43 2015 UTC,Tomorrow is a follow up post where the Edge team will detail their plans for implementing the web component specs in the Edge browser.
javascript,3da6ks,gypsy4,5,Tue Jul 14 18:24:23 2015 UTC,Microsoft has changed. I think they are now doing more good for the open web than Apple.
javascript,3da6ks,tarthon2,1 point,Wed Jul 15 07:00:05 2015 UTC,and that says a lot!
javascript,3da6ks,spankalee,1 point,Wed Jul 15 13:12:28 2015 UTC,This is great news!
javascript,3da6ks,bartturner,1 point,Wed Jul 15 01:25:29 2015 UTC,This is good to hear that MS is going to support web components.   They had been silent and it was not clear what they were going to do.  I was shocked initially that MS was coming out with a new browser and not support web components.   That just seemed crazy.  I would have thought that MS would have built their new browser to be the best browser for web components.   Their timing would have been perfect.   But since it does not support today it seems that this is just going to be an add on.
javascript,3da6ks,utuxia,1 point,Wed Jul 15 13:21:28 2015 UTC,"I'm excited to hear that MS will be support web components. My work is focused on the evergreen desktop browsers mostly and this will mean that we'll be able to use web components as our base level of ""componentisation"" in the UI in the not too distant future.  I strongly suspect that the Edge team have just been very busy this year getting Edge into shape especially with the Windows 10 deadline. That hasn't left them with much time to do announcements or future planning. We might see more blogs from them as I think the deadline for ""release to manufacturing"" for Windows 10 has arrived and some of the pressure may be gone now leaving room to catch up on other things. :-)  Also, don't forget that the Web Components specs are still being worked on and are not final quite yet."
javascript,3dcr4s,Guilemouse,4,Wed Jul 15 06:36:05 2015 UTC,"When you use the global flag, the regular expression becomes stateful — it remembers the string index of the last match (under the lastMatch property of the RE object) and uses that to begin matching there the next time because it expects you to call exec() multiple times to get each match in turn.  (The global flag means ""I'm interested in all matches"".)  In your session you first ran re.exec(ary[7]), which failed, leaving re.lastIndex at 0.  Then you ran re.exec(ary[6]) and it matched, which set re.lastIndex to 13 which is past the end of the string, i.e. the match consumed the entire string.  Then you ran re.exec(ary[6]) again a second time and that failed and returned null, because it was being asked to try to match something past the end of the string.  That also resets lastIndex back to 0, since it's what happens after you've gotten the last match.  Then you ran re.exec(ary[6]) a third time and it matched because lastIndex was reset back to the beginning by the previous call.  Without the global flag, the matching is not stateful.  As a side note, I don't understand why you're splitting this string and then trying to match a RE to each word.  If you want to find the emoticons, just do this:  var text = 'Hello :foo: world :bar: test :baz:'; var emotRe = /:(\w[\w\d]+):/g; while((match = emotRe.exec(text))) {     console.log('found emoticon %s at index %d', match[1], match.index) }   If you want to replace them with images, use a callback function with the replace() string method:  var text = 'Hello :foo: world :bar: test :baz:'; var emotImgs = {foo: 'http://example.com/foo.gif',                 bar: 'http://example.com/bar.gif',                 baz: 'http://example.com/baz.gif'}  var newText = text.replace(/:(\w[\w\d]+):/g, function(match, emot) {     if(emot in emotImgs) {         return '<img src=""' + emotImgs[emot] + '"">';     } else {         return match;   // no change     } });"
javascript,3dcr4s,Rhomboid,1 point,Wed Jul 15 07:13:25 2015 UTC,"Using exec along with the /g flag finds the next instance until there are none left.  > ar rx = /./g; > var str = 'abc'; undefined > rx.exec(str); [""a""] > rx.exec(str); [""b""] > rx.exec(str); [""c""] > rx.exec(str); null > rx.exec(str); [""a""] > rx.exec(str); [""b""] > rx.exec(str); [""c""] > rx.exec(str); null   It's meant to be put into a loop:  while( result = rx.exec(str) ){ ... }"
javascript,3dcr4s,ZyklusDieWelt,1 point,Wed Jul 15 06:54:53 2015 UTC,"Thank you! That explains it.  Wait a minute.  Why doesn't this work then...  > var ary = [""a1"", ""a2"", ""a3""] undefined > ary [ 'a1', 'a2', 'a3' ] > rx = /./g; /./g > rx.exec(ary[0]) [ 'a', index: 0, input: 'a1' ] > rx.exec(ary[1]) [ '2', index: 1, input: 'a2' ] > rx.exec(ary[2]) null   is it because it's going through the array's string index?  As in ary[0][0] ary[1][1] ary[2][2] (where ary[2]'s length is only 2)  Looks like it, lol, this is very weird. Thank you for the fast response and the examples :D"
javascript,3dcr4s,kenman,1 point,Wed Jul 15 06:58:20 2015 UTC,"It appears as though it doesn't care if the input changed, it's keeps the same previous index to start from."
javascript,3da3e2,Widdershiny,5,Tue Jul 14 18:01:12 2015 UTC,"great talk. observables are really interesting, and its really true that when you start thinking about everything as a stream everything gets really simple to reason about.  remember: everything is a stream"
javascript,3da3e2,bobertian,2,Wed Jul 15 09:02:54 2015 UTC,"It is really hard to get adjusted to that code, I'm just not clicking with it. Is it because it was written by a backend engineer with not a lot of previous frontend experience trying to make up the perfect UI framework that fits his style?"
javascript,3da3e2,drowsap,5,Wed Jul 15 04:33:09 2015 UTC,"Cycle.js only really clicked for me after I typed out all of the examples and then made a small example of my own. If you're interested in coming to grips with this style of coding, that's definitely what I would suggest as a starting point.  It might also be worth checking out the framework author's (Andre Staltz) introduction to reactive programming with observables."
javascript,3da3e2,josepedrodias,3,Wed Jul 15 05:50:51 2015 UTC,"I completely agree. Did just that yesterday - rewrote basic examples wo/ ES6, took some notes too: My Cycle.js GIST"
javascript,3da3e2,ArseAssassin,2,Wed Jul 15 09:18:18 2015 UTC,It has more to do with pure functional programming which is is rarely if ever used in the back-end. Other FRP libraries include Bacon.js and rx.js.
javascript,3da3e2,Taconut,2,Wed Jul 15 07:43:06 2015 UTC,"Excuse my ignorance with the command line, but what on earth is using as his text editor? I want it!"
javascript,3da3e2,Taconut,4,Wed Jul 15 06:18:29 2015 UTC,"Hi. I gave this talk. I am using neovim as my editor, with zsh as my shell and tmux as the beautiful glue that holds it all together.  My entire setup is my dotfiles repo. Here's my vimrc.  Ask me any more specific questions about my setup if you like. Also maybe read The Text Triumvirate."
javascript,3da3e2,DanielFGray,1 point,Wed Jul 15 10:27:38 2015 UTC,"Thanks! I was going to learn emacs first, but you've converted me. Finally the initiative I need to learn vim!"
javascript,3da3e2,ArseAssassin,1 point,Wed Jul 15 16:00:52 2015 UTC,"Alternatively, try emacs-evil!"
javascript,3da3e2,NervosaX,1 point,Wed Jul 15 20:31:14 2015 UTC,Looks like vi to me.
javascript,3db1c8,FPSJosh01,2,Tue Jul 14 21:53:42 2015 UTC,"This seems very nice from what I can tell. It seems to be unusable with Webpack, though:  ERROR in ./~/e2d/index.js Module not found: Error: Cannot resolve module 'bulk-require' in ./node_modules/e2d @ ./~/e2d/index.js 3:11-34"
javascript,3db1c8,clessg,2,Wed Jul 15 02:16:55 2015 UTC,"I'm so sorry! I forgot about the fact that bulk-require doesn't work with Web pack.  Give me 24 hours and I'll submit a bug fix.   In fact, it may be best to use the standalone build at require('e2d/dist/e2d') as a workaround for now."
javascript,3db1c8,clessg,2,Wed Jul 15 05:26:16 2015 UTC,"Thank you very much, good sir! :)"
javascript,3ddsy6,Kpervs,5,Wed Jul 15 14:14:38 2015 UTC,"Ask yourself what happens when you have more than 1 row.  ...  ...  Answer: If I read it correctly you'll have multiple ""del()"" functions, and multiple buttons all trying to call ""del()"".  Are you allowed to have multiple functions with the same name?  No.  And even if you could how do you expect to identify which one your button is actually meant to call.  Stick your delete function outside of the loop, and provide the id as a parameter to the function.  Then on each onclick you specify the $FileID as the param to your del call."
javascript,3ddsy6,GlowInTheDarkDonkey,1 point,Wed Jul 15 15:28:34 2015 UTC,"See I figured that was the case, but I stuck it outside the loop and for some reason it was not being found either. So I stuck it back in there before putting it back on Stack.  EDIT: Also, how do I pass a PHP variable into the javascript function? I've been having a little trouble with doing that. I hear that I need to use JSON? EDIT #2: Here is the change that does not seem to work either. I also tried adding the script outside the <?php ?> section altogether, and it still did not work."
javascript,3ddsy6,GlowInTheDarkDonkey,2,Wed Jul 15 18:43:08 2015 UTC,"You are going about this all wrong.  If you are just going to reload the whole page anyway, which you do on lines 16 and 31, then fuck the AJAX.  Just use a Form element and POST some signal to your page.  Then the first thing you do in whatever php file all of this stuff is in is check for any POST keys and react to any found signals.  Then just spew the rest of the page as normal.  In this way you are doing some update, then rendering the page after this update has taken place so it WILL be the most up-to-date version of the data.  Using AJAX is just redundant if you are just going to reload your whole page anyway.  Also, as the other guy mentioned about heredocs, you may wish to use them instead of spewing a big load of text starting from line 58.  It'll make things a bit neater and possibly easier for you.  Line 80... onclick='del($FileID)'  Since you are using double-quotes from line 58 instead of single quotes any php vars will be evaluated within the string when they are found.  You don't have to jump out of the string to start emitting the value of a php var.  Same difference with heredocs and nowdocs.  That's about all I have noticed so far.  Other than you haven't mentioned any console errors to help aid debugging this.  But I think this should catch most of your issues anyway."
javascript,3ddsy6,andersevenrud,1 point,Thu Jul 16 05:33:38 2015 UTC,"See thats the thing. I was originally reloading the whole page with a header at the end of the file. This part is meant to be included on another page and the AJAX is meant to send to delete.php, then reload ONLY the table. This allows for the page to not change, as I had a user make a statement regarding why the page didnt reload on file submission but did when you deleted files. The location.reload() bit was just there because it seemed to work for a bit, then decided it didn't want to. I still am going to use $('#fileTable').load(document.URL + ' #fileTable');"
javascript,3ddsy6,andersevenrud,2,Thu Jul 16 15:08:33 2015 UTC,/u/GlowInTheDarkDonkey is right (why was he downvoted?). Here is a version of the script with the things he commented on:  http://pastebin.com/vn20UQYq edit fixed a typo
javascript,3d9ip4,harrypotterthewizard,4,Tue Jul 14 15:38:26 2015 UTC,The only tricky part about autotesting your web browser is deciding what to use.   I don't think you have actually tried autotesting a web browser.
javascript,3d9ip4,EyeAmAhEr,2,Tue Jul 14 19:58:31 2015 UTC,maybe checkout http://ponyfoo.com/articles/testing-javascript-modules-with-tape
javascript,3d9ip4,serapath,1 point,Tue Jul 14 22:12:12 2015 UTC,"You missed out Webdriver.io when talking about controlling browser actions in selenium. Its similar to nightwatch, I've been using it in work and found it pretty good!"
javascript,3dd6ka,ThomWright,2,Wed Jul 15 10:07:27 2015 UTC,"As a mocha user who has yet to use Tape I'm on the fence on this, but I'm ready to be convinced. Thoughts?  I didn't screw up the link this time..."
javascript,3dd6ka,wtfizzle,3,Wed Jul 15 14:36:20 2015 UTC,"My personal take is that the arguments against Mocha were incredibly weak, and after looking at the syntax for Tape, I'll pass.  Too Much Configuration: He complains about the configuration required for Mocha, which he dramatically exaggerates.  You literally have to run npm install mocha expect.js (or replace expect.js with whatever you prefer) and you're good to go.  I don't see having a choice as a bad thing, and you only have to make that choice once.  Globals: It's true that Mocha pollutes the global namespace, and this is a somewhat valid complaint - but if you are relying on global variables, you probably have bigger issues than your testing framework.  Shared State: I generally avoid beforeEach and afterEach, but I'm not sure I agree that they promote sharing of state between tests.  Let's say you are testing a dropdown UI component, and it appends its menu to the body (a pretty common practice).  You probably want to include a step after each test to empty the body and make sure you are starting fresh (or this can happen in beforeEach).  Likewise, if your component does something like adding events to the body, you'll want to make sure those are cleaned up as well.  These help solve the problem of the DOM being inherently shared between tests.  That being said, you can also simply opt to not use them if you so desire."
javascript,3dd6ka,g00glen00b,2,Wed Jul 15 16:38:51 2015 UTC,"I had exactly the same thought. Making a point of having too much configuration seems like a really weak argument. If you're developing a large project, you're probably already using Grunt or Gulp, so it would be ridiculous not to have your tests ran from within your build tool.  Indeed, the globals argument is another one I was quite confused with. He says that it's bad to pollute the global namespace with describe and it, which is probably true... but then he also says it might be conflicting with your code as well, which can only be true if you were polluting the global namespace by yourself as well, and thus you already have bad code... .  I'm using beforeEach for the other way around. I reset all mocks and state of the module I'm testing in each beforeEach(), so effectively clearing state before running a test."
javascript,3df2qm,daliwali,12,Wed Jul 15 19:42:17 2015 UTC,"Facebook JavaScript infrastructure engineer here. I was the first to start using Babel (6to5 then) at Facebook and I'm currently driving it's adoption across the company. I was not only impressed by Sebastian's technical chops but more so his stewardship of the project. And although he was very open to our contributions and feature requests -- whenever one of our needs conflicted with the community's needs we chose to fix/hack the issue at our end. As an example, the enormous number of ES6 classes code written at FB is based on a very early spec, and when I raised the issue with Sebastian, we discussed many options for adding support for it. But in the end, it was clear that we needed to use the plugin API to fork the transform. I think we were one of the first users to request and use the plugin API.  There are many examples like that. In fact, there are many examples across our different open source projects where I think we balance the community's needs against ours pretty well. As an example -- although Facebook moved away from PHP to Hack we still support PHP in HHVM. Another example, that I was personally was involved in, is the amount of work we put in to make React Native work with npm and node_modules (FB uses our own flavor of CommonJS).  To sum up we have no interest in ""putting pressure"" on Sebastian or Babel, we understand that it's in everyone's interest if the project evolved independent of any one company's needs."
javascript,3df2qm,amasad,10,Thu Jul 16 00:04:43 2015 UTC,You might be better off proposing a plugin system for babel so that the facebook extensions can live outside the project and so that babel can focus on es6 compliance without a bunch of extra JSX cruft.
javascript,3df2qm,SubStack,8,Wed Jul 15 21:38:17 2015 UTC,"Babel has a plugin system, just not for the parser which would be the blocker."
javascript,3df2qm,thejameskyle,-2,Wed Jul 15 22:44:21 2015 UTC,"JSX and Flow are implemented as ""plugins"" internally but there's only experimental support for them and also they're still coupled with the internal implementation."
javascript,3df2qm,Cody_Chaos,1 point,Wed Jul 15 22:15:08 2015 UTC,"So where's the pull request where you've polished up the plugin support and decoupled JSX and Flow from the rest of Babel?  This has nothing to do with Facebook or Babel; it has to do with you aggressively violating the norms of FOSS projects in a way that helps no one and fixes nothing.  Edit:  Due, it turns out, to an unreasoning hatred of Facebook.  Sorry dude, nobody else cares about your crusade.  Even those of us who don't use Facebook (the product) and dislike Facebook (the company)."
javascript,3df2qm,Cody_Chaos,-1,Thu Jul 16 05:12:21 2015 UTC,"That would take magnitudes more effort to fix babel's implementation.    aggressively violating the norms of FOSS projects   boundaries exist to be pushed, and there is nothing in the licensing that prevents me from doing so.  most people won't even passively resist facebook, but what's dumb is that they will support facebook even if doing so does not benefit them in any way."
javascript,3df2qm,Cody_Chaos,2,Thu Jul 16 07:18:00 2015 UTC,"That would take magnitudes more effort to fix babel's implementation.   Yes, actually doing something productive is hard.  Making impractical suggestions that don't fix anything—as you are doing—is easy.   boundaries exist to be pushed   You must be an absolute joy at parties."
javascript,3df2qm,dominotw,-2,Thu Jul 16 21:52:54 2015 UTC,i think it's productive to remove cruft.  you must be an absolute bore at parties.
javascript,3df2qm,thejameskyle,1 point,Thu Jul 16 22:07:28 2015 UTC,"From wikipedia:   Cruft is jargon for anything that is left over, redundant and getting in the way.   As has been explained to you at length, JSX support in Babel is not redundant, nor is it getting in your way.  It's not cruft; it's just a feature you personally don't feel like using that has no impact on you."
javascript,3df2qm,clessg,1 point,Thu Jul 16 22:17:51 2015 UTC,Can you create your own plugin and throwing an error when jsx tag is encountered?  I guess I don't really understand why you are trying to do this.
javascript,3df2qm,thejameskyle,9,Wed Jul 15 23:16:51 2015 UTC,"Here you go  export default function({ Plugin }) {   return new Plugin('fuck-jsx', {     JSXElement() {       throw new Error('fuck jsx bruh');     }   }); }"
javascript,3df2qm,thejameskyle,2,Wed Jul 15 23:27:07 2015 UTC,Here you go.
javascript,3df2qm,thejameskyle,3,Thu Jul 16 00:22:04 2015 UTC,I see you noticed my mistake
javascript,3df2qm,thejameskyle,-3,Thu Jul 16 00:40:45 2015 UTC,"Very funny. it saddens me that you think sticking it to facebook is a joke. it's not, nobody but their cronies has anything to gain from trusting them, and they have everything to gain from the blind trust of their useds."
javascript,3df2qm,thejameskyle,7,Thu Jul 16 00:56:09 2015 UTC,"Not a joke, just a ridiculous reasoning.  For the record I'm very critical of Facebook, their real name policy is a personal issue for me.  But we're not talking about Facebook here, we're talking about a community of developers. Companies like Khan Academy use React, companies that are doing great and meaningful work. Those companies have developers who choose tools they did because they thought it would make them more productive.  This community now depends on Babel, and those are the people you are saying ""fuck you"" to"
javascript,3df2qm,gaearon,-6,Thu Jul 16 01:02:19 2015 UTC,"I would not assume that facebook acts in good faith in the dev community, when it is very clear from everything else that they do is highly exploitative of their useds. what is a useful idiot?  ultimately if nobody wants a babel fork with less features then so be it, i just wanted to gauge interest. if it's unpopular fine, no need to release it, less for me to do."
javascript,3df2qm,thejameskyle,6,Thu Jul 16 01:19:01 2015 UTC,"Do you know any of the open source folks at Facebook? They aren't some evil entity, they are a group of really smart people who want to make really great technology."
javascript,3df2qm,aequasi08,-2,Thu Jul 16 01:24:19 2015 UTC,"I did not say that the people who work on open source at facebook are evil, but rather that they are voluntarily working for a shady company that exploits the trust of their useds."
javascript,3df2qm,RReverser,3,Thu Jul 16 01:39:21 2015 UTC,"Now we get to the real issue, you just hate Facebook. Not eliminating 20k lines of code, not developer happiness, not better maintainability. Just good ole fashioned corporate conspiracy FUD.  Go ahead and fork, it'll be out of date and irrelevant in a week."
javascript,3df2qm,thejameskyle,10,Thu Jul 16 03:45:27 2015 UTC,"Babel contrib here.  You're missing some context, and that context is the parser. It's extremely difficult to implement ""plugins"" for a parser in any sort of efficient way (although Acorn and Babel have been trying to for awhile).  Also, having support for JSX and Flow has been HUGE to growing adoption and uniting the community around a single tool instead of having 8 different options that few people truly understand. Facebook has been extremely supportive of Babel and is helping out in no small way.  Feel free to fork Babel, you can do whatever you want this is the nature of open source. There's just no way you'll ever keep up with Babel's speed of development."
javascript,3df2qm,RReverser,-3,Wed Jul 15 22:42:03 2015 UTC,"Thanks for the input. I really don't care for having JSX and Flow and this idea is just for people who also don't care for these features either. IMO I would prefer these features to be out of core, and not just in a stick it to Facebook way, but also because they're non-standard additions to the language. If Babel just did ES6+ to ES5 transpilation and implemented JSX and Flow as external plugins, I'd be happy with that."
javascript,3df2qm,gaearon,3,Wed Jul 15 23:01:10 2015 UTC,"What is ES6+? Does async/await or “bind” syntax count? What if some ES7 proposal is on an early stage, but requires a parser change (which currently requires it to be inside the core)? Does this mean Babel parser shouldn't support it because it's not official?"
javascript,3df2qm,gaearon,5,Thu Jul 16 00:16:43 2015 UTC,"If Babel just did ES6+ to ES5 transpilation and implemented JSX and Flow as external plugins, I'd be happy with that   As I said that's currently impossible because of the parser.  It sounds like you want to create a developer nightmare just to not need to use a flag."
javascript,3df2qm,floydophone,6,Wed Jul 15 23:31:47 2015 UTC,It sounds like you want to create a developer nightmare just to not need to use a flag.   Indeed.
javascript,3df2qm,_benlesh,1 point,Wed Jul 15 23:36:42 2015 UTC,"Well, FWIW it's not ""impossible"" as JSX already exists as separate parser plugin (https://github.com/RReverser/acorn-jsx) and is used inside of Babel as such. It's just not reasonable to move it out."
javascript,3df2qm,thejameskyle,3,Thu Jul 16 09:37:03 2015 UTC,"Sorry, currently impossible to write parser plugins within babel plugins"
javascript,3df2qm,_benlesh,0,Thu Jul 16 15:02:22 2015 UTC,That sounds fair :)
javascript,3df2qm,thejameskyle,7,Thu Jul 16 22:01:17 2015 UTC,"Open source code does not exist because somebody is smart enough to have written (or forked) it.  It exists because there is a community of people using it, and there is also a small group of people (often a single person) putting their sweat and mornings and evenings and days and often partly nights into it. Which is neither healthy nor right, but I'm just trying to not sugarcoat it. Open source is not code, it's people.  Some forks have worked out because they offer significantly better value. IO.js over Node.js, Lodash over Underscore. They offered something new (testability, adoption of new features, different forms of decision making) that was valuable enough to split the community.  Throwing away a bunch of code that lots of people use every day, and that contributed significantly to project's adoption by said community, with no real alternative for those people, is counter productive. You can try it, but unless you offer a greater value than “we don't have this flag and thus related code”, it's just spreading FUD and hurting the effort Babel has been doing so far in uniting the JS community with a single tool.  Do you think you're going to do a better job of maintaining JSX-less Babel and porting bugfixes? Do you intend to do this with the same speed and reliability as the few Babel contributors? Or do you want to dump the code for code's sake? Because, in open source, the code is little, community is everything. Even Apple has learned this by now.  My humble thinking is that your effort can be better placed in helping Babel split out non-core stuff and learning why this is hard to do, and how you can help.  (Opinions are my own lol.)"
javascript,3df2qm,_benlesh,-1,Wed Jul 15 23:39:04 2015 UTC,"maybe i am underestimating but there wouldnt be much of a maintenance burden, it could even be automated by a shell script that rebases from upstream and only requires intervention on conflicts. i certainly didn't expect removing code in a fork to be so controversial, and you know what, it is easier than fixing the parser implementation in babel. i have reiterated to the point of sounding like a broken record, if babel separated non-standard from its core, i wouldn't rip out facebook code because there'd be nothing to rip out."
javascript,3df2qm,thejameskyle,3,Thu Jul 16 00:25:52 2015 UTC,"it could even be automated by a shell script that rebases from upstream and only requires intervention on conflicts   You should give it a try. ;-)   it is easier than fixing the parser implementation in babel   Removing something that isn't perfect but is used by people is always easier than working with the community to fix it.   if babel separated non-standard from its core, i wouldn't rip out facebook code because there'd be nothing to rip out.   Then help make this happen."
javascript,3df2qm,skeeterbug84,12,Thu Jul 16 00:35:01 2015 UTC,"So since nonStandard is an option, this idea is primarily about sticking it to FB and not actually solving a specific problem, right?"
javascript,3df2qm,thejameskyle,5,Wed Jul 15 21:47:59 2015 UTC,"this idea is primarily about sticking it to FB    I like to think of it as being about sticking it to patent trolls...  ... wait, I might be in the wrong thread. :P  (I kid, I kid)"
javascript,3df2qm,skeeterbug84,-3,Wed Jul 15 23:17:22 2015 UTC,"Sure, it's about sticking it to FB, but also removing 20k lines of unused code. What's wrong with that?"
javascript,3df2qm,gaearon,7,Wed Jul 15 22:16:13 2015 UTC,"The size of code affects 0 people, that's whats wrong"
javascript,3df2qm,thejameskyle,4,Wed Jul 15 22:45:29 2015 UTC,"Oh yeah? npm install babel ... on a plane.   Maybe this fork could be called ""babel-for-people-on-planes""?"
javascript,3df2qm,thejameskyle,4,Wed Jul 15 23:24:40 2015 UTC,npm install babel-core   The CLI is actually the largest part
javascript,3df2qm,thejameskyle,7,Wed Jul 15 23:34:40 2015 UTC,I think you're just trying to trick me into installing Facebook spyware.
javascript,3df2qm,pertheusual,6,Wed Jul 15 23:41:22 2015 UTC,No comment
javascript,3df2qm,gaearon,0,Wed Jul 15 23:43:58 2015 UTC,"Surely there are bugs in those 20,000 lines that could affect people, no?"
javascript,3df2qm,aequasi08,6,Wed Jul 15 22:57:40 2015 UTC,"Actually (in 99% of cases) no. Different AST nodes, different code path, different bugs."
javascript,3df2qm,pertheusual,0,Wed Jul 15 23:01:09 2015 UTC,"Let me put it another way. The developers spend more time fixing non-standard defects, so that means they spend less time on standards. It is still 20,000 lines for the maintainers of the project.  EDIT - Not saying I would use the fork, but I can see where it is coming from."
javascript,3df2qm,aequasi08,6,Wed Jul 15 23:04:06 2015 UTC,"The developers spend more time fixing non-standard defects, so that means they spend less time on standards.   Do you actually think that most Babel bugs are related to JSX/Flow, and that most of the maintenance time is spent on them?  A glance at the Babel issue list tells it's remote from truth.  Also 49 open to 1590 closed issues ratio says the project doesn't have maintenance focus problems as you imply."
javascript,3df2qm,aequasi08,5,Wed Jul 15 23:12:26 2015 UTC,"JSX is very little to maintain at this point. Btw, the 20,000 lines isn't a real number... Babel itself isn't that big."
javascript,3df2qm,skeeterbug84,-2,Wed Jul 15 23:29:13 2015 UTC,"the number comes from my private fork where i removed everything related to FB code including stuff like tests, it's not an unreasonable number."
javascript,3df2qm,dominotw,4,Wed Jul 15 23:40:01 2015 UTC,Sounds like you're artificially inflating the number to make it sound better
javascript,3df2qm,aequasi08,-2,Wed Jul 15 23:46:03 2015 UTC,"believe what you want. whether it's 20,000 or 2,000 loc, it's not a trivial number."
javascript,3df2qm,dominotw,0,Thu Jul 16 00:17:58 2015 UTC,"The size of code affects 0 people   hundreds of thousands of lines of code is not a maintenance burden, i get it now."
javascript,3df2qm,ilmmad,3,Thu Jul 16 01:03:55 2015 UTC,"It is a maintenance burden, luckily facebook hired /u/sebmck to work on it full time.  Also... again with the bullshit numbers bro."
javascript,3df2qm,aequasi08,13,Thu Jul 16 01:06:25 2015 UTC,"Generally I'd expect that if you don't want to use jsx and such, you just wouldn't use it, or you'd blacklist it. It's not clear to me what a fork would offer."
javascript,3df2qm,thejameskyle,-4,Wed Jul 15 20:34:35 2015 UTC,"Blacklisting FB features is as easy as ""nonStandard"": false, but I think that it doesn't go far enough. There will still be conditional checks for this every time you compile, and still the option to turn it on and get non-standard features out of the box. For example, if I see that a project uses this fork of Babel, I can be 100% sure that there are no non-standard extensions in the codebase, since the code paths will be removed."
javascript,3df2qm,aequasi08,3,Wed Jul 15 21:16:07 2015 UTC,"Can you also be sure that this fork will also merge upstream bugfixes and improvements? Because that's a huge amount of work totally unrelated to JSX, which you should know if you've been following Babel for while."
javascript,3df2qm,aequasi08,3,Wed Jul 15 23:03:01 2015 UTC,"whats wrong with a conditional, and a notice saying that a project uses only stardard features of ES6? This seems like a lot lot lot of extra work for almost literally no gain."
javascript,3df2qm,aequasi08,-4,Wed Jul 15 21:18:59 2015 UTC,"If you consider the removal of 20k lines of code to be ""literally no gain"", you're right, it's a huge loss!"
javascript,3df2qm,gaearon,5,Wed Jul 15 22:18:23 2015 UTC,"If the code were bad or buggy, I'd probably agree, but as far as I know, it's not. It just doesn't seem worth it to me to try to build a whole separate community around a fork. I can't help but feel like you'd have a very hard time getting people to use a fork over Babel.  One day when Babel is pluggable enough, it will probably be able to split out Flow and JSX, but it's not there yet. I'd assume the reason Sebastian and everyone else here has reacted so negatively is because your response has essentially been to say ""fuck you, I'll just do it myself"", instead of trying to have a constructive conversation, which is a very anti-community response for someone claiming they want to build a new fork and their own community."
javascript,3df2qm,_benlesh,-1,Thu Jul 16 00:20:26 2015 UTC,"I don't want to split up the ""community"" in any way, all I'm asking for is less features. it's not some altruistic thing, even if i were the only beneficiary it's worthwhile for me."
javascript,3df2qm,rfunduk,5,Thu Jul 16 00:49:33 2015 UTC,how is it beneficial for you?
javascript,3df2qm,RReverser,3,Thu Jul 16 03:55:57 2015 UTC,Does the size of babel affect your published code?
javascript,3df2qm,thejameskyle,0,Wed Jul 15 22:32:00 2015 UTC,It could have affects on compile times and compiler defects though.
javascript,3df2qm,i_ate_god,7,Wed Jul 15 23:01:20 2015 UTC,That would be totally different issue though. Babel is neither slow nor buggy.   If removal of 20k lines speeds up the product then I am on board but OP never made any such claims. He just want to fork because babel is giving him too much  :P
javascript,3df2qm,Oeb25,-1,Wed Jul 15 23:15:34 2015 UTC,"Exactly, I actually want a Babel with intentionally less features! Yet it's controversial, and it is in no small part due to the party involved here (Facebook)."
javascript,3df2qm,Cody_Chaos,2,Thu Jul 16 00:43:42 2015 UTC,why...?
javascript,3df2qm,Cody_Chaos,-1,Thu Jul 16 00:49:55 2015 UTC,due to the party involved here (Facebook).   Ah.  I see it now and I totally agree with you here. Facebook is a bad actor in the open source world.
javascript,3df2qm,Cody_Chaos,4,Thu Jul 16 00:49:32 2015 UTC,Facebook is a bad actor in the open source world.   It is? How?
javascript,3df2qm,Cody_Chaos,2,Thu Jul 16 04:26:05 2015 UTC,"hardly, its a simple conditional whether it runs a section of code or not. It shouldn't affect compile times, and if it doesn, theres another issue."
javascript,3df2qm,aequasi08,2,Wed Jul 15 23:32:28 2015 UTC,"It's not really even a conditional, if you don't have any jsx nodes in your AST then it will never hit the jsx code. It's not like it's mixed in throughout the codebase."
javascript,3df2qm,aequasi08,2,Thu Jul 16 00:12:26 2015 UTC,"""Oh hey PHP, i dont use arrays, so i'm gonna fork PHP remove all the array code, and use that."""
javascript,3df2qm,aequasi08,0,Thu Jul 16 00:53:04 2015 UTC,pretty bad analogy. arrays are standard php.
javascript,3df2qm,SavishSalacious,3,Thu Jul 16 01:25:00 2015 UTC,That wasnt the point of the analogy.
javascript,3df2qm,sfdud,0,Thu Jul 16 01:41:22 2015 UTC,"i do not insist on removing the standard features of a language, either."
javascript,3df2qm,thejameskyle,2,Thu Jul 16 07:42:19 2015 UTC,"Again, not the point of the analogy. (You more or less just repeated yourself.)"
javascript,3df2qm,sfdud,6,Thu Jul 16 18:20:08 2015 UTC,Forking rarely works out: http://tirania.org/blog/archive/2010/Dec-31.html  Much more efficient way to spend time: contribute to Babel and figure out how to help move JSX and Flow outside the core.
javascript,3df2qm,thejameskyle,-1,Wed Jul 15 23:00:57 2015 UTC,"figure out how to help move JSX and Flow outside the core.   I think after reading all the responses here I'm not optimistic about this outcome. It's either that they're using FB stuff so they're vehemently against it, or they're apathetic about FB stuff, or they just came here to troll. this place is just toxic."
javascript,3df2qm,sfdud,4,Thu Jul 16 23:02:59 2015 UTC,"Who cares if you don't use JSX but you use Babel? Other than npm install time, what does it cost you?  Also: The JSX output can be customized to use any matching API you like, so you don't have to use React if, say, you're worried about their Patent clause or something."
javascript,3dacwg,Mate_Marschalko,2,Tue Jul 14 19:05:27 2015 UTC,I used similar things (Node + WebFlight) to interface my AR-Drone with my pc. The catch: I streamed it and chat could control the drone. Here's a VOD of the stream: https://www.youtube.com/watch?v=gQ3dQk52SBo
javascript,3dacwg,JamyDev,1 point,Tue Jul 14 20:24:38 2015 UTC,"chat could control the drone   ... I had a girl friend fly a helicopter into my leg. No way I would even consider letting the Internet get near me with rotating blades. God speed, brave soul."
javascript,3dacwg,hahaNodeJS,1 point,Wed Jul 15 02:28:50 2015 UTC,That's awesome! You could also add Web Speech to listen to voice commands.
javascript,3dacwg,alessioalex,1 point,Wed Jul 15 08:21:34 2015 UTC,Nice. I used my PS4 controller to switch slides during a presentation. Felt good.
javascript,3d91ws,Jim-Y,5,Tue Jul 14 13:24:25 2015 UTC,"Were still at 0.13, so not much has changed.  0.14 is coming out soon, it is expected to have pure render functions, and probably some changes around context switching from being owner based to parent based.  The guy who made babel/6to5 is now on the facebook team.  Checkout the react europe videos on youtube, that conference was a week or two ago so its pretty relevant."
javascript,3d91ws,earlearlearl,3,Tue Jul 14 15:25:43 2015 UTC,Pure render functions??
javascript,3d91ws,UASHIT,3,Tue Jul 14 19:41:25 2015 UTC,https://github.com/reactjs/react-future/blob/master/01%20-%20Core/03%20-%20Stateless%20Functions.js
javascript,3d91ws,earlearlearl,1 point,Tue Jul 14 19:50:53 2015 UTC,That's nice.
javascript,3d91ws,soldoutactivist,1 point,Tue Jul 14 21:08:54 2015 UTC,0.14 is coming out soon   The beta is out now if you're comfortable using pre-release software (API should be stable)
javascript,3d91ws,ZyklusDieWelt,5,Tue Jul 14 15:38:37 2015 UTC,"The core concepts behind React (Components, Props, State, lifecycle hooks) will very likely stay the same until 1.0 is out. Currently they are iterating on the current API, fine-tuning things.  When using ES6 classes and stateless components upgrading should be fairly painless as long as you are not using a ton of undocumented features (Context for example)"
javascript,3d91ws,ub3rgeek,1 point,Tue Jul 14 17:51:22 2015 UTC,I would avoid the ES6 classes until they fix mixins (I suspect they will use an ES7 decorator to solve the problem).
javascript,3d91ws,theQuandary,2,Tue Jul 14 21:25:47 2015 UTC,Have they said they were going to fix mixins for ES6 classes? There seems to be quite a few people who think they're not a good idea.
javascript,3d91ws,siegfryd,1 point,Wed Jul 15 01:25:08 2015 UTC,"In React, mixins are mostly used to make common behaviors. Sure I could write a shouldComponentUpdate function every time I make a stateless component, but adding the mixin is much easier and less error prone.   Another great example is the Reflux mixin. It adds several reflux functions to the component and typing out them would be ridiculous (it's a couple hundred lines of code).  Some people don't like mixins because they are multiple inheritance. If you aren't careful, mixins can get out of control (especially if your mixins have mixins). This simply isn't a significant issue when you use them the way React encourages. I would argue that composition is a better solution, but React uses constructors, so mixins are necessary."
javascript,3d91ws,theQuandary,2,Wed Jul 15 02:37:53 2015 UTC,"You'll be waiting a long time, I remember reading they said mixins are an anti-pattern and are encouraging Babel + ES2016 decorators."
javascript,3d91ws,the_meme_grinch,1 point,Wed Jul 15 03:54:15 2015 UTC,"How will those decorators add functionality to a constructor?  Creating a closure that completely wraps the constructor seems to have performance implications (and be hard to get completely right).  If the decorator adds properties to the function, then it is literally performing a mixin on the instance."
javascript,3d91ws,theQuandary,1 point,Wed Jul 15 12:53:15 2015 UTC,"Their reasoning is ultimately based on having to recreate a mixin implementation of a (soon to be) language construct. It's an anti pattern, be upset if you want but deal with it, you can just implement your own mixin functionality if you are so inclined."
javascript,3d91ws,the_meme_grinch,2,Thu Jul 16 04:32:06 2015 UTC,Since they are supporting Babel so emphatically I would argue the opposite: Just use Babel + ES6 + Decorators/Composition
javascript,3d91ws,ub3rgeek,3,Tue Jul 14 21:39:55 2015 UTC,"Related question... Is it 'not worth' learning React just yet? I feel like every tutorial I read, I have to spend the same amount of time seeing what is updated from the version the tutorial was on, then I get news that something new is coming out and changing something I just learned.   Basically, it's typical Javascript on steroids."
javascript,3d91ws,natdm,3,Tue Jul 14 15:58:39 2015 UTC,"I feel like every tutorial I read, I have to spend the same amount of time seeing what is updated from the version the tutorial was on   That's your problem. Stick to the official docs and asking questions here or in their IRC. React is definitely worth learning but until 1.0 comes out, third-party sources aren't good enough to invest much time on."
javascript,3d91ws,Ogesana,2,Tue Jul 14 16:26:50 2015 UTC,"I very much think it's worth learning React, the core concepts behind React (Components, Props, State, lifecycle hooks) will every likely stay the same until 1.0 is out."
javascript,3d91ws,ub3rgeek,2,Tue Jul 14 17:52:13 2015 UTC,"Totally worth it.  The core API hasn't had too many completely breaking changes for a while.  For all the supporting cast you just have to pick stuff and stick to it.  Yea, if you try out all 20 versions of Flux, you will probably go insane, so just pick one that seems reasonably good and focus on actually building things with it."
javascript,3d91ws,caffodian,2,Tue Jul 14 19:20:17 2015 UTC,"Even if you don't use React on a production release, its worth experimenting with. I've gained a lot of new perspectives on application design from working on just pet projects with it."
javascript,3d8653,Kriem,12,Tue Jul 14 06:58:26 2015 UTC,"Ugh, the change to show/hide is going to be painful."
javascript,3d8653,tizz66,12,Tue Jul 14 09:22:09 2015 UTC,You should probably be showing and hiding elements by triggering active classes anyways.
javascript,3d8653,justinsane98,7,Tue Jul 14 13:46:08 2015 UTC,"I don't like the way they are intending to do it with 3.0. I mean if I wanted to show a popup after someone inputs something I would usually style the popup as display: none; then .show() it when I need to. With 3.0 I now need to let the popup load into the DOM, then .hide() it, then .show() it when I need to. This seems really backwards to me. I guess I'll just be doing all my hiding and showing by .addClass(); from now on."
javascript,3d8653,hotbrownDoubleDouble,2,Tue Jul 14 11:16:54 2015 UTC,"Yeah, that's the approach it sounds like they want people to take. In my product, we hide elements with a class and then simply .show() or run an animation on them as needed. It's going to be a lot of work to go back and change that approach now. So much, it's almost tempting to override the show method to do it automatically for me."
javascript,3d8653,tizz66,4,Tue Jul 14 11:22:56 2015 UTC,"It's good in the long term though, it's pretty bad code the old way as they pointed out. We've known for a long time not to style with JS unless absolutely necessary."
javascript,3d8653,xXxdethl0rdxXx,3,Tue Jul 14 13:16:09 2015 UTC,"sigh, thinking same thing.   this basically forces us to not use jq3 for a very long time.  people just dont prioritize frontend refactorings like that."
javascript,3d8653,lechatsportif,1 point,Tue Jul 14 12:49:36 2015 UTC,...how many places are you using .show/.hide?
javascript,3d8653,imicit,0,Tue Jul 14 18:19:55 2015 UTC,"just grepped, over 1500 looks like (fuzzing under true number just to keep confidentiality)."
javascript,3d8653,lechatsportif,3,Tue Jul 14 18:44:09 2015 UTC,"If you had said 1501, I'd know exactly what private company project you were talking about."
javascript,3d8653,soldoutactivist,0,Tue Jul 14 21:05:05 2015 UTC,"not from general peeps, more from coworkers :)"
javascript,3d8653,lechatsportif,1 point,Tue Jul 14 21:14:01 2015 UTC,Yikes
javascript,3d8653,imicit,3,Tue Jul 14 19:36:13 2015 UTC,"Just use the native DOM element.hidden property/attribute everywhere instead:  <div id=""content"" hidden>I'm hidden!</div> <script>    // Not anymore!   document.querySelector('#content').hidden = false; </script>"
javascript,3d8653,lazd,1 point,Tue Jul 14 18:22:13 2015 UTC,"That's an HTML 5 property, which means abysmal IE support. IE11, according to your link."
javascript,3d8653,soldoutactivist,5,Tue Jul 14 21:06:23 2015 UTC,"Yup, but the polyfill is as simple as *[hidden] { display: none; }.  The blog post is advocating that people define a CSS class .hidden { display: none; } and toggle it using addClass()/removeClass(), but I say just toggle the hidden attribute and let the browser and CSS do the show/hide."
javascript,3d8653,lazd,2,Tue Jul 14 21:16:25 2015 UTC,"That gets you IE9+. I don't believe IE8 can do *[attribute] by itself. I don't have IE8 nearby, but caniuse alludes to this limitation in its IE8 caveat text at the bottom.  Then again, I won't work for companies supporting IE8 so that's not a professional issue for me. Just worth mentioning, I thought."
javascript,3d8653,soldoutactivist,4,Tue Jul 14 21:23:06 2015 UTC,Attribute selectors are supported in IE 7+.
javascript,3d8653,lazd,3,Tue Jul 14 22:53:09 2015 UTC,So it can. Though only in standards mode I just found out.
javascript,3d8653,soldoutactivist,12,Wed Jul 15 08:35:09 2015 UTC,"Error cases don’t silently fail   Used by half the world, and jQuery finally decided to take computer science 101. At least they're moving in the right direction."
javascript,3d8653,temp202630986,12,Tue Jul 14 10:54:28 2015 UTC,"Just wait until ""tutorial"" sites start telling everyone to wrap their entire code with try/catch to stop those pesky errors from printing to the console!"
javascript,3d8653,DukeBerith,11,Tue Jul 14 13:45:01 2015 UTC,"Oh god, I can see it now. And then we'll have 60,000 essay-length blog posts about ""why try/catch is an antipattern""."
javascript,3d8653,temp202630986,6,Tue Jul 14 13:48:23 2015 UTC,"Waiting for the follow post from the same blogger: ""How I came to love try/catch all over again."""
javascript,3d8653,soldoutactivist,9,Tue Jul 14 21:04:03 2015 UTC,"Here's the long and short of it, guys.   TEST  FUCKING TESSTTTT  JUST DO IT  All us newbies forget how important this is."
javascript,3d8653,frankyfrankfrank,8,Tue Jul 14 16:25:50 2015 UTC,"Hooray for not doing weird things for show()/hide(), but why not just embrace HTML5's hidden?  show => { this.hidden = false } hide => { this.hidden = true }   To me, this sounds backwards:   If you need an element to be hidden by default, the best way is to add a class name like “hidden” to the element and define that class to be display: none in a stylesheet.   Just put the [hidden] attribute (which is styled as display: none in modern browsers and even has a setter for the hidden property) instead of defining a new class."
javascript,3d8653,lazd,4,Tue Jul 14 15:32:22 2015 UTC,"Personally, I'd rather these methods (and toggle) get deprecated.  You should be using addClass/removeClass with your own .hidden css class.  Then if you want them, write your own extension.  (or, include a ""deprecated extensions"" library."
javascript,3d8653,cwbrandsma,1 point,Tue Jul 14 18:05:22 2015 UTC,"But why even bother with .hidden at all if [hidden] is built-in to the browser? Yes, it needs a polyfill on old IE, but it's simply *[hidden] { display: none; }.  I'd rather see jQuery embrace the HTML specification so we don't have 3 ""recommended"" ways to hide something (inline display: block, .hidden, and [hidden])."
javascript,3d8653,lazd,1 point,Tue Jul 14 18:19:00 2015 UTC,"Because there will always be multiple ways of hiding something, so that guarantees that any single implementation you pick will be wrong for X% of projects.  Also, those methods are not needed the larger scheme of things."
javascript,3d8653,cwbrandsma,1 point,Tue Jul 14 22:49:59 2015 UTC,"I disagree that show() and hide() should be removed from jQuery simply because exposing an API for this gives new users a simple yet powerful tool they can use for interactivity. Yes, they could learn about the display property, define a class, import a stylesheet, then read about how to add and remove classes, but it's quite nice for them to be able to search for ""hide"" and immediately find an intuitive method that gives them what they need. You and I will probably never use it, but it's great for folks who just simply want to show and hide things.  But yes, there are always multiple ways of hiding something, and therefore it's impossible please everyone by having their way be the default.  Yet, out of the chaos, emerges a standard, written by the W3 and actually part of HTML itself. That's the [hidden] global attribute, and it's my opinion jQuery should use the standard way of showing and hiding things instead of advocating that users make their own way by defining a CSS class that hides something."
javascript,3d8653,lazd,1 point,Tue Jul 14 22:59:43 2015 UTC,"I support browsers older than IE11.   http://caniuse.com/#search=hidden  And I wasn't doubting the existence of the hidden attribute, but currently it is not usable in a wide enough set of browsers to make it worth it.  And the idea of JQuery is to better write code that works in all/most browsers."
javascript,3d8653,cwbrandsma,1 point,Tue Jul 14 23:12:37 2015 UTC,"It's usable in IE 7+, just add this to your stylesheet to polyfill it:  *[hidden] { display: none; }   And the idea of jQuery is actually ""Write less, do more."" If we follow your suggestion of removing show() and hide(), people will be writing more and doing less ;)"
javascript,3d8653,lazd,2,Wed Jul 15 00:30:05 2015 UTC,"npm install jquery@3.0.0-alpha1  realemail@gmail.com  reddit is just so bad at algorithms...  edit: wasn't criticizing you, but reddit's email detection algorithm, for blocking ""jquery@3.0.0-alpha1"" in your comment while also being so easy to bypass."
javascript,3d8653,temp202630986,1 point,Tue Jul 14 08:39:07 2015 UTC,So does this work with jQuery UI?
javascript,3d8653,jcready,1 point,Tue Jul 14 11:09:12 2015 UTC,"Glad to see the compatibility with Promises/A+ and ES2015 Promises!  Now, we just need to swap in velocity.js as the official animation library for jQuery!! :P"
javascript,3d8653,joshburgess,1 point,Tue Jul 14 14:41:04 2015 UTC,That'd be nice.
javascript,3d8653,soldoutactivist,1 point,Tue Jul 14 16:52:10 2015 UTC,What's with the Yandex thing?
javascript,3dawbf,bonecandy,7,Tue Jul 14 21:17:33 2015 UTC,I'm betting it's taking the { and } literally as a block instead of as an object.
javascript,3dawbf,TheMoonMaster,6,Tue Jul 14 21:24:17 2015 UTC,Correct! Good catch.  Wrapping the object in parens works:  arrayOfObjs.map(o => ({[o.a]: o.b}));     http://babeljs.io/repl/#?experimental=true&evaluate=true&loose=false&spec=false&code=let%20arrayOfObjs%20%3D%20%5B%7B%22a%22%3A%201%2C%22b%22%3A%202%7D%2C%20%7B%22a%22%3A%203%2C%22b%22%3A%204%7D%5D%3B%0D%0A%0D%0AarrayOfObjs.map(o%20%3D%3E%20(%7B%5Bo.a%5D%3A%20o.b%7D))%3B
javascript,3dawbf,frankle,2,Tue Jul 14 21:30:24 2015 UTC,That is indeed the fix for this. Thanks
javascript,3dawbf,weeeeelaaaaaah,1 point,Tue Jul 14 21:34:08 2015 UTC,"Ah yep, that was it! That makes sense. You certainly pay for the increased terseness...  Thanks!"
javascript,3dawbf,x-skeww,2,Tue Jul 14 21:32:35 2015 UTC,"Sorry, it's not clear what isn't working. Is it the second example?"
javascript,3dcgcw,danwe_,1 point,Wed Jul 15 04:38:35 2015 UTC,"I look for ""full screen modal"" on Google, and a couple of results appeared:   http://codepen.io/nathancooper/pen/IwGfs http://joaopereirawd.github.io/animatedModal.js/   Just using your own CSS style and removing some animations (if you don't want them) these examples could be what you are looking for."
javascript,3d91ba,dgaic,9,Tue Jul 14 13:19:14 2015 UTC,Eh... this is a really simplistic view in my opinion. Most business programming isn't easily parsed into one line functions. And you'd end up with functions:  function shiz() {  do();  something();  with();  lots();  of();  lines();  }  Which makes reading the code horrible because you have to jump around the code to find what each tiny function is doing.
javascript,3d91ba,tebriel,3,Tue Jul 14 15:49:50 2015 UTC,"As with all things, use in moderation. I think the ultimate message of the article is, yes its great you can do that thing in one line, but you can improve your code readability by turning it into a function."
javascript,3d91ba,alphaatom,3,Tue Jul 14 17:34:10 2015 UTC,"Then you've misunderstood the approach. It isn't about breaking everything down into one-line functions, it's about (primarily) making code more maintainable by logically inserting a what-layer above the how-layer.  Most code written by others that I see is a maintenance nightmare because it's only how-layer stuff: line after line of low-level statement which give no understanding of what is trying to be achieved. Bundling these lines into single-purpose, descriptively-named functions leads the coder along wonderfully.  I've adopted this approach and my code has improved by orders of magnitude."
javascript,3d91ba,MathFabMathonwy,3,Tue Jul 14 19:32:07 2015 UTC,The title reads like a one-liner itself.   Why it's good .....  code readability .com
javascript,3d91ba,UpAndDownArrows,3,Tue Jul 14 15:01:57 2015 UTC,title()
javascript,3d91ba,senocular,2,Tue Jul 14 15:14:12 2015 UTC,"return title+"""";"
javascript,3d91ba,Tim_WithEightVowels,1 point,Tue Jul 14 16:07:27 2015 UTC,"That is wrong, though. Function calls give a huge performance penalty if you use it inside a inner loop. Try it yourself, replace ""+"" by function add(a,b){return a+b} in an inner loop and measure what happens."
javascript,3d91ba,SrPeixinho,0,Wed Jul 15 05:48:57 2015 UTC,tldr;  Declarative programmingness.... everything is better when spelled out as human language.  If you prefer imperative programming styles this article confounds the stupidity that is declarative programming.
javascript,3d7jli,itsananderson,56,Tue Jul 14 03:15:11 2015 UTC,I guess he could invert a binary tree on a whiteboard.
javascript,3d7jli,uazaa,7,Tue Jul 14 08:27:36 2015 UTC,I think it's only google that asks academic questions like that.
javascript,3d7jli,perestroika12,5,Tue Jul 14 14:09:51 2015 UTC,"It's definitely not.  From personal experience, the big tech companies are (now, at least) all quite interested in testing you on the fundamentals of data structures and algorithms."
javascript,3d7jli,phineas_p_madcap,3,Tue Jul 14 18:30:20 2015 UTC,Facebook definitely does—that's how they hired people that made React.
javascript,3d7jli,Ogesana,1 point,Tue Jul 14 20:04:36 2015 UTC,"Having seen his code, I'm pretty sure he can."
javascript,3d7jli,novacrazy,12,Tue Jul 14 18:25:16 2015 UTC,I hope babel can remain independent and not be added to the Facebook roster of open source projects.
javascript,3d7jli,benhuggy,56,Tue Jul 14 10:12:47 2015 UTC,It can and will stay independent! The roadmap will not be changed and the level of support will be much better for other frameworks like Ember and Angular too since I'll be working on it full time.
javascript,3d7jli,sebmck,6,Tue Jul 14 10:18:11 2015 UTC,Great to hear. Congrats on the new job.
javascript,3d7jli,benhuggy,11,Tue Jul 14 12:30:39 2015 UTC,"Thank you! I'm pretty overwhelmed at the response, especially seeing it on r/javascript..."
javascript,3d7jli,sebmck,3,Tue Jul 14 13:20:23 2015 UTC,"Never realized you were the author, I've seen your comments around here a bit, and they've always been helpful (at least to me).  Love Babel. It's definitely a must-have in my toolkit now. Thanks for keeping it independent.  Lastly, congrats on the job! Now go kill it!"
javascript,3d7jli,mrskitch,2,Tue Jul 14 15:36:40 2015 UTC,Hurray! Babel is the best and I'm happy to hear of your new job!!! :D
javascript,3d7jli,peerpillow,1 point,Tue Jul 14 16:37:02 2015 UTC,"Thank goodness. I love Babel, and I'm really glad to hear it will stay independent, and I hope it truly does."
javascript,3d7jli,dvlsg,19,Tue Jul 14 19:51:59 2015 UTC,I thought he was making a personal Facebook page.  I wanted to be his friend. Now I'm disappointed.
javascript,3d7jli,_HlTLER_,12,Tue Jul 14 07:06:00 2015 UTC,Who wouldn't want to be friends with /u/_HlTLER_?
javascript,3d7jli,clessg,3,Tue Jul 14 07:28:29 2015 UTC,He made the right choice supporting React's JSX right in Babel. React deprecated their own JSX tooling and are moving everyone to Babel. This is a good move for Facebook to keep the projects close.
javascript,3d7jli,chrisishereladies,3,Tue Jul 14 17:16:56 2015 UTC,"Got to meet Seb at Edge Conf in London a few weeks ago. Such a humble guy. And only 18! He's got a bright career ahead of him.  Though, Cloudflare is going to be pretty upset. They were pretty happy to have the creator of Babel working for them.  Can't blame him, though. I wanna work among those talented engineers too... :("
javascript,3d7jli,neanderthalensis,3,Tue Jul 14 14:41:21 2015 UTC,Actually I thought that he is already works there. Yay! Congratulations! I see facebook as company that drives web development in the right future.
javascript,3d7jli,IDCh,2,Tue Jul 14 07:31:11 2015 UTC,@sebmck:   2015-07-13 23:28:41 UTC  Super excited to announce that I'll be starting at Facebook in a couple of weeks! 🎉     [Mistake?] [Suggestion] [FAQ] [Code] [Issues]
javascript,3d7jli,TweetPoster,-7,Tue Jul 14 03:16:10 2015 UTC,He announced it on Twitter XD
javascript,3d7jli,I-Code-Things,23,Tue Jul 14 13:40:43 2015 UTC,Presumably because the high school kid who maintains one of the most important projects in the JS ecosystem is now being paid to maintain it by a company that is relying heavily upon it.  Now they just need to hire Dan.
javascript,3d7jli,theillustratedlife,0,Tue Jul 14 07:40:43 2015 UTC,Says the author of 'ambidex'
javascript,3d7jli,drunkenfaggot,-17,Tue Jul 14 08:28:43 2015 UTC,maybe facebook will help it be more stable and not crash all the time.  oh wait its facebook.
javascript,3dbzxx,SLW_STDY_SQZ,1 point,Wed Jul 15 02:19:47 2015 UTC,"First off, this doesn't work like you think it does: cred[1] === NaN  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN  Second, take a look at your response data and see if it's JSON. Pass it through a JSON parser if it looks right to you. It'll pick out the problem."
javascript,3dbzxx,hahaNodeJS,1 point,Wed Jul 15 02:37:05 2015 UTC,"To expand on his first point for those who don't want to click - nothing is strictly equivalent to NaN, even NaN itself - the expression (NaN === NaN) is actually false.  Use the builtin global function isNaN() to check if a value is equal to NaN instead."
javascript,3dbzxx,redhedinsanity,2,Wed Jul 15 05:03:35 2015 UTC,"Nothing is even ""loosely"" equivalent to it. NaN is simply not a number. No value can equal something that isn't a value itself.  Whether Eich (or whomever came up with NaN) made the right decision with NaN is up for debate."
javascript,3dbzxx,hahaNodeJS,1 point,Wed Jul 15 14:40:37 2015 UTC,That makes sense. Thanks for the tip.
javascript,3dbzxx,hahaNodeJS,1 point,Wed Jul 15 14:19:13 2015 UTC,"Thanks. This is the response I'm getting back regardless of whether the credentials supplied are valid or not.  {    code: 500,    message: ""Could not parse response as JSON. This could also be caused by a CORS or XMLHttpRequest error."" }"
javascript,3dbzxx,tektektektektek,1 point,Wed Jul 15 14:19:13 2015 UTC,"So your server is sending back a JSON parse error, since this is the response from your sever. Chances are you're not sending correctly-formatted JSON data. Take a look at that."
javascript,3darz0,atioxx,1 point,Tue Jul 14 20:47:46 2015 UTC,"Super curious myself what people's opinions are...   My understanding is that loopback is sort of ""Express you can pay for"", but has a nice interface/ system for making your API  more developer friendly.   Please fill me in too"
javascript,3darz0,jppope,1 point,Tue Jul 14 21:07:41 2015 UTC,"Seems like quite a bit of overhead - it reads like an attempt to bring Rails + Heroku to Node.  No personal experience with it, but it does seem worrisome that their list of users contains only one recognizable name from the web tech world - and that's GoDaddy :/  Nice to have plug-and-playable integrations though. Would love to hear a good counterpoint on this."
javascript,3darz0,redhedinsanity,1 point,Wed Jul 15 05:12:04 2015 UTC,"I'm using loopback on the API for one of my projects. It's basically express - UI + ORM  What's good   It's very fast to rollout an API with basic CRUD operations for your models Methods to show related entities come for free if you care to define your relations well Relations works even among different datasources backed by different database engines. I'm actually displaying joins from my PostgreSQL user table and MongoDB GridFS tables. There are less than 10 core developers and all of them do answer almost inmediately in the google group and github issues. It has autodiscovery for RDBMS so you can generate your model json definition from inspection.  Besides from CRUD operations and relation routes (those come for free since models extend from a common base class) you can extend a model adding remote methods. A remote method can contain complex shit if you're willing to code it.    On the downside   it's not easy to customize.  Adding custom routes requires you have experience with express to figure out what goes where Documentation is huge but fails to focus on the key questions. However they are eager to improve it if you care to ask. Operations outside queries and joins might be a pain in the ass. Grouping is trivial for RBDMS, but aggregation for MongoDB works differently and when you homologate the logic, most of MongoDB propietary treats are lost. I made a small contribution last year to allow for array operators be used in MongoDB, like `$addToSet' and I got a T-Shirt as a reward. Yeah Bitch!!! You can't transform the output of a model on the fly. In my case I'm using PostGIS and the raw output of my geometry column is a binary. I'd need to retrieve it using ""ST_AsGeoJson"" but can't. I had to write a remote method, inside of which I send a raw query to the underlyin PostgreSQL driver. Remote hooks are incomplete. Model hooks are even more incomplete. No autodiscovery for NOSQL databases. Complex operations such as downloading the contents from GridFS, or uploading files to store them in Amazon S3 are hacky. A lot of the documentation focus in bloated strongloop tools to run and monitor your apps. They should really just explain how to use loopback with plain node and npm and leave the ""automation & monitoring"" in a separate section."
javascript,3d9fcb,jodraws,2,Tue Jul 14 15:14:13 2015 UTC,"Of course after hours of frustration and finally caving to ask for help I've worked out the solution myself.  Thanks for anyone who might have taken a look for me.  Images.find({""copies.Thumbs.size"": {$lte: 1}}).forEach(function (fileObj) {     var readStream = fileObj.createReadStream('Images');     var writeStream = fileObj.createWriteStream('Thumbs');     gm(readStream, fileObj.name()).resize(150).stream().pipe(writeStream); });"
javascript,3daa3a,johncat_,1 point,Tue Jul 14 18:46:45 2015 UTC,It's not clear what your question is. Are you asking how to change the spaces to +?
javascript,3daa3a,davydog187,1 point,Tue Jul 14 19:21:24 2015 UTC,"You could do a simple regexp to replace all spaces with +. Something like  var address = '22-40 W 77th St, New York, NY 10024'; address = address.replace(/ /g, '+'); console.log(address);"
javascript,3daa3a,BTCBeatsMe,1 point,Tue Jul 14 20:05:56 2015 UTC,"The spaces should be fine:  ""https://www.google.com/maps/search/22-40 W 77th St, New York, NY 10024""   You could always use encodeURIComponent() to encode the URL."
javascript,3db026,TheBeardofGilgamesh,2,Tue Jul 14 21:44:32 2015 UTC,when the animations are running I see a noticeable performance difference in the animations. [...] my question is can logging effect performance?    Haven't you already answered your own question?  Of course it can.  Drawing text on the screen (and having to scroll the window when it overflows) is not free.
javascript,3db026,Rhomboid,1 point,Tue Jul 14 23:29:24 2015 UTC,"Yeah, it do.  Seriously, though, I have a similar canvas application.  Debugging mouse drag events was a pain because I was logging coordinates plus some other stuff every few milliseconds.  I wrap my console.log() calls in a function called something like log() or debug(), that way I just have one line to comment out and logging gets turned off globally.    This is also nice if you want to turn off logging once you 'ship' your code.  But yes, I have definitely seen perf hits when logging rapidly over short time periods."
javascript,3d624m,clessg,8,Mon Jul 13 20:24:13 2015 UTC,"Based on the title I assumed this was going to be yet another component library, but it was actually a great read."
javascript,3d624m,zackwcote,3,Tue Jul 14 01:06:04 2015 UTC,"He's fantastic. Hands down, one of my favorite blogs and he's only written three essays"
javascript,3d624m,yacubian,2,Tue Jul 14 02:01:43 2015 UTC,"It's the blog of Guillermo Rauch, author of Socket.io and other stuff. Not sure where we'd be without him."
javascript,3d624m,s505,3,Tue Jul 14 18:48:25 2015 UTC,<3
javascript,3d624m,drunkenfaggot,2,Tue Jul 14 07:27:47 2015 UTC,Live updating views counter! nice
javascript,3d624m,laggingreflex,3,Tue Jul 14 05:09:12 2015 UTC,Best Geocities plugin ever.
javascript,3d624m,cesarsucio,1 point,Tue Jul 14 07:03:53 2015 UTC,"Jeez, I couldn't even focus on reading the article because the view counter in the header kept pulsing bright yellow. Is the view counter really what you want to be drawing attention to here, rather than the words in the article? :/"
javascript,3d93wo,ForScale,3,Tue Jul 14 13:42:22 2015 UTC,"There are ""touch"" events.  There are no ""over"" or ""enter"" events because your device has no physical way of tracking that.  Here's what you've got available to you:  https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent#Touch_event_types"
javascript,3d93wo,krues8dr,1 point,Tue Jul 14 13:47:48 2015 UTC,Awesome! Thanks!!
javascript,3d93wo,kandetta,3,Tue Jul 14 14:12:57 2015 UTC,"In addition to touch events you often also get simulated mouse events, as especially older websites would otherwise be useless. This isn't so much to do with JavaScript as the different mobile browsers.  Famously, when tapping on the screen, there's a 300ms delay between the touchStart event and the click event, because the browser wants to avoid triggering a click event the user is double-tapping. Some mobile browsers now no longer have that delay, but solutions such as fastclick are still popular to avoid this problem."
javascript,3d7gdz,alexbudilovsky,1 point,Tue Jul 14 02:49:30 2015 UTC,"Be careful of scrolling when using an interactive map like that, I see that it's very fiddly to scroll to the bottom of the page because as soon as your cursor is over the map you start zooming in/out of the map. You could enable the zoom level controls but remove scroll to zoom?"
javascript,3d7gdz,germainelol,1 point,Tue Jul 14 07:34:17 2015 UTC,"Hey, thanks for the suggestion. I went ahead and added that on to the app, as well as added a Button for getting a link for that specific configuration."
javascript,3d9fqz,gigi-paris,2,Tue Jul 14 15:17:11 2015 UTC,"Make deep copies of them if you need to manipulate them to calculate the result.   Unless the function's stated purpose is to mutate the parameter (which is rare and almost always a bad idea), then mutating the parameter is unexpected behavior. Imagine calling a function to get the maximum of an array and getting back the maximum as a return value--but the function also emptied the array.  Also, are you from Miami? I went to high school with a girl named Gigi Paris."
javascript,3d4ny5,PlNG,54,Mon Jul 13 14:23:31 2015 UTC,"""Things that don't help in any way: Posting +1 comments""  ""What about read only mode?""  +1 +1 +1 +1fffffffffff"
javascript,3d4ny5,mustardhamsters,17,Mon Jul 13 16:16:22 2015 UTC,Github in a nutshell. Seriously.
javascript,3d4ny5,MoederPoeder,4,Mon Jul 13 19:55:52 2015 UTC,I like the useless meme image that rises up out of the monotonous valley of +1s like a majestic eyesore
javascript,3d4ny5,boompleetz,4,Mon Jul 13 23:48:27 2015 UTC,GitHub: making browsers crash with memes since '08 because 'what's lazy loading?'™
javascript,3d4ny5,MoederPoeder,6,Tue Jul 14 00:14:55 2015 UTC,"How else do you show that you ""contributed"" to a library without actually writing code?!"
javascript,3d4ny5,one800higgins,2,Tue Jul 14 01:16:56 2015 UTC,it's so Minimalistic!!!!!! :/
javascript,3d4ny5,trollingisfun,1 point,Mon Jul 13 21:10:02 2015 UTC,+1
javascript,3d4ny5,rgrando,7,Tue Jul 14 03:00:40 2015 UTC,scumbag github user.   website he likes gets shut down by spam.   spams the corresponding github issue with +1's.
javascript,3d4ny5,Poop_is_Food,21,Tue Jul 14 00:55:31 2015 UTC,I really disliked the old system of creating a test (potentially duplicating hundreds of already existing tests) and that editing a test allowed you to completely overwrite the existing test.  I hope that Version 2 allows for proper forking of tests and separation of permanent core behavior tests and temporary sandboxing of user created tests.
javascript,3d4ny5,seiyria,4,Mon Jul 13 14:29:54 2015 UTC,"If it went to a gist-based model, then that would be perfect - no pun intended."
javascript,3d4ny5,badmonkey0001,2,Mon Jul 13 16:55:43 2015 UTC,I did appreciate that it was simple to use and was one less account I had sitting online someplace. I could get lost for hours seeing other people's tests and playing with them as well.  Looking forward to having it back either way. Was incredibly useful.
javascript,3d4ny5,Klathmon,2,Mon Jul 13 16:09:01 2015 UTC,"And it is frustrating to no end not having it.  I'm trying to optimize an image processing app written in js and I planed on using jsperf pretty significantly (as well as reading premade comparisons)  With it being down it has significantly slowed my progress.  If anyone knows how to throw some money their way I would love to. They have more than earned a donation from me just for time used, and I'm sad that it took it going away for me to realize it."
javascript,3d4ny5,jacalata,1 point,Tue Jul 14 03:28:19 2015 UTC,There is a donate link in the site footer: goes to https://jsperf.com/faq#donate. It says you can donate via Pledgie or via PayPal
javascript,3d4ny5,Klathmon,1 point,Tue Jul 14 08:37:09 2015 UTC,The last time i checked the site was still down. (it looks to be back up now). thanks i'll throw some money their way!
javascript,3d4ny5,jacalata,5,Tue Jul 14 12:25:48 2015 UTC,"Am I missing something, or is it back up? The end of that thread (a couple weeks ago) is him saying its back up with a CAPTCHA, and visiting the site just now seemed to work."
javascript,3d90dm,manojhl,1 point,Tue Jul 14 13:10:22 2015 UTC,"Yea, apply exists and push accepts multiple arguments.  Somewhat more interesting:  > let a = [...'abc'] undefined > let b = [...'def'] undefined > a.push(...b) 6 > a [""a"", ""b"", ""c"", ""d"", ""e"", ""f""]"
javascript,3d90dm,x-skeww,1 point,Tue Jul 14 13:37:03 2015 UTC,"But then you've created a new array, which is what the OP wanted to avoid."
javascript,3d90dm,jseidelin,1 point,Tue Jul 14 14:31:57 2015 UTC,"My bad, skipped over that part in the article."
javascript,3d90dm,senor_gringo,1 point,Tue Jul 14 14:40:42 2015 UTC,"dirty prototype magic, inheritance unsafe.  Array.prototype.extMerge = function(array) {   return this.push.apply(this, array); }   Edit: Incase you were wondering, I prefixed it to prevent collisions with JS engine internals, the case an engine decides to implement Array.prototype.merge, small thing I learned from OpenGL."
javascript,3d90dm,iku_19,2,Tue Jul 14 14:42:30 2015 UTC,"Extending natives is bad, just never do it.  Given a decent modern environment there is zero advantage over:  function mergeArrays(ary1, ary2){ ... }   And potential downsides that can be quite the headache."
javascript,3d90dm,ZyklusDieWelt,3,Tue Jul 14 15:20:31 2015 UTC,extending natives is bad because you run the risk of overwriting future standards  see the edit footnote.
javascript,3d90dm,iku_19,1 point,Tue Jul 14 15:36:53 2015 UTC,"You can collide with other libs or even your own, it's not just future standards you have to worry about.  Just don't do it, ever."
javascript,3d90dm,ZyklusDieWelt,2,Tue Jul 14 16:49:43 2015 UTC,"Prefix appropriately, same reason all the different browsers use different experimental prefixes."
javascript,3d90dm,iku_19,0,Tue Jul 14 17:39:12 2015 UTC,sigh read what I wrote
javascript,3d90dm,ZyklusDieWelt,2,Tue Jul 14 17:44:34 2015 UTC,"Array.prototype.extMerge = function(array) {   return this.push.apply(this, array); }; for(var i in [1, 2]) {   console.log(i); }   Output:  0 1 extMerge   Yes, using for-in with arrays is wrong, but the point is that there is now one additional enumerable property on every array.  This will probably break someone's code.  My perfectly cromulent code has been broken multiple times by 3rd party code which modified built-ins.  Just don't do it.  http://www.nczonline.net/blog/2010/03/02/maintainable-javascript-dont-modify-objects-you-down-own/"
javascript,3d90dm,x-skeww,1 point,Tue Jul 14 17:48:01 2015 UTC,"I stand corrected, although for x in array shouldn't be a practice but whatever, i still stand corrected"
javascript,3d90dm,iku_19,1 point,Tue Jul 14 18:06:07 2015 UTC,"You might like virtual methods (a proposed ES7+ feature):  http://babeljs.io/blog/2015/05/14/function-bind/  function randomItem() {   return this[this.length * Math.random() | 0]; } function last() {   return this[this.length - 1]; } let someArray = [...'abc']; console.log(someArray::randomItem()); // a, b, or c console.log(someArray::last()); // c   It's like extending built-ins without the mess.  Well, in this case, a virtual method wouldn't make any sense since ES6 got the spread operator. You can just write a.push(...b)."
javascript,3d90dm,x-skeww,1 point,Tue Jul 14 18:13:25 2015 UTC,That looks neat.
javascript,3d90dm,iku_19,1 point,Tue Jul 14 18:23:01 2015 UTC,I use:  combinedArray = firstArray.concat(secondArray)
javascript,3d90dm,andersevenrud,1 point,Tue Jul 14 18:26:13 2015 UTC,"This creates a new array though. The original is unaffected.  let a = [1, 2]; let b = [3, 4]; let c = a; a = a.concat(b); console.log(a, b, c);   Output:  [1, 2, 3, 4] [3, 4] [1, 2]"
javascript,3dblyy,toiletjs,6,Wed Jul 15 00:30:02 2015 UTC,"You can't just go around posting your own ""witty"" tweets"
javascript,3dblyy,natziel,5,Wed Jul 15 01:46:49 2015 UTC,"Lol especially when they're 3 years behind on subject material, username is relevant only because they shitpost"
javascript,3dblyy,redhedinsanity,-1,Wed Jul 15 01:51:06 2015 UTC,you called it witty :)
javascript,3dblyy,redhedinsanity,2,Wed Jul 15 03:24:11 2015 UTC,TIL OP doesn't understand sarcasm OR straight humor
javascript,3dblyy,redhedinsanity,1 point,Wed Jul 15 03:38:20 2015 UTC,oh you guys :blush:
javascript,3dblyy,JakeInDC,1 point,Wed Jul 15 16:12:27 2015 UTC,"ok i'm starting to come around, you can be funny sometimes. just...not when self promoting i guess"
javascript,3d8w0d,gonetosea,1 point,Tue Jul 14 12:29:03 2015 UTC,Just read through all but the last two. I have some experience with the stack but the articles were still very interesting and a good refresher. Thanks for The link!
javascript,3d8w0d,rhianos,0,Tue Jul 14 15:55:38 2015 UTC,Link to a very extensive cheat sheet.
javascript,3d8d3y,vishalspecs,1 point,Tue Jul 14 08:30:48 2015 UTC,"nice, thanks!"
javascript,3d560d,guorbatschow,1 point,Mon Jul 13 16:40:42 2015 UTC,Non-mobile version.
javascript,3d560d,hahaNodeJS,2,Mon Jul 13 20:30:38 2015 UTC,Thank you! that logo hurted my head
javascript,3d4g2u,adambsilver,11,Mon Jul 13 13:11:39 2015 UTC,"Saying that single-page web apps are bad is too much of a generalization.  Like most architectural or design patterns, they can be good or bad in different situations."
javascript,3d4g2u,vt97john,0,Mon Jul 13 14:27:08 2015 UTC,"He doesn't explicitly say that SPAs are bad, but that the concept causes problems - not that these problems will matter in every case or cannot be solved.  The point is that many front-end developers treat SPAs as a kind of panacea, which they aren't."
javascript,3d4g2u,a-t-k,2,Tue Jul 14 08:22:05 2015 UTC,"He doesn't explicitly say that SPAs are bad   Well, he does that that:   the BFED realises that Single Page Applications cause severe problems and that by avoiding them and leaning on the server appropriately provides a better experience and reach.   So they cause problems and avoiding them provides a better experience.  I'm not seeing a lot of nuanced ""use them when appropriate"" here.  Further, that section links to an article by the same author which concludes with:   ...SPAs require significantly more development effort, with a result that is detrimental to the user. Javascript is never going to do it better than the browser!   He is, in fact, explicitly saying that SPAs are bad.  (And also making sweeping yet trivially falsified claims about JS versus browser performance, but that's a separate quibble.)   The point is that many front-end developers treat SPAs as a kind of panacea, which they aren't.   That would be an excellent point for someone to make.  The author did not."
javascript,3d4g2u,Cody_Chaos,0,Tue Jul 14 23:37:56 2015 UTC,"You take his arguments out of context and exaggerate them to the point of invalidity because you disagree with him on the question of SPAs.   He is, in fact, explicitly saying that SPAs are bad.   The word ""bad"" isn't in any of both articles, so he doesn't explicitly say that - and implicitly, now that's open to interpretation, so have a better look on what he actually writes: ""Problematic"", ""causing more development effort"", ""breaking with UX paradigms of the browser"", yes, that's all in there, but the same could be said for supporting IE6. He also states in the other article that there are solutions for some of the problems already.  So, implicitly, the author made exactly that point that you said he was not."
javascript,3d4g2u,a-t-k,2,Wed Jul 15 04:31:10 2015 UTC,"so have a better look on what he actually writes: ""Problematic"", ""causing more development effort"",    Those words and phrases do not appear in his writing any more than the word ""bad"" does, so I'm unsure where you're going with this; at least I was only paraphrasing rather that using quotes around phrases that were never written.  In any case, this is someone who says SPAs always cause ""severe"" problems, that avoiding them always provides a better experience, that they always require ""significantly"" more development effort, and that they are always detrimental to the user.  I would put it to you that this is:   Absolutely equivalent to saying they are bad; nobody says ""this is bad for users, developers, takes longer, and works worse"", and then follows up with ""...and is totally awesome!"".  This is an article written by someone who thinks SPAs are bad, full stop. Objectively false when stated as sweeping conclusions.  It's simply false that a SPA is always slower to develop, or that a SPA always provides a worse user experience.   I feel like you are defending what you wish the article said, and not what the author actually wrote."
javascript,3d4g2u,Cody_Chaos,1 point,Wed Jul 15 05:56:36 2015 UTC,"I realize you could be partially correct. Maybe we're both pushing the meaning of what he actually wrote to its opposite boundaries. Still, there's a lot of middle ground to be covered."
javascript,3d4g2u,a-t-k,8,Wed Jul 15 06:14:43 2015 UTC,"I loved the article, but I don't think you're conveying the right message. I believe the developer should take the best of both worlds.   While supporting legacy browsers potentially let's more users use your site, newer technologies might also potentially make them stay. Also, developers waste less time writing different implementations for older browsers. Preprocessors. CSS preprocessors take little to no time to learn and are extremely time-saving. I believe it's only beneficial to pick one that suits your needs and just go with it. JS preprocessors on the other hand are entirely different story. Accessibility. I agree in its entirety, although I don't think that's being boring; that's just making it work. UI Design. I agree that there's a fine line between doing it and overdoing it in UI design and it all depends on the websites niche. It doesn't mean that we should build websites that look like they're from 2005 though. Third party libraries. True. All-in on this. UI architecture. There, you just went back to 2005. This paragraph is just full of fear of change. Of course using SPA everywhere is sub optimal, but like everything it has its use cases and takes a seasoned developer to do well.    All in all it depends on what your clients are, if you're selling a B2B or B2C solution and lots of other factors. Every project might have different needs; in some you have to be boring, some allows you to enjoy yourself and rapid change."
javascript,3d4g2u,emmorts,1 point,Mon Jul 13 14:33:57 2015 UTC,"You should probably read it again, but more carefully.   The BFED knows ""all browsers can be used"" - this does not mean they must be supported at all costs. At least he can put a pricetag on the support and a similar, albeit much smaller one, on its removal. The BFED will say ""yes"" to preprocessors if he anticipates no problems with taking other developers into the project and with debugging.   I'm with you on the UI architecture part. A good front-end developer will know what problems to expect and how to solve them. For example, if your one-pagers don't have scrolling content, scrolling will simply not be an issue. If your page is so fast that the user hasn't even got time to hit the ""cancel load"" button, then there goes another problem. But our BFED will still keep in mind that SPA architecture is not a panacea.  So be boring front-end devs, but be cool about it. Don't jump on any train, but know the schedule."
javascript,3d4g2u,a-t-k,3,Tue Jul 14 08:18:32 2015 UTC,Sounds like someone has trouble adapting to change.
javascript,3d4g2u,utuxia,2,Tue Jul 14 03:34:28 2015 UTC,I think there is a balance to be had. You can learn from making mistakes. I think decisions about where you can take risks is what should be discussed not some empty generalizations about boring vs cool front end developers.
javascript,3d4g2u,thegayngler,2,Mon Jul 13 20:37:15 2015 UTC,"Most of this is common sense to ""even"" the ""cool"" fed, and if not it should be: Yes people with disabilities will visit your website - cater for them. Yes,  people with out of date browsers will visit your website - cater for them. Yes, you will be working in a team - try to not make life hard for them, you are not an arsehole and finally yes weird/mad fucking UI that no one else is using is just that. Try to remember people that UI can be beautiful, but mostly it MUST be useful and basically invisible, no one comes to a website to see the UI they come to see the product. Always think about the knife and how often you think about its design perfection as you cut into your steak."
javascript,3d4g2u,johnnyvibrant,2,Mon Jul 13 19:52:23 2015 UTC,"Eh...   It's great to say ""we must have 100% support for every browser going back to IE6"" (or hell, why stop there?  Mosaic!  Netscape 2!).  In the real world, there are tradeoffs.  And given that IE6 is actually quite difficult to support, and the fact that it has a usage of around 0.07%, the benefit is pretty minimal.  Good developers select supported platform not to be dicks, but so as to be able to allocate resources effectively. No, don't randomly start writing code in purescript without some careful thought.  But a CSS processor is probably a good idea.  So is using babel.  If you're lumping Coffeescript in with ES2015, you may not understand what you're talking about. Reliability over popularity is fine.  But a lot of very reliable libraries are also popular; eschewing popularity just to gain hipster cred is, if anything, worse than the mistake you're arguing against. A bald assertion that ""Single Page Applications cause severe problems"" is far too sweeping.  Can cause problems?  Often inappropriate?  Sure.  But if you think they always do, then I have to question if you understand the technology.  And your link is not helping, inasmuch as it seems to basically boil down to ""SPAs are terrible at navigation!"" which...they can be?  But so can your MPA.  I mean, I just shipped a SPA yesterday (literally) that had none of the nav problems the link claims SPAs have, provided a better user experience than the MPA app it replaced, and was easier to write to boot.   If you want to tell people not to write bad code, choose inappropriate architectures, or try and use cool tools just to be cool, I'll be right behind you.  If you want to make a humerous rant that uses hyperbole to effect, that's also good.  But this reads, to me, as a serious advice from someone who doesn't really understand the latest round of JS tooling, and isn't really interested in starting.  Much of it is right, but almost every point is undermined by points which are blatantly wrong.  Edit:  Yes, accessibility is very import and often ignored.  And if you're responsible for choosing technologies a team will be using, make reasonable choices which will work for the median developer.  New tech for new tech's sake is bad.  There are good points here.  But I don't think it makes sense to lump together the (quite correct) suggestion to think about accessibility with the (frankly baffling) distaste for CSS preprocessors."
javascript,3d4g2u,Cody_Chaos,1 point,Mon Jul 13 23:20:04 2015 UTC,I agree with that the article is trying to say.  It kind of falls into the general guidance:  Be liberal in what you say. Be conservative in how you say it.  In this case though it is about the technologies you apply.
javascript,3d4g2u,achen2345,1 point,Mon Jul 13 19:02:49 2015 UTC,The JavaScript version of a NIMBY.
javascript,3d4g2u,deadcat,-1,Tue Jul 14 06:54:09 2015 UTC,LOL
javascript,3d4g2u,_doingnumbers,-1,Mon Jul 13 22:12:25 2015 UTC,"If you use CSS/JS pre-processers, hire people who have experience with them. How is that even a point?  ""Hey, this is a React project, which you've mentioned you have no experience with. That's okay. We'll hire you anyway."""
javascript,3d4g2u,soldoutactivist,4,Mon Jul 13 17:05:05 2015 UTC,"Never NEVER hire somebody primarily for experience with a specific framework.  Frameworks are flavors of the moment and fall out of popularity quickly.  Anybody who can code strongly in vanilla JS will likely pick up your pet framework quickly enough, but the opposite is certainly not true.  If you are hiring for somebody with experience in your favorite pet framework who also happens to be an awesome developer, gel with your team, and willing to accept your salary conditions you will be waiting 3 times longer to find an acceptable candidate."
javascript,3d4g2u,achen2345,-1,Mon Jul 13 18:58:52 2015 UTC,u trippin
javascript,3d7waw,zazazayou,4,Tue Jul 14 05:09:29 2015 UTC,"if ( object <= 1 ){     shape(""gold"",30,30); } else if( object <= 3){     shape(""blue"",80,80); }  else if( object <= 6){     shape(""green"",120,120); } else {      shape(""red"",150,0); }"
javascript,3d7waw,zenril,1 point,Tue Jul 14 05:18:46 2015 UTC,"Too add onto this, you should  var object = Math.floor(Math.random() * 10);   Also, you don't need to do an AND check since all the checks are less than.  If the number is 5, it's not less than or equal to 1, so it'll pass that. It's also not less than or equal to 3, so it'll pass that as well and stop at the next because it's less than 6."
javascript,3d7waw,izy521,1 point,Tue Jul 14 05:34:19 2015 UTC,"if(3 < object <= 6)   yea, iirc this is parsed to: if(true<=6) which would break  what you want is called short circuit evaluation, where the code cannot reach that point if its not the intended case  ex:  var x = 5 if (x < 2) console.log(""x<2"") else if (x < 6) console.log(""x<6 but > 1"") else if (x < 10) console.log(""x<2 but > 5"")   ie, all 3 of these are true sometimes but only 1 happens because theres a logic short circuit"
javascript,3d7waw,mc_hammerd,1 point,Tue Jul 14 07:51:12 2015 UTC,"I like writing these trees of if-statements like this:  function getShape(number) {     switch(true)     {         case number <= 1: return shape('gold',  30,  30);         case number <= 3: return shape('blue',  80,  80);         case number <= 6: return shape('green', 120, 120);         default         : return shape('red',   150, 0);     } }"
javascript,3d7waw,hahaNodeJS,2,Wed Jul 15 02:53:20 2015 UTC,"You don't need to check for possibilities which were previously excluded.  E.g. for a one-digit number you want to output ""0-9"", for a two-digit one ""10-99"", and for a three-digit one ""100-999"".  if(n < 10) {     print('0-9'); } else if(n < 100) {     print('10-99'); } else if(n < 1000) {     print('100-999'; } else {     print('1000+'); }   At the second if, I already know that n can't be smaller than 10, because I wouldn't have gotten to this point if that would have been the case. So, I don't have to add ""&& n >= 10"" there.  You can also tackle it from the other side. The principle is exactly the same:  if (n >= 1000) {     print('1000+'); } else if(n >= 100) {     print('100-999'); } else if(n >= 10) {     print('10-99'); } else {     print('0-9'); }   As others have previously mentioned, you can't write ""a < b < c"" in JavaScript. You'd have to write it as ""a < b && b < c"". Well, as I mentioned above, you don't have to do this kind of thing anyways in this case."
javascript,3d7waw,x-skeww,1 point,Tue Jul 14 06:31:04 2015 UTC,"An expression like 1 <object <= 3 is syntactically valid but it doesn't do what you think it does.  It's interpreted as (1 <object) <= 3.  1 <object evaluates to either true or false, which is then compared against 3.  So for example if object was 10, then 1 <object is true, and true <= 3 is also true since true acts like the integer 1 for the sake of comparisons.  In other words, this is complete nonsense, it's not testing if object is between 1 and 3.  In fact it's always true, because no matter what 1 <object evaluates to, both true and false are less than 3."
javascript,3d7waw,Rhomboid,1 point,Tue Jul 14 05:37:13 2015 UTC,"just another way of doing it: shrug  var object = Math.random()*10 var borders = [30,0,120,0] var colors  = ['gold','blue','green','red'] var sizes   = [30,80,120,150] var idx = 3; if ( object < 2 ) idx = 0; else if ( object < 4 ) idx = 1; else if ( object < 7 ) idx = 2; document.getElementById(""shape"").style.background = colors[idx]; document.getElementById(""shape"").style.width = sizes[idx] +""px""; document.getElementById(""shape"").style.height = sizes[idx] +""px""; document.getElementById(""shape"").style.borderRadius = borders[idx] +""px"";"
javascript,3d4tp8,cool_penguins,7,Mon Jul 13 15:09:20 2015 UTC,"I'm not really interested in creating an account for one post, but I would like to add NPM to the mix.  Title: NPM Description: NPM scripts require minimum configuration boilerplate and can be fairly powerful URL: https://www.npmjs.com/ Image-url: https://www.npmjs.com/static/images/wombat-by-night.svg  Pros:   Minimal boilerplate   With NPM scripts you only need a couple lines of code to run all of your build processes.  Compatible with any CLI   You can easily use any CLI, including NPM packages.  No need for wrapper modules   If you're using compilers during your build process, you control the version you're using, and you don't have to download wrapper modules (i.e. what you do with a few other build tools) to use the tools you need, you just install those tools directly."
javascript,3d4tp8,wjohnsto,2,Mon Jul 13 20:30:12 2015 UTC,I had not thought of using npm as a task runner before. I see the pros of using it. But how would it compare in ease of use to grunt or gulp? Either way thank you for the info!
javascript,3d4tp8,wjohnsto,1 point,Mon Jul 13 20:58:29 2015 UTC,"tl;dr - We converted a site from grunt to NPM. You can accomplish the same thing using either method. With grunt you have much more boilerplate (and possibly confusion), and you are limited to grunt- plugins and rely on the versions of each real dependency that they support.  I have built a number of hybrid apps and websites using only npm scripts, including https://platypi.io.  The entire platypi.io site is written using TypeScript, Less, Browserify, Express, and MySQL. We use NPM scripts for both development and deployment (we do continuous deployments with Azure). Through NPM we are able to:   Install/update/link TypeScript definitions using tsd Compile/watch the TypeScript on the server and client using the typescript package, installed locally Compile/watch the Less using the less and nodemon packages, installed locally   The less is minified using less-plugin-clean-css  Bundle the JavaScript using browserify, installed locally   HTML files are stringified and bundled with the JavaScript using stringify watchify is used during development to watch the JS files and do incremental bundling minifyify is used in production to minify the bundled JavaScript  Clean our compiled files using rimraf Lint our files using tsconfig-lint Run our server using nodemon Run tasks concurrently using concurrently   An example scripts object might resemble the following:  ""scripts"": {     ""build"": ""concurrent -r \""npm run less\"" \""npm run build:ts\"""",     ""build:ts"": ""npm run ts && npm run bundle"",     ""bundle"": ""browserify public/app/main.js -d -t [stringify --extensions .html --extensions .less --extensions .css --extensions .code] -o public/dist/app.js -v -p [minifyify --no-map]"",     ""clean"": ""concurrent -r \""npm run clean:dist\"" \""npm run clean:public\"" \""npm run clean:server\"""",     ""clean:dist"": ""rimraf public/dist/*"",     ""clean:public"": ""rimraf public/app/**/*.js public/app/**/*.js.map"",     ""clean:server"": ""rimraf server/**/*.js server/**/*.js.map"",     ""less"": ""lessc -ru public/app/main.less > public/dist/app.css --clean-css=\""--s0 --advanced\"""",     ""lint"": ""tsconfig-lint -u"",     ""postbundle"": ""echo bundle Done!"",     ""postless"": ""echo less Done!"",     ""prepublish"": ""npm run tsd && mkdirp public/dist"",     ""server"": ""nodemon -w server -e js,json,ejs --delay 4 --debug"",     ""start"": ""concurrent -r \""npm run watch\"" \""npm run server\"""",     ""ts"": ""tsconfig && tsc -p ."",     ""tsconfig"": ""tsconfig"",     ""tsd"": ""tsd update -so && tsd link"",     ""watch"": ""concurrent -r \""npm run watch:ts\"" \""npm run watch:less\"" \""npm run watch:bundle\"""",     ""watch:bundle"": ""watchify public/app/main.js -d -t [stringify --extensions .html --extensions .less --extensions .css --extensions .code] -o public/dist/app.js -v"",     ""watch:less"": ""nodemon -q -w public -e less -x npm run less"",     ""watch:ts"": ""npm run ts -- -w"" }   The above scripts are taken verbatim from the https://platypi.io website, which currently consists of 525 files (not including libraries, assets, or compiled files/sourcemaps) amounting to 845KB. The output JS file (which includes libraries) is 881KB (196KB gzipped), and the CSS file is 177KB (31.6KB gzipped). None of the scripts used are custom, they are all available for public use.  All of the above scripts work cross-platform (Mac/Windows/Linux), and in Heroku or Azure. Previously we were using grunt to do our builds and it was tolerable (not bad), but required a lot more code to accomplish the same tasks. It also required a lot of dependency management, since we can't use typescript, we have to use grunt-ts... we can't use browserify, we have to use grunt-browserify... etc."
javascript,3d4tp8,TheRealSeeThruHead,1 point,Tue Jul 14 13:34:32 2015 UTC,That's pretty interesting. Thanks for the great answer!
javascript,3d4tp8,rickyvetter,2,Tue Jul 14 22:06:45 2015 UTC,webpack can also be considered a build tool
javascript,3d4tp8,TheRealSeeThruHead,1 point,Mon Jul 13 23:43:14 2015 UTC,"That's interesting, I thought it was just a module bundler, can it do much else except, well... bundle modules together?"
javascript,3d4tp8,Anahkiasen,1 point,Tue Jul 14 09:27:23 2015 UTC,"It can transpile, uglify, generate source maps, split bundles and bring in external dependencies (images, css, etc.). It's built for use with many loaders which makes it a pretty extensible build tool. That said, it doesn't really qualify as a general task runner in the same way that gulp or some of these others would, because it really only does builds."
javascript,3d4tp8,hoffentlich,1 point,Tue Jul 14 11:19:55 2015 UTC,Like rickyvetter mentioned it's not a task runner but more of a bundler. The distinction to make is that a lot of tasks that you use task runners to run are actually just bundling/transforming files. Which webpack is suited for. Also interesting to note is that webpacks competitor browserify can do almost all of the same things.  These tools can be used along with npm scripts for a very lightweight build system.
javascript,3d4tp8,GaidinTS,1 point,Tue Jul 14 17:22:22 2015 UTC,tl;dr: either the config files are messy or the tools are young. Pick one.
javascript,3d4tp8,GaidinTS,1 point,Mon Jul 13 16:09:46 2015 UTC,"Haha, yes, that is true for a couple of options in this question since this is a crowdsourced list compiled and written by users, and those are two of the mos obvious things when using task runners.   If you have any suggestions or additional information feel free to add it."
javascript,3d5w0k,valisi,3,Mon Jul 13 19:42:28 2015 UTC,"Actually, this page is not using Canvas, it's using a very messy structure and code, If you want to write it using Canvas, you should first learn how to draw things [0].  Canvas has a new API called Hit Regions which should help you make your drawings interactive.  [0] https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial"
javascript,3d5w0k,YOBCZWHYNOT,2,Mon Jul 13 20:31:18 2015 UTC,"Yeah I ended up using canvas. I found a really helpful library called oCanvas, sped up the process. It's still a work-in-progress I guess."
javascript,3d4nw4,DrummerPete,30,Mon Jul 13 14:23:02 2015 UTC,"Pointers are in C++, not JavaScript."
javascript,3d4nw4,xeroskiller,12,Mon Jul 13 14:52:02 2015 UTC,Boo.
javascript,3d4nw4,soldoutactivist,7,Mon Jul 13 15:17:33 2015 UTC,I came here to post OP's exact comment.
javascript,3d4nw4,dvlsg,1 point,Mon Jul 13 17:09:46 2015 UTC,"I clicked on this thinking it was /r/programmerhumor, to be honest."
javascript,3d4nw4,pardoman,2,Tue Jul 14 02:00:10 2015 UTC,"After reading the title, for a second I thought this was a programmingHumor thread."
javascript,3d4nw4,FreefallGeek,2,Mon Jul 13 15:22:01 2015 UTC,"Came here to make pointer jokes, should have known I wouldn't be the first."
javascript,3d4nw4,daedius,1 point,Mon Jul 13 16:16:55 2015 UTC,Incorrect: http://lljs.org/  /s
javascript,3d4nw4,achen2345,5,Mon Jul 13 22:31:17 2015 UTC,"While JavaScript is an OOP language it is very different in its approach compared to other OOP languages like C++ and Java.  I recommend that if you are new to this language avoid OOP until you have a bit more experience.  Some quick pointers:   Learn about closures and scope depth. Nesting functions can produce elegant and structured code without a bunch of unnecessary boilerplate. JavaScript allows loose-typing.  Avoid this at all costs.  Never type recast any reference. Avoid as much other sloppy crap as possible, such as Automatic Semicolon Insertion. The fastest way to get started is with Node.js or io.js and running code directly from the command line. This way you don't have to spend any time writing a web front-end.  You just program and test immediately. Spend time with JSLint.  It is an overly picky validator.  The excessive pickiness will make you a stronger programmer in this language by learning where the minefields are.   Typically people who are new to this language who want to immediately write OOP code tend to write conventions learned from some prior language to cope for not having to learn this language. The code tends to be obtuse crap that nobody wants to work with."
javascript,3d4nw4,yessir_whatever,3,Mon Jul 13 19:19:00 2015 UTC,"What exactly are you having trouble with? Programming isn't copying tutorials, it's using the knowledge you already have a building on it. Where are you at now in the project?"
javascript,3d4nw4,yessir_whatever,1 point,Mon Jul 13 14:28:07 2015 UTC,"Basically, I've started planning my game, no programming yet. The thing is, I'm struggling with how to code the game.  For example, I'm going to need an inventory. Do I list the Item()s in an Inventory() array? Are Weapons a child function of items? Things like this I'm still a bit unclear about."
javascript,3d4nw4,ForScale,2,Mon Jul 13 14:34:03 2015 UTC,"Ahh, so the actual OOP part is where you're stuck.  Do weapons and items share any functionality? A possibility depending on your design is they may both share weight. If they don't share anything, weapons shouldn't be a child of items. There are two real options I see - an items class that's a parent of all items, or two parent classes called item and weapon with their respective children.  As far as how they are stored, you could have something called inventory that has an array for just items or for items and weapons depending on what you decide. These arrays are called aggregates of the inventory class, meaning they are objects that inventory has but exist independently from inventory.  Does that make sense?"
javascript,3d4nw4,ForScale,1 point,Mon Jul 13 14:39:24 2015 UTC,"It's not just the OOP part, it's applying game logic to programming, which was why I was looking up tutorials and stuff, just so I can see how somebody did it.  As for the inventory thing, what you said mostly makes sense."
javascript,3d4nw4,yessir_whatever,4,Mon Jul 13 14:50:01 2015 UTC,"Just have at it! Start building the game!   When you get stuck, come here and ask very specific questions about what you're stuck on.  I can tell you that Choose Your Own Adventure (text based) type games are pretty easy and you could probably have something up and going by the end of the week. I could help you with this.  Adding static graphics and even simple animations isn't too much harder. We could get you there within two weeks, no problem!  As for doing like a 2d side scroller or even a pong type game... that takes some fancier js.  If you're wanting to do a 3d dungeon explorer... well... that may take a while... not impossible though!   Just trying to give you some ideas of timeframes and what to expect and the like.   Let me know if you have specific questions on things!"
javascript,3d4nw4,yessir_whatever,3,Mon Jul 13 15:14:32 2015 UTC,"I have trouble doing things if I'm not sure it's the ""right way"". But you know what, I'll start mashing out some code and hope it's not completely awful."
javascript,3d46cg,Kriem,2,Mon Jul 13 11:24:21 2015 UTC,"Interesting I did not know that RAF would give a time delta, I have always been doing something like this:  var lt = new Date(), loop = function(){      requestAnamationFrame(loop);      if(new Date() - lt >=  33 ){         update();         draw();         lt = new Date();     } }   Some other ways to help speed things up:   Rotations are always going to be slower then a sprite sheet that is ether acquired from an external image or generated once before hand. Layering is important. If there is any part of your animation that is static, or can be updated at a slower rate it should be in a separate canvas in its proper z order. It isn't hard to understand that constantly re-drawing something over and over again that isn't changing is a waste of resources. Be mindful of your coding style, and weather or not there might be a faster way of doing the same thing.    for example:  If you are doing this:  var i; for(i = 0 ; i < someArray.length; i++){     draw( someArray[i] ); }   is it as fast as this?:  var i = 0, len = someArray.length; while(i < len){     draw( someArray[i] ); }   or this?:  var i = someArray.length; while(i--){     draw( someArray[i] ); }"
javascript,3d46cg,stintose,1 point,Mon Jul 13 13:57:05 2015 UTC,"There won't be a difference between those 3 loops. The drawing operation is somewhat expensive. In comparison, the loop overhead doesn't exist.  Loops which actually do something are very different from those which are used in loop-construct benchmarks.  for(let image of images) {   ctx.drawImage(image, ...); }   I'd write it like that."
javascript,3d46cg,x-skeww,1 point,Mon Jul 13 15:51:31 2015 UTC,"Of course a loop that does something is not the same think as the empty loops I often use in my testing. It is also true that when making changes like this in an actual application the real life performance gain is often negligible. However I still see the use of array.length in a loop poor practice unless doing so is truly needed, whenever I see it, it just bothers me.  I was just throwing that out there as an example though. The use of context.rotate and context.drawImage vs just using context.drawImage on a sprite sheet was a better example that would likely result in a significant performance gain."
javascript,3d46cg,stintose,1 point,Mon Jul 13 17:43:09 2015 UTC,"Accessing length is still bad if the collection is ""live"". Talking with the native code on the other side of the fence is relatively sluggish.  Well, as usual, don't guess, use a profiler. That's the only way to figure out where the hot parts actually are."
javascript,3d8hhu,davidpanik,0,Tue Jul 14 09:30:29 2015 UTC,All of the popular languages are 20+ years old.
javascript,3d8hhu,x-skeww,1 point,Tue Jul 14 13:41:10 2015 UTC,"This statement will be true after December 21, 2015."
javascript,3d5nmo,chaosreigns6,1 point,Mon Jul 13 18:44:32 2015 UTC,"Nothing to worry about, this is just a lame attempt at an ad by a website. Click cancel and forget it."
javascript,3d5nmo,guitarromantic,1 point,Mon Jul 13 19:13:27 2015 UTC,"Thanks a lot for the quick response, I appreciate it! :)"
javascript,3d5maf,Opptitronica,4,Mon Jul 13 18:34:49 2015 UTC,"wow, this deserves a promotion to thedailywtf.com   If I see this right, only the last ""guessing"" round (which is nesting 8 for loops) is looping for 208bn times (268). Just wow!"
javascript,3d5maf,ministerkosh,1 point,Mon Jul 13 19:12:12 2015 UTC,What is this supposed to do ?
javascript,3d5maf,V-xxl,1 point,Mon Jul 13 18:46:28 2015 UTC,It solves a password if you know the username/email
javascript,3d5maf,V-xxl,1 point,Mon Jul 13 18:52:39 2015 UTC,"Trying to bruteforce until it founds the password ? Well, it will take a lot of resources to loop over this..."
javascript,3d5maf,paperelectron,1 point,Tue Jul 14 14:22:27 2015 UTC,Did someone port Node to OpenCL?
javascript,3d5maf,akamaozu,1 point,Mon Jul 13 19:52:59 2015 UTC,"If you want to prevent freezing up the browser, separate the input data generation from the bit that actually does the work.   Make your loops push their guess to an array. Create a function that pops a guess from the top of the array and tries it.  If it fails, continue taking guesses and trying them. If it succeeds, do whatever you wanted to do.   function try_guess(password){  // update dom values and click submit button   // note that you only need to set the name once  }  By the third set of nested loops, you'll be spending quite a lot of time looping just to create guesses. Imagine if the password was aaaaaaaa, which is the very first guess on the eighth set of nested loops. The issue is that you'd generate literally billions of guesses just to find out the first one worked.  Rewrite your loop to create a queue of about 10 or so guesses, then store the current input state and fire off that batch to be processed. If it's successful, exit. If not, continue from the last set of input.  Something like:  function generate_guesses(nesting, state){  // state is an array. [0,0,0,0,0,0,0,0] is aaaaaaaa.  // loop and push guesses til you have a full queue   return new_state_array; }  We're making progress so far. We're no longer stuck in forever long loops and we're decoupled the looping from the actual dom access.   The last bit is letting your attempts yield to the rest of the app.   You could procedurally try the entire queue length, but it makes more sense to do a try in a set timeout call and initiate a new one if the previous try failed.  That is ... don't keep your procedure continually calling each other with no space for anything else to happen between. If you're scrolling or clicking on other things, you want to make sure that those input aren't blocked til the correct answer pops out. setTimeout is ideal here.  It takes what would be a synchronous loop and makes it async. Things can happen between guesses. Your interface isn't stuck. It's usable.  With the loops chopped up into chunks and your guessing being done asynchronously, your browser should be working hard, but not in a way that makes it hang up. The overhead will make it take longer to complete, but it's broken up into chunks that don't keep your system in a long running loop or hang your system while in the loop."
javascript,3d09y7,fluoroamine,92,Sun Jul 12 12:08:32 2015 UTC,"My rationale for ditching progressive enhancement and instead making a noscript redirect that simple says ""Javascript is required for this site, please enable it in order to use it""  is that the proportion of people who have javascript turned off is so small that losing them isn't worth the extra development time that goes into ""progressive enhancement"".   Serious question: Who doesn't use javascript anymore?"
javascript,3d09y7,J_M_B,117,Sun Jul 12 16:21:43 2015 UTC,Like 20 guys who will all come on every Reddit thread about it and talk your ear off.
javascript,3d09y7,RICHUNCLEPENNYBAGS,40,Sun Jul 12 19:13:53 2015 UTC,Hey guys I want to disable all software from running any code at all. Does anyone know how to do this?
javascript,3d09y7,evilgwyn,50,Sun Jul 12 20:04:31 2015 UTC,Try turning it off and not back on again.
javascript,3d09y7,jacalata,8,Sun Jul 12 22:57:38 2015 UTC,"Press Alt + F4, shutdown your computer, unplug your computer, pack it up on a box, and throw it out a window. Problem. Solved."
javascript,3d09y7,strategic_butter,7,Mon Jul 13 00:03:56 2015 UTC,Like this?
javascript,3d09y7,Chryssie,1 point,Mon Jul 13 00:20:07 2015 UTC,Nah you have to remove the CMOS battery first
javascript,3d09y7,jamesinc,8,Mon Jul 13 04:32:30 2015 UTC,People that use a no script app know how to whitelist shit.   So then why are they demanding that developers spend time accommodating their configuration?  Just whitelist the page if you want to use it.
javascript,3d09y7,RICHUNCLEPENNYBAGS,18,Mon Jul 13 00:05:40 2015 UTC,"Hey guys, I want to prevent a site from installing maleware   Yes, yes, but what about femaleware?"
javascript,3d09y7,HardKnockRiffe,7,Mon Jul 13 01:31:14 2015 UTC,Asking the important questions
javascript,3d09y7,Ryckes,4,Mon Jul 13 01:09:06 2015 UTC,Damn feminware-ists can't you just accept equal treatment for all wares?
javascript,3d09y7,nschubach,5,Mon Jul 13 06:14:40 2015 UTC,"That was the IE6-7 behavior. People could harm your computer at this time but now it's perfectly fine (except if you still don't update your browser, which is bad and you should receive malware in that case).  Come on, browsers now have powerful and really secure Javascript execution inside browsers and update themselves so they don't really suffer from exploits. Blocking Javascript is more historical than useful."
javascript,3d09y7,romualdr,4,Mon Jul 13 03:07:34 2015 UTC,Good points!  Thanks for the clarification. I got rid of my noscript extension when I heard about the war going one between noscript and adblockplus.
javascript,3d09y7,80sKid,24,Mon Jul 13 02:25:44 2015 UTC,Serious question: Who doesn't use javascript anymore?   Anyone visiting newspaper websites with 300+ 3rd party scripts.
javascript,3d09y7,Mr-Yellow,3,Mon Jul 13 02:39:45 2015 UTC,Just use a script blocker like ghostery
javascript,3d09y7,rorykoehler,14,Sun Jul 12 21:08:09 2015 UTC,ghostery   You mispelled uBlock origin
javascript,3d09y7,Booty_Bumping,4,Sun Jul 12 21:59:16 2015 UTC,What are the main differences between uBlock and uBlock Origin (tlDr style please)?
javascript,3d09y7,rorykoehler,4,Sun Jul 12 22:37:34 2015 UTC,"https://www.reddit.com/r/chrome/comments/32ory7/ublock_is_back_under_a_new_name/  tl;dr origin is by the original author of the 'back end' code, after some internal dispute."
javascript,3d09y7,xtphty,2,Mon Jul 13 00:07:59 2015 UTC,"tl;dr: use ""uBlock Origin"""
javascript,3d09y7,petulant_snowflake,1 point,Mon Jul 13 02:56:50 2015 UTC,"God damn it, we're onto another one?  I hate subscribing to newsletters, but one that offered the latest script blockers would get me signed up in a heartbeat."
javascript,3d09y7,smokinJoeCalculus,8,Mon Jul 13 03:20:35 2015 UTC,ghostery   I prefer using free software which isn't in the demographic collecting business.
javascript,3d09y7,Mr-Yellow,2,Mon Jul 13 18:23:56 2015 UTC,Admittedly I didn't look into their business model. I also use ad block pro which I have since discovered has some unsavory business practices too.
javascript,3d09y7,rorykoehler,0,Sun Jul 12 22:01:08 2015 UTC,"Switched to Disconnect, will switch again when another alternative comes up"
javascript,3d09y7,sylv3r,2,Mon Jul 13 00:05:17 2015 UTC,Disconnect is also doing anonymous data collection I believe.
javascript,3d09y7,xtphty,2,Mon Jul 13 02:20:07 2015 UTC,"Hmm, really? And is ublock not? Does ublock do everything disconnect does?"
javascript,3d09y7,danhakimi,0,Mon Jul 13 02:59:01 2015 UTC,Disconnect and ghostery stops Facebook from snooping on your browsing habits by blocking the widgets people embed on web pages.  uBlock (Origin) and Adblock (Plus) does not.
javascript,3d09y7,Arve,1 point,Mon Jul 13 03:49:40 2015 UTC,"You can enable Fanboy's Social Blocking List in both uBlock and uBlock Origin, this will achieve the same effect."
javascript,3d09y7,Calinou,2,Mon Jul 13 06:57:38 2015 UTC,"I just tried that, and it doesn't seem to work entirely.  It leaves Facebook comment fields intact, for instance.  Do you know how to get rid of those with uBlock (Origin)?"
javascript,3d09y7,Arve,1 point,Mon Jul 13 11:54:57 2015 UTC,"Yep, unfortunately.  Still waiting on an alternative :("
javascript,3d09y7,sylv3r,-10,Mon Jul 13 12:05:47 2015 UTC,tbh that'd be at least one person that gives a fuck about you
javascript,3d09y7,512austin,3,Mon Jul 13 20:11:56 2015 UTC,Heres an interesting blog post on how many users have JavaScript disabled and the methods of finding it out. https://gds.blog.gov.uk/2013/10/21/how-many-people-are-missing-out-on-javascript-enhancement/
javascript,3d09y7,Larrdawg,1 point,Sun Jul 12 22:53:21 2015 UTC,Very interesting read
javascript,3d09y7,cajogos,1 point,Sun Jul 12 21:17:20 2015 UTC,"For the vast majority of us who develop for business the question isn't even ""how many users have JavaScript disabled"", it's ""are the users who have JavaScript disabled profitable, and if so are there enough of them to make the ROI of progressive enhancement worth it."" There could be a ton of non-javascript users, but if they aren't making you money, then who cares? For a modern JS client app, non-js support means an entirely separate code base, which is very expensive."
javascript,3d09y7,defcon-12,3,Mon Jul 13 12:05:00 2015 UTC,"I use a JS blocker for one reason, seeing where folks link their JS from.  I allow it all, but it really is a handy inspector.  And on very rare occasions, it does help to block of questionable sources."
javascript,3d09y7,Carricre,4,Mon Jul 13 19:56:40 2015 UTC,"Because it's not needed. Like 95% of the sites I go to that say ""Javascript is required for this site, please enable it in order to use it"" I just open up the inspector, delete the container blocking the site, and use the site without issue."
javascript,3d09y7,Intrexa,3,Sun Jul 12 22:05:51 2015 UTC,People who are security conscious.  People who are privacy conscious. People who want faster page loads. People who want more performant websites.  People who don't give a shit about your 'sexy' double parallax scrolling effects. Users of Tor. Most likely users of screen readers.    It's really sad that mountains of JS is loaded on pretty much every page when most of them would be perfectly fine as static.
javascript,3d09y7,Spivak,19,Mon Jul 13 00:32:27 2015 UTC,It's really sad that mountains of JS is loaded on pretty much every page when most of them would be perfectly fine as static.   Google Maps clearly does not fall into that bucket of pages.
javascript,3d09y7,brianvaughn,9,Sun Jul 12 17:09:32 2015 UTC,"That is definitely true, Google Maps has legitimately dropped PE. But the number of people who build websites that are little more than text, links, and forms and think they're just as justified in dropping PE is pretty damn alarming."
javascript,3d09y7,kethinov,2,Sun Jul 12 18:54:11 2015 UTC,is pretty damn alarming.   And they keep feeling superior about it. lol
javascript,3d09y7,Madd0g,13,Sun Jul 12 22:30:14 2015 UTC,No javascript for the sake of accessibility is an outdated concept at this point. The accessibility problem lies with poor accessibility education among developers. People who use screen readers use javascript.
javascript,3d09y7,jazahn,5,Sun Jul 12 23:56:21 2015 UTC,You said it perfectly. 97.6% of the respondents for the 2014 WebAIM Screen Reader User Survey said that they browse with JavaScript enabled. Many developers just do a poor job of building things so they're accessible.
javascript,3d09y7,pushECX,29,Sun Jul 12 21:53:43 2015 UTC,"People who are security conscious.    It has been a really long time since security breaches, now that the whole page loads in a sandbox. Plugins on the other hand aren't. Disable those.    People who are privacy conscious.    Privacy is usually breached by cookies (HTTP) and iframes (HTML). JavaScript is limited to communicate with its original host, by design, and the extra information it can gather about you is limited to your user input inside that page, which you are already giving up anyway.    People who want faster page loads.    Are you from the 00'? If anything, JavaScript saves you from loading pages by exchanging minimal information up and down to let your browser do the parsing instead. Faster than your connection.    People who want more performant websites.    As in ""I press upvote and I want the whole page to load again to perform that action""?    People who don't give a shit about your 'sexy' double parallax scrolling effects.    Why are you even visiting if you despise it? Do you hate yourself so much?    Users of Tor.    What makes JavaScript and tor incompatible? Read points 1, 2 and 3.    Most likely users of screen readers.     Screen readers from the 90's, maybe.    Disabling external images and frames is infinitely more useful in these matters than disabling JS. And that's not even an option in most browsers."
javascript,3d09y7,keystorm,43,Mon Jul 13 05:00:13 2015 UTC,"Add the word ""some"" behind all those people. Some people who want more performant websites go to the extreme of disabling js. Same is true fit the rest.   JS is apart of the internet now. When you disable it, you have to accept you're breaking part of your experience. That's not the developers fault. The guy you're responding to is right: from a business sense, all those people are worthless and don't deserve their own special, dumbed down website. Especially for free services such as Google, which really rely on tracking and javascript for ui.  If you're paying to access a website, it better damn well work without javascript. But if you're just accessing a free service, you get what you pay for."
javascript,3d09y7,itty53,-10,Sun Jul 12 23:21:03 2015 UTC,"JS is apart of the internet now. When you disable it, you have to accept you're breaking part of your experience.   Keyword ""part.""  People who disable JS are okay with getting a degraded, but still functional experience.  Walling off the whole website with ""fuck you, enable JS"" is not what people who disable JS are expecting.  Edit: chill downvote brigade. As I've said elsewhere in the thread, Google Maps is a legit exception. My comment is in reference to the general sentiment that people who browse with noscript expect sites not to work. That's not the case. People who browse with noscript expect reasonable fallbacks where appropriate. In the case of Google Maps, it isn't appropriate, but for most sites it is."
javascript,3d09y7,kethinov,2,Sun Jul 12 17:18:18 2015 UTC,"Didn't downvote, but htf can you say ""Google Maps is a legit exception ?"".  From a developer pov, there is no legit exception. It's more like you decide to put JS on your site or you just don't. Nowadays, there is so many benefits from using JS that it's hard to not being tempted by using JS everywere and then, making it available for non JS is just a waste of time and energy and it just doesn't work. You can have workaround but it's always penalizing in some ways.   Google Maps would be hard to port for non JS users, as the little website who host 10 visitors a day fully made in JS and Google Search. It's just really annoying to deal with that stuff. Period.  I mean ""security"" reasons are BS. I may accept the others points, but really, you can have extensions who just disable some aspects without totally disabling JS (like uBlock who blocks call to GA for instance)."
javascript,3d09y7,romualdr,1 point,Sun Jul 12 22:27:14 2015 UTC,"I need to clarify a bit I think. The idea is that progressive enhancement is still a best practice that should be your default methodology for most webdev efforts, but some exceptions exist and Google Maps is one such exception where PE isn't really the right tool for the job.  The trouble seems to be that a large number of web developers have decided instead that PE-busting stacks should be your default and that PE should never be used, ever.  It kinda reminds me of the bad old days of people coding entire websites in Flash even if they were just text and links and forms. People are making that same mistake over again through overuse of PE-busting thick client frameworks like Angular."
javascript,3d09y7,kethinov,2,Mon Jul 13 02:34:39 2015 UTC,"You're missing a key component in this: Business.   In the 'good old days' of Flash, developers were forgoing all reason and logic and building entire websites in Flash. There was no reason for it other than 'neat!'.   Today, JS is the biggest tracking language available. Yes, a lot of JS is 'neat', but a lot of it is also business.   If you are running a free service which generates profits by collecting data and in turn, selling that data to advertisers, then why would you build that service in such a way that the profit-making portion of the service could be easily disabled by any user?  You wouldn't, simply put. You wouldn't build the website in a way that those profit-making functions can be easily disabled while the service still works fine.   And sure, a few diehards might get pissed off at you. But let's not kid ourselves: Those of you out there clamoring over the need for completely functional, non-JS websites are either doing so out of principle, and you don't actually use noscript everywhere, everywhen... or you're a member of an extreme minority, and your business as such is not that attractive.   I mean, you don't see Elon Musk trying to bend over backwards to market a product to the Amish, do you? No. He realizes his target audience is 'people who use automobiles and electricity'. He doesn't target the Amish at all. They don't factor into his consideration.   The noscript users out there? They're the internet's Amish. And at least in my development, I legitimately don't care about them. Neither do my clients."
javascript,3d09y7,itty53,0,Mon Jul 13 02:49:32 2015 UTC,"If you are running a free service which generates profits by collecting data and in turn, selling that data to advertisers, then why would you build that service in such a way that the profit-making portion of the service could be easily disabled by any user?   There are plenty of tools which block just the scripts that do data collection and allow the others to execute, so this isn't really a major reason for an upward trend in JS dependency.  The major reasons are 1. a rise in frameworks which are hostile to PE, 2. developers fetishizing new frameworks because new = modern = better which is not always the case, and 3. because some very loud and vocal people are incorrectly dismissing PE as a ""never use"" technique rather than promoting nuance on the subject as I am.  Also, there are plenty of ways to collect data from noscript users too.   Those of you out there clamoring over the need for completely functional, non-JS websites are either doing so out of principle   Yes, the principle of making the most fault-tolerant web app possible so as to reach the maximum number of users.   and you don't actually use noscript everywhere, everywhen...   Why the hell would I do that? JS is awesome. Just because I promote PE doesn't mean I run around the web with JS disabled. In fact, that's the first myth debunked by the article I keep trying to get people here to read."
javascript,3d09y7,kethinov,2,Mon Jul 13 15:35:12 2015 UTC,"Your colors are showing.     a rise in frameworks which are hostile to PE    Since when have frameworks dictated anything? I know a lot of professionals who shun them all together. It's also not fair to really use this in comparison to Google when they're developing their own frameworks.     developers fetishizing new frameworks because new = modern = better which is not always the case, and     This has never not been true. It's never going to change either. But again: I know plenty of professionals who shun frameworks altogether.     because some very loud and vocal people are incorrectly dismissing PE as a ""never use"" technique rather than promoting nuance on the subject as I am.    You're not getting it: PE is important to a point, but no, in a business sense, it's not worth spending time and money on very often.  Progressive enhancement hits a wall, invariably. You have to draw the line somewhere. It's a business decision now; it used to be a technological one: ""How many users are using this browser?"". But now it's a cost-benefit analysis: ""Do we care about the users using this browser? Is it worth increasing development time by another week just to handle the potential dozen or so users who this might affect?"" 9 times out of 10 the answer is ""Hell. No"". You could spend 90% of your development time addressing less than 1% of the users. Please explain how that is at all a 'smart move'. A 'good use of time'.   Look at IE7. Do you still support it? Why not? What about IE8? It's still used by nearly a fourth of China; aren't all those users important? China is a huge economy; you're ignoring them by not supporting IE8. And this sub will harp on IE8 support too: ""Microsoft doesn't even support IE8, why should we?"".  But Noscript users are smaller than that minority even. What about Netscape? Are you building your websites to be compatible with Netscape? Because you may as well be, when you look at the numbers.   Reaching the 'maximum number of users' is a brute force application of business and advertising (lest we forget that the primary function of most website development is to advertise a thing). No intelligently run business does this any more. None. Hasn't been the case that 'more eyes == more money' since the days of the newspaper-boy on the street screaming 'Extra extra, read all about it!'. And I'll evidence this:  If I'm advertising say... the new Schwarzenegger movie. Does it behoove me to advertise on Lifetime TV network (""Television for Women"")? Or The Oprah Network? Or Spike TV?  If I'm advertising feminine hygiene.. do I advertise during that new hyped MMA match on Spike TV? Or do I stick it between Cake Wars and Toddlers in Tiaras?   It's not about getting as many eyes on the screen as possible, it's about getting the right eyes to see it. If I can increase my sales by 40% by deciding that 20% of my userbase needs to be booted from my thoughts... that's a staggering win. I increase sales, decrease overhead costs.   And reddit just did this: Look at FPH. They decided that in order to monetize, they're going to have to piss off some of the more toxic of the userbase. Drive them away. And if reddit can increase profits while dropping the number of users... well that's a win every way you look at it, users be damned.  The backlash against progressive enhancement has come along right alongside the business takeover of development. Development used to be about programming first, business second. That's the hippie, long hair, free spirited internet we all fondly remember from the 90s. Now Development is a business endeavor. You have to say 'Look, this group of people is more important than that group, for our purposes today'. You certainly wouldn't be trying to support IE7 for that new browser-based photoshop-killer app you're making. Because IE7 users aren't your target audience.   The fact is that noscript users are stuck in the past. Just like people still using Netscape. The internet doesn't get better by trying to consistently handle every browser and every combination of potentialities (see ask the ms- css tags and hacks). It gets better by moving on."
javascript,3d09y7,itty53,0,Mon Jul 13 15:48:18 2015 UTC,"Since when have frameworks dictated anything?   Tons of newer SPA frameworks are incompatible with PE by design, according to their own authors. That's a pretty firm dictation.   Progressive enhancement hits a wall, invariably. You have to draw the line somewhere.   I do. I draw the line here. As do most proponents of PE."
javascript,3d09y7,kethinov,2,Mon Jul 13 16:16:43 2015 UTC,"I think an important thing to consider is that Google Maps is a totally free service. It doesn't even require you to have a Google account or to sign into anything. (And it costs a ton to maintain and develop.)  If this were a paid service, then...yes, maybe people would have a reasonable expectation of a degraded experience without JavaScript enabled. (That's debatable I guess. It depends on their sign-up experience.) But I think it's completely reasonable for web applications like Google Maps to not support PE because (a) it would add a lot of complexity (and cost) to the development and (b) it would result in an experience that just isn't anywhere near as compelling.  So the choice becomes... do you want to enable scripts while you're using Google Maps or do you just want to use another, more traditional mapping tool? That doesn't seem like such an unreasonable choice."
javascript,3d09y7,brianvaughn,4,Mon Jul 13 16:24:16 2015 UTC,"I'm not one to wear tin foil hats, but we need to get away from this notion of free. Very few websites are truly free these days. In this situation, you are offering Google to track your data and serve you ads. Even if it's not within their maps apps, it's part of your agreement to be in their ecosystem. They make $45/user a year according to their recent earnings.  If you are selling them your data and/or desktop space to show ads, it is not a free product. Wikipedia is a free product (although we should all try to donate if we have the means).  But google maps is not free.  To get back to the subject though: traditional software had minimum requirements to run the software. If you bought a video game that had minimum requirements higher than the specifications of your computer, then you can't blame the company  Instead, if you charge a user, you should notify them that JavaScript is required to run your product. Like with Google, they can't show you ads or track you without JavaScript so they do the responsible thing and also don't serve you a product."
javascript,3d09y7,WittilyFun,1 point,Sun Jul 12 23:04:49 2015 UTC,"Sure, sure. I understand where you're coming from, and yeah- very few websites are truly free- because people need to eat and pay rent, etc.  And I don't mean to nitpick- but Maps actually is free since it doesn't require users to be authenticated or to support cookies- so it is possible for you to use Maps without giving Google any value in return as far as ads go. Of course the overwhelming majority of people don't use Maps this way, and that's fortunate- because if they did, I doubt Google would continue to fund the project. :)"
javascript,3d09y7,brianvaughn,2,Mon Jul 13 02:40:55 2015 UTC,"I love how everybody arguing for disabling JS in this thread is throwing out ""but Google Maps is a legit exception!"" That's just please-don't-downvote-me BS, because Google Maps and Mapquest first existed without JS, and up until recently supported non-JS users, so it's 100% possible for them to be giving you your ""degraded but functional experience"". They just chose not to, because it's 2015 and nobody in their right mind thinks it's a good idea to spend time and money creating and maintaining embarrassingly shitty software just because there are a few laptop-wielding hermits who accept nothing else. You want your perfect security through abstinence? Throw out your laptop."
javascript,3d09y7,temp1075012,1 point,Mon Jul 13 15:55:55 2015 UTC,"..because it's 2015 and nobody in their right mind thinks it's a good idea to spend time and money creating and maintaining embarrassingly shitty software just because there are a few laptop-wielding hermits who accept nothing else. You want your perfect security through abstinence? Throw out your laptop.   Couldn't have said it better, though rather than 'hermit' I compare these noscript users to the Amish."
javascript,3d09y7,itty53,-1,Mon Jul 13 05:16:45 2015 UTC,"it's 100% possible for them to be giving you your ""degraded but functional experience""   Not without significantly more effort though, which is not the case with most web applications where PE is a more appropriate choice. Google Maps is one of very few types of web apps where PE is not the right tool for the job.    it's 2015 and nobody in their right mind thinks it's a good idea   Some of the most well respected web developers in the entire world have passionately argued otherwise."
javascript,3d09y7,kethinov,-38,Mon Jul 13 15:37:40 2015 UTC,"you dont understand the internet, its ok ur a redditor."
javascript,3d09y7,lechatsportif,17,Mon Jul 13 05:27:25 2015 UTC,"And a web developer. Career even, not just a hobby.   You're right. I don't understand."
javascript,3d09y7,itty53,23,Sun Jul 12 20:32:21 2015 UTC,Those people (which amount to a tiny fraction) know what they're getting themselves in for by actively disabling JavaScript. They don't have a right to complain when they break stuff.
javascript,3d09y7,dbbk,8,Sun Jul 12 21:17:37 2015 UTC,"But you have got to feel sorry for those who are restricted to screen readers - it works, but its oh so terrible."
javascript,3d09y7,GreyTheory,37,Sun Jul 12 17:45:49 2015 UTC,"JavaScript is not necessarily the problem there. DOM elements created by JS can be made accessible, just as those loaded statically. The problem is most developers don't understand how to make pages accessible."
javascript,3d09y7,ccb621,15,Sun Jul 12 21:09:16 2015 UTC,"I agree.  This is an issue of screen readers not keeping up with modern technology.  When AJAX become popular, Google had to update GoogleBot to handle it.  Then frontend routing came around, and GoogleBot had to come up with a prescribed way to handle that as well.  I have heard of no screen reader project or company putting out any RFCs or even contacting the overall developer community to try and find a standard way to accomplish anything.  Don't blame the evolving world of web development for the stagnation of a tangential industry."
javascript,3d09y7,trpcicm,4,Sun Jul 12 17:51:30 2015 UTC,"I meant web developers, not screen reader developers. A standard already exists for making pages accessible: http://www.w3.org/WAI/intro/aria.php."
javascript,3d09y7,ccb621,2,Sun Jul 12 17:58:04 2015 UTC,"Oh wow, there is a standard. I'm surprised because googling ""screen reader web standards"" links to some close pages, only some of which mention ARIA (and even then very little).  Now look at the ARIA page that you linked me.  I don't see a code sample anywhere in sight.  No documentation other than links to the official spec documents (which are a nightmare to read).  Last updated 13 months ago.  The rest of the web has moved on from shitty documentation and convoluted specs.  It needs to be boiled down like everything else to be easily accessible and easy to understand.  This is not good enough, and it's not the rest of the webs fault."
javascript,3d09y7,trpcicm,11,Sun Jul 12 21:19:24 2015 UTC,"Screen readers are a whole different problem yes, but it's my understanding that they can read JavaScript pages fine, so long as you do a bit of extra marking up."
javascript,3d09y7,dbbk,3,Mon Jul 13 02:35:00 2015 UTC,I do accessibility rectification for SPAs. My life is a never ending hell.
javascript,3d09y7,deadcat,2,Mon Jul 13 02:43:57 2015 UTC,I'm working on a SPA that I will need to make screen reader compatible.... What kind of hell am I going to have to endure? It's an Angular app BTW.
javascript,3d09y7,Seus2k11,4,Sun Jul 12 17:55:12 2015 UTC,"I usually test these combinations:   IE 10/11 with JAWS 15+ Firefox with NVDA   Chrome works well with ChromeVOX, but hardly anyone is using ChromeVox at this point.   Apple Talkback with Safari (both IOS and OSX) is worth testing too, but you'll find that most corporations don't seem to care. Mostly they care about getting AA compliance, and making sure JAWS & IE work.  As for the nuts and bolts of it....   make sure your fields are linked to labels. So, either have the ""for"" attribute in your labels, or use labelled-by on your input elements. Don't use both on the same label/input at the same time, or things may get read twice. use aria-described by on input (or other) elements to link related text (for instance, in a dialog you can focus on either the text or the first input, and link the focused element to the dialog title) focus is important. You should be able to navigate the whole spa with the screen off. You will probably need to implement a way to focus on a page element when your SPA loads a new view (personally I use data-focus attributes and use a binding handler - most of my work is with Durandal/Knockout apps). don't add a tab-index to everything. Screen readers have two methods of navigating a page. ""Forms mode"" which is what you get when you tab between elements, or ""JAWS/NVDA cursor"". The screen reader cursor has no visible focus, but allows you to navigate with the arrow keys. Your screen reader will find all sorts of reasons to keep shoving you in forms mode. Hit ""Esc"" to get out of it. Angular has an accessibility module, look into it: https://docs.angularjs.org/guide/accessibility I was going to write more, but this site has a TON of information around accessibility and angular... more than I could ever hope to give: http://simplyaccessible.com/article/spangular-accessibility/   Good luck :)"
javascript,3d09y7,deadcat,1 point,Mon Jul 13 01:43:35 2015 UTC,"Wow awesome details. I really appreciate the write up. I'll already say, that I've got my work cut out for me on this one."
javascript,3d09y7,Seus2k11,1 point,Mon Jul 13 02:59:39 2015 UTC,"They have a right to complain about whatever they want, and you have a right to complain about them complaining about whatever they want."
javascript,3d09y7,immibis,15,Mon Jul 13 06:34:38 2015 UTC,"Whoo, guys! We found him."
javascript,3d09y7,snookums,2,Mon Jul 13 19:11:35 2015 UTC,"JavaScript makes pages faster, not slower -- when used correctly. Don't count the screw-ups as the baseline."
javascript,3d09y7,temp1075012,-2,Sun Jul 12 21:50:31 2015 UTC,"I would replace ""conscious"" in those statements with ""overly paranoid"".  I know there are people who think that kind of thing is necessary, but they tend to be the same kinds of people who think 9/11 was an ""inside job""."
javascript,3d09y7,thbt101,-4,Sun Jul 12 21:24:00 2015 UTC,There's tin foil for people like that.   Although I agree most sites use unnecessary JS in their sites.
javascript,3d09y7,o-piispanen,3,Mon Jul 13 05:06:19 2015 UTC,Serious question: Who doesn't use javascript anymore?    Web crawlers?
javascript,3d09y7,Arve,3,Sun Jul 12 18:40:03 2015 UTC,Not entirely true. IIRC Google's crawler is equipped to deal with and get data from AJAX requests.
javascript,3d09y7,Tysonzero,1 point,Sun Jul 12 20:49:53 2015 UTC,Google's crawler handles full JS SPAs just fine. Even going as far as navigating to places that are only accessible through several js modals and onclick handlers on div's.  My company wanted me to do a full check last year and I found that unless I'm doing something REALLY off the wall (like 15+ second setTimeouts or adding a click handler to the body and using mouse cursor to pick what button was clicked) it always worked fine.
javascript,3d09y7,Klathmon,1 point,Mon Jul 13 06:53:44 2015 UTC,Good to know. I was planning on making a JS heavy website that was probably going to be pretty close to an SPA. And since I only really care about Google when it comes to search engines that is good to know.
javascript,3d09y7,Tysonzero,1 point,Mon Jul 13 09:36:41 2015 UTC,"This is correct. PE was a great idea when most of the world had feature phones that choked on JS. While it's certainly true that many people still fall in that category, the number is shrinking and I'd bet they don't represent the majority any longer. And if someone turns it off explicitly? Too bad, you get what you get. JS is like HTML these days: you just can't do without it. No need for PE anymore. It's time has passed."
javascript,3d09y7,fzammetti,1 point,Wed Jul 15 16:43:11 2015 UTC,"People who don't use it, disable it by default and turn it on when they actually see the need. This helps you get around anonymous data collection and all that, and also helps you generally maintain a higher level of software freedom.  I'm not that much of a nut myself, but I respect people who are."
javascript,3d09y7,danhakimi,1 point,Wed Jul 15 23:12:15 2015 UTC,"I don't allow js for Google, in fact I also disable cookie. I setup a dedicated subdomain for this: encrypted.google.com. It loads magnitude faster than a full blown google SERP.  I don't like been tracked."
javascript,3d09y7,lambdaq,-4,Mon Jul 13 02:39:02 2015 UTC,"Everyone has JS, right?"
javascript,3d09y7,kethinov,10,Mon Jul 13 03:52:20 2015 UTC,"This article is so stupid.  Oh no, they can't load the JavaScript if they're in a train and lose Internet service.  That's too bad because otherwise they'd totally be able to use your site in that scenario.  If anything SPAs are better for unreliable connections because the amount of stuff per page view is so much lower"
javascript,3d09y7,RICHUNCLEPENNYBAGS,2,Mon Jul 13 05:59:18 2015 UTC,"This article is so stupid. Oh no, they can't load the JavaScript if they're in a train and lose Internet service. That's too bad because otherwise they'd totally be able to use your site in that scenario.   Yes. Exactly. That's not hyperbole, that is exactly what PE is all about. The user would still be able to see content if the JS failed. Then the second link they click would hopefully allow the rest JS to load and then they'd be in happy SPA land.   If anything SPAs are better for unreliable connections because the amount of stuff per page view is so much lower   Only if you succeed at loading everything in the first page load, which is not necessarily guaranteed. And only if your entire application is free of JS errors.  Jake Archibald once told a great story about how the Google Chrome download page required JS for some reason and then one day when the CDN where the JS was hosted went down or there was some JS error on the page (I forget which) nobody could download the browser.  There's no reason that should have ever happened. PE could have prevented it. It's just one of many examples about how PE is a better, more fault tolerant design.  It may not be the right tool for every job, and I do agree it's not the right tool for Google Maps, but all you people writing it off as not the right tool for any job need to stop knee jerking and start giving the question more careful consideration."
javascript,3d09y7,kethinov,-15,Sun Jul 12 17:44:05 2015 UTC,"I'll just leave this here.  I personally use NoScript, and I really hate it when websites rely on JavaScript for no apparent reason.  Unless you're making a web application with a lot of interactivity, all JavaScript does is clutter your site. Hell, it just adds more work for no reason."
javascript,3d09y7,Wizhi,11,Sun Jul 12 23:05:20 2015 UTC,You can't intentionally disable a website's functionality and then be mad when it doesn't work.
javascript,3d09y7,solarparade,-2,Sun Jul 12 23:37:23 2015 UTC,"But why must so much functionality be tied to JavaScript?  When I can't even navigate a site without it (or hell, when the site simply doesn't load), I see it as no more than a hindrance and lazy design to be quite frank.  A website is nothing more than a document with formatted text. Presentation is (and should be) completely separate.  JavaScript definitely does have a place on the modern web, but it's supposed to be in the category of interactivity/presentation - nothing more.  In the majority of cases, JavaScript isn't (or rather, shouldn't be) vital for your average website.  So I do ""get mad"" when a news website, blog, forum etc. simply breaks because they require me to load their 14 different sources for JavaScript - half of which are probably trackers who do nothing but worsen my experience.  This is all in the context of websites. For web applications JavaScript is obviously a necessity.  Why make things more complicated than they have to be? Don't require JavaScript unless your site absolutely can't do without it.  Edit: and why can't people follow reddiquette?"
javascript,3d09y7,Wizhi,3,Sun Jul 12 17:30:15 2015 UTC,"If the news site, blog, forum, etc. doesn't want your viewership that's their business."
javascript,3d09y7,snookums,2,Sun Jul 12 21:30:58 2015 UTC,"Very true.  I still stand by my point however, that this is going against what the internet is all about, both on a technical and philosophical level.  But I suppose readers here don't share those sentiments, so I might as well quit."
javascript,3d09y7,Wizhi,0,Sun Jul 12 22:20:17 2015 UTC,"Software has more than just the two states of ""working"" and ""not working.""  There is also ""works, but with less frills than in the happy path.""  The noscript users want that third option."
javascript,3d09y7,kethinov,7,Mon Jul 13 00:00:23 2015 UTC,"I'd love to see sites start presenting noscript users with donation buttons, saying that once enough funds are raised then they'll have a reason to devote development time to those special users."
javascript,3d09y7,Doctor_McKay,2,Mon Jul 13 08:51:45 2015 UTC,"Unfortunately, it takes more than the price of two cups of cheap coffee to make that happen. The correlation between noscript users and cheapskates is remarkably high."
javascript,3d09y7,awj,1 point,Sun Jul 12 23:51:55 2015 UTC,It's not extra work if you choose a stack that prevents it from being extra work.  Look into isomorphic/universal JS stacks.
javascript,3d09y7,kethinov,1 point,Mon Jul 13 00:09:57 2015 UTC,"That's like step one in making it happen. Even within those stacks, architecting things such that you can deliver a usable experience without javascript takes extra care and will cost you time you could have used on features for the other 95% of people."
javascript,3d09y7,awj,1 point,Mon Jul 13 16:43:12 2015 UTC,"You can avoid extra work burden by serving little more than basic HTML to non-JS users. Just render your controllers and templates server-side, send plain HTML (and perhaps a basic stylesheet), and you're done. It's really not any extra work if your code is modular enough to be consumed client-side or server-side. It's done every day by countless devs."
javascript,3d09y7,kethinov,0,Mon Jul 13 00:26:15 2015 UTC,It is extra work if it means I have to change my current workflow to associate your new stack. It takes time(ergo money) to change technology
javascript,3d09y7,bokabo,0,Mon Jul 13 16:44:54 2015 UTC,"PE isn't new. It's been around for over a decade. Even back before isomorphic/universal JS cut its costs it was still a best practice despite more initial dev effort because it saves on maintenance costs down the road. Nowadays it's only more costly if the dev either 1. doesn't use it from the start for use cases where it's the best tool for job, or 2. the dev doesn't know how to apply it correctly."
javascript,3d09y7,kethinov,-3,Mon Jul 13 16:53:03 2015 UTC,"Do you say that about Java applets or Flash?  Person (in 2006): ""Java applets are insecure, so I'm disabling them. I wish more sites worked without Java applets."" You: ""You can't intentionally disable a website's functionality and then be mad when it doesn't work.""  That person is not intentionally disabling a website's functionality, they are intentionally disabling a security vulnerability. They're also not mad that the websites don't work, but they wish more websites worked without it."
javascript,3d09y7,immibis,1 point,Sat Jul 18 13:50:43 2015 UTC,The truest way to maintain security is to avoid exposure. So yes. Avoiding js and java do improve security. But when applications are written in JS and you choose to ignore it. You are disabling a websites functionality.
javascript,3d09y7,bokabo,1 point,Sat Jul 18 16:56:32 2015 UTC,"Yes, and then you are campaigning web developers to make it so that doesn't disable a website's functionality. That seems like a reasonable thing to do, no?"
javascript,3d09y7,immibis,12,Sun Jul 12 21:52:25 2015 UTC,fuck you
javascript,3d09y7,momslatin_dadsasian,14,Sat Jul 18 13:48:19 2015 UTC,Agreed. Web developers have more important things to worry about other than whiny security freaks who are adamant about staying firmly in the early 90s Internet.
javascript,3d09y7,anarchy8,-2,Sat Jul 18 21:37:28 2015 UTC,"FWIW, that article was written by Brad Frost, one of the most respected web developers in the world.  It may be blunt and crass, but it makes good points. You might want to give it another look."
javascript,3d09y7,kethinov,9,Sun Jul 12 19:47:59 2015 UTC,"Meh, I'm a web developer too and the effort needed to support fringe devices and paranoid security idiots isn't worth the 10-odd hits I'll get from their devices. I'll build the site well enough that you can access /something/ usable, but fuck it, it's 2015."
javascript,3d09y7,annoyed_freelancer,2,Sun Jul 12 20:02:45 2015 UTC,"Now now, no need to be like that. :)  My opinion is (not surprisingly) unpopular on /r/javascript, which is fine, but I do wish people would follow reddiquette.  Ninja edit: did people not read the article, thinking the title of it was what I was trying to convey? If so, that's rather unfortunate."
javascript,3d09y7,Wizhi,9,Sun Jul 12 21:25:32 2015 UTC,To be fair your link kinda did say he had to picture himself saying fuck you to you. Can't blame him for acting on that :p
javascript,3d09y7,alemaaltevinden,2,Sun Jul 12 21:57:48 2015 UTC,"Very true, at least he's a good sport about it. :)"
javascript,3d09y7,Wizhi,3,Sun Jul 12 20:02:05 2015 UTC,"Your article said to say fuck you if you don't want to support javascript, so I did. You should read your own article."
javascript,3d09y7,momslatin_dadsasian,1 point,Sun Jul 12 21:50:38 2015 UTC,"No need to get all snarky. I made a lighthearted joke because I liked your response.  If you're referring to my edit, it was more a spur of the moment annoyance with people down voting based on a moral disagreement, rather than a technical one. It should have been in my original reply, that's my bad."
javascript,3d09y7,Wizhi,13,Sun Jul 12 22:24:03 2015 UTC,"Is this a reference to something? Also, can this be my life motto?"
javascript,3d09y7,TMiguelT,50,Mon Jul 13 03:20:39 2015 UTC,"""Once you eliminate the impossible, whatever remains, no matter how improbable, must be the truth.""   -- Sherlock Holmes"
javascript,3d09y7,its_never_lupus,3,Mon Jul 13 08:46:19 2015 UTC,Time to get it tattooed
javascript,3d09y7,cport1,1 point,Sun Jul 12 13:21:33 2015 UTC,"""when you have eliminated the impossible, whatever remains, however improbable, must be the truth""  I know it from Spock, but I think it was actually originally Sherlock Holmes"
javascript,3d09y7,bben86,0,Sun Jul 12 13:35:07 2015 UTC,Tuvok (from star trek voyager) also said it.
javascript,3d09y7,fundieInAChainWax,3,Sun Jul 12 13:35:28 2015 UTC,"Now make a guess where he originally got it from.  (Yes it's quite likely Arthur Conan Doyle isn't the original source either, because the real origin probably lies somewhere in Mesopotamia or even Africa long before writing was invented. Logical reasoning isn't an invention of the modern age or even the old Greeks.)"
javascript,3d09y7,I-fuck-horses,6,Sun Jul 12 13:35:35 2015 UTC,Some famous Vulcan philosopher most likely. Not some obscure Earth's 19 century writer.
javascript,3d09y7,hijamz,13,Sun Jul 12 13:47:04 2015 UTC,I don't see this in Firefox. I'm updating Chrome but I still don't see that (but the page doesn't work right; probably cause I'm in the middle of updating chromium). I don't see it on lynx either which doesn't run javascript.   The image doesn't look like something Google would have so I'm suspicious of this post.
javascript,3d09y7,dhdfdh,8,Sun Jul 12 14:03:00 2015 UTC,"It appeared for me on Chrome with Google Maps - that yellow figure is the Google Maps ""mascot"" for a couple of things, I think."
javascript,3d09y7,MrJohz,9,Sun Jul 12 14:50:04 2015 UTC,"I am probably the biggest progressive enhancement zealot ever, but I think this is legitimate to display on Google Maps.  If it were on google.com I'd be raging hard though."
javascript,3d09y7,kethinov,2,Sun Jul 12 14:02:34 2015 UTC,I have it working on Firefox when using Google Maps: http://i.imgur.com/OeyT6T5.png
javascript,3d09y7,leaderoftheinnercirc,1 point,Sun Jul 12 14:49:23 2015 UTC,I've seen this in Firefox too.
javascript,3d09y7,templando,36,Sun Jul 12 17:46:26 2015 UTC,"Progressive enhancement is dead?  clarification I thought OP meant for search. An app like maps, I agree probably wouldn't be worth maintaining two versions. Also just because Google does something doesn't mean it is good or the correct thing to do."
javascript,3d09y7,madman86,16,Sun Jul 12 15:53:09 2015 UTC,I don't get the message when I go to http://www.google.com and turn off JavaScript. I'm sure it's a more obscure part of Google that non-JS users don't frequent
javascript,3d09y7,TMiguelT,50,Sun Jul 12 15:21:10 2015 UTC,"It appears on Google Maps, which relies on JS quite heavily.  I guess they could do a non-JS version with static maps, but it would be incredibly unwieldy, and probably incredibly slow to use.  And probably nearly impossible to do as a ""progressive enhancement"" type job - you'd end up with two very different applications, rather than one that works on anything."
javascript,3d09y7,MrJohz,14,Sun Jul 12 13:24:42 2015 UTC,It appears on Google Maps   Note that the Sherlock Holmes guy is actually the yellow Street View guy in costume.
javascript,3d09y7,nidarus,22,Sun Jul 12 13:54:35 2015 UTC,"I didn't notice, due to the clever disguise."
javascript,3d09y7,SirRealle,3,Sun Jul 12 14:51:52 2015 UTC,"""Accustomed as I was to my friend's amazing powers in the use of disguises, I had to look three times before I was certain that it was indeed he.""  Dr. Watson"
javascript,3d09y7,AceHarding,1 point,Sun Jul 12 16:53:31 2015 UTC,ಠ_ಠ
javascript,3d09y7,Iggyhopper,1 point,Sun Jul 12 17:40:57 2015 UTC,He has a name! Pegman.
javascript,3d09y7,Spriangle,11,Sun Jul 12 19:31:53 2015 UTC,"Google did do a non-JS version. The last time I checked it was in about 2012. It had a bug where it kept redirecting to itself and was unusable. They never fixed it. No one complained, presumably."
javascript,3d09y7,smellegantcode,7,Sun Jul 12 20:00:57 2015 UTC,"No one complained, presumably.   I mean, really, the only people I've ever seen complain about needing JS enabled are curmudgeonly Slashdot grumps. And they represent an increasingly infinitesimal segment of the internet at this point.  Designing pages without JS at this point is essentially dead."
javascript,3d09y7,Zurlap,-1,Mon Jul 13 01:37:24 2015 UTC,"No,  it's not that simple.  Making two completely different versions of Google Maps, one with JS, and one without JS, is obviously a waste of time.  But most web apps can work without JS without such an extreme duplication of efforts by making smart architecture decisions like taking advantage of isomorphic/universal JS stacks that are compatible with PE.   And they represent an increasingly infinitesimal segment of the internet at this point.   Not quite."
javascript,3d09y7,kethinov,6,Sun Jul 12 16:42:55 2015 UTC,"My rebuttal to that 2nd link:   Irrelevant. Any JS that is critical enough to run before JS files are loaded can be easily inlined in the page itself. Irrelevant. The page itself, images, or any other assets can be interrupted as well. Such a small edge case it's literally not worth redesigning everything for. This is the same exact scenario as #2. Not sure why they needed to repeat themselves.  Not my problem.  This is not a valid concern. It was a one-time incident that was rectified quickly, and only affected people who used JQuery as a CDN without coding a backup. In short, it only affects short-sighted developers, and only did so for a short time. These people are irrelevant to modern web design. The web uses Javascript. Period. People who turn it off have no right to complain when sites stop working. That's like complaining that the web stops working if someone makes a browser with an option to turn off CSS or HTML.  Not my problem. Will never be my problem.  Same as #5. Never use a CDN without specifying a backup as well. That's why you design your site with a minimal browser in mind first.    This idea that all sites need no JS modes on them is antiquated. You bring that up in a modern web design shop and you'll be laughed out of the room. HTML/CSS/JS are an inseparable trio."
javascript,3d09y7,Zurlap,0,Sun Jul 12 18:32:33 2015 UTC,"No, you bring it up in a modern web shop and it seems to split the room down the middle. I know this from experience, having worked at some very large, well known companies.  This is one of the most divisive issues in web development right now. Some of the brightest minds in the entire profession are on my side utterly begging and pleading with people like you to apply better critical thinking to the question of whether PE is the right tool for the job in a given context."
javascript,3d09y7,kethinov,1 point,Sun Jul 12 22:35:07 2015 UTC,"No, you bring it up in a modern web shop and it seems to split the room down the middle.   Yes, because probably 3/4 of the people who want to disable javascript are web developers. If that's your target audience, PE is definitely a concern. For most projects it's nowhere near worth the effort involved."
javascript,3d09y7,awj,0,Sun Jul 12 23:23:36 2015 UTC,That is the first myth debunked on the article I keep trying to get people here to read.
javascript,3d09y7,kethinov,-6,Sun Jul 12 23:31:32 2015 UTC,They could at least allow search with a static portion of the map (image) as a result.
javascript,3d09y7,nelmaven,35,Mon Jul 13 16:47:39 2015 UTC,"They could, but honestly, why bother? You could also argue they should make ASCII maps for people that have disabled images."
javascript,3d09y7,untogethered,9,Mon Jul 13 16:54:40 2015 UTC,"Ehh. I'm usually the one swinging the banner of progressive enhancement, but trying to build something like Maps like that is a waste of effort."
javascript,3d09y7,adenzerda,37,Sun Jul 12 15:52:18 2015 UTC,"Not at all. Google will progressively enhance any page that allows the execution of Javascript.  Less sardonically, Google probably concluded that it was costing too much to keep their basic pages integrated. Google wants to see the web move forward, so forcing that last fraction of a percent to upgrade isn't a terrible idea. Finally, I imagine that Google finds it much easier to track users when they are allowing Google's code to execute (and this is how Google stays profitable)."
javascript,3d09y7,androbat,13,Sun Jul 12 15:58:41 2015 UTC,"No, they're still using progressive enhancement where the technique is appropriate, like search. You should only see this message on web apps where a non-JS version is not really feasible, like maps.  PE still makes sense as your default approach for most webdev efforts, but there are exceptions, and Google Maps is one of them."
javascript,3d09y7,kethinov,8,Sun Jul 12 16:32:08 2015 UTC,"I'd say anything that's an actual Web app.  I mean, look, if I'm building an Angular application there's no way I'm going to bother with a non-JavaScript version.  For instance."
javascript,3d09y7,RICHUNCLEPENNYBAGS,4,Sun Jul 12 13:52:45 2015 UTC,"Exactly that.  It's for this reason why it uses so much extra bandwidth since you need to download the whole page every time you want new information or any user interaction (even with caching).  On the other hand, if you simply fire off an AJAX request then you only need to use the bandwidth for the bare minimum of what you need.  As you can imagine this will quickly add up in such an interactive Web application as Google maps, and when you're at Google scale any improvements no matter for how small a percentage of their traffic will cause substantial improvements monetarily-speaking ."
javascript,3d09y7,hlskn,1 point,Sun Jul 12 17:50:50 2015 UTC,Yes. Same as it always did.
javascript,3d09y7,immibis,6,Sun Jul 12 19:12:11 2015 UTC,"It's gotten to the point where ""progressive enhancement"" is going to mean ""two versions of the same thing, one of which will only ever be used by a tiny minority of people"" for a number of Web apps."
javascript,3d09y7,RICHUNCLEPENNYBAGS,3,Sun Jul 12 17:47:34 2015 UTC,Who doesn't use JavaScript anyway?
javascript,3d09y7,rarisgod,-4,Sun Jul 12 18:01:47 2015 UTC,More people than you think.
javascript,3d09y7,kethinov,-10,Sun Jul 12 21:54:57 2015 UTC,"The extra cost argument has been debunked repeatedly.  Unless you're developing something as rich as Google Maps, where it's completely impossible to use PE outside of literally writing two separate apps, then the extra cost argument doesn't really apply.  In our fancy 21st century world of isomorphic/universal JavaScript there are very few web app classes that aren't suited for a PE-driven approach.  The ones that aren't can be strictly enumerated:   Prototypes. Quick mockups and throw-away code obviously don't need PE since they'll never make it to production. Client-side-only applications. No server interaction = no PE. Internal corporate applications. From the link above: ""Enforcing JavaScript isn't a problem when you know your audience and the devices they use. Angular was initially designed for enterprise applications."" Sophisticated interfaces. Games, Google Maps, etc.   If your web app isn't one of those things, you probably should be using PE."
javascript,3d09y7,kethinov,3,Sun Jul 12 19:10:51 2015 UTC,"The real answer is 1 out of 93, and I read all of that and still don't care."
javascript,3d09y7,snookums,-4,Sun Jul 12 16:41:14 2015 UTC,"Anyone who cares about security or privacy, for one. (Including all sensible Tor users)"
javascript,3d09y7,immibis,1 point,Sun Jul 12 17:52:03 2015 UTC,from 4 days ago :P
javascript,3d09y7,DrummerHead,4,Sun Jul 12 19:34:11 2015 UTC,@DrummerHead   2015-07-08 12:49 UTC  So is progressive enhancement dead? Error from google maps while using noscript:   [Attached pic] [Imgur rehost]     This message was created by a bot  [Contact creator][Source code]
javascript,3d09y7,TweetsInCommentsBot,19,Sun Jul 12 21:20:07 2015 UTC,"My fiancé and I actually worked on this together. (Well, she submitted the code but we both decided on the Sherlock Holmes themed message.) Pretty neat to see it pop up on /r/javascript/ :)"
javascript,3d09y7,brianvaughn,7,Sun Jul 12 21:35:39 2015 UTC,Fiancée*
javascript,3d09y7,MonsterMook,3,Sun Jul 12 21:38:23 2015 UTC,Both fiancé and fiancée are valid. What's your point?  Edit I see now that fiancé is for male and fiancée is for female. :) :P
javascript,3d09y7,brianvaughn,1 point,Sun Jul 12 21:55:25 2015 UTC,TIL
javascript,3d09y7,bomphcheese,2,Sun Jul 12 19:26:49 2015 UTC,scratches head  She submitted the code for <noscript>...</noscript> ...?
javascript,3d09y7,hahaNodeJS,7,Sun Jul 12 19:27:05 2015 UTC,"Don't be so pedantic. She submitted the markup then. :)  Although to be fair, there's also code involved in localizing the page. (Not all code runs in the browser.)"
javascript,3d09y7,brianvaughn,2,Sun Jul 12 18:53:25 2015 UTC,"It wasn't a question about code vs. markup. I just thought it was an odd thing to point out beyond ""My fiancé and I worked on this."""
javascript,3d09y7,hahaNodeJS,5,Mon Jul 13 01:49:01 2015 UTC,"Ah, I see. She's on the Maps team so she actually submitted the feature. We both came up with the Holmes idea together though, after considering a few others. (We had an alternate Where's Waldo one too.)"
javascript,3d09y7,brianvaughn,1 point,Mon Jul 13 02:16:27 2015 UTC,"Is that version hidden in this image?  I'll find it...  red and white, red and white........"
javascript,3d09y7,senocular,2,Mon Jul 13 23:45:36 2015 UTC,Keep looking! ;)
javascript,3d09y7,brianvaughn,1 point,Sun Jul 12 21:58:19 2015 UTC,so does Sherlock represent the NSA?
javascript,3d09y7,utuxia,0,Sun Jul 12 22:04:05 2015 UTC,why not use static maps as a fallback? you already have graceful degradation built in....
javascript,3d09y7,jalbertbowden,3,Sun Jul 12 22:10:05 2015 UTC,you already have graceful degradation built in   Where?  Supporting a non-JavaScript version of maps is still a potentially significant amount of work. Business logic that currently resides in the client would need to be duplicated on the server side as well.  I'm sure Google has considered the pros and cons of supporting a no-script map experience. Their decisions on such things are usually pretty data-driven.
javascript,3d09y7,brianvaughn,0,Sun Jul 12 22:21:47 2015 UTC,static maps
javascript,3d09y7,jalbertbowden,1 point,Mon Jul 13 00:30:48 2015 UTC,"Ah, sorry. I understand what you're saying. That's not really built-in... it could be made to work, but it would require some surrounding chrome to be a compelling experience.  I don't have the answer for why it's not supported. I assume it's been considered and was decided to not be worth the effort? :)"
javascript,3d09y7,brianvaughn,-6,Mon Jul 13 02:16:44 2015 UTC,"You guys might wanna do a blog post about why Google Maps is one of the rare web apps on the web that isn't really a good case for progressive enhancement. A lot of people in this subreddit seem to think that rejecting PE should be a new default, whereas as many have pointed out very few webapps should drop PE and it just so happens Google Maps is one of those exceptions to the rule."
javascript,3d09y7,kethinov,8,Mon Jul 13 16:04:29 2015 UTC,"That's an interesting suggestion.  I think some of the people (at least on this discussion) that seem to be faulting Google for not adhering to PE aren't taking into consideration the levels of complexity (cost, development time, testing, etc.) that such an approach adds on top of what is already one of the largest and most complicate web apps.  Maps is totally free to use (even without a Google account or any authentication beforehand) and really expensive to maintain, develop, etc... I think the fact that it exists at all and works so well is pretty awesome in and of itself. :)"
javascript,3d09y7,brianvaughn,-5,Mon Jul 13 02:18:45 2015 UTC,maps is not totally free to use - there's a limit and when you hit it you pay up
javascript,3d09y7,jalbertbowden,3,Mon Jul 13 02:23:27 2015 UTC,"That's the API. We're not talking about the API. We're talking about the web app. Besides that, the free limit is 25k requests / day. That's pretty a generous free limit..."
javascript,3d09y7,brianvaughn,6,Mon Jul 13 02:25:06 2015 UTC,"""You guys ought to lend authority to my position, which you may or may not endorse."""
javascript,3d09y7,RICHUNCLEPENNYBAGS,5,Mon Jul 13 02:30:40 2015 UTC,Why bother?  Google has its own browser which is quickly become the most popular.... just remove the option to disable JavaScript. Force the user into their most desirable path.
javascript,3d09y7,achen2345,2,Sun Jul 12 22:40:17 2015 UTC,You will be assimilated.
javascript,3d09y7,immibis,3,Sun Jul 12 22:57:13 2015 UTC,But this isn't true at all - plain HTML/CSS pages still work - wtf are they talking about...
javascript,3d09y7,neurofluxation,13,Mon Jul 13 02:13:37 2015 UTC,"I think its intended as just light humour instead of a boring old ""you have javascript disabled please enable it"" page."
javascript,3d09y7,alphaatom,3,Mon Jul 13 02:15:46 2015 UTC,It's just a humorous landing page. Google Maps (where this message actually appears) is quite non-functional without JavaScript enabled (for obvious reasons).
javascript,3d09y7,brianvaughn,1 point,Sun Jul 12 23:09:27 2015 UTC,Not really as far as Google Maps go...
javascript,3d09y7,Tysonzero,3,Sun Jul 12 18:48:25 2015 UTC,"You must be new here. On planet earth we humans have a speech construct that we call ""humor""."
javascript,3d09y7,one800higgins,4,Sun Jul 12 21:55:47 2015 UTC,ah yes. laughter
javascript,3d09y7,neurofluxation,1 point,Sun Jul 12 15:04:17 2015 UTC,I half think this is fake. I just went into private mode and disabled js in Chrome and just got the normal homepage.
javascript,3d09y7,geuis,1 point,Sun Jul 12 15:26:21 2015 UTC,Works for me http://imgur.com/a8KQXKR
javascript,3d09y7,senocular,1 point,Sun Jul 12 18:55:59 2015 UTC,"Doesn't seem to work on .co.uk, I just get maps, working as expected."
javascript,3d09y7,vekien,1 point,Sun Jul 12 23:43:37 2015 UTC,"google.com renders normally, but google maps shows the image being referenced by OP"
javascript,3d09y7,kleichtle,-2,Sun Jul 12 16:18:37 2015 UTC,"hilarious. the irony here is that google has static maps, which offer graceful degradation for gmaps, but instead of utilizing it and promoting their solution, they chose the easy way. great job guys!"
javascript,3d09y7,jalbertbowden,4,Sun Jul 12 16:20:01 2015 UTC,"also that if you use their framework Angular, you won't be crawled or indexed either."
javascript,3d09y7,utuxia,2,Sun Jul 12 20:32:32 2015 UTC,"Google does crawl and index Angular applications, and the forthcoming version brings support for server rendering, so it will be crawlable and indexable by every other search engine as well."
javascript,3d09y7,dbbk,1 point,Mon Jul 13 00:35:50 2015 UTC,lols. hilarious
javascript,3d4h7j,Silverwolf90,2,Mon Jul 13 13:22:30 2015 UTC,"I will raise an exception if I am passed something defined but improper like an empty array when it should be an array of objects.  Or if a key is not present on an object.  Something like an undefined value being passed to a function is something I would try to prevent by the design of the code.  For example, fields in JSON data that could be missing or null when called from the server would be wrapped in a function that evaluates the health of that JSON data before it is sent downstream."
javascript,3d4h7j,billautomata,2,Mon Jul 13 14:21:19 2015 UTC,"If you're working in a multi dev environment where it will be likely (if not assured) that someone will use what you wrote incorrectly, then yes, these kinds of errors are good to have.  Its not uncommon for people to just copy and paste code they see and tweak it a little bit to fit their needs assuming they know how it works from the other context.  And that can lead to trouble down the road.  Programmer exceptions can help mitigate that."
javascript,3d4h7j,senocular,2,Mon Jul 13 16:19:04 2015 UTC,"They are immensely useful, but unfortunately, some devs have a hard time grasping their full power. I don't use them to directly throw errors, but rather, to consolidate error-handling code. A short example might help here...  function validateUser(user) {   if (!user) {     modal('Please login before attempting this action.');     logError('Please login before attempting this action.');     resetData();     return false;   }    if (!user.id) {     modal('Please save your settings before attempting this action.');     logError('Please save your settings before attempting this action.');     resetData();     return false;   }    if (!user.hasEditPermission()) {     modal('You do not have permission to complete this action.');     logError('You do not have permission to complete this action.');     resetData();     return false;   }    // rest of code... }   With this approach, you're repeating your error-handling code all over the place, which might be OK if this is the only place that you handle errors, but what about when you're doing lots of user checks (in different places)? Given enough devs and enough code, it becomes unruly very fast. Pretty soon, people are copy/pasting large swaths of error-handling code all over the place, and making a simple change -- say, changing logError() to log.error() -- requires making quite a few changes in many different areas of code.  On the other hand, an exception-based approach might be setup with:  // there's several ways to do this, I just chose one function UserError(message) {   this.message = message; } UserError.prototype = new Error();  try {   validateUser(user); }  catch (error) {   if (error instanceof UserError) {     modal(error.message);     logError(error.message);     resetData();   } }   And then that same validateUser() from earlier becomes a lot more concise, with the added benefit of DRY for the error-handling:  function validateUser(user) {   if (!user) {     throw new UserError('Please login before attempting this action.');   }    if (!user.id) {     throw new UserError('Please save your settings before attempting this action.');   }    if (!user.hasPermissionToEdit()) {     throw new UserError('You do not have permission to complete this action.');   }    // rest of code... }"
javascript,3d4h7j,kenman,1 point,Mon Jul 13 18:37:06 2015 UTC,"A similar approach could be made without using error objects at all...  validateUser(user, function(error) {   modal(error);   logError(error);   resetData(); });  function validateUser(user, errorHandler) {   var error = function (message) {     errorHandler(message);     return false;   };   if (!user) {     return error(""Please login before attempting this action."");   }   if (!user.id) {     return error(""Please save your settings before attempting this action."");   }   if (!user.hasPermissionToEdit()) {     return error(""You do not have permission to complete this action."");   }   // rest of code..   return true;  }   To me, exceptions should be for ""exceptional"" cases in your program when things go wrong. Throwing exceptions just to catch them later is using exceptions for control flow, which is usually a sledgehammer approach to resolving errors. JavaScript allows you to provide callback functions. As you can see, unless one of the invalidation conditions are met, the callback never runs and none of that code is executed. This is effectively the same thing as surrounding something in a try/catch, except the added benefit here is that you aren't risking a bad programmer misusing the code by failing to catch UserError when attempting to run validateUser()."
javascript,3d4h7j,tubbo,2,Tue Jul 14 04:23:53 2015 UTC,"I throw an exception (regardless of language or platform) whenever the code cannot reasonably continue on or recover, or if a dangerous or impossible operation would execute.  Crash early   Bill Venners: In your book you suggest we try to detect problems as early as possible, so we can make the program crash before it does damage. I have often felt the need for a ShouldNeverHappenException in Java. I'm programming along, and I get to a case that I'm confident will really never happen. But just in case it ever happens, I want to throw an exception there, but what exception? I usually end up throwing a RuntimeException and putting in a comment that ""This should never happen."" But it takes time to add that throw statement, as does any way of crashing early. Checking every pointer in a C program for null before it's used, for instance, would take a lot of time. Where do you draw the line? How do you decide the investment is worth it?  Dave Thomas: That's interesting, because quite often you don't have to do anything special to crash early. For example, as long as you're sure a nullpointer is going to cause an error immediately, then I don't see much difference in throwing a random RuntimeException or throwing a NullPointerException. The bad thing is to propagate an error.  The reason you crash early is to stop errors from propagating far away from the cause. Because once you have an error that's a million instructions away from the cause, finding the cause is a pain in the butt. Quite often, the check is done for you by the compiler. What we're trying to say is when the checks are not put in by the compiler, that's when you start needing to put the checks in yourself."
javascript,3d4h7j,hahaNodeJS,1 point,Mon Jul 13 20:43:06 2015 UTC,I feel for you. Some programmers never really grasp exceptions. Sounds like he or she is one of them.
javascript,3d4h7j,prettycode,1 point,Mon Jul 13 20:44:22 2015 UTC,Exceptions are for stack unwinding. I use them when I need to unwind the stack.
javascript,3d3adv,Cylons,3,Mon Jul 13 04:28:17 2015 UTC,Is it cross platform?
javascript,3d3adv,utuxia,2,Mon Jul 13 04:39:17 2015 UTC,"Runs on OS X and Windows, produces cross platform apps."
javascript,3d3adv,gloom303,1 point,Mon Jul 13 09:25:50 2015 UTC,What about android? Also is it open source?
javascript,3d3adv,utuxia,1 point,Mon Jul 13 15:58:20 2015 UTC,"Android is supported yeah. Anders from Fuse is answering questions over at HackerNews, also regarding open source: https://news.ycombinator.com/item?id=9876139"
javascript,3d3adv,gloom303,1 point,Mon Jul 13 16:37:01 2015 UTC,Oh its C#. nevermind.
javascript,3d3adv,utuxia,3,Mon Jul 13 16:45:59 2015 UTC,Anyone have any experience with it?
javascript,3d3adv,germainelol,1 point,Mon Jul 13 05:17:02 2015 UTC,how does it compare to the NativeScript framework?
javascript,3d3adv,hoffentlich,1 point,Mon Jul 13 06:44:59 2015 UTC,that looks really good! especially stuff like <template> ... <while someJsVar=true><stroke size=1px color=pink></while> </template>
javascript,3d5fhd,rorykoehler,5,Mon Jul 13 17:47:30 2015 UTC,"I'd suggest properly handling this situation so no error occurs.  Does it hurt things now?  Not really.  Things work when they should and don't when the shouldn't. However these errors could potentially be surfaced to the user which doesn't look good, and if you ever have any legitimate errors, they could be hidden by these errors you're letting slip by."
javascript,3d4hfg,relyon,1 point,Mon Jul 13 13:24:33 2015 UTC,"probably not but i think its an easy workaround, in your hover fn check if you are dragging and if necessary reset the stuff your hover fn does  $('.draggable').hover(function(e) {     if ($(e.target).hasClass('ui-draggable-dragging')){      //reset once if you need to:      $(e.target).css('border',0)      // return to stop event      return   }    $(e.target).css('border','1px solid green')  })   edit: actually you might be able to...  if you bind the hover to the parent obj:  $('body').on('hover', '.myclass:not(.ui-draggable-dragging)', function() {      //dostuff  })   but im not sure if the :not() selector is gonna work here or not!"
javascript,3d437a,JapanWall,2,Mon Jul 13 10:42:51 2015 UTC,"I assume you mean jQuery.each()?  It does wait until the entire collection is complete before returning execution.  You must be doing something else, so we'll need a code sample."
javascript,3d437a,nschubach,1 point,Mon Jul 13 10:50:53 2015 UTC,"ok, thank you. I am running this function:  function inserirEdit(idregisto, id_avaliacaoqualitativa, idnutente, idcriterio, min, max, id_escala, designacao_criterio) {     var nota = $('#edit' + id_registo).val();  if (id_avaliacaoqualitativa) {              $('#nota_'+id_registo+' input:checked').each(function() {                      nota = $(this).attr('id');      });  }  else  {     nota = $('#edit_' + id_registo).val(); }  $.post('Sumarios/FiltrosConsultaSumarios.php', {act: 'editarAvalDiaria', ID_Registo: id_registo, nota: nota}).done(function(){      $.get(""Sumarios/FiltrosConsultaSumarios.php"", {act:""historicoAluno"", turma: ID_Turma, disciplina: ID_Disciplina, idnutente: idnutente, idcriterio: idcriterio, idavaliacaoqualitativa: id_avaliacaoqualitativa}).done(function(data) {          var obj = JSON.parse(data);          var tabelaHistorico = gerarTableModalHistorico(obj[0][0], idnutente, idcriterio, designacao_criterio, id_avaliacaoqualitativa, min, max, id_escala);          var headerHistorico = gerarHeaderModalHistorico(obj[1], designacao_criterio, obj[0][1]);          $('#divHeaderAvalDiarias').html(headerHistorico);          $('#divTableHistoricoAvalDiarias').html(tabelaHistorico);          $('.divHeaderHistoricoAvalDiarias').children().addClass('divHeaderHistoricoAvalDiarias');      });  });   }  The problem is that each is that he´s doing the ajax request without waiting for the nota parameter to be defined."
javascript,3d437a,nschubach,1 point,Mon Jul 13 11:01:06 2015 UTC,It's most likely that this code is running before the element is created on page.  Add console.log($('#edit' + id_registo)) at the beginning of the function.  It's a common problem with jQuery which is where .ready() comes into play: https://api.jquery.com/ready/
javascript,3d437a,nschubach,1 point,Mon Jul 13 11:07:12 2015 UTC,"[context: document, selector: ""#edit1994861""] context: document selector: ""#edit1994861""proto: m[0]  this is the console.log();  the problem is that ajax requests are done when nota is not defined. you have to assume id_avaliacaoqualitativa is true and so $.each() is executed.   That's why I am assuming I need to force $.each to be finished and only then do the ajax request."
javascript,3d437a,nschubach,1 point,Mon Jul 13 11:12:44 2015 UTC,Do me a favor and copy the result of console.log(arguments);
javascript,3d437a,nschubach,1 point,Mon Jul 13 11:15:41 2015 UTC,"there ya go: [1994861, 1, 67000000009492, 11269, null, null, -3, ""Comportamento""]"
javascript,3d46sm,ytiurin,8,Mon Jul 13 11:30:24 2015 UTC,"Oh, god. Just use promises already. There is no real advantage to implementing your own deferred callback mechanism from scratch."
javascript,3d46sm,sigwhite,1 point,Mon Jul 13 12:44:49 2015 UTC,Hi! Would you mind giving me an eli5 on promises?
javascript,3d46sm,ForScale,1 point,Mon Jul 13 12:56:01 2015 UTC,https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise http://www.html5rocks.com/en/tutorials/es6/promises/
javascript,3d46sm,x-skeww,1 point,Mon Jul 13 13:05:49 2015 UTC,"Not really eli5, but I did learn something... I think. Thanks!!"
javascript,3d46sm,ForScale,2,Mon Jul 13 13:16:01 2015 UTC,"This isn't really eli5, but I think it does a good job of explaining the ways promises can be used and how they behave in different situations.  Its good if you have a basic understanding of promises already (which I'm assuming you do with the previous links?).  http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html"
javascript,3d46sm,senocular,1 point,Mon Jul 13 16:13:55 2015 UTC,Thanks!  Is it accurate to say that promises have to do with timing of functions?
javascript,3d46sm,ForScale,2,Mon Jul 13 16:27:28 2015 UTC,"Pretty much.  They don't determine when a function is run, but they do encapsulate the process of dealing with operations that are asynchronous and how you set up the code that is run once such an operation completes (or fails).  They effectively wrap async callbacks in a new API that makes them easier to use and manage, especially when it comes to sequencing multiple asynchronous operations that may or may not depend on the completion of the previous."
javascript,3d46sm,senocular,1 point,Mon Jul 13 16:34:59 2015 UTC,Interesting... I now have a better understanding of callbacks and promises than I have in the past.  Thanks!!
javascript,3d46sm,ForScale,1 point,Mon Jul 13 16:43:47 2015 UTC,"Not ELI5 but close enough, I hope:  Synchronous functions have two types of return values: they can return successfully (with an explicit return value or undefined) or they can throw an exception. Promises represent the return values of asynchronous functions: they can either be resolved (equivalent to returning normally) or rejected (equivalent to throwing an exception).  In Python, try/catch structures can also have an ""else"" block, which is only executed if the try block completes without throwing an exception.  JavaScript promises can be explained by comparison: the code that resolves or rejects the promise (i.e. the function that returned the promise) is the ""try"" block; the two callback arguments of the promise's ""then"" method represent the ""else"" and ""catch"" blocks respectively.  Every ""then"" method also returns a promise. The promise represents the return value of whichever of the two callbacks gets executed. This means chaining ""then"" calls is a lot like nesting try/catch structures.  In a pseudo-JavaScript with Python's try/catch/else, the following synchronous code:  var v1, v2, v3; try {   try {     v1 = func1();   } catch (e1) {     // func1 raised exception e1     v2 = func2(e1);   } else {     // func1 returned value v1     v2 = func3(v1);   } } catch (e2) {   // func3 raised exception e2   v3 = func4(e2); } else {   // func3 returned value v2   v3 = func5(v2); }   ... is equivalent to this async code using promises:  func1() // -> v1 or e1 .then(func3, func2) // -> v2 or e2 .then(func5, func4); // -> v3 or another exception   It's easy to see how promises make the control flow less verbose (but also a lot more dense). Also note that the order of the functions in the ""then"" calls is inverted (catch/else vs onResolve/onReject).  Each consecutive ""then"" is equivalent to wrapping the existing structure in the try block of another try/catch/else structure.  Compared to regular callbacks promises also have the advantage that their behaviour is rigidly defined and thus makes a few guarantees:   a promise will only be resolved OR rejected exactly once (it can't be resolved and then rejected or resolved and rejected multiple times) each callback passed to a ""then"" method will only be invoked exactly once each callback will be invoked asynchronously, even if the promise has already been resolved or rejected at the time   It's also possible to call ""then"" multiple times on the same promise (remember: chaining always results in a new promise, so you need to keep a reference to the original promise) and you can omit either of the callbacks, which is the logical equivalent of omitting either of the catch/else blocks -- this should make it obvious why an error ""falls through"" if a then call does not provide a callback in the second argument (onReject), e.g. func1().then(func3).then(func5, func4) means func4 will receive both the errors caused by func1 as well as those caused by func3 (but func3 will not be invoked if func1 already failed).  Or, if you want the spectral opposite of an ELI5 answer: promises are a bit like asynchronous Maybe monads."
javascript,3d46sm,sigwhite,1 point,Wed Jul 15 11:20:10 2015 UTC,...  This stuff is crazy to me! Guess I'll just have to keep learning. Thanks for the explanation!!
javascript,3d46sm,ForScale,1 point,Wed Jul 15 13:10:48 2015 UTC,Thank you! Your comment should be a sticky post at the top of /r/JavaScript.
javascript,3d46sm,zoomzoom83,1 point,Mon Jul 13 13:31:41 2015 UTC,"That. I mostly use callbacks but when I read his post the only thing I was thinking was ""Gosh, use promises if you don't like callbacks""."
javascript,3d46sm,ThinkingCrap,5,Mon Jul 13 14:17:54 2015 UTC,I feel really bad for anyone on his team that has to work with this code.
javascript,3d13l3,Cosmologicon,1 point,Sun Jul 12 17:23:55 2015 UTC,Firefox on Android: Only survey buttons show up. No animations. :(
javascript,3d13l3,MmmCurry,1 point,Mon Jul 13 10:56:55 2015 UTC,"Okay, I'll check it out. Thanks for trying!"
javascript,3d06hp,gary_burnett,3,Sun Jul 12 11:11:50 2015 UTC,Had a play with it and I think it has a lot of potential actually. I love the concept and works reasonable but looks a bit hideous and needs some UI work and maybe some common templates like page examples for bootstrap and material.
javascript,3d06hp,funny_games,1 point,Sun Jul 12 18:19:28 2015 UTC,"Thanks for a feedback! Our team is working hard to improve React-UI-Builder and making some tutorials and documentation. I can't say nothing about UI at the moment, but common templates like a page examples will be finished soon and will be accessible through the projects gallery."
javascript,3d06hp,UMyProto,1 point,Mon Jul 13 11:26:14 2015 UTC,"The new version of React-UI-Builder is now available! Quick CSS editing panel was added - convenient way to change component's style. Now it's a time to write some tutorials and documentation, any help will be really useful for our team! Thanks everyone for interest!"
javascript,3d0fvy,gcanti,3,Sun Jul 12 13:28:55 2015 UTC,Wow. Nice benchmark results. Will test it soon.  upd. First look: components really required.
javascript,3d0fvy,virdvip,1 point,Sun Jul 12 18:15:27 2015 UTC,Made some simple benchmark of creating 1000 list item with styles and 3 sub-element:   Dot x 1000 = 37ms (String template) Cito x 1000 = 62ms Domlayer x 1000 = 84ms Sprint x 1000 = 114ms Sprint findCached x 1000 = 71ms Maquette x 1000 = 156ms jQuery x 1000 = 277ms jQuery findCached x 1000 = 155ms Mithril x 1000 = 387ms Mithril MVC x 1000 = 332ms Mithril MVC Compiled x 1000 = 235ms Mithril MVC + doT x 1000 = 38ms   Conclusion: It's the fastest vdom lib I have tested: 4x faster than Mithril compiled (I know its not a fair comparison)  I was also impressed by Sprint lib 2x speed which is a drop-in replacement for jQuery in most cases. (also 17k vs 84k)  Please note: This is not a real-world or fair test. Test results from latest Firefox
javascript,3d0fvy,nofishme,1 point,Tue Jul 14 00:29:50 2015 UTC,"Would you mind giving Inferno a try too? https://github.com/trueadm/inferno   It's very much in early development right now, but I'm looking to get feedback and thoughts from those around the JS community who can help."
javascript,3d13eh,penguinbass1,1 point,Sun Jul 12 17:22:24 2015 UTC,"I can think of a couple things off the top of my head, this sounds like a pain in the ass.   You are having to mix I/O heavy tasks with computationally expensive operations, while the hashing is happening it can block the event loop while responses start queueing up. Some server side technologies have limits on the number of requests that can have access to the session. The browser implementations that allow AJAX file uploading are still not completely standardized. Maximum number of HTTP connections could maybe be an issue At some magic number of uploads you will probably run into thrashing if memory is an issue on the client.   There are a lot of moving parts here, is there some way you can send more files per request, possibly doing a chunked file transfer?"
javascript,3d13eh,UMadBreaux,1 point,Sun Jul 12 18:30:47 2015 UTC,Thanks for the reply. I could be wrong but I don't think the hashing is causing this now that it's been separated out to a web worker. If I comment out the upload requests but still send everything through the reading/hashing process I don't experience blocking issues.    I've also tried limiting upload requests to one at a time and logging the start and end of each one while trying to make UI changes and it seems that it doesn't block during the whole duration of the request but for a good portion of it. But this isn't the most exacting testing strategy. Is there a test you can think of to figure out what part of the request is blocking?    As for chunked uploads or multi-file uploads. That is a possibility but neither options is currently built into the backend. I am building the front end application and another team is building the web service. So far they seem highly un-motivated to make any changes unless they are utterly critical. Would chunked uploads essentially allow the UI to update in between chunks instead of waiting for a whole file?
javascript,3d13eh,UMadBreaux,1 point,Sun Jul 12 19:12:49 2015 UTC,"Ha, I am going through something similar with an app I am writing. I am working with the world's dumbest API and having to push all the logic to the frontend to accommodate it, it sucks :/  I would suggest creating some controlled sets of files to upload, a set of big files, a set of small files, a set of random files, etc. so you can try to hunt down any trends. I am sure there are some JS debugging tools that can help you step through things and profile where your code is spinning around in circles, unfortunately I am more of a .NET guy.  Correct on the chunked uploads. You can divide a file into segments and upload them individually, the server confirms each part and if there is a failure to receive the data then you can resubmit without having to interrupt the whole upload operation and start over for that file."
javascript,3d1a10,spacejack2114,3,Sun Jul 12 18:16:30 2015 UTC,"However if you're creating many instances (say thousands or even millions, or with a lot of function code) you want to be sure that the browser will do smart things like optimize out the duplicate functions and not leak memory.   Closures are absolutely foundational to the language, so therefore they are supported identically cross browser even including old IE*.  I will get to the caveat in a bit (and its not limited to IE).  Most simply put a closure is a declared reference accessed across scope boundaries.  This means the limits to effectively optimizing use of closures in any given implementation is a factor of how efficient the interpreting software is at storing large numbers of references in memory.  If a given application has so many variables that a modern computer with 2gb of ram crashes running the code due only to the number of references then you might want to rethink your programming approach.  Now, you used the word instances, which makes me suspect you are talking about poly-instantiation.  For the narrow constraints of this problem I would say poly-instantiation is irrelevant. It does allow sharing of properties and prototypes (which is more memory efficient), but as far as closure is specifically concerned we only care about the actual reference, which does occupy memory.  As far as execution performance closures are always efficient and the ideal approach. A nearby closure means less resolution time to find the reference.  If you are concerned if you should or should not use closures to obtain superior performance then absolutely use closures.  This is only reference resolution though, and there are far more important low hanging fruit to improve upon in order to achieve better performance.  Perhaps the most important things you can do is to write the most terse and least sloppy code possible and also never type recast (change data types) upon your references.  About that caveat.... When we are talking about JavaScript only there are no memory leaks regarding closures in any browser.  This is a common misunderstanding.  Memory leaks aren't limited to IE and are more related to external interfaces than closures.  Memory leaks can occur when a reference points to some external quality (such as a DOM node) and is used in closure.  Some browsers may not know when to perform garbage collection upon the artifact and the safest course of action is never perform garbage collection prematurely.  After all it takes longer for memory leaks to become an apparent problem than an immediately failing application.  Old IE would use a separate memory allocation for DOM references apart from JavaScript so even if IE garbage collected everything from JavaScript properly it would still miss garbage collecting DOM artifacts.  Crockford wrote something more detailed on this:  http://javascript.crockford.com/memory/leak.html"
javascript,3d1a10,achen2345,1 point,Sun Jul 12 19:47:39 2015 UTC,One specific case I was thinking about is:  function Thing() {     this.a = 5;     this.b = 'something';     // etc. } Thing.prototype.process = function() {     // lots of complex code };   versus:  function Thing() {     var a = 5;     var b = 'something;     // etc      function process() {         // lots of complex code         // will this get duplicated for each instance in old browsers?     }      return {         process: process     }; }
javascript,3d1a10,oculus42,1 point,Sun Jul 12 20:08:42 2015 UTC,"That will get duplicated across instances. You should move it outside to a module:  var module = Object.create(null); // Optional empty object module.process = function (a, b) {     // lots of complex code };  function Thing() {     var a = 5;     var b = 'something';     ...      return {         process: function() {             // This function has access to the instance             // So the module does not need it.             return module.process(a, b);         }     } }   You can even put that module inside a closure, so it's only accessible to instances of Thing:  // Closure var Thing = (function(){      function processInClosure (data) {         // lots of complex code     };      function ThingConstructor() {         // Use an object if process needs to make changes.         var data = {             a: 5,             b: ""something""         };         ...          return {             process: function() {                 return processInClosure(data);             }         };     }      // Expose the constructor     return ThingConstructor; }());"
javascript,3d1a10,oculus42,2,Sun Jul 12 20:57:28 2015 UTC,"Thanks. I'm wondering if it will actually get duplicated though, as I've read various comments here and on Stackoverflow saying this is an optimization that has been made in current browsers. I'm not sure what browser versions this applies to though."
javascript,3d35tn,nsisodiya,1 point,Mon Jul 13 03:47:37 2015 UTC,"All these rules should apply to programming in general, nothing specific to Javascript except the isomorphic one which I will disagree.   I absolutely don't see a requirement to swith to isomorphic if you're already working on a long term codebase. I won't call it a fad because it actually improves performance but you can't ship to production if you're busy adopting every monthly performance trend, unless you're the company defining the trends such as Facebook."
javascript,3d35tn,xxxabc123,1 point,Mon Jul 13 07:46:25 2015 UTC,"Yes, almost everybody objected on ""isomorphic"".  But the context is ""Large scale SPA"". we have been have facing problem of ""slow load of first page"". Now ISOmorhpic can solve that problem. that is why I have included in the blog. Thanks"
javascript,3d35tn,natdm,1 point,Mon Jul 13 10:01:42 2015 UTC,"Wait, you're coding wrong if it's not isomorphic??"
javascript,3d35tn,neb636,1 point,Mon Jul 13 04:26:04 2015 UTC,"This post mainly target - SPA. SPA is slow for first page. So we do Universal or isomorphic then first page render is fast in your SPA. I guess, it is 2015 and there is no reason not to code Isomorphic !"
javascript,3d35tn,siegfryd,3,Mon Jul 13 04:42:58 2015 UTC,You should look at the performance of www.hotelsoft.com  I think you have a ways to go for performance before even thinking of things like isomorphic js. I'm getting 7 second first load time and it just looks like a run of the mill WordPress site. That is really low hanging fruit to optimize. I have seen SPA's first load on the client (no server side rendering) in under a second.
javascript,3d35tn,lennelpennel,1 point,Mon Jul 13 06:27:24 2015 UTC,"See, I do not manage this website. I am not suppose to work on this. I am here for last one month to design SAAS based product. So I am just sharing my experience. I have total of 6-7 years of experience. I too made mistakes in past and found suitable path."
javascript,3d35tn,check_ca,2,Mon Jul 13 09:51:36 2015 UTC,Being isomorphic is only a relatively recent fad and it's non-trivial to go back and add it in to something that wasn't designed for it to begin with.
javascript,3d0o16,actLikeApidgeon,1 point,Sun Jul 12 15:01:58 2015 UTC,"This is something I'm looking forward to experiment with the app I'm building, but I was also wondering if anybody has any idea what would be the scalability and stability of serving static pages through PhantomJS (although the traffic might actually be smaller due to the fact that it will only serve bots and crawlers)."
javascript,3d0o16,check_ca,2,Sun Jul 12 15:03:35 2015 UTC,"I am a co-founder of SEO4Ajax. If you don't use any cache to store your snapshots, the crawl rate of (Google) bots will be very low. So, I would recommend to never do a snapshot in real-time for search engine bots (vs social network bots). That is how our service behaves by default."
javascript,3czzst,lolcucumbers,3,Sun Jul 12 09:13:25 2015 UTC,Awesome. 10/10. Would declare again.
javascript,3czzst,00mba,1 point,Sun Jul 12 09:55:32 2015 UTC,"I don't know if this is the right place, but does it have to be called emojify? I maintain a library called emojify.js, and they do completely different things."
javascript,3czzst,skrawg,1 point,Sun Jul 12 11:08:13 2015 UTC,"emojify.js   I think the ""-ify"" suffix has been pretty much monopolized by Browserify transforms these days: https://github.com/substack/node-browserify/wiki/list-of-transforms"
javascript,3czzst,tofueggplant,1 point,Sun Jul 12 23:36:50 2015 UTC,"As you note on the readme, this doesn't product valid JavaScript.  You can use emoji as keys on an object, so you could make valid JavaScript peppered with emoji:  var methods = {     '💩': function(x){ return x+1; },     '🚀': function(a) { return methods['💩'](a * 4); } }   Efficiency not guaranteed."
javascript,3czzst,oculus42,1 point,Sun Jul 12 20:42:35 2015 UTC,Yup! That's totally right.
javascript,3czzst,ImAPyromaniac,1 point,Sun Jul 12 23:06:19 2015 UTC,We need a swift counterpart. Then we could run it
javascript,3cxkex,tpk1024,4,Sat Jul 11 17:55:36 2015 UTC,"Holy crap!! TIL, ty!"
javascript,3cxkex,tsteuwer,16,Sun Jul 12 02:54:35 2015 UTC,Just because you can doesn't mean you should. :)
javascript,3cxkex,matthewjosephtaylor,6,Sat Jul 11 18:59:38 2015 UTC,"Disagreed. This isn't goto, it's basically the equivalent of break 2."
javascript,3cxkex,Doctor_McKay,4,Sat Jul 11 19:53:04 2015 UTC,or... breakto
javascript,3cxkex,senocular,0,Sat Jul 11 20:05:59 2015 UTC,"In most (99%) of the code I've seen, if you have nested loops you're performing some logical functionality can be extracted into a standalone method to yield shorter (and thus easier-reasoned-about) methods."
javascript,3cxkex,ItzWarty,12,Sun Jul 12 06:59:15 2015 UTC,"Other C-based languages also have similar features, along with goto. Though there's a widespread hate towards goto, you should never be afraid to use it if the scenario truly justifies it."
javascript,3cxkex,ark3,13,Sat Jul 11 19:43:06 2015 UTC,"you should never be afraid to use it if the scenario truly justifies it   You should be afraid. You should be afraid that your scenario doesn't justify it, because it almost certainly does not.  Unless you are writing something like a cross-compiler where a normal user is never supposed to view your code, label-based flow control has zero place in code that is meant to be human readable."
javascript,3cxkex,matthewjosephtaylor,11,Sat Jul 11 21:40:00 2015 UTC,But isn't the concept of functions and objects a form of label based flow control?
javascript,3cxkex,Syphon8,5,Sat Jul 11 23:28:22 2015 UTC,"It's possible to get into a semantic argument about it, but for the most part no.    Flow control changes the 'direction' of the program 'if this do that else that other thing'.   Functions are black boxes that you are required to step into and out of, they aren't conditional and their evaluation doesn't change what step will be executed after they are returned from.  Objects are a way of representing/packaging and don't really have anything to do with flow control at all."
javascript,3cxkex,matthewjosephtaylor,1 point,Sun Jul 12 00:12:32 2015 UTC,Your first hint that you need to refactor is that you have heavily nested code
javascript,3cxkex,marx2k,6,Sun Jul 12 07:53:56 2015 UTC,But but but what about hating goto? I thought it was cool to hate goto in any situation!!
javascript,3cxkex,Doctor_McKay,2,Sun Jul 12 11:47:32 2015 UTC,Goto?
javascript,3cxkex,skitch920,2,Sat Jul 11 19:54:34 2015 UTC,"Note that JavaScript has NO goto statement, you can only use labels with break or continue."
javascript,3cxkex,Doctor_McKay,0,Sat Jul 11 19:19:03 2015 UTC,"I know.  The functionality is similar to goto because it's telling the compiler to ""jump"" to a particular statement, irrelevant of completing the currently scoped statement.  It's only different because you can't jump to a label, you can only ""break to"" the label.  Either way, it's terrible flow control.  The reason people hate goto is because it often creates spaghetti code, make's things hard to read and can be a bitch to debug.  If you can use labels with break, then there are other places you can use labels... switches, code blocks.  var cars = ['Toyota', 'Ford', 'GM', 'Audi', 'Pontiac']; var text = ''; listA: {     text += cars[0];     listB: {         text += cars[1];          break listA;         text += cars[2];      }     listC: {         text += cars[3];          break listA;         text += cars[4];      } } console.log(text); // ToyotaFord"
javascript,3cxkex,skitch920,5,Sat Jul 11 19:54:03 2015 UTC,"Every flow control mechanism in every language is similar to - and implemented with - goto. If-statements, loops, switches, functions. They're all just more-readable goto statements, just as labelled statements are."
javascript,3cxkex,temp120948,1 point,Sat Jul 11 20:12:21 2015 UTC,"more-readable   The word you are looking for is ""structured"".  http://homepages.tig.com.au/~ijoyner/Ian_Joyner/Structured_Programming.html   More subtly are the break, continue, and return statements used in popular languages. These are more convenient forms of goto that don’t need an explicit target label, but they do undermine the structured flow of control.   I didn't even know labeled break/continue statements existed in JavaScript, but if we're comparing it to goto, it's just as disingenuous to flow control.  I have no problem with goto, I'm just saying this is almost a goto."
javascript,3cxkex,skitch920,3,Sat Jul 11 20:17:11 2015 UTC,"First of all, you can't continue like that. continue can only be used on loops.  There is nothing wrong with labelled continues and breaks. They are not that different from early returns. The problem with goto is that you can go to a position in code without understanding what state you bring with it."
javascript,3cxkex,nickguletskii200,2,Sat Jul 11 20:41:52 2015 UTC,"You didn't actually try to run that, did you? continue can't be used outside of loops."
javascript,3cxkex,x-skeww,1 point,Sat Jul 11 23:01:25 2015 UTC,meant to write break
javascript,3cxkex,skitch920,1 point,Sat Jul 11 22:29:10 2015 UTC,"Your comment was caught by the spam filter, can you repost with just the final URL? It'll be more obvious that it's a PDF that way, too.  edit: here's a fixed version of the comment:   /u/Evanescent_contrail  This is best avoided, and is almost always a sign of bad coding. Read 'Goto considered harmful'.  https://www.cs.utexas.edu/users/EWD/ewd02xx/EWD215.PDF"
javascript,3cxkex,kenman,1 point,Sun Jul 12 05:08:05 2015 UTC,"My assembly language professor forbid the use of goto, she insisted we use jal. Anyways, I had to use goto in the fall semester last year in a C++ program in my programming languages class...I couldn't think of anyway to break out of the loop.  for (list<int>::const_iterator i = first.begin(); i != first.end(); ++i) {         for (list<int>::const_iterator j = second.begin(); j != second.end(); ++j) {             if (*i == *j) {                 gcf = *i;                 goto Exit;             }         }     }      Exit:         cout << ""GCF is: "" << gcf << endl;"
javascript,3cxkex,papers_,1 point,Sat Jul 11 19:56:41 2015 UTC,"Declaring a ""found"" variable, and when you find your value (in your if statement), set that variable to true, set the gcf, break out of the inner loop, and check the truth of the ""found"" variable immediately after the inner loop (inside the outer loop), that would break that outer loop if set to true. Encapsulate both loops in a function, that would simply return your new gcf pointer (if possible, depends on the rest of the code)."
javascript,3cxkex,leadzor,2,Sat Jul 11 20:39:59 2015 UTC,"Those who argue against the 'found' in favor of goto: 'found' is more expressive to readers of your code (""iterate while we haven't found something""). And since the performance argument always pops up, the performance difference is negligible."
javascript,3cxkex,ItzWarty,1 point,Sun Jul 12 04:14:46 2015 UTC,Exactly. Plus we're in c++ area. The compiler probably does a better job optimizing your code than the little algorithm tweaks. Either using goto or the found flag would probably produce the same machine code. But preemptive performance tweak is bad in most cases.
javascript,3cxkex,leadzor,1 point,Sun Jul 12 05:02:53 2015 UTC,This is the place for a while loop. Use a for loop when you intend to iterate through the entirety of an object/structure.
javascript,3cxkex,liquiddeath,1 point,Sun Jul 12 07:09:34 2015 UTC,"I'd argue that in most languages, for benefits in scoping your iterator while 'while' does not."
javascript,3cxkex,ItzWarty,1 point,Sun Jul 12 12:47:36 2015 UTC,This would haven been very handy a few weeks back when I was filtering stuff with about 4 levels of loops.
javascript,3cxkex,pier25,-2,Sun Jul 12 05:12:40 2015 UTC,That's a sign you need to refactor
javascript,3cxkex,marx2k,3,Sun Jul 12 07:11:16 2015 UTC,Or maybe he's dealing with some crazy nested data structure? The world isn't black and white.
javascript,3cxkex,Doctor_McKay,3,Sun Jul 12 04:58:37 2015 UTC,Exactly
javascript,3cxkex,pier25,1 point,Sun Jul 12 11:53:47 2015 UTC,"We can talk hypothetically all day, but the advocates of gotos/labeled breaks/continues and highly-nested loops have yet to provide an example for others to argue against, and the burden really rests upon them. One could argue that in 99% of cases, if you have a ""crazy nested data structure"" you likely have a maintainability crisis (google the Java community's definition of a trainwreck)."
javascript,3cxkex,ItzWarty,1 point,Sun Jul 12 13:42:19 2015 UTC,Can anyone think of a good reason to do this?
javascript,3cxkex,NoddysShardblade,6,Sun Jul 12 16:59:29 2015 UTC,Are you telling me that you've never broken out of a loop? Breaking out of a single loop and breaking out of a nested loop aren't all that different.
javascript,3cxkex,Doctor_McKay,1 point,Mon Jul 13 03:57:49 2015 UTC,Surely there has to be a better example than breaking out of the loop to justify the usage of label. I could just use return and break out of the function/loop to achieve the same behaviour.
javascript,3cxkex,shriek,2,Sun Jul 12 00:58:03 2015 UTC,"Maybe, but gotta show it. The first example on the site is as clear as water to me (although I think loop2: was unnecessary).   When I try to write the same logic, I usually use a boolean variable and have an if statement in the outer loop that checks in each iteration. I prefer this one, but don't/won't use it because it's not common for other people."
javascript,3cxkex,xxxabc123,1 point,Sun Jul 12 03:27:50 2015 UTC,"In the same vein, I can achieve that by writing functions and get the benefit of code re-usablity and portability or modular whatever you wanna call it instead of hard-wiring labels on loops even if it means increase in LOC."
javascript,3cxkex,shriek,1 point,Sun Jul 12 03:50:55 2015 UTC,"The second example could easily be rewritten as (in pseudocode, though totally possible in JS):  var itemsPassed = 0; foreach (var item in items) {   if (tests.All(test => test.pass(item)) {     itemsPassed++;   } }   The first example is pretty much unreadable (""clever code"") and pretty much unmaintainable. It would be better to forego the contrived gotos and simply use a break in the inner loop, cutting down 2 loc you have to reason about."
javascript,3cxkex,ItzWarty,1 point,Sun Jul 12 05:33:04 2015 UTC,"I think the second example on the site is the unreadable one, your version is obviously more readable.   The first example tries to show the power of nested loop statements (that's why there's unused loop2), but it is essentially this:  for(var i = 0; i < 3; i++) {     for(var j = 0; j < 3; j++) {         if(i == 1 && j == 1) {             break;         }         console.log(i, j);      } }   It's not too much different actually. Yes, people argue that it's not maintainable and that's why I used I won't use it, as I share my code with others. But for small amounts of lines like this, I think it's a reasonable alternative."
javascript,3cxkex,xxxabc123,0,Sun Jul 12 06:37:42 2015 UTC,items.filter(function (i) { return doesIPass(i); }).length
javascript,3cxkex,marx2k,1 point,Sun Jul 12 07:03:40 2015 UTC,Or items.Count(item => tests.All(test => test.Pass(item))) in c# land!   Great point!
javascript,3cxkex,ItzWarty,0,Sun Jul 12 07:41:54 2015 UTC,Nice! :D
javascript,3cxkex,marx2k,2,Sun Jul 12 11:52:14 2015 UTC,What's wrong with labels?
javascript,3cxkex,Doctor_McKay,1 point,Sun Jul 12 13:16:41 2015 UTC,"It feels imperative and harder to reason about when used with long code base, that's my only concern."
javascript,3cxkex,shriek,1 point,Sun Jul 12 21:34:40 2015 UTC,"I agree. 99% of the time when people use labels they could probably restructure their code in a more sound way. I've yet to be presented a high-level case (as in, not writing a jitter) where that is not the case and higher-level language concepts (e.g. object disposal patterns) would not yield a better solution."
javascript,3cxkex,ItzWarty,2,Sun Jul 12 13:36:30 2015 UTC,"No, but I want to anyway."
javascript,3cxkex,clearfact,-1,Sun Jul 12 15:57:24 2015 UTC,"No. It's a rare trick that will make your code less readable and can be completely emulated by refactoring the inner loop to a function or using a boolean. It carries superficial convenience that doesn't justify it's terrible lack of readability if used in a less contrived example, e.g. If the body of the loop is longer. I would be surprised if IDEs even supported it."
javascript,3cxkex,maplemario,0,Mon Jul 13 03:55:40 2015 UTC,"While not even in the same bracket of egregiousness as inconsiderate use of goto, this is a pattern that will make your code less readable because it is so rare (rare enough to be a TIL). What's worse, you can produce the exact same behavior by refactoring the inner loop to a function and returning from it, or just using a boolean. It carries superficial convenience at best."
javascript,3cxkex,maplemario,1 point,Sun Jul 12 10:37:22 2015 UTC,Making the inner loop a function  and returning from it is no different than using continue.
javascript,3cxkex,Doctor_McKay,1 point,Sun Jul 12 04:21:18 2015 UTC,"Well, technically break, but either way I think this is just a cool little factoid that would be inane if ever used in production. Certainly if anyone at my company used it I would give them shit about it for weeks."
javascript,3cxkex,maplemario,1 point,Sun Jul 12 04:23:27 2015 UTC,It's really no different than using a boolean that breaks the outer loop. I think you're just ingrained with hate for labels because of goto and how it's cool to hate on goto.
javascript,3cxkex,Doctor_McKay,1 point,Sun Jul 12 13:45:04 2015 UTC,"No, it's more that if they were commonplace then it would be ok but as it's a feature that most people don't even know about you really shouldn't use labels when working on a team or contributing to open source code."
javascript,3cxkex,maplemario,1 point,Sun Jul 12 14:34:40 2015 UTC,"Or... maybe people should learn about the languages they're using? Revolutionary idea, I know.   A lot of people's misunderstandings about JS could be solved by reading a simple language guide."
javascript,3cxkex,Doctor_McKay,1 point,Sun Jul 12 14:56:23 2015 UTC,"I'd rather my team spend time learning about contexts and closures -- language structures that are widely applicable and can't be swapped out for a simple design pattern -- before anything like this. I don't know, this seems like a silly argument, but I don't think you can deny most people would be disoriented and might even have to look this up if they saw it in a shared codebase."
javascript,3cxkex,maplemario,0,Sun Jul 12 15:09:07 2015 UTC,"oh no! they might have to learn something?  you're full of shit, your argument makes no sense.  what else do you want to hide from your team? they sound easily distracted and not very good, if you think you need to hide something about the language they are programming with."
javascript,3cxkex,leptons,1 point,Sun Jul 12 15:13:54 2015 UTC,"This is all a hypothetical. Look, this is a silly argument, even before you resorted to the ad hominem attack this was and will continue to be an undesirable development pattern, whether or not you get incensed about it being so is another matter entirely."
javascript,3cxkex,maplemario,0,Sun Jul 12 17:39:52 2015 UTC,"this was and will continue to be an undesirable development pattern   Again, full of shit."
javascript,3cxkex,leptons,0,Sun Jul 12 20:07:51 2015 UTC,"One is easier to reason about, the other isn't. Those in this thread in favor of using labelled breaks and continues have yet to provide a real-life example for others to argue against, and the burden really lies on you guys to carry this discussion forward. Hell, I don't think anyone in this thread is in favor of the contrived examples provided by MDN."
javascript,3cxkex,ItzWarty,0,Sun Jul 12 20:24:42 2015 UTC,"this is a pattern that will make your code less readable because it is so rare   so just because many js developers are noobs and may not know they can use labels to continue or break for loops, that means that it should be avoided?   That sounds like the cart before the horse."
javascript,3cxkex,leptons,1 point,Sun Jul 12 21:11:28 2015 UTC,"Alright, whatever, you go ahead and single handedly make it a viable development pattern. I don't care :P"
javascript,3cxkex,maplemario,0,Mon Jul 13 04:03:52 2015 UTC,The code clarity between using it and not would have to be pretty substantial to justify its use. It's a hurdle for anyone reading the code since it's a very rare programming idiom these days.
javascript,3cxkex,randfur,-1,Sun Jul 12 20:01:14 2015 UTC,If you're nesting loops there's probably a bigger issue going on. In my 20 years I think i've used continue less than 5 times. I still use break every now and then when searching for a value where when found I want to stop searching.
javascript,3cxkex,utuxia,1 point,Sun Jul 12 20:35:03 2015 UTC,Sometimes there's no other way. You've not been doing complicated stuff in that 20 years apparently.
javascript,3cxkex,794613825,1 point,Sun Jul 12 03:22:19 2015 UTC,Nope. I avoid complication. Its the key to good code.
javascript,3cxkex,utuxia,3,Sun Jul 12 04:00:46 2015 UTC,"Never had to work with every value of a matrix, or any set above one dimension?"
javascript,3cxkex,794613825,0,Sun Jul 12 06:24:06 2015 UTC,not as a web developer. no.
javascript,3cxkex,utuxia,3,Sun Jul 12 06:25:24 2015 UTC,"Fair enough I suppose, there isn't that much need for it in web dev. Making JavaScript games for example though absolutely requires it."
javascript,3cxkex,794613825,1 point,Sun Jul 12 06:28:59 2015 UTC,Could you provide your best example of where this might be necessary?
javascript,3cxkex,ItzWarty,-1,Sun Jul 12 06:42:15 2015 UTC,Are you sure you're not just coding using antiquated patterns?
javascript,3cxkex,utuxia,3,Sun Jul 12 06:46:06 2015 UTC,"Unless I'm missing something, you need n nested for looks to work with every value of an n-dimensional matrix."
javascript,3cxkex,794613825,1 point,Sun Jul 12 07:13:01 2015 UTC,I don't know much about that....but have you looked a map reduce
javascript,3cxkex,utuxia,1 point,Sun Jul 12 06:49:04 2015 UTC,"Most code doesn't need to support n-dimensional matrices as well (e.g. in games, you're hopefully at worst working with a 3-dimensional array) so if you need to iterate through elements, you can replace:  foreach (x in xs)    foreach (y in ys)      foreach (z in zs)        f(arr[x,y,z], x, y, z);   with  arr.helper(f);   where helper is defined as (in pseudocode)  function helper(self_array, f) {   for (x in xs) {     for (y in ys) {       for (z in zs) {         f(self_array[x,y,z], x, y, z);       }     }   } }"
javascript,3cxkex,ItzWarty,0,Sun Jul 12 06:59:28 2015 UTC,It's extremely rare to have n-dimensional matrices where n > 2.
javascript,3d0tch,tutuca_,1 point,Sun Jul 12 15:53:11 2015 UTC,aurelia
javascript,3d0tch,ogrechoker,0,Sun Jul 12 16:00:57 2015 UTC,"They're all compatible, you just need to think about what's actually happening behind the scenes and write your code in a way that bridges the gap.  The issue described in your link is the result of a stupid way to approach software development. Have you tried using getters/setters instead?"
javascript,3d0hdn,webmanio,2,Sun Jul 12 13:49:01 2015 UTC,"JavaScript developer, used-to-be-Flash developer here. The Flash application has to actively expose the data that you want to retrieve through JavaScript. This is accomplished through the ExternalInterface class in ActionScript 3.  http://help.adobe.com/en_US/as3/dev/WS5b3ccc516d4fbf351e63e3d118a9b90204-7cb1.html"
javascript,3d0hdn,cdebotton,1 point,Sun Jul 12 14:38:07 2015 UTC,Are there someway to check if a Flash file exposes anything like this?  EDIT: It's because I have a arcade website which I would like to make scores for :)
javascript,3d0hdn,senocular,1 point,Sun Jul 12 15:12:26 2015 UTC,"Given that it seems your not the creator of the game, and presumably are not in contact with the creator, if where you're getting the game isn't already set up to do this now, my guess is chances are the game is not set up to do it."
javascript,3cwqys,boweruk,63,Sat Jul 11 13:08:17 2015 UTC,"Normally function g(){} would be a function declaration at which point the function variable (g) and its value (function definition) would be hoisted and made available to the rest of the script.  However, in this context, because its being used in an expression, it becomes a function expression which instead of being a hoisted declaration instead resolves into just a function value which can be used in context of other code and be assigned to a variable or passed to a function etc.  Function expressions can be named, as with your example, but as an expression that name does not become a variable (it did this incorrectly in older versions of IE but we're trying hard to pretend they never existed).  Instead any reference you have to that function depends on how you saved it from that expression, in your case to f.  What good is the name then?  It serves two purposes. First it makes it easy to identify the function by name in certain situation where it might otherwise be nameless and confusing, such as in debugging.  Compare:  console.log(function(){}); // -> function () or function anonymous console.log(function foo(){}); // -> function foo   Naming the function here makes it clear which function is being referenced (imagine many, confusing ""anonymous"" named functions in your code if you didn't name them) which can help you more easily understand whats being called or where a callstack is going (or has been)  Secondly named function expressions are able to reference themselves by name in the function itself in case you need it for recursion.  Not the best example, but you get the idea:  var f = function g(s){     if (arguments.length === 0){         return g('no arguments')     }     console.log(s) };  f('hi') // -> hi f() // -> no arguments   What's confusing about this is a) as you've already seen, the g in var f = function g(){} is not made into a local variable in the current scope.  This is something to keep an eye on and remember if a function declaration is ever put in the context of an expression that makes it a function expression.  b) function declarations do not have the same internal name reference that function expressions have since their names become local variables in the parent (parent to the function's own body) scope.  Instead they just inherit that name from the parent scope.  Normally this shouldn't matter, and you can forget I'm bringing this up, but there are cases where it can lead to problems:  function g(s){     if (arguments.length === 0){         return g('no arguments') // g captured from parent scope     }     console.log(s) };  g() // -> no arguments  var f = g; // save original g = function() {     console.log('yo, I ate your g') }  f() // -> yo, I ate your g   Because g is in the parent scope from the declaration and not captured internally by the function (when used as an expression) there's a chance it can be overridden and therefore cause the function to have different behavior.  There's safety in the expression case because that name is not accessible outside the function itself."
javascript,3cwqys,senocular,2,Sat Jul 11 13:39:56 2015 UTC,Fantastic response. Thanks!
javascript,3cwqys,androbat,9,Sat Jul 11 20:03:44 2015 UTC,"In this case, g is an internal label. All functions have a .name property attached to them. This is a way for a function to reference itself internally. Try these three functions in your console:  function foo() {   console.log('the name is: ' + f.name); };  var foo = function bar() {   console.log('the name is: ' + f.name); };  var foo = function () {   console.log('the name is: ' + f.name);   console.log(""the name string exists, but it's length is: "" + f.name.length); };   You'll notice that the first two have the label, but the third does not (it's assigned to empty string and has a length of zero).  Think about what happens if my function calls itself. The following (very inefficient) function calls itself once for each number in 'b' to be added to 'a'. I added a self-executing lambda to show the outer scope.  (function () {   var addSlowly = function (a, b) {     return (b === 0) ? a : addSlowly(a + 1, b - 1);   };   addSlowly(3, 4); //=> 7 }());   When the function tries to call addSlowly, it sees that there's no variable by that name in the inner scope, so it tries the outer scope, finds that function, then runs that function. What happens if we change the outer name though?  (function () {   var addSlowly = function (a, b) {     return (b === 0) ? a : addSlowly(a + 1, b - 1);   };   var something = addSlowly; //something now points to addSlowly   addSlowly = 'foo'; //something now points to our function, but addSlowly does not   something(3, 4); //=> ERROR! }());   When the function tries to call addSlowly this time, it checks the inner scope, but nothing matches, it then tries the outer scope, and finds a variable with the same name. When it tries to execute, it fails because that variable is now a string.  Let's fix that problem by giving our function a label.  (function () {   var addSlowly = function addSlowly(a, b) {     return (b === 0) ? a : addSlowly(a + 1, b - 1);   };   var something = addSlowly; //something now points to addSlowly   addSlowly = 'foo'; //something now points to our function, but addSlowly does not   something(3, 4); //=> 7 }());   I could have made the label 'inner' or whatever else, but I chose the same name to illustrate the scope chain. This time, when we call something, it runs the function. When the function tries to find addSlowly, it sees that the variable is in the current scope, so it runs the function (itself) and never checks the outer scope.  If you have a function that calls itself recursively (for example, it goes through a directory or DOM tree), you should give that function a label so that if that function is ever passed to your user, then it will still be guaranteed to work properly (note: you should not use labels in IE8)."
javascript,3cwqys,bliow,1 point,Sat Jul 11 13:48:25 2015 UTC,Another great response. Thanks for explaining this!
javascript,3cwqys,androbat,1 point,Sat Jul 11 20:03:59 2015 UTC,"addSlowly(3, -1) :)"
javascript,3cwqys,oculus42,1 point,Sun Jul 12 01:14:18 2015 UTC,"Yeah, I realized that, but writing a wrapper to handle that logic detracted from the core explanation. We'll just say that the function is defined for unsigned integers (as it also breaks with floating point numbers)."
javascript,3cwqys,fforw,3,Sun Jul 12 13:44:20 2015 UTC,Kangax has a really good and quite complete article on named function expressions which is what you describe.
javascript,3cwqys,thewazir,2,Sat Jul 11 13:23:41 2015 UTC,"Updates fn.name, makes Internet Explorer cry.."
javascript,3cwqys,a-t-k,2,Sat Jul 11 13:57:07 2015 UTC,"Check this out Named function expressions demystified by Juriy ""kangax"" Zaytsev"
javascript,3cwqys,oculus42,1 point,Sat Jul 11 19:56:14 2015 UTC,I'll check it out. Thanks!
javascript,3cwqys,jacobp100,2,Sat Jul 11 20:04:09 2015 UTC,g is defined as a function in the local scope; f receives a pointer to the same function. Both g() and f() will do nothing without errors.
javascript,3cwqys,_doingnumbers,3,Sat Jul 11 13:12:29 2015 UTC,"That is true in IE 8, but not for more recent browsers. The named function g isn't accessible.  You can run a simple IIFE (to provide a scope) to test:  (function(){      var foo = function bar(){ return 2; };     foo();     bar(); }());   You will get ReferenceError: bar is not defined"
javascript,3cwqys,Mael5trom,1 point,Sat Jul 11 13:32:06 2015 UTC,"Actually, this was IE8 behaviour, except not really. Writing the example would give you two separate functions."
javascript,3cxn82,sonemonu,3,Sat Jul 11 18:19:50 2015 UTC,I wonder if the typescript will stay or eventually fade away for angular 2 as ES6 becomes the standard
javascript,3cxn82,funny_games,2,Sat Jul 11 18:29:57 2015 UTC,"Don't think so. TypeScript is just a superset of ESNext (ES6, ES7, ...) and the Angular team chose it not only by its decorators (merged from AtScript) but mainly because of it is a strongly typed language (and it do supports interfaces).  More info here: http://victorsavkin.com/post/123555572351/writing-angular-2-in-typescript"
javascript,3cxn82,x-skeww,-1,Sat Jul 11 19:08:19 2015 UTC,"ES6 doesn't support decorators or type annotations.  Also, the same codebase is also used for the Dart version of Angular 2. The types are very important.  They will switch once ES8 (or whatever) supports types. Decorators will probably be in ES7.  Anyhow, you can write your Angular 2 application in ES6, but there aren't any upsides to that. It just means more keypresses and dumber tools."
javascript,3cxn82,hahaNodeJS,0,Sun Jul 12 01:50:06 2015 UTC,It won't. TypeScript is about providing type support.
javascript,3cxn82,Auxx,3,Sun Jul 12 02:14:43 2015 UTC,"Too much boiler plate code, pfff..."
javascript,3cxn82,androbat,3,Sat Jul 11 19:22:09 2015 UTC,"The big question to my mind is why I would use this over React?  Angular2 does what React does, but with more complexity and makes composability harder."
javascript,3cxn82,androbat,1 point,Sun Jul 12 14:06:50 2015 UTC,"React by itself is just the ""V"" from the MVC pattern, Angular is a full MV* framework. Thus it gives you a lot more organization when you are part of a big team / project; of course, that might be seen as an advantage or a disadvantage according to each case, but IMHO, in the end almost always it ends up being an advantage."
javascript,3cxn82,Auxx,2,Sun Jul 12 17:54:21 2015 UTC,"React was marketed as such, but react is the VC and sometimes the M depending on how you implement your app.   Angular has VC as well, but doesn't really have a model. ngResource isn't really a model and one usually needs to swap in something like restangular just as one would swap in flux. Angular's other system for models is services and factories, but once you strip the dependency injection, they are POJO.  The framework that actually has everything under one roof is ember."
javascript,3cxn82,Auxx,1 point,Sun Jul 12 20:12:28 2015 UTC,Where?
javascript,3cxn82,Auxx,2,Sat Jul 11 19:56:25 2015 UTC,"Everywhere!  Blocks @Component, @View, etc in TS files. Why is this code needed? It should be optional, to override defaults.  20+ lines of bootstrap code in index.html. Why?  What is the purpose of services.ts? Why the framework can't resolve components without me writting a shit ton of bootstrap code and configuration? Is this somekind of back to 90-s attitude?  Pfff..."
javascript,3cxn82,Auxx,0,Sun Jul 12 18:33:05 2015 UTC,"""20+ lines of bootstrap code in index.html. Why?""   Because Angular 2 is still in alpha version, i. e., that is just an experimental version which let you play with some features. A lot of things are going to change and improve, for sure ;-)    ""Blocks @Component, @View, etc in TS files. Why is this code needed? It should be optional, to override defaults.""   Which defaults are you talking about? I think having defaults does not make sense in those cases."
javascript,3cxn82,x-skeww,1 point,Sun Jul 12 21:41:10 2015 UTC,"OK, agree about Alpha stage.  About views etc. Why do I need to specify those? I don't specify them in Ruby, because convention over configuration. The less code I write - the better! :) I want to focus on business logic, not on declaring configuration files, etc."
javascript,3cxn82,x-skeww,1 point,Mon Jul 13 14:35:45 2015 UTC,"Ah, do you mean having a default path for the view of a component? Well in that case, I guess the reason is there are important differences between a backend framework (like Ruby on Rails) and a client-side framework (like Angular); a client-side framework can't access the file-system (at least not without a lot of limitations) and it needs to be agnostic from the backend-side.  AFAIK that is an ""issue"" of all the client-side frameworks..."
javascript,3cxn82,x-skeww,1 point,Tue Jul 14 12:10:55 2015 UTC,"Well, regular frameworks do not access file system directly too. I don't see any problems here."
javascript,3cz9b0,SomeRandomBuddy,6,Sun Jul 12 03:20:22 2015 UTC,Check out ReactEurope?   Nick Schrock & Dan Schafer - Creating a GraphQL Server at react-europe 2015
javascript,3cz9b0,Calabri,2,Sun Jul 12 04:57:39 2015 UTC,Not sure how I originally missed this video.. Basically answered all of my questions. Thanks for the share
javascript,3cz9b0,toolate,2,Sun Jul 12 05:53:29 2015 UTC,GraphQL would replace your REST endpoints. But it's intended to be a thin layer on top of your existing application logic. You could even just proxy GraphQL queries to existing REST endpoints if you really wanted to.  At Facebook GraphQL is backed by the same data layer that powers server rendered pages and REST endpoints.
javascript,3cxf3s,moklick,2,Sat Jul 11 17:09:01 2015 UTC,"He is surprised that ""class""-es are not hoisted like functions. That's because he thinks ""class""-es are ""syntactic sugar for functions"".  No.  It is 100% logical and in line with expectations, because ""class"" names the prototype OBJECT and not the constructor function as previously. That is the main difference between the ""old"" method of creating classes and the class keyword: The classname used to be on the constructor function, now it is on the prototype object (minus methods marked ""static"") and the constructor method has that standard name. You can clearly see the {} after ""class"" and that it designates an object and not a code block.  So why would anyone expect an object to be hoisted?  And I'm not sure why the Array behavior is surprising? That's known standard JS behavior for how Arrays are implemented in this language."
javascript,3czhdl,Plesin,4,Sun Jul 12 04:47:28 2015 UTC,"You could try using a headless browser like PhantomJS. You just need to install the the node.js version. Then you can do something like this:  var page = require('webpage').create(); var url = 'http://www.whatever.com/'; page.open(url, function (status) {    // load jquery   page.includeJs(""http://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"", function() {     page.evaluate(function() {       $('#checkboxid').prop('checked', true);       $('#dropdownid').val('targetvalue').change();       $('#buttonid').click();     });     phantom.exit();   }); });"
javascript,3czhdl,a-sober-irishman,0,Sun Jul 12 05:20:38 2015 UTC,gonna give this a shot right now!
javascript,3czhdl,mc_hammerd,0,Sun Jul 12 05:23:15 2015 UTC,"If the url is the same for every single line item EXCEPT a unique number for each item, how could I teach this to append the url to the unique number  eg - I paste each number into the input like  123 234 345  and it knows to append to  http://dumbwebsite.com/123 http://dumbwebsite.com/234 http://dumbwebsite.com/345  etc"
javascript,3czhdl,drunkenfaggot,2,Sun Jul 12 05:26:32 2015 UTC,"var keys = [123, 234, 345] for (k of keys) {    url = ""http://dumbwebsite.com/""+key    // code from above response goes here...    // page.open(url, function (status) { ...  }"
javascript,3czhdl,utuxia,3,Sun Jul 12 06:23:18 2015 UTC,"You could always capture the request/responses for that workflow on a single url, and ""replay"" it on the other 999 as well"
javascript,3cxojm,ioiiooiioio,2,Sat Jul 11 18:31:24 2015 UTC,Try this: http://crossorigin.me/
javascript,3cxojm,medja,1 point,Sat Jul 11 21:27:56 2015 UTC,"Thanks so much, it works!"
javascript,3cxojm,Galloughs,1 point,Sat Jul 11 22:33:55 2015 UTC,"I just did something like this with a personal app for browsing scp-wiki.net better on mobile. I wound up having to use JSON and whateverorigin.org to inject CORS headers into the HTTP request.  You can take a look at how I did it here. It's extremely messy, as this was just a proof of concept that hasn't been cleaned up yet.  The relevant code portion begins at this line  Good luck!"
javascript,3d05og,pompelmoessap,1 point,Sun Jul 12 10:58:24 2015 UTC,"I don't know of a library that has this behavior, but if you look through the site's code you can see how it's working and possibly remake it.  First, they're setting the cursor using ""cursor: url(...)"" which you can see here: http://i.imgur.com/ViEsB9V.png?1  You should also notice in the above pic that all of the slider items have ""display: none"" except for the one being shown which has ""display: block"".  It looks like the code for deciding which one should be shown based on the user's mouse movements can be found in main.js.  Here's an image of the function: http://i.imgur.com/bMrUKk8.png  Hope that helps!"
javascript,3d05og,andrew_404,1 point,Sun Jul 12 18:49:10 2015 UTC,"That's a pretty terrible way to do an image slider, I tried to move my cursor to see a detail that was underneath it and it changed the image on me. Use a normal slider instead, something like slick.js should work better."
javascript,3d05og,MahdiM,1 point,Mon Jul 13 02:12:37 2015 UTC,"I made this for fun over the weekend http://testbed.stugoo.co.uk/london-timelapse It might be a starting point, but it primarily uses CSS"
javascript,3cwyj3,conlinism,2,Sat Jul 11 14:34:11 2015 UTC,"Using the new Function constructor is generally considered bad practice, similar to using eval. That said I can't think of a cleaner way to take the templates in from somewhere else.  Since you're using raw string interpolation like this do you run into problems with the fact that the back ticks in your template close the back ticks in the function you're creating? The back tick before the p tag in your template should close the opening back tick in your templating wrapper function.  So your function body ends up being:  return `<h1>${data.name}</h1>   ${loop(data.moreData, (e) =>      `<p class='${e.classes}'>${e.text}</p>`   )}`   Which appears to have mismatched backticks..."
javascript,3cwyj3,boushley,1 point,Sat Jul 11 15:27:39 2015 UTC,"Using new Function is dangerous, but it is the only way to make a template engine that renders in ""pure"" Javascript. You have to find a way to eval the code that you are embedding in html , since the only way the JS has to access it is as a string.  That isn't a problem because the ${} evaluates as Javascript code. You can create nested template strings if you wanted to. Edit: Like this   var string = `this is a string ${`with another string inside it`}`;   The problem that /u/MahdiM was experiencing was because of the arrow function. They aren't supported well in Chrome yet, at Babel didn't compile them since they were being evaled and where only in the HTML."
javascript,3cwyj3,x-skeww,1 point,Sat Jul 11 15:38:55 2015 UTC,Arrow functions should be supported by Chrome 45 (current stable is 43).
javascript,3cwyj3,MahdiM,1 point,Sun Jul 12 03:17:38 2015 UTC,"Doesn't work on chrome for me, which browsers are supported?"
javascript,3cwwbc,yolpo-,2,Sat Jul 11 14:11:08 2015 UTC,"Hi /u/yolpo-, it looks like you're new to reddit, welcome!   Thanks for the submissions, but please make sure you read http://www.reddit.com/rules and our guidelines. In short, you should post from a variety of sources, and not just yolpo.com.  Thanks for your consideration!    domain submitted from count %    yolpo.com 5 100%"
javascript,3cwrt3,annoyed_freelancer,7,Sat Jul 11 13:18:14 2015 UTC,"First: using $(...).is(':checked') is way slower than $(...).prop('checked'). You are writing very structured (which is good) and very specific code (which is bad to reuse), doing similar things over and over again.  You set specific events instead of using event bubbling (which would save you event handlers and would allow you to add code via ajax without having to care for the events).  All in all, I've seen much worse. There's room for improvement, but where isn't?"
javascript,3cwrt3,a-t-k,2,Sat Jul 11 13:27:23 2015 UTC,"That's great feedback, thank you. What is a good place to start to learn about event bubbling in JavaScript? I'm not a novice coder by any means, but it's only once in a blue moon that I come next to or near JavaScript."
javascript,3cwrt3,YOBCZWHYNOT,3,Sat Jul 11 13:59:22 2015 UTC,"Since you are using jQuery, and jQuery does support event delegation, this might be helpful:   http://learn.jquery.com/events/event-delegation/"
javascript,3cwrt3,a-t-k,2,Sat Jul 11 14:45:35 2015 UTC,Here's a rather good explanation: http://javascript.info/tutorial/bubbling-and-capturing
javascript,3cwrt3,a-t-k,1 point,Sat Jul 11 14:29:18 2015 UTC,Tell me if I am correct: I just attach the click event to an ancestor and let it propagate down the line to the checkbox or siblings?
javascript,3cwrt3,oculus42,2,Sat Jul 11 14:36:57 2015 UTC,"Correct. Classically, you would choose the document as ancestor."
javascript,3cwrt3,a-t-k,3,Sat Jul 11 14:40:11 2015 UTC,"I recommend using the closest unchanging ancestor as the parent, rather than $(document). For something small it doesn't matter, but I've seen sites with over 80 events bound to document, so every click that isn't stopped higher up causes dozens of selector checks to see if that click applies to a particular event."
javascript,3cwrt3,a-t-k,2,Sat Jul 11 17:24:18 2015 UTC,"A simple test for the target shouldn't take too long, but if it does or the focus of your event is really that narrow, another ancestor is viable, like you said.  I assumed that his page was rather simple and didn't feature so many more events."
javascript,3cwrt3,YOBCZWHYNOT,2,Sat Jul 11 17:51:50 2015 UTC,"To give some pseudocode from my phone:   $(document).on('click', input.checkbox, function(e) {     twerk.allNight();     e.preventDefault(); });"
javascript,3cwrt3,wastapunk,3,Sat Jul 11 14:50:36 2015 UTC,"Don't use preventDefault if it's not necessary. Otherwise, yes."
javascript,3cwrt3,YOBCZWHYNOT,7,Sat Jul 11 14:53:04 2015 UTC,"It doesn't suck, just a few improvements:  I would suggest you to add your methods to jQuery.fn instead of creating functions globally, for example, your toggle method could be rewritten like this (also your addOption, etc):  https://gist.github.com/mdibaiee/a02a432d78436f2963d5  Also, I would probably save the selected inputs instead of their IDs to avoid re-creating jQuery objects everytime I want to interact with them, this is as long as you are not removing them from the page.  Other than that, I think it's good, I learned something new from you! The getDaysInMonth trick, thanks!"
javascript,3cwrt3,oculus42,2,Sat Jul 11 14:22:04 2015 UTC,"Don't thank me, thank Stack Overflow."
javascript,3cwrt3,YOBCZWHYNOT,2,Sat Jul 11 14:39:17 2015 UTC,What's the benefit of adding methods to jquery and not globally? Can't you access the jquery methods globally as well?
javascript,3cwrt3,oculus42,2,Sat Jul 11 20:40:56 2015 UTC,"By adding to jQuery.fn instead of creating global functions, first you avoid polluting the global scope, second, you have a more Object-Oriented approach as typical applications use OO instead of Functional programming.  Yes, you can access jQuery methods globally once you define them."
javascript,3cwrt3,kenman,1 point,Sun Jul 12 17:32:21 2015 UTC,"Is this what you meant? My actual need is slightly different-I want to check that all of the passed checkboxes are checked for the element to show.  https://gist.github.com/bhalash/218c684d70023fbeada0  jQuery.fn.stickyCheckToggle = function() {     var allBoxesChecked = [].every.call(arguments, function(v) {         return (jQuery(v).is('input') && jQuery(v).prop('checked'));     });      if (allBoxesChecked) {         jQuery(this).show();     } else {         jQuery(this).hide();     } };  jQuery(inputs.featured.checkbox).change(function() {     jQuery('.stickycheck').stickyCheckToggle(this); });"
javascript,3cwrt3,munrobag,3,Sat Jul 11 20:32:13 2015 UTC,"I'm not convinced putting this on jQuery.fn is warranted. Typically that is for reusable methods or plugins.  You can simplify the logic in the function quite a bit, though. Proposed changes:  https://gist.github.com/oculus42/91b1a644d9cb1faea72a"
javascript,3cwrt3,p3llin0r3,2,Sun Jul 12 00:35:03 2015 UTC,"Yeah, I think you can rewrite allBoxesChecked like so:  https://gist.github.com/mdibaiee/e5f62c7e78fc3dfa673a  Otherwise, that's what I meant."
javascript,3cwrt3,kenman,3,Sun Jul 12 17:47:16 2015 UTC,"It looks pretty good. There are some opportunities.  jQuery has a .toggle() function which accepts a boolean to perform show/hide.  'use strict' is best inside a function, mostly for concatenation risks; it could cause a non-strict script to error if concatenated together. You could wrap the entire thing in an IIFE or  $(document).ready(function(){ ... });  if you don't need external access to the functions. This also keeps them out of the window (global) namespace. There are several options if you do want access to the functions, but don't want them to end up in the global namespace.  jQuery Objects  As YOBCZWHYNOT pointed out, you can save jQuery objects rather than generating them from the selector each time. You could replace your inputs selectors with jQuery objects, but would need to make sure your code doesn't run until docReady.   This would also clear up the intent a bit... almost every place you have jQuery(...) would go away, making the code easier to read.  Because jQuery uses $, it's a convenient shorthand to start the variable name with $ to indicate a jQuery object.  DOM performance  As a smaller consideration, adding the options one-at-a-time to the DOM is slower than accumulating them and doing a single add. You could rework the loop in daysSelect and the each in monthsSelect to accumulate the option strings in an array (cheaper than string concatenations) and then do all the DOM manipulations at once:  $mySelectBox.empty().append(optionsAccumulator.join(''));   The $.map() function could replace $.each(), in that case.  jsDoc  Finally, you might consider the jsDoc format, or even Google's dialect for the Closure compiler. Plenty of dev and build tools make use of jsDoc formatted comments to identify errors and perform optimizations."
javascript,3cwrt3,g3bj45hg34857,2,Sat Jul 11 18:08:04 2015 UTC,"Nope, doesn't suck!  Function expressions vs. function declarations... there's been many past posts here about this, but nobody's brought it up in this thread.  var toggle = function(element, checkbox) {     if (jQuery(checkbox).is(':checked')) {         jQuery(element).show();      } else {         jQuery(element).hide();     } }   If you want to use a function expression here, then you should abide by the spec and suffix a ; to the end of the expression.  However, I'd suggest using function declarations as much as possible, simply because in a stacktrace (or in a profiling tool), function expressions like yours usually just show up as (anonymous), which doesn't help anyone.  On the other hand, if you simply give it a name, like this:  var toggle = function toggle(element, checkbox) {     if (jQuery(checkbox).is(':checked')) {         jQuery(element).show();      } else {         jQuery(element).hide();     } };   Then you have to ask yourself, why use an expression at all?  p.s. that function is a good use-case for jQuery.fn.toggle, i.e.:  function toggle(element, checkbox) {     jQuery(element).toggle(jQuery(checkbox).is(':checked'));  }   p.p.s. You should look into code linting (JSHint is one), it can help find things like missing ;'s and so forth."
javascript,3cwrt3,p3llin0r3,2,Sat Jul 11 18:26:42 2015 UTC,"I would probably throw your last block of 'setup stuff' into an init() function, and call that explicitly as needed.  Maybe have a teardown function to unbind everything, depending on requirements.  I think I'd use an IIFE to wrap the whole thing, and pass in the global jQuery as $.  You seem to be mixing your function styles for no reason that I can tell, but maybe I'm just missing something."
javascript,3cwrt3,SomeRandomBuddy,5,Mon Jul 13 09:58:05 2015 UTC,"Your comments are a little try-hard.   Massive blocks of comments like that to explain extremely obvious parameters is unnecessary.   Additionally, those comments are HUGE!  4 lines of code to explain that you're 'setting up all the things' is annoying. Vertical real estate is valuable.  On line 99, you call the function 'resetValue', but the comment says 'add option to select'.   In actuality it does neither of these things. It SETS the value of an element. This is what I like to call a BAD NAME. i would think about what this function ACTUALLY does, and give it that name. something like: 'setElementValue'  Additionally, the if statement in that function is pretty ugly. I would attempt to refactor it to make it's syntax prettier, and break it up into multiple lines.  I assume this is an assignment, but if you can get away with it, I would bring in moment.js as a dependency. It's a great date library with excellent test coverage that would shorten your code immensely."
javascript,3cuhll,YOBCZWHYNOT,12,Fri Jul 10 21:48:43 2015 UTC,It's just me or is Javascript going to be very complicated all of the sudden?
javascript,3cuhll,nelmaven,4,Sat Jul 11 13:29:54 2015 UTC,I hope I'm not seeing the early days of Java again with JavaScript.
javascript,3cuhll,shriek,1 point,Sat Jul 11 15:55:30 2015 UTC,just dont use all that crap.
javascript,3cuhll,te7ris,3,Sat Jul 11 13:56:12 2015 UTC,The problem lies in dealing with other people's code that does use all the crap.
javascript,3cuhll,senocular,8,Sat Jul 11 13:57:55 2015 UTC,"Especially when frameworks adopt all this new features and force you to use it, like it or not."
javascript,3cuhll,nelmaven,2,Sat Jul 11 14:16:52 2015 UTC,"I wasn't referring to any framework specifically. Was just pointing that  sooner or later, frameworks will be adopting these features and we will have to deal with them."
javascript,3cuhll,nelmaven,4,Sat Jul 11 17:29:24 2015 UTC,"What I don't understand about decorators is why are they only available to classes?  Why not any function, like in python?  Javascript, more than any other language I know of, is constantly using functions are parameters, why pigeon-hold syntactic sugar to Es6 classes?"
javascript,3cuhll,qudat,3,Sun Jul 12 04:02:47 2015 UTC,"You don't have to use classes.  It can work on functions in object literals as well.  var o = {     @decorate     fn(){         // ...     } };   Because its essentially a shortcut to Object.defineProperty for methods, some object needs to exist to define the property (decorated function) to.  ...Of course the class decorators are just wrappers to the constructor function, so I guess you could argue the same could be done for any arbitrary function.  I've seen some examples where people are distinguishing functions from classes in the decorator's argument count, which would be difficult to do in the case where you have a method function vs a non-method function (which would appear as a class).  I don't know if that's enough to justify it not working for arbitrary functions, though."
javascript,3cuhll,senocular,1 point,Sat Jul 11 11:55:34 2015 UTC,Oh!  That's awesome!  I'm going to have to try that out.
javascript,3cuhll,qudat,4,Sat Jul 11 12:31:45 2015 UTC,Every language I've coded in I LOATH decorators and annotations.   It just makes everything much more complicated to trace and follow.   Javascript will become EVEN more difficult to trace once these start being used because there is no intelisense for javascript.
javascript,3cuhll,jewdai,1 point,Sun Jul 12 13:55:15 2015 UTC,C#'s annotations are useful for some things (eg. mapping data structures to external serialization formats).
javascript,3cuhll,jsprogrammer,1 point,Sat Jul 11 15:11:20 2015 UTC,JavaScript Master race!   Ok...maybe not anymore....but I love functional languages because everything is tracable/debuggable.
javascript,3cuhll,jewdai,1 point,Sat Jul 11 17:43:39 2015 UTC,... And barely readable
javascript,3cuhll,drunkenfaggot,9,Sat Jul 11 21:17:52 2015 UTC,JavaScript: The Hodge Podge Programming language.
javascript,3cuhll,shriek,15,Sat Jul 11 21:26:21 2015 UTC,You get your language feature!  And you get your language feature!  Oprah.gif
javascript,3cuhll,drunkenfaggot,1 point,Sun Jul 12 00:37:16 2015 UTC,Bees!!!
javascript,3cuhll,senocular,3,Sat Jul 11 06:22:33 2015 UTC,I really hope this never makes it into ESx.
javascript,3cuhll,g3bj45hg34857,1 point,Sat Jul 11 06:58:53 2015 UTC,ES7 will most likely support it.
javascript,3cuhll,x-skeww,0,Sat Jul 11 12:01:24 2015 UTC,"Ah, yes. Lets first add classes which aren't really needed. We then add decorators which fixes a problem we didn't have without classes."
javascript,3cuhll,billybolero,0,Sat Jul 11 08:30:55 2015 UTC,I feel sorry for your time and effort wasted in this... And for those who read it all :(
javascript,3cwfvg,TheArtistofChaos,3,Sat Jul 11 10:24:19 2015 UTC,"This isn't really a Canvas problem. In the function than handles the mouse move event, it's checking the mouse coordinates relative to the page rather than the canvas element. Then it's drawing the animation around the page-relative mouse coords on each canvas."
javascript,3cwfvg,trevorsg,1 point,Sat Jul 11 12:05:10 2015 UTC,"Here's a series of examples that go from very simple to more complex from one of my books:  http://aharrisbooks.net/haio/book_4/chap_06/  Use 'view source' to see the code for each example. You can use these without the book and that might be all you need. When you're ready to add some animation and event-handling, take a look at the next chapter examples:  http://aharrisbooks.net/haio/book_4/chap_07/  Hope this helps..."
javascript,3cvjva,olololeosha,2,Sat Jul 11 03:19:25 2015 UTC,Because polymorphic functions are an anti-pattern. Pass options in an object instead.
javascript,3cvjva,kapouer,4,Sat Jul 11 07:43:00 2015 UTC,"How come? They're used all over the typed languages, why are they an antipattern?  Imo doing this   if(arg1 && arg2 && ""number"" == typeof arg3){  }else if(aguments.length > 4){  }else if(blablabla){}   in languages like JS and Python is way more messier than a declarative polymorph declaration."
javascript,3cvjva,Pleochism,3,Sat Jul 11 07:46:39 2015 UTC,I believe primarily because polymorphic functions cannot be optimised by modern JS engines as they do not have consistent types.
javascript,3cvjva,androbat,1 point,Sat Jul 11 08:31:55 2015 UTC,"You are correct that polymorphic functions aren't optimized. The interesting point of this library is that the dispatcher is polymorphic, but the actual functions are not, so the dispatcher won't be optimized very much, but the functions that contain most of the code will be optimized."
javascript,3cvjva,Mackinstyle,1 point,Sat Jul 11 17:30:06 2015 UTC,Awesome! I wonder what the ideal method will look like with ES6. Decorators?
javascript,3cvjva,Mackinstyle,2,Sat Jul 11 04:41:19 2015 UTC,The ideal method would be for them to add type restrictions and type infering :)
javascript,3cvjva,senocular,1 point,Sat Jul 11 04:47:14 2015 UTC,":) Of course.  I just meant with the existing set of ES6 features.  I'm a proponent of keeping a language as feature simple as possible. But with single-page applications and Node et al., it's pretty clear that the range of concerns is FAR wider than ever initially imagined."
javascript,3cvjva,ericanderton,2,Sat Jul 11 04:50:44 2015 UTC,"FWIW, decorators are only a proposal for ES7 ;)"
javascript,3cvjva,oculus42,1 point,Sat Jul 11 12:39:08 2015 UTC,"This looks like ""function overloading by parameter types"" from C++.  It's not a bad thing, but it does complicate peer review and documentation a bunch.  Overall, it's not bad to want different behavior based on argument type.  I can see how the JS purists might dislike it since it interferes with the language's flexibility (which is entirely the point)."
javascript,3cvjva,oculus42,1 point,Sat Jul 11 14:09:03 2015 UTC,"Really, it's not about flexibility, it's about readability and optimization.  I can already do this without a library:  function doSomething(element, arg) {     if (typeof arg === 'number') {         doSomethingNumeric(element, arg);     } else if (typeof arg === 'function') {         doSomethingFunctional(element, arg)     } else {         doSomethingGeneric(element, arg)     } }   Or I can write it into the single function:  function doSomething(element, arg) {     if (typeof arg === 'number') {         element.nextSibling.innerHTML = arg;     } else if (typeof arg === 'function') {         element.innerHTML = arg();     } else {         element.innerHTML = arg;     } }   The former is much clearer, because each unique action is exposed as a separate function, and the ""polymorphic"" function is just a router/dispatcher. You can choose to expose the individual methods, if you want, or add the overhead for simplicity.  Lots of libraries use argument checking to determine functionality.  This method is kind of ugly, in that you pass a bunch of arguments that are not directly associated, and it uses .toString() to extract the input names and then match them up."
javascript,3cvjva,tencircles,1 point,Sun Jul 12 01:05:45 2015 UTC,Well I find declarative code to be more readable then conditional code. I guess it's just depends on mindset.
javascript,3cs3rd,Mate_Marschalko,8,Fri Jul 10 09:17:15 2015 UTC,there is the same for PHP: https://github.com/ziadoz/awesome-php
javascript,3cs3rd,I_l_hanuka,1 point,Fri Jul 10 17:06:37 2015 UTC,Don't know why you'd post that in JavaScript sub.
javascript,3cs3rd,shriek,2,Sat Jul 11 06:24:38 2015 UTC,A lot of people come here just for frontend JS and they may use PHP on the backend
javascript,3cvgee,tomdale,2,Sat Jul 11 02:45:50 2015 UTC,Interesting. But one thing is distracting me. Why is the left frame of this page so darn huge?
javascript,3cvm0n,Mayo1987,1 point,Sat Jul 11 03:40:29 2015 UTC,"PM Lead for Google Apps Developer Platform (which includes Apps Script) here.  UrlFetchApp is working fine. You need to get the cookie headers from the response object.  Try this  function getVoatCSRFToken() {   var response = UrlFetchApp.fetch(""https://voat.co"");   var cookies = response.getAllHeaders()[""Set-Cookie""];    for (iCookie in cookies) {      Logger.log(cookies[iCookie]);   } }"
javascript,3cu79p,clessg,4,Fri Jul 10 20:29:43 2015 UTC,"Hey, just like in Coffeescript! Doesn't seem to support ""return"", though.  It'd be great to see an IIFE keyword in ES2017:  const result = closure {     if (something) {         return 1;     }     return 2; };   Way more versatile than switch, especially now that const & block scoping is a thing. Almost tempted to write a macro..."
javascript,3cu79p,neftalydotcom,1 point,Sat Jul 11 03:26:27 2015 UTC,"I'm not sure I like this at first glance. Too similar to do while syntax imho. Might be more readable than an iife, I suppose, and it looks like that's what this transpiles into (assuming you do variable assignment, otherwise it's just a ternary I think)."
javascript,3cu79p,dvlsg,1 point,Sat Jul 11 02:03:11 2015 UTC,"I like this. I often want to write more clear and verbose expressions, often relying on ternaries or other tricks."
javascript,3cu79p,SawyerDarcy,0,Sat Jul 11 05:38:33 2015 UTC,And this React-specific feature is super awesome because...?  Isn't there some article or something you could link to?
javascript,3cu79p,x-skeww,4,Fri Jul 10 21:31:26 2015 UTC,"Merely happened to come across it on Twitter today. Tried to find an article and came up empty, but just found this.  By the way, this feature is not React-specific. I also don't necessarily think it's a good idea - seems more like clutter - but it is useful for the community to know what's going to be possibly put into the language.  Edit: one use of it is to get rid of lets, converting:  let result = 0;  if (x === 1) {   result = 1; } else if (x === 2) {   result = 2; }   into  const result = do {   if (x === 1) {     1;   } else if (x === 2) {     2;   } else {     0;   } };"
javascript,3cu79p,x-skeww,1 point,Fri Jul 10 21:44:55 2015 UTC,"By the way, this feature is not React-specific.   Why post a React example then where it's intertwined with React's syntax?  let foo = do { let x = 5; x + x }; console.log(foo); // 10"
javascript,3cu79p,dukerutledge,1 point,Fri Jul 10 22:14:02 2015 UTC,Was taken from this tweet.
javascript,3cu79p,diehrdiehr,0,Fri Jul 10 22:18:42 2015 UTC,While I certainly agree with expressions over statements why not just utilize ternary operators?  return x === 1          ? 1          : x === 2          ? 2          : 0          ;
javascript,3cu79p,dukerutledge,4,Sat Jul 11 02:12:55 2015 UTC,"That definitely works. It is more confusing though, especially if you need complex logic that requires temporary variables and the like. (You can use do to create a new scope and define scoped variables.) Complex ternaries are best avoided. An alternative is to extract a function."
javascript,3cu79p,diehrdiehr,2,Sat Jul 11 04:57:44 2015 UTC,There doesn't exist a single better way to write confusing conditional statements than using deeply nested ternary expressions. I've worked with developers that would nest over 30 ternary expressions like this. What's the point?
javascript,3cu79p,stratoscope,1 point,Sun Jul 12 20:05:58 2015 UTC,If you are nesting 30 conditionals then chances are you have deepers problems to deal with.
javascript,3cu79p,Booty_Bumping,1 point,Sun Jul 12 20:19:51 2015 UTC,Agreed :) Those two issues were only the tip of the iceberg for those developers.
javascript,3cuefe,eorroe,9,Fri Jul 10 21:26:31 2015 UTC,"Info, tech discussion/flamewars, language trivia, ES6&7, notable libraries and frameworks, news, gossip and cool things people have built."
javascript,3cuefe,spacejack2114,3,Sat Jul 11 00:09:42 2015 UTC,"as someone who just started looking into javascript and webdev, I constantly look for resources with more information about javascript, that includes: Books, Video Tutorials, Tips.  I think that some posts and answer from people who work in the industry is also a good time spent on. Things like ""What I learned from 10 years of web dev"" , ""Things you should avoid""...  I think you got the point =]"
javascript,3cuefe,vanyaxd,3,Fri Jul 10 22:14:09 2015 UTC,i like when someone shows personal projects or libraries. I've discovered cool stuff clicking those links.
javascript,3cuefe,robotzuelo,3,Sat Jul 11 06:32:17 2015 UTC,sometimes i help answer newb questions. or read the latest developments.
javascript,3cuefe,utuxia,4,Sat Jul 11 10:33:23 2015 UTC,As a beginner I spend most of my time reading the answers to questions other beginners have asked.
javascript,3cuefe,thwartski,3,Sat Jul 11 02:36:28 2015 UTC,If that is what you are looking for then /r/LearnJavascript and /r/learnprogramming are subreddits you should check out. All beginner. All the time.
javascript,3cuefe,sime,1 point,Sat Jul 11 05:45:35 2015 UTC,"Thanks, I'm in those too =)"
javascript,3cuefe,thwartski,2,Sat Jul 11 18:57:20 2015 UTC,I browse every now and again to see if anyone has put any interesting articles up
javascript,3cuefe,Dwengo,-1,Fri Jul 10 23:35:06 2015 UTC,"well obviously, point is what's interesting to you, I want to know what this community is interested in."
javascript,3cuefe,vexing_vor,2,Sat Jul 11 06:17:04 2015 UTC,I personally look for someone being wrong in an area I know something about. This pleases me.
javascript,3cuefe,senocular,2,Sat Jul 11 00:10:51 2015 UTC,This answer pleases me.  I think.  I don't know enough about this area to know for sure.
javascript,3cuefe,Mackinstyle,2,Sun Jul 12 14:47:06 2015 UTC,Consumable tidbits that take 5 minutes to learn about something I may have not known about before.
javascript,3cuefe,dada_,2,Sat Jul 11 05:12:06 2015 UTC,"Advice from seasoned professionals. Not just ""here's how you do x"", but people who know it's important to figure out why someone is trying to do something—sometimes people's assumptions on how to approach a problem are flawed.  I also need to keep my skills up to date, so posts on new developments and shifts in how people are working on frontend are crucial to me."
javascript,3cuefe,munrobag,2,Sun Jul 12 12:32:14 2015 UTC,"Stuff I should be learning for my next job, and stuff I shouldn't be wasting my time on"
javascript,3cuefe,mikedelfino,1 point,Mon Jul 13 15:47:34 2015 UTC,You're making me realize I should unsubscribe.
javascript,3cuefe,mikedelfino,2,Sat Jul 11 02:30:39 2015 UTC,why's that?
javascript,3ctzj4,mattdesl,4,Fri Jul 10 19:31:56 2015 UTC,"Here's my comment from last time this came up:  RequireJS is a bit ""old school"" if you ask me. The main thing Webpack and Browserify bring to the table is strong npm compatibility and modular development.   A really simple comparison of the two:   webpack is focused on creating the entire stack of tools for the modern frontend website developer browserify is more focused on npm/node compatibility, modular workflows, solving problems in isolation, and general purpose JavaScript tooling   More reading on modules / npm:   module basics module creation"
javascript,3ctzj4,mattdesl,1 point,Fri Jul 10 20:20:52 2015 UTC,Thanks. See my edit regarding Browserify.
javascript,3ctzj4,i_ate_god,3,Fri Jul 10 20:40:00 2015 UTC,How do you get around not having a pre-made Browserify shim for a library you need?   With browserify-shim you can load most simple non-CommonJS dependencies.  It looks like at least one of them is on npm: https://www.npmjs.com/package/nvd3
javascript,3ctzj4,GuinnessDraught,3,Fri Jul 10 20:46:05 2015 UTC,"I don't have any experience with webpack, but I'll comment on Browserify/RequireJS:  Browserify's syntax for modules is the same as NodeJS:  var module = require('moduleName');   And it will work the same way as NodeJS. What's really nice about this is that the syntax is simple, clean, and familiar if you use Node at all. It also makes dynamic module loading (using a variable for a module name) painless.  HOWEVER, it's much harder to shim a module with Browserify, and you must compile your JS before loading it into the browser, making debugging harder, and development speed tied to how long it takes to compile your code.  RequireJS on the other hand, has a horrible syntax:  define(['module1','module2'], function(Module1, Module2) {     // your code goes here }   This duplicitous declaring of dependencies has some benefits, but in general it gets real ugly real fast. As well, this makes dynamic module loading harder. Not MUCH harder, but definitely needs more manual boilerplate code.  That said though, it's a lot easier to shim a module in RequireJS. And it does not require you to compile your Js code before using it in the browser. This greatly helps with debugging.  As for concatenation and minification, both work just fine in that regard.  I don't consider either one a clear winner. Since I don't know anything about Webpack, maybe Webpack is what I've been looking for all my life. But I have no idea ;)"
javascript,3ctzj4,met48,2,Fri Jul 10 20:05:00 2015 UTC,"And it does not require you to compile your Js code before using it in the browser. This greatly helps with debugging.   As long as you turn on source map symbols in your Browserify options it doesn't make debugging any harder. With source maps you'll get correct file names and line numbers in a browser console/debugger.  For example, in a grunt-browserify task it'd look something like:  browserify: {   'myApp': {     src: 'src/web/main.js'     dest: 'public/myApp.js',     options: {       // setting debug creates source map symbols       browserifyOptions: {         debug: true       }     }   } },    and development speed tied to how long it takes to compile your code.   Using a watcher makes this not really a problem, either. The first compilation from scratch can sometimes take a few seconds, but even in my largest projects, watchify can recompile in near real-time.  To use a grunt-browserify example again, it has watchify built-in and can be turned on with a single flag:  browserify: {     ...,     options: {         watch: true     } },"
javascript,3ctzj4,GuinnessDraught,2,Fri Jul 10 20:38:05 2015 UTC,"Regarding the RequireJS syntax, there's an option which is closer to commonjs:  define(function (require, exports, module) {     var Module1 = require('module1');     module.exports = exports = ...; });   It minimizes the boilerplate while maintaining a compile-less workflow for development. Note that any module required in this way will be loaded with the whole module, not where the require call is, so you still need to use require([ ... ]) for conditional module loading."
javascript,3ctzj4,theQuandary,1 point,Sat Jul 11 01:21:28 2015 UTC,Thanks. See my edit regarding Browserify.
javascript,3ctzj4,sinerider,2,Fri Jul 10 20:39:53 2015 UTC,"I've been using Browserify pretty heavily on a couple different projects, work and personal, for about a year now. I really, really like it.  If you've used node and npm, you more or less already know how to use Browserify. It's the same CommonJS module system as node/npm.  Plus using Browserify and writing node-style code for the front-end solves a number of pain points of ""old school"" javascript:   Dependency management & resolution. No more mess of <script src> tags that need to be loaded in a specific order in your HTML  Modules & namespacing. No more globals or IIFE-based modules. Makes testing SO much easier. Bundles up your deployable artifacts to single, self-contained .js files Basically forces you to implement a build process. IMO this is a good thing, as then you can easily hook in other really positive things like linting, style checking, running unit tests, less compilation, template pre-compilation, etc. into a defined, repeatable process.   In the past I had gotten my feet wet with RequireJS, and I found it to be awful. The syntax is terrible and so few libs are AMD-compliant so you end up having to shim a hell of a lot of stuff. Conversely, for the most part Browserify just works, and for the handful of common needs there are several good Browserify shims/transforms available via npm (e.g., hbsfy, reactify).  I don't have a lot of hands-on experience with Webpack but I've read through some docs and it looks solid as well. It looks like it has a couple of neat features that Browserify doesn't offer, or at least not easily, but the core functionality is pretty similar.  I think you can't go wrong with either Browserify or Webpack. At this point in time I would not bother with RequireJS.  I've been doing mostly Backbone-based stuff and it works awesome with Browserify. Some of my coworkers have said that Angular and Browserify/Webpack don't really play together super nicely, I know it can be done and that people do it, though."
javascript,3ctzj4,utuxia,1 point,Fri Jul 10 20:33:43 2015 UTC,Thanks. See my edit regarding Browserify.
javascript,3ctzj4,euphoniumatemydingo,3,Fri Jul 10 20:39:56 2015 UTC,"Don't forget JSPM. It's growing fast (I don't use it yet, but I'm keeping an eye on it). It offers ES6 modules and babel support. With gulp as a normal task runner, I think it'll be worth using very soon."
javascript,3cuxl8,domainkiller,3,Fri Jul 10 23:55:35 2015 UTC,"Yeah of course it'll be possible. Probably slower than in Java, but absolutely doable."
javascript,3cuxl8,PM_ME_INSIDER_INFO,1 point,Sat Jul 11 00:27:58 2015 UTC,"Other than speed, is there really anything that isn't reasonably feasible in JavaScript that is in other popular languages?"
javascript,3cuxl8,Mackinstyle,1 point,Sat Jul 11 05:03:15 2015 UTC,Nope. Almost all modern languages are capable of what any other modern language is capable of (other than client-side vs server-side differences).
javascript,3cuxl8,PM_ME_INSIDER_INFO,1 point,Sat Jul 11 05:59:38 2015 UTC,"Well, there is slower (1-10x) and much slower (100-1000x).  If you want to port some algorithm which makes heavy use of 64-bit ints, you have a problem. If you have to break out some big int lib, things will get really ugly (a.add(b) instead of a + b) and really slow.  ES7 will probably introduce 64-bit ints and some kind of operator overloading.  Light-weight concurrency is also missing. So, if you want to port something which makes use of thousands of ""workers"", you'll have to come up with a different solution. Web Workers are way too heavy for this."
javascript,3cuxl8,x-skeww,0,Sun Jul 12 00:42:36 2015 UTC,"Yes.  The browser sets significant restrictions on client space code.  Device access barely exists.  Drivers aren't possible.  Multithreading barely exists.  There are a number of missing significant containers, and given that there are no pointers, they and large classes of algorithm cannot be implemented efficiently.  Several choices made in the name of safety, such as severely limited stack depth, make large scale development difficult.  You will never see javascript as an operating system basis.  (Despite what some people might say, JS is little more than a window manager and an app layer for things like FirefoxOS; the actual underlying operating system is not implemented in JS, nor will it be unless the language is radically changed.)  You will never see a serious realtime system, database, operating system, device driver stack, cutting edge graphics game, or etc come out of JS.  Etc etc.  Most things you would actually want to do are possible.  JS has wider reach than most people expect.  However, turing equivalence is basically a joke (I mean technically CSS is turing equivalent because it's able to toggle checkboxes, but I don't see you writing Word on a turing tape of checkboxes any time soon; do you?) and JS in particular has significant limitations intentionally deployed around it in the name of security against attack by the big bad web."
javascript,3cuxl8,StoneCypher,2,Sat Jul 11 07:10:03 2015 UTC,"I disagree on some points you made. Things like three.js allow for amazing graphics performance in browser. In order to accurately answer this question, the languages need to be put in the same context."
javascript,3cuxl8,zachrip,0,Sat Jul 11 08:43:08 2015 UTC,Today I saw someone suggest that three.js could be used to make a cutting edge graphics game.
javascript,3cuxl8,StoneCypher,3,Sun Jul 12 18:17:43 2015 UTC,I don’t know what you think is limiting? There are some truly amazing games and interactive experiences made with three.js. It almost seems like you’re limiting yourself on purpose.
javascript,3cuxl8,zachrip,0,Sun Jul 12 21:59:44 2015 UTC,"You do recognize that the phrase ""cutting edge"" means pushing the limits of what's possible given the hardware, right?  Do you actually believe that three.js in a browser competes in performance or ability with native graphics?"
javascript,3cuxl8,StoneCypher,2,Sun Jul 12 22:08:55 2015 UTC,Yes
javascript,3cvv2l,AprilHigrim,1 point,Sat Jul 11 05:14:35 2015 UTC,Put them in an extra JS(ON) file.
javascript,3cvv2l,a-t-k,1 point,Sat Jul 11 05:16:40 2015 UTC,"Would you ELI5, please?"
javascript,3cvv2l,Lochlan,2,Sat Jul 11 05:17:32 2015 UTC,"Maybe not for a 5 year old, but here's a simple way you could go about it.  Create a new file with the properties you'd like to apply to your HTML object.   e.g. data.js  var data = {   key1: value1,   key2: value2,   key3: value3 };   Include it in your page the same way you include the rest of your javascript.  e.g.  <script src=""data.js""></script>   Apply the properties to your HTML object inside the javascript file that contains your logic. It will be available via the global variable, data that was defined in your included data.js file."
javascript,3cvv2l,a-t-k,1 point,Sat Jul 11 06:52:35 2015 UTC,"You have to get this data inside the page scope. A separate data file will keep that data from filling up other files, which is good for the so-called separation of concern. It will also allow the client to cache the data even if the other scripts change - or vice versa. Finally, since there's a lot of data as you said, loading it asynchronously will speed up your page."
javascript,3cvv2l,drunkenfaggot,1 point,Sat Jul 11 05:23:19 2015 UTC,wat
javascript,3cvv2l,shthed,1 point,Sat Jul 11 07:11:18 2015 UTC,"How long is the list?  Define 'too big' :) Do you always need all of it, or only some of it  sometimes?"
javascript,3cvv2l,ministerkosh,1 point,Sat Jul 11 11:54:38 2015 UTC,"Only sometimes, It's text, about 5000 characters."
javascript,3cvv2l,huesoso,1 point,Sun Jul 12 04:51:27 2015 UTC,"You should save your data as JSON and load it with an XHR/Ajax call when you need it:   var mydata; $.get('/my/data.json', function(data) {     mydata = JSON.parse(data); }   JSON means ""JavaScript Object Notation"" and is a good choice as a simple data format not only in javascript."
javascript,3cvv2l,autowikibot,1 point,Sun Jul 12 07:53:32 2015 UTC,Are you applying this to the .innerHTML or .textContent properties of an HTML element? This kind of sounds like a bit of a code smell
javascript,3cvv2l,maynard_krebs_cycle,1 point,Sun Jul 12 10:56:37 2015 UTC,"Code smell:       In computer programming, code smell is any symptom in the source code of a program that possibly indicates a deeper problem. According to Fowler,  ""a code smell is a surface indication that usually corresponds to a deeper problem in the system"". Another way to look at smells is with respect to principles and quality:  ""smells are certain structures in the code that indicate violation of fundamental design principles and negatively impact design quality"". Code smells are usually not bugs—they are not technically incorrect and do not currently prevent the program from functioning. Instead, they indicate weaknesses in design that may be slowing down development or increasing the risk of bugs or failures in the future.     Relevant: Call super | SOLID (object-oriented design) | Code refactoring   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Call Me"
javascript,3cvnyi,ChaseMoskal,2,Sat Jul 11 04:00:08 2015 UTC,"ES3/5: I put the parens around the whole thing. So, the invocation parens are inside the wrapper parens.  ES6: There is no need for IIFEs. Block scope keeps everything out of the way anyways. And if you really need one more block, you can just add one.  let inc; {   let counter = 0;   inc = () => counter++; } console.log(inc()); // 0 console.log(inc()); // 1   Same with pointless IIFE:  let inc = (() => {   let counter = 0;   return () => counter++; }()); console.log(inc()); // 0 console.log(inc()); // 1   Same with that proposed ""do"" syntax:  let inc = do {   let counter = 0;   () => counter++; }; console.log(inc()); // 0 console.log(inc()); // 1   Maybe ""do"" (without while) isn't that bad."
javascript,3cvnyi,x-skeww,2,Sat Jul 11 05:34:00 2015 UTC,I was curious so looked at how I usually do it.   I use alpha   var alpha = (function(){     console.log(+new Date);     return true; })();  The reason is that is just how I think about IIFE and it made sense to do it this way.
javascript,3cvnyi,bartturner,2,Sat Jul 11 12:22:53 2015 UTC,Return values?? My IIFE's have no return values!  void function () {      console.log('All sales final!')  }() // -> 'All sales final!'
javascript,3cvnyi,senocular,1 point,Sat Jul 11 12:53:38 2015 UTC,"I'm quite fascinated by the use of void there, as a replacement for the common wrapper parenthesis."
javascript,3cvnyi,jekrb,1 point,Sat Jul 11 19:01:49 2015 UTC,I use void as well.  It makes for a clear statement separator.
javascript,3cvnyi,klownfa,1 point,Sat Jul 11 20:05:12 2015 UTC,"There's no difference technically speaking. Some people use them as some sort of convention that one will return an object and the other wont. Honestly I think that's stupid, no one is looking at the end of a function to see if it returns something or not."
javascript,3cvnyi,r3jjs,1 point,Sat Jul 11 04:09:43 2015 UTC,"Exactly the same thing.  In this context, the parens around the function body only serve as a hint to the HUMAN reader that there is an IIFE, but they aren't syntactically required.  If the IIFE was being invoked, but not assigned (meaning, if there wasn't an = sign before the function) then the ( would force a function expression vs a function statement."
javascript,3cvnyi,Mackinstyle,1 point,Sat Jul 11 04:09:56 2015 UTC,What are these wrappings about anyway? They seem like they're doing something magical to compensate for an oddity of JavaScript?
javascript,3cvnyi,hannyajin,2,Sat Jul 11 04:24:33 2015 UTC,"Basically an Immediately Invoked Function in javascript is simply calling the function directly afterwards, i.e., sticking '()' at the end - but since we'd have to check the end of the function each time to know (ain't nobody got time for that) we put sugar in front to signify this (I've most often encountered the extra () wrapping kind, the first type in this topics title). They only serve to let the programmer know ""Hey, this isn't an ordinary function expression!"""
javascript,3cvnyi,tyroneslothtrop,6,Sat Jul 11 04:54:31 2015 UTC,"but since we'd have to check the end of the function each time to know (ain't nobody got time for that) we put sugar in front to signify this[...] They only serve to let the programmer know ""Hey, this isn't an ordinary function expression!""   It's not just a signal to let programmers know they're looking at an IIFE. Function expressions can be invoked immediately, but JS does not allow such for function statements. Enclosing a function in parens (or adding a bang at the front, or a tilde, or whatever) turns a function statement into an expression. So this works:  !function(){console.log('Foo!')}()   While this is a syntax error:  function(){console.log('Foo!')}()"
javascript,3cvnyi,Mackinstyle,1 point,Sat Jul 11 12:09:26 2015 UTC,Aha! It's just sugar.  Okay so there isn't some magic I'm not understanding.
javascript,3cvnyi,gkx,2,Sat Jul 11 04:57:57 2015 UTC,Sugar?
javascript,3cvnyi,Juggernog,2,Sat Jul 11 14:43:46 2015 UTC,Syntactic sugar
javascript,3cvnyi,gkx,2,Sat Jul 11 14:50:51 2015 UTC,"Oh, I missed some of /u/hannyajin's comment. I thought /u/Mackinstyle was referring to IIFEs as sugar.  FTR I'm not sure I'd classify wrapping IIFEs in parentheses as sugar anyways (even if it were true that it weren't necessary--it is, however necessary to some extent). Sugar is typically a built-in language construct to make it easier to express things that are otherwise explicitly expressible. This isn't really a built-in language construct so much as it is programmers using parentheses to communicate to people better."
javascript,3cvnyi,Mackinstyle,1 point,Sat Jul 11 17:04:23 2015 UTC,"Ah. I always considered ""sugar"" as just something that serves no purpose other than human readability or simplification of syntax."
javascript,3cvnyi,Mael5trom,3,Sat Jul 11 17:45:06 2015 UTC,"It is sugar when used with function expressions.   // dev has to go to the end to know it is a IIFE var foo = function() { }();  // dev knows by convention it is a IIFE var foo = (function() { })();  // result of function execution assigned to foo   It is NOT sugar when used with function declarations.  function() { }(); // syntax error (function(){ })(); // IIFE   Other IIFE formats (there are probably more of these). Be careful not to use these for function expressions as they will affect a return value.  (function(){ }()); // IIFE, no difference in execution !function(){ }(); // IIFE, no difference in execution +function(){ }(); // IIFE, no difference in execution -function(){ }(); // IIFE, no difference in execution ~function(){ }(); // IIFE, no difference in execution void function(){ }(); // IIFE, credit: /u/senocular"
javascript,3cvnyi,Mackinstyle,1 point,Sat Jul 11 22:13:15 2015 UTC,"Why not with declarations? Is that because it has an impact on how the code behaves?  Oh wait, duh. Because you can't call a declaration that way, so you wrap it in parens."
javascript,3cvnyi,lewisje,1 point,Sat Jul 11 23:04:13 2015 UTC,"To immediately invoke an arrow function with the abbreviated syntax (one expression, implicit return), you must wrap the entire function expression in parentheses.  For this reason, the most consistent way to write an IIFE wraps parentheses around the function expression and puts the invocation operator outside the parentheses (the alpha way).  I'd like to think Douglas Crockford would think the same way, even though pre-ES6 he advocated the beta was because the other one looked like ""a pair of dog balls""; it's the same logic that he used to defend the One True Brace Style (because you must put the opening brace, bracket, or parenthesis on the same line as return or throw if it starts the expression being returned or thrown, then it's more consistent to do this for all brace/bracket/parenthesis-wrapped constructions in the language)."
javascript,3cvnyi,Rhomboid,1 point,Sun Jul 12 01:31:55 2015 UTC,"An IIFE only needs the outer parentheses if it's at the beginning of a line, to prevent it being interpreted as a function statement which cannot be immediately invoked.  In your examples the only possible interpretation is as a function expression, so they're extraneous and you can write:  var x = function() {     ... }();   As for an IIFE that isn't being assigned to anything, I personally prefer to use a unary operator like + to force expression context:  +function() {     ... }();   You can also use ~ or - or !.  Again, this is personal preference but I don't like extra parentheses getting in the way.  However, I use them when giving examples for other people because that's the more idiomatic form.  As to whether the function call operator is inside or outside of the parentheses, it doesn't matter at all and I can't see anyone really caring either way.  Crockford seems to like the )(); form, but whatever."
javascript,3cvkbx,idba0987,2,Sat Jul 11 03:23:42 2015 UTC,"It's been a while since a did some Angular but maybe you could use transclude to make the API nicer:  <gen-user>   <h3>{{name}}</h3>   <ul>     <li>My email is <span>{{email}}</span></li>     <li>My phone number is <span>{{phone}}</span></li>     <li>I work at <span>{{company}}</span></li>   </ul> </gen-user>   The gen-user directive will populate its scope with random values and rerender its child nodes (which would be able to access the values from the directive scope). Otherwise it's a very nice start, keep up the good work :)"
javascript,3cvkbx,Jeifkeee,1 point,Sat Jul 11 08:07:16 2015 UTC,Thanks for the heads up. Just added it to the repo.
javascript,3ctve1,Josh08h,2,Fri Jul 10 19:02:03 2015 UTC,"The problem is that #reverse is a destructive function meaning that it permanently changes whatever you are sending it. The easiest way to work around this is to precede your #reverse call with a #slice:  var myApp = {}; myApp.myArr2 = [""hello"", ""world""]; myApp.myNewArr2 = myApp.myArr2.slice().reverse(); console.log(myApp.myArr2); // hello world console.log(myApp.myNewArr2); // world hello"
javascript,3ctve1,marinated_pork,1 point,Fri Jul 10 20:00:35 2015 UTC,What are the #s all about?
javascript,3ctve1,ForScale,2,Fri Jul 10 20:35:10 2015 UTC,# denotes name of function.
javascript,3ctve1,marinated_pork,1 point,Fri Jul 10 21:08:42 2015 UTC,Interesting... Somehow I've never seen that before...  Thanks!
javascript,3ctve1,ForScale,1 point,Fri Jul 10 23:31:46 2015 UTC,Why not wrap it in backticks like this?
javascript,3ctve1,hahaNodeJS,1 point,Sat Jul 11 02:33:11 2015 UTC,"That is a super readable way to do it, yes!"
javascript,3ctve1,marinated_pork,2,Sat Jul 11 05:54:05 2015 UTC,"If you want to avoid creating a copy of an array and then reversing it, you can simply do this.  var a=[1,2,3,4,5,6], b=[]; for(var i=a.length-1;i >= 0;i--) {     b.push(a[i]); }"
javascript,3ctve1,hahaNodeJS,1 point,Sat Jul 11 02:37:58 2015 UTC,"You can use concat to create a copy.  > var a = [1, 2, 3] undefined > var b = [].concat(a) undefined > b.reverse() [3, 2, 1] > a [1, 2, 3]   Edit:  If you use ES6, you can also create a copy via Array.from(a) or [...a]."
javascript,3ctve1,x-skeww,1 point,Fri Jul 10 19:26:37 2015 UTC,"As a sidenote, indent your code with 4 spaces to have it formatted as code for reddit."
javascript,3cttyf,RunningLowOnFucks,6,Fri Jul 10 18:51:31 2015 UTC,"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign  > Object.assign({a: 'a', b: 'b'}, {b: 'b override'}, {c: 'c'}) Object { a=""a"",  b=""b override"",  c=""c""}"
javascript,3cttyf,x-skeww,3,Fri Jul 10 20:01:37 2015 UTC,"I think it's great that you wrote this, I'm just going to branch off from what you said here:   in light of ES6 it might very well be obsolete,   ES6/ES2015 has a native extend called Object.assign().  I opt to just using this small (32 lines) pollyfill, which only executes if the js engine does not support Object.assign()."
javascript,3cttyf,jekrb,2,Fri Jul 10 20:10:40 2015 UTC,This already exists as npm package
javascript,3cttyf,fforw,0,Fri Jul 10 22:44:17 2015 UTC,For just 7.3 more Kb you could have most of jQuery by using zepto.
