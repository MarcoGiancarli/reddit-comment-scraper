rails,3e704f,rxsharp,1 point,Wed Jul 22 13:09:59 2015 UTC,"With any application, you should have a terms of service or some sort of end user agreement. You have to state your intentions and expectations of the user. You should also include a privacy policy that indicates how information is gathered and will be used."
rails,3e50pe,SharksCantSwim,2,Wed Jul 22 00:28:50 2015 UTC,"You should just post the link, I'd be more than happy to have a look :)"
rails,3e50pe,xenilko,1 point,Wed Jul 22 01:45:20 2015 UTC,"Ok, you twisted my arm: https://bitbucket.org/vetrun/shortner  Thanks :)"
rails,3e50pe,xenilko,2,Wed Jul 22 01:52:22 2015 UTC,"First thing I see with your commit is that you're speaking in the past tense... I believe the norm is to speak in the present tense...   i.e ""Add highlight on click form""... i'll copy the code and see what else I can dig"
rails,3e50pe,TurbidWater,1 point,Wed Jul 22 02:05:04 2015 UTC,Thanks. This is exactly the type of things I need to know.
rails,3e50pe,spacepotatoe,1 point,Wed Jul 22 02:07:03 2015 UTC,http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html  This post describes some 'best practices' on commit messages.
rails,3e50pe,spacepotatoe,2,Wed Jul 22 10:50:44 2015 UTC,Two very minor things I came across:  1 - In your messages controller you are calling MessageMailer#deliver which is deprecated in favour of deliver_now or deliver_later (http://guides.rubyonrails.org/4_2_release_notes.html#action-mailer-deprecations)  2 - The indentation on randomize_short in your Message class is a bit funky (but this is really splitting hairs here).  Just wondering what your reasoning was for choosing not to extend ActiveModel::Base in your Message class was?
rails,3e50pe,spacepotatoe,1 point,Wed Jul 22 04:25:33 2015 UTC,"Thanks for your help. I fixed up the depreciated part and the indenting. With part 2, I'm not quite sure what you mean? Is there an easier or better way to do it or am I missing something obvious?"
rails,3e2vzz,mrpeabodynsherman,1 point,Tue Jul 21 15:21:09 2015 UTC,"Original post: here  I just wanted to say thanks a bunch to all the people who responded to the OP. You guys definitely helped me think things through. I came up with this solution, hoping it can be discussed at least from the perspective of feasibility.   Thanks for your time and help."
rails,3e2epo,FooBarWidget,1 point,Tue Jul 21 12:56:38 2015 UTC,"I understand the motivation and that a change was needed, especially to support more beginner users.   But as an intermediate user, I'm having trouble finding what I used to find and need in the docs.   For instance, I've been installing as a ruby gem, because I think at one point that was the recommended way to install, and it worked for me. But I still need to consult the docs when I do it. If the instructions for such are in there, I don't know where.   Or, I often need to quickly look up ""How to deploy to Sub-URI"". Eventually I found it, but it took me a while.   On the other hand, there is new useful stuff there that I've already encountered and hadn't come accross before, like where/how WebSockets is supported."
rails,3e2epo,jrochkind,1 point,Tue Jul 21 14:20:55 2015 UTC,"Thanks for the feedback, I've taken note of this. Does the search box help?"
rails,3e2epo,jrochkind,1 point,Tue Jul 21 14:36:55 2015 UTC,I hadn't actually tried it yet! It looks like it does actually.
rails,3e2epo,NilsLandt,1 point,Tue Jul 21 14:37:26 2015 UTC,"In any case, the old documentation will be updated with redirects to the appropriate section in the new documentation. Is that good enough for you?"
rails,3e4aph,bayernownz1995,1 point,Tue Jul 21 21:10:52 2015 UTC,You need to include :id in the :sides_attributes in case_params.
rails,3e4aph,anithri_arcane,1 point,Wed Jul 22 02:54:43 2015 UTC,"Good catch, thanks!"
rails,3e1imm,kobaltzz,2,Tue Jul 21 06:11:32 2015 UTC,"That looks really promising! I will keep an eye on your site, thanks for the effort!"
rails,3e1imm,jarkelen,2,Tue Jul 21 07:30:54 2015 UTC,"I'd love to make a suggestion if you're open to them. Myself and a few ruby/rails dev I know are stuck in 3.2.x and are looking to upgrade to the latest stable release and fully utilize framework features.   New additions such as ActiveJob, handling of secrets by secrets.yml instead of gems such as Figaro, etc. aren't well known / trusted enough to be used in production apps."
rails,3e1imm,amxn,1 point,Tue Jul 21 13:58:48 2015 UTC,"Definitely would love to cover your later parts (about ActiveJob, Secrets, etc.).  I feel your pain with migrating 3.2.x applications to latest stable. It is quite the task if there are many dependencies that don't work well with the newer frameworks/gems. For example, in Rails 3.2, I was a huge Sorcery fan for authentication, but found when Rails 4 was released, there were some inconsistencies that made it an unreliable gem (they may have since been fixed); so I switched to Devise on Rails 4. Around the time of the release of Rails 4, Ryan Bates took his break. This left his Authorization gem, CanCan, unmaintained and it didn't work well. CanCanCan took off and is a very promising gem, but I ended up switching to Pundit."
rails,3e1imm,ecoding5,1 point,Tue Jul 21 14:07:53 2015 UTC,also in the midst of a 3.2 to 4 upgrade.  I hope you have tests!
rails,3e1imm,mr_captain_awesome,2,Tue Jul 21 16:08:36 2015 UTC,Your videos restart when I attempt to scrub to a certain part. This occurs on both ffox and chrome.
rails,3e1imm,mr_captain_awesome,3,Tue Jul 21 15:00:47 2015 UTC,Thanks for the info. This has been fixed.
rails,3e1imm,Afriend4Lyfe,1 point,Tue Jul 21 15:09:49 2015 UTC,"Ahh yes, I remember seeing your action cable issue video post when you questioned it's functionality between browser tabs."
rails,3dzvha,johnpmitsch,12,Mon Jul 20 21:43:22 2015 UTC,"I just finished implementing this exact same thing using Rails, Angular, OAuth, and Devise.  I'll explain and post some code examples here in a couple/few hours.  Edit:  We have two separate repos, one for the Angular Client and one for the Rails Server.  On the Client we use Angular (in TypeScript), and for the Server we use Devise for registration and Doorkeeper(OAuth) for Sign In.  What it boils down to is using a modified JSON-only Devise controller for registration, and Doorkeeper for signing in and/or making OAuth authenticated API calls.  There is quite a bit of code at work in the project, so I may miss something.  If you get lost or something isn't working, feel free to respond to this and I'll answer any questions as best I can.  Note: Our ""User"" model is called ""Person"", so if you have a ""User"" you'll want to substitute where appropriate.  Here's what you will want to do, generally in this order:  Part 1: Server (Part 2 in comment reply to this)  Gemfile  gem 'devise' gem 'doorkeeper'   In your terminal  bundle install rails generate devise:install rails generate devise person rails generate doorkeeper:install rake db:migrate   app/models/person.rb  class Person < ActiveRecord::Base   devise :database_authenticatable, :rememberable, :validatable, :registerable end   Now we need an overridden Devise registration controller that only works over JSON, and only accepts the #create action.  app/controllers/people/registrations_controller.rb  class People::RegistrationsController < Devise::RegistrationsController   respond_to :json   respond_to :html, only: []   respond_to :xml, only: []    skip_before_filter :verify_authenticity_token    before_filter :not_allowed, only: [:new, :edit, :cancel]    def not_allowed     raise MethodNotAllowed   end      private    def sign_up_params     params.require(:person).permit([       :email,       :password,       :password_confirmation,       :first_name,       :last_name     ])   end    def account_update_params     params.require(:person).permit([       :email,       :first_name,       :last_name     ])   end end   Now we set up our routes, initializing Doorkeeper and forcing Devise to use the above controller instead of the default.  config/routes.rb  Rails.application.routes.draw do   use_doorkeeper    devise_for :people,     only: :registrations,     controllers: {       registrations: 'people/registrations'     } end   Now, we need to do some CORS stuff (which you might have already done) in order to allow Angular to talk to Rails, because if you have a proper standalone Client set up, it will be running on a different server than the Rails API.  config/application.rb  # inside of your Application class... config.middleware.insert_before 0, ""Rack::Cors"" do   allow do     origins '*'     resource '*',       headers: :any,       methods: [:get, :post, :delete, :put, :options],       max_age: 0   end end ...   More CORS stuff below, but note the current_resource_owner method below.  This is what will retrieve the OAuth authenticated model once Doorkeeper has issued a token and you've included it in a request.  You'd call current_resource_owner in lieu of Devise's generated method.  In this case it would have been current_person.  app/controllers/application.rb  class ApplicationController < ActionController::Base   before_filter :cors_preflight_check   after_filter :cors_set_access_control_headers    def cors_preflight_check     if request.method == 'OPTIONS'       headers['Access-Control-Allow-Origin'] = '*'       headers['Access-Control-Allow-Methods'] = 'POST, GET, PUT, DELETE, OPTIONS'       headers['Access-Control-Allow-Headers'] = 'X-Requested-With, X-Prototype-Version, Token'       headers['Access-Control-Max-Age'] = '1728000'        render text: '', content_type: 'text/plain'     end   end    def cors_set_access_control_headers     headers['Access-Control-Allow-Origin'] = '*'     headers['Access-Control-Allow-Methods'] = 'POST, GET, PUT, DELETE, OPTIONS'     headers['Access-Control-Allow-Headers'] = 'Origin, Content-Type, Accept, Authorization, Token'     headers['Access-Control-Max-Age'] = ""1728000""   end      private    def current_resource_owner     Person.find(doorkeeper_token.resource_owner_id) if doorkeeper_token   end end   Now, we need to set up our Doorkeeper initializer.  config/initializers/doorkeeper.rb  Doorkeeper.configure do   orm :active_record    # This block will be called to check whether the resource owner is authenticated or not.   resource_owner_authenticator do     current_person || warden.authenticate!(scope: :person)   end    resource_owner_from_credentials do |routes|     p = Person.find_for_database_authentication(email: params[:email])     p if p && p.valid_password?(params[:password])   end    # Access token expiration time (default 2 hours)   access_token_expires_in 24.hours    # Define access token scopes for your provider   # For more information go to https://github.com/applicake/doorkeeper/wiki/Using-Scopes   default_scopes  :api   optional_scopes :write    skip_authorization do |resource_owner, client|     true   end    grant_flows %w(authorization_code implicit password client_credentials) end   Make sure you set up the mailer options as per the Devise documentation.  config/environments/development.rb  Rails.application.configure do   config.action_mailer.default_url_options = {     host: 'localhost:3000'   } end   To make sure all of this works, you should test your endpoints using a REST Client.  Example of registration (You can ignore the time_zone, terms of service, etc. - that is stuff specific to what I'm building.)  Example of signing in  Set up an API Controller for making real API calls (notice the registration controller isn't inside of this, as all of the API controllers are authenticated with OAuth).  app/controllers/api_controller.rb  class ApiController < ApplicationController   doorkeeper_for :all, scopes: [:api] end   Now we can make our first controller hidden behind OAuth.  People can only access this with a token and appropriate authorization headers.  We use this endpoint to ""sync"" the current person's attributes to the client after a page refresh following signing in.  app/controllers/api/people_controller.rb  class Api::PeopleController < ApiController   def sync     render json: current_resource_owner.attributes, status: 200   end end   Also, add the endpoint for this to your routes.  config/routes.rb  ... namespace :api do   get 'people/sync', to: 'people#sync' end ...   Edit 2: Thanks for the Gold!  I guess I should go figure out what it does.  :D"
rails,3dzvha,rsphere,9,Tue Jul 21 00:16:25 2015 UTC,"Part 2: Client  I've got a lot demanding my attention so I'm gonna have to cut it kind of short.  I'd be happy to help further with the Client side of things when I get back around to Reddit soon, but here's the gist what you'll want to do:  Apologies for the formatting of code blocks below.  I use TypeScript so all of this is compiled.  I wanted to cater to the majority.   Create registration and sign-in forms in your client. Post your registration model values over to the Devise registration endpoint used in the first screenshot above. In the callback for a successful registration, manually call the sign-in url with the parameters used in the second screenshot above. If the authentication succeeds, take the token AND expiration you get back and save it in localStorage so it lives through page refreshes.   A snippet of code we use to do this:  ... setToken: function (accessToken, expiresIn) {     var expiry = Date.now() + expiresIn * 1000;     $window.localStorage.setItem('access_token', accessToken);     $window.localStorage.setItem('access_token_expiry', expiry);     _hasToken = true;     if (_timeoutID !== null) {         $window.clearTimeout(_timeoutID);     }     _timeoutID = $window.setTimeout(function () {         api.removeToken();     }, expiry - Date.now()); }, ...    Create a sign out action that removes the token and also calls the server to revoke it.   A snippet of code we use for removing the token...  signOut: function (callback) {     var params = {         token: api.getToken()     };     api.removeToken();     $http.post(CONFIG.SIGN_OUT_URL, params).success(function (data, status, headers, config) {         callback(true, null);     }).error(function (data, status, headers, config) {         callback(false, data);     }); },   ...and the code for removeToken, which is called above.  removeToken: function () {     $window.localStorage.removeItem('access_token');     $window.localStorage.removeItem('access_token_expiry');     _hasToken = false;     if (_timeoutID !== null) {         $window.clearTimeout(_timeoutID);     } },    Check the token exists on page refresh, and if it does, also check it hasn't expired.  If it has expired, remove the token.   A snippet of code we use to do this:  hasToken: function () {     if ($window.localStorage.getItem('access_token') === null) {         return false;     }     if (_hasToken === null) {         _hasToken = $window.localStorage.getItem('access_token_expiry') > Date.now();         if (_hasToken === false) {             api.removeToken();         }     }     return _hasToken; },    After page refresh, if the token exists and is not expired, sync the person info using the ""sync"" endpoint in the Server section.   For authenticating your Angular controllers (assuming you use ui-router), you'll want to create an authorize function.  var authorize = function ($rootScope, $state, $timeout, $q) {     var deferred = $q.defer();     if ($rootScope.person.hasToken()) {         deferred.resolve();     }     else {         deferred.reject();     }     return deferred.promise; };   Now tell authenticated controllers to resolve the authorization.  Here's an example of a controller we have using this.  .state('companies', {     url: '/companies',     controller: 'CompaniesListController',     templateUrl: '/views/companies/index.html',     controllerAs: 'companies',     resolve: { authorize: authorize } })   The rejection of the promise for a request to a controller without being authorized will be handled below.  This code would be in your ""run"" block that configures your Angular app.  $rootScope.$on('$stateChangeError', function () {     $state.go('signin'); });   Alright I'm pushing my time limit here, but this should get you started.  Please reply if you need any additional help.  Good luck!  PS: Redditors of /r/rails: I'm in dire need of a job.  I would be endlessly thankful for a proposition and/or any leads."
rails,3dzvha,rsphere,5,Tue Jul 21 02:29:17 2015 UTC,I'm in dire need of a job.    PM'd. Let's see if something fits.
rails,3dzvha,Bofu2U,2,Tue Jul 21 10:47:26 2015 UTC,Nice job! Would love to see this in a github repo for ease of use and review.   We used something similar but used the same stack to communicate between two different apps (testing with VCR of course).
rails,3dzvha,mesamunefire,1 point,Tue Jul 21 19:08:49 2015 UTC,"Thanks!  I would have to spend some considerable time chopping the project down to just the authentication parts to get lots of app-specific logic out of the mix, but now that I think about it, it may be a really good contribution to the community to have those bare-bones projects in a working state to seed new repos.  I will try to get that up in the next week or two if I have time and comment back here with a link.  For now, I'll migrate the posts over to a gist and post a link at some point later today."
rails,3dzvha,rsphere,2,Tue Jul 21 21:18:17 2015 UTC,Many thanks! Its such a huge help seeing the code on both sides to really wrap my feeble brain around this :D I will test this out soon and post you any questions I may have.
rails,3dzvha,johnmitsch,1 point,Wed Jul 22 00:58:07 2015 UTC,"Glad it helped you.  I'll stay tuned for questions - as I said, there was a lot of code at work in the project so I'm sure I missed something vital.  Just waiting for someone to pipe up. :p"
rails,3dzvha,rsphere,3,Wed Jul 22 01:26:54 2015 UTC,"I'm new at this, but i'm currently programming a backend api in rails for mobile.   I'm using the gem simple token authentication.   When the user logs in, i give him a token. With each call, the app sends the email and token in the headers. At logout, i reset the token."
rails,3dzvha,Eligriv,1 point,Mon Jul 20 22:07:40 2015 UTC,"With each call, the app sends the email and token in the headers.   What's the email used for?"
rails,3dzvha,Enumerable_any,1 point,Tue Jul 21 08:54:30 2015 UTC,"it's default configuration of the gem. But i suppose it's to avoid mistake : imagine for an unknown reason the token for a user is reinitialized, but the mobile app doesn't know. It's possible (but unlikely) that the old token is now used by another user. The email ensure that we're talking about a specific account."
rails,3dzvha,Eligriv,1 point,Tue Jul 21 13:07:26 2015 UTC,"Makes sense. I usually don't delete old tokens, though (just invalidate them). So this shouldn't happen."
rails,3dzvha,Enumerable_any,3,Wed Jul 22 11:35:44 2015 UTC,"Token authentication is probably going to be the best route.   Pass form data to the server, return an auth token to the user that will be stored in the client. Logging out will refresh the token.   There's something called simple auth & I think devise had a solution for this a while back too."
rails,3dzvha,mrnismo92,1 point,Mon Jul 20 23:03:00 2015 UTC,Justing adding in my 2 cents here. I recently implemented something similar using JWT (https://github.com/progrium/ruby-jwt) and the angular devise library (https://github.com/cloudspace/angular_devise).  This video (https://www.youtube.com/watch?v=_CAq-F2icp4) goes into detail about how to set up JWT authentication. With regards to why you should consider using JWT vs a simple token the main point is that a JWT can have additional information passed with it. For example in our application we have all tokens contain an expiry payload as we have a maximum session time of one week.   If you have any other questions don't hesitate to ask.
rails,3dzxhm,yez,2,Mon Jul 20 21:58:06 2015 UTC,In just starting out and my views pretty much look exactly like what not to do.
rails,3dzxhm,simkessy,2,Tue Jul 21 01:39:36 2015 UTC,"I love me some presenters. I use this pattern a lot:  Controller  class ThingersController < ApplicationController   def index     # Nothing here because collection and resource are accessible through the view   end    # ... stuff    private    def collection     @collection ||= Thinger.all.map { |t| ThingerPresenter.new(t, view_context) }   end    def resource     @resource ||= ThingerPresenter.new(Thinger.find(params[:id]), view_context))   end    helper_method :collection, :resource end   Presenter  class ThingerPresenter    attr_reader :resource, :view   delegate :launch_nukes, :send_in_dogs, :eat_potato_chips, to: :resource    def initialize(resource, view)     @resource = resource     @view = view   end    def do_a_thing     resource.some_method   end    def do_other_thing     view.do_something_else(resource)   end    def do_just_like_whatever     resource.whatevs_yo   end    # ... stuff    # If I don't feel like manually delegating I sometimes do this but I feel like it's an antipattern   # def method_missing(m, *args, &b)   #   resource.public_send(m, *args, &b)   # end  end   View  <% collection.each do |obj| %>   <%= obj.do_a_thing %>   <%= obj.do_other_thing %>   <%= obj.do_just_like_whatever %> <% end %>"
rails,3dzxhm,flanger001,3,Tue Jul 21 17:21:05 2015 UTC,"I see your point, but adding a presenter adds another layer of coupling.  If you want to change your view, you also need to change your presenter layer.  If components aren't independent, then you're not getting the benefits of encapsulation.  This presentation goes over the pitfalls of coupling your view with a controller."
rails,3dzxhm,droberts1982,2,Mon Jul 20 23:36:43 2015 UTC,"You say ""coupling the representer to the view"".  I say ""decoupling the view from the db"".  I will take this approach everytime.  If we change the db, I want to change it in one place, the view model.  This is standard MVC.  The view should never cause db queries to run."
rails,3dzxhm,snoopysdad,1 point,Tue Jul 21 03:17:08 2015 UTC,"Here are my 2c.  Controller actions are where this is stuff is supposed to happen.  Instance variables (@things) should be set in the controller, and used in the view.  I agree there is no reason anyone should be making ActiveRecord calls within the view.  That's the ""C"" in MVC.  Controller:  def some_action   @things = Things.all end   View:  <% @things.each do |thing| %>   ... <% end %>   If the views are used across multiple actions within the same controller, you should use a before_action to set the instance variable.  The view is same as above.  Controller:  before_action :set_things, only: [:action1, :action2]  private def set_things   @things = Things.all end   If the views are used across multiple controllers, the assignment should be replaced with controller methods defined in the most granular controller that will allow the places it's used to access it and exposed with ""helper_method"", like below:  Controller:  def get_things   ... end helper_method :get_things   View:  <% get_things.each do |thing| %>   ... <% end %>   Rails already has all the tools to solve these problems if used correctly.  There are other design patterns that incorporate Presenters, but MVC isn't one of them."
rails,3dzxhm,rsphere,0,Tue Jul 21 05:19:56 2015 UTC,"The first example is what not to do. Making ActiveRecord calls in the view is the exact wrong thing to do. In the second part of the article, the ""not perfect but corrected example"", it clearly has the controller making the ActiveRecord calls then passing results to a presenter. The presenter simply handles formatting that the view doesn't need to care about."
rails,3dzxhm,rsphere,2,Tue Jul 21 15:23:29 2015 UTC,"Absolutely in regards to the first example.  The first part of my response came off the wrong way - I've updated it to reflect.  I will admit that the second example is far better than the first, but I just don't see a justification for adding another layer of the abstraction, at least not personally."
rails,3e074r,djphilosopher,1 point,Mon Jul 20 23:11:28 2015 UTC,"Maybe you screwed up your migrations? Not sure what you're using for production, but try something like rake db:reset. That's going to remove all of your current data in the db BTW. Or maybe you created a story object, then added a timestamps in a migration later. That means your old story will have nil for their created_at."
rails,3e074r,thoiztrippin,1 point,Tue Jul 21 02:04:05 2015 UTC,"He's trying to call .created_at on self but self only returns ""id""=>1, ""upvotes""=>1, ""downvotes""=>0, ""user_id""=>1  despite Story.new returning   #<Story id: nil, created_at: nil, user_id: nil, url: """", title: """", description: nil, short_id: """", is_expired: 0, upvotes: 0, downvotes: 0, is_moderated: 0, hotness: #<BigDecimal:7f96f2de6440,'0.0',9(27)>, markeddown_description: nil, story_cache: nil, comments_count: 0, merged_story_id: nil, unavailable_at: nil, twitter_id: nil>   I was able to fix it by doing Story.find(self.id).created_at.to_i  How come the .created_at attribute for self isn't accessible though?"
rails,3e074r,scripore,1 point,Tue Jul 21 02:18:45 2015 UTC,Hmmm. He said it's working in development but not production though.
rails,3dyhuh,vineavip,5,Mon Jul 20 15:54:22 2015 UTC,You could give Railroady a shot - Itll generate a model relationship diagram for you. https://github.com/preston/railroady
rails,3dyhuh,piratebroadcast,1 point,Mon Jul 20 16:12:15 2015 UTC,I love railroady + docs :)
rails,3dyhuh,mesamunefire,4,Mon Jul 20 20:08:56 2015 UTC,"I really like RubyMine for when I get dropped into large Rails apps I don't understand.  It's not perfect, but it's really close. I don't use it as my every day editor, but it's super good at this stuff."
rails,3dyhuh,rwilcox,3,Mon Jul 20 16:17:53 2015 UTC,Apparently Working Effectively With Legacy Code is a book really appreciated by stackexchange community (this summary:http://www.objectmentor.com/resources/articles/WorkingEffectivelyWithLegacyCode.pdf is pointed here: http://programmers.stackexchange.com/a/122100 ) If you can read the summary or best the book.   and as said /u/andrewleung test are superimportant
rails,3dyhuh,xcombelle,3,Tue Jul 21 02:49:16 2015 UTC,alcohol... lots of alcohol. :-)  but starting to work through the 'happy path' of the app and getting some basic integration / selenium tests going will be where I start.
rails,3dyhuh,andrewleung,1 point,Mon Jul 20 22:42:34 2015 UTC,Read 'working effectively with legacy code'. Definitely worth it.
rails,3dyhuh,Nitrodist,1 point,Tue Jul 21 02:43:40 2015 UTC,One trick to understand which methods are being called is to run one specific integration test and look at simplecov's (code coverage) report.
rails,3e04xs,simkessy,2,Mon Jul 20 22:54:31 2015 UTC,2 things.   http://guides.rubyonrails.org/working_with_javascript_in_rails.html  https://github.com/apotonick/reform  Oh... and another. Have fun!
rails,3e04xs,Mallanaga,1 point,Tue Jul 21 04:36:48 2015 UTC,"Get the resource data via an AJAX call on button click and have the modal display be the success callback for the AJAX.  Situations like this, where you want to access resource-specific data without re-rendering the page, is why a lot of people use frameworks like Angular and React."
rails,3e04xs,apathetictransient2,1 point,Mon Jul 20 23:41:32 2015 UTC,"Hey sorry I'm new to this so I'm gonna try to go over what you said, let me know if I got it right.   So maybe assign the Availability id to each button on render through a data-attribute  On click, use that ID to make a call to say GET /availabilities/id (from btn)  Then use the result to populate the form   Then proceed with update using ajax again.   Would that be the just of it?"
rails,3e04xs,apathetictransient2,1 point,Tue Jul 21 00:01:58 2015 UTC,"Yup yup. There are a plethora of ways to do it, but that's how I'd do it."
rails,3dzkhy,rooood,1 point,Mon Jul 20 20:25:44 2015 UTC,"With an engine you can pick and choose what parts you add into the Rails app. If you want to only add some views, that's all the engine needs to do and there doesn't need to be any code around other things.   Don't worry too much about it, just make sure your gem provides the functionality in a simpler manner. My 2 cents is that an engine probably makes the most sense.  I'm working on my gem simple_calendar right now and went with an engine simply because it autoloads any of the view folders in the engine. If I used a Railtie instead, I'd have to hack in the code to insert the path into the views. It's simpler all around to just use an Engine but not use most of the functionality it provides.  Here's a link to the vlog episode on setting this up as a Rails Engine https://www.youtube.com/watch?v=fk5PFPlPAmc"
rails,3dzkhy,excid3,1 point,Mon Jul 20 20:30:05 2015 UTC,"Thanks, I'll check the video and make the final call, but I'm already inclined to go the Engine way"
rails,3dy1a2,claudiug1,2,Mon Jul 20 13:46:54 2015 UTC,"What exactly do you mean ""Live Streaming""? Isn't that just the name given to a service/application that stream datas to a front-end player?  From what I understand ActionCable is meant to be the Rails Way of handling ""Live Streaming"". So if anything it is cementing Live Streaming's place in modern Rails applications."
rails,3dy1a2,Abe-c,3,Mon Jul 20 14:05:23 2015 UTC,"I guess the op means ActionController::Live. And I think that is obsolete as ActionCable solves the same problem in a better way. With Live you had to run an instance of your rails app for each client to keep the connection alive and from a resource usage point of view, that's an overkill. In the other hand, ActionCable runs a stripped down multi-threaded rails process to serve the websocket connections."
rails,3dy1a2,gregmolnar,4,Mon Jul 20 14:22:07 2015 UTC,agree: I was mean: ActionController::Live
rails,3dy1a2,alwaysonesmaller,2,Mon Jul 20 14:26:32 2015 UTC,"Then the answer, for most if not all use cases, is yes."
rails,3dy1a2,Abe-c,1 point,Mon Jul 20 14:53:57 2015 UTC,Yes in that case ActionCable will replace ActionController::Live
rails,3dy1a2,pavlik_enemy,1 point,Mon Jul 20 15:05:33 2015 UTC,As  far as I remember ActionController::Live uses threads.
rails,3dy1a2,sb8244,2,Mon Jul 20 15:30:00 2015 UTC,Isn't ac live a persistent http connection and cable uses sockets. They are different  and both useful items in the back pack.
rails,3dy1a2,rabidferret,1 point,Mon Jul 20 17:01:48 2015 UTC,"No, the use cases do not overlap."
rails,3dxard,racer_sam,3,Mon Jul 20 08:27:23 2015 UTC,"I'm just finishing up a rails app at the moment which uses bootstrap and bootstrap-material-design gems. It's not perfect, but it works for what I'm doing. There's also another framework called materialize which looks really nice. I wish I had used that at the beginning of my project."
rails,3dxard,thelittlefry,1 point,Mon Jul 20 09:55:35 2015 UTC,"The materialize gem is pretty sweet, I'm using it on a project. It might encapsulate things too much for how small it is though"
rails,3dxard,imicit,1 point,Mon Jul 20 13:54:22 2015 UTC,"Yeah, it looks like it's still being built though, which is great. I think the bootstrap-material-design has stopped being developed."
rails,3dxard,thelittlefry,2,Mon Jul 20 14:16:20 2015 UTC,"One option: https://github.com/alchapone/polymer-paper-rails  (Google searched ""Ruby on Rails Material UI"" and got loads of different results)"
rails,3dxard,rurounijones,1 point,Mon Jul 20 09:17:43 2015 UTC,"As noted in the Readme for that repo, this is actually the up-to-date one as of Polymer 1.0: https://github.com/alchapone/polymer-elements-rails"
rails,3dxard,redbassett2,1 point,Mon Jul 20 15:32:02 2015 UTC,"I'm in the process of converting an existing app to Polymer 1.0 and the Paper elements that ship with Polymer (Paper is the name of Polymer's Material Design implementation).  Due to how new Polymer as a whole and especially 1.0 is, documentation is sparse and examples can be hard to come by. That said, I've found that the polymer-rails and polymer-elements-rails gems have been very useful. Using these two gems, you can just put the name of each element you need into assets/components/application.html.erb, much like how you would use Bower to install each component."
rails,3dxard,redbassett2,-1,Mon Jul 20 15:36:19 2015 UTC,You can write a single page application that uses Rails as backend via a json API.  There are some ways to render the react components on the server when creating the initial request.  https://github.com/reactjs/react-rails  Other than that it should be pretty decoupled from Rails.
rails,3dw8tz,darithorn,4,Mon Jul 20 01:32:20 2015 UTC,Use a before_filter in the controller
rails,3dw8tz,apathetictransient2,1 point,Mon Jul 20 01:42:49 2015 UTC,"Perfect, thanks."
rails,3dw8tz,dmelin,1 point,Mon Jul 20 01:50:54 2015 UTC,Put it in the ApplicationController as a before_filter if it is truly fired on every action
rails,3dv7lw,abdlmalek,7,Sun Jul 19 20:10:41 2015 UTC,Step 1.  Check the wiki: Allow users to Sign In using their username or email address  Step 2. Profit.  :-)
rails,3dv7lw,pglombardo,1 point,Sun Jul 19 20:31:07 2015 UTC,Step 3. Thank pglombardo!  One thing. Where should I put this:  def login=(login) @login = login  end   def login  @login || self.username || self.email  end
rails,3dv7lw,pglombardo,3,Sun Jul 19 20:36:18 2015 UTC,That goes in your user model and tracks what the user logged in with.  No problem!  Good luck.
rails,3dv7lw,jurre,1 point,Sun Jul 19 20:39:34 2015 UTC,"Like pglombardo said it goes in the user model, but if you've already set the attr_accessor there, you most likely won't need this code :)"
rails,3dv7lw,DanielKehoe,3,Sun Jul 19 21:43:38 2015 UTC,The Rails Devise application from the RailsApps project gives you a working example application.
rails,3dukl7,zappable,6,Sun Jul 19 16:56:20 2015 UTC,"Sure :) Recently, there was http://railschallenge.com and it was great."
rails,3dukl7,msapka,1 point,Sun Jul 19 16:57:55 2015 UTC,I would be! I want to work on something that pushes me to learn more.
rails,3dukl7,BlackjackCF,1 point,Sun Jul 19 17:43:46 2015 UTC,Yes.
rails,3dukl7,wannabe_ee,1 point,Sun Jul 19 19:22:56 2015 UTC,"Yes, assuming I have the team and I would want it to be something I can use on my resume. Not another todo app. I wasn't a big fan of railschallenge.com ..."
rails,3dukl7,lovetocode,1 point,Sun Jul 19 20:09:40 2015 UTC,As a beginner I would love something like that.
rails,3dukl7,abdlmalek,1 point,Sun Jul 19 20:11:37 2015 UTC,Yes please.
rails,3dubqn,agmcleod,2,Sun Jul 19 15:34:08 2015 UTC,"You can learn some object oriented patterns that's going to eventually get you ready to do some refactoring of your models and controllers, checkout Practical Object-Oriented Design in Ruby (POODR), then I would look into Rails anti-patterns, its a bit dated, but has some good info. The Well-Grounded Rubyist is also very good, it breaks down concepts more than other Ruby books I've read, might be worth reading, finally you can check out some metaprogramming in Ruby, on my list to read is Metaprogramming Ruby: Program Like the Ruby Pros.   All the best!"
rails,3dubqn,codefoobar,1 point,Sun Jul 19 16:43:28 2015 UTC,"I've read rails anti patterns a few years ago actually, but might be worth giving it a quick overview again. I haven't done a ton of meta programming, as mostly custom DSLs and things like that use class_eval and what not. I've used define_method, and send a fair bit. In a few unfortunate circumstances: reimplemented method_missing. I'll have a look at POODR, sounds interesting.  Also, wondering if there are good blogs or newer books available on testing patterns. I've been finding factory girl both great & annoying at the same time, mainly with associations. While i see where people come from on not hitting your db, sometimes i need to test methods that perform db queries."
rails,3dubqn,white_is_red,1 point,Sun Jul 19 16:47:11 2015 UTC,"There are so many gems out there... I dunno it depends what you like. Decent exposure is nice although I've heard some arguments against it. On the subject of the POODR book, there's a gem I came across that checks how close to the authors style you are. I forget the name at the moment. Bother me later if you want it."
rails,3dtmo4,EdoPut,18,Sun Jul 19 09:52:58 2015 UTC,"Personally I would just start with Rails 4, the transition to 5 should be a straight forward upgrade.  There is plenty to learn around the Rails framework, all of that learning will be transferable."
rails,3dtmo4,kulehandluke,2,Sun Jul 19 10:12:47 2015 UTC,Thank you for your contribution
rails,3dtmo4,kulehandluke,3,Sun Jul 19 11:04:33 2015 UTC,"No probs, I've been using Rails since 2006/7 so if you have any questions feel free to drop me a line."
rails,3dtmo4,dazonic,6,Sun Jul 19 11:16:32 2015 UTC,"Start today with 4. Way easier to google and stackoverflow  things—often when you're new you won't know if the thing you're working with is different in your new version of rails, you might Google 'has many through'  and all the answers are for Rails 4, you're left wondering if there's a better way in Rails 5 but there's no info out there.   The upgrade guides will help when 5 is more mature, if you read about any must-have features in 5, so you can always upgrade later."
rails,3dtmo4,MrKequc,2,Sun Jul 19 12:01:51 2015 UTC,thank you
rails,3dtmo4,miekao,4,Sun Jul 19 15:25:08 2015 UTC,"My experience trying to use unreleased rails is always one fraught with pain. Even in instances where Rails itself works, many gems are not compatible. It can really be a complete nightmare.  A lot of new code between releases operates in a theoretical space. There are lots of tests, testing the functionality, but it doesn't necessarily fit yet into the framework and lots of things break.  Wait for the official release, then wait an additional week or two. That way when you run into problems there will be other people talking about those problems already.  If you're just starting out, then especially use Rails 4. The upgrade process won't be too painful, if you don't just completely start over anyway due to the amount you learned in the mean time."
rails,3dtnae,ipepe,6,Sun Jul 19 10:04:23 2015 UTC,The answer is reconsider what you are doing.
rails,3dtnae,1s44c,2,Sun Jul 19 14:43:06 2015 UTC,"Azure does support linux. I only know this because I'm in the middle of a comparison between Azure and EC2 (Company has an agreement w/ MS, so I need to have a solid business case to select EC2 over Azure)"
rails,3dtnae,IMayOrMayNotBeBrian,1 point,Sun Jul 19 16:03:31 2015 UTC,"I have a rails site running in on a Linux vm in Azure right now. No problems with it at all.   I much prefer AWS, but the customer was already using Azure, so we just spun up a Linux vm, installed mysql, apache, rbenv, git, and everything works perfectly. AWS  has better db systems, but it's no biggie."
rails,3dtnae,harbogast,1 point,Sun Jul 19 17:38:06 2015 UTC,Yes but deploying Rails as a Website is:   less hasle than maintaining linux vm hooking into github and deploying on commit is such a great feature lower costs better security scaling feature can run on free mode automated backups
rails,3dt7z1,gorillaf,1 point,Sun Jul 19 05:47:00 2015 UTC,Update:  Figured it out. I used ENV variables to parse variables to the rake task. woot! :)
rails,3dt7z1,checkyos3lf,1 point,Sun Jul 19 06:46:17 2015 UTC,Nice
rails,3drgu3,simkessy,3,Sat Jul 18 19:15:53 2015 UTC,"Why don't you worry about ""at scale"" when you're actually at scale and it's becoming a performance issue?"
rails,3drgu3,materialdesigner,2,Sat Jul 18 19:29:53 2015 UTC,"Yea sure that's one strategy. But I'm still looking for a search strategy now. Do you have any recommendations for something that can return results based on locations and associated models.  For example, the end result of a search is for a block of available time which is one record in the Availability model.   That time is associated which an office which belongs to a business.  I need to be able to find available times based on offices belonging to businesses close to my or a given location. Ideally."
rails,3drgu3,wbsgrepit,1 point,Sat Jul 18 19:36:40 2015 UTC,"I need to be able to find available times based on offices belonging to businesses close to my or a given location. Ideally.      Am I misreading this or are you talking about time range matching, geo matching in this question and not full text matching?  If so I would sit down and define what types of searching you actually need and map those to use cases.  Some search will be handled better in db,  some may need things like elasticsearch etc."
rails,3drgu3,wbsgrepit,1 point,Sat Jul 18 22:59:54 2015 UTC,"No I think you have it. I'm not looking for text searches. Users can't even search for text on the form. Each Availability is a one hour block you can purchase. Thats what the user is searching for. An availability filtered by time, categories and location.   Regarding categories, if the Availability is associated with a room that only sits 4 people, person count would be a filter in the form. So I'm trying to query an availability that sits the given time range where the availabilities room can sit 4 or less people and is within 20meters from my location  This is why I'm wondering if Elasticsearch might be over kill."
rails,3drgu3,Kimos,1 point,Sat Jul 18 23:21:37 2015 UTC,"Again,  I would recommend taking a step back and sit down with some paper and a pen.   Work through what you want to provide for search and in what ways.  I assume if you really are trying to build an airbnb clone users WILL need text searching in addition to the filtering you are talking about.    After you get a really good idea over all of the ways you want to filter/search then the next step is how do you build a system that allows all of those in a extendable, scalable (within reason depending on your immediate goals)  maintainable manor.     Without really knowing what that looks like for your app,  but based on airbnb,  I would assume there would be need for some db level filters that can be stacked and a fulltext like system maybe like elastic search that is indexed off of db id keys so it is also able to be quickly stacked in the filter queue or as a silo.     The prep work you do now wrapping your head around this problem will allow you to make much better decisions over how and what you implement so you are not fighting a house of cards from start to finish."
rails,3drgu3,Kimos,2,Sat Jul 18 23:29:08 2015 UTC,"I have worked with Solr and ElasticSearch and the latter is far superior in my experience.  It is easy to setup. Very light weight to get started, but you can pile clusters and shards and other nodes on it almost infinitely. It has great tools like Marvel for digging into indexes and cluster health. The API is super clean and the docs are good.  It is also incredible stable and resilient."
rails,3drgu3,pukotoshana_murkals,2,Sat Jul 18 19:52:26 2015 UTC,Yea I'm leaning towards it as well. Searchkick is based or a wrapper for Elasticsearch. Is that what you use or some other gem? Do you know of it works well with geolocation since I plan on playing around with geocoder and Google maps as well.
rails,3drgu3,xenilko,2,Sat Jul 18 20:03:02 2015 UTC,"Honestly, the ES API is so good just use the gem they provide."
rails,3drgu3,cheald,1 point,Sat Jul 18 23:12:00 2015 UTC,"Yep, elastic shoild have you covered in this case."
rails,3drgu3,sb8244,1 point,Sun Jul 19 09:58:29 2015 UTC,Does ES cost money? It seems unclear as per their website
rails,3drgu3,SulfurousAsh,1 point,Sun Jul 19 12:38:41 2015 UTC,No.
rails,3dsaex,Conspicuous_Account,1 point,Sat Jul 18 23:44:31 2015 UTC,"I know I just posted to stackoverflow, but I havent had much luck with this question in the past (people didnt seem to understand me) and its saturday night so I figured I might need all the attention I can get..."
rails,3dsaex,Mallanaga,1 point,Sat Jul 18 23:46:16 2015 UTC,Convert it to an engine.
rails,3dqg1x,mrpeabodynsherman,3,Sat Jul 18 13:25:01 2015 UTC,"Some experts at Pivotal Labs coached me to only ever think of relationships from the belongs_to perspective. Draw it all out on paper and try to see a hierarchy from the bottom up.   Delegate delegates a method (attributes are just getter/setter methods) to another class. So if you say delegate :bark to :dog (syntax not withstanding - I'm on mobile) you're just saying when I call bark here, actually go do whatever bark is defined as within the Dog class."
rails,3dqg1x,Misaiato,2,Sat Jul 18 15:39:12 2015 UTC,"This is a toughie. Maybe cache the report on each of those tables so report has many _ instead of those complex joins. I don't actually think the first solution would work because when you have a has many relationship, it returns an active record relation, which you can only call class methods on."
rails,3dqg1x,Lucky_Chuck,1 point,Sat Jul 18 15:59:03 2015 UTC,Do you mean Low-Level Caching? Still learning what rails can do. Thanks for your help.
rails,3dqg1x,tongboy,2,Sun Jul 19 05:04:53 2015 UTC,"This is really a data relationship question.  If i'm reading your data model right...  i'd consider using  through table on your report & template and then relate your values to that through table. That means you're not as many levels deep on your report -> value and your templates can stay more separated from your report.  class Report has_many :templates, through: :report_templates has_many :values  class Template has_many :reports, through: :report_templates  class ReportTemplate belongs_to :template has_many :reports ... class Value belongs_to :field belongs_to :report_templates"
rails,3dqg1x,philalether,2,Sat Jul 18 18:28:48 2015 UTC,"I played around with a few approaches. This approach below avoids the redundancy of the report_id foreign key in Value, minimizes coupling following the Law of Demeter, and results in fully optimized queries:  class Report < ActiveRecord::Base   has_and_belongs_to_many :templates    has_many :values, through: :templates end  class Template < ActiveRecord::Base   has_and_belongs_to_many :reports   has_many :sections    has_many :values, through: :sections end  class Section < ActiveRecord::Base   belongs_to :template, inverse_of: :sections   has_many :columns    has_many :values, through: :columns end  class Column < ActiveRecord::Base   belongs_to :section, inverse_of: :columns   has_many :fields    has_many :values, through: :fields end  class Field < ActiveRecord::Base   belongs_to :column   has_many :values end  class Value < ActiveRecord::Base   belongs_to :field end"
rails,3dqg1x,philalether,1 point,Sat Jul 18 22:02:34 2015 UTC,"I am trying this method and getting stuck when I try to create a new report with new values. I can't seem to understand how any given Value can be attached to the Report? There is no cross-values anywhere, that I can see. What magic is rails doing to make this relationship work for you?  I tried creating new values like this, but it just creates them in addition to the original template default values:    def create     template = current_user.templates.find(params[:template_id])     @report = current_user.reports.new(allowed_params)     @report.save     @report.templates << template     @report.templates.each do |template|       template.sections.each do |section|         section.columns.each do |column|           column.fields.each do |field|             field.values.each do |value|               value = Value.create(:field_id => field.id)             end           end         end       end     end     current_user.reports << @report     render 'show', status: 201   end"
rails,3dqg1x,philalether,2,Mon Jul 20 09:53:15 2015 UTC,"Please clarify your use case. Do you create new templates inside the report form, or do you just choose existing templates and attach them there? Most importantly: when you add a new value to a report, are you really adding it to the template (and it should show up in all reports which use that template) or are you really adding it just to the report (and it should not show up in other reports which use that template)?"
rails,3dqg1x,Lucky_Chuck,1 point,Tue Jul 21 18:25:37 2015 UTC,"Edit 2: Haha sorry. Thought this was a response to my Updated reddit post. Here's the stack overflow solution post I'm talking about below.  Edit: To upfront answer your questions:  This SO post doesn't cover creating the Template object, no. A Template is created before a Report is created. A Template is essentially a collection of HTML <input> tags. The relationships are modeled so that you can add multiple Templates to a single Report if you want. But the Create and Update methods need updates to reflect this functionality.  Report.values should only show up for the Report they were created for. A Template should have no knowledge of Report.values, but a Report should have knowledge of Template.values (which I explain below are inferred from Template.fields, and needed for default Values for the Template). I explain Report.value creation below.    A Template gets its Fields in the Template creation process and a corresponding Value is created and attached to any Field when it is created, so you can have the following  Template.sections.columns.fields.values   This allows your Template to have default Values for their Fields.   Since each Field is uniquely IDd in the DB (and with the required  model relationships allowing use of Template.fields and Report.values) I can say in the Rails Report Controller Create method  template.fields.each do |field|   @report.values.where({:field_id => field.id, :report_id => @report.id, :input => field.values.first.input }).first_or_create end   This takes the default Template.fields.value (:input) and creates a 'fully-functional' Value, which is to say one containing both :report_id and :field_id indexes. There's only needed 1 Value per Field per Report, so you can use rails' .first and first_or_create. Now my @report has unique Values, separate from the original Template.values.  Now in your Show method:  def show   report = current_user.reports.find(params[:id])   render json: report.as_json(     :include => [:values, :templates => {    #### Point 1       :include => { :sections => {         :include => { :columns => {           :include => { :fields => {             :include => :options     #### Point 2             #### The above line could be rewritten:             # :include => [:options, :values]             #### This would give all the values for the Field           }}         }}       }}     }]   ) end   Point 1 - Include @reports.values and @report.templates for use in AngularJS  Point 2 - Do NOT include Fields.values which stem from the Template(s), which would indeed give you all the Values attached to that Field ID.  Now when the object hits angular, you need to combine @report.values into the corresponding Fields of the Template(s) that is loaded into @report.templates  ClassFactory.get({class: 'reports', id: $routeParams.reportId}, (res)->     $scope.report = res     $scope.report.templates.forEach((template)->         template.sections.forEach((section)->             section.columns.forEach((column)->                 column.fields.forEach((field)->                     field.values = $scope.report.values.filter((obj)->                         return obj.field_id == field.id                     )                 )             )         )     ) )   It's clunky, but it works. And it allows for some pretty neat things:   Field IDs are always unique, so the above script will only ever place a @report.value into the correct Template.field.values (as both of these reference field_id) When Templates are updated, so are old reports! And with the right Report Update method, it's easy to find out which @report.values don't exist yet and need to be created for new Template.fields. I think this is a cool feature. Maybe others don't.   I know I re-explained/over-explained. Helps me to talk about it though, so thanks. Let me know if I even answered your question ha ha.  Edit:  Just realized I can slightly reduce clunkiness by adding something like this in the Create method:  @report.fields = template.fields   Then just reference $scope.report.fields in Angular, to reduce my looping. Learning in action."
rails,3dqg1x,philalether,1 point,Tue Jul 21 19:55:19 2015 UTC,Thank you all so much for the feedback. I'm going to look over what's here and try to figure something out!
rails,3dqg1x,Lucky_Chuck,1 point,Sun Jul 19 04:19:57 2015 UTC,"I'm assuming that the report contains every value at the bottom of your hierarchy -- i.e. those are actual values contained within the report, not merely possible values to choose from. In that case, I don't see any particular need to have the redundant belongs_to :report and its accompanying foreign key report_id in your Value model.  To keep Report uncoupled from the classes in the Template hierarchy and also follow the Law of Demeter, I think you're looking for the flat_map method:  class Report < ActiveRecord::Base   has_and_belongs_to_many :templates    def values     templates.flat_map{ |t| t.values }   end end  class Template < ActiveRecord::Base   has_and_belongs_to_many :reports   has_many :sections    def values     sections.flat_map{ |s| s.values }   end end  class Section < ActiveRecord::Base   belongs_to :template   has_many :columns    def values     columns.flat_map{ |c| c.values }   end end  class Column < ActiveRecord::Base   belongs_to :section   has_many :fields    def values     fields.flat_map{ |f| f.values }   end end  class Field < ActiveRecord::Base   belongs_to :column   has_many :values end  class Value < ActiveRecord::Base   belongs_to :field end   This lets you call report.values, and receive a one-dimensional (flat) array. If you used map instead of flat_map then you'd get a deeply nested array, which probably isn't what you want (but might be!).  Using has_many :foos, through: bars would also work, but creates coupling between Report and every other class. I doubt Report needs to know about every other class in the Template hierarchy.  Using delegate is great, but it only works for singular associations (i.e. has_one and belongs_to).  For example, if you have:  class First   has_one :second   delegate :values, to: :second end  class Second   belongs_to :first   has_one :third   delegate :values, to: :third end  class Third   belongs_to :second   has_many :values end  class Values   belongs_to :third end   then you can call foo.values."
rails,3dqg1x,philalether,3,Sat Jul 18 18:59:00 2015 UTC,"This is a very bad idea, you will end up with a lot of n+1 queries when you use the flat map method, especially if you are chaining them."
rails,3dqg1x,Lucky_Chuck,1 point,Sat Jul 18 19:05:46 2015 UTC,"You're right, I wasn't thinking about optimizing queries.  With the right join/includes, it could happen in one query and the flat_map-ings above would work:  class Template < ActiveRecord::Base   default_scope -> {     joins(sections: {columns: {fields: :values}})       .includes(sections: {columns: {fields: :values}})   } end   Unfortunately, this means Template is again coupled with all of its hierarchy descendants which is basically identical to doing:  class Report < ActiveRecord::Base   has_and_belongs_to_many :templates   has_many :sections, through: :templates   has_many :columns, through: :sections   has_many :fields, through: :columns   has_many :values, through: :fields end   I've tested both in Rails 4.2.1, and they both work.  Playing with the latter, I've discovered that the has_many ..., through: ... associations can be chained through the class hierarchy in a more Law-of-Demeter-y way to reduce coupling, as I've shared here."
rails,3dnc1p,nithinbekal,2,Fri Jul 17 17:48:30 2015 UTC,"Small typo in the cable/config.ru part:   As I mentioned earlier, ActionCable runs in a separate process, so it needs its own rackup file, which we’ll put in coble/config.ru."
rails,3dnc1p,pjdavis,2,Fri Jul 17 18:56:40 2015 UTC,Fixed. Thanks! :)
rails,3dnc1p,kobaltzz,2,Fri Jul 17 19:01:56 2015 UTC,Any thoughts on how to run the web sockets over ask? Just using ws:// will give an error in the console as it is an insecure channel.
rails,3dnc1p,lordp,2,Sat Jul 18 04:38:31 2015 UTC,"I'm assuming 'ask' is supposed to be 'ssl'? If so, using wss:// is the equivalent."
rails,3dnc1p,kobaltzz,1 point,Sat Jul 18 04:47:02 2015 UTC,"Yes. Sorry about the typeo. I did manage getting it working, but ended up using Thin instead of Puma."
rails,3dnc1p,djkz,1 point,Sat Jul 18 16:15:32 2015 UTC,"Thanks for that!  Because I like to use react to render my view components, I have updated it so the rails server acts as a flux dispatcher, action-cable syncs the state to the server and react renders all visual components.  Take a look at https://github.com/djkz/actioncable-react"
rails,3dmkg7,xenilko,1 point,Fri Jul 17 14:16:01 2015 UTC,"I'd look at polymorphic relationships. Additionally, you can make fields optional with null: true."
rails,3dmkg7,superman3275,1 point,Fri Jul 17 18:32:02 2015 UTC,"What's the association between the Highlight and Trip model? Is it a Trip has_many :highlights?  If that's the case, you can probably def something like the following  before_save :delegate_to_trip #or whatever function name you want to call it  def delegate_to_trip   title ||= trip.title   tagline ||= trip.tagline   description ||= trip.description end   I believe this will work. Play with it, not 100% on it. But the point is that if no values are passed in for title, tagline, and description, it will delegate it to Trip. Keep in mind that this will work only if you have a has_many/has_one belongs_to relationship."
rails,3dmkg7,BlackjackCF,1 point,Fri Jul 17 19:09:46 2015 UTC,I have a trip:belongs_to association on Highlight  Is the best solution like you said simply having before_save function where I copy things over from trip to the highlight I want to create? I'm thinking that might come with some issue where I have to keep the data in sync between highlight and trips (i.e: guy goes in to fix a typo in trip but that was already copied to highlight so he needs to go in highlight and fix it as well)
rails,3dmkg7,BlackjackCF,1 point,Fri Jul 17 19:39:46 2015 UTC,"Your statement there is a little confusing. Do you mean that a highlight belongs to a trip, or a trip belongs to a highlight?   In any case, if it is a has_many relationship, have you looked into accepts_nested_attributes_for?  This means that you can add the following on Trip (again, this is keeping with if Trip has_many :highlights.)  class Trip   accepts_nested_attributes_for :highlights   This will allow you to pass a hash of params to Highlights that's associated with the Trip. If you pass Highlight's params to Trip without an ID, it will create a new Highlight with a reference back to Trip. However, if you do pass an ID, it will update the existing Highlight."
rails,3dmkg7,BlackjackCF,1 point,Fri Jul 17 20:23:13 2015 UTC,"Sorry about the confusion, here is my Highlight model:  create_table ""highlights"", force: :cascade do |t|   t.integer  ""trip_id""   t.string   ""title""   t.string   ""tagline""   t.text     ""description""   t.string   ""image_file_name""   t.string   ""image_content_type""   t.integer  ""image_file_size""   t.datetime ""image_updated_at""   t.datetime ""created_at"",         null: false   t.datetime ""updated_at"",         null: false   t.datetime ""deleted_at"" end   And basically Trip has this  create_table ""trips"", force: :cascade do |t|   t.string   ""title""   t.string   ""tagline""   t.text     ""description""   t.integer  ""rythm"",               null: false   t.integer  ""duration"",            null: false   t.integer  ""transport"",           null: false   t.datetime ""created_at"",          null: false   t.datetime ""updated_at"",          null: false   t.datetime ""deleted_at""   ..part omitted... end   So basically the ""highlight"" will be used as a ""Featured trips"" part of the front page. The client wants the possibility to optionally replace the original trip's title/tagline/description with his. So that's why I decided to create the highlight model instead of adding a ""featured"" boolean in trips.  And as you can see other things won't change (transport/rythm/duration) so that's why I left them out.  Now I want to implement the ""title of highlight takes over trip's title when it's  being displayed""  Right now I have the view like this, which works:  <h1> <% if highlight.title.present? %>   <%= link_to highlight.title, highlight.trip %> <% else %>   <%= link_to highlight.trip.title, highlight.trip %> <% end %> </h1> <h2> <% if highlight.tagline.present? %>   <%= highlight.tagline %> <% else %>   <%= highlight.trip.tagline %> <% end %> </h2> <p> <% if highlight.description.present? %>   <%= highlight.description %> <% else %>   <%= highlight.trip.description %> <% end %> </p>   but I feel like it's far from being elegant..."
rails,3dmkg7,rahoulb,1 point,Fri Jul 17 22:10:07 2015 UTC,"Thanks for the clarification. It's very helpful.  For future reference, you can also use a t.references :trip instead of a t.integer :trip_id.  In terms of your view logic, yes, I think this can all be abstracted out a little better. If you're not going to handle displaying this on the model end, which you could, you should try and stick all of this view stuff into a view helper to help with the view clutter a bit.  I'll give you an example:   def title   return link_to highlight.title, highlight.trip if highlight.trip.present?   link_to highlight.trip.title, highlight.trip end   And then in your view you can just call:     <h1>     <%= title %>  Rinse and repeat those methods for the tagline and description.  That will help clean up a lot of this. Otherwise, you can do a bunch of ternary statements (which I'm not a fan of because again, I think the logic should be out of your view.) So:   <%= highlight.title.present? ? link_to highlight.title, highlight.trip : link_to highlight.trip.title, highlight.trip %>   If you're not familiar with ternaries, this basically is an if/else statement. So, you read it as such: [statement to be evaluated] ? [if statement is true, execute this] : [if statement is false, execute this].  I use Haml instead of ERB, so I'm not 100% sure if the latter is the correct syntax... (shouldn't be different/that different.) Worth giving it a shot. However, I think abstracting all this into a view helper is much more elegant/readable and makes your HTML much less of an eyesore."
rails,3dmq5r,simkessy,3,Fri Jul 17 15:02:31 2015 UTC,"I'm not familiar with Faker, but I'm pretty sure that when you call venue.id to set the facility's venue_id, the venue isn't saved yet, so it's ID is nil. It won't get an ID until after it has saved."
rails,3dmq5r,pbyrne,2,Fri Jul 17 17:13:50 2015 UTC,"Agreed with the above.   I'm not familiar with the Populate gem, but this does seem to be the case. Could you maybe try to see if you can just pass Facility the entire Venue object? This works in ActiveRecord.  Also, what version of Rails are you doing this project in?"
rails,3dmq5r,BlackjackCF,2,Fri Jul 17 18:52:45 2015 UTC,Sounds like your associations may not be set up correctly. Could you post the parts of the code from your models where you set up the associations?
rails,3dmq5r,MidevilPancake,1 point,Fri Jul 17 15:37:47 2015 UTC,Also the schema and sample data
rails,3dmq5r,pjleonhardt,1 point,Fri Jul 17 15:58:08 2015 UTC,"If Venue has_many :facilities, dependent: :destroy, then you can do Venue.destroy_all to delete all the venues and facilities and once if it's a has_many, you'd do Venue.first.facilities, not Venue.first.facility"
rails,3dmq5r,JustinAiken,2,Fri Jul 17 15:08:50 2015 UTC,"Hey I tried what you said and I get an empty array.  For example, when I do Facility.first.venue_id I get 1 but if I do  Facility.first.venue I get []  Normally when things are properly associated, I'd get all the Venues information for that Facility."
rails,3di4d0,devwalks,2,Thu Jul 16 13:33:50 2015 UTC,this is awesome! Need help with any of this?
rails,3di4d0,soforchunet,1 point,Thu Jul 16 13:56:23 2015 UTC,"Yes please. I installed ImageGick and Paperclip. But when I submit the form to create a post with the image, it got stuck. It starts loading for a while then nothing happens. When I check the database I don't find anything."
rails,3di4d0,abdlmalek,2,Thu Jul 16 20:48:09 2015 UTC,"Hi there!  If you look in the terminal that's running the server, what error is shown?  Is imagemagick running in the background on your  computer?"
rails,3di4d0,abdlmalek,1 point,Fri Jul 17 01:42:17 2015 UTC,When I hit create post the window in the browser starts loading. In the this http://i.imgur.com/ZM1Fn5I.png keeps appearing non-stop for about 5 minutes. Then when the window stops loading I see this http://i.imgur.com/l6Mr6Q2.png But nothing has been submitted to the database.
rails,3di4d0,abdlmalek,1 point,Fri Jul 17 02:11:00 2015 UTC,"It looks like imagemagick is having issues. I can't really help with a specific fix though I'm afraid, you'll have to troubleshoot with your error messages and Google."
rails,3di4d0,abdlmalek,1 point,Fri Jul 17 03:41:57 2015 UTC,I already did. I tried everything but nothing worked. I think I must switch to linux for development.
rails,3di4d0,soforchunet,2,Fri Jul 17 03:48:38 2015 UTC,Oh I just noticed the windows ui. Dual booting Linux should be easy enough and definitely worth your while.
rails,3di4d0,Ke0,1 point,Fri Jul 17 03:50:43 2015 UTC,Yea that's what I thought too. I will install Ubunto tomorrow.
rails,3di4d0,Ke0,1 point,Fri Jul 17 04:00:07 2015 UTC,Oh sorry! I was referring more to @devwalks and whether he needed another person to help write tutorials.
rails,3di4d0,gregordog,1 point,Fri Jul 17 05:22:56 2015 UTC,"Oh hey, sorry I missed this too! I'm OK working on this by myself for the moment but thanks heaps for the offer.   You could always write your own series!"
rails,3di4d0,krues8dr,2,Fri Jul 17 10:43:49 2015 UTC,Great as usual good sir. I really like how you talked a bit about AJAX and how Rails uses it.
rails,3di4d0,gregordog,2,Thu Jul 16 14:43:17 2015 UTC,"Thanks!  I really like the AJAX part too, it just changes the whole feel of the application for the better.  I wouldn't mind doing a short video tutorial on AJAX and Rails too."
rails,3di4d0,krues8dr,1 point,Fri Jul 17 01:43:21 2015 UTC,"That'd be a killer idea, not enough tutorials/screencasts/resources touch AJAX and rails."
rails,3djtz0,TaylorHu,2,Thu Jul 16 21:13:59 2015 UTC,I'd hazard that many Ruby on Rails  developers don't draw out formal UML diagrams. Maybe this in because Rails makes it pretty easy to model many of the concepts of UML (has one / has many / inheritance / ...) in code. The framework and language remove a lot of the overhead that other frameworks had and let you prototype out concepts in code incredibly quickly. That's not to say developers shouldn't sketch out concepts - but something as formal as UML might not be required.  A few projects even exist to extract UML (I believe it is a feature of the IDE RubyMine and you can Google a few projects that do it).
rails,3djtz0,robotsmakinglove,1 point,Fri Jul 17 02:05:21 2015 UTC,"I usually just use UML (using Dia) to mock up the Model attributes and relationships, not so much the Views or Controllers."
rails,3djtz0,Oshuma,1 point,Thu Jul 16 23:55:19 2015 UTC,"For schema design specifically I use MSQLWorkbench (even with Postgres schemas). It's has a pretty solid ERD designer. I maintain that in db/ along with a PDF export of it at db/schema.pdf for other devs to refer to without loading it back in. Keep migrations matched to it. I just add postgres-specific datatypes as custom ones (arrays, jsonb etc).    One could go a step further and write a python (or lua maybe, I forget if it supports that) plugin that takes the ERD and writes a ruby schema.rb    Visualizing one's data model is incredibly valuable, but not really something ingrained in the ruby mindset."
rails,3djtz0,robo-mitten,1 point,Fri Jul 17 08:15:11 2015 UTC,"The only UML I've seen used professional is an ERD to model a database schema. Very very rarely do I see it to model class structure, and even then its kind of useless to me."
rails,3dkxjl,yourunclecarl,3,Fri Jul 17 02:42:21 2015 UTC,"There are various algorithms, such as ""Levenshtein distance"" , that give you a ""numeric distance"" between two words - where the lower the number, the closer the match. It's how spell checkers work. You could do an initial pass with this over every word that only appears 1/2 times in your list to possibly weed out some of the typos."
rails,3dkxjl,MetalMikey666,2,Fri Jul 17 07:03:21 2015 UTC,"I actually recently solved this problem, but it wasn't clean or easy.  Basically, I downcased every string, removed most punctuation and/or replaced it with underscores.  Then I created a massive Ruby hash, containing abbreviations as keys, and used what they meant as values.  That being said, I'm still having to add new abbreviations about once a week, although the longer you go, the less this problem comes up."
rails,3dkxjl,virnovus,2,Fri Jul 17 03:21:33 2015 UTC,"You could also use something like http://www.datasciencetoolkit.org/developerdocs#googlestylegeocoder, (or even Google's API if you're okay with their rate limits). What you would do then is pass the data to that service as if it were and address and use the response as 'truth'. In general, Google (and this opensource counterpart) are pretty good at correcting these types of typos and as an added benefit you would also get the zip_code and lat/longitude, if available."
rails,3dkxjl,Left_blank,2,Fri Jul 17 08:07:08 2015 UTC,"Levenshtein Distance is good for solving misspellings and other ""almost the same"" mistakes, and the Google Geocoding API is a good solution as well. (Both recommended by others).  I just solved this problem a separate way yesterday and it took me about an hour. Do you have ZIP codes for the city data? Assuming you do, you can download a CSV file of census data with all postal codes and the cities they are a part of, chuck it in your database, and then loop through all of your ""dirty"" data records, find by ZIP code, yank the city (it will be normalized across ZIP codes), and update your record.  If you DON'T have access to ZIP codes, the Google API would be a good solution, with Levenstein distance third (you'd need a list of normalized city names and a lot of trial and error for a 95%-ish solution."
rails,3diozj,AdmiralShawn,3,Thu Jul 16 16:16:21 2015 UTC,https://whatdoitest.com/  http://chriskottom.com/minitestcookbook/
rails,3diozj,jord-smi,2,Thu Jul 16 18:29:21 2015 UTC,"Came here to post the ""What Do I Test?"" book. Really great starting point for writing some basic tests."
rails,3diozj,saeglopur,1 point,Fri Jul 17 04:56:35 2015 UTC,Thanks mate!! Will check those out
rails,3diozj,miah_,2,Sun Jul 19 07:13:38 2015 UTC,"Don't know about rails specific; but I've found this guide really helpful. http://www.mattsears.com/articles/2011/12/10/minitest-quick-reference  This guide from the rails site seems to cover it, I don't rails so I don't know how helpful it is. http://guides.rubyonrails.org/testing.html  Good luck!"
rails,3diozj,danwatney,2,Thu Jul 16 16:58:39 2015 UTC,Are there any good examples of open-source applications that use Minitest?
rails,3diozj,zenspider,2,Thu Jul 16 19:01:42 2015 UTC,"Everything I write (minitest, ruby_parser, hoe, flog, flay, zentest, rubyinline). Everything tenderlove writes (nokogiri, rack (I just convert it), arel, etc). Rails. Rubygems."
rails,3diozj,danwatney,1 point,Fri Jul 17 04:33:48 2015 UTC,Thanks! And what about Rails apps?
rails,3diozj,cornelius_duvachet,2,Fri Jul 17 19:25:03 2015 UTC,"I'm a big fan of MiniTest and Rails. Check out my project for sample usage including integration, model, and pundit policy tests.  https://github.com/ksimmons/codedorm"
rails,3diozj,JimmyPopp,1 point,Thu Jul 16 21:19:33 2015 UTC,Codeschool has a course on mini testing and rspec
rails,3di205,croceldon,2,Thu Jul 16 13:11:57 2015 UTC,"Honestly, a more accurate representation of their rating would just be 0, since none of our Users have actually given these products a rating yet.   That seems to be the perfect use case for nil (in absence of an Option type). 0 could be a valid rating and is just confusing.  Besides that: Modelling user ratings that way seems kind of silly, but I guess it's just a contrived example."
rails,3dkbtj,Bair8xiu,10,Thu Jul 16 23:31:46 2015 UTC,You left Rails for Java?  For your own applications where no one is telling you to move off of Rails?  You are rewriting Rails apps with only 3k users?  Surely this is not a good use of your time.
rails,3dkbtj,stalcottsmith,22,Fri Jul 17 01:39:21 2015 UTC,"This post makes very little sense. I understand that you aren't a native speaker, but your arguments and reasoning are the problem:   You left Rails because you were not satisfied with a lot of things. You left Rails for reasons you won't discuss. You think that Rails programmers are divas or rockstars. You mention a few gems you enjoyed, that you love Ruby, and that you like testing. You found (and probably used) some crappy Ruby gems that did too much and weren't maintained. Therefore you are rewriting (ugh) in Java.   Why is this a problem with Rails? How are these learnings? What's going to be better about Java?   The only semblance I can extract - which is true for any platform - is to carefully select dependencies (maybe a Rails problem but more likely a inexperienced programmer problem).  Some learnings I think you should have taken away are:   Be cautious with the new and shiny. When choosing libraries or frameworks check for great test coverage and active support communities. When adding in libraries consider different patterns to ensure weak coupling and also consider if introducing the dependency is worth the cost. If you are writing a gem or any software a good guiding principle is simplicity. Be humble."
rails,3dkbtj,robotsmakinglove,-2,Fri Jul 17 00:52:47 2015 UTC,"Guy writes his opinion, you rudely lecture him how he's wrong based on just a few paragraphs.   Be humble.   How about ""Be nice""?"
rails,3dkbtj,mperham,1 point,Fri Jul 17 04:33:44 2015 UTC,What part of this post is rude?
rails,3dkbtj,SandalsMan,-6,Sat Jul 18 17:44:48 2015 UTC,"As I said, it's not about compairing Frameworks/Languages, it's about giving input to the community.  See your post already, gave so much value to the community which I missed all the time.   You said:   Some learnings I think you should have taken away are   This is the best advice you could give someone, why don't you just create a post or even a blog about that?  All those new devs are looking for guidance who would benefit a lot from your comment, why don't you share that?  I see your hatred towards Java, so I'll try to make things clear, I had to switch to Java because, I couldn't find good Rails Devs in my country ( Austria ) on the otherside I could find on !each! day 20 good Java devs."
rails,3dkbtj,robotsmakinglove,11,Fri Jul 17 01:05:05 2015 UTC,"The issue I had with your writeup is that you didn't give any useful input to the community. You mainly complained - and I think many people aren't interested in reading a scattered list of complaints. Think more about structuring your writing like an essay:   Outline your core thesis or argument (i.e. there are many things the Ruby on Rails community can do to improve). List some supporting points (i.e. select dependencies carefully because..., follow the principles of unix because..., etc). Conclude by summarizing your previous points and consider making some recommendations.   The advice I wrote is for you! The points listed aren't novel and certainly not my own. They've been made time and time again by other writers. In your future posts maybe structure around something different (struggling to hire a Rails developer in Austria sounds like an interesting start - especially if you are looking to engage a community).  Lastly, I did not say I hate Java. I hate rewrites (http://www.joelonsoftware.com/articles/fog0000000069.html). It is difficult for me to think of a compelling reason to rewrite a well written Rails app in Java (especially if it is generating numbers like you claim)."
rails,3dkbtj,robotsmakinglove,-8,Fri Jul 17 01:33:03 2015 UTC,"The thing is that you understood everything very well, otherwise you wouldn't be in that position to sum up things.  You pointed out things very well, why shouldn't other developers see the same things like you, are you some kind of a super dev?  Do you have to point out things because no one else is seeing them?   No you are not, I'm sorry to dissapoint you, as you did get every single word from my post so is everyone else able to get the sense from my post.  So thank you mister. obv."
rails,3dkbtj,spinlock,3,Fri Jul 17 01:43:04 2015 UTC,To be honest I really struggled reading your post and I think others might have as well. This may be partially due to the language gap - but it is mostly around the structure.
rails,3dkbtj,spinlock,-2,Fri Jul 17 01:51:03 2015 UTC,"No I don't think that the problems is the language, I also do think that I got problems with structure, thanks for pointing that out.  ( I got that problem also in many other languages )"
rails,3dkbtj,bummer69a,4,Fri Jul 17 01:55:41 2015 UTC,A good java dev could easily learn rails. Hire smart people and you'll be fine.
rails,3dkbtj,Maleckai,0,Fri Jul 17 01:55:11 2015 UTC,"I did, pure Java devs who hated Rails, I waisted 2 months aka 8k euros just to see them leaving."
rails,3dkbtj,5user5,2,Fri Jul 17 01:57:00 2015 UTC,I've hired rails devs from Poland (im in SF) without much trouble. Pm me if you want a referral.
rails,3dkbtj,kornbred,1 point,Fri Jul 17 02:09:23 2015 UTC,"I couldn't find good Rails Devs in my country ( Austria ) on the otherside I could find on !each! day 20 good Java devs.   This makes no sense at all. If they're genuinely good developers, then picking up another language and making the transition from Java to RoR should take them about a week to be competent enough to start development. Yes it'll take a couple of months to get fully up to speed on all the various Rails quirks and conventions, but cross-training is something we've done with every new employee."
rails,3dkbtj,alwaysonesmaller,4,Sun Jul 19 06:45:18 2015 UTC,"If there's one thing I've learned since leaving ""Rails"" development for ""Ruby"" development, it's that Rails is great, but that can be bad.  Learning how to develop pure Ruby without Rails there to hold my hand has changed the way I think about development so drastically, and (I think) really improved my skills as a developer. When I first made the switch, I had no idea just how little I knew how to do. Rails takes so much of the problem solving away from you, it's almost scary how many development practices you miss out on improving.  You also become so used to the Rails way of development, that if you don't regularly have a healthy look outside that, developing any other way can be uncomfortable. You can feel lost, as you're so used to this one way of thinking.  I do miss a lot of Rails though. How quickly you could build out new features, the plethora of useful gems out there, the massive community. I look forward to giving it another go."
rails,3dkbtj,konvos,3,Fri Jul 17 01:39:46 2015 UTC,"How did you transition from Rails to rolling your own framework? Any resources you recommend? I'm currently working through Rebuilding Rails, which is okay, but I could use more information.   I do have some experience with sinatra."
rails,3dkbtj,konvos,-1,Fri Jul 17 03:20:35 2015 UTC,"I see your point, those things can trigger a situation where we grow as developers.  I for one had the same feeling when developing in sinatra. That framework made me also see things different."
rails,3dkbtj,bummer69a,4,Fri Jul 17 01:50:15 2015 UTC,"I think you make some very valid, fair points.  The only one that I disagree with is you attitude towards gems.  I am sorry, but this is an issue with EVERY OSS language/framework.  In my previous life developing J2EE applications, I can't tell you the hours I spent scouring MVN repos (emphasis on repoS) for an alternative to the lib that is not supported in the JDK version I wanted to use.  Ruby has the best eco-system, hands down.  I agree that is it very frustrating when the useful gem you are using seems to lose maintainability suddenly (i.e. CanCan).  However, without fail, a comparable alternative can easily be found (see Pundit)."
rails,3dkbtj,myringotomy,1 point,Fri Jul 17 01:40:20 2015 UTC,"but how about maintaining the project for years? It's not enough to just finish it, you have to support it for all the releases.   While it's nice when people continue to develop open source projects after initial release, I don't think there's any valid reason to expect it as a user. If you're not paying someone to develop a gem you use, they have absolutely no obligation to do so. This isn't a ruby-specific issue."
rails,3dhwa9,rails_,1 point,Thu Jul 16 12:14:52 2015 UTC,"You might be hitting a file size limit. What stack are you running, and have you looked in your rails / web server logs?  Try uploading some <1MB images, then see what happens with a 10MB image."
rails,3dgpmv,whats_a_unicorn,15,Thu Jul 16 03:22:59 2015 UTC,"My $0.02:   Writing good, performant queries and scopes Service-oriented architecture and avoiding anti-patterns Background and scheduled tasks...   Also, I keep trying to find a place in a web app to use method_missing and metaprogramming, but the shoe never fits.  Would love some good examples/patterns in web apps (outside of gems).  Any help or pointers would be much appreciated!  Post a link of your blog :)"
rails,3dgpmv,MITranger,2,Thu Jul 16 04:11:35 2015 UTC,"Also, I keep trying to find a place in a web app to use method_missing and metaprogramming   Do not try to make this shoe fit where it doesn't. method_missing, especially at the application level, just isn't a tool you use every day. And at the application level especially, metaprogramming has serious performance consequences.  If you really want to get into metaprogramming, you have to get into library code. The use cases there for meta-stuff are a lot clearer."
rails,3dgpmv,nateberkopec,1 point,Thu Jul 16 13:02:18 2015 UTC,"Great answer. Admittedly, I only want to use metaprogramming for practice and learning. I've always felt like using it in a web app was like using a chainsaw for a haircut. Great to hear someone telling me stop before I cut myself."
rails,3dgpmv,MITranger,2,Thu Jul 16 21:36:35 2015 UTC,"Also, I keep trying to find a place in a web app to use method_missing and metaprogramming, but the shoe never fits. Would love some good examples/patterns in web apps (outside of gems).   That's because there aren't that many, especially outside of gems.   Look to simplify your code, not complexify it. I see a worrying trend of Rails-ists thinking good code involves shoving as many 'patterns', 'best practices' and special tricks in as possible."
rails,3dgpmv,jrochkind,1 point,Thu Jul 16 21:30:16 2015 UTC,"Great advice. Quick, semi-unrelated question... But what are your thoughts on ActiveSupport concerns? I'm beginning to feel like I'm complexifying for the sake of DRYing"
rails,3dgpmv,MITranger,2,Thu Jul 16 21:38:17 2015 UTC,"If you mean the way Rails4 encourages you to put mixins in ./app/models/concerns and mix them into models... I thought it seemed like a bad idea when it was introduced, and have ignored it.   If you mean the ActiveSupport::Concern module for your own use, it is incredibly useful when you do want to provide some re-usable functionality as a mix-in, and need the mix-in to provide both class and instance methods (or to call methods on the class it's mixed into, like Rails controller macros).  I mean, that's what it's for. When you need to do that, it does it.  But I've been realizing that when I need to do that... it'd be better if I could find a way to not need to do that, and not use mix-ins at all. But sometimes there's no obvious way.    I definitely don't consider mixins to be a good way to organize code in general, unless you really need to. I think Rails4 is a bit crazy for encouraging it in models."
rails,3dgpmv,jrochkind,1 point,Fri Jul 17 03:27:22 2015 UTC,"Thank you for your reply!  Can I pick your brain a little bit more?  I really want to understand your take and why to avoid concerns.  I've read a few articles/posts that discourage STI, polymorphic associations, and concerns/mixins, but I have to admit, I'm really liking using concerns with models.  Perfect example, I built a Commentable concern and a Likable concern, with polymorphic associations to Comment and Like models.  Now, for all my other models, e.g. discussions, posts, pictures, etc. it's super easy to just add in an include Commentable or include Likable and mix in the behavior I want.  I dunno, I guess I like the composability (sp?) and that it's separated by behavior.  Before, I was just using helpers as a dumping ground.  Am I sitting on a time bomb, or something?  Missing something basic?  I don't understand how it's any different than including a gem like acts_as_votable or acts_as_xxxxx.  What would be a better way to do this and/or am I setting up an anti-pattern?"
rails,3dgpmv,MITranger,1 point,Fri Jul 17 04:27:34 2015 UTC,"If it works for you, and seems to keep your code simple, then go with what works!"
rails,3dgpmv,jrochkind,1 point,Fri Jul 17 08:19:11 2015 UTC,this^
rails,3dgpmv,Moontrepreneur,6,Thu Jul 16 04:48:58 2015 UTC,Best practices for testing.
rails,3dgpmv,Aram_Fingal,3,Thu Jul 16 06:19:18 2015 UTC,"Testing, testing testing. Oh yes, can I say Automated testing?"
rails,3dgpmv,franklyimshocked,3,Thu Jul 16 12:21:43 2015 UTC,Preach it brother!  HALLELUJAH!
rails,3dgpmv,menge101,1 point,Thu Jul 16 12:43:06 2015 UTC,assert_response Hallelujah
rails,3dgpmv,franklyimshocked,1 point,Thu Jul 16 13:09:54 2015 UTC,"Mostly Unit for the moment as I'm a junior, I'm sure most companies will leave the UAT to someone who really knows what they're doing! (Or I hope they will!)"
rails,3dgpmv,franklyimshocked,1 point,Thu Jul 16 13:33:30 2015 UTC,"My experience was a bit different. They threw me at the entire RoR stack and had me doing REST calls, Full Stack web development, and a bit of server development/deployment etc... Plus the business logic changes by the day. Isn't that the norm?"
rails,3dgpmv,mesamunefire,3,Thu Jul 16 13:52:02 2015 UTC,"I'm interested in learning more about tdd, and solid."
rails,3dgpmv,limeblast,3,Thu Jul 16 19:34:43 2015 UTC,"Organizing real world applications: ""fat models "" to presenters/decorators/service objects to DCI. And/Or Sandi's recent work. (See this not as a refactoring path for code but potential path of enlightenment for a dev)  (This may be tinted by the fact that the vast majority of my experience has been on large Rails apps. YMMV.. but a bit of knowledge can either avoid you making a mess OR give you tools when you're dropped into someone else's app)  EDIT: I may have misread the question. If I Was teaching intermediate Rails devs this is the path I would start down after true basic CRUD stuff. I don't actually have these questions myself ;)"
rails,3dgpmv,rwilcox,3,Thu Jul 16 07:00:08 2015 UTC,"I think an often overlooked set of skills is everything you have to do to get your well-written, tested, and performant app deployed.  It's not Rails specific, but knowing AWS or some other cloud service, capistrano, and especially Puppet (or Chef, or any other config management system).  Containerization is a huge deal right now, so knowing Docker is a huge plus.  Also, instrumenting and monitoring technologies, nagios, ganglia, statsd, splunk, ELK, etc.  Some of this may verge on advanced Rails knowledge.  Edit: Also how to instrument your code with good logging at various levels."
rails,3dgpmv,menge101,3,Thu Jul 16 10:57:41 2015 UTC,"Great question, and very much related to my skill level!  Refactoring.  I'd love to see code examples that start with a poorly designed CRUD app and make carefully considered improvements preferably via TDD.  All the next steps I would like to take have nice tutorials but they all start from a well thought-out design.  At this point I have built some useable apps and am having a hard time improving them without breaking them in the process.  Some examples off the top of my head would be:   Moving attributes to their own model and creating a has_many relationship.  ie you put contact info inside your Company model but now you realize a company could have more than one contact. Adding an API to an existing app.  As you suggested it seems like a logical next step for a lot of apps. Adding some tests to an existing app.  Just getting that first test to clear can be a huge hurdle if you've gone too far down a path with no working tests Performance improvements via profiling and cacheing.  There was a great caching post here yesterday and I would love to see a real-world implementation on an existing app. Adding access control to an existing app.  Starting with roles like admins and non-admins and moving to something with more fine-grained access control   Any of these with a little TDD mixed in would be right in my intermediate wheel-house.  Thanks so much for asking!"
rails,3dgpmv,jamesrward,2,Thu Jul 16 12:46:47 2015 UTC,I would love to learn more about implementing plain old ruby objects as service objects into my application to help slim down both models and controllers. I think it is really important to separate business logic from persistence and request handling.
rails,3dgpmv,lovetocode,1 point,Thu Jul 16 13:05:45 2015 UTC,"I wrote a few bits and pieces about TDD in general, but there is a bit on using plain Ruby objects as ""Commands"" - which handle the business logic and leave persistence to ActiveRecord.    The reason I came up with this was to make testing easier but I had a big complex app and this made the code much more understandable as a by-product.    You can see it here: http://theartandscienceofruby.com/2015/07/16/what-is-a-discovery-test/"
rails,3dgpmv,rahoulb,2,Thu Jul 16 13:09:59 2015 UTC,"Everything others have mentioned and...   how to make your app a faster, (better queries / caching) how to refactor part of your app into a gem when it is better to use a gem vs write it yourself implementing design patterns into your application More complex crud examples, such as how would you build an event that has philanthropy and community service as child classes,  what is the best way to go about making this so you can create an event and philanthropy object at the same time and assign X number of users to it. just a thought"
rails,3dgpmv,Tall-Paul,2,Sun Jul 19 19:54:18 2015 UTC,Easily TDD. I raced through my first rails app to get it out the door and bypassed testing which in hindsight probably would've made it a faster process.
rails,3dgpmv,chesbyiii,1 point,Thu Jul 16 13:47:47 2015 UTC,"Testing does slow you down - especially when you are under pressure.  Where it saves you time (and lots and lots of time) is further down the line, when you are making changes, adding new features or enhancements and you've forgotten how that stuff you wrote 6 months ago works.    What normally ends up happening for medium-sized apps and above is you end up in a game of whack-a-mole, where you make a change over here and something breaks over there.  You fix it over there and something else breaks way over there.  And so on.    With TDD you spend a LOT of time up-front, but you end up with neater, smaller, more easily-changed code, plus if you do it right, you also have a suite of regression tests that prove that the change you made over here doesn't affect anything else.    Last week I wrote a series of posts about how I do TDD which you may find helpful - the first one is here: http://theartandscienceofruby.com/2015/07/07/tdd-is-a-waste-of-time/"
rails,3dgpmv,rahoulb,1 point,Thu Jul 16 14:42:25 2015 UTC,"I am curious about learning more about background jobs and scheduled tasks. I haven't had to use them yet in any of my projects, but would like to know and understand them when I do."
