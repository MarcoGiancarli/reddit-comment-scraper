ruby,3e3svy,schneems,2,Tue Jul 21 19:07:35 2015 UTC,Great episode!
ruby,3e3svy,MeikaLeak,1 point,Wed Jul 22 03:34:19 2015 UTC,Schneems!!
ruby,3e633a,AkonShakur,1 point,Wed Jul 22 06:14:27 2015 UTC,"Great idea. When I sign up, the site says there are no beta openings now."
ruby,3e56xi,missawon,2,Wed Jul 22 01:20:01 2015 UTC,Here's a hint: You only need to call gets.chomp once in your code.
ruby,3e56xi,BostonGraver,1 point,Wed Jul 22 01:42:18 2015 UTC,"I think you're missing an if and another else, or you could use a switch statement."
ruby,3e56xi,Oranges13,1 point,Wed Jul 22 02:30:53 2015 UTC,"also, you can clean it up a bit with string interpolation  puts ""not since #{rand(1930..1950)}!""   good luck!"
ruby,3e56xi,imbrady,1 point,Wed Jul 22 03:00:37 2015 UTC,As others have alluded to the issue is that else doesn't take in a conditional statement. In the case of If/Else the else block is used as a fallback when none of the other conditional statements evaluated to true.  So with that in mind perhaps you could consider using another if as /u/Oranges13 suggested or even an elsif (not sure if you have covered them yet).
ruby,3e32bx,kaspth,3,Tue Jul 21 16:06:34 2015 UTC,"Instead of marking methods private, I like to just further namespace them inside an internal module. This prevents polluting the public namespace, but they still remain conventionally accessible."
ruby,3e32bx,Kache,2,Tue Jul 21 16:27:22 2015 UTC,This prevents polluting the public namespace   How?
ruby,3e32bx,latortuga,2,Tue Jul 21 17:54:18 2015 UTC,"Not that I agree with gp, but a more accurate way to state this is that private methods still register themselves as message handlers for the object, just as public methods do. This is why you can call private methods easily with send.   The only real difference between a private and public method is that ruby will complain if you try to call a private method via dot notation. But this is just a programmer safety net, the underlying implementation is otherwise the same."
ruby,3e32bx,moomaka,1 point,Tue Jul 21 19:21:30 2015 UTC,"a more accurate way to state this is that private methods still register themselves as message handlers for the object, just as public methods do   I don't think that's what gp was saying at all. It looks to me like /u/Kache was saying that they put private methods inside an internal module. And my post was asking how that can prevent polluting public namespace any more than just using the private keyword."
ruby,3e32bx,latortuga,1 point,Tue Jul 21 21:47:29 2015 UTC,"My presumption is that by 'public namespace' he meant 'the methods which this object responds to', what other interpretation of 'public namespace' makes sense in this context?"
ruby,3e2eok,FooBarWidget,1 point,Tue Jul 21 12:56:21 2015 UTC,"I liked the book-like format (didn't require javascript - was readable from CLI with lynx, was searchable/printable/downloadable, had a TOC).  I understand why you needed to do this, but don't understand why you decided on a custom solution. A wiki would have worked better, because everyone already knows how to use one. Your new docs basically require everyone to click and read menu items and waste time trying to figure out how and where to possibly find what they are looking for.  TL;DR your new docs require usage docs"
ruby,3e2eok,tastur,1 point,Tue Jul 21 20:31:48 2015 UTC,"Thanks for the feedback, but I have some trouble understanding your criticism. Could you elaborate more on them?   was readable from CLI with lynx   It still is. Well I haven't tried with Lynx, but with Elinks the Library is very much readable. The HTML is written to be responsive and to degrade well to simpler browsers.  The only issue open right now is that some things don't work without Javascript. I believe Elinks allows you to enable Javascript. But that brings me to the next point... why is it being readable with CLI browsers so important to you? Don't you use your desktop or phone browser to browse documentation and the general Internet anyway? And since Passenger is an app server, is it unreasonable to expect that you have an Internet connection so that you can read documentation?   was searchable/printable/downloadable   It is still searchable through the search box.  It is still printable, but on a page-by-page basis. Do you really want to print the entire library? It's very big.  It is still downloadable. It's a static site. You can clone the Git repository and build the static HTML files.   I understand why you needed to do this, but don't understand why you decided on a custom solution. A wiki would have worked better, because everyone already knows how to use one.   This I do not understand at all. What exactly is bad about the fact that we didn't use a Wiki? Even though we used a static site generator (Middleman), pages are just normal files that you can edit in your browser. It should be very discoverable because there is an Edit button on the bottom of each page.  I will tell you why we decided on a custom solution:   We have anywhere between 3 and 45 variations of each page, depending on the integration mode that you are using, the programming language that you are using and more. That way, we can show you information that is relevant to you, while hiding information that is irrelevant to you. The beginner walkthroughs have even more variations because the content also depend on the reader's infrastructure, operating system, whether they use RVM or not, whether they use Rails or not, etc. The beginner walkthroughs consist of about 1000 pages, generated from 7 base files but in different combinations of settings.  Doing this would have been completely impossible with a Wiki. We generate all these combinations programmatically by writing Ruby. Wikis make it hard to customize the layout. We wanted complete freedom. For example, the beginner walkthroughs have a very different sidebar (one that lists the steps) than the advanced guides. The front page is also entirely customized for usability. Wikis are harder to read offline. The Library is a static site and is very easily offline downloadable.    Your new docs basically require everyone to click and read menu items and waste time trying to figure out how and where to possibly find what they are looking for.   You say the new docs require everyone to read menu items and figure out where things are. But wasn't that true of the old documentation too? When you read the old documentation for the first time, you also had to scan through the table of contents to find what you're looking for. The new documentation contains a search bar. Didn't that search bar help you?  In any case, the old documentation will be updated with redirects to the appropriate section in the new documentation. Is that good enough for you?"
ruby,3e2eok,Craftkorb,1 point,Wed Jul 22 09:06:58 2015 UTC,"Knowing basic Unix commands is not a unreasonable demand towards the user. Else, s/he is more likely of not knowing how to securely operate such a system with all its services, which goes way beyond a http daemon. Wouldn't for these kind of people out be a better idea to use platforms like heruko?"
ruby,3dzx1q,kyrylo,4,Mon Jul 20 21:54:49 2015 UTC,This is certainly interesting. I'd love to see this as a RubyMine plugin.
ruby,3dzx1q,wmjbyatt,0,Tue Jul 21 02:11:26 2015 UTC,http://devdocs.io/ is similar with http://kapeli.com/dash. I wonder how to make javascript and html to show the desktop interface?
ruby,3dzx1q,lingceng,2,Tue Jul 21 06:26:25 2015 UTC,It uses http://nwjs.io/
ruby,3dzx1q,nexe,2,Tue Jul 21 08:19:51 2015 UTC,thanks. this look super cool
ruby,3dzx1q,materialdesigner,0,Tue Jul 21 11:46:22 2015 UTC,http://kapeli.com/dash
ruby,3dzx1q,RalphMacchio,1 point,Tue Jul 21 05:37:51 2015 UTC,Wrong URL?
ruby,3dzx1q,materialdesigner,0,Tue Jul 21 05:42:17 2015 UTC,edited. it was dot com not dot org.
ruby,3dzx1q,link_luster,2,Tue Jul 21 05:42:55 2015 UTC,"They're not equivalent at all. Dash uses pre-generated docs and is not attached to live/running code. The system browser does not pregenerate anything, it's attached to live code and enables viewing of the source/docs for a running program. You're navigating the current program. Also, there is also no reason why the system browser could not be taken further and allow live modification of a running program."
ruby,3e1llc,dis89,1 point,Tue Jul 21 06:46:30 2015 UTC,Rachel Myers of Github recently gave a great refactoring talk at MagmaConf in Mexico - unfortunately I can't find a recording of it (and I don't recall cameras there).
ruby,3e0rcj,Pain__,3,Tue Jul 21 01:55:36 2015 UTC,Two recommendations which you may have already come across:  Metaprogramming Ruby (https://pragprog.com/book/ppmetr2/metaprogramming-ruby-2)   Practical object oriented design in Ruby (http://www.sandimetz.com/products)  Highly recommend both of them!
ruby,3e0rcj,spacepotatoe,2,Tue Jul 21 06:03:38 2015 UTC,Ordered the second one. One at a time. Thanks!
ruby,3e0rcj,wbsgrepit,2,Tue Jul 21 06:14:58 2015 UTC,yeah poodr is by far one of the most recommended reads.
ruby,3dxclq,tosbourn,6,Mon Jul 20 08:55:46 2015 UTC,"This is good. i'd add a section about the Gemfile.lock and how it's created/updated based on your Gemfile, and what it does."
ruby,3dxclq,jrochkind,2,Mon Jul 20 11:44:21 2015 UTC,"haha â€“ you know what I had a section on it planned out and I thought ""nah too much for one post"" should have just kept writing.  Thanks, I will look at add it soon."
ruby,3dxclq,jrochkind,2,Mon Jul 20 14:10:30 2015 UTC,"Sure, make it a separate chapter linked at the bottom if you want. Or split up this post into sections generally, I dunno."
ruby,3dxclq,bglusman,1 point,Mon Jul 20 14:28:40 2015 UTC,"Agree, good article, and should mention lockfile :-)  specifically, I'd also mention why you SHOULD include Gemfile.lock in a git repo, despite being machine generated.  I might also add a small section mentioning require: nil/false option for gems that shouldn't be autoloaded."
ruby,3dxclq,antenore,2,Mon Jul 20 18:33:50 2015 UTC,Really well done!
ruby,3dxclq,colinrymer,2,Mon Jul 20 18:12:19 2015 UTC,Thanks :-)
ruby,3dxclq,colinrymer,1 point,Mon Jul 20 20:31:27 2015 UTC,"It isnâ€™t recommended to have more than one source per project.    Why? I've had multiple projects use multiple sources - when you have a private gem repo, you have to use multiple sources unless your private repo is setup to mirror rubygems.org (which can be a good idea)."
ruby,3dxclq,Karunamon,2,Mon Jul 20 19:01:53 2015 UTC,"I took that recommendation from the Gemfile man page.  http://bundler.io/man/gemfile.5.html   It is possible, but not recommended as of Bundler 1.7, to add multiple global source lines. Each of these sources MUST be a valid Rubygems repository.   My understanding is because unless you are scoping them you could get an unknown mix of gems from different sources.  With something like a private gem repo I think this is safe enough, but as general advice don't just load in sources.   Part of me wonders if it is because *nix folk are used to having loads of sources in their package managers and don't want people copying that idea across."
ruby,3dz0dg,yez,4,Mon Jul 20 18:03:11 2015 UTC,"Yes, rails has this problem. Strictly speaking, rails does not have a view layer, yet I see where this is coming from.  Many developers follow the fat model approach, and in most cases the presenter adds a layer of complexity and duplicates code, or moves it into another file. The same happens here. I get it is an example, but most developers stuck with encapsulation issues will not be able to figure out instead how to present.  My suggestion for the article is to show what happens when the map code ends up in the controller, and what happens when it's exposed through the model. Both are valid and emphasize the layers that rails ships with instead of adding more.  The example is well chosen btw."
ruby,3dz0dg,verydefunctional,0,Mon Jul 20 22:29:43 2015 UTC,"This point is where I struggle. I can write code that performs equally well whether it originates in the model, controller, view, or presenter. It's not much of a question of performance, which leads me to believe that it is mostly style. As you point out, the code is simply moved. Don't want fat models? Move it to the controller! Want skinny controllers, move it to a presenter! Don't want logic in the views and don't use presenters? Use a helper. The logic has to live somewhere, so why does it matter where?  I realize a skinny model requires less memory. If you have a super fat model, every time you instantiate a User, each user will require more memory (yes?). If you follow the pattern in this post (which I use in my day job - using presenters), you're instantiating the User and Picture ActiveRecord objects, then instantiating a bunch of presenter objects in the same request. Seems like more memory usage than just iterating through the AR objects to begin with.  In the end, does it matter? What matters?  Edit: certainly not downplaying style, readibility, or encapsulation (which, again, seems to be style-related). But my users don't care about any of that! Yes, ""presentation"" logic belongs in the view (or presenter... or helpers) but otherwise, does it really matter."
ruby,3dz0dg,fiveguy,2,Tue Jul 21 00:25:12 2015 UTC,"Well, it's only a matter of style to a degree. Fat models for instance polute the model space with methods that are only used in certain scopes. The same applies to presenters unless you pull in a presenter hierarchy by scope. Fat controllers will eventually make you duplicate code or move it to modules or into the application controller. That said, I recommend starting with one prefered fat <anything> and when it becomes unmaintainable or slow or poluted, take what you have and refactor it into another layer/pattern (not necessarily presenter, take what solves your problem). Having seen what a 7-layered architecture that was introduced because ""we might need it some day"" can do to your general productivity and code quality, I'd drive lean and minimal and refactor once I have a clear picture of what my problem's gonna look like. And from there on, it's less of a style-related choice really, but the best solution to a problem."
ruby,3dz0dg,verydefunctional,0,Tue Jul 21 07:52:58 2015 UTC,r/titlegore
ruby,3dvrwb,linduxed,3,Sun Jul 19 23:02:58 2015 UTC,"Excellent news, thanks!"
ruby,3dvrwb,ThatRailsGuy,1 point,Mon Jul 20 01:00:37 2015 UTC,"""Looking upon this past year, I wish some other orphaned projects would enjoy this kind of revival.""  Any example of a gem you think should revived?"
ruby,3dvrwb,pablodh,2,Mon Jul 20 00:03:17 2015 UTC,"Datamapper. Still my preferred ORM but is missing some stuff like prefetch of associations, improved associations, and there are some bugs that were never solved."
ruby,3dvrwb,basex,3,Mon Jul 20 10:18:10 2015 UTC,What about using Sequel instead? Is that more maintained/updated?
ruby,3dvrwb,Shmutt,2,Mon Jul 20 11:02:16 2015 UTC,"I have used, it's quite good, but I have some projects that still use datamapper and would be quite a lot of work to move them to Sequel.   Sequel has a problem to me, the fact that is jeremyevans doing most of the commits, what will happen to the project if one day he stops maintaining it?"
ruby,3dvrwb,basex,1 point,Tue Jul 21 08:50:20 2015 UTC,"He would probably just hand over the project to someone else. I don't think you need to worry about that, because then you would also need to worry about number of other projects, like Sidekiq."
ruby,3dvrwb,janko-m,1 point,Wed Jul 22 00:16:43 2015 UTC,"If you have maintaining products in production for more than 5 years and if it's part of the core as it is an ORM, then yes, you have to worry about the future of the project."
ruby,3dvrwb,basex,1 point,Wed Jul 22 00:58:51 2015 UTC,"I've recently studied a situation with scientific and quasi-scientific libraries in Ruby (for some conference talk) and it seemed to me there were lots of them one day, but most are abandoned, even mature and good looking ones. Like stuff form markov chains, neural networks, text analysis and so on.  Partially its because Ruby IS slow for scientific tasks, but it also IS very expressive and basically easy to learn and use, so I think current situation with sci libraries is a shame. (Though SciRuby project tries to change it, to be fair.)"
ruby,3dvrwb,zverok_kha,0,Mon Jul 20 11:55:29 2015 UTC,"In this case I didn't have a specific gem in mind. It's more of a reflection on various things I've seen abandoned over the years.  Funnily enough, the things that immediately come to my mind are proprietary, so they're outside the realm of this sort of revival."
ruby,3dvrwb,robotsmakinglove,1 point,Mon Jul 20 06:13:53 2015 UTC,This makes me very happy!
ruby,3dvrwb,virnovus,0,Mon Jul 20 02:02:59 2015 UTC,"Now can someone please fix the documentation page that splits the Image class documentation up into three different pages?  There is no reason for this, and it's annoying as fuck.  https://rmagick.github.io/image1.html"
ruby,3dvrwb,schneems,1 point,Mon Jul 20 04:05:44 2015 UTC,"It's open source, so maybe that person could be you? Any idea why it happens? I'm sure the new maintainer would appreciate a pull request."
ruby,3dww6a,disclosure5,1 point,Mon Jul 20 05:14:27 2015 UTC,I did not understand why you do this in the first place. I am missing explanations and reasoning. The end result is kinda neat since it tests a decent spectrum of the method. I guess what I am missing is the trail of thought behind all of it so I can reproduce it somehow and in a decent time frame. :)
ruby,3dww6a,verydefunctional,1 point,Mon Jul 20 22:14:35 2015 UTC,"Thanks for this. I should clarify that the real reasoning here is to try to identify edge cases that the ""simple"" tests you wrote first may never identify. The particular function is trivial for the purposes of demonstration, but when a function is less trivial, you may be more surprised to see the inputs it fails on."
ruby,3dww6a,verydefunctional,1 point,Mon Jul 20 22:38:13 2015 UTC,"I was surprised when I went through the examples. Please explain in the article how to generally approach a method to figure out those test cases. I mean, when you usually test a function, you try your best to make sure it works. I don't have time to ponder for an hour about edge cases. It somehow needs to come naturally, or evolve somehow. An idea how that can work would help me (and possibly alot of other people too) tremendously. You already seem to have figured out how to refactor the tests easily, so I am hoping for some hints :)"
ruby,3duti7,rickcarlino,1 point,Sun Jul 19 18:11:57 2015 UTC,"Really awesome, does this only work with the built in unobtrusive js of rails or will this work with and js framework and correctly tie the stack trace the of the ajax request to the Ruby code?"
ruby,3duti7,CCB0x45,1 point,Mon Jul 20 00:23:53 2015 UTC,"This is not using rails, it's using http://voltframework.com"
ruby,3duti7,Is_At_Work,1 point,Mon Jul 20 01:04:02 2015 UTC,Ah cool makes more sense now at least whats going on. Thanks!
ruby,3duti7,CCB0x45,1 point,Mon Jul 20 05:27:05 2015 UTC,"This is not Rails code, actually! It's part of Volt, which is a non-rails framework that uses Ruby in the whole stack (even runs front end code in Ruby). The Ruby code you see is running inside of the users browser via Opal. So it's not quite the same as UJS."
ruby,3duv10,cristianadam,1 point,Sun Jul 19 18:24:43 2015 UTC,Yeouch.. it still seems Ruby is a second class citizen on Windows :(
ruby,3dt6us,anildigital,2,Sun Jul 19 05:31:22 2015 UTC,"What does ""elvis"" do? Is that just the >=1.9 symbol key hash syntax, or is ?: a thing?"
ruby,3dt6us,guitaronin,2,Sun Jul 19 17:28:26 2015 UTC,"I wondered about this, too. Ruby uses those symbols to build ternary expressions, but not in sequence like that. Groovy apparently has an elvis operator that is essentially a shortened version of the ternary operator, but I don't think that works in Ruby."
ruby,3dt6us,JeffMo,2,Sun Jul 19 18:49:52 2015 UTC,"Doesn't work so far as I'm aware. The conditional operator is listed as ?: in RPL, though. Maybe someone will come up with syntactic sugar for...  some_value ?: some_other_value # This one! Yay! some_value ? some_value : some_other_value # ew"
ruby,3dt6us,Balrogic3,1 point,Mon Jul 20 00:36:10 2015 UTC,"Yeah, the conditional/ternary operator isn't implemented as an overridable method, so you'd need to get in pretty deep to make that work.  BTW, some_value || some_other_value works if you're OK with conditionality based on truthiness. Or you could write a method that works via nil-check:  class Object   def elvis(first, second)     first.nil? ? second : first   end end"
ruby,3dt6us,JeffMo,1 point,Mon Jul 20 16:13:42 2015 UTC,!~ and &&= are missing.
ruby,3dt6us,0x0dea,1 point,Sun Jul 19 07:24:30 2015 UTC,Could you please send pull request if possible?
ruby,3dt6us,0x0dea,2,Sun Jul 19 11:51:37 2015 UTC,I linked to the contribution message precisely because I can't think of a good name for either operator.
ruby,3dt6us,project2501,2,Sun Jul 19 12:22:16 2015 UTC,Obviously !~ is Geordi La Forge from startrek. &&= I'm not sure. Looks like a truck to me.
ruby,3dt6us,ClickHereForBacardi,1 point,Sun Jul 19 15:51:42 2015 UTC,"I had trouble convincing my then lecturer that hashrocket was a real thing, given what kins of hash, the word 'hash' normally denotes in both our languages."
ruby,3dt6us,myliverhatesme,1 point,Sun Jul 19 14:52:09 2015 UTC,the word 'hash' normally denotes in both our languages   A data structure that stores a mapping of objects to other objects? Or do you mean the hash symbol (#)?
ruby,3dt6us,ClickHereForBacardi,3,Sun Jul 19 15:35:57 2015 UTC,I meant that in a number of non English languages hash usually only means hashish and he thought I was making up the name.  It wasn't a comp sci course and the guy was a designer so he didn't think hashtable first.
ruby,3dt6us,elpix,1 point,Sun Jul 19 16:24:10 2015 UTC,"This site is awful in mobile, the list is way too small"
ruby,3dt6us,elpix,1 point,Sun Jul 19 17:35:20 2015 UTC,please check now.
ruby,3dt6us,banister,1 point,Sun Jul 19 17:56:35 2015 UTC,Now I'm only seeing the spaceship and can't see anything else.
ruby,3dt6us,BlackjackCF,1 point,Sun Jul 19 18:13:55 2015 UTC,Disabled mobile view for now. I will fix it soon!
ruby,3dsqig,tamershlash,2,Sun Jul 19 02:26:53 2015 UTC,"This probably shouldn't be used for untrusted-user-facing applications on any Ruby version prior to 2.2, since up until then symbols were not collectable, and casting arbitrary hash keys to symbols is a recipe for a memory-exhaustion DOS. Any place where user input may be cast to a symbol is a vector.  For specialized applications such as data stream processing, you're probably better off just creating hashes with symbol keys in the first place, to avoid the GC overhead of creating throwaway strings to create symbols from. If you're parsing something like JSON, you can use the symbolize_names option out of the box."
ruby,3dsqig,cheald,2,Sun Jul 19 13:31:24 2015 UTC,"True. this shouldn't be used in exactly the case that you mentioned, that's why I created a separate gem without even trying to suggest to include this in Rails 5 (not sure if they're going to require 2.2 for it).  However, in a data stream processing case, you can have many developers working on the same pipeline but each one writes a separate step, and steps may even depend on third party gems, and hence it's difficult to guarantee that everything will be symbolized by default. And this is where this gem becomes useful.  The main reason I've built this is because we faced that problem with another project, called OptimusPrime, that we're working on in the company, where developers from many experience levels are working together, and data can be collected from many sources, so it's quite hard to guarantee anything through the every single step in the pipeline and you'd better have inexpensive Hash with indifferent access."
ruby,3dsqig,moomaka,2,Sun Jul 19 13:58:42 2015 UTC,"you're probably better off just creating hashes with symbol keys in the first place, to avoid the GC overhead of creating throwaway strings to create symbols from.   In Ruby 2.2 string hash key literals are automatically interned, e.g. my_hash['Content-Type'] doesn't allocate a new string for Content-Type every time its called, nor does my_hash = { 'Content-Type' => :json }. Given the way OPs code is implemented though I don't know if the interpreter will still trigger this optimization."
ruby,3dsqig,moomaka,1 point,Mon Jul 20 13:53:21 2015 UTC,"This is a great point to bring, I didn't actually know that! I will try to see how Ruby 2.2 actually does that improve the gem to make use of that optimization. Do you have any good place to start looking at?"
ruby,3dsqig,subvertallchris,1 point,Mon Jul 20 23:57:28 2015 UTC,"I haven't yet dug into the implementation.   I did some initial tests on one of our workloads a month or so ago and it looks promising vs 2.1. The workload in question is processing a real time JSON data stream at a rate of a few thousand events a second. We use string keys for it, at least partially because we found it much faster than converting everything to symbols given that the events are processed fairly quickly.   EDIT: A quick way to check if your code is using the optimization is to run a simple benchmark with the GC disabled and look at the object space before and after."
ruby,3dsqig,jrochkind,1 point,Tue Jul 21 00:07:12 2015 UTC,"I haven't looked through it too extensively but really appreciate what appear to be your thorough tests. Far too often, it seems like someone will share a gem to this subreddit that claims some fantastic features without tests to back anything up.  I wonder if HashWithIndifferentAccess in Rails 5 is going to be modified to store keys as symbols. They are dropping support for Ruby < 2.2.1 and my understanding is that it's due to heavier reliance on Symbols, so this seems like a change we can look forward to."
ruby,3drzlm,maxverse,4,Sat Jul 18 22:02:04 2015 UTC,"I'd say keep learning Ruby as much as you can. I did Ruby development for 4 years before jumping in to Rails, there is so much that can be done. Rails can be a great tool, but you'll benefit much more from continuing to learn Ruby first.  Also, I'd second /u/nepalez suggestion of using other frameworks, to better learn web dev in Ruby (which Rails lets you avoid). I haven't used Lotus, but Roda is excellent, and Sinatra has historically been very popular. Volt is incredibly exciting, but I'd wait until you have some more experience building web apps in Ruby, as it is quite a bit different."
ruby,3drzlm,prh8,2,Sun Jul 19 01:31:49 2015 UTC,"IMO you could use Ruby without Rails at all. There is a bunch of other frameworks such as Lotus, Grape, Roda you could use not selling your soul to ""Rails Way"".  If you wish to follow OOP (with elements of FP), not to mention domain-driven design you'd better stay out of Rails http://solnic.eu/2015/06/06/cutting-corners-or-why-rails-may-kill-ruby.html"
ruby,3drzlm,nepalez,2,Sat Jul 18 22:41:14 2015 UTC,"I would recommend trying to get comfortable with metaprogramming if you're looking to really understand Rails. Rails makes heavy use of some deeper Ruby concepts like metaprogramming and singleton classes.  The Rails guides are very well written though. I think you should be able to jump right in if you have any Ruby experience. Rails abstracts a lot and makes it easy. Just know that it's good to learn how to do things from scratch too though (e.g. understanding how cookies work at the HTTP level, etc)  I think it's easier to answer you question this way: what wouldn't you use Ruby for? Anything that needs a quick boot time (e.g. scripting from your editor where you don't want to boot up the Ruby runtime), anything that needs parallel threads (Ruby threads are restricted to a  single process at the moment due to GIL), anything that doesn't have very good Ruby support (some newer tech might have drivers that are a bit young still), any front-end interaction outside of basic templating (use the JS/CSS/HTML trio). I usually use Ruby for just about everything else though"
ruby,3drzlm,jb3689,1 point,Mon Jul 20 14:28:50 2015 UTC,"There is the ""Chef"" server provisioning tool written in Ruby (can be used for hosting apps in any language) There is the ""Capistrano"" deployment tool written in Ruby (also for language-agnostic deployments) The ""Homebrew"" package manager is written in Ruby   Two days ago I used Ruby to upload my photos to Flickr (it wasn't some hacker fun, I really needed it, Flickr website and all of the other tools are bad at uploading large amount of photos). So, yeah, lots of things you can use Ruby for :)"
ruby,3drzlm,janko-m,1 point,Sun Jul 19 00:27:57 2015 UTC,"I'm a big fan of Sinatra because it lets you roll your own alps and you have to do everything from scratch. In cases where you need a quick api or granular control is awesome.  I just started working on a personal project using padrino, which is sort of a middle ground between rails and Sinatra as it gives you some generators and structure but expects you to be able to fill in the gap."
ruby,3drzlm,Oranges13,1 point,Sun Jul 19 02:23:29 2015 UTC,"Personally I write every bit of code in ruby that does not have to be fast. From web crawling to running chef with vagrant to renaming files. Ruby does not have this fire and forget vibe that perl had and the time to production is really low, even for helper scripts. I sometimes also replace make with rake. I know people that write complex engine controls in ruby, unless they need real-time... I'd say, use ruby whenever you can and always. It will also make your rails code better eventually :)"
ruby,3drzlm,verydefunctional,1 point,Sun Jul 19 04:47:35 2015 UTC,"Ruby is a general purpose programming language, you can use it for the same things you'd use any other programming language.  That is, writing just about any software at all.   Some exceptions -- you would not generally use it for writing desktop or mobile native apps, although you can, it requires jumping through some hoops and using certain adapter technologies, and most people wouldn't think it optimal for that (although some will debate this, and if you want to give it a try because you love ruby, you can).   You also wouldn't generally use ruby where you need the quickest execution possible -- you'd generally use C(++).   But you can use it for whatever you want. Transforming or analyzing data. writing a text adventure. Financial analysis. Web scraping. Server monitoring. I dunno. Whatever you want to write.   What do you want to write that isn't a web app?  There are also alternatives to Rails for web apps too. Try sinatra or Lotus.   Also, is it possible that the reason you are having trouble with Rails is because you need to understand more about the web and it's technologies first? How well do you understand HTML, CSS, HTTP, and maybe SQL? If not at all, go learn those and come back.   I have no idea what you mean by ""Should I get better at Ruby to write more complex Rails apps?"""
ruby,3drzlm,jrochkind,1 point,Mon Jul 20 01:55:50 2015 UTC,I think Metasploit was written in Ruby along with some of its exploits and payloads. I am sure it is a mix of languages though but Ruby is the backbone
ruby,3drzlm,lovetocode,1 point,Mon Jul 20 01:56:53 2015 UTC,Ruby is a general purpose programming language. It can be used for everything from high-level scripting to low-level systems programming (by interfacing with system libraries through FFI or custom wrappers). Asking how ruby can be used apart from rails is kinda like asking how java can be used apart from glassfish.
ruby,3dnc3c,nithinbekal,5,Fri Jul 17 17:48:52 2015 UTC,"One of the things I've been meaning to do is attempt benchmarking the throughput and concurrency thresholds of actioncable vs something like socket.io, faye, phoenix. I just have not found the time. I'd like to see how actioncable stands up against other socket solutions so I can better plan my infrastructure needs."
ruby,3dnc3c,mrinterweb,2,Sat Jul 18 00:26:12 2015 UTC,Here's a ticket where we're looking into replacing EventMachine with Celluloid::IO (since ActionCable already uses Celluloid anyway)  https://github.com/rails/actioncable/issues/16
ruby,3dnc3c,bascule,2,Sat Jul 18 02:17:57 2015 UTC,"I'd like to hear about how you deploy the app with ActionCable, using what app server (puma, passenger, unicorn, etc; apache or nginx or what), and if it matters.   Ah, I see you do mention puma. But I'd like to hear more about this, what about puma makes it suitable for this and if any other app servers are too, the details of how you deploy, etc."
ruby,3dnc3c,jrochkind,1 point,Tue Jul 21 15:28:38 2015 UTC,"I haven't deployed any ActionCable apps to production, so I haven't looked too closely at the deployment options.  ActionCable README mentions that it needs a multi-threaded web server (Puma, Thin, etc). This means that we could use Puma or Thin, but not something like Unicorn. Maybe someone who knows more about the internals could comment?"
ruby,3do8gg,Lunchables,3,Fri Jul 17 21:54:40 2015 UTC,"If you consider this just keep in mind that SQS, like any distributed queue, can only guarantee 'at least once' semantics. This means any subscriber may get the same message more than once. You need to design your system to deal with this which can introduce a lot of complexity."
ruby,3do8gg,moomaka,1 point,Fri Jul 17 23:37:25 2015 UTC,"Yep, definitely. That's being handled by the circuitry gem that we built for this. If the message is handled properly (didn't raise any errors), then SQS is notified that it's been handled. If an error is raised at any point, then SQS is not notified that it has been handled, and thus remains on the queue to try again."
ruby,3do8gg,moomaka,1 point,Fri Jul 17 23:54:15 2015 UTC,"I'm not sure your following me here. SQS can delivery the same message more than once regardless of whether or not you confirm that the message was handled on the client side. This is a general property of all distributed queues. To handle this correctly you either need to ensure that all subscribers are idempotent or otherwise guarantee they will only process a message once, e.g. by taking out a lock in a reliable system like zookeeper on the message id."
ruby,3do8gg,moomaka,1 point,Fri Jul 17 23:59:19 2015 UTC,"I may not have explained our approach well enough in the blog post then, so my apologies. Each queue is app-specific, and each app only has one subscriber. There is no risk of a message being received twice by multiple subscribers because of that architectural decision."
ruby,3do8gg,moomaka,3,Sat Jul 18 00:01:58 2015 UTC,"There is no risk of a message being received twice by multiple subscribers because of that architectural decision.   Sorry but your wrong here. Even with a single subscriber that properly acknowledges message handling SQS can deliver messages more than once. Again, this is a known property of all distributed message queues.   EDIT: http://aws.amazon.com/sqs/faqs/ search for 'at least once'."
ruby,3do8gg,moomaka,1 point,Sat Jul 18 00:14:06 2015 UTC,"Thanks for the information. After doing some searching, it looks like Amazon recommends caching the message ID for 24 hours to ensure it isn't processed twice."
ruby,3do8gg,bascule,2,Sat Jul 18 00:22:06 2015 UTC,"Yep, that can work, ultimately it depends on the application.   When do you store the message id? If it's a long running job that is handling the message you could store the message id at the beginning of the job in some reliable store and then have the job fail mid way due to some uncontrollable situation (e.g. worker node dies). You could store the message id only at the end of the job, but then you could get concurrent execution, assuming your subscriber is multi-process or multi-thread. You could take out a 'soft lock' at the start and have some reaper process clear it after a timeout, just better make the reaper reliable. etc, etc.  Mono-rails may be difficult to work on but distributed systems are much harder. Really, a hard line guarantee of 'exactly once' processing in such systems isn't going to happen without a lot of care taken.   For what it's worth, our highest throughput SQS queue handles 4k message/sec, and it goes into a slightly bonkers mode with high latency and duplicate message delivery every 2 weeks or so. Usually lasts a couple hours at most. Our messages are small, quickly processed and it isn't mission critical that they aren't processed twice, though we would prefer to avoid it. We use a memcached cluster for the message ids with a 24hr expiration but that still isn't super safe, if a memcached node were to die we could reprocess message ids that were stored on that node."
ruby,3do943,connexionwithal,3,Fri Jul 17 21:59:57 2015 UTC,"I've never done this before, but your File.foreach statement doesn't do what you think it does.  Try this line instead:  adDATA = IO.readlines('/Users/MacbookPro/book/adjectives.txt')  See this link for where I found that: http://ruby-doc.com/docs/ProgrammingRuby/#IO.readlines"
ruby,3do943,guttermonkey,2,Fri Jul 17 22:13:06 2015 UTC,"Never seen the IO method before, but always nice to learn something new.  Just tried this and it works!!  Thank you!  Upvoting you good sir!"
ruby,3do943,guttermonkey,1 point,Fri Jul 17 22:37:46 2015 UTC,"No problem, glad it worked since I was unable to test it before posting."
ruby,3dm2q3,joanbm,1 point,Fri Jul 17 11:05:22 2015 UTC,"Before Ruby 2.0 there was no direct support for keyword arguments. People just used methods with a last argument that happened to be a hash, and conveniently, you could omit the curly braces when calling it.  def method(options={})   # do something end  method(:key => value, :other_key => other_value)   I can't find any direct documentation about the subject: the MRI documentation on methods does not elaborate on how calling methods with keyword arguments work. But I assume that, if possible, a single hash passed to a function that takes keyword arguments will be converted to fit. Unlike your example, in my tests using a hash with string keys also gets converted.  def method(arg: 1, other_arg: 2)   puts arg, other_arg end  method({arg: 1}) # 1 # 2  method({'arg': 2}) # 2 # 2  method(arg: {arg: 2}) # {:arg=>2} # 2   I didn't know about this either, and it's indeed strange and seemingly error prone. If possible I'd avoid having positional arguments that are hashes if you also have keyword arguments. Taking everything by keyword and raising an exception manually if something necessary is missing is not ideal, but will probably lead to less confusion in the future."
ruby,3dm2q3,danielkza,1 point,Fri Jul 17 11:26:17 2015 UTC,"Unlike your example, in my tests using a hash with string keys also gets converted.  method({'arg': 2})  # 2  # 2   This is an expected behavior, because hashes written in {key: value} literals format have key automatically converted with #to_symmethod so {'arg': 2} is in fact equivalent to {arg: 2} (unlike {key => value} which leaves arguments intact).   If possible I'd avoid having positional arguments that are hashes if you also have keyword arguments. Taking everything by keyword and raising an exception manually if something necessary is missing is not ideal, but will probably lead to less confusion in the future.   I see no objective reason why anybody should limit what kind of positional arguments should use. It is either a bug in current implementation or some wrong decision design or some misunderstanding how keyword arguments are treated in Ruby and how properly use them with hash non-keyword arguments."
ruby,3dm2q3,danielkza,1 point,Fri Jul 17 13:05:38 2015 UTC,"I see no objective reason why anybody should limit what kind of positional arguments should use.    The reason is the bug, or whatever it is. I'm not saying it's intuitive, it certainly isn't, but you'll not be able to wait until it is fixed and everyone moves to a new version to use your code, will you?"
ruby,3dm2q3,danielkza,1 point,Fri Jul 17 14:11:06 2015 UTC,I'm eager to hear how do you know this is a bug and not an intended behavior ?
ruby,3dm2q3,moomaka,1 point,Fri Jul 17 15:21:11 2015 UTC,"I don't know, that's why I added ""or whatever it is""."
ruby,3dm2q3,smlx,1 point,Fri Jul 17 15:24:15 2015 UTC,"OKi, never mind.  Just like to hear some local Ruby experts opinions to this topic â€¦"
ruby,3dk722,adymo,1 point,Thu Jul 16 22:53:11 2015 UTC,Anyone got it and want to give a review? There is 0 info on the site right now (Not even chapter headings so far etc.)
ruby,3dk722,rurounijones,1 point,Fri Jul 17 07:18:24 2015 UTC,There are exerts here https://pragprog.com/book/adrpo/ruby-performance-optimization
ruby,3dk722,smoothlightning,1 point,Fri Jul 17 12:43:02 2015 UTC,"Yes. I read the earliest draft published and thought it was very interesting. It made inspect my dependencies more closely, judge others' code differently, and think more about what effects my decisions will have on people who rely on my code. I think it's a good read for anyone who writes code that becomes other people's dependencies."
ruby,3dk722,subvertallchris,1 point,Fri Jul 17 23:38:42 2015 UTC,"I liked it. The major topics it discusses are profiling approaches, common bottlenecks, patterns to use/look out for in Ruby/Rails code (eager load, closures, in-place methods, loops instead of #each for memory intensive operations, etc), and briefly on the GC. The whole book really gives flare of performance concerns to have when writing Ruby code (basically boils down to: watch for blocking IO, watch for allocations that cause GC, watch for hanging on to object references that prevent GC)  Worth the 20-30 bucks"
ruby,3dk722,jb3689,1 point,Mon Jul 20 14:35:48 2015 UTC,"anyone else getting this error:  [""Coupon 'XMASJULY2015' has expired.""]"
ruby,3dk722,Nefayn,1 point,Mon Jul 20 04:18:20 2015 UTC,The PragProg sale ended last Friday. I'll definitely post on reddit when a new discount code is available.
ruby,3dfvz8,basex,5,Wed Jul 15 23:14:59 2015 UTC,"For what it's worth, ActiveSupport::MemoryStore is incredibly slow despite performing comparatively well in this benchmark. Despite being an in-memory store it still follows the ActiveSupport::Cache interface which means it serializes everything stored in it. This is probably fine for web caching but don't try to use it as an arbitrary object cache."
ruby,3dfvz8,moomaka,2,Thu Jul 16 00:17:12 2015 UTC,"What would you use instead?   And, for using Rails fragment caching, you have to use something that follows the ActiveSupport::Cache interface, no? Are there alternatives to the standard Rails fragment caching API's that you use for doing this sort of thing?"
ruby,3dfvz8,jrochkind,1 point,Thu Jul 16 02:39:24 2015 UTC,For Rails caches chances are you want a centralize cache so your going to pay the serialization penalty to put it in memcached or redis anyway.  My comment is more about arbitrary object caching. For example I often have background jobs that need to churn through a bunch of data and join various pieces of information from other models along the way. caching those models in ActiveSupport::MemoryStore is very slow in comparison to a non-serializing LRU cache. I often see people use ActiveSupport::MemoryStore for things like this and it really sucks in terms of performance.  We have our own internally built library for this but structurally it is similar to LRURedux discussed in the article.
ruby,3dfvz8,moomaka,2,Thu Jul 16 03:08:42 2015 UTC,"Interesting, thanks. i wonder why ActiveSupport::MemoryStore bothers serializing, if it's just in memory non-shared cache anyway, couldn't it simply store the actual object without serializing? Or could you even very simply monkey patch it to do this? Perhaps I'll take a look at the code and see if there's an obvious answer as to why not.   Or maybe it's just because then you need to worry about multi-threaded concurrency if you have possibly concurrent threads reading the same object from the cache at once."
ruby,3dfvz8,jrochkind,2,Thu Jul 16 03:14:51 2015 UTC,"i wonder why ActiveSupport::MemoryStore bothers serializing, if it's just in memory non-shared cache anyway, couldn't it simply store the actual object without serializing?   The way ActiveSupport::Cache is designed the serialization / deserialization happens at a layer above the storage adapter. By the time ActiveSupport::MemoryStore gets it, it's already just a key-value string-string pair. In theory you could monkey patch your way around this of course, but likely it's just not important enough for the primary use of ActiveSupport::Cache which usually uses memcached or redis in production anyway."
ruby,3dfvz8,moomaka,1 point,Thu Jul 16 03:43:21 2015 UTC,"Very nice article, thanks."
ruby,3dfvz8,jrochkind,1 point,Thu Jul 16 02:38:15 2015 UTC,"Finally someone writes an in depth article on caching! That said I work in an environment that cannot cache much and we gained a ridiculous speed boost through doing everything on the database that is humanly possible, we were desperate and the application was in flames :).  If you have the SQL knowledge, don't cache, and if you don't, read the article!"
ruby,3dfvz8,verydefunctional,1 point,Thu Jul 16 21:28:09 2015 UTC,"Doesn't cover HTTP caching so not complete. Seemingly still not replacement for my guide, but it's certainly newer."
ruby,3dhhi7,druznek,2,Thu Jul 16 08:49:49 2015 UTC,"I apologize, I didn't go through the readme yet (not in the office) but does this allow for finding a movie by partial title? Such as min would find Terminator as well as A beautiful mind."
ruby,3dhhi7,nicoschuele,1 point,Thu Jul 16 14:46:57 2015 UTC,"Yep! The only problem is that is not yet documented (the documentation is almost complete, but some classes are still not covered).  >> Tmdb::Search.movie('min') #<Tmdb::Movie page=1, results=[#<Tmdb::Movie adult=false, backdrop_path=nil, genre_ids=[18], id=232001, original_language=""en"", original_title=""Min"", overview=""A young teacher named Yasmin (\""Min\"") goes off in search of her birth mother."", release_date=""2003-04-15"", poster_path=nil, popularity=1.000299, [...]"
ruby,3dhhi7,nicoschuele,1 point,Thu Jul 16 15:02:24 2015 UTC,Awesome! Thanks. I will try it this week-end!
ruby,3dhhi7,nicoschuele,1 point,Fri Jul 17 09:09:27 2015 UTC,"Also, Samuele is completing the documentation right now, and I think that for the weekend will be complete. Feel free to PM me if you need any help!"
ruby,3dhhi7,gregbaugues,1 point,Fri Jul 17 09:21:05 2015 UTC,Thanks a bunch. I'm currently writing the next version of RailsBricks but taking a break to code a movie/tv tracker. Your gem seems the perfect place to start.
ruby,3dhhi7,jabbaroni,2,Fri Jul 17 10:21:51 2015 UTC,Very nice work. This is super helpful.
ruby,3dhhi7,elfenars,1 point,Thu Jul 16 19:26:11 2015 UTC,Thank you. I'm happy we can give back to the community!
ruby,3dhhi7,prh8,2,Thu Jul 16 19:31:19 2015 UTC,Any reason for the heavy use of class methods over instance methods?  Tmdb::Movie.videos(550) Tmdb::Movie.reviews(550)   vs.  m = Tmdb::Movie.new(550) m.videos m.reviews   etc.
ruby,3dhhi7,elfenars,3,Thu Jul 16 12:09:13 2015 UTC,"In TMDB when you look for an ID you get a specific ""movie object""... and then you could look for more info related to that movie, but since every endpoint its kinda like it's own object, at least for me, makes sense to use Class Methods.    Besides, if you actually wanna do instance methods on the related endpoints to the original movie, you would have to do more API calls creating overhead, so it actually saves you calls by doing it explicitly with class methods."
ruby,3dh1xk,rubymentor,1 point,Thu Jul 16 05:23:44 2015 UTC,"Having completed this exercise and struggling with it, I look forward to this!"
ruby,3dd7xw,Tall-Guy,4,Wed Jul 15 10:26:17 2015 UTC,I read the Well-Grounded Rubyist 5 times to start. I did it on the train to work (30 minutes) every weekday for about 6 months.
ruby,3dd7xw,lukeholder,3,Wed Jul 15 12:22:54 2015 UTC,"If you are doing some hardcore ruby work you would be probably better off with ""Metaprogramming Ruby 2"". POOD is cool and all but it will be hard to apply its teachings if you lack object experience. Eloquent will supplement Well-Grounded.     If you want to massively expand your ruby knowledge and tap into its power - go with the metaprogramming book. POOD and Eloquent are great and you should read them both but they are going to have a minor impact after Well-grounded."
ruby,3dd7xw,toolbelt,1 point,Wed Jul 15 19:50:38 2015 UTC,"What do you mean by ""lack object experience""?  Also, I'll have a look on Metaprogramming Ruby 2. I wasn't aware of it. Does it feel natural read after Well-Grounded?"
ruby,3dd7xw,toolbelt,1 point,Sun Jul 19 07:28:59 2015 UTC,Lack of experience designing object oriented software. If you lack that it might be harder to see where to apply POOD teachings and you might end up with skewed objects.   I think metaprogramming ruby 2 is the next step after well-grounded. Ruby is known for its metaprogramming features and not knowing/using them would restrict you as a ruby programmer.
ruby,3dd7xw,DrummerHead,2,Sun Jul 19 10:05:20 2015 UTC,I recommend http://www.poodr.com/
ruby,3dd7xw,jrochkind,2,Wed Jul 15 14:02:59 2015 UTC,"Both get good feedback. Pick whichever you like best based on the first chapter or back of the book or whatever, it doesn't matter."
ruby,3dd7xw,jrochkind,1 point,Wed Jul 15 19:22:52 2015 UTC,"Well, At some point I will be reading them both, as mentioned both have great feedback. I'm trying to figure out which one will feel more natural read after Well-Grounded Rubyist."
ruby,3dd7xw,coriolisFX,1 point,Sun Jul 19 07:27:26 2015 UTC,So just get them both and figure it out! why do you think a bunch of random people on reddit will know better than you what will work best for you?
ruby,3dc1a3,Sluisifer,2,Wed Jul 15 02:30:23 2015 UTC,"These two lines are the root of your problem. They're not mutually exclusive, since you can solve the puzzle on your last guess. When that happens, #victory gets called, which invokes #end_game and thus File.delete. But then, since you didn't actually return from #update_board, execution jumps back and continues from Line 72. That the game over condition also holds means that #end_game andâ€’here comes the rubâ€’File.delete will be called again, but this time on a nonexistent file.  You could either rearrange #update_board such that you can return early, or else check whether the file exists before attempting to remove it."
ruby,3dc1a3,0x0dea,1 point,Wed Jul 15 04:37:26 2015 UTC,"Ah, that's indeed another bug, but it did lead me to the issue I was really struggling with: I was calling save_game right after I deleted the file!  I swear I had checked for that before, but alas...  Thanks so much, that one really had me stumped!"
ruby,3dc1a3,larikang,2,Wed Jul 15 04:46:40 2015 UTC,"I think the main problem here is the organization of your code. You've scattered the logic into so many methods that it's almost impossible to tell where the error is occurring! Not a good sign. Your Game class is responsible for too much: saving, loading, input, output, and managing the game state.  Design your Game class more like an abstract interface: something you could plug into a web server so people can play Hangman over the internet or that you could hook up to a graphics library to play Hangman in glorious 3D. Thinking in this way will ensure that you don't put stuff in the class that doesn't belong there. It should only care about the game state; it should ensure with every method call that a sensible game state is preserved.  Anyway your problem is that you check for victory and delete the saved game via update_board, which calls save_game right afterwards. So the file is being (momentarily) deleted. I fixed this by adding a simple return unless @running at the beginning of save_game. Even better you could make that a raise since you really shouldn't be saving the game after it's done running. That would explosively point out such mistakes in your code."
ruby,3dc1a3,non-rhetorical,1 point,Wed Jul 15 04:51:51 2015 UTC,"Yes, refactoring into sensible classes is the next task.  I didn't have a good idea of what I needed at the outset, so it just sorta ... grew.    That's a really good tip about raising exceptions to check your assumptions.  It's something I don't consider enough, but I can see how valuable that would have been in this situation.  I really appreciate the feedback!"
ruby,3dbfyf,connexionwithal,6,Tue Jul 14 23:43:57 2015 UTC,There a Stack Overflow post that may have what you're looking for: http://stackoverflow.com/questions/171480/regex-grabbing-values-between-quotation-marks
ruby,3dbfyf,danburbul,2,Wed Jul 15 01:10:24 2015 UTC,There is a Stack Overflow post for basically everything.
ruby,3dbfyf,ClikeX,4,Wed Jul 15 12:46:45 2015 UTC,"Can you give an example of a before and after string?  Without context, a regex I'd probably start with is something like /""(.*?)""/ which assumes double quotes, then captures only one group inside those quotes. So if you had a file foo.txt that contained lines that were formatted like this:   ""Horizontal impactful leverage enable open-source deliverables"" he said, waiting to engage next-generation partnerships   And you wanted to take only the part within the quotes (""Horizontal impactful leverage enable open-source deliverables"") and write them to a file baz.txt, then you'd do something like this (very shitty q&d procedural script):  old_file = File.open('foo.txt') new_file = File.open('baz.txt', 'w') lines = old_file.readlines.map { |line| line.match(/""(.*?)""/) { $1 } } new_file.puts(lines) new_file.close old_file.close"
ruby,3dbfyf,flanger001,2,Wed Jul 15 01:48:40 2015 UTC,"Upvoting because I, too, would like to know this answer. If you find the solution on your own, please update! :)"
ruby,3dbfyf,spacefeast,3,Wed Jul 15 00:57:17 2015 UTC,"Thanks. Been using rubular.com which is very useful for making regex expressions, but haven't found a solution to this issue"
ruby,3dbfyf,spacefeast,2,Wed Jul 15 00:59:45 2015 UTC,rubular.com   Very cool tool!
ruby,3dbfyf,this_is_not_nil,1 point,Wed Jul 15 01:01:25 2015 UTC,Are you two in the same class?
ruby,3dbfyf,spacefeast,1 point,Wed Jul 15 09:27:34 2015 UTC,hobbyist
ruby,3dbq61,connexionwithal,7,Wed Jul 15 01:02:25 2015 UTC,"Look up: File.open/read , how to apply a regex to a string, and then File.write =)  For testing the regex, I recommend http://rubular.com/"
ruby,3dbq61,ZirconCode,3,Wed Jul 15 01:29:48 2015 UTC,"in_file = File.open('/path/to/file.txt') output = in_file.each_line.map{|line| line.gsub(/,"".*$/, '')}.join out_file = File.open('/path/to/output.txt', 'w')  out_file.write(output)   I'll test it if you provide a sample input.  *Downvote me but don't explain or contribute. Yeah. Cool."
ruby,3dbq61,cocoabean,3,Wed Jul 15 01:52:06 2015 UTC,"Maybe people are downvoting you for not closing the file handles. Or probably not rubyish enough. :P  A possible refactor of your code:  file = '/path/to/file.txt' contents = File.read(file).split(""\n"") File.open(file, 'w') do |file_handle|     file_handle.write contents.map {|line| line.gsub(/,"".*$/, '')}.join(""\n"") end"
ruby,3dbq61,Shmutt,1 point,Wed Jul 15 06:46:06 2015 UTC,"I figured it was either that, or that people were upset that I just wrote it out instead of helping. Not writing it the ""Ruby way"" at least leaves OP some work."
ruby,3dbq61,cocoabean,2,Wed Jul 15 07:01:23 2015 UTC,"Just upvoted you to help against whoever downvoted you.  This worked, thank you!!!"
ruby,3dbq61,cocoabean,1 point,Wed Jul 15 07:35:24 2015 UTC,"Thanks, make sure to check out the refactored version in the other reply.  Let me know if you want anything explained."
ruby,3dbq61,ZirconCode,0,Wed Jul 15 16:12:50 2015 UTC,"Have an upvote, that's not cool.  psst: don't use snake case in Ruby, it disgruntles us =p"
ruby,3dbq61,cocoabean,1 point,Thu Jul 16 14:05:45 2015 UTC,Since when? What would I use instead?
ruby,3dbq61,ZirconCode,2,Thu Jul 16 15:02:10 2015 UTC,"I was thinking CamelCase but upon one more second of thought turns out I'm an idiot who's read to much java recently, it's high time to get back to my beloved ruby =("
ruby,3dbq61,cocoabean,1 point,Thu Jul 16 16:05:15 2015 UTC,Lol.
ruby,3dbq61,waxjar,1 point,Thu Jul 16 16:42:23 2015 UTC,"cat file_name.ext | sed -e 's/,"".*//'"
ruby,3d8bwi,johanhans,1 point,Tue Jul 14 08:13:30 2015 UTC,"He does not explain how Ruby implements a hash internally, which is unfortunate. If I wanted to use hashes for fast logic instead of the conditional approach I'd dig out the internals of ruby to argue its case.   A traditional hash is based on one or more hash functions that do the lookup of the key's value for you. This can be quite fast but may not. If you take this guy's advice be warned that for very large hashes you should benchmark your code :)"
ruby,3d7r94,Gqi,7,Tue Jul 14 04:19:57 2015 UTC,"I picked up Rails around a year ago. The best way to learn Ruby on Rails is The Rails Tutorial. Hartl introduces the fundamentals of web development, including version control, deploying to a cloud service, and even Bootstrap :)  After that if you're still interested I would check out The Well-grounded Rubyist for a comprehensive introduction to the Ruby programming language. Good luck!"
ruby,3d7r94,mistyfud,2,Tue Jul 14 05:34:06 2015 UTC,That seems like an awesome tutorial! I'll start tomorrow :)
ruby,3d7r94,jrochkind,3,Tue Jul 14 05:53:07 2015 UTC,"Ruby? Sure, absolutely. Although for web development, you want some kind of support beyond just 'ruby', which is why people use Rails.   Rails? Not too difficult to pick up? For someone new to web development? I dunno. Give it a try and find out."
ruby,3d7r94,verydefunctional,2,Wed Jul 15 18:32:55 2015 UTC,"RoR is a mature framework, more so than node. If it suits your needs depends on how much you want to build yourself or how many packages you want to add. RoR has a full feature set you can use, so you will want to learn the RoR way while node is just a server, sort of.  As for the second question... Bootstrap is a CSS framework/toolkit. It's interpreted by the browser it's served to. It will work with any and every webserver you can run and configure. Even with plain apache."
ruby,3d7r94,Tannerleaf,1 point,Tue Jul 14 05:39:39 2015 UTC,"Alright, that makes sense. Thank you!"
ruby,3d7r94,Tannerleaf,2,Tue Jul 14 05:53:32 2015 UTC,"Get the Hartl tutorial, and work through it. That uses Bootstrap as its  CSS framework, with some jQuery.  In addition to Ruby, and the Rails framework itself, you'll also need to get to grips with, in this order:   HTML (i.e. HTML5) CSS (this also gets extended by things like SASS) JavaScript (and jQuery)   You'll need to understand HTML, as this forms the foundation for everything else on a website.  With Ruby and Rails, the ERB templating is nice and straightforward, but take a look at Haml; it's weird at first, but quite nice once you get used to it."
ruby,3d7r94,Tannerleaf,2,Tue Jul 14 05:54:55 2015 UTC,"I know a bit of HTML and CSS, not enough to call myself an expert by any means, but I know the basics. Is that enough to get into rails or would I need to properly know HTML/CSS?"
ruby,3d7r94,artem911,2,Tue Jul 14 05:59:46 2015 UTC,"As long as you understand the principles, there shouldn't be a problem.  It's extremely useful to understand how to create HTML as a standalone document, and how to link in CSS to style it up; and then how to link in JavaScript to do some funky things. Because when you progress to something like Rails, those bits and pieces all get broken down into various components; it's useful to know how those components fit together as a whole.  The thing I found with Rails though, was that it's sort of necessary to get to grips with a lot of things at once; so it's useful to know some of the discrete things that make up Rails.   Hm... I should probably add that understanding a little SQL helps a lot too. Rails tends to shield the developer from a lot of the gnarly gubbins in SQL, but it's still useful to understand that as well. It's bloody nice using ActiveRecord though, instead of messing around with raw SQL in your application.  Incidentally, if you want to learn something simpler for the web in Ruby, take a look around at things like Sinatra. You'll be able to apply that to your existing HTML/CSS very quickly."
ruby,3d7r94,devwalks,2,Tue Jul 14 06:17:27 2015 UTC,"I don't know any Javascript but it shouldn't be too difficult to pick up on, maybe a short udemy class on basic web development might help me out in the short run."
ruby,3d7r94,devwalks,1 point,Tue Jul 14 06:24:01 2015 UTC,Good luck :-)
ruby,3d7r94,jrochkind,1 point,Tue Jul 14 06:41:06 2015 UTC,There's a great course on coursera for free called Web Application Architectures. It uses RoR and shows your the principals behind it.  Link Here
ruby,3d4436,freezkyd,6,Mon Jul 13 10:54:59 2015 UTC,"I work for a Rails company in The Hague and we're looking for developers. Send me a PM if you want more details :)  Earnings, I guess it largely depends on whether those 7 years as an analyst are relevant for your new job. There are Ruby and general development communities, check out DenHaag.rb (and Amsterdam.rb, Rotterdam.rb, Utrecht.rb are nearby), /dev/070 and /dev/haag. Work/life balance in the Netherlands is very good in general and that is not different for developers from what I experience/hear from friends."
ruby,3d4436,Rafert,1 point,Mon Jul 13 11:34:20 2015 UTC,Can you give a ball-park for salary? Curious about the salary prospects for mid/senior level rails jobs.
ruby,3d4436,banister,2,Mon Jul 13 11:41:52 2015 UTC,"About 3-4k for medior, 4-5k for senior. Of course there's a lot of other factors that decide where in the spectrum you'll end up and there will be companies that have better salaries and/or benefits. 100k/year like in Sillicon Valley is not undoable, but I think you'll need to go freelance and have a lot of billable hours.  How did you end up in the Netherlands and getting a remote job in the US if you don't mind my asking? I'm looking around a bit myself :)"
ruby,3d4436,Rafert,1 point,Mon Jul 13 12:42:46 2015 UTC,"Ah, the salary for mid-level remote position for an american company is already much greater than the salary for a senior position in NL (mid-level for remote is already in the 6-7K euro/month range)  IMO NL pays embarrassingly low salaries to programmers. I don't understand it."
ruby,3d4436,banister,1 point,Mon Jul 13 16:33:13 2015 UTC,what is the state in NL with freelancers ? It has become harder and harder worldwide the last years. Almost impossible in South Europe because of the austerity.
ruby,3d4436,morphemass,1 point,Mon Jul 13 12:58:18 2015 UTC,"Are Dutch language skills a requirement? I'm in the UK(British) and just started serious job hunting a couple of weeks ago (lots of demand!) but the quality of life here is ... well, not what it should be. I'd be very interested in more details :)"
ruby,3d4436,Rafert,1 point,Tue Jul 14 17:22:36 2015 UTC,"No, we're used to having some non-Dutch people around. I'll send you a PM :)"
ruby,3d4436,morphemass,1 point,Tue Jul 14 18:11:21 2015 UTC,"Thanks! Funnily enough, I'm used to having (a) Dutch person around hence my interest :)"
ruby,3d4436,banister,3,Tue Jul 14 18:16:10 2015 UTC,"In my experience, dutch salaries for rails devs are around 2500 - 3000 euros gross. Senior engineers can earn as much 5000 to 6000 euros gross.  I live in NL, but work remotely for an american company. If you can, try to get a remote job, the pay is much better and you have more schedule flexibility."
ruby,3d4436,softwaregravy,3,Mon Jul 13 11:31:01 2015 UTC,60-72k euro gross? How is the engineer quality? Seems incredibly low.   Edit: Honest question. In no way implying you're mistaken. I honestly don't know.
ruby,3d4436,banister,5,Mon Jul 13 12:22:59 2015 UTC,I also got an offer around 40-45k gross for a jun/med position.
ruby,3d4436,mkaito,3,Mon Jul 13 12:57:03 2015 UTC,"Yeah, in fact 72k is even on the very high end of the scale in my experience."
ruby,3d4436,banister,1 point,Mon Jul 13 13:47:41 2015 UTC,work remotely for an american company   How in the world did you manage that?
ruby,3d4436,pglombardo,3,Mon Jul 13 16:20:48 2015 UTC,"Just look around, there's lot of opportunities. weworkremotely.com is a good start."
ruby,3d4436,banister,2,Mon Jul 13 16:52:57 2015 UTC,"https://weworkremotely.com/jobs/search?term=ruby  If you're willing to work remotely in your own office space, geography doesn't really matter.  I've found that working during business hours of your customer/client/company is always best.  In Europe, to work US EST business hours, it would be from 3pm to 11pm or so."
ruby,3d4436,banister,2,Mon Jul 13 14:47:32 2015 UTC,"It's a bit hard to work for US business hours from Europe, especially If you have a partner, you'll never meet together except weekends. Also you can't do this for a long time. I could work also for a US company in local business hours but I am being a bit cautious because I've never been a freelancer and I've never worked for someone I never met in person from another continent."
ruby,3d4436,banister,2,Mon Jul 13 15:07:08 2015 UTC,"Many companies dont require you work US business hours. Often you have an extremely flexible schedule, you can basically work whatever hours are comfortable for you so long as you get your work done."
ruby,3d4436,bikolya,1 point,Mon Jul 13 16:06:14 2015 UTC,Have you ever worked like that ? I know there are sites like remoteok.io and offsite.careers and weworkremotely but they seem that they are only startups. Do you have any experience with that?
ruby,3d4436,claudiug1,1 point,Mon Jul 13 16:31:43 2015 UTC,"Yeah, I've worked like that, and my friends working remote jobs too seem to have similar flexibility. It's pretty sweet."
ruby,3d4436,A1n3k0,1 point,Mon Jul 13 17:31:13 2015 UTC,Can I PM you ?
ruby,3d4436,dr_jumba,1 point,Mon Jul 13 17:54:35 2015 UTC,ok
ruby,3d06we,geraldbauer,2,Sun Jul 12 11:18:19 2015 UTC,Note: The rubyconf.json dataset gets auto-build from the README.md page @ planetruby/awesome-events. Anything missing? Please update/edit the README.md page. Cheers.
ruby,3cw09c,retardo,3,Sat Jul 11 06:17:07 2015 UTC,"For those interested in this, Aaron Patterson has been doing some good talks on Bundler / RubyGems and some work he's doing on improving their performance:  https://www.youtube.com/watch?v=_bDRR_zfmSk  https://www.youtube.com/watch?v=kwkbrOwLsZY"
ruby,3cw9i3,kinezu,5,Sat Jul 11 08:32:09 2015 UTC,"I like RestClient. Super simple but effective, here is an example:  require 'rest-client'  RestClient.get 'http://example.com'   Check out the README for more examples."
ruby,3cw9i3,jesus_castello,2,Sat Jul 11 14:07:14 2015 UTC,"Restclient works pretty well and can handle authorization, I typically pair it with nokogiri if I am pulling html/xml."
ruby,3cw9i3,llN3M3515ll,4,Sat Jul 11 15:52:06 2015 UTC,Faraday is pretty awesome
ruby,3cw9i3,rhaikh,1 point,Sat Jul 11 09:46:43 2015 UTC,"Second Faraday. If you're building a Ruby gem, it's really adaptable for the user of your code to swap in different components based on their use case.  I also have a course that may help you with some of it, if needed: http://brandonhilkert.com/courses/build-a-ruby-gem/"
ruby,3cw9i3,brandonhilkert,5,Sun Jul 12 22:51:16 2015 UTC,httparty is an option as well
ruby,3cw9i3,elikim,2,Sat Jul 11 12:06:26 2015 UTC,I see you like to httparty hard
ruby,3cw9i3,chills42,1 point,Sun Jul 12 03:17:48 2015 UTC,I just built a pretty big internal library at work that sole purpose is to sync data from API's and I used rest-client.  Worked out pretty well but I've heard a lot of good things about faraday as well!
ruby,3cufv6,mcmahoniel,1 point,Fri Jul 10 21:37:07 2015 UTC,"I just started working on an app which fits in the ""Improve your daily life"" theme, and now I see this. Can I still participate with the app? (I started working on it couple days back. Have written about 100 lines of code before seeing this post)"
ruby,3cufv6,Vshan,1 point,Tue Jul 14 09:54:30 2015 UTC,"As long as it's been started since 0000 GMT Saturday morning, you're good to go. :) Sign up for our community at our web site and you can chat and get started."
ruby,3cufv6,Meshiest,0,Tue Jul 14 16:37:03 2015 UTC,Should have told me earlier dammit
ruby,3cufv6,Meshiest,1 point,Sat Jul 11 13:14:24 2015 UTC,"It's 9 days long, you've got plenty of time! :)"
ruby,3cvels,rkcudjoe1,3,Sat Jul 11 02:28:57 2015 UTC,"pry $VERBOSE = true require 'some_gem' Fork. Fix warnings. Send pull request. Profit.   You can also try running the gem's tests to find warnings for code that isn't run at require time. Lots of warnings are fixed by just adding parentheses or changing white space.  *You can run tests or just, you know, play with the gem in pry :)  http://mislav.uniqpath.com/2011/06/ruby-verbose-mode/"
ruby,3cvels,cocoabean,1 point,Sat Jul 11 06:44:31 2015 UTC,"Tried that, one repo per day for a week.  A large number of responses were outright hostile (Especially the warnings related to usage of @var ||= fooMethod because the non-warning code is not as ""pretty"")  As a community we apparently have decided that warnings are pointless and trying to get people to accept PRs purely to reduce warnings is a thankless (Literally) task.  I would actually recommend against this as an intro to open source."
ruby,3cvels,rurounijones,1 point,Sun Jul 12 09:40:05 2015 UTC,Hasn't been my experience. Every warning PR I've submitted has been graciously and quickly accepted.
ruby,3cvels,cocoabean,1 point,Sun Jul 12 10:04:59 2015 UTC,Luck of the draw I guess
ruby,3cvels,rurounijones,2,Sun Jul 12 10:55:25 2015 UTC,"I think a lot of people think that because writing docs is ""easy"", it is somehow not appreciated. That's really not the case. Maintainers are really really busy and documentation helps keep a library useful.  Another one that people miss:   Clone and setup local dev env. Add SimpleCov Run the test suite View simplecov report to find lines of code that are not being tested (usually, people miss rescue blocks and else branches) Add tests that hit missed lines of code.   Sometimes, you will be surprised to find typos and unintentional behavior when you write these use cases. If you think that's the case, raise an issue.  Great article. Glad someone finally mentions that there are ways to help out other than just adding new features."
ruby,3cs859,zoso,8,Fri Jul 10 10:21:19 2015 UTC,BuiltWith Technology Profile
ruby,3cs859,tomraider,1 point,Fri Jul 10 11:48:40 2015 UTC,"Didn't know that website, it's pretty cool to research trends and see all kinds of things about websites"
ruby,3cs859,AeroBag,7,Sat Jul 11 03:33:02 2015 UTC,"I interviewed with them once as a Rails engineer, to work on internal web apps.  My impression is that they use Rails in places where it works well for them."
ruby,3cs859,redconfetti,1 point,Fri Jul 10 14:13:29 2015 UTC,"Me too, for a developer docs project a couple of years ago."
ruby,3cs859,manys,1 point,Fri Jul 10 18:16:05 2015 UTC,Places where it works well for them   Mind elaborating? I need to pitch a team about using rails instead of php! This has the steam to actually convince them to use it! :D
ruby,3cs859,sebastian_72,2,Sat Jul 11 15:38:18 2015 UTC,"I switched from PHP to Rails in 2008. I didn't try the PHP frameworks out. I've found that Ruby is really flexible and can be used in ways PHP can't. I worked on a hybrid system using Wordpress and Rails side by side. In fact I had to replicate features to be the same in the Wordpress theme as they were in the Rails layout template. PHP wasn't as empowering. It was limiting. Just being able to override (monkey patch) functions in the libraries you're using when you need to change their behavior is so useful.  It's not as lightweight as node, but it's got a great community. You can pick and choose libraries to take your application to the next level in ways I never did with pure PHP. Maybe PEAR or PECL has changed how rapidly you can implement things through the use of utility libraries... But I can say that I prefer Rails. I still like PHP more than JavaScript."
ruby,3cs859,redconfetti,1 point,Sat Jul 11 18:05:11 2015 UTC,"Yes, indeed, I totally agree with you. I did try out CodeIgniter for about a couple months, but I got frustrated over the lack of a generator pretty fast.  Node is very lightweight, for a lot of things. But the coupling is loose, and sometimes, when you need a small tightly coupled application, Rails is the way to go!  Thanks for the reply!"
ruby,3cs859,sebastian_72,5,Sun Jul 12 08:31:01 2015 UTC,They have job postings for ruby on rails engineers. https://jobs.apple.com/us/search?jobType=1#specs&ss=ruby&t=1&so=&j=SFWEG&lo=0*USA&pN=0&openJobId=40927414
ruby,3cs859,notorious1212,11,Fri Jul 10 14:02:27 2015 UTC,"Technically, Passenger could also mean python or node, but yeah, very likely it's rails/rack."
ruby,3cs859,batouchu,3,Fri Jul 10 13:13:48 2015 UTC,Passenger yes but the default error page not.
ruby,3cs859,maq0r,3,Fri Jul 10 14:15:44 2015 UTC,"Its rails. Check their job openings, is pretty much all Ruby and Rails."
ruby,3cs859,bradendouglass,1 point,Fri Jul 10 18:20:05 2015 UTC,Agreed. They are recruiting heavily for these roles right now
ruby,3cs859,grimmstede,5,Sat Jul 11 02:36:27 2015 UTC,"It is using Passenger, that is what I use for my Rails apps. X-Powered-By: Phusion Passenger 4.0.59"
ruby,3cs859,stevoleeto,3,Fri Jul 10 12:32:44 2015 UTC,"Interviewed with them on campus last fall, they were very very very interested in people who've used rails."
ruby,3cs859,SignalException,2,Fri Jul 10 17:39:59 2015 UTC,They use Ruby on Rails for various internal tools. I'm a software engineer and I interviewed for an internal tools development position a few years ago.
ruby,3cs859,Wetai,2,Fri Jul 10 21:20:53 2015 UTC,"Passenger does support other stuff than ruby, though, and even in Ruby supports more than just rails."
ruby,3cs859,Intrepidd,1 point,Fri Jul 10 12:56:05 2015 UTC,"I was curious too when I got the error, looking at the html code it's most likely rails (look at the assets linking)"
ruby,3cs859,mt1337,1 point,Fri Jul 10 13:31:36 2015 UTC,"Apparently, the website is built using Rails  http://builtwith.com/?https%3a%2f%2fbeta.apple.com"
ruby,3cs859,haydenk1337,1 point,Sat Jul 11 03:00:29 2015 UTC,Yeah and they used Sinatra to build a sample app to create items for Passport in iOS too.
ruby,3cs859,5py,1 point,Sun Jul 12 00:46:38 2015 UTC,"Why don't mods delete threads like these? No information, no discussion, no news... not even a cat or a joke. This is a nonsense thread."
ruby,3cs859,Femaref,-8,Sat Jul 11 00:27:04 2015 UTC,so?
ruby,3cs859,dangsos,11,Fri Jul 10 10:34:42 2015 UTC,Is there a pre-req. that posts in ruby have to impress you or something?  It's a simple observation that I personal find as interesting as half the posts on here.  For one it means as a ruby dev I can look at apple for job opps.
ruby,3cs859,KimJongThrill,-4,Fri Jul 10 15:07:39 2015 UTC,"If you need a ruby subreddit reddit post of a twitter tweet to tell you that one of the biggest tech companies in the world is hiring a particular position, and that is actually of interest to you, then you have some problems to work out.  Also, this is a shit post for a tech subreddit"
ruby,3cs859,TweetPoster,-1,Fri Jul 10 22:04:45 2015 UTC,@zosoooo:   2015-07-10 09:37:52 UTC  Is @Apple using @rubyonrails for their website or at least their beta subscription program. #apple #rubyonrails #ruby pic.twitter.com [Imgur]     [Mistake?] [Suggestion] [FAQ] [Code] [Issues]
ruby,3cuuwd,boronine,1 point,Fri Jul 10 23:32:23 2015 UTC,Courtesy of Radu-Bogdan Croitoru. We are looking into Sass integration now :)
ruby,3cu05d,caadbury,14,Fri Jul 10 19:36:28 2015 UTC,The method isn't lazy. Maybe the programmer was.
ruby,3cu05d,Enumerable_any,4,Fri Jul 10 21:58:37 2015 UTC,I was expecting a much different post.
ruby,3cu05d,kellyjprice,1 point,Sat Jul 11 00:36:15 2015 UTC,ditt0 d00d
ruby,3cu05d,SandalsMan,2,Sat Jul 11 03:57:15 2015 UTC,irb> '300IsOverrated'.to_i 300
ruby,3cu05d,rampion,3,Fri Jul 10 20:33:35 2015 UTC,The Integer method solves that problems. I wonder if there is an equivalent for Time.
ruby,3cu05d,larikang,3,Fri Jul 10 21:07:33 2015 UTC,It would be way easier to only accept a strict format instead of writing this monster.
ruby,3cu05d,mdotc,3,Sat Jul 11 03:29:14 2015 UTC,Try Chronic.  Everyone's using it  [1] pry(main)> Chronic.parse('June') => 2016-06-16 00:00:00 -0700 [2] pry(main)> Chronic.parse('Jun') => 2016-06-16 00:00:00 -0700 [3] pry(main)> Chronic.parse('Juniper') => nil [4] pry(main)> Chronic.parse('JunkyardWars') => nil [5] pry(main)> Chronic.parse('JunoIsAnAwfulMovie') => nil
ruby,3cu05d,rhaikh,3,Sat Jul 11 09:54:16 2015 UTC,"Wrong. Time.parse does not use RFC2822 to parse an argument, but own internal ""slacky"" date parse and should be used as a failsafe solution, for possible further investigation/check.  If you need strict date string parsing, you may use ""surprisingly"" Time.rfc2822 method:  > Time.rfc2822('1 Jun 2015 00:00:00 +0200') => 2015-06-01 00:00:00 +0200 > Time.rfc2822('1 June 2015 00:00:00 +0200') ArgumentError: not RFC 2822 compliant date: ""1 June 2015 00:00:00 +0200"""
ruby,3cu05d,joanbm,1 point,Sat Jul 11 17:33:59 2015 UTC,"Thanks, I learned something!"
ruby,3cu05d,0node,1 point,Sat Jul 11 19:01:31 2015 UTC,That is pretty lazy...
ruby,3cu05d,ABC_AlwaysBeCoding,1 point,Fri Jul 10 20:07:13 2015 UTC,"That's not what ""lazy"" means (in a programming context at least)!  So it matches on the beginning, so what. It's a permissive parser I guess. Use Chronic if you want more strictness."
ruby,3cu05d,cocoabean,0,Sat Jul 11 11:07:41 2015 UTC,You should copy and paste your post into a GitHub issue.  https://github.com/ruby/ruby
ruby,3ct75u,jesus_castello,1 point,Fri Jul 10 16:03:41 2015 UTC,"I would take this with a grain of salt. This type of extreme application of various coding guidelines results in 'class hell' very quickly. e.g. there is absolutely no need for a 'DateRange' class here. In this situation it's not terrible, but keep in mind that in real code, things are far more complex. If you apply this everywhere you end up with a million classes which creates a mess and runs face first into another major difficulty in software: naming."
ruby,3cs2mo,sowasred2012,2,Fri Jul 10 09:00:52 2015 UTC,"If you're going to write your tests to look like human-readable steps, why not use something like Cucumber? I understand not wanting to write each step manually and all, but doing it anyway in ugly form seems pointless to me."
ruby,3cs2mo,danielkza,2,Sat Jul 11 07:43:10 2015 UTC,"There is a big difference between descriptive programming and creating an entire new language. Gherkin falls into the later category. To me the choice comes down to the consumer of the spec. If the spec is only going to be worked with by engineers, then avoid Gherkin, it just overcomplicates the problem. If you want specs that can be consumed by business folks as a functionality specification, then Gherkin may make sense."
ruby,3cs2mo,moomaka,2,Sat Jul 11 17:23:28 2015 UTC,"it just overcomplicates the problem.    It provides tools you'll likely want to build yourself, like parametrized steps, tags, parsers for other languages, etc. The step definitions are almost exactly the same, substituting a method definition with a step definition block, and you get better expressibility without having to clean up step names to fit methods."
ruby,3cs2mo,danielkza,1 point,Sun Jul 12 05:08:24 2015 UTC,"We were long-time users of Cucumber before we moved our feature testing in to RSpec.  As covered in the article, we realised that both the authors and the consumers of the feature tests were engineers, and as such, the indirection between feature files, step definitions and the regex glue between them never really offered us any value. For us the underscored method names to explain the feature offers more than enough expressibility."
ruby,3cs2mo,cjblackburn,1 point,Sun Jul 12 15:44:25 2015 UTC,"The abstraction of given/when/then scenarios are still valuable to us. The abstraction of gherkin syntax and a second testing tool, cucumber, are not as valuable to us. This can vary from team to team, organisation to organisation."
ruby,3cs2mo,DrPheltRight,2,Sun Jul 12 10:57:40 2015 UTC,"The abstraction of given/when/then scenarios are still valuable to us.    My opinion is that Cucumber does that much better than the linked example. It allows you to write actual prose, that reads like one. Doing it in a more standard code format would be fine too. By mixing the two it seems you get all the verbosity, more restrictions and none of the writing efficiency.   The abstraction of gherkin syntax and a second testing tool, cucumber, are not as valuable to us.    If you can be content with a relatively small set of tools to work then I can agree. But I have the impression that reaching any non-trivial amount of complexity will lead you to rewrite half of Cucumber without realizing, for worse (readability-wise) results."
ruby,3cs2mo,danielkza,1 point,Sun Jul 12 11:10:28 2015 UTC,"That's a fair enough viewpoint. For us the trade off of less tools and simpler solutions is better for us, for now. We reserve the right to change our collective minds at any time."
ruby,3cs2mo,DrPheltRight,1 point,Sun Jul 12 12:34:21 2015 UTC,"There shouldn't be all that much complexity to writing tests. The need for complex testing tools is generally an indication of poor testing practices, in my experience.  This approach seems to give them much of the benefit of reasoning about features the ""BDD"" way, without having to add an additional dependency to the project. Seems like a reasonable decision to me."
ruby,3cs2mo,realntl,1 point,Sun Jul 12 22:09:12 2015 UTC,Can't view the page.
ruby,3cpz2k,kirikoz,5,Thu Jul 9 21:02:40 2015 UTC,Using shared_examples with block parameters.
ruby,3cpz2k,postmodern,4,Fri Jul 10 00:00:49 2015 UTC,"You can do this in any test framework.  describe Foo do   [1, 2, :apple].each do |parameter|     it ""works with #{parameter.inspect}"" do       result = Foo.new(parameter).some_method       expect(result).to == (parameter ** 2) # example assertion     end   end end"
ruby,3cpz2k,realntl,1 point,Thu Jul 9 21:08:55 2015 UTC,"If you want to program your examples then I prefer to see this done inside the example, rather than when the file is required. Otherwise folks get tempted to start doing other complicated logic at require time.  describe Foo do   it ""works with various parameters"" do     [1, 2, :apple].each do |parameter|       result = Foo.new(parameter).some_method       expect(result).to == (parameter ** 2) # example assertion     end   end end   And it's all just ruby:  describe Foo do   def foo(parameter)     Foo.new(parameter).some_method   end    specify { expect(foo(2)).to == 4 }   specify { expect(foo(4)).to == 8 }   specify { expect(foo(16)).to == 256 } end   Or use shared examples."
ruby,3cpz2k,sj26,2,Thu Jul 9 22:13:45 2015 UTC,I disagree with this.  Looping the it statement gives a much better indication of what failed and why. Also your variant halts at the first failure of expect which can be annoying when refactoring code. Knowing all the situations that failed is often very useful for finding the root cause rather than only knowing the first failure.
ruby,3cpz2k,moomaka,1 point,Fri Jul 10 00:54:06 2015 UTC,You could use the new aggregate failures option to report all the failures within an example
ruby,3cpz2k,darkclark,2,Fri Jul 10 13:25:48 2015 UTC,"Having to learn new, rarely used features makes less sense than just improvising.  I'd rather only commit 20% of the tool that I use 80% of the time to memory. Especially in the case of testing tools, which run the added risk of legitimizing poor testing and design habits by eliminating their pain."
ruby,3cpz2k,realntl,1 point,Fri Jul 10 14:02:27 2015 UTC,"I understand where you're coming from, though I don't entirely agree.  I wanted to share that feature so that people would know that it exists, and therefor can go looking for it if/when they need it - you don't have to commit it to memory.  Is it always the best choice. Nope - but it's another tool you can have in your tool belt. I think it's important to keep learning new stuff, and to explore new features in the tools you use. It could end up improving your code or workflow significantly, and moreover experimenting with these features will give you a better sense of where they may be applicable, or even why you don't like them at all."
ruby,3cpz2k,darkclark,1 point,Fri Jul 10 14:18:33 2015 UTC,How can I continue running other tests if one of the tests fails? Thank you!
ruby,3cpz2k,tf2ftw,1 point,Thu Jul 9 22:24:42 2015 UTC,Put the it statement in the loop
ruby,3cpz2k,realntl,1 point,Fri Jul 10 01:57:15 2015 UTC,"Well, I think the OP wants to write multiple tests that share the same code but different arguments.  I'm more of a test unit afficionado anyways, so I don't really know how to describe this using rspec. But I occasionally write tests like this:  [1, 2, :apple].each do |parameter|   define_method ""test_foo_#{parameter}"" do     # etc.   end end   Because if :apple is only the parameter that causes the test to fail, I can easily run just that test:  ruby test/foo.rb -n test_foo_apple   I believe rspec uses line numbers for this stuff, which makes it effectively impossible to isolate the one failing test, unless you explicitly enumerate each paramater as a distinct test (as in your second example)."
ruby,3cpz2k,sj26,1 point,Thu Jul 9 22:48:24 2015 UTC,Which is why I suggested using a method in the final example. Seems preferable to meta-programming the tests themselves.
ruby,3cqx25,rubycastsio,0,Fri Jul 10 01:35:47 2015 UTC,"Join me in a functional, test driven design session where we discover perfect, abundant, and deficient numbers using Ruby and Minitest!"
ruby,3cnecw,jakubgarfield,1 point,Thu Jul 9 06:45:18 2015 UTC,This seems like a more complicated version of VCR. It also seems extremely messy when you aren't dealing with a nice neat REST API for the external service.  Why would I re-implement an external API when I can just mock responses?
ruby,3cnecw,moomaka,1 point,Fri Jul 10 01:20:47 2015 UTC,"We use VCR in production and I would recommend it for small projects. One of the painful parts about VCR is having to re-record complex interactions, especially with old tests. In these cases it seems easier to me to just mock the API. Still I would agree that creating a Sinatra app as the example in the post shows is probably more overhead than I would personally care for. I'd probably just mock out a class and disregard the request/response altogether, but it might just be that I'm lazy :)"
ruby,3cnecw,jb3689,1 point,Fri Jul 10 22:22:01 2015 UTC,"VCR records requests to the real API. If the API isn't available, or if you're just test-driving your own adapter like in the article VCR would be of no use. However I do prefer the VCR way: if you write your tests carefully - so that they test format, not content - you can delete the cassettes from time to time and check the APIs haven't changed. This is impossible with mocks and they might lead to false positives."
ruby,3cnecw,metalelf0,1 point,Mon Jul 13 08:19:51 2015 UTC,"If the API isn't available, or if you're just test-driving your own adapter like in the article VCR would be of no use.   VCR cassettes are just yaml, I routinely modify them by hand rather than using the recording functionality."
ruby,3cmgix,eleven8ster,4,Thu Jul 9 01:27:48 2015 UTC,"We don't really know what parts of the exersize you're talking about becuase we're not looking at it, can you link to the relevant chapter online or something? Or, really, paste in some code that confuses you? ""Where the value for the key is coming from"" -- not sure what you mean, paste some code and ask about it?   Edit Looking at the Dict code at the end of the the exersize, on first skim it confuses me, and I've been writing ruby for 7 years or so, and am not generally confused by Hashes. I'm sure I could figure it out by spending some time I don't care to spend and reading the next section where he explains the code, but perhaps it's not a great example for a beginner. Perhaps it makes more sense in Python, which I think the 'learn the hard way' was basically 'ported' from by the author. I'd just ignore that particular code -- do you think you understand Hashes? If so, move on, if not find another resource to explain them."
ruby,3cmgix,jrochkind,1 point,Thu Jul 9 11:57:55 2015 UTC,"Edit Looking at the Dict code at the end of the the exersize[1] , on first skim it confuses me, and I've been writing ruby for 7 years or so, and am not generally confused by Hashes. I'm sure I could figure it out by spending some time I don't care to spend and reading the next section where he explains the code, but perhaps it's not a great example for a beginner.   I'm not sure what is confusing about it. The Dict code is the standard way to implement a hash-map, it looks about the same in every language and is the way it would be taught in an intro to data structures class."
ruby,3cmgix,moomaka,1 point,Thu Jul 9 13:20:16 2015 UTC,"Is an intro to data structures class usually the first exposure to any programming at all for the students?    It wasn't for me, I had been programming for years already. (Also my data structures class was in Scheme, and I can't recall if we wrote our own hash map, I don't think so). I agree it's good to know how to write a hash-map, but it's not something most programmers will have to do ever, and in my opinion it's not a good thing to include in a first how to program for non-programmers course -- and certainly not without some more background lecture or material about why it's like that.   But obviously opinions will vary. That's cool you don't find it confusing.  My opinion remains that someone who has never programmed before and is going through 'learn ruby the hard way' shouldn't be too concerned if they find it confusing -- but should still understand how to use the existing stdlib Hash and what it's functions and performance features are -- that is, everything before the ""Making Your Own Hash Module"" section in that chapter, as well as the following sections ""When to Use Hashes or Arrays"" and ""Study Drills""."
ruby,3cmgix,jrochkind,1 point,Thu Jul 9 15:27:45 2015 UTC,"The basics of how a HashMap works was taught in my intro to CS course. Data structures classes went deeper into the design tradeoffs.   what it's functions and performance features are   It's hard to talk about the performance of a HashMap without bullshiting it unless you talk about the implementation at least enough to define what a load factor is, which is about the depth that this exercise's code goes."
ruby,3cmgix,moomaka,1 point,Thu Jul 9 22:18:06 2015 UTC,"Okay, in that case anyone that finds that section confusing is clearly doomed to never be a programmer?"
ruby,3cmgix,jrochkind,2,Thu Jul 9 23:18:34 2015 UTC,"I said nothing of the sort. You've been writing Ruby for 7 years, if you find it confusing, that's your issue.  I just don't consider it to be this horrifically challenging material you make it out to be. Even the preface to that section indicated it would be more complicated than previous code presented and that the reader may need to look up a couple things, I don't see the problem with that."
ruby,3cmgix,moomaka,2,Fri Jul 10 03:53:45 2015 UTC,"Oh, you're just trying to make me feel stupid, not the beginners. Okay, that's cool."
ruby,3cmgix,jrochkind,1 point,Fri Jul 10 12:26:11 2015 UTC,"I think /u/moomaka is having a bad day! This is not simple. There are multiple pieces of info you need to keep in your head and piece together. Enough pieces of info that it will push your brain to the limit. Anyone's brain. Once I figure out each function and get a better grasp on hashing, this will still be difficult!"
ruby,3cmgix,greedo80000,1 point,Fri Jul 10 12:37:40 2015 UTC,"I was hoping for a response like this. I read it some more while on break at work today and it was coming to me a bit. I think I'm going to get it....there are so many functions that contain functions it's easy to lose track of what is happening. Also, I looked up the .set method in the ruby documentation and misinterpreted that the .set was referencing the module. This is really hard but I'm not giving up."
ruby,3cmgix,firstmanonearth,2,Fri Jul 10 00:32:38 2015 UTC,"I don't really have much experience with that book, but I do find if a particular learning resource isn't working for me, I will seek out other resources to help me learn the same concepts.  To address your particulars:   I don't understand where the value for key is coming from.   You'll have to be more specific. Are you asking how to, given a hash key, return a value? I've read through the exercise and there a lot of keys and values.   default=default   I think this is a verbose piece of code. I think it simply means 'default'. So #get receives a parameter named 'default'  (evaluated to nil if none is provided when #get is called), and that value is passed to #get_slot when it is called. Consider:  def some_method(arg1, arg2, arg3)    return arg1, arg2, arg3 end  some_method(1, 2, 3)      #=> [1, 2, 3]     some_method(1, 2, blah=3) #=> [1, 2, 3]   Since I am a beginner myself, forgive me as my explanation could be totally wrong. Can anyone more experienced weigh in?"
ruby,3cmgix,tadrinth,2,Thu Jul 9 03:36:06 2015 UTC,"http://ruby-doc.org/core-2.2.0/Hash.html https://en.wikipedia.org/wiki/Hash_table  Could you ask a specific question?  The ""default=default"" part is pointless. If you wondering about named parameters to methods, read https://robots.thoughtbot.com/ruby-2-keyword-arguments"
ruby,3cmgix,Vshan,2,Thu Jul 9 05:04:45 2015 UTC,"I think this is a typo, and should say 'default', not 'default=default'; the code still works because assigning default to default doesn't do anything:     i, k, v = Dict.get_slot(aDict, key, default=default)  I think you can probably skip understanding his Dict implementation for now.  You may want to read up on some theory about how Hashmaps/dicts are usually implemented at some point, then go back and try to understand his implementation. There are some potential gotchas to Hashes that you may have a hard time following if you don't know how they work under the hood, but those are mostly an issue if a hash is implemented poorly; Ruby comes with a very solid implementation of them that avoids most of those, so I would just use the built-in methods."
ruby,3cklyi,PragTob,1 point,Wed Jul 8 17:20:29 2015 UTC,I would love to use jruby more but the slow start is too frustrating for me.
ruby,3cklyi,mrjiels,2,Thu Jul 9 09:43:54 2015 UTC,yeah it's a real pain in development for running specs :( Here is a a list of ways toimprove startup time - there is also a spring like thingy for rails theine
ruby,3cklyi,-Ch4s3-,1 point,Thu Jul 9 10:34:48 2015 UTC,"We just run mri locally, and use CI to make sure jRuby doesn't have any issues with the code before we deploy."
ruby,3cklyi,maq0r,1 point,Fri Jul 10 22:09:39 2015 UTC,I love JRuby. When some vendors provide java jars as libraries I switch to JRuby to implement and use them. Multi threading is good too!!
ruby,3cklyi,dziulius,-3,Wed Jul 8 18:43:14 2015 UTC,And the font looks just terrible
