crypto,3e54w7,GoPlayTagPro,7,Wed Jul 22 01:02:35 2015 UTC,"but it seems that ISPs could just block any encrypted connection that isn't ""signed"" by a government approved organization such as banks.   How do they spot an encrypted connection (or at a deeper level, how do they spot someone sending nested encryption over a signed link they think they control)? What if I want to send a bunch of pre-rolled random numbers to my friend so that we can synchronise some game we're playing?  Blocking such transmissions without rendering the internet useless is almost certainly beyond even AI-complete difficulty."
crypto,3e54w7,TNorthover,2,Wed Jul 22 02:27:03 2015 UTC,"Thank you, this is reassuring."
crypto,3e54w7,JBu92_work,1 point,Wed Jul 22 02:34:42 2015 UTC,"Depends on a couple of things. If the government in question was willing to take the necessary action to dissuade its residents from using it, and had enough control over the network itself within their borders, and were willing to devote the necessary resources to detecting it, sure, a government could eradicate the use of crypto on the internet by its own citizens."
crypto,3e54w7,user_doesnt_exist,1 point,Wed Jul 22 01:12:01 2015 UTC,"Totally disagree - there is no way a government could stop people from using cryptography and have the internet still exist. You could hide encrypted text in just about anything and have it completely undetectable to anyone in the middle.   Lets assume the most draconian type of 'banning encryption' possible - where users are only allowed to send plain text to one another and everything else is banned.  You could take a locally encrypted binary string (that was encrypted with strong encryption) and hide it in plain ascii, pick characters who's last bit match the bit you want to send. Each binary character would be encoded into a single character and it would be pretty simple to make the ascii say something readable and also decrypt it on the far end."
crypto,3e4g7q,johnmountain,4,Tue Jul 21 21:50:02 2015 UTC,"People still allow password auth over SSH?  The first thing I do when I set up an SSH server is configure it for ""ed25519 pubkey or GTFO"" mode."
crypto,3e4g7q,justusranvier,1 point,Tue Jul 21 22:07:05 2015 UTC,"PubKey only  Problem solved.  If you don't want to use keys, then throw port knocking of a few ports in front of the SSH port and you shouldn't have an issue."
crypto,3e339o,tom-md,1 point,Tue Jul 21 16:13:23 2015 UTC,@hashbreaker:   2015-07-21 05:40:33 UTC  Python script to help compare CFRG signature proposals: ed25519.cr.yp.to Posting to list failed silently; blocked? server overloaded?     [Mistake?] [Suggestion] [FAQ] [Code] [Issues]
crypto,3dz285,R-EDDIT,10,Mon Jul 20 18:16:17 2015 UTC,"Why, oh why, did they have to use a reduced round AES.   Now rather than using the fast, optimized, tested, implementation provided by the OS, I have to write my own slower, buggier, custom version.  From an implementation and trust point of view, I liked that Scrypt is simply PBKDF2 with an expensive way of generating salt. I get to use an OS supplied primitive. And no matter what, it is at least as secure as PBKDF2 with the original password and salt.  With this, there is no existing primitive I can use.  And they need to, quickly, define a good string serialization format.  $ar2$400409....   I don't like the fact that the ""secret K"" is stored in another place. The virtue of Bcrypt/Scrypt is the ease of implementation because it's self contained.  They don't specify how many bytes I should be generating for password storage. Most Scrypt implementations output 64 bytes, for no particular reason than 256 bits is more than enough - so double that (64 bytes) must be ever better.  Simplify. Standardize. Specify the unknowns. Otherwise we'll have to come up with our own incompatible versions (c.f. Scrypt implementations)    Edit: I wanted to clarify some things. Scrypt is basically still PBKDF2 as a key-derivation function, but uses their own custom memory-hard algorithm (BlockMix + ROMix + Salsa/8) to generate the salt that you feed into PBKDF2:  https://i.imgur.com/6RrXnqU.png  This is extraordinarily useful, because it lets us re-use existing, optimized, trusted, operating system provided, hardware accelerated, algorithms for some grunt work. This leaves Scrypt/Argon2 to focus on their own task: memory-hard custom hashing.  Internally the Scrypt magic is:   BlockMix which is a wrapper around ROMix which is a warpper around Salsa/8   And all that had to be custom implemented, and hand optimized. That's fine, and that's OK. And if Argon2 has their own primitives, that's fine too:  https://i.imgur.com/CzyZxsG.png  The only thing that caught my eye in their custom stuff was how they used AES somewhere in there. Which is great; one less thing for me to write! Except no. It's a custom, reduced round variant of AES   FUCK!"
crypto,3dz285,JoseJimeniz,7,Tue Jul 21 03:17:46 2015 UTC,"In the coming months we'll freeze the design and propose fixed parameter sets for specific use cases, as well as test vectors, reviewed code, recommended representation."
crypto,3dz285,_veorq,4,Tue Jul 21 10:02:12 2015 UTC,"Why, oh why, did they have to use a reduced round AES.   This is incorrect. Argon did use AES as a building block, but Argon2 does not use AES anywhere. It uses Blake2b instead."
crypto,3dz285,pnKYe4IIA,2,Tue Jul 21 17:39:20 2015 UTC,"There's no point in using full-round primitives internally, they're overkill for security and too slow.  PBKDF2 in scrypt is also not used for meaningful security or performance:   I don't use PBKDF2 for any computational hardness; rather, it's a safe way to spread entropy around.   Using PBKDF2-HMAC-SHA256 just because it was standard and well-trusted actually introduced an unintended side-effect that, while most likely harmless, isn't something you want to see."
crypto,3dz285,floodyberry,1 point,Tue Jul 21 23:02:57 2015 UTC,"@solardiz   2014-03-12 10:05 UTC  scrypt(PBKDF2-HMAC-SHA256-fail-affects-scrypt-no-security-issue-bGoDFpr8) = scrypt(;B3nR6wQ2-\_LSg""mH \#yszm[#z8B&L) for any salt, N, r, p     This message was created by a bot  [Contact creator][Source code]"
crypto,3dz285,TweetsInCommentsBot,1 point,Tue Jul 21 23:03:02 2015 UTC,"There's no point in using full-round primitives internally   Except now i have to write them, rather than relying on other, tried, and true, tested, FIPS, optimized, fastest, implementations."
crypto,3dz285,JoseJimeniz,1 point,Wed Jul 22 00:40:25 2015 UTC,"With this, there is no existing primitive I can use   If you insist on using existing primitives, you could take a look at some other finalists: Parallel, battcrypt or  yescrypt.  You could also build you own instance of Catena. Catena with SHA512 is already supported by Catena-Variants: https://github.com/medsec/catena-variants  Full Disclosure: I have worked on the implementation of Catena(-Variants).  Hopefully we will see Argon2 being provided by the OS in the future.   With this, there is no existing primitive I can use.   Scrypt's way of ""hashing"" is also rather funky. It is kind of hard to reach a reasonable memory fill rate with regular hash functions or other cryptographic primitives without neglecting diffusion."
crypto,3dz285,funkysash,3,Tue Jul 21 12:00:54 2015 UTC,"Scrypt's way of ""hashing"" is also rather funky. It is kind of hard to reach a reasonable memory fill rate with regular hash functions or other cryptographic primitives without neglecting diffusion.   You misunderstand my meaning. Scrypt, in many ways, is simply PBKDF2_sha256:  http://i.imgur.com/6RrXnqU.png  And so Argon-2, or any other variant, can use the same mechanism:  http://i.imgur.com/CzyZxsG.png  And when i said that it should use standard cryptographic primitives, i didn't mean draconian ""nothing but standard stuff"". I meant use PBKDF2 for the final task of generating bytes.  I also was referring to the fact that Argon internally uses AES, but a reduced round variant. Don't use a reduced round variant, use the normal variant.  They can continue to use their custom hashing, memory avalanche, mixing, fast memory fill custom hashing algorithm. But when it comes times for me to have to perform AES make it the AES that i can access from either the CryptoAPI or CryptoNG api (or .NET if i was in C#).  Same can be said of any key derivation algorithm. I didn't look at anything but Argon. But i assume they are all Key Derivation functions, rather than (strictly speaking) password hashing function. For all of them you can use PBKDF2, but use your custom, expensive, way of generating salt.  It's kind of like how Bcrypt is a modified blowfish. Which means i had to write a Blowfish implementation, and then have a parallel almost blowfish implementation.   Rather than being able to use existing AES, for an AES operation, i would not be able to use AES, becuase i have to create a custom AES."
crypto,3dz285,JoseJimeniz,2,Tue Jul 21 13:35:55 2015 UTC,"I meant use PBKDF2 for the final task of generating bytes.   Imho PBKDF2 is to complicated for that part. Generating keys from password hashes requires only a simple loop and a regular hash function. No need for additional dependencies and unnecessary operations. If the password hashing function is broken, the security will be reduced to the security of the hash function. I don't think the HMAC construction of PBKDF2 adds any additional security in this area.  If you still want to use PBKDF2 you can of course just compute a regular password hash into and then generate keys from it by using PBKDF2.   custom, expensive, way of generating salt   I'm not sure if we should use the word salt here. Because salt implies a public value. Using the output of the memory hard function as the salt parameter of PBKDF2 also has the disadvantage of requiring an additional passphrase(first parameter of PBKDF2). If this passphrase is the password or a direct derivative, an attacker can gain a significant advantage when being able to read parts of the memory (remember heartbleed).The way scrypt does it, makes it vulnerable against garbage collector attacks: https://eprint.iacr.org/2014/881   Rather than being able to use existing AES, for an AES operation, i would not be able to use AES, becuase i have to create a custom AES.   Ah, I see. Sorry, I have no idea why they reduced the rounds."
crypto,3dz285,funkysash,1 point,Tue Jul 21 14:47:28 2015 UTC,"custom, expensive, way of generating salt   I'm not sure if we should use the word salt here. B   It's ""salt"" in the sense that it generates the salt input to PBKDF2."
crypto,3e2b2x,ttk2,1 point,Tue Jul 21 12:20:05 2015 UTC,"It says right on the page: ""Easiest way: use OpenSSL::Cipher and give it AES-128-ECB as the cipher.""  So yea, I guess you can go ahead and use a library. However, personally I think implementing AES is a nice exercise, and knowing how AES works (not necessarily why) is pretty nice! It might seem a bit daunting at first, but it's really not too bad once you've understood what each component of the cipher does.   If you do decide to implement AES, feel free to ask questions!"
crypto,3e2b2x,Quibbler2412,1 point,Tue Jul 21 14:39:18 2015 UTC,"I spent a few hours going over the AES spec.   It's not looking quite as daunting as it did at first, especially with a better understanding of the sbox and the key schedule.   I think I'll switch to C for the implementation. Haskel has a lot of nice features but straight but manipulating will probably be better."
crypto,3e2b2x,disclosure5,1 point,Tue Jul 21 15:14:57 2015 UTC,"The first set is described as ""relatively easy"", and that's not a phrase I'd use when implementing AES from scratch. Based on this, I recommend using a library. There will be enough challenges in this suite."
crypto,3dyov4,speckz,4,Mon Jul 20 16:43:56 2015 UTC,I feel like there should have been a discussion of the DUAL EC backdoor as well
crypto,3e0d4g,monsieur7,9,Mon Jul 20 23:59:31 2015 UTC,https://www.schneier.com/crypto-gram/archives/1998/1015.html#cipherdesign
crypto,3e0d4g,user_doesnt_exist,2,Tue Jul 21 01:38:07 2015 UTC,"Thanks. Will read.  EDIT: 1998 ftw, lol. So it looks like I just have to attack my cipher in all the ways that matter, and go from there. Also, I'm scared I'll find an algorithm like mine already in existence, I don't wanna look, haha. Is there a list of non-Feistel block ciphers somewhere?  EDIT 2: Ohh shiiiit I just noticed the link at the end. Thank you a thousand times."
crypto,3e0d4g,rosulek,9,Tue Jul 21 03:51:00 2015 UTC,"So you've designed a new crypto thingy. If your goal is to learn something, then you've probably already succeeded. If your goal is to get people who matter to care about your crypto thingy, then you need to know 3 things.   If you don't have a good reason to believe that your crypto thingy is secure, nobody who matters will care. (importantly, it's your job to make a positive case for security, no one has an obligation to break your crypto thingy for you) If your crypto thingy is not novel, nobody who matters will care. If your crypto thingy is not an improvement in some way over the state of the art, nobody who matters will care.   Until these 3 things are addressed, any attempt at publicity/impact is guaranteed to fail.  In your case, you wrote:   I have next to no cryptanalysis skills and my math abilities are just okay.   ... so it sounds like you are not equipped to explain why (or even know whether) your idea is secure. In my opinion, your energy would be better spent working on this than on publicity."
crypto,3e0d4g,cunttard,1 point,Tue Jul 21 02:23:10 2015 UTC,"That's why I'm writing the paper. I wouldn't publish a shitty paper anymore than I would download a car. If I have a good paper in hand, then by definition I've already made my case. And I'm chasing AES, which is tough, but there are disadvantages to it for sure, which hopefully my algorithm won't share."
crypto,3e0d4g,cunttard,8,Tue Jul 21 03:48:58 2015 UTC,"I'll just throw a few thoughts out there:  Before you write anything, it is good to understand provable security. A good starting point for anyone serious in cryptography is Introduction to Modern Cryptography by Katz and Lindell.  Then you'll want to read existing publications and designs of block ciphers.  If you're coming up with a new block cipher, it is strongly advisable that you read The Design of Rijndael, which discusses what is considered the state of the art in block ciphers (also doesn't use a Feistal structure).  As for presenting your ideas as an academic publication people tend towards using Latex. Here is a good IDE. You can then publish on arxiv or iacr."
crypto,3e0d4g,cdaleyyyyylmao,1 point,Tue Jul 21 01:35:33 2015 UTC,"Nice, thanks. I have a lot of math ahead of me."
crypto,3drlgl,jeffkthompson,5,Sat Jul 18 19:55:16 2015 UTC,ent isn't useful for evaluating a PRNG
crypto,3drlgl,floodyberry,1 point,Sat Jul 18 20:33:36 2015 UTC,No? I thought that was it's purpose.
crypto,3drlgl,DoWhile,3,Sat Jul 18 20:41:31 2015 UTC,"It's one-sided, meaning that failing = bad PRNG, and passing means nothing. All poly-time randomness tests are like this, by definition of what a good PRNG should be.  There are bad PRNGs (such as Mersenne Twister) that pass these tests.  Think about it like this. You want to find out if some player is in the NBA.  You ask them to dunk a basketball: if they can't, you can answer no, but if they can, that doesn't really help."
crypto,3drlgl,DoWhile,1 point,Sat Jul 18 20:49:33 2015 UTC,"Hmm, maybe I'm really misunderstanding something. Yes, passing one test does not a good PRNG. But passing many of these tests should give an indication of quality, right? In your basketball analogy: dunking doesn't mean they can play, but it's one good indicator."
crypto,3drlgl,DoWhile,1 point,Sat Jul 18 21:02:02 2015 UTC,... and where would dieharder fall into this? Same or in some way different?
crypto,3drlgl,TNorthover,3,Sat Jul 18 21:02:42 2015 UTC,"The definition of a good PRNG is that if you give it a uniformly random input, then the output is indistinguishable from uniform randomness against any poly-time adversary.  This means that any test you can come up with that runs efficiently will not be able to distinguish a good PRNG from true randomness.  Any test.  Even ones that don't exist out there yet.  So yes, it's a good indicator that the PRNG is probably good enough for casual use, but is far from solid proof of security.  The fact that a good crypto student can come up with a randomness generator that passes all the popular randomness tests, yet is insecure, should give you a sense of how much confidence you should put in these tests."
crypto,3drlgl,TNorthover,1 point,Sat Jul 18 21:14:11 2015 UTC,"Hmm, so what would give me that confidence, a formal mathematical proof? If so, what really is the purpose of ent, diehard, etc?"
crypto,3drlgl,DoWhile,3,Sat Jul 18 21:25:17 2015 UTC,"Hmm, so what would give me that confidence, a formal mathematical proof?    Basically, yes.  Of course, all mathematical proofs are conditional as PRNGs necessitate P not being NP.   If so, what really is the purpose of ent, diehard, etc?   IMO, to screen out trivially bad sources of randomness and pseudorandomness, and perhaps pinpoint where the failure comes in from.  This is stated explicitly on the NIST website about what their goals are (emphasis mine) regarding the tests they made:    The three primary goals were: (a) to develop a battery of statistical tests to detect non-randomness  in binary sequences constructed using random number generators and pseudo-random number generators utilized in cryptographic applications, (b) to produce documentation and a software implementation of these tests, and (c) to provide guidance in the use and application of these tests."
crypto,3drlgl,DoWhile,1 point,Sat Jul 18 21:37:23 2015 UTC,"So, re-wording the original question (with the caveat that passing any test isn't proof of anything): what would a failing value be for these tests?"
crypto,3dn1ab,BenRayfield,8,Fri Jul 17 16:28:35 2015 UTC,NIST Cryptographic Algorithm Validation Program (CAVP) has bit oriented SHA test vectors.  Description: The Secure Hash Algorithm Validation System (SHAVS)  Data files: shabittestvectors.zip
crypto,3dn1ab,martins_m,2,Fri Jul 17 19:03:30 2015 UTC,"How about grabbing a bit implementation and generating tests so you can at least gain some confidence in equality.  Better yet, if your code is C or Java it shouldn't be hard to prove equality with a specification like Cryptol."
crypto,3dn1ab,tom-md,1 point,Fri Jul 17 17:24:05 2015 UTC,"It would be non-standard if hash of 1binary is not the same as 01hex, or 80hex.  I'm not sure what the spec is, but it sounds as though it is 0x80, while you want your code to produce 0x01?"
crypto,3dn1ab,Godspiral,2,Sat Jul 18 05:21:27 2015 UTC,"The hashes for 0b1, 0x01 and 0x80 are all different."
crypto,3dn1ab,tom-md,1 point,Sat Jul 18 18:12:07 2015 UTC,then can't be standard with implementations that ignore datatype?  Not sure I see a point in having a hash function support boolean array data types that is different than how the caller would coerce booleans into standard byte types.
crypto,3dn1ab,Godspiral,1 point,Sat Jul 18 21:14:17 2015 UTC,"https://en.wikipedia.org/wiki/SHA-2 explains the 0x80 is a combination of appending a 1 bit then padding with 0s to a certain length, followed by length in bits.   Pre-processing: append the bit '1' to the message append k bits '0', where k is the minimum number >= 0 such that the resulting message length (modulo 512 in bits) is 448. append length of message (without the '1' bit or padding), in bits, as 64-bit big-endian integer (this will make the entire post-processed length a multiple of 512 bits)"
crypto,3dn1ab,untitleddocument37,0,Mon Jul 20 04:09:33 2015 UTC,Why bother?
crypto,3dn1ab,untitleddocument37,1 point,Sat Jul 18 15:56:31 2015 UTC,"For AI research I am calculating in bits so theres no extra possible paths for the AI to have to understand. I'm using immutable binary forests that all end at the same node which may be a lisp nil. I use () as nil, (()(()())) as 0/false, and ((()())()) as 1/true, at an abstract level thats actually stored as an acyclic network without duplicates. I also have an AVL tree based bitstring software called wavetree. I am exploring things similar to huffman compression trees and queue automata. There are many research paths that involve the direct use of bits, so I want a way to name bit strings by a secureHash."
crypto,3dpeec,cissphopeful,13,Sat Jul 18 04:17:40 2015 UTC,"If someone steals the data they need both the code and the keys and how we assign the keys. So protect the code.   Doesn't this violate Kerckhoff's principle?  There's so many missing details in the description of your post that at best it's unnecessary, and at worst is completely broken.    If standard MS-SQL encryption suffices, use it and use it correctly.  If not, then you need to really, really vet your encryption scheme with cryptographers and security analysts."
crypto,3dpeec,DoWhile,1 point,Sat Jul 18 05:14:07 2015 UTC,"The model being describes at the very least is useful insofar as it means that SQLi is unlikely to disclose the contents of the database in a usable format. If an attacker gets both the database and the code, then they're still gonna have a bad time.  Some idea of what OP is trying to protect would probably be useful. The scheme described does sound rather convoluted."
crypto,3dpeec,rya_nc,1 point,Sat Jul 18 06:38:30 2015 UTC,Sounds like they want to keep the data secret from the backend.
crypto,3dpeec,Natanael_L,8,Sat Jul 18 11:18:10 2015 UTC,"Isn't this just essentially like having a 10bit key?  I think im missing something here, if all the keys are stored in plaintext, then essentially the key assignement indices is the new key (in your example the key is essentialy ""5800""  (key1*1000+key2, 5*1000+800)  which is basically a keyspace of just a few bits.  Super easy to brute force in no time at all."
crypto,3dpeec,MacroMeez,2,Sat Jul 18 07:06:07 2015 UTC,"This is real issue.  But then we have to get into the question of what problem is he trying to solve? Why is the data being encrypted in the database?  If the concern is someone stealing customer data from the database, then it's not really secure; since anyone stealing the data is given the keys. It certainly is a defense in depth; an attacker will have to go though the additional step of knowing the algorithm. But once they know the algorithm, the data is trivially decrypted.  If the goal is to stop the website process account from being able to read  unencrypted data, then that would do it. If you don't grant select access to your keys table, then the website process account would be unable to know what the keys are. That way all encryption has to happen either at the client's site. Again, it is only a defense in depth mechanism: it stops the intermediate website hosting process from seeing an encrypted data.   Which certainly does have a value, I suppose."
crypto,3dpeec,JoseJimeniz,2,Sat Jul 18 12:10:57 2015 UTC,"I personally think it would be overkill.  MS-SQL has a pretty good grasp on encryption.  The concept is ok, but effectively unnecessary."
crypto,3dpeec,jeffrey_f,1 point,Sat Jul 18 04:36:54 2015 UTC,"Thanks, appreciate the quick response."
crypto,3dpeec,rflownn,2,Sat Jul 18 04:40:39 2015 UTC,"It sounds at its basics just like a key schedule, where the key distribution is 'secret': K_1 -> (secret sauce) -> K_n  This isn't really 'baked' into the product, but sounds like another abstraction on top of existing technologies and seems to operate more like proxy."
crypto,3dpeec,mpdehnel,2,Sat Jul 18 07:09:25 2015 UTC,"Have a read of this article as well. Doesn't quite answer your question, but I think it's essential reading for anyone attempting to make decisions in this sphere of work."
crypto,3dpeec,Natanael_L,2,Sat Jul 18 08:23:53 2015 UTC,Your key derivation method sounds very insecure. Why not scrypt? No random IV? No mention of cipher modes?
crypto,3dpeec,poopinspace,1 point,Sat Jul 18 11:14:58 2015 UTC,Why not use something that was specifically thought for that kind of problem? Homomorphic Encryption  Look at CryptDB https://css.csail.mit.edu/cryptdb/
crypto,3do1aw,zeekyx,3,Fri Jul 17 20:58:15 2015 UTC,"Yes, you can save the ISO anywhere you want."
crypto,3dhi2t,MillerewdBentley,3,Thu Jul 16 08:58:27 2015 UTC,"The OPM breach was a wake-up call for the federal community that they can no longer selectively comply with the findings of security audits which show security flaws in their network.   Having dealt with security auditors, i can say that blinding following the recommendations of an auditor weakens security.  You have to intelligently decide for yourself which audit results are make things safer. Auditors do not care about security per se. And auditor is there to audit, and compare what you do with a clipboard full of checkboxes.  It's atrocious how many people blindly follow the suggestion to create a special domain account with rotating passwords, rather than using the built-in, least priviliege LocalService account (an account with fewer rights than a non-adminstrator).  It's atrocious how many people blindly follow the suggestion of password complexity and password age requirements; causing passwords to written and and easier to guess."
crypto,3dhi2t,JoseJimeniz,1 point,Thu Jul 16 23:06:58 2015 UTC,"i can say that blinding following the recommendations of an auditor weakens security.   Absolutely - especially if they are the ""Nessus scan and be done"" type of auditor. These are much more common then they should be but most execs are clueless and real security audits cost a decent amount of money so these guys slip under the radar for far longer than they should.   You have to intelligently decide for yourself which audit results are make things safer.   If only it were always up to the IT staff.."
crypto,3dhi2t,sfw247,2,Fri Jul 17 14:18:20 2015 UTC,"It's apparent that:   Internal cross-organizational breaches were readily available as well as non-organizational breaches through contractors. The system was exploitable through malware because of point 1.   The adversaries have all the leverage right now and the US is in full defense and recovery mode.   Even if it is a state actor, the state actor simply needs to masquerade through profit-gain. The lone-actor simply needs to sell to the states. All or a significant amount of people granted security clearances were identified and at risk. Given that the US' LE funding and practices are outdated and incapable of completely coping, there may be significant losses in one form or another. Because of point 2, their adversaries can now influence their own domestic policies and law enforcement in a very powerful manner without even being identifiable. Adversaries may have already ""set their pieces"". If the US has to 'reboot' their security personnel in some respects, the adversary may have already set their piece or can move very quickly to do so with point 2 and 3.   The damage to the US security infrastructure may be lasting for atleast a decade imo."
crypto,3dhi2t,rflownn,2,Thu Jul 16 15:13:04 2015 UTC,"Not only this but I doubt the organizational and cultural problems of Gov. IT are going to be addressed (let alone solved) in any meaningful way. Between laughably outdated technology, unrealistic lifestyle sacrifices/expectations, generic bureaucracy problems, and no chance of competing with private industry salary...."
crypto,3dhi2t,sfw247,2,Thu Jul 16 15:56:34 2015 UTC,"In my opinion, it was a serious mistake to even try to blame place on China because of what it entails when they could not provide proof. The way the FBI handled it, and how the government security executives are handling it by pointing their finger at China brings up the question if they are hiding very serious internal fragmentation issues in their security and military sector. On top of that, it just made them look incompetent and just following the dog whistle."
crypto,3dhi2t,rflownn,1 point,Thu Jul 16 18:04:14 2015 UTC,"On a scale of 1 to 10, what is the probability that at some point during the next ten years an Oscar-winning ""based on a true story"" movie will begin with a narration describing this breach?"
crypto,3dhi2t,elverloho,2,Thu Jul 16 20:30:30 2015 UTC,"Hollywood is so out of touch and irrelevant, their making of a movie or winning an ""Oscar"" isn't even remotely relevant."
crypto,3dhi2t,rflownn,1 point,Thu Jul 16 20:34:50 2015 UTC,"""There may be significant losses in one form or another.""  So you mean dead people?"
crypto,3ddn9g,omegga,5,Wed Jul 15 13:23:51 2015 UTC,"Pushing 3DES I can understand. DES and its variants have been thoroughly cryptanalysed and still secure when used right, but RC4? Its time we put it to rest already."
crypto,3ddn9g,angryfuck,1 point,Thu Jul 16 01:09:19 2015 UTC,I thought DES was weak and broken?
crypto,3ddn9g,zxLFx2,3,Thu Jul 16 21:10:53 2015 UTC,"Using DES just once is bad. 3DES applies it 3 times and gives roughly twice the key width of an ideal DES (yes, 2 not 3: you mostly thwart DES's real attacks but open yourself up to a meet-in-the-middle).  That's adequate margin for most purposes (roughly, it gives 112 bits but AES gives 126), but 3DES is much slower than alternatives with similar security.  So in some circumstances you can justify 3DES (hardware makes it faster), but RC4 not so much."
crypto,3ddn9g,TNorthover,1 point,Fri Jul 17 04:01:34 2015 UTC,"Single DES is like a single layer brick wall of tiny bricks (56 bit key strength). However, the individual bricks are very strong (you actually get very close to 56 bits effective key strength forth DES). So what do you do? Add more layers. 3DES has an effective key strength of 112 bits given a fairly large amount of storage available to the attacker, and that's far above what anybody are capable of our will be capable of anytime soon.   Of course AES represents even stronger bricks despite being lighter than a 3DES brick wall."
crypto,3ddn9g,Natanael_L,8,Sat Jul 18 11:24:37 2015 UTC,"Wouldn't the victim have to be sitting on the website for 75 consecutive hours in order for this to work?  If so, this strikes me as an unrealistic situation."
crypto,3ddn9g,Sector95,8,Wed Jul 15 16:34:14 2015 UTC,"75 hours at 4450 requests/second or 230.1 messages. I suppose it's feasible for long-term surveillance, but not yet for malicious-coffeshop-wifi style attacks.  OTOH, 2 years ago the best attack needed 233.7 messages (2000 hours @ 1700 requests/second). It's only going to get more feasible in the future. We need to finally get rid of RC4 before it's entirely broken."
crypto,3ddn9g,Creshal,2,Wed Jul 15 16:55:33 2015 UTC,"To successfully decrypt a 16-character cookie with a success probability of 94%, roughly 9⋅227 encryptions of the cookie need to be captured.    Which is actually >230 messages. Is there a particular reason why they chose to write it as  9⋅227 ?  EDIT: didn't read the QA. It's stated there that a previous attack needed 13⋅230 messages, so it's less indeed."
crypto,3ddn9g,maetthu,1 point,Wed Jul 15 19:41:08 2015 UTC,"Fixed the exponents, sorry for the confusion. No idea why they wrote it that way."
crypto,3ddn9g,Creshal,2,Wed Jul 15 20:11:36 2015 UTC,It can be a valid and practical attack against high-volume APIs.
crypto,3ddn9g,GahMatar,2,Thu Jul 16 19:15:36 2015 UTC,"Isn't the idea to capture a session cookie?  Most APIs I'm familiar with don't utilize session cookies, but I could be wrong.  I suppose it could be targeted against the API key though, since chances are it won't ever change...  Interesting.  That said, you'd have to watch that client for a loooooong time to make that work."
crypto,3ddn9g,Sector95,1 point,Fri Jul 17 16:51:41 2015 UTC,Pwn a router in their network and you might be able to
crypto,3ddn9g,Natanael_L,1 point,Sat Jul 18 11:20:05 2015 UTC,"Nope, generating and capturing the requests can be spread out over time. So there's quite some flexibility when performing the attack."
crypto,3ddn9g,Creshal,5,Wed Jul 15 18:02:46 2015 UTC,Although it'll obviously be rendered useless once the (e.g. session) cookies change.
crypto,3ddn9g,Sector95,1 point,Wed Jul 15 18:29:40 2015 UTC,"This was my thought too.  Unless you get it in one active session, there's no guarantee that the cookie won't expire.  Further, if the cookie changes, the timer starts over at zero, since they are looking for static data to crack the encryption."
crypto,3ddn9g,0x616e746f6e,1 point,Fri Jul 17 16:46:08 2015 UTC,"I am having some trouble with this sentence ""When the victim visits an unencrypted website, the attacker inserts malicious JavaScript code inside the website."". Doesn't this presume then that the target will be visiting a website over plain old HTTP? In other words, if a site just enforces HTTPS for the entire site doesn't that prevent this attack? It seems like a very specific threat model where the target visits a site via HTTP but the site also exposes some sensitive functionality over HTTPS."
crypto,3dhchz,Plazmotech,8,Thu Jul 16 07:35:28 2015 UTC,No perfect forward secrecy. Why not reuse existing protocols?
crypto,3dhchz,Natanael_L,12,Thu Jul 16 10:48:44 2015 UTC,"I'm sorry to be so direct, but you shouldn't implement crypto on your own. You seem to lack important knowledge in this field as you clearly forgot important parts, e.g., authentication. It would be better for you to use TLS with certificate pinning and a fixed cipher suite.  It's fine to fool around with protocols for learning purposes, but it's a great security risk to consider self-developed protocols for productive use (I would consider an iPhone app productive) unless they have been vetted in depth. Developing protocols shouldn't be taken lightly."
crypto,3dhchz,funkysash,6,Thu Jul 16 09:55:03 2015 UTC,"I agree that designing protocols is very dangerous.  Some particular problems with this protocol:   RSA and AES need padding and modes to be secure. Lack of authentication. Lack of forward secrecy. The server will need to store an ever-growing list of previously used session IDs.  Usually practical protocols don't use this sort of ID unless they really need low-latency operation, and in that case they include a timestamp or something to prevent the list from growing forever. Any violation of the protocol, including a duplicate session ID, should be a hard error unless you really, really need to do otherwise. Encrypting a key with itself is a no-no. The AES encryption mode for packets will need nonces (probably the packet counter and direction, so you don't have to transmit them unless you're over UDP or similar) and MACs.  Probably you should use an AEAD mode. Appending the session ID is pointless unless perhaps you're over UDP or similar. If you're over UDP or some other unordered/unreliable protocol, you need to include facilities message ordering. Probably a bunch of other things.   You should consider TLS, DTLS or, as an outside possibility, something like Noise."
crypto,3dhchz,bitwiseshiftleft,3,Fri Jul 17 00:49:58 2015 UTC,"If we are making an extensive list, it's important to note, that even if you get the above points(+ more) right you still have to implement them right to be secure. There are quite a few side-channel attacks possible on a protocol like this. Most cryptographic libraries are not that foolproof. Invokin certain methods right or getting, e.g., the right kind of random, is not always trivial."
crypto,3dhchz,funkysash,2,Fri Jul 17 09:25:36 2015 UTC,"""Notice: I took an already existing protocol and modified it slightly."" which one?"
crypto,3dhchz,Cdcntx,1 point,Thu Jul 16 10:34:00 2015 UTC,"I haven't had a chance to analyse your protocol but I'm going to suggest you look at spiped, which provides mutual authentication using RSA, AES, and HMAC-SHA256."
crypto,3dhchz,cunttard,1 point,Fri Jul 17 13:24:54 2015 UTC,"Don't, this is a bad idea for several reasons. If you want to do good, help make https://github.com/WhisperSystems/Signal-iOS even better."
crypto,3dftvc,angdev,2,Wed Jul 15 22:58:30 2015 UTC,Pseudo-Hadamard transform actually only uses addition. PHT by itself is linear.
crypto,3dftvc,LightBit8,1 point,Thu Jul 16 17:08:21 2015 UTC,"Hmm the wiki shows it using Multiply for both applying & reversing, and Subtraction for reversing the transform:  Apply:     a1 = a + b     b1 = a + 2b  Reverse:     b = b1 - a1     a = 2a1 - b1"
crypto,3dftvc,LightBit8,2,Thu Jul 16 18:04:02 2015 UTC,"This multiply is constant (2). b1 can also be a + b + b or a + (b << 1) or a1 + b.  Yes, subtraction is used for inverse, but it is only used for decryption and subtraction is actually addition of negated number.  Look how PHT is implemented in SAFER or Twofish."
crypto,3dftvc,bitwiseshiftleft,1 point,Thu Jul 16 18:36:30 2015 UTC,"It is important to note that PHT is linear over Z/232 or whatever, and the low bit is linear over Z/2, but the transform could be used to break up a GF(2k ) linear structure.  That's basically how ARX ciphers work."
crypto,3dftvc,LightBit8,2,Fri Jul 17 00:32:03 2015 UTC,"That is why i said ""by itself"". However, I don't think adding PHT to some block cipher (like AES) would add much non-linearity as it only has 10 rounds and it's S-boxes are very non-linear. ARX ciphers are built on that idea, but they don't use PHT as it is not optimal (it has 2 additions sequentially)."
crypto,3dftvc,LightBit8,1 point,Fri Jul 17 18:14:24 2015 UTC,This may be an incredibly stupid question but... if I added PHT to a block cipher like AES would it harm or weaken the cipher in any way?
crypto,3dcj0p,cdaleyyyyylmao,9,Wed Jul 15 05:05:13 2015 UTC,"I am not a law expert, but consider the physical analogue of the problem: if you stored illegal stuff in rental self-storage places, are they liable?  Or perhaps if someone uploaded a pirated movie to Youtube, is Google liable?   A quick search found this ""Section 230 of the Communications Decency Act"" from Wikipedia which seems to suggest hosts might not be liable, encrypted or not."
crypto,3dcj0p,DoWhile,6,Wed Jul 15 06:04:16 2015 UTC,"It's what the new mega.nz tries to hide behind. Their whole thing is that ""files are encrypted in javascript before being uploaded, and are decrypted the same way once the encrypted file is downloaded"". In practice, this still doesn't stop them from obliging to DMCA takedowns when illegal content is shared publicly."
crypto,3dcj0p,Elyotna,0,Wed Jul 15 10:26:54 2015 UTC,"Ah that's really interesting. I've never heard of mega.nz before this. So the fact that all files are encrypted client-side gives mega.nz plausible deniability, even if it's common knowledge that people are using their service to store pirated files. As long as they comply with takedown notices when people share their keys, they can't be held responsible."
crypto,3dcj0p,they_call_me_dewey,4,Wed Jul 15 15:29:24 2015 UTC,"AFAIK, most of the issue with these sites being ""liable"" for content they host is with content being distributed. If you were to upload illegal materials to some cloud service, encrypted, and give other people the keys and the link, then I think they would be liable if they did not remove it.  If you're only accessing the files yourself and/or don't give the encryption key to anyone then they are not liable to remove it, mostly because they have no way of knowing what it is."
crypto,3dcj0p,aris_ada,3,Wed Jul 15 06:15:42 2015 UTC,"Imho that's what puts Mega.co.nz in the legal grey zone. When downloads are released with the keys and someone complains, they remove it very quickly."
crypto,3dcj0p,zeroXten,2,Wed Jul 15 09:52:03 2015 UTC,What if you told them that they were now hosting encrypted illegal content? I suspect they might feel the need to remove it and/or close the account.
crypto,3dcj0p,davidpbrown,2,Wed Jul 15 10:15:07 2015 UTC,"If somebody were to upload illegal, but encrypted files to their cloud account, would google/apple be criminally liable?   No.  It's like the air your breath being shared by criminals. A tool maker is not liable for how the tool is used. It's only conservative minds that misunderstand this and look to wrap everything in cotton wool.  Especially where a tool has vastly more use to what is legal than illegal, there is no case to censor tool makers be they cloud storage providers or makers of hammers. Liability for action rests with those who take it or neglect their responsibility. The confusion is not helped by a culture that has encouraged Government to adopt too much responsibility for security.. we end up with theatre instead of reality.  If the answer was yes, then people would face absurd liabilities put upon them by others, in a way that they could not defend against. This message or any other, could be decrypted to become anything.. adopt that liability at your risk?.. or better just look to prefer liberal values and acknowledge reality."
crypto,3dcj0p,DavesAsylum,1 point,Wed Jul 15 11:22:47 2015 UTC,"Crypto is a hobby for me, I'm not an expert. But I'm quite sure that I could create and upload a file that Google (or anyone else, for that matter) couldn't open. And this is why I find your question confusing ... so are you asking if Google is liable for storing a file that no one can open?"
crypto,3dcj0p,mywan,3,Wed Jul 15 05:12:35 2015 UTC,"Something like that. Basically, if users are uploading illegal content to cloud services (this undoubtedly happens all the time), but the content is encrypted with strong crypto, can the service providers just throw up their hands and say ""hey, even we don't know what's on our servers"" when the FBI comes snooping?"
crypto,3dewbe,jordanwpg,2,Wed Jul 15 18:58:47 2015 UTC,"Have a look at Yubico's KSM module. As you can see, it's a very thin API, that does nothing but validate keys. In other words, minimal attack surface.  Now imagine it sitting on a dedicated machine, with no other interface or form of access, other then the validation API. Perhaps apache is the only service, and it denies connections unless it matches the exact API format.  You'd be conceptually there at that point. Now just picture it on a dedicated hardware device."
crypto,3dewbe,disclosure5,2,Thu Jul 16 06:09:13 2015 UTC,"Real HSMs also usually have some level of side-channel and tamper resistance.  But yeah, otherwise, an HSM works somewhat like a remote server which can perform certain operations.  Be careful also about backups; HSMs often have admin keys which can be used to transfer their main crypto keys to smartcards or other HSMs; or to upgrade their firmware.  The admin keys are usually stored on a separate smart card which you lock in a safe.  If you leak those admin keys, then the HSM is vulnerable to attack."
crypto,3dewbe,bitwiseshiftleft,1 point,Fri Jul 17 00:34:49 2015 UTC,"Well yes, there's more to it. My key word was ""conceptually"". I still believe the whole thing is conceptually explained like that."
crypto,3dewbe,disclosure5,1 point,Fri Jul 17 02:00:29 2015 UTC,slick!  Thanks for the link.
crypto,3dewbe,cunttard,2,Thu Jul 16 15:06:13 2015 UTC,I haven't really done much but I'm trying to port Google Vault (an opensource HSM) to USB armoury. I like the idea and I just want an embedded project to work on.
crypto,3dewbe,marklarledu,1 point,Fri Jul 17 13:25:58 2015 UTC,I've used HSMs. What would you like to know?
crypto,3dewbe,marklarledu,1 point,Thu Jul 16 02:41:26 2015 UTC,What type of function or industry did you use them in?  I have never heard of these things until now.... Not sure if I have been living in a shell or what...
crypto,3dewbe,samsonx,3,Thu Jul 16 15:06:55 2015 UTC,"I used them when I was a DoD contractor. I've also used them a bit for the utility space. You haven't been living under a shell (or at least this is not indicative of that). Most people I have met, even those who (claim to) work in the security space, haven't heard of them. The basic idea is that nobody gets physical access to the cryptographic keys, not even the owner of the HSM. Instead, you get an API (usually PKCS#11) to interact with the keys without needing to know the bits that make up the key. So for example, you can instruct the HSM to encrypt or sign a particular piece of data with a given key but you only have access to the key's identifier. Additionally, an HSM can accelerate many cryptographic operations."
crypto,3dewbe,nsa_at_home,1 point,Thu Jul 16 16:02:47 2015 UTC,nice explanation.   Thank you for that!  Going to look up PKCS#11 as well...  Cheers.
crypto,3dewbe,hoeg,1 point,Fri Jul 17 14:10:27 2015 UTC,"This is something I've been looking into using a USB armory type device for key storage, signature creation and encryption so it's all done off machine via a somewhat restricted API.  In fact I've been searching for some other (much cheaper) programmable embedded USB device which will do this using the mbed API which recently added in polarssl, now known as mbedTLS.  I'm specifically looking at ECDSA, ECDHE and AES for this little project. Most devices I come across seem to be RSA based."
crypto,3d5t2h,poopinspace,13,Mon Jul 13 19:22:03 2015 UTC,"To the best of my knowledge, the research is mainly concentrated around homomorphic evaluation of the AES decryption circuit in order to decrease communication in outsource private computation setting.  Recent improvements include faster multiplication using FFT for schemes with polynomial-ring ciphertext space, and faster bootstrapping [DM14], but basically the situation is that SWHE is fast, bootstrapping is slow, additions are fast, multiplications are slow.  The state of the art (again, to the best of my knowledge) are R-LWE-based or equivalent schemes with ciphertext space over polynomials rings:   BGV scheme [BGV12] with improvements like scale-invariance (FV scheme, see review in [LN14]). Main implementation is HElib by [GHS12], but there's one by Kryptnostic coming from Silicon Valley. NTRU-based YASHE scheme (See review [LN14]). No known production-ready implementations.   There is a also a approximate-eigenvector-based scheme with ciphertext space over matrices:   GSW scheme [GSW13]. No known production-ready implementation   Various improvements were made recently to HE schemes over the integers: scale-invariantness, batching, CRT-based compression:   DGHV-based scheme over the integers, latest improvement being SIDGHV [CLT14]. There's a C++ implementation by me of SWHE DGHV scheme with ciphertext compression (shameless plug)   I know that certain companies work on implementing FHE backends for CryptDB. Also, Kryptnostic is using FHE in production.  EDIT: Fixed some factual errors     [DM14] FHEW: Bootstrapping Homomorphic Encryption in less than a second [BGV12] (Leveled) fully homomorphic encryption without bootstrapping [GHS12] Homomorphic evaluation of the AES circuit [LN14] A Comparison of the Homomorphic Encryption Schemes FV and YASHE [GSW13] Homomorphic Encryption from Learning with Errors: Conceptually-Simpler, Asymptotically-Faster, Attribute-Based [CLT14] Scale-invariant fully homomorphic encryption over the integers"
crypto,3d5t2h,hidden-markov,5,Tue Jul 14 00:24:10 2015 UTC,"Sorry I can't link or check now (I'm on mobile in the bus), but maybe it's a good idea to check which of these (if any) can still be deemed secure after the recent papers by Chenal and Tang (2014 and 15)"
crypto,3d5t2h,ralpo08,4,Tue Jul 14 01:13:19 2015 UTC,Chenal and Tang   On Key Recovery Attacks against Existing Somewhat Homomorphic Encryption Schemes (2014)  https://eprint.iacr.org/2014/535  interesting! I'll look into that one
crypto,3d5t2h,ralpo08,4,Tue Jul 14 01:53:46 2015 UTC,Exactly! There's also this one focused on NTRU-based schemes:  https://eprint.iacr.org/2015/083
crypto,3d5t2h,ralpo08,1 point,Tue Jul 14 03:03:47 2015 UTC,"so reading through it, I'm wondering why they think it's important for a SHE to be CCA1 secure? Actually I'm wondering why we choose to build proofs using the IND scheme since an attacker would not query a client with plaintexts, but rather with ciphertexts. I feel like another game where you would send two ciphertexts to the Challenger would be more appropriate. I'm very tired my thoughts are not clear."
crypto,3d5t2h,hidden-markov,4,Tue Jul 14 04:46:59 2015 UTC,"About the first part of your question, well, it's because ""not IND-CCA1 secure"" basically means ""not secure for any sort of practical use"". And it's worth to note that in these papers they are describing IND-CCA1 key recovery attacks, that's way worse than simply ""not IND-CCA1 secure"".  About the second part, maybe you wanna take a look at these? https://en.wikipedia.org/wiki/Chosen-ciphertext_attack https://en.wikipedia.org/wiki/Ciphertext_indistinguishability  If that doesn't solve, please ask again I'll do my best to help."
crypto,3d5t2h,hidden-markov,1 point,Tue Jul 14 09:38:17 2015 UTC,"there seem to be a bunch more:  2014  Boyen, Fan, Shi : Adaptively Secure Fully Homomorphic Signatures Based on Lattices  http://eprint.iacr.org/2014/916.pdf  Morais, Dahab : A key recovery attack to the scale-invariant NTRU-based somewhat homomorphic encryption scheme  http://eprint.iacr.org/2014/898.pdf  Chenal, Tang : On Key Recovery Attacks against Existing Somewhat Homomorphic Encryption Schemes  https://eprint.iacr.org/2014/535.pdf  Tsaban, Lifshitz : CRYPTANALYSIS OF THE MORE SYMMETRIC KEY FULLY HOMOMORPHIC ENCRYPTION SCHEME  http://eprint.iacr.org/2014/250.pdf  2015  Katz, Zhou, Thiruvengadam : Feasibility and Infeasibility of Adaptively Secure Fully Homomorphic Encryption  http://eprint.iacr.org/2015/280.pdf  Chenal, Tang Key Recovery Attacks against NTRU-based Somewhat Homomorphic Encryption Schemes  https://eprint.iacr.org/2015/083.pdf"
crypto,3d5t2h,hidden-markov,2,Tue Jul 21 17:26:56 2015 UTC,"Thanks, will have a look. Seems like BGV and DGHV are in trouble."
crypto,3d5t2h,RuddiV,3,Tue Jul 14 10:41:10 2015 UTC,"To the best of my knowledge, the research is mainly concentrated around homomorphic evaluation of the AES decryption circuit in order to decrease communication in outsource private computation setting.   what I read was that AES was used mainly to benchmark new FHE implementations."
crypto,3d5t2h,Natanael_L,3,Tue Jul 14 01:52:22 2015 UTC,"Yes, but I'd say it's a consequence of hybrid AES+FHE encryption being only feasible solution for private cloud."
crypto,3d5t2h,RuddiV,1 point,Tue Jul 14 10:24:46 2015 UTC,"the GSW scheme is a LWE scheme as well, and someone else told me that it was the state of the art"
crypto,3d5t2h,RuddiV,2,Wed Jul 15 20:30:45 2015 UTC,"Anyway, based on lattices. Yep, the certain organization I mentioned that is providing FHE backend for CryptDB is developing GSW implementation. I've never seen any sane public implementation though.  One interesting thing about GSW is that noise growth during multiplication depends on the order of multiplication because of non-commutativity of matrix multiplication, so you can reorder terms in an optiomal way.  Regarding GSW being state-of-the-art, I'm not sure. It is not clear to me if batching, scale-invariance, and compression can be applied to it, whereas they can be applied to BGV, DGHV, and NTRU-based YASHE and LTV. Also, multiplication on matrices is sub-quadratic whilst multiplication on polynomials is log-linear."
crypto,3d5t2h,RuddiV,1 point,Wed Jul 15 23:09:51 2015 UTC,batching   you mean GSW only act on bits and you're not sure it can act on bitstrings?
crypto,3d5t2h,RuddiV,1 point,Mon Jul 20 20:56:45 2015 UTC,"So in 2012, the state of the art seemed to be: BGV or NTRU or Brakerski (from: http://www.iacr.org/cryptodb/data/paper.php?pubkey=24320)  In 2013 GSW came around, it's true that there is no open source implementation (or I couldn't find one) but that's Gentry and it seems like the last state of the art construction  I'm wondering what's the state in 2015 but Fujitsu seemed to have something that worked on bitstring rather that bit by bit: http://www.fujitsu.com/global/about/resources/news/press-releases/2013/0828-01.html"
crypto,3d5t2h,ahazred8vt,1 point,Mon Jul 20 19:32:07 2015 UTC,btw do you know the difference between leveled Fully homomorphic encryption and somewhat homomorphic encryption? I feel like both are supposed to compute any function up to a certain depth
crypto,3d5t2h,0x616e746f6e,4,Tue Jul 21 18:46:49 2015 UTC,"To elaborate on the part of your question that doesn't seem to have received an answer yet:   No, homomorphic encryption is not the same as homomorphic signature schemes.  Where homomorphic encryption deal with the notion of the privacy of the data being computed on, homomorphic signatures deal with the ""dual"" problem, authenticity of some computation on data. Let us briefly discuss what we mean by homomorphic signatures, as it is not as intuitive as homomorphic encryption. As opposed to digital signature schemes, where there are only two parties involved, here, there are three parties involved.  In a homomorphic signature scheme some trusted party can sign some dataset X. If someone, lets say Alice, is given the dataset and the signature of the dataset, she can compute arbitrary functions y= f(X) on the dataset, and homomorphically derive a signature σ(f,y) that certifies that y is the correct output of the computation f(X). Anybody, lets say Bob, can then verify the tuple (f, y, σ(f,y) ) using a public verification key, without the need to ever have access to the dataset X.  I hope this explains the concept of homomorphic signature schemes a bit. Otherwise take a look at the article ""Leveled Fully Homomorphic Signatures from Standard Lattices"" by Vaikuntanathan et. al."
crypto,3d5t2h,dudeimawizard,3,Tue Jul 14 11:40:08 2015 UTC,"So they behave like Zero-knowledge proofs, applied to FHE?"
crypto,3d5t2h,RuddiV,2,Tue Jul 14 11:52:03 2015 UTC,"Yes, that would be a good way to think of it for intuition."
crypto,3d5t2h,jobud9,1 point,Tue Jul 14 11:55:49 2015 UTC,"I'm a bit confused, I'll take a look at that paper. Any idea when homomorphic signature was invented compared to the HE timeline?"
crypto,3d4a70,sdrapkin,3,Mon Jul 13 12:11:19 2015 UTC,Done any kind of third-party vetting? I've only casually looked at/worked with BC but I hated it. Would love if this lived up to all your claims.
crypto,3d4a70,OfFireAndFlame,2,Mon Jul 13 13:50:08 2015 UTC,"The source is open and <1k LOC. There is also a decent set of tests. I hope that knowledgeable folks from this subreddit will review. At this point I can only offer absence of reported issues, which is not much."
crypto,3d4a70,OfFireAndFlame,3,Mon Jul 13 14:01:30 2015 UTC,The /r/crypto sub is pretty small and inactive. I'd post this over at /r/netsec to get it some more visibility of the general security sphere. May even be a good idea to tweet it out at some well known crypto shops/people.
crypto,3d4a70,Katana__,3,Mon Jul 13 16:07:13 2015 UTC,"Actually, run it by /u/asteriskpound first, please. There's been crap lately with unproven crypto getting submitted that we've had to get a bit remove-happy with what comes in.  ed: too late, apparently.  I'll poke them in modmail."
crypto,3d4a70,OfFireAndFlame,1 point,Tue Jul 14 02:45:17 2015 UTC,Ah sorry about that. Was hoping it'd get visibility over there so people way more qualified than I could comment on its quality.  At less than 1k LOC it'd be a fairly straight forward review someone could knock out in their offtime.
crypto,3d4a70,Katana__,2,Tue Jul 14 03:05:54 2015 UTC,"Unfortunately, we have to be careful because of that higher visibility; we've less crypto experts than elsewhere that can call bullshit."
crypto,3d4a70,JoseJimeniz,4,Tue Jul 14 03:07:37 2015 UTC,"static RNGCryptoServiceProvider _rng = new RNGCryptoServiceProvider(); const int BUFFER_SIZE = 1024 * 4; // 4k buffer seems to work best (empirical experimentation)   I assume that's because the TPM can only give you at most 4,096 bytes per call. Also because Windows page granularity is 4k.  It's interesting to buffer the output of RNGCryptoServiceProvider in an attempt to improve speed.    The only reason i looked at that file was because of the line in the documentation:   CryptoRandom will be faster than RNGCryptoServiceProvider in most scenarios   and was horrified at the possibility that they implemented their own random generator. But i see the wording now:   it should be faster than using RNGCryptoServiceProvider directly"
crypto,3d4a70,sarciszewski,3,Mon Jul 13 23:13:45 2015 UTC,Thanks for not jumping to conclusions without reviewing the code first.
crypto,3d4a70,R-EDDIT,1 point,Tue Jul 14 02:20:14 2015 UTC,Assymetric crypto: NSA Suite B API only (Elliptic Curves). No RSA.   Does this include the non-Twist-secure curves (e.g. P224)? :P
crypto,3d4a70,R-EDDIT,2,Mon Jul 13 13:52:07 2015 UTC,"No. Inferno uses NIST P-384, which is twist-secure."
crypto,3d4a70,sarciszewski,3,Mon Jul 13 14:26:08 2015 UTC,"Just to be clear ""twist"" is only one ""safe curve"" criteria, while NIST P-384 passes that, it fails others and is listed as ""SAFE=FALSE"" on the safecurves site.  http://safecurves.cr.yp.to/  I will look more thoroughly, however the vigorous argument against using GCM I question.  For example, the page points out that CTR is NIST approved.  Guess what, ECB is NIST approved as well, and you'd be foolish (or work for the IRS) to use that.  From what time I had to review it, the tone I think is what I'd have a problem with.  Anyone who says ""this is the right answer"" is probably missing it, when in fact ""this is the best you can do on platform X right now"" is probably more accurate."
crypto,3cz4vn,cunttard,11,Sun Jul 12 02:34:47 2015 UTC,"RSA (which is not Elliptic Curse, not Diffie-Hellman) is also used for secure key exchange."
crypto,3cz4vn,JoseJimeniz,26,Sun Jul 12 03:05:24 2015 UTC,"Elliptic Curse sounds like the name of an exploit kit for ECDSA, similar to Shellshock or Heartbleed."
crypto,3cz4vn,christian-mann,6,Sun Jul 12 06:25:45 2015 UTC,Yep. I'll remember that when I find an exploit ;-)
crypto,3cz4vn,rubdos,3,Sun Jul 12 14:01:13 2015 UTC,If anyone ever finds an exploit....
crypto,3cz4vn,samsonx,5,Sun Jul 12 20:25:19 2015 UTC,Step 1: find Dual EC DBRG in deployment Step 2: come up with a logo (you already have a name) Step 3: ...? Step 4: profit
crypto,3cz4vn,Natanael_L,1 point,Sun Jul 12 20:30:55 2015 UTC,"Ah yeah, completely forgot about RSA.  For an anonymous key exchange, I believe this requires minimum 2 rounds; first round for alice to generate and publish an ephemeral public key, and second round bob encrypts a symmetric key under alice's key.  Or I guess one round if Bob has advance knowledge of the Alice's key."
crypto,3cz4vn,aris_ada,9,Sun Jul 12 07:57:16 2015 UTC,"My personal favourite: Neural network key exchange (https://en.wikipedia.org/wiki/Neural_cryptography). The idea is that two peers exchange sample points and results to synchronize and have both their neural network converge to the same set of weights. Adversaries supposedly need more exchanges to be able to figure out the shared secret.  It's slow, requires thousands of round-trip-times, but it's cool as hell."
crypto,3cz4vn,danukeru,3,Sun Jul 12 17:57:08 2015 UTC,"""Use ML to solve a problem and you now have a 10k by 10k matrix of problems""  Methinks someone took that a little too literally at some point..."
crypto,3cz4vn,aris_ada,2,Tue Jul 14 17:32:46 2015 UTC,"It often happens that some breakthrough originated from a crazy, unworkable idea. It's always good to explore what's down there."
crypto,3cz4vn,PM_ME_UR_OBSIDIAN,1 point,Tue Jul 14 18:44:47 2015 UTC,That Wikipedia article is surprisingly bad. Do you know any better intro reading?
crypto,3cz4vn,aris_ada,3,Mon Jul 13 00:19:54 2015 UTC,"I'm afraid you'd have to learn the basics of neural networks first, in particular the ""backprop"" learning method. The main idea is that you can train a neural network to give certain outputs with particular inputs, using a mathematical formula. The peers exchange input and outputs and try to synchronise the factors (that's the weight matrix inside the neural network) until they generate the same outputs for the same inputs. At that point they have a shared secret."
crypto,3cz4vn,JoachimSchipper,6,Tue Jul 14 07:17:35 2015 UTC,"Post-quantum key exchange - McEliece, LWE-based, and some others - exists."
crypto,3cz4vn,dezakin,7,Sun Jul 12 13:19:26 2015 UTC,"Supersingular Isogeny Key Exchange is a Diffie-Helman analogue that doesn't depend on the Discrete-Log problem.   There's NTRU, Ring Learning with Errors, and McEliece that can be used as key exchanges, but I'm not sure these satisfy your requirement that they be anonymous... though I suppose you can generate ephemeral keys in multiple rounds with these. But they're all interesting because the problems are all different and none are dependent on factoring or discrete log."
crypto,3cz4vn,untitleddocument37,6,Sun Jul 12 19:59:43 2015 UTC,Shamirs three pass
crypto,3cz4vn,tom-md,5,Sun Jul 12 11:10:23 2015 UTC,"Sure, there are password based and more traditional purely symmetric protocols as well as alternate ways to use asymmetric crypto.  NSL, one of the most famous protocols, is used by kerberos."
crypto,3cz4vn,ahazred8vt,1 point,Sun Jul 12 04:02:13 2015 UTC,"Yeah sorry, I should've qualified that as an anonymous key exchange. I implied it, but I should've made that explicit when I posted."
crypto,3cz4vn,ahazred8vt,3,Sun Jul 12 08:01:30 2015 UTC,"DHE is pretty common, but a few PAKE schemes and Kerberos allow key exchange / key establishment without a DL component. Some allow mutual authentication.  https://en.wikipedia.org/wiki/Password-authenticated_key_agreement"
crypto,3cz4vn,tom-md,1 point,Sun Jul 12 04:23:42 2015 UTC,"I guess when I meant DH key exchange, I should have qualified it as anonymous, so no prior secrets or parameters; that would rule out PAKE and Kerberos."
crypto,3cz4vn,Natanael_L,2,Sun Jul 12 07:58:37 2015 UTC,"Yes, as /u/dezakin points out below, supersingular SI-DH is an ECDH-like quantum-resistant system which is expected to be 128-bit secure at a key size of of 768 bits, and does not depend on the security of the Discrete-Log problem.  See more at https://en.wikipedia.org/wiki/Post-quantum_cryptography"
crypto,3cz4vn,jan,1 point,Mon Jul 13 01:13:51 2015 UTC,So if it's anonymous what do you bean by secure?  Against a passive adversary?
crypto,3cz4vn,ff1017,2,Sun Jul 12 17:55:46 2015 UTC,"Anonymous as in not using predefined keys. TLS uses DH where the public parameters are signed with another keypair, instead of using fixed DH parameters in place of a regular public key."
crypto,3cyhjw,Joo3145813,1 point,Sat Jul 11 22:47:34 2015 UTC,Thanks for sharing ! that was a great simple video
crypto,3cxasm,GLAMODYSSEY,5,Sat Jul 11 16:31:34 2015 UTC,"We aren’t seeking a backdoor approach. We want to use the front door, with clarity and transparency, and with clear guidance provided by law.”   The front door is my password.  Which I will never give you.  And I agree with him on one point:   the law has not kept pace with technology   The has not kept pace with technology. People have been coerced, threatened, or jailed for refusing to give up their passwords.    The law needs to be updated to make it clear that no person shall be compelled to testify against themselves in a criminal, civil, administrative, or any other proceeding. The law also needs to be updated to make it explicit that no entity can be forced to hand over their passwords (including but not limited to passwords, certificates, private keys, or algorithms)"
crypto,3cxasm,JoseJimeniz,1 point,Sun Jul 12 12:29:03 2015 UTC,"I've suspect they want a two-pronged approach of leaning on tech companies to not use strong crypto in the first place and getting around the 5th amendment with a legal framework in case someone actually is using strong crypto.  We need a quick line a rhetoric to combat these malicious idiots.  Something like ""other countries will have strong crypto and we'll be vulnerable to them because we won't have it""."
crypto,3cxasm,seattlyte,3,Sun Jul 12 18:54:15 2015 UTC,Lots of downvotes here.  Anyone who downvoted care to share their reasons?
crypto,3cxasm,seattlyte,2,Sun Jul 12 03:05:23 2015 UTC,"This article is slightly better than other articles on the same subject, especially ones that have been posted to this sub. Here are props to Max Fleishman for detailing some of the history for those who are not aware of it.  If I were to recommend further improvements to the article I would recommend linking the sabotage of encryption and the current legal status of forced intercepts (beyond CALEA into things like the Stored Communications Act, the FREEDOM Act and PATRIOT before it, and a host of others) - how the sum of these things amounts to the sorts of user access that was argued needed to be protected during the first crypto wars.  I would also recommend diving deeper into the concerns of national security officials - both playing both sides of it (how do you enforce insider trading if you can't legally establish financial secrets have been passed between two Wall Street wolfs?) - and by explaining that the global metadata and content surveillance programs that rely on a lack of good encryption is about more than merely finding terrorists but is about tracking and controlling ideas.  Finally I think its important that Trusted Platform Modules be compared to Clipper Chips given their sordid history, lack of transparency and similarity the Clinton Administration proposal."
crypto,3cxasm,seattlyte,1 point,Sat Jul 11 18:06:06 2015 UTC,They mention the EC NIST incident.  I think that alone has ruined their reputation -- it had suspicious magic numbers and NIST should have been looking for flaws just like the ones later found in it.
crypto,3cxasm,seattlyte,1 point,Sat Jul 11 18:51:09 2015 UTC,"Agreed. But you can do much more than mention that singular incident. The NSA has done much, much more than Dual_EC. And it's important to link the disruption of encryption in practice to the promise that encryption is legal - how this contradiction should inform us going into the second crypto wars."
crypto,3cxasm,seattlyte,1 point,Sat Jul 11 18:52:24 2015 UTC,"I think that was just the most high profile in recent memory.  Could you point me in the right direction for other incidents like that?  I know a little about the history of DES, but I'd be interested in reading more about their involvement and interference."
crypto,3cwv4b,based2,5,Sat Jul 11 13:57:56 2015 UTC,"For those who are wondering what this has to do with crypto, subset-sum is an NP-complete problem and variants of it have been used as hardness assumptions.  One of the more recent examples is in the original fully homomorphic encryption construction by Gentry, but using subset-sum/knapsack dates all the way back to Merkle-Hellman.  Regardless of crypto, this is a sick result."
crypto,3cvskr,malcarada,9,Sat Jul 11 04:47:29 2015 UTC,"> look at CrypticDisk website > Apparently used by Seagate, Intel, IBM    http://www.exlade.com/assets/images/cryptic-disk/en/pbkdf2-3.png   > ""No Iterations"" > Wut"
crypto,3cvskr,ivosaurus,5,Sat Jul 11 15:24:19 2015 UTC,"Interesting tidbit: Scrypt uses PBKDF2 with no iterations (no repetition, only run once).  http://i.imgur.com/XslH9uu.png  Scrypt is a fancy, iterative, expensive way to generate the salt to feed into PBKDF2.  So in that block diagram, it depends where the salt comes from."
crypto,3cvskr,JoseJimeniz,2,Sat Jul 11 20:42:01 2015 UTC,Almost like this was planned from the beginning.
crypto,3cvskr,they_call_me_dewey,6,Sat Jul 11 18:23:45 2015 UTC,But not the right TrueCrypt Version ;)
crypto,3cvskr,Lydana,3,Sat Jul 11 10:26:26 2015 UTC,7.1a
crypto,3cvskr,aliceandbob,2,Sat Jul 11 19:34:53 2015 UTC,Do we know if veracrypt is safe?
crypto,3cvskr,me_z,7,Sat Jul 11 20:15:36 2015 UTC,"It's truecrypt with improvements suggested by the audit project. So, unless some highly sophisticated malice is involved, it's perfectly fine."
crypto,3cvfiz,Joo3145813,6,Sat Jul 11 02:37:32 2015 UTC,"I still don't understand how modular DH works, but ECDH is extremely simple.  Showing that if you multiply your private key by your friend's public you'll get the same result as them multiplying their private key by your public key only takes 5th grade math, if that."
crypto,3cvfiz,justusranvier,4,Sat Jul 11 03:53:14 2015 UTC,"Perhaps some actual examples. We pick two prime numbers:   the base: g=5 the modulus: p=13   These are public. We exchange them.    Public    g=5 p=13    Now we both pick a random secret number:     Joo3145813 JoseJimeniz    Secret 314 69 (heh)    Both of us calculate: basesecret mod p:     Joo3145813 JoseJimeniz    Secret 314 69   Calculation 5314 mod 13 569 mod 13   Result = 12 = 5    We then exchange these values, and perform the exponentiation again with our secret number on the other person's value:     Joo3145813 JoseJimeniz    Secret 314 69 (heh)   Calculation 5314 mod 13 569 mod 13   Result = 12 = 5   Exchange 5 12   Calculation 2 5314 mod 13 1269 mod 13   Result 2 = 12 = 12   Our shared secret number 12     The magic of DH is that even though:   you generated a secret number: 314 i generated a secret number: 69 and we never shared the number with anyone else   we both came up with a shared secret number: 12  We can now use this as our session encryption key.    This works because:   (g314 mod p)69 mod p = g314*69 mod p (g69 mod p)314 mod p = g69*314 mod p"
crypto,3cvfiz,JoseJimeniz,2,Sat Jul 11 21:15:09 2015 UTC,"Dude! Awesome explanation! I could be a bit bias though, heh."
crypto,3cvfiz,kurogane765,2,Sun Jul 12 04:12:31 2015 UTC,"By coincidence, Joo3145813's secret calculation result in your example is always the same as the shared secret result. (i.e. choosing 314,315, etc at 'random').  These might just be because of small example primes, but i noticed for other primes it also happens sometimes.  Is this just a coincidence that has no effect on security once we get to big enough prime numbers (500+ digits) ?"
crypto,3cvfiz,JoseJimeniz,1 point,Tue Jul 14 16:37:26 2015 UTC,I really don't know why that is. I'm sure Diffie does.
crypto,3cvfiz,Godspiral,2,Tue Jul 14 23:21:43 2015 UTC,"Well, what part don't you understand? I can possibly fill in the gaps."
crypto,3cvfiz,justusranvier,1 point,Sat Jul 11 03:55:21 2015 UTC,only takes 5th grade math   fancy schools there that teach eliptic curve point multiplication in 5th grade.  exponentiation is actually thaught reasonably early. and mod is grade school stuff.
crypto,3cvfiz,Godspiral,1 point,Sun Jul 12 00:59:08 2015 UTC,"You don't have to understand how elliptic curve point multiplication works, just that it works."
crypto,3cvfiz,CryptoDoomChicken,1 point,Sun Jul 12 04:00:27 2015 UTC,antilog-thingamagicky-field multiplication
crypto,3cvfiz,bontchev,1 point,Sun Jul 12 14:24:28 2015 UTC,I had the reverse problem when I first took an interest in cryptography: DH seemed simpler to me than ECDH. Here's a great youtube video from Khan Academy about how regular DH works https://www.youtube.com/watch?v=3QnD2c4Xovk
crypto,3cvfiz,christian-mann,3,Sat Jul 11 04:11:13 2015 UTC,"Actually, this video is a very poor explanation of it. The color mixing simply doesn't work the same way as modulo arithmetic. When using colors, Eve can trivially determine the key because red + yellow + blue + yellow is the same as red + blue + yellow - but it is not when using modulo arithmetic."
crypto,3cvfiz,DoWhile,2,Sat Jul 11 09:12:42 2015 UTC,"What? Yes it is.  But it's not the same as red + yellow + blue, which is what the two correspondents have.  The assumption made is that subtracting color is hard."
crypto,3cvfiz,aris_ada,4,Sat Jul 11 20:57:52 2015 UTC,"The way DH should be defined is on a group (G,#) where # is the group operation.  Then both plain DH and ECDH are just instantiations of the group operation with # being ""multiplication mod p"" in DH and ""elliptic curve addition"" in ECDH."
crypto,3cvfiz,rlmaers,2,Sat Jul 11 07:13:10 2015 UTC,"I was going for a simple explanation that's accessible to people who haven't had/don't desire to take Abstract Algebra. I didn't know about the whole group sentiment (G, #) yielding the result ""elliptic curve addition"" in ECDH."
crypto,3cvfiz,aris_ada,1 point,Sat Jul 11 11:43:29 2015 UTC,"Using an abstract operation # that isn't an addition or multiplication forces your brain to work in abstract mode and consider the operation as a black box. Still I usually use the multiplicative operation (and exponentiation) when working in Z/Zp because it's intuitive and the operation properties are exactly the same as in N. It takes 15 minutes to explain to a 18 years old. (maybe more if he's curious).  Btw ECDH is not a group, it's the group of Elliptic Curves on a particular EC instance on a particular field. It's often simpler to just name the elliptic curve and say that because of the group structures it works the same way on all other elliptic curves."
crypto,3cvfiz,peaches-in-heck,3,Sat Jul 11 12:30:49 2015 UTC,"Btw ECDH is not a group, it's the group of Elliptic Curves on a particular EC instance on a particular field. It's often simpler to just name the elliptic curve and say that because of the group structures it works the same way on all other elliptic curves.   Wut?"
crypto,3cvfiz,sofakingslow,4,Sat Jul 11 16:53:36 2015 UTC,"I worded this very badly, apologies.  ECDH is not a group, it's an algorithm that applies on elements from an EC group. There is no unique EC group, because every curve is different (the Field it's based on, the equation and the parameters)."
crypto,3cvfiz,elitest,1 point,Sat Jul 11 17:21:08 2015 UTC,"I appreciate the clarification, sincerely. I'm not a mathematician by any means, just a philosopher (with poor mathematical training)."
crypto,3cvfiz,rflownn,1 point,Sat Jul 11 15:11:22 2015 UTC,Great Vid!
crypto,3cvfiz,h110hawk,7,Sat Jul 11 04:40:25 2015 UTC,"""Diffie-Helman is a way of generating a shared secret between two people in such a way that the secret can't be seen by observing the communication. That's an important distinction: You're not sharing information during the key exchange, you're creating a key together.""  Step one to any great explanation is right there - set the scope so your audience understands where you are going.  I have run into this very misperception a dozen or more times where someone will say ""let's just encrypt everything with DH"" and I have to explain that this is a key exchange protocol not an encryption tool you want to use for secure info transfer."
crypto,3crn95,johnmountain,12,Fri Jul 10 05:39:43 2015 UTC,"When I think of paranoia, I have three basic levels i gauge by   Typical Pleb level (not paranoid) Conspiracy theorist level (paranoid and afraid they're wrong) moxie marlinspike (afraid he's right)   Who else trashes a laptop because he can't trust the keyboard hasn't been rootkitted? Huntee, that got rootkitted at the factory.   Then again Nadim of Cryptocat got pwned by Canada ( cached copy ) so..."
crypto,3crn95,indrora,2,Fri Jul 10 18:33:09 2015 UTC,"Anyone going to ""play this game""... then yea, expect any system used to get hacked.  There are ways to hack into computers that are far-out there.  edit; Guys and Gals working at level of Moxie and Nadim either are owned, or will get owned, or they are working very hard to own them. Super exotic level hacking stuff (NSA etc...) is what they have to deal with, them or the guys and gals just a level or few above them."
crypto,3crn95,rflownn,1 point,Mon Jul 13 11:08:12 2015 UTC,"If some are to be believed, we're all pwned. Every single one of us, by our respective governments, and probably more than one at a time."
crypto,3crn95,indrora,1 point,Mon Jul 13 20:13:13 2015 UTC,Only if you have something valuable enough.
crypto,3crn95,Dillinur,5,Wed Jul 15 16:39:36 2015 UTC,Wow... Moxie in the WSJ. What is this world coming to?
crypto,3crn95,AdShea,7,Sat Jul 11 02:16:24 2015 UTC,In Moxie we trust
crypto,3crn95,digititus,3,Fri Jul 10 17:53:33 2015 UTC,"As /u/moxiemarlinspike commented in hn:   I get a lot of credit for the stuff that Open Whisper Systems does, but it's not all me by a long shot. Trevor Perrin, Frederic Jacobs, Christine Corbett, Tyler Reinhard, Lilia Kai, Jake McGinty, and Rhodey Orbits are the crew that really made all this work happen.   In moxie and his team we trust (our privacy)."
crypto,3crn95,g30rg3_x,2,Sat Jul 11 22:04:17 2015 UTC,/r/onetruegod
crypto,3co9su,shthed,7,Thu Jul 9 13:25:16 2015 UTC,"As I understand it. If ACME issues a certificate to Bob, Bob can then use his certificate to act as ACME's Certificate Authority (CA).  Bob can then issue further certificates that will be trusted by ACME's CA and is using a vulnerable version of OpenSSL. I'm not sure how Bob would do this yet."
crypto,3co9su,genghisruled,3,Thu Jul 9 13:58:49 2015 UTC,"not so easy, I tried with the openssl ca tool, after some configuration it is possible. I've managed to sign a CSR with another valid certificate, but I don't have any of the affected versions of openssl to test it with :P"
crypto,3co9su,boes,2,Thu Jul 9 18:16:31 2015 UTC,edit: nm We got the info we needed
crypto,3co9su,friendlyneighbourho,1 point,Thu Jul 9 17:03:22 2015 UTC,OpenBSD's LibreSSL is not affected by this high severity vulnerability.
crypto,3cpw0y,zeroXten,3,Thu Jul 9 20:40:32 2015 UTC,"Unless you're trying to limit the time that a message becomes available, I can't see the added value that providing a clock constant gives; the constant changes with time, so what? If the scheme without that added complexity works, then what's the benefit?.. You seem to be suggesting what is already known as 2FA the like that Google offers as an addin to the decryption.  So, what you could see is Alice wants to send Bob a message, so she takes the clock value when she wants to allow Bob to decrypt and Bob must wait until then and decrypt before the next change. If you make a horror movie from that, I'll take the usual 10% cut of the profits ;)"
crypto,3cpw0y,davidpbrown,1 point,Thu Jul 9 22:05:07 2015 UTC,"The reason for the clock changing is so that no two IDs between two people are ever the same (or at least, IDs are only valid for a relatively small window)."
crypto,3cpw0y,davidpbrown,1 point,Thu Jul 9 22:11:20 2015 UTC,"Ah.. I'm tired and that's at the limit of what I can imagine but if they hold their own static private keys, perhaps that would be useful. They would encrypt a message then with a combination of the clock and the other's public key combined. Still, if it's a public clock, then it's just complicating the process but perhaps inside a system that forgets data, maybe there's some use for that complexity - perhaps would help stop in real time attacks."
crypto,3cpw0y,Natanael_L,1 point,Thu Jul 9 22:23:43 2015 UTC,"Fair enough. I was trying to get away from public/private keys as they basically a static form of identity. Of course, you could still use them and not share the public key, but you may as well just use a block cipher straight away as you going to need it to encrypt any interesting amount of data."
crypto,3cpw0y,Natanael_L,1 point,Fri Jul 10 09:15:05 2015 UTC,"You can HMAC the message with the key. Then every HMAC tag can be unique, but she can try her key on the messages anyway and see if the tag matches any."
crypto,3cpw0y,Natanael_L,1 point,Fri Jul 10 09:24:00 2015 UTC,"You mean instead of encrypting a clock value? If so, how would you know where to find the message? Either you end up with an individual inbox (trying to get away form that) or you'd need the message to derive the HMAC."
crypto,3cpw0y,ReversedGif,1 point,Fri Jul 10 09:32:13 2015 UTC,Would you be using the clock value to request messages from some database?
crypto,3cpw0y,bitwiseshiftleft,1 point,Fri Jul 10 09:41:45 2015 UTC,"Yeah. Well, an ID derived from the clock value using a symmetric cipher."
crypto,3cpw0y,bitwiseshiftleft,1 point,Fri Jul 10 10:09:43 2015 UTC,Take a look at pond in Tor and at Bitcoin stealth addresses / the new version payment codes.
crypto,3cpw0y,bitwiseshiftleft,1 point,Fri Jul 10 10:56:52 2015 UTC,The stealth addresses look interesting.
crypto,3cpw0y,bitwiseshiftleft,2,Fri Jul 10 11:06:16 2015 UTC,"The clock doesn't need to provide random data - I think that simply deriving some data from a normal clock would be equivalent. Something like H(floor(hours since epoch)), where H is SHA-256 or some other hash function."
crypto,3cmow3,DemianMusic,9,Thu Jul 9 02:35:48 2015 UTC,"We successfully extracted keys from laptops of various models running GnuPG (popular open source encryption software, implementing the OpenPGP standard), within a few seconds.   Oh wow! That's amazing!   The attack sends a few carefully-crafted ciphertexts, and when these are decrypted by the target computer,   Oh, nevermind.   they trigger the occurrence of specially-structured values inside the decryption software. These special values cause observable fluctuations in the electromagnetic field surrounding the laptop, in a way that depends on the pattern of key bits (specifically, the key-bits window in the exponentiation routine). The secret key can be deduced from these fluctuations, through signal processing and cryptanalysis.   I read this research a while ago. It's a great topic that deserves attention, however, this is not a practical attack in the real world. Fixes for side channel attacks have been swift in most implementations recently. I think we're keeping up with the technology on this one.   As a concrete example, Enigmail (a popular plugin to the Thunderbird e-mail client) automatically decrypts incoming e-mail (for notification purposes) using GnuPG. An attacker can e-mail suitably-crafted messages to the victims (using the OpenPGP and PGP/MIME protocols), wait until they reach the target computer, and observe the target's EM emanations during their decryption (as shown above), thereby closing the attack loop.   The edgiest of edge cases, but this page is worth reading to check up on the improvements they've made since their first publication."
crypto,3cmow3,aydiosmio,2,Thu Jul 9 07:28:47 2015 UTC,You're forgetting the pretty massive usecase of server collocation
crypto,3cmow3,Natanael_L,2,Thu Jul 9 11:46:04 2015 UTC,What is the attack scenario?   This seems like only something only a TLA would do.   Identify the target server Assure it's running vulnerable software Somehow force it to decrypt arbitrary data Get physical access to the server Place the device inconspicuously ...   Edgy edgy edge case.
crypto,3cmow3,aydiosmio,1 point,Thu Jul 9 15:33:13 2015 UTC,Also something a shady competitor might do
crypto,3cmow3,Natanael_L,2,Thu Jul 9 16:56:10 2015 UTC,"If they have access to your rack, something else is wrong"
crypto,3cmow3,aydiosmio,1 point,Thu Jul 9 19:30:04 2015 UTC,This just needs proximity
crypto,3cmow3,Natanael_L,2,Thu Jul 9 19:36:35 2015 UTC,"Yeah, but we're talking inches. Inches not obstructed by metal cages."
crypto,3cmow3,aydiosmio,1 point,Thu Jul 9 20:12:33 2015 UTC,"you summed up everything I wanted to say, and more."
crypto,3cmow3,PostHipsterCool,1 point,Thu Jul 9 07:42:52 2015 UTC,"While somewhat impractical, this is definitely a break in CCA security."
crypto,3cmow3,savedigi,4,Thu Jul 9 13:44:27 2015 UTC,"Link to the original publications here, with better pictures and more accurate explanations.  Choice quote: ""In autonomous mode, Pita is configured to continuously measure the electromagnetic field around a designated carrier frequency, and records the digitized signal into an internal microSD card for later retrieval, by physical access or via WiFi. In both cases, signal analysis is done offline, on a workstation."""
crypto,3cmow3,LovelyDay,2,Thu Jul 9 10:07:21 2015 UTC,That is some world-class stock photography right there.
crypto,3cmow3,aydiosmio,2,Thu Jul 9 07:25:42 2015 UTC,So it's Van Eck phreaking.
crypto,3cmow3,ryanknapper,1 point,Thu Jul 9 19:45:46 2015 UTC,"Van Eck phreaking:       Van Eck phreaking is a form of eavesdropping in which special equipment is used to pick up side-band electronic-magnetic emissions from electronics devices that correlate to hidden signals or data for the purpose of recreating these signals or data in order to spy on the electronic device. Side-band electromagnetic radiation emissions are present in, and with the proper equipment, can be captured from keyboards, computer displays, printers, and other electronic devices.  Van Eck phreaking of CRT displays is the process of eavesdropping on the contents of a CRT by detecting its electromagnetic emissions. It is named after Dutch computer researcher Wim van Eck, who in 1985 published the first paper on it, including proof of concept.  Phreaking is the process of exploiting telephone networks, used here because of its connection to eavesdropping.  Van Eck phreaking might also be used to compromise the secrecy of the votes in an election using electronic voting. This caused the Dutch government to ban the use of NewVote computer voting machines manufactured by SDU in the 2006 national elections, under the belief that ballot information might not be kept secret.   In a 2009 test of electronic voting systems in Brazil, Van Eck phreaking was used to successfully compromise ballot secrecy as a proof of concept.      Relevant: Tempest (codename) | Cryptonomicon   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Call Me"
crypto,3cmow3,autowikibot,1 point,Thu Jul 9 19:46:23 2015 UTC,Is it possible to simply modify or generate a magnetic field around your device without frying it? To scramble van eck phreaking?
crypto,3cjx74,ASsghosthauntsEP,11,Wed Jul 8 14:19:05 2015 UTC,"A note here that historically (20 years ago) we were in much the same location, where encryption was regarded a military export and subject even within the United States to controls that kept communications to levels where law enforcement could intercept communications.  The 'crypto wars' as they were known were believed to be 'won' by cryptographic professionals as the legal status of encryption was deemed to be a right to free speech and hard work was done to thwart proposals by the government (under the Clinton administration) to enforce that civilian cryptosystems rely on unexaminable ""Clipper Chips"" that allow US government access but deny criminals.  What Snowden and new technical analysis have revealed is that, while granted a legal right, the US government went about making it a practical difficult possibility - they backdoored not only encryption standards and kept security advancements from the industrial sector but worked to backdoor code, obtain secret keys across the PKI, instituted laws that allowed third party and computer services to be subject to tap-and-trace laws (CALEA, etc) meaning any service like Google or the cloud or backup or Skype was made observable by law, and the Clipper Chip evolved into the Trusted Platform Module which now resides is most private civilian computers.  Provided this history, we need to be careful that the legal outcomes are associated with technical outcomes and that there are not gaps and loopholes in the law that enable extremely broad collection or weakening of encrypted communications.  In doing this we also need to take the federal government serious about their concerns: when they say that encryption prevents them from fighting terrorism they are speaking about the global surveillance systems disclosed by Snowden. It is important to know that PRISM and phone surveillance was just the surface content of the Snowden documents and that these programs, which evolves from the Total Information Awareness programs, collect everything from constant geolocation, biological markers (fingerprints, gait identification, faces), voice over the internet, public internet posts, financial information, emails, etc, etc. It is important to know that analysis programs run over this 'metadata' is used to process sentiment analysis and look for the spread of ideas so that anti-American narratives and so called 'extremist' (traditionally 'jihadist') ideas can be blocked, discouraged and the lines of communication killed.  If communications become encrypted this large scale social media and sentiment analysis can not be done and so the databases can not be used to curtail and track the spread of ideas.  We need to balance these concerns with our own private rights. We need to perform a calculus where we ask how much we would like the US government to direct the flow of ideas for our safety and national security versus our individual rights to private conversation. We must also ask whether there are ways to solve the problem of the spread of anti-American ideas without using global surveillance and propaganda tools."
crypto,3cjx74,seattlyte,1 point,Wed Jul 8 23:39:38 2015 UTC,I can't tell if you're serious or writing satire.
crypto,3cjx74,rflownn,2,Fri Jul 10 02:24:14 2015 UTC,Serious.  I agree the whole situation is absurd. Care to expound on why you think that would be satirical?
crypto,3cjx74,seattlyte,3,Fri Jul 10 02:48:46 2015 UTC,"If communications become encrypted this large scale social media and sentiment analysis can not be done and so the databases can not be used to curtail and track the spread of ideas.   You're going beyond basic observation to active participation. There are several things to layout first. First of all, these programs provide enormous leverage to those who have access to the databases. When the databases are abused, it becomes leverage. This is known, and the system considers that these abuses are outweighed by various far more threatening goals. For example, say a corrupt LE organization/institution/group etc abusing the system to target individuals for extortion/racketeering/criminal activities and offenses etc under guise of their position is considered far less dangerous than say terrorists using the networks to orchestrate attacks. These is considered 'justified' collateral damage.  That was very brief in assessing abuse of the system, conceptualizing its risk and cost, against the supposed intent of the system. The political jabber is something akin to, ""A few hundred or thousand people being consistently exploited by those with access to the system is far less damaging than tens of thousands consistently attacked by some nasty terrorist 'activity'""  Now let us consider this intent. The intent of the system is meant to provide a means to track terrorist activities by its attractive force as an available communication channel for terrorists to use. If the risk of their operations is magnified by use of the system, or their operations are hindered by use of the system, then they won't use the system and/or their activities will be obfuscated even further. It is easy to dismiss this as ""It's because Snowden"", as it is as easy to correctly assess that they are only using Snowden as a scapegoat to their failure. This is then a contradiction in the purpose of the existence of this system.  Next is active participation. To 'halt and control the spread of ideas' is definitely one that could be used in satire. The state has no right in ""controlling the flow"" of ideas because they think it's ""harmful"" and this breaks basic fundamental law of Freedom of Speech. The satire would basically be that the existence of this system to ""protect by controlling speech"" is much more damaging than it is justified."
crypto,3cjx74,rflownn,2,Fri Jul 10 06:34:53 2015 UTC,"Agreed that abuse of any nation state capabilities including prison (delayed use of force), weapons (force), intelligence tools (spying/leverage/theft/sabotage), legal capability (harassment), etc is a bad thing and needs to be avoided. There are a lot of good reasons to worry about NSA surveillance capabilities being abused.  Unfortunately this is a large conversation in and of itself. It's an important topic - but I think one that needs to happen after there is a discussion about the existence of capabilities in the first place. I.e. we do need to take the debate on the terms of that national security folk, imagining that there are processes that can mitigate and contain the abuse of power. Or at least, if you've lost all faith in that, bear with me for this thread in the short term as a hypothetical.   The intent of the system is meant to provide a means to track terrorist activities by its attractive force as an available communication channel for terrorists to use.   Sort of. The national security folk want to be able to track the spread of ideas to get early warnings about upcoming revolts and to understand how ideas 'infect' areas of the world. Then, tools can be used also to encourage or discourage the infection of ideas in certain places and to encourage and discourage revolts, etc.  The problem for national security folk is if large or important portions of communications become private. In this case the large scale analysis can not be done.  In this sense it is not always enemy combatants who are using communication technology considered a target. It is potential enemies and civilians who are potential enemies or who give collective signals about mass social unrest. These folk want privacy for their own reasons but if large or important pieces of the public citizenry get encryption then the spread of jihadist/salafist ideas (for example) can not be tracked and engaged.  I think it's great that you have a strong opinion about the active participation in the control of the spread of ideas. The US government does not recognize free speech of those who are not Americans, and they also maintain that they have the right to be influential - either by hiring PR people or by posting anonymously to message boards, etc. It's a fuzzy area of law, and definitely something we should be having conversations about. Again I think it's great that you have strong opinions here."
crypto,3cjx74,seattlyte,1 point,Fri Jul 10 06:56:35 2015 UTC,"These folk want privacy for their own reasons but if large or important pieces of the public citizenry get encryption then the spread of jihadist/salafist ideas (for example) can not be tracked and engaged.  Sort of. The national security folk want to be able to track the spread of ideas to get early warnings about upcoming revolts and to understand how ideas 'infect' areas of the world   They have a good idea of conditions that would allow certain ideologies to influence and reach 'critical mass'. (Since you have termed their ideas as an 'infection', then certainly you must realize that you state the condition of the public is one thought to be open to the 'radicalist/extremist' views.)  Radicalism/extremism is simply a term to express the normalization of the use of violence as a means in order to obtain an ends. i.e. Going to a hot-war is extreme. Going to a hot-war as a normal measure is extremist.  The US has been in one war or another for a while, and this continued condition of warfare as a normal means is one that is extremist. From this stand-point it is reasonable to bring about the concern of adversarial development of extremist views to undermine society. Another condition that would foster extremism is when the citizens are subjected to extreme measures as a normal means from those with power.  It's a little more than ridiculous if they decide they can intrude on the right of privacy of Americans because they want to study the spread of ideas that are ""infections"" somewhere else because they have developed their own assumption in their own bubble of self-entitlement. It very ridiculous to think a Security Analyst can sit in an office, far removed and develop and compete against those ""in the field"" of areas in question in order to develop their 'infectives'."
crypto,3cjx74,rflownn,1 point,Fri Jul 10 11:07:43 2015 UTC,"They have a good idea of conditions that would allow certain ideologies to influence and reach 'critical mass'.    They have a reasonable idea. They study it because they don't know enough and the new medium (internet) changes the way that information is shared and how to control it.   Since you have termed their ideas as an 'infection'   Infection is a borrowed term (from them). They trade the term 'social contagion' and viruses, etc are a common comparison to memetic ideas.   Radicalism/extremism is simply a term to express the normalization of the use of violence as a means in order to obtain an ends. i.e. Going to a hot-war is extreme. Going to a hot-war as a normal measure is extremist.   Radialism/extremism was a term that was carefully selected. They had Congressional meetings about what they wanted to call anti-Western belief and movement among Middle Eastern people. ""Jihadism"" was decided not to be a good term because it was their term and using it recognized the conflict as war - and indeed a holy one. They chose extremism/radicalism, it's on the record, because this delegitimizes the struggle and goal of the militants and organizations there.   The US has been in one war or another for a while, and this continued condition of warfare as a normal means is one that is extremist   This is awesome. Love it. I'll use it.   It's a little more than ridiculous if they decide they can intrude on the right of privacy of Americans because they want to study the spread of ideas that are ""infections"" somewhere else because they have developed their own assumption in their own bubble of self-entitlement. It very ridiculous to think a Security Analyst can sit in an office, far removed and develop and compete against those ""in the field"" of areas in question in order to develop their 'infectives'.   This is an interesting though. I would agree that it is absurd. We live in pretty absurd times. It sounds like you are very against this use of technology.  Can I encourage you to contact your representatives and say on very concrete terms that you do not like the programs, like DARPA SMISC and the DoD's MINERVA, and the programs and capabilities revealed by Edward Snowden, and the initiatives sought and invested in through the past 16 years of DoD strategic direction to control and direct ideas that the US government thinks are 'infectious'?"
crypto,3cjx74,seattlyte,1 point,Fri Jul 10 17:14:44 2015 UTC,"Can I encourage you to contact your representatives and say on very concrete terms that you do not like the programs, like DARPA SMISC and the DoD's MINERVA, and the programs and capabilities revealed by Edward Snowden   What's the point of referencing obsolete programs? Snowden documents are already obsolete, and there would be expectation that several programs are moved towards the private sector, renamed, redone and have advanced considerably.   This is awesome. Love it. I'll use it.   It may have been applied long ago in a debate before our involvement in committing to another long drawn out war in the Middle East. (edit: It was also on US news television... and it shows how US news has deteriorated considerably)   This is an interesting though. I would agree that it is absurd. We live in pretty absurd times. It sounds like you are very against this use of technology.   They have to realize what they're doing is illegal. What they decide to do is up to them. If they try to define breaking the law as anything but breaking the law, then that is a problem. If they decide to do it, they have to accept the fact that there is consequences. Snowden did break the law in many ways and he is fully aware that what he did was breaking the law. He did not try to redefine it for his own intents. Snowden is willing to face justice for it under rule of law, not under their terms of what ""they"" think law should be."
crypto,3cjx74,rflownn,1 point,Sun Jul 12 06:02:44 2015 UTC,"What's the point of referencing obsolete programs?   These programs - and the Snowden docs - are not obsolete. Government moves pretty slow. The bulk of the same is still there and SMISC/MINERVA haven't been obsoleted. And the purpose of referencing them is so that you can speak with examples and in concrete terms so they can blow it off as vagary.   They have to realize what they're doing is illegal.   They made it legal.  I agree that legality and justice are two, only correlated, things. And that people who are represented care and should care about what representatives do on their behalf."
crypto,3cjx74,seattlyte,0,Mon Jul 13 17:09:14 2015 UTC,"This is filled with unsupported/unproven claims you are stating as fact:   Backdoored standards - I assume you are referring to dual ec drbg, which was never proven to actually be backdoored, it was shown to have the potential for a backdoor and some of the events surrounding the standard led some to that conclusion, but it is not a fact. kept security advancements from the sector - while some progess made by the government may be kept internal this statement is disingenuous as much progress in the field is pushed for/developed by government (ex: sha-2) CALEA applies to telecommunications not computer systems, it does not apply to backup or cloud vendors.  It applies to telecoms. TPMs enhance security, providing hardware backed key storage and platform integrity measures.  There is nothing indicating it is anything like the clipper chip.     Your history is a bit faulty.  And your conclusions are a bit out there for my taste.  I don't think the FBI director is right, but I also don't think his reasoning is what you claim."
crypto,3cjx74,xJoe3x,2,Thu Jul 9 13:07:39 2015 UTC,"No, I was right on all fronts.   It did come out that Dual EC DRBG was purposefully backdoored. Advancements, for example in elliptic curves, have been kept from the public sector (e.g. Edwards curves). CALEA was expanded to computer systems and digital interlinks. CALEA was also just one example - there is a constellation of laws, and cloud, etc are covered. Your take on TPM is laughable. Attestation backdoor anyone? Hardcoded keys from the manufacturer? Located where it can get DMA? NSA/FBI major developers of the standards? Bitlocker keys being backed up to PRISM by Microsoft? There's plenty to suggest this - but the most damning thing is the similarity on all fronts except for the branding (there's also a reason the free software folks decap them).   Please list the faulty bits of history.  My conclusions are sound. I have no doubt you don't have a taste for them.  Snowden leaks and the Defense Department back me up. What do you think Comey means?"
crypto,3cjx74,seattlyte,0,Thu Jul 9 19:17:49 2015 UTC,"It did come out that Dual EC DRBG was purposefully backdoored.   No, some people claimed that is was and it was shown it could have been.  Nothing has indicated it actually was.  On you to prove that claim.   Advancements, for example in elliptic curves, have been kept from the public sector (e.g. Edwards curves).   They are not obligated to share all advancements as they are developed/discovered yet they do share many anyway.   CALEA was expanded to computer systems and digital interlinks. CALEA was also just one example - there is a constellation of laws, and cloud, etc are covered.   The expansion still does not cover what you claim, it was expanded for VOIP and ISPs.  NSLs can be issued under a different law, but do nothing to cover implementations that require user authorization to decrypt.   Your take on TPM is laughable. Attestation backdoor anyone? Hardcoded keys from the manufacturer? Located where it can get DMA? NSA/FBI major developers of the standards? Bitlocker keys being backed up to PRISM by Microsoft? There's plenty to suggest this - but the most damning thing is the similarity on all fronts except for the branding (there's also a reason the free software folks decap them).   My take on it is the reality as it is currently known.  Yours is paranoid rambling on how you think the government is out to get you.  Yes keys are generated upon manufacturer and NSA is involved in standard development, none of that leads to your conclusion.  Nothing has indicated any keys have ever been recorded or vulnerable to government backdoor.  No evidence bitlocker keys are backed up to prism either."
crypto,3cjx74,xJoe3x,2,Thu Jul 9 20:43:05 2015 UTC,"Was released by Der Speigel. But on that front you just assumed I meant Dual EC. Der Speigel released a number of instances with known backdoors. And, really, this isn't a dubious claim. You're trying to stick to it because you don't have much?  Whether or not they are obligated to share, notice you've moved the goal post.  I'm not talking about NSLs. I'm talking about Computer Services. I can pull up the law for you in a second (busy man).  WRT ""paranoid"" ""tin foil hat"" arguments that round down the design and implementation of standards and don't address the points I made (the German intelligence services came out and said attestation was backdoored) - maybe they are paranoid...  You sound like someone who doesn't have the technical knowhow to differentiate these things and someone who didn't read any of the Snowden documents - just checked CNN coverage.  https://search.edwardsnowden.com if you're curious.  Anyway I'll get back to you later today with more if you need more help."
crypto,3cjx74,seattlyte,1 point,Thu Jul 9 21:05:41 2015 UTC,"Der Speigel   It was never proven, just accused.  Go read it.   you've moved the goal post.   I said you were being disingenuous with your statement, ignoring all they do for security.   I'm talking about Computer Services.   Then you are misinterpreting the law, it is not used for that.   There is zero actual evidence TPMs are backdoors, you are free to produce evidence of any of your outrageous claims at any point.   And I have read all the leaks.  I need no additional education to know your claims are BS."
crypto,3cjx74,xJoe3x,2,Thu Jul 9 23:35:30 2015 UTC,"Do you really doubt that Dual EC was a purposeful backdoor? NSA officials have admitted it (and do you trust denials anyway?) Here's some good NYT reporting on it. Former mathematician and NSA researchers admitted it was purposeful. NSA documents showed that the NSA subverted the Dual EC review process and payed to get it secretly used by default at RSA. But I mean, without trying to cause some unsupportable position of doubt about Dual EC, the broader claim (you brought up Dual EC to begin with) is not in doubt at all: NSA doc. Stop this nonsense.   I said you were being disingenuous with your statement, ignoring all they do for security.   No you moved the goal post.  The NSA does do things for security. But read that in context. Don't change the subject.   Then you are misinterpreting the law, it is not used for that.   Section 2516 of the Stored Communications Act for example. Are you a lawyer? Where are you getting your legal information. What allows you to be so confident about your (incorrect) claims?   And I have read all the leaks. I need no additional education to know your claims are BS.   You have not. There are thousands of pages of leaks. Unless you do this full time or something? Please, go into more depth here. Can you give us a quick summary of the full sweeping content of the (public) leaks - especially the stuff not traded highly across the journalism?  You also have not provided claims of anything you've made - such as my history being wrong.  But I'm afraid at this point you are merely trolling. I'll reply to factual, evidenced, substantial comments only."
crypto,3cjx74,seattlyte,1 point,Thu Jul 9 23:59:21 2015 UTC,"NYT reporting   Nothing that confirms, as I said.  Just some people accusing them of doing so.   admitted it was purposeful   Did you actually read that?  I have read it before.  It says nothing like that.  It is an explaination of why things went the way they did, the author does not state a backdoor (or trapdoor as he puts it) was included at any point.     NSA doc   Again, I question if you read your material.  No mention of dual ec or even standards in general.   No you moved the goal post.   You were being disingenuous.   Section 2516 of the Stored Communications Act for example. Are you a lawyer? Where are you getting your legal information. What allows you to be so confident about your (incorrect) claims?   Are you?  You are the one making claims about the law to being with.  I have never seen or heard of any case where CALEA was applied as you suggest.   Also nothing in section 2516 mentions compelling 3rd parties to do anything.   You have not. There are thousands of pages of leaks.    The ones relevant to this conversation and that have been discussed in the news."
crypto,3cjx74,xJoe3x,1 point,Fri Jul 10 02:41:16 2015 UTC,"Well you've never really addressed any of the arguments, reasons, evidence or circumstance around Dual EC. You don't address any of the pieces claimed in prior posts, in the journalism (this article included) or in any associated literature, etc. Those working on the documents said that (at Der Speigel as mentioned earlier) claimed that there was evidence in the documents (ones not made public) that Dual EC was backdoored on purpose. You don't address that - just call it an accusation. You've done this with all evidence. Are you waiting for NSA to file an official statement? What are you waiting for? What in your mind count as something definitive? Question before we go further on Dual EC (remember Dual EC is your thing anyway): do you believe that Dual EC was not a backdoor? Please answer this question in your reply.  If you understand who the people are and how to read between the lines and the context of the document - he's speaking about knowledge of mathematicians at NSA and in the community that supported NSA about the ability to backdoor (Certicom patent) - he's saying that ethical boundaries were breached and that in doing so there's a necessary crisis of trust.  You are right. Let me go find the right doc. It should be counted as evidence for the larger point though, which might need to be reiterated: While in public court the crypto wars appeared to be 'won' in practice they were thwarted.  I've lost context now on this disingenuous thing. Perhaps you could be kind enough to summarize the history of the conversation as you perceive it.  https://www.law.cornell.edu/uscode/text/18/2703  https://www.law.cornell.edu/uscode/text/18/2702  You're discouraging. You have to read the full law.  For example, pursuant to these sections Apple makes available:   Device Registration (name, address, email address, and telephone numbe, iCloud Apple ID) Customer Service Records iTunes (name, physical address, email address, and telephone number, purchase/download transactions and connections, update/re-download connections, and iTunes Match connections, iTunes subscriber information and connection logs with IP addresses, specific content purchased or downloaded). Apple Retail Store Transactions (cash, credit/debit card, or gift card transactions, type of card, name of the purchaser, email address, date/time of the transaction, amount of the transaction, and store location, receipt number) Apple Online Store Purchases (name, shipping address, telephone number, email address, product purchased, purchase amount) iTunes Gift Cards (sixteen-digit alphanumeric code, nineteen-digit code, any purchases, name of the store, location, date, and time, user account iCloud (music, photos, documents, iCloud email, encryption keys, Subscriber Information, iCloud feature connections, connection logs with IP addresses, Mail Logs, records of incoming and outgoing communications such as time, date, sender email addresses, and recipient email addresses, Email Content, Other iCloud Content, Photo Stream, Docs, Contacts, Calendars, Bookmarks, iOS Device Backups, stored photos, documents, contacts, calendars, bookmarks and iOS device backups, photos and videos in the users’ camera roll, device settings, app data, iMessage, SMS, and MMS messages and voicemail) Find My iPhone (including connection logs   [Extracting Data from Passcode Locked iOS Devices For all devices running iOS 8.0 and later versions, Apple will not perform iOS data extractions as data extraction tools are no longer effective. The files to be extracted are protected by an encryption key that is tied to the user’s passcode [~15 bits of entropy], which Apple does not possess. For iOS devices running iOS versions earlier than iOS 8.0, upon receipt of a valid search warrant issued upon a showing of probable cause, Apple can extract certain categories of active data from passcode locked iOS devices. Specifically, the user generated active files on an iOS device that are contained in Apple’s native apps and for which the data is not encrypted using the passcode (“user generated active files”), can be extracted and provided to law enforcement on external media. Apple can perform this data extraction process on iOS devices running iOS 4 through iOS 7. Please note the only categories of user generated active files that can be provided to law enforcement, pursuant to a valid search warrant, are: SMS, iMessage, MMS, photos, videos, contacts, audio recording, and call history.   Other Available Device Information (MAC Address for Bluetooth, Ethernet, WiFi, or FireWire) Requests for Apple Retail Store Surveillance Videos Game Center (Connection logs with IP addresses,  specific game(s) played) iOS Device Activation (including upgrades the software, IP addresses, ICCID numbers, and other device identifiers) Sign-on Logs (iTunes, iCloud, My Apple ID, and Apple Discussions, Connection logs with IP addresses, Sign-on transactional records) My Apple ID and iForgot Logs (password reset actions, Connection logs with IP addresses) FaceTime (logs when a FaceTime call invitation is initiated, content protected by 15 bits of entropy if secure enclave baked key is obtained from manufacturer)"
crypto,3cjx74,seattlyte,1 point,Fri Jul 10 03:25:06 2015 UTC,"Well you've never really addressed any of the arguments,    You are making the claim, you back it up.  Showing people claiming it has been, suggesting it may have been, or stating some circumstances surrounding it is not showing proof of a backdoor.  They may suggest a backdoor, but it is not make it a fact.   The fact is has not been any leak released that showed the nsa backdoored dual ec drbg and no I don't think they did, I could be wrong, but my professional experience leads me to think it is very unlikely.  That is not proof, but I am not the one making the claim.   If you understand who the people are and how to read between the lines and the context of the document    You are really reading between the lines to draw those conclusions.  The general tone is a defense of the agency throughout.   While in public court the crypto wars appeared to be 'won' in practice they were thwarted.   I would strongly disagree with that.  The community continues to research, share, and standardize with great success.   I've lost context now on this disingenuous thing. Perhaps you could be kind enough to summarize the history of the conversation as you perceive it.   You stated advancements are kept from the public sector, I countered that this was disingenuous because it does not show the whole picture as it leaves out their contributes to the field.  And back and forth is went.   https://www.law.cornell.edu/uscode/text/18/2702   Describes when a provider may disclose information, in general this reads to protect user privacy.  This section is a limiting section.   https://www.law.cornell.edu/uscode/text/18/2703   This does allow a LEA to compel a provider to disclose information they have under specific circumstances.  However implementations where the vendor does not hold the keys are still safe as they don't permit the forced availability of information.  CALEA does not extend to this scope."
crypto,3cjx74,xJoe3x,8,Fri Jul 10 13:01:46 2015 UTC,"What should really be banned is private conversation, most if not all terrorists plots include some kind of private conversation."
crypto,3cjx74,toinetoine,12,Wed Jul 8 21:07:04 2015 UTC,"What should really be banned is oxygen, most if not all terrorists plots include some kind of use of oxygen."
crypto,3cjx74,maqp,2,Wed Jul 8 22:24:02 2015 UTC,"That is indeed a brilliant idea. It would solve most of humanity's other problems, too."
crypto,3chpri,pizzaiolo_,25,Wed Jul 8 00:15:15 2015 UTC,https://mta.openssl.org/pipermail/openssl-announce/2015-July/000037.html
crypto,3chpri,rlmaers,4,Wed Jul 8 01:25:16 2015 UTC,you da real mvp.  1000 bits /u/changetip private
crypto,3chpri,Cynofield,16,Wed Jul 8 07:55:20 2015 UTC,Five bucks says it's more export grade crypto downgrade vulnerabilities.
crypto,3chpri,BathroomEyes,5,Wed Jul 8 05:37:30 2015 UTC,It's a quite recent vulnerability so it wouldn't be linked to legacy crypto imo.
crypto,3chpri,aris_ada,8,Wed Jul 8 08:01:50 2015 UTC,"Have the changes already been committed to source but the security implications not made public yet?  Edit: No, they hadn't, but have now. https://github.com/openssl/openssl/commits/master  There have been a few error checks added lately:  Dup peer_chain properly in SSL_SESSION Use single master secret generation function. Check dgram_sctp_write() return value. Check BIO_dgram_sctp_wait_for_dry() return value for error    Also this looks like a rather significant change:     More secure storage of key material. Add secure heap for storage of private keys (when possible). Add BIO_s_secmem(), CBIGNUM, etc. Add BIO_CTX_secure_new so all BIGNUM's in the context are secure. Contributed by Akamai Technologies under the Corporate CLA.     Edit:  These were just added:  Fix alternate chains certificate forgery issue Reject calls to X509_verify_cert that have not been reinitialised  Changes between 1.0.2c and 1.0.2d [xx XXX xxxx]  CVE-2015-1793   During certificate verfification, OpenSSL will attempt to find an  alternative certificate chain if the first attempt to build such a chain  fails. An error in the implementation of this logic can mean that an  attacker could cause certain checks on untrusted certificates to be  bypassed, such as the CA flag, enabling them to use a valid leaf  certificate to act as a CA and ""issue"" an invalid certificate.   This issue was reported to OpenSSL by Adam Langley/David Benjamin (Google/BoringSSL).  [Matt Caswell]   https://www.openssl.org/news/secadv_20150709.txt"
crypto,3chpri,shthed,2,Wed Jul 8 12:42:14 2015 UTC,Those don't appear on the 1.0.1 branch. I'd guess the relevant changes haven't been pushed yet.
crypto,3chpri,cenderis,8,Wed Jul 8 19:01:37 2015 UTC,Well 'high' not 'critical'.  Sounds like it's not heartbleed quality.
crypto,3chpri,seattlyte,8,Wed Jul 8 07:07:41 2015 UTC,"that's only because 1.0.0 and 0.9.8 are not affected.   so it's only to do with ""new"" features (my $5)"
crypto,3chpri,Cynofield,8,Wed Jul 8 07:58:05 2015 UTC,This is why I like Libre SSL. removing operating systems that aren't needed. Removing horrible code. OpenSSL's only goal is fips validation. That's their money.
crypto,3chpri,zimm3r16,2,Wed Jul 8 08:58:30 2015 UTC,Not a huge fan of LibreSSL licensing. I'd also wait for LibreSSL to mature before I give it a chance with anything critical.
crypto,3chpri,godman_8,2,Wed Jul 8 10:10:16 2015 UTC,Of course. It's just good to see another option that doesn't also run FIPS consulting.
crypto,3chpri,zimm3r16,3,Wed Jul 8 11:54:02 2015 UTC,https://twitter.com/RichSalz/status/618145532763054080
crypto,3chpri,defect,2,Wed Jul 8 10:52:00 2015 UTC,"@RichSalz   2015-07-06 19:52 UTC  @jonty @sleevi_ @russss no, probably not for most.     This message was created by a bot  [Contact creator][Source code]"
crypto,3chpri,TweetsInCommentsBot,2,Wed Jul 8 10:52:05 2015 UTC,"""What's with all the preparing?  Why are you always preparing?  Just go!"""
crypto,3chpri,ornothumper,0,Wed Jul 8 13:13:30 2015 UTC,Again??
crypto,3chpri,grungebuddy,1 point,Wed Jul 8 03:32:03 2015 UTC,At least it was responsibly disclosed.
crypto,3chpri,Segfault_Inside,2,Wed Jul 8 15:42:10 2015 UTC,open ssl always has an announcement. it's just since heartbleed that news companies give a shit
crypto,3chpri,Cynofield,1 point,Wed Jul 8 22:43:43 2015 UTC,"Huh, I was under the impression that heartbleed wasn't responsibly disclosed."
crypto,3chpri,Segfault_Inside,-17,Thu Jul 9 01:57:49 2015 UTC,"Notice that people are more secure the longer the details of the explai remain secret. What's the details of the exporter public, every OpenSSL server will be attacked simultaneously.  Contrast this with how things are with today, where no server has been known to have been attacked."
crypto,3chpri,JoseJimeniz,17,Wed Jul 8 03:00:10 2015 UTC,"Not really, you're not secure when there's a secret flaw, you just don't know about it (and you probably sleep better at night)  Being transparent is better, given that there's enough time for a fix or a workaround."
crypto,3chpri,Funnnny,11,Wed Jul 8 04:16:32 2015 UTC,where no server has been known to have been attacked   that's whishfull thinking
crypto,3chpri,poopinspace,3,Wed Jul 8 03:35:39 2015 UTC,Why are you sure no sever with open SSL has been hacked? That is an outrageous assumption.
crypto,3chpri,JoseJimeniz,-2,Wed Jul 8 10:12:11 2015 UTC,...I meant hacked using this exploit.  Of course servers running SSL have been hacked.
crypto,3chpri,JoseJimeniz,6,Wed Jul 8 11:16:23 2015 UTC,"Right with this exploit, outrageous assumption. That's not how this works. It could have been in the wild for who knows how long. It is so rare that no one else noticed."
crypto,3chpri,sapiophile,-6,Wed Jul 8 11:43:34 2015 UTC,"That's why security companies like Kapersky keep traffic logs. They go back and see if anyone was trying to exploit the vulnerability after they've learned about it.  I first learned about this practice after Stuxnet.  So, yes, I am making a prediction - but a correct one. Approximately 0% of web servers have been attacked using this, as yet undisclosed, vulnerability.  And I predict that approximately non-zero percent of servers will be attacked after the details become known.    I don't know why i am so concerned about educating people on the Internet.   Yet i somehow feel compelled to point out that i'm right, and others are wrong.   NY Time: Study Finds No Evidence of Heartbleed Attacks Before the Bug Was Exposed  Ever since the Heartbleed bug was exposed last week, the question everyone has been asking is: Did anyone exploit it before a Google researcher first discovered it?  To date, they’ve witnessed 41 unique groups scanning for and trying to exploit the Heartbleed bug on three honeypots they are maintaining. Of the 41, the majority of those groups — 59 percent — were in China.  But the attacks began only after the Heartbleed bug was discovered on April 8. The computer scientists have also found no evidence of any attacks before the disclosure, and they say it’s impossible to tell if the scans came from real hackers or other security researchers trying to look at the problem.   I have started to learn that if i come across some piece of interesting trivia, i need to copy it, and save the original url. Security companies do maintain logs of traffic, so they can go back and examine it after the fact. Unfortunately i cannot find the article now. So i cannot back up my fact with sources. But i believe it was Kapersky who went back through their traffic logs and found no evidence of the exploit at the time existing in the wild.   So will it be with this.   http://securityintelligence.com/wp-content/uploads/2014/08/heartbleed-1.png  From the study:    6.1 Pre-Disclosure Activity  LBNL’s network spans two /16s, one /20 and one /21.    The institute frequently retains extensive packet traces for forensic purposes, and for our purposes had full traces available from February–March 2012, February–March 2013, and January 23–April 30 2014.  ICSI uses a /23 network, for which we had access to 30-days of full traces from April 2014.  NERSC has a /16 network, for which we analyzed traces from February to April 2014.  The EC2 honeypot provided full packet traces starting in November 2013.   For all four networks, over these time periods our detector found no evidence of any exploit attempt up through April 7, 2014. This provides strong evidence that at least for those time periods, no attacker with prior knowledge of Heartbleed conducted widespread scanning looking for vulnerable servers   Which is interesting, i didn't know that Amazon EC2 maintains a honeypot.   6.2 Post-disclosure Activity  To detect post-disclosure scanning, we similarly examined packet traces from LBNL, ICSI, and the EC2 honeypot. The first activity we observed originated from a host at the University of Latvia on April 8, starting at 15:18 UTC (21 hours 29 minutes after public disclosure)   http://i.imgur.com/IVmrV4g.png  Summary   Number of attacks before disclosure: 0 Number of attacks after disclosure: >0   This is the real world we live, and disclosure has real consequences."
crypto,3chpri,JoseJimeniz,2,Wed Jul 8 12:01:54 2015 UTC,You have some learning to do. That's not how this works. That isn't how any of this works.
crypto,3chpri,slyf,-1,Wed Jul 8 17:24:52 2015 UTC,"I don't know why i am so concerned about educating people on the Internet.   Yet i somehow feel compelled to point out that i'm right, and others are wrong.   NY Time: Study Finds No Evidence of Heartbleed Attacks Before the Bug Was Exposed  Ever since the Heartbleed bug was exposed last week, the question everyone has been asking is: Did anyone exploit it before a Google researcher first discovered it?  To date, they’ve witnessed 41 unique groups scanning for and trying to exploit the Heartbleed bug on three honeypots they are maintaining. Of the 41, the majority of those groups — 59 percent — were in China.  But the attacks began only after the Heartbleed bug was discovered on April 8. The computer scientists have also found no evidence of any attacks before the disclosure, and they say it’s impossible to tell if the scans came from real hackers or other security researchers trying to look at the problem.   I have started to learn that if i come across some piece of interesting trivia, i need to copy it, and save the original url. Security companies do maintain logs of traffic, so they can go back and examine it after the fact. Unfortunately i cannot find the article now. So i cannot back up my fact with sources. But i believe it was Kapersky who went back through their traffic logs and found no evidence of the exploit at the time existing in the wild.   So will it be with this.   http://securityintelligence.com/wp-content/uploads/2014/08/heartbleed-1.png  From the study:    6.1 Pre-Disclosure Activity  LBNL’s network spans two /16s, one /20 and one /21.    The institute frequently retains extensive packet traces for forensic purposes, and for our purposes had full traces available from February–March 2012, February–March 2013, and January 23–April 30 2014.  ICSI uses a /23 network, for which we had access to 30-days of full traces from April 2014.  NERSC has a /16 network, for which we analyzed traces from February to April 2014.  The EC2 honeypot provided full packet traces starting in November 2013.   For all four networks, over these time periods our detector found no evidence of any exploit attempt up through April 7, 2014. This provides strong evidence that at least for those time periods, no attacker with prior knowledge of Heartbleed conducted widespread scanning looking for vulnerable servers   Which is interesting, i didn't know that Amazon EC2 maintains a honeypot.   6.2 Post-disclosure Activity  To detect post-disclosure scanning, we similarly examined packet traces from LBNL, ICSI, and the EC2 honeypot. The first activity we observed originated from a host at the University of Latvia on April 8, starting at 15:18 UTC (21 hours 29 minutes after public disclosure)   http://i.imgur.com/IVmrV4g.png  Summary   Number of attacks before disclosure: 0 Number of attacks after disclosure: >0   This is the real world we live, and disclosure has real consequences."
crypto,3cfvl6,johnmountain,5,Tue Jul 7 16:22:19 2015 UTC,"No shit the proposal is completely ridiculous, willfully ignorant and undermines any security encryption might offer."
crypto,3cfvl6,morphotomy,1 point,Tue Jul 7 23:32:33 2015 UTC,Willfully ignorant is putting it nicely; these scum are willfully arrogant.
crypto,3cggyu,detailsguy,3,Tue Jul 7 18:49:12 2015 UTC,Those backdoors are akin to someone locking his house and placing the key under a fake rock...it's RETARDED.
crypto,3cggyu,Radeh,1 point,Wed Jul 8 13:59:46 2015 UTC,Let's say it wasn't. Let's say the backdoor functioned similar to Dual EC - only the holders of the cryptographic trapdoor key (NSA) would have the ability to intercept communications.  In this hypothetical scenario how do you feel?
crypto,3cggyu,seattlyte,1 point,Fri Jul 10 07:08:04 2015 UTC,"That assumes those keys will be safe, which can't be guaranteed given leaks.   I mean, all you have to do is look at how they ""protect"" other crucial info and stuff: https://www.youtube.com/watch?v=1Y1ya-yF35g  So many good things rely on encryption, I wouldn't want to weaken it...and backdoors DO weaken encryption."
crypto,3cg40a,bjrn,2,Tue Jul 7 17:20:27 2015 UTC,Thank you for that great work. Looking forward to see similar posts from you!
crypto,3cg40a,mss7,2,Thu Jul 9 07:42:20 2015 UTC,Glad that you liked. A sort of similar post that people liked when I wrote it 2012 is this one: http://blog.bjrn.se/2012/07/fun-with-tls-handshake.html
crypto,3cg40a,mss7,2,Thu Jul 9 09:01:01 2015 UTC,"Already checked your previous posts and I think they are really nice and useful. Please keep posting. Not related with /r/crypto but, I also liked this very much: http://blog.bjrn.se/2008/10/lets-build-mp3-decoder.html"
crypto,3cg40a,rlmaers,1 point,Thu Jul 9 09:20:14 2015 UTC,"I liked it, even though it contains a few a mathematical inaccuracies. It's one thing to study ECC, and another to have the balls to experiment with curve generation and write a blog post about it."
crypto,3cg40a,rlmaers,3,Wed Jul 8 00:12:48 2015 UTC,"Cool, anything I should fix/clarify? :)"
crypto,3cg40a,rlmaers,1 point,Wed Jul 8 08:22:32 2015 UTC,"Edwards curves do not have a point at infinity.   Every curve (i.e. projective variety of dimension one) has at least one point at infinity.    All of the above equations are elliptic curves.   The Edwards curves are not elliptic curves (i.e. smooth curve of genus one), as they are singular at [1:0:0] and [0:1:0].   It is possible to define addition, and by extension multiplication, on these elliptic curve points.   This is somewhat mathematically inaccurate, as multiplication is not defined on the curve (i.e. you cannot multiply two points). You can, however, multiply points by integers.  If you're interested in reading more, a friend of mine wrote a master's thesis on generation of strong elliptic curves: http://folk.uio.no/staalezh/thesis.pdf"
crypto,3cg40a,moschles,2,Fri Jul 10 13:51:06 2015 UTC,"Cool, thank you! :-) I appreciate your sense of mathematical purity.  From a practical perspective, I went with the SafeCurves definition of curves (re: point at infinity) http://safecurves.cr.yp.to/equation.html"
crypto,3cee0z,johnmountain,4,Tue Jul 7 06:54:30 2015 UTC,Take a look at CJDNS for a similar system which also manages packet routing.
crypto,3cee0z,Natanael_L,3,Tue Jul 7 18:14:14 2015 UTC,interesting..  How is this supposed to function? is this basically tor without intermediate hops?    Does this effectively make CAs obsolete?   is dnssec mandatory here to prevent MITM attacks?
crypto,3cee0z,apetersson,5,Tue Jul 7 16:48:02 2015 UTC,"It is effectively point-to-point utilizing PGP-style encryption.  Think IPSEC tunneling between devices, but utilizing DNS servers for key lookup and routing, instead of being pre-configured.  This does not replace CAs in the sense that a stolen cert would still need to be able to be revoked should it become compromised.  However, it appears that in its current state, the keys are self-generated and there is no chain of trust for validation.  Should a key be stolen, one could effectively intercept all traffic to the intended device, particularly since the supplied DNS server doesn't have any way to validate an entry.  From what I can gather, there is still a lot that needs to be done to make this a truly secure system.  They touch on the DNS part a little bit here: http://trustiosity.com/snow/how-to-use.html  It wouldn't replace Tor, since traffic would still be point-to-point and wouldn't be anonymous, but it eventually could be used to transparently encrypt network traffic from beginning to end without having to do a key exchange across all devices on the internet, which is an exciting thought."
crypto,3cee0z,Sector95,1 point,Tue Jul 7 17:07:30 2015 UTC,How do different SNOW clients talk?  Is there a central server/hub?
crypto,3cee0z,untitleddocument37,1 point,Tue Jul 7 17:30:54 2015 UTC,"Point-to-point communication, which is facilitated by Snow's DNS server(s).  The automatic NAT traversal bit is still a little bit of a question mark for me though...  Is there a relay machine on each network, with a static NAT?   Not shown above is how snow maps keys to unknown ""real"" IP addresses. The general idea is to have some other machine(s) relay the information and then verify with the public key. This conveniently allows snow to do automatic NAT traversal by using the same relay to coordinate UDP hole punch.  The current relay implementation uses an overlay network with DHT-style routing. This has the advantage of being completely decentralized at the cost of having to rely on potentially unreliable third parties. In the works are an improved overlay routing method that should provide better performance and more resistance to denial of service, and the option to specify a preferred known-reliable relay.""   http://trustiosity.com/snow/how-it-works.html"
crypto,3cee0z,Sector95,1 point,Tue Jul 7 17:48:11 2015 UTC,Will it... crash?
crypto,3cee0z,marijnfs,2,Tue Jul 7 22:53:45 2015 UTC,Boo.
crypto,3chbxi,johnmountain,1 point,Tue Jul 7 22:27:17 2015 UTC,There's also spiped.
crypto,3cen6a,sellibitze,2,Tue Jul 7 09:02:18 2015 UTC,"Finally.  It would have been nice to see why they picked what they picked, but it'd probably take until December that way.  The rules said basically ""we won't tell you why we dropped your cipher, but it's probably for lack of outside analysis"" but most of the ciphers didn't get outside analysis, at least not that DJB cited."
crypto,3cen6a,bitwiseshiftleft,2,Tue Jul 7 17:57:50 2015 UTC,"we won't tell you why we dropped your cipher, but it's probably for lack of outside analysis   For starters, the committee will try to minimize damage and flak where possible.  NIST has this trouble as seen with the AES and SHA3 competitions.  Secondly, the committee does not want to steer or influence future research in the second and subsequent rounds by the committee's input, e.g. ""we chose SILC, JAMBU, and ICE CREAM  because of the XYZ"" and then see a bunch of researchers write papers about AE and XYZ.  There are other reasons for not disclosing comments but it should be fair to trust the committee's decision was not arbitrary.    I feel that there are still quite a few algorithms left.  More than what the research community can exhaustively pour time and effort into.  It would be great to see more pruning soon after the hardware results are published and analyzed."
crypto,3cen6a,throwaway0xFF00,2,Wed Jul 8 00:52:20 2015 UTC,"I basically understand why they don't publish reasons.  I guess I'm just a little disappointed to see so little progress and so little interesting information to analyze, after waiting so long.   I feel that there are still quite a few algorithms left. More than what the research community can exhaustively pour time and effort into.  It would be great to see more pruning soon after the hardware results are published and analyzed.   Yeah, hopefully after another round or two of pruning I'll be able to devote more time to thinking about some of the candidates."
crypto,3ccodv,DrDexterMorgan,9,Mon Jul 6 21:50:12 2015 UTC,"Yes, by wiping the header the remaining encrypted data can no longer be read by anyone without brute-forcing the key, which is impossible. Check to see if LUKS keeps a backup of the header anywhere (say at the end of the drive), or on another disk/storage medium (like a backup DVD containing the header). Make sure all copies of the header are securely over-written and you're good to go!"
crypto,3ccodv,angdev,3,Mon Jul 6 22:34:02 2015 UTC,Ok cool. That makes perfect sense. Thanks!
crypto,3cdkcp,WannabeWingsuitPilot,2,Tue Jul 7 02:04:08 2015 UTC,"Do you wish to have the people in the network be semi-permanent entities? What I mean by this is: if I am 'john,' and I disconnect from the network, I will lose that handle once it is purged from the DHT. I would look into a Twister style user authentication system."
crypto,3cdkcp,sexPekes,2,Tue Jul 7 04:01:58 2015 UTC,"Users in the network will have the choice whether they want to maintain a permanent pseudonym (network Id) or not.  The particular users that'll be using this anonymous messaging feature, though, are very likely to NOT want a permanent presence on the network. They create a new network ID (GUID), use it to communicate for, say, 2 weeks, and then never use that network ID again.  It sounds like, based on what you're saying, a Twister style system might work if we configure our DHT to not purge the handles until 2 weeks passes. I'll look into Twister. Thank you.  Edit: seems Twister uses direct communication between nodes... Which means the nodes sending messages to one another would know each others' IP addresses. :("
crypto,3cdkcp,sexPekes,1 point,Tue Jul 7 04:18:44 2015 UTC,"There is absolutely no system in which nobody knows the IP of anybody else in the system. Just not going to happen. That being said, the direct communication between nodes is not, inherently, an anonymity-breaking feature. Nodes in a DHT are not the same as 'users.'   Nodes are always going to know the IPs of other nodes when 'sending messages to one another.' That is either an inevitability, or you are going to have to offload that process onto a TOR-like network. Your network is never going to be able to scale to the size you say you want on the TOR network, and if it did the anonymity would be broken anyways. I think you have some misunderstandings about how DHT's operate. Nobody can be identified because no node can tell where a message originates from.  If I communicate with John, who will transmit the message to you, he does not know that I'm not simply another link in the chain to you. This is the best 'anonymity' you are going to achieve. Any more than this can NEVER be Sybil-proof.  Edit: Twister's blockchain-based IDs are transient and the best option for your network. You mitigate impersonation and still allow for very cheap/fast distributed identity verification."
crypto,3cdkcp,johnmountain,2,Tue Jul 7 04:42:21 2015 UTC,What about this?
crypto,3cdkcp,sexPekes,1 point,Tue Jul 7 06:59:18 2015 UTC,"From the faq page:   Not shown above is how snow maps keys to unknown ""real"" IP addresses. The general idea is to have some other machine(s) relay the information and then verify with the public key.    This is inherently centralized and not at all what OP is talking about. Addresses could be made of fucking lolcats in this scenario, because it's really just a server doing the routing for them. I would guess that there is some reverse-connection trickery going on but even in the first sentence of the FAQ, it's disqualified from the OP's reqs."
crypto,3cdkcp,Natanael_L,2,Tue Jul 7 07:05:57 2015 UTC,"Even looking up values in a DHT can break anonymity if done nievely... Even under very reasonable threat models (say, attackers are limited to controlling at most 20% of the nodes on the network). The reason this matters w.r.t. communications is that even the DHT lookups required to establish a communication route can be used to deanonimize users.  Here's more info on that: http://freehaven.net/anonbib/cache/ccs10-lookup.pdf  Now you are correct in that it can be done. Here is one (not implemented, purely academic) solution: http://hatswitch.org/~nikita/papers/octopus-icdcs12.pdf  Bitmessage is an example of a p2p network that can (at least in theory) hide IPs from both sender and receiver. They do this using an ""everybody gets everything"" model. Unfortunately that doesn't scale well. :("
crypto,3cdkcp,Natanael_L,2,Tue Jul 7 16:20:37 2015 UTC,Look up I2P Messenger in the I2P network
crypto,3cdkcp,TheMatrixShibe,1 point,Tue Jul 7 15:55:58 2015 UTC,"I've been reading up on I2P, and it looks promising. I2P messenger looks good, but I'm not sure it works if one of the users is offline. We may be able to work around that. This is our best lead so far."
crypto,3cdkcp,bontchev,2,Tue Jul 7 16:02:47 2015 UTC,"For asynchronous messaging, look at I2P's Bote mail"
crypto,3cbmh7,encryb,1 point,Mon Jul 6 17:24:51 2015 UTC,"Not too surprising, what about comparing them to C implementations that have been compiled with emscripten :P"
crypto,3cbmh7,danukeru,1 point,Tue Jul 7 11:46:09 2015 UTC,Will try. Emscripten compiled NaCl is the only one I know of. Any better ones?
crypto,3cbmh7,YuryStrozhevsky,1 point,Tue Jul 7 17:31:22 2015 UTC,"OP delivers. Xsalsa20-Poly1305 does about 8MB/sec on Chrome i5–4200U, compared to 420MB/sec AES-GCM-128.  Not surprising, since AES is hardware accelerated, xsalsa20 is not, and I don't think emscripten has access to AES-NI either."
crypto,3cbmh7,YuryStrozhevsky,1 point,Tue Jul 7 22:10:41 2015 UTC,"Please add a link to a real WebCrypto library: https://github.com/GlobalSign/PKI.js. And forget about such a simple examples as ""SimpleCrypto"" ;)"
crypto,3cbmh7,YuryStrozhevsky,1 point,Wed Jul 8 10:41:54 2015 UTC,"As far as I can tell, PKI.js doesn't work in either IE or Webkit based browsers, making it somewhat limited in the current web environment. And if Promises/WebCrypto is supported properly in all target browsers, simple WebCrypto encrypt with AES-GCM does the job. No need for any other libraries. :-)"
crypto,3cbmh7,YuryStrozhevsky,1 point,Wed Jul 8 16:52:26 2015 UTC,"The PKI.js works at the same evironment as your ""SimpleCrypto"". My words about PKIjs were like ""please do not invent a new wheel"". As for ""no need for any other libs"": it is depends on what do you what. If you need a simple encrypted BLOB of something you can use simple call to WebCrypto ""encrypt"" or even run ""random"" ;). But if you need to have a well-formed CMS message then you will need a full-featured lib like PKI.js."
crypto,3cbmh7,YuryStrozhevsky,1 point,Wed Jul 8 17:09:43 2015 UTC,"The whole point of simplecrypto is to have a library that works on Chrome, Firefox, IE 11+ and Safari and support algorithms that work on all 4 browsers (which is not many). If WebCrypto worked perfectly, there would be no need for simplecrypto.  PKI.js doesn't work on IE (or so the main page claims) and provides all algorithms that WebCrypto spec defines (although many don't work anywhere except Chrome). So if you are a developer who wanted to get started with WebCrypto you could use PKI.js and spend 2 weeks trying to figure out how to support IE and what algorithms work where or you could just use simplecrypto. :-)  I understand the point of PKI.js and I think it is great, but it is solving a completely different problem than simplecrypto."
crypto,3c6z04,fo0,2,Sun Jul 5 13:13:49 2015 UTC,That is actually not at all bad.
crypto,3c6z04,vzq,2,Sun Jul 5 15:48:08 2015 UTC,Merci ! ;-)
crypto,3c6z04,m1000,0,Sun Jul 5 18:54:39 2015 UTC,Nadim really shouldn't be teaching crypto.
crypto,3c6z04,yotta,3,Sun Jul 5 19:25:48 2015 UTC,"This is a very naive thing to say. If you think Nadim is the only one to have ever got crypto wrong, you're living under a rock. Furthermore, if being an expert with no blemishes on your record is the requirement for someone to teach, we'd have no one left to fill the role."
crypto,3c6z04,meandev,2,Sun Jul 5 22:37:29 2015 UTC,Nadim fails to learn from his mistakes and rejects the advice of people who know better than him. He's a narcissist with a highly inflated opinion of his skills..
crypto,3c6z04,yotta,1 point,Mon Jul 6 02:44:12 2015 UTC,"How's that a defense?  Cryptography is notoriously hard - you need to prove your ability to find flaws and to build things that resist attack BEFORE you even deserve the benefit of doubt for your own creations. You must prove you can learn, and that you have been doing so over time."
crypto,3c6z04,Natanael_L,1 point,Mon Jul 6 01:29:33 2015 UTC,is there a reason behind that? Because this is just plain mean to say that.  Reading the other comments it seems you say that because of something else? Care to share more?  If I can say something without knowing the back story: anyone can teach. I do tutorial videos myself just because it helps me understand stuff better.
crypto,3c6z04,poopinspace,4,Mon Jul 6 15:26:24 2015 UTC,"Teaching the wrong things can make the world a worse place.  Tutorials like this are not worthless. They are worse than worthless. People find them, and follow them, having no way to evaluate the quality of the advice. Then the poor security practices they've learned from people who shouldn't be teaching get them hacked.  Nadim is best known for Cryptocat. Cryptocat has a history of poor security implementation. http://tobtu.com/decryptocat.php  More recently, he made Minilock, which had a number of design errors. He argued with real security experts trying to tell him what was wrong with it."
crypto,3c6z04,yotta,1 point,Mon Jul 6 15:53:00 2015 UTC,"Cryptocat has a history of poor security implementation   It was a particular security issue, what library doesn't have any? What cryptographer makes secure cryptosystems/implementations on the first go?   He argued with real security experts   I'm curious as to where you make the distinction ""real"""
crypto,3c6z04,poopinspace,5,Mon Jul 6 17:16:00 2015 UTC,"Do you mean the longstanding particular issue of multiple comically weak ciphersuites being used in a row over months?  I consider real in this context to mean have a formal education or otherwise equivalent level of knowledge, and have demonstrated the capability to break other implementations and the capability to create things that resist attack.   Lacking either one is a massive red flag."
crypto,3c6z04,Natanael_L,0,Mon Jul 6 21:31:41 2015 UTC,"The errors that were found were related to the architecture of the application as well.   Having a server simply acting as a broker, while letting clients accept unsanitized input from the other chat members shouldn't have been there at all from the get go...however it only came to light long after he started recommending his tool to mexican activists as a secure chat alternative.  Not to mention his useless implementation of Fortuna in a language without kernel threads, making it impossible to take advantage of context switching indeterminism from the whole OS environment...  But I digress. By now he's probably crashed and burned and been ridiculed enough that he can explain the basics of a block cipher to you.  I'm waiting to see if his presentation on S-Box design will actually hold any water to judge if that crypto PhD program he's joined will actually deliver."
crypto,3c6z04,danukeru,0,Tue Jul 7 11:16:35 2015 UTC,Well he could serve as an example...
crypto,3c6yyg,fo0,2,Sun Jul 5 13:13:12 2015 UTC,Really interesting thanks
crypto,3c504m,DaWooShit,11,Sat Jul 4 21:08:47 2015 UTC,"Read the ""Security Model"" section carefully.  The receiver needs the nonce to decrypt."
crypto,3c504m,eigma,1 point,Sat Jul 4 21:31:13 2015 UTC,"It would be send with the message, something along the lines of:  hash(msg)[:25] | msg  It would of course reveal some information about the contents."
crypto,3c504m,tom-md,8,Sat Jul 4 21:36:04 2015 UTC,"Some as in potentially all.  Any message that the adversary has less than, say, 40 bits of uncertainty in will be rather cheap to determine.  In short, the message is only as secure as it is random (from the adversary's point of view)."
crypto,3c504m,oconnor663,1 point,Sun Jul 5 00:25:32 2015 UTC,"What if you hashed the message + the secret key to produce the nonce. Or maybe HMAC'd it. You'd still be able to tell when the same message is sent twice (the whole thing is deterministic after all), but you wouldn't be able to do guessing attacks against the message."
crypto,3c504m,tom-md,3,Sun Jul 5 05:08:13 2015 UTC,That is like a slow version of SIV and with out any AAD.
crypto,3c504m,oconnor663,1 point,Sun Jul 5 06:06:37 2015 UTC,"I'm reading the SIV RFC now, and there's a bit I didn't understand:   SIV cannot perform at the same high throughput rates that other authenticated encryption schemes can (e.g., [GCM] or [OCB]) due to the requirement for two passes of the data   Doesn't NaCl do two passes, one for Salsa20 and one for Poly1305? Does the number of passes matter independently of the amount of work you're doing in each pass?"
crypto,3c504m,tom-md,3,Sun Jul 5 13:11:03 2015 UTC,If you are doing more than one pass you can not stream the data; it doesn't matter so much for multi kilobytes messages but it does matter for terabyte messages for example.
crypto,3c504m,bascule,8,Sun Jul 5 18:10:36 2015 UTC,"Unless you're intentionally trying to build a convergent encryption scheme and understand the various security tradeoffs, you're probably better off just using a random nonce.  One big problem with just taking a hash of the plaintext and exposing that as a nonce is preimage attacks against low entropy data. An attacker can perform a brute force search based on the value of the nonce.  For this reason convergent encryption schemes often include an additional secret (i.e. a ""convergence secret"") in the derivation of the key/nonce."
crypto,3c504m,dchestnykh,3,Sat Jul 4 23:38:54 2015 UTC,"This idea is similar to SIV, however it uses a keyed hash as an IV instead of the plain hash, which is much better, as without knowing the key you can't figure out what the message was, unlike with your scheme. There's also a CAESAR candidate, HS1-SIV which uses an almost universal (keyed) hash function to derive IV for ChaCha. Also, GCM-SIV.  If you want such a deterministic encryption, use HMAC (possibly, with a different key) as an IV, not plain hash."
crypto,3c504m,user_doesnt_exist,6,Sun Jul 5 11:19:53 2015 UTC,"Very high chance of sending the same message twice which would use the same nonce, which completely breaks the security"
crypto,3c504m,Chandon,8,Sat Jul 4 21:30:32 2015 UTC,"False. Reusing the same nonce for the same message is much less bad than reusing it for two different messages. It only reveals that you sent the same message twice, not message contents."
crypto,3c504m,DoWhile,4,Sat Jul 4 22:07:04 2015 UTC,"In fact, this is leveraged as a plus for secure deduplication schemes."
crypto,3c504m,user_doesnt_exist,3,Sat Jul 4 22:29:06 2015 UTC,"Yep, realised that after I sent this, replay attacks are still a problem, and the fact that the sender will have to send the message in the clear so the receiver knows what the nonce is...."
crypto,3c504m,oconnor663,1 point,Sat Jul 4 22:18:02 2015 UTC,"Woulden't replay attacks be a problem regardless (unless the nonce was strictly incrementing), there are no time stamps in the boxes?"
crypto,3c504m,user_doesnt_exist,1 point,Sat Jul 4 22:39:25 2015 UTC,The nonce is presumably still prepended to the ciphertext.
crypto,3c504m,silverforest,1 point,Sun Jul 5 03:46:53 2015 UTC,"Distinct messages between the same {sender, receiver} set are required to have distinct nonces   I assume that distinct messages means messages with diffrent content, not just the same content in diffrent boxes?   The nonce would be the same for every message with the same content."
crypto,3c504m,_zenith,1 point,Sat Jul 4 21:39:35 2015 UTC,"Which makes the scheme vulnerable to replay attacks, which is what the nonce is supposed to protect from"
crypto,3c504m,angdev,1 point,Sat Jul 4 22:08:35 2015 UTC,"You are allowed to use totally random nonces , they don't have to be counters. Alteratively you can append the current time (in nanoseconds, say) to a random nonce and be pretty much guaranteed unique nonces."
crypto,3c504m,angdev,1 point,Sat Jul 4 22:46:03 2015 UTC,This is pretty much the block mode SIV. The disadvantage is that it is necessarily a two-pass function.
crypto,3c504m,silverforest,1 point,Sun Jul 5 11:28:50 2015 UTC,"Hashes are not unique and nonce's need to be unique, so it's a really bad idea. Why can't you use a counter?"
crypto,3c504m,silverforest,1 point,Sat Jul 4 21:29:49 2015 UTC,"They would need to remember the counter or start at a random index (back to random).  If they always start at a fixed point, and does multiple connections they are bound to have more that one message with the same nonce (I would think)."
crypto,3c504m,rflownn,2,Sat Jul 4 21:41:44 2015 UTC,"The nonce only needs to be unique for each key. I am assuming each new connection would have a brand new key, thus the counter can always start at 0 and increment once per use."
crypto,3c504m,sellibitze,1 point,Sat Jul 4 22:12:05 2015 UTC,"Distinct messages between the same {sender, receiver} set are required to have distinct nonces   Here the sender and reciever is used to describe their public keys. Multiple connections would share the same keys, in fact the system has no notion of a connection, every blob is a self contained box (except for the nonce)."
crypto,3c504m,air_ogi,1 point,Sat Jul 4 22:37:50 2015 UTC,"Have part of the nonce be the current time in nanoseconds, and the rest be randomness (to prevent a collision in the case of a clock issue or other fault). You will now magically have a monotonically increasing nonce without the need to store state."
crypto,3c2q6i,based2,1 point,Sat Jul 4 05:17:50 2015 UTC,http://www.bortzmeyer.org/qualite-cles.html
crypto,3c2q6i,poopinspace,2,Sat Jul 4 05:18:05 2015 UTC,"la nécessité d'utiliser une valeur imprévisible (et pas forcément aléatoire, contrairement à ce qu'on lit souvent, cf. RFC 6979)   If it's not random, then it can be predictable"
crypto,3c2q6i,DoWhile,1 point,Sat Jul 4 07:05:09 2015 UTC,https://eprint.iacr.org/2015/262
crypto,3c1cwk,mss7,10,Fri Jul 3 21:28:44 2015 UTC,"Read others code, like libressl or libsodium... Read the Common Vulnerabilities and Exposures feeds. Read about secure coding: https://github.com/paragonie/awesome-appsec Automate testing process and test with known test vectors."
crypto,3c1cwk,Abderraouf_Adjal,3,Sat Jul 4 01:20:11 2015 UTC,"Also, the new open source TLS library by Amazon s2n. Reportedly just ~12.6 kLoC according to the top comment in the HN discussion about the news. Additionally there's external code but still the total is quite small."
crypto,3c1cwk,cu_t,5,Sat Jul 4 15:46:15 2015 UTC,"I think david wheeler's secure programming howto addresses many real world concerns, such as zeroing buffers, validation input, application security, etc.  It does get into crypto nuts and bolts, but I don't think it addresses side channel or timing analysis.  But aside from that, it is an incredibly solid document for designing secure software."
crypto,3c1cwk,cunttard,3,Sat Jul 4 06:56:19 2015 UTC,Here's a good resource in regards to the auditing aspect: (Thanks to aydiosmio)  https://np.reddit.com/r/crypto/comments/3blegl/cenocipher_free_opensource_software_updated_to/
crypto,3c1cwk,merkle_jerkle,2,Fri Jul 3 21:35:29 2015 UTC,"I wasn't aware of that post, it is useful. Thank you!"
crypto,3c1cwk,danukeru,2,Fri Jul 3 21:45:46 2015 UTC,"""SSL and TLS : Designing and Building Secure Systems"" by Eric Rescorla is a good read.  *fixed"
crypto,3c1cwk,groumpf,1 point,Sat Jul 4 10:52:24 2015 UTC,"That should be ""Rescorla"", if anybody is confused and Google suddenly became bad at spell-checking."
crypto,3c1cwk,oortsaurus,1 point,Thu Jul 9 19:57:18 2015 UTC,In addition to what everyone else said: do not use C++ or similar languages. Use any language where shooting yourself in the foot (in terms of memory) is strictly not allowed by the compiler.
crypto,3c1cwk,Natanael_L,1 point,Sat Jul 4 20:33:14 2015 UTC,"Could you explain this a bit? What could go wrong in C++ but not in, I don't know, C?"
crypto,3c1cwk,3pg,2,Sun Jul 5 01:22:41 2015 UTC,"He is rather comparing to Java or Rust. C style languages allow for endless ways to screw up. It is only really long time programming geniuses which frequently manage to write near flawless C code without needing a thousand bug fixes.  You can accidentally parse variable data as code, write to unassigned memory, read data outside the variable you intended to read, overwrite code in memory, etc...   Memory safe languages protects against the most common errors by not allowing known unsafe behavior."
crypto,3c1cwk,kingkilr,3,Sun Jul 5 04:12:09 2015 UTC,"Secure programs will need programming geniuses somewhere, either in your own organization or in the organization responsible for developing the high-level tools. So far, I have not found any high-level tools with sufficiently high security standards for me to trust it. Eventually someone will write such a tool, but until they do I will stick with C."
crypto,3c1cwk,merkle_jerkle,-6,Mon Jul 6 05:21:11 2015 UTC,Don't implement your own crypto.
crypto,3c1cwk,kingkilr,5,Fri Jul 3 21:35:24 2015 UTC,"If that rule applied to everyone, we would have no cryptographic software."
crypto,3c1cwk,spap-oop,7,Fri Jul 3 21:58:38 2015 UTC,"If more people knew the rule applied to them, I wouldn't have reviewed an app this week that used AES in CBC mode with a fixed IV and no MAC."
crypto,3c1cwk,Ben347,5,Fri Jul 3 22:53:09 2015 UTC,This is possible without even implementing your own crypto.
crypto,3c1cwk,spap-oop,5,Fri Jul 3 23:43:09 2015 UTC,"""Implementing your own crypto"" is often meant to include even just choosing your own primitives, or block cipher modes."
crypto,3c1cwk,Natanael_L,3,Sat Jul 4 01:26:35 2015 UTC,"That's like calling writing HTML ""web programming""."
crypto,3c1cwk,merkle_jerkle,2,Sat Jul 4 01:42:01 2015 UTC,And people still get it wrong
crypto,3c1cwk,R-EDDIT,2,Sat Jul 4 10:42:42 2015 UTC,"fixed IV   Geez...more people need to learn more about cryptography. Not only mathematics, but implementation. Some can't get there without rolling their own shittyprogramming first. Was the app accepted or rejected?"
crypto,3c1cwk,danukeru,3,Sat Jul 4 04:01:34 2015 UTC,"I know and I don't.   But, I would like to know how to do it properly."
crypto,3c1cwk,Natanael_L,3,Fri Jul 3 21:43:02 2015 UTC,Have you taken classes on cryptography? The coursera Stanford course is very good and free.
crypto,3c1cwk,groumpf,3,Fri Jul 3 22:44:49 2015 UTC,"ie. how we've ended up with a generation of programmers that can't review crypto at all, and suddenly OpenSSL happens...  I think it should be ""don't implement your own crypto alone, and never public code without releasing a design document/threat model/ etc etc etc."""
crypto,3byqog,poopinspace,5,Fri Jul 3 06:31:06 2015 UTC,"Can we have a ""Why is GMAC safe?"" sequel? :) AFAIK there is a proof for that but I don't have access to the original paper…"
crypto,3byqog,sellibitze,3,Fri Jul 3 15:26:54 2015 UTC,GMAC is based on universal hashing.  I can't find anything useful really quickly but there are papers that discuss the security with respect to field size vs. # of msgs vs. max message length.  DJB touches on it in his polymac1305 stuff
crypto,3byqog,untitleddocument37,2,Fri Jul 3 15:33:31 2015 UTC,Great work.
crypto,3bvixr,icakir46,10,Thu Jul 2 14:24:02 2015 UTC,I wonder what the motivation of not just using AES was....
crypto,3bvixr,untitleddocument37,14,Thu Jul 2 15:10:59 2015 UTC,"Or any of the other AES-competition finalists...   Or any of the recent stream ciphers like ChaCha, etc"
crypto,3bvixr,ivosaurus,3,Thu Jul 2 16:48:42 2015 UTC,"There are things a block cipher can do that a stream cipher can not. Or at least not trivially.  Everyone I know can tell you how to transform a block cipher into a stream cipher but I don't know anyone who, off the top of their heads, can name a well-founded method to create a block cipher from a stream cipher."
crypto,3bvixr,tom-md,2,Fri Jul 3 02:15:30 2015 UTC,"A good steam cipher is hard to get wrong, unlike a block cipher where there are many pitfalls to fall into with simply choosing a mode,  which additionally can wreck your performance if done in software. Which, as it happens, is what it's being used in atm,  and as it happens, stream ciphers tend to be good in."
crypto,3bvixr,ivosaurus,2,Fri Jul 3 04:31:15 2015 UTC,"Can the issues with block ciphers not be solved by having good defaults for mode, padding etc.?"
crypto,3bvixr,cybergibbons,1 point,Fri Jul 3 06:16:00 2015 UTC,"Technically yes. But what are ""good defaults"" has changed a lot over the recent years as various combinations were found to have critical flaws."
crypto,3bvixr,Creshal,5,Fri Jul 3 09:11:39 2015 UTC,You can incorrectly use ChaCha really easily.
crypto,3bvixr,untitleddocument37,9,Fri Jul 3 12:50:50 2015 UTC,It's probably a mix of paranoia and a way to favor local industry and keep bugged foreign equipment out?
crypto,3bvixr,hr01,2,Thu Jul 2 21:53:38 2015 UTC,"It would make sense if they were concerned to protect against side-channel analysis of AES. AES can fails from caching timing attacks (i.e. timing cache, power use, etc... on cache-line hits and misses), etc..."
crypto,3bvixr,rflownn,1 point,Sat Jul 4 22:57:41 2015 UTC,I can buy a sub $100 CPU that supports AESNI ...
crypto,3bvixr,untitleddocument37,1 point,Sun Jul 5 23:17:04 2015 UTC,How does that eliminate the side-channel attacks? Or are you claiming that the performance outweigh the security requirements?
crypto,3bvixr,3pg,2,Mon Jul 6 03:57:25 2015 UTC,cache/timing doesn't apply to AESNI since it's a constant time implementation.  Power attacks might still apply but that assumes you can trace the power which many/most remote attackers can't do.
crypto,3bvixr,untitleddocument37,5,Mon Jul 6 10:28:02 2015 UTC,"Hm.  It'd be interesting to see the competition documents to find out the reasoning and cryptanalysis behind the Kalyna design.  It's a little weird that they went with a 512-bit key.  That's pretty big for a symmetric cipher.  The 512-bit block size is also big, but it's easier to find good reasons for a wide block mode.  I wonder if there's an efficient way to calculate the S-boxes, or if you'll have to look them up in memory.  AES's lookup tables have caused some side-channel problems over the years.  They also kept talking about software performance, but there's a lot of shuffling and GF28 ops.  At the same time, the 64-bit add/sub will be annoying in hardware.  So I wonder what the performance really is."
crypto,3bvixr,bitwiseshiftleft,3,Thu Jul 2 17:35:13 2015 UTC,"There's a report on the selection criteria. As far as I can gather from slides and such, the S-Boxes are randomly generated, so no structure to explore there. From the report (listing the differences against AES):   eight random generated S-boxes, filtered according to DC, LC and degree of Boolean polynomial criteria   There are also the usual DC/LC probability bounds one would expect from an SPN like this. It appears whatever committee selected this was overly worried about the relatively low algebraic degree of AES, hence favoring random S-Boxes."
crypto,3bvixr,pnKYe4IIA,1 point,Fri Jul 3 01:54:12 2015 UTC,Thanks!
crypto,3bvixr,bitwiseshiftleft,2,Fri Jul 3 05:48:50 2015 UTC,"It not only 512-bit- <quote>Kalyna supports block size and key length of 128, 256 and 512 bits (key length can be either equal or double of the block size). </quote>"
crypto,3bvixr,errorrishe,1 point,Fri Jul 3 02:44:00 2015 UTC,"512 bit keys and block size may come handy if they want to make a hash function from it. Also, disk encryption modes, such as XTS, are good candidates for larger block sizes."
crypto,3bvixr,dchestnykh,1 point,Thu Jul 2 22:37:42 2015 UTC,"Block size, yes.  For the keys, that makes sense, but only if the cipher is specced and analyzed to be secure as a hash function in whatever chaining mode."
crypto,3bvixr,bitwiseshiftleft,-6,Fri Jul 3 00:16:55 2015 UTC,512 is scraping what the NSA is incapable of cracking. It should be the minimum and the recent articles about the alleged RSA implementation error talk about this in depth.
crypto,3bvixr,bitwiseshiftleft,11,Thu Jul 2 17:54:28 2015 UTC,"512 is scraping what the NSA is incapable of cracking.   Not for a symmetric cipher.  If NSA doesn't know a weakness in your cipher, or in all ciphers (eg, P=NP), then 256 bits is just plain infeasible.  See Schneier's Applied Cryptography:   [These numbers] strongly imply that brute-force attacks against 256-bit [symmetric cipher] keys will be infeasible until computers are built from something other than matter and occupy something other than space.   He didn't consider quantum computers in his analysis, but even if NSA can build them, a cluster of THz linear quantum computers running Grover's algorithm for a century only give a savings of 270 or so.  So it turns from ""an ideally efficient cluster of computers would exhaust the energy in the galaxy"" to ""an ideally efficient cluster of THz quantum computers would exhaust enough energy to boil Earth's oceans dry every few hours for a century ... just for the program counter"".  I understand the urge to add a stupidly huge key size for folks who want to overengineer.  Maybe it adds some extra defense if your cipher turns out to be weaker than you hoped.  But let's be clear: 512 bits is stupidly huge."
crypto,3bvixr,zimm3r16,1 point,Thu Jul 2 18:58:01 2015 UTC,Very interesting. I never knew cracking was so far off. (Given no other weakness. ).
crypto,3bvixr,xor_rotate,7,Fri Jul 3 01:37:54 2015 UTC,"I might be misunderstanding you.  This is a symmetric cipher, so even 128-bits is seen as secure against brute force attacks by nation state level adversaries."
crypto,3bvixr,AceyJuan,-2,Thu Jul 2 18:19:31 2015 UTC,"Why is that? I recall that a 118 bit key (?) was cracked by volunteer computer time a decade ago. With specialized modern equipment and a large budget, cracking 128 bits seems plausible. Sure, 10 extra bits is a lot, but so is 10 years of Moore's Law."
crypto,3bvixr,TNorthover,3,Fri Jul 3 00:26:35 2015 UTC,"What makes you say that about 512-bit keys?   For symmetric crypto I think it's massively out of range of anyone (consensus seems to be that you only even need to worry about 128-bit if you think quantum computers are an imminent threat); for RSA, 512-bit keys were factored publicly 15 years ago."
crypto,3bvixr,SirRobertKiN,3,Thu Jul 2 18:23:51 2015 UTC,RSA =/= block cipher  Keys for public/private crypto have very different standards
crypto,3bvixr,P-e-t-a-r,9,Thu Jul 2 18:47:39 2015 UTC,"Well I liked that someone else is doing cryptography seriously too. I do not like USA pulling all the strings when it comes to world wide use crypto algorithms. So, yeh. Great work and congratulations to Ukraine. Keep on with the great work, and good luck!"
crypto,3bvixr,AngrySkillzz,15,Thu Jul 2 15:47:46 2015 UTC,Rijndael was written by a couple of Belgians.
crypto,3bvixr,thatwasntababyruth,5,Thu Jul 2 18:24:36 2015 UTC,"And the S(hamir) in RSA is Isreali, although that's pretty close to American.  I believe that Keccak (now SHA-3) was invented by Belgians too. NIST just performs the function of standardizing, the rest of the world chose to accept their standardized versions."
crypto,3bvixr,zimm3r16,1 point,Thu Jul 2 23:24:21 2015 UTC,Ya Israeli American relations much closer than Ukraine American relations. ;)
crypto,3bvixr,funkysash,10,Fri Jul 3 01:38:51 2015 UTC,"Just because AES was standardized by NIST doesn't mean that the USA are anyhow more involved in it. While it would be nice to have crypto competitions all over the world, those competitions should be international with a panel of international and independent experts. There's virtually no reason to prefer cryptographic algorithms designed in one country over those from another country."
crypto,3bvixr,P-e-t-a-r,4,Thu Jul 2 17:57:58 2015 UTC,Except NSA involvements like ones in ECC for deliberately weakening secure algorithms.
crypto,3bvixr,untitleddocument37,3,Thu Jul 2 19:16:46 2015 UTC,Ugh this statement bothers me because you're deliberately confusing the issue.  NSA weakened EC-DRBG but the flaws in Weierstrass curves wasn't due to NSA since NSA didn't even propose the curves (Certicom did) and even then the current known flaws weren't known then by the community.
crypto,3bvixr,P-e-t-a-r,0,Fri Jul 3 12:52:29 2015 UTC,"Even so. Why do all widely known crypto standards are from USA? We know what happened with DES developed at IBM? Also almost all wi-fi security protocols are broken. MD5, SHA1 too. Not to talk about RD_Rand in intel processors. There all other kinds of bad not accidentally crypto fails like ones that cold be watched at https://www.youtube.com/watch?v=dy3-QZLTpbQ -- by Jacob Appelbaum. I know that USA (NSA, CIA, FBI, and GCHQ, MI5/6..) also needs strong cryptography for themselves, but at the same time  are trying to undermine/break them in order to see encrypted data. And that is like trying to sit on two chairs, you can't have both. Ether crypto algorithm are strong or not.  If you purposely backdoor them, well your enemy might find and exploit the same backdoor and use it against you. The only difference to America is that when they do that it is fine 'cause ""they are fighting terrorists"", and when other hackers do the same thing that is bad and they must be terrorists. I am so glad that the world today has Assange, Appelbaum, Snowden, ... and that I am not in America."
crypto,3bvixr,untitleddocument37,5,Fri Jul 3 14:38:45 2015 UTC,"You're looking at it somewhat with an incorrect view on the history.  For starters, the design of MD5 (and SHA-1) are based on a well studied design criteria.  Essentially MD5 (and all other MD hashes) is a block cipher where the message is the key and the IV is the plaintext.   There is a paper from the early 90s that examined 64 variants of CBC (and other) modes in order to create a hash function.  Where MD5/SHA1 (and MD4) failed is that along with not being that secure as a cipher their key schedule wasn't that strong against related key cryptanalysis (something that wasn't really invented by then).  MD hashes came out of countries other than USA.  While MD4/5 and SHA1 are American RIPEMD and TIGER/192 aren't and neither are the scores of other MD based hashes that were broken soon after coming out.  You're looking at a 20+ year old algorithm and then applying a 6 month old attack to it and saying ""see look they backdoored it!""  You could apply that 20/20 vision to most any engineering failure and say ""see look they intended for your ABS to fail because they should have known about this flaw in the design that only came out 8 years later...."""
crypto,3bvixr,P-e-t-a-r,0,Fri Jul 3 14:51:42 2015 UTC,"I haven't found that RIPEMD-160 is broken. But however, it turns out that even it is theoretically broken, Tiger192 is still much more secure than MD5 and SHA1 since the attack on them takes 239, and 277 respectively while attack on Tiger takes 2188 according to wikipedia.  My point is that, as well as software (open-source), the hardware and protocols/standards should be open and developed all over the world. And not just favour USA standards as if they are the best. I know I sound anti American, and I know other countries are not much better Like China. But how can anyone say criticise China's censorship from England when mister Cameron is proposing same sh*t  in UK with 'banning encryption'? I know I have jumped to another subject, and you do not need to answer. And let's say I agree on your comment below."
crypto,3bvixr,untitleddocument37,2,Fri Jul 3 15:52:35 2015 UTC,"You're kinda missing the point ... AES is Belgian, WEP was designed by people all over the planet (many non-americans), etc...  The NIST process involves comments from all over the globe not just Americans and people use NIST standards because they're generally the only ones bothering to put out comprehensive specs for things.  I mean in Canada we had CAST ciphers but even CSE recommends whatever NIST does.  The problem is you have no idea how wide the crypto community is.  Conferences like EUROCRYPT exist predominantly because there are that many people outside of NA who research crypto.  CHES/FSE move around, SAC is Canadian, CRYPTO is american, etc...  Even if you look at new things like Curve25519 (American) the people inventing it (DJB) aren't the ones trying to standardize it (e.g. EdDSA and TLS and whatever) ... Heck ChaCha (American) and Poly1305 (American) are some new algorithms being thrown into the ring lately.  Countries like China/Korea/etc come up with their own standards to try and have some form of vendor/country of origin lockin.  The SM3/SM4 cipher/hash specs for instance aren't published in English (there are translations but they're horrible).  Camellia was originally only published in Japanese (iirc).  ECKDSA is a Korean specific standard, etc...  But these are all coming out years after NIST came around."
crypto,3bvixr,floodyberry,3,Fri Jul 3 16:01:24 2015 UTC,SBoxs and round keys isn't really what I'd call exciting new crypto.
crypto,3bvixr,P-e-t-a-r,1 point,Fri Jul 3 10:58:21 2015 UTC,Maybe it is new to Ukraine. LoL
crypto,3bvixr,RainbowNowOpen,2,Fri Jul 3 11:48:43 2015 UTC,press decleration: https://translate.google.com/translate?hl=en&sl=auto&tl=en&u=http%3A%2F%2Fwww.dstszi.gov.ua%2Fdstszi%2Fcontrol%2Fuk%2Fpublish%2Farticle%3Fart_id%3D120158
crypto,3bvixr,Nusr,-2,Thu Jul 2 22:42:51 2015 UTC,"In Ukraine, plaintext ciphers you."
crypto,3bx0ur,WannabeWingsuitPilot,3,Thu Jul 2 21:14:28 2015 UTC,"If I know value x (because I gave it to you), then I can easily verify if value you gave me back is equal to RIEPMD160(x) or not. If it is equal then coin landed heads up. If it is not equal then it landed heads down."
crypto,3bx0ur,martins_m,2,Thu Jul 2 21:47:05 2015 UTC,"As /u/martins_m pointed out, RIPEMD160(x) is a function where the output is entirely based on the value of x, so yes we would be able to tell the output from random. Using this website we can try it out!  I will give you x = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"" and now you privately flip the coin and return with some value. If the value you tell me is anything but 0x814207c6ad9dad53e149ed1f108aa118f729df00 then I know you flipped a tails."
crypto,3bx0ur,angdev,1 point,Thu Jul 2 23:26:58 2015 UTC,Thanks! I fixed my game. It clearly didn't capture the notion I was looking to capture. Would you mind taking a look at the corrected version?
crypto,3bx0ur,angdev,1 point,Fri Jul 3 00:12:25 2015 UTC,"Then the answer is yes, it would be indistinguishable from random. Many block ciphers are used for secure PRNG (like AES etc)."
crypto,3bx0ur,godman_8,1 point,Fri Jul 3 00:42:52 2015 UTC,Excellent thank you.
crypto,3bvje2,endtoendcrypto,12,Thu Jul 2 14:27:47 2015 UTC,"How about using a password to generate an elliptical curve key, a la peer.io?  Share the public key with the server, use the private key to authenticate."
crypto,3bvje2,tom-md,2,Thu Jul 2 15:14:36 2015 UTC,I would really want to avoid asymmetric encryption completely. It's an Android app so I'd rather avoid the headaches of building something like libsodium too.
crypto,3bvje2,funkysash,2,Fri Jul 3 08:24:14 2015 UTC,"If you are using Java, you could simply use Spongy Castle."
crypto,3bvje2,DoWhile,2,Fri Jul 3 14:42:39 2015 UTC,elliptical   Exercise-based cryptography!
crypto,3bvje2,tom-md,1 point,Fri Jul 3 03:57:40 2015 UTC,The best! ;-)
crypto,3bvje2,CthulhuIsTheBestGod,4,Fri Jul 3 04:24:55 2015 UTC,Something like how ssh keys work?  Encrypt the key with the passphrase and ask them for it every time?
crypto,3bvje2,AusIV,4,Thu Jul 2 16:01:40 2015 UTC,"Take a look at the Secure Remote Password protocol. I wrote a Django and Javascript implementation a while back, but see the disclaimer about security risks. Those security risks apply to Web applications, but wouldn't be a problem for desktop or mobile apps."
crypto,3bvje2,SpeakerToLampposts,2,Thu Jul 2 17:04:50 2015 UTC,"You'd have a number of options for what to use as the password hash for SRP. I don't immediately see any problem with using the same hash (PDKDF2, scrypt, whatever) for both encryption and authentication, since the server only ever sees the verifier, and recovering the hash from that would require solving a discrete logarithm. You'd probably also want encrypt the data with a random key, then use the hash as a key-encrypting-key to store that (allows for fast password changes). Am I missing anything?"
crypto,3bvje2,Natanael_L,2,Fri Jul 3 06:07:37 2015 UTC,"Don't forget SQRL one of the most interesting candidates for many reasons.   Chief among which is that the server has no database of passwords nor identities to compromise!   If you don't collect it, when you get hacked you can't loose it..."
crypto,3bvje2,Natanael_L,1 point,Fri Jul 3 06:56:08 2015 UTC,FIDO's U2F and UAF are similar and probably better IMHO.
crypto,3bvje2,Natanael_L,1 point,Fri Jul 3 17:13:58 2015 UTC,"FIDO's U2F   I own a yubikey myself, and I enjoy it... However, they are quite different from SQRL in that the U2F/UAF schemes are designed to be compatible with legacy arcitectures and as such the chief aim is the secure collection and retention of user identities! Two factor doesn't stop a hacker from popping the database - it only stops him from using the information within!  In SQRL, the website no longer collects passwords or usernames, it gets a pubilc key that it uses for identity and that is it! It is a zillion times better from a security perspective."
crypto,3bvje2,polyclef,1 point,Fri Jul 3 21:20:30 2015 UTC,"Same with U2F. They get a public key unique for each site, the hardware token authenticates to the site with that unique key."
crypto,3bvje2,funkysash,1 point,Sat Jul 4 03:54:39 2015 UTC,maybe I am not understanding something here?   I thought that U2F still used usernames and passwords and that UAF was 'passwordless' login...  I don't care what win's - I only care that what wins meets two requirements:  1) I control my identities and secrets not the commercial entity.  2) I control what I choose to disclose about myself to the entity.
crypto,3bvje2,AngrySkillzz,1 point,Sat Jul 4 09:41:39 2015 UTC,"U2F allows for still using passwords (don't need it though), and still use usernames.   When registering, your token device generates a fresh keypair, encrypts the asymmetric private key with its static symmetric secret key, uploads the keypair. This is of course associated with your username.  On login, you enter your username and your token gets sent the encrypted key and a challenge that's been encrypted to this keypair's public key. Your device decrypt the private key, decrypt the challenge, generates a response and encrypts the response with the public key of the server.  Two separate colluding servers have no clue if you use the same token or not on them both. Or if anybody is reusing tokens."
crypto,3bvje2,Natanael_L,1 point,Sat Jul 4 10:16:47 2015 UTC,use brainkey.github.io to generate a ssh key.  a variant that looks like a more conventionally system could be created too.
crypto,3bvje2,AngrySkillzz,1 point,Fri Jul 3 08:04:14 2015 UTC,"I looked into what LastPass does and they use PBKDF2 to derive the encryption key used. The number of iterations for the user is stored on the server and the username is used as a salt for the passphrase.  So to derive the secret encryption key, they run n iterations of PBKDF2 on the passphrase. Then for authentication they run 1 more iteration of PBKDF2 on the encryption key using the passphrase as a salt and ship that off to the server to login.  Is this a good idea? I was thinking of doing something like this, but storing the user's random salt on the server like keybase."
crypto,3bvje2,icStatic,0,Fri Jul 3 08:31:07 2015 UTC,"You probably don't want to use PBKDF2. The Password Hashing Competition is going to end soon™. All of the finalists should be better at defending against current threats than PBKDF2. Most finalists support key derivation and some additionally support server relief. You could either combine the two modes or run them separately.  Make sure that you hash again on the server, because in this scenario it becomes the plaintext password. This threat is not overly severe because it's unlikely that another service uses the same settings for client-side hashing, whereas passwords are often reused between multiple services, but in general it's consider a bad move to simply save whatever the client uses to authenticate.  Imho it's a bad move to use the passphrase as a salt on the client, because it keeps the client from purging the passphrase any sooner. Keeping passphrases in memory for too long increases the risk of an attacker somehow - think of heartbleed for example - acquiring it."
crypto,3bvje2,silverforest,0,Fri Jul 3 14:57:54 2015 UTC,"Serve JS over SSL; probably use SJCL for crypto. Generate a salt and hash the password+salt in the browser with a password hash (PDKDF2, scrypt, etc.) with a fairly high difficulty. Encrypt user's data with that hash code. Hash the hash code again with something faster.  Send that ciphertext, hash code and salt to the server, and hash it again there with a faster hash; store the output.  To auth a user, repeat the same process and check equality with your stored hash to see if the user is legit. Then, you can serve them the encrypted data and they can decrypt it.  You never see the user's key, since it is hashed before they send it to you. If someone compromises your DB, they won't have the user's key since it is hashed. Additionally, they can't even authenticate to your server to receive the stored ciphertext, as the hash sent from the browser is not the same as the one stored.  You're protected from rainbow tables by the salt, from brute force by the password hash, and you don't have to worry about your server getting DoS'd by someone submitting a bunch of garbage to be scrypted server-side. Password hashes are often used for key derivation (thus the KDF in PBKDF), so your encryption key is fine. SSL so your Javascript doesn't get modified in transit."
crypto,3bvje2,icStatic,2,Thu Jul 2 18:20:38 2015 UTC,Somebody hacking the server to replace the js would break it however
crypto,3bvje2,tom-md,1 point,Fri Jul 3 03:37:43 2015 UTC,"Of course, but that's a general problem with in-browser crypto. That's not getting solved any time soon, unless you use signed browser extensions etc."
crypto,3bvje2,icStatic,-2,Fri Jul 3 14:59:10 2015 UTC,"Here is my 'work in progress' attempt at achieving this for a project I'm working on. I am still in the process of validating it, but it might be a useful starting point.   As we assume that the server may be compromised or under surveillance, we require that the server not know the user’s password. To reduce the risk of password recovery if a database of hashes is stored, each account password is uniquely salted. Unfortunately this poses a problem to the login process because the password must be comparable to successfully authenticate.  To work around this issue, we provide a two stage login process. The first stage asks the user to authenticate with a ‘salt key’, which is an 8-byte truncated PBKDF2 HMAC.  The algorithm used to generate is as follows: innerHash = PBKDF2( HMAC-SHA1, uname + pass, saltSaltKey, 1000 iter, 256b key ) innerHashTrunc = innerHash[0:7] saltKey = SHA256( innerHashTrunc + sessionSalt )  This is sent along with a hash of the username (SHA256, with a salt specific to usernames), and the sessionSalt (a cryptographically random 256b value).  If the server is able to verify that this key matches the expected value, it will return the salt used to encrypt the password on the server - this salt (userSpecificSalt) was generated by the client and sent to the server during registration.  If the secure connection between the client and server is snooped during this exchange the attacker will learn the salt used to hash the password, but the password itself will remain secure.   Now that the client has the salt needed to generate the same password as the server, proper authentication is able to begin.  Again a similar process is used to generate a password hash: innerHash = PBKDF2( HMAC-SHA1, saltPassword + uname + pass, userSpecificSalt, 1000 iter, 256b key ) passwordHash = SHA256( innerHash + sessionSalt )   AUTHOR NOTE: The author is concerned about the use of a specially crafted salt from the client that could cause the server to incorrectly validate with an invalid password. It is also possible that a malicious server could return a specially crafted salt that could cause the client to reveal the user’s password. Investigations into ways of preventing either attack are required.   Again the client then sends the passwordHash along with the sessionSalt used to generate it and the hash of the username to the server.  The server then signals authentication status as either a pass or fail.  If authentication succeeds then the server responds with a session token that the client can use for future exchanges.   EDIT: Note I am also considering using public key encryption as mentioned by /u/tom-md. For context, the reason why a public key was not used previously is that all this work is done in javascript and I found the generation of a reasonable sized RSA key was too slow. I am planning to revisit this at some point."
crypto,3bt3ui,El-Turki,4,Wed Jul 1 22:45:12 2015 UTC,Maybe check out Dan Boneh's Crypto course on coursera?
crypto,3bt3ui,ZaphodsOtherHead,2,Wed Jul 1 22:56:53 2015 UTC,thank you but my internet speed 96 kbit
crypto,3bt3ui,ZaphodsOtherHead,4,Wed Jul 1 23:06:01 2015 UTC,"You can't go wrong with Bruce Schneier, I guess"
crypto,3bt3ui,silverforest,5,Wed Jul 1 23:25:29 2015 UTC,"Focusing on free things keeping in mind your skill level:  Basic math learning resoures are available at Khan Academy for free. They similarly offer a journey into crypto sequence which covers some classical and some modern crypto.   As for practicalities, the matasano crypto challenges do not involve much math.   Coursera also has a course on crypto, with slides and video.  If you have college level math skills on the other hand, Mihir Bellare and Shafi Goldwasser's Lecture Notes are great on theory.  I have to ask: Are you more interested in the practical design and implementation of cryptosystems, or in the theoretical cryptanalysis of primitives?  Summary:   https://www.khanacademy.org/math/arithmetic https://www.khanacademy.org/computing/computer-science/cryptography http://cryptopals.com/ https://www.coursera.org/course/crypto"
crypto,3bt3ui,kitd,2,Wed Jul 1 23:00:42 2015 UTC,thank you
crypto,3bt3ui,tmbinc,2,Wed Jul 1 23:06:34 2015 UTC,"can you suggest math resources text. It can be pdf , docx but it must be text. My internet connection sucks"
crypto,3bt3ui,balkierode,1 point,Wed Jul 1 23:09:16 2015 UTC,http://cryptopals.com/   I really recommend this one for hands-on learning. I learnt a lot from doing the challenges.
crypto,3bpwgk,AliRazaSG,1 point,Wed Jul 1 04:58:09 2015 UTC,"I know this is going to sound weird: aw man, I wish there was an MS SChannel backend, to abstract away that shitty absurd API."
crypto,3bqla5,i9q5,5,Wed Jul 1 10:20:07 2015 UTC,I think your cascade of feistel functions is just a shortcut to a complete 64 bits feistel function with a very large and redundant s-box. In the end you get the security of your 8bits s-box that may not be very high. Your cipher may be very weak to linear cryptanalysis but I have no way to verify this.
crypto,3bqla5,aris_ada,5,Wed Jul 1 13:33:59 2015 UTC,"He's using the AES sbox, which is resilient to linear cryptanalysis but vulnerable to mod3 cryptanalysis. I'm pretty sure there's no downside to having all the sboxes be identical, but I'm also pretty sure there's no upside.  Also, nested Feistel's aren't a new concept. You aren't ga  Also, dieharder appears to be for analyzing PRNG/PRF. Not block ciphers.  Am I correct in saying that the SBox is used 8 times each round? Given that this is a balanced feistel network with 3 rounds, back of the envelope says you should need 6.277 * 1057 plaintext/ciphertext pairs to crack it using linear cryptanalysis.  Not bad, but then, that's because you just copied one of the best SBoxes currently used in modern crypto...  You should need 8.968 x 1052 pairs to crack it with mod3 crypto.  Increasing the #rounds would make it more secure, as always.  Your cipher is just a standard implementation of a Luby-Rackoff feistel network where the round function is derived from an SBox. I don't see any obvious speed advantages to this construction, but with enough round's it's secure."
crypto,3bqla5,SirRobertKiN,1 point,Thu Jul 2 05:10:33 2015 UTC,"Wow, I didn't know about nested Feistel ciphers, that's really cool.   I know that dieharder is made for RNGs. I worked from the assumption that if my f64()  function isn't random enough, the cipher is obviously broken. So I've tested output of the cipher and output of this function, both with reduced rounds, to check if it could distinguish them from random. It couldn't.  Each call to f64() results in 4096 calls to f8(), if R constant is set to 8. So, it requires 8192 accesses to S-box. If R is 3, then f8() is called 216 times per round of cipher's outer layer, so 432 accesses to S-box."
crypto,3bqla5,SirRobertKiN,2,Thu Jul 2 07:40:00 2015 UTC,"12 round AES has 192 sbox lookups, so the security of your feistel network is really just because of the high number of subrounds.  It's interesting though. I'm not that familiar with Feistel networks, but maybe you could get a linear approximation of multiple subrounds of your round function...  The reason you shouldn't use a RNG tester for a block cipher is that it in no way checks for CPA/KPA"
crypto,3bpxh8,GuessWhat_InTheButt,2,Wed Jul 1 05:07:59 2015 UTC,"When you say ""encrypt"", do you mean you want it to be accessible as part of the normal filesystem but it should be encrypted on disk . . . or you want to want it to be inaccessible unless/until it is decrypted?   If it's the latter, I would think about creating a tar archive, then gpg:  gpg --output doc.gpg --symmetric doc   or OpenSSL:  openssl aes-256-cbc -a -salt -in secrets.txt -out secrets.txt.enc"
crypto,3bpxh8,hogsbreath,6,Wed Jul 1 07:03:34 2015 UTC,OpenSSL command is not secure:  https://security.stackexchange.com/questions/29106/openssl-recover-key-and-iv-by-passphrase  https://security.stackexchange.com/questions/31492/file-security-when-encrypting-files-directly-with-the-openssl-command-and-what
crypto,3bpxh8,Bloodshot025,2,Wed Jul 1 09:44:10 2015 UTC,accessible as part of the normal filesystem but it should be encrypted on disk   This.
crypto,3bpxh8,Natanael_L,1 point,Wed Jul 1 12:43:46 2015 UTC,Any good encryption tool which can mount a volume then
crypto,3bpxh8,Creshal,1 point,Thu Jul 2 11:49:13 2015 UTC,"Ext4 and F2FS are working on per-directory encryption, Ext4 released it with Linux 4.1, F2FS is scheduled to follow in 4.2; I'm not sure what user-space tools are necessary for it.  LWN has, as always, a decent article on it."
crypto,3bpxh8,Creshal,1 point,Wed Jul 1 13:03:29 2015 UTC,"I'd like to rely on something like a best practice, not something as new as ext4-encryption, but I will check it out, thanks."
crypto,3bpxh8,gjvnq,2,Wed Jul 1 13:10:53 2015 UTC,"Ext4's encryption is definitely experimental for now, but there aren't many alternatives to encFS/ecryptfs at all, barring funnily named, unaudited hipster startup projects."
crypto,3bpxh8,gjvnq,1 point,Wed Jul 1 14:23:35 2015 UTC,"I don't necessarily need an alternative. I'm okay with eCryptFS and EncFS, but I need to understand their differences."
crypto,3bqhxe,johnmountain,1 point,Wed Jul 1 09:30:56 2015 UTC,"Nice ! Anything like this for Linux, or OSX ?"
crypto,3bmuqt,cryptostudent,8,Tue Jun 30 14:25:14 2015 UTC,"So this is some form of chosen plaintext ""attack"" where you're allowed to disturb the data and see how it alters the encryption?  I'm unsure of what's novel about this."
crypto,3bmuqt,untitleddocument37,8,Tue Jun 30 14:49:36 2015 UTC,"Yes, it's novel because it uses a needlessly very expensive computation (based on a totally unrelated theory) which is explained in a cryptic way."
crypto,3bmuqt,haxelion,5,Tue Jun 30 19:25:58 2015 UTC,Sounds like someone was short on their paper quota.
crypto,3bmuqt,_georgesim_,4,Tue Jun 30 19:54:04 2015 UTC,"Preprint: http://arxiv.org/abs/1504.02549   A dynamical systems approach to the discrimination of the modes of operation of cryptographic systems  Evidence of signatures associated with cryptographic modes of operation is established. Motivated by some analogies between cryptographic and dynamical systems, in particular with chaos theory, we propose an algorithm based on Lyapunov exponents of discrete dynamical systems to estimate the divergence among ciphertexts as the encryption algorithm is applied iteratively. The results allow to distinguish among six modes of operation, namely ECB, CBC, OFB, CFB, CTR and PCBC using DES, IDEA, TEA and XTEA block ciphers of 64 bits, as well as AES, RC6, Twofish, Seed, Serpent and Camellia block ciphers of 128 bits. Furthermore, the proposed methodology enables a classification of modes of operation of cryptographic systems according to their strength."
crypto,3bmuqt,godman_8,3,Tue Jun 30 14:25:29 2015 UTC,"As far as I can tell nothing too critical, it just narrows down the bruteforce attempt to that specific operation, I don't even think it technically breaks the encryption either."
crypto,3bmuqt,lenish,6,Tue Jun 30 16:14:33 2015 UTC,"Aren't many of the proofs of security of various crypto primitives based on the idea that you can't distinguish between a ciphertext (or the output of that primitive, e.g. a hash) and a truly random bitstring? It would seem that if you can distinguish between CTR & CBC with random IVs then you would also be able to distinguish between one of those and a truly random number?"
crypto,3bmuqt,haxelion,7,Tue Jun 30 22:03:17 2015 UTC,"Yes. The think here is : the IV is not random, it's chosen.  And it's not very hard to differentiate CBC from CTR if you can choose both the plaintext and the IV.  (somehow they made it hard)"
crypto,3bmuqt,rage-kg,3,Tue Jun 30 22:25:30 2015 UTC,"I honestly don't understand the paper completely...... The two automata have its own dynamics for y, which at the first block is the IV. So, only for C1 the IV is randomly chosen.... (?)  I have my doubts. If it's correct indeed, it's still not threat as it is."
crypto,3bmuqt,lenish,2,Tue Jun 30 23:21:55 2015 UTC,It was unclear to me when skimming through their paper if the IVs were fixed or random. If fixed then... eh.
crypto,3bmuqt,haxelion,2,Tue Jun 30 22:32:43 2015 UTC,"Here, I ended up explaining the problem to OP on /r/programming: https://www.reddit.com/r/programming/comments/3bnes4/algorithm_is_able_to_discover_which_mode_of/csogvgf#csol209"
crypto,3bmuqt,PinguRambo,1 point,Wed Jul 1 14:17:22 2015 UTC,Couldn't this be used as some sort of heuristic to break AES?
crypto,3bmuqt,Dillinur,2,Wed Jul 1 08:24:32 2015 UTC,"The clickbait title might imply that indeed, but without breaking AES i guess you'll only be able to identify ECB.."
crypto,3bmuqt,PinguRambo,1 point,Mon Jul 6 09:54:51 2015 UTC,"Thank you for that, the absence of reaction just made me think I was a moron. (I'm actually a moron for not going deeper in the article, but that's another story)"
crypto,3blrw8,4bitgeek,4,Tue Jun 30 06:36:38 2015 UTC,"It's just a turn of phrase. The Register has a habit of reporting technical news using quasi-tabloid hyperbole. They just mean to imply that the malware uses particularly convoluted and obsessive encryption techniques.   The original blog post which the Register is paraphrasing says ""The payload we collected uses several layers of encryption within the binary itself but also in its communications with its Command and Control server."""
crypto,3blrw8,frugilegus,2,Tue Jun 30 08:30:54 2015 UTC,Interesting. All google search results seem to point back to that article.
crypto,3blrw8,zeroXten,2,Tue Jun 30 06:54:45 2015 UTC,Looks to me like it's just a weird turn of phrase.
crypto,3blrw8,bitwiseshiftleft,1 point,Tue Jun 30 06:55:22 2015 UTC,Yep. I thought so. Thanks for the comments! Let's move on unless someone wants to invent a crypto with that name! :)
crypto,3blegl,CenoCipherTeam,18,Tue Jun 30 04:11:06 2015 UTC,"Has it been audited? Why is the software and code hosted on a different domain? Why bother offering a link to the SSL version of the site when you can redirect to it? Why is the cert for that link broken, belonging to a yet third domain and SELF-SIGNED? Why does http://www.autistici.org/ encourage you to install the Autistici CA in your browser? This is ridiculous http://www.autistici.org/en/ca/verify.html If a file is too big, the application silently writes the decrypted contents to a local temporary file. What the fuck?      {   //Regular file too large for memory         sureset(DecDetails.dfile,0,sizeof(DecDetails.dfile));         SHGetFolderPath(0,CSIDL_APPDATA,NULL,0,DecDetails.dfile);         safescat(DecDetails.dfile,""\\cenocipher\\CCDecrypt.dat"");         ZeroFile(DecDetails.dfile);         DeleteFile(DecDetails.dfile);  Your ""cryptographically safe pseudo-random number generator ISAAC, seed-initialized with multiple entropic elements from computer system environment"" is just a bunch of bullshit window handle values and the current time over and over? There is no attempt to use local entropy sources, including those available from the operating system API. We're in Windows, use CryptGenRandom You seed the system prng with srand(time(0)); but you never actually call rand(). What the fuck?   eset->iseeds[0]=(unsigned)time(0); eset->iseeds[1]=(unsigned)GetCurrentThreadId(); eset->iseeds[2]=(unsigned)hwndmain; eset->iseeds[3]=(unsigned)EncryptButton; eset->iseeds[4]=(unsigned)DecryptButton;  eset->iseeds[5]=(unsigned)time(0); eset->iseeds[6]=(unsigned)hProcess; eset->iseeds[7]=(unsigned)NewTextButton; eset->iseeds[8]=(unsigned)ReplyButton; eset->iseeds[9]=(unsigned)WithQuote;   ... You should use more than 10,000 rounds of PBKDF2. Encrypted files have long shelf lives. Use 100,000 and/or upgrade to scrypt or bcrypt.  PKCS5_PBKDF2_HMAC(dset->passkey,strlen((char*)dset->passkey),dset->pseudosalt,sizeof(dset->pseudosalt),10000,sizeof(dset->pseudokey),dset->pseudokey);  Why are only 1,000 rounds used for the signature verification? This becomes the weakest point because the attacker can brute force the signature instead of the encryption key value  PKCS5_PBKDF2_HMAC(dset->passkey,strlen((char*)dset->passkey),dset->obfhash,sizeof(dset->obfhash),1000,headersize,dset->obfheader);  It doesn't look like eset->passkey and dset->passkey are safely erased from memory at any point in the code. You need to erase those values at some point, including the weakly derived values. You can't count on garbage collection to do it for you either. The number of rounds for the actual encryption keys are ""randomly"" chosen. This is pointless. There's no rainbow tables for 10,000 rounds of PBKDF2. Use a fixed value above 100,000.  memcpy(&eset->prounds[0],&randbytes,sizeof(randbytes)); memcpy(&eset->prounds[4],&randbytes,sizeof(randbytes));  If the ""randomly"" chosen rounds value is out of spec, it defaults to 10,000.  if (irounds < 1 or irounds > maxrounds * 1.3){irounds=10000;}  All three algorithms use CTR mode. For individual files, this mode choice doesn't make much sense. You can solve two problems by using an authenticated mode like GCM.  aes_crypt_ctr(&eset->aes,copylen,&eset->ANCOffset,eset->iv,eset->astreamblock,eset->buffer,eset->buffer); Twofish_CTR_Encrypt(&eset->tkey,copylen,&eset->TNCOffset,eset->twofishiv,eset->tstreamblock,eset->buffer,eset->buffer); Serpent_CTR_Encrypt(copylen,&eset->SNCOffset,eset->serpentiv,eset->sstreamblock,eset->buffer,eset->buffer);    I'm going to stop auditing your code for you, because it's 2am, but nothing about this project give me any reason to trust it."
crypto,3blegl,aydiosmio,1 point,Tue Jun 30 05:50:26 2015 UTC,"If a file is too big, the application silently writes the decrypted contents to a local temporary file. What the fuck?   If the received cipher-file is so large that the recipient has insufficient memory to hold the entire decrypted contents in RAM, the only option available is to write the contents temporarily to a file and access it that way, then automatically overwrite and delete it upon conclusion.  This would generally only ever happen with a very gigantic file. Example, if someone sends you a 4GB encrypted file, and you haven't 4 gigabytes of memory free, there isn't any place to put that except writing it to disk. No different from what PGP or any other asynchronous system would do in the same situation.  As for ""silently"", it would be easy enough to add a popup alert telling the user this is about to happen, and give them the option to cancel. But we state on the main front page, decrypted data isn't written to disk ""unless absolutely necessary"" for this reason. Files that are too large to be RAM-stored. And it is always deleted (securely) on exit.  This is one of the benefits of open-source, though. If objections like this are substantial, the program's behaviour can be easily changed to accommodate."
crypto,3blegl,aydiosmio,6,Tue Jun 30 06:49:44 2015 UTC,"It's not necessary in this case to put the entire file into memory, the functions to manage files are poorly written. All of the cryptographic and I/O operations can be done in blocks."
crypto,3blegl,aydiosmio,1 point,Tue Jun 30 06:52:51 2015 UTC,"The crypto I/O operations can be and are done in blocks, in memory, all the time regardless of size. But if the contained decrypted element is a 3 Gigabyte PDF file, something has to be done with it once decrypted. Having fragments of it sitting in memory doesn't help the recipient actually read it.  Even a tiny 1k PDF file would ultimately need to be written to disk in order to actually be opened in a local viewing program on the recipient's computer, so writing to disk is unavoidable and must be accepted in such cases.  And if the cipher-file itself is so huge to start with, it's likely because large files have been included. One hasn't likely sent a 3GB ascii message."
crypto,3blegl,tmbinc,3,Tue Jun 30 07:11:59 2015 UTC,"The output file is intended to be decrypted, but placing a temporary file in the program directory leaves unencrypted data in a unknown location. The user may decrypt the file to a thumb drive, never intending for that data to be written to the local disk."
crypto,3blegl,aydiosmio,1 point,Tue Jun 30 08:04:26 2015 UTC,"Well, it doesn't quite ""leave"" it there, since it is securely deleted upon program close. But it would be trivial to add a popup dialog telling the user data needs to be written, and give them the option to either cancel, select a specific location (like a thumb drive), or accept the default location. Added to list for inclusion in next version."
crypto,3blegl,aydiosmio,5,Tue Jun 30 08:13:40 2015 UTC,"How do you ""securely"" delete a file? I see you're overwriting the data with all-zeros, but that doesn't guarantee that data is not visible on the block level or below. A filesystem doesn't guarantee that the same blocks are re-used (though practically for NTFS and FAT32 that's the case), but on SSDs or thumb sticks, wear-levelling will cause it to not necessarily dispose the actual data when overwriting the same logical blocks.  My suggestion is to fail decryption if you can't put the data anywhere securely, or have the user opt-in explicitly to use insecure storage."
crypto,3blegl,teknoir75,2,Tue Jun 30 08:41:02 2015 UTC,"We will add this feature and give the user the option, with an accompanying warning, of where to write the data if at all. This way users can still send and receive 6GB files if desired. The warning will have to apply even to smaller attachment files that can be stored in memory, if the user wants to view/open them on screen, ie a small PDF that needs to be written before it can be opened in a viewer."
crypto,3blegl,teknoir75,2,Tue Jun 30 08:56:08 2015 UTC,dfile is wiped just BEFORE the decryption operation and if the decryption fails.  Where is it wiped upon success? All of the I/O is extremely messy.
crypto,3blegl,aydiosmio,1 point,Tue Jun 30 08:10:52 2015 UTC,"dfile only exists in the event of write-to-disk decryption of a very large file. We can't very well wipe it on success, since the user still needs to access it while it's valid, immediately after decryption. The message and files within it aren't separated out unless the user requests it specifically. So it still contains the file table and intra-file addresses and sizes of everything contained therein. It's wiped upon a new decrypt-to-disk operation, or at program close. It can't be wiped while it's still in use."
crypto,3blegl,aydiosmio,2,Tue Jun 30 08:19:13 2015 UTC,"I assume dfile  safescat(DecDetails.dfile,""\\cenocipher\\CCDecrypt.dat"");   was always copied to a user specified destination, and that's when you would delete dfile.  However, looking at this interface, it seems that you unpack the file like an archive, and give the option of opening arbitrary files directly, which requires a temporary file. I would suggest requiring the user to save the decrypted file."
crypto,3blegl,aydiosmio,1 point,Tue Jun 30 09:13:30 2015 UTC,"Yes, whether the decrypted contents are held in memory (majority of the time) or written to a temporary file, they are kept as one contiguous data blob, and only written out separately if/when the user decides to open or save an individual sub-file. If he received a cipher-file with 20 different PDFs inside it, but only clicked to view one of them, only that one would be written separately for viewing. If the user wants to save all of them at once to somewhere, the Save All button allows for that."
crypto,3blegl,aydiosmio,1 point,Tue Jun 30 09:27:25 2015 UTC,"Okay, so instead of writing to disk, why not encrypt WHILE you write to disc, using simple AES with a small block size, and a temporary key residing in RAM? Then you decrypt it and reencrypt it with full strength, making sure you overwrite the original with random noise."
crypto,3blegl,aydiosmio,1 point,Sat Jul 11 15:43:18 2015 UTC,"In the case of both encryption and decryption, the operations take place entirely in memory, on blocks of one megabyte at a time. For encryption, the cipher-file is then written to disk so that it can be sent to the recipient.  For decryption, the contents are normally held only in memory thereafter, and not written to disk. The exception is receipt of an extremely large cipher-file (containing say a 4GB pdf file) where the decrypted content is too large to be held in memory, and has to be written somewhere so that it can be accessed.  In such a case, re-encrypting that data to disk with a temporary AES key would serve little purpose. The recipient already has the cipher-file in full encrypted form, somewhere on disk in its original location (from which it was loaded into CenoCipher). If one has chosen to Decrypt, it needs to be transformed into plain-data so that the message and files can be accessed. If the plain-data is huge (larger than available memory) there is no avoiding writing it to disk in plain form at some point, if only temporarily."
crypto,3blegl,AceyJuan,1 point,Mon Jul 13 02:44:14 2015 UTC,Damn...
crypto,3blegl,disclosure5,1 point,Mon Jul 13 05:29:25 2015 UTC,"You should use more than 10,000 rounds of PBKDF2. Encrypted files have long shelf lives. Use 100,000 and/or upgrade to scrypt or bcrypt.   That hard-coded value isn't for actual key-generation. It's only for the pseudokey used for determining where specifically within a Jpeg image the already-triple-encrypted cipher-file is going to be stored. To test whether a guessed password is correct, it's still necessary to subsequently do the main PBKDF2 operations to derive the separate AES, Twofish and Serpent keys as a separate step. The number of rounds for those functions is set in a constant that can be changed at will by anyone compiling the program, to anything they prefer like 100,000. The recipient will be able to determine the number of rounds to use on his end from the header. That said, the default value for the main key derivation functions is also set to 10,000 in the current sourcecode and binary. If this is a concern, we will change it."
crypto,3bhql1,johnmountain,9,Mon Jun 29 09:11:26 2015 UTC,"I think Microsoft assumes trust for its users.  We take on a list of trusted Root CAs when we download web browsers, so why shouldn't MS be able to update Root CAs through Windows Update?  In the X.509 world, the web of trust extends from a largely centralized group of caretakers, including browser and OS developers.  Microsoft should have released at least some documentation, but I don't think updating its list of trusted Root CAs is that extraordinary."
crypto,3bhql1,jiannone,2,Mon Jun 29 17:57:59 2015 UTC,"Most of the Windows users aren't going to know what a root CA is, and I certainly wouldn't impose on the users to make uninformed decisions. On the flip side, I as a power user, would not mind having those things run by me and having a more usable interface to manage certificates. I for instance personally don't feel the need to have a Chinese root certificate in my certificate store (or enabled). Sure, with certificate pinning it's easier to spot bad root CA's, and they'd be gone from everyone's store before you can come up with a fancy name for a security issue, but why take the risk with certificates you probably have no use for in the first place?"
crypto,3bhql1,TheBigB86,0,Mon Jun 29 19:11:31 2015 UTC,I agree.
crypto,3bhql1,meantofrogs,4,Mon Jun 29 19:05:37 2015 UTC,"Well, that post was light on analysis and details."
crypto,3bhql1,remyroy,1 point,Mon Jun 29 20:09:45 2015 UTC,"I expected nothing, I wasn't disappointed. I really think there is not much to say about the subject."
crypto,3bhql1,poopinspace,3,Tue Jun 30 02:33:30 2015 UTC,"Nobody checks which root certificates are currently trusted on your machine(s).   People do. Thing is, you can't really know which ones to distrust except the most obvious ones (e.g. CNNIC if you don't live in China or Staat der Nederlanden if you live in Netherlands and need the state's e-government sites to work).   If you distrust the wrong certificates, things may start to fail silently if a site exchanges issuing CA for one you distrusted (I've learned this the hard way). Especially if it's for a connection that is not the toplevel site in URL bar (you won't get warning if loading of some resources from a CDN fails because of this).   Our software vendors can push new Root Certificates in automated updates without anyone knowing about it.   I think this applies to Microsoft, maybe Apple (not sure about the latter). In case of a typical linux distro you can see that stuff like ca-certificates or similarly named package is updated and can check changelog. I'd guess this is true for *BSD OSes.  Lastly, I think the threat of abuse CA for MitM attack is overinflated. Yes, it has had happened - Comodo, Diginotar, GlobalSign, then few corporate subCA MitM certificates. But that's fairly limited compared to malware attacks.  From what we have seen, it's much more likely that your machine will get owned by malware (targeted attack like Finfisher, drive by, etc.) It's simpler to bypass encryption than to attack it.  The Snowden docs seem to confirm this as well. They rather exploit unencrypted traffic, misconfigurations or weak keys. Keys are more often stolen than broken. The really nifty crypto stuff is limited for state-level targets (think Flame).  Finally, let's recap technologies and protocols that were created to prevent CA abuse for MitM:   Perspectives - still lives, but not useful for checking on Google farm (too many certs) Convergence - dead TACK - dead Sovereign Keys- vaporware DANE - won't really spread, because DNSSEC won't spread HTTP public key pinning - new, but limited to HTTPS, we'll see how it fares Certificate Transparency - this has a chance because Google will push it   So far the best score in detecting MitM: Chrome browser, because it comes with public key pins for Google services and a few others. If an attacker wants to stay undetected, he needs to stay away from MitM-ing those services to avoid detection."
crypto,3bhql1,hanomalous,1 point,Mon Jun 29 19:26:09 2015 UTC,"I was going to mention this. The reality is that if anyone misuses their position as a root, they are rescinded.  This happened a couple of months ago with a Chinese root signing a Google.com(?) certificate.  That root has been revoked.  And the NSAs stuxnet attack wasn't done by using a secret trusted root, but by bruteforcing an MD5 certificate.  The issues raised here, while known, are complaints in search of a problem."
crypto,3bhql1,JoseJimeniz,1 point,Tue Jun 30 03:26:45 2015 UTC,"The reality is that if anyone misuses their position as a root, they are rescinded.   Not always.  Comodo still appears in normal root-certificate sets, despite Eddy Nigg's having shown, back in December of 2008, that they delegated signature authority to an organization - Certstar - that seemed willing to sign anything for money."
crypto,3bhql1,pkpearson,2,Tue Jun 30 03:41:33 2015 UTC,"Which is why Certstar was ended.  Comodo did not abuse their position as a root, and so should not be ended  Certstar abused their position as an (intermediate) root, and was ended."
crypto,3bhql1,JoseJimeniz,3,Tue Jun 30 04:29:39 2015 UTC,"I find the tone of this article surprising.   If you're concerned about Microsoft having total and complete access to your system, why are you using Microsoft? Microsoft has always had a reputation of pushing forward toward innovation and usability while disregarding elements of traditional security architecture. In Microsoft's view: this is the Windows 10 age, throw everything you have that's private up in OneDrive, spin your VMs up in Azure, and let us handle the security for it all while you play Xbox. Device security is sort of a secondary or tertiary thought in this world."
crypto,3bhql1,fidelitypdx,1 point,Tue Jun 30 01:42:55 2015 UTC,"At least they let you see the cert bundle, they could just as easily have updated their TLS implementation to silently trust them."
crypto,3bgv9a,drazilraW,7,Mon Jun 29 02:49:35 2015 UTC,"Of course, if the field is large, one could choose k to always be ""large"" but then the attacker could simply start scanning for a valid k at the chosen lower bound.    Large here means like >21024 and so scanning for a valid k is infeasible.  In particular, in a group, if r is a uniformly random group element, and x is any value, then rx is uniformly random in the group as well, so as long as the chance you uniformly choose a small element is tiny, then it should be fine.  For 1024 bits, the chance you choose anything under, say, 900 bits is 2-124 which is super super small.  The correct way to analyze it is via what is known as a security reduction: suppose an attacker COULD break your scheme, then how effectively can you use the attacker to break the underlying assumption?  This immediately raises a few questions... what is ""break"", what is ""effective"", what is the ""underlying assumption""?  It turns out these aren't easy to answer for a novice, but the intuition is like this: if it is tightly reducible to the underlying assumption, then the scheme cannot be easily broken because otherwise we would have an easy break to the underlying assumption (which is assumed to be hard).  For the ElGamal cryptosystem, ""break"" means breaking in the IND-CPA or SS sense.  The underlying assumption isn't discrete log (though if discrete log is broken, so is this), but rather DDH.    However, the reduction is easy to make so I'll explain it here:  The challenge in DDH is: given public gx and gy to distinguish gxy from random. This is believed to be hard for certain groups, and these are the groups you want to work with for ElGamal.  That is to say, given (gx , gy , z), there is no efficient algorithm to determine if z is gxy or a random finite field element.  Now I can reduce the ElGamal IND-CPA game to this challenge: I publish gx as the public key, and (gy, mz) as my ciphertext, where m is the message.  If z=gxy then this is a perfectly valid ElGamal ciphertext, and if ElGamal were insecure, you can break it and recover m. On the other hand, if z was truly random, then mz is also random and thus you cannot hope to recover what m is.  This gives me an effective way to distinguish z=gxy from random if ElGamal were easy.  But DDH is hard, so ElGamal cannot be easy.  And that's how the proof goes."
crypto,3bgv9a,DoWhile,3,Mon Jun 29 03:53:19 2015 UTC,"You need to choose k uniformly at random between 0 and the order of g.  Such a k will almost certainly be very large, but it could be small.  It could be 1, or even 0.  If the attacker guesses the particular k you chose, then he will be able to read the message, whether k=0 or k=3984762039867203948672396.  But the group should be large enough that the attacker can't feasibly guess k (or use Pollard rho, or use index calculus...)."
crypto,3bgv9a,bitwiseshiftleft,-2,Mon Jun 29 05:57:34 2015 UTC,You aren't missing anything. These are issues with a text book implementation of it. Which is why crypto systems don't use the text book implementation of it.
crypto,3bgv9a,IcyReached,1 point,Mon Jun 29 02:58:57 2015 UTC,"Is there a simple fix that could be easily understood by a novice? If so, why do textbook implementations not include such a fix? Maybe I'm being naive but it seems like the purpose of a textbook is to explain the right way to do things. If not, I don't suppose you have a text explaining the right way to do it, which I could come back and read once I'm more experienced?"
crypto,3bgv9a,IcyReached,1 point,Mon Jun 29 03:03:22 2015 UTC,I think the general solution is to make sure g is large enough that even a small value of k is enough to     make the result have to be the mod of the field.   Also with k having a large enough range there is negligible chance that 1 will be chosen.
crypto,3bfgkm,based2,3,Sun Jun 28 19:23:24 2015 UTC,"So basically: ""Maybe people will take Bitcoin more seriously if we use the term Nakamoto Signature instead of the blockchain""."
crypto,3bau4h,johnmountain,10,Sat Jun 27 13:08:32 2015 UTC,"Are they really hoping to pull this off, or is it just incompetence?   Don't do that."
crypto,3bau4h,JoseJimeniz,2,Sat Jun 27 18:22:52 2015 UTC,?
crypto,3bau4h,ostrich_semen,22,Sat Jun 27 21:09:06 2015 UTC,"There is an argumentative assumption that Microsoft is trying to be sneaky   ""Are really hoping to pull this off""   And the only other implied possibility is that Microsoft is incompetent.   What the author should do is be realistic, not argumentative, not grumpy, and calmly consider the reality:  Microsoft is simply handing out new root certificates - an operation that happens a lot, and does not require any explanation every time they do.  And the fact that they didn't explain themselves doesn't mean they're trying to get away with something. Nor does it mean they're incompetent.    It means they're going about their day doing their job."
crypto,3bau4h,JoseJimeniz,6,Sat Jun 27 22:26:52 2015 UTC,"The tone is bit harsh but having watched this I understand the frustration.  Adding new root certificates is not a daily occurrence, this happens about 2-3 times a year.  Microsoft provide information about new roots when they were distributed via Windows updates, there is no obvious reason why the shouldn't be doing that now.  There is hope as they recently updated their process (on 6/5: http://aka.ms/rootcert )."
crypto,3bau4h,R-EDDIT,2,Sun Jun 28 00:46:48 2015 UTC,"In fairness, Microsoft doesn't have the best history when it comes to backdoors. While I agree that there is no industry practice of justifying new root cert pushes, it's legitimate to argue that maybe there should be."
crypto,3bau4h,ostrich_semen,2,Sat Jun 27 22:48:02 2015 UTC,"NSAKEY:       In computer security and cryptography, __NSAKEY_ was a variable name discovered in Windows NT 4 Service Pack 5 (which had been released unstripped of its symbolic debugging data) in August 1999 by Andrew D. Fernandes of Cryptonym Corporation. That variable contained a 1024-bit public key.     Relevant: Criticism of Microsoft Windows | Bing Vision | Bing Audio | Satya Nadella   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Call Me"
crypto,3bau4h,autowikibot,2,Sat Jun 27 22:49:01 2015 UTC,"That implies that Windows has now, or has ever had, any backdoors.  People do decompile Windows, and validate the security.  Governments are allowed to review the source code of Windows.  You can review the Windows 2000 source code."
crypto,3bau4h,JoseJimeniz,1 point,Sat Jun 27 23:12:48 2015 UTC,"The rar archive is protected by password, do you happen to know it or is it a fake archive?  Nvm, I found it."
crypto,3bau4h,m1el,1 point,Sat Jun 27 23:46:02 2015 UTC,"I downloaded the source code years ago. i had even used it as reference to try to figure out a bug in my code.  i just pasted the first one i could find. i know there's something out there called something like the Windows NT project, which starts from that source code and adds features."
crypto,3bau4h,JoseJimeniz,1 point,Sun Jun 28 03:01:23 2015 UTC,How people could have validate the security of a decompiled Windows and there is still so much holes ?
crypto,3bau4h,xcombelle,2,Sun Jun 28 19:02:26 2015 UTC,"I'm not sure what you were saying there, but my reading of it is you were implying Windows has security holes.  And if my reading is correct, then I don't accept the premise. At least not intentional, or by design, holes.   Security vulnerabilities? Of course. But less then other operating systems."
crypto,3bau4h,JoseJimeniz,1 point,Sun Jun 28 19:14:26 2015 UTC,"I just wondered what is called validate security.  About comparing the security vulnerabilities I don't know where you get the ""less then other OS""  http://www.cvedetails.com/product-list/product_type-/vendor_id-26/firstchar-/page-8/products.html?sha=bf458fe17a7e99ebd294c67b28acf7ec0f33a23d&trc=391&order=1   Windows Server 2003: 414  Windows Server 2008: 556 Windows Server 2012: 166 Windows Vista: 550 Windows Xp: 728   each product except Windows 2012 as more than Debian ( 364 http://www.cvedetails.com/vendor/23/Debian.html ) and debian is not only the OS but a full of bunch of application on it"
crypto,3bau4h,xcombelle,0,Wed Jul 1 09:53:28 2015 UTC,"Actually, it doesn't, it just notes a history of questionable practices when it comes to earning the trust of its users. I can't prove there are backdoors in Windows any more than I can prove that there aren't."
crypto,3bau4h,ostrich_semen,1 point,Sat Jun 27 23:18:30 2015 UTC,"They are being sneaky.    It means they're going about their day doing their job.   That's your own argumentative assumption.  They need to alert their users and others of any root certificates they enter into the trust store. Instead they didn't, and that is being sneaky because they opened holes without telling anyone."
crypto,3bau4h,rflownn,1 point,Fri Jul 3 19:10:14 2015 UTC,"It's no more sneaky than every other time they have added new root certificates and not documented it.  They added Start SSL without press release, KB, or technet article.  It is how things are done."
crypto,3bau4h,JoseJimeniz,2,Fri Jul 3 19:20:19 2015 UTC,Can anyone find the fingerprints elsewhere? Are any of these included in other trust stores or have any applied to be in any other trust stores?
crypto,3bau4h,diafygi,9,Sat Jun 27 14:11:57 2015 UTC,"More details earlier here:  http://www.plaintextcity.com/2015/06/june-23-2015-microsoft-certificate.html  Specifically to the question, all of these are brand new certificates, although the OpenTrust and MultiCert ones have already been submitted to Mozilla."
crypto,3bau4h,R-EDDIT,2,Sat Jun 27 14:53:35 2015 UTC,"Also if anyone is interested, Mozilla has the debate about included root public, you can look at mozilla.dev.security.policy."
crypto,3bau4h,vamediah,1 point,Sun Jun 28 11:01:47 2015 UTC,"Shouldn't this be in netsec? Microsoft pushing new root certificates without alerting anyone is suspicious, but it has more to do with opening security holes like network security than crypto I think."
crypto,3bbqz8,_______bryan,15,Sat Jun 27 18:26:37 2015 UTC,"Security from a cryptographer's standpoint should be pro-active not reactive: the burden is on you to demonstrate your protocol is secure rather than set up challenges for other people to try to break your solution.  Partial breaks (even theoretical ones) to your system already suggest the inklings of weakness, which should only further prompt you to offer a good security proof.  I don't know of any practical attack an ordinary person could potentially perform on telegram, but I'm less confident that a nation-state couldn't mount some of the theoretical attacks on it."
crypto,3bbqz8,DoWhile,5,Sat Jun 27 19:53:09 2015 UTC,This is why it is flawed:  http://www.alexrad.me/discourse/a-264-attack-on-telegram-and-why-a-super-villain-doesnt-need-it-to-read-your-telegram-chats.html
crypto,3bbqz8,Natanael_L,3,Sat Jun 27 21:06:04 2015 UTC,"That was one of the attacks I had in mind: was anyone able to mount this attack in the wild?  It seems like one of the most do-able attacks, but probably by a research team that had a bit more resources rather than a single-person effort."
crypto,3bbqz8,DoWhile,1 point,Sat Jun 27 21:08:09 2015 UTC,"I agree with you when you say that security should be proven first instead of having somebody else prove them wrong. However he describes socially engineering the situation and using mitm to spoof the key in which case you'd have to have some kind of information on the corresponding parties. In that case, isn't there a factor of human error and misjudgment in almost all existing situations as well?"
crypto,3bbqz8,Natanael_L,1 point,Sun Jun 28 10:30:40 2015 UTC,The MITM would be entirely silent and undetectable in normal circumstances (like attack over the local WiFi). Normal operation would not detect it.
crypto,3bbqz8,DoWhile,1 point,Sun Jun 28 15:12:21 2015 UTC,"Yes, but this is assuming that the user is on a public wifi network and that the attacker has already been able to spoof the key for the two users. Or, of course that the person is actively choosing a target and waiting for them to send an image to the other party to confirm it instead of comparing it in person."
crypto,3bbqz8,rflownn,2,Sun Jun 28 16:32:50 2015 UTC,"You make a fair point: attacks due to human error are qualitatively different than purely mathematical attacks.  However, it is typically assumed (even in theory) that you know in advance the two parties you are targeting who are trying to communicate with each other rather than some sort of dragnet surveil-and-break.  In this case, the magnitude of the attack compared to the human error needed to mount the attack is comparatively large to other schemes where the same human error is made.  That is to say: assume a human makes the same mistake using telegram vs any other protocol, and ask ""how bad is it?"".  The situation in which the human mistake was made is subjective, but once it has been made, the damage can be measured quantitatively scheme-to-scheme."
crypto,3bbqz8,rflownn,1 point,Sun Jun 28 17:01:07 2015 UTC,"In that case, isn't there a factor of human error and misjudgment in almost all existing situations as well?   Cryptography with technology only decreases the amount of human error that would result in its mechanical application. Human ""errors"" will always percolate through the system, and human ""errors"" will always occur. Even if the transmission, communications is designed to be perfect, its success relies solely on the parties involved. This means it doesn't rely solely on the cryptography/encryption/cipher design/development and implementation. It includes those who maintain the networks, design the OS, software, hardware, libraries, etc... and even to those who get their hands dirty and lay the trunks down beneath the ground or twist the cables.  Cryptography cannot solve the case where a person makes a mistake incorrectly allocating trust to another person or organization. This is the realm of social engineering, organizational management, security and infrastructure design/development/management, etc...  This is where the weakness is supposed to remain, as well as its strength. It would be incorrect to trust another person or organization purely on the premise that the cryptography and its application is secure."
crypto,3bbqz8,VaniCo,1 point,Wed Jul 1 07:56:53 2015 UTC,"Yea, my point was that they can create a system to minimalize the amount of possible human error in a system they cannot ultimately be responsible for it. Though it also does make sense what /u/DoWhile said.   ""In this case, the magnitude of the attack compared to the human error needed to mount the attack is comparatively large to other schemes where the same human error is made."""
crypto,3bbqz8,Natanael_L,1 point,Wed Jul 1 08:09:42 2015 UTC,"That describes a possible way to measure the robustness of a system in relation to known human 'errors' that can be repeated across the systems in question.  Just to clarify, human 'error's cannot be minimized, they cannot be eradicated... they can only be addressed and mitigated. In terms of system development, the goal is to mitigate human errors, under the assumption that they always happen and will happen."
crypto,3bbqz8,VaniCo,2,Wed Jul 1 11:00:37 2015 UTC,"Doesn't look like this thing is really valid. I'm not a specialist myself, but this post links to an article in the Telegram FAQ (https://core.telegram.org/articles/DH_Hash_Collision) where they estimate that such an attack would cost a trillion dollars (which is mentioned in the post) to spoof just one secret chat and and that it would take one month for this chat to be created in that case (which is not mentioned in the post).  So this means that I need to tap on Start Secret Chat and then instead of a few seconds it will take a month for me to message the other side? I'm pretty sure I would notice that. And isn't 1 trillion dollars pretty steep, even for a government?  The part about 'why a super-villain doesn't need the attack' seems moot. They claim it's easy to hijack a code, but say nothing about 2-step-verification. You can set up a password and then they can hijack any codes they want. I don't think a person that doesn't use 2FA can be called security-conscious. Besides, I don't think you even see secret chats when you log in on a new device, correct me if I'm wrong."
crypto,3bbqz8,Natanael_L,1 point,Thu Jul 2 14:45:01 2015 UTC,Trillions on 90's hardware I presume.   And you still need a secure alternate channel for comparing the authentication string every time. No long term key verification in use. In-channel comparison is self defeating.   They wouldn't need to interfere with your connectivity until they got working keys.
crypto,3bbqz8,VaniCo,1 point,Thu Jul 2 14:53:24 2015 UTC,"Sorry, I don't think my qualifications are enough to respond to this. :)  I'm not a specialist. Could you probably explain this in layman terms?   P.S. Being the newbie that I am though, I did see a section titled Required Resources in that article. It features some pretty specific calculations mentioning 'modern' computers. Not like they wrote that in the 90ies, right?"
crypto,3bbqz8,Natanael_L,1 point,Thu Jul 2 15:05:33 2015 UTC,"They assume using a standard CPU only rather than GPU, not assuming any software optimizations, assuming maximum use of all CPU instructions simultaneously (or else the power consumption will be lower), etc..."
crypto,3bbqz8,VaniCo,1 point,Thu Jul 2 18:47:00 2015 UTC,So how much money and time would it take to create that secret chat if you use all that?
crypto,3bbqz8,Natanael_L,1 point,Thu Jul 2 19:49:15 2015 UTC,"Probably 10 000x less resources, or even less."
crypto,3bbqz8,johnmountain,1 point,Thu Jul 2 19:53:58 2015 UTC,Thanks. Is this just a guess or did you do the actual math they did?
crypto,3bbqz8,rlmaers,1 point,Thu Jul 2 21:16:23 2015 UTC,I went through their numbers and they were clearly using suboptimal assumptions. Very very suboptimal.
crypto,3bbqz8,AngrySkillzz,1 point,Fri Jul 3 03:17:44 2015 UTC,"My problem with it is that it claims to be one of the most secure apps, yet it doesn't even provide end-to-end encryption by default. It leaves it to the user to enable it. Therefore for 99% of people or cases, it not's a privacy/security tool. It's just like any other IM app with HTTPS encryption."
crypto,3bba6g,rainbowMania,3,Sat Jun 27 15:58:25 2015 UTC,I don't suppose you use Emacs?  org-mode is nice for note taking and Emacs has an easy integration with gpg.
crypto,3bba6g,sisyphus,1 point,Sat Jun 27 17:22:54 2015 UTC,Awesome. I'll look into that. I wonder if VIM has pgp/gpg integration as well.
crypto,3bba6g,Argotha,1 point,Sat Jun 27 18:18:30 2015 UTC,Make a encfs mount and use an editor of your choice? (though would need to be wary of temp/backup files)
crypto,3bba6g,Natanael_L,1 point,Mon Jun 29 08:52:39 2015 UTC,install gentoo?
crypto,3b7s4q,johnmountain,8,Fri Jun 26 17:35:26 2015 UTC,It's so secure we even hid the page text so you couldn't find it.
crypto,3b7s4q,daveime,1 point,Fri Jun 26 17:49:32 2015 UTC,"Thanks for that I laughed, literally, out loud."
crypto,3b7s4q,cuttingclass,3,Fri Jun 26 22:55:10 2015 UTC,It uses XMPP. It would rather be the reverse.
crypto,3b6epr,CyberSecPro,8,Fri Jun 26 10:07:17 2015 UTC,"quantum cryptography relies heavily upon the condition of entanglement   No, it doesn't.    It may sound fantastical, but quantum cryptography really isn't anything new, nor has it proven to be as unbreakable as the boffins would have us believe.   People really need to understand the difference between the cryptographic system being proven secure in theory and the security of the actual implementation. Of course you can not make an implementation that's unbreakable. That's trivially true.    In short, quantum cryptography hasn't found its killer app yet. Until it does, it will remain something of theoretical interest only – no matter how unbreakable it is claimed to be.   Stop confusing quantum key distribution with quantum cryptography. One is a protocol, the other is a research field."
crypto,3b6epr,The_Serious_Account,2,Fri Jun 26 10:48:33 2015 UTC,"The quantum packets described by entanglement pre-measure are not data packets. They're medium transfer. It's like sending one end of the copper wire to another, but instead of the copper wire, we have spooky entanglement and the photons are the end points.  edit: A simple KD scheme is to use QKD and each party would obtain the key 'bits' from the entangled photon(s), then use another efficient medium to transfer data.  Another simple scenario for data transfer is:  Sending entangled photon to the other (so the ""endpoints on the wire"" would be sent). When a snooper tags the line, it would almost be the same as if they cut the line. In this case, a simple scheme is to have each photon be one ""wire"" that sends one bit. Each side does the measurements, then another medium is used to transfer a 'mask' that then 'unmasks' the message from the spooky bits.   Since only each side has an assumed unique set of ""random"" set of bits from the measurements, the 'mask'  is basically a OTP and can even be sent out in the open or be revealed without revealing what the message is."
crypto,3b2z28,SushiAndWoW,1 point,Thu Jun 25 15:28:07 2015 UTC,I have confidence that BusyBeaver does favor the CPU more than alternative algorithms.   Bold claim. I actually don't see any advantage of your scheme when compared to any of the PHC finalists.
crypto,3b2z28,funkysash,1 point,Fri Jun 26 16:19:13 2015 UTC,"One advantage I see is conceptual simplicity. When I look at Lyra, my brain hurts. :)  15 kB of code (not including 10 kB for SHA-512) vs. Lyra's 40 kB (not including 10 kB for Blake). Comments included in both cases.  I've looked also at some of the others, but... they just don't seem very elegant. I like the elegance and simplicity of ""execute this pseudorandom block like it's a self-contained, entropy preserving Turing machine"".  Which algorithms do you like?"
crypto,3b2z28,funkysash,2,Sat Jun 27 05:02:46 2015 UTC,"To be fair most finalists have more features (client-independent updates, server-relief, keyed hashing...) than your scheme. Lyra2's complexity additionally comes from wanting some resistance against side-channel attacks and still provide sequential memory hardness.   battcrypt, parallel and pufferfish are very lightweight if that's what you are looking for. Both Catena instances compile to roughly 26kb each including Blake2b. I don't know  have much knowledge about the code for other schemes, but Makwa also shouldn't be to heavy.  If you are looking for simple schemes battcrypt, parallel, pufferfish and the core of makwa are quite easy. I would say that Catena also isn't to complicated.  Argon2 is very versatile and has the most complete feature set of all finalists. Argon2i may be especially interesting to you since it also bases it's memory pattern on the salt. They also do a very good job at demonstrating the TMTO penalties.  Full Disclosure: I worked on the reference implementation of Catena"
crypto,3b2z28,funkysash,1 point,Sat Jun 27 15:58:39 2015 UTC,"Lyra2's complexity additionally comes from wanting some resistance against side-channel attacks    I believe BusyBeaver to be fully side-channel resistant, with no tradeoffs to sequential memory hardness - assuming it's okay for salt to be known by attacker.   They also do a very good job at demonstrating the TMTO penalties.   Time-memory tradeoffs broaden the scope of architectures that can implement an algorithm cost-efficiently. It's what allows scrypt, as used in LiteCoin, to be sped up by orders of magnitude on a GPU. I'm not sure that this is a feature.  I appreciate your pointers, thank you!"
crypto,3b2z28,funkysash,1 point,Sat Jun 27 17:18:38 2015 UTC,"I believe BusyBeaver to be fully side-channel resistant   As your scheme has no data-dependent memory access you are surely secure against cache-timing attacks. Garbage-collector attacks however should work for you scheme.   If I understood your explanation correctly BusyBeaver will take different amounts of time for different users. This opens up a totally new kind of timing side-channel that allows to identify users. This isn't a severe threat but it could be harmful for people using Tor or similar software.   I'm not sure that this is a feature. Well, TMTO is nothing you can prevent. The question is if you know the penalties face by such a tradeoff."
crypto,3b2z28,funkysash,1 point,Sun Jun 28 16:20:13 2015 UTC,"Garbage-collector attacks however should work for you scheme.   Umm... how? There's no garbage collection involved. The algorithm operates on pre-allocated blocks of memory which aren't freed until the end.   If I understood your explanation correctly BusyBeaver will take different amounts of time for different users.   Time is constant. Memory access patterns would be different, assuming salt is different.   This opens up a totally new kind of timing side-channel that allows to identify users.   Yes, but not via external timing attack, only via cache-timing attack.  It's important to protect the most sensitive info from cache-timing attacks, but someone in a position to mount a cache-timing attack against a server should likely be able to tell users apart via other patterns which are impractical to conceal because they exceed the scope of crypto implementation.  It seems to me the general solution to cache-timing attacks is to strengthen the platform. It should not be possible to mount these attacks across VM boundary. It's possible due to flaws in hypervisor design, which I believe are being addressed - at least in the case of some hypervisors.   Well, TMTO is nothing you can prevent. The question is if you know the penalties face by such a tradeoff.   Well, of course, but in BusyBeaver's case I don't see a strategy to make that tradeoff - unless you're willing to recompute everything from scratch many times as the algorithm executes."
crypto,3b2z28,funkysash,1 point,Sun Jun 28 17:42:42 2015 UTC,"There's no garbage collection involved.    That's just the name of the attack. The main idea is to purge sensitive information as fast as possible. That is the reason why many current password hashing schemes have only one step that directly depends on the password. Heartbleed is probably the best example of why this might be important.   Time is constant. Memory access patterns would be different, assuming salt is different.   Sorry, I misunderstood you then."
crypto,3b2z28,funkysash,1 point,Mon Jun 29 14:46:06 2015 UTC,"The main idea is to purge sensitive information as fast as possible.   Ah, I see what you mean. I tried searching for ""garbage collection attack"" but didn't find a relevant result. I appreciate the clarification.  Yes, my current implementation keeps the password around for the final hash. The algorithm starts by executing 1024 SHA-512 hashes to populate the salt block, and then another 1024 to populate the password block. (At 50,000 operations, this phase is about 20% of the total cost of the algorithm.)  It would be a trivial change to keep around the N-th hash of the salt + password information, instead of the initial password.  I'm just not convinced of the threat of this type of attack. Only sysadmin should be able to get information ""exposed"" in this way. Sysadmin can always get any information.   Heartbleed is probably the best example of why this might be important.   Yyyeah. I have words to say about that. Mainly pertaining to the overestimated quality of open source (only projects actively paid for and developed by a company are usually good), and the fallacy of the ""many eyes"" hypothesis.  I lost so much respect for OpenSSL when this came out. So shoddy."
crypto,3az50v,k3d3,1 point,Wed Jun 24 17:46:59 2015 UTC,"Briefly read through the how-it-works, and have a question about the deletion token - if this is returned unencrypted, what's to prevent it being abused for denial of service?"
crypto,3az50v,LovelyDay,2,Wed Jun 24 18:45:58 2015 UTC,Uploaded a picture of myself. Dope. https://up1.ca/#xTma_GF7b8IU9k7mqjtrkw
crypto,3az50v,5960312,2,Wed Jun 24 19:47:25 2015 UTC,"Sorry, I'm not sure what you mean.  The deletion token is returned unencrypted when you upload an image (that's how you get the Delete button), however it's only returned to you, and it's only valid for the image you uploaded (running the ident and a secret key through an HMAC).  Maybe I don't understand - how can you create a DoS with that?"
crypto,3az50v,Natanael_L,2,Thu Jun 25 13:22:55 2015 UTC,"He's talking about somebody in the position to MITM the connection, such as on the same WLAN. That person could request deletion."
crypto,3az50v,Natanael_L,3,Wed Jun 24 18:53:41 2015 UTC,"Oh, good point. In that case, HTTPS would (somewhat) solve the issue, however I don't see any other way around that, apart from disabling the deletion functionality altogether (which isn't a bad idea to have as an option).  On the other hand, if someone's in a position to MITM the upload connection, they could simply cut off the upload altogether to get the same effect."
crypto,3az50v,Katana__,1 point,Wed Jun 24 18:57:12 2015 UTC,"This type of attack would make the cause less obvious.   Also, what about defense against XSS and malicious servers providing backdoored code?"
crypto,3az50v,freelyread,3,Wed Jun 24 19:04:23 2015 UTC,"Also, what about defense against XSS and malicious servers providing backdoored code?   As far as XSS goes, all input is sanitized and treated as untrusted.  For malicious servers providing backdoored code, there isn't much that can be done since there's no standard way to sign Javascript. We're looking into creating browser add-ons to either verify or entirely replace the code for an Up1 server, which would alleviate that concern to an extent.  Really, until there's some way to deal with signing and trusting Javascript (which I'm sure sounds easier than it actually is), this is going to be an issue for any website."
crypto,3az50v,aydiosmio,1 point,Wed Jun 24 19:11:41 2015 UTC,"Sign and distribute an nw.js or electron app, then? Code is local, API is remote."
crypto,3az50v,freelyread,1 point,Wed Jun 24 19:25:15 2015 UTC,"Absolutely; a local client is by far the best option here. The API is simple enough that it shouldn't be hard to do either, even without using node-webkit"
crypto,3az50v,Caminsky,-4,Wed Jun 24 20:05:11 2015 UTC,"The Licence is not GPL. :(    Actually, it uses the free MIT licence."
crypto,3az50v,sdrapkin,5,Wed Jun 24 20:07:48 2015 UTC,"Did you read the license? It's MIT, which is GPL compatible."
crypto,3az50v,aakilfernandes,1 point,Thu Jun 25 09:16:47 2015 UTC,"Oh, thanks for your reply, /u/aydiosmio .   i only had time for a quick glance at the Licence and looked at the very top, only.    If you have a free licence, I hope you give this the prominence it deserves, and have this writ large at the very top.   Thank you for developing code and releasing it under a free licence."
crypto,3az50v,sdrapkin,-2,Thu Jun 25 09:44:42 2015 UTC,so what are the main known vectors of attack to this implementations? I know client encryption is believed to be non secure
crypto,3az50v,maruwan,-5,Thu Jun 25 15:05:18 2015 UTC,"Your stated goal: ""server knowing nothing about the contents"". If you (the server operator) happen upon a file with id ""37+hB5VbtAffoEhJvnxEZw=="", and you know that this base64 id is the last 16 bytes of sha512 of the word ""reddit"", then you also have the IV and the KEY needed to decrypt the file. It's possible to run server checks inspecting for id's corresponding to the last 16 bytes of common dictionaries.  A client-side mistake of choosing a weak seed allows the operator to know exactly which file the weak seed will unlock, and then do that unlocking server-side."
crypto,3axur7,Natanael_L,10,Wed Jun 24 11:07:50 2015 UTC,"I'd like to see major email providers integrate PGP seamlessly into their services.  I'd also like a Ferrari, a golden pair of Nikes, and a pickle."
crypto,3axur7,5bits,1 point,Wed Jun 24 17:28:40 2015 UTC,Both yahoo and gmail has browser extensions for it in development. Would personally like to see OpenKeychain support in the gmail app.
crypto,3axur7,5bits,1 point,Wed Jun 24 20:27:10 2015 UTC,"Well call me a monkey's uncle.  I'm surprised that Google would build such a thing, given that they read emails to find people's interests (Yahoo too I assume). Maybe they're confident that an insignificant number of people will use it. It's gotta be in-your-face accessible to everyday folk."
crypto,3axur7,roxven,1 point,Wed Jun 24 23:21:28 2015 UTC,"At Google it's not an officially budgeted project. We can dedicate 20% of our time to a project or projects we just think should be done, and a lot of engineers are using that time to contribute to the PGP end-to-end plugin."
crypto,3axur7,3pg,1 point,Thu Jun 25 06:10:49 2015 UTC,"Nothing is preventing them from including back doors, or adding back doors later on using the update mechanism. Even if you discard their business model, they are still obligated to ""cooperate with law enforcement""."
crypto,3axur7,bontchev,1 point,Mon Jun 29 14:32:54 2015 UTC,The pickle can probably be arranged.
crypto,3axur7,5bits,2,Thu Jun 25 08:59:47 2015 UTC,Pickles don't just grow on trees.
crypto,3axur7,encryb,3,Thu Jun 25 21:45:15 2015 UTC,"I would like Apple to start treating cryptography a bit more seriously.  Their WebCrypto implementation is missing 60% of features. No elliptical curves, no AES-GCM, no PBKDF2, RSA signing does not work.  Even their native low level library CommonCrypto does not support AES-GCM."
crypto,3axur7,cunttard,4,Wed Jun 24 20:21:04 2015 UTC,I've always wanted an open source HSM which exposes a simple interface to the OS. I think Google Vault has the right idea a FAT(?) filesystem that exposes a data channel over a pair of files. I'll be commencing work to port it over to a USB armoury stick.
crypto,3axur7,cunttard,1 point,Wed Jun 24 21:39:55 2015 UTC,IMHO that works fine when you've got nothing untrusted with access to that part of the filesystem. But in something like Android I feel it would face risk of MITM.
crypto,3axur7,zeroXten,1 point,Wed Jun 24 22:05:28 2015 UTC,"The filesystem doesn't really act as a store, it just provides a convenient OS-agnostic1 shim to send RPC-like commands for encrypt/decrypt, sign/verify, etc. The uses a context-session ID per-application to support shared use by different applications. If you're interested in the details a good writeup on the OS/software can be found here.  I still need to further my understanding of the threat model both specific to Android and other uses I envision (specifically for servers etc. which /u/zeroXten may appreciate with his pki.io thing).  1: Which OS doesn't support a FAT driver :)."
crypto,3axur7,3pg,1 point,Wed Jun 24 22:53:04 2015 UTC,Cheers for the mention :D That port sounds cool!
crypto,3axur7,johnmountain,1 point,Wed Jun 24 23:27:41 2015 UTC,"Which OS doesn't support a FAT driver   Microsoft has patented the FAT-filesystem. Most OSs do support it, but if you want to avoid paying royalities to Microsoft then you may want to choose another filesystem."
crypto,3axur7,tom-md,2,Mon Jun 29 14:42:13 2015 UTC,Apps that are authenticated with the OS seems to be all the new rage now. I want that.
crypto,3axur7,johnmountain,1 point,Wed Jun 24 17:53:44 2015 UTC,"Can you say more about what that means and, aside from it being popular, why you like it?"
crypto,3axur7,roxven,2,Wed Jun 24 17:56:43 2015 UTC,"Apps authenticating with the OS means significantly stronger ""sandbox"". It seems even the current mobile sandboxes (which are kind of state of the art among mainstream operating systems) are still rather vulnerable to hacking/malware:  http://www.macworld.com/article/2937239/zero-day-exploit-lets-app-store-malware-steal-os-x-and-ios-passwords.html"
crypto,3axur7,ldpreload,2,Thu Jun 25 09:23:36 2015 UTC,"I want abstracted crypto to be a part of the standard library for new languages. Not a bunch of primitive implementations, but an API similar to sodium. This would really trim the bullshit down in hobbyist FOSS.  I was pretty excited to see the size of the crypto toolkit in Go's standard and extended library. I think that is a step forward."
crypto,3axur7,cunttard,4,Wed Jun 24 16:06:18 2015 UTC,"The trouble with putting something in a standard library is that it's hard to change after the fact. Go was in a very good place, in terms of the state of the world, when it developed its crypto standard library. Java, for example, was not.  We may be at the point where we're confident about some API, perhaps libsodium, for the next 20 years (Java Cryptography Architecture was originally specified in Java 1.1, from '97), but it's not obviously a good idea yet.  Meanwhile we can just use libsodium itself. Perhaps the real thing to wish for is better software engineering practices in general, so that libraries are easy to use and keep up to date."
crypto,3axur7,ldpreload,2,Wed Jun 24 17:40:21 2015 UTC,"What... no love for Android M keystore redesign?  Just look at the beautiful abstraction:  // key generation KeyGenParameterSpec.Builder builder = new KeyGenParameterSpec.Builder(""key1"",                     KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT); KeyGenParameterSpec keySpec = builder                     .setKeySize(256)                     .setBlockModes(""CBC"")                     .setEncryptionPaddings(""PKCS7Padding"")                     .setRandomizedEncryptionRequired(true)                     .setUserAuthenticationRequired(true)                     .setUserAuthenticationValidityDurationSeconds(5 * 60)                     .build(); KeyGenerator kg = KeyGenerator.getInstance(""AES"", ""AndroidKeyStore""); kg.init(keySpec); SecretKey key = kg.generateKey();  // key retrieval KeyStore ks = KeyStore.getInstance(""AndroidKeyStore""); ks.load(null);  KeyStore.SecretKeyEntry entry = (KeyStore.SecretKeyEntry)ks.getEntry(""key1"", null); key = entry.getSecretKey();"
crypto,3axur7,cwmma,1 point,Wed Jun 24 22:55:52 2015 UTC,"JCA (Java Cryptography Architecture) strikes again!  Seriously, this is why if it's 1996, you should try very hard not to get your crypto design principles entrenched (see also SSL), and if you're not 100% confident it's not 1996 part two, maybe you should still have that worry."
crypto,3axur7,johnmountain,1 point,Thu Jun 25 01:55:57 2015 UTC,Sane multi party otr protocol
crypto,3axur7,cwmma,2,Wed Jun 24 20:22:44 2015 UTC,What about TextSecure's multi-party protocol?
crypto,3ay3tc,sashankdvk,2,Wed Jun 24 12:54:05 2015 UTC,"Have a look Gareth Owen's CCC talk. It's, as far as I know, the current best effort to answer that question, at least as far as hidden services go."
crypto,3ay3tc,vzq,2,Wed Jun 24 14:16:26 2015 UTC,Pretty safe to say the vast majority is.
crypto,3ay3tc,angdev,2,Wed Jun 24 21:05:04 2015 UTC,Yeah i believe the same am looking for data/research that supports this
crypto,3ay3tc,dvcg,1 point,Thu Jun 25 02:17:59 2015 UTC,Maybe you should look for data/research BEFORE you make conclusions.
crypto,3ay3tc,blowupbadguys,2,Fri Jun 26 04:36:09 2015 UTC,Objectively defining good and malicious is probably its own topic of research. I suggest you check out Shining Light in Dark Places: Understanding the Tor Network
crypto,3ay3tc,WilliamSI,1 point,Thu Jun 25 02:41:49 2015 UTC,By design this question is next to impossible to answer.
crypto,3ath3e,johnmountain,38,Tue Jun 23 11:18:04 2015 UTC,"Bruce's point is that if everyone encrypts, it ceases to become a signal.  There's another aspect: every additional encrypted signal increases the effort  needed to decrypt the world's traffic.  There's not enough compute power to decrypt it all.  Ideally, only the highest value targets would get that treatment and leave the rest of us alone."
crypto,3ath3e,mnp,10,Tue Jun 23 12:19:36 2015 UTC,"So many newspaper and news-reporting websites don't use encryption by default these days. In 2015, that's a shame."
crypto,3ath3e,j1mcamp,11,Tue Jun 23 12:18:10 2015 UTC,"It's seriously disturbing, not one major US newspaper has HTTPS by default: https://httpswatch.com/us#newspapers"
crypto,3ath3e,kingkilr,1 point,Tue Jun 23 12:24:58 2015 UTC,Why do newspapers need ssl? it doesn't protect your identity in any way.
crypto,3ath3e,aakilfernandes,2,Wed Jun 24 22:12:26 2015 UTC,"This article Does a decent job of explaining the matter. I won't hold it up as some kind of gold standard, but it at least presents some benefits of using SSL on a news-based website."
crypto,3ath3e,j1mcamp,2,Wed Jun 24 23:48:22 2015 UTC,"So if I understand that site correctly, SSL doesn't protect the fact you're visiting WaPo, but it will protect which specific articles you read. That makes sense."
crypto,3ath3e,aakilfernandes,1 point,Thu Jun 25 19:43:26 2015 UTC,"Right.  : )  That's my understanding, too."
crypto,3ath3e,j1mcamp,2,Thu Jun 25 19:57:37 2015 UTC,"Every website needs ssl for authentication. It helps prevent spoofing and man in the middle attacks that can be used to leverage malware and construct usage profiles, amongst other things."
crypto,3ath3e,dezakin,6,Thu Jun 25 18:46:20 2015 UTC,So is there a real technical challenge for not running HTTPS on all websites?  Or is it just an expense companies don't want to pay?
crypto,3ath3e,me_z,17,Tue Jun 23 13:56:39 2015 UTC,"It's a pain to set up, a pain to maintain, a pain to debug, and a pain to monitor.  Not a major pain, but it's nonzero.  Sites like reddit and HN do it because the readers want it.  But convincing CNN or NYT or BBC is going to be another matter."
crypto,3ath3e,mnp,2,Tue Jun 23 18:33:24 2015 UTC,"It also increases load, which makes it minimally more expensive, and latency (which just sucks)."
crypto,3ath3e,Creshal,9,Wed Jun 24 10:20:26 2015 UTC,"A non-technical challenge is that a lot of ad networks don't do HTTPS. If switching to HTTPS means cutting your ad revenue in half, you probably won't do it.  This isn't an issue for Reddit or Facebook because they handle ads on their own but apparently it's a real issue for sites relying on third party ad networks."
crypto,3ath3e,Puidiov3,6,Tue Jun 23 19:16:00 2015 UTC,"I work for a company which runs ad-supported websites, can confirm - ad networks are a huge HTTPS dealbreaker as they are adapting slowly and pretty poorly as well. It got better since google started to boost the ranking of HTTPS sites, so we (the techs) got some additional leverage to push it forward - before, it was just a risk nobody was willing to take because there was no (business) advantage for using HTTPS and you have a constant hassle with ad providers which can't get it right."
crypto,3ath3e,maetthu,3,Tue Jun 23 23:26:25 2015 UTC,"Well many random sites don't want to pay several hundred dollars to a certificate authority every year. Also for each encrypted site there must exist a single ip for that site. (Unless they are using SNI). Virtual hosting would not be allowed. Then there is the actual overhead of tls that has a significant cpu cost per transaction, lots of people don't want to pay for that overhead either."
crypto,3ath3e,archlich,7,Tue Jun 23 15:01:51 2015 UTC,"Overhead is very small nowadays, letsencrypt would make it easy and free, SNI and other architectural issues are the only remaining notable problems"
crypto,3ath3e,Natanael_L,3,Tue Jun 23 16:09:48 2015 UTC,"SNI isn't an issue, but it's often used as an excuse. All browsers and SSL libs support it. You only need to worry about SNI if you want to support IE 6/7 on Windows XP."
crypto,3ath3e,Thirsteh,1 point,Tue Jun 23 16:52:22 2015 UTC,"Which unfortunately, if you're a large company, you cannot simply write off swaths of the population that have cash in hand that want you services. So for the time being, until ie6/7 are good and truly dead, sni won't be used broad scale."
crypto,3ath3e,archlich,5,Tue Jun 23 21:14:44 2015 UTC,We wrote them off as dead a year after support ended. No noticeable drop in revenue. In fact because we got bumped higher in search results we've noticed the opposite.
crypto,3ath3e,Katana__,1 point,Wed Jun 24 05:33:23 2015 UTC,"I believe there were plenty of Android browser configurations without support, too, which would enter ""dealbreaker"" territory."
crypto,3ath3e,pred,1 point,Wed Jun 24 02:24:13 2015 UTC,Even now there are CAs out there that sign certificates for free while still being in the default browser trust stores.
crypto,3ath3e,archlich,1 point,Tue Jun 23 18:04:18 2015 UTC,"Once again it's a barrier to entry that most website owners don't care to do, it's yet another thing to maintain and worry about."
crypto,3ath3e,archlich,1 point,Tue Jun 23 21:15:21 2015 UTC,"Letsencrypt will make it easier and free, but that wasnt the question posed. Right now, the barrier to entry for running https everywhere is the cost of the cert, and the complexity for small website owners to use https. It's a barrier to entry that most websites just don't cross, because they feel it's not needed."
crypto,3ath3e,JoseJimeniz,1 point,Tue Jun 23 21:13:53 2015 UTC,There's another fundamental problem with mixing authentication and encryption in one thing: there's no reasonable way I can anonymously get an encryption certificate for   silkroad.com
crypto,3ath3e,Puidiov3,1 point,Wed Jun 24 03:35:43 2015 UTC,You can use startssl and just lie about your personal information. Just like you presumably do for domain registration etc. It's also not a problem 99% of web sites face.
crypto,3ath3e,chowmeined,3,Wed Jun 24 09:27:00 2015 UTC,"More like $10/year to a CA for a domain control validated cert. That is less than the cost of many domain names. And if they are small enough that the price of the cert is an issue, they aren't big enough for the overhead of TLS to be an issue."
crypto,3ath3e,pred,1 point,Tue Jun 23 16:53:14 2015 UTC,Super nitpicky: The certificate is certainly free to generate. Getting it signed need not be though.
crypto,3ath3e,Klathmon,2,Wed Jun 24 07:00:18 2015 UTC,"Tls overhead is less than 1% CPU, 10kb of memory per connection, and 2% latency increase.  Performance is no longer an excuse. Read more here"
crypto,3ath3e,rfdgdf,1 point,Wed Jun 24 01:27:08 2015 UTC,what design theme does bruce use for his site? its great and i want it
crypto,3atxw9,trapatsas,1 point,Tue Jun 23 14:09:36 2015 UTC,80 days CTF?
crypto,3atqxu,namelessbiztraveler,1 point,Tue Jun 23 13:06:44 2015 UTC,So where are the actual contents of the question?
crypto,3atqxu,Natanael_L,1 point,Tue Jun 23 13:20:10 2015 UTC,"I am taking a self-study and am stuck on a question. The keyed function F is  Fk(x)=k⊕x    Given access to an oracle g, query y=g(0…0) and y′=g(0…0). Then output 1 if and only if y=y′. Given access to an oracle g, query y0=g(0…0) and y1=g(1…1). Then output 1 if and only if y0⊕y1=1…1.   I've whittled it down to be one of the bullets but don't understand enough to choose which one. Help?"
crypto,3atqxu,Natanael_L,1 point,Tue Jun 23 15:09:07 2015 UTC,The former would show that there's an input pair with the same output. The latter proves there's a specific correlation between the outputs depending on the inputs. Then look at what the definition of PRF requires
crypto,3atqxu,0x616e746f6e,1 point,Tue Jun 23 15:33:37 2015 UTC,"Sorry, I am a n00b.   Since a PRF is nearly random, the first world prove that F is a PRF so the answer is the second bullet?"
crypto,3atqxu,Natanael_L,2,Tue Jun 23 16:05:47 2015 UTC,"PRF means that an adversary cannot write a distinguisher that has more than a negligible advantage distinguishing the output of a PRF from uniform random.  Your first bullet only shows that the PRF is deterministic, in other words that for the same input it produces the same output.  Your second bullet shows a way to build a distinguisher. For two oracle inputs x0, x1 that produce outputs y0 (= g(x0) = k XOR x0) and y1 ( = g(x1) = k XOR x1) you can see that y0 XOR y1 = k XOR x0 XOR k XOR x1 = (k XOR k) XOR (x0 XOR x1) = 0 XOR (x0 XOR x1) = x0 XOR x1. So y0 XOR y1 always equals x0 XOR x1. If the output were truly random, the probability that this holds is 2-n , I'll omit the proof... So the distinguisher has advantage 1 - (2-n ) which is clearly not negligible."
crypto,3aqqag,hietheiy,2,Mon Jun 22 19:09:53 2015 UTC,"Amazing stuff!!! Look at what bitcoin has started, a snowball effect of geniuses.  I was able to visualize the whole thing. BRAVO."
crypto,3aqqag,ameanbitcoiner,1 point,Tue Jun 23 05:58:10 2015 UTC,"interesting, but hate it.  I'm not saying this does not solve someone's problem, but it seems like a huge waste of electricity."
crypto,3aqqag,Godspiral,1 point,Tue Jun 23 14:20:42 2015 UTC,Perhaps it could offer value and replace some other service. Then a cost analysis could be done to see if overall it would be a net energy efficiency gain.
crypto,3aqqag,Godspiral,1 point,Tue Jun 23 17:27:56 2015 UTC,"The big wtf is cracking encryption as a proof of work algo.  The nail in the coffin however is that the author knows all of the answers, and unless he is paying all of the mining rewards, he collects them all.  Details weren't provided, and so maybe I missed an elegance, but is each secret its own blockchain, with each its own difficulty and rewards rate?  If there is a 1 cent reward for a 10 year secret, maybe I can solve it more cheaply than that if there is no competition, but its super easy, and I give up as soon as there is one other computer that tries to solve the chain, and screws up the difficulty.  Basically if I take 1 hour before solving the first block, and then post a solution every 5 minutes thereafter, I can keep it at a super easy difficulty.  If its super easy though, how can I not find the secret earlier than I'm supposed to by simply not publishing the results?"
crypto,3ale9b,shreyasonline,1 point,Sun Jun 21 10:06:21 2015 UTC,The application is developed in c# so its using .net framework crypto library. The upgrade is with the protocol which earlier used RSA for key exchange and now uses DHE & ECDHE.
crypto,3ale9b,poopinspace,1 point,Mon Jun 22 14:44:41 2015 UTC,"The protocol documentation is not currently available but, you can check out comments in the GitHub repo which explains it in brief: https://github.com/TechnitiumSoftware/BitChatClient/blob/master/BitChatClient/Network/SecureChannel/SecureChannelStream.cs"
crypto,3aj1v5,Marvok1,20,Sat Jun 20 17:54:25 2015 UTC,"For modern cryptography: Unless there is a header identifying the format, then no, they're all meant to be indistinguishable from random.  For old codes: you can tell on the character set, letter frequencies, repeating patterns, etc... For example, the enigma always prevented you from having any character occur in pairs in the ciphertext."
crypto,3aj1v5,Natanael_L,5,Sat Jun 20 18:25:13 2015 UTC,"Yes, I was talking about old codes, ciphers pre-WW2, but polyalphabetic ones. This is why I thought, as you confirmed me, that is possible to understand which chiper has been used even if at the beginning is unknown, but I don't know where to start. Do you know if there are some resources on the net that may explain me this more in detail? Saddly I couldn't find anything about it and I find the topic very interesting."
crypto,3aj1v5,R-EDDIT,4,Sat Jun 20 19:36:00 2015 UTC,"""Rules"" in the sidebar:   ""Codes, ciphers, ARGs, and other such ""weak crypto"" don't belong here. (Rule of thumb: If a desktop computer can break a code in less than an hour, it's not strong crypto.) You're probably looking for /r/codes."""
crypto,3aj1v5,R-EDDIT,6,Sat Jun 20 21:45:18 2015 UTC,"Thank you, I will repost this there and I'm truly sorry for violating the rules of the subreddit."
crypto,3ai92z,mrkoot,1 point,Sat Jun 20 12:58:05 2015 UTC,The 20th International Workshop on Fast Software Encryption (FSE) 2013 took place in Singapore on March 11-13th 2013. The conference organizer (IACR) uploaded these videos in the last 24 hours.
crypto,3ai92z,poopinspace,1 point,Sat Jun 20 12:58:48 2015 UTC,2 years after!
crypto,3ai92z,poopinspace,1 point,Tue Jun 23 03:33:46 2015 UTC,"I tried to watch the RC4 attack one, guy is japanese impossible to understand him + the quality is very low. The video is unwatchable /: (actually I can't even tell if he speaks english or japanese since the quality of the video is so bad)  I'm watching the DJB video now, it's more intellegible"
crypto,3aikr7,sxsf_,7,Sat Jun 20 15:12:43 2015 UTC,"Signal is good.  WhatsApp is going to use OTR encryption from the makers of signal (openwhispet) but it hasn't been fully rolled out.  Also WhatsApp didn't fare very well in the EFF's ""who has your back"" report just released.  Message recall is always a sketchy feature, because you are really sending a message to the recipient's device asking to delete the previous message.  It's better to think twice before sending a message than to have a false sense of security, message recall can't unring a bell, the recipient might already have hurt feelings, made a copy/picture if the screen, etc.  In some systems the recipient can just ignore recall requests."
crypto,3aikr7,R-EDDIT,2,Sat Jun 20 16:06:33 2015 UTC,"Signal definitely looks like the way to go from what I've read. Just one thing, I noticed that someone said 'self destruct messages' will give a 'false sense of security' because one can change the code of the app to not self destruct. Is this because it is open source, and if so, can't people just hack the code and create the app so it's not as safe then? If not then what's the difference between that and self destruct - (Jakobs post on http://support.whispersystems.org/customer/portal/questions/8298424-will-there-ever-be-a-self-destruct-timer-for-messages-etc-)"
crypto,3aikr7,Natanael_L,1 point,Sun Jun 21 09:04:25 2015 UTC,"It is the DRM-will-fail argument, see the analog hole"
crypto,3aikr7,anonyymi,2,Sun Jun 21 23:41:19 2015 UTC,"There's also an Android client, but it's named TextSecure.  More info at https://www.whispersystems.org/#encrypted_texts"
crypto,3aikr7,GeorgeW88,1 point,Tue Jun 23 04:48:43 2015 UTC,"I guess, Skype is a really great chat app - http://skype.joydownload.com I like how it is easy to get it and use. Skype is very reliable and popular chat app really. It is my choice"
crypto,3aikr7,Mazed,0,Tue Jul 21 12:36:26 2015 UTC,Threema is nice.
crypto,3aikr7,dareksam,2,Tue Jun 23 09:06:31 2015 UTC,"Lacks forward secrecy though. They ""have it on the transport layer"" which basically mean they use modern TLS. The encryption is much like good old GPG."
crypto,3aikr7,ITMANAGER_KILLME_PLS,-1,Thu Jun 25 20:38:35 2015 UTC,"A friend pointed me to Wickr, which seems pretty good."
crypto,3aikr7,sulaymanf,3,Sat Jun 20 17:15:49 2015 UTC,"Wickr works well, but since it's closed-source and its protocol is undocumented, we have no way of knowing whether a backdoor has been inserted."
crypto,3aikr7,blindcolor,3,Sat Jun 20 18:04:49 2015 UTC,Or whether the implementation itself is good:)
crypto,3aikr7,bascule,3,Sat Jun 20 18:31:06 2015 UTC,Wickr is snake oil
crypto,3aikr7,ITMANAGER_KILLME_PLS,1 point,Sun Jun 21 03:29:15 2015 UTC,How so?
crypto,3aikr7,bascule,4,Mon Jun 22 14:23:46 2015 UTC,"Let's just say they got an audit and I know people who saw their codebase firsthand and know how scary it is...  Beyond that, their (soon-to-be-former?) CEO Nico Sell thinks the NSA-created elliptic curve P-521 was created by Whit Diffie (and also thinks Wickr is NSA-proof):  https://fortune.com/2014/04/10/10-questions-nico-sell-co-founder-and-ceo-wickr/"
crypto,3aikr7,ldpreload,1 point,Tue Jun 23 03:46:27 2015 UTC,"To be fair, that just reads like terrible reporting/editing. She could have just said ""Diffie-Hellman"", which would be correct, instead of ""ECDH-521"", and the distinction got lost the same way question 2 got lost. (Seriously, it goes straight from question 1 to question 3.)"
crypto,3aikr7,bascule,1 point,Wed Jun 24 17:44:44 2015 UTC,I liked Matt Green's explanation:  https://twitter.com/matthew_d_green/status/585914025701199872
crypto,3aikr7,TweetsInCommentsBot,1 point,Thu Jun 25 05:06:29 2015 UTC,@matthew_d_green   2015-04-08 21:16 UTC  @bascule @0xabad1dea During Whit's elliptic curve phase. After the black album.     This message was created by a bot  [Contact creator][Source code]
crypto,3aavrb,johnmountain,6,Thu Jun 18 16:42:55 2015 UTC,"Heh, wasn't it already? HTTPS anywhere must have nade me to think that..."
crypto,3aavrb,rubdos,7,Thu Jun 18 21:28:58 2015 UTC,"Every site is a HTTPS site with HTTPSEverywhere!  Except those sites that don't have https support. Those are annoying, but generally it's not critical (bash.org is one)."
crypto,3aavrb,5225225,2,Thu Jun 18 21:39:09 2015 UTC,And those that have support but have not been added yet: all the sites in the extension are added manually.
crypto,3aavrb,pred,9,Fri Jun 19 07:43:09 2015 UTC,"They will, however, comply with US law in today's political climate - even if that means handing participating in censorship or making data available at a mass scale for surveillance."
crypto,3aavrb,seattlyte,7,Fri Jun 19 00:20:06 2015 UTC,"An admin posted before that a loophole against data protection laws is to edit a comment and delete all the text.  They said if you delete your comment they still have to store the original comment, but if you edit your comment and remove all the text there will be nothing but a blank comment saved.  <rant>  As an aside, I do find it ironic that they are switching to HTTPS to protect the speech of users while also rolling out censorship and shadow-banning and saying that they aren't a free speech platform anymore.  It looks like they are more interested in protecting the speech of people who agree with the site's political views than free speech in general.  </rant>"
crypto,3aavrb,dx87,3,Fri Jun 19 11:17:25 2015 UTC,"The concept of trusted certificate authorities allows the US to apply pressure to CAs and snoop on your SSL, so while this is a nice step, no one should be fooled into believing your reddit browsing habits are truly secure."
crypto,3aavrb,cs80,3,Fri Jun 19 12:10:01 2015 UTC,"On your rant, their actions are not in conflict with one another. People can bitch all they want, but Reddit is a private entity, and they do have a right to handle the user base in any manner they see fit. So to give a proper analogy, Reddit is an emporium of all kinds of things, from fluffy kittens and cooking recipes on the first floor, upliftingnews and sciency stuff on the third floor, local interest on the second floor, and storm front and FPH in sub-basement Z. For the most part, they don't care who rents space. However, if a group renting space starts ignoring the few rules that are in place AND creating a toxic environment, throwing a tantrum, and generally acting childish, or they start breaking laws, they're gone. Which is why Stormfront still exists, as well as TheRedPill, despite both being places filled with shitlords, while subs that were about animated CP were kaibashed real quick, and FPH no longer exists. FPH's members are arrogant bastards feeling they're entitled to special privledges. From what I understand, they got upset at Imgur for their ban, became uber butthurt and started doxxing imgur admins and that ultimately is what got them shut down.  The fact that they were jackasses to begin with is just icing on the cake.  This whole situation is like someone who is a minority pissing in someone else's coffee and then screaming racism when Bertha, the waitress, throws them out the front door on their ass.  So to characterize the situation as ""free speech"" is both wrong and disingenuous. It wasn't about political views, and even playing devil's advocate if it were... it's entirely their prerogative, they're a private company and they're free to change the rules. If people don't like it, they're free to stand up their own platform."
crypto,3aavrb,ragewithinthemachine,0,Fri Jun 19 14:03:18 2015 UTC,"While on the whole you are likely right, political infiltration and partnership of the 'private' company means that the corporation is no longer truly private and should be subject to the limitations imposed on government.  Pao, for example, is a member of a Washington National Security thinktank and reddit is subject - as are all social networks - to the current crackdown by governments to shape online conversation.  We should not be fooled into thinking that because reddit is a corporation that it has only private incentives, private goals and private membership: just as we do FRDCs like the RAND corporation and 'private' intelligence firms like Stratfor."
crypto,3aavrb,seattlyte,1 point,Fri Jun 19 20:49:54 2015 UTC,"Likely right? This isn't really a situation up for debate. Reddit is a private entity, end. Reddit is free as such to do as it pleases.  We can ""should"" all damn day. But that doesn't change the ""is""."
crypto,3aavrb,ragewithinthemachine,0,Fri Jun 19 20:54:17 2015 UTC,"No, but people aware of the 'should' can change the 'is'. That happens all the time. The 'is' changing itself is.  It doesn't suddenly become legal, for example, if the US hires 'private' contractors to perform propaganda operations on American citizens just because 'private' contractors are free to do what they want.  If this is legal it's pretty easy for government do legally circumvent any restrictions imposed on it."
crypto,3aavrb,seattlyte,1 point,Fri Jun 19 20:59:55 2015 UTC,"US hires 'private' contractors to perform propaganda operations on American citizens   I see... you're an employee at Reynolds Wrap... because really, that's the only way you'd be able to fund your tin foil hat addiction. Because it's easier to assume there are ""propaganda operations"" going on, instead of people just not fucking agreeing with your preconceived notions."
crypto,3aavrb,ragewithinthemachine,2,Fri Jun 19 21:03:47 2015 UTC,"You missed the ""if"" in front of what you quoted.  For now presume that it doesn't happen and it's a hypothetical legal question.  If such a thing were to happen, would it be legal?  For comparison think about the Snowden disclosures. Mass surveillance - a subject of study by Reynold's Wrap (TM) - is outsourced (via the third party doctrine) to private companies.  Please refrain from appeals to fallacious arguments (ad hominem in this case) and reply to the substantive contents of arguments charitably."
crypto,3aavrb,seattlyte,1 point,Fri Jun 19 21:14:49 2015 UTC,OTOH there's overwhelming evidence that propaganda operations actually are real. The hard part is figuring what's what - there's usually not much evidence available that could reveal who's paid and who's not.
crypto,3aavrb,Natanael_L,3,Sun Jun 21 10:55:49 2015 UTC,"No... we just don't store revision data on comments. When you submit an edit, that new text goes into the appropriate database field and overwrites the old one."
crypto,3aavrb,xiongchiamiov,2,Fri Jun 19 15:26:16 2015 UTC,"Correct.  I haven't tested this specifically, but from all my knowledge of how the system works, I can't imagine otherwise being the case."
crypto,3aavrb,xiongchiamiov,-4,Fri Jun 19 16:39:49 2015 UTC,They have publicly taken the stance of choosing to not fix https://www.np.reddit.com/
crypto,3aavrb,unique616,2,Fri Jun 19 18:04:17 2015 UTC,Why would they? https://np.reddit.com/ works.
crypto,3aavrb,Thirsteh,-2,Fri Jun 19 18:17:26 2015 UTC,Because people type the wrong thing and then I have to fix it in my url bar.
crypto,3aavrb,unique616,5,Fri Jun 19 00:47:21 2015 UTC,Anyone still using www. when they type addresses online except when explicitly required are fucking morons.
crypto,3aavrb,ragewithinthemachine,2,Fri Jun 19 05:30:52 2015 UTC,The number of people using that should significantly decrease when it no longer works for anyone.
crypto,3a9of7,Creshal,1 point,Thu Jun 18 09:45:18 2015 UTC,"Probably not news, but I'm curious on others' opinion on it. The performance and other features sound almost too good to be true."
crypto,3a9of7,silverforest,4,Thu Jun 18 09:46:52 2015 UTC,"The following papers are relevant:   J-P. Aumasson, P. Jovanovic, and S. Neves, Analysis of NORX, Cryptology ePrint Archive:  Report 2014/317 I P. Jovanovic, A. Luykx, and B. Mennink, Beyond 2c/2 Security in Sponge-Based Authenticated Encryption Modes, Cryptology ePrint Archive:  Report 2014/373   I would recommend waiting until the conclusion of the CEASAR competition before considering usage.  Their presentation at 31c3 might also interest you."
crypto,3a9of7,sellibitze,3,Thu Jun 18 12:55:51 2015 UTC,As an enthusiast that hasn't really tried understanding the attacks on these kinds of ciphers or reduced verions of'em: I like it. It's simple (ignoring the explicit parallel modes). It's Sponge-based with a permutation inspired by ChaCha. There is a high degree of instruction-level paralellism in there so that's one reason why it's so fast on modern superscalar CPUs. Another is that the permutation is composed out of only 4 rounds. that surprized me and still worries me a bit. But at least they apply the permutation twice after the initialization before any of the state is used for the key stream.  I'm expecting NORX to enter the second round of the CAESAR competition -- whenever that may be.
crypto,3a9of7,dareksam,2,Thu Jun 18 16:47:03 2015 UTC,"I can't remember the details, but every norx round is the same as two (three?) chacha20 rounds. They copied the round function or something along those lines. Someone will have to verify it though, I can't remember"
crypto,3a9of7,silverforest,2,Thu Jun 18 21:17:56 2015 UTC,Every Norx round is exactly two ChaCha20 rounds with two differences:   all instances of 32-bit addition (x ⊞ y) replaced by the approximation ((x ⊕ y) ⊕ ((x ∧ y) << 1)) different rotation constants in the quarter round
crypto,3a9of7,bitwiseshiftleft,2,Thu Jun 18 22:52:16 2015 UTC,"Only 4 rounds seems a bit aggressive to me.  I would probably use 8.  I'm not thrilled with the non-hermetic nature of the sponge construction.  It doesn't matter most of the time, but it may limit the variations of the construction.  Overall, I have mixed feelings about P-sponges in general.  I understand that it's often easier to build permutations than non-invertible functions.  But having an inverse seems like a liability more often than not, especially if the inverse is slower and more complicated so that nobody will ever use it.  It also can mess up security proofs.  That said, NORX seems like an OK design.  I'd just expect to see 3.5/4 rounds get broken.  They'll bump the round count to have a safety margin, but it'll still be plenty fast."
crypto,3a9of7,sellibitze,1 point,Fri Jun 19 03:22:13 2015 UTC,"Can you shed some more light on what you mean by ""non-hermetic"" in this context? I know that this is a term that was also used/defined in the Cryptographic Sponge Functions paper. But to be honest, I'm not sure what exactly it refers to.  Do you mean by ""non-hermetic"" that the Norx F function does not try to ""approximate"" a ""randomly chosen"" permutation w.r.t. zero being a fixed point and possibly other properties? Or are you referring to differences in block padding / domain separation?"
crypto,3a9of7,bitwiseshiftleft,1 point,Sun Jun 21 20:51:34 2015 UTC,"Do you mean by ""non-hermetic"" that the Norx F function does not try to ""approximate"" a ""randomly chosen"" permutation w.r.t. zero being a fixed point and possibly other properties?   This one, yeah.  P-sponges are already tricky to deal with in the standard model, and this makes it even trickier to say what properties the sponge needs to have for a particular design to be secure."
crypto,3a9of7,johnmountain,1 point,Sun Jun 21 21:25:32 2015 UTC,How is the security compared to ChaCha20? Does it obtain its extra performance mainly by reducing the security as well?
crypto,3a9of7,LightBit8,2,Fri Jun 19 11:03:41 2015 UTC,"ChaCha20 is only a stream cipher. However permutation itself obtains its performance by reducing number of rounds. Actually NORX one round is slower than two rounds of ChaCha (which is equivalent), because x ⊕= y ⊕ ((x ∧ y) << 1)) is slower than  x ⊞= y in software. Also addition is more complex operation, therefore possibly stronger."
crypto,3a7e5g,antiduh,12,Wed Jun 17 20:27:53 2015 UTC,The KeePass front end with all the crypto handled by Libsodium.
crypto,3a7e5g,ForestC,1 point,Thu Jun 18 02:02:03 2015 UTC,"This is a winner. I evaluated all the linux password managers recently, and keepass(x) is by far the best UI-wise.  How hard could this be, really? Keepass encrypts in memory as well, but there it already uses salsa20 IIRC. The database could stay more or less the same."
crypto,3a7e5g,dareksam,-6,Thu Jun 18 08:04:30 2015 UTC,"...which will render KeePass unacceptable for all US DoD and Federal Government uses, including all vendor solutions that might be sold to/used by US Agencies/Departments. Bad idea."
crypto,3a7e5g,sdrapkin,15,Thu Jun 18 03:28:02 2015 UTC,"Too bad for them? If I wanted to make a strong FOSS password manager, FISMA/FIPS standards/NIST publication compliance isn't at the top of my list. Tom Ptacek (who you cite elsewhere) straight up thinks NaCl/Libsdium should be the first choice for symmetric cryptography with AES-GCM being his third (his second choice is Chacha20-Poly1305 which is already the NaCl/Libsodium default!) I agree with him.   It's really only a bad idea if you're designing your software with the US government in mind. As it turns out, I would not be. They're free to use it of course!"
crypto,3a7e5g,ForestC,0,Thu Jun 18 04:28:44 2015 UTC,"I never cited Mr. Ptacek unless it was in direct response to him (commenting on his earlier statement) or I was making a rebuffing remark to those that blindly subscribe to everything Mr. Ptacek has to say. Everyone is entitled to their own opinions.  GCM is a poor choice for a crypto mode for long-term encryption (ie. it's already not strong enough vs alternatives). Mr. Berstein's work is also a poor choice in this scenario (it is not yet mature enough vs alternatives). You simply can't beat AES-CTR with HMAC as a long-term crypto choice today (for a client-based password manager scenario, like KeePass).  There is no need to rewrite KeePass as it is. It can keep its AES-CBC due to wide availability and implementation ease. It is just missing an HMAC - add it in and we're done.  But I wouldn't want to distract anyone from crypto fantasies of chacha-poly-gcm-keccak-scrypt-whatever."
crypto,3a7e5g,sdrapkin,5,Thu Jun 18 15:03:49 2015 UTC,My thoughts  https://roamingaroundatrandom.wordpress.com/2014/08/04/my-take-on-the-ideal-password-manager/
crypto,3a7e5g,Natanael_L,2,Thu Jun 18 00:17:46 2015 UTC,"I am not so Sure about a public key password manager. I sync mine through dropbox, and I wouldn't want anyone with my public key to be able to add something to the database.  I could imagine that you keep both keys encrypted in the vault, with the possibility to export the public one. The problem would be adding something with the public key and still provide authentication."
crypto,3a7e5g,dareksam,1 point,Thu Jun 18 05:10:49 2015 UTC,"Well, you could add the option to authenticate by using a separate password for HMAC of the newly created credentials, after which all of it is encrypted with the public key. Then you don't allow for easy bruteforce of the HMAC key even if it is short like a PIN, and upon decryption the software can discard incorrectly authenticated ciphertexts."
crypto,3a7e5g,Natanael_L,3,Thu Jun 18 10:08:39 2015 UTC,"Some thoughts -   It seems like implementing AES-GCM safely as a AEAD scheme is quite hard to get right, but nothing insurmountable:   The IV has to be protected under the AAD. Must never re-use an IV with the same key, else the authenticity and integrity is lost. The IV should be at least 12 bytes long, if not 16 or more. Authentication tag lengths of 32-bit are likely to be very unsafe. If I'm understanding correctly, we should probably use an authentication tag of 256 bit and no less.   Have I forgotten anything?  But considering these, perhaps some other AEAD scheme such as EtM AES-256 / HMAC-SHA2-256 would be safer.  Folks bring up the point of slow filesystem bit-rot causing databases to be inaccessible, so perhaps something like Reed-Solomon forward error correction would be worthwhile, but does that compromise the security? I would figure File = RS( AEAD( Plaintext ) ), which I would assume would be a benign composition, but I wonder what other folks think.  Are folks still happy with the key derivation algo? /u/Creshal brings up a good point - he uses scrypt instead of pbkdf2, since pbkdf2 doesn't require large amounts of memory to run in parallel, and can be made significantly faster on FPGAs or ASICs. scrypt instead imposes large memory requirements as well as CPU, thus defeating the custom hardware problem.  Also, I'm not sure if I understand the timing attack complaints - making KeePass secure against timing attacks would probably mean a lot more than fixing the stupid ArrayEquals() implementation - after all, wouldn't we need to worry about the AES and HMAC-SHA implementations too? I don't know of any reference that claims the implementations used in .Net are secure against timing attacks, but maybe I'm wrong."
crypto,3a7e5g,Creshal,5,Wed Jun 17 21:08:22 2015 UTC,"Folks bring up the point of slow filesystem bit-rot causing databases to be inaccessible   If that's a concern, just use ZFS/btrfs with sufficient redundancy. It's a concern for non-authenticating databases too – if the metadata (headers, delimiters, …) of your DB are corrupted, you might not be able to parse the file anyway, even if it decrypts without warnings.  (yspave creates a backup database file after all writing operations. I was mainly concerned that bugs introduced by me would eff up the database, but it offers some recovery against bit-rot, too, at the price of reverting your last write.)   perhaps something like Reed-Solomon forward error correction would be worthwhile   I'd skip straight to turbocodes, to keep the overhead minimal, and I think applying FEC on top of encrypted data doesn't really introduce any new security considerations.   Are folks still happy with the key derivation algo?   You might consider waiting for the PHC to finish. Among a few new algorithms, it also features an improved version of scrypt (yescrypt).   But yeah, with password databases you have no possibility to impose artificial limitations on the brute force speed (unlike, say, website logins), so I really wouldn't want to use anything remotely fast here.   after all, wouldn't we need to worry about the AES and HMAC-SHA implementations too?   Why yes."
crypto,3a7e5g,Creshal,1 point,Thu Jun 18 05:16:33 2015 UTC,"Folks bring up the point of slow filesystem bit-rot causing databases to be inaccessible   If that's a concern, just use ZFS/btrfs with sufficient redundancy.   Well, one huge strength of KeePass is that it just stores data in a single file and what you do with that is up to you; asking people to use ZFS seems silly. Anybody that wants to keep it on google drive, or an sftp share, or on Windows may have zero choice over the storage method.   That's why I brought up FEC ala Reed-Solomon - up until the FEC is overwhelmed, it'll keep working even if you get random bitrot or lose an entire filesystem block (assuming the FEC uses interleaving).   I mentioned RS only because its the easiest one I know to implement and has a lot of supporting code out there; I've had a hard time finding concrete information on implementing turbo codes or LDPC codes (if you have any good resources, I'd love to read them, btw).  My initial impression is that FEC efficiency isn't exactly critical - I'm assuming that the password databases being used here aren't huge, probably in the realm of 50k on average, maybe a couple megs at the worst; my own file is only 25 kbytes. So the difference between a FEC that reaches 80% of the theoretical limit versus one that reaches 95% doesn't seem important to me here. Does that seem like a reasonable assumption, or are folks storing hundreds of thousands of password entries?"
crypto,3a7e5g,Creshal,2,Thu Jun 18 15:22:29 2015 UTC,"Well, one huge strength of KeePass is that it just stores data in a single file and what you do with that is up to you; asking people to use ZFS seems silly. Anybody that wants to keep it on google drive, or an sftp share, or on Windows may have zero choice over the storage method.    Well, yes. But how many of those people are paranoid about bit rot? Let's be realistic, bit rot is rare. Really damn rare. File system or firmware errors are more probable to corrupt any given file than bit rot – because storage media already implement FEC. The 1:10¹⁴ or ¹⁵ chance for read errors is after several layers of FEC were applied.  If you're paranoid, you can apply FEC onto your password file (and are hopefully using ECC RAM, otherwise bit rot can still occur afterwards!)… or you can make an off-site backup. The latter doesn't only protect against bit rot, but also against file system errors, mechanical failures, electrical failures, theft, floods, hurricanes, bored cats with water glasses, small children with screwdrivers, and meteor impacts up to 50 megatons."
crypto,3a7e5g,Creshal,2,Thu Jun 18 16:50:23 2015 UTC,I'd probably do it like this. Again.
crypto,3a7e5g,ctz99,1 point,Wed Jun 17 20:50:21 2015 UTC,Anything you'd like to share about the design of yspave? Do you use AES-GCM for AEAD? Or do you do AES-CBC with HMAC-SHA2-256 in EtM? Or some other scheme?   What does your unencrypted header look like? What do you do with your IVs?
crypto,3a7e5g,Freeky,2,Wed Jun 17 20:54:38 2015 UTC,"I've tried to document everything in the repo. TL;DR: scrypt, lots of it."
crypto,3a7e5g,Creshal,3,Wed Jun 17 20:59:23 2015 UTC,"Hm, looks like scryptdec_buf also uses memcmp to verify hmac. Which is morally (but, if you have a good C library, typically not actually) as bad as the array comparison being complained about.  ref: https://github.com/Tarsnap/scrypt/blob/master/lib/scryptenc/scryptenc.c#L414"
crypto,3a7e5g,hietheiy,1 point,Thu Jun 18 11:23:03 2015 UTC,"Seems pretty much irrelevant given the way it's used.  It's not on the end of a network connection where an attacker can iteratively feed it different chunks of encrypted data and watch how long it takes to reject each one.  Keep in mind scrypt-the-encryption-tool is designed for local storage of encryption keys.  You type in your passphrase and wait 5 seconds while it randomly churns through a GB of memory before it tells you whether or not you just won the plaintext.  An attacker would have to be able to tamper with it repeatedly, have you attempt to decrypt it repeatedly, and monitor the reaction time with great precision, many, many, many times.  All to hopefully, eventually, get you to decrypt a random blob of data instead of what should have been there.  That still doesn't get you any closer to recovering the key, or let you control what the malicious ciphertext decrypts to.  You can already run a brute-force offline attack because you'd have to have access to the ciphertext to launch the attack in the first place."
crypto,3a7e5g,hietheiy,3,Thu Jun 18 20:41:07 2015 UTC,"You protect the entire database, and then each field individually in the database. Whats the point of that?"
crypto,3a7e5g,dareksam,1 point,Wed Jun 17 21:23:57 2015 UTC,"The database is encrypted to prevent/detect tampering when at rest (Dropbox et. al.).  The actual data is encrypted so that partial memory dumps (e.g. on a swap partition, or after a cold boot attack) won't divulge too much data.   Ideally I should use a language that actually allows me to control memory allocations for that, to prevent copies of the plain texts from floating around after garbage collection, but for a first step I'd rather not deal with C for this, and Rust was considerably less stable back when I planned this (Jan '14)."
crypto,3a7e5g,eeget9Eo,1 point,Thu Jun 18 05:04:08 2015 UTC,Does this apply to keypassx?
crypto,3a7e5g,g30rg3_x,3,Wed Jun 17 23:10:18 2015 UTC,"KeePassx is a C++ Linux port of KeePass 1.0; it interacts with the same database format, and thus likely has the same design flaws as KeePass. However, KeePass 2.0 uses a different database format, and that format is the subject of this post.  A quick read of KeePass 1.0 indicates it has the same problems - the database is only encrypted, no authentication or integrity."
crypto,3a7e5g,g30rg3_x,1 point,Wed Jun 17 23:38:19 2015 UTC,Is there a better recommended option for Linux?
crypto,3a7e5g,sdrapkin,1 point,Wed Jun 17 23:47:16 2015 UTC,"KWell, there was this study of password manager vaults, and the only one that was acceptable was PasswordSafe DB version 3 (the one originally developed by Bruce Schneier).   The sad thing is that the official  Linux version is quite unusable (crashes regularly) and the options are not too great. There is a python version for gnome (pasaffe) that is dumbed down beyond usability (for example, there is no GUI way to open any other file than the default one in ~/.local/pasaffe/ ). That's a shame. The app is quite pretty.  Password-gorilla is good, but seems incompatible with the official Linux version.   The CLI version can't open the newest (the safe) database.  I might take some time and port the original to Qt. It probably won't be too hard, unless they use a shitload of windows-specific stuff."
crypto,3a7e5g,g30rg3_x,1 point,Thu Jun 18 07:54:23 2015 UTC,"If you want to use the passwordsafe format, and don't mind the UI that you need to use to manage the passwords passwords, I have a set of programs I wrote to extract passwords out of the database to make it easy to use. Since I don't create new ones nearly as often as I need to just extract the passwords it works fine for me.  I actually use the libraries that the gui version builds to work with the database format, it should work with any database created with the original. It doesn't support Yubikey, because I don't have one to test with, however."
crypto,3a7e5g,g30rg3_x,1 point,Fri Jun 19 02:30:43 2015 UTC,Wouldn't it be better if we kickstarted/fund with the help of the Open Crypto Audit Project a complete audit of KeePass? than making another fork? m sure most will benefit from securing/improving a well-know software than making their own KeePass'es.
crypto,3a7e5g,sdrapkin,1 point,Fri Jun 19 00:09:08 2015 UTC,"I'm not saying we should fork KeePass. I want to engage some discussion about what KeePass should do to improve its software and database formats. Yes, KeePass should get a more formal audit. However one audit has already found actionable flaws; cool, lets take some action on them."
crypto,3a7e5g,g30rg3_x,2,Fri Jun 19 14:29:14 2015 UTC,Yeah you're right but AFAIK the guy behind keepass already fixed those bugs (or acknowledged at least): http://sourceforge.net/p/keepass/discussion/329220/thread/2eac8c83/#ae22
crypto,3a7e5g,sdrapkin,1 point,Fri Jun 19 14:33:26 2015 UTC,Did he also acknowledge this?
crypto,3a7e5g,jeorgen,1 point,Fri Jun 19 14:51:45 2015 UTC,No that I recall but m sure you or someone else can post that link to sf and wait the response from the team.
crypto,3a7e5g,g30rg3_x,1 point,Fri Jun 19 16:18:07 2015 UTC,"Hi, again... Dominik answered/acknowledged your issues and fixed some of the bugs...  http://sourceforge.net/p/keepass/discussion/329220/thread/2eac8c83/#7763  Quoting:   The goal of process memory protection is to make it harder for an attacker to find any useful data in the swap file (the goal is not to defend against active memory scanners; if you have malware on your PC, everything's lost anyway). At some point of time sensitive data is stored in process memory as plaintext (for instance the AES encryption class of the .NET Framework holds the key as a byte array), and if we're unlucky exactly then a swap occurs. In .NET there's one additional problem with memory clearing: the garbage collector can move around memory, so even when clearing sensitive buffers this might just clear a copy of it and there may be another location that cannot be cleared.  My primary focus for process memory protection was to prevent user passwords being directly visible in >memory, because these would be easy to find. KeePass additionally erases many cryptographic buffers, but not each and every intermediate one (although in general of course the more the better). Finding a single buffer in the swap file won't help an attacker much, as a multitude of other data (seeds, initialization vectors, hashes, other keys, ..., all being random data at unknown memory locations and most of them cleared) would be required for the data being useful (in contrast to directly usable user passwords).  For the two locations mentioned explicitly in the posting, I've now added memory clearing. That raises the bar by a few micrometers :-)  Best regards, Dominik"
crypto,3a2p6p,xiongchiamiov,11,Tue Jun 16 19:31:36 2015 UTC,"While yes, now authenticated encryption is the standard, the keepass databases are locally stored and contain pretty much only credentials or PII. The risk associated with tampering is extremely low. Its original use of AES-CBC makes sense.  Like many crypto projects, keepass is probably due for a proper audit."
crypto,3a2p6p,aydiosmio,14,Wed Jun 17 06:00:38 2015 UTC,"the keepass databases are locally stored   That's a bit disingenuous - how often do you hear the phrase ""I keep mine on Dropbox""?"
crypto,3a2p6p,Freeky,6,Wed Jun 17 08:57:25 2015 UTC,Hmm dropbox you say I may need to revisit my strategy about storing Keepass on dropbox. Are there any alternatives? what do you recommend?
crypto,3a2p6p,TwilightDelight,1 point,Wed Jun 17 10:01:21 2015 UTC,"Tahoe-LAFS is designed to consider the host untrusted. It shouldn't matter if NSA is hosting it, they could only see ciphertexts moving.  It applies ACLs for both read and write operations separately through cryptography. Ciphertext tampering would cause the client to reject it due to failing verification."
crypto,3a2p6p,Natanael_L,2,Wed Jun 17 12:56:23 2015 UTC,And Least Authority will do you unlimited personal storage using it for $25/month.
crypto,3a2p6p,Freeky,1 point,Wed Jun 17 14:28:06 2015 UTC,SpiderOak are the most commonly mentioned zero-knowledge Dropbox alternative.  So long as you only use their desktop app or new mobile client all they ever see is ciphertext.
crypto,3a2p6p,Freeky,3,Wed Jun 17 16:16:27 2015 UTC,"They promised for years that they'll release their source code and haven't done it, this makes me suspicious."
crypto,3a2p6p,escalat0r,1 point,Wed Jun 17 21:08:06 2015 UTC,"Self-hosted storage/file sync is probably the safest method. Prism-Break has a good list.  I personally recommend ownCloud. I'm running it on an old single-core 3.?Ghz processor with only 2GB of RAM. The Web interface is a little slow, but everything works perfectly. There are also some really good plugins available."
crypto,3a2p6p,LibertatisSurgit,1 point,Wed Jun 17 17:07:42 2015 UTC,"I can throw disk42's hat in the ring, it's basically just seafile and it's hosted in Germany, fully open-source.  Still in beta though and no mobile apps (yet)."
crypto,3a2p6p,escalat0r,3,Wed Jun 17 21:06:59 2015 UTC,"That's a bit disingenuous though. KeePass runs entirely locally, and if you're DropBox, you already have an executable running on the users machine (maybe even with admin). Ignoring the executable being able to do things, the threat vector is essentially equivalent to being able to tamper with their database without being online as if their database was stored on a flash drive and you got access to it. Don't get me wrong, why use crypto with vulnerabilities when it's easy to do without them, even if the vulnerabilities are near impossible to exploit."
crypto,3a2p6p,FryGuy1013,1 point,Thu Jun 18 02:55:43 2015 UTC,"KeePass runs entirely locally,   But that's the point - if you have it syncing to a cloud storage service, it's not.  Storage is remote, both on a cloud service and all the things you have attached to it.  An attacker is one single authentication token away from being able to access and modify its database in perpetuity.  At least, hopefully one authentication token.   the threat vector is essentially equivalent to being able to tamper with their database   A threat vector.  Let's not get too bogged down with the whole tampering thing, the point ultimately is that KeePass looks a bit shabby and generally questionable, and saying ""well, it might be, but it's only storing stuff locally, so..."" doesn't really work."
crypto,3a2p6p,Freeky,2,Thu Jun 18 10:46:25 2015 UTC,"This is true, but it still does not increase the risk profile much. So we put some trust into Dropbox. This is far different than say if this encryption were transport related, where a potential attacker could be anywhere on the channel and make changes.  I'd have to see an attack that introduces harmful changes to the plaintext to see anything but a low risk issue here."
crypto,3a2p6p,aydiosmio,9,Wed Jun 17 17:31:35 2015 UTC,"While I understand the criticism for the lack of tamper detection, I don't understand why the author is picking on the existence of an ArraysEqual() method as evidence of code smell.  That is the proper way to determine if the contents of two different byte arrays are equal. You can't do if ( array1 == array2) or try Array.Equals because those will be reference comparisons and will return false if the arrays are difference references but have the same values. There is no built-in way to perform array comparisons in .Net, excluding LINQ. LINQ is typically avoided for these sorts of applications because it causes memory allocations just to perform comparisons.  Edit:  I think I might understand why the author is picking on the existence of this function - it is a classical timing attack vulnerability because it shortcuts if some early value in the array isn't equal.  However, the author makes a bad case that this code is bad:   For one, the author presents no analysis indicating that this function is being used in a security critical context (perhaps it is used for other functionality).  For two, the major point of this article is that KeePass lacks HMAC and AEAD. Without any HMAC to speak of, what timing attack would be there to exploit? For three, even if there is a timing attack to be had, isn't that the least of your concerns? To exploit a timing attack on KeePass, you'd have to have access to the machine its running on, and at that point all bets are off and there are many, many easier ways to get data out of keepass than to some slow-to-exploit timing attack."
crypto,3a2p6p,antiduh,8,Wed Jun 17 15:06:24 2015 UTC,"From http://keepass.info/help/kb/sec_issues.html   Problem. It has been reported that the method MemUtil.ArraysEqual is susceptible to a timing side-channel attack.  Status. The time required by MemUtil.ArraysEqual indeed depends on the data, but it's irrelevant. In a timing side-channel attack, an attacker analyzes the time that a cryptographic system requires to perform some operation and tries to deduce secret information from it. For KeePass, this is not applicable. KeePass is a desktop application and does not feature any server capabilities (especially, no automatic database opening can be triggered externally). If there is malware on the PC that KeePass is running on, there are far more easy and efficient attacks for the malware to steal passwords from KeePass than a timing side-channel attack"
crypto,3a2p6p,Freeky,7,Wed Jun 17 18:52:19 2015 UTC,"Everyone keeps missing the forest for the trees. The lack of constant-time array comparison and improper Singleton implementation were given as quick examples of immature implementation and poor competency building robust security software. They were not examples of a security failure. An example of a security design failure is a lack of a proper MAC enforcing integrity.  Problem. As tptacek might put it, ""doing what KeePass does in 2015 in bordeline negligent."" Problem. KeePass implementation was done by people with questionable .NET as well as crypto skills. They are not trustworthy. This is not a problem, as long as there are trustworthy folks able to vouch for the codebase.  Status. Worth bringing to light."
crypto,3a2p6p,sdrapkin,1 point,Wed Jun 17 19:42:07 2015 UTC,so what are the recommended alternatives to KeePass? What is everyone else using?
crypto,3a2p6p,TwilightDelight,1 point,Wed Jun 24 08:52:57 2015 UTC,Does this mean we should ditch keepass? What are better alternatives?
crypto,3a1ttz,FiloSottile,5,Tue Jun 16 15:55:35 2015 UTC,Surprised they didn't provide an email sign-up option to be notified when this goes live. I'd definitely like to use them as soon as they're up and running.
crypto,3a1ttz,warpzero,1 point,Tue Jun 16 20:13:54 2015 UTC,identrust?
crypto,3a1ttz,elarabbas,1 point,Wed Jun 17 06:31:45 2015 UTC,"I thought this meant that the launch schedule would be encrypted, and found myself wondering how I would learn about upcoming milestones."
crypto,39y8yf,AngrySkillzz,11,Mon Jun 15 19:42:40 2015 UTC,I continue to be unconcerned.
crypto,39y8yf,Afro_Samurai,7,Mon Jun 15 22:11:26 2015 UTC,"I agree.    LastPass strengthens the authentication hash with a random salt and 100,000 rounds of server-side PBKDF2-SHA256    They used good key strengthening techniques; unless you are specifically targeted, and your password is in a wordlist, it's very unlikely your plain text password will ever be known (at least for a couple hundred years)."
crypto,39y8yf,DudeWheresMySecurity,18,Tue Jun 16 03:12:43 2015 UTC,"As of 2015-04-25 an 8x TitanX system does 16904 Mh/s or about 161 160990 guesses per second at default pbkdf/sha256 c=105,000.  So if you've got a reasonably guessable password (list size of 4-6 million) moderately strong password then you have a month day or two before someone who spent $10k (or less) on the problem will have your terrible password.  EDIT: hijacking to apologize for leaving off the factor of 6 decimal places. That's really bad. Also I'll add that of course bitcoin miners is another route: https://en.bitcoin.it/wiki/Mining_hardware_comparison  At 3100 Mhash/$. That $10k results in another 50-fold improvement.  Use scrypt folks!"
crypto,39y8yf,karlthepagan,8,Tue Jun 16 03:24:42 2015 UTC,"Quite the budget, thanks for the math!  What is an example of a password that might be on that list, but not a slightly smaller list?"
crypto,39y8yf,logicwon,3,Tue Jun 16 04:33:14 2015 UTC,"There are all kinds of password dictionaries out there, there's nothing to say what kinds of words have to be in any particular list. But if you're interested out of two dictionaries I have, one with 3.46M lines (35MB)  and the other with 213,000 lines (2.2MB), the top 15 entries starting with 'a' in each are:   a'-level  a'  a'a  a'aliyah  a'b  A'B  a'beckett  a'c  a'capella  a'clock  a'comin  a'd  a'daire  a'dam  a'dayami   versus the smaller list:   aa  aal  aalii  aam  aani  aardvark  aardwolf  aaronic  aaronical  aaronite  aaronitic  aaru  ab  ababdeh  ababua"
crypto,39y8yf,CrazedToCraze,2,Tue Jun 16 08:25:07 2015 UTC,"I noticed your list includes 9 character passwords. Assuming that is the max for your list would it be safe to say a 12-16 character non-dictionary term would be relatively safe against a brute force right now? Not from the government, someone who could pay $10,000 to rent the hardware given the example above.  Also, in regards to brute forcing, can the combinations of full terms be taken into account as single values for a password? To clarify, is a 3 word long password in some ways just as breakable as a high character random password given the term combinations?     NationFootballLeague vs. 1CyUni6oaU$6 One has 3 random values but one common combination and the other has 12 random values with 10~25 combinations.   I remember the 'horse' example from the xkcd, but I also remember someone sort of disproving that logic as well."
crypto,39y8yf,latherus,1 point,Tue Jun 16 12:35:28 2015 UTC,would it be safe to say a 12-16 character non-dictionary term would be relatively safe against a brute force right now?   It depends how many years the NSA has spent producing rainbow tables to attack pbkdf2 hashes.  If they can put 1M times the resources into this problem then you can't trust a lowercase password shorter than 14 characters. Starting with caps and ending with 1-2 digits is equal to lowercase.
crypto,39y8yf,karlthepagan,1 point,Wed Jun 17 11:02:53 2015 UTC,"First, if you ever used a password whose plaintext made it into a distributed list of that size ;)  Second, I'm mostly guessing, but maybe if you have a terrible dictionary word password with a ""leetspeak"" replacement or two:   m0nk3y p4ssw0rd m45ter   Or otherwise use a very bad top 100 password with minimal strengthening.  IIRC there were a few ""common password"" lists going around around 1-3M in size, but I couldn't quickly find them."
crypto,39y8yf,karlthepagan,2,Tue Jun 16 12:03:49 2015 UTC,"Having been so nonchalant, I should probably take this as a good time to turn on multi-factor auth. Maybe increase my key iterations."
crypto,39y8yf,Afro_Samurai,2,Tue Jun 16 03:19:04 2015 UTC,I've found that setting my client-side iterations to 100k shows no performance problems.
crypto,39y8yf,tvtb,1 point,Tue Jun 16 03:27:39 2015 UTC,"While you're doing that, there's also an ""advanced"" setting that restricts logins by country of origin. Of course, that won't stop a determined attacker, but it's a good first-pass filter, and there's no downside unless you travel overseas to many different countries frequently."
crypto,39y8yf,xiongchiamiov,1 point,Tue Jun 16 15:44:14 2015 UTC,"Right, but possibly disingenuous -  nobody ever attacks the crypto. There are plenty of other ways users can be attacked, the hackers may try to distribute bad copies of the browser extension, or even non-crypto design flaws in LastPass itself."
crypto,39y8yf,i_regret_most_of_it,15,Thu Jun 18 13:08:52 2015 UTC,Maybe you just should use an open source offline solution like Keepass or Bruce Schneier's Password Safe.
crypto,39y8yf,escalat0r,21,Mon Jun 15 21:57:20 2015 UTC,Bruce Schneier's Password Safe   He really needs to get that off sourceforge.
crypto,39y8yf,drunkcatsdgaf,12,Mon Jun 15 22:45:08 2015 UTC,"Don't worry, it isn't high profile so they won't repackage it /semi-sarcastic"
crypto,39y8yf,Natanael_L,1 point,Mon Jun 15 23:43:55 2015 UTC,Looks like the discussion has already started
crypto,39y8yf,drunkcatsdgaf,7,Wed Jun 17 14:28:16 2015 UTC,"Most people have several computers. For 90% of the internet population, offline storage isn't a serious option."
crypto,39y8yf,VorpalAuroch,11,Mon Jun 15 23:01:41 2015 UTC,"I have more than several. I still use Keepass. Just sync the database somewhere convenient. Google Drive, Dropbox, whatever - it's encrypted so it doesn't really matter where you put it."
crypto,39y8yf,gsuberland,12,Mon Jun 15 23:22:08 2015 UTC,How is that any more secure than lastpass?
crypto,39y8yf,CrazedToCraze,7,Tue Jun 16 02:38:43 2015 UTC,"The encryption don't rely on some Javascript you pull from the page at every connection, without control."
crypto,39y8yf,BenHurMarcel,3,Tue Jun 16 07:12:11 2015 UTC,And you can raise the KDF difficulty
crypto,39y8yf,Natanael_L,4,Tue Jun 16 08:39:34 2015 UTC,You could argue that it is isn't hosted on a password aggregator.  edit: hosting on Tarsnap takes a lot of that argument out.
crypto,39y8yf,logicwon,2,Tue Jun 16 04:21:17 2015 UTC,"Open source. They need to know both your lastpass password AND the encryption password. You can raise the iterations to stupidly high amounts (50 million or more), I have mine set to 6 million rounds of AES, which is enough for a 1 second delay on my machine. I can then multiply that by 10 to give a ~10 second delay on unlocking. I would feel reasonably safe putting my file up on a pastebin and linking here. (Not that I'm going to do that)"
crypto,39y8yf,5225225,1 point,Tue Jun 16 13:10:09 2015 UTC,Has anyone done security audit on LastPass or is the source code even publicly available?
crypto,39y8yf,anonyymi,1 point,Tue Jun 16 05:45:24 2015 UTC,"The code is 100% open, but it was never audited."
crypto,39y8yf,solarspeed,2,Mon Jun 22 03:07:10 2015 UTC,"This is exactly how I handle it too, plus I don't need a network connection (for storing things like RSA keys that I might want offline)"
crypto,39y8yf,quantumcanuk,9,Tue Jun 16 13:13:00 2015 UTC,You can synchornise it either manually or via a cloud servive of your choice. The 90% figure your referencing origined from your ass I take it?
crypto,39y8yf,escalat0r,9,Tue Jun 16 15:38:44 2015 UTC,"It's LastPass basically just a cloud service of your choice? Given the security model they've adopted, the vulnerable stage isn't syncing the data."
crypto,39y8yf,iamnoah,4,Mon Jun 15 23:04:07 2015 UTC,Lastpass is also Closed-source so you don't know what is really happening inside the program.
crypto,39y8yf,escalat0r,0,Tue Jun 16 00:05:59 2015 UTC,No.
crypto,39y8yf,anonyymi,1 point,Tue Jun 16 11:03:22 2015 UTC,"To be able to get passwords fast when you're on your phone or another computer (work, uni) is a great convenience with LastPass. Even if you would sync your db with KeePass or similar you would still need to download the program prior to accessing your vault, not to mention that the offline ones are rarely available for ""all"" OS'es. Convenience is critical for many users."
crypto,39y8yf,betamos,1 point,Tue Jun 16 05:37:29 2015 UTC,Well and better security is criticla for others.
crypto,39y8yf,escalat0r,1 point,Tue Jun 16 09:47:52 2015 UTC,Do the alternatives support one-time passwords and 2FA?
crypto,39y8yf,xiongchiamiov,1 point,Tue Jun 16 11:00:52 2015 UTC,"Why ask me instead of Google?   It seems so, yes.  http://keepass.info/help/kb/yubikey.html"
crypto,39y8yf,escalat0r,1 point,Tue Jun 16 15:47:57 2015 UTC,"So no to one-time passwords (for logging in somewhere without divulging your password) then.  That seems like an important security tradeoff.  Good to know they support 2FA, though."
crypto,39y8yf,xiongchiamiov,15,Tue Jun 16 16:06:41 2015 UTC,:)
crypto,39y8yf,ChristianBundy,12,Tue Jun 16 18:05:01 2015 UTC,"@christianbundy   2015-06-15 20:23 UTC  If your adversary can brute-force 100,000 rounds of salted PBKDF2-SHA256 to decrypt AES256 you've got bigger problems than LastPass.     This message was created by a bot  [Contact creator][Source code]"
crypto,39y8yf,TweetsInCommentsBot,12,Mon Jun 15 20:25:29 2015 UTC,That problem is really really bad passwords.
crypto,39y8yf,Natanael_L,-7,Mon Jun 15 20:25:37 2015 UTC,"We repeatedly preach to people not to use Single Points of Failure in systems, and then people turn right around and build a Single Point of Failure around their passwords, which gives an attacker the ability to do a single attack and get all of the keys to every castle without needing to attack every other service...  Hope this proves to be a collosal wakeup call.  (edit: yes, they only got hashes and salts; they will soon be burning botnet hours to crack those. Hope you chose an incredibly brilliant LassPass password, otherwise prepare to have your entire life Owned.)"
crypto,39y8yf,hackingdreams,10,Mon Jun 15 21:27:44 2015 UTC,The concept of a password is a single point of failure.  Each one of us is a single point of failure for your passwords.  There's always a single point of failure with passwords...
crypto,39y8yf,mrcaptncrunch,7,Mon Jun 15 23:28:15 2015 UTC,Or change your password now... They didn't get the vault data.
crypto,39y8yf,iamnoah,2,Tue Jun 16 10:12:21 2015 UTC,"why do you think they don't have the vault data? if there is a breach, it's not easy to find out what exactly was taken."
crypto,39y8yf,apetersson,4,Tue Jun 16 00:04:24 2015 UTC,Please stop the fear-mongering. Unless you have calculations to back up such claims you're FUDding. Example of helpful post
crypto,39y8yf,kire7,1 point,Tue Jun 16 08:02:45 2015 UTC,There is no good solution. My parents are screwed.
crypto,39y8yf,ITMANAGER_KILLME_PLS,1 point,Tue Jun 16 10:00:41 2015 UTC,"Well, that's why we turn on 2FA for LastPass and every other service."
crypto,39z2yw,Need-Security,2,Mon Jun 15 23:19:01 2015 UTC,"I only know it is compatible with other OTR clients, so it seems complete."
crypto,39z2yw,dareksam,2,Tue Jun 16 05:48:35 2015 UTC,"While the OTR chat protocol is secure from attackers monitoring the communication, the client itself is not. If the attacker can get access to your computer, she can easily recover the saved passwords to the various chat services supported by the client (ICQ, Jabber, Google Talk, MSN, Yahoo!...)"
crypto,39z2yw,bontchev,2,Tue Jun 16 09:51:56 2015 UTC,"The issue with end point exploitation is not only access to the account, but access to private keys, logs if any, and messages as they're being typed."
crypto,39z2yw,maqp,1 point,Tue Jun 16 18:45:53 2015 UTC,Jitsi had good momentum out of the gate but lately seems like development has idled to nothing. I've stopped recommending it to others.
crypto,39yipa,zxLFx2,3,Mon Jun 15 20:50:00 2015 UTC,"The fingerprint scanner is the weak point, it is trivial to fool. Besides that: there's dedicated hardware that analyses the print and releases a key to an isolated part of the CPU, which is what then performs decryption and authentication. It is unlikely to be hacked by software while the device is locked (although afterwards, when unlocked, you can just extract everything unencrypted)."
crypto,39yipa,Natanael_L,1 point,Mon Jun 15 21:26:47 2015 UTC,"It's more of a convenience feature, it's not required to use.  Ideally it would be set up as one factor of two (the other being a passcode) ... and within a certain timeout (let's say 5 minutes), you can keep locking/unlocking using just TouchID ... accepting an additional albeit small amount of risk as long as the device is in your possession."
crypto,39yipa,semi-matter,2,Tue Jun 16 01:02:46 2015 UTC,"The finger scan does not generate the key, it is compared to stored information to determine if it is within a range to be deemed correct, then a strong randomly generated key is released for decryption.  (standardly at least, I doubt Apple is doing something different)  This is a good source of information on biometrics in general:  https://www.nsa.gov/ia/_files/factsheets/i73-009r-007.pdf"
crypto,39yipa,xJoe3x,1 point,Tue Jun 16 16:11:27 2015 UTC,"Are you sure the ""stored information"" isn't encrypted with the PBKDF2'd phone passcode? Most implementations, including Apple's, don't let you use biometrics after a reboot until you put in the passcode."
crypto,39yipa,xJoe3x,1 point,Tue Jun 16 16:38:08 2015 UTC,"They certainly could encrypt the template (stored information) or it could just be an access control, however that level of detail is likely to be proprietary."
crypto,39yipa,tmbinc,2,Tue Jun 16 17:03:24 2015 UTC,"Extracting useful information out of a finger print, in the way that the information can be used to seed a KDF, without having to store such information (i.e. you could still use half of the fingerprint for matching, and then use the other half to derive a seed to unlock your disk encryption key) is the holy grail for fingerprint matching - and we're far away from it.   First, I doubt the 1-in-50k number by one or two orders of magnitude. But I haven't seen any hard numbers. It's a strict tradeoff between false-positives and -negatives, and it's usually biased very much to avoid false-negatives, because it cripples user experience if the phone doesn't unlock when it should.  That's why there is the strict ""5 attempts"" limit after which you need your pin; this is why you need your pin after bootup, or after not unlocking 24h+ (edi: oops, 48h really. that's.. a lot). That's also (one reason) why fingerprint matching is done on the dedicated processor, because essentially all you can derive from the fingerprint is a ""yes/no"" binary decision, unlike a PIN or passphrase, that can be stretched to provide a sufficient seed for disk encryption."
crypto,39yipa,angdev,1 point,Wed Jun 17 09:36:58 2015 UTC,"Thank you for this. That's what I was wondering: how it would push a fingerprint through a KDF to get a key. Sounds like they don't, and just use a black-box chip."
crypto,39yipa,flarkis,0,Wed Jun 17 14:16:03 2015 UTC,Mythbusters fooled a bunch of fingerprint scanners with very good results. Even really expensive ones were fooled by a $0.10 cent black&white photocopy of a fingerprint lol.
crypto,39yipa,AnthonyMaybe,1 point,Mon Jun 15 21:30:09 2015 UTC,"This is true, although I'm not interested in attaching the sensor in an ""analog"" fashion, either by having everyone in town try their finger, or make a fake finger from a fingerprint. I'm interested in the math of doing it, thanks."
crypto,39yipa,tvtb,0,Mon Jun 15 21:45:23 2015 UTC,"Can I petition to have Fingerprints are Usernames, not Passwords added to the sidebar? We see one of these questions pop up once every few weeks. The initial security of your fingerprint is inconsequential. The minute your fingerprint is compromised you have zero security on any present or future devices that rely on fingerprints. I recently got back from a trip through a few countries and my fingerprints were required to enter some of them."
crypto,39v6fy,vvvvvvvvvvvvvvvvvvv1,6,Mon Jun 15 01:47:49 2015 UTC,"Given what I can see from the specification the main problem would be that it doesn't use any MAC to authenticate the document. The only thing it mentions is to encrypt the document using blowfish with CFB mode. The key is derived using PBKDF2, which won't stand up to brute force attacks that well if you pick a bad password.   Honestly if you're using GPG to encrypt the document afterwards, I don't see why you'd even bother with the encryption on the document itself.   7z seems to compress GPG files pretty well.   Are you using the ascii armored output instead of the normal binary format? Encrypted files shouldn't compress very well at all, due to the fact that they should look like random data. That's likely why the ODF standard specifies that they should be compressed before the encryption is applied."
crypto,39v6fy,eeget9Eo,2,Mon Jun 15 09:27:43 2015 UTC,"The key is derived using PBKDF2, which won't stand up to brute force attacks that well if you pick a bad password.    Not necessarily, it depends on the number of rounds. Probably it's the default 1000 rounds, in which case you're right, that's not very tough. But the PBKDF2 function is a good one if you used say 65 million rounds."
crypto,39v6fy,Sostratus,2,Mon Jun 15 19:50:57 2015 UTC,"I don't know what the GPG flags are set to. I still haven't gotten around to figuring out GPG for email, because I don't know anyone who uses it to practice with. It's hard when you've only got yourself and Google. Normally when you try to ask about this sort of stuff, people get so angry, and it makes me very nervous to even ask. Like this thread is mostly downvotes, and if it's cause they think I didn't Google, then they can go on Stack Overflow and many other forums and see how little there is about ODF (1.2 specifically). I'm left just trying to figure out what makes sense, so I appreciate your time and information."
crypto,39v6fy,vvvvvvvvvvvvvvvvvvv3,1 point,Mon Jun 15 22:13:59 2015 UTC,Try OpenKeychain on Android for an easy implementation
crypto,39v6fy,Natanael_L,2,Tue Jun 16 00:11:14 2015 UTC,"I don't trust my phone. Over time I've noticed a lot of strange things with it, you probably understand. If I can ever afford one of the good ones, I'll actually put some effort into setting it up with tips from that one ""hardening android"" post from the Tor blog.  I just don't get how to handle the keys and the fingerprint. I think the public key is so the person who wants to send you a message uses that, and then the only way to decrypt that block of text is to use your private key? Still, there are different versions and I've seen different keys and fingerprints. It's confusing, and like I was saying, it can be hard to ask about this kind of stuff, and all my friends shame me, thinking it's insanity, ""nothing to hide"", and all that.  Thank you for the suggestion though. It looks like a really easy way to use GPG on phones, and the devs were kind enough to make a nice tutorial.  I think I just want to copy and paste text for now. I use Tutanota right now, but I don't know exactly how their GPG integration will be like, and honestly I'd rather just copy and paste, just cause I don't think I'd feel right pasting a private key into whatever they come up with lol.  Do you know of a tutorial that's legit for just copy and pasting with GPG? I know that probably sounds weird, but as I said, I've seen people with different keys and fingerprints, and some people even had multiple keys, not for like different emails, but to like give people options? Like it made me feel like I would need to do the same so I don't inconvenience people, but maybe that person didn't know what they were doing?"
crypto,39v6fy,vvvvvvvvvvvvvvvvvvv4,1 point,Tue Jun 16 12:18:46 2015 UTC,"OpenKeychain allows for copy-and-paste to encrypt and decrypt even if you aren't using it with K9 mail for the integration.  The important part is that you confirm that the fingerprint the GPG app is showing you really belong to the person you're sending to / receiving from. Every keypair has a unique fingerprint, and each person should have one (or more) keypair.  By the way, Facebook now officially lets you publish your public GPG key on your profile."
crypto,39v6fy,Natanael_L,1 point,Tue Jun 16 15:56:00 2015 UTC,"Okay, I guess it is ASCII armored (is this a problem?), and I find it extremely amusing that I can send files as a block of text through instant messages now LOL. I also found out I can replace ""gpg.exe"" and ""iconv.dll"" that came with CryptSync with the newer ones from https://gnupg.org/, and it works just fine. Which is great, cause I was worried that they had some important reason why they were using a build from 2009...  Anyway, it generates these .gpg files that are just text files you can open in Notepad easily. If you decrypt the text from here https://defuse.ca/b/GkabqLMJ, you should get the same mp3 from here (EA Games ftp server).  Paste the text into a .txt file, save it, then change the extension to .gpg before decrypting. The password is 123  This is really cool. I think I'll just use GPG to encrypt the important documents, and 7z for the other stuff. 7z does reduce the GPG file's size, but 7z alone is probably good enough to deter someone from getting access to my dank memes folder.  Thank you all who helped!"
crypto,39v6fy,vvvvvvvvvvvvvvvvvvv4,1 point,Tue Jun 16 11:50:55 2015 UTC,"ASCII armor is why it can be compressed. Each byte of encrypted data is represented by MORE than one ASCII character = more than one byte. 7z spots the patterns in question. Turning ASCII armor off means it will be formatted as binary again, not text, and thus don't need compression - but then it can't be posted as text."
crypto,39v6fy,Natanael_L,3,Tue Jun 16 22:36:41 2015 UTC,If you are already using GPG then why do you care about ODF's internal encryption?
crypto,39v6fy,tom-md,1 point,Mon Jun 15 05:11:23 2015 UTC,"Because I'm paranoid. I'm thinking if someone took my computer or if they remotely went through it, and found the unencrypted documents.  So, use ODF's encryption, then CryptSync to auto-GPG it for me with another password, then CryptSync to auto-7z the GPG file...because that's another password and 7z seems to compress GPG files pretty well.  I just don't know if ODF is actually secure, because SHA-1 and ZIP and all that..."
crypto,39v6fy,vvvvvvvvvvvvvvvvvvv2,3,Mon Jun 15 06:01:52 2015 UTC,"Your security budget is better spent elsewhere.  LUKS, key fobs, memorizing a better password instead of two, basically anything besides encrypting the same data twice."
crypto,39v6fy,tom-md,1 point,Mon Jun 15 15:31:09 2015 UTC,"I haven't heard good things about LUKS. People seem to have varied opinions on how good it is.  I use this to help make the pass keys. I know some people say to use pass phrases, but I just can't find enough information to convince me that it's better than trying to generate a random key with no or minimal noticeable words or patterns (patterns as in like emoticons or something).  So you think just using the GPG option with CryptSync 1.2.1 and a good pass key would be fine for the documents?  Some people seem really convincing that 7z is really good too, as long as you use the right flags and a good pass key. I'm not saying 7z is better than GPG, it's just I have lesser private stuff like my music library and GIF/WebM stuff that I still want to make it annoying for anyone who gets access to the archives."
crypto,39v6fy,vvvvvvvvvvvvvvvvvvv3,2,Mon Jun 15 22:37:09 2015 UTC,"You can just use WinRar or 7-Zip to encrypt your files, easy and free."
crypto,39v6fy,_ihatemyself,6,Mon Jun 15 04:23:17 2015 UTC,"Or better, he can keep using GPG."
crypto,39v6fy,tom-md,1 point,Mon Jun 15 05:11:36 2015 UTC,Is a password protected .7z file secure?
crypto,39v6fy,Ninja_Fox_,1 point,Tue Jun 16 10:46:12 2015 UTC,".7z I haven't looked into, but WinRAR uses AES-256, so it's pretty secure so long as a good password is used."
crypto,39s1xy,DarkLinkXXXX,10,Sun Jun 14 05:05:56 2015 UTC,"In all honesty I would ask someone if they realize the network has been compromised. I would show screenshots with the fact that my connection to Google is being intercepted by some attacker. Basically played dumb and force them to admit it.  Then I would ask them:    Could you stop doing that please?    I realize it doesn't actually answer your question. Because you want to know what to do about it in order to maintain your privacy.   But that is what I would do, and asking might be enough to get a discussion."
crypto,39s1xy,JoseJimeniz,8,Sun Jun 14 11:31:36 2015 UTC,"Their network (internet connection, infrastructure), their computers (configured to trust their CA), their rules.  Its really no different to what e.g. cloudfare does except they are using their own CA which is trusted by the machines accessing the internet. They may have many reasons to do this - caching, monitoring of network usage, data loss prevention.  Basically, it's tough. If you don't like it, don't use it."
crypto,39s1xy,chrismsnz,7,Sun Jun 14 22:49:55 2015 UTC,You don't use networks or computers that intercept traffic. Simple as that.
crypto,39s1xy,networkguru,-1,Sun Jun 14 05:39:17 2015 UTC,-----BEGIN PGP SIGNED MESSAGE----- Hash: SHA256  Many of the students here don't even have cell phones though. I'm more interested for altruistic reasons rather than personal ones. -----BEGIN PGP SIGNATURE----- Version: GnuPG v2  iQIcBAEBCAAGBQJVfG31AAoJEP7XbztLgAUtJWcP/jqe785WlNryD/YPyA5c7BJd G+0gKKSOXjDoWLo7M25mKBtHB3GKDEApCj7lzCgwhyIw7fHVLCfZh06br1QvfwIb t+UvoF50IcubGtOWaUvrHxEytk5GXZLXp4UMfojqzHdjvBqbu0HRsiJJHmM5DqHh yU/Qrv8S3sn1JU1cIvZ4HDmxdzH3esuqC0j9l/hsZFwfDSltfEKSaut/qWDIImH2 Uo+ddZs3RLOtZb4dy0zfM0MqeyUKAWCfoO9/aDxOdAV576uMxUk27VelFMJS+mxE IS+/uZcrp24lYYbLUC66zkR/lXoD+i4Z5UHQNxIyWbTKBFBeT1ecpJlT20v7WVOj U5VsFOL0ImQ8vLJ60mL1P+KBPJd4SvKoBOUy0XW8oANkKBdFe/nX3ceQliGUzj3r PmaSXxmLMDK1pgCFPWuM0LKJ440CdhXTT/jvWmYwMi+mSWTbFyKNNvj8aE0CKfuZ 1GDrAaZ8so0oB8gnrIJC1EJcFFJOqddSusWwncWT0ts64Cb8LNbK8A5CcExJ4syi Vo8ansUcJKvomyA9KPFfDofBOFS1iUdKInEWnVOpFKzQ7+po6wNSrR3XGYLieEhM PU7ldporK6RM5kcfksxGPPSD6Vp4c29rqGaCqi10AkR/kyl5AhjFShB+JMfYQbWr NAQTv+VrvSgdB2UTZa9f =Pn3H -----END PGP SIGNATURE-----
crypto,39s1xy,ITMANAGER_KILLME_PLS,3,Sun Jun 14 05:42:49 2015 UTC,You can't monitor a network for data exfiltration and allow your users to have end-to-end encryption with untrusted parties at the same time. I'd love to see a practical solution for this.
crypto,39s1xy,ITMANAGER_KILLME_PLS,2,Sun Jun 14 21:59:40 2015 UTC,We aren't trusted with any secrets though. This is just a simple trade school.
crypto,39rpm1,SeaSpring,13,Sun Jun 14 02:42:02 2015 UTC,Why not use one of the existing secure chat protocols?
crypto,39rpm1,cypher5001,1 point,Sun Jun 14 03:02:51 2015 UTC,Any recommendations?
crypto,39rpm1,warpzero,16,Sun Jun 14 03:21:32 2015 UTC,textsecure  Please use TextSecure (and contribute if appropriate). Do not reinvent the wheel here. Even WhatsApp used this instead of building their own.
crypto,39rpm1,5225225,11,Sun Jun 14 04:01:22 2015 UTC,"Well, while people trying to roll their own crypto is unsafe, it is good for learning how crypto and network programming works."
crypto,39rpm1,warpzero,3,Sun Jun 14 09:29:38 2015 UTC,"I have no problems with learning through rolling your own, but this guy is clearly trying to make something that will be used by others (and presumably pitched as ""secure"")"
crypto,39rpm1,5225225,4,Sun Jun 14 14:18:58 2015 UTC,"Well, even if he is trying to roll his own and say it's secure, he's asking us here to see if it would be.  It all really depends on his goal. If it's to learn about crypto, yeah, make your own and maybe put it on github and let other people try to break it.  If he wants secure communications, yeah, use something that already exists unless none of them are good for your purposes. His idea of constantly transmitting is actually a fairly good one, it allows people to hide both how much and when they're sending data, assuming you leave this on 24/7, assuming there aren't flaws in the way it's built (likely to be at first) but the idea seems to work."
crypto,39rpm1,ThePooSlidesRightOut,3,Sun Jun 14 14:40:14 2015 UTC,OTR
crypto,39rpm1,Chodrick,-2,Mon Jun 15 01:11:07 2015 UTC,I thought textsecure was being discontinued in favour of chatsecure?
crypto,39rpm1,warpzero,4,Sun Jun 14 12:47:10 2015 UTC,"No, definitely not. If anything, it's the other way around."
crypto,39rpm1,bascule,2,Sun Jun 14 14:23:15 2015 UTC,You're probably thinking of Signal...
crypto,39rpm1,bascule,2,Sun Jun 14 18:53:53 2015 UTC,Reddit removes comments that use link shorteners.
crypto,39rpm1,ivosaurus,2,Sun Jun 14 19:00:17 2015 UTC,"Reddit also mangles links that end in a paren. I just tried ""fixing"" it and now the link 404s. Got any suggestions for that?"
crypto,39rpm1,thebeefytaco,4,Sun Jun 14 19:47:40 2015 UTC,"Change all occurences of ) in a url, to \)"
crypto,39rpm1,5225225,2,Mon Jun 15 00:08:18 2015 UTC,Ah! Yeah. Use backslashes in front of characters like that.
crypto,39rpm1,dareksam,1 point,Sun Jun 14 22:34:04 2015 UTC,cyph is good
crypto,39rpm1,maqp,3,Tue Jun 16 15:04:36 2015 UTC,"What happens if the connection is slower than 5KB/s? Can the program currently handle that by slowing down the rate? Maybe you could do a speed test between the clients on startup and then limit the connection if the speed test says 5KB/s is too quick. Will it freak out if corrupt (or modified) packets are detected, or if it's getting packets at a rate higher than expected?"
crypto,39rpm1,TweetsInCommentsBot,2,Sun Jun 14 09:36:06 2015 UTC,"I like the idea of a constant stream of data! That avoids any analysis of the length or frequency of the data being sent (compared to random-interval messages), and least as long as it is implemented correctly.  Another thing, for deniability, would be to have contacts authorised (to avoid ddos) to do background ""faux chats"" to provide deniability that the conversation happened."
crypto,39rpm1,dareksam,2,Mon Jun 15 12:16:19 2015 UTC,I agree. I should note that OP's implementation only works until CNE becomes the standard form of surveillance. TFC also has a trickle connection to protect against meta-data analysis and it also keeps messages private regardless of CNE and software 0-days.
crypto,39rpm1,maqp,2,Mon Jun 15 23:49:53 2015 UTC,@e3i5   2015-06-12 10:58 UTC  Oh dear. Bulk CNE is the future says GCHQ. [Attached pic] [Imgur rehost]     This message was created by a bot  [Contact creator][Source code]
crypto,39qqy6,madsci,5,Sat Jun 13 21:00:53 2015 UTC,"First my assumptions, the list is actually an array in memory and that it is randomizably indexable.  Second the list of numbers items does not count against my overhead.  Three at runtime I know N.  What I would suggest is finding a group thats larger then your maximum size, which you said was ~30k and a generator for that group.  For this example those will be G=35963 and g=2.  I start with a random number 0...G exclusive and just multiply by 2 and mod G  each time.  This will give me each number between those to once and only once and is going to be in a fairly random order.  This is pretty much what diffie hellman is based on.  To go in reverse I just multiply by the modular multiplicative inverse in this case 17982.  4*17982%35963=2 hence it went reverse from 2*2.  Just add a loop so that while the number it's generating is > n you step a second time.  This will take two hardcoded 16 bit short ints for the muls, and one int for the seed state.  Hope this helps."
crypto,39qqy6,fuckingbagre,2,Sat Jun 13 23:50:56 2015 UTC,Why does it need to be random? How random does it need to be? Who or what are you trying to fool with the randomness? What will n be equal to?
crypto,39qqy6,angdev,2,Sat Jun 13 21:11:16 2015 UTC,"For now an upper bound for n would be about 10,000.  And it only needs to seem reasonably random to humans - no more so than an MP3 player's shuffle function.  I am curious if there's a truly secure version of this but it's not needed in this particular application.  The random seed in the current implementation is 32 bits, taken from thermal noise on an analog input channel and run through a von Neumann de-skew algorithm."
crypto,39qqy6,angdev,2,Sat Jun 13 21:27:39 2015 UTC,"A cheeseball method that will generate 10,000 random numbers, each only once, never repeating:  uint32_t x = 50021; // State & seed  loopi(10000) {     x += 16383;     uint16_t r = x % 10000;     printf(""%u\n"", r); }   Note: Do not use seeds that the expression SEED + 16383 overflows.  If 10,000 isn't hard-set, use the below code to find some good numbers to use for variable u:  uint32_t x = 50021; // State & seed uint8_t* a = malloc(10000); memset(a, 0, 10000); uint32_t u = 16383; int good = 0;  while (!good) {     good = 1;     memset(a, 0, 10000);     loopi(10000)     {         x += u;         uint16_t r = x % 10000;         if (a[r] != 0)         {             u++;             good = 0;             break;         }         a[r]++;     } }  printf(""Done: %u\n"", u);  return 0;"
crypto,39qqy6,angdev,1 point,Sat Jun 13 21:56:41 2015 UTC,"Unfortunately n isn't known at compile time, and the largest contiguous block of memory available at runtime is 4 KB, out of a total 16 KB of RAM.  (Embedded systems programming makes everything more interesting.)  My solution for now is to use that 4K at startup as a bitmap to track which numbers have been used already, and then use a Fisher-Yates shuffle and write each number in sequence to external flash storage, where I can spare a few KB.  It's relatively slow, though, and for safety and write endurance reasons I dislike writing to flash any more than necessary."
crypto,39qqy6,angdev,1 point,Sat Jun 13 22:16:43 2015 UTC,What is the range of possible n's?
crypto,39qqy6,chris_swenson,1 point,Sat Jun 13 22:19:04 2015 UTC,"In this implementation, 0 to about 30,000.  These are files it's counting, so for practical file sizes the limit is probably closer to 10,000."
crypto,39qqy6,tc655,1 point,Sat Jun 13 22:23:45 2015 UTC,What exactly are you trying to do?
crypto,39qqy6,ahazred8vt,1 point,Sat Jun 13 22:33:20 2015 UTC,"Basically the same thing as an iPod shuffle.  Only in this case it's not music files, it's pattern files on an LED hula hoop.  The initial approach was just a purely random selection, so the user sees a lot of duplicates before they get through the whole set, which is currently about 1,000 files but has room to grow to a few times that.  And yes, a cryptographically secure shuffle is total overkill and there are any number of 'good enough' solutions, I'm mostly just scratching an itch here because I feel like this is something that's probably been studied and I'm just not looking in the right places, and the RAM limitation rules out a lot of possibilities.  Being able to traverse the list in reverse order without using extra RAM is also a desirable trait, so the user can back up to a previous pattern.  In practice it's not really necessary to be able to go back more than a few entries."
crypto,39qqy6,mr_bitshift,3,Sat Jun 13 22:44:26 2015 UTC,"If cryptographic strength is overkill, why not something very simple:   Consider each number in your list as two 8-bit numbers Treat each 8 bits as a finite field of size 256, GF(256). Start with a generator, like 3 To get the next random element, multiply by 3 in the field. If you loop back around to 3, then multiply the other 8 bits by 3 in the field, and continue as before.   To make it look more random, you can pick a different generator.  You can also move to the next element in the top and bottom at the same time, but you'll want to use different finite fields to avoid short cycles."
crypto,39qqy6,autowikibot,1 point,Sun Jun 14 00:05:35 2015 UTC,"I think you are over-thinking this. Why not store, in flash, 20 or so lists of random orders for the pattern files?  So on your computer, generate a list of numbers (like 1..10000) and then shuffle them. Do this 20 or more times. Then when they press 'shuffle', the micro takes the next value on the list, mod's it with the number of present files, and picks that pattern.  Each time they power cycle the hoop, or change the files on it, just go onto the next list (loop if at the end).  Trust me, a bunch of ravers on E won't notice :P"
crypto,39qqy6,rosulek,2,Sun Jun 14 18:49:31 2015 UTC,"If you can arrange for n to be a large prime number, you can then skip through using every k'th item and traverse the entire cycle without duplicates. Each k gives you a different shuffle with no obvious patterns. Failing that, find a large prime p slightly smaller than your list and fudge it."
crypto,39qqy6,mr_bitshift,2,Sun Jun 14 02:12:55 2015 UTC,"This sounds a lot like format-preserving encryption, where your format is a number from 0 to n-1.  Suppose you have an encryption algorithm E that adheres to the above format. You would then pick a random key k as your seed. To produce your shuffled sequence, you would compute E(k,0), E(k,1), E(k,2), all the way to E(k,n-1).  The Wikipedia page I linked has lots of examples, but one of the most elegant ones I've seen is the Thorp Shuffle. I believe it requires n to be even, but you can easily adapt it to odd n: just use n+1 instead, and shuffle again if the result is too big."
crypto,39qqy6,martins_m,2,Sat Jun 13 21:35:15 2015 UTC,"Format-preserving encryption:       In cryptography, format-preserving encryption (FPE) refers to encrypting in such a way that the output (the ciphertext) is in the same format as the input (the plaintext). The meaning of ""format"" varies. Typically only finite domains are discussed, for example:   To encrypt a 16-digit credit card number so that the ciphertext is another 16-digit number. To encrypt an English word so that the ciphertext is another English word. To encrypt an n-bit number so that the ciphertext is another n-bit number. (That's actually the definition of an n-bit block cipher.)   For such finite domains, and for the purposes of the discussion below, the cipher is equivalent to a permutation of N integers {0, ... , N−1} where N is the size of the domain.     Relevant: Mihir Bellare | Phillip Rogaway | Block cipher | Feistel cipher   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Call Me"
crypto,39qqy6,cunttard,1 point,Sat Jun 13 21:35:45 2015 UTC,"Interesting.  I can't use the table version, but the cycle walking implementation is very similar to something I was exploring - but I ran into the problem it mentions with the domain being much smaller than the block size.  I've got to find at most 216 elements (and more like 212 in practice) and the block cipher I've got available (without taking up any extra, very limited code space) is XXTEA with a 64-bit block size.  The Hasty Pudding cipher might be a good candidate if there's a sufficiently small implementation.  I'm going to read more on the Thorp shuffle.  The Feistel network stuff is a little over my head.  Thanks!"
crypto,39qqy6,autowikibot,3,Sat Jun 13 22:07:48 2015 UTC,"The swap-or-not shuffle is a very simple format preserving PRP.   on input x:     for i = 1 to r:         x' = K_i - x         if F(k, i || max(x,x')) = 1 then x = x'     return x   The K_i values are values in the range {1..n}, and they comprise part of the random seed; they can be derived from a pseudorandom function if you like. F should be a pseudorandom function that outputs a single bit."
crypto,39qqy6,Natanael_L,1 point,Sat Jun 13 22:28:18 2015 UTC,"This looks very interesting, but I'm not sure I'm reading your pseudocode right.  These are all scalar values?  Or is K an array, indexed by i?  If it is, I haven't got the memory for that."
crypto,39qqy6,rya_nc,1 point,Sat Jun 13 22:39:26 2015 UTC,"Feistel networks are also pretty elegant.  The following is not guaranteed to make a secure block cipher, but it does make a power-of-two permutation, where you get to choose the power.  x = high bits of input y = low bits of input for each bit/byte/badger b in your seed:     x ^= some_hash_function(y ^ b)     swap x and y output = x concatenated with y   The above structure (split data, munge one half, swap, repeat) is an example of a Feistel network.  Any hash function will do. You can use an existing hash function (like Jenkins or FNV) and truncate the hash to the right size. Or you could probably even get away with rolling your own hash function."
crypto,39qqy6,Twylite,1 point,Sun Jun 14 00:26:34 2015 UTC,"For something very simple I would do something like this:  int n = ...;  // precalculation int mask = n - 1; mask |= mask >> 16; mask |= mask >> 8; mask |= mask >> 4; mask |= mask >> 2; mask |= mask >> 1;  // seed can be any odd number int seed = 15;  // initial element, can be anything in [0, n-1] range int initial = 0;  int x = initial; do {   printf(""%i\n"", x);    // next element   do   {     x = (x + seed) & mask;   } while (x >= n); } while (x != initial);   This is not very random, but based on initial value and seed it can be good enough (depends on what for you need this). It requires not much of code and almost no memory for state - just the x, seed, initial and mask values. If you don't want to store mask value, you can calculate it from n every time you get next element."
crypto,39qqy6,autowikibot,1 point,Sun Jun 14 01:24:28 2015 UTC,"If you use a block cipher of n-bits and use it in CTR mode, I believe you get a permutation since no value will repeat itself unless the counter does.  Finding a block cipher that fits your constraints will be a little bit trickier I imagine."
crypto,39lsy9,poopinspace,7,Fri Jun 12 17:08:24 2015 UTC,"As the hobbyist owner/admin of my own server, THIS LOOKS AMAZING! Seriously, trying to get a cert for my server is such a pain."
crypto,39lsy9,LibertatisSurgit,1 point,Fri Jun 12 18:39:12 2015 UTC,Comodos certs (at least the one from Github Edupack) are really easy to set up.
crypto,39lsy9,FinFihlman,0,Fri Jun 12 21:07:35 2015 UTC,https://startssl.com/
crypto,39lsy9,rarefied,3,Fri Jun 12 19:09:25 2015 UTC,"I'm currently on my second try to get a cert from them. I have no idea why the first time failed, but I was never able to authenticate my browser (the initial cert that I installed did not authenticate me as it was supposed to). This time around looks like it is working, but my request ""has been marked for approval by 'their' personnel""; does this happen to everyone?"
crypto,39lsy9,LibertatisSurgit,2,Fri Jun 12 19:18:42 2015 UTC,"It's happened to me every time I've gotten a certificate for a new server, but they always approve it in a few hours."
crypto,39mhsf,FiloSottile,2,Fri Jun 12 19:56:45 2015 UTC,This is a better fit for /r/netsec or /r/asknetsec
crypto,39mhsf,Natanael_L,4,Fri Jun 12 20:13:21 2015 UTC,"The interesting part is the fact that apparently there's a broken CA somewhere. Which is somewhat relevant to the PKI discussion. But if the community here didn't find it interesting, so be it :)"
crypto,39mhsf,samsonx,2,Sat Jun 13 10:59:41 2015 UTC,I found it interesting. It's actually quite big news. Thanks.
crypto,39mhsf,degrigis,2,Sat Jun 13 17:03:57 2015 UTC,Be sure to update on this please.
crypto,39mhsf,GahMatar,1 point,Sun Jun 14 21:41:56 2015 UTC,"I'm really curious about how he manage to do it. I'm thinking that perspectives approach would definitiely be a very good helper in this situation, sadly I think that very few people know it and fewer are interested to run some notaries.  P.S. unless the CA is using MD5 to sign its certs, or it puts its private key in the same ftp folder where you can download certs, in that case I'm not curious but...angry."
crypto,39n9ok,angdev,7,Fri Jun 12 23:23:16 2015 UTC,"the big thing is that they can't be linear at all. I don't know differential cryptanalysis, but with linear cryptanalysis, it is complete crap.  Here's some linear biases on it. p0,p1,p2 are the three input bits  p0 == c0    -0.375 p0 == c1    -0.375 p0 == c2    -0.5 p1 == c0    -0.5 p1 == c1    -0.25 p1 == c2    -0.375 p2 == c0    -0.25 p2 == c1    -0.25 p2 == c2    -0.375  p0 == c0 ^ c1   -0.375 p0 == c0 ^ c2   -0.25 p0 == c1 ^ c2   -0.25 p1 == c0 ^ c1   -0.25 p1 == c0 ^ c2   -0.125 p1 == c1 ^ c2   -0.375 p2 == c0 ^ c1   -0.5 p2 == c0 ^ c2   -0.375 p2 == c1 ^ c2   -0.375  p0 == c0 ^ c1 ^ c2  -0.25 p1 == c0 ^ c1 ^ c2  -0.375 p2 == c0 ^ c1 ^ c2  -0.125  p0 ^ p1 == c0   -0.5 p0 ^ p1 == c1   -0.25 p0 ^ p1 == c2   -0.375 p0 ^ p2 == c0   -0.25 p0 ^ p2 == c1   -0.25 p0 ^ p2 == c2   -0.375 p1 ^ p2 == c0   -0.375 p1 ^ p2 == c1   -0.125 p1 ^ p2 == c2   -0.25  p0 ^ p1 == c0 ^ c1  -0.25 p0 ^ p1 == c0 ^ c2  -0.125 p0 ^ p1 == c1 ^ c2  -0.375 p0 ^ p2 == c0 ^ c1  -0.5 p0 ^ p2 == c0 ^ c2  -0.375 p0 ^ p2 == c1 ^ c2  -0.375 p1 ^ p2 == c0 ^ c1  -0.375 p1 ^ p2 == c0 ^ c2  -0.25 p1 ^ p2 == c1 ^ c2  -0.5  p0 ^ p1 == c0 ^ c1 ^ c2     -0.375 p0 ^ p2 == c0 ^ c1 ^ c2     -0.125 p1 ^ p2 == c0 ^ c1 ^ c2     -0.25  p0 ^ p1 ^ p2 == c0  -0.375 p0 ^ p1 ^ p2 == c1  -0.125 p0 ^ p1 ^ p2 == c2  -0.25  p0 ^ p1 ^ p2 == c0 ^ c1     -0.375 p0 ^ p1 ^ p2 == c0 ^ c2     -0.25 p0 ^ p1 ^ p2 == c1 ^ c2     -0.5  p0 ^ p1 ^ p2 == c0 ^ c1 ^ c2    -0.25   To read this, note that   p2 == c0 ^ c1   -0.5   means that the third plaintext bit is NEVER the xor of the first two ciphertext bits. The number at the end is the bias, defined as:  .5 + bias = probability that this relationship holds.    You want bias to be as close to 0 as possible  Also, I recommend makin the sboxes at least 4x4, otherwise it's completely impossible to get any good (minimal linearity) sboxes. Also, powers of two are nice. Powers of three are not."
crypto,39n9ok,SirRobertKiN,7,Fri Jun 12 23:33:03 2015 UTC,BTW - DES is vulnerable because a single one of their sboxes has ~ .2 bias. Look at your biases and weep
crypto,39n9ok,SirRobertKiN,3,Fri Jun 12 23:44:50 2015 UTC,"How did you calculate the above biases? Also, my future attempts will be 4-bit boxes then, thanks for the tip. My ultimate goal is to write a piece of software to brute-force every possible S-Box and score them based on how ""good"" they are, and then set out to create some good 16-bit S-Boxes!"
crypto,39n9ok,tom-md,4,Fri Jun 12 23:50:17 2015 UTC,Are you aware that has been done?  Classifying and rating all 4-bit SBoxes.
crypto,39n9ok,tom-md,3,Sat Jun 13 00:11:29 2015 UTC,Has it been done for 16-bit S-Boxes?
crypto,39n9ok,supersaw7,7,Sat Jun 13 00:16:26 2015 UTC,"Not that I am aware of.  The main take-away is that the properties considered good have been well explored and your efforts might benefit by being familiar with said work.  EDIT: found the paper I was reading.  Its titled ""On the Classification of 4 Bit S-Boxes"""
crypto,39n9ok,SirRobertKiN,3,Sat Jun 13 00:18:33 2015 UTC,On the Classification of 4 Bit S-Boxes   Ah it's behind a paywall and my old university login no longer works :(
crypto,39gi0v,R-EDDIT,6,Thu Jun 11 15:48:01 2015 UTC,"Some interesting commentary via twitter as well: https://twitter.com/hashtag/ECCworkshop   ""What's the #1 thing you're looking for in a new (elliptic) curve?"" ""Restoring trust"" #ECCworkshop"
crypto,39gi0v,molo1134,2,Thu Jun 11 21:18:18 2015 UTC,"Performance and ease of safe implementation, not so much unless you're djb & Tanja :-(  Costello/Microsoft seem a little too hung up on precise 128/192/256 bit levels without regard for what they actually mean for ECC."
crypto,39gi0v,floodyberry,3,Fri Jun 12 04:37:49 2015 UTC,Archived Slides:  http://www.nist.gov/itl/csd/ct/ecc-workshop.cfm  Archived video:   https://www.youtube.com/watch?v=yS84gO-sy6k
crypto,39gi0v,frumperino,1 point,Fri Jun 12 04:08:25 2015 UTC,is the audio sync out of whack for everyone?
crypto,39gi0v,SufficientlyDistinct,1 point,Fri Jun 12 04:16:59 2015 UTC,It is for me (chrome/html5/windows).
crypto,39e89v,Skynet0928,12,Thu Jun 11 03:48:30 2015 UTC,"As with all things crypto, what's your threat model? Who might be trying to reverse-engineer the key algorithm or write a crack, how good are they / how much effort are you spending, and how worried are you about them? Which false positives (honest customer who upgrades their system) are unacceptable, and which ones are you okay with if necessary?  Your verification code is, fundamentally, running on their system. They own and control their system; you don't. In a mathematical sense, product key mechanisms don't work. At one level, since the key has to be verified somehow, your product has to include code to do that verification. So if you want to check that they're on the same system as they paid for, there will be code running on customer systems to go and check various system properties and combine them in some order, and someone can reverse-engineer that code. At another level, someone could just reverse-engineer the check itself, and patch it out entirely. Or they could fake the current date, so it looks like the trial has never ended. All of these are pretty straightforward for someone who knows what they're doing.  Maybe you're not worried about that. Maybe it's OK if someone who knows what they're doing can break the system: you just want to make sure the casual user is persuaded to pay for the right licenses. As the centuries-old saying goes, locks are there to keep honest people honest.  If that's fine, then your job is easier, since you don't need to be mathematically rigorous, and you can, and probably should, optimize to reduce false positives (honest customers who are unhappy with you) at the cost of false negatives (pirates who aren't stopped). Both RSA and ECC signatures would be more than fine, mathematically, but the big problem is that signatures are going to be way too long to use as product keys. You could have a license file that contains an RSA signature, and email that file around instead of expecting people to type in a key.  If that's not fine, you may want to rethink your business model since this approach is mathematically impossible. That said, DRM is mathematically impossible and some DRM companies seem to be staying afloat. So you could invest a bunch of time and money into making it painful to reverse-engineer with things like obfuscation (even though it's still technically possible), upgrading the scheme regularly, and generally staying one step ahead in an arms race. You will suffer more false positives as you try to drive the false negative rate down, but sometimes that's what the boss demands.  (Is this a web app or a local app? You said your software is ""online only"", but if it's a web app, you don't know what computer they're running on. You certainly can't get the MAC address and things.)"
crypto,39e89v,ldpreload,4,Thu Jun 11 04:58:32 2015 UTC,"I'd like to add that having a keygen rather than a crack is better because you don't have to change the software. Keygen is more ""clean"".  So if you use asymmetric crypto to verify the keygen, crackers are supposed to modify your program rather than create a program that generates a valid key."
crypto,39e89v,m1el,2,Thu Jun 11 09:22:27 2015 UTC,"the big problem is that signatures are going to be way too long to use as product keys.   Interestingly, Microsoft is using ECC in their product keys (25 characters of 24-symbol alphabet), but it is only 64 bit, so reversing the public is trivial on modern hardware."
crypto,39e89v,m1el,2,Thu Jun 11 09:30:36 2015 UTC,I'll just leave this here...   0x90
crypto,39e89v,TheTerrasque,1 point,Thu Jun 11 13:11:44 2015 UTC,"Well, strictly speaking, it's not mathematically impossible to have cryptographically secure DRM. There is a thing on the horizon (ie. already proven to be doable but infeasibly slow right now) called homomorphic encryption and it allows you to obfuscate code in a way that makes it cryptographically hard to reverse-engineer it and find out what it is even doing. So maybe, we'll see un-deobfuscateable DRM code in the future."
crypto,39e89v,Muvlon,3,Thu Jun 11 19:52:59 2015 UTC,"Yeah, homomorphic encryption (or program obfuscation, which is related but a little closer) is definitely a thing that works, but it's still about doing blind operations on encrypted data and keeping it encrypted. If you decrypt the data in the process, you lose the security guarantees / you're not working in a homomorphic model any more.  The DRM problem (as I'm using the term) is to end up playing unencrypted content on a consumer-owned general-purpose computer, while denying them the ability to record that content or replay it arbitrarily or to copy it to other computers. That's what I'm claiming is impossible, since you're ending up outputting the unencrypted content to an OS under their control."
crypto,39e89v,ldpreload,3,Thu Jun 11 20:32:31 2015 UTC,"Not necessarily, Intel's newest shenanigans like Insider and PAVP actually make it possible to play an encrypted media file while no part of the OS can see the unencrypted content at any time. However, that needs special hardware and doesn't work on any general-purpose computer."
crypto,39e89v,Muvlon,2,Thu Jun 11 21:54:55 2015 UTC,"Store your signing public key in your program, then distribute signed license messages for keys. They will have to be pasted into your application , but a keygen will be impossible.   This is the approach Sublime Text uses.   You probably don't have the resources to harden your software against cracking."
crypto,39e89v,scaevolus,-2,Thu Jun 11 06:00:44 2015 UTC,Sounds like a job for HMAC.  http://security.stackexchange.com/questions/20129/how-and-when-do-i-use-hmac
crypto,39e89v,tortxof,5,Thu Jun 11 04:55:19 2015 UTC,"The problem with this approach is that anybody who extracts your secret key out of your program will be able to make a keygen. Maybe you don't care about this because ""they could break it anyway"", but it means a third party could try to make money on your product by selling seemingly valid keys to people."
crypto,39e89v,eeget9Eo,4,Thu Jun 11 06:49:53 2015 UTC,"HMAC is exactly what you shouldn't use. You can reverse it an write a keygen very easily. RSA/ECC keys, on the other side, require that you crack the software to bypass the license key."
crypto,39ad8m,untitleddocument37,5,Wed Jun 10 11:56:35 2015 UTC,"It's intentional. The current EdDSA construct does not require that the hash function be properly collision resistant. Were the hash of the message used as the input, there would be stronger requirements on its security.  This point is currently being debated by the CFRG right now."
crypto,39ad8m,kingkilr,1 point,Wed Jun 10 12:10:45 2015 UTC,"But it breaks every existing API that supports signatures because none of them required the message at signing time.  Like in my library I have an ""EC sign"" function that supports NIST curves and was attempting to add edDSA but I have to re-think this because my EC sign function only takes a hash not a message.  Ugh.... kids and their new standards ..."
crypto,39ad8m,floodyberry,1 point,Wed Jun 10 12:26:23 2015 UTC,Do you think that collision-resilience is not needed then?
crypto,39ad8m,floodyberry,0,Wed Jun 10 17:15:56 2015 UTC,Do you think streaming is not necessary?
crypto,39ad8m,ldpreload,2,Wed Jun 10 17:34:35 2015 UTC,"You can still stream with EdDSA, you just need two passes or to just sign the message hash and lose collision-resilience. Your opinion on collision-resilience is what I was trying to find out, you've presented everything as if it was of no extra value."
crypto,39ad8m,oconnor663,2,Wed Jun 10 18:22:14 2015 UTC,"It's pretty common to implement streaming by treating each chunk of the message as a separate plaintext.  In particular, for a protocol like SSL (which is a fine high-level design), you generate a few shared session keys, and have one party sign something using their long-term key (RSA, EdDSA, whatever). Then you know that anyone using those session keys must be the same entity who controls the long-term key. The streamed content is authenticated-encrypted using those symmetric keys, one chunk at at time. This means that you can check the authentication of each chunk separately, and you can reject it immediately.  Otherwise streaming is sort of useless: if you're streaming a 3 GB video, you can't even start playing it until you have downloaded the entire thing and hashed it. If you do chunk-at-a-time verification, then you can start playing it as soon as you have the first chunk, because you know it hasn't been tampered with."
crypto,39ad8m,diafygi,0,Thu Jun 11 05:04:15 2015 UTC,Except for applications like secureboot ... even then the 3GB need not be that big.  A device with 128KB of ram might want to sign a message that is 1MB in length..
crypto,39ad8m,poopinspace,2,Thu Jun 11 10:06:16 2015 UTC,"Novice here, what's wrong with just signing a hash as the message and having the recipient recompute the hash before checking the signature?"
crypto,39ad8m,vizag,1 point,Wed Jun 10 12:54:36 2015 UTC,"That's ""fine"" provided that's standard.  But if the edDSA signature on a 3GB message is defined the way the RFC says it today ... you can't sign that message on a small device (or a 32-bit device in general) without re-writing your API to support top/bottom half signature functions."
crypto,39ad8m,TiltedPlacitan,1 point,Wed Jun 10 12:57:05 2015 UTC,"I'm a little confused. Why can't you sign a huge file on a small device? EdDSA takes a hash function as input (sha512), so you can basically stream the huge file and compute the signature without loading the entire file into memory, right?"
crypto,39ad8m,poopinspace,1 point,Wed Jun 10 13:38:36 2015 UTC,"Because if you're writing an API that already supports ECDSA/PKCS#1/etc you don't write it this way.  By time you're calling my PKCS #1 code to sign you've already hashed the data ""somehow.""  So if I'm trying to fit edDSA into this framework I need to either have two different API templates for edDSA and ""everything else"" or re-write my existing API to model it over this new flow.  edit: to answer ""why it's done that way"" it's because ""how"" the data gets into the program is not the responsibility of the signing function....  I'm writing a library today that will be used 1000s of times over the next 10+ years.  I can't predict how users will fetch data to sign/verify.  That's why traditionally you just assume the message has been hashed already."
crypto,398a0g,tom-md,3,Tue Jun 9 23:44:20 2015 UTC,"Least people get too surprised: This is a non-commercial use license.  I just realized that I should have probably phrased the title differently.  Still, exciting and great fun to try out."
crypto,398a0g,throwaway0xFF00,4,Tue Jun 9 23:50:26 2015 UTC,"This is a non-commercial use license   It is definitely a strange license.  ""If your project receives external funding from other than U.S. Government research grants or contracts, you must obtain a commercial license from Galois.""  So if you had a crowd source funded, open source project, guess what?  :(   I wish the terms were better.  Aside from that, SAW is definitely exciting.  SAW + KLEE sound like they compliment each other well for symbolic execution."
crypto,398a0g,throwaway0xFF00,5,Wed Jun 10 03:06:18 2015 UTC,"We're a pretty approachable bunch and open source friendly.  I know it is hard to get past the reaction of ""license doesn't agree with my use, I must look elsewhere"" but if you or anyone else is in such a situation then CONTACT US!  I don't set the license, but I'd be shocked if the response was anything other than positive."
crypto,397rhk,foxcode,9,Tue Jun 9 21:33:55 2015 UTC,"No need for differential cryptanalysis here. If you use an XOR as round function, then your whole construction is linear (it consists solely of XORs). Such systems are trivial to solve.  In your case, one output block is one of the input blocks, the other is the XOR of both input blocks, both XORed with the XOR-sum of all or all minus the last round keys (depending on the number of rounds and which block you're looking at). You can recover this roundkey sum with a single plaintext/ciphertext pair."
crypto,397rhk,JoDaBeda,4,Wed Jun 10 07:14:59 2015 UTC,"Given input LR, the final output of your 3 round ""feistel"" is   L xor k2 xor k3 R xor k1 xor k2   So with just one ciphertext/plaintext pair, I can forge and decode any message I want, because it's essentially two one-time pad where we know the secret keys. If I compute L xor (ouput L), I get (k2 xor k3). With the right channel, (k1 xor k2) = L xor (ouput L).  I feel like you tried to make differential cryptanalysis easy by ensuring a differential persists throughout the network, but you turned it into a one-time pad. Plus, differential cryptanalysis isn't a known plaintext attack, you're thinking of linear cryptanalysis. Differential cryptanalysis is about allowing the attacker to encrypt two messages of his choice that have a low hamming difference.  Furthermore, your key derivation function appears (at first glance) to simply be  x2 mod (15484223 * 15484243)  Since we have or can find k1 xor k2, k1 xor k3, and k2 xor k3, I don't think we can find your initial key. Not because it relies on the discrete logarithm problem, but because we don't have any of the subkeys. Knowing any of them would let an attacker trivially derive the seed key.  However, as mentioned above, this cipher is not a feistel, just a one-time pad. If you want to practice differential cryptanalysis, try FEAL-4.3 from the NYU CTF. Alternatively, try this one"
crypto,397rhk,SirRobertKiN,1 point,Wed Jun 10 18:16:56 2015 UTC,"Thanks for the great response. I have a few more questions if I may :p My understanding was that for a 1 time pad, your key data had to be at lest equal in length to your plain text. That is not the case here as the sub keys stay the same for the entire length of the message, and we could pass any number of blocks through the algorithm, or am I misunderstanding?     I did not expect the initial key to be found, just the subkeys. Even with your L xor K2 xor K3 I still do not know how to solve for a given key. I wrote my own equations to describe the output and they match yours, but given that in both equations there are 2 unknowns I do not understand how we are meant to solve them, though I suspect the answer is trivial and I am being stupid :)     Finally, if this had a more complex round function, would it be classed as having a Feistel structure? I thought ""Feistel"" referred to any cipher that split the plain text into blocks, processed 2 at a time where each round 1 block is preserved while the other is xored with the round key and the preserved block.     Thanks everyone for taking the time to answer, it might click eventually :)"
crypto,397rhk,SirRobertKiN,3,Wed Jun 10 18:43:58 2015 UTC,Who cares about the three individual round keys when I have enough to forge and decrypt arbitrary messages!  Make your round function a prf and then you can start something
crypto,397rhk,funkysash,3,Wed Jun 10 19:38:38 2015 UTC,I don't know any Haskell so it's kind of hard to understand your cipher. E.g. what do you mean by    new right side block   By cracking you mean key recovery? Maybe you want to start with something simpler like a distinguishing attack(real-or-random model).
crypto,393r8g,randomcheesegrater,8,Tue Jun 9 01:23:00 2015 UTC,"Which area of crypto / security are you interested in? I've tried to make a brief (and by no means complete) list of some areas and researchers who have done quite a bit in those areas:   Lattice - Chris Peikert (Georgia Tech) Private Information Retrieval - Ian Goldberg (University of Waterloo) Number Theoretic - Dan Boneh (Stanford) Reverse Engineering / Malware - Hovav Shacham (UC San Diego) Oblivious RAM / Indistinguishability Obfuscation - Rafael Pass (Cornell) Network Layer / SSL - INRIA (Paris), Vitaly Shmatikov (University of Texas) Cryptocurrency - Ari Juels (Cornell), Arvind Narayanan (Princeton) Cipher Modes / Proof Frameworks for Cryptosystems - Mihir Bellare (UC San Diego), Phillip Rogaway (UC Davis) Homomorphic Encryption - Zvika Brakerski (Weizmann Institute of Science), Vinod Vaikuntanathan (University of Toronto)   Hope that helps!"
crypto,393r8g,0x616e746f6e,2,Tue Jun 9 07:49:04 2015 UTC,I'm interested cryptosystem protocols especially the mathematical side. Homomorphic encryption and cryptocurrencies are also really interesting though. Any of these would certainly be a great stepping stone anyway. Thanks.
crypto,393r8g,poopinspace,2,Tue Jun 9 16:31:36 2015 UTC,What I often see currently:   INRIA/Microsoft -> TLS Coron -> Side-Channel/Smart cards Boneh -> Side-Channel/Timin attacks
crypto,393r8g,bitwiseshiftleft,1 point,Tue Jun 9 19:24:10 2015 UTC,I think Boneh also does lattices these days.  They're a hot topic.
crypto,393r8g,poopinspace,2,Tue Jun 9 16:52:39 2015 UTC,"he used to do it a lot (boneh and durfee against RSA) but I don't think he did anything substantial in decades (last I noticed was his timing attack against openssl but he just applied howgrave-graham and smart lattice attack, nothing new)  edit: hmff wait he didn't even use lattice for his timing attack http://crypto.stanford.edu/~dabo/papers/ssl-timing.pdf"
crypto,393r8g,bitwiseshiftleft,2,Tue Jun 9 19:25:25 2015 UTC,"Dan has a lattices section on his publications section:  http://crypto.stanford.edu/~dabo/pubs/pubsbytopic.html#C1  I've been hanging out some with Dan's former student Hart Montgomery, whose PhD research was almost all lattices.  I think Ananth Raghunathan did a fair amount of lattice stuff too.  It looks like Dan has also done some recent work with indistinguishability obfuscation and multilinear maps.  These might also be built from lattices, but they're really their own thing."
crypto,393r8g,0x616e746f6e,1 point,Wed Jun 10 14:26:50 2015 UTC,"Yes I believe he did a bit in the area of using lattice reductions in the context of cryptanlysis. When I wrote lattice I meant cryptosystems built on lattices, like GGH or systems based on [Ring-]LWE. Sorry for any confusion."
crypto,393r8g,poopinspace,1 point,Tue Jun 9 21:23:51 2015 UTC,"Ah, what paper are you referring to? I am interested"
crypto,393r8g,0x616e746f6e,1 point,Tue Jun 9 21:29:26 2015 UTC,Public-Key Cryptosystems from Lattice Reduction Problems (GGH)
crypto,393r8g,poopinspace,1 point,Tue Jun 9 21:33:35 2015 UTC,I thought you were talking about Dan Boneh?
crypto,393r8g,0x616e746f6e,1 point,Tue Jun 9 21:40:47 2015 UTC,"Sorry for the confusion, this one is the Boneh paper that comes to mind though I'm sure there are other (perhaps more relevant ones). Twenty Years of Attacks on the RSA Cryptosystem"
crypto,393r8g,shiny_thing,5,Tue Jun 9 21:44:03 2015 UTC,"It's pretty disperse, though is mostly in the US and Europe. I'd recommend taking a look at recent proceedings of CRYPTO and EUROCRYPT. See if any articles are of particular interest to you, then look to see if any of the authors are professors who consistently publish similar stuff in respected conferences."
crypto,393r8g,poopinspace,2,Tue Jun 9 15:15:27 2015 UTC,I've seen many chinese schools and indian schools trying to catch up on that. I don't know how legit their research are but they seem pretty advanced
crypto,393r8g,cedricvanrompay,3,Tue Jun 9 19:42:27 2015 UTC,"I think the most productive places in crypto are California (UCLA, UCSD, UCSB, CalTech, others ...) and Israel (weizman) , plus the MIT. these would the most ""dense"" places, and then you have many other great places around the world, among wich New York university and the university of Texas at Dallas."
crypto,393r8g,ldpreload,3,Tue Jun 9 14:39:21 2015 UTC,"Find some crypto conferences covering topics you're interested in, and see where the authors of accepted talks/publications are based. (Or perhaps see where the conferences themselves are hosted.) IACR's conferences (CRYPTO, EUROCRYPT, ASIACRYPT) are highly regarded; I might also suggest Real World Crypto, the IEEE Symposium on Security and Privacy conference (aka ""Oakland""), and USENIX Security for a bit more breadth, so you can find people working on what you're interested in."
crypto,393r8g,rgov,2,Wed Jun 10 07:16:58 2015 UTC,"IBM's Cryptography Research Group maybe. But it would probably require a few advanced math degrees to apply.  Dan Bernstein has some association with University of Illinois at Chicago and at Technische Universiteit Eindhoven in the Netherlands, but I don't know how his research group is organized.  Matthew Green teaches at Johns Hopkins University."
crypto,393r8g,jti107,2,Tue Jun 9 03:38:07 2015 UTC,I'd say any of the big tech US schools should be good. I took a intro to crypto class at Stanford and that was good. if you're interested in a more focused application I'd try and find professors working on that topic rather than a school. this is not confirmed but I've heard a lot the people that NSA recruits from are the math/cs  phds from east coast Ivy League schools and MIT/Caltech/Stanford
crypto,393r8g,kingkilr,2,Tue Jun 9 05:46:25 2015 UTC,"Kenny Patterson's team at Royal Holloway, London is doing some great work."
crypto,39211m,cl0p3z,22,Mon Jun 8 18:00:47 2015 UTC,"""AES 128 is preferred to AES 256. There has been [discussions] on whether AES256 extra security was worth the cost, and the result is far from obvious. At the moment, AES128 is preferred, because it provides good security, is really fast, and seems to be more resistant to timing attacks.""  https://wiki.mozilla.org/Security/Server_Side_TLS"
crypto,39211m,CommandoPro,13,Mon Jun 8 18:07:48 2015 UTC,"While AES128 is faster, is not that fast compared with AES256. We are talking only about a ~30% faster. References:   http://www.mail-archive.com/dev-tech-crypto@lists.mozilla.org/msg11327.html http://www.mail-archive.com/dev-tech-crypto@lists.mozilla.org/msg11331.html   On the other hand breaking AES128 with a quantum computer is doable, while breaking AES256 is not. References:   https://www.schneier.com/blog/archives/2011/08/new_attack_on_a_1.html#c572752 http://crypto.stackexchange.com/questions/6712/is-aes-256-a-post-quantum-secure-cipher-or-not   And I think that the chances of governments already using (or starting to use) quantum computers for breaking crypto and surveillance are real."
crypto,39211m,martins_m,10,Mon Jun 8 19:32:39 2015 UTC,Breaking RSA certs for CA roots and intermediates using quantum algorithms will be done sooner than breaking AES. So there is no point protecting AES key against attack using quantum algorithm.
crypto,39211m,Ben347,4,Mon Jun 8 19:51:53 2015 UTC,"I disagree. If a key exchange providing forward secrecy is used, then breaking a CA root certificate would still require an active attack to decrypt a communication, while a break of AES would not."
crypto,39211m,martins_m,3,Tue Jun 9 01:10:06 2015 UTC,"My understanding is that if you can get private key of CA root, then you can do man-in-the-middle attack on your target and get all information in plain text, no need to break AES at all."
crypto,39211m,Ben347,3,Wed Jun 10 00:00:19 2015 UTC,"That is true, but this requires an active MITM, where the attacker has to actively tamper with a communication at the time it takes place in order to read it. This is harder to do on a large scale and would be possible to detect. With a break in AES an attacker would only need to passively capture a communication, without intervening, or even decrypt old communications that have been captured and stored in a database a long time ago. This could be nearly impossible to detect and could be carried out on a massive scale.  So no doubt breaking RSA would be catastrophic, but breaking AES would be worse."
crypto,39211m,ryanknapper,1 point,Wed Jun 10 00:39:44 2015 UTC,"That is true, but this requires an active MITM   This is trivial for many nation-states."
crypto,39211m,mrkoot,2,Mon Jun 15 19:39:52 2015 UTC,"Currently used ""forward secrecy"" key exchange/agreement methods are very vulnerable to passive quantum attacks using a version of Shor's algorithm, modified for the discrete logarithm problem. Given a working quantum computer, passive attacks on the key negotiation would be much easier than on AES itself."
crypto,39211m,ldpreload,3,Wed Jun 10 22:11:34 2015 UTC,"On the other hand breaking AES128 with a quantum computer is doable, while breaking AES256 is not.   Wikipedia states: ""(...) AES-256 would have the same security against an attack using Grover's algorithm that AES-128 has against classical brute-force search (...)"".  Grover's algorithm reduces AES-256 to 2128 quantum operations, but no reliable implementation exists today (correct me if I'm wrong). At the same time, an attack, albeit impractical, exists against (Full) AES-192/256 that does not apply to AES-128.  From what I understand, AES-128 offers the same security today as (or even better than) AES-256 offers when a reliable implementation of Grover's algorithm becomes known."
crypto,39211m,untitleddocument37,6,Mon Jun 8 20:59:37 2015 UTC,"I don't think that.  Grover's alalgorithm reduces AES-128 to 264 (""AES-64"" if that exists), which can be factorized in a reasonable amount of time with dedicated hardware (ASICs/FPGAs/GPUs/cluster of computers..).  However, Grover's alalgorithm reduces AES-256 to 2128. Which means that AES-256 is as secure to quantum computers as AES-128 is to standard computers.  The ""attack"" that you mention against AES-192/256 http://eprint.iacr.org/2009/317 is not a real attack. You can't apply that attack on a real world system application because is a related-key attack, which means that to work it requires """"the cryptanalyst to have access to plaintexts encrypted with multiple keys that are related in a specific way"""". [Quote from: https://www.schneier.com/blog/archives/2009/07/another_new_aes.html ]"
crypto,39211m,Natanael_L,5,Mon Jun 8 22:10:17 2015 UTC,"Grover's alalgorithm reduces AES-128 to 264 (""AES-64"" if that exists), which can be factorized in a reasonable amount of time with dedicated hardware (ASICs/FPGAs/GPUs/cluster of computers..).   I don't believe it works that way. You'd need quantum ASICs / FPGAs / GPUs: you can't just use a single quantum computer to Grover-ify the problem and then throw it at classical computers."
crypto,39211m,savedigi,1 point,Mon Jun 8 23:41:51 2015 UTC,"That's a good point.  I was assuming that you could do that, but you are right... it makes no sense. You have to compute all the 264 steps in the quantum computer, which would probably not as fast as you would wish."
crypto,39211m,velocirhymer,1 point,Tue Jun 9 01:41:38 2015 UTC,Not only that but building a QC large enough is currently infeasible and maintaining it's state for 264 operations is not going to happen now either.
crypto,39211m,bchurchill,2,Tue Jun 9 10:35:34 2015 UTC,"QC do not maintain state across cycles. You run them in a black box manner, program them and then read the output and let classical processors determine if the output is correct. Then you repeat and repeat until you get a usable answer. They're probabilistic after all."
crypto,39211m,Uncaffeinated,4,Tue Jun 9 15:44:39 2015 UTC,Factorization? What? The security of AES has nothing to do with finding the prime factors of large numbers.
crypto,39211m,walloon5,2,Tue Jun 9 07:32:50 2015 UTC,"I don't think it's reasonable to argue that because 264 is breakable on a modern, classical computer that it will then be breakable on a quantum computer. We'd have to build a quantum computer that runs as fast as the classical computer examples you gave. Saying something like ""as secure to a quantum computer as something else is to a classical computer"" is a really tenuous speculation on how technology will develop; by the time quantum computers are that powerful, the field of both quantum and classical cryptography will probably be radically different."
crypto,39211m,ldpreload,2,Mon Jun 8 23:47:03 2015 UTC,Some would say 30% is huge.
crypto,39211m,dareksam,3,Tue Jun 9 11:03:35 2015 UTC,"The government isn't magic. If academia and industry haven't been able to demonstrate a viable quantum computer yet, I doubt the TLAs are much ahead."
crypto,39211m,martins_m,1 point,Tue Jun 9 02:47:39 2015 UTC,"The TLAs could be 5, 10, or 15 years ahead of academia. They may already have done work in secret that won't be discovered for a long time."
crypto,39211m,justusranvier,9,Tue Jun 9 04:33:18 2015 UTC,"AES-128 has strength comparable to 3072-bit RSA. AES-256 has strength comparable to, like, 15360-bit RSA.  Just about nobody has an effective SSL strength greater than 2048-bit RSA. Even if you used a 4096-bit RSA end-entity key (which my team did for a while, and found that it was super slow to handshake), since all the roots and intermediates in common use are 2048-bit keys, you're still not secure against an attacker with the ability to brute-force a 2048-bit RSA key. That's equivalent to about a 112-bit symmetric cipher. We round that off to AES-128 since that's faster than 3DES (which is 112-bit strength), but there's no measurable security in going beyond 112-bit strength until we solve the 2048-bit RSA key problem.  ECDSA / Ed25519 will probably solve that problem in the long term: since even 4096-bit RSA keys are far too slow to get mass adoption, 15 Kb keys would be completely unusable. But it'll be a while before root CAs and intermediates start using ECC.  So, since AES-256 isn't adding security until then, we might as well use the faster option, since one of the biggest deployment obstacles to HTTPS is the perception that SSL is too slow, and 0-bit security is definitely the wrong option.  [Key strength comparisons between RSA and symmetric ciphers are taken from the ECRYPT II and NIST recommendations, both from 2012, at http://www.keylength.com/, but they match my own knowledge.]"
crypto,39211m,martins_m,1 point,Mon Jun 8 23:49:22 2015 UTC,"Prime factorisation has gotten faster since 2012, no? I remember this talk by Tanja Lange where she talked about why you should use ECC and showed how much the estimated bit strength of RSA has been dropping. The biggest breakthrough was recently, and I think even more recent than 2012."
crypto,39211m,AngrySkillzz,6,Tue Jun 9 06:13:17 2015 UTC,"AES-256 (and 192) was created only to have high/medium/low level categorization same as they had for RSA keys. So they can sell ""military grade security"" to government. But in reality nobody can bruteforce 128-bits. Of course there exists attacks that are more efficient that bruteforce (but still too long).  AES-128 is secure enough. Bruce Schneier agrees on that: https://www.schneier.com/blog/archives/2009/07/another_new_aes.html   And for new applications I suggest that people don't use AES-256. AES-128 provides more than enough security margin for the forseeable future. But if you're already using AES-256, there's no reason to change.   In this link he also quotes attack on AES-192 and AES-256 that takes 2176 and 2119 time. But this attack doesn't work on AES-128. So AES-256 actually turns out weaker than AES-128 (I believe best known attack on AES-128 takes 2126 time)."
crypto,39211m,martins_m,5,Mon Jun 8 18:19:34 2015 UTC,In this link he also quotes attack on AES-192 and AES-256 that takes 2176 and 2119 time. But this attack doesn't work on AES-128. So AES-256 actually turns out weaker than AES-128 (I believe best known attack on AES-128 takes 2126 time).   Not quite.   The attack only breaks 11 rounds of AES-256. Full AES-256 has 14 rounds.
crypto,39211m,martins_m,-1,Mon Jun 8 18:25:24 2015 UTC,"That's true. Nevertheless it shows that there exists attack that works for AES-192 and AES-256, but not for AES-128."
crypto,39211m,semi-matter,7,Mon Jun 8 18:32:52 2015 UTC,"That attack is not possible on a real world application using a well designed cryptographic system because is a related-key attack, and therefore requires """"the cryptanalyst to have access to plaintexts encrypted with multiple keys that are related in a specific way"""". [Quote from: https://www.schneier.com/blog/archives/2009/07/another_new_aes.html ]"
crypto,39211m,ldpreload,1 point,Mon Jun 8 19:17:13 2015 UTC,"The problem here is in terms of safety into the future. AES-128 and 256 are not feasibly brute forceable now, and won't be for a while. There is, however, a pretty good chance that new attacks on AES will be discovered that take advantage of its weak key schedule. Even if we can only break 11 out of the 14 rounds currently, that number can only increase (you can look at the history of DES attacks to see this)."
crypto,39211m,justusranvier,-1,Tue Jun 9 16:15:19 2015 UTC,"Yes, it is not. But still - 192/256 variants are possible to exploit using this attack, but not 128 variant.  But really, if you are not cryptographer, you should trust what Bruce Schneier recommends."
crypto,39211m,hvidgaard,11,Mon Jun 8 19:31:34 2015 UTC,"Well, we are cryptographers and we disagree. Which is the point of the thread, no?  Also, I almost vomited reading your appeal to authority."
crypto,39211m,justusranvier,0,Mon Jun 8 20:10:29 2015 UTC,But what you do if you are not cryptographer? Invent your own algorithm? Follow blindly some advice on random StackOverflow thread? I'm sure trusting Schneier is much better than anything else in such case.  Of course is you are cryptographer you should be capable to come up with your own answer.
crypto,39211m,justusranvier,2,Mon Jun 8 20:17:25 2015 UTC,"""trust"" is the wrong word, especially when it's applied because of only what one person says, no matter who it is.     The words of someone who doesn't have a reputation aren't invalid or untrustworthy, they just don't carry much that much weight yet.  Everybody starts with no reputation."
crypto,39211m,ctz99,2,Mon Jun 8 20:41:07 2015 UTC,"You become a cryptographer.  Bruce Schneier literally got encrypt-then-MAC wrong for years because he had some story about a Dr. Seuss elephant. He is one of many sources that generally know what they're talking about, but he is absolutely wrong to trust blindly, just as much as some StackOverflow thread would be wrong to trust blindly."
crypto,39211m,hinckley,4,Mon Jun 8 23:52:12 2015 UTC,"No, it does not.  It shows there exists an attack that works on a weakened version of AES-192 and AES-256.  The best attack on AES-256 is still brute force.  Maybe someday there will be an attack faster than brute force on AES-256 (all 14 rounds), but that hasn't been shown yet."
crypto,39211m,bitwiseshiftleft,2,Mon Jun 8 20:20:01 2015 UTC,"This is very important to keep in mind.  We did the theory and an attack as part of my crypto project in university, and while a weakness like the attack on 11 rounds of AES-256 is worrying enough in and of itself, it's also easy to show that for the full AES-256, no known statistical attack works.  This point is pretty important, because differential and linear cryptanalysis can be defeated with more rounds. That is not to say that a new kind of attack will not work to futher exploit this weakness, but on the other hand the same could be true for AES-128.  Consider it a crack in the foundation. It is not a problem on its own, as the foundation is still solid."
crypto,39211m,kizzzzurt,1 point,Tue Jun 9 07:54:10 2015 UTC,"There is a related key attack on full AES-256 in 299.5 time.  http://eprint.iacr.org/2009/317  Now, this requires keys related in such a way that you would be extremely unlikely to find in a real world application, so I'd still probably go with AES-256 if you want long term strength against bruteforce.  I don't know why everyone seems to be bringing up the round limited version, maybe because it gets it down to 270 instead, which is much more feasible to brute."
crypto,39304v,johnmountain,5,Mon Jun 8 21:56:18 2015 UTC,"WhatsApp encrypts the contents, but it certainly doesn't encrypt the destination or the timing of when messages are sent. That's certainly enough to figure out who to watch. And if they compromise a suspect's phone they then have access to the endpoint and can read the contents.  One way they might compromise a suspect phone would be if Stingrays and similar (IMSI catchers) can issue baseband firmware updates, which they probably can. Given that the secrecy surrounding IMSI catchers is much greater than would be expected for a simple tracking device, and that carriers can issue such updates over the air, such capabilities seem reasonable."
crypto,39304v,SAI_Peregrinus,5,Tue Jun 9 02:59:46 2015 UTC,""" From http://www.businessinsider.com/whatsapp-may-have-gotten-16-alleged-terrorists-busted-2015-6 :  ""The Associated Press reports that several of the suspects have already been released due to lack of evidence, and it's not clear whether law enforcement in either country actually read the WhatsApp messages themselves.""""  Comment copied from post on /r/privacy"
crypto,39304v,JDAndChocolatebear,3,Tue Jun 9 03:17:46 2015 UTC,"This has surprised me so much that I fell off my chair and broke my hip, which became infected and spread through my body that all of my limbs and my torso had to be amputated."
crypto,39304v,angdev,1 point,Mon Jun 8 22:49:53 2015 UTC,that's 5 points and a full body lol
crypto,39304v,KaptainKraken,2,Mon Jun 8 23:09:58 2015 UTC,Shocking.
crypto,39304v,MacroMeez,1 point,Mon Jun 8 22:27:44 2015 UTC,"The jihadis in Syria love these encrypted messaging apps.  I know it's hypothetical but, how long do you think it would take the NSA or one of their contractors to figure out where the message was sent from. Ie. The physical location of the mobile device as well as which parts of the internet it traveled over?"
crypto,3928ju,johnmountain,0,Mon Jun 8 18:51:01 2015 UTC,"This is the best tl;dr I could make, original reduced by 91%. (I'm a bot)     Patacchiola, who programmed Surespot, replied the same day: ""1 and 2, still no, 3 we have received an email asking us how to submit a subpoena to us which we haven't received yet.""  Has 2fours received any governmental demand to modify the surespot client software?  Has 2fours received any governmental demand to modify the surespot server software?     Extended Summary | FAQ | Theory | Feedback | Top five keywords: Surespot#1 received#2 any#3 use#4 demand#5  Post found in /r/technology, /r/crypto, /r/Android, /r/privacy and /r/realtech."
crypto,392vpj,marklarledu,3,Mon Jun 8 21:25:17 2015 UTC,"Two possible answers:   Many SSL stacks, including MS's implementation and just about all browsers' SSL implementations, cache intermediates that they've already seen. The cert includes information about what public key signed it, so the the SSL stack can see if it's seen that public key before, and construct a trust path that way. Inside that certificate is probably a URL for its intermediate. Inside that cert is a URL for its intermediate, and so forth. MS's SSL stack follows these URLs.   If you look at the Details tab, and find the Authority Information Access section, you should be able to see if it lists a URL to the next certificate in the chain. Alternatively, you can run certutil file.crt on the cert at a command line (or openssl x509 -noout -text -in  file.crt, if you have access to a computer with OpenSSL)."
crypto,392vpj,ldpreload,2,Wed Jun 10 07:06:01 2015 UTC,"If the cert store already has the intermediate certs in the chain used to sign this cert, then yes, the cert itself don't need to contain it. It checks which intermediary cert that your cert says signed it, and will see if it has it. If it does, and if that intermediate cert is at the end of a chain rather than a root CA, it shows the full chain."
crypto,38wkot,sanderD,7,Sun Jun 7 13:09:21 2015 UTC,"I like the fact that software is being formally verified.  However, HMAC is a teeny-tiny part of OpenSSL.  It would be nice to have a good formal definition and security formalization of TLS (or CurveCP), with an implementation.  One day..."
crypto,38wkot,m1el,3,Sun Jun 7 19:07:35 2015 UTC,"Not only is hmac a small part, but modern AEAD cipher suites don't use it anyhow.  (AES-GCM and ChaCha20-Poly1305)."
crypto,38wkot,R-EDDIT,3,Mon Jun 8 00:52:22 2015 UTC,"Not only is hmac a small part, but modern AEAD cipher suites don't use it anyhow. (AES-GCM and ChaCha20-Poly1305).   Formal verification of software is not easy.  Even the simplest of software can be quite challenging to verify (this is even implied by the paper).   The AEADs in latest SSL libraries would take a great amount of effort that probably would not be feasible by academic institutions unless it were a massive effort taken on by dozens of peoples or institutions.    edit: furthermore, it was only this year that it was published that SHA-256 was verified in OpenSSL.  It genuinely takes time to do."
crypto,38wkot,throwaway0xFF00,2,Mon Jun 8 02:02:58 2015 UTC,"I was agreeing with the commentator above that HMAC is a small part of OpenSSL, that doesn't reflect an opinion of the difficulty of formally verifying it. It is important to note that, regardless of difficulty or effort into verifying HMAC, it is on its way to obsolescence in favor of AEAD.  The paper is great, however it's unfortunately not accurate to say that ""SHA-256 was verified in OpenSSL"".  The version verified is a c-language derivative of SHA-256 from OpenSSL 0.9.8.  The actual implementation used in modern OpenSSL can be built with one of three inline assembly modules depending on architectures (ARM, x86, x86-64).  So as you say, Formal Verification is hard work, but there is a lot more work to do."
crypto,38wkot,R-EDDIT,3,Mon Jun 8 03:44:44 2015 UTC,"HMAC is useful for much more than encrypted data, so it won't be obsolete anytime soon."
crypto,38wkot,Natanael_L,1 point,Mon Jun 8 16:49:01 2015 UTC,"That was a great paper to see. It should be noted that for fixed-sized inputs, verifying SHA256 (and similar algorithms) is much easier - even within reach of automated solvers.  The issue really comes in when you want to make a proof in the form for all sizes S, for all bit strings 'B' of size S."
crypto,38wkot,tom-md,1 point,Mon Jun 8 02:47:05 2015 UTC,"for all sizes S, for all bit strings 'B' of size S   That is also correct.  There is a big gap between each '->' Algorithm/Protocol -> Standard -> Implementation -> Machine code  Algorithms don't care about bits and bytes.   Try finding an implementation out there that does bits!    I guess the nice thing (or not so nice thing) about the SHA is that the algorithm and standard are the same.  Edit: the point is that verifying correctness and security can be difficult because the scope between software and algorithm is quite perplexing."
crypto,38wkot,throwaway0xFF00,1 point,Mon Jun 8 03:49:28 2015 UTC,One day?  Why does everyone forget about miTLS?  Just because it is verified in a Dolev-Yao setting?
crypto,38wkot,tom-md,2,Sun Jun 7 19:42:24 2015 UTC,"Why does everyone forget about miTLS?   While miTLS is nice, it would be more valuable in a C/C++ library or perhaps in LLVM IR.  While there is nothing wrong with F#/CIL, you probably won't find it in major software distributions"
crypto,38wkot,throwaway0xFF00,2,Sun Jun 7 20:26:56 2015 UTC,"Not that I am a fan of CIL, but there is some progress in compiling CIL to LLVM so this might get done ""for free"" modulo the possible bugs in the compiler chain, which we sort of accept in other venues anyway."
crypto,38wkot,tom-md,3,Sun Jun 7 20:29:36 2015 UTC,"Not that I am a fan of CIL, but there is some progress in compiling CIL to LLVM so this might get done ""for free"" modulo the possible bugs in the compiler chain, which we sort of accept in other venues anyway.   That is certainly true.  I'd be more interested in doing away with the conversion and just go strait to LLVM.  Mono can almost do it and there is some recent article of an alternative."
crypto,38wkot,throwaway0xFF00,1 point,Sun Jun 7 21:47:11 2015 UTC,Interested readers might also want to read about the FCF tool used in this work.
crypto,38wkot,tom-md,0,Sun Jun 7 19:46:18 2015 UTC,Being verified is cool and all ... but writing code that humans can read (and modify) correctly would be nicer.
crypto,38wkot,untitleddocument37,1 point,Mon Jun 8 16:44:50 2015 UTC,I think that in some scenarios having provable correct code is more valuable then having something that is easy to maintain. Certainly in the case of a crypto primitive implementation
crypto,38wkot,untitleddocument37,0,Mon Jun 8 17:19:28 2015 UTC,"Not really, because every time you want to upgrade/change it you have to then verify it which could be cost prohibitive.  In security, anything that is cost prohibitive is ignored.    ergo, the verification will be skipped (or seldom used) meaning you'll have gaps in the coverage."
crypto,38wkot,untitleddocument37,3,Mon Jun 8 17:26:07 2015 UTC,"But you don't have to upgrade or change a crypto primitive? Modularise your crypto component, proof the implementation of your primitive and interface with it (the interfacing party should be easy to maintain)"
crypto,38wkot,untitleddocument37,0,Mon Jun 8 17:46:55 2015 UTC,Suppose there is an update to the FIPS publication concerning HMAC and HMAC v2.00 comes out ...
crypto,38wkot,untitleddocument37,3,Mon Jun 8 17:50:51 2015 UTC,"Then again. I believe that having a verified, proving correct implementation is more valuable then having an easy to modify implementation in case an update comes out? Updating an crypto primitive implementation should not be regarded as trivial job.   I think that for certain components, having a proven correct implementation is more valuable then an easy to maintain implementation. You are not going to update that code every week and having it working perfectly is of extreme importance.  But I do see your point, and for other type of components I fully agree."
crypto,38ukt0,johnmountain,5,Sat Jun 6 23:21:55 2015 UTC,"The problem with webapps that do this is that the code is downloaded from the server each time, so the JavaScript could be occasionally changed to pass the decryption key along to the server with the client likely being none the wiser. That same problem applies to native apps that have auto-updaters, albeit more weakly, but there really doesn't seem to be any real way to do this with webapps."
crypto,38ukt0,forrestv,1 point,Sun Jun 7 06:38:30 2015 UTC,"hmmm, good point. I wonder, is there any kind of mechanism to let browser validates audited javascript with either HMAC or even RSA signature, then when the js changes, browser will refuse to load the page.  For now, there is Content-Security-Policy for preventing loading un-authorized resource.  http://www.html5rocks.com/en/tutorials/security/content-security-policy/  We can actually extend this policy to make web-app more secure. What can be done is   Third party audits the JS code you publish They sign your JS code and issue a certificate for it Anyone can view the code along with the certificate to ensure it's not evil You publish your certificate with JS Use Content-Security-Policy to specify the JS can be only loaded with valid certificate from certain third party authority The Content-Security-Policy itself should also signed by the authority   By doing this, as a service provider, if I modify the javascript without going through the audit process, I cannot publish the code, even I do so, the browser will refuse to load my code. Who will be the authority will be a question then. Hmmm, maybe group signature can be use.  What do you think about this?"
crypto,38ukt0,victorlin,1 point,Sun Jun 7 18:10:07 2015 UTC,"HMAC is unsuitable to validate the javascript as it requires a pre-existing secret and anyone in possession of this secret (any verifier) can also forge at will.  In addition, any verification will need to be done outside of the JS VM by the host web browser including a full verification of the integrity of any symbols used by signed code. Including browser extensions and the entire standard library of the JS VM as well as the browser's own DOM implementation and any APIs it exposes to any JS code, ever."
crypto,38silq,johnmountain,1 point,Sat Jun 6 12:59:27 2015 UTC,"That was great, as always."
crypto,38ro9b,johnmountain,10,Sat Jun 6 05:54:43 2015 UTC,"Supports numerous hash (including SHA-512, RIPEMD-320, Tiger) and encryption algorithms (Including AES, Twofish, and Serpent) in several modes (CBC, LRW, and XTS), giving more options than any other disk encryption software.   I don't really think this is a good thing. Is there any good reason to use CBC or LRW?"
crypto,38ro9b,rya_nc,4,Sat Jun 6 06:12:15 2015 UTC,"There's no good reason not to use either of them if you know how they're operating and what you're encrypting. If you're familiar with the attack vectors of both, use them as you wish. XTS isn't invulnerable either, and I can imagine there could be situations where XTS would be inherently insecure, but one of the others would be appropriate."
crypto,38ro9b,not_gridly,3,Sat Jun 6 07:33:03 2015 UTC,"My understanding is that LRW has known vulnerabilities that XTS does not have, and XTS doesn't introduce any new vulnerabilities. CBC might be slightly faster than XTS."
crypto,38ro9b,rya_nc,0,Sat Jun 6 08:42:52 2015 UTC,Of course LRW has known vulnerabilities that XTS doesn't. They're completely different. Non-introduction of new vulnerabilities ≠ invulnerablity.
crypto,38ro9b,not_gridly,6,Sat Jun 6 08:51:07 2015 UTC,"Among the three, XTS is the best and the LRW and CBC shouldn't be used.  As you say XTS isn't perfect, FDE inherently suffers constraints that prevent authenticated encryption.  The solution is to use multiple layers of encryption, FDE at disk level to increaser attacker cost to avoid laptop threats, and strong document encryption (ie, Office 2013 OpenOffice format documents with 12+ character passwords, etc)."
crypto,38ro9b,R-EDDIT,1 point,Sat Jun 6 12:58:57 2015 UTC,"Backwards compatibility? The default mode in LUKS some time ago was CBC, so I guess many people use it."
crypto,38ro9b,chiniwini,10,Mon Jun 8 13:50:44 2015 UTC,"A tool supposed to enhance the security of my workstation but that requires me to disable driver signature verification? I don't know, but the fact that LibreCrypt relies on the FreeOTFE kernel driver, and that FreeOTFE has been around for over ten years, and still no signed kernel driver, makes me worry. Disabling driver signatures opens the door wide for rootkits and other malicious players."
crypto,38ro9b,mrsaint01,7,Sat Jun 6 07:54:23 2015 UTC,"The code signing certificates required seem to cost between $150 and $250 per year. I'll chip in if they start a collection.  Edit: ReactOS will sign peoples' drivers for free, though one of their devs must agree to ""sponsor"" the driver."
crypto,38ro9b,rya_nc,4,Sat Jun 6 08:38:36 2015 UTC,"You may find cheaper solutions via a reseller. For instance, certain Comodo resellers offer certificates for under $100 that are supposed to be suitable for kernel drivers."
crypto,38ro9b,mrsaint01,6,Sat Jun 6 09:12:06 2015 UTC,"The project developers could probably work a deal with digicert or GlobalSign for a free signing certificate in exchange for modest amount of promotion.  A blog post that say ""digicert generously signs our official binaries"" is worth more than $150 in PR."
crypto,38ro9b,R-EDDIT,1 point,Sat Jun 6 13:02:11 2015 UTC,"A certificate is a piece of data with little, if any, marginal cost. A ""fully loaded Mac Pro"" is mostly marginal cost. I would be kind of surprised if neither Globalsign or Digicert were willing to offer a free - or at least discounted - code singing certificate."
crypto,38ro9b,rya_nc,7,Sat Jun 6 15:34:24 2015 UTC,"You have no idea what you're talking about. GlobalSign already gives away ssl certificates to open source projects. There are no requirements for how popular the software has to be.  The PR win is that that can say ""we offer free/discounted certificates to open source projects"". This makes them look good, and it doesn't matter if any popular projects use it or not."
crypto,38ro9b,rya_nc,1 point,Sat Jun 6 15:46:06 2015 UTC,A ReactOS dev has agreed to review and sign the driver code
crypto,38ro9b,squte,8,Sat Jun 6 15:50:31 2015 UTC,"At the bottom of their readme they talk about issues with non-ascii special characters in passwords...  Can anyone provide an explanation for this? I don't have experience in crypto at this low of a level but shouldn't the password basically be put right into a hash function? I can understanding choking on null bytes, but just about any other single byte character should be fine..."
crypto,38ro9b,Klathmon,3,Sat Jun 6 15:58:55 2015 UTC,Because of encoding mismatch
crypto,38ro9b,Natanael_L,1 point,Sun Jun 7 12:45:42 2015 UTC,"That shouldn't matter at all. It is just being fed into a hash function, and encoding only really applies to ""output"" or ""display"".  At that point it should just be a series of bytes."
crypto,38ro9b,Klathmon,3,Sat Jun 6 16:07:46 2015 UTC,"No, sorry, but depending on encoding an ö could be encoded as different raw bit strings BEFORE it reaches the hash function = different hashes."
crypto,38ro9b,Natanael_L,3,Sat Jun 6 17:55:07 2015 UTC,"Disclosure: I am the maintainer of https://github.com/t-d-k/LibreCrypt  What Natanael_L says is correct, it's an encoding issue. In fact, you can use non-ascii characters in the password, and the container will open fine on a PC with the same default encoding.  At some point it will change to use pure UTF-8 internally, but that will be non-backwards compatible, so for now it's safer to only use ASCII."
crypto,38ro9b,squte,2,Sat Jun 6 18:00:55 2015 UTC,"Awesome!  I clearly don't have much experience at that level, but that just stood out to me.  Nice to have an explanation."
crypto,38ro9b,Klathmon,1 point,Sat Jun 6 18:12:36 2015 UTC,"Oh that makes sense. Most of my experience is in microcontrollers and web development and in both of them encoding is generally not needed, or taken care of, so I tend to be weak in this area.  What is it that is actually encoding the input that can make it different at that point?"
crypto,38ro9b,Klathmon,1 point,Sun Jun 7 12:37:11 2015 UTC,The client software or OS provided input processing.
crypto,38ro9b,Natanael_L,1 point,Sun Jun 7 13:57:27 2015 UTC,"Oh I had assumed it was an encrypted boot drive so it would be during boot, I guess the OS differences make sense."
crypto,38ro9b,Klathmon,1 point,Sat Jun 6 18:21:05 2015 UTC,"Even with a bootloader for FDE, keyboards can send different key codes for the same characters."
crypto,38ro9b,Natanael_L,1 point,Sat Jun 6 18:35:07 2015 UTC,I wonder how many would triforce it?  [alt-255] [alt-255] [alt-30] [enter] [alt 30] [alt 255] [alt 30]
crypto,38ro9b,daveime,1 point,Sat Jun 6 18:46:02 2015 UTC,"It's not actually enforced at all, you can use non-ASCII  characters, but if you do, don't be surprised if you can't open your containers on a PC with a different region set."
crypto,38ro9b,squte,1 point,Sat Jun 6 18:47:46 2015 UTC,Thank you for this.
crypto,38orox,kpdyer,8,Fri Jun 5 16:34:20 2015 UTC,Format-Transforming Encryption is the technology discussed in the video. It's one of the projects I worked on during my PhD. If you're interested in learning more...  the website: https://fteproxy.org/  the source code: https://github.com/kpdyer/fteproxy  the publication: https://kpdyer.com/publications/ccs2013-fte.pdf
crypto,38r0fj,angdev,3,Sat Jun 6 02:02:34 2015 UTC,"The permutation is public, and so immediately reversible. It adds nothing to the security of the scheme.  Sorry, I was looking at the wrong picture. For the one that you linked, I can think of two possible reasons. First, the only non-linearity comes from the S-box. The P operation is linear, so from a cryptanalysis perspective, it doesn't matter how you shuffle the bits around after the last S-box round, it doesn't add any confusion.  The second reason is that the decryption operation is now the exact inverse (the network is symmetric about a horizontal axis) which means you can use the same hardware for both encryption and decryption by simply flipping the lookup table for the S-box."
crypto,38r0fj,brambit,1 point,Sat Jun 6 03:43:59 2015 UTC,"If this is the case, then why can't the final Substitution be reversed as well? I thought that by mixing in the key after the final SP would prevent any trivial reversal? Is this not the case?"
crypto,38r0fj,DoWhile,2,Sat Jun 6 03:55:44 2015 UTC,"If this is the case, then why can't the final Substitution be reversed as well?    The substitution doesn't trivially ""commute"" with blinding.    I thought that by mixing in the key after the final SP would prevent any trivial reversal? Is this not the case?   It's not.  Think of it like this: Move box from location 1 to location 5, and paint it with color 5.  You still know exactly where that box came from even though you painted it a new color.    Mathematically, if σ is your permutation, then σ(A) XOR K = σ (A XOR  σ-1 (K)) and since σ is now in the outermost layer, it can be trivially inverted.  On the other hand, with a good substitution box S, then S(A) XOR K cannot be easily converted into S(A XOR T(K)) where T is some easily computable function."
crypto,38r0fj,DoWhile,1 point,Sat Jun 6 04:09:20 2015 UTC,"OK, so if I understand correctly..... if in the final round the P happens before the S, and then it is followed by a mixing of a Key, P is no longer trivially redundant?!?!?"
crypto,38r0fj,brambit,3,Sat Jun 6 07:27:55 2015 UTC,"If you ONLY changed the last round, it would now be redundant against the permutation of the previous round.  If you changed it across ALL rounds, then the first permutation would now be redundant.  Either way, it's no longer how a SPN is defined.  By the way, if you're wondering why any of this should offer any security, there isn't any ground truth to it.  We know when things don't give security or are insecure, but only have heuristics as to when things are secure.    If you want to study cryptography with some semblance of mathematical ground truth (like, say, ""factoring is hard""), you should check out complexity-theoretic based cryptography rather than cipher design and cryptanalysis.  It's far more fun and far less practical.  In my (severely biased) view, the only pure cryptanalysis is trying to figure out how to break math."
crypto,38r0fj,DoWhile,2,Sat Jun 6 08:02:30 2015 UTC,"Eh, I disagree on the practicality :-)  The art part of cipher design ends once you've created your permutation. That isn't the end of the story though, you still have to take the permutation and make a secure block cipher out of it. But wait, what does 'secure' really mean, in a strict, well-defined sense?  How do you go from that block cipher to a practical scheme that can encrypt large chunks of a data with a small quantifiable loss of this 'security'? All of those are really fun, accessible proofs without a ton of advanced math in them."
crypto,38r0fj,omegga,1 point,Mon Jun 8 06:30:52 2015 UTC,"Thanks. And one final question!  If the Permutation stage of the round is made up of several dozen possible P-boxes, and the P-box used is based on the current key K, then is the Permutation no longer easily reversed (redundant)?"
crypto,38r0fj,tydie1,1 point,Sat Jun 6 19:42:55 2015 UTC,"If the Permutation stage of the round is made up of several dozen possible P-boxes, and the P-box used is based on the current key K, then is the Permutation no longer easily reversed (redundant)?   It's not completely trivial, but it my guess is that ""several dozen"" isn't going to cut it really.   The answer is ""I don't know"".  And this is the answer to almost any non-linear contribution you can make to a block cipher candidate.  The entire goal of block ciphers is to create what is known as a pseudorandom permutation (PRP), which is a permutation that is based on a key and is hard to invert without the key (despite the design being public).  Strong PRPs can be built from mathematics, but in practice they are built to be super fast rather than super secure.    By changing the design of a block cipher, the onus is on you to show that the security you gain from it is worth the extra effort you put in or vice versa.  This is a very difficult question to answer, which is why modern block cipher design is as much as an art as it is a science."
crypto,38r2b9,R-EDDIT,3,Sat Jun 6 02:18:56 2015 UTC,"It's a complete rewrite of the 2009 version that was hosted at that url up until recently. Two of the new root requirements are worth mentioning:   8 Government CAs must restrict server authentication to .gov domains and may only issues other certificates to the ISO3166 country codes that the country has sovereign control over (see http://aka.ms/auditreqs section III for the definition of a “Government CA”).  9 Government CAs that also operate as commercial, non-profit, or other publicly-issuing entities must use a different root for all such certificate issuances (see http://aka.ms/auditreqs section III for the definition of a “Commercial CA”).   [Edit: note that 'Government CAs' refers to government CAs that have not undergone a commercial audit. The cited requirements do not apply to govt-operated CAs that did.]"
crypto,38r2b9,mrkoot,3,Sat Jun 6 11:33:28 2015 UTC,"There are new SubCA requirements as well, that they must be audited or constrained.  The changes address criticism and problems which have primarily been outside of the Core audited root CAs.  The process needs to be explicitly transparent, there was virtually no public notice or discussion when Microsoft added Saudi in September or TrustCor Systems in January."
crypto,38qm6a,fpvhawk,3,Sat Jun 6 00:03:07 2015 UTC,"Just emailed them to ask the obvious questions about mode, KDF and audit - I'll report back if / when I get a response."
crypto,38qm6a,bigshmoo,1 point,Sun Jun 7 23:03:57 2015 UTC,awesome
crypto,38qm6a,bigshmoo,2,Sun Jun 7 23:11:55 2015 UTC,"Dear John,  Thank you for contacting MacPaw Customer Support.  Yes, we use the CBC mode, and the used KDF function is PBKDF2.   We didn't reinvent the wheel when writing the code as we use default functions from Apple's CommonCrypto library.  Let us know if we may be of any further assistance!  Regards,  Vlad MacPaw Customer Support"
crypto,38qm6a,funkysash,1 point,Tue Jun 9 15:42:26 2015 UTC,"CBC and PBKDF2 should be ok if you consider that PBKDF2 is highly parallelizable and should therefore only be used with strong passwords.  Have you asked if they do some kind of integrity check? Maybe integrity is not the first concern here, but leaving it out of something that is going to be transmitted seems like a really bad idea.  After CRIME the whole compression thing still leaves a bad taste in my mouth. If you consider the dropbox scenario where an attacker has access to the dropbox folder, it is not unlikely that the folder will contain some unencrypted files(e.g. a template) that contribute to the file that will be encrypted. It would be easy for the attacker to abuse the  compression then."
crypto,38qm6a,bigshmoo,2,Tue Jun 9 18:04:41 2015 UTC,"I too am skeptical, what you see is all I got back."
crypto,38qm6a,funkysash,2,Thu Jun 11 02:40:39 2015 UTC,Their description and FAQ give off a very bad vibe. They give no statement about the mode of operation or the key derivation function used. The compression could be abused. IMHO they should use authenticated encryption because the files are going to be transmitted. Not mentioning any of this is usually a pretty good hint that the developers are missing basic knowledge about cryptography. This could be interpreted as a bad sign as well.  Before looking for backdoors you may want contact them to get a least some more information about what exactly they are doing. Encrypto could very well be botched in the first place.
crypto,38qm6a,kingkilr,1 point,Sun Jun 7 11:19:34 2015 UTC,"No description of which KDF they use either. All in all, I'd assume this is junk crypto."
crypto,38lnin,diafygi,3,Fri Jun 5 00:45:56 2015 UTC,All ISRG keys are currently RSA keys. We are planning to generate ECDSA keys later this year.   :/  Is there a good reason I'm not aware of to not start with ecdsa?
crypto,38lnin,xiongchiamiov,2,Fri Jun 5 16:28:41 2015 UTC,I'm guessing support in the tools they're working with right now.
crypto,38lnin,Natanael_L,2,Fri Jun 5 17:39:13 2015 UTC,How many fips 140 level 3 HSMs are out there that will generate an ecdsa? Probably a lot fewer than those that do RSA.
crypto,38lnin,R-EDDIT,1 point,Fri Jun 5 18:32:52 2015 UTC,"Ecdsa shouldn't be a problem, its eddsa/curve25519 that are new and worth waiting for a bit."
crypto,38lnin,stratha,1 point,Fri Jun 5 21:07:04 2015 UTC,"Aren't they supposed to publish the key ceremony on youtube or something (wikipedia.org/wiki/Key_Ceremony)? Where was the ""secure facility"", at NSA? Who attended? Were the people signing the keys acting of their own accord or under duress? So many questions..."
crypto,38lnin,Sostratus,1 point,Sat Jun 6 06:18:33 2015 UTC,"That might be fun but I don't think there's much security value to it. Suppose they live-streamed the whole ceremony from 100 different angles, so what? Compromise could come at any time later."
crypto,38lnin,Sostratus,1 point,Sat Jun 6 10:00:06 2015 UTC,I hope they tested their keys with Euclid's GCD algorithm. The EFF should have a good sized database with their SSL Observatory.
crypto,38lnin,SimMac,1 point,Sat Jun 6 10:01:32 2015 UTC,"Noob question: Will I be able to install this without root permission?   f I have a shared hosting webspace with SSH access, but without root, will I still be able to use this? Couldn't find anything about it yet...  EDIT: Python is running on the server."
crypto,38lnin,SimMac,3,Sat Jun 6 13:07:52 2015 UTC,"You will have to prove you own port 443 (what https uses). Port 443 is normally owned by root, so unless you have a very odd setup, you will need root permission."
crypto,38jluh,johnmountain,20,Thu Jun 4 17:34:06 2015 UTC,"That sounds nice and all, but bitlocker is ultimately a proprietary system. We can't verify if their claims are true."
crypto,38jluh,PM_ME_UR_OBSIDIAN,-5,Thu Jun 4 19:32:30 2015 UTC,"If they weren't, I assume a disgruntled ex-employee would have spilled the beans since. Microsoft is a huge company, and thousands of developers have read access to the BitLocker source code."
crypto,38jluh,TheKrumpet,6,Fri Jun 5 07:12:23 2015 UTC,"Uhhh... I don't think it works like this. You need context to write good software, you can't do it in a vacuum."
crypto,38jluh,PM_ME_UR_OBSIDIAN,1 point,Fri Jun 5 10:09:24 2015 UTC,Spoken like a true non-programmer!
crypto,38jluh,utopianfiat,1 point,Fri Jun 5 13:50:45 2015 UTC,"Oooh yeah! That's a great idea! Just go on out and talk about that thing that the NSA told you not to do, and that if you tried to do it they'd try you in secret for treason!"
crypto,38jluh,R-EDDIT,2,Fri Jun 5 14:50:40 2015 UTC,"As i posted elsewhere yesterday, XTS doesn't provide authentication either, it's just better than the alternatives. ""For the crappy job we ask it to do, XTS is probably up to the task.""  http://sockpuppet.org/blog/2014/04/30/you-dont-want-xts/  I do recommend you read Niels Fergusen's public comments on the XTS NIST standardization proposal, (linked in blog above) which explains MS's position which is both technical and patents."
crypto,38jluh,R-EDDIT,3,Fri Jun 5 22:56:11 2015 UTC,"I agree, the article is bad.  To be fair its complicated.   What's really needed is a wide block authenticated encrypting file system.   f2fs with chacha20-poly1305"
crypto,38jluh,Natanael_L,1 point,Fri Jun 5 04:40:33 2015 UTC,"Streaming crypto like ChaCha20 can't be used for multiple writes with the same key and IV due to plaintext leakage since the application of XOR would mean the key stream cancel out on the two copies of the same block. You need iterating or ratcheting IV or encryption key with protection against poor RNGs and tampering. Need to block ciphertext reversal, for example (imagine somebody swapping your SD card for a WiFi enabled one with the same ciphertext, to then rewind changes and see what happens when you re-encrypt)."
crypto,38jluh,fidelitypdx,13,Fri Jun 5 11:46:43 2015 UTC,"I took a Microsoft exam yesterday and one question and answer was so interesting that I almost blogged about it - here it is:   A customer is concerned whether Microsoft will provide access to the data she has stored on Office 365 if Microsoft is approached by any government authority requesting such access. What is the proper response?  Answer: Microsoft diverts requests for information to the customer and does not deal with information requests directly.   That can't always be true, but it's interesting none-the-less that they're positioning requests this way. I imagine this sets a precedent, even so much that a bank could encrypt your checking account information and require a 4-digit code (like your pin) to even see your balances or transactions. While it's true that anyone could easily brute force such a system, the bank could just flat refuse information on the grounds that they will not brute force it and they don't want a brute force attack run on their systems.   As to the article though:    Microsoft is well ahead of competitors like Apple in making BitLocker verify that an attacker hasn’t modified the software used to boot the computer.   Nah, I've seen that exploited on 8.0 (this was before 8.1). I don't remember the technical details of how they were doing it, but the SafeBoot system has vulnerabilities.    A Microsoft spokesperson said that Bloomberg’s reporting referred to Microsoft’s Government Security Program ... This program includes access to source code for key Microsoft products — so governments can check it for backdoors, the spokesperson told me — as well as “vulnerability and threat intelligence” from Microsoft. Microsoft says its intention is to be transparent, not to aid spy agencies in making malicious software. But it’s easy to imagine how a national government could repurpose Microsoft’s data in ways Microsoft may not have intended. And it’s worth noting that Microsoft’s transparency is only afforded to powerful national governments rather than to regular users.   Ummm, that same transparency is also afforded to Microsoft certified partners who go through the loops and NDA's to get the same information.... This particular line allegation is rather bullshit.    I asked Microsoft if the company would be able to comply with unlocking a BitLocker disk, given a legitimate legal request to do so. The spokesperson told me they could not answer that question.   AFAIK - Microsoft has not yet complied with unlocking a BitLocker disk, and probably never would - that's not the way this vulnerability would work - generally that's not the way courts work either. Does anyone have any evidence that the government or courts have approached Microsoft to do this? Plus, I imagine it would make headlines within the security world if some illicit file hoarder had their Bitlocker file system blown open by the FBI. It's generally easier to hold the person in a cage until they turn over an unencrypted version of their files."
crypto,38jluh,moosic,7,Fri Jun 5 15:53:50 2015 UTC,There are plenty of stories out there about Microsoft's court battles with the US Government over your first point. Do some googling.
crypto,38jluh,paxswill,6,Fri Jun 5 16:44:58 2015 UTC,"I imagine this sets a precedent, even so much that a bank could encrypt your checking account information and require a 4-digit code (like your pin) to even see your balances or transactions.   Lavabit did something similar, and we can see how well that worked out for them."
crypto,38jluh,matthew5025,3,Fri Jun 5 22:21:16 2015 UTC,"My guess on why MSFT won't answer the last part is this  You can store your bitlocker recovery key on onedrive, and my guess is that if the govt has a warrant and says hey I want that key, msft will provide.  Crypto speaking, its not really an exploit or backdoor, nor is it breaking bitlocker, but technically msft would still be ""assisting the govt in unlocking a bitlocker volume"""
crypto,38jluh,oskarw85,2,Thu Jun 4 21:31:00 2015 UTC,"a technique known as an “evil maid” attack. Mac OS X and Linux’s disk encryption systems are entirely vulnerable to this attack, but Windows, when running BitLocker, is not.   That's professional journalism right there. /s"
crypto,38jluh,daveime,-1,Fri Jun 5 00:14:14 2015 UTC,"Using the word ""now"" in your title would have made the whole thing much easier to parse. Are M$ the good guys or the bad guys here? Who knows.  e.g. Microsoft recently removed a Bitlocker feature that now makes physical attacks ..."
crypto,38jluh,DrCrinkleBot,-1,Fri Jun 5 03:42:15 2015 UTC,I'm dual booting 2 windows 8.1 OS's with one instance encrypted with truecrypt (system disk encryption). No issues with boot loader or anything else. I've switched to Veracrypt and wouldn't touch BitLocker
crypto,38la3a,angdev,15,Thu Jun 4 23:13:09 2015 UTC,"They don't and they shouldn't. One of the big reasons the allies were able to crack Enigma was because it was designed not to map a letter to itself - but that leaks information. If I see an ""e"", I know the original letter wasn't e. The same problem would happen with any crypto system that was designed not to encrypt text back into itself.   But the probably of it happening is so unbelievably, inconceivably low that you will never see it happen, in the same way that if you spent your whole life trying different AES keys you'd never crack it."
crypto,38la3a,velocirhymer,10,Thu Jun 4 23:49:46 2015 UTC,"Model a block cipher, say AES, as a random permutation. Pick a particular instance AES_k (AES with key k). If AES_k(x) != x for all inputs x (no plaintext is equal to the ciphertext), then AES_k is a derangement. The probability of AES_k being a derangement is 1/e. So, most of the time an AES instance will have a ciphertext that matches the plaintext.  The input x such that AES_k(x) = x is also called a fixed point. The average number of fixed points is one, so finding a plaintext that matches the ciphertext for a 128-bit block cipher is hard."
crypto,38la3a,supersaw7,2,Fri Jun 5 00:46:25 2015 UTC,"Section 3. Limit of ratio of derangement to permutation as n approaches ∞ of article  Derangement:       Using this recurrence, it can be shown that, in the limit,     This is the limit of the probability pn = dn/n! that a randomly selected permutation is a derangement. The probability converges to this limit extremely quickly as n increases, which is why dn is the nearest integer to n!/e. The above semi-log graph shows that the derangement graph lags the permutation graph by an almost constant value.     Interesting: Water-electrolyte imbalance | Grand Dérangement (band) | Deeds of Derangement   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,38la3a,autowikibot,2,Fri Jun 5 00:46:39 2015 UTC,"Thanks. For the math illiterate, can you ELI5 that for us!"
crypto,38la3a,supersaw7,3,Fri Jun 5 01:04:37 2015 UTC,"For the first part: Pick an instance of a block cipher (by instance I mean a particular choice of algorithm and key). ~63% of the time, it is possible to find a plaintext that matches the ciphertext. ~37% of the time you cannot since all plaintext-ciphertext pairs will be different.  For the second part: Plaintext = Ciphertext pairs are rare, if you count them for each block cipher instance you will find one, on average. Since there are 2128 plaintext/ciphertext pairs for a 128-bit block cipher, the probability of that occurring is very low.  tldr: probability that plaintext = ciphertext can happen is high, probability that plaintext = ciphertext happening is very low."
crypto,38la3a,luciansolaris,3,Fri Jun 5 01:50:16 2015 UTC,I liked your first explanation better.
crypto,38j8rj,johnmountain,2,Thu Jun 4 16:12:39 2015 UTC,"If NIST accepted funding to undermine encryption due to lack of funding, it would seem prudent to provide funding for creating strong encryption standards."
crypto,38hxyh,CyberSecPro,3,Thu Jun 4 09:43:01 2015 UTC,"There's already a bunch of HSMs out there, many are open source, but all kind of vary on what functions they offer. Many are expensive, some are affordable ($40).  The thing missing is a comprehensive module at a low cost. Can it be done?  Of course, the point of an HSM isn't to have secure crypto code, but to keep the private data inaccessible from outside the module itself, or offer a hardware source of entropy. There's really no difference security wise form any other new crypto project. It's going to require the same rigorous review.  I say just stick openssl in it and keep the secrets in internal memory."
crypto,38hxyh,aydiosmio,2,Thu Jun 4 20:03:15 2015 UTC,"This should also go on /r/opensource, if you ask me."
crypto,38hxyh,gameld,3,Thu Jun 4 12:25:01 2015 UTC,And /r/linux.
crypto,38hxyh,5225225,1 point,Thu Jun 4 12:39:18 2015 UTC,Feel free to repost :)
crypto,38hxyh,5225225,3,Thu Jun 4 12:43:30 2015 UTC,From the looks of it you already did.
crypto,38hxyh,Maox,1 point,Thu Jun 4 12:53:35 2015 UTC,"All for that sweet, sweet MD5 hash checksums."
crypto,38hxyh,Natanael_L,0,Thu Jun 4 15:07:48 2015 UTC,Yes I have. Thanks.
crypto,38i7uk,projectRod,3,Thu Jun 4 11:35:44 2015 UTC,Define strong crypto. Where's the documentation?
crypto,38i7uk,Natanael_L,2,Thu Jun 4 13:23:39 2015 UTC,"Define strong crypto. Where's the documentation   After skimming through the code quickly, for private messages:   Each user creates a 1024 bit RSA key a 20 byte random secret, [a-z1-9]{20}, is hashed with SHA3 multiple times using a constant salt secret is encrypted with other users' public keys chat session is encrypted with AES-GCM using the hashed secret as a key and a 12 byte IV ciphertext, iv, encrypted secret is sent   The group chat seems to be encrypted using AES-GCM where the key is the chatroom name combined with a hash of the chosen password. Not sure about the keylength."
crypto,38i7uk,yolotroll,7,Thu Jun 4 14:02:22 2015 UTC,"Not total crap, at least. But no modern key exchange, and only 1024 bit RSA?"
crypto,38i7uk,Natanael_L,1 point,Thu Jun 4 14:34:28 2015 UTC,"There is key exchange when adding a contact to Your list or contacting a person by their URL. There is no key exchange in simple chat, because we want to have one URL that everyone can share.  We started with 1024 bit RSA, to make the generation of the keys faster. We are considering making the keys stronger."
crypto,38i7uk,danukeru,3,Fri Jun 5 11:25:12 2015 UTC,What about replay protection?
crypto,38i7uk,Natanael_L,1 point,Fri Jun 5 17:30:55 2015 UTC,And forward secrecy and technical defenses like against XSS
crypto,38i7uk,valoov,1 point,Fri Jun 5 22:23:00 2015 UTC,"There is no perfect forward secrecy built in, but user can always delete messages and create new chatrooms, which covers the case.  In the first view the site looks XSS proof. But there are some complex places like sandboxed Javascript apps which may open new interesting hacking opportunities :)  Did you find something?"
crypto,38i7uk,Natanael_L,1 point,Mon Jun 8 12:28:39 2015 UTC,I'm not an expert at programming or low level cryptography. I wouldn't necessarily find much besides poor algorithm choices and mistakes in logic if I looked at it myself.
crypto,38i7uk,valoov,1 point,Mon Jun 8 13:52:52 2015 UTC,Replay attack is excluded by TLS.
crypto,38i7uk,danukeru,1 point,Mon Jun 8 12:18:22 2015 UTC,Doesn't mean you can't replay attacks as MITM. TLS doesn't protect them from you.  Rookie mistake.
crypto,38i7uk,valoov,1 point,Mon Jun 8 21:16:08 2015 UTC,"In TLS the client and the server each provide part of a random data used to generate the keys for the connection. Also, each record is protected with MAC (Message Authentication Code). So it's not possible to send the same data again (replay attack) without breaking the TLS.  Yes, a server manager can do that as MITM, but that's not a real thread (because server manager can anyway delete messages etc). If this comes a problem it's easy to add each message a hash of a previous one and validate that at client side."
crypto,38i7uk,danukeru,1 point,Fri Jun 12 09:04:37 2015 UTC,"I know how TLS works.  I don't trust you. Nobody should just ""trust you"".  What happens if your server is compromised without you even knowing it?  Don't defend a bad architecture. You either know what you're doing, or you learn. Suck it up."
crypto,38i7uk,P-e-t-a-r,2,Sat Jun 13 03:40:30 2015 UTC,"Yeah, we lack the documentation at the moment. But thanks for quick code review!  We upgrade the crypto algorithms in few days -- do You have any suggestions for improvement?"
crypto,38i7uk,P-e-t-a-r,2,Fri Jun 5 11:19:19 2015 UTC,maybe stronger crypto [non NIST Eliptiic Curve].
crypto,38i7uk,silverforest,1 point,Thu Jun 4 15:44:41 2015 UTC,Do You have any concrete algorithm in mind?
crypto,38i7uk,autowikibot,1 point,Fri Jun 5 10:11:11 2015 UTC,If we ale talking about ECC curves select one [non NIST] from list you can get by typing this in terminal:       openssl ecparam -list_curves
crypto,38i7uk,valoov,2,Fri Jun 5 13:55:58 2015 UTC,"Great.  Comments:   Trivial to MITM: This is an inherent problem with web-based services. Hey I control all of the code the user is running and he has to redownload it every time, I just made a user run a broken client whoopsie.  SHA-3 password streching: 21 iterations is far too low. 1024-bit RSA: Bit weak and unnecessarily slow especially with modern faster and more secure alternatives.   Really I don't know what to say other than web-based things can always pull the rug under you and I would never use them."
crypto,38i7uk,Natanael_L,1 point,Sat Jun 6 22:57:30 2015 UTC,"Man-in-the-middle attack:       In cryptography and computer security, a man-in-the-middle attack (often abbreviated to MITM, MitM, MIM, MiM or MITMA) is an attack where the attacker secretly relays and possibly alters the communication between two parties who believe they are directly communicating with each other. One example is active eavesdropping, in which the attacker makes independent connections with the victims and relays messages between them to make them believe they are talking directly to each other over a private connection, when in fact the entire conversation is controlled by the attacker. The attacker must be able to intercept all relevant messages passing between the two victims and inject new ones. This is straightforward in many circumstances; for example, an attacker within reception range of an unencrypted Wi-Fi wireless access point, can insert himself as a man-in-the-middle.     Image i     Interesting: Bucket brigade | Eavesdropping | ZRTP   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,38i7uk,silverforest,1 point,Sat Jun 6 22:57:50 2015 UTC,Trivial to MITM   Is it really so trivial to hack into a modern Linux system? Or how do you manage to make the user run a broken client?   SHA-3 password streching: 21 iterations is far too low.   With long enough key even 1 iteration would be unbreakable.   1024-bit RSA   What alternatives do you suggest?   web-based things can always pull the rug under you   Use a local (and reviewed) copy! :)
crypto,38i7uk,P-e-t-a-r,1 point,Mon Jun 8 12:41:37 2015 UTC,Nothing less than 2048 bit RSA or 256 bit ECC with a strong curve
crypto,38i7uk,P-e-t-a-r,1 point,Mon Jun 8 14:09:42 2015 UTC,"Is it really so trivial to hack into a modern Linux system? Or how do you manage to make the user run a broken client?   Hacking not required. Here are a small number of possibilities:   Script injection ala the Chinese Cannon. A nation state coerces the service provider or requests the service provider's cooperation to MITM. (A service should protect against the provider's ability to interfere with their own system.) Subverting DNS by an ISP or nation state, redirecting users to their own servers. (Whether it be by hijacking, cache poisoning or other pharming method.)    Use a local (and reviewed) copy! :)   Then please require this.   With long enough key even 1 iteration would be unbreakable.   That's a non sequitur. The whole point of stretching is because users are terrible at picking keyphrases.   1024-bit RSA   Minimum 2048-bit RSA (which has <112 bits of security at present), or consider 256-bit ECC on a strong prime curve."
crypto,38fnmo,HighCode,9,Wed Jun 3 22:13:38 2015 UTC,"Cryptol was originally designed for expressing the kinds of cryptographic algorithms that can be efficiently implemented in hardware circuits. Cryptol is best suited to implementing core cryptographic routines rather than entire cryptographic protocol suites such as SSL. We have ideas of how to address these limitations, and look forward to working with the community on them. Even with these limitations, Cryptol’s current capabilities have the potential to improve the trustworthiness of many critical cryptographic implementations.   What this paragraph says to me is Cryptol in no way replaces or competes with Proverif, Cryptoverif or CPSA.  It doesn't model attackers, multiple parties, or have an inherent notion of security.  These can all be viewed as limitations, but I'd call them more an issue of scope.  C++ doesn't model attackers either...  As for actual limitations, something Cryptol can't do that you might hope or desire given a programming task, we can make a list:   Mixed quantifiers (for types and proofs) Higher rank types ADTs Basically any Glasgow Haskell extension Back-ends Proofs over polymorphic types Compositional proofs (SAW is coming, and it will provide this) Dependent types   If there is another Cryptol I would hope it would be both Cryptol and Proverif - allowing us to examine and design algorithms as well as protocols.  Some general purpose work, such as F7 and Liquid Haskell, gets pretty far but I expect a solid design and engineering effort would really help the public take advantage of the underlying developments."
crypto,38fnmo,tom-md,-3,Thu Jun 4 03:23:25 2015 UTC,You mean other than being heavily influenced by the NSA?
crypto,38cigd,CyberSecPro,14,Wed Jun 3 09:37:57 2015 UTC,"uh, maybe they should start with timely OS patching and better data protection/segmentation on mobile"
crypto,38cigd,Jethro_Tell,3,Wed Jun 3 15:08:41 2015 UTC,"And allowing key verification in iMessage if they want to be believed when they say ""we can't read your messages""."
crypto,38cigd,Natanael_L,1 point,Wed Jun 3 18:50:36 2015 UTC,"Is this possible? How would it work?  In the end, if you're using their hardware, you kind of have to trust them, no?"
crypto,38cigd,anfedorov,1 point,Wed Jun 3 19:39:49 2015 UTC,Like in textsecure. Showing the keys.
crypto,38cigd,Natanael_L,1 point,Wed Jun 3 20:31:33 2015 UTC,"I presume you mean showing key fingerprints, not the whole key. Also, remember that there are multiple keys for multiple devices. Could you explain how TextSecure handles the UX there? Let's say I meet someone at a party and want to talk to them securely afterwards. We both have 2-3 devices (phone, laptop, maybe tablet). What steps do we need to take?  Aside from the UX trouble, if I'm already trusting Apple hardware / software already, trusting them to authenticate users and exchange keys securely doesn't seem like a significant increase in possible attack vectors. What am I missing?"
crypto,38cigd,anfedorov,1 point,Wed Jun 3 23:57:54 2015 UTC,"You can do account master keys with device subkeys. And much more.  You're not just trusting them now. You're trusting them and all their security measures for as long as they hold ANY sensitive data. Typically years. Or decades. Single point of failure, with many potential weak points. Why trust them at all when you don't have to?"
crypto,38cigd,Natanael_L,1 point,Thu Jun 4 00:12:03 2015 UTC,"You can do account master keys with device subkeys. And much more.   Can you be more specific? Where are the account master keys stored? How are they exchanged? How would you handle lost or stolen devices? Stop arguing and try to think all the way through what it actually takes to operate in the environment that Apple does. Mass market end-to-end encryption is not a problem easily solved, and Apple, unlike most of its competitors, is actively pushing the market towards figuring out a solution. iMessage is not perfect, but the tradeoffs it makes are a heck of a lot further in the right direction than Facebook Messenger or Google Hangouts, IMO.   You're trusting them and all their security measures for as long as they hold ANY sensitive data. Typically years. Or decades.   Unless you're personally inspecting the supply chain of your hardware and reviewing the code to all the software you run (and ditto for all the hardware and software in the servers you trust with your info), you have to trust someone else to do that for you. I think it's quite reasonable to trust Apple with those tasks, as they have the most to lose by fucking them up. Google, as well."
crypto,38cigd,anfedorov,1 point,Thu Jun 4 10:20:22 2015 UTC,My personal preference for key management is a hardware token like Yubikey NEO holding a long term key which you sign device subkeys with. With backups of course.   I simply don't trust Apple at all.
crypto,38cigd,Natanael_L,1 point,Thu Jun 4 10:41:08 2015 UTC,"Oh, neat, like this? I didn't know Yubikey NEO could run Java / do PGP. Most interesting. How would you handle losing your Yubikey NEO, and how do you handle device security?  Are you sure you don't trust Apple, and are you sure that distrust is rational? Do you find convincing the argument that people who have a strong rational motivation to create secure devices will do so?  And why do you trust Yubikey? Their security record isn't perfect even on a relatively simple product (compared to, e.g., the iPhone)."
crypto,38cigd,anfedorov,1 point,Thu Jun 4 18:13:04 2015 UTC,"Backups. Configure a new token with the same key, or pick the second pre-configured one out of a safe. Use it with a PIN and treat it like your bank authenticator token.   Goto Fail, very slow response to that Java Trojan a while ago, slow patching, saying they can't read iMessage when they control the PKI and don't allow users to verify keys, and much more. I believe they are more interested in appearance than actual security.   I don't trust Yubico unconditionally. But I trust them more than Apple."
crypto,38cigd,Natanael_L,1 point,Thu Jun 4 19:19:26 2015 UTC,better data protection/segmentation on mobile   Could you clarify that? I think this whitepaper does a good job summarizing iOS data segmentation on pages 9 to 15. How would you suggest it be improved?
crypto,38cigd,anfedorov,4,Wed Jun 3 19:42:01 2015 UTC,"I would suggest that 'oversights' like leaving the full plain text of your GPS log on the phone, allowing unlimited, un-ratelimited password attempts on their cloud storage, un-encrypted backups on the storage server, wifi bugs that power the phone off, an open debug bridge with a default password, very long lead times on patches, are a better indication of a companies stance on security than marketing or ideological rhetoric.  I don't doubt that they believe the things Tim said in the speech, but it's an actions speak louder than words sort of thing."
crypto,38cigd,Jethro_Tell,1 point,Wed Jun 3 20:34:54 2015 UTC,"OK, we can talk about that, although it's not the point I asked about.  With the market pressure that Apple is under to implement tangible features in a device as complicated as the modern smartphone, trade-offs are going to be made that won't please everyone.  There was never a GPS log anywhere that I'm aware of. If you're referring to caching cell and wifi locations, it seems to me like an honest mistake that a competent engineering team could make, one that was fixed years ago.  iCloud password rate limiting was embarrassing and definitely more on the noob-y side, but again, an honest mistake and quickly fixed.  Could you link what you mean by unencrypted backups, wifi bugs, and open debug bridge with a default password? I wasn't able to find much via Google."
crypto,38cigd,anfedorov,7,Thu Jun 4 00:14:36 2015 UTC,"Well, security has always been a marketing point of apple devices for the public crowd, why not excersize the same argument over and over, public crowd hadn't heard anything of goto fail anyway :)"
crypto,38cigd,aintsaint,4,Wed Jun 3 16:54:19 2015 UTC,"For a company who did nothing to protect iOS for a long time, have state their customers don't care about security, he just goes and gets an award for it?"
crypto,38cigd,newfor2015,5,Wed Jun 3 15:39:59 2015 UTC,did nothing to protect iOS for a long time   Aren't they the ones who decided to deploy default full device encryption and the FBI got mad at them?
crypto,38cigd,slyf,6,Wed Jun 3 17:02:01 2015 UTC,"When did they start doing that, 2013-14?  In other words, they reacted only after they have achieved a level of success in the consumer market. Within the last few years, they've improved quite a bit and are taking privacy more seriously, but why now?  For two reasons: 1) In order to sustain the same growth rate, they have to look at enterprises, and that forces them to bump security up their priority list. 2) Furthermore, they feel threatened by Google's android, so they highlight privacy as a selling point and they are right. Tim Cooks' point is that because of a fundamental difference in the business model between the two companies, Apple can protect user privacy much more than Google can. It is indeed one of the true differentiator between android and iOS devices.  But if you look history, their track record had been abysmal. They shunned standardized crypto and refuse to participate in standard bodies where industry wide issues are analyzed, discussed and debated. Because of that, they did not follow security best practices, and opted for obscuration and proprietary trade secrets to keep the devices secure when we know that's just not good enough. Even now, their security whitepaper lists that they published in April/May timeframe shows that they're still using a mish-mash of crypt algorithms, some of which have been deprecated and trivial to break (eg, MD5, DES)  They had mocked the Blackberries exactly because they claim security is not important. Or, they would say something like our devices are secure, just trust us while providing little evidence that we should trust them.   Unwittingly, the general consumer just ate up that marketing message and pretend it's the gospel at the time.   I appreciate the change of strategy and the genuine attempt to improve the security in their products. I like the path they're going down, but they need to be more upfront about their history and not gloss over it."
crypto,38cigd,newfor2015,2,Wed Jun 3 17:36:50 2015 UTC,"their security whitepaper lists that they published in April/May timeframe shows that they're still using a mish-mash of crypt algorithms, some of which have been deprecated and trivial to break (eg, MD5, DES)   Source? The only reference I see in this paper are in the encryption types supported by the Kerberos implementation, as recommended by Kerberos v5 interop. Are you saying Kerberos is ""trivial to break""?"
crypto,38cigd,anfedorov,1 point,Wed Jun 3 19:49:47 2015 UTC,Tim Cook is such a goofball but he says the darndest things <3
crypto,38c1ny,FlashingBulbs,9,Wed Jun 3 06:32:35 2015 UTC,"Wow, what is that professor a professor of, national security? He acted like a fool."
crypto,38c1ny,Diasparo,5,Wed Jun 3 08:52:51 2015 UTC,"""I'm not an IT expert but... """
crypto,38c1ny,Bbrhuft,5,Wed Jun 3 15:51:56 2015 UTC,People need to hear this and see just how out of touch the UK politicians are. Truly ludicrous
crypto,38c1ny,HighLifes,0,Wed Jun 3 13:52:33 2015 UTC,Anthony Glees isn't a politician. He's a professor at Buckingham.
crypto,38c1ny,funk_monk,1 point,Wed Jun 3 21:20:49 2015 UTC,"yes I know, but my point is he is working for the politicians. Its too obvious he has a agenda because he doesnt accept any of the facts of what cryptography is or how the internet relies on it. He is a governmental tool and comes across as one too."
crypto,38c1ny,HighLifes,1 point,Thu Jun 4 00:33:34 2015 UTC,He is a governmental tool and comes across as one too.   Alternatively he could just be a standard right wing idiot. Of course he has an agenda. Everyone has an agenda (their own view point). That doesn't automatically make him a shill.  I'm not defending him because I agree with what he's saying. I just think it's a rash conclusion to assume that any idiot with an agenda is in some way corrupt.  He's pretty old. Old enough that the intelligence community he first interacted with were working on old principles and he doesn't realise that. It's almost like looking at a time machine back into the second war.
crypto,38c1ny,funk_monk,3,Thu Jun 4 08:25:30 2015 UTC,christ Theresa May makes my blood boil
crypto,388zmf,balkierode,20,Tue Jun 2 18:04:49 2015 UTC,inb4 people post their private key on facebook by accident
crypto,388zmf,DoWhile,3,Tue Jun 2 21:13:24 2015 UTC,"While you get warning for posting invalid public key, Burp Suite shows the check is done server side."
crypto,388zmf,maqp,11,Wed Jun 3 12:48:34 2015 UTC,This is really cool. This is something I've always wished banks would do so they could email me my actual statement rather than just a notice that I can read the statement on their website. It's really surprising that facebook of all places pushing this.
crypto,388zmf,taidg,3,Wed Jun 3 00:10:01 2015 UTC,Absolutely! I think this is a great step forward and hopefully other companies will follow suit.
crypto,388zmf,h2opologod94,2,Wed Jun 3 00:46:27 2015 UTC,"Facebook keeps surprising me. First the onion address, now pgp."
crypto,388zmf,jus341,21,Wed Jun 3 17:55:19 2015 UTC,I only use the finest Kryptonite U-Locks to secure my cardboard boxes.
crypto,388zmf,RZZRGRRL,7,Tue Jun 2 21:08:29 2015 UTC,Protection from anticipatory obstruction of justice?
crypto,388zmf,flarkis,6,Tue Jun 2 21:18:51 2015 UTC,"anticipatory obstruction of justice   That's a thing, wow.  After a point you're not even mad anymore, you're just incredulous."
crypto,388zmf,RZZRGRRL,7,Tue Jun 2 21:23:53 2015 UTC,"I remember seeing a good yet terrifying talk by the EFF, I think, on the subject  EDIT: link"
crypto,388zmf,flarkis,1 point,Tue Jun 2 21:32:41 2015 UTC,Link? I'm not sure what I'm looking at here.
crypto,388zmf,phyzome,4,Tue Jun 2 23:56:55 2015 UTC,I edited my original post with a link.  In simple terms though the argument as it applies to us (crypto) is that if you are not encrypting everything then it can be argued that what you have encrypted is probably illegal because you haven't set a precedent for encrypting things that are mundane. That's a bit of an oversimplification though.
crypto,388zmf,flarkis,1 point,Wed Jun 3 00:03:52 2015 UTC,"Hmm, interesting. Thanks!"
crypto,388zmf,phyzome,0,Wed Jun 3 00:16:21 2015 UTC,RemindMe! 9 hours
crypto,388zmf,MarrusQ,0,Wed Jun 3 07:23:35 2015 UTC,Messaging you on 2015-06-03 16:23:38 UTC to remind you of this comment.  CLICK THIS LINK to send a PM to also be reminded and to reduce spam.    [FAQs] | [Custom Reminder] | [Feedback] | [Code]
crypto,388zmf,RemindMeBot,5,Wed Jun 3 07:23:43 2015 UTC,"This is neat, if only because maybe it will set an example for other sites.  If we're going to use end-to-end encryption everywhere, all these sites will have to opt-in to it, so this is a start."
crypto,388zmf,phyzome,-4,Wed Jun 3 00:31:33 2015 UTC,There's nothing like the sight of a rancher looking wistfully at his horses running away in the distance while he bolts the gate shut. This is all a day late and a buck short.
crypto,388zmf,zekenyeshallfind,-5,Wed Jun 3 06:08:05 2015 UTC,must of been cracked then if NSA coughFacebook are implementing it under the guise of pseudo security.
crypto,3882kj,ctz99,2,Tue Jun 2 14:55:05 2015 UTC,"Norx is a promising competitor in the CAESAR competition.  It will be interesting to see how that competition develops, especially since it's several months behind schedule for the second round announcement."
crypto,3899jq,motionthings,3,Tue Jun 2 18:57:53 2015 UTC,"The ECC RAM (e.g. used in high-end servers) is cleared by the BIOS on startup:   ECC memory must be set to a known state to avoid spurious errors if memory is read without being initialized [], and we believe many ECC-capable systems perform this wiping operation whether or not ECC memory is installed.  ECC DRAMs are not immune to retention effects, and an attacker could transfer them to a non-ECC machine that does not wipe its memory on boot. Indeed, ECC memory could turn out to help the attacker by making DRAM more resistant to bit errors.   You can still yank out the chips before the BIOS can get at them."
crypto,3899jq,JoseJimeniz,2,Tue Jun 2 22:48:28 2015 UTC,There is some research (see On the Practicability of Cold Boot Attacks) and other internet commentary which suggests that DDR3 RAM is not vulnerable to cold boot attacks.  But not sure about whether ECC RAM is susceptible to cold boot attacks.
crypto,3899jq,CipherBit,1 point,Thu Jun 4 20:17:36 2015 UTC,"DDR3 SDRAM:       In computing, DDR3 SDRAM, an abbreviation for double data rate type three synchronous dynamic random-access memory, is a modern type of dynamic random-access memory (DRAM) with a high bandwidth (""double data rate"") interface, and has been in use since 2007. It is the higher-speed successor to DDR and DDR2 and predecessor to DDR4 synchronous dynamic random-access memory (SDRAM) chips. DDR3 SDRAM is neither forward nor backward compatible with any earlier type of random-access memory (RAM) because of different signaling voltages, timings, and other factors.    Image from article i     Interesting: Socket C32 | GDDR3 | Mac Mini | Comparison of Sony Vaio laptops   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,384y5p,BlackTeaLeaves,12,Mon Jun 1 21:58:08 2015 UTC,"Great tutorial! The only thing I would take issue with (and I'm being picky: I think he did this for convenience) is composing the draft in your email client before signing/encrypting it. Most email clients will auto-save drafts of your email while you're working on it, and those drafts often get saved to the mail server (so you can pick up where you left off later from another computer if needs be). That means while you're writing it, your email that's sensitive enough to need encryption is being pushed up to your provider in the clear. Yes, drafts are deleted from the server (you hope!), but not until after the mail's sent. If it's genuinely sensitive (and not just being encrypted because encrypting everything is a good idea), compose it in a standalone text editor first, sign/encrypt it, and then drop the message into your email client when it's fully baked and ready to send."
crypto,384y5p,castillar,4,Tue Jun 2 00:04:49 2015 UTC,"This is the key point that makes this tutorial worthless. It's great learning to install and set up shortcuts, but once you start advising users to hand over their plaintext to their email provider, you might as well just have them check if their email providers secures server to server communications.  Also, love the quote:   Conversely, some PGP n00bs want to know why I don't recommend using a PGP plugin for their email client    Because it's secure? Because gmail won't get your plaintext?"
crypto,384y5p,sboesen,3,Tue Jun 2 12:07:39 2015 UTC,"Absolutely, although I don't know if I'd declare it completely worthless. Even if their practices aren't perfect, I'd rather more people starting signing and encrypting emails to make the practice of it more common and accepted. That will help spur the development and support of it in more clients, and make those of us that do use it correctly much less of an edge case. Doing it imperfectly might lend a false sense of security, but at least it would get the ball rolling."
crypto,384y5p,castillar,4,Tue Jun 2 13:28:38 2015 UTC,"I suppose it depends on your use case, but for any long term security of messages you plan to send, a false sense of security is harmful. This article advocates for a setup that's inherently vulnerable while discouraging people from adopting a secure setup. It also makes the claim that it's ""The best PGP tutorial for Mac OS X ever"".   I've seen other articles that suggest this in the past, and sometimes they go one step further and recommend ""turning off gmail's draft saving feature"". This still results in all the problems of webmail crypto, which without some serious thought isn't a long term solution.  Maybe things like this will get the ball rolling, but I'm skeptical. There are other reasons Why Johnny Can't Encrypt."
crypto,384y5p,sboesen,1 point,Tue Jun 2 13:57:19 2015 UTC,"Or you know, just use mail.app/thundermail that integrate pgp suite automatically"
crypto,384y5p,poopinspace,-1,Tue Jun 2 02:58:42 2015 UTC,Funny how people spend lots of money on proprietary apps and then they try to patch their insecurities and privacy flaws with free software.
crypto,382hln,CyberSecPro,6,Mon Jun 1 11:25:11 2015 UTC,"The main function of the device is to encrypt communications and provide an additional authentication method, making your password a secondary authentication step, thus making your device much more secure –in fact, once set up, you will no longer need to use passwords, claims Google.   Not sure if they are referencing a per-application password, device password, admin/root password. Regardless I'm still using a password at some point in the process. Card readers/nfc, biometrics, etc. (something you have) will never replace the need for 'something you know' to ensure information security.   That aside I think it's a wonderful step in the right direction to encrypt everything, especially all communications, at the device level."
crypto,382hln,latherus,0,Mon Jun 1 16:29:37 2015 UTC,"Yes. But, what protections are there in the US that would not diminish the devices capacity to remain secure? I feel there are none. Can the badge toter go to google and say, ""make it so that I can access these devices through wireless"" or ""through device drivers"" making the device exploitable by just about anyone.  I have no real reason to doubt Google's intentions to protect the integrity of communications, but it is my feeling they can not protect themselves from such actions as there are no processes in place for them to do so. Maybe for that reason they have no place in creating such devices."
crypto,382hln,rflownn,4,Mon Jun 1 23:53:50 2015 UTC,"Just to be clear, this is essentially an HSM.  Is it my understanding that it will fit the MicroSD formfactor exactly? Also, will there be an expectation of authentication to the HSM before it will start willy-nilly encrypting/decrypting/authenticating on your behalf?"
crypto,382hln,cunttard,0,Tue Jun 2 00:43:05 2015 UTC,"Fucking great, another level of abstraction that can be rooted and has autonomous, clandestine communications ability."
crypto,382hln,na85,4,Mon Jun 1 21:48:30 2015 UTC,Yep. U shud stick with your pencils and yellow pads homie.
crypto,37z80n,ret2libc,2,Sun May 31 17:31:28 2015 UTC,"Yep, DPA resistance is hard to achieve.  The Boyar and Peralta paper is a good starting place, though, since it's optimized not just for depth but also to minimize the number of AND gates.  AND gates are nonlinear and therefore hard to mask."
crypto,37z80n,bitwiseshiftleft,1 point,Sun May 31 21:42:33 2015 UTC,"Considering the device will (presumably) only have the encryption keys loaded when the user is doing stuff, it’s a pretty small risk. An attacker would have to monitor the power while you are using the device to deduce your keys   Or they just monitor the power from the point the chip is plugged in. If this is supposed to be like a secure carry around, attack points will be numerous."
crypto,37ujk3,Vincenttb,5,Sat May 30 14:48:17 2015 UTC,"In general, no. If there's a MITM attacker or someone with access to Microsoft's servers to alter the ISO then they can also alter the hash. In practice this is rather unlikely.   The reason people provide such hashes is to ensure accidental errors in downloads can be caught. Digital signatures are the way to ensure that things haven't been altered maliciously."
crypto,37ujk3,SAI_Peregrinus,2,Sat May 30 15:52:33 2015 UTC,"If the MSDN webpage is HTTPS, it is likely, but not certain, that the data has not been tampered with."
crypto,37ujk3,conradsymes,2,Tue Jun 2 16:31:13 2015 UTC,"Correct, but then you have the same likelihood that the file hasn't been tampered with, not just that the hash hasn't been altered.   A hash isn't a MAC, it only verifies integrity not authenticity."
crypto,37ujk3,SAI_Peregrinus,3,Tue Jun 2 16:47:22 2015 UTC,"Given that there's no practical collision or preimage attacks on unmodified SHA1 yet, yes. But how did you verify that you got the right hash?"
crypto,37ujk3,Natanael_L,2,Sat May 30 15:05:37 2015 UTC,I put the ISO through Cyohash and compared the hash value to the one mentioned on MSDN.
crypto,37ujk3,ArthurOnCode,1 point,Sat May 30 15:07:25 2015 UTC,Then you're good.
crypto,37ujk3,mrkoot,2,Sat May 30 15:19:07 2015 UTC,"You could feed the file to libdetectcoll v1.0 (+ Reddit thread), which applies differential path analysis to look for indicators of a collision attack. This is now being used by CAcert and Microsoft, among others, in the context of verifying X.509 certificates."
crypto,37rb6b,johnmountain,2,Fri May 29 19:35:36 2015 UTC,BTW here is a USB alternative http://www.inversepath.com/usbarmory.html
crypto,37rb6b,agent_x_,1 point,Mon Jun 1 13:49:30 2015 UTC,"I actually have a USB armory. I had the idea for an opensource HSM (probably not in line with the vision of Google Vault1). But I'm thinking of porting ProjectVault to USB armory, ditching the FPGA and uses the onboard ARM processor.  1: Let's be clear, Google Vault is designed with Android in mind. I wanted to be OS agnostic."
crypto,37rb6b,cunttard,1 point,Wed Jun 3 05:33:11 2015 UTC,"Neat, but couldn't it have an API that's easier to secure? I'm assuming not all operating systems will give all userspace applications MITM protected read/write access from other applications."
crypto,37rb6b,Natanael_L,4,Fri May 29 19:58:53 2015 UTC,"Since it's just communicating by file I/O, there's nothing preventing applications from using SSL/TLS or any other asymmetric cryptography instead of writing data in cleartext."
crypto,37rb6b,terremoto,1 point,Sat May 30 04:40:31 2015 UTC,With self signed cert? Or certificate pinning locally against the card? How would you do that reasonably and not lose performance?
crypto,37rb6b,Natanael_L,4,Mon Jun 1 23:26:35 2015 UTC,"sooooooo, then why is google pushing for the removal of sd cards from phones?"
crypto,37rb6b,KaptainKraken,6,Sat May 30 04:04:23 2015 UTC,"Local storage encourages local content, and discourages cloud services such as Google Music, Drive, etc.   Unfortunately, outside the USA, many countries don't have these cloud (content) services available due to licensing restrictions. The cost of cloud services in terms of mobile data also makes some cloud services prohibitive. That's why in Asia, devices with microsd are in heavy demand. You can take your content with you as you go."
crypto,37rb6b,qftvfu,2,Sat May 30 12:17:20 2015 UTC,"I'm sure that has played a big reason, but I think another one was security. SD cards aren't very secure in general. And you also couldn't (really) use them to store apps before, and many OEMs tended to add like 512-2GB of internal storage in their phones in the earlier years, and then add a microSD slot and tell you that you have ""up to 32GB of extra storage"". Maybe Google was trying to promote bigger amounts of internal storage over the microSD slot cop-out from some OEMs.  Either way, I think they mentioned that for Android M you can ""adopt"" SD cards as internal storage (probably in a secure way), so we might see Google advocate the use of SD cards again. Who knows, the next Nexus devices might even feature SD card slots."
crypto,37rb6b,KaptainKraken,1 point,Sat May 30 13:57:15 2015 UTC,Well most newer devices are sd card free so they won't be able to implement it on any of thoses. And we both know the mobile market is not only huge but in dire need of security.
crypto,37rb6b,wildlight,1 point,Sat May 30 12:58:02 2015 UTC,So only smart watches have this and you have to buy both.
crypto,37rb6b,kavb,1 point,Sat May 30 04:57:37 2015 UTC,Talk here:  https://www.youtube.com/watch?v=mpbWQbkl8_g&feature=youtu.be&t=2851
crypto,37rb6b,squashed_fly_biscuit,0,Sat May 30 05:10:53 2015 UTC,"Ahh, this looks great.  Although, haven't had the best luck with ARM... it hates a lot of things, like Java in a browser (don't laugh at me, I know this is the crypto sub)."
crypto,37rb6b,meantofrogs,1 point,Fri May 29 20:49:13 2015 UTC,You're funny
crypto,37tdbr,ParanoiaNervosa,3,Sat May 30 06:01:05 2015 UTC,"Ahh, Bitcoin.  The only currency backed by real comedy gold."
crypto,37tdbr,ThisIsADogHello,3,Sat May 30 07:51:38 2015 UTC,"Don't rely on software OS random number generators   But do rely on OS random number generators.  From LibreSSL:   Entropy will be the responsibility of the operating system. If your operating system can't provide you with a good source of entropy we will not fake it.   You can certainly try to re-implement your operating system's RNG. You have access to everything the OS does, e.g.:   The current process ID (GetCurrentProcessID). The current thread ID (GetCurrentThreadID). The tick count since boot time (GetTickCount). The current time (GetLocalTime). Various high-precision performance counters (QueryPerformanceCounter). An MD4 hash of the user's environment block, which includes username, computer name, and search path. [...] High-precision internal CPU counters, such as RDTSC, RDMSR, RDPMC   Although keep in mind that most process handles are <5000, and multiples of 4. That works out to about 11 bits of entropy. A similar reality happens for thread handles.   GetCurrentProcessID: 11 bits GetCurrentThreadID: 13 bits GetTickCount (32-bit, 16 ms): 28 bits   So you can maybe do an almost as good job as the implementation provided by experts. But i know enough not to try."
crypto,37rz62,atoponce,2,Fri May 29 22:25:46 2015 UTC,That title tells me absolutely nothing. The picture neither. Please provide context so that laymen can understand the purpose of the post.
crypto,37rz62,betamos,7,Fri May 29 23:35:47 2015 UTC,"The face is Dan J. Bernstein. He created the ChaCha20 stream cipher and the Poly1305 MAC. He is also the author of ""safe curves"", which include his own ed25519 public key signing algorithm.  All of the primitives exist in OpenBSD's LibreSSL (the fork of OpenSSL), BoringSSL (Google's fork of the same), as well as modern versions of OpenSSH.  Many programming libraries in C, Python, and many others are also including these primitives. There is a good movement to replace the ""standards"" of AES, RSA, RC4, and the SHA family of algorithms with those from D. J. Bernstein.  So, long story short, the image in making light of DJB becoming our crypto savior."
crypto,37rz62,betamos,1 point,Fri May 29 23:56:05 2015 UTC,"Thank you. Why would one replace the conventional algorithms though? I know there are some vulnerabilities in the previous NIST suggestions (by NSA) but that doesn't mean all conventional cryptography is compromised. Are you personally proposing this as an interesting alternative or as a direct replacement, and if so why?"
crypto,37rz62,dchestnykh,8,Sat May 30 00:06:44 2015 UTC,"This particular combination is proposed here: https://mailarchive.ietf.org/arch/search/?email_list=tls&gbt=1&index=293yIgm-FHlPVyVuJxXkQvfPFx4  ChaCha20+Poly1305 is already running in Chrome and Android: http://googleonlinesecurity.blogspot.com/2014/04/speeding-up-and-strengthening-https.html  ChaCha20+Poly1305 is simpler and faster in software than AES-GCM, another TLS AEAD algorithm, standardized by NIST, and avoids many side-channel attacks. More here: https://www.imperialviolet.org/2013/10/07/chacha20.html  Curve25519 is an elliptic curve for ECDHE and (in a different representation) EdDSA. You can read here why it's better than NIST curves: http://safecurves.cr.yp.to/  EdDSA is an alternative to ECDSA, which is safer, because it's deterministic and doesn't require a random number generator (for signing and verifying). You can read why this is important here: http://blog.cr.yp.to/20140323-ecdsa.html"
crypto,37rz62,TweetPoster,2,Sat May 30 08:44:25 2015 UTC,I'm not proposing anything. I just find the tweet hilarious.
crypto,37pvac,johnmountain,53,Fri May 29 13:35:13 2015 UTC,You can set FLAG_SECURE on the app task to not allow any assistants (Google Now) using the Assist API to access the contents.   http://developer.android.com/preview/api-overview.html#assist  So make sure to do that as the app developer (which also disables screenshots and previews in the app switcher) in your apps. An xposed module could likely enforce FLAG_SECURE on apps of your choice given that it can also disable it if you so wish.
crypto,37pvac,Natanael_L,0,Fri May 29 14:23:46 2015 UTC,"Still scary that it's essentially opt-out. How many Android developers will know to use that? How many users will be aware that the apps they are using don't have that flag enabled?  The developers actually have to be pro-actively aware of the assist API even though their app might have nothing to do with it otherwise, and then know to set that flag."
crypto,37pvac,Natanael_L,6,Sat May 30 14:01:38 2015 UTC,"Opt-in per device, opt-out per app. Manual activation.   The user would have to 1) long press home button in 2) an app with private data in view that 3) don't have FLAG_SECURE set after 4) opting in to the assistant feature."
crypto,37pvac,pack170,18,Sat May 30 14:30:45 2015 UTC,Is your gripe that the OS is able to read the context of the messaging app you're using?
crypto,37pvac,anonyymi,24,Fri May 29 14:14:53 2015 UTC,"Hey guys, I think Linux kernel is able to read everything happening on my screen!!1!1!"
crypto,37pvac,m1ss1ontomars2k4,7,Fri May 29 18:03:11 2015 UTC,"I believe the LCD panel is also able to do so, and it's probably manufactured by god-knows-who somewhere in China."
crypto,37pvac,Natanael_L,8,Fri May 29 23:52:41 2015 UTC,"Technically Google Now is a bundled app which talks to Google's servers. However, it does not have automatic access to anything not already linked to Google's services or other apps. See my other comment."
crypto,37pvac,JoseJimeniz,1 point,Fri May 29 14:33:06 2015 UTC,"Not the OS, Google's central servers a.k.a the NSA (once it hacks those servers).  The issue is that instead of having ""decentralized spying"" (on each app), they can just hack the one service that ""spies"" on all the other apps from your phone."
crypto,37pvac,timschwartz,0,Sat May 30 14:04:20 2015 UTC,Is your gripe that the OS is able to read the context of the messaging app you're using?   Nobody is concerned that the OS is able to read the content of the messaging app you're using. They are concerned that the OS is reading the content of the messaging app you're using.
crypto,37pvac,JoseJimeniz,12,Sat May 30 03:19:18 2015 UTC,Google will likely   In other words you have no evidence to support this.
crypto,37pvac,kavb,7,Fri May 29 20:32:43 2015 UTC,Is Google reading you encrypted messages? Can I make anything up as long as I end it with a question mark? Some are wondering if the answer is yes.
crypto,37pvac,Natanael_L,-2,Sat May 30 03:20:38 2015 UTC,"Obviously we can't know right now, since it's not out yet. We'll know for sure when M is out and then we can probably easily check for it against Whatsapp or even TextSecure, and see if Google Now ""knows"" what you're talking about.  The reason I said ""likely"" is because Google Now probably reads the data from the screen, and last I checked TextSecure or virtually all apps didn't encrypt the data as it's displayed on the screen. If that's how Google does it then it should be able to read the data for all apps, regardless of their encrypted at rest or through the network.  Also, as the above comment mentions developers actually have to opt-out of it through that flag, which also implies it can read all apps' data."
crypto,37pvac,VikingCoder,7,Sat May 30 14:10:20 2015 UTC,"We'd have to make several large assumptions on how the service actually works in order to make a claim like '3rd party end-to-end encrypted apps can be read by Google'.  I'd like to see some data on how it works, first!"
crypto,37pvac,5225225,1 point,Fri May 29 15:22:09 2015 UTC,"No, it uses context data defined by the app and the OS."
crypto,37pf9l,Zmetta,7,Fri May 29 10:45:37 2015 UTC,"It is possible, but likely not as useful as you might first imagine because of the dependencies created. An extremely simple and not recommended example is just using the XOR function:  Plaintext = P  True Key = K  Ciphertext = C  Fake Key = F  False Text = Q     [1] P ⊕ K = C [2] C ⊕ Q = F [3] You can now provide C ⊕ F = Q [4] or C ⊕ K = P   You now have two keys that transform a single ciphertext into two valid plain texts.   Note that you cannot change the original plaintext (be it a file, encrypted partition, etc) without needing to recalculate F from Q⊕C. You can, however, change Q without effecting P by recalculating F = C⊕Q.   This is a very simple PoC to show you that it is possible but not recommended for real world applications. If you're looking more for plausible deniability there are more involved answers out there."
crypto,37pf9l,Pipe_smokin_pony,1 point,Fri May 29 12:48:39 2015 UTC,Would it be plausible to make one key produce one output and the other another? That would be good for if you are forced to give up a key.
crypto,37pf9l,sharedicecream,13,Mon Jun 22 18:19:44 2015 UTC,"See the encryption apps that have ""plausible deniability"""
crypto,37pf9l,thenickdude,6,Fri May 29 11:16:34 2015 UTC,"The ciphertext would have to be large enough to hold the entropy of both plaintexts. So if the plaintexts are high entropy (like compressed data), the ciphertext will basically be as large as the sum of the sizes of the plaintexts. This may hurt the ability to hide the existence of a second plaintext.   Volume encryption tools avoid that problem because it's not at all unusual to encrypt your entire drive but only partially fill it (so that extra free space can be used to hide data in)."
crypto,37pf9l,silverforest,5,Fri May 29 12:38:40 2015 UTC,Here is an example of that which requires the two plaintexts to be sufficiently close to each other.
crypto,37pf9l,w3m2d,2,Fri May 29 15:27:59 2015 UTC,closest I could think of: http://en.wikipedia.org/wiki/Rubberhose_%28file_system%29#Technical
crypto,37pf9l,gsuberland,4,Fri May 29 12:11:00 2015 UTC,"To some extent, yes. It's called deniable encryption.  You can achieve the ability to make proof of a second message by using random padding in single-message ciphertexts.  For single messages:   Compute c_1 = E(m, k), where m is the message and k is your key. Compute c_0 = E(|c_1|, k), where |x| denotes the length of x in bytes. Generate a random key j. Compute c_2 = E(p, j), where p is random data of random size. Discard j. Concatenate to get your ciphertext: c = c_0 || c_1 || c_2.   To decrypt, just decrypt the first block (c_0) to get the length of the first ciphertext, then decrypt that. An attacker cannot know that j was chosen randomly and discarded, so will not know that the second part of the ciphertext is meaningless.  For paired messages:   Compute c_1 = E(m_0, k_0), where m_0 is the ""known"" message and k_0 is your ""known"" key. Compute c_0 = E(|c_1|, k_0) Compute c_2 = E(m_1, k_1), where m_1 is the ""hidden"" message and k_1 is your ""hidden"" key. Concatenate to get your ciphertext: c = c_0 || c_1 || c_2.   In this case, decryption works the same as before, but you then decrypt c_2 with the hidden key to gain the hidden message.  Note that computing E(p, j) in the single-message case, rather than just padding the end of the ciphertext with j, is important for a number of reasons: (a) distinguishing attacks against the RNG or block cipher would break a padding approach, but not the encrypted padding approach; and (b) this solution provides increased resistance against side-channel attacks (e.g. timing attacks) because the encryption operation is performed the same number of times in single-message and paired-message operations.  This solution doesn't provide exactly what you specified, because an attacker may be able to tell that you used a mechanism that provides plausible deniability (e.g. if they know the length of the ""known"" message, and the length of the ciphertext, they can see that there's some additional data there), but they have no concrete proof as to whether you sent a single or paired message in this design."
crypto,37pf9l,dabombnl,1 point,Fri May 29 12:27:06 2015 UTC,I assume the second key can be chosen arbitrarily? Any symmetric encryption will do this.
crypto,37pf9l,Sostratus,1 point,Fri May 29 16:50:24 2015 UTC,"Any one-time pad-like system like /u/Zmetta suggested, would have a key that could decrypt the ciphertext to every possible plaintext.  If we contrast this with AES-256 for example, it's a 128-bit block cipher with a 256-bit key. There are (2128)! possible 128-bit block ciphers, but you can only get to 2256 of them (which is a mind-bogglingly huge number and yet still a tiny, tiny fraction of (2128)!) This creates what's called ""poor-man's authentication"", since probably only the one correct key decrypts into something that makes sense.  But with a one-time pad, there are as many keys as there are plaintexts. So there's no way to verify whether a given key is the correct one, there exists a key that will produce all possible plaintexts and they all look valid.  More practically, you could use TrueCrypt with a hidden volume. An attacker would know a second volume is possible, but there's no way to distinguish a volume that contains a hidden volume from one that doesn't if you don't have the password."
crypto,37k1wd,balkierode,8,Thu May 28 04:53:01 2015 UTC,"Yes, you've got end-to-end encryption confused with transport encryption."
crypto,37k1wd,phyzome,2,Thu May 28 10:44:55 2015 UTC,"Indeed.  And that's bad because transport security only protects one hop. If your mail bounces around a few mail servers before your main mx, and then a few more afterward, good luck trying to keep it encrypted the entire time.   Additionally, there's no reason why transport encryption has to be domain based, if we're talking about what's technically possible. We could just as easily make http's tls certs url-specific and now every path on a single domain could have a different cert. That's not the protocol, but there's no reason it couldn't be.   In the same vein, there's no reason why you couldn't purchase a certificate from verisign that's tied to your email address, and now the mail servers use that to establish a tls session once the 'mail from' and 'rcpt to' commands have been sent. Again, that's not the protocol, but it could be if we so decided.   Still, it's not end to end encryption and the original question as posed is a bit presumptive."
crypto,37k1wd,antiduh,3,Thu May 28 12:48:11 2015 UTC,What problem are you trying to solve? Doesn't existing solutions such as x509 or OpenPGP solve it?
crypto,37k1wd,chiniwini,1 point,Thu May 28 08:52:00 2015 UTC,"problem with openPGP is that whoever is sending me emails has to encrypt with my public key. Emails are not just sent by real users. E.g bank statements/ purchase receipts/ social networking updates. Those websites are not going to use PGP in anytime soon. If I have to prevent those emails not to be read by intermediary like google/yahoo/ms, should I have to run my own mail server with tls support? Or is there any other solution for the problem. Lets say I am fine with the intermediary knowing the source of the email. i.e it can know I am getting mails from a particular bank website but it should not be able to read the transactions (Assume the statements are not in an encrypted pdf)."
crypto,37k1wd,phyzome,3,Thu May 28 12:06:06 2015 UTC,"Emails are not just sent by real users. E.g bank statements/ purchase receipts/ social networking updates. Those websites are not going to use PGP in anytime soon.   End-to-end encryption is always cooperative. If they're not cooperating, you can't have end-to-end encryption."
crypto,37k1wd,phyzome,1 point,Thu May 28 17:28:02 2015 UTC,ok. it looks like I don't need 'end-to-end' encryption literally. What I need is to avoid the possibility of any intermediary reading all my emails from anyone on the web(it is now possible for gmail to do that if they wanted to). Will that be the case if I run my own mail server with tls enabled?
crypto,37k1wd,silverforest,2,Thu May 28 18:14:10 2015 UTC,"No, transport encryption only covers a single ""hop"", and multiple relays handle your mail."
crypto,37k1wd,bigshmoo,2,Thu May 28 19:56:50 2015 UTC,"I run my own mail server with tls enabled?    No, you can only guarantee the last hop. Furthermore since SMTP has opportunistic encryption it's easy for a man-in-the-middle to force the connection to not use TLS.  There is no good way to guarantee transport security with e-mail if you want to be compatible with everyone else out there. The best thing to do is to rip it all out and start over with a new protocol but good luck convincing everyone to do that."
crypto,37fywr,_SarahB_,3,Wed May 27 10:20:33 2015 UTC,"If nothing changed in the encryption method, it will take no longer than a normal software install."
crypto,37fywr,Natanael_L,0,Wed May 27 10:45:52 2015 UTC,"all right, thanks. I hoped it'd be much quicker."
crypto,37fywr,Natanael_L,3,Wed May 27 10:56:38 2015 UTC,"I meant compared to normal software. There's no need for re-encryption, normally"
crypto,37fywr,angdev,1 point,Wed May 27 11:13:54 2015 UTC,Got it. I misread what you meant. Thank you.
crypto,37fkys,quantum88,10,Wed May 27 07:07:05 2015 UTC,"With authenticated encryption (using HMAC, signatures or similar methods), you can even detect if any single bit has been modified."
crypto,37fkys,Natanael_L,6,Wed May 27 07:28:57 2015 UTC,"Yes, you can detect if the checksum has changed, but you won't know which bit, and won't know the correct bit. For that you need an error correcting code.  And if the cipher mode use some cascade, then everything after that block is now RIP unless you figure out the correct data for the block."
crypto,37fkys,TheTerrasque,8,Wed May 27 09:20:21 2015 UTC,"Depends, but in some cases yes.. Since many block cipher modes use the previous block as part of the key for next, a bit error can potentially cascade and result in everything past it being garbled."
crypto,37fkys,TheTerrasque,2,Wed May 27 08:10:15 2015 UTC,"Thanks, I'm basically wondering if it's just a better practice to encrypt everything at all times, if there's no increased risk of corrupting data, I don't see why everything shouldn't be encrypted.."
crypto,37fkys,tinylanda,5,Wed May 27 08:23:21 2015 UTC,"There is, depending on what standard you use, underlying processing power involved with encryption and decryption. Generally its not something that you will use for real time live data, unless your sitting on large amounts of free processing power."
crypto,37fkys,TheTerrasque,3,Wed May 27 08:44:19 2015 UTC,"Processing overhead, harder to recover from problems, harder to debug, and so on. Generally more of a pain in the arse to deal with.  When it comes to data corruption, you do have things like Hamming code that can detect and even repair bit errors, at the cost of more storage space.  If so that should be applied after hmac type codes (or ideally combined, but I don't think any of the error correcting codes can be used as a hmac type checksum), so...    hamming(hmac(crypto(data)))   should make the data more robust against small bit errors."
crypto,37fkys,balkierode,3,Wed May 27 09:16:24 2015 UTC,It wouldn't probably change likeliness of corruption. But if it ever becomes corrupted it is less likely to be able to recover uncorrupted parts of the data.
crypto,37fkys,xauxau,3,Wed May 27 14:34:20 2015 UTC,"I could write a doctorate on this topic (I've done post-graduate study on encryption and have over a decade's professional experience in the practical uses of crypto), so I'm trying not to over-complicate the answer.  I'm assuming you're interested in two cases: On-disk or over network. For those cases, in theory yes, many of the answers already here point out that block cyphers propagate errors to later blocks in the modes used for disk encryption.  In actual practice no, encryption does not make corruption more likely.   Modern disk hardware is error detecting and correcting in the firmware of the disk itself - the OS may not even be aware that a disk error has occurred. Any disk errors won't reach the encryption/decryption code to cause a problem.  TCP/IP networking is designed to handle almost arbitrary levels of transmission problems and recover, even before you add the recovery / error detection at the session/application layers.  Modern hardware also has ridiculous amounts of spare capacity for performing crypto. AES is efficient in software, feel free to turn encryption on everywhere. We used to have to worry about encryption workload back in the 1990s. People radically underestimate how much power modern computing equipment has. Back in the late 90s I was running multi-million dollar Sun E10000 servers - 64-CPU monsters the size of a huge fridge. Peak performance: 50 GFlops. iPhone 5S peak performance: 115 Gflops. Yes, an iPhone has more raw CPU grunt than a $2.5mil server from the late 90s."
crypto,37fkys,Sostratus,2,Wed May 27 23:38:44 2015 UTC,"It depends on many things. In general, one corrupted bit of unencrypted data = one corrupted bit, while one corrupted bit in encrypted data means at least a whole block (128 bits usualy) is corrupted, and likely the next block would also be corrupted if this data was encrypted with a block cipher in CBC mode.  But most storage media has error correcting code which operates invisibly to you. Ideally it should detect if the number of errors goes above some critical threshhold and relocate the sector before it becomes unreadable. Sometimes the firmware fails to catch this in time, but when that happens, most software treats the entire sector as a total loss (GRC's SpinRite is an exception, it tries to recover as much as it can from a bad sector). Depending on the storage device, a sector will be 512 to 4096 bytes, much larger than one encryption block.   However also (in theory) you might be able to correct small errors in encrypted blocks even without an attached error correcting code. If the decrypted data has some kind of expected structure, then you could flip bits one at a time in the corrupted ciphertext until a sensible output appears. This is sometimes called ""poor man's authentication"". But in practice this kind of data correction would be a real pain to implement, and it would only be useful for low-entropy plaintexts.  Bottom line, encryption doesn't put you at substantially higher risk of corruption, and always have two backups."
crypto,37dlpp,mcandre,11,Tue May 26 21:18:45 2015 UTC,"TLS ciphersuites are designed to resist chosen-ciphertext attacks like this, so this sort of attack should not be feasible at all."
crypto,37dlpp,bitwiseshiftleft,11,Tue May 26 21:35:34 2015 UTC,"About 2128 and up depending on cipher choice, assuming it is a strong one. Oh, and you need disk space that the atoms on earth isn't enough for.  You might however be interested in the attacks on old weak ciphers. See https://weakdh.org"
crypto,37dlpp,Natanael_L,9,Wed May 27 00:33:22 2015 UTC,"It would take Jupiter's entire mass converted into pure energy to power the most efficient cpu register just to count through 2128, never mind perform full TLS handshaking.  It literally requires an astronomical amount of energy. All for a field that fits in 16 bytes."
crypto,3798x5,johnmountain,16,Mon May 25 22:26:53 2015 UTC,We have a right to bear software!
crypto,3798x5,BruceChenner,13,Tue May 26 03:12:09 2015 UTC,Relevant xkcd
crypto,3798x5,DoWhile,7,Tue May 26 04:22:52 2015 UTC,"Image  Title: Legal Hacks  Title-text: It's totally a reasonable modern analogue.  Jefferson would have been all about crypto.  Comic Explanation  Stats: This comic has been referenced 31 times, representing 0.0478% of referenced xkcds.    xkcd.com | xkcd sub | Problems/Bugs? | Statistics | Stop Replying | Delete"
crypto,3798x5,xkcd_transcriber,2,Tue May 26 04:22:56 2015 UTC,Would that defense actually be viable? It almost seems like it would be.
crypto,3798x5,spankclown,7,Tue May 26 12:51:39 2015 UTC,"Considering the various restrictions, waiting periods, and permits required to bear different types of arms today in the US, I doubt you'd want to get anywhere near that category of government control over your software.  Whatever one's opinion of gun control might be, the Second Amendment has not resulted in a magical immunity to regulation. Xkcd is entertainment not advice...  Just off the top of my head, weapons can be restricted for behaving or looking like an ""assault weapon"" - for example, having a folding stock. I doubt anyone here wants to argue with a government official about what is or isn't ""assault crypto."""
crypto,3798x5,NotEnoughBears,8,Tue May 26 13:20:39 2015 UTC,"The title here is a little misleading. The U.S. BIS is considering implementing a resolution of the Wassenaar Arrangement, which is a group of 40+ countries focused on controlling the trade in dual use goods. The resolution itself was adopted in 2013. Inclusion on the list merely means that such software could, under some circumstances, be considered to have civilian or military applications. Moreover, the Controlled List does not cover software in the public domain (page 3 here, PDF)."
crypto,3798x5,tocobaga,8,Tue May 26 01:23:00 2015 UTC,Still a step in the wrong direction. They did the same thing with crypto. Horrible practice.
crypto,3798x5,zimm3r16,1 point,Tue May 26 03:22:49 2015 UTC,"I still believe it's a non-practicable thing.  Good luck with enforcing this kind of law... How do they expect to protect e-banking system, remote access to mobile workers etc."
crypto,3798x5,PinguRambo,3,Tue May 26 13:55:15 2015 UTC,"Whether it is enforceable or not (it isn't) the law is still there, and it still creates legal problems."
crypto,3798x5,zimm3r16,3,Tue May 26 13:58:57 2015 UTC,"I agree, it's just more dangerous once you are in front of a judge... And in the US."
crypto,3798x5,PinguRambo,2,Tue May 26 14:06:10 2015 UTC,True and I think that is an issue that can't be ignored.
crypto,3798x5,zimm3r16,2,Tue May 26 14:06:54 2015 UTC,"God help us if this passes. it's the same problem as gun restrictions: criminals that are going to break the law anyway manage to work their way around the restriction. It only ends up hurting the responsible, law-abiding people.  edit: fixed a horrible dictation error that I didn't notice for 13 days. God bless the person that voted my post up anyway."
crypto,3798x5,macks2008,1 point,Wed May 27 07:17:56 2015 UTC,US Govt proposes to classify engineering or building tools as weapons of war.   Equally as moronic.
crypto,3798x5,SoCo_cpp,2,Tue May 26 15:52:01 2015 UTC,Well you might sell another nation a wrench and they go and hit an American over the head! we can't have that! God help us if this passes.
crypto,3798x5,macks2008,2,Wed May 27 07:16:24 2015 UTC,That wrench might be used to make a dirty bomb. Think of the children!
crypto,3798x5,SoCo_cpp,1 point,Wed May 27 13:55:02 2015 UTC,"or worse, build a machine that automatically makes dirty bombs! Besides, what could they possibly use the wrench for that would be productive? It's not like they could fix a car for a lady to old to walk, or build a theme park that would benefit us all, or build some shelves for computers in a data center so they don't sit on each other and risk overheating, or... oh wait, they just might be able to do all that!"
crypto,37bqpz,thmsk,2,Tue May 26 13:32:13 2015 UTC,"I looked something similar up once (comparing the number of qubits needed for factoring an n-bit number versus the number of qubits needed to solve a discrete log in an elliptic curve) but I don't remember the exact numbers and the sources for the quantum algorithms with their complexities and qubit requirements. If I remember correctly, the elliptic curve stuff had a higher (worse) ""qubit per bit"" ratio. So, with slowly increasing numbers of qubits, RSA-2048 might fall earlier than secp521. If I had to guess, DH-4096 is probably more difficult given a limited-qubit quantum computer. But don't take my word for it. :)"
crypto,37bqpz,sellibitze,1 point,Tue May 26 14:21:06 2015 UTC,"Do you have any sources on that ""qubit per bit"" stuff?"
crypto,37bqpz,sellibitze,2,Tue May 26 21:21:11 2015 UTC,"No, as I said: ""I don't remember the exact numbers and the sources for the quantum algorithms with their complexities and qubit requirements"". Try to look up papers on quantum computer algorithms for discrete log over narural numbers and ellipcic curves. They typically also discuss the qubit complexity of the algorithms in these papers. That's what I did."
crypto,37bqpz,SAI_Peregrinus,1 point,Wed May 27 11:49:16 2015 UTC,"secp512r1 is not a safe curve. It's very difficult to implement ECDH using it correctly, and so any implementations are probably vulnerable to side-channel attacks. Thus, I'd expect it to fall first against a determined attacker due to a higher chance of implementation bugs.  In terms of pure cryptography, I'm not sure."
crypto,37bqpz,YouWantWhatByWhen,1 point,Tue May 26 18:42:08 2015 UTC,So it really depends on the curve? We can't generalize it to 512 over elliptic curves?
crypto,37bqpz,SAI_Peregrinus,2,Tue May 26 21:22:36 2015 UTC,"So it really depends on the curve?   Today - yes. If you assume a quantum computer - probably not. Today we ""attack"" RSA and DH implementations, but if we had decently-sized quantum computers then simply computing the private keys would likely be easier than any attack."
crypto,377pyx,Caminsky,5,Mon May 25 15:50:53 2015 UTC,"Citing MEGApwn as a flaw of MEGA is like citing the fact that I can read my own ~/.gnupg directory as a flaw with GPG.  The main idea here that it's a problem that MEGA is able (to be coerced) to serve a different javascript file to get your keys is right on.  Service Workers may be able to help solve this issue in the future. The first time you browse to the site, your browser caches some javascript that is used to process all further requests to the site. That javascript can require that all future javascript loaded from the site (including newer versions of the service worker itself) is signed with a key, securing the data-at-rest."
crypto,377pyx,AgentME,3,Mon May 25 23:18:59 2015 UTC,"Here we go again. When was the last time you installed a social network app on your desktop? What about a banking app? What about a discussion forum app?  Most desktop apps nowadays are web-based because that's where the people are. Asking people to download and install your app is like pulling teeth. Your conversion rate plummets if someone has to install your app natively, so there is a huge intensive to not ask someone to install anything to use your product. We've even been seeing this in most traditionally desktop-dominated spaces: email (Gmail), bookkeeping (Mint), documents (Google Docs), chat (Slack), photo editing (Pixlr), video editing (Youtube), etc.  It's totally rational that zero-knowledge app developers would follow the same trend. Like all other app developers, they want people to use their apps, and you get more people to use your app if you're web-based.  And I think that's a good thing. If we can get more people to use zero-knowledge webapps, we are better off than if we had gotten fewer people to use zero-knowledge native apps. Even though zero-knowledge webapps are more susceptible to active attacks than native apps, they go a long way to hindering the kind of pervasive monitoring that the IETF established as a best practice."
crypto,377pyx,diafygi,1 point,Tue May 26 00:07:29 2015 UTC,"Most desktop apps nowadays are web-based because that's where the people are.    Yup. It's also a development thing. Want your users to use your app on their phones? Make an app and you have to be able to write Java and Objective-C/Swift, and you'll be supporting both in perpetuity, so everything you build into one you have to work into the other. And have fun supporting the wide array of screen resolutions, hardware capabilities, and OS APIs out there! Once you have that working, you can build your native apps for Windows, Mac, and Linux, which opens yet another can of worms entirely. All of that mess vs. just writing one web app and making a responsive design that works everywhere on anything--it's a no-brainer.  So what we need, it sounds like, are better ways of running this stuff client-side in a validated, secure container. Answer used to be to run it server-side, but (for very good reasons!) that's not a trusted solution anymore. The challenge is going to be finding some trusted solutions on the client that are still cross-platform compatible the way JS is. Hey, I know, let's run it in Flash! (</s>)"
crypto,377pyx,castillar,2,Tue May 26 01:04:22 2015 UTC,"As I commented next to you, PNaCl is promising"
crypto,377pyx,Natanael_L,1 point,Tue May 26 01:35:40 2015 UTC,"True! The other thing I didn't mention in that rant was the difficulty of getting all the crypto right on all those different platforms--most developers have trouble getting it right on one. The more cross-platform-functional solid crypto toolkits we have to use, the better!"
crypto,377pyx,castillar,1 point,Tue May 26 01:54:19 2015 UTC,"they go a long way to hindering the kind of pervasive monitoring that the IETF established as a best practice.   Not yet. You've heard of XSS. Weakdh. CA key leaks. The web is designed to be transient, which is bad for long term trust. It isn't designed for isolation, verification, sidechannel resistance, etc...  Signed PNaCl bytecode is IMHO one of the most clean solutions (an entire runtime designed for security with high performance on multiple CPU architectures). Browsers that use secure sync between your various devices for key pinning and identity tracking.  You can integrate UAF / U2F and solve credentials phishing simultaneously. Perspectives to attempt to detect poisoning of your public key cache and MITM. Far more secure endpoints to resist hacking. We need a capabilities focused architecture which encourage secure designs.  Think like making the browser a Docker server (or Android / iOS apps), apps are delivered in isolated containers. Given only the access we want them to have. Even the UX must be designed for security, like in Qubes OS with OS controlled window colors for the different (virtualized) workspaces. Apps should be able to enforce isolation / virtualization internally too, such as for parser processes, for more levels of security. And so on..."
crypto,377pyx,Natanael_L,1 point,Tue May 26 01:34:32 2015 UTC,What are the use cases to implement crypto algorithms in JS? Doesn't the best practice in security mandate using the platform supported crypto and not to implement it in-house? What does crypto in JS that I cannot get with using the platform (browser) provided crypto. Seems like over engineering to me.
crypto,377pyx,yalogin,1 point,Tue May 26 19:54:43 2015 UTC,"Could be resolved by signing a hash of all scripts, erroring if anything gets loaded not on the list or with an incorrect hash, and disallowing inline scripts."
crypto,377pyx,slyf,3,Mon May 25 17:55:24 2015 UTC,"Alas, if only we could use code signing for any sort of scripts and have the browsers validate that."
crypto,377pyx,Katana__,1 point,Mon May 25 19:09:16 2015 UTC,Too bad XSS is still common.
crypto,377pyx,Natanael_L,0,Mon May 25 21:28:24 2015 UTC,"Java tried to do this with signed applets, though it wasn't a strong requirement.  Signing is great in theory but falls over in practice."
crypto,376467,johnmountain,8,Mon May 25 04:57:50 2015 UTC,"Is there any concept of permanent identity? If so, how is it accomplished?"
crypto,376467,vzq,3,Mon May 25 08:04:54 2015 UTC,I2P Messenger which is several years old does it a similar way. It automatically creates incoming I2P tunnels which is addressed like any other I2P service ([hash of public key].b32.i2p). The I2P client has an API for local software to create tunnels they can access via a given localhost port. Then the I2P client manages the rest.
crypto,376467,Natanael_L,2,Mon May 25 09:49:42 2015 UTC,Better than crypto cat?
crypto,376467,Caminsky,5,Mon May 25 10:24:39 2015 UTC,What isn't?
crypto,376467,KevinHock,4,Mon May 25 13:47:37 2015 UTC,I thought it was safe
crypto,376467,Caminsky,4,Mon May 25 13:57:00 2015 UTC,"It was broken for a long while, and the guy behind it doesn't have that great of a reputation regarding crypto.  Once someone releases a flawed version that allows you to completely break the encryption, people tend to not trust his future software."
crypto,376467,d4rch0n,0,Mon May 25 14:31:26 2015 UTC,Something about crypto in Java makes us all nervous.
crypto,376467,CypherusTorontocas,8,Mon May 25 20:08:03 2015 UTC,Java? you mean javascript
crypto,376467,Caminsky,2,Mon May 25 15:02:14 2015 UTC,"Well, javascript allows patching of code pretty easily and that's just bad for secure crypto.  If you take the browser element out, there's no real advantage for crypto being done in javascript. You may as well use anything else. The whole reason people want crypto to work in js is because they could have it run clientside on websites.  There is that google project to make it a browser extension which is much more promising than any other website that attempted crypto, and it gets around a lot of the problems mentioned in the old matasano article ""Javascript Crypto considered harmful"". Supposedly some good cryptographers worked on it, like Thai Duong, but personally I didn't see any source commits from him when I checked out the code dump they distributed. It was just a dump of the code, and nothing you could really see in the history to implicate what he wrote.  Still, if you're taking the browser element out, the only place I can see JS crypto having is in node, and that's just a choice of your toolset. It could be anything else. And at that point I'd personally be using GPG. I used to say ssl too, but people are wrecking that lately. Unless you know what you're doing and disable export ciphers at least, it'd be a hard platform to use right.  I'd say the root of the problem isn't ""how browsers work with JS"", but rather, you're trusting JS sent from the site at runtime, and any other extension or js running could break it. Even some sort of XSS attack. You don't want your crypto being dependent on the site not having an XSS flaw that breaks it. You could say that's ""how browsers work with JS"", but any sort of platform that is trying to distribute client-side code at runtime is not a great platform for crypto, and I don't think that can be fixed by changing browser design. It seems to be a flaw in the design in general, browser or not."
crypto,376467,d4rch0n,1 point,Mon May 25 15:43:04 2015 UTC,"I still think that it's dangerous that you can patch functions at runtime, which is just a feature of the language. Native code wouldn't have that issue. If you check out the matasano article, one reason they suggest it's bad is ""The malleability of the Javascript runtime"", and I don't think there's a practical way around that, though of course that is much much more of a problem in a browser.  I'll admit my experience with node is limited and I'm not sure if there's ways to harden that and make sure the functions you are calling are exactly as they were when the program started. If you can do that, and you DO that, I don't see that as an issue, but that's hard to do and it's a given when you run native code, unless there's a serious memory flaw where you can overwrite function addresses or something like that."
crypto,376467,d4rch0n,6,Mon May 25 17:51:27 2015 UTC,Telegram...  Edit: http://www.alexrad.me/discourse/a-264-attack-on-telegram-and-why-a-super-villain-doesnt-need-it-to-read-your-telegram-chats.html
crypto,376467,Natanael_L,1 point,Mon May 25 19:58:42 2015 UTC,Not sure why you were downvoted   Probably the negative question was followed by a positive response (in the negative).
crypto,376467,cunttard,1 point,Mon May 25 20:12:23 2015 UTC,"It would take someone much more qualified than me to say which one is worse but I wouldn't use either.  (I'm a huge fan of Alex and got to meet him once, super smart cool guy. Co-founded rpisec, latest talk here https://vimeo.com/111798989)"
crypto,376467,KevinHock,3,Mon May 25 20:15:43 2015 UTC,"Cryptocat has jumped between various crypto algorithms A LOT. Some have been secure, then they've switched to total crap, to decent, to good, to crap again, several times. A good sign that they don't know what makes something secure, but at least they are capable of getting close. They seem to learn from criticism, although too slowly for me to be able to trust their software.   Telegram has a really weird design, and they seem to be far too overconfident, and as far as I know there's no single instance in which their code has been effectively unbreakable. Together with per-session authentication, not long term per-keypair authentication, with only an effective strength of 64 bits (through precomputed birthday bruteforce attack on 128 bits of the hash of the negotiated session key, which them enables undetected MITM), and that the default is plaintext messaging, it should just be avoided."
crypto,375lor,rollie82,4,Mon May 25 02:05:57 2015 UTC,"It's important to talk about what this kind of password scheme does and does not protect against.  Hash.com hashes passwords using this scheme. Plain.com does not. Alice uses the same password on both.  Scenario one. Eve successfully does a passive MITM attack between Alice and Hash.com. Eve sees the hashed password. Using this scheme Eve is now able to use Alice's credentials to log into Hash.com any time she wants by just replaying the hashed password.  It's not clear that there's a way to mitigate against that with any simple change to this scheme.   But at least, at first glance, Eve cannot use Alice's Hash.com credentials to log into Plain.com, because Eve doesn't know the original password. Except that dictionary attacks against password hashes are surprisingly effective given real world passwords, and even brute force attacks are moderately effective against the typical short passwords.  To somewhat mitigate against dictionary attacks (but not much) and to pretty effectively mitigate against brute force it might make sense to use a computationally expensive function such as bcrypt. But here we run into a challenge: typical clients are running whatever brand of browser with whatever generation of Javascript engine. A hash function computationally expensive enough to fight against brute forcing may actually be too expensive for some of your users from a usability perspective. Obviously that concern doesn't hold if you have more control over minimum specification of clients.  Scenario two. Eve successfully does a MITM attack between Alice and Plain.com. Eve sees the plain text password. She is able to log into either Plain.com or Hash.com any time she wants simply by logging in through the front door. So this extra layer doesn't help in the reverse direction.  I think the same reasoning applies to credit cards."
crypto,375lor,JamesIry,1 point,Mon May 25 03:36:16 2015 UTC,"But, wouldn't it be safe to assume that the transactions are handled over SSL? In which case, MITM attacks seem unlikely."
crypto,375lor,nVitius,2,Mon May 25 05:35:07 2015 UTC,"The real problem is phishing. So no, can't expect passwords to be transmitted securely. Physical 2FA is the best protection, like with U2F."
crypto,375lor,Natanael_L,1 point,Mon May 25 10:16:32 2015 UTC,"Given the huge raft of SSL vulnerabilities that have been coming out lately, i'd say that it's not safe to assume that MITM attack is unlikely."
crypto,375lor,TheOnlyNemesis,2,Mon May 25 09:28:32 2015 UTC,"A few sites already do this. On an individual basis, it doesn't really make much of a difference. If your authentication system is encrypted with TLS and the client does its due diligence on authenticating the server, a disclosure of the hash or password are equivalent.  However, now if you you use your password on another service, and your password is disclosed by the authentication channel, your attacker may reuse that password directly. However, if the attacker obtains the hash, he/she now has virtually unlimited time to crack a single hash. And your attacker will have the challenge nonce.  And there's really no other attack vector. TLS is supposed to do this protection for you. And if the server is compromised, traditional attacks apply to the database. And any better access means the attacker can subvert the challenge-response scheme.  As a security consultant, I always advise against challenge and response schemes where transport encryption is a better solution."
crypto,375lor,aydiosmio,2,Mon May 25 04:06:28 2015 UTC,"I'm not even sure I'd quite call this challenge/response since here the ""challenge"" has to be the same every time. A key strength of true challenge/response schemes is that each challenge is at least random and often guaranteed unique to prevent replay attacks. Plus each challenge has a an expiration time to, assuming there's no incremental attack available , give an attacker a very small window of time to solve a unique problem. Using the same ""challenge"" every time opens things up to both replays and brute force attacks on the original secret (the password)."
crypto,375lor,JamesIry,1 point,Mon May 25 19:53:58 2015 UTC,A few sites already do this   Which sites?
crypto,375lor,0xDFCF3EAD,2,Mon May 25 13:19:32 2015 UTC,"I don't have any offhand. I've seen it mostly in older services and websites, like ColdFusion server used to do this. But since it provides no tangible benefit, those features have fell out of favor and we're mostly relics of a time when SSL was still resource intensive to implement.  However, I know that Rhovo.com uses it. Their use case is that your password secures peer to peer communication, and they don't want a copy of your password. Still, naive, since the hash is based on the password, Rhovo can just crack the hash you send them. Along with any attacker."
crypto,375lor,aydiosmio,2,Mon May 25 22:46:47 2015 UTC,"No.  There are two considerations for protecting passwords: Ensuring that people who observe wire communications can't authenticate as a user, and ensuring that people with a copy of the server's database can't authenticate as any users.  Normally this is achieved by storing H(P, S) on the server, sending P over an encrypted channel, recalculating H(P, S) from P, and comparing it to the stored value.  What you're proposing is essentially to store H(H(P, S1), S2), send the user S1, have them send H(P, S1) over the wire and use that to calculate H(H(P, S1), S2) to verify against the database. But this is really just extra complexity without any concrete security benefits. An attacker who can get H(P, S1) off the wire has something just as useful as P in the previous scenario.  Another alternative would be to store P on the server, send the user a random nonce (N) and have them calculate H(P, N). In this scenario, the value the user is sending over the wire changes each time they authenticated, so an eavesdropper can't get a value useful for authenticating later. But now anyone who gets the database can acquire P for every user. You can complicate this by storing H(P, S1), sending the user S1 and N, and having them compute H(H(P, S1), N), but it's still the case that anyone who acquires a copy of the database can authenticate as any user.  For typical web applications, the best solution is what people do today. Store a token on the server that can be calculated from the password, and rely on an encrypted channel for transmitting the password. If you can't trust the encrypted channel, you're going to have other problems.  You'll probably be interested in the Secure Remote Password protocol (SRP). It uses a variant of the Diffie-Hellman key negotiation protocol to simultaneously authenticate the client with the server, the server with the client, and establish a session key for sending secrets between the client and server. It's not very useful with web applications, because you still have to trust the encrypted channel to deliver the right version of the JavaScript to manage the communication. It could be useful for other client/server applications, where the client application can be verified and isn't retransmitted every session.  [EDIT]  I also have a JavaScript / Django implementation of SRP on Github, but I wouldn't recommend it for anything beyond learning the protocol."
crypto,375lor,AusIV,3,Mon May 25 14:35:02 2015 UTC,"no server would ever know the users actual password, even if that server were compromised.   Except that a compromised server could just serve an updated login page that doesn't hash the login details.  And if you just hashed the passwords, rather than using a key derivation function like bcrypt or scrypt, your database of hashed passwords will be less secure to attack.  And if you using a Javascript implementation of bcrypt or scrypt, it's almost certainly not going to be as well tested as a server implementation."
crypto,375lor,weavejester,1 point,Mon May 25 02:32:26 2015 UTC,"This is true for the first case outlined - if a user can actually change the behavior of the site entirely, the security could be bypassed. But if a user were to only gain read access, I don't think they could derive the password.  Also, it would be easy enough for the browser itself to require password fields to be hashed (would require some standards tweaks).  Even with the limitation you mention, I still think it would provide some value on the password front, and maybe even more value on the CC# front (given how many times companies' have been compromised)"
crypto,375lor,weavejester,3,Mon May 25 02:48:41 2015 UTC,"If the attacker only has read access to the database, then even if the passwords were encrypted on the server, the attacker still wouldn't have the plaintext.  The attacker would have to be able to intercept the unencrypted HTTP request, which typically requires root permissions anyway.  Also, credit card numbers are ridiculously easy to brute force. In your scheme, the client knows all of the information by which to hash a credit card number, so an attacker could just run through all the possible numbers until they get a match."
crypto,375lor,nVitius,1 point,Mon May 25 03:13:48 2015 UTC,"Is it easy to brute force though? I calculated below about 10 to the 21st possibilities, which at 1m per second, would be about 10 to the 11th days."
crypto,375lor,weavejester,3,Mon May 25 03:17:25 2015 UTC,"You also have to remember that not every 16-digit number is a valid CC. The first 6 digits are used to identify the issuer, and the last one as a checksum. This post has more information on the topic."
crypto,375lor,nVitius,3,Mon May 25 03:33:07 2015 UTC,"In your algorithm you have credit card number and expiration date, so at first glance it looks like 16+4 digits, or 1020 possibilities.  However, there are only 12 months, and credit cards are typically set to expire within 20 years, so rather than 10,000 possibilities for the expiry date, there's actually only 240.  On the credit card number, the final four digits are usually public, in order for the user to identify which credit card it is, so that means that rather that there being 1016 possibilities, there's only 1012. Credit card numbers also employ the Luhn algorithm to fix single-digit mistakes, effectively bringing the entropy down to 1011.  We could narrow the possibilities down even further, because the first 6 digits are the Bank Identification Number (BIN), and you could narrow this down to a very small number, particularly if you knew all users were from one particular country.  But even if you didn't, that's 2.4 × 1013 possibilities, and modern GPUs can churn through SHA256 at a rate of billions ( 109 ) a second. With dedicated hardware (hello bitcoin miner), you can get up to trillions of hashes per second ( 1012 ) from a single machine.  So at worst, with just a normal desktop PC with a decent graphics card, with no BIN optimisation, you're talking around a minute to brute force each number. By narrowing down the BIN and using dedicated hardware, you could easily brute force thousands a second.  Of course, you'd get a different result if you used an KDF algorithm like bcrypt or scrypt, rather than a hashing algorithm that is designed to be fast, but it's still hard to get around the lack of entropy a CC number has. A six-letter password is more secure."
crypto,375lor,weavejester,2,Mon May 25 03:46:35 2015 UTC,"Given the rather small quantity of possibilities, it might also be feasible to calculate all the hashes and store them in a database for lookup. Thus speeding up the process. Or would it make more sense to brute force each one individually?"
crypto,375lor,Natanael_L,2,Mon May 25 17:33:07 2015 UTC,"Yes, a per-site rainbow table works well if the salt is a constant, which in the OP's algorithm it is. If you only checked credit card numbers from a few dozen banks, with an expiry date within a few years, the rainbow table would easily fit on a normal hard drive."
crypto,375lor,braille_teeth,1 point,Mon May 25 17:46:51 2015 UTC,There are GPU rigs that can guess hundreds of billions passwords per second including the hashing step.
crypto,375lor,Natanael_L,3,Mon May 25 10:18:52 2015 UTC,"CC # and expiration date is a ridiculously small preimage space. other problems, but brain broken right now.  Look into tokenization."
crypto,375lor,SAI_Peregrinus,1 point,Mon May 25 02:44:39 2015 UTC,"16 digits of cc number, maybe 30 plausible dates, and 4 digits for the CCD, so around 10 to the 21 possibilities. I if each user used a different salt that was randomly generated client side, an attacker couldn't precomputed the hashes until the got the account info (because of the client determined salt)"
crypto,375lor,Katana__,1 point,Mon May 25 03:03:04 2015 UTC,http://www.reddit.com/r/crypto/comments/375lor/is_client_side_hashing_of_passwords_viable_to_improve_security_and_resilience/crjyosy
crypto,374n35,maqp,1 point,Sun May 24 21:00:12 2015 UTC,This project does it's very best not to be waste of your time   With all the loaded terminology I would argue otherwise.
crypto,374n35,cunttard,1 point,Mon May 25 00:22:22 2015 UTC,Omen est nomen
crypto,370l1p,johnmountain,10,Sat May 23 19:15:13 2015 UTC,"Ahhhh! Think of all the crypto consulting hours that will be squashed because of this!  Seriously though, cryptographers, like dentists, want users to behave in a way that works themselves out of a job.  But people still don't brush their teeth."
crypto,370l1p,DoWhile,5,Sun May 24 03:17:41 2015 UTC,Why /dev/urandom over /dev/random? I thought urandom can reuse the entropy pool and thus is less secure?
crypto,370l1p,choleropteryx,8,Sun May 24 15:19:28 2015 UTC,This is a pretty good write-up.  Myths about /dev/urandom
crypto,370l1p,Salusa,3,Sun May 24 15:56:32 2015 UTC,"More by the same author: http://sockpuppet.org/blog/2014/02/25/safely-generate-random-numbers/  The short version: Even if you think all your entropy sources are perfect honest randomness, the output of /dev/random still isn't those pure random numbers. It goes through the same PRNG that /dev/urandom goes through. Here's DJB on the same:   The Linux /dev/urandom manual page claims that without new entropy the user is ""theoretically vulnerable to a cryptographic attack"", but (as I've mentioned in various venues) this is a ludicrous argument—how can anyone simultaneously believe that   we can't figure out how to deterministically expand one 256-bit secret into an endless stream of unpredictable keys (this is what we need from urandom), but we can figure out how to use a single key to safely encrypt many messages (this is what we need from SSL, PGP, etc.)?   There are also people asserting that it's important for RNGs to provide ""prediction resistance"" against attackers who, once upon a time, saw the entire RNG state. But if the attacker sees the RNG state that was used to generate your long-term SSL keys, long-term PGP keys, etc., then what exactly are we gaining by coming up with unpredictable random numbers in the future?"
crypto,370l1p,oconnor663,1 point,Sun May 24 23:28:19 2015 UTC,Using /dev/random causes more problems than it solves.  Source: http://www.2uo.de/myths-about-urandom/
crypto,370l1p,anonyymi,1 point,Sun May 24 16:23:42 2015 UTC,"If you're worried about the information theoretic risks with urandom, why are you using anything but the one time pad for crypto?"
crypto,370l1p,Natanael_L,3,Sun May 24 16:25:35 2015 UTC,avoid AES-CBC   Why? Sounds like a reasonable choice to me...
crypto,370l1p,Rawropodus,7,Sun May 24 19:15:25 2015 UTC,"Malleability, Lack of Authentication, Susceptibility to Padding Oracle Attacks the list goes on. While there is nothing inherently wrong with it as a block mode - if you find yourself typing ""AES-CBC"" into code then you are likely to get lots of things wrong easily - so the suggestion here is no so much to avoid AES-CBC - but to target higher level API's where that kind of design decision is abstracted away and all the right things have been done for you in the right way."
crypto,370l1p,sarahjamielewis,2,Sun May 24 20:10:15 2015 UTC,"Plaintext injection through malleability attacks. Scramble one block, make the rest say whatever you want them to."
crypto,370l1p,Natanael_L,2,Sun May 24 21:27:30 2015 UTC,"Avoid: userspace random number generators, havaged, prngd, egd, /dev/random   Can anyone elaborate on havaged, prngd, egd?"
crypto,370l1p,cunttard,1 point,Sun May 24 16:03:11 2015 UTC,What problems exist with cipher cascades?
crypto,370l1p,GrayCipher,1 point,Sun May 24 20:16:06 2015 UTC,Performance.
crypto,370l1p,Natanael_L,1 point,Sun May 24 21:28:01 2015 UTC,Isn't the Nacl/libsodium default Chacha20 and Poly1305 anyway?
crypto,370l1p,LordCurlyFry,1 point,Mon May 25 00:03:36 2015 UTC,"Just look it up and see:  crypto_secretbox.h:#define crypto_secretbox_PRIMITIVE ""xsalsa20poly1305"""
crypto,370aok,ThereOnceWasAMan,25,Sat May 23 17:49:37 2015 UTC,"If everyone knows the standard and the algorithms behind it, shouldn't all know if a backdoor does/doesn't exist?   Yes, it is understood that a backdoor can exist and is based on how the parameters are chosen.  An honest generator chooses the parameters P and Q at ""random"", and therefore is not able to tell the ""relationship"" between them.  However, a dishonest generator picks one parameter P, and then picks the ""relationship"", and generates Q from that relationship.  It is done in a way that is identically distributed to choosing P and Q randomly.    I'll give an example: suppose we don't know how to subtract, but we know how to add.  A crypto scheme tells us that we are going to roll 2 dice and write down the dice roll, and if we happen to know the difference between the two dice numbers then we can break the crypto.  You can do this honestly: roll them and let that be your two numbers, and since you don't know how to subtract, the crypto isn't broken.  However, you can also do it dishonestly as follows: roll 1 die, pick a number x, add it to that die to get your other die's number (wrapping around if needed) and claim that as the outcome of your dice roll.  Now a dishonest generator knows the difference between the two numbers (it's x), but the dice roll is identically distributed to an honest dice roll.  This now serves as a backdoor.  You can prove you know x by showing it to the world, but an honest person can't prove that they don't know x!  Of course, it's not a particularly deep sentiment that you can't prove you don't know the relationship , but you can only prove you do know the relationship.  This is true for basically anything: you can't prove you don't know something, but you can prove you do know it.  It's just that a well-designed scheme should not even allow for this possibility of a earth-shattering relationship to occur."
crypto,370aok,DoWhile,17,Sat May 23 18:42:33 2015 UTC,"I would like to complete your explanation with the fact that whatever P & Q are chosen (at random), there must be a number e (the relation) between them. That number exists even if nobody knows it. If one day we find it (by cryptanalysis or brute force), it will not be a proof of backdoor because we already know it exists."
crypto,370aok,aris_ada,1 point,Sat May 23 19:25:22 2015 UTC,But it will be a rediscovery of cryptanalysis on a level comparable to differential cryptanalysis.
crypto,370aok,conradsymes,2,Sun May 24 01:06:56 2015 UTC,"OK, this makes sense. Thank you for the explanation."
crypto,370aok,ldpreload,6,Sat May 23 18:44:59 2015 UTC,"Here's a simplified example of a terrible yet cryptographically-strong scheme for generating random numbers: generate an public/private keypair (for, say, RSA), throw the private key away, and standardize the public key. Starting with a random seed n, your algorithm outputs the encryption of n, the encryption of n + 1, the encryption of n + 2, etc.  Provided that you did in fact throw away the private key, this scheme is as cryptographically strong as your encryption algorithm is: it's impossible for an attacker to determine one output from knowing any other outputs, because that would imply the ability to decrypt things without the key. However, if you somehow failed to throw away the private key, the scheme is ludicrously insecure to you. You can just decrypt any ""random"" number and read off the current input, and then you can calculate any other output.  The trouble is that the NSA standardized an encryption algorithm exactly like this, using (effectively) an elliptic curve public-key algorithm, and promised to throw away the private key.  It's a little subtler than that in practice. At the time they proposed Dual_EC_DRBG, they told us about the algorithm itself, and told us that the constants were random. Sometime later, some researchers noticed, hey, this bit of math looks sorta like public-key encryption, I wonder if there's a private-key decryption algorithm that goes along with it. Turns out there was in fact a decryption algorithm too. There is a possibility that the NSA didn't know that, and the existence of a decryption algorithm was a surprise to them, and they did actually pick the ""public key"" entirely at random. But that possibility is pretty unlikely."
crypto,370aok,aris_ada,7,Sat May 23 23:50:17 2015 UTC,"There is a possibility that the NSA didn't know that, and the existence of a decryption algorithm was a surprise to them, and they did actually pick the ""public key"" entirely at random. But that possibility is pretty unlikely.   This is proven easily, because Dan Brown (who proposed the algorithm in the first place) emitted a patent for key-escrow mechanism in pseudo random number generators that totally matches the internals of DualEC at the time it was being standardized. There were already some critics about the pre-generated constants during the standardization so NIST chose to add a section ""generating own constants"" (nobody implemented this obviously)."
crypto,370aok,phyzome,3,Sun May 24 19:31:03 2015 UTC,"The algorithm includes a set of numbers. If those numbers were chosen in a certain way, the designers could use that to crack people's encryption. If they were not, then it's not a backdoor. It's basically impossible to know, though."
crypto,370aok,n3xg3n,2,Sat May 23 18:41:03 2015 UTC,"The answers here are really good:  Here's a blog post where the author goes through the steps of generating their own constants and showing how the backdoor would work in practice, with code."
crypto,37003g,pointfree,5,Sat May 23 16:17:13 2015 UTC,Replacing a venerable technology such as RSA is no easy task.
crypto,37003g,m545,8,Sat May 23 16:43:30 2015 UTC,"Hey, did you know your account is shadowbanned? Might be an accident -- you can ask the admins to fix that."
crypto,37003g,DoWhile,4,Sat May 23 18:43:27 2015 UTC,RSA signatures.  Here's the abstracts extracted from that website:  https://eprint.iacr.org/2014/321 https://eprint.iacr.org/2014/689 https://eprint.iacr.org/2014/696
crypto,37003g,jan,5,Sat May 23 16:47:26 2015 UTC,"I haven't done any research beyond reading the website, so take this with a grain of salt.   RSA isn't the only PK signature algorithm, it is not even the most popular one, today. RSA is not broken. (I have worked for years with quantum computation scientists. It is still a long way to practically find prime factors with QC) The marketing on the linked site focuses on a business model not the algorithm. It seems the advertised protocol or business model (centralized trustless CA) can be implemented with standard hash function and does not require the 'BLT' algorithm. The marketing language is vague"
crypto,37003g,ristlaan,3,Sat May 23 20:32:07 2015 UTC,"All true, that's how marketing works.  TL;DR about the technology (an author here):  BLT: how to build a digital signature scheme from one-time password scheme and a cryptographic time-stamping service.  KSI: a product built on top of linking-based time-stamping[1] system. Provides endpoint authentication, time, and the long-term security can be proven based on collision resistance[2], preimage awareness[3], or other properties of hash function. So, ""keyless"" in ""keyless siganture infrastructure"" means, that the long-term security does not depend on any secrets like keys.  Another view to the KSI is that it is a blockchain technology---the blockchain is built using a quorum of distributed 'core' sites: one block per second, and the top of global distributed Merkle tree goes into the blockchain. Oh, distributed Merkle tree makes the system handsomely scalable[4].  Back to BLT: We use Lamport one-time password scheme. Starts from private key z_l, which is hashed recursively, ends with public key z_0 = h(z_1) = h(h(z_2))  ..... h(..(z_l)..). For simplicity assume that key z_i can be only used at time i. Signing data M:   x = h(M, z_i) send x to time-stamping service, get back signature token S_i for data x. wait for clock tick, to be sure that z_i is not revealed before time i+1.   Signature for M is (i, z_i, S_i).  Verification:   Verify S_i, extract i and x Compute hash x = h(M, z_i) if everything matches then signature is correct.   Now, there are lots of optimizations, described in papers.   Cryptographically strong clock reading can be extracted from S_i, so there is no need to depend on local clock (in the case of previously described simplest case) Critical parts can be implemented in smartcard, so that host computer does not see z_i before i+1 It is possible to revoke keys if time-stamping service authenticates users, and ID is part of the ""certificate"" Instead of traversing big part of hash chain during verification it is possible to use compact proof with size log(l), instead of storing entire secret hash chain at key owner side it is possible to use Jakobsson's pebbling algorithm, now storage is log2 l and releasing a key takes also log2 l hashing steps; if we fix time-stamping service provider id in ""certificate"" then it is possible to use keys sequentially (so that they are not time-bound) etc.    With some (hideable) complexity the scheme can be tailored for many use-cases. Obviously, it is not a plug in replacement for RSA. Technically a BLT signature provides more than RSA: signing time, revocation, archivability etc necessary in some legal frameworks.  [1] http://en.wikipedia.org/wiki/Linked_timestamping [2] http://cyber.ee/uploads/2013/05/BuNi10.pdf [3] http://eprint.iacr.org/2014/700 [4] http://eprint.iacr.org/2013/834"
crypto,37003g,autowikibot,1 point,Sun May 24 10:47:46 2015 UTC,Linked timestamping:       Linking-based time-stamping is a type of trusted timestamping where issued time-stamps are related to each other.    Image i     Interesting: Timestamp | Hash chain | Hash calendar | Merkle tree   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words
crypto,37003g,aris_ada,2,Sun May 24 10:47:56 2015 UTC,"3 and 4 alone mean that it's crap that will never work. Creating an QC-immune alternative to RSA that shares all the interesting properties (works on classical computer, private keys are really private, etc.) is very challenging. Even ECC aren't QC-immune."
crypto,37003g,Natanael_L,5,Sat May 23 20:36:52 2015 UTC,Lamport signatures. Hash based.
crypto,37003g,ahtotruu,4,Sat May 23 20:58:10 2015 UTC,They mention Lamport Signatures in at least the first paper which I just read.  It seems the selling point is that this signature scheme does not depend on the security of the the private key. However the security of BLT does depend on an accurate clock which they say should go in a a sealed dongle. I'm not sure how they plan to secure the clock.
crypto,37003g,Natanael_L,2,Sat May 23 21:32:54 2015 UTC,The basic scheme (where keys are bound to time) indeed requires either a secure clock (hard to do in a dongle/smartcard) or the ability to extract reliable time from the time-stamp S.  More precisely the thing that is needed is to make sure there is a point in time for each key such that the key can be used for signing only before that time and is released to outside world only after that time. This condition alone ensures that only the owner of the key can use it to create signatures and everyone else can only use it for verification of existing signatures.
crypto,37003g,ahtotruu,1 point,Mon May 25 06:44:49 2015 UTC,"Then why not smartcards? :)   Also, look at Fawkes signatures for another temporally secured hash based signature method (timestamps hash commitments)."
crypto,37003g,Natanael_L,1 point,Sun May 24 08:05:39 2015 UTC,"The trouble with smartcards is that they have no internal power, so they don't have a clock that would keep going while the card is not in reader.  There are ways around it, such as extracting the time from a time-stamp, or not binding the keys to real time in advance (what we really care about is the order of signing and verification events, to ensure that a key cannot be used for creating new signatures once it has been released as verification key)."
crypto,37003g,ahtotruu,1 point,Mon May 25 06:55:05 2015 UTC,Store the last blockchain hash?
crypto,36zfby,johnmountain,2,Sat May 23 12:48:44 2015 UTC,So a lot like FREAK
crypto,3704lx,ldpreload,5,Sat May 23 16:56:29 2015 UTC,"It's generally desirable for a cipher to produce output that's indistinguishable from random data.  Of course, for most applications (i.e., not TrueCrypt hidden partitions or Tor pluggable transports), it's no less secure to use a cipher with that property, but a cryptosystem that then adds, ""Hey yo, this is ciphertext encrypted with this algorithm to this key."" PGP does this, for instance, so it can prompt you for the right key. The catch is that there's no way for you, as a third-party observer, to check if that statement is true or not. Since the actual cipher output is indistinguishable from random, someone could just take a block of random data, and append ""Dude this is totally ciphertext I promise,"" and since you don't have the private key you don't know any better.  (Remember, as always, that ""prove"" in a cryptographic sense and ""prove"" in a legal sense are different. If your goal is to escape proof in a court of law, not escape proof in a research paper, adapt your methods accordingly.)"
crypto,3704lx,changetip,1 point,Sat May 23 17:55:19 2015 UTC,"Thanks a lot. I knew that good encryption should appear random, but I was unsure about the PGP bit, thanks. /u/changetip $1"
crypto,3704lx,jan,1 point,Sat May 23 20:03:47 2015 UTC,"The Bitcoin tip for 4,334 bits ($1.00) has been collected by ldpreload.    what is ChangeTip?"
crypto,3704lx,funkysash,2,Sat May 23 20:04:52 2015 UTC,Is the plain text known?
crypto,3704lx,cenderis,2,Sat May 23 20:40:52 2015 UTC,No. Would it be different otherwise?
crypto,3704lx,funkysash,1 point,Mon May 25 08:26:38 2015 UTC,"Well, if you have the plaintext and the public key you can simply encrypt and then compare. For RSA the key size should be obvious and there are only very few padding schemes that are actually used.  Finding out if the ciphertext is encrypted with any key, is probably a problem that only the NSA can solve. Collecting all public keys and then trying every single one is a pretty big task.  The search for the padding and the search for the matching public key become easier with context/metadata as you can easily filter out a lot of candidates."
crypto,3704lx,christian-mann,2,Mon May 25 12:47:41 2015 UTC,Padding for encryption isn't (usually) deterministic.
crypto,3704lx,spook327,1 point,Tue May 26 20:36:01 2015 UTC,"Oh, right. My bad"
crypto,3704lx,Natanael_L,1 point,Wed May 27 21:44:30 2015 UTC,One thing you can do is check whether the cipher text is < N.
crypto,36zfq6,There-are-no-tomatos,4,Sat May 23 12:53:36 2015 UTC,She wants to be able to use this fact in court in case she and [Alice XOR Bob] get accused of deliberately saving and/or distributing intellectual property illegally.   Sounds like you have an XY problem. What exactly are you trying to do?
crypto,36zfq6,silverforest,3,Sat May 23 13:59:09 2015 UTC,"It depends.... is this an academic problem, or are you looking to solve the security issue?  I would say  Alice and Bob must use a hardware security module issued by Caroline.  Alice and Bob will each generate their secret keys and save them to a smartcard   K_alice, and K_bob.  Caroline will generate two secret keys on a smartcard   K_auth1, and K_auth2.  On the first encryption,  a USB stick with the document to encrypt will be inserted  to the  IN port on the  HSM,  an empty fresh USB stick will be inserted to the OUT port on the HSM.   Alice will insert her K_alice smart card, and   Caroline will insert her  K_auth1 smart card.  The HSM will encrypt the document and write to the OUT: (1)  A DOCUMENTS folder with the documents/files on the IN usb stick, but encrypted using an encryption key which will be newly generated.  (2) A file containing the document encryption key, encrypted using K_alice XOR K_auth1  (3) A file containing message digests/e.g. SHA256 hash Of:  The input document,  a hash of the Output document,   a hash of K_alice, and a hash of K_auth1.   (4) A Digital signature of the document made using K_auth1.  (5) A  DIGESTS folder with a copy of items  (3) and (4)  from any previous HSM sessions  without re-encrypting them.  The  USB stick connected to the IN port will next be removed from the HSM and tossed into a  running incinerator  in full view of all parties, to verify the unencrypted version has been destroyed.   Next, the smart cards and USB stick are removed from HSM1.   Caroline brings out HSM2. The USB stick is plugged into the in port  Caroline inserts her K_auth2 smart card. Bob inserts his K_bob smart card.  The same procedure is repeated.  USB4  contains the documents which can be authenticated using the hash files  and manufacturing specs of the HSM."
crypto,36zfq6,Draco1200,1 point,Sat May 23 15:08:17 2015 UTC,"I could be wrong but this method would be difficult to do if any of the two parties were not physically in the same place, correct? Otherwise you'd have to secure a VPN or SSH between the two parties in order to allow physical security of the cards/usb sticks with all parties public keys during encryption prior to transit.  I think OP has a geographic limitation where a client of an agent is sending information to a 3rd party for review/approval. Like a movie script by the creator (Alice), validated by an agency (Bob), and submitted to the production company or director (Caroline). All the while Caroline at WarnaBrother wants to be able to prove without the private keys of both Alice and Bob they, or more importantly nobody, could view the information. If the script leaks after Caroline buys it either Alice or Bob are liable.  I'm completely new and honestly self taught when it comes to cryptography so I normally just lerk in here, but am I understanding the limitations or challenges correctly in this hypothetical I expounded from OP?"
crypto,36zfq6,latherus,1 point,Sat May 23 15:32:30 2015 UTC,"I could be wrong but this method would be difficult to do if any of the two parties were not physically in the same place, correct?   If the two parties are in different places, then I would have to start asking about your attack models.  If you have only the ciphertext from Alice's encryption,   then you have no way of proving that Alice didn't encrypt a different plaintext with her key, and that her key wasn't intentionally selected to be guessable by Bob,  unless Alice is forced to use a crypto module you trust under supervision to ensure that Alice does not tamper with the module.  The security becomes even harder to validate if you start bringing in remote encrypted tunnels.  How do you know Alice didn't tamper with the software on her computer setting up the tunnel  to send any key material exchanged somewhere else?  You could use a tamper-resistant smartcard and public key crypto operations on the smartcard.  Things definitely get more complicated if  Alice's actions need to be proven, and you don't have an additional agent at the physical location that can testify and observe  and log the tamper-evident seals on the equipment."
crypto,36zfq6,Draco1200,1 point,Sat May 23 22:42:47 2015 UTC,Thank you for your extensive (in a positive sense) reply but hardware security modules are not suited for my specific use case.
crypto,36zfq6,Natanael_L,2,Tue May 26 10:53:29 2015 UTC,"Zero-knowledge proofs is what you need. It is possible, but not trivial."
crypto,36zfq6,reed17purdue,1 point,Sat May 23 14:21:36 2015 UTC,"i've only seen zero knowledge with two people on a single answer, would it not become more difficult having to know two zero knowledge answers for the single output (he states you want to know the output of x was used as an input for y)?  even then it would take huge amounts of trials and it isn't un-denialable proof. only a high likelihood that it is correct/known. wouldn't the court throw that out?"
crypto,36zfq6,Natanael_L,2,Sat May 23 16:02:46 2015 UTC,"You can prove arbitrary algorithmic statements. The complexity might make it slower, though. But using threshold encryption with ZKP is just fine."
crypto,36zfq6,reed17purdue,1 point,Sat May 23 16:09:56 2015 UTC,do you have a link to an example. i remember last semester when taking cryptography only seeing the stupid cave and key example.  and thanks!
crypto,36zfq6,Natanael_L,2,Sat May 23 16:15:45 2015 UTC,http://blog.cryptographyengineering.com/2014/11/zero-knowledge-proofs-illustrated-primer.html  That's a good source
crypto,36zfq6,reed17purdue,2,Sat May 23 16:56:08 2015 UTC,"this only works for the example above because of inherent misuse of pki: you could compare the hash of the encrypted data. for example alice encrypts and sends the hash to bob/you. bob encrypts with his private key (assuming you really are using pki backwards). you can decrypt the message with his public key, and check hashes."
crypto,36zfq6,monty845,1 point,Sat May 23 16:00:50 2015 UTC,"Based on the fact pattern provided, I don't think its possible. There is no way Caroline can be sure Bob encrypted the file Alice sent, and not something else. You will be able to predict certain things about the output if you know the size of the input, and the crypto implementations being used, and so could detect if Bob was sloppy, but if Bob was careful, he would make sure that what ever he did encrypt would have characteristics consistent with what he received.  With more knowledge about the original item, it might be possible to construct an encryption scheme that could allow verification of the encryption chain, but I'm not aware of any off the shelf product that does it, and its not clear what knowledge Caroline does have of the plain text."
crypto,36zfq6,atoponce,1 point,Sat May 23 15:40:30 2015 UTC,You understood the point of my question.  The crypto algorithm/implementation being used can (and even should) be publicly known. Alice should be able to choose the size of the plaintext arbitrary long. Caroline don't want to know anything about the plaintext but it would be totally OK if Alice changes the plaintext according to a scheme which is publicly known and reversible before she encrypts it.
crypto,36zxds,Padievis,3,Sat May 23 15:53:14 2015 UTC,"When you use RSA as a signature scheme, you encrypt with the private key (the ""sign"" operation), then the receiver decrypts with the public exponent (the ""verify"" operation)."
crypto,36zxds,mokomull,1 point,Sat May 23 16:45:48 2015 UTC,"i see.. so this is ""signature scheme"". what kind of scheme you call then one encrypts data with public key and only private decrypts ? How more of those schemes are there ?"
crypto,36zxds,Natanael_L,3,Sat May 23 17:27:00 2015 UTC,Asymmetric cryptography algorithms have varying capabilities. RSA can do encryption / decryption and signatures. ECDSA can do signatures and key exchange (the generated key can be used to encrypt). Hash based signatures (Lamport signatures) can't be used for anything else that signatures.
crypto,36zxds,Natanael_L,1 point,Sat May 23 21:00:34 2015 UTC,can you recommend any literature on crypto fundamentals ?
crypto,36zxds,aris_ada,2,Sun May 24 11:56:06 2015 UTC,Here's some:  http://www.crypto-textbook.com/ http://www.cs.umd.edu/%7Ejkatz/imc.html https://www.schneier.com/books/cryptography_engineering/ https://www.coursera.org/course/crypto
crypto,36zxds,sapiophile,3,Sun May 24 16:13:11 2015 UTC,"In SSH the authentication process is a signature scheme. The server does not send a nounce to be signed, but the session ID (negotiated using DH, ECDH or Curve25519) is used. The client signs the session ID using his private key (which is equivalent to private key encryption vs public key encryption).  I think the author abuses the ""private key encryption"" idea without mentioning it's just a signature algorithm. You can do exactly the same with DSA, ECDSA or ed25519 signature algorithms, which are not ""private key encryption"" algorithms unlike RSA. In fact you can use all the functionalities of SSH without doing public key encryption (à la PGP) even once.  I had a long discussion on IRC on this topic, I can find the exact place in RFC that describes the authentication if you wish.  edit: source: wrote the implementation to a popular SSH library."
crypto,36zxds,Natanael_L,1 point,Sat May 23 20:32:27 2015 UTC,"thanks mate, I think i got the basics here. I would wish simple literature reference for dummies on crypto fundamentals and little more."
crypto,36zxds,aris_ada,2,Sun May 24 11:55:30 2015 UTC,"Although I cannot verify whether this is actually how SSH Key-Based Authentication works, I don't think it's an error. The procedure as illustrated makes sense and would work well.  Asymmetric crypto can indeed be ""reversed"" in this way, and this is similar to how cryptographic signatures are created and verified. It's just that when talking about signatures, we generally don't bring up the fact that it actually involves an ""encryption"" step."
crypto,36vglt,johnmountain,10,Fri May 22 13:09:57 2015 UTC,"""Astoria is a usable substitute for the vanilla Tor client only in scenarios where security is a high priority.   What else can you do to your TOR browser to make it more secure and less vanilla?  And will Astoria be able to access .onion sites?"
crypto,36vglt,P1ll0w,6,Fri May 22 13:49:14 2015 UTC,AFAICT Astoria only changes the peer selection mechanics.
crypto,36vglt,Natanael_L,8,Fri May 22 15:03:43 2015 UTC,"What else can you do to your TOR browser to make it more secure and less vanilla?    Use Tails and not just Tor Browser on your native OS. If you cannot use Tails, at least use a Free, Open Source Operating system like GNU/Linux or *BSD - and keep proprietary add-ons like Adobe Flash and Sun Java off of it. As the first thing you do in any Tor Browser session (in Tails or otherwise), click the Tor Button and select ""Privacy and Security Settings..."" and slide the slider all the way up to the ""High"" position. If that is unsuitable for any reason, at least click the NoScript icon in Tor Browser and select ""Disable Scripts Globally."" This is really not optional, at this point - I still think it's disgusting that the Tor devs enable scripts by default. Their concern is that it breaks a lot of modern websites, which it does, but JavaScript is also the single biggest vector for anonymity compromises both theoretically and historically. For the ultimate security, use an Isolating Tor Proxy, with secure operating systems on all machines on the network. This requires some knowledge of Linux/UNIX, networking, and anonymity threat modeling in general. Ideally, run your workstation machine from some kind of Live medium (like Tails, though you'll probably want to hack it a bit so that it's not connecting to Tor through Tor). Whonix is an OS that's pre-configured for this kind of setup."
crypto,36vglt,sapiophile,10,Sat May 23 06:00:52 2015 UTC,"While TOR is bad, timing attacks are only the top of the iceberg. It's good that someone bothered to fix them, but that doesn't fix:     The very limited and tightly controlled and monitored number of exit nodes The (justified) unwillingness of people to run exit nodes That the most likely way of de-anonymizing you is via vulnerabilities in software and protocols."
crypto,36vglt,iliasasdf,3,Fri May 22 18:10:35 2015 UTC,"I'm inclining more and more to believe that Tor needs to become P2P where everyone is an exit node.  That seems to have worked pretty well for torrenting/piracy. Imagine if torrents didn't work the way they do now and only a few ""special"" nodes would upload the content to others. That would make those targets much more appealing to law enforcement and seeders wouldn't be able to ""hide within the masses"" as they do now.  This has turned out to be such an insurmountable probable for the anti-piracy guys that they just prefer to focus on other centralized places such as websites that keep the torrents.  So we already have proof that such a P2P strategy ""works"", despite the fear of many that they don't want ""all the illegal stuff"" to go through their computers.   Also, perhaps the client could make everyone an exit node by default, but somewhere deep in the settings it could still allow people to disable their client from being an exit node and make it only a relay node. Then those who are really terrified about the prospect of being an exit node can just turn that off. Win-win right?  The current strategy of having a few thousand nodes will never work, and it's only going to become worse as NSA increases its budget and capabilities. Those thousand nodes will be overwhelmed by NSA's own nodes.  Even if we turn millions of relay nodes into exit nodes I'd still worry the NSA has the capability to mess with that, but at least it would be a much smaller chance. Also, if Tor ever gets to something like 100 million users (you never know, especially with more oppressive countries going online in the next decade) that should make it almost impossible for any agency to cryptanalize the Tor traffic - but only if we make everyone an exit node."
crypto,36vglt,sapiophile,2,Sat May 23 12:59:12 2015 UTC,"You might be interested in I2P, which is a low-latency mixnet like Tor, but has a much more decentralized, P2P model for all of its relays. Unlike Tor, however, it is intended to be a ""closed"" network, with its own services - a bit like if Tor was nothing but Onion Sites, though there are a couple of people who run Outproxies to the normal internet as well."
crypto,36vglt,vzq,1 point,Sat May 23 14:17:41 2015 UTC,"If you do that, you make it very easy to enumerate users. I can think of a few reasons that would be a bad idea-worse than the problems you are trying to address."
crypto,36vglt,autotldr,5,Mon May 25 09:26:47 2015 UTC,"This is the best tl;dr I could make, original reduced by 86%. (I'm a bot)     To counter the threat, American-Israeli researchers built Astoria, a new Tor client focused on defeating autonomous systems that can break Tor's anonymity.  Astoria adroitly considers how circuits should, according to the researchers, be made ""When there are no safe possibilities,"" how to safely balance the growing bandwidth load across the Tor network, and how to keep Tor's performance ""Reasonable"" and relatively fast even when Astoria is in its most secure configuration.  Defeating timing attacks against Tor completely isn't possible because of how Tor is built, but making the attacks more costly and less likely to succeed is a pastime that Tor developers have dedicated a decade to.     Extended Summary | FAQ | Theory | Feedback | Top five keywords: Tor#1 Astoria#2 attack#3 research#4 network#5  Post found in /r/technology, /r/worldnews, /r/news, /r/Bitcoin, /r/crypto, /r/Intelligence, /r/technology, /r/pcmasterrace, /r/DailyTechNewsShow, /r/projectastoria, /r/conspiracy, /r/anonymity, /r/TOR, /r/DeepDotWeb, /r/hackernews, /r/netsec and /r/privacy."
crypto,36vglt,F1A,6,Fri May 22 22:02:15 2015 UTC,"American-Israeli researchers built Astoria,   Sounds like it was the NSA that built this."
crypto,36vglt,trubleshanks,1 point,Fri May 22 21:58:27 2015 UTC,Exactly what I was thinking.
crypto,36vglt,conradsymes,-3,Wed May 27 17:50:33 2015 UTC,Just like TOR.
crypto,36vglt,tom-md,1 point,Fri May 22 23:42:04 2015 UTC,Nope.  Guess again.
crypto,36vglt,autotldr,1 point,Sat May 23 01:27:46 2015 UTC,"This is the best tl;dr I could make, original reduced by 86%. (I'm a bot)     To counter the threat, American-Israeli researchers built Astoria, a new Tor client focused on defeating autonomous systems that can break Tor's anonymity.  Astoria adroitly considers how circuits should, according to the researchers, be made ""When there are no safe possibilities,"" how to safely balance the growing bandwidth load across the Tor network, and how to keep Tor's performance ""Reasonable"" and relatively fast even when Astoria is in its most secure configuration.  Defeating timing attacks against Tor completely isn't possible because of how Tor is built, but making the attacks more costly and less likely to succeed is a pastime that Tor developers have dedicated a decade to.     Extended Summary | FAQ | Theory | Feedback | Top five keywords: Tor#1 Astoria#2 attack#3 research#4 network#5  Post found in /r/mistyfront, /r/technology, /r/worldnews, /r/news, /r/Bitcoin, /r/Intelligence, /r/denser, /r/crypto, /r/conspiracy, /r/theworldnews, /r/technology, /r/pcmasterrace, /r/DailyTechNewsShow, /r/projectastoria, /r/anonymity, /r/TOR, /r/hackernews, /r/DeepDotWeb, /r/netsec and /r/privacy."
crypto,36vglt,firajaa,-13,Wed May 27 00:34:36 2015 UTC,"Beat NSA? Good luck...40 years ago they had an advantage of 20 years on linear and differential cryptoanalysis. Who knows now...Good luck, seriously."
crypto,36vglt,Natanael_L,21,Fri May 22 14:34:08 2015 UTC,"That statement is a ridiculous urban legend if you read any of Snowden's leaks. If it were true they wouldn't need to coerce Google, Dropbox and such companies with FISA letters for access to information, or wouldn't need to tap non-encrypted inter-datacenter fiber lines in order to capture useful data, or bully Intel to death to allow them salting their random number generator, or capture Cisco shipments and physically tamper the devices, or force Lavabit to close because they didn't give them access, or create their own TOR servers to capture, correlate and patch traffic data (something semi-pro hacker groups have already been doing for years).   The NSA is neither ""decades ahead"" nor incredibly talented, they just have the draconian power granted to them by the Patriot Act to secretly force companies to give them access."
crypto,36vglt,hackinthebochs,6,Fri May 22 14:48:02 2015 UTC,"I'm sure they do have SOME knowledge the rest of us don't, and some really skilled experts, but they no longer have the massive advantage they used to. Not all of their staff can focus on novel research, and they're not THAT big compared to the entire rest of the world.   Their biggest advantages today is their resources and legal/political position (within the military / intelligence world). They are capable of building what the rest of us are just theorizing about."
crypto,36vglt,seattlyte,11,Fri May 22 15:09:49 2015 UTC,but they no longer have the massive advantage they used to.    Specially since the 90s when top talent stopped being captured by the government as it used to be in the past. One of the good things of the emergence of Silicon Valley is that the best people are now working for big companies rather than the government. Even NASA is experiencing this right now with the best people flocking to SpaceX and United Launch Alliance.
crypto,36vglt,me_z,5,Fri May 22 15:16:33 2015 UTC,Lets not fool ourselves: they are incredibly talented. They aren't decades ahead in encryption simply because the theory has become so good that throwing more minds and dollars at the problem has massive diminishing returns. This wasn't the case in the 70's and so they legitimately had decades advance on knowledge. But there's every reason to think that lead was impossible to maintained.
crypto,36vglt,seattlyte,4,Fri May 22 17:56:37 2015 UTC,"That's a cherry-picked list of things from the Snowden docs and it's also a highly biased narrative wrt the cherrypicked examples.  The NSA has been decrypting over 80% of VPN traffic, can attack TLS, backdoored ciphersuites, infiltrated organizations by network and by foot, can physically tamper devices, have shadow certificates, point-and-click 0day deployment, quantuminsert and MITM capabilities, have TEMPEST attacks, can bridge air gapped networks, etc. They are likely able to break 1024 bit RSA/DL, have cryptanalytic capabilities that they keep secret (these were not subject to release in the Snowden docs). Der Speigel published capabilities of the NSA to own computers at distances of 8 miles via their wireless cards.  Their use of law, coercian, deception, and impersonation are not things that they HAVE to do. They are things that they choose to do, because they work and because they are more cost and time effective.  It's true that they aren't 40 years ahead. But they are certainly a decade ahead or more ahead. It's also likely that the forced disclosure of lavabit keys was used for parallel construction - that they (FBI) already had the keys to Snowden's communications but needed to get access to them in a legal way so that they could present it in court.  But none of this addresses the spirit of the original commentator. The NSA is capable of breaking this new TOR client either by covertly backdooring the code, breaking the executable or by infiltrating exit nodes, etc. If your threat model is the NSA the only thing you can do is slow them - make it more expensive - you can not stop them. At the end of the day they are a phone call and paperwork away from the world's greatest army.  That doesn't mean slowing them isn't important. But we can't characterize the NSA as buffoons that are easy to thwart. Whether they use technical or non-technical means to achieve SIGINT, that is their charter. If you are a target they will get it."
crypto,36vglt,snatchington,1 point,Fri May 22 18:55:23 2015 UTC,Former fort Meade resident? 😁
crypto,36vglt,calcium,0,Fri May 22 23:03:53 2015 UTC,No sir. A technical and informed (I hope and try) citizen.
crypto,36vglt,calcium,2,Fri May 22 23:06:14 2015 UTC,Look up the TAO group. They are definitely the cream of the crop when it comes to talent.  The fact that they penetrating and blew up a nuclear facility should speak volumes for their abilities.
crypto,36vglt,sapiophile,1 point,Fri May 22 21:00:04 2015 UTC,"I'll be honest in saying that while I despise some of the things that the NSA does, I would probably jump at the chance to work with them as it would expose me to a myriad of technologies and a lot of the work sounds exciting."
crypto,36vglt,hackinthebochs,1 point,Sat May 23 06:01:23 2015 UTC,"If you recall, they did know about what correct S-Boxes to use back in the 1970's for DES to strengthen it against differential cryptanalysis.  At the time, everyone thought that they were using it to install a backdoor when it was actually the latter.  While they may or may not be able to break RSA/AES encryption (I'm guessing yes, but very computationally expensive) you have to admit that they possess knowledge that others don't.  Further, it's easier to backdoor your way into someone's systems and scoop up data than to try to break every piece that you come across."
crypto,36vglt,hackinthebochs,1 point,Fri May 22 17:59:02 2015 UTC,"To be fair, there are parts of Snowden's leaks (like those that discuss BULLRUN and other programs) that make reference to ""ECI"" or Extremely Compartmentalized Information - the very most secret secrets - often in proximity to discussions about compromising encrypted communications. Now, we have no idea what kind of ECI tricks they might have (we're talking about stuff that probably less than a couple hundred people - maybe even as few as a dozen - even know exists), but we do know that even with Snowden's elevated sysadmin clearance (which allowed access to many things beyond Top Secret), he was (presumably) completely in the dark about that stuff.  Of course, with any kind of capabilities like that, they're basically unusable, at least publically. And so naturally, parallel construction is essential, which can take place in the ways you describe.  Do I personally think it's likely that widely-deployed, strong crypto is routinely broken via these ECI techniques? No. But I do think that it's a possibility. Thankfully, the fact that they would never, ever, ever dare to reveal these capabilities actually makes me more or less unconcerned with it, at least for most threat models."
crypto,36vglt,Natanael_L,5,Sat May 23 06:09:07 2015 UTC,"Just to be clear, there's a huge difference between circumventing the protocol and breaking the encryption. It may very well be the case that they have some mechanism that renders the encryption irrelevant in a large class of cases. It's well known that the NSA has focused on attacking endpoints rather than trying to break encryption as the endpoints are by far the weak link in the transaction."
crypto,36vglt,me_z,1 point,Fri May 22 17:10:13 2015 UTC,"I was simply clarifying for the benefit of others, who might think its unfathomable that the NSA could have cracked RSA. I understood your points completely, but I could see how others might misunderstand the difference between circumvent and crack.  Also your quoted portions were from another comment chain."
crypto,36vglt,me_z,1 point,Fri May 22 17:53:56 2015 UTC,Sounds like sidechannel attacks or similar.
crypto,36vglt,me_z,2,Fri May 22 18:04:06 2015 UTC,Yes you can view classified on cell phones. Look up SME PEDs.   http://www.disa.mil/network-services/wireless/sme-ped
crypto,36vglt,untitleddocument37,2,Fri May 22 18:13:35 2015 UTC,"It existed way before either of them. It's not normally given out to Joe schmoe though, and definitely not for people to go home with after work. Usually there's a card or key that you get to be able to even get to anything classified."
crypto,36vglt,PM_ME_UR_OBSIDIAN,1 point,Fri May 22 18:17:13 2015 UTC,It's notoriously easier to attack the implementation vs the actual algorithm. That's probably why people are doubting you.
crypto,36vglt,Nonchalant_Turtle,-2,Fri May 22 22:40:17 2015 UTC,My first [and really last] crypto conference I went to was CRYPTO'03 in Santa Barbara ... the feds were there and taking notes.  They regularly attend things like defcon and other conferences.
crypto,36vglt,sapiophile,-16,Fri May 22 17:51:10 2015 UTC,"I wouldn't trust ""hackers"" with my security. I want scientists and experts, not people who go for the quick hack."
crypto,36vglt,PM_ME_UR_OBSIDIAN,12,Fri May 22 23:06:49 2015 UTC,"The ""hackers"" in this case are researchers. The article links to their paper, which details the timing attack and the mitigation they included in Astoria. Hackers is a pretty broadly used term."
crypto,36yc1x,R-EDDIT,1 point,Sat May 23 03:39:17 2015 UTC,More information on his blog:  http://blog.engelke.com/
crypto,36zcy8,TintexD,7,Sat May 23 12:19:27 2015 UTC,Yes.
crypto,36zcy8,slacker001,3,Sat May 23 12:25:51 2015 UTC,"Sure, why not? There can be some weird vulnerabilities if the attacker can control the contents of the inner data, but that's probably not the case here.  ETA: There might also be something about requiring a separate warrant for a search, which is interesting. Dunno if it's true."
crypto,36zcy8,phyzome,1 point,Sat May 23 12:43:23 2015 UTC,"awesome, do i have to use a second encryption programm? i used veracrypt for my external hdd"
crypto,36zcy8,sapiophile,2,Sat May 23 12:58:01 2015 UTC,"No, you don't have to use a different program."
crypto,36zcy8,phyzome,1 point,Sat May 23 16:44:29 2015 UTC,"I don't know anything about veracrypt, so hard to say."
crypto,36zcy8,angdev,1 point,Sat May 23 13:38:19 2015 UTC,"You do not need to use a second program, but it would also not hurt to use one. If the HDD is protected with VeraCrypt than using (for example): NTFS encrypted folders, WinRAR/7-Zip encrypted archives, and/or VeraCrypt mounted file volumes would provide an additional layer of protection."
crypto,36zcy8,pulsetsar,1 point,Mon May 25 21:57:39 2015 UTC,"I do this routinely:  Encrypted drive / container  -> file-based encryption of individual, sensitive files so I can still take advantage of services like Google drive without worrying they are reading my data.   There is a performance hit but this is minimal if you are using a modern processor and doing basic document editing (especially if using AES with and AES-optimized processor)."
crypto,36qk26,johnmountain,10,Thu May 21 09:36:37 2015 UTC,"Eh, Jesus Christ. You have got to be f-in kidding me:   Neither the Client Hello, the client ciphersuites, nor the chosen ciphersuite are signed by the server!   This, in TLS v1.2?  What boneheads design this protocol?  SSH v2 signs everything the client and server sent before key exchange.  How do you design a crypto handshake that doesn't sign the client hello?  And have it be used this widely? This long?"
crypto,36qk26,SushiAndWoW,12,Thu May 21 11:12:51 2015 UTC,"They may not be boneheads. Even if we are to assume incompetence, we should not rule out malice, and we should definitely strive to fight potentially malicious actors.  For example, by phasing out 1024b, which appears not to be done using reasoning I consider harmful. Compatibility does not beat security. The costs for breaches can be much greater than the costs for loss of compatibility, and you may never even find out about the former costs."
crypto,36qk26,hatessw,7,Thu May 21 12:07:43 2015 UTC,"What bothers me most about decisions such as ""Well, we can't dump this protocol yet because 30% of the servers still use it"" is that they don't also present a deadline for when they'll stop supporting that protocol.  Fine, keep 1024-bit DHE support now. But where's the deadline for when you'll drop it? Maybe they didn't want to rush such a decision and perhaps we'll still see Google announce a plan like they did for SHA1.  However, I really do believe that's how the security industry needs to think from now on. Will a protocol start to look weak in 5 years? Prepare a 3 year plan to get everyone off it. Is the protocol already too weak to be considered very secure? Create an even more aggressive plan to phase it out.   This kind of mentality needs to permeate everything security related on the web from now on. No more using 2 decades old broken crypto because it just happened to remain in the software and nobody bothered to push it out ""because it might break some things"". That excuse would not be valid if the security industry was a little more pro-active."
crypto,36qk26,xiongchiamiov,3,Thu May 21 15:33:19 2015 UTC,"Everything I've seen from the security community is precisely that. The problem is that there are a bunch of people making security configuration decisions without fully researching what they should be doing.  I place most of the blame for this on companies: everyone has specialties, so I don't expect everyone to be intimately familiar with TLS cipher suites. But there should be someone at your company who is, and if there isn't, you need to either hire one, outsource that work, or sponsor education time for someone you've already got."
crypto,36se2x,marklarledu,3,Thu May 21 19:10:48 2015 UTC,"The openssl blog has commands, you need openssl 1.0.2a to see it.  If you don't have openssl binaries its pretty easy to build.  https://openssl.org/blog/blog/2015/05/20/logjam-freak-upcoming-changes/"
crypto,36se2x,R-EDDIT,1 point,Thu May 21 20:59:35 2015 UTC,"Thanks, this did the trick. I was using an older version of openssl so that is why I wasn't seeing it before. Appreciate the help!"
crypto,36se2x,darrenturn90,2,Fri May 22 00:53:23 2015 UTC,Try this - https://weakdh.org/sysadmin.html
crypto,36of7g,marklarledu,6,Wed May 20 21:33:04 2015 UTC,Wow. Australia seems to be getting more and more fucked as time goes by.
crypto,36of7g,Chodrick,2,Thu May 21 07:52:16 2015 UTC,Don't look at me I voted Labor
crypto,36of7g,Spacesider,1 point,Thu May 21 08:34:24 2015 UTC,Labor isn't all that much better...
crypto,36of7g,LanCam,5,Thu May 21 15:26:01 2015 UTC,"I wonder what effect, if any, this will have on the Bouncy Castle library. Bouncy Castle is run by an Australian entity and according to the site   As of 7th of November 2013, the organisation looking after Bouncy Castle, Legion of the Bouncy Castle Inc. is now acknowledged as a Charity for the benefit of the public and education by the Australian Government"
crypto,36of7g,samsonx,1 point,Wed May 20 21:33:41 2015 UTC,What if you already know all about it ?  Illegal knowledge / thoughts ?
crypto,36rs3m,P-e-t-a-r,3,Thu May 21 16:38:38 2015 UTC,"TLS client auth.  You'd pass them a (possibly self-signed) X.509 cert and that would be your public token.  Then as part of the sign-in they would challenge if you know the corresponding private key.  The problem is    Teaching people to make/maintain their own X.509 cert and PKCS #8 private key (as well writing the tools to generate those) un-teaching people that personal self-signed certs are ""bad""... it's no worse than using ""jimmyjames"" as your username when you create a myfacejournal.com account Servers actually performing TLS client auth ..."
crypto,36rs3m,untitleddocument37,3,Thu May 21 16:53:24 2015 UTC,"Another problem (which is sort of a special case of #1, but much more apparent) is that lots of people use multiple devices to access accounts and getting that workflow down is very confusing."
crypto,36rs3m,n3xg3n,2,Thu May 21 18:32:11 2015 UTC,Hardware tokens!
crypto,36rs3m,Natanael_L,2,Thu May 21 19:58:28 2015 UTC,"Some servers will generate the client cert for you and install it in your browser. This solves a lot of problems, but creates others."
crypto,36rs3m,phyzome,3,Fri May 22 01:19:21 2015 UTC,uploading your private key   surely you meant public?
crypto,36rs3m,user_doesnt_exist,2,Thu May 21 22:29:49 2015 UTC,"yes, sure, sorry for my mistake."
crypto,36rs3m,Natanael_L,2,Fri May 22 07:33:15 2015 UTC,You can use challenge-response protocols like FIDO's U2F.
crypto,36rs3m,Natanael_L,1 point,Thu May 21 17:28:35 2015 UTC,"Thanks, but I was more interested in implementing it in javascript or php for RSA. Because generally Linux people for whom I am doing this are familiar with GPG, it is bigger problem the technical implementation and practical security. The other problem is second login,  the user must use key ID or fingerprint to initialize server to send challenge back."
crypto,36rs3m,Natanael_L,2,Thu May 21 19:28:55 2015 UTC,Why? That's more likely to fail due to various bugs.
crypto,36rs3m,sapiophile,1 point,Thu May 21 19:59:45 2015 UTC,"Because it is more likely that the users will use week password and there is nothing you can do. Setting up minimum number of character, or minimal entropy is partial solution since nothing is all user to use the one same address, second hash is also bad, but salting is just server side prevention, but the problem remains of one password used by many users. I do not say that RSA keys will solve all problems, but that way server doesn't stores any password at all, and all users have different keys."
crypto,36rs3m,sapiophile,2,Thu May 21 20:40:34 2015 UTC,I mean why js/php.
crypto,36rs3m,sapiophile,1 point,Thu May 21 20:52:40 2015 UTC,any other recommendations
crypto,36moii,ProINSecurity,3,Wed May 20 14:41:12 2015 UTC,Obama doesn't know what's good for people. He only knows what's good for large corporations.
crypto,36moii,sparkleselite,6,Wed May 20 23:50:22 2015 UTC,I doubt he even knows that much. He knows what he's told to know like every other politician/leader. He's not really an expert in anything other than campaigning.
crypto,36moii,KaptainKraken,0,Thu May 21 01:21:13 2015 UTC,"He did not know what he was getting in for. He doesn't even want to be there, I really think that."
crypto,36moii,chegomez,1 point,Thu May 21 04:59:46 2015 UTC,"Why would the figure-head of the most powerful State in the world, in terms of military capabilities and technology generally, support encryption? It would mean losing control. Something it can never do."
crypto,36lrbt,johnmountain,7,Wed May 20 09:17:20 2015 UTC,"This is the best tl;dr I could make, original reduced by 88%. (I'm a bot)     The Logjam attack allows a man-in-the-middle attacker to downgrade vulnerable TLS connections to 512-bit export-grade cryptography.  The attack is reminiscent of the FREAK attack, but is due to a flaw in the TLS protocol rather than an implementation vulnerability, and attacks a Diffie-Hellman key exchange rather than an RSA key exchange.  We have published a technical report, Imperfect Forward Secrecy: How Diffie-Hellman Fails in Practice, which has specifics on these attacks, details on how we broke the most common 512-bit Diffie-Hellman Group, and measurements of who is affected.     Extended Summary | FAQ | Theory | Feedback | Top five keywords: attack#1 Diffie-Hellman#2 server#3 connection#4 prime#5  Post found in /r/technology, /r/programming, /r/linux, /r/VPN, /r/crypto, /r/sysadmin, /r/TechNewsToday, /r/security, /r/realtech, /r/privacy, /r/privacy, /r/hackernews and /r/netsec."
crypto,36lrbt,autotldr,15,Wed May 20 12:30:58 2015 UTC,"Pardon my ignorance, but why the fuck is this export grade bullshit still enabled by default?"
crypto,36lrbt,HahahahaWaitWhat,6,Wed May 20 14:04:58 2015 UTC,"To support long-lived embedded systems, and legacy systems.  I agree, it should probably be disabled by default, enabled via a radio button or something.   Let's just dump TLS 1.0 and SSL v2 and v3."
crypto,36lrbt,lemon_tea,4,Wed May 20 17:27:44 2015 UTC,"Right. I'm struggling to imagine that those systems are relevant to even 1 in 10,000 of https/imaps/whatever clients.  Probably the same exact people that decided that SSL heartbeats needed to be enabled by default, or that executing code found in environment variables is an absolutely necessary feature in bash..."
crypto,36lrbt,HahahahaWaitWhat,3,Wed May 20 22:02:59 2015 UTC,It's a bot - I'm not shore it will understand you.
crypto,36lrbt,SarahC,4,Wed May 20 14:57:11 2015 UTC,"God, I suck. I mistook the bot's comment for a text post by OP. More coffee urgently needed."
crypto,36lrbt,HahahahaWaitWhat,7,Wed May 20 15:02:26 2015 UTC,Turing test: passed.
crypto,36lrbt,mochana,5,Wed May 20 21:59:27 2015 UTC,How so?  It's pretty clear to me that you're all just a bunch of badly written bots anyway...
crypto,36lrbt,BLOKDAK,1 point,Thu May 21 01:21:09 2015 UTC,"It would be, yes. But I think a renewal of the rules would be good.  What do you think?"
crypto,36lrbt,SarahC,1 point,Thu May 21 08:34:16 2015 UTC,"If there are no humans involved at all, then how can the test be said to have been passed?  I'm pretty sure the predicate is invalidated.  I'd like to see some folks work hard at proving their humanity over the Internet..."
crypto,36lrbt,BLOKDAK,2,Mon May 25 19:51:55 2015 UTC,You don't suck - it's kind of cute.
crypto,36lrbt,SarahC,4,Thu May 21 08:34:34 2015 UTC,shore   Shor would have been better ....
crypto,36lrbt,Ars-Nocendi,1 point,Wed May 20 16:31:47 2015 UTC,"But what's a shor? Shore - international, export... etc.. =)"
crypto,36lrbt,SarahC,2,Thu May 21 08:40:29 2015 UTC,"I wish it would understand at least ""fuck off and die a horrible death"". The entire concept of ""TL;DR"" is an affront to meaningful conversation. Delegating the summary to a bot is adding insult to injury."
crypto,36lrbt,TNorthover,0,Thu May 21 04:24:41 2015 UTC,Compatibility...
crypto,36lrbt,Natanael_L,3,Wed May 20 16:08:43 2015 UTC,How is this a new thing? It seems this vulnerability has been baked in for decades.
crypto,36lrbt,qubedView,4,Wed May 20 17:42:38 2015 UTC,"The new thing is the public discovery that attacks can be precomputed for a vast number of servers, much like rainbow tables.   After a week-long precomputation for a specified 512-bit group, we can compute arbitrary discrete logs in this group in minutes. We find that 82% of vulnerable servers use a single 512-bit group, allowing us to compromise connections to 7% of Alexa Top Million HTTPS sites. In response, major browsers are being changed to reject short groups."
crypto,36lrbt,Olathe,3,Wed May 20 21:42:03 2015 UTC,Learn about what DHE even is  Chrome’s post about the steps they’re taking   A good article about this great title as well   Researchers from some Universities and Microsoft published their findings regarding weak Diffie-Hellman groups. DH groups are used in some cipher suites during the exchange of symmetric keys. The researchers found that any DH parameter smaller than 2048 bits was just too weak for today’s nation-state computational power.
crypto,36nky7,aintsaint,1 point,Wed May 20 18:13:28 2015 UTC,"A section on ""Why we believe we are qualified to competently develop novel cryptographic software"" should be legally mandated on any product page like this.  Maybe you are qualified. Maybe you're not. But convince me I should trust you."
crypto,36nky7,stouset,1 point,Thu May 21 02:06:48 2015 UTC,"We always thought in situations like these people should trust documentation, code and third-party reviews, not claims of varying credibility and great titles :)  But thank you, noted, will extend the FAQ.  We believe we are qualified because core developers and cryptosystem designers of the project have / had:   corresponding formal education,  decade-long experience in designing and implementing cryptosystems in various commercial products based on other people's code,  key roles in developing solutions certified by governmental bodies for cryptography in Ukraine (a nice place in the center of Europe where most of the dev team resides) key roles in designing novel cryptographic applications used in consumer devices (some of popular Androids feature complicated cryptographic services our employees have previously designed), these applications were certified/audited by various international bodies good managerial experience in running such development (one of previous projects ran by team lead of dev team was the only CNG-compatible cryptographic provider implementing obscure governmental standards certified by MS from Ukraine).    That makes us think, while designing some of our new products, we should at least try to develop novel cryptographic framework and fail to lesser degree than others.  Sorry for tl;dr :)"
crypto,36nky7,stouset,1 point,Thu May 21 06:29:54 2015 UTC,"Thank you!  You're right that documentation, code review, and third-party audits are important. But unfortunately, crypto is so prone to error, and the field is filled with well-meaning novices making those errors.  At some point, in order for me to use a service/library/protocol, I have to have some kind of faith in the competency of its authors."
crypto,36kpxy,comfeychair,3,Wed May 20 02:29:37 2015 UTC,"In my experience validation company doesn't care about code diffs or changelog. If you do some changes you simply need to have up to date documentation and pretty much follow the same process. The revalidation process is a bit easier, you just point them to places where actually something changes, so the whole process goes a bit faster."
crypto,36kpxy,martins_m,1 point,Wed May 20 06:33:22 2015 UTC,This.  This so badly.  :(   Sad but true.  this is true.
crypto,36kpxy,throwaway0xFF00,3,Mon May 25 04:39:33 2015 UTC,"I've been through the validation process (for Level 2).  They ask you to describe the method of source code control and require that it has versioning of some sort. (This along with the fact the code must be in a high-level language are a couple of the few checks they do on the quality of the development process.) Any real source code control system easily passes.  If you make code changes during the validation process (say, in response to something that the lab points out) then you will need to resubmit the source code and something that describes/highlights the changes. What that looks like is entirely up to you and the lab to work out.  I went through the re-validation process, but the changes were so substantial that it was almost a rewrite and we didn't get much of a leg-up from the previous validation, so I'm not sure I can be much help there."
crypto,36kpxy,B-Con,2,Wed May 20 07:08:06 2015 UTC,"I have shepherded code through this process. In other words, our company did not produce it, but we submitted it for validation. We submitted API documentation and evidence that the software was under CM control. You have to use a testing lab for your review and as far as I know, any change docs would have to satisfy them. We haven't gone through a revalidation where they need to review code changes. I imagine any modern CM system can produce diffs of the code. Docs might be nice, but I expect they care about the actual code."
crypto,36kpxy,skinnybuddha,1 point,Wed May 20 03:18:04 2015 UTC,"I understand the rules for in-line documentation and the overall security policy document which will explain the important services your module will offer but do I need to make sure the engineers are documenting changes appropriately?   i can say that i have worked very closely with a validation lab before.  What your asking and what is required by the cmvp is really a big grey area.  My recommendation is that if you guys are really going to go through this, you should seriously consider getting to labs.  One lab for validatioin, the other for consulting through the process.  It helps out a lot."
crypto,36jebk,R-EDDIT,7,Tue May 19 20:42:32 2015 UTC,How CertSimple upsells a EV Certificate in 2015
crypto,36jebk,tehnugget,2,Wed May 20 00:14:02 2015 UTC,I am so looking forward to Let's Encrypt.
crypto,36jebk,ZorbaTHut,2,Wed May 20 06:54:01 2015 UTC,Not surprised Symantec is playing stupid games like this. Thanks for bringing this to my attention.
crypto,36jebk,shinjiryu,1 point,Wed May 20 01:04:24 2015 UTC,They are actually phasing it out now though.
crypto,36jebk,yuhong,2,Wed May 20 06:30:22 2015 UTC,That last sentence tho. .
crypto,36jebk,tum0ur,1 point,Wed May 20 02:33:27 2015 UTC,Some clients I quit working with will be paying 500 extra soon for this. One guess as to why I quit working for them.
crypto,36jebk,nomoon_,1 point,Wed May 20 12:38:54 2015 UTC,"Wow, this sure is a stealthy ad."
crypto,36jebk,indrora,1 point,Wed May 20 06:43:02 2015 UTC,It's rather well played. Didn't realise it was an as until the end.
crypto,36h2ql,johnmountain,4,Tue May 19 09:58:44 2015 UTC,"Guy whose job at Veriszon is to create weak crypto standards with speed as a selling point, comes up with popular fast ECC curve."
crypto,36h2ql,Godspiral,3,Tue May 19 18:27:49 2015 UTC,"Dan Bernstein is a great speaker, I really like his acid humor. He makes a fair point in that one."
crypto,36h2ql,ralpo08,1 point,Tue May 19 16:21:05 2015 UTC,"Ironically, his complete lack of participation in standards is what causes a lot of problems.  I'm an implementor of crypto and he's the crypto guy who gets paid to think up this shit.  He doesn't propose any standards of his own and then gets pissy when the public just ""doesn't get it."""
crypto,36h2ql,untitleddocument37,5,Tue May 19 17:39:01 2015 UTC,"Well I remember him participating in TLS and CFRG working groups when Curve25519 was proposed to be standardized for TLS (it can be found in archives).  BTW the standarization process is not always fun, there were for instance lengthy discussions to change Curve25519 point endianess (originally it was little endian, but people wanted the wire format to be big endian because that's usual network order)."
crypto,36h2ql,hanomalous,0,Tue May 19 19:12:54 2015 UTC,not to mention it's annoying to double and add with little endian
crypto,36h2ql,NobleSir,5,Wed May 20 04:03:47 2015 UTC,"complete lack of participation   This is simply untrue, for example here is his latest email to CFRG. It's just not his job to do.  He's mathematician. He basically invents things that are used in the crypto systems. He's done his job:   Here's the elliptic curve (Curve25519) to use for key exchange (DH: X25519, Signatures: Ed25519), here's a symmetric cipher (Salsa/ChaCha) and a MAC (Poly1305) for the actual data encryption, now please, standards guys, do your thing: make it so people could interoperably use these things for their purposes.    Me, if I was djb."
crypto,36h2ql,Nekit1234007,2,Tue May 19 19:27:49 2015 UTC,He's mathematician.   And a mighty fine programmer (although understanding or reading his code can be a fucking nightmare).
crypto,36h2ql,cunttard,2,Wed May 20 07:56:02 2015 UTC,Alternate site: https://www.win.tue.nl/eipsi/surveillance.html
crypto,36h2ql,n3xg3n,2,Tue May 19 15:53:10 2015 UTC,Can someone TL;DR this for me? I'm at work and can't watch it!
crypto,36h2ql,angdev,3,Tue May 19 17:24:15 2015 UTC,"Pretend we're big telco.  Big Telco likes big data and loves to share it around.  Crypto complicates these matters. Let's give the pretense of crypto by providing seemingly acceptable weak crypto that has a very restricted threat model, which is convenient to work around.  Let's infiltrate the standards process for protocols like HTTP/2 and make things like encryption as optional (as opposed to always on).  We also need to get on standards committees and subvert the crypto so it is in our favour. People like ""nothing up your sleeve numbers"" and we can manipulate things in a nice way to get the public to adopt our dodgy crypto that we know secrets about and know how to subvert. Yay!"
crypto,36h2ql,cunttard,1 point,Wed May 20 07:54:59 2015 UTC,Link doesn't seem to be working?
crypto,36h2ql,XenonOfArcticus,3,Tue May 19 12:48:52 2015 UTC,"Slides: http://cr.yp.to/talks/2015.05.08/slides-djb-20150508-a4.pdf  Original link is video, I guess, doesn't work here either."
crypto,36h2ql,domen_puncer,1 point,Tue May 19 13:08:31 2015 UTC,Is this new?  It looks like his BADA55 talk to me.
crypto,36f0bh,davidsmith53,7,Mon May 18 21:42:40 2015 UTC,"You could, but it would probably still suffer some of the weaknesses of Enigma and would probably be insanely complex and slow with crazy keys. So it could be done, but it wouldn't offer any speed, efficiency or security benefits over AES."
crypto,36f0bh,skintigh,3,Tue May 19 03:12:48 2015 UTC,Look here for relevant discussions:  http://www.metzdowd.com/pipermail/cryptography/2015-January/thread.html#24252
crypto,36f0bh,Natanael_L,3,Mon May 18 22:01:20 2015 UTC,"Rotor systems have inherent weaknesses. For example, Kerckhoffs' Symmetry of Position attack."
crypto,36f0bh,silverforest,1 point,Tue May 19 17:22:12 2015 UTC,Dont forget to to remove the reflector
crypto,36e3k7,Need-Security,11,Mon May 18 17:42:06 2015 UTC,"Use Signal. Telegram has a very poorly designed cryptosystem.  Signal does not upload your contacts to the server, instead it does a complicated query against a local encrypted bloom filter: https://whispersystems.org/blog/contact-discovery/  Open Whisper Systems understands the problem really well and they have developed really good crypto. (WhatsApp is in the process of deploying the TextSecure/Signal cryptosystem across their entire userbase)"
crypto,36e3k7,titanous,1 point,Mon May 18 18:17:26 2015 UTC,"What about the lack of a secondary passcode on the device?  Edit: Also, is Telegram so bad that I should warn people I know who use it in totalitarian countries?"
crypto,36e3k7,dareksam,8,Mon May 18 18:23:26 2015 UTC,"Well. With Telegram we just don't know. They have had severe weaknesses in their protocol (such as the server being able to MITM any newly started secure communication). The protocol is weird, with weird key stuff, weird encryption mode and no real authentification.  Textsecure provides good forward secrecy, telegram some weird ""new key every fifty to hundred messages"", and their key verification has some weaknesses."
crypto,36e3k7,dareksam,1 point,Mon May 18 20:06:17 2015 UTC,Can you provide a link for me to send out? Thanks
crypto,36e3k7,DrWhax,7,Mon May 18 22:58:50 2015 UTC,"It is a bit technical, but: http://www.cryptofails.com/post/70546720222/telegrams-cryptanalysis-contest  That summarises most of the criticism.   The time their protocol was shown to be broken: http://translate.google.com/translate?hl=en&sl=ru&u=http://habrahabr.ru/post/206900/  And of course Moxie's post about how their crypto contest was broken beyond belief: http://thoughtcrime.org/blog/telegram-crypto-challenge/  And then there has been lots of small stuff like this: http://blog.hackapp.com/2013/12/telegram-secret-chat-geolocation-leak.html"
crypto,36e3k7,Natanael_L,5,Tue May 19 06:42:06 2015 UTC,"One can setup a passcode for the phone and a passcode to unlock the encrypted message database of Textsecure, i'm not sure whether that is also the case on iOS's Signal.  I would advice Signal/Textsecure over Telegram anytime to anyone."
crypto,36e3k7,gpennell,3,Mon May 18 19:48:07 2015 UTC,Telegram encrypted chats can have the authentication cracked in 264 computations. Not the slightest safe against a totalitarian government.
crypto,36e3k7,Natanael_L,6,Mon May 18 21:56:53 2015 UTC,"Hey there. I run a local Cryptoparty so I'm at least kind of up-to-date on this stuff.  Start with the EFF's Secure Messaging Scorecard. Keep in mind that the checks are not endorsements. A tick for being audited doesn't mean that the audit was thorough, but rather that they at least tried.  You need to think about your threat model. You've got some answers in here so far that may be fine, or may be the opposite of what you want. Is anonymity important to you? Are you just trying to avoid mass surveillance, or are you being specifically targeted?  iMesaage seems pretty good if you believe its design document. Way better than SMS, I'm sure it's well-tested. But it's proprietary and we ultimately have to trust that Apple isn't being evil. Ditto that for Threema. You have to look deep within yourself and decide whether you can trust corporations and government with your privacy.  For me, it must be Free software to even qualify.  There are lots of new, shiny applications out there that do neat stuff. That's great for tinkering around with, but it's not usually the case for betting your life on. Bit message and Tox, for example. Really cool stuff, but I'm not ready to trust it yet. They're not yet serious contenders, but I'll be very excited when they are.  TextSecure and Signal, while new by crypto standards, are being actively developed by security and cryptography professionals who have endeared themselves to the community through their integrity and hard work. It is seeing significant use and is under lots of scrutiny, not that that guarantees anything. I use them and recommend to all my friends. A desktop (web) client is in the works.  If you need asynchronous communication like email, OpenPGP is where it's at. No, RSA is not dead. Download GPGTools for Mac OSX and try it out. Do yourself a favor and learn it from the command line.   OTR is great for encrypted IM. Adium includes it. There are also some caveats to Pidgin and Adium, with them having a bad history with security. If mass surveillance alone is your concern, I wouldn't sweat it too much. Otherwise, keep looking or educate yourself on the weaknesses of these programs. Conversations is a client that I can tentatively recommend (Android-only).  Neither of these tools by themselves provide anonymity. You have privacy, but your adversary knows who is involved in the conversation. If you need that, download the Tor Browser and use GnuPG or OTR from there. Better yet, use the TAILS live distro. Read the docs on how to stay safe on Tor.  Just whatever you do, don't listen to Reddit comments.  Look at Wikipedia, look at what experts in the community are saying, and read the discussion among them. Try to learn how stuff works. You should know how good a 2048 bit RSA key is, or the differences between RSA and Diffie-Hellman. You should understand why the only proven unbreakable cryptosystem isn't ever used. Just make sure you're doing it for yourself, and aren't trusting Reddit. These people are misleading you, even if they're not wrong. Except Signal guy. He's fine.  Stop using Telegram until they get their protocol sorted out better and begin to see positive feedback from those who are qualified to critique it.  Reply for clarification or questions.  PM me if you need to. I'm here to help."
crypto,36e3k7,johnmountain,2,Tue May 19 04:53:27 2015 UTC,"Is anonymity important to you?   In this particular instance, yes it is, at least with certain communications.   Are you just trying to avoid mass surveillance, or are you being specifically targeted?   Both. There is a real danger of specific targeting under certain totalitarian governments, but dragnet surveillance is most certainly going to be taking place. Specific targeting is uncertain at this stage.  I currently don't use the Tor Browser, GnupG or OTR. I will check them out. Thank you.  Edit: I had not heard about TAILS before. I just looked it up. Can I boot it off my system or should I have a separate USB that I use to boot it up for the stuff I need to keep extra secure?"
crypto,36e3k7,Natanael_L,1 point,Tue May 19 04:59:59 2015 UTC,"You should boot tails from a CD, ideally"
crypto,36e3k7,tasty-fish-bits,1 point,Tue May 19 10:34:30 2015 UTC,"You might want to take a look at:  https://github.com/ricochet-im/ricochet  https://pond.imperialviolet.org/  Both work only over Tor, but they are still experimental. Otherwise see if you can find something you like here:  https://www.privacytools.io/  And you might want to give Peerio a try. It uses https://minilock.io/ to encrypt everything on the client side, and keeps the data for easy access on Peerio's servers (kind of like Spideroak in that regard, except it's a messaging/email-like client).  On mobile Signal/TextSecure is your best bet."
crypto,36e3k7,Natanael_L,1 point,Tue May 19 12:30:48 2015 UTC,I may have some problems connecting to Tor. I have heard it is blocked where I am going.
crypto,36e3k7,tasty-fish-bits,1 point,Tue May 19 13:35:07 2015 UTC,Look up bridges / trusted peers
crypto,36e3k7,tasty-fish-bits,3,Tue May 19 16:27:05 2015 UTC,"With today's threat environment, you need to not only encrypt the communication content, but you need to cryptographically obscure the fact that communication is occurring at all."
crypto,36e3k7,DenisMN,1 point,Tue May 19 01:35:21 2015 UTC,How can I do that?
crypto,36d1tq,initramfs,7,Mon May 18 12:25:28 2015 UTC,"For comparison, i had to lookup what Android does for password storage:  For passwords:  /*      * Generate a hash for the given password. To avoid brute force attacks, we use a salted hash.      * Not the most secure, but it is at least a second level of protection. First level is that      * the file is in a location only readable by the system process.      *      * @param password the gesture pattern.      *      * @return the hash of the pattern in a byte array.      */     public byte[] passwordToHash(String password, int userId) {         if (password == null) {             return null;         }         try {             byte[] saltedPassword = (password + getSalt(userId)).getBytes();             byte[] sha1 = MessageDigest.getInstance(""SHA-1"").digest(saltedPassword);             byte[] md5 = MessageDigest.getInstance(""MD5"").digest(saltedPassword);             byte[] combined = new byte[sha1.length + md5.length];             System.arraycopy(sha1, 0, combined, 0, sha1.length);             System.arraycopy(md5, 0, combined, sha1.length, md5.length);             final char[] hexEncoded = HexEncoding.encode(combined);             return new String(hexEncoded).getBytes(StandardCharsets.UTF_8);         } catch (NoSuchAlgorithmException e) {             throw new AssertionError(""Missing digest algorithm: "", e);         }     }   And for patterns:  /*      * Generate an SHA-1 hash for the pattern. Not the most secure, but it is      * at least a second level of protection. First level is that the file      * is in a location only readable by the system process.      * @param pattern the gesture pattern.      * @return the hash of the pattern in a byte array.      */     public static byte[] patternToHash(List<LockPatternView.Cell> pattern) {         if (pattern == null) {             return null;         }         final int patternSize = pattern.size();         byte[] res = new byte[patternSize];         for (int i = 0; i < patternSize; i++) {             LockPatternView.Cell cell = pattern.get(i);             res[i] = (byte) (cell.getRow() * 3 + cell.getColumn());         }         try {             MessageDigest md = MessageDigest.getInstance(""SHA-1"");             byte[] hash = md.digest(res);             return hash;         } catch (NoSuchAlgorithmException nsa) {             return res;         }     }   I'm somewhat horrified.   Especially after learning that Google had a good algorithm for storing full disk encryption key (using scrypt as well as the RSA hardware bound key).  Edit: And the default scrypt parameters they use are:  #define SCRYPT_DEFAULTS { 15, 3, 1 }   which works out to:   N (cost): (1 shl 15) = 32,768 r (block size factor): (1 shl 3) = 8 p (parallelization factor): (1 shl 1) = 1   This also means that it will require:   Memory: 128×32768×8×1 bytes = 32 MB Iterations: 32,768   They also note the parameters should be chosen that it should take about 1 second to derive the key  /**  * Gets the default device scrypt parameters for key derivation time tuning.  * The parameters should lead to about one second derivation time for the  * given device.  */   So you definitely want to enable full-disk encryption, to ensure someone cannot read the simple SHA-1 hash of your password off the flash."
crypto,36d1tq,JoseJimeniz,1 point,Mon May 18 15:24:42 2015 UTC,Image no longer available. Re-upload?
crypto,36d1tq,Natanael_L,3,Mon May 18 15:41:01 2015 UTC,"It worked for me; but i hotlinked it off stack.imgur.com. Maybe they don't like that. Copied-pasted it to imgur proper, and updated link."
crypto,36airj,R-EDDIT,6,Sun May 17 19:51:29 2015 UTC,"I love posts that are clearly written, step-by-step, describe the topic of the post, then work through it logically to the end."
crypto,36airj,atoponce,3,Sun May 17 21:29:41 2015 UTC,"NIST has a budget of a billion dollars a year, and somehow it still ends up recommending shit crypto. I wonder why that is."
crypto,36airj,johnmountain,2,Sun May 17 20:55:02 2015 UTC,There was a little bit about the groupthink which led to this error in the HN thread on this.
crypto,36airj,throwaway,1 point,Mon May 18 04:31:01 2015 UTC,The mother of all throwaways! I'm impressed :)
crypto,36airj,Natanael_L,2,Mon May 18 15:42:04 2015 UTC,"I think ""shit crypto"" is a little strong, other than the obvious DUAL_EC_DRBG.  Do you have a specific complaint?  GCM and CCM aren't the best that can be done, but they aren't absolutely shit either."
crypto,36apf0,johnmountain,10,Sun May 17 20:48:52 2015 UTC,"The actual key was not factored. It was a faulty, invalid key."
crypto,36apf0,deathfantasy,9,Sun May 17 21:20:07 2015 UTC,A good article on the matter:  https://blog.hboeck.de/archives/872-About-the-supposed-factoring-of-a-4096-bit-RSA-key.html
crypto,36apf0,gsuberland,1 point,Sun May 17 22:24:10 2015 UTC,This. I've posted a summary in /r/netsec.
crypto,36apf0,janschejbal,8,Mon May 18 02:59:41 2015 UTC,From the article:   And the first factor - get a load of this - is 231.
crypto,36apf0,DoWhile,6,Sun May 17 20:53:55 2015 UTC,Which equals 3*7*11.  Even a quantum computer could factor that! :p that was a pun about the slow progress in quantum factoring
crypto,36apf0,Natanael_L,1 point,Sun May 17 21:13:31 2015 UTC,"I don't think that was a pun, though."
crypto,36apf0,Natanael_L,1 point,Sat May 23 20:24:55 2015 UTC,Semantics
crypto,36apf0,Natanael_L,1 point,Sat May 23 21:30:16 2015 UTC,"No. Not really. If something isn't a pun, it isn't a pun. I don't know why you'd even be in this sub if you don't agree with that. There is an algorithm to a pun. You don't know what a pun is."
crypto,36apf0,gordon_quad,1 point,Sat May 23 21:33:24 2015 UTC,"English isn't my native language. ""Jokes"" and ""puns"" are normally interchangeable to me"
crypto,36apf0,pred,1 point,Sat May 23 21:37:02 2015 UTC,"a pun is when you use a word in the way it is not usually meant to be used, but to deliver some understanding nonetheless from within the context.   If someone sawed down a tree and then a person said... ""I saw what you did there..."" then it would be a pun.  Hope that makes sense."
crypto,36apf0,LeoPanthera,2,Sat May 23 21:44:27 2015 UTC,A bit small for 4096 bit key and (surprise-surprise!) - not a prime.
crypto,36apf0,ZenithalEquidistant,3,Sun May 17 21:13:06 2015 UTC,"not a prime   The fact that this ""issue"" is barely mentioned in the post, even though the author factorizes the number for us, is almost the best part."
crypto,36apf0,phyzome,4,Mon May 18 09:21:39 2015 UTC,"From Hacker News   It is highly likely that this is the work of a troll. The RSA subkey that was factored has an invalid self-signature in hpa's public key, which means that it wasn't really hpa who added the subkey. Since the sks-keyserver pool doesn't verify signatures, anyone could have inserted that subkey. So anyone could have purposefully picked an exploitable RSA subkey, added a fake signature to it, and uploaded it to the sks-keyserver pool. Luckily, GPG will drop the subkey when retrieving hpa's public key since it doesn't have a valid self-signature. But for anyone scanning all the public keys without verifying signatures (for research, etc.), this key might get recognized and cause a shitstorm. Which is exactly what has happened. So far, there's no evidence that there is a conspiracy to weaken RSA keys. There is only evidence that someone inserted a bogus subkey into hpa's public key. There will be evidence of a conspiracy if we find a weak RSA key in the strongset that has a valid self-signature."
crypto,36apf0,janschejbal,2,Mon May 18 05:34:56 2015 UTC,"On a scale from ""academic interest"" to ""oh shit they've broken RSA"", how bad is this?"
crypto,36apf0,Innominate8,4,Sun May 17 21:13:45 2015 UTC,"""Amusing story."" See the other comments, this was just a corrupted copy of a key."
crypto,36apf0,Natanael_L,2,Sun May 17 22:53:07 2015 UTC,Unless your PGP implementation doesn't properly validate self-signatures.  GPG does.
crypto,36apf0,blowupbadguys,3,Mon May 18 01:49:06 2015 UTC,"If this were a valid subkey, which it isn't, it'd be ""oh shit another Debian OpenSSL fiasco"" - not more, not less. Not any risk for proper implementations, but lots of compromised keys. Since it's just a bunch of garbled bytes in a subkey, I agree with phyzome."
crypto,36apf0,Mirrory,1 point,Mon May 18 03:01:33 2015 UTC,It looks more like people jumping to conclusions about breaking crypto when there is pretty clearly something wrong with their process. They factored something that looks superficially like an RSA key but probably isn't.
crypto,36apf0,ivosaurus,0,Tue May 19 00:02:11 2015 UTC,"It is on the scale ""RSA is still safe but check your RNG now!"""
crypto,36apf0,autotldr,6,Sun May 17 21:16:13 2015 UTC,Not really. There's no evidence the key is a result of a weak or faulty RNG. It may just be garbage someone uploaded to the key server.
crypto,36ak7l,iefox,2,Sun May 17 20:03:53 2015 UTC,"I would recommend crypto-101 https://www.crypto101.io/ Start with the video, there is a free book that continues the course.  EDIT: it is better to say why I think crypto-101 is a good introduction. Their aim was to give practical cryptography bases for programmers to stop doing shit (basically) so it is very easy to get started if you are interested in commonely used crypto and know a bit of programming. The hard math stuff can be added later.  Otherwise, Schneir's Applied Cryptography is always a good call but you have to take in account that is it quite old now so some parts are outdated."
crypto,36ak7l,cym13,5,Sun May 17 20:16:14 2015 UTC,Instead of Applied Cryptography perhaps pick up Cryptography Engineering instead as it is more recent.
crypto,36ak7l,silverforest,1 point,Sun May 17 20:19:14 2015 UTC,"Guys, maybe you can help me, I'm on the road right now & away from my books.  I have both the Schneier books, and they do a great job of explaining their material in a very readable way (Cryptography Engineering in particular), but I felt that they came up short in a few areas.   I can't double-check the books since I'm away, but my recollection is that material on the following topics are thin-to-nonexistent:   public key crypto authenticated encryption elliptic curve crypto   Note that I said /thin/ to non-existent.  I always recommend Christof Paar's excellent ""Understanding Cryptography"" - to me, it's simply outstanding.  Very readable, covers a breadth of topics, explains the underlying principles, full of useful examples, thought-provoking exercises / questions at the end of each chapter, etc."
crypto,36ak7l,TheSuperficial,1 point,Wed May 20 14:48:02 2015 UTC,Christof's book is a thing of beauty .....
crypto,36ak7l,Ars-Nocendi,1 point,Wed May 20 16:29:51 2015 UTC,why not cryptography and network security by William stallings
crypto,36ak7l,dominic_rj23,1 point,Mon May 18 01:53:31 2015 UTC,"Depending on how basic you want to get, I've found this article to be a great primer:  http://arstechnica.com/security/2013/10/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/"
crypto,3677mb,fabrizziop,2,Sat May 16 20:55:33 2015 UTC,"3-AES256-EDE   why? Even AES128 is enough for almost any use case, but Triple-AES256 sounds like total overkill and just a waste of CPU cycles."
crypto,3677mb,maetthu,3,Sun May 17 06:23:22 2015 UTC,"Seriously, the only reason EDE existed was because DES had 56-bit keys and 3DES with EDE is for compatibility with existing hardware that implemented DES."
crypto,3677mb,cunttard,1 point,Sun May 17 10:56:39 2015 UTC,"Would EEE (or DDD) mode be more ""secure""?."
crypto,3677mb,maetthu,4,Sun May 17 11:03:43 2015 UTC,"No, that's no the point. DES has no serious weakness except the key length, that's why it made sense to chain 3 together, EDE is because it's easier to support single DES (just use the same key for all 3 calls). As far as I know, there's no difference as security goes in which order you call them... but as AES256 does not have a weak key length, there's no reason to call it 3 times."
crypto,3677mb,cunttard,2,Sun May 17 11:14:08 2015 UTC,No and it is complicated because of meet in the middle attacks.
crypto,3677mb,gsuberland,3,Sun May 17 12:54:49 2015 UTC,"Meet in the middle attacks against AES-128 would be entirely computationally infeasible, though. You'd need 2128 × (128 / 8) = 5.44×1015 yottabytes of storage, and even then you'd only bring the attack down to 2256 operations.  The only reason they're of note for 3DES is that it brings you from 2168 operations down to 2112 operations (below the 128-bit safety margin) with a requirement of only 256 × (64 / 8) = 576.5 PB of storage, which is arguably feasible given that large organisations already have more than that amount of data."
crypto,3677mb,autowikibot,1 point,Sun May 17 14:09:42 2015 UTC,Meet-in-the-middle attack:       The Meet-in-the-Middle attack (MITM) is a generic space–time tradeoff cryptographic attack.    Image i     Interesting: 3-Subset Meet-in-the-Middle attack | Key whitening | ARIA (cipher) | Man-in-the-middle attack   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words
crypto,3677mb,silverforest,2,Sun May 17 12:55:23 2015 UTC,Read this paper completely if you're interested in cascades. This tradeoff is generally not worth it.
crypto,3677mb,maetthu,1 point,Sun May 17 17:32:27 2015 UTC,"It's still a toy project. More like, why not?. It's like the use of 8192 bit RSA. To be hilariously overkill."
crypto,3677mb,gsuberland,2,Sun May 17 10:47:45 2015 UTC,"8192 bit RSA has way less than 256 bit security, still overkill though ;) your triple-AES setup would have ~512 bit, you could even argue that at these key lengths, meet in the middle is not really a concern in practice bzc of the huge memory trade off (so it's probably more than 512). If you think about how much it takes to even break a 128 bit key by exhaustive search, ""hilariously overkill"" starts way earlier than you'd think :)"
crypto,3652cs,bigshmoo,3,Sat May 16 05:28:03 2015 UTC,"So you want the only requirement to be 8 characters or more? That's a recipe for disaster.. I hope you have other protections in place to combat brute force/dictionary attacks, etc."
crypto,3652cs,kizzzzurt,1 point,Sat May 16 14:42:03 2015 UTC,"8 characters is what gmail is doing.  The whole one upper, one lower one special one number nonsense doesn't really add much entropy because the vast majority of users add an initial cap and a trailing digit or ""!"".  Better to ban the top 10,000 well-known passwords and all dictionary words and add a strength meter. IMHO"
crypto,3652cs,kizzzzurt,2,Sat May 16 16:17:48 2015 UTC,"You didn't list any of those other mitigating factors at all. If you are layering that level of security on the authentication then be my guest. Be forewarned, a lot of people will be just as annoyed in terms of end user and usability. If Google does it though, you can imagine it's pretty good methods and has been ran through some decent testing."
crypto,3652cs,Natanael_L,1 point,Sat May 16 16:20:24 2015 UTC,"Because they have good bot detection, that's why they can tolerate <12 characters"
crypto,3652cs,kingkilr,1 point,Sat May 16 21:22:53 2015 UTC,"Yeah, the old trade-off between usability and security - our users won't accept a 12 character requirement.  I had to fight to get the 16 character max removed (don't ask).   I'm fighting corp IT who want 7 char with mixed case and one non-alpha which if the user does the leading cap trailing symbol thing is about 30 something bits of entropy (but PCI says it's good so it must be :-).  We do have good rate limiting."
crypto,3652cs,conradsymes,3,Sat May 16 23:58:04 2015 UTC,https://github.com/dropbox/zxcvbn is one that I'm aware of
crypto,362ntu,johnmountain,22,Fri May 15 16:12:15 2015 UTC,Can I complain about a too large DHS that needs to be reduced in size and power?
crypto,362ntu,AnAirMagic,12,Fri May 15 21:10:23 2015 UTC,We already have a Department of Defense.  Why is there also DHS?  It's just a power grab made possible by post-9/11 hysteria.
crypto,362ntu,FermiAnyon,3,Sat May 16 01:58:34 2015 UTC,"I know this seems like a bull shit answer, but different charters. Both departments are responsible for different things. DHS is responsible for things like protecting the national grid and immigration laws, and also have the Coast Guard under them. Kind of weird of them to say there's too much cyber security though."
crypto,362ntu,me_z,3,Sat May 16 11:11:05 2015 UTC,No - you can't.
crypto,362ntu,sd002002,12,Sat May 16 00:43:27 2015 UTC,These fucking dicks go around looking in everyone's windows and then have the balls to complain when we close the curtains. What the fuck did they expect?!
crypto,362ntu,BigPoopBreakfast,2,Sat May 16 04:19:22 2015 UTC,For things to remain that easy forever.
crypto,362ntu,TheMasterpass,4,Sat May 16 09:24:36 2015 UTC,"As someone in the security profession, I can confidently say the DHS is clearly not using the same Internet as I am if they're having this problem."
crypto,362ntu,stouset,3,Sat May 16 11:23:51 2015 UTC,Do even investigative detectives and intel analyists expect cheap and easy data and/or their adversaries to do their jobs for them now?  Where do I click for felony evidence?  Maybe they can outsource shooting people to robot gun monkeys. Call it the cyber-banana detail.
crypto,362ntu,rattus,2,Fri May 15 21:02:57 2015 UTC,Maybe they can outsource shooting people to robot gun monkeys. Call it the cyber-banana detail.   You mean drones?   They're working on it.
crypto,362ntu,sfw247,7,Fri May 15 21:57:41 2015 UTC,"Why would local law enforcement POSSIBLY be tracking terrorists online? Don't they have other things to do, like shooting black people?"
crypto,362ntu,push_ecx_0x00,0,Sat May 16 00:45:24 2015 UTC,Why not Zoidberg both?
crypto,362ntu,ThePooSlidesRightOut,2,Sat May 16 04:30:15 2015 UTC,"Good lord, they're on pair with people who believe that making something illegal stops the criminals from their activities."
crypto,362ntu,PM_ME_DOGECOINS,1 point,Sat May 16 13:25:09 2015 UTC,Meeting that quota is definitely becoming more of a challenge.
crypto,3643a4,initramfs,12,Fri May 15 23:14:12 2015 UTC,"I find this API to be deeply embarrassing and super problematic.  The blog post states:   These functions have been designed to be usable by those without a technical understanding of cryptography   But that's obviously not true. Sure, they picked a bunch of defaults so that anyone can type Encrypt without knowing stuff, but it's not usable in the sense that anyone could pick this up and get a secure construction. AES in CBC mode, it's not even like there's an HMAC lying around, so no one is actually going to get a properly authenticated encryption construct (there aren't even AEAD modes, like GCM, available). The RSA stuff is in PKCS1v1.5 mode, which has many known problems, not OAEP by default, and the docs blindly demonstrate encrypting with the private key without explaining why (hint: it doesn't provide confidentiality), or providing a signature API at all.  In short, despite their claim, there is a 0% chance anyone will ever use these APIs to achieve a secure result."
crypto,3643a4,kingkilr,3,Sat May 16 14:20:55 2015 UTC,"Since I am merely a layperson in the field: are there any benefits in using the ""Wolfram Language"" rather than Cryptol when designing and analyzing algorithms? I imagine that it would make it easier to teach cryptography to mathematicians whom already have a familiarity with Mathematica, but do the tools available scale to real research?"
crypto,3643a4,3pg,3,Sat May 16 04:05:35 2015 UTC,"Considering /u/kingkilr's comment, this shouldn't be used for more than demos.  Would be nice if this was cleanly integrated with various statistics tools so you could show how character distribution and entropy estimations changes."
crypto,3643a4,Natanael_L,2,Sun May 17 08:37:22 2015 UTC,"The only thing this api is good for is for people studying crytpo. Actually, it is great for that, and I am using it for that...I wish they would further expose the primatives, but you can get there by specifying ECB mode.   BUT, as you know, you should never use these building blocks and try to build your own protocol.  In the instant case, there should be a authenticated encryption function using a standard AEAD system like GCM, CCM or EAX, if they intend to use this for confidentiality.  And there are other issues..."
crypto,363ebr,johnmountain,1 point,Fri May 15 19:39:34 2015 UTC,"Eh. Better than Lavabit, but still no say to show that it's running the code that has been open-sourced. Won't protect against state actors or even lucky malware."
crypto,363ebr,phyzome,1 point,Fri May 15 20:48:43 2015 UTC,"About same IMHO. Still just javascript encryption in the browser. Can be attacked through XSS and by a malicious server, etc..."
crypto,3645sd,Steve132,8,Fri May 15 23:37:42 2015 UTC,"I'm just a practical crypto user, not a cryptanalyst, and not even a mathematician. Therefore, consider that if I see ways to crack this, ... Well. You get the point.  Your C++ and STL usage seems elegant and nice. But:   You're XOR-ing against a key stream generated by the 64-bit version of Mersenne Twister, which is not cryptographically secure: ""observing a sufficient number of iterations (624 in the case of MT19937, since this is the size of the state vector from which future iterations are produced) allows one to predict all future iterations."" This makes for an easy known-plaintext attack. Your key has at most 64 bits of entropy, which is trivially brute forceable with today's hardware.  You're not using an IV, so any two messages ""encrypted"" using the same key can be recovered trivially.   All in all - if you use this to encrypt something valuable, you might create an afternoon of fun for a hacker."
crypto,360g59,_Zer0_Cool_,12,Fri May 15 01:22:19 2015 UTC,"I've heard that Cryptography is used very lightly in the Security field (I'd go for Digital Forensics, Pentesting, or InfoSec staff position).   It really depends.  There are specialized pentesters that focus on getting around crypto.  there are other pentesters that focus on other aspects of vulnerabilities.  Many vulnerabilities are in fact not cryptographic in nature.    If you're that concerned about your math, I would honestly suggest you try Cryptography I from Dan Boneh at coursera as a dry run to your course in your masters program.  Other resources that might be handy Handbook of Applied Cryptography by Menezes et. al and Modern Cryptography by Katz and Lindell"
crypto,360g59,throwaway0xFF00,3,Fri May 15 02:37:21 2015 UTC,Check and check. Super helpful. Thanks!
crypto,360g59,tbid18,4,Fri May 15 02:43:41 2015 UTC,"I don't know about Menezes, but Katz and Lindell is fairly mathematical; it is proof-based. That said, it is self-contained, and I would recommend it to anyone trying to attain a more rigorous perspective on cryptography. Introductory crypto doesn't have intense math, though it does take effort to learn.  In any case, I would be surprised if a Cyber Security program requires mathematical knowledge well beyond Katz and Lindell. You will probably be expected to know definitions, when to use what protocols, limitations, etc., but I would not think everyone would be expected to know the in-depth mathematical machinery unless you had a specific focus on crypto implementations."
crypto,360g59,Elyotna,1 point,Fri May 15 04:03:38 2015 UTC,Rad!  Thanks
crypto,360g59,moop__,4,Fri May 15 18:55:12 2015 UTC,"I did a master in Computer Science / Electronic Banking and had the opportunity of having an Applied Cryptography class I enjoyed a lot.  Now I don't consider myself a math enthusiast either, but what was required to understand the scope of the class was really not that hard :   Some work on prime numbers (Fermat Theorems..) will be necessary for things such as RSA, ElGamal.. Some statistics / probability for things such as hashing and symmetric crypto.   Things started to get complicated when we went into lattice based crypto, and the mathematical proofs behind some of the problems such as the shortest vector (SVP). Advanced notions such as homomorphic encryption and zero-knowledge proofs were quite a challenge too, but the math part was more of a bonus than anything really.  The most important thing in crypto is, imo, to grasp the concept of each term : asymetric crypto, symetric crypto, hashing [..], their use individually and how they can be used together. And how you can fuck everything up when implementing it."
crypto,360g59,fadogoeth,1 point,Fri May 15 02:41:16 2015 UTC,Awesome! Good to know.   Thanks.
crypto,360g59,Innominate8,4,Fri May 15 18:53:33 2015 UTC,"My experience (degree w major in network sec) is that math is used very differently in crypto. We had to do a few by-hand encryptions/decryptions in exams and really it was just learning about the modulo operator and exponents.   It's not that hard to grasp; my math background is that of gaming graphics -- so insanely different to crypto.  It's more interesting learning why these operations are so time consuming for computers to figure out IMO.   You'll be fine as long as you study. If you feel like you're getting a bit behind, go to consultation or talk with someone so you catch back up."
crypto,360g59,skepticscorner,2,Fri May 15 02:29:17 2015 UTC,Awesome. Thanks for the advice.   Yeah. I'll definitely utilize any resources I can.
crypto,360g59,skepticscorner,3,Fri May 15 02:43:04 2015 UTC,"I'm 30, hadn't done math since high school and completed a course in Crypto as part of my Masters degree a few months ago with a score of 90%. If it's broken down well by the instructor, the math is pretty simple. I highly recommend Christof Paar's book and lectures (you can find them on YouTube). He explains things really methodically and his passion for the subject shines through. I thought I was not 'a math person' until I worked through this stuff. Now I'm starting a PhD in Crypto in October. Go for it. :)"
crypto,35zya0,user_doesnt_exist,8,Thu May 14 22:44:32 2015 UTC,inb4 it gets moved again
crypto,35zya0,bsmt,5,Thu May 14 23:12:30 2015 UTC,I bet he forgot to delay it.
crypto,35zya0,funky_vodka,6,Thu May 14 23:13:19 2015 UTC,Last time it was supposed to start the next day... Then got moved.
crypto,35zya0,zeroXten,4,Fri May 15 00:02:23 2015 UTC,"Delayed again, what a surprise.  Does anyone know why it keeps getting delayed? Is the course material just not ready, or is it a matter of enrollment or what?"
crypto,35zya0,Sostratus,3,Fri May 15 17:40:08 2015 UTC,@touced   2015-03-31 20:25 UTC  Stanford’s Cryptography II course is like the big foot of online courses     This message was created by a bot  [Contact creator][Source code]
crypto,35zya0,TweetsInCommentsBot,2,Fri May 15 17:40:14 2015 UTC,Material isn't ready yet
crypto,35zya0,bearsinthesea,2,Fri May 15 22:10:58 2015 UTC,I've heard good things about that (the first) class.
crypto,35zya0,B-Con,5,Fri May 15 01:40:24 2015 UTC,"If you're talking about the crypto 1 class Dan Boneh offers on Coursera I thought it was amazing. Really difficult though, particularly if you go the extra mile and do the programming assignments. The weekly quizzes you could guess your way through without fully understanding the concepts.  He covers the OTP, block ciphers, stream ciphers and public key cryptography with a fairly in depth look at particular implementations (RSA, DES, 3DES, WEP, AES-ECB/CBC/CTR and more). The maths in week 5 was the hardest part for me personally, a lot of people on the forums said they dropped out at that point."
crypto,35zya0,B-Con,2,Fri May 15 02:11:30 2015 UTC,Regarding the edit: Pretty standard. I think they bump it back twice a year and have since the end of the first class.
crypto,35zya0,zeroXten,6,Fri May 15 03:13:34 2015 UTC,"Yeah I know, but I get excited every time. I emailed DB directly and he responded saying he'd completed the first 3 weeks of the course, and would complete the final 3 weeks over summer."
crypto,35zya0,astrolabe,2,Fri May 15 05:15:31 2015 UTC,"Cool, thanks for sharing."
crypto,35zya0,spradlig,1 point,Fri May 15 14:07:20 2015 UTC,"As in, over the coming months? So it is going to get delayed again? :("
crypto,35zn1i,tjgoop,4,Thu May 14 21:14:36 2015 UTC,No source = snake oil.
crypto,35zn1i,phyzome,3,Thu May 14 22:03:05 2015 UTC,"I haven't used them, but it looks like they don't have well-documented source code nor in-depth security design documents for their products.  From a cryptographic standpoint, that's a non-starter.  From a netsec standpoint, you can try asking those over at /r/netsec"
crypto,35zn1i,DoWhile,3,Thu May 14 21:35:10 2015 UTC,"This appears to be a DRM product, not a crypto product."
crypto,35zn1i,rya_nc,1 point,Thu May 14 22:08:58 2015 UTC,"Has anyone tried whitecryption? Any good? What is their pricing?   I have spoken with these guys before.  I have not tried their software nor do know their pricing.   Any good?   After my discussion with them I was left with more confidence than coming into the discussion.  If I'm not mistaken they did have a 3rd party company perform a security audit of the secure key box 4.6.0 software, something that is well beyond what the FIPS 140 CAVP labs do.  So is it snake oil? Probably not.  Again, this is just from my discussions with them.  Not from any experience with their software.  Another vendor that I like but have not tried is wolfSSL  ninja edit:  I would also like to add that if you have a software development requirement that says something along the lines of ""thou shalt use FIPS 140 validated crypto software"", then I would consider whitecryption in the running as well as wolfCrypt for your analysis of alternatives.  If you do not have any such requirement, then I would seriously consider other open source based alternatives due the the fact that you'll want a resilient library that has been tested with the age of time and tested by those that pwn all the things."
crypto,35vpb9,johnmountain,4,Wed May 13 22:17:52 2015 UTC,A markdown literate cryptol version of one of the drafts is on Github.
crypto,35vpb9,tom-md,1 point,Thu May 14 03:28:42 2015 UTC,This is pretty cool.
crypto,35vpb9,GahMatar,2,Fri May 15 14:20:54 2015 UTC,No XChaCha20? Managing a nonce counter is annoying.
crypto,35vpb9,Chandon,1 point,Thu May 14 16:46:51 2015 UTC,"strange, here I thought it's already been accepted"
crypto,35vpb9,conradsymes,2,Thu May 14 05:50:36 2015 UTC,Google unilaterally implemented it a while ago to speed up Android devices. So maybe that's what you're referring to?
crypto,35vpb9,GahMatar,1 point,Fri May 15 14:21:39 2015 UTC,I casually pay attention to the TLS lists.  Somehow I thought it was approved for TLS 1.2
crypto,35uc99,DecoyApp,20,Wed May 13 16:05:58 2015 UTC,"1000 is WAY too low for a PBKDF2 iteration count. You should be using at least 100,000 iterations, however ideally you want to do a PBKDF2 benchmark on the device and spend between 0.2 and 1.0 seconds on PBKDF2, storing the iteration count used. You need a random salt generated on each device to avoid lookup table/rainbow table attacks.  The security of AES depends heavily on whether you are using it correctly. If you're using AES-CTR with a fixed IV and the same key for every file, I can decrypt everything without finding the password.  TBH, you'd probably be safest using libsodium's crypto_secretbox_easy/crypto_secretbox_open_easy functions to handle the encryption/decryption. It has key derivation functions too.  Edit: As far as actually answering your question goes, an attacker with a decent GPU can probably try over 100,000 passwords per second - WPA uses 1024 iterations of PBKDF2 and I'm basing this estimate off of benchmarks for that. This is sufficient to crack even moderately good passwords in under 24 hours."
crypto,35uc99,rya_nc,4,Wed May 13 17:19:09 2015 UTC,"Each file has its own random*ly generated salt and IV. Originally I was using 10,000 iterations of PBKDF2 but it took anywhere between 3 to 5 seconds on iOS which seemed way too slow.   *at least as random as iOS can be."
crypto,35uc99,rya_nc,3,Wed May 13 18:20:30 2015 UTC,"10,000 iterations shouldn't be taking multiple seconds - is this not native code?"
crypto,35uc99,sixstringartist,2,Wed May 13 18:22:22 2015 UTC,iOS is native but not all devices use cryptographic instructions in armv8 so if you're comparing to x64 with cryptographic instructions in hardware its not an apples comparison.
crypto,35uc99,Natanael_L,1 point,Wed May 13 21:03:10 2015 UTC,Even on CPU it shouldn't be that slow. Javascript?
crypto,35uc99,silverforest,1 point,Wed May 13 21:53:27 2015 UTC,How are you implementing PBKDF2? Are you rolling your own or using CCKeyDerivationPBKDF?
crypto,35uc99,zxLFx2,3,Wed May 13 21:36:05 2015 UTC,"Default for LastPass is 5k. I've heard of people increasing this to 20-50k. You're suggesting 100k? They suggest no more than 10k, and the max is 200k."
crypto,35uc99,silverforest,4,Wed May 13 20:37:30 2015 UTC,"Default for LastPass is 5k.    If you read the documentation, that's because they have JavaScript implementations which hang in mobile browsers at higher iteration counts. They used to use 100k as a default."
crypto,35uc99,GMTA,1 point,Wed May 13 21:36:59 2015 UTC,"This is sufficient to crack even moderately good passwords in under 24 hours.   Could you expand on this? A random alphanumeric password of 6 characters, which I consider to be very weak, would take on average 3.3 days to crack with 100,000 attempts per second according to my calculations (626 / 100000 / 86400 / 2)."
crypto,35uc99,rya_nc,1 point,Mon May 18 09:22:41 2015 UTC,"100k/second for a day is about 233 guesses. I was deliberately kind of vague when I said ""moderately good"", and I should have used scare quotes in my previous comment. I am talking about passwords that many people would consider ""decent"". A password typed on a phone can be expected to be mostly lower case letters with a potentially capital letter at the beginning and 0-2 numbers/symbols at the end. Distribution of numbers used for these things are not even, nor are the symbols. Knowing some information about the target allows targeting. You'd probably find the password at least a third of the time. Probably a lot more often."
crypto,35uc99,kurogane765,1 point,Mon May 18 15:57:23 2015 UTC,could you explain the  divide by two at the end of your equation?  thanks
crypto,35uc99,GMTA,1 point,Tue May 19 20:51:07 2015 UTC,"That is the ""on average"" part. On average, for a truly random (well distributed) password, you will find the actual password after iterating over 50% of the possible values."
crypto,35uc99,tom-md,17,Wed May 20 21:58:15 2015 UTC,"Why bother converting to base64 if you're just going to encrypt it?  This only serves to increase the size of the data.  Some things to consider: Use scrypt, use salt if you aren't, be explicit in these discussions about AES mode or people will jump on you, and be up-front about your attacker model (most sexts are leaked by compromised devices and not some sort of evil telecom company listening in).  The fact that the derived key is used for AES is pretty much irrelevant, for a brute-force attacker the computation is dominated by building the dictionary of mediocre passwords using PBKDF2.  Feel free to quantify ""mediocre password"", say more about the system including if it uses salts, identify your attackers hardware (or custom ASIC), and make an estimate."
crypto,35uc99,Bardfinn,6,Wed May 13 16:17:40 2015 UTC,"The main attacker model looks like this:   A malicious third party gets their hands on the victim's library of images. Whether its via iCloud social engineering (a la the Fappening), or a lost/stolen/compromised phone.  The attacker determines which images in the library are ""decoy""s. I am operating under the assumption that this step is trivial. Although I have taken precautions to prevent standard steganography detection methods, Schneier's law applies here.  The attacker reverse engineers the encoding algorithm (which I also assume will be trivial) and obtains the ciphertext, salt, and IV.  The attacker begins brute-forcing the ciphertext using a dictionary of mediocre passwords."
crypto,35uc99,tom-md,2,Wed May 13 16:45:44 2015 UTC,and not some evil telecom company listening in   Does the NSA count as a telecom?   Part of OP's motive may be to fight the chilling effects of i.e. LOVEINT.
crypto,35uc99,Bardfinn,2,Wed May 13 16:25:48 2015 UTC,"That is rather besides the point, the point is that the attacker power needs to be more explicit.  If the ""attacker"" of interest are housemates then the main issue is probably them getting your phone and looking up the same pictures through his program."
crypto,35uc99,Uncaffeinated,1 point,Wed May 13 16:40:32 2015 UTC,Ostensibly (haven't looked at the program) the program would prompt for a password at suitably configurable paranoid intervals.
crypto,35uc99,SushiAndWoW,1 point,Wed May 13 16:48:00 2015 UTC,"If the NSA is your threat model, I don't think an app like this will help much."
crypto,35uc99,sixstringartist,7,Thu May 14 06:10:41 2015 UTC,"You're using PBKDF2 using one of the SHA-2 hashes, I assume?  In 2012, a cluster of 25 GPUs would brute force SHA-1 at a rate of 63 billion hashes per second. SHA-2 hashes aren't that much slower.  There are other details you could be getting wrong. For instance, you have not mentioned what cipher mode you're using (CTR? CBC? none?) and how you're initializing the IV (if your app can reuse IVs, you're in trouble).  If you do everything right, probably 95% of your users will still use an easily brute forceable password."
crypto,35uc99,Natanael_L,3,Wed May 13 18:19:31 2015 UTC,Yes to SHA-2.  I'm using CCM cipher mode. The IVs are random*ly generated and are never reused.   I did not realize just how far hash cracking had progressed in the last 10 years.
crypto,35uc99,fragmede,5,Wed May 13 18:27:13 2015 UTC,Which is why your PBKDF needs to be substantially slower than the decryption of a single block.
crypto,35uc99,kag0,3,Wed May 13 21:03:57 2015 UTC,"It depends entirely on the password and key derivation.  If the password is long and unpredictable enough then it can't be cracked in human lifetimes. If the key derivation is strong, then that adds a high security margin.   If the password is one the attacker is capable of guessing within a reasonable number of tries, he's gonna crack it.   The best way to ensure the passwords are strong is by generating them randomly. I'm in favor of the Diceware method, with about 8-9 words."
crypto,35uc99,Bardfinn,3,Wed May 13 16:41:07 2015 UTC,"Something to keep in mind about the brute-forceability of AES itself.  Take a decently sized list of a billion words which is a good sized dictionary, combine it with last year's /r/theydidthemath analysis. The /r/didthemath claims the Tianhe-2 supercomputer (which is still at the top of the list could compute 3.386e16 keys per seconds. At that rate, it would take all of 29 nanoseconds to go through that list of almost 1 billion words.  But let's ignore the Tianhe-2 since that's clearly the upper end of performance. Even then:   If you are using PBKDF2 and have 1,000 iterations, then a hacker with specialised hardware will guess 1 billion passwords in about 20 seconds. That's not very good security at all.   (From the 4th answer on this StackOverflow question.)"
crypto,35uc99,CJoshDoll,2,Wed May 13 17:30:31 2015 UTC,"Let's just assume you're using AES-CTR, and salting your hashes, so a pre-built dictionary attack is not possible. Let's also assume you've built your app so that some side channel attack (like someone just opening the app to see photos) is not possible. Since you say brute force the password and not guess, there are two ways to go about it. An attacker could try to brute force the key, which would take practically forever, or they could try to brute force the password. Brute forcing the password takes exponential time if the attacker already knows the length of the password. Let's just say it takes t ms to derive a 1k iteration pkdf key. Let's say the attacker has access to a couple ec2 instances giving him c cores and plenty of ram. For a l character password it would take on the order of 94l *t/c ms to brute force the password. Reasonable values for c would be in the thousands for an individual with a limited budget.  Hopefully you can graph that function and it gives you an idea of what you're looking for."
crypto,35uc99,antiduh,1 point,Wed May 13 17:52:15 2015 UTC,"It depends on your keylength dkLen and the dictionariness of the user's password.  You effectively have four attack surfaces: dictionarying the user's password, brute-forcing AES, and unknown design/implementation weaknesses in your AES or PBKDF2 implementations. The latter two you can do nothing about save replacing PBKDF2 with bcrypt or another key deriv function; AES with a sufficiently long key is theoretically capable of consuming solar systems to brute force fifty percent of specimens, so that's cool as long as you've a decent dkLen; the user's choice of password is largely out of your control."
crypto,35uc99,CJoshDoll,-10,Wed May 13 16:42:45 2015 UTC,"Just rate limit the password tries, and it wont matter."
crypto,35uc99,orthecreedence,5,Wed May 13 16:18:03 2015 UTC,"If somebody obtains the encrypted data, they can try attempts to decrypt it as fast as they want, only limited by money.  The only way to 'rate limit' password tries if someone has the encrypted data is to use a crypto system such as PBKDF2 to increase the computational costs for a given attempt."
crypto,35u4f9,fourteatoo,1 point,Wed May 13 15:04:01 2015 UTC,Was there commentary to go alongside these slides?
crypto,35u4f9,cunttard,2,Thu May 14 01:37:37 2015 UTC,"Yes. Here is the draft:  We are going to talk about everyone's favourite topic - a prime factorisation.   Admit it, we all like to play with primes when nobody is watching. There is nothing to be ashamed about.   Let's look at the simple case where we have a number N which is a product of two different odd factors p and q.  What can we tell about these factors? Only that p is somewhere below a square root and q is somewhere above.  Not much fun in ""somewhere"".  Unless we start looking at squares modulo N.  For that, we will introduce another reference point which is a half of a number, labeled as h.  Here is the example set of squares for 21.  As you can see, there are two interesting fixed points. Let’s label them b and d.  What are the properties of these points? We see that a square of a value is equal to the value and a square of difference between points is equal to 1. Modulo N.  Another interesting property is that b is a product of some number and p. As well as d is a product of some number and q.  But most interesting property is that b and d are symmetric relatively to h.  Now let's get real and visualise.  Here we have two graphs where the blue line represents y=x2 mod 21 and the green one represents y=x. Aside of 1, you can see that the only integer intersections between two graphs are at the fixed points (red).  Let's take a look at another visualisation. Here we represent N=527 as a circle, clockwise. After we put the reference and fixed points we will have this picture.   Those of us who is old enough should recognise something familiar here.  There are couple more examples of other numbers. The presence of fixed points and their properties are universal.  So, over years we spent a lot of efforts trying to figure out how to hunt for those sneaky p and q. Maybe we will do better with b and d?  So, let's refocus and have some fun."
crypto,35u4f9,LtFrank,1 point,Thu May 14 13:58:31 2015 UTC,"Very cute. But you still have to search for b and d. However if you find the one you have the other. You will notice in the example of N=21 that b and d are 4 ""searches"" away from h. This is similar search space to searching all primes < N0.5. The fact that you only search for b2 = b (modN), etc, doesn't reduce complexity all that much. I.e. by a multiple not an order.... This will hold for all N.   Having said that it may be very useful in another branch of attack. Your choice of nomenclature of h is of particular interest. I presume it is for half, and not something fancier"
crypto,35u4f9,LtFrank,1 point,Sun May 17 13:35:15 2015 UTC,"Yes, you are correct.  Regardless of multiple hints and the description, surprisingly many people seems to miss the fact that this was meant to be a humorous talk to entertain :)"
crypto,35u4f9,LtFrank,1 point,Sun May 17 16:07:13 2015 UTC,"There doesn't seem to be a proof or allusion to a proof of (b-d)2 = 1 (modN). For this to be true, significant inroads need to be made into the strong Goldbach Conjecture. However, we know the GC holds true for very large values, so it may apply here, but not formally at the moment. The graph on slide twelve is tantalizing, but there are many solutions. Of course only two whole number solutions. There will be many solutions very close to whole number solutions as N becomes large."
crypto,35u4f9,LtFrank,1 point,Sun May 17 15:57:41 2015 UTC,I will save you the effort of replying ato this comment as well and give you a simple smiley face... Nice thinking though...
crypto,35u4f9,LtFrank,1 point,Sun May 17 16:23:36 2015 UTC,"Perhaps I should add something. Fun is how we break things. Never stop having fun. If you are interested in the fun I have been having with this, perhaps there is a way we could further communicate.  Perhaps that sounds creepy, I don't know."
crypto,35u4f9,LtFrank,1 point,Sun May 17 16:54:16 2015 UTC,|b-d|2 congruent to 1 mod(N) is still bothering me...
crypto,35srxg,Cannon-C,8,Wed May 13 05:06:51 2015 UTC,If you want a permanent solution you should get a hardware RNG.  http://en.m.wikipedia.org/wiki/Comparison_of_hardware_random_number_generators  If the machine has a sound card and you want a quicker solution you may like to consider randomsound.
crypto,35srxg,Kasoo,6,Wed May 13 06:31:12 2015 UTC,"/u/Cannon-C If this air-gapped computer is for generating PKI certificates, you should probably be using an HSM anyway.  Also: haveged (processor cache timing), audio-entropyd, video-entropyd"
crypto,35srxg,aydiosmio,3,Wed May 13 08:07:39 2015 UTC,"Non-mobile: http://en.wikipedia.org/wiki/Comparison_of_hardware_random_number_generators  That's why I'm here, I don't judge you. PM /u/xl0 if I'm causing any trouble. WUT?"
crypto,35srxg,LittleHelperRobot,2,Wed May 13 06:31:19 2015 UTC,"Comparison of hardware random number generators:       In computing, a hardware random number generator is an apparatus that generates random numbers from a physical process. Such devices are often based on microscopic phenomena that generate a low-level, statistically random ""noise"" signal, such as thermal noise, the photoelectric effect or other quantum phenomena.     Interesting: List of random number generators | Hardware random number generator | Randomness | Linear congruential generator   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,35srxg,autowikibot,6,Wed May 13 06:31:28 2015 UTC,"Don't let the computer sit, that will not help at all. You need to do stuff, like search the web, type on the keyboard, even 'ls -R /' will help.  Download some pron, anything ;)  Edit: Ok so just saw the air gaped part. But still you need to be doing something to generate entropy, so try the ls -R /, as well as stuff like du -h , etc. Compile some code even. Anything to generate system events."
crypto,35srxg,CaptEntropy,2,Wed May 13 05:14:59 2015 UTC,"This is an air-gaped computer, so using net traffic would not be an option. I tried doing lots of random stuff on computer in attempt to increase the entropy which yielded no results."
crypto,35srxg,Natanael_L,1 point,Wed May 13 05:18:35 2015 UTC,Try moving files around at random.
crypto,35srxg,chaoticlychaotic,4,Wed May 13 08:51:40 2015 UTC,"Why don't you read up on how entropy is generated and then do those things?   Typically, the system takes entropy from stuff happening. Network activity, keystrokes, etc. You have to do things on the system to make entropy. Letting it sit isn't gonna do anything to help."
crypto,35srxg,dareksam,2,Wed May 13 05:20:03 2015 UTC,Hammer away at the keyboard like there is no tomorrow!
crypto,35srxg,aydiosmio,6,Wed May 13 05:34:37 2015 UTC,"So just cut out the bottom of a box, place box over keyboard, then place cat in box and shut lid?"
crypto,35srxg,thmsk,9,Wed May 13 05:39:15 2015 UTC,"No, it'll just sleep on the same ten fucking keys all day."
crypto,35srxg,lasermike026,1 point,Wed May 13 07:54:47 2015 UTC,"Install haveged if you can find it in your distribution repositories or else, as others have said, open a text file and start pressing random keys."
crypto,35srxg,marklarledu,1 point,Wed May 13 10:18:10 2015 UTC,You need an entropy gathering daemon.  Try havged.  http://www.issihosts.com/haveged/ https://packages.debian.org/search?keywords=haveged
crypto,35srxg,xnyhps,0,Wed May 13 13:18:18 2015 UTC,If this is a one time thing you can seed it manually from something like random.org.
crypto,35srxg,aydiosmio,8,Wed May 13 07:06:59 2015 UTC,"Any user can write data into /dev/random to be mixed into the pool, but that does not actually increase the entropy estimate (because the data is not trusted to have good entropy).  Also, using random.org to generate your private keys is a really bad idea."
crypto,35srxg,phyzome,2,Wed May 13 08:20:39 2015 UTC,The machine has no network access.
crypto,35pa9d,johnmountain,10,Tue May 12 12:03:38 2015 UTC,"Filed under ""Schneier Says The Obvious, hailed as God"".  I don't say that to beat on Schneier. He knows his stuff and reguarly proves it (unlike GRC some people in the tech world.) Personally, I'll take Bruce's arguments.  Instead, I say that because this article will inevitably spawn four or five articles which essentially come down to ""Bad crypto is bad."" End of story. They'll quote this article and hail the words of Schneier like the word of God. It'll put the blame on the fact we have bad algorithms for crypto and we keep using them. There'll be no talk about how you can have the best crypto mathematically (e.g. RSA/DSA) but your keys are leaking all over the place is just as bad as quad ROT13."
crypto,35pa9d,indrora,7,Tue May 12 19:05:31 2015 UTC,"I think the point is that still today, that obvious statement has to be told again and big companies still make that rookie mistake. I can tell what I want to the management, it's much easier to pass the message if the jesus of cryptography shares my opinion and I can prove it."
crypto,35pa9d,aris_ada,2,Tue May 12 21:00:15 2015 UTC,"Well, it has to be told over and over again. He said it already in his essay from 1998, linked at the bottom of the article.   People are still designing bad ciphers, it well never end. So better write about it and tell people to do it not."
crypto,35pa9d,initramfs,2,Wed May 13 07:40:23 2015 UTC,You say it's obvious but we get noobs in software engineering every day of the week.
crypto,35pa9d,DoWhile,0,Wed May 13 12:06:28 2015 UTC,Fun toys are fun!
crypto,35pa9d,indrora,1 point,Tue May 12 19:37:05 2015 UTC,Addictive drugs are addictive!
crypto,35pa9d,Anusien,0,Tue May 12 20:19:57 2015 UTC,Onq pelcgb vf onq!
crypto,35pa9d,indrora,0,Tue May 12 20:41:33 2015 UTC,JJ91VTEiovq0VUAurG8=
crypto,35pa9d,epostma,0,Tue May 12 21:04:08 2015 UTC,Adjective nouns are adjective!
crypto,35rr43,bren2010,3,Tue May 12 23:34:23 2015 UTC,"The author does a pretty good job describing what a monotone access structure is, though it is rather terse.  Access structures are standard fare in the literature of secret sharing.   To clarify, an access structure can be thought of as a list of sets of people: a set of people on that list should be granted access to the secret, and a set of people not on that list should not be.  And monotone just means that any superset of a set of people on that list should also be on that list.  The standard example you learn from threshold t-out-of-n secret sharing induces an access structure: all sets of t or more people are on the access list.  So if Alice, Bob and Charlie are the three participants, then the 2-out-of-3 access structure looks like {Alice,Bob},{Alice,Charlie},{Bob,Charlie},{Alice,Bob,Charlie}.  If you wanted Alice alone to also be able to recover the secret, then you add {Alice} to that list.   MSPs generalize threshold secret sharing to allow for arbitrarily complex monotone access structures.  However, there are combinatorial lower bounds as well as computationally hard bounds (formula minimization is somewhere like Sigma2 or Pi2 on the polynomial hierarchy) on how to most efficiently create a scheme for a given access structure."
crypto,35rr43,DoWhile,2,Wed May 13 05:26:25 2015 UTC,"Reminds me of the combinatorial ECDSA threshold signature scheme that was designed for use with Bitcoin (implemented in secp256k1, can be used outside Bitcoin wherever the same curve is supported).  They allow for similar constructions where you can define multiple alternative threshold values depending on which members participate, such as (A + B) and/or C.   For small thresholds, computing a signature over the online protocol takes on the order of 10 seconds. I'm hoping they can make it more efficient. That slowness a side effect of applying the ECDSA threshold math in a combinatorial setup, it adds a significant overhead. They practically create multiple threshold setups and then link them together with further threshold setups (AFAICT)."
crypto,35qo0k,tjgoop,3,Tue May 12 18:41:32 2015 UTC,"Arxan, Cloakware (Irdeto), and Cryptanium (Intertrust/whitecryption) are the ones I'm most familiar with. All three have decent obfuscation technologies and excellent cryptographic white box toolsets. Cryptanium feels the most modern from a toolchain perspective, but I haven't had as much time to evaluate their security/robustness. Arxan is probably the easiest to do business with, as Irdeto is somewhat less engaged in the business unless you are using them to deploy it (via ""ActiveCloak"")   Edited to add: I don't think you'll find a free solution that does anything useful. In my experience, freeware obfuscation tools are basically packers that are trivially reversed by executing and copying the resulting bits from memory, no actual reverse-engineering required. I'd be interested to learn about anything you find that doesn't fit that description."
crypto,35qo0k,UTFishOutOfWater,2,Tue May 12 19:32:36 2015 UTC,This is really helpful!! Let me know if you know more popular tools.
crypto,35qo0k,chaplja,1 point,Tue May 12 21:04:10 2015 UTC,"Check my reply to UTFishOutOfWater, you may be interested."
crypto,35qo0k,chaplja,1 point,Sun May 17 02:12:46 2015 UTC,"I'm developing a free code virtualizer, x86obf. It doesn't even have a packer yet because it's the very last thing on my TODO least (I consider it to be extremely useless except when it comes to compression).  I've also released it's source code and I'm close to releasing a new rewritten version which should compensate for the release of source code.  This type of code protection is the most powerful in these days as it requires much more reverse engineering than standard obfuscated code.  http://chaplja.blogspot.com/2015/02/x86obf-code-virtualizer-released-for.html http://chaplja.blogspot.com/2015/02/x86obf-source-code.html"
crypto,35qo0k,Natanael_L,1 point,Sun May 17 02:12:03 2015 UTC,"What does this have to do with cryptography? Obfuscation is pretty far removed, unless I misunderstand what you're asking for."
crypto,35qo0k,UTFishOutOfWater,1 point,Tue May 12 23:16:43 2015 UTC,"Indistinguishable obfuscation is related. But impractical, and the limits is uncertain."
crypto,35qo0k,angdev,1 point,Tue May 12 23:51:11 2015 UTC,"Well, one branch of obfuscation technology is relevant to cryptography-- whitebox crypto systems. Note that I tailored my response above to be primarily about whiteboxes to keep things relevant to the sub."
crypto,35lrmm,shreyasonline,23,Mon May 11 15:28:40 2015 UTC,"Your challenge-response mechanism for passworded chat groups looks a bit broken. Offending source.  Problems:   You use the default Random class, which is based upon an LCG, which can be predicted. You're seeding the RNG based upon the millisecond component of the UTC date (DateTime.UtcNow.Millisecond), which can be trivially bruteforced - there are only 1000 possible seeds at most. You ""seed"" the CHAP with the public key XML, which would be known to an attacker.   I could see this exploited in the following way:   You can use the padding (line 231) to leak direct PRNG outputs and determine the state, which allows you to predict all future PRNG outputs. Since the random challenge is seeded with the public key XML, which is publicly known, the only unknown after the PRNG is broken is the full UTC binary timestamp, which can be guessed rather easily. This means you can predict all future challenges. Now you can predict future challenges, you ARP spoof a client to point to you, then use the legitimate client as an oracle to sign future challenges that you guess will come up on the server (you just need to hit the right UTC timestamp) and you can use that to bypass the authentication and join the chat group.   My recommendation is to use RngCryptoServiceProvider CSPRNG instead of a plain PRNG when generating the challenge tokens, and HMAC-SHA256 rather than plain SHA256 for authentication - this is exactly what HMAC is intended for."
crypto,35lrmm,gsuberland,4,Mon May 11 23:37:19 2015 UTC,"Thanks for the analysis. I should have used a secure RNG in first place.  Few points for knowing the protocol:   if a chat group identifier is known by attacker (by sniffing network for udp/http torrent tracker queries), attacker can know the ip address:port for peers in the chat. the protocol is peer to peer so the connecting peer becomes client and the listening peer becomes server. So, a peer can be both client and server depending on the direction. the challenge-response mechanism's purpose here is to prevent attacker to proceed with cert exchange and get identity of the victim without completing the protocol handshake. if attacker manages to crack the chat group password, he can connect to any peer in that group and read the cert and know their identity. if attacker completes the protocol handshake, his profile gets listed in the user interface and his cert can be seen by the victim. the RSA keys used in the profile are not permanent. users can get a new profile certificate reissued anytime. public key is not tied with user's identity.   I really appreciate your feedback. The protocol is still not complete and will change with bug fixes and things will get added to it to improve the security. I will implement the recommendations you have made."
crypto,35lrmm,cunttard,1 point,Tue May 12 06:40:04 2015 UTC,"You ""seed"" the CHAP with the public key XML, which would be known to an attacker.   Seems awfully familiar. I'm pretty sure OpenSSL did some dumb shit like this."
crypto,35lrmm,gsuberland,3,Mon May 11 23:49:10 2015 UTC,"Well, in his defense, it's only one data point in what's loaded in. I guess the idea is to tie it to the server's public key so you can't hit up two different servers at the same time and port the response over to a different server with the same timestamp and shared secret.  This becomes a moot point, though, if you make the challenge properly random and not time-dependent."
crypto,35lrmm,n3xg3n,2,Mon May 11 23:54:26 2015 UTC,OpenSSL would add your RSA Private key to the entropy pool. CVS Commit removing this from libressl
crypto,35lrmm,Natanael_L,2,Wed May 13 18:05:52 2015 UTC,That's not actually bad if the mixing is secure
crypto,35lrmm,Natanael_L,5,Wed May 13 21:55:10 2015 UTC,Is OP the author? Any option for using user generated keypairs and manual verification instead of PKI certificates only?
crypto,35lrmm,Natanael_L,6,Mon May 11 17:15:56 2015 UTC,"Yes, I am the author, sorry for not mentioning this in the post. The current UI doesn't have the feature to accept user generated RSA keys but adding it is not an issue and can be added easily. UI was designed to keep it simple for the average user.   Manual cert verification will need people to sign each other's certificates which can work but may not be simple to average user. Also social engg attacks can be possible in tricking users to accept certs. The current PKI implementation just ensures that the email address is verified and gives a level of confidence in identifying the opposite peer."
crypto,35lrmm,Cannon-C,5,Mon May 11 17:34:04 2015 UTC,Are you using PFS? Have you considered the axolotl protocol?
crypto,35lrmm,wintermute111,2,Mon May 11 17:35:58 2015 UTC,The current protocol is designed for peer-to-peer environment. For each session a key exchange is done and the RSA key pairs are not permanent. A user can get a new certificate with different set of keys anytime he/she wishes. So a simple FS is provided. The protocol is still not complete and will change for fixing bugs and improving the security.
crypto,35ns9d,m1el,3,Tue May 12 00:40:07 2015 UTC,"You're partially right and partially wrong.  You look like you've done your homework so any response needs to go into details, which unfortunately, will require a lot of effort that I'm not prepared to commit to at the moment.  The short answer is that ad-hoc white-box crypto is probably going to be insecure, and that secure attempts should be viewed from the perspective of mathematical obfuscation.  While general VBB mathematical obfuscation has been ruled out by Barak et al. there are several classes of functions that do admit VBB mathematical obfuscation, and there are also weaker variants of obfuscation (that do not necessarily achieve the ""goals"" of white-box crypto) that are secure.  Lumping the two together is kind of a disservice to the theoretical community, though the people who created mathematical obfuscation kind of admit they fucked up naming the thing the same as something else that is, typically, bullshit.  I'll end on a positive note about (theoretical) positive benefits of obfuscation: secure patching in open-source software.  Right now, when you release code for a security patch, hackers are the first to jump on it and try to find a 0day.  Under certain circumstances, it is better to release an obfuscated patch so that people can patch their systems, then after a certain grace period, release the unobfuscated code to it."
crypto,35ns9d,DoWhile,1 point,Tue May 12 01:03:04 2015 UTC,"Could you please give me examples of functions that can be ""securely"" obfuscated?  And for point functions I don't see a difference between heavily obfuscated function and comparing a hash to the hard-coded value.  myAwesomeHiddenPointFunction x = sha256(x) == ""5b27d1e9f8ba830a34d21e4b34e274d46705b2c44dac5beec75eb12671ca5184"""
crypto,35ns9d,rosulek,3,Tue May 12 01:08:21 2015 UTC,"The Wee05 construction for point functions is indeed just comparing a hash of its input to the hash of the hidden point. The whole point of the paper is to figure out exactly what property is required of the hash function to achieve some level of obfuscation (without resorting to random oracle assumption). Earlier work by Lynn-Prabhakaran-Sahai showed that, yes indeed, a random oracle gives a natural point function obfuscation. So if you're happy with SHA256 being a random oracle, then your construction is fine (except you need to do:   ObfPointFunc x = sha256(x,r) == ""hardcoded""   for randomly chosen r also hard-coded. Otherwise you can test for equality of two point functions even without knowing the secret point.)"
crypto,35ns9d,DoWhile,2,Tue May 12 14:16:41 2015 UTC,"The function classes currently aren't too terribly interesting: hyperplanes is one example, small Boolean clauses is another (NC0_d), and of course security is only under certain mathematical assumptions.  In particular, you can obfuscate two points such that if either point hits, you evaluate to ""true"" but you won't know which point was hit.  This is something that just hashing won't give you easily, though the actual implementation is so inefficient you probably don't want to use it.  Regarding your example of point-function obfuscation, if you assume your hash function is a (programmable) random oracle, then it basically works as a good point-obfuscator.  In practice, it's a believable and reasonably reliable assumption, but in theory it is unfounded as there are impossibility results that tell you random oracles cannot be instantiated by hash functions... so really you're relying on a mathematically-unfounded-but-practically-reasonable assumption.  (In fact, from a theoretical point of view, most hashes and block ciphers are just ""ad-hoc"" designs with no solid mathematical foundation beyond what is known by cryptanalysts.)  The goal of ""secure"" cryptography is to build problems upon assumptions that are believed to be hard, rather than just building a scheme that is believed to be hard.  Thus, for any purported design, if you can't discern what the underlying hard assumption is, there should be some doubt.  Recent theoretical obfuscation schemes (both VBB and weaker variants such as iO/diO/eO/VGB/...) are based on mathematical/computational foundations, though it still remains to be seen if those are hard to solve or not."
crypto,35ns9d,mrschyte,1 point,Tue May 12 04:09:04 2015 UTC,"How would you obfuscate the patch? If only the patch is obfuscated, then the resulting binaries could be compared to reveal the changes. I think you'd have to replace whole files with obfuscated versions."
crypto,35ns9d,silverforest,2,Thu May 14 08:09:23 2015 UTC,Have you seen GGH13? Sahai14 shows an interesting application. Barak14 improved on the security proof.
crypto,35ns9d,rosulek,1 point,Tue May 12 01:22:07 2015 UTC,"After glancing at GGH13:   Consider the “point filter function” function [GK05] F_{x,b}(w), defined as follows: if w is a valid witness for x, then F_{x,b}(w) = b. If w is an invalid witness for x, then F_{x,b}(w) = ⊥.   It seems to me that it is trivial to implement this function using crypto primitives, without obfuscation and without revealing the value of b.  I'll continue reading to see what other function iO allows to build.  Edit: formatting..."
crypto,35ns9d,rosulek,3,Tue May 12 01:58:22 2015 UTC,This is a much harder task than I think you give it credit for. It requires obfuscating an arbitrary poly-time relation. Do you have an approach in mind?
crypto,35ns9d,groumpf,1 point,Tue May 12 14:26:25 2015 UTC,"Let there be two PRFs R1 and R2.  Let H = R1(x)  Let B_e = R2(x)⊕b  F_{x,b}(w) =     if R1(w) == H then R2(w)⊕B_e     else ⊥   Values H and B_e are hard-coded, R1 and R2 are implemented using hash function of x+distinct random value.  At the first glance, it seems sane."
crypto,35ns9d,user_doesnt_exist,3,Tue May 12 17:12:24 2015 UTC,"What you give looks like a simple point function obfuscation. I think you maybe misunderstand the definition of point filter function. There is an arbitrary polytime function R that outputs 1 bit, and the function to be obfuscated (hiding x & b) is:  on input w:     if R(x,w) = 1 then b else \bot   Imagine that x is a boolean formula and R is the relation that checks whether w is a satisfying assignment to x. This is what is meant by ""if w is a valid witness for x"" etc.."
crypto,35krjf,giszmo,2,Mon May 11 08:24:04 2015 UTC,"To use ECIES for self-storage, you generate a new, random, private key. You derive the public key from the private key and then destroy the private key.  You need to include the public key with your encrypted message to decrypt it. You should create a new, random, private/public key pair for every message.  The insight is that given your private key and a public key (any public key) you can always compute the ""shared"" secret. This is a property of D-H key agreement and also why D-H based algorithm can't really be used to encrypt anything on their own, you need someway to use the shared secret for bulk encryption.  You can't use a random number as public key either, it needs to be a valid public key derived from a valid private key (read up on various ECC curves and you'll see some fairly complex generation scheme for private keys generation and public key derivation to make sure they are legal.)  Authentication, if desired needs to be provided separately, most efficiently you'd use an AEAD encryption mode like AES-GCM to do the high-efficiency bulk encryption."
crypto,35krjf,GahMatar,1 point,Tue May 12 15:03:03 2015 UTC,"Thank you for your feedback. So as I use a BIP32 hierarchically deterministic tree of key pairs, I could pick keys from there in a sequence, sending from any of those keys to myself.  Apparently I drew false conclusions from bitcore-ecies' getting-started that look an awful lot like Alice and Bob communicating with rather static keys. So assuming bitcore fixes above mentioned bug/actually has no bug due to some magic, the example should not be  var alice = ECIES()   .privateKey(aliceKey)   .publicKey(bobKey.publicKey); var encrypted = alice.encrypt(message);   but rather  var alice = ECIES()   .privateKey(new PrivateKey()) // new random private key thus no authentication possible   .publicKey(bobKey.publicKey); var encrypted = alice.encrypt(message);   (I wonder what library would be easy and advisable to use, given we have these nice bitcoin HD keys. I told my boss that using PGP would probably not have the same issues and that we could instantiate PGP keys from the bitcoin keys using openPGP.js which has an API pretty much as simple as above example but we delayed this decision at least until we heard back from bitpay and will get proper audits anyway.)"
crypto,35krjf,GahMatar,2,Tue May 12 16:19:37 2015 UTC,"Nope, you'd use your own private key and the throwaway's public key as you need to retain that public key to be able to recompute the secret and decrypt."
crypto,35krjf,GahMatar,1 point,Tue May 12 16:23:22 2015 UTC,"Ok, so this might be implementation specific. bitcore-ecies does send the associated public key along with the message, so this works:  var message = 'hello world' var bobKey = PrivateKey() var encrypted = ECIES().privateKey(new PrivateKey()).publicKey(bobKey.publicKey).encrypt(message) var decrypted = ECIES().privateKey(bobKey).decrypt(encrypted) console.log(decrypted)   Thus I thought that if messages have to be between distinct keys it should not matter which of the two keys I re-use. In fact if the receiving key may not be re-used even in alice-to-bob scenarios, ECIES would not even serve as an inefficient intermediary solution."
crypto,35krjf,untitleddocument37,2,Tue May 12 17:35:47 2015 UTC,"OK, I did not look at the implementation (I can't stand reading javascript unless I'm being paid -- a lot -- for it.)"
crypto,35krjf,Natanael_L,2,Tue May 12 18:14:19 2015 UTC,"ECIES uses DH for the key exchange so you can totally encrypt ""to yourself"" since the other key can just be random (provided you store it's public key with it).  ECIES isn't meant to encrypt large secrets though.  The KDF they use to stretch the shared secret is based on multiple iterations of a hash function.  Instead you'd encrypt a key just like with hybrid RSA."
crypto,35krjf,bitwiseshiftleft,1 point,Mon May 11 11:07:50 2015 UTC,"Thank you. So it works but it's not efficient? I have it implemented and have a long todo list and little time to release the alpha version. If it's slower and needs more storage than something else, that's fine."
crypto,35krjf,ctz99,1 point,Mon May 11 14:42:37 2015 UTC,Using ECIES independently for every block would be inefficient. Using it once per batch of data to encrypt to generate a key for use with for example AES-GCM or ChaCha20+Poly1305 is both secure and quite fast.
crypto,35krjf,ctz99,1 point,Mon May 11 15:05:57 2015 UTC,ECIES is a hybrid encryption scheme.
crypto,35krjf,ctz99,1 point,Tue May 12 17:55:32 2015 UTC,"ECIES does not provide authenticity, so no.  But storing a signed ECIES ciphertext might be OK."
crypto,35krjf,ctz99,1 point,Mon May 11 14:43:59 2015 UTC,How does it not provide authenticity? Decryption fails if the public key of the sender is not provided.
crypto,35krjf,Natanael_L,2,Mon May 11 14:48:57 2015 UTC,"What definition of ECIES are you using?  The ones I know of are from P1363 and IEEE 18033-2. Both are the same shape, and indeed are fully hybrid schemes; I'm not sure what /u/untitleddocument37 is talking about.  Their encryption operations only take the recipients public key (therefore fundamentally cannot provide sender authenticity), and decryption operation takes the recipient's private key and the ciphertext (see 10.2.4 in 18033-2 )."
crypto,35krjf,untitleddocument37,1 point,Mon May 11 15:01:07 2015 UTC,"I use the ECIES package by bitpay and had asked there on the same topic. I concluded that although decrypt might not need the sender's public key because it gets delivered with the message, the recipient can still know that the message was encrypted by a certain public key, thus there is authenticity? Is that assumption wrong? Could somebody swap the message without knowing the sender's private key?"
crypto,35krjf,ctz99,2,Mon May 11 15:34:38 2015 UTC,"This is not ECIES.  It looks to me like plain static ECDH. The crucially missing piece is that ECIES encryptions have a per-message key generation.  So, it still doesn't provide authenticity. But also it doesn't provide semantic security either."
crypto,35krjf,Natanael_L,2,Mon May 11 16:02:50 2015 UTC,I'll reply again and point out that the package you linked doesn't even provide meaningful ciphertext integrity: it doesn't include the IV in the MAC input.  Do not use this library or anything by the same author. They don't know what they're doing.
crypto,35krjf,Natanael_L,1 point,Mon May 11 17:54:02 2015 UTC,"You should notify bitpay (the developer) about that. They do have some people that know crypto, but maybe not all of them are equal..."
crypto,35krjf,Natanael_L,1 point,Mon May 11 19:19:01 2015 UTC,"I amended my (closed) issue and I'm anxious to learn what's going on. I'm clearly not up to speed to fully understand all the feedback I got today but I hope the crypto wizards can come to an agreement on that, so I can continue producing tools with it :)"
crypto,35krjf,Natanael_L,1 point,Mon May 11 20:23:29 2015 UTC,ECIES from x9.63 takes a DH shared secret and uses a hash based KDF to stretch it.
crypto,35krjf,marklarledu,1 point,Mon May 11 18:30:58 2015 UTC,"That's the KEM half of the story. There is also a DEM half, which takes that stretched secret and feeds it into a generic composition symmetric encryption construction.  Here's the diagram from P1363.  http://i.imgur.com/e9u8YlM.png  edit: sorry, I checked X9.63 and its ECIES is entirely different. I also misread your original post. derp."
crypto,35gynj,mrkoot,6,Sun May 10 06:39:58 2015 UTC,"[EDIT: added explanation]  The purpose of this tool is to detect whether (the SHA1 hashing process of) a file --- for instance a TLS certificate --- matches known indicators for a collision attack.  For details on how it works, see Stevens' CRYPTO 2013 paper Counter-cryptanalysis (.pdf) or Stevens' EUROCRYPT 2013 paper New collision attacks on SHA-1 based on optimal joint local-collision analysis (.pdf). If interested in the MD5 part (only available in libdetectcoll-0.2), look at these slides (.pdf) and the resources related to HashClash.  libdetectcoll-1.0 was released on May 7th 2015 and presented on May 8th during Security in Times of Surveillance at TU Eindhoven. The author, Marc Stevens, states that the new release ""protects against twice as many SHA-1 attack classes (disturbance vectors), but is 9 times faster than previous version. Speed is now 1.87 times normal SHA-1."" (the latter meaning that collision detection, based on differential paths, is less than twice the cost of computing the normal SHA-1 hash).  Given an input file, it looks for differential paths, which are indicators of certain collision attacks based on 'local collisions'. If it finds a collision, it shows the SHA1 hash and the marking ""*coll*"":  $ bin/sha1dcsum_partialcoll tools/test/sha1_reducedsha_coll.bin dd39885a2a5d8f59030b451e00cb45da9f9d3828 *coll* tools/test/sha1_reducedsha_coll.bin   If no local collision is found, it only shows the SHA1 hash:  $ bin/sha1dcsum_partialcoll tools/test/md5_4a.exe  0033f995a30fd2ccbf60cc1e7d7db9e649397668  tools/test/md5_4a.exe    To compile on OS X you may need to change 'libtool' to 'glibtool' in the Makefile (see variables LT_CC and LT_LD)."
crypto,35gynj,DemandsBattletoads,4,Sun May 10 06:41:29 2015 UTC,I'm a bit confused? What exactly does this library do?
crypto,35gynj,hinckley,7,Sun May 10 08:40:47 2015 UTC,I believe it tries to detect if a given message [input to a hash function] has been artificially constructed to create a specific hash output.  Basically it's detecting if the data is suspicious (matches a pattern that suggests it's exploiting weaknesses in MD5/SHA1). If you were using MD5/SHA1 you might use this to decide that a message can't be trusted even if it matches the expected hash value.
crypto,35gynj,MacroMeez,1 point,Sun May 10 11:45:56 2015 UTC,What kind of suspicious things would it look for?
crypto,35gynj,Natanael_L,1 point,Sun May 10 15:37:03 2015 UTC,Look at the MD5 collision attacks and the random-ish suffixes to files that those tools generate
crypto,35gynj,astrolabe,1 point,Sun May 10 15:44:16 2015 UTC,Has anyone published a collision for SHA-1?
crypto,35gynj,Natanael_L,2,Sun May 10 20:12:17 2015 UTC,"Not for standard SHA1, but for modified SHA1 (custom constants)"
crypto,35gynj,firajaa,2,Sun May 10 20:17:00 2015 UTC,"And for the reduced SHA-1 (a full collision with the 53 rounds version and a two-block collision with the 73 rounds version, if I remember correctly)."
crypto,35h4xy,Belthian,5,Sun May 10 08:32:53 2015 UTC,"I don't understand what seems to be unnecessary complexity here:    Skeleton key: the most permissive key, able to unlock any other key in the key tree. Key tree: the representation of the whole domain of keys used by an organization in a tree-based format. Master key(s): the key(s) that have the skeleton key as their direct parent key. Parent key(s): key(s) that have children key(s). Children key(s): key(s) that have a parent key. Sibling keys: multiple keys that have the same parent key. Root key: the key that is used to follow a path to arrive at a desired child key. not to be confused with the skeleton key, although it COULD be the skeleton key in certain circumstances.    If you have a tree, where A is the parent to B, C, D, and A is the highest node in the tree, why do you need any more than the Root, Parent, Child, and Sibling relationships?   Parents have one or more children keys Parents may themselves have parents. The root has no parent and is the highest ancestor of any key in the tree Any two keys are siblings if they have a common parent.   The first three properties define the Child, Parent, Grandparent.. relationships via induction.  Then define the following properties using those relationships:   Parents have control over their children and all descendants of those children Siblings have no control over each other The root has no parent, and is the first parent."
crypto,35h4xy,antiduh,-1,Sun May 10 14:03:12 2015 UTC,"Eh, the only definition that I don't believe needs to be there is the master key (I'm thinking about removing it).  I think you're confusing the root key for the skeleton key. The skeleton key would be node A.  The root key is simply the key that is being used with a program such as Gotlo to generate a child key."
crypto,35h4xy,Nonchalant_Turtle,5,Sun May 10 19:07:58 2015 UTC,"That terminology might get confusing - it's non-standard for talking about a tree structure. What you're referring to as the root is usually called the lowest common ancestor. Calling it LCA might be less catchy, but it'll also be much easier for others to understand."
crypto,35h4xy,MrMasterplan,3,Mon May 11 00:03:45 2015 UTC,"Is it possible to change a child key without changing the parent key? If yes, what additional information is used in generating the child key? If not, how are you going to handle the case where a child node is compromised?"
crypto,35h4xy,MrMasterplan,1 point,Sun May 10 11:48:35 2015 UTC,"I don't quite understand this question?  Basically SKC works like this:   Every key in the key tree (excluding the skeleton key) is named.   This name can be anything, such as a number or letter (as used in my examples), or it can be actual names such as ""advertising_team"". The naming scheme that is used is determined by the organization.  To generate a new key, you take its name and its parent key and you concatenate them and then hash it with SHA-256 to give you a 256 digest that may be used as an encryption key. So basically the parent key is the value that is hashed, and the key name is the salt.   With this method, you are able to generate ANY key using the skeleton key, and child keys aren't able to generate their parent keys.  If a key is compromised, every single child key and their descendants becomes compromised. Any sibling keys and the parent key ARE not compromised.   Sorry is I didn't answer your question very well, I still haven't found a good method to explaining SKC."
crypto,35h4xy,MrMasterplan,1 point,Sun May 10 19:00:14 2015 UTC,"Well I was thinking in terms of practical usability. My initial thought was that the key naming might be something like (for example) ""IT-admin/departmentA/employeeSmith"" which would not make it possible to issue new keys in case Smith loses his key. I realise now that you would need to use something like ""IT-admin_issueA/departmentA_salt123/employeeSmith_salt_abc"" where the ""salts"" would not need to be secret, but they do need to be used and looked up every time you want to generate a child key.   edit: and by ""loses his key"" I mean it is compromised and he needs a new, different one"
crypto,35h4xy,bitwiseshiftleft,2,Sun May 10 19:30:01 2015 UTC,"And I guess my point is really that by the time you have a database of salts, you may just as well generate a unique key for each node, encrypt the node key with its parent key and save the parent-encrypted node key in a database. The end-result will be roughly the same: To get a node key from a parent, or grandparent key you need to do one database lookup plus one crypto-algorithm per node in the path. In your case you look up a salt per node and hash, in my case you look up the encrypted node key and decrypt.  What makes your system better?"
crypto,35h4xy,kkhop,1 point,Sun May 10 19:57:12 2015 UTC,"In your case you'd need a single managed database to hold all of the encrypted keys. In my case, you could store the salts in any manner you wish, and you could even create a solid naming scheme which would minimize the need to lookup salts. My system also uses hashing to generate keys, which is faster than decryption.  Gotlo is simply a module that can be imported to use SKC in your applications. SKC is the concept. With Gotlo you can create an application to manage the salts in any way, etc.  Gotlo is NOT designed to be a one-size-fits-all solution, instead developers use Gotlo to create applications that fit their own need."
crypto,35h4xy,rya_nc,3,Sun May 10 20:09:26 2015 UTC,"This is a good idea, but you aren't the first one to come up with it.  The company I work at even uses it in products.  An even fancier thing you can do with this is to use it for public/private keypairs: for each path, you can derive a private key for the children from the private key for the parent, and the public key for the children from the public key for the parent.  This is called hierarchical identity-based encryption.  I don't think people use this in practice, though, because it's super complicated and doesn't get you that much beyond ordinary PKI."
crypto,35h4xy,MrUnknown,3,Sun May 10 21:31:13 2015 UTC,"It's really nice that you came up with it by yourself! It's called ""key hierarchy"", you should check the NIST recommendation for key derivation: http://csrc.nist.gov/publications/nistpubs/800-108/sp800-108.pdf  You will find the same scheme at section 6."
crypto,35h4xy,MrUnknown,1 point,Mon May 11 19:25:13 2015 UTC,Since it's already been done and other projects are much more documented I'm probably shutting down the project.  Thanks though to everyone who commented/gave suggestions! I never knew it had already been done.
crypto,35h4xy,MrUnknown,2,Mon May 11 20:25:25 2015 UTC,Probably of interest: https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki
crypto,35h4xy,MrUnknown,1 point,Sun May 10 19:10:07 2015 UTC,You may want to look into Cryptree: http://dcg.ethz.ch/publications/srds06.pdf
crypto,35h4xy,boomanwho,2,Sun May 10 17:33:16 2015 UTC,"This is interesting, and I have never seen it before. But it looks like you still have to store each encryption key that is made, which is the whole reason SKC was created.  With Cryptree, you still need to store your keys in whatever manner you choose. Storing keys becomes very complex very quickly. And then you have to create an access-control system to limit access to these keys. It would become very dirty and complex.  Sorry if I'm misunderstanding Cryptree."
crypto,35croi,SushiAndWoW,2,Sat May 9 01:38:06 2015 UTC,"Who is this? Why should I, without the competence to evaluate this myself, trust that these are actually being evaluated competently?"
crypto,35croi,lahwran_,2,Sun May 10 01:19:07 2015 UTC,The index page lists the panel of experts who are evaluating the submissions.
crypto,35croi,floodyberry,1 point,Sun May 10 04:04:28 2015 UTC,Doh. Completely missed that.
crypto,35croi,lahwran_,2,Sun May 10 07:18:17 2015 UTC,"This seems sufficiently descriptive to me, as a random reader. Could you give a bit more guidance so that we know what's appropriate to submit here?"
crypto,35croi,ldpreload,2,Sat May 9 09:29:33 2015 UTC,"Edited. I meant something more like ""title that just describes what's linked"", but I guess that wasn't obvious."
crypto,35croi,Natanael_L,1 point,Sat May 9 15:23:08 2015 UTC,I appreciate the feedback. I attempted to make the title as neutral/descriptive as possible. How would I improve it?
crypto,35croi,david55555,2,Sat May 9 15:30:33 2015 UTC,"There are regularly contests to develop new algorithms, or find flaws in systems, etc... The announcement of a new major contest is certainly worth posting, as is the announcement of results of said contest. ""NIST announces competition to develop new hashing algorithm"" or ""NIST announces winner of hash function competition"" is definitely worth posting.  The use of TIL suggests that this isn't noteworthy or worth mentioning. ""TIL that NIST held a competition and that Keccak was the winner."" Well, yes, we knew that almost three years ago. If you take out the TIL then you have ""An ongoing competition for password hashing algorithms that has announced 9 finalists and intends to announce a winner by the end of June"" and again, how is that noteworthy. Did they announce intermediate results? Is it a new contest? Why not just wait until mid or late June to post ""Results of the Password hashing contest expected tomorrow"" or ""Results of the contest are posted""?  As it is your posting is something like three months too late, and one and half months too early. I just don't know what is newsworthy about this, and you might note that it hasn't generated any discussion. Presumably those who knew about and cared about the contest are thinking ""well duh!!"" and those who didn't know about it also don't care that much about it, or don't have anything interesting to say about it.  Now its possible that everyone overlooked this contest, and that it never got posted to the subreddit in February when it was announced. In which case you might say ""This doesn't seem to have been posted yet, but there's a contest..."" but again, the fact that it isn't submitted in a timely fashion suggests that it might not be that big a deal."
crypto,35croi,Lentil-Soup,2,Sat May 9 15:51:45 2015 UTC,"I didn't know about it, saw the post, clicked the link, read all of the content, upvoted the post, and then came here and saw all of the negative comments on what I thought was an interesting link."
crypto,35croi,david55555,2,Sat May 9 19:11:13 2015 UTC,The absence of on topic discussion about the contest is what makes it clear to me this is not appropriate for /r/crypto. When you would rather discuss if something should belong in the forum than the item itself; that is probably indicative that either (a) the forum doesn't have a clear understanding of what it wants or (b) it doesn't belong there.  That you found it interesting is a personal judgement. I would be curious what you found interesting about it... perhaps that might lead to some valuable conversation.
crypto,35croi,Natanael_L,1 point,Sat May 9 21:03:12 2015 UTC,"My comment wasn't meant to be negative at all, but it seems people really didn't like my way to express myself"
crypto,35croi,david55555,1 point,Sat May 9 21:30:19 2015 UTC,"Logic suggests that interesting things happen in the world, and that such things are still interesting even if no one thinks to submit them to /r/crypto. Chances are, they remain interesting even if they're submitted late.  I found out about this competition after already starting work on a solution for the problem that this competition aims to solve. I had previously posted two related topics in /r/crypto about what I'm trying to do, and no one seemed to mention that this (very relevant) competition is taking place.  Therefore, I thought people might find it of interest to know."
crypto,35croi,ldpreload,2,Sun May 10 09:01:42 2015 UTC,"Perhaps you aren't hearing about this contest because (a) its not an important or noteworthy contest (I'm not really in the field so I can't say too much about the people running it and how seriously it is being taken), or that (b) people think you are spamming the channel and are dismissing you off-hand.   I had previously posted two related topics in /r/crypto about what I'm trying to do, and no one seemed to mention that this (very relevant) competition is taking place.   I assume you mean your two postings on the BusyBeaver[*] key derivation function? Both of which appear to have zero points and a fair number of negative votes to your comments in those threads. You alone account for 1/3 of all postings in this subreddit over the past three days.   It is not polite to resubmit a posting three days in a row because you didn't get the response you wanted. It is spam.  [*] As for the name of your algorithm, keep in mind that ""Busy Beaver"" is a term in computation theory and has a particular meaning there. It may give people a false impression about what your algorithm does. http://en.wikipedia.org/wiki/Busy_beaver"
crypto,35croi,Natanael_L,3,Sat May 9 21:10:57 2015 UTC,(a) its not an important or noteworthy contest (I'm not really in the field so I can't say too much about the people running it and how seriously it is being taken)   It is certainly important and noteworthy.
crypto,35a50i,Diasparo,4,Fri May 8 11:49:08 2015 UTC,Wasn't there a massive thread here earlier?
crypto,35a50i,TNorthover,3,Fri May 8 16:39:45 2015 UTC,I think you mean either the Schneier thread or the Congress video thread.
crypto,35a50i,Natanael_L,2,Fri May 8 17:27:03 2015 UTC,"No, it was definitely about May's comment. Someone posted a transcript of what she actually said and everything. Maybe in a different subreddit? (Though I can't find it now if so)."
crypto,35a50i,TNorthover,2,Fri May 8 17:30:33 2015 UTC,/r/security?
crypto,35a50i,Natanael_L,2,Fri May 8 17:44:12 2015 UTC,"I believe it was in some UK politics thread but it's linked somewhere.  I just don't remember where, I read it too !"
crypto,35854j,encryb,6,Thu May 7 22:15:32 2015 UTC,"http://i.imgur.com/3kMxDIT.png  Edit 5/8/2015 8:11am: I think i'm finally happy with the flow of the layout.   I can't believe how much time i spent trying to find a way to make it flow logically top to bottom, left to right, with no lines crossing, and all the green items ending up at the bottom and outside the box (i had to give up, and leave green ""transmit"" items in-place).  Edit: Changed it to include the RSA encrypted session key as part of the HMAC'd message (want to make sure they didn't tamper with the key). Also switched PBKDF2 to SHA256 for HMAC key generation.  Older: http://i.imgur.com/umJk4Lv.png"
crypto,35854j,JoseJimeniz,1 point,Fri May 8 01:53:32 2015 UTC,"Thanks!  I will double check, but I think PBKDF2 does not work on a couple of platforms, including Chrome Linux.  However, looking back at my original idea, I probably should do encrypt than sign or sign than encrypt, instead of sign and encrypt of the same data.  I am assuming that is the reason for including PBKDF2?"
crypto,35854j,JoseJimeniz,2,Fri May 8 05:59:45 2015 UTC,I edited it again.  As first i was just doing a public service of turning your words into a diagram. Then i changed it to not have to transmit a second secret key.  This morning i forgot that you want to include the encrypted key as part of the message authentication code (anything that could be altered by an attacker you want protected by the MAC)
crypto,35854j,JoseJimeniz,1 point,Fri May 8 11:49:57 2015 UTC,I only used PBKDF2 to generate the HMAC key so that it's something else you don't have to serialize. You could also just take the SHA256 of the session key.  It's an act of laziness and simplicity than anything else.
crypto,35854j,johnmountain,1 point,Fri May 8 11:16:48 2015 UTC,"Understood.  I've been reading the following paper regarding ordering of RSA signing and encrypting. http://world.std.com/~dtd/sign_encrypt/sign_encrypt7.html Doing encrypt than sign might not be best choice.   Once it all makes sense, I'll try to make a proper flowchart. :-)  Thanks again for your help."
crypto,35854j,aydiosmio,4,Sat May 9 21:01:49 2015 UTC,"Safari does not support AES-GCM   Ugh. Why not? It's not that new, is it?"
crypto,35854j,orthecreedence,3,Fri May 8 04:52:33 2015 UTC,"AES-GCM has been around since 2008 and it's been hardware accelerated in Intel hardware since probably 2010.  Apple operating systems use AES-GCM extensively, yet it is missing from their CommonCrypto library. And WebKit does expose anything that is not in CommonCrypto.  I think the reason that Apple didn't include it is that is not hardware accelerated on their ARM chips, unlike AES-CBC."
crypto,35854j,Westicle,3,Fri May 8 05:50:45 2015 UTC,"Unless your implementation has a resource, licensing or language limitation, just import from a common library that has a compatible licence.   A study: http://blog.engelke.com/2014/08/23/public-key-cryptography-in-the-browser/"
crypto,35854j,JoseJimeniz,1 point,Fri May 8 01:51:56 2015 UTC,"I am using something very very similar to the study you linked. We both use window.crypto.subtle. In addition to AES-CBC for symmetric encryption and RSA-OAEP for asymmetric encryption I am also using HMAC for symmetric authentication and RSA signing for asymmetric authentication.   Of course, this complicates things significantly. :-)"
crypto,35854j,Westicle,2,Fri May 8 05:30:08 2015 UTC,"Makes sense, and I believe this is the correct method. However, you might want to check out openpgp.js. This has the added benefit of letting you use existing PGP public keys."
crypto,35854j,sanderD,1 point,Fri May 8 02:22:51 2015 UTC,"I need to checkout openpgp.js in a bit more detail.  Unfortunately, as far as I can tell,  they use webcrypto/window.crypto.subtle only for RSA key generation and as source of entropy. I did a couple of benchmarks  on various javascript libraries and AES encryption using webcrypto is something like 20x faster than pure javascript. But I can at least look at their protocols."
crypto,35854j,JoseJimeniz,3,Fri May 8 05:34:13 2015 UTC,Never write your own crypto libraries. I guarantee you will do something wrong.
crypto,35854j,sanderD,2,Thu May 7 23:59:37 2015 UTC,Can you suggest an existing crypto library that uses all commonly available building blocks to form an already complete solution?
crypto,35854j,zardwiz,1 point,Fri May 8 01:54:26 2015 UTC,"Don't know of one, but I guarantee it exists. You should definitely not write your own library though."
crypto,354qh3,intronink,34,Thu May 7 02:20:00 2015 UTC,https://youtu.be/zk78_zmH4QI?t=48m35s if you want to hear the FBI admit they illegally get NSA data
crypto,354qh3,giszmo,8,Thu May 7 02:37:10 2015 UTC,"Oh, damn, also a gem :)"
crypto,354qh3,xJoe3x,5,Thu May 7 03:30:41 2015 UTC,"I just listened to that section, how did you come to that conclusion based on that conversation?"
crypto,354qh3,Natanael_L,1 point,Thu May 7 13:17:47 2015 UTC,"""trading emails"". But I agree it sounds more like regular communication rather than intelligence sharing"
crypto,354qh3,escalat0r,-1,Thu May 7 13:28:25 2015 UTC,"Yeah but let's not fool ourselves, they still trade intelligence insight."
crypto,354qh3,xJoe3x,2,Thu May 7 14:58:17 2015 UTC,I am not convinced that is a bad thing.  I can think of multiple situations where it should be done.
crypto,354qh3,escalat0r,-1,Thu May 7 15:01:59 2015 UTC,"Yeah like to prevent terrorism™, right?"
crypto,354qh3,xJoe3x,0,Thu May 7 15:03:27 2015 UTC,"First thing that comes to mind is a scenario like this:  If a foreign intel agency had infiltrated a foreign criminal organization and had information that the organization was going to smuggle in a shipment of (human trafficking, drugs, bad stuff) they should share that information with a LEA to catch both the foreign criminals and any domestic citizens that may be at the pickup.  In the process they should devise a method to protect the source of that information so the criminal element can continue to be thwarted.  (Kind of like we did in WW2 and information gained from the enigma machine).    Just an example, it may have no basis in reality, but there are definitely some good reasons to do so (I think at least)."
crypto,354qh3,escalat0r,-4,Thu May 7 15:13:16 2015 UTC,"This is likely legal, but the majority will be unrightful and illegal information sharing of innocent peoples data or low level crimes, the Snowden leaks show that the DEA is sharing data with the NSA to bust low level drug dealers, this is what shouldn't happen."
crypto,354qh3,xJoe3x,2,Thu May 7 16:41:08 2015 UTC,"I never saw any specifics of what information was shared to bust who.  Either way, I was just stating that information sharing is not necessarily bad.  It should be done when appropriate."
crypto,354qh3,escalat0r,1 point,Thu May 7 16:42:40 2015 UTC,"It should be done when appropriate   Not per se arguing against that, I just wanted to highlight the very real dangers of spy agencies sharing data, so the cases where this is allowed should be very narrow and strictly regulate.  And then they will obey those rules /s"
crypto,354qh3,Natanael_L,1 point,Thu May 7 16:46:18 2015 UTC,"I know they do, but this ain't it."
crypto,354qh3,giszmo,17,Thu May 7 15:10:44 2015 UTC,"It's hilarious :)  ""Anybody, raise your hand if you think this is even possible!"" … *noHandGoesUp*"
crypto,354qh3,FrancisCharlesBacon,15,Thu May 7 03:29:37 2015 UTC,"""Let the record indicate no one raised their hand""  Seeing the FBI with their tail between their legs was quite satisfying. It was was also surprising to see so many congressmen be realistic about encryption."
crypto,354qh3,conradsymes,7,Thu May 7 03:43:16 2015 UTC,"Congressman Ted Lieu represent! He has a computer science degree at Stanford was also the only one to personally answer my complaints on the Trans Pacific Partnership transparency issues. Barbara Boxer and Feinstein sent me a typical automated reply and never heard from them again.   Excerpt from Ted Lieu in this video:    ""It’s a fundamental misunderstanding of the problem. Why do you think Apple and Google are doing this? It’s because the public is demanding it. People like me: privacy advocates. A public does not want an out-of-control surveillance state. It is the public that is asking for this. Apple and Google didn’t do this because they thought they would make less money. This is a private sector response to government overreach.  Then you make another statement that somehow these companies are not credible because they collect private data. Here’s the difference: Apple and Google don’t have coercive power. District attorneys do, the FBI does, the NSA does, and to me it’s very simple to draw a privacy balance when it comes to law enforcement and privacy: just follow the damn Constitution.  And because the NSA didn’t do that and other law enforcement agencies didn’t do that, you’re seeing a vast public reaction to this. Because the NSA, your colleagues, have essentially violated the Fourth Amendment rights of every American citizen for years by seizing all of our phone records, by collecting our Internet traffic, that is now spilling over to other aspects of law enforcement. And if you want to get this fixed, I suggest you write to NSA: the FBI should tell the NSA, stop violating our rights. And then maybe you might have much more of the public on the side of supporting what law enforcement is asking for.  Then let me just conclude by saying I do agree with law enforcement that we live in a dangerous world. And that’s why our founders put in the Constitution of the United States—that’s why they put in the Fourth Amendment. Because they understand that an Orwellian overreaching federal government is one of the most dangerous things that this world can have. I yield back.""   Simply incredible. What’s also incredible is that it takes an immigrant to remind the American public that the Constitution still matters. If we had more computer science majors in Congress who believe in the Constitution, it’d be a lot harder for the statists to dazzle the elderly and crony lawyers with bullshit into so easily suspending the Bill of Rights."
crypto,354qh3,pwnwaffe,1 point,Thu May 7 20:19:17 2015 UTC,dazzle the elderly and crony lawyers with bullshit into so easily suspending the Bill of Rights.   I think they are only pretending to be dazzled. Keep in mind Congressmen have staffs to advise them on things no one could possibly understand.
crypto,354qh3,gsuberland,5,Sat May 9 23:02:02 2015 UTC,Steve Gibson always delivers in the field of comedy ;)
crypto,354qh3,giszmo,1 point,Thu May 7 10:18:32 2015 UTC,"Usually because he gets things comically incorrect, but I'll give him credit here - this is a gem."
crypto,354qh3,changetip,4,Fri May 8 13:22:25 2015 UTC,0.5 USD on me for sharing this hilarious comedy :) /u/changetip
crypto,354qh3,me_z,1 point,Thu May 7 03:48:32 2015 UTC,"/u/intronink, giszmo wants to send you a Bitcoin tip for 0.5 USD (2,184 bits/$0.50). Follow me to collect it.    what is ChangeTip?"
crypto,354qh3,Natanael_L,0,Thu May 7 03:50:23 2015 UTC,"This is probably not the platform to discuss such things, (particularly this subreddit), but I think we can all agree that having an orwellian/surveillance state is not a good thing.  But since we are all somewhat 'experts', or at the very least knowledgeable, in the field of encryption and security systems, I'll pose this question: What is the technical solution to thwart a nuclear attack, or some large scale terrorist attack on a population if those attacks were planned and executed with the technologies that are being protected by Google/Apple/etc?      I am in no way advocating a surveillance state, just trying to pose the question/play devil's advocate.  Maybe even have an insightful discussion."
crypto,354qh3,me_z,9,Thu May 7 13:13:53 2015 UTC,"What is the technical solution to thwart a nuclear attack, or some large scale terrorist attack on a population if those attacks were planned and executed with the technologies that are being protected by Google/Apple/etc?     To let the human infiltrators that always have been the most effective counterweapon to communicate home with the same kind of tools."
crypto,354qh3,Natanael_L,1 point,Thu May 7 13:29:48 2015 UTC,I'm not sure I understand what you mean. Can you elaborate?
crypto,354qh3,me_z,12,Thu May 7 13:34:56 2015 UTC,"You don't simply hack your way into criminal organizations.   You need humans that tell you what is happening, what information can be trusted, who's who, when things are likely to happen, what to look for, etc...  Purely technological methods are too easy to fool. All their electronic communication could be a massive decoy while the important things happen on paper, and you would be clueless until they struck and you'd realize that all this information you got was false, despite looking so real.   No humans in the field that are loyal to you is how you lose.   Your technical solution is to enable the people who are loyal to you to communicate securely with you."
crypto,354qh3,peacefinder,-5,Thu May 7 13:47:16 2015 UTC,"If I am an intelligence organization, I need to know every source of intelligence that is relevant to whatever threat that exists.  Sure, everything may be done on paper by your enemies, but then again maybe they don't? What about the one time we get lucky and they slip up?  Are we willing to throw intelligence away for the price of a potential large scale attack?  And these are all assumptions, but logically I feel that this is one of the main reasons for these capabilities.  Would 9/11 have happened if there were adequate intelligence sharing with these capabilities?  We don't know.  But I am sure there are family members of ~3000 people who would like to know.    I don't mean to be dramatic, but I think if there were a well regulated capability, it might be worth it.  Then fundamentally we get to the issue of trust. How can we trust the governments of the world to do the right thing and not misuse these capabilities?  Pretty crazy catch 22."
crypto,354qh3,me_z,5,Thu May 7 14:07:10 2015 UTC,"It's important, when managing risk tradeoffs, to keep the scale of terrorist attacks in perspective.   In 2001, over a decade ago, a well-organized terrorist attack killed around 3,000 people in the US. It was awful.  However, in 2001 over 30,000 people in the US were killed in automobile accidents. The same was true for each other year in the last several decades. (See US CDC death statistics or DoT accident statistics.)  So, the auto accident problem is quite a bit larger, in human death cost, than the best shot terrorists have taken. Two orders of magnitude larger at least. As risk managers, maybe we should look at that problem first as it is much larger.  What is the technical solution to this problem? Do we mandate self-driving cars for all? [1]  The point of terrorism is to scare us, to make us do things not in our interest. I know a hostile act seems different than accidents, but really it's not. We should not let fear of some hypothetical act determine our response.  [1: And if we do, will those cars support remote operation? Would that remote operation be protected by backdoored crypto?]"
crypto,354qh3,peacefinder,0,Thu May 7 18:02:26 2015 UTC,"And I get that.  Patriot Act was a knee jerk to 9/11.  But I'm just posing the question of if a large scale (nuclear, biological, whatever) terrorist attack can be thwarted by using these technologies - potentially savings 100s of thousands, is it not in our best interest to have some sort of regulated measure to do this?  Again I'm not trying to advocate for this.  I appreciate the downvotes, but just because you disagree with it doesn't mean it should be downvoted.  I am just trying to have some sort of meaningful discussion, and maybe learn a thing or two for myself, not further the agenda of someone else."
crypto,354qh3,Natanael_L,3,Thu May 7 18:09:37 2015 UTC,"No downvotes from me. :-)  The other problem is that the scenario you describe is farfetched. It is good storytelling, and we accept it readily in movies or tv. It sounds plausible.  But it's hard to imagine how it could happen in the real world. Think about the most successful biological attacks in the US (the Rajneeshi group in Oregon), or the most successful chemical attack (aum sri rukiyo in Japan) or the DC snipers, or that Oklahoma City asshole, or the Unabomber... These groups or individuals all succeeded because they had good operational security. None of them would have used software with known back doors to communicate. Especially after all the publicity this issue has had!  Conversely the attacks that have been foiled have been penetrated by human agents from the earliest stages. It's never email snooping that stops them. (Though it may aid in getting a conviction later.)   There's been a lot written about the ""ticking time bomb scenario"" by people more informed and experienced than I. I'd recommend you search some up, especially the stuff written by Schneier."
crypto,354qh3,me_z,8,Thu May 7 19:03:27 2015 UTC,Experience and evidence shows mass surveillance doesn't work. Trying to keep that edge by keeping everybody insecure hurts the world more than it benefit it.
crypto,354qh3,Natanael_L,-1,Thu May 7 14:18:49 2015 UTC,"Don't mean to be flip, but can you provide evidence? I'll also do some research."
crypto,354qh3,giszmo,7,Thu May 7 14:31:56 2015 UTC,http://warincontext.org/2013/10/03/nsa-admits-grossly-exaggerating-effectiveness-of-mass-surveillance-in-thwarting-terrorism/
crypto,354qh3,dafukwasdat,-5,Thu May 7 15:27:58 2015 UTC,"Hey guys, thanks for down-voting. This is a crypto-channel, so why not talk about crypto? Could you please reply why this would technically not be possible? The video goes to great length saying that if only we could keep only the bad guys out, it would be a good idea and how ""our"" great nation should be capable to fix the technical details blabla and only very briefly touches on the moral aspects. I'm concerned that with this take on the matter, they could vote in favor if they come to conclusions to which I came but that would still be the wrong thing to do. Can't we discuss this here?  I don't want to advocate for backdoors but a dictatorship that wanted this backdoor, disregarding that the market is global and others want a backdoor, too, I see no fundamental issue of having legal interception keys – one per every user per every app. Those keys could get disclosed by an institution on a case by case basis, publishing at the same time the public key associated with the private key, so that abuse can be detected.  I'm into bitcoin. Use HD keys. Every company gets an account in the tree that only the gov. knows the root of, and the root extended public key is public, so all can know the entirety of all public keys.  Disclaimer: I am developing Bitcoin tools and probably would lead the revolt against a surveillance state but I don't see why it would technically not be possible."
crypto,354qh3,giszmo,17,Thu May 7 03:35:46 2015 UTC,"Your system, as you described it, would be based on the trust of the institution that handles the keys. Which means we have here a central point of failure.   For instance, let's assume the NSA thinks it's too much a hassle to ask for a warrant on a case-to-case basis and wants to have unencrypted traffic of everyone. If the NSA manages to implement a backdoor into the institution, the NSA would have access to all the keys in an unlimited fashion and wouldn't need a warrant anymore. (Same goes for foreign intelligence agencies if you consider the NSA as ""the good guy"")   So that means that the security of any app/program would depend on the security of the institution, and as a software developer or user you can do nothing except hope that the institution didn't get hacked. This is if all work as planned and  the institution only cooperate with a lawful warrant.  So to sum up, such a backdoor system would, even in the best case be flawed, and it would only be a matter of time for someone to hack it, thus rendering all encryption pointless."
crypto,354qh3,dafukwasdat,1 point,Thu May 7 11:11:44 2015 UTC,So it boils down to the op sec of the key holder? Is that what you are saying? Even if the institution were 5 institutions in 5 different nations with air gapped systems holding one fifth of the keys each and a one key at a time policy you think all keys would leak eventually?  Thank you for answering by the way.
crypto,354qh3,giszmo,5,Thu May 7 14:39:39 2015 UTC,"Yes. There is no absolute security. You must consider that every intelligence agency, every hacker, every mafia would want to crack this system. Even if just one fifth of the keys gets leaked, it's still one fifth of the users of US apps/software that gets exposed, that's an enormous amount of data that could be collected."
crypto,354qh3,dafukwasdat,2,Thu May 7 14:53:53 2015 UTC,"You got me wrong. A fifth of each key. A hacker would have to compromise all institutions to get anything at all.  Assuming that the institutions would cooperate against crimes but not for espionage they could cooperate accross nations on a very limited amount of serious cases.  Scheme, assuming familiarity with bitcoin and its hierarchically deterministic keys: Each institution has to create an HDPrivateKey xpriv and share its corresponding xpub publicly. Each software service picks any point in that hierarchy at will and applies this derivation to the 5 xpub keys. It then further derives for each customer an individual public key. xpub.derive(companyOffset).derive(customerOffset).pubKey. Using this pubKey for encryption but not sharing the company offset would even add the company as a further party LE would have to ask for the key.  So the data would be encrypted using some encrypt(encrypt(encrypt(data,key1),key2),key3).   Supposedly there is crypto experts here and you refuse to discuss approaches? Come on please share your thoughts."
crypto,354qh3,giszmo,5,Thu May 7 15:38:47 2015 UTC,"Yes this approach would require to hack all 5 institutions but that doesn't change the fact that you (as user or software developer) are not in control of your security and that you have no guarantee that someone hasn't hacked all 5 of them.  Also, the people here refuse to discuss technical approaches with you because it is simply impossible to have a cryptographic secure software with a backdoor. Here is why; if you have a software that is build on a encryption scheme that relies on an external authority, your system is only as secure as this external authority. As you don't control this authority, you rely on it to have an excellent security. Therefore it is no more secure than any closed source security software, which is bad (very bad)."
crypto,354qh3,dafukwasdat,2,Thu May 7 17:08:22 2015 UTC,"With gag orders, I wouldn't even expect a hack to be necessary for people snooping through my stuff but from a government perspective I would say such a system could be very desirable. (I'm very cynical about governments' interests, so thank you for bringing up the uncertainty/closedSource argument.)"
crypto,354qh3,DrAwesomeClaws,1 point,Thu May 7 22:59:38 2015 UTC,You're welcome. Happy cake day :)
crypto,354qh3,giszmo,3,Fri May 8 05:43:04 2015 UTC,Why would criminals / terrorists use that crypto rather than open source solutions with no backdoors?
crypto,354qh3,giszmo,0,Thu May 7 20:58:12 2015 UTC,"Why would crypto experts not want to discuss a crypto topic?  To answer your question, a dictator could punish the circumvention of the backdoor with a death penalty.  … whatever, I see this is not a welcome topic in this sub/thread. :("
crypto,35975i,SushiAndWoW,5,Fri May 8 03:53:13 2015 UTC,"scrypt wasn't designed to be hard to optimize in hardware, it was designed to be expensive to implement in hardware by requiring a large amount of memory that could not be efficiently circumvented by trading memory for computation (memory hard). SolarDesigner showed that with scrypt, the area-time product (Memory Required * # of blocks processed) can be lowered to a floor of 1/4 of a naive implementation, but no lower. scrypt was also designed to use large amounts of memory, where large is 4mb at the minimum, and scaling to however much memory you can afford to use. You should either be paying through the nose on memory to build scrypt ASICs, or you will have to build so many scrypt cores to make up for the lack of memory that you won't be saving any money.  BusyBeaver, on the other hand, only needs 64kb per instance, which is trivial. It might? be ok for GPU defense, but not hardware defense."
crypto,35975i,floodyberry,2,Fri May 8 07:10:47 2015 UTC,"Great feedback, thank you!  I suppose, then, it needs to use more memory, which means that SHA-256 becomes too expensive, which means it needs to switch to something more like Salsa to populate it. Right?  Harrumpf."
crypto,35975i,PM_ME_UR_OBSIDIAN,2,Fri May 8 23:33:13 2015 UTC,"I have so far not received this feedback. Comments in my original topic have been frustrating and dismissive, and have focused not on what the algorithm is, but on what the commenter imagined it should be (for use in mobile phones, eliminating side channels - not the usage scenarios I had in mind).   I can think of no better way to get good feedback than to be patronizing with the community."
crypto,35975i,Natanael_L,0,Fri May 8 04:57:56 2015 UTC,"I'm trying to discourage the kind of person who, when asked ""Is this a good road to take to San Francisco?"" inevitably responds with ""San Francisco sucks! Listen to fifteen reasons you should go to Denver.""  To be courteous, the least you need to say is ""This is or is not a good road to San Francisco for such or other reason."" Once you have done so, it's okay to continue with ""... but here's why you should go to Denver, instead."""
crypto,35975i,Natanael_L,1 point,Fri May 8 05:14:50 2015 UTC,"My comments were more along the line ""have you considered how to avoid these common mistakes with going to San Francisco?""."
crypto,355t1h,cedricvanrompay,2,Thu May 7 10:23:09 2015 UTC,"The word you're looking for is 'ontology'.  There was a small attempt in the early 2000s to have an RDF OWL ontology but that never seemed to pass. There doesn't seem to be any more recent attempts. A somewhat related ontology is the STAC ontology, for which there are a number of papers, though practical use seems to be minimal if any.   Since there isn't a well defined or standardized ontology, a database of papers like you describe is unlikely to exist."
crypto,355t1h,silverforest,1 point,Thu May 7 21:34:42 2015 UTC,"Thanks. Damn, STAC is from my own research center, shame on me :-s"
crypto,355t1h,censoredspeech,2,Wed May 13 09:42:57 2015 UTC,might try /r/semanticweb
crypto,3535fn,cyancynic,8,Wed May 6 18:38:16 2015 UTC,"You cannot protect a phone number with a hash - the search space is too small. email is slightly better, but there have been address recovery attacks run against hashed mail addresses (gravatar).  Hashing the email address plus phone number would be better, but cracking will probably still be possible in many cases."
crypto,3535fn,rya_nc,3,Wed May 6 21:15:04 2015 UTC,"I think you have to decide what the goal is.   He already has the two-factor authentication. Attackers trying to take over an account aren't stymied by the e-mail address or phone number hashing.  It's really only to defend against two cases:   protect people's e-mail addresses or phone numbers from spammers in case of a breach  But there's nearly no difference in spammers trying every e-mail address and phone number (by simply e-mailing or calling them all) and trying every e-mail address to see if the hash matches. (Just save yourself a step and add every random address you attempt to your spam list) protecting from a subpeona, ""Give us any information you have about e-mail address foo@example.net or (911) 555-1212  In which case a simple hash is sufficient to be able to tell the court: we have no record of that phone number   There is a third possibility:   in the case of a data breach, we want to prevent anyone from being able to link a particular e-mail or phone number to an account on our service. This is for people who are concerned about identity theft (because sometimes an e-mail address is all that's needed to steal an identity; or because we want customers using our SilkRoad service to not be traceable back to their e-mail or telephone numbers).   In that case you get into the realm of needing scrypt to protect, not only, the password, but also the e-mail and telephone.  And while the last is a nice goal; i suspect the real motivation is a or b."
crypto,3535fn,JoseJimeniz,6,Thu May 7 03:11:32 2015 UTC,"SHA-256 or SHA-512 would be reasonable choices.  You should not allow a potential attacker to determine whether or not a given username (email/phone) exists as a user in your system or not, so I'm not sure what you're describing is a good idea. You should not have two error messages like ""username unknown"" and ""bad password""; both conditions should result in ""authentication failed"", ideally with no measurable difference in response time to allow an attacker an opportunity to identify valid usernames."
crypto,3535fn,817682,1 point,Wed May 6 18:55:32 2015 UTC,Thanks.  I assume 512 is bigger and has a lower chance of collision then?
crypto,3535fn,Natanael_L,3,Wed May 6 19:44:49 2015 UTC,"Any strong hash of 256 bits of more in this usecase is out of ANY attackers reach.  Ideally you should ask for as much information as possible in standardized formatting and spelling of possible, to prevent bruteforce."
crypto,3535fn,817682,3,Wed May 6 20:33:34 2015 UTC,The chances of collision are so incredibly tiny that it's not worth worrying about.
crypto,3535fn,stouset,3,Wed May 6 20:42:14 2015 UTC,SHA-256 will never have an unintentional collision during the lifetime of our universe.
crypto,3535fn,TiltedPlacitan,3,Wed May 6 22:49:49 2015 UTC,"I've used HMAC for this purpose in the past.  EDIT: really a similar purpose.  PCI regs at the time stated that you cannot keep credit card numbers on file.  So, we HMAC'd them to see if we've seen that account before, without actually storing the account number."
crypto,3535fn,samsonx,2,Thu May 7 00:18:59 2015 UTC,"Just use sha256.  If you are in a situation where the hash is accessible to the user, a scenario which I believe is highly unlikely then you should go with salted hash and multiple rounds.  Salting is always a good idea anyway ;)"
crypto,3535fn,Natanael_L,1 point,Wed May 6 20:47:42 2015 UTC,Salting doesn't work if you are trying to use the hashed value as a key.  It isn't a stable lookup and you will find nothing.
crypto,3535fn,Natanael_L,1 point,Wed May 6 22:34:55 2015 UTC,Static salt!
crypto,3535fn,gsuberland,1 point,Wed May 6 22:49:46 2015 UTC,"Yeah, I tried that with BCrypt - is just yielded the same identical prefix on every single key.  Kind of pointless."
crypto,3535fn,antiduh,2,Wed May 6 23:31:18 2015 UTC,Use per-account salts.
crypto,3535fn,antiduh,1 point,Wed May 6 23:35:57 2015 UTC,"The links in this Crypto SE answer may be of use, especially the one to the CryptDB paper."
crypto,3535fn,antiduh,4,Fri May 8 13:28:56 2015 UTC,"If you really want to do it correctly, you should be using salted, keyed, iterated hashes. You're trying to treat these pieces of data like passwords, so do just that - treat them exactly like you would if they actually were passwords. To the folks that say this is overkill, I understand, but better safe than sorry.  Step 1: Every instance of any particular securable should have its own salt:   Read the user's <email, password, phone number> Generate salt for this piece of data - a large amount of random bits generated from a cryptographically secure random number generator. Compute dataHash = Concat( salt, Hash( Concat( salt, data ) ) ) Store dataHash and salt in the database.   Remember, every instance of data should have its own salt. If you have 5 users each with three securables (a password, an email, a phone number), then you have 15 pieces of data and thus 15 salts. Current guidance suggests 32-byte to 64-byte salts.  The above is wrong, however, because it treats Hash() like an HMAC.  Step 2: Use iterated, keyed hashing  You want to make hashing slow to slow down brute forcing or building of lookup tables. This is done by iterated hashing, but doing this securely boils down to inventing your own security primitive, and remember the rules there: don't do it. Use a keyed hashing algorithm that uses the salt as the key.   Instead, consider using PBKDF2, bcrypt, or scrypt. scrypt is more resilient to GPU/ASIC attacks, whereas PBKDF2 and bcrypt can be implemented pretty cheaply in hardware and thus can be parallelized with relatively lower cost.  Something like Concat( salt, PBKDF2(HMAC−SHA2-256, <data>, salt, 8192, 256)) is a reasonable application.   More information  All of this is easy in PHP; most of this is in the standard library or available from openssl.   For more information: https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet  Also: some dont's:   Don't try to implement your own HMAC; it's pretty easy to try to make one by doing something like SHA256(Concat(salt,data)), but that can be insecure; particularly, MD5 is vulnerable to length extension attacks when used as such, but the actual HMAC standard for MD5 thwarts this attack. That said, MD5 is trash now, so don't use it for anything except as an example for how rolling your own HMAC can be stupid. Don't use one salt for the entire database. Don't use one salt for each user Don't re-use salts, ever, for anything. Don't use MD5 for anything, or use anything that uses MD5 Don't use SHA-1 for new development; many new attacks are being discovered quickly, and it uses a merkle-damgard construction like MD5 and so may end up being found weak like MD5."
crypto,3535fn,Natanael_L,1 point,Wed May 6 22:04:02 2015 UTC,"You're trying to treat these pieces of data like passwords, so do just that - treat them exactly like you would if they actually were passwords. To the folks that say this is overkill, I understand, but better safe than sorry.   I don't mean to diss you on this and there is a lot of good advice there but no they do not function as passwords.  We have passwords that function as passwords.  They function as password reset channels.    I'm going to explain how we are doing this because I think what passes as standard account management in the mobile world is really awful.  We are trying hard to be different and better.  First off - we are a social network - there is nothing of financial value in our system.  Just a bunch of user made up names, a lot of links to kind of blurry low-res phone sized photos, and some short one or two line sentences that are all purged every single day.  We don't keep anything longer than that apart from ""account"" and ""follower"" data (lists of other users).  Second - we are mobile only.  There is no web interface.  Thus, we concluded that asking users to make up passwords is stupid.  Your phone is your identity.  We have something like a password - but we make it up for you and put it in your iOS keychain.  You never see it.  You can't get it. The app can't get it from the keychain unless you unlock your phone.  All you have to do is pick a user name.  Done.  I delete every mobile app that asks for more than a user name because asking people to manage passwords manually when machines can do it better is just dumb and lazy thinking.  If you let users pick passwords they pick something weak like Broncos1 or something equally lame - but nearly every mobile app I've downloaded in the last year does this and I refuse to play.  Our passwords are chunks of random data and are much longer than the average person would type and the user couldn't share it if he wanted to.  K, so the actual password is stored in the user's key chain which is tied to his iCloud account.  However, we have begun to encounter users who don't have iTunes/iCloud accounts.  Kids with iP[ao]ds and stuff.  This still works ok - but if they lose their device there is no way to recover their identity.  The marketdroids wanted a way to securely allow them to recover access to their account.  Phones can get text messages or emails - so we decided to let them register these as ""account recovery methods"" working off the theory that they have email or SMS access that is reasonably secure.  This means I have to be able to associate an email address and/or a phone number with an account - but should our data store become compromised, I don't want to give up a pile of valid phone numbers and email addresses.  Now, the data store is a NoSQL datastore - key value thing.  If a user wants access to his account back, I can let him tell me his phone number and then - knowing only that - I have to identify his account.  Which means I have a key in the NoSQL store that can be derived from his phone number - without being his phone number - which I can use to locate his account.  If I salt the phone number hash - then I can't look up the key because it will not match exactly.  Ditto the email.  I MUST NOT SALT these hashes or they will not function as lookup keys.  Anyhow, it isn't like guessing a phone number gets you a lot because what will happen is a SMS message will be sent to that phone with an application specific url containing a randomly generated key.  The user will tap that url, which will open our app, which will contact the server to fetch the associated payload, which is the username and new password.  This happens entirely in the mobile app out of sight.  The password is stored in the keychain and the user has his account access back.  The main goal is to prevent bad people from getting phone number or emails tied to our users' handles and use the information to phish them should somehow our database become compromised (which seems unlikely but better safe than sorry).  That is the only vulnerability I can see but I'm willing to be educated on other issues.    The alternative is to do what everyone else does which is store the email and phone number as part of their user record but I'd rather not have that info lying around."
crypto,3535fn,stouset,2,Wed May 6 23:23:34 2015 UTC,"""they can't get what you ain't go""   A wise principle, but in this case you'll eventually need the plaintext phone number in order to send the SMS.   I misunderstood your original question; you can't play any of these password-like games, the best you can do is encrypt your database and hope someone doesn't get ahold of it; good luck."
crypto,3535fn,Natanael_L,1 point,Thu May 7 00:50:42 2015 UTC,"you'll eventually need the plaintext phone number in order to send the SMS.   Yes, they'll give it to me, I'll see if its hash is a valid key pointing to a valid account identifier, and if so, send it."
crypto,3535fn,taidg,1 point,Thu May 7 02:03:06 2015 UTC,"Yeah, I .. just had a brain fart."
crypto,3535fn,antiduh,1 point,Thu May 7 15:13:43 2015 UTC,Happens to the best of us. ;-)
crypto,3535fn,stouset,1 point,Thu May 7 16:28:26 2015 UTC,"I really have to recommend backup codes which you ask the user to write down (easy solution), or supporting hardware auth tokens for backup. Maybe offer to send the code to their email."
crypto,3535fn,firajaa,1 point,Thu May 7 05:04:35 2015 UTC,"You cannot use a salted hash for lookups, because you do not know the salt to use until you have looked up the record."
crypto,3551ad,user_doesnt_exist,1 point,Thu May 7 04:01:26 2015 UTC,"Considering how these things typically require unusual application of crypto, standard implementations are really not very applicable. You'd have to use crypto testing / research / development tools to get the kind of flexibility in applying the algorithms which you need.   If suggest that for learning how to build them, you'd be better of asking in a sub like /r/codes and /r/asknetsec as there will be people there with experience creating such challenges."
crypto,351zfn,R-EDDIT,3,Wed May 6 13:06:16 2015 UTC,non-pdf Abstract
crypto,351zfn,DoWhile,2,Wed May 6 19:26:56 2015 UTC,"However, for performance on high end processors, note that ChaCha20 alone (i.e., only the encryption) consumes 1.4 cycle per byte on Broadwell.   Damnit Shay, stop quoting numbers from your inferior Chacha20 implementation."
crypto,351zfn,floodyberry,1 point,Thu May 7 03:59:13 2015 UTC,"Not arguing, do you have a citation for a better chacha20 implementation performance?  He did caveat that a single threaded, I guess implying non-aesni hardware would be single core Arm6 level processors.  Plenty of multi core counterpoints are available from Intel core to arm7 (Pi2 even)."
crypto,351zfn,floodyberry,1 point,Thu May 7 10:12:42 2015 UTC,"http://bench.cr.yp.to/web-impl/amd64-titan0-crypto_stream.html  It's been known the Goll/Gueron approach for AVX2 wasn't optimal since their paper was released. I haven't tried contacting them, so I guess they must not keep up to date on things."
crypto,351zfn,TweetsInCommentsBot,1 point,Thu May 7 12:05:22 2015 UTC,@sevenps   2013-11-21 20:28 UTC  @solardiz Authors seem unaware of the already existent avx2 implementation by Ted Krovetz: http://krovetz.net/supercop/chacha-krovetz-1.0a4.tar.gz     This message was created by a bot  [Contact creator][Source code]
crypto,351zfn,conradsymes,1 point,Thu May 7 12:05:33 2015 UTC,does it matter? anything less than two cycles per byte is ridiculously fast.
crypto,351zfn,floodyberry,3,Thu May 7 17:17:42 2015 UTC,"When you publish a paper on your implementation and quote those numbers to emphasize the performance, yeah."
crypto,351zfn,conradsymes,2,Thu May 7 21:47:23 2015 UTC,"Honestly, ChaCha12 provides 128-bit security. ChaCha20 provides closer to 256-bit security.  So the paper is on it's face, intellectually dishonest.  Still, I believe quibbling about 30% increases in speeds in CPUs (as opposed to GPUs/FPGA/ASICs), is pointless."
crypto,351zfn,floodyberry,2,Thu May 7 22:09:54 2015 UTC,"Chacha8, Chacha12, and Chacha20 all provide 256 bit security? I'm not sure where that came from.  Software performance is the point, it increases the number of clients/connections the server can handle."
crypto,351zfn,conradsymes,-1,Thu May 7 22:29:46 2015 UTC,"Software performance is the point, it increases the number of clients/connections the server can handle.    Cryptography is usually handled by dedicated hardware accelerator.   Chacha8, Chacha12, and Chacha20 all provide 256 bit security? I'm not sure where that came from.   In a technical sense, yes. But ChaCha12 provides 128-bits of security with a reasonable security margin, and ChaCha20 provides a ludicrous security margin to complement the high security requirements of 256-bit encryption."
crypto,351zfn,floodyberry,2,Thu May 7 22:42:27 2015 UTC,"The best attack on Chacha is 2248 on 7 rounds. Anything higher than 7 currently provides 256 bits of security.  The paper only measures performance on Haswell and Broadwell, the entire point is to show that it performs on par with AES-GCM on current-gen Intel CPUs. Places like Cloudflare are definitely serving HTTPS off AES-NI Intel CPUs."
crypto,355atk,SushiAndWoW,3,Thu May 7 05:53:01 2015 UTC,"Interesting.  A few questions:   What is the probability of a loop which is stable over several iterations?  I know that you have some code to make short cycles rarer, but have you analyzed how effective it is? Why add, xor, rotate, substitute and endian swap in particular?  Endian swap especially seems like a strange choice, it might be nice to have some motivation.  Heavy operations like multiplication might help distinguish a CPU from an FPGA or ASIC."
crypto,355atk,bitwiseshiftleft,1 point,Thu May 7 22:43:44 2015 UTC,"What is the probability of a loop which is stable over several iterations?   I identified an issue in my original version which I estimate would have led to this once every 236 instructions. Assuming on the order of 216 instructions per set of inputs, this might happen once every 220 inputs. If this was unavoidable, I would have thought this within design intent, but it's avoidable. I fixed it in today's version.   Why add, xor, rotate, substitute and endian swap in particular?   To preserve entropy.   Heavy operations like multiplication might help distinguish a CPU from an FPGA or ASIC.   The implementation does use 64-bit integer modulo two different numbers (exceeding 32 bits) as part of the bitwise rotation operation. This calculation is required once or twice approximately every 4th instruction, on average.  The actual code is:  paramVal1 % 0x10000000F     // prime paramVal2 % 0x10000003DF    // not prime, 29*43*55107841   I use this to derive a number of bits to rotate, so as to preserve entropy better than using multiplication or division on the data itself.  Would you suggest another CPU-friendly, ""FPGA-hating"" operation to use?"
crypto,355atk,bitwiseshiftleft,1 point,Fri May 8 04:22:31 2015 UTC,"Modulo reduction is pretty good, though when the constant is fixed it isn't that much better than mul."
crypto,355atk,Natanael_L,1 point,Fri May 8 06:40:53 2015 UTC,"Yeah, was thinking the same thing, I need to change that to a set of instructions that multiply and modulo with the actual data.  Thanks!"
crypto,355atk,phyzome,2,Fri May 8 23:40:43 2015 UTC,"Interpreting as byte code? Hello Halting problem. Your work factor is unpredictable, and it may loop infinitely.  So you're counting instructions and then stop it. Still doesn't prevent loops from doing absolutely nothing with the input, or even zeroing it out! The transformation is very very very unlikely to be a strong one.   Also, your side channel resistance (power analysis, timing, tempest, audio (RSA keys have already been extracted from listening to sounds a CPU make), etc) has to be among the worst ever, unfortunately. Only relevant against attackers near you, but on certain electronics this will be insecure as the device will be too easy to spy on at a few meters distance."
crypto,355atk,Natanael_L,0,Thu May 7 06:09:29 2015 UTC,"Your comment is low effort and conveys a lack of understanding. I appreciate that at least there is a comment, but it would have been possible to write something more useful.   Still doesn't prevent loops from doing absolutely nothing with the input, or even zeroing it out!    This is trivial. The implementation alters byte code after every jump in order to avoid such loops.   side channel resistance   This algorithm defends against optimization of brute forcing for digests captured from a database. No need to defend against side channel attacks when the attacker is executing the algorithm.  The defender executes the algorithm on sensitive input only once, to store the digest. Any attacker-triggered verifications are executed on attacker-provided input, so these provide no information about protected data.  If the attacker can force legitimate, user triggered verification that uses protected data, the timing side channel is still not useful because the number of operations is constant. Any slight variation in execution time does not help you with brute forcing. You need another side channel for another angle of attack.  If you do have a side channel that gets you information because of the algorithm, this informs you only of the state of the 64kB block after 2048 SHA-256 hashes.  To the extent that such an attack might be practical to ease brute forcing, it should be described in terms of an actual implementation shortcoming instead of generally in principle, and then an appropriate defense can be implemented."
crypto,355atk,Natanael_L,4,Thu May 7 06:34:53 2015 UTC,"Your comment is low effort and conveys a lack of understanding. I appreciate that at least there is a comment, but it would have been possible to write something more useful.   Just an FYI... insulting people who are earnestly trying to give feedback that you asked for is not going to help promote adoption of your algorithm."
crypto,355atk,Natanael_L,-3,Thu May 7 15:57:14 2015 UTC,"I'm announcing my implementation and providing it free of charge as a service to the community.  I don't care if it's used by people who don't know what they're talking about, and jump to moronic assumptions about my ability to avoid infinite loops.  I very much welcome feedback, but feedback that nitpicks and dismisses without even checking the source code is trash. It wastes time for the commenter, the developer, and the community."
crypto,355atk,Natanael_L,2,Thu May 7 17:19:01 2015 UTC,You're setting the bar unreasonably high. You won't be getting a dissertation on strategies for attack and securing it against attacks in the first reply.   You'll be getting high level quick analysis that looks for basic pitfalls.   You can still end up XORing blocks against themselves and other such things. You need VERY rigid methods to prevent entropy reduction. There are many many ways to cause visible correlation.
crypto,355atk,Natanael_L,-2,Thu May 7 17:41:21 2015 UTC,"I did not request a ""high level quick analysis that looks for basic pitfalls"". Providing one is presumptuous. I'm qualified to do that analysis myself, and I fundamentally disagree with you.  True, I do not currently check for XORing a block against itself. The probability of doing that is about 1 in 218 instructions. It loses about 12 bytes of entropy from a 64 kB block.  But I can afford to lose a lot of entropy. To retain the strength of a 32-byte hash, all I need is 32 bytes of entropy left in the block. At 100,000 operations, it is astronomically unlikely that a loss will be noticeable.  If I run the algorithm long enough for losses to be noticeable, the likelihood of loss per instruction is further reduced. With half entropy lost, the probability of further loss per instruction is now 2-19. It takes 229 - 230 operations to even get to 1/2 lost. If we run the algorithm further, we need another 230 - 231 operations to get to 3/4 lost. Then the chance of further loss per instruction grows closer to 2-20, and so on.  You need double the number of instructions to progress further for each level of loss. You need to progress through 10-11 levels to threaten the viability of the output. To get from second to last level to last one, you'll need to process on the order of 240 instructions.  Yes, if you run the algorithm forever, you need to have perfect loss mitigation. But I'm not running it forever. At 100,000 ops or even 1,000,000 ops, losses are completely negligible."
crypto,355atk,DudeOnReddit_,2,Thu May 7 17:57:55 2015 UTC,"This is trivial. The implementation alters byte code after every jump in order to avoid such loops.   Now you just made the real byte code instructions a bit more complicated. That altering method should be considered part of the byte code. It can still have loops.   No need to defend against side channel attacks when the attacker is executing the algorithm.   Wrong scenario. Imagine the user sits in a café and brings up his old smartphone and runs the algorithm. EM leaks and such can reveal internal state which enables bruteforce to be much more targeted, as the attacker doesn't need to run the full function as he can verify if the code execution behaves as on the  target's electronics or not, before completion.   Any verifications are executed on attacker-provided input, so these provide no information about protected data.   You're assuming this will only be used server side. Key stretching is used on clients too, to make passwords harder to bruteforce BEFORE being sent to the server, or alternatively for use with local encryption software. Consider password managers, for example.  Edit: also, I believe FPGAs may outperform CPUs on this."
crypto,355atk,PM_ME_UR_OBSIDIAN,0,Thu May 7 06:45:46 2015 UTC,"Now you just made the real byte code instructions a bit more complicated.   By one increment instruction.   Imagine the user sits in a café and brings up his old smartphone and runs the algorithm.    This algorithm is for use on servers in datacenters. Smartphone users generally don't have databases of other people's passwords to protect.  Another usage scenario for this algorithm is crypto coin mining, e.g. instead of scrypt to reduce the advantage of hardware optimization. Again no side channel issue for this.   Key stretching is used on clients too,   Great, so use something designed for that purpose. A nail is a nail; a screw is a screw.   Consider password managers, for example.   Password managers need reversible crypto.   I believe FPGAs may outperform CPUs on this.   Very good. Show me why and how the current implementation is weak in this respect, then we can think of ways to improve it.  The realistic goal is not to prevent optimizability - this most likely cannot be done - but to make it cost more, and yield less advantage."
crypto,34zoa4,Natanael_L,2,Tue May 5 22:01:22 2015 UTC,Mobile web interface for retroshare.
crypto,34zoa4,glavnogo-inzhenera,3,Sat May 9 22:49:30 2015 UTC,I want my laptop to automatically talk to wifi routers through an encrypted channel. No more starbucks hackers.
crypto,34zoa4,poopinspace,1 point,Thu May 7 03:52:32 2015 UTC,VPN or authenticating the router is the only safe solutions
crypto,34zoa4,fabrizziop,1 point,Thu May 7 04:32:04 2015 UTC,what about opportunistic encryption? Like a simple ecdh key exchange on connection. Not secure (mitm vulnerable) but better than nothing.
crypto,34zoa4,poopinspace,1 point,Fri May 8 02:04:39 2015 UTC,"It isn't total crap, but an attacker with patience can still get to you."
crypto,34zoa4,yuhong,1 point,Fri May 8 06:44:01 2015 UTC,authenticating the router?
crypto,34zoa4,bitwiseshiftleft,1 point,Thu May 7 23:17:51 2015 UTC,Otherwise you don't know what router you connected to
crypto,34zoa4,throwaway0xFF00,2,Fri May 8 07:09:01 2015 UTC,I wonder if anyone have designed modern DES cracking ASICs.
crypto,34zoa4,bitwiseshiftleft,6,Thu May 7 03:19:21 2015 UTC,CAESAR round II.  It'd also be great to have widely deployed lightweight crypto protocols.
crypto,34zoa4,conradsymes,2,Wed May 6 22:26:06 2015 UTC,"CAESAR round II.   This.   They've postponed it what? 4 times this year?  The deadlines for the second round candidate deliverables are coming quick too and have their deadlines have not slided.  It has to happen this month, otherwise the competition timeline would most likely have to be adjusted entirely.   By delaying the announcement, you actually cost hundreds if not thousands of research hours."
crypto,34zoa4,bitwiseshiftleft,3,Thu May 7 01:49:35 2015 UTC,"Yeah.  It's all volunteers evaluating it, and not very many of them, and they just haven't had time.  It is frustrating to watch them postpone it though."
crypto,34zoa4,conradsymes,3,Thu May 7 16:45:40 2015 UTC,"I want FIDO to complete the NFC spec for U2F hardware tokens.  I want Textsecure and Redphone to finally get merged on Android too, to match Signal on iOS (which uses the same protocols and is fully compatible). Also, for Google Play dependence to be made optional only, in favor for other push mechanisms and peer discovery mechanisms like a public key addressed P2P model."
crypto,34v3im,lazer3000,6,Mon May 4 20:28:06 2015 UTC,"What do those benchmarks even mean?  Exactly what operation is being performed when one said ""curve25519 encryption""?  Same with decryption."
crypto,34v3im,tom-md,2,Tue May 5 00:23:12 2015 UTC,"If you look at the chart, the bar for ""curve25519 encryption"" is about double the length of the bar for ""curve25519 decryption"". So for encryption, they probably generate a curve25519 key and perform a DH operation. Decryption then ist just a DH operation."
crypto,34v3im,Tsederbaum,1 point,Tue May 5 07:51:46 2015 UTC,This would be better as a logarithmitc scale.
crypto,34v3im,untitleddocument37,1 point,Tue May 5 02:51:57 2015 UTC,I don't buy the RSA numbers.  Encryption is dead simple since the exponent is very short.
crypto,34v3im,floodyberry,2,Tue May 5 11:34:28 2015 UTC,"http://bench.cr.yp.to/results-encrypt.html has benchmarks including NTRU and RSA. The NTRU code is older though..  There is also signing, which appears less in NTRU's favor."
crypto,34ob0x,brutetime,78,Sun May 3 00:31:16 2015 UTC,"Generally, it's quoted with today's computing power.   But in the limit, modern AES encryption using a 256 bit key is unbreakable in our universe. That fact is based not on computing power available today, or in the future, but on the limits of thermodynamics, plank time, and all the energy output of the sun.  With a 128 bit key, in the absolute thermodynamic limit of efficiency, if you dedicated all electricity generated by a typical nuclear reactor to the problem (< 1 MW), it would take 400 years to try all keys. On average you could expect to reach it in half that time.  In reality, computers operate much less efficiently than the thermodynamic upper bound, making those numbers orders of magnitude higher.   Cracking 256 bit or 128 bit keys is not where it's at. You want to attack something at its weakest point: the password. And this is where we get to your actual question.  A good password scheme has maybe ~44 bits of entropy. Most companies have policies that prevent users from using good password; instead limiting them to maybe 28 bits of entropy.  That works out to:   44 bits: 17,592,186,044,416 keys 28 bits: 268,435,456 keys   And now we come to your question: how many keys can we try in a second? How many keys can we expect our attacker to be able to try in a second?  The answer is: your guess is as good as anyone else's.  But in order to have a better guess, you have to know the algorithm being used, and how quickly one CPU can compute it. Then multiply that by the budget of your attacker.  For example, if the password is stored only with SHA256 (a poor choice).  - assuming the fastest processor can compute a password in 66 cycles - and the fastest processor is 3.1 GHz  That works out to 47M guesses per second.  It would take   17,592,186,044,416 / 47M  = 374,301 s = 4.3 days   to try them all. But in reality (hopefully), no system uses simply SHA2 for password storage. Hopefully they use something more expensive:   PBKDF2 bcrypt scrypt   These algorithms have a tunable cost. The general recommendation is that it is tuned so that it takes about 200ms to compute a password on a modern computer. This means that on a single modern computer, it would take about:  17,592,186,044,416 * 0.2s = 3,518,437,208,883 s = 111,495 years   If you can throw 1,000,000 processors at that, you can calculate it in a month. But how likely is that.  A modern Xeon processor consumes about 155W. A typical nuclear power plant can put out less than 1 MW. This means that for every 1MW, you can have:  1,000,000W / 155W = 6,451 processors   Meaning that if you could dedicate an entire power plant to breaking on person's password, it would take:  111,495 years / 6,451 = 17.2 years   If you dedicated 25 power plants to breaking someone's password, you could have it in 7 months.  But does anyone take Moore's Law into it? Not really. We could, but at some point you decide it's not worth it. Additionally, Moore's Law has not been keeping pace. The speed of computers was doubling every 18 months. But since around 2004 processors have only been doubling every 3 or 4 years. Moore's law wasn't actually computer speed, it was process size (nanometers). And Intel has nearly reached the limit of process size. Instead they are adding more processing power (essentially more computers per CPU). Rather than being able to calculate a single password faster, it can calculate more passwords at the same time.  And then there's the possibility of parallelization, and computing your passwords in parallel in dedicated hardware and GPUs. This is where algorithms like bcrypt and scrypt are useful because they require memory accesses (scrypt much more so than bcrypt). This limits how many passwords you can be computing in parallel on a video card.  And this has been a whole lot of rambling for an hour and a half. And i don't think i even answered your question. But i've been authoring it for so long i don't want to just hit Cancel."
crypto,34ob0x,JoseJimeniz,12,Sun May 3 02:56:48 2015 UTC,"Good answer, although I feel I should point out that most commercial nuclear plants produce on the order of 1000MW."
crypto,34ob0x,ZenithalEquidistant,3,Sun May 3 12:23:26 2015 UTC,Only way I can read it is he meant to saw 1 GW.
crypto,34ob0x,GahMatar,1 point,Mon May 4 01:46:59 2015 UTC,"And if you meant to say ""say"""
crypto,34ob0x,FermiAnyon,3,Thu May 14 01:00:34 2015 UTC,Excellent response!
crypto,34ob0x,ChironGM,1 point,Sun May 3 07:17:05 2015 UTC,"This was fantastic, thank you."
crypto,34ob0x,Jaskix,1 point,Sun May 3 17:41:02 2015 UTC,So you could possibly come up with a collision that would match their password in that time.
crypto,34ob0x,MGakowski,1 point,Sun May 3 21:23:49 2015 UTC,"Assuming the number of bits in the password was less than the birthday bound collisions aren't significant. Assuming a 128-bit output of the KDF, if you perform 244 operations your likelihood of finding a collsion is about 10-12: negligible."
crypto,34ob0x,silverforest,1 point,Mon May 4 00:33:43 2015 UTC,Birthday attack:       A birthday attack is a type of cryptographic attack that exploits the mathematics behind the birthday problem in probability theory. This attack can be used to abuse communication between two or more parties. The attack depends on the higher likelihood of collisions found between random attack attempts and a fixed degree of permutations (pigeonholes).     Interesting: N-Hash | Elliptic curve only hash | SipHash | PMAC (cryptography)   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words
crypto,34ob0x,autowikibot,1 point,Mon May 4 00:34:29 2015 UTC,Fantastic answer!
crypto,34ob0x,REDDIT_ATE_MY_WORK,2,Sun May 3 23:37:09 2015 UTC,This is the kind of answer that brings us to this subreddit. Excellent
crypto,34nmet,sanderD,2,Sat May 2 20:33:02 2015 UTC,Further proof that attacks only get better.  Time to retire the last few uses of HMAC-MD5 before that falls as well.
crypto,34nmet,GahMatar,3,Sun May 3 00:39:11 2015 UTC,"Yup.  To be fair though using HMAC-MD5 wasn't a bad idea prior to this result because nothing had suggested it was a bad PRF beforehand.    Also to be fair, the attack isn't really applicable to real life scenarios.  It requires querying an oracle 288 times ... the first unauthenticated request would have caused the channel to close and the ephemeral session keys to be destroyed.  If this were a 288 offline attack it would be a lot more noteworthy."
crypto,34nmet,untitleddocument37,1 point,Mon May 4 10:33:18 2015 UTC,Do we know what the current state of NIST standardising Keccack as SHA3?
crypto,34nmet,yuhong,1 point,Sun May 3 06:24:13 2015 UTC,I think this is old.
crypto,34lyjx,sublimeapple,25,Sat May 2 09:55:32 2015 UTC,"If you're talking about bruteforcing hashes of passwords, you can always increase the work required to compute any hash in systems like scrypt, or those from the new Password Hash Competition, so that in 20 years the time it takes to bruteforce a password will be the same as it is today (and likewise for the time to compute a single hash).  Also, for online authentication, you can always switch to zero knowledge password proofs."
crypto,34lyjx,nitraat,8,Sat May 2 10:17:03 2015 UTC,"ELI5     Also, for online authentication, you can always switch to zero knowledge password proofs.   I think that might need some more clarification given the OP's request of a ELI5 answer :)"
crypto,34lyjx,unfo,1 point,Sat May 2 17:45:20 2015 UTC,How would zero knowledge password proofs prevent bruteforcing? Because they are probabilistic proofs (as opposed to deterministic hashes eg. scrypt) don't they make bruteforcing (slightly) easier?
crypto,34lyjx,D1plo1d,1 point,Sat May 2 16:24:05 2015 UTC,"Cracking hashes is probabilistic too because nobody goes from aaaaa to zzzzz nowadays. Zero-knowledge proofs for authentication would be online protocols, thus not allowing bruteforce as you only get one attempt per user authentication. Password based ZKP auth can however be bruteforced by the server as it has the ZKP verifier data (third party attackers don't)."
crypto,34lyjx,Natanael_L,2,Sat May 2 16:45:34 2015 UTC,Right. I was thinking of a brute force attack scenario in which the database has been compromised and the attacker has the ZKP verifier data.  But a brute force attack that doesn't compromise the server seems the same to me. With a server-side password hashing you would get one attempt per user authentication as well would you not?  As I imagine it with a zero knowledge proof you'd be going through that same list of passwords that you would for a hash but with the difference being that you don't just send it as plain text over TLS.  To me the advantage to ZKP is that if the database or application server is rooted that even with access to all the information sent to the server you cannot re-generate the user's password (which is useful in containing the security breach when users use the same passwords on lots of sites).
crypto,34lyjx,D1plo1d,2,Sat May 2 17:03:11 2015 UTC,ZKP also defends against MITM if the transport encryption is compromised
crypto,34lyjx,Natanael_L,1 point,Sat May 2 17:27:50 2015 UTC,Good point.
crypto,34lyjx,D1plo1d,28,Mon May 4 23:28:01 2015 UTC,"Passwords are stored using one-way functions. Even plain sha256 would be computationally infeasible to brute force with a good password, barring any vulnerabilities with sha2 itself. I don't know where you got the 20 years figure from, and even if it were true, technology will adapt to new threats.  Two Factor Authentication requires physical access to something to login. This is most often a phone, but could be a USB device. Assuming it is implemented properly, and the device is secure, the password being leaked should not allow an attacker any access to the account.  Another alternative to passwords is Client Certificate Authentication. But there is a serious user-friendliness issue there. The average user will not know how to generate a keypair, get it signed by the server, and import it into their browser."
crypto,34lyjx,KentFloof,5,Sat May 2 10:38:11 2015 UTC,Makes me wonder of keybase or a derivative will make things easier for authentication.
crypto,34lyjx,Katana__,4,Sat May 2 15:43:48 2015 UTC,"I'm thinking integration between Namecoin and the FIDO Alliance auth protocols would be neat, implemented with a flexible hardware token. Would make for fairly easy deployment, key management, updates and strong security and privacy (you get to chose what's public).   If you've seen the paper Distributed Anonymous Credentials from the Zerocoin guys, then that's really neat too (a blockchain based version of IBM's IdeMix)."
crypto,34lyjx,Natanael_L,3,Sat May 2 16:51:22 2015 UTC,"The challenge is in enforcing ""good passwords"", because humans are notoriously bad at it. And even if only some of the targets in your stolen database are using bad passwords, then rainbow tables are likely to make light work of them. SHA256 isn't the best choice for password hashing, of course (compared to e.g. SCrypt, BCrypt, PBKDF2, whatever). Here's some light reading you've probably seen before.  Client certificate authentication is functionally a second-factor, too. But yes, its complexity (and the shitty implementations that are out there) is a major reason for its lack of widespread use."
crypto,34lyjx,avapoet,7,Sat May 2 18:19:51 2015 UTC,"I have a sneaking suspicion that you might be referring to quantum computing and how it will affect our current methods of computer security in the near future. If so, you might be interested in post-quantum cryptography which addresses the challenges quantum computing and quantum algorithms will bring and solutions we can use to extend the shelf life of our current non-quantum solutions (hint: longer keys and passwords!)  You might also be interested in checking out quantum cryptography which uses the spin of electrons to create (theoretically) unbreakable computer security that has the added benefit of eavesdropping detection. This How stuff works article might help explain quantum crypto a bit better.  Sorry I can't ELI5 either concept more simply. I don't understand it well enough myself."
crypto,34lyjx,n0xin,1 point,Sat May 2 14:00:39 2015 UTC,Wouldn't we still need passwords and hashing functions with quantum cryptography? I'm looking at quantum key encryption and it sounds as though it is used to establish a secure transport layer (akin to diffie hellman key exchanges in TLS) but is there anything in quantum cryptography that solves authentication?  Totally not a quantum crypto person. Just curious.
crypto,34lyjx,D1plo1d,1 point,Sat May 2 16:36:26 2015 UTC,"Quantum cryptography can't solve auth magically, you need pre-shared secrets. The security then comes from that there's no bruteforce possible, an attacker can only make one attempt per session, and will always be detected if he fails."
crypto,34lyjx,Natanael_L,1 point,Sat May 2 16:54:11 2015 UTC,Isn't that a man in the middle attack though?  Also I think we're having nearly the same discussion in two threads now :P
crypto,34lyjx,D1plo1d,1 point,Sat May 2 17:07:36 2015 UTC,Isn't all attacks against quantum cryptography MITM of one sort of another? Quantum crypto are mostly about live two-party protocols. It is supposed to be secure of you know who the other end is. A PSK is how you verify that.
crypto,34lyjx,Natanael_L,12,Sat May 2 17:31:00 2015 UTC,"Longer passwords. Bruteforce isn't magical, you can always make keys longer of necessary. 256 bit symmetric keys looks like they'll hold up forever, essentially."
crypto,34lyjx,Natanael_L,11,Sat May 2 10:53:56 2015 UTC,"Passwords can only be brute forced if you let them.    Passwords saved in databases (or for hard disk/file encryption) are usually stored as one-way hashes. Those are designed to take so long to break that the user will have had the replaced the password everywhere before an attacker can crack it. Brute forcing a password from even last year should be worthless, and the complexity of these functions can be scaled up easily to make sure they stay hard to crack – it sadly isn't nearly often enough, but it's not a technical problem. Brute-forcing against login services can (and should) be mitigated by the application. Even in 20 years you shouldn't need more than three or four guesses to your password before your account is locked out. Faster computers won't help there."
crypto,34lyjx,Creshal,3,Sat May 2 12:52:21 2015 UTC,"you shouldn't need more than three or four guesses to your password before your account is locked out   Be careful if this is your strategy, though: it makes it very easy for an attacker to perform a denial-of-service attack, simply by deliberately attempting to log in as each of a series of victim usernames (or brute-forcing all common usernames) with known-wrong passwords.  For some services, a lock-out is appropriate, but more-often-then-not tarpitting is a safer solution: if after e.g. failures you limit the frequency of login attempts, you can dramatically reduce the risk.  It's also worth remembering that locking (or tarpitting) by-username doesn't protect against an attacker who doesn't care which accounts they compromise from brute-forcing by trying each of the top N common-passwords (where N is the lockout limit) against each different username in turn. So any locking or tarpitting strategy should also consider whether this is a threat and to take whatever measures are appropriate to mitigate it."
crypto,34lyjx,avapoet,3,Sun May 3 17:36:28 2015 UTC,Passwords are checked by storing the users password in a hashed format and hashing password attempts and comparing them to the stored value. A hash can really be any length and can work out values as quickly or slowly as you like. This means as computers get faster we can simply start using slower hashing functions to check each password attempt. This makes brute forcing as feasible in the future as it is today assuming computers don't get better at guessing human generated passwords
crypto,34lyjx,destructaball,2,Sat May 2 12:50:54 2015 UTC,"Rolling/One-time password schemes (which most 2FA systems are, usually TOTP or HOTP) will hold up because while the code to use seems brute forceable, it has a very short validity period. The secret used is not brute-forceable (Up to 512-bits could be used in systems using SHA-1)."
crypto,34lyjx,GahMatar,2,Sat May 2 17:40:29 2015 UTC,"In 20 years computers will not be able to bruteforce the most complex passwords.  A computer running at 100% efficiency (as efficient as the laws of thermodynamics will allow) powered by the energy the sun produces over its lifetime will not have enough energy to count anywhere near up to 2256.  Then, a password with 256 bits of entropy (which is totally attainable in the ""correct horse battery staple"" style) is unbrutefoceable."
crypto,34lyjx,cookiesui,3,Sat May 2 19:49:41 2015 UTC,"Then, a password with 256 bits of entropy (which is totally attainable in the ""correct horse battery staple"" style) is unbrutefoceable.   Those types of passwords are very weak compared to their length. The average person only knows about 10,000 words, so the password ""correct horse battery staple"" is really a password that is just 100004, which is no where near what it could be 7228.  10,000,000,000,000,000 permutations versus: 10,123,015,459,215,648,170,098,586,526,069,000,000,000,000,000,000,000  ""correct horse battery staple"" is the equivalent of a random password of just length 9."
crypto,34lyjx,angdev,2,Sat May 2 20:54:12 2015 UTC,"He said ""style"", not that specific password. It comes down to what is easier to remember: several random words, or over a dozen random characters. People remember words easier than they remember random characters."
crypto,34lyjx,Ralgor,2,Sun May 3 01:33:16 2015 UTC,"It doesn't matter how many words the average person knows, because the average person shouldn't be generating such passphrases: a RNG should.  What's important is this:   The Second Edition of the 20-volume Oxford English Dictionary contains full entries for 171,476 words in current use   log(171476, 2256) ≈ 15.  So 15 words randomly chosen from the English language will do it."
crypto,34lyjx,cookiesui,1 point,Sun May 3 04:20:12 2015 UTC,"This really is an important thing to realize. ""correct horse battery staple"" style passwords are not about being extremely long passwords, they're about making easy to remember passwords that are as strong at 8-9 characters of immemorable gibberish."
crypto,34lyjx,Innominate8,3,Sun May 3 16:33:17 2015 UTC,"Computing power changes over the years, but so do the methods of storing passwords.    FreeBSD MD5 crypt has survived nearly 20 years and is still pretty darn strong,  and you can't brute force truly complex passwords.  And today we have new crypt functions such as  PBKDF2, BCRYPT, and SCRYPT.  It's likely in 10 or 15 years or so, even newer, harder functions will be in use,  Or the work factor for brute forcing on the existing functions will increase.  You will be fine against brute forcing,  As long as you don't keep the same password for 20 years,  after a hacker obtained a copy of an older hash of your password."
crypto,34lyjx,Draco1200,4,Sat May 2 15:39:24 2015 UTC,For anyone else who was trying to remember why MD5Crypt is now considered insecure: http://phk.freebsd.dk/sagas/md5crypt_eol.html
crypto,34lyjx,D1plo1d,0,Sat May 2 16:29:02 2015 UTC,Also: http://www.mathstat.dal.ca/~selinger/md5collision/
crypto,34lyjx,Natanael_L,4,Sat May 2 16:57:01 2015 UTC,MD5Crypt != MD5
crypto,34lyjx,GahMatar,1 point,Sat May 2 17:47:54 2015 UTC,Hash collisions aren't really relevant to password hashing.
crypto,34lyjx,avapoet,1 point,Sun May 3 17:38:54 2015 UTC,"I'm guessing you're thinking about passwords with 72 bits of entropy?  I think those would be able to be brute forced in a few months with $50,000 of hardware 20 years from now. Otherwise there is no major concern."
crypto,34lyjx,conradsymes,2,Sun May 3 04:35:32 2015 UTC,"For reference, the Bitcoin network has now computed over 280 hashes."
crypto,34lyjx,Natanael_L,1 point,Tue May 5 09:49:45 2015 UTC,"As a rough estimate, the Bitcoin network costs around $5 million.  Assuming it costs $1 million to produce enough ASICs to make a profit for the average mining firm."
crypto,34lyjx,conradsymes,-2,Tue May 5 19:15:54 2015 UTC,"Even a short password of length 8 cannot be brute-forced today, or even 20 years from now. Computer power doubles every 18 months, so the computers of the future will only be about 13x more powerful than they are now. A random password of length 8 at 10 attempts per second would currently take 2,288,528 years to go through every permutation, or an average break time of 50% of that: 1,144,264 years. If you waited 20 years to begin the process, it would only take... 85,822 years. Properly implemented, a length 8 password should never be broken (on average, one could always get lucky and get it the first try :) )."
crypto,34lyjx,angdev,0,Sat May 2 20:48:56 2015 UTC,10-12 character random passwords are frequently cracked by GPU rigs. You're unfortunately stuck in the 90's. You're also assuming that only one CPU will be used for cracking.   I let KeePassX generate 20 character passwords for everything.
crypto,34lyjx,Natanael_L,0,Sat May 2 21:15:23 2015 UTC,"No, 10-12 character random passwords with proper cryptography implementation are not cracked by GPU rigs. Even if you have 1,000 computers working against a length 8 password it will still take 1,144 years. You're assuming some poor implementation where a GPU can achieve 10+ million attempts per second rather than a proper implementation that would take the average computer 10ms (100/second) to compute.  How about this, I will create a VeraCrypt volume with a length 8 password and lets see how long it takes to to find the password! Hint: You never will in your lifetime."
crypto,34lyjx,angdev,2,Sat May 2 21:26:48 2015 UTC,"With strong password stretching? Sure. With just a hash like the majority of everything uses? It will fall. Oh, and 10+ million? You surely must mean 500+ BILLION per GPU rig?  Never assume there's strong password stretching there to protect you. Use long passwords."
crypto,34lyjx,Natanael_L,-5,Sat May 2 21:31:19 2015 UTC,Ying yang ..chicken egg
crypto,34k9kz,blackibiza,2,Fri May 1 21:50:47 2015 UTC,Why do you require the library to be C++?  What guarantees are you desiring?  Does strength against a Dolav-Yao attacker suffice?  Are you hoping for a verified protocol or a verified implementation?
crypto,34k9kz,tom-md,1 point,Sat May 2 22:53:21 2015 UTC,I'm looking for a verified implementation. In C++ because I'm fluent in C++ and because I guess most of the secure things are in C++
crypto,34hj43,voodoomagicman,17,Fri May 1 05:03:48 2015 UTC,"The formal construction you're looking for is a message authentication code (MAC), which is basically a symmetric form of signing. (In other words, MACs are to conventional digital signatures as symmetric encryption algorithms like AES are to asymmetric encryption algorithms like RSA: there's only one key, used for both creating and verifying MACs, instead of a private/public key like you may be used to seeing with digital signatures.) In particular, there's a popular MAC algorithm called HMAC that's similar to what you propose. It involves two hashes in a particular way, instead of just one hash, to avoid specific security issues with popular hash functions.  One word of caution with using MACs as bearer tokens like this (i.e., a secret that fully authenticates anyone who knows it, instead of being part of a larger check) is that they're not revocable. Maybe this is fine for your application, although if so, I'd be extra careful about your randomly-generated user IDs to make sure that there's no chance of a user ID being reused (since an old bearer token is sufficient to log in as the current user with that ID). More practically, you may want to include an expiration timestamp or something along with the username, when making up the token. If so, come up with some sort of unambiguous encoding for the contents of the token (I'm partial to JSON, 'cause it's easy to implement in so many languages: perhaps something like {""user"": ""ldpreload"", ""expires"": 1430545276}). Then you accept the encoded contents as well as the MAC, make sure the MAC verifies, and make sure the expiration date hasn't hit yet.  You can extend this to store any information that the user is allowed to know and not modify, to avoid persistently storing that server-side. Authorization information (what permissions they have) tends to be in this category. You could also store additional constraints (like client IP address, although that's of limited value and may not be useful for your use case).  At that point you might want a proper standard / library for doing this. Django has one, for instance; I suppose there are probably a few others intended for use with web frameworks. (And they also recommend JSON.) There's also Macaroons, which are new-ish and don't have many implementations, but have a bunch of cool features, and worry about things like expiry / revocation.  Re hash function, personally I would only consider SHA-256 or stronger for new applications. If you can't fit a 256-bit (32-byte) hash, regardless of what hash function you're using, you're not meeting a reasonable security strength factor. For some applications (possibly including this one) you can be less conservative, but that's definitely in the realm of ""writing your own crypto,"" in the sense of ""I'm asserting that I'm a real cryptographer here and have analyzed this particular protocol,"" and even though I have a (tiny) bit of solid academic crypto background, I really like not relying on that."
crypto,34hj43,ldpreload,3,Fri May 1 05:50:51 2015 UTC,Thank you! It looks like HMAC is exactly what I am looking for.  I could not have asked for a better response.
crypto,34hj43,phyzome,2,Fri May 1 06:25:02 2015 UTC,"I also want to avoid storing any information on the server after a users connection closes.   Just to be clear, with the salted hash approach, you'd still need to store something on the server.  There are some other things wrong with what you describe, I think, but in any case the other commenter is right about HMAC. :-)"
crypto,34hj43,Natanael_L,4,Fri May 1 13:10:12 2015 UTC,"I think the idea is to just not store a long term state, so you can reboot from a fresh disk image and keep going as if nothing happened. Having long-ish term server-side secrets still works fine with that model."
crypto,34hj43,SushiAndWoW,3,Fri May 1 13:48:41 2015 UTC,"Instead of generating public IDs and giving people HMACs of those IDs, you could also generate the secret reclaim tokens and have the public ID be just a regular hash (or HMAC if you want) of the secret token. This has the advantage that it can't be broken wholesale by someone getting your HMAC key, since getting at each secret requires reversing a one-way function. A disadvantage is that it makes your public IDs longish and random."
crypto,34eckn,johnmountain,8,Thu Apr 30 13:32:55 2015 UTC,Please see Moxie Marlinespikes comment in /r/netsec.
crypto,34eckn,R-EDDIT,9,Thu Apr 30 17:57:08 2015 UTC,Direct link: http://www.reddit.com/r/netsec/comments/34e6si/whatsapps_endtoend_encryption_analysed_its_pretty_good_yet_still_useless/cqtxbh7
crypto,34eckn,Natanael_L,3,Thu Apr 30 19:16:13 2015 UTC,"Moxie is too focused on ""but we've already said it's not working with iOS!""  I don't think that was the main point of the article, but the fact that you can't TRUST Whatsapp to properly use TextSecure encryption  - iOS or not.  1) Whatsapp has never made it public itself that it's doing this (ok, still in ""deployment"" so we'll see what they do when it's ""finished"")  2) No privacy policy change yet, and I think there should be one - also eagerly awaiting for this  3) No fingerprint authentication or any way to ensure that the e2e encryption is working  Again this is supposedly ""not done yet"" - so we'll see. However, Moxie and his team have consistenly promoted Whatsapp as ""secure"" already because of that ""unfinished implementation"". They even had a small argument on Twitter with Telegram over it saying that Whatsapp is more secure than Telegram because of it.  I do agree Telegram encryption sucks, but I don't think they should say Whatsapp is so much more secure, because at this point Whatsapp's E2E encryption is nothing more but ""vaporware"". Until Whatsapp resolves the 3 issues I mentioned above, that's exactly what it is.   I'm a big fan of Moxie and I can't wait until Signal arrives on Android (and on desktop, too, hopefully) but I hate that Whatsapp is getting so much good press over this without being anywhere near ready or even officially committing to adopting this type of encryption."
crypto,34eckn,Natanael_L,2,Fri May 1 09:40:40 2015 UTC,"Honestly I think it IS more secure than telegram since a malicious telegram server is equally capable of bypassing the encryption (breaking the authentication through MITM, for example).  But obviously it shouldn't be advertised as secure, yet"
crypto,34eckn,dareksam,2,Fri May 1 10:21:53 2015 UTC,To be the devils advocate: WhatsApp haven't even announced the e2e themselves. I don't think you can  blame them for not shipping something they never claimed they had.
crypto,34eckn,slyf,4,Fri May 8 11:52:02 2015 UTC,Needs a little lock icon like TextSecure has
crypto,34eckn,Natanael_L,3,Thu Apr 30 16:17:43 2015 UTC,"More importantly, key verification"
crypto,34eckn,slyf,3,Thu Apr 30 17:42:42 2015 UTC,"Verifying a key is useless if you have no idea if your message is being sent encrypted or not, need both"
crypto,34eckn,autotldr,-1,Thu Apr 30 18:25:48 2015 UTC,"This is the best tl;dr I could make, original reduced by 91%. (I'm a bot)     If someone would want to analyse WhatsApp messages en masse, this leaves the WhatsApp servers as the place to do it since they decrypt the transit encryption and could therefore evaluate and store the plain text of all messages.  The open source tool yowsup can be used to script the sending and receipt of WhatsApp messages on a server or desktop PC. The current versions support an experimental -moxie flag that allows to start its WhatsApp client with support for E2E encryption.  We do know that turning off the encryption is built into the design after all: WhatsApp clients sent messages without E2E encryption to iPhones, for example.     Extended Summary | FAQ | Theory | Feedback | Top five keywords: message#1 WhatsApp#2 encryption#3 use#4 client#5  Post found in /r/netsec, /r/tech, /r/Android, /r/privacy, /r/crypto, /r/technology, /r/technews and /r/realtech."
crypto,34hurj,Cannon-C,6,Fri May 1 07:44:45 2015 UTC,"Again, [Insert the standard arguments against relying on browser based encryption here]"
crypto,34hurj,Natanael_L,3,Fri May 1 09:26:50 2015 UTC,"Reminds me of this joke:   A man is sent to prison for the first time. At night, the lights in the cell block are turned off, and his cellmate goes over to the bars and yells, ""Number twelve!"" The whole cell block breaks out laughing. A few minutes later, somebody else in the cell block yells, ""Number four!"" Again, the whole cell block breaks out laughing.  The new guy asks his cellmate what's going on. ""Well,"" says the older prisoner, ""we've all been in this here prison for so long, we all know the same jokes. So we just yell out the number instead of saying the whole joke.""  So the new guy walks up to the bars and yells, ""Number six!"" There was dead silence in the cell block. He asks the older prisoner, ""What's wrong? Why didn't I get any laughs?""  ""Well,"" said the older man, ""sometimes it's not the joke, but how you tell it."""
crypto,34hurj,DoWhile,2,Fri May 1 17:15:59 2015 UTC,"There's another version I've heard. The new guy says ""67!"", and everybody laughs. Then he asks what was so funny about that one, and they say they hadn't heard that one before."
crypto,34dx9y,P-e-t-a-r,7,Thu Apr 30 10:53:44 2015 UTC,Having incompatibilities between sha256 and windows XP SP2 is far from being a problem. This will help phasing out these insecure XP machines that shouldn't be using the Internet anyway. I will continue to recommend to my customers installing sha256-signed certificates with no regards for old XP systems in my security reviews.
crypto,34dx9y,aris_ada,4,Thu Apr 30 13:07:11 2015 UTC,"""The fact that SHA-2 can’t be used with older browsers and OS’s means that untrusted certificate warnings are going to become commonplace,"" Munro explained. ""And if that happens, the danger is that many users will simply ride rough-shod over such pop-ups, potentially creating the ideal opportunity for man-in-the-middle (MitM) attacks.""   Meh. Let's face it - the people that are still on XP and Android 2.2 were going to click through that sort of stuff anyway, even if everything was nice and compatible until one day they suddenly get a MITM attack.   I'd rather not keep everyone else less vulnerable because of 1% of the market that's likely to be the the least tech-literate anyway."
crypto,34dx9y,johnmountain,2,Thu Apr 30 14:48:13 2015 UTC,"Yeah.  It's broken and should be replaced, but there's definitely a lot more foot-dragging than if it were as broken as MD5."
crypto,34dx9y,bitwiseshiftleft,3,Fri May 1 17:48:03 2015 UTC,"I know this is an unpopular opinion, but SHA-1 requires an amount of data storage which is unfeasible to deal with. Even assuming some time-memory tradeoffs combined with a differential attack.  You will still have to store 250 certificates. Assuming you can still get a 1024-bit certificate still... log(1024)/log(2)= 250 * 210 = 260... an exabyte. And it will be higher than that. The md5 collision attack depended on successfully predicting the certificate counter value when issued. There will be many false positives, which means you'll have to generate at best petabytes of data, search through it to check for collisions, and hope you succeed before the counter value turns out to be different than expected.  SHA-1 is no where nearly as insecure as md5, and I doubt the next attack will be a great improvement. The NSA aren't amateurs."
crypto,34dx9y,conradsymes,2,Fri May 1 07:57:28 2015 UTC,There's already a practical collision attack with a real proof of concept against a version of SHA1 with the only modification being a constant being replaced with a custom one.
crypto,34dx9y,Natanael_L,1 point,Fri May 1 20:26:12 2015 UTC,That's a pseudocollision. Those don't really count.
crypto,34dx9y,conradsymes,2,Fri May 1 22:07:36 2015 UTC,"It shows the real SHA1 is at risk. If changing one constant is enough, there's something wrong with the rest of the algorithm."
crypto,34dx9y,Natanael_L,1 point,Fri May 1 23:03:46 2015 UTC,Many algorithms become trivially breakable when you change their constants. Even AES (there was a paper on this recently).
crypto,34b47u,johnmountain,3,Wed Apr 29 19:08:41 2015 UTC,"I haven't finished watching the whole thing, but I'm happy with how skeptical the congresspeople seem to be of the law enforcement arguments for backdoors.   It was telling when the chairman asked who believed that it was possible to implement backdoors securely and no one raised their hand.  I really hope that we can win the Crypto Wars 2.0."
crypto,34b47u,BostonEnginerd,-2,Fri May 1 02:55:14 2015 UTC,"Not even worried. Thank god Zimmerman fought the good fight on this one back in the day.  As for the present moment - These Congress Critters have way too much on their plate to do any thing measurable to crypto & the companies that use it.  They are trying to keep the dollar together, run the welfare state, fight wars on 5+ fronts, get re-elected, on and on and on.   AND   The military is the most dissastified as they've ever been, there has never been less trust in the media or the federal government among the general population and more people than ever have the free time (by way of unemployment) to contemplate these things. Not to mention most corporations do not want this as it makes them even more toxic than they already are to potential foreign based clients.  Back it all up with the fact that the NSA/CIA and the TSA have NEVER caught a SINGLE terrorist and we have what amounts to a symbolic gesture at best and at worst a distraction or misdirection.  Carry on."
crypto,34azxc,54gs45645t,12,Wed Apr 29 18:37:41 2015 UTC,"You are using an outdated version of OpenSSL (which only supports up to TLS 1.0) on a closed source operating system, with a closed source httpd binary. ECC should be the least of your concerns.  Of course if you knew this, you would also know OS X's built-in httpd does not even support EC ciphers."
crypto,34azxc,blowupbadguys,11,Thu Apr 30 02:02:19 2015 UTC,"I personally wouldn't use any ECC curves with NSA supplied constants.  That beings said if you're afraid of NSA snooping, you're already pwned by using vendor supplied binaries.  Might as well save your clients the CPU time and use ECC."
crypto,34azxc,admax88,1 point,Wed Apr 29 19:08:40 2015 UTC,I like how you think.
crypto,34azxc,disclosure5,4,Wed Apr 29 19:33:43 2015 UTC,What you've got to be careful of is encouraging clients to negotiate without forward secrecy. Running without it is probably a bigger risk than the NIST curves.
crypto,34azxc,rainsford21,3,Thu Apr 30 02:34:37 2015 UTC,"No.  Trading the tangible benefits of using ECC for avoiding an entirely theoretical risk does not seem like a good tradeoff to me.  It's not really a matter of trusting the constants or not since nobody has been able to show how anyone, no matter how untrusthworthy, would be able to abuse the ability to control elliptic curve generation seeds as used in the NIST curves to actually create secretly backdoored/weakened curves that nobody has noticed despite the curves being public for years.  The chance that the NIST curves are weakened through some crypto black magic that no public cryptographer has been able to discover seems like it's so far down the list of potential threats that worrying about it honestly seems like a case of cryptographic bikeshedding more than anything else."
crypto,34azxc,ldpreload,3,Thu Apr 30 02:22:32 2015 UTC,"Have you seen the BADA55 curves demonstration?  The claim of that demonstration (which I think is quite soundly made) is that, if there is some mathematical quirk that applies to order of one-in-a-million curves, it's straightforward to force the curve to be one of those.  The authors further claim that the property of ""twist security"" is one of these one-in-a-million cases, and if it were not publicly known, it could be effectively used by a malicious agency to produce a secretly-weak curve.  (Maybe you've seen this and you don't think that it's realistic that such a property could exist, or something? I could believe that.)"
crypto,34azxc,silverforest,1 point,Fri May 1 08:56:31 2015 UTC,"(Maybe you've seen this and you don't think that it's realistic that such a property could exist, or something? I could believe that.)    That sounds like what he's saying. If such a property exists, it has not yet been found."
crypto,34azxc,rainsford21,1 point,Sat May 2 00:09:01 2015 UTC,"That's basically it.  And more than that, it seems unlikely such a property could exist and not be discoverable even when curves with that specific property were subject to long-term public scrutiny."
crypto,34azxc,rainsford21,1 point,Sat May 2 00:54:31 2015 UTC,"I've seen the BADA55 demonstration and I think it's a good demonstration of some potentially non-obvious properties of hashing input values.  But I don't think it actually says all that much about the security of the NIST elliptic curves (or any others generated the same way).  The problem is that the ""if"" in the BADA55 argument is a pretty big one.  The BADA55 attack only works IF the attacker knows of a weakness in elliptic curves that nobody else knows AND nobody else is able to discover even when presented with examples of the weak curves.  In the case of the NIST curves, that would mean nobody has discovered the weakness in the 15 years since they've been published.  That seems pretty implausible given available information and understanding of elliptic curve crypto."
crypto,34azxc,ldpreload,2,Sat May 2 00:51:48 2015 UTC,"In almost all the servers I set up, the NSA is just not part of my threat model. There are so many attackers in the world, of which the NSA is just one. I have had my ISP hacked and my email rerouted. I have had my personal laptop be turned into a spam zombie. I have had servers I admin be compromised. I have had my credit card number stolen and used fraudulently. The US government wasn't behind any of these.  And being a US citizen as I am (or using closed-source, US-produced software as you are), if the federal government really wanted to attack me, they have so many options, including targetted options against me alone. It wouldn't matter if I were using their backdoored crypto (supposing that it were in fact backdoored).  So as /u/disclosure5 said, the tradeoff of not using the ECDHE suites, and thus losing forward security, seems to be a bad one.  That said, there's (slow, bureaucracy-filled) work towards standardizing Curve25519 and ""Goldilocks"" aka Curve448 for eventual use in TLS, so the answer is yes, there is certainly quite a bit of concern about the existing curves. If you enjoy watching bureaucracy, read the CFRG mailing list archives sometime. :)"
crypto,34azxc,EddieTheJedi,1 point,Fri May 1 09:07:02 2015 UTC,"I tried configuring my services this way, and ISTR there are some modern clients that only support forward secrecy using ECC. Let's see...  Ah, found it. IE 8 thru 10 on Windows 7 don't support any TLS_DHE_RSA_* cipher suites, although some TLS_DHE_DSS_* suites are supported. So, depending on who your users are, and whether you can get a DSA certificate, you might need to enable ECC to get forward secrecy. In that case, you can still disable cipher suites that use ECDSA or non-ephemeral ECDH."
crypto,34azxc,disclosure5,1 point,Wed Apr 29 19:08:37 2015 UTC,It's not only Win 7.  With my cipher list most microsoft products fail to negotiate FS.  I'm upfront with my users and point this out as the log in and recommend moving away from IE to Firefox or Chrome.
crypto,346mx3,johnmountain,10,Tue Apr 28 18:46:47 2015 UTC,"There's really no reason to use 4096-bit RSA keys.  We can consult http://www.keylength.com (which, strangely, doesn't support https) as to when 2048-bit RSA keys are recommended to be phased out.  Comparing the following methods:   Lenstra and Verheul Equations (2000) Lenstra Updated Equations (2004) ECRYPT II Recommendations (2012) NIST Recommendations (2012) ANSSI Recommendations (2014) Fact Sheet NSA Suite B Cryptography (2014) Network Working Group RFC3766 (2004) BSI Recommendations (2015)   ...the recommendation is to upgrade from 2048-bit RSA around the year 2030.  The reality is RSA is a legacy protocol. ECC provides much better performance than RSA with fewer sharp edges like say, RSA can be used directly for encryption (poorly), whereas with ECC you use ECDH to perform a key exchange for use with a symmetric cipher.  By the time the year 2030 actually rolls around, it's possible there will already be quantum computers that completely break both RSA and ECC. It's also possible new mathematics will make it much easier to factor numbers. Either way, it's highly likely what ever breaks 2048-bit RSA keys will also break 4096-bit RSA keys.  See also:  https://www.yubico.com/2015/02/big-debate-2048-4096-yubicos-stand/"
crypto,346mx3,bascule,4,Wed Apr 29 07:23:02 2015 UTC,"The reality is RSA is a legacy protocol. ECC provides much better performance than RSA with fewer sharp edges like say, RSA can be used directly for encryption (poorly), whereas with ECC you use ECDH to perform a key exchange for use with a symmetric cipher.   I don't think you quite have that right.  The RSA long-term key (or DSA for that matter) is stored in the certificate. When you want to start a conversation, you can do one of two things: exchange the key using the long-term RSA key and also provide authenticity using that same RSA key, or exchange the key using a per-session key exchange (e.g. Diffie Hellman) and provide authenticity using the long-term RSA key. This is the difference between cipher suites that start TLS_RSA_... and TLS_DHE_RSA..., and it's where ephemerality comes from.  As a worked example:   Alice generates Diffie-Hellman parameters, signs them with her long-term RSA private key, sends them to Bob. Bob uses Alice's public key (delivered and verified via PKI, but that's another story) to verify that the sent parameters are authentic. If authentic, Bob computes the necessary steps within DH to share a secret key with Alice, signing this data with Alice's public key. Alice verifies the authenticity of the data, and now has a shared key with Bob. The Diffie-Hellman parameters are discarded, thus making it infeasible to recover the exchanged key if the long-term RSA key is compromised.   ECC is a completely different aspect, and not an algorithm by itself. ECDSA and ECDH are Elliptic Curve implementations of the DSA and Diffie-Hellman algorithms. They provide stronger security at smaller key lengths, and are more efficient, at the cost of more complex implementation.  You are right about the 2048-bit key sizes, though. As long as there are no immense leaps made in the field of semiprime factorisation, RSA at the 2048-bit level should be considered secure for at least another decade. The computational complexity class of RSA means that performance does not scale linearly, so 4096-bit keys incur a much more significant overhead in comparison to 2048-bit keys, for little tangible security benefit in most contexts."
crypto,346mx3,gsuberland,2,Wed Apr 29 09:06:23 2015 UTC,"If authentic, Bob computes the necessary steps within DH to share a secret key with Alice, signing this data with Alice's public key.    Eh...? You mean encrypting? I'm not sure what SSL does, but it probably isn't that."
crypto,346mx3,Natanael_L,2,Wed Apr 29 15:02:59 2015 UTC,"No. The DH parameters can be safely transmitted in the clear. That's the point of DH - it allows for a key to be agreed in an untrusted channel without revealing that key. The only real requirement for safe exchange is that the DH parameters are verified as authentic. I'm not sure if SSL does actually encrypt them, but it shouldn't need to."
crypto,346mx3,gsuberland,1 point,Wed Apr 29 15:47:35 2015 UTC,"It sounded to me like Bob was supposed to take the action of signing the response using the public key of Alice, not that Alice signed it."
crypto,346mx3,Natanael_L,1 point,Wed Apr 29 16:09:00 2015 UTC,"The point I was trying to make that I guess you misunderstood is that RSA is used incorrectly all the time, not necessarily within the scope of TLS. RSA can be used directly for encryption without padding which is dangerous. In fact, at this point, I'd consider RSA something of a code smell.  I'd say you shouldn't be using RSA for encryption unless you know what OAEP is, but the reality is actually that unless you have legacy requirements to use RSA, you probably should be using ECC instead.  Yes I know the difference between ECDSA and ECDH, and for that matter the difference between Weierstrass, Montgomery, and Edwards curves. As long as you're namedropping ECC algorithms, why not EdDSA, that's what all the cool kids are using."
crypto,346mx3,bascule,-1,Wed Apr 29 16:04:02 2015 UTC,RSA is handy for verification because it's much faster than ECC.
crypto,346mx3,untitleddocument37,2,Wed Apr 29 11:15:39 2015 UTC,EdDSA with batch verification closes the gap considerably
crypto,346mx3,bascule,-1,Wed Apr 29 16:41:06 2015 UTC,That's great but is totally useless in a lot of circumstances ... like say TLS ... the entire topic of this thread.  It's also useless for secure boot applications ...
crypto,346mx3,untitleddocument37,1 point,Wed Apr 29 16:43:27 2015 UTC,"That's a very odd argument to make, because in the context of TLS (in an ECDHE scenario), signature performance is the server-side bottleneck, not signature verification performance. This is the reason why Google and CloudFlare have moved from RSA to ECDSA: because there's a performance advantage for the signer."
crypto,346mx3,bascule,9,Wed Apr 29 20:57:09 2015 UTC,"Unfortunately, browser support for TLSv1.2 is not widespread enough to disable TLSv1 and TLSv1.1.   Does everyone feel this is true, that they cannot yet be disabled? The PCI Council just came out and said that TLS v1 and 1.1 are broken and not acceptable."
crypto,346mx3,bearsinthesea,10,Wed Apr 29 05:59:51 2015 UTC,"Nobody is going to turn off TLSv1. Killing off half of Android and IE6,7,8,9?  https://en.wikipedia.org/wiki/Transport_Layer_Security#Web_browsers  I recently got a PCI-DSS compliance report from Trustwave for a client asking us to turn off TLSv1 ... there is no way that is going to fly.  Also, did they really also say 1.1 is unacceptable?"
crypto,346mx3,i_regret_most_of_it,4,Wed Apr 29 06:30:00 2015 UTC,"I did not read it to say that 1.1 was unacceptable, but PCI does state that 1.0 is unacceptable.  You need to remember though that this is only for transactions of payment card information, and only for companies which wan't to be PCI DSS 3.1 certified."
crypto,346mx3,drmartinsweden,2,Wed Apr 29 06:53:29 2015 UTC,"I guess there is going to be a show-down. Because the Council, apparently following NIST, has said that some 'early revisions of TLS 1.1' are not secure, and must be disabled. They also said that    Note: New e-commerce implementations must not consider consumer web browsers as pre-existing infrastructure that needs to be supported.   So I guess on new implementations, you can't use TLSv1."
crypto,346mx3,bearsinthesea,2,Wed Apr 29 16:13:17 2015 UTC,"I find it ok to ""kill off"" insecure devices.  Maybe if customers saw their shiny $400 yesteryear phone that the vendor refuses to upgrade not work anymore they might choose better vendors.  TLS 1.2 came out quite a while ago.  There is zero reason why any Android phone doesn't support it."
crypto,346mx3,untitleddocument37,-12,Wed Apr 29 11:14:57 2015 UTC,fantastic! now prove the NSA/CIA/FBI/TSA/USPS doesn't already have copies of Digicert's private keys and I will give an actual shit.
crypto,346mx3,granadesnhorseshoes,8,Wed Apr 29 01:49:51 2015 UTC,Really? Because we can't have total absolute proof (which is impossible) we should throw out everything else.... Why even try after all.... What crap. Go be overly pessimistic but don't act like you're actually helping matters. What bullshit.
crypto,346mx3,zimm3r16,8,Wed Apr 29 02:37:21 2015 UTC,"Digicert runs a certificate transparency log, which has been included in Chromium since late last year, so you somewhat have a defense against unscrupulously issued [Digi]certs."
crypto,346mx3,i_regret_most_of_it,5,Wed Apr 29 02:15:41 2015 UTC,"So, you're a security absolutist? Perfect or nothing? Do you do your electronic banking on HTTP? I hear the CIA can watch banks anyway, so you probably use nothing but cash."
crypto,346mx3,bearsinthesea,1 point,Wed Apr 29 05:54:57 2015 UTC,Don't forget everyone who isn't a TLA trying to get your data.
crypto,346mx3,aydiosmio,1 point,Wed Apr 29 04:13:25 2015 UTC,"I'm in no way an absolutist. I know perfect security doesn't exist. What I take exception to is the blind reliance of a ""web of trust"" we have absolutely no reason to trust and every possible reason to distrust.  edit: Also, probably coincidental that Digicert is head quartered in Lehi Utah, less than 10 miles from the NSA data center project."
crypto,343okn,elfishwebbly,9,Tue Apr 28 01:27:15 2015 UTC,"I guess it depends on the threat you are guarding against. If it is a nation-state, particularly the US and its Five-Eyes partners, then I would not rely on closed-source encryption created by a large US corporation.  These companies are subject to government pressure and we cannot see what is in the code.  With a lesser adversary then these built-in encryption schemes are probably good enough."
crypto,343okn,mvario,4,Tue Apr 28 14:15:01 2015 UTC,"I know very little about security (hence subscribing tp /r/crypto in the hopes I might learn something!), but my approach so far has been to trust in PGP/GPG tools...  Am I wrong to do so?"
crypto,343okn,mathcampbell,-1,Tue Apr 28 13:46:37 2015 UTC,According to Snowden..Yes
crypto,343okn,Caminsky,1 point,Tue Apr 28 14:48:06 2015 UTC,I haven't seen anything to suggest GPG is unsafe (tho I've read that PGP itself by Symatec is now very suspect.).  Got any links?
crypto,343okn,mathcampbell,11,Tue Apr 28 17:30:24 2015 UTC,bitlocker.. Stopped the reading.
crypto,343okn,elarabbas,5,Tue Apr 28 06:49:06 2015 UTC,"Care to elaborate on why? I know it's from Microsoft and that it can use a special chip to store the key. Is there reason to think the system has been breached, besides from the attacks on the key storing chip mentioned in the article?"
crypto,343okn,brinchj,2,Tue Apr 28 07:41:06 2015 UTC,"No. People are still hating on Microsoft like it's 2002. BitLocker has been extensively reviewed by the security community and no backdoor has been found. Using a TPM is also optional, even if you have one installed - it's a quick registry hack. I welcome anyone to provide references as to why BitLocker should be avoided, beyond ""I don't trust Microsoft""."
crypto,343okn,gsuberland,13,Tue Apr 28 09:00:50 2015 UTC,"If you're security paranoid, then you ""shouldn't trust Microsoft"" because once Microsoft discovers new vulnerabilities in its operating system (including Bitlocker) it hands them over to the NSA before it releases a fix months later when it gets around to fixing the vulnerability.  http://bloomberg.com/news/2013-06-14/u-s-agencies-said-to-swap-data-with-thousands-of-firms.html  Apple is now doing the same, starting with the new ""cyber-threat sharing"" executive order announced a couple of months ago, for which Apple got a very good deal from the government (integrating Apple Pay with federal services).  Both Microsoft and now Apple are doing this as a choice. They can't even use the excuse that ""it's the law!"" (at least until CISA and such pass - and then they'll get immunity for doing it, just like the carriers did for over-sharing data with law enforcement)."
crypto,343okn,johnmountain,1 point,Tue Apr 28 10:59:28 2015 UTC,"You start off your post with something known, and then move into complete conjecture when you say Apple does the same thing.  There is literally zero evidence of that. Making things up doesn't help your credibility."
crypto,343okn,ManFromAnAntiqueLand,5,Tue Apr 28 12:22:14 2015 UTC,"Apple has a horrid reputation in the security community, and have clearly shown in the past it's not a priority for them.  See this privilege escalation attack that took them 11 months to fix on only the most recent OS X, leaving any old machines still vulnerable.  They also refuse to allow source audits of their operating systems (closed source), do not allow third party OS modifications or upgrades, or in the iThings' case even apps (walled garden), and often have automatic updaters that operate with no/minimal user permission (universal backdoor).  If you care about security or privacy in any real sense (against adversaries with financial resources), stay far away from any closed source operating systems or code.  Including anything Apple produces.  Oh, and also, this.  Enough said."
crypto,343okn,theonetruesexmachine,-1,Tue Apr 28 14:39:26 2015 UTC,Actually Apple has a very good reputation in the security community.  Pointing to one flaw that took them 11 months to fix to extrapolate that they have a bad reputation in the security community is Bullshit.  There are many other companies that have had similar response times on certain issues. That doesn't mean the company as a whole has a poor reputation.  And your last link there has literally no relevance.
crypto,343okn,ManFromAnAntiqueLand,4,Tue Apr 28 15:03:49 2015 UTC,Actually Apple has a very good reputation in the security clearance community.   Source?  I gave you two.  Here's some more:  http://betanews.com/2015/02/22/os-x-ios-and-linux-have-more-vulnerabilities-than-windows/ http://www.techrepublic.com/blog/linux-and-open-source/linux-the-clear-choice-for-security/
crypto,343okn,theonetruesexmachine,-3,Tue Apr 28 15:04:50 2015 UTC,But... Wait... Now you are saying Microsoft has a good reputation in the security community when you just argued they didn't.  You are grasping at straws. It's silly.
crypto,343okn,ManFromAnAntiqueLand,1 point,Tue Apr 28 15:07:29 2015 UTC,"But... Wait... Now you are saying Microsoft has a good reputation in the security community when you just argued they didn't.   Where the fuck did I say that?  Quote me please.  Worse than Windows means it's really fucking bad.   Though reported vulns don't translate into security, that's a big red flag.  And still no sources.  No arguing with a fanboy I guess.  Your original post:   You start off your post with something known, and then move into complete conjecture when you say Apple does the same thing.  There is literally zero evidence of that. Making things up doesn't help your credibility.   Funny how you have zero evidence yourself buddy.  But here, I posted some, so I'll post it again.  I'm done here now."
crypto,343okn,theonetruesexmachine,1 point,Tue Apr 28 15:14:55 2015 UTC,"In what parts of the security community? Then there's things like their claims that they CAN'T read your iMessage chats when iCloud backups of them are in plaintext and when they are in full control of key distribution and thus can MITM you undetected.  Edit: please don't trust the unwarranted claims that Apple's PKI infrastructure can't be controlled by Apple. There is only one way to know who's at the other end - by having your device tell you what keypair was used to authenticate the messages. If you are told to trust a third party (Apple) who says they verified it for you, they are capable of lying.   iMessage relies on Apple by design to tell your devices who's who, and will not tell you about the details."
crypto,343okn,Natanael_L,-2,Tue Apr 28 15:28:53 2015 UTC,"So much misinformation.  iMessage is end to end encrypted, and Apple can't read it.   If you do a backup to iCloud, Apple is then able to technically read it. It is most definitely not stored in plaintext.  Apple is wholly and completely forthcoming about this on their law enforcement page, and make no attempt to hide it.  The fact that they can read iCloud backups does not change that iMessage is end to end encrypted."
crypto,343okn,ManFromAnAntiqueLand,2,Tue Apr 28 17:57:58 2015 UTC,"Edit: where's the misinformation? Your comment literally pointed out nothing wrong in my comment. You gave no evidence.   You are lying if you say Apple can't read it unless you know something I don't about the key verification. When you add a contact to send messages to, Apple tells your devices what key to encrypt to and you can not verify it or change it. That's what it means that Apple control key distribution. The verification consists of absolutely nothing more than that it came in over an SSL connection to Apple servers. There's no user verifiable link to the human or devices behind the account.  There is nothing that CAN stop Apple from being able to MITM by introducing keys under their control unless the client software is changed to allow key verification.  That backups aren't stored unencrypted on the physical hardware makes no difference as Apple has the keys. After all, you can disconnect all your devices and take them offline and make a password reset (thus wiping out everything you have that could be used as an encryption key) and you can still sync the messages from iCloud to your new devices, fully readable."
crypto,343okn,Natanael_L,0,Tue Apr 28 18:01:04 2015 UTC,"There is no evidence against that either. I have not researched it, not being an apple user.(also it is known that Linux/BSD is the place to go for control over your own security)  In court, you need to prove it, you cannot change the sentence. For my information, i can change opinion. Given the lack of information it is up to the priors, and my priors say ""quite possibly they do have a backdoor""."
crypto,343okn,Jasper1984,0,Tue Apr 28 13:06:17 2015 UTC,"Lol... Really?  So as long as I don't have evidence to the contrary, I can just haphazardly claim that something is true because you can't prove it isn't true?  That's brilliant. Did you know that there is a planet of unicorns that actually control all events on earth?  Oh, I don't have any evidence of that? Doesn't matter, you don't have evidence it isn't true, therefore it must be true."
crypto,343okn,ManFromAnAntiqueLand,3,Tue Apr 28 15:05:52 2015 UTC,It is not the same.
crypto,343okn,Jasper1984,-1,Tue Apr 28 15:27:59 2015 UTC,It is exactly the same.  It's clear that your personal bias against apple is motivating what you are saying here.
crypto,343okn,ManFromAnAntiqueLand,3,Tue Apr 28 17:59:13 2015 UTC,"Security is hard to achieve. Claims that your systems are secure should not be trusted without evidence. I've yet to see sufficient evidence here. The null hypothesis is ""everything is insecure""!"
crypto,343okn,Natanael_L,2,Tue Apr 28 20:04:52 2015 UTC,"You say bias, i say general info on about corporations, their attitudes and security."
crypto,343okn,Jasper1984,2,Wed Apr 29 12:32:10 2015 UTC,"We don't need to have concrete evidence of a present backdoor to evaluate the situation and determine how much to trust a certain company.   Trust is all about the fact that XYZ is in a position to betray you, and could already be betraying you, or they might change their minds and betray you at a future date, and you have to make a somewhat uninformed decision with imperfect information and an inability to see the future, on how to act.   In these matters I would always err on the side of distrust."
crypto,343okn,satan-repents,3,Tue Apr 28 18:41:16 2015 UTC,"Per the changes from Windows 7 to Windows 8 regarding the removal of MS custom encryption algorithm steps and not allowing aes-256 encryption via MBAM, there is evidence showing a lax in Bitlocker strength for seemingly no gain. Although no direct cause or smoking gun found, these steps, or changes made, are not conducive to advancements in security for a later OS - quite the opposite.    That's the cause for concern regarding bitlocker in the community. You're otherwise really protecting yourself against a civilian smash-and-grab with BL. If you're holding seriously damaging material on your machine you're better off using good OPSEC."
crypto,343okn,latherus,1 point,Tue Apr 28 13:41:13 2015 UTC,"the removal of MS custom encryption algorithm steps    Can you provide a reference for those, please? From what I've seen, there was nothing ""custom"" about the encryption - all references I can find say it's always been AES. It's only ever referred to as ""proprietary"" when discussing the fact that BitLocker is not open source.   and not allowing aes-256 encryption via MBAM, there is evidence showing a lax in Bitlocker strength for seemingly no gain   It always did (as far as I can see) allow 256-bit AES via MBAM; you just needed a registry hack to enable it. Not ideal, but still available. Also, AES-128 is arguably no less secure than AES-256 in a practical sense (reference), while offering much greater performance, which explains why Microsoft opted to stick with 128-bit AES for something as performance-critical as disk IO.  It feels like there's a lot of misinformation and hearsay on the the topic without any hard facts to back it up."
crypto,343okn,gsuberland,3,Tue Apr 28 14:05:25 2015 UTC,http://www.wilderssecurity.com/threads/has-bitlocker-been-weakened-in-windows-8.369873/  Their elephant diffuser algorithm is gone in Win8.
crypto,343okn,Natanael_L,1 point,Tue Apr 28 14:21:41 2015 UTC,"The diffuser algorithm was designed to offer some level of protection against ciphertext block malleability attacks. It offers no additional strength in terms of confidentiality. Removing it improves performance significantly (one AES operation rather than 3) and reduces complexity. Exploiting the CBC malleability requires physical access, too, which means they could backdoor your system in any number of other ways (incl. stealing your boot passphrase with a hardware keylogger).  Keep in mind that FDE is only designed to provide strong guarantees of confidentiality. It does NOT guarantee integrity or authenticity of data. LUKS is just the same in this department."
crypto,343okn,gsuberland,3,Tue Apr 28 14:31:58 2015 UTC,I still prefer authenticated or other malice resistant encryption. A lot of encrypted volumes are synchronized via cloud storage too!
crypto,343okn,Natanael_L,1 point,Tue Apr 28 15:30:48 2015 UTC,"Per the link below, and subsequent links within, provided by /u/Natanael_L's post which is what I was referencing.   Can you provide a reference for those, please? From what I've seen, there was nothing ""custom"" about the encryption - all references I can find say it's always been AES. It's only ever referred to as ""proprietary"" when discussing the fact that BitLocker is not open source.   Certainly, per technet: ""Diffuser is a custom algorithm.  Two of those reasons  why DIff User is removed from BitLocker are that crypto-acceleration hardware doesn’t support it, and that it cannot be used in FIPS-only environments.""   It always did (as far as I can see) allow 256-bit AES via MBAM; you just needed a registry hack to enable it. Not ideal, but still available.   This is correct. I was mistaken regarding the availability of AES-256 with AES-128 or AES-256 with Diffuser, which is not available for Windows 8.X OS's. Although Diffuser is still available for Windows 7 even when set via group/local policy or via MBAM.     Also, AES-128 is arguably no less secure than AES-256 in a practical sense (reference[1] ), while offering much greater performance, which explains why Microsoft opted to stick with 128-bit AES for something as performance-critical as disk IO.   The performance hit vs. encryption strength is debatable of course, however, it is noteworthy to reference that the U.S. Government (specifically the NSA) requires a minimum encryption level of AES-128 for Secret while classified Top Secret requires AES-256. It is a larger number after-all so to stair-step ""this is more important than that"" to even the lay-person it's no surprise this is being done. Regardless if it's worth it to the party protecting their secrets then it's up to them what level encryption to use against future, not just current, crypto compromising capabilities which could risk your sensitive information.  Edit:   It feels like there's a lot of misinformation and hearsay on the the topic without any hard facts to back it up.   Also, this, if you really want to get tinfoilhat about it.  Edit2: removed hyperbole"
crypto,343okn,latherus,1 point,Tue Apr 28 15:38:59 2015 UTC,Why not use something like VeraCrypt that's open source?
crypto,343okn,Feranor,1 point,Tue Apr 28 09:55:38 2015 UTC,"This is true, but that doesn't mean they have to switch operating systems. Windows is perfectly capable of being configured in a ""paranoid"" manner. Regardless, the article appears to be aimed at your average businessperson who is worried about data theft (e.g. loss of trade secrets), rather than the kind of people who are interested in anonymity."
crypto,343okn,gsuberland,3,Wed Apr 29 10:53:50 2015 UTC,"I think I agree with you, but I want to make it explicit that you can care about identity theft without being anonymous. That is, you can disclose your identity and try to prevent others from acting like you.  Like encrypting your disk to protect your online accounts from misuse in case of theft."
crypto,343okn,brinchj,2,Tue Apr 28 10:00:30 2015 UTC,"Windows is perfectly capable of being configured in a ""paranoid"" manner.   Yeah, no.  This is just wrong.    http://www.wnd.com/2013/06/nsa-has-total-access-via-microsoft-windows/ or get rooted while you update.  Also see: the number of backdoors and exploits in Windows over the years.  And backdoored Microsoft SSL cert lists.  You can set it up to be reasonably expensive to attack, but you can get much better security with other operating systems (with less effort too)."
crypto,343okn,theonetruesexmachine,1 point,Tue Apr 28 12:29:18 2015 UTC,Oh stop it. Those audits are probably made by people in the same little club of NSA Enthusiasts
crypto,343okn,Caminsky,-5,Tue Apr 28 14:50:06 2015 UTC,Microsoft
crypto,343okn,autotldr,4,Tue Apr 28 14:49:51 2015 UTC,"This is the best tl;dr I could make, original reduced by 98%. (I'm a bot)     If you want to encrypt your hard disk and have it truly help protect your data, you shouldn't just flip it on; you should know the basics of what disk encryption protects, what it doesn't protect, and how to avoid common mistakes that could let an attacker easily bypass your encryption.  If you use disk encryption, as soon as you successfully unlock your encrypted disk the encryption key is stored in RAM until you power your computer off.  Even when you use full disk encryption you normally don't encrypt 100% of your disk.     Extended Summary | FAQ | Theory | Feedback | Top five keywords: disk#1 Encryption#2 computer#3 use#4 attack#5  Post found in /r/technology, /r/privacy, /r/crypto, /r/POLITIC, /r/hackernews, /r/realtech and /r/betternews."
crypto,343okn,ilikenwf,1 point,Tue Apr 28 08:54:58 2015 UTC,"Bitlocker is a joke. There are now forks of Truecrypt like VeraCrypt available, and honestly, seriously, don't trust anything provided by Google, Microsoft, or Apple."
crypto,343okn,Jasper1984,0,Tue Apr 28 01:32:57 2015 UTC,"I think that being secure against the network is probably a bigger concern for computers that do not travel.  Also, do these encrypted-disk things make guessing harder? Instead of using passphrase as encryption key use:  secret = passphrase for _ in range(100): secret = hash(passphrase)   So that every attempt takes 100× calling the function hash, it could take much longer. (there is a way to outsource the hashing without revealing too.. one of the Ethereum blog posts, though i'd hate to not be able to use the device when not online)  Really, i think we need to have separate-security-oriented-computers. Most people will just run a flash app, or install a game on their main computer anyway. Temptation is far less if it is a separate one and they can just use their main one. Preferably such computers are stateless except for a single item like an SD card.  Infact, i'd worry about malicious SD cards.. Infact, SD-cards with wifi exist, and the SD card could ""secretly not delete"". Aswel as the SD card ""not knowing"" what it is storing, it also prevents communication other than storage with the SD card.  I am not 100% sure how good things like the RPi/Beaglebones/other(olinux) are, they might have some EEPROM/flash state for this. But this sort-of project is well within reach of open source.(Infact.. i might try my hand at it)  Btw, a lot of unknown unknowns for me, so perhaps i'd try communicating via USB, via arduino. Much fewer unknown unknowns about a serial line. Suppose that is the ""highest tier"", and infact, i am not sure what the probability of html-exploits are. (i.e. i might not even have html..)  Can go very far with ideas like that. (yet another idea is to have stuff like javascript done by a second computer that re-serves pages, and the recipient only has particular javascript to ""ajax that"")"
crypto,343okn,gsuberland,4,Tue May 5 21:21:02 2015 UTC,"Also, do these encrypted-disk things make guessing harder? Instead of using passphrase as encryption key use [...]   This is called a key derivation function (KDF), though your implementation is broken - I assume you meant to write secret = hash(secret). Common constructions are PBKDF2, bcrypt, and scrypt. Any FDE solution worth its bytes uses a KDF to derive the volume header key, which automatically makes cracking the password more difficult from a brute-force perspective."
crypto,343okn,Natanael_L,1 point,Tue Apr 28 13:27:33 2015 UTC,"The USB Armory device is very interesting, regarding this. Don't have one myself, but I'm hoping it will work out well for them"
crypto,345ril,i3ck,1 point,Tue Apr 28 14:58:30 2015 UTC,"I have mixed feelings about this. On one hand its a pretty cool solution to the password management problem. But there are two major issues I have with it.  The first, is there is no way to change a password in case of compromise. There are many ways that out could occur (someone gets a instant login/password reset link of yours (most smtp does not use encryption), server gets hacked, someone finds your seed).  You leak information about yourself. For dragnet attacks this is not much of an issue, but for targeted attacks, learning a username greatly helps.  My 2c."
crypto,341cn9,johnmountain,5,Mon Apr 27 15:12:17 2015 UTC,"The TOR network, an anonymizing service, was only recently compromised in a joint operation of international LEAs – labelled operation “Onymous” - that targeted illegal websites which are only accessible through the TOR network187 . Information concerning this and other attempts of intelligence, security and LEAs to weaken or break the anonymizing service provided by TOR suggest that the network cannot be trusted anymore.  187 - http://www.theguardian.com/technology/2014/nov/11/operation-onymous-flaws-tor   :O"
crypto,341cn9,ThePooSlidesRightOut,1 point,Mon Apr 27 19:34:44 2015 UTC,I like how they mention The Fappening.
crypto,341slk,hidden-markov,6,Mon Apr 27 17:09:50 2015 UTC,"It uses a variant of DGHV scheme over the integers with CNT11 ciphertext compression techniques. It allows to not encrypt all of the inputs of homomorphic functions prior to computation. For medium-large security level of 72 bits, the size of a compressed encrypted bit is about 5 Kb, while the size of expanded one (bit) is about 26 Mb. Compression can be done during encryption step only.  Might be feasible for some applications."
crypto,3440mq,Santabot,4,Tue Apr 28 03:04:56 2015 UTC,"This is a solved problem, both with NFC and QR codes, though the latter example isn't a commercial product.  The latter also requires the lock to have access to the network, something which is not necessary with a digital signature scheme.  I agree that this would be standard application of crypto and hence unlikely be patentable.   If you wish to pursue such an idea you would probably want to talk to an engineering consultancy to develop a prototype."
crypto,3440mq,silverforest,1 point,Wed Apr 29 19:58:10 2015 UTC,"well outside of being patented, is it still secure to use even though it is a known application? could you build a business upon a concept that's open like that or can it be managed to be secure against outside threats?  if so, that's the main component of the business (even if simple) then it is something that would not be extremely difficult to achieve?"
crypto,3440mq,Natanael_L,2,Thu Apr 30 05:39:47 2015 UTC,"Why wouldn't it be? Modern cryptography is built around Kerckhoffs' law, it should be secure even if the enemy knows the system. You just need to defend against physical tampering.   It you use NFC, you could also let an Android application act as the key to unlock through digital signatures, using a challenge-response protocol.  Then you can even do neat things like embedding a timestamp for when access was issued, list what it has access to and expiry times. Then you can let that person access those things even while everything is offline if those devices have accurate clocks. If the devices are online, you can even trivially revoke access at will."
crypto,3440mq,silverforest,2,Thu Apr 30 13:04:38 2015 UTC,"is it still secure to use even though it is a known application   Yes, that is a fundamental principle of modern cryptography.   then it is something that would not be extremely difficult to achieve   A cryptographic engineer would pick crypto primitives off-the-shelf and arrange them in an appropriate way (thereby designing a security protocol) to solve your problem. We prefer well tested off-the-shelf primitives because they have survived many years of scrutiny and have remained secure; hence we have high confidence the components making up our system are secure.  edit: If you yourself are a proficient software developer who wishes to dip into crypographic engineering, perhaps you should read this book from cover to cover. I would still however recommend hiring an experienced engineer or cryptographer."
crypto,3440mq,Natanael_L,1 point,Thu Apr 30 15:45:25 2015 UTC,"It sounds like what you need are digital signatures (which also is what Bitcoin relies on, not encryption). Can you describe the intended behavior a bot more?"
crypto,3440mq,Natanael_L,1 point,Tue Apr 28 06:49:27 2015 UTC,"Yeah, basically the system would be a lock that would connect to a central system that checks the ID of the person who has an app key or paper key which is encrypted to match the code on the lock. How could this be setup or who can I talk to"
crypto,3440mq,Natanael_L,2,Tue Apr 28 07:23:39 2015 UTC,Kerberos? What are the requirements which you need to be checked by the system?
crypto,3440mq,Natanael_L,1 point,Tue Apr 28 07:38:27 2015 UTC,"well, it will be a private enterprise so the idea is that the encryption needs to be solid, work independently and be commercially patentable and secure"
crypto,3440mq,convivialdingo,2,Tue Apr 28 13:35:45 2015 UTC,"Why patentable? Are you planning to use it in a commercial product you want to be unique? Do you think you can come up with something patentable, and do you really need patents?   And I meant functional requirements, as in what is your threat model and how should it behave?"
crypto,3440mq,convivialdingo,1 point,Tue Apr 28 14:14:49 2015 UTC,"Yes, I already have the business plan sketched out, know it could work in an industry that already exists. The encryption would be a necessary component of operation, the lynchpin of the service's value, and the most patentable part of the product itself. It is a physical product, but would need this system in order to be useful.  The threat isn't so much the issue, from a security standpoint, but the system should be able to work to scale as much as people use a redbox machine. It should be stable enough to ensure tickets created remain valid until completion of process.   Locking mechanism will create encypted key, output printed ticket, ticket redeemed to unlock."
crypto,3440mq,convivialdingo,2,Tue Apr 28 22:35:33 2015 UTC,"Doesn't sound like the cryptography part would be the novel patentable part. This sounds like just another day in the world of cryptography. Zero-knowledge proofs and stuff like it is where the cool stuff happens.   Anyway, with random strings for authentication to unlock they don't need to be encrypted, just unpredictable and sufficiently protected from spying. Look at existing session tokens as used for HTTP, for example. Using HMAC to create a token you track is equally effective, or by just generating random strings tracked by an authentication server, etc...  Digital signatures and HMAC are verifiable offline, signatures are resistant against hardware tampering to extract secret values if the private key sits on a protected server only (HMAC isn't, unless you've got tamper protected hardware, as it is a symmetric scheme). If the private key is on the device itself, they provide equal protection.   I'm pretty sure printed digital signatures are your best choice, probably using ECC for minimal size and Qr codes for encoding and quick scanning.  You generate a unique one-time string and a timestamp (and probably some more data), hash it. Then you can HMAC it and put the HMAC in the authentication database and print it in the Qr code, or you can chose to sign the hash, put the hash and signature in the authentication database, and put the hash and signature in the Qr code. On verification, you look for the value in the database, if it is there and correct then you flag it as used, then you unlock.  Edit: even that is massively overengineered, on a second thought..."
crypto,33z7pt,poopinspace,1 point,Mon Apr 27 00:48:42 2015 UTC,"Terminology is somewhat confusing in this article. By ""small private key"" they mean ""small private exponent""."
crypto,33z7pt,rya_nc,1 point,Tue May 5 16:41:45 2015 UTC,How is that confusing ?
crypto,33xksb,speckz,1 point,Sun Apr 26 16:38:03 2015 UTC,"So, I played around with using this to store production credentials for a project. For a while now, I've just been storing them in a local file on the prod server. Here's what I was thinking of doing with sneaker: - Pack file holding credentials - Commit to repo - Give key access to whoever is in charge of deploying But then I thought, isn't that just moving the problem? Because now, the user has to store their AWS access key on the server. Then again, those are easier to revoke if  needed. But if an attacker gets access to them and decrypts the file anyways, the credentials stored in there would have to revoked as well. Am I missing the point of a tool like this? Should it just not be used for this scenario? Is there a better way to do it?"
crypto,340s9x,kdfpass,2,Mon Apr 27 12:05:19 2015 UTC,Why not bcrypt/scrypt/one of the PHC finalists?
crypto,340s9x,bitwiseshiftleft,0,Mon Apr 27 15:30:52 2015 UTC,"Those would be good choices, but by using sha you can reason about the security (in number of bits) that is added. This program strengthens your key by 24 bits."
crypto,340s9x,disclosure5,3,Mon Apr 27 23:52:23 2015 UTC,"How do you figure? If iterating 224 times is considered ""24 bits extra strength"", how is that different to sals20/8 224 times (as per scrypt)?  More importantly, if you hardcode the value (24), how do prevent it deprecating, as opposed to being variable in strength like the mentioned solutions?"
crypto,340s9x,bitwiseshiftleft,2,Tue Apr 28 06:24:58 2015 UTC,I suppose in some sense SHA helps you to be more precise about how much security you're adding ... but it's also much lower per unit of your work than with scrypt or the PHC options.
crypto,33u3zk,HighCode,19,Sat Apr 25 17:22:51 2015 UTC,"The main gap is between the existing software and users.  We have the technology to have every communication be encrypted, but adoption is low outside of HTTPS."
crypto,33u3zk,Chandon,18,Sat Apr 25 17:35:11 2015 UTC,I'd add usability onto this. Current software is a bit baffling for people who don't understand crypto. Though projects like TextSecure have done a good job at lowering the barrier to entry.
crypto,33u3zk,flarkis,8,Sat Apr 25 18:10:26 2015 UTC,"Yes, usability, so much! So much so the EFF recently held a workshop on usability in crypto.   Here's an informal review of the literature on the subject."
crypto,33u3zk,silverforest,5,Sat Apr 25 18:45:20 2015 UTC,"I wouldn't be so quick to blame the ""users"" for not using apps with strong encryption. Most of such apps have been ugly as hell until recently, not to mention difficult to use and figure out how to set them up properly.  I would much rather put the blame on ""app developers"", who choose to make dozens and dozens of IM applications available on app stores, yet you could count on one hand the ones who have strong encryption.  When app developers choose to use strong encryption it's also much easier to get millions and millions of people to use strong encryption than if you try to convince every user one by one.  When there will be a dozen+ such apps to choose from, then we can start blaming the users for being so ignorant and foolish for not using those apps instead."
crypto,33u3zk,johnmountain,5,Sat Apr 25 19:19:33 2015 UTC,"I was going to write exactly what /u/Chandon said. And I'm not blaming the users. The problem is that cryptography is hard and complicated, and not well understood.   What we need is good libraries to make it easy to add secure crypto (we already have pretty good ones, so this is more an awareness thing), and most importantly we need good UI to make it easy to do things the secure way.   People tend to follow the path of least resistance. As long as doing things in a secure way is more work / more complicated / more resistance, it won't be widely used. What we need is UI and logic so that the path of least resistance is the secure way.  And in that light I think we're our own enemy, insisting that security must be perfect or be worthless. Some security is better than no security. Security with some situational workarounds are better than no security and no workarounds needed at all.   People generally say ""but if people think it's secure while they're potentially not, that's bad!"" - A good point, but for the most part people generally don't care. And when they do care, I'd argue that it's again a UI thing. The UI should clearly and accurately and and in an easy-to-understand manner convey how secure the current communication is.  We have all the building blocks, what we miss is a good way to represent it to normal users."
crypto,33u3zk,TheTerrasque,2,Sun Apr 26 11:08:00 2015 UTC,"Yeah, WhatsApp parterning with Open Whisper Systems is a pretty cool thing along these lines.  For classic complaints here, see 1999's ""Why Johnny Can't Encrypt"" and 2011's ""Why (Special Agent) Johnny (Still) Can't Encrypt""."
crypto,33u3zk,ldpreload,6,Sun Apr 26 03:06:03 2015 UTC,"I started pki.io because I got tired of rolling my own internal CA each time I changed company and wanted something that would work nicely in a ""devops"" environment. Not sexy, but with everything in the cloud, being able to TLS everything and do mutual auth is a pretty basic requirement.  Are you looking to start a project? :D"
crypto,33u3zk,zeroXten,7,Sat Apr 25 17:39:40 2015 UTC,"Some progress has been made in provably correct implementations, but it'd be great to have a whole library that did some useful crypto protocol in a provably correct way."
crypto,33u3zk,bitwiseshiftleft,3,Sun Apr 26 06:20:14 2015 UTC,"Could you identify a protocol you'd like formally developed and what you mean by ""correct""?  For example, miTLS exists and matches some definition of the words 'correct', 'protocol', and 'useful'."
crypto,33u3zk,tom-md,1 point,Sun Apr 26 19:43:18 2015 UTC,"Oh right, I'd forgotten about miTLS.  So yeah, systems like that."
crypto,33u3zk,bitwiseshiftleft,5,Mon Apr 27 03:07:58 2015 UTC,"Open Source Security Hardware. One of the most chilling parts of reading the Snowden documents was how effectively the security agencies attack software cryptographic implementations AND their fondness for persistent attacks in the firmware of SSD's and Ethernet ports. In the future, the only really secure implementations of cryptography will be in dedicated hardware systems. TrustZone, Global Platform and the like. I would think there will be an emerging demand for ""open source security hardware"" where researches can ensure there simply are not undocumented firmware vulnerable to re-programming. The German OpenPGP card is an interesting place to start."
crypto,33u3zk,prezvdi,3,Sun Apr 26 16:39:45 2015 UTC,"I'd say security, usability, and ubiquity are the primary gaps. For example TLS is ubiquitous but not really usable and arguably is a security nightmare.  Here is my entry in the monthly cryptography wishlist thread. Essentially I would like to see a seamless usable VPN client over SSH that provides IP mobility (long-lived connectivity).  Edit: Unless you've written some cryptographic/networking software before you're very unlikely going to make a solid breakthrough. I didn't respond to your previous post but if you're interested in applying or learning cryptography, I would suggest consider implementing a bignum library. Infact there's a book for doing that. While today the most prominent libraries are probably OpenSSL, GMP, Miracl (not free), etc. there is a journey of enlightenment writing one and is very much required for asymmetric crypto. Anyway those are my thoughts, I think it is perfectly fine to reinvent the wheel for the sake of learning."
crypto,33u3zk,cunttard,2,Sun Apr 26 00:01:10 2015 UTC,The 'gap' is developers who understand the cryptographic primitives enough to implement something useful.  They appear to be few and far between and this results in a lot of bad software.
crypto,33u3zk,samsonx,1 point,Mon Apr 27 00:06:07 2015 UTC,Security for the internet of things. big problem.
crypto,33u3zk,furyfairy,0,Sun May 3 03:17:58 2015 UTC,"Passwords. I can have as many 4k certs and pfs that I want, but the idea that the underlying keys to the kingdom are rooted is some string that I expect a human to remember is disappointing."
crypto,33scrg,moschles,3,Sat Apr 25 03:50:06 2015 UTC,"TrueCrypt includes a tool for running test vectors. I checked the test vectors you provided, the first, second and last passed, the others failed."
crypto,33scrg,lya6ns,1 point,Sat Apr 25 06:11:01 2015 UTC,"Aha thanks for this.  I have discovered where the confusion is.  To get the correct behavior from the sourcecode, the inputs must be carefully prepared by three steps.   All the 32bit words of the key must be reversed on word boundaries.   (some pedants calls these DWORDS) Each word of the key must be little-endianed.   Leave the plaintext intact, but little-endian each word, in place."
crypto,33lwvx,johnmountain,14,Thu Apr 23 16:18:08 2015 UTC,"Note that quantum-resistant algorithms need not be quantum, that is to say, anyone with a classical (regular) computer can run the scheme, but even an adversary with a quantum computer cannot break it.  How breaking is formalized comes from complexity-based assumptions: Classically, we look for problems that are hard for BPP (randomized, polytime) computers to solve.  Problems such as factoring, discrete log, EC discrete log,... are believed to be hard, so they serve as a good foundation for building schemes resistant to BPP-attackers.  Unfortunately, most of these are known to be solvable by BQP computers, so a BQP (quantum) attacker could break these cryptosystems.  In order to make quantum-resistant crypto, we must start with assumptions that we believe are hard for BQP computers to solve.  Lattice problems are a hot topic of study -- for other reasons beyond their anti-quantumness -- and is one such candidate.  Furthermore, many secret-key constructions (AES, various hashes,...) are also believed to just be quantum resistant since there isn't really any better attack than a brute force (which quantum algorithms have a quadratic advantage in).  Finally, there is research into quantum crypto that require quantum machines to run.  These are quite interesting as they get new powerful assumptions, but the downside is we have no quantum computers to run them on.  I'm not sure if this is within the scope of this project that Tanja is running.  A fun aside: she's married to djb, who has a nice book on postquantum crypto."
crypto,33lwvx,DoWhile,3,Thu Apr 23 16:42:13 2015 UTC,DJB already has something better than lattice-based crypto apparently (which has been found vulnerable to a few attacks lately anyway):  http://binary.cr.yp.to/mcbits.html
crypto,33lwvx,DoWhile,1 point,Thu Apr 23 16:55:28 2015 UTC,"I suppose for a practical program, one would want to focus less on the lattice-based approaches and more on others... there are plenty of good candidates that are not lattice-based (McEliece-style and multivariate systems for post-quantum crypto are certainly very promising and can have way more applications beyond resisting quantum attacks).  But from a theory standpoint, lattice-based crypto is pretty damn good for other reasons (FHE, obfuscation,...) assuming it doesn't all fall apart."
crypto,33lwvx,darkmighty,1 point,Thu Apr 23 17:02:59 2015 UTC,"I don't know much of this area, but isn't lattice crypto equivalent in some way (or transferable) to coding crypto? I mean, linear codes are just basis vectors of a lattice on a finite field. If you take it's periodic extension you get a lattice over Z."
crypto,33lwvx,DoWhile,2,Sun Apr 26 16:22:04 2015 UTC,"It's loosely related, in particular with learning algorithms.  The difficulty is in finding a lattice point close to a rational point.  Perhaps the assumption that would be most relevant to you would be LWE.  It can roughly be thought of as solving Ax=b+epsilon where A and b are public, and x and epsilon are secret, where epsilon is a small error vector, A is a random (square, if you want) matrix mod q, and x and b are vectors.  It's the epsilon that makes it hard because otherwise you can just use Gaussian elimination."
crypto,33lwvx,darkmighty,1 point,Sun Apr 26 16:39:31 2015 UTC,"That's very interesting, thanks. Crypto is not my field (I'm EE undergraduate), but those types seem relatable enough for me to want to learn a lot about it."
crypto,33lwvx,cedricvanrompay,1 point,Sun Apr 26 20:29:32 2015 UTC,Could you please cite some of the attacks against lattices that you are mentioning (apart from Lenstra-Silverberg which has already been cited) ?
crypto,33lwvx,bitwiseshiftleft,1 point,Fri Apr 24 07:40:57 2015 UTC,"I don't know about ""better"".  The public keys are 221kB for a supposedly 128-bit secure system, and who knows whether that supposition will stand up to analysis?  I suspect that systems based on ideal lattices will do reasonably well, once we can figure out which ones are actually secure."
crypto,33lwvx,RuddiV,2,Thu Apr 23 17:10:12 2015 UTC,"Are we any closer to understanding the security of ideal lattices other than: ""We currently don't know any better algorithm for ideal lattices than for regular lattices.""?"
crypto,33lwvx,DoWhile,2,Thu Apr 23 22:11:36 2015 UTC,"We do know better attacks for certain lattices with symmetry as Lenstra-Silverberg showed last year at CRYPTO.  Their attack is a generalization of the Gentry-Szydlo attack on NTRU lattices.  Beyond that I don't have much of a clue, my lattice cryptanalysis is rusty..."
crypto,33lwvx,RuddiV,1 point,Fri Apr 24 00:33:42 2015 UTC,"Perhaps I should specify, when I say ""ideal lattices"" I refer to the  lattices with symmetry in which we have reductions from worst case lattice problems (in the given lattice) to the ring version of SIS and LWE (i.e., not cyclic lattices as used in NTRU)."
crypto,33lwvx,bitwiseshiftleft,1 point,Sat Apr 25 11:04:19 2015 UTC,I actually don't know.  Need to brush up on my lattices...
crypto,33lwvx,cantbearsed,1 point,Thu Apr 23 22:36:52 2015 UTC,computational complex problems explained in a nice video https://www.youtube.com/watch?v=YX40hbAHx3s
crypto,33lwvx,RuddiV,2,Thu Apr 23 21:35:12 2015 UTC,"It is a really nice video for a very basic introduction to computational complexity, but I don't see the reason for posting it in this thread?"
crypto,33lwvx,cantbearsed,2,Thu Apr 23 22:08:57 2015 UTC,"it was for anyone who might not be so well versed on BPP/BQP (partly in response to DoWhile's post, but also generally on the subject)."
crypto,33ngn0,petester,16,Thu Apr 23 23:18:02 2015 UTC,"The practical attack is this:  Let's say I know the first few pieces of plaintext. You may well say ""But the whole point of encryption is that an attacker does not know plaintext"", but it's often wrong. In the case of an online banking website for example, the majority of data downloaded is exactly the same HTML, or static .gif files every time.  With that known, you can XOR the crypto text with the known plaintext, and come up with a number of outputs of rand(). At that point I will refer you here:  http://cryptopals.com/sets/3/challenges/23/  If you can obtain 624 such outputs, you can identify the pattern rand() is using and create it for yourself, which in turn allows you to start reading all the ""unknown"" cipher text."
crypto,33ngn0,disclosure5,5,Fri Apr 24 03:31:32 2015 UTC,"Also if the file is ASCII English text, I would expect rand() or random() to still be breakable without known plaintext, depending on the particular implementation.  Most implementations use either a tiny key space (can brute-force) or do very little mixing (can break with a language model)."
crypto,33ngn0,bitwiseshiftleft,1 point,Fri Apr 24 18:40:28 2015 UTC,Thank you for this reply!
crypto,33ngn0,silverforest,9,Fri Apr 24 03:50:16 2015 UTC,rand() is unlikely to be a CSPRNG. It also has a small seed (32-bit). That's where your main weakness lies with this.
crypto,33ngn0,GahMatar,5,Thu Apr 23 23:26:14 2015 UTC,"So much this!  rand() implementations are optimized for speed. So with most implementation, it's reasonnably quick on a modern PC to just try all 4.3B seeds and just brute force it.  There's one exception here... OpenBSD's implementation of rand() is not standard compliant as of december 2014 (don't know if out in a release yet) and returns a CSRNG random number instead.  However it's not deterministic, so you're better store the value! Strength wise, it should be comparable to using ChaCha20 with random parameters unless the compatibility function srand_deterministic() is used."
crypto,33ngn0,marklarledu,5,Fri Apr 24 20:04:44 2015 UTC,"The security of this lies in the entropy of the rand function which I don't believe is considered cryptographically secure. Both the algorithm and seeding mechanisms are what you'll want to look at.  Just curious, in this scheme where do you store the key so that you can decrypt the cipertext later on? Are you imagining a system where you seed two separate machines with the same seed so that they produce the same keys in sync?"
crypto,33ngn0,silverforest,1 point,Thu Apr 23 23:55:35 2015 UTC,"I don't really know a lot about cryptography, I was just screwing around with this.  No plans for an actual implementation, besides maybe static file storage or something.    Really, I was hoping to maybe get some insight on how to go about using whatever exploit there is against the random number generator or whatever."
crypto,33ngn0,atoponce,2,Fri Apr 24 02:14:14 2015 UTC,"Depends on the random number generator, but in this case it doesn't really matter because the seed space is small enough to bruteforce. If you don't wish to bruteforce, most implementations use weak PRNGs. LCGs for example are trivially crackable. Similarly with LFSRs. The Mersenne Twister too is crackable with enough output."
crypto,33ngn0,Natanael_L,5,Fri Apr 24 09:19:13 2015 UTC,"If the key is not generated from a true random number generator, then it's not the one-time pad."
crypto,33ngn0,GahMatar,0,Fri Apr 24 03:03:06 2015 UTC,Yeah. I'm trying to understand why rand() is not 'true random' and how that can be exploited.  I'm looking forward to figuring this out.
crypto,33ngn0,phyzome,2,Fri Apr 24 03:56:57 2015 UTC,"Because it collects a small amount of fairly predictable data in its ""entropy pool"" and uses a weak algorithm to produce the random numbers resulting from it. It also happily gives you more bits of data out than there's bits of entropy, which ""seals the deal"" of it not being an OTP (it means the bits in the key MUST be correlated, when OTP says they MUST NOT be correlated)."
crypto,33ngn0,qnxb,1 point,Fri Apr 24 07:52:10 2015 UTC,"Rand doesn't even do that much. It's ""state"" is a 32-bit number and it cycles over using some variation (implementation specifc) of an LFSR."
crypto,33ngn0,bitwiseshiftleft,3,Fri Apr 24 20:51:19 2015 UTC,This fails in all the ways OTPs do in practice.
crypto,33ngn0,infodel,4,Fri Apr 24 01:50:28 2015 UTC,"You've essentially described ECB where the block cipher algorithm is just XOR.  If your keys are always at least as long as your plain text, and you never reuse your keys, and your keys are truly random, you're fine.  This probably fails on all 3 counts.   OTPs long enough to be useful are difficult to transfer. If you can securely transfer the OTP, you can probably transfer the message itself in the same secure manner. Because OTPs are difficult to transfer and generate, there's a very big temptation to reuse them. If you use it even twice, you can begin recovering the messages. rand(3) is not a good random number generator. To properly make an OTP, you need a true random stream. Differential timing between radioactive decays, phase differences between multiple free-running ring oscillators, or thermal noise from reverse-biased transistors are all examples of suitable random sources. glibc's rand(3) isn't."
crypto,33ngn0,monty845,4,Fri Apr 24 00:33:04 2015 UTC,"It's not ECB.  It's a stream cipher, and would be an OTP if rand() were actually random.  The rest of the comments are correct, though."
crypto,33ngn0,qnxb,1 point,Fri Apr 24 18:38:37 2015 UTC,How would somebody go about breaking the code based on the non-randomness of rand()?
crypto,33ngn0,autowikibot,4,Fri Apr 24 02:15:20 2015 UTC,"If you are asking these kind of questions and are interested in crypto,  I would suggest looking at the matasano crypo challenges found at http://cryptopals.com/"
crypto,33ngn0,SAI_Peregrinus,1 point,Fri Apr 24 02:49:21 2015 UTC,I've worked the first set there. I wish I had more time to do more!!!
crypto,33ngn0,Natanael_L,2,Fri Apr 24 02:54:20 2015 UTC,"Unless your doing something to add additional entropy, every part of the key will depend on your initial seed value. If the message is longer than a few words, you could just try every possible seed, looking for a plain text result that isn't gibberish."
crypto,33ngn0,TheTerrasque,1 point,Fri Apr 24 02:36:30 2015 UTC,"rand(3) repeated arithmetic on the 32-bit seed given to srand(3), meaning you'll never have more than a 32-bit key. rand(3) is not a proper key stretching algorithm."
crypto,33hn9x,cyankali,10,Wed Apr 22 16:26:23 2015 UTC,"Can anyone explaining to me what Hemlis tried to achieve that TextSecure/Signal don't offer yet? It seems they wanted to send all traffic through their own server, but iirc TS does that too - to some extent since a relatively recent version."
crypto,33hn9x,dd_23,6,Thu Apr 23 07:57:10 2015 UTC,"The project was launched when TextSecure was still relatively obscure and did not offer cross-platform communication. Hemlis was meant to be a product that was simple and pretty enough to be adopted by the broad masses of users (who simply want a product that ""just works"") while still being secure. TextSecure still depends on Google services (Play Store/GCM, although they plan to implement web sockets in the future). Then again Hemlis would not have been open source as it seems, so you'd still have to trust a third party anyway. I agree that the recent versions of TS/Signal would have made Hemlis kinda obsolete, but it's just disappointing to see this all getting scrapped after they have raised a ton of money. Apparently all of their bitcoins got stolen at some point (worth $30,000) - WTF?"
crypto,33hn9x,jus341,2,Thu Apr 23 08:25:19 2015 UTC,MtGox?
crypto,33hn9x,digititus,6,Thu Apr 23 15:13:34 2015 UTC,TL;DR - Vaporware from start to finish. But nice guys all the same.
crypto,33hn9x,bugdave,3,Thu Apr 23 11:33:53 2015 UTC,What have learned today? Don't judge a crowdsourcing project by it's video.
crypto,33hn9x,disclosure5,9,Mon Apr 27 18:48:20 2015 UTC,"As much as I hate seeing the demise of an open project with potential:   I personally had other issues as I got kidnapped by the swedish government and locked up for my work with another project    He was not ""kidnapped"". He was arrested."
crypto,33hn9x,jus341,5,Thu Apr 23 01:14:15 2015 UTC,"That project was The Pirate Bay, in case anyone is curious."
crypto,33hn9x,volcanoclosto,1 point,Thu Apr 23 05:11:43 2015 UTC,so he was kidnapped by the police
crypto,33hn9x,PlaceOfFear,2,Thu Apr 23 21:57:46 2015 UTC,Give me a break.
crypto,33hn9x,samsonx,1 point,Thu Apr 23 12:15:17 2015 UTC,I can't load the website at all
crypto,33hn9x,lya6ns,6,Wed Apr 22 20:29:23 2015 UTC,"Here is the blog post for anyone having trouble loading the page.   A while back we started thinking about what to do with the issues that the Snowden leaks revealed to the world. My friends, Linus and Leif, are two of the best people I know. We all have our hearts in the right place and we all have skills and ideas that can be put into good use.  We decided to put our minds and skills together and try to make an encrypted messaging app. We thought about the issues, the things noone seemed to be trying to solve. The tech community had solutions – but only focused on the people who understood the problems. The non-tech communities didn’t care. A messenger that catered to the common users but still understood the political issues was a thing we all felt was missing. We started a crowd-funding campaign, both to see if there was an interest but also to raise enough money to actually get time to do this. We were thinking we might get about 50.000 USD in a few months. In about 48 hours we had three times that money, and we decided that we needed to stop asking for money, it was more than we knew what to do with.  So we had about 130.000 USD after all fees was paid. And then we lost some more (like 30.000USD) because of a bitcoin wallet that got stolen from our bitcoin supplier. But still, a lot of money. We decided to hire some people to help us out with the things we are not experts in. The process was slow and hit with lots of realizations of that certain things would not work. The ideas were too complex and sometimes just too expensive. We had a lot of money, but far away the same amount (we’re talking millions or billions) that our competitors had access to. Just think – verification by SMS for all of the potential users would be millions of dollars even at a few cents per SMS. And if we didn’t verify by SMS it would be hard to invite users and bootstrap the usage. It’s a lot of these things that we didn’t understand until quite far in to the process.  In the middle of it all one of our team members got a kid and had to focus on that of course. I personally had other issues as I got kidnapped by the swedish government and locked up for my work with another project – The Pirate Bay. In the middle of the kidnapping, my father died. I had no way of working on anything, and I’ve had a hard time with how I personally need to handle things. This project – as well as the other projects I’m involved in – was hit massively by my absence. And they still are, since I have not been able to get 100% on my feet yet. I’m getting there but just as with other things, it takes a lot of time.  So, we had been working on this project for a long time with all of the set backs we had. And a few weeks back we started talking. What are our results? We have spent the money (and if we paid for all the work and time that we and other people put in it would have been many times more). We have a decent app for IOS and Android. But it’s still not finished and there are other things that are not software related that’s missing and will take lots of more time. And would require much more money both for time but also for legal, hardware, structures etc.  But the bad thing – or rather good if one tries to stay positive – is that our competitors have been good at fixing issues. And we have lots of new ones. They’ve had more progress and financial support so they could speed up their process to the level that they’re now really good. Better than our messaging app could become right now. Ok, they’re missing on features but they have the ability and cash to resolve those issues. And our goal was always to ensure that the everyday users would be protected. Signal and other apps are doing that quite well, with good UI and UX compared to what was the case when we started.  We decided that we could go two ways. We could ask for more money (a lot), either from the community or some investors. Or we could close down. Since we already got money from the community with way too little to show back from the expectations that felt wrong. And we don’t think that it would be a good idea to ask investors for money since we’d lose control over the project. So in the end, closing it down felt like the least bad thing to do.  I know a lot of people will be upset. But timing is key, and there’s no point in spending more time just because we feel we dropped the ball. Life gave us curveballs and we were probably way too naive in entering this project. I don’t regret it though, but right now it’s stressing me (and the other guys) quite a bit, because we really don’t want to disappoint the community. But then again, we also wouldn’t really contribute. And we still lack funds if we decide to go ahead. So it’s a catch 22. We tried looking for someone to merge our project with, but didn’t really find anyone. And we’re not sure what to do with the things we’ve created – part of it might be useful for someone, other things (that took a lot of time to create) are things we realized would not work in larger scales.  So I’m sorry that we’re closing down, but it’s the only reasonable thing to do. Sometimes it’s better to just take the bull by the horns than to try to ignore it. And move on to the next thing and try to fix that. I’m personally trying to influence people and politicians to make sure we don’t need systems like Heml.is. We should be protected by the governments instead of trying to protect ourselves from them. It’s a multi-angle attack needed, technology, political work and transparency."
crypto,33hn9x,stouset,10,Wed Apr 22 21:50:39 2015 UTC,"TL;DR seems to be, ""We had a bunch of amazing ideas but no expertise in the subject matter. It turns out the problem was way harder than we realized, which is why nobody's done it yet. Oh, and we spent all the money figuring that bit out.""  Unsurprising."
crypto,33eild,P-e-t-a-r,8,Tue Apr 21 21:42:17 2015 UTC,"“The only difference between a front door and a back door is that the NSA will have to take your house and turn it around,” said Adi Shamir, co-inventor of the RSA algorithm and a professor at the Weizmann Institute in Israel."
crypto,33eild,DoWhile,1 point,Tue Apr 21 21:51:07 2015 UTC,"I disagree though.  Lets say I am managing a some group.  I give them all laptops with a FDE.  On this FDE I configure it to export all data encryption keys to a secure sever.  I notify users that data is accessible by management.  This is what you could consider a front door.  A concept not far from event occurring in many business environments today.  Now lets say I work at that group and was tasked to install FDEs for all employees, without the knowledge of management I configure all devices to decrypt with a second master key.  Using this key to gain access to other information after the devices are used.  This is a backdoor.    I think there is a pretty big difference between the two, the definition of what parties are intended to have access to the information.  The question is really should the government be granted that access?  If so can they maintain the security of that access?"
crypto,33eild,xJoe3x,0,Wed Apr 22 16:16:02 2015 UTC,"The difference is that in your FDE example, you would be happy with ""perfect"" FDE, where even the largest computers in the world would require more time than is left in the universe to crack the encryption.  You would accept that, because you have the key.  If you had some good reason to get the employee's laptop back and decrypt it, you'd be able to do what you need to do.  That's a genuine ""Front Door"", because making FDE more secure doesn't impact its effectiveness.  You're keeping the company secure while allowing access if something goes wrong like the employee forgets their password.  If, on the other hand, you wanted to make sure that the FDE wasn't very good so that you could afford the resources to decrypt it every night, then you're in a very different situation.  That's a ""Back Door"" because it limits the goodness of the FDE that can be utilized.  Unfortunately, it might limit the FDE to one that ordinary criminals can crack easily.  That would lead to evildoers seeking to steal your company's laptops to get the tasty secrets off them.  In this case, you've made the company overall less secure.  The US seems to be suggesting a ""Back Door"" even with their key escrow schemes.  They want to decrypt all the content in transit, so they can search through it to find a good reason to investigate folks.  That can only be done, even with key escrow, if they can use all the keys all the time.  It's completely different that the good reason construct of a Front Door, where using the keys comes after suspicion rather than before.  In practice, they can only accept shared key escrow schemes where their part of the key is sufficient to make it practical to crack all the encryption with the computers they have (which are significant)."
crypto,33eild,WRSaunders,1 point,Wed Apr 22 18:39:37 2015 UTC,"Weakening the implementation is not the only way to enable alternate authorization.  It certainly is a way, but far from the only way.  It can be just as secure as any ""front door"" access.  The ""goodness"" is not the differentiating factor.  The only real difference is should they and I think the answer is no."
crypto,33eild,xJoe3x,1 point,Thu Apr 23 02:00:27 2015 UTC,"Yes, it could.  However, the proposals to change iPhone encryption, for example, are proposals to weaken the implementation.  You could be right that even a ""good"" implementation proposal should be rejected.  I'd like to at least see one on the table before debating that."
crypto,33eild,WRSaunders,1 point,Thu Apr 23 14:36:24 2015 UTC,Agreed
crypto,33eild,xJoe3x,-1,Thu Apr 23 14:53:42 2015 UTC,Secrets tend to leak. That one secure way can turn into an open floodgate literally overnight.
crypto,33eild,Natanael_L,0,Thu Apr 23 05:12:01 2015 UTC,"Many, if not most, do not leak.  It is certainly possible to keep such information secret and it is also possible to have a plan in place to fix issues if it did leak."
crypto,33eild,xJoe3x,8,Thu Apr 23 12:34:29 2015 UTC,"Only because the government wants to push the ""debate"" for that long - as in ""we'll push it until you agree with us"". It's the same with their idea of ""balance"" between privacy and national security. Balance = total surveillance of everyone.  From what I've seen, from the cryptographers' point of view, the debate is already over."
crypto,33eild,johnmountain,2,Wed Apr 22 13:16:20 2015 UTC,They will never get a front door to the currently audited version of TrueCrypt.  It works.  It's secure.  The NSA cannot crack it.  There are  other versions of other software out there that do the same.
crypto,33eild,tboonpickens,1 point,Wed Apr 22 15:22:22 2015 UTC,"adding strong encryption to their devices, while others have called for some version of a back door that would give law enforcement access to encrypted devices and communications when it’s legally necessary   Isn't it already ""legally"" necessary without due process? They just go to a ""secret court"".  They tend to overemphasize criminals as some thuggish lout with ""god' tatoo'ed across their chest, but the actual criminals can look just like everyone else. I have a feeling they just want to do lawn-chair law enforcement. Click on some buttons, trade private pics, and call it a day.  As an NSA analyst has said, the government actions in terms of cyber-espionage are unidentifiable from criminal actions. (i.e. Acting 'criminal' or 'breaking the law' is their 'encryption')"
crypto,33eild,rflownn,0,Tue Apr 28 11:19:07 2015 UTC,"There's really two different ""debates"" going on here.  Sure, various secret sharing algorithms have already been invented whereby either the user or a quorum of 3rd parties could decrypt data.  There may still be future research directions into better and more efficient ways of implementing such an algorithm.  The other debate is SHOULD we share our encryption keys with anyone else.  Yes, for purposes of law enforcement there are legitimate use cases where being able to decrypt data of suspects would lead to criminals being caught that otherwise may escape justice.  However, that need has to be weighed against the public's need for security and privacy vs. the holders of the other parts of the decryption keys - whether they be legitimate representatives of law enforcement with a warrant or hackers who have managed to procure the keys for their own use.  Security vs. Criminals / Privacy vs. the Government/ Security vs. Hackers.  It's a multi-faceted problem."
crypto,33eild,thatmorrowguy,1 point,Wed Apr 22 16:28:23 2015 UTC,"No matter if they ban all non-backdoored encryption, criminals WILL continue to have access to secure cryptography no matter what. truecrypt, cryptsetup, whatever it is, IT CANNOT EVEN BE PROVEN SOMEONE IS USING IT. Even if you snatch up their hard drives, you dont know if its random data, or full of child porn, and this is with just cryptsetup this is possible  TLDR the backdoor/frontdoor will only affect stupid people who try to follow the law."
crypto,33exaq,Xairo,4,Tue Apr 21 23:37:45 2015 UTC,"Yes, trivially.  But yes you're right in that this is not the right threat model for asymmetric crypto, so there's no point belaboring this.  However, if you DO want to get theoretical about it, if an unbounded adversary gets a hold of your public key, you lose.  For example, even just an NP-oracle can be used to extract a secret key from a public key in any reasonable asymmetric scheme."
crypto,33exaq,DoWhile,3,Tue Apr 21 23:44:25 2015 UTC,"More specifically, reasonable key exchange protocols are likely to be quantum resistant if the adversary doesn't known your public key.  If he does, then you fall back to classically resistant."
crypto,33exaq,bitwiseshiftleft,1 point,Wed Apr 22 17:20:39 2015 UTC,"For example, even just an NP-oracle can be used to extract a secret key from a public key in any reasonable asymmetric scheme.   That is why i got this idea. We once talked about RSA but it was only one time and the course not about cryptography. Thanks for the answer."
crypto,33exaq,ctz99,4,Tue Apr 21 23:56:05 2015 UTC,This doesn't work in practice for most public key cryptosystems.  eg:   RSA - https://eprint.iacr.org/2014/728.pdf ECDSA/DSA signatures leak the public key (or some solutions for it) in each signature.
crypto,33exaq,samsonx,1 point,Thu Apr 23 18:16:04 2015 UTC,"Makes sense. But i never thougt of using signatures for my case. I was thinking of meeting in private to exchange keys. Then get new keys after some time. Of course if your computer is compromised they can send fake messages. But if someone got access to your computer they could fake your signature too. It's absolutely unpractical, and would maybe be usefull for only 1 or max 2 people. I just was curious if it would be more secure.  When i think about it, just using a symmetric cipher and exchange a passphrase should do the same."
crypto,33exaq,ctz99,1 point,Thu Apr 30 10:24:54 2015 UTC,"Re ECDSA leaking the key, as far as I'm aware this only happens if the signature was not created correctly.  For example a random number is used when creating an ECDSA signature, if the same random number is used more than once then the private key can be leaked due to duplicate R values in the signature.  This is why the random number is not reused and as such the key is safe."
crypto,33exaq,mitchellrj,1 point,Mon Apr 27 00:10:31 2015 UTC,"You're confusing the private key with the public key here.  Properly made DSA signatures don't tell you anything new about the private key, but they do tell you almost everything about the public key."
crypto,33fap3,GrayCipher,2,Wed Apr 22 01:28:50 2015 UTC,Can you give an example? Your question is unclear; you'd either need a key the same length as the message (like a one-time pad) or you'd have something trivially crackable the way all shift ciphers are.
crypto,33fap3,phyzome,1 point,Wed Apr 22 02:44:56 2015 UTC,"Sounds like the roman disposition cipher version of XORing a secret and public message to generate a key, to then distribute with the public message as the ""ciphertext"".   If the dispositions are unknown to the attacker, it is secure as any message is equally likely."
crypto,33fap3,Natanael_L,1 point,Wed Apr 22 07:57:07 2015 UTC,"This system would be like a OTP, with a key the length of the message. First you would come up with a secret message you want to send to the other person (""The quick brown fox""), then you come up with a less than secret message that you want eavesdroppers to be able to read (""The slow green frog""), you take this second message and shift it down three letters so that it becomes the public message (""Wkh vorz juhhq iurj""). The key is calculated by figuring out the shifts required to transform the public message, into the private message. The only reason for performing the caesar shift is to provide a decoy message that may satiate the curiosity of your eavesdropper, it could easily just be a a random inconspicuous phrase."
crypto,33fap3,uranusaurus_rekt,2,Mon May 4 17:24:46 2015 UTC,"This is equivalent to publicly sharing a key, and then privately communicating the encrypted message. Its not clear to me that the shifting of the public message really does anything useful. It seems like it would be equally as secure to calculate the offsets for each character in the secret message to arrive at the unshifted public message, and just share that.  There is no method other than randomly guessing to derive the secret message from the public message alone: the public message is not derived from the secret message. It doesn't even provide a mechanism to verify that a random guess is correct. You would just be comparing two unrelated english sentences to each other.  So you are right, this isn't practical at all. Without consideration of the shifted secret message being discovered, this is the same as having no public message, and just sharing the secret message privately. Or just using the predetermined shift used to encrypt the public message in your original description to shift the secret message, and share that privately."
crypto,33fap3,silverforest,1 point,Wed Apr 22 08:16:33 2015 UTC,"So if I understand you publicly your message is (c₁, c₂).   You can recover the key k with some function f and a secret s for which key k = f(c₁, s).  This key then can be used with encryption scheme E to recover the actual message m = E-1(k, c₂).    If I understand correctly in your case your function f is a shift of all letters of s down the alphabet. This is only 26 probabilities and would be easy to bruteforce by hand.  If otherwise it is something else like shifting every single character in a secret s by different amounts, this is 26length of s possibilities. If s is English (or other natural language) it might be possible to reduce the search space. The longer the length of s the better. Similarly for xor as Natanael_L suggests."
crypto,33c0mg,zappso,5,Tue Apr 21 08:10:27 2015 UTC,Yup: https://idemix.wordpress.com/ is one of the methods.   There's other potential methods too like ring signatures and various forms of Zero-knowledge proofs. The one above is the one I believe is currently closest to being practical.
crypto,33c0mg,Natanael_L,1 point,Tue Apr 21 08:58:11 2015 UTC,"Thank you for your reply.  I don't want to include a trusted third party so an ID Mixer won't work for me; such a party leaves a possible trail back to the user.  I don't think ring signatures can help me, but I'm still considering them.  Zero-knowledge proofs seem closer to what I require, and I'm looking into them further."
crypto,33c0mg,Natanael_L,3,Tue Apr 21 14:32:49 2015 UTC,"Your payment server would be the trusted third party from the perspective of the login server. No external entity. And the protocol doesn't need the credentials issuing server to be online during auth. The auth algorithm reveals nothing about who the user is to nobody, the credentials issuer have no identifying capabilities (in the default configuration)."
crypto,33c0mg,phyzome,2,Tue Apr 21 15:08:27 2015 UTC,"Sure! I think it can be as simple as the payment processor creating a signed bearer token saying ""the holder of this token paid on such and such a date, and here's a random string to identify it."" (They should not use the transaction ID if you don't want it to be traceable.)  Then the user hands you the token and you provide login credentials in exchange. Record the random ID in your database so you can know which login goes with which transaction -- you'll know if someone else gets their hands on the token and tries to reuse it. You might also allow the token to be used only within a certain time window after the date on the token, or maybe not."
crypto,33c0mg,Natanael_L,1 point,Tue Apr 21 12:43:01 2015 UTC,"Hmmm.  I'd considered this.  It leaves a possible trail, using the random string, through the payment provider and back to the user.  It also requires the cooperation of the payment provider.  I'll update my question above."
crypto,33c0mg,bitwiseshiftleft,3,Tue Apr 21 14:19:13 2015 UTC,"Look into Chaumian blinding, by the way."
crypto,33c0mg,Natanael_L,2,Tue Apr 21 15:10:34 2015 UTC,"Chaumian binding is probably the way to go on this.  Here's an easy-ish mockup: user includes blinded message in payment.  You blindsign it with a key dedicated to that purpose, whose public key is on your website or bitcoin address or similar (you need to use the same key for all users so you can't link sig <-> user).  Later on, user exchanges signed message for whatever credentials he needs, and you store the message in a database so you won't accept a replay of it."
crypto,33c0mg,bitwiseshiftleft,1 point,Tue Apr 21 17:00:34 2015 UTC,OP might be interested in the Chaumian blinding implementation in OpenTransactions.
crypto,33c0mg,bitwiseshiftleft,1 point,Wed Apr 22 00:22:35 2015 UTC,"Great stuff, I've seen OT before.  I've also looked into other cryptocurrencies like BitShares and ShadowCash - but I want to make things easy for my users (it's going to be hard enough for many people to just get their heads around Bitcoin).  I need something reasonably simple, although I will certainly look at OT's Chadian blinding implementation."
crypto,33c0mg,bitwiseshiftleft,1 point,Wed Apr 22 12:43:58 2015 UTC,"I'm not sure I follow.  How do I know the user has paid?  What do you mean ""user includes blinded message in payment""?  I'm going to have a bunch of payments to my Bitcoin address... I don't want to know which transaction belongs to a particular user, as long as it's one of them... I'll then issue credentials to that user."
crypto,33c0mg,bitwiseshiftleft,2,Wed Apr 22 12:34:03 2015 UTC,"You have an RSA signing key.  It can be weak (1024 bits) since it's only protecting signups for your service, but in absence of a reason to make it weak, just say 2048 bits.  You publish it on your website. Client chooses a random string, say 256 bits, hashes it and pads it out to your key size according to PSS signing standard.  Call the padded token m. Client chooses and stores a random r, and includes B := mre mod N in the Bitcoin transaction, where e is your public key's exponent (probably e=65537) and N is its modulus.  Note that B is uniformly random mod N, regardless of m. You publish Bd = md r on some bulletin board.  It is also uniformly random mod N, and uncorrelated to m.  Client downloads it.  If there are lots of these, you can index by the client's bitcoin wallet id; otherwise, client can just download all of them. Client divides by r to compute md, a valid PSS signature.  This is called a blind signature, because nothing that you saw is correlated at all with m. Client connects to your server by TLS, and sends you md.  You check the signature, put it in a database so you won't accept it again, and return any type of login credentials.  Could even by anonymous login credentials for something like idemix. Client installs login credentials and logs in."
crypto,33c0mg,bitwiseshiftleft,1 point,Wed Apr 22 17:08:18 2015 UTC,"Thanks very much for this.  I'm looking into how I can make this easy for the user.  I can do most of this in Javascript in the browser, although a specially crafted Bitcoin transaction is going to be difficult for most users.  Is there a similar protocol where a user can buy a token with Bitcoin in the normal way, then blindly exchange that token for login credentials?"
crypto,33c0mg,bitwiseshiftleft,1 point,Thu Apr 23 00:39:24 2015 UTC,"Sorry, I'm not really a bitcoin expert..."
crypto,33c0mg,ralpo08,1 point,Thu Apr 23 01:00:24 2015 UTC,"OK, let's say the user simply buys a token from me with Bitcoin (or with any other payment method).  Can I use a variant of the Chaumian blinding process you described above to redeem that token for login credentials?  The idea of a token is a nice one anyway, as it allows for gift vouchers, discounts, etc."
crypto,33c0mg,johnmountain,2,Thu Apr 23 02:30:11 2015 UTC,"They can do the Chaumian thing with you with any payment method.  When they send the blinded token, they just need a way to prove that they're the one who paid you, or at least that they are authorized by the person who paid you."
crypto,33c0mg,Godspiral,1 point,Thu Apr 23 05:04:58 2015 UTC,"Are these steps different to the normal blind signing process?  I'm playing with some RSA blind signing test code.  When the client sends through the unblinded signature s in the final step, I'm able to recover the original unblinded message m, using se mod N.  I can also run through all of my tokens, calculating md mod N, until I arrive at the unblinded signature s.  This is obviously undesirable as I want to lose any reference to the token.  I want to accept payment, issue a token, blind sign it, then check the unblinded signature is valid without being able to reconstruct the token.  Also, referring to your steps above, if the client computes the blinded token B, sends it to me, then I publish Bd, does that not leak my private key?"
crypto,33c0mg,bitwiseshiftleft,1 point,Sat Apr 25 14:35:45 2015 UTC,"My suggestion doesn't solve the anonymous login problem, it just decouples payment from obtaining the real credential.  To do this, the client has to create the token, but it doesn't have to have any meaning.  But it should be padded in a specific way (PSS) so that you can recognize a valid token vs a random number.  Also, publishing examples of the map B -> Bd does not leak your private key.  To obtain any useful advantage from this requires solving the One-More-RSA problem, which is believed to be hard."
crypto,33c0mg,Godspiral,1 point,Sat Apr 25 20:10:44 2015 UTC,"I have a few problems with your suggestion that I'm trying to work through.  The first is that computing Bd takes a very long time.  Could I use Bd mod N?  Rather than requiring the client to use custom wallet software to embed a blinded message in the Bitcoin transaction, I'd prefer to use a unique Bitcoin address for each payment and derive a unique token from it.  That way, I can check if a token's been paid for easily.  My next problem is that I have to control creation of the token and cannot trust the client to do it.  I need to ""lose"" the token in the blinding process, and be left only with an unblinded signature that I can check is genuine - i.e. no message attached, just a signature (even a hash of the token is no good because I'm then able to identify the token in question by simply hashing every token I have and comparing).  I'd like each unblinded signature to represent a valid token, without me knowing which one."
crypto,33c0mg,Natanael_L,1 point,Sun Apr 26 16:04:15 2015 UTC,"The first is that computing Bd takes a very long time. Could I use Bd mod N?   Yes, mod N like in RSA.  Sorry about that.  The other operations are also mod N.   I'd like each unblinded signature to represent a valid token, without me knowing which one.   There are ways to do this, at least with the help of a third party, but I really don't think it's necessary."
crypto,33c0mg,Godspiral,1 point,Sun Apr 26 17:06:16 2015 UTC,"Here is my updated procedure, reflecting my current understanding, and hopefully suitable and secure. Please comment.   Server supports various external payment methods (i.e. not directly integrated). Client selects one, makes the payment and makes a note of all payment details: method; account number or cryptocurrency address; receipt or transaction number. Server has an RSA signing key. It can be weak (1024 bits) since it's only protecting signups for the service, but we will make it the standard 2048 bits. The public key is published, with exponent e, modulus N. The private key has exponent d and modulus N. Client chooses a random string, say 256 bits, hashes it and pads it out to the server's key size according to PSS signing standard. Call the padded token m. Client chooses and stores a random r (relatively prime to N), and generates blinded message B := mre mod N. B is uniformly random mod N, regardless of m. Client submits payment details and B to the server. Staff verify payment and publish blinded signature S' = Bd mod N (= md r mod N) on the site, indexed and searchable by payment details. S' is also uniformly random mod N, and uncorrelated to m from the server's perspective. Client periodically searches payment details on server and retrieves S'. Client divides S' by r to compute the unblinded signature S = md mod N, a valid PSS signature. The client now has a valid signature on m, even though nothing the server saw was correlated with m. Client sends S and m to the server. Server checks S is a valid PSS signature on m, puts it in a database so it won't be accepted again, and returns login credentials. Even though the server now has access to m, it is a meaningless random string and uncovers no knowledge about the client or the payment. Client installs login credentials and logs in. Apart from tracking IP addresses (solved by signing up over Tor), there is no feasible way for the server to link S with S', so payment details are decoupled from login credentials."
crypto,33c0mg,Natanael_L,1 point,Mon Apr 27 15:22:36 2015 UTC,"Looks good to me.  You will have to be a tad careful with the question of ""what are payment details"" though.  For example, if someone pays you with bitcoin, in principle everyone can see the id of who paid you.  Likewise not all payment details are suitable for publishing with the signature."
crypto,33939j,logicwon,8,Mon Apr 20 17:02:12 2015 UTC,"This is great! It'll lower the barrier of entry into the cryptography field by a decent amount...oh wait, shit."
crypto,33939j,doomrobo,2,Tue Apr 21 03:47:31 2015 UTC,You're saying we'll get fully UTF-8 aware tex before we get a proven secure cipher?  Worth it!
crypto,33939j,Creshal,1 point,Tue Apr 21 13:10:10 2015 UTC,Doesn't XeTeX support unicode out of the box? I use it all the time
crypto,33939j,doomrobo,2,Wed Apr 22 01:54:42 2015 UTC,Now this is amazing! Looking forward to use it.
crypto,33939j,HighCode,1 point,Tue Apr 21 13:52:52 2015 UTC,Are there any examples of that?
crypto,33939j,SouLBK,3,Tue Apr 21 09:51:41 2015 UTC,Try the documentation (pdf).
crypto,33939j,rejser,1 point,Tue Apr 21 10:52:26 2015 UTC,Thank you very much :)
crypto,33a88q,drb0110,2,Mon Apr 20 21:53:46 2015 UTC,"I am stuck, however, on how to leverage these linear approximations to derive the subkeys for each round.   The subkeys for SIMON are completely deterministic.  The list of probabilities mentioned cannot be used to derive subkeys directly.  In the paper referenced, use equation 1, tables two and three to derive the subkeys.   How do I go from the linear approximation to a program that finds the subkeys?   So what those probabilities are for are determining the result of F. e.g.  P[ F(X)i = X(i-2) ]    = P[F(X)i = X(i-2) | X(i-2) = 1] + P[F(X)_i = X(i-2) | X_(i-2) = 0]  P[ F(X)i = X(i-2) ^ X(i-1) ]  = P[F(X)_i = X(i-2)  ^ X(i-1)| X(i-2) = 1, X(i-1) = 1] + P[F(X)_i = X(i-2)  ^ X(i-1)| X(i-2) = 0, X(i-1) = 1] + P[F(X)_i = X(i-2)  ^ X(i-1)| X(i-2) = 1, X(i-1) = 0] + P[F(X)_i = X(i-2)  ^ X(i-1)| X(i-2) = 0, X_(i-1) = 0]  and so on.  If it helps any, use figure 2 in the paper with various inputs.    Now, how to retrieve the subkeys?  For starters,  look at equation four in the paper.  set the left hand side of the equation to just (K1)_2 by XOR'ing the other terms.  The right hand side will then have all other terms in the equation XOR'ed together.  Use the probabilities listed to, as you put it, ""linearly approximate"" (X_L1)_2  edit: forgot a word"
crypto,33br4o,uranusaurus_rekt,6,Tue Apr 21 05:51:44 2015 UTC,"Without something like Zero-knowledge proofs, which is currently very inefficient to implement, it isn't really possible. Encrypted data is supposed to be indistinguishable from random. You can make entropy density estimations, but that still doesn't tell you if the data is encrypted with a strong key, with a weak key or if it is random."
crypto,33br4o,Natanael_L,1 point,Tue Apr 21 08:56:06 2015 UTC,"Encryption hides information, but I am not sure it is completely necessary for every encrypted message to be indistinguishable from randomness. Especially in a situation where I do know something about the key, and I can possibly control something about the payload. For a general purpose cryptosystem this should not happen, but the purpose in this case is plausible deniability for me, not secrecy for my user.  Suppose there was a first round of AES, for which I have no knowledge of the key or message but (for the sake of simplicity) a second round that uses just a simple XOR cipher.  When the user requests to store something, they tell me the last half of the key they will use (for the second round), and I will respond with some keylength/2 data I know they are to insert every keylength/2 bytes. They are then to encrypt the modified first round of cyphertext, and send it to me.   Since I know something about the key and something about the message, I can (sort of) verify that the protocol was followed without knowing how to decrypt the rest of the cyphertext.  For XOR this can easily be defeated by only encrypting the interspersed segments with the last half of the key and leaving the original payload cleartext, but it suggest to me that something a little more sophisticated might be possible without computationally intensive analysis of the final ciphertext.  The mechanism used to demonstrate that I cannot trivially infer the unknown part messages does not necessarily need to be bulletproof, it just needs to impose enough of a burden to discovering the whole cleartext message to protect me from malicious users 'poisoning the well', or to render decrypting the entire database (in the case of someone gaining access to it, or me being compelled to turn it over to law enforcement) impractical."
crypto,33br4o,Natanael_L,2,Tue Apr 21 12:50:54 2015 UTC,HMAC sounds like the simple and secure solution in your case. Cryptographic authentication of the data.
crypto,33br4o,Natanael_L,1 point,Tue Apr 21 12:54:15 2015 UTC,"On its own, I don't see how it even addresses my problem. I do not need to make sure that I am getting the right message from the right person, I need to make sure I am not getting trivially decipherable ciphertext.  How would I use HMAC to this end? (I was looking at HMAC earlier because it sounded vaguely like it might be useful, but from what I can tell its essentially digital signing with a shared secret)"
crypto,33br4o,Creshal,1 point,Tue Apr 21 13:36:06 2015 UTC,"If that's the goal, you need to know the capabilities of your enemy or it is literally impossible. Even if the password to decrypt is long, you don't know how much of it that your attacker knows. At best you can know the algorithm is strong (such as AES-GCM)."
crypto,33br4o,Natanael_L,3,Tue Apr 21 15:05:48 2015 UTC,"Practical implementations usually wrap the data into distinguishable containers (LUKS-encrypted hard disks have a header containing information about how the remainder is encrypted, e.g., and then there's everyone's favourite, BEGIN PGP MESSAGE).  This doesn't tell you which key was used, though (unless a specific format includes that information in the non-encrypted header, which can be forged)."
crypto,33br4o,Natanael_L,1 point,Tue Apr 21 10:22:32 2015 UTC,"I was looking for something a little stronger than just validating a file format that should be ciphertext. If they embed the key, well, whatever, I am more worried about a malicious user slapping some bogus header/footer on ascii armored cleartext kiddie porn or something.  However, this might be a satisfactory compromise if I cannot find a stronger mechanism."
crypto,33br4o,Natanael_L,1 point,Tue Apr 21 13:07:01 2015 UTC,"If you want to prevent ciphertext modification, then you really want authenticated encryption (and HMAC prevents undetected modifications)."
crypto,33br4o,Natanael_L,1 point,Tue Apr 21 15:13:29 2015 UTC,"Its not simply that I want to prevent ciphertext modification, I want to be able to know if a given cipher was used to derive the data sent to me, without sharing the cleartext message.  But the cipher itself is open ended. I do not need to be able to determine if its ciphertext in general, I need to be able to determine if it is specifically derived from the cipher I am trying to discover by asking this question.  I don't think I have explained myself as well as I wanted to, so I have added some details the the description of the original question."
crypto,33br4o,zeroXten,1 point,Tue Apr 21 23:42:40 2015 UTC,"Why those requirements? The threat model is odd.   It seems like only deterministic encryption algorithms with Zero-knowledge proofs would work as everything else would be malleable and have various channels for embedding data that can be directly extracted. Maybe not even that - you can bruteforce search 216 arbitary plaintexts to find ciphertexts with the 16 initial bits matching parts of your key, allowing you to name those files with the numbers 1-16 to make it trivial to reconstruct a 256 bit key from the ciphertexts. Then the real ciphertexts would hold the data in question.   Giving the uploader the ability to control all parts of the encryption (which is a must if you want to deny responsibility) allows for an infinite number of ways to perform shenanigans which you might not approve of.   For strong ciphers, only Zero-knowledge proofs can show that the output ciphertext is derived directly from and ONLY from an unknown key and a secret plaintext using ONLY that encryption algorithm. Even then you don't know for certain if hidden communication channels are in use.  You can in essence never prove a lack of capabilities. You can only show that somebody who don't know X can't do Y,  not anything about who for certain will and will not know X."
crypto,33br4o,silverforest,1 point,Wed Apr 22 00:18:31 2015 UTC,"Well, so long as it is implied that 'knowing z' (the original message) entails 'doing y' (applying the decryption cipher with the whole key) then I think most of the attack surface is covered... assuming I can easily verify that someone 'did y', only knowing a partial key. I have a feeling that I might have just talked myself in a circle and summarized zero-knowledge proof... I digress.  I think I understand your point about determinism, but I think this can be mitigated if I control random variables, but the user is responsible for remembering them to make decryption deterministic. So they can no longer use that space for 'shenanigans'. And they are free to use whatever cipher they want outside of this verification protocol to ensure that the cleartext that they are storing is safe from me, the host.  The importance of determinism is more information than I came to the conversation with. So if thats all I end up leaving with, then I think its still a net positive. I do not think i need cryptographically strong proof necessarily to meet my requirements. Weak proof is might be better than no proof at all.  Thanks for your patience :P"
crypto,33br4o,silverforest,1 point,Wed Apr 22 02:00:41 2015 UTC,"If the goal is to absolutely not be able to decrypt uploaded ciphertexts, you're facing a losing battle. They can email you their keys, even."
crypto,33br4o,autowikibot,1 point,Wed Apr 22 06:49:57 2015 UTC,"It isn't. At some  point we draw the line between acceptable and unacceptable risk. For any given block of arbitrary data, there is SOME cipher and key out there that will transform it into something incriminating. If I needed absolute protection, I couldn't even rely on completely innocuous messages.  I am concerned mainly with the communications channels that lead to automatic storage of data on the piece of hardware dedicated to maintaining the database. The goal is providing a content neutral service and still being able to demonstrate due diligence easily in the event of some kind of legal audit. Preferably without exerting UNDUE diligence (having to constantly and manually remove questionable content)."
crypto,33br4o,Natanael_L,2,Wed Apr 22 07:33:39 2015 UTC,"I'd say simple statistical entropy tests are sufficient. It isn't reasonable to expect any more of a file host. Maybe provide the users with an official client that employ encryption, like say spideroak does, and you're fine. Maybe even use Tahoe-LAFS as the backend, which is designed for tasks similar to this?   Showing that you won't be able to decrypt any arbitary messages at will by design ought to be sufficient to get you out of legal requirements to do so in most jurisdictions. You wouldn't know what's what until you're told (and you can have an official reporting mechanism), and even then it is merely an unsubstantiated claim until you're given the actual key. At that point you can simply tell law enforcement ""these are the reports I've gotten, I don't have the keys, you go investigate""."
crypto,33br4o,WRSaunders,2,Wed Apr 22 08:07:40 2015 UTC,Perhaps tell us more about the problem you're solving rather than the solution you're looking for. Who is sending what to whom and why? Who is the attacker and what are they capable of?
crypto,33br4o,autowikibot,1 point,Tue Apr 21 20:51:23 2015 UTC,I have added a more thorough explanation of the problem and the desired properties of the mechanism to the description of the original question.
crypto,33br4o,WRSaunders,2,Tue Apr 21 23:44:14 2015 UTC,"I don't think using a cipher with a viable distinguishing attack would be a good idea, so let's avoid that solution.  ZKPs are the only other thing that come to mind. I can think up an easy way to do such a ZKP with ElGamal encryption but it would be seriously slow."
crypto,33br4o,WRSaunders,1 point,Wed Apr 22 01:35:08 2015 UTC,"Could you summarize why ciphers with a viable distinguishing attack would not be a good idea?  My reading of that article leads me to believe that distinguishing attacks generally do not prove 'encryptedness', but rather disprove randomness, which is a related but not immediately useful thing to know for this application.   ZKPs are the only other thing that come to mind.   Ok. I have a vague understanding of ZKPs, but not enough to really understand if they can be practically applied to the scenario (or if the scenario can be reshaped to allow for ZKPs to become practical). I will have to give them a more thorough look."
crypto,33br4o,silverforest,3,Wed Apr 22 02:09:50 2015 UTC,"Here's a paper on proving knowledge of the plaintext. Note this uses asymmetric cryptography which is inefficient.  If you're willing to preform encryption on the server, an alternative would be to generate a one-time shared key and encrypt the data using that (then discard the knowledge required to decrypt). The idea being that the user has a public key P and a corresponding private key n (P = gn). Before encryption you generate a random y, then compute the encryption key K = P · y, encrypt the payload with K and store Y = gy along with the encrypted payload in your storage. Remember to discard y and forget about it, because without knowledge of y you are no longer able to decrypt the payload. However, the user can recompute K using x because K = Y · n and use that to decrypt. (Yes this is just Diffie-Hellman, pick up a nice implementation.)  Note that there is no guarantee to the user that you will not store y, but since they are supposedly encrypting themselves before they upload, that should be no problem, right?"
crypto,33br4o,Natanael_L,1 point,Wed Apr 22 10:05:02 2015 UTC,Diffie–Hellman key exchange:       Diffie–Hellman key exchange (D–H)   is a specific method of securely exchanging cryptographic keys over a public channel and was one of the first public-key protocols as originally conceptualized by Ralph Merkle.   D–H is one of the earliest practical examples of public key exchange implemented within the field of cryptography. The Diffie–Hellman key exchange method allows two parties that have no prior knowledge of each other to jointly establish a shared secret key over an insecure channel. This key can then be used to encrypt subsequent communications using a symmetric key cipher.    Image i     Interesting: ZRTP | Malcolm J. Williamson | Marconi Prize | Off-the-Record Messaging   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words
crypto,33br4o,rflownn,1 point,Wed Apr 22 10:05:23 2015 UTC,Excellent! Thanks.
crypto,338yi6,CaptEntropy,3,Mon Apr 20 16:27:56 2015 UTC,What is the threat you're wanting to protect against?   NSA eavesdropping in transit? Hostile sysadmins on your/their side reading the message from the mailspool? Someone breaks into the other guy's office or steals his laptop?   Different problems get different solution.
crypto,338yi6,817682,1 point,Mon Apr 20 17:52:01 2015 UTC,"I am just concerned that the message is secure in transit, and I don't want to have to trust any sysadmins in transit. (E.g. i know if I send it on gmail, it is secure (TLS) when I send the mail, but gmail employees would potentially have access. )"
crypto,338yi6,817682,2,Mon Apr 20 17:57:18 2015 UTC,"If you're using AES with 7Zip, and a long password/passphrase, that ought to be secure against passive surveillance or nosy sysadmins, assuming the people on the other end are careful with the decrypted file.   Whatever software you use, try googling for ""7zip password crack"" or similar to see what attacks people are using against your system, and see what's obviously too weak (e.g., 7Zip with a 4 character password)."
crypto,338yi6,817682,1 point,Mon Apr 20 18:16:20 2015 UTC,But as for transmitting the key... any thoughts?  I am thinking phone call with 5 word XKCD password
crypto,338yi6,Natanael_L,3,Mon Apr 20 22:05:39 2015 UTC,"I think that makes sense - ultimately, you can't expect a lot of security when dealing with security-clueless people, so I think it would be a waste of effort to come up with a perfect process, where the people on the other end are going to leave the unencrypted file on a shared network volume or put it in Dropbox or whatever, or write the passphrase on a sticky note on their monitor."
crypto,338yi6,johnmountain,3,Mon Apr 20 22:19:37 2015 UTC,"Without a secure channel for bootstrapping, it can't really be done securely. Don't give the key over any channel you wouldn't be willing to send the secret plaintext over."
crypto,338yi6,tom-md,3,Tue Apr 21 09:00:42 2015 UTC,"This is a good easy to use PGP-email alternative: https://peerio.com/  You could also do the phone thing, but only if you use something like Signal/RedPhone and talk through that. Think of regular phone calls as ""plain-text"" (even if they technically have encryption, but they are completely wiretappable)."
crypto,338yi6,Natanael_L,1 point,Mon Apr 20 17:48:42 2015 UTC,"Thanks, I was not aware of Peerio, it seems like a good solution I am checking it out!"
crypto,338yi6,Argotha,1 point,Mon Apr 20 22:06:18 2015 UTC,Notice that 'minilock' is the equivalent of peerio but in non-web form.
crypto,338yi6,Argotha,2,Tue Apr 21 05:19:09 2015 UTC,"Depends entirely on what software you can get them to run to decrypt it. Truecrypt 7.1a is easy for just decrypting files, and very secure. GPG could be quite hard to get them to run, like you said. Any particular requirements?"
crypto,338yi6,JohnDoe_85,2,Mon Apr 20 17:15:22 2015 UTC,"Perhaps look into bitsync (or the commercial/foss do alikes that illude me) of course you still need to transfer a secret key... Perhaps its better to use a TLS web service that you control, for them to download their files.  Like most people have already said, its about matching the threat model. But also, of course meeting the business requirements (are you protecting them and that's part of business value or are you protecting yourself for due diligence of handling their data)"
crypto,338yi6,johnmountain,1 point,Sat Apr 25 18:37:08 2015 UTC,"Using a web server that I control is a pretty good idea, as I do have such a resource! TLS everywhere ;)"
crypto,338yi6,JohnDoe_85,1 point,Sun Apr 26 01:17:04 2015 UTC,"Just make sure it is TLS 1.2 and you disable broken suites xD  And then yeah, good password storage etc (assuming you gonna go for logins). Good luck!  (feel free to hit me up if you want more put of me)"
crypto,338yi6,Natanael_L,1 point,Sun Apr 26 07:29:30 2015 UTC,I generally just send an encrypted .zip over secure FTP.
crypto,338yi6,JohnDoe_85,4,Mon Apr 20 17:35:26 2015 UTC,How do you tell them the password for it?
crypto,338yi6,johnmountain,3,Mon Apr 20 17:48:04 2015 UTC,"For really sensitive stuff? By phone.  For faux-sensitive stuff? By email. Yeah, I know."
crypto,338yi6,JohnDoe_85,3,Mon Apr 20 18:23:00 2015 UTC,Define really sensitive. The phone network isn't very secure against wiretapping.
crypto,338yi6,Natanael_L,3,Mon Apr 20 18:29:01 2015 UTC,"Financial sales data for a big company that it would not want its competitors to have but no one knows the data exchange is taking place.  If you are already to the point where your phone network is tapped, my organization isn't going to be able to do much to keep your data secure."
crypto,338yi6,Define_It,2,Mon Apr 20 18:33:54 2015 UTC,"Forget the NSA, criminal organizations and foreign governments/competitors could easily intercept your phone calls too for such stuff. All they need is the phone number:  http://www.zdnet.com/article/invasive-phone-tracking-new-ss7-research-blows-the-lid-off-personal-security/  http://www.slideshare.net/zahidtg/ss7-locate-track-manipulate  https://www.youtube.com/watch?v=lQ0I5tl0YLY"
crypto,338yi6,Natanael_L,1 point,Tue Apr 21 09:56:05 2015 UTC,I suppose secure VoIP is probably a better solution.
crypto,338yi6,untitleddocument37,1 point,Tue Apr 21 13:26:41 2015 UTC,"All phone networks is being tapped, look up the leaks on NSA and industrial espionage since even before the 90's with echelon."
crypto,338yi6,angdev,-4,Mon Apr 20 18:40:49 2015 UTC,"Sorry, I do not have any definitions for ""really sensitive""    I am a bot. If there are any issues, please contact my [master]. Want to learn how to use me? [Read this post]."
crypto,338mgh,the_hedgemon,5,Mon Apr 20 14:58:43 2015 UTC,"Funny, I got a very similar email which came from a (probably compromised) Yahoo email address. There was no subject, and the message body was similar. It's a base64 encoded number.  00000000  0a 35 37 31 37 34 30 35  37 31 39 34 32 37 30 32  |.571740571942702| 00000010  30 31 30 33 0a                                    |0103.|   I'd guess someone's spambot broke."
crypto,338mgh,KentFloof,2,Mon Apr 20 15:10:17 2015 UTC,Or someones key/info stealer sends to a large list of addresses to obfuscate the intended recipient.
crypto,338mgh,sixstringartist,1 point,Mon Apr 20 16:41:59 2015 UTC,"Thats exactly it! Yahoo account that seemed legit but who knows.  Yea base 64 is nothing and Im not a pro in these matters.  Now I know its nothing and just spam. Thanks for the help, appreciate it."
crypto,338mgh,Natanael_L,1 point,Mon Apr 20 15:49:27 2015 UTC,"Try /r/codes. This sub is about modern cryptographic algorithms and novel and interesting applications, not code breaking."
crypto,338mgh,coerciblegerm,3,Mon Apr 20 14:59:57 2015 UTC,"I realize that, however I am not asking for it to be broken, only hoping somebody has seen this format before.  If not, thats ok too. I stumbled upon it by accident via email and its probably just ""face vs keyboard"""
crypto,338mgh,zeroXten,1 point,Mon Apr 20 15:01:54 2015 UTC,"I got one of those, too. Different string, but same format. Odd.  Edit: Just got some spam from the same address. Broken spambot is probably the correct answer."
crypto,334fag,3rdear11,14,Sun Apr 19 13:05:31 2015 UTC,"I use KeePass,a password manager, and it allows me to have one master password to protect and encrypt all of my other passwords. When I need to generate a new password for a website, I take what ever the max numerous of characters I can use, have KeePass gen a random sequence, and never worry about it. I have my kee file stored in an encrypted container on a cloud drive and save it monthly on a thumbdrive. Every device I own has access to the same randomly generated passwords whenever I need them.   Remember my password option usually means that whoever sits at your computer has access to all of your bank accounts, social media, em as il, etc. its even a worse problem if you sign into chrome at a friends house, a public library, or wherever."
crypto,334fag,1dontpanic,2,Sun Apr 19 13:23:50 2015 UTC,"have my kee file stored in an encrypted container on a cloud drive and save it monthly on a thumbdrive.   Do you access your passwords from a mobile device? If yes, how?  I'm working on a similar setup - so far, I only have a local KeePass database, which I copied over to my iPhone manually so I could access the passwords from my phone as well."
crypto,334fag,lordoffire,3,Sun Apr 19 18:07:31 2015 UTC,"If you use something like LastPass, they have a mobile app for syncing passwords and auto filling them. They might be a premium feature, though, I don't remember. Premium is only $1/month, though."
crypto,334fag,jus341,2,Sun Apr 19 18:29:34 2015 UTC,I have been going back and forth on the idea of LastPass. I'm trying to see if I can exhaust all reasonable open source options before I commit to LastPass.
crypto,334fag,lordoffire,4,Sun Apr 19 18:33:57 2015 UTC,Same. Closed source software controlling all my passwords doesn't sound amazing.
crypto,334fag,fluxuate27,2,Sun Apr 19 20:34:03 2015 UTC,"I use it at work and I do not like it. They don't seem to understand that the remote LastPass vault is a big ol' hole in their advertised security model, which is that your passwords are only ever decrypted client-side. Sure, that's technically true, but XSS on their site = compromise of all your passwords. Their browser extension should not do that, or at least should support disabling that ""feature"". However, their tech support didn't see the problem.  I would not use it if I had a choice."
crypto,334fag,phyzome,2,Sun Apr 19 22:22:48 2015 UTC,"Probably out of scope per the orders of management, so they have another ""neat usability feature"" to market or however they rationalize it. Otherwise I'd be slightly depressed if none of they're developers really have a clue. You'd think they'd learn from Lavabit..."
crypto,334fag,Natanael_L,2,Mon Apr 20 06:06:28 2015 UTC,"I use truecrypt still. Eds lite on android for mobile decryption. I know, I know, truecrypt may have been compromised by the government, the people I'm worried about are not that sophisticated.  Edit: Google drive for cloud storage"
crypto,334fag,1dontpanic,6,Sun Apr 19 18:52:03 2015 UTC,"Actually, the crypto audit came back for TrueCrypt and no major issues were found.  Read the full report here."
crypto,334fag,calcium,2,Sun Apr 19 19:46:32 2015 UTC,That's great to hear! I've been busy with other stuff and stopped following the audit. I must say it really speaks volumes for the open source community
crypto,334fag,1dontpanic,2,Sun Apr 19 20:34:11 2015 UTC,Truecrypt is still gettin' old though. Veracrypt and Cyphershed are continuing development patching issues the audit found.
crypto,334fag,LordCurlyFry,2,Mon Apr 20 01:01:22 2015 UTC,Thank you for the answer. Guess I need to figure out how I can make MiniKeePass (iOS) and TrueCrypt (or similar) work together.
crypto,334fag,lordoffire,2,Sun Apr 19 19:06:55 2015 UTC,syncthing/owncloud and keepassdroid
crypto,334fag,Saicotic,1 point,Sun Apr 19 23:27:02 2015 UTC,I use keepass on crashplan. I can't edit the database from my phone and have it update on crashplan so it's not perfect but it works for what I need.   I just don't trust any service I don't host myself.
crypto,334fag,accountnumber3,1 point,Sun Apr 19 19:15:31 2015 UTC,"I use dropbox to keep my keepass file synced between all my devices, including android phone. I then use an app called keepassdroid to open it on my phone. Works very well"
crypto,334fag,whippen,1 point,Sun Apr 19 22:34:47 2015 UTC,"If you're happy to store it in Dropbox, PassDrop will read the KeePass file (iOS). I presume similar apps on Amdroid.   I switched a while ago to 1Password though, and have never looked back. The extra features on iOS and real native Mac app make it far superior."
crypto,334fag,chrispoole,8,Mon Apr 20 05:28:51 2015 UTC,"Chrome Browser will ""remember"" a password. If you uninstall chrome or switch computers, unless you do some sort of synchronisation, the passwords will be forgotten again.  I use LastPass but I imagine it is like the selection on the site. It encourages you to use random passwords in lieu of something ""you remember."" Instead the program will autofill the password for you .They tend to also support synchronisation over the Internet, so you'll never lose your passwords. Your password database will be ensured confidential using encryption so that only you can decrypt it.  By using strong random passwords instead of memorable ones on each and every different site, if one site gets compromised -- all your other accounts aren't. Humans are prone to reuse the same password for convenience sake. Lastpass/KeePass etc. instead encourage unique unmemorable passwords per site while requiring you only to remember the password to decrypt your password database. It is also a lot more convenient."
crypto,334fag,angryfuck,5,Sun Apr 19 13:53:44 2015 UTC,I believe they are synced by default. The problem is that unlike LastPass Google can see your passwords.
crypto,334fag,johnmountain,3,Sun Apr 19 19:07:07 2015 UTC,Sync data are encrypted by the user's password or (optionally) a passphrase.
crypto,334fag,trouble32,2,Sun Apr 19 20:59:13 2015 UTC,I doubt Google can see the passwords.  They probably derive a separate encryption pass from the login password.
crypto,334fag,dareksam,1 point,Mon Apr 20 07:01:19 2015 UTC,That's what they do according to the documentation I've seen. It is probably there somewhere in the Chromium source code.
crypto,334fag,Natanael_L,2,Mon Apr 20 07:09:32 2015 UTC,"If your browser and password manage both has a secure password generation function, then they're approximately equivalent in password strength.   There's an additional risk in the browsers, though - various attacks like XSS can abuse autofill to steal your passwords, and browser based exploits might sometimes give access to browser memory (including your passwords) even if it don't give code execution capabilities outside the browser (necessary to attack separate password managers).  /r/netsec, or /r/asknetsec is typically better for this type of questions, as this sub focuses on the cryptography alone."
crypto,334fag,Natanael_L,3,Sun Apr 19 13:46:07 2015 UTC,"various attacks like XSS can abuse autofill to steal your passwords   I haven't heard of that happening in years, although I guess there could always be a new hole or regression.  That said, the compromises that e.g. LastPass makes in order to autofill passwords give it roughly the same problems, as far as I can tell."
crypto,334fag,phyzome,4,Sun Apr 19 13:49:12 2015 UTC,"That said, the compromises that e.g. LastPass makes in order to autofill passwords give it roughly the same problems, as far as I can tell.   Spot on. Something like keepass with auto-type (only when you indicate it) is usually the better option, since it's user-initiated."
crypto,334fag,Katana__,2,Sun Apr 19 16:05:04 2015 UTC,"On Android I've got keepass2android which has a keyboard IME of its own. Unlock database, open entry of choice, open app to use it in, switch keyboard (switching can be automatic with root) and press the password button to autotype the pass. The database can be locked again from the app notification."
crypto,334fag,Natanael_L,1 point,Sun Apr 19 20:29:21 2015 UTC,"If you are worried about that, lastpass offers the option to turn auto fill off. It has a little icon next to the form input that you can use to select an account to fill."
crypto,334fag,jus341,3,Sun Apr 19 18:32:08 2015 UTC,"...which is injected by javascript, and potentially could be hijacked with bullshitted click events. Not tried to pull that off, though, but it's still using the same APIs as every other extension."
crypto,334fag,Katana__,4,Sun Apr 19 18:49:05 2015 UTC,"Password Managers (KeePass et al) store in a secure (encrypted) container all your passwords and has tools to securely generate (random) passwords, some of then include features like cloud sync, support for mobile applications and form auto completion.  Remember Password option in your browser is a container/database (not always securely encrypted eg Firefox Password Manager without a Master Password) commonly used to store your most used passwords (eg your reddit account). It only stores websites/urls and passwords by default and sometimes there is an option to sync (AFAIK the only major browser without this feature is Internet Explorer because the passwords are tied to the Windows ""Secure"" Storage)  across different devices and all of them give you the auto completion feature by default.  Personal speaking... i use both.  I use KeePass as /u/1dontpanic does but without storing them on the cloud, just kept a local copy on my desktop, another one on my offline NAS and a monthly backup on my USB, sometimes on my android phone (KeePassDroid is awesome) but normally just for account setup. And at my browser (Firefox with Sync) store the ones that i don't care enough (eg my reddit account xD) but frequently use."
crypto,334fag,g30rg3_x,1 point,Sun Apr 19 22:01:37 2015 UTC,Keepass with all the passwords. One master password to open the keepass file in a container on the cloud. That account is recovered by txt or call with Google. So if someone gets access to my computer they would still need access to my Google account to get a password. Yet they would need a password for the container.
crypto,3325nn,johnmountain,12,Sat Apr 18 20:12:55 2015 UTC,"I'm concerned by how little reference is made to SCTP in any documents, design, or discussion I could find on QUIC.  Reading through the spec, it feels very much like a new protocol specifically for initial connection latency - great for shaving ms off a Google search, but well short of what could have been an ambitious goal.  I am further concerned by the revelation of continued new-protocol release to Google clients, which so far has seemed to result in faster but single-company-specific optimizations being fast tracked through standards bodies (http 2.0).  SCTP is an ambitious and exciting protocol that solves many fundamental frustrations we face today. I would be much more comfortable seeing an extensive compare/contrast between SCTP & QUIC, and a rationale for a new protocol vs optimizing SCTP.  It feels like ""protocols in userspace"" is the only motivator I've seen so far, and offering ""a new flavor"" of TLS is not encouraging."
crypto,3325nn,NotEnoughBears,5,Sun Apr 19 03:09:49 2015 UTC,"SCTP doesn't have any encryption, used association-level congestion control, and had message semantics on the streams (which leads to you determining your own send sizes arbitrarily, instead of the protocol, as the fragmentation behavior was a mess..)."
crypto,3325nn,lally,1 point,Sun Apr 19 05:31:59 2015 UTC,"I don't know about SCTP, but MinimaLT sounds pretty good to me, and it has encryption by default, but I think its implementation is further behind than Google's QUIC:  http://cr.yp.to/tcpip/minimalt-20131031.pdf  There's also Trevor Perrin's (TextSecure's Axolotl creator) Noise, which sounds even better/simpler, but that is probably even more behind:  https://github.com/trevp/noise/wiki/Overview"
crypto,3325nn,they_call_me_dewey,2,Sun Apr 19 10:58:04 2015 UTC,Is SPDY still a thing? Is this meant to be a quicker UDP-based replacement for SPDY?
crypto,3325nn,1n5aN1aC,10,Sun Apr 19 03:01:55 2015 UTC,"Yes, HTTP/2 Is essentially SPDY, and is standardized now."
crypto,33120e,prezvdi,3,Sat Apr 18 13:56:57 2015 UTC,"Nah, don't feel bad about criticizing OpenSSL. It's pretty terrible. LibreSSL (The OpenBSD Foundation's fork of OpenSSL) as of version 2.1.3 has full support for GOST. Their code is pretty clean. The licenses are all over the place though. Some of it is BSD, some of it is ISC, some of it is Apache.   https://github.com/libressl-portable/openbsd  I'm not sure if you'll get your dynamic S box though. Hopefully this helps."
crypto,33120e,ForestC,2,Sat Apr 18 15:39:42 2015 UTC,If you are OK with Java implementations it looks like Bouncy Castle supports it via the GOST3411withGOST3410-9 scheme.
crypto,32y6pq,xiongchiamiov,2,Fri Apr 17 18:14:06 2015 UTC,Non technical description but: effectively you build a bias into an algorithm that gives you an edge when it comes to reducing the key space or you build a bias that allows some master key to encrypt/decrypt a stream.
crypto,32y6pq,AusIV,5,Sat Apr 18 16:49:15 2015 UTC,"Having a bias when reducing the key space gives everyone with enough computing power a back door.   It seems to me that the only scalable way to do this would be to encrypt data with a symmetric key, then encrypt the symmetric key with the public key of the entity that gets to have the back door, probably in a way that would require multiple entities to decrypt the symmetric key.  Realistically though, there's no way to enforce the inclusion of the back door keys that makes it anything but voluntary. Pandora's Box has been opened. People have access to strong encryption. You might be able to get major systems to include a back door, but anyone who wants to avoid it will be able to. Protocols like OTR already provide end-to-end encryption over clear text channels. End-to-end encryption over an end-to-end encrypted channel that has a back door would be undetectable until someone tried to use the back door."
crypto,32y6pq,lokidk,2,Sat Apr 18 18:56:25 2015 UTC,"I'm such a dumb ass. Thought this was a question, didn't see it linked through to an article answering the question."
crypto,32ziga,n0p213d,4,Sat Apr 18 01:09:02 2015 UTC,"Don't mistake sync with file sync. The codebook for OTP must not be re-used. Sync for OTP programs usually means that each message is transmitted with a page number from the codebook. After reading, that page must be shredded. How to maintain that codebook properly on your OS is a different problem (not what this does) than implementing the OTP algorithm (what this package does).  EDIT: I read the code. It's short and we all know key management hygiene is king with OTP; that's the hard part. This code takes care of the easy part, but it's definitely OTP using pure /dev/urandom to generate code pages. Each page is a byte, which is sometimes considered a weakness on block storage. Used code pages are unlinked, but many platforms require more than this. Pure /dev/urandom isn't a good choice -- detecting if your source for randomness has been/is being tampered with or copied is more important than speed for OTP. So, codebooks are routinely encrypted with a random key. But, the code stands on its own. B minus."
crypto,32ziga,SausagePump,6,Sat Apr 18 03:32:05 2015 UTC,"Anything that algorithmically derives and and exchanges new keys is using symmetric encryption, not OTP, probably implemented as a poor streaming encryption algorithm. This wouldn't be the first time somebody thinks the usage of XOR makes their poor streaming encryption algorithm into unbreakable OTP without considering the strength of the source of their key material."
crypto,32ziga,Natanael_L,1 point,Sat Apr 18 06:17:15 2015 UTC,"I read the code and don't understand the upvotes. I personally would never upvote a statement about crypto that uses the word 'probably'.   Anything that algorithmically derives and and exchanges new keys is using symmetric encryption, not OTP, probably implemented as a poor streaming encryption algorithm.    OTP is symmetric by design, but not sophisticated enough to be alternatively stream (that's one-time-tape) or block (which is one-time-pad) in the same design. What submitter implemented is block (each block is a byte, as far as I can tell), not stream. Whether submitter could refine the code is more constructive.   This wouldn't be the first time somebody thinks the usage of XOR makes their poor [] encryption algorithm into unbreakable OTP without considering the strength of the source of their key material.    No, but getting the XOR operation correct is easy. Submitter will probably look into manipulating urandom before using it as a codebook, but I can tell that the code intends to implement OTP and no other ciphers."
crypto,32ziga,SausagePump,3,Sat Apr 18 19:23:08 2015 UTC,"It was a generic comment based on what's frequently occurring. If you use the wrong terminology, chances are overwhelming that you're doing something else wrong too.  I know OTP is symmetric by the technical definition, but almost nobody talks about it with that terminology."
crypto,32ziga,Natanael_L,1 point,Sat Apr 18 20:13:25 2015 UTC,"Thank you.  Maybe I'll look at some of the points you've made and see if I can improve things.  I think I was just assuming that the security of the pad and the computer my prog was used on were a factor I couldn’t, or didn't know how to, have control over.  Cheers for the ideas for my next coding attempt and the helpful remarks. :-)"
crypto,32ziga,zeroXten,3,Sat Apr 18 19:57:41 2015 UTC,"Also, who uses sourceforge these days? ;)"
crypto,32ziga,zeroXten,1 point,Sat Apr 18 09:19:31 2015 UTC,I do ;-)  What do most people use these days?
crypto,32ziga,Natanael_L,2,Sat Apr 18 12:05:16 2015 UTC,GitHub.
crypto,32ziga,Natanael_L,1 point,Sat Apr 18 15:02:23 2015 UTC,"This is only the third program I've ever written.  Just an exercise to see if I could do it really.  No delusions of being a supper coder or that I know much about crypto :-)  The pad file is just a large file created from /dev/urandom with a 24 byte file header on both the random pad file and the encrypted message files. The first 4 bytes can be used as a magic number for file type identification, the next four is a random serial number which is used to check that the decryption end is using the correct pad file. The remaining fields are used to keep track of messages and as a way of allowing for missing messages without messing up the pad file.  The idea being that the pad file is exchanged, in person, on a USB stick.  At encryption and decryption time the relevant sections of the file are deleted.  Just putting it out there to see what people have to say about it.  Thanks for looking and commenting."
crypto,32ziga,SausagePump,2,Sat Apr 18 12:03:22 2015 UTC,"That's not OTP, just ""outsourced"" key generation for streaming crypto."
crypto,32ziga,Natanael_L,1 point,Sat Apr 18 15:38:13 2015 UTC,"OK, thanks.  Can you tell me the difference please?"
crypto,32ziga,atoponce,2,Sat Apr 18 16:09:28 2015 UTC,"OTP relies on the bits from the source of randomness to have no correlation to each other, to have no bias and to be fully unknown and unpredictable to any attackers. The first two criteria are impossible when your message is larger than the entropy pool of your RNG."
crypto,32ziga,sellibitze,-1,Sat Apr 18 16:37:19 2015 UTC,"No, submitter is doing OTP. Using urandom is fine for key generation. Why the in the World are you insisting his code is steam cipher?"
crypto,32ziga,atoponce,3,Sat Apr 18 20:49:20 2015 UTC,"It is literally not a one time pad by definition, because urandom does not give an output with equal information theoretic entropy as the message, the bits are not perfectly uncorrelated, the bits are not perfectly random, etc...   It is a stream cipher with urandom as the generation algorithm, with the stream precalculated instead of just sharing the key (the entropy pool of urandom at the time the stream for use with XOR encryption is generated).   OTP =/= XOR. OTP requires that the key is perfectly random and unpredictable, for every bit independently."
crypto,32ziga,sellibitze,-1,Sat Apr 18 21:27:49 2015 UTC,"OTP =/= XOR. OTP requires that the key is perfectly random and unpredictable, for every bit independently.    While this is true, data from /dev/urandom is indistinguishable from true random data."
crypto,32ziga,atoponce,3,Sat Apr 18 22:50:02 2015 UTC,"While this is practically true, it's not true in the information-theoretical sense. So, no, it's not an OTP."
crypto,32ziga,Natanael_L,0,Sun Apr 19 03:52:48 2015 UTC,"And the one time pad only exists in a theoretical setting. No real world practical implementation can provide the perfect security of the OTP, even if the pad is generated from a TRNG.  The problem with the OTP is due to several practical weaknesses, such as keeping the pad safe, or not reusing the pad (as was a practical problem during WW2).  So, by strict adherence to the definition, the OTP cannot exist in a practical real world setting at all. While this satisfies a few, most are willing to define the one time pad as:   A random pad at least as long as the message. The pad in part or in whole is never repeated. The pad is kept secret and destroyed after use.   If the pad is generated from a CSPRNG or a TRNG, then it can be considered as a ""practical one time pad""."
crypto,32ziga,maqp,2,Sun Apr 19 04:14:17 2015 UTC,"You simply don't get perfect secrecy with ""the pad in part of in whole is never repeated"". Perfect secrecy is about entropy. This is information theory. There is no cutting corners.  OTP (the real kind!) is possible. It's just terribly inconvenient. If you don't care about the only property where OTP shines (perfect secrecy) and admit to being fine with ""practical approaches"" then OTP is not really for you (and nowadays I would argue, OTP is for nobody). Trying to approximate an OTP without actually getting there is pointless. It's security by obscurity (w.r.t. how you ""derive"" the pad) at best."
crypto,32ziga,bitwiseshiftleft,1 point,Sun Apr 19 04:50:58 2015 UTC,"You simply don't get perfect secrecy with ""the pad in part of in whole is never repeated"". Perfect secrecy is about entropy. This is information theory. There is no cutting corners.   Perfect secrecy is about the secret having no possibility of compromise. The secret is 100% safe, and could not possibly be discovered, within the Heat Death of the universe. There is no practical implementation of perfect secrecy, even when using Shamir's Secret Sharing. That's the problem. So, the OTP cannot exist in the practical world, because perfect secrecy cannot be guaranteed, TRNG, or not.  So, either practical OTP implementations exist, and some rules are broken about its security, or OTP implementations do not exist, and it resides as a theoretical design only. It can't be both."
crypto,32ziga,SausagePump,1 point,Sun Apr 19 14:19:49 2015 UTC,"You can't prove the computational bound, just estimate one. With a secure channel and RNG using quantum effects, you can have an information theoretically correct and secure implementation of OTP. Now, the channel is the hard part to secure. You need to deal with tempest and physical security, etc..."
crypto,32ziga,Natanael_L,1 point,Sun Apr 19 15:02:46 2015 UTC,"The main difference is OTP, or, perfect secrecy needs keys that derive from Bernoulli process. Closest you can get to that is a high quality TRNG. The specs will of course never be perfect but the main goal is to avoid using algorithms, namely a PRF with seed to generate random numbers: an algorithm is always deterministic, never random no matter how random it looks like. From the attackers standpoint it makes no difference if the PRF is /dev/urandom or any block cipher used in CTR mode: both are semantically secure but thats not the same as information theoretical security. If the attacker can figure out the initial values (IV, PRF key etc.), all future keys can be generated. OP's cipher is a vernam cipher with pre-shared keystream generated with PRF. This is pointless. By using another PRF, a sufficient IV and a pre-shared key, the same keystream could be generated on the fly. Unless the laws of physics limit your capability to produce the keys also in receiving end, you can't talk about OTP."
crypto,32tv2w,johnmountain,9,Thu Apr 16 17:49:55 2015 UTC,[Insert the standard arguments against relying on browser based encryption here]
crypto,32tv2w,Natanael_L,9,Thu Apr 16 18:02:28 2015 UTC,"Since I see CryptoJS referenced as used to build the site, I'll make the same statement I make every time it comes up.  Quoting from its website.  Inactivity   CryptoJS is a project that I enjoy and work on in my spare time, but unfortunately my 9-to-5 hasn't left me with as much free time as it used to. I'd still like to continue improving it in the future, but I can't say when that will be.   Last updates to the codebase were Jan 2013, which is dangerous for a crypto library.  Secondly, unless I'm reading this wrong (and I'm more than happy for someone more versed in JavaScript to confirm that I am), CryptoJS recommended encryption is AES without integrity checks.   Then someone actually made a feature request to make a padding Oracle exploit more feasible, which was promptly incorporated into the codebase.  Edit: I'm offering this as feedback, not criticism. People producing open source software to the public should always be supported moreso than the corporates that make the same mistakes, and hide them with a marketing team."
crypto,32tv2w,disclosure5,1 point,Thu Apr 16 23:46:31 2015 UTC,Browser-based JS crypto is fundamentally broken. Avoid!
crypto,32tv2w,shroom_throwaway9722,0,Fri Apr 17 09:24:33 2015 UTC,"Hey, at least I learned about markdown."
crypto,32tv2w,aydiosmio,1 point,Thu Apr 16 20:25:32 2015 UTC,Reddit comments are Markdown so you knew ;)
crypto,32vv76,delbv9,5,Fri Apr 17 03:28:15 2015 UTC,Compare your output against a known implementation? Why are you rolling your own?
crypto,32vv76,spap-oop,1 point,Fri Apr 17 03:59:52 2015 UTC,"I've been comparing but I've not yet found any implementation on non-text file. For now, it just works on any text files."
crypto,32vv76,disclosure5,2,Fri Apr 17 04:37:50 2015 UTC,"I don't get it. Any modern crypto is a binary system. In the case of ECC or RSA, there is a defined process of turning data into a numeric value. It should be pretty independent on the type of data.  Google the ""os2ip"" function."
crypto,32vv76,aidsinabarrel,1 point,Fri Apr 17 07:19:46 2015 UTC,I know right? for now just the decrypting part that doesn't work.    Thanks I'll look at it.
crypto,32vv76,angryfuck,1 point,Fri Apr 17 08:02:09 2015 UTC,"This is stupid advice, by all means roll your own, but may your god help you if you try to put it in production."
crypto,32vv76,davidstrauss,5,Sun Apr 19 00:38:37 2015 UTC,"Any suggestion or fundamental things that I should know?   Most cryptosystems I've seen implement hybrid encryption. You generate a symmetric key and encrypt the plaintext using AES (or ChaCha20) and encrypt the key using ECC.  So: CT = (ECC(K), AES(K, PT)) where CT is the ciphertext, PT is the plaintext is the plaintext and K is the key. Of course you should implement the symmetric encryption using CTR mode, and provide authentication with a MAC over the ciphertext.  I note that you're doing this for a thesis, so I'm not sure if this is what you want to hear."
crypto,32vv76,angryfuck,4,Tue Apr 21 13:47:44 2015 UTC,This. It's incredibly inefficient to use asymmetric encryption algorithms on arbitrary-sized data.
crypto,32vv76,davidstrauss,1 point,Fri Apr 17 05:24:34 2015 UTC,"Yep. I don't know much about ECC encryption algorithms, but if it is based on El-Gamal, then you can probably reuse the randomness with a randomness extractor (HKDF for example) to generate the IV, encryption and MAC keys, thereby reducing the ciphertext size.  However without proving it, I'm not sure if it will still remain secure."
crypto,32vv76,CSC_Student,2,Fri Apr 17 08:48:08 2015 UTC,"Even if it's completely secure, it's not going to approach the performance of hardware-accelerated AES, which is broadly available even on consumer processors. Hybrid encryption is definitely the way to go if you need the benefits of asymmetric keys with an arbitrary volume of data."
crypto,32vv76,Natanael_L,3,Fri Apr 17 13:33:28 2015 UTC,"Are you doing this for fun or for production purposes? I've always been told not to ""roll my own crypto"".   Anyways, I'm not really knowledgeable on ECC, but I would approach it just like I would any other problem: debug it, step by step."
crypto,32vv76,Natanael_L,1 point,Fri Apr 17 22:19:36 2015 UTC,"I'm doing this for the purpose of my thesis. Actually, I just modified an existed implementation on ECC that encrypt a file text. Do you have any example for non-text file encryption?    For my code, I thought the principal was clear, I get the bytes of encrypted file, then decrypt it but it doesn't work. I think the input/output Streams that seems at fault here. I'm using DataInputStream, can it be used on non-text file?"
crypto,32vv76,DemandsBattletoads,1 point,Fri Apr 17 04:03:54 2015 UTC,"Seems like your implementation gets some bits wrong, and in the texts it just doesn't show clearly."
crypto,32vv76,silverforest,1 point,Fri Apr 17 04:35:57 2015 UTC,Yeah maybe. I'll try to look at it again. Thanks
crypto,32vv76,samsonx,1 point,Fri Apr 17 08:39:15 2015 UTC,Look up the various test suites that exists for the algorithm you're implementing. Then you could see where it fails.
crypto,32oz30,TimeIsTissue,25,Wed Apr 15 15:25:32 2015 UTC,how to factor large prime numbers   I can factor any prime you give me in an instant!
crypto,32oz30,MadTux,13,Wed Apr 15 15:51:36 2015 UTC,"Isn't that like, an O(1) operation now?  Damn, technology is awesome."
crypto,32oz30,indrora,10,Wed Apr 15 17:05:57 2015 UTC,"(For OP's benefit: The joke is that you meant to write ""factor large numbers into primes"", not ""factor prime numbers"" -- because the latter is easy and not what you meant.)"
crypto,32oz30,phyzome,3,Wed Apr 15 19:01:35 2015 UTC,Ha! Just noticed. Thanks for that.
crypto,32oz30,unsafeword,12,Wed Apr 15 19:05:15 2015 UTC,"Yes, any optimization in finding large factors would increase attack power. A mathematical breakthrough that sped attacks by orders of magnitude could be compensated for by deprecating shorter keys sooner. A breakthrough against factors of any scale would be ruinous for many common crypto approaches. But not for all...  Examples of approaches that do not rely on large primes:   http://en.wikipedia.org/wiki/Lattice-based_cryptography http://en.wikipedia.org/wiki/Elliptic_curve_cryptography"
crypto,32oz30,bitwiseshiftleft,6,Wed Apr 15 16:01:09 2015 UTC,"If someone designs a significantly more efficient factoring algorithm, there will be a crazy flag day (/week/month...) where everyone will switch to elliptic curves.  Elliptic curves are already a good alternative to RSA in most scenarios, and they don't rely on factoring.  This only affects the initial connection, where a shared secret key is established; after that, symmetric ciphers (AES, Camellia, ChaCha, etc) are used and they aren't related to factoring.  However, if someone builds a quantum computer big enough to factor large numbers, it will also break elliptic curves.  If that happens, we will have to switch to newer and thus less-popular and less-tested systems like NTRU, lattices/codes/LWE, hash-based signatures, multivariate quadratics, etc.  Most of these systems (but not all of them) are respectably fast but have either huge messages, huge signatures or huge keys, which makes them more trouble than ECC and RSA.  Furthermore, for many of them the parameter sizes are not settled, because we don't have enough experience attacking them."
crypto,32oz30,rosulek,3,Wed Apr 15 17:11:06 2015 UTC,"Historically, improvements in factoring algorithms have also led to corresponding improvements in discrete logarithm algorithms. There is no formal connection between the two problems that I know of, but in practice this is how things have played out. So it's likely that an efficient factoring algorithm (quantum or not) would also indirectly break DL-based crypto, which includes things built on elliptic curves."
crypto,32oz30,bitwiseshiftleft,4,Wed Apr 15 18:45:32 2015 UTC,"This is true for finite field DL, but not elliptic curve DL.  That's why 256-bit ECC is on par with 3072-bit RSA.  But quantum computers would break both."
crypto,32oz30,stouset,7,Wed Apr 15 20:04:58 2015 UTC,"Only a few crypto systems (e.g., RSA) depend on factoring large numbers. No symmetric encryption algorithm does, and ECC-based ciphers depend on a related but unequivalent mathematically-hard problem.  TLS can use RSA, but it can also use many other different ciphersuites. Other options include AES for encryption with ECDH for key exchange, none of which relies on primes."
crypto,32oz30,trofnarv,2,Wed Apr 15 16:58:49 2015 UTC,"There is one thing that some people here are missing, how this person figured out how to factor large numbers. I'm assuming that OP is asking what would happen if someone figured out how to factor large numbers in polynomial time. We already know how to factor large numbers, we just can't do it in polynomial time.  If someone found out how to do it in polynomial time, the whole mathematical world would be in a frenzy. From my poor memory, it seems that integer factorization is of NP complexity. If a NP problem can be solved in polynomial time, then P=NP. In this case, not much of anything will survive the inevitable flood gates. Elliptical Curve Cryptography relies on discrete logarithms which most believe to be in the same class and integer factorization so it would essentially be broken as well. I don't know enough about lattice crypt to say how it would be effected. Please correct me if I'm wrong about any of this, its been a few years since college.  The other possibility is if the integer factorization problem is solved using quantum computers. If quantum computers powerful enough to break RSA were invented, ECDHE would be equally at risk as efficient algorithms already exist to break that with quantum computers.  AFAIK lattice cryptography is not affected by quantum computers. I also just read about Supersingular Isogeny Diffie–Hellman Key Exchange as a post-quantum form of elliptical curve solution that is quantum resistant. I'm really excited to read more about it now. The McEliece cryptosystem is one of my favorites (because its insane), and many think that it too would be resistant to quantum computers.  The problem with those solutions are that there is not a lot of support for those kinds of encryption yet. If we found out tomorrow that all of our RSA, ECDHE, etc were vulnerable to attack, it would be quite a while before a new standard could be implemented everywhere. On top of that, any time a new software like that is pushed out in a hurry, it inevitably has a lot of bugs in it. The world wouldn't necessarily fall apart, but it would be in a lot of turmoil for some time."
crypto,32oz30,silverforest,2,Wed Apr 15 21:18:04 2015 UTC,"Nitpick: While factoring is in NP, factoring is probably not NP-complete, and it would be quite surprising if it was."
crypto,32oz30,trofnarv,1 point,Wed Apr 15 22:44:34 2015 UTC,"That makes a lot of sense. I was not thinking about the problem clearly when I wrote that. I will say that I don't think int factorization will ever be solved in P time (unless P=NP), and even if we manage that, I suspect that solution will be equally applicable to discreet logarithms so ECDHE would be just as broken."
crypto,32oz30,DoWhile,3,Wed Apr 15 23:27:05 2015 UTC,"No.  There are one-way functions from various other assumptions, factoring being the easiest to understand so that's what we teach to newbies.  However, RSA is also one of the most popular methods used, so if someone could factor really fast, they could break various popular protocols.  Other mathematical objects that are used as foundations include things like elliptic curves (ECDDH/ECDLOG assumptions), lattices (SIVP/SIS/... assumptions), learning with errors (LWE/LPN assumptions, closely related to lattices), and less popular ones like various nonabelian groups.  Furthermore, a lot of private-key cryptography is based on ciphers which are a whole different ball game, and there is also information-theoretic/statistical cryptography that is ""unbreakable"" but requires more effort."
crypto,32oz30,stouset,5,Wed Apr 15 16:02:46 2015 UTC,There is no gentler way to put this: you are simply totally incorrect.
crypto,32oz30,MyElephantInTheRoom,1 point,Wed Apr 15 16:12:40 2015 UTC,"Essentially if you find an effective way to factor large numbers then you will break all modern encryption schemes.    Not all modern encryption schemes are based on the assumption that factoring large numbers is hard. Schemes based on discrete logarithms aren't even particularly exotic. Even if someone breaks those as well, there are other options."
crypto,32m07b,scottchiefbaker,17,Tue Apr 14 21:28:57 2015 UTC,"When SHA3 comes up, I am reminded what Bruce Schierer said:    I am hoping for ""no award.""  It's not that the new hash functions aren't any good, it's that we don't really need one. When we started this process back in 2006, it looked as if we would be needing a new hash function soon. The SHA family (which is really part of the MD4 and MD5 family), was under increasing pressure from new types of cryptanalysis. We didn't know how long the various SHA-2 variants would remain secure. But it's 2012, and SHA-512 is still looking good.  Even worse, none of the SHA-3 candidates is significantly better. Some are faster, but not orders of magnitude faster. Some are smaller in hardware, but not orders of magnitude smaller. When SHA-3 is announced, I'm going to recommend that, unless the improvements are critical to their application, people stick with the tried and true SHA-512. At least for a while.   I don't want to switch everything over to the new thing simply because it's new and cool. I'd rather stay on SHA2 until there is a reason to change."
crypto,32m07b,JoseJimeniz,6,Wed Apr 15 03:20:27 2015 UTC,"There is a lot of truth in there. But to be honest, I think he would have said something very different if Skein had been selected. The ""tried and true"" SHA-512 does have weaknesses:   length-extension attack (a real problem which is why we have things like HMAC). Joux' multicollision attack (more of a theoretical concern, as far as I can tell).   These are generic attacks on the Merkle–Damgård construction. The recent generic attack by Joux shows this construction is a worse approximation of the random oracle model than previously assumed. For sponge functions (like SHA-3 variants) we have a mathematical proof that these sort of generic attacks are not possible. That's pretty cool."
crypto,32m07b,sellibitze,3,Wed Apr 15 21:54:26 2015 UTC,"Well yeah, the whole point is that we have something to move to when/if the current method fails...no point having a backup if we switch to the backup as soon as it looks slightly better than the primary."
crypto,32m07b,slyf,0,Wed Apr 15 05:59:55 2015 UTC,"Right, but if we start this process a little later, we'll likely see proportionately stronger algorithms. I'm with Schneier, I think we have plenty of good hash functions to last us a decade."
crypto,32m07b,aydiosmio,19,Wed Apr 15 13:33:38 2015 UTC,"When was the last time a crypto standard of any kind was rapidly integrated everywhere? Most software that require serious security won't include anything that isn't yet proven to work as expected. It takes time.  Edit: also, as said by /u/_zenith, it isn't finalized yet. That means nobody interested in any kind of compatibility will use it in live deployments, because even the slightest change in the final standard can break compatibility.   And even once finalized, then the top paragraph still remains true. A very few will experiment it, and everybody else who are interested will watch the results closely.   Most people are actually fine with using SHA2 today. SHA3 was started because cracks were showing in SHA1 and SHA2 shares much of the design, and thus it was assumed SHA2 might fall too. But the recent cryptanalysis shows that it remains strong. So today there's no urge to switch."
crypto,32m07b,Natanael_L,4,Tue Apr 14 21:47:38 2015 UTC,"So today there's no urge to switch.    SHA-1 and SHA-2 both use the Merkle-Damgård construction. Keccak was chosen for SHA-3, partly because it uses a different construction, namely the sponge construction. If it turns out that there is a fundamental flaw with Merkle-Damgård, both SHA-1 and SHA-2 could fall. Using a different construction in SHA-3 protects it from the same flaws of its predecessors."
crypto,32m07b,atoponce,8,Wed Apr 15 02:21:14 2015 UTC,"Nothing that won was going to be using Merkle-Damgard as it was already known to be vulnerable to length extension attacks.  Keccak was chosen due to not being ARX (add-rotate-xor) based, which was never a stated criteria for the competition. A bit unfair, but it did give us BLAKE2, so also a good thing in the end."
crypto,32m07b,floodyberry,5,Wed Apr 15 04:27:58 2015 UTC,"So today there's no urge to switch.    Well, there might be one urge to switch, and this probably explains NIST's decisions.  SHA is a little slow and harder to implement cheaply in hardware. For a given number of bits of security, Keccak performs significantly faster and is easier to implement in hardware. If I have two designs to choose from that both give the same level of security, but one needs fewer gates or cycles, then by all means I'm going to pick that one. Given how many exabytes of SSL'd data goes around the world every month, it's no surprise that a faster hash algorithm is important."
crypto,32m07b,antiduh,4,Wed Apr 15 00:30:12 2015 UTC,"Blake2 is much better than SHA3 anyway. SHA3 may only be slightly faster in hardware, but imagine how many chips out there would have to support it. We don't even have SHA2 support for the majority of chips on the market (including mobile here). So why bother?"
crypto,32m07b,johnmountain,7,Wed Apr 15 04:57:36 2015 UTC,"Blake2 is faster than SHA3 in software.  However, SHA3 has some advantages.  If you need a power-analysis-resistant hash function (eg for HMAC), SHA3 is the way to go.  ARX systems (including SHA2 as well as Blake, Blake2 and Salsa20/ChaCha) are a nightmare to blind against DPA.  Also, the SHA3 family is extremely fast in hardware if you devote a lot of area to it.  It's like 3x better than SHA2, 4x better than Blake, and I'd guess quite a bit faster than Blake2 as well.  Finally, sponge functions provide pretty good options for a single symmetric primitive supporting hashing, encryption and MAC, or even metaprotocols like BLINKER.  Blake2 supports hashing and MAC, but not encryption."
crypto,32m07b,bitwiseshiftleft,2,Wed Apr 15 05:17:16 2015 UTC,"Is implementing constant addition difficult, or is the problem implementing it so it's not dog slow? (I know absolutely nothing about hardware)."
crypto,32m07b,floodyberry,2,Wed Apr 15 12:19:40 2015 UTC,"I'm not an expert on hardware implementation, but I do know a little something about it.   Addition requires carry propagation, so the input of the first bit is linked to the output of the last bit, which means that the propagation delay is higher. Simple XOR or AND has no such construction - the path from input to output is shorter and completely parallel with respect to each bit. Which means lower propagation delay, which means shorter hold times in hardware and faster cycle times.  Fast carry propagation is a heavily studied topic, and CPU engineers often employ techniques to speed it up. One such design is the Kogge-Stone Adder, which is one of the fastest, if not the fastest designs. However, it is still not a stupid simple as an XOR or AND gate, so it still has a higher propagation delay.  In software, this design choice of Keccak balances out less, because AND, OR, XOR, ADD, SUB all take about the same time per instruction. The reason for this has to do with the design of a CPU - one, there's a lot of overhead in processing an instruction, regardless of what it is, and two, instructions all have to fit into the same discrete chunks of the pipeline in the CPU. If during the 'execute' stage of the pipeline, one instruction needs 100 picoseconds and one needs 500 picoseconds to run, that stage of the pipeline is probably going to be designed to just wait 500 picoseconds. There are instructions that are longer, like multiple or divide, and they'll be executed like they were just looping over that same 500 picosecond stage."
crypto,32m07b,antiduh,1 point,Wed Apr 15 15:25:15 2015 UTC,SUB    Subtraction? The reverse of addition?
crypto,32m07b,conradsymes,1 point,Sun Apr 19 03:42:48 2015 UTC,"Yes, why do you ask?"
crypto,32m07b,antiduh,1 point,Sun Apr 19 03:48:37 2015 UTC,Subtraction has carries just like addition?
crypto,32m07b,conradsymes,2,Sun Apr 19 03:56:21 2015 UTC,"In a manner of speaking, yes. It has takeaways -  the output of the first bit depends in the input of the last bit, the contrapositive of addition.   Even better, you can implement 2s complement subtraction using addition. X - Y becomes X + (~Y + 1)."
crypto,32m07b,antiduh,2,Sun Apr 19 04:06:55 2015 UTC,"Addition does take more gates than XOR, but that's not the problem.  (It is a lot of why Keccak has such a great hardware speed/area tradeoff though.)  Hardware implementations for systems like smart cards often randomize their state if they're handling something like a secret key, in order to make power analysis harder.  For something like RSA or ECC there are lots of options: you can randomize the z-coordinate, or multiply by a factor and cancel it at the end, or work mod random*p instead of mod p, or add a multiple of the group order to the scalar/exponent, or whatever.  Interestingly, you don't use the software trick of constant-time table lookups with a linear scan and masking, because usually SRAM lookups are constant-time and they leak less than the linear scan.  For symmetric ciphers, some implementations will actually split the state of the system into shares, so that eg S1 xor S2 xor S3 is the state.  This makes XOR gates cheap, because the masks can simply propagate (maybe with a remask step).  But AND gates are expensive, because you need to combine the masks without leaking anything.  This means that long chains of AND gates are very slow and expensive to mask; in particular, carry propagation is very painful.  For something like SHA2, this can be mitigated a little by using carry-save addition, where the final sum isn't computed until it's needed.  But Blake2 alternates directly between XOR and ADD, which means carry-save doesn't help.  Obviously a hash function doesn't always handle secret state, and being better in one scenario doesn't make Keccak better overall.  Also Keccak is pretty big -- 1600 bits of state, and fastest when it's all in flops+logic -- and that causes many people to use SHA2 if they don't need masking.  But in certain hardware applications it's very good."
crypto,32m07b,bitwiseshiftleft,1 point,Wed Apr 15 17:02:32 2015 UTC,I don't think BLAKE2 needs HMAC? At least according to their site. Also BLAKE2 is 3x faster for 32-bit and 5x faster for 64-bit (which the vast majority of devices will be in 5 years). So you could argue that the software-based BLAKE2 is still faster than SHA3-in-hardware.
crypto,32m07b,johnmountain,1 point,Sat Apr 18 18:09:21 2015 UTC,"Neither BLAKE2 nor SHA3 needs HMAC, but when using them as a MAC, power analysis is a concern.   So you could argue that the software-based BLAKE2 is still faster than SHA3-in-hardware.   I don't understand this.  Surely the fastest hash in dedicated hardware will be faster than another hash running in software on general-purpose hardware?  That said, it'll take a while for general-purpose CPUs to have SHA3 acceleration, and it surely won't be the 5+bytes/cycle that you get in a straightforward hardware design."
crypto,32m07b,bitwiseshiftleft,9,Sat Apr 18 19:25:16 2015 UTC,"There are Keccak implementations, but this is not the same as SHA3 implementations. Because the standard has not been, well, standardised, implementations may become incompatible over time. So, implementers are reluctant to use it.  And, of course, the dark cloud hanging over NIST. I for one do not believe Keccak insecure, the design looks great, and I've seen no evidence that it could be nerfed by carefully picking evil parameters. NIST wouldn't get away with specifying magic parameters anymore, anyway."
crypto,32m07b,_zenith,3,Tue Apr 14 21:46:30 2015 UTC,"Has the controversy completely ruined everyone's confidence in the Keccak?   It has a lot less to do with confidence.  What has happened since the last time NIST had a conference on SHA-3 is as follows:  1) Department of Commerce has not signed off on the SHA-3 standard FIPS-202.  The reason?  The Department of Commerce is slower than molasses on signing off anything.  2) Many of the cryptographers that have participated in SHA-3 competition have since shifted their focus on getting their algorithms into other standards orgs, namely the IETF and the working groups under it (e.g. IRTF).  To name a couple, some of the folks that created blake and DJB.  In some sense, I see these efforts as shooting SHA-3 to irrelevancy and as an attempt by the cryptographers to make a name for themselves.    3) There is a lot of mistrust with NIST.  By law they have to work with the NSA on publishing cryptographic standards.  NIST has tried twice since 2013 to re-establish this trust with the public at large by establishing policies and practices to provide a more viewable process of how their standards are developed.  They've asked the public.  They ask in their conferences the hold.  They've published some NISTIR which attempt to define an open standards development policy but I think they are not in genuine faith because the IR's do not go into enough scope about their relationship with the NSA.  To formally answer your question, it has a lot less to do with the controversy and a lot more to do with (1).  In light of the mathematical perspective of sponge functions and the size of capacity makes the controversy a difference of those that understand why it is perfectly okay to do so and those that don't understand mathematically why is perfectly okay to do so.  Keep in mind many of the names mentioned in the ""NIST Controversy"" link were also competitors of the SHA-3 competition.  I found that their arguments at the time were definitely malicious at the time."
crypto,32m07b,throwaway0xFF00,2,Wed Apr 15 04:00:10 2015 UTC,"Legitimate arguments against the SHA-3 changes from Paulo Barreto, who was not a competitor:  http://www.larc.usp.br/~pbarreto/CrippledSHA3FAQ.html"
crypto,32m07b,floodyberry,6,Wed Apr 15 10:09:34 2015 UTC,"I'd like to add a link to an article by the Keccak team which they wrote in response to some mischaracterizations of what happened. This is not to say that Barreto is misrepresenting anything.  My personal comments follow…  What happened is that we used to define security solely based on a hash function's output length. And with the new Sponge construction, we learned that for Sponge-based hash functions it's actually a better idea to separate the security level s from the output length n for an optimal security/speed trade-off, see Tune Keccak. The problem is that people still like to use a single number – the output length – to select a hash. So, given a sponge function where you can also choose what capacity to use, you have to somehow map the output length n to a security level s and use c=2s as capacity parameter. Here are two options:    s = n  s = n/2   Option 1 is what we have now: full preimage resistance for all SHA-3 variants including SHA-3-512 even though nobody needs a preimage resistance of 512, not even if the attacker as a quantum computer to spare. The upside: SHA-3 sticks to everybody's expectations. The downside: It's slower than option 2.  Option 2 is what NIST was considering: one consistent security level for all kinds of attacks. This means, finding preimages would be as difficult as finding collisions. The upside: It's faster than option 1. The downside: It's against people's expectations for a hash function with an output of n bits to only provide a preimage resistance of n/2.  Option 2 is motivated by the idea that we generally care about collision resistance. No hash function that gives you a string of n bits can do better than n/2 w.r.t. collision resistance. That's the reason we have 512 bit hash functions. It's not because we want a preimage resistance of 512 but because we may want a collision resistance of 256. A resistance of 512 against anything is meaningless. It's not ""better"" than 256 for all intents and purposes. The only objection to option 2 I have is that SHA-3-256 would have given us only a preimage resistance of 128 which is lower than 256 while 256 is actually a reasonable security level target in the light of quantum computers.  I'm happy with the result of the SHA-3 competition. Once the standard is finalized, we'll have fixed-length output hash functions ""SHA-3-n"" for n in {224,256,384,512} with preimage and collisions resistances everybody expects so that they can be used as drop-in replacement for SHA2. Also, we'll get variable-length output hash functions ""SHAKE-s"" where s is an upper bound for the security level. With the SHAKE variants we have all the control we want. Pick a security level s out of {128,256} and pick an appropriate output length n for your application. The preimage resistance will be min(s,n) and the collision resistance will be min(s,n/2). For example, if you want preimage and collision reistance to be at least 256, use 512 bits of output of SHAKE-256. This will be 89% faster than SHA-3-512."
crypto,32m07b,sellibitze,1 point,Wed Apr 15 21:32:14 2015 UTC,"Cramer-Shoup encryption    I would like to see the citation of the preimage resistance requirement on Cramer-Shoup encryption.  The paper suggests that the hashing requirement is only Universal one-way hash function (targeted collision resistance) not pre-image resistance.  edit:  I would also like to find a citation for the pre-image resistance requirement for the Shao-Schnorr argument.  I know in the Schnorr algorithm that the ""Keccak2"" algorithm (the reduced capacity) would actually be beneficial because the pre-image resistance is already built into schnorr at the step of e=h(x,m).  And heck since I'm doubting Paulo here, while we're at it let's find a pre-image resistance requirement on XMSS as well.    During the the controversy of reducing the capacity, many people (i believe paulo himself as well) tried to come up with examples where preimage resistance of 2n/2 problem and others were able to show that 2n preimage resistance was not necessary.  I don't believe there was a single case was presented where it was a problem.  Although that does not mean that there isn't a case."
crypto,32m07b,throwaway0xFF00,2,Wed Apr 15 14:58:54 2015 UTC,"Targeted collision resistance is preimage.   Here, it should be infeasible for an adversary to choose an input x, draw a random hash function H, and then find a different input y such that H(x) = H(y)"
crypto,32m07b,floodyberry,1 point,Thu Apr 16 19:02:53 2015 UTC,"Targeted collision resistance is preimage   Targeted Collision Resistance and Second Preimage Resistance  Given the following:  (1) input x  (2) hash function H  Problem:  Find x' such that x'≠x and H(x)=H(x')  Preimage Resistance  Given the following:  (1) output y  (2) hash function H  Problem:  Find x such that H(x) = y  Targeted collision is second preimage resistance.  not preimage resistance.  If a hash function is second preimage resistant, it does not necessarily imply that the hash function is preimage resistant.  They are not the same."
crypto,32m07b,throwaway0xFF00,1 point,Fri Apr 17 15:35:37 2015 UTC,"So Paulo not explicitly stating second pre-image resistance is the issue? Because once you accept second pre-image is needed with Cramer-Shoup, it is obvious that the altered Keccak is going to be an issue."
crypto,32m07b,floodyberry,1 point,Sat Apr 18 00:20:40 2015 UTC,"So Paulo not explicitly stating second pre-image resistance is the issue?   The difference between Second Preimage Resistance and Preimage Resistance is what you're given and the problem. Preimage Resistance is trying to fine just one element in the preimage set {z | H(z) = y}.  Second PreImage Resistance starts with one preimage element in {z | H(z) = y} and tries to find another preimage element, x', in the set {z | H(z)=y}.  The issue is that second pre-image resistance and pre-image resistance are different.  Cramer-Shoup just requires a second pre-image resistant hash function.  When Paulo states:   However, there are protocols that require only preimage-resistant hash functions...   and continues to use Cramer Shoup as an example, then his argument is in question because Cramer-Shoup requires a second preimage resistant hash function instead of a preimage resistant hash function.    The other tall-tale sign that I see problematic with his argument is his next example of Shao-Schnorr.  At this point in time I don't have any literature handy on Shao-Schnorr so I can't really comment on it, however when using just Schnorr, when assuming the e=h(x,m) step provides sufficient preimage resistance, it is actually advantageous to use an altered Keccak.  If Shao-Schnorr is anything like Schnorr,  then I would have to further question Paulo's argument.  During the controversy, we tried and tried again to come up with examples where the altered keccak would be problematic.  Each time an example came up, someone else was able to quickly counter the example to explain why it was still okay.    I would also like to add that while the NIST required a hash function that was a drop in replacement for SHA-2 when the competition began.  At the beginning of the competition all publicly known cryptographically secure hash functions of an output length of size n had a preimage resistance of n, a collision resistance of n/2, and while we're on the topic, a second preimage resistance of n.  What was demonstrated with the altered keccak the security strength of preimage resistance and collision resistance could be the same, a fairly novel concept at the time and something that had not been considered at the formulation of the competition and almost surely was never considered before because there was no prior art or demonstration of such a hash function."
crypto,32m07b,throwaway0xFF00,1 point,Sat Apr 18 19:58:02 2015 UTC,"I chuckled at djb ""making a name for himself"" at the expense of NIST. The guy is practically a rock star already."
crypto,32m07b,vzq,1 point,Wed Apr 15 11:50:19 2015 UTC,"The guy is practically a rock star already.   He is a rock star.  He doesn't have an algorithm standardized by NIST.  Joan Daemen will soon have two. google and the IETF are using djb's Algorithms however , which i would say is about as good as it gets."
crypto,32m07b,throwaway0xFF00,4,Wed Apr 15 14:39:15 2015 UTC,"If you're looking for a fast, modern hash function, perhaps look to Blake2b, which is substantially faster than SHA3 (and in fact faster than MD5 and SHA1 on many 64-bit platforms):  https://blake2.net/  It will hopefully be standardized by the CFRG."
crypto,32m07b,bascule,2,Wed Apr 15 04:22:32 2015 UTC,What's the CFRG?
crypto,32m07b,ReidZB,2,Wed Apr 15 14:49:26 2015 UTC,Here you are: https://irtf.org/cfrg
crypto,32m07b,bascule,2,Wed Apr 15 15:33:18 2015 UTC,The research group that decides on cryptographic standards to be used by the IETF for use in e.g. TLS
crypto,32m07b,johnmountain,1 point,Wed Apr 15 16:40:27 2015 UTC,The NSA-influenced IETF crypto-review group.
crypto,32m07b,coder543,1 point,Sat Apr 18 18:12:10 2015 UTC,"That looks really promising, but how do we know it's a ""good"" hash algorithm? I guess everyone's a little paranoid about algorithms these days, since they can perform poorly through not only tampering, but negligence as well."
crypto,32m07b,bascule,1 point,Wed Apr 15 12:13:39 2015 UTC,"The original Blake was a SHA3 finalist, although Blake2 was changed (mostly just simplified) after the competition was over."
crypto,32m07b,sellibitze,2,Wed Apr 15 16:39:51 2015 UTC,"This ""simplicifaction"" includes a reduced number of rounds. So, blake2 has a lower safety factor. Just saying."
crypto,32m07b,h00kwurm,1 point,Wed Apr 15 20:17:41 2015 UTC,Go has stuff going on. https://godoc.org/golang.org/x/crypto/sha3
crypto,32m07b,disclosure5,0,Wed Apr 15 03:03:06 2015 UTC,"Ruby, Erlang and JavaScript all have mature implementations of SHA-3.  A lot of this is simply down to developers and inertia. The majority of online PHP tutorials highly recommend MD5, which is why I continue to see new applications using MD5."
crypto,32m07b,bascule,3,Wed Apr 15 01:43:03 2015 UTC,"Except SHA-3 hasn't been standardized yet, so... no, they do not. They have implementations of Keccak that are probably close to what SHA-3 will eventually be whenever it's standardized."
crypto,32m07b,sellibitze,1 point,Wed Apr 15 04:20:44 2015 UTC,"Well, there is a draft. But the chance of them changing anything substantial besides wordings, grammer and typos is pretty low. The final standard will probably define exactly the same functions you can find in the draft."
crypto,32in0d,idlecore,10,Tue Apr 14 02:21:25 2015 UTC,An alternative would be to use a pbkdf and split the result in half.
crypto,32in0d,SausagePump,4,Tue Apr 14 03:48:15 2015 UTC,"Specifically, use PBKDF to generate two keys: (1) to share with the server for authentication (the server should know nothing about the master password) and (2) for encrypting/decrypting data that is stored server side.  I imagine something along these lines is what is used with LastPass, where the storage of your encrypted password database is done server side, authentication is done serverside, but LastPass should have no knowledge of your master passphrase or encryption/decryption keys."
crypto,32in0d,cunttard,2,Tue Apr 14 05:32:20 2015 UTC,Perhaps use two different key derivation functions? Have one of the passwords be created using bcrypt and the other using scrypt. Or whatever mix of the three he likes.
crypto,32in0d,ForestC,3,Tue Apr 14 05:22:14 2015 UTC,"Or use two different constant values, similar to salts, with the same derivation algorithm twice."
crypto,32in0d,Natanael_L,2,Tue Apr 14 06:35:20 2015 UTC,This suggestion of yours seems like a higher level and more peer reviewed method of achieving what I need. Thanks.
crypto,32in0d,SausagePump,3,Tue Apr 14 05:59:59 2015 UTC,"You're welcome. Looks like you were on the right track.   A possibly-contentious question about your design: let's say you allow the client to pull a (symmetrically encrypted) keyfile from the server, decrypt it with the locally-generated key (the bottom end of your PBKDF result), and use it as the file key. GnuPG and others do this: it allows the password to be changed painlessly (without having to touch the encrypted storage); file key(s) can be arbitrary lengths; metadata, such as expiration dates, can be embedded. Maybe compromised passwords aren't a big deal. But, as the system administrator, do you implement a shred function for (symmetrically encrypted) keyfiles in the event that the password is changed?"
crypto,32in0d,bkkgirl,1 point,Tue Apr 14 06:49:01 2015 UTC,"My service is public facing so account compromise can be an issue. The content for each user is very small though, a few KBs, so keeping keyfiles doesn't seem necessary. However, if that ever changes, I'll need to implement a function such as the one you mentioned, or use some API that performs the same task."
crypto,32in0d,SausagePump,1 point,Tue Apr 14 08:08:45 2015 UTC,"This will result in a key half the length of what is required. Once you derive the original key with a PBKDF, just take its hash as described in the original post."
crypto,32in0d,bkkgirl,3,Tue Apr 14 06:38:21 2015 UTC,"Negatory. PBKDF2 has an argument for desired key length and it should be used. I think what you're proposing is to run a half-empty string through the KDF, which divides your key space. You want to use as much of your key space as possible. edit: I read wrong"
crypto,32in0d,SausagePump,1 point,Tue Apr 14 06:52:12 2015 UTC,"Ah ok, I was misunderstanding you due to the use of PBKDF in the generic sense. I was proposing using pbkdf(x) and h(pbkdf(x)). I was not suggesting to split the key at any point."
crypto,32in0d,spap-oop,1 point,Tue Apr 14 07:00:01 2015 UTC,"I was proposing using pbkdf(x) and h(pbkdf(x)).   Good instinct: this is what LastPass does: key=pbkdf(x), login_id=h(pbkdf(x)). login_id isn't private, so they rely on the reputation of one-way hashes. But, this is not necessary."
crypto,32in0d,spap-oop,3,Tue Apr 14 07:15:09 2015 UTC,"Consider how you will perform authentication changes. If a user changes his password, what happens?  Separate the authentication from the encryption key. If you need to have all data on the server, then have the server store a keyblob on behalf of the client. The server does not create the keyblob. The blob would contain a random salt, the key and a hash of the key, wrapped using a KEK derived from the user's password with the random salt. The server should not have a hand in defining the salt value. Be sure to verify the hash before trusting the key.  Updating the authenticator requires an update to the wrapped keyblob.   The server side authentication needs some thought into how to authenticate without revealing any of the key. Depends on how paranoid you want to be. But I'm off to work, I'll think about it."
crypto,32gh1v,emgram769,12,Mon Apr 13 16:33:23 2015 UTC,"Why not just use a temporary one-time signing/verification keypair?    Suppose you hold your own private signing key SK, and public verification key VK.  Make a temp TSK and TVK that is fresh and random, publish the tempverify key, and keep the tempsigning key to yourself. Sign M with TSK and publish it.  Anyone can verify this is a valid signature against TVK, and later when you want to take ownership, just publish a signature of your own VK under TSK."
crypto,32gh1v,DoWhile,1 point,Mon Apr 13 17:28:31 2015 UTC,It'd be nicer if the user didn't have to store the TSK.
crypto,32gh1v,rosulek,7,Mon Apr 13 18:18:43 2015 UTC,"Then derive TSKs for various messages using a PRF. More precisely: let s be a PRF seed and let SK be your long-term signing key. Sign a message m by doing (TSK,TVK) <-- KeyGen(PRF(s,m)) and σ = Sign(TSK,m); publish (m, TVK, σ) You can safely forget TSK at this time. When later taking ownership of σ, you can re-derive TSK from the PRF and sign TSK under SK."
crypto,32gh1v,david55555,2,Mon Apr 13 19:10:09 2015 UTC,"(TSK,TVK) <-- KeyGen(PRF(s,m))   Aren't you missing a dependence on the root SK in there somewhere? Don't you want:  Sign m with the root key SK to generate s.  Seed a random number generator with the signature s.  Generate a key pair from that seeded RNG."
crypto,32gh1v,Natanael_L,1 point,Mon Apr 13 20:17:09 2015 UTC,"With my method below I'm suggesting proving that the signing keypair is derived from the main keypair instead, by using ECC and the EC multiply function (with almost the same method as you to to derive message specific value).   This prevents others from claiming authorship as you can prove authorship through proving the keypair is derived from your main keypair. With your scheme, signatures only prove that you ""approve of the message"".  (Yes, I'm assuming the original message will be distributed with the original signature intact, while later signatures of the public key might be generated by anybody. If the original signature is replaced before distribution, no other scheme will work anyway. Got to timestamp a hash of the signed message then before publishing to prevent tampering.)"
crypto,32gh1v,DoWhile,1 point,Mon Apr 13 21:32:25 2015 UTC,I think you want to sign VK under TSK and not TSK under SK: revealing TSK would mean that anyone can now claim ownership...
crypto,32gh1v,Natanael_L,3,Mon Apr 13 23:30:16 2015 UTC,"I'm thinking of something like Bitcoin stealth addresses type math.   Edit: See my post here: http://lists.randombit.net/pipermail/cryptography/2015-April/007194.html http://www.metzdowd.com/pipermail/cryptography/2015-April/025345.html  You have one main ECC public key that is shared.  When signing, you derive a new keypair by this method; calculate an HMAC of the message with your main keypair's private key as the HMAC key to generate a secret value which you and only you can derive at any point in time, and that you can share without leaking any secrets. Use that HMAC output value to perform EC multiply on your public key and your private key, this derives a new complete ECC keypair.  Share the derived public key with the message, sign with the derived private key. This can't be tied to you at this stage.   When proving it was you, you publish the HMAC value (which you can recalculate at that point in time, no need to store any state). It can't be calculated by others knowing only the public keys, it can't be forged either, and nobody else can create a public key from it which they are capable of deriving the correct private key for. This allows people to confirm that the derived signing keypair indeed is derived from your main keypair, as EC multiply with the main public key and the HMAC value gives the signing public key. And because the signature is valid, they know it is yours.   Every message you sign gets a unique keypair. Every message is individually deanonymized when you wish to reveal you signed them.   If you wish to tie together multiple signed messages to what's effectively one pseudonym before revealing yourself, also without having to instantly reveal that they belong to the same pseudonym at the time of publishing, you could do it through a ""hierarchical"" scheme;  Use the main keypair to derive a pseudonym specific main keypair with the HMAC method using any pseudonym specific string you wish as the HMAC key (this is your only stored state). Use that pseudonym specific derived keypair as described above, as if it was the main keypair.   You reveal the messages as belonging to the pseudonym keypair by revealing the message specific HMAC values. You reveal the tie to your main keypair by revealing the pseudonym specific HMAC value.   /u/DoWhile,  /u/bitwiseshiftleft,  feedback?"
crypto,32gh1v,bitwiseshiftleft,3,Mon Apr 13 20:35:05 2015 UTC,"This sounds like a very good solution.  You're effectively proving that two keys gx and gy belong to the same person by revealing x/y.  You can do this to show that two pseudonymous signatures are linked without linking them to your main identity, since you know x and y for the pseudonyms.  You don't need a hierarchical setup for this."
crypto,32gh1v,Natanael_L,1 point,Mon Apr 13 21:41:28 2015 UTC,"I'm not great with the math details, those x and y would be the HMAC values I presume? If I know those values for both messages, I can prove the messages are from the same person without revealing anything that ties it to the main keypair? I literally just publish HMAC_1/HMAC_2?  Aren't there any problems with this if you later on have to tie together many additional messages, information leakage?  Edit: g = generator point, x and y is the private keys, the points calculated from gx and gy are the public keys? Think that's the case. Am I right in assuming gx + (x/y) = gy?  So then you only reveal the HMAC value specifically when revealing the tie to the main keypair?  Edit: math corrections"
crypto,32gh1v,bitwiseshiftleft,2,Mon Apr 13 21:59:33 2015 UTC,"I'm not great with the math details, those x and y would be the HMAC values I presume? If I know those values for both messages, I can prove the messages are from the same person without revealing anything that ties it to the main keypair? I literally just publish HMAC_1/HMAC_2?   Right.  The division would be modulo the order of the group g.   Aren't there any problems with this if you later on have to tie together many additional messages, information leakage?   Well, there is the obvious one: if you link A to B, and B to C, then you've also linked A to C.  I think also you'll have to be careful with deterministic signatures.  So if for example you derive the signature nonce as HMAC(secret key, ""derive me a nonce"" || message), then you could run into trouble by signing the same message with two identities that ultimately share the same secret key.  If you avoid this problem (by adding the per-identity key to that HMAC invocation, for example) then I think everything is fine."
crypto,32gh1v,Natanael_L,1 point,Mon Apr 13 22:07:39 2015 UTC,"See my edit above as well.  So if x is the main private key, and m_i is the message, then you get H_i = HMAC(m_i, x).  Then you do EC_multiply(x, H_i) = x_i and EC_multiply(gx, H_i) = gx_i as the derived keypair. Edit: x * H_i = x_i, gx + H_i = gx_i.   You reveal x_i/x_j for the pairs of messages you link. It is the same as the HMAC value H_i when linking to the main keypair, gx.   Trying to straighten out my own confusion about the math here...  Your last advice is good, I've seen it described before as ""be explicit about the purpose of the operations"". So any mismatch in assumptions doesn't break it automatically, because the different uses will be using different values."
crypto,32gh1v,bitwiseshiftleft,2,Mon Apr 13 22:24:05 2015 UTC,"Right. Alternatively, you don't need to base your pseudonymous keys on your main one.  They can just be gxi and then to link to the main one you publish x/xi."
crypto,32gh1v,DoWhile,1 point,Tue Apr 14 02:25:42 2015 UTC,"When proving it was you, you publish the HMAC value (which you can recalculate at that point in time, no need to store any state). It can't be calculated by others knowing only the public keys, it can't be forged either, and nobody else can create a public key from it which they are capable of deriving the correct private key for. This allows people to confirm that the derived signing keypair indeed is derived from your main keypair, as EC multiply with the main public key and the HMAC value gives the signing public key. And because the signature is valid, they know it is yours.    Overall the solution seems reasonable, but I'm skeptical about this exact claim, depending on the details.  This is one level of abstraction deeper than I'm used to, so bear with me.  A message is signed and can be verified under some derived public key DPK=PK*HMAC(message).  However, this is one equation and two unknowns: PK is unknown since the original author is hidden, and HMAC(message) is also not published. A malicious entity with their own public key, say MPK, and claim the HMAC was DPK*(MPK)-1 (where the inversion is done in the EC group).  Of course, the bogus HMAC doesn't come from anything, but nobody can actually verify that since HMACs are computed in secret.  If you also required that the derived secret signing key is used to sign, say, your main public key, then that I think avoids this issue, and you don't even need to publish the HMAC, but then I'm worried about signing things you derived from things itself... This sorta turns into rouslek's solution, modeling the HMAC as a PRF with some possibly-more-efficient-but-maybe-less-secure key derivation."
crypto,32gh1v,Natanael_L,1 point,Mon Apr 13 23:49:09 2015 UTC,"If somebody claims another HMAC value and thus another public key, they can't succeed in a challenge response protocol (I think). Edit: how does inversion work? IIRC it shouldn't be possible to derive any value that allows you to compute x_i/x_j for any two keypairs unless you know the private keys for both those keypairs. Wouldn't that inversion, gx_i * ( gx_a )-1 reveal x_i/x_a-1 (a = adversary), allowing them to also compute x_i = x_a-1 * ( x_i/x_a-1 )?  Or can't they compute that corresponding inversion on their private key? Because if so my security assumptions still stand, just require a challenge response protocol.   HMAC already have a pretty strong security model. I'm not worried that will have some weird side effect together with ECC.  Edit: I think you're best off signing x_i/x_j with both keys, as this proves you're in control of both keypairs simultaneously. This way you show you're you (have control over your old established keypair) and the original signer (controls the signing keypair).   Showing one it's derived from the other would require that you can prove something about the value x_i/x_j that shows it isn't simply random, but that they're related. A Zero-knowledge proof of the HMAC input would work (zk-SNARK?), as it shows x_i/x_j = HMAC(x_i, m) without revealing any secrets, for the statement ""gx_j was derived from gx_i based on message m and the private key of gx_i"". Then you show the relationship is non-random, but related in a way that couldn't be predicted in advance or forged.  Edit 2: what if you don't use H_i = HMAC(x_m, m) to derive the new keypair, but as a seed for a new H_di = HMAC(H_i, m), so that you then do gx_m + H_di = gx_i and x_m * H_di = x_i to get the new keypair (d means derivation, m means main keypair)?  Then you can publish the first HMAC value to allow others to verify that it is indeed a number derived from the message used to derive the keypair by themselves computing gx_m + HMAC(H_i, m) = gx_i?  Edit 3: math corrections"
crypto,32gh1v,DoWhile,1 point,Tue Apr 14 06:31:01 2015 UTC,"IIRC it shouldn't be possible to derive any value that allows you to compute x_i/x_j for any two keypairs unless you know the private keys for both those keypairs. Wouldn't that inversion, gx_i * ( gx_a )-1 reveal x_i/x_a-1 (a = adversary), allowing them to also compute x_i = x_a-1 * ( x_i/x_a-1 )?   No, that's the point... anyone can invert in a group even if you can't take discrete logs.  Given P=gx and Q=gy without being given x,y, I can always compute P/Q = gx-y without knowledge of x or y or x-y.  Of course, without knowledge of this, they would immediately fail any challenge/response for the private key as you noted!  Rather than any complex fix, you can just prove ownership by cross signing the main and derived keypairs.  Proving knowledge of secret key is (I believe) a much stronger requirement than necessary, though there are extractable zk style signatures where a signature doubles as a proof of knowledge of secret key, but I think that's not even necessary.     Edit: I think you're best off signing x_i/x_j with both keys, as this proves you're in control of both keypairs simultaneously. This way you show you're you (have control over your old established keypair) and the original signer (controls the signing keypair).    Yes: basically, as long as you can sign something with both your main and derived keypair to the tune of ""yeah, we're the same person"" then that pretty much seals the deal."
crypto,32gh1v,Natanael_L,1 point,Tue Apr 14 09:29:00 2015 UTC,"What do you think of my edit 2? That method is supposed to be used as a kind of commitment to the message to prove the message was known before the keypair was created. Thus you can show you weren't just simply given the private key of the signer later on, but that you really did have the message before signing and publishing. And it remains stateless, so you can recalculate the values later without needing to store any additional data.  Edit: it specifically shows there's a non-arbitary unforgable relationship between the public keys which is related to the message (due to the usage of the hash function)."
crypto,32gh1v,DoWhile,1 point,Tue Apr 14 09:40:58 2015 UTC,"If you write ^ H_di then I think it should work, otherwise the equations aren't even consistent.  You can even use H_i in this case... and maybe that's what you meant in your first solution."
crypto,32gh1v,Natanael_L,1 point,Tue Apr 14 10:45:49 2015 UTC,Context? Can you write out what you mean?
crypto,32gh1v,DoWhile,2,Tue Apr 14 11:22:57 2015 UTC,You wrote    so that you then do gx_m * H_di = gx_i and x_m * H_di = x_i to get the new keypair    but then these two equations are incompatible.  You either raise gx_m to the H_di in the public key (which seems fine) or you add H_di to x_m in the private key (which seems insecure)
crypto,32gh1v,Natanael_L,1 point,Tue Apr 14 11:47:08 2015 UTC,Here's my draft of what I intend to post to the crypto mailing lists: http://pastebin.com/1RKVW2Fn
crypto,32gh1v,DoWhile,1 point,Tue Apr 14 11:35:49 2015 UTC,I'd say post it and see what happens... I think the solution is overkill still...
crypto,32gh1v,skintigh,1 point,Tue Apr 14 12:15:15 2015 UTC,"How about if you write something revealing ownership, sign it, but then only publish the signature. Later you could reveal the plaintext and it could be validated with the signature. Just make the text long enough that no one can brute force the plaintext."
crypto,32gh1v,Natanael_L,1 point,Mon Apr 13 18:40:36 2015 UTC,how would this plaintext be generated?  seems like generating it would be effectively equivalent to rolling my own crypto
crypto,32gh1v,bitwiseshiftleft,1 point,Mon Apr 13 19:01:08 2015 UTC,"HMAC of a unique key and identifying message, as part of the signed message? Edit: probably not what you were looking for.   The message can just be normal text that explicitly identifies you, unambiguously."
crypto,32gh1v,rosulek,12,Mon Apr 13 19:55:17 2015 UTC,"The signer can append a random secret string to the document, and then sign it.  She can reveal her identity later by revealing the random secret string.  This is halfway between a signature and a commitment.  Edit: see /u/Natanael_L's comment below for a very good alternative."
crypto,32gh1v,bitwiseshiftleft,4,Mon Apr 13 17:07:57 2015 UTC,"If I don't know the entire message that was signed (i.e., original document + random secret), then I cannot verify the signature. In this approach, the signature could not be verified until after the signer reveals herself."
crypto,32gh1v,fracai,1 point,Mon Apr 13 22:09:11 2015 UTC,"This is true. Then again, a signature without a signer doesn't mean very much."
crypto,32gh1v,iamforgettable,-1,Tue Apr 14 02:23:02 2015 UTC,"Publish two signatures. One of the document, one of the secret. Both are signed with the same key."
crypto,32gh1v,david55555,3,Mon Apr 13 23:06:24 2015 UTC,"I could be wrong but doesn't that introduce the original problem highlighted by OP that ""The signer of the document can be deduced if you have a list of all public keys (simply try them all)."" ?"
crypto,32gh1v,MathAndFerrets,1 point,Tue Apr 14 04:21:47 2015 UTC,"This is such an obvious and easy solution. The only concern I have is if a third party wants to come forward and claim the signature, and does so by generating a signature collision.  Alice signs M+R with her key to generate the signature S. Bob wants to claim that S is his signature so he tries to brute force signing M+N for a large number of values of N. Could he generate a signature collision?"
crypto,32gh1v,trofnarv,11,Mon Apr 13 20:08:50 2015 UTC,"No more easily than any other collision problem. Which is to say, if you aren't idiotically constructing your signature scheme or using a hashing algo that is known to generate collisions, the method will work fine... For a one-time reveal"
crypto,32gh1v,thatmorrowguy,1 point,Mon Apr 13 20:40:31 2015 UTC,"I came here to post this. Someone could brute force the appended data which would be considerably easier than brute forcing the encryption itself, but you just have to make it long enough that that is more effort/expensive than its worth."
crypto,32gh1v,Natanael_L,7,Mon Apr 13 21:03:32 2015 UTC,Simply appending a GUID or some other comfortably long salt to the document would leave Bob having to try 2128 combos - enough to be a pain.
crypto,32gh1v,bitwiseshiftleft,1 point,Mon Apr 13 21:19:00 2015 UTC,OP said in another comment that he don't want to store any state (like secret strings).
crypto,32gh1v,Natanael_L,1 point,Mon Apr 13 21:18:19 2015 UTC,"As in /u/rosulek's response, you can derive the random secret string from a single secret key using a PRF."
crypto,32gh1v,Natanael_L,1 point,Mon Apr 13 21:36:09 2015 UTC,"if the signer signs the document with some verification key and then reveals her identity, wouldn't she need to generate a new verification key for a subsequent document to be anonymous? would a simple hash get around this (rather than a signature)?"
crypto,32gh1v,Natanael_L,3,Mon Apr 13 22:16:36 2015 UTC,"Yes, it is unique per document."
crypto,32gh1v,dafukwasdat,4,Mon Apr 13 22:30:16 2015 UTC,"Ring signatures can do it.  Some versions don't allow you to later on show who signed it without revealing the private key, some does allow you to show it while keeping the key secret, some allow you to see which signatures was made by the same person without revealing who it is, etc... There's many different constructions.   Edit: here's the references I can find;  http://link.springer.com/article/10.1007%2Fs11390-007-9096-5  http://dl.acm.org/citation.cfm?id=1760582 - one-time anonymity, reuse deanonymizes"
crypto,32gh1v,pkpearson,1 point,Mon Apr 13 16:48:35 2015 UTC,"hmm. both of those come close, but due to the construct of being a ring signature, allow tracing for multiple messages and one identity (even if that identity is a group), no?  that is, if Alice says she wrote message X she would not want anyone to know she wrote message Y. From the abstracts you linked I am not seeing how that is possible."
crypto,32gh1v,pkpearson,2,Mon Apr 13 18:18:01 2015 UTC,"Some versions have that property, accountability, some doesn't."
crypto,32gh1v,Natanael_L,4,Mon Apr 13 19:24:17 2015 UTC,"I'm by no mean a crypto-expert, and please correct me if I missed something, but could you not just:    create a detached signature and encrypt it with a symmetric cipher => nobody knows except you who the signer is once you want to reveal that the signature is indeed yours, you simply reveal the password used for the symmetric cipher"
crypto,32gh1v,meTa_AU,1 point,Mon Apr 13 19:49:24 2015 UTC,"Why not simply hash the document with a secret string appended, then publish the hash?  Revealing the secret string proves that you knew the document at the time.  Depending on your needs, you might even embed your name in the secret string."
crypto,32gh1v,meantofrogs,1 point,Tue Apr 14 01:03:41 2015 UTC,If you release the secret string someone else can claim to have released it as well.  A signature actually gives the real author credit.  This works under the assumption that the entire document is not tampered with.
crypto,32gh1v,MacroMeez,2,Tue Apr 14 01:10:20 2015 UTC,"The secret string can be ""Signed by John Doe with random number 123...789;"" but we're really being forced to guess at the OP's requirements."
crypto,32fevh,SushiAndWoW,6,Mon Apr 13 10:29:00 2015 UTC,"I've worked extensively on those issues but haven't gone deep on them in a few years. I do, however, know some people who might fit the bill. PM me and I'll get you sorted with some contact info or other resources."
crypto,32fevh,JamesVasile,1 point,Mon Apr 13 12:17:04 2015 UTC,Thanks! I sent you a PM.
crypto,32fevh,Natanael_L,5,Mon Apr 13 13:37:25 2015 UTC,Try these mailing lists for faster answers;  http://lists.randombit.net/mailman/listinfo/cryptography  http://www.metzdowd.com/mailman/listinfo/cryptography
crypto,32fevh,indrora,5,Mon Apr 13 10:53:14 2015 UTC,"You may consider emailing the EFF. Legal@eff.org should get you someone from the Coders Rights project who has experience, especially when it comes to the quagmire that is crypto law."
crypto,32fevh,indrora,1 point,Mon Apr 13 17:45:34 2015 UTC,Interesting option; I would not have thought of that. Thank you!
crypto,32fevh,817682,5,Mon Apr 13 19:53:26 2015 UTC,"The EFF, contrary to popular belief, isn't just about going after the big awards. They're totally all for working with small groups to help navigate all this insanity."
crypto,32fevh,817682,1 point,Mon Apr 13 19:59:42 2015 UTC,A previous company I worked for used Steptoe & Johnson:  http://www.steptoe.com/practices-133.html
crypto,32fevh,Zarutian,1 point,Mon Apr 13 17:06:05 2015 UTC,"Ah yes! I'm glad you mention them, because I found them on Google. :) Do you happen to know what was the company's experience with them?  I am worried, in their case, that the sum of quality, visibility, and cost-effectiveness tends to be a constant. Or rather that, offered those three, you usually only get to choose two. And they seem visible."
crypto,32fevh,JamesVasile,2,Mon Apr 13 17:15:23 2015 UTC,"They were expensive, but they got us what we needed.   For what it's worth, the issue they helped us with was almost precisely what you're describing."
crypto,32fevh,Natanael_L,1 point,Mon Apr 13 19:06:29 2015 UTC,"Excellent, thank you!"
crypto,32fevh,Natanael_L,1 point,Mon Apr 13 19:53:03 2015 UTC,I think it would be simplest for you to just keep the company outside of USA. Much less hassle that way but I am not an American Lawyer.
crypto,32fevh,congregatio,2,Mon Apr 13 19:26:16 2015 UTC,"This may be a more difficult option. The cause for the change is that I wish to move to the US, which will make the company 100% US owned. A company that's 100% US owned is considered to be a US company by the IRS, even if it's incorporated elsewhere. It may even be considered a US company for purposes of crypto export law, which is one of the questions I need to verify with an expert. And not least, a 100% US owned company will find itself in very scarce supply of banking abroad, because few foreign banks will willingly bear the burden of the US Foreign Account Tax Compliance Act.  Chances are, it will be much simpler and more transparent to reincorporate in the US. But this is one of the things I need to verify with an expert."
crypto,32chmx,HighCode,10,Sun Apr 12 16:58:31 2015 UTC,"Some things mulling around my head:  Encrypted email for the masses - software like TextSecure is doing a great job at making it ridiculously simple to send encrypted IM's - there is no easy equivalent for email - Google are working on some things in this space with end-to-end (https://github.com/google/end-to-end) but I still think there is much to do in this space.  Key management - Related to the above the only people I am aware of doing work in the key management space are keybase.io. They have a cool idea,  although I'd prefer not to go through a centralized entity for my keys.  Trust - Make Convergence (https://en.wikipedia.org/wiki/Convergence_%28SSL%29) a thing. Alternative - make it trivial to see who I am trusting at any given time (root certs, intermediary certs etc.)"
crypto,32chmx,sarahjamielewis,4,Sun Apr 12 17:35:46 2015 UTC,"Bote mail is fairly simple, although it has a 90's style webmail interface and runs on top of I2P.   Hardware devices like Trezor (Bitcoin hardware wallet) is probably going to be the best choice for key management."
crypto,32chmx,Natanael_L,3,Sun Apr 12 17:47:30 2015 UTC,"It is an interesting point, however, key management extends far beyond the storage of keys, which is why I brought up keybase.  I have friends and contacts all over the world, it is impractical for me to meet them whenever they change keys. We need system(s) to cope with revocations and updates in ways which are cryptographically sound.  This probably means we need to rethink the way we think about identity which is at the core of the problem. Web of trust has clearly failed practically as a model. Keybase integrating with social hubs have introduced some new thinking to the practical space - essentially with the web I can build my own trusted identity by cross linking various domains that I own with the same information - can this idea be expanded upon to define a concept of distributed cryptographically sound identity? Or is there another approach we can take to this?"
crypto,32chmx,sarahjamielewis,4,Sun Apr 12 17:54:58 2015 UTC,"Namecoin is the decentralized version of keybase, and older. Builds on Bitcoin's blockchain design to create a registry for DNS and user profiles, and more."
crypto,32chmx,Natanael_L,1 point,Sun Apr 12 18:18:05 2015 UTC,"Namecoin certainly could act as a component for such a system, but there is still much to be done e.g. how do I determine the owner of id/blah is actually the blah I want to talk to?   Systems like Namecoin are not sufficient for identity/key management - otherwise you are back to the same issue. Take for example a scenario that needs to be solved before we can really take the idea of mass-distributed crypto identity seriously  ""I lost my private key, how can I re-establish my identity?"" - with just Namecoin my only option is to create a new id/ and somehow get the word out. With keybase, I can cross link many different social profiles to make a user sufficiently confident of the change (or a massive compromise :) ) - essentially, any system has to take the ecosystem in as a whole and understand much more than a single protocol or store to be able to confidently make assertions about revocation and updates."
crypto,32chmx,sarahjamielewis,3,Sun Apr 12 18:28:17 2015 UTC,"My Namecoin profile is +Natanael, in Namecoin that's registered as u/Natanael (DNS starts with d/). You exchange that over the same channels as any other nickname. You'll find my blog and public keys in that entry. You can cross-link your various accounts and your Namecoin profile for bootstrapping."
crypto,32chmx,Natanael_L,12,Sun Apr 12 18:33:23 2015 UTC,"Cryptocurrency is pretty much the wild west of cryptography right now, it's where I enjoy dabbling my time. Tons of projects out there worth looking over."
crypto,32chmx,MrRGnome,3,Sun Apr 12 17:24:49 2015 UTC,"If you're looking to learn crypto and programming in tandem, maybe see what cryptopals.com has to offer"
crypto,32chmx,petester,3,Sun Apr 12 20:01:42 2015 UTC,"I have recently started an open source project for managing x509 CAs and certs. Currently very different approach to Let's Encrypt, this is more designed for internal CAs scaling from one server to thousands, from 1 admin to enterprises. Hoping to get the first alpha release out by the end of the month.  http://pki.io  Always looking for more help :)"
crypto,32chmx,zeroXten,2,Sun Apr 12 22:33:05 2015 UTC,Check cryptool: http://cryptologie.net/article/249/cryptool/
crypto,32chmx,poopinspace,2,Sun Apr 12 18:45:37 2015 UTC,"Wow, thats pretty interesting."
crypto,32chmx,uranusaurus_rekt,2,Wed Apr 22 20:13:22 2015 UTC,"There are some projects that really need love, but it all depends on your expertise.  CryptoCat Android development has stalled. I think Nadim isn't all that interested in personally dragging it over the finish line.  Briar has huge promise, but it's a one-man show, and that has made development too slow.  I2P is in a sad state of affairs and badly needs more devs. More importantly, it needs big picture and academic work.  Tox is an active project where additional devs can be onboarded and their work will make it into production on a growing project.  Mailvelope is a one-man dev team, last I checked. It's crucial infrastructure for a ton of at-risk users. If you have javascript and browser dev skills, put some work there and you'll be helping a lot of people who most need it.  That's my list off the top of my head. If you want to get specific about your interests or skills, I can help you find your way to a decent project and perhaps make introductions.  Thanks for wanting to jump in!"
crypto,32chmx,JamesVasile,1 point,Mon Apr 13 12:23:55 2015 UTC,Bitmask or https://leap.se could be good..
crypto,32chmx,an-anarchist,0,Mon Apr 13 08:21:45 2015 UTC,"Make an OP_RETURN library for bitcoin and your favorite language.  The Bitcoin protocol is such a pain in the ass and a total mess of encodings, multiple hashing algorithms and mixing of endianness - so a library to ease the pain of making OP_RETURN transactions would be a blessing for anyone trying to build applications on top of the Bitcoin blockchain."
crypto,32b4xt,Cannon-C,6,Sun Apr 12 05:54:47 2015 UTC,Use many entropy sources and combine their results. That's your best bet.
crypto,32b4xt,Natanael_L,2,Sun Apr 12 08:12:37 2015 UTC,"Yeah, and these are not necessarily complex routines. Avalanche noise, audio and video samples (of static and cosmic rays), disk and keyboard timing, etc. are imaginable for key generation on local machines. Servers are tougher because 1) virtual machines can be re-played automatically 2) with no control over the hardware, you also give up control over the systems that contribute entropy. Given that ARM processors are emergent in the server realm, I think that's the submitter's context.   combine their results   We see a lot of attention paid to the combining routines. Fortuna, for example."
crypto,32b4xt,SausagePump,1 point,Tue Apr 14 07:40:57 2015 UTC,djb's what if's: https://groups.google.com/forum/#!topic/randomness-generation/eNnepJ_65eQ
crypto,32b4xt,q34tg6w7,1 point,Fri Apr 17 16:49:57 2015 UTC,"1: Continous entropy collection is useful for VMs that might get duplicated at any point in time, as well as systems with imperfect protection against TEMPEST but who just needs integrity, not confidentiality.   2: If one of your entropy sources is malicious AND capable of attacking you (has access to sensitive data or can manipulate sensitive systems), what's the chance it won't have other effective venues of attack besides messing with your RNG?"
crypto,32b4xt,Natanael_L,1 point,Fri Apr 17 17:05:46 2015 UTC,I'm just sayin'.....
crypto,32b4xt,q34tg6w7,6,Fri Apr 17 22:43:47 2015 UTC,Check this news out. It talks about FreeBSD and their decision not to trust Intel and Via.
crypto,32b4xt,HighCode,1 point,Sun Apr 12 16:53:11 2015 UTC,"Built-in RNG could be tampered with, but just generic ones cannot, it is impossible. The CPU has no way of knowing what it is currently executing, and thus it has no way of knowing what, when, or how to change the results. On top of that, any false-positive would crash or corrupt the system. Even if a micro-code update was produced by Intel or AMD that looked for common RNG systems, it is super easy to detect if your system is compromised, since the expected outputs of any algorithm can be compared to the actual outputs the processor gives you. If they do not match, you are compromised."
crypto,32b4xt,_ihatemyself,0,Mon Apr 13 00:07:49 2015 UTC,"I read an article where the author speculated that it is probably incredibly hard or impossible to backdoor a processor in that way. The reason can be stated quite simply: try and come up with your own interpreted language or virtual machine. Then run your favorite PRNG in that. Now think about how the producer of the processor could possibly influence the calculations without knowing what the abstraction layer was going to be.  Bottom line is processors are probably safe. Storage media, however, are nowhere near safe."
crypto,32b4xt,MrMasterplan,8,Sun Apr 12 06:43:50 2015 UTC,"While true, one should be very careful about trusting the built-in RNG in intel processors (RDRAND). It's also probably safe, but there's no way to verify the entropy pre-whitening, which is a bit disturbing. That said, using it as one of several entropy sources in a generator like Fortuna should be fine."
crypto,32b4xt,SAI_Peregrinus,1 point,Sun Apr 12 08:23:37 2015 UTC,Reminds me of the petition on Change.org to remove RDRAND from /dev/random. From Linus:   Torvalds stated that the function was being used as just “one of many inputs” to the random pool and that it was used to improve the overall randomness. Torvalds iterated that rdrand did in fact improve the overall quality of random numbers generated through /dev/random. Ending his reply with the statement “you’re ignorant.” The petition is now closed.
crypto,32b4xt,SausagePump,1 point,Wed Apr 15 17:29:50 2015 UTC,"Exactly. It's potentially backdoored, but seems fine to external tests and some of the engineers who designed it say its fine and are generally quite trustworthy. So I'd bet it's not backdoored, but I'd use it as an entropy input to a CSPRNG and not as a PRNG in itself."
crypto,32b4xt,SAI_Peregrinus,1 point,Wed Apr 15 23:52:28 2015 UTC,"I'd use it as an entropy input to a CSPRNG and not as a PRNG in itself.   JvN: ""Anyone who considers arithmetical methods of producing random digits is, of course, in a state of sin.""  So, /u/MrMasterPlan is advocating sin. And to some degree, I am, too. But submitter would be OK with a hand-crank entropy drive. And maybe singling out the USA isn't wise. Consider knowing whether or not your sources of entropy are say, made in China. But, servers have SSL accelerators for a reason. And the UK sells one."
crypto,327wab,johnmountain,13,Sat Apr 11 10:34:33 2015 UTC,"I mis-read this as ""the US NSA, Chinese Huawei, and Canadian Intelligence showed up together at IETF to vote against stateless nonce standards"" and I wasn't surprised..."
crypto,327wab,rflownn,12,Sat Apr 11 12:04:31 2015 UTC,"Three intelligence agencies walk into a bar...  On the other hand, the IETF doesn't decide things by vote. (RFC7282)"
crypto,327wab,JoseJimeniz,10,Sat Apr 11 14:12:11 2015 UTC,Im tired and on a phone. Can someone rewrite that in simple english with the abreviations unwound? +1 internet point
crypto,327wab,RZZRGRRL,22,Sat Apr 11 14:34:07 2015 UTC,"A well known crypto guy was told that intelligence agencies and some companies are trying to make sure that crypto that works safely even if the devices that use it has a ""hiccup"" or ""zones out"" (forgets the previous state, and therefore might reuse nonces) will not be standardized. Nonces are used to ensure that the ciphertext turns out differently even when the key is reused. Using the same nonce multiple times for the same key can often leak secret data."
crypto,327wab,Natanael_L,3,Sat Apr 11 15:37:47 2015 UTC,Itd be funnier to me if they gave technical reasons against the proposed standard and this is just fear for the purpose of fear.
crypto,327wab,dvito,5,Sat Apr 11 16:03:20 2015 UTC,"Most technical reasons against larger nonces (the primary solution, allowing RNGs to be used each time with good security margins) aren't really relevant for anything without legacy compatibility requirements."
crypto,327wab,Natanael_L,7,Sat Apr 11 16:34:22 2015 UTC,"It does remind me of this:   The IPSEC standards also mandated support for the ""null""      encryption option (plaintext hiding in supposedly-encrypted      packets), for 56-bit Single DES, and for the use of a 768-bit      Diffie-Hellman group, all of which are insecure and each of which      renders the protocol subject to downgrade attacks.   https://www.mail-archive.com/cryptography@metzdowd.com/msg12325.html  As we've seen with the recent SSL3 attack, it's sometimes easier to break an encryption scheme if you can downgrade it to weaker algorithms. It helps if you make the whole protocol overly complex as well to the point where it's easy to mess up. That sounds like a very sound strategy for the NSA to use within standards groups while still preserving ""plausible deniability"" and being relatively subtle about it."
crypto,327wab,conradsymes,3,Sat Apr 11 17:50:03 2015 UTC,"The IPSEC standards also mandated support for the ""null"" encryption option (plaintext hiding in supposedly-encrypted packets),    It's authentication-only without encryption. For some circumstances, such as videos or data that does not need secrecy, it makes sense.  The overhead of HTTPS on the otherhand is getting pretty low."
crypto,327wab,rainsford21,2,Sun Apr 12 10:28:24 2015 UTC,"But the technical arguments aren't just limited to the extra size of the nonce; the randomness requirement is also important.    Using a random nonce instead of a deterministic nonce increases the protocol's reliance on the RNG for both security and performance.  Making every encrypted packet or message rely on the RNG means every packet is an opportunity for a security breaking RNG failure or RNG limited throughput.  Of course it's possible to build an RNG that's both secure and fast, but now you've made doing so a requirement for every implementation of the protocol.  This doesn't necessarily seem like an easier problem to solve than the state management one, particularly in the case of high-speed hardware implementations.  Edit: Not saying non-random nonces are necessarily the best approach either.  I think there are reasonable arguments for both methods."
crypto,327wab,Natanael_L,2,Sun Apr 12 18:49:18 2015 UTC,"Use the RNG for the first value, use a counter from there or repeat hashing. Feel free to add a deterministic input if you wish! As long as the mixing function is secure, no entropy source is harmful."
crypto,327wab,phyzome,2,Sun Apr 12 19:02:55 2015 UTC,"As long as the mixing function is secure, no entropy source is harmful.    And as long as none of the entropy sources can see/control the others."
crypto,327wab,Natanael_L,2,Tue Apr 14 11:38:28 2015 UTC,"If you use XOR or another mixing function where knowledge of the other inputs allow you to control the output, yes. As long as the computation itself isn't tampered with, mixing with hashes and similar functions is safe.  If your malicious entropy source can read all other inputs but your mixing function is secure, the worst thing it can do is to leak them through a sidechannel or act as a backdoor, but if you isolate the entropy sources properly then you're safe. You're not supposed to leave unverified code/hardware with unlimited access to your system, and in its presence it doesn't matter if you use its input or not anyway ..."
crypto,327wab,phyzome,1 point,Tue Apr 14 11:41:50 2015 UTC,"Ah, I see -- XOR'ing with RDRAND might be bad, but using a more involved mixer might allow you to be secure against attacks by Intel."
crypto,327wab,Tahoe_Laughs,1 point,Tue Apr 14 11:50:25 2015 UTC,"Huawei might care about some technical issue with larger nonces, but why would the NSA care about that?"
crypto,327wab,xJoe3x,3,Sat Apr 11 19:01:18 2015 UTC,Information assurance (protecting national security systems) is part of their mission and they make use of commercial products.
crypto,327wab,zmist,4,Sun Apr 12 00:58:54 2015 UTC,That is not what the NSA means by information assurance. It means their mission is to provide assurance that they have access to all information ;)
crypto,327wab,dvito,2,Sun Apr 12 02:28:41 2015 UTC,Because they have vested interest in working cryptography in addition to breaking it?
crypto,327wab,TotesMessenger,1 point,Sat Apr 11 23:25:56 2015 UTC,"This thread has been linked to from another place on reddit.   [/r/devel] Zooko: ""I received private communication stating that NSA, Huawei, and Canadian intel show up at IETF and vote against stateless nonce standards."" : crypto   If you follow any of the above links, respect the rules of reddit and don't vote. (Info / Contact)"
crypto,327rbq,nischalsamji,3,Sat Apr 11 09:03:08 2015 UTC,"There are several reasons why an RSA key could be weak.  It boils down to being able to recover P and Q.  Attacks are based on mathematics and range from easy to difficult.  If you are well-versed in mathematics, you might enjoy reading about Coppersmith's attack. However, most of the time, implementation errors are what causes RSA to be weak.  You should read up on safe primes:  Safe Primes  and also security articles on RSA fails for more information.  tl;dr P, Q should be the same length, not too close to each other, random, and P-1, and Q-1 should have large prime factors.  Why? Because the best known mathematical attacks can break things not of this form.  Tomorrow, there might be even better attacks...."
crypto,327rbq,DoWhile,1 point,Sat Apr 11 10:57:32 2015 UTC,"Noob Question: If such restrictions are placed on picking P & Q, doesn't that mean there are very few P's and Q's to pick from, and thus someone with a dictionary of all of possible P's and Q's could test them all out quickly?"
crypto,327rbq,_ihatemyself,3,Sun Apr 12 02:40:21 2015 UTC,"Even with such restrictions, the number of safe primes and strong primes is too large to create a dictionary. There are around 10140 512-bit safe primes."
crypto,327rbq,nsa_at_home,1 point,Sun Apr 12 03:47:27 2015 UTC,Thanks.
crypto,326plo,lmm7425,7,Sat Apr 11 01:22:11 2015 UTC,"I bet you could modify the message in the source, then install it from source to apply."
crypto,326plo,DemandsBattletoads,5,Sat Apr 11 06:37:16 2015 UTC,"This is the relevant function, if somebody actually wants to do it:  https://git.kernel.org/cgit/utils/cryptsetup/cryptsetup.git/tree/lib/setup.c#n458"
crypto,326plo,scattered_reckoning,6,Sat Apr 11 08:05:02 2015 UTC,"So apparently it uses gettext? Then you don't even need to change the source code, just create a new translation file."
crypto,326plo,Creshal,3,Sat Apr 11 10:02:58 2015 UTC,The beauty of Free software.
crypto,326plo,na85,1 point,Sat Apr 11 06:46:38 2015 UTC,"I don't know if Arch's scripts for building the initramfs support it, but on debian/ubuntu you can specify a custom script in /etc/crypttab to supply the password, and that script can print to console and read input."
crypto,3287u4,Dr-Maximum,8,Sat Apr 11 13:25:27 2015 UTC,"GPA is a gui frontend for GPG, they aren't different things."
crypto,3287u4,mvario,4,Sat Apr 11 13:36:36 2015 UTC,Ah alright  so GnuPG is actually the same as GPG ?  And GPA is just a user interface for GPG ?
crypto,3287u4,mvario,6,Sat Apr 11 14:14:31 2015 UTC,yes
crypto,3287u4,Natanael_L,2,Sat Apr 11 14:50:35 2015 UTC,"FYI, it is fine (and encouraged) to ask multiple questions in the same post if they are related to the same topic, instead of making multiple posts. You can also ask followup questions and additional questions in the comments."
crypto,3286l6,Dr-Maximum,4,Sat Apr 11 13:10:44 2015 UTC,Pretty Good Privacy (PGP) is proprietary software written by Phil Zimmerman and released in 1991 Gnu Privacy Guard (GPG) is similar software released in 1999 under the GPL open source license. OpenPGP is an IETF standard with which both pieces of software are compliant.
crypto,3286l6,rusty_shaklefurd,6,Sun Apr 12 00:03:54 2015 UTC,"From the GPG website, ""GnuPG is a complete and free implementation of the OpenPGP standard as defined by RFC4880 (also known as PGP)."""
crypto,3286l6,tenmilez,2,Sat Apr 11 13:19:02 2015 UTC,"Right so ""GPG"" is actually the program ""GnuPG"", witch uses the ""OpenPGP standard"", witch is also known as just ""PGP"" ?"
crypto,3286l6,Natanael_L,9,Sat Apr 11 13:21:59 2015 UTC,"PGP is the original software, the OpenPGP spec was eventually created based on it, GPG implements OpenPGP."
crypto,3286l6,bontchev,2,Sat Apr 11 13:58:00 2015 UTC,ha alright ! cheers
crypto,3286l6,grymoire,2,Sat Apr 11 14:12:33 2015 UTC,"There are differences other than GPG being OpenSource and PGP not. The two programs are not fully compatible with each other (I'll explain this in a moment). GPG implements the OpenPGP standard. PGP (2.x, the ""original"" one released in source by Phil Zimmermann, not the latest incarnations by McAfee and Symantec) does not (it didn't exist at the time). PGP implements the RFC1992 ""standard"". GPG has only a partial implementation of that (and the newest version of it has none).  Here is how the compatibility issue stands:  If you are using the latest version of GPG (2.1.*), forget about communicating with a PGP 2.x user. You cannot. PGP 2.x is no longer supported. The stated reason is that PGP 2.x uses MD5 as a hash function and this algorithm is nowadays considered broken (it's easy to find collisions in real-time).  If you are using the earlier versions of GPG (1.* and 2.0.*), you can communicate, to a certain degree, with a PGP 2.x user - but not fully. In particular:   Anything that PGP 2.x can produce, GPG can handle. GPG can encrypt, detach-sign and clearsign in a way that PGP 2.x can understand. GPG can sign-and-encrypt in a way that PGP 2.x can understand, but it requires 5 separate commands (I kid you not), of which 4 are GPG invocations and 1 is a file copying (concatenation) command. And, no, you can't pipe them in a single line. GPG cannot sign (without encrypting) a binary file in a way that PGP 2.x can understand. It is simply not freaking possible. This is due to a bug - GPG outputs the packets in the wrong order (consistent with the OpenPGP standard, but not with the RFC1992 standard used by PGP 2.x, yes, even if the --rfc1992 option of GPG is used). The developers decided that it was not worth fixing the bug because support for PGP 2.x was about to be dropped entirely anyway."
crypto,327ubg,Cannon-C,3,Sat Apr 11 10:00:30 2015 UTC,"Suggested reading:   http://superuser.com/a/541162/260515 http://security.stackexchange.com/questions/72581/new-pgp-key-rsa-rsa-or-dsa-elgamal   tl;dr: similar key sizes have similar security guarantees. Key generation, signing and verification have different speeds."
crypto,327ubg,PdoesnotequalNP,2,Sat Apr 11 11:19:59 2015 UTC,"DSA requires a good source of randomness not only for key generation but also during the creation of signatures. Creating DSA signatures involves picking a random number and you must not ever pick the same number for the same key twice. Also, DSA used to be restricted to 1024 bit keys. I think that's why GnuPG switched from DSA to RSA as default for the main key. The only advantage of DSA is that signatures are more compact. But that's not important to you, apparently … in which case I would stick to RSA.  As for ElGamal versus RSA: An encrypted ElGamal message is simply about twice the size of an encrypted RSA message for the same security level. The reason why GnuPG used to defaul to ElGamal was probably related to patents. Now, RSA patents have expired. Nowadays, RSA is more convenient but not necessarily safer than ElGamal. Stick to RSA.  Summary: The current GnuPG defaults (RSA+RSA) are good w.r.t. security."
crypto,327ubg,sellibitze,1 point,Sun Apr 19 04:29:03 2015 UTC,Thank you. Probably the best short simplified answer on this I have seen.
crypto,322tij,BurungHantu,8,Fri Apr 10 03:02:50 2015 UTC,Very nice. Anyone know why ddwrt didn't make the router firmware list?
crypto,322tij,yiersan,5,Fri Apr 10 07:10:02 2015 UTC,"Thanks for your suggestion. Everyone can participate: https://www.privacytools.io/#participate  I've just added DD-WRT to the router firmware category under ""worth mentioning""."
crypto,322tij,dx87,8,Fri Apr 10 07:49:56 2015 UTC,"You might want to add some more information about privacy badger.  When you first install the extension it won't block anything, but as you surf the web it ""learns"" what is tracking you and will start to block whatever was tracking you.  It is also in beta so there will be occasional issues.  I've been using it for a while and there was a point where it accidentally blocked every google website, even if it wasn't tracking you, and a fresh install wasn't blocking anything until it the addon was disable/re-enabled.  The team working on it is very receptive to bug reports on their Github page (https://github.com/EFForg/privacybadgerfirefox), though, and works quickly to fix any issues.  I highly recommend it because it fits a sweet spot where it allows ads that don't track while disabling things that do track you.  I use it instead of an ad blocker because it still allows sites to make money with ads as long as they respect my privacy."
crypto,322tij,johnmountain,6,Fri Apr 10 11:27:29 2015 UTC,"There's another encrypted email service I keep seeing pop up, but I haven't looked too much at it: https://whiteout.io/  There's LavaBoom, too, but again I don't know much about it: https://lavaboom.com/about  There's also https://peerio.com/ which is more like ""closed"" email system, though (only works with Peerio accounts). I guess you could add it to ""email alternatives"". The main encryption system behind it, miniLock has already been audited, including by Matthew Green.  You might want to add DNSChain to the DNS list, too.  You should tweet your site at https://twitter.com/sggrc . He usually loves it when he stumbles upon ""security tools charts"" and such. He might give it a shout out in his Security Show next week. Worth a try."
crypto,322tij,johnmountain,2,Fri Apr 10 08:39:05 2015 UTC,"Thanks for your suggestions, johnmountain. Whiteout sounds great, but you need an invite code right now to request a mailbox. I might add it anyway to a new ""worth mentioning"" section. The service looks really promising.  The Lavaboom sign up process seems to be broken currently. Nothing happens after clicking ""Reserve username"" here: https://lavaboom.com/signup - Does it work for you?  Peerio looks good, but our focus / first choice is more about open source software. Do you know if they are planning to release the source code?  First time I hear about DNSChain. But what I find after a quick research worries me:   DNSChain Considered Harmful + reddit comments  TL;DR - DNSChain erroneous claims to have passed a “peer review” process.  However, its most important peers, Namecoin developers, have rejected it.  This has been the reaction of every Namecoin developer who has evaluated the project (over four at this point).  The project misrepresents its security model, its design is unfixable, it should not be used in any nonlocal capacity.   Btw, I've just tweeted Steve. Thanks! :)"
crypto,322tij,kurav,2,Fri Apr 10 09:54:57 2015 UTC,"Interesting about DNSChain, I haven't seen that.  Lavaboom seems to have experienced some issues lately, including a DDoS attack and losing a developer:  https://twitter.com/LavaboomHQ  Peerio as well as miniLock are open source:  https://github.com/PeerioTechnologies/peerio-client  https://github.com/kaepora/miniLock  Audit of miniLock (although in this case an audit of Peerio itself would be preferable): https://cure53.de/pentest-report_minilock.pdf  I think what isn't open source about Peerio is basically the storage service. Their monetization model seems to be like: ""Allow users to encrypt end to end with native clients, but they can store those encrypted files on our servers for easy access/transmission - 1GB free, after that you pay"". So in that way it's kind of like Spideroak, except you can actually ""communicate"" through an e-mail like interface with Peerio.  Peerio without a ""third-party"" storage service is essentially miniLock (encrypt and send the file over whatever medium you want)."
crypto,322tij,orthecreedence,3,Fri Apr 10 22:11:14 2015 UTC,"I would be careful about writing that ""CryptoCat is developed by encryption professionals to make privacy accessible to everyone."" At least this article found some very serious shortcomings in its implementation in an older version, and the response of the head developer of Cryptocat further seemed to indicate that he at least at the time lacked full understaning of the cryptographic algorithms employed by the software. (Less harsh follow-up to the original article here.)"
crypto,322tij,orthecreedence,2,Fri Apr 10 17:20:45 2015 UTC,I've replaced it with the Wikipedia description. Thanks for your feedback.
crypto,322tij,jus341,1 point,Sat Apr 11 01:39:59 2015 UTC,"Don't forget Turtl, private note-taking (barebones Evernote alternative). We're working really hard on releasing Android/iOS apps right now so once that's don'e we'll have coverage on Desktop (Win/Linux/Mac) and mobile!"
crypto,322tij,jus341,2,Sat Apr 11 01:21:26 2015 UTC,"Thanks for your suggestion. Turtl was added here: https://www.privacytools.io/#productivity under ""worth mentioning""."
crypto,322tij,om0tho,1 point,Sat Apr 11 01:30:43 2015 UTC,"Cool, thanks!"
crypto,3242x4,peaches-in-heck,3,Fri Apr 10 12:28:09 2015 UTC,"Theoretically, you can't hide anything from the user of the device, if it's rooted. You can, however, obfuscate it. For example, by dividing the key in about 8 different strings in random order and then concatenate them when you need the plaintext. This way the key will be in plain text form for the minimum time required, and only in RAM.  Another approach would be to encript it symmetrically with some constant on the device (MAC, IMEI o AndroidID)."
crypto,3242x4,roobre,1 point,Fri Apr 10 13:54:09 2015 UTC,"Thanks, this was my original thinking, so thanks for validating."
crypto,3242x4,KayRice,3,Fri Apr 10 22:37:30 2015 UTC,"You're probably just hurtling legitimate users more than ""thwarting attackers"""
crypto,3242x4,Natanael_L,1 point,Fri Apr 10 14:51:44 2015 UTC,"Yes, I know.  Its for a specific use case.  Cannot say more."
crypto,3242x4,Natanael_L,1 point,Fri Apr 10 22:38:04 2015 UTC,"Are you trying to create a form of DRM protection for the database? That's not possible to achieve with strong security (unless the mythical cryptographic indistinguishable computation ""blackboxes"" turns out to be practically secure and with reasonable performance. I wouldn't bet on that, however.)"
crypto,3242x4,JoseJimeniz,1 point,Fri Apr 10 14:24:40 2015 UTC,"Not DRM, I am trying to protect elements of the database from being overwritten by a malicious user."
crypto,3242x4,sixstringartist,1 point,Fri Apr 10 22:38:39 2015 UTC,Isn't that the same thing?
crypto,323323,poopinspace,2,Fri Apr 10 04:29:53 2015 UTC,I also enjoyed this guy's video on Differential Power Analysis. Definitely makes the topic more approachable for a newcomer.
crypto,322vl9,conradsymes,3,Fri Apr 10 03:20:42 2015 UTC,http://safecurves.cr.yp.to/rho.html  so ~2125 EC additions
crypto,322vl9,floodyberry,2,Fri Apr 10 06:16:06 2015 UTC,"Pardon me, but that's less than 2128 ?"
crypto,322vl9,floodyberry,3,Fri Apr 10 06:20:35 2015 UTC,"All of the 256 bit curves are below 2128. The bits of security estimate is slightly under the square root of the keyspace, and Curve25519 is down a few bits to make implementations simpler/safer."
crypto,322vl9,bitwiseshiftleft,3,Fri Apr 10 07:32:44 2015 UTC,"In particular, this is not due to Curve25519 being somehow slightly broken.  It's an intentional design tradeoff.  Often designers don't aim for ""2128 work units, whatever those units might be"".  Instead they target ""on the order of 2128 work, and within that range whatever is most convenient/simple/etc"", or even ""can't be much less than 2128 work, but can be more if it's convenient"".  See for example NIST P521 / E-521, Ed448-Goldilocks, Curve41417, and Michael Scott's E-336."
crypto,322vl9,silverforest,1 point,Fri Apr 10 18:01:19 2015 UTC,Take a look at djb's paper.  Note that the approximate probabilty of finding a single private key using rho and kangaroo methods after 2125.5 additions is at most 50%.
crypto,322vl9,floodyberry,1 point,Fri Apr 10 22:04:32 2015 UTC,Thanks.  *massages head
crypto,322vl9,untitleddocument37,1 point,Sat Apr 11 07:19:06 2015 UTC,"On the ed25519 site, he also estimates it at:   The best attacks known actually cost more than 2140 bit operations on average, and degrade quadratically in success probability as the number of bit operations drops.    So it is above AND below the 2128 bit target, depending on what exactly you want to quantify as 1 bit of work."
crypto,322vl9,bitwiseshiftleft,1 point,Sat Apr 11 08:13:45 2015 UTC,"Not related to this thread but this line is on that page    For comparison, with secret-key ciphers there is a much worse effect for multiple targets. Breaking a single AES key costs about 2128 computations; breaking 1000000 AES keys costs, in total, about 2128 computations.   Is actually not true.  For each of the 1M AES messages encrypted with their own randomly derived keys you need to perform a trial decryption as you enumerate all 2128 candidate keys.  So the work is #msg * #keys / 2.  Or in this case 0.5M * 2128"
crypto,322vl9,untitleddocument37,1 point,Fri Apr 10 11:25:20 2015 UTC,"It depends on the mode.  For example, if they're all known messages encrypted in a CTR-related mode (GCM,CCM,EAX,etc) with a fixed nonce (eg, a packet counter) then the attack costs only #keys * (1-1/(1+#messages)) in expectation.  The same logic applies in CBC, OCB etc if they all begin with the same block (GET / HTTP/1.1...) and use the same nonce (again, eg a packet counter or encryption thereof)."
crypto,322vl9,bitwiseshiftleft,1 point,Fri Apr 10 17:36:48 2015 UTC,You still need to XOR and compare ... so yes in CTR mode you have 2128 invocations of AES ... but you still need to then apply the CTR pad to your ciphertexts ...
crypto,322vl9,bitwiseshiftleft,2,Fri Apr 10 17:38:48 2015 UTC,"Sorry for ninja-editing while you were responding.  This is partly true, in that the circuit is more complicated for handling multiple keys than for handling one.  But a distinguished-point attack makes the work linear in #keys + #messages instead of #keys * #messages.  Furthermore, routing the distinguished points should make the attack scalable to a huge #messages even with relatively simple circuits."
crypto,322vl9,untitleddocument37,2,Fri Apr 10 17:45:46 2015 UTC,"(Not ninja-editing the other response since you might be reading it...)  I forgot to mention, you don't need to XOR and compare.  By xoring the known message into the ciphertext ahead of time, you can just have a list of AES_k(nonce) to target.  So you don't have xor and compare against each online.  This is important to enable the distinguished-point attack."
crypto,322vl9,bitwiseshiftleft,1 point,Fri Apr 10 17:47:50 2015 UTC,In CBC mode for instance you need to pass the plaintext through the cipher for each key until you find suitable ones.
crypto,31z9m4,johnmountain,6,Thu Apr 9 09:07:06 2015 UTC,"Okay, I'll bite.  Why would anyone want to use Facebook via Tor?   You can't see anything until you authenticate."
crypto,31z9m4,chakalakasp,9,Thu Apr 9 15:47:29 2015 UTC,"There's no reason to let your ISP know when or whether you're visiting Facebook. There's no reason for Facebook's upstream ISP, or some agency that surveils the Internet, to learn when and whether you use Facebook. And if you do choose to tell Facebook something about you, there's still no reason to let them automatically discover what city you're in today while you do it.   https://blog.torproject.org/blog/facebook-hidden-services-and-https-certs"
crypto,31z9m4,Sostratus,7,Thu Apr 9 17:49:08 2015 UTC,To add: this also allows them to be accessible from countries that employ a block on Facebook re: china/iran etcetc
crypto,31z9m4,Cynofield,1 point,Thu Apr 9 20:55:34 2015 UTC,"Fake accounts for organizing protests, etc. People already build fake accounts for that, but I would imagine it's a lot easier for the government to identify you that way."
crypto,31z9m4,Natanael_L,0,Fri Apr 10 08:32:47 2015 UTC,You don't have any trusted proxies and need to hide everything you do.
crypto,31z9m4,phyzome,3,Thu Apr 9 15:50:04 2015 UTC,Hmm! I wonder which CA they got that through.
crypto,31z9m4,happinessmachine,1 point,Thu Apr 9 12:56:00 2015 UTC,"I thought onion sites were already encrypted end-to-end, similar to TLS?  Or is it about preventing fake versions of the site?"
crypto,31z9m4,Natanael_L,2,Thu Apr 9 19:45:35 2015 UTC,"If you've got the right domain name, yes. But Facebook's setup is Tor - load balancer - SSL terminator - FB servers. The load balancer can be external and partially untrusted."
crypto,31z9m4,anonymous7,1 point,Thu Apr 9 20:20:07 2015 UTC,Facebook's setup is Tor - load balancer - SSL terminator - FB servers.   Source?
crypto,31z9m4,Natanael_L,2,Thu Apr 9 22:06:47 2015 UTC,"https://lists.torproject.org/pipermail/tor-talk/2014-October/035421.html   We decided to use SSL atop this service due in part to architectural considerations - for example, we use the Tor daemon as a reverse proxy into a load balancer and Facebook traffic requires the protection of SSL over that link."
crypto,31z9m4,alecmuffett,2,Thu Apr 9 22:11:41 2015 UTC,elsewhere: :-)  http://www.reddit.com/r/TOR/comments/31wgv8/the_intercepts_securedrop_becomes_the_third/cq6emki
crypto,31z9m4,Natanael_L,1 point,Fri Apr 10 13:04:02 2015 UTC,Any I2P support in the works?
crypto,31z9m4,alecmuffett,1 point,Fri Apr 10 14:04:08 2015 UTC,"Not currently; focus at the moment is on making the Tor service scale better, and improving performance by removing some of the hops which are unnecessary for a non-hidden hidden-service. Also looking for opportunities to share what we've learned so far."
crypto,31z9m4,Cynofield,1 point,Fri Apr 10 14:10:41 2015 UTC,Are you talking about removing middle relay hops?  Or streamlining the process on how tor clients discover hidden-non-hidden services?
crypto,31z9m4,alecmuffett,1 point,Sun Apr 12 01:20:57 2015 UTC,This sort of thing:  https://gitweb.torproject.org/torspec.git/tree/proposals/ideas/xxx-encrypted-services.txt
crypto,31z9m4,Natanael_L,1 point,Tue Apr 14 03:16:01 2015 UTC,"Doesn't that mean Facebook's Tor traffic is only protected by TLS, then?"
crypto,31wce6,johnmountain,1 point,Wed Apr 8 17:50:08 2015 UTC,"A good and informative read, especially after noticing this a few days ago after a chrome update."
crypto,31wce6,niksko,1 point,Thu Apr 9 00:49:02 2015 UTC,Thanks for this.
crypto,31rcq9,npouillard,6,Tue Apr 7 15:50:58 2015 UTC,Link to the abstract  https://eprint.iacr.org/2015/310
crypto,31rcq9,DoWhile,-2,Tue Apr 7 17:16:47 2015 UTC,"""An heuristic analysis"".   Right? That's wrong, right?"
crypto,31rcq9,castillar,7,Tue Apr 7 18:48:49 2015 UTC,"There's an oddball rule we inherited in U.S. English from UK English that says ""h"" isn't a consonant when it starts a word like that, which means you use ""an"" instead of ""a"". So it's technically correct[0] according to most style manuals, but it does look odd.   [0] The best kind of correct!"
crypto,31rcq9,GahMatar,2,Tue Apr 7 21:03:39 2015 UTC,So do many native French speakers (myself amongst them) since a leading h in french is always silent. 18 years of speaking English has yet to get me to pronounce them.
crypto,31rcq9,UlyssesSKrunk,3,Tue Apr 7 23:56:36 2015 UTC,"I thought that only applies when the h is silent, which it most certainly is not in heuristic. So things like an hour or an honor would be right, but not things like an hotel, an hero, an hilarious, or an heuristic."
crypto,31rcq9,castillar,3,Wed Apr 8 02:28:21 2015 UTC,"It looks like it can go either way depending on editing style, pronunciation, and preference. It's possible they were trying to sound educated and overshot[0], or it's possible with their dialect the h is silent, which would make ""an"" correct. I've heard this in certain British dialects with the word pronounced ""uhr-iss-tic"".  [0] Like producing ""octopi"" as a plural. :)"
crypto,31rcq9,gsuberland,4,Wed Apr 8 03:54:05 2015 UTC,"My rule is ""ignore stupid rules that make things look and/or sound stupid"", because then we don't have to have these conversations where someone tries to justify something which is plainly... stupid."
crypto,31rcq9,untitleddocument37,0,Wed Apr 8 04:18:59 2015 UTC,"Indeed, I have the Handbook of Style and it mentions this so I just thought I'd mention."
crypto,31rcq9,bitwiseshiftleft,8,Tue Apr 7 23:37:35 2015 UTC,Good to know about (if correct) but binary weierstrass < prime < mont/twisted ed < potato (is latvian dream).  So nobody today should be using binary ecc anyways ...
crypto,31rcq9,untitleddocument37,5,Tue Apr 7 21:24:58 2015 UTC,"Yeah, I agree.  But I still see binary ECC occasionally due to being cheaper in hardware.  Also, it's really hard to tell if these results are correct.  The guys working on them are brilliant, but equation-solving techniques are nearly impossible to test at reasonable scale.  It reminds me of the XSL attack on AES, which was  debated for a while and eventually settled into ""it probably doesn't work even in theory""."
crypto,31rcq9,beachbum4297,5,Tue Apr 7 16:10:37 2015 UTC,"Hey just set aside 2100 memory and solve some equation ... can't be all that hard.  I dunno I work in ""the industry"" and binary ECC isn't the hot topic anymore.  People are looking for ed25519/curve25519 support (which is their naive way of asking for twisted edwards/montgomery curves)"
crypto,31rcq9,NobleSir,2,Tue Apr 7 16:54:37 2015 UTC,"But isn't that much more specific than asking for Edwards/Montgomery curves? I though those two negated multiple different classes of attacks through careful design and primitive selection. Disclaimer, i might not know 100% about what I'm saying. I am not in the crypto industry, just security in general with crypto as an interest."
crypto,31rcq9,untitleddocument37,1 point,Tue Apr 7 16:56:06 2015 UTC,"Yeah those two are rated as ""safe curves"" by Bernstein"
crypto,31rcq9,conradsymes,1 point,Wed Apr 8 04:44:53 2015 UTC,"""people"" who ask for features aren't always the ones who understand them.  Think marketing folk.  So they ask for ""curve25519"" support because [say] Apple HomeKit requires it but they don't know what curve25519 is let alone that it's a Montgomery curve, etc...  In reality industry is moving away from Weierstrass curves to ""safe curves"" but it'll take some time yet.  In the meantime though binary Weierstrass really hasn't been indemand for a long time."
crypto,31rcq9,Natanael_L,0,Wed Apr 8 09:27:18 2015 UTC,I don't even know why cryptographers equate memory attacks to computation attacks. Memory is 210 times more expensive.
crypto,31rcq9,conradsymes,1 point,Wed Apr 8 10:04:35 2015 UTC,Because the common time-memory tradeoff. You can often choose to spend more on one to decrease the other.
crypto,31rcq9,untitleddocument37,1 point,Tue Apr 7 21:46:41 2015 UTC,In many cases attacks are so marginal that would make the attack ineffective if either time or memory were increased.
crypto,31rcq9,conradsymes,1 point,Wed Apr 8 10:28:16 2015 UTC,"In reality we've had more hits on 25519 because of HomeKit than because of NIST problems.  In reality industry does what is ""standard"" and until recently 25519 wasn't part of any standards."
crypto,31rcq9,untitleddocument37,1 point,Thu Apr 9 17:49:18 2015 UTC,binary weierstrass < prime < mont/twisted ed < potato   should be:  binary weierstrass < prime < mont/twisted ed < hyperelliptic curve < potato
crypto,31rcq9,conradsymes,1 point,Wed Apr 8 14:07:47 2015 UTC,I thought hyper curves were only useful for pairings (a subject I don't know much about sadly)
crypto,31rcq9,untitleddocument37,1 point,Wed Apr 8 14:09:22 2015 UTC,"https://eprint.iacr.org/2014/526.pdf    Hyperelliptic-curve DH has also recently reached this performance bar for the Cortex-A8: the HECDH implementation in [4] is even faster than Curve25519. However, the performance benets of hyperelliptic curves are specic to DH, as admitted in [4], while elliptic curves are easily adapted to other important applications such as signatures. More importantly, the 128-bit hyperelliptic curve used in [4] came from a massive computation by Gaudry and Schost in [20],using more than 1000000 hours of CPU time."
crypto,31rcq9,nsa_at_home,1 point,Fri Apr 10 09:02:42 2015 UTC,You can't perform DSA over that curve though ...
crypto,31rcq9,untitleddocument37,1 point,Fri Apr 10 11:29:28 2015 UTC,It doesn't only apply to binary curves though.
crypto,31rcq9,nsa_at_home,2,Fri Apr 10 19:12:02 2015 UTC,The abstract clearly states it's for char-2 curves ...  edit: And I skimmed the paper they clearly only mention char-2 curves (see the conclusions at the end of the paper)
crypto,31rcq9,cypherpunks,1 point,Fri Apr 10 20:35:08 2015 UTC,It doesn't say it's only for binary curves. It's for curves over any field.
crypto,31rcq9,untitleddocument37,7,Tue Apr 7 17:14:53 2015 UTC,"It says right up front in the abstract that it's ""for computing discrete logarithms on elliptic curve over a field of size 2n"".  A field of size 2n is a characteristic-2 field."
crypto,31rcq9,Natanael_L,-6,Tue Apr 7 17:16:13 2015 UTC,"First off, they specify the binary weierstrass curve equation, second they do talk in generality about Fq where the field is of size q = pn but specifically talk about the case where p is small (specifically the cases where 'n' is large, see section 4.2).  The issue is the matrix of coefficients scales in three dimensions the # of equations, the # of terms and the size of each coefficient/term.  In binary (p=2) each term is a bit.  In prime fields n=1 and p=large.  Making the memory requirements even more prohibitive.    Finally, table 3 at the end of the paper only talks about char 2 fields.    So it's clear this result while mathematically applicable to any field is meant for binary fields.  IOW, shut the fuck up troll."
crypto,31rcq9,untitleddocument37,7,Tue Apr 7 17:19:53 2015 UTC,"IOW, shut the fuck up troll.   You should try to be nicer. I don't see the need for aggressive expressions."
crypto,31rcq9,Natanael_L,1 point,Wed Apr 8 00:00:24 2015 UTC,I don't see how repeatedly contradicting people when you're proven wrong is seen as polite conversation...
crypto,31rcq9,untitleddocument37,1 point,Tue Apr 7 17:25:46 2015 UTC,"Twice, seemingly (IMHO) because your first response didn't convince him enough?"
crypto,31rcq9,Natanael_L,0,Tue Apr 7 18:28:04 2015 UTC,Either you can show you're right or you shut up.  All he did was contradict me and didn't actually cite anything in the paper that proved his case.
crypto,31rcq9,ralpo08,1 point,Wed Apr 8 10:48:10 2015 UTC,Do you want to make me take the moderator hat on? I still can't see anything that justifies aggression.
crypto,31rcq9,nsa_at_home,1 point,Wed Apr 8 11:11:01 2015 UTC,"Isn't it exactly what you are doing right now? A lot of people are pointing out you were a jerk, and you still blame it on the other guy. Keep it nice and polite, it's not difficult"
crypto,31rcq9,untitleddocument37,6,Wed Apr 8 11:14:00 2015 UTC,"So it's clear this result while mathematically applicable to any field    That was my point. The attack can be applied to curves over any field. Whether it's currently feasible is a different story.   IOW, shut the fuck up troll.   I'm not trolling anyone. Not sure what you're so upset about."
crypto,31rcq9,nsa_at_home,2,Wed Apr 8 11:22:34 2015 UTC,"The attack is clearly irrelevant to prime fields.  So there is no value in saying ""this applies to non-binary fields too...""  I mean ECM factoring applies to ""all"" RSA moduli even though it's clearly ineffective against any non-smooth (e.g. not multi-prime) moduli."
crypto,31rcq9,untitleddocument37,-1,Wed Apr 8 19:03:17 2015 UTC,"It doesn't make it any less interesting,  in my opinion."
crypto,31rcq9,nsa_at_home,1 point,Tue Apr 7 17:35:02 2015 UTC,The paper is interesting (hence my original comment).  You saying this is relevant to prime fields is not helpful nor insightful.
crypto,31rcq9,ralpo08,3,Tue Apr 7 17:38:09 2015 UTC,It is relevant in the sense it's a general algorithm. I really don't see why you have to get so defensive.
crypto,31rcq9,untitleddocument37,1 point,Tue Apr 7 17:41:55 2015 UTC,"IOW, shut the fuck up troll.    If you know so much more than your peers, do share your knowledge, Mr cryptographer, we're all eager to learn from your wisdom. But if you need to resort to personal offenses, it means you can't elaborate your point of view in an intellectual way, which doesn't really help your point, does it? That was completely uncalled for."
crypto,31rcq9,Natanael_L,0,Tue Apr 7 17:42:33 2015 UTC,"I did ""share my wisdom"" he was just refusing to acknowledge he was mistaken.  There is a point where you can hardly call me out for my lack of decorum.  Just because he was using polite words doesn't mean he was being polite."
crypto,31rcq9,untitleddocument37,1 point,Tue Apr 7 17:45:37 2015 UTC,Your response was unproportional. And you seem to read more into his words than I can see there.
crypto,31rcq9,Natanael_L,0,Wed Apr 8 05:57:06 2015 UTC,I'm happy you shared this.  Let me chase you around contradicting everything you say and see how polite you are.
crypto,31rcq9,ralpo08,1 point,Wed Apr 8 10:02:34 2015 UTC,Have he been doing that?
crypto,31rcq9,balkierode,1 point,Wed Apr 8 10:30:40 2015 UTC,"oh boohoo, poor you, someone on the internet disagreed with you"
crypto,31rcq9,cpx13rap,1 point,Wed Apr 8 10:47:00 2015 UTC,Any TLDR? Does this make finding logarithm faster and less secure?
crypto,31uy2g,nischalsamji,3,Wed Apr 8 10:39:32 2015 UTC,"I'm not sure I understand your problem.  It seems like bob rather decrypts the 200 messages with the 201st message. If that's the case neither the 200 messages nor the 201st message are a one-time pad since the 201st message (which is used as the key) is used 200 times, not one-time.  If this is what you actually wanted to describe then the answer to 1) is: Alice used XOR (or whatever alice and bob agreed to use) on all of the news articles and the meaningful message resulting in the 201st message. Even if I guessed the scenario correctly I don't know what the answer to 2) should be, since it's unknown what the attacker has got. If the attacker has got all communication between alice and bob he/she can obviously do the same thing as bob did to decipher the message. If he has got every message but the last, he can take a bunch of new york times articles and xor them with each of the messages, and for each result take another message and xor it with the result. If it turns out to be another new york times article the attacker has got the key for all messages."
crypto,31uy2g,ym_twosixonetwo,1 point,Wed Apr 8 11:07:38 2015 UTC,"I think the OP wants to send 200 blocks that look random.  Then she wants to send a 201st block such that #201 XORed (or some other ""decrypt"" operation) with 199 of the 200 blocks gives readable text not of value to Alice and the same operation applied to the 1 remaining block gives a message of interest to Alice and Bob.  In this way Bob can pick one of the 199 ""wrong"" OTPs and offer it to his Mom as evidence Alice is sending him articles from the NYT.  It's a classic denyability scheme, when found with an encrypted message, one needs to decrypt it into something non-incriminating."
crypto,31uy2g,WRSaunders,3,Thu Apr 16 04:14:50 2015 UTC,"Because the 201st message is XOR'ed with all previous messages, and the result of that is what you are given as the ciphertext. Technically the 201st message then DOESN'T use a real one time pad, as the key isn't fully random or free from correlation with the other messages.   If the message is created before the key, you can derive keys using the message that has various desired properties."
crypto,31uy2g,Natanael_L,2,Wed Apr 8 13:13:25 2015 UTC,"1.)  She chose the last message, x, as a random bitstring.  Messages 1 through 200 are plaintextN xor x.  (That's one solution, at least.)  2.)  An attacker can xor two messages, cancel out the random x, and use redundancy in ASCII to recover the two messages.  They can then xor one of the plaintexts with the message and get x to decrypt the rest of the messages."
crypto,31uy2g,bren2010,2,Thu Apr 9 00:53:42 2015 UTC,"In equation form:   Cₓ ⊕ C₂₀₁ = M'ₓ Cₓ ⊕ Kₓ = Mₓ   for 1 ≤ x ≤ n (n = 200).  Is the solution to question 1 obvious now?    Short solution:  You have 2n+1 variables and 2n equations. This is underspecified and thus you can find an infinite number of solutions to the above equations. i.e.: Any Mₓ, M'ₓ is representable.    Long solution:  You can easily eliminate n variables from the above 2n equations by ⊕ing the former set of equations against the latter:  Cₓ ⊕ Cₓ ⊕ Kₓ ⊕ C₂₀₁ = Mₓ ⊕ M'ₓ ==> Kₓ ⊕ C₂₀₁ = Mₓ ⊕ M'ₓ  And you can clearly see that you should pick Kₓ for given Mₓ, M'ₓ and random C₂₀₁.    The answer to question 2 is trivial."
crypto,31uy2g,silverforest,2,Thu Apr 9 23:00:43 2015 UTC,"Your problem is really unclear..   Alice sends bob 200 one-time pads.   Do you mean 200 OTP materials, or 200 OTP-encrypted messages (with or without giving the key) ?   Alice sends the message encrypted with one of the one-time pads   So that means Alice sent 200 key, then one encrypted message, but then, why :   When bob decrypts the 201st message with each of the prior 200 messages   So you mean Bob uncipher the only message with the 200 keys? or that he had both ciphertext and key for the 200 OTPs?"
crypto,31uy2g,Dillinur,1 point,Fri Apr 10 08:28:50 2015 UTC,"Hint: It's a (primitive) two state iteration. The last message is the first state, otherwise without that state the solutions can be infinite."
crypto,31q35l,go-ive,10,Tue Apr 7 07:16:53 2015 UTC,"Depends on how they're used.  Private key operations are done with CRT which is modulo the primes not the composite.  So you're computing     m1 = m^dP mod P   and    m2 = m^dQ mod Q   Where dP and dQ are d mod P-1 and d mod Q-1 respectively.  If you swap P/Q then you're computing mdP mod Q (and resp. mod P).  The rest of the CRT fixup computes    m3 = (m1 - m2) * (1/q mod p)  m = q * m3 + m2   Typically 1/q mod p is precomputed so (1/q mod p) * p == 0 (mod p).  So m == m2 (mod p).  So I ask you to decrypt 0 (m2 == 0) which means the output m is a multiple of p that isn't N.  So the gcd(N, ((1/q mod p)*p)) == p."
crypto,31q35l,untitleddocument37,1 point,Tue Apr 7 11:34:35 2015 UTC,"Thanks for the detailed explanation. I understand the formula (I think), but I have trouble wrapping my head around how this helps in finding the private key. Could you explain how the fact that gcd(N, ((1/q mod p)*p)) == p aids here?"
crypto,31q35l,untitleddocument37,1 point,Tue Apr 7 18:42:47 2015 UTC,My logic was actually a bit flawed.  since m=0 would lead to m3 being zero as well.    At issue though is that q*m3 is not going to be (m1-m2) (mod p) if you swap q for p.  So you end up with m == p/q * (m1-m2) + m2 == m2 (mod p) which is a fancy way of saying m - m2 divides N (it's a multiple of p).  You're given m but not m2... but what if we do the same computation twice but swap p/q once.... then you end up with    t1 = (m1-m2) + m2 == m1 (mod p)  t2  = m2 (mod p) [after the swap]   Not sure what to do next but definitely having these sorts of relations will make some sort of gcd() computation pop out.
crypto,31q35l,aris_ada,6,Wed Apr 8 11:36:49 2015 UTC,"Your understanding is correct. No you can't crack RSA if they swapped p & q. They probably had some other information like ""e and d were swapped"", which would indeed reveal enough info to break RSA. This doesn't look like a security presentation so it's possible the speaker was presenting someone else's discovery."
crypto,31q35l,memoryspaceglitch,2,Tue Apr 7 07:48:54 2015 UTC,"If you swap in a way that both become the same (unsure of how), that might pose a problem, since that would mean that sqrt(n) = p = q would hold and thus your key would be exposed by a simple crypto analysis.  Most probable however, as /u/aris_ada mentioned is that d and e were swapped rather than p and q."
crypto,31qvww,soapstainz,1 point,Tue Apr 7 13:39:06 2015 UTC,It isn't full disk encryption unless you really encrypt everything. What do you want to encrypt and why?
crypto,31qvww,Natanael_L,1 point,Tue Apr 7 13:58:44 2015 UTC,We are implementing a security policy that involves file disk encryption in case the laptops get into the wrong hands.
crypto,31qvww,Natanael_L,2,Tue Apr 7 14:03:02 2015 UTC,"Then it absolutely sounds like you need full disk encryption (FDE, covering everything in the partition, as opposed to file containers). Look up things like evil maid attacks. Leaving the OS unprotected allows for tampering with it."
crypto,31qvww,Natanael_L,1 point,Tue Apr 7 14:16:01 2015 UTC,"will do, thanks!"
crypto,31qvww,AngrySkillzz,1 point,Tue Apr 7 14:18:40 2015 UTC,Do you have any computer security experts at hand? You might get more help in /r/asknetsec if you want better security assurances.
crypto,31qvww,mymeta4,1 point,Tue Apr 7 14:20:15 2015 UTC,FDE is perfect for that use case. It is mostly no-hassle and will protect you from data theft in all cases not involving a sovereign state (and even then you may still be safe).
crypto,31qvww,mymeta4,1 point,Tue Apr 7 20:01:41 2015 UTC,veracrypt wont do full disk encryption on uefi or gpt based systems.  truecrypt/veracrypt can create file containers into which users can store sensitive documents once mounted.   an easier solution would be to enable bitlocker on a supported system which will use a trusted platform chip to encrypt the data on the drive. otherwise there is pgp. not sure i would recommend much beyond that.  bitlocker would save time on user training and avoid loss of data due to encrypted file container password policies (people forget passwords).
crypto,31qvww,funkspiel56,1 point,Tue Apr 7 19:22:56 2015 UTC,Can't use bitlocker because it's windows 7 pro. Veracrypt is the best option here. Machines are neither UEFI nor GPT based systems.
crypto,31qvww,mymeta4,1 point,Tue Apr 7 19:46:56 2015 UTC,gotcha. note that new machines are going to have uefi and gpt by default.
crypto,31mg1n,8957a7e8,3,Mon Apr 6 12:58:36 2015 UTC,Kalium is a thin jnr-ffi wrapper to libsodium. Nothing to audit except I'd suggest compiling libsodium yourself rather than the precompiled version distributed with the jar.
crypto,31mg1n,cartogram,1 point,Mon Apr 6 15:55:53 2015 UTC,Thanks much - looks like I'll be giving it a try.
crypto,31j581,RuddiV,1 point,Sun Apr 5 16:28:30 2015 UTC,"If you don't get and answer, try Stack Exchange"
crypto,31j581,pushme2,1 point,Sun Apr 5 20:04:38 2015 UTC,"Thanks, I will :-)"
crypto,31j581,JoDaBeda,1 point,Sun Apr 5 22:09:45 2015 UTC,"NTRU is an established, standardized, and patented scheme. So changing that is not that easy. Also, NTRU lattices are already relatively well studied, and it is not clear if the modification provides an actual security benefit (other than that it allows a proof)."
crypto,31j581,nitraat,1 point,Tue Apr 7 11:25:00 2015 UTC,"Thanks for the reply. I would assume that NTRUs patent is broad enough to cover the changes of Stehle and Steinfeld, so I don't think that would be the problem for changing it. I agree with you that it is not clear if the modification would provide a security benefit in practice. But if the modifications doesn't decrease efficiency, why wouldn't you chose the version with a theoretical proof of security, regardless that it perhaps doesn't change anything in practice?"
crypto,31dfda,Natanael_L,18,Sat Apr 4 00:42:34 2015 UTC,"I would like to see something like the Open Crypto Audit grow. I would like to see it scale, so it had a global list of recognized and respected cryptographers, source code auditors, crypto analysts etc As a globally recognized organization, it could prioritize on which software to audit."
crypto,31dfda,cqwww,8,Sat Apr 4 04:11:18 2015 UTC,"I would like a full formal proof of correctness (or, more likely, otherwise) of TLS 1.2.   I can dream, right?"
crypto,31dfda,mpdehnel,5,Sat Apr 4 07:42:17 2015 UTC,"(1) Actually I'd like a streamlined TLS 2.0 which only does AES-GCM and ChaCha20-Poly1305 and KEX via Curve25519 and Goldilocks and cuts away everything else. No special cases, no client cert auth and other stuff that is not used 99 % of the time. Make one TLS 2.0 which cuts away the fat and parallel continue with TLS 1.X. So there would be two parallel versions, one for people who need the old TLS and one for those who don't need all the corner cases.  (2) Also I would like certificates to be checked not by certificate chains with certificate authorities, but also by ""crowd""-checking voting by the majority. Which means browsers should communicate with each other and send each other info about visited SSL sites and check if the certificate fingerprint matches the rest of other browsers. Abstract that through TOR for anonymity."
crypto,31dfda,stouset,2,Sat Apr 4 19:25:27 2015 UTC,"Why abandon client cert auth? It can be insanely useful, and uses the same code pathways as server auth."
crypto,31dfda,stouset,1 point,Sat Apr 4 20:20:01 2015 UTC,"Well, I can only speak for myself, but I have used client cert auth exactly once in the last ten years: For logging into cacert.org.  EDIT: Disregard that, see my response further down.  99.9 percent of people do not use or need it. That's why there should be a streamlined TLS. It does not use 100 % the same code as server TLS auth, too. So it is not the same code pathway. It shares a lot of code, but not all code."
crypto,31dfda,mpdehnel,3,Sat Apr 4 20:27:12 2015 UTC,Mutual-auth TLS is how tons of services do (and ought to) communicate between themselves. Amongst tons of other common but behind the scenes use-cases.
crypto,31dfda,untitleddocument37,1 point,Sat Apr 4 20:29:12 2015 UTC,"Mhh you are right, you have convinced me. So Cert auth stays. I was too harsh probably. I just remembered we do that, too at our campus for our chipcards."
crypto,31dfda,mpdehnel,3,Sat Apr 4 20:39:41 2015 UTC,"So there's apparently (according to the Mozilla guys) going to be no renegotiation in TLS 1.3. I don't have complete faith that the spec they presented at RWC in January will be 100% what gets adopted, but it's a move in the right direction. It's a bit of a shame Hugo Krawczyk's quite sensible, streamlined, potentially easily verifiable suggestion was thrown out so quickly, and without much discussion - I think this was mainly due to it being such a move away from the current 1.2 spec."
crypto,31dfda,stratha,2,Sat Apr 4 20:03:13 2015 UTC,Client auth is what is needed to get rid of passwords.    You might want to rethink that.
crypto,31dfda,untitleddocument37,1 point,Mon Apr 6 11:36:59 2015 UTC,"IMHO auth should be decoupled from the encryption protocol. It should just provide a facility for performing auth like tcpcrypt does (computes a per-session shared secret separate from the encryption key, intended to be verified through just about anything from mutual HMAC to signing with PGP keys).   Also, U2F is IMHO a very neat solution. Ties the authentication directly to the encrypted session, and allows for a small secure hardware token to provide authentication against an essentially unlimited number of services WITHOUT enabling different services from cross-referencing tokens (so using it over Tor or I2P with different nicknames on different services will preserve your privacy)."
crypto,31dfda,stratha,1 point,Mon Apr 6 17:29:38 2015 UTC,Link to that suggestion?
crypto,31dfda,untitleddocument37,2,Sat Apr 4 20:08:40 2015 UTC,"Here's the slide deck, Original Programme. Interesting conference!"
crypto,31dfda,stratha,2,Sat Apr 4 20:46:02 2015 UTC,"and KEX via Curve25519 and Goldilocks and cuts away everything else.   I'd rather key exchange algorithms which are secure against quantum computers. Supporting algorithms with their only proof of security based on integer factorization and the discrete log problem is a waste of time now: washingtonpost.com/world/national-security/nsa-seeks-to-build-quantum-computer-that-could-crack-most-types-of-encryption/2014/01/02/8fff297e-7195-11e3-8def-a33011492df2_story.html.   (2) Also I would like certificates to be checked not by certificate chains with certificate authorities, but also by ""crowd""-checking voting by the majority. Which means browsers should communicate with each other and send each other info about visited SSL sites and check if the certificate fingerprint matches the rest of other browsers. Abstract that through TOR for anonymity.   Better yet, companies and individuals storing their certificates and/or fingerprints in the blockchain i.e. Namecoin."
crypto,31dfda,untitleddocument37,3,Mon Apr 6 10:54:50 2015 UTC,"In the grand scheme of things QCs aren't a threat now, won't be for a while and won't be practical for a while even after that.  Meanwhile there are fuck ups in SSL 3.0/TLS1.0 that many servers still support today.  There are plenty of non-number theoretic attacks on PK/sym (like DPA/SPA/cache/timing) today that are to varying degrees practical today.  It's foolish to optimize against problems that may or may not be practical 10+ years from now (if not longer) while ignoring stuff that was a problem 10 years ago."
crypto,31dfda,cunttard,1 point,Mon Apr 6 11:39:33 2015 UTC,"In the grand scheme of things QCs aren't a threat now, won't be for a while and won't be practical for a while even after that.   If you know exactly what the actual NSA's or GCHQ's capabilities are with quantum computers to even begin to qualify that statement, please leak it to The Intercept. Otherwise that's an incredibly naive statement.  a) You're incorrectly assuming that the NSA's 100s of billions of dollars in research/development and their top mathematical/scientific/cryptographic/technological minds in the world will be be behind the public/commercial effort to develop working quantum computers.  b) You're assuming the NSA will publicly announce they have a quantum computer capable of cracking encryption.  c) You're assuming the US government doesn't have the power to silence and classify academic/commercial breakthroughs to develop a working general purpose quantum computer then use the research for themselves."
crypto,31dfda,SAI_Peregrinus,1 point,Fri Apr 10 09:08:28 2015 UTC,It's illogical to debate what the mythical beast has and doesn't have.  We can't proceed in this discussion any further.
crypto,31dfda,SAI_Peregrinus,1 point,Fri Apr 10 11:29:06 2015 UTC,Can we at least agree it's better to future proof protocols rather than be caught out 10 years down the track.
crypto,31dfda,bribriinlondon,2,Fri Apr 10 12:04:38 2015 UTC,"Not really.  Because you could use any possible vector as an attack and then make cryptography prohibitively expensive.  The reason, for instance, why RSA 512-bit was used in the 1980s isn't because they assumed factoring would get no better it's that at the time factoring such a number was intractable with current computers and algorithms.  They could have just used 4096-bit RSA but then generating a key would take 7 hours and performing a private key operation 5+ minutes.  In reality, we need to keep ahead of the curve (yes) but not so far as to make things useless.  For when expensive security becomes the standard people will just circumvent you to get their job done."
crypto,31dfda,ZaphodsOtherHead,5,Fri Apr 10 12:10:55 2015 UTC,"Perhaps this is simple and isn't really breaking new ground but I've been thinking about this for awhile.  I would like to see and adaptation of mosh for IP tunnelling/VPN functionality. Clearly the terminal features mosh brings to the table (like predictive echo) wouldn't be useful, but the roaming aspects is where mosh shines.  I know OpenVPN client offers a --float (floating IPs) to support support IP roaming although there's been some crypto issues regarding the resumption aspect. However I think there's merit in the mosh solution is that it requires very little friction to get working -- but providing a full VPN functionality would demand a lot more from the SSH server and client (increasing complexity of the code)."
crypto,31dfda,ehempel,1 point,Sat Apr 4 06:41:49 2015 UTC,"Sadly using mosh behind NAT does not work:  I am behind a NAT gateway and I have no possibility to influence its port-forwarding. So what I do at the moment is I run a SSH session on my home server (A) to port forward a port for my sshd to a server in the open internet (B) that I control:  $ cat ssh_forward_lynx.service  [Unit] Description=SSH port forward - lynx  After=network.target  [Service] ExecStart=/usr/bin/ssh -N -o ""ExitOnForwardFailure yes"" -o ""VisualHostKey no"" -R 2222:localhost:2222 -R 63010:localhost:63010 -R 63011:localhost:63011 lynx.redacted.ip Restart=always RestartSec=10  [Install] WantedBy=multi-user.target   So when I connect to lynx.redacted.ip (B) on port 2222 i get SSH'd to the machine behind the NATed firewall (A). This works great!   But now, when I use mosh, mosh tries to establish a UDP connection to lynx.redacted.ip (B) and it of course does not work, because it does not reach (A).  Is there some way to make this work?"
crypto,31dfda,ZaphodsOtherHead,4,Sat Apr 4 19:18:54 2015 UTC,"I want some method of authentication that isn't web-of-trust based. All such systems seem to either involve unreasonable effort and understanding from the users, or require paid ""trusted"" people like the CAs."
crypto,31dfda,__boo__,3,Sat Apr 4 05:15:06 2015 UTC,"The models that exist (which I know of) are nicknames (often called nyms in this context), web of trust (weighted analysis based on opinions of trusted people), centralized hierarchical PKI (the current CA system), first-come first-serve hooked to a global concensus system á la Namecoin, and public keys as addresses.   The last two are the most malice resistant."
crypto,31dfda,ehempel,1 point,Sat Apr 4 07:23:49 2015 UTC,"Centralized Hierarchical PKI is a variant of a web of trust, with the weights given strongly to the CAs by default.  And the last two are definitely better. The problem is grafting them on to the existing internet."
crypto,31dfda,cwmma,1 point,Sat Apr 4 08:19:58 2015 UTC,"Yes, technically you can fully simulate the CA system using WoT, so you can say PKI is a special case of WoT. But practically almost nobody does it that way. Typically you only do one or the other in any given system, there's rarely the option to switch from one to the other or mix. So they get mentioned separately."
crypto,31dfda,cwmma,1 point,Sat Apr 4 09:06:44 2015 UTC,"Wonder what you think of our M-Pin? We split the root of trust / root key between your server and ours, so no one actor can compromise the system. Both sides need to be compromised to have a root key compromise, so you inherit the security of our being secured by HSMs."
crypto,31dfda,floodyberry,6,Fri Jun 5 11:57:23 2015 UTC,I'd like to see more people using / looking at pond. I really like it and I wish it were being developed more actively.
crypto,31dfda,cwmma,2,Sat Apr 4 01:19:49 2015 UTC,"What does this mean?   Pond messages are asynchronous, but are not a record; they expire automatically a week after they are received.    How can the second part be true in any meaningful way?  Crypto can't enforce that, and I'm sure it would be simple to patch pond to keep them indefinitely (or even just screenshot)."
crypto,31dfda,floodyberry,5,Sat Apr 4 03:53:53 2015 UTC,"I don't think it's enforced cryptographically, but pond (and every other secure messaging system I know of) assumes that the end points are trustworthy. If the person you are messaging is being malicious, then no crypto is going to help you. As I understand it, it's more of an opsec measure, to limit the damage of future compromises."
crypto,31dfda,cwmma,1 point,Sat Apr 4 04:00:42 2015 UTC,Is verifiable deletion even possible?
crypto,31dfda,cunttard,2,Sat Apr 4 16:59:32 2015 UTC,"No, how could it be? Copies are easy in the digital world."
crypto,31dfda,cwmma,2,Sat Apr 4 17:11:57 2015 UTC,I still want streaming authenticated crypto.
crypto,31dfda,dareksam,1 point,Sat Apr 4 19:50:25 2015 UTC,Isn't ChaCha20+Poly1305 enough?
crypto,31dfda,cardevitoraphicticia,1 point,Sat Apr 4 20:00:29 2015 UTC,No you have to finish the whole message to get the tag and receive the whole message to verify it.   Edit: pressed send too early
crypto,31b0c8,Sekenre,7,Fri Apr 3 13:08:48 2015 UTC,"Giving rewards for verification perverts the system and adds incentive to game the system, but verifying binaries isn't the same as mining bitcoin. All a miner needs to do is show proof of work for the work to be accepted, we don't care who the miner is, as long as the work was done, so the miner's actual identity is low value here.  Verification is different. The signing of binaries isn't merely a bitcoin-esque proof-of-work where all you care about is yes or no, but who signed the binaries matters a lot, because they have their own incentive - the verification itself, and not your external reward.  Verifying a crypto library is important to anyone that doesn't want to get hacked, so everyone would do their own verification because they want to verify themselves, not because of an external reward.  This makes the reputation system work. I trust Alice, but Bob doesn't, so Bob does his own verification. Alice and Bob need to agree on the signature, reinforcing the reputation system. Bob hates Alice, so has incentive to prove that Alice is cheating, so they're both actually going to do the work. Additionally, I trust Alice, so I ignore the 3000 'bad' verifications that come from a Sybil attack if Alice hasn't signed off.  The difficulty of a Sybil attacks is proportional to how hard it is to create identities, so make it hard to create trusted identities.  Another defense would be for the signature to also include temporary build objects that aren't distributed as part of the final binaries, so a cheater can't just take the end binaries and sign them themselves, but force them to recreate part of the build that gets incorporated into the signature. That way, 1-stage binary-only signature verification can be done by everyone, but the other builders can be used in a 2-stage binary + build object in-depth verification that makes it harder to cheat by just taking the binaries and signing them."
crypto,31b0c8,fragmede,2,Fri Apr 3 18:01:38 2015 UTC,Your last paragraph sounds like it would be ideal with the build system I am thinking of.  I'll have to think about how it could be cheated.
crypto,31b0c8,fragmede,2,Fri Apr 3 18:55:01 2015 UTC,"The later in the compile sequence the build object is picked up, the more of it ends up in the binary, and a tool could be written to take the pieces out of the final binary and reconstruct the temporary build object which may be cheaper, computationally, than actually compiling the object.  Conversely, the earlier in the compile sequence, the easier it is to generate, with no guarantee that you did any of the later steps. A resilient system would have to incorporate build products from both ends of the compile sequence.  Unfortunately this falls apart if Verifier1 and the cheating Verifiers are colluding. Which, if Verifier1 is strongly motivated to do evil, may happen. In that case, Verifier1 can simply give the temporary build objects to the later verifiers, since they lend credence to the validity of Verifier1.  In order to counteract that, we're back to Sybil attack mitigations to make it harder for Verifier1."
crypto,31b0c8,GahMatar,1 point,Fri Apr 3 21:38:43 2015 UTC,Great! I think I have a clearer idea of what is possible. Sybil attack can certainly be slowed down.  I think what needs to be worked out next is how to make it too expensive to cheat.
crypto,31b0c8,fragmede,1 point,Fri Apr 3 22:49:31 2015 UTC,An even simpler attack is to look up verifier 1's signatures and just resign with your key.
crypto,31b0c8,Natanael_L,2,Fri Apr 3 22:56:46 2015 UTC,"If public/private keys are being used for the signing and verification, then that attack wouldn't be possible."
crypto,31b0c8,fragmede,1 point,Fri Apr 3 23:15:06 2015 UTC,"Why exactly? Without validation that the data was generated by the keypair holder, everybody can sign the same data and say they were the origin."
crypto,31b0c8,marklarledu,2,Sat Apr 4 13:39:22 2015 UTC,By using detached signatures to keep the data private. You'd distribute the signatures but not the temporary build objects that the signatures are for.  My proposal hinges on the temporary build objects themselves not being distributed which means we can't use embedded signatures for them.
crypto,31b0c8,marklarledu,3,Sun Apr 5 17:19:16 2015 UTC,"I was trying to solve a very similar problem a while back and didn't really get anywhere. I wanted to use a proof-of-work system to avoid spam and CAPTCHAs (this part all worked) but then also use that proof-of-work to solve ""real problems"" (think BOINC). My problem was in verifying the solution. If I used a non-real world problem (e.g., find what number when salted with <given salt> using <given hash algorithm> produces <given hash value>) it was easy to accomplish but when I switched to useful problems I couldn't get it to work. Anyway, that didn't help you at all but if you make headway here I'd love to hear about it. Good luck!"
crypto,31b0c8,hoeg,1 point,Fri Apr 3 16:38:51 2015 UTC,"If there was a way of replacing <given hash algorithm> with <compiler> in a way that reproduced a functioning binary and that made forgery very difficult, it might be possible."
crypto,31b0c8,justusranvier,2,Fri Apr 3 16:59:46 2015 UTC,Simple! Just map verifying the compiled result to an NP problem and you're good to go ;)
crypto,31b0c8,Natanael_L,1 point,Fri Apr 3 18:05:33 2015 UTC,Pffft. Easy. I'll write a white paper with some nicely formatted LaTeX equations that no one understands. Problem solved.
crypto,31b0c8,Natanael_L,3,Fri Apr 3 20:01:14 2015 UTC,I actually wrote my thesis on how to verify outsourced computations. Though it is not practical at all it is quite neat :)  It is possible to construct a circuit for the computation (the compiler) and from this circuit construct a quadratic span/arithmetic program which has the property that it is only possible to construct a proof that the circuit was correctly evaluated by evaluating the circuit. The outsourcer(?) can then verify the proof and determine if the computation was done correctly.  This article introduces the QSPs. The actual implementation is called Pinnochio
crypto,31b0c8,FrigoCoder,1 point,Fri Apr 3 18:09:26 2015 UTC,"This isn't directly related, but I've often wanted to see more work done on converting software that runs on a Turing machine into circuits that can be implemented in hardware. Hardware that would be easier to verify as non-malicious, since it would be Turing-incomplete.  Making all of our hardware programmable had the benecificial effect of making development easier, but now we can't trust our devices any more."
crypto,31b0c8,FrigoCoder,1 point,Fri Apr 3 19:45:08 2015 UTC,HTML + CSS alone is Turing complete.
crypto,31b0c8,RuddiV,1 point,Mon Apr 6 21:59:19 2015 UTC,Zero-knowledge proofs
crypto,31b0c8,RuddiV,2,Fri Apr 3 23:43:36 2015 UTC,Offer reward for proof that verifiers cheat?  No idea about implementation specifics though.
crypto,31b0c8,phyzome,1 point,Fri Apr 3 14:17:07 2015 UTC,"I think that unless there is some sort of cost associated with accusing someone as a cheater, it would be subject to abuse.  You could look at it as a denial of service attack against the verifier(s)"
crypto,31b0c8,Natanael_L,1 point,Fri Apr 3 14:30:26 2015 UTC,Who watches the watchmen?
crypto,31b0c8,patrickwonders,1 point,Fri Apr 3 14:31:49 2015 UTC,"If there was a way of making the activity of the watchmen publicly auditable it might be possible to mitigate the damage that corrupt watchmen could do.  (at least in a software only scenario, there are similar efforts for the real world like Provenance )"
crypto,31b0c8,FryGuy1013,2,Fri Apr 3 15:12:14 2015 UTC,This sounds a lot like something homomorphic signatures could solve. Look at this really good article about it.
crypto,317bpv,pred,4,Thu Apr 2 15:50:47 2015 UTC,Still using truecrypt :)
crypto,317bpv,skater8705,3,Thu Apr 2 20:55:20 2015 UTC,Ditto. :)
crypto,317bpv,antdude,4,Fri Apr 3 03:03:33 2015 UTC,"I've personally moved over to Veracrypt (based on Truecrypt code base) for several reasons:   The author doesn't appear to be anonymous:  Mounir Idrassi runs security business Idrix and is active on various forums and blogs.  Mounir is committed to development of his security products (I emailed him about another one of his free utilities... he modified and published a new build that day adding a feature I requested!) He's already patched security issues identified in the first phase of the Truecrypt audit. Iteration count has increased from 1000 or 2000 in Truecrypt to >300000 - this increases the time to mount a volume (but there's no performance hit once mounted) but improves security if using a strong passphrase due to how slow a brute force attack becomes.  This was the main issue to come out of the first report for Truecrypt. All source code is published and available for scrutiny and personal build.   Obviously, at the end of the day you have to evaluate these things yourself and make the decision. Having checked Truecrypt.ch development (CypherShed?), I was put off by the bickering that ensued on the forum - they just don't seem to have their shit together."
crypto,317bpv,cuttingclass,2,Fri Apr 3 13:37:25 2015 UTC,In short is it safe to use and what version?
crypto,317bpv,DoWhile,3,Fri Apr 3 04:11:00 2015 UTC,"Yes (""safe"" is always relative, but in short, yes). Latest version 7.1a  No super significant bugs affecting normal usage behavior was found in the audit.   However, because this is unmaintained software, any newly discovered bugs won't be patched.  There are several projects looking to extend truecrypt (veracrypt/tcnext/ciphershed... I have not looked into any of these, use them at your own risk), and other standard disk encryption for Linux boxes exist (dm-crypt/LUKS)"
crypto,317bpv,GrayCipher,1 point,Fri Apr 3 05:04:45 2015 UTC,I find the lack of proper authentication of the ciphertext to be a concern
crypto,317bpv,Natanael_L,1 point,Fri Apr 3 22:32:57 2015 UTC,"IIRC, FDE is rarely used with authenticated encryption because of the performance penalty."
crypto,317bpv,GrayCipher,1 point,Sat Apr 4 10:36:07 2015 UTC,"I believe you are correct there; however, I've read this to mean that it would also affect encrypted containers. This could potentially be a concern for people who have created containers and uploaded them to cloud services for reliable storage (or other purposes)."
crypto,317bpv,Natanael_L,1 point,Sun Apr 5 20:31:13 2015 UTC,"Relevant: https://roamingaroundatrandom.wordpress.com/2014/09/20/tamper-resistant-full-disk-encryption/  Lack of authentication (ideally all-or-nothing, like HMAC over the full ciphertext) allows for plaintext scrambling (just flip any ciphertext bits) and partial selective ciphertext reversal (replace particular files with earlier versions, this works of authentication is only per-block)."
crypto,317bpv,Natanael_L,1 point,Sun Apr 5 21:02:00 2015 UTC,At least it serves as a good template for what to do and how for those forking / cloning it or starting something from scratch.
crypto,317blm,ret2libc,5,Thu Apr 2 15:49:51 2015 UTC,The algorithm you're looking for is called a key derivation function (KDF). Openssl seems to use its own custom one. See http://stackoverflow.com/questions/9488919/openssl-password-to-key and http://security.stackexchange.com/questions/29106/openssl-recover-key-and-iv-by-passphrase for more information.
crypto,317blm,Elyotna,4,Thu Apr 2 16:16:26 2015 UTC,I believe it is just PBKDF1 with a single round of MD5 (from the command line).
crypto,317blm,cunttard,1 point,Fri Apr 3 02:00:12 2015 UTC,"I saw that as well, but i did learn that you can specify the hash to use with the -md switch."
crypto,317blm,marklarledu,5,Fri Apr 3 13:13:57 2015 UTC,"Converting a passphrase/password into a key is done via a Key Derivation Function (KDF) which utilizes a specified (set of) pseudo-random function(s). Some common ones include, but are not limited to, PBKDF2 and scrypt. As /u/Elyotna said, openssl seems to use its own custom one (I didn't actually verify that but you might want to).  I am sure you have read this before but please be careful when using ECB  mode. If your plaintext is larger than the block length (which it likely will be if you are using padding), patterns in the plaintext will be visible in the ciphertext."
crypto,315mes,johnmountain,12,Thu Apr 2 04:16:55 2015 UTC,Does anyone have any trust left in certificate authorities?
crypto,315mes,sime,6,Thu Apr 2 07:51:06 2015 UTC,"I was wondering if there's an up-to-date list of CA fuck-ups available anywhere? This could be helpful in evaluating exactly how messed up the system is, assuming it includes descriptions of the fuck-ups.  The CNNIC case is a good clear example; in what's probably many peoples' eyes, Comodo should have seen the same fate but didn't. What are some other CAs that we trust but maybe we shouldn't?"
crypto,315mes,pred,2,Thu Apr 2 18:06:13 2015 UTC,"The problem if trust isn't just the Certificate authorities, because PKIX (x509 Public Key Infrastructure) requires more than that.  You are the user (or so you say), you give your trust to the browser that you install.  The browser preloads a list of certificates, the certificate trust list (CTL) that contains the public keys of root certificates held by certificate authorities.  The CTL lists vary in size, Mozilla is a little over 150, Apple is 220, and Microsoft was as high as 417 in January (they purged 68 in February expired/retired, the MS list is now 349, of which 306 can validate servers).  CAs don't actually issue certificates with their root certs, they keep them in a vault.  They instead create intermediate certificate authorities (ICA) that are actually used to sign end-entity certificates that are used to authenticate web servers.  ICAs are good for keeping the roots offline, but they provide the CA a way to delegate (read: sell) their authority to other organizations.  This is where the CNNIC/MCS Holding went wrong.  CNNIC issued a ""test"" two week ICA.  MCS should have installed it on an HSM used for issuing certs.  Instead their technician installed it on a ""FIPS compliant"" firewall, meaning an ssl inspection proxy.  The fact that the ssl inspection proxy was ""FIPS Compliant"" is irrelevant, installing your ICA on a firewall/proxy is a violation of the Baseline Requirements.  The rules that apply here are the cabforum.org's Baseline Requirements, sections on ""subordinate CA""."
crypto,315mes,R-EDDIT,2,Thu Apr 2 17:27:52 2015 UTC,"CAs don't actually issue certificates with their root certs, they keep them in a vault   I know why that allegedly happens, but has a CA ever actually revoked their intermediate certificate after an incident? It feels far more likely that you'll see Google, Microsoft et al revoke a root certificate than anyone ever doing it to themselves."
crypto,315mes,disclosure5,3,Thu Apr 2 22:39:49 2015 UTC,You can't watch this and still take the CA's seriously:  Moxie Marlinspike Defcon 2011: SSL and the future of Authenticity  https://www.youtube.com/watch?v=Z7Wl2FW2TcA  Substantially nothing has happened since then.
crypto,315mes,R-EDDIT,2,Thu Apr 2 23:58:24 2015 UTC,"To more directly answer, this is all the certificates in Microsoft's current ""Disallowed"" serialized certificate store (SST), which is part of the Certificate Trust List.    Issued To Issued By Expiration Date Certificate Template    *.google.com *.EGO.GOV.TR 2013-06-07    AC DG TrΘsor SSL AC DGTPE Signature Authentification 2014-07-18    NIC Certifying Authority CCA India 2007 2015-07-04    NIC CA 2011 CCA India 2011 2016-03-11    NIC CA 2014 CCA India 2014 2024-03-05    MCSHOLDING TEST CNNIC ROOT 2015-04-03    www.live.fi COMODO RSA Domain Validation Secure Server CA 2015-04-26    DigiNotar Root CA DigiNotar Root CA 2025-03-31    DigiNotar Root CA G2 DigiNotar Root CA G2 2029-07-03    Digisign Server ID - (Enrich) Entrust.net Certification Authority (2048) 2015-07-16    DigiNotar Root CA Entrust.net Secure Server Certification Authority 2013-08-26    DigiNotar Root CA Entrust.net Secure Server Certification Authority 2013-08-14    DigiNotar Services 1024 CA Entrust.net Secure Server Certification Authority 2013-08-26    DigiNotar Cyber CA GTE CyberTrust Global Root 2013-09-20    DigiNotar Cyber CA GTE CyberTrust Global Root 2011-09-27    DigiNotar Cyber CA GTE CyberTrust Global Root 2011-10-04    Digisign Server ID (Enrich) GTE CyberTrust Global Root 2012-07-17    Microsoft IPTVe CA Microsoft Home Entertainment PCA 2016-01-07    Microsoft Enforced Licensing Intermediate PCA Microsoft Root Authority 2010-02-26 SubCA   Microsoft Enforced Licensing Intermediate PCA Microsoft Root Authority 2016-10-23    Microsoft Enforced Licensing Registration Authority CA (SHA1) Microsoft Root Certificate Authority 2017-02-08 SubCA   CN=Microsoft Online Svcs BPOS APAC CA4 Microsoft Services PCA 2018-03-31 SubCA   Microsoft Online CA001 Microsoft Services PCA 2011-08-10 SubCA   Microsoft Online Svcs BPOS APAC CA1 Microsoft Services PCA 2018-03-31 SubCA   Microsoft Online Svcs BPOS APAC CA2 Microsoft Services PCA 2018-03-31 SubCA   Microsoft Online Svcs BPOS APAC CA3 Microsoft Services PCA 2018-03-31 SubCA   Microsoft Online Svcs BPOS APAC CA5 Microsoft Services PCA 2018-03-31 SubCA   Microsoft Online Svcs BPOS APAC CA6 Microsoft Services PCA 2018-03-31 SubCA   Microsoft Online Svcs BPOS CA1 Microsoft Services PCA 2012-04-19 SubCA   Microsoft Online Svcs BPOS CA2 Microsoft Services PCA 2011-03-08 SubCA   Microsoft Online Svcs BPOS CA2 Microsoft Services PCA 2012-04-19 SubCA   Microsoft Online Svcs BPOS CA2 Microsoft Services PCA 2018-03-31 SubCA   Microsoft Online Svcs BPOS EMEA CA1 Microsoft Services PCA 2018-03-31 SubCA   Microsoft Online Svcs BPOS EMEA CA2 Microsoft Services PCA 2018-03-31 SubCA   Microsoft Online Svcs BPOS EMEA CA3 Microsoft Services PCA 2018-03-31 SubCA   Microsoft Online Svcs BPOS EMEA CA4 Microsoft Services PCA 2018-03-31 SubCA   Microsoft Online Svcs BPOS EMEA CA5 Microsoft Services PCA 2018-03-31 SubCA   Microsoft Online Svcs BPOS EMEA CA6 Microsoft Services PCA 2018-03-31 SubCA   Microsoft Online Svcs CA1 Microsoft Services PCA 2011-03-08 SubCA   Microsoft Online Svcs CA1 Microsoft Services PCA 2018-03-31 SubCA   Microsoft Online Svcs CA3 Microsoft Services PCA 2011-03-08 SubCA   Microsoft Online Svcs CA3 Microsoft Services PCA 2018-03-31 SubCA   Microsoft Online Svcs CA4 Microsoft Services PCA 2011-03-08 SubCA   Microsoft Online Svcs CA4 Microsoft Services PCA 2018-03-31 SubCA   Microsoft Online Svcs CA5 Microsoft Services PCA 2011-03-08 SubCA   Microsoft Online Svcs CA5 Microsoft Services PCA 2018-03-31 SubCA   Microsoft Online Svcs CA6 Microsoft Services PCA 2018-03-31 SubCA   Microsoft Genuine Windows Phone Public Preview CA01 Microsoft Windows Phone PCA 2012-05-21 SubCA   DigiNotar PKIoverheid CA Organisatie - G2 Staat der Nederlanden Organisatie CA - G2 2020-03-23    DigiNotar PKIoverheid CA Overheid Staat der Nederlanden Overheid CA 2010-06-23    DigiNotar PKIoverheid CA Overheid en Bedrijven Staat der Nederlanden Overheid CA 2015-07-27    *.EGO.GOV.TR T▄RKTRUST Elektronik Sunucu Sertifikasi Hizmetleri 2021-07-06    e-islem.kktcmerkezbankasi.org T▄RKTRUST Elektronik Sunucu Sertifikasi Hizmetleri 2021-08-05    addons.mozilla.org UTN-USERFirst-Hardware 2014-03-14    global trustee UTN-USERFirst-Hardware 2014-03-14    login.live.com UTN-USERFirst-Hardware 2014-03-14    login.skype.com UTN-USERFirst-Hardware 2014-03-14    login.yahoo.com UTN-USERFirst-Hardware 2014-03-14    login.yahoo.com UTN-USERFirst-Hardware 2014-03-14    login.yahoo.com UTN-USERFirst-Hardware 2014-03-14    mail.google.com UTN-USERFirst-Hardware 2014-03-14    www.google.com UTN-USERFirst-Hardware 2014-03-14    Microsoft Corporation VeriSign Commercial Software Publishers CA 2002-01-31    Microsoft Corporation VeriSign Commercial Software Publishers CA 2002-01-30"
crypto,315mes,R-EDDIT,1 point,Fri Apr 3 11:53:54 2015 UTC,"Interesting. More than I expected, although, the majority of those are past expiry dates anyway. Thanks for putting that together."
crypto,315mes,disclosure5,2,Fri Apr 3 11:57:47 2015 UTC,"The only safety net we have is the ability and willingness of Microsoft, Apple, Google and Mozilla to detect and black list bad actors. And any given CA can make any other entity in the world a CA by fiat."
crypto,315mes,GahMatar,-2,Thu Apr 2 13:19:29 2015 UTC,Why shouldn't we? I've only heard of a couple issues with them.
crypto,315mes,chaoticlychaotic,5,Thu Apr 2 12:56:47 2015 UTC,"Because they don't actually do anything.  Say I've never heard of Amazon before and I wanted to shop there.  What does their cert being signed by a CA tell me?  That Amazon is trustworthy?  That they're a good value?  That their customer support is good?  So you have to figure out some other reason if you trust Amazon or not.  All the CA does is say ""yes you're on their website"" (barring any XSS attack not happening).  But then why do I trust my CA?  Because their cert was included with a browser I randomly downloaded off a website somewhere?  I have a verisign cert in my browser.  How do I even know if it's from ""the"" verisign and not an impostor?  For all I know my browser has been modified to present fake certs/etc for all domains I go to ...  So ultimately for what CA's ""do"" (re: they just sign a cert ...) the amount they charge is ludicrous.  Any jackass with a 486 could run a competent CA server.  It doesn't cost much at all to provide that service."
crypto,315mes,untitleddocument37,3,Thu Apr 2 14:32:27 2015 UTC,"Because they don't actually do anything. Say I've never heard of Amazon before and I wanted to shop there. What does their cert being signed by a CA tell me? That Amazon is trustworthy? That they're a good value? That their customer support is good?   Huh? No, that's not what it's for. You might as well complain that the FDA isn't telling you which recipes taste best.  The purpose of certificate authorities is to establish that when your browser says https://www.amazon.com at the top, you are really talking with Amazon and not some interloper."
crypto,315mes,crackanape,3,Thu Apr 2 19:15:31 2015 UTC,"So ultimately for what CA's ""do"" (re: they just sign a cert ...) the amount they charge is ludicrous. Any jackass with a 486 could run a competent CA server. It doesn't cost much at all to provide that service.   It's pretty clear you have no idea what you're talking about. Estimates from a friend of mine is that to start up a new CA you'd want on the order of half a million dollars: to cover audits, purchasing HSMs, physical security for online devices, etc."
crypto,315mes,kingkilr,5,Thu Apr 2 16:28:25 2015 UTC,"That's all smoke and flash.  Also HSMs that pass FIPS 140 can be bought for cheap.  The point is what does the certificate ""mean"" and the reality is ""very fucking little."""
crypto,315mes,untitleddocument37,2,Thu Apr 2 16:29:44 2015 UTC,"There's plenty of room to question the value of an HSM. If I have data unencrypted on a thumb drive, sitting in a bank vault with armed guards around it, is it really less secure than a FIPS approved device sitting in the same vault?"
crypto,315mes,disclosure5,2,Thu Apr 2 22:49:53 2015 UTC,The point of the HSM though is that even if the PC is compromised you can limit the damage to however long the thing was plugged in.  Once I unplug it you can't forge any more signatures.  If it were a blind USB disk then you now have my private key once and for all.
crypto,315mes,untitleddocument37,2,Sat Apr 4 18:06:16 2015 UTC,"The marketing from CAs has reached a position of being outright scammy. From repeated statements like ""You MUST buy an EV certificate if you have an online shop"" (source; Every Comodo blog ever) to trying to convince people that their warranties are worth something, to trying to marketing attempts to convince people choosing a ""more secure CA"" can make your website better secure than if you shopped at a less secure CA.  As an industry they are up there with used car sales imo."
crypto,315mes,disclosure5,10,Thu Apr 2 22:42:23 2015 UTC,"Encouraging to at least see Google being serious about implementing consequences for CAs that act naughty.  ""Oops! We made a mistake! We'll try better next time ^_^"" has been quite frustrating to see for a while now from these orgs."
crypto,315mes,ivosaurus,4,Thu Apr 2 13:21:37 2015 UTC,"What happened here is that an intermediate Certificate Authority (CA) of CNNIC in Egypt, MDS Holdings, apparently issued certificates (including www.gmail.com) to themselves and installed them in a web proxy server (in a ""test network""). These proxies work by effectively doing a MitM attack on the traffic. This is normally done on a corporate LAN (and according to Google it was in this case), but by using the falsely issued www.gmail.com certificate, the proxy that was redirecting traffic does not issue a certificate warning (because the chain of trust isn't broken). If this were deployed publicly that means anyone whose traffic passed through that proxy would likely be completely unaware the traffic was intercepted.   This might actually have been an innocent mistake by local engineers in Egypt that did not realize this was improper practice and simply didn't want their users to get a browser error. It's also possible that this company was contracted by someone (likely the national government in Egypt) to issue this cert and deploy this proxy so Gmail traffic in Egypt could be silently intercepted for espionage purposes.   For various technical reasons, it's not enough for Google that CNNIC issued a revocation for the certificate, and even the intermediate CA, to resolve the problem. They are revoking CNNIC's CA root cert, distrusting ALL of the certificates CNNIC has issued. They want CNNIC to create a new root certificate, which means re-issuing all certificates for all web sites in China (the .cn domain). It is likely other vendors will follow Google's move. CNNIC obviously does not want to do this as it means a lot of work for CNNIC and Chinese web engineers.   CNNIC has disputed Google's version of events, but it doesn't really matter. It's Google's decision alone as to what root CAs they choose to trust and at the moment they don't consider CNNIC trustworthy.   TL; DR China issued a bad cert that could be used for espionage, so Google stopped trusting their CA. China will have to re-issue all certs."
crypto,315mes,rtechie1,3,Thu Apr 2 13:52:06 2015 UTC,"I would like to personally extend a deep thank you Google, this decisive action is exactly what is required to promote a trust based security and privacy collaboration, to protect customers and businesses alike, and to allow ALL CAs a good time for introspection around the services they provide.  I encourage all other Trusted Root CAs to take this opportunity to now revise and evaluate their security, their processes and their Trust models, and to continue to deliver high quality trust-based services."
crypto,315mes,blarg_dunsen,2,Thu Apr 2 14:02:48 2015 UTC,"So, the root certificate authority that you're going to be removing from your computer is:   China Internet Network Information Center    Subject: CNNIC ROOT Issuer: CNNIC ROOT (it's a self-signed of course) Valid From: ‎Monday, ‎April ‎16, ‎2007 3:09:14 AM Valid To: ‎Friday, ‎April ‎16, ‎2027 3:09:14 AM Thumbprint (sha): ‎8b af 4c 9b 1d f0 2a 92 f7 da 12 8e b9 1b ac f4 98 60 4b 6f    Steps to remove:   Run certmgr.msc Expand Trusted Root Certificate Authorities Click Certificates Right-click the CNNIC ROOT certificate Click Delete   https://www.cnnic.cn/  Edit: Turns out that Windows downloads trusted root certificates as you need them (rather than shipping them all at once). What you want to do is revoke the certificate before it can ever be used. In order to do that you need to get ahold of the certificate and place it in your Untrusted Certificates list.  The easiest way to do that is to browse to https://www.cnnic.cn and then view the certificate:  http://i.imgur.com/ObJ2EDo.png  You can then see the details of the certificate:  http://i.imgur.com/nA11LP7.png  The very act of looking at this certificate will cause Windows to go download it from their servers and place it in your Trusted Roots list. What you want to do is drag the certificate to your Untrusted Certificates list:  http://i.imgur.com/JOyMvh2.png  If at any time you find yourself trusting China again, you can remove the certificate from you untrusted list:  http://i.imgur.com/nVEJtqz.png  Bonus Chatter  I am sure they made an honest mistake. Many companies support lawful intercept. For example Microsoft makes a firewall for corporations, universities, high schools, and hospitals, to intercept traffic of their employees, students, and staff by perform MitM on your employees.  But two things:   You only attack computers you control, by pushing the fake trusted certificate onto your domain PCs. CNNIC India made the mistake of using a trusted certificate. You never use a trusted certificate for intercept. If you do: you're banned monitoring of employees, or high school students, is immoral. If i catch you doing it: you're banned   CNNIC is banned. I hope you learned something. Don't do it again."
crypto,315mes,JoseJimeniz,1 point,Fri Apr 3 00:05:45 2015 UTC,"I've already revoked trust on my other computers, but on my windows box (8.1 pro x64) I've visited the https://cnnic.cn link and the cert does NOT show up, at all."
crypto,315mes,0culus_,1 point,Sat Apr 11 20:56:34 2015 UTC,"What browser?  I noticed that IE shows the warning, but Chrome didn't.  And then I'd double check the fingerprint of the cert you added to the untrusted list, against the fingerprint of the root of the website cert."
crypto,315mes,JoseJimeniz,1 point,Sun Apr 12 05:38:10 2015 UTC,Firefox. What I'm saying is that the cert is NOT showing up in the certificate manager. At all. I can't find it.
crypto,315mes,0culus_,1 point,Sun Apr 12 05:47:11 2015 UTC,"Well.... You have to put it in the untrusted store.  It may be confusing (I couldn't find it the first three times) but once you add a cert to the untrusted store, a new folder appeared that contained the certs"
crypto,315mes,JoseJimeniz,1 point,Sun Apr 12 05:49:26 2015 UTC,"OH, I'm dumb. Doesn't Firefox use it's own CA store?"
crypto,315mes,0culus_,2,Sun Apr 12 05:52:03 2015 UTC,"Yes, yes it does!  Damn Firefox!"
crypto,315mes,JoseJimeniz,1 point,Sun Apr 12 05:55:54 2015 UTC,"OK, I got it into the untrusted store for windows...now to do the same for firefox..."
crypto,316yly,stze,2,Thu Apr 2 14:10:30 2015 UTC,"Nice guide, thank you!"
crypto,314162,funkspiel56,10,Wed Apr 1 21:14:57 2015 UTC,"Another ""secure"" linux distro that doesn't ship with GRSecurity. Preinstalled apps configured with TOR is only the userspace and something Tails already does. You could at least harden the kernel..."
crypto,314162,dmix,1 point,Thu Apr 2 01:03:48 2015 UTC,"""You could at least harden the kernel..."" - Im just a redditer that found this, not a developer..."
crypto,314162,Natanael_L,5,Thu Apr 2 01:52:05 2015 UTC,How does it compete with Tails? And isn't /r/netsec more appropriate?
crypto,314162,tom-md,1 point,Thu Apr 2 00:56:52 2015 UTC,""" Im just a redditer that found this, not a developer. If I have some spare time Im gonna give it a go..."
crypto,314162,Katana__,1 point,Thu Apr 2 01:52:41 2015 UTC,"Yes, netsec is where it should have gone.  It frustrates me that so much of what I consider spam is evidently not only fair game but well accepted (judging by up-votes) in this forum.  From my perspective, it would be nice to see these sorts of links immediately deleted."
crypto,314162,noneednames,2,Thu Apr 2 16:47:35 2015 UTC,"Disagreeing. We'd be punting it to /r/privacy, because that seems to be the only really relevant thing for it.  Whoop, a portable OS. A real game changer, really."
crypto,311gj0,MercenaryByLaw,15,Wed Apr 1 10:23:19 2015 UTC,There is Cryptography Engineering
crypto,311gj0,deathfantasy,2,Wed Apr 1 12:04:25 2015 UTC,"Great! Am I right that it supersedes ""Practical Cryptography"" but not necessarily replaces ""Applied Cryptography""?"
crypto,311gj0,cruyff8,2,Wed Apr 1 22:50:54 2015 UTC,"This book hasn't been updated since 2011, FYI"
crypto,311gj0,tom-md,5,Wed Apr 1 23:24:55 2015 UTC,Katz and Lindell  http://www.amazon.com/Introduction-Modern-Cryptography-Principles-Protocols/dp/1584885513  HAC:  http://www.amazon.com/Handbook-Cryptography-Discrete-Mathematics-Applications/dp/0849385237/ref=pd_sim_b_3?ie=UTF8&refRID=032C85W9PXNZDB95MHAH  EPrint:  https://eprint.iacr.org
crypto,311gj0,SAI_Peregrinus,3,Wed Apr 1 16:22:05 2015 UTC,"Schneier replaced it with ""Practical Cryptography"" which then got replaced by ""Cryptography Engineering"". Deathfantasy linked that."
crypto,311gj0,heliox,2,Wed Apr 1 19:42:22 2015 UTC,IIRC there's a CD you can buy with more current information covering current ciphers. I believe that it's mentined on the last physical page or so.
crypto,3118hy,conradsymes,3,Wed Apr 1 08:29:00 2015 UTC,Would you mind elaborating (for someone who doesn't know the state of crypto)?
crypto,3118hy,destsk,12,Wed Apr 1 10:11:26 2015 UTC,"I don't know if they mean crypto or the implementations of things that are supposed to be secure (like TLS, SMTP, etc...).  Crypto itself is fine.  We have a ton of useful primitives that are in various degrees of usefulness (for instance even the NIST curves are still ""ok"" to use practically).   Applications that use crypto on the other hand are suspect.  SMTP needs to be completely scrapped.  All servers of all forms should be using TLS 1.2 with PFS today and screw any client that can't comply, etc...  In reality there is too much stock put into ""momentum"" that we have to support old broken shit (WEP, SSL 3.0, etc...) because god forbid a vendor not keep up to date with standards from 8+ years ago..."
crypto,3118hy,untitleddocument37,1 point,Wed Apr 1 11:11:51 2015 UTC,"I love reading your post and it's so true, the issues with crypto is not the design of the algorithms or hash functions - simply the implementations and key management"
crypto,3118hy,WISH-I-WAS-L33T,1 point,Thu Apr 2 00:19:35 2015 UTC,"This thread has been linked to from another place on reddit.   [/r/TorontoCrypto] u/untitleddocument37 Redefines the state of crypto   If you follow any of the above links, respect the rules of reddit and don't vote. (Info / Contact)"
crypto,3118hy,TotesMessenger,0,Thu Apr 2 03:07:40 2015 UTC,"Bureaucracy is huge in the US and the hardware is staying in these operations with crap protocol because people don't care.   Seriously, tell a business owner about NetSec for him and they ask how it's an investment and I don't understand why they ask unless they really don't get threatened.  Most people don't have reason to worry yet because most people don't know how to break into networks like they can break into a car. When people feel threatened, I promise the industry will change completely.  Capitalism first, remember? No one gives a shit about progression or the way it should be, they want it to be the bare minimum for the maximum amount of time possible. I love reading about international hacks or corporate cyber fallout and I don't mind keeping my own info safe until these things change."
crypto,3118hy,disclosure5,4,Tue Apr 7 13:42:09 2015 UTC,"Here's something I did yesterday: * Go to github, and search for ""encryption"" * Set it to your favourite language (in my case, Ruby Gems) * Open the three random encryption products. Bonus points if it's a ""secure library"" others are encouraged to use. * AES-CBC without integrity checks are the default, everywhere."
crypto,3118hy,SoCo_cpp,3,Wed Apr 1 22:50:32 2015 UTC,Sounds like you need more wow in your crypto.
crypto,3118hy,rflownn,1 point,Wed Apr 1 22:01:04 2015 UTC,"It's easy to see it this way because of the amount of how crypto is applied to sell products. The lower-standards ironically in business was ""it's good enough"" and they also took advantage of OSS/GNU/Linux/FOSS etc... because in business it was free. The level of effort they placed into verifying the technology for their use, then to have it basically destroyed by researchers who found flaws in the implementations was demoralizing.  Especially considering the flaws could have been detected by a decent validation like quality and technical assurances. As to why businesses didn't place these safeguards in their implementations just lends many to think that 'crypto' is just a vanity affair and not something of substance or merit on their part.  I just simplified my own use since I believe ideally crypto should be unnecessary, mainly because cryptography on modern communication systems is simple to very complex depending on the requirement of the integrity needed for the system."
crypto,30y60d,johnmountain,4,Tue Mar 31 17:37:39 2015 UTC,What is really sad is that SMTP still even exists. I don't see why eg. IMAP couldn't handle both incoming and outgoing mails. Both should really all just be in one protocol.
crypto,30y60d,mawkus,3,Wed Apr 1 09:00:26 2015 UTC,"Well, it's opportunistic encryption and it's not worthless.  Opportunistic encryption changes the attack requirement from simple passive observation to risky active interception. It stops dragnet collection that we know too well some agencies perform.   Finally, someone was able to word it much better than i can.   Yes we can try to come up with solutions for the N-th degree, when we can use encrytpion and be useful for 99.99% of cases.  You can't make encryption perfect (eventually you get down to people arguing that we can't even trust the compilers we use to write our code; and that we can only use the last C compiler that was released before the Internet came along. And even then people argue that the CPU could be spying on you).  When an ISP is required to perform lawful intercept they are not allowed to do anything that might tip you off. It even includes suddenly giving you a static IP when you always had a dynamic one. They can't sslstrip; as that could be detected.  So SMTP tls encryption is useful for, essentially, everyone."
crypto,30y60d,JoseJimeniz,2,Wed Apr 1 01:04:41 2015 UTC,BTNS gives opportunistic encryption to all protocols.
crypto,30y60d,wbrows,2,Wed Apr 1 04:18:36 2015 UTC,I saw a mail service that had a checkbox that only allowed mail to be sent over encrypted connections. It might have been mailbox.org or fastmail.
crypto,30y60d,dareksam,3,Wed Apr 1 06:42:26 2015 UTC,The point is the attacker can MITM your MX lookup and buy a $10 cert for any domain they want.
crypto,30y60d,sboesen,4,Wed Apr 1 11:05:06 2015 UTC,"And the solution is DNSSEC? Aside from being a horrible solution, dnssec has some bad flaws that blow it out of the game.  As much as I like the need, the solutions are so far pretty bad. DNS wasn't meant for what were doing to it."
crypto,30y60d,indrora,2,Tue Mar 31 22:40:30 2015 UTC,I've never really bothered looking up how STARTTLS is implemented on the wire... Damn scary.
crypto,30y60d,bs4h,5,Tue Mar 31 20:03:30 2015 UTC,"Why? It's the same as basically every other protocol that was designed as plaintext, got SSL added but retains backwards compatibility. They are all horrible."
crypto,30y60d,ajs124,0,Tue Mar 31 23:18:32 2015 UTC,Instead of doing this piecemeal use BTNS.
crypto,30zj1m,boussouira,2,Tue Mar 31 23:23:50 2015 UTC,"Writing the decrypted file to the disk opens to recovery attacks. True, you use ""shred"" however drives are so complex nowadays that the garantee the data will not be recoverable is low. You should at least document this problem."
crypto,30zj1m,alain_proviste,2,Thu Apr 2 10:35:33 2015 UTC,Why not use http://www.passwordstore.org ?
crypto,30zj1m,hugelgupf,2,Wed Apr 1 01:50:31 2015 UTC,"Because his approach is less complicated, with less dependencies, it doesn't require a key as it uses symmetric encryption. I also have the feeling he/she enjoyed creating the script, so yes.  I like it, Boussouira, thanks!"
crypto,30zept,johnmountain,2,Tue Mar 31 22:51:48 2015 UTC,"At this point, every proprietary, closed source product is inferior to open source.  If it can't be examined by the community, no one has any idea about quality, bugs, back doors, or anything.  After three RSA Inc. corporate fiascoes, them being what we all used to consider the pinnacle of private crypto, credibility of all lesser companies were diminished along with them.  One might say an ebbing tide lowers all boats, etc.  So, let them throw shade.  Informed buyers will ignore them all."
crypto,30wod7,mike3m,4,Tue Mar 31 09:00:00 2015 UTC,More like 100% based on recent scanning.
crypto,30wod7,Crash_says,5,Tue Mar 31 13:21:12 2015 UTC,You mean 37% do??
crypto,30wod7,bblackshaw,3,Tue Mar 31 14:58:50 2015 UTC,"About a decade ago I was working on a web site that needed to send an encrypted email to a company so I asked for the public key in question. They sent me everything. Private keys, public keys, for absolutely everything. This was a massive company and these were the keys to the kingdom. If given to the wrong person this might have enabled something like a billion dollar fraud.   These were sent by the head of IT. After about 20 minutes of banging my head against the wall explaining public/private key encryption to him I just gave up and thanked him for sending me the public key.  My main worry was that someday they would hand the keys over to someone who wouldn't just delete them and when the forensic auditors were sent in to figure out who stole all the money that my name would be on a very short list; or maybe a very long one if he were extra stupid."
crypto,30wod7,EmperorOfCanada,1 point,Wed Apr 1 01:42:17 2015 UTC,"No shit. I've set up multiple encrypted stores for the keys, all long forgotten. Requiescant in pace."
crypto,30wuxb,zeroXten,2,Tue Mar 31 10:42:21 2015 UTC,"Actually, can probably ignore key size, as they would probably be covered by something like https://cwe.mitre.org/data/definitions/326.html"
crypto,30wuxb,fluffyponyza,1 point,Tue Mar 31 10:52:42 2015 UTC,If we're talking the curves themselves then I guess SafeCurves is an interesting starting point: http://safecurves.cr.yp.to (by Daniel J. Bernstein and Tanja Lange).
crypto,30wuxb,fluffyponyza,1 point,Thu Apr 2 09:56:57 2015 UTC,"Ah good point, that makes a good general reference :)"
crypto,30x5xg,TheBigB86,13,Tue Mar 31 12:58:32 2015 UTC,The IV length cannot be longer than the block length.  That's how CTR mode works.
crypto,30x5xg,untitleddocument37,2,Tue Mar 31 13:04:06 2015 UTC,"Your request is kind of nonsensical, but since you're here to learn, I'll try to help.  First off, AES 128 uses a 128 bit key. So if you're using AES 256, you're using a 256 bit key. Let's not confuse the block length with key length here. For AES, your block length is always going to be 128 bits/16 bytes regardless of the key length used, so for the purposes of this discussion, the key length is a red herring.  For CTR mode, your IV should be a cryptographic nonce concatenated with some sort of counter value. The cryptographic nonce should be a random value that you've never used before, and the counter can simply start at 0. The counter should be an appropriate data type to hold an unsigned integer that will be at least as big as the number of blocks you're going to be encrypting. So, for example, if you make the first 96 bits of your IV a random value, and the next 32 bits an unsigned integer, that means you can encrypt ~4.3 billion blocks, or 68 gigabytes.  So, essentially, what you're going to do to generate your IV is generate 12 random bytes, and then four zeros, and concatenate them together, so your IV might look like:  14 F6 37 43 94 5C B2 95 DC 2D 9A BC 00 00 00 00   And then, on each iteration of your crypto loop, treat those zeros as an unsigned 32 bit int and increment by one.  If you have any more questions on CTR mode, I'd be happy to help.  Edit: Corrected typo"
crypto,30x5xg,InVultusSolis,1 point,Tue Mar 31 19:57:50 2015 UTC,"Your request is kind of nonsensical, but since you're here to learn, I'll try to help.  First off, AES 128 uses a 128 bit key. So if you're using AES 256, you're using a 256 bit key. Let's not confuse the block length with key length here. For AES, your block length is always going to be 128 bits/16 bytes regardless of the key length used, so for the purposes of this discussion, the key length is a red herring.   Sorry for any confusion. The past couple of days I've been digging through the OpenSSL/BoringSSL API and somewhere deep within that pit of hell they explicitly name the AES operation AES128 (regardless of the key size). I guess that stuck.   For CTR mode, your IV should be a cryptographic nonce concatenated with some sort of counter value. The cryptographic nonce should be a random value that you've never used before, and the counter can simply start at 0. The counter should be an appropriate data type to hold an unsigned integer that will be at least as big as the number of blocks you're going to be encrypting. So, for example, if you make the first 96 bits of your IV a random value, and the nest 32 bits an unsigned integer, that means you can encrypt ~4.3 billion blocks, or 68 gigabytes.   That makes sense. And it's good that you mentioned it, since I hadn't considered that yet. I was about to have it generate a random value the full size of the IV.  Thanks for the elaborate response!"
crypto,30x5xg,tmbinc,3,Tue Mar 31 20:40:47 2015 UTC,"General advice since you seem to fancy AES-CTR over AES-CBC:  First, AES-CTR is a great mode. Second, AES-CTR is a horrible choice.  In real-world systems, I've seen AES-CTR  implemented correctly once, but then more than a few times destroying complete security systems. (For example, some of the initial PlayStation 3 breakage was caused by re-using AES-CTR nonces for some certain binaries where they though it wouldn't matter. Turned out, it did matter.)  Don't dare to use AES-CTR in a custom way. That involves doing anything crazy with the IV other than straight what was already explained here. Please also read http://sockpuppet.org/blog/2013/07/22/applied-practical-cryptography/ - which is very well written. It has a few sentences about AES-CTR. The bottom line is that AES-CBC fails relatively safe(*) if used incorrectly - at least most of the time. AES-CTR fails catastrophically instantly if used incorrectly.  For a cryptographer, that difference doesn't matter a lot - if used incorrectly, both applications could be broken. But for a hacker (or security designer), it matters a lot if the system gets actually broken or theoretically broken. Don't get me wrong - both applications would need to be fixed.  (*) don't quote me on that."
crypto,30x5xg,Natanael_L,2,Tue Mar 31 21:17:10 2015 UTC,"So you're wondering why I want to use CTR?   The case is that I have potentially large files that I need encrypted. The files are updated with deltas, and with CTR I only have to encrypt the deltas (theoretically speaking), instead of having to decrypt the entire file and having to encrypt it again.  Don't worry :) This is just a research topic and will yield a PoC at most. However, if there is a better block cipher mode for this scenario, I'd be happy to re-target my research.  Edit: I'll have a look at that article you posted after I get some sleep."
crypto,30x5xg,sellibitze,3,Tue Mar 31 21:40:28 2015 UTC,XTR XTS (I think) is what Truecrypt uses. That's your best bet.
crypto,30x5xg,Natanael_L,1 point,Wed Apr 1 09:32:49 2015 UTC,"I'm assuming it's XTS? If I understand it correctly XTS tweaks the keys by mixing in the disk sector. The issue is that I'm not working with files on a physical level; I can only manipulate file contents on a logical level, and in that article it mentions that simulating sectors should be a last resort.  I did learn that CTR will make it possible to do statistical attacks if someone has two cipher text versions of the same block. I'm not sure if that is an issue though, as this is a server side system, and someone with enough access to do that could probably do worse things."
crypto,30x5xg,tom-md,3,Wed Apr 1 20:03:41 2015 UTC,"if someone has two cipher text versions of the same block   Yes. That's very bad. Essentially you violate the ""use the IV only once"" rule and everything will fall apart."
crypto,30x5xg,tom-md,2,Thu Apr 2 11:29:59 2015 UTC,"Truecrypt container files behaves the same cryptographicly as Truecrypt partitions does. It is a variable block size counter mode, kind of. Less prone to screw-ups.  Plaintext recovery with key reuse in stream ciphers is real. If you need encryption, you probably should use strong encryption to start with."
crypto,30pvv8,chakalakasp,30,Sun Mar 29 17:58:01 2015 UTC,"This doesn't actually solve the big problem of one time pads which is transferring them and I believe uses AES to do so, meaning the security doesn't rely on one time pads it relies on AES.   This is at BEST as secure as current stuff but more likely less secure. For instance no discussion is made about how they make sure the message isn't tampered with, because with a one time pad if you flip a bit on the ciphertext it's flipped in the output."
crypto,30pvv8,cwmma,4,Sun Mar 29 18:31:36 2015 UTC,"Not only what you said, but it also relies heavily on the randomness of the one-time pad, which could be an attack vector on a mobile devices."
crypto,30pvv8,bluemellophone,3,Mon Mar 30 02:09:50 2015 UTC,"Exactly, it's not random numbers on a one-time pad.  It's PRNG output on a pad.  That's not a one-time pad at all."
crypto,30pvv8,WRSaunders,4,Mon Mar 30 20:21:42 2015 UTC,The only requirement for using Zendo’s One-time pad encryption is users meet in person to exchange pads
crypto,30pvv8,Innominate8,11,Sun Mar 29 19:43:10 2015 UTC,"“The first step is always optical, and that is an exchange of an AES 256bit key, plus an authentication key, and so those are the keys to encrypt the One-time pad as it’s being transferred wirelessly via Multipeer [or Wi-Fi Direct]… with a symmetrical AES key that was exchanged optically. So even if somebody was listening to every single packet, even trying to sniff on Wi-Fi Direct or Multipeer, the data that they would get would be meaningless because it would be encrypted with the optically exchanged keys,” says Newbold.   The one time pad is exchanged after being encrypted with AES.  There is no reason to bother with one time pads here as they are significantly less secure then other methods because if somebody was to be able to intercept the key in the qr code or the one time pad then future encryption would be compromised until you met in person again.  What they are doing is generating random data, encrypting it and sending it to you, you xor your data with it and send it back.  All they have done is shifted the part encrypted with old fashion encryption to be the sending of the pad, not the message, they still have to send that part encrypted.   To use current crypto primitives to do this would be something like   on install the app generates a public/private key pair. you scan my qr code, it has my public key and a random number, signed by my private key. you send me (over wi fi) a message with your public key and the random number signed by your private key. We now have enough info to securely start a chat. To start a chat I generate a diffie-hellman key pair and send you the public one signed with my private key You receive it, verify it's actually from me and then generate your own diffie-hellman key pair and send me the public one signed with your private key. we both use the diffie-hellman algorithm to come up with a shared secret that we both know but nobody else that was ease dropping would know. The secret is the session key and we use it to encrypt out messages we send to each other using an authenticated encryption algorithm like AES-GCM or Chacha20/poly1305.  After the session is over or after a certain amount of time we delete the session keys and have to recreate them next time.   so this is ~how things like ssl and otr work but simplified and made to work with a qr code, unlike the linked to one   an ease dropper on the qr code wouldn't be able to decrypt anything, they could in theory hijack the pairing (e.g. pair with them instead of the intended person) but they wouldn't also be able to pair with the other person so with the right ui it would be obvious that it didn't work. If somebody gets access to your private key, they can impersonate you but they can't eavesdrop on you. The one time pad would have to be as big as the messages is sent so it would add an over head of at least 100%, an authenticated encryption scheme would have 16 bytes of overhead per message plus 2 messages to set up the session."
crypto,30pvv8,cwmma,8,Sun Mar 29 20:12:40 2015 UTC,"I didn't mean to imply that they're not being massively dumb. The in-person key transfer does (partly, they still transfer it using wifi) clear up one of the issues.  The ""one time pad"" is a giant red flag in any crypto system. Its implementation is almost always by people who read about it on wikipedia, see how easy it is to implement, and see that it's ""unbreakable"" without really having any idea what that actually means. In practice one time pads are terrible for most cases and most attempts to use it tend to involve bad solutions for problems that public key crypto solved years ago."
crypto,30pvv8,Innominate8,2,Sun Mar 29 20:45:02 2015 UTC,"Well, the AES encrypted pad data is only transmitted within the same Wifi whereas the OTP-encrypted messages potentially travel across the internet. I think that's slightly better than transmitting AES encrypted messages over the internet (for some paranoid person that does not fully trust AES). I guess, doing the pad exchange optically as well was too slow. :)  But I share your concerns about authentication. I also would like to know where the randomness is supposed to come from. Also, displaying secret information on a display is probably more of a problem than just displaying a public key. Threema just uses this to avoid MITM attacks where it's no problem if a third person also sees the QR code. Zendo relies on this method for establishing shared secrets. So, you really want to make sure that this QR code is only seen by the two parties who want to safely communicate. Of course, Zendo could also use public key crypto in addition to AES. ;)"
crypto,30pvv8,sellibitze,1 point,Thu Apr 2 11:57:40 2015 UTC,"the difference in theoretical security between AES and OTP is that while (when perfectly implemented) OTP may never be broken, AES (when perfectly implemented) mearly may never be broken before the heat death of the universe.   If one was to not trust AES then the sensible thing would be to choose something like Chacha20 which (like AES-CTR) is more or less a onetime pad derived from a seed. This set up still puts a huge amount of trust in AES as we would hope that they encrypt the OTP while it is being stored on the device and they are are likely using AES for that.  The main thing is just that the OTP doesn't actually cause anything to be more secure then it currently is because OTP solves a problem (send a confidential message after previously securely coming up with a shared secret) that has been solved in better ways already. OTP is just marketing hype."
crypto,30pvv8,cwmma,1 point,Thu Apr 2 15:17:13 2015 UTC,"Yeah, I know. There is something about ""information theoretically secure"" that appeals to a lot of crackpots and wannabes."
crypto,30pvv8,sellibitze,20,Thu Apr 2 16:25:53 2015 UTC,"Oh here we go again. Every time somebody says that they are using one time pads it's the same bullshit, eighter it's accually a homebrew streamcipher or they are transfering the pads over the wire (making the entire concept pointless).  If indeed they are going to physically meet to exchange pads (as they say), I still don't see the point:The security of the exchanged keys are only as secure as the PRNG generating them (and I doubt most smartphones have a true RNG they can just read from), besides AES or Threefish are plenty secure.  Even if you are sufficently paranoid to generate the keys perfectly, what's stopping the advesary from getting the pads at the endpoints? What do you trust more? The security of your Apple device or the strength of AES - the weak link to me seems to be Apple here."
crypto,30pvv8,DaWooShit,6,Sun Mar 29 19:48:44 2015 UTC,"Most phones have a microphone and a camera, though. You can probably generate fairly good randomness from those sources if you wanted to."
crypto,30pvv8,bored_me,6,Sun Mar 29 22:25:31 2015 UTC,"And a gyroscope and a compass.  ""Shake your phone real hard"" along with camera input and audio input... that should do it."
crypto,30pvv8,bored_me,2,Mon Mar 30 00:52:08 2015 UTC,"Exactly. Generating randomness (or very good approximation thereof) should be fairly easy for these apps. The problem is transmitting the data which you can't even do using bluetooth. You'd probably have to cable them (vibration is no good either), and even then I'd be skeptical."
crypto,30pvv8,SarahC,1 point,Mon Mar 30 00:58:10 2015 UTC,For almost everyone - who isn't being followed by the FBI - phone to phone transmission is fine.  It's when the gov try peeking at data later that it's needed.
crypto,30pvv8,DINKDINK,1 point,Mon Mar 30 13:20:14 2015 UTC,"Has anyone with an audio background assessed this?  I have some audio engineering background and I'd be concerned with the bit-depth of the analog to digital circuit. Additionally there are a lot of elements that bias an acoustic system that for aural purposes are negligible but if your application is a RNG, I'd need to be convinced more than I am now."
crypto,30pvv8,bored_me,1 point,Tue Mar 31 20:16:21 2015 UTC,"You can get rid of bias if its in one direction easily, it just cuts your bandwidth. If 0is more likely than 1 in the LSB, you just define consecutive lsb of 0 then 1 as 0 and 1 to 0 as 1, throwing out 00 and 11. Different types of biases might be harder to root out."
crypto,30pvv8,sellibitze,1 point,Tue Mar 31 20:51:19 2015 UTC,"As long as there is enough entropy in there, you're fine. For example, you could record one second of audio and map this using SHA512 to 512 bits (which is probably very pessimistic). You might be even able to estimate the entropy given a power spectrum."
crypto,30pvv8,rflownn,1 point,Thu Apr 2 12:21:52 2015 UTC,"The point is it's just making the data more valuable, and restricting access by competitors to the data."
crypto,30pvv8,SarahC,1 point,Sun Mar 29 23:35:38 2015 UTC,"A OTP that is transmitted via NFC is a good idea... make it a couple of gigabytes, and store in both phones memory cards.  Low quality streamed audio or text or images can be transmitted then.  I'd prefer text/instant messaging as the OTP would last the longest time."
crypto,30pvv8,Natanael_L,1 point,Mon Mar 30 13:19:13 2015 UTC,NFC isn't snooping proof
crypto,30pvv8,Innominate8,12,Mon Mar 30 20:51:03 2015 UTC,"OTP tends to be very badly understood. The security of OTP depends on sharing the key securely, the ability to reliably destroy the key after use, and the addition of some kind of authentication to ensure the message is genuine.   Sharing the key securely is difficult to do on a cell phone, but is about as trustworthy as the rest of the cell phone. In person sharing through something like NFC would be relatively effective. The major threat is backdoors which are an equal problem for any encryption mechanism.  The second is nearly impossible on a smartphone. Securely removing data from cell phones/flash memory is hard to do and once the key is recovered it doesn't just expose some messages, it exposes everything ever sent. OTP depends VERY strongly on the key being securely destroyed after use and the nature of computer storage makes it very hard to do reliably short of physical destruction. Modern crypto avoids this pitfall.  The third is almost always forgotten because for the most part people jumping to using OTP don't really know what they're doing. Cryptography is about more than making sure your messages aren't read, it's about making sure your messages aren't modified as well. OTP on its own is trivial to modify without the key simply by being able to guess the original plaintext. If you somehow know (say via shoulder surfing) that someone sent an OTP encrypted ""Yes"", you could trivially modify it inflight to ""No."" without having the key. Without some kind of message authentication added in, OTP is unusably weak.  Edit: ""OTP"" is something generally jumped on by people who see how easy it is to implement and read on wikipedia  that it is ""unbreakable"". Its use in actual products should always be seen as a giant red flag that they don't know what they're doing."
crypto,30pvv8,SarahC,2,Sun Mar 29 20:36:51 2015 UTC,I think you've covered most of the real problems and concerns with this answer.
crypto,30pvv8,DemandsBattletoads,15,Mon Mar 30 13:21:39 2015 UTC,Very interesting concept given that I figured OTP and text messaging were at odds given the key exchange issues.  My main gripe is the fact that it's closed source.  I don't care who audits it -- if it's closed source it's hard to really trust.
crypto,30pvv8,rflownn,21,Sun Mar 29 18:13:31 2015 UTC,If it's closed source you shouldn't be using it for cryptographic purposes.
crypto,30pvv8,jonas02,7,Sun Mar 29 19:54:26 2015 UTC,"Wired magazine is basically taking a piss on crypto, attempting to mark territory with this article like they always do.  I think it's a good point to bring up that the app cannot be called secure if the community cannot bring their own people they trust to verify it. One thing is certain that we can all agree-on is that large amount of revenue is generated by selling personal/private data and providing privileged access to people's devices under back-doors, etc... Apple, Microsoft, etc... are very good examples of being successful  selling a product while still providing venues of privileged access to governments, criminals, etc . We can expect to see more kinds of these apps mainly because cryptography also helps to increase the value of the data by making access to it more restricted/exclusive.  edit; An example is Facebook's data would increase in value if the data from their users are protected instead of being captured by competitors who do not have to deal with infrastructure and therefore sell the data in bulk at lower prices. Therefore Facebook being the sole supplier of that type of data would be able to charge more for access to it. Twitter, is following the same model and ATT successfully applied it already with the government."
crypto,30pvv8,sapiophile,7,Sun Mar 29 23:27:30 2015 UTC,"""They are not even officially claiming perfect forward secrecy"""
crypto,30pvv8,sharedicecream,8,Sun Mar 29 18:40:18 2015 UTC,"cringe.   So long as the pads are kept away from prying eyes and used only once their randomness ensures an uncrackable code. Only the person with the corresponding pad pair can decode the message. This is known as ‘perfect forward secrecy’ in the trade.   No, that is not what that is known as, in any trade."
crypto,30pvv8,atoponce,4,Mon Mar 30 01:30:06 2015 UTC,Wow. Thats is painful to read
crypto,30pvv8,jonas02,8,Mon Mar 30 07:56:04 2015 UTC,"Zendo is not currently open source, so they are asking users to trust their claims as it stands, given there’s no option for community code review.   So much for security."
crypto,30pvv8,TweetsInCommentsBot,4,Sun Mar 29 23:37:10 2015 UTC,Interesting twitter thread: https://twitter.com/sweis/status/580818093267648512
crypto,30pvv8,DemandsBattletoads,1 point,Sun Mar 29 18:43:48 2015 UTC,@sweis   2015-03-25 19:46 UTC  Decompiled the XOR encryption implementation from @zendo's secure messaging app for fun: http://pastebin.com/v61GRu49     This message was created by a bot  [Contact creator][Source code]
crypto,30pvv8,dareksam,1 point,Sun Mar 29 18:43:54 2015 UTC,I hear ROT13 is the superior standard.
crypto,30pvv8,maetthu,2,Sun Mar 29 19:52:23 2015 UTC,"Rot13 has, to my knowledge, speed that is unmatched by current algorithms. When you want speed, rot13 is what you need."
crypto,30pvv8,sapiophile,3,Mon Mar 30 10:38:21 2015 UTC,You can make it even more secure when you run it three times... 3ROT13 is the way to go if you want some security margin for the future.
crypto,30pvv8,Natanael_L,1 point,Mon Mar 30 12:50:13 2015 UTC,How is the entropy pool doing in Android nowadays?   Perhaps the most important question. 0.5MB of cryptographic entropy is a BIG ask...
crypto,30pvv8,sapiophile,2,Mon Mar 30 01:32:29 2015 UTC,"Meh. Get 256 bits and expand with some proper crypto. Yes, I know that's not OTP."
crypto,30pvv8,gpennell,1 point,Mon Mar 30 20:53:03 2015 UTC,Seriously.
crypto,30pvv8,3xt,2,Tue Mar 31 03:51:05 2015 UTC,"Just what we all need-- yet another closed-source, (ostensibly) secure messaging app."
crypto,30pvv8,quixote_arg,2,Sun Mar 29 19:55:50 2015 UTC,Snake oil.
crypto,30pvv8,TheTerrasque,2,Mon Mar 30 01:22:28 2015 UTC,Why bother. This is pseudo security. More like a group of liars behind a brand actually.
crypto,30rhtr,lu7and,5,Mon Mar 30 02:12:48 2015 UTC,DO NOT USE THIS SERVICE. Your texts are not private. Google has all the URLs including the decryption keys.  Proof: http://sebsauvage.net/galerie/photos/Bordel/2015-03-30_cryptbin.png (You can test it yourself with Firefox developer tools.)
crypto,30rhtr,sebsauvage,1 point,Mon Mar 30 08:12:20 2015 UTC,"Oh wow. This is just plain stupid.  As an expansion on this statement: you should always be wary of ""secure"" websites that include 3rd party scripts such as Google Analytics or DoubleClick. They basically open up their website to these scripts and in theory it's even possible you won't see requests happening immediately if the scripts use alternate storage for the leaked information."
crypto,30rhtr,GMTA,1 point,Mon Mar 30 13:16:46 2015 UTC,"Exactly, that's why I do not include any external resource on my instance of ZeroBin (Spoiler: I'm the author of ZeroBin, a similar client-side encrypted pastebin that made the news some months ago (The Anonymous decided to use it)).  JS crypto security is delicate enough not do include any random external js capable of borking the process and ex-filtrating any data. I don't like the ""open bar"" js inclusion idea.  Oh and I don't use CloudFlare either.  (As CloudFlare is very popular, I guess some client-side encrypted pastebin also use it. Doh.)"
crypto,30rhtr,sebsauvage,0,Mon Mar 30 21:31:19 2015 UTC,You seem knowledgeable in this. What do you think of paper wallet generator websites for Bitcoin?  Do the wallet generators have the ability to access funds in the wallets generated by their website?
crypto,30rhtr,ltc4usd,1 point,Mon Mar 30 11:50:21 2015 UTC,"In fact, I'm really not fond of the whole javascript thing. Really.  My ZeroBin project (client-side encrypted pastebin) was a proof-of-concept, just for fun. I'm merely 500 lines of js+php.  Providing a pastebin where the server is voluntary blind to the content is a nice idea, but I would never let browser-side js manipulate my private OpenPGP keys or BitCoin Wallets (if I had any).  The browsers do not offer the same separation security as most OSes do (even if they too can be abused).  (edited for typo)"
crypto,30rhtr,sebsauvage,1 point,Mon Mar 30 21:35:00 2015 UTC,Ty for explanation. I don't think I would trust any online wallet generators.  There is a way to create your own wallet by rolling dice-- I think that's pretty cool and a good way to do it.
crypto,30rhtr,ltc4usd,4,Mon Mar 30 21:51:35 2015 UTC,"Ah, so as long as we trust a non-trustworthy third party, we can have our cake and eat it too."
crypto,30rhtr,GahMatar,1 point,Mon Mar 30 02:15:35 2015 UTC,I contacted the developer. He had missed this point and is going to correct it.
crypto,30mi2r,angdev,27,Sat Mar 28 19:06:57 2015 UTC,"XOR has the nice benefit of being its own inverse without requiring any extra information (e.g. carry bits or sign bits) or risk of underflow/overflow. Essentially XOR works on any bit stream without making assumptions about the data itself or requiring context on how it was calculated. I imagine you could do addition modulo some block size, but bitwise addition with discarded carries is easier ... and that's the same as XOR."
crypto,30mi2r,stevenxdavis,3,Sat Mar 28 20:55:23 2015 UTC,"I guess I should have been more clean in my OP, but the sign/carry bits (flags) are not needed (or have any significance) when using ADD/SUB. Assuming some generic 32-bit machine, regardless of XOR, ADD, or SUB the algorithm would always be working on 32-bit block sizes:  mov r1, [value]  // move value into register r1 mov r2, [cypher] xor r1, r2 mov [value], r1  mov r1, [value]  // move value into register r1 mov r2, [cypher] add r1, r2 mov [value], r1   XORing r2 onto r1 and ADDing r2 onto r1 will both result in a 32-bit value. My question is: Is ADD less secure than XOR? I understand XOR is easier to use for many reasons, which is why ADD/SUB are not used."
crypto,30mi2r,stevenxdavis,8,Sat Mar 28 21:17:03 2015 UTC,"This ADD implementation would be as secure as XOR if you could guarantee two things:    The system would never accidentally terminate on an overflow/underflow. If it did, then the system would be vulnerable to attacks that terminate the algorithm at key places by strategically inserting overflows.  An attacker could not access the carry bits or error bits produced by the algorithm. These contain some information about the data that could be used by an attacker.    XOR avoids these specific problems because it has no error conditions or additional output bits. These are implementation-specific issues, though; from a purely mathematical standpoint, there is no problem."
crypto,30mi2r,aris_ada,1 point,Sat Mar 28 22:57:52 2015 UTC,OK thanks.
crypto,30mi2r,TNorthover,22,Sat Mar 28 23:26:32 2015 UTC,"An addition consumes way more gates and transistors than a simple xor, also has the disadvantage of not being a single-bit operation (you need to do the addition on blocks, otherwise you have a dangling carry bit).  On the security side it's perfectly safe to replace xor with additions in the schemes that do not rely on a special bitwise property of the xor. Mixing the key schedule in AES or mixing the clearstream with cipherstream in a stream cipher with an ADD instead of XOR would be perfectly fine, assuming the ADD instruction is constant-time on the target CPU."
crypto,30mi2r,chipsa,6,Sat Mar 28 19:29:39 2015 UTC,[Addition] also has the disadvantage of not being a single-bit operation.   And the reason this is bad is because it increases the worst-case timing for your circuit. You have to give the transistors longer to reach a stable state (possibly propagating a carry through all 128 bits) and get a lower maximum clock speed as a result.  Though for accelerated instructions on a generic CPU that may still be hidden by  other instructions being closer to the limit. It's going to depend entirely on the particular CPU variant.
crypto,30mi2r,cogman10,2,Sat Mar 28 23:03:47 2015 UTC,"Carry cannot possibly require propagating through all 128 bits. There's such a thing as carry look ahead adders. It depends on the implementation, but you're probably looking at only 12 gate delays, rather than 127.  If the processor is wide enough to have a 128 bit adder, it's probably also got the transistor budget to spend on CLA adders, as having a narrower (64-bit) ALU would save significantly more transistors than taking off the CLA hardware."
crypto,30mi2r,bitwiseshiftleft,0,Sun Mar 29 21:34:28 2015 UTC,"There is no reason to be concerned with number of transistors an operation uses when designing cryptography algorithms. Transistors are dirt cheap, very little die space is dedicated to transistors used in the actual logic.  While it is true that add uses more transistors than xor, the operation of both happen faster than a single clock cycle on pretty much every CPU.  If you are concerned about the performance of your cryptography algorithm, memory access will be the first thing to look at and division/modulo/multiplication operations should be the next. add, xor, shifts, and rotates are essentially free (usually happening in a single clock cycle)."
crypto,30mi2r,cogman10,11,Sat Mar 28 22:02:38 2015 UTC,"This is sort of true in crypto designed exclusively for CPUs, but many ciphers are supposed to work in embedded circuits like smart cards and RFID tags, which are very limited by die space.  Furthermore, the addition operation's chain of AND gates makes it a pain in the butt to mask against power analysis."
crypto,30mi2r,GahMatar,3,Sat Mar 28 23:50:25 2015 UTC,Fair enough. I wasn't thinking about RFID.
crypto,30mi2r,docholiday,3,Sat Mar 28 23:59:20 2015 UTC,"The funny thing is that by far one of the most common platform for crypto is basically smart cards. There's at least one in every single phone (the sim, possibly a second in an nfc chip for google pay), most transit cards, many many ID cards, newer passports, credit cards and debit cards outside the US, etc. I have 6 in my wallet, 4 of which do crypto.  They pretty much all have tiny power budget and 8-bit micro controller with h/w crypto modules."
crypto,30mi2r,daveime,2,Sun Mar 29 05:01:18 2015 UTC,"Bingo, you nailed it. Not every circuit is in a modern processor running off AC."
crypto,30mi2r,AcaciaBlue,5,Sun Mar 29 12:56:48 2015 UTC,"While it is true that add uses more transistors than xor, the operation of both happen faster than a single clock cycle on pretty much every CPU.   But ADD will still be at an absolute minimum 4 times slower than XOR assuming naive half-adders were used.  ADD uses 4 gates x 128 bits where the state of each half-adder is dependent on the state of the previous one being stable.  XOR uses 1 gate x 128 bits and all states are independent of each other.  Way, way more efficient in any circuit."
crypto,30mi2r,cogman10,5,Sun Mar 29 02:23:55 2015 UTC,You must not be a computer scientist because this post is heresy.
crypto,30mi2r,Godspiral,7,Sat Mar 28 22:29:44 2015 UTC,"Actually it is very accurate. On anything from an Intel, AMD, Via, or even embedded CPU's from Atmel, TI, etc, ADD and XOR are single-cycle operations. On CPU's with multiple execution units (like Intel/AMD's which have 4), multiple ADD's and XOR's can happen in a single cycle due to OOE & pipelining."
crypto,30mi2r,AcaciaBlue,0,Sat Mar 28 23:35:29 2015 UTC,:).  I studied computer engineering in college and am somewhat of a performance geek.  The biggest mistake most make when talking about performance is focusing on things that don't matter.  Transistor count is one of those things ;).
crypto,30mi2r,docholiday,2,Sat Mar 28 23:02:13 2015 UTC,He's a software guy.... transistor counting and timing is an unimportant detail for some other class of humans to deal with.
crypto,30mi2r,SAI_Peregrinus,7,Sat Mar 28 23:28:08 2015 UTC,"There could always counter examples on different architectures, the point is that theoretically speaking XOR is a simpler instruction to implement so is probably a safer bet.  I'd also like to point out that rotates especially are not essentially free since most nVidia GPUs don't even implement them in hardware."
crypto,30mi2r,docholiday,3,Sun Mar 29 01:08:48 2015 UTC,"As someone who has designed lots of hardware blocks in many common processors and ASICS, including laptops and cell phones, I can tell you this is not the case. Every time I was on a sales call with a prospective customer (think ASIC manufactures who want to buy IP block, this includes Intel, Qualcomm, IBM, etc), they asked about transistor count and power."
crypto,30mi2r,cunttard,2,Sun Mar 29 02:22:15 2015 UTC,"Side channel attacks (Timing attacks, differential power analysis, etc) are extremely important, and often depend on the actual hardware implementation used. Transistor counts matter for power consumption, and secret-dependent transistor usage leaks information through power consumption. That's extremely important in any cryptosystem that might fall into the hands of an attacker (phones, laptops, smartcards, etc).   http://www.cryptography.com/resources/whitepapers/DPA.pdf"
crypto,30mi2r,autowikibot,1 point,Sun Mar 29 13:01:16 2015 UTC,"While it is true that add uses more transistors than xor, the operation of both happen faster than a single clock cycle on pretty much every CPU.   Yes and no. The reason it happens in less than a cycle is because some engineer made it happen. Much easier to do with an XOR and less power. Perhaps not important in a cutting edge processor, but if you are one an older node, you might appreciate the ease in which one can implement an XOR over and ADD."
crypto,30mi2r,throwaway0xFF00,8,Sun Mar 29 04:28:07 2015 UTC,"In finite field arithmetic: addition/subtraction (mod 2) and XOR are equivalent. This is the underlying math used in AES, so they can be replaced interchangeably (I believe). This might have unintended side channels.  On another note, one time pad remains perfectly secret if you substitute XOR with addition modulo the message length.  XOR is just convenient."
crypto,30mi2r,ITwitchToo,1 point,Sun Mar 29 12:56:01 2015 UTC,"Section 2. Addition and subtraction of article  Finite field arithmetic:       Addition and subtraction are performed by adding or subtracting two of these polynomials together, and reducing the result modulo the characteristic.  In a finite field with characteristic 2, addition modulo 2, subtraction modulo 2, and XOR are identical. Thus,  Polynomial: (x6 + x4 + x + 1) + (x7 + x6 + x3 + x) = x7 + x4 + x3 + 1     Interesting: Zech's logarithm | Shamir's Secret Sharing | CLMUL instruction set   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,30mi2r,Natanael_L,1 point,Sun Mar 29 01:13:55 2015 UTC,This.  This is the only answer I've seen thus far in the comments which answers:   Or is XOR just used because it is more convenient in both code and practice?
crypto,30mi2r,cunttard,0,Sun Mar 29 01:14:31 2015 UTC,"They may be ""equivalent"" in some sense or another, but ADD should provide better mixing properties than XOR since each output bit depends on more than just the two inputs in that particular place."
crypto,30mi2r,ITwitchToo,2,Sun Mar 29 16:02:06 2015 UTC,"In other words, XOR acts as a single-bit block cipher and ADD as a CBC mode cipher"
crypto,30mi2r,cunttard,1 point,Sun Mar 29 16:45:02 2015 UTC,"They may be ""equivalent"" in some sense or another   Addition, subtraction, and XOR are equivalent in GF( 28 ). In other words if you treat each operation as functions, they're equal."
crypto,30mi2r,cypherpunks,-1,Sun Mar 29 18:59:47 2015 UTC,"They are definitely not equal. I don't think you know what you're talking about, so please don't spread this nonsense."
crypto,30mi2r,docholiday,2,Sun Mar 29 21:37:05 2015 UTC,"Want to rebuke my claim (and that of wikipedia), show a counterexample in GF( 28 )."
crypto,30mi2r,SpeakerToLampposts,4,Mon Mar 30 05:47:07 2015 UTC,"No, it's just more convenient.  With ADD/SUB, you have to define the word size: am I adding 8 bits at a time, or 32 bits at a time, or 64 bits at a time, or 128 bits at a time, or am I adding the entire streams with infinite carry propagation?  If you add 1 bit at a time, you get XOR.  It affects the security analysis, requiring a complete re-do if you change it, but the net effect on security is expected to be negligible.  For AES in particular, where there are a lot of Galois field based operations, it makes the analysis simpler."
crypto,30mi2r,autowikibot,2,Mon Mar 30 11:38:13 2015 UTC,"I am not a crypto guy, but I am a hardware guy and one observation is if you ever try to build a dedicated IP block to do crypto, you would much prefer to implement an XOR over an ADD. The carry in the add creates performance and power penalties vs an XOR, which is just a couple gates per bit with no interaction between them."
crypto,30mi2r,tmbinc,2,Sun Mar 29 08:48:45 2015 UTC,"Another problem with add/sub that hasn't been mentioned is that it's sensitive to word size and endianness (i.e. which direction carries run between bytes). This means that you have to pick the word size and endianness as part of the cipher protocol, and if you're trying to implement it on a CPU that doesn't match these decisions you'll have implementation issues:   If the CPU supports long-integer arithmetic (longer than the cipher uses), you can't take advantage of it. If the CPU doesn't support add/sub for large enough words you'll have to implement your own carry-between-words (which has a potential to cause data-dependent timing). If the CPU is the wrong endianness you'll either have to swap byte order before & after operations, or implement your own carry between bytes (which'd be a complete mess). Finally, there's a potential for problems dealing with data sizes that aren't divisible by the chosen word length. Defining & handling the necessary padding shouldn't be difficult (except maybe stream ciphers with big-endian carries), but it's something you just don't have to worry about with xor."
crypto,30mi2r,conradsymes,1 point,Sun Mar 29 12:54:11 2015 UTC,"Endianness:       The terms endian and endianness refer to the convention used to interpret the bytes making up a data word when those bytes are stored in computer memory. In computing, memory commonly stores binary data by organizing it into 8-bit units called bytes. When reading or writing a data word consisting of multiple such units, the order of the bytes stored in memory determines the interpretation of the data word.  Each byte of data in memory has its own address. Big-endian systems store the most significant byte of a word in the smallest address and the least significant byte is stored in the largest address (also see Most significant bit). Little-endian systems, in contrast, store the least significant byte in the smallest address.   The illustration to the right shows an example using the data word ""0A 0B 0C 0D"" (a set of 4 bytes written out using left-to-right positional, hexadecimal notation) and the four memory locations with addresses a, a+1, a+2 and a+3; then, in big-endian systems, byte 0A is stored in a, 0B in a+1, 0C in a+2 and 0D in a+3. In little-endian systems, the order is reversed with 0D stored in memory address a, 0C in a+1, 0B in a+2, and 0A in a+3.    Image i     Interesting: SEX (computing) | Date and time notation in Cyprus | Specials (Unicode block) | Core Foundation   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,30mi2r,Gh0stRAT,1 point,Sun Mar 29 18:49:29 2015 UTC,"One thing that wasn't mentioned here is side-channel attack resistance. To avoid DPA/EMA attacks (where the attacker looks at a power signature emitted when computing the calculation, trying to determine the secret parts), it's vital to minimize data dependencies.   A conditional overflow leaks a lot stronger than just a xor.  This is especially true for software implementations of crypto algorithms, which in general leak a lot stronger already since more transistors are involved."
crypto,30mi2r,fml-6626,1 point,Sun Mar 29 18:50:09 2015 UTC,"FYI: In ""Related-key Attacks on Triple-DES and DESX Variants"", it is shown that chosen plaintext attacks are easier when the whitening keys are added modulo 264."
crypto,30mi2r,AusIV,0,Tue Mar 31 21:35:14 2015 UTC,"In crypto, it is essential that the resulting cyphertext is indistinguishible from a collection of random bits.  XOR has a very important property: XORing a uniform random distribution with anything else results in another uniform random distribution. This prevents the cipher from being vulnerable to certain kinds of attacks.  EDIT: Wasn't thinking of modulo 2, so I didn't realize add/sub is equivalent to XOR. Thank you for pointing out my mistake."
crypto,30mi2r,OmicronNine,13,Fri Apr 3 09:22:21 2015 UTC,add/sub also has this property  it's just way more complex for no reason at all
crypto,30mi2r,VorpalAuroch,2,Sat Mar 28 20:52:11 2015 UTC,"I believe /u/fml-6626 was saying add/sub is way more complex than XOR, without bringing any value to the equation."
crypto,30mi2r,fml-6626,1 point,Sat Mar 28 21:08:07 2015 UTC,"Oh... OH! I see now. I misunderstood what ""it's"" referred to.  My mistake, nevermind. :P"
crypto,30mi2r,VorpalAuroch,1 point,Sat Mar 28 22:20:10 2015 UTC,"I don't think it does, unless you're wrapping around overflow bits somehow. There is information in the leading/trailing bit that's needed to recover via the inverse, and that information isn't uniformly distributed."
crypto,30mi2r,Natanael_L,2,Sat Mar 28 22:35:39 2015 UTC,the OP said that it was including overflow
crypto,30mi2r,Natanael_L,1 point,Sat Mar 28 22:38:32 2015 UTC,"And did not in any way specify how that was being handled without leaking information. Addition ""with over/underflow"" does not narrow it down; the only addition that doesn't have any over/underflow is the bitwise version, otherwise known as XOR."
crypto,30mi2r,Natanael_L,0,Sun Mar 29 00:17:18 2015 UTC,"XOR is the best because it describes the nature of cryptography and Turing's work.  Additive or subtractive (unless modulo because it's similar to XOR) provides context and ""breadcrumbs"" in the message which can be statistically analyzed or unfolded. XOR is tricking the way our brains think (in terms of a beginning and end for causal relation, thus information) so there is nothing better without rethinking information theory, which may need to happen soon. It's more likely that everything is ALWAYS a 0 and a 1 but people reading it are looking for certain messages. If you could make the message they're looking for more important than the key, then you could have something better than crypto like XOR but that also sounds like telepathy, lol. Right now, you need information and context. If you could make the information CHANGE based on the context of the user, that would be amazing and I think it's the principle behind quantum code/cryptography but someone will have to back me up on that.  The shadow-y goal that people don't talk about anymore behind the implementation of XOR is to compress it somehow, but most will laugh right here because the most you can do is factor evenly (or with prime numbers but now we're talking real crypto, not just theory). Real crypto uses prime numbers (co primes, twin primes) because they are just like 0 or 1, they are unique and have no statistical implications if multiplied in certain ways. Like how a cake can't be unbaked.  You want to make a crypto that is powerful enough to be unhackable/unreadable but is easy enough to implement that a Facebook user on their phone could have a password stored and retrieved. This is the nature of cryptographic symmetry and entropy and is indeed a vicious challenge and is the subject of some of the most important and secret research that anyone is doing right now. Too smart for Watson but dumb enough to work on any device's logic processor.   That's why they say don't bother making your own crypto but that's an asshole thing to say that would devolve the conversation so go ahead and do some trial and effort, why not. Read GEB and get it off of Amazon."
crypto,30mi2r,Natanael_L,2,Sun Mar 29 00:26:32 2015 UTC,"You sounds like you need to read up much more on the theory of modern crypto, and quantum computer factoring, etc..."
crypto,30j8fi,johnmountain,10,Fri Mar 27 21:04:36 2015 UTC,Isn't this what xmpp and friends are supposed to fix?
crypto,30j8fi,indrora,1 point,Fri Mar 27 21:11:38 2015 UTC,Could you elaborate?
crypto,30j8fi,n0xin,10,Sat Mar 28 09:15:18 2015 UTC,"XMPP works similar to e-mail – everyone can host a server, and there's no central instance.  And, just like e-mail, it's a usability nightmare. The core protocol is primitive, and almost all features you expect from a modern chat are only available in extensions. Just look at the list to get an idea how many there are. There's no server and no client that implement all of them, the implementations aren't always compatible to each other (or work at all), and the extensions don't even cover all features you'd want (say, end-to-end encryption – there's GPG and OTR, but they're only bolted on by chat clients and in practice work even more poorly than the rest).  Just like 90% of all e-mail is handled by Google and Microsoft because it's impossible for everyone else to get it right, the biggest XMPP deployments are Facebook's and Google's chats, which are isolated against the rest of the XMPP network.  Edit: What I'm trying to get at is that XMPP is not the solution. It's part of the problem. At best we need new servers and clients that actually implement all the extensions needed to be competitive with a usable UI. At worst it needs to be replaced by something saner."
crypto,30j8fi,Creshal,6,Sat Mar 28 09:51:46 2015 UTC,"I use XMPP all the time and run my own server. I don't have any trouble using it. I do not use or want any of the extensions I see on a quick skim of your list. Most of them look like the usual stupidity of trying to turn a simple application into All Things to All People (FORMS?? What kind of idiot would put forms in a chat system???). All you need for chat is chat. For extra credit, group chat, but honestly that's an infrequent use case and is better covered using an IRC server. I do use end to end encryption (OTR). OTR is extremely usable, to the point where my client constantly negotiates working OTR connections with people who don't even know they have OTR capability. And end to end doesn't need to be anywhere but in the clients. That's why it's called ""end to end"". I communicate with Google users all the time."
crypto,30j8fi,Hizonner,1 point,Sat Mar 28 13:05:41 2015 UTC,"I use XMPP all the time and run my own server.  I don't have any trouble using it.   Welcome to the 0.01% club.   I do not use or want any of the extensions I see on a quick skim of your list.   Offline messages? Multi-user chats? Server-side contact lists? Chat logs? Proxies? File transfer? Text formatting? User registration? Avatars? Away status? Audio chat? Video chat?  XMPP without any extensions is useless. I'm fairly sure both your server and client implement at least some of these. And very likely, not the same subset. (Note that occasionally there are several extensions needed for one feature, and sometimes there are several competing extensions to provide the same feature.)  And even XMPP servers/clients implementing all this don't come close to e.g. Skype in terms of features (you'll need some 20 more extensions), much less usability.   OTR is extremely usable   Try it again when both users have multiple devices with different clients and spotty connectivity. You can't even manually synchronize your fingerprint lists on some clients."
crypto,30j8fi,Creshal,3,Sat Mar 28 14:14:23 2015 UTC,"Offline messages?   That's what email is for.   Multi-user chats?   I said that's what IRC is for. But I have to agree that it might sometimes useful. Not useful enough that I've ever bothered to set it up on my server, though, even though the software exists and wouldn't be that hard to install.   Server-side contact lists?   Meh. I suppose it might be vaguely useful sometimes. Can't say I miss it. It takes 5 seconds to add a contact, and the addresses are easy to remember. And my desktop contact list is way too long to use on a mobile; having them automatically sync would be really annoying if I couldn't disable it. And if I weren't the one running the server, I wouldn't want to trust the server with a list of my contacts.   Chat logs?   Pure client feature, has nothing to do with the protocol. Unless you mean server-side logging, in which case it's an anti-feature.   Proxies?   Why would you want an XMPP-layer proxy? If you mean stuff like SOCKS, that again is a local feature that has nothing to do with the protocol.   File transfer?   Completely different application and should be treated as such. Usually a security hole when implemented in chat systems.   Text formatting?   Not particularly useful. I have it and usually use ASCII-style emphasis and whatnot because it's faster to type.   User registration?   Why would you want to do that in-protocol? If anything, that's only useful for increasing centralization (and/or opening yourself up to abuse).   Avatars?   Pure pointless masturbation.   Away status?   Hey! Actually useful. How many clients/servers don't do that one?   Audio chat? Video chat?   Completely different applications and should be treated as such. Also easy to misconfigure in dangerous ways.   XMPP without any extensions is useless. I'm fairly sure both your server and client implement at least some of these.   Uh-huh. Including some I don't want at all. How many actually necessary extensions are not universally implemented?    OTR is extremely usable Try it again when both users have multiple devices with different clients and spotty connectivity.    Not my use case so I can't speak to it. I guess if each person has two devices, you end up having to do four key verifications, which I agree is not ideal."
crypto,30j8fi,Hizonner,2,Sat Mar 28 17:30:16 2015 UTC,"That's what email is for.  I said that's what IRC is for.  Meh. I suppose it might be vaguely useful sometimes.   Pure client feature  Completely different application and should be treated as such  Not particularly useful  Why would you want to do that  Pure pointless masturbation.   Meanwhile, some 1.5 billion people want that and are using… not XMPP. Gee, I wonder why XMPP never took off! Exactly this attitude is what I meant with usability nightmare.   Not my use case so I can't speak to it.   Key verification is bad already, but session handover just doesn't work. When your messages only have a 1/4 chance (or worse) to be successfully received, you stop using OTR. And no matter how much you argue, smart phones, tablets and notebooks are not going to suddenly disappear and bring us back to the 1:1 user:computer mapping OTR expects (if not in the protocol, then at least in all real-world implementations)."
crypto,30j8fi,Creshal,5,Sat Mar 28 17:54:36 2015 UTC,"The basic problem behind Slack and others is a centralized storage of information and control. XMPP is built on a highly decentralized system, and systems like IRC are built on redundancy created within the network."
crypto,30j8fi,indrora,5,Sat Mar 28 13:01:30 2015 UTC,"As a rule of thumb, if you don't control access to the data yourself or if you don't control the encryption of that data yourself, you should assume that it's public and that there exists at least on copy of it somewhere."
crypto,30j8fi,DemandsBattletoads,0,Sat Mar 28 04:17:01 2015 UTC,Why? You could hacked as well.
crypto,30j8fi,devsquid,1 point,Sat Mar 28 12:09:09 2015 UTC,"If you get hacked, a server can't help"
crypto,30j8fi,Natanael_L,2,Sun Mar 29 18:55:05 2015 UTC,I would have liked more substance in this article. It weirdly ended up as a plug for their business model with no real solution proposed or alluded to.
crypto,30j8fi,yalogin,2,Sat Mar 28 16:35:24 2015 UTC,The stupid thing about this is they bothered to collect user data and keep it online.
crypto,30j8fi,cyancynic,2,Sat Mar 28 19:08:26 2015 UTC,I know just enough about security to know that they can do a much better job at securing chat data than I can by myself.
crypto,30j8fi,krypticus,4,Sat Mar 28 05:19:23 2015 UTC,"I think there's a threshold of interesting that makes a large repository a more likely target than a small one. If all repositories are small, then attacks which make large amounts of data available become very costly to attackers."
crypto,30j8fi,jiannone,1 point,Sat Mar 28 11:19:21 2015 UTC,"Yeah, for sure! It's a very difficult tradeoff, especially when you don't know what kinds of tech/security choices these kind of companies are making. I feel very paranoid most of the time, but I've decided that Slack can fend off attacks and keep a better eye on what the signs might be for an intrusion, which is why I'm a happy subscriber. Hopefully if we hire a full time sys admin, we can bring chat in house. I would miss slack though..."
crypto,30j8fi,krypticus,2,Mon Mar 30 00:16:51 2015 UTC,Convenience |-----------------------------------| Security   It's hard to get the right balance and like it's stated in the article:   The interesting thing about security is no one cares about it until shit hits the fan.
crypto,30j8fi,_kossak_,2,Sat Mar 28 11:35:54 2015 UTC,Or you can maximize both by ditching passphrases for public key authentication.
crypto,30j8fi,TheScriptKiddie,1 point,Sat Mar 28 18:15:08 2015 UTC,"I'm not sure public key authentication is more convenient than passwords/passphrases. I mean, at least key distribution and key management is still a problem."
crypto,30j8fi,_kossak_,2,Sat Mar 28 18:28:24 2015 UTC,U2F is nice.
crypto,30cozj,johnmountain,3,Thu Mar 26 08:06:21 2015 UTC,"Looks like it's a repost of an article from NorthStar newsletter: http://iahushua.com/WOI/nsanet.html  It doesn't list Assange as the author, he only sent it to the newsgroup."
crypto,30favw,Nunuvin,9,Thu Mar 26 22:11:38 2015 UTC,"Cryptography is strong if you can know the algorithm to encode/decode it but still be unable to do so (in a feasible amount of time).   In the case of old cypher text like Voynich manuscript, we don't know how it was encoded, or if it's even decodeable at all (maybe some are just the scrawlings of a schizophrenic). I suspect if we knew the algorithm for encoding the Voynich manuscripts, it wouldn't be much of a challenge."
crypto,30favw,warpzero,5,Thu Mar 26 22:19:21 2015 UTC,"I suspect if we knew the algorithm for encoding the Voynich manuscripts, it wouldn't be much of a challenge.   Well, that is not necessarily true. Some people assume that the Voynich manuscript was encrypted using a Cardan Grille in addition to simple substitution. In that case it would be almost ""impossible"" if enough of these cardan grille sheets were used."
crypto,30favw,setnorth,3,Thu Mar 26 23:25:10 2015 UTC,That's a fair point; I have to admit I'm not very familiar with the Voynich manuscripts.
crypto,30favw,warpzero,6,Fri Mar 27 00:23:43 2015 UTC,"Not all classical cryptography is weak. Realize, ""classical cryptography"" doesn't necessarily mean old. It more specifically means pencil and paper, or hand cryptography. There are modern hand ciphers that are built or inspired by modern computer algorithms, such as RC4, that could still be relatively secure, even for modern cryptanalysis.  Some mechanical ciphers, such as the Chaocipher, while they way have shown weaknesses, don't have a ciphertext-only break. There are a couple reasons for this.  First, most doctorate students aren't putting in the time to study them, because the bulk of crypto done today are modern computer algorithms. Some journals might be interested in hand ciphers, but there is little practical use in them. So they provide mostly educational and historical value.  Second, most hand ciphers are iterations or hybrids of already broken algorithms, such as autokey, playfair, or double transposition. Because these are already broken, there is little value in breaking all of their related algorithms, by applying similar methods over and over.  With that said, there is a small group, including myself (http://aarontoponce.org/wiki/card-ciphers) that find studying hand ciphers in our own time rewarding. While I may never discover a break in any hand cipher, learning them and practicing them is fun nonetheless."
crypto,30favw,atoponce,3,Fri Mar 27 02:53:48 2015 UTC,"Thanks, Do you know any good sources (websites/books) for information about classical cryptography?"
crypto,30favw,benopenledger,5,Fri Mar 27 03:48:16 2015 UTC,"I recently read The Code Book by Simon Singh, which is a great introduction to early encryption systems and decryption techniques. The style of writing is probably a bit more page turning than Kahn's The Codebreakers."
crypto,30favw,PTR47,5,Mon Mar 30 09:45:16 2015 UTC,"In regards to the Voynich specifically, I have looked at it and personally done a new transcription of the botanist section (Part I), developing a lexicon for error correction based on several existing attempts. I believe, personally, that the Voynich may be a dead language, meaning it would employ both cryptographers as well as linguists. The astronomical section MAY give some breaks if the stars can be somehow correlated with some Arabic names.  If you want a good book on hand ciphers, I have greatly enjoyed ""Cryptanalysis"" by Helen Fouché Gaines which you should be able to find on Amazon.  EDIT: Incidentally, I grabbed ""The Agony Column Codes & Ciphers"" by Jean Palmer at the same time as Cryptanalysis -- basically a pretty massive collection of old hand ciphers to root through, some still unsolved. If I were to choose two small books that could occupy me on a desert island for 5 years, this pair is a great choice."
crypto,30favw,setnorth,3,Fri Mar 27 06:50:13 2015 UTC,"Thanks, Do you know any good sources (websites/books) for information about classical cryptography?"
crypto,30g2ek,cryptotronic1,3,Fri Mar 27 01:53:23 2015 UTC,"The true entropy of the output is however much entropy seeded the CSPRNG, or 128 bits, whichever is less. However to an adversary with limited computational power, providing the seed entropy is reasonably high and outputs from that seed are not overused, the entropy would appear to the adversary to be 128 bits even if the seed was less. That's the point of a CSPRNG, and the hash and truncate operations shouldn't reduce that so long as SHA256 is a secure hash as we believe it to be."
crypto,30g2ek,Sostratus,1 point,Fri Mar 27 02:41:53 2015 UTC,many thanks for the reply
crypto,30g2ek,tom-md,1 point,Fri Mar 27 02:48:17 2015 UTC,"the entropy would appear to the adversary to be 128 bits even if the seed was less   Let's be sure to bound that.  Any adversary can brute force the output by trying all inputs into the system. As a result if the input has only, say, N=30 bits of entropy then anyone capable of running said computation 2N = 1 billion times can break the system (depending on how the result is used, obviously).  So for this particular value of N your attackers can be limited to cell phones and you'd still be hosed."
crypto,30g2ek,stouset,0,Fri Mar 27 20:57:34 2015 UTC,"I believe you are wrong. There are only 64 bits of entropy in the truncated hash. Otherwise, there would be 128 bits of entropy in each. Repeat this process for each half to generate unlimited entropy."
crypto,30g2ek,bitwiseshiftleft,7,Fri Mar 27 05:01:51 2015 UTC,"This is incorrect.  There are nearly 128 bits in the first half alone, and nearly 128 bits in the second half alone.  But in the joint distribution there are still only 128 bits, because the first and second halves are not independent."
crypto,30g2ek,stouset,1 point,Fri Mar 27 07:00:09 2015 UTC,"Ah! Understood, thanks."
crypto,30g2ek,Natanael_L,2,Fri Mar 27 13:15:32 2015 UTC,"The 256 bits have 128 bits of entropy, but each bit do NOT have 0.5 bits of entropy - instead the set of bits have CORRELATED entropy such that combined they do not exceed 128 bits. 128 bits selected from the 256 and the full 256 bits both represent approximately 128 bits of entropy."
crypto,30g2ek,untitleddocument37,3,Fri Mar 27 12:38:42 2015 UTC,<= 128 bits.  But in reality ~128 if the hash is any good against any practical adversary.  If you're trying to do some sort of long term PRNG look up Fortuna.
crypto,30dqlt,MrProntissimo,2,Thu Mar 26 15:33:02 2015 UTC,I recommend using ChaCha20.
crypto,30dqlt,lya6ns,1 point,Thu Mar 26 20:35:25 2015 UTC,With a cipher mode like cipher feedback you can make a stream cipher out of every block cipher like AES.  https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Feedback_.28CFB.29
crypto,30dqlt,DrunkenQuetzalcoatl,1 point,Thu Mar 26 16:39:33 2015 UTC,You might find this video useful:  AWS re:Invent - Secure Media Streaming and Delivery
crypto,30dqlt,n0xin,1 point,Sat Mar 28 20:55:33 2015 UTC,"My first idea was to go with HTTPS, but since all ciphers still standing the crypto-witch-hunt nowadays are block, I am afraid the video feed would suffer.   I'm not sure I understand. I'd recommend not doing public key as it's not meant for encrypting large amounts of data, that's what block ciphers are for. Use AES in CTR mode if you want a stream cipher."
crypto,30dyy4,failpick,4,Thu Mar 26 16:36:45 2015 UTC,So you just turned the hash of the password info the actual password.   Why not look at for example how FIDO's U2F and related protocols work with public key based challenge-response instead?
crypto,30dyy4,Natanael_L,1 point,Thu Mar 26 21:15:06 2015 UTC,"Yes, but that hash can only be captured during password change; otherwise it cannot be replayed.  Anyway it was just an exercise of though, to understand the flaws of doing so."
crypto,30dyy4,bitwiseshiftleft,3,Fri Mar 27 15:19:48 2015 UTC,"PAKEs are designed to prevent a dictionary attack by an eavesdropper or MITM.  This protocol appears to be vulnerable to a dictionary attack, because with HMAC(I|C, K)),R, and H(H(P, HMAC(I|C, K)),R) an attacker can verify a guess for P."
crypto,30bj0c,awesomeoctopus98,9,Thu Mar 26 00:48:19 2015 UTC,"https://gist.github.com/avalonalex/2122098 http://code.activestate.com/recipes/578838-rsa-a-simple-and-easy-to-read-implementation/ http://code.activestate.com/recipes/577737-public-key-encryption-rsa/   Of course these are just examples to see how the basic algorithm works, and it would be a terrible ideaTM to use them in a real application."
crypto,30bj0c,PdoesnotequalNP,5,Thu Mar 26 00:53:39 2015 UTC,"I'll have to second this. If all you want is to practice and learn, these are probably OK, but if you're thinking of using them in the real world, don't. Textbook RSA is not secure, and for real applications there are things  better than RSA."
crypto,30bj0c,ralpo08,5,Thu Mar 26 04:20:48 2015 UTC,"Just throwing out here that RSA is not very good at encrypting strings, it's excruciatingly slow and limited to fairly short strings (roughly smaller than the modulo or ""key"" size.) Also, it's very easy to screw up and end up with something that is not secure at all (classic reference: http://crypto.stanford.edu/~dabo/papers/RSA-survey.pdf, from 1999)"
crypto,30bj0c,GahMatar,2,Thu Mar 26 01:01:00 2015 UTC,"Cryptopals challenge 39 is ""implement RSA"", and a quick look on Github shows you a few dozen challenge solutions in Python. Granted, a lot of these didn't get as far as challenge 39, but there should be several RSA implementations to be seen amongst them."
crypto,30bj0c,disclosure5,2,Thu Mar 26 00:54:10 2015 UTC,"Hacking Secret Ciphers with Python has a very basic implementation of RSA encryption/decryption in the last few chapters. The best part is it's free, as in beer. It only works with ASCII strings, but you can probably hack it up as you please.  I posted up a slight modification to my github that utilizes 8192 bit key lengths, however I modified it to utilize pyCrypto so it might not be what you are looking for. I also included some test keys because the keys took a while to generate. It would be super easy to modify back down to it's original form, or you can check out the book/website itself that contains the code samples.  It was certainly a great introduction for me into RSA and the book is a fabulous introduction to programming in python3 for all ages."
crypto,30bj0c,ret2libc,1 point,Fri Mar 27 12:47:07 2015 UTC,Here you have a complete example on how you can work with RSA on python:  http://blog.brainattica.com/rsa-with-cryptography-python-library/  :)
crypto,3099ge,johnmountain,2,Wed Mar 25 14:49:50 2015 UTC,"Wish we could accomplish this by using homomorphic encryption, so that the server would be able to search the database even when the client is offline."
crypto,3099ge,kurav,2,Wed Mar 25 18:40:21 2015 UTC,"The purpose of this scheme is to hide data from the server.  downvote alarm:  Someone was stupid enough, or petty jelous enough, to downvote this and upvote the parent.  That shows a problem with this community."
crypto,306j5g,derekp7,6,Tue Mar 24 21:50:03 2015 UTC,Tarsnap is open source and implements client-side encryption of dedup data. It's worth a review of their implementation.
crypto,306j5g,disclosure5,4,Wed Mar 25 00:21:49 2015 UTC,"Colin Percival is the guy behind tarsnap, and is a ""real"" cryptographer. He more or less invented and proved techniques for exactly this use-case."
crypto,306j5g,stouset,5,Wed Mar 25 05:42:09 2015 UTC,There is a line of work specifically addressing your question.  Here are two relevant papers:  https://eprint.iacr.org/2012/631  https://eprint.iacr.org/2015/052
crypto,306j5g,DoWhile,1 point,Tue Mar 24 22:08:45 2015 UTC,"Thanks, that looks like it is exactly what I need.  Do you know if this has been implemented, or is it currently just in the math/theory stage?  I would rather not write my own implementation, in order to avoid errors. Edit: I see there is a .NET implementation at http://nmle.codeplex.com/, unfortunately I'm just a C programmer."
crypto,306j5g,DoWhile,7,Tue Mar 24 22:34:40 2015 UTC,unfortunately I'm just a C programmer.   Never apologize for that!
crypto,306j5g,stouset,1 point,Tue Mar 24 22:42:49 2015 UTC,"Thanks, that makes me feel better :-)"
crypto,306j5g,shiny_thing,3,Tue Mar 24 23:04:49 2015 UTC,"(Oh, I am still planning on using existing libraries for the encryption, such as openssl or similar).   Oh god, you haven't even looked at the OpenSSL APIs, have you? They are nigh-impossible to use correctly and will cause you months of agony. Use something modern like libsodium, for your own sanity."
crypto,306j5g,shiny_thing,1 point,Wed Mar 25 05:44:31 2015 UTC,"Do you need to deduplicate files sent by different clients (""global"" deduplication)? Or do you only need to deduplicate files on a client-by-client basis (""local"" deduplication)?  For ""global"" deduplication (this isn't a standard term), you should look into message-locked encryption (https://eprint.iacr.org/2012/631.pdf).  If ""local"" deduplication, I'd recommend looking into SIV (http://web.cs.ucdavis.edu/~rogaway/papers/siv.pdf)."
crypto,306j5g,ehempel,1 point,Tue Mar 24 22:16:22 2015 UTC,"I'd prefer global deduplication, although a site would have the option of using a unique key on each client (which would only give local dedup).  Edit: Looking at the papers that DoWhile posted, I see what you mean about global dedup -- deduplicating even if the clients have different encryption keys.  In my case, local deduplication would be sufficient.  Now, since I'm not a cryptographer, are any of the above available in standard open source libraries?  If not, then would the method I outlined in the question (using AES-cbc, and an IV composed of the encrypted hash [md5/sha1/etc] of the file) be majorly insecure?  So what I'm going for is, on a scale of 1 to 10 (10 being safe from governments, 1 being safe from first-grade-math), I'd like to aim for a 7 - 8.  I.e., safe enough that someone stealing the drive isn't likely to be able to break.  Edit2: I see that there is a good description of SIV mode (with pseudocode) in rfc5297.  OpenSSL doesn't appear to support SIV, but it does have a raw AES implementation, so if I don't find an existing library I'll do a hybrid of using OpenSSL and my own SIV implementation (and put out a request for audit when done)."
crypto,306j5g,zeroXten,2,Tue Mar 24 22:24:15 2015 UTC,"If you choose to go with the SIV route, OpenSSL already has (I believe) CMAC and CTR built in. So it would be a matter of using CMAC to generate the IV, and then using that IV with CTR-AES-128.  The biggest pitfall I see is the key. Make sure you use a different key for the CMAC portion than you use for the CTR portion.  A second possible pitfall might come up if you opt to take advantage of the associated data part of SIV (the H_1, H_2, etc. in the diagram of the paper I linked). You would need to make sure that when you encode this associated data into a single string, the encoding is unambiguous. Simply concatenating the fields together would not accomplish this unless you also include length information (e.g., a TLV encoding)."
crypto,305joq,GrayCipher,21,Tue Mar 24 17:37:09 2015 UTC,"As long as at least one of the sources is random and independent of the others, it will act as a one-time pad on the others, giving you a random output stream. Similarly if one is cryptographically pseudorandom and independent of the others, the result will be cryptographically pseudorandom. So under those conditions at least, it would be safe.  I should add that the term entropy sources usually refers to bit streams that have less than perfect randomness, in the sense that the bits may be correlated or biased. In this context, you should feed them into an entropy extractor (like /dev/urandom) rather than XORing them."
crypto,305joq,shiny_thing,5,Tue Mar 24 17:46:47 2015 UTC,"No, an attacker can easily create a malicious entropy source to zero out the entropy pool. Just concatenate them and mix with a PRF.  Or better, use the Fortuna PRNG designed by Bruce Schneier. It has countermeasures against all sorts of attacks."
crypto,305joq,deathfantasy,10,Tue Mar 24 17:47:21 2015 UTC,"What do you mean with ""zero out the entropy pool""? To produce a zero from xor'ing an unknown random integer with a chosen integer would require the knowledge of the random integer."
crypto,305joq,kurav,5,Tue Mar 24 18:08:52 2015 UTC,"It would, but that doesn't mean it isn't a valid attack scenario. Imagine one of your sources is RDRAND and you XOR all of the sources together. There is nothing stopping your CPU's microcode (or say you are running under a hypervisor) from controlling all of your entropy.    https://twitter.com/defusesec/status/408975222163795969 http://blog.cr.yp.to/20140205-entropy.html http://eprint.iacr.org/2014/167"
crypto,305joq,xantes,8,Tue Mar 24 18:19:06 2015 UTC,"If you're running under a hypervisor, the attacker already controls all of your entropy."
crypto,305joq,ZorbaTHut,3,Wed Mar 25 08:30:37 2015 UTC,"Yes, I mean just that - an attacker with knowledge of the entropy source would be able to easily influence its output, which is not a desirable property for a PRNG. Simple XORing also fails to eliminate local patterns in a poor entropy source. Note that we are dealing with real-world entropy sources, which are far from ideal and perfect.  See the PRNG part of Schneier's book: https://www.schneier.com/fortuna.pdf"
crypto,305joq,deathfantasy,7,Tue Mar 24 18:19:51 2015 UTC,"Yes to the 2nd paragraph no to the first.  If you can ""xor out"" the entropy there was no entropy anyways so you're not making things worse you're just using a yellow highlighter to point it out."
crypto,305joq,untitleddocument37,1 point,Tue Mar 24 18:21:09 2015 UTC,Maybe I didn't phrase that very well. Using XOR to mix entropy allows significant control over the contents of the entropy pool. Even using a cryptographic mixing function is not perfect. See the comment from /u/xantes for some examples (especially the tweet link).
crypto,305joq,deathfantasy,3,Tue Mar 24 18:34:50 2015 UTC,"That assumes you can snoop the pool.  If I have a secret pool of random bits nothing you can give me would ""cancel out"" the bits because that would imply you knew the bits in the first place.  Similarly, if you don't trust the CPU to execute the code correctly in the first place you're hosed no matter what you do."
crypto,305joq,untitleddocument37,3,Wed Mar 25 14:12:52 2015 UTC,"I disagree with the ""No"", but one musts be prudent. The quality of the output will be bound by the maximum quality of either source, and not an addition to it. If one of the source is of excellent quality and unpredictable, the other source could be all zeroes and the output would still be ok.  When the sources are not-so ok (e.g. combining physical statistics to increase entropy), it's important to combine then with a true PRNG like you describe, and also to properly evaluate the entropy of said PRNG."
crypto,305joq,aris_ada,3,Wed Mar 25 10:12:58 2015 UTC,"If either source is cryptographically secure, the result will be also, so it's a way of increasing security.  You haven't said how you intend to use the result though or that your entropy sources are perfect and secret."
crypto,305joq,astrolabe,1 point,Tue Mar 24 18:07:56 2015 UTC,"As long as they are uncorrelated, yes.  However, ""safe"" is not the best you can do; all it means is that the output won't have less entropy than either input.  To do better, you might want to read up on the theory of randomness extractors.  Let me give a simple example.  Suppose that you have two bit streams, each of which contains 0.5 bits of entropy per bit.  What happens if you XOR them?  Well. the resultant stream's entropy density could be anywhere between 0.5 and 1.0 bits of entropy per bit, and without knowing more about the streams, you don't know which.  Suppose that one stream has perfectly random even bits, and perfectly predictable odd bits.  0.5 bits of entropy per bit, right?  If you XOR it with another similar stream, you get... the same stream.  The XOR of two perfectly random bits is a perfectly random bits, and the XOR of two perfectly predictable bits is a perfectly predictable bit.  But if you shift the second stream by one bit, so the odd bits are random and the even bits are predictable, the XOR of the two is now perfectly random."
crypto,305joq,cypherpunks,1 point,Sun Mar 29 13:40:38 2015 UTC,"Randomness extractor:       A randomness extractor, often simply called an ""extractor"", is a function, which being applied to output from a weakly random entropy source, together with a short, uniformly random seed, generates a highly random output that appears independent from the source and uniformly distributed.  Examples of weakly random sources include radioactive decay or thermal noise; the only restriction on possible sources is that there is no way they can be fully controlled, calculated or predicted, and that a lower bound on their entropy rate can be established. For a given source, a randomness extractor can even be considered to be a true random number generator (TRNG); but there is no single extractor that has been proven to produce truly random output from any type of weakly random source.     Interesting: Extractor (mathematics) | Whitening transformation | SWIFFT   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,3058xp,sesoid,25,Tue Mar 24 16:19:19 2015 UTC,"A strong cipher needs to have two properties: confusion and diffusion. Confusion hides the correlation between the ciphertext and key; diffusion hides the patterns in the plaintext. If a cipher is strong (e.g. has both confusion and diffusion), then slightly changing either the key or plaintext would cause large and unpredictable changes in the ciphertext, thus preventing the attacker from ""closing in"" on the key value.  AES is composed of two parts: the SP (substitution-permutation) network and the key schedule. Upon encryption, the key schedule generates several round keys from one encryption key; these keys are then applied to the data block during the encryption rounds of the SP network. The repeated substitution/permutation/key application provides the cipher's confusion and diffusion properties. Wikipedia offers a great explanation of the SP network.  Note that this only applies to AES on a single block, applying AES on multiple blocks involves encryption modes which are a completely different beast altogether."
crypto,3058xp,deathfantasy,5,Tue Mar 24 16:49:16 2015 UTC,"Thank you for the answer. I still don't get it though but I guess I must try to implement it to get to understand it (I won't use my implementation, I promise).   I have another doubt: reading a little about SP network and the S-box in AES it seems to say that they are fixed so they aren't generated from your input. If I know the Sbox, shouldn't it allow me to get to the key? Sorry if the question was too silly. I will try reading.  btw: thanx too to dafukwasdat!"
crypto,3058xp,deathfantasy,11,Tue Mar 24 17:22:24 2015 UTC,"While the S-box and P-box are static, XORing the result with a secret subkey every round prevents attackers from reversing the SP steps. In other words, they complement each other: SP boxes hide the subkeys while subkeys protect the SP boxes."
crypto,3058xp,dccdis,5,Tue Mar 24 17:28:24 2015 UTC,thx again!
crypto,3058xp,conradsymes,2,Tue Mar 24 17:49:28 2015 UTC,Rolling your own implementation for deeper understanding - purposes is a good way learn. You could also try to answer your question yourself if you really want to gain a good grasp on this: encrypt a bunch of plaintext and try to work out the key using both plain and ciphertext: you will eventually realize why it is impossible.
crypto,3058xp,bitwiseshiftleft,1 point,Wed Mar 25 13:33:48 2015 UTC,"applying AES on multiple blocks involves encryption modes which are a completely different beast altogether.   indeed, most attacks are only against ECB mode... which is easily broken through other ways sometimes."
crypto,3058xp,p1mrx,12,Tue Mar 31 20:26:55 2015 UTC,"With most hard problems, the answer ultimately ends up being: we call this problem hard because nobody knows how to solve it quickly; or if someone does, they've been careful about whom they've told.  There's a long history of techniques used to attack various kinds of ciphers.  AES was designed to resist existing techniques, but if you figure out how to break it, please publish your solution.  Deathfantasy is also correct about features of AES that make attacks hard."
crypto,3062j4,I_Love_Liberty,1 point,Tue Mar 24 19:52:11 2015 UTC,Patricia trees?
crypto,3062j4,Natanael_L,1 point,Tue Mar 24 20:18:15 2015 UTC,"It looks like those merge parents and children when possible, which I'm not doing.  But searching for that led me to ethereum's patricia tree which seems to be quite similar to what I'm doing. Thank you!"
crypto,3062j4,bitwiseshiftleft,1 point,Tue Mar 24 20:30:03 2015 UTC,"This is called a Merkle tree.  Your design looks basically sound, but a binary tree would allow smaller responses, especially if you verified the proof from leaf to root.  Also, your design only works if the tree itself is public; you would need randomized dummy nodes if the key-set of the tree might be secret.  It's also interesting to note that Merkle trees can be updated efficiently."
crypto,3062j4,bitwiseshiftleft,1 point,Tue Mar 24 20:28:05 2015 UTC,"Your design looks basically sound   I realized when designing it that if I hadn't hashed the value in the line:  string_to_hash += sha256hash(node.value)   it would be vulnerable at least to hiding the existence of child nodes. Let's say some node had one child and no value. A malicious peer could say the value was the child character + child's hash, and that there was no child, and the hash of the node would be the same, but everything below that node would be hidden. I'm just wondering if there's anything else like that I need to fix.   Also, your design only works if the tree itself is public   It will be public."
crypto,3045ez,P-e-t-a-r,12,Tue Mar 24 09:27:53 2015 UTC,"I think this is a valid strategy for generating passwords for sites that need them. Consider using HMAC-SHA-256 instead of just string concatenation and SHA-256. And base64 might be better than just hexadecimal format, since some sites might have problems with very long passwords or require capital letters."
crypto,3045ez,Ape3000,0,Tue Mar 24 09:39:19 2015 UTC,"the problem with base 64 is that the output won't mutate as much as hash, and I am always using the same secret_string. I would like some hash that do not output only numbers and alphabets but also other characters from Unicode/ASCII.  Problem with long hashes can be fixed easily : echo ""secret-string+Facebook"" | sha256sum | head -c20; echo """""
crypto,3045ez,Katana__,6,Tue Mar 24 09:57:40 2015 UTC,"You're truncating the hash, though. If anything, I'd be looking at a base conversion to try and leverage that output, still.  Base64 only nets you a-zA-Z0-9 and two special characters -- perhaps another base would be more ideal, one where you're mapping several more symbols to values."
crypto,3045ez,Ape3000,5,Tue Mar 24 10:07:49 2015 UTC,"I meant that you might want to you something like this:  echo -n ""secret+app"" | openssl sha256 -binary | openssl base64   EDIT: Or even this. I'm not completely sure if there is any benefit in this, but I guess it might be more secure:  echo -n ""app"" | openssl sha256 -hmac ""secret"" -binary | openssl base64"
crypto,3045ez,trofnarv,1 point,Tue Mar 24 10:08:04 2015 UTC,"Good but how to include much more characters. I had in my mind something like this, but it gives always random outputs.  </dev/urandom tr -dc ')(*&&^%$#@_ }[}],.?  ~+=><\/`"";!0123456789_A-Z-a-z' | head -c20; echo """""
crypto,3045ez,reallyserious,2,Tue Mar 24 10:56:27 2015 UTC,"You can just use the exact same string that you have above. To build on the example above.   echo -n ""secret+app"" | openssl sha256 -binary | tr -dc ')(*&&^%$#@_ }[}],.?  ~+=><\/`"";!0123456789_A-Z-a-z'"
crypto,3045ez,reallyserious,1 point,Tue Mar 24 20:30:09 2015 UTC,"Ok, but it is the same without       tr -dc ')(*&&%$#@_ }[}],.?  ~+=></`"";!0123456789_A-Z-a-z'  I need to include as many as possible characters in password, not just letters and numbers."
crypto,3045ez,deathfantasy,5,Wed Mar 25 08:33:56 2015 UTC,"If you take the output of a hash function, typically a byte array, and encode it with base64, the resulting string will have exactly the same randomness and entropy as the hash output. Why isn't a 64 character alphabet enough?"
crypto,3045ez,david55555,2,Tue Mar 24 14:50:48 2015 UTC,good point. I admit. Hmmmm.... I think that it is not enough since I will truncate the output of hash/base64 to fit some fixed size (let's say 20 characters); because I might have limited size of  password length for some websites/apps. So if I am forced to use 20 char pass at max I would like to increase my password security by choosing greater universe (universe of numbers and alphabets is smaller than the universe of all unicode characters). And by mixing numbers + alphabets + special character my 20 digit password is stronger and requires more possibilities to be executed in order to be broken.
crypto,3045ez,deathfantasy,3,Tue Mar 24 15:09:12 2015 UTC,"Then instead of base64 you could do like base80 or base 100 or however many characters you decide you can have in your alphabet.   With alphabet I mean all the characters that a single position in your password can assume. E.g. A-Z, a-z, 0-9, + whatever special characters and unicode points you can come up with. It's fairly easy to make your own baseXY encoding."
crypto,3045ez,deathfantasy,8,Tue Mar 24 15:25:47 2015 UTC,"It's kind of difficult to change your password, since you will have to change your app name. In addition, the secret key is a single point of failure, if it's stolen then you will lose all your passwords."
crypto,3045ez,SAI_Peregrinus,5,Tue Mar 24 12:50:13 2015 UTC,"It's kind of difficult to change your password, since you will have to change your app name.   HMAC(secret + website + counter) and just increment the counter."
crypto,3045ez,deathfantasy,10,Tue Mar 24 13:18:49 2015 UTC,"The counter is a simple workaround, but you will have to keep track of the counter, which is inconvenient if you have many passwords, or change them often."
crypto,3045ez,SAI_Peregrinus,2,Tue Mar 24 13:28:56 2015 UTC,"I agree. But it is better than vainly trying to protect your kepassx database with one password.  I must say that this idea come to me when I tried to solve the problem of KeePassX ""One password to rule them all"", where security of all your password relay on strength/security of one."
crypto,3045ez,Ape3000,2,Tue Mar 24 15:27:54 2015 UTC,"Your scheme also depends on one password. With KeePass, you will have to steal the password database file to get all passwords; while with this scheme, all you need is a secret key. Changing the secret key also means changing all passwords of all your accounts."
crypto,3045ez,skinnyNerdB,1 point,Tue Mar 24 15:43:24 2015 UTC,"It isn't any more secure though. You still have one password (your secret) protecting all the rest (the derived passwords).  It's actually less secure in all the methods people have proposed so far, since you're using a fast hash (sha256) instead of a password-hashing function in key-derivation mode. So there's no key stretching, which KeePass has. You want to use a function like scrypt as your hash function."
crypto,3045ez,MagicWishMonkey,1 point,Tue Mar 24 15:47:37 2015 UTC,"So, to see if I understood it well. If I do not use secret_string, but rather something else like hash of app + app_name and use scrypt, will that do?"
crypto,3045ez,MagicWishMonkey,2,Tue Mar 24 16:50:38 2015 UTC,"If you do not use a secret string, then your password will not be secret."
crypto,3045ez,MagicWishMonkey,1 point,Tue Mar 24 18:05:35 2015 UTC,"The secret_string is your master password. It's the same thing. https://www.tarsnap.com/scrypt.html  You could use the Hash module of the node.js implementation (https://www.npmjs.com/package/scrypt), since it's designed for this sort of thing. Just concatenate your password and the application name, and hash that."
crypto,3045ez,MagicWishMonkey,1 point,Tue Mar 24 22:12:57 2015 UTC,where is function scrypt implemented?
crypto,3045ez,MagicWishMonkey,1 point,Tue Mar 24 17:59:23 2015 UTC,"Here is a proposed algorithm for using the counter:   Keep track of one, global counter value, start it from 0. Use the counter value with HMAC(secret, counter, app). When you want to change the password, increase the counter by one. This may be done periodically and in special cases. You will ran in to a situation where you hadn't updated the password for some site to match the current counter value. In this case try with counter - n for incrementing values for n until you succeed. Then update the password for the site with the new counter value.   This way you won't need to change all the passwords at once. You can still of course, but it might be a lot of work. And the idea is that you only need to remember the secret and just one counter value."
crypto,3045ez,PostHipsterCool,1 point,Wed Mar 25 07:10:14 2015 UTC,"echo -n ""53cr3t_5tr1$%67n6*-+#@.+Facebook+cont=1"" | openssl sha256 -binary | openssl base64   Like this?"
crypto,3045ez,MagicWishMonkey,1 point,Tue Mar 24 15:21:57 2015 UTC,"I assume you're building something to implement the same functionality as this command line. Because if you're just using this command, the secret is sitting in the clear in your bash history."
crypto,3045ez,iagox86,1 point,Tue Mar 24 17:24:38 2015 UTC,"I am not building anything right now, just experimenting & gathering ideas && discussing. I'm not much of a programmer, but you can do this if you will."
crypto,3045ez,iagox86,1 point,Tue Mar 24 17:39:40 2015 UTC,Great idea.
crypto,3045ez,iagox86,1 point,Tue Mar 24 15:22:43 2015 UTC,"I know, but the point is that you can easier remember one password and do not have to write it down or to save it than to try to protect all of your password that you can remember. And changing the password can be tricky but I will think that rough now. Thanks."
crypto,3045ez,Katana__,3,Tue Mar 24 15:19:36 2015 UTC,"I use a somewhat similar strategy (using a pbkdf2 function).  I've created an alfred workflow to make it easier to use, just type pbk <your password> into the alfred prompt. If you don't specify a password it will hash whatever is in your clipboard. The output is piped back into the clipboard."
crypto,3045ez,pred,1 point,Tue Mar 24 12:55:34 2015 UTC,how to run your program [all png files and one info.plist]?
crypto,3045ez,aliceandbob,1 point,Tue Mar 24 15:15:39 2015 UTC,"It's an alfred workflow: http://www.alfredapp.com/  It's an awesome utility, but you need OSX to run it.  http://cl.ly/image/3g2R373i013h is what it looks like when generating a password, and this is the output: 3c19953938ca5e9c0028b011e1e6ef2ce28a5f57dcd7af4e"
crypto,3045ez,warpzero,1 point,Tue Mar 24 15:22:07 2015 UTC,I am very disappointed now. Linux can not run this. what a pity. But +1 for Gui and program and idea
crypto,3045ez,jujum4n,1 point,Tue Mar 24 15:32:25 2015 UTC,"I've uploaded the python script to the repo, you could drop it on your machine somewhere and set up a bash alias to do essentially the same thing from the command line.   https://github.com/MagicWishMonkey/alfred/blob/master/pbk.py  Don't have time to add linux clipboard support right now, but if you want I can add it later (should only take a few minutes)."
crypto,30711m,glavnogo-inzhenera,3,Wed Mar 25 00:04:16 2015 UTC,"just take any Android smartphone, unlock the bootloader and install Cyanogenmod or AOKP whitout google services. encrypt then the device (its in the settings) install f-droid, a free and open source app repository.. download the onion web end set it to encrypt all data comunication at boottime. use beam/xabber with otr for text messaging, k-9 with png for mailing, the onion browser for the web (is not realy needet if you install the onion web proper.. just for normal calls is no encryption possible.. maybee it will have any encryptet voip apps on f-droid.."
crypto,30711m,noob_fl,1 point,Wed Mar 25 11:22:00 2015 UTC,Will that disable the camera? The mic when not actively using it?
crypto,30711m,noob_fl,1 point,Wed Mar 25 20:07:51 2015 UTC,"no, it would not.. if you want to disable the cam permanently, you have to delete the camera app (its possible with root access).. also not the mic.. but if evertything is encryptet, and you have no accounts setting up, nobody (maybee exept NSA) can access your phone"
crypto,30711m,noob_fl,1 point,Thu Mar 26 06:11:00 2015 UTC,How do we prevent them from doing that?
crypto,30711m,alex_w,1 point,Thu Mar 26 18:34:54 2015 UTC,"dont use a smartphone ;) as long as a Smartphone works over cellular network, there is always a possibility for NSA & others to capture your phone and save your conections and messages and calls.. 100% seurity is never given"
crypto,30711m,noob_fl,1 point,Thu Mar 26 20:22:07 2015 UTC,use k-9 with png   Current k9 user... What's PNG in this context?
crypto,30711m,kandi_kid,1 point,Fri Mar 27 05:30:07 2015 UTC,"oh, sorry.. i mean pgp: http://de.wikipedia.org/wiki/GNU_Privacy_Projekt"
crypto,30711m,ryanknapper,1 point,Fri Mar 27 11:35:18 2015 UTC,csipsimple supports ZRTP for encrypted calls
crypto,30711m,decibit,5,Wed Apr 1 04:28:05 2015 UTC,Whisper Systems and lots of other people are doing this already.  What is a reddit thread going to provide?
crypto,302uer,Crotchfirefly,1 point,Tue Mar 24 00:43:53 2015 UTC,"My knowledge of FFTs only extends to what they are used for, but seems like there are several FFT algorithms for different situations. Take FFTW (the self-proclaimed ""Fastest Fourier Transform in the West"") for example:  http://www.fftw.org/doc/Introduction.html"
crypto,2zzler,monican_agent,1 point,Mon Mar 23 06:48:52 2015 UTC,"This is pretty awesome. Amazed at how fast it deals (still slow, but certainly not unplayable). I'll be watching this develop. Coincidentally, I was just talking about mental poker recently. Any thoughts about adding a SPV bitcoin wallet? Does it achieve ""confidentiality of strategy and cards?"" (See here by what I mean: http://download.springer.com/static/pdf/878/chp%253A10.1007%252F3-540-47721-7_18.pdf?auth66=1427132708_9015e60c03ba86318e7d556cc37cd354&ext=.pdf)  Would you consider adding cryptocurrency functionality in the future?"
crypto,2zzler,throckmortonsign,1 point,Mon Mar 23 17:29:14 2015 UTC,"Thank you.   A large portion of upcoming updates will include optimizations which should make the initial deal significantly faster. I don't expect it to be able to match the performance of traditional client-server gaming but playability and a good user experience are an extremely important part of the software design.  Unfortunately I wasn't able to follow the PDF link you provided but I'm assuming that you're referring to one of the post-""Mental Poker"" papers that describe protocols for similar functionality. In answer to your question, private cards are confidential while strategy is partially and optionally confidential. In practice this means that every ""public"" action in the game, such as betting or receiving encrypted cards, is recorded for independent post-game verification but some actions may be manipulated to eliminate certain information about play. The result is that CypherPoker is able to hide a few pieces of information that would be revealed in a real world game. For example, when a player folds their private cards and crypto keys are not revealed while actions such as betting may be transmitted independently of the player's interaction, thereby eliminating clues in the timing of actions. Hesitation or other ""tells"" may be virtually eliminated and general game play strategy is as observable as it would be in a real world game.  Finally, integrations with cryptocurrencies are planned after optimizations, protocol hardening (preventing non-cryptographic attacks), drop-out/disconnection support, and user interface improvements."
crypto,2zzler,throckmortonsign,1 point,Tue Mar 24 21:27:40 2015 UTC,"Is this a protocol that you have designed or is it an implementation of previously published work? Has the protocol been peer reviewed? I'll be keeping an eye on the project... I'm actually amazed no one else has gotten this far in to a ""real game"" implementation given the large body of published works on mental poker. I was aware of LibTMCG (are you familiar with it?)... is your implementation similar?  Sorry for asking so many questions. I thought the current state of the art implementations were still too slow to make a reasonable game out of it, but that doesn't seem to be the case in your version. I'll keep an eye on this."
crypto,2zxyv9,DrSalted,5,Sun Mar 22 21:30:13 2015 UTC,Wikipedia article with info about the program and the two:  https://en.wikipedia.org/wiki/Illegals_Program#Vladimir_and_Lidiya_Guryev_.28Richard_and_Cynthia_Murphy.29
crypto,2zxyv9,rysade,-11,Sun Mar 22 21:44:42 2015 UTC,"to be technical, this is not cryptography, but steganography.  I consider steganography to be better than cryptography.  People don't send high entropy messages to each other."
crypto,2zxyv9,conradsymes,19,Sun Mar 22 23:15:23 2015 UTC,"It's a false contest: Steganography is like ""obscurity"" and cryptography ""security"" -- there's no reason you can't secure your message (encrypt it with a secret key) and then obscure it (hide it in something that doesn't trigger suspicion.)"
crypto,2zxyv9,Thirsteh,1 point,Mon Mar 23 00:46:25 2015 UTC,/me updates his desktop background
crypto,2zzmf3,conradsymes,2,Mon Mar 23 07:03:49 2015 UTC,"Your question is all kinds of loaded.  It's similar in the same way that dogs are similar to monocles.  But yes, both LFSRs and block ciphers are ""universal"" in the sense that both move through a permutation, though with vastly different security guarantees.  Universal hash functions also fall into this category to some extent.  In fact, you can think of LFSRs as a polynomial in some finite field, and universal hash functions can be as simple as a linear function.  Here is my wild guess as to what triggered your question: with a truly random function, you expect that there would be collisions in the output.  On the other hand, several cryptographic primitives such as block ciphers, trapdoor permutations, etc. will never exhibit a collision as they are ""impossibly perfectly"" distributed.  This of course follows from the fact they are permutations.  However, when trying to model one with the other, many people have made mistakes in theory and quite likely in implementations as well.  If you are curious about this line of work, you should check out a few of the original papers on the subject:    Luby-Rackoff ""How to construct pseudorandom permutations from pseudorandom functions"" Bellare-Kilian-Rogaway ""The security of cipher block chaining"" Hall-Wagner-Kelsey-Schneier ""Building PRFs from PRPs""   As an aside, the last paper has some interesting authors, including John Kelsey who is now among the top cryptographers at NIST, and Bruce Schneier who is now better known for his security works and activism."
crypto,2zws5u,diafygi,2,Sun Mar 22 15:35:10 2015 UTC,From the Paper:   5 Conclusion  Searching large scale cryptographic datasets for weaknesses can lead to interesting results. ... Based on my research it seems that over a very long time the use of PGP implementations with deeply  flawed random number generation functions was very rare. This is good news.
crypto,2zu8pr,sanderD,6,Sat Mar 21 20:46:29 2015 UTC,"If you got a big keyspace, let me search it."
crypto,2zu8pr,lya6ns,2,Sat Mar 21 20:58:42 2015 UTC,"I laughed so hard at this, now my girlfriend thinks I'm more of a nerd because it was a coding meme in a rap subtext... I can never win lol"
crypto,2zu8pr,PathlessDemon,2,Sun Mar 22 00:16:50 2015 UTC,We should do some cryptanalysis on this :)
crypto,2zu8pr,tomthecool,3,Sun Mar 22 12:02:55 2015 UTC,"Hello, author of the gem here!   I'm genuinely considering doing a little blog post analysing the ""missy elliot"" encoding - watch this space! :)"
crypto,2zu8pr,FryGuy1013,2,Sun Mar 22 15:09:21 2015 UTC,"Given that it's essentially a single permutation for every character, it shouldn't stick up very hard at all. The approach to solving cryptograms would be the way to go for this one."
crypto,2zu8pr,marklarledu,1 point,Sun Mar 22 18:18:05 2015 UTC,"Since there is no key used it shouldn't be too hard to crack ;). In fact, this is probably why the author called the method ""encode"" instead of something like ""encrypt""."
crypto,2zu8pr,tomthecool,1 point,Sun Mar 22 20:51:25 2015 UTC,"Hmm, looking at the sidebar perhaps this subreddit is the wrong place for me to post this...   Codes, ciphers, ARGs, and other such ""weak crypto"" don't belong here   However, in case you're interested, here's what I had to say on it:  http://tom-lord.weebly.com/blog/missy-elliotts-reciprocal-cipher-and-perfect-oscillating-sequences"
crypto,2zu8pr,Kirix,1 point,Sun Mar 29 16:56:11 2015 UTC,haha
crypto,2zu8pr,alexgmcm,1 point,Sun Mar 22 02:26:35 2015 UTC,What a gem!
crypto,2zu8pr,Matth1as,1 point,Sun Mar 22 09:49:16 2015 UTC,How long does it take the NSA to crack that?
crypto,2zxfis,p01arst0rm,8,Sun Mar 22 18:54:33 2015 UTC,No white paper?
crypto,2zxfis,marklarledu,0,Sun Mar 22 20:54:27 2015 UTC,huh?
crypto,2zxfis,Fmorris,6,Sun Mar 22 22:47:22 2015 UTC,"I am going to give you some honest feedback. There are many things wrong with this program(me).   ""possibly unbreakable""   no.   A Modular Encryption standard   what does modular mean? what does standard mean?  The instructions and the rest of the README are not really clear. There are a lot of arbitrary constraints which you don't really explain; you mention ""modules"" but don't really explain what they are or do; and in general you use and misuse a lot of ""crypto"" terms which should really be precisely defined. Other than the README, there is no documentation. There are no comments in the code. The code does a lot of obscure stuff and is not really understandable in a short time. I tried running it and it ungracefully crashed, I imagine due to the wrong amount of plaintext.  The only thing worthy of praise in the whole repository is the amount of time and effort you put into it. I see you are probably 16, and it is really cool that you like cryptography and want to try something first-hand. Cryptography is difficult and it is really a good challenge: it shows that you're not afraid of complexity and abstraction.  I would suggest that you read more about ciphers, how they work and how they are designed; and maybe try to implement some existing ones first, like Caesar, ROT13 or Vigenère. I would also suggest that you write a separate specification explaining what the cipher does, in proper English, with correct or at least consistent vocabulary and notation. After you have done this, write simple, modular, commented code implementing the specification: simple meaning that it is easy to determine what the parts are and how they relate to each other, modular meaning that you use functions (shorter than 130 lines!), commented meaning that you explain what a piece of code does and especially why.  tl;dr this breakable nonstandard encryption program(me) sucks. keep it up!"
crypto,2zxfis,trofnarv,1 point,Sun Mar 22 21:51:22 2015 UTC,"Thanks for the feedback. the ""modular"" is called ""modular"" because eventually the programme will have mutiple modules for different data: cpp, zip rar files, which will all work differently. the program is crashing because you havnt followed the plaintext rules, most likely you included an illegal character like a return or something. and to the ""probably not very secure"", tell me what this says http://pastebin.com/LY9jn9Y4"
crypto,2zxfis,imaleprechaun,5,Sun Mar 22 22:46:54 2015 UTC,"Normally I wouldn't respond to this, but I was bored and kinda  irritated that you disregarded good advice. Now I'm not any kind of expert on cryptography. I'm just a lowly sys admin, and I can tell you that your cipher sucks.  For one thing, your program is a mess. It doesn't work right; I had to do a bit of work just to get it working (and I used to debug code for a living). In the future, don't hard code so much info, comment more, don't use windows conventions in you program, and for the love of God include a paper explaining what your cipher is actually doing. If its impossible to tell what your program is doing after a few minutes, you probably did something wrong.  I still have no idea what your program is doing, but I can still tell you what you did wrong.   You program treats numbers and letters differently and its clearly visible in the ciphertext. numbers followed by ""xx"" are numbers and ""x"" are letters. This alone is enough to tell me that your ""encryption"" is shit. I put encryption in quotes because its not and encryption scheme, its a complicated substitution cipher. Read about them, they are easy to break because they leak a lot of info. Clearly distinguishable from random information. For a encryption scheme to be considered secure, it needs to be indistinguishable from random noise. Known plaintext attack. Your cipher will leak the key if the plaintext of the message is known. This is a flaw. Any modern encryption scheme needs to be immune to know plaintext attacks.   Just because someone can't or is unwilling to to decrypt your code doesn't mean it can't be done. If I cared to do so, I could probably get your above message decrypted in a few hours. If I had a few days, I could come up with a general program that decrypts your program without the key. I don't have a few days or even hours so I'll just tell you what an attacker would do. (Even if he/she did not have access to the source code)  Your cipher is obviously some sort of substitution cipher. There are 928 distinct characters in your 34617 character message. Given that some of the numbers seem to be duplicates with random information attached to it (which would be rare in a truly random situation), I would bet the actual number is quite a bit lower. The code can then be put under frequency analysis. With a little bit of computer work, you could find words in the cipher. Once a few words were figured out (if someone had access to the source code), the key could be recovered from the text. Then its simple a matter of decrypting with the discovered key.  The code you pasted above has the following frequency of characters (with your code converted to unicode characters for space): {'˥': 13, 'ă': 11, 'Ϋ': 18, 'ȵ': 18, 'ā': 3, 'ǋ': 6, 'ɉ': 13, 'ɲ': 18, 'с': 14, 'Θ': 6, 'ʌ': 11, '˕': 3, '͖': 20, 'ʭ': 2, '́': 24, '̓': 7, 'Ƨ': 17, 'Ã': 3, 'Ǎ': 3, 'č': 3, 'ħ': 20, 'ȸ': 2, 'Ȑ': 19, 'Â': 14, '˚': 18, 'á': 3, 'Ǳ': 43, '̾': 18, 'ƨ': 19, 'Υ': 3, 'Ȣ': 13, 'ͦ': 13, 'ȝ': 6, 'ʟ': 3, 'ʠ': 17, '²': 20, 'Є': 14, 'Ρ': 3, 'Ŀ': 19, 'ƛ': 13, 'Ě': 19, 'Ǔ': 4, 'з': 3, 'ɶ': 14, 'Ƥ': 3, 'đ': 1, 'Ȫ': 13, 'Ä': 6, 'Ď': 3, 'Č': 18, 'ϟ': 4, 'ť': 18, 'ɿ': 11, '͏': 6, 'À': 3, 'ő': 3, 'í': 3, 'ȡ': 3, 'в': 3, 'ʐ': 1, 'ò': 3, 'ķ': 848, 'ȥ': 4, 'ϣ': 3, 'Ͳ': 3, 'ŝ': 3, ... } I removed a chunk because it was too long, but you get the idea. Your encrypted message clearly has a patter to it.  I recommended reading ""An Introduction to Mathematical Cryptography"" by Hoffstein, Pipher, Silverman. Everything that I mentioned above can be found in that book, and you can learn why your cipher isn't very good. Also realize that you don't know nearly enough to make a good cipher yet. Work hard and maybe in a decade you will be able to make something that is actually good.  Edit: I read your previous post about what your program is doing. It makes a little more sense now. Its a kind of polyalphabetic cipher, basically a Vigenere cipher with the prime factors of the key file as the Vigenere key. You then do some unnecessary math to obfuscate the cipher. Adding unnecessary operations like that does nothing to increase the quality of cipher, it just makes it more confusing to people trying to understand your program. Look up Vigenere cipher and you can see why it is not secure.  Edit 2: After a minute of thought, your cipher is even worse than I said earlier. Because you divide by one prime factor and the multiply by the others. All an attacker needs to do is find the prime factors of each encoded character. For example, if every 3 out of every 4 characters in your ciphertext are divisible by 2, 3 out of 4 divisible by 3, 3 out of 4 divisible by 5, 3 out of 4 divisible by 7, your key is clearly 210. By adding the unused information back into the cipher by multiplying it, you leak more information than if you had simply left it out."
crypto,2zxfis,trofnarv,2,Tue Mar 24 00:19:53 2015 UTC,"This Guy. From a quick look over the code it's plain to see this is a obfuscated substitution cipher. Modern encryption techniques shouldn't need different cases for letters and numbers. In fact, they shouldn't care about the content at all. When it comes down to it, all files are in binary. Try encrypting the file itself rather than the contents of it"
crypto,2zxfis,trofnarv,1 point,Tue Mar 24 00:49:01 2015 UTC,"Seems like a good idea, im going to be building a proper module soon and this seems like a good idea.."
crypto,2zufuf,PlenoJure,2,Sat Mar 21 21:52:07 2015 UTC,I put mine on github: https://github.com/ryancdotorg/undercrypto2014
crypto,2ztf3y,Fizzyboy,5,Sat Mar 21 16:29:05 2015 UTC,"I have signed at key-signing parties before, but I'm currently inclined now not to sign keys unless I've met the person multiple times and recognize them, or unless I'm at an event with a bunch of other people I know who all recognize the person (i.e., they seem to be the person known by that name in that community). This is a lower standard than knowing the person super well, but higher than just seeing ID once. I will sometimes sign keys if I get the chance to examine a US passport or an in-state license from my own state, where I know what the document looks like. I really have no way to make sense of pre-electronic passports from Elbonia. Anyone sending you files ought to be verifying your full ID in some other way. If you're sending unencrypted, unsigned email, the key ID be modified in transit, anyway.   I've come around to being a fan of the Keybase approach: even though the actual names are a centralized directory run by Keybase, the protocol is all publicly-verifiable, and hashes of their DB are stored in the Bitcoin blockchain periodically, so you don't need to trust Keybase at all to verify that the information on their site is accurate. You could just link your Keybase profile."
crypto,2ztf3y,ldpreload,4,Sat Mar 21 19:29:35 2015 UTC,"When you sign a UID you can specify how confident you are that the owner is who they claim to be, for example a government ID might be good enough to sign but only with a low confidence. Some people will accept a driver's license while others will only sign a UID if they have personally known the owner for decades, what you are willing to sign is entirely up to you.  You should publish the full fingerprint for your key (the key ID is just the last four bytes of the fingerprint)."
crypto,2ztf3y,lya6ns,3,Sat Mar 21 19:29:49 2015 UTC,"I'm interested in potentially advertising my Key ID in my e-mail signature. However, I've heard that advertising anything less than the full public key is insecure because a Key ID can potentially be matched up to other keys rather then your own.   How much hand-holding are you willing to do in terms of helping other people manage their risks? It's important to answer this, because the more you're willing to take on in terms of helping other people use PGP/GnuPG safely with you, the more complexity and effort you'll need to go to.  If I want your public key, what I should do is search keyservers for your ID (key ID, name and email, etc.), get all keys there, and do all the following:   attempt to establish veracity through the web of trust; e.g. check that your key is signed by at least one key that has a signature chain leading back to my circle of trusted signing keys use a trusted side channel to verify the key fingerprint with you Send you an encrypted message with a challenge, and have you verify the response via a trusted side channel   For #1, this is quite hard, because the web of trust hasn't reached critical mass for this to happen reliably.  For #2 and 3, your side channel can be public (no confidentiality) but it must have high authenticity. Face to face is probably the easiest and best, but isn't always possible.   Services like keybase.io are trying to get a reasonable path here, by allowing someone to demonstrate that they have control of both a given key and a set of accounts (an attacker would have to compromise multiple points to trick people into using a key they control).  Depending on the level of trust you need (not every communication requires ultimate trust), things like phone calls, SMS, or messages on social platforms may be adequate. If you trust that a person has control of their Twitter account for the window in which you perform verification, then you can also trust the key you verify through that channel."
crypto,2ztf3y,0x6d1e,3,Sat Mar 21 19:02:19 2015 UTC,"Of the keys I sign, I know the person, either personally (e.g. my coworker) or by reputation (e.g. Theo de Raadt). In the first case, I verify the fingerprint in person. In the second case, I verify it through electronic means before I trust it. Even so, I never trust the second class ultimately, that's for the first class of people. I just put a line in my signature containing my PGP Key location on the web."
crypto,2ztf3y,cruyff8,3,Sat Mar 21 19:24:20 2015 UTC,"I sign someone's key when I verify their identity sufficiently and also verify that they control the email address or whatever account that is on that key.  For a keysigning party, I would be handing out slips of paper with a random challenge and response printed out.  After the party, I would email them with the challenge and expect the response to be returned. Advertise the full fingerprint.  Its the 32-bit LSB of the fingerprint that may collide, and this is treated as the key ID."
crypto,2ztf3y,molo1134,2,Sun Mar 22 02:12:05 2015 UTC,I don't know if I am comfortable verifying someone's identity simply because they flash me a government issued ID and I don't know them on a personal level. Is this reasonable?   My understanding is that GPG's trust feature is for exactly this reason.
crypto,2zsmnb,funky_vodka,2,Sat Mar 21 10:28:52 2015 UTC,"A lot of crypto blogs start with ""I'm not a cryptographer, could be wrong, disclaimer etc"".  If he's a skilled software engineer, the areas he touched on, eg, the sources and maintenance status of available libraries, are completely within his skill area. You don't need to be a professional cryptographer to call out some guy's home grown crypto library as an area for concern.  Statements like this often get drowned out by authoritative sounding people with less experience - and without the disclaimer.  I could write a disclaimer on how I don't know Haskell - but he called out an issue with crypto-numbers and unless he misrepresented what that code does, I'm confident he found a genuine issue. In short, probably deserves more credit than he's giving himself."
crypto,2zsmnb,disclosure5,5,Sun Mar 22 08:11:02 2015 UTC,"Author here; thank you for the compliment. The problem I am having now is that I get a lot of requests from people who say I should be leading the way for better cryptography primitives in Haskell: this is exactly the thing I wanted to avoid. The fact that I can see things that are obviously wrong, doesn't mean I can make things that get all the subtleties right."
crypto,2zsmnb,stingraycharles,3,Sun Mar 22 09:32:37 2015 UTC,"I totally understand that situation. I just wish there was a better solution.   You've got people following things like the terrible PHP manual page which is full of bad crypto advice, because it sounds like a more authoritative source than most of the better advice out there."
crypto,2zsmnb,disclosure5,3,Sun Mar 22 21:57:07 2015 UTC,"Hi.  I'm a cryptographer, and also sort of a Haskell programmer, but I am not familiar with the state of Haskell cryptography except as shown in your post.  Here's some feedback on your points.  RdRand:  I don't recommend using RdRand as the sole source of entropy if you have a good alternative.  But it's pretty hard to be secure against backdoors inserted by the company who fabbed your CPU, especially on a network-connected machine.  Cryptographically mixing RdRand is definitely the right thing to do, but I don't think it's outrageous for a library author to choose not to do it.  Modulo:  You're right about modulo bias.  To generate random numbers mod N, the most common practice I've seen among cryptographers is to generate a number 128 bits (or whatever) longer than you need, and then reduce.  This reduces the modulo bias to a negligible level.  Rejection sampling (like you mentioned) also works, but is considered unfavorable because it takes variable time and draws a variable amount of entropy from the source.  However, please note that neither reduction mod N nor your rejection sampling method is guaranteed to take constant time in Haskell with respect to the output.  This means that it may expose your code to side-channel attacks.  I don't known of a good defense against this for Haskell Integers, but maybe someone named Don or Simon can help you.  AES-NI: You have misinterpreted Colin's post on AES-NI: he's asking for a language feature that doesn't exist, not bashing AES-NI.  I don't know of any language which makes any effort to keep secrets out of registers/memory after you return, other than asm or maaaaybe languages with inline asm or heavy use of volatile and intrinsics (C, D, etc).  In Haskell the garbage collector can copy or leave around any secret key which is used by pure code, and there's no way to overwrite it with zeros in most cases.  Even in asm you cannot always keep keys out of memory, since in a context switch your keys can be pushed to the operating system's stack.  Again it is theoretically possible that Intel has backdoored AES-NI, but AES-NI's resistance to timing attacks is important, so using AES-NI is considered best practice.  AES modes: You are correct that many modes for AES are dangerous.  However, implementors have a dilemma: since the use of these algorithms is so common, they are all but required to provide them in general purpose libraries.  Perhaps putting it in an Unsafe module would help, though.  SJCL, for example, gates CBC mode behind  sjcl.beware[""CBC mode is dangerous because it doesn't protect message integrity.""]();    Galois: I don't know much about them in particular, but just because someone has ties with a government doesn't mean that they write backdoored crypto.  However, it is worth noting that the pure Haskell implementation of RSA is vulnerable to a timing attack.  There may not be a defense against that attack in a pure Haskell, and it would certainly be much more complex than that code."
crypto,2zsmnb,bitwiseshiftleft,-1,Mon Mar 23 07:55:37 2015 UTC,"I can't speak to the other points but,   You're right about modulo bias   modulo bias is a complete non issue if you are not using small numbers such as 3 and 5.  A number modulo 2128 will have bias towards one set of numbers exactly 2-128 .  Far too small to have any statistical detectibility."
crypto,2zsmnb,Godspiral,5,Tue Mar 24 00:44:00 2015 UTC,"It is not so.  If you take a random number mod 2128 and reduce it mod eg floor( 2/3 * 2128 ), the resulting bias may be cryptographically significant.  This is because the range from 0 to 1/3 is twice as heavy as 1/3 to 2/3.  Even though each number's probability is negligible, this sort of bias can be used in, eg, the Bleichenbacher attack or the lattice attack on ECDSA."
crypto,2zsmnb,bitwiseshiftleft,-1,Tue Mar 24 17:21:10 2015 UTC,"the range from 0 to 1/3 is twice as heavy as 1/3 to 2/3   lets use 10e128 instead:  2/3 of that is 6.6e127.  while one number say 1e127 is 2 times more likely than 4e127 of being a result, the probability of such a number is still 2/10e128 compared to 1/10e128   he Bleichenbacher attack or the lattice attack on ECDSA.   thanks for those examples.  I'm surprised they work, but I am glad that I use huge random values compared to their reduction out of paranoia."
crypto,2zsmnb,Godspiral,0,Tue Mar 24 18:58:40 2015 UTC,"Sorry for replying here, but I'm wondering why your loop-until-within-range method is better than modulo - aren't you just removing randomness on your own instead of having mod do it? Seems like saying, ""I want random, but I want a random between 5 and 10"" and, ""I want random, but it has to be evenly divisible by x"" are simply different ways of taking randomness and making it less random. I get the modulo bias idea - if you use mod 3 in the decimal number system it'll never line up evenly and therefore certain remainders come back more/less often. I just don't see why looping rand() until the random number fits the wanted range is a strictly better idea. Now that I've written this, I'm sure there's a deep mathematical reason it's better, but I'm not that math-y. At least, not yet."
crypto,2zsmnb,LTrain17,2,Sun Mar 22 19:21:10 2015 UTC,"I left a lot of sources for further research in the article; you can also just Google modulo bias.   The whole reason this is better is that the chance you will get a certain number is exactly equal to the chance you get any other number. This is not the case with modulo, as thoroughly explained in the article."
crypto,2zromi,Roran01,3,Sat Mar 21 02:20:46 2015 UTC,"DoxBox:       DoxBox  appeared in June 2014 on GitHub as a fork of the discontinued open source computer program FreeOTFE for on-the-fly disk encryption (OTFE). On Microsoft Windows it can create a virtual drive within a file or partition, to which anything written is automatically encrypted before being stored on a computer's hard or USB drive. It is similar in function to other disk encryption programs including TrueCrypt and Microsoft's BitLocker.  The author claims improved support for Windows 7 over FreeOTFE, as well as security fixes.      Interesting: DOX BOX | FreeOTFE | Linux Unified Key Setup | Sentry 2020   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2zromi,autowikibot,1 point,Sat Mar 21 06:06:20 2015 UTC,"Have you looked into VeraCrypt? It is based off of the popular but defunct TrueCrypt. It should allow you to use your flash drive on both Fedora and Windows, provided that VeraCrypt is installed on both operating systems."
crypto,2zlijp,johnmountain,6,Thu Mar 19 16:10:39 2015 UTC,"If the queries are run on the client side, does that mean all the data is transferred to the client to be queried against? Sounds... not fast."
crypto,2zlijp,cr125rider,4,Thu Mar 19 16:22:45 2015 UTC,"At a quick glance it looks like the indexes are stored client side and then the index is queried, data is then fetched from the database and decrypted."
crypto,2zlijp,slyf,2,Thu Mar 19 20:19:12 2015 UTC,"while that is possible, it doesn't make sense for db architecture.  Likely instead is the data is 1:1 byte encrypted (like xor), and indexes can usefully do  = comparisons by looking for matches with the encrypted text.  This would not work for sorting."
crypto,2zlijp,Godspiral,1 point,Thu Mar 19 22:30:27 2015 UTC,"Unless it's using partially homomorphic encryption, of course. There are cryptosystems that support ciphertext sorting."
crypto,2zlijp,gsuberland,1 point,Fri Mar 20 10:35:35 2015 UTC,"Those schemes are all very slow though.  Usually though, usefully encrypted data does not need to be sorted.  Passwords cities names....  data such as dates though can both be easily guessed by an admin (order date, and record creation date) and are often the target of queries with > or <, and so maybe encryption of those fields is not useful.  If the plaintext field is known, then encrypting it may actually compromise the key that is used.  Though for numerics and dates, something other than xor can be used (that makes the field longer than plaintext) such as hash modexp a secret prime.  Any range (< >) queries can be replaced with in (list of values) queries."
crypto,2zlijp,Godspiral,2,Fri Mar 20 11:59:14 2015 UTC,"I suppose if it's an index, the homomorphism only needs to apply to a cryptographic hash, rather than the actual cipher. That could explain how they're managing to have both speed and security."
crypto,2zlijp,gsuberland,1 point,Fri Mar 20 13:39:51 2015 UTC,"Most likely it is just storing the index pages individually encrypted and requesting them from the server as it traverses the tree. The server just see unique identified pages containing encrypted data. The client wouldn't need to download the whole index, just the pages it needs to touch for the query. (Log n)"
crypto,2zlijp,zero_iq,1 point,Wed Mar 25 14:43:44 2015 UTC,They could be using something like this: http://eprint.iacr.org/2006/210.pdf
crypto,2zlijp,mrschyte,3,Sun Mar 22 10:00:35 2015 UTC,"I don't understand how this addresses data breaches.  In fact it would seem to have the opposite intention since the keys are more spread around and data cannot be protected by the server.  I'm not saying it doesn't have value, just that it I don't understand how it would have that particular benefit."
crypto,2zlijp,Flippety,3,Thu Mar 19 20:17:36 2015 UTC,"This offer is too good to be true, and they provide no comparisons or any kind of proof whatsoever.  Like /u/DoWhile said, there's absolutely nothing in that page that says why this is better than CryptDB or other more recent papers, like ""Scalable Architecture for Multi-User Encrypted SQL Operations on Cloud Database Services"" by Ferreti et al.   Heck, they barely explain how the thing works. They have a good product webpage, but I see no expert background to scientifically support their claims. Bold claims require bold evidence."
crypto,2zlijp,ralpo08,4,Thu Mar 19 22:40:55 2015 UTC,[ZeroDB] lets you run queries without exposing the decrypted data to the server   Need details about how this works because essentially you're saying that you've made some massive breakthrough in holomorphic encryption or... this is just a local database which is backed up to the server.
crypto,2zlijp,cartogram,6,Thu Mar 19 17:51:32 2015 UTC,"you've made some massive breakthrough in holomorphic encryption   homomorphic  And secondly, it's not necessarily the case.  We've known for decades several techniques which now have gotten recent implementation attention. PIR, ORAM, SSE are all valid alternatives. The real question they have to answer why their solution is better than, say, cryptdb which is free, has been used in several projects and is benchmarked and tested."
crypto,2zlijp,DoWhile,3,Thu Mar 19 19:39:07 2015 UTC,"For what it's worth, most modern PIR schemes are based on FHE and only recently did cPIR (computationally secure PIR) become better performance-wise than trivial PIR (downloading the entire DB to the client). PIR pretty much lives and dies by how good current FHE schemes are."
crypto,2zlijp,0x616e746f6e,2,Fri Mar 20 06:53:13 2015 UTC,"That's a good point, thanks.  I was thinking of the older number theoretic implementations of cPIR (Gentry-Ramzan, Lipmaa), but with FHE (even low degree ones) you can pack way more computations in and that would be quite dependent on the state-of-the-art."
crypto,2zlijp,DoWhile,2,Fri Mar 20 07:38:29 2015 UTC,"CryptDB is good, yes. Though, seems like the server over there has an access to tree traversal. In our (ZeroDB) case, the server doesn't know the structure of the tree (or even differentiate between data and btrees)"
crypto,2zlijp,michwill,5,Thu Mar 19 22:03:23 2015 UTC,"Security is tricky to capture and model correctly, and the real world impact of security is even more difficult to discern.  Saying that you hide the tree might a red herring because it may or may not be consequential to the underlying security model (and proof).  If you claim your solution is faster than X, then that is a concrete statement that could be made and rather easily measured.  If you claim your solution is more secure than X then you have two battles to fight: 1) appropriately model the security and prove yours is stronger, and 2) show that there are real world scenarios in which the difference in the two security models would greatly favor zerodb.    There are other equally important concerns beyond efficiency and security, but if your main claims are grounded in your security design, then it is better to have it aired out sooner rather than later.    I feel like the discussion at /r/netsec might be jumping the gun because there isn't even an open design or source available, but on the flipside, why announce zerodb at this current stage in development?"
crypto,2zlijp,DoWhile,3,Thu Mar 19 23:44:46 2015 UTC,"Wait, it's on /r/netsec?  Uh. Hm.  goes to check mod log"
crypto,2zlijp,Katana__,2,Fri Mar 20 00:56:01 2015 UTC,"Oh, it's also /r/crypto... Didn't check what subreddit I'm in, sorry :-) Still the same point"
crypto,2zlijp,michwill,1 point,Fri Mar 20 01:02:43 2015 UTC,"Raised an eyebrow for me, actually, because netsec is my turf. Huff."
crypto,2zlijp,Katana__,2,Fri Mar 20 01:05:51 2015 UTC,"Yeah, it's there as well"
crypto,2zlijp,michwill,2,Fri Mar 20 01:29:01 2015 UTC,"Not really, actually. Apparently sbit thought it lackluster and removed it (which, really, I can agree with)."
crypto,2zlijp,Katana__,1 point,Fri Mar 20 01:30:49 2015 UTC,"Sure, that's a very valid point. In a way, we didn't intend to post it at /r/netsec now, though we decided to check what people's reactions are at HN. It went a bit out of our control, and someone posted it here :-)"
crypto,2zlijp,michwill,2,Fri Mar 20 00:30:08 2015 UTC,"From the homepage,   Clients can execute remote queries against the encrypted data without downloading it or suffering an excessive performance hit.   Definitely curious!"
crypto,2zlijp,sboesen,1 point,Thu Mar 19 19:25:35 2015 UTC,"So, if your app server is compromised, you're still owned in the end.  Most of the time the database server isn't directly accessible anyways; it's owned via the app servers themselves."
crypto,2znkch,hanumanCT,5,Fri Mar 20 01:45:40 2015 UTC,"Perhaps I'm misunderstanding your question, but ... hopefully all of them?"
crypto,2znkch,bitwiseshiftleft,3,Fri Mar 20 04:32:56 2015 UTC,"how many unique pairs are possible to be generated on one of these FIPS-2 HSMs?   Well first off, that is not a well posed question.  What kind of pairs?  RSA? DSA? ECDSA?  some other pair? By FIPS-2, I suspect you mean FIPS-140-2.    I find HSMs them more of a setback than helpful.  By the time an HSM comes out, it is usually outdated or the algorithms are just not adequate.  Often times you'll see RSA based crypto when the cyber security community is abandoning that ship.  You'll even see SHA-1 on these HSMs as well!!! At any rate, I would say that you should ask the question again by specify a time span (1 second, 1 minute, 1 year, etc.) and a key pair.     Depending on the hardware of the HSM, they can be relatively fast.  The slow HSMs just use off the shelf, OEM ICs and chipsets which may or may not have cryptographic instruction sets built into them."
crypto,2znkch,throwaway0xFF00,3,Fri Mar 20 07:01:27 2015 UTC,"An infinite number of them though once you generate enough of them, you might expect to get a dupe, say after 2128 keys...  Seriously, there's no limit other then the time it takes. Various HSM can store a variable number of keys depending on the type and what's expected from them.  Some can store ""wrapped"" (encrypted) keys to the host computer and retrieve them / use them later and then it's just a matter of how big an HDD you have.  Some devices are HSM like but have hard limit to the number of keys they can store. Usually it's devices that are intended to protect something from the device's user (think prepaid transit cards.)"
crypto,2znkch,GahMatar,1 point,Sat Mar 21 00:15:45 2015 UTC,"Yeah, not really understanding the question.  When a FIPS HSM generates a key it must use an approved cryptographically secure pseudorandom generator that is seeded from a high quality entropy source.  When generating RSA or ECC key pairs particular approved algorithms must be followed to ensure that the random values are correctly transformed into a private key (and subsequently into a public key)."
crypto,2znkch,Twylite,1 point,Fri Mar 20 15:39:30 2015 UTC,"There is a distinction between generating, and storing internally, a key versus exporting (for subsequent re-import) of a wrapped key.  Any device with internal storage has a limit of how many objects will fit in the memory.  Presumably those keys are faster to use than offline keys, which would have to be imported before they are used.  Like all memory parameters, vendors make improvements all the time based on price shifts in the component markets."
crypto,2zn443,therealsailorfred,4,Thu Mar 19 23:27:59 2015 UTC,"-p or --passphrase passphrase says to read a passphrase from stdin. Trailing white space will be stripped from it, and it will be run through a SHA256 hash to provide the key.   you should be using a key derivation function like pbkdf2 not sha2"
crypto,2zn443,cwmma,1 point,Fri Mar 20 00:31:39 2015 UTC,you should be using a key derivation function like pbkdf2 not sha2   If the hash will not stored why KDF is needed?
crypto,2zn443,Abderraouf_Adjal,6,Fri Mar 20 00:47:32 2015 UTC,"dictionary attack, you don't want them to be able to iterate through a word list guessing passwords trying to decrypt it"
crypto,2zn443,cwmma,3,Fri Mar 20 01:27:14 2015 UTC,"Perhaps to make it more resistant (costly) to an attacker who is guessing passphrases. GNU/Linux's LUKS disk encryption does it for this reason, I believe."
crypto,2zn443,phyzome,1 point,Fri Mar 20 01:13:03 2015 UTC,"Thanks.  Are there reasons to prefer pbkdf2 or scrypt?  Both need a salt, which I presume needs to be stored with the encrypted data.  In the interests of not expanding the encrypted size more than necessary, is there a risk in reusing the IV as the salt for the KDF?"
crypto,2zn443,cwmma,2,Fri Mar 20 06:59:07 2015 UTC,"don't reuse the iv as a salt (rule of thumb with crypto never reuse anything), but you can only store the salt and calculate both the key and iv from the key derivation function.  PBKDF2 is good because it's well tested and included in many libraries by default.  Scrypt is also good and honestly you'd do fine with either."
crypto,2zn443,GahMatar,2,Fri Mar 20 09:17:01 2015 UTC,"Why is the IV/Salt 96 bits? NIST only recommends 96-bits for ""performance critical"" if you're using 256-bit keys, you're not ""performance critical"" so use 256 bits too.  This line:      if size > 0:         line = f.read(min(65536, size))         size -= len(line)     else:         line = b''   Doesn't need to do that...      line = f.read(65536)   Is functionally equivalent and faster.  Also, you want to be writing the decrypted data to a temporary file and wrap the .finalize()  call with a try-block to catch InvalidTag. If you get an InvalidTag exception, blow away the temp file, otherwise, rename it to the final name. Make sure this is done on the same disk so the rename is fast.  Use the tempfile module to create the temp file safely."
crypto,2zn443,GahMatar,1 point,Fri Mar 20 20:10:10 2015 UTC,"Thanks for looking.  GCM IV length is customarily 96 bits. ""On the other hand, I've never seen anyone actually use a size other than 12 bytes with GCM.""  The salt is the same size for format consistency.  I'll open to upping these sizes unless the 96 bit resistance is sufficient.  Currently, there are 28 bytes of overhead vs. 48 bytes for the bigger salt.  Rough estimate of time to crack a 96 bit hash with a machine that can try 1e12 hashes per second is about 8e16/2 seconds or 750 million machine years.  I'm open to extending this if people feel it's useful.  I'm used to writing network code, where it's possible for a partial buffer to be read while the provider is slowly writing to it.  The output may be streamed, so writing it to file first adds disk space usage and latency.  I would consider making this mode an option."
crypto,2zn443,autowikibot,2,Sat Mar 21 00:11:13 2015 UTC,"IVs aren't hash though. They're used because counter mode is deterministic, without IVs, you could just xor two cipher text together and end up with the two plain text xor'd together sans crypto.  If you don't buffer to disk, you might as well not worry about GCM and just use Counter mode. You're relying on the consumer to not use the data at all until integrity is confirmed. On Linux, you can use https://docs.python.org/2/library/mmap.html#module-mmap to avoid most of the disk write in small cases, the file will exist solely in the kernel buffer cache, mmap'd to your process.  Best of all, in your use case, the consumer will know that the tag failed verification because .finalize() will throw an exception you don't handle and the socket is closed. Is that (closing the socket) also what happens when you're done and it passed?"
crypto,2zn443,GahMatar,1 point,Sat Mar 21 00:19:50 2015 UTC,"GCM's IV/Nonce is not the same kind of IV that CBC's IV is.  It can be a Nonce and doesn't have to be randomly chosen, just never used again.  CTR isn't listed in NIST Suite B, even though GCM is uses it.  In any case, it would need an HMAC or other authentication indicator.  For my requestor's use case, the caller is expected to pay attention to the exit status, and know that the data it received is invalid unless it sees a 0 status code.  I'll likely spend the time to make this behavior optional, probably with a --out flag."
crypto,2zm9r9,johnmountain,2,Thu Mar 19 19:35:11 2015 UTC,"There's no way this is legit FHE and can scale, FHE simply isn't there yet. And aside from that no way that their Java lib outperforms HElib."
crypto,2zld3h,rya_nc,1 point,Thu Mar 19 15:28:26 2015 UTC,I spent about an hour trying to find more info without really getting anywhere. Their attack seems to recover the password (or maybe only the raw keys) from a zip file with at least 5 files encrypted (using the old style encryption) with the same password. I'm looking for a paper describing the attack or an open source implementation.
crypto,2zld3h,progredditsonly,3,Thu Mar 19 15:30:35 2015 UTC,It appears to be related to CVE-2003-1376. Take a look at the references on that page they describe the problem in more detail.
crypto,2zjrbo,PostHipsterCool,8,Thu Mar 19 03:31:25 2015 UTC,"As long as the end-user, or at work, the sysop, has ultimate and full control over the TPM, I'd like one, both to protect my boot chain and perform remote attestation. But if TPMs turn out to become under partial or full control of external entities (govt, private firms such as banks or firms offering assurance against digital attacks), we might end up with new dilemmas. Also, do mind this (source):   Power analysis, a side-channel attack, can be used against secure devices to non-invasively extract protected cryptographic information such as implementation details or secret keys. We have employed a number of publically known attacks against the RSA cryptography found in TPMs from five different manufacturers. We will discuss the details of these attacks and provide insight into how private TPM key information can be obtained with power analysis. In addition to conventional wired power analysis, we will present results for extracting the key by measuring electromagnetic signals emanating from the TPM while it remains on the motherboard. We will also describe and present results for an entirely new unpublished attack against a Chinese Remainder Theorem (CRT) implementation of RSA that will yield private key information in a single trace.  The ability to obtain a private TPM key not only provides access to TPM-encrypted data, but also enables us to circumvent the root-of-trust system by modifying expected digest values in sealed data. We will describe a case study in which modifications to Microsoft's Bitlocker encrypted metadata prevents software-level detection of changes to the BIOS."
crypto,2zjrbo,mrkoot,10,Thu Mar 19 07:00:31 2015 UTC,"A hardware root of trust, even if susceptible to side channel attacks, is still a step up security-wise from a software-only implementation."
crypto,2zjrbo,awdsns,3,Thu Mar 19 09:21:40 2015 UTC,"But if TPMs turn out to become under partial or full control of external entities (govt, private firms such as banks or firms offering assurance against digital attacks), we might end up with new dilemmas.   As far as I understand, TPM private keys are initialized by the vendor (who you just have to trust to not have a copy), with no end-user control. Is this not the case?"
crypto,2zjrbo,Creshal,4,Thu Mar 19 09:46:15 2015 UTC,"The only key that exists in a TPM, is the EK. This is a special public-key pair that should be generated inside of the TPM and secret key never recorded by the manufacturer. But even so, the EK should only be used for provisioning attestation identity keys, and as such is not used directly forThe signing of data. It is used in a handshake with your own CA in order to generate a key available only to the TPM that can be used to perform remote attestation or other operations."
crypto,2zjrbo,spap-oop,1 point,Thu Mar 19 12:54:46 2015 UTC,"I think EK is not the only key inside TPM. Rather EK is not used to sign anything directly. There is also attestation key which is an ""alias of EK and also SRK (storage root key). There is also shared secret that only TPM and user know and it is definitely stored inside TPM. It is said also the every objects in the TPM has associated authData which is also a shared secret. Now if you count the NVRAM of TPM is also ""inside of TPM"" then it can store additional stuff. PCR-s (platform configuration registers) will stored the hash and extended hash. And Bitlocker actually use it to provide security to the system. It is done by measuring (each) various system components during boot time and storing the hash in the PCR. If something on those components change, Windows will go into recovery mode and ask user to supply the recovery password etc.,"
crypto,2zjrbo,ggreddit000,1 point,Sun Jul 12 11:00:26 2015 UTC,"The EK is the only permanent key, unless the manufacturer leverages the NVRAM. The SRK is regenerated on a TPM clear. The OwnerAuth could be considered a key, I guess, and the SRK Auth is just used to unwrap the SRK. The NVRAM can be protected by the owner key, and the TPM can be configured such that it can't be reset. If you can reset a TPM, then it's yours. If you can't reset a TPM, it belongs to whoever provisioned it.  If your CPU wraps a key with the SRK and stores it in its filesystem, do you consider that ""inside the TPM"" ? That's how most TPM blobs are stored.  Attestation Identity Keys (AIKs) are typically stored in this way. AIKs are not aliases of the EK - an AIK is a key which is generated within the TPM, exported as a blob wrapped with the SRK; the public half of the AIK is exported to be signed by a Privacy CA. The secret half of the AIK is never exported from the TPM in cleartext. The AIK can then be used by the TPM to sign PCRs in a way that can be trusted by an entity that trusts the Privacy CA, and can be proven that they came from the TPM.  PCRs aren't really storage. They're data, but not arbitrary storage.   And TPMs are used for more than Windows."
crypto,2zjrbo,spap-oop,1 point,Sun Jul 12 11:22:32 2015 UTC,Hey this sounds better :)
crypto,2zjrbo,ggreddit000,2,Sun Jul 12 16:47:58 2015 UTC,Can be. Look up the USB Armory which utilizes ARM TrustZone. You get to load the key.
crypto,2zjrbo,Natanael_L,3,Thu Mar 19 10:39:46 2015 UTC,"ARM TrustZone is a competing technology to TPM, not the same, and certainly not compatible."
crypto,2zjrbo,Creshal,3,Thu Mar 19 10:44:39 2015 UTC,"Similar purpose, though. I was assuming OP meant this category of chips, not just specifically TPM."
crypto,2zjrbo,Natanael_L,1 point,Thu Mar 19 11:48:12 2015 UTC,"even so, they're not even close to the same thing. Trust zone is a technology that runs on a chip where the user can write software that will run in the normal world and the operating system can load code into the secure world that is protected from the user and kernel code in the normal world.  In fact, a system with trust zone would benefit from a TPM, and the ability to measure the code being loaded into the secure world.   A TPM is just a microcontroller that runs code that is put there by the manufacturer, and never runs code that is provided by the end-user.it provides a limited set of functions."
crypto,2zjrbo,spap-oop,1 point,Thu Mar 19 12:51:05 2015 UTC,"USB Armory supports secure boot with user provided keys, allowing you to make sure only your own TrustZone code is loaded. That way it behaves like a user controlled TPM. You can run a hardened kernel and formally verified code in TrustZone if you so wish."
crypto,2zjrbo,Natanael_L,1 point,Thu Mar 19 12:56:06 2015 UTC,"Secure boot != measured boot.  Looking at the USB armory page, it seems that they don't understand what a TPM actually does. TZ solves a completely different problem.  I'd trust a separate hardware element to be unmodified over software running in a separate context. TRUSTzone doesn't mean SECUREzone. If there are bugs in the TZ context it can be pwned just as thoroughly as the normal world."
crypto,2zjrbo,spap-oop,1 point,Thu Mar 19 15:03:34 2015 UTC,"Well obviously, the point isn't that it run your OS inside TrustZone. You run minimized code with limited exposure to bugs. The secure boot setup is supposed to ensure only code you approved can run in the TrustZone. Then you can run the exact same code a TPM would run in there. Or something else. Your choice."
crypto,2zjrbo,Natanael_L,1 point,Thu Mar 19 15:17:01 2015 UTC,"The value of a tpm is largely obviated by running a software TPM after the system has booted. You're hooking the chain of trust to the end of an existing boot chain, not the beginning."
crypto,2zjrbo,spap-oop,1 point,Thu Mar 19 15:47:26 2015 UTC,googled trustzone and what comes up was some ARM related stuff. TPM is not quite microcontroller and definitely does not run code. Instead it has several components inside: simple wikipedia search will give you a good info. Here is the block diagram of what is inside tpm: https://en.wikipedia.org/wiki/Trusted_Platform_Module#/media/File:TPM.svg
crypto,2zjrbo,ggreddit000,1 point,Sun Jul 12 11:07:30 2015 UTC,"I understand what's in a TPM. I was not intending to imply that the TPM is a general purpose microcontroller, simply that in IMPLEMENTATION, it's a dedicated microcontroller running a ROM.   Trustzone is an extension to the ARM instruction set adding another mode of operation and a mechanism to switch between modes (which I won't get into here)."
crypto,2zjrbo,spap-oop,4,Sun Jul 12 11:12:36 2015 UTC,"TPMs provide some useful primitives that a system can leverage to increase its security posture.   The bad image of loss of control isn't due to the TPM itself, but rather because of the manufacturers of systems that integrate a TPM who choose to lock the platform down to pre-provisioned keys locked down in the TPM's NVRAM. A system with an unprovisioned TPM truly belongs to the individual, not the manufacturer.  The ability to measure the system is pretty powerful but it has the ability to be abused. In its purest form, it allows the owner of a system to ensure level of trust in the firmware and software. The ownership, however, can be subverted to be the manufacturer ensuring trust in a locked down configuration.  The actual implementation of TPMs themselves is a little dated. The algorithms in 1.2 are a little crusty, though 2.0 is fixing this somewhat. Remote attestation is a pretty cool tool.  As for not trusting the silicon, until you own a foundry, that battle cannot be easily won. All the modern CPU designs manufactured today have some sort of lock down. Choosing where to draw the lines is the important part."
crypto,2zjrbo,spap-oop,2,Thu Mar 19 08:57:58 2015 UTC,"A system with an unprovisioned TPM truly belongs to the individual, not the manufacturer.   It's a nice theory, but do those exist in the wild? On-board TPMs are always provisioned by the vendor, as far as I know."
crypto,2zjrbo,Creshal,6,Thu Mar 19 11:18:31 2015 UTC,"As long as I can have control of the TPM, I don't mind having it in my computer. The question is whether I want to use it; I'm still undecided about that.  One cause of concern for me is that -- if I'm not mistaken -- TPMs contain a burned-in, unchangeable private key. I guess the benefit is that your TPM cannot be reset without authorization, but if the manufacturer knows your private key, everything that depends on it is insecure by principle."
crypto,2zjrbo,whamboom,3,Thu Mar 19 09:43:10 2015 UTC,USB Armory. You're the one who sets the keys.
crypto,2zjrbo,Natanael_L,1 point,Thu Mar 19 10:41:09 2015 UTC,"It's not compatible with TPM though, so you can't use it for SecureBoot/Bitlocker/TXT/…."
crypto,2zjrbo,Creshal,2,Thu Mar 19 11:20:21 2015 UTC,The USB Armory has support for tying it to secure boot. You can load a few keys in write-once memory and chose to enforce secure boot from code you signed. And this code would include your TrustZone code.
crypto,2zjrbo,Natanael_L,1 point,Thu Mar 19 11:50:25 2015 UTC,"For the USB Armory itself, not the computer it's connected to?  That's a normal TrustZone feature. Doesn't help x86 machines that only have TPM."
crypto,2zjrbo,Creshal,1 point,Thu Mar 19 12:03:41 2015 UTC,"USB Armory is a computer (SoC), it is like a Raspberry Pi equipped with TPM. Powerful enough to for example run Firefox and allow you to VPN into it.   It is intended to run secure code on the behalf of other systems, but can also run standalone just fine."
crypto,2zjrbo,Natanael_L,15,Thu Mar 19 12:11:45 2015 UTC,It's a    blackbox   that you    buy from a 3rd party   that    does not provide audit numbers   and many times   comes from other nations whose governments want our dox   What's not to like?!
crypto,2zjrbo,DasWood,6,Thu Mar 19 06:40:05 2015 UTC,Aren't all those statements true of the CPU itself.
crypto,2zjrbo,david55555,3,Thu Mar 19 15:17:10 2015 UTC,"blackbox   Actually it is not. Most TPMs or smarcard CPUs must be FIPS or Common Criteria evaluated and must provide extensive documentation and code for evaluation and audition.  It is just closed source for you, but not the customer of the chip."
crypto,2zjrbo,wdick,2,Thu Mar 19 15:48:35 2015 UTC,TPM   fyi only 1 tpm mfg provides fips compliance. More over the 'TPM' customer wouldn't be the person using the TPM but the msg/assembler who buys their part.
crypto,2zjrbo,DasWood,3,Thu Mar 19 20:08:47 2015 UTC,"that you     buy from a 3rd party    More often than not, a third party (motherboard vendor) buys it from a fourth party (TPM vendor), and if you're really lucky, said third party is only delivering it to a fifth for final setup (laptop/desktop/server OEM)."
crypto,2zjrbo,Creshal,3,Thu Mar 19 09:44:54 2015 UTC,"I think I read somewhere that TPM 2.0 is supposed to come with some major improvements (and arriving this year) - is that true, and does it solve TPM 1.x's main problems?  Also from what I read, Intel's SGX is supposed to be much more secure and more advanced - with the ""only"" problem that Intel will have the key to all your ""secured"" apps, and they can have it stolen/give it to NSA with perfect plausible deniability (""Why really, we had no idea!"").  EDIT: I found something, but meh, it doesn't seem to support ephemeral keys either:  http://www.iaik.tugraz.at/content/about_iaik/events/ETISS_INTRUST_2013/ETISS/slides/ETISS-INTRUST-2013-LiqunChen.pdf"
crypto,2zjrbo,johnmountain,2,Thu Mar 19 10:01:55 2015 UTC,TPM's main problem is trust. Building more unverifiable features into an unauditable chip with private keys under vendor control doesn't really change that.
crypto,2zjrbo,Creshal,1 point,Thu Mar 19 10:12:46 2015 UTC,Ok great. But where can I get any processor that doesn't have all the same issues?
crypto,2zjrbo,dabombnl,1 point,Thu Mar 19 17:24:08 2015 UTC,"Intel produces most of theirs in the USA but has other problems like the nebulous ""Intel Management and security"" but otherwise we know exactly what the hardware in the CPU is supposed to do and how it works. http://en.wikipedia.org/wiki/List_of_Intel_manufacturing_sites"
crypto,2zjrbo,DasWood,2,Thu Mar 19 20:06:19 2015 UTC,We also know what the hardware in the TPM is supposed to do and how it works. How is a CPU any safer?
crypto,2zjrbo,dabombnl,1 point,Thu Mar 19 20:43:40 2015 UTC,"No, you know what it is supposed to do. In reality it just plugs into an API and it is a black box. If, for example, your Intel CPU's FMA registers don't do what they are supposed to, they won't work or output properly."
crypto,2zjrbo,DasWood,1 point,Thu Mar 19 20:57:15 2015 UTC,"Just because it works and has a valid output doesn't mean it can be trusted.  It is impossible to verify/prove a RNG is not backdoored, or is not leaking internal state information by looking at it's output. The only way to prove it is to inspect the logic. (And even then still impossible, but as least you can tell if it is operating as designed/supposed to)  A CPU can be just as untrustworthy as any other chip."
crypto,2zjrbo,dabombnl,1 point,Thu Mar 19 21:11:41 2015 UTC,Except extra circuitry would have an effect and lead to bugs which are detectable - because they arn't just conforming to an API.
crypto,2zjrbo,DasWood,3,Thu Mar 19 22:26:13 2015 UTC,TPM Processor is a Processor with a Trusted Platform Module? How is it different to the external chip?  They are used in chrome os devices and seem very useful. I like the idea of having some kind of secure chip in which you can store keys and also have pcr registers :)
crypto,2zjrbo,marcocharco,1 point,Thu Mar 19 04:49:13 2015 UTC,"I'm not sure how it's different, but I know that some i7 chips have them and some don't.  Trying to figure out if it's security theatre or not."
crypto,2zjrbo,marcocharco,2,Thu Mar 19 05:11:54 2015 UTC,"I am not aware that it comes with the processor or with the motherboard.  As for the specific topic, a TPM is a nice to have, but I don't think they are widely used today. As far as I know, if someone can run code in your computer you are kind of screwed (it's not impossible for them to use the TPM for their uses)."
crypto,2zjrbo,spap-oop,5,Thu Mar 19 05:41:45 2015 UTC,"A TPM doesn't prevent code from running. It can prove to code or a remote party what course the boot loader took, assuming that hasn't been subverted, and what modules have been loaded, potentially, but it is only trustworthy up to the first untrustworthy code (run with privilege).   A platform implementation can use it to gate code execution but that is the platform, not the TPM itself."
crypto,2zjrbo,Creshal,1 point,Thu Mar 19 09:05:11 2015 UTC,"I don't think Intel includes a TPM on any chip. There's the related TXT technology enabled in some CPUs (and some vPro functions in the chipset) that can use it, if installed on the mainboard, but you can have a TPM without."
crypto,2zjrbo,ggreddit000,2,Thu Mar 19 09:50:00 2015 UTC,"hi there, this is my first ever reddit post after registering. i am doing a several months of deep dive into TPM. Just wanted to share some info: TPM2.0 is out which allows using different hash algorithms as opposed to TPM1.2 which only use hardcoded SHA-1 which recently ""broken"" or ""being close to broken"". TPM2.0 is completely different animal, just as I was scratching the surface of TPM1.2 there is another one. There are somewhere aronud 10 something specificaiont from TCG that I am using. Those are hard to read and invested in TPM2.0 book."
crypto,2zjrbo,ggreddit000,1 point,Sat Jul 11 22:57:44 2015 UTC,"Hmmm. So do you think that a TPM with v 2.0 is an advantageous piece of hardware to have on your computer?  After all your research, what are your thoughts on TPMs?  Thanks for sharing!"
crypto,2zjrbo,wdick,1 point,Sun Jul 12 04:04:18 2015 UTC,"For me it is bit too early to have a conclusion, for now i am just trying to follow the suit, TCG thinkg it is /tpm2.0/ is hopefully the last major release because it can support any major future algorihms."
crypto,2zjrbo,JohnDoe_85,1 point,Sun Jul 12 10:28:16 2015 UTC,"I like the idea of a TPM and most Thinkpads have one build in. But I don't know of many application, which really use the TPM.  All TPMs I know of are based on smartcard CPUs and thus are really slow, if you compare them to your main CPU. Smartcard CPUs are the most secure platform I know of. They contain their own random number generators and can create their own RSA and symmetric keys. A RSA key generation can take some time on a limited platform, some time between 1 and 10 seconds. Therefore some vendors start the generation process in the factory. But if configured right, there are only some very expensive ways to extract the private keys from a smartcard CPU.  Most smartcard CPUs are not build in the US."
crypto,2zjrbo,xJoe3x,1 point,Thu Mar 19 15:43:50 2015 UTC,"Eh, you can use the RNG as an additional source of entropy (use a good hash to mix in with your others), so on balance I'd use it if I had full control over it. I wouldn't store keys in there, though."
crypto,2zjrbo,KayRice,1 point,Thu Mar 19 18:17:34 2015 UTC,"I am not as familiar with some of their other functionality, but they add a lot of value for many encryption implementation.  A well implemented solution will make it so even if the adversary defeats the tpm, they will still need to brute force the user auth factor.  If they can not defeat the tpm, it forces they to attempt to decrypt on that device, not some fantastic gpu cluster (etc)."
crypto,2zjrbo,anonyymi,1 point,Thu Mar 19 14:43:38 2015 UTC,"It seems the same as the ""trusted computing"" bullshit that was being passed around during 2006."
crypto,2zjrbo,binlargin,6,Thu Mar 19 03:48:48 2015 UTC,"Probably the only good thing that came out of it was hardware random number generators. And before anybody whines about NSA backdoors, read this: http://www.change.org/p/linus-torvalds-remove-rdrand-from-dev-random-4/responses/9066"
crypto,2zjrbo,anonyymi,1 point,Thu Mar 19 04:28:26 2015 UTC,"Did you read Taylor Hornby's response to Linus? He makes a good point, NSA could have an undetectable backdoor in there that compromises the RNG."
crypto,2zjrbo,binlargin,4,Thu Mar 19 09:23:49 2015 UTC,"If there's a hardware backdoor specifically crafted for Linux then you are fucked anyway. You could tune network packets to leak information or something similar that's even harder to detect.  EDIT: And if you would have read further into that read, there's an answer to Taylor Hornby, which basically says what I wrote above:   Brad Peabody  The point being made by Taylor is that rdrand could be ""smart"" enough to understand the state of the rest of the random number generator (which would require reading various state information from a combination of CPU cache, registers or memory) and use that to intentionally spoil the output of the function. This is a no-issue. If that is the case and the CPU is being tampered with in such a way as to perform this kind of sophisticated attack, then why does one xor even matter? As he points out already: ""This is the CPU, remember. It can pretty much do anything it wants.""  Changing the number generation to exclude rdrand isn't going to improve security.  So while I disagree with Linus' necessity of vehemently insulting people, he is right, and he does know what he is doing."
crypto,2zermo,monican_agent,1 point,Tue Mar 17 23:39:32 2015 UTC,I took a peek at your posts but I'm not finding a software repository? Are you not sharing the source? That could be the reason why nobody seems to be interested.
crypto,2zermo,KayRice,3,Wed Mar 18 16:16:28 2015 UTC,They're in the post. Just in case you can't find them:   https://github.com/monicanagent/cypherpoker https://github.com/monicanagent/cypherpoker/wiki/CypherPoker:-The-Peer-to-Peer-Poker-Protocol
crypto,2zermo,silverforest,1 point,Wed Mar 18 16:55:54 2015 UTC,Thank you.
crypto,2zermo,Urnotmyprey,1 point,Thu Mar 19 02:55:41 2015 UTC,"Nice work (I think, I'm not a programmer yet, so I don't really know how to read all of it). The idea is that individuals can play poker safely without an intermediary?  From a player perspective, one feature I notice is lacking is a 4 color deck (green clubs, blue diamonds).   Once it's up and working, I will definitely stop attempt to use it, especially if it somehow also includes bitcoin escrow (not quite sure if that's possible).  Sorry I can't help you much, but very interesting."
crypto,2zd68f,bascule,2,Tue Mar 17 16:35:32 2015 UTC,How about we turn the clock back a decade or so and rephrase the question - would the JVM have prevented heartbleed?
crypto,2zd68f,Katana__,3,Tue Mar 17 23:32:42 2015 UTC,"Had you actually read the post, you might have discovered the answer is yes: Java would've prevented Heartbleed, but not Tedbleed or Jetleak:  http://blog.gdssecurity.com/labs/2015/2/25/jetleak-vulnerability-remote-leakage-of-shared-buffers-in-je.html"
crypto,2zd68f,redsteakraw,1 point,Thu Mar 19 03:08:08 2015 UTC,Well the Ask toolbar sure doesn't help.
crypto,2zd89l,-danger_close-,1 point,Tue Mar 17 16:50:31 2015 UTC,"To build on OS X 10.9 (dynamic, not static):  g++ -std=c++11 -Wall -Werror -Wextra -Weffc++ main.cpp -o padder"
crypto,2za33k,kingkilr,1 point,Mon Mar 16 21:45:54 2015 UTC,The website appears to be getting hammered. Here's Google's cached version of the paper in question.
crypto,2z9769,TheBroCoder,7,Mon Mar 16 17:56:23 2015 UTC,"Sounds like you want confidentiality, non-repudiation, and integrity (you didn't specify integrity but I'll throw in in there since the digital signature gives it to you). Using RSA, here is a way to achieve your goals:  Setup   Person A generates SIGN_KEYPAIR_A Person A generates ENCRYPT_KEYPAIR_A Person B generates SIGN_KEYPAIR_B Person B generates ENCRYPT_KEYPAIR_B   Person B sends message to Person A   Person B generates/encodes message M Person B encrypts M with public key of ENCRYPT_KEYPAIR_A (more on this later) ... call result C Person B signs C with private key of SIGN_KEYPAIR_B Person B sends signed C to Person A   Person A reads signed and encrypted message from Person B   Person A verifies signature using the public key from SIGN_KEYPAIR_B Person A decrypts C using private key from SIGN_KEYPAIR_A Person A reads M   Notes:   It is not efficient to encrypt an entire message with a recipient's public key so in practice most people will generate a random symmetric key, use that to encrypt the message, and then encrypt the symmetric key with the recipient's public key. Since the symmetric key is usually much smaller than the message this is more efficient. This process is sometimes referred to as enveloping. It is generally considered good practice to generate separate keys for signing and enciphering. Not all people do this though (but that doesn't mean you should copy those bad habits!). In addition to verifying signatures, you must also verify that the public key does in fact belong to the person you think it does. This is typically done through certificate chain validation but that is a whole topic on its own.   Hope that helps!"
crypto,2z9769,marklarledu,2,Mon Mar 16 20:15:15 2015 UTC,"Both solutions, without further specifications have their own limitations. You can find an interesting read at http://world.std.com/~dtd/sign_encrypt/sign_encrypt7.html"
crypto,2z9769,macgillebride,1 point,Mon Mar 16 20:46:50 2015 UTC,"the basics,  encryption uses a public key (the recipients).  decryption uses a private key.  signing involves decrypting a plaintext.  The result is gibberish that when encrypted using the signer's public key gives plaintext.  If the plaintext is meant to be secret to one person, then often also signing it is not important.  You can sign an encrypted text, but the signature is mainly useful to the recipient.  You cannot prove to anyone else that you signed a valid message unless you (or recipient) provides the plaintext to anyone who wants to verify the signature.  A strange attack in this scenario would be to craft a different public key (you don't even need to know the private key), that results in a different plaintext encryption, and so forges a signature to an arbitrary message.  So signcryption with RSA is only useful for the 2 people exchanging messages, unless there is a public key repository, and a manual process for proving signatures to 3rd parties.   since person B's decrypting key is public, i guess anyone can read ""This message is from person A""    The decrypting key is the private one, and even when you sign a plaintext message the only way to know that you signed it is to ""ask the message if you signed it""   Can person B add the signature first then encrypt using A's public key?   You can do the reverse of that order.  When you sign a message you forward both the signature, and what the decoded signature should evaluate to (plaintext).  That plaintext can be encrypted if it is meant to be private to recipient, but doing so may create a forgery vulnerability to the signer."
crypto,2z72mc,chakalakasp,10,Mon Mar 16 03:31:42 2015 UTC,This really proves the necessity of open source crypto.
crypto,2z72mc,AvgRedditJ03,2,Mon Mar 16 08:31:07 2015 UTC,Yeah.  The thing about communications crypto is that it's all about trust.  Who can you trust?  You can trust yourself.  You can trust that transparency and multiple audit vectors have a good chance of finding vulnerabilities and publishing them.  You can't trust one company who refuses to show how the sausage is made.  Not when you adversary could be anyone from a college nerd running wireshark to an intelligence agency with a billion dollar budget.
crypto,2z72mc,skiguy0123,8,Mon Mar 16 14:08:13 2015 UTC,"A video included in the post by Stamos showed how someone could set up an encrypted message much faster using the company’s plugin versus using GPG Suite, a software package for sending encrypted email on Apple’s OS X.   Just for Apple, huh? /s"
crypto,2z72mc,DINKDINK,3,Mon Mar 16 11:35:21 2015 UTC,Technically GPG Suite is OS X only.  PGP on the other hand is supported everywhere
crypto,2z72mc,skiguy0123,1 point,Tue Mar 17 14:45:02 2015 UTC,"Oh I see, GPG suite is different than GnuPG. Damn that's confusing."
crypto,2z8tia,whamboom,3,Mon Mar 16 16:15:09 2015 UTC,"Depending on your size and efficiency requirements, Moxie has an interesting blog post that might be relevant to what you want:  https://whispersystems.org/blog/contact-discovery/"
crypto,2z8tia,DoWhile,2,Tue Mar 17 00:16:33 2015 UTC,"This is very relevant, thank you for the link!  Moxie's problem differs from mine in that there is a server involved. I believe that some of the problems he mentions would diminish in a peer-to-peer environment where each node has only hundreds of contacts.  To be honest, I was not familiar with Bloom filters when I read the article. I have looked into them now and they seem to be a potentially good building block in a solution to my problem.  I can now imagine a solution similar to this: Alice and Bob store shared secrets from all pairings they have previously participated in. The next time Alice and Bob connect, they exchange Bloom filters of all the shared secrets they know, compute an intersection and use some sort of HMAC scheme to detect false positives and confirm mutual knowledge of the shared secret.  Could this work? I can imagine some attacks on privacy here, e.g. preimage attacks on the Bloom filter or saturating the Bloom filter to force the other party to test all shared secrets. Perhaps the ""Privacy-Preserving Set Intersection"" algorithms mentioned in the article could provide an even more sophisticated solution; I'd have to look into that."
crypto,2z8tia,Natanael_L,2,Tue Mar 17 14:11:35 2015 UTC,"Yes, in several different ways. But I don't yet know of any efficient ones without any drawbacks...    Multiparty Computation. You store the public keys of everybody you connect to, and using MPC, both parties says ""I'm X, are you one of these ABC?"" and the MPC algorithm tells both parties if they already know each other or not.  The method above can be recreated with homomorphic encryption and several passes (MPC is an online protocol, FHE would be a multistep potentially offline protocol)  Continously announcing TOTP like random-ish strings derived from shared secrets and the current time and your public key . You look for strings derived from secrets you know, the current time and the public keys of those you wish to connect to. Similar to TOTP, you HMAC all messages with your shared secret.  Always sending signed hello-packets encrypted with the public keys of all of the intended recipients Bitcoin stealth address style, you create new ECDSA public keys for the recipient derived from a fresh public key of yours and their current public key using ECDH key exchange plus EC multiply with the shared secret key and their public key. You encrypt to their be public key. They can decrypt by repeating the key exchange and using the shared secret key and derive the correct new private key, and thus being able to decrypt the message.    I'd love to see a more generic efficient ""anonymous tagging"" algorithm where I just need to provide my keypair and the public keys of the intended recipients to get a ""blob"" to append to the message, where anybody can rapidly check if it is intended for them or not."
crypto,2z8nid,dgmib,10,Mon Mar 16 15:28:11 2015 UTC,Is your concern accidental non-randomness or malicious non-randomness? The latter is very difficult (or impossible) to check for.
crypto,2z8nid,phyzome,2,Mon Mar 16 15:56:00 2015 UTC,My interest is more along the lines of can one tell the difference cryptography strong pseudorandomness and true randomness?  E.g. Is there a way to tell the difference between a crypto stream from random noise?
crypto,2z8nid,shiny_thing,7,Mon Mar 16 18:58:09 2015 UTC,"The definition of cryptographically strong pseudo-randomness is that it's impossible to distinguish from (uniform) random noise. (Or at any rate, that it's infeasible; we assume, for example, that an attacker can't brute-force a 128-bit key.) If a stream of bits is distinguishable from random by some efficient test, then that stream is not cryptographically secure, by definition."
crypto,2z8nid,cypherpunks,1 point,Mon Mar 16 19:08:02 2015 UTC,Ding!  Ding!  We have a winner!
crypto,2z8nid,KayRice,5,Wed Mar 18 10:47:56 2015 UTC,"I'm not much of a nazi on what terms to use, but in this case we have to be a bit more explicit. You can test to see how distributive the RNG is, as you mention, but you also describe an example of a poor RNG method that would satisfy distribution (sequential number set)  The most famous methods are covered via this Wiki article:  http://en.wikipedia.org/wiki/Diehard_tests  Some more digging leads to the larger field of:  http://en.wikipedia.org/wiki/Randomness_tests  And some more further digging gets us close to what I think is the answer to your question:  http://en.wikipedia.org/wiki/Kolmogorov_complexity"
crypto,2z8nid,ivosaurus,1 point,Mon Mar 16 17:50:55 2015 UTC,"Practically, today you want to run TestU01."
crypto,2z8nid,autowikibot,1 point,Thu Mar 19 09:41:30 2015 UTC,"TestU01:       TestU01 is a software library, implemented in the ANSI C language, that offers a collection of utilities for the empirical statistical testing of uniform random number generators.   The library implements several types of random number generators, including some proposed in the literature and some found in widely used software. It provides general implementations of the classical statistical tests for random number generators, as well as several others proposed in the literature, and some original ones. These tests can be applied to the generators predefined in the library, user-defined generators, and streams of random numbers stored in files. Specific tests suites for either sequences of uniform random numbers in [0,1] or bit sequences are also available. Basic tools for plotting vectors of points produced by generators are provided as well.     Interesting: Mersenne twister | Pseudorandom number generator | Xorshift | Randomness tests   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2z8nid,OfFireAndFlame,2,Thu Mar 19 09:41:46 2015 UTC,"If you're looking for a tool as opposed to specific techniques, the pro version of Burp has a feature called sequencer. Dump up to 20,000 tokens into it and it does a bunch of bitwise and characterwise analysis to estimate the total entropy. I use it all the time on webapp pentests against custom session tokens and other ""random"" values."
crypto,2z8nid,ThisIsADogHello,1 point,Tue Mar 17 12:55:19 2015 UTC,"For a practical answer, the tool ent should give a rough approximation of the quality of the randomness you provide it.  At the very least, it's useful to take a block of unknown data and quickly identify whether or not it's compressed/encrypted."
crypto,2z8nid,tom-md,2,Mon Mar 16 22:25:09 2015 UTC,"Notice that such a statistical tool can not tell you if the random values are suitable for any particular use.  ent, for example, won't find any statistical bias in GO's RNG or basically any old LCG."
crypto,2z8nid,Twylite,1 point,Wed Mar 18 16:09:11 2015 UTC,In addition to DieHard and ent - which others have mentioned - there is the NIST SP800-22 suite of statistical tests that are implemented in the NIST RNG toolkit.  These tests cannot tell you if there is a hidden variable that makes the random sequence predictable; all they can tell you is that it is infeasible to distinguish the sequence from random noise.
crypto,2z8nid,tom-md,1 point,Tue Mar 17 15:08:49 2015 UTC,"That is, infeasible unless you know the algorithm used.  Even a bad algorithm can produce random looking noise that makes sense when given the technique."
crypto,2z8nid,BinaryCrow,-1,Wed Mar 18 16:11:14 2015 UTC,"The best way to do this is to run it through an artificial neural network, given enough time this can be used to distinguish patterns and estimate the next number in a sequence.   A simpler way of quickly sussing out the randomness of an algorithm is to plot the values and occurrence and looking for patterns."
crypto,2z6r0h,skaffen42,6,Mon Mar 16 01:47:52 2015 UTC,"The tavern owner could arrange to send a daily morning message (continue coverage or cancellation) to which the insurance company then responds with a bill or cancellation confirmation. Send redundant messages through additional stagecoaches if they're so unreliable.  Edit: And assuming the insurance company wouldn't accept this (likely), even if sent right after midnight, then an alternative is to guarantee an additional excessive day. That is, the daily morning message is regarding the next day's insurance."
crypto,2z6r0h,SirMoist,2,Mon Mar 16 02:07:46 2015 UTC,"The insurance company is fine with this, but it is only a solution if the stagecoaches run more frequently than the once a day.   For example, assume the stagecoach journey takes on average a week, but can vary by 3 or 4 days either way. With such a large variation it is easy for the insurance company to get your cancellation letter and wait a couple of days before cancelling the policy. You have no choice but to pay your premiums while the coach is en-route, but you really don't want to be cheated by the insurance company.   (I should have been more explicit in my description above - I'll edit to make it clearer)."
crypto,2z6r0h,Uncaffeinated,2,Mon Mar 16 02:36:32 2015 UTC,"Just require that they only send you a bill after getting the continuation confirmation. If they send you more bills than the number of confirms you sent, you can prove they are cheating.  Of course, this shifts the cheating risk onto the tavern owner."
crypto,2z6r0h,phyzome,6,Mon Mar 16 03:13:58 2015 UTC,"Send to a friend in the other village who will record the receipt and pass it along. Have a notary in your own village record the sending date of the letter, and arrange to ignore any bills after that date.   Those probably aren't acceptable to you, but I think the problem is underspecified."
crypto,2z6r0h,mrschyte,3,Mon Mar 16 03:06:54 2015 UTC,"Yes, I don't think its possible to solve this without a trusted third party."
crypto,2z6r0h,DINKDINK,1 point,Mon Mar 16 12:45:08 2015 UTC,Excuse me if my understanding of cryptography is incomplete (not my main area of study) but isn't the central premise of cryptography that any information algorithm that can be performed by a trusted third party can be completed with a cryptographic solution?
crypto,2z6r0h,phyzome,1 point,Tue Mar 17 14:57:16 2015 UTC,"The notary suggestion changes the problem specification, and also doesn't really solve anything. What stops the insurance company from backdating their bills?  Using a friend in the other village is a solution, but once you have trusted entities on both sides of the mountain the problem really isn't that interesting anymore. Is there a way to solve this without having a trusted entity in both villages?"
crypto,2z6r0h,darknight90020,3,Mon Mar 16 14:24:02 2015 UTC,"I don't see a way. Think of it this way: The insurance company could have a mail queue in their office labeled ""on the stage coach wink wink"" that they push into and pull from on some schedule. I don't think there's a way to distinguish that from the effective mail queue that is the stagecoach mail system itself, unless you have a third party."
crypto,2z6r0h,conradsymes,2,Mon Mar 16 15:45:51 2015 UTC,The insurance company can sign the bill with a timestamp.  The timestamp should come from a device that is tamper resistant and has a clock.  The timestamp is of course encrypted.    The clock can be synchronized by the stagecoach using standard NTP/PTP protocols.  I don't know of any work in tamper resistant clocks.  Maybe the 2-factor authentication systems solve a similar problem.
crypto,2z6r0h,GahMatar,1 point,Mon Mar 16 12:14:29 2015 UTC,An actuary... in essence?
crypto,2z6r0h,conradsymes,3,Mon Mar 16 14:50:26 2015 UTC,Are you sure you don't mean notary? Actuaries are basically statisticians...
crypto,2z6r0h,_ihatemyself,1 point,Mon Mar 16 15:42:51 2015 UTC,"Erm, yes. Sorry."
crypto,2z6r0h,GahMatar,2,Mon Mar 16 15:47:08 2015 UTC,"Isn't this just easily solved with Dates? Every day the IC sends out a bill with the current date on it.. Jan 1, Jan 2, Jan 3, etc. When the Tavern wants to cancel it sends out a cancel notice with the effective date on it.. Jan 4. It does not matter if it takes 1 day or 15 days to arrive, the IC will send out bills every day, and the tavern simply ignores every bill it receives after its cancellation date. The IC then stops sending bills, and expecting payments, when it receives the cancellation notice. You're assuming that the tavern will, for some reason, have to continue paying the bills it receives after it sends out the cancellation notice, which it does not."
crypto,2z6r0h,Nunuvin,1 point,Sun Mar 22 22:19:03 2015 UTC,"Keep a journal of (bill, payments) pairs.  Require that all bills reference the previous payment.  Detect duplicates bill reference by looking them up in the journal."
crypto,2z6r0h,Godspiral,1 point,Mon Mar 16 15:40:05 2015 UTC,"Ok I think I have an idea. Every time you are gonna send money in an envelope, you are going to include a unique code which is associated with the day for which the payment is due. For the insurance company to charge you for the next day, they have to state the code associated with a payment for the day before. So when they get the envelop with your cancellation they will not be able to avoid it. They can try to fake a code to fool you, but it is not gonna work (how do you fake another code for the same day???). To make this more fair this log book has to be shared with a 3rd party, to prove that you are not cheating, for example the mason can sign it everyday (so you would have witnesses that you did change the code). Third party is only required for legal issues in the case insurance company does not trust you and is going to check for foul play. Solution to this could be a special book, ink and a stamp (with watch in it). You would have to use the book and unerasable ink to write the codes and stamp over them with the stamp to prove that you did it on time. This could serve as a proof of you doing it on time and no 3rd party required! _^ I think this should work lol. :)"
crypto,2z6r0h,solutionskindaguy,1 point,Thu Mar 19 03:50:08 2015 UTC,"This is not a real problem, as your cancellation letter would have had a date on it.  If you made a claim after your cancellation letter, the insurance company would not pay it, and so you are not covered and not receiving any service as soon as you send the letter."
crypto,2z6r0h,GahMatar,0,Tue Mar 24 00:17:26 2015 UTC,Use the Bitcoin Blockchain as a trustless independent timestamping/notary service for all communication. https://www.btproof.com/.
crypto,2z1g30,PostHipsterCool,15,Sat Mar 14 18:07:10 2015 UTC,"Your drive is always encrypted: if someone were to pull a drive out of a running Mac with FV2 enabled, they wouldn't be able to read the blocks, as the blocks are only decrypted in memory. The real question is the protection of the key: in order to interact with the disk, your Mac has to keep the FV key in memory to encrypt and decrypt blocks. That key exists in memory while the computer is turned on. The only two ways to get it out of memory are to turn off the computer or to hibernate the computer (sleep to disk), in which case the key is written to disk along with the rest of the memory contents prior to hibernation. While the computer is on but locked, your key is in memory in the clear, so if someone were to dump the contents of RAM, they would be able to pull out the key. This is why Apple has disabled functions like DMA on FireWire and Thunderbolt ports while the computer is locked, because those provide direct access to RAM."
crypto,2z1g30,castillar,22,Sat Mar 14 18:18:55 2015 UTC,"Alternatively, you can enable the destroyfvkeyonstandby option using the utility pmset:  destroyfvkeyonstandby - Destroy File Vault Key when going to standby mode. By default File vault keys are retained even when system goes to standby. If the keys are destroyed, user will be prompted to enter the password while coming out of standby mode. (value: 1 - Destroy, 0 - Retain)"
crypto,2z1g30,ddcc7,4,Sat Mar 14 18:26:57 2015 UTC,Cool! I hadn't seen that one before. TIL.
crypto,2z1g30,castillar,2,Sat Mar 14 18:28:10 2015 UTC,"Yeah, I read about this but for a couple of reasons I was kind of unsure as to why this this is necessary:   Why is this needed if DMA attacks have been (mostly?) prevented by recent Mac patches? When does the system go to Standby?  There are so many 'sleep' settings, like Sleep, Hibernation, and Safe Sleep."
crypto,2z1g30,ddcc7,8,Sat Mar 14 19:02:28 2015 UTC,"This isn't as applicable for Macs with soldered-on memory, but the cold boot attack is one example attack that clearing the RAM would prevent. And even if DMA on external ports like Thunderbolt and FireWire is disabled, a determined attacker could tap directly to an internal PCIe bus, e.g. the mini-PCIe connection to the wireless card."
crypto,2z1g30,Saicotic,0,Sat Mar 14 19:54:53 2015 UTC,"Why is it less applicable for Macs with soldered-on memory?  Also, do you know when the system goes to Standby?  Does the destroyfvkeyonstandby option also apply to sleep states I listed above?"
crypto,2z1g30,ctcampbell,6,Sat Mar 14 20:18:32 2015 UTC,"Because a cold boot attack requires removing the RAM from the motherboard, and that's a wee bit difficult when it's soldered in."
crypto,2z1g30,Saicotic,0,Sat Mar 14 20:20:51 2015 UTC,I thought thunderbolt has direct memory access and removing ram isn't necessary?
crypto,2z1g30,h110hawk,6,Sun Mar 15 00:03:48 2015 UTC,"That is correct, though DMA can be disabled. I was talking exclusively about cold boot attacks that remove the physical RAM because he was confused about how soldered-in DIMMs would protect against that."
crypto,2z1g30,0xBADFEED,2,Sun Mar 15 00:21:39 2015 UTC,"TIL. We already require computers to have a password from screensaver and sleep, this seems like a logical next step as it won't actually impact the user while marginally increasing security."
crypto,2z1g30,castillar,5,Sun Mar 15 14:24:54 2015 UTC,"DMA on FireWire and Thunderbolt ports while the computer is locked   Well yeah, but still vulnerable to evil maid attacks which can plant a rootkit. Have you seen the Thunderstrike presentation at 31c3? It is disguised as a thunderbolt to ethernet adaptor. I highly recommend watching this presentation. This builds on snare's EFI rootkit presentation at Blackhat.  And then there is SLOTSCREAMER, which can access the read/write/dump memory via pcie/thunderbolt, and this is disguised as thunderbolt-vga adapter."
crypto,2z1g30,KayRice,2,Sun Mar 15 11:33:12 2015 UTC,Do you happen to know if iOS stores the encryption key in RAM when the screen is locked and requires a password to unlock?
crypto,2z1g30,suddenlypandabear,1 point,Mon Mar 16 16:55:00 2015 UTC,"I don't know for sure, but it seems like it would have to: without that key, it couldn't access anything in storage, which seems like it would cripple the phone's ability to deliver notifications on the lock screen or access caller ID for incoming calls. It's possible that the set of things that are ""unlocked"" for access while the phone is locked are encrypted with a different key from the rest of the phone, but I kind of doubt it."
crypto,2z1g30,Ecnenime,8,Mon Mar 16 17:30:34 2015 UTC,No source is available for File Vault or most of the software created by Apple so you're simply guessing as to how secure it is. I would advise only using encryption software where the public can audit the source code.
crypto,2z1g30,KayRice,3,Sat Mar 14 18:26:32 2015 UTC,"A lot of the kernel and other crypto code is open, but their implementation of AES looks like it's in the corecrypto library (including a software, AES-NI, and ARM hardware implementation), which I can only find headers for; corecrypto seems to be closed source.  But some of their crypto code for 10.10 is available on the usual opensource.apple.com domain (here, here etc). The source for the platform RNG implementation seems to be all there too (with a ""WARNING! WARNING! WARNING!"" comment not to change it at all due to FIPS validation)."
crypto,2z1g30,Ecnenime,5,Sat Mar 14 20:07:04 2015 UTC,I do enjoy a good bit of coding humour every now and again    http://imgur.com/oCRHArN
crypto,2yy7ma,1_player,7,Fri Mar 13 20:48:50 2015 UTC,One word: Macaroons
crypto,2yy7ma,bascule,3,Sat Mar 14 03:54:23 2015 UTC,"came here to say this.  basically short version (if you don't want to read up on it fully) is that you can use the HMAC from the server as the secret the client uses when modifying the token.  eg HMAC(Token, APISecret) => Token:HMAC1   (server -> client)  HMAC(Token + Expiry, HMAC1) => Token + Expiry:HMAC2 (client -> server)  The server can do a 2 pass verification where it figures out the original HMAC, then uses that to verify the second.  Pass 1 - HMAC(Token, APISecret) => HMAC1, HMAC(Token + Expiry, HMAC1) => HMAC2  You can take this further and start including the exact command you want ran (or at least a scope) as part of the client generated token, that way an attacker not only has a very limited time to use a token but they can only repeat the same command."
crypto,2yy7ma,bzBetty,2,Sat Mar 14 07:05:52 2015 UTC,can only repeat the same command.   Which wouldn't matter if you only allow for idempotent commands.
crypto,2yy7ma,silverforest,1 point,Sat Mar 14 13:47:43 2015 UTC,"Thanks, I'm not sure I understand how this is working, but I'll read up on the paper."
crypto,2yy7ma,phyzome,2,Sat Mar 14 17:36:19 2015 UTC,You'd need a validity window larger than 2 minutes. Clocks can be skewed up to several hours due to timezone shenanigans alone. Say an hour to be sure.
crypto,2yy7ma,YouFeedTheFish,1 point,Sat Mar 14 01:35:26 2015 UTC,"You could have the client send the message protected with the user's password (or crypto hash of the password) using PBKDF2 instead.  When the user log's out, his credentials can be erased on the client side."
crypto,2yy7ma,jgcarloto,1 point,Fri Mar 13 23:28:52 2015 UTC,Are you familiar with the OAuth 2.0 protocol? Seems to fit your needs
crypto,2yy7ma,jgcarloto,2,Sat Mar 14 00:03:45 2015 UTC,"Does it? There's no replay mitigation on OAuth2, you're just supposed to use TLS. I want the system to be safe even if an attacker can intercept the network communication between the client and the server. Also, I'm not interested in delegated authorization"
crypto,2yrs9w,johnmountain,8,Thu Mar 12 07:01:20 2015 UTC,"I'd rather see an audit of LibreSSL, the codebase is much cleaner, which would probably make it cheaper/easier to audit as well."
crypto,2yrs9w,admax88,3,Thu Mar 12 15:40:04 2015 UTC,Has Botan been audited?
crypto,2yrs9w,DemandsBattletoads,3,Fri Mar 13 04:22:51 2015 UTC,"I can only imagine the teams mentioned there producing a quote which states ""including acquiring VMS and QNX capable hardware in order to properly audit those code paths""."
crypto,2yrs9w,disclosure5,1 point,Thu Mar 12 21:55:06 2015 UTC,"QNX hardware is easy... It'll run in vmware on any modern PC.  VMS, well, if you ask nicely the folks at HP, they might rustle up a VMS running on Itanic. Believe it of not, OpenVMS is still being sold in 2015."
crypto,2yp1o7,poopinspace,3,Wed Mar 11 17:03:48 2015 UTC,There's a mistake on the fourth line of the equations:  \varphi(N) = (p - 1).(q-1) = p.q - p - q + 1 = N - p - q + 1
crypto,2yp1o7,ralpo08,2,Wed Mar 11 17:51:00 2015 UTC,Good catch!
crypto,2yp1o7,DemandsBattletoads,3,Thu Mar 12 00:42:01 2015 UTC,Are there any known systems that use small private exponents? I don't think small counts when e = 216 + 1?
crypto,2yp1o7,Godspiral,2,Thu Mar 12 02:16:45 2015 UTC,The size of the private exponent rarely has anything as trivial to do with the size of 'e'.  These are attacks on low-order RSA (e.g. multi-prime) and/or people who choose a small 'd' and then compute 'e' for it.
crypto,2yp1o7,untitleddocument37,1 point,Thu Mar 12 13:10:04 2015 UTC,"size of the private exponent rarely has anything as trivial to do with the size of 'e'   Interesting.  I've done informal tests that gave me the impression that e and d were inversely proportional, but this morning's informal tests don't confirm this."
crypto,2yoz9b,marklarledu,3,Wed Mar 11 16:45:34 2015 UTC,"For those interested, I used a combination of a modified script I found online coupled with the TestSSLServer.jar file that you can find here to test my server. Here is the code for the script I used:  #!/usr/bin/env bash  # OpenSSL requires the port number. SERVER=localhost:443 DELAY=1 ciphers=$(openssl ciphers 'EXPORT' | sed -e 's/:/ /g')  echo Obtaining cipher list from $(openssl version).  for cipher in ${ciphers[@]} do echo ---------------------------------------------------------- echo -n Testing $cipher... result=$(echo -n | openssl s_client -cipher ""$cipher"" -connect $SERVER 2>&1) echo $result echo ----------------------------------------------------------  sleep $DELAY done"
crypto,2yki00,johnmountain,21,Tue Mar 10 16:00:15 2015 UTC,"Not enough information provided about the situation, unfortunately. Hard to judge without more detailed rejection information and/or information concerning inner workings of the app potentially relevant to this rejection.   With relevance in this situation, the iOS Data Storage Guidelines: https://developer.apple.com/icloud/documentation/data-storage/index.html Also, for completeness, all App Store Review Guidelines: https://developer.apple.com/app-store/review/guidelines/"
crypto,2yki00,furGLITCH,30,Tue Mar 10 17:14:56 2015 UTC,"From the App Store Review Guidelines, the most relevant excerpt:   We reserve the right to do whatever insane bullshit we want because you're playing in our sandbox, motherfuckers. Dance, dance little puppets!"
crypto,2yki00,phyzome,12,Tue Mar 10 20:08:03 2015 UTC,"From my (admittedly rather limited) experience with publishing iOS apps, calling the review process ""arbitrary"" is comparable to calling the North Korean justice system ""biased""."
crypto,2yki00,Creshal,3,Tue Mar 10 20:51:02 2015 UTC,From experience as a user of multiple platforms:   Thank Jobs there isn't as much fucking shitty crap and clutter as on the Android Play Store.
crypto,2yki00,JRDerpwing,9,Wed Mar 11 13:25:13 2015 UTC,"Noob, here. What does this do exactly. I also did look it up, but would prefer a better idea."
crypto,2yki00,cuttingclass,11,Tue Mar 10 18:22:42 2015 UTC,"Even though it's in a section with the title ""Solutions That Don’t Work"", I assume they use the method described in that blogpost. Due to the low number of total users it should be feasible at the moment, but it will get too expensive to compute once they have a larger user base."
crypto,2yki00,dd_23,11,Tue Mar 10 20:02:25 2015 UTC,"They (Open Whisper Systems = the Signal/TextSecure developers) have a database of all the users of these apps.  The purpose of this database is to provide public keys for users so that other users can encrypt messages to them.  Somehow, if you're a Signal user, you need to get all the keys for the people you want to talk to.  You don't want all the keys for everybody because that would use up all the space on your phone and you know you need space for that new version of Angry Birds.    One solution would be to send your contact list to the OWS server, so that the subset of the list for which keys exist could be populated.  That doesn't scale as more and more people use Signal, and as folks get mad that all their contacts are sent to OWS for storage (you need to know if a friend signs up for Signal/TextSecure in the future because you told them to so you could text securely with them).  The Bloom filter is a more privacy-preserving solution, but the noise caused by the previous approach seems to have raised Apple's ire.  That's not good for an iPhone developer, though it has nothing to do with security."
crypto,2yki00,WRSaunders,6,Tue Mar 10 21:01:53 2015 UTC,The tweet seems to have been deleted.
crypto,2yki00,sha13dow,7,Wed Mar 11 03:55:51 2015 UTC,So it might have been a totally unrelated reason why it was rejected and the author decided to remove the tweet. Time will tell
crypto,2ym0vo,VictoryGin1984,0,Tue Mar 10 22:29:54 2015 UTC,"No idea what I'm talking about here, but could you do something with zero-knowledge proof?  Like, X and Y are trying to authenticate. An onion-like path could be something like  X --> PX --> PPX --> PPPX, PPPY <-- PPY <-- PY <--Y  PX being Proof of X, PPX being Proof of Proof of X  Something magical would happen at the middle node that has access to the Proof of the Proof of the Proof of X and Y.  I've never really looked into zero-knowledge proofs, so this thought is probably complete BS."
crypto,2ym0vo,zeroXten,1 point,Tue Mar 10 23:32:52 2015 UTC,"And of course, even if something magical did happen in the middle, something would have to propagate back to X, and Y to complete the authentication. And it would have to work (or at least detect) if any of the nodes were malicious."
crypto,2ym0vo,zeroXten,1 point,Wed Mar 11 07:04:45 2015 UTC,"Only if it is one-way. If both parties need to keep their graph secret, you need Multiparty Computation."
crypto,2ym0vo,Natanael_L,1 point,Wed Mar 11 18:40:24 2015 UTC,"It sounds like the parties would need to know the exact path to take this approach, but that needs to remain unknown."
crypto,2ym0vo,zeroXten,1 point,Wed Mar 11 23:46:09 2015 UTC,"I saw it more as propagating out. X would tell its neighbour* PX, and each neighbour would tell their neighbour* PPX etc. until there was a collision in the middle. I have no idea what would happen next. It was a midnight thought, all shape and no substance.  *this would be pretty inefficient, so perhaps best connected, or most reliable neighbour etc."
crypto,2ynhgx,FascistBukakeInfidel,1 point,Wed Mar 11 06:09:37 2015 UTC,I think you've just described OTP. You need a secure transmission of the pad (key) for it to work.
crypto,2ynhgx,cunttard,1 point,Thu Mar 12 02:44:55 2015 UTC,"The key must be delivered over a physically secure channel. If you send the key over a second encrypted channel, then your one-time pad is no longer a one-time pad, it's only as secure as the encryption on that second channel.  For binary messages, you simply XOR the key with the plaintext to encrypt, and XOR the key with the ciphertext to decrypt. If you're doing it on paper, then every symbol gets a numerical value and you add them to encrypt, subtract to decrypt (or vice versa). It isn't a mod 26 necessarily, it's however many symbols you want to use.  One-time pads are both simple and unbreakable, but needing a true random key as long as the message and delivered over a physically secure and authenticated channel makes them unusable for most people and most applications."
crypto,2yinlq,SirRobertKiN,0,Tue Mar 10 02:53:20 2015 UTC,"I've never used the tool, what is it supposed to do? And how does it work? There is no doc."
crypto,2yinlq,chiniwini,2,Tue Mar 10 11:25:52 2015 UTC,"Md5 is very broken, I'm guessing that it uses the break to find collisions."
crypto,2yinlq,DemandsBattletoads,2,Tue Mar 10 15:39:07 2015 UTC,"It's an improved birthday attack. It uses a few flaws in md5 to produce collisions between two arbitrary files much faster than if you were using merely the birthday attack. However, I can't seem to actually generate the collisions with it."
crypto,2yinlq,chiniwini,1 point,Tue Mar 10 20:52:12 2015 UTC,"Ok, I think I understand the usage. Have you tried appending the original files to the output ones, and checking the hash? Maybe file1_0 isn't the file with the collision, but the delta you have to prepend or append to the first input file to get the wanted hash.  Does the program at least tell you the value of the collision hash?"
crypto,2yinlq,Natanael_L,1 point,Wed Mar 11 09:31:04 2015 UTC,"It doesn't change the files given, it outputs new copies. Did your specify both inputs and where to put outputs?"
crypto,2yinlq,Natanael_L,1 point,Tue Mar 10 22:01:24 2015 UTC,I did not specify where to put outputs. I assumed that the output would be stored in /file1_0.bin and /file2_0.bin
crypto,2yinlq,Natanael_L,1 point,Tue Mar 10 22:32:20 2015 UTC,I'm guessing it's supposed to pad a file until it results in a given hash.
crypto,2ydlik,rya_nc,1 point,Sun Mar 8 22:04:51 2015 UTC,"Congrats to the winners. My entry was a finalist, but I think the winning entries were definitely better than mine."
crypto,2ydlik,cunttard,2,Sun Mar 8 22:07:02 2015 UTC,I have to say these are very creative submissions. Would you mind posting your submission? I would love to study it.
crypto,2ydx3o,FiloSottile,2,Sun Mar 8 23:45:24 2015 UTC,"If anyone is aware of a pre-existing tool for this overlooked vulnerability, let me know.  x-posted to /r/netsec"
crypto,2ydx3o,untitleddocument37,1 point,Sun Mar 8 23:47:04 2015 UTC,First time I've heard of this attack.  I checked my implementation ... one countermeasure we do is we DER decode the payload but then check the DER length to what the pkcs #1 de-padding routine gave us.  So if there were garbage after the end of the data it would be caught because the lengths wouldn't match.
crypto,2y6h4t,nebjak,11,Fri Mar 6 21:52:24 2015 UTC,"As a result, in conjunction with removing support for encrypted SMS/MMS, we’ll simultaneously move to a model of handling message delivery ourselves – relying on GCM only for a wakeup event. This should finally eliminate any periodic reliability issues.   It's about freak'n time. I stopped using textsecure because the message delivery was so unreliable, and I've complained before that they were spending all together too much time on SMS/MMS bugs and corner cases. I look forward to trying the first version of this!"
crypto,2y6h4t,warpzero,23,Sat Mar 7 01:24:59 2015 UTC,"That makes sense. SMS, just as a base tech seems really hard to secure."
crypto,2y6h4t,cr125rider,11,Fri Mar 6 22:25:45 2015 UTC,"I just wish I could get WhisperPush to work on my Cyanogen phone.  They give you a way to de-register a number, but it doesn't actually work."
crypto,2y6h4t,MrUnknown,3,Fri Mar 6 23:26:45 2015 UTC,Took me days of trying before it finally fucking worked. I think the infrastructure it's sitting on just isn't monitored at all.
crypto,2y6h4t,aspensmonster,2,Sat Mar 7 03:16:14 2015 UTC,I have the same problem.
crypto,2y6h4t,kaligeek,2,Sat Mar 7 02:28:16 2015 UTC,"let me know if you ever find a solution. I can't send encrypted texts to a friend because of this problem. They originally registered on WhisperPush and me on TextSecure, the push/data encrypted messages are never received by him.  I can register in TextSecure just fine, but not WhisperPush."
crypto,2y6h4t,MrUnknown,5,Sat Mar 7 02:36:29 2015 UTC,There's a ruby script (maybe a Python one too) someone wrote that dregisters you correctly. I've used it in the past when I had a similar problem. I've lost the link but they're on github somewhere. Try checking the issues on the TextSecure page for the thread discussing whisper push.
crypto,2y6h4t,ancientworldnow,2,Sat Mar 7 03:52:58 2015 UTC,"From a Hacker News thread; ""cheald 4 days ago  Try these:     * https://whispertool.cyanogenmod.org/     * https://github.com/daveio/whisperpush-unregister     Set up TextSecure with the Voice option, then go to Settings -> untick ""Push messages"". That should perform unregistration, then you can re-register.""  That second one there is the ruby script. My brother had the same problem with being able to unregister his number from Whisperpush. Can't remember if it was one of these solutions but eventually we got it to work."
crypto,2y6h4t,kv0th3,1 point,Sat Mar 7 10:47:17 2015 UTC,"tried it before and just now, please see my other response. Thank you for the idea though."
crypto,2y6h4t,MrUnknown,3,Sat Mar 7 17:31:29 2015 UTC,You might try this: https://github.com/daveio/whisperpush-unregister  ..which I think is what ancientworldnow is referring to. Not sure if it still works though.
crypto,2y6h4t,Immatix,1 point,Sat Mar 7 10:46:35 2015 UTC,"tried it.  The thing is, I am de-registered from WhisperPush as I can't register with it. I receive the text message to authenticate me and it takes me to the communication error screen saying ""TextSecure was unable to connect to the push service""  I used the script before, and tried again just now to have it unregister me from TextSecure and WhisperPush. WhisperPush fails, TextSecure does its 20 rounds thing.  Default file, with no modifications: user@host ~ $ ruby whisperpush_unregister.rb --mode getconfirm --phone-number +15558675309 Confirmation code sent to +15558675309. Run with -m unregister when you have it. user@host ~ $ ruby whisperpush_unregister.rb --mode unregister --phone-number +15558675309 --code 299147 #<URI::HTTPS:0x1073130 URL:https://whisperpush.cyanogenmod.org/v1/accounts/code/299147> Code did not validate (try again, check syntax with --help) user@host ~ $ nano -w whisperpush_unregister.rb  Set to unregister from TextSecure user@host ~ $ ruby whisperpush_unregister.rb --mode getconfirm --phone-number +15558675309 Confirmation code sent to +15558675309. Run with -m unregister when you have it. user@host ~ $ ruby whisperpush_unregister.rb --mode unregister --phone-number +15558675309 --code 951927 #<URI::HTTPS:0xd6a100 URL:https://textsecure-service.whispersystems.org/v1/accounts/code/951927> Unregistering gcm with 20 rounds....................done. Unregistering apn with 20 rounds....................done. You should now be unregistered from CyanogenMod's WhisperPush service. user@host ~ $   I can launch TextSecure on my phone, and register it just fine, but I can not communicate with a friend who is registered using WhisperPush. Sadly, he is the only person I know who has the setup. I don't want to try to get him to unregister from everything to test more things and he doesn't care about it.  Still looking for more ideas if you have any.  edit: hell, now WhisperPush isn't sending the SMS code. This whole thing they have set up is a damn hack."
crypto,2y6h4t,MrUnknown,5,Sat Mar 7 17:30:29 2015 UTC,So what happens if I send someone a text and they don't have textsecure installed on their phone? Will they not get the message or will it error out?
crypto,2y6h4t,NedRadnad,4,Sat Mar 7 00:52:31 2015 UTC,"If you're trying to start an encrypted session, they see the first step of a key exchange handshake. If you've already had a session going and your contact uninstalls TextSecure, then they get an encrypted message that they can't read. Either way, they get what will appear to be gibberish."
crypto,2y6h4t,gpennell,5,Sat Mar 7 01:21:57 2015 UTC,"If they don't have TextSecure installed and never have, it sends them a regular unencrypted SMS. There is a bug where if they uninstall it, other TextSecure users still send them encrypted messages.  I use TextSecure for all my text messages, and only a few other contacts also use it, so most of my messages are unencrypted."
crypto,2y6h4t,jus341,1 point,Sat Mar 7 02:36:31 2015 UTC,"TextSecure sends them a normal SMS. If they have TextSecure or Signal installed, it sends them an encrypted message through the data channel. It's been like that for a while, but you used to have the option to disable data messages and force encrypted SMS. Of you're a TextSecure user, sms are green messages, and data messages are blue (with a lock icon)."
crypto,2y6h4t,jus341,4,Sat Mar 7 02:34:56 2015 UTC,I dont have data and dont ever want data on my phone WTF is this horseshit.
crypto,2y6h4t,KaptainKraken,3,Sat Mar 7 16:08:31 2015 UTC,"Yeah, honestly the real feature of text secure is encrypted sms/mms. If I just wanted an encrypted data channel I could use one of many other pieces of otr software. Now I'll need to count on a data channel being present, AND I need to trust Whisper Systems with my meta data (because I don't think this is p2p?)."
crypto,2y6h4t,Ferinex,3,Sat Mar 7 17:17:37 2015 UTC,"Number 3 of the blog post speaks to the fact that sms and mms aren't p2p. When the post covers reliability in message delivery, it sounds like to side step the issue as best they could, they handled the delivery themselves (using messaging api's provided by Google).  If you've been using the app for awhile, it sounds like you've already put your trust in Open Whisper Systems.  The things I took from the post were:   Better, more reliable message delivery. (Switching to the use of data instead of SMS/MMS) Better, more secure handing of message metadata. (Use of the TextSecure message protocol) The ability to communicate with iPhone users.    When you get right down to it, your message is still encrypted.  Additionally something that many here seem to forget is that TextSecure still does more than send encrypted messages. It also stores them in an encrypted storage spaces, gives you the option to password protect the app, and even blank the thumbnail image displayed when you are scrolling through the recent apps list."
crypto,2y6h4t,TheOfficeAccount,1 point,Sun Mar 8 07:49:05 2015 UTC,Guess I should have read the article first. Thanks.
crypto,2y6h4t,Ferinex,1 point,Sun Mar 8 16:35:45 2015 UTC,Indeed the whole beauty of this was the encrypt/decrypt was all client side.  And I agree if I had data and wanted to chat with a friend who also had data then I'm not sure I'd need this program other than sms integration.
crypto,2y6h4t,KaptainKraken,1 point,Sat Mar 7 20:59:27 2015 UTC,"It works with regular SMS too. And wtf, who doesn't have data on their phone."
crypto,2y6h4t,de_hatron,3,Sat Mar 7 18:49:40 2015 UTC,Tell you what. You pay for a data plan and I'll use one
crypto,2y6h4t,KaptainKraken,1 point,Sat Mar 7 20:54:34 2015 UTC,You don't have 5e/$ per month for unlimited?
crypto,2y6h4t,de_hatron,3,Sun Mar 8 09:21:57 2015 UTC,I don't know where you live but there is no such thing as unlimited data where I am. And to highest data plan could which is 5gig a month is 60$  I have unlimited txt though. And this is why textsecure was amazing for me. Client side key and encrypt/decrypt
crypto,2y6h4t,KaptainKraken,1 point,Sun Mar 8 11:04:41 2015 UTC,"I just looked at the prices in USA. Why are they so expensive? In most of Europe you'd probably get the fastest available unlimited 4G LTE for $60. Where I live, you could get a contract (non-sim locked) galaxy S5 and the data plan for less than that."
crypto,2y6h4t,de_hatron,1 point,Sun Mar 8 11:18:15 2015 UTC,"Actually it's worse than the US, i'm in Canada, the country with THE WORST service/price ration ON THE PLANET. literally. The worst. the gouging is real."
crypto,2y6h4t,KaptainKraken,1 point,Sun Mar 8 15:16:26 2015 UTC,"Do NOT upgrade if you are on a Text Secure version v2.6.x or before  If you do, Moxie (lead developer) has removed SMS Encryption after v2.6.x  This release log information is NOT visible on the Google Playstore when you try to upgrade. Moxie the Moron doesn’t want people to know he has removed the SMS Encryption after v2.6.4 otherwise no one would upgrade.  Since Moxie (the utter Moron) has removed SMS Encryption (for no real reason except to cement a deal with WhatsApp) after version v2.6.4, there is no point using Text Secure any more  Moxie the Moron has put self interest using an open source platform ahead of maintaining E2E SMS Encryption for all  I suggest to ‘uninstall’ Text Secure and use the more stable Open Source platforms   Chat Secure (Open Source) - E2E IM Encryption – more feature rich and stable than Text Secure. Can be downloaded and installed with the Google Playstore (unlike crappy Text Secure) https://chatsecure.org SMS Secure (Open Source) - E2E SMS Encryption Can be downloaded and installed with the Google Playstore (unlike crappy Text Secure) https://smssecure.org   Plonk! … there goes my uninstall of Text Secure after 3 years  Hope to never use another of your products Moxie the Moron !!!"
crypto,2y68ch,Zmetta,4,Fri Mar 6 20:42:34 2015 UTC,"Check out the textbook Introduction to Mathematical Cryptography by Hoffstein, Pipher and Silverman. Very good and largely self contained."
crypto,2y68ch,Ar-Curunir,2,Fri Mar 6 22:01:19 2015 UTC,Yep the above book is great. Other good books that are more towards the math side:  guide to elliptic curve cryptography by menenzes  a course in number theory and cryptography
crypto,2y68ch,cunttard,3,Sat Mar 7 03:14:59 2015 UTC,"My favourite book on the subject is HEHCC. It starts from the basics in Chapter 2 (groups, rings, fields) and works upwards."
crypto,2y68ch,silverforest,2,Fri Mar 6 23:33:06 2015 UTC,You way find some of the resources mentioned in this SO thread useful: http://security.stackexchange.com/questions/5668/where-can-i-learn-cryptography-cryptanalysis-the-hard-way-without-going-to-scho  I would probably personally take a look at some of the recorded lectures on YouTube or similar sites.
crypto,2y68ch,brinchj,1 point,Fri Mar 6 21:29:06 2015 UTC,"I've read through most of the linked resources there and, while helpful and interesting in their own ways, I've still found a bit of an ""expected knowledge"" gap when it comes to the applied mathematics."
crypto,2y68ch,brinchj,2,Fri Mar 6 21:37:00 2015 UTC,"Sorry to hear you've already been there. I'd recommend finding a math lecture on cryptography that includes ECC, either on YouTube or audacity or khan academy or similar online course."
crypto,2y68ch,disclosure5,1 point,Fri Mar 6 21:52:39 2015 UTC,"I've also been working through Matasano's Crypto Challenge    I definitely noted, you can read something like http://cryptopals.com/sets/5/challenges/39/ and be equipped to implement ""textbook"" RSA, however, the second you involve ECC, well I haven't found a walkthrough that succinct yet."
crypto,2y68ch,BLOKDAK,-1,Sat Mar 7 09:57:09 2015 UTC,"There's no substitute for taking the courses...  especially linear algebra, diff eq, nonlinear DE, cal 3, all the analysis you can handle (but if you want to do anything on the computer make sure you include numerical analysis), probability, statistix, group theory brahj...  start with the courses you've already had on some site that has a consistent set of coursework and just keep on truckin  No shortcuts in this shit...  Edit: And I wouldn't call you ""intermediate"" by any means...  take the courses above and then you'll be intermediate.  And all math is ""applied"" as soon as you use it, so ignore any distinctions between ""pure"" and ""applied"" you might encounter - ""pure"" math is done by those without the imagination to recognize the application ."
crypto,2y6g2o,skintigh,1 point,Fri Mar 6 21:43:52 2015 UTC,"http://www.enigmaathome.net/   Project total CPU time equivalent to: 7448 years, 44 days, 10 hours of Athlon 3500+ running stock app.   The project is still ongoing, even with cribs."
crypto,2y47fv,johnmountain,15,Fri Mar 6 07:23:57 2015 UTC,"As someone who actually read DJB's curve25519 and ed25519 code, I strongly disagree. DJB combines all bad coding practices and his code is an undocumented, unmaintainable mess. He probably doesn't introduce many bugs, and that's strongly because nobody wants to mess with his code in the first place.  Every sysadmin I know stay very far away from Qmail as it's almost impossible to use correctly. Same for DJBdns.  I wouldn't have used his code if his name was not attached to it and wasn't the only portable implementation."
crypto,2y47fv,aris_ada,5,Fri Mar 6 08:59:02 2015 UTC,"qhasm, enough said (but yeah, I understand why)."
crypto,2y47fv,cunttard,3,Fri Mar 6 09:04:13 2015 UTC,"His ""curve25519_athlon_mainloop.s"" is a straight 70 KB asm source file without a single comment. That's quite... impressive, I guess."
crypto,2y47fv,deathfantasy,11,Fri Mar 6 14:01:26 2015 UTC,"It's because you do not see the real source code, it's automatically generated by qhasm (the meta-assembly language from djb that only him is using), from source code that wasn't released. Nobody has proven that it's equivalent to the reference code yet.  I really love his work as a cryptographer, just not as a developer :)"
crypto,2y47fv,aris_ada,1 point,Fri Mar 6 14:59:30 2015 UTC,His portable curve25519/ed25519 C stuff is straightforward and clean.
crypto,2y47fv,floodyberry,1 point,Fri Mar 6 23:04:35 2015 UTC,"Every sysadmin I know stay very far away from Qmail    To be fair, nearly every issue with qmail (particularly the ""backscatter"" one) is less of a ""bug"", and more of a ""that's what everyone did in the 90's"". For all the ranting about this bug, Microsoft Exchange still does it by default and early versions didn't give you the option to change it.  As far as djbdns goes, it's ""issues"" are similarly age related, but at the time, it fixed exactly what was wrong with the alternatives. BIND was a bloated mess with weekly vulnerabilities, it encouraged authoritative servers to be recursive by default (the legacy of which is a major problem today) when in reality it should have been a totally separate daemon. The zone file format was hideous for automated tools.   BIND10 was, from its outset, designed pretty much around djbdns (whether they acknowledged it or not) with a modular set of services, a dynamic database format that doesn't take a reload to read. It's a real shame it never really eventuated, as ""BIND, inspired by the principles of djbdns"" sounds like a really great product imo.   undocumented   I certainly agree with this. One can spend quite a bit of time pondering the purpose of chkshsgr.c  and its contents.  As far as being bug free goes, I did find this line of code in buffer_put.c:  if (w == 0) ; /* luser's fault */   I'm still trying to determine if it's a ""bug"", or some form of overstated comment about a user."
crypto,2y47fv,disclosure5,1 point,Sat Mar 7 10:16:12 2015 UTC,"I disagree. I find the code quite nice, but you are right about qmail. It's ancient, though and was better than anything at the time."
crypto,2y47fv,dareksam,9,Fri Mar 6 11:42:56 2015 UTC,"Aaron Swartz apparently never tried to use do.sh.  DJB is a talented programmer and an excellent cryptographer, but ""best programmer that ever was"" is just silly."
crypto,2y47fv,bitwiseshiftleft,13,Fri Mar 6 17:25:21 2015 UTC,"This is the most nonsensical incoherent babble I've read in a long time. If you've ever read the code, it will be clear that Aaron didn't. He had to be on drugs when he wrote this."
crypto,2y47fv,zmist,10,Fri Mar 6 07:46:40 2015 UTC,Just because someone is dead in martyrdom doesn't mean he's right. That's just an appeal to authority.
crypto,2y47fv,aris_ada,0,Fri Mar 6 09:01:18 2015 UTC,RiP Aaron Swartz... played in the dragon's lair and paid the price.
crypto,2y47fv,rflownn,2,Fri Mar 6 08:11:09 2015 UTC,"Also, canonization works the other way. The dead are sainted, it's not possible for the dead to confer sainthood to the living."
crypto,2y47fv,R-EDDIT,1 point,Fri Mar 6 19:53:51 2015 UTC,"Ah qmail...  354 - Go ahead punk, make my day"
crypto,2y1z4m,zZ0MB1EZz,10,Thu Mar 5 19:39:46 2015 UTC,The south sucked at crypto. THey used 3 keywords the entire war which the NOrth had figured out long long ago: Manchester Bluff; Come Retributiona nd a third I forget. several good books like Codebreakers by Kahn mention it
crypto,2y1z4m,skintigh,5,Thu Mar 5 23:07:21 2015 UTC,"""Complete victory"" was the third."
crypto,2y1z4m,johnmountain,1 point,Fri Mar 6 02:51:45 2015 UTC,Ironic.
crypto,2y1z4m,skintigh,3,Fri Mar 6 07:24:54 2015 UTC,Did the south have any success in breaking the north's codes?
crypto,2y1z4m,KayRice,8,Fri Mar 6 00:37:08 2015 UTC,"I recently searched for information on ciphers used in the past by the USA and had trouble finding a definitive source. The NSA has a museum with some info. The CIA website talks around and around and around but seemed pretty worthless for specifics and their search engine has been temporarily down since 2012. I emailed them and was told to search their site.  What I gathered is the South, and maybe the North, used Vigenere with very long keywords. However, they reused 3 or so keys hundreds of times, defeating their own security.  Anyway, I too would love some sources on this subject (USA crypto 1773-1945)"
crypto,2y1z4m,Jasper1984,3,Thu Mar 5 22:20:57 2015 UTC,For anyone interested in the basics:  http://en.wikipedia.org/wiki/Signal_Corps_in_the_American_Civil_War#Ciphers  http://upload.wikimedia.org/wikipedia/en/7/7f/Civil_War_cipher_disk.jpg  A lot of the references come from this book Getting the Message Through: A Branch History of the U.S. Army Signal Corps written by Rebecca Robbins Raines (ISBN 0-16-045351-8)  Some more searching they host that book for free on the Army website in PDF form. I've grabbed a copy for myself and will give it a read because the subject and time period is interesting.  http://www.history.army.mil/html/books/030/30-17-1/CMH_Pub_30-17-1.pdf
crypto,2y1z4m,untitleddocument37,3,Fri Mar 6 01:49:41 2015 UTC,"Really funny how bad old crypto was. How different things would have been if only one simple idea; the one-time pad; was used. Each connection should have its pair of books, loss of book puts the ""connections"" using it at risk. (obviously if books are re-used and potentially captured, you need to be sure you can destroy the book real quick.)  I mean, literally have a book with random characters, it will last.. long. Can basically send an entire book of information before needing to send another. Encoding decoding would be the same.  You could make a little device for it. Basically, it is adding-modulo the number of characters. One way to do it: two rotating discs, the bottom one has an indicator, which you point to the input character, the bottom one has all the letters on there too, you point the indicator of the top, smaller disc to the letter in the one-time-pad. The top, smaller disc has an indicator too, it points to letters on the frame. The letter on the frame is then the letter you end up sending/receiving.  Probably also want a way to ensure you know where in the code-book you are. (though in principle, you could just say so in cleartext on the messages)"
crypto,2y1z4m,untitleddocument37,3,Fri Mar 6 13:31:29 2015 UTC,The problem would also be making said book before good mechanical ways of making random strings.  Just bashing at a keyboard (typewritter) wouldn't have worked as there would be very obvious biases.
crypto,2y1z4m,TNorthover,2,Fri Mar 6 15:20:28 2015 UTC,You replied to the wrong dude dude.    Also generating a pad in the 19th century would have been really hard to do correctly.
crypto,2y1z4m,david55555,1 point,Fri Mar 6 16:30:05 2015 UTC,"It doesn't necessarily have to be done perfectly to be unbreakable in practice. Or better than using the same 3 Vigenère keys for everything.  But I think the logistical issues would have been a real problem. Workable OTP requires quite stringent protocols between communicators to even work, let alone securely."
crypto,2y1z4m,Jasper1984,2,Fri Mar 6 16:31:08 2015 UTC,"How different things would have been if only one simple idea; the one-time pad; was used.   I don't know that it would make such a huge difference. A lot of messages where carried by hand. OTP is best if you are broadcasting your message.  It would have been useful for messages sent by telegraph, but I don't know how often critical intelligence was sent by that kind of technology."
crypto,2y1z4m,MyFutureIsInBeta,1 point,Sun Mar 8 02:53:51 2015 UTC,"Well, i take it often the cryptography was intended for messages by hand!  The germans could have used it too."
crypto,2y1z4m,rflownn,2,Fri Mar 6 16:36:30 2015 UTC,These may be of some assistance: http://www.civilwarsignals.org/pages/crypto/crypto.html http://www.mathaware.org/mam/06/Sauerberg_route-essay.html http://blogs.lib.unc.edu/civilwar/index.php/tag/cryptanalysis/ http://www.afio.com/publications/Glantz_Civil_War_Intel_in_AFIO_INTEL_WinterSpring2011.pdf http://www.cwu.edu/~boersmas/cryptology/confederate%20code%20paper.pdf
crypto,2xyr9z,balachthon,8,Thu Mar 5 00:07:00 2015 UTC,"For your first question at least, this would be my advice: Check out the Program Committee of TCC for recent years. (http://www.iacr.org/workshops/tcc/, pick a year, go to ""Call for Papers"".)  The names on that list are leading researchers, and their affiliations are listed too so you can get a sense of what universities have strong research groups in theoretical cryptography.  You can also have a look at the program itself and see what kinds of papers are being published, and then look them up on http://eprint.iacr.org/ or the author's webpage."
crypto,2xyr9z,throwaway0xFF00,7,Thu Mar 5 00:54:19 2015 UTC,"Which Universities/people are doing interesting research recently? (I'm an EU citizen so I can apply to European schools too)   KU Leuven has COSIC.  <--Good folks here;  great research;  Would recommend.  NTNU <-- Good folks here; would recommend.  Kind of cold in the winter months  Eidenhoven university of technology <--- There is a particularly well known cryptographer here that I find to be a jerk in person  Bristol Univ.  <--good folks here too; good research too.  There are many others.  Those are the ones that come off of the top of my head.   Any specific tips for someone who doesn't have a cryptographer at their University? (Closest in regards to subject would be two Algebraic Topologists)   That's a very good question.  I wouldn't say algebraic topology and cryptography are close to one another.  Usually topologies, sigma algebras, and other loosely related objects are typically not found in cryptographic research.  I would say algebra and function analysis are closer topics.  At any rate, try to find an advisor that would give you a problem on cryptography.  A plan B would be lattice based code theory."
crypto,2xyr9z,epostma,1 point,Thu Mar 5 04:18:22 2015 UTC,"Nit pick: you probably mean Eindhoven University of Tech. (I got my degree there, but in discrete algebra, not crypto. I know the crypto students were super nice and the younger faculty too, but I never had much to do with the senior faculty of that group so I can't really say if I agree with your assessment of character :-). )"
crypto,2xyr9z,pxdnr,4,Thu Mar 5 05:41:35 2015 UTC,"If you look at the top cryptography conferences you might get a better idea of what you're interested in and who's doing the research. Top cryptography conferences include Crypto, Eurocrypt, and Asiacrypt. TCC (Theory of Cryptography Conference) is probably relevant as well.  By the way, don't limit yourself to public-key cryptography; have a look at this to see what else is out there.  Here's a random selection of departments and names you might find interesting. I did not try to be exhaustive.   Aalto University (Kaisa Nyberg) Cornell University (Rafael Pass) ETH Zurich MIT NYU Stanford UCSD"
crypto,2xyr9z,newfor2015,2,Thu Mar 5 01:08:43 2015 UTC,"NYU? that's a surprise.  and Princeton failed to make your list?  edit: not diss'ing NYU, just a TIL type of reaction when I read it."
crypto,2xyr9z,0x616e746f6e,2,Thu Mar 5 18:16:10 2015 UTC,"Not that surprising, Victor Shoup is quite well known, for instance as the author of NTL which HElib is built on top of."
crypto,2xyr9z,Ar-Curunir,2,Thu Mar 5 20:45:25 2015 UTC,Princeton doesn't have any cryptographers.  I'm more surprised at the exclusion of UCLA where Amit Sahai and Rafail Ostrovosky are currently teaching.
crypto,2xyr9z,Ar-Curunir,2,Fri Mar 6 04:29:41 2015 UTC,"UCSD, UCLA, MIT, Stanford, UCB, NYU, Aarhus University in Denmark (great at Multi Party Computation), are all very good.  UIUC, GeorgiaTech amd UT Austin also have one big theoretical cryptographer each."
crypto,2xt7o6,johnmountain,14,Tue Mar 3 18:17:50 2015 UTC,Maybe they should upgrade their security by adapting code from an internationally-published book. :)
crypto,2xt7o6,DemandsBattletoads,1 point,Tue Mar 3 19:28:28 2015 UTC,"Did they write it, themselves? /s"
crypto,2xt7o6,elzonko,6,Tue Mar 3 21:29:36 2015 UTC,"In recent days, FBI.gov and Whitehouse.gov have been fixed, though NSA.gov remains vulnerable   hah."
crypto,2xt7o6,mrcaptncrunch,7,Tue Mar 3 22:17:02 2015 UTC,honeypot?
crypto,2xt7o6,samyel,10,Tue Mar 3 22:41:09 2015 UTC,This is a pretty commonly overlooked downgrade attack.  Kind of similar to Google marking SSLv3 as insecure starting soon. I think the article sensationalises the whole ordeal a bit though.
crypto,2xt7o6,ldpreload,20,Tue Mar 3 21:54:23 2015 UTC,"There's a political goal in this article: the US government has recently been pushing for a US-government-only back door, and the public cryptography community has largely been saying that such a thing is sufficiently irresponsible and dangerous that it's impossible to build a back door to the specs that the government actually wants.  So they're demonstrating that a mandated US-government back door from the 1990s is still around to bite us: the intention was that the NSA could (if necessary) cryptanalyze these connections but commercial competitors couldn't. But today, anyone can."
crypto,2xt7o6,zimm3r16,3,Wed Mar 4 00:55:12 2015 UTC,The export laws are still there.
crypto,2xt7o6,TMaster,2,Tue Mar 3 21:47:30 2015 UTC,Does someone know whether non-browser Android apps are likely to be affected?
crypto,2xt7o6,kandi_kid,3,Wed Mar 4 02:24:52 2015 UTC,"This mostly has to do with servers offerring lower grade-encryption as an option (not by default) and clients like Android and iOS that will obey fallbacks on encryption to lower grades.  Chrome and Firefox were affected until November-ish of 2014 for similar encryption fallback attacks.  Servers that don't offer the lower grade encryption in the first place aren't affected at all, but apparently some government websites were still coded to support it.  As for apps, the SSL library is a shared one by most OSes, so it depends.  If the app communicates with a remote server using some sort of API (Facebook, Pandora, anything that streams, anything that does cloud stuff), then it likely uses the same SSL library.  That being said, most SSL libraries also offer hard coded encryption algorithms to be passed in, so it depends on the application.  Sometimes people call it strictly, sometimes they just call a generic URL library that has ""https://"" tacked on the beginning of it.  So to answer your question, a lot has to go wrong for this to affect an app.  If the server offers bad encryption standards as an option and the code is calling a generic ""let's do SSL"" function, then yes.  It's not even that weak by default for most servers, though, but apparently the article states that 1/3rd of the internet has bad fallback options.  That's not likely to be the case if the company who produces the app isn't stupid. If you upgrade the OS, though, the apps will be fixed automatically in most cases.  Apps won't have to be updated to fix it unless they hard code a bad crypto algorithm, but that's their own damn fault if they do that and it's not technically a FREAK bug at that point.   Connections to Google’s search Web site are not affected by the flaw.   That's because Google doesn't provide the lower level encryption in the first place.  The link provided in the article shows some analysis on some domains that are affected, which could be useful if you are trying to find a specific app that is affected: https://freakattack.com/  I'm curious why you ask, are you an app developer yourself, or are you concerned about your phone's security?  As long as you upgrade your devices when the patch is available to the OS, you should be fine.   Travelers also are vulnerable whenever they log onto the Internet from a hotel, for example.   I'd like to point out that travelers are vulnerable to about 9000 vulnerabilities whenever they log onto the Internet from a hotel that are worse than this one.  Hotels need to actually provide real security on their networks FFS."
crypto,2xt7o6,TMaster,6,Wed Mar 4 04:49:28 2015 UTC,"Servers that don't offer the lower grade encryption in the first place aren't affected at all, but apparently some government websites were still coded to support it.   It should be noted that certain versions of Windows server that are still supported have not received patches to disable SSLv2 and SSLv3. You have to make registry changes and reboot the server to change the available cipher suites."
crypto,2xt7o6,SuperConductiveRabbi,1 point,Wed Mar 4 09:11:07 2015 UTC,"I'm curious why you ask, are you an app developer yourself, or are you concerned about your phone's security? As long as you upgrade your devices when the patch is available to the OS, you should be fine.   I'm an Android user who is not in a good position to upgrade my OS version, so I was wondering if apps indeed used a shared TLS library across the platform, and if so, which Android versions are affected.  It sounds like I'm mostly screwed, even though my Gmail and Google account should still be fine. Sadly, since I don't have a good overview of what other apps might be sensitive, this is making things difficult. Many of my apps don't request full network access though; I'm paranoid when it comes to that, so that's good at least.   I'd like to point out that travelers are vulnerable to about 9000 vulnerabilities whenever they log onto the Internet from a hotel that are worse than this one.   I'm the kind of guy who tried to avoid connecting to insecure networks until Google added encryption to their syncing. I'm sure my attack surface is lower than most people's, but that's only because I try to keep track of all vulnerabilities on my phone. But if you're up for a challenge, feel free to suggest which completely unrelated vulnerabilities I may be affected by. ;) Few of my apps' accounts contain sensitive information."
crypto,2xt7o6,xkcd_transcriber,2,Wed Mar 4 17:04:05 2015 UTC,http://xkcd.com/932/
crypto,2xt7o6,OfFireAndFlame,4,Tue Mar 3 23:13:30 2015 UTC,"Image  Title: CIA  Title-text: It was their main recruiting poster, hung nearly ten feet up a wall! This means the hackers have LADDER technology! Are we headed for a future where everyone has to pay $50 for one of those locked plexiglass poster covers? More after the break ...  Comic Explanation  Stats: This comic has been referenced 126 times, representing 0.2326% of referenced xkcds.    xkcd.com | xkcd sub | Problems/Bugs? | Statistics | Stop Replying | Delete"
crypto,2xt7o6,transcendent,1 point,Tue Mar 3 23:13:55 2015 UTC,Any kind of detailed write up on the algos themselves how and weaknesses that were being exploited?
crypto,2xt7o6,OfFireAndFlame,6,Tue Mar 3 21:46:14 2015 UTC,The article (buried in the middle) mentions that it's simply a downgrade attack -- you force them to use 512bit RSA which can then be factored.
crypto,2xt7o6,rflownn,2,Tue Mar 3 22:03:14 2015 UTC,"Ah, awesome. And for future lazy redditors: link"
crypto,2xozxc,johnmountain,8,Mon Mar 2 18:35:57 2015 UTC,Now merge the two on Android as well.
crypto,2xozxc,Natanael_L,10,Mon Mar 2 21:02:36 2015 UTC,right now signal text to textsecure is working perfectly
crypto,2xozxc,LivingInSyn,1 point,Mon Mar 2 21:08:15 2015 UTC,I don't see much of a reason to merge them. They work perfectly fine as RedPhone and TextSecure. I've called and texted friends with the new signal app.
crypto,2xozxc,jus341,3,Mon Mar 2 23:18:58 2015 UTC,Simplicity. It is just easier to be able to initiate a call when chatting if you need to talk by voice.
crypto,2xozxc,Natanael_L,1 point,Mon Mar 2 23:26:22 2015 UTC,That's fair. Usually it's such a rare occurrence for me.
crypto,2xozxc,jus341,1 point,Tue Mar 3 00:09:31 2015 UTC,Isn't that what Intents are for? Just launch one app from the other...
crypto,2xozxc,nemec,3,Tue Mar 3 04:39:51 2015 UTC,"It's tricky with red phone because it doesn't handle regular calls in the same way that text secure handles both encrypted and unencrypted SMS. If you don't have a default phone, it will prompt you every time.   Edit: actually, red phone has a setting to prompt for a secure call when making a regular call to a contact that also uses red phone. I don't have many friends that use it, unfortunately, so I don't see that option very often."
crypto,2xozxc,jus341,1 point,Tue Mar 3 08:29:41 2015 UTC,"I actually prefer red phone to be separate from text secure because I use text secure always, but redphone rarely if ever."
crypto,2xozxc,LivingInSyn,9,Tue Mar 3 13:20:37 2015 UTC,"This is an awesome app. I got to use it in private beta and it's fantastic. I recommend it over all others. Open sourced, secure protocols, perfect forward secrecy, etc. Only app I know of that checks off every box of security."
crypto,2xozxc,sulaymanf,5,Mon Mar 2 22:26:10 2015 UTC,"It is indeed amazing.  From a UI standpoint, though, I wish they'd kept thr ability to see what phone number the name is attached to, as with red phone.  Some contacts have multiple phones under the same contact."
crypto,2xozxc,chakalakasp,2,Tue Mar 3 00:47:34 2015 UTC,Tap the name of the contact in the conversation window.
crypto,2xozxc,ZaphodsOtherHead,6,Tue Mar 3 06:50:00 2015 UTC,Only works with ios8. Guess i finally have a reason to upgrade.
crypto,2xozxc,A_Bumpkin,3,Mon Mar 2 22:02:08 2015 UTC,"TextSecure has this nasty thing where if you're not online the entire time, the clever parts of the system break down; I've heard several people complain that they receive ordinary texts late -- as in more than an hour late. I wonder if Signal 2.0 has the same problem? If so, that might be a deal breaker for many people."
crypto,2xozxc,pred,2,Tue Mar 3 08:05:50 2015 UTC,IIRC this would happen at least in the case where you yourself is using TextSecure while receiving texts from someone who's not. I don't understand the protocol well enough to see if there's any obvious reason how this could happen.
crypto,2xozxc,pred,1 point,Tue Mar 3 09:39:31 2015 UTC,My big gripe is that you can't set a contact to always message insecure. My mom had it installed for awhile but later switched to an iphone. She's still registered according to Textsecure but she can't unregister without swapping the sim in and installing the app. I can manually switch my message to insecure each time but it doesn't remember the setting.
crypto,2xozxc,iJeff,1 point,Tue Mar 3 14:09:21 2015 UTC,"Can someone explain to me why this is so secure, and do they sacrifice convenience for security (a point which I think most agree are hindering mass adoption to protocols with good security)."
crypto,2xozxc,WhosAfraidOf_138,8,Wed Mar 4 17:58:04 2015 UTC,"It uses good authentication and forward secrecy. No, they don't sacrifice convenience for security. It's probably the most user-friendly encryption app ever made."
crypto,2xozxc,ZaphodsOtherHead,1 point,Tue Mar 3 06:49:57 2015 UTC,No Groupchat. No Poll Feature. I stay with Threema. Swiss company with end-to-end encryption
crypto,2xozxc,Tom_200,3,Tue Mar 3 08:19:39 2015 UTC,No group chat? Textsecure supports it. Signal should as well.   For me it is more a question of: open source or gtfo.
crypto,2xozxc,dareksam,1 point,Thu Mar 5 13:54:42 2015 UTC,It has groupchat :-)
crypto,2xozxc,DesertRainKing,1 point,Fri Mar 6 07:23:31 2015 UTC,"Doesn't stand a chance against Threema! Less features, requires your phone number and the servers are in the US. Pity if you fall for that!"
crypto,2xozxc,longfelladeeds,0,Sun Mar 8 02:59:50 2015 UTC,i've been using signal on iphone for a while now
crypto,2xozxc,slimmtl,-5,Mon Mar 9 14:51:56 2015 UTC,"So they manage your keys for you?  If that's the case, it's no more secure than iMessage, except that you're trusting WhisperSystems instead of Apple...."
crypto,2xozxc,naht_a_cop,4,Tue Mar 3 01:26:59 2015 UTC,"No, the keys live on your phone.  Which is why you get a hash phrase of sorts to exchange at the beginning of each call, to verify no MITM.    Unless I'm fundementally misunderstanding something here."
crypto,2xozxc,chakalakasp,1 point,Tue Mar 3 05:10:15 2015 UTC,"I haven't tried out the software, but the link stated ""There are no separate logins, usernames, passwords, or PINs to manage or lose.""  That would leave me to believe it generates it's own key pairs in the background."
crypto,2xozxc,naht_a_cop,7,Tue Mar 3 05:46:25 2015 UTC,"It does, but it does it locally on each device.  And the source code is open and viewable (and the older versions have been audited, at least according to the EFF)"
crypto,2xozxc,chakalakasp,1 point,Tue Mar 3 05:52:46 2015 UTC,"I tried to figure out what the ""audit"" actually meant but never quite managed to. There's an IACR ePrint on TextSecure which deals with the protocol, but it's a bit unclear to me if anybody audited the code."
crypto,2xozxc,pred,1 point,Tue Mar 3 06:17:38 2015 UTC,That's because public key cryptography replaces all that.
crypto,2xreq4,Chris_Farley,7,Tue Mar 3 06:11:56 2015 UTC,"Yes, metadata can be troublesome.  This is another reason for I want the option of public key based addressing instead of having everything tied to the combo of phone numbers for lookup and automatic phonebook lookup."
crypto,2xreq4,Natanael_L,2,Tue Mar 3 13:35:57 2015 UTC,"I realize of course that Signal is not an anonymity app and rather a secure messaging app, but the system of automatically adding contacts who install Signal does have some real privacy ramifications, a least until if/when it becomes popular enough that such information is meaningless.   That's the whole problem, as long as it's a niche app, the confidentiality it gives you comes at the cost of privacy because it makes one stand out."
crypto,2xreq4,Dillinur,1 point,Tue Mar 3 14:11:15 2015 UTC,"Actually, confidentiality doesn't necessarily have to come at the price of privacy, and vice versa. You can use a messenger that doesn't scan your phonebook or requires you to register with your phone number, I'm thinking about Threema for instance or that other app with the blue logo I can't remember the name:)"
crypto,2xreq4,longfelladeeds,1 point,Thu Mar 5 14:30:59 2015 UTC,"It's not about the permission of the given app, it's about being able to merge in a crowd by using a widely used solution."
crypto,2xreq4,Dillinur,2,Thu Mar 5 15:53:39 2015 UTC,"Yes, this is a known issue, or rather a ""feature"" (a discoverability one, for the same reason why Whatsapp or Snapchat do it). I'm not sure why they haven't added the option to disable this or use email accounts yet."
crypto,2xo4ah,speckz,9,Mon Mar 2 14:22:14 2015 UTC,Is it open source?
crypto,2xo4ah,wellstone,4,Mon Mar 2 17:58:31 2015 UTC,"Much of the OS is, but the suite of encryption tools are closed source. They're audited and the people backing it are big names, like Phil Zimmerman."
crypto,2xo4ah,sulaymanf,15,Mon Mar 2 18:04:53 2015 UTC,"the suite of encryption tools are closed source. They're audited   Closed-source crypto should not be trusted. We have no way of verifying the correctness, integrity, and security of the code if we can't see it."
crypto,2xo4ah,DemandsBattletoads,6,Mon Mar 2 18:21:20 2015 UTC,"I know it's not a popular opinion, but I'll take closed source, with a well defined protocol, and encryption built on common standards, from names I trust, over some guy's DIY JavaScript. I appreciate that's an extreme example, but I've seen the latter gather public support just because it's ""open source"" and that's also a bad move."
crypto,2xo4ah,disclosure5,1 point,Mon Mar 2 23:28:11 2015 UTC,That is a fair point.
crypto,2xo4ah,DemandsBattletoads,3,Tue Mar 3 01:55:56 2015 UTC,"They acknowledge this constantly, and you're partially correct, but it's just one of those things where you have to trust somebody until they can figure out a better way.   Even with external auditors (which I hope they've done or are planning on doing) you'd then have to trust the auditors.  With open-source you have to trust that all programmers looking at this code have found all the security bugs that exist before any bad-guys or governments find them.   https://support.blackphone.ch/customer/portal/articles/1565532-how-can-we-trust-you-and-blackphone-does-it-have-backdoors-  https://support.silentcircle.com/customer/portal/articles/1644811-does-silent-phone-have-any-“back-doors”-"
crypto,2xo4ah,mclamb,3,Mon Mar 2 18:26:25 2015 UTC,"With open-source you have to trust that all programmers looking at this code have found all the security bugs that exist before any bad-guys or governments find them.    It's a lot easier to find those holes with tens of thousands of code reviewers and not just a small team. People who need these devices don't have leeway to ""just trust them"". The NSA wants me to ""just trust us"".   No way Jose."
crypto,2xo4ah,mwthink,2,Mon Mar 2 18:34:43 2015 UTC,This is the way things are going. Crypto is going to have to go for the open source model. It's the only way to ensure integrity. Profits are going to need to come from support or ads or some other avenue.
crypto,2xo4ah,pantofeller,2,Tue Mar 3 10:35:13 2015 UTC,That's assuming debuggers and fuzzing won't reveal much
crypto,2xo4ah,Natanael_L,3,Mon Mar 2 21:01:27 2015 UTC,"Audited by who and do you know if the reports are available, names are small in my world, realities are big. Also are the audited packages signed so you can confirm you are using the samething at least?"
crypto,2xo4ah,wellstone,2,Mon Mar 2 21:10:07 2015 UTC,"Phil Zimmerman has been involved in the secure communications world for over 20 years.  He created PGP and was investigated for ""arms trafficking"" because PGP was too strong.  He has also created VoIP protocols, so he has lots of experience in the area.  http://en.wikipedia.org/wiki/Phil_Zimmermann"
crypto,2xo4ah,mclamb,2,Tue Mar 3 15:30:04 2015 UTC,"I'm clear on who he is and what he has done in the past. I'm interested in the verification procces on this project... Really, name is a name, a person can do great work or bad who knows let's check. What i do care about is the quality of the work and the process for verification."
crypto,2xo4ah,wellstone,2,Tue Mar 3 16:14:34 2015 UTC,Did they say why they decided to keep it closed source?  Seems kind of a non-starter.
crypto,2xo4ah,MacroMeez,3,Mon Mar 2 23:14:24 2015 UTC,Profit.
crypto,2xo4ah,sulaymanf,1 point,Tue Mar 3 00:04:52 2015 UTC,"Licensing.   Just because it's not ""open-source"" doesn't mean the full source-code isn't available.  Open-source indicates a ""free license"".  https://support.silentcircle.com/customer/portal/articles/1644811-does-silent-phone-have-any-“back-doors”-"
crypto,2xo4ah,mclamb,1 point,Tue Mar 3 15:35:09 2015 UTC,Interesting. Are there any hidden-source portions of black phones os?
crypto,2xo4ah,MacroMeez,1 point,Tue Mar 3 16:26:28 2015 UTC,"I don't think so but I'm assuming that several people and groups have investigated that same thing and would have made it public if they wouldn't provide the source that compiles exactly to production versions.  https://github.com/sgp-blackphone  https://github.com/SilentCircle  If you can find any of their software that isn't available then post it here and we can look for it. There might be the requirement that they make you sign something saying you won't distribute the code if you want to review it, but that's purely speculation. They claim that it's all available.  One problem is that it doesn't seem to be updated as often as they release updates, or their updates are rarer than they should be."
crypto,2xo4ah,mclamb,4,Tue Mar 3 19:43:45 2015 UTC,""" A: Blackphone is designed in USA and Europe and manufactured in PRC from a worldwide network of suppliers. ""  https://support.blackphone.ch/customer/portal/articles/1574842-what-are-blackphone-s-specifications  I take it this is the bargain version of actually secure phones. If this is the cherry, what's the real deal?  Plus the fact that their 'secure protocols' are 'closed source' makes it difficult for others to prove the veracity of their claims. Afaik, they just signed up some LLC papers in Switzerland for the image and to look 'cool', kind of like that other US 'secure' email side-project next to CERN.  edit: Also, the US has been heavy handed in how they regard China in terms of cyber-warfare. I think the pieces fit too nicely that this phone is likely, not secure."
crypto,2xo4ah,rflownn,1 point,Tue Mar 3 02:19:18 2015 UTC,"Which sources are not available?  As far as I can tell, all source code for the Blackphone and the Silent software is available, it's just not all ""open-source"" meaning that it can't be used in other projects."
crypto,2xo4ah,mclamb,1 point,Tue Mar 3 15:38:55 2015 UTC,https://support.blackphone.ch/customer/portal/articles/1668896-where-is-blackphone-s-source-code-?b_id=4314  Other apps are still to be determined.  We will release as much as we can but do not yet have details or an ETA.
crypto,2xo4ah,rflownn,1 point,Tue Mar 3 23:31:54 2015 UTC,"https://support.blackphone.ch/customer/portal/questions/9646342-release-privatos   You can not call the phone secure if it can not be verified. Stop using ""NSA"" as a cop-out."
crypto,2xo4ah,rflownn,1 point,Wed Mar 4 05:37:03 2015 UTC,http://i.imgur.com/mAYDD.jpg
crypto,2xo4ah,advocat3,-1,Wed Mar 4 10:56:29 2015 UTC,Why the fuck does it still have a menu button in 2015? How do products like this even make it past concept? It's mind boggling.
crypto,2xl27e,P-e-t-a-r,11,Sun Mar 1 18:57:36 2015 UTC,Why not use ecryptfs and mirror the cypher text?
crypto,2xl27e,david55555,3,Sun Mar 1 22:11:27 2015 UTC,"Newer worked with encryptfs,  but I now may consider. Can U explain more please? :)"
crypto,2xl27e,david55555,2,Sun Mar 1 22:18:23 2015 UTC,"It is a userspace encrypted filesystem.  I would read the documentation if I were you, but the important factors are that it is designed for exactly the work you intent to do.  Random access of encrypted files.  Can be managed with a single key.  Userspace so you could directly mount a remote source."
crypto,2xl27e,david55555,1 point,Tue Mar 3 14:08:12 2015 UTC,MACs? Mandatory Access Controls? How is that relevant to cloud storage?
crypto,2xl27e,gsuberland,1 point,Tue Mar 3 23:23:05 2015 UTC,"In this context, I suspect Message Authentication Code."
crypto,2xl27e,saf3,8,Wed Mar 4 13:58:33 2015 UTC,"You can have an encrypted container/encrypted file system which you mount (and decrypt at time of mount) to access the files inside.  The container would be in your Dropbox/OneDrive/whatever synced folder.   Any changes you make to files in the container will be immediately changed in the container, so no need to worry about re-encrypting and managing versions of files.   The unencrypted files have no chance of leaking since you would mount and use the filesystem in a separate space than your cloud synced directory.   Your files will also be encrypted while at rest.  This is what I recommend instead of individually managing encrypted files.  On the other hand if you want to encrypt files to share individually with people, you might want to look into PGP like another person said. You could write a simple script which would batch enc/decrypt files for you."
crypto,2xl27e,mootmeep,1 point,Wed Mar 11 15:17:05 2015 UTC,"Thanks very much for this post/reply. This may be the best idea so far for my needs. Sharing with other people is not that important now, but I was also thinking about that  when post this question on reddit."
crypto,2xl27e,akamad,-1,Sun Mar 1 21:48:57 2015 UTC,Agreed. Just use truecrypt and create a container
crypto,2xl27e,autowikibot,5,Mon Mar 2 13:18:25 2015 UTC,"One option is Duplicati. It's open source and cross-platform. It encrypts the files and stores it to your choice of cloud storage service. I'm not sure what your use case is like, but this one is designed primarily for backups."
crypto,2xl27e,K3rb3ro5,2,Mon Mar 2 01:16:12 2015 UTC,"Duplicati:       Duplicati is a backup client that securely stores encrypted, incremental, compressed remote backups of local files on cloud storage services and remote file servers. Duplicati supports not only various online backup services like OneDrive,  Amazon S3, Rackspace Cloud Files, Tahoe LAFS, Google Docs but also any servers that support SSH/SFTP, WebDAV, or FTP.  Duplicati uses standard components such as rdiff, zip, AESCrypt and GnuPG. This allows to recover backup files even if Duplicati is not available. Released under the terms of the GNU Lesser General Public License (LGPL), Duplicati is free software. Source code is available from Duplicati's developer site.    Image i     Interesting: List of backup software | Duplicity (software) | Comparison of backup software   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2xl27e,K3rb3ro5,1 point,Sun Mar 1 22:37:03 2015 UTC,Sounds cool. I am now testing this...
crypto,2xl27e,K3rb3ro5,1 point,Sun Mar 1 22:37:18 2015 UTC,You could use this https://github.com/k3rb3ros/three_fizer
crypto,2xl27e,K3rb3ro5,2,Mon Mar 2 13:22:10 2015 UTC,I seem to have misunderstood your initial use case you want to encrypt multiple files with a single encryption command. This program only operates on single files. Most unix style programs will only operate on a single file at a time.   You could put all the files you want to encrypt in a single directory. Then tar that directory into a tar archive file with tar. Then encrypt the tar archive with threefizer or pgp or openssl. This would solve the problem of the program only operating on a single file at a time.   Not sure if this is the solution you are looking for. As for programs for gnu linux that encrypt/decrypt a multitude of files in just one operation I don't know of any.
crypto,2xl27e,K3rb3ro5,1 point,Sun Mar 1 19:26:31 2015 UTC,Assuming you are doing the encryption/decryption on a multi core system.
crypto,2xl27e,K3rb3ro5,1 point,Sun Mar 1 20:09:45 2015 UTC,yes.
crypto,2xl27e,KevZero,1 point,Sun Mar 1 19:31:30 2015 UTC,"how to compile? Just running make in extracted folder and source outputs error ""Makefile:15: recipe for target 'obj/cbcDecrypt.o' failed make: *** [obj/cbcDecrypt.o] Error 1"" tried with sudo, same thing. Currently stuck. But thanks for fast reply."
crypto,2xl27e,na85,1 point,Mon Mar 2 13:22:38 2015 UTC,What version of linux are you running are you getting any other warnings or errors?
crypto,2xl27e,davidpbrown,2,Sun Mar 1 19:39:07 2015 UTC,Do you have clang if not then open the top level make file and change cc from clang to gcc.
crypto,2xl27e,ldpreload,1 point,Sun Mar 1 19:51:43 2015 UTC,"runing sudo make from extracted folder shows: this, and running sudo make from folder src show this"
crypto,2xl27e,ndeso,2,Sun Mar 1 19:55:36 2015 UTC,"So you don't have clang installed. There are two solutions. One get clang with whatever package manager you have installed. Or Two change the CC variable in the Makefile in the ""extracted folder"" from clang to gcc or whatever C compiler you have on your system. Sudo is unnecessary for building this project as the make process doesn't move any files outside of the project folder. When you have  successfully bulit the project you can create a symlink in /usr/in or /usr/local/bin that points to threefizer. Something to the effect of ""sudo ln -s /home/petar/Public/progs/three_fizer/threefizer /usr/local/bin/threefizer"". This will allow you to run the program by typing threefizer from the command line."
crypto,2xfe0j,R-EDDIT,1 point,Sat Feb 28 03:20:20 2015 UTC,"Does anyone understand IETF rules enough? My understanding is that the TLS WG is waiting on the CFRG to standardize Curve25519 and friends, but this WG is just going forward and doing that themselves?"
crypto,2xfe0j,kingkilr,1 point,Sat Feb 28 19:00:23 2015 UTC,Dunno... The principals here are active participant in CFRG.
crypto,2xfe0j,GahMatar,1 point,Sun Mar 1 02:39:11 2015 UTC,"Are they? I read CFRG pretty regularly, and I don't recognize their names."
crypto,2xfe0j,kingkilr,1 point,Sun Mar 1 04:26:45 2015 UTC,"I'l be honest, I opened the CFRG archive, found one of the author on the first page of result and then assumed."
crypto,2xdl2y,coflynn,6,Fri Feb 27 18:25:59 2015 UTC,"Hopefully you don't mind this here - I was in the Hackaday Prize 2014 with some open-source hardware/software for power analysis attacks. I'm trying to make it even cheaper... basically going from $30000-$200000 commercial tools down to $180 open-source hardware.  It's all open source anyway so if you don't like it you can take it the designs, tell me to shove it, and do what you want ;-)  But if you've ever been interested in seeing how you can break an implementation of AES-256 in a few mins, even though the system is implemented correctly, this is how."
crypto,2xdl2y,tuskman22,2,Fri Feb 27 18:29:07 2015 UTC,"Colin, you're open source software has been a huge help in helping me set up a test rig. Just wanted to say thanks!"
crypto,2xdl2y,fidelitypdx,1 point,Sat Feb 28 02:46:15 2015 UTC,"Great, I'm always glad to hear it's being used! I'm hoping the whole open-source project really takes off, regardless of what HW it gets used with."
crypto,2xdl2y,rubdos,0,Sat Feb 28 14:46:52 2015 UTC,"I'm trying to make it even cheaper   Truth be told, I've seen them as low as $30, but yours looks more robust. I'll drop you a PM.   (Edit: Turns out the one I'm thinking of lacks a logic analyzer)."
crypto,2xdl2y,meTa_AU,1 point,Tue Mar 3 18:33:07 2015 UTC,This is really interesting. This makes me want to try different sideway techniques. Probably trying out some FFT algorithms on my Thinkpad keyboard clicking sound.
crypto,2xdl2y,rflownn,3,Fri Feb 27 21:34:56 2015 UTC,"Yeah there has been all sorts of crazy and cool side-channels... it seems that no matter how weak the signal, somebody has figured out a way to use it!"
crypto,2xcuv2,astill90,5,Fri Feb 27 15:07:27 2015 UTC,"I think it would be fair to say  breaking Enigma was one of the stars of WWII, a little more prominent than the star of a film."
crypto,2xcuv2,mnp,1 point,Fri Feb 27 17:33:35 2015 UTC,Thanks for the link :P
crypto,2x7hfj,D4r1,27,Thu Feb 26 06:25:55 2015 UTC,Also known as Security by Obesity.
crypto,2x7hfj,phyzome,11,Thu Feb 26 13:14:14 2015 UTC,"SolarDesigner (at the least, there may be others) came up with a similar idea after Jeremy Spilman's A better way to store password hashes? (reddit thread) post and the subsequent discussion on it.   See SolarDesigner's slides for New developments in password hashing: ROM-port-hard functions (2012) and yescrypt - password hashing scalable beyond bcrypt and scrypt (2014) for more details. Further, the Password Hashing Competition wiki has a detailed breakdown of yescrypt, his submission to the PHC which utilizes the ROM feature, and the current yescrypt source if you want to check it out yourself!"
crypto,2x7hfj,floodyberry,4,Thu Feb 26 07:46:49 2015 UTC,"It seems to me that if I'm in a position to steal the password hashes and the random array, then it doesn't matter if the whole array is too big to be copied. I only need to copy small pieces of it, and I'll know which pieces. IOW this scheme tries to achieve ""security by obesity,"" but it turns out that the fat is easy to trim away.  I also found a lot of minor problems which could be addressed easily (these are left as an exercise for other readers), and some major problems that are harder to address (mostly revolving around the generation, storage, and potential re-generation of a huge amount of random or strong pseudorandom data), but in light of the foregoing those don't matter much."
crypto,2x7hfj,EddieTheJedi,3,Thu Feb 26 17:22:55 2015 UTC,"I haven't read the technical details of this paper, but it seems to me that if you just take a hash of the password, interpret that hash as an address in the random array, take that chunk from the array, combine it with the password (like you would a salt), and then hash as normal, that would prevent the attacker from knowing which pieces of the random array they'll need until they've already broken the passwords."
crypto,2x7hfj,Nanobot,2,Thu Feb 26 17:34:08 2015 UTC,"I have read the paper and I couldn't figure out exactly how an implementation is supposed to choose elements from the random array. But in the case you describe, I can simply use my table of 10 million hashed common passwords to pick out which elements to copy."
crypto,2x7hfj,EddieTheJedi,10,Thu Feb 26 18:06:01 2015 UTC,Salting the hash with the username or a per-user nonce prevents this.
crypto,2x7hfj,forrestv,1 point,Thu Feb 26 19:47:59 2015 UTC,"I couldn't figure out exactly how an implementation is supposed to choose elements from the random array   My understanding is that you simply generate a fully random binary value, convert it to numeric for this purpose, mod against the size of the BAC, and then you have your pointer.  That way the pointer can be completely random but still meaningful."
crypto,2x7hfj,h55genti,3,Mon Mar 2 19:53:02 2015 UTC,"I think I see an attack that would work.  Presuming the attacker has access to the ball but can't exfiltrate it per the original pitch. If you have enough access to the ball to steal it there is a pretty good chance you have enough access to log reads. In that case you don't even need the actual ball data, just a list of all the offsets that have been accessed. If in brute forcing password you find a result that decodes to a value where all the pointers are in your set of known accessed values then that's a match. With 10 random pointers the odds of a collision are really, really low.  The size of accessed values to be exfiltrated will then only need to be (pointer count * number of users * pointer size) which should be a very manageable amount of data."
crypto,2x7hfj,bigshmoo,4,Sat Feb 28 21:49:19 2015 UTC,"If you have any questions, they may be answered in Benjamin's DerbyCon Talk"
crypto,2x7hfj,DuckingtonIII,2,Thu Feb 26 19:19:27 2015 UTC,"Many if the password dumps have been pretty large, of you can dump a 100 thousand passwords you can dump this, or make a copy of the vm.   I'm not sure how you'd horizontally scale an application with this system, you'd need to pass around the random file which means it's going to be available in a portable format.  The author uses pointer when offset might be better because somebody is going to implement this with raw pointers and have a bad day."
crypto,2x7hfj,cwmma,1 point,Thu Feb 26 19:31:13 2015 UTC,"100,000 passwords is a few mb at most. How does that compare to 100gb to 1tb+?"
crypto,2x7hfj,floodyberry,2,Thu Feb 26 21:30:01 2015 UTC,"2 thoughts, first the dump is likely to be passwords plus user data, so 100,000 users, say 32 byte hash (256 bit) would be like ~3MB, but it's not going to just be that it's going to be usernames maybe real names, birthdays, or addresses or maybe they just vacuum the entire table.  Leading to much larger dump sizes.   Now let's think about realistic sizes of your random file. You have to think of it as your secret key, because of you lose it you now no longer are able to verify users, so you have to be able to back it up.  You need to be able to deploy it securely onto new servers. You also don't want to have to pay extra for disk space. Many cloud platforms have limited disk space on smaller instances and encourage you to use things like elastic block store for storing data.   Now you likely don't want to use ebs to store the random data because that would be pretty easy to dump, so instead we need an ec2 instance with a hard drive. A m3.medium one has a 4gb one, so that would allow for a random table that is a GB, to have room for a 100GB one we'd need a c3.4xlarge instance.  So in practice there may be some limits on practical size of the table."
crypto,2x7hfj,cwmma,1 point,Thu Feb 26 22:03:09 2015 UTC,"available in a portable format.   If they made the data, say 10 TB, it would be pretty hard to download, but is still portable enough for the data owner to copy it to a few hard drives and drive it to their other location."
crypto,2x7hfj,AnythingApplied,1 point,Fri Feb 27 05:29:24 2015 UTC,"That would work if you had physical drives but once you are using cloud services like Amazon it becomes less practical, see my other reply for some details."
crypto,2x7hfj,cwmma,2,Fri Feb 27 13:14:57 2015 UTC,Public key cryptography?
crypto,2x7hfj,untitleddocument37,1 point,Fri Feb 27 16:59:22 2015 UTC,"Not used here, no. All symmetric"
crypto,2x7hfj,Natanael_L,1 point,Fri Feb 27 19:09:28 2015 UTC,My point was instead of inventing yet another better square wheel why not use a round one?
crypto,2x7hfj,untitleddocument37,2,Fri Feb 27 19:18:11 2015 UTC,I do tend to agree on that. I like the approach of U2F
crypto,2x7hfj,Natanael_L,1 point,Fri Feb 27 19:39:07 2015 UTC,This is like saying you'll protect needles in haystacks while forgetting that attackers are smart and they'll attack with magnets and matches
crypto,2x7hfj,Likely_not_Eric,1 point,Thu Feb 26 19:03:38 2015 UTC,"Can someone explain to me how one generates a fake hash? I mean, how do you guarantee that a user won't create a password that generates that hash? If you can make that guarantee, can't the attacker do the same thing?"
crypto,2x7hfj,Ahhmyface,2,Thu Feb 26 17:26:37 2015 UTC,"If we can assume that the input is fixed to a length equal to the hash output, and assuming the hash function is, at least a perfect hash function, then only the same password would generate the same hash.  However, in this scheme, it would appear that the input hash, is used to derive the fake hash. Assuming a chained, keyed, perfect hash function, only the original input would be able to set the state to generate the fake hash, for that derived (from input hash) input. Of course, that doesn't mean that the different hash paths won't generate the same output, as any keyed phash can generate all values within the output range, only once. However, I don't think this is a keyed hash system...  In such a system, generating fake hashes would be as simple as incrementing the hash key used by both parties, and hashing..anything really. Of course, that's a rather predictably naive method.  I think the security of this system is less than two keyed 256 bit perfect hash functions, with the first ouput hash used as the hash key for the original input's 2nd hash operation. However, one must sort much crap in order to determine this."
crypto,2x7hfj,merkle_jerkle,1 point,Thu Feb 26 22:01:55 2015 UTC,"There's a very nice paper I read recently called ""The Quest to Replace Passwords"".  It looks like this scheme is similar (in terms of threat model, interaction between entities, etc., not in terms of actual operation) to server-side iterated hashing, except that the server-side salt is gigantic and hard to steal. Which is to say, if you would use server-side iterated hashing, but you're worried about the salt being stealable, then this solves problems. If you're worried about any other problems, this doesn't solve them any better than server-side iterated hashing does. (And sometimes worse: often you can move some of the hashing to the client side for enhanced protection against a compromised connection. This scheme doesn't have an equivalent for that.)  Furthermore, it's not totally clear that this is actually easier / simpler for developers to use than iterated hashing. Seeking around a gigantic array of random data is going to be fairly difficult to do, especially for a website with multiple servers (does each server keep a copy of this data? do we need to buy special hard disks so we can fit a large enough random key?).  In the framework of ""The Quest to Replace Passwords,"" this has (I think) no advantages at all over passwords. Which makes sense, because it is a password-based scheme. It is a cute idea, but I don't think it's lined up well with either the deployment considerations of hashed passwords, or the problems with passwords in general."
crypto,2x7hfj,ldpreload,1 point,Thu Feb 26 21:50:32 2015 UTC,especially for a website with multiple servers (does each server keep a copy of this data? do we need to buy special hard disks so we can fit a large enough random key?).   I think the idea is that the BAC would have an API and be a shared service used by front-end applications to perform a validation step on login events.
crypto,2x7hfj,h55genti,0,Mon Mar 2 19:50:04 2015 UTC,"Aside for the poor presentation and writing, this is my understanding of it: it tries to prevent offline attacks by using a huge chunk of data (that he calls a big array). Is this what Cryptography is about? We should assume that if an attacker can perform an offline attack, then he has that big array, and if he has that big array, then his system is as secure as the system he's trying to fix.  What he's doing is just trying to avoid offline attacks. And this demands:   monitoring of the traffic (irl and on the internet) somewhere to store the big array a system that prevents errors to happen in this big array (otherwise a lot of users might not be able to login anymore)   And this is not really cryptography to me.  In fact. Wasting money and resources here seems weird when they could be used earlier, on securing the server (and thus fighting against a bigger number of attack vectors)."
crypto,2x7hfj,poopinspace,2,Thu Feb 26 23:21:34 2015 UTC,"Cryptography is about increasing the effort and resources required for a successful attack against your system. So in one way, yes."
crypto,2x7hfj,Natanael_L,1 point,Fri Feb 27 16:51:31 2015 UTC,but in the mean time we try not to use too much space and be clever about it. That's why we almost never use one time pad.
crypto,2x4b7h,johnmountain,54,Wed Feb 25 15:33:20 2015 UTC,"I think it's dangerous to characterize people like this as misinformed or ignorant. I think Mike Rogers is very well informed about the technology and the probable consequences to the long-term health of the internet; he just doesn't care. His mandate is to gather intelligence, and he will do whatever he can to facilitate that  mission. The NSA will never back down on their efforts to compromise encryption technologies, nor will they be forthcoming and truthful about their activities unless something forces their hand."
crypto,2x4b7h,ZagrebMcNulty,14,Wed Feb 25 17:38:13 2015 UTC,"What's more, it's silly to pretend that this is technically infeasible.  It's technically quite feasible to do it with OK-for-NSA security properties in first-party apps like Skype and iMessage.  You just encrypt the session key with an NSA public key, or split it between NSA and Apple.  The private key is kept on an HSM in a SCIF, replicated to several SCIFs across the country for ease of access.  It might still leak, but NSA and FBI would rather take that risk than give everyone unbreakable end-to-end encryption, especially if they can disable that extra functionality on their own devices."
crypto,2x4b7h,bitwiseshiftleft,3,Wed Feb 25 19:01:34 2015 UTC,"The thing is you don't need to go to the FBI, NSA, etc to get unbreakable end to end encryption.  Anyone can implement it right now using existing primitives and most people in this world are not in the US so don't really care so much about US law.  Imagine if Zimmerman lived in some random Asian nation back when he came up with PGP. US law wouldn't have mattered one bit."
crypto,2x4b7h,samsonx,7,Wed Feb 25 22:26:27 2015 UTC,"Of course you can implement unbreakable end-to-end encryption, at least if you have access to a good, non-backdoored RNG.  But the vast majority of citizens -- and even most criminals -- aren't going to do that, and they aren't going to download Moxie's app which does that either.  They're going to use WhatsApp and iMessage and Facebook and Skype.  So as long as those are backdoored, the government can read most of what it wants to.  Remember that CALEA requires telecoms to backdoor their phone infrastructures so that the government can listen to calls.  FBI/NSA want a new CALEA which would require backdoors in internet messaging apps too.  If they can force TextSecure off the app store, so much the better for them, but even if not they'll keep most of their surveillance power.  On the other hand, if an iPhone or Droid with default settings is unsnoopable, then FBI/NSA lose a lot of their power.  Maybe they should have thought about that before using said power for evil."
crypto,2x4b7h,bitwiseshiftleft,1 point,Wed Feb 25 22:51:15 2015 UTC,"I believe the theory is that the vast majority of citizens won't utilize strong cryptography and the most evil of criminals will.  The next element of this ""legal framework"" ADM Rogers discusses will be criminalization of unbreakable end-to-end encryption.  While I'm not sure what good it would do to indict a bunch of Russian John Does, it would certainly suppress US researchers and developers."
crypto,2x4b7h,WRSaunders,0,Thu Feb 26 20:07:21 2015 UTC,"Maybe.  I think they'd go for a more subtle angle and hope that most criminals don't switch to secure products, but something like this could happen.  Another possibility is that use of non-backdoored, third-party end-to-end encryption would be admissible as evidence of criminal intent."
crypto,2x4b7h,bitwiseshiftleft,2,Thu Feb 26 21:22:23 2015 UTC,"I think Mike Rogers is very well informed about the technology and the probable consequences to the long-term health of the internet; he just doesn't care.   I can't speak for the man, but from his primary objective is to protect the US and its citizens by gathering intelligence. Its the job of citizens to make sure his own localized objectives do not compromise the sovereignty of the US by the citizens. This is why public debate is very important because it allows citizens and decision makers to openly challenge the policies they believe are destructive and to promote those they believe are constructive."
crypto,2x4b7h,rflownn,4,Thu Feb 26 06:39:08 2015 UTC,"The NSA will never back down on their efforts to compromise encryption technologies, nor will they be forthcoming and truthful about their activities unless something forces their hand.   Well said.  For some reason people decided that we should defer to the expertise of LE when deciding how much authority/capability LE should have.  But LE is always going to ask for the ultimate authority needed to make their jobs as easy/effective as possible, just like any well meaning professional would.  Also just like any well meaning professional LE tend to think that what they do is the solution to everything.  No one ever sees themselves as the bad guy (see cognitive dissonance), so from LE perspective why shouldn't you let them get their grubby hands on everything, after all your not a criminal are you."
crypto,2x4b7h,____G____,29,Wed Feb 25 20:50:52 2015 UTC,"The problem with crypto back doors is that implementing secure crypto algorithms just isn't that hard. Every product or algorithm which gets backdoored will be replaced by one which isn't, regardless of its legality.  Every product you build a back door into is a product that will be replaced by one that refuses to implement one.   If you pass laws requiring the implementation of back doors we return to the 90s where crypto work is just done outside the US. US tech companies are left being unable to compete in the marketplace as foreign products must be chosen to avoid known security holes. It further leaves all of us vulnerable to meddling by other countries.   When you're mandating that all crypto can be broken, the more often the capability is used the more likely the secret backdoor key is to leak. When that key leaks you're left with a security catastrophe that would make heartbleed look harmless.  If you go on to require everyone in the US to use backdoored crypto. It's just not possible to actually prevent people from using strong crypto, it's literally trying to ban certain kinds of math. This is where things get truly bad.   With backdoored crypto we have the potential for criminalizing the mere use of unbackdoored encryption. It's very possible(and may in fact be the actual goal) that the end result is for anyone found using unbackdoored encryption to be treated as a felon/terrorist without having any idea what they actually did or were planning on doing.  Crypto backdoors are nothing less than an assault on our economy, our security, and our liberty."
crypto,2x4b7h,Innominate8,15,Wed Feb 25 19:46:47 2015 UTC,"I think the problem is he (or at least the people advising him) understand it perfectly, they are hoping that the American public at large will trust their explanation of how these things work, instead of the experts.  I think by screwing up the security of the Dual_EC_DRBG, they proved that not only do they know exactly what their doing, but that their focus is 100% on pwning as much shit as they can and 0% on protecting Americans information.  My personal favorite part of this is that even though the Snowden leaks showed us that they can/will/do take advantage of everything they can to scoop up information with no regard for due process, they are coming out and making the claim that privacy has swung too far in the opposite direction (even though nothing has changed and a good portion of tech we thought was secure actually isn't), and then further coming out and saying ""come on guys, you can trust us with the keys.""    Basically they failed at getting away with shitting on America (because their operation was to big to keep secret), so now they want to scare us into letting them do it.    Plus since criminals will undoubtedly use open source software that hasn't been compromised (reguardless of the legality) destroying(some people call this creating a ""backdoor,"" but let's call it was it fucking is) encryption will only allow spying on main stream consumers and low level criminals."
crypto,2x4b7h,____G____,6,Wed Feb 25 17:45:19 2015 UTC,"This article isn't making the right argument. Even if the US could design bulletproof backdoored cryptosystems, how do we prevent the master key from being stolen through espionage?  What happens when Iran, China, Russia, etc. acquire the keys to the kingdom? Not if, when."
crypto,2x4b7h,PasswordIsntHAMSTER,2,Thu Feb 26 00:17:12 2015 UTC,"Mike Rogers and his goons don't give a shit. Their encryption won't have the backdoor, that's only for civilians and companies not contracting for the government.  That's the framework the admiral is really talking about."
crypto,2x4b7h,fiftypoints,2,Thu Feb 26 13:40:37 2015 UTC,serious question: does he have any previous experience in security?
crypto,2x4b7h,jamphat,5,Wed Feb 25 17:08:23 2015 UTC,"According to Wikipedia he's a Navy lifer who was redesignated to cryptography in 1986.  in 2009 he was named head of Fleet Cyber Command, the Navy's cyberwarfare command.  He clearly knows better, from a math or computer science perspective.  As DIRNSA, one can presume that he's well briefed for these public events from both the policy and technology perspective.  When he talks about ""a legal framework"" he knows Congress can't pass a ""∏ = 3"" bill that changes the laws of mathematics.  So what could he really mean when he says ""I think that we’re lying that this isn’t technically feasible.""?  That it's technically feasible to make a strong cryptosystem that US Court orders can influence?  That it's technically possible to build a weak cryptosystem that the US government can access and not have anybody notice?  I saw that movie, ""The Clipper Chip"" and {spoiler} everybody dies at the end."
crypto,2x4b7h,WRSaunders,2,Wed Feb 25 18:06:49 2015 UTC,"serious question: does he have any previous experience in security?   he didn't get to his current position by accident.   He does.  what he is trying to do is introduce a value toolkit   for ISR.  By opening the dialogue for a Backdoor framework, he is trying to get the wheels in motion for what will result in weak cryptography.   I will reiterate, he didn't get to become the chief of USCYBERCOM by accident."
crypto,2x4b7h,throwaway0xFF00,1 point,Fri Feb 27 03:02:44 2015 UTC,Maybe he will get fired when he fails miserably.  Make it illegal and only the enemies of the US will use unbreakable encryption which already exists - this is not a scenario which anyone wants but it's looming on the horizon.
crypto,2x4b7h,samsonx,2,Tue Mar 10 01:21:56 2015 UTC,"MR: So, I’m not gonna… I mean, the way you framed the question isn’t designed to elicit a response.   and he's right.  Seems like a pretty non-helpful 'interview'"
crypto,2x4b7h,MacroMeez,1 point,Wed Feb 25 23:11:32 2015 UTC,"Uh I like the angle at the beginning  Let's have 10 corporations say ""If you expect us to build in backdoors for the NSA, we are going to build them in for the chinese and russians aswell"""
crypto,2x4b7h,Didsota,1 point,Thu Feb 26 00:19:43 2015 UTC,Because I said so! Now go to your room!
crypto,2x4b7h,InfoSponger,6,Wed Feb 25 16:54:18 2015 UTC,And be quiet about it!  Im giving you a gag order!
crypto,2x6osv,ExtremePopcorn,3,Thu Feb 26 02:04:00 2015 UTC,"Admittedly, I've never made a study of fuzzy crypto, but from what I understand it's based mostly in information theory and coding theory.  Information theory is heavily related to statistics, and a lot of coding theory comes from linear algebra.  There's a book called ""Introduction to Cryptography with Coding Theory"" by Trappe and Washington that has all of the prerequisite number and information theory, and a really good intro to coding theory and some information on lattices that might be useful.  Best of luck!"
crypto,2x6osv,bren2010,2,Thu Feb 26 06:06:55 2015 UTC,You would probably want to build a background in number theory & galois field theory.
crypto,2x5qz7,BackflipJohnson,6,Wed Feb 25 21:46:39 2015 UTC,"Lattice cryptography could be an interesting area to look at. Several schemes use ""hard"" problems in (ideal) lattices, such as shortest vector and learning with errors. It could be useful to look at some of the fully homomorphic schemes that use them (BGV for instance)."
crypto,2x5qz7,0x616e746f6e,2,Thu Feb 26 00:23:03 2015 UTC,Post-quantum systems are becoming more and more relevant. Check out McEliece or Lattice crypto.
crypto,2x5qz7,schwami,2,Thu Feb 26 07:55:54 2015 UTC,"What level of thesis, and do you need original content?  RSA is pretty basic for an undergrad thesis unless you also cover the number field sieve."
crypto,2x5qz7,bitwiseshiftleft,1 point,Thu Feb 26 18:21:56 2015 UTC,"If you're interested in more than just public key systems, maybe you could try key derivation functions / password hashing. That's an active area of research, I believe."
crypto,2x5qz7,BaronNinja,0,Wed Feb 25 22:19:11 2015 UTC,I'd say Zero-Knowledge Proofs. That's some sexy math right there. Here's a good example: http://en.wikipedia.org/wiki/Yao%27s_Millionaires%27_Problem
crypto,2x5qz7,WannabeWingsuitPilot,1 point,Sun Mar 1 20:55:10 2015 UTC,"Yao's Millionaires' Problem:       Yao's Millionaires' problem is a secure multiparty communication problem which was introduced by Andrew Yao, a prominent computer scientist and computational theorist. The problem discusses two millionaires, Alice and Bob, who are interested in knowing which of them is richer without revealing their actual wealth.  This problem is analogous to a more general problem where there are two numbers  and  and the goal is to solve the inequality  without revealing the actual values of  and .  The Millionaires' Problem is an example of Secure multi-party computation, which is an important problem in cryptography and the solution of which is used in e-commerce and data mining. Commercial applications sometimes have to compare numbers which are confidential and whose security is important.     Interesting: Andrew Yao | Secure multi-party computation   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2x1t5h,johnmountain,11,Tue Feb 24 23:42:08 2015 UTC,I was disappointed the article ended before presenting me with alternatives
crypto,2x1t5h,skiguy0123,2,Wed Feb 25 12:52:13 2015 UTC,"Exactly! Come on hive-brain, what would a good alternative look like?"
crypto,2x1t5h,byteshifter,2,Wed Feb 25 13:16:43 2015 UTC,"Probably something alike signify: Modern crypto (i.e., ed25519) and minimal tweaking knobs to reduce the chance of fucking up."
crypto,2x1t5h,Creshal,12,Wed Feb 25 17:16:49 2015 UTC,"I don't fully agree with Moxie here.  The thing is, I agree with his sentiment: getting GPG -- and by extension, its PKI -- working in any meaningful way out of the box is enormously arcane for power users, to the point of where it doesn't make sense at all to anyone that doesn't have a basic Crypto I class or infosec certification under their belt.  The thing is that I've always seen GPG as the asymmetric encryption swiss-army knife, much like OpenSSL is for symmetric encryption. GPG is mostly primitively sound, ""1990s encryption"" or not. What isn't is how GPG is marketed and designed for ordinary people. I'm more apt to blame the interfaces that use GPG for messaging, not GPG itself, for its shortcomings."
crypto,2x1t5h,levoroxi,7,Tue Feb 24 23:56:13 2015 UTC,"gpg2 command has over 200 argument options. I always have a hard time selecting between symmetric and asymmetric encryption even after reading the manpage. I feel funny saying this, but OpenSSL is far more sane to use than gpg/gpg2 from experience and I'm a power user (i.e. I'll read the openssl sourcecode if there's functionality that I don't understand). In my opinion, they're both terrible in different ways and the available crypto software we have to work with is a sad state of affairs. Also OpenSSL is hardly a swiss-army knife for (a)symmetric crypto. Perhaps things might have changed in the last few months, but you can't even specify parameters to their built-in KDF when you want to (symmetrically) encrypt from the command-line interface."
crypto,2x1t5h,cunttard,2,Wed Feb 25 06:47:30 2015 UTC,"So far most of my usage of GPG has been fairly basic, so I apologize for not really understanding, but what sorts of things are you trying to do that is making things this difficult?"
crypto,2x1t5h,GrayCipher,1 point,Wed Feb 25 13:39:35 2015 UTC,"The thing is that I've always seen GPG as the asymmetric encryption swiss-army knife, much like OpenSSL is for symmetric encryption.   It's a swiss-army knife and an ""experimenting kit"". I'm not sure if it was even meant to be used in any actual setting or use-cases, but the enormous amount of settings indicates a very high level of experimentation."
crypto,2x1t5h,rflownn,7,Sat Feb 28 18:20:19 2015 UTC,"Edit: I've deleted this comment and put a new one in place......       With all the discussion about GPG I decided to have a look at the project. First thing I did was clone the git repo. I don't know if it's sitting on some guy's 56K modem but it took a few solid minutes longer than any repository I've ever cloned before. Then I ran autogen.sh.  These scripts are usually a dozen lines long, this one is a 12K shell script, with an accompanying autogen.rc - just to generate the autoconf environment. I ran it and, what do you know, it complains it needs a more recent version of autotools to build. It's odd that software with such a legacy base won't compile from trunk with latest tools shipping with RedHat, so let's move on.  I grabbed the latest stable download, 2.1.2. There's no direct download, you find a mirror, then until you find the tarball, then download it. Upon running ./configure, what would you know, but there are three separate libraries that it now tells me it's dependant on. No, I'm not talking about something common like zlib either. A notable example is libgpg-error, which appears to be a dedicated library for GPG's error handling. Which I'm expected to download, compile and install before trying to build GPG. I spent a few minutes hunting around for appropriate versions, downloading and trying to compile, before concluding I'd sunk an hour into evaluating a product I wasn't even close to getting to compile and threw in the towel.  For a group interested in contributions, they sure make it hard."
crypto,2x1t5h,disclosure5,8,Wed Feb 25 02:13:46 2015 UTC,"I don't understand why he attacks GPG in particular.  It is implementing the OpenPGP specification, which was designed to be backwards compatible with commercial PGP.  Some of this is valid criticism, but I disagree with his target.  As for forward secrecy, I don't think that is possible with a system that is agnostic of the underlying transport mechanism (and in particular, the other side is not required to respond at all -- one-way messages with no negotiation).  Can anyone correct/confirm for me on that?"
crypto,2x1t5h,molo1134,1 point,Wed Feb 25 04:09:18 2015 UTC,"What's the point of making a distinction between the OpenPGP spec and the multitude of software packages which implement the spec in almost the exact same near-unusable way?   As for forward secrecy, I don't think that is possible with a system that is agnostic of the underlying transport mechanism   OTR already does this, and works well over basically all the popular chat protocols."
crypto,2x1t5h,shroom_throwaway9722,7,Wed Feb 25 07:15:18 2015 UTC,"Yes, I know OTR does forward secrecy, but chat protocols are two-way and near-real-time.  The model of PGP isn't.  I don't think you could do OTR with only a single one-way message.  The point of distinguishing between GPG and OpenPGP is that the issues he has are structural and all flow from PGP.  His complaint about GPG is really a complaint about PGP.  So GPG shouldn't be his target.  Please describe how GPG might change its implementation to be more 'usable' without breaking the spec."
crypto,2x1t5h,molo1134,2,Wed Feb 25 07:25:17 2015 UTC,"Yes, I know OTR does forward secrecy, but chat protocols are two-way and near-real-time.  The model of PGP isn't.  I don't think you could do OTR with only a single one-way message.   Textsecure somewhat cheats to perform OTR. There is a third party server which basically stores the parameters needed for a client to set up an OTR conversation without any input from the destination user. Hypothetically it might be possible to build something similar to this for email. However, you then have the problem of needing that server to get the OTR sessions going. Additionally, it involves trusting the third-party server to some extent."
crypto,2x1t5h,TyIzaeL,3,Wed Feb 25 16:03:47 2015 UTC,"Interesting. This sounds like a keyserver, but it has implicit trust?  I imagine it would be a likely target of mitm attacks, or key replacement attacks. I will have to research this further. Thank you."
crypto,2x1t5h,molo1134,2,Wed Feb 25 17:00:12 2015 UTC,"The bit I was referring to is called Axolotl ratcheting. You can read about TextSecure's Axolotl implementation as well as the Axolotl wiki. I initially learned about it by watching CloudFlare meet-up: Trevor Perrin on end-to-end secure messages , which is probably a bit more accessible for the layman (such as myself) than the linked wiki pages."
crypto,2x1t5h,TyIzaeL,1 point,Wed Feb 25 17:29:22 2015 UTC,Thank you!  I appreciate the info and links.
crypto,2x1t5h,molo1134,2,Wed Feb 25 18:52:23 2015 UTC,"I don't think you could do OTR with only a single one-way message.   You can't do PGP without a single one-way message either. The initial key exchange message is just externalized to an out-of-band channel or a third party (keyserver pool).   The point of distinguishing between GPG and OpenPGP is that the issues he has are structural and all flow from PGP. His complaint about GPG is really a complaint about PGP. So GPG shouldn't be his target.   Both GPG and PGP are clunky and unusable in similar ways, and that's because the spec requires that a lot of internal functions (such as key generation, management, and exchanged) be crudely exposed to the user. This is why all implementations of OpenPGP are a colossal pain to use.   Please describe how GPG might change its implementation to be more 'usable' without breaking the spec.   Why is the spec sacred? It's outdated and not useful for how most people communicate today. The goal is to make secure communication software that's highly usable and as transparent as possible so that anyone can use it.  In order to move one we have to either update or abandon the existing spec. We can keep bolting stuff on to ancient software or we can move on..."
crypto,2x1t5h,shroom_throwaway9722,3,Wed Feb 25 21:03:05 2015 UTC,Was Moxie MIA for a while?
crypto,2x1t5h,elfishwebbly,10,Wed Feb 25 05:00:01 2015 UTC,"I disagree with the constant apologetics on behalf of gpg and the typical calls for ""better interfaces."" The CLI is a good interface. Enigmail is a good add-on. If you can't stand them at all, and have to have your webdev fix, keybase.io can serve as a decent replacement. The ""90s cruft"" works. The web of trust, whether built into the PKI itself or on separate infrastructure, presents a superior alternative to centralized authority mechanisms when actual trust is required.  Fundamentally, you need to have a basic understanding of what you're doing. No amount of slick UI/UX work can save stupidity from itself."
crypto,2x1t5h,aspensmonster,11,Wed Feb 25 02:25:08 2015 UTC,"As much as I like PGP, the WOT has its flaws.  It conflates knowing someone's key and identity with trusting them to verify a third party's key and identity.  I'm not sure there is a better solution (certainly not centralized CAs), but its not perfect."
crypto,2x1t5h,molo1134,3,Wed Feb 25 04:03:00 2015 UTC,"Ultimately, though, isn't it the user that is the finally arbiter of trust?  At any point I can determine that I don't trust a particular key.  I don't think giving trust just because the screen says is a wise.  I think that information there for the user to use his/her judgement."
crypto,2x1t5h,d4rch0n,5,Wed Feb 25 17:28:13 2015 UTC,"Fundamentally, you need to have a basic understanding of what you're doing   This is the most important part.  Sure, you can encrypt with your private key, but lots of people don't know you shouldn't give out your private key. Or that, you shouldn't let people generate a private key for you.  I've known customer support people (with basic to intermediate technical skill) calling software engineers out from other companies, trying to persuade them that they should generate their ssh key themselves, that that's the whole point of doing what they're doing.  If you don't understand the basics, you are going to screw something up, and screwing any little thing up in security and crypto will compromise the scheme."
crypto,2x1t5h,SAI_Peregrinus,1 point,Wed Feb 25 05:45:38 2015 UTC,One of the goals of security is to preserve availability. If the interface is difficult to use then it's effectively a DOS attack on the users.   There's also the fact that the current system makes it easy to screw up. While you can't get away from needing to have a basic understanding you can make it much harder to mess up due to carelessness.
crypto,2x1t5h,wrez,2,Wed Feb 25 12:58:13 2015 UTC,"Here's the thing.  Protecting yourself with a pistol requires training.  Protecting valuable assets requires a barrier that is not so easy to get into (memorization of a combination, sequence of steps, identity verification, etc).  In comparison, I don't find using gpg all that hard but for the sake of argument why should protecting critical data be so easy that an untrained monkey can use it?"
crypto,2x1t5h,bdesham,2,Wed Feb 25 17:14:06 2015 UTC,"Moxie Marlinspike has a past history of attacking things he doesn't like, and then coming up with non-standard proprietary products connected to a business of his.  I'm expecting him to do the same with GPG.  GPG has a number of benefits, and is the de facto method of secure communications for the security community.  Unlike x509 + SMIME, it works quite well for conversations with security professionals and being based on a Web-of-Trust rather than x509 hierarchy, has some particular strengths."
crypto,2x1t5h,bascule,2,Thu Feb 26 16:32:23 2015 UTC,"It's sad to visit the analysis of the strong set linked in the article and to read phrases like ""the average distance between the points is shrinking!"" and ""the average... number of signatures per key is rising"", only to look at the accompanying graphs and realize that these statements haven't been true for three years."
crypto,2x1t5h,lasermike026,4,Thu Feb 26 20:32:50 2015 UTC,"Moxie is totally right. For what it's worth, here's my Twitter word cloud:  https://pbs.twimg.com/media/B9RjlbPCIAAztO4.jpg:large  GPG is a tool I find difficult to use in a day-to-day capacity as a security professional. This isn't for lack of experience or unfamiliarity... I'm a GPG power user. GPG is just generally not the thing I want to spend inordinate amounts of time working with, and is absolutely unsuitable for Johnny.  You can't bolt-on good design, and the GPG user experience is poorly designed."
crypto,2x1t5h,wrez,2,Wed Feb 25 04:35:28 2015 UTC,Agreed.  The average user can no cope with gpg.  I use gpg and I like it but I'm a linux admin.  People need encryption to protect there private data and they need software that does all the heavy lifting for them.  Even if users encryption is not optimal it might just be good enough.  I don't see GPG going away.  I would like to see a tool that anyone can use.  Truecrypt has much of the design qualities that users need to experience in a new encryption tool.
crypto,2x1t5h,bascule,1 point,Wed Feb 25 13:06:07 2015 UTC,It sounds like your complaint is with the UI rather than actually the GPG specification.  Specification != tool
crypto,2x1t5h,rflownn,1 point,Thu Feb 26 16:35:24 2015 UTC,"Here in the 21st century I like forward secrecy which I get from TLS, OTR, and SSH (not to mention Moxie/Trevor Perrin's Axolotl ratchet which was used in TextSecure and is now integrated into WhatsApp), but not from GPG."
crypto,2x1t5h,ryanknapper,1 point,Sat Feb 28 04:43:12 2015 UTC,The only reason I don't like GPG in particular is the same reason as to my attitudes in regards to the use of crypto... in that the ideal is that crypto should be unnecessary.
crypto,2x1t5h,bdesham,1 point,Sat Feb 28 18:22:01 2015 UTC,"What we need is an Apple-style approach and to implement a best-practice set of defaults.  Here's the best algorithm, here's the best way to handle key-exchanges…"
crypto,2x28jm,ageisp0lis,2,Wed Feb 25 01:42:56 2015 UTC,because their hard drives have been pwned?
crypto,2x28jm,conradsymes,2,Wed Feb 25 02:39:16 2015 UTC,"Because it would require change, and the email servers administrators hate change. Email delivery hasn't barely changed in 20 years and STARTTLS is a (relatively) big change - even though they only have 3 configuration lines to change.  Another reason is that STARTTLS is a very poor protection as it is used now. Any certificate would be accepted (including self-signed). Certificates signed by CAs are better but not the norm. Last but certainly not least, it's trivial when hijacking a connection to pretend the remote server doesn't support STARTTLS and downgrade to plaintext. NSA can do this today with Quantum insert.  There are no common mechanism to publish the level of security expected from email servers (such as a fingerprint of certificates in DNS, or mecanisms like DKIM), so everyone is left to its own when having to decide if an email should be delivered when a security exception occurs. Mail admins hate change so they take the least secure way.  (I don't hate mail admins. Just imagine if guys at gmail at to take security decision for every STARTTLS connection that's breaking, self-signed certificate that changes or sudden mail server change)."
crypto,2x28jm,aris_ada,2,Wed Feb 25 10:54:07 2015 UTC,"Largely, you're correct, however:  First, there have been massive increases in starttls adoption.  At the time of the snowden leaks, only Gmail, yahoo and MySpace (really) supported it out of the top 30 us webmail and top 30 ISPs.  Now virtually all of them do.  Second, yes STARTTLS is subject to trivial attack by an active attacker.  However, mounting a mitm attack on mail servers is a different order of difficulty from mitmproxy in a coffee house.  Clearly it is a risk to be concerned with.  In some regulated industries (financial/medical/legal) it is common to enforce mandatory starttls for established business partnerships.  Certificate validation is another issue.  On the one hand, again encryption alone defeats a passive attacker, and an active attacker can force you down to plain text.  EV certs don't help because they don't surface ui to mail (I guess a spam filter could take validation into consideration).  STARTTLS would be a good use for ACME dv registration, I'm not sure if the EFF is considering that."
crypto,2x5xw3,p01arst0rm,10,Wed Feb 25 22:35:58 2015 UTC,"Post it here. The crypto world largely goes by https://en.wikipedia.org/wiki/Kerckhoffs%27s_principle -- if it's any good, publishing the algorithm won't make it less secure."
crypto,2x5xw3,zeroXten,1 point,Wed Feb 25 23:36:25 2015 UTC,"It doesnt actually use a single algorythm, it only follows a method that changes relative to the data."
crypto,2x5xw3,zeroXten,4,Thu Feb 26 07:32:05 2015 UTC,"If you can express the idea, then its an algorithm."
crypto,2x5xw3,zeroXten,2,Thu Feb 26 11:12:58 2015 UTC,"oh fair enough, here goes:     -- key -- 434xfx343x945x047x088x647x055x402x227x532x385x737x293x104x093x912x163x815x749x242x175x054x479x068x244x438x349x839x654x183x528x341x822x42x872   character conversion table a - 343 b - 945 c - 047 d - 088 e - 647 f - 055 g - 402 h - 227 i - 532 j - 385 k - 737 l - 293 m - 104 n - 093 o - 912 p - 163 q - 815 r - 749 s - 242 t - 175 u - 054 v - 479 w - 068 x - 244 v - 438 w - 349 x - 839 y - 654 z - 183 _ - 528 ! = 341 ? = 822 ( = 042  ) = 872  prime key - 434 prime fact. - 31 , 7 , 2     3.-----------------------------------------------   convert char using charater table factorise key order factors by size -- largest - smallest  ALPHA CHAR multiply by all factors, except last. if divisible by last factor, divide e.g.{  54 * 31 * 7 = 11718 11718 divisible by 2          = 5859x }                 NUMERIC CHAR multiply number by every other factor (e.g. 31 , 2)     a = 148862x   -----------------------------------------------   multiply pi by the resulting crypto number (e.g. 148862)  467663.7656  take int unit of number (3) and offset table values by that amount  new character conversion table a - 343 -> 822 b - 945 -> 042 c - 047 -> 872 d - 088 -> 343 e - 647 -> 945 f - 055 -> 047 g - 402 -> 088 h - 227 -> 647 i - 532 -> 055 j - 385 -> 402 k - 737 -> 227 l - 293 -> 532 m - 104 -> 385 n - 093 -> 737 o - 912 -> 293 p - 163 -> 104 q - 815 -> 093 r - 749 -> 912 s - 242 -> 163 t - 175 -> 815 u - 054 -> 749 v - 479 -> 242 w - 068 -> 175 x - 244 -> 054 v - 438 -> 479 w - 349 -> 068 x - 839 -> 244 y - 654 -> 438 z - 183 -> 349 _ - 528 -> 839 ! = 341 -> 654 ? = 822 -> 183 ( = 042 -> 528  ) = 872 -> 341  repeat steps 3. and 4. using the new offset cct each time   buffer data sectors - alpha charactors with x,  shifted alpha charactors with xx, numeric characters with xxx     3   +  6 +  4  +  2 148862x4557x70959x353710x62xxx434xxx651xxx  5.---------------------------------------------- convert data values to hex    148862x4557x70959x353710x62xxx434xxx651xxx  2457Ex11CDx1152Fx565AEx3Exxx1B2xxx28Bxxx  6.-----------------------------------------------   offset the data values by the prime factors -- count 31 char, switch with next 31 char, -- count 7 char, switch with next 7 char -- count 2 char, switch with next 2 char     2457Ex64212x4FAExDFC8x3Exx1B2xx28Bxx 7E454xx6Bx28Exx2C8DF12x2FAx4Exx3B2x1    -- FINAL ENCRYPTED DATA --  7E454xx6Bx28Exx2C8DF12x2FAx4Exx3B2x1"
crypto,2x5xw3,zeroXten,6,Thu Feb 26 22:58:11 2015 UTC,I'm confused.    Is the key in (1) already converted?  Is it fixed in some way or can the user choose one and you've just provided an example?  What with all the x's ? Factorise the key? PI?   I don't suppose you can give an overview of what its actually doing. To me it just looks like a massive amount of obscurity.
crypto,2x5xw3,zeroXten,3,Fri Feb 27 12:16:44 2015 UTC,"Also, who said it was good?"
crypto,2x5xw3,zeroXten,1 point,Fri Feb 27 12:17:48 2015 UTC,"The key in 1 is the key for the prime key followed by the character table values  the ""x"" represents a new data block, as all the data is numbers before the hex conversion, there is no way of telling where a data block ends and starts without them. they also classify what type of data it is, otherwise all the data would decrypt to numbers. they are all x so that when the data is encrypted the decryptor has no way of knowing if the offset was corrected, making it impossible to correct the offset without the prime key  i used pi as it is an irrational number, increacing the randomness factorise the key means take the key value - the one before xfx - and turn it into its prime factors, 31 , 7 and 2  the data is not fixed in any way. changing the key OR changing any of the data DRAMATICALLY changes the encrypted data."
crypto,2x5xw3,ButteryCat,1 point,Fri Feb 27 13:13:16 2015 UTC,"If you're serious about this, you should code a little proof-of-concept tool that does the encryption and decryption. Use something like python."
crypto,2x5xw3,ChantOfVenice,1 point,Fri Feb 27 13:23:51 2015 UTC,I already have
crypto,2x5xw3,zeroXten,1 point,Fri Feb 27 14:04:29 2015 UTC,Cool. Link?
crypto,2x5xw3,zeroXten,1 point,Fri Feb 27 14:09:43 2015 UTC,Not finished yet XD
crypto,2x5xw3,ChantOfVenice,1 point,Fri Feb 27 14:14:39 2015 UTC,nearly finished the script.. may be done by tuesday
crypto,2wwt8h,johnmountain,3,Mon Feb 23 20:55:36 2015 UTC,I wonder if the Curve25519 ciphersuites will ever get through committee.
crypto,2wwt8h,bitwiseshiftleft,3,Tue Feb 24 07:04:19 2015 UTC,Still fighting it's way through CFRG :-(
crypto,2wwt8h,kingkilr,-1,Tue Feb 24 19:17:18 2015 UTC,Seems like the infiltrated NSA agent there is doing his best to stop them.
crypto,2wwt8h,kingkilr,2,Tue Feb 24 22:31:29 2015 UTC,"He hasn't posted to the list in weeks, if not longer."
crypto,2wwt8h,floodyberry,2,Tue Feb 24 22:42:47 2015 UTC,Not if they can help it!
crypto,2wwt8h,__mp,2,Tue Feb 24 18:36:23 2015 UTC,I wonder when we get certificates with the Ed25519 cipher suite. This would solve a lot of my problems ;).
crypto,2wwt8h,p1mrx,1 point,Tue Feb 24 18:59:57 2015 UTC,"When you see a string like TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256, what is SHA256 actually still doing?"
crypto,2wwt8h,lya6ns,7,Tue Feb 24 07:50:49 2015 UTC,"Poly1305 is a MAC that can only be used after a shared secret is established, SHA256 is used before that point."
crypto,2wwt8h,GahMatar,2,Tue Feb 24 08:06:24 2015 UTC,It's used to hash the ephemeral key before being signed.  IIRC the key mangling part that creates the master shared secret uses fixed algorithms.
crypto,2wwt8h,cwmma,3,Tue Feb 24 12:19:45 2015 UTC,"If the encryption mode is authenticated like here, SHA256 is used for the Pseudo-Random Function (PRF) that is used to turn the shared secret into the required encryption and possibly MAC keys."
crypto,2wwt8h,floodyberry,-4,Tue Feb 24 18:56:16 2015 UTC,With ARM cores including AES instructions it seems kinda foolish to use CHACHA for ciphering ...  Just sayin'
crypto,2wwt8h,kingkilr,3,Tue Feb 24 12:20:04 2015 UTC,Yeah but it doesn't have one for GCM and that is a doozy in software
crypto,2wwt8h,floodyberry,2,Tue Feb 24 21:32:06 2015 UTC,"Do you know of any ARMv8 crypto benchmarks? I can only find http://www.anandtech.com/show/7335/the-iphone-5s-review/4 which, if I'm doing the math correctly, is ~1.5cpb for AES-128-ECB? (1.3 ghz / 846mb)  I'm still quite sure the difference between accelerated AES and Chacha20 will be much smaller (or possibly negative if you go down to Chacha8) than the difference between Chacha20 and naive AES."
crypto,2wwt8h,floodyberry,2,Tue Feb 24 18:35:56 2015 UTC,Do you know off hand if ARM has any equivalent of PCLMULQDQ? Without that GCM is going to be slower and have timing side channels.
crypto,2wwt8h,Natanael_L,4,Tue Feb 24 19:18:33 2015 UTC,https://patches.linaro.org/27161/  PMULL/PMULL2
crypto,2wwt8h,xiongchiamiov,-1,Tue Feb 24 19:36:42 2015 UTC,I would expect probably at best it would be 1 cycle per round.  So AES-128 would take 10 cycles or 12 bits per cycle.  Most AES SW implementations clock in around 3-7 cycles/bit.  So this will be an order of magnitude faster (not to mention timing invariant).  I seriously doubt ChaCha in SW can compete with it.
crypto,2wvw8z,nickdesaulniers,4,Mon Feb 23 16:55:33 2015 UTC,"For God's sake, it's 2015, use an authenticated encryption mode or bolt on authentication, and use a KDF not plain SHA256, and use ECDH over a suitable curve (like 25519) instead of plain old (slow) DH.  At least you used modp group 14 so it's a 2048-bit group."
crypto,2wvw8z,GahMatar,1 point,Mon Feb 23 20:35:14 2015 UTC,"Yes good, I was wondering if a KDF was preferred over a hash.  I also knew ECDH is preferred over DH, but Node.js' crypto library doesn't support it out of the box.  These are valid points that I could have made (still can make via edits).  What's a good default number of iterations and digest to use?  Would the communicating parties have to share their salt?  http://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback"
crypto,2wvw8z,GahMatar,3,Mon Feb 23 20:43:06 2015 UTC,"PBKDF2 is meant for deriving keys from passwords so it needs to be computationally hard to prevent brute forcing / dictionary attack on weak password.  D-H shared secrets don't really have that problem. HKDF (http://tools.ietf.org/html/rfc5869) is an example and you can use a constant for the salt (a different constant/salt per key you need, like one for CTR mode cipher and one for an HMAC authentication tag, etc.)"
crypto,2wvw8z,rflownn,1 point,Mon Feb 23 21:29:47 2015 UTC,"There's nothing wrong with DH. Using some crypto just because it's ""new"" is not the best reason. Most people that worry about DH vs ECDH right now are mostly service operators who have to handle millions to billions of connections.  Because DH is computationally much more expensive to compute versus ECDH, it can be preferable in some cases."
crypto,2wvw8z,amarigatachi,0,Sun Mar 1 03:31:02 2015 UTC,"Sorry, link is inoperative, even if correct."
crypto,2wvw8z,amarigatachi,2,Mon Feb 23 17:56:20 2015 UTC,"which link? to the article? blog is hosted on github pages, which hasn't been having any issues: https://status.github.com/"
crypto,2wvw8z,amarigatachi,1 point,Mon Feb 23 18:09:04 2015 UTC,"Server not found   Pale Moon can't find the server at nickdesaulniers.github.io.  Check the address for typing errors such as ww.example.com instead of www.example.com If you are unable to load any pages, check your computer's network connection. If your computer or network is protected by a firewall or proxy, make sure that Pale Moon is permitted to access the Web."
crypto,2wvw8z,Katana__,2,Mon Feb 23 18:23:31 2015 UTC,Are you not able to curl it from the command line?  Are you able to view it in any other browser?  Are you on a network that might be blocking access to *.github.io?  Can you view it while connected to TOR?
crypto,2wvfci,diafygi,1 point,Mon Feb 23 14:27:30 2015 UTC,"Related, a library for doing WebCrypto and using JOSE formats in browsers: https://github.com/square/js-jose"
crypto,2wuztm,nivenkos,1 point,Mon Feb 23 10:57:44 2015 UTC,"Block size is pretty standard at 128bits, I don't think there is any need to overcomplicate this I don't understand this question, the name of the challenge is clearly ""ECB cut-and-paste"" & 4. I don't really follow you there, as you can basically put whatever you want in the email, it's pretty easy to put a pattern you'll be able to recognize in the ciphertext as it's ECB and you know the exact format of how the oracle is doing this. And you know the length of your block & alignement, so you have the padding.   Regarding the 'valid' email address (only printable char?) & length constraint, I did it with just 30 chars but imho you need non-printable char for the padding anyway."
crypto,2wuztm,Dillinur,1 point,Mon Feb 23 13:28:59 2015 UTC,"Yeah, but my point is in practice you don't have that information. (Although the block size is very standard so perhaps we can assume that).  Yeah, with allowing non-printable chars then it is relatively simple. But in practice this might be possible and I was wondering if there are any tricks to get around that.  Also the changing (and changing length) userid each time we call the oracle, makes this a bit of a pain."
crypto,2wuztm,Dillinur,1 point,Mon Feb 23 13:42:15 2015 UTC,"Without non-printable chars, I've got a hard time seeing how you can realize the padding :( it basically has to be chars between 0x01 and 0x0F."
crypto,2wuztm,derpyou,1 point,Mon Feb 23 13:53:40 2015 UTC,"I think you're overthinking it.  Ensure that you're following the email=blah&uid=10&role=user format.  Also, consider that any key=value where k is repeated, will be overwritten with the last occurrence of k.  All you control is the input email address; you do not have to validate that the input is a proper email address.  You can manipulate the edge of where your 16 byte blocks are..."
crypto,2wuztm,derpyou,1 point,Mon Feb 23 17:30:23 2015 UTC,"Yeah, in the case where we can enter an arbitrary input and the uid is constant then the problem is completely trivial.  But I wanted to approach it at least somewhat realistically.  For example, it's still possible with the changing uid, just a lot more work - but I think this idea is used in the next challenge with the two random strings concatenated to the plaintext, which I'm still not sure how to solve even theoretically."
crypto,2wuztm,0x616e746f6e,1 point,Mon Feb 23 17:32:43 2015 UTC,"If you want to do it properly, you can come up with a (valid) email address which includes the target role and padding, and just swap blocks around.  Ninja edit: valid in the sense that you can still use any printable character, but metacharacters are snarfed/escaped."
crypto,2wtcpw,fabrizziop,2,Mon Feb 23 00:09:02 2015 UTC,Is there a reason you're using mac-then-encrypt and not encrypt-then-mac?
crypto,2wtcpw,zeroXten,1 point,Tue Feb 24 12:29:06 2015 UTC,"Not really. Previously I just hashed the file and appended the encrypted hash (lol, before I did the matasano challenge). But as I use a stream cipher, if the attacker fully knows the plaintext, they could replace it (and the hash, too), and the person decrypting the file wouldn't notice. The quick fix was to replace the simple hash with HMAC.  So I'll change that. Thanks for the feedback."
crypto,2wtcpw,amtal-rule,1 point,Tue Feb 24 18:40:44 2015 UTC,https://github.com/fabrizziop/crypto-plus-steg/blob/master/rel1-1-0.py  I fixed it. Thanks.
crypto,2ww6aj,johnmountain,8,Mon Feb 23 18:11:50 2015 UTC,This article is mostly BS.  First thing the author does is own the machine with an unrelated root exploit.  Once you have root game is over.
crypto,2ww6aj,ehempel,7,Mon Feb 23 18:33:16 2015 UTC,"This is not a vulnerability nor an important finding. When a hacker have access to your device or worse hacker does have a root access!! you're already insecure and lost the game. Telegram or any other security app is not responsible for that. About having plain text in memory...that's the way app shows user the message in UI! Best I would accept is why the data in .db file wasn't encrypted and that's all! Not more. Even about .db file, actually no one is supposed to read that file off of your phone, but still it would've been better to have that encrypted."
crypto,2ww6aj,CodeAndSec,2,Mon Feb 23 18:45:04 2015 UTC,"I like ""hacks"" with steps to reproduce like the following:  1) Hack the entire gibson and get root / admin  2) ... this could be literally anything ...  3) See!? The app mentioned in #2 is utter bullshit!"
crypto,2ww6aj,skrowl,2,Thu Feb 26 15:38:49 2015 UTC,"Isn't this actually issue of Java itself that it has immutable strings? It's basically impossible to delete from memory.  Also, I found similar vulnerabilities in other (native) apps. If an app uses some GUI toolkit, there is very high chance that copy of entered passwords and other strings are still left in memory even if the underlying native code deletes some of the copies. GUI toolkits weren't designed for this kind of thing."
crypto,2ww6aj,hanomalous,2,Mon Feb 23 18:30:30 2015 UTC,"Utter, utter bullshit.  If your device is physically compromised, or affected by any kind of malware that can carry out root actions, EVERY encryption technique in the world is useless."
crypto,2ww6aj,daveime,1 point,Mon Feb 23 19:17:04 2015 UTC,"How I ""Hacked"" Telegram's Encryption"
crypto,2ws02g,mikesp20,4,Sun Feb 22 17:50:00 2015 UTC,"The way I was taught crypto was to try implementing the algorithms. Instead of learning from books, try reading the papers and understanding the mathematics behind it. A good beginner algorithm is RSA. The creators wrote a paper (http://people.csail.mit.edu/rivest/Rsapaper.pdf) about it. It's a very readable paper and the mathematics is not that complex. After reading it, you can try to implement it using your favorite language."
crypto,2ws02g,Klairvoyant,3,Sun Feb 22 19:55:29 2015 UTC,Nobody here can make a serious recommendation without knowing why you want to read any of these books.
crypto,2ws02g,ForestC,2,Sun Feb 22 18:12:11 2015 UTC,I'm a CS enthusiast and I wanto to start learning cryptography.
crypto,2ws02g,IamFuzzles,2,Sun Feb 22 18:18:02 2015 UTC,"Of these, I've only read The Code Book by Simon Singh, but it was one of the first books on cryptography I read, and it's what really got me into it. It doesn't go too in depth into any techniques or algorithms in particular, so if that's what you're looking for, it's not for you. But it does give a brief overview into the history of cryptography. It's a quick read, and will give you a decent look at what's out there so you can see what might interest you."
crypto,2ws02g,ForestC,2,Sun Feb 22 18:24:44 2015 UTC,"I second ""The Code Book"" for background. If you know (or are willing to learn) C, Bruce Schneier's book Applied Cryptography is the ""K&R"" of modern cryptography. It is a bit dated though (pre AES), and is absolutely not light reading. I also recommend these exercises."
crypto,2ws02g,tom-md,1 point,Sun Feb 22 18:43:13 2015 UTC,In that case try the Handbook of Applied Cryptography.
crypto,2ws02g,cunttard,1 point,Sun Feb 22 20:31:04 2015 UTC,"Mate, are you seriously suggesting HAC as an introductory text? It is like suggesting The Art of Computer Programmer as introductory literature to a newcomer CS student."
crypto,2ws02g,cjg_,3,Sun Feb 22 22:15:05 2015 UTC,"Do the Matasano Crypto challenges, http://cryptopals.com/ and learn as you go."
crypto,2ws02g,cunttard,2,Sun Feb 22 21:40:39 2015 UTC,"Good beginner/intermediate texts on cryptography/cryptology:   From a mathematical perspective: An Introduction to Mathematical Cryptography by Silverman et al. From a provable security perspective (probably the most important to both academia and industry): Introduction to Modern Cryptography (new 2nd ed.) by Katz & Lindell Serge Vaudenay's A Classical Introduction to Cryptography (it's an in between of the above 2 books). Christoph Paar's Understanding Cryptography with a video course.   Lastly, a really fantastic all around book on network security (including crypto) would be: Network Security 2nd Ed. by Kaufman and Perlman. It is a little old though but still relevant. Also has great analysis of real world protocols such as IPsec (IKE, ISAKMP), Kerberos, SSL/TLS, S/MIME, etc.  I would actually recommend starting from the last text by Perlman & Kaufman and then selecting from the above 4 books.  The above was copy/pasted from on a similar thread."
crypto,2ws02g,rflownn,1 point,Mon Feb 23 04:00:45 2015 UTC,"These are good for introduction into cryptography: https://www.nsa.gov/public_info/declass/military_cryptanalysis.shtml  Try book one at least to make sure professional level cryptography and cryptography itself is what you think it is.  edit: If I could understand cryptography all over again, I'd start with at least book one before considering anything else."
crypto,2ws02g,DaggerHashimoto,1 point,Sun Feb 22 21:34:10 2015 UTC,here you go:  http://www.amazon.com/Cryptonomicon-Neal-Stephenson/dp/0060512806/ref=sr_1_1?ie=UTF8&qid=1424750504&sr=8-1&keywords=cryptonomicon
crypto,2wo0cp,nivenkos,3,Sat Feb 21 16:35:41 2015 UTC,"If the keylength is k, then every k-th character is encrypted with the same value. Because of this, if you have a long piece of text and you take every n-th character, where n is a multiple of k, you expect the collision count to be higher than with other values. By taking the Hamming distance you are essentially checking the autocorrelation value for every alphabet (j % k, j % k + 1, j % k + 2, ... j % k + k - 1)."
crypto,2wo0cp,mrschyte,3,Sat Feb 21 17:35:49 2015 UTC,"I had the same question as you, and you are right. It's because of ascii.  This wouldn't work at all if we were encrypting a non-regular stream. That is, we are working on english, and the english alphabet is represented by a narrow range. If we were encrypting a random bit sequence this hamming distance trick would not work at all!"
crypto,2wo0cp,Ahhmyface,2,Sun Feb 22 00:22:16 2015 UTC,This link on crypto stackexchange has a very good explanation.
crypto,2we6c7,Saicotic,8,Thu Feb 19 03:52:01 2015 UTC,"Nice, glad to see things are still happening. The new plan B makes sense."
crypto,2we6c7,zeroXten,0,Thu Feb 19 09:11:59 2015 UTC,"Still, WTF happened to TrueCrypt? It's so damn fishy, especially that they encouraged people to change to an MS proprietary solution that only works in MS and is almost certainly compromised."
crypto,2we6c7,betamos,4,Thu Feb 19 11:55:28 2015 UTC,almost certainly compromised   Oh really?  I have seen no evidence of this.
crypto,2we6c7,xJoe3x,2,Thu Feb 19 17:08:56 2015 UTC,pretty safe to assume though.
crypto,2we6c7,aliceandbob,2,Thu Feb 19 17:37:01 2015 UTC,"If you do that you're basically saying you can't trust anything running on your PC because the OS, the hypervisor, even BIOS  is compromised because they're all coming from the same company."
crypto,2we6c7,newfor2015,0,Fri Feb 20 19:19:15 2015 UTC,"Yea, pretty much. That's why open hardware is such an important path forward. If all hardware is proprietary you have no baseline to establish what is in fact secure."
crypto,2we6c7,aliceandbob,2,Fri Feb 20 19:54:16 2015 UTC,"I would not say so.    It is a widely used product that has gone through 3rd party review and testing, plus no one has found anything like that.  Nothing suggesting it is compromised and I am inclined to agree."
crypto,2we6c7,xJoe3x,0,Thu Feb 19 17:49:09 2015 UTC,"I don't know of many cases where passwords are demanded, so you can say the same thing about most encryption products.   So unless you want to throw out most other products on that basis (I don't) this is really not compelling."
crypto,2we6c7,xJoe3x,1 point,Thu Feb 19 22:30:36 2015 UTC,"Who knows. If you don't trust the OS, you're buggered anyway. At least BitLocker is known, well supported, and sort of free (assuming you've got the right Windows version). Linux users do have open source alternatives.  But truecrypt was a really good tool (I used to use it and my in-laws used it too) and hopefully one of the replacements will prove themselves."
crypto,2we6c7,zeroXten,1 point,Thu Feb 19 23:16:51 2015 UTC,"I still use it, I have all the original installs from years ago."
crypto,2we6c7,samsonx,1 point,Thu Feb 19 12:08:28 2015 UTC,If you don't trust the OS   My understanding is with truecrypt you don't need to trust (a) the OS or (b) the underlying harddrive firmware (which has been under scrutiny for recent malware findings). This is under the premise of a fully bootable truecrypt container.
crypto,2we6c7,cunttard,2,Fri Feb 20 00:31:38 2015 UTC,That is not true.  You normally provision truecrypt on the OS.  If not using it as an FDE you decrypt while running the OS.  If not the keys are in RAM while the machine is running.  Those are just a few things. If you think the OS is compromised it absolutely could compromised your encryption solution.
crypto,2we6c7,xJoe3x,1 point,Fri Feb 20 09:58:06 2015 UTC,"First I was discussing under the premise of the TrueCrypt bootloader (I've never used it myself).  Perhaps someone can enlighten me, is Windows agnostic to the fact that TrueCrypt is running and encrypting/decrypting reads/writes to the system drive, or is there some glue that Windows aware of TrueCrypt and must load necessary drivers/encryption algorithms/etc. in order to function? If Windows is agnostic then the OS is not a threat in this specific circumstance because the encryption mechanism and drive is completely separate to the OS, otherwise I would otherwise concede your point."
crypto,2we6c7,cunttard,2,Fri Feb 20 17:09:29 2015 UTC,"I think truecrypt may call on the platform or the OS for certain things, maybe it was the rbg?, but I don't remember what specifically.    Other than that windows would have no effect if you assume windows is not compromised.   However if windows was evil, it could certainly be able to extract keys from volatile memory, undermine provisioning, compromise your data during operation, etc.  The only case where you might be able to use a compromised OS and rely on an FDE to protect you would be and FDE that is not provisioned on the OS and has h integrity checking of all plaintext non-volatile memory and the device would have to have no network connectivity or connections to other non-volatile memory that is not protected by the FDE.  That is a very limited scenario and not very useful.  You can probably layer some other security measures to mitigate the risk of the OS extracting keys (like self encrypting drives) or sending plaintext data over the network to external sources.  But really you really need to have some level of trust in the OS."
crypto,2we6c7,xJoe3x,1 point,Sat Feb 21 01:14:21 2015 UTC,"There's a reason that the plausible deniability instructions for FDE are so specific - the OS can give away any of your data it has access to, as long as there's an escape vector for that data.  If you are going to seal ALL data leaks (true plausible deniability) there is a quite complex set of steps to go through. You create a Windows system with absolutely no escape vector for the data, and only then can you access your hidden-encrypted data. If there is ever an escape vector created, then your system and all your data is considered compromised for purposes of plausible deniability."
crypto,2we6c7,nemoxnine,2,Sat Feb 21 01:35:01 2015 UTC,"I agree, that is difficult to maintain while still maintaining usefulness."
crypto,2we6c7,xJoe3x,1 point,Tue Mar 10 20:31:56 2015 UTC,"For some things, actually, I think it's quite useful.  Let's say you are a whistle-blower. You have a huge cache of documents, you want to protect their data but also protect the fact that you have them. An FDE without escape vectors (pre-loaded with software to process the documents) is a good environment to work on the data before you hand it over to another party.  You could even side-load new programs onto your main FDE OS by downloading them on a separate temporary FDE OS, mounting the temporary FDE from your main FDE OS, and then securely erasing the temporary FDE OS. If you mirrored your main FDE beforehand, you wouldn't even have to worry about your data being manipulated by malicious programs.  I suppose the big downside is that you can only share all of the data, or none of the data, there's no middle ground."
crypto,2we6c7,nemoxnine,1 point,Tue Mar 10 20:41:05 2015 UTC,"True, but isn't the OS what you're trying to protect? FDE is great for making sure the guy down the pub only gets $50 for the stolen laptop instead of $100 for the laptop with juicy data.  If someone is after you, then FDE will only protect you so far, unless you never turn the machine on. If you don't trust the OS enough to provide the FDE, how can you trust it enough to really use it with any meaningful data.  The biggest loss IMO is that truecrypt was easy to use and cross platform."
crypto,2we6c7,zeroXten,1 point,Tue Mar 10 20:55:45 2015 UTC,No. FDE implies you're protecting the data at rest lest the harddrive/laptop is stolen. Any attacks due to software are orthogonal.  I think you have a different threat model in mind.
crypto,2we6c7,cunttard,3,Fri Feb 20 11:44:18 2015 UTC,Is there a verified safe place to download 7.1a as it was originally distributed before it was pulled?
crypto,2we6c7,Icannotrememberthis,7,Fri Feb 20 13:39:42 2015 UTC,Download it from the guys doing the audit.
crypto,2we6c7,Likely_not_Eric,1 point,Thu Feb 19 19:12:19 2015 UTC,I'd say this is the new official source.
crypto,2we6c7,samsonx,1 point,Thu Feb 19 23:47:38 2015 UTC,I archive all software versions of stuff I use as they become available and keep every one of them over the years.
crypto,2we6c7,pHreaksYcle,0,Fri Feb 20 03:45:28 2015 UTC,"http://www.oldversion.com/windows/truecrypt/  Can't verify safety, but this might get you started."
crypto,2we6c7,ZaphodsOtherHead,3,Fri Feb 20 00:32:18 2015 UTC,"Yikes, I wouldn't download software from a website that doesn't support TLS. The best link I know of is https://truecrypt.ch/downloads/ . Bonus because it has PGP sigs and links to independent hashes."
crypto,2we6c7,samsonx,4,Thu Feb 19 20:06:58 2015 UTC,So long as you know the original hash and it matches there isn't an issue.
crypto,2we6c7,ZaphodsOtherHead,1 point,Thu Feb 19 20:16:26 2015 UTC,"That's true. Still, there are other reasons to prefer a site that supports SSL."
crypto,2we6c7,xJoe3x,1 point,Fri Feb 20 00:33:15 2015 UTC,That is not an extensive list and I am not sure what the point of it was.  The ability to the password for a windows login does not have any effect on the security of bitlocker.    A great deal of encryption products are not involved (or better to say have no gotten wide attention) in court cases.    You don't have to trust MS but I don't know of any actual vulnerabilities on bitlocker or any actual evidence of compromise to that feature.
crypto,2wgmr4,CryptoComPw,3,Thu Feb 19 19:28:59 2015 UTC,Oh nice! So P != NP then?
crypto,2wgmr4,Westicle,3,Fri Feb 20 00:11:23 2015 UTC,"The west doesn't have a monopoly on morons, you know. We have morons too..."
crypto,2wgmr4,glupoi652,2,Fri Feb 20 04:54:57 2015 UTC,"Ah, it's closed source so it must be secure? In a country where crypto requires a license? If it is the one photographed, it even seems to be running gapps so how can it be a non-Android O/S?"
crypto,2wgmr4,hajk,2,Thu Feb 19 20:09:42 2015 UTC,Exactly
crypto,2wgmr4,xkxanc,1 point,Fri Feb 20 21:24:10 2015 UTC,lol
crypto,2weww1,NytroSC,2,Thu Feb 19 09:11:43 2015 UTC,"Just a warning, OP:  https://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F"
crypto,2weww1,phyzome,2,Thu Feb 19 16:31:38 2015 UTC,"It's a very valid point that code being ""correct"" and even ""technically secure"" doesn't necessarily make it ""practically secure"".  PHP developers regularly perform encryption using Rijndael-256 (as in, with a 256 block size) because of the naming of the constants in the mcrypt library, under the belief that it's AES with a 256 bit key.  If you make it the path of least resistance for users to do something dumb, there's plenty of room to call your code ""insecure""."
crypto,2wbrg1,rnd_user12,13,Wed Feb 18 16:49:18 2015 UTC,Here are some notes I made while reading the book cryptography engineering. It might be wrong though.  Strength:  Serpent > Twofish > AES > 3DES > DES  Speed:  AES > Twofish > DES > Serpent > 3DES  EDIT: I misspelled 'cryptography'..
crypto,2wbrg1,Websly,3,Wed Feb 18 18:00:21 2015 UTC,Happen to know if that was accounting for AES-NI?
crypto,2wbrg1,xiongchiamiov,2,Wed Feb 18 19:32:42 2015 UTC,"If I recall correctly, Twofish is slightly faster than Rijndael (AES) on most 32-bit platforms without AES-NI, but it's close.  Rijndael's advantage is that it's relatively simple, and it's faster than the alternatives on 8-bit CPUs and faster/smaller in hardware."
crypto,2wbrg1,bitwiseshiftleft,1 point,Wed Feb 18 20:49:21 2015 UTC,"Nope, AES-NI wasn't out when this it was published. AES is just fast."
crypto,2wbrg1,clive892,7,Wed Feb 18 20:51:42 2015 UTC,"""Best"" depends on your requirements, though it obviously should not be DES or 3DES. Beyond strength & speed, there is also the fact that AES is the eponymous standard, so you can be sure that you are in the same boat as most others when choosing that as your block cipher."
crypto,2wbrg1,cs80,7,Wed Feb 18 18:14:02 2015 UTC,"A lot of AES speed on modern hardware comes from it being a standard. Its hardware accelerated everywhere. Every chip you can use at this point does hardware accelerated AES, both Intel and AMD, ARMv8 chips, Sparc, POWER... The entire industry supports it.  http://en.m.wikipedia.org/wiki/AES_instruction_set#Supporting_CPUs  http://en.m.wikipedia.org/wiki/AES_instruction_set#Hardware_acceleration_in_other_architectures"
crypto,2wbrg1,Gnome__Chompsky,7,Wed Feb 18 18:54:22 2015 UTC,"I think Serpent would have won if it had fewer rounds. I understand the designers were going for security, but I think 32 rounds is overkill, seeing 12 rounds Serpent is barely even scratched."
crypto,2wbrg1,deathfantasy,1 point,Wed Feb 18 19:02:34 2015 UTC,"According to the NSA, hardware Serpent is faster than Rijndael.  http://csrc.nist.gov/archive/aes/round2/conf3/papers/37-bweeks.pdf  Serpent in software isn't ridiculously slower."
crypto,2wbrg1,conradsymes,4,Wed Feb 18 22:55:50 2015 UTC,"Well, in the selection process, the teams who prioritized security margin went for serpent, while those who wanted speed went for rijndael. The Twofish authors argued in one of their NIST papers that Twofish was the middle ground between the two."
crypto,2wbrg1,dareksam,1 point,Wed Feb 18 20:56:04 2015 UTC,"In one of the NIST papers written by Scheier et al they write something along the following (about the selections of the other groups): The ones who prioritize security chose Serpent, and the ones who favour speed chose Rijndael. In our view Twofish is the best of both worlds, with both speed and a wide security margin.   NIST scored the different algorithms after different characteristics, and it was actually quite close between serpent, twofish and rijndael, the latter winning mostly because it's superior speed in hardware.   Now, please correct me if i'm wrong. I haven't read about this in quite a while."
crypto,2wbrg1,dareksam,1 point,Mon Feb 23 07:31:45 2015 UTC,"Yep, sounds like something he said in his Cryptography engineering book as well."
crypto,2wbrg1,Websly,5,Thu Feb 19 09:11:32 2015 UTC,"Btw are you aware there's also Threefish which has even 1024-bit blocks?  The best alternative to AES right now is ChaCha20, but it's a streaming cipher not a block cipher like the others. ChaCha20 is significantly faster in software."
crypto,2wbrg1,johnmountain,3,Thu Feb 19 09:08:42 2015 UTC,"Plus you can use it with poly1305 which on many platforms is a lot faster the aes in gcm mode.   Backing up for OP, a cipher is only one half of the equation, you also want a message authentication code to ensure authenticity of the message (that no one has tampered with it). GCM mode of AES (some info on modes of operation ) can be fast if it's implimented in hardware but only Intel chips do that (I. E. Your phone doesn't) so on those it is very slow."
crypto,2wbrg1,cwmma,3,Thu Feb 19 09:24:47 2015 UTC,There has been worryingly little formal analysis of ChaCha20.
crypto,2wbrg1,mpdehnel,8,Wed Feb 18 21:22:46 2015 UTC,"That's not really accurate. Salsa20, from which ChaCha is derived, received significant analysis as a part of eSTREAM. Further, BLAKE is a hash function derived from ChaCha20 which received significant analysis as a part of the SHA3 competition."
crypto,2wbrg1,kingkilr,10,Wed Feb 18 22:36:20 2015 UTC,"They're all modern block ciphers with 128-bit blocks and up to 256-bit keys. The practical differences are:   AES is implemented in hardware on many chips and thus many times faster on those machines. AES is by far the most popular, and therefore most studied, and it has held up well with only negligible academic attacks being discovered against it so far."
crypto,2wbrg1,Sostratus,8,Wed Feb 18 23:00:34 2015 UTC,"All three were finalists in the AES competition. The candidate selected for AES was the fastest cipher with the smallest security margin among the finalists.  The selection was heavily driven by considerations like cost for hardware / embedded implementations. This makes a reasonable amount of sense for a government standard, but may not have been the best choice in general for software encryption on full-scale computers (including modern cellphones).  Serpent was slowest with the highest security margin, while Twofish was decently fast but hard to analyse.   AES is the conservative choice. Serpent is the paranoid choice. ChaCha20/poly1305 is probably what actually makes the most sense in software."
crypto,2wbrg1,Chandon,2,Wed Feb 18 23:41:16 2015 UTC,Adam Langley on ChaCha20/Poly1305:  https://www.imperialviolet.org/2013/10/07/chacha20.html  I wonder if ChaCha20 would be even faster than AES if implemented in hardware.
crypto,2wbrg1,johnmountain,1 point,Thu Feb 19 00:37:03 2015 UTC,"Anything by Dan Bernstein has got to be good, but you usually don't see people recommending stream ciphers now. Why is that?"
crypto,2wbrg1,Sostratus,5,Thu Feb 19 01:37:54 2015 UTC,"Until eStream, the only common stream cipher was RC4. But everyone uses their block ciphers in modes that simulate stream cipher ."
crypto,2wbrg1,Chandon,4,Sat Feb 21 10:36:01 2015 UTC,"The major difference is that every modern CPU has hardware acceleration for AES but not the others. That makes it, by far the best in terms of cost and performance.  What is the best in terms of security? Doesn't matter. At that point you're arguing about whether your fence should be 1 mile high or 1.5 miles high. There is no practical difference."
crypto,2wbrg1,all-blue-chucks,8,Thu Feb 19 03:39:01 2015 UTC,"Speaking from experience, if you walk into a Government project, and mention encryption that is not AES, you will get laughed out of the room and attacked over an ""incredibly insecure"" proposal. Even if that proposal is chacha20/poly1305.  My point being the ""difference"" can be just as much political as anything else."
crypto,2wbrg1,disclosure5,3,Thu Feb 19 04:11:34 2015 UTC,"math... use AES.  But seriously they are pretty complicated your going to have to get into a lot of math if you want to seriously understand them and their differences.   ""AES is a block cipher and uses a substitution-permutation network for encrypting the data. On the other hand, Twofish uses a Feistel network to accomplish the same task. This means that Twofish is very similar, albeit much more complex than the older standards DES (Data Encryption Standard) and 3DES (Triple DES). Despite being similar to the older DES encryption, Twofish is unbreakable; even in theoretical perspective.""   So just think about all the shit you will need to read up on to get through that."
crypto,2wbrg1,____G____,11,Thu Feb 19 01:30:50 2015 UTC,"Twofish is unbreakable; even in theoretical perspective.   Yes, let's paste unattributed information from a website that makes absurd claims using incorrect grammar. And that uses an invalid certificate."
crypto,2wbrg1,shiny_thing,2,Wed Feb 18 22:48:22 2015 UTC,"Yeah, someplace like the crypto stackexchange is probably a better idea:   http://crypto.stackexchange.com/q/1887/21784 http://crypto.stackexchange.com/q/5287/21784"
crypto,2wbrg1,xiongchiamiov,17,Wed Feb 18 16:52:43 2015 UTC,https://www.coursera.org/course/crypto
crypto,2wbrg1,xiongchiamiov,4,Wed Feb 18 19:38:48 2015 UTC,Really not sure why you're being downvoted. It's a good course
crypto,2wbrg1,ChironGM,3,Wed Feb 18 21:21:25 2015 UTC,"I'm pretty sure it wouldn't cover the differences between Rijndael, Serpent and Twofish though."
crypto,2wbrg1,bitwiseshiftleft,3,Wed Feb 18 17:19:52 2015 UTC,"I haven't finished it (and there's a second section), but no, I don't think it does.  However, it gives you the background to be able to understand the material you'd read on them.  So, for instance, it'll teach you what a Feistel network is (and the upsides and downsides of it), which helps you with this part of OP's text:   AES is a block cipher and uses a substitution-permutation network for encrypting the data. On the other hand, Twofish uses a Feistel network to accomplish the same task."
crypto,2wbrg1,xiongchiamiov,0,Wed Feb 18 18:09:08 2015 UTC,"I would have assumed it would, but I don't know for sure."
crypto,2wbrg1,ChironGM,3,Wed Feb 18 20:51:48 2015 UTC,Challenge accepted.
crypto,2wbrg1,KiwiFear,1 point,Wed Feb 18 21:18:13 2015 UTC,I have always enjoyed this cartoon illustration.
crypto,2wbrg1,reply,1 point,Wed Feb 18 20:52:47 2015 UTC,The numbers in this table are just made up.
crypto,2wbrg1,stratha,1 point,Wed Feb 18 17:42:51 2015 UTC,You missed the joke I guess. The numbers are made up but not unreasonable. The categories aren't all qualities and the sum at the bottom is ridiculous based on that.
crypto,2wbrg1,GahMatar,1 point,Thu Feb 19 04:09:21 2015 UTC,The numbers are made up but not unreasonable.   They are indeed misleading.  crypto.stackexchange.com/questions/11104/how-exactly-was-the-finalist-chosen-in-the-nist-aes-competition
crypto,2wbrg1,stratha,-4,Tue Feb 24 09:27:31 2015 UTC,Do you trust Schneier or the NSA?
crypto,2wbrg1,amarigatachi,1 point,Fri Feb 27 19:39:06 2015 UTC,Which does Shneier Schneier support?
crypto,2wbrg1,PostHipsterCool,1 point,Sat Mar 14 06:54:16 2015 UTC,"He supports AES, but he wrote Twofish."
crypto,2wbrg1,amarigatachi,1 point,Wed Feb 18 20:16:24 2015 UTC,Then why does he support AES?
crypto,2wbrg1,PostHipsterCool,1 point,Wed Feb 18 21:02:45 2015 UTC,"Can't find the source.  If memory serves it was along the lines of ""it's the government standard.""  and if memory doesn't serve, then this is wrong."
crypto,2wbrg1,amarigatachi,2,Wed Feb 18 21:03:56 2015 UTC,"That's basically right,  but it's not just the government standard It's industry standard. From what I remember he recommends using it for that reason, more attention has been paid to the cipher and you can't really get in trouble for using it (if you're using it as part of a system for a company or whatnot.) From what I remember he had good things to say about all 3 in Practical Cryptography."
crypto,2wbrg1,ChaosWaffle,0,Wed Feb 18 21:05:49 2015 UTC,Take a guess considering this :  Twofish was created and analyzed by: Bruce Schneier - John Kelsey - Doug Whiting - David Wagner - Chris Hall - Niels Ferguson
crypto,2wbrg1,samsonx,0,Wed Feb 18 21:41:44 2015 UTC,All of those people are highly esteemed cryptographers.  The only even slightly fishy thing is that Kelsey works at NIST. What am I missing?  Edit: Oh whoops. I thought you replied to this comment
crypto,2wbrg1,PostHipsterCool,0,Thu Feb 19 02:57:38 2015 UTC,Oh whoops. In my original reply to you I thought you replied to this comment
crypto,2wbp92,GrayCipher,11,Wed Feb 18 16:32:38 2015 UTC,"Yes, it is 'harder' but not in any cryptographically meaningful sense. Joux has the original paper on multicollisions which showed that these constructs do not provide the assumed security and there have been improvements on it.  Boneh (and related citations) is a good place to start if you want to dig into this in detail."
crypto,2wbp92,xantes,3,Wed Feb 18 18:17:09 2015 UTC,"One of the cryptopals problems is this: http://cryptopals.com/sets/7/challenges/52/  To extend from just finding collisions to finding a preimage would require a similar amount of work as breaking the easier one n+1 number of times, and the harder one one time, giving a complexity of O(n2n) for two n-bit hashes, assuming my quick thoughts are correct."
crypto,2wbp92,FryGuy1013,2,Wed Feb 18 21:00:19 2015 UTC,"Yes, it is 'harder' but not in any cryptographically meaningful sense. Joux has the original paper on multicollisions which showed that these constructs do not provide the assumed security and there have been improvements on it.   For clarity, that paper is applying to extending the digest output size with the same cryptographic hash function. Or, in otherwords, taking the RIMEMD-128 of a file, followed by also taking the RIPEMD-160 of the same file. There should be 2128 * 2160 = 2288 total possible digests, with 2144 required for a collision, but it turns out not to be the case, when using the same cryptographic hash.  However, the paper does not address using different cryptographic hashing functions, with different constructs, such as MD5 and RIPEMD, or SHA2 and SHA3."
crypto,2wbp92,atoponce,3,Wed Feb 18 19:43:31 2015 UTC,"I think you should re-read Joux's paper as it is far more expansive than you think it is.   ""A very important fact about this attack is that it does not require of G to be an iterative hash function. Any hash function will do, and this attack on cascaded hash works even when G is replaced by a random oracle."""
crypto,2wbp92,xantes,4,Wed Feb 18 20:28:46 2015 UTC,"F is still required to be an iterative hash function, right?"
crypto,2wbp92,FryGuy1013,4,Wed Feb 18 21:11:20 2015 UTC,"Yes, F still must be iterative -- the attack relies on finding ""cheap"" multicollisions in F. But thereafter it uses a simple birthday attack on G so G can be arbitrary."
crypto,2wbp92,rosulek,2,Wed Feb 18 21:46:49 2015 UTC,Huh. I missed that. Interesting. Good to know. Thanks for the clarification.
crypto,2wbp92,atoponce,13,Wed Feb 18 20:32:18 2015 UTC,"If I understand your question correctly, you want to know that if you provide a MD5 and SHA-256 of a file, together, if finding identical MD5 and SHA-256 digest collisions simultaneously is more difficult than finding just a single MD5 or SHA-256 collion.  The answer is yes. The reason is the product of the two cryptographic hashing functions.  To demonstrate this, suppose we take the MD5 of a file. There is a theoretical range of 2128 possible digests. If we also take the SHA-256 of the same file, then the range of that is 2256 possible digests. If I wish to find a colission on both MD5 and SHA-256 digests, then I would need know the range of digests. This can be calculated with:  2^128 * 2^256 = 2^384   So, you would have the same theoretical digest range as a SHA-384 cryptographic hashing function.  You may think, ""why not just provide the SHA-384 to begin with?"" That's certainly a valid question, but there is some value to providing cryptographic hashes that use different constructions. The SHA2 functions all use the Merkle–Damgård construction, while the newly apprived by NIST SHA3 cryptographic functions use the sponge construction. By providing both the SHA-256 and the SHA3-256 digests of a file, should guarantee security, such that if there is something fundamentally wrong with either the Merkle–Damgård or sponge constructions, the other digest should still hold strong for data integrity.  Of course, this comes at the cost of increased time calculating the digest for both functions, and it may not be worth it in all scenarios, or even most. But it's something to think about, and might have application in some instances."
crypto,2wbp92,atoponce,-1,Wed Feb 18 17:23:09 2015 UTC,"Yes, because you would have to find a file such that both hashes are correct which will happen much less frequently then a single hash (VERY much less frequently).  Having said that, you should be able to get the same effect by using a sufficiently strong hashing algorithm say SHA512 instead of SHA256.  Also if you wanted to make it take longer for someone to find the correct hash, you could use multiple rounds of something like 512 to increase the amount of time it takes to do the brute force calculations."
crypto,2wbp92,____G____,4,Wed Feb 18 16:59:45 2015 UTC,"Every round of hashing you do throws away some information; yes, you'll be making it more difficult for someone to just brute force their way into one, but mathematically speaking, you're still increasing the odds of a collision overall."
crypto,2wbp92,acwsupremacy,3,Wed Feb 18 18:32:06 2015 UTC,"See: bcrypt, scrypt, etc."
crypto,2w37uk,tom-md,2,Mon Feb 16 16:37:10 2015 UTC,"Also the direct link to the article is:   http://online.qmags.com/SNP0115?pg=31&mode=2#pg25&mode2   To be honest, I find the IEEE's presentation (PDF in some sort of viewer) to be really annoying so the casual reader might rather the short blog post or find a way to download the article instead of reading it embedded in IEEE."
crypto,2w37uk,RuddiV,1 point,Mon Feb 16 16:42:23 2015 UTC,"From a fast look through of the paper based on an interest in FHE, this seems very vague and without any details. There is no algorithms, no mathematical proofs of security, no details regarding the FHE scheme.  I'm not saying this is what you have done, but anyone with a slight understanding of FHE, could easily have written a similar article (at least the FHE part, which is the only part i looked at) without having made or implemented any scheme."
crypto,2w37uk,RuddiV,2,Tue Feb 17 07:25:35 2015 UTC,"This article was intentionally high level, like the entire IEEE issue iiuc.  You probably one to read some of Kurt's osiers from the sound of it.  http://dblp1.uni-trier.de/pers/hd/r/Rohloff:Kurt"
crypto,2w298o,heliox,5,Mon Feb 16 09:35:22 2015 UTC,Only recent changes in GOST crypto was updating HASH function http://tools.ietf.org/html/rfc6986 which is updated version of GOST R 34.11-94
crypto,2w298o,tepmoc,3,Mon Feb 16 11:11:40 2015 UTC,"Are they normally using anything else? I'm a bit ethnocentric on crypto, it seems."
crypto,2w298o,tepmoc,1 point,Mon Feb 16 18:13:48 2015 UTC,"Current block ciper is GOST 28147-89 if that what you are asking, so no news should be here. It usage pretty much limited in terms of popularity even in Russia."
crypto,2w298o,tepmoc,2,Mon Feb 16 22:27:19 2015 UTC,I'm asking for what they've migrated to since they started using GOST 20-30 years ago. I kindof expected them to not be using that anymore.
crypto,2w298o,bascule,1 point,Mon Feb 16 22:39:44 2015 UTC,"Well its has own drawbacks but current cryptoanalyst doesnt show any major flaw, so why should they? But coments below show that there is new standart in works."
crypto,2w298o,promx17,5,Mon Feb 16 23:10:29 2015 UTC,GOST Grasshopper: http://cvo-lab.blogspot.fr/2015/01/the-new-gost-standard-from-russian.html
crypto,2w298o,dchestnykh,3,Tue Feb 17 01:52:19 2015 UTC,Here is upcoming standart  https://ru.wikipedia.org/wiki/Kuznechik
crypto,2w298o,samsonx,2,Mon Feb 16 18:41:18 2015 UTC,Implementation and spec (incl. translation): https://github.com/mjosaarinen/kuznechik
crypto,2w298o,ValdikSS,3,Mon Feb 16 21:42:47 2015 UTC,So the Russians don't use AES ?
crypto,2w298o,tepmoc,4,Mon Feb 16 23:39:12 2015 UTC,No idea. That's why I'm asking for information on what they're using now. GOST was the requirement in the 90s.
crypto,2w298o,shroom_throwaway9722,2,Mon Feb 16 23:48:58 2015 UTC,AES was designed by Belgians ...  just fyi ...
crypto,2w67xi,conradsymes,3,Tue Feb 17 07:35:33 2015 UTC,"I don't quite understand what you're proposing but the birthday bound is a function of the block size of a cipher (or pseudorandom permutation1 (PRP)). Security of CTR mode requires the the PRP is secure2 so ""adding rounds"" doesn't add additional security.  1: By PRP switching lemma, you can also replace it with a pseudorandom function.  2: Where secure is a particular definition used in provable security literature."
crypto,2w67xi,cunttard,1 point,Tue Feb 17 08:19:02 2015 UTC,"Essentially I am encrypting plaintexts 0x00000000000000000000000000000001 and 0x80000000000000000000000000000001, and adding them together. It's effectively a hash function."
crypto,2w67xi,cunttard,7,Tue Feb 17 08:49:30 2015 UTC,"First (modular) addition of ciphertexts is not a cryptographic hash. Addition is commutative and so reversing the plaintext yields the same value (which yields a collision, which means the hash is not collision resistant).  If I understand your improvement, let's come up with a new block cipher E'(X) = E(X) + E(-X). Then given Ni (i-th counter) and Pi (i-th plaintext block) we have Ci = E'(Ni) ⊕ Pi.  I don't see any added benefit (infact encryption cost is doubled) and you'll still need to prove E' is a secure block cipher (i.e. breaking E' is as hard as breaking E)."
crypto,2w67xi,cunttard,1 point,Tue Feb 17 09:04:30 2015 UTC,Not really. The typicaly number of rounds to achieve diffusion is usually 1/3 or 1/4 than that which would provide security from linear attacks in ECB mode.
crypto,2w67xi,autowikibot,5,Tue Feb 17 09:34:47 2015 UTC,"Not really what? At the end of the day confusion/diffusion doesn't matter. What we really care about is if the block cipher E is a family of pseudorandom permutations.  Before you propose amendments to CTR mode, you should read the analysis of CTR mode security [page 18]."
crypto,2w67xi,silverforest,1 point,Tue Feb 17 12:58:15 2015 UTC,"Pseudorandom permutation:       In cryptography, the term pseudorandom permutation, abbreviated PRP, refers to a function that cannot be distinguished from a random permutation (that is, a permutation selected at random with uniform probability, from the family of all permutations on the function's domain) with practical effort.     Interesting: M6 (cipher) | Feistel cipher | Blowfish (cipher)   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2w67xi,shiny_thing,2,Tue Feb 17 12:58:57 2015 UTC,I don't understand why you would need to go through this trouble. Would just limiting the length of the keystream not be sufficient to assume a PRF instead of a PRP?
crypto,2w07oe,sanderD,10,Sun Feb 15 21:05:54 2015 UTC,"There's also ""tweetnacl"".  Ignoring the gimmicy name, TweetNaCL is a small, public domain, C implementation of the core goodness of NaCL.  It has one annoyance in that it assumes a 'randombytes()' function instead of just requiring some amount of entropy as input to particular functions, but that's forgivable.  Bonus meta comment: I'm happy to see cryptography papers on this sub.  Or really any crypto at all and not just news for the privacy-conscious.  OTOH, NaCl is probably the most read recent cryptography paper (read by crypto consumers, at least).  From my perspective it would be great to see more ""real"" cryptography (anything on eprint, perhaps.  Blogs about proverif and cryptoverif uses, etc) and less anti-spook stories and posturing or postulating that pass as news these days."
crypto,2w07oe,tom-md,1 point,Mon Feb 16 02:45:14 2015 UTC,"... NaCL is the shit and everything, but this is old as shit."
crypto,2w07oe,braille_teeth,1 point,Mon Feb 16 05:58:16 2015 UTC,"I don't see a reason to use that.  There's a newer version of tweetnacl and 'randombytes()' should be easy to write (though the one in the github repo is not great, so who knows)."
crypto,2w07oe,baconridge,0,Mon Feb 16 07:30:59 2015 UTC,"Sure.  At a minimum:   Don't use fopen/fread/fclose.  Use open/read/close instead. (Buffered vs unbuffered I/O). Check the return value from the read() call correctly.  While it is unlikely that the read call will return truncated output, that should be handled (in this case with a fatal error).   For extra credit:   If you really must use /dev/urandom, perform additional sanity checking (See the 2nd example listed here). Write platform specific code to avoid using /dev/urandom when superior alternatives exist.  And, no I don't mean /dev/random.  Under Linux, this would be ""getrandom(2)"", for Linux >= 3.17, ""arc4random_buf(3)"" for OpenBSD >= 5.5 (Or ""getentropy(2)"")."
crypto,2w07oe,baconridge,1 point,Mon Feb 16 17:00:35 2015 UTC,"Sorry, what benefit would this provide exactly?    It's really heavyweight.  This is what, your implementation of randombytes() does to read 16 bytes of entropy, along with what glibc does internally to maintain the buffering state and coping the data out to the user buffer.  open(""/dev/urandom"", O_RDONLY)          = 3 fstat(3, {st_mode=S_IFCHR|0666, st_rdev=makedev(1, 9), ...}) = 0 ioctl(3, SNDCTL_TMR_TIMEBASE or SNDRV_TIMER_IOCTL_NEXT_DEVICE or TCGETS, 0x7fffc94d8200) = -1 EINVAL (Invalid argument) mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f20740c4000 read(3, ""YG\t\v`\16-\246\302\316\374\254\n\222\7\3303\366O\211\177\17&\257\205\234\242%(\234v\302""..., 4096) = 4096 close(3)                                = 0 munmap(0x7f20740c4000, 4096)            = 0   For added fun, this is discarding 4080 bytes of entropy since the fread() reads BUFSIZ / 2 bytes, and it leaves a copy of all of the data read splattered on the heap.   This means fread() will return either 1 or 0 as I'm asking it to read a single item of the full length of bytes, 1 if it successfully read the full length or 0 in the case that it failed to read or failed to read the full length.    Derp.  I'm tired, and I mentally flipped the arguments.  Mea culpa.    If you really must use /dev/urandom, perform additional sanity checking (See the 2nd example listed here).   Most of these sanity checks seem excessive, I don't think a test for  /dev/urandom being a block device serves any real purpose in a  lightweight library. Not on any system I've used at least. I'm not  trying to be OpenSSL here. :)   It's a light weight library that generates keys that have the potential to be long lived (In particular Ed25519 keypairs).  In that light I think that checking that /dev/urandom is actually /dev/urandom and not, say a textfile seems like a reasonable thing to do, and the code isn't  excessive.    Write platform specific code to avoid using /dev/urandom when superior alternatives exist. And, no I don't mean /dev/random. Under Linux, this would be ""getrandom(2)"", for Linux >= 3.17, ""arc4random_buf(3)"" for OpenBSD >= 5.5 (Or ""getentropy(2)"").   I like this idea, but again, the purpose in mind here is tiny tools and such. Linux's getrandom was only introduced recently, is not supported on many systems yet, and OpenBSD's is equivalent to their usual /dev/urandom except in extreme circumstances (ex: too many file handles). It'd be extra code for very little benefit except in extreme circumstances.   A system call versus 3 system calls, assuming unbuffered IO without extra sanity checking vs getrandom/getentropy.  If you detect that you can use OpenBSD arc4random, it's 1 getentropy call, every 16 chacha blocks."
crypto,2w07oe,baconridge,0,Mon Feb 16 17:42:02 2015 UTC,"I don't think there'll be a substantial performance difference here.    A quick and dirty benchmark suggests:   getrandom() - 2 usec. open()/read()/close() - 2.5 usec. fopen()/fread()/fclose() - 350 usec.   Standard disclaimers regarding turbo boost, the phase of the moon, and it being a quick and dirty benchmark apply.  The syscall where it's supported has the added benefit of getting to skip the sanity checking I would be doing if I were going to read from /dev/urandom."
crypto,2w07oe,baconridge,0,Mon Feb 16 18:17:07 2015 UTC,I disagree - a path on your filesystem being an actual file does not imply anything about system compromise.  The assumption that some particular file is semantically an unbounded stream of random values seems like a pretty broad one for a library author to make who doesn't even know the platform on which a developer might deploy a system.   It seems like the sort of thing a bad system setup script could easily foobar (ever used mknod before? yuck!).  Edit: Expected down-vote came in.  Care to converse or just silently disagree?
crypto,2w07oe,tom-md,1 point,Mon Feb 16 18:25:57 2015 UTC,"Cool and what industry standard applications is a NaCL application compatible with?  Oh ya, other NaCL applications.  I dislike this idea of tying crypto primitives to crypto protocols.  For instance, I might want to use ed25519 in my X.509 application.  If the only standards material are in NaCL library format it makes it harder to adopt it.  As much as I think things like CMS are overblown and way too complicated for the problem they purport to solve some form of standards compliance isn't a horrible idea."
crypto,2w07oe,tom-md,2,Mon Feb 16 18:47:38 2015 UTC,"Well the CFRG is working towards standardizing curves and ec25519 will likely be the first one of them.  SSHv2 also uses Ed25519 and that is in IETF draft form.  So things are moving but standards don't usually move without something available first, making the standards before any software at all would be backwards."
crypto,2vzayp,cipdev,28,Sun Feb 15 16:27:10 2015 UTC,"Clickbait title. The examples are valid but constitute < 5% of DB usage in a typical DB-backed application, so it's hardly about a post-database world."
crypto,2vzayp,ironhand,11,Sun Feb 15 20:26:05 2015 UTC,"its clickbaitish alright, but i forgive the authors because i see rampant misuse of databases for caching, state transfer, and more.  it is time to teach junior devs and IT students how to be very conservative in using databases.  i would call it a post-database state of mind."
crypto,2vzayp,iconoclaus,7,Mon Feb 16 06:44:32 2015 UTC,"I agree, it's far too common to apply a database-based solution to things that don't need them, making them unnecessarily stateful.  My intention wasn't to dismiss the whole article, but I do hate that so many people in the programming world feel that any insightful idea they may have automatically has to mean they're about to create a paradigm shift. Admitting that an idea has a limited scope doesn't make it any less interesting/useful."
crypto,2vzayp,ironhand,11,Mon Feb 16 11:44:40 2015 UTC,"Interesting article. These are clever designs that use cryptography to optimally use technology.  These designs have drawbacks, though. There are some technical drawbacks (as mentioned in the article's conclusion), but perhaps more important is how these designs affect the code maintainers. I know from experience that developers will get this stuff confused. There are checksums (called ""hash functions""), cryptographic hash functions (called ""hash functions""), and the HMAC construction (called ""Isn't crc32 good enough?"").  I can here the voices now:   ""Why did you spell MD5 with an H?"" ""I heard we should use SHA instead of MAC, because MAC was broken a few years ago."" ""We don't need HMAC because Wikipedia says SHA-256 is still secure."" ""Why are you telling me to use HMAC-SHA-256? You just told me that SHA was bad.""   These confusions can be cleared. But we have a choice between a simple design and a complex design. If this were a personal project, sure, I might use the complex design. Yay crypto! But if other people will touch my code, and the cost of an extra DB query is minimal (as Knuth said, premature optimization is the root of all evil), then simplicity becomes more important.  What is this ""post-database world"", anyway?"
crypto,2vzayp,mr_bitshift,3,Sun Feb 15 20:57:29 2015 UTC,"What is this ""post-database world"", anyway?   It is a place where you dont really care if your data landed on actual persistent storage, or anywhere, coutesy of MongoDB"
crypto,2vzayp,XANi_,1 point,Mon Feb 16 17:41:54 2015 UTC,"Why would anyone use MongoDB outside of storing documents since that is its strength?  Everyone knows that embedding relational data into documents leads to update and insertion abnormalities, right?  /s"
crypto,2vzayp,rox0r,1 point,Mon Feb 16 18:15:36 2015 UTC,why? because it's web-scale of couse!
crypto,2vzayp,XANi_,2,Mon Feb 16 18:52:58 2015 UTC,But does it let you shard /dev/null?  http://devnull-as-a-service.com/pricing/
crypto,2vzayp,rox0r,2,Mon Feb 16 19:18:12 2015 UTC,"data safety is on about same level as /dev/null, just with lower SLA"
crypto,2vzayp,XANi_,1 point,Tue Feb 17 02:50:56 2015 UTC,"I can here the voices now:  ""Why did you spell MD5 with an H?""    low hanging fruit"
crypto,2vzayp,TheTT,1 point,Mon Feb 16 20:19:35 2015 UTC,I exaggerate.
crypto,2vzayp,mr_bitshift,1 point,Wed Feb 18 01:20:22 2015 UTC,"I was referring to your own error (""here"") when joking about others thinking the H would be an error :D"
crypto,2vzayp,TheTT,1 point,Wed Feb 18 08:46:23 2015 UTC,"Oh wow, I completely missed that! Guess I'm a worse speller than I thought."
crypto,2vzayp,mr_bitshift,3,Thu Feb 19 00:21:31 2015 UTC,"How do you do expiring resources?   signed URLs that make it possible to verify that the request was created/signed-off-on by you, without needing to record proof of it anywhere.   How do i know that the person has only used it once?  I know how to make it expiring: include the expiration date in the URL:  http://youvideo.com?v=phappening&expiration=20150822&token=894e6978425e626e956576e4   But how do i know they've already used it without storing that information somewhere?"
crypto,2vzayp,JoseJimeniz,5,Mon Feb 16 04:28:48 2015 UTC,"By deducing from the information that is being altered whether it has already been altered. For the password change situation (also described similarly in the article), you'd end up with a URL that says ""allow user X to change the password, provided its current hash matches 123"". If the stored password doesn't match the hash provided, the request is invalid.  If the URL provides access to something that doesn't inherently change any database records (ex.: you want to allow someone to view a certain bit of content exactly once), then you will indeed have to track additional state somewhere."
crypto,2vzayp,ironhand,1 point,Mon Feb 16 11:49:21 2015 UTC,you will indeed have to track additional state somewhere.   Whew. I thought I was just not getting it.
crypto,2vzayp,JoseJimeniz,2,Mon Feb 16 12:15:56 2015 UTC,Had the exact same question... looks like the authors are purposely omitting an example about this.
crypto,2vzayp,teh_skrud,3,Mon Feb 16 12:54:23 2015 UTC,"It's a bit buried but the code snippet the author uses does include the old password hash and the IP address of the request origin:  HMAC256(""userId=johnnysmith&expirationTime=1356156000&oldBcryptHash=$oldBcryptHash&clientIpAddress=$clientIpAddress"", $mySuperSecretKey)"
crypto,2vzayp,dand,2,Mon Feb 16 20:37:25 2015 UTC,"Well, yes and no.  For a password reset function (as well as any other operation that aims at replacing a known resource), it kinda works. ""Kinda"", because it is less strict: the password may have been changed in between and reverted back to its original value. I don't think it matters much.  Our (JoseJimeniz and I) problem actually was with GET (idempotent) requests, e.g. when you want to allow someone to see some content exactly once. We both referred to ""Case 3"", which is short and evasive on how ""One-time-use"" is achieved."
crypto,2vzayp,teh_skrud,1 point,Tue Feb 17 08:43:36 2015 UTC,"Yeah, that doesn't work. Either you can deduce from extra context that the request is stale or the best you can do is expiration."
crypto,2vzy1y,49898rfnspd9f8m9849,10,Sun Feb 15 19:46:36 2015 UTC,"In theory, using variable length passwords could increase entropy. However, the increase in entropy is extremely small due to the nature of exponential sums. With a 72 character alphabet, allowing variable length passwords only increases entropy by ~0.0201 bits. Even with just 36 characters, it's only 0.0406 bits.  Now, assuming that you choose a password completely at random, more entropy is still better than less.   However this requires that you are truly picking it at random and hence the attacker has no particular reason to start guessing shorter passwords first. In the real world, some people pick weak passwords and hence attacks will always try weak passwords first. Therefore, the very very tiny increase in entropy is not worth the very real risk that attackers will guess your password sooner.  The same principle applies to making your your password contains symbols and numbers. In theory, the additional constraints decrease entropy, but the decrease is small and reduces the risk of an attacker guessing it quickly (or showing up in a rainbow table)."
crypto,2vzy1y,Uncaffeinated,2,Sun Feb 15 22:53:23 2015 UTC,"If there is a maximum limit, always one the limit. The strength behind passwords is its entropy, and you will always get more entropy from longer passwords than shorter ones."
crypto,2vzy1y,atoponce,0,Sun Feb 15 20:01:26 2015 UTC,Could you do any calculations to prove that longer is always better?
crypto,2vzy1y,atoponce,1 point,Sun Feb 15 20:41:41 2015 UTC,"Sure. Entropy is calculated by:  H = L * log2(N)   Where H is your entropy estimate, L is the length of your password, log2() is the base-2 log function, and N is the total size of possibilities you are picking your password from.  For example, if you chose a password that is only lowercase characters, then N would be 26. Thus, if the password is being chosen at random, then each character provides 4.7 bits of entropy. So, an 8 character password, in this example, would provide about 37.6 bits of entropy.  The larger L is, the more entropy in the system. This all assumes that the password is chosen from the random events. As soon as you start manipulating it, the entropy goes down.  If you are using Diceware, then there are 7,776 possibilites for each roll. Thus, N = 7776. So, each word provides about 12.92 bits of entropy. Six rolls (L) would provide about 77.54 bits in the system."
crypto,2vzy1y,Natanael_L,1 point,Sun Feb 15 20:51:56 2015 UTC,Standard entropy calculation. You can't store more bits of entropy than you have bits of data. Adding independent bits always adds the number of possible combinations = possible entropy.   log(character set sizelength) / log(2) = entropy in bits for a random string of a given length in a given character set.
crypto,2vzy1y,monty845,2,Sun Feb 15 20:54:12 2015 UTC,"Lets go with a password with Upper case, Lower Case, Numbers and the ten shift characters your numbers. that gives us 72 characters. A mandatory 50 character password is 7250. A password that can be any number of characters up to 49 is 7349 - 1.  So 50 Characters exactly has 7.4x1092 possible passwords. All possible password lengths 49 characters or less has 2.0x1091 passwords. 50 or fewer characters has 7.6x1092 possible passwords. So IF you password generator chooses a password with 49 or fewer characters, you loose more than an order of magnitude from the crack difficulty. If it chooses a 50 character one, (72/73 chance), having added the possibility of having less than 50 only increases the crack difficulty by a few percent.  I would conclude that removing the risk of having that weaker 49 or fewer character password outweighs the added difficulty of cracking a 50 character that could have been smaller. This is all assuming your using a password manager or something, as when you expect people to memorize passwords, there is a point where making it longer stops adding to security, and just makes people write it down somewhere, which actually reduces security."
crypto,2vzy1y,Uncaffeinated,1 point,Sun Feb 15 20:06:10 2015 UTC,I would conclude that removing the risk of having that weaker 49 or fewer character password outweighs the added difficulty of cracking a 50 character that could have been smaller.   I don't quite understand that statement.  Would you mind rewording it?
crypto,2vzy1y,Godspiral,1 point,Sun Feb 15 20:15:02 2015 UTC,"Actually, the number of passwords of up to 49 chars is just (1 + 72 + 722 + ... + 7249) = (7250-1)(72-1).   So the added difficulty is trivial (0.02 bits)"
crypto,2vvq64,RavenRavinoff,30,Sat Feb 14 16:05:47 2015 UTC,"""We just don't do industrial espionage.""  (Around 5m45s.)  Riiiight.  ""The truth is that what we did with respect to US persons -- what we did in this country -- was strictly circumscribed and generally speaking I can say almost with complete confidence that there haven't been abuses on US soil.  (Around 9m20s.)  Riiiight.  I would say she pulled some punches here.  She also didn't push back very hard when he claimed we need to balance civil liberties with counter-terrorism capabilities in the encryption debate.  In fact, I would call it a bit of a soft-ball interview."
crypto,2vvq64,throwaway,23,Sat Feb 14 20:38:28 2015 UTC,"Listen to what he says more carefully.  ""We don't do industrial espionage... like other countries do.""  ""Generally speaking ... almost .. there haven't been abuses on US soil.""  Very shady, but he doesn't actually lie."
crypto,2vvq64,jibcage,12,Sat Feb 14 23:30:14 2015 UTC,Still holes a competent interviewer could have driven a truck through.
crypto,2vvq64,throwaway,4,Sun Feb 15 00:10:29 2015 UTC,"Yeah, she definitely could have gone further."
crypto,2vvq64,jibcage,3,Sun Feb 15 00:20:22 2015 UTC,"For today's US media, I think they call those soft punches ""playing hard ball""."
crypto,2vvq64,rflownn,0,Sun Feb 15 00:28:59 2015 UTC,I read the first article that you linked to. It doesn't provide any evidence that the US engages in industrial espionage (ie spying for a commercial edge). It just says that someone in the government wrote a report that advocated that they keep the option on the table.
crypto,2vvq64,TDaltonC,-2,Sun Feb 15 17:40:02 2015 UTC,The volume on this is way too low...
crypto,2vw2jl,funkspiel56,3,Sat Feb 14 17:56:04 2015 UTC,"ever looked into the Investors for this, very near to the German Government"
crypto,2vw2jl,congregatio,1 point,Sat Feb 21 05:35:18 2015 UTC,"Didnt find that in my quick search..should be ok if its end to end encryption, where did you find this out?"
crypto,2vw2jl,xr1s,2,Sun Feb 22 03:32:01 2015 UTC,https://github.com/whiteout-io/
crypto,2vw2jl,kidblondie,1 point,Sat Feb 14 21:10:47 2015 UTC,Anyone concerned with giving them your private key?
crypto,2vxfnq,sdtrssmsbmw7eqm4,1 point,Sun Feb 15 01:08:12 2015 UTC,Can you paste the protocol description here? The Tor2Web url doesn't work.
crypto,2vxfnq,cunttard,1 point,Sun Feb 15 01:44:08 2015 UTC,"GnuPG implements RFC4880 - PGP public key.  This is used as a fallback protocol to allow clients to communicate while forward-secret communications are negotiated. Axolotl is a forward secret encryption algorithm designed to limit the damage of key compromise.  Axolotl underlies TextSecure's software. Authentication of end user identity is done via the Socialist Millionaire Protocol - a zero knowledge proof.  This is the same protocol OTR uses for authentication, but is done over email rather than chat. Tor uses onion routing to anonymize network traffic.  One of the features it provides is known as hidden services - a method of obscuring the location of a server."
crypto,2vxfnq,cunttard,1 point,Sun Feb 15 02:40:02 2015 UTC,I'm curious how the social millionaire protocol is performed over email (asynchronously) over chat (loosely synchronous).
crypto,2vxfnq,Natanael_L,1 point,Sun Feb 15 04:23:39 2015 UTC,"Protocol level:  I lifted/adapted/baldfaced stole the code here, wrapped the outputs in Base64, crammed it into JSON, and encrypted it with Axolotl.  At the application level: we have a queue that is serviced by procmail - call this the meta channel.   When SMP is initiated between two users, Alice sends the above wrapped SMP packet to Bob's box - which queues it and waits for the user.  This message is Axolotl encrypted, so it can only be decrypted the one time. Bob logs in, which triggers a run through the encrypted queue - messages are unwrapped for their message type (Axolotl handshake, SMP handshake, etc) and the replies generated and encrypted.  Because SMTP queues nicely, my code then is out of the loop.   This continues until we reach SUCCESS/FAIL end states, and the user is notified what happened inside the 'contacts' tab.  Progress bars.  Thank you for your interest.  I really didn't innovate anything here - just glued other people's code together in a new way."
crypto,2vuudv,whatamid0ingh3re,28,Sat Feb 14 07:58:53 2015 UTC,How can you tell the difference between a good cryptography joke and a random string of words?  You can't. They're indistinguishable.
crypto,2vuudv,Salusa,4,Sat Feb 14 10:28:03 2015 UTC,Semantic security! :)
crypto,2vuudv,Natanael_L,2,Sat Feb 14 10:40:21 2015 UTC,"Adjusts glasses  While it's true that indistinguishability from random bits implies semantic security, technically the latter is a weaker security notion..."
crypto,2vuudv,shiny_thing,18,Sat Feb 14 19:56:30 2015 UTC,-----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1  Knock knock; it's Bob. -----BEGIN PGP SIGNATURE----- Version: GnuPG v2  iQEcBAEBAgAGBQJU3wthAAoJEKWgg+5dJ84g1EkH/Rn9YBpjkr3Iuj1LQuv084Or S7FKEH73PQ2drot7LhV6qIH+i8rKsmqpPgvhlkXxhfwVeEpcvh3y8oHG7ZbazEpz g0uGc2BfPBezlSygQSG6oGVmF1f+6ABCoDi3LgDF0/nahK2DtaqQi3I5009lZewu BjMHEdE6j7HVH2xwBsuu9WHIlnY3H5ApjGFvSwnQq/PRZWUsl/JP3CnbOeWrECQI ya+j5zG5bjXYEE06dCcLL3qLSGl9oB8grBBBTRX+sSNCcu80wePLZnuyfU9IexFW mYzYZrw+JKUXnNgMpL3CAiEiEXFvpEeBTC40TWDOLKBhq1EXLfEonKoz1wOzjXc= =pZX/ -----END PGP SIGNATURE-----
crypto,2vuudv,p1mrx,5,Sat Feb 14 08:54:26 2015 UTC,sees PGP Signature Seems legit.
crypto,2vuudv,DemeGeek,7,Sat Feb 14 09:21:13 2015 UTC,The Xc==pZX/ on the end seems to imply otherwise.
crypto,2vuudv,gsuberland,6,Sat Feb 14 13:06:46 2015 UTC,"But, but... XKCD!"
crypto,2vuudv,DemeGeek,3,Sat Feb 14 13:12:24 2015 UTC,"Image  Title: PGP  Title-text: If you want to be extra safe, check that there's a big block of jumbled characters at the bottom.  Comic Explanation  Stats: This comic has been referenced 18 times, representing 0.0348% of referenced xkcds.    xkcd.com | xkcd sub | Problems/Bugs? | Statistics | Stop Replying | Delete"
crypto,2vuudv,xkcd_transcriber,15,Sat Feb 14 13:12:37 2015 UTC,Two cryptographers walk into a bar. Nobody else has a clue what they're talking about.
crypto,2vuudv,p1mrx,7,Sat Feb 14 09:22:33 2015 UTC,"Have you heard about the cryptographer who replaced his door with one that is 3 feet thick?  The lock on the old door could only take short keys.  Ironic that so many cryptographers have thick beards, isn't it? You wouldn't think they'd go for security by obscurity.   Then there's the one who replaces his lock daily to avoid key reuse.  Edit: Penguins can never hide from cryptographers. (ECB mode Tux, for reference)  Edit 2: Two prime numbers walked into a bar. None of them knew how to split the bill."
crypto,2vuudv,Natanael_L,7,Sat Feb 14 16:57:53 2015 UTC,This one comes to mind: http://xkcd.com/1323/
crypto,2vuudv,phyzome,3,Sat Feb 14 15:41:36 2015 UTC,"Image  Title: Protocol  Title-text: Changing the names would be easier, but if you're not comfortable lying, try only making friends with people named Alice, Bob, Carol, etc.  Comic Explanation  Stats: This comic has been referenced 18 times, representing 0.0348% of referenced xkcds.    xkcd.com | xkcd sub | Problems/Bugs? | Statistics | Stop Replying | Delete"
crypto,2vuudv,xkcd_transcriber,5,Sat Feb 14 15:41:43 2015 UTC,Where do cryptographers go to be entertained?  The security theater.
crypto,2vuudv,gsuberland,1 point,Sat Feb 14 13:18:19 2015 UTC,"Oh, so they visit TSA?"
crypto,2vuudv,Natanael_L,6,Sat Feb 14 16:49:51 2015 UTC,We can't forget this xkcd.
crypto,2vuudv,gsuberland,4,Sat Feb 14 13:07:22 2015 UTC,"""The purpose of cryptography is to force the US government to torture you.""  (Edit: quote apparently from a conference. Slides here: https://www.bsdcan.org/2010/schedule/attachments/135_crypto1hr.pdf)"
crypto,2vuudv,socket_wrench,3,Sat Feb 14 19:26:12 2015 UTC,"I can't believe this hasn't been mentioned:  Two hashes walk into a bar, one was a salted."
crypto,2vuudv,zeroXten,4,Sat Feb 14 19:47:05 2015 UTC,"Is this all we got? Maybe something like : Mallory was sitting in a bar complaining: Man, I have been gathering courage to tell a girl I love her, and today I sent her a message saying how I feel. Do you know what she replied?! ""Love you too Bob"""
crypto,2vuudv,Octetz,6,Sat Feb 14 21:19:41 2015 UTC,http://www.schneierfacts.com/ is good for a laugh.
crypto,2vuudv,whippen,2,Sat Feb 14 09:22:07 2015 UTC,"The rump sessions of crypto conferences are often rife with jokes, though in recent years, more emphasis has been put on this being more of a showcase of new results/announcements.  DJB has a nice list on his website: http://rump.cr.yp.to/"
crypto,2vuudv,DoWhile,5,Sat Feb 14 09:31:07 2015 UTC,Crypto is no joke.
crypto,2vuudv,DemeGeek,3,Sat Feb 14 08:52:06 2015 UTC,"Well not with that attitude, mister."
crypto,2vuudv,fr0stbyte124,2,Sat Feb 14 09:19:30 2015 UTC,What can I say? I'm no NSA.
crypto,2vuudv,DemeGeek,2,Sat Feb 14 09:21:29 2015 UTC,"The world wonders:       ""The world wonders"" was a phrase used as security padding in an encrypted message sent from Admiral Chester Nimitz to Admiral William Halsey, Jr. on October 25, 1944 during the Battle of Leyte Gulf.  The words, intended to be without meaning, were added to hinder Japanese attempts at cryptanalysis, but were mistakenly included in the decoded message given to Halsey and interpreted by him as a harsh and sarcastic rebuke. As a consequence, Halsey dropped his pursuit of a Japanese carrier task force in a futile attempt to aid United States forces in the Battle off Samar.     Image i     Interesting: American Ghosts and Old World Wonders | World of Wonders (album)   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2vuudv,autowikibot,1 point,Sat Feb 14 13:11:58 2015 UTC,http://www.schneierfacts.com/ has a few clever ones. Although they are only about Bruce Schneier.
crypto,2vuudv,nsa_at_home,-2,Sat Feb 14 13:12:05 2015 UTC,P¶tGBic¥fu#sj1OM¥QIaq4mM@π%Dx£V@k1en¥π9rel$©LyY59%©81Di%f6QFn©fgRVT?hIMz9¶yF?EE/z7c$4zxs/%ak64KOtC/90WFBUOBq1mtz0nAK¥oPwZ®@#U|F/%82£v$8vxnk¶AI©P©$ge$/tToWi¥EP|Wv©Th|tdRUmh$Tr2Wg̵̛̾̇ͭ̆̓ͧ̓ͩͥ͋͑̐̅̾ͩͮ̉̔҉̻̰̮̖̮͕̬͍͞e̷͕͔͈̖̼ͤ̆ͮ͊̓͋̍̊̀̐̈́ͧͤ̆̈̀4̡ͮ͌̃̈́̃ͨ҉̡͉̹͙͎̝͕̯̕r̛̝̦̱̺̤̺̻͇͓̙̯̳̥̖̭̔̂͌̔̀͞͡͡ͅͅͅ$͊̇͐ͣͧ̑̃̅̋͒̃ͤ͛ͫ͗̎̒҉̥͈͓̜͓̘V̷̡͇͇̖̞̄̐ͮ͆̔̌ͥ͊̉̌ͭ̉ͪ͞¶̻̥̪̖͕̜͒̉̽ͩͧ̊͆̔̋̈̔̒ͧ̚̚͜͝͡J̴̼̥̖͈͈̲͉̖̜̠̜̲͇̟̞͍̒ͭͫ͌̀̉̊̐͗̀̚͟͜9̨̇ͪ̄ͩ̈̿͐̎̉ͯ̓ͧͭ͌͌̇͡҉̥̖̼̯͖̹̱͖̤͍̦̫͚̱̯̯͎͜͠p̷̯̳̗̙̱͎̞͕̥̰̙̟̰͕̫ͯͮ̉̅̈́̔̀̋̅̕ͅŢ̵̢̬͍̤̫̯̜̘̈̂̐̓ͩ̀̂ͤ̋͂͌͊ͦ̏̐ͨ͘͜l̴̢̡͚̲͍̠̭͔̘̼̝̝ͪ̈̿͆͋̾ͤͮͣ͜ͅN̷̶̸͇͉̫̟͙̖̭͒ͦ̔ͩ͛̐͛ͯͫͧͬ͂̎̀͝L̠̞̖̙̜̎̂̌̇͛ͭ̾̇̈́͑͒͒͌̐̈́ͫͩ̾̍͜͟͢͞͡b̂ͨͧͤ̀͌͆ͨ͂͋̍̿̇҉̷̙̙̲͎̩̻͉̘͓̪̟͓͟͞ͅͅi̫̪͉͈̻̝̲̙̼̘̒̅́̐ͩ́͢X̸̣̤͈̪̻̗̥̯͑̿̎́̓̈̈́̉͂̄́͗́̋ͧͤͥͤ̚͘͠ͅŞ̶̡̭̬̯͚͉̬̘̩̯̮̮̗̰̬̬ͭͩͫ̈͋͑̋ͣ̍ͤ̎͡#̵̧̡̨̹͍̯͉͛̑̈́ͣ̅͗̓1̶̥̠̺͈͓̤̩̝̲̼̩͆͋ͨ̓̄̿̄͜͠͞͡R̟̗̩͈͎̝̭̬̙̣̝͚̦ͤ̓͆͗́͜͞͡͡ͅͅS̾́ͥ̑̏ͦ̋̈̃͗͊͌ͧ̓̅̄҉̞͚̹̬̹̪͍͇̮̖̤̻͉͓H̡̳͚͓̪̲̭͉̟̰̣͆͋̔̈́̄̊̂͂ͥ̃̉͝C̛̟͖͙̟̟͈̲̳̩͌̂ͮ̃͛̃̆̂͒̕͘͝π̴̧͕̮̞̠̪̲͙̼ͥ̽̾̈́ͣ̉͆̏̏ͨ̀͞B̶̢̬̺̳̳̤̠͚̗͍̬͖̻͒̌̽ͣͭͅͅI̟̻̯̬͕̖͒͋̏̓̇͐͟¥ͤ̓̏̊̈́̅͏̦̟̟̩̣̳̕L͖͓̭̮̘̝̙̖̙͔͖͙̼͕͓̬̜̞ͩ̏ͬ̒͊̄̀ͤͪ̀̚̕͝͝N̢̝̺͕̟̝͈͕͎͎̽̉̍ͣͮͮ̑̄ͤ̇̌/̶̢̯͍̟̞̪̜͎̖̝̼̦̹̏̌ͤ̈́ͬͩͫ̃͗̌ͧͣ̃̓̅̽̄ͯ̒͞͞S̶͛̽̽ͫ͊̈́̍ͮͣ̆ͫ͗͏̮͚͉̞̜̞͍̟̰͇̺̬͔̝̘̥A̶̤̗̰̲̰̖̫̩̮̼̤̗͎̦̟̿ͬ̽̐̔͆ͯͤ͢͝y̵̸̛̞̼̮͆͒ͮͮ̓̊̏ͦͥ͋ͦͨ͞g̸̖̳̪̜̹̊̓̋͗ͣͦ̈̆̽ͪ̈́̏̈́͗̊́́͜͞͠&̡̨̎ͥ͑͊̂͊̅҉̖͔̜͙̠̦͜͟c̨̨̥̻̬̙͇͚̞̠͚̼̠̭͇͔̟͐̅̈ͣͫͪ̅ͦ̽̃̏͂̂̎ͦ͛ͥ̊́©̸̶͈̬̜͇͓̝̻̂̑ͤͩ̍̓̏ͭ̃̾ͧ̉͜͝?̡͕̻͙̬͔ͯͣͨ͑͑̎͒̋ͧ̑͊͘͢i͐͛ͭ̎͂͐̋͌̍̍̑̓̾̉ͫ̽̍͛ͣ͢҉̜̮̺͓̻͚̝̙̦̻͇̼̝̗̹̹̼k̢̧̎̊̾ͩ͂̄̉͐͒͑ͣͮͯ̔̐ͤ̓̚͡͞͏̲̺̲̤t̢̧̺̟̪͇̼͉͈͈͓̣̹͈͎̺̬̦̤̹̓̌̄̒̀ͤ́͛̀͢͞ͅ4̸̧̯̠͉͕͔̝̃ͩ̌͋̉̏̔̐̄̑ͮ͢͟VirbsYlt#I/JDSEw@j5I439RlFt7sCQFfbKIgufQSha$E?5IP#B8LyvP8K6@na0pge4r$V¶J9pTlNLbiXS#1RSMCveGaHCπBI¥X©L6Ws5c95Lj3%fk&6HU©|&72oHV9®LnPoIxHNXOY¥oV&|Pf4K?W5KCEP rQNDCLN/SAyg&c©?ikt4s¶zI¶£f2NEp®40®RRHcIJ®DNa9us/Bk/BsC39qirAipHwO|kJZ#T®DSy1|XPoyeZcyR£MEpv¶MGKO5sAkAgY£UC4XNx4AeynIQJyhm®£hYW#wO*9k&pN/PPS5d/Y¶Dy4YcIMkc©p®VJzfOpIrE
crypto,2vuudv,souldust,1 point,Mon Feb 16 05:21:09 2015 UTC,Wat
crypto,2vpdk7,agelastic,3,Thu Feb 12 23:12:36 2015 UTC,"You want to talk to Galois, Inc. They regularly do crypto-rated internships, for example: https://mobile.twitter.com/galoisinc/status/540928872754073602  Even if they don't have anything, they might give you some pointers"
crypto,2vpdk7,TweetsInCommentsBot,2,Thu Feb 12 23:23:48 2015 UTC,@galoisinc   2014-12-05 18:01:07 UTC  You too can be a Galois intern; we're currently taking applications for next summer: https://galois-inc.hiringthing.com/job/20007/summer-2015-software-engineering-research-intern     This message was created by a bot  [Contact creator][Source code]
crypto,2vpdk7,tom-md,1 point,Thu Feb 12 23:23:52 2015 UTC,"Thanks! If something else hasn't come up for the fall I will most definitely be applying.  Also, what a great company name. Galois's work and personal life are both fascinating."
crypto,2vpdk7,Natanael_L,2,Thu Feb 12 23:28:22 2015 UTC,And we just bought a new pin-ball machine.  Think of it!  Cryptography and pin-ball.
crypto,2vpdk7,zifnabxar,1 point,Fri Feb 13 18:36:16 2015 UTC,Themed with elliptic curves?
crypto,2vpdk7,ddcc7,1 point,Fri Feb 13 21:39:18 2015 UTC,"Sounds like my kind of place! Expect to see my resume by October for ""Winter/Spring 2016 Software Engineering/Research Intern."""
crypto,2vpdk7,0x616e746f6e,5,Tue Jun 30 21:40:14 2015 UTC,"For general crypto, look into internships/jobs with the NSA or government labs. You might also look into companies who build secure tokens or servers.   Another idea: Try looking at recent papers in a field that interests you and seeing if any of the authors are affiliated with a company. If so, send them an email a) asking them to clarify some non-obvious thing in the paper, b) if they had thought about some reasonably intelligent extension to it, and c) if their company was hiring or they knew of any other companies that were.  For grad school in crypto, you're probably going to want to apply to CS programs. I've been told it's much easier to get a good job or do research in crypto with that as your grad degree."
crypto,2vpdk7,zeroXten,2,Thu Feb 12 23:30:05 2015 UTC,"I'm not very familiar with the latest state of the art, but there's been a lot of research activity on fully homomorphic encryption (see Craig Gentry's PhD thesis) and lattice-based cryptosystems (e.g. NTRU). Particular research groups to look into would probably be Dan Boneh at Stanford, Daniel Bernstein at UIUC, and Ron Rivest & Shafi Goldwassar at MIT.  As far as internships go, you might want to look into Cryptography Research Inc, Stanford Research Institute, and maybe Microsoft Research's cryptography group."
crypto,2vpdk7,xiongchiamiov,1 point,Fri Feb 13 06:37:36 2015 UTC,"Adding to this, BGV is another good homomorphic system to look at, co-authored by the aforementioned Craig Gentry. There's also an open source implementation on github."
crypto,2vpdk7,yalogin,2,Fri Feb 13 19:51:11 2015 UTC,"And while you're at it, you could contribute to an Open Source project :D Keeps your skills warm and looks good on CVs and applications."
crypto,2vnmvy,CryptoComPw,7,Thu Feb 12 15:00:48 2015 UTC,"Your keyspace is ~53 bits (""16 digit""). Don't you think that's a bit small? That's even smaller than DES which is already the whipping boy of cryptography for how laughably small its keyspace is and how easy it is to brute-force. I'm not even a crypto professional, just a spectator and I know how tiny that is."
crypto,2vnmvy,antiduh,2,Thu Feb 12 16:35:02 2015 UTC,We've switched to a public key scheme and with it we made a modification changing the keyspace to 128 bit.
crypto,2vnmvy,bladder-rinse-repeat,13,Thu Feb 12 19:43:21 2015 UTC,"Our code is open source, and will be released to the public once we start shipping. Our hardware is also open source, and schematics will be available for download.   Why wait? Better to open-source early on, so blatant errors can be caught before release.   Safewire is the apex of open source.   Not currently."
crypto,2vnmvy,Jethro_Tell,1 point,Thu Feb 12 17:00:54 2015 UTC,"Better to open-source early on, so blatant errors can be caught before release.   Thats a great point. We'll release once we open pre orders, and have finished our closed alpha testing. We're currently tidying up a whole bunch of things.   Safewire is the apex of open source.   That's because our hardware is also open source. We'll release schematics when we release our code."
crypto,2vnmvy,throwaway0xFF00,6,Thu Feb 12 20:49:22 2015 UTC,"If open source is such a selling point, why would you not open it up before pre orders?  How do I know if I want to pre order?"
crypto,2vnmvy,antiduh,1 point,Thu Feb 12 21:50:49 2015 UTC,"The day pre-orders open is the day that development is done, and testing begins. When we are in that testing stage we can release the new hardware schematics. The software side of things is mostly done, and we will soon be releasing the firmware source as well as a raspberry pi compatible version for those who wish to do any of their own testing.  To elaborate on the previous comment the reason we haven't opened up the code yet is because it's pretty much a complete rewrite. We completely ported the assembly code that HEKTOR uses to be mostly C  for a different model of embedded processor. We chose to work with an ARM based CPU instead so we could port over port over parts of OpenSSL which will facilitate our public key feature. Another reason for choosing ARM was so that hobbiests can try out the software on a Raspberry Pi if they choose to."
crypto,2vnmvy,LivingInSyn,2,Fri Feb 13 03:17:23 2015 UTC,"The day pre-orders open is the day that development is done, and testing begins.   That is the day we find bugs and stop trusting your product.  At the very least be open about your software development before release.   Additionally, crypto hardware development requires hardening and I haven't read anything yet that provides me any confidence that your device couldn't be bugged like ""the thing""."
crypto,2vnmvy,ym_twosixonetwo,4,Fri Feb 13 05:50:35 2015 UTC,"Have you tested your design with systems that use speech-model audio codecs, for example, speex, melp, lcp, or celp? Lots of audio systems use these codecs because they can achieve great fidelity in a tiny bandwidth, but they only work if the audio is speech-like; some only work if you're speaking the right language."
crypto,2vnmvy,Natanael_L,2,Thu Feb 12 16:29:53 2015 UTC,"We've done testing on a wide variety of codecs such as speex and opus, and the encryption has been successful on all of them."
crypto,2vnmvy,antiduh,5,Fri Feb 13 03:02:46 2015 UTC,Give me one reason to trust this over ZRTP
crypto,2vnmvy,ldpreload,1 point,Thu Feb 12 17:13:33 2015 UTC,"Safewire uses public key a public key negotiation algorithm similar to ZRTP. ZRTP on a phone that is compromised is useless. Safewire attached to a compromised phone, still has secure encryption. Especially today with so much malware on phones, a hardware separation of encryption is critical."
crypto,2vnmvy,C_Hitchens_Ghost,3,Fri Feb 13 03:21:48 2015 UTC,"Unlike software-based encryption, which can easily be bypassed by hackers, Safewire encrypts audio data long before it reaches the device. This means that no side-channel attacks are possible.   If we think of phones or laptops this doesn't make much sense to me. If a hacker has enough access to bypass the software encryption, it's asumable that the hacker can also activate the built-in microphone of the laptop/phone and thus make all the external encryption worthless."
crypto,2vnmvy,aydiosmio,2,Thu Feb 12 18:12:09 2015 UTC,That's why we have a soundproof sheet you can use to cover your device. We've thought of that too!
crypto,2vnmvy,antiduh,1 point,Thu Feb 12 19:44:09 2015 UTC,What degree of sound proof?
crypto,2vnmvy,frozen_in_reddit,3,Fri Feb 13 16:46:48 2015 UTC,"To illustrate the weaknesses in existing cell phone encryption, and how Safewire, can help, several scenarios can be imagined   extra comma."
crypto,2vluf8,my_reddit_at_work,10,Thu Feb 12 02:04:28 2015 UTC,You may want to look at SpiderOak.
crypto,2vluf8,DemandsBattletoads,13,Thu Feb 12 02:53:21 2015 UTC,"You may not want to look at SpiderOak.  They're based in the US (vulnerable to National Security Letters). Their products are closed source, so you won't notice the NSL forced backdoor being dropped in. Also don't log in with their mobile app or on the website, because that works differently to the desktop client and they can snoop your password in transit and it's available to them in server memory while you're logged in.  Better to use something which is open source and the provider can't access your encryption keys or password at all by design."
crypto,2vluf8,stratha,7,Thu Feb 12 10:42:43 2015 UTC,"Don't even know where to start.  NSL's cannot force a backdoor. If Spideroak held the keys, like lavabit did, they could force spideroak to hand them over. But spideroak does not hold the keys like lavabit did. Your data is encrypted before it leaves your machine with Spideroak, and there is no reason to think they aren't trustworthy. They've been around a long time and have a great reputation."
crypto,2vluf8,ManFromAnAntiqueLand,3,Thu Feb 12 15:27:46 2015 UTC,They ship a proprietary application that has access to both your keys and the network. They have full control of your keys.
crypto,2vluf8,Chandon,6,Thu Feb 12 18:18:55 2015 UTC,"I'm not sure why you are being downvoted for this. If you install closed source software and give that software your key, that software can easily ship the keys back to it's owner - if it has access to the network, and since it's sending encrypted data anyway, there is no way for you to detect this."
crypto,2vluf8,NobleSir,4,Thu Feb 12 23:25:13 2015 UTC,"Note that this applies to any software with an automatic update mechanism, proprietary or not.  Free / open source software can protect against this if combined with a couple of other properties:   Distribution in source form only or repeatable / verifiable compilation. Multi-source verification.   Unfortunately, even TOR and Bitcoin (some cases where it really matters) don't have this fully working yet. One of the cases where RMS is right is calling automatic updates the ""universal back door""."
crypto,2vluf8,Chandon,1 point,Fri Feb 13 00:53:22 2015 UTC,"You are just making shit up. They never have access to your key. A client with access to your key does not mean Spideroak does. All you are doing is for quite literally no reason assuming this company has malicious intent. Companies cannot be legally compelled to add a backdoor. Lavabit held the keys, which mean just like gmail if they wanted to they could read emails, which is why they were susceptible to court order."
crypto,2vluf8,ManFromAnAntiqueLand,3,Thu Feb 12 18:23:59 2015 UTC,"Companies cannot be legally compelled to add a backdoor.   Yes. Yes they can. In fact, the mechanisms that break Lavabit exactly apply to Spideroak. A NSL is more than enough to require a company to provide ""technical assistance"" in performing an attack against a target, which includes sending targeted updates with modified version of their software.  A NSL says ""you're going to help us and you're not going to tell anyone"". The only limits are actual technical ones, not some sort of ""I don't wanna"" defense."
crypto,2vluf8,Chandon,-1,Thu Feb 12 18:27:25 2015 UTC,"Again, you are just making stuff up that sounds plausible to you. The claim that there is no limit on what a court can order you to do is to anyone with even a cursory knowledge of the laws governing court orders laughable. Just stop.  Lavabit is exactly like gmail insofar as their access to your data. They just said ""unlike gmail we just won't look.""  To say that a court order that requires handing over data applies the same in a situation where a company holds the key and one where it doesnt is frankly laughable. That you won't even acknowledge the massive difference in those two things is telling.  This started off as a claim that lavabit didn't hold the keys and had been compelled to add a backdoor... That is only way they could give government access if they didn't hold keys.  Now the goal posts are trying to be moved, but even where they have been moved to is bullshit.  Technical assistance does not mean modifying a product to add a backdoor.  To whit, take a look at this, specifically page 4, which specifically says that reasonable technical assistance does not include helping law enforcement access encrypted data. They are only required to do what they can and provide the data to law enforcement.  http://www.documentcloud.org/documents/1373063-apple-oakland.html#document/p1"
crypto,2vluf8,ManFromAnAntiqueLand,-2,Thu Feb 12 18:41:04 2015 UTC,"Lavabit did not hold the keys to the ciphertext (stored). They allowed one way to use them in which it was sent to the server temporarily for the session, to decrypt the data (IIRC - was they using javascript encryption instead?). A backdoor was forced to relay that key to the law enforcement.   I see no reason for why they couldn't force backdoors in updates of client side code."
crypto,2vluf8,Natanael_L,4,Thu Feb 12 16:01:35 2015 UTC,"Yes, they did hold the keys.  See here:  http://www.thoughtcrime.org/blog/lavabit-critique"
crypto,2vluf8,ManFromAnAntiqueLand,-1,Thu Feb 12 16:22:51 2015 UTC,They didn't hold them in plaintext.
crypto,2vluf8,Natanael_L,-2,Thu Feb 12 17:48:29 2015 UTC,"Uh, okay...  It doesn't matter if they stored it encrypted if they have the key to decrypt it, which they did. This isn't difficult to understand, they held the keys and that is why they could be compelled by a court to decrypt."
crypto,2vluf8,ManFromAnAntiqueLand,0,Thu Feb 12 18:04:53 2015 UTC,"I don't see why they couldn't also be ordered to send backdoored Javascript, plugins, updates or anything else to get the keys. Why does ""holding"" matter and ""access"" not?   They've got no trouble doing things like this: http://arstechnica.com/tech-policy/2014/10/fbi-cut-hotel-internet-access-sent-agents-to-fix-it-without-warrants/"
crypto,2vluf8,Natanael_L,1 point,Thu Feb 12 18:17:37 2015 UTC,"That is government agents doing that, not the phone company.   If you want to know the reason why there is a difference, do some research into the legalities around it. As it stands, you are just saying stuff that sounds plausible to you but is not based in reality."
crypto,2vluf8,ManFromAnAntiqueLand,0,Thu Feb 12 18:31:26 2015 UTC,Then please provide legal sources.
crypto,2vluf8,Natanael_L,1 point,Thu Feb 12 18:35:14 2015 UTC,"When I drop the file in it, I'm still able to view the contents of the SpiderOak folder AND open the file. I want to password protect this folder even locally."
crypto,2vluf8,DemandsBattletoads,1 point,Thu Feb 12 23:56:27 2015 UTC,"In that case I suggest enclosing the file in a password-protected zip or similar compressed archive. Then put it in SpiderOak, which should sync it shortly."
crypto,2vluf8,naht_a_cop,6,Fri Feb 13 01:11:52 2015 UTC,"Boxcryptor. Or if you want a little more control (and less to pay), Boxcryptor Classic."
crypto,2vluf8,soupofthedaysauce,3,Thu Feb 12 07:33:02 2015 UTC,TOMB - https://www.dyne.org/software/tomb/
crypto,2vluf8,nullslash,5,Thu Feb 12 11:43:29 2015 UTC,"encfs on a dropbox folder, and mount it to another dropbox_encrypted directory.  Then, configure a encfs (init.local) to decrypt the folder when your computer starts up by reading a password from a file. Encrypt your harddrive with luks."
crypto,2vluf8,whamboom,4,Thu Feb 12 06:53:05 2015 UTC,Some security problems have been found with encfs. See https://en.wikipedia.org/wiki/EncFS#Security
crypto,2vluf8,stratha,4,Thu Feb 12 23:00:55 2015 UTC,Works until the Dropbox closed source client just steals your encfs password and sends it to the NSA.
crypto,2vluf8,dareksam,7,Thu Feb 12 10:48:07 2015 UTC,"Use selinux rules to prohibit dropbox from reading the file. Or better yet, just decrypt the folder when needed with a password from a PW safe.  Or better yet: don't run dropbox as root."
crypto,2vluf8,umlal,3,Thu Feb 12 16:12:32 2015 UTC,"How,  aren't they stored on RAM?"
crypto,2vluf8,Natanael_L,2,Thu Feb 12 11:02:36 2015 UTC,And the client would read that RAM
crypto,2vluf8,dareksam,1 point,Thu Feb 12 16:01:59 2015 UTC,Only possible if dropbox is run as root.
crypto,2vluf8,C_Hitchens_Ghost,2,Thu Feb 12 16:15:42 2015 UTC,Not true.
crypto,2vluf8,dareksam,2,Thu Feb 12 17:09:33 2015 UTC,"Now, I am no programmer, but how would a process go about reading another process' memory (like encfs that probably has some means for memory protection) without some sort of privilege escalation?  Not trying to be an arse. I am genuinely curious."
crypto,2vluf8,Natanael_L,2,Fri Feb 13 07:39:31 2015 UTC,"To get reliable memory protection, your software has to run in a more protected area than in a standard user account."
crypto,2vluf8,dareksam,2,Fri Feb 13 16:42:14 2015 UTC,"Ubumtu has been blocking ptrace since 2012, and fedora does it as Well. I don't know what kind of voodoo is required to read another process' memory now."
crypto,2vluf8,Natanael_L,1 point,Fri Feb 13 21:31:45 2015 UTC,"Dropbox is running in the user account, not as a system service. There's no sandbox or other protection of the RAM."
crypto,2vluf8,dareksam,1 point,Thu Feb 12 17:43:58 2015 UTC,"Now, I am no programmer, but with standard permissions, wouldn't the encfs memory be protected by virtual private memory?"
crypto,2vluf8,Natanael_L,1 point,Fri Feb 13 07:28:09 2015 UTC,"If used for full disk encryption and running as a system service, yes. If running in a user account, no."
crypto,2vluf8,dareksam,1 point,Fri Feb 13 09:01:32 2015 UTC,I am genuinely curious: how would one go about reading the memory of another process without privilege to do so? Denying ptrace is easy enough.
crypto,2vluf8,Natanael_L,1 point,Fri Feb 13 11:46:48 2015 UTC,"If they're running in the same account, there's no kernel enforced protection, there's no real isolation. At worst you kill the process and start it again with your own code injected."
crypto,2vluf8,Twylite,2,Fri Feb 13 12:01:47 2015 UTC,"SpiderOak does what you're looking for, but (as others have pointed out) they are US based and potentially vulnerable to NSLs if you're looking for that sort of privacy.  Another approach is to use ZPAQ in journaling mode with an encryption password to back up a local folder into your dropbox folder.  ZPAQ performs deduplication and compression, and in journaling mode will keep a full history of your changes."
crypto,2vluf8,ManFromAnAntiqueLand,1 point,Thu Feb 12 13:03:52 2015 UTC,"The whole point of spideroak is that they don't have access to the key for your encrypted data, which makes an NSL or other court order basically useless."
crypto,2vluf8,Chandon,3,Thu Feb 12 15:23:34 2015 UTC,"Let's imagine how this goes:   A court orders SpiderOak to hand over your documents. They say ""no can do, we don't have the keys"". The court says ""so get the keys"". They say ""no can do, they're on the user's machine"". The court says ""so have your program send you the keys"". SpiderOak is like ""fine, whatever"" and avoid being held in contempt of court."
crypto,2vluf8,ManFromAnAntiqueLand,1 point,Thu Feb 12 18:22:08 2015 UTC,"That is completely deaf to the legal realities of court orders, and what a court can and cannot order.  If you can read files, you have to give the government access if they have a valid court order. Lavabit resisted, and Ladars argument was that he was only required to install the traffic recording device to his box, but he was not required to decrypt it. Given he held the keys though, he was required to decrypt it. This in no way required him to modify the product or add a backdoor. His suggested solution was to modify the product so that only the users specified could be seen, but the government rejected that and then sought the ssl key which they got.  Just saying ""a court could order a back door"" is meaningless because it is well established that courts cannot order companies to make their products less secure in order to allow government spying."
crypto,2vluf8,rya_nc,1 point,Thu Feb 12 18:29:47 2015 UTC,https://en.wikipedia.org/wiki/Hushmail#Compromises_to_email_privacy
crypto,2vluf8,autowikibot,1 point,Thu Feb 12 23:22:39 2015 UTC,"Section 6. Compromises to email privacy of article  Hushmail:       Hushmail received favorable reviews in the press.   It was believed that possible threats, such as demands from the legal system to reveal the content of traffic through the system, were not imminent in Canada, unlike the United States, and that if data were to be handed over, encrypted messages would be available only in encrypted form.  Developments in November 2007 led to doubts among security-conscious users about Hushmail's security and concern over a backdoor. The issue originated with the non-Java version of the Hush system. It performed the encrypt and decrypt steps on Hush's servers and then used SSL to transmit the data to the user. The data is available as cleartext during this small window; the passphrase can be captured at this point, facilitating the decryption of all stored messages and future messages using this passphrase. Hushmail stated that the Java version is also vulnerable, in that they may be compelled to deliver a compromised java applet to a user.    Hushmail turned over cleartext copies of private email messages associated with several addresses at the request of law enforcement agencies under a Mutual Legal Assistance Treaty with the United States.;  e.g. in the case of U.S. v. Tyler Stumbo.    In addition, the contents of emails between Hushmail addresses were analyzed, and 12 CDs were turned over to U.S. authorities. Hushmail privacy policy states that it logs IP addresses in order ""to analyze market trends, gather broad demographic information, and prevent abuse of our services.""      Interesting: Comparison of webmail providers | The Farmer's Market | The Broker | Pretty Good Privacy   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2vluf8,Chandon,1 point,Thu Feb 12 23:23:03 2015 UTC,"Look at the Lavabit case.  The FBI added a machine to the network that snooped on traffic, and the court mandated that Lavabit hand over their SSL keys so the snooping could work.  The FBI could add a machine to the Spideroak network that intercepted some requests to the update server, and have the court order Spideroak to give up their SSL authentication keys to allow the machine to spoof updates.  These are techniques that the US government has already been shown to use in the NSA leaks."
crypto,2vluf8,ManFromAnAntiqueLand,0,Thu Feb 12 18:48:50 2015 UTC,"Ugh... You are just so incredibly off it amazes me you speak so confidently.  They could be ordered to hand over the keys because They held the keys. If you don't hold the keys, you can't be mandated to hand them over because you don't have them.  You go from that to ""then the government can just order them to add a backdoor,"" with nothing to substantiate that.  There is not a single example of that happening. Ever. Indeed, it isn't legally permissible. The technical assistance companies have to provide is in one instance limited to assistance installing the device, and in another instance limited to installation and operation. There is no law that allows the government to force a company to add a backdoor. There is a law that forces telecommunications companies to structure their networks so they are easily reliable, but those laws do not apply to IT companies.  Go read the court documents in the lavabit case like I have, and then come back here.  The idea that courts can order a company to do anything they want is just absurd. There are limits as per the law that governs the orders courts can give."
crypto,2vluf8,Chandon,3,Thu Feb 12 18:59:37 2015 UTC,"Ladar Levison thought that it was beyond the pale for him to have to hand over his private SSL key. The court ordered him to.  A court case may turn on the minor technical distinction between law enforcement being allowed to add machines to a network to passively snoop versus adding machines to a network to forge responses. It's also possible that the court won't see the difference and will order whatever it takes to make the wiretap work.  It's even possible that the key to enable snooping and the key to enable update forgery are the same key. In that case, if the court orders turning the key over for snooping then law enforcement can use it for forgery.  We already know that the US government uses active attacks to enable interceptions in the form of various NSA methods, and that the FISA court has made no move to stop their use.  The real question is this: Do you want your security to hinge on a detail of legal interpretation, or do you want actual technical security?"
crypto,2vluf8,Natanael_L,1 point,Thu Feb 12 19:57:19 2015 UTC,What about RSA the company and Dual EC DBRG?
crypto,2vluf8,ManFromAnAntiqueLand,-1,Thu Feb 12 19:10:58 2015 UTC,"What about them? They did things willingly, they were not forced by court order."
crypto,2vluf8,phyzome,1 point,Thu Feb 12 19:49:35 2015 UTC,Just thinking... it would either have to hold a key in memory or be append-only without auth.
crypto,2vluf8,Natanael_L,4,Thu Feb 12 02:12:23 2015 UTC,Append-only until unlocked and processed? You could use a public key for encryption.
crypto,2vluf8,autotom,3,Thu Feb 12 04:43:44 2015 UTC,what about a PGP system? It could encrypt with public key.
crypto,2vluf8,jus341,2,Thu Feb 12 06:46:18 2015 UTC,I wonder of there's any demand for a system like that. People could send encrypted files to people. Journalists could have profiles for people to send them files. The uploader would have to trust the service not to save a copy unencrypted.
crypto,2vluf8,aydiosmio,2,Thu Feb 12 07:26:52 2015 UTC,"PGP or GPG. There's a thing called a key server. You upload your public key and people can look you up in it. You can put the fingerprint or key id on your business card or email signature to make finding your authentic entry (and not someone prentending to be you) easier.  More commonly, people just post their keys on their website or share the public key via e-mail.  You don't need to trust a service. A website can do this encryption and decryption in-browser for the lazy. In fact, HTML5 even has a tag that generates an RSA keypair (and submits the public key as a form value if desired). The problem with PK is that people don't really ""get it"". I work in the security industry and even a large majority of my cohorts in the private sector don't bother to use PGP to encrypt e-mail attachments. Instead, resorting to Zip encryption or similar, which is many orders of magnitude less secure. It doesn't help that Symantec basically killed off PGP desktop, while making it virtually impossible to use as time went on, instead of improving it.  Of course, the scenario you suggest doesn't consider anonymity, so it's not very journalist-friendly. There are solutions for that, like TOR."
crypto,2vluf8,phyzome,2,Thu Feb 12 09:22:26 2015 UTC,"You can put the fingerprint or key id on your business card or email signature to make finding your authentic entry (and not someone prentending to be you) easier.   Note of caution: Don't just use the short, 8-character fingerprint. Those can be forged these days. :-("
crypto,2vluf8,aydiosmio,3,Thu Feb 12 12:34:44 2015 UTC,Link for the lazy: http://www.asheesh.org/note/debian/short-key-ids-are-bad-news.html
crypto,2vluf8,C_Hitchens_Ghost,1 point,Thu Feb 12 20:09:49 2015 UTC,"I wonder of there's any demand for a system like that.   Most definitely.   The uploader would have to trust the service not to save a copy unencrypted.    Why should the server ever know what kind of data you are sending? It shouldn't know the filename and should have a maximum size of the file, not the actual."
crypto,2vluf8,Captain_Swing,1 point,Thu Feb 12 17:12:56 2015 UTC,Both Code42 and Backblaze have on premises personal keys as a free option.
crypto,2vj0rc,GrayCipher,5,Wed Feb 11 11:59:55 2015 UTC,"The problem here is the use of v3 keys, right? Such keys are no longer supported by GnuPG as of version 2.1, which was released in November 2014. (The originally-linked message is from October 2014.)  If one is using GPG 2.1.x, is there any reason to worry about the issue presented here?"
crypto,2vj0rc,MileyCylon,1 point,Wed Feb 11 17:08:58 2015 UTC,"I think creating keys are no longer supported, but GNUPG seems to support keys decades old."
crypto,2vj0rc,conradsymes,1 point,Sun Feb 15 00:14:59 2015 UTC,"I believe you should be fine with 2.1.x, although I do not know for certain; however, for those people using GPGTools for Mac OS X, or whose Linux distributions have not updated their versions of GPG this could be a concern."
crypto,2vlgmu,FAPINATOR9KYOLO,3,Thu Feb 12 00:05:01 2015 UTC,"This is the right sub, but is this a homework problem or something?  Differential privacy is inherently a statistical statement over the release mechanism.  If your release mechanism is a deterministic algorithm, then the probabilities will always be either 0 or 1, and thus have an insurmountable multiplicative gap (or be trivial)."
crypto,2vlgmu,DoWhile,1 point,Thu Feb 12 00:19:03 2015 UTC,"Oh right... And thats why adding noise / salt is important... Thank you !  Edit. Yes, sort of homework. Why ? Is it forbidden to ask questions around here if they have smth. to do with education ? I asked a few theoretical questions about different topics and nobody seemed to bother."
crypto,2vlgmu,Natanael_L,5,Thu Feb 12 00:33:22 2015 UTC,"Typically people expects you to work for your homework, which means no straight answers of the kind you can copy and paste, but instead pointers you can follow"
crypto,2vlgmu,C_Hitchens_Ghost,1 point,Thu Feb 12 04:41:02 2015 UTC,but instead pointers you can follow    I blame C.
crypto,2vjp1l,partyboy690,5,Wed Feb 11 16:09:11 2015 UTC,"Hashcat.net has numbers, and software.   The nvidea cards incidentally are ahead this month, they play leapfrog.  Cracking DES isn't that interesting because... Who even still uses it?"
crypto,2vjp1l,R-EDDIT,5,Wed Feb 11 21:43:49 2015 UTC,You'd be horrified to discover where it is still used. It's so easy to get a PCI exemption because you don't want to update an old system.
crypto,2vjp1l,babtras,2,Thu Feb 12 00:04:46 2015 UTC,Apparently BMW does :P  http://www.heise.de/ct/artikel/Beemer-Open-Thyself-Security-vulnerabilities-in-BMW-s-ConnectedDrive-2540957.html
crypto,2vjp1l,Docmandu,1 point,Fri Feb 13 11:35:55 2015 UTC,"Thanks, I hadn't seen the details.  Asn1c  and 56bit des, its a vulnerability researchers dream."
crypto,2vjp1l,R-EDDIT,1 point,Fri Feb 13 12:43:34 2015 UTC,"Thanks for that, I have no interest in cracking DES, I'm doing a presentation at work on Friday about AES-GCM and other newer encryption schemes like the elliptical curve asymmetric stuff and I wanted some source on how easy it is to crack DES in the modern day with something like an AMD GPU."
crypto,2vjp1l,cartogram,1 point,Wed Feb 11 21:52:25 2015 UTC,"Also, ""des cracking"" on GPU's is typically attempting to crack descrypt. DEScrypt is significantly easier to crack because the plaintext is static and the key is just the password (no key derivation algorithm) [1]  While it's not GPU based, Pico Computing built an FPGA appliance which can crack any DES key in under 23 hours [2].   David Hulton's company, Pico Computing, specializes in building FPGA hardware for cryptography applications. They were able to build an FPGA box that implemented DES as a real pipeline, with one DES operation for each clock cycle. With 40 cores at 450mhz, that's 18 billion keys/second. With 48 FPGAs, the Pico Computing DES cracking box gives us a worst case of ~23 hours for cracking a DES key, and an average case of about half a day."
crypto,2vjp1l,babtras,1 point,Thu Feb 12 00:05:45 2015 UTC,"Thanks for that information, its quite useful, I just want to present information yo my colleagues but actually have sources to back it up."
crypto,2vjp1l,Natanael_L,1 point,Thu Feb 12 07:46:09 2015 UTC,"DES, or any symmetric algorithm, isn't normally used for password protection. Though I'm sure there are some exceptions.    Benchmarks for hash functions would be more helpful"
crypto,2vjp1l,Dillinur,2,Thu Feb 12 00:06:39 2015 UTC,Isn't normally and generally shouldn't be but you'd be surprised unfortunately :(
crypto,2vjp1l,xkcd_transcriber,2,Thu Feb 12 07:44:57 2015 UTC,"Adobe used it until recently, when the db got leaked and hackers played sudoku with it's ECB mode outputs"
crypto,2vjp1l,Creshal,2,Thu Feb 12 19:47:21 2015 UTC,Relevant xkcd
crypto,2vgna1,Natanael_L,6,Tue Feb 10 21:38:03 2015 UTC,"I wish for decent web-browser security.  The Slobbovian Post Office should not be able to authenticate my session with California's state tax authority.  I should be able to browse to eff.org, even if I don't trust its authority, because I don't care all that much.  Perspectives is cool, but clunky and not there yet (in fact, it's warning me about this site right now).  Certificate Patrol is an unending blizzard of warnings."
crypto,2vgna1,pkpearson,4,Wed Feb 11 05:59:07 2015 UTC,"The Slobbovian Post Office should not be able to authenticate my session with California's state tax authority.   If I recall there was an attempt to put ""authorized domains"" into CA cert restrictions. I don't remember exactly why this was unworkable, I imagine it had to do with quickly becoming a management nightmare; how do you specify that ""GEO Trust Root CA"" (for example) is able to certify all the domains it already does indirectly?   I should be able to browse to eff.org, even if I don't trust its authority, because I don't care all that much.   I think a UX overhaul would go a long way towards this. (Actually, a UX overhaul on many strong security tools would go a long way, but that's another rant....) We should have 4 unambiguous security ""levels"", and none of them should have the word secure because that is way too ambiguous. Bare with me for the analogy; I think if we explain it this way, most people would get it.   Insecure: you are shouting in a bar to a waiter who is shouting to the kitchen. Expect to be ""overheard"" by every machine in ""earshot"". Some machine in the communication path (e.g.: the waiter) may play ""telephone"" and misrepresent what you say to the cook or what the cook says to you. Some machine in earshot or in the communication path is undoubtedly recording everything you say. Encrypted: your conversation is confidential to outsiders, but you might not be talking to who you think you are. Although no one can ""overhear"" your conversation, any machine in the communication path may still save or alter the conversation before relaying it. Encrypted and Authenticated by Someone: The world has decided to trust someone who says you are talking to who you think you are. Encrypted and Personally Authenticated: You have decided you can trust the owner of this cert or CA cert.   So far, in terms of UA visibility, all we have is #1 and #3. If clear indications of level #2 were prevalent we could HTTPS pretty much the entire web overnight, because #2 is fine for 90% of the web. But right now #2 is treated like #1 - this is a safe default, but it hinders widespread HTTPS adoption. #4 can be done right now with browser plugins or editing your machine databases directly, but it is a serious pain; and it conflates with #3 (unless you eject all 200-some default CAs from the trust store, but I think that #3 still has its place).  Easy to use facilities should exist to ""bless"" #2 or #3, promoting it to #4. It should go without saying that withdrawing the blessing should also be easy. (Demoting #3 to #2 should also be possible; perhaps we need a ""Compromised"" companion to Insecure....) Any facility for promotion or demotion should allow the user to add notes as to why. Conflicts should be readily visible; e.g. ""You've decided to trust Mybank's CA, and distrust Mybank's ROOT_CA because 'key was stolen'""; and the UI should allow an easy resolution of the conflict. For example, last time I heard about it, StartSSL refused to break with their policy, demanding a charge to revoke certs even after the news about heartbleed. I don't know how many people decided not to revoke their free certs, but it doesn't give me a warm fuzzy for the next year. (Come to think of it, we could have some sort of rules engine for power users to promote or demote automatically....)  In case you can't tell, I've been thinking about this a lot over the last month or so.  Unfortunately, I don't think this is really workable. For example, eff.org might be fine at #2 today, but if you want to donate regularly and save your credit card info with them, level #2 is wholly inappropriate. Unless we have some system to automatically categorize sites into requiring a certain security level. (You could trigger it once there's a form with a password-type input, but by the time that form shows up it's too late, you need to discard your previous history and cookies and javascript and reload....) I think however what I've outlined is at least a step forward, at the arguably significant cost of end-user complexity."
crypto,2vgna1,beltorak,5,Wed Feb 11 08:08:05 2015 UTC,"I've been thinking about this for over a year now, and I fully agree. It's not the technicalities that's the real problem, but showing clearly what's what and explaining the difference between them.   I've argued that unauthenticated+encrypted is more secure than unauthenticated+unencrypted - the most often seen argument against is that if people don't understand it, it can be worse than no security (user thinks s/he's protected, but can be MitM'ed). While I agree that's a good point, I am of the opinion that it's an UX issue, not a crypto issue."
crypto,2vgna1,TheTerrasque,2,Wed Feb 11 09:08:10 2015 UTC,"TOFU is ""good enough"" for most things, especially if TOFU has been bootstrapped, and your trust database can be shared across devices, that solves most of the sensitive information problem since you won't have any sensitive information entered to access before trusting their key. It doesn't address things like entering credit card into sites for the first time, but it seems like authorized transactions for specific amounts (like bitcoin) would solve some of that problem."
crypto,2vgna1,FryGuy1013,2,Thu Feb 12 00:03:00 2015 UTC,"The only problem I see with your UX example is the naming. A layman sees ""Encrypted"" and thinks ""ooh that's secure!"" without ever reading into it."
crypto,2vgna1,gsuberland,1 point,Tue Mar 31 23:55:10 2015 UTC,"there is only so much we can do. people see ""email"" and think ""ooh, that's private!"". should we stop calling it ""email""?  I'm open to other ideas."
crypto,2vgna1,beltorak,2,Wed Apr 1 00:02:04 2015 UTC,"We shouldn't stop calling it email. We should point out that it isn't encrypted, and may be read by certain third parties.  I think the existing warnings around unauthenticated pages are important to keep. While I agree that they're not perfect, and more information should be given, some level of ambiguity is inherent in keeping the language simple enough to be understood by non-technical persons.  I much prefer the description of impacts, rather than failure cases:   ""Anyone can read the data you give to this site, so don't give out any sensitive information"". ""You might not be talking to the person that you think you are. Be careful what information you give out"". ""This page is encrypted and authenticated. Your communications should be safe against eavesdroppers.""   Providing the exact reason for the impact, and the technical details, should be something that's in the page or warning body, beyond the headline. People will skim-read or just read the headline, so engineering correct user behaviour using the headline alone is critical."
crypto,2vgna1,gsuberland,1 point,Wed Apr 1 00:11:46 2015 UTC,"I can see that; I'm not sure if I agree, but I can see your point. How about an IE mode where it shows you the ""human"" language, and something more precise for those of us who have the knowledge?  I have a feeling that most people wouldn't read it and wouldn't be able to describe it over the phone - you know for when the tech savvy family member is playing tech support. I think we'd need some serious usability studies."
crypto,2vgna1,beltorak,2,Wed Apr 1 00:28:41 2015 UTC,I thought about this. Maybe one could use hpkp to pin self signed certs for unauthorized websites and this minimizing the attack window with lots. Cost would be none. Just an hour to set it up.
crypto,2vgna1,dareksam,1 point,Wed Feb 11 10:12:07 2015 UTC,"Personally: I think certificates should be self-signed, but we have Perspectives-like network notaries that check if there's a MITM attack if they are receiving a different certificate than you are or if there's an unusual certificate change in the past few days."
crypto,2vgna1,conradsymes,2,Tue Feb 17 07:37:16 2015 UTC,I'd like to stop seeing X.509 certs on Tor hidden services. The CA model sucks and Tor doesn't need it.  I also can't wait for textsecure support on iOS.
crypto,2vgna1,ZaphodsOtherHead,3,Wed Feb 11 10:38:52 2015 UTC,I'd like to stop seeing X.509 certs entirely.  That format was not designed to be implemented by mortals.
crypto,2vgna1,lighthill,1 point,Wed Feb 11 14:51:14 2015 UTC,"I agree. I am working on a protocol that only needs to get the public key, without the addition CA infrastructure and the complexity of X.509  I do not have -yet- a format to easily transmit public keys, though.  Suggestions? An ad-hoc one might do the job, but if there's a simple format I'd like not to reimplement the wheel."
crypto,2vgna1,Luker88,3,Wed Feb 11 19:44:01 2015 UTC,"The SSH key format (particularly the newer one) should work fine.  Alternatively, consider just using the raw keys as integral values - the nacl libraries use 32 bytes for the public key and 64 for the private (one and two integers respectively)."
crypto,2vgna1,tom-md,1 point,Sun Feb 15 15:18:07 2015 UTC,"Look at the formats used in Bitcoin projects, like stealth addresses"
crypto,2vgna1,stratha,1 point,Wed Feb 11 20:06:45 2015 UTC,JSON
crypto,2vgna1,conradsymes,1 point,Thu Feb 12 10:53:04 2015 UTC,"I agree. I am working on a protocol that only needs to get the public key, without the addition CA infrastructure and the complexity of X.509   Personally: I think certificates should be self-signed, but we have Perspectives-like network notaries that check if there's a MITM attack if they are receiving a different certificate than you are or if there's an unusual certificate change in the past few days."
crypto,2vgna1,stratha,2,Tue Feb 17 07:38:07 2015 UTC,Doesn't using a closed source OS (especially from a US provider) defeat the purpose of using an encryption app running on that OS?
crypto,2vgna1,ZaphodsOtherHead,1 point,Thu Feb 12 10:51:51 2015 UTC,"In theory, it could. In practice, I kind of doubt it. With cell phones there are a few things to consider. The first is that the most important information (the metadata) is being leaked regardless of what kind of OS you run.The second is that backdoors are probably not what you need to watch out for. I think it's more likely that an adversary will try to own your phone, which is a lot harder if you're on iOS than it is if you're on android. The third thing is that a piece of technology isn't necessarily bad if they don't stand up to the NSA. There are all sorts of possible adversaries out there. Sometimes we don't need to beat the NSA, we just need to beat the cop down the road.  I don't like using proprietary software, but it seems to me that an iphone with signal on it is basically as secure a mobile phone as you can get (which isn't saying much)."
crypto,2vgna1,wbrows,2,Thu Feb 12 19:24:23 2015 UTC,I would like to see BTNS in the Linux network stack.
crypto,2vgna1,gsuberland,2,Wed Feb 11 19:58:40 2015 UTC,"I would like to see TLS vNext switch to CBC-then-MAC for all CBC-mode ciphers. Authenticated modes like GCM and EAX are difficult to properly implement, and won't be seen for a long time on a lot of platforms.  We're going to be seeing legacy suites for at least a decade, so getting rid of MAC-then-CBC is a small change which would get us away from all those nasty padding oracle bugs. I'm honestly surprised TLS1.2 didn't do it already."
crypto,2vgna1,DoWhile,1 point,Wed Apr 1 00:02:30 2015 UTC,Posted 3 days so? You might get more visibility in the new thread for April
crypto,2vgna1,phyzome,1 point,Sat Apr 4 20:06:26 2015 UTC,Funny enough it didn't take long for the top poster in the previous thread to get his wish through. GPG now has secure funding for years to come.
crypto,2vgna1,StruanT,2,Tue Feb 10 21:40:25 2015 UTC,"We did it, reddit!  Seriously though, is it a sustainable model?  Matt Green's thoughts on his blog"
crypto,2vgna1,rosulek,1 point,Tue Feb 10 23:02:40 2015 UTC,"Thanks for linking to the previous one! Good idea.  Updated sidebar. You can also use the ""report"" button with a custom message to make sure I see the new thread. :-P"
crypto,2vgna1,StruanT,1 point,Tue Feb 10 22:59:13 2015 UTC,Where could an index of links (for reference of old threads) be saved in public? Wiki page?
crypto,2vgna1,FryGuy1013,2,Tue Feb 10 23:01:44 2015 UTC,I kind of like the idea of a linked list.  Wikis are trouble because they aren't well integrated. I'm still not sure how to use them effectively.
crypto,2vgna1,stratha,1 point,Wed Feb 11 02:34:42 2015 UTC,I would like users to be able to decide what level of encryption they want for their traffic and websites to accommodate the user rather than vice versa.
crypto,2vesry,johnmountain,6,Tue Feb 10 12:23:22 2015 UTC,"Both the author and the blog commenters point out that many projects would benefit greatly from general project-leadership guidance: documentation, a good test suite, channels for the community to easily help and be helped, consistent and sensible ux decisions, better marketing, etc. The tone, however, is a bit different between them; Mr. Green views this as the thing we should donate to get, while the others seem to want those results first, to justify their donations.  In reality, it probably needs to be a bit of both. Without resources, it's hard to make changes (especially on such ""unimportant"" things). But it's also important to have some amount of validation; some projects will never produce something good no matter how much money and support you give them, short of replacing the entire team and scrapping all the code (and then isn't it a new project?)."
crypto,2vesry,xiongchiamiov,2,Tue Feb 10 17:19:55 2015 UTC,"If bitcoin had 1% of block rewards donated to bitcoin-related public goods, it's price would be far more than 1% higher now.  Ethereum shows that blockchains are a lot more than just money, and organizations can be build ontop of them.  I want to put those two together. How to organize that is tricky though."
crypto,2vapme,happytux,10,Mon Feb 9 13:27:00 2015 UTC,"They posted a nice blog post recently:  https://blog.whiteout.io/2015/02/06/making-pgp-key-management-invisible-so-johnny-can-encrypt/  The key exchange problem is hard. For example, I have several lost PGP keys bouncing around keyservers that I can't revoke. After the first few, I learned that I need to set reasonable expiration dates on the keys.   I think the work that the Keybase.io folks are doing can help where you can verify your identity via different social media platforms. It would be great if they would work with the existing key infrastructure to update the keys when they've been signed by other people.  The HackerNews comments are quite good: https://news.ycombinator.com/item?id=9010894"
crypto,2vapme,BostonEnginerd,8,Mon Feb 9 14:04:54 2015 UTC,"GnuPG should really make it very difficult to create non-expiring keys. They are really never worthwhile. I think people set their keys to never expire because they don't understanding that they can change the expiry date at any time, even after they have expired. There's really no risk to setting an expiry date, but losing control of non-expiring keys really sucks."
crypto,2vapme,NeuroG,8,Mon Feb 9 14:58:51 2015 UTC,This is where we need sane defaults. gpg --gen-key has non-expiring keys as the default.
crypto,2vapme,BostonEnginerd,2,Mon Feb 9 15:16:55 2015 UTC,"GnuPG should really make it very difficult to create non-expiring keys. They are really never worthwhile.   They are very much worth while. When you generate a keypair, you should also be generating a revocation certificate, and that certificate should be printed on paper, and stored in a secure location. If you lose the key (and the revocation cert), you can still type in the printed copy by hand.  Expiration dates allow the owner to be lazy, by not properly protecting their keypair (including backups). Should they lose their key by not backing up their keys, it expires naturally on the server.  If you don't care about building a long term web  of trust with your key, and you don't mind telling people to always update their keyrings with you new keys, then expiration dates can be fine. But forcing expiration dates on people means cluttering up the key servers, not expanding the web of trust, and just further limiting its overall use."
crypto,2vapme,atoponce,6,Mon Feb 9 15:55:56 2015 UTC,"You don't need to create new keys. You just update the expiration times. Your contacts need to be polling keyservers once in a while anyway or they would never get your revocation certificates. If they do that, they will also get your updated keys. Keyservers do not get cluttered with expired keys, they are cluttered with lost keys. Expired keys (and revoked keys) have no consequence to the security of the system, including the web of trust, lost keys do.   Expiration times supplement revocation certificates, they are not an alternative."
crypto,2vapme,NeuroG,2,Mon Feb 9 16:18:08 2015 UTC,And continuously extending your expiration date is more work than just not setting one. People already aren't using OpenPGP because it's to much maintenance. Why would adding more maintenance be a good thing?
crypto,2vapme,atoponce,2,Mon Feb 9 16:43:05 2015 UTC,what are the weaknesses in this?
crypto,2vapme,aliceandbob,2,Tue Feb 10 00:55:27 2015 UTC,As alwats with gpg you don't have forward secrecy.
crypto,2vaaaj,stratha,2,Mon Feb 9 09:28:49 2015 UTC,use an buffer which should be faster and allow you to overwrite data.  Feel free to take a look at my chacha20 library (which is intended to be used with browserify so also uses browserify buffers).
crypto,2vaaaj,cwmma,1 point,Mon Feb 9 10:27:10 2015 UTC,"Do you know what JavaScript functionality that Browserify is using natively?  There is the ArrayBuffer which would match up nicely with the Uint8Array view. I use the Uint8Array already for some calculations, but it might be a lot faster to keep all the data in that buffer and not convert back and forth from it.  developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer?redirectlocale=en-US&redirectslug=Web%2FJavaScript%2FTyped_arrays%2FArrayBuffer  developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array"
crypto,2vaaaj,cwmma,1 point,Wed Feb 11 09:26:37 2015 UTC,Uint8Array if it's available buffer if not see the package
crypto,2vagcd,Zev191,10,Mon Feb 9 11:12:48 2015 UTC,What is your thesis?  You haven't really stated it.  Also a thesis on RNGs would be more productive.  The reason people don't use OTPs in general is the lack of key distribution so you're better off not doing a thesis on that.
crypto,2vagcd,dino_silone,1 point,Mon Feb 9 12:19:29 2015 UTC,"Ah yes, I was quite vague there. I've been given quite a broad spectrum by my supervisor so cryptography in general. RNGs was one of my potential topics considering how obtaining true randomness using other sources of entropy does look very interesting."
crypto,2vagcd,autowikibot,1 point,Tue Feb 10 09:39:04 2015 UTC,"This Wikipedia article would be a good place to start:  http://en.m.wikipedia.org/wiki/One-time_pad  I think it addresses a lot of the issues you mention, at least at a high level, and lists references."
crypto,2vagcd,marklarledu,1 point,Mon Feb 9 14:15:27 2015 UTC,"One-time pad:       In cryptography, a one-time pad (OTP) is an encryption technique that cannot be cracked if used correctly. In this technique, a plaintext is paired with a random secret key (or pad). Then, each bit or character of the plaintext is encrypted by combining it with the corresponding bit or character from the pad using modular addition. If the key is truly random, is at least as long as the plaintext, is never reused in whole or in part, and is kept completely secret, then the resulting ciphertext will be impossible to decrypt or break.    It has also been proven that any cipher with the perfect secrecy property must use keys with effectively the same requirements as OTP keys.  However, practical problems have prevented one-time pads from being widely used.    Image from article i     Interesting: Stream cipher | Caesar cipher | Gilbert Vernam | Diplomatic cable   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2vagcd,Westicle,1 point,Mon Feb 9 14:15:51 2015 UTC,"OTP is pretty well studied but there is always more to learn. That said, I think there are more interesting topics you could use. I am not sure if you are going for a more theoretical or applied type of thesis so more info would help. If you wanted to go the applied route and be very relevant to the issues going on in the world today you could discuss ring signatures and their applications to whistle blowing. This has also been discussed before but there is still plenty of room to expand."
crypto,2v0hfm,_tanx_,7,Fri Feb 6 19:11:24 2015 UTC,"How about storing keys in a bitcoin type blockchain / distributed database which anyone can have a copy of.  This kind of thing would eliminate the monitoring of keyserver requests.  Edit: This couldn't be done in Bitcoin itself but it would need to be something similar, a massively distributed and authenticated database."
crypto,2v0hfm,samsonx,1 point,Sat Feb 7 00:23:56 2015 UTC,"FYI, Bitcoin already uses Merkle tree hashes. Although Namecoin don't (yet) use an efficiently searchable implementation of it for registered names."
crypto,2v0hfm,Natanael_L,4,Sat Feb 7 06:22:22 2015 UTC,namecoin can already store gpg key fingerprints.
crypto,2v0hfm,ehempel,6,Sat Feb 7 22:06:54 2015 UTC,"I'm not a fan of this security tradeoff.  If someone cares enough to encrypt at all, then they want actual security. To get actual security, you need to actually validate identities. That means having key fingerprint validation as a major UI element.  Keyservers with send-an-email validation are a reasonable first step for key distribution, but if you let it stop there that's where it will stop. And at that point the keyserver or anyone who can do a MITM owns the entire system."
crypto,2v0hfm,Chandon,3,Sat Feb 7 01:12:20 2015 UTC,"I'm extremely unconvinced of the trustworthiness of central keyservers myself, but I think the most fundamental problem we have is that the majority of e-mail clients just don't do useful encryption or signing at all.  I think what we really need is for encryption to become routine. When that happens we can start adding identity verification (at worst; I'd hope the designers would think of it).   but if you let it stop there that's where it will stop   I think that's always where it's going to stop for most communication: people simply don't care enough to routinely check fingerprints, or really do anything beyond clicking ""Send"".  But there should be a path with more assurances for those that do care, and I think that can be tacked onto virtually any vaguely sane secure system (via Tools -> Show My Fingerprint if all other inspiration fails)."
crypto,2v0hfm,TNorthover,2,Sat Feb 7 03:28:38 2015 UTC,The only value to unauthenticated encrypted traffic is as cover for authenticated encrypted traffic. That's not much value - there's plenty of random encrypted data flying around with TLS.  Just encrypting stuff (the easy part) and not worrying about authentication (the hard part) is super tempting. So tempting that it's basically the standard indicator of a novice cryptosystem designer.
crypto,2v0hfm,Chandon,1 point,Sat Feb 7 05:37:58 2015 UTC,"I'm extremely unconvinced of the trustworthiness of central keyservers myself, but I think the most fundamental problem we have is that the majority of e-mail clients just don't do useful encryption or signing at all.   TOR uses a federation of key servers. It's sort of a chicken and egg problem of authentication."
crypto,2v0hfm,conradsymes,2,Sat Feb 7 16:08:29 2015 UTC,"'If you wish to make an apple pie from scratch, you must first invent the universe.'   How do you define actual security? Are you sure the program isn't backdoor'ed? That the binary is not tampered with? That your OS is trustworthy, your compiler is not nefarious, and your silicon is reliable?  Security is a sliding scale, at which point on the scale is it so low it's better to not have any security?"
crypto,2v0hfm,TheTerrasque,1 point,Sun Feb 8 21:59:20 2015 UTC,"Security is less like a sliding scale, and more like a bunch of steps of different sizes. It's possible to have partial security, but some security guarantees are much more important than others.  If you physically deliver a paper copy of a letter a heavy envelope to a person you know, that's pretty close to 100% secure. Nobody read the letter, because you were watching the envelope in transit. They know it's you and you know it's them because you recognize each other.  If you communicate with a specific person by leaving a printed letter pinned on a public bulletin board, that's pretty close to 0% secure. Anyone can read the note, because it's posted in public. Anyone can change the note, because once you leave there's nothing stopping them. You don't know who read the note you posted, and the intended recipient doesn't know who posted the note they read.  Most communication methods are closer in security properties to the public note than the hand-delivered note. Something like mailing a letter or sending an email reduces the set of people who can read, change, or replace the note, but the reduction isn't even to a known, controlled set of people.  Another, very important consideration is from-nothing forgeries. If you receive a note from me somehow, how do you know I meant to send you a note at all?  So we have two sets of potential attackers:   People who are involved in note-delivery. This is an unknown, but bounded set of people who generally have some minimum level of expected trustworthyness. Anyone in the world. Some of these people are out to get you - even if just to steal $10 or your Team Fortress hats.   Encrypting a message in transit protects you from two attack by the first group - reading the message, or reading and altering the message.  Actually authenticating a message protects you from most attacks from the first group and all attacks from the second. The only category of attack it doesn't protect you from is some member of the first group reading your messages.  Authentication is much more important than encryption.  With authentication and encryption you're protected from any attack involving a false message being delivered and anyone reading the message. You're only left open to messages being dropped or delayed."
crypto,2v0hfm,Chandon,2,Sat Feb 7 17:12:19 2015 UTC,"Those are all good points, but I think there's a fallacy in doing the comparison between defending against some and defending against all.  As I see it, the problem is that currently the majority is defending against none, and is largely unaware that it is a problem. If this lets the majority go from no security to some security, that's an undeniable improvement in overall security."
crypto,2v0hfm,TheTerrasque,1 point,Sat Feb 7 17:47:34 2015 UTC,"Encryption without authentication provides very little benefit, and almost all of that benefit can be gained simply by using TLS to do the point-to-point email transmission.  Let me repeat: There's almost no benefit to PGP encrypting an email without strong authentication compared to using TLS for the interconnects, which is supported by every email client and server and can be implemented without the user even noticing. Either approach eliminates basically the same attacks.  If we're going to bother the user with end-to-end encryption, it's only worth it if they can be sure the ends are who they think they are."
crypto,2v0hfm,Chandon,2,Sat Feb 7 18:21:43 2015 UTC,"A small point, the article talks about encryption with some level of authentication (involving ability to send email from account, and/or TOFU principles), with option to manually verify through a different channel.  But, to your statement. Unencrypted plus TLS leaves email readable at email provider, and you as a user have to trust all involved mail providers to keep to standards, and not intercept email. It will also be vulnerable if the attacker can MitM TLS connections. If you already have a local key for the recipient that's significantly harder to change / spoof.   If we're going to bother the user with end-to-end encryption, it's only worth it if they can be sure the ends are who they think they are.   To play the devil's advocate, that can in some situations be hard to verify even when meeting someone in person."
crypto,2v0hfm,TheTerrasque,3,Sat Feb 7 20:31:44 2015 UTC,"If the user understands the security model, TOFU is actually pretty good.  If the user doesn't understand it, they'll get signed email from ""yourboss@yourcompany.attacker.com"" requesting a copy of the secret business plan, see that it's signed, and happily send a signed and encrypted reply with the document attached.  That's worse than not having any crypto and following a ""don't send really secret documents by email because it's not secure"" policy.  The point of all these ""make crypto easy for everyone"" schemes that hand wave about authentication is to let people encrypt without having a sense for the security model. The user needs to know about authentication and know when they have it, or adding crypto probably just makes things less secure."
crypto,2v0hfm,Chandon,3,Sat Feb 7 22:14:28 2015 UTC,*Bob
crypto,2uw2ev,notmyteeth,8,Thu Feb 5 17:34:31 2015 UTC,"Maybe he could get a job at Google or something like that, where he would still spend ~50% of his time just working on gpg? Google hired Guido von Rossum, and Facebook hired the creator of btrfs."
crypto,2uw2ev,oconnor663,14,Thu Feb 5 19:57:44 2015 UTC,"Stripe, facebook to sponsor him"
crypto,2uw2ev,DoWhile,5,Thu Feb 5 23:47:45 2015 UTC,@stripe   2015-02-05 21:29:28 UTC  Stripe and Facebook are going to sponsor @gnupg development with $50k/year each.     This message was created by a bot  [Contact creator][Source code]
crypto,2uw2ev,TweetsInCommentsBot,-4,Thu Feb 5 23:47:51 2015 UTC,"End-to-end email encryption would ruin Google's business model, so I doubt they would spend a dime helping email encryption."
crypto,2uw2ev,all-blue-chucks,12,Thu Feb 5 20:43:46 2015 UTC,https://github.com/google/end-to-end  ????
crypto,2uw2ev,ldpreload,1 point,Thu Feb 5 22:32:06 2015 UTC,have you tried it out? v interesting
crypto,2uw2ev,mmorehea,13,Thu Feb 5 22:42:29 2015 UTC,"Folks on my team at Google write end-to-end as a side project. Everybody here is passionate about security, and isn't held hostage by what makes more money - it's all about making ourselves and our customers safer."
crypto,2uw2ev,iagox86,5,Thu Feb 5 23:32:35 2015 UTC,"That's great to hear. The last time I tried to use S/MIME with gmail, I needed a third party client, and that client kept breaking due to changes to gmail.  If you have the ability to voice support for adding S/MIME support natively to gmail, I will gladly repay you with unused google adwords credits ;-)"
crypto,2uw2ev,all-blue-chucks,13,Fri Feb 6 01:22:36 2015 UTC,Donate here.
crypto,2uw2ev,all-blue-chucks,6,Thu Feb 5 17:35:16 2015 UTC,"The WoT mechanism that underpins PGP doesn't scale and is too complex for 99% of users.  Improvements on STARTLS-SMTP, and better S/MIME clients, would be the best way make email more secure."
crypto,2uw2ev,crow1170,5,Thu Feb 5 19:48:13 2015 UTC,I'd argue it's ineffective for 100% of users. It conflates   trust that someone is who they claim with trust that they investigate others are who they say they are with trust that people are honest or authoritative on their claims   I agree that it may be the best system available but it's certainly not good.
crypto,2uw2ev,molo1134,2,Fri Feb 6 02:25:26 2015 UTC,"S/MIME depends on CAs, which is flawed.  STARTLS is subject to downgrade attacks, and doesn't prevent intermediate servers from reading the payloads.  I agree the WoT mechanism is lacking, but it is the best we have."
crypto,2uw2ev,ldpreload,3,Fri Feb 6 04:36:31 2015 UTC,"S/MIME depends on X.509 certificates. CAs are one way to create and verify X.509 certificates, but they're far from the only way.  Alpine seems to be doing some sort of trust-on-first-use mechanism for S/MIME. I haven't figured out exactly how it's supposed to work."
crypto,2uw2ev,all-blue-chucks,2,Fri Feb 6 09:17:33 2015 UTC,"In my experience supporting users of both S/MIME and WoT models, S/MIME trust establishment might occasionally be done incorrectly, but WoT trust establishment is almost ALWAYS done incorrectly. So I disagree with you completely."
crypto,2uw2ev,molo1134,1 point,Fri Feb 6 05:59:15 2015 UTC,"The CA model is pretty flawed, as trust in the large number of internet CA services is misplaced.  S/MIME might make sense within a company where everything about the deployment can be controlled, but for the internet, with the diversity of CAs, it is flawed."
crypto,2v1jjr,ric2b,4,Sat Feb 7 00:19:20 2015 UTC,"Then, for each bit of data, you check the current bit of the password. If the password bit is a 0, you do nothing. If it's 1, you invert the data bit (1 to 0 or 0 to 1). Then you move to the next data and password bits.   This is an xor operation. If your key is as long as your message, this is a one-time pad. If in addition to being as long as your message your key is: (1) sufficiently random and (2) only ever used once, this is uncrackable.  If you use a key shorter than your message, this is easily crackable.   So right of the bat I see this has the problem of creating a pattern with the lenght of the password, so instead of depending only on the PW bit, it can also depend on the last n bits of encrypted data.    A simple form of chaining.   Please note that doing this with xor as your ""block cipher"" like you suggest is a terrible idea.   Perhaps also devise a method for ignoring or jumping ahead on the password bits.   This is probably a really really bad key schedule.   A way to add useless bits in a reversible way, to mask the lenght of the data, would also be good.   This is known as padding. You could add a random length of padding to the end of your message."
crypto,2v1jjr,silverforest,1 point,Sat Feb 7 01:15:42 2015 UTC,"Great links, thanks for the feedback!"
crypto,2v1jjr,harrybozack,4,Sat Feb 7 01:27:53 2015 UTC,"The first part kind of sounds like a one-time pad...which is really secure but has its own problems when you implement it    so instead of depending only on the PW bit, it can also depend on the last n bits of encrypted data.      I don't think this would actually increase the strength of your key. OTPs require a strongly random source of data for the pad part, so you wouldn't want a human picking a low entropy key.    Perhaps also devise a method for ignoring or jumping ahead on the password bits.    Wouldn't this be known to the adversary as well?    A way to add useless bits in a reversible way, to mask the lenght of the data, would also be good.    Sounds a little like generic padding but I'm not sure how you'd be able reverse it"
crypto,2v1jjr,Ar-Curunir,1 point,Sat Feb 7 00:47:37 2015 UTC,"Well, if the adversary knows the algorythm it does get a whole lot easier, those suggested extra steps were to avoid any recognizable patterns that would allow someone to ""crack the code"".  I just had the idea, maybe I'll play with it some more and actually make it interesting. I know today's cryptography is far beyond this, I don't want to sound like I think I'm revolutionizing anything."
crypto,2v1jjr,harrybozack,2,Sat Feb 7 01:00:24 2015 UTC,Generally modern crypto assumes that the adversary knows everything except the secret key. So in this case one would have to assume that the adversary knows your algorithm in and out.
crypto,2v1jjr,autowikibot,3,Sat Feb 7 01:56:12 2015 UTC,Security through obscurity is never a good way to design a secure system.
crypto,2v1jjr,mr_bitshift,1 point,Sat Feb 7 02:22:01 2015 UTC,"Security through obscurity:       In security engineering, security through obscurity is the use of secrecy of design or implementation to provide security. Security through obscurity is discouraged and not recommended by standards bodies. A system relying on security through obscurity may have theoretical or actual security vulnerabilities, but its owners or designers believe that if the flaws are not known, then attackers will be unlikely to find them. A system may use security through obscurity as a defense in depth measure; while all known security vulnerabilities would be mitigated through other measures, public disclosure of products and versions in use makes them early targets for newly discovered vulnerabilities in those products and versions. An attacker's first step is usually information gathering; this step is delayed by security through obscurity. The technique stands in contrast with security by design and open security, although many real-world projects include elements of all strategies.     Interesting: Libelle (cipher) | Kerckhoffs's principle | Project DReaM   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2v1jjr,autowikibot,3,Sat Feb 7 02:22:11 2015 UTC,You might be interested in autokey ciphers -- ciphers which incorporate plaintext as part of the key.
crypto,2v1jjr,simulations,2,Sat Feb 7 03:21:54 2015 UTC,"Autokey cipher:       An autokey cipher (also known as the autoclave cipher) is a cipher which incorporates the message (the plaintext) into the key. There are two forms of autokey cipher: key autokey and text autokey ciphers. A key-autokey cipher uses previous members of the keystream to determine the next element in the keystream. A text-autokey uses the previous message text to determine the next element in the keystream.  In modern cryptography, self-synchronizing stream ciphers are autokey ciphers.     Interesting: AutoKey | Tabula recta | Vigenère cipher | 1586 in science   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2v1jjr,Godspiral,3,Sat Feb 7 03:22:06 2015 UTC,"A for effort and creativity, but this is an extremely simple and also extremely flawed crypto.  Lets say the data you were encrypting had a length of any repetition at all, like all 0's or a whole bunch of enter key characters.  Now take all 0's and XOR them with your password (XOR is what you are describing) and boom, the output is your password.  Even if it didn't't have repetition, if someone knew that this was how you were doing encryption, and the data you were encrypting was ascii data (words), it would be pretty trivial to write a program to count the number of occurrences of each letter for various possible lengths of the password and analyze which characters come up the most, and try to identify what the password is.  Solving this type of cypher is about as hard as solving the cryptoquip puzzle in the newspaper (not hard).  For cryptography to ""work"" the output has to appear to be completely random regardless of what you are encrypting."
crypto,2uz0ec,marklarledu,6,Fri Feb 6 10:13:05 2015 UTC,"AES is a secure block cipher. However, if the data you are looking to encrypt is more than one block after padding, then the block mode you choose becomes very important in that choosing the wrong mode could ""carry over properties from the plaintext"". For example, ECB mode will mimic plaintext patterns in the ciphertext. Other factors that highly affect the strength of the encryption are the randomness of the key, the appropriateness of the IV (if applicable to the mode), the implementation of the algorithm, etc."
crypto,2uz0ec,C_Hitchens_Ghost,3,Fri Feb 6 16:37:13 2015 UTC,You could argue that AES specifically has this problem in ECB mode. Modern cryptography uses an IV to prevent the same blocks from encrypting to the same output. You can think of it as a small key modifier that is changed every block.
crypto,2uz0ec,matthijsie2020,2,Fri Feb 6 16:33:27 2015 UTC,Padding would be mandatory in a scheme like this. AES is a blockcypher with padding so AES would be secure.
crypto,2uz0ec,rflownn,1 point,Fri Feb 6 11:22:28 2015 UTC,Given a long enough chain of data they can determine some (or all) properties. The skill level (or strength) is determined by the required 'amount of data' in order to compromise the integrity of the cipher.
crypto,2uz0ec,Utanith,1 point,Sat Feb 7 11:25:01 2015 UTC,"I feel like the weakness described in this mental poker algorithm could be solved by shuffling a set of references to cards rather than the actual cards. Say, for example, you have cards in a relational database - You take the rowid (Or whatever your flavor of database happens to use) for each card and shuffle that rather than plaintext that could reveal extra information about the card. Would this still reveal information? An improvement on the idea might be to create an ephemeral ID for each card that's only valid for one game (Of course, this is more overhead.) I suppose this doesn't get us away from the fact that we're encrypting known plaintext, but it does limit the amount of data that's useful to mount the attack."
crypto,2uwkha,red_white_blue,3,Thu Feb 5 19:51:23 2015 UTC,$ wget -O - https://www.redditstatic.com/icon.png | openssl enc -aes-128-cbc -in /dev/stdin -out /dev/stdout -k 'p@$$w0Rd' | base64
crypto,2uwkha,atoponce,1 point,Thu Feb 5 20:06:02 2015 UTC,I'm still confused :(
crypto,2uwkha,atoponce,3,Thu Feb 5 20:08:23 2015 UTC,"Get the Reddit icon, pipe it to OpenSSL and encrypt it with AES-128 in CBC mode. This will provide binary, so that's piped to base64, which will give you printable Latin character output, like you wanted.  If you wanted to reverse it, and get back to the original Reddit icon, you would pipe the base64 output into ""base64 -d"" to get back into binary, then pipe it into OpenSSL, decrypting it using the same AES-128 in CBC mode, with the same password, then save to disk. You would now have the Reddit PNG image."
crypto,2uwkha,ldpreload,1 point,Thu Feb 5 20:11:47 2015 UTC,Okay thanks very much - I'll give that a go!
crypto,2uwkha,phyzome,1 point,Thu Feb 5 20:17:11 2015 UTC,Sorry to be a pain:  I'm working on a mac (mavericks). I used MacPorts and now am using this as a bit of a guide in addition to your post.   I saved an image of the reddit alien (alien.png) on my desktop. I then tried this in the terminal:  openssl aes-256-cbc -a -salt -in alien.png -out secrets.txt.enc  But received an error saying 'no such file or directory'. I'm not quite sure where I went wrong. The file is definitely called alien.png. Do you have an idea of what I might be doing wrong?   Sorry to be such a laymen!
crypto,2uwkha,phyzome,2,Thu Feb 5 21:11:29 2015 UTC,Are you in the same directory as your desktop? You might need to cd Desktop if that's where it is.
crypto,2uruc4,speckz,33,Wed Feb 4 17:26:26 2015 UTC,"I am 100% for verifying digital signatures on software (and believe that this should be made easier for non-technical people to do) and this was a great write up on how to do that. However, some people might infer from this that verifying a digital signature is the equivalent of checking for backdoors, and that is just not true. While verifying the signature does provide a high degree of assurance that someone else hasn't tampered with the app, it doesn't mean that the app wasn't built with backdoors in the first place. Best would be to check the signature on the source code, inspect the source code, and then build from there (possibly doing the same thing to your compiler if you are ultra paranoid). I realize that not everyone is going to do that though."
crypto,2uruc4,marklarledu,8,Wed Feb 4 18:14:26 2015 UTC,"Of course, you then need to verify that the digital signature or hash you used to verify the file is legitimate. Then you need to verify that the program you use to verify the signature/hash is not compromised. How do you know that the developer of the app isn't an NSA front, who is knowingly signing code with an expertly hidden backdoor? Its a rabbit hole with no end. The reality is that unless your a high priority target, using SSL to download the app is enough.  Using email encryption without verifying identities is also not a big deal, as your probably not currently being targeted for a MTM attack. Now instead of having plain text emails all over, you have encrypted emails if anyone tries to access them later, or they get caught up in a dragnet of collection, which is really what most people have to worry about.  If you really think about it, trying to achieve perfect security would be a full time job if it could be done at all. Instead, just try reduce your exposure to untargeted dragnets."
crypto,2uruc4,monty845,2,Wed Feb 4 18:53:01 2015 UTC,"For some packages, I don't think SSL is enough. I would not be surprised to see, for instance, the tor browser bundle be mass-MITM'd for a period of time, or a subset of people, because of the potential value in doing so.   Email encryption is a bit different. The likelyhood of getting a fake PGP key is incredibly small to the point of negligibility. The trouble is, if a e2e encryption scheme ever takes off, we don't want it to do so with people not understanding the need to authenticate. If everybody was using PGP, but no-one was authenticating keys, that would not be a much better that what we have now."
crypto,2uruc4,NeuroG,1 point,Thu Feb 5 16:16:58 2015 UTC,"But.. If it's not a perfect, cover-everything-completely security solution, it's worse than no security!  /s"
crypto,2uruc4,TheTerrasque,1 point,Thu Feb 5 14:42:35 2015 UTC,"And when a backdoor can be as subtle as a single missing equals sign, it'd probably be a waste of time anyway.   Could you elaborate, if you don't mind?"
crypto,2uruc4,Jazztoken,1 point,Thu Feb 5 00:12:38 2015 UTC,if (uid == root) {     /* only allow admin here */ }
crypto,2uruc4,ivosaurus,1 point,Thu Feb 5 04:19:58 2015 UTC,"Or an extra goto, for that matter."
crypto,2uruc4,gsuberland,1 point,Thu Feb 5 04:28:53 2015 UTC,"Or that your library hasn't.  I'm on Linux, my OpenSSL libraries come in as either source on one machine, or binaries on another.  Who's to say that these binaries aren't tampered with.  I can imagine the NSA/CSE being able to reroute and proxy particular persons so that they end up grabbing a modified and backdoored OpenSSL, then you're screwed."
crypto,2uruc4,qbasicer,1 point,Thu Feb 5 11:33:23 2015 UTC,"That's why you want a signature on the source code, you want to inspect the source code, and then you want to use a trusted compiler on a trusted OS to compile. You can even check the signature on the binaries."
crypto,2uruc4,marklarledu,1 point,Thu Feb 5 15:55:19 2015 UTC,"Most 'backdoors' are in legitimate software. I think tampering is much rarer unless the person is downloading binaries from open forums (i.e. cyanogen, micro computers, miui etc...)  Backdoors are also not just compromised software, they're settings as well, designs, etc... an example of a 'designed backdoor' is overly complicating securing the software.  edit: Every major OS and software has had 'backdoors' in the form of 'critical security issues'. These were all in 'legitimate downloads and purchases'. More common is incorrectly configured options. For Microsoft, one of the most common is to find errors where the vendor or company didn't pay Microsoft's ""security fee"" for upgraded services. Linux is just very hard to secure, period. Linux is no cheaper to secure than Microsoft or Apple, and can even be more expensive in some cases. Apple, etc... are a bit more stable but the nature of their backdoors are bit different."
crypto,2uruc4,rflownn,15,Thu Feb 5 17:37:22 2015 UTC,"I'm not quite satisfied with this article... If an attacker can replace the binary file on the server, they can also replace the public key with their own one. Thus the signature will still verify. Also I don't see the need with signing the key. Especially not if you don't even check if this is even the correct key..."
crypto,2uruc4,uvok,2,Fri Feb 6 09:24:16 2015 UTC,"He definitely should have taken the last step, but I'm happy enough to have one journalist discussing this at all.  For those playing along at home, here's what he missed: when he got the public key, he didn't check it to see if it was verified by someone he trusts.  Without this step, we just take the website's word for it that this is legitimately their public key (or we rely on the fact that it was retrieved over TLS, but that's not quite good enough if you're worried about nation-state or other advanced targeted attacks).  It's possible he did this and just didn't make it clear in the article, or maybe Kleopatra covers this automagically when you do an import, I'm not familiar with it.  The PGP web of trust allows you to do this transitively. Explanation here: http://www.rubin.ch/pgp/weboftrust.en.html"
crypto,2uruc4,JustinEngler,3,Wed Feb 4 19:39:01 2015 UTC,"There is no practical solution to this problem, except maybe namecoin...  Until that point, this problem should be considered ""open"" and ""unsolved"".  For those not initiated, there is an extension to TLS called DANE. What DANE does is has a key installed in DNS records. This key is then used to verify that the certificate received from a server does belong to that domain without needing to trust a third party (sorta).  So the way this works is:   person wants to visit example.com browser goes off and does the DNS thing to resolve example.com to an IP and also finds a key along with the IP. browser does a handshake with the server behind the ip and they get a certificate. browser checks the cert with the key received from DNS.   So you may say, ""hey wait a second, isn't DNS completely fucked for security purposes?"" And I say ""Oh yes, please don't fucking trust DNS to properly secure your connections."" So then what is the point of DANE?  There is none if you go and use the current fucked up DNS, but if you instead use something like namecoin, which gives very strong guarantees that the the key does belong to the domain, then you are already way ahead of our current PKI, even if this solution does have obvious flaws (oh, and there are plenty...)."
crypto,2uruc4,pushme2,1 point,Thu Feb 5 00:26:06 2015 UTC,Yes the problem is far more difficult than most realize. How do you verify the public key of some software producer? You don't know them personally. All you know about them is their software. Do you trust them? Are they in control of their own website? It's very hard to prove these things.
crypto,2uruc4,jmw74,1 point,Thu Feb 5 04:20:09 2015 UTC,"For most software, reputation is all we have to go on. I can check, for instance, that the person hosting a software is the same person who's been producing that software for years previously. I have no way of trusting, say the Debian developers, besides going on the fact that it's verifiably the same people who did good stuff in the past."
crypto,2uruc4,NeuroG,1 point,Thu Feb 5 12:05:49 2015 UTC,Binaries often do come from different servers. It's also very easy to verify if older versions of the page had the same key.
crypto,2uruc4,NeuroG,2,Thu Feb 5 16:24:23 2015 UTC,Linux repositories + package managers handle all of this.
crypto,2uruc4,mvario,1 point,Thu Feb 5 16:20:37 2015 UTC,"Except they're talking about backdoors as a whole...which is where audits, trusted compilation and verification comes into play."
crypto,2uruc4,Katana__,2,Wed Feb 4 22:19:03 2015 UTC,"Right. For example, in the Ubuntu repository, the software is put on the repository as source code (and the source code remains available) and is compiled there and signed there. The user package manager has the public key and verifies the package when downloaded.  It's a pretty secure system unless the repository itself is compromised."
crypto,2uruc4,mvario,0,Wed Feb 4 22:37:16 2015 UTC,"The repository or the original source, really. Like with the crypto curves that nobody trusts anymore, because of NSA tainting."
crypto,2uruc4,Katana__,2,Wed Feb 4 22:44:47 2015 UTC,"True, but the source is available to audit.  It isn't totally dependent on trust, as closed source binaries are."
crypto,2uruc4,mvario,3,Wed Feb 4 22:47:34 2015 UTC,"True, but the source is available to audit.  It isn't totally dependent on trust, as closed source binaries are.   Unfortunately, until recently it was dependent on trust. Nobody was auditing code, it was just ""there"". Only until the Snowden fiasco did code started getting audited in a big way, as the gnutls/openssl/bash/truecrypt audits/vuln discoveries illustrate. Without the organized effort to review all that code, source disclosure wasn't doing a lick of good for anyone."
crypto,2uruc4,Katana__,1 point,Wed Feb 4 22:53:48 2015 UTC,"So, when do we begin the audit of UEFI and BIOS firmware? When are we auditing the MS kernel?"
crypto,2uruc4,C_Hitchens_Ghost,-6,Wed Feb 4 23:17:29 2015 UTC,A=b=a=b=a=c=d=y=a=b=c=e=a=e=i=o=u=i=a=m=b=u=r=e=d=a=l=l=r=e=a=d=y=h=a=v=e=i=u=z=e=c=d=a=l=m=y=n=u=m=b=e=r=s=v=e=r=y=m=u=c=x=z=a=s=d=f=g=h=j=k=l=p=o=i=u=y=t=r=e=w=q=y=e=t=?
crypto,2uqjg1,usserrnamme,2,Wed Feb 4 08:20:18 2015 UTC,Check out Oded Goldreich's page on MPC in general: http://www.wisdom.weizmann.ac.il/~oded/pp.html  It has an exposition of the OT protocol as well as other MPC stuff.  Also check out the lecture notes of cryptographers. I found Chris Peikert's notes to be very readable.
crypto,2uqjg1,Ar-Curunir,1 point,Wed Feb 4 09:31:49 2015 UTC,Ah ha! Lecture notes was the magic phrase missing from my search terms.  I also found a book which has a nice overview.  Thanks!
crypto,2uq5kr,shah256,14,Wed Feb 4 05:26:41 2015 UTC,"NIST curves are chosen in such a non-transparent way that they could be compromised. DJB's curves are much more transparent and they have extra safety features, too.  The thread below also explains why NIST's curves are also much harder to implement. They are also slower."
crypto,2uq5kr,johnmountain,7,Wed Feb 4 08:02:24 2015 UTC,"secp256r1 has constants that could be compromised, although officially they are random. Both are probably safe, but Satoshi took the chances that there might be a vulnerability in Koblitz curves, rather than trusting random values that might be backdoored."
crypto,2uq5kr,PTheboss,2,Wed Feb 4 08:03:44 2015 UTC,He did? I thought the fear of curves with unexplained constants only started up with the talk Security dangers of the NIST curves given by djb and Tanja Lange in May 2013 and Snowden a bit later.  Why wouldn't he have chosen Curve25519 if he was that paranoid?
crypto,2uq5kr,floodyberry,3,Wed Feb 4 17:49:51 2015 UTC,Curve25519 was not the well known and popular choice it is now back in 2008 when Satoshi published his paper.  The SECG curves had been initially published in 2000 and were more established. http://www.secg.org/SEC2-Ver-1.0.pdf
crypto,2uq5kr,GahMatar,1 point,Thu Feb 5 00:13:00 2015 UTC,"It wasn't widely known, but it was still 3 years old. agl's curve25519-donna was started in 2008 as well. It seems more likely that he just chose it, if not at random, then for personal reasons (maybe he had used it in the past).  Then again, djb hadn't put forth any example on how to sign with curve25519."
crypto,2uq5kr,floodyberry,2,Thu Feb 5 03:03:34 2015 UTC,"Ed25519 does signatures, curve25519 does DH."
crypto,2uq5kr,rya_nc,5,Thu Feb 5 16:03:41 2015 UTC,"I meant that Ed25519 was not propsed yet, so there were no signature options for curve25519 and he may have not had a reason to consider it even if he knew of it."
crypto,2uq5kr,floodyberry,1 point,Thu Feb 5 19:25:31 2015 UTC,"That sounds like a reasonable theory, but do you have a source for this?  I'm no Bitcoin buff, but it seems like it can only really be answered by something in Satoshi's paper saying ""We use secp256k1 instead of r1 because...""."
crypto,2uq5kr,bitwiseshiftleft,2,Thu Feb 5 18:44:41 2015 UTC,"I don't have a source, other than that this has been discussed elsewhere and other people have reached the same conclusion. This just seems like it's ""same style"" as other design decicions that Satoshi made, and there are easy to understand theories behind it."
crypto,2uq5kr,PTheboss,2,Thu Feb 5 18:56:14 2015 UTC,"""Digital signature"" is all the paper says, it doesn't mention specifics."
crypto,2uq5kr,floodyberry,2,Thu Feb 5 19:14:43 2015 UTC,"Honestly, I think Satoshi is someone with inside knowledge about cryptographic backdoors."
crypto,2uq5kr,conradsymes,1 point,Fri Feb 6 05:51:51 2015 UTC,as in he dodged the subtle crypto booby traps or rather he intentionally rigged it up with what we'll find to be 'poor' choices?
crypto,2uq5kr,guntha_wants_more,1 point,Tue Feb 17 14:58:13 2015 UTC,I really have no idea.
crypto,2uq5kr,conradsymes,1 point,Tue Feb 17 19:59:22 2015 UTC,Sounds like he just did his research. I dont think any shadow state would make such a big bet releasing a paradigm shifting technology with only a few crypto backdoors (that can be changed or moved away from as far as bitcoin is concerned) as their ace in the hole.  I'd wager that satoshi actually (factually) went into the math and code of these crypto functions & concepts and understood it to his satisfaction.  The reason why its a mystery to us is that we haven't put the time in to truly understand and we know just enough to be dangerous and question it.  He had much more of a vested interest in doing so anyway.
crypto,2uq5kr,guntha_wants_more,1 point,Tue Feb 17 22:01:21 2015 UTC,thats what i'm getting at!
crypto,2uo4d5,secinnovation,9,Tue Feb 3 19:43:57 2015 UTC,"Based on the username, I'm going to assume OP is affiliated with the website.  I appreciate the NTRU scrutiny webpage, though it seems to be somewhat undermaintained.  Many really cool results came out last year, both good and bad for NTRU and NTRU variants (mostly good).  Anyone who's been around might have some not-so-fond memories of NTRU, but I think nowadays with the open-sourcing of their NTRU IP, with more up-to-date research on lattice cryptanalysis, the NTRU-style schemes should get another shot."
crypto,2uo4d5,DoWhile,4,Tue Feb 3 20:24:44 2015 UTC,Would Supersingular Isogeny Key Exchange not be better than NTRU as its key size is smaller?  Isogeny Based Quantum Resistant Undeniable Signatures
crypto,2uo4d5,NorthLite,4,Tue Feb 3 20:22:08 2015 UTC,"Fuck NTRU.  When I was maintaining LibTomCrypt I asked them if I could implement the algorithm.  They told me under no uncertain terms they would sue me if I did.  So I didn't.  They lost their chance to have their algorithm showcased to the public.  They go now, buh-bye!"
crypto,2uo4d5,wwhyte,1 point,Wed Feb 4 12:02:54 2015 UTC,"I work for Security Innovation, and previously worked at NTRU -- hi! I think we told you you needed a license, because at the time you did. Since then we've made NTRU available for use under GPL and a range of other FOSS licenses, see our github page: https://github.com/NTRUOpenSourceProject/ntru-crypto. If you're implementing under any of those licenses you're fine. If you're making money off selling NTRU, we need a commercial license."
crypto,2uo4d5,disclosure5,3,Wed Feb 4 19:34:07 2015 UTC,"If you're making money off selling NTRU, we need a commercial license.   That's still a killer imo. Let's say I'm writing an app for me and my friends to securely chat. There are plenty available already, but let's say I'm interested in NTRU, so I go write one.  Now all of a sudden, everyone everywhere likes my app, probably because it has cats all over the interface, so it suddenly becomes the next WhatsApp. Wait, now I'm a commercial entity, I can go buy licensing or I can just a different algorithm.  Or I can consider that at the start and build using libsodium or something."
crypto,2uo4d5,johnmountain,1 point,Wed Feb 4 23:12:42 2015 UTC,"Aren't NTRU patents supposed to expire just about now or very soon? I wonder if the GPL thing for ""private use"" is kind of a trick to continue to charge money for it for ""commercial purposes"", when in fact it could be fully replicated now for free anyway."
crypto,2uo4d5,wwhyte,2,Wed Feb 4 22:33:56 2015 UTC,"Just to be clear, the GPL grant isn't for private use. It's for all use under GPL. NTRU can be fully replicated for free in any product that's distributed under GPL or any one of a number of other FOSS licenses; it can't be replicated without a license in a product that's distributed under any other license."
crypto,2uo4d5,Tsederbaum,1 point,Fri Feb 6 01:29:31 2015 UTC,"To answer your question: The main patent doesn't expire until 2017. The other patent, which covers an optimization, expires in 2020. So the earliest you can use NTRU patent-free is 2017.  Source: https://github.com/tbuktu/libntru"
crypto,2uo4d5,GahMatar,1 point,Fri Feb 6 08:55:39 2015 UTC,"GPLv2 is a very shaky license to use to prevent someone from making a profit off of your software. They are explicitly allowed to charge for the transfer and support as per point 1 and you grant them all licenses required to do so as per point 6. Furthermore you may not distribute the software at all (under the GPL) if that's not true as per point 7.  Obviously GPLv3 goes out of its way to spell out that you specifically license the patents (Section 11, Patents.)"
crypto,2uo4d5,Natanael_L,1 point,Thu Feb 5 01:27:23 2015 UTC,"Typically that refers to ""being allowed to keep your implementation closed source so you have a licensed piece of software to sell"", as compared to purely selling services."
crypto,2uo4d5,johnmountain,0,Thu Feb 5 12:57:49 2015 UTC,Use this instead: http://binary.cr.yp.to/mcbits.html
crypto,2uldwb,Skynet0928,20,Tue Feb 3 02:55:00 2015 UTC,"Lets say you want a 4 character product key. Randomly generate 2 characters, say 'JW', and then use a one-way function that uses that as input to output 2 characters, say '6X'. Provide the customer with the product key 'JW6X'. To check if it is valid, put the first 2 characters into the same one-way function and check it against the 3rd & 4th characters.  Or, since the year is 2015, just randomly generate some long keys and store them all in a database, and use an online check for validation. This is what practically everyone has done for at least a decade."
crypto,2uldwb,_ihatemyself,15,Tue Feb 3 05:45:30 2015 UTC,"The second idea is fine. The first not so much - anyone can reverse engineer your program, find the hash function, and produce keys. A better scheme would be to validate an asymmetric signature."
crypto,2uldwb,over_the_lazy_dog,10,Tue Feb 3 10:53:41 2015 UTC,"This is turtles all the way down (with any copy control system, you're giving the algo and the keys away at some point, or you're giving away the binary that has to enforce them -- you can RE your way around any such control relatively easily), and gets the threat model for which product keys are a control completely wrong.  Product keys are meant to do two things:   Reduce ""first day"" piracy Reduce casual piracy (of the ""oh, sure, you can have copy!"" variety)   If your product key does those two things, and is relatively easy to use, then you've hit a good balance."
crypto,2uldwb,0x6d1e,5,Tue Feb 3 15:18:53 2015 UTC,"Even then, someone can reverse engineer your program and produce an alternative binary that skips the check. Same for online validation checks."
crypto,2uldwb,brinchj,8,Tue Feb 3 13:36:09 2015 UTC,"You're right of course. This is why DRM fails.  But at least we can prevent fake keys; and there are some scenarios (like company-hosted multiplayer games, or eligibility for updates) where asymmetric signatures and online validation do work."
crypto,2uldwb,over_the_lazy_dog,3,Tue Feb 3 13:44:21 2015 UTC,"There's a huge difference between distributing a modified binary, and being able to sell untraceable, indistinguishable, working keys. It's doubly bad if your software phones home during registration, like Windows, because you're going to get a ""Sorry, this key is already in use"" message to your legitimate customers."
crypto,2uldwb,Intrexa,7,Tue Feb 3 16:00:32 2015 UTC,"Look into BLS signatures. You could encode a 36 bits of data (e.g. serial number) and a 144 bit signature into 36 characters in base 32. If you wanted to go to 40 characters, that'd give you 56 bits of data to play with. This has a 72-bit security level - it is possible with substantial effort to crack the key, but it's going to be easier just to patch out the license check."
crypto,2uldwb,rya_nc,3,Tue Feb 3 04:15:38 2015 UTC,"There is also the Quartz signature scheme.  It's really slow to sign, but it claims 128 bit signatures with 80 bit security.  It probably doesn't have 80 bits of security against all possible attacks, but in any case it's a reasonable alternative to BLS.  http://www.minrank.org/quartz-b.pdf"
crypto,2uldwb,bitwiseshiftleft,2,Tue Feb 3 06:49:34 2015 UTC,"Boneh–Lynn–Shacham:       In cryptography, the Boneh–Lynn–Shacham (BLS) signature scheme allows a user to verify that a signer is authentic. The scheme uses a bilinear pairing for verification and signatures are group elements in some elliptic curve. Working in an elliptic curve provides defense against index calculus attacks against allowing shorter signatures than FDH signatures. Signatures are often referred to as short signatures, BLS short signatures, or simply BLS signatures. The signature scheme is provably secure (that is, the scheme is existentially unforgeable under adaptive chosen-message attacks) assuming both the existence of random oracles and the intractability of the computational Diffie–Hellman problem.     Interesting: Pairing-based cryptography | Homomorphic signatures for network coding   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2uldwb,autowikibot,10,Tue Feb 3 04:16:09 2015 UTC,6th result on google when I searched for 'product key cryptography'  Better than I can even start to explain. And he's smart and shit.
crypto,2uldwb,w3m2d,6,Tue Feb 3 03:09:34 2015 UTC,Classic doc describing Windows XP's scheme
crypto,2uldwb,Sostratus,2,Tue Feb 3 12:06:40 2015 UTC,"If all you need to do is hand out unique and unpredictable license numbers, you can generate a random symmetric key and then just start a counter at 0 (or wherever) and run it through a block cipher. If you use a 128-bit block cipher like AES, then you can issue 2128 licenses before repeating, and the odds of someone guessing one will be (the number of licenses issued)/(2128 ). Simple."
crypto,2uldwb,Octetz,5,Tue Feb 3 05:08:49 2015 UTC,Doesnt the birthday paradox apply here? Thus the probability is higher.
crypto,2uldwb,Intrexa,4,Tue Feb 3 07:43:40 2015 UTC,"No, because as I'm cracking keys, at every new possible guess I still need to match against the same X keys. The birthday paradox comes from every additional birthday you add to the mix, it has more potential matches than the last one. For any given number of birthdays N, adding another birthday to the mix for a total of (N+1) birthdays, you have an additional N possible matches.  In the case of the keys, for X keys and Y guesses, you have (x * y) possible matches, making (y + 1) guesses only brings the number of matches to (x * (y + 1)), whereas if the birthday paradox applied, each additional guess would have to both increase the number of potential matches and the number of guesses."
crypto,2uldwb,psonik,1 point,Tue Feb 3 16:10:39 2015 UTC,"Yeah, the odds of guessing a specific key are low. But the odds of guessing any key would be pretty damn high."
crypto,2uldwb,aydiosmio,1 point,Tue Feb 3 13:17:37 2015 UTC,Just as long as you understand these schemes are in no way secure.
crypto,2ukc7j,F41LUR3,5,Mon Feb 2 22:03:21 2015 UTC,"I don't think that it's ECDH vs ECDSA that's the problem. DJB and Tanya Lange gave a fascinating intro to ECC at 31c3 which touches on some of the problems of the nist256p1 curve. Simply put there are 6 different ways to do the math, and you have to pick the right one depending on the numbers you happen to be operating on at the time; and if you don't check the inputs carefully enough you could end up divulging your keys. (If you do check the inputs, you might run afoul of a patent....) A correct (and constant-time) implementation is tricky. (Timing side channel might not be applicable for your case; and using arbitrary inputs also might not be applicable to you. You'll have to evaluate that.)  You mentioned below/above you are consuming the API, so I don't think you have much choice. I think these problems are only applicable for the server, unless it's possible for you to connect to a malicious server."
crypto,2ukc7j,beltorak,1 point,Tue Feb 3 03:15:07 2015 UTC,"I watched that video just the other day! ;D  But let me reiterate, I am in no way implementing ECC, merely wanting to understand the risks involved by using WebCrypto and their choice of curves with known issues. I would never in sound mind implement crypto myself that was going to be used in production."
crypto,2ukc7j,beltorak,1 point,Tue Feb 3 19:17:41 2015 UTC,"I'm not saying you are implementing it, but it's useful to know what the challenges are; sometimes the best way to get an understanding of a system is to build your own, even if you never really use it.  Anyway by the other things you've said in the post these weaknesses might not apply to you, especially if you don't take untrusted input - you are verifying that you are talking to the right server, right?"
crypto,2ukc7j,throwaway0xFF00,1 point,Tue Feb 3 19:44:59 2015 UTC,"Yeah, as well as client authentication. I think we've just settled on using P-256 and just let the good times roll. No sense trying to do a browser-side implementation of Curve25519 ourselves (that'd be dumb). Or something further silly like ASM.js compiling OpenSSL.  Thanks for the input folks."
crypto,2ukc7j,bitwiseshiftleft,2,Tue Feb 3 19:55:28 2015 UTC,"I wanted to know the implications of using P-256 for ECDH.   So P-256 and P-XXX at its core is based off something called a generalized mersenne prime.  Mersennes are a very good way to find prime numbers algorithmically speaking.  The trouble with generalized mersenne primes in the elliptical curve sense is that the implementation is god damn awful to implement without coding timing attack vulnerabilities.     I know that P-256 is considered unsafe in some respects, but I don't know well enough if that would affect ECDH in the same was as ECDSA.    The timing attack works on the operations (addition and ""multiplication"") over the curve.  The prime number choice does impact this.  Especially so with generalized mersenne primes.  To make my answer short and sweet: if the implementation of addition and ""multiplication"" over P-### is not done in constant time, then you are vulnerable.  This is independent of which algorithm is used, ECDSA or ECDH (or any algorithm which performs addition or ""multiplication"" over P-###).   The project I am working with requires use of WebCrypto API, and only the P-### curves are available for use.   I don't know whether WebCrypto API or whatever cryptobackends used in WebCrypto API has been tested for such timing vulnerabilities."
crypto,2ukc7j,samsonx,1 point,Tue Feb 3 03:08:25 2015 UTC,"The NIST curves are probably all fine, at least the ones which have a high enough security level for your application.  There are better curves out there, but not in WebCrypto, and being stuck with secp256r1 isn't (known to be) a disaster.  It's not that different for ECDSA vs ECDH.  Implementing ECDSA is itself a pain, and newer designs like EdDSA are better, but once again most people don't have a choice."
crypto,2ukc7j,samsonx,1 point,Tue Feb 3 06:43:54 2015 UTC,"I trust the Bitcoin curve, secp256k1"
crypto,2ukc7j,csssss_,2,Tue Feb 3 00:34:40 2015 UTC,Doesn't anyone else trust the secp256k1 Bitcoin curve ?
crypto,2ukc7j,csssss_,0,Sun Feb 8 23:24:36 2015 UTC,"The mathematical properties of curve P-256 remain the same, regardless of the context you're using it in. Whether or not the implementation you are using is safe for your application is an entirely different question and depends on what your threat model is.   Also, if you can't answer questions like these yourself maybe you shouldn't be implementing crypto code."
crypto,2u6qk8,Ze-Pequeno,14,Fri Jan 30 10:55:36 2015 UTC,"The""Vernam Cipher"", or the one-time pad as we know it today, was at its height during WW2, and is very likely the code here. As is typical with field ciphers, and especially the OTP, the code is written in groups of 5 characters:  CBFUK YYEVO ZILOO ZVNCW JKQRS AWBYZ UGYTZ WYBAT RSUAI   That last character could also be an ""L"". If this is a OTP code, then the first 5 characters identify the key in the field agent code book. Code books were distributed in large number, and due to the volume of messages being sent, many intercepted messages were broken, because the same key was used for more than one message.  ""QM"" is who is being addressed, and could stand for ""quarter master"". If that's the case, then this is likely a request for supplies.  The sender is obviously""605YZ"", and ""FF"" is possibly his rank or location."
crypto,2u6qk8,atoponce,8,Fri Jan 30 14:03:43 2015 UTC,Looks like a codebook cipher (character substitution based on a book with a table of what to replace with what else). Both the sender and receiver would have identical codebooks to decode the message.   Unbreakable unfortunately unless the codebook is predictable
crypto,2u6qk8,Natanael_L,3,Fri Jan 30 11:07:20 2015 UTC,"A onetime pad cipher is not vulnerable to frequency analysis attacks. If it's used correctly, it will be unbreakable."
crypto,2u6qk8,Hell_Kite,3,Fri Jan 30 13:40:06 2015 UTC,"As I said, only works if the codebook is predictable."
crypto,2u6qk8,Natanael_L,4,Fri Jan 30 17:19:34 2015 UTC,"You might also try /r/codes, although I agree that it is likely a codebook cipher."
crypto,2u6qk8,phyzome,1 point,Fri Jan 30 14:09:34 2015 UTC,"A post from a forum claims to have the answer:  My grandfather served in Italy, I inherited all of his military gear. He saved all of his daily code books, so looked it up. Here is the message: QM is code for the officer that was tasked with coordinating forces for a particular engagement. This is an engagement status letter that is addressed to that officer. The (6) 5 letter codes read as follows, from left to right, top to bottom: THEY - THROW - GRENADES - WE - PULL - PINS - AND - THROW - BACK The final code at the bottom is a phrase: NOTIFY REINFORCEMENTS STAND DOWN - NOT NEEDED   http://metaldetectingforum.com/showthread.php?s=44bf9e5adc952538732a8086507032f6&t=207067&page=2"
crypto,2u6qk8,MuratSagdicoglu,5,Fri Jan 30 13:04:58 2015 UTC,"Unfortunately the guy who posted it admitted that it was just a joke, thats why i began again to searching for a solution or for useful clues"
crypto,2u6qk8,MuratSagdicoglu,2,Sat Jan 31 14:56:56 2015 UTC,"You are right, it turns out to be a joke. I am sorry."
crypto,2u6qk8,bmarshallbri,2,Sun Feb 1 14:15:22 2015 UTC,Dont worry. Anyone knows someone to contact specialized in historical crypto?
crypto,2u6qk8,Atkailash,1 point,Sun Feb 1 15:05:54 2015 UTC,"Very interesting find! Looks as others said to be One-Time Paid/Vernam Cipher. Unless you have found key material to go with it, you can't recover the plaintext."
crypto,2u0u5b,rosulek,15,Wed Jan 28 23:57:59 2015 UTC,"This is based on some recent crypto research on anonymous credentials by Jan Camenisch & Anna Lysanskaya. It's like a zero-knowledge proof that allows you to convince a provider that you possess credentials that satisfy their access policy, without the provider learning anything else about your credentials, and without the credential issuers getting involved."
crypto,2u0u5b,DoWhile,4,Wed Jan 28 23:59:41 2015 UTC,"Cool stuff!  In terms of the people on IBM who have worked on this, the IBM website lists Jan and Nalini Ratha, and apparently Anna when she was visiting IBM-Zurich.  You can find the papers on Anna's website"
crypto,2u0u5b,GahMatar,2,Thu Jan 29 00:09:13 2015 UTC,The original paper linked by /u/rosulek below states that the work was done while Anna was visiting IBM-Zurich...
crypto,2u0u5b,calcium,1 point,Thu Jan 29 14:56:22 2015 UTC,How would this protect against something like machine identification based on browser scanning?
crypto,2u0u5b,Natanael_L,3,Thu Jan 29 20:27:21 2015 UTC,"It doesn't, but you can use it at different machines without revealing they are related"
crypto,2u0u5b,calcium,1 point,Thu Jan 29 20:49:05 2015 UTC,Thanks!
crypto,2u0u5b,MathAndFerrets,1 point,Thu Jan 29 21:17:13 2015 UTC,Have any links to any research or papers on the topic?
crypto,2u0u5b,yalogin,2,Thu Jan 29 02:50:25 2015 UTC,"This is the paper that started anonymous credentials. That will at least outline the security requirements and a basic approach to achieve security. The IBM product is probably based on more recent followup works, but I don't know exactly which."
crypto,2u0u5b,Godspiral,3,Thu Jan 29 03:20:56 2015 UTC,I have been fascinated by this and reading about them for about 8 years now. More or less the time the papers came out. Really cool that they finally managed to turn it into a product.
crypto,2u0u5b,Godspiral,2,Thu Jan 29 04:59:22 2015 UTC,"I don't think this technology (in demo) can work.  If the black box answers yes/no to ""was id holder born before Feb 1 2003"",  then it can find exact birth date by making many queries (before 1995?, 1996?....)"
crypto,2u0u5b,dearmash,3,Thu Jan 29 16:30:30 2015 UTC,I believe the human user has to be in the loop to approve every distinct policy that is checked against his/her credentials. So that effectively rate-limits this kind of binary search attack.
crypto,2u0u5b,Godspiral,1 point,Thu Jan 29 17:15:29 2015 UTC,Why is there a 3rd party server then?  netflix needs to ask you if you are over 12.  Not IBM.
crypto,2u0u5b,Natanael_L,2,Thu Jan 29 17:28:34 2015 UTC,"I don't know for sure but I believe the purpose of the IBM server is just to be an encrypted store for your credentials, and so you don't have to install anything special to run this cryptographic verification protocol. I don't think the IBM server would actually see your credentials (maybe they do, and maybe that's the business model). Presumably you could do all of it locally, without IBM's help (I think a good analogy would be like running your own openID server)."
crypto,2u0u5b,dearmash,2,Thu Jan 29 17:40:10 2015 UTC,"Exactly my thought, but one thing to think about is that you own the black box, no? So easy answer is rate limiting to protect, and malicious use is visible to you for tracking.   Now someone has to ask to look in your wallet to get your driver's license number instead of the photocopy stored at the car dealership from when you went for a test drive."
crypto,2u0u5b,cunttard,0,Thu Jan 29 16:59:23 2015 UTC,"So easy answer is rate limiting to protect, and malicious use is visible to you for tracking.   Anyone (NSA) can quietly pay for more access than the rate limiting promises you make to credential holders.  It can work only if you run your own server for credentials querying where you can effectively rate limit or better yet, humanly validate each query."
crypto,2u0u5b,brootski,4,Thu Jan 29 17:15:05 2015 UTC,The user controls the rate limit through simply not agreeing to click a billion prompts  They say in the FAQ you can have your own locally installed credentials wallet.
crypto,2u0u5b,TheGuildedCunt,3,Thu Jan 29 17:45:42 2015 UTC,"100%  I also was under the impression that credentials were kept with you, not yet another central credential db. That just becomes the target instead of the endpoints."
crypto,2u0u5b,C_Hitchens_Ghost,1 point,Thu Jan 29 17:33:21 2015 UTC,I wonder if this might get adopted in the EU. They tend to push privacy preserving initiatives for their citizens.
crypto,2u0u5b,AnotherVersionOfMe,1 point,Fri Jan 30 00:08:07 2015 UTC,"This is a really neat idea, but I seriously doubt anyone is going to pay IBM to forfeit their ability to mine their users' data. That's like throwing money away twice. There are very few businesses that would forfeit that much profit for the sake of integrity."
crypto,2u0u5b,C_Hitchens_Ghost,5,Thu Jan 29 16:36:37 2015 UTC,"I'm not sure what the business model is, but perhaps they're hoping to ride the wave of privacy-consciousness, where the user base demands privacy-preserving techniques like this?"
crypto,2u0u5b,ZeroCool2u,-1,Thu Jan 29 17:17:57 2015 UTC,Isn't IBM the NSA's oldest and most reliable schill?
crypto,2u0u5b,TheGuildedCunt,2,Thu Jan 29 15:04:42 2015 UTC,"After the Nazis, probably. (IBM and the Nazis, not the NSA and Nazis)"
crypto,2tziwc,SpaceHeeder,7,Wed Jan 28 18:13:53 2015 UTC,"It's mostly used as an example of showing off how one would compute a somewhat complicated function using FHE.  AES has an algebraic structure that lends well to the operations found in HELib.  There are new things that could be done with FHE that couldn't be done before without additional interaction, which was one of the main selling points of FHE.  In practice, interaction is tolerable in many cases.  It opens up an easy path for low interaction and scenarios where you want to do things ""blindly"", like I ask you to sign my message with your secret key, but I don't want you to know what my message is, or I want you to encrypt something under your secret symmetric key, but I don't want you to know what my message is, etc."
crypto,2tziwc,DoWhile,7,Wed Jan 28 18:44:57 2015 UTC,"One of the coolest use-cases of homomorphic encryption that I've heard of is for search.  Basically it would be theoretically possible to encrypt a bunch of indexed internet information, then clients would send in encrypted requests that get processed on this large encrypted index that, let's say Google, has no idea what it contains anymore.  Your result is processed by their servers, and then sent back to you.  They never have the knowledge of what you searched, therefore they never have the ability to track you.  Another usage I've heard of is for encrypted cloud processing (think Amazon EC2 type stuff).  Your application sends an encrypted computation to ""the cloud"", and gets an encrypted result back that only you can read and Amazon has no idea what it was it just processed."
crypto,2tziwc,tom-md,3,Thu Jan 29 05:48:56 2015 UTC,"True, but I was specifically wondering about the AES implementation.  The future of FHE in general is very intriguing. There will need to be serious performance improvements before the use cases you're taking about become feasible, but the prospect alone is quite appealing."
crypto,2tziwc,rflownn,2,Thu Jan 29 06:29:12 2015 UTC,"With respect to AES in particular the main advantage I see is the off-loading of work from a client onto the cloud.  Lets start with some basic assumptions:   AES encryption is computationallly fast, almost free, on modern systems. AES keys are much smaller than data users typically want to analyze Homomorphic computation is often sold as an off-loading of computation onto cloud infrastructure, sometimes for privacy preserving purposes among multiple parties. Homomorphic encryption is expensive Homomorphic ciphertexts are significantly larger than the plaintexts they represent.   The last two points are true to varying degrees depending on your scheme and parameters.  GIven all of this it suggests the best way for a client to provide an HE compute node with input would be to generate a new AES key, encrypt the private data with that key, encrypt the AES key with the FHE key, and send the FHE-encrypted AES key along with the AES encrypted data to the compute node.  In this manner our FHE ciphertext is limited to the size of the symmetric key and the majority of the data we wish to keep secret (and yet perform computations over) can be encrypted by good old cheap AES.  There is also bandwidth savings as we don't have the FHE ciphertext-blowup  over the entire input data.  All this said, what /u/DoWhile said is spot-on.  In FHE, and MPC in general, the benchmark of choice for years now has been AES.  This is somewhat unfortunate as it provides a narrow view of the relative performance but at least there's some consistency."
crypto,2tvmhw,qazqaz25,11,Tue Jan 27 20:15:40 2015 UTC,"The biclique attack hardly counts as a true break of AES, and Anubis is likely somewhat less safe because it has been less frequently cryptanalyzed. Furthermore, your suspicion of SHA is almost certainly unfounded.  That said, your settings are probably fine."
crypto,2tvmhw,mahemm,1 point,Tue Jan 27 21:14:52 2015 UTC,Thank you for your response.  Do you know what is the added entropy from the iterations?
crypto,2tvmhw,Natanael_L,3,Tue Jan 27 21:24:49 2015 UTC,"They don't add entropy as said, BUT they slow down bruteforce at a ratio roughly equivalent to log(rounds of hashes)/log(2) bits worth, which in this case is 23.7 bits worth."
crypto,2tvmhw,DoWhile,1 point,Tue Jan 27 23:12:50 2015 UTC,"I'm thinking the two minute wait isn't worth it after reading that.  That formula is what I was looking for, thanks."
crypto,2tvmhw,Natanael_L,2,Wed Jan 28 01:47:46 2015 UTC,"Much like the second law of thermodynamics, information entropy cannot increase when you apply functions to it.  This is stated as H(f(X))<=H(X) for any random variable X and deterministic function f.  Iterations are typically for increasing work factor against brute forcing."
crypto,2tvmhw,flarkis,1 point,Tue Jan 27 23:23:05 2015 UTC,"How much is too much when you have a password of 256 entropy? The default is 1 second for a container which is about 70,000 on my laptop."
crypto,2tvmhw,Natanael_L,4,Wed Jan 28 01:49:36 2015 UTC,"Over 100 is considered safe until quantum computers arrive. After that 200+ still ought to be safe. If the iterations push the complexity up enough to reach that margin, you're likely safe. If you're already above the margin, you don't need to extra iterations."
crypto,2tvmhw,Natanael_L,3,Wed Jan 28 10:34:49 2015 UTC,Can you explain where you get these numbers from. Last I checked quantum computers were not much better at breaking hashes and ciphers like AES.
crypto,2tvmhw,Godspiral,5,Thu Jan 29 22:17:05 2015 UTC,"Grover's algorithm, squares the keyspace = halves effective bitlength"
crypto,2tvmhw,xJoe3x,1 point,Thu Jan 29 22:31:59 2015 UTC,Is that 100 seconds? Or 100 iterations?
crypto,2tvmhw,xJoe3x,2,Mon Feb 2 22:22:19 2015 UTC,100 bits of key strength
crypto,2tvmhw,Godspiral,1 point,Mon Feb 2 22:44:01 2015 UTC,"They take away substantial entropy.  Each original password+salt combination narrows down into a cycle in the hash function.  Its not as bad for a 512 bit function, but the most likely scenario of 223 repeated hashes is that your original input is one of 2256~ values instead of 2512 you were expecting.  The more repeats you do, the more likely you reach one of the cycle values."
crypto,2tvmhw,mahemm,1 point,Fri Jan 30 21:59:50 2015 UTC,"I didn't know that, thanks.  Question: The strength of the hash is the collision resistance. That means it takes 2256 executions of Whirlpool to get another message that hashes to the same output. Why would it matter where the cycle value is?"
crypto,2tvmhw,PubliusPontifex,2,Sat Jan 31 22:59:06 2015 UTC,"I have seen no evidence of that being the case, which is far from any real world attack existing.  PBKDF is used by the majority of top vendors in the field and is a widely recognized standard.   I would go with what /u/Natanael_L said above, which describes the effective work added by X iterations."
crypto,2tvmhw,PubliusPontifex,2,Mon Feb 2 22:09:17 2015 UTC,"Thank you.  Would Anubis -a AES variant with more rounds- be more or equally secured? I'm leading towards using  AES and SHA512 instead, but I don't feel comfortable being though as AES is academically broken."
crypto,2tvmhw,Godspiral,1 point,Mon Feb 2 22:25:03 2015 UTC,"Personally I would go with AES 256 XTS or AES 256 CBC HMAC.  I would stick to standard AES because it has been so thoroughly researched.  These modes should be perfectly safe, nothing known to be broken.  And yes I would go with SHA512 or SHA256."
crypto,2tvmhw,PubliusPontifex,1 point,Mon Feb 2 23:10:20 2015 UTC,"If you hash a random value 224 times there is a high likelyhood that it is among a cycle of only half the bits of the hash function.  Which means that if you keep rehashing the output value, it just stays within that same cycle of  values.  Rotating from one to the next.  As an attacker I can start with any random hash value and keep rehashing it, and I am likely to hit the same cycle of values.  I don't need to know your salt or repeat number.  Its 2128 for a 50% chance against a 512 bit hash but only 240 vs a 160 bit hash."
crypto,2tvmhw,Godspiral,1 point,Sat Jan 31 23:36:18 2015 UTC,"The iterations don't add any entropy. The iterations represent repeated hashings of your passphrase, which needs to be stored unencrypted in order to check whether your entered passphrase matches it.  Your computer repeatedly hashes the password because it makes it that much more difficult for an attacker to recover your password via brute force because he has to hash as many times as you do"
crypto,2tvmhw,PubliusPontifex,2,Tue Jan 27 21:50:01 2015 UTC,"Wow, umm, I think you might be way the hell overthinking this.  I implemented AES in a DoE secure environment (mind you this was back in 2002 when Rjindael just closed the AES spec) but if they can live with it I think we'll be ok with ~2110 cycles (the age of the universe is 4x1017 s, and there are only about 1080 particles in the known universe).  ECC is still debatable (though RSA is a joke, I'd go at least D-H, discrete log is probably safer than simple factorization).  Btw, if you really want to get paranoid, bon apetit."
crypto,2tvmhw,flarkis,2,Wed Jan 28 01:16:54 2015 UTC,"I think I may. Thanks for the link.  I think ECC is fine if using the Edwards curve. The NIST and brainpool ones are suspect. I use 15360 bit rsa keys and change the subkeys every year.  DoE? As in Department of Education, DoE? You must now your stuff.  Thanks again."
crypto,2tvmhw,flarkis,2,Wed Jan 28 01:46:38 2015 UTC,"DoE? As in Department of Education, DoE? You must now your stuff.   Yeah that's fine, or Department of Energy, either is impressive I guess."
crypto,2tvmhw,Godspiral,1 point,Wed Jan 28 03:58:25 2015 UTC,"discrete log is probably safer than simple factorization).   while the math is related, discrete log system attacks are further along than factorization systems."
crypto,2tvmhw,xJoe3x,2,Fri Jan 30 22:03:24 2015 UTC,"Are they really? I know there were some DL attacks that showed promise 15 years ago, but none had seemed as computation friendly as the factorization attacks at the time. You don't have any recent papers on hand? Or good keywords?  Also, there's a quantum attack for factorization (Shor's algorithm), while I'm not sure if a quantum attack for DL has been proved yet."
crypto,2tvmhw,Godspiral,1 point,Fri Jan 30 23:15:51 2015 UTC,"shor works for ecdlp too.  iirc it (or other quantum algo) applies to dlp, but not sure."
crypto,2tvmhw,xJoe3x,4,Sat Jan 31 02:52:50 2015 UTC,"http://www.cic.ipn.mx/posgrados/images/revista/vol04-03/CYS04304.pdf  You're entirely right, it's been a while since I've done much work on the kex side. SIDH it is then."
crypto,2ts65e,jonahmay,11,Tue Jan 27 00:16:20 2015 UTC,"Moderator's note: I was this close to removing the post, but apparently the course actually gets into cryptography, so I guess this is kosher even though it has ""bitcoin"" in the title. :-P"
crypto,2ts65e,Katana__,7,Tue Jan 27 00:23:03 2015 UTC,"Be honest, you just wanted to push the distinguish button.  ...it's okay, sometimes I do it on netsec too. :3"
crypto,2ts65e,gorske,7,Tue Jan 27 02:51:52 2015 UTC,"I like my green hat!  Actually, it was more that I wanted to 1) let the submitter, a new user, know that not all cryptocurrency topics are welcome here, and 2) let regulars here know not to bother reporting the link. :-)"
crypto,2ts65e,hmchk,2,Tue Jan 27 02:55:51 2015 UTC,"...and there's a report, probably from someone who didn't click through to comments. Oh well!"
crypto,2tq27u,_red,8,Mon Jan 26 14:47:10 2015 UTC,"Zero-knowledge proofs and/or anonymous group/ring signatures. You can have all people with their respective public keys listed in a Namecoin-style blockchain with multiple entitites signing the list of verified members. You reference this signed list when proving membership.  https://eprint.iacr.org/2013/622.pdf  Using the ZKP-approach listed in the above paper, you can both gain high efficiency in verification and require very small space for storage AND YET gain the ability for highly granular permissions. In fact, you could tie every service you pay for to it and use a ZKP to anonymously prove that you have the right to access the service by referencing the blockchain. You would just need to store the transaction data generated when the permission was granted, and the blockchain only need to store hashes of the signed data."
crypto,2tq27u,Natanael_L,1 point,Mon Jan 26 14:54:05 2015 UTC,Thats very interesting. Reading now....
crypto,2tq27u,theothercoolfish,1 point,Mon Jan 26 15:09:49 2015 UTC,"I'm a complete noob, so apologies if my assumptions/questions are so noobish.  A distributed, crypto secured public ledger is going to be the answer. But I'm curious why it would have to be a 'coin' based approach. There's a number of clear problems with a coin based approach when comparing identity to a currency. For one, each one of us has an almost infinite number of identities possible. If someone doesn't know your name, or you give them a different name, they might identify you by what you're wearing, how you look, how you sound. All of these are identities (that, presumably, would be of interest to someone if they were taking note). Identities are not scarce, and needn't be. Identities also aren't fungible. I can't send you half of my identity, and get something in return. Likewise, it makes no difference if there are 2, or 2 million, ""identities"" that purport to be theothercoolfish. If a knockoff were to engage in a contract with that identity (presumably signed by the wallet storing that identity) they'd be liable, not the unconnected other identities (or wallets). So is a coin approach really the best approach, or just a hack onto the existing blockchain? Wouldn't it be better to come up with an identity specific secure public ledger, designed from the ground up to be extremely fast, with minimal overhead, and attuned to specific identity issues that currency doesn't face?  (I understand that part of the coin approach is incentive - eg help secure the network, be rewarded in coins. But if you're a company or government, or an individual whose had their identity stolen, you don't need anymore incentive in securing identities. It's a fundamental requirement that's currently either externalized, and poorly, or handled, almost equally as poorly, in house)."
crypto,2tq27u,Natanael_L,1 point,Wed Jan 28 17:45:00 2015 UTC,"As you yourself said, having it be implemented in a blockchain with a native cryptocurrency simplifies the incentives for the miners in order to achieve a high level of security. It isn't necessary, but helpful.  Also, it helps proving you did indeed pay for the right to service by having both facts registered as entries in the same blockchain.   The other approach is a federated one like Ripple, which can be troublesome.   This could work nicely together with Namecoin as well, for example. You'd be able to delegate credentials to anybody with just their username, and what exactly your username IS matters less than 1) the fact that it is yours and 2) the credentials assigned to it.  My favorite future blockchain structure would be a Zero-knowledge proof checkpointed data structure with efficient lookups (the checkpoints would essentially be indexes proven correct with a ZKP) and the ability to register namespaces for arbitary data structures with arbitary predefined rules for determining validity (also proven with ZKP for the entries)."
crypto,2tq27u,theothercoolfish,1 point,Wed Jan 28 17:53:54 2015 UTC,"Hm, you're saying words some of which I understand. I'm not a crypto guy, sorry. :)   What I really mean to ask is - seeing how identity is completely different from currency, shouldn't it be possible to rethink a blockchain designed to handle it from the ground up? Where the people securing the network aren't doing it because they'll get coins, but because the data they are putting into it is important in and of itself?   To me, tying it to a currency has a number of problems. One, the cost for getting and maintaining an identity. Two, you get this speculative aspect to it. Three, people start thinking MTGox running around with their identities (go ahead and try to explain the difference between bitcoin and Bitcoin to someone. I'm sure you've been there.) Fourth - well, I've already stated how identities are completely different from currencies.   My question is, what would a blockchain look like that wasn't dealing with a scarce supply? (ie imagine an infinite amount of coins). Would this necessarily decrease the security of the public ledger (holding constant the number of participants)? Would a different approach have to be taken to verify messages/transactions written to the ledger?   edit - as for right to service - I must admit, I've hijacked this interesting thought experiment with a slight variation - in that I'm no longer imagining services tied to a particular anonymous user getting credentials through this service, but rather managing their identities on a public ledger. I view the chip in a human as a metaphor. We're born with a ""chip"" or identity. We carry that throughout our lives, interacting as that identity. It now interacts online. It can be duplicated (stolen). Is there a better way to manage that chip, our identity, with a public ledger? What would that look like, etc."
crypto,2tq27u,Natanael_L,1 point,Wed Jan 28 18:12:19 2015 UTC,"Similar things regarding the mining have been done before, but those systems aren't widely regarded as secure. That incentive isn't strong enough to keep it up.   What I mean with namespaces is technically more like named data structures with accompanying rules for how to make and modify entries. Bitcoin itself has one data structure, the Bitcoin cryptocurrency data structure with its rules for how to generate and transfer tokens in transactions. Namecoin has one unnamed data structure, the Namecoin cryptocurrency data structure, and multiple named data structures which you can make modifications to as a part of Namecoin currency transactions, including u/ for use names and basic profiles and d/ for domain names, with a common set of rules for how to update the entries in all of them.   What I imagine is a blockchain where your register data structures by name and declare a format for it and rules for how to update it. There would be a few predefined data structures like ""coin"" (replicating Bitcoin), ""DNS"" (which in turn replicates the functionality of Namecoin above with sub-namespaces for domain names, profiles, etc), ""timestamp"" for things that only need to have its hash registered, ""credentials"" to replicate the functionality of the Distributed Anonymous Credentials paper I linked above, and a few more like that.  For simplicity, a data structure could have a rule that says it is to be considered isolated, it can't reference other data structures. Others could allow you to reference data in any other data structures. Some could whitelist which data structures you can reference, and in some cases you would have a mutual whitelist or certain rules in between data structures of the same type (allowing you to for example make an atomic exchange between two altcoin data structures, such that either Alice gets 1 unit of altcoin 1 from Bob AND Bob gets 1 unit of altcoin 2 from Alice, or NEITHER transactions happens (both in full or none at all, this is what atomic transactions mean).  Then people could register other data structures with arbitary names and functionality. This could include altcoins on the same blockchain, things like Counterparty, an open online chess game data structure (yes, really), and much more. Every transaction would have a one or more atomic (complete in and of itself) instructions for how to modify one or more of the named data structures (an atomic instruction can only modify multiple data structures at once if they all allow that behavior, otherwise you need to split up that instruction in one per data structure to modify).  Every atomic instruction carries its own ZKP (Zero-knowledge proof of validity). Every transaction references which previous transactions it supercedes or appends to (if any) to allow more direct and simplified pruning. Not all data needs to be public and included in the blockchain thanks to the ZKP, you only need the hash of the instruction and data, those who need to interact with it then needs to figure out themselves how to access the raw data in order to create new valid transactions. This data could itself be public in the transaction that registers the named data structure, it could name a DHT key to ask for in order to find the data (this reduces the storage requirements for everybody).   Once in a while all data is indexed and a ZKP is generated of the index. All old superceded transactions are left out of the index as they aren't needed. All you need to store to verify the validity of ALL entries and all new transactions is the block headers (a few hundred bytes each) and the index with its ZKP."
crypto,2tml59,qCE6fh7jlv,18,Sun Jan 25 17:10:56 2015 UTC,"/dev/urandom is cryptographically secure. OpenSSL, OpenSSH, GnuPG (except for key generation), all rely on it."
crypto,2tml59,atoponce,11,Sun Jan 25 17:15:06 2015 UTC,"Or, if you have a sufficiently recent kernel, the getrandom() syscall, which avoids some problems with /dev/urandom (e.g. chroots, fd exhaustion, …)."
crypto,2tml59,Creshal,6,Sun Jan 25 19:39:20 2015 UTC,"This. Also you can add more sources of entropy if you have them. RPis have a hwrng, newer Intels have RDRAND, and libhavege / haveged run on just about everything."
crypto,2tml59,levoroxi,5,Sun Jan 25 17:49:59 2015 UTC,The hwrngs should be feeding into the kernel entropy pool anyway.
crypto,2tml59,Creshal,1 point,Sun Jan 25 19:37:55 2015 UTC,"Maybe so for RDRAND, but the Raspberry Pi hwrng kernel module is not enabled by default in Raspbian as of writing this comment. haveged isn't installed/enabled by default on most distros I have used, either."
crypto,2tml59,levoroxi,1 point,Mon Jan 26 00:01:02 2015 UTC,"Beaglebones have a HWRNG as well, it's enabled by default in the newer RCN kernels (I don't think it's backported to 3.8 though).   My original model Beaglebone can put out about 175KB/s and my BBB puts out closer to 350KB/s.  I've been using 2 of them with some custom python to distribute entropy around the network."
crypto,2tml59,suddenlypandabear,1 point,Mon Jan 26 04:54:38 2015 UTC,"The Intel HWRNG stuff is suspect at best. It's design requires perfect power to the CPU and chipset, otherwise it can have predictable bias. I typically blacklist that module and use a Entropykey (currently unavailable), TrueRNG [ http://ubld.it/products/truerng-hardware-random-number-generator/ ] or haveged to feed the kernel entropy pool. With any one of those, you can handle quite a lot of SSL handshakes."
crypto,2tml59,edolnx,6,Sun Jan 25 22:57:58 2015 UTC,"I don't believe that RDRAND needs to be a trusted source if it is feeding the kernel entropy pool, and frankly, I will expect the threat model for a common SSL server to not need to worry about some type of side-channel SSL bias. It'd be much easier for such an adversary just to steal the keys."
crypto,2tml59,levoroxi,1 point,Sun Jan 25 23:57:52 2015 UTC,"Blacklisting the kernel from using rdrand is a bit of a heavy-handed response, at least since the 2012 change that split the kernel-internal get_random_bytes interface into two: the normal one that always uses the mixed entropy pool, and one used only when architecture-specific RNGs are explicitly used.  My copy of the 3.10 and 3.18 trees don't even have a single call to the latter, either.  The user-facing /dev/{u,}random interfaces have always used the mixed pool, at least to the best of my code-archeological abilities.  Since the kernel already mixes the rdrand-generated data with other sources of entropy, I have yet to see a compelling reason to use a userspace daemon to do ... the same thing.  At this point, I would be more worried about userspace applications that try to ""out-smart"" the kernel, and use rdrand rather than reading /dev/urandom at all.  This seems to be something OpenSSL can be runtime-configured to do since 1.0.1, and I wouldn't at all be surprised if something in a standard distro uses it as a hilariously premature optimization."
crypto,2tml59,mokomull,3,Mon Jan 26 06:35:06 2015 UTC,"If the version of Linux is recent enough, it's even better to use getrandom(2) if provided by the kernel. This is a sys call equivalent of /dev/urandom which means that it cannot fail due to file descriptor exhaustion or file-system issue.  This was committed around august in 3.17 so it might not be in your distro.  http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c6e9d6f38894798696f23c8084ca7edbf16ee895"
crypto,2tml59,GahMatar,1 point,Sun Jan 25 23:08:10 2015 UTC,I think you mean getrandom(2).
crypto,2tml59,atoponce,1 point,Sun Jan 25 23:29:34 2015 UTC,Indeed.
crypto,2tml59,GahMatar,9,Mon Jan 26 04:47:11 2015 UTC,"Install a microphone hooked up to a drunken uncle. That will be your truest, best source of random.  totally not a serious answer don't shoot"
crypto,2tml59,Katana__,4,Sun Jan 25 18:37:46 2015 UTC,"You laugh but.... This (audioentropyd) has existed for quite a few years now, and is available as a package on many systems.  It is not certified in any way last I checked, but is at least rather well tested. Audits? Your guess is as good as mine, but it's interesting and the info I lack is easily found, much of it on the site linked that I am too lazy to read at the moment."
crypto,2tml59,spychipper,7,Mon Jan 26 03:23:09 2015 UTC,Are drunken aunts not equally capable of generating conversational entropy?
crypto,2tml59,justusranvier,7,Sun Jan 25 20:23:32 2015 UTC,"Drunken uncles have a far broader range. Aunts usually have high amounts of repetitive gossip, which can result in predictable output."
crypto,2tml59,Katana__,5,Sun Jan 25 20:27:16 2015 UTC,"This depends on the quality and age of one's uncle. Sometimes they are prone to telling you the same stories when drunk, thus also creating predictable bias. Any drunken relative entropy should probably be whitened before use."
crypto,2tml59,levoroxi,-13,Mon Jan 26 00:02:28 2015 UTC,oh lol you're so funny. I laughed so hard.  Bitch.
crypto,2tml59,cuphead69,1 point,Sun Jan 25 18:47:46 2015 UTC,Turbid
crypto,2tml59,chiniwini,1 point,Tue Feb 3 15:06:03 2015 UTC,havege
crypto,2tml59,muchrandom,-2,Fri Feb 6 19:53:17 2015 UTC,"On any system, you should always use the OS-provided secure random number API. The OS knows how to collect far more entropy than you do, and it might even have a hardware RNG.  If the system RNG is too slow (as it often is on Linux), you can use an encryption algorithm as a much faster PRNG with roughly the same security:  $ dd if=/dev/urandom of=/dev/null bs=4K count=1M 1048576+0 records in 1048576+0 records out 4294967296 bytes (4.3 GB) copied, 466.231 s, 9.2 MB/s     $ dd if=/dev/urandom bs=128 count=1 status=none | openssl aes-128-cbc \ -in /dev/zero -pass stdin -nosalt|dd of=/dev/null bs=4K count=1M 1048576+0 records in 1048576+0 records out 4294967296 bytes (4.3 GB) copied, 36.9852 s, 116 MB/s"
crypto,2tml59,theymos,0,Mon Jan 26 10:26:04 2015 UTC,No! Because Debian.. And No! Because you won't increase the entropy by doing that.
crypto,2tml59,imorp,0,Tue Jan 27 19:46:32 2015 UTC,"Because Debian.   You're far more likely than the maintainers of your OS to make a serious mistake here. If you want, you can add some extra entropy on top of /dev/urandom. (The proper way to do this is to take some /dev/urandom data, concatenate it with your entropy data, and hash the resulting string.)   Because you won't increase the entropy by doing that.   Of course, but it shouldn't significantly decrease the unpredictability and uniformness of the output if the symmetric encryption algorithm is strong, and it's much faster than the Linux RNG. This is a standard method for constructing CSPRNGs.  My one-liner is probably not particularly robust. Maybe it can silently return non-random data in some cases. I was just trying to illustrate a method."
crypto,2tj5u3,atoponce,1 point,Sat Jan 24 18:15:16 2015 UTC,"Card Chameleon Deck Keying (link : http://aarontoponce.org/wiki/card-ciphers/card-chameleon/keying) seems to have a typo.  ""An unkeyed deck is as follows:  Sort each card in each suit numerically, where Ace = 1, Jack = 11, Queen = 12, and King = 13. Sort the deck face up by suits in alphabetical order- Clubs, Hearts, Diamonds, Spades. If the jokers are to be used, identify one as the “Red Joker” and the other as the “Black Joker”. Place them at the back of the face up deck, so the Black Joker is on the bottom.""   Would that order then be Clubs, Diamonds, Hearts, Spades? I tried to find something about unkeyed decks in the original paper (Design and Analysis of RC4-like Stream Ciphers), but it didn't seem to have it there.  Am I missing something?"
crypto,2tj5u3,rysade,2,Sun Jan 25 05:11:18 2015 UTC,It was a typo. Thanks for the catch.
crypto,2tj5u3,tea-drinker,1 point,Sun Jan 25 12:12:04 2015 UTC,"I'm taken with the idea that I could key two decks and give one to my friend to carry.  Then if either of us are caught we can play 52-pickup to destroy the key.  Or putting it in as an item in a particularly nerdy treasure hunt.  Or topically, ""UK government to ban playing cards.""  Edit: If you find yourself with a surplus of free time it might be fun to encrypt a test message for each algorithm as an exercise for the reader."
crypto,2tj5u3,rysade,3,Sun Jan 25 22:30:31 2015 UTC,"Interestingly enough, 52-card pickup retains a great deal of the original order. Instead, calmly shuffling and cutting the deck a few times will get you much further in terms of unkeying the deck with less suspicion.  Also, I've gone to great lengths to explain the algorithm, so the user should be able to encrypt any message after becoming familiar with the algorithm.  With that said, I understand what you mean. I need some plaintext, a key (deck order), and a ciphertext, so the user knows they understand the steps correctly. Also, I want to upload some how-to videos, showing the steps visually.  However, some of these algorithms can be executed quickly, and with minimal error. This is certainly something that friends could do with other for fun, or with a pen pal. I also like that there is possibly very strong crypto here, without the need of a computer."
crypto,2tiufn,StuartPBentley,10,Sat Jan 24 16:37:27 2015 UTC,"You could probably encrypt it with AES and release a part of the key, leaving X bits to be brute forced."
crypto,2tiufn,Elyotna,5,Sat Jan 24 19:16:24 2015 UTC,Or release none of the key and encrypt using DES.
crypto,2tiufn,conradsymes,1 point,Sun Jan 25 01:44:30 2015 UTC,"So, about 1 second and $1.29 on Amazon ec2?"
crypto,2tiufn,antiduh,3,Sun Jan 25 04:43:51 2015 UTC,"It definitely takes longer... http://tjscott.net/crypto/64bitcrack.htm  "" DES cracking is such a parallelizable problem: an exhaustive key search of the Data Encryption Standard (DES) takes no longer than a week on average with COPACOBANA. "" http://www.copacobana.org/"
crypto,2tiufn,conradsymes,4,Sun Jan 25 04:53:14 2015 UTC,"While my statement was a little tongue in cheek, des has several attacks on it, making it much faster than brute force. Heck, 16 years ago in 1999, it was done in 24 hours using 100k cpus as part of des challenge 3. I honestly wouldn't doubt if Amazon could be used to crack des for less than $20 in less than an hour."
crypto,2tiufn,antiduh,3,Sun Jan 25 05:06:25 2015 UTC,"Those attacks require access to the plain text, or the ability to submit plain texts to be encrypted.  For a short message, it is irrelevant."
crypto,2tiufn,conradsymes,10,Sun Jan 25 05:13:29 2015 UTC,"Aside from all other issues, check out this article on the MIT time lock challenge  http://www.newscientist.com/article/mg21028133.700-unbreakable-the-mit-timelock-puzzle.html  There are also technical solutions which involve a guaranteed synchronized clock (perhaps via the Bitcoin blockchain) to ensure decryption can only occur after a certain time. A paper titled ""Time-Lapse Cryptography"" addresses the issue along these lines.  Finally, there are non-technical solutions where you get a lawyer and write up a contract."
crypto,2tiufn,DoWhile,6,Sat Jan 24 19:20:12 2015 UTC,"Hash based timelock puzzles. Generate several chains of hashes, encrypt the first in each with another, use the last hash in the last chain to encrypt the actual key, give all the ciphertexts and the first hash from the first chain to the recipient.  He now has to compute the whole first chain, decrypt the first hash from the next, compute the done of THAT chain, and continue until the very last one. Then he can decrypt the actual message."
crypto,2tiufn,Natanael_L,2,Sat Jan 24 21:03:49 2015 UTC,I don't understand. How is that different from just one large hash chain? And why is it harder to decrypt than to encrypt?   Or is this just a way to magnify the decryption penalty? But then why not just use chain length 2?
crypto,2tiufn,IlikeSalmiakki,3,Sun Jan 25 13:36:59 2015 UTC,"The point with the hash chain is that you have to compute them serially. H(H(H(H(H(H(H(H(seed)))))))), but with waaay more steps. You can't just throw more servers at it, it won't go faster for that. The chain is there for the sake of slowing things down.   Using a heavy key derivation algorithm (scrypt, bcrypt) instead of a hash chain has the same effect as well.  But creating a really long chain would require you to use one single CPU core for that same amount of time, but with a GPU or multiple CPU cores, you spend X/number of cores in time.  You can parallelize the creation of it this way, but you can't parallelize the decryption"
crypto,2tiufn,Natanael_L,1 point,Sun Jan 25 13:49:56 2015 UTC,PDBKDF 264?
crypto,2tiufn,conradsymes,1 point,Sun Jan 25 03:01:27 2015 UTC,"Instead of hash chains, you mean? Well, why not. Should work."
crypto,2tiufn,Natanael_L,5,Sun Jan 25 09:11:55 2015 UTC,"A really simple solution to this is an RSA-based time lock puzzle.  The idea is that the decryption exponent is very large, say 22t. To perform the decryption, the receiver needs to perform 2t squaring operations (using proper parameters, this will be cheaper than factoring the modulus or brute-forcing the symmetric key).  The nice thing about this is that squaring cannot be done in parallel, so the decrypter cannot use multiple processors to speed up the decryption."
crypto,2tiufn,nsa_at_home,1 point,Sun Jan 25 04:05:37 2015 UTC,"This describes exactly what I'm looking for - the archetypal example would be implemented three years after that paper was published, in a time capsule (metioned in another comment) set to take 35 years to decrypt."
crypto,2tiufn,DrGrinch,2,Sat Feb 28 05:25:46 2015 UTC,"I guess the problem there (neat idea though) would be that the more horsepower you throw at the decryption, you would be able to artificially speed up the process. If I was able to take the message and throw it at AWS, I could probably decipher in minutes what was meant to take hours. You would need to build some sort of artificial rate limiting method into the decryption process I'm guessing."
crypto,2tiufn,Natanael_L,3,Sat Jan 24 18:33:53 2015 UTC,Hash chains stops parallelization
crypto,2tiufn,fragglet,2,Sun Jan 25 09:12:27 2015 UTC,"There's a puzzle like this in a time capsule in the MIT computer science lab, designed by Ron Rivest. See here."
crypto,2tiufn,pietervdvn,2,Sun Jan 25 04:05:28 2015 UTC,"Check out Peter Todd's ""Timelock"". It's a ingenious way of using bitcoin to have a pretty accurate timing, and a possibility to speed up decryption.  https://github.com/petertodd/timelock"
crypto,2tgowu,atoponce,5,Sat Jan 24 00:18:49 2015 UTC,"Fantastic discussion, was interesting to hear Snowden mention blockchains in the context of reducing the privacy trade-off when using services that utilize our data.   I just read an article about the uses of blockchain id systems, I wonder what other uses blockchain tech could have for solving some of the issues that were discussed."
crypto,2tgowu,yourfriendrj,2,Sat Jan 24 13:30:50 2015 UTC,"When thinking of what blockchains could solve, consider that they're ideal for coordination. That's basically their primary task."
crypto,2taz0f,HansVanEijsden,5,Thu Jan 22 17:07:36 2015 UTC,"3rd-segment version bumps are ""major""? I don't understand their versioning system."
crypto,2taz0f,phyzome,9,Thu Jan 22 17:15:57 2015 UTC,Welcome to most software versioning pre-SemVer.  You may as well regard this as release 102.  The patches to the current release are given as postfix ascending letters.
crypto,2taz0f,ivosaurus,1 point,Thu Jan 22 18:12:25 2015 UTC,"Hah, thanks."
crypto,2taz0f,phyzome,1 point,Thu Jan 22 18:14:07 2015 UTC,Any chance you'd explain that for a layperson's consumption? Thanks in advance!
crypto,2taz0f,PostHipsterCool,2,Fri Jan 23 06:55:08 2015 UTC,"It's the second feature release after version 1.0.0 was released. Although 1.0.0 was mostly because the previous version to that was 0.9.9.  When a patch / bugfix release is given for 1.0.2, it will be called 1.0.2a, and then 1.0.2b, etc."
crypto,2taz0f,ivosaurus,1 point,Fri Jan 23 08:34:20 2015 UTC,Ohhhhh.  Wow that's a terrible naming/numbering method
crypto,2taz0f,PostHipsterCool,2,Fri Jan 23 15:54:10 2015 UTC,I'm waiting to see what they do after 1.0.0z.
crypto,2taz0f,disclosure5,4,Fri Jan 23 02:33:39 2015 UTC,"The 0.9.8 branch already passed z, za, zb, zc, zd, currently 0.9.8ze."
crypto,2taz0f,R-EDDIT,6,Fri Jan 23 02:51:40 2015 UTC,Ewwwwwwww
crypto,2taz0f,disclosure5,3,Fri Jan 23 03:17:53 2015 UTC,Base lexicographical-ordering. We should probably count ourselves lucky they worked that out and we're not stuck with 1.0.1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.
crypto,2taz0f,TNorthover,1 point,Fri Jan 23 03:27:02 2015 UTC,"That's true.  I mean I get it. But.. we're talking about a project that's been actively worked on since 1998, and still sitting at version 1. These ultraminor releases don't make sense."
crypto,2taz0f,disclosure5,1 point,Fri Jan 23 03:35:33 2015 UTC,"Builds cleanly on Windows, so it's already better than 1.0.1l.  (Which needed one minor tweak)."
crypto,2taz0f,R-EDDIT,0,Fri Jan 23 00:29:15 2015 UTC,http://opensslrampage.org/
crypto,2t5b1q,2bluesc,12,Wed Jan 21 06:44:00 2015 UTC,Original discussion posted a few days ago
crypto,2t5b1q,deathfantasy,13,Wed Jan 21 07:31:23 2015 UTC,"This attack isn't even necessary, if your bank issues you a private key, obviously they can decrypt all your messages by simply keeping your private key and not telling you. Am I missing something?"
crypto,2t5b1q,NobleSir,5,Wed Jan 21 17:37:09 2015 UTC,"This could be implemented in hardware, closed source software, via a rootkit, or otherwise modified binaries."
crypto,2t5b1q,rya_nc,7,Wed Jan 21 20:07:56 2015 UTC,Giving you closed software to generate private keys = giving you private keys.
crypto,2t5b1q,NobleSir,17,Wed Jan 21 20:40:17 2015 UTC,"You'll never prove that the key pairs issued to you by banks do not have these type of markings. It's impossible to prove!   Strictly speaking, you wouldn't ""prove"" such a thing, but the idea behind it isn't true, either--points on an elliptic curve are not indistinguishable from uniform random, and neither are RSA moduli.   Well, and stop using RSA, if possible.   Once again, this isn't Curve25519 or RSA-specific.  Attacks like this exist for every cryptosystem."
crypto,2t5b1q,bren2010,4,Wed Jan 21 07:28:23 2015 UTC,"This article explicitly makes a point that RSA is weak due to this attack, which is one of the questions I asked the main author... whether he was trying to make that point.  You cannot let anyone generate a key for you in any cryptosystem.  Mostly due to RNG used.  Anyone includes closed source programs on your computer.  Some of the ways ECC could be attacked is instead of using a 256 bit entropy RNG seed, use 40 bits, multiply it by a 210 bit secret number and add 1 (or other secret 255 bit odd number) .  There is still an unlikely collision among keys, but you can brute force every key in a short time, or store all private public key pairs in 32tb for near instant access (32 tb sparse arrays let you just store the keys are used, and so take up much less space).  No need to embed anything in the public key.  Every 10m or so key generations, you can change the key encoding format as an excuse to change the addition factor from 1 to 3 ( or any other 255 bit addition secret factor).  No one can detect the backdoor unless they guess the 255 bit secret addition factor and then notice that multiple keys have gcd of (k - addfactor) = multfactor.  Whenever an authority is generating keys for clients, the simpler attack is just to copy the private key to a database."
crypto,2t5b1q,Godspiral,1 point,Wed Jan 21 17:32:58 2015 UTC,Anybody with access to a machine with the algorithm can generate 241 keys and watch the repetitions
crypto,2t5b1q,Natanael_L,1 point,Wed Jan 21 18:12:47 2015 UTC,"true, but that would feel like work.  A better scheme (more entropy) for embedding a secret into ECC:  https://www2.informatik.hu-berlin.de/~verbuech/klepto-ecdsa/klepto-ecdsa.pdf"
crypto,2t5b1q,Godspiral,1 point,Wed Jan 21 18:42:01 2015 UTC,"Where do you draw the line though?  Who will generate you the private key?  OpenSSL?  How do you know it's secure and not backdoored?  I certainly do not read the patch files that go into each upgrade of OpenSSL on my system.  And even if it's clean, how do we know there's no backdoors in the OS?  Tinfoil hat, engage!"
crypto,2t5b1q,qbasicer,1 point,Wed Jan 21 21:17:24 2015 UTC,"The OS RNG being backdoored is a weird thought.  It wouldn't be the main RNG because that is not used for crypto.  High entropy RNGs would not be part of (main) OS, though an OS supplied RNG could theoretically do something crafty when requested 256 1024 or 2048 bits, it would be hard for the RNG to know how its numbers would be used by the caller.  At any rate, Microsoft does provide crypto libraries with windows.  You should not use.  OpenSSL is widely used enough that it should have enough eyes on it to not be backdoored.  Still I made my own routines here, including RNGs.  http://www.reddit.com/r/crypto/comments/2sezbo/a_fast_alternative_to_xoraes_list_passphrases_and/  You could argue that it would be easier to hide ECC backdoors in plainsight than RSA, because fewer people can follow the techniques, though someone would still have blown a whistle on OpenSSL if it did have a backdooring scheme."
crypto,2t5b1q,Godspiral,2,Wed Jan 21 22:41:28 2015 UTC,"I'd be more worried that the version of OpenSSL that gets compiled is bad, or the OS could load OpenSSL and patch the code as it's loaded to be compromised.  Like I said, tinfoil hat."
crypto,2t5b1q,qbasicer,1 point,Wed Jan 21 22:52:37 2015 UTC,"It is precompiled on many platforms, and the executable would naturally vary based on linked libraries and compiler used.  I'm not sure if apple for instance discloses what source branch with what compiler switches and what libraries are linked, so that it could be verified, much less be certain that someone has followed steps to verify it."
crypto,2t5b1q,Godspiral,2,Wed Jan 21 23:27:33 2015 UTC,"Though for Curve25519, the elligator scheme for point representation does allow you to have points that are indistinguishable from uniform random."
crypto,2t5b1q,danukeru,2,Wed Jan 21 15:35:45 2015 UTC,That's the whole point of why it's a good curve to use for generating key pairs!
crypto,2t5b1q,NobleSir,3,Wed Jan 21 17:44:11 2015 UTC,This is a writeup of a C# port of the code I posted here: https://www.reddit.com/r/crypto/comments/2ss1v5/rsa_key_generation_backdoored_using_curve25519/ (which is credited at the bottom of the article)
crypto,2t5b1q,rya_nc,2,Wed Jan 21 19:47:03 2015 UTC,"Coincidentally, a few days ago I was wondering if there are any cryptosystems where it is possible to have ""secondary"" private keys that allows exactly one more person to decrypt messages.  I know I would do this if I were the NSA. Giving only myself control over decryption, and excluding everyone else from using the backdoor.  And here it is."
crypto,2t5b1q,FrigoCoder,3,Wed Jan 21 14:03:59 2015 UTC,"I designed this from the perspective of ""what would I do if I were the NSA"". I picked curve25519 for irony of using one of djb's algorithms in an NSA-style backdoor."
crypto,2t5b1q,rya_nc,1 point,Wed Jan 21 20:04:39 2015 UTC,"We should have a thread called ""If I were the NSA"""
crypto,2t5b1q,FrigoCoder,1 point,Thu Jan 22 19:36:19 2015 UTC,Also look at threshold cryptography
crypto,2t5b1q,Natanael_L,-7,Wed Jan 21 18:14:07 2015 UTC,"While this sounds awful, this just affects Curve25519. So if I obtain a certificate chain and none of the keys have been signed using that method, I wouldn't have to worry, correct?"
crypto,2t5b1q,big-blue,15,Wed Jan 21 07:15:02 2015 UTC,"No, the provided example affects RSA. But the attack is general; this sort of thing can basically be done with any cryptosystem if you can't trust your RNG or the program generating your keys."
crypto,2t5b1q,stouset,3,Wed Jan 21 08:10:24 2015 UTC,"It's not really that general. I think it wouldn't affect ECDSA keys as easily. They have a shorter keylength, it would be that much harder to embed another key in there."
crypto,2t5b1q,rrobukef,3,Wed Jan 21 09:23:54 2015 UTC,"There are better ways to leak the key from ephemeral (EC)DH, and with (EC)DSA, you'd usually just leak information through the nonce (instead of the public key itself)."
crypto,2t5b1q,bren2010,-1,Wed Jan 21 17:09:30 2015 UTC,EC Dual DBRG
crypto,2t5b1q,Natanael_L,3,Wed Jan 21 13:49:11 2015 UTC,"Which is a completely other approach.   You don't embed the key then, you just have a fast discrete log."
crypto,2t5b1q,rrobukef,1 point,Wed Jan 21 15:29:12 2015 UTC,"Also, if you're using Dual EC DRBG, you're already being snooped on by the NSA.  http://en.wikipedia.org/wiki/Dual_EC_DRBG#Software_and_hardware_which_contained_the_possible_backdoor"
crypto,2t5b1q,utopianfiat,2,Wed Jan 21 15:56:39 2015 UTC,At the cost of sounding pedantic: You have a fast discrete log.
crypto,2t5b1q,rrobukef,5,Wed Jan 21 19:24:47 2015 UTC,That is completely incorrect. This attack has no relation to the curve other than that's what they choose for their example.
crypto,2t5v22,P-e-t-a-r,6,Wed Jan 21 11:50:38 2015 UTC,Most Linux distributions come with ssss. It allows you to do threshold based encryption. Have a look at http://linux.die.net/man/1/ssss
crypto,2t5v22,xkcdcode,1 point,Wed Jan 21 13:36:53 2015 UTC,"Thanks a lot, that is what I am serching for. But alternatives are always welcome."
crypto,2t5v22,ahazred8vt,2,Wed Jan 21 14:44:20 2015 UTC,"Currently the simplest and most portable key splitter is http://passguardian.com/ -- it works in your browser. If you want to, you can download the entire web page and use it offline.  8017c339c9637578b3402266c762b 802fb664631e5aeba68ba4c6aec99"
crypto,2t5v22,rya_nc,1 point,Sat Jan 24 05:42:34 2015 UTC,"Oh, hey, I wrote that. I assume you made a typo and the issue was that you couldn't get it to compile? I can probably help if you paste build output.  Threshcrypt differs from other threshold encryption software in that it stores all the shares with your data, encrypted with individual passphrases. Each share needs to be as long as the data to be split - threshcrypt splits a randomly generated AES key instead and encrypts the data with that. Other software just gives you the shares."
crypto,2t5y60,quantum88,5,Wed Jan 21 12:35:08 2015 UTC,Truecrypt remains the best option until another proves themselves.. which they haven't done yet.  see https://www.reddit.com/r/crypto/comments/2rbpm3/truecrypt_veracrypt_ciphershed_diskcryptor_is/
crypto,2t5y60,davidpbrown,3,Wed Jan 21 13:13:17 2015 UTC,Read Steve Gibson's take on why it's OK to keep using TrueCrypt 7.1a: https://www.grc.com/misc/truecrypt/truecrypt.htm  You can also get signed TrueCrypt releases at that site.
crypto,2t5y60,flitterio,1 point,Wed Jan 21 17:51:47 2015 UTC,"Since you haven't explained your needs we're left guessing, what a shame.  Consider using LUKS/dm-crypt or minilock."
crypto,2t43b7,Calvinex,8,Wed Jan 21 00:21:52 2015 UTC,"What exactly do you mean? A small puzzle having to do with ""cyber"" or ""crypto""? What is ""cyber""? /r/codes has tons of such puzzles, though none of them will use modern crypto."
crypto,2t43b7,SAI_Peregrinus,7,Wed Jan 21 03:41:24 2015 UTC,"Are you looking for cryptograms? If so, I think you're in the wrong subreddit."
crypto,2t1aq9,zeroXten,14,Tue Jan 20 09:24:04 2015 UTC,"The site is run by Dr. Daniel J. Bernstein of the University of Chicago. He's a respected mathematician and cryptographer.  In order to answer the first question, if the curves are trustworthy, you have to identify what DJB (as he is commonly known) is defining as a SafeCurve. On the left of the page is a purple table that introduces you to each of the parameter and security requirements for ECC SafeCurves. They are:   Choosing prime finite fields. Nonzero equations over the chosen field. Base points such that ""prime order ℓ"" and ℓ(x_1,y_1) = 0. The cost for the rho method to break ECDLP. Additive and multiplicative transfers for an elliptic-curve group of prime order ℓ over a prime field F_p. The absolute value of a complex-multiplication field discriminant value ""D"" must be larger than 2100. At least ""somewhat rigid"" in that the curve generator does not give up control of which curves are generated. Must support the Montgomery Ladder. The cost for a combined twist attack must be above 2100. Must be complete single-scalar formulas and must be complete multi-scalar formulas. Representations of elliptic-curve points must be indistinguishable from uniform random strings.   His references can be found at http://safecurves.cr.yp.to/refs.html, and he provides a Python script where you can verify the criteria of each of the curves on your own.  Curve25519 has become the unofficial accepted ECC curve in modern crypto. It's supported by the OpenSSL fork LibreSSL, it's supported by OpenSSH, and it's supported in Tor. More information at the Wikipedia page on Curve25519.  Finally, why the concern over whether or not an informational page is delivered over TLS? Nothing on that page is not already public knowledge, so it seems serving it over TLS, just because you can, is a waste of computing resources."
crypto,2t1aq9,atoponce,11,Tue Jan 20 14:06:54 2015 UTC,"Finally, why the concern over whether or not an informational page is delivered over TLS? Nothing on that page is not already public knowledge, so it seems serving it over TLS, just because you can, is a waste of computing resources.   https://www.philzimmermann.com/EN/essays/WhyIWrotePGP.html   What if everyone believed that law-abiding citizens should use postcards for their mail? If a nonconformist tried to assert his privacy by using an envelope for his mail, it would draw suspicion. Perhaps the authorities would open his mail to see what he's hiding. Fortunately, we don't live in that kind of world, because everyone protects most of their mail with envelopes. So no one draws suspicion by asserting their privacy with an envelope. There's safety in numbers. Analogously, it would be nice if everyone routinely used encryption for all their email, innocent or not, so that no one drew suspicion by asserting their email privacy with encryption. Think of it as a form of solidarity.   ""Waste of computing resources"" is not a valid reason not to encrypt. Encryption should be the default, except in circumstances where there's a very compelling reason against it."
crypto,2t1aq9,justusranvier,-7,Tue Jan 20 17:34:11 2015 UTC,"If the reason to encrypt is to add a smokescreen to the overall traffic, then fine. But if the reason is to encrypt, Just Because, that's not a valid reason, especially when it means increasing the load on busy servers, and causing potential instability of services."
crypto,2t1aq9,atoponce,5,Tue Jan 20 17:36:46 2015 UTC,"increasing the load on busy servers, and causing potential instability of services   https://istlsfastyet.com/"
crypto,2t1aq9,sarciszewski,4,Wed Jan 21 01:54:26 2015 UTC,"Curve25519 has become the unofficial accepted ECC curve in modern crypto. It's supported by the OpenSSL fork LibreSSL, it's supported by OpenSSH, and it's supported in Tor. More information at the Wikipedia page on Curve25519[4] .   Also I2P is preparing to switch, and GnuPG is preparing to support it."
crypto,2t1aq9,justusranvier,1 point,Tue Jan 20 14:47:18 2015 UTC,"Finally, why the concern over whether or not an informational page is delivered over TLS? Nothing on that page is not already public knowledge, so it seems serving it over TLS, just because you can, is a waste of computing resources.   Because how can I trust the information if I don't know who sent it? I could of course check other sources, but then this page is not really useful either is it?"
crypto,2t1aq9,irishsultan,1 point,Fri Jan 23 12:06:35 2015 UTC,I could have course?
crypto,2t1aq9,irishsultan,1 point,Fri Jan 23 12:07:11 2015 UTC,"Curve25519:       Curve25519 is an elliptic curve cryptography curve and set of parameters designed by Daniel J. Bernstein to be used with the elliptic curve Diffie–Hellman key agreement scheme.   The curve used is y2 = x3 + 486662x2 + x, a Montgomery curve, over the prime field defined by the prime number 2255 − 19, and it uses the base point x = 9. Protocol uses compressed elliptic point (only X coordinates), so it allows for efficient use of the Montgomery ladder for ECDH, using only XZ coordinates.   The curve is birationally equivalent to Ed25519 (Twisted Edwards curve).      Interesting: DNSCurve | EdDSA | NaCl (software) | Daniel J. Bernstein   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2t1aq9,autowikibot,-4,Fri Jan 23 12:20:49 2015 UTC,"Yes, we've heard about Curve25519, thank you."
crypto,2t1aq9,bgeron,2,Tue Jan 20 14:07:03 2015 UTC,Apparently you've never heard of a bot before.
crypto,2t1aq9,MrUnknown,1 point,Wed Jan 21 01:27:39 2015 UTC,"Oh I have, I just wish there was an opt-out."
crypto,2t1aq9,bgeron,1 point,Wed Jan 21 15:06:25 2015 UTC,"You'd have to talk to the mods.  Or, I am pretty sure Reddit Enhancement Suite can block the user/bots you want."
crypto,2t1aq9,MrUnknown,6,Wed Jan 21 15:36:03 2015 UTC,"DJB is generally considered to be trustworthy. The assessments there are reasonably reliable, with the caveat that the curves considered safe may have undiscovered weaknesses. But that goes for any crypto implementation really.  And note that the ""safe"" vs ""unsafe"" curves here are just about implementation difficulty. That's very important, but it's not part of the underlying crypto math. The ""unsafe"" curves are very unlikely to be implemented without weaknesses, but it is theoretically possible."
crypto,2t1aq9,SAI_Peregrinus,3,Wed Jan 21 15:56:47 2015 UTC,"And note that the ""safe"" vs ""unsafe"" curves here are just about implementation difficulty. That's very important, but it's not part of the underlying crypto math.   Usually.  He does have some examples which are mathematically flawed or otherwise dangerous, like ""anomalous"" (broken, I think) and ""BN(2,254)"" (has fast pairings, which is good if you want them and bad if you don't).   The ""unsafe"" curves are very unlikely to be implemented without weaknesses, but it is theoretically possible.   I agree with everything else you wrote, but this is probably too strong.  The ""unsafe"" curves can be done right in practice, but they're tricky enough that ""safe"" replacements should be found and used instead."
crypto,2t1aq9,bitwiseshiftleft,1 point,Tue Jan 20 13:46:09 2015 UTC,So sticking with RSA is a good idea if I don't care about key size or speed?
crypto,2t1aq9,happinessmachine,3,Tue Jan 20 19:25:57 2015 UTC,There's nothing wrong with RSA with a sufficient modulus. NIST recommended at least a 2048 bit key size though.
crypto,2t1aq9,samyel,1 point,Tue Jan 20 18:23:24 2015 UTC,verification speed is still better in RSA.  Compared to Koblitz curves its 30x faster.
crypto,2t1aq9,Godspiral,1 point,Tue Jan 20 19:27:26 2015 UTC,"Wow, so what's the point of ECC then?  Is it just for the smaller key sizes?"
crypto,2t1aq9,happinessmachine,1 point,Tue Jan 20 21:26:37 2015 UTC,"Small key sizes (and they are MUCH smaller) in many circumstances is easy to underestimate. On one hand, smaller keys in a TLS session on a broadband service won't mean much.  An ECC signature at the end of an email looks a lot less like annoying bloat than an RSA signature. ECC keys can be easily translated to QR codes for paper/offline backups, RSA4096, not so easily. etc etc"
crypto,2t1aq9,disclosure5,0,Tue Jan 20 22:16:37 2015 UTC,"The new curve is supposed to be faster at both signing and verifying then the old ones.  (I don't know how much faster).  The ""old"" curves have the same signing speed but much slower verification (and there is often more than 1 verification per signing, or a server needs to be able to do 1000s per second) than RSA/Rabin.  Most people here will (pretty much baselessly) tell you that ECC feels more secure against future cryptanalysis developments than RSA (DLP) or Factoring schemes (includes RSA too).   One attack on ECC (ECDLP) can be translated into a DLP problem (of larger size equivalent to RSA), and so cryptanalysis developments on DLP would affect ECDLP too.  I'm more worried about ECC, because its newer, less intuitive, has a lot of salesmenship around it, and there is no provability for no non ECDLP attacks, and there may be incentives to hide attacks on the curves that are recommended.  While my suspicions over ECC are just as baseless as suspicions over DLP systems, an attack on 256 bit ECC is likely to break it (single PC), while an improvement on DLP attacks is likely to just cut a few centuries off the vulnerability of those systems.  The biggest problem with ECC though is birthday attack related.  All keys and signatures are from the same space, and it creates crowding, where every use is an attack on every other member.  Some systems aren't suited to this weakness even if 256 bits is considered adequate for most.  Alternatives to ECC have the advantage of doing straightforward encryptions and not just signatures as well."
crypto,2t1aaj,P-e-t-a-r,7,Tue Jan 20 09:17:30 2015 UTC,"You should probably go with topics that are easy and practical: TextSecure, XMPP+OTR instead of things that are very user unfriendly - GPG, I2P."
crypto,2t1aaj,exo762,1 point,Tue Jan 20 10:00:54 2015 UTC,"Also included that, but I covered lot of topics, programs, basically everything that I cold remember or found on the net for past 6 months."
crypto,2t1aaj,zeroXten,2,Tue Jan 20 10:10:05 2015 UTC,"How long is this party going to be? Perhaps you could very quickly go over a long list of stuff, but focus most of the time on to one or two topics. Otherwise you might be spreading yourself too thin."
crypto,2t1aaj,exo762,2,Tue Jan 20 10:16:31 2015 UTC,"Concentrate on practical knowledge. You will be speaking to people who do not like to play with tech. Imagine something going wrong and them being totaly helpless because of that. You will not make hackers out of casual users during one session.   Instead give them general understanding of security technologies, threat models (maybe), and solid practical ability of working with few selected (by you or them) technologies.   In case of TextSecure - dealing with it's PUSH-related bugs, with it's replacing sim bugs; in case of OTR - how to configure it securely and how to use millionares protocol; in case of TOR - stress out that thay should never use other browser than one in TorBundle."
crypto,2t1aaj,zeroXten,1 point,Tue Jan 20 10:19:32 2015 UTC,are or aren't?
crypto,2t1aaj,wtfdizzy,3,Tue Jan 20 10:08:17 2015 UTC,Provide beer? ;)
crypto,2t1aaj,zeroXten,2,Tue Jan 20 09:28:18 2015 UTC,"Probably cookies too. Not the web cookies, the real ones. :)"
crypto,2t1aaj,ZaphodsOtherHead,1 point,Tue Jan 20 09:34:54 2015 UTC,And not that Bud Lite shit either. GOOD beer!
crypto,2t1aaj,ZaphodsOtherHead,3,Tue Jan 20 14:16:09 2015 UTC,"I'm UK-based, so you'd probably get beaten to death serving beer like that."
crypto,2t1ege,neutralinostar,2,Tue Jan 20 10:22:32 2015 UTC,"Don't quite understand.  The basic way to sign code is to prove the authorship.  Unsafe code can usually mean code that accesses outside the sandbox (disk etc...)  You seem to be doing much more than this, but I don't follow what or why exactly."
crypto,2t1ege,Godspiral,1 point,Wed Jan 21 00:30:12 2015 UTC,See other discussion in r/rust. Probably best to treat this with a grain of salt and some humor at the first level.
crypto,2t1ege,GahMatar,2,Tue Jan 20 10:23:15 2015 UTC,It's actually a fairly cool idea. Though I don't see why it should be limited to unsafe code.
crypto,2szq6i,Natanael_L,13,Mon Jan 19 23:47:43 2015 UTC,"I'd like to see people donate to GnuPG.  Like... lots of people.  It's a solid tool that has some UX problems which are no doubt a symptom of limited development time and was a key ingredient in Snowden's ability to communicate securely with Laura Poitras and Glenn Greenwald.  It's the foundation for a lot of crypto currently in use, and it's maintained by one overworked guy who barely covers costs.    If you're considering donating to something, consider GnuPG."
crypto,2szq6i,na85,5,Tue Jan 20 00:43:05 2015 UTC,"More generally, secure e-mail by whatever means. Too few clients support any kind of encryption for e-mail.  And of those that do, neither S/MIME (relying on highly dubious CA methods) nor GnuPG (requiring significant user competence) are entirely reassuring.  Some kind of socialist millionaires challenge-response protocol to verify identities (like OTR) might be the way to go. As with all e-mail enhancements there's so much inertia though."
crypto,2szq6i,TNorthover,3,Tue Jan 20 04:04:31 2015 UTC,"The thing is ignorance makes you weaker in the face of crypto challenges.  You can use the most secure system in the world but if your password is ""kitty"" and you store your private key on a public file share ...  At some level users have to take responsibility for learning at least superficially how their security works."
crypto,2szq6i,kandi_kid,2,Tue Jan 20 14:01:10 2015 UTC,Thunderbird + Enigmail makes PGP email quite easy.
crypto,2szq6i,TNorthover,3,Tue Jan 20 04:10:09 2015 UTC,"I don't think any solution to the problem can realistically start with ""use X client"", no matter how good it is.   People are too invested in their existing software and workflows. You might get a few paranoid nuts to switch for added GPG features (I've been tempted on various occasions; I refuse to comment on my own paranoia).  But routine encryption has to be the goal, which will only happen if people don't have to worry about new software. Hence the need for some kind of standard."
crypto,2szq6i,levoroxi,3,Tue Jan 20 04:21:16 2015 UTC,"I don't think any solution to the problem can realistically start with ""use X client"", no matter how good it is.   Then you'll have to wait for Gmail to roll it into their existing UI, stock, and support it. The day that happens is probably the same day you can brute-force a 256-bit keyspace. That is, never.  Snark aside, every solution is going to require somebody to adopt a client, plugin, what-have-you, so I guess I don't understand what you're getting at."
crypto,2szq6i,TNorthover,2,Tue Jan 20 04:29:29 2015 UTC,"I could go with a plugin, but I don't think expecting people to verify key fingerprints is realistic, let alone trusting their assessment enough to propagate that to anyone else.  But for plugins to exist, we need a generally accepted standard to base them on (otherwise it's mutually incompatible attempts as in https://xkcd.com/927/ at best; at worst it's absolutely no encryption).   That's where I think attention should be focused. Coming up with something that can be implemented widely, and that I could reasonably expect my 80 year old grand-mother to handle if the situation arose."
crypto,2szq6i,xkcd_transcriber,1 point,Tue Jan 20 05:02:19 2015 UTC,"Image  Title: Standards  Title-text: Fortunately, the charging one has been solved now that we've all standardized on mini-USB. Or is it micro-USB? Shit.  Comic Explanation  Stats: This comic has been referenced 1168 times, representing 2.4136% of referenced xkcds.    xkcd.com | xkcd sub | Problems/Bugs? | Statistics | Stop Replying | Delete"
crypto,2szq6i,lasae,1 point,Tue Jan 20 05:02:37 2015 UTC,What do you use for mobile? I'm very cautious keeping my private key on my phone.
crypto,2szq6i,kandi_kid,2,Tue Jan 20 13:46:46 2015 UTC,I don't use it on my phone for that very reason. Phones are super insecure.
crypto,2szq6i,na85,2,Tue Jan 20 16:55:29 2015 UTC,I don't keep my private keys (GPG) on my mobile. I do have a Yubikey NEO which allows me to add hardware-based 2FA (Yubico OTP) along with NFC which is pretty neat.
crypto,2szq6i,TNorthover,2,Sun Jan 25 16:56:49 2015 UTC,Perhaps GnuPG wouldn't require such a high level of user competence if it had more resources to put into UX.
crypto,2szq6i,levoroxi,2,Tue Jan 20 04:13:42 2015 UTC,"There's not much more GnuPG can do within the existing RFCs. There's just no facility for verifying identities.  I'm sure the command-line interface or library API could be improved, but what we really need is a generic way to convey trust over e-mail."
crypto,2szq6i,conradsymes,3,Tue Jan 20 04:24:47 2015 UTC,over emailonline    We need better methods of declaring identities than GPG keys and better verification methods.
crypto,2szq6i,na85,1 point,Tue Jan 20 10:19:09 2015 UTC,Pond and I2P's Bote mail?
crypto,2szq6i,na85,2,Tue Jan 20 10:16:57 2015 UTC,"I don't think the UI/UX of GnuPG is limited to just the implementation. The fact of the matter is that understanding RSA is inherently difficult to master for an ordinary user at the moment, and then when you get into web of trust and passphrases and symmetric encryption and... so that's my point.  The problem is that to stay secure with GnuPG, you have to actually spend time studying what's going on enough to not do something stupid. A UI does some of that; keybase arguably helps the WoT end and client extensions like Enigmail do, too.  I think most people also misunderstand TLS/SSL connections for email == my email is secure, not really understanding the whole data at-rest vs in-transit thing. There's a lot of education to be made, and I think even with a simple UI some of that would go a long way."
crypto,2szq6i,ZaphodsOtherHead,1 point,Tue Jan 20 04:36:59 2015 UTC,"GNuPG protocol is outdated. It's defaults include Cast128.  Besides, GnuPG is useless against certain threatmodels."
crypto,2szq6i,levoroxi,2,Tue Jan 20 06:54:21 2015 UTC,Defaults can be changed.  Name a crypto system that is secure against every single threat.
crypto,2szq6i,ZaphodsOtherHead,1 point,Tue Jan 20 17:13:58 2015 UTC,XOR inside a bunker
crypto,2szq6i,AcaciaBlue,2,Tue Jan 20 18:07:50 2015 UTC,"Yeah I hear rot13 inside a bunker works too, unless you want to communicate over a network."
crypto,2szq6i,Creshal,3,Tue Jan 20 18:08:42 2015 UTC,"I'd like to see freenet and i2p get a serious security audit. They're super interesting projects, but I don't know how much to trust them given that there's been no formal audit of their code."
crypto,2szq6i,levoroxi,1 point,Tue Jan 20 01:56:21 2015 UTC,A security company called Exodus Intelligence dropped an i2p deanonymization vulnerability in July. I definitely think this type of software is where scrutiny is needed. Having more choice in anonymization networks is better than everyone jumping on Tor.
crypto,2szq6i,ZaphodsOtherHead,1 point,Tue Jan 20 04:32:23 2015 UTC,"Yeah, I remember that. I think that was the reason the TAILS devs turned i2p off by default. I'm a huge Tor fanboy. I use it for just about everything, I run a relay and I tell everyone I know to use Tor. It's great. But Tor can't do everything. I2p has all these interesting features (i2p-bote comes to mind) and freenet's censorship-resistance is unmatched. Different tools for different tasks. They all have a scary threat model, though, which is why we need a comprehensive audit for both."
crypto,2szq6i,AcaciaBlue,4,Tue Jan 20 04:40:24 2015 UTC,"I'd like to see adoption of already existing and effective tools, like pidgin otr.  Trying to get people to switch from facebook is like herding cats.  Maybe that means we need more work on the usability?"
crypto,2szq6i,levoroxi,2,Tue Jan 20 03:58:36 2015 UTC,"And some usability improvements to OTR. Right now, 10% of my messages sent via OTR are ""Yeah, OTR didn't start a session on my side, could you repeat that? manually restarts session Again? Ah, yes, that's a really funny cat picture""."
crypto,2szq6i,AcaciaBlue,1 point,Tue Jan 20 10:01:45 2015 UTC,Can't you use Facebook in Pidgin with OTR?
crypto,2szq6i,levoroxi,3,Tue Jan 20 04:33:41 2015 UTC,"Yeah, but the metadata problems persist. Plus, it's more complicated than the average person will put up with."
crypto,2szq6i,Urnotmyprey,1 point,Tue Jan 20 04:42:26 2015 UTC,"You sure can, but that 5 minutes to set it up is a ""waste of my life"" according to one of my friends.  Also it is much easier to use through Google or IRC as facebook does kinda make things difficult for using 3rd party clients.  If it worked out of the box on Pidgin or if it could be pre-packaged I think it would catch on a lot easier."
crypto,2szq6i,cwmma,2,Tue Jan 20 05:26:59 2015 UTC,"Well, you can't make somebody use crypto that doesn't care about it. I doubt Facebook will ever do OTR or anything as such where they have no ability to decrypt the chat messages (since their whole revenue model is like Gmail's,) so your friend would have to set up something, somewhere.  I took a crazy stance a few years back, and forced my friends to communicate with me through encrypted channels. All of my really good friends set up crypto with my guidance, and all of them still use it (and tell others about it) to this day. Obviously it is rash and YMMV, but cultural change isn't something solved in the technical realm."
crypto,2szq6i,tinloaf,1 point,Tue Jan 20 05:35:46 2015 UTC,"I think technology can change culture actually.. It is just about making it usable and inviting for regular people, as opposed to just throwing source code out there with no polish.  The touch screen revolution is a perfect example.. touch screens have been around since the 80s."
crypto,2szq6i,Ar-Curunir,3,Wed Jan 21 00:09:08 2015 UTC,"I agree, but to some extent people need to see the need for the crypto in the first place unless it's just a default option. That's why Moxie's stuff with WhatsApp, for example, I think is a great step in that direction. Actually, just about everything Open Whisper Systems is doing is a great step in that direction."
crypto,2szq6i,tinloaf,1 point,Wed Jan 21 03:58:38 2015 UTC,Thanks to sealsdeals.info for introducing me to xmpp otr. We use it as private message service on the bitcoin poker site sealswithclubs. Wish my friends used it too.
crypto,2szq6i,Ar-Curunir,5,Wed Jan 21 00:16:48 2015 UTC,Streaming Authenticated Ciphers
crypto,2szq6i,tinloaf,3,Tue Jan 20 10:19:38 2015 UTC,"I'd love to see some movement in the field of private set intersection.  There are quite some applications where one would need something for this (think contact discovery for messengers..), but no practical algorithms are available. :("
crypto,2szq6i,Ar-Curunir,2,Tue Jan 20 18:18:37 2015 UTC,Also comparing membership anonymously
crypto,2szq6i,conradsymes,1 point,Tue Jan 20 18:52:00 2015 UTC,"There's been a huge advance in the speed of MPC over the past few years, and is often practical now, I think"
crypto,2szq6i,Qtilla,1 point,Tue Jan 20 19:14:38 2015 UTC,"I'm no expert, but it looks as if basically all MPC protocols designed für set intersection / membership tests (which is really what you want in case of contact discovery) rely on completely exchanging the sets to be compared (or at least data of roughly the same size). :("
crypto,2szq6i,lihararora,2,Tue Jan 20 19:23:49 2015 UTC,"Yes, that's true. But really, when you have two untrusted parties communicating, what else can you do? Even in a situation when both parties completely trust each other, they still have to exchange the sets to find an intersection, right?"
crypto,2szq6i,GahMatar,1 point,Tue Jan 20 19:28:52 2015 UTC,"At least data the size of the difference between the set, see IBLT as to be used in Bitcoin"
crypto,2szq6i,disclosure5,1 point,Tue Jan 20 20:42:07 2015 UTC,"Yes, but only one side has to do so. Uploading a phone book is acceptable (in terms of data usage), while doing so plus downloading the whole directory of, say, WhatsApp users is not. ;)"
crypto,2szq6i,dareksam,1 point,Tue Jan 20 22:15:18 2015 UTC,"You can achieve the same with MPC, where only one party has to send over its inputs."
crypto,2szq6i,FrigoCoder,3,Tue Jan 20 22:29:06 2015 UTC,"An improved XXTEA. The way it chains the entire block could be used for an authenticated encryption scheme, where the first 128-bits are reserved for the authentication key, and would be compared to determine if it's valid (same data requirement with less computational overhead). Since changing any bit of the ciphertext would scramble the plaintext, it would be impossible to send arbitrary ciphertexts.  Additionally, differential cryptanalysis depends on control over the entire message block. When the message block contains 128 unknown bits outside the attacker's control, it should be impossible to conduct a differential attack."
crypto,2swv91,diafygi,2,Mon Jan 19 06:48:41 2015 UTC,"Nice work. I don't need it right now so I haven't tested it yet but I have something in the works, a personal project, where I'm likely to use HTTPS but where the untrusted connection warning doesn't matter so I likely will be using this. The README is good and briefly skimming through the source the whole thing seems quite comprehensible. Thank you for sharing."
crypto,2swv91,RIST_NULL,2,Tue Jan 20 13:52:58 2015 UTC,Have you talked with the EFF folks to see if they'd accept your changes as an option?
crypto,2swv91,phyzome,4,Mon Jan 19 13:56:49 2015 UTC,Just posted it to their mailing list :)
crypto,2susnl,P-e-t-a-r,19,Sun Jan 18 19:21:54 2015 UTC,"OK, sure, I'll grant OP what's written, but what about the elephant in the room? Encryption is math. Math requires nothing but thought. Short of reading my mind how will the government differentiate between gibberish and ciphertext? Is the following an encrypted message or me just making a point?  owF1km1QFVUYx7kINwQF/QCaCcJGxQTe2d2zu3cXQ5QGKtOaypGXKe6cc/ZcWC/c C3vv5fI6ySdDazBmrCkGDBpQKbAwzLQLFUkomoJIpIEMWIajyAwCxSi0y9CkH/py 5rz8nuc8///zHFi5zMfXYNvsCs4wnJgx9Iwjnzcm+9NLKOSQi6j4EgrnKMTu0nd2 mEuoeMpGihB0EpPiiLQ7ZGLa7YxcYuKoAqI6FYddo2gTZ2IEqixO5/Voq2LPImqe qujJKDPiiSRjHtEAAQ4gM4uAwHGsgAAxczThIc0gwSpoObMdTtcj31KLOS2KrN0K SSBZ45P5rTSTJKTovHvxQYQ0ljALWICRjBiOwxAChCUr5CWepmkddBJ1SRNWHR6G MdN6vblEteUQi+pwLKrGLkVHGI4WWYkRJVqrCDqztSCWwYC2YiyYaSsQeCRIEoug DGRGwhwtiBBrCqEgIZmHVgIJDQSaYxFnFSDDIQFAiQAO8wAKjJklWBAxJAwNMINo MwKylXCMttJWxCHICiwQgAwYwIiiTEMW8rImwUny7Q4qnqMZmi3Tj2qBgslDzVKJ LCuu/xfrKsrTrzwEWZaCGy1Isctasx5uJ6OhjxohsVIcRQrzFJVYFJ3gzYKo+arZ k6eSAt0eTGQGEp63ElZCLJahyAEREggYKy+wHEEi4CBDZIwwI7JIFCGvuQmwiLQ5 kMh/8nitTpilpXQqWXbocquEKqvwXe/nY/D1Mfr76vPqE7h81b9DzD4esiDPvzdU anDm+sH+667Q+tefQ3+XnRy+vry6zNRWOOWtm76/ImNTdlV0wysJvcrpYj//FN9y 7zbb+ejh2qhtlQ3cOyUbP0oN8Pvlbk1nhW0h7d6+YwMJ1yTVPzzg8sGd692RrZ5n yqd+nzCM7YjxeLH3069jV7929qcjzZ6mZuXVc1FhCYP1E/mBygub7wVVH41qG8vJ TEBhG4PDtz7Y4DJcK3b3/XGV89Y1Ffi/HNXnav4q+lZ5lrpnknIHfXclcU1gWs+I VDTdWR/xkv9cifPF0z80Lqxxl13AYKK2t992J+AoMIbW/Nka0HjzWMbPz9+tTfbG jIR+k7EFDmbmD7f3+Z9xGrfsK/3w0t6a3kNru/m2L5Uv6rxVd0yxLTkVHTlvH7qR caq9sqYraf7BY0cq0i+FdG6n1NZZiovc9LntuHnXhrnqU8pFv0bjTAjzQQJZ2E+l d+Zz706aamfHOlw7bDcOT65IbK80/poZFDg6M9u+qvz9iLeM5VMxy5rvB/wmrI4f pdcZgt3hhbHjB/dMevOfaA36/sKZjhbJm37r5HDhRXfd7XNDfbmjz9Z8MjI9K9qO 7/q28GxDad1nPRNjnsgZauiyITi0PrKmau5JozS+PevmzpVrmxLWvVn89F/dg2k/ Xh027Q887+1K+fhKeOrC7r0RqWEplpauAef87ROJA0+Jjqnuw/8A =PJBn"
crypto,2susnl,crow1170,27,Sun Jan 18 20:56:01 2015 UTC,"People tend to forget the law doesn't regulate technology, it regulates people. As the tech-savvy, we like to point out the silliness of some legal endeavors, showing how, from a technical perspective, they're impossible to define and make very little sense. (I use ""technology"" in a very broad sense.)  But that doesn't really matter. Law is by people, about people. Human concepts are far more important than technical details to the lawyers. Regardless of how technically absurd a law would be, the human factor will outweigh the technical factor. The human goals the law works toward would likely outweigh the technical problems it would create.  Banning encryption would be about the human factor, not the technical. What constitutes ""encryption"" would probably involve human judgment based on context. It would probably be a horribly authoritarian and inconsistent with fuzzy (if not non-existent) lines in technology. It would be purely a human-construct oriented effort. It wouldn't be about the technology, it would be whatever wording is necessary to allow the government to do what it wants. Don't take any comfort in the fact that their legal desires have absurd technology implications; it won't stop them."
crypto,2susnl,B-Con,8,Sun Jan 18 23:17:33 2015 UTC,"Laws that can, but don't, reflect technical principles tend to be a ticking timebomb.  The lack of respect for that observation is why we still have so many dumb laws in the US and UK. Meanwhile, emerging nations increasingly choose people with technical backgrounds to operate their legislative bodies."
crypto,2susnl,latigidigital,2,Mon Jan 19 07:56:59 2015 UTC,"I tend to agree. You can only kick the can so far down the road.  (My original post actually had a paragraph about the pros/cons of having law align with/ignore technical principles, but I removed it to avoid detracting from the main point.)"
crypto,2susnl,B-Con,13,Mon Jan 19 13:50:54 2015 UTC,"Are you UK based?  Because it seems reasonable that that is an encrypted message and it seems reasonable that you'd have the key, so hand it over or you will be charged with violating the RIP act.  Back on point, I'm expecting a US export style ban on strong, end to end encryption.  WPA on your AP will still be fine.  SSL might get weakened.  Google Chrome UK edition anyone?"
crypto,2susnl,tea-drinker,4,Sun Jan 18 21:26:53 2015 UTC,Export ban won't do shit if it's developed in Asia will it ?
crypto,2susnl,samsonx,2,Sun Jan 18 23:57:37 2015 UTC,"In this case it'd be an import ban.  The rest of the world will indeed continue to look at us quizzically as be burn down the house to protect it from thieves.  Of course, we could probably swing a local ban on whatsapp, but then anyone bringing a phone into the country will have to be searched/arrested.  I mean what's the point in banning the technology if the terrorist just have to buy a burner phone in France."
crypto,2susnl,tea-drinker,8,Mon Jan 19 00:04:16 2015 UTC,You could always pull a Zimmermann and publish the source code in a book.
crypto,2susnl,funk_monk,4,Mon Jan 19 01:45:21 2015 UTC,Zimmerman worked because the book was constitutionally protected speech. The UK doesn't have that and people (maybe just person) have been arrested for possession of the anarchist's cookbook so the source code of hard encryption designed to thwart anti-terrorism laws could well get your collar felt.
crypto,2susnl,tea-drinker,1 point,Mon Jan 19 08:39:25 2015 UTC,"The worry is that they'll either convince WhatsApp (etc) to put a backdoor in or block the servers (like Iran has) if they don't comply.  They can't affect anyone competent with laws like this, but they can make strong encryption harder to use for the majority."
crypto,2susnl,TNorthover,2,Mon Jan 19 19:06:38 2015 UTC,"If you're encrypting using someone else's public key then you probably also have the plaintext, or at least did have."
crypto,2susnl,funk_monk,0,Mon Jan 19 00:18:11 2015 UTC,"I might be misunderstanding you, but it sounds like you're getting public and private keys confused."
crypto,2susnl,funk_monk,3,Mon Jan 19 01:39:55 2015 UTC,"Ah, okay, I misunderstood.  I suspect that if they do decide to follow through with this they'll try to ban session keys in the true sense. If every user has a copy of each key they've used in the past then this wouldn't be an issue. Storage space might be a issue but it would be stupid to expect politicians to understand those limitations, right*?  *In case it didn't really transfer over the internet, that was sarcasm."
crypto,2susnl,funk_monk,1 point,Mon Jan 19 01:46:57 2015 UTC,"""sorry, my backup of the session keys got hit by bitlocker"""
crypto,2susnl,Natanael_L,9,Mon Jan 19 02:19:23 2015 UTC,Check out illegal numbers  Maybe in the future all numbers with sufficient (pseudo)entropy will be banned.
crypto,2susnl,DoWhile,4,Mon Jan 19 02:28:27 2015 UTC,"I love this, it would be funny if it weren't a sad testimony to state overreach and a flawed legal system."
crypto,2susnl,sqrt7744,1 point,Mon Jan 19 02:39:12 2015 UTC,Illegal ranges?
crypto,2susnl,Natanael_L,1 point,Mon Jan 19 21:13:44 2015 UTC,"Well, not really on the topic here, but detecting cryptographic messages is a quite interesting in itself. So, since a ciphertext should be indistinguishable from a random string I propose calculating the Kolmogorov complexity! If the Kolmogorov complexity is equal (or greater) to the length of the string you have something that is uncompressable and it could either be really something encrypted (provided that the length of shortest program for encryption + length of cleartext > length of ciphertext) or just a real random string. Unfortunately it is uncomputable ...   So you could try the statistical tests proposed by NIST for RNGs.  But the very definition of a ciphertext (indistinguishability from a random sequence) defies the effort, thus you are quite right with:   Short of reading my mind [...]   Except of course there is some weakness and you can launch a distinguisher attack. But that presupposes the knowledge of the method involved, or at least a qualified guess.  To be honest I'm not at the forefront with my knowledge in that area, but I found the topic of the decidability if something is encrypted always quite interesting."
crypto,2susnl,setnorth,1 point,Sun Jan 18 21:48:31 2015 UTC,Looks fake to me.
crypto,2susnl,SarahC,8,Sun Jan 18 22:08:34 2015 UTC,"Sure, let's ban encryption. A lot of problems can be solved if the same laws applied to government as they should. We'll see how long the encryption ban stays in place if the NSA can't use it."
crypto,2susnl,aliceandbob,7,Sun Jan 18 23:37:27 2015 UTC,"Of course any new laws would not apply to any government related agency, just like the rest of them. One law for the hoi polloi and anything goes for the rule makers and their servants."
crypto,2susnl,samsonx,5,Mon Jan 19 08:10:42 2015 UTC,"To be completely accurate, Cameron actually said he wanted to create a world where terrorists cannot communicate in secret. This has been extrapolated to ""banning encryption"" by others. No doubt it was one of the options considered, but I suspect by now his staff have told him how pointless that avenue is.  I much more likely scenario IMO is that the availability of strong end-to-end encryption will become licensed. Banks and businesses would get access to tools to support secure commerce, but for everyone else  it would be much harder, and may even become evidence against you in court. This moves the problem (because it will never actually go away) to being a social and administrative one, which the intelligence services are much more geared up for, rather than a mathematical one. I can see a UK where Enigmail, etc are banned.  BTW, for clarity, I don't support this stance at all, just stating where I think the UK is going."
crypto,2susnl,kitd,1 point,Mon Jan 19 10:20:07 2015 UTC,"Would it be possible to license such software to only individuals, making all use by business or government a violation of said license? It won't stop anyone, it'll just be fun nonsense for the court to dismiss."
crypto,2susnl,merkle_jerkle,2,Sun Jan 18 21:13:02 2015 UTC,"I like it! We the people get to talk in complete secret, but Big Gov/Corp have to have all their conversations out in the open!"
crypto,2susnl,kitd,1 point,Mon Jan 19 00:00:47 2015 UTC,I wonder if such a software license is already on the books...
crypto,2susnl,merkle_jerkle,6,Mon Jan 19 10:15:31 2015 UTC,"The crypto genie is out of the bottle. It's not getting put back in. We depend on a bunch of strong crypto already, good luck getting TLS and dozens of other protocols replaced."
crypto,2susnl,rya_nc,3,Mon Jan 19 22:37:21 2015 UTC,"Not possible and simply delusional. Seems like a political ploy to scare the populace into accepting a lesser compromise, such as more surveillance, the original desired outcome."
crypto,2susnl,digititus,2,Tue Jan 20 08:05:29 2015 UTC,Perhaps the Conservatives do not want to win the election.. I wondered the same last time Labour were fudging around. They're all scared about the reality of the economy they've created from neglecting fundamentals for so long - no one wants the poison challis.
crypto,2susnl,davidpbrown,4,Tue Jan 20 08:17:40 2015 UTC,Poisoned chalice.
crypto,2susnl,ombres,1 point,Sun Jan 18 22:02:29 2015 UTC,See how long that lasts when so much commerce is done online and is protected by encryption...
crypto,2susnl,FermiAnyon,-1,Mon Jan 19 08:17:20 2015 UTC,"Nobody has proposed ""banning encryption""--I don't know where he got that idea.  In Cameron's address, he makes it clear that the UK government has always had the ability to search personal possessions and communications with the appropriate court order, and naturally, he wishes to retain that capability in the digital realm.  There's nothing ""draconian"" about maintaining the status quo.  The statement that allowing ""secret backdoors... fundamentally cripples security"" is completely unfounded.  See here.  He seems more concerned with misinforming and scaring people than the truth, which is, ironically, exactly what he's accused the British government of doing."
crypto,2susnl,bren2010,6,Sun Jan 18 21:25:02 2015 UTC,"It's not completely unfounded, since government backdoors can and have been attacked before."
crypto,2susnl,Uncaffeinated,6,Mon Jan 19 06:58:22 2015 UTC,"Your points about secure back doors are valid, although I still wouldn't touch them with a bargepole.  Although the secret key can be made so that it's the same strength as the regular key it still presents a single point of weakness which is present in all communications. If you can find that key (whether through mathematical approaches, brute force attacks or espionage), the whole system is retroactively compromised. That's not a system which I'd trust. Liken it to hashing passwords without salt.  The Nazis were lax on best practices with encryption and it likely lost them the war - not that I sympathise, but it's a good example of how easily encryption can screw up."
crypto,2susnl,funk_monk,0,Mon Jan 19 11:56:24 2015 UTC,"My thoughts? Basically: ""Hahahahaha! You guys are a barrel full of monkeys!"""
crypto,2susnl,XxionxX,-4,Mon Jan 19 00:39:59 2015 UTC,THOUGHTS ON ALL CAPS TITLES  and shitty site design
crypto,2susnl,Saicotic,1 point,Mon Jan 19 01:00:39 2015 UTC,Irrelevant really. If I worried about capitalisation of text then I must truly have no other concerns in my life. I would need to be a simpleton.
crypto,2susnl,samsonx,-7,Mon Jan 19 02:00:12 2015 UTC,Better a dumbass than an asshole
crypto,2susnl,Saicotic,2,Sun Jan 18 22:49:47 2015 UTC,Must be awful being both
crypto,2susnl,crow1170,-2,Sun Jan 18 23:39:41 2015 UTC,I'm not the one being extremely rude for no reason
crypto,2susnl,Saicotic,0,Mon Jan 19 00:02:03 2015 UTC,And what was the reason for this?
crypto,2susnl,crow1170,1 point,Mon Jan 19 00:31:00 2015 UTC,This annoying practice and this eye-bleeding mess.
crypto,2svbl8,twbmsp,1 point,Sun Jan 18 22:03:18 2015 UTC,"(disclaimer : I just discovered this subreddit and I am no expert at all, just interested) Diffie–Hellman, RSA, their elliptic curve's variants and essentially any assymetric cryptosystem can be used to securely share a secret key. edit : you will need to authenticate the parties to avoid man-in-the middle attack, this can be done thanks to a PKI or a web of trust."
crypto,2srv43,RIST_NULL,16,Sat Jan 17 22:20:57 2015 UTC,How are businesses supposed to operate if they can't encrypt their data / communications.  This is just beyond facepalmingly stupid.
crypto,2srv43,autotom,19,Sun Jan 18 04:23:20 2015 UTC,"Nobody is saying US businesses can't encrypt their data.  In fact, we advocate that they ROT13 everything twice, for extra security."
crypto,2srv43,autotom,3,Sun Jan 18 10:09:37 2015 UTC,Soo.. all they have to do is setup a fake business and communicate under that pretence?
crypto,2srv43,autotom,5,Sun Jan 18 10:19:38 2015 UTC,"No, because that's something that terrorists would do.  And you don't want the terrorists to win, do you.  Do you."
crypto,2srv43,merkle_jerkle,10,Sun Jan 18 10:21:57 2015 UTC,I want crypto to win
crypto,2srv43,sixstringartist,4,Sun Jan 18 10:25:27 2015 UTC,They sound like a pretty dangerous group.
crypto,2srv43,LovelyDay,13,Sun Jan 18 10:27:50 2015 UTC,The source video contradicts the headline. Obama was vague about specifics and stopped short of endorsing Cameron's stance.
crypto,2srv43,autotom,11,Sat Jan 17 23:27:19 2015 UTC,"While its not in that article, Obama's stance is more clear, if not contradictory, than you let on.   “If we find evidence of a terrorist plot…and despite having a phone number, despite having a social media address or email address, we can’t penetrate that, that’s a problem.”  In his speech he champions the need for privacy and encryption but makes the tired old argument that the US should be able to decrypt it."
crypto,2srv43,LovelyDay,5,Sun Jan 18 03:45:09 2015 UTC,It's not like they could (theoretically) take the evidence to court and let the justice system do its job.
crypto,2srv43,Natanael_L,1 point,Sun Jan 18 08:58:47 2015 UTC,"I do agree, however in the case of terror plots, that might not be a sufficeintly timely solution."
crypto,2srv43,pinkottah,8,Sun Jan 18 09:00:06 2015 UTC,"If you have evidence, you can try to take people into custody. I think that's what they did in Belgium, and according to the Belgians, it stopped a major incident.  I think this is about lowering the standards for evidence. If you use encryption they cannot break, then according to this new viewpoint, that should be 'evidence' enough.   Bear in mind in the UK it's already a criminal offence not to hand over ""encryption keys"" - the only thing that matters is that the authorities suspect that something is encrypted, and that you might be the one who has a key. It doesn't matter that it could be random noise you recorded.  I suggest a new name: War on Randomness."
crypto,2srv43,Natanael_L,17,Sun Jan 18 09:18:36 2015 UTC,War on entropy sounds catchier
crypto,2srv43,FireCrack,3,Sun Jan 18 10:29:33 2015 UTC,"Oooooh, terror, thats justification for everything because scary! Serioursly, terrorism needs to no longer be invoked as an excuse to errode our rights and our liberties. Its not the biggest danger the western world faces, and its not even what the fbi, or nsa spend a majority of their resources investigating."
crypto,2ss1v5,rya_nc,6,Sat Jan 17 23:20:35 2015 UTC,An explanation of how it works would be highly appreciated.
crypto,2ss1v5,bren2010,24,Sat Jan 17 23:42:43 2015 UTC,"It uses Curve25519 to encrypt (create really, ECDH and all that) the seed used for the PRNG and then it does some cleverness to embed the encrypted curve in the n parameter (public modulus) of the RSA key, recomputing other parameters to make sure the key remains valid.  If you know this and have the Curve25519 private key, you can extract the encrypted blob, decrypt it, recover the seed and then generate the private part from there.  Specifically, it uses Curve25519 because it's cool and it uses ECC in general because it's so much smaller then RSA modulus that you can hide it in the larger RSA modulus.  Don't ask me too much details about how it works precisely, I'm not going to spend that much time reading the code and working it out."
crypto,2ss1v5,GahMatar,22,Sun Jan 18 01:43:34 2015 UTC,"Great explanation.  The ""cleverness"" is just replacing bytes in the upper half of n and dividing by p to get q'. The resulting q' is very unlikely to be prime or even an integer, so we the search for the next highest prime q'' and rebuild the key parameters from e, p and q''. The lower half of the bits of the resulting n will be scrambled, but the upper half will not change.  Another reason I used curve25519 is that I like the irony of using one of djb's algorithms to implement the sort of backdoor I would expect to see come out of the NSA. Imagine this algorithm implemented in an HSM or smartcard."
crypto,2ss1v5,Natanael_L,3,Sun Jan 18 02:20:47 2015 UTC,Can you integrate Dual EC DBRG for a two-level backdoor?
crypto,2ss1v5,Natanael_L,3,Sun Jan 18 10:25:30 2015 UTC,"A possible method, using Dual EC DBRG:   Generate a random n Implant curve25519 ephemeral public key in n to get n' Generate a random p Compute q = next_prime(n' / p) Compute n'' = p * q"
crypto,2ss1v5,Natanael_L,2,Sun Jan 18 18:03:30 2015 UTC,"For even greater levels of Inception, does ECDSA threshold crypto work with that? Like the secp256k1 group signature library intended for Bitcoin, could that be repurposed here?"
crypto,2ss1v5,Natanael_L,2,Sun Jan 18 18:20:44 2015 UTC,"Not familiar with that, link?"
crypto,2ss1v5,oakpacific,3,Sun Jan 18 18:26:50 2015 UTC,"www.cs.princeton.edu/~stevenag/bitcoin_threshold_signatures.pdf  Hypothetical usage:  RSA keys is generated for all employees in a multinational corporation by this algorithm. They have a number of employees in every national HQ capable of recreating that key together (threshold scheme). Every national HQ have different keys, and can only recreate keys for their own national employees.   The global HQ has a master key that can recover ALL keys for all employees, also by a group (threshold scheme again)."
crypto,2ss1v5,Natanael_L,4,Sun Jan 18 18:42:34 2015 UTC,"That sounds pretty cool, I'll read the paper when I have time.  Something related I made:  https://github.com/ryancdotorg/threshcrypt  https://www.youtube.com/watch?v=iUltif5_1Og < using it for full disk encryption"
crypto,2ss1v5,aris_ada,2,Sun Jan 18 20:50:02 2015 UTC,"One of the neat things with that two-level masterkeyed RNG is that each HR office can enroll new employees even while offline without the need for communicating with the HQ for them to be able to decrypt stuff. Maybe it would be used directly in custom smartcard programming hardware for companies that rely on using RSA smartcards for access.   The national HQ can perform internal investigations and and audits with just access to ciphertext. The different national HQ's are isolated from each other (following data privacy laws, etc). And the national branches can't hide anything from the global HQ (which would employ the legal expertise needed to follow all relevant laws when accessing the data)."
crypto,2ss1v5,Godspiral,1 point,Sun Jan 18 21:24:09 2015 UTC,You could use identity-based cryptography for that.
crypto,2ss1v5,GahMatar,1 point,Fri Jan 23 11:18:42 2015 UTC,How are keys generated with that? Can they be securely generated offline by a local key issuer like with this?
crypto,2ss1v5,Godspiral,3,Fri Jan 23 11:23:42 2015 UTC,That's very clever. But your generation is tied to the way the PRNG output is used to generate the RSA key. Could you imagine using parameters such as the decrypt of n[:len(n)/2] gives you p?
crypto,2ss1v5,Godspiral,0,Sun Jan 18 20:29:20 2015 UTC,"You can make backdoored rsa keys by embedding bits into p (I didn't know about n), including middle bits.  That's what he's doing here, 256 bits starting at bit 80 in n, and then changes q to match. q is changed to the next highest prime, so is unlikely to modify the middle bits.  Im not sure how the random function is ""corrupted"" but it is not normal either.  It looks to me as though the trick is setting seed to a choice, so it would appear to have little to nothing to do with curve25519, and everything to do with seed, which probably affects the random function, though I don't know python well enough."
crypto,2ss1v5,Godspiral,3,Sun Jan 18 02:46:13 2015 UTC,"The random function is OK. It's just seeded by a known constant (the ECDH secret) so its output is predictable. It's just AES in CTR mode as CSPRNG. It's basically the same idea as ""brain wallet"" type keys."
crypto,2ss1v5,bren2010,0,Sun Jan 18 03:40:40 2015 UTC,"ok.  What he is doing is embedding the prng seed into bits 80+256 of n.  There is really nothing special or relevant about ECC here, other than perhaps its a hash function that would be less likely to be detected than sha256.  Still, everyone who runs this code will generate the same RSA key, so there are stronger backdoors than this."
crypto,2ss1v5,GahMatar,4,Sun Jan 18 04:39:06 2015 UTC,"No, the seed itself is not embedded, and a different random RSA key will be generated each time.      # deserialize master ECDH public key embedded in program     master_pub = curve25519.Public(unhexlify(MASTER_PUB_HEX))     # generate a random (yes, actually random) ECDH private key     ephem = curve25519.Private()     # derive the corresponding public key for later embedding      ephem_pub = ephem.get_public()     # combine the ECDH keys to generate the seed     seed = ephem.get_shared_key(master_pub)   This is secure against all except whoever has the master private key, who can combine it with the embedded ephemeral public key to recreate the seed (via the recover_seed function).  It's a bit like ElGamel encryption.  Here's a self signed certificate created from a key generated with this program:  -----BEGIN CERTIFICATE----- MIIC8TCCAdmgAwIBAgIJAOmB4l/iE23dMA0GCSqGSIb3DQEBBQUAMA8xDTALBgNV BAMMBHRlc3QwHhcNMTUwMTE3MjMwODIwWhcNMTUwMjE2MjMwODIwWjAPMQ0wCwYD VQQDDAR0ZXN0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAodFKmeIE ospfVb0mhs0rgirtMYL8Ps7toN9iUJmwPsShx8gC+NGpx4+PQI9uGdk6RT2dwx4P KGOB6XKIxqWIy5Y0Vxxkh+WuWrB7kuJiVM/jAnRvgv52QJ3Qd+pCQiS9vItspeyt eWmLhn4Dsrz2PIUITN03f0tlq9rbYwy8PmJq8J6b/ZwMxl6qDhlKsp81xtmPGHch eJMLUL/qiZcBrJlXoD33vjbknELymTCjLALDPFMOYcdkRY6wwflhgt9lMpw+/x7o AwPtPeeHp3UkmtAdTsOUV4emeK4DcGQbWcu4817dlKjMhBHe3EmkNkLHFYjz/2fH AWhFmYGtx3ZNDQIDAQABo1AwTjAdBgNVHQ4EFgQU+UFEV+gBWwQ0odkuNvKEDhHQ fmIwHwYDVR0jBBgwFoAU+UFEV+gBWwQ0odkuNvKEDhHQfmIwDAYDVR0TBAUwAwEB /zANBgkqhkiG9w0BAQUFAAOCAQEAEkP1qX7wf33Slk6dWfilsTHYDfImElMrpTkf RTXA+BsBKu0Rhx4a2ndO3KRMaWTsKENNcavGokhb0taGCLntEaetPnIG8mZ9VM3Z VX4nBu8yhQSW5pvMnfJSxU6C5jKx72VRUItpPsYfxyW264nvcu4VcJLSdR1N3bQ9 QfubXQt44cCuaXkaWVAH8QI6Vt+toVFQoHDuHGoFPI8Epy9dQtjciox/G0T6UaQa vWASRaKnffbIQs8T+PLDlJMcOrj6rtW49Tprkh+KZC5BH/mcDmdcbQ4cbur3e1Vs dbY5JWvFk406U7ekWqVEhisJH2g6KYwHojcUarRZ4uPrYpmEjA== -----END CERTIFICATE-----   Shouldn't be possible to get the private key out of that unless you can figure out the passphrase."
crypto,2ss1v5,Qtilla,-1,Sun Jan 18 04:57:11 2015 UTC,"cool, but is there a benefit of ""double hiding"" the rng seed?  I guess its related to that ""master private key"" that I don't totally follow.  To use the back door you need to know more than just that the seed starts at position 80.  Are you trying to make a point that ECC is better than RSA from this?  The cheating can be done in many other ways."
crypto,2ss1v5,Qtilla,3,Sun Jan 18 05:29:39 2015 UTC,You need either the ephemeral public key and the master private key or the ephemeral private key and the master public key to recover the seed. The ephemeral private key is not saved once the seed is created.  This backdoor is essentially embedding the seed encrypted with an ECC public key into the RSA key it generates. You need the ECC private key to recover the seed.
crypto,2ss7pa,Natanael_L,2,Sun Jan 18 00:14:26 2015 UTC,"An improved XXTEA. The way it chains the entire block could be used for an authenticated encryption scheme, where the first 128-bits are reserved for the authentication key, and would be compared to determine if it's valid (same data requirement with less computational overhead). Since changing any bit of the ciphertext would scramble the plaintext, it would be impossible to send arbitrary ciphertexts.  Additionally, differential cryptanalysis depends on control over the entire message block. When the message block contains 128 unknown bits outside the attacker's control, it should be impossible to conduct a differential attack."
crypto,2ss7pa,conradsymes,1 point,Mon Jan 19 21:02:16 2015 UTC,New thread: http://www.reddit.com/r/crypto/comments/2szq6i/cryptography_wishlist_thread_january_2015/
crypto,2ss7pa,ZaphodsOtherHead,1 point,Mon Jan 19 23:52:22 2015 UTC,"This is a good question. I'm not sure where a good place for that would be. There's always a lively discussion on #salt on i2p.  For my part, I'd like to see support for pgp encrypted subject fields in popular pgp implementations."
crypto,2ss7pa,zeroXten,1 point,Sun Jan 18 07:51:12 2015 UTC,Maybe we need an /r/cryptowishlist
crypto,2ss7pa,cunttard,2,Sun Jan 18 08:56:59 2015 UTC,I was thinking the same. Or maybe a monthly thread in here?
crypto,2ss7pa,cunttard,2,Sun Jan 18 09:27:42 2015 UTC,+1 for monthly thread.
crypto,2sptqq,cunttard,25,Sat Jan 17 07:42:38 2015 UTC,"I agree with some of the specific points this guy makes, but he draws the wrong conclusions. The objective of widespread use of cryptography is not to provide 100% full-proof defenses against all surveillance, the point is to sufficiently raise the cost such that mass surveillance is no longer feasible.  And we have evidence that the NSA is unable to break some well written open source software. They could bypass it and get some malware or a physical bug on a target's computer, but they can't do that to everybody.  Some of his examples is also pretty disingenuous. He talks about how DRM on all the major game systems and the Kindle and various phones have been hacked, but that was always a fundamentally flawed application of cryptography. It attempts to protect content from and deliver it to the same person, it cannot work. That's not how encryption that protects your data and your communications is applied."
crypto,2sptqq,Sostratus,3,Sat Jan 17 17:33:56 2015 UTC,"well technically it is possible now, with the advent of fully homomorphic encryption and functional encryption.  Content providers can just encrypt their data and have the client 'compute' on it to view said  content, without ever having it in cleartext (beyond content playing ofc).  Obviously these technologies are not very efficient atm, but progress is being made at every step.  I also just realised that I have a penchant for evil ideas."
crypto,2sptqq,Ar-Curunir,10,Sat Jan 17 18:19:59 2015 UTC,"Though that still only protects software, not video or audio."
crypto,2sptqq,Uncaffeinated,1 point,Sat Jan 17 19:16:23 2015 UTC,Well fundamentally you can't protect the audio or video once it's being played since you can just record them. But at least while streaming either one you can send over encrypted files and the computation can be to play them.
crypto,2sptqq,Ar-Curunir,1 point,Sun Jan 18 05:29:07 2015 UTC,"Sure the users can be made not have the clear text, but they'll be always free to copy the program, which is what really matters. Unless you do it the simpler way and compute everything on a private server (cloud). So I'd rephrase as ""There is no offline DRM""."
crypto,2sptqq,darkmighty,2,Thu Jan 22 03:18:55 2015 UTC,Exactly. Tar pitting SIGINT and making it too expensive to process the extra encrypted data is by far the best defence against blanket surveillance.
crypto,2sptqq,digititus,2,Sat Jan 17 19:06:13 2015 UTC,Legendary New Zealander Peter Gutmann. Inventor of the Guttman Method for securely erasing data on a hard drive.
crypto,2sptqq,Chodrick,1 point,Sun Jan 18 00:58:47 2015 UTC,"Gutmann method:       The Gutmann method is an algorithm for securely erasing the contents of computer hard drives, such as files. Devised by Peter Gutmann and Colin Plumb and presented in the paper Secure Deletion of Data from Magnetic and Solid-State Memory in July 1996, it involved writing a series of 35 patterns over the region to be erased.  The selection of patterns assumes that the user does not know the encoding mechanism used by the drive, so it includes patterns designed specifically for three types of drives. A user who knows which type of encoding the drive uses can choose only those patterns intended for their drive. A drive with a different encoding mechanism would need different patterns.  Most of the patterns in the Gutmann method were designed for older MFM/RLL encoded disks. Gutmann has noted that more modern drives no longer use these older encoding techniques, making much of the method irrelevant. He describes the method's common implementations ""more as a kind of voodoo incantation to banish evil spirits than the result of a technical analysis of drive encoding techniques.""  Since about 2001, ATA IDE and SATA hard drive manufacturer designs include support for the “Secure Erase” standard, obviating the need to apply the Gutmann method when erasing an entire drive.      Interesting: Gutmann–Beckett method | Darik's Boot and Nuke | Peter Gutmann (computer scientist)   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2sptqq,autowikibot,2,Sun Jan 18 00:59:06 2015 UTC,Well worth watching.
crypto,2sptqq,gary_rowe,1 point,Sat Jan 17 09:07:42 2015 UTC,Very cool.  Thanks for linking this!
crypto,2sptqq,FermiAnyon,1 point,Sat Jan 17 15:23:32 2015 UTC,Link to transcript?
crypto,2sptqq,Zarutian,1 point,Sat Jan 17 18:59:27 2015 UTC,There's no transcript. There are slides in pdf file  available.  If you'd like to help by transcribing it please let us know where to get a copy of the transcription so we can share it with others.  Thanks
crypto,2sptqq,linuxconfau,1 point,Mon Jan 26 14:32:26 2015 UTC,Link to the slides (pdf file).
crypto,2sq2vk,s011ux,3,Sat Jan 17 10:36:31 2015 UTC,Also...?  The curiosity is killing me.
crypto,2sq2vk,PdoesnotequalNP,2,Sat Jan 17 11:12:23 2015 UTC,"I'm more interested in what ""and other tasks"" involve."
crypto,2sq2vk,DoWhile,1 point,Sat Jan 17 16:16:20 2015 UTC,"""research"" ethical research"
crypto,2sq2vk,Godspiral,1 point,Sat Jan 17 19:59:38 2015 UTC,"Its not obvious that you need a GPU, as complex word list might just mean combining existing databases of words into a larger database?"
crypto,2sq2vk,Natanael_L,2,Sun Jan 18 02:50:13 2015 UTC,Bitcoin mining ASICs can't be effectively repurposed for other tasks.
crypto,2sq2vk,mpdehnel,1 point,Sat Jan 17 18:02:30 2015 UTC,The clue is in the name ASIC! :-)
crypto,2sq2vk,Natanael_L,1 point,Sat Jan 17 18:11:29 2015 UTC,"What do you mean effectivly? I mean the tasks they are doing, I believe, very similar, solving complex equations(bitcoin mining) and expresing complex equations?"
crypto,2sq2vk,Natanael_L,1 point,Sat Jan 17 20:35:50 2015 UTC,"No. They are hardwired to run SHA256 fast. On the scale from Swiss knife to custom lid openers, this is a custom lid opener. Works for exactly one task."
crypto,2sn2nt,ret2libc,20,Fri Jan 16 16:27:27 2015 UTC,"Sure you can encrypt with your private key (in case of RSA). And everyone owning your public key can decrypt it again. This mechanism is used for signing data.  On smartcards the operation decypt is often used for signing. But there is nothing special about the key.  If the size of your data is smaller than the key, use padding. If bigger, you have to break up your data. and so on. The mechanisms are described in PGP or RSA encryption."
crypto,2sn2nt,wdick,2,Fri Jan 16 16:44:59 2015 UTC,"If bigger, you have to break up your data.   You can just encrypt a key for a symmetric cipher then use the symmetric cipher to encrypt your data."
crypto,2sn2nt,rya_nc,14,Sat Jan 17 05:07:12 2015 UTC,"This is exactly how asymmetric cryptosystems work. You generate a keypair consisting of keys A and B. Whatever A encrypts, only B can decrypt; whatever B encrypts, only A can decrypt.  You pick one and label it ""private"", and protect it; and you label the other one public.  Encrypting a message with your private key means that anyone with your public key can decrypt it. Signature systems rely on this — they compute a digest of the message and encrypt that digest with your private key; if I have your public key, I can decrypt it.  Theoretically, encrypting a message with your private key is a signature, it's just not a very good idea to do signatures this way for various practical and attack-resistance reasons (e.g. you shouldn't encrypt long messages using asymmetric keys; PGP and similar systems generate a symmetric key, use that to encrypt the message, then encrypt that symmetric key using the recipients' public key(s))."
crypto,2sn2nt,0x6d1e,1 point,Fri Jan 16 16:50:03 2015 UTC,"This is the right answer, upvote.  Asymmetric algorithms (DH, et al) are slow at message encryption, so in actuality the message is encrypted with a symmetric-key algorithm (AES), and the decryption key is encrypted with the recipients public key and prepended to the message.  IOW the symmetric decryption key is encrypted using the asymmetric algo, and the message is encrypted with the symmetric key/algorithm."
crypto,2sn2nt,Os_agnostic,3,Fri Jan 16 20:49:03 2015 UTC,"It's not just speed. Because of RSA's design, it really isn't suitable to be used in a block-chaining mode like CBC. And using it in the ECB mode (which is the recommended, tested construction for RSA) on messages longer than a single block can lead to very simple attacks. (cf http://blogs.msdn.com/b/varun_sharma/archive/2007/11/27/block-ciphers-simple-attack-on-ecb-mode.aspx)  So even if you think the performance and data-size overhead of using RSA to encrypt long messages is ""worth it"", you shouldn't do it for security reasons."
crypto,2sn2nt,0x6d1e,1 point,Sat Jan 17 02:00:25 2015 UTC,"On the other hand, doing as the OP says (encrypting with a private key) is pretty worthless to do with symmetric crypto, because if someone else knows the public key, then can generate a completely separate message with the symmetrical key, and claim that you were the one that made it."
crypto,2sn2nt,FryGuy1013,1 point,Sat Jan 17 06:50:13 2015 UTC,"symetric algorithms do not afaik have private and public keys.  They just have keys that are shared among those ""allowed"" to decrypt."
crypto,2sn2nt,Godspiral,1 point,Sun Jan 18 03:07:05 2015 UTC,"No they don't. I was implying the method described by what I was replying to where a symmetric key is encrypted with asymmetric encryption, and then the message itself is encrypted with symmetric encryption using the key that was encrypted with asymmetric encryption."
crypto,2sn2nt,FryGuy1013,1 point,Sun Jan 18 06:29:44 2015 UTC,This is why you  A: Encrypt a symmetric key with the recipients public key  B: Encrypt the message with the message  C: Encrypt a digest of the (encrypted?) message with your private key  This ensures: Only recipient can read it. Only you could have sent it.  (that is if I understood asymmetric crypto correctly)
crypto,2sn2nt,Ferdi265,1 point,Fri Jan 23 21:38:58 2015 UTC,"That's obviously the right(ish) way to do things. However, does not address what this entire thread has been about."
crypto,2sn2nt,FryGuy1013,5,Fri Jan 23 22:51:18 2015 UTC,"if I were able to encrypt a document with my private key rather than my public key would anyone with my public key be able to decrypt it?   Yes.   Would it depend on the algorithms used to generate the key pair?   Yes. Some asymmetric schemes support encryption (e.g., RSA) while some others don't (e.g., ECC). While you could combine symmetric encryption with key exchange via ECDH that's not exactly what you asked. I am not aware of any asymmetric schemes that support encryption/decryption but don't allow you to swap the public and private keys for encryption/decryption purposes (that, of course, doesn't mean such a scheme doesn't exist).  Just want to make sure, you're not actually planning on doing this, right? I am assuming this is just a question for educational purposes only."
crypto,2sn2nt,marklarledu,2,Fri Jan 16 17:32:46 2015 UTC,I am assuming this is just a question for educational purposes only.   Oh dear God yes. I can see no reason this would be practical.
crypto,2sn2nt,I_Eat_Mop_Who,2,Fri Jan 16 17:48:10 2015 UTC,"Sometimes I use PGP to encrypt emails, but not that often. It's more just for fun."
crypto,2sn2nt,baudtack,1 point,Fri Jan 16 18:33:36 2015 UTC,Presumably in that case you're encrypting with the recipients public key or using your private key to sign the messages though.
crypto,2sn2nt,I_Eat_Mop_Who,1 point,Sat Jan 17 01:49:27 2015 UTC,Yeah I would be using the recipients public key. Me and a few friends have been messing around with it
crypto,2sn2nt,taidg,3,Sat Jan 17 08:44:47 2015 UTC,"Is this a theoretical question or a a practical one?  This could be done, but it would be much simpler in practice to give the recipients a keyfile for an AES encrypted container and then send them AES encrypted containers you've signed with your private key.  That way you can keep your public key private, and use the tools the way they're already designed to work."
crypto,2sn2nt,Vektorical,6,Fri Jan 16 17:38:54 2015 UTC,"It probably does depend on the cryptosystem, but take a look at RSA signing for example. It literally is encryption with your private key! You hash your message, then raise it to the power of your private key. Recipients can then ""decrypt"" the hash with your public key.   There's no reason you /can't/ encrypt data like this, but there might be plenty of why you shouldn't (again, specifics depend on the algorithm). Standard stuff to keep in mind about PKE applies as well (Its slllllooooooowwww).   Anyway, hope that was helpful :)"
crypto,2sn2nt,trimeta,2,Fri Jan 16 16:40:08 2015 UTC,"Technically possible? Absolutely yes. This is functionally the same as signing, or perhaps a simplified version of signing: in normal signing, you hash the document, encrypt that with your private key, and include it with the plaintext source. To verify the document, the recipient applies the same hash function, decrypts the signature blob with your public key, and compares the two.  If you wanted, you could encrypt the whole document, but I'm not sure when that would be useful. There may or may not be existing software packages to do this."
crypto,2sn2nt,pred,1 point,Fri Jan 16 21:17:23 2015 UTC,"You could also cook up recipes for public key/private key based schemes that allow for encryption/decryption but not for digital signatures; maybe you wouldn't call the result public key cryptography though.  In abstract terms, the encryption/decryption part of public key cryptography boils down to having a public key defining a function g acting on a set of encryptable messages M, and a private key defining a function f such that f ∘ g is the identity. This forces g to be injective and that the range of f contains the image of g. The range of f need not have anything to do with M though."
crypto,2sn2nt,R-EDDIT,1 point,Fri Jan 16 18:45:37 2015 UTC,"As everyone says, technically yes. You would do this to provide authenticity/non repudiation.  However, there are two reasons not to do so.  One is that it is slow, because public key/private key math is complicated/expensive.  The other reason it that it wouldn't provide confidentiality, because if you encrypted the same message twice an attacker would know that they are both the same.  A better way is to generate a random key and use it to encrypt your message (file, etc) with a fast stream cipher such as aes.  Then, you encrypt the key using the recipient(s) public key.  This is roughly how pgp and smime work.  If you want to encrypt the key using your private key, then anyone can decrypt it using your public key and be confident that it came from you."
crypto,2sn2nt,bitwiseshiftleft,1 point,Fri Jan 16 21:39:44 2015 UTC,"For RSA, the public and private keys are inverses of each other, so you could encrypt with the private key, and anyone with the public key could decrypt it.  This might not be as simple as swapping the key files, for two reasons:   The key files may have different formats. Usually public keys have a small e value, such as 3 or 17 or 65537.  Some implementations can't handle large e values.   This will be a secure as regular RSA against someone who doesn't have your public key if e is large and random and secret.  If e=65537, it might still be secure for one message, but don't bet on it.  If an attacker can see plaintext and ciphertext for multiple messages with e=65537, then he can probably break this using GCD, since he only needs to find N.  The same trick won't work for most other encryption algorithms.  For example, with ElGamal or elliptic curve systems, the public and private keys are different types of objects, eg a number vs an elliptic curve point.  So you can't decrypt using the public key.  You could still make a message which can only be decrypted by someone who has your public key, but you'd use something more boring, like hashing that public key and using the hash as an AES symmetric key.  You can do this for (EC)ElGamal because the public key is a function of the private key.  Several people in this thread are saying that signing is the same operation as decryption, or as ""encryption with the private key"".  This isn't true.  It's mostly true for RSA, but ""textbook"" RSA isn't secure and you need a padding scheme to fix that, and the padding is different for encryption vs signing.  It also isn't true for DSA or ECDSA, which are very different from encryption and decryption."
crypto,2sn2nt,Godspiral,1 point,Sat Jan 17 01:22:25 2015 UTC,"If an attacker can see plaintext and ciphertext for multiple messages with e=65537, then he can probably break this using GCD, since he only needs to find N.   Can you describe a bit how that can happen?  Perhaps you mispoke as N is already known public key component.  Perhaps you are confusing with ECC weaknesses?  You are certainly supposed to be able to make multiple signatures with RSA.  The signatures in fact include the plaintext and the cyphertext."
crypto,2sn2nt,bitwiseshiftleft,2,Sun Jan 18 03:17:27 2015 UTC,"OP says ""encrypt ... so that anyone with the public key can read a message"".  This implies that someone without the public key cannot read the message, because otherwise it isn't really encryption, is it?  At least not the kind which belongs in this forum.  The question is about encryption, not about signing, though the system might effectively sign the message as well.  For an RSA private key, d is secret, large, and hard to find, and N is published in the public key so it's not secret.  The same could be true for the public key (with exponent called e and not d), but usually it isn't.  Something like 99.5% of observed TLS public keys have e=65537 (eg see Schaham-Heninger), though I don't know if that's true for PGP.  If your public key has this property, then N is the only part of it which could be a secret.  Again, this is different from ordinary RSA, where N is public and d is secret.  Anyway, suppose e is known to an attacker who sees two plaintext, ciphertext pairs (m1,c1),(m2,c2).  Then c1e = m1 mod N, and the same for c2,m2.  That means that N divides gcd(c1e -m1, c2e -m2).  Possibly some other factors divide that too, but probably not very many, and they probably aren't very big, so you can factor them out.  So unless I'm missing some sort of relation which hoses this attack, two known (plaintext,ciphertext) pairs would recover N, which breaks this system.  Once more, this is different from ordinary RSA, because we're assuming that e (corresponding to d in ordinary RSA) is known but N is secret instead of vice-versa."
crypto,2sn2nt,Godspiral,1 point,Sun Jan 18 07:10:07 2015 UTC,"I see how you are assuming it used.  You can't decrypt at all without N.  Though maybe e=3 could manageably find something.  To get the m1, m2 you would have needed N.  Otherwise you're right about the math with notation gcd(c1e -m1, c2e -m2)"
crypto,2sn2nt,bitwiseshiftleft,1 point,Sun Jan 18 14:28:32 2015 UTC,"Edited, thanks, I'm too used to TeX.  The attacker doesn't start knowing N, only e.  It's a known-plaintext attack, so the attacker needs to get two messages by some means other than decrypting them.  (Eg, by observing a protocol which sometimes sends predictable messages, or by observing low entropy text chats and guessing that some of the messages are a single word or emoticon.)"
crypto,2sn2nt,Godspiral,1 point,Sun Jan 18 17:43:12 2015 UTC,"Yes.  With any public key encryption algorithm, this is called signing.  In your case, instead of providing the plaintext to verify the signature, your public key decryption returns the plaintext.  The plaintext is created by encrypting using your public key the ""answer"" you have published."
crypto,2sn2nt,stouset,6,Fri Jan 16 16:49:57 2015 UTC,"This is not necessarily true with any asymmetric algorithm. RSA, yes. ECC, no."
crypto,2sn2nt,Godspiral,1 point,Fri Jan 16 17:31:48 2015 UTC,"ECC signs without providing the plaintext for comparison?  Maybe you are saying that ECC keys are short and so a hash function is necessary, but you can always sign a ""random"" ECC sized number that is either an AES key or RNG seed followed by whatever symetric encryped stream.  Or can you not do that with ECC?  edit: Looks like my way can work for ECC  http://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm  Hash(m) can just be m if m is less than the curve bit size.  If the original plaintext wasn't somehow a function of signature verifications, then you could never know what was signed.  edit2: I see how ECC can't now.  It needs the plaintext (or hash) to see that a point is correct.  It doesn't recreate the plaintext the way RSA or Rabin does."
crypto,2sn2nt,stouset,2,Fri Jan 16 18:40:40 2015 UTC,"Right. Also, there are other signing algorithms that use elliptic curves. Signing being equivalent to ""encrypting with a private key"" is an interesting property of the RSA cryptosystem, but is not a fundamental component of asymmetric cryptosystems."
crypto,2sn2nt,FryGuy1013,1 point,Sat Jan 17 00:23:13 2015 UTC,"The problem with ECC is that it's difficult to map plaintext to curve points. It's much easier to generate a curve point by using an arbitrary point on the curve (the base), and scalar multiplying it by the plaintext mapped to a number (equivilent to raising an arbitrary number to an exponent in an prime group). If you do this, it's impossible to recover the original plaintext when verifying the signature."
crypto,2smhhf,mikemol,2,Fri Jan 16 13:00:51 2015 UTC,"In theory this should be fine, but in practice I'd look into more standard key derivation techniques like PBKDF2."
crypto,2smhhf,DoWhile,1 point,Fri Jan 16 13:56:01 2015 UTC,"I'm over my head, or I wouldn't have come here in the first place. What should I compare PBKDF2 to, so I have an understanding of what constitutes a set of tools for a similar purpose? And where should I look to understand how to use them properly?"
crypto,2smhhf,Natanael_L,1 point,Fri Jan 16 14:31:24 2015 UTC,"They are similar to hashes, but are often configurable for workload requirements and output size"
crypto,2smhhf,Natanael_L,1 point,Fri Jan 16 14:56:22 2015 UTC,"If they're similar to hashes, wouldn't you lose entropy that way? I don't think I lose any entropy with the technique I described. So long as my common salt is N bits, and N is > 384, then I would expect 384 bits of entropy in the resulting 48-byte string.  (And, actually, I think I'm using the term 'salt' incorrectly here. I suspect the 1024-bit portion is actually my key, and the clock is my salt.)"
crypto,2smhhf,rainsford21,1 point,Fri Jan 16 15:16:24 2015 UTC,"Only if the core function at some point reduces the size of the input. If it can be configured to always work on 1024 bits at minimum, then you lose nothing.   And either way, losing entropy isn't critical if you still have at least 100+ bits of entropy represented in the final output. You don't need to preserve all of it."
crypto,2smhhf,GahMatar,1 point,Fri Jan 16 15:21:28 2015 UTC,"Is there any reason you couldn't just have one of the terminators generate a random 48-byte keyfile by doing something simple like reading /dev/urandom and then making that file available so the other terminator could read it (e.g. NFS or SCP, well locked down of course)?  That seems like a much simpler solution than trying to create a synchronized key generator (although that's an admittedly interesting problem to think about :)).  To help avoid any timing issues, you could generate the key offset in time from reloading nginx (and offset from copying the key if using something like SCP).  So if you wanted to rotate the key hourly, you could generate a new key at minute 0, copy the key to the other server at minute 15 and then reload both nginx instances at minute 30."
crypto,2smhhf,GahMatar,1 point,Fri Jan 16 15:04:25 2015 UTC,"Is there any reason you couldn't just have one of the terminators generate a random 48-byte keyfile by doing something simple like reading /dev/urandom and then making that file available so the other terminator could read it (e.g. NFS or SCP, well locked down of course)? That seems like a much simpler solution than trying to create a synchronized key generator (although that's an admittedly interesting problem to think about :)).   To my mind, doing a synchronized key generator is easier to secure (presuming the key generation algorithm question is secure, hence my post) than NFS or SCP, and feels less likely to break in the event of a transient network issue. Fewer interconnected parts   To help avoid any timing issues, you could generate the key offset in time from reloading nginx (and offset from copying the key if using something like SCP). So if you wanted to rotate the key hourly, you could generate a new key at minute 0, copy the key to the other server at minute 15 and then reload both nginx instances at minute 30.   A timing issue problem is the purpose of the sleep 30 at the beginning of the cron sequence. Though it'd be easy to move the service nginx reload to a separate cron entry run on a slightly offset schedule. (Say, generate the key on the hour, and then reload the configuration at five after.)"
crypto,2smhhf,GahMatar,1 point,Fri Jan 16 15:13:02 2015 UTC,"To my mind, doing a synchronized key generator is easier to secure (presuming the key generation algorithm question is secure, hence my post) than NFS or SCP, and feels less likely to break in the event of a transient network issue. Fewer interconnected parts   It sounds logical, but you're taking on a ton of complexity and ultimately you're having to make all the ingredients so-to-speak available on all hosts anyway.  Easier to just create a key and push to all hosts using SCP. Less complexity overall.  To answer the other questions, you don't want to use AES-256-GCM, you want to use CTR mode. That's because in GCM mode, the last part of the output is an authentication tag that is related to the preceding output so not really random. Since you keep only the first 48 bytes, it's probably not an issue but someone else might end up using that as a reference for something else and get surprised when the output is longer then expected.  The way openssl enc turns the passphrase into a key is a bit shitty and if you don't specify the message digest function on the command-line, it will use MD5 which, well, sucks (maybe newer version is better? I wouldn't bet on it though, crypto inertia is huge.)  EDIT:   More issues, your command-line is not good. the -pass argument doesn't work that way. use -pass file:FILENAME cut -c honors line boundary so you'll get non-deterministic number of bytes though no line will be longer then 48 characters. Use dd instead... | dd bs=48 count=1 skip=24 openssl will add header bytes at the start ""Salted__"" so you want to skip the first bit of the output, to be safe skip 1024 bytes to the middle of your output block."
crypto,2smhhf,GahMatar,1 point,Fri Jan 16 19:30:02 2015 UTC,"It sounds logical, but you're taking on a ton of complexity and ultimately you're having to make all the ingredients so-to-speak available on all hosts anyway.  Easier to just create a key and push to all hosts using SCP. Less complexity overall.   Kinda, but it's an ongoing connectivity concern with multiple SPoF that get exercised on a recurring basis, which raises the risk factor.  Meanwhile, the likelihood of the two servers moving out of sync by as much as 30 seconds is very, very low; the worst I've ever seen a VM stall on my network was 5s, unless storage from underneath it fell out completely.   To answer the other questions, you don't want to use AES-256-GCM, you want to use CTR mode. That's because in GCM mode, the last part of the output is an authentication tag that is related to the preceding output so not really random. Since you keep only the first 48 bytes, it's probably not an issue but someone else might end up using that as a reference for something else and get surprised when the output is longer then expected.   Excellent This is exactly the kind of advice and observation I was looking for. I tried to do my research on the various AES streaming modes, and it seemed to come down to CTR or GCM, and everyone seemed to favor GCM.   The way openssl enc turns the passphrase into a key is a bit shitty and if you don't specify the message digest function on the command-line, it will use MD5 which, well, sucks (maybe newer version is better? I wouldn't bet on it though, crypto inertia is huge.)   Good to know. I only went with password_file because it avoided passing the parameters on the command line. I'd still want to avoid that, so perhaps a different digest...except it looks like openssl only supports md2, md5, sha and sha1, and sha1 only outputs 160 bits...which is far less than the desired 384 bits.  Ew. So, if I wanted to keep the same procedure, I'd want to feed in password_file as I am now, but prepend it to the input of openssl enc, and specify sha1 as the digest.  And at that point, I want to read from the output no later than the size of my prepended input, so that the entire thing has had a chance to affect the engine state.  So:  dd if=/dev/zero bs=1 count=2048 | cat password_file - | openssl enc -aes-256-ctr -pass file:password_file -md sha1 | dd bs=1 count=48 skip=1156  That better?  (Also incorporated your file:FILENAME fix, used dd (I think you meant bs=1 count=48 skip=24, or you're skipping 1152 bytes. If you meant to skip 1152 bytes, the command should be clearer why?))  Is it defined how many bytes openssl will prepend? I don't like ""to be safe"" if I don't know what, precisely, I'm trying to be safe from. Otherwise I might not jump far enough. I'm skipping 1156 bytes for: 1024 bytes for unknown header size. 128 bytes for my original 1024 bits of entropy. 4 bytes for my modulo'd timestamp."
crypto,2skhgr,cbzoiav,6,Thu Jan 15 23:15:31 2015 UTC,"I think the problem is that the government isn't a single entity for which one key would work. There are many departments like the Police, intelligence, and government itself (ministers etc). At that point authorisation becomes a problem, and the more people that need access the more likely abuse or a leak is."
crypto,2skhgr,zeroXten,3,Thu Jan 15 23:21:49 2015 UTC,"As said, its a horrendous idea. I would never want it to happen.  But imagine a perfect government. A government that would use this only for good. Or another situation where a third party needs access but you don't want your communications publicly visible - a corporate network where the staff aren't trusted maybe.  My question is is there a secure way to go about this? Almost all current work is around two parties. Multi-party systems are usually designed so you need multiple people to decrypt the message. This seems like a new problem which is why it interested me."
crypto,2skhgr,bren2010,0,Thu Jan 15 23:27:15 2015 UTC,"At least with pgp, you can easily have multiple keys decrypt a single message.   I don't think this is technically true. Haven't touched it in a while, but I believe in PGP you encrypt the data with a symmetric key & encrypt the key with the receivers public key.  So i'd imagine in your multiple decrypt system you would have to encrypt the symmetric key with several peoples public keys.  ie One key decrypts the message. You can encrypt that key (multiple times) and send it to multiple people"
crypto,2skhgr,Twylite,5,Fri Jan 16 00:03:00 2015 UTC,"Kleptography is the study of securely and secretly leaking information about a cryptosystem--often that means embedding key escrows (backdoors).  Opportunities for kleptographic attacks are present everywhere random data is used.  All symmetric cryptosystems require random public nonces, so here's a simple idea for them:  When you contact your random input device, it could give you a public key encryption of x random bits and y bits to be leaked.  If the encryption function is pseudorandom (as many are), the tampered cryptosystem is poly-time indistinguishable from an un-tampered one, even with white-box knowledge of the backdoor (it's a strong SETUP).  There are more sophisticated methods for leaking the private keys from (EC)DSA signatures and (EC)DH key exchanges.  The private key for these backdoors can be split (or built) with a monotone span program, allowing arbitrary access structures to control application of the backdoor.  Similar to hierarchical encryption methods, corresponding public and private keys for smaller domains can be derived arbitrarily that only allow application of the backdoor in a specific domain--meaning that Tennessee judges need not have the ability to decrypt California's traffic, but the federal judges can decrypt both's.  Forward-secure encryption and standard PKI techniques can be used to minimize the damage of key compromise, although in a well-delegated system, anything significant would require a large number of people on a diverse variety of systems to be compromised simultaneously.  I don't know of a way to efficiently enforce use of a SETUP.  I'd imagine any asymmetric crypto operations at all would severely reduce the throughput of routers."
crypto,2skhgr,quercus_suber,2,Fri Jan 16 07:07:33 2015 UTC,"Thanks. Although I think I need to re-read that once i've woken up a bit more. I understand what you are saying, how it works just hasn't entirely registered in my head yet."
crypto,2skhgr,Like_A_Lawnchair,1 point,Fri Jan 16 00:26:17 2015 UTC,"All symmetric cryptosystems require random public nonces   Protecting against (this type of) kleptography: Most block cipher modes require the nonce to be (at most) unpredictable rather than random.  CBC requires an unpredictable nonce, but you can transmit a block counter C and use the nonce N=E(K', C) for some shared secret key K'.  CTR merely requires the nonce to be unique; it can be a counter.  SIV computes a vector-MAC CMAC*(H1, H2, ..., M) over headers and the message, and uses that as a deterministic IV."
crypto,2skhgr,earl_colby_pottinger,3,Fri Jan 16 07:10:25 2015 UTC,"Theoretically, it should be possible.  Practically, it's not going to happen - it would require all participants (even people who don't want to be monitored) to cooperate with monitoring by using approved services/systems; and there's really no reason to think that evil people are going to obey laws about encryption while disobeying laws about, say, murder."
crypto,2skhgr,earl_colby_pottinger,5,Mon Jan 19 12:47:10 2015 UTC,"The advantage it would give is you could make all use of non-approved systems to communicate over distance (leaving research still possible) highly illegal.  This means if you can't catch the criminal talking about his armed robbery or bomb plot, you can arrest them on illegal crypto charges.  Its also pretty easy to random sample communications & ensure the message is decrypt-able."
crypto,2skhgr,pred,3,Fri Jan 16 00:30:44 2015 UTC,"Your assumption is false. How can you know whether or not a message was decrypted? Encrypted data is, and unencrypted legitimate data can be, indistinguishable from random noise."
crypto,2skhgr,Godspiral,2,Fri Jan 16 07:03:17 2015 UTC,It depends on the context. Its certainly fair to mark anything on port 443 that when decrypted doesn't look like HTTP as suspicious.  Where I suggested a secondary use case to government in another comment for example - a corporate network - I imagine the onus would be on the employee to explain why they were transmitting white noise.
crypto,2shnqw,_ihatemyself,5,Thu Jan 15 06:03:58 2015 UTC,"That's the main advantage, and 256 bits is plenty.  There's also an effect on speed, i.e. on security per round.  Security depends in part on every small change in the input avalanching through the whole block in complex ways.  If the block is small, it may be too easy to find sets of changes which almost cancel out.  If the block is moderately large, it's more complicated because each change affects more state.  If the block is huge, then changes won't propagate to the whole block fast enough.  Also, some specialized applications require large or small blocks.  So disk encryption modes without authenticators ideally need maybe a 4k block size, but this is generally built from smaller ciphers.  The EKE password-authenticated key exchange needs an ideal cipher the size of an encoded elliptic curve point, so maybe 256 bits.  Obfuscating serial numbers may require a 64-bit block or smaller.  Use for compression in a hash function (eg Threefish) may expose you to a more powerful birthday attack (and other attacks), and so might need 512 bits or more.  And so on.  For you hypothetical question, there are variable-width ciphers, but AFAIK a fixed size that huge is silly."
crypto,2shnqw,bitwiseshiftleft,1 point,Thu Jan 15 07:40:05 2015 UTC,"a fixed size that huge is silly.   For now, anyway.  (Also, some[?] algorithms like RSA scale exponentially, so there's some cut-off point where it no longer makes sense to use a certain algorithm, because others would achieve a higher performance.)"
crypto,2shnqw,Creshal,3,Thu Jan 15 10:59:26 2015 UTC,"Threefish has a 1024-bit block cipher, if you need bigger. Apparently, this would help more with disk encryption tools: https://www.schneier.com/threefish.html"
crypto,2shnqw,johnmountain,1 point,Thu Jan 15 18:38:28 2015 UTC,"I noticed 1024-bit block has 80 rounds rather then 72 rounds for the smaller block sizes. Is this because of what /u/bitwiseshiftleft said above:   If the block is huge, then [input] changes won't propagate to the whole block fast enough.   The 8 extra rounds are because the block is larger and thus needs a bit more time to avalanche the input changes?"
crypto,2shnqw,bitwiseshiftleft,1 point,Thu Jan 15 20:01:28 2015 UTC,"Maybe, and also 1024-bit Threefish takes a 1024-bit key and is supposed to be secure against stronger attacks than 512-bit Threefish."
crypto,2shnqw,Godspiral,1 point,Thu Jan 15 21:12:17 2015 UTC,the key in aes is 256 bit (or 128).   Its blocksize is 16 bytes at all key sizes.
crypto,2shnqw,cs80,1 point,Thu Jan 15 14:59:34 2015 UTC,"I think the default for standard AES is 128, with a 256 variant."
crypto,2shnqw,GahMatar,2,Thu Jan 15 16:03:38 2015 UTC,AES only does 128-bit block size.  AES is based on the Rijndael cipher and Rijndael could do various block sizes between 128 and 256 bits.
crypto,2shnqw,Godspiral,1 point,Thu Jan 15 17:57:46 2015 UTC,"Its also a bit weird to use 256 bit keys for 128 bit blocks.  The result can only be another 128 bit value no matter how large the key.  If you are encoding the same text under many different keys (birthday attack problem), then the 256 bit key doesn't give you any additional output entropy or collision avoidance.  If you in fact took care to use 2128 different 128 bit keys, you'd be assured of different encryptions.  You don't have that assurance with 2128 different 256 bit keys."
crypto,2se8bu,hazysummersky,8,Wed Jan 14 12:38:11 2015 UTC,"it won't be pretty.   If they get their way, it likely won't be visible either. Compromising security so those perverts can see what everyone is up to.. an appetite that never quite satisfies their paranoia.  The worst will be they fix something they feel is a threat and that creates a vulnerability.. but we've been here before and learnt that lesson, haven't we?  Save us from people with good intentions. If they spent half as much effort not provoking problems in the first place, then perhaps we wouldn't have the problems we do."
crypto,2se8bu,davidpbrown,1 point,Wed Jan 14 15:40:12 2015 UTC,"if they even can ban it.  maybe they can ban certain apps using it but forcing weakened prng, like during tls handshakes and other asymmetric, this wouldn't be smart.  unless they actually want businesses coming to them looking like they just got pillaged because of the massive data leakages, which would ultimately be the fault of those who decided to ban the tools needed to defend against that."
crypto,2se8bu,thewizardofweb,6,Fri Jan 16 01:34:52 2015 UTC,"The problem with any sort of weakening of security, for any noble purpose, is effectively weakened security in general. There's no way you can trust anybody, especially the government, to keep a master key that allows them to read your messages when they have a warrant without a) abuse b) somebody else getting a hold of it.  It is an interesting societal dilemma nonetheless. What can we do as citizens to aid law enforcement without compromising our privacy?"
crypto,2se8bu,Ahhmyface,3,Thu Jan 15 00:21:55 2015 UTC,"It is an interesting societal dilemma nonetheless. What can we do as citizens to aid law enforcement without compromising our privacy?   Well, one option is improving security & privacy across the board so that they don't have to deal with problems that arise when malicious actors take advantage of weakened crypto/security to attack us."
crypto,2se8bu,n3xg3n,9,Thu Jan 15 00:51:49 2015 UTC,"If they mandate weakened or escrowed keys they don't need to ban WhatsApp. My first reaction was also ""OMFG they're trying to ban SSH!"", but then when you consider it's probably the intelligence services consulting him behind the scenes, it's entirely possible they have something vastly more subtle in mind, not to mention a solution more easily sold to a captive public.  We had this once before, only at the time the general public weren't crying out for an end to terrorism.  Can any honest-to-goodness qualified cryptographers comment on whether e.g. AES session key generation could be tweaked to produce weaker/escrowed keys without breaking compatibility? The depressive fatalist in me suspects there is nothing technical to prevent this."
crypto,2se8bu,w3m2d,0,Wed Jan 14 13:34:41 2015 UTC,"Why not encrypt a part of your session key, with the NSA's (or equivalent) RSA public key?. Like a workload reduction factor.  I'm not a cryptographer fyi"
crypto,2se8bu,fabrizziop,4,Wed Jan 14 14:26:18 2015 UTC,"Why not encrypt a part of your session key, with the NSA's (or equivalent) RSA public key?.   Because criminals won't do that? You just open a big security peep hole in otherwise law-abiding people's computers."
crypto,2se8bu,NeuroG,8,Wed Jan 14 16:11:07 2015 UTC,"That is the only possible outcome of those regulations. Criminals won't follow them, and the actual purpose is to spy on every citizen."
crypto,2se8bu,fabrizziop,1 point,Wed Jan 14 16:22:56 2015 UTC,"I thought about that, but it'd definitely require a protocol change basically everywhere. If you just mess with the key then only a tiny amount of code in 3 or 4 libraries needs to change"
crypto,2se8bu,w3m2d,5,Wed Jan 14 14:28:57 2015 UTC,"NSA already did this with the Dual-EC DRBG:  ""If I use the Dual-EC PRG to generate the ""Client Random"" nonce transmitted in the beginning of an SSL connection, then the NSA will be able to predict the ""Pre-Master"" secret that I'm going to generate during the RSA handshake. Given this information the connection is now a cleartext read. This is not good."" - http://blog.cryptographyengineering.com/2013/09/the-many-flaws-of-dualecdrbg.html  As you point out it doesn't require a protocol change."
crypto,2se8bu,xor_rotate,7,Wed Jan 14 15:03:46 2015 UTC,"Umm.. What is the article trying to say?  The ""You can't ban them"" argument there could fundamentally be applied to guns and drugs too, and the rest seem to be just word twisting, and then the half truth about ""Today’s end-to-end encryption is said to be full of holes"" - while linking to a report that shows about half of them seem to be pretty solid, and most of them giving at least some protection.  So I am really confused about what the article is really trying to say.."
crypto,2se8bu,TheTerrasque,7,Wed Jan 14 12:56:01 2015 UTC,"The ""You can't ban them"" argument there could fundamentally be applied to guns and drugs too   Well, yes, it can, and people do in fact apply that argument to guns and drugs. With cryptography though this argument is x1000 times more effective because of the difficulty enforcing bans against cryptography. It is fundamentally impossible, vs almost impossible with drugs or guns."
crypto,2se8bu,etherael,2,Thu Jan 15 01:02:16 2015 UTC,"The ""You can't ban them"" argument there could fundamentally be applied to guns and drugs too,   Not really. Guns are easier to make than most people think but still require costly machine tools. Drugs similarly require facilities to produce in any amount.  Cryptography is math. It's not even difficult math unless you're developing new ciphers.   Banning drugs and guns is a ban on well defined physical object. Banning crypto is literally trying to ban math."
crypto,2se8bu,Innominate8,1 point,Thu Jan 15 15:29:44 2015 UTC,"The real question to me is: how are they going to distinguish randomness from encryption in the long run? (a: they can be made unable unless they can break major crypto)   I see them getting a hold of major consumer services, though. But stego should be undefeatable for the technical user."
crypto,2se8bu,darkmighty,-2,Wed Jan 14 18:26:36 2015 UTC,"As is often the case with these things I feel Cameron has been told something like end to end encryption is the reason we can't read these peoples messages.  We know they can access all the (encrypted) data already.  He obviously has a limited understanding of how these systems work, which is OK, it's not his job to understand public key encryption.  The way he's come out and suggested banning end to end encryption though is a bit embarrassing.  Realistically, what can they do here? They are going to do something to allow them to read those messages. Would companies like whatsapp give the UK government private keys so they can decrypt the data. Would they change their encryption system for the government?  Why isn't the US pushing for something similar? Surely they have as much at stake. Do they have access to this data already?  Also, while I'm an advocate of personal privacy and the right to privacy, I don't think they are doing this to oppress people or read dirty messages I'm sending to my girlfriend. It seems to be looking more and more like a necessary evil.  I would normally say something like this doesn't affect terrorists, only ordinary people. You'd imagine terrorists would be a bit more clever, but then you see in France how they left ID in the car.  The other thing is, we know that mobile apps' implemention of crypto can be terrible at times, so maybe this is a false flag to lull extremists into a false sense of security. Maybe it isn't as big an issue for security forces as they are making out."
crypto,2se8bu,dioltas,4,Wed Jan 14 19:08:15 2015 UTC,I don't think they are doing this to oppress people or read dirty messages I'm sending to my girlfriend.   It's not like they've done similar things before...
crypto,2sf3rd,R-EDDIT,5,Wed Jan 14 17:30:31 2015 UTC,"Mathew Green posted this on twitter @matthew_d_green  The report that the NSA ""kyboshed"" discussion of the constants is here documented here.  http://csrc.nist.gov/groups/ST/crypto-review/documents/Email_Oct%2027%202004%20Don%20Johnson%20to%20John%20Kelsey.pdf"
crypto,2sf3rd,marklarledu,4,Wed Jan 14 17:59:45 2015 UTC,"For those too lazy to click the link, here is the content of the email discussion (I took the liberty of emphasizing some of the content that I found important and relevant and removing some redundant data):  Subject: [Fwd: RE: Minding our Ps and Qs in Dual_EC]  Date: Wednesday, October 27, 2004 at 12:09:25 PM Eastern Daylight Time  From: John Kelsey  To: larry.basham@nist.gov  ---------------------------- Original Message ----------------------------  Subject: RE: Minding our Ps and Qs in Dual_EC  From: ""Don Johnson"" DJohnson@cygnacom.com  Date: Wed, October 27, 200411:42 am  To: ""John Kelsey"" john.kelsey@nist.gov  John,  P=G.  Q is (in essence} the public key for some random private key. It could also be generated like a(nother} canonical G, but NSA kyboshed this idea, and I was not allowed to publicly discuss it, just in case you may think of going there.  Don B. Johnson  ---------------------------- Original Message ----------------------------  From: John Kelsey fmailto:john.kelsey@nist.gov]  Sent: Wednesday, October 27, 200411:17 AM  To: Don Johnson  Subject: Minding our Ps and Qs in Dual_EC  Do you know where Q comes from in Dual_EC_DRBG?  Thanks,  -John"
crypto,2sf3rd,hackingdreams,9,Wed Jan 14 21:49:11 2015 UTC,The only thing that was truly regrettable from the NSA's perspective was that they got busted doing it.  Otherwise they would have been pleased as punch.
crypto,2sf3rd,groumpf,4,Wed Jan 14 23:45:12 2015 UTC,"The slides from John Kelsey's RWC talk may be relevant as well. The message: Dual_EC should never have made it into a standard (let alone two), and is getting removed."
crypto,2sf3rd,stratha,4,Wed Jan 14 22:53:58 2015 UTC,"There's a few things either going on here:  1) The NSA has very good strategic division of labour. Such that the mathematicians, analysts and lower level folk don't know the direction at the top level of the agency. They're also separated from the cryptanalyst team so they don't know the actual capabilities of the cryptanalysis. They're separated from the team developing the quantum computer so they don't know the brute force capability. They're separated from the hardware and datacenter teams so they don't know the scale and breadth of the system. They're separated from the malware and hacking team (TAO). They're separated from the few people assigned to infiltrate the standards committees and weaken encryption.  2) The NSA keeps a tight lockdown on what their staff are allowed to view on the wider internet, just like the US Army. Therefore they haven't read all the Snowden leaks so they still don't know what the agency is really up to. This rule is likely in place to prevent desertion, whistleblowers or mutiny. How does the saying go? Treated like a mushroom.  3) This guy is here to publish NSA propaganda and lies. The general gist of the post being ""Feel sorry for us"", ""We didn't mean to publish a bad standard"", ""We're just trying to protect the country"", ""We're good people really."" Which is lies when it comes down to it.  How else do you explain this Michael Wertheimer?   nytimes.com/interactive/2013/09/05/us/documents-reveal-nsa-campaign-against-encryption.html   Let's quote the relevant points which destroys his entire argument that the NSA is not trying to influence standards for the worse.   (TS//SI//REL TO USA, FVEY) Insert vunerabilities into commercial encryption systems, IT systems, networks, and endpoint communications devices used by targets.  (TS//SI//REL TO USA, FVEY) Influence policies, standards and specification for commercial public key technologies.  (TS//SI//NF) The SIGINT Enabling Project actively engages the US and foreign IT industries to covertly influence and/or overtly leverage their commercial product's designs. These design changes make the systems in question exploitable through SIGINT collection (e.g., Endpoint, MidPoint, etc.) with foreknowledge of the modification. To the consumer and other adversaries, however, the systems' security remains intact.  (TS//SI//NF) Shape the worldwide commercial cryptography marketplace to make it more tractable to advanced cryptanalytic capabilities being developed by NSA/CSS. [CPP_00090]   Words right out of the agency's mouth.  See those last NF listed ones? That means No Foreign. That means even the rest of the Five Eyes (GCHQ etc) don't even know what the NSA is really up to. Even they think the standards are secure. On one hand they tell the Five Eyes they're influencing standards for the better. Behind their backs they're messing with these commercial standards to make them amenable to their secret methods and cryptanalysis.  The other point we see here is that they tell the Five Eyes that they will insert vulnerabilities specifically only for targets. In their own private documentation we see that they want to do it worldwide and apply their techniques on everyone.  If you see any standard coming out of the NSA or NIST there is absolutely a way they can secretly crack it or exploit it in some way. If they release or approve a standard for everyone to use and say it's secure, there is no way you can really believe that, especially when they're secretly influencing standards, inserting vulnerabilities, collecting everything, storing everything and decrypting everything behind everyone's backs. Even without the Five Eyes partner's knowledge. It wouldn't surprise me if some of the Five Eyes agencies/governments adopted AES and were caught out because they didn't realise NSA wanted to keep tabs on them too."
crypto,2sf3rd,rflownn,0,Thu Jan 15 10:32:45 2015 UTC,"Part of the NSA strategy I think is to break the credibility of any non-cryptographers and mathematicians they don't have reaching into their billfold. They employ the largest number of mathematicians, cryptographers, analysts, etc... and it is highly doubtful any state or elite college level professor and/or grad is working independently of them. They hold more than enough power."
crypto,2sfmau,InfectiousFelonius,2,Wed Jan 14 19:51:55 2015 UTC,"Hey look at that, a crappy biased clickbait article about something someone already posted the original source of.  It completely ignores most of the actual response.  http://www.reddit.com/r/crypto/comments/2sf3rd/encryption_and_the_nsa_role_in_international/"
crypto,2sezbo,Godspiral,3,Wed Jan 14 16:57:20 2015 UTC,"This provides a single pass substitution and transposition encryption. It avoids some of the statistical attack techniques faced by xor or aes.   I believe similar analysis will still work against this implementation. Can you extrapolate why this isn't the case?   but xor and aes don't react well to multiple applications of the encryption to sub encryptions.   Do you mean it is a performance issue, not a cryptographic issue?"
crypto,2sezbo,C_Hitchens_Ghost,1 point,Wed Jan 14 17:25:44 2015 UTC,"I believe similar analysis will still work against this implementation. Can you extrapolate why this isn't the case?   For text that you know has a lot of e's or spaces, and probably at least one ' the ' or 'The ', or more useful, know some fixed part of the plaintext then you can attack the RNG to guess its output rather than the seed.  In the case of AES feedforward mode, as a black box, you can modify the decryption of the next block by choosing specific ""garbage"" in the previous block.  With a transposition stage, there are no useful known plaintext portions or patterns,  assuming that the total frequency of spaces or 'e's provides no useful information.   xor and aes don't react well to multiple applications of the encryption to sub encryptions.   for double xor (and I think aes as well)  B x T x A is equivalent to T x (A x B), where A and B are the pads used to xor.  If A and B are the same then you have actually decrypted plaintext by double xoring, you are xoring with 0.  With xor this is easily avoided by just having the seed initialize the RNG, and then getting A and B to be byte streams from that RNG, but doing this, even if you XOR 10000 times, it is still equivalent to XORing with a single random stream of bytes.  Just as SHA isn't designed to recursively be applied 1M times, the RNG might not be either, and 1M rng values can only help an attack as compared to 100 rng values.  AES (unmodified) as I understand it cannot be double applied (seed decrypts the 2nd time), and 3 applications is same as 1."
crypto,2sezbo,C_Hitchens_Ghost,4,Wed Jan 14 18:05:33 2015 UTC,"AES (unmodified) as I understand it cannot be double applied (seed decrypts the 2nd time), and 3 applications is same as 1.   With a KDF, this should not be the case.  Also, there will always be an XOR key of length n that can turn an encrypted block of the same length, back into the plaintext. This is unavoidable. One must have a longer cipher than the input to get by this. However, determining that XOR key without knowing the plaintext, is generally faster, than some attack on the longer algorithm that enciphers a fixed block size.   With a transposition stage, there are no useful known plaintext portions or patterns, assuming that the total frequency of spaces or 'e's provides no useful information.   I've found several cyclic logical shifts (of an entire block, not the individual bytes) when combined with other primitives (xor, mod(add), subst., etc.) to be sufficient, though I expect a crack of my cipher. I think a good idea might be taking a block A at some offset < length(a), beginning the block cipher there, then only moving 1/2(length(a)) to the next block, effectively grabbing half of the encrypted block from before, and half of the unencrypted block, for the next block cipher round. This could be bytewise, or bitwise, continued to the end, leaving a final round of last partial block of file + first partial block."
crypto,2sezbo,C_Hitchens_Ghost,1 point,Wed Jan 14 19:53:45 2015 UTC,"several cyclic logical shifts (of an entire block, not the individual bytes) when combined with other primitives (xor, mod(add), subst., etc.) to be sufficient   Its likely sufficient.  It is performing many operations though.  The same theoretical defect of (non hardware) AES   block A at some offset < length(a), beginning the block cipher there, then only moving 1/2(length(a)) to the next block, effectively grabbing half of the encrypted block from before, and half of the unencrypted block   interesting.  AES uses fixed 16 byte blocks.  I would guess that ""feedbacking"" any unencrypted portion of one block to another would make any attack on the feedbacking process easier.  To summarize AES, it takes 16 byte blocks and does transforms and transpositions within that 16 byte block.  Its not clear that after the xor and substitution steps, such that presumably all 16 byte values map to different 16 byte values (otherwise decryption would fail).  My rail fence cipher variation has the advantage of not requiring a blocksize, through something related to cache (such as 1024 bytes, or even 4k/8k) would make sense.  Although the first byte does not have perfectly equal probability of being moved anywhere, and in fact cannot be moved to the last byte unless the block/text is a multiple of 14 bytes long and the key is as long (in base 14) as the text, and the key's first radix is 13 and no other radii are 13.... The encrypted first byte has many more possible transposition locations than 16.  It can end up almost anywhere within the block size.  It also acheves all of this with a single round and single pass of the blocksize.  In addition to no fixed text/block size, there is no fixed key size either."
crypto,2sezbo,cunttard,2,Wed Jan 14 21:17:08 2015 UTC,"The same theoretical defect of (non hardware) AES   Agreed. I don't feel safe using mine with just 1 pass.   interesting. AES uses fixed 16 byte blocks. I would guess that ""feedbacking"" any unencrypted portion of one block to another would make any attack on the feedbacking process easier.   I didn't explain that too well (and AES could do this, just by mucking with offsets...though that would have to be derived from, or become part of, the key.)  My example plain text: (Every # is 4 bytes)     #### #### #### ####  On the first round of AES, the first block: #### is encrypted to ABCD.  ABCD #### #### ####   On the next round, we modify the offset to be just after C, so the 2nd round of AES operates on the following block:  D ###, and let's say it becomes F 123. Our ct state after 2 rounds:  ABCF 123# #### ####   Then we can operate on the next regular 16 byte block (yeah, I definitely didn't explain this...) which is 123#.  After 3rd round:  ABCF 789z #### ####   After 4th round:  ABCF 789q aei# ####   Final round (first 3 and last one.)  FGHF 789q eio6 246P   That's certainly less than 24 rounds, (8 actually) and each byte of the 4 16 byte blocks is encrypted twice, at least. A derived key from a KDF should probably be used to avoid key reuse. Of course, this offset would need to be derived from the key data in some way, as well.   My rail fence cipher variation has the advantage of not requiring a blocksize, through something related to cache (such as 1024 bytes, or even 4k/8k) would make sense. Although the first byte does not have perfectly equal probability of being moved anywhere, and in fact cannot be moved to the last byte unless the block/text is a multiple of 14 bytes long and the key is as long (in base 14) as the text, and the key's first radix is 13 and no other radii are 13   Someone will code that attack. If you know of that one issue, which only leaks a few bits of info, there might be others with different radii. But it sounds like you can solve that by not allowing specific key inputs.  I know I was surprised at the change just moving a tap in a Galois PRNG made. (14, 11, 7, 5, 3, 1: since 14 and 7 share a common number...now I use tap 8.)   It also acheves all of this with a single round and single pass of the blocksize. In addition to no fixed text/block size, there is no fixed key size either.   Which, I believe, is the future.  I am interested in the public key aspects of your code as well. And I believe this might just be, the first time I've seen the J language."
crypto,2sezbo,C_Hitchens_Ghost,1 point,Wed Jan 14 22:11:26 2015 UTC,"Someone will code that attack. If you know of that one issue, which only leaks a few bits of info, there might be others with different radii. But it sounds like you can solve that by not allowing specific key inputs.   I modified the code in case you already downloaded it.    (genkey 13) enc2 'TheQuickBrownF'  NB. the corner case I mentioned to get first character in last spot. ┌─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐ │F│h│e│Q│u│i│c│k│B│r│o│w│n│T│ └─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘    (genkey 13) enc2 'TheQuickBrownFoxJumpsOverTheLazyDog'  NB. same key but longer block. ┌──┬───┬───┬───┬───┬───┬───┬──┬──┬──┬──┬──┬──┬───┐ │Fe│hxa│eJz│Quy│umD│ipo│csg│kO│Bv│re│or│wT│nh│ToL│ └──┴───┴───┴───┴───┴───┴───┴──┴──┴──┴──┴──┴──┴───┘    (genkey 1234) enc2 'TheQuickBrownFoxJumpsOverTheLazyDog'  NB. still small key.  The groups stay the same, but the groups get shuffled around. ┌──┬───┬───┬───┬───┬───┬───┬───┬──┬──┬──┬──┬──┬──┐ │Fe│Quy│eJz│umD│hxa│ipo│ToL│csg│kO│Bv│re│or│wT│nh│ └──┴───┴───┴───┴───┴───┴───┴───┴──┴──┴──┴──┴──┴──┘    (genkey 123412312) enc2 'TheQuickBrownFoxJumpsOverTheLazyDog'  NB. still relatively small key, but groups break up ┌──┬───┬─────┬──┬──┬───┬───┬───┬──┬──┬──┬──┬──┬──┐ │oa│Txz│hkJvy│Be│is│euD│Qmo│upg│rr│cO│oT│wh│ne│FL│ └──┴───┴─────┴──┴──┴───┴───┴───┴──┴──┴──┴──┴──┴──┘     (genkey 123412312123123) enc2 'TheQuickBrownFoxJumpsOverTheLazyDog' NB. size of boxes starts breaking up. ┌─┬──┬──────┬──┬──┬────┬──┬──┬──┬──────┬──┬──┬─┬─┐ │m│FD│Thupse│kh│rL│owaz│eO│oo│ir│QBnvey│xg│cT│J│u│ └─┴──┴──────┴──┴──┴────┴──┴──┴──┴──────┴──┴──┴─┴─┘   The above is without any xor step.  I'm not sure that there is a weakness, just that the first letter T doesn't have equal probability of landing at any position in the encrypted text.  Its still more possible/likely positions than 16.  Something more of a weakness is that one of the first 14 characters in the text is likely to end up in position 1.  But that didn't happen in last line.  to see why:  genkey 123412312123123 2 2 6 9 2 8 11 3 9 4 5 5 9 1 7 10 12 13 0    The first character in the encrypted text will be where the first 0 in the key is.  If the key does not generate one on its own, the 0 is the last of the fill slots.  In this case the 19th character.   the first time I've seen the J language.   I highly recommend it.  There is a good case for it being the best high level language, though its not super approachable.  It is a very mature language, whose core hasn't changed in 10 years though bells and whistles get added still.  The reason I like it is the power of one line programs, and the ease in writing them.  Performance is also good."
crypto,2sezbo,autowikibot,0,Thu Jan 15 02:29:20 2015 UTC,"Your code is of no interest. Show us a proof (or even a security argument) including stated security goals with respect to the provable security paradigm. Otherwise, to quote the sidebar: ""people will sigh and shake their heads."""
crypto,2sezbo,C_Hitchens_Ghost,2,Wed Jan 14 20:16:10 2015 UTC,"Your code is of no interest.   I disagree, and think that, instead, this should probably be posted to /r/codes. This place hates code. This place prefers the code to reside elsewhere. It tarnishes the cough ivory walls cough"
crypto,2sgblm,AlphaDomain,3,Wed Jan 14 22:56:28 2015 UTC,You aren't giving us any context.
crypto,2sgblm,d1str0,1 point,Wed Jan 14 23:18:50 2015 UTC,"Can you explain the context you're looking for? It was produced using the key word/phrase shift. All the information I have I've given to you, now you can see my difficultly with this problem."
crypto,2sgblm,d1str0,3,Wed Jan 14 23:26:46 2015 UTC,"So, is it a one time pad? A repeating key? Do you have any more ciphertext? How long is the key? These are all very important."
crypto,2sgblm,d1str0,1 point,Wed Jan 14 23:51:08 2015 UTC,"Its one key is the forum of a cryptic alphabet, example:  Key: JULISCAER  Cipher alphabet : JULISCAERTVWXYZBDFGHKMNOPQ  You'd used the Cipher alphabet with traditional Alphabet. Using the example above: J would be A, U would be B, L would be I, and so on.   The keyword is placed in front of the alphabet the Alphabet continues after the last letter of the Keyword. With the keyword above the next letter is T the alphabet contines skipping any already used letter and wraps back around.   There isnt any more cipher text."
crypto,2sgblm,SAI_Peregrinus,3,Thu Jan 15 00:04:01 2015 UTC,It sounds like you've got this figured out. You didn't think this info would have been useful to start with?
crypto,2sgblm,SAI_Peregrinus,1 point,Thu Jan 15 00:09:52 2015 UTC,"Sorry I should of explained more, I am knew to figuring out these type of problems. I don't have this figured out I can't figure out the key and cryptic alphabet."
crypto,2sc8w5,PhineasFred,2,Tue Jan 13 23:46:33 2015 UTC,"Main Books:  Cryptography and Network Security, Stallings Stinson (2006) Cryptography. CRC -used this in class, sufficiently covers the math behind EC-XXX (DSA, ECC), CRT, DSA, RSA, Fast Exponentiation, etc.  this covers the math behind the methods and how to break/the process of, RSA, DES, AES, and hashes, SHA, MD5, and authentication codes MAC    Other Books:  Cryptography and Network Security, Stallings  Introduction to Modern Cryptography, Katz and Lindell. CRC  Hardy&Richman&Walker (2009) Applied Algebra. CRC"
crypto,2sc8w5,reed17purdue,2,Wed Jan 14 05:55:22 2015 UTC,I would start off with 'cryptographic engineering' to teach you how to think like a cryptographer and then read 'understanding cryptography' to better understand the algorithms. Neither book has prerequisites.
crypto,2sc8w5,Websly,1 point,Wed Jan 14 07:56:46 2015 UTC,nice..
crypto,2sc8w5,shakajumbo,1 point,Sat Jan 24 04:33:45 2015 UTC,"Sidebar, below rules, see ""Resources"".  Also, here is my response the last time a thread like this came up (although OP in this post was asking specifically for cryptanalysis)."
crypto,2sc8w5,cunttard,1 point,Wed Jan 14 00:03:36 2015 UTC,Nitpicking but it's not cryptology its cryptography
crypto,2sc8w5,Blitchiz,6,Wed Jan 14 05:22:03 2015 UTC,The professional organization for researchers in this field is called the International Association for Cryptologic Research.
crypto,2sc8w5,rosulek,3,Wed Jan 14 06:11:41 2015 UTC,"both, in fact all three are different studies. cryptology is the math behind it, cryptanalysis is the breaking, cryptography is the technology and methods (types)/usage."
crypto,2sc8w5,reed17purdue,2,Wed Jan 14 05:54:35 2015 UTC,"cryptology studies is a pleonasm. I think that's what parent meant. (-logy comes from ""logos"" meaning ""the studies of"")"
crypto,2sc8w5,poopinspace,1 point,Thu Jan 15 00:13:54 2015 UTC,true
crypto,2sc8w5,reed17purdue,2,Thu Jan 15 16:01:36 2015 UTC,"An umbrella term for cryptography and cryptanalysis. Cryptology is the study of mathematical, linguistic, and other coding patterns and histories. -http://en.wiktionary.org/wiki/cryptology"
crypto,2sc8w5,prather_mcs,0,Wed Jan 14 05:42:31 2015 UTC,"Check the Cryptography course on KhanAcademy. It's a set of pretty simple videos on the topic, it's easy to watch, you can watch that on your mobile when you're in transit for example. You don't have to watch everything but that's a good start to see if this is one thing that you would like to do.  There are many different fields in Cryptography. It could be more research, which would usually involve more mathematics, or it could be more applied, which would involve more programming. It could also be somewhere in the middle.  If you're serious about studying Cryptography, and that you have finished watching the Khan Academy videos on the subject. I urge you to take the Cryptography I course on Coursera from Dan Boneh. And do it before you graduate."
crypto,2sc8w5,poopinspace,-1,Thu Jan 15 00:17:59 2015 UTC,khan academy
crypto,2sbk0a,alecbenzer,3,Tue Jan 13 20:46:47 2015 UTC,"Consider the following function in Python:  def verify_mac(data, supplied_mac):      expected_mac = hmac(key, data)      # long hand version of what a string comparison would do      for i in xrange(len(expected_mac)):          if supplied_mac[i] != expected_mac[i]:              return False      return True   An attacker who runs this function many times would be able to lock in, byte by byte, the correct MAC because the runtime of this function is slightly longer for each correct byte. Google's Keyczar had this problem.  Consider the following function in C:  int verify_mac(unsigned char *data, size_t len, const unsigned char *supplied_mac) {     unsigned char expected_mac[MAC_LEN];     hmac(expected_mac, key, data, len); /* write the calculated value to expected_mac */     return strncmp(expected_mac, supplied_mac, MAC_LEN) == 0; }   In addition to the timing issue, this one also has the issue where if you can get the right first byte followed by a zero byte, strncmp will exit early indicating the ""strings"" are the same. Nintendo made a similar mistake in the Wii."
crypto,2sbk0a,rya_nc,2,Tue Jan 13 21:02:01 2015 UTC,"No, yeah, I get how timing attacks work, I just don't get why they even bothered talking about MACs in the first place."
crypto,2sbk0a,rya_nc,2,Tue Jan 13 21:05:25 2015 UTC,"The app wishing to authenticate does not need to know the MAC key. It authenticates to the server which returns a token with a MAC upon success. Any servers that need to verify this token will have the MAC key pre-shared with them. The client has no need to verify the MAC, nor can it be trusted to sign anything, so there's no need to use public key cryptography.  Basically, some mutually trusting group of servers want to know the answer the question ""did we say that"". Nobody else needs to be able to answer that."
crypto,2sbk0a,rya_nc,1 point,Tue Jan 13 21:12:59 2015 UTC,"Hm, ok, well if the authenticator is going to be directly involved in each authentication via the token then I guess a MAC would be sufficient, but in that case even simpler schemes seem possible. Like the authenticator could just generate random session IDs and keep a mapping of them to usernames internally (though I guess this has the downside of needing the authenticator to store more than a single private key).  My impression was that the idea was to give a user a token that they can use to authenticate themselves with other apps without needing to directly involve the authenticator on a per-authentication basis, but perhaps I misunderstood that."
crypto,2sbk0a,GahMatar,2,Tue Jan 13 22:42:47 2015 UTC,"If it's SSO between multiple web apps run by the same company, they can all share a single key, and they can all log the user in. With an HMAC session cookie this can be down without having to store any state server-side. Also helpful if there are load balancers involved.  In this configuration there is no central authenticator.  You seem to think they were talking about a kerberos-like system, which they weren't."
crypto,2sbk0a,cunttard,2,Wed Jan 14 00:03:08 2015 UTC,"It could be very inconvenient for all the servers to share a common access to a database they can look up the random session.  Maybe the server doing the verification is in Brisbane, AU and the server generating the token is in New York...  Maybe they are owned by different companies.  It's easy however to agree to a random 128-bit number once in a while and just use that as key for an HMAC."
crypto,2sbk0a,rya_nc,2,Wed Jan 14 03:49:15 2015 UTC,"Because otherwise your encryption is malleable. An attacker could forge (or modify) an ciphertext on the wire to elicit information from the receiver in unexpected ways. Similarly that's what is being discussed in that context re: error messages. Authentication is an additional layer of protection and if you're doing confidentiality -- you almost always want authentication, hence MACs. Similarly, a recipient of a ciphertext should always verify the authenticity of data before decryption (hence encrypt-then-MAC paradigm).  A more concise version of this can be found in Colin Percivals Everything you need to know about cryptography in 1 hr slides."
crypto,2sbk0a,poopinspace,2,Tue Jan 13 21:16:53 2015 UTC,OP seems to be asking why the client doesn't have/can't get the MAC key.
crypto,2s76md,gizzgizzle,102,Mon Jan 12 20:09:11 2015 UTC,"He said: “In our country, do we want to allow a means of communication between people which […] we cannot read?”   Yes."
crypto,2s76md,funky_vodka,22,Mon Jan 12 20:58:14 2015 UTC,"Simply put, ""People of the United Kingdom, what are you trying to hide?"""
crypto,2s76md,Katana__,3,Mon Jan 12 23:10:47 2015 UTC,"""Do I want the government reading my email?""  Ahhh, well, ummm, no."
crypto,2s76md,ivosaurus,61,Tue Jan 13 14:48:19 2015 UTC,Oh now this is fantastic: https://twitter.com/FishermansEnemy/status/554746303629246465
crypto,2s76md,gsuberland,5,Mon Jan 12 21:07:50 2015 UTC,They even use DHE. Brilliant
crypto,2s76md,TheTerrasque,57,Tue Jan 13 10:54:43 2015 UTC,"The Prime Minister said today that he would stop the use of methods of communication that cannot be read by the security services even if they have a warrant. But that could include popular chat and social apps that encrypt their data, such as WhatsApp.   ... not to mention any HTTPS connection that uses ephemeral DH key exchange.  Yet another case of legislation being out of touch with the technology."
crypto,2s76md,gsuberland,3,Mon Jan 12 20:58:14 2015 UTC,"MITM still works if you use ephemeral keys, and I think there was evidence that this is being done on massive scales."
crypto,2s76md,Remco_,5,Tue Jan 13 06:41:11 2015 UTC,"Only if you have a valid certificate for the DNS entity you're trying to impersonate, or a TLS/OpenSSL zero-day."
crypto,2s76md,stouset,5,Tue Jan 13 07:24:10 2015 UTC,"Okay, here come the sources!  It is almost trivial for agencies anyone to obtain certificates for any domain name they would like. (see for example Packet Forensics or Blue Coat ). Schneier writes about this being used by agencies in practice. If you are paranoid concerned you can somewhat protect against this with DNSSEC (server + client side) or certificate pinnging (client side, something like Certificate Patrol).   Agencies can also obtain the actual private keys as used by the services themselves. This is almost impossible to detect for the client. Some changes in latency maybe, if anything. Just read about the fate of LavaBit and CryptoSeal and then think about all those that did not have the moral spine to pull the plug and call the media instead of selling out."
crypto,2s76md,Remco_,2,Tue Jan 13 09:48:57 2015 UTC,"I don't disagree with any of that, but I do think it's uncommon for a government agency to MITM TLS connections.  In the case of a compromised CA (allowing them to  mint certs for any domain) the cost of discovery is expensive: the entire CA is burned (c.f., DigiNotar). They're not going to use this tactic wholesale, as the risk of being caught carries too high a cost.  On the other hand, capturing certs for individual sites is necessarily more difficult because they must compromise every site they want to MITM. This is less expensive when they get caught, but way more expensive upfront.   Long story short, this sort of thing is only likely to happen against specific targets. Not for wholesale data collection."
crypto,2s76md,stouset,1 point,Tue Jan 13 17:01:23 2015 UTC,"Only if you have a valid private key for the DNS entity you're trying to impersonate   Or just a valid certificate, no?"
crypto,2s76md,Creshal,1 point,Tue Jan 13 07:50:02 2015 UTC,"A valid private key would be contained inside a valid certificate. So, technically, the valid private key would be the lesser requirement, and you can build a certificate around it."
crypto,2s76md,gsuberland,3,Tue Jan 13 08:12:18 2015 UTC,"That's not what they mean by ""valid"". A server certificate is ""valid"" if it:   Is within the prescribed validity period. Has the same Common Name as the host you're attempting to access. Is signed by a trusted signing certificate (Certificate Authority).   States can and have obtained signing keys for trusted CAs. Therefore, they can generate a new and valid certificate for ANY host. The client would not detect this attack unless he or she was keeping track of the certificate fingerprints in use (certificate pinning), or if the chain of trust had changed. Hint: Almost no one does this.  Since states have exceptional access to communication channels, they can use these certificates to perform a man-in-the-middle attack on the target without detection."
crypto,2s76md,aydiosmio,1 point,Tue Jan 13 12:13:31 2015 UTC,"Ah, yes, sorry, I was focusing too much on the strategy of replacing stuff on the wire rather than just fully impersonating the endpoint."
crypto,2s76md,gsuberland,1 point,Tue Jan 13 13:23:30 2015 UTC,"States can and have obtained signing keys for trusted CAs. Therefore, they can generate a new and valid certificate for ANY host. The client would not detect this attack unless he or she was keeping track of the certificate fingerprints in use (certificate pinning), or if the chain of trust had changed. Hint: Almost no one does this.   Now that Chrome and Firefox support HPKP, hopefully sites will start making use of it, so that it becomes much more difficult to perform such attacks. Also for Google and some other major sites they have had preloaded key pinning for some time now."
crypto,2s76md,stouset,1 point,Tue Jan 13 13:59:41 2015 UTC,"Yes, sorry, I should have said certificate."
crypto,2s76md,dioltas,28,Tue Jan 13 16:56:42 2015 UTC,"The government has gone from covertly spying on it's citizens to basically saying we're going to make it illegal for you to make it so we can't read your data.  How would it work with online banking? Will the government have copies of companies private keys. HTTPS in general.   I don't think they've thought this true. While I can see the motivation, especially in light of the recent terrorist attacks, you have to ask when we take away people's privacy, are the terrorists winning?"
crypto,2s76md,SuperConductiveRabbi,18,Mon Jan 12 21:16:44 2015 UTC,"The government has gone from opening a few letters and tapping a few phone lines with a court order to monitoring what every single citizen reads, sends, receives, purchases, sells, writes, IMs, and emails."
crypto,2s76md,dioltas,8,Mon Jan 12 21:23:58 2015 UTC,"It's a fairly impressive feat, from a purely technological point of view.  A lot of data to capture (potentially decrypt / decompile), process and store."
crypto,2s76md,SuperConductiveRabbi,8,Mon Jan 12 21:34:55 2015 UTC,Amazing what you can do with 75 billion dollars a year in US intelligence funding. You can even figure out how to recruit the best and the brightest young minds.
crypto,2s76md,dioltas,3,Mon Jan 12 21:56:52 2015 UTC,"Haha ya, that's a good point.   Plus your good buddies in the UK would contribute too.  Still would be a fairly exciting project to be working on I'd imagine, if you could get over the moral issues."
crypto,2s76md,Puidiov3,11,Mon Jan 12 22:00:24 2015 UTC,"Working on the opposite side, to make broad surveillance harder or impossible, makes for pretty exciting projects, too. Without having to get over any moral issues!"
crypto,2s76md,aydiosmio,1 point,Tue Jan 13 00:01:05 2015 UTC,The brightest know better than to believe the lie that they are defending their country against foreigners.
crypto,2s76md,Katana__,6,Tue Jan 13 12:18:38 2015 UTC,Use of Perfect Forward Secrecy would also have to be banned then.
crypto,2s76md,aydiosmio,26,Mon Jan 12 23:32:04 2015 UTC,"Ah, perfect timing! I just made this for another thread.  http://i.imgur.com/CrlWWZH.png"
crypto,2s76md,revisu,21,Tue Jan 13 00:16:56 2015 UTC,"I would love to see tech companies comply with this, just to see it blow up in Cameron's face. ""Apple will no longer be offering its iMessage or FaceTime services to residents of the UK. We refuse to weaken the privacy of our customers worldwide due to an ill-thought-out law in one country. Please direct all complaints to the Prime Minister's office."""
crypto,2s76md,sleepyxuras91,5,Tue Jan 13 00:09:11 2015 UTC,Shame for all them iPads they just brought the NHS!
crypto,2s76md,Ar-Curunir,33,Tue Jan 13 05:41:58 2015 UTC,Jesus Christ Orwell's own homeland is becomng exactly what he wrote about.  Politicians are frighteningly stupid.
crypto,2s76md,na85,13,Mon Jan 12 21:14:23 2015 UTC,Why are Brits so complacent?
crypto,2s76md,qoobrix,24,Mon Jan 12 21:14:58 2015 UTC,It's already bad as-is; GCHQ is the NSA's crazier older brother. And their freedom-of-speech protection is so much worse than the U.S.  Doesn't help at all either that the U.K. doesn't have one constitutional document to enshrine some basic principles in.
crypto,2s76md,crackshot87,14,Mon Jan 12 23:11:30 2015 UTC,"Doesn't help at all either that the U.K. doesn't have one constitutional document to enshrine some basic principles in either.   Pretty much this, there's no one single set of rules that have been set (like a constitution). It's all vaguely based off the magna carta."
crypto,2s76md,Radeh,9,Tue Jan 13 01:04:44 2015 UTC,"Beer...lots and lots of beer. Also, not seeing the sun for weeks destroys brain cells."
crypto,2s76md,gsuberland,2,Mon Jan 12 21:16:22 2015 UTC,"Also Big Brother, TOWIE, Coronation Street, and The Daily Mail."
crypto,2s76md,Chizbang,1 point,Tue Jan 13 11:27:35 2015 UTC,"No idea, but it's a massive car crash waiting to happen. It's a shame that not many people in the UK care... Especially seeing as this could genuinely end up being a problem"
crypto,2s76md,Katana__,0,Tue Jan 13 12:19:25 2015 UTC,Fluoride in the water? /s
crypto,2s76md,FermiAnyon,4,Tue Jan 13 14:03:12 2015 UTC,They aren't stupid - they're brilliant...and patient.  There's no way that the backslide into fascism is unintended.
crypto,2s76md,souldust,10,Mon Jan 12 23:11:55 2015 UTC,"Doesn't that mean companies can't have meetings on secure phone-in services anymore?  Doesn't that mean the PM can't talk to foreign leaders on secure channels?  I'm sure there will be exceptions for everyone except shitty old taxpayers.  Then try setting up a system where you have a gateway box that does the encrypting to get around a rule of that nature and you'll quickly find that shitty old taxpayers aren't allowed to play the sorts of word games that governments and corporations are.  Sucks not having any money, doesn't it..."
crypto,2s76md,acaban,8,Tue Jan 13 01:45:12 2015 UTC,Every thief's wet dream.
crypto,2s76md,gsuberland,9,Tue Jan 13 03:22:45 2015 UTC,David Cameron is a Twat.
crypto,2s76md,Chizbang,4,Mon Jan 12 22:56:26 2015 UTC,"I think the appropriate term is ""sycophantic spunkbucket""."
crypto,2s76md,_njd_,1 point,Tue Jan 13 00:08:52 2015 UTC,Indubitably
crypto,2s76md,samsonx,2,Tue Jan 13 11:29:23 2015 UTC,I'm glad you left that in plaintext so our government can read it.
crypto,2s76md,funk_monk,1 point,Tue Jan 13 12:16:19 2015 UTC,To be fair to him he's probably just reading from a script written by a moron from GCHQ.  I expect David Cameron will know almost nothing about cryptography.
crypto,2s76md,FoxRaptix,6,Tue Jan 13 23:27:31 2015 UTC,"""We have already legislated in this parliament to safeguard this vital data because it was under threat from a particular European directive""   That was the Data Retention Directive. Who came to this conclusion? The European Court of Justice. Why? They concluded it was incompatible with human rights.  I wish he'd just say exactly what happened and why rather than trying to put spin on it. Then again, he's a politician so it's hardly surprising."
crypto,2s76md,LovelyDay,10,Wed Jan 14 00:06:12 2015 UTC,At this point he's basically openly admitting citizens are just in the way and your rights are an inconvenience
crypto,2s76md,TorontosaurusHex,5,Tue Jan 13 00:03:53 2015 UTC,"In our country, do we want to allow food in the homes of people which we cannot eat?"
crypto,2s76md,pepricore,5,Mon Jan 12 21:47:01 2015 UTC,"Although the article doesn't mention it, this idiotic push came after Charlie Hebdo attacks.  The tragedy there is that state (French) secret service already knew of the radicalized past of the two primary terrorists. It wasn't the case of finding the info by snooping, it was the case of already having info and failing to act on it.   None of this requires even more power. You had all the tools, you fools, and you still failed.  Another, related issued: decrypt the whole country? And who's actually going to process that data? Word is already that NSA data is just sitting there unprocessed in real time. So you won't be protected from big, bad terrorists -- but hey, if we need to frame you for anything, we can just take our time and go through your data stream for the last X years and construct any case against you.  Pure police state, pure idiocy."
crypto,2s76md,redog,1 point,Mon Jan 12 23:31:21 2015 UTC,Well mister Cameron wouldn't go for such drastic measures if he wasn't loosing control.  My guess is that that this a last ditch effort to halt a movement to address the rapidly growing wealth gap in Britain.  Color me a cynic but protecting common citizens from sporadic fundamentalist violence seems unlikely. Nobody that is cut throat enough to make it in the political arena is capable of such empathy.  I could imagine that the spy-machinery is being used to interfere with growing attempts to politicize inequality.  You don't need a police state in a country where the people are content with their lives.
crypto,2s76md,TheSoberRussian,6,Tue Jan 13 15:27:19 2015 UTC,The Prime Minister said today that he would stop the use of methods of communication that cannot be read by the security services even if they have a warrant.    He's gunna cut out the vocal chords?
crypto,2s76md,dgreentheawesome,2,Wed Jan 14 13:24:35 2015 UTC,"Will this actually happen? I'm not familiar with UK politics? How is the chance of Cameron being re-elected? Also, how could he effectively enforce this?"
crypto,2s76md,Chizbang,2,Tue Jan 13 15:43:54 2015 UTC,"Also, would this set a precedent for the US to try this? Would this violate the US constitution?"
crypto,2s76md,Chizbang,2,Tue Jan 13 04:19:02 2015 UTC,"I don't think they could get away with it in the states due to the amount of retaliation the US citizens would put up. In the UK, it's fairly easy to get away with this stuff because it seems the British don't really care. This is a one sided opinion though."
crypto,2s76md,blueskin,1 point,Tue Jan 13 04:29:34 2015 UTC,"Re elected? Extremely unlikely, Labour are more likely to win this year. (Although they're not much better)  Would he follow up with it if he got in? For sure. David Cameron hates freedom of speech and loves surveillance."
crypto,2s76md,Chizbang,1 point,Tue Jan 13 12:15:08 2015 UTC,"Most polls put the most likely result at another coalition government led by the conservatives and probably including UKIP, actually."
crypto,2s76md,somnicule,1 point,Tue Jan 13 12:11:35 2015 UTC,"Wow, really? Can I have source please? I thought Labour were in the lead."
crypto,2s76md,Afro_Samurai,2,Tue Jan 13 17:11:27 2015 UTC,Steganography might actually become more and more useful.
crypto,2s76md,Katana__,3,Tue Jan 13 21:21:20 2015 UTC,Does the UK have import/export restrictions on (implementations of) existing crypto systems like PGP ?
crypto,2s76md,PinguRambo,9,Tue Jan 13 06:01:33 2015 UTC,"Not exactly. You can be ordered by a court to provide encryption keys/passwords/etc. however, which makes such controls pointless."
crypto,2s76md,msthe_student,2,Mon Jan 12 22:48:15 2015 UTC,What about no?
crypto,2s76md,pepricore,2,Mon Jan 12 22:54:40 2015 UTC,"Here's how you solve this problem.  Crypto is a necessary agent for a free society right?  So is public education (and some might argue health care).  So to combat ""aiding the enemy"" we should propose banning public education."
crypto,2s76md,vacuu,2,Tue Jan 13 09:12:03 2015 UTC,"Idea: Before sending data over the internet, For each byte of data in a make a lookup in an array of politicians, replace byte of data with surname of politican, now Cameron can read it, but not make sense of it. So it'd be for example file->HTTP->TLS->poliLookup->TCP->IP. Use the letter of stupidity not the meaning."
crypto,2s76md,delta301,2,Tue Jan 13 12:15:08 2015 UTC,"So every app that isn't banned in the UK has a backdoor.  A backdoor is basically just a security hole that eventually every wannabe ""h@ck0r"" is going to use to jerk you around.    Security flaws in your software is a bit like running around naked public, go ask the hunger-games lady, she can attest to that.  Anyway banning secure software essentially makes protecting your privacy allot easier, ""they"" are basically saying us what software is secure.  If the 4 letter agency in the uk can't crack it, it most definitely is good enough to halt the perverts.  messenger banned in the UK = security badge."
crypto,2s76md,FrigoCoder,1 point,Tue Jan 13 16:59:48 2015 UTC,I don't even know what to say anymore.
crypto,2s76md,hackingdreams,1 point,Wed Jan 14 13:00:17 2015 UTC,"Don't worry guys, he's got about six months before his ass is kicked out to the fucking sun."
crypto,2s6pit,pulsetsar,3,Mon Jan 12 18:00:02 2015 UTC,No due to sibyl attacks.  They can spin up infinite identities.
crypto,2s6pit,d-X-X-b,1 point,Mon Jan 12 20:48:05 2015 UTC,"That depends on how the implementation is carried out.  For example:   User installs iVote app, punching in their name, address, etc. iVote generates the public/private key pair, connects to the central iVoteServer (TLS tunnel obviously) and sends the iVote public key along with the voters' name/addres/voter ID number signed with the private key Board of Elections validates that the voter registration is correct, and grants that voters' wallet 1 VoteCoin, then deletes the users' public key (so they can't know which key is tied to which voter, but can prevent one person from registering more than once).  Some additional things like issuing VoteCoins in batches would likely be needed to prevent timing attacks leaking information. On Election Day, user uses iVote to send their VoteCoin to the wallet of the candidate of their choice.  Candidates' wallet with the most coins wins.   Since spammers wouldn't have any VoteCoins, you couldn't trivially carry out a Sybil attack."
crypto,2s6pit,thatmorrowguy,1 point,Mon Jan 12 22:56:02 2015 UTC,"Board of elections is corrupt, anything with the state is a lost cause. They will invent people or change votes outright. I have little hope for anything like this working in a fully transparent and untamperable way. Think about it. The powers that  be really would not like that. David Cameron just outlawed end to end encryption. You think they want this?"
crypto,2s6pit,d-X-X-b,1 point,Mon Jan 12 23:42:04 2015 UTC,"http://roamingaroundatrandom.wordpress.com/2014/06/16/an-mpc-based-privacy-preserving-flexible-cryptographic-voting-scheme/  Can you find enough independent entities which can cooperate on verifying voter lists, etc?"
crypto,2s6pit,Natanael_L,0,Tue Jan 13 23:16:10 2015 UTC,"even if there was a cryptographic way to enforce democracy, would it be just? i'm a voluntaryist."
crypto,2s6pit,d-X-X-b,1 point,Wed Jan 14 05:06:27 2015 UTC,This can be used in voluntary cooperatives.
crypto,2s6pit,Natanael_L,0,Wed Jan 14 09:03:01 2015 UTC,"Sybil attack:       The Sybil attack in computer security is an attack wherein a reputation system is subverted by forging identities in peer-to-peer networks. It is named after the subject of the book Sybil, a case study of a woman diagnosed with dissociative identity disorder.  The name was suggested in or before 2002 by Brian Zill at Microsoft Research.  The term ""pseudospoofing"" had previously been coined by L. Detweiler on the Cypherpunks mailing list and used in the literature on peer-to-peer systems for the same class of attacks prior to 2002, but this term did not gain as much influence as ""Sybil attack"".      Interesting: Lizard Squad | Spamdexing | Vanish (computer science)   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2s6pit,autowikibot,2,Mon Jan 12 20:48:40 2015 UTC,Cross-posted from r/technology.
crypto,2s6pit,thepwnguin,2,Mon Jan 12 18:00:57 2015 UTC,"It can enable democracy. It can't save a concept that has been corrupted from the start. (I.e., representative democracy.)"
crypto,2s6pit,onetruepotato,1 point,Mon Jan 12 20:04:52 2015 UTC,what's a form of democracy that isn't corrupted?
crypto,2s6pit,na85,1 point,Mon Jan 12 21:02:26 2015 UTC,"""Secure online voting"" is a fucking oxymoron.  I don't want the NSA to be able to influence elections in my country without leaving the comfort of their offices.  Some things are best done the old-fashioned way."
crypto,2s6pit,thepwnguin,1 point,Mon Jan 12 20:02:55 2015 UTC,"You know what else is an oxymoron? ""Representative democracy""."
crypto,2s6pit,na85,2,Mon Jan 12 20:06:00 2015 UTC,"Oh, I'm sorry, did you see me commenting on the system of government?  No, I don't think you did.  I think what you saw was me commenting on electronic polling methods and how they are easily abused by an advanced persistent threat.  When it comes to something as serious as elections I would have thought a user this supposedly-enlighted subreddit wouldn't be such a fucking fanboy.  What is it with people that they think bitcoin solves every fucking problem these days?"
crypto,2s6pit,Natanael_L,2,Mon Jan 12 20:28:43 2015 UTC,When you have a hammer...   (can't say I'm completely innocent from that either.)
crypto,2s6pit,autowikibot,1 point,Tue Jan 13 23:18:14 2015 UTC,"Electoral college:       An electoral college is a set of electors who are selected to elect a candidate to a particular office. Often these represent different organizations or entities, with each organization or entity represented by a particular number of electors or with votes weighted in a particular way. Many times, though, the electors are simply important people whose wisdom would ideally provide a better choice than a larger body. The system can ignore the wishes of a general membership.    Image i - Presidential Election Votes by State, 2012     Interesting: Electoral College (Pakistan) | German-speaking electoral college | French-speaking electoral college | European Parliament election, 1994 (Belgium)   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2s6pit,onetruepotato,0,Mon Jan 12 20:06:36 2015 UTC,why did you even bother linking to a wikipedia article
crypto,2s6pit,thepwnguin,1 point,Mon Jan 12 21:01:33 2015 UTC,why did you even bother linking to a wikipedia article   Why not? People might be curious about reading up on the electoral college.
crypto,2s6pit,onetruepotato,1 point,Mon Jan 12 21:09:59 2015 UTC,"give some context to the link, it takes less time for someone to decipher what you're trying to say by linking to an article, and makes your point stronger."
crypto,2s6pit,agelastic,1 point,Mon Jan 12 21:49:51 2015 UTC,http://en.m.wikipedia.org/wiki/Betteridge%27s_law_of_headlines
crypto,2s6pit,autowikibot,1 point,Tue Jan 13 02:34:52 2015 UTC,"Betteridge's law of headlines:       Betteridge's law of headlines is an adage that states: ""Any headline which ends in a question mark can be answered by the word no."" It is named after Ian Betteridge, a British technology journalist,  although the general concept is much older.  The observation has also been called ""Davis' law""   or just the ""journalistic principle"".  In the field of particle physics, the concept, referring to the titles of research papers, has been referred to as Hinchliffe's Rule  since before 1988.      Interesting: Sensationalism | Rhetorical question | List of eponymous laws   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2s6pit,Herculius,0,Tue Jan 13 02:35:16 2015 UTC,"Bit oil will never be a major currency and here's why: inflation. After all the coins are mined, there is no room of monetary expansion, prices would go through the absolute roof as populations grow. Less money per person is not a good strategy."
crypto,2s6pit,I-o-o-I,5,Mon Jan 12 18:09:09 2015 UTC,"Bit 'Oil'? huh?  The concept your describing is deflation, not inflation. And there is no clear empirical evidence that a deflationary currency couldn't flourish. There is also no clear cut principle that says it couldn't flourish. It's never been attempted... for multiple reasons, the major reason being that it is against the interests of a government that wishes to more spend money than it has."
crypto,2s6pit,thatmorrowguy,0,Mon Jan 12 20:24:54 2015 UTC,"My understanding is that it's not enough to for someone to be able to vote privately and verify that their vote went to the right person. You also need to make it so that the voter can not sell their vote. So somehow they can verify that their vote went to the right politician, but they cannot prove to that politician that they voted for them.  I skimmed through some of that article, but that problem doesn't seem to be addressed with bitcoin."
crypto,2s6pit,Natanael_L,3,Mon Jan 12 20:51:46 2015 UTC,"The article did discuss that:   One way to split this Gordian Knot is to allow people to check their votes, but only if those votes are then immediately invalidated. In such a scenario, you would have to sacrifice a few votes to ensure the security of them all. For example, an online voting system could send each voter a message after submitting their ballot that picked out one race or ballot measure and asked if the vote that was ultimately recorded matched their intended selection. - See more at: http://kernelmag.dailydot.com/issue-sections/staff-editorials/11334/bitcoin-online-voting-issues/#sthash.5Eax8PEm.dpuf   Regardless, that doesn't help if you allow smart-phone or PC based voting.  In one vote buying scheme, you just make it known that if you come and vote in front of me to prove you voted for my candidate, I'll give you $20.  That's why currently, you have to go into a booth privately so nobody else can see who you voted for."
crypto,2s6pit,onetruepotato,2,Mon Jan 12 21:27:09 2015 UTC,"http://roamingaroundatrandom.wordpress.com/2014/06/16/an-mpc-based-privacy-preserving-flexible-cryptographic-voting-scheme/  You verify that your vote has been counted with nonces. There's other ways too, but this was the first one I thought of."
crypto,2s405c,Tetraheathen,14,Mon Jan 12 00:09:21 2015 UTC,Fly the free speech flag for illegal numbers!
crypto,2s405c,DoWhile,3,Mon Jan 12 06:08:49 2015 UTC,"I was expecting a diagram of a block cipher, but cool nonetheless."
crypto,2s405c,Natanael_L,1 point,Mon Jan 12 04:47:49 2015 UTC,"Or RC4 (not that it is particularly strong anymore, but it is small and the symbolism is strong)."
crypto,2s405c,TiltedPlacitan,3,Mon Jan 12 05:16:02 2015 UTC,I've been sporting a license plate holder since the 90's crypto wars that reads:  SOURCE CODE IS FREE SPEECH  Cheers!
crypto,2s405c,aydiosmio,2,Mon Jan 12 17:16:23 2015 UTC,Crypto Wars should have been the title of The Imitation Game.  Then they should have let Michael Bay direct it.
crypto,2s405c,aydiosmio,3,Mon Jan 12 22:03:22 2015 UTC,Here's mine.  http://i.imgur.com/CrlWWZH.png  How many here were around in the late 90s when the Internet was battling the government for use of 128-bit ciphers? I'm hoping we don't need to take up that fight again.
crypto,2s405c,pittsburghzombie,4,Mon Jan 12 21:57:23 2015 UTC,May be a stupid question. Relatively new to the sub. Is there any kind of cryptography that actually is a crime?  Can the government compel you to decrypt systems with or without a warrant?
crypto,2s405c,funk_monk,8,Mon Jan 12 07:21:34 2015 UTC,It depends where you live.
crypto,2s405c,psonik,4,Mon Jan 12 07:59:42 2015 UTC,"Yeah, like if you live in the United States it's technically illegal to allow international access to a VPN, SSH service, or site over HTTPS.  Luckily those laws became unenforceable decades ago. But the government is still trying to make some forms of crypto illegal- consumer mobile device storage encryption, for example."
crypto,2s405c,aydiosmio,1 point,Mon Jan 12 17:05:03 2015 UTC,How so? I have not seen these efforts yet by legislators. Just some whiny FBI officials.
crypto,2s405c,Brianwilsonsbeard1,6,Mon Jan 12 21:59:52 2015 UTC,Look up lavabit. Basically lavabit was an email service that provided end to end encryption for people. The government issued a subpoena for the guy in charge to hand over the encryption keys to his service. In response he shut down the service and turned off his servers so the government couldn't use them.
crypto,2s405c,aydiosmio,2,Mon Jan 12 08:02:49 2015 UTC,These are National Security Letters.  https://www.epic.org/privacy/nsl/
crypto,2s405c,autowikibot,1 point,Mon Jan 12 22:01:10 2015 UTC,"National security letter:       A national security letter (NSL) is an administrative subpoena issued by the Federal Bureau of Investigation (FBI) in authorized national security investigations ""to protect against international terrorism or clandestine intelligence activities"" (i.e., spying).  The Stored Communications Act (18 U.S.C. § 2709), Fair Credit Reporting Act (15 U.S.C. §§ 1681u–1681v), and Right to Financial Privacy Act (12 U.S.C. § 3414), authorize the FBI to seek such information that is ""relevant"" to an authorized national security investigation. By law, NSLs can request only non-content information, for example, transactional records and phone numbers dialed.  NSLs may contain a nondisclosure provision—preventing the recipient of an NSL from disclosing that the FBI had requested the information—only if the Director of the FBI (or his designee) authorizes the nondisclosure requirement. The Director may authorize a nondisclosure requirement only after certifying ""that otherwise there may result a danger to the national security of the United States, interference with a criminal, counterterrorism, or counterintelligence investigation, interference with diplomatic relations, or danger to the life or physical safety of any person.""  Even then, the recipient of the NSL can still challenge the nondisclosure requirement in federal court.  The nondisclosure requirement was initially ruled to be unconstitutional as an infringement of free speech in the Doe v. Gonzales case, but that decision was later overturned in 2008 by the Second Circuit Court of Appeals after it held the USA PATRIOT Improvement and Reauthorization Act gave the recipient of an NSL that included a nondisclosure provision the right to challenge the nondisclosure requirement in federal court. In March 2013, district court judge Susan Illston of Federal District Court in San Francisco struck down the law authorizing the FBI to issue NSLs, writing that the prohibition on disclosure of receipt of an NSL made the entire statute ""impermissibly overbroad"" under the First Amendment. Judge Illston then stayed her ruling to allow the United States Department of Justice to appeal the decision to the United States Court of Appeals for Ninth Circuit.      Image from article i     Interesting: Susan Illston | Internet Archive | Nicholas Merrill   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2s405c,aydiosmio,7,Mon Jan 12 22:01:34 2015 UTC,"Some cryptography is considered munitions and is banned for export under certain circumstances. In the US, from WWII until 1992, all cryptography was banned from export. There was a brief period where the Internet began to make the distribution of cryptographic technologies inevitable, and in 2000, many of the remaining restrictions on ""strong"" cryptography were eliminated.  Some restrictions still exist, but they are mostly targeted toward hostile nations.  http://en.wikipedia.org/wiki/Export_of_cryptography_from_the_United_States  In the US, the 5th amendment does well to protect citizens against forcible decryption, however it does not always apply. And as well, the 4th amendment protects you generally for warrantless searches, which include personal data.  https://www.eff.org/deeplinks/2013/10/new-eff-amicus-brief-argues-fifth-amendment-prohibits-compelled-decryption  And in places where similar protections do not exist, or don't exist for decryption keys, like in the UK, the accused are being coerced into providing decryption keys.   https://www.techdirt.com/articles/20140116/09195525902/uk-man-jailed-not-giving-police-thumbstick-password.shtml"
crypto,2s405c,autowikibot,0,Mon Jan 12 08:02:30 2015 UTC,"Export of cryptography from the United States:       The export of cryptography from the United States is the transfer from the United States to another country of devices and technology related to cryptography. Very strict export restriction has existed until 1992, and was gradually eased until 2000; some restrictions still remain.  Since World War II, many governments, including the U.S. and its NATO allies, have regulated the export of cryptography for national security considerations, and, as late as 1992, cryptography was on the U.S. Munitions List as an Auxiliary Military Technology.   In light of the enormous impact of cryptanalysis in World War II, it was abundantly clear to these governments that denying current and potential enemies access to cryptographic systems looked to be militarily valuable. They also wished to monitor the diplomatic communications of other nations, including the many new nations that were emerging in the post-colonial period and whose position on Cold War issues was regarded as vital.     Image i - Export-restricted RSA encryption source code printed on a t-shirt made the t-shirt an export-restricted munition, as a freedom of speech protest against US encryption export restrictions (Back side). Changes in the export law means that it is no longer illegal to export this t-shirt from the US, or for US citizens to show it to foreigners.     Interesting: Bernstein v. United States | Privacy software | Crypto wars | Transport Layer Security   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2s405c,aydiosmio,1 point,Mon Jan 12 08:02:41 2015 UTC,Hopefully I won't have to have one of these any time soon.
crypto,2s405c,crow1170,2,Mon Jan 12 08:04:45 2015 UTC,Where are you that you don't need one now?
crypto,2s405c,aydiosmio,0,Mon Jan 12 18:41:06 2015 UTC,"The US. I'm not sure what crimes the bumper sticker refers to I guess.   There's currently no laws regarding cryptography for personal use.  Someone refers to ""illegal numbers"" but this applies mostly to circumvention of copyright protection mechanisms, which isn't a case of math being a crime, but distributing keys and code to break specific implementations of cryptography.  Seems more sensible to fight for the right to reverse engineer for compatibility against the DMCA."
crypto,2s405c,crow1170,2,Mon Jan 12 20:00:18 2015 UTC,"""X is not a crime "" never refers to a crime, but rather the association to crime. Example, ""Skateboarding is not a crime"" used in response to harassing skateboarders for other crimes- loitering, disturbing the peace, etc- that they would not be harassed about if they were not skateboarding. Tor nodes, torrent seeds, DVD ripping programs are not criminal, but are investigated, presumed, and casually blocked as if they were criminal."
crypto,2s405c,aydiosmio,1 point,Mon Jan 12 20:18:07 2015 UTC,"None of the technologies that construct these services are threatened by legislation or law enforcement action. The bumper sticker just doesn't reflect the sentiment you suggest. ""Math is not a crime"" with the accompanying graphic says to me that cryptography is being threatened (which may be a reality we in the US may have to deal with eventually).   It just seems like a poorly thought out idea.  Your points:  I help run an IRC network. We blocked TOR because a massive wave of abuse over the years. I also block TOR senders with an RBL for e-mail servers. TOR is an anonymization tool. So, just like VPNs and proxies, can be investigated as part of a criminal case. But this only happens if criminality is suspected. It is not justification or primary evidence of a crime.  (Some) DVD ripping programs circumvent copyright protection mechanisms, which are not legal under the DMCA. So you're not correct about those programs designed to rip copy-protected discs being legal (in the US).  Torrents are not generally threatened. Copyright holders identify their materials being distributed online and send DMCA notices to the ISPs which forward them to their customers. Torrents are sometimes blocked by company policy for employees, perhaps unjustly, to curb illegal downloads. This negatively impacts legitimate torrent downloads, such as ISOs. Torrents had sometimes been throttled by ISPs, but it's my understanding that this practice has been curbed and is extremely rare."
crypto,2s405c,crow1170,3,Mon Jan 12 20:33:42 2015 UTC,"You seem to be really committed to the idea that the sticker is about the threat of legal action. It's not. If it were, it would say ""X should not be a crime"".  The sticker is an effort to inform the general public, not compel legislators.  People think that because there may be overlap between X and crime, people who use X should be regarded as criminals- the university WiFi should block torrents or bitcoin must only be for drugs, etc.  The sticker argues that people who use x should not be treated like criminals unless they are shown to be committing a crime. Encrypting your hard drive should not make your neighbor suspicious, copying a DVD should not be made difficult, because these things aren't crimes."
crypto,2s405c,aydiosmio,1 point,Mon Jan 12 20:53:19 2015 UTC,"If we're informing the general public, then I see the message being something more like this:  http://i.imgur.com/CrlWWZH.png"
crypto,2s405c,aydiosmio,0,Mon Jan 12 21:59:02 2015 UTC,"""Math should not be a crime."" and  ""Math is not a crime."" are semantically similar. They both imply there is a threat of legal action.  So, to your other point, the sticker does not inform those who are not already aware of the issues. You have to know that cryptography is math, and that the word ""cipher"" is synonymous with ""encryption"", the term regular Joes associate with cryptography. It doesn't explain a problem or speak to current events. You're applying meaning above the information presented because you're literate in the subject.  This bumper sticker only speaks to the crypto-literate among us who are already aware of the current state of affairs. Whatever the purpose of this sticker, it's not met by its design."
crypto,2s405c,crow1170,1 point,Mon Jan 12 21:34:29 2015 UTC,"I think it meets its design goal, but it's okay if we disagree. After all, disagreeing is not a crime ;)"
crypto,2s405c,T3ppic,1 point,Mon Jan 12 22:09:45 2015 UTC,Rest of the world; Maths.
crypto,2s405c,ahazred8vt,0,Mon Jan 12 17:42:54 2015 UTC,levity http://www.commitstrip.com/en/page/474/
crypto,2s8x7z,coordpuzzle,1 point,Tue Jan 13 04:31:47 2015 UTC,"This looks like it belongs to r/codes, not here."
crypto,2s8x7z,Dillinur,1 point,Wed Jan 14 13:41:01 2015 UTC,"For the final version of the code, it might be worth considering making limitations to prevent impossible positions (such as the white bishop behind the pawn in the corner) things like that are dead giveaways that something is not as it seems."
crypto,2s696o,diafygi,1 point,Mon Jan 12 15:51:14 2015 UTC,Have you considered trying to mitigate any kind of key id spoofing?
crypto,2s696o,rya_nc,1 point,Tue Jan 13 21:23:32 2015 UTC,check out keybase - you can search people using their regular name just like facebook or another social network
crypto,2s4p1g,gpennell,2,Mon Jan 12 03:55:56 2015 UTC,"One resource that I've heard pretty great things about is the matasano crypto challenges. It's a series of crypto/programming problems that don't require TOO much math, and should hopefully teach you a little bit both about the crypto and the tools that implement it."
crypto,2s4p1g,ramslot,1 point,Mon Jan 12 04:51:33 2015 UTC,"In a very similar vein, here's a list of cryptographic problems one can go through."
crypto,2s4p1g,silverforest,1 point,Mon Jan 12 23:29:53 2015 UTC,"First, check the sidebar. The thread on ""getting started in crypto"" is good.  http://www.theamazingking.com/crypto.php https://news.ycombinator.com/item?id=7795564  As far as math goes, you want a good grounding in Linear Algebra (vector spaces and associated concepts are used a lot), and you really need to get the hang of finite fields. You'll also want to at least be comfortable with the notations used for abstract algebra, set theory, computational complexity theory, and probability theory."
crypto,2s4p1g,SAI_Peregrinus,1 point,Mon Jan 12 06:14:25 2015 UTC,Bruce Schneirer's Applied Cryptography.  It is still probably the best book for being introduced to the algorithms and math of cryptography.
crypto,2s4p1g,JoseJimeniz,1 point,Mon Jan 12 12:48:52 2015 UTC,"Introduction to Cryptography by Dan Boneh, Professor of Computer Science  https://class.coursera.org/crypto-preview/lecture"
crypto,2s1tk5,prapap,3,Sun Jan 11 10:14:29 2015 UTC,"So, what's the alternative? I want a secure service that should be able to send messages from a Windows desktop to Android device."
crypto,2s1tk5,castort,13,Sun Jan 11 13:26:26 2015 UTC,"XMPP+otr is probably the best alternative in that scenario. For Windows, you have Pidgin plus the otr plugin for example, and for Android you have Xabber or ChatSecure which both have otr support."
crypto,2s1tk5,mfwifarted,6,Sun Jan 11 13:36:49 2015 UTC,"OTR, the algorithm, has been vetted in general, but do you know of any audits of the pidgin+OTR implementation?"
crypto,2s1tk5,mnp,4,Sun Jan 11 14:53:12 2015 UTC,"I do not know of any formal security audit of the pidgin-otr plugin.   What I do know that the Tor Project considered including Pidgin+otr in their Tor Browser Bundle, and Jacob Appelbaum claims to have audited libotr and pidgin-otr, fixing multiple vulnerabilities.  They seem to have switched to instantbird though, with the requirement to drop libpurple as a dependency (which seems to be the source of most of the security holes in Pidgin)."
crypto,2s1tk5,mfwifarted,5,Sun Jan 11 17:15:34 2015 UTC,Try anything that supports off the record (OTR). You can use pidgin on Windows using an xmpp service like dukgo
crypto,2s1tk5,deusex373,3,Sun Jan 11 13:38:04 2015 UTC,"Just making sure I understand, what the attack does is checks for values of m1 and m2 such that the two final secret keys will have the same hash, meaning even if the users compare in person the images will be the same?"
crypto,2s1tk5,velocirhymer,2,Sun Jan 11 21:00:47 2015 UTC,"Yes. Since it is truncated when used for authentication, they essentially bruteforce their way to a pair of hashes with the last bits matching. The users can not tell the difference given how the app works."
crypto,2s1tk5,Natanael_L,1 point,Mon Jan 12 05:27:47 2015 UTC,yes
crypto,2s1tk5,n3xg3n,6,Mon Jan 12 18:39:00 2015 UTC,2128 * 0.5 = 2127
crypto,2s1tk5,n3xg3n,2,Sun Jan 11 17:13:34 2015 UTC,"If the keyspace is 28 = 256, you're saying you can get a 50% chance of guessing a randomly chosen value in [0,256) with √28 = 24 = 16 guesses?  You're only guessing 1/16 of the keyspace (in this instance), how do you come to the conclusion that you have a 50% chance of guessing the correct value?"
crypto,2s1tk5,Natanael_L,1 point,Sun Jan 11 17:22:18 2015 UTC,Grover's algorithm on a quantum computer.  In approximately 50 years.
crypto,2s2l74,TheNotePro,3,Sun Jan 11 16:57:10 2015 UTC,I'm guessing BtSync doesn't notice the change. The container never changes size and perhaps mounting/unmounting doesn't change the timestamp ( last-modified-date ) of the container either.     How did you used to sync your truecrypt containers?  I ask this because AFAIK BtSync doesn't do Delta copying. ( It resyncs the entire file if a change is noticed ).
crypto,2s2l74,Robin_H,1 point,Sun Jan 11 20:51:59 2015 UTC,"Yes, I believe BtSync did resync the entire TC file if it noticed a change.  Somehow BtSync did notice the change (probably by timestamp), even though the size stayed the same.    We used the TC containers in this manner:  Example~ we had a container for Quikbooks backups.  Mount the file, plop the backup in with all the previous ones, unmount the file and syncing would promptly start.  Go to another machine, mount the file, and the lastest backup would in the container.   Been testing Veracrypt using the same scenario~  create a container, mount it, dump some stuff in it, unmount it, BtSync promptly wakes up, syncs it to all my other devices, mount it on another device . . . container is empty.    It syncs the container but not its contents."
crypto,2s2rdq,funkspiel56,1 point,Sun Jan 11 17:53:58 2015 UTC,"I think it's aes256 which is pretty secure if you chose a strong password. Make sure you're swap space is encrypted, it should be if your on ubuntu 9.10 or higher. You do full disk encryption if you want more security"
crypto,2s2rdq,cDoubt,1 point,Sun Jan 11 18:18:35 2015 UTC,how is the peformance difference for full disk encryption?
crypto,2s2rdq,m1000,2,Sun Jan 11 18:51:30 2015 UTC,Check if your CPU supports the AES instruction. Performance lost should be minimal I would think.
crypto,2s2rdq,gsuberland,2,Sun Jan 11 21:57:52 2015 UTC,"Almost unnoticeable.  On a mid-range CPU from the early 2000s you'd be likely to see something around 50-100MB/s throughput for encryption, which isn't bad considering that most consumer mechanical HDDs are barely pushing 140MB/s on sequential IO.  On anything modern with AES-NI support (Intel i3 and later) you're looking at 700MB/s or more, per thread, which is enough to keep up with even the fastest SSDs on SATA3. A top-end enterprise grade Xeon could blast its way through encrypting 8GB of data in under a second.  I have personally ran multiple layers of disk crypto (e.g. TC + BitLocker, or PGP FDE + LUKS) on modern laptops and servers with no noticeable hit. The old ""crypto is slow"" adage is largely a myth."
crypto,2s2rdq,mandalar,1 point,Mon Jan 12 11:53:10 2015 UTC,sweet - I should reinstall ubuntu  then use full disk encryption
crypto,2s2rdq,ackackacksyn,1 point,Mon Jan 12 13:17:05 2015 UTC,"It uses Luks/dm-crypt [1] which is the standard for encrypting partitions on linux (and encrypts swap too as noted /u/cDoubt). It should be very secure given that :   You use a strong password You protect your computer (ideally shutting it down when you're not using it)   Regarding the second point, keep in mind that this kind of encryption protects your data only when the computer is off ; the common use case thus is protection against theft.  More on https://help.ubuntu.com/community/EncryptedHome  [1] : https://wiki.archlinux.org/index.php/System_Encryption_with_LUKS  EDIT : as /u/phyzome noted, it might use ecryptfs and NOT Luks, but I'm not sure. If someone can investigate that would be interesting."
crypto,2s2rdq,phyzome,2,Sun Jan 11 18:27:21 2015 UTC,"ecryptfs   I think its this that leaks some of the file metadata such as size, modification times etc.  I would have through you would have been better using the full disk encryption ( provided by luks ) in combination with the this."
crypto,2s2rdq,mandalar,3,Mon Jan 12 11:40:45 2015 UTC,"I don't think Encrypted Home uses LUKS -- ecryptfs encrypts individual files and directories, right? LUKS/dm-crypt makes partition-level containers. Could be wrong, but that's my memory of ecryptfs."
crypto,2ry6np,conradsymes,8,Sat Jan 10 08:45:25 2015 UTC,"THOMAS PTACEK Like I’ve been saying, if you have to type the letters “A-E-S” into your source code, you’re doing it wrong.  NATE LAWSON Uh. Ok. Whatever you say, Tom.   Funny, Nate told me that himself actually. He's the one who told me to stick to TLS/GPG and keep crypto primitives out of code when it's not needed (almost always). Seems like that last bit of conversation is inverted."
crypto,2ry6np,d4rch0n,13,Sat Jan 10 10:54:56 2015 UTC,I had to stop at the CK intro.
crypto,2ry6np,exili,12,Sat Jan 10 10:09:21 2015 UTC,"The whole ""story"" could have been condensed to:   Use some sort of authentication (MAC or signature) when sending stuff over the net. Use constant-time (side-channel ""free"") crypto implementations.   Yet they make a screenplay out of it... geez"
crypto,2ry6np,unfo,1 point,Sun Jan 11 01:54:37 2015 UTC,at least for someone with relatively little crypto-fu I liked how they spelled everything out so I could follow the logic instead of just making statements that I would know the basis for.
crypto,2ry6np,boukeversteegh,3,Sun Jan 11 08:22:26 2015 UTC,"Cool, I learned something and was entertained"
crypto,2ry6np,p337,4,Sat Jan 10 12:38:57 2015 UTC,"I'm confused. So for the cookie example, it was sounding like using an HMAC was the way to go. But at the end, it sounds like I should use GPG since the cookie is ""at rest."" Could someone clarify for me?"
crypto,2ry6np,rya_nc,3,Sat Jan 10 14:03:02 2015 UTC,"It's a rule of thumb. In the case of cookies, GPG would be impractical.  HMAC-SHA256 would probably be okay, or HMAC-SHA256 with AES128-CBC (with random IVs) if you have any concern about the user being able to see the contents of their cookie - keys should be randomly generated.  I say CBC rather than CTR because if the ""with random IVs"" part isn't done right it's not quite as bad in CBC mode.  AES128-GCM might be better, but it's not a mode you can count on being available in a lib."
crypto,2ry6np,d4rch0n,4,Sat Jan 10 18:17:04 2015 UTC,"What could go wrong with the ""with random IVs"" part regarding CTR? Assuming you're not using a static IV.  Are you saying if the nonce isn't random enough there's an issue, or if you don't handle the counter right somehow?"
crypto,2ry6np,rya_nc,6,Sat Jan 10 23:21:19 2015 UTC,"DEV WHO DOESN'T KNOW CRYPTO: I need a ""random IV"" that's 128 bits? md5(mt_rand()) should work, right?  RYA_NC: If you do that, on average, it will only take about forty six thousand requests before the IV will repeat, at which point I get to learn a lot about the contents of the cookie.  DEV WHO DOESN'T KNOW CRYPTO: Well shit, that sounds bad."
crypto,2ry6np,d4rch0n,5,Sun Jan 11 00:01:19 2015 UTC,Heh... mt_rand is a favorite   Caution The distribution of mt_rand() return values is biased towards even numbers on 64-bit builds of PHP when max is beyond 232.   I posted that to /r/lolphp very recently.
crypto,2ry6np,p337,1 point,Sun Jan 11 01:22:10 2015 UTC,"Thanks for responding. Let's say the contents of the cookie are not secret. They are a username and list of roles. We just need to make sure no one (including the user) can alter the message and we want to know it came from our server. A cookie is fine since it is another server on our same domain.   So, based on what you said. I could use an hmac with sha-256 and skip the encryption. I understand that adding encryption  would not hurt, but it doesn't really do anything of value, unless I am mistaken.  I'm being pushed to use an ecryption algorithm on the cookie (whether it is AES, PGP, GPG, etc) and skip the hmac... because it is ""more secure"" and ""easier."" Do you know of a good source I could point another dev to to say, ""See, we should do this this way.""  This article is a little too... unprofessional, for lack of a better word."
crypto,2ry6np,rya_nc,2,Sat Jan 10 20:56:13 2015 UTC,"I can say that I've personally broken a bunch of systems (as part of contests, bug bounty programs, or for work) that used encryption without authentication.  Encryption alone will not protect data from malicious modification.  If you are being asked to do this for work, make them tell you in writing:  ""Despite your assertion that encryption alone is not sufficient to protect us from being hacked, please implement encryption without authentication. We will take full responsibility if anything goes wrong."""
crypto,2ry6np,p337,2,Sat Jan 10 23:04:07 2015 UTC,"Thanks for your advice. I'm not willing to go to war for this feature, but I will bring up what you said with the senior dev on my team. Everyones advice and explanations have been really helpful. I was pretty disheartened when this contractor said my idea (hmac) was not secure and that encryption was the way to go. But you all have convinced me that I am on the right track."
crypto,2ry6np,rya_nc,2,Mon Jan 12 01:20:06 2015 UTC,Just make sure your ass is covered. Can you get away with implementing AES+HMAC and just not mention the HMAC to them?
crypto,2ry6np,p337,3,Mon Jan 12 02:16:54 2015 UTC,"Not really. We build the cookie, and they consume it. So if we throw in an HMAC and they ignore it, it does no good, aside from saying ""we gave you an HMAC to use!"" Unless that is what you mean; that may be a good idea. I am a little more knowledgable than when I first argued this, so maybe I'll be able to change their mind. In any case, our system will not be at risk -- we may make this cookie, but we will not be utilizing it in any way on our side (aside from updating it). Any calls to our API/links to our site will fail to authorize since we will have a seperate secure session set up for that."
crypto,2ry6np,rya_nc,3,Mon Jan 12 03:30:55 2015 UTC,"I don't recommend you do it, but in theory AES in CMC mode would result in things being totally scrambled if anything is changed in the ciphertext. The problem is you'd have to implement CMC mode yourself, and HMAC is far saner."
crypto,2ry6np,beltorak,3,Mon Jan 12 04:03:58 2015 UTC,"this might be useful for arguing against plain encryption. Unfortunately there's not a lot I can find on just MACing cookies without encrypting them (thanks apple for polluting my web searches :-/). OWASP has a ""drive by"" suggestion about using authenticated encryption only but is light on the justification. OWASP is however pretty respected.   Authenticated Encryption gives confidentiality, integrity, and authenticity (CIA); encryption alone just gives confidentiality. Encryption must always be combined with message integrity and authenticity protection. Otherwise the ciphertext may be vulnerable to manipulation causing changes to the underlying plaintext data, especially if it's being passed over untrusted channels (e.g. in an URL or cookie).   So if you must encrypt, follow OWASP's guide and use AES in GCM or CCM mode. I'm not sure which is better, I haven't looked into that in depth. Wikipedia has decent intro articles on those modes (GCM and CCM)  I believe if you have no need to keep the cookie contents secret, a plain HMAC should be sufficient."
crypto,2ry6np,rya_nc,3,Sat Jan 10 22:32:59 2015 UTC,"You're not wrong, but the problem is that many crypto libs in popular programming languages don't support GCM or CCM mode which is why I suggested CBC+HMAC. Better to use that than to try to implement GCM or CCM mode."
crypto,2ry6np,p337,1 point,Sun Jan 11 00:04:47 2015 UTC,"Great links. Thanks for your help. I'll forward these to my team. We may not be able to make this decision, but it is good to know we had the right idea."
crypto,2ry6np,d4rch0n,3,Mon Jan 12 01:22:57 2015 UTC,"AES cyphertext malleability is mentioned in the article/screenplay. If you have AES in CBC mode and you know part of the plaintext, you can do bad things and you might not know it was altered.  Let's say they know the first 8 bytes is their username, or guess that. They could even make a username specifically 8 bytes long to fit the 128 bit block size.  If you know that, and you have an encrypted AES-CBC message, you can alter your data by doing this:  you receive message with IV_orig and block_0, block_1, etc. you know block_0 is your username when decrypted IV_evil = username XOR username_evil XOR IV_orig drop in IV_evil in place of IV_orig, and now you have an encrypted message using the key they don't know,  but username is username_evil, whatever they want to make it to be when it decrypts.   And you STILL don't know the key! You don't even need it for this.  So, encryption with AES-CBC (and other modes... it becomes obvious if you look at the diagrams) is not alone enough to authenticate data, just because the server is the only guy with the key. You don't need the key to alter the data, just the plaintext.  If they argue that ""the user doesn't know the plaintext"", that's not enough to make a scheme secure. People can change data and look at the cyphertext and see where the stream changes and find out where the username is. You should always assume the attacker knows the scheme, just not the key (Kerkhoff's principle, in the sidebar).  You can do this with any block, not just the first block. The first block is easy because changing the IV doesn't affect anything except the IV and the block you want to change, but if you change a future block, you'll scramble the previous block. Instead of the IV, you mutate the previous block cyphertext which is XORd against the plaintext->cypher. So, previous block is jacked up but the block you want to change is whatever you want it to be (read on ""AES malleability"", ""cipher malleability"", ""known plaintext vulnerability"").  The best way to prove it is to demonstrate it. Not only is it impressive and will usually blow their mind (I've heard from the security team ""You're NOT supposed to be able to do that...""), but it is really fun and educational too."
crypto,2ry6np,autowikibot,1 point,Sat Jan 10 23:31:12 2015 UTC,"Section 6. Cipher-block chaining (CBC) of article  Block cipher mode of operation:       IBM invented the cipher-block chaining (CBC) mode of operation in 1976.  In CBC mode, each block of plaintext is XORed with the previous ciphertext block before being encrypted. This way, each ciphertext block depends on all plaintext blocks processed up to that point. To make each message unique, an initialization vector must be used in the first block.         Interesting: CWC mode | Padding (cryptography) | OCB mode | IAPM (mode)   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2ry6np,p337,1 point,Sat Jan 10 23:32:24 2015 UTC,Just wanted to say thank you for the detailed response. You guys have all been extremely helpful. I'm definitely going to hang out around /r/crypto some more. I have a lot to learn.
crypto,2ry6np,sarciszewski,1 point,Mon Jan 12 01:16:56 2015 UTC,"Also, make sure you MAC the IV and the ciphertext, not just the ciphertext."
crypto,2ry6np,rya_nc,0,Thu Jan 15 00:50:29 2015 UTC,https://en.wikipedia.org/wiki/Zero-knowledge_password_proof
crypto,2ry6np,rya_nc,1 point,Sat Jan 10 23:05:43 2015 UTC,"For a cookie, you're using it to store state client side. I'm not sure how a zero knowledge proof would address that use case."
crypto,2rw8x8,f8th,8,Fri Jan 9 20:56:38 2015 UTC,"Try here.  What you're talking about is called ""the other 99.99% of cryptography"".  Examples from the field of encryption include:  functional encryption, inner-product encryption, subspace-membership encryption, function-private subspace-membership encryption, public-key encryption with (conjunctive) keyword search, order-preserving symmetric encryption, (ranked) searchable symmetric encryption, (private) broadcast encryption (with traitor tracing), (identity/attribute-based) proxy re-encryption, (hierarchical) identity-based encryption, attribute-based encryption, and forward-secure public key encryption.  Examples from the field of signatures include:  Group signatures, mesh signatures, ring signatures, one-time signatures, fail-stop signatures, on-line/off-line signatures, incremental signatures, append-only signatures, aggregate signatures, redactable signatures, sanitizable signatures, forward-secure signatures, (hierarchical) identity-based signatures, and attribute-based signatures.  Neither of those lists scratches the surface of their respective sub-fields, and each of those sub-fields is only a small part of cryptography, but hopefully something in there will catch your interest."
crypto,2rw8x8,bren2010,3,Sat Jan 10 01:11:07 2015 UTC,Try here.
crypto,2rw8x8,cunttard,3,Fri Jan 9 21:14:10 2015 UTC,all-or-nothing transforms?
crypto,2rw8x8,rya_nc,2,Sat Jan 10 18:18:22 2015 UTC,zero knowledge and interactive proofs secure multiparty computation and Yao's garbled circuit homomorphic encryption
crypto,2rw8x8,poopinspace,1 point,Sun Jan 11 10:58:12 2015 UTC,zk-SNARKs are well worth checking out--the math is tough but the concepts are fairly accessible.
crypto,2rvqpg,deusex373,11,Fri Jan 9 18:34:12 2015 UTC,https://www.eff.org/https-everywhere
crypto,2rvqpg,disclosure5,1 point,Fri Jan 9 19:09:39 2015 UTC,It annoys me that I still can't get this for IE.
crypto,2rvqpg,F0064R,1 point,Sat Jan 10 10:39:23 2015 UTC,"Why do you use IE, out of curiosity?"
crypto,2rvqpg,disclosure5,1 point,Fri Jan 16 00:36:54 2015 UTC,"Because it's far easier to manage in an enterprise. It's far easier for WSUS to manage updates, particularly when users don't have admin rights. And to override those users who will just hit ""no, I don't want updates"" if given the option.  It's far easier to deal with a manager who demands a particular URL gets added to the bookmark list for a specific list of 50 users but no one else.   It's far easier to present an auditor a graph showing the patch level compliance status across the enterprise.   Yes I've seen Chrome Enterprise. Things can be done but that doesn't make it easier."
crypto,2rvqpg,FrigoCoder,1 point,Fri Jan 16 01:11:08 2015 UTC,"""The add-on could not be downloaded because of a connection failure on www.eff.org.""  Hmmm."
crypto,2rvqpg,TectroLabs,2,Wed Jan 21 14:36:09 2015 UTC,"A VPN service can be used to encrypt all of your Internet traffic while maintaining fast Internet speeds, although this is not a free solution."
crypto,2rvqpg,Creshal,3,Fri Jan 9 19:46:07 2015 UTC,A VPN service can be used to encrypt all of your Internet traffic   But not between the VPN node and the target server.
crypto,2rvqpg,Natanael_L,2,Fri Jan 9 20:08:51 2015 UTC,You can't force another endpoint to encrypt if they don't support it
crypto,2rvqpg,molo1134,1 point,Fri Jan 9 21:37:52 2015 UTC,*sites
crypto,2rrha6,boukeversteegh,12,Thu Jan 8 17:49:01 2015 UTC,"Hey, I think it's a cool idea. I don't know if many people care about this sort of anti-leaking solution, but your description of it seems OK to me.  In my opinion, much of the difficulty with desigining peer to peer content systems is finding good incentives for nodes to keep the data online, and also to deal with Adversaries that want to subvert your network (for fun or for profit).  Regarding your last question (which I consider the most important): I think a novice like you can make a real difference. Don't worry about making crypto mistakes. Most likely you will make some. Just make sure to explain your ideas and publish them, to get feedback from people. People here are not shy, they will tell you if you are doing something wrong.  I don't hang around here a lot, but if it turns out that people are too nice to you here, send your ideas to the crypto mailing list (http://www.metzdowd.com/mailman/listinfo/cryptography). They will tell you for sure if they don't like them :)  Most problems with crypto come from people that hide everything, and make beautiful websites to compensate for their lack of competence with security. Just make sure that you don't do this, and you will be fine.  I wrote some stuff about distributed content systems that you can read even if you don't really know anything. You can find it here: http://www.freedomlayer.org Read the DHT stuff. It should get you started. The other stuff in there are probably less relevant to you at this point."
crypto,2rrha6,realcr,2,Thu Jan 8 18:38:24 2015 UTC,"Thanks for your tips and encouragement! I agree that I've never heard anyone bringing it up as an important aspect of social network security, but perhaps that's because for centralized systems it's easy to detect and fight fraud or abuse. I think designers of p2p really need to go the extra mile to compete with centralized systems.  Your point about resource sharing incentives is well taken, it may take another year before trustless instant micropayments (keyword: payment channels) are feasible through Bitcoin. When people can start earning money by hosting or relaying data for total strangers without middlemen, p2p can finally take off.  I took a quick look at your website, a lot of it is familiar material to me, but I'll go through it in more detail and learn what I can."
crypto,2rrha6,Ahhmyface,3,Fri Jan 9 03:29:14 2015 UTC,"Your + notation is confusing me a bit.     The signature is not really additive, it must be an encryption of both the message and his public key. Otherwise he can decrypt it, remove his public key and then distribute. So he decrypts the entire message, then he uses your public key to decrypt a copy with the plaintext that also contains his public key. If he shares it, then he either shares the plaintext unverifiably, or he shares the encrypted version that displays his public key. This implementation is not quite as safe.  If he decrypts the message using his private key, and stores the output somewhere and then somebody else steals or eavesdrops the one-time decryption key, they can share your plaintext and basically frame the other user. By the same token, a malicious user can claim that somebody else did that to them.  It seems more prudent to just use the public key of the receiver.  Then at least your only excuse can be ""my private key was stolen""."
crypto,2rrha6,Ahhmyface,2,Thu Jan 8 23:08:54 2015 UTC,"Ah, yes by + I just meant ""and"", like a concatenation or something. So I think that your description for 1 is what I had in mind.  Your second point is an interesting angle, but I think It wouldn't work or I have misunderstood you. In implementation 2, the message itself cannot be decrypted with the recipients private key, only with the one time decryption key. If an attacker knows just the one-time key, he could decrypt the message, but not the (decryption key, signature, recipient pub key) tuple, so he could not prove the authenticity of the message. To do that he would also need the Private key of a recipient other than himself, which would make it as secure as solution 1. Unless I'm misunderstanding what you are saying."
crypto,2rrha6,Ahhmyface,1 point,Fri Jan 9 03:15:11 2015 UTC,"Well, a concatenation is exactly what you DON'T want to do. A ""signature"" is simply something that is encrypted with your private key (by with, I don't mean, concatenated, I mean your message is literally encrypted with the encryption scheme using your key as the encryption key).  You can't just concatenate a ""signature"".  I'm not sure if that's what you intend, but if it is then you need to encrypt the message with your private key to consider it signed. If the message and your signature are disjoint, then there's no authenticity.   I assume in 2 you were intending to publish the encrypted message and the one-time-key/signature/user's-key separately.  This is an interesting idea, but it has pitfalls. One, you're relying on transitive trust  (ie. the user that is providing you the one time key is the same as the user that decrypted the one time key with his private key).  Two, your proof of authenticity is not as strong.  How do you know the message is authentic? Well, it's not signed, directly. Though something that is signed happens to contain a key that decrypts it, which is a strong indication that you are the original publisher. I'm not sure how an attacker can exploit that, but it's non-standard.  Also, it's unnecessary. If you intend to ship a message to a single user, just use his public key. There's no need for the one time key.  This is all very confusing without diagrams and stuff so apologies if I am confusing/misunderstanding you."
crypto,2rrha6,trish1975,1 point,Fri Jan 9 18:04:28 2015 UTC,"Ehm, well I would encrypt a sha256 hash of the original message AND the symmetric key using my priv key, and encrypted that again using recipient's pubkey. Assuming that no one tricked me into signing a strange hash, it should suffice as a MAC, no?  Shipping the decryption key separately is pretty much a bandwidth and cup optimization. If the message is large, it has to be encrypted many times for each recipient (the context is a social network with status updates and pictures), which is cpu intensive and due to the size it takes more bandwidth.  Yeah it's hard to explain this stuff over text, im starting to think it would be more effective to discuss crypto over speech."
crypto,2rrha6,Godspiral,1 point,Fri Jan 9 21:24:41 2015 UTC,"Yes, that works for MAC, I am glad we sorted that out.  As for shipping the message separately with a one-time key, I am assuming you mean encrypt the message ""one-time"", and then distribute key/signatures as necessary.    That works good for a single user, but your efficiency savings come from distributing this same file to many users. Once multiple users have their keys, the transitive trust issue rears its head, the one time key can be stolen/shared and blame could be associated with the wrong user. Interesting, nonetheless.    I can think one more issue, and that is that since the purpose of this is to save encryption resources, then that means you're storing an encrypted copy laying around. This is dangerous because it makes the file is repeatable.  An eavesdropper might notice you sent the same file to many people.  They only need to find one with poor security to get the one time key. If you send a unique file to each user, it's much for difficult to figure it out what you're stealing in the first place. That is, of course, unless you're encrypting all file transfers, in which case, that sort of makes the one-time encryption moot.  May as well just use the public key of the user and then you don't have to have encrypt the session?  Some content is also traceable to me, whether or not I sign it. For example, this is supposed to be a social network. I assume this means pictures?  Maybe a photo of me at a neo-nazi rally isn't cryptographically authenticated, but I'm sure my boss wouldn't have any issue firing me anyway. :P"
crypto,2rrha6,Godspiral,2,Fri Jan 9 22:41:50 2015 UTC,"You should have a look at Heartbeat by the Ind.ie people, sounds like it could be similar to what you're looking for."
crypto,2rrha6,SoCo_cpp,2,Fri Jan 9 04:44:04 2015 UTC,"The only way to make it work is to provide an individual encryption to each viewer (using asymetic encryption such as rabin with long keys , and so long message chunks.  The good news is that it can be all automated.  The bad is that it is slow.  The not so bad news is that encryption in rabin is faster than other schemes,  and the decryption is not really that much slower than having a web page render, and it is faster than you can read the blocks as they appear on screen.  You cannot just send a fast decryption key to someone, because they can leak that key to the world, and all of the privacy is immediately lost.  The other alternative that is much faster is a ""permission denied"" system if the request does not provide a legitimate signature to a challenge question.  The Rabin (or optimized RSA pubexps) system also provides fast verification for the server."
crypto,2rrha6,phyzome,1 point,Fri Jan 9 17:19:10 2015 UTC,"I haven't really considered speed. I found a source that says RSA 1024 does only 85kbps on a 1.83 GHz Intel Core 2   You cannot just send a fast decryption key to someone, because they can leak that key to the world, and all of the privacy is immediately lost.   Well, they could leak the key, but it can only be used to decrypt the message, not the signature, so they couldn't prove who originated the message. So it is basically like leaking the plaintext, which you could also do with individually encrypted messages.  The decryption (and thereby authorization) should really happen on the client side, so that relays can be used that don't need to be trusted.   But! You did give me a good idea. If peers can form a direct secure tunnel, all of the encryption inefficiencies can be simplified, and messages can be send directly. But still, I want the network to work even when peers are offline, so 3rd party nodes are essential."
crypto,2rrha6,legitimt,1 point,Fri Jan 9 19:15:40 2015 UTC,"Well, they could leak the key, but it can only be used to decrypt the message, not the signature, so they couldn't prove who originated the message. So it is basically like leaking the plaintext, which you could also do with individually encrypted messages.   A screenprint of your facebook page is not necessarily proof that you authored it, but it will still convince many people.   Its also more damning if no one can look through your facebook page to see if there is any evidence that this is something you could say.  Its true that none of the systems I mentioned prevent that though.   If you don't send a customized encryption to each user though, then a leak of the symmetric decryption key, unlocks your past and future content to everyone that has that key.  (when you change the key, then you lock past content to anyone who did not remember the old key.  A one key per post system would solve this, just handle more requests.)   RSA 1024 does only 85kbps   the encrypt speed is the publisher's bottleneck.  It is 20x faster.  Latest software benchmarks has it 30x faster.  That hardware is 4 to 5 years old, and even low end new machines are more than 3x faster."
crypto,2rrha6,phyzome,1 point,Fri Jan 9 20:47:10 2015 UTC,"Yes you're right, but I don't think that this type of leak can ever be prevented. Unless... messages were sent as images with hidden watermarks in them? Then still someone could just convert it to plaintext and share it. Once they know the information it can be shared.  In my OP I describe that the symmetric key is used only once so your second point is not that helpful. A leak of the symmetric key would only expose one single message. Nothing past or future.  For the issue of needing to remember the keys, I see it the same as the issue of needing access to old data. If other nodes relay and store data for you, they could also store the accompanying encrypted keys.  For speed. I did read that RSA is normally used only to encrypt a fast symmetric key in a secure padding, so I guess for large files even with RSA it could be feasible to have fast transfers."
crypto,2ru2yr,outtogetyou,10,Fri Jan 9 07:02:38 2015 UTC,"someone needs to chill out, getting confrontational is not going to get any results, nor should it.  It seems like they're being totally transparent anyway.  If you don't like it, fork it."
crypto,2ru2yr,MacroMeez,9,Fri Jan 9 08:08:11 2015 UTC,"This is the kinda of paranoid trolling you see in a lot of open-source security projects.  Reading the source is hard, but anybody can google the developers and think they're contributing to the ecosystem."
crypto,2ru2yr,lighthill,9,Fri Jan 9 12:19:58 2015 UTC,"I don't see that being a problem, and the project is open source anyway."
crypto,2ru2yr,_ihatemyself,-6,Fri Jan 9 07:41:46 2015 UTC,"You don't think that's a conflict of interest? BTW, the original TrueCrypt software was open source, and it still hasn't been audited. Just because it's open source doesn't mean it's automatically immune from security issues, whether intentional or not."
crypto,2ru2yr,mormonroy,4,Fri Jan 9 07:59:28 2015 UTC,"And we know that TrueCrypt wasn't itself written by DoD/NSA/whatever, because . . . ?"
crypto,2ru2yr,quercus_suber,-1,Fri Jan 9 08:20:33 2015 UTC,"It's open source right, so who cares who wrote it...right?....wrong! People are dumping it for a reason."
crypto,2ru2yr,SoCo_cpp,1 point,Fri Jan 9 15:27:11 2015 UTC,I still use TC as I can't possibly see how there could be a secret back door in it.
crypto,2ru2yr,_ihatemyself,2,Fri Jan 9 20:04:32 2015 UTC,"Yes, cryptographic backdoors and flawed cryptographic implementatinos are over my head too."
crypto,2ru2yr,SoCo_cpp,1 point,Fri Jan 9 20:11:12 2015 UTC,"Explain to me how a unique key, or set of keys, could unlock all AES encrypted data. Please provide proof of concept (yours or someone else's) that a backdoor key could even exist in symmetric encryption. I have not even seen an example of a weak/simple symmetric encryption algorithm that both worked and had a master key to unlock everything, that included multiple rounds (n>10) and magic numbers.  On top of that, after 45 years, there is no evidence the NSA tampered with DES. In fact, all historical evidence points to the fact the NSA strengthened the DES algorithm (the S-boxes).   On 17 March 1975, the proposed DES was published in the Federal Register. Public comments were requested, and in the following year two open workshops were held to discuss the proposed standard. There was some criticism from various parties, including from public-key cryptography pioneers Martin Hellman and Whitfield Diffie, citing a shortened key length and the mysterious ""S-boxes"" as evidence of improper interference from the NSA. The suspicion was that the algorithm had been covertly weakened by the intelligence agency so that they — but no-one else — could easily read encrypted messages. Alan Konheim (one of the designers of DES) commented, ""We sent the S-boxes off to Washington. They came back and were all different."" The United States Senate Select Committee on Intelligence reviewed the NSA's actions to determine whether there had been any improper involvement. In the unclassified summary of their findings, published in 1978, the Committee wrote:  In 1973 NBS solicited private industry for a data encryption standard (DES). The first offerings were disappointing, so NSA began working on its own algorithm. Then Howard Rosenblum, deputy director for research and engineering, discovered that Walter Tuchman of IBM was working on a modification to Lucifer for general use. NSA gave Tuchman a clearance and brought him in to work jointly with the Agency on his Lucifer modification.""  NSA worked closely with IBM to strengthen the algorithm against all except brute force attacks and to strengthen substitution tables, called S-boxes. Conversely, NSA tried to convince IBM to reduce the length of the key from 64 to 48 bits. Ultimately they compromised on a 56-bit key.  Some of the suspicions about hidden weaknesses in the S-boxes were allayed in 1990, with the independent discovery and open publication by Eli Biham and Adi Shamir of differential cryptanalysis, a general method for breaking block ciphers. The S-boxes of DES were much more resistant to the attack than if they had been chosen at random, strongly suggesting that IBM knew about the technique in the 1970s. This was indeed the case; in 1994, Don Coppersmith published some of the original design criteria for the S-boxes.[9] According to Steven Levy, IBM Watson researchers discovered differential cryptanalytic attacks in 1974 and were asked by the NSA to keep the technique secret."
crypto,2ru2yr,_ihatemyself,1 point,Sat Jan 10 04:53:17 2015 UTC,"Let's assume for the moment that AES is perfect.  An implementation of AES can still be broken - perhaps it chooses all of its encryption keys from a tiny subset of all possible keys, so that while there are 128 or 256 bits of ""key"", there are really only 256 different keys that are ever actually used, so they only need to try 256 different possibilities.  Or perhaps some of the bits of the key - or the seed to the RNG used to create the key - are encoded in ""unused"" bits, or metadata, or leaked across the network somehow. Yeah, the key really is 128 or 256 bits of randomness . . . unless you know where to look for the hidden key.  A well-funded adversary may leak only part of the key - so the crypto is 40 bits hard for them, 128 bits hard for the rest of the world. Even if the flaw is discovered, the crypto isn't useless, just weaker.   Asserting that something is secure until proven insecure is a horrible approach to security.   It would be polite for you to cite your source - apparently the Wikipedia entry for DES, which seems to be uncritically quoting an NSA publication regarding NSA's role in the development of DES.   You are certainly welcome to accept their version of history, but given NSA's demonstrable willingness to lie in sworn testimony before Congress, I can't say I'm going to give their marketing materials a lot of respect."
crypto,2ru2yr,quercus_suber,1 point,Sat Jan 10 06:18:19 2015 UTC,"Let's assume for the moment that AES is perfect.   Let's not, because AES is not perfect.   An implementation of AES can still be broken - perhaps it chooses all of its encryption keys from a tiny subset of all possible keys, so that while there are 128 or 256 bits of ""key"", there are really only 256 different keys that are ever actually used, so they only need to try 256 different possibilities. Or perhaps some of the bits of the key - or the seed to the RNG used to create the key - are encoded in ""unused"" bits, or metadata, or leaked across the network somehow. Yeah, the key really is 128 or 256 bits of randomness . . . unless you know where to look for the hidden key. A well-funded adversary may leak only part of the key - so the crypto is 40 bits hard for them, 128 bits hard for the rest of the world. Even if the flaw is discovered, the crypto isn't useless, just weaker.   True.   Asserting that something is secure until proven insecure is a horrible approach to security.   I have not done that.   It would be polite for you to cite your source - apparently the Wikipedia entry for DES, which seems to be uncritically quoting an NSA publication regarding NSA's role in the development of DES. You are certainly welcome to accept their version of history, but given NSA's demonstrable willingness to lie in sworn testimony before Congress, I can't say I'm going to give their marketing materials a lot of respect.   You cannot prove AES has been sabatoged by the NSA, and I cannot prove it has not. This argument lacks a NULL hypothesis. Thus the most likely answer is the simplest answer: The NSA has not backdoored AES."
crypto,2ru2yr,_ihatemyself,0,Sat Jan 10 06:44:16 2015 UTC,"Dude, have you never heard of Dual_EC_DRBG? It's a psuedorandom number generator algorithm that was created by the NSA and pushed by NIST. It was widely accepted and implemented in industry, then it was discovered that the NSA had baked in a backdoor by intentionally weakening the algorithm so they could predict the random numbers thus guessing the encryption keys.  http://en.wikipedia.org/wiki/Dual_EC_DRBG https://blog.0xbadc0de.be/archives/155  The more you know."
crypto,2ru2yr,whyme90,2,Sat Jan 10 06:02:14 2015 UTC,"There is only a theoretical possibility of a backdoor, which I remind you is also just a random number generator and nothing to do with symmetrical encryption. There is no proof the NSA placed a backdoor in that algorithm either.  It is good that we always scrutinize cryptology, especially when governments are involved, but do not take a stance that ""all governments are bad and all actions they partake in are bad"".  American businesses (aka the economy) would take a massive hit if they were to rely on cryptology that had backdoors in it, therefor it is very unlikely the American government would ever support such a thing. It is entirely counter-productive."
crypto,2ru2yr,_ihatemyself,1 point,Sat Jan 10 06:13:50 2015 UTC,"The NSA doesn't care about the American economy as evidenced by the Snowden leak. The leaks showed that the NSA has worked with technology companies like Microsoft and RSA to intentionally insert backdoors for the U.S. intelligence community. They've baked backdoors into hardware and Intel chips with TPM. They even joked about it in the leaked slides with ""TAO inside"" instead of ""Intel inside"" referencing their Tailored Access Organization. The NSA doesn't view it as counter-productive as long as they're the only ones that can access the backdoors. The cloud industry has taken a hit given the revelations, and Europeans have been reluctant to use U.S. based services, but overall the economy and technology industry is still chugging along just fine. Now that the NSA knows that the public at large doesn't care, and the effects on the economy are minimal, they will keep pushing for backdoors with major tech firms."
crypto,2ru2yr,whyme90,0,Sat Jan 10 06:47:05 2015 UTC,Any cryptographic flaw could provide a short cut. Any usable cryptographic shortcut could be used as a backdoor. We've literally crossed about half of the crytpo functions off the list as broken in the last 3 years.
crypto,2ru2yr,SoCo_cpp,1 point,Mon Jan 12 14:57:33 2015 UTC,I disagree somewhat. Just because a shortcut exists that makes the brute force iteration less than the key-space does not necessarily mean the encryption is broken (or not worth using). A keyspace of say 2512 that has been reduced to say 2150 is still a very strong encryption.
crypto,2ru2yr,_ihatemyself,1 point,Mon Jan 12 20:04:31 2015 UTC,Do you really think that the rest of the world is limited by your imagination?
crypto,2ru2yr,quercus_suber,1 point,Sat Jan 10 06:07:51 2015 UTC,A) No.  Q) Do you really think your unfounded paranoia represents the real world?
crypto,2ru2yr,_ihatemyself,1 point,Sat Jan 10 06:38:42 2015 UTC,"I know that there are dangers I can't imagine in detail - my inability to describe them perfectly doesn't make them not dangerous. In fact, my inability to understand them makes them more dangerous.   But if you want to continue to believe that everything is safe until proven otherwise, go right ahead. There's really no reason to use crypto, anyway, because you don't know that anyone's really reading your traffic or about to steal your hard disk, so this security stuff is just a big distraction. It's much more likely that nobody will spy on you or commit crimes against you, and it's all about the probabilities, right?"
crypto,2ru2yr,quercus_suber,1 point,Sun Jan 11 03:26:01 2015 UTC,"But if you want to continue to believe that everything is safe until proven otherwise, go right ahead.   I do not want to believe that, but I must believe that. It is the most logical belief to make. Besides, cryptology is easy. Just take someone else's encryption, modify the magic numbers and rounds, and now you have a method you can trust because any backdoor that might have been there has now been erased by your custom modifications."
crypto,2ru2yr,_ihatemyself,-3,Sun Jan 11 05:16:00 2015 UTC,"We dont, but we also dont know who made it.  If, as your question suggests, government links are a bad thing, then we should really strive to avoid them.  For me the issue isnt that it could be compromised now, but that itd be super easy in the future given that a) the developer is known and b) His position at DISA allows the govt some leverage to do so."
crypto,2ru2yr,Diasparo,2,Fri Jan 9 09:42:54 2015 UTC,It was audited. 7.1a at least.
crypto,2ru2yr,ISJ-117,1 point,Fri Jan 9 15:03:28 2015 UTC,"Why would the US government purposely want weak encryption to be floating around? The US G. does not know the strength of other countries' cryptanalysts, and historically the US G. has not been at the top of cryptanalysts either. It would be completely counter-productive to release weak encryption that it itself would use, and it's own citizens and businesses. It makes absolutely no logical sense to me for any government to purposely release weak encryption. And, I might add, there is no historical precedence of any government/kingdom/military ever doing so in the past either.   TrueCrypt software was open source, and it still hasn't been audited.   But that is not the US governments fault, that is your fault, and my fault, and everyone who uses it but refuses to audit it.  If you honestly think one employee out of dozens of contributors, who may work for the US government from time to time, can some how insert secret back doors that only he knows about, you're too paranoid."
crypto,2ru2yr,_ihatemyself,5,Fri Jan 9 20:03:56 2015 UTC,"Not to opine either way on what it means for CipherShed, but DISA and the DoD are groups that will want NSA-proof security."
crypto,2ru2yr,Innominate8,1 point,Fri Jan 9 16:31:06 2015 UTC,"However, what was interesting is that Pyeron was being #accused# of being a dual U.S. / Israeli citizen.   I'm trying to come up with a witty remark for something so ridicules, but I think it speaks for it self."
crypto,2ru2yr,Afro_Samurai,-3,Fri Jan 9 18:02:04 2015 UTC,Cross post from r/privacy: https://www.reddit.com/r/privacy/comments/2rpfnu/warning_one_of_the_ciphershed_members_works_for/
crypto,2ru2yr,SoCo_cpp,-3,Fri Jan 9 07:03:06 2015 UTC,"This is a big deal and only a short sighted fool would think this doesn't matter because it is an open source project...you know, like the original TrueCrypt was can't trust."
crypto,2roup0,edolnx,17,Thu Jan 8 00:45:00 2015 UTC,"Basically, DJB used ""nothing up my sleeve"" construction; all of his choices are almost maximally constrained.  The logic is clearly explained, and the parameters fall directly out of that.  Thus, there's no ""wiggle room"" to choose a weak parameter set.  It's Hobson's choice: you take the one at the front of the line, and that's it.  He wanted 256 bits.  He ended up choosing 255 bits for clear implementation reasons: 10 words at 25.5 bits each.  He needed a prime near that; 2255-19 is the closest available.  The choice of 486662 is a bit more technical, but also explained toward the end of the paper.  The smallest three integers satisfying the necessary constraints are 358990, 464586, and 486662.  The first two have a very rare corner case that complicates the implementation; the third does not, so it was chosen.  The reasons for some of the choices are somewhat technical, but simple and comprehensible."
crypto,2roup0,cypherpunks,10,Thu Jan 8 04:21:00 2015 UTC,"I'm not DJB, and while I've done work with him I don't think I count as his ""team"" either.  DJB can be very aggressive in criticizing others' work, especially the NIST curves.  His description of them as ""unsafe"" is a bit too strong.  There are better, easier, safer designs out there, including DJB's work, but the NIST curve are probably fine if you're very careful.  The NIST curves are a pain to implement correctly and efficiently though, especially NIST P256.  DJB is right that more modern curve designs are better for this.  Curve25519 is a well-designed curve, and it has several solid implementations (most notably NaCl and AGL's ""donna"").  The software is very fast and very tight since both AGL and DJB are very capable and very careful engineers.  Curve25519 is not perfect.  In particular, a cofactor-4 curve with a 3-mod-4 prime is probably a little simpler, though these curves have disadvantages too.  Also, in a lot of the work I do -- mostly hardware security against physical attacks -- Curve25519 is marginally simpler/faster/safer but it's not as big a win as it is for software.  I supported Curve25519 for standardization as a new alternative to NIST P256, because it seems very solid, it has been received favorably by the security community, and it has fairly widely-deployed implementations on many platforms.  With every other proposal trading advantages for at-least-as-large disadvantages, I felt that the deployment and high-quality software tipped the balance toward Curve25519."
crypto,2roup0,bitwiseshiftleft,2,Thu Jan 8 08:42:46 2015 UTC,"but the NIST curve are probably fine if you're very careful.   Is the issue being careful? Or is the issue non-NUMS-ness? Disclaimer: I don't understand the details of ECC, so I'm only asking at a high level."
crypto,2roup0,waxwing,2,Thu Jan 8 12:56:30 2015 UTC,"Depends who you ask.  It's possible, but fairly unlikely IMHO, that the NIST curves are secretly weak.  They actually do have a sort of NUMS design (there are much higher standards for NUMS these days though), in that NIST used a hash function to choose the coefficients.  So they can't have a proper backdoor, the way Dual-EC-DRBG did, unless NSA can reverse the hash.  That is, if the NIST curves are weak then anyone can discover the attack.  But AFAIK, nobody on the outside can guess what such an attack would look like.  On the other hand, it's somewhat tricky to implement the NIST curves correctly, both because of the Weierstrass form and because of the primes (NIST P256 is especially ugly).  More modern designs like Curve/Ed25519 can be simpler to implement and use without certain security-critical bugs."
crypto,2roup0,bitwiseshiftleft,2,Thu Jan 8 18:24:28 2015 UTC,"(Bear in mind when reading this that Mike is far more an expert in this than I am, and you should probably listen to him and not me)   His description of them as ""unsafe"" is a bit too strong.   I think there's two components to the safety. One is things like twist security, completeness for addition, etc. On these I think it's fair to say that a careful implementor can make a safe implementation, but that the standard is not conducive to them. The other component is rigidity with respsect to parameter selection, here I think it would be fair to say P-256 (and company) are not provably secure, they might be, they might not be who knows! Probably not, but we have choices with rigid parameters, so why bother!"
crypto,2roup0,kingkilr,1 point,Fri Jan 9 06:29:43 2015 UTC,"I'm not DJB, and while I've done work with him I don't think I count as his ""team"" either.   I have witnessed people that have published with him call him an ass hole.  My own opinion is that he is a benevolent asshole.   DJB can be very aggressive in criticizing others' work,    I whole heartedly agree.  And I also find that it is unnecessarily so."
crypto,2roup0,throwaway0xFF00,5,Wed Jan 14 03:45:08 2015 UTC,"Well analyzing the curves themselves is beyond my skill, but my understanding is that the Curve25519 design is totally open, with all the reasoning laid out there for you and no bizarre unexplained numbers used, while the NIST curves are more ""here, use these numbers, it's safe"". Maybe they are, but we don't know why they were chosen, and we do know that certain numbers could be concealing a back door."
crypto,2roup0,Sostratus,1 point,Thu Jan 8 01:44:52 2015 UTC,Change the numbers and rounds and then you know it's safe...
crypto,2roup0,_ihatemyself,1 point,Thu Jan 8 07:28:36 2015 UTC,"But if you don't know enough to verify djb's ""explanation"" could be completely false...  In my mind I treat them the same. A proof I can't verify is a proof I can't verify."
crypto,2roup0,Klathmon,1 point,Thu Jan 8 03:39:44 2015 UTC,Here's the link to the schedule.   http://events.ccc.de/congress/2014/Fahrplan/events/6369.html
crypto,2roup0,Sostratus,7,Thu Jan 8 06:24:57 2015 UTC,"Well it might be nice to be truly 100% ""trust no one"" like that, but in practice it is not possible. Did you also go scoop up a bucket of sand at the beach and forge all your chips yourself from raw silicon? At some point you have to trust someone, no one has time to fully understand and do it all themselves. The trick is figuring out who to trust. Dan Bernstein is very well respected in the infosec community and everyone with any talent in the field seems to agree it's a good implementation. And the point is, like any good science, if you don't trust them then you can put in the time in studying and verifying it yourself, because he published his methods. You won't get the same openness from NIST and the NSA."
crypto,2roup0,Klathmon,1 point,Thu Jan 8 12:17:19 2015 UTC,"My point did not come across correctly.  I agree, in that I can't verify either of them (or most things) and that's okay.  Regardless of what you think of the NSA's recent issues, they are ""the"" name in crypto. Ignoring them in their entirety would be stupid."
crypto,2roup0,levoroxi,5,Thu Jan 8 03:48:29 2015 UTC,"my understanding is that the Curve25519 design is totally open, with all the reasoning laid out there for you and no bizarre unexplained numbers used, while the NIST curves are more ""here, use these numbers, it's safe""   Well, at one point, government ""collaboration"" was positive in these types of things: NSA changed the DES S-boxes without explanation [PDF], which made DES much more resistant to differential cryptanalysis."
crypto,2roup0,bitwiseshiftleft,1 point,Thu Jan 8 04:03:35 2015 UTC,"You make an excellent point: around 2007 the word came down from NSA and NIST that AES should be used at 192bits or higher. Several years later the public infosec community discovered that there are some potential weaknesses at 128bits and lower. Not everything that comes out of them is to enable exploits. The balance of trust has changed, and with good reason."
crypto,2roup0,levoroxi,3,Thu Jan 8 04:41:12 2015 UTC,"Wait, really?  Link to this?  I'd only heard of issues in AES-256, not in AES-128."
crypto,2roup0,molo1134,1 point,Thu Jan 8 05:32:31 2015 UTC,"But those apply to all key sizes of AES, not only to    128bits and lower"
crypto,2roup0,Klathmon,2,Thu Jan 8 08:09:30 2015 UTC,"that there are some potential weaknesses at 128bits and lower.   First time I hear about that. Sure, there's the biclique attack, but that only reduces security by a factor of about four to about 2126. I know about the related-key-attack that reduces AES-256 to 290-ish and AES-192 to 2176-ish but which does not apply (afair) to AES-128...  Also how do you go ""lower"" with AES/Rijndael? Minimum is 128."
crypto,2roup0,molo1134,1 point,Fri Jan 9 05:15:48 2015 UTC,Do you have references for the related-key attacks? I'm interested in the AES-256 break; that's pretty bad.
crypto,2roup0,Klathmon,3,Fri Jan 9 14:21:43 2015 UTC,"http://eprint.iacr.org/2009/317  EDIT: But don't worry, this is ""only"" a related-key-attack. In all protocols that I can think of at the moment there are not related keys used.  Still, it rattled my confidence in AES at the time. I am using Serpent everywhere now (except GnuPG and encfs where I use Twofish/Blowfish). While I still believe AES to be secure I like serpent's elegant bitslicing ""timing-free"" implementation much better than the side-channel-attack prone AES S-Box implementation.  Serpent also happens to be the fastest of Serpent/Twofish/AES on my machine for full disk encryption in XTS mode at 256 bits:  $ uname -a Linux sylveon 3.14.27-2-lts-ck #1 SMP PREEMPT Tue Dec 23 03:57:49 CET 2014 x86_64 GNU/Linux $ cryptsetup benchmark # Tests are approximate using memory only (no storage IO). PBKDF2-sha1       616084 iterations per second PBKDF2-sha256     391844 iterations per second PBKDF2-sha512     279173 iterations per second PBKDF2-ripemd160  372363 iterations per second PBKDF2-whirlpool  123652 iterations per second #  Algorithm | Key |  Encryption |  Decryption      aes-cbc   128b   119.0 MiB/s   139.2 MiB/s  serpent-cbc   128b    44.3 MiB/s   175.9 MiB/s  twofish-cbc   128b   115.1 MiB/s   150.5 MiB/s      aes-cbc   256b    89.6 MiB/s   102.3 MiB/s  serpent-cbc   256b    44.9 MiB/s   171.3 MiB/s  twofish-cbc   256b   115.0 MiB/s   154.0 MiB/s      aes-xts   256b   140.0 MiB/s   135.9 MiB/s  serpent-xts   256b   155.0 MiB/s   160.2 MiB/s  twofish-xts   256b   133.8 MiB/s   142.0 MiB/s      aes-xts   512b   104.8 MiB/s   105.7 MiB/s  serpent-xts   512b   157.9 MiB/s   163.1 MiB/s  twofish-xts   512b   142.2 MiB/s   142.2 MiB/s"
crypto,2roup0,DoWhile,1 point,Thu Jan 8 12:15:55 2015 UTC,"That's part of the problem.  They have been caught red-handed subverting NIST standards.  Documents have been leaked highlighting this as an achievement of theirs.  They are not on our team, and anything they recommend is highly suspicious."
crypto,2roup0,bitwiseshiftleft,1 point,Fri Jan 9 06:25:12 2015 UTC,"Yes, there are some VERY questionable actions taken by them, but that still doesn't mean that you should completely write them off as 100% malicious and ignore everything they offer.  They still employ most of the worlds top cryptographers and mathematicians. Feel free to be skeptical, and I hope that the recent revelations help encourage more people to look over recommendations from anyone (including the NSA) and not just blindly follow them.  But as of right now many of the top minds in this field have reviewed the NIST ECC curves and have found nothing even remotely suspicious about them. The ""magic numbers"" have so far been found to be completely safe, and while the curves focus more on speed than security, they are still perfectly safe.  At the same time that's not to say that Curve25519 isn't better in many ways (including simplicity), but that the NIST curves aren't suspect simply because of their connection to the NSA."
crypto,2roup0,DoWhile,1 point,Fri Jan 9 14:19:35 2015 UTC,"there are some VERY questionable actions taken by them   Not questionable, they were CLEARLY undermining NIST standards.  Fool me once, shame on you.  Fool me twice, shame on me.   nothing even remotely suspicious   The origin of the magic numbers are suspicious.  They are demonstrably neither the most cpu-efficient or most strong, so why were they chosen?   they are still perfectly safe   This is what is called into question.  We don't know if the NSA has some cryptanalysis that is unknown/unpublished in the non-clearance world.   the NIST curves aren't suspect simply because of their connection to the NSA.   They are precisely suspect because of this."
crypto,2roup0,levoroxi,1 point,Thu Jan 8 18:06:55 2015 UTC,"I'm not feeling like an internet fight today, but I'll leave one more thing.  There is no ""Perfect algorithm"" and there never will be. You should choose your encryption systems based on who you are trying to protect against.  If you are someone who is against the NSA in all forms and dedicate your life to getting rid of them in one way or another, using NIST curves (or any NSA sponsored system) is not the best idea.  On the other hand if you had reason to believe that DJB himself was trying to kill you and your family, then it might be smarter to use NIST curves over one that he came up with.  This is one of the reasons having multiple algorithms is a good idea. If we (as a community) decided to completely drop support for all NSA sponsored algorithms, then we are left with significantly less to choose from. And if there were a bug/backdoor/weakness found in one of those systems (or a class of systems) then it could hurt significantly more.  Furthermore, an often repeated mantra is that ""The best encryption is the one that you will use"". If you start using more ""exotic"" forms of encryption you will find that it is harder to use it (and much harder to get others to do so). Someone using RC4 all the time is magnitudes better than someone who turned off encryption entirely because the service they are trying to use only supports Curve25519 (In the name of security!) and their client doesn't."
crypto,2roup0,levoroxi,6,Thu Jan 8 18:24:48 2015 UTC,"The people at Microsoft Research do nice work in studying these and other curves, you should take a look at their work and how they contrast their curves with NIST/DJB curves.  The subject on picking and analyzing practical, safe curves is quite specific as it requires a knowledge of math, crypto, security, and efficient implementation that there are only a small handful of people I would really call experts on the subject.  There are a few very reasonable guidestones that DJB and others have suggested in the choosing of curve parameters that would make for a ""not-suspicious"" curve, but the meta-issue would be that there could be other, similarly-reasonable guidelines that these folks don't satisfy."
crypto,2roup0,Godspiral,7,Thu Jan 8 18:35:07 2015 UTC,"There is also Ed448-Goldilocks.  Full disclosure: I worked on it.  Ninja edit: There is also E-521, an Edwards curve modulo NIST-P521.  Defined here.  Full disclosure: I worked on that too."
crypto,2roup0,bitwiseshiftleft,2,Thu Jan 8 18:50:43 2015 UTC,There's also a nice overview of safe curves on djb's website: http://safecurves.cr.yp.to/
crypto,2roup0,Godspiral,1 point,Thu Jan 8 02:25:19 2015 UTC,Do you have any links to the Microsoft research articles? Are they stuck behind a pay-wall? I couldn't find them in my initial research...
crypto,2roup0,bitwiseshiftleft,3,Thu Jan 8 08:44:47 2015 UTC,This one in particular:  http://research.microsoft.com/apps/pubs/default.aspx?id=209303
crypto,2roup0,Godspiral,2,Thu Jan 8 12:10:59 2015 UTC,"Let's posit a different thing, then: be paranoid, and don't trust any single cryptosystem. Defense in depth exists for a reason."
crypto,2roup0,bitwiseshiftleft,1 point,Thu Jan 8 05:23:28 2015 UTC,"Agreed 100%. Security in depth is preferred. I'm just trying to understand who I buy my locks from, and if they only have a small number of tumbler patterns from the factory ;)"
crypto,2roup0,Godspiral,1 point,Thu Jan 8 05:35:33 2015 UTC,"The funny thing about crypto is that this doesn't solve your problem :) Outside of this scope, IIRC with some block ciphers, it is possible that cascaded encryption can cause exploitable weaknesses in one or the other. There was a bit of a kerfluffle with TrueCrypt and this at some point."
crypto,2roup0,bitwiseshiftleft,0,Thu Jan 8 04:56:56 2015 UTC,"Bernstein is pretty smart.  Until the government hands him stashes of cash, I trust him somewhat.  That said, I don't like ECC, or ECDSA.  I'm not sure there are no Curve point division (halving) algorithms.  If P * n + P = P then P/2 = (n+1)/2 * P.  I'm not comfortable with all of the keys and signature points all sharing the same space, and then there is:   Calculate s = k{-1} (z + r d_A) mod n  (wikipedia)   z r n and s is known.  and you get to see an r s and z with every signature. dA is a constant  z values that are close together even with separate k could leak info.   rdA would on average be 510 bits, but you know r each time.  If there is a leak of the log of this value possible, then many signatures could triangulate.  bigger issues would be whether gcd of all the signatures and subpoints that are generated all the time is possible, but at certain sizes birthday attack become an issue.  The field is so young too that few people have both the computer and math chops to think about it, and those that do, can be outside academia."
crypto,2roup0,Godspiral,8,Thu Jan 8 05:36:10 2015 UTC,"ECC has been around for about 30 years now, and has been carefully analyzed by many experts over those years, and its security properties are pretty well understood.  The space of attacks and defenses on everything you mentioned is pretty well mapped out:   You can divide an EC point by a number easily, but it's hard to divide by another point (aka discrete log). ECDSA falls apart rather quickly if the random number k is biased, but if it's not, then you definitely need a property of the curve and/or hash function to break it.  For the related Schnorr signature construction, you need both. Birthday attacks (eg, Pollard rho) are the most efficient known attacks on most ECC schemes.  The curves' sizes are chosen so that the birthday attack is appropriately hard.   The math behind the curves and constructions is actually pretty easy.  Not as easy as RSA, but anyone who knows college abstract algebra, number theory and statistics can learn it without much trouble.  The math behind attacks on ECC, and the analysis of why they're difficult, can be much harder.  But the same is definitely true of RSA.  You may understand how RSA works, but do you understand the number field sieve?  And those other algorithms which recently broke extension-field discrete log -- do you know how those work, and can you analyze whether they will lead to better attacks on RSA?"
crypto,2roup0,bitwiseshiftleft,0,Thu Jan 8 05:43:25 2015 UTC,"You can divide an EC point by a number easily   If true then ECDLP is solved.  ECDLP is a bit of a misnomer IMO in that on EC the operation you are trying to reverse is multiplicationi and not exponentiation.  If you can divide by 2 easily on EC then you can go from QA to G in (log2 dA)2 steps.   do you understand the number field sieve?   I do a little bit to a medium amount to amazingly well depending on who you compare me to.  I understand it enough to make factoring schemes resistant to it.  For those people who understand it better than me, if there is a way to apply some of the factoring/dlp techniques to ECC, is there more money in selling ECC and staying quiet, or publishing academic papers disclosing those attacks.  You mention that the field is 30 years old.  That is not long enough to be completely patent free and not long enough to have all information about it as freely available as say Euler's formulas and proofs.  I am comfortable with the integer proof in a field that square root is as difficult as factoring.  For ECC, division by 2 is the equivalent attack and its not clear if that has been proven hard."
crypto,2roup0,Spherius,6,Thu Jan 8 04:19:09 2015 UTC,"If true then ECDLP is solved. ECDLP is a bit of a misnomer IMO in that on EC the operation you are trying to reverse is multiplicationi and not exponentiation.   Dude, I'm a cryptographer.  For a living.  My specialty is ECC.  Trust me, ECDLP is dividing one point by another point, not dividing a point by a number (the number is like an exponent).  Dividing a point by a number is done pretty often by fancy academic protocols.  (Eg, AugPAKE, though the security proof of that protocol is wrong.)  On a related note, you post here a lot, but you don't seem to actually understand crypto.  I recommend Dan Boneh's online class if you want to learn more.   I understand [NFS] enough to make factoring schemes resistant to it.   The only defense against GNFS is to make the key long enough.  Though I suppose there is also SNFS if you make a key with some very special properties.   For those people who understand it better than me, if there is a way to apply some of the factoring/dlp techniques to ECC, is there more money in selling ECC and staying quiet, or publishing academic papers disclosing those attacks.   Selling, of course, but the same is true for every useful encryption technology.   You mention that the field is 30 years old. That is not long enough to be completely patent free and not long enough to have all information about it as freely available as say Euler's formulas and proofs.   Most of the relevant patents have expired, at least if you're using prime fields and not GF( 2n ).  There are a few still held by Certicom on certain protocols, but the same can be true of RSA.  For example, I'm on a patent (I didn't choose to patent it, but y'know, job) covering a low-memory implementation of RSA with e=3.   I am comfortable with the integer proof in a field that square root is as difficult as factoring. For ECC, division by 2 is the equivalent attack and its not clear if that has been proven hard.   Division by 2 is not an attack.  EC protocols aren't the same as Rabin-Williams signatures.  Elliptic curve designs have a sanity check called the ""generic group model"", which models an attacker who just uses the group law, and doesn't discover some sort of advanced math to do stronger things.  EC hardness assumptions are sanity checked by proving security in the GGM.  Notice that you only used the group law in your ""division by 2 attack"", so a GGM proof would cover it."
crypto,2roup0,Godspiral,1 point,Thu Jan 8 08:23:35 2015 UTC,The only defense against GNFS is to make the key long enough   P and Q close together helps GNFS find a solution faster.  All of the (big) factored RSA challenge numbers have this property.
crypto,2roup0,Spherius,1 point,Thu Jan 8 15:41:31 2015 UTC,"Source?  I don't think either of those sentences is true, though I suppose it depends what you mean by ""close together""."
crypto,2ro12h,Lookeeloo,3,Wed Jan 7 20:56:12 2015 UTC,"For one, its not served over TLS, so anybody can MITM it and send you malicious JavaScript.  Or, the author can send you malicious JavaScript even if it was TLS.  But, I guess useful if you use it in node-webkit or something."
crypto,2ro12h,i_regret_most_of_it,2,Thu Jan 8 00:34:41 2015 UTC,You could download it for offline viewing entirely
crypto,2ro12h,KayRice,1 point,Thu Jan 8 02:37:18 2015 UTC,When one downloads it for offline viewing: Do I have to be offline for it to be truly secure and not be exposed to Malicious JavaScript?
crypto,2ro12h,cr125rider,2,Thu Jan 8 13:24:32 2015 UTC,"Nope, just doing File -> Save as... will save the whole website (Web page, the javascript, and images) to a folder on your computer that you can use. I didn't look too thoroughly but after the initial page loads it didn't look like there was any other network traffic from the browser, so it indeed seems to stay client side as the author said. Offline would be the most secure however."
crypto,2ro12h,levoroxi,3,Thu Jan 8 14:02:22 2015 UTC,"Thomas Ptacek is smarter than I am.  In short, don't trust your browser to do crypto yet if you don't have to, and in this case, you don't have to. Maybe when Web Crypto APIs are solidified."
crypto,2riqw2,grymoire,11,Tue Jan 6 15:27:14 2015 UTC,"Original:  ""This is a rough sorting of the popular 'constant' seeds people like to use.""  http://marc.info/?l=openbsd-tech&m=141776286105814&w=2  Plus a commentary on the above:  Random In The Wild  ""A bit of commentary for some selected examples from Theo’s random hunt. Mostly a post commit justification for the great posix violation.""  http://www.tedunangst.com/flak/post/random-in-the-wild  There was also a different audit of bad PRNG use in open source beyond seeds, like naive use of rand(), that I just ran across yesterday, but I haven't been able to find it so far."
crypto,2riqw2,wildeye,3,Tue Jan 6 16:44:08 2015 UTC,That's it! Thanks!
crypto,2riqw2,Godspiral,7,Tue Jan 6 17:26:52 2015 UTC,I will use this one in all software.  srand(0xabad1dea)
crypto,2riqw2,wildeye,11,Tue Jan 6 18:18:26 2015 UTC,"It's self-commenting code, what's not to like?"
crypto,2riqw2,wildeye,4,Tue Jan 6 18:26:11 2015 UTC,"I think the ""different audit"" I was looking for was merely an older Theo post, now that I slow down and reconsider. He's unhappily examining PRNG use in openbsd, and the results are unsurprising but interesting.  Theo's random hunt:  ""Violating randomization standards""  http://marc.info/?l=openbsd-tech&m=141807224826859&w=2  ""Want to help upstream software improve their random?""  http://marc.info/?l=openbsd-tech&m=141836060010420&w=2  via a search for ""rand"" in the mailing list:  http://marc.info/?l=openbsd-tech&w=2&r=1&s=rand&q=b"
crypto,2riqw2,anderm3,4,Tue Jan 6 18:42:02 2015 UTC,Depending on your audience you may also want to include when Dilbert covered this same issue: http://dilbert.com/strips/comic/2001-10-25/
crypto,2riqw2,Spherius,3,Wed Jan 7 13:06:29 2015 UTC,Relevant XKCD
crypto,2riqw2,xkcd_transcriber,1 point,Wed Jan 7 14:20:28 2015 UTC,"Image  Title: Random Number  Title-text: RFC 1149.5 specifies 4 as the standard IEEE-vetted random number.  Comic Explanation  Stats: This comic has been referenced 179 times, representing 0.3828% of referenced xkcds.    xkcd.com | xkcd sub | Problems/Bugs? | Statistics | Stop Replying | Delete"
crypto,2rhysd,stepstep,7,Tue Jan 6 09:04:51 2015 UTC,Interesting but you would have to prove that there are no algorithms than can take 16 numbers and efficiently print a list (or a single) offset in pi decimals that have these numbers. Such an algorithm would break preimage and second preimage resistance.
crypto,2rhysd,aris_ada,1 point,Tue Jan 6 09:16:50 2015 UTC,"I'm hoping that the conjectured normality of pi could help me prove that, but I don't know how yet. Informally, if a number is normal (as pi is conjectured to be), its digits are ""random""-like, so the best an adversarial algorithm could hope to do is try all possible preimages. But I don't really know how to formalize that."
crypto,2rhysd,aris_ada,5,Tue Jan 6 09:23:52 2015 UTC,I can think of a normal number (the number you get by concatening every number like 0.01234567891011121314151617...) that would be trivially break preimage resistance.
crypto,2rhysd,aris_ada,1 point,Tue Jan 6 09:58:35 2015 UTC,"Ah, good point."
crypto,2rhysd,brinchj,6,Tue Jan 6 10:02:52 2015 UTC,"I just checked. The BBP formula is:  hexdigit(k) = 4/(8k + 1) - 2/(8k + 4) - 1/(8k + 5) - 1/(8k + 6)  It's trivial to make a system of equations from k to k+16 and recover preimages. Which is actually cool ""give me any sequence from Pi and I tell you where they are in context""  edit: The exact calculations are more complicated and involve a summation, but the difficulty is probably not much bigger: http://en.wikipedia.org/wiki/Bailey%E2%80%93Borwein%E2%80%93Plouffe_formula#BBP_digit-extraction_algorithm_for_.CF.80"
crypto,2rhysd,gsuberland,5,Tue Jan 6 14:51:17 2015 UTC,"The larger the input is, the slower the hash is to compute? You'd run into timing attacks and probably practical issues with large inputs."
crypto,2rhysd,aris_ada,2,Tue Jan 6 12:15:06 2015 UTC,Isn't that the case with hash algorithms anyway? Any Merkle-Damgaard construction or similar is going to be O(n) against block counts.  Or does the BPP formula exhibit nonlinear performance?
crypto,2rhysd,gsuberland,2,Tue Jan 6 13:18:13 2015 UTC,"yes, because it involves the multiplications and divisions with values derived from the secret. If the input are of fixed size, it's probably possible to make the whole algorithm O(1) (to the expense of the lower n values) but this wouldn't be an hash with unlimited input size."
crypto,2rhysd,Godspiral,1 point,Tue Jan 6 15:02:36 2015 UTC,"Ah, that makes sense. Thanks for the info :)"
crypto,2rhysd,Godspiral,2,Tue Jan 6 15:09:54 2015 UTC,"What is good about this is it allows infinite hash length and infinite input entropy.  This would make a good kdf if either sha512 is applied to shorter than 64 byte inputs or just sha512 is appended to the input.  But from what I read, I think the speed is O(n2) so it is much too slow.  http://bellard.org/pi/pi_n2/pi_n2.html (is an improvement over plouffe method)   Both methods require a list of all primes below n, so this turns out not to be useful for hashing at 20 (or even 4 or 5) bytes entropy scale.  http://en.wikipedia.org/wiki/PiHex ... its big work to get to 1 quadrillion.   1.2 million CPU hours and 1,734 computers from 56 different countries   Its pretty useless if you cannot quickly find the 280th+ digit, because smaller values (250 is anyway) are searchable."
crypto,2rhysd,Godspiral,1 point,Tue Jan 6 19:36:42 2015 UTC,still this would have applications in slow kdf functions by using a narrower range (say 216 or 224) to pick secret xor values to transform another hash.  This provides slowdown even if an attacker precomputes a searchable list of values.
crypto,2rech7,Diasparo,1 point,Mon Jan 5 13:06:05 2015 UTC,The Windows version of TrueCrypt never supported volume creation through the CLI.  /c or /cache does not clear the cache that is /w or /wipecache
crypto,2rech7,uhkr4tyhd,1 point,Mon Jan 5 14:30:23 2015 UTC,"Well that's irritating, was there and reason they chose not to?"
crypto,2rech7,uhkr4tyhd,1 point,Mon Jan 5 17:45:44 2015 UTC,"If I recall correctly it was on the todo list but just was not a high priority.  edit: You should also note the most recent ""safe"" version of TrueCrypt is 7.1a not 7.1."
crypto,2rf6fz,merkle_jerkle,3,Mon Jan 5 18:07:53 2015 UTC,"Wow, that's some of the most creatively bad Python code I've seen in years. I think my favorite part is how you used a while loop as an if statement. That takes inspiration.  Anyway, the clss_left function isn't reversible, so yes your cipher is broken. As in it doesn't even function as a cipher because decryption doesn't work.  Did you even test your code?  Edit: Nevermind, I misread the code."
crypto,2rf6fz,Uncaffeinated,2,Tue Jan 6 04:45:58 2015 UTC,"Wow, that's some of the most creatively bad Python code I've seen in years. I think my favorite part is how you used a while loop as an if statement. That takes inspiration.   You do not have to be an asshole to someone looking for help."
crypto,2rf6fz,_ihatemyself,1 point,Tue Jan 6 05:07:57 2015 UTC,"You do not have to be an asshole to someone looking for help.   It's not even that, it's that the reverse of the clss_left is the clss_right by the same vector...  If you notice the link in the post, you will see the codes challenge that has already been won/awarded. The ciphertext was recovered with a key exhaustion attack, over a known key space, using a given PT/CT pair, and both sets of algos.   Wow, that's some of the most creatively bad Python code I've seen in years. I think my favorite part is how you used a while loop as an if statement. That takes inspiration.   Why thank you."
crypto,2rf6fz,Uncaffeinated,2,Tue Jan 6 05:23:14 2015 UTC,"On closer inspection, you're right. I didn't notice that the plaintext had to be exactly 16 characters, and then you shift the length down by 1, thus capping iv to 7. Sorry about that. It's pretty dense and convoluted code and I didn't take the time before to pore over every detail so I got the wrong conclusion.  Anyway, I wouldn't have commented on the code quality except that you mentioned it yourself, so I thought it was ok. And for what it's worth, I learned something from the code since I didn't realize you're allowed to have trailing commas in parameters lists like that."
crypto,2rbpm3,bobafett89,13,Sun Jan 4 19:45:21 2015 UTC,I really like where VeraCrypt is going. They've used TC's original source code and added a few important improvements suggested by the auditing project. They have my confidence at the moment.
crypto,2rbpm3,aydiosmio,0,Sun Jan 4 23:40:49 2015 UTC,Basically the same as what CryptoShed has done. Really need to migrate my TC containers.
crypto,2rbpm3,Diasparo,3,Mon Jan 5 00:56:28 2015 UTC,It's CipherShed and they haven't done anything.  VeraCrypt is now on its sixth product release (version 1.0f) and CipherShed has yet to produce an initial release.  VeraCrypt is here:  http://veracrypt.codeplex.com
crypto,2rbpm3,commenter8,23,Sat Jan 10 02:40:52 2015 UTC,"No. There is no consensus. It should be known that TrueCrypt isn't supported anymore and there was that strange falling out by the development team. That said, even after an audit it looks like it's top of the line and very secure.   Try /r/netsec, and various irc channels dedicated to this stuff for more info."
crypto,2rbpm3,d1str0,10,Sun Jan 4 19:49:27 2015 UTC,"That said, truecrypt was considered by the NSA/GHCQ to be 'catastrophic'. One shouldnt write off older versions of truecrypt and ciphershed will share its strength."
crypto,2rbpm3,sixstringartist,3,Sun Jan 4 23:32:44 2015 UTC,Good point. It seems completely solid other than the mysteriousness surrounding it being discontinued.
crypto,2rbpm3,d1str0,1 point,Mon Jan 5 00:46:53 2015 UTC,Yeah that makes me wonder about it.
crypto,2rbpm3,silentec,3,Mon Jan 5 02:42:50 2015 UTC,"I'm in the camp that they just were tired of maintaining it.   The project was impressive and it was amazing that it was kept up for so long, but I can see how they would want to be done with it.  Also, they may have decided to drop the project if they were contacted by 3 letter agency and strong-armed into putting flaws in the program."
crypto,2rbpm3,Dyamalos,0,Mon Jan 5 04:26:22 2015 UTC,That makes the most sense but I really don't understand the Bitlocker part.
crypto,2rbpm3,ThePooSlidesRightOut,2,Mon Jan 5 04:30:53 2015 UTC,That;s the only part that makes me thing they were compromised and needed a way out. The truth of the mater is that anyone who uses truecrypt aren't the type of people who are likely to trust bitlocker.   I think it might have been some kind of message.
crypto,2rbpm3,Dyamalos,5,Mon Jan 5 05:05:44 2015 UTC,A kind of warrant canary ?
crypto,2rbpm3,samsonx,2,Mon Jan 5 11:23:44 2015 UTC,I never saw the results of the actual code audit. Did that ever come out or what?
crypto,2rbpm3,JBu92_work,5,Sun Jan 4 22:49:38 2015 UTC,"Yes it came out. However, stage 1 was not a cryptographic assessment, but rather a code integrity assessment. They were looking for memory corruption bugs, information leaks, etc, but not neccessarily looking for, or focusing on crypto.   If I remember right, it went quite well. There were only a handful of small bugs, and non of them were ""game over"" type vulns."
crypto,2rbpm3,Vektorical,3,Sun Jan 4 23:26:13 2015 UTC,"It wasn't even a code audit of all the code, just the bootloader and some similar portions.   It did go well, but since it didn't cover the implementation of the actual crypto fully, it's not worth that much."
crypto,2rbpm3,SAI_Peregrinus,3,Mon Jan 5 00:37:23 2015 UTC,"Most of not all of it, yes."
crypto,2rbpm3,d1str0,4,Sun Jan 4 23:04:00 2015 UTC,The TrueCrypt audit site:  http://istruecryptauditedyet.com/
crypto,2rbpm3,q8ydC2Da4g,2,Mon Jan 5 03:44:24 2015 UTC,"2nd phase hasn't been released, so I assume it's still in progress."
crypto,2rbpm3,IndoctrinatedCow,13,Sun Jan 4 23:04:24 2015 UTC,"truecrypt-7.1a is fine for now until another proves itself.. just don't trust later versions than that. I've not got OS X, so can't suggest a chksum for that so take care getting a good source.. perhaps find somewhere that also offers the linux version as sha256sum: 9d292baf87df34598738faef7305cddaa15ea9f174c9923185653fb28f8cfef0"
crypto,2rbpm3,davidpbrown,14,Sun Jan 4 19:54:31 2015 UTC,Seconded. Read Steve Gibson's take on why it's OK to keep using TrueCrypt 7.1a: https://www.grc.com/misc/truecrypt/truecrypt.htm  You can also get signed TrueCrypt releases at that site.
crypto,2rbpm3,flitterio,3,Sun Jan 4 20:39:46 2015 UTC,"I would like to point out that they say ""we have every reason to believe that [truecrypt] is utterly bulletproof."" Which is really good proof that they know jack shit about security."
crypto,2rbpm3,DoubleMike,2,Mon Jan 5 09:55:20 2015 UTC,"That classes a lot up but I'm still wary. On the other hand, it is the best cross plankton."
crypto,2rbpm3,IAmAMagicLion,10,Sun Jan 4 23:38:11 2015 UTC,"What exactly is it you are worried about?  I think people need to keep things in perspective. The danger from the NSA comes from the ability of LE and the US government to use it to track and crush dissent through data retention.  As far as personal systems go, if the NSA wants into your systems, they will get in.  They have unlimited resources and more phd's than Fermilab and CERN combined.  Keep things in perspective."
crypto,2rbpm3,TheGuildedCunt,5,Sun Jan 4 23:50:36 2015 UTC,"and if you were someone to catch the NSA's attention you'd likely be on a no-fly list, snatched in the middle of the night and fed ensure through your butthole. So I would say that making sure your encryption holds out would be bottom of the list of things to worry about at that point."
crypto,2rbpm3,DasWood,2,Mon Jan 5 11:28:32 2015 UTC,in. They have unlimited resources and more phd's than Fermilab and CERN combined. Keep things in perspective.    The power and authority blind people... I like to think that CERN and Fermilab have a better smart use of their phd and other resources.
crypto,2rbpm3,Ikario404,2,Fri Feb 6 20:02:38 2015 UTC,"I hope English is your second language.  If it isn't, I don't think you have any business commenting on this topic.  But to your point, who puts knowledge to better use is irrelevant.  The NSA has more mathematics PhDs and cryptographers than any organization on Earth (by far).  Many people believe their may be whole areas of mathematics, that academia are not aware of, known only to the NSA.  That's the scope of their power."
crypto,2rbpm3,TheGuildedCunt,1 point,Fri Feb 6 20:47:56 2015 UTC,"Ok, this is ridicolous. I have no idea how many mathematics they have on their payroll, but talking about ""whole area of mathematics"" unknown to the world is just plain impossible. This is just not how things work."
crypto,2rbpm3,Sylbinor,1 point,Tue Apr 7 23:26:05 2015 UTC,How exactly?  They have more PhDs on payroll than any academic organization on earth.  They have unlimited money; everything is classified.  To say that they don't have information not publicly available seems pretty ridiculous.  How could they not considering the NSA is the largest employer of math PhDs on earth?
crypto,2rbpm3,TheGuildedCunt,4,Tue Apr 7 23:44:00 2015 UTC,"Basic knowledge: Vera fixes some issues in TC, including the biggest issue (header value iteration counts).  That means that it can't be directly backwards compatible with TC volumes.  Ciphershed chose not to address that issue and thus its still backwards compatible.  Also, mounting a drive on Vera is way slower than on TC (30-90 seconds) because of the iterations increase.  All that and more can be found here: https://forum.truecrypt.ch/t/veracrypt-or-ciphershed/449/10  I know nothing about DiskCryptor.  I'm as interested as you, though."
crypto,2rbpm3,49898rfnspd9f8m9849,4,Mon Jan 5 08:04:15 2015 UTC,"I've pointed out in other thread that higher iteration count enables a different attack.  Its especially a problem with a short hash such as ripemd160.  Instead of 30-90 second load times (which btw don't affect asic fast hash functions), you would be much better off adding a lower case word or 2 to your password, because that might take you 2 seconds typing time instead of the slow hashing time.  Doing so is more effective security."
crypto,2rbpm3,Godspiral,2,Tue Jan 6 02:45:31 2015 UTC,How about self-encrypting drives (SED)? I thought that it makes the whole software encryption discussion moot.
crypto,2rbpm3,boukeversteegh,2,Thu Jan 8 18:12:40 2015 UTC,"Well, that hasn't worked out at all for people trusting in RNG stuff on Intel chips.  Instances such as this http://arstechnica.com/security/2013/12/we-cannot-trust-intel-and-vias-chip-based-crypto-freebsd-developers-say/"
crypto,2rbpm3,BeaverViking,2,Fri Jan 9 06:14:48 2015 UTC,VeraCrypt is the strongest product right now.  It took the TrueCrypt 7.x code and made it stronger.  Security improvements have been implemented and issues raised by the TrueCrypt code audit (which completed its initial review of TrueCrypt just before the TrueCrypt developers abruptly retired) have been addressed.  http://veracrypt.codeplex.com
crypto,2rbpm3,commenter8,2,Sat Jan 10 02:52:51 2015 UTC,"I use VeraCrypt and am very happy with it. TrueCrypt is not maintained and hadn't been updated in years. VeraCrypt fixed a lot of major issues and I honestly trust it far more than TrueCrypt, which disappeared under suspicious circumstances. I trust what is maintained actively."
crypto,2rbpm3,katanin,2,Fri Jan 23 03:54:30 2015 UTC,LUKS is strong and is open source audited  try LUKSUS if you want to throw yourself into it without reading any manuals http://thomasfrivold.github.io/luksus
crypto,2rbpm3,espero,4,Mon Jan 5 12:53:18 2015 UTC,LUKS has not undergone a proper audit beyond merely being open source and 'many eyes' theory'd.
crypto,2rbpm3,XSSpants,-1,Tue Jan 6 15:59:04 2015 UTC,"The many eyes is in essence the most powerful form - a crowdsourced audit. It has thousands of Linux developers looking at it on a weekly basis. I trust it fully.   The only thing missing from it is plausible deniability. LUKS volumes come with a LUKS header. That kinda sucks imho. There are ways however, you must use Cryptsetup without a LUKS header. This makes the volume data insanely vulnerable to filesystem-integrity checkers and such, which may change the a single drive bits and render the whole partition/volume unreadable. Truecrypt had better plausible deniability."
crypto,2rbpm3,espero,9,Tue Jan 6 16:47:04 2015 UTC,"shellshock...Heartbleed, we all know how well many eyes has worked out overall, but things slip through."
crypto,2rbpm3,XSSpants,-2,Tue Jan 6 18:06:05 2015 UTC,OpenSSL is not the same as the Linux kernel in scope nor development approach. We all - don't know what you are talking about.
crypto,2rbpm3,espero,9,Tue Jan 6 19:16:07 2015 UTC,LUKS is not the same as the Linux kernel in scope nor development approach. What are you talking about?
crypto,2rbpm3,XSSpants,-3,Tue Jan 6 19:50:11 2015 UTC,Heartbleed is a security bug disclosed in April 2014 in the OpenSSL cryptography library. Thus I mentioned the OpenSSL project. Therefore it cannot be compared to the vetting of dm-crypt and LUKS.
crypto,2rbpm3,espero,7,Tue Jan 6 20:05:36 2015 UTC,"OpenSSL is an opensource project, subject to the same ""many eyes"" theory.  Same with bash.  yet both had critical vulns slip for years.  No relation to the Kernel and I never brought the Kernel or its dev attention up.  I'm just saying, things slip, and LUKS is not immune, and has not been properly audited EG truecrypt audit (ongoing)."
crypto,2rbpm3,XSSpants,0,Tue Jan 6 20:11:01 2015 UTC,"CipherShed is a reboot of TrueCrypt that many have switched to since TrueCrypt's demise. https://ciphershed.org/  Unfortunately, Jason Pyeron, a member of the project management committee and one of the security developers works for DISA, a government agency, according to his LinkedIn profile.  It looks like CipherShed has been compromised in the initial founding and is not a viable alternative to TrueCrypt.  List of CipherShed project members: https://ciphershed.org/about/ We should do our research on each and every project member.  What is DISA? https://en.wikipedia.org/wiki/Defense_Information_Systems_Agency"
crypto,2rbpm3,vicks84zi,2,Thu Jan 8 04:06:09 2015 UTC,https://forum.ciphershed.org/viewtopic.php?f=5&t=77
crypto,2rcpal,GucciVersaceGucci,3,Mon Jan 5 01:07:52 2015 UTC,Where are you in life?  Is pursuing a degree in mathematics or computer science an option?
crypto,2rcpal,tom-md,1 point,Mon Jan 5 01:43:21 2015 UTC,Best answer. Mathematics and deep computer science is really the only way.
crypto,2rcpal,Korbel,4,Mon Jan 5 14:03:00 2015 UTC,"You can get skills that are needed (software development, QA, documentation, support, PR/advocacy) or you can make money doing whatever it is you're good at and then give $ to the people who develop the software.   You can also run a Tor node, or a full Bitcoin client, and keep the networks strong."
crypto,2rcpal,quercus_suber,1 point,Mon Jan 5 02:32:36 2015 UTC,"Join various IRC networks and channels realated to these topics and help teach people how to use them. Since these are also open source projects, you can contribute even if you don't know how to code yet."
crypto,2r9lot,RelevantJesse,3,Sun Jan 4 03:20:31 2015 UTC,"Below is advice based solely on the assumption your wife wants to pursue a research-track career, that is, to work towards a PhD in the area and become a professor or researcher.  Cryptanalysis and cryptography (in the non-breaky-stuff sense) are two different things, and are different from, say, netsec/infosec/systems.  I don't know that much about cryptanalysis and where one would go to find active researchers in the area, but based on what I've seen, I would emphasize a mathematical approach, but it's still considered a CS field so not having a CS major may hurt, especially considering many schools looks at your score on the CS Subject-GRE for the CS graduate program.  Double major in Math and CS if possible.  Spend the junior and senior summers doing undergraduate research if possible.  There are also many sub-disciplines within cryptanalysis, and they're all pretty neat.  There are ones that focus on breaking underlying mathematics, which is closer to computational number theory more than anything (factoring algorithms, etc). I would say the Europeans (and especially the French) and Japanese have a larger presence in this area, though the US also has some people looking into number theoretic breaks.  Others focus on breaking real-world things.  The Israelis (and Adi Shamir in particular) have some neat results in side-channeling hardware.  Poor implementation of crypto also resulted in many works breaking them, and these are mostly on the security side of things."
crypto,2r9lot,DoWhile,2,Sun Jan 4 06:53:28 2015 UTC,"Just fyi, the CS GRE was discontinued last year."
crypto,2r9lot,zrathustra,1 point,Sun Jan 4 07:24:19 2015 UTC,"Oh jeez, I am behind the times."
crypto,2r9lot,DoWhile,2,Sun Jan 4 07:59:55 2015 UTC,"Definitely prioritize math over CS.  It's a long journey, and you have to love the crypto topic to stick with it.   Basically the same schools as the top tech universities. MIT, Stanford, Chicago, etc.  You can google the programs."
crypto,2r9lot,convivialdingo,2,Sun Jan 4 05:39:46 2015 UTC,"Modern cryptography is more geared towards theoretical CS than math, but I'm not sure what the status is with cryptanalysis specifically.  There are quite a few schools that do good research in crypto, such as UCB, UCLA, UCSD, MIT, Stanford, etc. However, most crypto research is done at the graduate level, though you can get involved in undergrad research if you take the relevant classes early enough."
crypto,2r9lot,Ar-Curunir,1 point,Sun Jan 4 06:20:49 2015 UTC,"Thanks everyone for the input! I also forgot to mention that she is active duty military, so we're hoping to find something online or do night classes in the north San Diego county area.  She found Mercy College that offers both Math and CS online. Would this be okay for undergrad, then look at one of the more prestigious schools for grad level?"
crypto,2r9lot,Ar-Curunir,2,Sun Jan 4 21:02:25 2015 UTC,"UCSD is excellent for crypto and fits your requirements very well.  Perhaps she can join a community college for a couple of years and then apply to UCSD after that? She can get the lower div reqs out of the way quickly and cheaply that way.  Getting into topnotch institutes for graduate work is a difficult task, so I'd think that getting the best start possible with a prestigious undergrad university would be a good idea."
crypto,2r6khl,bromodfly,3,Sat Jan 3 06:21:55 2015 UTC,Python is very simple. I would suggest using Python as it's powerful to do crypto related things fast as there are plenty of helper libraries.  There is a thread on the sidebar for getting started resources. I'd suggest Applied Crypto and Cryptography Engineering.
crypto,2r6khl,d1str0,1 point,Sat Jan 3 07:04:01 2015 UTC,Thanks! I'm on my phone right now so I didn't see the sidebar. Sorry to waste your time reading this. I appreciate the suggestions. Looks like I'll be getting back to python.
crypto,2r6khl,cunttard,2,Sat Jan 3 07:10:59 2015 UTC,"Python definitely simplifies crypto - especially asymmetric cryptography (Diffie Hellman, RSA, Elliptic Curve, etc.). A really gentle and nice introduction with python code can be found here. It is accompanied by a talk at 31c3 from prominent cryptographers djb and Tanja Lange."
crypto,2r6khl,format120,1 point,Sat Jan 3 07:49:33 2015 UTC,Wow!  This is great!
crypto,2r6khl,_ihatemyself,1 point,Sun Jan 4 01:45:28 2015 UTC,"http://simonsingh.net/books/the-code-book/  It is a wonderful read, and costs less than $20!  Also, the same author wrote Fermat’s Last Theorem which is INSAAANNNEEEE you should look into getting that one as well.  PS: Your local library likely has both books available for free!"
crypto,2r26g7,darktone21,4,Fri Jan 2 02:16:26 2015 UTC,"Without a known plaintext / ciphertext pair, it's hard to guess. Your best bet is to reverse engineer the software that created the ""encrypted"" data."
crypto,2r26g7,gsuberland,2,Fri Jan 2 03:27:45 2015 UTC,"Well, what would call these?    Jesse <-> b533d9a127c1  Labroca <-> 1b83ce2b2efe48f8ae05 6924 Homing Pigeon Place <-> cd261d1750b443"
crypto,2r26g7,asdjfklasjdfl,6,Fri Jan 2 03:43:36 2015 UTC,"Not pairs, unless that last one is a really good compression algorithm."
crypto,2r26g7,gsuberland,1 point,Fri Jan 2 03:47:35 2015 UTC,"It is more likely compression than encryption.  The first 2 are uncompressed.  The last one could use dictionary replacements for the 3 common words, and use contextual knowledge of address formats to expect a leading number."
crypto,2r26g7,Godspiral,2,Fri Jan 2 16:54:13 2015 UTC,"Maybe, but I'll stick with Occam's razor here and presume that it's not a matched pair. That, to me at least, is more likely than a custom compression algorithm designed solely for addresses, with no obvious size correlation in size for non-dictionary inputs."
crypto,2r26g7,gsuberland,2,Fri Jan 2 19:16:49 2015 UTC,"Given the lengths of the ""encrypted"" strings, I'd guess it's a substitution table of some sort and not ""true"" encryption."
crypto,2r26g7,GahMatar,2,Fri Jan 2 03:19:17 2015 UTC,Or basic compression.
crypto,2r26g7,XSSpants,1 point,Fri Jan 2 20:34:22 2015 UTC,Why did the long string get a shorter representation and the short string a longer one? Makes no sense.  The whole question here is also very dubious.
crypto,2r26g7,GahMatar,2,Fri Jan 2 20:37:22 2015 UTC,Compression might treat a string of basic english really well vs just one word.  Why would encryption do the same? That's what makes no sense.
crypto,2r26g7,XSSpants,1 point,Fri Jan 2 20:38:50 2015 UTC,Compression sometimes just add overhead. There's no perfect compression.
crypto,2qxoey,speckz,2,Wed Dec 31 17:38:30 2014 UTC,"Not direct quote, 'NSA is the largest employer of cryptographers by far...' kind of puts this in perspective as NSA by quote of der Spiegel is at war with internet security. That includes cryptography. What kind of expectation of secure solutions does this place on the product space coming from the us,UK,ca,nz and au? Even just for basic integrity?   If it is true that the NSA is performing mil op in us soil, even by ""proxy via UK"", should not it be expected that if the civil. Gov. Cannot protect from violation of mil/civil bounds the same can be expected for their services and products (corporation s)?  Edit: added quotes since the hierarchy of the ""5 i's"" is unknown and unvalidated. For all we know the us is just the meathead and muscle.  Due to the projection of this highly antagonistic env of a mil op by us mil in us, how does this effect us based crypto researchers? It is safe to assume all us and 5i univ academia in collusion, does this lower standard of expectation of quality secure Sol from us?"
crypto,2r0rwc,Godspiral,8,Thu Jan 1 18:07:13 2015 UTC,"If your hash function is bad enough that hashing twice is a significant problem, then your hash function was broken to begin with.  In the random oracle model, the odds of a given pair colliding after k hashes with n bits is less than k/2n. So with a 256 bit hash, you can hash 264 times and still have 192 bits of security.   Note that this also doesn't change the work required for a brute force collision attack at all because the higher success probability is offset by the increased number of hash computations. It does make brute force preimage attacks slower (which is the whole point of hashing passwords multiple times)"
crypto,2r0rwc,Uncaffeinated,2,Thu Jan 1 21:21:38 2015 UTC,"In the random oracle model, the odds of a given pair colliding after k hashes with n bits is less than k/2n. So with a 256 bit hash, you can hash 264 times and still have 192 bits of security.   sha1 is still used for repeated hashing... 17-20 bits off that could be a bigger deal.  There is a possibility that some hash values are much more probably than others if they form universal cycle attractors.  Just because no one has openly looked for such values doesn't mean they don't exist or that no one knows about them.  If there is a list of 250 extremely likely repeated hash values for sha1, then that is a manageable list for someone with 2 slightly bigger computers than I have to crack many things.  One way to attack a pkdbf scheme is to precompute a table of 1m (or 10m) dictionary passwords to a specific scheme.  There is likely to be fewer than 1m cyclic hash values, but in addition, its an attack everything at once method that is quick to apply after tables are generated.  Its not as though fast sha hardware is out of reach for anyone big.  The bonus of this approach is that it grabs passwords outside of the database that also hit the same cycles after repetition.... possibly 218 more.  sha functions are simply not RNGs and shouldn't be used as such"
crypto,2r0rwc,Uncaffeinated,2,Thu Jan 1 22:14:41 2015 UTC,"And 160-20 = 140. There is no practical difference between a 2140 attack and a 2160 attack. I'm still not convinced that there is even a theoretical attack here though. You still haven't demonstrated an actual attack faster than brute force, even a theoretical one.  If a cryptographic hash function can't be used as an RNG, it is a broken hash function.  Go ahead and look for a cycle if you want. Maybe if you find one, you could get a paper published. But I wouldn't waste my time trying. SHA1 has been extensively studied, and while it has weaknesses, I doubt it could be broken by a random person without much experience on a personal computer."
crypto,2r0rwc,bascule,1 point,Fri Jan 2 06:03:22 2015 UTC,see http://www.reddit.com/r/crypto/comments/2r0rwc/a_problem_with_hashes_specifically_repeated/cnc5qjv
crypto,2r0rwc,fletom,7,Fri Jan 2 15:13:34 2015 UTC,"In general if a hash function isn't broken, iterated hashing should be fine. You're using truncated digests and finding what are effectively prefix collisions because you've gone beyond the birthday bound, which isn't possible given a typical hash function digest (e.g. 256-bits)  There are multicollision attacks on iterated hashing but it's a far more sophisticated technique:  http://link.springer.com/chapter/10.1007%2F978-3-642-21518-6_11  Contrarily, hashing twice resolves certain classes of attacks, for example length extension attacks on Merkle-Damgaard."
crypto,2r0rwc,conradsymes,7,Thu Jan 1 21:55:10 2015 UTC,"Your explanation is poor and this ""J"" language is completely unreadable. Can you give a single example of a 256-bit input that hashes to itself after a certain number of iterations? Why are you looking at the first two bytes of hashes?"
crypto,2r0rwc,fletom,1 point,Thu Jan 1 19:26:57 2015 UTC,"To be very clear, he's complaining about the birthday problem, which occurs even with block ciphers in OFB mode, which could cause short cycles. Very short cycles, like the one he is afraid of, is very very very (+5 more very) low."
crypto,2r0rwc,fletom,-5,Sun Jan 4 00:52:19 2015 UTC,"Can you give a single example of a 256-bit input that hashes to itself after a certain number of iterations?   a rng can have the same display value output twice, without it happening 3 times.  The problem comes when using sha as a rng.  There is no guarantee that there is no h(x) = x, but there is also the issue of short ring cycles where h(h(h(x)))) = x (cycle of 3) that is also not part of the hash design.  So, not using hashing functions as rngs is the lesson, and it is probably more secure to hash once than twice, even if the loss in security is marginal."
crypto,2r0rwc,FryGuy1013,-5,Thu Jan 1 20:05:21 2015 UTC,"Can you give a single example of a 256-bit input that hashes to itself after a certain number of iterations?   That would be hard as fuck.   Why are you looking at the first two bytes of hashes?   Because the principle is the same.  For ECC encryption below 256 bits, you take just the first ""few"" bytes of the hash.  If your input text has less entropy than the hash function, then repeated hashing has even less total entropy than the input even if it stays disguisable.  as for the J language, its at least writable as one liners."
crypto,2r0rwc,fletom,3,Thu Jan 1 19:45:27 2015 UTC,"That would be hard as fuck.   Well then I'm not sure how you're claiming that this is a flaw in SHA256. What exactly are you doing to ""repeat"" the hash and look at the variation of the first two bytes? Are you using SHA256(SHA256(input))[:2], or SHA256(SHA256(input)[:2])[:2] (where [:2] truncates to two bytes)? Because the latter is not how one repeats a hash and will obviously converge to a small number of circular patterns after a number of iterations, using the list of all possible inputs. The former is completely safe and won't give you significantly less entropy unless you start using a number of iterations closer to 2256 (which clearly, is impossible).   as for the J language, its at least writable as one liners.   Reading code is a lot more important than writing it."
crypto,2r0rwc,bored_me,-1,Thu Jan 1 20:25:56 2015 UTC,"Because the latter is not how one repeats a hash   It is how you repeat a sha256 hash.  But you keep the full 32 bytes.  After your first hash, inputs to future hashes are limited to 32 bytes + constant nonce if any.  The full hash will still converge to cycles, as it is not a design feature of sha to prevent such.  The issue has nothing to do with breaking sha for its reversibility.  Just that it is not a good RNG, even though it is used as if it were."
crypto,2r0rwc,autowikibot,1 point,Thu Jan 1 20:51:50 2015 UTC,"Just that it is not a good RNG   Who suggested to you that using any kind of hash function as an RNG was a good idea in the first place? How would that even work?   The full hash will still converge to cycles   No. Every time you increase the hash iterations you have a one-in-2256 chance of arriving at your original input. Now, as you probably know, one-in-2256 is almost exactly zero. This means that while there theoretically are circular chains in SHA256-space, they are almost all way too long to have any real effect. They are so long, in fact, that as you yourself admitted not even a single such chain is known to human kind. Now, a hash function only starts getting weaker (i.e. some output values become more common than others) once the number of iterations you are using starts to exceed the length of its chains. This is what you observed with your toy ""SHA16"" function. With actual SHA256, however, whether you use 15k or 15 billion iterations, it just won't be enough to make a difference. The most hash iterations I've ever seen in practice is in the tens of thousands, by the way.  Also, note that this is not a property specific to SHA256. Any conceivable hash function will cycle given enough iterations."
crypto,2r0rwc,fletom,1 point,Fri Jan 2 02:42:00 2015 UTC,Who suggested to you that using any kind of hash function as an RNG was a good idea in the first place? How would that even work?   any repeated hashing is using the hash function as a generator seedi+1 = H(seedi )
crypto,2r0rwc,Uncaffeinated,2,Fri Jan 2 13:38:22 2015 UTC,I think the difference is he's re-hashing the first two bytes only. Given the behavior that each time you rehash it doesn't get smaller proves that the 256-bit space doesn't collide to a smaller space.
crypto,2r0rwc,Thunder_Child,2,Thu Jan 1 20:51:45 2015 UTC,"The way he did it doesn't really prove much.  His pass 2 found about the same number of 2 byte prefixes with 50 rehashes as a single hash.  The exact number of collisions is random, and we wouldn't expect many after 50.  It also doesn't have time to hit a narrow cycle either."
crypto,2r0rwc,filteredpi,1 point,Thu Jan 1 21:20:18 2015 UTC,"My starting inputs are the 2 letter strings from ascii 0 0, 0 1... 255 255.  216 strings.  Some versions are padded with an extra letter, but its still 216 inputs even with pad.  between each hash, I take the first 2 bytes of sha256 output , and if there was an initial pad, I add it to that as well.  So after the first pass, you necessarily have at most 216 unique values, and likely fewer due to collisions.  On the second pass you necessarily have at most the same as after the first, and again likely fewer due to collisions.  ie. if you hash 48k values, you can not possibly have more than 48k outputs.  Fewer due to collisions.  So if you write a sha16 and sha24 function, which is the cut off output of sha256, then that is the function you should be repeating.  Your code appears to do the cutoff after the repeated loop.  Its interesting though that your approach found 80 collisions on full sha256 between pass 3 and pass 4"
crypto,2r0rwc,Twylite,2,Thu Jan 1 22:19:20 2015 UTC,"Its interesting though that your approach found 80 collisions on full sha256 between pass 3 and pass 4   These are not collisions of any kind. They are just ""missing"" byte prefixes, which is totally normal and expected. If you generate a hundred random numbers from one to a hundred, they aren't going to be [1, 2, 3, ..., 99, 100]."
crypto,2r0rwc,Twylite,1 point,Thu Jan 1 21:33:54 2015 UTC,"They may or may not be collisions, as the 80 drop can be explained by randomness.   His pass 5 going up shows that it is in fact randomness rather than collisions.  You are completely wrong in calling his approach useful for anything though."
crypto,2r0rwc,bitwiseshiftleft,1 point,Fri Jan 2 02:49:32 2015 UTC,I'm unsure why you didn't fix it after the issue was pointed out.  You are reapplying the hash on the full 32 byte output.  Of course there won't be any differences with a single hash if you just look at the first 2 bytes after 500 or 5000 full 32 byte hashes.  Its the same as 1.  You just needed to trim the hash inside the loop instead of at the end.  No idea why you chose not to.
crypto,2r0rwc,bitwiseshiftleft,1 point,Fri Jan 2 15:26:11 2015 UTC,I love your forth pass. I also like bad puns.
crypto,2r0rwc,bitwiseshiftleft,1 point,Fri Jan 2 23:33:15 2015 UTC,"Forth (programming language):       Forth is an imperative stack-based computer programming language and programming environment. Language features include structured programming, reflection (the ability to modify the program structure during program execution), concatenative programming (functions are composed with juxtaposition) and extensibility (the programmer can create new commands). Although not an acronym, the language's name is sometimes spelled with all capital letters as FORTH, following the customary usage during its earlier years.    Image i     Interesting: 51-FORTH | Open Firmware | MUF (programming language) | Pforth   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2r0rwc,bitwiseshiftleft,1 point,Sat Jan 3 00:41:25 2015 UTC,"I can't reproduce your results   Yep, because there's nothing to reproduce. You are doing hash iterations correctly, while he is doing them very, very incorrectly."
crypto,2r0rwc,bitwiseshiftleft,2,Thu Jan 1 22:28:44 2015 UTC,"I think he's arguing that the fact that collisions exist for SHA256 is somehow a weakness, despite the fact that there's no practical way to find them."
crypto,2r0rwc,Uncaffeinated,1 point,Thu Jan 1 22:29:04 2015 UTC,"Its a weakness as an RNG, and in long ""rehash"" chains, that would find any cycles that do exist in these hashes.  These hashes are used as RNG substitutes in PKBDF type applications."
crypto,2r0rwc,Uncaffeinated,-2,Fri Jan 2 02:50:52 2015 UTC,"I'm saying the loss of entropy is likely a constant % of the full 256 bits.  After 150 iterations it went to below 1% of original input permutations including when intermediate repadding with nonce.   Take any cryptographic random number generator and generate 65536 random numbers   Actually, most RNGs have a period where the chain of f(seed) is guaranteed not to repeat until the end of the period.  RNGs are chosen mathematically for long period, and are specifically designed to repeatedly use the last output of the generator as the next input.    Hash functions have no design consideration for having a long period.  They just have difficult reversibility."
crypto,2r0rwc,perciva,-2,Thu Jan 1 18:14:58 2015 UTC,"Are you sure about cryptographically secure RNG's?   I don't know all CPRNGs, but BBS is my favorite, and it has a deterministic period.  Generally, I theorize that 2 fast insecure RNGs (prime LCGs) can be useful CPRNGs if their seeds are never leaked.  You would also have a hard time using byte output from mersenne twister to guess what the seed is, but it seems impossible to me if that output is combined with another RNG (that you do not see the seed of either).   that would be considered a cryptographical FLAW rather than a feature   If you cut off the output of an RNG to 2 bytes, you do not affect the seed of that RNG.  The output of sha256  sha256  'a' is always the same, whereas any RNG can have the following generated number after sha256 a to be different because the internal seed of the RNG is not set to sha256 'a' just because that was its last output."
crypto,2r0rwc,i3nikolai,4,Thu Jan 1 21:33:58 2015 UTC,"BBS is my favorite, and it has a deterministic period   I'm not sure what you mean by ""deterministic"" in this case, but the period of BBS definitely depends on the chosen seed. See Simple Seed Selection in BB&S by Terry Ritter for an in-depth discussion on avoiding BBS short cycles.   I theorize that 2 fast insecure RNGs (prime LCGs) can be useful CPRNGs if their seeds are never leaked.    You shouldn't assume this. In fact, I'd expect prime LCGs to form some kind of group that makes attacking an ensemble of LCGs just as hard as attacking a single one. It might be interesting to try and prove this.   You would also have a hard time using byte output from mersenne twister to guess what the seed is   Not really. You just have to guess the alignment and the rest falls into place. There aren't that many possibilities for that alignment (for MT19937, there are only 4).   it seems impossible to me   It's not hard to build a cryptosystem that you yourself can't break. What's hard is coming up with one that nobody can break."
crypto,2r0rwc,mrschyte,2,Thu Jan 1 21:42:41 2015 UTC,"I agree on this. Using a simple RNG based on dlp and mod still show pattern in distribution. Although difficult to solve, the pattern indicate solving dlp may be unnecessary."
crypto,2r0rwc,mrschyte,2,Thu Jan 1 18:34:29 2015 UTC,"If you cut off the output of an RNG to 2 bytes, you do not affect the seed of that RNG.   You're describing an iterated hash, not a RNG based on a hash function.  You have insisted several times that iterated hashing is an RNG.  This is simply not the case.  Iterated hash is (one construction for) a Key Derivation Function (KDF); it may look very similar to certain RNG constructions, but it is not the same.  KDFs are intended to produce the same output given the same input; an RNG is not.  For an iterated hash you replace the ""seed"" at each step with the output of the previous step.  This makes the construction unsuitable as an RNG because (i) you leak information about the seed on every iteration; and (ii) each iteration raises the probability of a collision on account of the birthday paradox, which is what you are seeing in your experiment and claiming to be ""decreased entropy"" that results in a (short) cycle.  PBKDF2 is not made insecure by such ""decreased entropy"" because even at millions of iterations the probability of a collision is still extraordinarily low (4.8e29 iterations would have a 10e-18 probability of collision).  An RNG based on a hash is constructed using a hidden seed.  A simple construction could be for example: Output = HMAC-SHA-256(Seed, Counter += 1).  This is essentially a pseudorandom function operated in counter mode, which is provably unpredictable (given mild assumptions about the compression function of SHA-256 and assuming that the Seed is not revealed).  Truncate and collect the output of this function any way you want, run it through whatever statistical tests you want, and you will find no discernible patterns of lack of entropy.  A better construction would provide backtracking resistance, so that previous outputs cannot be reconstructed even if the seed is (subsequently) compromised.  For example: Output = HMAC-SHA-256(Seed, Counter += 1); Seed = HMAC-SHA-256(Seed, ""New Seed"" || Counter); (where '||' is string concatenation).  The seed is subject to a one-way transformation on every iteration.  I don't recommend any of these example constructions.  You can find proper Hash- and HMAC-based constructions in NIST SP800-90A."
crypto,2r0rwc,autowikibot,1 point,Thu Jan 1 18:59:23 2015 UTC,"You have insisted several times that iterated hashing is an RNG   I may be using the wrong terminology then.  A software PRNG is not random.  It is a generator with a secret but deterministic output that looks random.  In the case of non crypto PRNGs the output is often reversible to get the seed, and this is easier if you are given the whole seed, which typical rng's try to avoid doing so as to increase security.  Repeated hashing is exactly the same in that it is also being used as a generator.  The full seed is given to the user, and the system relies on the hash function being irreversible for security.   4.8e29 iterations would have a 10e-18 probability of collision   The problem is not exactly one of collisions.  But of falling into a cycle that is 2n/2 long.  For sha1, 2~38 iterations would be enough to more likely place the hash into cycle than not, but 220 still places a real risk.  If in cycle, then there is a 240 attack to find it   HMAC-SHA-256(Seed, Counter += 1)   That would solve the cycle weakness well.  HMAC also reuses salt each time and so it also solves the dictionary password problem if there is a salt.  By using the Counter as part of the hash, you also gain entropy if the attacker does not know how many iterations you will do."
crypto,2r0rwc,FryGuy1013,2,Thu Jan 1 19:28:55 2015 UTC,"I theorize that 2 fast insecure RNGs (prime LCGs) can be useful CPRNGs if their seeds are never leaked   And while I think about it: Knutsson, ""Usage of LCG/CLCG numbers for electronic gambling applications"" details breaks against various constructions of combined LCGs.    RNGs are chosen mathematically for long period, and are specifically designed to repeatedly use the last output of the generator as the next input.   No, all RNGs are not specifically designed in this manner.  Stateless RNGs  may be designed in this manner.  It should be self-evident that a stateless RNG cannot be cryptographically secure as it has no secret information, and while part of the output may be occluded (and kept as hidden state) you are necessarily leaking bits of the full state on every truncated output.  While it is technically true that one-way hash functions (like SHA) do not make any guarantees about not having short cycles when iterated, we have yet to see a single practical example or theoretical weakness that practically affects hash-based RNGs.    If you absolutely require a long-period generator with mathematical guarantees then use AES in counter mode (with a secret key/seed).  AES is a PRP so each output is pseudorandom, and is also unique if the input is unique.  You could go completely overboard by using the Mersenne Twister (with a different seed) to generate the counter, instead of using a simple incremental sequence.   The downside is that you lose backtracking resistance, which is an important requirement in most (probably all?) cryptographic applications.  Backtracking resistance requires a one-way transformation of (part of) the state; for this you could use a one-way hash (losing your mathematical guarantees and giving only probabilistic ones) or a mathematical one-way trapdoor function (like ECDLP) in which we have to trust that the choice of constants does not in fact have a trapdoor."
crypto,2r0rwc,filteredpi,1 point,Thu Jan 1 20:27:22 2015 UTC,"Knutsson, ""Usage of LCG/CLCG numbers for electronic gambling applications""   great paper thanks.  Lessons for it though are: don't use small primes as m, and keep the noise in the lower bits that you report to users.   While it is technically true that one-way hash functions (like SHA) do not make any guarantees about not having short cycles when iterated, we have yet to see a single practical example or theoretical weakness that practically affects hash-based RNGs.   It turns out that long cycles is what weakens pbkdf2.   Backtracking resistance requires a one-way transformation of (part of) the state   Does AES in counter mode count as backtrackable? -- You need the original password to backtrack, so no?  I've been reading more and more on LCGs, and even though they are extensively maligned, I have more and more confidence in the approach.  Large secret random prime m, and a multiple derived from sha512, and with constant b being 31 bits of noise from a fast RNG such as gbflip or if up to 61 bits of noise desired, from a that mersenne prime m based lcg."
crypto,2r0rwc,Uncaffeinated,3,Fri Jan 2 05:47:26 2015 UTC,"This flaw is pretty much entirely theoretical in hash functions with a large output space (eg SHA256).  But still, this concern is why PBKDF2 uses the password in each iteration, which means that there are no global cycles but only password-specific cycles."
crypto,2qy1be,icStatic,16,Wed Dec 31 19:36:33 2014 UTC,"You don't really have enough of a technical description to make it possible to comment very much... but even so I think you're rushing to the technical parts of the design before you've answered some much more important questions.   Why do you think that you understand why ""the masses"" don't use existing crypto? What do you think the reasons actually are (in roughly 1000 times more detail than ""it's too hard to use"")? What specific tasks or concepts do you believe to be roadblocks? What specific evidence do you have for that belief? If you think it's a user interface issue, why are you defining new message delivery protocols rather than new user interfaces? What makes it impossible to put better user interfaces on existing protocols? What other, existing systems try to solve the same problems, and how do you do better than they do? Have you researched the existing systems? Can you explain, succinctly, why your system is significantly better than email with PGP, plus maybe OTR for instant messaging? Or than any of the other similar systems people have proposed? Have you actually tried similar or competing systems? Will you be enough better that a critical mass of people could possibly be convinced to switch from whatever they're using now? What's the value proposition, especially for an early adopter who might have to work to convince friends to switch, too? How will you market the system to achieve critical mass? Have there been past similar efforts that have failed? Why did they fail, and why will your system avoid that kind of failure? If you do succeed, will it be at the expense of the adoption of some system that solves more problems or does it better? Remember, people don't easily switch twice, nor do they easily switch away from systems all their contacts are already using. If you succeed partially, will you end up fragmenting the market, so that users either can't communicate with one another at all, or have to maintain accounts on many services (each with its own unique set of risks)? Who is your adversary? What are you protecting against? You explicitly declare ""those targeted by security services"" to be out of scope (yet you say that it's meant for ""those under the watch of oppressive regimes""). ""The privacy conscious"" isn't a meaningful category. And ""security services"" have often been known to target ""commercial secrets"". You need to describe your adversary model in technical terms, addressing expected capabilities, budget, time scales, legal and policy constraints, and so forth.   You really, really don't want to be dependent on DNS. You'd be better off just naming people using key hashes (before you say anything about ""ease of use"", consider that people had no problem with telephone numbers for decades).  If you use the DNS, you are automatically subject to attack by anybody who can bring legal pressure to bear on the DNS registrars or major server operators. DNS has already suffered legal attacks and is likely to suffer many more. It would be completely possible for an ""oppressive regime"" to prevent users in its territory from resolving any DNS name associated with your system. It might even be possible to get those names completely removed from the DNS, if your system doesn't have enough politically powerful friends in ""non-oppressive regimes"" to complain about it. Even the MPAA is trying to get the ability to do that.  Legal compulsion to keep logs is a certainty if there are large semi-central service providers (assuming your system becomes successful enough to be a serious annoyance to anybody). The days when you could rely on not keeping logs are basically over.  You don't define what a ""UID"" is (or really say anything much that I can see about name spaces). Whatever they are, using ""UIDs"" instead of usernames isn't effective. The adversary will just build a dossier based on the UID. One leak, ever, in the entire lifetime of the account, will be enough to tie that to the user's real name.  You say that you imagine that users might be able to run their own servers... but you clearly expect that most won't. What happens to my address when my service provider goes away? Remember, your service providers are going to be under a lot more pressure than regular email service providers, and a user can't assume a service provider will be around.  You seem to mix in assumptions about ""profiles"" and ""pages"" and social network stuff... but I thought this was a messaging system. What's in scope and what's out of scope?  What about group communications?  In today's world, you have to address code quality from the beginning. It's no longer OK to just assume you can grab code from anywhere, or write code any old way. How do you plan to assure code correctness? Will you be reviewing and/or testing the outside code you incorporate? How will you be testing your own code? Will you be doing static analysis? What development processes will you use to keep the bug count down? Can you minimize the TCB? Can you design the system with quantified defense in depth, so that any breach in one component is known to be backstopped by some other component?  PHP has a horrible security reputation. Javascript is a dynamically typed language that gives you absolutely no help in writing correct code."
crypto,2qy1be,Hizonner,2,Thu Jan 1 02:19:39 2015 UTC,"Wow, great response. You've made a lot of great points, some of them I don't have answers to - yet. I won't have time tonight to write a full reply tonight as it's late here, but I'll get on it tomorrow when I'm free."
crypto,2qy1be,Hizonner,2,Thu Jan 1 02:28:58 2015 UTC,"Thanks for the great response, and sorry it took me so long to respond - it took me quite a while to write. I think I've covered all your questions, shout if not. This is way longer than I anticipated so I apologise in advance for typos and grammar mistakes. Bear in mind that what I'm proposing is still only in the 'thought experiment' / 'pet project' stage, I'm not claiming to have all the answers to every problem, nor do I have investors wanting to make this the next big thing. At the moment it is just me wanting to make something useful and learn something along the way. Whether it becomes anything more than that remains to be seen.    You don't really have enough of a technical description to make it possible to comment very much   More technical detail will come when I get around to it, I figured this was enough at the high level to start with as people could potentially dismiss the high level ideas before considering the technicalities. At the moment the sequence diagrams are high level representations of the data exchanges. Each of these will probably be implemented on top of HTTPS, but that is TBD.   Why do you think that you understand why ""the masses"" don't use existing crypto?    I did a bit of investigating before I started (although most of it is anecdotal) and I identified a few different reasons: * As you say, UI is a big part of it - I know my mother wouldn't go through the hassle of installing a browser plugin * Convenience - The majority of people are not going to go out of their way to encrypt their traffic unless they're getting it for 'free' (as in with no extra effort), it maddens me how many times I've heard ""I've got nothing to hide"". The plan is to make a webmail service sufficiently good that people will switch to it because they like it, not specifically because it is secure. (this of course is the hard part)  And now the reasons I personally don't like most of the offerings available: * If something is secure, I want the ability to verify it, or at least know that it can be independently verified by someone with more skill than myself - thus I want something open source * If something is using email as its backbone, then a certain amount of data is already leaking - the message metadata and the subject.   What other, existing systems try to solve the same problems, and how do you do better than they do?   Some examples (please let me know if I've missed any - specifically I'm looking at web based systems not plugins to browsers or email clients):  HushMail * Not open source, single implementation/deployment only * No IM support  SendInc * Uses links to communicate, I didn't try the plugin but presumably it'll follow the links for you. However all the information required to open the email is in that link, which is sent in PLAIN TEXT! Therefore I'm sceptical that the service does not have the ability to read the message if they had a reason to do so. * Send only, no inbox means the user still needs a regular email account * The user has the choice to use the plugin/service or their regular email, and thus differentiates between secure and insecure messages by having to make a concious choice between the two. This immediately draws attention to the secure messages making them more of a target. If you want a secure system, encrypt everything and the actual private content will be lost in the chaff of other encrypted messages. * Recipients are required to register with the service, it would be better if the sender could know beforehand which users will need to register. If I sent a message to my mother and she needed to register, she'd just call me and tell me she wasn't going to do that.  ProtonMail * They still fall back to sending links for sending outside their walls, can't sign up to investigate further * They are closed source, no way to verify implementation * Cannot spin up your own copy of their software on your own hardware * Invite only due to capacity problems * No IM support  Mailpile * Just a mail client, still relies on email under the hood (so still leaks metadata)  Tutanota * I REALLY like this one, but it is lacking some features (which I guess I could add myself...) * Only the CLIENT is open source, the server is not * No IM support * No multiple identities   What specific tasks or concepts do you believe to be roadblocks?   Specifically: * A secure email service that can run from a browser and requires no plugins * Open source client AND server * Abilities to have multiple identities from within the same account with different public keys * Non-reliance on email when NOT communicating with existing email addresses (so we don't leak metadata) * Should be a communications hub and include IM with the option to add social networking features at a later date (out of scope for the current spec) * Should clearly let the sender know whether their target account supports secure communication before sending, with option to import a PGP public key to send with (I noticed I didn't add that in the document)   If you think it's a user interface issue, why are you defining new message delivery protocols rather than new user interfaces? What makes it impossible to put better user interfaces on existing protocols? / Can you explain, succinctly, why your system is significantly better than email with PGP, plus maybe OTR for instant messaging?   E-mail is inherently 'leaky' - the sender, receiver, subject and other metadata are all sent in plain text even if PGP is used. I don't intend to invent new low level protocols, I intend instead to make use of existing ones in new ways. For example since the majority of internet users can access the web over HTTPS, data could be sent and received via this, and thus it would work with existing proxy infrastructure.   I do intend to use OTR for IM though, especially after the recent leaked documents imply that the NSA hasn't cracked this one yet.   Have you actually tried similar or competing systems?   Yes I've tried a few (see above)  EDIT: Missed a bit about missing technical information."
crypto,2qy1be,Hizonner,1 point,Thu Jan 1 20:10:47 2015 UTC,"Part two:   Will you be enough better that a critical mass of people could possibly be convinced to switch from whatever they're using now? What's the value proposition, especially for an early adopter who might have to work to convince friends to switch, too?   That's to be determined, but I'm hoping that if the base code is strong enough then others will clone the software, run their own versions and feed the improvements back into the community (hence GPL). The value is that they can still use their account as a regular email account when communicating with other users outside of the secure network and they can forward their other email accounts into it. This is what I did when I switched to Gmail, I forwarded all my old accounts to this and it became my new 'hub'. I didn't ditch my old accounts.    How will you market the system to achieve critical mass?   I'm thinking that's a bit early at this stage, but the project would have at best limited resources. The best option would be a combination of social media and word of mouth.   Have there been past similar efforts that have failed? Why did they fail, and why will your system avoid that kind of failure?   I don't have much information on that other than the story about Lavabit. In this case the operator shut the site down rather than submit to FISA court pressure.   If you do succeed, will it be at the expense of the adoption of some system that solves more problems or does it better? Remember, people don't easily switch twice, nor do they easily switch away from systems all their contacts are already using.  I'm hoping the service created is as good as it can get at the time. The only way I think we can do 'better' is to do a bitcoin style system where there are no central servers. I did see a post about this on reddit in the last week, however if I remember it had some serious limitations. These tradeoffs were not something I could see myself compromising on, and therefore I doubt many less technical users would either.  If you succeed partially, will you end up fragmenting the market, so that users either can't communicate with one another at all, or have to maintain accounts on many services (each with its own unique set of risks)?   I think this is a risk any service must take when vying for market share. The service will support both regular unencrypted email and PGP-based secure email once a PGP key is imported, so users will not be 'cut off'. If more than one service got market share it would make sense to make the services compatible so that users can communicate cross-service in the most secure possible way.   Who is your adversary? What are you protecting against? You explicitly declare ""those targeted by security services"" to be out of scope (yet you say that it's meant for ""those under the watch of oppressive regimes""). ""The privacy conscious"" isn't a meaningful category. And ""security services"" have often been known to target ""commercial secrets"". You need to describe your adversary model in technical terms, addressing expected capabilities, budget, time scales, legal and policy constraints, and so forth.   The main threats are warrantless mass surveillance and server data breaches (see Sony and the many many other cases of catastrophic leaks that are public). If a security agency wants your specific data, then they are going to get it - even if they have to physically plant a bug in your PC. What this project aims to do is stop them getting the data of ordinary people just 'because they can'. Stories like this, in fact I think it was that specific story that got me mulling the idea over.   You really, really don't want to be dependent on DNS.   In an ideal world, yes. But going to a completely decentralised system has a new set of problems and risks. I'm not smart enough to get around these problems - perhaps somebody else is - but remember this is only a thought experiment at the moment - something designed to expand my own knowledge, and hopefully that of others who have a similar interest.   You'd be better off just naming people using key hashes (before you say anything about ""ease of use"", consider that people had no problem with telephone numbers for decades).   I think people are quite comfortable with the concept of emails, and asking people to remember a cryptographic hash (bitcoin addresses are LONG) is pretty ludicrous. I guess you could use QR codes or something to transfer them but that in itself is a comatose technology that has limited value.   If you use the DNS, you are automatically subject to attack by anybody who can bring legal pressure to bear on the DNS registrars or major server operators. DNS has already suffered legal attacks and is likely to suffer many more. It would be completely possible for an ""oppressive regime"" to prevent users in its territory from resolving any DNS name associated with your system. It might even be possible to get those names completely removed from the DNS, if your system doesn't have enough politically powerful friends in ""non-oppressive regimes"" to complain about it. Even the MPAA is trying to get the ability to do that.   Absolutely, and this is one problem I don't have an answer for that only a fully decentralised system could solve.   Legal compulsion to keep logs is a certainty if there are large semi-central service providers (assuming your system becomes successful enough to be a serious annoyance to anybody). The days when you could rely on not keeping logs are basically over.   I did think about ways you could minimize what sort of data could actually be logged. From the receiving end you'd be looking at the IPs of the sender (or the sender's server) and the receiver, and the origin server (but not user). So a hotmail server might know that user 1.2.3.4 sent an email via gmail.com, but it couldn't identify that bobbysmith@gmail.com was the sending address.   You don't define what a ""UID"" is (or really say anything much that I can see about name spaces). Whatever they are, using ""UIDs"" instead of usernames isn't effective. The adversary will just build a dossier based on the UID. One leak, ever, in the entire lifetime of the account, will be enough to tie that to the user's real name.   Sorry, that was something I began specifying but obviously got distracted on. However your comments made me think more about the problem. The original definition was just a unique ID for the user on that server, but you are absolutely right you gain almost nothing by using it, apart from to mask the target address from the sending server.   If you made the UID message specific it could not be cross referenced across messages from off the server. This would require a table on the receiving server connecting message IDs to user identities otherwise the value could not be reassociated. However, it might be better to do away with the concept of the UID entirely and instead just asymmetrically encrypt the receiving user with the receiving server's public key. This would allow the receiving user's identity from not being revealed to any intermediary message relays.  I also had the concept of using this to prevent identities from leaking out via group forwards. I am currently pondering whether this is a useful feature or not, and have at the moment removed it from the document.   You say that you imagine that users might be able to run their own servers... but you clearly expect that most won't. What happens to my address when my service provider goes away? Remember, your service providers are going to be under a lot more pressure than regular email service providers, and a user can't assume a service provider will be around.   Again I don't have an answer to this. To my knowledge only a decentralised system could prevent this being an issue (see above).   You seem to mix in assumptions about ""profiles"" and ""pages"" and social network stuff... but I thought this was a messaging system. What's in scope and what's out of scope?   Sorry that was a 'stub' for further investigation, but out of scope for any initial version of this project. It was just a high level idea on how such a system could be extended while I was brainstorming.   What about group communications?   CCs, BCCs etc would all be supported as normal, the message would be encrypted with every recipients public key in turn.  Group IMs are out of scope but could be achieved with OTR sessions between all participants.  EDIT: Fixed link"
crypto,2qy1be,Hizonner,1 point,Thu Jan 1 20:11:12 2015 UTC,"Part three:   In today's world, you have to address code quality from the beginning. It's no longer OK to just assume you can grab code from anywhere, or write code any old way. How do you plan to assure code correctness? Will you be reviewing and/or testing the outside code you incorporate? How will you be testing your own code? Will you be doing static analysis? What development processes will you use to keep the bug count down? Can you minimize the TCB? Can you design the system with quantified defense in depth, so that any breach in one component is known to be backstopped by some other component?   Absolutely, code quality is incredibly important. There are a couple of steps that can be taken to ensure high quality code, and for me these are pretty much standard practice.   Unit tests - for anything handling user data, especially crypto code then having a good unit test suite is critical. Code reviews - all code will be code reviewed, any crypto code will need to be further peer reviewed, this will be aided by being open source. Stable libraries - make use of stable libraries that are used by other software and keep up to date with versions when security issues are fixed Minimal surface area - the server side of the code will be as small as possible Encrypted data on servers - if all the data on the server is encrypted or hashed - even the usernames? Then even if the server is compromised, there should be no data to leak.   I do regularly run static analysis on my software, but I hadn't investigated the possibility of static analysis for PHP and JS - apparently they do exist.  I haven't come across defence in depth relative to software systems before other than having proactive server management teams - firewalls, IDS, antivirus, penetration testing, minimum functional server access, long unique passwords, etc. Is this a topic I need to read up on?   PHP has a horrible security reputation. Javascript is a dynamically typed language that gives you absolutely no help in writing correct code.   PHP is probably my least favourite programming language. I honestly can't think of any mainstream languages I like working with less. The majority of my code written professionally is C++ (performance critical code) and at home I dabble with C# and ASP.NET, which would be my preferred platform for this project. However, given that ASP.NET is closed source, requiring deployment on Windows servers that normally has much higher operating costs, I opted to forgo that preference in favour of an open source alternative that is commonly deployed - thus making the servers the software could be theoretically be deployed on even larger. I had originally intended the software to be runnable on shared hosting packages (hence PHP), but if you want to talk to regular email services you need SMTP, and the host will have a monopoly on those ports.  For JS I guess it would be possible to compile code to JS from some other language, for example Coffee script? However that just further obfuscates the code that the client executes. Javascript is not a great language but it is ubiquitous in browsers and pretty fast these days as it has been heavily optimised by the major browser vendors).  EDIT: typo"
crypto,2qy1be,Hizonner,3,Thu Jan 1 20:11:22 2015 UTC,"On naming:  Some of my points and some of your responses mentioned naming, but I don't think what we've written makes a central point clear.  Naming is the major technical issue in crypto and much of the rest of security. Everything else is straightforward. Knowing who you're actually dealing with, on the other hand, is nearly impossible. In particular, the issue is the binding between the name the user thinks in terms of and the keys and other data that actually control the delivery of the message.  Let's say you get a message, out of the blue, from ""mom@@momsprovider.com"". How do you know that it really comes from your mother? How do you know that replies will really go to her and only to her? Maybe her account is really ""mom@@someotherprovider.com"".  If you go to her provider and check her profile, it may say that she's ""Mary icStatic"" and her key fingerprint is ""/icStaticsMom2634+2ax36+/blargh""... but that's just the provider claiming that. And the provider is pretty easy to subvert, if you're an ""oppressive regime"". So are you going to call your mother and ask her to read you her key over the phone?  In reality, what you're probably going to do is to trust on first use. Based on the provider's assertions or whatever other information you have, you'll decide to believe that these really are your mother's address and key. You'll have your software make a note of that, and if the key changes, you'll presumably get a warning. So you'll limit your risk by only making that trust decision once, rather than trusting whatever the provider says for every single message.  But once you do that, you're keeping local metadata... and the ""real"" recipient of a message, under the covers, is the crypto key that can read that message.  This is why I tend to advocate for using key hashes directly as addresses. If you're going to be keeping metadata about name to key bindings anyway, you might as well keep it in the form of local nicknames defined by the local user. That means you can use a friendly, memorable name for each contact, one that reflects the context where you started to believe in that contact's identity. Somebody who introduces you can give you a hint about what name to use, but you don't have to accept that hint... and you can and should force the user to make an explicit choice: ""Do you, or do you not, want to call /icStaticsMom2634+2ax36+/blargh 'Mom'?"".  Where nicknames start to get hairy is in communities of interest, where you kind of want everybody to be able to refer to any other member of the community by the same well-known name. But in that case what you probably really want, in your heart of hearts, is to use community consenus, or a widely respected community authority, to decide who owns what name. And it's not clear that a messaging service provider is or should be a good community authority. AND you could actually even just put key hashes in message text and have the user's message viewer translate them to that user's nicknames for the key holders.  Key hashes are also great for building DHTs and getting you out of the DNS business, by the way.  One other thing about a different kind of name binding: I get a feeling you may be thinking you can trus t the public certificate authorities... that you can use ""https://www.foo.com"" and be sure you're talking to the real foo.com. That's totally not true if your adversaries are ""oppressive regimes"". Several of the CAs in the standard browser lists are operated by ""oppressive regimes"". Any major government and many minor ones can spoof HTTPS. The same goes for code signing using certs from those CAs.  Bottom line: naming is very hard. I think you should stay away from it as much as possible. Insofar as you have to have it, you should use as little of it as possible, and keep your naming authorities as local as possible."
crypto,2qy1be,Hizonner,1 point,Fri Jan 2 18:03:01 2015 UTC,"Sorry for the delay in responding, that's what happens when you get surprise illnesses that knock you cold for a few days... Still not 'well' yet but I think I can cobble a reply together. I'll do the others when I get a chance too.   So are you going to call your mother and ask her to read you her key over the phone?   No, but you can get someone to describe a flag to you over the phone (or something similar). If you cast your mind back to the AACS debacle, people started coming up with ingenious ways to distribute the key, one of which was a flag in SVG format. Now if you used a similar format you no longer need the exact bits of the key to compare them, just a quick visual check 'red, green, light purple, grey', which can be compared over the phone. When you create an account your public key could have a flag associated with it, and every person's profile has a flag. When you first make contact with a person you grab their public key, and OOB confirm their public key.   In reality the 'flag' could be anything, you could convert the key into a short story (a set of templates with a series of blanks replaced with words based on the key) or a series of shapes/pictographs of various colours (blue square, red triangle, yellow fox, black hand). As long as it is something that can easily be transcribed by a human. If you wanted to go really basic you could even just pick a colour. so you might exchange 'b.charleston@@initech.com BLUE' with friends.  Are these things going to be fakeable? Yes, if you've got a lot of computing power to try lots of different hashes until you get one that resembles the original enough that people might be able to.  Do I even know if this is a good idea yet? I have no idea, I would need to try out a few variations and see how much data you can reliably store in them and have something still memorable, but it would get around people having to compare keys - not useful for exchanging names though.   If you're going to be keeping metadata about name to key bindings anyway, you might as well keep it in the form of local nicknames defined by the local user.    In an ideal world yes, but I don't think we're ready for that unfortunately. There are lots of real world examples where people exchange email addresses all the time (often erroneously, so people have to extrapolate) and exchanging keys is going to be even more problematic. At a recent meeting I went to people were writing their email addresses on a whiteboard to share with the group, with others swapping pieces of paper with email addresses scribbled on it. I don't see that going well with keys.   Key hashes are also great for building DHTs and getting you out of the DNS business, by the way.   I know literally nothing about implementing P2P/distributed networkings other than the term DHT itself so I'll look into it, thanks.   One other thing about a different kind of name binding: I get a feeling you may be thinking you can trus t the public certificate authorities... that you can use ""https://www.foo.com"" and be sure you're talking to the real foo.com. That's totally not true if your adversaries are ""oppressive regimes"". Several of the CAs in the standard browser lists are operated by ""oppressive regimes"". Any major government and many minor ones can spoof HTTPS. The same goes for code signing using certs from those CAs.   No I'm well aware you can spoof HTTPS, even as recently as today there was the story of Gogo (inflight wifi) issuing fake Google certificates - presumably so they could cache content, but who knows what else they were doing or passing the data to. It's been going on in industry for years with enterprise inserting their cert in the keychain of their employees' computers so the browser just goes 'Okay, this Yahoo.com certificate signed by Initech looks legit'.   Bottom line: naming is very hard. I think you should stay away from it as much as possible. Insofar as you have to have it, you should use as little of it as possible, and keep your naming authorities as local as possible.   I know you are right on this, but I can't help but think that a system without names will go nowhere. I think just going for raw keys will never become a useful tool, but I don't know what this would have to look like."
crypto,2qy1be,Hizonner,2,Tue Jan 6 01:49:48 2015 UTC,"Sorry for the delay in responding, that's what happens when you get surprise illnesses that knock you cold for a few days... Still not 'well' yet but I think I can cobble a reply together. I'll do the others when I get a chance too.   It's not like I can go any faster than this. I still haven't responded to a lot of other stuff you've already written that I should answer.   So are you going to call your mother and ask her to read you her key over the phone?   No, but you can get someone to describe a flag to you over the phone (or something similar).   You can get some people to do that... but you've already suggested that this particular person would think it was too hard to install a plugin. And going through some process to display and verify a hash seems harder than installing a plugin. Even getting the other person on the phone in the first place seems harder.   Now if you used a similar format you no longer need the exact bits of the key to compare them, just a quick visual check 'red, green, light purple, grey', which can be compared over the phone.   You can actually do pretty well just using a dictionary of say 8192 common words as your ""alphabet"". That encodes an almost respectable 128-bit hash in 10 words, which you can probably read aloud a lot faster than you can describe many distinguished colors. Of course, you might have to recreate the dictionary for every user language.  You can use that sort of thing to seed your key, by the way. Look at what the current crop of Bitcoin wallets does.  ... but the person still has to be willing to go through the process with you. Which really is kind of the hard part. That and knowing that you have the right person on the phone. You may not know everybody's voice.   There are lots of real world examples where people exchange email addresses all the time (often erroneously, so people have to extrapolate) and exchanging keys is going to be even more problematic. At a recent meeting I went to people were writing their email addresses on a whiteboard to share with the group, with others swapping pieces of paper with email addresses scribbled on it. I don't see that going well with keys.   You mean you met somebody in PERSON? Weird. QR codes? Bluetooth? Even a ten-word phrase is asking a lot for somebody to write out, but I don't know what else to say if you want to support people who don't have smartphones on them.   No I'm well aware you can spoof HTTPS, even as recently as today there was the story of Gogo (inflight wifi) issuing fake Google certificates   Gogo's certs at least generate a warning to the user. A cert made by a CA in the browser's trust list won't do that.   I know you are right on this, but I can't help but think that a system without names will go nowhere. I think just going for raw keys will never become a useful tool, but I don't know what this would have to look like.   ... and you may be right. I would still go with hashes, but I'm not saying I'm absolutely certain that's right.  If you must have global names, then I'd say you'd still be better off to avoid having them assigned by the service providers, or vouched for primarily by the service providers... or tied to the service providers at all if you can avoid it.  Alternatives:   Namecoin or something similar. Namecoin names may be FCFS and therefore potentially confusing, but DNS names are nearly FCFS and much more corruptible. Something along the lines of keybase.io ... but that may be too complicated for a lot of people. A simplified version of what keybase is doing, where you build trust in an identity by communicating with the user over a long period of time. But that amounts to aged nicknames, so maybe it doesn't really count as an ""alternative"". The existing PGP web of trust (and probably PGP keys themselves). But, honestly, I've been using PGP for almost 20 years, I move in very cryptoish circles, and keys still never seem to have the signatures I need, so I can't say I'm very bullish on it. It's possible it could be made better by making signing easier and fixing its very broken approach to transitive trust, though. Some combination."
crypto,2qy1be,Hizonner,1 point,Wed Jan 7 03:35:18 2015 UTC,I'm going to have to think about naming some more to decide which aspects are more important. Thanks for the leads!
crypto,2qy1be,Hizonner,1 point,Thu Jan 8 00:59:47 2015 UTC,"Side discussion:  One thing that would be interesting to explore and something I haven't researched yet is if you used a decentralised model, but only between servers. So clients connect to their server using HTTPS (or if they want to, run the server software locally). Each client's server becomes a node in a decentralised network. Something like this: http://imgur.com/rt8yuoj  Some advantages: * If identity is managed in the distributed network, you could change 'providers' by changing your storage location and asking messages to be ultimately delivered to a different node. Ie one day you just say ""I'm with Hotmail now, so long Gmail"" and your key now points at the Hotmail server instead. This would mean any new messages get delivered there instead. * Identity is globally unique, and verifiable * Users could host their own node  Some disadvantages: * The database would contain all known, all valid addresses - a spammer's delight! I have no idea how you'd solve this.  I don't know enough about onion networks to know what this might look like, but the theory would be that a passage would be traversed between the source and target nodes with no intermediary ever knowing anything other than their input and output node, and never seeing more than a fraction of the original message.  However this sounds crazy complicated.  EDIT: Just saw your other message about FCFS of nicknames, okay yep global nicknames for keys are looking useless as well."
crypto,2qy1be,cunttard,2,Tue Jan 6 01:50:02 2015 UTC,"One thing that would be interesting to explore and something I haven't researched yet is if you used a decentralised model, but only between servers. So clients connect to their server using HTTPS (or if they want to, run the server software locally).   Why not just always run the server locally, then? What does the server role add to the architecture?   Some disadvantages: * The database would contain all known, all valid addresses - a spammer's delight! I have no idea how you'd solve this.   In a P2P distributed database, you can typically look up any key if you know that key. That doesn't imply that you can enumerate all the keys. You actually have to do extra work to add that enumeration feature.  Furthermore, since the first thing you do to look up a key is usually a one-way hash, and since data can easily be encrypted, even the node that stores the data for an address doesn't necessarily have to know what the address is.  I'm not an expert, but I believe real-world DHTs are indeed pretty complicated. The basic idea is pretty simple, but it gets tricky when you have to deal with things like nodes entering and leaving the network, nodes just plain dying, node A not being able to talk directly to node B because of NAT or firewalls or whatever, making sure things can't DoS the network or individual nodes in various ways, making sure that the Bad Guy can't easily arrange to be the storage location (or at least the only storage location) for targeted data, etc, etc, etc.  The good news is that there's existing code."
crypto,2qy1be,sarahjamielewis,1 point,Wed Jan 7 03:35:47 2015 UTC,"The intent behind the server model is that it would allow thin clients to connect, and storage to be localised rather than decentralised.   The alternative is that clients needs to manage the peer networks and storage itself. Not completely impossible I guess but you have to store your emails somewhere. You can't realistically store them as part of the peer network as the amount of data would be obscene. If someone for example sent a 1TB attachment those bytes need to be stored on multiple nodes somewhere for redundancy - potentially indefinitely - and thats a lot of bytes, especially on smaller devices or inside a web browser.  I'm going to have a good read up on distributed networks even if I decide to ditch the project though, it sounds really complicated and interesting."
crypto,2qy1be,autowikibot,2,Thu Jan 8 00:53:05 2015 UTC,"On software, where it comes from, how you can trust it, and the Web:   And now the reasons I personally don't like most of the offerings available: * If something is secure, I want the ability to verify it, or at least know that it can be independently verified by someone with more skill than myself - thus I want something open source *   That, together with the list of things you gave, shows an enormous gap in our mindsets, to the point where we could have, or could have had, real trouble communicating.  The open source part is obvious to me. But it would never have occurred to me to think for a second that you could do this with a fully Web-based system.   I know my mother wouldn't go through the hassle of installing a browser plugin   Unfortunately, locally installed security-specific software is a minimum requirement for any meaningful security. Given that you don't want to trust the server for data encryption, which is a pretty basic requirement, you CANNOT do this in a browser, using code downloaded from the service in a Web page. I'm not saying it's hard. I'm saying it's not possible, period. And service after service has failed by refusing to accept that truth.  The reason is pretty simple: even if the message encryption is end to end, the JavaScript code that does the encryption and decryption comes from the server, and the server can change that code at any time.  Is your mother going to notice that her service provider is now giving her an extra ten lines of code that send back copies of all her plaintext? She needs to know that she's running code that she, or multiple independent reviewers who she trusts, have actually verified. Or at least she has to know that the code can't change underneath her after she's made a trust decision. The code itself might be a plugin, it might be a standalone program, or it might be a change to the way browsers work. What it can't be is downloadable JavaScript in a browser that works like today's browsers.  If your mother isn't willing to take some steps to know she's running trustworthy code, she is going to be fully pwned, period, and there is nothing you can do to change that fact. You can follow in the footsteps of many, many existing services and give your mother a false sense of security, but you can't give her real security.  You might be able to change that if browsers had support for somehow telling the user that somehow-known-good code was no longer in use, but (1) they don't and (2) your mother is going to ignore the notification and/or click ""yes"" anyway. And if you're going to change the browser, why not just integrate PGP into it anyway?  Even Hush recognizes this, or at least they used to. I don't know if you still can, but you used to be able to use Hushmail with locally installed code.   The plan is to make a webmail service sufficiently good that people will switch to it because they like it, not specifically because it is secure. (this of course is the hard part)   Yeah, that would be the hard part if you managed to solve the impossible part first. :-)"
crypto,2qy1be,Hizonner,2,Fri Jan 2 18:02:27 2015 UTC,"Unfortunately, locally installed security-specific software is a minimum requirement for any meaningful security.    Oh I absolutely recognise that the source from the server cannot be trusted (I even listed it in my list of 'client tampering methods').  My first plan was to use a model similar to how Tutanota does things - when you visit the page the first time you get a cached copy of the code using an Application Manifest. This allows you to grab an entire copy of the client up front, and then give the user the option to update later if they wish. You could potentially add code signature checks for any future downloads. I haven't tested this myself yet or figured out how resilient it will be in the real world, so it may not work at all though.  Further, like Tutanota you could make the web client available to build/run locally as an offline web site so that it connects to a target server and the copy of the code you have can be guaranteed to be the version you are running.  You've actually suggested yourself one of the other ideas I had - a micro-browser or HTML extension that performs code signature checks similar to how SSH does things (but obviously selling the latter to W3C is beyond the scope of this project, and then you get back to a wider discussion of do you trust $browser to not be bent to comply and silently accept certain additional secret signatories), but this breaks away from the completely 'web only' intent.   One of my original brainstorming ideas was to hash the client code against versions of the website on GitHub, but you would need one of the above methods to guarantee that your hashing/reporting code had not been tampered with. You might not even trust that specific deployment of the source code so this be useful to help counter that)  I pretty much left code modification/tampering as an open ended set of questions because I do not fully have an answer I can agree on yet. If as you say it does prove impossible (something I very rarely let myself use at the planning stage), then you are probably right - and I'll probably kill the project. I'd rather do nothing than develop a piece of security 'theatre'. I have killed MANY projects that haven't met my quality threshold.   your mother is going to ignore the notification and/or click ""yes"" anyway   Side note, I quite like how Chrome has implemented this feature, it gives you a 'take me to safety' option, and you only get to see the 'yes, really I want to continue' prompt if you dig deep.   EDIT: Left a half finished sentence, fixed."
crypto,2qy1be,Godspiral,2,Fri Jan 2 19:31:13 2015 UTC,"On ""metadata"" and their disclosure:  I'm confused about what you mean when you say that ""eMail discloses metadata"" but HTTP somehow does not.  As far as I can tell, you're not suggesting anything exotic like PIR or universal broadcast delivery (neither of which would seem very good for IM anyway), so the two seem absolutely equivalent to me.  In each case I'm just contacting a server and telling it ""put these data in this mailbox"". That discloses the recipient to the server.  In each case, the connection can be encrypted, so that at least in theory the disclosure is only to the server.  In each case, the sender name can be left out or embedded in the encrypted part... but in each case the server still sees the IP address of either the sender or some relay.  I don't understand what you think you're protecting here. There are ways (PIR, broadcast, mixes, DC nets, ...) to hide address information from the server, but I didn't see you mentioning any of them, and in fact I think you actively disclaimed them."
crypto,2qy1be,lachiemx,1 point,Fri Jan 2 18:04:11 2015 UTC,"In each case, the sender name can be left out or embedded in the encrypted part...   Really? Nothing in the RFC 2822/5322 spec (to me) indicates the From field is optional, and I wasn't aware you could embed things like the subject and From field in the encrypted content.  My intent was this:  Sending server sees (in terms of what is available, not literally in this format): To: XXXXXX@gmail.com From: theuser@hotmail.com Subject: XXXXXXXXXXXXXXXXXXXXXX  Receiving server sees: To: otheruser@gmail.com From: XXXXXX@hotmail.com Subject: XXXXXXXXXXXXXXXXXXXXXX  Unless you start onion routing between servers (see my other post) then the origin server is of course revealed, which might reveal the hostname - but that in itself is not enough to unmask the user directly.  To put together theuser@hotmail.com communicating with otheruser@gmail.com you'd need to be actively monitoring/logging both servers.  That was the intent anyway, but now I don't feel it would be enough after what's been said."
crypto,2qy1be,lachiemx,2,Tue Jan 6 02:20:01 2015 UTC,"Really? Nothing in the RFC 2822/5322 spec (to me) indicates the From field is optional,   You may not be able to leave it out, but you can put dummy information in it, and that's frequently done all over the Internet. As far as I know, no MTA checks to make sure that the header ""From:"" address actually exists, let alone that the message actually comes from that address. There are some antispam measures that try to check the source domain, but even for those you can perfectly well use the same actually valid address for every message from a given server, regardless of the real sender.  The envelope ""From"" address is a bigger concern, because that's where any bounces will go, and antispam stuff checks it even more closely than the headers. I guess you could use some kind of magic bounce dispatcher as the envelope sender, although that starts to sound like the kind of hack that could lead to sadness. If you gave up on bounces, you could still use a ""legitimate"" black hole address. Or even the null address, which is the addres that bounces themselves are supposed to come from and is therefore rarely blocked.   and I wasn't aware you could embed things like the subject and From field in the encrypted content.   In either PGP or S/MIME, you can embed a whole other email message, with its own headers. Some existing clients won't show it very prettily, but, hey, you're writing your own client, right?  There's an (expired) draft that both talks about existing S/MIME conventions and describes another way to do it. I haven't read it, but it's at https://tools.ietf.org/html/draft-cailleux-secure-headers-01 .  I'm don't know what current PGP practice is, but I strongly suspect there's a fairly well defined way to embed headers. Back in the 1990s, there used to be a convention where you'd flag them by starting the first line of the decrypted stuff with a double colon or some such hackery. I don't know how much it caught on or what's going on today, but again I really doubt there's nothing.   Sending server sees (in terms of what is available, not literally in this format): To: XXXXXX@gmail.com From: theuser@hotmail.com Subject: XXXXXXXXXXXXXXXXXXXXXX  Receiving server sees: To: otheruser@gmail.com From: XXXXXX@hotmail.com Subject: XXXXXXXXXXXXXXXXXXXXXX   How does the receiving server send a bounce?  I have not looked at it at all or even read the article, this crossed my screen today, and it from the first few paragraphs it sounds a lot like what you suggest: Lavabit founder wants to make “dark” e-mail secure by default . The people involved sound like the right people.  But of course this is all serverful. If you were P2P, you'd insert the message into a DHT. So, for example, I2P has I2P-Bote (which I haven't used personally). And I think there are other similar things. That CSpace thing that turned up in some leaked NSA documents, for example, is a piece of abandonware that apparently does IM in a similar way."
crypto,2qy1be,lachiemx,1 point,Wed Jan 7 03:36:43 2015 UTC,"Hmm, I actually hadn't considered bounces at all... I'll add it to my list of 'snags' to figure out.  Thanks for all the links, I'll read through them before I decide what to do next.  EDIT: The darkmail thing looks really interesting, and amusingly enough their DIME-encrypted message format is almost identical to the one I had in my head. It sounds exactly like what I'm trying to do, but by people who know what they are doing already."
crypto,2qy832,vielspassnoch,13,Wed Dec 31 20:39:09 2014 UTC,http://crypto.stackexchange.com/  that is better
crypto,2qy832,conradsymes,7,Thu Jan 1 00:14:45 2015 UTC,This sounds like a post more appropriate for r/askcrypto
crypto,2qy832,688as,1 point,Wed Dec 31 21:00:53 2014 UTC,"I would probably answer questions occasionally, but I'm not interested in moderating.  Why not post to crypto.stackexchange.com (as conradsymes mentioned) or Quora?"
crypto,2qy832,bitwiseshiftleft,0,Mon Jan 5 05:00:00 2015 UTC,"I also would not be qualified, but I'd be happy to link to such a subreddit in the sidebar if that's a thing people would find valuable."
crypto,2qtxd4,timeforpajamas,4,Tue Dec 30 17:31:07 2014 UTC,"all the talks from 31c3 are going up as I comment. certainly it is ""a new dawn"" for us as we venture forth into this damn vulnerable world.  https://www.youtube.com/user/cccen"
crypto,2qtxd4,markseu,2,Tue Dec 30 21:55:49 2014 UTC,Posted some talks to /r/nerdfun
crypto,2qtxd4,samsonx,2,Thu Jan 1 13:26:57 2015 UTC,"No mentions of secp256k1, the Bitcoin curve in this video. Why is that ?"
crypto,2qtxd4,conradsymes,7,Tue Dec 30 23:24:13 2014 UTC,"secp256k1 is a Koblitz curve. These avoid much of the suspicion surrounding the NIST curves but aren't otherwise very notable. Curve25519 and many of the other noted ""safe curves"" did not become commonplace until 2013, so it likely wasn't something under consideration by Bitcoin devs at the time of inception. As far as I'm aware at least, they can't take advantage of the simplicity of Edwards curves for example. They're trying to demonstrate that we can and have designed faster and less error prone curves."
crypto,2qtxd4,GahMatar,2,Wed Dec 31 01:49:20 2014 UTC,"so it likely wasn't something under consideration by Bitcoin devs at the time of inception.   Personally, it's my suspicion that Satoshi somehow knew about the backdoor"
crypto,2qtxd4,R-EDDIT,2,Fri Jan 2 05:56:36 2015 UTC,"For all intent and purpose, secp256k1 is less suspicious than NIST's curves, a little faster, but very comparable otherwise."
crypto,2qtxd4,daveime,1 point,Wed Dec 31 16:01:41 2014 UTC,"To echo /u/-1px 's point, DJB and associates advocate for safe curves here, lists that as not safe.  http://safecurves.cr.yp.to"
crypto,2qtxd4,samsonx,1 point,Wed Dec 31 13:24:13 2014 UTC,"Yup, and it's very interesting to see other cryptographers seeing these advantages. Just look at E-521 in that list.   Discovered by:  2013 Bernstein–Lange; independently 2013 Hamburg; independently 2013 Aranha–Barreto–Pereira–Ricardini   Pretty impressive to see 3 parties independently researching the same curve and reaching the same conclusions about it. I hope we can all proceed in this way."
crypto,2qtxd4,cypherpunks,0,Wed Dec 31 14:41:36 2014 UTC,Because no one cares about the curve your funbux uses.
crypto,2qqrvn,totalvoidness,23,Mon Dec 29 20:36:45 2014 UTC,"Cool stuff. I only read the ""security"" page and did so somewhat quickly so take my advice with a grain of salt:   Master Key Encryption    The masterkey itself is encrypted using AES-CBC   CBC mode isn't the ideal mode to encrypt other keys. While some say it is overkill, I would prefer to see a mode like key wrap or key wrap with padding. Better yet, allow advanced users to customize this and default it to something like key wrap (with padding).   Master Key Derivation    a key derived from the user's password using PBKDF2 (HMAC-SHA1, variable iteration count, random salt)   I would prefer to see a memory intensive KDF like scrypt. If you want, you can first run it through PBKDF2 as described and then run the result of that through scrypt. Again, the ability to customize this would be awesome.   Password Authentication    But how do we know, the entered password is correct? ... we encrypt the password using the masterkey and store the resulting ciphertext.   If you encrypt the master key via an authenticated mode you don't need to do this (and I'd prefer it not be done). The wrap pad mode mentioned above provides some integrity protection (see sections 3 and 7 of the RFC) as do GCM and other modes.   File Content Encryption   The file content is encrypted with CTR mode which is good, but I don't see anything about integrity protection. If this tool is meant to be used as an encrypted volume where I can make changes on the fly then I understand and you can ignore this comment.   File and Directory Name Encryption    file and directory names are encrypted using AES-CBC with an empty initialization vector (all bytes zero)   CBC mode really shouldn't be used in a deterministic fashion as described. If you need a deterministic mode you should use one that is designed as such (e.g., wrap pad, SIV, etc.).  I'll try to read more into this later on when I have more time. Thanks for contributing to the open source encryption movement!"
crypto,2qqrvn,marklarledu,5,Mon Dec 29 22:17:16 2014 UTC,"Thank you very much, this kind of feedback is greatly appreciated! :)"
crypto,2qqrvn,jenddo,1 point,Mon Dec 29 22:21:27 2014 UTC,Use ChaChat20/Poly1305 instead of AES-CBC:  https://www.imperialviolet.org/2013/10/07/chacha20.html
crypto,2qqrvn,cunttard,1 point,Tue Dec 30 19:57:47 2014 UTC,"I would avoid the above mentioned keywrap methods and use Synthetic IV Key Wrap mode specified in rfc5297. As long as you generate (pseudo)random keys then this would be an ideal mode.  Similarly, for file/directory names, you may want to consider using SIV mode for encryption (see same RFC above). This provides deterministic IND-CCA2 encryption."
crypto,2qqrvn,marklarledu,1 point,Tue Dec 30 06:47:10 2014 UTC,"I understand, that SIV isn't widely used yet. As reinventing the wheel is kind of the worst thing to do in cryptography, I need to stick with modes available in common libraries. How about OCB GCM for password verification and a prefixing encrypted file names with individual IVs?"
crypto,2qqrvn,marklarledu,1 point,Tue Dec 30 11:21:55 2014 UTC,SIV mode should be available in the next Bouncy Castle release (provided I get off my lazy butt and submit my implementation to David Hook). I have a pure Java implementation that I can give you in the meantime that passes all the RFC's test vectors and then some if you'd like.
crypto,2qqrvn,cunttard,1 point,Tue Dec 30 17:30:41 2014 UTC,Will the next release be available for JDK 1.8?
crypto,2qqrvn,Natanael_L,1 point,Tue Dec 30 18:20:28 2014 UTC,Now you're asking questions outside my pay grade ;). I'll ask Mr. Hook and let you know what I hear.
crypto,2qqrvn,marklarledu,0,Tue Dec 30 19:14:15 2014 UTC,"SIV mode is straight forward to implement. It is simply IV=MAC(k1,P) and  ENC(IV,k2,P) where k1 and k2 are distinct (for good crypto hygiene) and ENC Is IND-CPA secure. In more concrete terms: MAC can be instantiated as HMAC-SHA256 CMAC-AES and ENC as AES in CTR mode.  By simply using CTR mode and using a MAC for the IV, you've essentially using SIV.  The reason I suggested SIV mode is that you can get quick indexing by simply looking up the MAC of the plaintext (filename).  Edit: The RFC (and papers) call for CMAC-AES, not HMAC-SHA256."
crypto,2qqrvn,Natanael_L,1 point,Tue Dec 30 13:52:03 2014 UTC,"MAC can be instantiated as HMAC-SHA256   Can I use a cryptographically weak hash algorithm?  I'm thinking of CRC32(P) here. Its equally distributed, way shorter (I need short filenames prefixes!). Correctness of bruteforced P can not be authenticated, because collisions are very likely. I don't even need to add a salt."
crypto,2qqrvn,marklarledu,1 point,Tue Dec 30 18:45:32 2014 UTC,"Don't use weak algorithms. It is OK to use a partial hash as identifier as long as you have enough entropy left to ensure that filenames are unique (such as 80 bits of the hash, encoded as base64 in the filename)."
crypto,2qqrvn,cunttard,1 point,Tue Dec 30 20:37:25 2014 UTC,"Don't confuse filename encryption with IV generation. The filename is unique by nature, as plaintext filenames are guaranteed to be unique and the ciphered name depends deterministically on the plaintext one.  That the encrypted filename needs to be secure is obvious. But as there are no weak IVs in AES, a weak hash should be sufficient. Or am I mistaken here?"
crypto,2qqrvn,cunttard,2,Tue Dec 30 20:43:41 2014 UTC,"there are no weak IVs in AES   That depends on the mode chosen. For example, there are attacks on certain types of non-random IVs for CBC mode. In general, it is considered best practice to use random IV's unless you can provide damn good reason not to."
crypto,2qqrvn,cunttard,1 point,Wed Dec 31 00:21:18 2014 UTC,"Cut the output to 1 bit and you can only have 2 filenames that don't conflict. It may be a deterministic process, but it is still not guaranteed to not collide when using short outputs. The entropy in the output protects you, not just the existence of the process. You need collision resistance, and that requires a certain number of bits in the output."
crypto,2qqrvn,cunttard,1 point,Tue Dec 30 21:19:37 2014 UTC,"My question is: Do I really need a high entropy in an IV? Is it really a weakness, if 96 out of 128 bits in an IV are constant?  If the answer to both questions is no: What is the difference between a 32 bit substring from a secure hash and a 32 bit CRC? In both I need 216 attempts to have a 50% chance of finding a collision, right?  Edit: Just read cunttard's comment and understood, why a secure hash algorithm is needed."
crypto,2qqrvn,marklarledu,1 point,Tue Dec 30 22:15:41 2014 UTC,MAC can be instantiated as HMAC-SHA256   I am curious where you got this. The S2V section of RFC 5297 states that AES-CMAC is to be used and I don't see any mention of the use of HMAC. Are you referring to something other than RFC 5297?
crypto,2qqrvn,marklarledu,1 point,Wed Dec 31 01:42:20 2014 UTC,"Thanks for calling me out on that. I actually had this wrong, the RFC and recommendation by Rogaway et al. in their papers call for AES-CMAC for the IV and AES-CTR for encryption. HMAC-SHA256 would also suffice (assumed to be a PRF), but the output would need to be truncated."
crypto,2qqrvn,marklarledu,0,Wed Dec 31 02:53:57 2014 UTC,"Ok, sounds simple :)  As IV depends on the plaintext, I still need to store it somewhere (e.g. prefix of encrypted file name). Using a random IV here would also work.  For clarification: Decrypting file names (directory listing) happens far more often than encrypting (create, rename). So decrypting needs to be efficient.  Edit: Just updated the file name encryption part. Using random IV instead of SIV due to simplicity~  Edit 2: Random IV does not work. I need a deterministic approach. Will give SIV a try now.  Edit 3: Don't know if my implementation is, strictly speaking, SIV. I believe that secure hash functions are not needed here (see my other comment). Take a look at the updated implementation: http://cryptomator.org/#security"
crypto,2qqrvn,marklarledu,2,Tue Dec 30 14:43:59 2014 UTC,"Simply put, no. I wouldn't touch anything that doesn't use unpredictable and unique  IVs, i.e. (pseudo-)random or synthetic. AES in CBC/CTR mode require unpredictable IVs. What you have suggested is not.  What happens when you have two IVs whose absolute difference is small? If using AES in CTR mode you'll end up with overlap which is a basis for attack/cryptanalysis.  Also you're leaking information, since if I have a list of IVs I can dictionary attack (without a key) filenames by simply generating a list of CRCs for each filename.  Btw - if it wasn't obvious, I was recommending you store the IV along with the filename as part of the directory entry."
crypto,2qqrvn,cunttard,1 point,Tue Dec 30 20:54:50 2014 UTC,What happens when you have two IVs whose absolute difference is small   I should have read this before answering to Natanael_L ;-) Ok this is a good reason for SHA.   store the IV along with the filename as part of the directory entry.   So you're suggesting one metadata file per directory containing a dictionary of IVs? That again would impair concurrent I/O.
crypto,2qqrvn,marklarledu,1 point,Tue Dec 30 22:21:38 2014 UTC,"Im not suggesting any structure, but wherever the filename itself is stored, you can store the IV along with it. However you decide to build the index, you can store the IV itself (instead of the filename) in the index."
crypto,2qqrvn,gsuberland,1 point,Tue Dec 30 23:20:37 2014 UTC,"Also: SHA is not a MAC and therefore not suitable for a synthetic IV. You want to use HMAC-SHA256 CMAC-AES. Otherwise you're able to compute SHA256 over a dictionary of filenames and perform a dictionary attack.  Edit: Apologies, I should've said CMAC-AES as specified by the RFC for SIV mode."
crypto,2qqrvn,d4rch0n,1 point,Wed Dec 31 00:57:25 2014 UTC,"I already got confused :D   dictionary attack   Well its still salted by the key, isn't it?"
crypto,2qqrvn,Godspiral,1 point,Wed Dec 31 19:09:34 2014 UTC,"Please proceed with caution if you are going to implement SIV yourself, especially if you are doing it solely based on comments in this thread (as opposed to actually reading the RFC). While I am not saying anyone here is necessarily wrong, I do question some advice you got about SIV mode and HMAC. If you would like to use SIV I can provide you with a working implementation that has been tested against the RFC's test vectors and other random test data (mainly checking to see that decrypt(encrypt(random_data)) == random_data) along with a test harness for it."
crypto,2qqrvn,xJoe3x,0,Wed Dec 31 01:47:34 2014 UTC,"If I had to make a decision on the spot, I would go with AES Wrap Pad for encrypting the master key and SIV for the file/directory names. However, if the source of randomness is questionable, then I would consider using SIV for both. I don't believe you will have this randomness issue in most cases (worst case you can use random dot org to get part of the seed for the PRNG, provided you have a connection to do so)."
crypto,2qqrvn,Godspiral,1 point,Tue Dec 30 17:39:47 2014 UTC,"I guess I should justify my choices. I would use AES Wrap Pad because the wrap algorithms are designed for wrapping things like keys and passwords, it provides reasonable integrity protection, and the wrap pad variant allows for variable plaintext (i.e., key to be wrapped) lengths which makes it more ""future proof"". I would use AES in SIV mode for the directory/file names because it satisfies your deterministic requirements (I never verified whether or not you actually need that, I am taking your word on it) and provides good integrity protection.  At the end of the day, both wrap pad and SIV are deterministic and have decent integrity protection (the latter having better integrity protection). You can't really go wrong with either of them but you should know that key wrap comes with a bigger performance hit than some might realize. Not sure if this would be a serious issue to you or not.  Edit: Removed comment about SIV performance."
crypto,2qqrvn,xJoe3x,1 point,Tue Dec 30 17:47:52 2014 UTC,"I changed the implementation using random IVs and just found out during testing, that this doesn't work. Yes filenames do need to be deterministic."
crypto,2qqrvn,Godspiral,1 point,Tue Dec 30 18:30:00 2014 UTC,Is this so you can check if a new file will conflict with an existing one without decrypting all other filenames?
crypto,2qqrvn,xJoe3x,1 point,Tue Dec 30 20:16:14 2014 UTC,"Its just the way, you browse through directory structures. Example:  Step 1: Get a directory listing of directory /A. Result may be [subdir B, file C, file D] Step 2: Get the contents of file /A/D.  As WebDAV is a stateless protocol, during the request to /A/D no information about the previous access to /A is available.  The ciphertext names of the backing encrypted directory structure need to be derived (deterministically) from the plaintext name A as well as the plaintext name D now.  So when creating a file/directory and when accessing it, the ciphertexts must be the same."
crypto,2qqrvn,Natanael_L,1 point,Tue Dec 30 20:37:31 2014 UTC,I should as well. There was a recent discussion on keywrap algorithms on the cryptography mailing list where Matthew Green essentially said these are unauthored constructions (probably NSA) pushed via NIST. I would agree with the sentiments they're overengineered and come with no proof of security. SIV mode is dead simple and provides integrity protection by simply using a MAC.  Also I don't understand how SIV mode is slower than CBC mode with HMAC?
crypto,2qqrvn,Godspiral,1 point,Tue Dec 30 20:41:05 2014 UTC,I actually don't know why I wrote that SIV is slower than CBC + HMAC. I updated my comment.
crypto,2qqrvn,Natanael_L,1 point,Wed Dec 31 00:13:20 2014 UTC,"I'd also add that the SHA-1 primitive is likely to be considered deprecated soon, so if you're keeping the PBKDF2 construction then consider a SHA-2 variant (e.g. SHA-256)."
crypto,2qqrvn,Godspiral,2,Mon Dec 29 23:34:31 2014 UTC,"Ok, when changing the implementation anyway, that should be an easy one :)"
crypto,2qqrvn,JoseJimeniz,1 point,Mon Dec 29 23:42:05 2014 UTC,"I think 100,000+ rounds of SHA256 is recommended for PBKDF2 nowadays."
crypto,2qqrvn,Godspiral,1 point,Tue Dec 30 02:08:03 2014 UTC,"I can't see how using sha2 can be the best idea.  You have to make it annoyingly long for the user, because there are dedicated cheap bitcoin miners that can go through that number of hashes trivially.  Just posted http://www.reddit.com/r/crypto/comments/2qrpd6/oc_deterministic_rabin_key_generation_and/ which uses prime searching as the time sink."
crypto,2qqrvn,psonik,2,Tue Dec 30 02:24:23 2014 UTC,"It is not trivial to attack that.  It adds over 16 bits of strength (at 100,000) to the password/passphrase, thus increase the average time needed to attack it.     Other methods may be stronger, but that is far from trivial.    I would advise sticking to accepted standards, PBKDF2 and script are good options."
crypto,2qqrvn,marklarledu,0,Tue Dec 30 18:47:57 2014 UTC,"the issue has nothing to do with the security of 256bit aes vs 128 bit aes.  If your initial password was only 1 character long, then it doesn't matter if you have a 4096 bit security system, because we can break it by trying all single characters.  So the password expander (whether sha1 or sha512) doesn't matter in this security case.  The reason they are doing it 100k times is to make it purposefully slow, so that it takes 100k times longer to check all of the single character passwords.  If it takes 1 second per check (with 100k repetition) , then checking all characters takes 52 seconds.  But with sha256, what takes your computer 1 second to do 1 check, a mining rig can do 10 million or 10 billion in that same second.  PBKDF2 is only repeating a hash function x times.  It is not rocket science.  It is better than not repeating it for security against brute force, but the problem with using sha256, is that there is a lot of cheap hardware that is much faster than your computer is at it.  The hardware can further be considered almost free if when not trying to hack your password it is used to mine bitcoin/litecoin."
crypto,2qqrvn,jenddo,2,Tue Dec 30 19:12:35 2014 UTC,"the issue has nothing to do with the security of 256bit aes vs 128 bit aes.   Never said it did.  I said it added bits of strength to the original password/passphrase.  To put it in a more simple way, the amount of work PBKDF2 with 100,000 iterations adds is about equal to adding 3 random characters to a password or 1 random word to a passphrase.   If your initial password was only 1 character long, then it doesn't matter if you have a 4096 bit security system, because we can break it by trying all single characters. So the password expander (whether sha1 or sha512) doesn't matter in this security case.   Yes it does, you note why it matters below.  The difference between an attack taking 1sec per attempt and 1/100k sec per attempt is very significant.    When applied to a decent password/passphrase an attack is far from trivial even with custom hardware.    You are really downplaying the value it adds."
crypto,2qqrvn,marklarledu,1 point,Tue Dec 30 20:17:12 2014 UTC,"100,000 iterations adds is about equal to adding 3 random characters to a password or 1 random word to a passphrase.   I can't see how that is possible. f(""password"") is deterministic.  It doesn't much matter if the output of f is 140 bits or 512 bits long.  f repeated 100k times is still g(""password"").   The difference between an attack taking 1sec per attempt and 1/100k sec per attempt is very significant.   But it takes 1 second for your computer.  For an attacker with ""free"" bitcoin mining hardware it can take him factors of millions or trillions less time.  I appreciate that adding time adds a lot of value.  But many iterations of sha256 isn't the right function.  Its like a bike lock that can be opened with a bic pen.  Its better than no lock, but there are a lot of bic pens out there, and if it had pen hacking vulnerability, its better that its some fancy expensive rare swiss pen."
crypto,2qqrvn,marklarledu,1 point,Tue Dec 30 20:37:15 2014 UTC,"I can't see how that is possible. f(""password"") is deterministic. It doesn't much matter if the output of f is 140 bits or 512 bits long. f repeated 100k times is still g(""password""). But it takes 1 second for your computer. For an attacker with ""free"" bitcoin mining hardware it can take him factors of millions or trillions less time. I appreciate that adding time adds a lot of value. But many iterations of sha256 isn't the right function. Its like a bike lock that can be opened with a bic pen. Its better than no lock, but there are a lot of bic pens out there, and if it had pen hacking vulnerability, its better that its some fancy expensive rare swiss pen.   It is very true and holds true at billions of attempts per second.  There is good reason for it to be a big standard.  Let me show you by example:  Lets say the attacker can perform 60 billion attempts per second and must try half of all possible values before finding correct value.  Ex1: No key stretching function applied  Password - 10 characters, character set 62, unpredictable.    Time to find - 2.6 months  Passphrase - 5 words, word list 10,000, unpredictable.  Time to find - 26 years  Ex2: PBKDF2 (100,000) applied  Password - 10 characters, character set 62, unpredictable.    Time to find - 22178 years  Passphrase - 5 words, word list 10,000, unpredictable.  Time to find - 2642482 years  That amount of extra work is about equal to 3 random characters to a password or 1 random word (rounding a good bit for the example).    I mean with a strong enough password a stretching function is not even required, attacks are far from being able to exhaust sha256, but it certainly helps."
crypto,2qqrvn,hashclash,2,Tue Dec 30 21:05:44 2014 UTC,ASICs for Bitcoin is designed to do 2x SHA256 and that alone on a very specific input (a Bitcoin block header).
crypto,2qqrvn,hashclash,1 point,Tue Dec 30 22:56:27 2014 UTC,"could be right   http://crypto.stackexchange.com/questions/11877/can-cryptocurrency-mining-devices-be-used-for-cryptanalysis   Still the ""hard"" part of such asics is getting the sha256 code right.  It would be relatively easy to loop back into it, and so relatively easy to design dual purpose mining and PBKDF2 functions.  Its comforting to know that such products are not available commercially, but the same people that designed bitcoin miners have 99% of the design for a PBKDF2 cracker, and it is perhaps more valuable to quietly offer it to our guardians of peace."
crypto,2qqrvn,marklarledu,3,Tue Dec 30 23:38:44 2014 UTC,"No, SHA256 is easy, there's free usable chip design files for it. Full transistor layout described. Iterating through different versions of the block header takes the most work to optimize.   You want to optimize it so much that you can't even feed plaintext to the SHA256 circuits as all the board takes is block input data (previous block hash, time (both fixed size), list of transactions). Then it loops through different nonces and modifies the block order (changes the Merkle tree hash in the header) and approximate timestamp one bit at a time.  Anything less make it inefficient enough to be unprofitable at mining."
crypto,2qqrvn,rya_nc,1 point,Wed Dec 31 00:04:01 2014 UTC,"I thought that part doesn't need to be fast since its done only once per block.  At any rate, if you are correct, then devices could be even faster at PBK cracking as they'd need less ""unrelated"" (to sha256) circuitry."
crypto,2qqrvn,rya_nc,1 point,Wed Dec 31 00:15:46 2014 UTC,"As marklarledu pointed out, it would be nice to use scrypt for key derivation. Wouldn't that solve the mining hardware issue?"
crypto,2qqrvn,hrjet,4,Tue Dec 30 08:58:36 2014 UTC,"SHA2 is easily implemented in hardware (which is how I can have 14 USB SHA2 hashing ASICs, each capable of doing 330 Mhash/s, for a total of just over 4.6 Ghash/s)  That's 330 Mhash/s out of something the size of a thumb drive using 2.5W.   Meanwhile with scrypt, an entire video,card with its 360W, can only manage a few khash/s. (And that's with the weakest scrypt parameters possible).  In short: scrypt is designed, and succeeds, to resist parallelization. SHA2 wants to be fast. It's meant to be fast."
crypto,2qqrvn,zeroXten,1 point,Tue Dec 30 12:58:53 2014 UTC,"I understand there are scrypt asics doing 25+Mhs... or some announced anyway.  1000 times faster than the typical customer computer's capabilities, and more than 5000 times faster than top of the line android (arm) chips.  The whole idea of disk encryption is to allow short passwords to provide 100 year security.  But a one second correct decryption time on arm that gives 100 year security (if that same arm chip brute forced) gives 7 day security to a single relatively cheap asic.  I really like finding primes based on a seed (password) that then forms the basis for generating an encryption stream as the slowdown.  It allows a quick prime search for user selected password, while being incredibly slow for many brute force seeds."
crypto,2qqrvn,jenddo,0,Tue Dec 30 18:23:16 2014 UTC,Half of all cryptocoins use scrypt. I wouldn't say it solves the issue. But it is probably the best choice.
crypto,2qqrvn,dareksam,0,Tue Dec 30 11:44:17 2014 UTC,"Short answer: yes, scrypt is currently the best solution to the mining issue.   I personally like combining PBKDF2 and scrypt by using PBKDF2 first and then running the result through scrypt (using different salts for each) to help protect against a flaw (either theoretical or implementation) in one, but most people would probably think I am just paranoid. I also like to use a less commonly used PRF in PBKDF2 (e.g., HMAC-SHA384)."
crypto,2qqrvn,dareksam,1 point,Wed Dec 31 01:56:51 2014 UTC,I moved to scrypt now.
crypto,2qqrvn,select1on,0,Mon Jan 5 19:12:03 2015 UTC,Use BLAKE2 instead.  https://blake2.net/
crypto,2qqrvn,dgmib,1 point,Tue Dec 30 19:58:18 2014 UTC,"Ok, I just updated the implementation and worked in most of the discussed suggestions: http://cryptomator.org/#security   No more CBC Masterkey uses GCM, manual passphrase authentication is no longer needed Filename encryption follows the SIV scheme as explained by cunttard (but is limited to 10 bytes. The other 6 bytes of the IV are zero due to file system related issues. This shouldn't be a weakness though)   What is still open is the key derivation."
crypto,2qqrvn,wishfort36,1 point,Wed Dec 31 00:51:50 2014 UTC,Good job on actively following up on the comments. Where did you get your SIV implementation? I'm curious since it isn't a commonly used or implemented mode.
crypto,2qqrvn,hrjet,1 point,Wed Dec 31 01:23:55 2014 UTC,Should have clarified: It is not SIV mode. Its just the idea behind SIV to create an IV by hashing the plaintext salted with a calculating a MAC using the plaintext and a key distinct from the masterkey.  The encryption itself is still CTR mode.
crypto,2qqrvn,RainbowNowOpen,1 point,Wed Dec 31 09:52:47 2014 UTC,"I really don't want to be that guy but I do need to say that people serious about their security are probably not going to use a tool that uses a mode that is like the idea of a mode that has research done on it, especially when you can just use the researched mode itself. Doing something like that would also cause suspicion on the general security hygiene of the whole project. Also, a couple things on what you said:   the idea behind SIV to create an IV by ... calculating a MAC using the plaintext   While I can see why one would say this about the mode, it is a very general statement and if followed by just doing something like IV = HMAC(plaintext, key1), it could lead to problems. There are reasons why the S2V part of SIV does what it does, and from reading your comment it sounds like you might have missed some of the important details.   The encryption itself is still CTR mode.   Do you do any post processing after CTR decryption to make sure the given IV is correct? If not, you could be forgoing some valuable integrity protection.  All in all, I would say use a mode that has lots of research on it, not one that kind of seems similar to a well researched one. In this case, I would say use the actual SIV mode as described in RFC 5297.  I hope none of this came across as mean, I'm only trying to help improve the final product :)."
crypto,2qqrvn,fmdx,1 point,Wed Dec 31 18:24:55 2014 UTC,"Integrity checks are not yet done. Neither for the filenames nor the file contents. this is still an open issue.  About using SIV: I will not implement it myself. As long as its not available in some widely used Java library (hoping for Bouncycastle to add it soon) and CommonCrypto for iOS, I have a problem.  The best bet was to follow the instruction given here to derive a deterministic, yet secure IV and stick with commonly available modes like CTR.  I really appreciate the support though!"
crypto,2qqrvn,kwketh,2,Wed Dec 31 19:25:38 2014 UTC,"When you implement file content integrity, this may be a good resource to guide the design:  https://www.imperialviolet.org/2014/06/27/streamingencryption.html  tl;dr there's a few things that are important to get right the first time when doing authentication:   do the authentication per chunk (the same chunks you're using to support random access) make sure the authentication covers the metadata for chunk ordering   While you're at it (and maybe you already know this :) but it bears repeating), always please keep in mind that IV rotation is a must when using CTR mode.  If someone wants to rewrite part of the file, do not reuse the IV for that chunk or the cipher will be totally compromised."
crypto,2qqrvn,veeti,1 point,Sun Jan 4 20:02:03 2015 UTC,"Thank you, that might be helpful. I need to read a few things about authenticated encryption anyway, if I want it to work with random access and keep the overhead small. Currently I'm thinking about calculating a MAC over the complete file only. Thus partial authentication wouldn't be possible, but if a user wants to know, if the data is compromised, the possibility would exist with well documented authentication mechanisms."
crypto,2qqrvn,phyzome,1 point,Mon Jan 5 19:20:30 2015 UTC,"I don't think content integrity can be left as an ""optional, if you feel like it"" thing.  If a user only checks integrity on their full files once a week, and meanwhile their applications are reading and writing parts of files without triggering any integrity checks from cryptomator... what's to stop the storage provider from manipulating your files, and then waiting for the user's regular applications to read the hacked data, and then save some tainted data back again, but now with the correct key?  That would pass the integrity check later, even though your files are changed!  Doing ciphertext immutability up front and for the entire system at all times is the only way."
crypto,2qqrvn,kwketh,1 point,Thu Jan 8 09:30:54 2015 UTC,"I now leave it open to the user to decide per vault, if integrity checks should be performed. If yes, checks will always be done (for partial and full decryption) before decryption. However this leads to reading the file twice. Thus a user can decide to disable it. Depending on the kind of data the main objective might only be privacy, not integrity."
crypto,2qqrvn,H3xaByT3,1 point,Thu Jan 8 11:36:30 2015 UTC,"The other 6 bytes of the IV are zero due to file system related issues. This shouldn't be a weakness though   I'm not saying that you do or do not have a weakness in that scheme but most people are going to need more of a justification than something ""shouldn't be a weakness"" in order to take it seriously. Maybe if you talk about the file system related issues we can help come up with a different scheme that will work for you. If space for storing the IV is an issue, you can use a non-IV scheme like wrap pad (although the ciphertext ends up being longer than the plaintext in that mode so that might also be problematic for you)."
crypto,2qqrvn,kwketh,1 point,Wed Dec 31 18:32:22 2014 UTC,"Ok lets forget everything discussed before: The goal is to fit as many plaintext bytes as possible inside of 155 ciphertext bytes. Everything longer than 155 bytes will work but is significantly slower. The ciphertext has to be deterministic and both encryption and decryption need to be relatively fast.  The plaintext is usually relatively short, has little entropy, may contain repeating patterns, consists of well-known words."
crypto,2qqrvn,kwketh,6,Thu Jan 1 02:06:42 2015 UTC,"A nice enhancement would be to avoid leaking the size of files and the length of their names, however doing that would essentially require you to implement a custom filesystem."
crypto,2qqrvn,kwketh,1 point,Mon Dec 29 22:01:15 2014 UTC,"Thank you for that idea.  The length of the names can only be estimated to multiples of 16 bytes as blocks are always padded.  The file size of course is pretty much public. Any try to change it would have impacts on the ""syncability"", e.g. concatenating multiple files into one is not a good idea. But I personally think, that for most users file sizes don't expose sensitive information, do they?"
crypto,2qt80g,sashankdvk,2,Tue Dec 30 12:57:16 2014 UTC,"The measurement is ""bits of security"".  For instance, 2048-bit RSA has about 112 bits of security. 3DES (has a 168 bit key) has about 112 bits of security. Thus they are ""comparable"".  For a definition of bits of security, see section 5.6.1 (Comparable Algorithm Strengths) of NIST SP 800-57 Part 1:   Cryptographic algorithms provide different “strengths” of security, depending on the algorithm and the key size used. In this discussion, two algorithms are considered to be of comparable strength for the given key sizes (X and Y) if the amount of work needed to “break the algorithms” or determine the keys (with the given key sizes) is approximately the same using a given resource. The security strength of an algorithm for a given key size is traditionally described in terms of the amount of work it takes to try all keys for a symmetric algorithm with a key size of ""X"" that has no short cut attacks (i.e., the most efficient attack is to try all possible keys). In this case, the best attack is said to be the exhaustion attack. An algorithm that has a Y-bit key, but whose strength is comparable to an X-bit key of such a symmetric algorithm is said have a “security strength of X bits” or to provide “X bits of security”. Given a few plaintext blocks and corresponding cipher text, an algorithm that provides X bits of security would, on average, take 2X-1T units of time to attack, where T is the amount of time that is required to perform one encryption of a plaintext value and compare the result against the corresponding ciphertext value."
crypto,2qt80g,silverforest,1 point,Tue Dec 30 14:58:05 2014 UTC,Yes it entails determining the strength by its probability space and the complexity of the process in reduction of that.  By bits for example it measures the probabilities in unit bits that can be converted to other units of measure such as H. Further it is then fitted into system of equation that can be used for macro local contexts and params like time energy cost etc
crypto,2qs1mh,c0cky,4,Tue Dec 30 03:26:11 2014 UTC,"This is quite underwhelming but makes me pretty happy about trusting in RSA, AES and Diffie-Hellman.   I don't know how you arrived at that conclusion. It was a combination of Tor, Trilight Zone (VPN/proxy?), CSpace, ZRTP VOIP and Linux that made it ""catastrophic"". That's layers upon layers of encryption and also an open source OS. I wonder if you remove one of the listed programs it becomes crackable for them again.   It's pretty clear if you read the leaked docs (there's over 20 linked in the Spiegel article) that RSA is ""easy"" to crack in SSL because of the fixed key slide 33. Same slide for Ephemeral Diffie-Hellman, not exploitable by the ""easy"" way. Note regular DH not mentioned. But this doesn't rule out another more difficult way for cracking EDH. For AES in another slide it mentions they have in house capability against it."
crypto,2qs1mh,stratha,3,Tue Dec 30 08:25:08 2014 UTC,"The way I interpreted slide 33 was not that RSA keys are crackable, rather a technical point that an SSL packet stream can be decrypted if you have the RSA key, which is ""not impossible"".  For AES they say they have ""only a handful of in-house techniques"", which reads rather like an endorsement to me."
crypto,2qs1mh,filteredpi,1 point,Tue Dec 30 15:42:10 2014 UTC,This is in context of mass data collection. That is not carry easy to different context because of mass collection entail much larger set.
crypto,2qspj8,stratha,4,Tue Dec 30 07:47:01 2014 UTC,"The skein paper describes how to use it as a stream cipher on page 21.   To use Skein as a stream cipher, supply the key to the key input and the nonce (that selects the key stream to generate) to the nonce input. By convention, since the length of the desired key stream is not known in advance, set the output size in the configuration value (see Table 7) to 264 − 1. Implementations can then compute any part of the key stream as desired. For encryption and decryption, the key stream is XORed with the plaintext or ciphertext.  There is a fundamental difference between Skein-PRNG and using Skein as a stream cipher to generate random bits. The outputs of a PRNG are typically not reproducible. Skein-PRNG actually does work to ensure that once an output has been produced, the PRNG state no longer contains the necessary information to reconstruct the output. A stream cipher creates reproducible random data. Depending on the application, one or the other might be desirable.  An application that needs random access to a large random string can use the Skein stream cipher mode in two ways. It can use a single nonce and selectively generate output blocks, or it can include a counter in the nonce and generate a fixed size block for each nonce value. In general, we recommend the second approach as it does not require a new API for selectively generating parts of the output string, and thus is easier to implement using an existing Skein implementation."
crypto,2qspj8,yotta,1 point,Tue Dec 30 16:46:39 2014 UTC,"Agreed this would be easier to verify the implementation. However it would mean writing a custom Skein encryption implementation yourself, because no-one has done it yet, which is moderately challenging."
crypto,2qspj8,yotta,1 point,Sun Jan 4 09:17:02 2015 UTC,"It can be built from the reference implementation like this:  void Skein_512_Crypt(const unsigned char *key,   size_t key_sz,                      const unsigned char *nonce, size_t nonce_sz,                            unsigned char *data,  size_t data_sz) {   int i, n = 0;   Skein_512_Ctxt_t ctx;   unsigned char hashval[SKEIN_512_BLOCK_BYTES];   /* setup */   Skein_512_InitKey(&ctx, UINT64_MAX, key, key_sz);   Skein_512_Set_Parameter(&ctx, NONCE, nonce, nonce_sz, hashval);   Skein_512_Final_Pad(&ctx, hashval);    /* processing */   while (data_sz) {     Skein_512_Output_Block(&ctx, n, hashval);     for (i = 0; i < SKEIN_512_BLOCK_BYTES; ++i) {       data[n*SKEIN_512_BLOCK_BYTES+i] ^= hashval[i];       if (--data_sz == 0)         break;     }     ++n;   } }   Not very complicated."
crypto,2qspj8,DoWhile,3,Sun Jan 4 19:12:34 2015 UTC,"The top answer there is what I would have said: despite being hash functions, they already offer an official stream cipher mode.  Depending on the application, hardware AES GCM mode would probably be the fastest, though if you are paranoid about using standardized stuff then Skein (cipher mode), Keccak (cipher mode), Blowfish (and friends), and ChaCha (and friends) are all reasonable alternatives.   That makes implementation, testing and any security audit a lot simpler.   It's never easy.  Also you are going to get confused as hell when you want to differentiate the hash mode from the cipher mode that you're almost going to be better off using completely different schemes for each."
crypto,2qspj8,SAI_Peregrinus,4,Tue Dec 30 09:33:30 2014 UTC,"Skein is a hash based on the Threefish block cipher. So using Threefish in CTR mode would also work to give a stream cipher, and might avoid confusion."
crypto,2qspj8,SAI_Peregrinus,1 point,Tue Dec 30 15:41:50 2014 UTC,"Does Threefish actually have a proper specification where it details the inputs you should pass into the function, the number of rounds, the length of the IV and published test vectors to verify the implementation against?"
crypto,2qspj8,mnordhoff,1 point,Sun Jan 4 09:14:58 2015 UTC,"Yes. The Skein paper describes Threefish, UBI mode, and then builds Skein out of it. See section 3.3. Skein is built out of several invocations of Threefish in UBI mode."
crypto,2qtpa2,XoXFaby,2,Tue Dec 30 16:21:44 2014 UTC,You could try cracking it. I think Elcomsoft's tool is the most well known.
crypto,2qtpa2,yotta,2,Tue Dec 30 16:37:54 2014 UTC,"This is called a Known-plaintext attack and as far as anyone knows, modern cyphers are not susceptible to it. Meaning it should take just as long to crack the password as it would if you didn't have the plaintext."
crypto,2qtpa2,FakingItEveryDay,3,Tue Dec 30 16:39:30 2014 UTC,"Just to explain this situation a bit better (this may not apply to RAR, but it does to stuff like luks+dm-crypt):  The password a user enters to decrypt an encrypted file is not the actual key that is used in the decryption process. Usually, when the file is initially encrypted, the machine picks a key that is completely random and uses that key to encrypt the data.  This completely random key is then encrypted with yet another another key. The key encryption key is derived from the password the user enters. The algorithm used to derive this key is called either a KDF (key derivation function) or key stretching. What these algorithms do is take some input data, and forces the machine to do a lot of work to get some result.  Why do we want the machine to do a lot of work? Because if we are forced to do a lot of work, then so is an attacker. If we have to spend 2 seconds to get the result, then so does the attacker (the attacker might have a faster machine, but they still must expend a lot of resources.). 2 seconds may not sound like a lot of time, but when you consider how many combinations they must try, 2 seconds starts to seem like an eternity.  So far, this only explains that the password and the key to actually decrypt the data are not the same and are not at all related. As mentioned before, most modern algorithms have a special property which does not allow the key to be found is someone has the ciphertext and the plaintext.  However, some methods of encrypting data, particularly the one time pad (rarely if ever used in practice) are vulnerable to plain text key recovery. The one time pad works by doing the XOR binary operation with the data and some random data which is the key. If you look at the XOR truth table, you can clearly see that if you have any 2 of the 3 pieces of data (the key, the ciphertext or the plaintext) the third piece of data can be easily calculated."
crypto,2qtpa2,pushme2,2,Tue Dec 30 21:44:29 2014 UTC,"That's not really what he was asking. Even if a known plaintext attack were possible, it would not reveal what password was used."
crypto,2qtpa2,yotta,3,Tue Dec 30 16:59:05 2014 UTC,"No, but the reverse is true. If it were possible to determine what the password is, then it would be possible to crack it. Since it's not possible to crack it, it's therefore not possible to determine what the password is. (Or, more precisely, it's not possible for the plaintext to help you determine what the password is)"
crypto,2qtpa2,OlderThanGif,0,Tue Dec 30 17:34:44 2014 UTC,"...what? That explanation seems convoluted.   From the password, you can get the encryption key. Having the encryption key does not help you get the password. Guessing (cracking) the password is almost certainly the easiest way to get the encryption key."
crypto,2qtpa2,yotta,3,Tue Dec 30 18:35:39 2014 UTC,"/u/FakingItEveryDay said ""plaintext cannot help you get the encryption key""  You said ""OP doesn't care about the encryption key. They only want the password""  I said ""from the password, you can get the encryption key. Therefore, it must be impossible for the plaintext to help you get the password""  Or that's my understanding of things, anyway."
crypto,2qtpa2,OlderThanGif,1 point,Tue Dec 30 19:16:01 2014 UTC,"Known-plaintext attack:       The known-plaintext attack (KPA) is an attack model for cryptanalysis where the attacker has samples of both the plaintext (called a crib), and its encrypted version (ciphertext). These can be used to reveal further secret information such as secret keys and code books. The term ""crib"" originated at Bletchley Park, the British World War II decryption operation.       Interesting: Ladder-DES | Davies' attack | Cellular Message Encryption Algorithm | REDOC   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2qtpa2,autowikibot,1 point,Tue Dec 30 16:40:07 2014 UTC,"To make sure I made it clear. I have every single file in there, not just one."
crypto,2qoxvw,ZaphodsOtherHead,8,Mon Dec 29 07:14:10 2014 UTC,"The attacks on SSH and AES are not well defined/understood and are probably not as bad as the title suggests. Good news: PGP, OTR, TOR, and anything by Open Whisper Systems is reasonably solid.Here is the CCC talk that accompanied this story.  Edit: Here are Mathew Green's comments on the article"
crypto,2qoxvw,PubliusPontifex,1 point,Mon Dec 29 07:18:13 2014 UTC,"TOR is broken because it is weak to a plurality compromised node attack via probabilistic correlation (awful lot of nodes in Virginia/Maryland for some reason).  If they've got a solid AES attack... damn. I mean I'm not even mad at that point. 'Congratulations, you win, well done'."
crypto,2qoxvw,PubliusPontifex,11,Mon Dec 29 08:50:19 2014 UTC,"sigh. Read the documents. The NSA would like to break Tor, but they can't. The best they can do is some browser exploits traffic analysis that works only some of the time. Most of the time, for most Tor users, Tor defeats the NSA. As for the viability of Sybil attacks, check out the recent attempts by Lizard Mafia. Can you supply any data about the number of relays in Virginia? Also, if the NSA thought that a Sybil attack was the best way to attack Tor users, do you really think they would sign up a bunch of relays with NSA ip addresses?"
crypto,2qoxvw,sealfoss,1 point,Mon Dec 29 09:24:55 2014 UTC,"Holy crap, last time I checked (late 2013 or so) there were way more, this looks a lot better than it used to:  http://freehaven.net/~ioerror/maps/v3-tormap.html  But hell yeah, why isn't it a good idea? BULLRUN is far more aggressive and ambitious, and it isn't even specifically targeted against a 'high-risk class', buying a few 1U's at different colos around the world is peanuts in comparison, particularly given the potential payoff if successful.  Correlation isn't a smoking gun, but this isn't a legal case, it's suspicion, so yes I do believe TOR is, if not broken, then definitely vulnerable to compromised nodes, because you can hide a lot, but in the end statistics will get you.  In the end, I think they are doing it, simply because the cost/benefit is great, and honestly, I'd do it in a second.  Here we go: https://blog.torproject.org/blog/tor-security-advisory-relay-early-traffic-confirmation-attack"
crypto,2qoxvw,drmartinsweden,7,Mon Dec 29 10:02:30 2014 UTC,"Yeah, because NSA can't own nodes in other parts of the world.  And the cynical side of me says that if they actually don't run as many tor nodes anymore, its because they don't have to."
crypto,2qoxvw,PubliusPontifex,0,Mon Dec 29 15:32:51 2014 UTC,"Why isn't it in the Snowden docs, then?"
crypto,2qoxvw,sealfoss,5,Mon Dec 29 10:15:25 2014 UTC,These documents are from 2011 or 2012.
crypto,2qoxvw,sealfoss,3,Mon Dec 29 12:22:39 2014 UTC,"Ok. Good point. So  you're suggesting that the NSA might have broken Tor after 2013 (The docs may be from 2011-2012, but Snowden knew about what they could do up to 2013 and continued to use Tor anyway)? It's definitely possible, but I think it's unlikely. The Tor devs have had a lot of time since then to make it better. You might say that the NSA has had more time to find vulns, and you'd be right. But the Tor project has had a massive influx of new users and funding. The network is bigger and funding for it's development is greater than ever before. I'm willing to bet that it is harder for the NSA to crack it now than when Snowden collected those docs.  I'm open to the idea that Tor is broken, but I need decent evidence for it."
crypto,2qoxvw,sealfoss,5,Mon Dec 29 19:10:52 2014 UTC,"It was leaked separately, both before and after Snowden.  Snowden got the press, but netsec people heard most of that noise well before it got out, I'm not even talking about cryptome, wired did a piece on the Utah data center back in 2011 or so."
crypto,2qoxvw,conradsymes,-10,Mon Dec 29 14:54:41 2014 UTC,"The NSA would like to break Tor, but they can't. The best they can do is some browser exploits traffic analysis that works only some of the time. Most of the time, for most Tor users, Tor defeats the NSA.   Hahahaha.  Thanks you random person on reddit, for sharing your insider information on one of the most secretive organizations on the planet."
crypto,2qoxvw,conradsymes,6,Mon Dec 29 15:31:32 2014 UTC,http://www.theguardian.com/world/interactive/2013/oct/04/tor-stinks-nsa-presentation-document
crypto,2qoxvw,conradsymes,-7,Mon Dec 29 18:10:38 2014 UTC,http://i.imgur.com/NQHKSVE.gif
crypto,2qoxvw,Uncaffeinated,0,Mon Dec 29 18:27:48 2014 UTC,awful lot of nodes in Virginia/Maryland for some reason   lol.  for some reason.
crypto,2qoxvw,sapiophile,-3,Mon Dec 29 15:29:19 2014 UTC,not really  http://blog.cryptographyengineering.com/2014/08/whats-matter-with-pgp.html
crypto,2qoxvw,filteredpi,15,Mon Dec 29 07:39:12 2014 UTC,"Mathew Green is complaining about usability problems and lack of forward secrecy and bad software that interacts with gpg, like enigmail. None of those are cryptanalytic attacks on PGP itself. I agree with what he's saying, but that's not really what the article I linked to is talking about.  Edit: ""Most of these issues are not exploitable unless you use PGP in a non-standard way"". The NSA is unable to break PGP encrypted messages, is the point."
crypto,2qqv38,neutralinostar,2,Mon Dec 29 21:02:51 2014 UTC,And slides are here
crypto,2qqv38,sellibitze,2,Mon Dec 29 21:03:03 2014 UTC,"NORX is IMHO one of the more promising/likable ciphers of that competition. I like cryptographic Sponges. I like the idea of NORX' F function being based on djb's ChaCha. And I like that they replaced x+y with x^ y^ ((x&y)<<1) in the G function which should make hardware implementations more efficient. And the performance of software implementations is impressive, too. I expect NORX to be part of the final portfolio."
crypto,2qpa98,jmw74,4,Mon Dec 29 10:43:10 2014 UTC,What's the attack on XOR?
crypto,2qpa98,oconnor663,3,Mon Dec 29 16:00:49 2014 UTC,I'm looking for the link but I haven't been able to find it. But this one does describe one problem with it (that might affect my use case as well):  http://stackoverflow.com/questions/5889238/why-is-xor-the-default-way-to-combine-hashes
crypto,2qpa98,bitwiseshiftleft,3,Mon Dec 29 16:13:40 2014 UTC,"Linear algebra.  Given a 256-bit hash output, and 256 linearly-independent malicious items, you can find a subset of them whose hashes xor to a target of your choice.  It will probably have about 128 items in it.  With a larger set of malicious items and a lattice reduction, you can find a smaller subset hashing to the target."
crypto,2qpa98,cunttard,3,Tue Dec 30 00:55:00 2014 UTC,"I'm not sure why you're requiring a cryptographic solution, but there are set reconciliation techniques which employ similar approaches to identify if two sets are equal (or what their differences are)."
crypto,2qpa98,cunttard,2,Mon Dec 29 10:53:34 2014 UTC,"Sorry, I guess I should have mentioned, the hash is for use in HMAC.  The idea is I want to sign some unordered data.  For example:  ""The secret ingredients are: 1 cup soda water, 2 mint leaves, 1 teaspoon cough syrup""  I want the signature to verify even if the order of the ingredients are changed."
crypto,2qpa98,marklarledu,3,Mon Dec 29 11:13:24 2014 UTC,"Cryptographic hash functions do not allow commutative inputs since that breaks the property of collision resistance.  I'm not sure if this is the right direction but you can use  (a) aggregate MACs (just XOR the MAC of each individual item), or  (b) short signature schemes with batch verification (I recall bilinear pairings makes this trivial to implement but you'll want to research existing schemes)."
crypto,2qpa98,phyzome,1 point,Mon Dec 29 11:39:57 2014 UTC,"All these hash functions operate on integers.  I would just need a way to convert a set to an integer, such that it's 1:1.    Set reconciliation is a harder problem than I'm trying to solve.  I don't need to know the difference between two sets, just whether they're equal or not."
crypto,2qpa98,autowikibot,5,Mon Dec 29 12:42:47 2014 UTC,"You won't know the difference between the two sets via option (a), you'll just know if the sets contain the same elements. Just MAC each item in the list and then XOR all the MACs together. For added security, you might want to take the number of items in the list into account. For example, instead of just giving a MAC you may want to provide the MAC and the number of items in the list. If providing another value is not possible, you could do something like the following:   MAC each list entry XOR all the MACs from step 1 together MAC the number of items in the list using the output of step 2 as the key Provide the output of step 3 as the final MAC   Alternatively, you could do the following   MAC the number of items in the list with your key Using the output of step 1 as the key, MAC each entry in the list XOR each MAC value in step 2 together Provide the output of step 3 as the final MAC   Note: I have not done any type of research into the schemes above so I would definitely proceed with a high degree of caution if you are considering using something similar to what I described above. Rolling your own crypto is not something you should be doing and following what I said above is coming dangerously close to doing that."
crypto,2qpa98,AlexWebr,1 point,Mon Dec 29 18:37:43 2014 UTC,Then you just need to specify a total order or sorting algorithm for the inputs. I don't think concepts from cryptography will help you here.
crypto,2qpa98,autowikibot,1 point,Mon Dec 29 13:36:11 2014 UTC,"Data synchronization:       Data synchronization is the process of establishing consistency among data from a source to a target data storage and vice versa and the continuous harmonization of the data over time. It is fundamental to a wide variety of applications, including file synchronization and mobile device synchronization e.g. for PDAs.      Interesting: Windows Mobile Device Center | Synchronization (computer science) | Watermark (data synchronization) | OfflineIMAP   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2qpa98,bren2010,3,Mon Dec 29 10:53:43 2014 UTC,"Perhaps a cryptographic accumulator is a step in the right direction? I don't know if they are secure for comparing entire sets at once, though."
crypto,2qpa98,justusranvier,1 point,Mon Dec 29 18:28:30 2014 UTC,"Accumulator (cryptography):       A cryptographic accumulator is a one way membership function. It answers a query as to whether a potential candidate is a member of a set without revealing the individual members of the set. One trivial example is how large composite numbers accumulate their prime factors, as it's currently impractical to factor a composite number, but relatively easy to find a product and check if a specific prime is one of the factors. New members may be added or subtracted to the set of factors simply by multiplying or factoring out the number respectively. More practical accumulators use a quasi-commutative hash function where the size (number of bits) of the accumulator does not grow with the number of members.     Interesting: Commitment scheme | Quasi-commutative property | ISAAC (cipher)   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2qpa98,bitwiseshiftleft,1 point,Mon Dec 29 18:28:49 2014 UTC,"The original paper on accumulators describes exactly what OP wants--a quasi-commutative collision-resistant hash function.  Quasi-commutative meaning that f(f(x, y1), y2) = f(f(x, y2), y1).  Since then, accumulators have been abstracted to be a set of algorithms that allow efficient and short witnesses of membership to a set in the same way that given a public key, a signature is a witness of membership to the set of signed messages.  The easiest-to-implement quasi-commutative hash function that I can think of is to choose a random modulus N=pq (RSA-style), and a random x as the empty accumulator.  To add a message to the accumulator, you output x' = xH(m), where H(m) is the hash of the message.  The function is clearly quasi-commutative and one-way under the strong RSA assumption.  Collision-resistance depends on the one-wayness and collision-resistance of the hash function."
crypto,2qpa98,cunttard,2,Thu Jan 1 00:17:41 2015 UTC,This might work?  http://blog.notdot.net/2012/08/Damn-Cool-Algorithms-Homomorphic-Hashing
crypto,2qpa98,bitwiseshiftleft,2,Mon Dec 29 13:27:07 2014 UTC,"If the inputs can be encoded as elements E_i of a field, eg by hashing them too, you can also compute the hash of the polynomial P(x) := prod(x - E_i).  Or you can compute the hash of P(0), P(1), ...  This probably doesn't count as ""more elegant"" unless the elements start out as field elements, though."
crypto,2qpa98,Natanael_L,1 point,Mon Dec 29 17:57:09 2014 UTC,I like this solution. I've seen the polynomial representation in passing when discussing set reconciliation algorithms; is it a standard technique or is it rooted in some sort of scheme?
crypto,2qpa98,bitwiseshiftleft,1 point,Mon Dec 29 21:03:01 2014 UTC,I don't know where this solution originated.  It may be folklore.
crypto,2qpa98,Natanael_L,1 point,Tue Dec 30 00:51:14 2014 UTC,EC multiply?   http://www.reddit.com/r/crypto/comments/2qpa98/hashing_unordered_lists_of_items/cn9nnpk
crypto,2qpa98,bitwiseshiftleft,1 point,Tue Dec 30 21:00:32 2014 UTC,"That also works if you can hash to the curve in an almost-random-oracle fashion.  SWU or Elligator, or hunt+peck."
crypto,2qpa98,FryGuy1013,2,Tue Dec 30 21:32:58 2014 UTC,"Since I enjoy exploring how you can mess with Elliptic Curve Cryptography, here's one inspired by other usage in Bitcoin (vanitygen, stealth addresses):  EC multiply.  You treat one of the individual hashes as a point on an elliptic curve. Doesn't matter which you begin with. Then you take that point and run EC multiply on it with one of the other hash values as the input. And you multiply in all of them. As long as all the inputs are the same, their order don't matter, the output will be the same.   This isn't much different from simple XOR the way you want to use it, other than that this is much much harder to tamper with. To get the same output, you simply MUST have an identical set of inputs, meaning you must either break the hash function itself or the elliptic curve itself.  Edit: as said in the reply, use a method that's secure with ECC to map the hash values to a point before you run EC multiply:   That also works if you can hash to the curve in an almost-random-oracle fashion. SWU or Elligator, or hunt+peck."
crypto,2qpa98,bitwiseshiftleft,2,Tue Dec 30 20:59:54 2014 UTC,"This is true so long as you can model your hash function to the curve as a random oracle or nearly so.  For example, you can use Shallue - van de Woestijn - Ulas on any curve, or Elligator (Bernstein - Hamburg - Krasnova - Lange) on a curve with 2-torsion.  Or you can hunt and peck.  But you can't use ghash to encode to the curve.  Proof sketch: if the hash function looks like a random oracle (perhaps with a distribution affected by some simple sampling algorithm), then the attack should still work if it returns ga hb for random a, b with rejection sampling.  In that case, finding a collision would find c = ga1 hb1 = ga2 hb2.  Then with high probability, a1 != a2 and b1 != b2 mod the large prime-order part of the ECC group.  Dividing through gives the discrete log of h, base g."
crypto,2qpa98,FryGuy1013,1 point,Tue Dec 30 21:44:04 2014 UTC,"Perhaps I'm not understanding everything correctly, but my understanding is that there is an elliptic curve, with some base point B that has high order on the curve. Elliptic curves only have point addition, and scalar multiplication. So suppose there's a list of x_1, x_2, ..., x_n. If X = H(x_1) * H(x_2) * ... * H(x_n) * B, and X is published, how is it possible to determine a set of x that have the same output, given that if you knew the value of product(H(x_i)), you could determine the discrete log of X?"
crypto,2qleal,horsefactory,4,Sun Dec 28 05:04:37 2014 UTC,"There are two promising projects building on TrueCrypt code, though I wouldn't trust them without looking at the diffs manually. That said I did quickly glance over VeraCrypt's changes and it seems that the majority of the patches are related to fixing the problems uncovered in the TC security audit.  https://veracrypt.codeplex.com/ https://ciphershed.org/"
crypto,2qleal,mrschyte,1 point,Sun Dec 28 14:35:14 2014 UTC,"Veracrypt seems to be the most popular, and they've fixed a lot of the problems the audit uncovered. Is my personal choice, though I'm gonna check out Ciphershed now."
crypto,2qleal,Diasparo,1 point,Sun Dec 28 18:07:06 2014 UTC,"Something interesting to note - according to the commit history of VeraCrypt, it looks like the maintainer originally forked and started making changes in June 2013, a year before TC was abandoned. One of the first commits also references one of the security issues raised through part 1 of the TC audit.  link to commit: https://veracrypt.codeplex.com/SourceControl/changeset/f89266e2e7bb03361c804054d214c0c1490a67d2"
crypto,2qleal,vicks84zi,1 point,Sun Dec 28 20:43:03 2014 UTC,"CipherShed has been compromised since the founding.  Jason Pyeron, a member of the project management committee and one of the security developers works for DISA, a government agency, according to his LinkedIn profile.  It looks like CipherShed has been compromised in the initial founding and is not a viable alternative to TrueCrypt.  List of CipherShed project members: https://ciphershed.org/about/ We should do our research on each and every project member.  What is DISA? https://en.wikipedia.org/wiki/Defense_Information_Systems_Agency"
crypto,2qleal,vicks84zi,3,Mon Dec 29 04:20:22 2014 UTC,"Mounir IDRASSI is based in France and that at least puts him out of the jurisdiction of the U.S. He's active in the community and from his posts he seems very knowledgeable. His identity is known unlike the original TrueCrypt authors. I would trust VeraCrypt over CipherShed any day. Transparency is a must.  Here's his sourceforge profile: http://sourceforge.net/u/idrassi/profile/  Another option is DiskCryptor (Windows only) which isn't based on the TrueCrypt source code. It has some features some people may be interested in such the ability to place the boot loader on external media, which gives an extra element of plausible deniability. However, DiskCryptor is developed by two anonymous Russian guys so there is no transparency."
crypto,2qleal,OfFireAndFlame,3,Thu Jan 8 04:16:47 2015 UTC,I thought TrueCrypt was dead after their site went dark and started promoting BitLocker  http://truecrypt.sourceforge.net/
crypto,2qleal,quisp65,1 point,Thu Jan 8 05:26:23 2015 UTC,"Pardon my nuubishness and tin foil hat theory, but the last version being insecure and people finding out and then recommending Bitlocker makes me think he took a cash payment from someone like the govt to have a back door.  There are police dept power point presentations on how there is a back door to Bitlocker.  I think greed corrupted the author."
crypto,2qleal,Intrexa,5,Thu Jan 8 05:56:19 2015 UTC,"It sounds like the opposite. If he took a payout, they wouldn't shut down truecrypt, they would have introduced a backdoor into it. This sounds like a canary, the government can issue gag orders so you can't talk about legal requests you need to comply with, so they came out and said truecrypt is dead for its intended purpose, then goes on to promote a product everyone already thought was backdoored."
crypto,2qleal,OfFireAndFlame,2,Sun Dec 28 07:55:10 2014 UTC,I would be VERY surprised if people involved with TrueCrypt would promote a closed source FDE written by a company known to have ties with the gov. No ones quite sure exactly what happened though (at least to my knowledge).
crypto,2qleal,omegga,1 point,Sun Dec 28 14:02:25 2014 UTC,"It's dead but the last secure version still works well. There were several indications that the audit would continue in spite of the abandonment, specifically because TC still works and is a useful tool."
crypto,2qleal,BeaverViking,1 point,Sun Dec 28 16:05:00 2014 UTC,"Der Spiegel released an article today on the capabilities the NSA has to break crypto. It was mentioned that TrueCrypt was a ""major problem"".   The NSA also has ""major"" problems with Truecrypt, a program for encrypting files on computers. Truecrypt's developers stopped their work on the program last May, prompting speculation about pressures from government agencies.   This is an indication that TrueCrypt was in fact secure. However, they regard the usage of TrueCrypt as a ""major"" problem and not a ""catastrophic"" problem. So the question remains whether TrueCrypt is truly secure. My bet is that it was secure. The reason it may not be ""catastrophic"" is that they can always try to get you to install a keylogger, or try to control your computer using other exploits."
crypto,2qleal,bspach,1 point,Sun Dec 28 15:18:16 2014 UTC,There is speculation that this is part of internal MacGuffin-type misleading practices.
crypto,2qleal,Intrexa,1 point,Sun Dec 28 19:44:48 2014 UTC,"TC was dropped; CS is the new fork.  Not ready for general usage, yet.  ciphershed.org"
crypto,2qleal,industrialwaste,7,Sun Dec 28 22:35:01 2014 UTC,There's like 50 forks.
crypto,2qleal,banjo_plucking_fury,15,Fri Jan 9 06:19:45 2015 UTC,When all you needs a knife
crypto,2qleal,industrialwaste,0,Sun Dec 28 14:30:51 2014 UTC,"This comment deserved two upvotes, thankfully you posted it twice so I was able to accommodate that."
crypto,2qleal,Natanael_L,4,Sun Dec 28 15:59:42 2014 UTC,"Did I double post?  edit I did. I blame the Internet, mobile phones, and unofficial apps for this malfunction."
crypto,2qleal,vicks84zi,4,Sun Dec 28 19:24:49 2014 UTC,"Also, lack of a nonce field in the form to detect and block duplicate submissions on the server."
crypto,2qleal,user5543,1 point,Sun Dec 28 19:36:53 2014 UTC,"CipherShed has been compromised since the founding.  Jason Pyeron, a member of the project management committee and one of the security developers works for DISA, a government agency, according to his LinkedIn profile.  It looks like CipherShed has been compromised in the initial founding and is not a viable alternative to TrueCrypt.  List of CipherShed project members: https://ciphershed.org/about/ We should do our research on each and every project member.  What is DISA? https://en.wikipedia.org/wiki/Defense_Information_Systems_Agency"
crypto,2qleal,LordCurlyFry,1 point,Sun Dec 28 19:54:12 2014 UTC,"I'm aware TC was abandoned, but since it seems like several next steps are being taken to fork TC, wouldn't the TC audit still be relevant and pertinent to verifying it's security?"
crypto,2qleal,Dyamalos,3,Tue Dec 30 21:03:04 2014 UTC,But didn't they crowdfund for exactly that reason?
crypto,2qleal,LordCurlyFry,-2,Thu Jan 8 04:27:52 2015 UTC,It's dead. Don't use it. That's really the bottom line.
crypto,2qleal,Rikvidr,2,Sun Dec 28 19:38:58 2014 UTC,Is there any reason to discontinue its use though? It works well and the only indication that it's insecure was from its abrupt and enigmatic abandonment - which the audit would help uncover whether that's really the case.
crypto,2qleal,IndoctrinatedCow,1 point,Sun Dec 28 07:10:59 2014 UTC,"I think the message wasn't that it was inherently insecure but that if any exploits or weaknesses were found they would not be fixed as the project has been abandoned.  I still use it for some things, but mainly because I haven't found a solid alternative yet. Veracrypt looks promising though."
crypto,2qleal,LordCurlyFry,0,Sun Dec 28 08:52:15 2014 UTC,"Yes, Truecrypt no longer is developed or supported. That should be enough reason to not use a critical piece of software. The way I look at it is that with TC one will have to migrate eventually. There's gonna' be a bug, and it's gonna' get exploited, and it's not gonna' be patched. So either we migrate preemptively, or we migrate later after people start to get owned. In security the professional thing to do is to be proactively paranoid about these kinds of things."
crypto,2qleal,IndoctrinatedCow,0,Sun Dec 28 14:16:28 2014 UTC,"This is an excellent point. I was implicitly under the assumption everyone would need to migrate eventually, though when may be flexible in some situations. I was also hoping for a TC successor to be more emergent/apparent at this time, which provides migration or compatibility with TC volumes."
crypto,2qleal,LordCurlyFry,0,Sun Dec 28 19:42:56 2014 UTC,"The fact of the matter is, depending on what you're hiding, and from whom you are hiding it, if you truly care about your security, especially with all of this about TrueCrypt up in the air, you should be using LUKS.  Not saying this is your intentions, but as an example, people have asked me if TC is good to hide their porn, say from their girlfriends. My answer is always no, because why bother? Get a new girlfriend, or make a hidden folder, or something. But if one has truly sensitive information, LUKS is the way to go. Most security-conscious people would not use something with so many unknown vulnerabilities."
crypto,2qleal,LordCurlyFry,2,Sun Dec 28 21:56:18 2014 UTC,What should you be using instead?
crypto,2qleal,Saicotic,2,Mon Dec 29 01:43:36 2014 UTC,"For Windows:  DiskCryptor and BleachBit are the closest non-forks to Truecrypt.   Veracrypt is okay, but it's a fork of Truecrypt. It worries me as it is re-using code that's already somewhat suspect.   Axcrypt is pretty neat, but its functionality is very different from TC.   For Mac OS:  encfs is your only option. Filevault is almost certainly backdoored, especially after all this PRISM business, and the business Apple's had lately with the FBI regarding iPhone crypto. encfs has been audited. There is a catch with encfs, and according to the encfs audit is is as follows:  ""EncFS is probably safe as long as the adversary only gets one copy of the ciphertext and nothing more. EncFS is not safe if the adversary has the opportunity to see two or more snapshots of the ciphertext at different times. EncFS attempts to protect files from malicious modification, but there are serious problems with this feature.""  There is a version of encfs for Windows.   For Linux:  dm-crypt + LUKS is the current preferred method. It can be implemented using the cryptsetup package in most Linux distros and some BSDs."
crypto,2qleal,LordCurlyFry,0,Mon Dec 29 03:17:19 2014 UTC,Thanks a lot! I'll look into these a little more.   If/when the truecrypt audit finishes would a fork then become a more trustworthy option. That is if the audit doesn't find any gaping flaws?
crypto,2qleal,Sloofus,0,Mon Dec 29 17:08:52 2014 UTC,"Yes, when the second/third/forth stage audit comes back and the forks fix the concerns raised by the auditors they will be much more trustworthy. However I would not consider any truecrypt fork ""audited"", unless that project gets its own audit. Forks do not inherit the status of being audited in my opinion.   The first stage audit is not enough to consider anything safe though. It only covered the bootloader for full disk encryption, and the Windows kernel driver. No actual crypto has been audited yet."
crypto,2qleal,Sloofus,0,Sun Dec 28 20:17:37 2014 UTC,"Have any of the alternatives you mentioned gone through some equivocal audit or verification which was started for TC? Unless the crypto routines change between TC and its forks, wouldn't continuing the audit still be valuable? Like the veracrypt fork, it looks like the only changes made to crypto routines were based around the results of the part 1 audit - everything else seems to be re-branding."
crypto,2qleal,SecureThoughts,0,Mon Dec 29 01:54:42 2014 UTC,"I mentioned encfs's audit my post with alternatives.  Continuing to audit TC's forks will absolutely be valuable. This is the most critical part of the process we've got to deal with. There are most likely going to be issues with Truecrypt's crypto. These issues will never get fixed in Truecrypt's base. The forks will fix these problems. However there is no guarantee that the fixes will be good unless those forks get audited.   Beyond this, as I said, Truecrypt's base will never be altered in any official capacity (as far as we know.) The forks will have to continue releasing patches and changes of their own. They'll be responsible for pushing their own versions of new algorithms and standards. For example, RIPEMD-160 is already pretty inferior. SHA-512 and Whirlpool won't be secure forever. Same with AES, Twofish, and Serpant. That's the reality of cryptography. The TC forks are gonna' have to implement new algorithms sooner or later.  More bugs will be found, more bugs will be fixed, and more bugs will be made in this process. Such is life in software development.   EDIT: Fine example; In a talk with Applebaum and Poitras at 31C3, it turns out the NSA may have cryptographic attacks against AES. If AES has been significantly weakened, it'll get replaced. And forks of Truecrypt will probably need to be outfitted with whatever new algorithm gets spun to replace AES."
crypto,2qleal,Plasma_000,0,Mon Dec 29 02:08:39 2014 UTC,"7.1a has been shown to be reasonably secure. There is no reason to discontinue its usage at this point. Personally, I'm just waiting to see which fork takes off."
crypto,2qnfpe,statoshi,7,Sun Dec 28 21:59:22 2014 UTC,"For the most part, it won't change.  We have to consider why we encrypt documents/messages. Mostly it is because there is information which we don't want to fall into the hands of someone else. But all information has a lifespan.  For example if Company A is thinking of buying Company B then they may choose to encrypt all of their communication to hide their intent until the last possible moment. But after the sale there is very little that is gained by having those documents safe from being decrypted - the action has been taken. And companies don't last forever, they fold or morph into different entities in which case there is nothing gained.  We could look at personal journals and such and make an argument that we would always want certain documents about ourselves encrypted. In which case there is nothing stopping us from re-evaluating our chosen crypto scheme every X-5 years and re-encrypting everything under a new scheme (most protocols already call for crypto-keys to be rotated regularly, thinking on a longer term it would make sense to re-evaluate schemes too - and this does indeed happen already).  And then there are always destruction schemes. Keeping data is risky, it is in many cases a liability, deletion is often much easier than trying to secure it long term."
crypto,2qnfpe,sarahjamielewis,4,Sun Dec 28 22:19:08 2014 UTC,"In which case there is nothing stopping us from re-evaluating our chosen crypto scheme every X-5 years and re-encrypting everything under a new scheme   If the ciphertext is already in the hands of an attacker, re-encrypting is moot."
crypto,2qnfpe,molo1134,3,Mon Dec 29 02:04:28 2014 UTC,"This is a fair point. Although I still believe there is value in re-evulating crypto schemes. Yes, if the ciphertext ends up in the hands of the attacker then they can choose to spend the resources to try and break it. However, you are in a better position if before that happens you have been constantly re-evaluating your crypto.  For messages its another story, they regularly cross untrusted networks and may end up in the hands of an attacker. But then if falls back to an economic argument - is it worth the effort to spend 5 year brute forcing a message which is only relevant for the 6 months after it was first sent? And it falls upon the individual to work out how long they would like their message to be safe for.   If a message you send has to be safe for the next 100 years, than maybe it is worth hand delivering :)"
crypto,2qnfpe,sarahjamielewis,2,Mon Dec 29 02:17:46 2014 UTC,"However, you are in a better position if before that happens you have been constantly re-evaluating your crypto.   Agreed on this point.  Cheers."
crypto,2qnfpe,molo1134,1 point,Mon Dec 29 02:45:37 2014 UTC,What about encrypted Internet traffic that could be copied and archived while in transit? Is there no solution for sending critical data that has an unlimited lifespan over the Internet?
crypto,2qnfpe,DoWhile,7,Sun Dec 28 22:22:19 2014 UTC,"Shannon's theorem on cryptography states that in order to achieve unlimited security, you need the keylength to be as long as the messagelength.  These are known as information-theoretic schemes and various cryptographic systems fall under this model including one-time pads, secret sharing, and various forms of multi-party computation.  However, the inefficiency of transmitting the key in the first place is the problem.  With immortality, you can mitigate the problem simply by spending inordinate amounts of time pre-sharing a key with everyone you talk to.  Of course, generating the key correctly is a physical problem, and if the universe is, say, deterministic, then we're pretty fucked.  Perhaps you should delve deeper into the philosophy of your question.  If you had something that absolutely needed to be secure, why use the internet when you can spend the time to hand-deliver the documents?    The question you are asking already applies to entities that outlive a normal human life: company secrets, national secrets, etc.  Secrets kept by those entities are mostly given a reasonable shelf-life, and for the secrets that need to be kept indefinitely, you use different protocols to handle them."
crypto,2qnfpe,conradsymes,3,Mon Dec 29 00:47:09 2014 UTC,"it's very simple. there is 136×2256 protons in the universe.  512-bit encryption should be indefinately secure, and if properly designed, will never be vulnerable to known plaintext attacks.  differential cryptanalysis is a different animal, but it's also more difficult in that you have to force your adversary to encrypt data that you want, and you need to have access to it."
crypto,2qnfpe,mrschyte,4,Sun Dec 28 22:46:48 2014 UTC,"I don't get these arguments considering the number of whatever's in the universe. What you have done is that you've demonstrated that 2256 is a large number (and parallelisation would have limits), but I don't see how that would impose a limit on the maximum speed of computation. See http://en.wikipedia.org/wiki/Bremermann%27s_limit"
crypto,2qnfpe,darkmighty,4,Sun Dec 28 23:47:47 2014 UTC,"From that limit, mass of the universe and the time until heat death, I get about 10200 operations, which would mean 200*log2(10)=665 bit encryption would suffice, for ever, against brute force."
crypto,2qnfpe,FermiAnyon,3,Mon Dec 29 00:11:10 2014 UTC,"I'm more of a fan of energetic limits myself.  The fact is if you convert our solar system losslessly to energy and then flip a bit at the Landauer Limit on a computer operating at the ambient temperature of the universe, you'd still be short by about half a trillion times in terms of the energy you'd need just to flip a bit 2256 times.  's one of the reasons we don't try to brute force keys that long."
crypto,2qnfpe,autowikibot,1 point,Mon Dec 29 00:14:58 2014 UTC,"Landauer's principle:       Landauer's principle, first argued in 1961 [(https://en.wikipedia.org//en.wikipedia.org/wiki/Landauer%27s_principle#endnote_landauer) by Rolf Landauer of IBM, is a physical principle pertaining to the lower theoretical limit of energy consumption of computation. It holds that ""any logically irreversible manipulation of information, such as the erasure of a bit or the merging of two computation paths, must be accompanied by a corresponding entropy increase in non-information bearing degrees of freedom of the information processing apparatus or its environment"". (Bennett 2003) [(https://en.wikipedia.org//en.wikipedia.org/wiki/Landauer%27s_principle#endnote_bennett)     Interesting: Algorithmic cooling | Rolf Landauer | Reversible computing | Entropy in thermodynamics and information theory   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2qnfpe,darkmighty,1 point,Mon Dec 29 00:15:14 2014 UTC,"Not that it really matters, but it's harder to make an upper bound on energy alone, I think. Landauer's principle is more about entropy than energy imo: the energy you spend it thermalized, so it may be reusable, but of course entropy nonetheless increases by ln(2)."
crypto,2qnfpe,FermiAnyon,2,Mon Dec 29 02:18:02 2014 UTC,"Entropy is energy that you've used inefficiently and lost to the environment.  So unless you're using a reversible circuit (which may be practical one day (?)), this is the lower limit on the energy required to flip a bit.  You can't use less than this to flip a bit unless you're on a reversible circuit because you generate this much entropy when you destroy the state.  So on its face, it seems like a pretty robust theoretical minimum in terms of energy requirements.  Sure, I see what you mean.  Say you can harvest that thermal energy with some degree of efficiency.  Yeah.  I guess I take back a little what I just said : )  So you expend at least that much as heat, but then you can recollect some portion of that to reuse for calculation.  The efficiency on that is going to be really really low, by the way.  I have a lab mate working with the Seebeck Effect to convert waste heat into electricity and she gets crappy efficiency.  Interesting conversation to have though : )  I don't mind wildly speculating about where that technology will be eventually."
crypto,2qnfpe,autowikibot,1 point,Mon Dec 29 13:17:24 2014 UTC,"Bremermann's limit:       Bremermann's Limit, named after Hans-Joachim Bremermann, is the maximum computational speed of a self-contained system in the material universe. It is derived from Einstein's mass-energy equivalency and the Heisenberg uncertainty principle, and is c2/h ≈ 1.36 × 1050 bits per second per kilogram.   This value is important when designing cryptographic algorithms, as it can be used to determine the minimum size of encryption keys or hash values required to create an algorithm that could never be cracked by a brute-force search.     Interesting: Transcomputational problem | Bekenstein bound | Hans-Joachim Bremermann | Physics of computation   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2qnfpe,ldpreload,6,Sun Dec 28 23:48:37 2014 UTC,"There are three main things to worry about:   Classical computation being the wrong model, e.g. quantum computing becoming practical (or an even more bizarre physical phenomenon than quantum mechanics being discovered and becoming practical). Post-quantum crypto helps us there. Note that it's not known or particularly believed that BQP contains NP, so this mostly affects asymmetric (public-key) algorithms, not symmetric ones. Physical capabilities of brute force. Fortunately, key lengths and security levels are an exponential measure, so even if a 56 or 128-bit security level is theoretically brute-forceable, it's quite possible that 256 or 512 bits exceeds the physical limit on the amount of brute-forcing you can do given all the energy and matter in this universe. Schneier has an analysis using Boltzmann's constant where he calculates that the entire power output of our sun would take 32 years to merely count from 0 to 2192 in a thermodynamically-optimal register. ""These numbers ... strongly imply that brute-force attacks against 256-bit keys will be infeasible until computers are built from something other than matter and occupy something other than space."" Algorithmic breaks. There's no great answer here, given how young the field is and the lack of proof of P≠NP. Block ciphers, in particular, tend to be pretty ad-hoc, and there isn't a lot of work (that I've seen) on provably secure block ciphers. There's no proof that says that, e.g., AES is secure if DLP is hard. The best approach I've seen is something like Keybase's Triplesec, which uses three block ciphers of three different designs and authorship (plus scrypt and HMAC), as a way to hedge bets. Their use case is uploading private PGP keys to a cloud service, so the intent is to be secure on the order of years to decades, but probably not centuries."
crypto,2qnfpe,changetip,1 point,Mon Dec 29 00:11:00 2014 UTC,"Excellent answer, thanks!   $5 /u/changetip"
crypto,2qnfpe,JennyCherry18,1 point,Mon Dec 29 00:44:10 2014 UTC,"The Bitcoin tip for 15,624 bits ($5.01) has been collected by ldpreload.  ChangeTip info | ChangeTip video | /r/Bitcoin"
crypto,2qnfpe,JennyCherry18,0,Mon Dec 29 00:45:14 2014 UTC,Ignore the haters and keep up the good work.
crypto,2qnfpe,Godspiral,0,Wed Dec 31 01:16:33 2014 UTC,"Gentleman, indeed"
crypto,2qnfpe,a_truth,2,Wed Dec 31 16:20:36 2014 UTC,"No one has mentioned the cost involved.  You may be alive 50 years from now, but I have to decide that I want to know what you masturbate to today 50 years from now, but spend money in computing time today to know that 50 years later.  Just as relevant as the time budget to break crypto is the financial cost to do so.  Even if you use the computers for more useful things during the day, there is an electricity and possibly a wear and tare cost to running them full speed at night.  There may even be operator salaries involved."
crypto,2qnfpe,ldpreload,-1,Mon Dec 29 01:08:09 2014 UTC,"The property you are talking about is is related with ""forward secrecy"" and several protocols do not need it and do not support it.  As others explained, this has to do with the lifespan of the information you want to protect.  An example of such a protocol was SSL (at least some of its versions)."
crypto,2qnfpe,a_truth,3,Sun Dec 28 23:35:11 2014 UTC,"Maybe I'm not following the connection you're making, but that's not what forward secrecy is generally intended to do.  Forward secrecy means that there is no single key that, if compromised, can retroactively decrypt all past conversation. For instance, a protocol that gives one party a certificate and has the other party encrypt data to their public key is not forward-secret. A protocol that has two parties establish a shared secret (e.g. via Diffie-Hellman) and has one party sign a function of the shared secret is forward-secret, because if the signing key gets compromised, that doesn't let you attack past conversations.  But there still is an attackable key in that conversation, namely the DH shared secret. It's just different for every conversation. An attacker with the ability to attack the cipher (either by brute force, or by particularly bad sorts of cryptographic weakness) can just try to figure out the session key. The long-term key doesn't help the attacker, by design, but the session key definitely does.  The use case for forward secrecy is that a long-term key is inherently risky. You can have your hard drive stolen, you can be rooted or Heartbled, etc. The session key is only in memory, and all storage of the session key is destroyed at the end of the conversation. But the key itself, as a mathematical object, still exists and is still brute-forceable."
crypto,2qnfpe,ldpreload,1 point,Sun Dec 28 23:58:06 2014 UTC,"You are right about the purpose of forward secrecy.  In practice, it doesn't make much difference if you use a single key or multiple, given that you have endless time.   Doesn't this scenario defeat the assumption that the attacker uses only ppt algorithms?"
crypto,2qjpg7,Wiremask,4,Sat Dec 27 18:12:55 2014 UTC,"Cool challenge! It was a bit easy though because to read the password a perfect decryption is not necessary :) See ""decrypted"" image."
crypto,2qjpg7,mrschyte,2,Sat Dec 27 19:23:54 2014 UTC,"How did you do that? I am interested in learning crypto, but I have no idea where to get started..."
crypto,2qjpg7,zarex95,1 point,Sat Dec 27 21:33:17 2014 UTC,Try http://cryptopals.com/
crypto,2qjpg7,dist,1 point,Sun Dec 28 02:05:19 2014 UTC,That looks interesting. Thanks for the link!
crypto,2qjpg7,zarex95,1 point,Sun Dec 28 10:55:00 2014 UTC,"hi mrschyte! can you explain your approach to arrive at this solution?? I assumed this file is a bmp file and i tried to reconstruct the header... (a 32 bit color image with a particular size; in this case i assumed that the pixel array data begins at the offset 0x48, so its size is 0x01c8a0 = 25 * 13 * 281...) Thanks in advance"
crypto,2qjpg7,Gyver75,1 point,Thu Feb 19 09:00:10 2015 UTC,Hi! I didn't bother with the bmp header. I've assumed that it is aes (16 byte blocksize) and I've just assigned a unique greylevel value to each block. After that I've found the correct width by trial and error.
crypto,2qjpg7,mrschyte,1 point,Sat Feb 21 17:46:08 2015 UTC,Interesting. Working on it.
crypto,2qfhja,LessonStudio,4,Fri Dec 26 07:20:33 2014 UTC,I was trying to find some code that will split an image into a pair of encrypted images that need to be overlapped in order to reveal the original image; and after much searching couldn't find any that worked.   Most were many versions of python old or in Java that didn't work. So I cobbled together this tiny script that will take an image and break it up into two scrambled messes that when overlapped will reveal the original image.  I built this to make a Christmas puzzle for the kids and wife so things like the PRG is not exactly state of the art; it would be easy enough make rock solid.
crypto,2qfhja,DoWhile,5,Fri Dec 26 07:24:56 2014 UTC,"This is good work. I mean really good.  And here's why:  1) You point out pretty much every practical caveat in your comments.  The finicky alignment, the resolution blowup, the idea of using alignment marks,...  2) You don't try to oversell your work, you clearly state your goal (implementation of the basic viscrypt scheme), your weakness in PRG and that this was constructed mostly for personal, fun use.  3) The code is short and straightforward.  Minor comments:  You might as well cite Naor and Shamir's 1994 paper that introduced visual cryptography.  Your copyright license is a bit vague, but IANAL."
crypto,2qfhja,ivosaurus,1 point,Fri Dec 26 08:38:52 2014 UTC,"Thanks, when I write python I love trying to distill the essence of what I am doing. There are a few other bits where I could clean it up such as checking to make sure the file exists. And yes I sort of felt bad that I forgot Naor and Shamir; will fix."
crypto,2qfhja,Hormander,2,Fri Dec 26 20:50:57 2014 UTC,"Whenever you're doing anything to do with cryptography in python, you want to use this random instead:  from random import SystemRandom random = SystemRandom()   and proceed as usual."
crypto,2qfhja,SarahC,1 point,Sat Dec 27 15:05:17 2014 UTC,I just changed it to both your suggestion and an option to use the has-to-be-installed pycrypto.
crypto,2qfhja,SarahC,2,Sat Dec 27 16:06:11 2014 UTC,Good work! Very nice
crypto,2qfhja,SarahC,1 point,Fri Dec 26 09:24:34 2014 UTC,"Thanks, I tried to boil the problem down into the smallest bit of code humanly possible."
crypto,2qfhja,amtal-rule,2,Fri Dec 26 20:48:48 2014 UTC,"This is awesome!  Can you do this one next?  You end up with two ""apparently"" normal photos - with a hidden one inside!  http://wscg.zcu.cz/wscg2002/Papers_2002/A73.pdf"
crypto,2qfhja,kingkilr,2,Sat Dec 27 05:49:38 2014 UTC,I will attempt to wrap my pea brain around it.
crypto,2qfhja,ivosaurus,1 point,Sat Dec 27 07:40:28 2014 UTC,"Did you have time to look at it?  I've done a version here: http://www.reddit.com/r/learnprogramming/comments/2qwgot/source_code_to_play_with_visual_cryptography_in/  There's damn ghosting of the images though at very high resolutions - when it's zoomed out a little, no idea what's going on there."
crypto,2qejn3,ZaphodsOtherHead,23,Fri Dec 26 00:20:41 2014 UTC,"Usually closed source, very hard to audit vs dm-crypt."
crypto,2qejn3,walrus01,11,Fri Dec 26 00:28:16 2014 UTC,"Agreed,  You can't blame them for not allowing others to examine their intellectual property because after all they are for-profit.   But at the same time how can they expect us to trust them because of what many of us know about their betrayals.   But then again, we aren't their prime source for investment nor cash.  So why should they care?  There are underground hard-ware and soft-ware tools that emulate the cyberpunkish future, that dystopian ecotype that many of us know to well, but as of late it is used for drug trading or swamped away by buy outs to keep the creator's mouth shut.  /end-rant"
crypto,2qejn3,the_colon_poweler,1 point,Fri Dec 26 01:15:53 2014 UTC,"Ok. I guess I'll stick to dm-crypt. It's a shame, because FDE with no performance cost would be fantastic. Oh well. If I'm going to encrypt my data, I want to do it with something I have confidence will be secure.  Hopefully there will be some good audits and free alternatives soon so people can have trustworthy encryption without slowing down their systems."
crypto,2qejn3,gstuartj,7,Fri Dec 26 09:39:28 2014 UTC,On modern systems the performance hit for dm-crypt should be pretty negligible since most CPUs now include hardware AES-NI functions. It's been supported in the kernel since the 2.6 branch.
crypto,2qejn3,rubdos,2,Fri Dec 26 09:50:44 2014 UTC,"Oh, good! Thanks!"
crypto,2qejn3,ctz99,-1,Fri Dec 26 19:12:32 2014 UTC,"I don't know if this AES-NI is that great. I heard that the keygen Intel uses on their AES is NSA compromised. That would mean, as long as you don't use the AES keygen (or other random generators, e.g. for the IV) in Intel CPU's, everything's okay. I'd like a specialists opinion though.  EDIT: apparently, the AES instructions are okay, but the randomgenerator in Intel CPU's can be compromised, because it's not easy to check on them."
crypto,2qejn3,maetthu,3,Fri Dec 26 19:17:46 2014 UTC,"You're very confused.   The AES instructions are separate from the hardware random source. You're confusing the AES-based DRBG that Intel use (to launder random material from the true random source), and AES-NI.  These are separate things. Nobody seriously believes that Intel chips are actually compromised. There is no evidence for that. The problem is: nobody can verify for every chip that this continues to be true. Your CPU being compromised is not a sane attack model.  If you disagree, trying to change the software you run on your compromised CPU is not an appropriate response."
crypto,2qejn3,gstuartj,2,Sat Dec 27 21:06:54 2014 UTC,"Key generation isn't part of the AES-NI instruction set. The AESKEYGENASSIST instruction is used to derive a round key from a master key, but there's nothing random about that."
crypto,2qejn3,gstuartj,1 point,Sun Dec 28 17:17:23 2014 UTC,"You're right about key generation, it's always best to do that in software. Linux uses is a combo of software & hardware RNG by default, but keygen procedures could vary by app. I am not certain, (correct me if I'm wrong) but I would think that dm-crypt would follow a software-only/mixed policy."
crypto,2qejn3,JoseJimeniz,1 point,Fri Dec 26 19:34:10 2014 UTC,What does that mean?  You mean the rng is bad?
crypto,2qejn3,cunttard,2,Fri Dec 26 20:32:43 2014 UTC,"He means the hardware RNG is suspected by some to be bad. Linux uses a software RNG, then mixes input from the hardware RNG (if available) to increase entropy. The end result should be okay, unless an app is doing things in a nonstandard way."
crypto,2qejn3,cunttard,1 point,Fri Dec 26 20:42:52 2014 UTC,"It's not as though dm-crypt has been audited.  Me (a software developer of 16 years, who has written security code) being able to peruse the source code doesn't make it safer."
crypto,2qejn3,filteredpi,2,Fri Dec 26 12:45:15 2014 UTC,"What about attacks on recovering the key from the (unlocked) drive after power loss?  Also is there anything in place to make dictionary attacks expensive, i.e. is there a strong secure method for (a) decrypting or (b) deriving the encryption key based on a password?"
crypto,2qejn3,cunttard,2,Fri Dec 26 03:29:48 2014 UTC,"The problem I've found is most FDE mechanisms don't have any specs to show for it. There is a paper showing that for some vendors that you can simply swap the SATA cable to get full access to a drive. I can see this being problematic for both fixed and mobile scenarios.  My bigger concern is that there are no specifications for most of the FDE. They simply state they use AES (but not specify mode) and don't discuss how the ATA password authentication works (do they use PBKDF, etc.). If you have any material would appreciate it."
crypto,2qejn3,marklarledu,3,Fri Dec 26 11:45:58 2014 UTC,"Software FDE is convenient, but depending on the implementation, a stray single 'bit' put into the data after submit, and just before encryption, can render some important data useless. As memory in most commercial systems is a shared RAM  across all processes protected only by software kernel, and some 'hardware' interfaces it leaves it open to attack, making software based FDE a risk of making data irrecoverable just by encryption.  i.e. If I have a chain block of data being put into submission for encryption, then an attacker can manipulate just one bit at  the start and render that block chain's data completely irrecoverable.  As for Hardware FDE, the bonus is that this doesn't occur. An attacker doesn't have access to the process as it is isolated. The encryption routine, usually including a dedicated AES, also is much, much faster since the chip utilizes encryption along with its block layout. The drawback is that the encryption routine, even if known, is still a blackbox. The implementation is unknown.   edit: Woops, got mixed up a bit thinking of different memory architectures and dedicated data transmission buses. An attacker can still mess up data on the FDE on a shared memory bus by manipulating just one bit just before submission. This can be done through other hardware, software and exploiting timing inconsistencies (i.e. bugs) in other software/drivers on the system. For example, an attack can exploit timing on the data bus line through a faulty device. An example of a remote attack would be an attacker exploits a faulty or exploited wifi or ethernet device to begin randomly thrashing the data bus during transmission. Considering today's state of affairs in the US, this can be a very likely scenario especially for FDEs implemented on cell phones.  Also data recovery on FDE can be more difficult, depending on the implementation, and much more costly. Due to the black box implementation, there's still no guarantee of the encryption routine used on the data. On OSS software, there is guarantee of how the data was encrypted, making it still recoverable in some parts.  Other issues off the top of my head is flushing. On software based encryption systems, flushing to disk is different than hardware FDE. This may or may not be a problem, but it does create a 'lag' between updates to disk creating a new attack vector. For hardware FDE, there is much less lag."
crypto,2qejn3,cunttard,1 point,Fri Dec 26 21:25:33 2014 UTC,Most disk encryption techniques do not account for integrity or authentication of data and leave it to a higher layer such as a filesystem. It is no better than a drive without encryption.
crypto,2qejn3,cunttard,2,Fri Dec 26 23:17:25 2014 UTC,"It is no better than a drive without encryption.   While I certainly understand the importance of integrity and authentication, I don't agree with this statement. I think confidentiality without integrity or authentication is better than having none of the three."
crypto,2qejn3,conradsymes,1 point,Fri Dec 26 04:06:45 2014 UTC,What I was trying to say is:  Authentication/integrity is no better for drives with encryption than drives without encryption.  It appears that was a concern for the parent poster and I was trying to explain the current state of authentication/integrity is almost non-existent for disk based encryption mechanisms in the same way as it is non-existent for disk without encryption.
crypto,2qejn3,Godspiral,3,Fri Dec 26 11:49:53 2014 UTC,"Most SSDs today already do half the job by encrypting everything using AES. What mode? I don't know. How? I don't know. We need to be able to audit the implementation but that is usually abstracted or not described. But let us assume the encryption is there. The other half of the problem is (1) authenticating to the drive and (2) protection of the key esp. after power loss. Even though SSDs have been self-encryption for years (to achieve secure wipe), not much has surfaced for years except the new OPAL TCG.  From when I last looked, it is a bloody mess."
crypto,2qeql9,kal00ma,1 point,Fri Dec 26 01:43:29 2014 UTC,higher level overview of side channel attacks: http://www.cs.ucsb.edu/~koc/cren/docs/w05/maa.pdf
crypto,2qdhuy,flitterio,14,Thu Dec 25 17:17:52 2014 UTC,"It's impossible to compute the entropy of a binary string using just the string itself, because the entropy is a property of the process used to sample the string, and not the string itself. Even given a large number of samples from an unknown distribution, there's no general way of estimating the entropy of that distribution.   For example, suppose I give you several gigabytes worth of  ciphertext obtained by using CBC-AES-128; unless you break AES, there's no computationally feasible way to distinguish this from random data, even if you know the plaintext. However, the ciphertext contains only 128 bits of entropy, whereas the same amount of uniformly random would contain several gigabytes of entropy.  The bottom line is that you'd need to estimate the entropy of your inputs using a physical model of the process used to generate them.  Also, minimum entropy is usually a more useful measure than Shannon entropy in the context of cryptography. If the topic of extracting (close to) uniform random bits from imperfect sources is something that interests you, you should read up on the leftover hash lemma and randomness extraction. Just be warned that this rabbit hole goes deep and is full of math.  That being said, hashing high-entropy data is usually enough (but your intuition that you won't magically get more entropy than you started with is dead on). I would be concerned with only using public sources of entropy however...  edit: the link you posted shows how to compute the Shannon entropy of a bytestream, but it assumes that bytestream completely describes the  distribution, and doesn't reveal higher-order statistics, such as correlations between consecutive bytes. Do NOT rely on that or related techniques for any  cryptographic purposes!"
crypto,2qdhuy,shiny_thing,1 point,Thu Dec 25 18:45:56 2014 UTC,"A good estimation is simply compressing a large chunk of data. If you use LZW, as the chunk size goes to infinity (and the allowed memory goes to infinity), the compressed size C divided by the raw size R will converge to the exact entropy of the source (in bits per bit), since LZW is an universal compression scheme.  This works for any source, with long range correlations or not (it probably will just take larger blocks for long range correlations). I confess don't know how quickly this converges though, which would be nice for secure applications. I remember reading a lower bound somewhere, you could try Peter Shor's notes."
crypto,2qdhuy,darkmighty,1 point,Mon Dec 29 00:47:12 2014 UTC,"Section 1. Theoretical efficiency of article  LZ77 and LZ78:       In the second of the two papers that introduced these algorithms they are analyzed as encoders defined by finite-state machines. A measure analogous to information entropy is developed for individual sequences (as opposed to probabilistic ensembles). This measure gives a bound on the compression ratio that can be achieved. It is then shown that there exist finite lossless encoders for every sequence that achieve this bound as the length of the sequence grows to infinity. In this sense an algorithm based on this scheme produces asymptotically optimal encodings. This result can be proved more directly, as for example in notes by Peter Shor.      Interesting: Abraham Lempel | Data deduplication | Dictionary coder   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2qdhuy,autowikibot,5,Mon Dec 29 00:47:36 2014 UTC,For cryptographic applications this is a very bad idea because everybody has access to the same “chaotic data” you want to download. It's probably fine for Monte-Carlo simulations but not for choosing encryption keys and such. The important part of randomness for cryptographic applications is that it's unpredictable.
crypto,2qdhuy,sellibitze,6,Thu Dec 25 19:31:50 2014 UTC,"Short answer: Entropy is assumed, not computed.  The only time you can compute the entropy is if you know the underlying distribution. Not entirely accurate  Long answer: There are standard statistical tests such as diehard/NIST-battery one can do to measure the ""quality"" of the randomness.  These only give an indication that you aren't doing something completely idiotic.  As shiny_thing has mentioned, a strong pseudorandom generator will always pass these tests and yet only have tiny amounts of entropy.  In particular, the information theoretic version of the second law of thermodynamics (H(f(X))<H(X)) would suggest that the entropy would even drop!  Finally, there are several measures of entropy: Shannon, min, Renyi, ..., as well as stream complexity/compressibility: Kolmogorov, ...  You should understand the differences between them, as well as master theorems that let you ""distill"" good randomness from noisy streams with reasonable entropy, e.g. Leftover Hash Lemma, Extractors, and NIST's thoughts on randomness generation."
crypto,2qdhuy,DoWhile,2,Thu Dec 25 20:01:04 2014 UTC,"Don't do this, unless it's just for the hell of it. You are always going to get better randomness out of /dev/random than from online sources (which everyone else has access to). If you need real random numbers for real cryptography, this is a terrible idea."
crypto,2qdhuy,fletom,1 point,Thu Dec 25 22:17:01 2014 UTC,"Not sure if this is what you're looking for, but the radare2 reverse engineering tool has a feature where you can visualize the entropy to suggest compressed or encrypted data.  Here's its source file:  https://github.com/radare/radare2/blob/f6f48553cdf5ed85a826a1d51763c0c2aa607309/libr/hash/entropy.c"
crypto,2qdhuy,pointfree,1 point,Thu Dec 25 18:07:47 2014 UTC,"One of the methods we gather randomness is through measuring processes that appear completely random. One example are RNGs that use quantum tunneling that is result of unpredictable processes across some interaction of some element, such as  reverse diode and or/ biased transistor. In these effects, bringing a controlled/known process(es) (i.e. known distribution) where voltage against the element is controlled at near maximum. Very tiny, unmeasurable variations in the voltage, and the construct of element creates chaotic process that is result of many numerous tiny unpredictable processes that results in the occurence of a random event, in this case a voltage that is then measured. The unpredictability of the tiny processes results in the unpredictability of the macro chaotic process resulting in the unpredictable occurence of a voltage spike. One example of entropy in this case can be measured as, ""How many of the tiny processes are necessary to correctly predict the macro process resulting in the occurence of the voltage spike?""   Another process is to measure the brownian motion of a tiny speckle on some liquid surface through a measurement device. The very tiny processes numbering in unknowns across all interacting atomic elements makes this tiny speckle move in unpredictable way given our knowledge and tools. One example is to measure if speckle move left or right meaning 1 or 0.  Another example to collect entropy is like so. Say I have a thermometer outside of my window. The 'distribution' is the expected temperature and its expected known, measurable and predictable variation across some time t. Lets say we identify a time 'qt' such that the changes in temperature occuring within that time are unpredictable no matter how many known processes we account for. Here we use a known distribution, i.e. the expected predictable and measurable temperature across some time 't', to identify 'entropy' in the time 'qt' as the unpredictable variation within time 'qt'."
crypto,2qctx5,hummir,8,Thu Dec 25 10:27:28 2014 UTC,"It's not the job of the login protocol to assert which real-world identity belongs to which online identity. This protocol only ensures that you are connecting to the online identity you think you are.  The real ""facebook"" exists as a legal entity. In another country I could very well make a corporation called ""facebook"". The point is that it's not a technical problem. The two problems are confounded because currently CAs perform both functions, but BTS login only tries to replace one of them.  Bitshares happens to also be venturing into online reputation / namespace stuff, but it's far off and not related to this protocol."
crypto,2qctx5,i3nikolai,6,Thu Dec 25 17:48:27 2014 UTC,There's still plenty of ways it still helps. It lets me update my login key while keeping the same identity. It lets me revoke keys and have certainty people will see the revocation. It lets me refer to a public key by a short name I can say in english instead of passing around a text file.
crypto,2qctx5,i3nikolai,3,Thu Dec 25 18:08:29 2014 UTC,I wonder if the same protocol can be applied to PGP.
crypto,2qctx5,TheScriptKiddie,2,Thu Dec 25 18:45:21 2014 UTC,Can you do a diffie-hillman style shared secret using PGP public keys? If so you could swap it out. The problem is that PGP keys are huge compared to ECDSA keys and would bloat the blockchain.
crypto,2qctx5,i3nikolai,2,Thu Dec 25 19:10:21 2014 UTC,"OpenID was barely implemented in such a way to ""take control of your identity."" Every prominent website (bar StackOverflow) which offers OpenID only does so as a provider and not a consumer. If nobody is really adopting OpenID, why would privacy preserving identity providers matter."
crypto,2qctx5,cunttard,1 point,Thu Dec 25 16:51:56 2014 UTC,"Not commenting on the soundness of the protocol, but do we really need another competing ""standard""?"
crypto,2qctx5,qnxb,2,Thu Dec 25 18:34:28 2014 UTC,"Image  Title: Standards  Title-text: Fortunately, the charging one has been solved now that we've all standardized on mini-USB. Or is it micro-USB? Shit.  Comic Explanation  Stats: This comic has been referenced 1092 times, representing 2.4239% of referenced xkcds.    xkcd.com | xkcd sub | Problems/Bugs? | Statistics | Stop Replying | Delete"
crypto,2qctx5,xkcd_transcriber,1 point,Thu Dec 25 13:40:14 2014 UTC,I think our best hope for replacing passwords is the FIDO Alliance's Universal Authentication Factor (UAF):  https://fidoalliance.org/specifications/download
crypto,2qbor9,ThingsIveSeenandDone,34,Thu Dec 25 00:20:11 2014 UTC,"Addressing the notion you can build a list of all known primes:  Try enumerating all 512 bit primes.  By (conjecture) prime number theorem states there are up to x/log(x) primes, so: 2512 /512. Therefore there are: 2512 /512 - 2511 /511 =~ 10151 512 bit primes.  Good luck building a list of said primes. And supposing you had such a list, now use it to attack an existing key by factoring.  Edit: just to be clear, 10151 is larger than one googol, but it can be reexpressed as 2501 which is in the realm of intractability. There are about 1050 atoms on earth. So yeah.  Edit2: PNT is not conjecture and has been proven; misconception on my behalf."
crypto,2qbor9,cunttard,15,Thu Dec 25 00:43:07 2014 UTC,"Even if you had a list of all 10151 or primes that could factor a given N, you now how to run complex math on all of those primes. It would probably be faster to multiply them together into groups of dozens or a hundred and and then perform 10149 GCDs of those products against the N.  That would take eons, however it could be paralleled. But I suspect a faster way to factor numbers will be discovered before this method cracked it's first semiprime."
crypto,2qbor9,skintigh,3,Thu Dec 25 01:24:38 2014 UTC,"What I would do is precompute a bunch of random products (containing each prime with probability .5). That way with only a few GCDs per modulus I could factor them with high probability. (Yes, there would be 10150 overhead for getting these products, but it would be amortized for multiple use)"
crypto,2qbor9,seattlyte,1 point,Thu Dec 25 03:00:44 2014 UTC,"OP didn't explicitly mention the storage requirements explicitly, but there are about 2502 primes that are 512 bits long.  Each take 64 bytes of storage, and so would take 2508 bytes to store.  You would need 2496 1TB hard drives, but if you split up the project among 1B people, it would only be 2487 HDs.  At 1cent per TB, ... exercise for the reader time."
crypto,2qbor9,Godspiral,1 point,Sun Dec 28 06:08:16 2014 UTC,"Right, this isn't very different from the $2502$ primes you are required to store before computing products. The question is hypothetical so we have to assume we have a means to store them."
crypto,2qbor9,seattlyte,1 point,Sun Dec 28 15:54:44 2014 UTC,"What I would do is precompute a bunch of random products (containing each prime with probability .5).    How about 2, each with half. Otherwise you could have trillions of products the same size and not get every prime.  But even then, I think that GCD computation would take an eternity. There's a trade off between size and speed, and I recall from a recent paper it being around a few dozen primes per blob."
crypto,2qbor9,skintigh,2,Thu Dec 25 03:38:03 2014 UTC,"With overwhelming probability you would include all primes. If you wanted to you could include the two you propose for good measure.  But if you only computed the two an RSA modulus could have both its prime factors in the same product 'side' and neither GCD could compute it (one would be 1 and the other n).  The GCD would be relatively fast. There are approximately n/log(n) primes in the range of 1 to n (asymptotically), each of approximately size log(n) giving a product with approximately n digits (21024 digits for example). Now the GCD itself will run in approximately linear in the number of digits of the smaller number (~1024 iterations) being overwhelmed by the first modular division of the product versus the RSA key, which would work out to be proportional to the size of the product in digits (analysis of the GCD traditionally adopts a uniform cost model where the costs of intermediate mathematical operators are approximately constant).  This would mean that it would in fact take approximate time linear in the number of digits of the product, which itself is exponential in the number of digits in the key you would want to factor. In conclusion I would agree that the amortization would save a ton of time and memory resources, but would not amortize away the exponential."
crypto,2qbor9,seattlyte,1 point,Thu Dec 25 04:46:05 2014 UTC,"But I suspect a faster way to factor numbers will be discovered before this method cracked it's first semiprime.   There are already several faster factoring methods, including the Elliptic Curve Method (best of finding relatively small factors) and the Number Field Sieve (best for semiprimes)."
crypto,2qbor9,bitwiseshiftleft,7,Fri Dec 26 05:42:06 2014 UTC,"FWIW, the best estimates I've seen have the cost of a machine that can factor the product of two 512 bit primes at a few hundred million dollars. (edit - can factor in a year)  I can factor the product of two 256 bit primes using GNFS in a day or so on EC2 for around $100 (numbers from experience).  The GNFS algorithm is much faster than searching an exhaustive list of known primes."
crypto,2qbor9,rya_nc,-1,Thu Dec 25 03:20:15 2014 UTC,Huh. Source? And how about 1024 bit primes? Apparently those can be factored now.
crypto,2qbor9,conradsymes,5,Thu Dec 25 06:50:00 2014 UTC,"how about 1024 bit primes? Apparently those can be factored now.   Yes, it's very easy.  The factorization of a 1024-bit prime number p is p.  Don't you mean a 1024-bit product of two 512-bit primes?  As /u/pushme2 says, that's estimated to be possible with technology and budgets that can be found on the planet.  It would still be a large and expensive project.  The danger is that it gets easier every year."
crypto,2qbor9,cypherpunks,1 point,Thu Dec 25 08:40:30 2014 UTC,Factoring 1024 bit >>product of<< primes is something that is generally suspected that entities like the NSA could crack if they needed to. Doing so would still be expensive for even the NSA.  edit: due to popular demand...
crypto,2qbor9,pushme2,8,Thu Dec 25 07:24:24 2014 UTC,"Factoring 1024 bit primes [...] would still be expensive for even the NSA.   No, it's very easy.  Show me a 1024-bit prime number and I'll tell you its factorization immediately. :-)"
crypto,2qbor9,cypherpunks,2,Thu Dec 25 08:37:57 2014 UTC,"The factors of a prime are always 1 and p (the prime).   You mean factor the products of two 512bit primes, which is a heck of a lot harder than factoring a 1024 prime (something a five year old could be taught to do in seconds)."
crypto,2qbor9,psonik,7,Thu Dec 25 18:06:57 2014 UTC,"10151 is larger than one googol, but it can be reexpressed as 2501 which is in the realm of intractability.   It's probably intractable.  If I remember correctly, there is not enough energy in the universe for a computer running at the ambient temperature of the universe at 100% efficiency (as efficient as thermodynamics will allow) to count up to anywhere near 2501."
crypto,2qbor9,cookiesui,9,Thu Dec 25 02:25:39 2014 UTC,"If you converted the mass of our galaxy to energy and then twiddled a bit at ambient interstellar temperatures dissipating kTln(2) per twiddle, you'd only just make it to 2256 .  That kind of math was one of the first things that really started making me skeptical of people who claimed to be using really really long encryption keys for symmetric algorithms back when I was just getting started with my crypto curiosity.  *kTln(2) is what I meant"
crypto,2qbor9,FermiAnyon,4,Thu Dec 25 04:25:17 2014 UTC,"When people are selling snake oil, they'll quote keyspaces that are unreasonably large like 1000s of bits or a megabit or something for symmetric algorithms.  That's really way beyond the pale.  I think they only do it so they can tell laypeople that ""Military grade encryption uses 256 bit encryption and we use 2560 bits rockandroll!"" or some shit like that hoping that you won't realize why common symmetric ciphers use relatively short-sounding keys (because of the infeasibility of searching the space.  You don't need a lot more than that until you start preparing against theoretical quantum computing type attacks and even then you're only talking about doubling the length (e.g. squaring the complexity))."
crypto,2qbor9,FermiAnyon,5,Thu Dec 25 06:58:56 2014 UTC,"128 bits is pretty good against brute force.  I think crypto guys just like the idea of having some padding in case of improvements in computing speed and cryptanalytical methods.  So yeah, 256 is good for symmetric ciphers."
crypto,2qbor9,FermiAnyon,4,Thu Dec 25 07:34:45 2014 UTC,"Actually the padding is because any attacks in the future will generally just weaken the key enough to effectively make it a shorter key, ie DES is 56bit, but can be attacked down to ~40 effective bits, which is well within our brute-forcing capability.  If AES (rjindael) is found to be weak to a given attack, chances are it will simply decrease the number of effective bits from 128 to something like 99 (there are attacks at 299.5 on weak related-key streams, and 245 for some special subkey modes, but the best brute-force attack is still around 2126.1 for 128 bit, while 256 has a brute-force strength of 254.4 bits currently).  These things get nibbled down, you want a good 256 simply as padding for the unknown (that which has been disseminated can never be withdrawn), and crypt/decrypt is still pretty cheap nowadays. While aes-256 is crazy strong for current technology, DES-56 was overkill for its time, while now I can break it in a few days. Larger keys for valuable data makes a lot of sense, if only because we'll have better attacks and better fpga systems in the future, but mostly we'll probably have better math that allow us to fold galois fields in ways that reduce the entropy of the cipher."
crypto,2qbor9,PubliusPontifex,2,Thu Dec 25 08:40:15 2014 UTC,"While aes-256 is crazy strong for current technology, DES-56 was overkill for its time, while now I can break it in a few days.   That's a false equivocation.  The 56 bit thing was because we just had slow computers.  There isn't enough energy available in our galaxy to flip a bit 2256 times let alone do that many test decryptions/statistical tests.  (Unless someone makes some crazy advances in reversible circuitry, then it'll just take the square of the square of the age of the universe... for a single attack)  Which is why we don't opt for brute force and I covered the future attacks with the term ""improvements in cryptanalytical methods""."
crypto,2qbor9,FermiAnyon,1 point,Thu Dec 25 09:16:03 2014 UTC,"but mostly we'll probably have better math that allow us to fold galois fields in ways that reduce the entropy of the cipher   This is an interesting thing to say.  My impression of symmetric ciphers is that an ideal one would basically use the key to select a particular set of random mappings between input and output blocks.  I realize we don't have any ideal ciphers, but that concept should maximize entropy, right?  Are you saying we're far enough away from that ideal with current algorithms that there's an exploitable difference in entropy between what we use and that ideal system?  How do modes of operation (e.g. CBC, XTS, etc) effect that difference in entropy?"
crypto,2qbor9,FermiAnyon,2,Thu Dec 25 11:21:59 2014 UTC,"Are you saying we're far enough away from that ideal with current algorithms that there's an exploitable difference in entropy between what we use and that ideal system? How do modes of operation (e.g. CBC, XTS, etc) effect that difference in entropy?   Good question:  Aes is generally felt to have a weaker key-schedule, such that the transition between mappings is not as ... deterministically nondeterministic as should be, in this the entropy is weakened as the multiple rounds do not add entropy in a linear fashion, the marginal entropy added is reduced for every round.  It is exploitable, just very very hard to (though many of the best attacks on aes-128 use this, and I think Schneier himself did a paper on it). CBC and XTS help obviously, but they all depend on the initial block transform, so if the first block/key is determined, the rest of the text is also cracked."
crypto,2qbor9,PubliusPontifex,2,Thu Dec 25 13:46:43 2014 UTC,"Prime number theorem:       In number theory, the prime number theorem (PNT) describes the asymptotic distribution of the prime numbers. The prime number theorem gives a general description of how the primes are distributed among the positive integers. It formalizes the intuitive idea that primes become less common as they become larger.  Informally speaking, the prime number theorem states that if a random integer is selected in the range of zero to some large integer N, the probability that the selected integer is prime is about 1 / ln(N), where ln(N) is the natural logarithm of N. Consequently, a random integer with at most 2n digits (for large enough n) is about half as likely to be prime as a random integer with at most n digits. For example, among the positive integers of at most 1000 digits, about one in 2300 is prime (ln 101000 ≈ 2302.6), whereas among positive integers of at most 2000 digits, about one in 4600 is prime (ln 102000 ≈ 4605.2). In other words, the average gap between consecutive prime numbers among the first N integers is roughly ln(N).     Image i     Interesting: Dirichlet's theorem on arithmetic progressions | Elementary proof | Beurling zeta function | Legendre's constant   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2qbor9,autowikibot,1 point,Thu Dec 25 13:56:59 2014 UTC,"Thank you, but to be absolutely clear for dumb me: you're saying that even with an exhaustive list of known primes, factorization would still be an non-trivial task?"
crypto,2qbor9,reaganveg,6,Thu Dec 25 20:26:51 2014 UTC,"The point is, with any given amount of memory on a computer, it's possible to generate primes so large, that the set of primes smaller than the generated prime would be vastly larger than the set that could be searched on the same computer.  The difference is (beyond) sufficiently vast to compensate for the difference in computing power between a single computer, and all computers that exist on the planet or that will exist within a human lifetime."
crypto,2qbor9,DoWhile,5,Thu Dec 25 00:43:18 2014 UTC,"I think your conception of what factoring involves might be a bit off, which is why your question is so tough to answer in a straightforward way.  It's like asking ""If I had all the numbers, would addition be any easier or harder?""  The answer is that the question is somewhat irrelevant, because after a certain point you stop adding 13+11 by putting your finger on 13 and counting up 11 spots -- you use a method of addition that adds by the ones place, then the tens place, and so on.  Factorization via sieveing was popular for maybe a thousand years, and that was then followed by a shocking sequence of discoveries in the past few centuries.  Take Fermat factoring  for example, which doesn't make use of primes, but rather, square numbers to tease out a factor.  Modern methods extend this even further.  Finally, the usefulness of primes in cryptography isn't just in factoring.  Primes give rise to algebraic structures which are useful, such as  groups with nice structure, fields and more.  These are due to the intricate importance of primes in abstract algebra and number theory, and leveraging those for security.  Factoring is just the easiest example one can give to a broad audience."
crypto,2qbor9,stouset,2,Thu Dec 25 02:36:00 2014 UTC,"The concept of an exhaustive list of known primes is already ludicrous on the face of it. It's not hard to generate a prime on the order of 24096, but even just enumerating every integer below that is orders of orders of orders of magnitude above what will ever be computed across the lifetime of the universe.  It's like asking for an exhaustive list of known even numbers.   Nobody will ever run a counter from 1 to 2256. And the difference in scale between that and 24096 dwarfs the scale between the size of an atom and the size of the observable universe."
crypto,2qbor9,FermiAnyon,2,Thu Dec 25 02:55:45 2014 UTC,"Let's put it this way, assume he's talking about a symmetric encryption algorithm like AES or something.  So we know the keyspace is 256 bits at most.  That essentially means you already have a list of keys and there are 2256 of them and all you have to do is try them all (brute force).  We're comfortable with that condition because the process is ""computationally infeasible"".  There are ~2500 primes in the range he described.  So no, having a list of them wouldn't help because there are just too many to try them all.  You have to use clever tricks in these cases.  Edit: This reminds me of a quick and dirty calculation I once did to try and illustrate the scale of the numbers we're talking about.  If we had a collection of sand and we were searching for a specific grain and each grain measured one cubic millimeter and stacked in a perfect lattice with its neighbors, then what volume of sand are we talking about?  A bucket?  An Earth-sized sphere of sand?  No.  We'd be talking about a sphere of sand so large that if the Earth were at the center, it would engulf not just our solar system, but the nearest star some four light years away... So 2256 is a large space by itself and in a space that's 2500-ish, you have approximately the square of that space."
crypto,2qbor9,TheSuperficial,1 point,Thu Dec 25 03:54:35 2014 UTC,"I don't mean to shit on your back-of-the-napkin calculation, but I think both of your dimensions are way off... I had an instructor give me a different analogy.  Without splitting hairs, let's agree that 2256 is in the ballpark of 1080 (1080 is actually 2266, so the keyspace is 1000x smaller than the number of atoms in the universe, which is negligible in the magnitudes we're discussing).  So really, finding one out of 2256 potential keys isn't finding a grain of sand in something 4-light years across, it's more like me picking a single atom in the entire 13.9 billion light-year universe, and telling you to find it."
crypto,2qbor9,FermiAnyon,1 point,Thu Dec 25 03:05:56 2014 UTC,"The atoms in the universe aren't packed as densely as my sand except in exotic places like stars and shit which are common, but far from each other in space.  Let me try to nail down my dimensions a little more precisely...  *  Okay, shittier calculation here... apparently 2**85 is how many millimeters you'd get for the radius of a sphere with that many grains in it.  Then I work out that's a radius of about a million light years.  So I might have been off by a few hors d'oeurves of magnitude...  So that grain is Hard To Find."
crypto,2qbor9,hive_worker,2,Thu Dec 25 04:30:39 2014 UTC,There is no such list. That's like asking for a list of all known numbers. You could give that list to anyone and it would be trivial to add a new number to it.
crypto,2qbor9,cypherpunks,2,Thu Dec 25 13:51:08 2014 UTC,"even with an exhaustive list of known primes, factorization would still be an non-trivial task?   First of all, there's no point limiting yourself to known primes.  I can find a previously unknown prime in a few milliseconds.  I just ran openssl genrsa 1024 to find two new, previously unknown primes.  Here they are:   0xF554873AF4DB23162426E30FD2B091DE267DF05FC8AC5F0E9B3D5EAD28C2BD967C435335F4BB97BEEFCA05807E1711ED90CAE56812057858928A45C5EC33FE47 0xD6F9C198AF3FA3BAF236D811041AC1F07A0E44D982B5BE1C0627137AA83A61D61E18DB1CEAB9A4A2EC4CCE64273365FE0503D015FE948DAD91CBAD0205CCF35F   It's easy to generate all the prime numbers in a given range, but once you get past 256-bit numbers, the list wouldn't fit into the known universe, much less our galaxy.  Not even if you would write each prime on a single proton.  Are you starting to grasp how ridiculously impractical a task you're proposing? I'd compare it to draining the ocean with a bucket, but that's a simple and straightforward task in comparison.  The Sun weighs 1.9891x1030 kg.  In atomic mass units (one hydrogen atom), that's 1.2x1057 .  Which is less than the number of 197-bit primes.  Finding a 197-bit factor is not too difficult given known algorithms.  But doing it by testing the primes in that range one at a time is like disassembling the Sun, one atom at a time."
crypto,2qbor9,rya_nc,1 point,Thu Dec 25 14:00:12 2014 UTC,"An exhaustive list of known primes wouldn't even help if you had it. The General Number Field Sieve algorithm is faster that searching a list of primes would be. It has been successfully used to factor a 232 digit number into two 116 digit numbers. It took about 1,000 CPU cores 2 years."
crypto,2qbor9,hyh123,1 point,Thu Dec 25 04:45:48 2014 UTC,Prime number theorem is not a conjecture. It's proved more than 100 years ago.
crypto,2qbor9,cunttard,1 point,Thu Dec 25 08:57:58 2014 UTC,I haven't looked at the number theory aspect myself. I was under the impression (misconception?) that the proof hinged on the Riemenn Zeta Hypothesis. I admit I haven't ventured into proof territory for Prime Number Theorem (or Riemenn Zeta).
crypto,2qbor9,rosulek,7,Thu Dec 25 05:27:18 2014 UTC,"It is my understanding that primes are useful because it takes longer to factor a number than it does to verify the factorization.   I would argue that that's not quite why primes are so useful. Rather, it's because prime numbers induce more convenient algebraic structures. Some examples:   Finite fields with N elements exist only when N is a prime or & prime power. Multiplicative inverses are super convenient. Cyclic groups are useful for Diffie-Hellman kinds of crypto. A cyclic group of order N decomposes with the factorization of N -- basically, a cyclic group contains a ""sub structure"" of order p if p is a divisor of N. And generally most crypto attacks on a cyclic group scale with the smallest divisor of N. So primes give you the most security bang for your buck. This is in particular why safe primes are nice: When p is prime, the set of quadratic residues mod p is a cyclic group with (p-1)/2 elements. When p is a safe prime, this number (p-1)/2 is also prime, so the quadratic residues mod p can be used for nice crypto stuff.   In particular, in all these examples there is no secrecy about the prime number. Everyone can agree on the same prime number -- security comes from other aspects of the system. The prime is there to simply provide the appropriate algebraic structure.  I think these kinds of things are more fundamental than the factorization aspect of RSA, where a secret prime is crucial to security."
crypto,2qbor9,Brianwilsonsbeard1,2,Thu Dec 25 10:31:34 2014 UTC,"The diffie-hellman scheme is the best way to describe why primes are important; the ""invertable"" numbers in a set, consisting of numbers smaller than a prime, is the entire set smaller than the prime.(i.e. if you have some large prime number p, there is some way to do modular arithmetic on each number in the set 1 -> p such that you can reverse whatever arithmetic you did).  This is important for public key crypto for a few reason's. Mainly that it allows you to pick primitives in a set of some prime number p without them being easy to break, short of trying to guess what number was selected from the set, and in a 512 bit set this is essentially impossible. OP you should definitely read into diffie-hellman and number theory for a better understanding of why primes are so important."
crypto,2qbor9,cypherpunks,8,Thu Dec 25 12:31:46 2014 UTC,"wouldn't it be somewhat trivial to start from the largest prime and work one's way down to find the prime factorization?   No, this is called ""trial division"" and one of the least efficient factorization algorithms.  We have much better techniques.  You're not grasping how many prime numbers there are.  Look at your list of 50,000,000 primes.  The last one is 982,451,653.  That's 0x3A8F05C5, a 30-bit number.  Or I can write it as 19.65 times 50,000,000.  One in twenty numbers is prime in this range.  The trillionth prime is 29,996,224,275,833.  That's 1B480A4AE579, a 49-bit number.  Your computer can do a trillion operations, but at 4 GHz, it'll take quite some time.  Now, 1024-bit RSA keys, the product of two 512-bit primes, are considered too weak for serious security these days.  But of 512-bit numbers, roughly one in ln(2512) = 512 ln(2) = 354.9 numbers is prime.  That's 37780034796966026728782647732550733631496032533991228689601125943786752176986069699757904216566172328596649572383182421949505569287306881594507257111258 prime numbers.  If you want to start your computer counting that high, go ahead, but don't call me when you're done; the Sun will have gone out by that time.   It is my understanding that primes are useful because it takes longer to factor a number than it does to verify the factorization.   Actually, no.  All public-key cryptography in practical use is based on one of two mathematical problems:  First is factorization, the one you're describing.  This is the RSA algorithm.  If you have a number n whose factors are all large primes (normally n = pq is the product of two primes of almost the same size), then you can compute y = xe mod n easily (where x=plaintext and y=ciphertext), and there is a corresponding decryption exponent such that x = yd mod n.  But to find d requires knowing the factors of n, and that's hard to do.  The second, which is actually used more these days, is the discrete logarithm problem.  This relies on the fact that y = gx mod p is easy to compute, but it's hard to find x = log_g y.  There is a prime involved here, but it's not secret.  Everyone knows what it is."
crypto,2qbor9,RixiM,3,Thu Dec 25 03:56:52 2014 UTC,"If you are interested in Cryptography, maybe something like this would be a good place for you to start? https://www.khanacademy.org/computing/computer-science/cryptography"
crypto,2qbor9,perciva,2,Thu Dec 25 07:33:19 2014 UTC,Thank you.
crypto,2qbor9,floodyberry,10,Thu Dec 25 08:26:56 2014 UTC,start from the largest prime   There's your problem.  There is no largest prime.
crypto,2qbor9,cunttard,5,Thu Dec 25 01:13:09 2014 UTC,I beg to differ
crypto,2qbor9,FermiAnyon,1 point,Thu Dec 25 02:17:58 2014 UTC,"Sorry I meant largest known prime, surely we can't make use of primes yet to be discovered."
crypto,2qbor9,cunttard,5,Thu Dec 25 00:57:46 2014 UTC,"Re stouset about a misconception for finding a new prime is to find the next one. This is normally not how we do it.  Typically we generate primes probabilistically using Miller-Rabin Primality Test. A very concise explanation is found on this page under note #1.  Most primes generated used in cryptography are known as probabilistically prime, as in they have a probability of being composite (i.e. not prime). Typically this probability is 1/280, which is insignificant to worry about -- I would imagine winning a pick the numbers type lottery three consecutive times is much much much more likely than your generated prime being composite.  We now know of a deterministic way of determining if a number is prime, but at high computational (and memory) cost. Miller-Rabin tends to be sufficient.  Edit: Initially the probability I had stated was 1/240 which is incorrectly based on Miller-Rabin being run 40 times. However a Miller-Rabin trial will succeed with probability 1/4. Therefore 40 rounds is probability 1/280."
crypto,2qbor9,FermiAnyon,2,Thu Dec 25 03:08:36 2014 UTC,1/240 is pretty significant.  You can run through that on your personal computer.
crypto,2qbor9,cunttard,3,Thu Dec 25 02:18:36 2014 UTC,"I'm not sure I follow, 1/240 is the probability of generating a prime that is actually composite."
crypto,2qbor9,autowikibot,2,Thu Dec 25 03:36:37 2014 UTC,"I understand what you said.  But that's just one in a trillion.  It's a small chance if you're doing it by hand, but there are lots of transactions going on in the world and it seems like you'd be getting several composites sneaking by each year at least and that seems like an unreasonable chance to take if you're a professional cryptographer and you can help it."
crypto,2qbor9,cypherpunks,3,Thu Dec 25 04:41:55 2014 UTC,"Looks like I had a misunderstanding of Miller-Rabin. I was under the impression the trial succeeds is 1/2, but it is actually 1/4. So the error margin is much worse, looking at 1/280 for a prime to actually be composite. I had confused it with Solovoy-Strassen algorithm where a trial succeeding is 1/2."
crypto,2qbor9,stouset,1 point,Thu Dec 25 05:04:50 2014 UTC,"Miller–Rabin primality test:       The Miller–Rabin primality test or Rabin–Miller primality test is a primality test: an algorithm which determines whether a given number is prime, similar to the Fermat primality test and the Solovay–Strassen primality test. Its original version, due to Gary L. Miller, is deterministic, but the determinism relies on the unproven generalized Riemann hypothesis;  Michael O. Rabin modified it to obtain an unconditional probabilistic algorithm.      Interesting: Gary Miller (computer scientist) | Industrial-grade prime | Miller test | Lucas pseudoprime   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2qbor9,phyzome,2,Thu Dec 25 07:37:54 2014 UTC,Sure we can.  Here are 100 256-bit primes I just discovered
crypto,2qbor9,hdet,3,Thu Dec 25 07:58:39 2014 UTC,You seem to be suffering from the misconception that the only way to find a new prime number is to take the current largest-known prime and find the next.  This is not even remotely the case.
crypto,2qbor9,reallyserious,1 point,Thu Dec 25 03:36:49 2014 UTC,"The way I've seen RSA described, implementations generally pick and use large numbers that they are pretty sure are prime."
crypto,2qbor9,TheSuperficial,6,Thu Dec 25 09:13:40 2014 UTC,How are 20 character passwords useful if there is a list of all 20 character passwords?
crypto,2qbor9,reallyserious,4,Thu Dec 25 03:13:11 2014 UTC,"Let's expand on this.   Let's construct a alphabet consisting of all characters A-Z, a-z, 0-9 and 10 special characters. That's 72 different characters to choose from.   In order to store one 20 character password we need 7 * 20 = 140 bits = 17.5 bytes. Let's align that to the nearest whole byte to make it easier to implement. So 18 bytes for one combination.   The number of 20 character password combinations is 7220 = 1.4 * 1037 .   In order to store all of those we need 7220 * 18 = 2.52 * 1038 bytes = 2.29 * 1026 TiB.  The largest hard drives you can buy today are 8TB. So we need (7220 * 18) / (8*10004) = 3.15 * 1025 of those hard drives. There aren't that many hard drives in existance."
crypto,2qbor9,Ar-Curunir,2,Thu Dec 25 02:48:24 2014 UTC,"In order to store one 20 character password we need 27 * 20 = 2560 bits = 320 bytes. (each character can be represented in 27 = 128 bits so we don't need a whole byte for each character)   Wait, what?  We need 7 bits per character, not 128 bits.  So that's 140 bits for 20 characters.  (Just think about it for a sec - you yourself said that you need less than a whole byte for each character, and yet now you're saying you need 320 bytes to store 20 characters - doesn't pass the common sense test.)"
crypto,2qbor9,Uncaffeinated,1 point,Thu Dec 25 05:07:04 2014 UTC,"Haha, you're right. I've fixed it now."
crypto,2q78ba,quisp65,3,Tue Dec 23 19:07:37 2014 UTC,Why not try it over I2P right away? The problem is bandwidth.
crypto,2q78ba,Natanael_L,2,Tue Dec 23 19:30:14 2014 UTC,Limited by the bandwidth of the slowest node right?
crypto,2q78ba,RipVanWinkl,5,Tue Dec 23 22:43:52 2014 UTC,"Per connection, yes. I2P can handle many parallel connections, but of course you're still getting limited by bandwidth of other nodes."
crypto,2q78ba,Natanael_L,1 point,Tue Dec 23 23:39:03 2014 UTC,Pretty far.
crypto,2q78ba,remyroy,1 point,Wed Dec 24 00:42:47 2014 UTC,See for yourself!
crypto,2q78ba,ZaphodsOtherHead,1 point,Wed Dec 24 06:31:55 2014 UTC,Johan Pouwelse's group at TU Delft has been building Tribler for some years now towards this goal.
crypto,2q78ba,somerandomguy101,6,Tue Dec 23 19:15:29 2014 UTC,https://lists.torproject.org/pipermail/tor-dev/2014-December/007999.html
crypto,2q3jg5,superstond,14,Mon Dec 22 19:48:19 2014 UTC,"What? The US Govt. funds a very significant proportion of crypto research. Certainly there are many uninformed policy makers that are trying to undermine crypto, and there are particular departments that have a vested interest in limiting its scope, but don't forget who pays the bills."
crypto,2q3jg5,aleph_nul,-4,Tue Dec 23 04:53:39 2014 UTC,"Haha, yeah right. Don't forget who pays the bills. Joke of the year, 2014."
crypto,2q3jg5,itspartofthetrade,7,Tue Dec 23 11:00:24 2014 UTC,I challenge you to find any reputable academic conference proceedings on cryptography that contains no papers sponsored by the US Govt.
crypto,2q3jg5,aleph_nul,3,Tue Dec 23 16:30:28 2014 UTC,"Yes, it's the US Government paying the bills...and even if they aren't, they're certainly not stopping the movement toward better encryption. In fact, by not denying the claims of Edward Snowden, they're actually encouraging, not discouraging, better encryption."
crypto,2q3jg5,m1ss1ontomars2k4,-1,Tue Dec 23 17:35:54 2014 UTC,The question still remains with pretty much every encryption system is if somehow they have weaselled a back door in. For instance you could have an encryption system app on your iphone that is somehow mathematically perfect. But if the government has forced Apple to install a backdoor key/screen logger then it doesn't matter.
crypto,2q3jg5,EmperorOfCanada,13,Tue Dec 23 19:47:24 2014 UTC,I don't think the government could stop the progress of encryption even if we helped them.
crypto,2q3jg5,BBQCopter,1 point,Tue Dec 23 00:19:52 2014 UTC,"This smells like a hidden advertisement for whatsApp, an attempt to regain the world user audience that they are losing at an exponential rate. Lavabit, etc... based in US already show there can be no service providers where encrypted messages can not be decrypted by some accessible endpoint. For now, every solution US service providers develop for encryption are still authoritarian, giving a simple endpoint access for those with the means.  Edit: There is joke about US encryption and cryptography and their Googles, Apples, Facebooks, Microsofts, etc...  'Perfect' and secure end-to-end encryption between end points without authoritarian access will be available when Quantum Computing solves Factoring and Discrete Logarithm. Then US say, 'it's ok US companies, you can give user 'perfect' encryption that we ""cannot"" read'."
crypto,2q3jg5,filteredpi,-1,Wed Dec 24 08:54:59 2014 UTC,"The key to power is to control information. It really doesn't matter about guns, money, connections, or your position on the org chart. If you control the flow of information then you have power and can then through that information control to heavily influence those with guns, money, and connections.  Thus people who crave power often end up in the top levels of government and politics, but those who crave the most control often end up being in charge of the flow of information.  So governments have the shit scared out of them when things like Wikileaks and Snowden take away the control of their own information and encryption scares the shit out of them when they lose control of our information.   In a government's worst case nightmare all kinds of their monstrous secrets would come out just as a bunch of not-part-of-an-old-boys-club populist politicians suddenly became contenders and the vested interests couldn't penetrate their communications to discover their weaknesses.  As for child molesters and kidnappers does anyone here think that the NSA or most other branches of government give the slightest shit about them? Only a tiny department at the FBI would give the slightest of craps."
crypto,2q0377,funky_vodka,22,Sun Dec 21 20:58:42 2014 UTC,"The symmetric encryption is ECB-AES128   Goddammit, people..."
crypto,2q0377,rosulek,11,Mon Dec 22 08:04:01 2014 UTC,"x = 1 // Yes, a hard coded seed.   sigh"
crypto,2q0377,gsuberland,9,Mon Dec 22 15:26:18 2014 UTC,"Clean out all the dead code, after printing out copies to use to scare small children   Clean out all the dead code, after printing out copies to use to scare small children brave adults"
crypto,2pyo5t,conradsymes,8,Sun Dec 21 09:34:28 2014 UTC,"It is much harder to detect a correlated differential between an input block and an output block if ANY nonce is used on the input block sequence, but that does not rule out that a statistically-detectable differential exists even though a nonce is used, particularly a countered nonce."
crypto,2pyo5t,every1wins,4,Sun Dec 21 09:57:18 2014 UTC,"If you can somehow attack the system using a chosen-ciphertext attack (which isn't particularly implausible), you get to pick your own IV, which is the starting point of the counter. This IV under your control becomes input to the block cipher (remember that CTR mode runs the cipher in encryption mode regardless of whether the message is being encrypted or decrypted), and then XOR'd with the ciphertext blocks in the message. But you can just XOR again to cancel that out, and see the raw output of the block cipher.  That lets you conduct a chosen-plaintext attack against the underlying block cipher itself, which is what you need for differential cryptanalysis."
crypto,2pyo5t,ldpreload,2,Sun Dec 21 20:04:55 2014 UTC,"Incorrect.  In Counter mode, part of the input block is a counter that changes in a completely predictable way from block to block (allowing trivial collection of pairs that differ by some fixed value for large enough messages), while the rest of the input block is the IV, which doesn't change at all for any of the blocks in the same message.  Thus, Counter Mode can be attacked by differential cryptanalysis (even without giving the attacker the capability to chose the IV), so long as the input difference is restricted to just the counter section of the input block."
crypto,2py226,rohare,1 point,Sun Dec 21 04:05:28 2014 UTC,I've had a fair amount of luck in getting help with NIST test vectors and such by directly contacting RFC authors that are closely aligned with NIST. Dr. Dworkin has been very responsive with me in the past.
crypto,2py226,marklarledu,1 point,Tue Dec 23 17:38:44 2014 UTC,"Is there any documentation on this subject that clearly defines the purpose and use of these parameters or at least gives best practices?   I'm surprised I didn't see this post sooner.  My apologies.  To answer your question, refer to the appendices of NIST SP 800-22a.  Note that the sample sizes are sometimes important with the tests specified in the NIST test suite.  Also note that the desired sample for each test may differ in the NIST test suite.    I have modified NIST's reference code in the past to automate their test suites.  As marklarledu said, Dr. Dworkin is a good point of contact at NIST!  He is fairly responsive."
crypto,2py226,throwaway0xFF00,1 point,Sat Dec 27 01:43:56 2014 UTC,"Yep, I spent quite a bit of time reading over that document. It does give the parameters used on the test outputs (1,000,000 bits each) but doesn't concisely define any of the parameters or explain under what circumstances they should be changed. My samples are 20MB each; if I cut them down to exactly 1 million bits, should I use the same parameters given in the examples?  Honestly, I'm really surprised this isn't well disseminated data considering how many blogs/articles/forum posts claim that the NIST test suite outperforms the diehard test suite. It may be true, but it looks like an awful lot of people are just repeating something they ""read on the internet"". Oh well.  I did email Dr. Dworkin, but I think the holidays may have delayed a response. Hopefully I get something in the near future, otherwise I'll just roll with Ent and Diehard. I'm better off not poisoning my results with tests that I don't fully understand and may not be using correctly. Thanks for the suggestions!"
crypto,2py226,throwaway0xFF00,1 point,Sat Dec 27 02:42:39 2014 UTC,"should I use the same parameters given in the examples?   If you don't know what you're doing in a given test, use the recommended sample size in each test. That will prevent you from going wrong.  Some tests don't care about sample size while some are a litttle sensitive.  By following recommendations, you will want to  break up your 20 mb into appropriate chunks."
crypto,2ps0hf,jesperbb,2,Fri Dec 19 10:43:04 2014 UTC,Would you be able to post the abstract or paper when you're done?
crypto,2ps0hf,Logiteck77,4,Fri Dec 19 19:51:08 2014 UTC,"The link to the paper was included in the original post, but here it is again :)"
crypto,2ps0hf,Logiteck77,1 point,Fri Dec 19 21:32:49 2014 UTC,"Thanks, didn't see it."
crypto,2ps0hf,CodexArcanum,1 point,Fri Dec 19 21:39:49 2014 UTC,Good luck!
crypto,2ps0hf,gruasty,1 point,Fri Dec 19 11:40:30 2014 UTC,Sounds nifty! Knock 'em dead!
crypto,2ps0hf,riotinferno,1 point,Fri Dec 19 15:45:43 2014 UTC,Break a leg!!!!
crypto,2ps0hf,riotinferno,1 point,Fri Dec 19 19:54:49 2014 UTC,"So, how'd it go?"
crypto,2pu3h2,c0cky,4,Fri Dec 19 23:26:08 2014 UTC,"The property you describe as ""tamper-proofing"" is called ""backtracking resistant"" when applied to random number generators.  See, for example, NIST SP 800-90.  In fact, you could easily use a deterministic random bit generator (DRBG) that has backtracking resistance to build your system.  This would have the advantage that the generation of keys is using a tool designed for the job and evaluated by a large number of cryptographers.  Assume g0 is the state of the generator at time zero, DRBG is the function that consumes a generator state and returns a specified number of bits along with a new state.  The pseudo code would be basically:  let g = g0 log(msg, g) =     let (key, newGen) = DRBG(g,128)     g := newGen     output(msg, HMAC(key,msg))   Much like your system, deleted messages will be apparent because the ith message would fail to authenticate with the ith stepping of the DRBG (or ith hash of the seed, for your system).  This property could be more directly achieved by keeping and signing running hash of all prior messages.  Now is this a curiosity or do you have a need for such a system?"
crypto,2pu3h2,tom-md,1 point,Sat Dec 20 00:34:20 2014 UTC,"This is very interesting, thank you.  This is a curiosity for now, although it was prompted by my finding the audit logging built into my employer's software to be rather basic.  Could you elaborate on how keeping and signing a running hash of all prior messages would achieve the same outcome?"
crypto,2pu3h2,tom-md,3,Sat Dec 20 01:15:20 2014 UTC,"It's quite simple.  You currently have a scheme to generate keys, k_i and an HMAC function.  There's no additional code, just direct use of the primitive hash operations of initial, update, and finalize.  Now when logging we perform:  context = initialContext log(msg) =     k_i = getNextKey     context = update(context, msg)     output(hmac(ki, finalize(context)), msg)"
crypto,2pu3h2,cunttard,4,Sat Dec 20 15:35:07 2014 UTC,"At a cursory glance it appears the security of the system rests on the one-wayness properties of the cryptographic hash function. This seems plausible.  You could formally define the system showing that a sequence of messages before the system was compromised cannot lead to earlier (existing messages) being tampered, or earlier messages being forged. Then you would show that being able to attack the system means breaking cryptographic properties of the hash function."
crypto,2pu3h2,ldpreload,3,Sat Dec 20 00:14:45 2014 UTC,"A few cryptographers made a solution for this that's part of systemd-journald: ""Practical Secure Logging: Seekable Sequential Key Generators"". It looks basically similar to your idea, but it seems to also allow random access from the auditor without doing n hashes to get to that point."
crypto,2pu3h2,niloc132,2,Sat Dec 20 20:30:09 2014 UTC,"Not a crypto expert, just trying to make sure I understand what you mean 'tamper-proof' to mean.  Is 'tampered' defined only to mean 'can't edit values from before attacker took over'? Are you assuming that there is nothing of value after the attacker has gained access to k_i, or that the auditor will know that the attacker has begun falsifying data?  If we again assume that an attacker can somehow gain access to k_i, what stops them from just watching nearby and only replacing the log entries that they don't like?  Seems like a DRM-ish situation: ""Well, you have the data, and the key to $VERB the data, but at least you can't $VERB the data in an unapproved way."""
crypto,2pu3h2,Natanael_L,2,Fri Dec 19 23:41:10 2014 UTC,"Is 'tampered' defined only to mean 'can't edit values from before attacker took over'?   As far as I'm concerned, yes.   Are you assuming that there is nothing of value after the attacker has gained access to k_i, or that the auditor will know that the attacker has begun falsifying data?   I'm not really concerned about false positives, only false negatives.   If we again assume that an attacker can somehow gain access to k_i, what stops them from just watching nearby and only replacing the log entries that they don't like?   Nothing; this system wouldn't prevent against premeditated attacks.  Nor would it prevent against the attacker just deleting the entire log file, etc."
crypto,2pu3h2,marklarledu,1 point,Sat Dec 20 00:07:14 2014 UTC,"The problem here is that an attacker can leave out entries by rebuilding a fake log. You could use the hash chained mechanism previously mentioned with HMAC, and add key ratcheting (derive new keys from the previous one with a hash function, delete the old key), but then you only prevent undetectable deletion of previous entries when the attacker gets access, not anything afterwards. So you can't make him correctly and honestly add entries per protocol if he don't want to."
crypto,2pu3h2,Natanael_L,2,Sat Dec 20 21:10:46 2014 UTC,"You bring up a good point for forgery. The idea seems better suited for auditing opportunistic attacks. Using a key-based PRNG, where the initial state is based on some key, iv, etc...  If an attacker were to evade detection (i.e. sophisticated attacks) they would likely re-forge from the deleted records onwards, which means the security would rely on guarding the initial state and round-key derivation."
crypto,2pu3h2,OnkelDanny,2,Mon Dec 22 10:23:45 2014 UTC,What are the constraints on the system you are trying to build? Are you trying to do this in software only or will you have access to specialized hardware such as an HSM or a remote trusted timestamping server?
crypto,2pne06,sapiophile,8,Thu Dec 18 03:56:15 2014 UTC,People are working on a C++ version of i2p.  Still very early version: https://github.com/PrivacySolutions/i2pd
crypto,2pne06,reststrahlenbande,2,Thu Dec 18 10:58:27 2014 UTC,Why would you do that?
crypto,2pne06,admax88,6,Thu Dec 18 16:03:50 2014 UTC,"We (Monero, a cryptocurrency that isn't based on Bitcoin and uses ring signatures and a stealth-address-like protocol to ensure transactions are both cryptographically untraceable and unlinkable) work closely with orignal and the i2pd team, as we will be baking i2pd into Monero in the near future. One of the pain-points for us previously is that the Java dependency is simply not worth exposing our users to the additional risks (and requiring them to update their j2re all the time for the sake thereof).  We're at least somewhat responsible for at least trying to protect people's money, and we can't afford to look after every layer. Thus, our partnership with i2pd affords us the chance to add i2p encryption / obfuscation to even the communications layer (removing the possibility of an attacker knowing your outbound transactions merely by sniffing your data)...and all without the added complexity of an end-user Java requirement:)"
crypto,2pne06,fluffyponyza,0,Thu Dec 18 19:08:53 2014 UTC,"Well I applaud your efforts to reduce the attack surface of your users by not using multiple platforms.  Favouring C++ over a memory safe language such as Java puts your users at much greater risk IMO.  C/C++ memory mistakes are still the most common vulnerability, programmers are not showing any signs of being able to properly secure C/C++ code against these types of vulnerabilities.  Using a memory safe language automatically secures you against these types of problems.  I'm not saying that the java platform is bulletproof, but its quite production hardened and protects you an entire class of bugs.  Choosing C++ in the name of security is a mistake in my view."
crypto,2pne06,admax88,1 point,Thu Dec 18 20:21:12 2014 UTC,"It's a request that's also frequently disabled on corporate systems, where half the applications I work with on a day to day basis still require a version of Java released more than five years ago. That.. is a huge vulnerability."
crypto,2pne06,disclosure5,1 point,Thu Dec 18 20:59:49 2014 UTC,"What I mean is that Monero is already written in C++, and thus sticking to the known paradigm is not a terrible idea;) Also, valgrind + gdb exist to handle 99.99% of the memory mistakes one could encounter.  Experience shows that i2p being written in Java hasn't been beneficial to its adoption, so sticking with it doesn't provide any measurable benefit. I must admit, even recently I find myself loathe to install j2re if at all possible...and I'm not entirely sure the bulk of my peers feel differently."
crypto,2pne06,fluffyponyza,1 point,Fri Dec 19 02:40:26 2014 UTC,Throw in some c++11 smart pointers and you almost have to try to mess up memory management.
crypto,2pne06,chasecaleb,1 point,Thu Dec 18 21:17:07 2014 UTC,"Right, that's why I started with   Well I applaud your efforts to reduce the attack surface of your users by not using multiple platforms.   As I agree it's good to minimize the attack surface by not incorporating both Java and C++.  So I can understand why you went the route you did.  But in general I think in this day and age it's a mistake to write security critical software in C/C++.  I think you're vastly overestimating the effectiveness of valgrind + gdb.  Given the choice, I wouldn't trust my currency and anonymity to a complex piece of software written in C++."
crypto,2pne06,admax88,2,Fri Dec 19 05:32:59 2014 UTC,"What else are you going to write it in that can produce cross-platform, highly performant applications? It has to produce native applications so you're not reliant on someone updating software (especially when those updates may be locked or prevented in a business environment due to some other software's dependency on it).  There are some promising languages, like Rust, that can be used in the future. But right now they're not mature enough to be used by a project of this scope."
crypto,2pne06,fluffyponyza,1 point,Fri Dec 19 19:09:13 2014 UTC,Java is cross-platform and high performance (especially for long running applications like i2p).
crypto,2pne06,admax88,2,Sat Dec 20 06:51:50 2014 UTC,So you can run it on embedded hardware without the java footprint?
crypto,2pne06,reststrahlenbande,5,Thu Jan 8 15:35:31 2015 UTC,"Could you explain what you mean a little better? Do you mean steganographic transports? And are you talking about concealing the fact that a user is using I2P at all, as from their internet service provider?  If so, then that is not a very practical request, for several reasons:   It is not a goal of any mature anonymity network, including Tor, I2P, Freenet, and all others that I know of, to actually conceal the fact that the user is using that network - only to conceal what they are doing on it. EDIT: Tor Bridge Relays are indeed an exception to this, but a similar concept may not be practical for I2P for the reasons below, and others. It is likely not possible to conceal the fact that such a network is being used, at least for interactively-routed networks like I2P, where most users also act as relays for other users' traffic. The best you might be able to do is run everything on port 443 (the standard HTTPS port) with HTTPS-like handshakes, but that would be only one way and the overall traffic flow wouldn't be very similar to HTTPS. Another option might be to conceal it as encrypted BitTorrent traffic, but again, the traffic flow pattern is fairly different. Additionally, since these networks publish the addresses of relays publically, as they must in order for other users to find them, no matter what kind of traffic pattern or masking is used, whether someone is using the network can still be determined with ease by cross-referencing which computers their traffic is directed to/from and which are a part of the network. Notions of steganography involving images or other media files, etc., make even less sense than such protocol-masking in such a situation, and would add to the CPU and bandwidth overhead enormously. These networks are already terribly constrained by these bottlenecks. I2P does meet ""its actual objective of protecting the user from being singled out as suspicious"" - all I2P users look like just another I2P user, although some send and receive more traffic than others, and some use only TCP or UDP instead of both. It is likely impossible, for the reasons above and others, to make them look like just another internet user. There simply is not any other activity that one does on the internet that even remotely resembles the kind of traffic employed by these tools. If users wish to conceal from their ISP the fact that they're using these networks, the best option available to do so is probably to route their connection to the network through a VPN or similar encrypted tunnel. However, the timing and traffic flows are still fairly distinct.   If I have misunderstood what you're saying, or if you feel that I've missed anything, please bring it to my attention and I'll attempt to correct myself. But I strongly believe that what you're describing is impractical, and that perhaps you don't have a complete understanding of the principles involved with these types of tools."
crypto,2pne06,NeuroG,10,Thu Dec 18 16:04:56 2014 UTC,"Tor bridges use imperfect steganographic transports already. It doesn't have to be perfect, but it makes it harder for automated systems to block and/or highlight tor bridges."
crypto,2pne06,jenddo,1 point,Thu Dec 18 11:50:06 2014 UTC,"I didn't know that, thanks! That definitely would be a good feature for I2P to implement."
crypto,2pne06,silverforest,1 point,Thu Dec 18 12:51:14 2014 UTC,"I'm sorry that you were so offended; that was definitely not my intent.  I also wasn't aware that I employed any ""mathematical excuses"" - I feel like the points I raised are all related to much broader truths about the actual protocols and traffic patterns employed, which are pretty constrained as to how much they can be altered. I myself don't have enough knowledge of the underlying mathematics to make even basic judgments about the feasibility of steganography on that level. But on higher levels, it seems like a rather difficult challenge, for the reasons I gave.  The differences between an interactive, mutli-stream networked system and simpler channels as relates to steganography are clear, and it is my belief (perhaps a mistaken one) that the nature of those differences, specifically the extremely specific and copious traffic patterns involved, make steg solutions difficult to implement.  As to your last point, I did not use the word ""perhaps"" sarcastically, and I think your reaction is quite out of proportion. Considering that you misspelled ""steganographic"" in your initial comment, and that you fundamentally misrepresented or misunderstood the goals of the project, and furthermore sought to submit unrelated feedback about the project here instead of communicating it to the developers or bug tracker directly over what seems to be a long period of feeling the way you do, it seemed reasonable to consider the possibility that your understanding was limited. As that consideration was made in error, I certainly apologize, but I think that what I said was indeed reasonable.  Since /u/NeuroG made a reply that discussed some of the steganographic transports used for Tor Bridge Relays, which I didn't know were implemented, I am certainly reconsidering the feasibility of such a system for I2P, but of course I'm not a developer and have little ability to implement them. I suspect that a similar system may not actually work in I2P, since by its very nature, virtually all I2P users are also relay nodes, and therefore the traffic patterns are extremely different from those of a non-relay Tor user. But again, my own understanding of these things is limited. It is a useful consideration regardless.  Once again, my apologies for offending you, and I hope that it doesn't reflect on the project itself (which I have no direct involvement in). I also encourage you to discuss your ideas of steganographic transports on the I2P bug tracker or via email or IRC as described on the I2P Contact page."
crypto,2pne06,Godspiral,2,Thu Dec 18 13:17:04 2014 UTC,"You may be quite interested in reading through the NTCP2 spec thread that zzz mentioned in the original thread - as it turns out, they actually are working quite hard on implementing steganographic transports for a large amount of I2P's traffic, and the ideas are pretty neat.  I've made a simple, text-only paste of that thread here, so you don't have to use I2P to read it: http://pastebin.com/p2CUAk7r"
crypto,2pne06,silverforest,1 point,Thu Dec 18 13:24:54 2014 UTC,"I really hope Rust is stabilized soon, so crypto projects can start using it."
crypto,2pne06,Godspiral,7,Thu Dec 18 13:22:51 2014 UTC,"3) I assume EC 25519 is also an option? EC 25519 DH?    I took a look at the cryptographic section of your technical introduction, specifically the section on ElGamal/AES+SessionTags.  An alternative to that construction is the crypto_box primitive avalaible in NaCl, an implementation of which is available in Java (via the JNI). This is a construction of curve25519(DH)+xsalsa20(symmcrypto)+poly1305(authentication), which encrypts messages from a source curve25519 keypair to a destination curve25519 public key and requires a unique, random, non-repeating nonce per message.  A summary of how it works: A shared encryption key is created by a DH exchange on the curve25519 keys. This key is then fed together with the nonce into the XSalsa20+Poly1305 encryption scheme to encrypt and authenticate the message.  Note that the shared encryption key is constant for a given pair of source and destination, hence why a non-repeating nonce is required.  Note that using this construction would mean AES would no longer be required, you could just crypto_box your message directly instead of crypto_boxing an AES encryption key. This implementation decision is of course up to you.  If signatures are required: Curve25519 keys can also be converted to Ed25519 keys, which can then be used for signing with the crypto_sign primitive. It may be easier to have separate signing and DH keys, however."
crypto,2pne06,Natanael_L,2,Thu Dec 18 13:41:17 2014 UTC,"6) As we all know, RSA is super slow and has huge keys. It is not an option.   its faster than ecdsa, and longer keys allow for longer messages.  You can compress keys by up to 50% (patent free afaik) if you have a predetermined range for public keys.  While RSA or Rabin has some rules to avoid, ECDSA relies on random number generators, and on safe curves provided by NIST, which have already been caught releasing backdoored RNGs as standards.  It may be considered complicated enough that a code library is needed."
crypto,2pne06,Godspiral,2,Thu Dec 18 13:46:45 2014 UTC,ECDSA on NIST curves isn't the only alternative.  Take a look at eBACS: http://bench.cr.yp.to/results-sign.html  Those multivariate signatures are impressively fast (though their public keys are massive).  Ed25519 too is faster than ECDSA.  It is also unfair to compare signature schemes with different security levels. Compare 3072-bit RSA against 256-bit ECDSA and the difference isn't as dramatic.
crypto,2pne06,bluemellophone,2,Fri Dec 19 15:36:20 2014 UTC,"It is also unfair to compare signature schemes with different security levels. Compare 3072-bit RSA against 256-bit ECDSA and the difference isn't as dramatic.   True, but it stays dramatic enough if verification speed is just at least as important as signing speed, and there are many cases where verification speed is much more important (usually more verifiers of one signature than the single signer)"
crypto,2pne06,pushme2,2,Sat Dec 20 18:13:47 2014 UTC,"RSA signature verification and decryption is faster, signing end encryption is much much slower. ECDSA don't NEED a good RNG anymore than RSA if you use deterministic generation of the nonces (hash of plaintext plus private key). You just need good entropy during key generation. NSA have not influenced all ECC versions."
crypto,2pne06,bluemellophone,1 point,Thu Dec 18 11:19:56 2014 UTC,There is rabin system for faster signing speed.  ECDSA is still  slower on signing speed than RSA.  http://www.cryptopp.com/benchmarks.html  It is 50x slower than RSA on verification about 2x slower on signature.
crypto,2pne06,jenddo,2,Thu Dec 18 21:27:43 2014 UTC,"From zzz (I2P lead dev):   RSA is far slower than ECDSA for us, using Java's crypto provider. As we just worked with orignal on RSA signing, now I realize how simple it is. Perhaps if we did our own implementation with jbigi we could speed it up."
crypto,2pn826,conradsymes,8,Thu Dec 18 02:59:29 2014 UTC,In CBC mode: Wait until you see the same block twice.  The two corresponding plaintexts xored together are equal to the two preceding ciphertexts xored together.
crypto,2pn826,perciva,1 point,Thu Dec 18 03:57:58 2014 UTC,"Off the top of my head is analyzing carry forward entropy. It's not 'easy' just like any other generic analysis, but can give vital clues about the cipher and the data."
crypto,2piw2r,Natanael_L,3,Wed Dec 17 00:17:19 2014 UTC,Cross post from netsec. This could replace physical NFC/RFID tags and other similar local authentication devices if it would turn out to be secure and unspoofable.
crypto,2piw2r,d4rch0n,3,Wed Dec 17 00:18:40 2014 UTC,"Awesome, but ""uncloneable"" sounds dangerous for certain applications since it's a physical key.  Would it be possible to create n physical keys, where n-i physical keys were needed to unlock? If I understand this correctly it doesn't seem like that would be a problem at all, and would allow you to lose i keys."
crypto,2piw2r,aflawinlogic,2,Wed Dec 17 02:54:20 2014 UTC,"Do that in software? Identify the specific key used, require a number of them to be present from a defined set."
crypto,2pd1gt,jamesphw,11,Mon Dec 15 14:41:56 2014 UTC,This TrueCrypt derivative is taking cues from the TrueCrypt auditing project and has already completed many improvements:  https://veracrypt.codeplex.com/
crypto,2pd1gt,aydiosmio,1 point,Mon Dec 15 19:35:05 2014 UTC,Just tried that yesterday. It's painfully slow to mount containers
crypto,2pd1gt,DigimonFantasy,3,Tue Dec 16 12:30:22 2014 UTC,"And for standard containers and other partitions, TrueCrypt uses at most 2000 iterations but VeraCrypt uses 655331 for RIPEMD160 and 500000 iterations for SHA-2 and Whirlpool.   This solves one of the problems the iSec audit found, low iterations (2004 based)  It would be nice to have user defined iterations. Plenty of password managers let the user define it."
crypto,2pd1gt,technonerd,5,Tue Dec 16 15:07:32 2014 UTC,"Is there a statement of intent from them?.. Given that truecrypt works, is this building on top of where Truecrypt was, in which case what is the diff; or is it new, in which case what is the link to Truecrypt beyond just wanting to adopt users?"
crypto,2pd1gt,davidpbrown,4,Mon Dec 15 17:52:15 2014 UTC,"So, how is it different? Are they just maintaining it or adding/subtracting features?"
crypto,2pd1gt,davidpbrown,1 point,Mon Dec 15 22:00:02 2014 UTC,Where do I find the commits? The ones on Github seem to be atleast 5 months old?
crypto,2pd1gt,illegalbanana,1 point,Mon Dec 15 22:05:22 2014 UTC,That's a completely different project. CipherShed's git repo is at https://github.com/CipherShed/CipherShed.
crypto,2pd1gt,terremoto,2,Mon Dec 15 22:15:48 2014 UTC,"This wiki page lists project ""goals""  https://wiki.ciphershed.org/   Paranoia: Trust no one. Trust nothing. Assume everyone else is a malicious actor and that everyone's machines are compromised by adversaries.   Hard to run an open-source project on that philosophy."
crypto,2pd1gt,aydiosmio,0,Mon Dec 15 23:05:36 2014 UTC,"Just because it is hard, does not suggest it is not worth doing. Also, if they are putting themselves forwards as trustworthy, then it is for them to prove themselves."
crypto,2pd1gt,davidpbrown,0,Mon Dec 15 23:18:36 2014 UTC,I'm just saying it's quite a bit hyperbolic to assert this. Clearly it's not actually something they're capable of.
crypto,2pd1gt,aydiosmio,0,Tue Dec 16 00:12:42 2014 UTC,"Saying shit doesn't make it true.  Truecrypt managed it. Proving themselves is a matter of consensus.. if they can convince us and evidence they are not compromised by other interests and if they can show themselves better that other alternatives, then the take the place of Truecrypt.. otherwise they are just a pretender and everywhere there are too many of who just talk. With power comes responsibility, Truecrypt was a powerfully useful tool, so to replace it does take effort.. and perhaps an audit similar that Truecrypt was undergoing."
crypto,2pd1gt,davidpbrown,-7,Tue Dec 16 09:58:19 2014 UTC,"TrueCrypt is not considered secure anymore. Use some google-fu and see what I'm talking about. EDIT: Jesus guys, I get it. I was wrong. I understand that now."
crypto,2pd1gt,davidpbrown,7,Tue Dec 16 12:05:21 2014 UTC,"That's what they want you to believe.. and saying shit doesn't make it true. So, be careful what you parrot.  As you're likely aware, the developers gave up in a very odd way, suggesting some wild alternatives. I've seen no reason not to trust this one:   sha256sum: 9d292baf87df34598738faef7305cddaa15ea9f174c9923185653fb28f8cfef0  ./truecrypt-7.1a-linux-x86.tar.gz  If someone is going to offer an alternate then they have a lot of proving to do. ""Why trust them?"" is the first question .. given what we know about the disingenuous actions of those acting in our name, better to be skeptical by default, no?.. Too many people seem to try to suggest ""Trust U.S."" because they have their own interests at heart."
crypto,2pd1gt,sealfoss,6,Wed Dec 17 01:39:20 2014 UTC,"The point is that unmaintained software probably will have some undiscovered, unfixed bugs. Further, without changes it will eventually stop being compatible with new systems.  I don't think anyone is telling you to trust them... they seem to know they need auditors."
crypto,2pd1gt,davidpbrown,5,Wed Dec 17 08:38:38 2014 UTC,"It is give and take though.  Old as truecrypt is, it's code base has still been audited, unlike ciphershed."
crypto,2pd1gt,Saicotic,1 point,Mon Dec 15 17:59:31 2014 UTC,Understood .. I was just knocking back dasnork's naive acceptance that Truecrypt doesn't work ok for now until something else proves itself.
crypto,2pd1gt,gospelwut,3,Mon Dec 15 18:36:00 2014 UTC,7.2 is untrusted. 7.1a is fine.
crypto,2pd1gt,GeneralPow,1 point,Mon Dec 15 18:46:04 2014 UTC,"You mean the ""latest version"" isn't."
crypto,2pd1gt,aydiosmio,1 point,Mon Dec 15 20:15:01 2014 UTC,How long does it take before it can be confirmed as relatively secure?
crypto,2pc6ae,baordog,10,Mon Dec 15 06:42:49 2014 UTC,"Specific to Cryptanalysis (in order):   start with this great tutorial on FEAL cryptanalysis then try the matsano challenges finally followed by Schneier's self study course on cryptanalysis.   Good intermediate texts on cryptography/cryptology:   From a mathematical perspective: An Introduction to Mathematical Cryptography by Silverman et al. From a provable security perspective (probably the most important to both academia and industry): Introduction to Modern Cryptography (new 2nd ed.) by Katz & Lindell Serge Vaudenay's A Classical Introduction to Cryptography (it's an in between of the above 2 books). Christoph Paar's Understanding Cryptography with a video course.   Lastly, a really fantastic all around book on network security (including crypto) would be: Network Security 2nd Ed. by Kaufman and Perlman. It is a little old though but still relevant. Also has great analysis of real world protocols such as IPsec (IKE, ISAKMP), Kerberos, SSL/TLS, S/MIME, etc."
crypto,2pc6ae,cunttard,1 point,Mon Dec 15 07:25:17 2014 UTC,"Yes, take Schneier's advice. The only way to learn this is the hard way and to get your hands dirty. Consider the 'reading' part as more like a 'tourist brochure'."
crypto,2pc6ae,Skewness,2,Mon Dec 22 03:08:27 2014 UTC,Thanks ! That covers it well.
crypto,2pa9k8,sapiophile,3,Sun Dec 14 19:46:52 2014 UTC,"I'm not aware of any implementation exploiting GLS/GLV for ECDSA proper, though there are niche implementations which use it for Schnorr, and the attacks probably basically work there too.  Note also that GLS/GLV is patented, and it only works on particular special curves.  These factors have limited its adoption.  I guess the moral of this paper is, if you're going to do those things, be very careful of how you choose the nonce."
crypto,2pa9k8,bitwiseshiftleft,2,Sun Dec 14 23:43:42 2014 UTC,"If I use ECDSA during an authentication process that will die in under a minute, the ""nonce leaks"" would be irrelevant due to the time constraint... right???  The nonce is being sent after TLS1.2 is established."
crypto,2pa9k8,sponge8888,1 point,Sun Dec 21 09:52:53 2014 UTC,"Sure, so long as the signing key is ephemeral.  If it's long-lived, that would still be a problem."
crypto,2pa9k8,bitwiseshiftleft,2,Mon Dec 22 05:42:29 2014 UTC,"I use a 256 bit public key, and anyone can submit a nonce for the server to sign. Should I reject a nonce with high bias to prevent a hacker from trying to get my private key????  If I don't filter the nonce, somebody could send a bunch of bits set to 1.  The hack is related to the bias, and that is defined in Definition 1 in the article.  It seems to be related to an abundance of 1s verusus zeroes in the bits of the nonce."
crypto,2owv0q,locomotorcat,28,Wed Dec 10 22:50:26 2014 UTC,"Woohoo! Hybrid proofs! I've spent a lot of time thinking about effective ways to teach the ideas. So let me know what you think of this.  I like to take a view that is sort of the contrapositive of what you're being taught. (It's more like the style of ""code-based games"" of Bellare & Rogaway, if you must know)  Suppose you have this big complicated cryptographic construction, and it involves many applications of various crypto ingredients. Traditionally, you would say: if you give me an adversary attacking my construction, I can transform it into an adversary breaking (one of) the ingredients. Since we assume the ingredients are secure, this is impossible so my scheme is secure.  Instead of this, think of each crypto ingredient as coming with a ""security rule"" that lets you change parts of a big interaction.   Security for a PRG says that if the seed s is random and used nowhere else in the system, then you can replace PRG(s) with true randomness, and it will change the behavior of the system by only a negligible amount. Security for CPA encryption says that you can replace encryptions of messages by encryptions of any other messages (if the key is used nowhere in the system besides for encryptions), and it will change the behavior of the system by only a negligible amount. etc   When I teach this, I generally draw out a cryptographic construction using a schematic diagram. I then give these ""security rules"" as pictorial rules for rewriting the schematic diagram. So if you are using a component that you claim is secure, you are allowed to rewrite parts of your diagram according to the appropriate rules. If you are trying to prove your construction secure, you have to show that the appropriate rewriting rule for your big system can be derived from the rewriting rules for its ingredients.  So you want to prove the security of your scheme based on the security of its ingredients. Say you are proving security of a PRG construction. Then you know that you have to start with the diagram that describes your PRG getting a random seed as input, with output going to some system.. then by applying the given rules for the ingredients of your construction, reach a diagram that just involves true randomness going into the same system.  The point of a hybrid argument is that no matter how you think about these things, you can only apply one ""security rule"" at a time. In my language, you can only change the picture in one way at a time. Typically there is only one way to apply the rules that gets you to where you're going.    Here's an example. You have a length-doubling PRG called G. That means you are allowed to use the following rewriting rule:  PRG RULE       $                                 =========      +                  $ $                            | n bits           + +                         +---+                | |             can replace  | G |        with    | | 2n bits                   ++-++                | |                           | | 2n bits         v v                           v v                                  In my diagrams, dollar sign denotes a source of n uniform random bits. Each ""wire/line"" carries n bits. Got it so far? You can replace 2n pseudorandom output bits of G with 2n truly random bits. By replace, I mean that no polytime algorithm will be able to tell the difference (except with negligible bias). This is the definition for PRGs that we know and love.  Let's use notation GL(s) and GR(s) to denote the left and right halves of G's output on seed s. Imagine you are asked to prove that the construction GL(s) || G(GR(s)) is a secure length-tripling PRG. In other words, you want to show:  WANT TO SHOW    $                                ============    +   +---+              $ $ $                        |   |   v              + + +                     +-+-+ | +-+-+            | | |       can replace   | G | | | G |    with    | | | 3n bits               ++-++ | ++-++            | | |                     | |  |  | |             v v v                     | +--+  | |                                      |       | |                                      v       v v                         Right? You want to show that no one would be able to tell the difference between the output of your construction and 3n truly random bits. That's what it means for your construction to be a secure PRG.  OK, so you have to start at the left side and apply rules you know about, to get to the right side. Obviously you have to replace each G according to the rule above, but the key is that you can only do one G at a time! The ""PRG rule"" doesn't apply to the second instance of G (because it's input is not truly random -- the rewriting rule says the input should be truly random). But the rule does apply to the first instance of G, so that's pretty much the only thing you can do at this point!  To be clear, you start with this diagram:    $                                  +   +---+         |   |   v       +-+-+ | +-+-+   | G | | | G |   ++-++ | ++-++    | |  |  | |     | +--+  | |                        |       | |                        v       v v                         .. then apply the PRG rule to the first instance of G and you get:   $ $                                + +  +---+        | |  |   v        | |  | +-+-+    | |  | | G |    | |  | ++-++    | |  |  | |     | +--+  | |                        |       | |                        v       v v                         Hey, what do you know? In this diagram, the second instance of G is receiving truly random input, unlike before. So the PRG rule does apply to that second instance of G. If you apply that rule, you get:      $ $ $            + + +           | | |           | | |     | | |          v v v        Which is what you wanted. Yay, life! Note how things had to happen in this order. Finding out the right order to press all the buttons is the fun part (for me) of doing crypto security proofs.  Now how does this relate to the ""traditional"" style reduction you've been taught?  Suppose you can distinguish between the 1st and 3rd picture, then you can distinguish between either 1 & 2 or between 2 & 3 (pigeonhole). But each of these pairs differ by a single application of the PRG rule -- this is by design! So say we had an adversary D that distinguished well between the output distributions of pictures 2 & 3. Then we could easily make a distinguisher for the PRG security of G -- just combine D with the part of the picture that doesn't change between pictures 2 & 3."
crypto,2owv0q,rosulek,3,Thu Dec 11 00:33:19 2014 UTC,"The point of a hybrid argument is that no matter how you think about these things, you can only apply one ""security rule"" at a time. In my language, you can only change the picture in one way at a time. Typically there is only one way to apply the rules that gets you to where you're going   This really helped.  Also, your tie in to the reduction proofs at the end is really really really helpful.  I'm going to keep reading over this tonight.  My professor basically promised us a hybrid proof tomorrow, and they're really the only concept I've consistently struggled with."
crypto,2owv0q,rosulek,3,Thu Dec 11 00:56:48 2014 UTC,"Here are some draft lecture notes that I've used in previous crypto course offerings. It's an expanded version of what I just described, but probably a little rough around the edges."
crypto,2owv0q,spaceshipnow,3,Thu Dec 11 03:05:34 2014 UTC,What does an equivalent traditional proof look like? I like these games but I still don't see how to employ them to understand normal crypto proofs...
crypto,2owv0q,rosulek,3,Thu Dec 11 05:23:41 2014 UTC,"For this example, it might look something like this:  You want to show that, given an adversary that distinguishes the construction from random, you can use it to construct an adversary breaking the underlying PRG.  Suppose you're given an adversary D that distinguishes the distribution GL(s)||G(GR(s)) from random (with s chosen uniformly) with bias ε. So D is an algorithm that takes 3n bits of input. Now consider the following  algorithms, which take 2n bits of input:   A1: on input x = xL || xR, run D( xL || G(xR) ) and return the result A2: on input x, sample a random y (n bits), run D( y || x ) and return the result.   Notice how I pulled A1 and A2 out of my ass! They will make sense only later (but I can tell you a secret that A1 is the common part of pictures 1 & 2 from my proof; A2 is the common part of pictures 2 & 3 from my proof).   Now we can consider what A1 does when its input is chosen as random 2n bits or when its input is chosen as outputs of G. Similarly, we can consider the same two input distributions for A2 and ask what happens.  A1 and A2 are constructed so that:   A1 with PRG input produces exactly the same distribution as D running with input taken from our construction (the one that calls G twice, the one that we are trying to prove is a PRG). Call p1 the probability that D outputs 1 in this setting. A1 with random input produces exactly the same distribution as A2 with input taken from G's output. Call p2 the probability that D outputs 1 in this setting. A2 with random input produces exactly the same distribution as D running with random input. Call p3 the probability that D outputs 1 in this setting.   Note that there are only 3 possible distributions (hey, these are the three pictures I drew!), and the two ""endpoints"" are the ones involved in the PRG security definition for our construction.  We are given that |p1 - p3| = ε. Hence one of |p1-p2| and |p2 -p3| is at least ε/2 by the triangle inequality & pigeonhole principle. But:   |p1-p2| describes the bias that A1 has distinguishing G's output from random. |p2-p3| describes the bias that A2 has distinguishing G's output from random.   If ε is non-negligible (i.e., D breaks the PRG security of our construction), then ε/2 is also non-negligible. So either A1 or A2 (or both) break the PRG security of G.    If you don't like the ""either-or"" nature of the proof (that either A1 or A2 might break G, but we can't say which), you can do the following trick:  Define an algorithm A* that on input x, flips a coin and runs A1 half the time and A2 half the time. Then A* distinguishes G's output from random with probability |p1-p2|/2 + |p2-p3|/2 which is at least ε/2. So A* is a single, explicit algorithm that breaks G.    edit: I would argue that the opaqueness of the step where I state A1 & A2 (or A* ) is what is most counterproductive from a pedagogical standpoint. Everything else is going to be fairly standard, no matter which approach you take to proving things:    You've defined a sequence of interactions, each of which defines a probability.  Adjacent interactions differ by only one application of a crypto ""ingredient"", so the difference between adjacent probabilities corresponds to your advantage in breaking that primitive. Using triangle inequality + pigeonhole principle, you relate these adjacent differences to the difference between the first & last probabilities, which corresponds to the advantage in breaking the construction."
crypto,2owv0q,cunttard,3,Thu Dec 11 06:25:59 2014 UTC,"Yay, why didn't I have such a crypto professor such as yourself (although my crypto professor was a student of Goldwasser, so he was pretty cool anyway :).  I just wanted to point OP to a fantastic resource on understanding game based proofs + hybrid arguments by victor shoup."
crypto,2owv0q,rosulek,2,Thu Dec 11 11:08:10 2014 UTC,"Hm, I know most of Shafi's advisees, and it is true, they are all pretty cool. But Shafi was my advisor's advisor's advisor, so hopefully that makes me a little cool too.."
crypto,2owv0q,adhochawk,1 point,Thu Dec 11 16:46:37 2014 UTC,I went to a talk of hers once.  It was excellent.  Saving this resource for when I finish the rest of my exams.  It looks really interesting.
crypto,2owv0q,the_morbid_reality,2,Fri Dec 12 05:18:47 2014 UTC,I clearly need to ask more questions on here. I enjoyed this thoroughly.
crypto,2owyay,Blargwill,6,Wed Dec 10 23:17:42 2014 UTC,"If F is a block cipher like AES, then (IV, F(k,IV)⊕m) is a secure encryption of m, for random IV, with key k (it's just CBC restricted to 1-block messages).  You can extend this to multiple keys in a commutative way, but increasing the size of the ciphertext. Basically, the parties have keys k1, k2, k3... and the encryption is   (IV1, IV2, IV3, ... , F(k1,IV1)⊕F(k2,IV2)⊕...⊕m)   Each party can ""take off"" their respective F(k,IV) contribution, in any order.  Some considerations: this provides CPA security, but does not provide authenticity. It is also symmetric-key.   In the public-key setting you can get commutative encryption from ElGamal. A normal ElGamal encryption of m is (gr , (gk )r * m) where k is the private key and gk is the public key. The important observation is that for a ciphertext (gr , (gk1+k2+k3+... )r * m), each person can ""take off"" their respective gkr contribution, in any order. Again, this provides CPA security but not authenticity."
crypto,2owyay,rosulek,3,Thu Dec 11 00:46:47 2014 UTC,"Neither of these are secure for a mental poker shuffle, unfortunately. The way to implement it that uses commutative cryptography starts with  m_1 m_2 ... m_i   Then Alice encrypts all of the elements with the same key and shuffles their order:  IV_a1, m_? ⊕ F(K_a,IV_1) IV_a2, m_? ⊕ F(K_a,IV_2) ... IV_ai, m_? ⊕ F(K_a,IV_3)   Then Bob further encrypts, and shuffles as well:  IV_a?, IV_b1, m_? ⊕ F(K_a,IV_a?) ⊕ F(K_b,IV_b1) IV_a?, IV_b2, m_? ⊕ F(K_a,IV_a?) ⊕ F(K_b,IV_b2) ... IV_a?, IV_bi, m_? ⊕ F(K_a,IV_a?) ⊕ F(K_b,IV_bi)   Unfortunately, at this point Alice knows the order of the deck by tracking the first set of IVs. El Gamal has the same kind of problem. If the same set of IVs is used, then F(K_a, IV_a) is constant, and the procedure is the same as XOR with a random value. That has a serious flaw in this protocol in that K_a is recoverable as soon as any of the cards are revealed to any player."
crypto,2owyay,FryGuy1013,4,Thu Dec 11 02:42:41 2014 UTC,"OK, it seems that this application requires some rerandomizability in addition to commutativity. I agree that the symmetric-key scheme doesn't have it, but the ElGamal construction does. You can refresh the randomness r by multiplying the ciphertext by a random encryption of 1."
crypto,2owyay,rosulek,2,Thu Dec 11 03:02:52 2014 UTC,"I didn't think about that before. So what you're saying is Alice reveals gK_a and permutes {m_1, m_2, ..., m_n} to:   g^ra1, m_? * g^(ra1*K_a)  g^ra2, m_? * g^(ra2*K_a)  ...  g^ran, m_? * g^(ran*K_a)   Then the Bob:   g^rab1, m_? * g^(rab1*K_a) * g^(rab1*K_b) = (g^(K_a + K_b))^rab1  g^rab2, m_? * g^(rab2*K_a) * g^(rab2*K_b)  ...  g^rabn, m_? * g^(rabn*K_a) * g^(rabn*K_b)   and then multiplies them by encryptions of 1?   g^(rab1+rb1), m_? * (g^(K_a + K_b))^rab1 * ((g^K_a)*(g^K_b))^rb1  g^(rab2+rb2), m_? * (g^(K_a + K_b))^rab2 * ((g^K_a)*(g^K_b))^rb2  ...  g^(rabn+rbn), m_? * (g^(K_a + K_b))^rabn * ((g^K_a)*(g^K_b))^rbn                      = m_abi * (g^(K_a+K_b))^(rabi+rbi)   Is that right?"
crypto,2owyay,FryGuy1013,1 point,Thu Dec 11 03:48:38 2014 UTC,Looks right to me!
crypto,2owyay,rosulek,1 point,Thu Dec 11 04:20:06 2014 UTC,"Awesome bit on notation you have going there! My thoughts on this (I'm only starting in the cryptograhy scene) is that there are a few variables which have to be known and the same for this to work, does this reduce the security? Is it easier to 'crack'?"
crypto,2owyay,FryGuy1013,2,Thu Dec 11 21:21:34 2014 UTC,"I think that as long as appropriate values are chosen for the algorithms, and it's implemented correctly everything should be ok. A lot of algorithms use known groups.  Keep in mind that this El'gamal uses two large-prime field elements per card, so shuffling a 52 card deck would be 1024 bytes per card if it was implemented with a 4096-bit prime group. I think El'gamal can be used on elliptic curves, which would be 64 bytes per card on Curve25519."
crypto,2owyay,FryGuy1013,1 point,Thu Dec 11 21:49:44 2014 UTC,Is there any algorithm to find the value of G for a prime number?
crypto,2owyay,FryGuy1013,3,Thu Dec 11 22:13:10 2014 UTC,"g is just a generator of the group, which is any number that is coprime with the exponent. So any number other than 1, 0 or -1. In math terms it means that the set { g0, g1, g2, ... } contains all the elements of Z\p."
crypto,2owyay,Quibbler2412,1 point,Fri Dec 12 00:01:58 2014 UTC,"I've just noticed a potential problem in what you're stating (or just my misunderstanding). For this to work, the prime has to be constant between all keys, so surely that would mean all 52 cards would need to be encrypted by all parties with the same P value? As the cards are shuffled and no one knows the current state and therefore which prime would have been used before them?  It doesn't help the implementation I'm using in python has different name variables and I'm guessing a lot of values hidden away from me so I'm trying to piece together what it all means..  This is the code I'm trying to use: https://code.google.com/p/pysecret/source/browse/elgamal.py  I've got it working by chosing the same two values for p and a, and am guessing alpha is a component of the secret? I set it to a random number for each key, and then lambada is just a random'fier?   All the code seems messed up in terms of it doesn't look like any formula described on here or wikipedia"
crypto,2owyay,autowikibot,2,Thu Dec 11 22:21:50 2014 UTC,"The prime and generator (alpha in this guy's code) are public and shouldn't change. a is the private key (K_a in my examples), and beta is the public key (gK_a in them). Lambada (sic) is the appropriate r value for each operation (ra1, ra2, etc). You would have to manually make the step of multiplying the ciphertexts together. The code is doing the same operations as the stuff written above, but precalculating some of the things. gK_a\r) = (gK_a)r = betalambada (mod p).  Also, your python library is likely a math one, and not a crypto one. It's important to make sure that all of your operations are constant time when doing cryptographic operations. Also, it doesn't look like there is any padding being done."
crypto,2owyay,monican_agent,5,Thu Dec 11 23:54:34 2014 UTC,"Any stream cipher will do just that, as the goal of a stream cipher is to mimic the one time pad - which uses exactly XOR to encrypt.  Now, why you would use two stream ciphers on top of each other, I don't know. Any particular reason why you're looking for such a setup?"
crypto,2owyay,FryGuy1013,2,Wed Dec 10 23:28:09 2014 UTC,I'm attacking the idea of Mental poker. Which I've been looking at on and off for a year or so!   My concern is that I have 52 numbers which I have to encrypt individually? Is a stream cipher applicable if you're only wanting to encrypt a single number? Would that not result in all 52 numbers being xor'ed exactly the same way?
crypto,2owyay,bitwiseshiftleft,1 point,Wed Dec 10 23:38:55 2014 UTC,"Mental poker:       Mental poker is the common name for a set of cryptographic problems that concerns playing a fair game over distance without the need for a trusted third party. The term is also applied to the theories surrounding these problems and their possible solutions. The name stems from the card game poker which is one of the games to which this kind of problem applies. A similar problem is flipping a coin over a distance.  The problem can be described thus: ""How can one allow only authorized actors to have access to certain information while not using a trusted arbiter?"". (Eliminating the trusted third-party avoids the problem of trying to determine whether the third party can be trusted or not, and may also reduce the resources required.)  In poker, this could translate to: ""How can we make sure no player is stacking the deck or peeking at other players' cards when we are shuffling the deck ourselves?"". In a physical card game, this would be relatively simple if the players were sitting face to face and observing each other, at least if the possibility of conventional cheating can be ruled out. However, if the players are not sitting at the same location but instead are at widely separate locations and pass the entire deck between them (using the postal mail, for instance), this suddenly becomes very difficult. And for electronic card games, such as online poker, where the mechanics of the game are hidden from the user, this is impossible unless the method used is such that it cannot allow any party to cheat by manipulating or inappropriately observing the electronic ""deck"".     Interesting: Quadratic residuosity problem | Commitment scheme | Imre Bárány | Goldwasser–Micali cryptosystem   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2oyite,pein_sama,3,Thu Dec 11 09:17:12 2014 UTC,"let me guess that you are this guy. i'm not particularly good at finding stuff on an awfully organized web page. after a 2 minute search, i found only this ""proof"":  ""This task appears to be so difficult that some of the elements of the searched F permutation need to be guessed.""  and boom, baby, i indeed can not spot the flaw here. instead i spot the sheer lack of reasoning that possibly could be refuted."
crypto,2oyite,pint,1 point,Thu Dec 11 09:47:57 2014 UTC,"No, I'm not that guy. My cryptographic expertise stopped at lvl ""Don't invent your own, you'll fail"" ;)  Site is indeed terrible.  EDIT: The P!=NP proof is not posted on the site. The author claims its on 300-pages hand draft yet.  It all looks like yet another schizophrenic like that guy of Temple OS, but still there is some small chance that he actually found something useful."
crypto,2oyite,pint,3,Thu Dec 11 09:59:56 2014 UTC,"i stand corrected. however, let me cite the viceroy character from the stupid star wars prequel: there is no need to report until we have something to report. we will talk about this guy when we have something on the table other than vaporware."
crypto,2oyite,pint,1 point,Thu Dec 11 16:35:15 2014 UTC,"We have the detailed description of the function, the descriptions of crypto algorithms derived from it, sample implementation in C++ or even Delphi and a working crypto app. That's a bit more than in many posts here that have received a constructive critique.  Maybe don't concentrate on that big claim the author did, but just on properties of that intriguing f(f(f(x))+1) ? Just replace all ""P=NP"" parts with ""what do you think about such a hash function?"" ;)"
crypto,2oyite,6TLaRm4g,2,Thu Dec 11 17:02:25 2014 UTC,"rc4 was designed when i was in grade school. but it is still not properly analysed, because simply we don't have the math to understand it. in comparison, AES is much better understood, and this increases trust to some degree (we know it, yet we can't break it).  this approach is more difficult than rc4. therefore i almost guarantee you it will not have proper cryptanalysis anytime soon. the only one attempt cited on the page says exactly that, plus warns against using it for crypto purposes, because of the unknown behavior of the construct."
crypto,2oyite,6TLaRm4g,2,Thu Dec 11 19:24:05 2014 UTC,He should just take a loan if he's sure he made the proof. The millennia award will be more than enough to cover the expenses.
crypto,2oyite,cunttard,1 point,Thu Dec 11 16:21:29 2014 UTC,Perhaps not enough creditworthiness. Being good at math doesn't implicate being good at personal finances. Especially if you were born in USSR.  Whatever the reason is - he chose crowdfunding instead.  edit: ortography
crypto,2oyite,Uncaffeinated,1 point,Thu Dec 11 16:36:20 2014 UTC,"Well honestly he doesn't look and sound like a scammer, so maybe he just wants to try out alternative methods of financing."
crypto,2owqc6,C_Hitchens_Ghost,2,Wed Dec 10 22:12:38 2014 UTC,Looks like this: http://en.wikipedia.org/wiki/Merkle%27s_Puzzles
crypto,2owqc6,Natanael_L,1 point,Thu Dec 11 14:50:18 2014 UTC,"Merkle's Puzzles:       In cryptography, Merkle's puzzles is an early construction for a public-key cryptosystem, a protocol devised by Ralph Merkle in 1974 and published in 1978. It allows two parties to agree on a shared secret by exchanging messages, even if they have no secrets in common beforehand.     Interesting: List of puzzle topics | Ralph Merkle | Index of cryptography articles   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2owqc6,autowikibot,1 point,Thu Dec 11 14:51:04 2014 UTC,"That was the inspiration. I'm still trying to figure out the specifics for the keypair generation, and the OTSK generation. I don't think splitting the algo will be an issue. I have the verification codes and rank token protocols defined. I'll put together another (better formatted) post, with that other information.   Bob sends all of the puzzles to Alice, who chooses one randomly, and solves it. The encrypted solution contains an identifier, as well as a session key, so Alice can communicate back to Bob which puzzle she has solved.   Also, by selecting a singular prize combination, and splitting it among the puzzles, I hope to sidestep the problem that occurs when Carol completes a puzzle before Alice."
crypto,2os48p,BenRayfield,4,Tue Dec 9 18:58:46 2014 UTC,"Doesn't seem ridiculous to me. Not even sure what you mean by merkle forest bitstrings, but I think in most usecases you rarely need to deal at the bit level, and supposing you do it, you could just pad to the nearest byte."
crypto,2os48p,cunttard,2,Tue Dec 9 20:50:17 2014 UTC,you could just pad to the nearest byte.   Ding ding!
crypto,2os48p,JohnDoe_85,3,Wed Dec 10 06:53:05 2014 UTC,"http://www.saphir2.com/sphlib/  This is an French government-funded library of hash functions, written by Thomas Pornin. The interface allows hashing bitstrings. You have to input them as octet strings first, and then finish with a 0-7 additional bits."
crypto,2os48p,ctz99,1 point,Tue Dec 9 20:14:22 2014 UTC,"If you have to append the extra bits, it's not really the same function. He could easily use an existing algorithm and pad it so it's a multiple of 8, but that's not what he wants."
crypto,2os48p,jus341,1 point,Wed Dec 10 00:24:24 2014 UTC,Please explain more: e.g. how would you hash 0b111 (note: not 0b00000111 or 0b11100000) using an octet-wise SHA256 implementation?
crypto,2os48p,ctz99,1 point,Wed Dec 10 08:02:56 2014 UTC,"0b111 would change to 0b111100000...00< 3 as 64 bit integer> where as 0b11100000 would change to 0b11100000100000...0000< 8 as 64bit integer>. In not sure if current implementations ignore zeros at the end of messages, but I'm pretty sure the former is what op wants."
crypto,2os48p,jus341,3,Wed Dec 10 08:21:01 2014 UTC,"After the message, the algorithm applies the bit '1', then zero fills it. I'm unaware of an implementation that uses bits, because people don't really store data like that. You can probably easily modify the algorithm to take your bitstream, convert it to bytes, and correctly place the '1' bit.   Edit: is there a reason you can't pad to the nearest byte?"
crypto,2os48p,jus341,2,Tue Dec 9 19:26:32 2014 UTC,"i doubt you will find any library that accepts data on bit level. however, i'm not sure i see the appeal. in the case of hash trees, usually the data is only a fraction of the input block, there's plenty of space to spread the input over. also the input is fixed in length. how byte granularity hurts you?"
crypto,2os48p,pint,2,Tue Dec 9 19:05:12 2014 UTC,"Am I really going to have to modify the GNU Crypto code to use SHA256 to its bit level potential, or does it already exist somewhere?   I have been in your shoes looking for such off the shelf software.  I have yet to find an off the self library that does it by the bits.  The reason is that most software data objects are in bytes.  For my use cases (which can be hardware and embedded systems), bytes are sometimes too large so when hashing bits, I've ended up resorting to write my own code.    I dont like the requirement that every size be a multiple of 8.    Me neither.  Cryptographic algorithms are written in terms of mathematics where bit and byte boundaries are not considered.  But for software, bytes are almost always used as the most primitive level of data instead of bits (for HDL that isn't always true)."
crypto,2os48p,throwaway0xFF00,2,Wed Dec 10 06:10:46 2014 UTC,What's wrong with padding??
crypto,2os48p,Dillinur,1 point,Wed Dec 10 09:58:59 2014 UTC,"The hash of the values 0 1 2 3 will all be 32 bytes long.  If you wanted to hash the 2 bit number 3, how would it be different than the byte valued 3?"
crypto,2oo80g,lacosaes1,1 point,Mon Dec 8 19:12:18 2014 UTC,It's just amazons link shortner
crypto,2oo80g,Darksonn,1 point,Tue Dec 9 08:32:25 2014 UTC,I clicked share in Amazon and it was the link it gave me. I changed it to the full link though if you feel more safe.
crypto,2oo80g,zeroXten,0,Tue Dec 9 10:55:26 2014 UTC,cough watering hole cough
crypto,2oo80g,zeroXten,1 point,Tue Dec 9 19:39:31 2014 UTC,Why do you say that?
crypto,2onxbw,maqp,6,Mon Dec 8 17:45:46 2014 UTC,"You need to model your plain text, also known as source. Then, from an information-theory point of view, it's just a matter of applying Bayes' rule. Of course, that can quickly grow computationally unfeasible (not so much for this simple case), which is why good ciphers exist in the first place.  For example, in the case of a flawed OTP with a bit stream that is completely random (e.g. well compressed), all your knowledge is:  P(bi|ei)=P(ei|bi)*P(bi)/P(ei), where bi is the i-th received bit and ei is the encrypted bit.  In your case:  P(b=0|e=1)=P(e=1|b=0)*P(b=0)/P(e=1)= 1/2 + ε ( =P(1|0)=1-P(1|1)=1-P(0|0) )  You can quantify the amount of information you gained relative to the information you already had about the source by reading the cipher text, per bit:  Hgain = Hsource-Hnew = 1-H(1/2+ε) = 0.000288558 bits/bit,  for ε=0.01  This was introduced on one of the first serious papers on crypto, by shannon: http://netlab.cs.ucla.edu/wiki/files/shannon1949.pdf"
crypto,2onxbw,darkmighty,2,Mon Dec 8 21:09:58 2014 UTC,"Ultimately what this allows you to do is order the likelyhood of possible outputs. It is still probably very difficult to analyze the encryption, even if ε is very high (e.g. ε=0.1), although I have no proof.  A OTP allows your encrypted message to ""inherit"" the entropy of the OTP itself. If you are encrypting plain english text (which is fairly low entropy) with a OTP which has resonably high entropy, then a) it is not possible to decipher with absolute certainty, and b) the number of likely possibilities is still very high and very difficult even for something as small as 160 chars."
crypto,2onxbw,jamesphw,2,Tue Dec 9 04:12:04 2014 UTC,"Absolutely, what a good model of the source gives you are the probabilities I cited.  Then of course you have to choose among them.  If your model is limited, you might be able to do a higher order inference from context of the words based on the probabilities (I believe this kind of inference would in general be equivalent to A.I., so that's not something we have automated yet) -- e.g. if the first words are likely ""the quick brown"", then you might weight more ""fox"" as the next word.   Otherwise, if your model is pretty good, you could introduce an error metric and simply pick the minimum error alternative.  The concept of ""inheriting entropy"" is detailed in the paper by shannon, by the way.  I'm not an expert, but I think it would be interesting to see this analysis of what's the treshold for the probabilities get high enough so that a single possibility emerges. In this case an analysis with different kinds of entropy is probably more suitable (and beyond my knowledge)."
crypto,2onxbw,darkmighty,2,Tue Dec 9 16:37:20 2014 UTC,"While a 1% bias would not be enough to decode one English ciphertext, this is very similar to how a Viterbi decoder works for radio communications.  Using a Markov model of the underlying data, and you can compute the maximum likelihood message, or maximum-likelihood estimates for portions of the message.  Ninja edit: Also, if you have multiple ciphertexts for the same or similar plaintexts, then you can combine them to get a much less noisy ciphertext.  This is how the recent attacks on RC4 TLS work.  You can use a correlation to line up related parts of the messages if there are long enough repeats."
crypto,2onxbw,bitwiseshiftleft,3,Sat Dec 13 23:31:15 2014 UTC,"obviously for such epsilon, general cryptanalysis is hopeless. but you might know some self correlations. the easiest example would be a message that is one of two possibilities. and if the messages are long enough, a simple statistical calculation identifies the message with large probability."
crypto,2onxbw,pint,2,Mon Dec 8 18:31:47 2014 UTC,"In an extreme case, you might know it is either a thousand zeroes or a thousand ones. In this case you can measure the bias somewhat reliably and identify the plaintext."
crypto,2onxbw,Natanael_L,1 point,Mon Dec 8 22:05:41 2014 UTC,"Ultimately, a biased hwrng will limit the probability distribution. Instead of a 'clean even' distribution, what will occur is a mapping with 'chunks' where the encryption functions dependent on random distribution, will map more encrypted messages to those 'chunks'."
crypto,2oozcv,cybertonic,3,Mon Dec 8 22:49:31 2014 UTC,"""...use GPG, not some random-ass website."""
crypto,2oozcv,phyzome,1 point,Tue Dec 9 00:16:30 2014 UTC,what is that recent upsurge of high school projects presented as real solutions?
crypto,2oop9c,ericdolson,2,Mon Dec 8 21:28:55 2014 UTC,"NOTES: I am new(er) to crypto and have built this to strech my imagination and learn at the same time. Being a beginner, I am looking for constructive and friendly feedback like this community provided here.  Answers to some FAQs you may have:   I am using Crypto-js's AES-256 encryption (open-ssl generated keys, salted, etc.) All encrytion is in-browser. Even the upload/download actions use HTML5 filereader/blob objects so nothing is actually go to or from the server I will be adding a cert to move everything to HTTPS soon This is intenteded for simple, symmetric encryption. I am not trying to solve a larger problem with public/private keys here.   For the purpose of better testing, I am currently serving uncompressed js files you can inspect. The main crypto work is done in /js/dev/services/crypto.js. Thanks for looking and please let me know what YOU would do differently for this scope of project. I really do want to learn from people smarter than me :)"
crypto,2oop9c,phyzome,3,Mon Dec 8 21:29:51 2014 UTC,"I am new(er) to crypto and have built this to strech my imagination and learn at the same time.   And because of this, your site needs a big ol' disclaimer. Anything else is deceptive.  Make up your mind: A) Learning project or B) product intended to be actually secure.  The feedback you get from those two will be different."
crypto,2oop9c,disclosure5,1 point,Wed Dec 10 01:01:51 2014 UTC,"I've said this about CryptoJS several times before over in other subreddits - the default ""how to encrypt using AES"" tutorial appears, to a person who doesn't want to spend days reading JavaScript source, to use AES-CBC without any form of MAC. Whilst I'm happy to be wrong about this, I've said it several times and only ever received responses arguing why it wouldn't be necessary.  In fact, there was actually an Issue logged to ensure a padding oracle exists: https://code.google.com/p/crypto-js/issues/detail?id=32  It absolutely is necessary, so I'd recommend either confirming the status of this, or bundling one into your code. CryptoJS does have an HMAC function."
crypto,2oop9c,phyzome,1 point,Tue Dec 9 02:45:38 2014 UTC,"Thank you for advice! I do see the benefit of MAC in the case of transmitting plain or inspectable date (like the Base64-encoded claims of a JWT), but I would think that an AES encrypted message would not benefit from MAC since the act of successfully decrypting it would mean that it could not have been tampered with. I am more than happy to be wrong about my novice understanding of this. If you have an example of how/why AES should have a MAC with it, I would love you learn."
crypto,2oop9c,disclosure5,3,Tue Dec 9 18:31:31 2014 UTC,"I would think that an AES encrypted message would not benefit from MAC since the act of successfully decrypting it would mean that it could not have been tampered with.   Encryption is not authentication. Why, just the other day someone posted a link here about tampering with executables on an encrypted hard drive."
crypto,2oop9c,TNorthover,2,Wed Dec 10 00:54:22 2014 UTC,"but I would think that an AES encrypted message would not benefit from MAC since the act of successfully decrypting it would mean that it could not have been tampered with   I will link you to my working padding Oracle, which actually exploits that belief to break AES.  https://github.com/technion/matasano_challenge/tree/master/set3/chal17"
crypto,2oop9c,pint,1 point,Tue Dec 9 21:59:48 2014 UTC,"If you know part of the message and there's no authentication, you can change that part to say whatever you want in AES-CBC. The cost is that other parts of the message become corrupted, but in many cases that doesn't matter.  Someone reading test may well just skip over a few bits of nonsense thinking it was a glitch; many file formats for computer-consumption can tolerate a certain level of corruption without necessarily raising any flags. You could probably hijack an executable file, for example.  If you've not heard of them already, a company called Matasano has designed a bunch of cryptanalysis problems: http://cryptopals.com/. It goes through all kinds of reasonably realistic attacks on carelessly implemented systems, including this. I thoroughly recommend it."
crypto,2oop9c,Uncaffeinated,1 point,Tue Dec 9 21:21:35 2014 UTC,Thank you for the helpful answer! Very helpful in helping me understand more depth to the problem.
crypto,2oop9c,pint,1 point,Wed Dec 10 21:56:07 2014 UTC,"""i want help and advice, i'm novice""  ""you need to use authenticated encryption""  ""no i don't think i need that"""
crypto,2oop9c,daveime,1 point,Wed Dec 10 09:32:55 2014 UTC,I think I was pretty clear in conveying my understanding while being open to being wrong. I only needed more clarification as others have provided to help me understand and move my thoughts in the right direction.
crypto,2oop9c,pint,1 point,Wed Dec 10 18:48:11 2014 UTC,"One fundamental issue with JS crypto is that it's impossible to ensure resistance to timing attacks. For something like AES, you really want to write it in assembly, or failing that, low level C."
crypto,2oop9c,Uncaffeinated,1 point,Tue Dec 9 04:19:38 2014 UTC,"okay, i'm not going to check the source code. but it really involves implementing AES in js? i hope not."
crypto,2ok4pa,hjdfg,9,Sun Dec 7 16:33:30 2014 UTC,"It's not so much the reflector in itself, but the fact that one was used at all – the whole rotor+reflector apparatus was designed in such a way that self-encryption is impossible. According to the patent application this was deliberate to allow the enigma to be able to encrypt and decrypt without changing modes, and with much less parts. This can be seen in the schematics: There was only one tri-state switch for input keys and output lamps, which cut down the part count. Allowing self encryption would have needed a more complex layout, and thus made it more expensive, and would have made operation more complex (patent application, page 2, ll. 45ff):   Designing the terminating rotor as reflector and the contact buttons as toggle switches yields the advantage that the patented machine does not require a toggle, which was until now needed to switch from encrypting to decrypting and vice versa.   It was erroneously believed that the ""doubling"" of permutation rounds would offset the reduced security. Tellingly, there is no attempt to justify this belief in the patent application."
crypto,2ok4pa,Creshal,8,Sun Dec 7 17:03:48 2014 UTC,"It took me a long while to wrap my head around that one, too.   Because the electricity has to travel through the rotors not once but twice (because there is a reflector) and because that electricity can't travel back on or cross the first path (that would be a short circuit) there is no way any given letter can be returned as itself."
crypto,2ok4pa,skintigh,7,Mon Dec 8 05:14:51 2014 UTC,"tl;dr: If you walk forward, change direction, and walk backwards, you will never end up at your original location -- no matter how far you walk.    Here's the way I think about it. Suppose you have a random cipher:  ABCDEFGHIJKLMNOPQRSTUVWXYZ YPUZEKINCRSQWLAFDVMJXTBOHG   The pairings are random. Letters can become different letters (A -> Y) or they can become the same letter (E -> E).  Time for a simple question: what does this do?   Choose a letter: T Encrypt it: encrypt(T) = J Decrypt it: decrypt(J) = ?   It's obvious: you always end up with the same letter that you start with.  But what happens if we add an extra step?   Choose a letter: T Encrypt it: encrypt(T) = J Add one to it: J + 1 = K Decrypt it: decrypt(K) = ?   This time, you never end up with the same letter you start with, because:   J is the only letter that decrypts to T. Step 3 always changes the letter.   Now you can see how the Enigma is flawed:   Type a letter: T Encrypt it using a plugboard and three rotors: J Use a reflector that always changes the letter: K Decrypt it using three rotors and a plugboard: ?   Whatever the result is, it's not going to equal the input."
crypto,2ok4pa,mr_bitshift,0,Sun Dec 7 20:49:13 2014 UTC,"Start at the north pole, walk to the south pole, turn, walk back to the north pole :p  You never expect the sphere!"
crypto,2ok4pa,Natanael_L,1 point,Mon Dec 8 22:00:42 2014 UTC,"Fair enough. :)  In this example, the Enigma circuitry is some guy walking on an infinite geometric plane."
crypto,2ok4pa,mr_bitshift,2,Mon Dec 8 23:46:31 2014 UTC,"Assume that a letter is encrypting to itself.  The electrical signal it sends out has to take a path both forward and back through the rotors.  In order for it its signal to return to ""itself"", electricity would have to travel both forward and backward along the same path, since on the backward journey it has to end up on the original letter - which has to be the identical journey that that letter sent the signal out on.  Electricity can't travel forward and backward on itself at the same time.  Therefore our assumption is wrong."
crypto,2ojbtj,TheMerovingian,8,Sun Dec 7 08:20:30 2014 UTC,"The socialist millionaire protocol achieves this and the protocol is zero knowledge, i.e. aside from the parties that know the secret (password) nobody else can learn any information about it. This admits weak (low entropy) passwords. This is what OTR does for mutually authenticating two parties. Wikipedia has a description of the protocol but I think the OTR paper by C. Alexander and I. Goldberg do a better job of explaining it (section 4).  EDIT/addendum:  To use this protocol as part of a larger protocol which provides confidentiality you could:   Bootstrap communication using anonymous diffie-hellman exchange to agree on a key for encrypted communication. Further communication is encrypted under the DH key. Perform mutual authentication using socialist millionaire protocol, combining the common secret and shared DH key with a function (a hash function is fine, but even concatenation will do), i.e. SHA256(g^xy || common_secret). This will demonstrate that the communicating parties know both the common secret and the shared DH key. If (1) was MITM then the protocol will fail and both parties will learn nothing about the DH key and secret, which is a good reason to back out completely.  Recommended: add perfect forward secrecy to the protocol."
crypto,2ojbtj,cunttard,1 point,Sun Dec 7 09:21:33 2014 UTC,"I had thought of pretty much what the OP conceived a while ago, with an additional point: the number of rounds of the hash function would increase with time (or have additional layers of stronger algorithms), mitigating the problem of ageing hash functions with Moore's law. Is this possible with the protocol you've suggested/currently done?  Why do we still have to send passwords to servers? (i.e. why isn't this more widely adopted?) I think specially some browser-sided verification that a protocol like this is in the works (and the password is not being sent plain text) would relieve users of fear of reusing passwords across websites, which currently (annoyingly) requires a tons of different passwords for services you don't trust so much/essential services (e.g. games vs banks, primary email)."
crypto,2ojbtj,darkmighty,2,Mon Dec 8 11:27:25 2014 UTC,"I had thought of pretty much what the OP conceived a while ago, with an additional point: the number of rounds of the hash function would increase with time (or have additional layers of stronger algorithms), mitigating the problem of ageing hash functions with Moore's law. Is this possible with the protocol you've suggested/currently done?   It is important to protect the storage of passwords on the server-side (and the client will need to derive the same hash in order to do so). This would be done using scrypt or pbkdf2.  However regardless of how the server stores the common secret (as a secure hash or in plaintext), it is important to emphasise that an adversary will learn absolutely nothing about the secret during an execution of the socialist millionaire protocol. The adversary is left having to either (1) steal the secret from either party or (2) impersonate the party during the protocol execution, i.e. an on-line attack.   Why do we still have to send passwords to servers? (i.e. why isn't this more widely adopted?) I think specially some browser-sided verification that a protocol like this is in the works (and the password is not being sent plain text) would relieve users of fear of reusing passwords across websites, which currently (annoyingly) requires a tons of different passwords for services you don't trust so much/essential services (e.g. games vs banks, primary email).   I would simply say standards. I think tcpcrypt is attempting to address this problem, but I've not looked into the literature myself. Also I should say I really don't know, I'm an amateur at pretty much everything :).  Regarding why you should use a different password for every service, simply because you cannot trust the service provider to protect the secret correctly. You should assume the worst case evidenced by all the password hacks (linkedin, adobe, etc.) in the past few years. If an attacker can compromise one service and learn your password, it can has access to all your other services. Hence using a distinct password per service is the best approach. With the advent of lastpass, keypass, and other similar products -- managing secrets is finally becoming surprisingly easier."
crypto,2ojbtj,cunttard,2,Mon Dec 8 12:12:03 2014 UTC,with one added problem though... do you trust your password store? :P
crypto,2ojbtj,darkmighty,1 point,Mon Dec 8 12:44:53 2014 UTC,"I was referring to the case where the ""secret database"" is compromised, exactly like in the adobe/linkedin/... cases: can this algorithm support a hash function that gets progressively harder as time goes on?  I think the major advantage in this case is not only no third party gains information, or MITM is not possible, but the server itself wouldn't know the actual password, only a (salted) hash initially provided by the user.   Additionally, if this hash then gets pregressively harder to crack, users get to worry a lot less about database compromises."
crypto,2ojbtj,angryfuck,1 point,Mon Dec 8 13:12:01 2014 UTC,"I was referring to the case where the ""secret database"" is compromised, exactly like in the adobe/linkedin/... cases: can this algorithm support a hash function that gets progressively harder as time goes on?   Sure socialist millionaire protocol (SMP) is agnostic to how the common secret is determined. You bake whatever you want into the protocol, it can include a derived value if necessary.  However an adversary which steals the secret store can impersonate (MITM) both parties in SMP since the derived values are now the common secret between them.  Edit: To clarify what I meant about an adversary impersonating, I specifically meant in the context of SMP among the parties, since the common secrets are now compromised."
crypto,2ojbtj,darkmighty,1 point,Mon Dec 8 19:41:49 2014 UTC,"But in this case impersonation isn't relevant. The adversary can't impersonate the user on other services since the chosen salt for each would be different; impersonation ability at the compromised service is already a given, and would stop once the compromise stops (and user requests a new password)."
crypto,2ojbtj,angryfuck,1 point,Mon Dec 8 20:40:58 2014 UTC,"impersonation ability at the compromised service is already a given   That's what I was trying to articulate. I was just being explicit. Otherwise, yes, you're correct."
crypto,2ojbtj,xnyhps,6,Mon Dec 8 20:46:03 2014 UTC,"If you want a pointer on how a good existing protocol out there, check out SCRAM-SHA-1. It has:   Mutual authentication. Client and server can both store only hashes. Stealing the hash stored on the server does not allow you to authenticate as a client. Configurable number of hashing rounds.   I see you want to bootstrap your encrypted communication from the authentication. You can't do that with SCRAM-SHA-1, but you can use channel binding (SCRAM-SHA-1-PLUS), which means you not only compare the passwords, but also some unique attribute of the TLS connection."
crypto,2ojbtj,MrMasterplan,7,Sun Dec 7 09:25:20 2014 UTC,Without server authentication your method is useless no matter how good your protocol is. Mostly if someone is able to intercept your traffic then they can also inject traffic. Without server authentication there is nothing stopping the attacker from injecting JavaScript that will send him the plain text password.
crypto,2ojbtj,MrMasterplan,1 point,Sun Dec 7 12:10:59 2014 UTC,"You're right, that is a very insightful comment. A man-in-the-middle attack would be easy. But in all honesty, that problem is not solved with SSL either - if DNS is compromised."
crypto,2ojbtj,rya_nc,10,Sun Dec 7 13:27:42 2014 UTC,"But in all honesty, that problem is not solved with SSL either - if DNS is compromised.   What do you mean? SSL does normally protect against DNS being compromised. It does have problems if CAs are compromised but not due to DNS by itself."
crypto,2ojbtj,rya_nc,1 point,Sun Dec 7 15:01:55 2014 UTC,"You're right, I got confused for a little bit - Microsoft has, in their Routing and Remote Access, a way to spoof SSL certificates. But the reason they can do so, is because they control your CA's through the Windows network domain. I didn't think of that little detail when I said the above."
crypto,2ojbtj,rya_nc,5,Mon Dec 8 12:36:17 2014 UTC,"As was pointed out by azzzz, SSL does indeed protect against DNS spoofing and all other man in the middle attacks as long as the integrity of the CA system is maintained. To do a man-in-the-middle against SSL you either have to obtain a valid CA secret key or install your own CA on the machine to be attacked, there are no other ways afaik."
crypto,2ojbtj,rya_nc,2,Sun Dec 7 15:32:33 2014 UTC,"First a note: I'm not confident that this is the place to post this, but I'm not sure where to go for this. Also, I have no background in encryption, which is why I'm sure there is a lot wrong with this protocol - all I'd like to know is whether to put any more time in this or to just throw it away and learn about existing protocols that are out there. I just had the idea and drew it up, I'm not heavily invested in this succeeding and I don't have high expectations.  This protocol could be implemented using any form of hashing and symmetrical encryption. Thinking of SHA3 Keccak and AES.  I am aware of two shortcomings:   this does not verify authenticity of the server, there may be a way to implement that this does transmit the password salt in plain text, but this salt is short-lived (renews after successful authentication), and the only way to know it's a real salt, is by witnessing a successful authentication."
crypto,2ojbtj,na85,6,Sun Dec 7 08:23:28 2014 UTC,"I think there must be something missing here. What does the server store? How does it verify the client's response? It looks like a fairly straightforward challenge-response protocol, and usually having whatever the server stores allows you to authenticate if you have it.  I think SRP and J-PAKE both do what you are trying to do better."
crypto,2ojbtj,theatrus,1 point,Sun Dec 7 08:38:53 2014 UTC,"The server stores   username salted password hash, and salt   and verifies the client's response by comparing:  client's (salted pw hash + session salt) hash with server's (salted pw hash + session salt) hash  I will check out SRP and J-Pake, I'm curious to see how they work.  I read up a little on MS-CHAP and understand what's wrong with it also, but of course that doesn't make this one any better."
crypto,2ojll2,matessim,1 point,Sun Dec 7 11:43:12 2014 UTC,"Intel's Microcode is encrypted and signed with regular off the shelf crypto components (2048-bit RSA, SHA-1 previously and SHA-2 now have been rather rigorously deduced, no idea if there is further encryption on the microcode payload since you'd need millions of dollars of xray machines, laser drills and die wiring bonding machines to stick a probe in the right part of the chip as it's happening), and the public components of the microcode updater have already been well analyzed. Intel has incredibly smart people working on protecting this code; the payload is even verified while encrypted such that the plaintext is never available off-chip outside of Intel's doors.  You're not going to get much further without knowing a whole heap of details that Intel's going to be protecting as trade secrets, or unless you have some kind of NSA-scale RSA factoring rig. Oh, and they apparently rotate out signing keys at some frequency, so defeating it for one CPU generation doesn't do you much good in general."
crypto,2ojll2,hackingdreams,1 point,Mon Dec 8 02:32:56 2014 UTC,"Intel's Microcode is encrypted and signed with regular off the shelf crypto components (2048-bit RSA, SHA-1 previously and SHA-2 now have been rather rigorously deduced, no idea if there is further encryption on the microcode payload since you'd need millions of dollars of xray machines, laser drills and die wiring bonding machines to stick a probe in the right part of the chip as it's happening), and the public components of the microcode updater have already been well analyzed. Intel has incredibly smart people working on protecting this code; the payload is even verified while encrypted such that the plaintext is never available off-chip outside of Intel's doors.   Pretty much the same points i raised in the article."
crypto,2oi5vu,freedom-boasting,2,Sun Dec 7 00:03:14 2014 UTC,"Yeah I think you're solving the wrong problem. Keep your active Linux in a VM under Windows. Use VMWare Player's Unity to flatten apps, share folders. Much easier to maintain and use."
crypto,2oi5vu,aydiosmio,2,Sun Dec 7 06:47:57 2014 UTC,"Do you have a specific goal or problem you're trying to address?  I'm unconvinced that a plausibly deniable hidden operating system is a useful feature. For it to be useful an adversary would need to exist that will not accept ""I forgot the password"" as an answer but will believe ""I do not have a hidden filesystem"". As an example, in the UK there is a law requiring one to disclose the password. If they think the user has a hidden filesystem they can require disclosure of that as well, and the user cannot prove that it doesn't exist."
crypto,2oi5vu,rya_nc,2,Sun Dec 7 01:41:46 2014 UTC,"Simply put: (avoiding the debate over ""plausible deniability"")  I would like to be able to say that I don't use windows. If I'm being asked to give up the password, I'll give up the password and anyone will see it is consistently linux."
crypto,2oi5vu,rya_nc,1 point,Sun Dec 7 01:53:31 2014 UTC,"I would be very suspicious of someone who claimed to be using Truecrypt only for Linux. AFAIK, LUKS is easier to set up (supported by the installer) and has better integration. Also, ISRT that the outer volume when using a hidden FS/OS must be FAT which would make this an even further red flag.  If someone trying disk forensics isn't in the threat model, having grub boot into linux without prompting by default might work."
crypto,2oi5vu,rya_nc,1 point,Sun Dec 7 02:02:49 2014 UTC,"Good points. Outer volume doesn't necessarily need to be FAT if you're willing to give up 50% disk space.   For threat model lets imagine that disk forensics is in the threat model, for a journalist or independent contractor working on behalf of someone else in a country very far away from the protection of embassies/government.   The adversary knows LUKS does not provide hidden volumes, therefore TC explains booting a hidden Linux volume. If pressed, the password for a Hidden Linux volume can also be given up. So the hidden linux partition will serve as a second decoy."
crypto,2oi5vu,rya_nc,2,Sun Dec 7 02:20:37 2014 UTC,Can you do two hidden Linuxes and virtualize windows in the second hidden Linux?  Are you willing to assume internet access is fairly available? There are less rube-goldbergesque solutions if so.
crypto,2oi5vu,xJoe3x,1 point,Sun Dec 7 02:36:47 2014 UTC,In that case the hidden Linux partition when decrypted under pressure will also reveal the VM.
crypto,2oi5vu,rya_nc,2,Sun Dec 7 02:56:24 2014 UTC,two hidden linux partitions with different passwords
crypto,2oi5vu,xJoe3x,1 point,Sun Dec 7 08:59:59 2014 UTC,One of those is much more reasonable of a claim than the other.  I am not convinced such an adversary does not exist.
crypto,2oi5vu,rya_nc,1 point,Mon Dec 8 17:25:13 2014 UTC,"""If you don't have a hidden filesystem why are you using software that supports them rather than the perfectly fine built in encryption software?"""
crypto,2oi5vu,xJoe3x,1 point,Mon Dec 8 21:02:49 2014 UTC,"No FDE provided in home editions of windows. (bitlocker) This is supported and free. File encryption can leave data around. Lack of trust for default encryption software. Preference of this interface.  All of these are reasonable.  I have truecrypt on my home PC because I prefer its interface and cost, not even using its hidden functionality."
crypto,2oi5vu,TheScriptKiddie,1 point,Mon Dec 8 22:06:45 2014 UTC,"OP wants to use Linux as the primary OS, though."
crypto,2oi5vu,aydiosmio,1 point,Tue Dec 9 00:48:50 2014 UTC,"Then go with it is easier to setup or has a preferred interface.  Or if you dont have a computer oriented background, claim that someone told you about truecrypt and you did not even know about anything else."
crypto,2oi5vu,pred,0,Tue Dec 9 01:43:53 2014 UTC,"Don't use truecrypt, it is insecure. Don't use bitlocker either, it is backdoored."
crypto,2oi5vu,aydiosmio,5,Sun Dec 7 04:19:56 2014 UTC,"TrueCrypt is fine, there is zero evidence to conclude that it is insecure. If you want something maintained, use the derivative  Veracrypt.  https://veracrypt.codeplex.com/"
crypto,2oi5vu,pred,0,Sun Dec 7 06:46:05 2014 UTC,Except for the devs coming out and saying that the newest version is.
crypto,2oi5vu,aydiosmio,3,Sun Dec 7 08:22:24 2014 UTC,"Who's that then?  I've followed the whole situation very closely. While I agree with a lot of the improvements the VeraCrypt project has made, the lack of them is not detrimental to the security of TrueCrypt.  There was a lot of crazy speculation, coming mostly from people who had no business offering an opinion on the matter. If you carefully examine the evidence, there's nothing to indicate TrueCrypt was compromised in any way."
crypto,2oi5vu,xJoe3x,-1,Sun Dec 7 08:26:32 2014 UTC,"The first line from their homepage:   WARNING: Using TrueCrypt is not secure as it may contain unfixed security issues   Here I'm assuming 1) that the devs maintain that page, and 2) that we equate ""not secure"" and ""insecure""."
crypto,2oi5vu,DemandsBattletoads,3,Sun Dec 7 09:59:35 2014 UTC,"So, you agree there's no evidence there's any actual detrimental problems with TrueCrypt?  Seriously, this has been debated endlessly and the phrase you're seeing right past is ""may contain unfixed security issues"". The TC devs stopped maintaining it, ergo, any yet unfound issue would not be resolved.  VeraCrypt has addressed a few issues that came up subsequently, like I said."
crypto,2oi5vu,Saicotic,1 point,Sun Dec 7 10:25:45 2014 UTC,That is some pretty default language for no longer maintained.  That does not mean it is broken in any way.
crypto,2oi5vu,Saicotic,2,Mon Dec 8 17:26:24 2014 UTC,Bitlocker backdoored?
crypto,2oi5vu,aydiosmio,3,Sun Dec 7 08:00:18 2014 UTC,objectively incorrect. 7.1a has been shown to be reasonably secure with only minor security flaws.
crypto,2oi5vu,amtal-rule,2,Sun Dec 7 00:50:02 2014 UTC,"the unknown are what is worrying (sic)   Gee, if only TrueCrypt were open source! That would let anyone check the entire program for flaws and backdoors, just like the audit committee is doing now! Oh, wait.   no support or hope of security fixes   There are already multiple forks of TrueCrypt, since, y'know, it's open source and all. I'm personally waiting to see which of them takes off, but there will be no lack of hope for improvements and bug fixes."
crypto,2oi5vu,avapoet,7,Sun Dec 7 04:15:09 2014 UTC,OpenSSL's vulnerabilities were exploitable because of a large protocol stack that's remotely accessible  Container encryption is far harder to sabotage.
crypto,2oi5vu,Natanael_L,2,Sun Dec 7 05:22:13 2014 UTC,"Known by whom, problematic in what way?  http://istruecryptauditedyet.com/ indicates that the implementation has been audited, and a cryptanalysis is on the way."
crypto,2oi5vu,molo1134,3,Sun Dec 7 05:47:13 2014 UTC,Also it really seems like they were forced to give their keys to the government    Sorry which keys?
crypto,2oeoue,take_whats_yours,4,Fri Dec 5 22:46:21 2014 UTC,"Since your focus is on US (where I suppose most of the 90s crypto action happened), you should look into crypto wars round 1, Bernstein vs USA and the clipper chip.  Due to the restriction on export, you should also check out how e.g. Netscape weakened their encryption.  I don't know if there are hard datapoints in the above suggestions, but you can, say, look at browser market share (since that would probably be the most widely used thing that contained crypto)"
crypto,2oeoue,DoWhile,2,Sat Dec 6 08:06:54 2014 UTC,"A large focus of the study is on export restrictions and crypto wars debates  so Bernstein, Karn, Clipper etc. are analysed quite extensively. By ""Netscape weakened their encryption,"" I assume you mean lowering the key length in the SSL scheme in their browser to 40 bits in 1996? This is an excellent example of export regulations consequentially restricting domestic implementation and usage, despite their foreign policy directive.   Really I'm trying to underestand how usage developed after export controls were liberalised in 2000. I guess if I can get some data on Internet users or browser share going back that far, I can get some indication of how widely crypto was being implemented by default.  Unfortunately to get data on OpenSSL usage further back than 2012 from this website, they want me to purchase a plan."
crypto,2oeoue,jiannone,5,Sat Dec 6 19:58:06 2014 UTC,I think one data point for PGP use might be to look at public key servers like pgp.mit.edu and others to see if the number of active and expired keys have changed over time.
crypto,2oeoue,jiannone,1 point,Sat Dec 6 18:24:08 2014 UTC,"Thanks for the idea. I've found these graphs charting the number of OpenPGP keys. Only goes back to 2011 unfortunately but everything is useful. I can't see any way to view the table data but looking at the daily bar chart, do you have any idea why so many keys were added on one day in January of this year? Just under 7000 in one day when its usually less than 1000"
crypto,2oeoue,R-EDDIT,1 point,Sat Dec 6 20:06:56 2014 UTC,You'd have to talk to the administrators of the server.  That large a lift is probably a result of maintenance or migration.
crypto,2oeoue,R-EDDIT,3,Sat Dec 6 20:40:11 2014 UTC,"Netcraft conducts surveys on SSL servers, and the EFF' SSL Observatory would also be useful.    To me one of the biggest responses specifically to the snowden leaks is the encryption of SMTP using starttls, which directly (but arguably only) addresses passive eavesdropping.  I haven't seen good comprehensive statistics, but my own checks of the to 30 ISP/webmail providers showed 3 using starttls shortly after snowden and almost all now."
crypto,2ocxl7,quantum88,8,Fri Dec 5 12:38:49 2014 UTC,"I think if you don't put in backdoors in the first place, you can't be compelled to give anyone the key."
crypto,2ocxl7,fiftypoints,5,Fri Dec 5 16:48:55 2014 UTC,"My thoughts exactly. Also, if they keep backdoors in our products, we will always be vulnerable and not just to the nsa.. yes, easy to track activities like they like it, but there is no such thing as a NSA backdoor, just back doors. Days before a nsa known backdoor for the iOs was presented at the CCC30c from the Snowden Leak, the same back door was found independently by 2 attendees of the CCC... so its just a matter of time before people with ill intent will find these back doors and exploit them..."
crypto,2ocxl7,blacksheepghost,5,Fri Dec 5 17:12:20 2014 UTC,I'm glad that someone is clarifying what the All-Writs Act really does and does not do. Hopefully this will dispel many of the fears surrounding it.
crypto,2ob8d2,hidden-markov,9,Thu Dec 4 23:54:18 2014 UTC,"For anyone who's never read a math paper before, I found their mental poker paper quite a fun and easy read: http://people.csail.mit.edu/rivest/ShamirRivestAdleman-MentalPoker.pdf  There are one or two small spots where it gets more mathy, but even if you get lost at those parts, the rest still makes sense."
crypto,2ob8d2,AnythingApplied,2,Fri Dec 5 05:47:04 2014 UTC,"Good read, thanks"
crypto,2ob8d2,Blackmirth,24,Fri Dec 5 09:55:53 2014 UTC,"That's not ""P = NP"", it's ""P ~= NP""."
crypto,2ob8d2,VorpalAuroch,11,Fri Dec 5 01:50:09 2014 UTC,On this alternative host of the picture (higher res) it looks a lot like P = NP. Is there somewhere either of them makes a comment about this?
crypto,2ob8d2,memoryspaceglitch,2,Fri Dec 5 20:36:53 2014 UTC,"You are correct, it's pretty clear there."
crypto,2ob8d2,VorpalAuroch,2,Fri Dec 5 22:02:32 2014 UTC,It's probably a smart joke.
crypto,2ob8d2,fletom,2,Fri Dec 5 23:38:19 2014 UTC,"Right. If we find an answer to this question, most people expect that it will be P != NP."
crypto,2ob8d2,pint,2,Fri Dec 5 15:05:39 2014 UTC,"OK, makes sense. Didn't think of that, because I've never seen this notation for ""not equals""  STILL A BREAKTHROUGH."
crypto,2ob8d2,adapter9,7,Fri Dec 5 12:50:37 2014 UTC,"why would you ever use it on a blackboard? what's wrong with ≠? i thought ~= is something like ""approximately equals"", which did not make a whole lot of sense"
crypto,2ob8d2,pint,3,Fri Dec 5 13:07:36 2014 UTC,"~= is used in computer languages that don't have ≠, like how C++ uses !="
crypto,2ob8d2,adapter9,5,Fri Dec 5 16:25:15 2014 UTC,"but on a blackboard, you have any character you need"
crypto,2ob8d2,Ar-Curunir,3,Fri Dec 5 17:00:27 2014 UTC,But they are programmers and may be in the habit of writing ~= as part of their pseudocode
crypto,2ob8d2,JohnDoe_85,2,Fri Dec 5 17:06:42 2014 UTC,"They are not programmers by trade, they are mathematicians. Makes it even more confusing why they decided to use this notation."
crypto,2ob8d2,VorpalAuroch,2,Fri Dec 5 19:54:32 2014 UTC,"But if you are used to typing in code every day, your brain may well rewire so that you use ~= instead of ≠ in normal conversation. Like how many people still type == when = is sufficient for normal online conversation."
crypto,2ob8d2,NewToBikes,1 point,Fri Dec 5 17:07:48 2014 UTC,"Which languages? That would be a really weird, since ""~="" has a separate mathematical meaning. And Google turns up nothing."
crypto,2ob8d2,Finnnicus,2,Fri Dec 5 18:32:52 2014 UTC,"It means ""not equal to"" in Matlab / Scilab."
crypto,2ob8d2,adapter9,3,Fri Dec 5 18:56:19 2014 UTC,Also lua
crypto,2ob8d2,VorpalAuroch,1 point,Fri Dec 5 22:37:26 2014 UTC,Matlab
crypto,2ob8d2,NewToBikes,2,Sun Dec 7 06:37:23 2014 UTC,'Approximately equals' and 'potentially equals' aren't all that conceptually distant.
crypto,2ob8d2,VorpalAuroch,1 point,Fri Dec 5 18:46:27 2014 UTC,"~ is the bitwise operator for NOT. Therefore, ~= is ""not equal""."
crypto,2ob8d2,PubliusPontifex,2,Fri Dec 5 18:57:12 2014 UTC,"That's not 'not equals', it's a notation that can be used to mean 'approximately equals', 'roughly equals', or basically any variation expressing uncertainty and approximation."
crypto,2o753a,tom-md,3,Wed Dec 3 22:20:23 2014 UTC,Looking forward to the FHE implementation!
crypto,2oajbf,AndersLindman,7,Thu Dec 4 20:22:48 2014 UTC,"I can't really tell if you're trolling at this point, but I'll bite anyways.  Many ""cryptographically secure building blocks"" you mention are used because they have been mathematically proven to be secure.  It is true that other cryptographic tools aren't entirely based on mathematical proofs. For example, there's no mathematical proof that factoring integers isn't possible in polynomial time. This is probably because it's really hard to prove that something is impossible. This is part of the P versus NP problem, one of the greatest unsolved problems in mathematics.  However, we do know that we've been relying on integer factorization being hard for a long time, and still nobody has proved otherwise, despite enormous motivation to do so. That's a fact that makes algorithms like RSA incredibly useful.  If you think that cryptography is unscientific or not real, well, I'll just sit here while you transfer all the money out of my bank account using its TLS-secured web interface."
crypto,2oajbf,fletom,3,Thu Dec 4 20:59:35 2014 UTC,"Other than a one-time pad, what else has been proven?  Factoring == hard is an assumption, and an assumption that has sprung some leaks lately (albeit in extremely limited ways). RSA has been left out of the NSA Suite B recommendations in favor of ECC, and Russia recommends that as well.  Has AES been proven to be secure? Or can it only be proven to have a strength of 2n barring new advances?"
crypto,2oajbf,skintigh,3,Thu Dec 4 23:32:57 2014 UTC,"Has AES been proven to be secure?    No. Proving AES is unconditionally secure would imply One-Way Functions exist which further implies P != NP.  So basically proving AES is unconditionally secure will net you at minimum $1000000. This is true about most cryptographic primitives.  On that note, we believe with overwhelming confidence1 that AES is very much a family of PRPs.  It is worth reading the design of rijndaal.  1: After years of cryptanalysis and public scrutiny."
crypto,2oajbf,cunttard,4,Thu Dec 4 23:55:31 2014 UTC,"Gotta love an intelligent and insightful answer from cunttard  Oh, reddit"
crypto,2oajbf,skintigh,3,Fri Dec 5 02:31:54 2014 UTC,"Shamir's Secret Sharing Scheme and a bunch of other similar threshold cryptography schemes. Its secure for the same reason as XOR / OTP, but is also a neat twist to the the problem in that it essentially functions as a form of error correction at the same time when you have access to more pieces than the minimum threshold is set to. Prevents bruteforce completely for as long as the attacker has less shares than what the threshold is set to."
crypto,2oajbf,Natanael_L,3,Fri Dec 5 00:17:37 2014 UTC,Carter-Wegman authentication is unconditionally secure.
crypto,2oajbf,I-o-o-I,2,Fri Dec 5 04:39:49 2014 UTC,"P versus NP problem:       The P versus NP problem is a major unsolved problem in computer science. Informally, it asks whether every problem whose solution can be quickly verified by a computer can also be quickly solved by a computer. It was essentially first mentioned in a 1956 letter written by Kurt Gödel to John von Neumann. Gödel asked whether a certain NP complete problem could be solved in quadratic or linear time.  The precise statement of the P=NP problem was introduced in 1971 by Stephen Cook in his seminal paper ""The complexity of theorem proving procedures""  and is considered by many to be the most important open problem in the field.  It is one of the seven Millennium Prize Problems selected by the Clay Mathematics Institute to carry a US$1,000,000 prize for the first correct solution.    Image i - Diagram of complexity classes provided that P ≠ NP. The existence of problems within NP but outside both P and NP-complete, under that assumption, was established by Ladner's theorem. [1]     Interesting: NP-hard | Conjecture | NP-complete | Computational complexity theory   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2oajbf,autowikibot,3,Thu Dec 4 21:00:11 2014 UTC,"It is no different with maths, the fundamentally hard problems are essentially axioms.  Within the crypto community itself, provable security has critics."
crypto,2oajbf,cunttard,2,Thu Dec 4 20:54:16 2014 UTC,"Axiom:       An axiom or postulate is a premise or starting point of reasoning. As classically conceived, an axiom is a premise so evident as to be accepted as true without controversy.  The word comes from the Greek axíōma (ἀξίωμα) 'that which is thought worthy or fit' or 'that which commends itself as evident.'   As used in modern logic, an axiom is simply a premise or starting point for reasoning.  Axioms define and delimit the realm of analysis; the relative truth of an axiom is taken for granted within the particular domain of analysis, and serves as a starting point for deducing and inferring other relative truths. No explicit view regarding the absolute truth of axioms is ever taken in the context of modern mathematics, as such a thing is considered to be an irrelevant and impossible contradiction in terms.     Interesting: Axiom schema of specification | Axiom of dependent choice | Axiom of extensionality   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2oajbf,autowikibot,2,Thu Dec 4 20:54:49 2014 UTC,"What would you otherwise base them on? We have to start somewhere, and better to have some sense of safety than none at all."
crypto,2oajbf,Ar-Curunir,2,Thu Dec 4 22:15:49 2014 UTC,"""it looks scrambled and random enough that nobody else can break my scheme"" is a valid (although stupid) starting point."
crypto,2oajbf,cunttard,2,Thu Dec 4 22:57:27 2014 UTC,"But that doesn't engender any sort of trust either, does it?"
crypto,2oajbf,Ar-Curunir,2,Thu Dec 4 23:08:45 2014 UTC,"Clearly, just saying its a popular sentiment among the amateur and misguided."
crypto,2oajbf,cunttard,1 point,Thu Dec 4 23:21:14 2014 UTC,"I was playing a bit of a devil's advocate. But I do think the ""provably secure"" stuff seems somewhat shaky from my amateur perspective."
crypto,2oajbf,Ar-Curunir,3,Thu Dec 4 22:57:58 2014 UTC,"Well tons of really smart people have tried to break these assumptions one way or another, so my reasoning is that I'd rather trust them than rely on no guarantees."
crypto,2oajbf,shiny_thing,2,Thu Dec 4 23:08:12 2014 UTC,"I agree that the term ""provable security"" can certainly appear to be overselling what the results actually state.  The problem is that for someone encountering the term for the first time, it's natural to read it as ""provably secure from first principles"" instead of ""provably secure from some set of assumptions that we have compelling evidence are reasonable"". (Papers that use non-standard assumptions, of course, lose the right to have that implicit ""compelling"").  So yeah, I can see why you might feel either (1) betrayed or (2) like you've unearthed some dirty secret that crypto people are trying to keep buried.  But the term is used with these qualifiers left implicit because when cryptographers talk to each other, they assume the reader/listener will be aware of these issues.  And the approach, despite its flaws, has real value: If I'm building a new crypto algorithm, whether it be an encryption scheme, a MAC, a PRF, a CSPRNG, or a myriad of others, it doesn't need to be subjected to years of expert scrutiny. It just needs a proof that it's about as secure as the underlying blockcipher. It follows that you can trust the new algorithm as much as you trust AES, or the blockcipher of your choosing.  Even when these implicit qualifiers are correctly understood, the system is not without its flaws. Security definitions can fail to capture the desired properties. Models can fail to capture all relevant attacks. And sometimes there are errors in the proofs.  But, on the other hand... no one has really found a better alternative. So, despite its flaws, it's still used. And, despite it's flaws, it's still pretty effective."
crypto,2o2g27,funkspiel56,13,Tue Dec 2 18:26:40 2014 UTC,What is your threat model?
crypto,2o2g27,Uncaffeinated,5,Wed Dec 3 04:25:08 2014 UTC,NoteCipher?
crypto,2o2g27,omnispace,2,Tue Dec 2 18:57:07 2014 UTC,"It's available via F-Droid, which I recommend."
crypto,2o2g27,_Xaph,1 point,Tue Dec 2 20:36:35 2014 UTC,I've tried note cipher but It doesn't work properly.  I have it on my phone but need something for my tablet
crypto,2o2g27,coerciblegerm,2,Tue Dec 2 23:22:44 2014 UTC,"CrocodileNote should work, that's what I've been using on my phone lately. NoteCipher (already suggested) also looks good. I'd say either of those are probably what you're looking for."
crypto,2o2g27,some1-no1,1 point,Tue Dec 2 19:22:44 2014 UTC,I like the looks of this. . What's weird is the F droid repository's don't show up in the app so I have to download from webs pages. . What's weirder is this is a nexus 7 so it shouldn't have problems
crypto,2o2g27,Natanael_L,1 point,Tue Dec 2 23:41:51 2014 UTC,F droid seems to work which is awesome
crypto,2o2g27,some1-no1,1 point,Tue Dec 2 23:43:58 2014 UTC,"I use APG. Although I don't edit the encrypted text too often, so it's not too much of a hassle."
crypto,2o2g27,kiplinght,2,Wed Dec 3 01:05:42 2014 UTC,OpenKeychain is the updated fork. Much easier to use
crypto,2nyvok,tom-md,5,Mon Dec 1 19:39:49 2014 UTC,"I did a quick skim of the code (other than the PRNG fixes) and it looks correct. Not to my style (I would have used a KeyGenerator or SecureRandom for both the AES and the HMAC keys rather than mix and match. I also prefer to use hmac masking as part of my constant-time equals method.)  I know that there is no reason for anyone on the web to trust my code-reviewing, but the author avoided all of the obvious, and at least many of the subtle mistakes."
crypto,2nyvok,Salusa,2,Tue Dec 2 06:29:26 2014 UTC,Thanks for reviewing the code. I'll look at that consistency issue you mentioned. We welcome pull requests if you have a chance!
crypto,2nyvok,SyntaxPolice,2,Tue Dec 2 13:11:45 2014 UTC,"Your right!  The software should also only be coded on custom-self-made hardware created from scratch, because you can't trust Intel not to include backdoors or samsung not to mess with your storage.  And god help you if you use an off-the-shelf keyboard. They could be laced with malware which auto-types faulty code when you aren't looking.  And finally, using the network in any way shape or form is completely out of the question! Secure storage via peer-reviewed print-outs on a custom made printer which are transported via secure transport vehicles. It's the only way to be sure it's safe!  Take ALL the interfaces into account!"
crypto,2nym1f,Charphacy,2,Mon Dec 1 18:20:22 2014 UTC,"At one end of the spectrum, you have unadorned linear congruential generators, which are easy to track, and at the other end you have RNGs like Fortuna that apply a cryptographic hash to a very simply advancing state (state = state * 1 + 1) and are considered secure. So where do we draw the line between secure and insecure…?"
crypto,2nym1f,conradsymes,2,Mon Dec 1 18:23:20 2014 UTC,"The ability to distinguish the output from random noise, the ability to produce random-seeming output efficiently, and the ability to find the internal state of the stream."
crypto,2nym1f,conradsymes,1 point,Wed Dec 3 05:24:45 2014 UTC,Did you actually read the linked question?
crypto,2nym1f,conradsymes,2,Wed Dec 3 06:24:48 2014 UTC,"Yes, but I was answering a different question, specifically:    So where do we draw the line between secure and insecure…?"
crypto,2nym1f,conradsymes,1 point,Wed Dec 3 06:26:48 2014 UTC,"Yes, but I was answering a different question   That question was in the context of a paragraph, which you ignored.  It’s a bit like being asked, “America has a capital city. What is it?”, and answering “‘It’ is a preposition”. The answer might be technically correct, but it is not very helpful.  Even as an answer to the out-of-context question, it’s incomplete. For many secure cryptographic systems, you could in principle guess a key and turn random looking noise into a decrypted message, so the issue is not whether you theoretically able to distinguish the output from random noise (given a NTM), but whether it is feasible to do so in practice."
crypto,2nym1f,conradsymes,1 point,Wed Dec 3 07:07:40 2014 UTC,"That's true, but there are better non-cryptographic random number generators than LCGs, like multiply-with-carry (which has no lattice bias)."
crypto,2nym1f,amtal-rule,1 point,Wed Dec 3 12:12:12 2014 UTC,That’s like having someone ask “What’s the best way to roast a chicken?” and giving the answer “You should make vegetable soup. Being a vegetarian is better!”. It’s not remotely useful to the person asking the question.
crypto,2nzsml,Ineedhelpbad23234,3,Tue Dec 2 00:20:34 2014 UTC,"the problem with full disc enc is that any busybody software messing with the partition table or boot sector will effectively destroy the entire disk. i had this problem with truecrypt when my windows 7 attempted to ""fix"" booting issues. truecrypt saves a copy of the header at the end of the disc, so it can recover it. maybe there is some similar feature in luks. didn't help me with truecrypt though, i lost all the data. it was able to open the volume, but the MFT was all screwed."
crypto,2nzsml,pint,2,Tue Dec 2 09:45:12 2014 UTC,"First step: Create a full, byte-for-byte copy of the flash drive's disk. It's possible there's corruption that is fixable.  I don't know what the next steps are, but you need to do this one at least."
crypto,2nzsml,phyzome,1 point,Tue Dec 2 03:08:32 2014 UTC,Is it possible you wrote the TrueCrypt volume over your LUKS volume? Try mounting the TrueCrypt volume(s) in read-only mode using the embedded backup volume header. You might also want to ask this question on your distro's subreddit.
crypto,2ny9b6,conradsymes,1 point,Mon Dec 1 16:31:52 2014 UTC,Is this a performance question or a security question?  Could you flesh it out just a little more?  Defining 'better' would be a great start.
crypto,2ny9b6,tom-md,1 point,Mon Dec 1 17:56:06 2014 UTC,"Performance, obvious security-wise they are both equal in that they haven't been broken and are unlikely to be so."
crypto,2ny9b6,tom-md,0,Mon Dec 1 18:07:07 2014 UTC,Depending on the hardware and security requirements the use of cache for secret values is critical to the security of the implementation.
crypto,2nugqg,imadeadumbcipher,7,Sun Nov 30 14:45:57 2014 UTC,"Just as a heads up, almost every homegrown cipher can have serious weaknesses revealed as long as you decide to check the output when the input is a string of \x00's. If putting in strings of 0x00s results in non uniform output, you've already got a weak cipher."
crypto,2nugqg,DevestatingAttack,3,Sun Nov 30 19:08:49 2014 UTC,Already done that: http://pastebin.com/7us8rA6s
crypto,2nugqg,emergent_properties,1 point,Sun Nov 30 19:17:15 2014 UTC,Can you explain this in more detail please?
crypto,2nugqg,DevestatingAttack,3,Mon Dec 1 15:15:27 2014 UTC,"People that write their own ciphers tend to test them and design them iteratively, and in the process of doing so, don't test them with input like 0x00. Hobbyists will start writing a base level cipher, testing the output with English text and then start saying ""okay, that looks pretty good"" without trying 0x00s, 0xFF, etc.   If a cipher has non-random looking output for any input, the cipher cannot be semantically secure. Semantic security is usually formulated as a game, where there are two functions - the cipher and a truly random function that maps input to output completely randomly. The game is posed like this: An attacker gives a plaintext to one or the other function (without knowing which is which) and if the attacker can figure out whether they're talking to the cipher rather than the truly random function (with some amount of computational power) then the cipher is not semantically secure.  http://en.wikipedia.org/wiki/Semantic_security"
crypto,2nugqg,autowikibot,1 point,Mon Dec 1 17:27:02 2014 UTC,"Semantic security:       In cryptography, a cryptosystem is semantically secure if any probabilistic, polynomial-time algorithm (PPTA) that is given the ciphertext of a certain message  (taken from any distribution of messages), and the message's length, cannot determine any partial information on the message with probability non-negligibly higher than all other PPTA's that only have access to the message length (and not the ciphertext).  In other words, knowledge of the ciphertext (and length) of some unknown message does not reveal any additional information on the message that can be feasibly extracted. This concept is the computational complexity analogue to Shannon's concept of perfect secrecy. Perfect secrecy means that the ciphertext reveals no information at all about the plaintext, whereas semantic security implies that any information revealed cannot be feasibly extracted   :378-381.     Interesting: Paillier cryptosystem | Goldwasser–Micali cryptosystem | Integrated Encryption Scheme | Initialization vector   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2nugqg,emergent_properties,1 point,Mon Dec 1 17:27:33 2014 UTC,"TIL, thanks."
crypto,2nugqg,PubliusPontifex,7,Mon Dec 1 17:28:00 2014 UTC,"It's a great idea, the only problem is cellular automata tend to have uneven complexity. The whole reason behind substitution/xor ciphers is the complexity is fixed per operation and not dependent on the key or cipher text. The issue here is some combinations of cipher text and key can have weaknesses as the translation is data dependent (modern block ciphers don't have this dependence, the key is merely an xor on a state with a given schedule, then the text is just shuffled along the rounds).  That being said, it's very clever, and could likely be useful in a key scheduling system if bounds on the complexity weakening could be proven."
crypto,2nugqg,PubliusPontifex,3,Sun Nov 30 23:18:49 2014 UTC,This seems like reason why repeating plaintexts encrypt to predictable ciphertexts. Could this be solved with random padding?
crypto,2nugqg,PubliusPontifex,3,Mon Dec 1 07:20:17 2014 UTC,"No, again, you can't put a lower bound on the complexity (the whole point is to effectively add entropy, most block ciphers have a fixed or at least well bounded entropy).  If your cipher has an if/then or while loop in it that isn't constant complexity (or, in the case of cellular automata, has repeating components) you can have weak keys/plaintexts that can compromise the data without the crypto-guy knowing. Random cipher-texts change nothing because the chance for a weak key is unchanged, as key/text weakness is calculated first for random plaintext/keys and then for likely or weak content."
crypto,2nugqg,DemandsBattletoads,3,Mon Dec 1 07:26:08 2014 UTC,"Oh, so the reason why it is not secure is that it has keys that don't really encrypt much, like key consisting of ordered bytes?  That makes sense, thanks."
crypto,2nugqg,TNorthover,3,Mon Dec 1 07:36:06 2014 UTC,"Basically. I mean you can just say 'these are weak keys', but part of the issue is that keys should have some bound of entropy, and the range of 'good key' to 'bad key' is huge here. If keys can be assured by group to be good or bad, and have the bounds computed from that, it makes a much better algorithm (I'm 99% sure this is possible for DCA's, but I haven't done the math personally).  DCA's are really cool math constructs, and really fun to work with, they just might be a bit clever for this particular purpose.  Btw, if you have an internal key IV, say, XOR the keys with a known pad to start, that would fix the 'some keys are known weak', but it would actually just shift the key weakness to a different, less obvious keyspace, which is again why non-deterministic algorithms tend to be frowned upon."
crypto,2nugqg,bitwiseshiftleft,7,Mon Dec 1 07:59:43 2014 UTC,"You may be aware of this already, but crypto is very hard and generally speaking you should never roll your own algorithms unless you know exactly what you are doing. It almost always turn out that there is some fatal flaw that makes the scheme unsuitable for production.  My first thought is brute force. This seems too easy to either try the whole keyspace, or simply try reversing the algorithm to find the key/plaintext since the algorithm is known (you should always assume that an adversary has your code, we learned that the hard way in the 40s)."
crypto,2nugqg,conradsymes,11,Sun Nov 30 15:54:24 2014 UTC,"The obvious key space is the set of permutations of bytes: 256! ~= 21684. No-one is going to be brute forcing that in a hurry.  The diffusion is most worrying in that algorithm. It's not block based and for a message > 1024 bytes, you could twiddle an input and only affect one bit of the input in the last round (of the first byte, say). That gives you key[x] and key[x ^ 128]. You don't know what x is, of course, but I'd be very worried about that kind of information leaking."
crypto,2nugqg,bitwiseshiftleft,3,Sun Nov 30 16:14:42 2014 UTC,"Can you please explain this more? I tried encrypting two strings of lengths 1024 that were different by one bit, and while first few generations were very similar, they gradually became completely different. (Same with longer strings, although sometimes 8192 rounds isn't enough for them to diverge enough)  Have I misunderstood your concern?"
crypto,2nugqg,conradsymes,4,Sun Nov 30 16:58:42 2014 UTC,"The diffusion is what worries me the most about this cipher, too.  Consider how AES works: it xors in the subkey, does a fixed substitution on each byte, and then applies a mixing function.  Using an xor and a fixed substitution is generally more convenient than having a substitution as a key: it makes the key space just a string of bytes instead of a permutation, and it's much better in hardware.  The known structure of the substitution can both guard against certain attacks, and can be exploited for fast implementations.  The biggest difference between your cipher and AES is the mixing function.  The AES mixing function can mix the entire state every two rounds.  All together, it needs only 10 rounds for 128-bit security.  With this 1-d mixing function, each byte affects only the byte on the right every round.  So you need a ton of rounds.  Without a fixed block size, encryption probably has to take quadratic time.  This will be true for almost any automaton cipher without a mixing function, unless perhaps it uses a high-dimensional automaton."
crypto,2nugqg,TNorthover,1 point,Sun Nov 30 23:57:59 2014 UTC,...So? The Simon block cipher requires 72 rounds.
crypto,2nugqg,DemandsBattletoads,3,Mon Dec 1 16:35:10 2014 UTC,"72 << 8192, though maybe you could get away with 72 rounds if it were a block cipher.  Also, Simon is designed for lightweight or DPA-resistant hardware.  It uses about 5 gates per bit with a latency of 2 xor's, and only half an AND gate per bit.  This is critical for DPA resistance, which makes XOR gates big and AND gates huge.  If instead you want speed from it in hardware, you can unroll 6-8 rounds and it will be similar in performance to AES.  This automaton cipher does not have those constraints.  The real point of my post is, OP is an amateur cryptographer who wanted to learn what's holding back the design of his cipher.  The main answer is that it needs a better mixing function."
crypto,2nugqg,DemandsBattletoads,0,Mon Dec 1 18:12:05 2014 UTC,"mixing speed does not matter, as long as the number of rounds broken does not exceed the time to execute those number of rounds in a reasonable amount of time."
crypto,2nugqg,TNorthover,3,Tue Dec 2 03:15:24 2014 UTC,"Now that I've tried to actually implement the attack, I've discovered that it's not quite that simple (twiddling 1 input bit may or may not get into that last round and/or previous rounds, probabilistically).  But try replacing the main block with this (excuse the leaks):      int len = 4408;     char *string = malloc(len * sizeof(char));     for (int i = 0; i < 25; ++i) {       memset(string, 'a', len);       string[1] = i;       string = encrypt(string, key, len, 8192);       printf(""%02x "", (unsigned char)string[0]);     }   The output I get is:  f9 e6 f9 f9 f9 e6 f9 e6 f9 e6 f9 f9 65 f9 f9 f9 f9 f9 f9 f9 ca f9 e6 f9 ca    Which is decidedly non-random (itself a worry) and corresponds to the fact that key[41] = 0xf9 and key[41 ^ 128] = 0xe6.  The less frequent entries come from when the fiddled string[1] happened to propagate into an earlier round (with probabilities diminishing as 2-n)"
crypto,2nugqg,DemandsBattletoads,3,Sun Nov 30 17:26:47 2014 UTC,"Yeah, that's exactly what I meant by ""sometimes 8192 rounds isn't enough for them to diverge enough"".  The maximum string length for 8192 rounds seems to be 4096. If string is longer there will be overlap between similar strings after encryption. It's a direct side effect of cellular automata having a speed of light."
crypto,2nugqg,PubliusPontifex,9,Sun Nov 30 17:37:48 2014 UTC,"Yeah, I know that amateur cryptography is useless. I'm not planning to use this algorithm anywhere, I'm just curious about it's flaws.  With my reference implementation, brute force attack on whole keyspace may be possible, but it's trivial to modify it in a way that prevents it. Using array of 16 bit integers instead of string of bytes and rule table that contains every 16 bit integer would make this attack basically impossible.   Can you tell me more about ""reversing the algorithm to find the key/plaintext""? I'm not really sure what you meant by that."
crypto,2nugqg,DemandsBattletoads,3,Sun Nov 30 16:11:17 2014 UTC,"Ok, so could you describe your algorithm with this modification then? How would it work for encryption? You've clearly got it in your head, but I'm not following.  Realize that an array of integers is still an array of bytes. ""16-bit integer"" is the same as saying ""every consecutive pair of bytes""."
crypto,2nugqg,TNorthover,3,Sun Nov 30 16:16:45 2014 UTC,"Realize that an array of integers is still an array of bytes. ""16-bit integer"" is the same as saying ""every consecutive pair of bytes"".   I know that. Basically, what my algorithm does to encrypt is circularly shifting all data by one bit right and then replacing every byte in data by byte form a table. The table is of size 256 and contains every possible byte.   But instead you can look up and replace pairs of bytes. Table would be of size 65536 and contain every possible pair of bytes. This would make keyspace much larger."
crypto,2nugqg,TNorthover,5,Sun Nov 30 16:33:30 2014 UTC,"Ok, so it's a very simple shift and replace scheme. Unless I misunderstood, here's your fatal flaw:  Say you were encryption natural English text using that table. The letter E is very common in English, so let's say that your key specified that every E byte was to be replaced by the byte 147. Simple frequency analysis shows that 147 has a comparable frequency that E does given the length of the ciphertext, so the attacker guesses that 147 is a replacement for E. They then unravel the other bytes in a similar fashion. Obviously a larger keyspace would make this more difficult, but it could still be done if you had sufficiently long ciphertext such that you could do the frequency analysis on pairs of letters.  Would this be a fatal attack or am I misunderstanding your algorithm?"
crypto,2nugqg,autowikibot,2,Sun Nov 30 16:45:47 2014 UTC,"You're misunderstanding, I'm afraid. There are 8192 rounds, which gradually mix in bits from other letters before substitution (via the rotation).  An output byte depends (I think) on 1024 adjacent bytes in a rolling window (possibly off by 1) so it's not a simple substitution by the end.  Edit:  The OP has a link to a C implementation (actually impressively clean! My C wasn't that good in high school)."
crypto,2nugqg,jtra,2,Sun Nov 30 16:51:26 2014 UTC,"Could you please explain where 1024 came from? I thought with enough rounds every byte would be dependent on every other, no?"
crypto,2nugqg,totes_meta_bot,2,Sun Nov 30 17:02:33 2014 UTC,"Wow, ok. This algorithm is actually stronger than what I originally thought."
crypto,2nugqg,hex_m_hell,2,Sun Nov 30 22:59:34 2014 UTC,"It's a simple 1d extrapolation of rjindael s-boxes, but without key schedules and some proper iv it's probably still vulnerable to simple analysis."
crypto,2nugqg,bitwiseshiftleft,2,Sun Nov 30 23:08:25 2014 UTC,"I realize that, but at first I was under the impression it was monoalphabetic substitution that could be broken via simple frequency analysis."
crypto,2nugqg,hex_m_hell,1 point,Sun Nov 30 23:10:11 2014 UTC,"I thought about this, but this doesn't seem to be the case. For example, here is encrypted string of 1024 dots (base64 encoded): http://pastebin.com/AiH4ng9E . It doesn't seem like frequency analysis would be able to tell that dots were much more common in plaintext than other characters."
crypto,2nugqg,PubliusPontifex,3,Sun Nov 30 16:55:15 2014 UTC,"Incidentally, there's a quirk in how ""f"" and ""l"" are handled at the end of a generation that you might not be aware of.  In almost all cases, the key lookup depends on the contents of crypto at the start of each generation. However, when j=0 it depends on the previous iteration's value of ""crypto[datasize - 1] & 1"" (except in the first iteration).  It means the algorithm isn't simply a rotate-then-apply-automaton. But on the other hand it's why a string of repeated chars isn't mapped to another string of repeated chars.  I'd hesitate to say definitively what the security implications are."
crypto,2nugqg,hex_m_hell,2,Sun Nov 30 18:02:01 2014 UTC,"Good catch, it's a definitely weird quirk. I made another version of this algorithm, with this quirk fixed: http://ideone.com/UathhI  To ensure that message with one repeating character will be properly encrypted it pads every message with a new character (crypto[0] + 1)."
crypto,2nugqg,hex_m_hell,4,Sun Nov 30 18:50:25 2014 UTC,"A good try, but it still leaves patterns in strings of odd length consisting of {x, x+1} pairs. E.g. ""aba"", or ""ababababa"" to make it more obvious.  I'd also encourage you to convert it into a block cipher. As you realised above adding more bytes means you need more rounds (generations) to be secure. This actually makes the algorithm quadratic in the input length and so very slow for larger strings. We want our encryption to be secure, but we also want it to be fast.  You could limit it to always consider blocks of 16 bytes together (other numbers would do, but 16 is very common these days). Decide how many generations you need for that to be secure and just repeat the process: encrypt(&string[0], key, 16, rounds), encrypt(&string[16], key, 16, rounds), ...   This leaves patterns above 16 bytes (""abcdefghijklmnopabcdefghijklmnop"" will have the same block repeated twice in the output), but we've got years of experience in putting together secure schemes despite that (e.g. see https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation)."
crypto,2nugqg,Godspiral,1 point,Sun Nov 30 19:35:53 2014 UTC,"Block cipher mode of operation:       In cryptography, a mode of operation is an algorithm that uses a block cipher to provide an information service such as confidentiality or authenticity.  A block cipher by itself is only suitable for the secure cryptographic transformation (encryption or decryption) of one fixed-length group of bits called a block.  A mode of operation describes how to repeatedly apply a cipher's single-block operation to securely transform amounts of data larger than a block.     Most modes require a unique binary sequence, often called an initialization vector (IV), for each encryption operation. The IV has to be non-repeating and, for some modes, random as well. The initialization vector is used to ensure distinct ciphertexts are produced even when the same plaintext is encrypted multiple times independently with the same key.  Block ciphers have one or more block size(s), but during transformation the block size is always fixed. Block cipher modes operate on whole blocks and require that the last part of the data be padded to a full block if it is smaller than the current block size.  There are, however, modes that do not require padding because they effectively use a block cipher as a stream cipher.  Historically, encryption modes have been studied extensively in regard to their error propagation properties under various scenarios of data modification. Later development regarded integrity protection as an entirely separate cryptographic goal. Some modern modes of operation combine confidentiality and authenticity in an efficient way, and are known as authenticated encryption modes.     Image i     Interesting: CWC mode | AEAD block cipher modes of operation | Padding (cryptography) | OCB mode   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2nugqg,Uncaffeinated,1 point,Sun Nov 30 19:36:33 2014 UTC,Here is block cipher version of this algorithm: http://ideone.com/TD4SPV It still needs algorithm for padding and splitting string into blocks.
crypto,2nvkrj,P-e-t-a-r,3,Sun Nov 30 21:36:55 2014 UTC,You can use openssl.
crypto,2nvkrj,blowupbadguys,1 point,Sun Nov 30 21:52:16 2014 UTC,"Any version, or from some newer?"
crypto,2nvkrj,rya_nc,2,Sun Nov 30 21:57:58 2014 UTC,"Any 1.0.1 (probably even 1.0.0) version should work so long as you aren't using a RedHat derived distro.  If openssl ecparam -list_curves works, you should be GTG."
crypto,2nvkrj,ackackacksyn,1 point,Mon Dec 1 03:49:13 2014 UTC,"so long as you aren't using a RedHat derived distro   oooh, what have i missed here ?"
crypto,2nvkrj,moreati,3,Mon Dec 1 11:13:41 2014 UTC,"Judging by 20 seconds googling, EC is disabled in Red Hat distributions because lawyers https://bugzilla.redhat.com/show_bug.cgi?id=612265"
crypto,2nvkrj,rya_nc,1 point,Mon Dec 1 12:43:50 2014 UTC,"Yeah, that's the issue. I should have linked that bug, but lazy."
crypto,2nvkrj,fabrizziop,2,Mon Dec 1 17:02:08 2014 UTC,"XCA works for RSA, DSA and ECC with the OpenSSL curves."
crypto,2nvkrj,marklarledu,1 point,Tue Dec 2 20:44:24 2014 UTC,Thanks.
crypto,2nvkrj,zeroXten,1 point,Wed Dec 3 10:14:05 2014 UTC,Have you checked out EJBCA?
crypto,2nvkrj,GahMatar,0,Mon Dec 1 09:01:49 2014 UTC,Or http://pki.io when it is ready :D
crypto,2nvkrj,zeroXten,4,Mon Dec 1 15:03:24 2014 UTC,Your thing is pure vapor.
crypto,2nvfvw,ikickrobots,2,Sun Nov 30 20:51:30 2014 UTC,I would also like to know is there some ECC CA for llinux available ?
crypto,2nvfvw,P-e-t-a-r,2,Sun Nov 30 21:26:03 2014 UTC,"My installation of OpenSSL (Ubuntu 14.04) has elliptic curve support listed in openssl list-public-key-algorithms. Seems to be RFC 5480; not sure if those are the curves/algorithms you're looking for.  http://wiki.openssl.org/index.php/Elliptic_Curve_Cryptography  http://wiki.openssl.org/index.php/Command_Line_Elliptic_Curve_Operations  You probably know this, but the standard way of using ECC in HTTPS / TLS seems to be to use ephemeral ECDH to establish a session key, and then use regular RSA to sign the session key on the server side, so the certificate continues to be RSA but the connection gets the performance benefits of ECC (and the security benefits of ephemeral Diffie-Hellman)."
crypto,2nvfvw,ldpreload,2,Sun Nov 30 22:05:49 2014 UTC,"I'd use the openssl command on an up-to-date Linux machine. There are a few wrappers around it (for instance, Cloudflare's cfssl might be worth trying); the OpenSSL distribution bundles a ""CA.pl"" command that I've used in the past. You'll want to double-check the cryptographic defaults though if you're intending this for large-scale production use. You can also use openssl ca or even openssl x509 and openssl req by hand; they're just a bit tricky."
crypto,2nvfvw,ldpreload,1 point,Sun Nov 30 22:02:09 2014 UTC,"cfssl requires Go. Not that it's a problem, just another dependency to ensure it is in place. But if the functionality of signing certs is available within openssl, that should be exactly what I need."
crypto,2nvfvw,ldpreload,3,Sun Nov 30 22:06:01 2014 UTC,"Yeah, you can do it with the openssl command itself, it's just that running a ""real"" CA (even a private one) requires some bookkeeping for serial numbers, revocations, etc. so people tend to write wrappers. For production use at scale, I'd also want an offline root and an online intermediate, like all the public CAs do; I'm not even sure if cfssl does that.  I have used the CA.pl script distributed with OpenSSL for a small site (five servers that needed to talk LDAPS to each other) and it worked fine for that purpose. I've also used openssl req and openssl x509 to generate a single CA cert and server cert for testing.  As far as Go, my understanding is that Go binaries include all their dependencies, so you could get it built somewhere and copy the binary around. (Also it seems like you won't need the CA software itself on more than one machine...)"
crypto,2nvfvw,Katana__,2,Sun Nov 30 22:17:34 2014 UTC,Could (ab)use easy-rsa?
crypto,2nvfvw,rya_nc,2,Mon Dec 1 02:22:29 2014 UTC,Don't use OpenCA. It made me want to slit my wrists (super buggy).
crypto,2nvfvw,zeroXten,1 point,Mon Dec 1 04:10:48 2014 UTC,"I know this doesn't help much now, but we're currently working on http://pki.io  This aims to be a secure and flexible and open source solution for running internal CAs. If you're interested in providing feedback, or even helping out, let me know!  FYI, example use cases are here: https://github.com/pki-io/pki.io/wiki"
crypto,2nvfvw,3pg,1 point,Mon Dec 1 15:05:46 2014 UTC,"Hey - this looks fantastic. Yes, I would love to help out. Please PM me and we can talk."
crypto,2nvfvw,zeroXten,1 point,Mon Dec 1 18:32:14 2014 UTC,"Looks promising, but far from complete."
crypto,2nuy6u,Abderraouf_Adjal,21,Sun Nov 30 18:03:59 2014 UTC,The flaw is you made your own password hashing scheme.
crypto,2nuy6u,aydiosmio,6,Sun Nov 30 19:49:44 2014 UTC,/thread
crypto,2nuy6u,DemandsBattletoads,1 point,Sun Nov 30 20:20:46 2014 UTC,Expected answer. I like to learn from my mistakes in the scheme.
crypto,2nuy6u,pint,0,Sun Nov 30 21:22:02 2014 UTC,"i would stick to my analysis on the other thread: if you want to experiment with things, with the goal of learning, you need to come up with something new, something better. this is basically a rehashing of pbkdf2 without some elements removed or changed. be a little more adventurous."
crypto,2nuy6u,disclosure5,4,Sun Nov 30 22:23:25 2014 UTC,"Since you want something more than the obvious.....  The algorithm only attempts to be CPU hard, is not memory hard, and thus is inferior to scrypt.   The comparison on line 121 is not constant-time and represents a leak.     Taking a hash of random data to create a salt is unnecessary, it's already random."
crypto,2nuy6u,marklarledu,3,Mon Dec 1 00:55:40 2014 UTC,"Obligatory don't roll your own crypto warning...  Ok, now that that's out of the way let's talk about what you designed/implemented.   Design Comments   This scheme doesn't place high memory requirements so it will be somewhat feasible to brute force with dedicated hardware (and the key). See scrypt for an example of a memory intensive hash function.  I don't see any writeup of why you chose the scheme you did. While I can guess what the goals of your scheme are it would be nice to see them explicitly stated and then say how this scheme meets those goals.   Implementation Comments   Why not throw an exception instead of returning negative numbers on error cases? It's so much more tedious to have the caller check the return value and key off that. Also can lead to security issues if the caller doesn't check it correctly (less likely to happen with exceptions). You run the hmac repeat + 1 number of times. Depending on your interpretation of the word repeat this may be correct. Either way, you should probably explicitly state that somewhere so other code can be compatible with this (I'm not saying that other people should use this scheme)."
crypto,2nuy6u,DominikD,3,Mon Dec 1 08:59:01 2014 UTC,"Thank you all for comments, I see what is the bad in the scheme:   Not memory hard, not sure if that good for web-apps but no memory hard feature make -1. Not using constant-time comparison. BTW ""PHP 5 >= 5.6.0"" have hash_equals function. I reinvent pbkdf.   ..."
crypto,2nuy6u,disclosure5,5,Mon Dec 1 10:36:37 2014 UTC,"Don't write your own crypto. If you do, don't ask on reddit whether it makes sense. Compare hashes in constant time. Problem is - you probably can't guarantee this in PHP (or any interpreted language, really) so any hand-written hashing is vulnerable to oracle attacks. This is less of a problem if repeats are high, but... ...your interface is counter-intuitive. Parameter called ""repeats"" is confusing. You're overcomplicating your API by exposing repeats (blah!) to every meaningful function. This is error prone. This is more of a comment on how people write PHP in general: checking every time for something that's constant in the environment (or should be, really) like the very existence of some function name is weird. This is something that should be pre-configured and at asserted in the code. Finally, don't write your own crypto. ;)   I know that 4-6 are not about the implementation but they provide an overarching narrative of: if you're not solving any problems and providing no new value to the ecosystem, what's the point? I mean: I could write another +-/* calculator in Java and ask for comments but that would be pretty pointless. Just because it's crypto, doesn't mean it has more value."
crypto,2nuy6u,Twylite,1 point,Sun Nov 30 23:30:41 2014 UTC,"checking every time for something that's constant in the environment    It's a depressing fact about PHP that this appears to be the usual way to do things. The ""PHP recommended"" function is mcrypt_create_iv, however, that's a compiled in module that's not present by default. On distributions such as centOS, it's a separate package for you to go and install, which you only think about when someone asks you to. What happens if you run an application like this? Well, it wouldn't be hard to install it, but because nothing prompts you and it just falls back on something else, you don't think of it.  All it does in this context is read /dev/urandom, so I don't see why a standardised function to do so doesn't replace this ""if function exists use it, otherwise, use less random functions"" construct. Again, this seems to be the norm in PHP."
crypto,2nuy6u,pint,2,Mon Dec 1 01:00:39 2014 UTC,"Read the Secure Applications of Low-Entropy Keys by Kelsey, Schneier, Hall & Wagner.  It explains key stretching and presents an example almost identical to your construction.  The key difference between your scheme and PBKDF2 is how the values of each iteration are combined.  You simply chain the hashes and take the last output; PBKDF2 XORs together every hash output.    The difference is potentially important in that hash functions offer no guarantee that repeated (chained) hashing doesn't lose entropy (e.g. by generating a sub-group or converging on a fixed point).  We don't believe that HMAC-SHA-256 does this, but it is not a proven cryptographic property of the algorithm.  PBKDF2 provides better guarantees (that your scheme) against entropy loss.  It is also good practice to include the algorithm's configuration as an input to the algorithm.  For example PBKDF2 includes the number of iterations in the input to the first iteration.  If you are actually deriving a key (as opposed to creating a hash to verify a password) then you should include information about the size and purpose of the derived key(s)."
crypto,2nuy6u,qnxb,2,Tue Dec 2 11:21:01 2014 UTC,"that it is not pbkdf2, though it is very similar to it"
crypto,2nrf35,nesticle8bit,6,Sat Nov 29 15:20:26 2014 UTC,"Why would you think of a closed source commercial solution as the ""best"" option?  Also, how can someone else advise you of your best option without knowing your requirements?  Without additional info, I consider the best option to be dm-crypt."
crypto,2nrf35,tom-md,1 point,Sat Nov 29 16:18:36 2014 UTC,"I'll try to use ArchLinux to my personal use and configure it to the right way, do u have any information to share with a newbie?"
crypto,2nrf35,tenthirtyone1031,2,Sat Nov 29 17:00:48 2014 UTC,"Literally, everything you could ever want to know about Arch has been documented and put on their website.  I think you have to actually click through the wiki to get to the download section to download Arch."
crypto,2nrf35,coerciblegerm,1 point,Mon Dec 1 15:27:18 2014 UTC,"I think you have to actually click through the wiki to get to the download section to download Arch.   I think that used to be true (or at the least, wouldn't be a bad idea), but at the moment you can just click 'Download' on the right hand side of archlinux.org and pick a link. At least there's also a link to the installation guide on the download page."
crypto,2nrf35,tenthirtyone1031,1 point,Tue Dec 2 19:45:38 2014 UTC,"Sigh, ease of use is not necessarily usability.   Don Normal is shaking his head."
crypto,2nrf35,coerciblegerm,1 point,Tue Dec 2 21:17:10 2014 UTC,"Huh? I don't recall making that argument, just pointing out you don't have to click through the wiki to download the image."
crypto,2nrf35,phyzome,5,Tue Dec 2 21:27:08 2014 UTC,GPG/PGP. It's the default.
crypto,2nrf35,phyzome,1 point,Sat Nov 29 16:53:13 2014 UTC,Im using Enigmail configured in Thunderbird right now.
crypto,2nrf35,pallegonfie,1 point,Sat Nov 29 16:59:31 2014 UTC,"OK, sounds good. Keep doing that!"
crypto,2nrf35,danukeru,1 point,Sat Nov 29 18:12:56 2014 UTC,It depends upon which kind of information you want to encrypt. Files which stay in your machine?  Emails? Other communication means?
crypto,2npo1t,-Ignotus-,3,Sat Nov 29 00:05:31 2014 UTC,"Why do you want to do this?  Anyway, for a bijection, you can use Elligator 2.  https://eprint.iacr.org/2013/325.pdf  The presentation there is a bit dense, but the basic idea is to use a Montgomery curve (equivalent to an Edwards curve), equation y2 = x(x2 + Ax + 1).  Note that if z = -A-x, then z2 + Az + 1 = x2 + Ax + 1.  If also z/x is nonsquare (eg, it's ur2 for a nonsquare u), then there is a y either for x or for z, but (except in certain extreme cases) not both.  Solve those two equations, and get x = -A / ( 1+ur2 ), z = -Aur2 / ( 1+ur2 )  This can give a passably efficient 1:1 map from bit strings of a certain length to a large subset of the elliptic curve.  But I wouldn't trust the encryption method from that arxiv post.  I suspect that the simplest way to beat ElGamal's size is for Bob to have more public keys B_i = gb_i .  Alice can use one ga with all of them, sending (ga; gab_i * m_i for each i) [[EDIT: not gb_i * m_i]].  So Bob might have 16 public keys, and the message expansion would be slightly more than 1/16.  There might be a way to do it with small public keys, but I don't recall one off the top of my head."
crypto,2npo1t,bitwiseshiftleft,1 point,Sat Nov 29 01:46:31 2014 UTC,I don't think I understand what you're saying in the last part. How does this reduce the message expansion? Alice still sends Bob two points per message.
crypto,2npo1t,bitwiseshiftleft,1 point,Sat Nov 29 07:55:27 2014 UTC,"She sends one ga followed by several gab_i * m_i.  If there's only one message, she sends two points, but if there are many, she expands by about (n+1)/n, where n is the number of Bob's keys."
crypto,2npo1t,bitwiseshiftleft,1 point,Sat Nov 29 08:06:47 2014 UTC,"So if I understand correctly, this would require 1 public key per message?"
crypto,2npo1t,yotta,2,Sat Nov 29 08:32:09 2014 UTC,"ga is sort of an ephemeral key, not a static public key.  And it depends how many public keys (or you might call them parts to his public key) Bob has.  If he has enough, then yeah, only one ephemeral per message.  Again, why do you want this?"
crypto,2npo1t,bitwiseshiftleft,2,Sat Nov 29 08:42:01 2014 UTC,"I'm in high school and I'm writing an assignment about elliptic curves in cryptography. I'd like to include an encryption algorithm based on elliptic curves, since I find the key exchange and digital signature protocol alone too simple and because I'd like to program a scheme completely relying on elliptic curves."
crypto,2npo1t,based2,3,Sat Nov 29 10:23:20 2014 UTC,"Nobody uses a scheme like that, and I doubt you'll find one described in literature due to it being egregiously inefficient. You need to either use ElGamel for every block or construct a stream cipher in a manner similar to Dual_EC_DRBG. Neither of these is fast or efficient.  I suggest and example with EC plus either RC4 or XXTEA (both RC4 and XXTEA have known weaknesses but they are very simple)"
crypto,2npo1t,yotta,2,Sat Nov 29 16:55:41 2014 UTC,"Yotta is right that nobody does this ""in the real world"".  It could be fun for an assignment, but only if you're an overachiever.  (Exeter? TJ?)  It's important to recognize that whatever you code up will probably not be very secure due to corner cases and side channels, and it won't be very fast, but you'll learn a lot.  Also, the route I outlined is actually quite a bit of work, and not because of having several gab_i 's.  The output is actually  A = pointCompress( ga ), c_i = pointCompress( pointDecompress(B_i)a * elligatorInject(m_i))  where B_i = pointCompress(gb_i ), but Alice doesn't know b_i.  which needs to be recovered as elligatorExtract( pointDecompress(c_i) / pointDecompress(A)b_i )  Getting Elligator right, so that extract perfectly undoes inject, is not especially easy.  You'll also have to figure out what coordinates to use.  Elligator is easiest in Montgomery form, as is computing gx , but you'll need the y-coordinate for the multiplication/division.  You can recover it from the Montgomery ladder, or you can use Edwards coordinates for the whole thing... anyway, if you want to code this you have some work ahead of you."
crypto,2npo1t,autowikibot,2,Sat Nov 29 18:45:18 2014 UTC,http://en.wikipedia.org/wiki/Elliptic_curve_cryptography  http://www.ssi.gouv.fr/fr/anssi/publications/publications-scientifiques/autres-publications/publication-d-un-parametrage-de-courbe-elliptique-visant-des-applications-de.html
crypto,2npo1t,fletom,3,Sat Nov 29 13:40:15 2014 UTC,"These are methods for key exchange. However, I'm looking for an encryption algorithm using EC."
crypto,2npo1t,yotta,3,Sat Nov 29 14:15:45 2014 UTC,"An encryption algorithm using EC cannot encrypt messages longer than the key. You would have to break up the file into many key sized chunks, which would be very very slow. Normally this is handled by encrypting a key to a symmetric cipher like AES and encrypting the actual message with that."
crypto,2npo1t,fletom,1 point,Sat Nov 29 16:44:59 2014 UTC,"Elliptic curve cryptography:       Elliptic curve cryptography (ECC) is an approach to public-key cryptography based on the algebraic structure of elliptic curves over finite fields. Elliptic curves are also used in several integer factorization algorithms that have applications in cryptography, such as Lenstra elliptic curve factorization.  The use of elliptic curves in cryptography was suggested independently by Neal Koblitz  and Victor S. Miller  in 1985.  Elliptic curve cryptography algorithms entered wide use in 2004 to 2005.     Interesting: Hyperelliptic curve cryptography | Elliptic curve Diffie–Hellman | Elliptic Curve Digital Signature Algorithm | Schoof–Elkies–Atkin algorithm   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2npo1t,cunttard,1 point,Sat Nov 29 13:40:28 2014 UTC,"Do you have a link? I can only find key exchange followed by using the secret key for some symmetric encryption. Howver, I want to do asymmetric encryption using elliptic curves."
crypto,2npo1t,autowikibot,2,Sat Nov 29 00:37:22 2014 UTC,You don't encrypt messages using public-key crypto. You encrypt symmetric keys and use them to encrypt the messages instead.
crypto,2no46f,paulfurley,5,Fri Nov 28 14:42:33 2014 UTC,"This is quite an interesting blog!  I'm just wondering where the human part and the usability part is.  GPG is as useful to the average joe for securing his privacy as a centrifuge is to the average joe for cooking. Yes you will have some people who will use one to do some molecular gastronomy dishes once in a while or even everyday because they feel like it, but that does not make it useful.  Where is the microwave of security and privacy?"
crypto,2no46f,remyroy,2,Fri Nov 28 16:34:37 2014 UTC,"I'm sure a lot of people thought the same about complicated microwaves and their countless buttons & settings.   The need for dead easy to use and in most cases unbreakable encryption  is only recent in the mind of a minority of people outside the tech circles who understand what's going on and why its not only so badly needed but also so badly designed (from a usability/level of knowledge required) for the general public to pickup and run with tomorrow.   We're due for a consumer device Thai does this but I can't really see it coming from the groups who could (read google, Apple etc). Open source can deliver the tech for doing this it just, as much as I hate to say it, requires something of an canonical type venture to really get it in the hands of Joe blogs and not have him quit when he realizes he needs to format the only usb he has to install this group of programs named after sonic characters."
crypto,2no46f,mystline7,1 point,Fri Nov 28 20:22:53 2014 UTC,"The most interesting device currently IMHO is Myceliums Bitcoin wallet card project, which would be capable of acting as a generic crypto device."
crypto,2no46f,Natanael_L,1 point,Sat Nov 29 14:18:33 2014 UTC,"Thanks - and you're probably right that ""For Humans"" might be a bit of a stretch. ""For Techies who aren't Cryptanalysts"" is probably more accurate.  IMHO GPG is a pretty awful end-user application but could be an excellent component in some other software (eg Mailpile).  To get to that stage, however, I think we need more developers being comfortable with GPG. Then we're in a better position to wrap it / abstract it away.  It was painful reading Mailpile's blogpost about interfacing with GPG (https://www.mailpile.is/blog/2014-10-07_Some_Thoughts_on_GnuPG.html).  It struck me that very people have both the design skills to develop beautiful crypto applications and the familiarity with crypto / crypto components to actually push us forward.  So in summary, I think GPG should be a library to build upon, but getting there needs more developer interest & attention."
crypto,2nmoan,BreadInTheSky,13,Fri Nov 28 02:02:10 2014 UTC,"You're being taught by Jon Katz (or Lindell)? Ignore the grades completely and absorb as much material and knowledge as you can. That's how you become better. Take initiative and just do the problems in the book, not because its homework, but because you want to.  Midterms/Finals are unimportant in the grand scheme of things, you develop knowledge over time until you can recall it quicker.  I think you have a very unique opportunity studying under a great cryptographer. Spend that time wisely and spend less time focusing on grades.  Edit: Also, read the references + additional information at the end of every chapter (right before the exercises). That's how you really learn cryptography, by going to the roots and understanding the history and context of what you're learning."
crypto,2nmoan,cunttard,2,Fri Nov 28 02:19:02 2014 UTC,"That's what I'm trying to do, but poor midterms/finals grade can be very discouraging... What company would want to hire me/grad school admit me for this type of stuff (Crypto) when I've gotten a C in an introductory-level course? It makes me feel like I lack the aptitude, even though I have a decent grasp on the majority of the concepts. Either way, thanks for the encouraging words."
crypto,2nmoan,645646464,4,Sat Nov 29 01:48:44 2014 UTC,http://www.amazon.com/Understanding-Cryptography-Textbook-Students-Practitioners/dp/3642041000/ref=pd_sim_b_3?ie=UTF8&refRID=1EM3SY1NFVMV3NW2SY63  this book is easier to digest for beginners at crypto. you can find it around on the web.
crypto,2nmoan,musirid,1 point,Fri Nov 28 09:48:53 2014 UTC,"Thanks, I'll check it out! Does it have a lot of practice problems at the end of each chapter? Because that's mainly what I'm looking for; I don't find most of the concepts particularly difficult to grasp or anything."
crypto,2nmoan,DoWhile,3,Sat Nov 29 01:42:22 2014 UTC,"I'm not sure what was on your midterm, if you get that back, you might want to check which concepts you lost points on (feel free to PM me if you want).   Going forward, I highly recommend supplementing your current studies by reading the corresponding sections in the Trappe & Washington Intro to Crypto book. All of my crypto classes have used it and it explains the concepts really well, as well as giving good practice problems. Thanks to those classes, I got hooked on crypto as well."
crypto,2nhwo0,nawitus,8,Wed Nov 26 18:02:52 2014 UTC,Code on GitHub:  https://github.com/maqp/tfc  https://github.com/maqp/tfc-cev
crypto,2nhwo0,ZaphodsOtherHead,4,Wed Nov 26 18:03:23 2014 UTC,Awesome name :)
crypto,2nhwo0,jiannone,5,Wed Nov 26 19:50:37 2014 UTC,What makes this better than other OTR clients?  Can cryptocat plug into pidgin?
crypto,2nhwo0,maqp,9,Wed Nov 26 19:39:27 2014 UTC,"The abstract of whitepaper should explain the key differences. Compared to OTR, TFC greatly increases security at the cost of some convenience:  Crypto:   No QC / TLS-MITM attacks unlike asymmetric crypto and PKI (+) <> keys need to be pre-shared (-). OTP: No CT-only attacks (+) <> keydata exhausts after some hundreds of thousand of messages (-). OTP: Unconditionally secure msg integrity (+) <> keydata exhausts after some hundreds of thousand of messages (-). CEV: No single algorithm point of failure (+) <> more code to audit (-).   Key generation:   Open circuit design HWRNG: non-deterministic, backdoor-free entropy (+) <> hardware investments (-).   Key security:   No post-exploitation unless SW / HW is initially backdoored or afterwards physically compromised (+) <> Investing two additional computers for dedicated use as TCB units (-). When using RPi computers with cheap peripherals, the price of system starts at around $300, excluding tools.   So TFC is better than OTR if your threat model includes automated network based endpoint-exploitation using zero-days, practiced by governments every day: NSA with malware such as Flame, Regin, or program codenamed Foxacid - Metasploit, only with a budget. GCHQ, Germany, Netherlands and Finland and soon the FBI are doing it as well. If attacker fails to compromise the system during installation procedure, TFC is immune against key exfiltration unless it's physically compromised.  TFC uses OTR but only to obfuscate and protect the protocol against traffic analysis. Also since you asked, although quite unrelated, Cryptocat doesn't plug into Pidgin."
crypto,2nhwo0,Jasper1984,2,Thu Nov 27 04:45:50 2014 UTC,"Security by obesity.. lol  Also mentions snooping on keyboard-cable or sound.. I dont know about the cable, but not sure what currents buttons cause, probably a lot more than capacitive sensing. The latter is literally the tiny difference in capacitance of your finger, so.. that sort of amounts of charge. Sound is also just that of hitting surface. Sounds a lot cheaper than precision piezos too. (by hardware implants, possibly in off-the-shelf computers)  The batteries sound like a bit of a pita... Not sure if that is worth it. Surely that can be sufficiently isolated with capacitors.(of sufficient capacitance, and response speed)  Edit: apparently there is another document, that is clearer on how it is to be used. Also, i think it might be nice to also have public-key based communication. For those, addresses can be on business cards and stuff. That seems more expensive to implement in hardware though, so it might not be worth it.  Edit2: well.. approaches assume stuff like three laptops.. involved. Maybe it can be improved.. Like having small devices for the Rx and Tx.."
crypto,2nhwo0,maqp,2,Sun Nov 30 01:32:50 2014 UTC,"RSA keys aren't the way to go if you want deniability for your conversations. I did look into key establishment using DHE. There were just too many problems: You need an additional data diode that transmits private key from TxM to RxM, or it must be manually typed.   Then you need to either manually type the very long public value received from contact to RxM, on TxM or you need to trust RxM to generate the shared secret = K_pubK_priv mod p that will be much shorter to type but since adversary can get malware inside RxM, it's more insecure.   Additionally the authentication of DHE public key would risk MITM in off-band communication and thus require meeting face to face. Physical PSK exchange isn't more prone to eavesdropping since in both cases adversary would need to get physical access to the key medium."
crypto,2nhwo0,Jasper1984,1 point,Sun Nov 30 19:05:28 2014 UTC,"I was thinking bitmessage/torchat/bitcoin-like etcetera keys that you type in manually, or find or something. They can be relatively short, because you can just throw the real public key in the message, and have the address be the checksum.  But then, that does require Rx and Tx to both know the private key, and if they have different ones, the issue is that Rx never sends a message to put the public key in.. So i see the problem there..  Tinchat is a very high-security-level thing.. Probably room for a level below that?"
crypto,2nhwo0,maqp,2,Sun Nov 30 21:46:06 2014 UTC,"There are already tons of end-to-end encrypted clones out there. Feel free to fork the project and implement lower security. Just be sure to be fully open about the threat model: Any tool is as secure as TFC, if it allows users to compare security features against their own threat model: Good examples are here, here and here and almost as good, here and here.  Bad examples here and here."
crypto,2nhwo0,amtal-rule,1 point,Mon Dec 1 00:06:44 2014 UTC,"The last time this was posted I asked why OTP keys and didn't get a sane answer. This time around, the paper mentions security by obesity - and that's a more interesting rationalization.  Would still prefer a solid implementation of Axolotl on a dedicated device."
crypto,2nhwo0,maqp,1 point,Sun Nov 30 11:24:14 2014 UTC,"The paper is still a draft so expect changes to it; Future NSA leaks might change the threat model. Axolotl provides no end point security and worse still, people are running great OWS software on smartphones which is kind of bad.  Also, OTP isn't the only option for TFC available today. The polycipher version uses Keccak-Salsa20-Twofish-AES(GCM) with four independent PFS keys."
crypto,2nhwo0,amtal-rule,1 point,Sun Nov 30 19:29:20 2014 UTC,"Tackling endpoint security is good, but nesting ciphers is nutty.  The only possible justification I can think of is defense in depth versus power analysis side channels."
crypto,2nhwo0,maqp,1 point,Sun Dec 7 08:06:12 2014 UTC,This was discussed in the CEV version's release post. The main argument was to minimize the chance of using algorithm with unknown weakness. AFAIK power analysis would require that attacker operates in physical vincinity of the devices - at that point TEMPEST-attack should be much easier.
crypto,2nhwo0,AndersLindman,0,Mon Dec 8 00:28:53 2014 UTC,"Hardware random generation, isn't that overkill? I produce a 1024-bit salt by sampling the nanosecond computer clock: http://jsfiddle.net/tc8kfnwm/  And then hash the salt into 256 bits when used in a cipher: http://jsfiddle.net/c8mr48ej/  The hash function is: hash(m) = sha256(m) XOR R30(m)  In addition the 1024 bits of the salt are xor:ed into the hash.  R30 (Rule 30 hash): http://www.reddit.com/r/crypto/comments/2n8guw/r30_hash_function_with_cellular_automaton/"
crypto,2nhwo0,AndersLindman,3,Thu Nov 27 05:36:23 2014 UTC,For OTP you want true randomness. Not sampling something from a closed design CPU.
crypto,2nhwo0,AndersLindman,1 point,Thu Nov 27 08:00:17 2014 UTC,"Ok, that's another use case. One time pad? How is the pad shared between the users? I guess I need to read a bit more of the whitepaper. :-)"
crypto,2nhwo0,maqp,1 point,Thu Nov 27 08:20:09 2014 UTC,"I read that the OTP keys are shared physically, person to person. Yes, then a hardware random generator is probably needed to make it really secure. My salt is only used as a nonce and is likely insecure if used as a one time pad."
crypto,2nhwo0,AndersLindman,1 point,Thu Nov 27 09:09:08 2014 UTC,"If you obtain the keystream from PRNG by inputting a seed, the keystream is deterministic - not truly random, so what you have there is a stream cipher, not OTP."
crypto,2nhwo0,maqp,1 point,Thu Nov 27 15:53:07 2014 UTC,"Yes, true, with a PRNG it should be called OTPP (one time pseudorandom pad) or something like that. Tinfoil Chat uses real one time pads. Pretty neat."
crypto,2nhwo0,AndersLindman,1 point,Thu Nov 27 17:54:32 2014 UTC,It makes very little sense to generate large keyfile that contains stream cipher keystream when users can derive it from shared seed (key+nonce) using a PRNG as they go. The genKey.py kernel-entropy option is mainly suitable for quickly creating large keyfiles for testing. The HWRNG generated entropy can not be reproduced with any algorithm / device so the one-time-pad has to be pre-shared.  I don't think a chunk of stream cipher keystream should be called 'one-time pseudorandom pad' as people might confuse it with one-time pad and it's security properties.
crypto,2ngrwg,CenoCipherTeam,9,Wed Nov 26 09:50:48 2014 UTC,"There is absolutely no excuse for creating a new message format. All that does is to damage privacy because no two people end up having programs that can communicate. Use PGP, or S/MIME if you must. If you want to do a better UI, do a better UI for PGP or S/MIME. If you don't like any of the existing code bases, write new code for PGP or S/MIME (but don't be surprised if nobody wants it). If you don't like something about the formats, go to the IETF and try to get improvements standardized.  Any use of obscure algorithms like ISAAC needs to be justified by showing something ISAAC has that the standard algorithms don't. And if you want to ""layer"" algorithms, RNGs are a better place than bulk crypto.  I have a whole bunch of utilities on my computer that can encrypt a file using a password. I never use them because password based encryption isn't usually useful in the first place."
crypto,2ngrwg,cypherpunks,-1,Wed Nov 26 13:46:14 2014 UTC,"PGP is certainly quite optimal from a technical standpoint, and having been around for a couple of decades with some decent enough software options, it still hasn't gained widespread usage among the general mainstream populace. Possibly due to being a bit cumbersome and involved for the average non-tech-savvy user to tackle and configure, and probably also to encryption in general not really being seen as important or necessary to the masses until now. Lately there have been calls for encryption apps that are easy for the everyday user to pick up and use right away, and CenoCipher is our attempt to contribute to that application field. At the moment at least, symmetric password-based encryption solutions (supported under the hood by strong secure algorithms of course) are just easier for regular non-computer-geek users to deal with.  That being said, this program's existence doesn't prevent anyone who's comfortable with PGP from using it. It just provides an alternative option for those who might find the latter a little too daunting for their taste. Everyone gets to use whichever approach they prefer, and the likelihood is that the less technically inclined users in the second group were never going to get around to taking on PGP in the first place. This way at least they have an encryption option in between PGP and nothing at all.  We aren't really creating a new message format per se, since all the program does is create files. The transmission and delivery method for those files is completely up to the user, meaning they don't have to stop using the channels they're already used to: their current email account, instant messaging system, cloud storage service, etc. We see that flexibility as a benefit, rather than a restriction. It's certainly true that the sender and recipient both need to have the same program in order to open the files involved. However that's not much different than receiving a '.7z' file from someone and needing to have 7-zip in order to open it, or needing to have Word in order to read a .docx file. People are used to that.  Those who want to communicate with each other via Skype, Whatsapp, Cryptocat etc.. need to have the same program installed on both ends too, so it's nothing new.  If we think we can create an improved utility and easier interface for OpenPGP-based communication, that would bridge the gap and soften the normally thorny plunge for Joe User, we may take a shot at that as well. Anything that helps or creates viable options."
crypto,2ngrwg,Creshal,4,Sat Nov 29 19:20:32 2014 UTC,"Windows only, ""layered encryption"", scamming off DJB's domain name, messy source code, own RNG implementation, the only documentation is in open source code imported from outside sources; yeah, that's off to a good start…"
crypto,2ngrwg,R-EDDIT,-2,Wed Nov 26 12:09:14 2014 UTC,"Layered just means both algorithms are used to encrypt everything, first one and then the other, as mentioned above. Two layers of encryption, in case one (AES or Twofish) is ever broken or compromised in the future, you're still protected by the other. Separate keys are indeed used. Much as Truecrypt always offered/s the option to use any combination of AES/Twofish/Serpent desired.  No idea who or what DJB is. 'The crypt.to' domain was just a suitably available one from FreeDNS that seemed to fit with the purpose.  The PRNG isn't our own, but rather well-known one ISAAC:  https://en.wikipedia.org/wiki/ISAAC_(cipher)  http://burtleburtle.net/bob/rand/isaacafa.html  Windows only for the time being, but not forever.  (Just searched and found reference to Daniel Bernstein, but no familiarity with his site/domain before now. Just similar thinking in the subdomain.)"
crypto,2ngrwg,cunttard,7,Wed Nov 26 13:33:06 2014 UTC,"Honestly, if you don't know who djb is that makes me doubt you know enough about crypto to avoid making fatal mistakes."
crypto,2ngrwg,Natanael_L,2,Wed Nov 26 13:44:18 2014 UTC,AES and Twofish algorithms layered together   What does that mean?
crypto,2ngrwg,rya_nc,3,Wed Nov 26 10:33:15 2014 UTC,"Cascade encryption. Hopefully with separate keys. First you encrypt with one, then the other."
crypto,2ngrwg,Natanael_L,2,Wed Nov 26 12:38:15 2014 UTC,"They're doing it in CBC mode, which is not the correct way to cascade ciphers. It needs to be in mode where you get the same result regardless if what order the ciphers are used in, e.g. CTR mode."
crypto,2ngrwg,rya_nc,1 point,Fri Nov 28 16:38:43 2014 UTC,"Is that for avoiding distinguishability if one is broken, or just for the math assumptions about independence to not get wrecked? I'm assuming its mostly the latter."
crypto,2ngrwg,rya_nc,1 point,Fri Nov 28 17:36:31 2014 UTC,"Cascade Ciphers: The Importance of Being First (1993) Maurer, Massey  From the abstract, emphasis mine:   The security of cascade ciphers, in which by definition the keys of the component ciphers are independent, is considered. It is shown by a counterexample that the intuitive result, formally stated and proved in the literature, that a cascade is at least as strong as the strongest component cipher, requires the uninterestingly restrictive assumption that the enemy cannot exploit information about the plaintext statistics. It is proved, for very general notions of breaking a cipher and of problem difficulty, that a cascade is at least as difficult to break as the first component cipher. A consequence of this result is that, if the ciphers commute, then a cascade is at least as difficult to break as the most-difficult-to-break component cipher, i.e., the intuition that a cryptographic chain is at least as strong as its strongest link is then provably correct.   Tl;dr: They prove that a cascade of ciphers is only at least as strong as the first cipher in the cascade, not the strongest cipher. If the ciphers commute (e.g. are stream ciphers that xor the plaintext), there is no order to the ciphers so all may be considered ""first"" - so the cascade is at least as strong as the strongest cipher."
crypto,2ngrwg,rya_nc,0,Fri Nov 28 18:57:48 2014 UTC,"If there is truly a tangible and substantial security enhancement to be gained by using counter mode instead of chaining, we'll certainly consider switching to that method in a future version, and accommodating the old format with a legacy handler."
crypto,2nd9s3,e_to_the_pi_i_plus_1,12,Tue Nov 25 13:11:17 2014 UTC,secret phd? link to pdf or didn't happen!
crypto,2nd9s3,pint,10,Tue Nov 25 13:20:37 2014 UTC,So the Ph.D isn't public.  Here are some papers:  http://eprint.iacr.org/2014/243 http://eprint.iacr.org/2013/416 http://eprint.iacr.org/2012/466 http://eprint.iacr.org/2012/005
crypto,2nd9s3,DoWhile,6,Tue Nov 25 13:22:50 2014 UTC,"With results like those, you don't need luck, so I'll wish you a painless thesis filing process instead."
crypto,2nd9s3,pint,2,Tue Nov 25 16:26:45 2014 UTC,"how weird. here, phd defending is a public event, and the phd paper itself is public too."
crypto,2nd9s3,pint,9,Tue Nov 25 14:04:32 2014 UTC,The defense is public. Just don't have a public dissertation yet. Was trying not to post identity but too late for that.   http://www.bu.edu/cs/news/calendar/?eid=161190
crypto,2nd9s3,fathed,2,Tue Nov 25 14:41:26 2014 UTC,this seems kind of important. can you give us a ELI5 on the actual results? like what can you do with it? can we derive 128 bits from a fingerprint or palm print? a spoken word? a retina scan? what can we expect?
crypto,2nd9s3,3pg,10,Tue Nov 25 15:12:13 2014 UTC,"Just going to mention this, not really related to the crypto aspect.  Finger prints are left everywhere, they are a substitute for usernames, not passwords."
crypto,2nd9s3,pint,2,Tue Nov 25 19:36:39 2014 UTC,"The distinction is very important to the crypto aspect. Passwords often take the place of the ""key"" in Kerckhoff's principle, while usernames can technically be made public. Redefining biometrics as usernames change their role in systems."
crypto,2nd9s3,C_Hitchens_Ghost,1 point,Wed Nov 26 03:27:30 2014 UTC,"noted. but if you want to derive a user-id from a fingerprint, you still need this algo"
crypto,2nd9s3,pint,1 point,Wed Nov 26 09:21:14 2014 UTC,"they are a substitute for usernames, not passwords.    You are now overqualified for all management positions."
crypto,2nd9s3,Natanael_L,4,Mon Dec 1 21:19:11 2014 UTC,wait! i got it! you work for the NSA! traitor!!
crypto,2nd9s3,pint,1 point,Tue Nov 25 14:11:48 2014 UTC,"Nice. You could potentially use this to create keys from just about anything in a repeatable manner, I'm thinking of a set of secret physical items you'd scan to create the key in the same way each time. The best part is that you don't need obvious flags or markers like using Qr codes, just knowledge about the order and orientation when scanning."
crypto,2nd9s3,wtfdizzy,1 point,Wed Nov 26 12:46:49 2014 UTC,colored shreds or filaments suspended in a thin transparent plastic. making a picture from different directions can serve as different keys. also very hard to copy.
crypto,2nd9s3,gsuberland,5,Wed Nov 26 14:38:20 2014 UTC,Good luck! Remember to bring a healer :P
crypto,2nd9s3,0b11111000000,3,Tue Nov 25 14:28:26 2014 UTC,"""Here, take my +1 mace!"""
crypto,2nd9s3,rosulek,2,Tue Nov 25 19:12:57 2014 UTC,AAAHHH MY EYES.
crypto,2nd9s3,lynxjerm,3,Wed Nov 26 00:48:29 2014 UTC,"Good luck, Ben ;)"
crypto,2nd9s3,BOSS_OF_THE_INTERNET,2,Tue Nov 25 16:54:37 2014 UTC,Good luck from RPI.
crypto,2nd9s3,cunttard,2,Tue Nov 25 14:43:39 2014 UTC,Good luck!
crypto,2nd9s3,cr125rider,2,Tue Nov 25 15:59:03 2014 UTC,Congratulations. I hope you brought awesome snacks for everyone.
crypto,2nd9s3,zozoped,1 point,Tue Nov 25 21:57:52 2014 UTC,Nice job! Good luck!
crypto,2nd9s3,phyzome,1 point,Tue Nov 25 13:38:57 2014 UTC,Good luck ! Do you know what you'll do next ?
crypto,2nd9s3,Ar-Curunir,1 point,Tue Nov 25 13:44:31 2014 UTC,Best of luck!
crypto,2nfq6o,AndersLindman,8,Wed Nov 26 02:09:07 2014 UTC,"in public key crypto, you don't exchange private keys.  You can publish your public key to the world, assuming it is long enough and factoring or discrete logarithms are hard.  You can use public crypto to send a private symetric key.  If you assume they can break hard math, then they might also be able to break aes or random xor pads too."
crypto,2nfq6o,Godspiral,4,Wed Nov 26 02:41:35 2014 UTC,There's a non-trivial leap between 'breaking hard math' and 'breaking correctly implemented one time pads'.
crypto,2nfq6o,sideways86,3,Wed Nov 26 08:09:03 2014 UTC,"One time pads are theoretically secure, they cannot be broken unless the random generator is flawed somehow. For secure one time pads usually hardware RNGs are used which generate random noise from some physical phenomena. This is IMHO the most secure way to go."
crypto,2nfq6o,mrschyte,0,Wed Nov 26 12:40:37 2014 UTC,"my point exactly. Properly implemented OTP beats 'hard math' every time, even when the math is VERY hard."
crypto,2nfq6o,sideways86,1 point,Wed Nov 26 13:29:27 2014 UTC,"I used term random xor pads rather than one time pads.  You ususally need a repeatable stream if it is a secret you want to transmit.  That implies a RNG based pad.  The BBS generator is a hard math (factoring) based RNG system, but is not widely used.  Attacks on RNGs are usually related to their black box nature, or even NIST recommendation."
crypto,2nfq6o,Godspiral,1 point,Wed Nov 26 15:26:11 2014 UTC,Ah I see. I hadn't heard the explicit term 'random xor pads' but I knew enoguh to know that a one time pad could be accurately described as a 'random xor pad'.  Now we're on the same page I can see what you're saying and have no arguments.
crypto,2nfq6o,sideways86,1 point,Thu Nov 27 00:42:54 2014 UTC,Are there other key exchange scheme other than Diffie-Hellman ?
crypto,2nfq6o,lattakia,1 point,Wed Nov 26 06:17:52 2014 UTC,"Many, but I don't remember the names of them."
crypto,2nfq6o,Natanael_L,1 point,Wed Nov 26 14:43:45 2014 UTC,"To give someone a password (or any secret message), you can encrypt it using their public key.  Only the people who know the private key (corresponding to that specific public key) can read it."
crypto,2nfq6o,Godspiral,5,Wed Nov 26 14:54:30 2014 UTC,"It depends on what you mean by ""the usual methods for key exchange"".  The normal way of key exchange is done by Diffie-Hellman, which is as strong as the Diffie-Hellman problem (which is believed to be the same as Discrete Logarithm).  Another possible way is to use public-key cryptography. Alice publishes her public key. Bob generates a random key and encrypts it with the public key. Alice then decrypts it with her private key. Breaking this requires factoring large numbers for RSA. Of course, if you can do this, then you don't need to exchange keys."
crypto,2nfq6o,FryGuy1013,5,Wed Nov 26 02:25:54 2014 UTC,"You might be interested in Merkle Puzzles. In the random oracle model, an attacker who wishes to break the Merkle Puzzle key agreement must devote resources which scale quadratically with those used by Alice and Bob to agree on a key. Now quadratic security isn't typically considered meaningful, but this gap remains even if we assume P=NP--which I would consider an extremely paranoid perspective. =)"
crypto,2nfq6o,balachthon,1 point,Wed Nov 26 05:37:01 2014 UTC,"""... Any eavesdropper (Eve, say) has a harder task — she does not know which puzzle was solved by Alice. Her best strategy is to solve all the puzzles, but since there are so many, this is more computationally expensive for Eve than it is for Alice."" -- http://en.wikipedia.org/wiki/Merkle%27s_Puzzles  With today's large communication bandwidths a huge number of puzzles can be sent. The problem is that the NSA and the Chinese government etc have access to massive computing power and can easily solve all puzzles."
crypto,2nfq6o,conradsymes,2,Wed Nov 26 07:20:44 2014 UTC,"Erm.  No.  Just plain no.  Assuming that the cryptologic world can break key exchange, than there's no point in cryptography. They'd be able to break pretty much everything else."
crypto,2nfq6o,FryGuy1013,5,Wed Nov 26 02:35:57 2014 UTC,"It's unlikely, but possible, that there will be a quantum computer that can solve the discrete logarithm problem, which would invalidate Diffie-Hellman. That doesn't necessarily break block-cipher algorithms (AES, ChaCha, etc)."
crypto,2nfq6o,conradsymes,2,Wed Nov 26 03:33:31 2014 UTC,"While true, grover's algorithm suggests that one could break break block-cipher algorithms faster.  And ChaCha is a hash, not a block-cipher.  Basically, on a practical basis, key exchange algorithms are provably difficult for classical computers, being able to break those algorithms which are logically more difficult than block ciphers, which can 't be proven to be secure, well..."
crypto,2nfq6o,FryGuy1013,2,Wed Nov 26 04:45:43 2014 UTC,"I'm no quantum computer guru, but I thought breaking block/stream ciphers wasn't much faster on quantum computers. Grover's Algorithm would only square root the search space of O(2**n). And ChaCha us usually used as a stream cipher. Are you thinking of Poly1305 maybe?"
crypto,2nfq6o,conradsymes,1 point,Wed Nov 26 05:10:02 2014 UTC,Hash does not necessarily mean compression algorithm.
crypto,2nfq6o,Natanael_L,1 point,Wed Nov 26 06:00:32 2014 UTC,Grover's only squares the keyspace. 256 bit symmetric keys remain secure
crypto,2nfq6o,samsonx,1 point,Wed Nov 26 14:46:50 2014 UTC,"Yes, that's why I wrote paranoid perspective. In the public scientific community and likely in the corporate world, there public key cryptography is considered safe enough. The paranoid perspective is that the NSA and the Chinese government and others with access to classified research can easily break what for the public is very difficult to break.  Consider this from a NSA document:  ""The conference again offered an interesting view into the thought processes of the world’s leading “cryptologists.” It is indeed remarkable how far the Agency has strayed from the True Path."" -- https://www.eff.org/deeplinks/2014/11/eff-joins-call-nist-we-can-trust  It indicates that the NSA is using very different methods than in the public academic world."
crypto,2nfq6o,conradsymes,2,Wed Nov 26 10:02:55 2014 UTC,"""The conference again offered an interesting view into the thought processes of the world’s leading “cryptologists.” It is indeed remarkable how far the Agency has strayed from the True Path.""   I couldn't find the above text in the above link, any idea where it is ?  I'd like to know what the NSA use for their own encrypted email."
crypto,2nfq6o,cunttard,2,Sat Nov 29 01:21:15 2014 UTC,Hmm... Has the article been edited? Or did I post the wrong link? Anyway here is the original source: https://www.nsa.gov/public_info/_files/cryptologs/cryptolog_126.pdf
crypto,2nfq6o,pred,1 point,Sat Nov 29 03:29:50 2014 UTC,"Decades of cryptologic research has been put into prime numbers, logarithms, and elliptic curves. I doubt a significant breakthrough has been made."
crypto,2nfq6o,pred,2,Wed Nov 26 10:11:13 2014 UTC,Very related.
crypto,2naw7z,coreyog,1 point,Mon Nov 24 21:23:10 2014 UTC,"can someone give me a hint on what kind of attacks exist on, say, a 128 bit LFSR? or 256 if that is better.  to OP: i assume you plan small counters, like 3-4 bit, and at least 128 bit LFSR state. what kind of attacks you hope to thwart?"
crypto,2naw7z,pint,0,Tue Nov 25 14:41:09 2014 UTC,"The Berlekamp-Massey algorithm can look at the output bits (the ones shifted out of the register) and determine the smallest size LFSR that would produce that series of bits. Once you have those bits and the size of the LFSR, you can effectively recreate the state of the register at any point in time since LFSRs can be shifted in both directions effectively being able to go ""forward"" or ""backward"" from any known state.  This modification I've discovered would require alterations to the Berlekamp-Massey algo. I haven't spent any time looking into how it would need to be modified because first I need to actually understand what I've stumbled into."
crypto,2n8guw,AndersLindman,3,Mon Nov 24 04:54:33 2014 UTC,How many rounds of hashing is used?  Have you read this: http://www.cs.rit.edu/~ark/lectures/casc01/casc01.pdf ?  http://books.google.com/books?id=S4lj9jsSP9sC&pg=PA28&lpg=PA28&dq=rule+30+stream+cipher&source=bl&ots=SFnBIBJLVo&sig=R2OMCn00lcp8FUNod8u3_Uq_D5Y&hl=en&sa=X&ei=RVx1VK6HM8r0igLuxIHICA&ved=0CEQQ6AEwBQ#v=onepage&q=rule%2030%20stream%20cipher&f=false ?
crypto,2n8guw,conradsymes,1 point,Wed Nov 26 04:46:23 2014 UTC,"I'm not sure what you mean by rounds of hashing. R30 uses a Merkle-Damgård construction with the same padding scheme as SHA-256. The input blocks and output block produced by the compression function are 256 bits long. In fact, the Rule 30 compression function itself can be used as a hash function with sponge property except the algorithm will then have poor speed performance. I will take a look at the links you posted.  ""Ralph Merkle and Ivan Damgård independently proved that the structure is sound: that is, if an appropriate padding scheme is used and the compression function is collision-resistant, then the hash function will also be collision resistant.[3][4]"" -- http://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction"
crypto,2n8guw,conradsymes,3,Wed Nov 26 07:10:40 2014 UTC,"MD5 is iterated 64 times, with 4 passes. Any cryptographic function needs to be iterated multiple times to have any sort of security.  http://imgur.com/mWIuBaK"
crypto,2n8guw,conradsymes,1 point,Wed Nov 26 07:18:36 2014 UTC,In R30 there are 7N generations of the cellular automaton calculated before the hash value is sampled. Stephen Wolfram has shown that doing cryptanalysis is likely to be difficult (reversing the calculations) when the values are taken sparsely from the center column of the cellular automaton.
crypto,2n8guw,conradsymes,3,Wed Nov 26 08:52:53 2014 UTC,Preimage does not equal collision attacks.
crypto,2n8guw,nawitus,1 point,Wed Nov 26 09:26:32 2014 UTC,"In the wiki page I have:  ""Preimage attacks  If an attacker knows only the hash value and tries to find a message that produces that hash value it's called a preimage attack. For R30 it's assumed that for essentially all hash values for which the message is unknown, it is computationally infeasible to find any message which hashes to that value.  Collision attacks  Collision attacks are attempts to find two different messages m1 and m2 such that hash(m1) = hash(m2). The pseudorandom distribution of the R30 hash values makes it computationally infeasible to find two or more messages that generate the same hash value."" -- https://github.com/AndersLindman/R30-hash-function/wiki#Preimage_attacks"
crypto,2n8guw,tom-md,3,Wed Nov 26 09:47:29 2014 UTC,"The pseudorandom distribution of the R30 hash values makes it computationally infeasible to find two or more messages that generate the same hash value.   Erm. Top cryptographers created a 256 round R30 hash function, and a faster than brute force collision search was still found for it. Considering you don't even know about rounds or collision attacks, it is dubious that you can create a decent algorithm."
crypto,2n8guw,conradsymes,1 point,Wed Nov 26 09:57:09 2014 UTC,"There are (at least) two tricky issues that must be taken into account. One is that the hash values must be taken sparsely enough or the inverse values can easily be calculated: http://s17.postimg.org/pla6ess1r/rule30_cryptanalysis.png  The other is that enough generations must be calculated, or the hash values will be far from random: http://s28.postimg.org/9880e22x9/r30_generations.png"
crypto,2n8guw,Captain_Ligature,0,Wed Nov 26 10:21:26 2014 UTC,"That's incorrect. Iterating a hash function multiple times is only necessary for storing a hash of a password, but there are other uses for a hash function. One example would be a MAC."
crypto,2n8guw,Captain_Ligature,1 point,Thu Nov 27 20:52:29 2014 UTC,"A cursory glance at the Java source (is that the spec?) suggests this does not use the same padding as SHA2.  For example, when provided with 31 bytes of input there will be no padding what-so-ever.  Even ignoring that possibly-pathological bug, no '1' bit padding is used - just a 64 bit little endian length field.."
crypto,2n8guw,totes_meta_bot,1 point,Wed Nov 26 07:55:22 2014 UTC,"Check out the line: if (BLOCK_SIZE_BYTES - blockBytesRead >= 8)  This means that if the message is 31 bytes, then an extra round of the Merkle-Damgård construction is needed and that extra round is padded.  And there is a 1-bit added in digestBlock()."
crypto,2n6aso,DatWackWorm,12,Sun Nov 23 16:24:28 2014 UTC,Interesting take on this by Rick Falkvinge: https://www.privateinternetaccess.com/blog/2014/11/whatsapp-encryption-shows-value-of-metadata/
crypto,2n6aso,escalat0r,4,Mon Nov 24 00:08:23 2014 UTC,I think they are keeping their app away from extinction by adding the encryption. After all the metadata is apparently where the money is.
crypto,2n6aso,escalat0r,1 point,Mon Nov 24 11:02:06 2014 UTC,Well another point to look at it is that Facebook didn't buy WhatsApp to make a profit but rather to prevent them from loosing profits or users.  Especially teenagers seem to prefer more direct means of communications across the board. And Facebook has the possibility to integrate WhatsApp into Facebook Chat (or vice versa).
crypto,2n6aso,escalat0r,2,Mon Nov 24 18:23:30 2014 UTC,"They wanna have the non existing mainstream chat monopoly? that's a viable idea, since encrypted communication is getting more important for the usual chat group."
crypto,2n6aso,aliceandbob,1 point,Mon Nov 24 22:04:37 2014 UTC,"That's right, alternatives are popping up left and right, I think I could easily name 6-10 projects from the top of my head and there have been slight user migrations towards other services althought Whatsapp is still the dominating chat app for the most part."
crypto,2n6aso,ixforres,5,Mon Nov 24 22:11:18 2014 UTC,WhatsApp has a terrible track record for security https://en.wikipedia.org/wiki/WhatsApp#Security
crypto,2n6aso,Uncaffeinated,5,Mon Nov 24 03:00:06 2014 UTC,The real value here is normalising encryption. If everyone's WhatsApp messages are encrypted people won't think anything of similar short form encrypted messages. And they'll have to work harder to block that.
crypto,2n6aso,bedsuavekid,3,Mon Nov 24 07:17:41 2014 UTC,Other sources: http://www.wired.com/2014/11/whatsapp-encrypted-messaging/ https://whispersystems.org/blog/whatsapp/
crypto,2n6aso,arbiterxero,3,Sun Nov 23 16:27:39 2014 UTC,Did they ever solve the problem of preventing the server from pushing an update that silently disables encrpytion?
crypto,2n6aso,paranoid_after,2,Sun Nov 23 21:37:54 2014 UTC,"Tell me more? I have auto-update switched off globally for all my apps, could such a thing still be done?"
crypto,2n5jp6,electronics-engineer,4,Sun Nov 23 08:36:23 2014 UTC,"What's the point? Even if NIST for some reason got reformed, there's not much reason to trust them anyway."
crypto,2n5jp6,Natanael_L,6,Sun Nov 23 14:54:30 2014 UTC,"There's a saying that goes like this:  Fool me once, shame on you. Fool me twice, shame on me.  How about we just ignore all NIST(NSA) ""secure"" standards. That would be the safest approach. Nobody knows which standards by NIST are actually safe unless you're a really good cryptographer and can understand everything going on at the lower levels. Most people are not at this level and the ones that are could be working for one of the intelligence agencies to promote the weak standards...  I know certain cryptographers have picked holes in Dual EC DRBG.The NIST curves are suspect according to Bernstein. AES 256 has a bad key schedule where Schneier recommends downgrading to AES 128 or doubling the number of rounds to maintain a safe security margin. SHA3 has issues with uneven distribution of bits in the output and low avalance effect.  I just don't see any reason to trust NIST now or in the future with their past track record. I also don't understand why anyone follows their recommendations anyway. Their mission is to make standards for the government's lowly-classified and less important systems. They're not put in charge of defense system standards (which is the NSA's job) and that in itself says everything.  Let's have new standards set by the world's best academic and industry cryptographers. They must all sign an anti-surveillance manifesto. Open voting by the majority. If there's even a whiff of one of them being a plant for the NSA or other Stasi like agency, they get blacklisted and their vote is nullified."
crypto,2n5jp6,bitwiseshiftleft,2,Sun Nov 23 23:51:39 2014 UTC,"References on SHA-3 cryptanalysis?  I wasn't aware that any significant weaknesses had been found in Keccak.  Also, I think you're being a little hard on NIST.  Dual-EC DRBG was a fuckup and almost certainly had an NSA backdoor in it, fine.  That's plenty of reason to distrust them in the future.  But Rijndael and Keccak were fine choices, even if not perfect ones.  And SHA2 was even written by NSA, but no attack on it is known, at least by the outside."
crypto,2n5jp6,bitwiseshiftleft,1 point,Mon Nov 24 03:39:13 2014 UTC,"Here you go: http://www.drdobbs.com/security/keccak-the-new-sha-3-encryption-standard/240154037?pgno=2  As for the ""open"" competitions, you can see how the ""winners"" were chosen here:  http://crypto.stackexchange.com/q/11104  The point being, don't take things at face value. Also ask yourself why would you use an algorithm specifically selected by your adversary (the NSA)? How do you know they didn't select it for some weakness which is unknown in academic circles?  After all, with the AES and SHA3 competitions, the NSA is essentially getting free cryptanalysis from the academic community and can compare that with the internal NSA cryptanalysis. Thing is they don't have to publish the internal analysis. It leaves them in a unique position to choose an algorithm which everyone else thinks is strong but they secretly have an attack on. Then they can push that as the standard. What they can even do is have secret NSA teams be involved in the competition who submit algorithms all with certain weaknesses/very subtle design flaws. If no-one in the academic community discovers them then they can finalise that standard as the winner. NIST(NSA) do have the final say on the winner after all. If you trust them to make your communications secure from even the NSA then you need your head checked."
crypto,2n5jp6,bitwiseshiftleft,1 point,Mon Nov 24 05:37:43 2014 UTC,"http://www.drdobbs.com/security/keccak-the-new-sha-3-encryption-standard/240154037?pgno=2   The author of that article has no clue what he's talking about.  The ""cascade"" tests returned results so horribly anomalous that if they were true, NIST (and everyone else) would immediately abandon Keccak as SHA-3.  Or else he screwed up the test.  I haven't run his code, but I took a gander at it and it isn't very good code.  In particular, its use of strlen on binary buffers could definitely cause the wrong statistics to come out.  His ""bias"" test is not significant with a sample size of 1.  With a sample size large enough to demonstrate a significant effect, Keccak would be broken (not technically as a hash, but as a sponge function) and again NIST would be forced to abandon it.   http://crypto.stackexchange.com/q/11104   The answer to that ""question"" is correct in shooting it down.  I agree with you that there are reasons to be wary of NIST.  But I do not believe that every one of their decisions was bad.  Also, NIST isn't NSA, and even at NSA not everyone is sabotaging crypto.  The government is big, and different groups are at odds with each other.  None of this is a reason to trust NIST, but please understand that they aren't the Devil."
crypto,2n5jp6,bitwiseshiftleft,1 point,Mon Nov 24 07:21:35 2014 UTC,"Perhaps someone else will do some tests with ""better"" code to confirm or deny his claims. We can't exactly take your comments as gospel without doing any proper analysis of your own now can we.   The answer to that question is correct in shooting it down.   The answer fundamentally agrees with the question actually. No open decision was made for the final winner. All the finalists could be reasonably considered strong.  As for NIST standards, as part of their MOU with the NSA, they have to consult the NSA for input on every standard. You can guarantee NSA have had their meat hooks in every standard. To what extent, that's not known. It's also not known whether NIST have any real cryptographers either or if they rely solely on the NSA. It's not even know if the cryptographers they do have are of high caliber either. Not if stuff like what they've been peddling gets through so easily. The best cryptographers are probably in the NSA and the ones in NIST are their copy writers.  I fundamentally disagree with your statement that we should trust the NIST. If their standards were any good they would have little to no problems even under years of intense cryptanalysis. There are always problems with their crap. Also there's definitely no reason to trust the NSA either who the NIST are in bed with."
crypto,2n5jp6,xJoe3x,1 point,Tue Nov 25 09:17:31 2014 UTC,"Perhaps someone else will do some tests with ""better"" code to confirm or deny his claims. We can't exactly take your comments as gospel without doing any proper analysis of your own now can we.   Dude, cryptographers (not just NIST!) have analyzed Keccak for 6 years now.  Pretty much any non-ideal property of either the permutation or the hash function is considered an attack.  The best known attacks cost 2200+ work for 8 of the 24 rounds.  But maybe it has a surprising weakness when fed Hamlet soliloquys.  To check this, I copy-pasted his test file into a JS SHA3 calculator, and nope, almost all the bytes change when you change an input byte.  So, nope, he screwed up.   The answer fundamentally agrees with the question actually.   No, it doesn't.  It points out that Rijndael was the best jack-of-all-trades, it won the informal votes at crypto conferences, and nobody hated it.  So it and SERPENT were the most obvious choices for the standard along.   I fundamentally disagree with your statement that we should trust the NIST.   I didn't say that we should trust NIST on everything.  Rather, I believe that many of the NIST standards (AES, SHA2, SHA3) are strong; and that Keccak in particular is a significantly more conservative hash than most alternatives (though Blake2 is much faster in software).  I also think that on the balance of evidence, the NSA probably didn't backdoor the NIST elliptic curves (they backdoored Dual EC DRBG, which is not a curve).  ""Probably"" isn't really good enough, and anyway we have better curves now (Edwards), so the NIST curves should still be replaced.   If their standards were any good they would have little to no problems even under years of intense cryptanalysis. There are always problems with their crap.   Really now?  No practical attack is known on the math of AES in any mode or key size.  No meaningful theoretical attack is known when it's used as designed (the mediocre key schedule only enables theoretical related-key attacks, and the traditional block cipher security model forbids the use of related keys).  AES still has a reasonable margin of security at all key sizes against theoretical attacks.  The side channel attacks on AES are annoying, but for some side channels other ciphers are much worse.  (Have you ever tried to defend an ARX cipher against power attacks?  It's a huge pain in the ass.)  No significant weakness is known in the NIST curves when used as designed.  There also cannot be a true backdoor in them.  Instead, a ""backdoor"" would consist of a secret algorithm known to NSA 15 years ago which breaks a large fraction (say 1/1M) of all curves, and can be detected and exploited by anyone who knows about it; but still no known property of those curves is suspect.  I find it amusing that the conspiracy theories are always about this sort of attack, and not that NSA just knows how to break every curve, and/or has a quantum computer, either of which is (IMHO) much more likely.  No significant weakness has been found in any of the SHA-2 algorithms, or in SHA-3.  The margin of security of SHA-3 is very high.  The only NIST algorithms which were broken, to my knowledge, were Dual EC DRBG (backdoored), DES, and SHA-0 / SHA-1.  SHA-0 was withdrawn almost immediately, and SHA-1 fell with its main competitor, MD5, but still hasn't been practically attacked at least on the outside.  DES was actually strengthened by the NSA, at least in some versions of the story, though possibly they also pressured IBM to reduce its key size."
crypto,2n5jp6,xJoe3x,0,Tue Nov 25 18:06:21 2014 UTC,"You focus a lot on the current lack of convincing public cryptanalysis and how that somehow means the ciphers are still secure from NSA, but you have no counter argument for my other arguments. In particular this: if they're in control of setting the encryption standards, why wouldn't they manipulate them in their favour so their secret BULLRUN program can defeat the encryption? If you read the leaked docs on the WP or Guardian archive you'll find a line similar to: ""define commercial crypto standards to be secure but amenable to NSA cryptanalysis"". AES and SHA3 will be no exception. The Clipper chip fiasco and export control regulations on crypto were long going on before AES appeared. They just figured out it would be easier to control the crypto if they can set the ""open"" standard more covertly. Public cryptanalysis just isn't good enough to figure out the weaknesses yet. Either that or they significantly underestimate their computing capability."
crypto,2n5jp6,oconnor663,2,Wed Nov 26 10:53:13 2014 UTC,"Like any conspiracy theory, the theory you advance is possible, and would be desirable to some (but not all) in power.  But it is unfalsifiable, and there is no evidence that it is correct, that is, there is no evidence that NIST manipulated AES or SHA3 or its EC, or that NSA meddled with these standards, or that NSA knows of weaknesses in them.  The NSA wrote SHA2, but there is no evidence that they backdoored it or have discovered a vulnerability.  Therefore I see little reason to believe or act on these theories.  What's more, AES and SHA2/3 are some of the best-reviewed crypto algorithms available.  By all means use SERPENT or Salsa20 or Chacha20 if you're concerned that AES might be weak.  The other ESTREAM finalists are probably no better than AES: Rabbit and Sosemanuk are known not to have 2256 security, the hardware ciphers are designed for 280 , and HC is too slow to initialize for most applications.  On the hash front, I would consider Blake2 to be too aggressive to recommend at this stage, especially for someone who is concerned that NSA can break SHA2/3, but maybe with more rounds it would be a good choice.  I haven't looked into older nonstandard hashes.  Curve25519 is a good curve for EC.  I hope that stronger curves (eg Goldilocks or E-521) will also reach that level of assurance, but I can't say they've done that yet."
crypto,2n5jp6,neutralinostar,0,Wed Nov 26 22:04:48 2014 UTC,"There's plenty of good alternatives. Twofish, Threefish and Serpent for block ciphers. Salsa20 and ChaCha20 as you mentioned. Perhaps original BLAKE, not the BLAKE2 variants which sacrifice security for speed. Skein is also a good hash. Abandon elliptic curves altogether for the inevitable QCs."
crypto,2n5jp6,autowikibot,1 point,Thu Nov 27 05:49:23 2014 UTC,Suggesting moving away from AES and sha is a terrible idea.  Good news is that isn't going to happen because the best cryptographers already use them.  Plus if you didn't know those types of agencies have some of the world's best people in the field which is why companies and standards bodies seek their input.
crypto,2n5jp6,xJoe3x,1 point,Mon Nov 24 04:18:38 2014 UTC,And you think they would never use that superior knowledge to take advantage of everyone else and decrypt their data? Ha. You must have been asleep all of last year.  http://www.wired.com/2013/09/nsa-backdoored-and-stole-keys/
crypto,2n5jp6,Natanael_L,0,Mon Nov 24 05:43:56 2014 UTC,"An article about the drbg! Oh no. How would I have ever known about that?  That is the only detail about a possible standards manipulation and it is still only labeled as possible.  The other stuff has nothing to do with standards and you don't need to break standards to exploit something.    On the other hands AES and SHA are long used, tested, and trusted algorithms.     Their mission is to make standards for the government's lowly-classified and less important systems. They're not put in charge of defense system standards (which is the NSA's job) and that in itself says everything.   Oh and you really should research first.  The NSA's program for using commercial products is based on NIAP standards documents.  If you read through the standards they publish, the standards rely heavily on NIST standards."
crypto,2n5jp6,xJoe3x,5,Mon Nov 24 10:44:03 2014 UTC,I had the impression that the AES and SHA3 processes were pretty transparent and trustable?
crypto,2n5jp6,Natanael_L,9,Sun Nov 23 17:03:52 2014 UTC,It's a call for a NIST where every standard they push is trustworthy.   See http://en.wikipedia.org/wiki/Dual_EC_DRBG
crypto,2n5jp6,xJoe3x,2,Sun Nov 23 17:49:03 2014 UTC,"Dual EC DRBG:       Dual Elliptic Curve Deterministic Random Bit Generator (Dual_EC_DRBG)  is a claimed cryptographically secure pseudorandom number generator (CSPRNG) standardized by ANSI, ISO, and formerly by the National Institute of Standards and Technology (NIST). Dual_EC_DRBG is based on the elliptic curve discrete logarithm problem (ECDLP) and was for some time one of the four (now three) CSPRNGs standardized in NIST SP 800-90A.  Sometime before its first known publication in 2004, a possible backdoor was discovered with the Dual_EC_DRBG's design, with the design of Dual_EC_DRBG having the unusual property that it was theoretically impossible for anyone but Dual_EC_DRBG's designers (NSA) to confirm the backdoor's existence. Doubts about Dual_EC_DRBG's security and performance had also been expressed even before it was standardized. Bruce Schneier concluded shortly after standardization that the ""rather obvious"" backdoor (along with other deficiencies) would mean that nobody would use Dual_EC_DRBG.  In 2013, New York Times reported that documents in their possession but never released to the public ""appear to confirm"" that the backdoor was real, and had been deliberately inserted by the National Security Agency as part of the NSA's Bullrun decryption program. The alleged backdoor would allow NSA to decrypt for example SSL/TLS encryption which used Dual_EC_DRBG as a CSPRNG.  In December 2013, a Reuters news article alleged that in 2004, before NIST standardized Dual_EC_DRBG, NSA paid RSA Security $10 million in a secret deal to use Dual_EC_DRBG as the default in the RSA BSAFE cryptography library, which resulted in RSA Security becoming the most important distributor of the backdoored algorithm.  RSA responded to this and subsequent media reports to ""categorically deny"" any insinuation that RSA had ever knowingly colluded with the NSA to incorporate a flaw in Dual_EC_DRBG, saying ""we have never kept [our] relationship [with the NSA] a secret"".  Members of the ANSI standard group, to which Dual_EC_DRBG was first submitted, were aware of the exact mechanism of the potential backdoor and how to disable it,  but did not take sufficient steps to unconditionally disable the backdoor. The general cryptographic community was initially not aware of the potential backdoor, until of Dan Shumow and Niels Ferguson 2007 rediscovery, or of Certicom's Daniel R. L. Brown and Scott Vanstone's 2005 patent application describing the backdoor mechanism.     Interesting: RSA Security | RSA BSAFE | Cryptographically secure pseudorandom number generator | NIST SP 800-90A   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2n5jp6,Natanael_L,1 point,Sun Nov 23 17:49:11 2014 UTC,"Just as an FYI, wiki seems to describe it as if it were confirmed.  It has yet to be confirmed that a backdoor actually exists.  All that has been confirmed is that the potential for a backdoor exists."
crypto,2n5jp6,Uncaffeinated,9,Sun Nov 23 18:09:59 2014 UTC,"The only way to confirm the existence for sure is another NSA leak, either of the private master key, or of documentation of its creation or usage.   But we know for certain that it would have been trivial for them to generate such a secret master key."
crypto,2n5jp6,xJoe3x,1 point,Sun Nov 23 20:41:18 2014 UTC,Yep. There probably will never be conformation and right now there is no evidence of such a key.
crypto,2n5jp6,Uncaffeinated,1 point,Sun Nov 23 20:59:02 2014 UTC,"Given their current exploits, I'm assuming they do have the key. They don't hesitate to hack allies, at all."
crypto,2n5jp6,xJoe3x,2,Sun Nov 23 21:06:06 2014 UTC,No examples of standards manipulation so I am not so sure. Either way no reason to use that algorithm anyway.
crypto,2n5jp6,Uncaffeinated,1 point,Sun Nov 23 21:17:32 2014 UTC,"In their minds they aren't the enemy, so a backdoored dual EC likely wouldn't be considered a bad thing. Unless the key leaks, only they can use it."
crypto,2n5jp6,xJoe3x,1 point,Sun Nov 23 21:40:07 2014 UTC,"It may as well be confirmed.  Say you come home and your door is forced open. You don't say ""oh well it could have been a strong wind. We won't know whether anyone was actually spying on me unless we catch the person and they confess""."
crypto,2n7i5r,Juno_Malone,5,Sun Nov 23 23:15:38 2014 UTC,Looks more like the control of a bot net. Probably closer to /r/numberstations than /r/crypto.
crypto,2n7i5r,qnxb,0,Sun Nov 23 23:59:10 2014 UTC,/r/solving_A858/
crypto,2n7i5r,OlderThanGif,2,Mon Nov 24 00:16:41 2014 UTC,This is dedicated to a different sub than was linked.
crypto,2n7i5r,omrsafetyo,1 point,Mon Nov 24 03:05:42 2014 UTC,"Oh crap, you're right!"
crypto,2n7i5r,OlderThanGif,1 point,Mon Nov 24 03:26:59 2014 UTC,Well I'll be damned. There really is a subreddit for everything. Thanks!
crypto,2n7i5r,omrsafetyo,2,Mon Nov 24 00:53:36 2014 UTC,It's actually a different sub. The sub you linked has nothing to do with the link above.
crypto,2n7i5r,cunttard,1 point,Mon Nov 24 03:05:20 2014 UTC,No. Probably /r/codes.
crypto,2n3q14,mczarnek,13,Sat Nov 22 19:43:19 2014 UTC,This sounds like you want a proof-of-work type system.
crypto,2n3q14,aydiosmio,3,Sat Nov 22 19:52:10 2014 UTC,"Proof-of-work system:       A proof-of-work (POW) system (or protocol, or function) is an economic measure to deter denial of service attacks and other service abuses such as spam on a network by requiring some work from the service requester, usually meaning processing time by a computer. The concept is due to Dwork and Naor.  A key feature of these schemes is their asymmetry: the work must be moderately hard (but feasible) on the requester side but easy to check for the service provider. This idea is also known as a CPU cost function, client puzzle, computational puzzle or CPU pricing function. It is distinct from a CAPTCHA, which is intended for a human to solve quickly, rather than a computer.     Interesting: Primecoin | Adam Back | Namecoin | Hal Finney (cypherpunk)   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2n3q14,autowikibot,1 point,Sat Nov 22 19:52:25 2014 UTC,"I was thinking that wasn't what I wanted.. but actually, maybe I do... will need to think about it."
crypto,2n3q14,jus341,6,Sat Nov 22 20:05:19 2014 UTC,Take a look at how the bitcoin protocol uses a difficulty value to adjust how much work is needed (on average) to find a valid hash.
crypto,2n3q14,Urnotmyprey,3,Sat Nov 22 21:20:39 2014 UTC,http://www.cypherspace.org/bitcoin/hashcash.html
crypto,2n3q14,pkpearson,8,Sat Nov 22 22:56:56 2014 UTC,"Factoring large integers.  Finding discrete logarithms.  Also, pretty much any algorithm that solves a problem that is NP complete is time-consuming to execute and cheap to verify.  Knapsack problem.  Lattice-basis reduction.  Go wild."
crypto,2n3q14,KevMar,7,Sun Nov 23 01:14:05 2014 UTC,I provide you with the first 64 characters of a 128 character string. You need to provide me the rest of the string that produces a sha256 hash that starts with 1F9A2  This is a proof of work example that requires several iterations to find a suitable answer but can be verified in one operation.
crypto,2n3q14,Ciphertext008,1 point,Sat Nov 22 23:59:23 2014 UTC,256 iterations of sha?
crypto,2n3q14,Gr4y,6,Sun Nov 23 05:04:12 2014 UTC,"No, sha256 refers to the SHA-2 hashing algorithm, but maps the results to 256 bits.  wiki. There are other mappings too (224, 256, 384, and 512 are ones referred to in the wiki)."
crypto,2n3q14,Ciphertext008,1 point,Sun Nov 23 05:19:58 2014 UTC,Thanks
crypto,2n3q14,KevMar,1 point,Sun Nov 23 06:02:40 2014 UTC,I intended for SHA-2 hash with a 256 bit output. Pick whatever your favorite hash is. You adjust strength adding more digits that the hash needs to match.  I could have said starts with e3b0c44298fc1c149afbf4c8996fb92427
crypto,2n3q14,Natanael_L,3,Sun Nov 23 05:24:29 2014 UTC,"Besides proof-of-work, there's the closely related timelock puzzles."
crypto,2n3q14,FryGuy1013,2,Sat Nov 22 23:07:21 2014 UTC,"One idea could be to take a normal hash (SHA2-256) of the data, and compute the discrete log of that number against some ""small"" group. The output would then be the number x such that 2**x === H(data) (mod p). It could be verified by calculating H(data) and 2**x, and verifying that they are the same mod p."
crypto,2n3q14,qnxb,2,Mon Nov 24 21:01:07 2014 UTC,"Verifying hashes is done by computing the hash of the given input and comparing it to the hash output provided.  Some public key algorithms are faster to encrypt than decrypt, such as RSA. In practice, RSA is done with a small public exponent ""e"" (3, 17, and 65537 are commonly used) and a large private exponent (a 2048+ bit prime). It's faster to cube a number than to raise it to a 2048 bit number."
crypto,2n3q14,Chodrick,1 point,Sat Nov 22 20:02:26 2014 UTC,"What about, say, the bcrypt or scrypt algorithms?"
crypto,2n3q14,Natanael_L,1 point,Sun Nov 23 01:45:47 2014 UTC,That assumes he'd be doing bruteforce against them
crypto,2n3q14,Godspiral,1 point,Sun Nov 23 08:43:57 2014 UTC,"Rabin williams and RSA (actually all public crypto) signing algorithms fit that requirement.  Rabin is basically providing the square root modulo n (with factors pq).  Its easy to verify that the square of that is the original message.  It is hard to calculate the square root without knowing p and q.  all asymetric crypto use such ""trapdoor"" functions."
crypto,2n4q9j,PolarBearITS,5,Sun Nov 23 01:58:45 2014 UTC,Wouldn't it be faster to md5 all words in the English dictionary or /usr/share/dict/words to see if there are any matches?
crypto,2n4q9j,derpyou,1 point,Sun Nov 23 02:18:35 2014 UTC,"I guess it would be. Question, are there any advantages to using the method above?"
crypto,2n4q9j,Natanael_L,1 point,Sun Nov 23 02:29:24 2014 UTC,"Your version is raw bruteforce, his is a dictionary attack****"
crypto,2n4q9j,nsa_at_home,2,Sun Nov 23 14:55:38 2014 UTC,"How certain are you that they are even MD5 hashes? If it's a secret message then it's more likely some form of encryption (maybe AES, considering they are in 16 byte segments?)."
crypto,2n4q9j,d4rch0n,1 point,Sun Nov 23 16:49:12 2014 UTC,"I really don't think they're MD5 hashes of words. If you google MD5 hashes of common words they'll bring up actual results... you can crack md5 with google. Try any word and add a digit and md5 it, then search for it and you will find it. The first five didn't come up through google.  Try something else."
crypto,2n4q9j,ScarfacePalmer,1 point,Sun Nov 23 02:35:21 2014 UTC,"One more thing, I assume you MD5'd the words with the added digit with an online hash generator!?     That'd perfectly explain why you actually find the hash with Google then, since the online tools usually add every hashed data in lists like the one I linked in my other post."
crypto,2n4q9j,ScarfacePalmer,0,Sun Nov 23 14:49:48 2014 UTC,"you can crack md5 with google.      LOL, nope. That's not 'cracking'. You're only looking up rainbow tables with that method, lists of words with the corresponding hash. That only works for hashes that have been calculated and put in one of these lists before.     Only because you couldn't find a matching hash in a table like this doesn't mean they aren't words.     Like I said before, we even tried to find a hash by hashing large dictionaries, several hundred MB in size, without any luck. But still that does not mean the hashes can't be words, it only means the correct word/phrase/text wasn't in the dictionary.     One of these rainbow table lookups is for example here.     Now if you still think that this is 'cracking' you should consider reading up on what a hash function is and how it actually works: Hash Function     (X-Post from /r/codes because you made the false claim that hashes can be cracked with google there as well)"
crypto,2n4q9j,d4rch0n,2,Sun Nov 23 14:10:55 2014 UTC,"Give me a bit more credit than that. What's your definition of cracking then? Using a table you generated yourself? Using a precomputed lookup table to find the password is cracking in my book, whether it's done with a google search or done manually.  Google has already crawled huge online tables like this here and this one here. I hashed them in a python interpreter, then googled the resulting hash.  In [1]: md5('chunky6').hexdigest() Out[1]: 'de2735741102ca660e6c12df3fb457a4'  In [2]: md5('forens1cs').hexdigest() Out[2]: '246e2d924100519b6b4136bb2d4c1a2e'   Common words should definitely show up, so those hashes are not common words, at least in the first five.  It looks like someone already found out it was 8 byte chunks of PI using only decimal digits, so there you go."
crypto,2n4q9j,ScarfacePalmer,-1,Sun Nov 23 17:33:58 2014 UTC,"What you explain is exactly 'Looking up hashes in a rainbow table'.    It doesn't matter who created these tables at all. The point is, it is not possible to 'crack' a hash with google and assuming it's not a hash at all only because you can't find it in a table is simply wrong.     'Cracking a hash' would mean to calculate the content from the hash, and that's impossible because the algorithm is a one-way function.     Else MD5 would be a very effective compression method as well: You'd take a large file and store the calculated hash only."
crypto,2n4q9j,superss2,2,Sun Nov 23 18:27:49 2014 UTC,"Wow be more pedantic. It's obvious that by ""cracking"" it they mean to find the input.  crack:   To overcome a security system or a component.    or   To solve a difficult problem.   Edit: So you're not even being pedantic, because you're wrong even by the dictionary definition. Their use was correct."
crypto,2n4q9j,d4rch0n,1 point,Sun Nov 23 21:29:14 2014 UTC,"There's cracking a hashing algorithm, and there's cracking a hash. It's used widely for cracking hashes, exactly how I'm using it, eg the ""Crack me if you Can"" contest, run by one of the best guys at this who cracks passwords and encrypted hard disks for a living.  This isn't exactly the place you would come to describe what the difference between a one-way function and a compression algorithm is unless explicitly asked."
crypto,2n1lso,based2,2,Sat Nov 22 01:52:05 2014 UTC,"From r/linux, the video: https://www.youtube.com/watch?v=aWmLWx8ut20"
crypto,2n1lso,AnAirMagic,1 point,Sun Nov 23 01:33:31 2014 UTC,"Not how I imagined Theo, based on his writing. No spittle at all."
crypto,2n1lso,TNorthover,3,Sun Nov 23 03:48:52 2014 UTC,"This presentation looks interesting and important, but Comic Sans.  Comic.  Sans."
crypto,2n1lso,justusranvier,2,Sun Nov 23 00:18:45 2014 UTC,"OpenBSD presentations are always in Comic Sans, they do it on purpose. I believe it's mostly to annoy people who seem to care more about what font the presentation uses than the technical details."
crypto,2n1lso,Soulwound,1 point,Fri Nov 28 20:50:30 2014 UTC,"I believe it's mostly to annoy people who seem to care more about what font the presentation uses than the technical details   Yes, everybody who has graduated from high school knows how to rationalize-passive aggressive behavior.  it's always the same story."
crypto,2n1lso,justusranvier,1 point,Tue Dec 2 00:34:36 2014 UTC,I believe you can fund OpenBSD or Theo and get them to use a proper font in exchange.
crypto,2n1lso,GahMatar,1 point,Mon Nov 24 18:41:17 2014 UTC,http://osvdb.org/show/osvdb/115595  http://osvdb.org/show/osvdb/115598
crypto,2n1lso,Natanael_L,1 point,Sun Dec 14 11:39:58 2014 UTC,https://news.ycombinator.com/item?id=8641315
crypto,2mzfgb,electronics-engineer,1 point,Fri Nov 21 13:52:55 2014 UTC,Isn't there a sub reddit dedicated to solving this terribly designed puzzle?
crypto,2mzfgb,dr3dg,3,Sat Nov 22 03:03:55 2014 UTC,Terribly designed?
crypto,2mzfgb,roooostishaw,1 point,Sat Nov 22 04:21:03 2014 UTC,A couple of intentional spelling errors and unintentional spelling errors does not a good puzzle make.
crypto,2mzfgb,dr3dg,4,Sat Nov 22 04:53:52 2014 UTC,"Eh, it makes it roughly true to historical form. Enigma-breakers had to account for spelling errors."
crypto,2mzfgb,VorpalAuroch,3,Sat Nov 22 09:11:00 2014 UTC,Are we talking about the same thing?
crypto,2mzfgb,sixstringartist,2,Sat Nov 22 06:23:02 2014 UTC,I'm surprised the CIA hasn't waterboarded the designer by now to determine the meaning of the last Kryptos panel.
crypto,2mzfgb,xkcd_transcriber,5,Sun Nov 23 16:07:20 2014 UTC,You mean like this?
crypto,2n0kk4,_veorq,1 point,Fri Nov 21 20:06:11 2014 UTC,"Hmm... Interesting point in this quote from the talk: “a back door for the government can easily —and quietly—become a back door for criminals and foreign intelligence services.”  I understand that cryptographic backdoors are useful in case of detecting terrorism etc. At the same time as the quote says, backdoors can also be used for dangerous purposes. To really be safe requires backdoor-free cryptography and letting governments deal with potential threats through other means such as side channel surveillance."
crypto,2n0kk4,AndersLindman,1 point,Sat Nov 22 00:55:23 2014 UTC,"Yes, yes and yes. I've shown (and proven to others) through action and examples the horrible conundrum we face with government backdoors.   The best example I can give is making a faux lock on the back door to your house so the police, EMT and fire department can ensure your ""security and wellbeing"" should something happen. It might benefit you one say because paramedics can find an easy way in should you have a heart attack, but that same faux lock on a back door is the easiest way for a criminal to come in, rob you, and shoot you should they so choose, and walk out."
crypto,2n0kk4,SSDD_P2K,1 point,Sat Nov 22 01:13:23 2014 UTC,"Another example I came to think of is that secure encryption is like having a private conversation between people without using technology. A backdoor is therefore like having someone always being able to listen to all private conversations on the planet! That's Orwellian.  At the same time I think it's good that authorities can do surveillance in cases of very dangerous activities. But then they can do physical surveillance instead of using cryptographic backdoors. Sure, it will cost a lot to do such manual surveillance perhaps, yet that's acceptable because it should only be used in rare extreme cases."
crypto,2n0kk4,AndersLindman,1 point,Sat Nov 22 09:29:19 2014 UTC,"One tidbit from the slides: http://malicioussha1.github.io  Modified SHA-1 code that behaves as standard SHA-1 does, with strong cryptographic, except that it's got a backdoor allowing the modifier to create arbitrary collisions.  Been discussed here: https://www.reddit.com/r/netsec/comments/2co9ji/sha1_backdooring_and_exploitation_malicious_sha1"
crypto,2n0kk4,prather_mcs,1 point,Sat Nov 22 02:13:34 2014 UTC,"Screwing up primitive implementations seems pretty uncommon, even if there's no startup known-answer tests.  I think. Uncommon edge cases like Blizzard's XSHA1 aside."
crypto,2n139z,AndersLindman,8,Fri Nov 21 22:41:51 2014 UTC,"I spent a few minutes looking over that code, and you are doing some really sketchy things. Most of them appear to be dirty work-arounds to avoid using your Feistel cipher in ECB mode. For example, it looks like you use different keys each time you invoke the Feistel cipher and you use a (low entropy!) salt together with some more key material (the string ""test"") to generate a sort of one-time pad that you xor into the resulting ciphertext.  These additions succeed in making it not obvious if a message block is repeated within a message or appears in two separate messages. It's great that you're thinking about these issues. But it doesn't do so in a way that's very efficient, and I am dubious about whether it's actually secure.  Read up on different modes of operation (https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation) to learn how to solve these problems efficiently and securely. The advantage that these modes have over your technique is that you can actually prove them secure under a reasonable set of assumptions. You also avoid the problems with restricting the message length.  A separate issue is padding. Currently, your encryption scheme uses a null character to mark the end of a message, and thus cannot accommodate binary data. You can fix this by using various padding schemes; PKCS #7 provides a common one (https://en.wikipedia.org/wiki/Padding_%28cryptography%29#PKCS7).  Now to answer your original question...  The best answer is ""sort of"". It's secure under the heuristic assumption that SHA256 is a so-called ""random oracle""; the ""Random Oracle Model"" basically says, ""We know SHA256 doesn't produce random values, but sometimes it's convenient to pretend it does, and in most cases this won't come back to bite us."" You are also implicitly making this same ""Random Oracle"" assumption in your round functions, which you compute using R_K(X) = SHA256(X xor K). (Where K is the subkey and X is the input).  A better way of constructing pseudo-random functions from hash functions is to use HMAC. (https://en.wikipedia.org/wiki/Hash-based_message_authentication_code). In your case, you might be okay with your current approach because your inputs are always the same length, and where the random oracle model really starts to break down is when you're hashing adversary-influenced strings of various lengths. (See length extension attacks, https://en.wikipedia.org/wiki/Length_extension_attack). But it's best to stick with methods that have already withstood a lot of  scrutiny and analysis.  Playing around with crypto can be fun if you're just doing it for fun or for educational purposes, but please don't ""roll your own crypto"" if you intend to protect yourself or others.  This answer went on for a while, so I'm sorry for the rambling. I hope you find it helpful, and I certainly hope I my comments were not discouraging."
crypto,2n139z,shiny_thing,1 point,Sat Nov 22 06:20:35 2014 UTC,"I think the salt value actually has pretty high entropy. Tricky to test the randomness of the salt values since the generation is really slow (about half a second for a single salt). The value hash('test') is only used in the demo to simulate a private key. That value will in a real application be replaced by a real 256-bit private key.  EDIT: Ok, the original salt value has somewhat low entropy probably and that's why the salt is 1024 bits. The value used in the cipher is a 256-bit hashed version of the 1024-bit salt. I meant that the hashed salt has high entropy."
crypto,2n139z,Natanael_L,6,Sat Nov 22 07:12:16 2014 UTC,Hashing low entropy inputs don't increase entropy.
crypto,2n139z,Natanael_L,1 point,Sat Nov 22 23:08:44 2014 UTC,"I believe it does increase the entropy (per bit) generally when a longer message is hashed into a shorter length. For example if the 1024-bit salt has an entropy of 0.7 bits per bit the 256-bit hash may have 0.9 bits per bit. Something like that.  In my application the Shannon entropy for the salt may be fairly high since it's generated by sampling the nanosecond computer clock with the jittery setTimeout() function. However, Shannon entropy is different than randomness because it only takes into account the independent probabilities of the bits.  Conditional entropy is maybe a little bit better measurement of randomness but even that is inadequate. Kolmogorov complexity takes into account all dependencies between the bits and is perhaps an even better measurement of randomness.  An extreme example is a string 0101010101010... which has maximal basic Shannon entropy H = 1, yet the string is totally ordered and an unlikely sample of a white noise stochastic process. In theory the ordered string is as likely as any other combination, yet there are much fewer ordered strings like that possible than ""unordered"" strings.  Here is a demo of the salt generator used in my cipher: http://jsfiddle.net/tc8kfnwm/"
crypto,2n139z,TNorthover,2,Sun Nov 23 02:56:31 2014 UTC,"Entropy density would be increased in the same way as if you ran compression in the data, if the hash algorithm shortens the data."
crypto,2n139z,cunttard,1 point,Sun Nov 23 08:31:45 2014 UTC,"I'm not exactly sure what entropy density means but it sounds similar to what I meant. The entropy per bit will generally increase for the hash value (digest) compared to the message. The total entropy of the digest can be less than for the message when the entropy per bit is higher for the digest than the entropy per bit for the message.  I estimate that the 256-bit hash of the salt I use has an entropy of close to 1 bit (per bit), and the 1024-bit salt slightly less than that. So as a 256-bit sequence it has enough entropy and randomness. One possible risk is that in some devices the performance.now() function is poor and returns too coarse nanosecond clock resolution. In practice I think it will work even in smartphones."
crypto,2n139z,cunttard,2,Sun Nov 23 10:15:50 2014 UTC,"Certainly not against all attacks. I think the key schedule is more a matter of ""don't cock it up"" than giving real strength to a cipher.  Differential and linear cryptanalysis for example peel off the key round by round, so the difficulty multiplier even from a perfectly independent key is just ""#rounds * #key-bits-per-round"". That's mostly lost in the noise even when you're talking about 250 vs 255 difficulty.  If the input key was sensitive for some other reason (itself a red flag), it would make recovering it more difficult even if your base cipher was comprehensively broken."
crypto,2n139z,cunttard,2,Fri Nov 21 23:16:58 2014 UTC,"To build a strong PRP at least a 4 round feistal network using distinct PRFs at each round I'm not sure if a (keyed) hash function, specifically SHA256, constitutes as a PRF."
crypto,2n139z,autowikibot,1 point,Sun Nov 23 04:57:56 2014 UTC,"Yes, I'm gradually learning about cryptography and I read that 4 rounds are enough when the round function is adequate. I use four rounds of SHA-256 in my cipher. That's likely too few for that hash function. The main trick however is that I use a stream cipher based on the Rule 30 cellular automaton on top of the Feistel cipher. Stephen Wolfram has done extensive research about that and shown that this cellular automaton can produce highly random sequences.  I use a Rule 30 hash function similar to: https://github.com/AndersLindman/R30-hash-function/wiki"
crypto,2n139z,cunttard,1 point,Sun Nov 23 05:10:21 2014 UTC,"My point stands, it is not clear whether keyed SHA256 constitutes as a PRF, unless you equate the hash function itself as a random oracle model."
crypto,2n139z,cunttard,1 point,Sun Nov 23 08:46:50 2014 UTC,"SHA256 seems to be fairly good as a (pseudo)random oracle. So I estimated that 4 rounds are enough in my case. I just want the Feistel cipher to obfuscate the plaintext a bit further and can be less than industrial strength. The combination with the Rule 30 cipher on the other hand is meant to instead of being industrial strength be intelligence agency strength. :D Meaning, that not even the NSA or the Chinese government etc should be able to break the encryption."
crypto,2n139z,conradsymes,3,Sun Nov 23 09:58:21 2014 UTC,"Bold claims, but you will need to prove it, if you want your cipher to hold up to scrutiny.  Like I said, a cryptographic hash function in general cannot be assumed to be a PRF. Simple counterexample: MyHash(x) = SHA256(x) || SHA2569(x). MyHash is a 512-bit hash function with the same security guarantees as SHA256. However it is clearly not pseudorandom."
crypto,2n139z,conradsymes,1 point,Sun Nov 23 10:21:29 2014 UTC,"Provable security:       Provable security refers to any type or level of security that can be proven. It is used in different ways by different fields,  Usually, this refers to mathematical proofs, which are common in cryptography. In such a proof, the capabilities of the attacker are defined by an adversarial model (also referred to as attacker model): the aim of the proof is to show that the attacker must solve the underlying hard problem in order to break the security of the modelled system. Such a proof does not consider side-channel attacks or other implementation-specific attacks, because they are usually impossible to model without implementing the system (and thus, the proof only applies to this implementation).  Outside of cryptography, the term is often used in conjunction with secure coding and security by design, both of which can rely on proofs to show the security of a particular approach. As with the cryptographic setting, this involves an attacker model and a model of the system. For example, code can be verified to match the intended functionality, described by a model: this can be done through static checking. These techniques are sometimes used for evaluating products (see Common Criteria): the security here depends not only on the correctness of the attacker model, but also on the model of the code.     Interesting: Mihir Bellare | Naccache–Stern knapsack cryptosystem | QUAD (cipher) | Computational hardness assumption   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2n139z,conradsymes,1 point,Sun Nov 23 10:21:38 2014 UTC,Are you suggesting I should use another round function? My assumption was that a decent hash function would be enough in my case.
crypto,2n139z,cunttard,2,Sun Nov 23 10:49:16 2014 UTC,"You can use HKDF to generate round subkeys and HMAC as the round function, since HMAC is a PRF (under specific assumptions).  Or you could just use AES, Twofish, Salsa20, etc."
crypto,2n139z,cunttard,1 point,Sun Nov 23 10:58:43 2014 UTC,But the end result of the HMAC calculation is an ordinary hash value. I don't see how that's significantly different than simply using hash(subkey xor x) as the round function. Especially since there is in my case no possibility of length extension (the subkey and x are both 256 bits long).
crypto,2n139z,cunttard,1 point,Sun Nov 23 11:29:34 2014 UTC,I don't see how that's significantly different than simply using hash   You should read Bellare & Rogaway's HMAC papers then (see link in previous post).
crypto,2n0ynu,AndersLindman,2,Fri Nov 21 22:01:02 2014 UTC,"Being independent of the block data is what makes it the key rather than some random other bit of the encryption process. If you come up with some other scheme, you're just pushing the key further out.  I suppose you could come up with a scheme where the key itself depends on something like the block sequence (rather than block data). But that's not popular: creating the key schedule is slow and related keys are a bit of a worry too (most study has focused on attacking a single key)."
crypto,2n0ynu,TNorthover,1 point,Fri Nov 21 22:24:40 2014 UTC,But doesn't that make AES weak? Because blocks with the same plain text will have the same ciphertext. And with statistical analysis it will be easy to figure out what the plaintext is for long messages. Or?
crypto,2n0ynu,FryGuy1013,3,Fri Nov 21 22:33:00 2014 UTC,That's what the IV is for. Look up block cypher modes: http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation
crypto,2n0ynu,chipsa,1 point,Fri Nov 21 22:55:59 2014 UTC,This is why you don't use electronic codebook (ECB) mode.
crypto,2n0ynu,Natanael_L,1 point,Sat Nov 22 14:38:39 2014 UTC,"Yes, I have now read about that. It sounds like a fancy and secure mode but the ECB mode is actually direct reuse of exactly the same subkeys for the raw plaintext. Just as the problem I described. And I read in articles that ECB is sometimes used in real cryptography application even today!"
crypto,2n0ynu,aydiosmio,1 point,Sat Nov 22 15:00:22 2014 UTC,Good intuition there. Look up the definitions of things like IND-CPA and others for some highly relevant concepts which all modern encryption strives to fulfill (formal definitions of how ciphertexts are supposed to be indistinguishable from random in various contexts). Hörs senare! :)
crypto,2n0ynu,pint,1 point,Sat Nov 22 23:11:38 2014 UTC,"Yes, but each mode has its own applications. CBC and CTR modes prevent re-use of the key material."
crypto,2myhts,coreyog,17,Fri Nov 21 05:25:42 2014 UTC,"From a cryptographic standpoint, LFSRs and modifications thereof are kind of weak and breakable (just search for cryptanalysis of A5/1 for example), and any claim of ""pseudorandomness"" properties of them is questionable and only used as a catchphrase.  They do exhibit nice coding-theoretic and information-theoretic properties (nice statistical ones), and if you are interested in the general subject area, a somewhat more cryptographically appealing thing would be to look at epsilon-biased generators or extractors.  However, from a math standpoint, what you observed I think might be pretty neat.   I'm tired of not knowing how this works.   What do you mean ""works""?  Do you mean the nature of your scheme working for certain numbers and not others and how it does complete cycles in the good cases?   One is a PDF with my attempt at a more technical paper explaining some of what I've figured out.    I get the intuition from reading this, but where is the math?  Or at least show an example and how things go step by step using a picture.  So here's my suspicion: your shifts and subshifts correspond to the interplay between two polynomials in GF(2)[x].  I would consider looking at something like   http://www.math.ias.edu/~goresky/pdf/Fib.jour.pdf  and trying to state your results in their language.  I do feel you are in a bit of a catch-22 situation here: anyone who is equipped to fully analyze your problem would also find it insufficiently interesting or consequential to spend their time on.  If you still want to goad people into tackling this problem, I think the best bet is to spend some time and distill it into a clean math problem, completely avoid talking about crypto or LFSR, and give ample, simple examples of ones that work."
crypto,2myhts,DoWhile,2,Fri Nov 21 10:15:19 2014 UTC,"LFSRs have maximal length sets of taps that are well understand and can be derived through some polynomial equations that meet certain criteria (that's my understanding at least). If I reuse my poor choice in words, these taps ""work.""  My definition of ""works"" is when an interval produces a maximal length SSLFSR given certain parameters (such as full register length, sub register length and location, and the taps used by the two registers. Apparently changing any of these will change which intervals ""work"").  For example, for an 8 bit LFSR with taps 0, 2, 3, and 4 (0 being the LSB) and a 4 bit sub LFSR with taps 0 and 1, with the 4 bit inner register existing as the 4 lowest significant bits of the full register, and both registers shifting towards the LSB, then 11 ""works"" by producing (2n-1)*(i+1) states, specifically that's (28-1)(11+1) = 3,060 states.  12 is not a ""working"" interval because it does not produce 3,315 states. Depending on where you start, it will produce a subset of those states. If you start at a different state not present in the first subset it will produce a different subset. If you find all subsets, they will add up to a total of 3,315 states, but they are mutually exclusive.  Maybe ""working interval"" could be more properly replaced by ""interval that produces a maximal length."""
crypto,2myhts,cunttard,3,Fri Nov 21 16:20:58 2014 UTC,"LFSRs are in fact just irreducible polynomials which is a fancy way of saying ""primitive with x as a generator of the field in polynomial basis.""  That the multiplication by x and reduction modulo a primitive polynomial can be expressed in linear terms (as a matrix multiplication or as a shift register) is convenient but doesn't change the nature of the operation."
crypto,2myhts,bitwiseshiftleft,2,Fri Nov 21 17:19:28 2014 UTC,"Not sure why you were downvoted. Pretty much how HAC describes it, see definition 6.8"
crypto,2myhts,pint,2,Fri Nov 21 20:32:06 2014 UTC,"It might also be that subshifting does not act like a polynomial in the standard basis, but the combination shiftx ssy has maximal period as a linear transform for some other reason."
crypto,2myhts,SarahC,3,Sat Nov 22 17:14:42 2014 UTC,This post is garbage because   [X] You are talking about a new clocking mechanism of a shift register without a diagram to speak to.
crypto,2myhts,SarahC,3,Fri Nov 21 17:17:07 2014 UTC,it is not possible that you received 23 upvotes for that weak material. real crypto stuff does not get that many. i call cheating on this.
crypto,2myhts,pint,1 point,Fri Nov 21 14:50:15 2014 UTC,What kind of systems could this be used in?
crypto,2mzygu,chiniwini,2,Fri Nov 21 17:03:17 2014 UTC,A direct link to the PDF here.
crypto,2n0r99,evess_arudem,2,Fri Nov 21 20:59:03 2014 UTC,"The important part is that the password is strong enough. Using key derivation helps by increasing the effort necessary to bruteforce the password. Using scrypt on the password to generate the AES key used for encryption would improve the security. Don't forget to use a strong cipher mode, GCM would be a good choice.  The best choice is probably too reuse an existing implementation of it, maybe even using the symmetric encryption function in GPG itself."
crypto,2n0r99,Natanael_L,1 point,Sat Nov 22 12:34:46 2014 UTC,"OK, thanks!"
crypto,2moed6,ManiacTwister,8,Tue Nov 18 16:44:47 2014 UTC,"So we're moving to an Internet where all browsing is encrypted and ""authenticated"", but certification standards are far more relaxed than what was envisioned when HTTPS was developed.  Does this mean that every time I browse to my bank I'll have to check the certificate manually, to make sure it's still certified by a relatively strict certification authority?    How are other people planning on achieving strong authentication (e.g., for banking) in this brave new world?"
crypto,2moed6,pkpearson,3,Wed Nov 19 04:59:02 2014 UTC,"Currently you trust all of the root certificates installed in your browser and operating system, and currently your browser will happily show you that friendly green badge if it sees a valid certificate from any of the trusted CAs.  So if you go to paypal.com and you get a cert signed by, let's say a Turkish CA it'll happily accept it.  To fix it you need to use pinning, to fix the initial connection problem you need something like perspectives."
crypto,2moed6,Pas__,3,Wed Nov 19 07:25:24 2014 UTC,"So if you go to paypal.com and you get a cert signed by, let's say a Turkish CA it'll happily accept it.   I'd guess we could actually improve the average certification standards by canning all CAs but Let's Encrypt. With 150+ ""trusted"" CAs there's bound to be a black sheep somewhere (be that corrupt, accidentally exploitable, or under control of a hostile nation)."
crypto,2moed6,Creshal,3,Wed Nov 19 13:55:18 2014 UTC,"Yes, indeed. You can just install the convergence Firefox extension and you get pinning + check on initial connection. But it doesn't seem to be officially active, though there are a few persevering folks keeping it up to date and working with the new browser versions: https://github.com/mk-fg/convergence"
crypto,2moed6,Pas__,0,Thu Nov 20 09:29:03 2014 UTC,"So if you go to paypal.com and you get a cert signed by, let's say a Turkish CA it'll happily accept it.   Actually, no.  In 2008, when Comodo made The Big Mistake, I went through my browser's root certificate database and un-trusted every root cert that would alarm me if I found it authenticating my bank's login page.  In the six years since, I've clicked thousands of ""Make an Exception"" buttons and caught no MITM operations, so it would be rather difficult for me to argue that the exercise has been worth the trouble.  And it's going to get worse as more web sites start encrypting while using not-very-strictly-certified certificates.   That's why I'm looking for a better strategy.  The last time I looked at certificate pinning, I couldn't find an implementation that looked usable.  Or maybe the right answer is to trust all the root certificates and just try to remember to scan the certificate chain when browsing to my bank.  Thanks for the links."
crypto,2moed6,pkpearson,2,Wed Nov 19 16:57:02 2014 UTC,"Most of the users won't get MITMed. Security is a numbers game. And even if you have only ~10 CA left from the ~70, you have 10 times the attack surface than necessary for each site.  Well, Convergence works for Firefox, get in touch with maintainers, advocate for others to run public perspective notaries, and so on.  You're welcome!"
crypto,2moed6,Pas__,4,Thu Nov 20 09:25:06 2014 UTC,"Assuming you've read this.  You need to ask your bank directly i.e. visit a local branch, then ask what their real SHA256 hash of the certificate is. If you don't trust SHA256 (which is designed by NSA) then ask for the full public key. It would probably help if you email their tech department beforehand so they have had time to prepare and deliver the true certificate information to their branches.  Then when you have the real certificate details, delete all the trusted CAs from a separate Firefox browser profile, then visit the banking site. Manually verify the fingerprint and public key. Save the certificate as trusted in future and you're done. Next time you load the page it would work seamlessly.  Then again, it's probably all pointless because NSA can access your credit card and bank account details anyway. But for other sites where you're transferring important files, sensitive data or communications then it might be worth the effort."
crypto,2moed6,Doomed,6,Wed Nov 19 06:42:15 2014 UTC,https://letsencrypt.org/howitworks/
crypto,2moed6,34895348573857348759,6,Tue Nov 18 19:34:19 2014 UTC,"Let’s Encrypt is a free, automated, and open certificate authority (CA), run for the public’s benefit.   Happy ""ENCRYPT ALL THE THINGS"" face   This is accomplished by running a certificate management agent on the web server.   SquintingFry-NotSureIfWant.jpg"
crypto,2moed6,phyzome,3,Tue Nov 18 21:56:34 2014 UTC,This is accomplished by running a certificate management agent on the web server.    I'll VM the shit out of this bro.
crypto,2moed6,Pas__,1 point,Tue Nov 18 22:33:55 2014 UTC,"This is accomplished by running a certificate management agent on the web server.   If your concern is that this is low security, let me point out that this would be for sites that would otherwise not have HTTP at all..."
crypto,2moed6,j1mcamp,1 point,Wed Nov 19 00:42:40 2014 UTC,"Yes, that's fair. If it makes it easier for ""just get it working"" developers to implement HTTPS then that's a net plus. But hopefully once it's working and shipped, they will have somebody who knows what they're doing replace the agent-dependent configuration with something with a smaller attack surface."
crypto,2moed6,disclosure5,1 point,Wed Nov 19 02:18:51 2014 UTC,Um? What's the problem with that?  It can be made pretty secure. (You can even subtract the human factor which is present in the big CAs.)
crypto,2moed6,pinkottah,5,Wed Nov 19 07:27:38 2014 UTC,"Looks great. I wonder if it will be able to provide wildcard certs, or just certs for a single domain."
crypto,2moed6,Pas__,4,Tue Nov 18 19:32:38 2014 UTC,"They have SANs listed as a TODO, so it seems likely."
crypto,2moed6,phyzome,1 point,Wed Nov 19 09:41:02 2014 UTC,"Its free, why not generate one for each hostname?"
crypto,2moed6,Pas__,6,Wed Nov 19 04:20:45 2014 UTC,Dynamic hostnames? Like <username>.some-service.org. (Such as blablabla.tumblr.com.)
crypto,2moed6,phyzome,1 point,Wed Nov 19 07:26:08 2014 UTC,I'm unclear on how lets-encrypt will present an HTTP resource on a running server in the general case. Or are they not going to address that?  (Maybe on another port?)
crypto,2moed6,Pas__,2,Wed Nov 19 01:40:10 2014 UTC,"Could you clarify your question a bit? What do you mean by presenting ""an HTTP resource on a running server""? Webservers do exactly this in the general case, don't they?"
crypto,2moed6,phyzome,1 point,Wed Nov 19 07:20:58 2014 UTC,"Well, let's say I've got my server running as a Clojure app using an embedded Jetty server -- something that lets-encrypt will not know how to talk to. It's already running on example.com on port 80 and people are using it, so I don't want to take it down in order to add HTTPS. I run lets-encrypt example.com and it wants to answer with a specific value when http://example.com/12345 is accessed. How does it negotiate with the Clojure service or Jetty library to serve this resource? (It certainly can't start its own service on port 80, that's already in use.)  So I'm wondering if it picks another port and hopes that's routable..."
crypto,2moed6,Pas__,1 point,Wed Nov 19 13:02:39 2014 UTC,"You put nginx in front of it, and then you drop the TLS key/cert into that. As is best practice anyway. 1 2  I mean we are talking about a CA, which issues digitally signed proofs of authenticity, so others can authenticate your responses (that is, they can make sure that they are authentic). Currently CAs charge quite a bit, the process is error prone, and so on.  The current code works with Apache, one of the most popular webservers out there."
crypto,2moed6,phyzome,1 point,Thu Nov 20 09:33:45 2014 UTC,"You put nginx in front of it, and then you drop the TLS key/cert into that. As is best practice anyway.   So... right, if I'm running a custom app I probably know how to divert some traffic on certain resources, but the question is how the push-button feature would work."
crypto,2moed6,Pas__,1 point,Thu Nov 20 13:41:02 2014 UTC,"Based on the repo, but wildly extrapolating, you are going to get a fire and forget solution. It'll probably ask you a few questions and install apache/nginx between your app and the web, generate a signing request and install the resulting cert.  This can be done reliably (so it'll work on major distributions, and for 90+% of the users and configurations) and it can probably increase security on the web, and if done right will force some shady actors to light when they try to push back against the freedom enabled by privacy.  Currently, the only hard thing that really matters, is who will and who won't include it in their trust store.   Mozilla Firefox has a rigorous, strict and fair assessment policy and process. Google Chrome and Android? I don't know, but you can count on them working out something. MS IE, who knows, they probably going to include it, but not backport it. Other Android vendors, like Samsung? Same as the MS IE case. Apple? Meh. They will eventually do it, of course, but usually even later than the others, but at least Apple users are used to upgrading both their hardware and software."
crypto,2moed6,phyzome,1 point,Fri Nov 21 00:53:45 2014 UTC,"Putting nginx between the app and the web would involve either rerouting the DNS, rerouting some sort of router elsewhere, or stopping and restarting the app.  (Or some kind of privileged operation to intercept TCP streams...)"
crypto,2moed6,Pas__,1 point,Fri Nov 21 01:03:56 2014 UTC,"The app is already listening on a TCP socket. You just route that to nginx and nginx talks to your app as its backend. (Something like this, but of course just notifying the admin/developer to change the port would be easier, but if you really want a one-click solution, then go for the iptables.)"
crypto,2moed6,nocnocnode,1 point,Fri Nov 21 02:05:05 2014 UTC,"Ah, there's clearly some stuff I don't understand about TCP, routing, and ports on POSIX systems."
crypto,2moed6,aliceandbob,1 point,Fri Nov 21 02:10:40 2014 UTC,Feel free to ask :)
crypto,2mt22j,UK_spikey,3,Wed Nov 19 20:54:09 2014 UTC,"A few topics you can research:   If you don't know how XOR works, learn that now! Learn exactly what this means: 0^0=0;1^0=1;0^1=1;1^1=0 (you'll find it with lots of programming stuff) symmetric encryption (eg ciphers AES, DES) asymmetric encryption or ""Public Key"" cryptography (eg RSA) Hash functions, or ""one-way functions"". Definitely recommend looking into it and saying something about it. (examples include SHA1, MD5, SHA256) cipher modes of operation, like ECB, CBC, CTR.  checking integrity of encrypted data. Has it been modified by a third party? How do you verify? Related to ""cryptographic signatures"", signing with a private key, hash functions and stuff like HMAC SSL/TLS, how they work, how and why they combine both forms. it's a bit more advanced topic, and I would only get into it if you need to dig deep into it. performance of algorithms, more advanced, but related to above.   Key things you'll need to know about are how to achieve secrecy/confidentiality, integrity, and authenticity. If you don't mention anything about each of those, you're not covering the basics of techniques. The stuff I said to research should definitely explain it at some point.  I'm trying not to give you a report, but help you get started on knowing what to research. If you bump into something that you're having trouble understanding I'm sure one of us can help explain it, but try to start slow and don't dig into stuff that is too advanced for your current knowledge. No one's going to help you understand AES malleability until you know what AES and the different modes of operation are.  Also, you might look into how AES was ""picked"" by NIST.  cheers!"
crypto,2mt22j,d4rch0n,2,Thu Nov 20 05:16:42 2014 UTC,http://www.amazon.com/Applied-Cryptography-Protocols-Algorithms-Source/dp/0471117099
crypto,2mt22j,sixstringartist,2,Wed Nov 19 21:20:10 2014 UTC,"What do you mean by ""techniques""? Do you mean something as high level as asymmetric vs symmetric or something a little more lower level like block vs stream cipher? You're quite obviously asking for homework help so you might as well tell us the exact words of the assignment."
crypto,2mt22j,marklarledu,2,Wed Nov 19 23:25:11 2014 UTC,"This is obviously homework..,but public key encryption is relatively easy to explain, something not many know and quite interesting."
crypto,2mt22j,fb2c49aac67f4b02f675,1 point,Wed Nov 19 21:16:15 2014 UTC,research time
crypto,2mt22j,musingswithawesome,1 point,Thu Nov 20 00:05:22 2014 UTC,http://www.cse.wustl.edu/~jain/cse567-06/ftp/encryption_perf/  Dated from 2005
crypto,2mt22j,xcallstar,0,Thu Nov 20 04:14:51 2014 UTC,Anything by Schneier
crypto,2mnkly,electronics-engineer,23,Tue Nov 18 10:42:19 2014 UTC,So we're back to trying to drive crypto work out of the US?
crypto,2mnkly,Innominate8,9,Tue Nov 18 13:07:09 2014 UTC,I'm sure there are plenty of other interested countries.
crypto,2mnkly,GeneralMalfunction,1 point,Tue Nov 18 15:59:47 2014 UTC,"Unlikely, this is a specific case. If your products are ""mass market"" software that is not a development kit, the registration process is generally easy and you are unlikely to encounter any difficulties."
crypto,2mnkly,yuhong,9,Mon Dec 8 07:36:20 2014 UTC,"As a US citizen who contributes to the Bouncy Castle library, should I be concerned about my past and/or future contributions? My contributions consist of block modes, wrap modes, and MACs, all built on top of existing cryptographic primitive implementations (e.g., AES). In other words, I haven't yet implemented the underlying cipher or hash algorithm but I may in the future (if it won't get me in trouble with the law)."
crypto,2mnkly,marklarledu,5,Tue Nov 18 19:13:39 2014 UTC,"IANAL, etc..  Bouncy Castle states their encryption classification here  In the most basic of explanations: the Export Administration Regulations (EAR) have exceptions in place for open source software; wherein you ""notify someone"" stating what it is you're doing (usually the project and its origins) and where it can be found on the internet. In most cases these projects fall under ECCN 5D002 and in certain situations, ECCN 5D992.  The Apache Software Foundation has a good explanation of the process involved"
crypto,2mnkly,cabrel,2,Wed Nov 19 06:16:43 2014 UTC,Thanks!
crypto,2mk1kk,ddddavidee,5,Mon Nov 17 13:18:25 2014 UTC,"If you haven't seen them yet, Matasano has put together some great challenges for Crypto and reversing:  http://cryptopals.com/   https://microcorruption.com/"
crypto,2mk1kk,Zmetta,3,Mon Nov 17 13:29:06 2014 UTC,"the embedded lock CTF (second link) was so fun, but it got quite challenging at the end"
crypto,2mk1kk,pzl,1 point,Mon Nov 17 18:34:04 2014 UTC,"The second one it was very easy to hit a brick wall where it wasn't possible to advance because you didn't know some trick, and there wasn't any help. The cryptopals were generally pretty straightforward with little trickery. Most of the challenge is implementation, and maybe see one subtlety that was heavily hinted at."
crypto,2mk1kk,FryGuy1013,1 point,Tue Nov 18 21:26:55 2014 UTC,The mention alone of how challenging it is pisses me off with the fury of a million cow farts to the ozone layer because I remember that frustration.
crypto,2mk1kk,SSDD_P2K,3,Sat Nov 22 01:25:10 2014 UTC,Thank you! This is exactly what I have been looking for to go along with Dan Boneh's coursera course.
crypto,2mk1kk,Urnotmyprey,1 point,Tue Nov 18 03:02:56 2014 UTC,"Thanks, I'm working on the first set of the first link!"
crypto,2mk1kk,lynxjerm,2,Mon Nov 17 17:04:35 2014 UTC,I'll add a link: https://ctftime.org/
crypto,2mk1kk,yotta,2,Mon Nov 17 14:31:21 2014 UTC,Wargame for cryptanalysis against classical ciphers:  http://overthewire.org/wargames/krypton/  CTF archive with many containing crypto challenges: http://repo.shell-storm.org/CTF/
crypto,2mk1kk,yotta,2,Mon Nov 17 15:05:51 2014 UTC,"I made these for OpenCTF at this year's DEFCON  https://github.com/openctf/openctf-2014-dc22/tree/master/challanges/blacknet (solved by 1 team)  https://github.com/openctf/openctf-2014-dc22/tree/master/challanges/riskycipher (not solved, even after we posted source)"
crypto,2mk1kk,0day1337,1 point,Mon Nov 17 16:48:39 2014 UTC,"thanks, how does it work the second link? The README says something about a long password and the IP adress has been removed. Is it still doable?"
crypto,2mk1kk,skintigh,2,Mon Nov 17 17:05:57 2014 UTC,"Yeah, you just need to compile the server (make will do it) and run it yourself somewhere (same computer is fine). run.sh has our config from the contest where it was running in a freebsd jail, but you can just do  ./server `dd if=/dev/urandom bs=1 count=24 | base64` flag 19344   The solution does not involve recovering the password."
crypto,2mk1kk,Uncaffeinated,2,Mon Nov 17 17:31:01 2014 UTC,Thanks! I'll try to solve it
crypto,2mk1kk,pe3zx,1 point,Mon Nov 17 20:43:06 2014 UTC,Hey man! We've met at defcon before. Just thought I'd say hi!  I met you through some other people.
crypto,2mlte7,monican_agent,1 point,Mon Nov 17 22:46:55 2014 UTC,"While reddit doesn't forbid it's own link shortener, it does seem pretty silly here. (What is the subreddit name? Can't find without clicking, so I guess I won't know...)"
crypto,2mlte7,phyzome,1 point,Tue Nov 18 13:06:04 2014 UTC,It goes here;  http://www.reddit.com/r/cypherpoker/comments/2mlsxl/cypherpoker_r9_multithreading_host/
crypto,2mlte7,Natanael_L,1 point,Tue Nov 18 15:02:47 2014 UTC,"It's ""cypherpoker"": https://www.reddit.com/r/cypherpoker/"
crypto,2mj0w3,ninguem,1 point,Mon Nov 17 03:55:20 2014 UTC,"From the NSA document: ""The conference again offered an interesting view into the thought processes of the world’s leading “cryptologists.” It is indeed remarkable how far the Agency has strayed from the True Path.""  I suspect people at the NSA and in other classified areas use another kind of math and science than in the public scientific community. For example finite field algebra is probably too limited and that more general math is possible. And that the ""provably secure"" cryptography in the public academic world is based on theoretical assumptions that are unfounded.  "" Provable Security?  The framework is very pretty, but can fail in multiple ways—as Neal points out in his papers. Let’s take a look at what can go wrong. It is convenient to do this in reverse order of the parts of the framework: the theorem first, then the attacks, then the hardness assumption, and finally the protocol."" -- http://rjlipton.wordpress.com/2010/03/13/breaking-provably-secure-systems/"
crypto,2mhgoy,Kakoose,14,Sun Nov 16 18:53:03 2014 UTC,"Lesson to be learned: if you want recognition, publish your work."
crypto,2mhgoy,trrrrouble,11,Sun Nov 16 20:53:22 2014 UTC,"I'm just glad ""Did you use Cocks?"" isn't a question I have to hear regularly."
crypto,2mhgoy,badredditjame,0,Sun Nov 16 22:23:23 2014 UTC,The one thing we can thank the GCHQ for.
crypto,2mhgoy,3pg,5,Mon Nov 17 06:26:04 2014 UTC,It is also worth reading up on his colleagues at GCHQ. Clever bunch.
crypto,2mhgoy,R-EDDIT,1 point,Sun Nov 16 19:39:18 2014 UTC,"The Epilogue of Stephen Levy's ""Crypto"" recounts Ellis and Cook's parallel earlier discoveries of public key/private key cryptography."
crypto,2mhgoy,Ar-Curunir,3,Sun Nov 16 20:10:57 2014 UTC,"Same was the case with Diffie Hellman, it was discovered at GHCQ a few years prior to DH doing it."
crypto,2mhgoy,cunttard,6,Sun Nov 16 20:02:55 2014 UTC,"And... Identity Based Encryption, again by Clifford Cocks."
crypto,2mhgoy,autowikibot,1 point,Sun Nov 16 21:01:52 2014 UTC,"ID-based encryption:       ID-based encryption (or identity-based encryption (IBE)) is an important primitive of ID-based cryptography. As such it is a type of public-key encryption in which the public key of a user is some unique information about the identity of the user (e.g. a user's email address). This can use the text-value of the name or domain name as a key or the physical IP address it translates to.  The first implementation of an email-address based PKI was developed by Adi Shamir in 1984,  which allowed users to verify digital signatures using only public information such as the user's identifier.  ID-based encryption was proposed by Adi Shamir in 1984.  He was however only able to give an instantiation of identity-based signatures. Identity-based encryption remained an open problem for many years. One example of the research leading up to identity-based encryption is provided in Maurer.     Image i     Interesting: ID-based cryptography | Attribute-based encryption | Certificate-based encryption | Key authentication   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2mhgoy,shivadance,-2,Sun Nov 16 21:02:35 2014 UTC,"I have a friend within NSA. Their take on this is that Clifford Cocks (and others like him working for the government instead of the private sector) are heroes. They selflessly provide the tools used by the government to protect national secrets.   I can see their point. Just like a teacher who could be making more in the private sector but chooses to teach for the common good, government employees sometimes have the choice between the private sector and serving the common good. I have a distrust of how those skills are used sometimes by the government, but I would not try to take away from this achievement by saying it would have been better had Mr. Cocks gone public. And I think that probably he feels the same way, that he made a choice for what he sees as the higher good. And without being naive, I like to think that the government does use this technology for good at times.   TL;DR: There is heroism in this."
crypto,2mhgoy,cunttard,8,Mon Nov 17 03:15:49 2014 UTC,there is no heroism in keeping knowledge secret so that governments can exert more force on people
crypto,2mhgoy,rowboat__cop,1 point,Mon Nov 17 12:53:37 2014 UTC,"Except Cocks findings were pretty much filed away until RSA/DH. From this wiki page:  Diffie asked Ellis ""Tell me how you invented public-key cryptography"". After a long pause, Ellis replied ""Well, I don't know how much I should say. Let me just say that you people made much more of it than we did."""
crypto,2mhgoy,pint,1 point,Mon Nov 17 04:20:23 2014 UTC,"They selflessly provide the tools used by the government to protect national secrets.   “Selfless”, as in not getting paid? A true sacrifice."
crypto,2mhgoy,aris_ada,1 point,Mon Nov 17 07:13:58 2014 UTC,misplaced
crypto,2mhgoy,shivadance,1 point,Mon Nov 17 09:05:27 2014 UTC,"I don't really see how providing a secret encryption mechanism to your country and hide it from the general public is being an hero, but I guess that depends on the point of view."
crypto,2micr9,MrZuru,10,Sun Nov 16 23:55:42 2014 UTC,"Lawyer here.  First, we don't have anything like this in the U.S. (it's more of a European thing, if I recall correctly). Instead, judges will issue court orders demanding the disclosure of your password if there's a reason for it. (So, the police don't get to randomly search through your computer, but if there's a reason that they should then the judge can compel you to give them access.)  Second, the Fifth Amendment typically fails when asserted in this context. The rationale is that you're not actually incriminating yourself by providing the key, any more than you're incriminating yourself when you open the door for the police to execute their search warrant. The Fifth Amendment protects you from having to provide direct testimony against yourself; it doesn't give you the right to hide evidence."
crypto,2micr9,Alrik,4,Mon Nov 17 02:17:38 2014 UTC,"What does the law say when I refuse to provide the combination to my safe, or (a more apt analogy) when I refuse to decode my diary?"
crypto,2micr9,JoseJimeniz,2,Mon Nov 17 05:28:24 2014 UTC,"The law (precedent, actually) explicitly says that you can be compelled to provide a safe combination, and also that you cannot.  Its apparently still up in the air.  You can, however, be forced to provide a physical key; only the ""something you know"" aspect is currently disputed.  Sources:    http://www.policeone.com/legal/articles/7108215-4-court-cases-on-decryption-and-the-Fifth-Amendment/ http://www.uclalawreview.org/?p=5168"
crypto,2micr9,xJoe3x,2,Mon Nov 17 15:51:47 2014 UTC,Also I think they can physically break into the safe if you don't provide the combination.  Right?
crypto,2micr9,Natanael_L,2,Mon Nov 17 16:19:53 2014 UTC,They sure can try.
crypto,2micr9,BuffyButtcoinSlayer,3,Mon Nov 17 19:53:43 2014 UTC,"Except when you say the key itself may be incriminating. As in, the key is a passphrase stating an admission of guilt to a crime I may have committed. ""1 jaywalk everyd@y."""
crypto,2micr9,Alrik,2,Mon Nov 17 13:06:05 2014 UTC,"That exception only works if (a) it's testimony relevant to the case at hand; and (2) it's actually testimony.  So, if your password was the location of the body, you might be able to use that argument, but something like ""i <3 murder"" or ""1 jaywalk everyd@y"" probably wouldn't cut it.  Oh, and if you're actually asserting the Fifth Amendment like this, odds are that you'll still have to disclose it to the judge (in chambers, so it won't be disclosed in open court), who will then decide if it's properly covered by the Fifth Amendment."
crypto,2micr9,PoorOldBill,2,Mon Nov 17 23:08:55 2014 UTC,1 jaywalk everyd@y.   I tried this as your reddit password.  Was disappointed.
crypto,2micr9,Natanael_L,1 point,Fri Dec 5 01:37:41 2014 UTC,"1: They can reject that claim.  2: They can force you to enter it yourself, without them necessarily seeing it."
crypto,2micr9,CipherBit,2,Mon Nov 17 19:54:33 2014 UTC,"The 11th Circuit Court of Appeals has ruled that a defendant (or an individual defending against a subpoena) may invoke his/her Fifth Amendment privilege.  Based on that privilege, the defendant may refuse to provide the court (or law enforcement) with his/her cryptographic key and cannot be forced to provide the decrypted content.  The court recognized two exceptions where the act of production is not testimonal and thus outside the scope of the Fifth Amendment: (1) where the Government merely compels some physical act, i.e. where the individual is not called upon to make use of the contents of his or her mind; and (2) under the ""foregone conclusion"" doctrine, an act of production is not testimonial—even if the act conveys a fact regarding the existence or location, possession, or authenticity of the subpoenaed materials—if the Government can show with ""reasonable particularity"" that, at the time it sought to compel the act of production, it already knew of the materials, thereby making any testimonial aspect a ""foregone conclusion.""    Some invocations of Fifth Amendment privilege fail because the facts or circumstances fall into one or both of those exceptions.  However, that shouldn't discourage someone from invoking the privilege and refusing to provide his/her decryption key."
crypto,2micr9,phyzome,1 point,Mon Nov 17 21:40:38 2014 UTC,"I'd have real trouble remembering my password under court order -- anxiety makes it more difficult to remember things, and my password is mostly muscle-memory at this point. (In the wrong setting, I can't type it.) So basically I'd be screwed?"
crypto,2micr9,Alrik,3,Mon Nov 17 14:29:12 2014 UTC,"Yes. It turns out that the ""I can't remember"" excuse isn't particularly good -- if they can show that you were using it frequently last week, saying that you can't remember it today probably won't fly."
crypto,2micr9,phyzome,2,Mon Nov 17 23:09:43 2014 UTC,"So, no acknowledgement of setting? Yikes."
crypto,2micr9,Zenblend,2,Tue Nov 18 02:51:05 2014 UTC,"It seems that one would be able to deny any knowledge of a system being encrypted or at least of its password. How can LEO prove that a specific suspect was the one who set it up? Unless they witnessed the suspect entering in a password, how can they prove they know it at all?"
crypto,2micr9,flarkis,2,Mon Nov 17 13:56:43 2014 UTC,"Some crypto systems like LUKS have headers that make it 100% provable that it exists. Past that one should always assume that the courts will assume something that looks encrypted is. The EFF for example recommends against crossing borders with and data which looks sufficiently random enough to be encrypted data.   Most modern cryptographers don't bother with hidden volumes. In a system that can contain hidden volumes the courts would probably always assume that there are hidden volumes, placing those without hidden volumes in danger."
crypto,2micr9,Godspiral,1 point,Tue Nov 18 06:13:42 2014 UTC,"Do key disclosure laws apply to signatures?  If so, how can you prove that something was signed by a person instead of state oppressors?  Does it also apply to cryptocurrencies?  And would it be fair to call cryptocurrencies signature rather than encryption based?"
crypto,2micr9,convivialdingo,1 point,Mon Nov 17 01:53:57 2014 UTC,Can this apply to ephemeral keys? Hmmmm
crypto,2micr9,Natanael_L,1 point,Mon Nov 17 18:46:59 2014 UTC,"They should, it's not like you are capable of recovering them."
crypto,2micr9,sovereignindividual,1 point,Mon Nov 17 19:57:08 2014 UTC,"what happens if you legitimately forget the password? Similarly, how can the authorities prove you haven't forgotten the password?"
crypto,2micr9,Natanael_L,1 point,Mon Nov 17 18:47:22 2014 UTC,In the UK they'll just put you up for contempt of court if they don't believe you.
crypto,2micr9,sovereignindividual,1 point,Mon Nov 17 19:57:29 2014 UTC,surely there is a burden of proof?
crypto,2micr9,Paran0idAndr0id,0,Mon Nov 17 23:21:57 2014 UTC,"No, by all means write your password down, just eat the piece of paper before they ask for it."
crypto,2micr9,Paran0idAndr0id,2,Mon Nov 17 00:16:30 2014 UTC,"Yeah, then let them get you on tampering with evidence and obstruction of justice."
crypto,2micr9,Paran0idAndr0id,0,Mon Nov 17 02:18:59 2014 UTC,"Nice try FBI, that's not how the law works. They can't pin you for those charges if you ate a small piece of paper before they even saw or arrested you. How are they going to prove that the super long passphrase was on that bit of paper in the first place?"
crypto,2mfr7t,electronics-engineer,7,Sun Nov 16 03:34:31 2014 UTC,"The actual article can be found here: http://www.theguardian.com/technology/2014/nov/14/how-did-enigma-machine-work-imitation-game  The article mentions virtually nothing about how the crypto works, just that it's a box with electronics and blinking lights. If one wants to understand the Enigma, how it was broken and how the research has continued for the past 70 years in a fast moving field, one ought to look it up on Wikipedia instead.  Even more information, especially about the math or current related research, can be found by entering the following query into one's favorite search engine:  enigma host:iacr.org  (the default search engine on IACR's site is Google)"
crypto,2mfr7t,3pg,4,Sun Nov 16 05:28:27 2014 UTC,http://enigmaco.de/enigma/enigma.html  An online enigma emulator (3 rotor).
crypto,2mf0gc,bbblgm,7,Sat Nov 15 22:41:47 2014 UTC,"There are plenty on Github that go the whole way, the catch is there doesn't seem to be an easy way to search and you basically have to brute force search for them. There's a frustrating number of Github repos entitled ""Completed matasano challenge"" and then you find they've only completed set 1. Then there's the fact that solutions in certain languages make you want to burn your eyes out.   I completed the original six sets here. I've tried seven but real world interferences have paused that, so it depends how ""complete"" you need it.  https://github.com/technion/matasano_challenge  I'd really like to a see a forum for these challenges. There are a lot of questions I have around ensuring I've understood the correct avoidance mechanisms that I haven't wanted to flood this place with."
crypto,2mf0gc,disclosure5,2,Sat Nov 15 23:54:18 2014 UTC,"This is great thanks. I did find some others, know what you mean about the eyes."
crypto,2mf0gc,CommissarBas,2,Sun Nov 16 01:58:34 2014 UTC,"As you are saying, we really need some sort of platform for this. Even the basic base to hex (or whatever it was) isnt that simple. Would be nice if some background could be explained somewhere. Maybe even Reddit!  I still need to start them. Want to use them to learn Python properly."
crypto,2mf0gc,disclosure5,1 point,Sun Nov 16 02:17:00 2014 UTC,"Want to use them to learn Python properly   The one ""good"" solution that I referred to while working on mine in Python.       https://github.com/reschly/cryptopals     Note, I don't know any Python at all, so I can't comment on the Python skills there."
crypto,2mf0gc,ctz99,2,Sun Nov 16 09:20:22 2014 UTC,https://github.com/ctz/cryptopals  Are mine. Sets 1-7 inclusive. Mix of C and python.
crypto,2mf0gc,disclosure5,2,Thu Nov 20 01:52:27 2014 UTC,"Congratulations, that's the first complete set 7 I've found anywhere."
crypto,2mf0gc,TheSuperficial,1 point,Thu Nov 20 04:03:00 2014 UTC,"This doesn't help you a lot right now,  but I am 98% sure that I saw Matasano's Thomas Ptacek (maybe on HN?) say that they are planning on releasing all of the solutions at some point not too far into the future.  But more importantly, I think TP said that Matasano (or Ptacek personally) was planning on penning a book with all the challenges inside.  I know I saw this somewhere, I just can't dig it up right now..."
crypto,2mf0gc,PositivePeter,1 point,Sun Nov 16 04:38:45 2014 UTC,"Yes, Tom & Alex were definitely planning on releasing solutions. But it's likely that their efforts are a bit stalled. I wouldn't sit around waiting for the solutions to be posted. I think the main reason was that they created the website with plans to post all their solutions in somewhat short order, but realized afterwards that combing through hundreds of submissions, contacting the authors, and cleaning them up was going to be a massive effort (including the fact that most people probably wrote their own ""utility"" libraries so it's hard to get a one-page solution). Of course this is all speculation, but regardless Tom recently moved from Matasano to start a new non-security company. Basically, not worth waiting around for."
crypto,2mf0gc,FryGuy1013,1 point,Sun Nov 16 06:02:21 2014 UTC,Here are mine in c#: https://www.dropbox.com/s/4fo1c6kyav70x57/MatasanoCrypto.7z?dl=0
crypto,2mdij1,wazzzzah,3,Sat Nov 15 12:31:06 2014 UTC,"Could a 1 qubit computer factor the number 2, or does it need 2 qubits?  Could you argue that a 2048 bit RSA key is more quantum proof than a 256bit ECDSA key?  On the principle that a 2048 or 4096 qubit computer will be more difficult and expensive, and more years away, than a 256 qubit quantum computer?"
crypto,2mdij1,Godspiral,0,Sun Nov 16 04:37:04 2014 UTC,I doubt a 1000 qubit computer could factor the number 2.
crypto,2mdij1,3pg,1 point,Sun Nov 16 05:58:04 2014 UTC,"I'm not familiar with the quantum algorithm for factoring (shorr), but are you just making a snark remark about feasibility, or does the algorithm require many qubits per log2 n?"
crypto,2mdij1,Godspiral,0,Sun Nov 16 06:32:40 2014 UTC,"2 is a prime. By definition, it can't be factored."
crypto,2mdij1,3pg,1 point,Sun Nov 16 06:34:42 2014 UTC,"I meant return the answer 1 and 2, or ""prime"" but how many qubits to factor 4 if you prefer?"
crypto,2mdij1,Godspiral,2,Sun Nov 16 06:37:45 2014 UTC,15 has been factored by a few qubits (less than 10). I've heard of an estimate of 40000 qubits using surfac code to factor commonly used RSA keylengths.
crypto,2mdij1,fb2c49aac67f4b02f675,1 point,Sun Nov 16 08:18:38 2014 UTC,"looking into this this morning, from the talk page at  https://en.wikipedia.org/wiki/Shor%27s_algorithm  there is a claim that RSA-4096 requires almost 5T quantum gates (which I understand require at least 4 qubits each).  Furthermore, implementing shor's algorithm requires building something more analogous to a quantum asic or fpga customized to the n you wish to factor, rather than a general factoring quantum computer.  pop-sci treatments of quantum computing leave the reader with the impression that the algorithms execute in O(1) time to find all solutions, but shor's algorithm and quantum FFT appear to just be polynomial time.  I may not understand correctly, and with that many gates, it may in fact become O(1) time  from a paper on the subject, (the expected time rather than upper bound time)   r RSA-617 in no more than about 9 weeks, in contrast to the 60 million years the classical computer which factored RSA-309 would require. Moreover it is not unreasonable to believe that a sufficiently large quantum computer, if such computers can be built at all, will be able to factor RSA-309 in two weeks.   which means that even with trillions of quantum gates, it is not O(1) time.  the same paper puts shors algorithm for rsa1024 as  needing 3.5e9 quantum gates, which is still more than double the transistor count on haswell chips.  So it appears as though the age old, security through key expansion defense can hold off practical quantum computers for many decades."
crypto,2mdij1,Godspiral,0,Sun Nov 16 17:50:37 2014 UTC,What is 5T quantum gates equate to in qubits?
crypto,2mdij1,Godspiral,1 point,Fri Nov 21 05:53:47 2014 UTC,"I wrote 4 qubits per, but I'm unsure if its really just 1.  So 20T qubits"
crypto,2mdij1,amateurtoss,4,Fri Nov 21 16:16:36 2014 UTC,"This article isn't about how quantum computing could change everything.   Just as quantum computers could allow for someone to easily bypass existing encryption methods, the technology could allow people to encrypt information in new and even more secure ways. And codes aren't the only use for quantum computers: We could use them to peer even deeper into the underlying fabric of reality.   This is so vague as to be meaningless. You couldn't ""easily bypass existing encryption methods."" Building a quantum computer is exponentially harder than building any kind of classical computer, really the hardest task there is. It's unlikely, without some kind of magic discovery like a superparticle or ingenius new model/architecture that we will ever build any kind of quantum computer.  There are maybe three important aspects to quantum information research: advances in quantum control, in theoretical computer science, and in quantum key distribution. Everything else you hear about is just mindless fanwaving."
crypto,2mdij1,The_Serious_Account,3,Sat Nov 15 18:18:47 2014 UTC,I doubt you're very familiar with the field. There is progress being made regularly.
crypto,2mdij1,amateurtoss,3,Sat Nov 15 19:10:28 2014 UTC,"Unfortunately, I am. Don't base your understanding of something on poorly written articles. Learn about it on your own and talk to people who know more about it.  Science isn't some magical wand that you can wave at things to solve your problems. It is just a type of honest inquiry. Building a quantum computer using every model we know about becomes exponentially harder with system-size.  More importantly, we've been working with the same technologies for about twenty years and made very little progress towards any kind of scalable quantum computing."
crypto,2mdij1,The_Serious_Account,5,Sat Nov 15 19:15:43 2014 UTC,"Don't base your understanding of something on poorly written articles. Learn about it on your own and talk to people who know more about it.   I'm basing my understanding on a PhD in quantum information theoy and the fact I often talk to people working on the hardware of quantum computers.   The invention of error correction codes allowed us to reduce the creation of a quantum computer to a threshold. Exactly for that reasons it does not become exponentially harder to build larger quantum computers.,In the very early days I might have shared your pessimism."
crypto,2mdij1,amateurtoss,2,Sat Nov 15 19:27:35 2014 UTC,"I'm basing my understanding on a PhD in quantum information theoy and the fact I often talk to people working on the hardware of quantum computers.    That's great. But I don't think that the Threshold theorem allows you to ""reduce the creation of quantum computers to a threshold"". If you are a theorist and you abstract a quantum computer to some set of gates and states, then it seems that the only task is to make sure each operation to something below the threshold but I don't think that's how it works. I think it becomes exponentially harder to achieve high fidelity state preparation with the number of qubits.  My real argument comes from the rate of progress that has been made so far. I think error correction makes quantum computing at least feasible, but I don't agree that it implies that we'll see exponential scaling of architectures.  In any case, all of this discussion undermines the point that Quantum Computing poses little or no risk against modern cryptographic standards like RSA which is repeatedly overemphasized in every article on the subject that gets posted."
crypto,2mdij1,The_Serious_Account,3,Sat Nov 15 19:46:47 2014 UTC,"Well, I don't know your background, but it's obvious from your comment that you have a decent understanding of the issues involved.   I'm curious as to why you don't think that's how it works? If we reach a point where we can error correct the states quickly enough (and with high enough fidelity) I don't see the problem? What additional issues are there? Obviously it has to scale.   I'm really confused about your issue with state preparation? It seems to me we are already doing that with quantum communication..   In any case, all of this discussion undermines the point that Quantum Computing poses little or no risk against modern cryptographic standards like RSA which is repeatedly overemphasized in every article on the subject that gets posted.    Why would you say that? Shors algorithm very much poses a threat to RSA."
crypto,2mdij1,amateurtoss,2,Sat Nov 15 19:55:03 2014 UTC,"Let me try to answer your specific questions after I do a literature search. Fundamentally, I believe in error correction but I'm pessimistic about the lack of progress in the experimental side.  Basically, Quantum Control is an old field even though it's only been applied to quantum information recently. For some reason, it's been impossible to create systems of more than a handful of qubits that can interact with reasonable fidelities.  My larger point is that I don't appreciate articles that cite the same distant possibility as the reason for doing quantum information research. Compare it to articles that cite every advance in materials engineering research as progress towards building a space elevator."
crypto,2mdij1,pushme2,4,Sat Nov 15 20:38:57 2014 UTC,"I don't think it would be wise to think that we will not be able to build useful quantum computers ever. Special purpose QCs already exist. To think that better and more general purpose quantum computers will never be built is quite preposterous.  edit: (i didn't down vote you, as I do actually respect your opinion and point of view)  I would like to add a bit more info. Even if you or anyone else thinks that the possibility for the use of quantum computing to expand and proliferate, I (personally) think it is important that we treat this as a serious threat. (not to mention the fact that some researchers think it may be possible to somehow do certain types of computation on a classical computer)  And once we treat it as a serious threat, we can begin to think of ways we can change our systems to be resistant to these theoretical (or not so) attacks. For example, right now people are working in getting lattice based asymmetric cryptography. And not only would that be resistant to attempts of QC to break it, it uses shorter key sizes and is quicker to calculate and simpler to implement."
crypto,2mdij1,bitwiseshiftleft,1 point,Sat Nov 15 18:58:10 2014 UTC,"And not only would that be resistant to attempts of QC to break it, it uses shorter key sizes and is quicker to calculate and simpler to implement.   Out of curiosity: do you know of a recent assessment of lattice keysizes, eg, NTRU?  Preferably one that takes attacks based on BKZ 2.0 into account?"
crypto,2mdij1,pushme2,2,Sun Nov 16 03:32:35 2014 UTC,"I am aware that NTRU has some problems (not to mention that it is patented, which makes it effectively worthless)."
crypto,2mdij1,bitwiseshiftleft,1 point,Sun Nov 16 03:36:55 2014 UTC,"I'm not trying to slam NTRU or lattices, though yeah the patents are a problem.  I'm actually curious how big the keys actually are these days.  Last I heard NTRU's keys were about RSA sized -- bigger for low security, and smaller for high -- but much faster.  I was wondering if you had recent estimates for that or another system."
crypto,2mdij1,pushme2,0,Sun Nov 16 03:50:44 2014 UTC,"It really depends on what the key will be used for. Lattice cryptography with homomorphic systems could requires keys gigabytes in length for suitable security.  For normal stuff, I have seen numbers in the 156-768 bit range. But it depends on on which algorithm you choose in particular."
crypto,2mdij1,bitwiseshiftleft,4,Sun Nov 16 03:58:15 2014 UTC,"156-768 bits?!?  You sure you don't mean bytes?  Edit: and if so, do you have a reference?"
crypto,2mdij1,pushme2,1 point,Sun Nov 16 05:46:24 2014 UTC,"Actually, I think you may be right, although I could have swore I seen some papers saying 256 and 512 bit length keys would be suitable."
crypto,2mdij1,Godspiral,0,Sun Nov 16 06:09:34 2014 UTC,Probably papers published by the NSA.
crypto,2mdij1,bitwiseshiftleft,1 point,Fri Nov 21 05:56:36 2014 UTC,It seems like everything on this page ...  http://en.wikipedia.org/wiki/Lattice-based_cryptography  ... has problems.  Is there a lattice algo that does not?
crypto,2mdij1,Godspiral,2,Sun Nov 16 05:36:46 2014 UTC,"Every crypto algorithm has problems.  The biggest problem with lattices is that the field isn't terribly mature yet.  So it's hard to be sure about what key size, lattice shape, etc will give enough security.  Also, most algorithms have large keys, with the exception of NTRU.  But NTRU is patented.  Still, for a public key algo, NTRU is really fast.  That's not enough to sell it given the uncertainty about the security level.  But it's the only public key encryption algo I know of which isn't known to be weak to quantum computers, and which has a reasonable key size.  So it's definitely worth researching some more."
crypto,2mdij1,bitwiseshiftleft,1 point,Sun Nov 16 05:51:51 2014 UTC,"The criticism for NTRU I read was that even with a padding scheme, a few thousand signatures could recover the private key.  Basically, even if CVP is a hard problem, NTRU isn't quite provably as hard as CVP."
crypto,2mdij1,autowikibot,2,Sun Nov 16 06:29:37 2014 UTC,"Oh, I was thinking encrypt.  Though if that's true of NTRU Sign, it's a huge problem."
crypto,2mdij1,r3djak,0,Sun Nov 16 07:07:10 2014 UTC,Your insights make for some pretty serious First-World Problems:  http://i.imgur.com/XCucPuR.jpg  http://i.imgur.com/S0leKXn.jpg
crypto,2mdij1,unassaiIabIe,1 point,Sun Nov 16 11:22:06 2014 UTC,"Lattice-based cryptography:       Lattice-based cryptography is the generic term for asymmetric cryptographic primitives based on lattices. While lattice-based cryptography has been studied for several decades, there has been renewed interest in lattice-based cryptography as prospects for a real quantum computer improve. Unlike more widely used and known public key cryptography such as the RSA or Diffie-Hellman cryptosystems which are easily attacked by a quantum computer, some lattice-based cryptosystems appear to be resistant to attack by both classical and quantum computers. Further the Learning with Errors variants of lattice-based cryptography come with security proofs which demonstrate that breaking the cryptography is equivalent to solving known hard problems on lattices.     Interesting: Post-quantum cryptography | Jill Pipher | List of invited speakers at cryptology conferences | Learning with errors   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2mbknv,kazanz,14,Fri Nov 14 21:21:26 2014 UTC,Key Encapsulation
crypto,2mbknv,DoWhile,10,Fri Nov 14 21:54:29 2014 UTC,"Sometimes also ""hybrid encryption"" to reference that both symmetric and asymmetric encryption is used."
crypto,2mbknv,Natanael_L,3,Fri Nov 14 23:29:40 2014 UTC,"""Hybrid-cryptosystem"" is also sometimes used to describe the whole thing."
crypto,2mbknv,kingkilr,8,Sat Nov 15 02:26:12 2014 UTC,It is fairly rare to encrypt anything other than a symmetric key with an asymmetric algorithm - bulk data encryption with asymmetric algorithms is very slow.
crypto,2mbknv,rya_nc,1 point,Sat Nov 15 09:27:52 2014 UTC,"Cryptographic Message Syntax:       The Cryptographic Message Syntax (CMS) is the IETF's standard for cryptographically protected messages. It can be used to digitally sign, digest, authenticate or encrypt any form of digital data.  CMS is based on the syntax of PKCS#7, which in turn is based on the Privacy-Enhanced Mail standard. The newest version of CMS (as of 2009 [update]) is specified in RFC 5652 (but see also RFC 5911 for updated ASN.1 modules conforming to ASN.1 2002).  The architecture of CMS is built around certificate-based key management, such as the profile defined by the PKIX working group.     Interesting: S/MIME | X.509 | PKCS | S/MIME Freeware Library   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2mbknv,autowikibot,1 point,Sat Nov 15 09:28:01 2014 UTC,Also frequently called a KEK - Key Encrypting Key. It is frequently a an asymmetric key encrypting a symmetric one.
crypto,2mbknv,prezvdi,1 point,Sat Nov 15 03:43:00 2014 UTC,HYBRID. Been studying my ass off lately for security + exam and I had to repeat the cryptography part a bunch of times. Interesting but very confusing with all the protocols involved.
crypto,2mbknv,jghita,1 point,Sat Nov 15 09:28:52 2014 UTC,"You might also be interested in Integrated Encryption Schemes. These use key agreement rather than key encapsulation, though. But you very rarely want to use key encapsulation."
crypto,2mbknv,ctz99,1 point,Sat Nov 15 09:29:02 2014 UTC,I believe this is used in http://en.wikipedia.org/wiki/Diffie–Hellman_key_exchange
crypto,2mbknv,hoopmastaflex,-3,Sat Nov 15 11:23:20 2014 UTC,"It's just encrypting. The symmetric key (and initialization vector if any) you're encrypting was probably made one-off for that session so you can call that symmetric key a ""session key"" if you want.  But there aren't any layer-y or onion-y ways to describe encrypting one key with another that I'm aware of.  Edit: I was wrong and I apologize. Other poster is clearly correct."
crypto,2mdiez,wazzzzah,8,Sat Nov 15 12:29:01 2014 UTC,"Doesn't matter.  During WW2, someone argued that the enemy had such sophisticated bomb sights, there was no point in blacking out cities.  But that wasn't the point. The point was to force the enemy to use sophisticated bomb sights.  It's not about stopping them. It's about eating up their resources."
crypto,2mdiez,DeusExPodex,8,Sat Nov 15 14:39:30 2014 UTC,The article doesn't even mention post-quantum cryptography.
crypto,2mdiez,funky_vodka,3,Sat Nov 15 13:53:21 2014 UTC,"If you follow a link in the article, the guy is working for a company that is developing software to use post-quantum cryptography (explicitly McEliece). Is a very well disguised ad."
crypto,2mdiez,ninguem,1 point,Sat Nov 15 14:02:02 2014 UTC,"I wonder if they've found a way to reduce McEliece's ridiculous key size.  If so, it could be pretty useful."
crypto,2m86df,vstoykov,10,Thu Nov 13 22:55:22 2014 UTC,"So don't use it for symmetric encryption, and properly protect your secret keys.  The string to key algorithms it uses are defined in RFC4880 (Nov 2007), and are the same as were described in RFC2440 (Nov 1998), which was written 16 years ago.  An OpenPGP implementation could, perhaps, us a different key derivation algorithm for protecting key material, but can't for symmetric message encryption without breaking compatibility."
crypto,2m86df,qnxb,1 point,Fri Nov 14 00:45:58 2014 UTC,"The same weak key stretching, used for symmetric encryption, is used to protect the keys.  My idea is to protect the secret keys with the SlowKDF: first I enter my passphrase into SlowKDF (along with parameters - salt, number of iterations) and then use the digest as a passphrase to protect the OpenPGP keys. I can write down the salt, the number of iterations and the code, and remember only the passphrase (and to use the SlowKDF)."
crypto,2m86df,xJoe3x,2,Fri Nov 14 15:00:49 2014 UTC,Seems like it would be easier just to use a stronger base passphrase.  A sufficiently strong initial value can eliminate the need for key stretching to begin with.
crypto,2m86df,xJoe3x,2,Fri Nov 14 17:22:48 2014 UTC,"It is better to use both strong passphrase and serious key stretching.  But too complex passphrases can be difficult to remember.  So, I prefer to use easy to remember passphrase (over 50 letters) and additional key stretching."
crypto,2m86df,xJoe3x,0,Fri Nov 14 19:09:23 2014 UTC,"Depends on the strength of the initial passphrase.  A 16 word passphrase chosen randomly from a 100,000 word dictionary, limiting for minimum length, should have over 256 bits of entropy.    Keeping track of all of that and then waiting to process millions of sha512 iterations just seems like a lot of work and time.  There are valid reasons many products keep lower iteration counts.  Your choice though, certainly nothing wrong from a security perspective, just not the solution I would use."
crypto,2m86df,mitchellrj,1 point,Fri Nov 14 19:32:04 2014 UTC,It is difficult to remember 16 words if they are randomly chosen.
crypto,2m86df,mitchellrj,0,Sat Nov 15 02:23:10 2014 UTC,"Well you dont really need 256 bits :)  80ish is strong, 100ish for very sensitive data."
crypto,2m86df,pushme2,12,Sat Nov 15 03:04:55 2014 UTC,"The reason you can't make an S2K count over 65,011,712 is because values higher than that cannot be encoded into a single byte which is what RFC 4880 requires.  https://tools.ietf.org/html/rfc4880#section-3.7.1.3  Your problem is not with GnuPG, but with OpenPGP.  You could propose or implement a new S2K specifier type however: https://tools.ietf.org/html/rfc4880#section-10.1"
crypto,2m86df,cockmongler,1 point,Fri Nov 14 14:02:26 2014 UTC,"KeePassX only uses 50,000 rounds by default."
crypto,2m86df,lighthill,6,Tue Nov 18 13:43:04 2014 UTC,"To be honest, GPG is old and the format it stores keys in is stupid. In fact, I think almost everything about GPG is arcane and stupid. Maybe it's because its needed to be ""compatible"" with OpenPGP, but either way, the way it works could be much better.  Why can't there be an easy to use program under linux that allows us to encrypt files and be able to specify encryption algorithm, KDF algorithm, KDF rounds in numbers or seconds and mode of operation. Also possibly a crude implementation of asymmetric cryptography (but no crazy WoT stuff)."
crypto,2m86df,Chodrick,7,Fri Nov 14 05:34:34 2014 UTC,"GPG is stuck between a rock and a hard place. On the one hand it needs to provide The Right Thing (tm) encryption that prevents people who are not trained cryptographers from doing bad things while being able to send and receive encrypted data from other people with a minimum of hassle. On the other hand it needs to be flexible enough that trained cryptographers can make it do the things they want it to do, including wrong things, based on the latest research. All of this is expected out of the gpg command.  Personally I think it needs to be split into two parts, a dedicated backend part where all the crypto is explicit and a suite of dedicated single purpose front end tools implemented as wrappers around the backend. This allows the flexibility to rapidly update outdated mechanisms and allow ease of development of new features/uses."
crypto,2m86df,sponge8888,1 point,Fri Nov 14 14:18:21 2014 UTC,"I think the hard part here is more the backward compatibility issue.  The problems you mention would exist in any modern non-interactive message encryption tool, but GnuPG additionally has the legacy of trying to stay compatible with a set of nutty data formats and algorithms from the 1990s."
crypto,2m86df,veeti,6,Fri Nov 14 19:36:01 2014 UTC,Maybe some of the Red Hat developers could get together and develop something. It could be called:  systemd-pgpd   :P
crypto,2m86df,pint,1 point,Fri Nov 14 12:33:58 2014 UTC,"I think the easiest solution is to generate giant passwords.  If you want to remember a short password, then you can hash the password yourself.  Somebody here mentioned the utility in scrypt, and this command-line tool is in grub2-tools (or maybe grub2-utils) in CentOS 7:  yum -y install grub2-tools grub2-mkpasswd-pbkdf2 -s 0"
crypto,2m86df,pint,2,Sat Nov 15 22:09:21 2014 UTC,"FWIW, scrypt has an official CLI utility for symmetric passphrase encryption."
crypto,2m3g88,LarryBoLarry,5,Wed Nov 12 18:32:09 2014 UTC,Reminds me of sslstrip
crypto,2m3g88,DoWhile,4,Wed Nov 12 19:26:11 2014 UTC,Isn't this the entire reason PGP was invented?
crypto,2m3g88,bennysaurus,5,Thu Nov 13 11:27:29 2014 UTC,No. PGP is for end-to-end privacy and authentication. STARTTLS is one-hop transport-level privacy.
crypto,2m3g88,phyzome,5,Thu Nov 13 13:11:18 2014 UTC,"True but PGP/GPG still prevents people from tampering/reading the data, depending on which way it is used. But it doesnt protect the metadata(from-to) at all.(right?)  STARTTLS protects some of the metadata? Maybe depends on who is trying to snoop."
crypto,2m3g88,Jasper1984,2,Thu Nov 13 15:43:31 2014 UTC,It's time for BTNS to be implemented.  It's hard to do this kind of crap when the rest of the connection is already encrypted.
crypto,2m3g88,wbrows,7,Wed Nov 12 20:44:25 2014 UTC,"Because even though they're downgrading STARTTLS on port 25, they definitely won't downgrade BTNS on port 25..."
crypto,2m3g88,bitwiseshiftleft,1 point,Thu Nov 13 03:01:38 2014 UTC,Do you know what BTNS is?
crypto,2m3g88,wbrows,1 point,Thu Nov 13 17:00:47 2014 UTC,"It's opportunistic encryption, right?  Are you saying that it's hard to downgrade/MITM, or that it hides the port number, or something else?  Usually opportunistic encryption modes are trivial to downgrade and easy to MITM.  Hiding the port number is helpful but not really enough to prevent downgrading all known MX's."
crypto,2m3g88,bitwiseshiftleft,2,Thu Nov 13 18:10:21 2014 UTC,"It's not per port.  Yes, it has the problem of being able to MITM, but this is an arms race that hasn't even been started.  The end game is point to point encryption everywhere.  But one can't just jump to the end game, and BTNS is a reasonable place to start."
crypto,2m4dkb,Amuro_Ray,3,Wed Nov 12 22:52:49 2014 UTC,"Enigmail uses gpg under the covers.  Perhaps that'll point you to crackers you could use.  Frankly you're not going to break the encryption, but if you chose a weak passphrase you may stand a chance of bruteforcing the passphrase."
crypto,2m4dkb,ehempel,3,Thu Nov 13 00:45:51 2014 UTC,"Or maybe if you know bits of it, and put a lot of effort in using what you do remember from the passphrase to narrow the search down.."
crypto,2m4dkb,Jasper1984,1 point,Thu Nov 13 15:45:03 2014 UTC,"Yeah, I've messed around with breaking original rsa key chains I know I can't get in that way. My passphrase wasn't that strong from what I remember. Thanks for the pointer."
crypto,2m4dkb,rya_nc,1 point,Thu Nov 13 06:33:25 2014 UTC,"You can try pgpry or john the ripper.  I have some custom tools for generating candidate passphrases based on partial knowledge and would be willing to have a go at it if your attempts fail. I think with gpg2john I wouldn't even be able to see your private key, only try passphrases."
crypto,2m4dkb,phyzome,3,Sat Nov 15 15:46:33 2014 UTC,I feel like all encryption programs should be shipped with a brute-forcer interface so you can recover half-forgotten passphrases more easily. :-/
crypto,2m4dkb,chiniwini,2,Thu Nov 13 13:14:20 2014 UTC,What could possibly go wrong?
crypto,2m4dkb,phyzome,3,Thu Nov 13 15:12:35 2014 UTC,"Nothing, really. The ""bad guys"" already have these tools; normal users should have these at hand to make for a more pleasant experience.  For example, I forgot a character or two from my LastPass password a while ago. I had to spend half an hour putting together a script to brute-force it. It's just one character, I could have spent that time brute-forcing manually, but if I had the script already it would have been just a couple minutes.  Easy-to-use official brute-forcers don't reduce the security of a well-made system. The point is to explore a very small key-space, not crack the entire passhrase."
crypto,2m4dkb,Natanael_L,1 point,Thu Nov 13 21:54:40 2014 UTC,"How about error correction instead? Maybe have the computer generate passphrases for the user, where the last word is for error correction coding."
crypto,2m4dkb,phyzome,1 point,Fri Nov 14 17:01:04 2014 UTC,"That sounds nice, but it's not exactly bolt-on once the tool is released."
crypto,2m4dkb,rya_nc,1 point,Sat Nov 15 01:52:13 2014 UTC,"I actually made such a thing, just need to clean it up for release. It also makes the passphrase order insensitive and can generally handle several mistyped (but close) words.  I've also got some kinda-working python code up on github that does reed-solomon coding over a prime field that can be used to fix typos in more traditional ""a bunch of garbage characters"" style passwords. You could do e.g. base 31, 59 or 89."
crypto,2m4dkb,sponge8888,1 point,Sat Nov 15 15:53:19 2014 UTC,"If you have a copy of the private key that was the ""recipient"" of the message, then your task is to break the key that was used to protect the private key (you are cracking the key-encryption-key [KEK]).  I have cracked half-forgotten passwords by entering information as accurately as I remembered it, then selecting randomly from within those chunks of information. If you are a programmer, you might be able to use this approach...  For example, if you know that you used ""carrot"" somewhere in the middle of the password, and sometimes you start your passwords with 'baseball' then enter that info in categories:  a = ['baseball', 'aa', 'a', 'b', 'c'....] b = ['carrot'] c = ['online', '1', '2', '3'...]  now take a random element from a, b and c and glue them together and try that password. keep running in a loop until you have had enough time to cycle through the combinations."
crypto,2m471n,FAPINATOR9KYOLO,3,Wed Nov 12 22:02:15 2014 UTC,"Why is there an adversary that always wins the CPA-game against a challenger for this encryption scheme.   Because the attacker can first send two messages to the challenger which are the same, say M_0 and M_0, and he will get back E(k,M_0) no matter what.  He then he sends M_0 and M_1. He will get back either E(k,M_0) or E(k,M_1). In either case, he knows which one he received back because he already knows E(k,M_0)."
crypto,2m471n,nsa_at_home,1 point,Wed Nov 12 23:47:09 2014 UTC,"Thank you ! I was only missing the last step, i was so confused at the end..."
crypto,2lz4u1,MigMigg,5,Tue Nov 11 16:10:39 2014 UTC,Fuck the cert and buy the book instead.
crypto,2lz4u1,cunttard,2,Tue Nov 11 20:11:15 2014 UTC,"the stanford class gives youu the cert for free, but the stanford class is hard as shit and you probably won't pass it anyway.  getting that fucking cert was a huge accomplishment for me.  jesus fucking christ that class was hard."
crypto,2lz4u1,joke-away,1 point,Wed Nov 12 00:44:06 2014 UTC,the dan boneh one? I took that
crypto,2lz4u1,pint,2,Wed Nov 12 03:53:07 2014 UTC,"show me the crypto course in which   there is no history there is no block/stream cipher dichotomy starts with general goals (indistinguishability, malleability, etc), only then shows actual algorithms and constructions explains attack models covers side channel attacks, explains vulnerable algorithmic elements relationship between concepts (prf, hash, cipher, etc) is core light on actual algorithms (not important) sponge construction included hash based signatures included"
crypto,2lz4u1,cunttard,2,Wed Nov 12 04:32:31 2014 UTC,"Eh, if you've read Jon Katz book (and assuming that's the material used for the course) then most of this is actually covered, besides the ""history"", which is necessary to develop a notion of perfect secrecy versus secrecy based on a bounded adversary."
crypto,2lz4u1,pint,1 point,Wed Nov 12 08:50:46 2014 UTC,"yep, looks like the thing"
crypto,2lz4u1,ldpreload,1 point,Wed Nov 12 21:33:49 2014 UTC,"there is no block/stream cipher dichotomy   I'm a little confused here... aren't these actually different? One important thing you can do with CTR mode that you can't do with, say, RC4 is seek to an arbitrary point in the output stream.  Also, you should at least know what the crappy modes are so that you know not to use them. I've seen an implementation of something that could be dismissed quickly as ""RSA in ECB mode"" if they knew what ""in ECB mode"" meant, and in any case being able to understand words people say about crypto is I think a fine end goal of a crypto class."
crypto,2lz4u1,pint,1 point,Wed Nov 12 22:07:11 2014 UTC,"a cipher is a cipher is a cipher. internal details don't count at this point. all we need to now is C = E(K, P, [IV], [nonce]), where P and C are blocks of data. C might or might not contain a MAC, it is not your concern. what is your concern is what properties E has. how does it do it, should be less in focus and come much later in the course, only as examples.  how do you classify a duplexed sponge one pass authenticated encryption? it is sort of a stream cipher, but the data itself affects the keystream."
crypto,2lz4u1,ldpreload,1 point,Wed Nov 12 09:18:58 2014 UTC,"a cipher is a cipher is a cipher. internal details don't count at this point. all we need to now is C = E(K, P, [IV], [nonce]), where P and C are blocks of data.   That works if the only thing you want to do is to encrypt entire messages and decrypt entire messages. At my day job we regularly want to decrypt (and integrity-check) small parts of multi-gigabyte files. An API that lets us do that is important, and the ""C = E(K, P)"" API does not.  I'm obviously happy to classify things as stream ciphers, block ciphers, block ciphers that also work like stream ciphers, block ciphers with other useful properties, ciphers that are neither stream nor block, etc., if that's what you're getting at. I just think having a crypto class that doesn't tell you that RC4 and AES are different sorts of things (or AES-CTR, and don't even teach AES?) would be failing to properly teach its students."
crypto,2lz4u1,pint,1 point,Wed Nov 12 09:37:52 2014 UTC,"what is the difference between ""small parts of multi-gigabyte files"" and ""one of the many data blocks the original data is split into""?  why RC4 and AES-CBC are different? can you tell me what is the difference from the user's viewpoint?"
crypto,2lz4u1,ldpreload,1 point,Wed Nov 12 11:31:40 2014 UTC,"what is the difference between ""small parts of multi-gigabyte files"" and ""one of the many data blocks the original data is split into""?   One is that I'd occasionally like to decrypt streaming data; every so often I use SSL and SSH. A definition of a cipher as a strict function C = E(K, P) does not permit this. (You can tweak your definition, but the most obvious way ends up turning a stream cipher into a 1-byte block cipher that can only be used in its own custom mode, which is IMO a fine way to think of it, and equivalent to defining a distinction between stream and block ciphers.)  Another is that I generally don't want each data block to have its own IV.  Another is that, once you have a cipher that works by splitting the original message into data blocks, you, uh, kind of have a block cipher.   why RC4 and AES-CBC are different? can you tell me what is the difference from the user's viewpoint?   Apart from the random access thing, which is absolutely a difference.... AES-CBC requires padding (or ciphertext stealing or something); RC4 does not. RC4 is more malleable than AES-CBC. AES-CBC has side channels that RC4 does not, which is relevant if you're a sysadmin running an SSLv3 server. RC4 has statistical biases that AES-CBC does not.  More fundamentally, a user is going to be using an existing cryptographic library and talking with other people who have learned crypto, and, for better or worse, all crypto libraries with nontrivial use implement AES as a sort of thing called a ""block cipher"" that takes one of many ""modes of operation"", and RC4 not as that sort of thing. A student of a crypto class who has not learned these terms and is therefore confused at the library has not gained a working knowledge of crypto from the class.  You would almost be better off saying (e.g.) here is the NaCl box, here is the SJCL box, here is the TripleSec box, etc., and leave them with no more knowledge of the letters ""AES"" at the end. There are strong advantages to this approach. But I'm not sure it makes sense to call such a class a ""crypto"" class."
crypto,2lz4u1,pint,1 point,Wed Nov 12 12:17:49 2014 UTC,"okay, so what is your point here? you are saying that on a crypto course, it is important to teach what kind of ciphers support byte sized packets with no authentication but minimal overhead? you know what, you can recommend that course. i will recommend the other one."
crypto,2lz4u1,ldpreload,1 point,Wed Nov 12 19:05:48 2014 UTC,"My point is that in a crypto course, it is important to leave students understanding what ""AES"" is and what ""RC4"" is. If you're teaching a class where the answer is ""This is something magical, you don't need to understand it, here's a higher-level library"", that's certainly a valuable class to teach (and honestly it would be a fantastic part of an intro CS class or other required class), but it's not a crypto course.  It would be kind of like teaching an algorithms class where you tell people to use their language's sort function and don't teach them bubblesort. That's probably correct software engineering advice, but it doesn't make an algorithms class."
crypto,2lz4u1,pint,1 point,Wed Nov 12 20:06:45 2014 UTC,"well, if you invent the arguments you are arguing with, it makes the debate that much easier. but in fact my argument wasn't that ""here is a lib, you don't need to know any more"". my argument was: you need to understand concepts first, like confidentiality, malleability, kinds of indistinguishability, pseudorandom, nonce and so on. understand attack vectors. then you learn how to build such constructs from basic building blocks like prfs, prps, etc. then only mention existing algorithms as examples.  and your example is perfect. i would never ever teach bubblesort."
crypto,2lz4u1,ldpreload,1 point,Wed Nov 12 20:25:21 2014 UTC,"I'm sorry, I'm not really trying to argue or debate, I was just trying to understand what you meant by your bullet point. I do agree that teaching concepts first is the right way to do it, but I think that you've got to end up mentioning names and classifications that are currently practically used in the field, at some point, regardless of whether they suck. For the ones that suck, you should explain why they suck, instead of hoping that students never run into things on their own. If that's what you meant, then we're agreeing, I just misunderstood you.  What are your grounds for not teaching bubblesort? Or, alternatively, why do you think that it's common in algorithms classes to teach it briefly? (FWIW, I have taught both crypto and algorithms classes before, so I'm absolutely interested in figuring out the right ways to teach them, and I also like to think my small amount of experience is relevant.) People who don't have formal training in algorithms are going to run across it and not understand why it's bad and implement it in software that real people end up using.  For reference, here's the person who wrote RSA in ECB mode who would have benefited from knowing what ""in ECB mode"" is and why it sucks (and also what hybrid encryption is), and here's a conversation from earlier today where someone assumed that full-disk encryption must decrypt the entire disk at once, matching your C = E(K, P) model.  By the way, I'm a bit worried about the concept of building constructions from building blocks, because real-world algorithms don't actually work like building blocks... if you're taught about random oracles, you're likely to fail to use HMAC when you should because you don't actually need HMAC's complexity if your hash is actually a random oracle."
crypto,2lz4u1,Natanael_L,1 point,Wed Nov 12 21:59:50 2014 UTC,ChaCha20 is a stream cipher capable of seek
crypto,2lzuer,sonicmaster10,12,Tue Nov 11 19:40:08 2014 UTC,"As far as we know, TrueCrypt 7.1a is still good to use, even though the developer has tried to close the project.   I would heartily recommend avoiding bitlocker which will automatically upload the encryption keys to Microsoft, or any disk encryption software that is closed source or proprietary."
crypto,2lzuer,stephenwraysford,1 point,Tue Nov 11 22:21:20 2014 UTC,"automatically upload the encryption keys to Microsoft   It seems like that is only true of the ""device encryption"" mode, which is specifically a mode that locks your drive to the current TPM, with no password. Not what most people would want out of explicit full-disk encryption, although having it on by default is great. And for something on by default, sending the key to MS is totally fine, because the default key for most other OSes is also known to their vendors (it's zero). It's not like they're sending the contents.  Also, the security goal of running a Microsoft-written closed source OS with closed-source security updates, and worrying about MS having access to your data, has never seemed particularly coherent to me. Turning off updates doesn't help very much, and also seems like not what you want if your goal is to prevent other people from having access to your data."
crypto,2lzuer,ldpreload,1 point,Wed Nov 12 11:39:09 2014 UTC,Especially when there are bugs that go back almost two decades just now being discovered.  http://securityintelligence.com/ibm-x-force-researcher-finds-significant-vulnerability-in-microsoft-windows/
crypto,2lzuer,GoogleIsYourFrenemy,3,Thu Nov 13 18:56:26 2014 UTC,I've heard that FreeOTFE can be used with LUKS volumes (the disk encryption used by linux). But I've never personally used it.
crypto,2lzuer,flarkis,3,Tue Nov 11 23:10:22 2014 UTC,Truecrypt 7.1a indeed.
crypto,2lzuer,rebro1,1 point,Wed Nov 12 01:48:56 2014 UTC,TruPax maybe?   It's under the GPLv3 license
crypto,2lzuer,DaWooShit,-1,Tue Nov 11 22:31:44 2014 UTC,Bitlocker is the way to go. Using it for 500 GB my external ssd and works perfect.
crypto,2lzuer,jghita,-10,Sat Nov 15 22:10:19 2014 UTC,bitlocker. it comes with windows 8.
crypto,2lzuer,account2014,7,Tue Nov 11 21:00:36 2014 UTC,Ha.
crypto,2lzuer,itsaprankdude,0,Tue Nov 11 21:11:35 2014 UTC,well I have windows 8 and it does not come with it
crypto,2lzuer,2103ehleec,2,Tue Nov 11 22:59:55 2014 UTC,It just comes with the Pro and Enterprise versions.
crypto,2lzuer,diosio,3,Wed Nov 12 00:18:06 2014 UTC,Because why would a home user want to encrypt their personal data.
crypto,2lzuer,account2014,2,Wed Nov 12 01:26:47 2014 UTC,"Would it be a better name for the home version instead?  Windows 8.1, the cheaper, dumbed down, low-end, crippled version that lets hackers steal your data so MS can charge a higher premium on the non-crippled version?"
crypto,2lzuer,3pg,2,Wed Nov 12 03:01:11 2014 UTC,"To be fair, both versions are low-end and crippled without proper protection of the user's data. Especially if you take the security of the rest of the security critical components of the OS into account."
crypto,2lxk5f,seattleandrew,6,Tue Nov 11 03:56:40 2014 UTC,"I always thought Skype was the Estonian word for ""back door."""
crypto,2lxk5f,treerat,3,Tue Nov 11 15:08:31 2014 UTC,"Dangit, title should read ""EFF fixes Skype's score on its Secure Messaging Scorecard"""
crypto,2lxk5f,Starriol,2,Tue Nov 11 06:18:05 2014 UTC,"A year too late, right?"
crypto,2lxk5f,wonkadonk,11,Tue Nov 11 09:43:44 2014 UTC,"It just came out. Still disappointed with EFF about this scorecard. They seem to have gone wide with their analysis, but not very deep on each one of them. They seem to have mostly taken the providers' word at face value and didn't do much digging after that.  That said, the ""winners"" are definitely still TextSecure/Axolotl and OTR-based apps."
crypto,2lxk5f,xr1s,6,Tue Nov 11 10:10:09 2014 UTC,"Seriously. If MS came out and said ""yup it's end to end don't worry about it!"" we're supposed to just believe that shit? C'mon EFF you're better than this! Audit that shit!"
crypto,2lxk5f,3pg,6,Tue Nov 11 11:34:47 2014 UTC,Closed source. Why bother auditing it?
crypto,2lxk5f,xr1s,2,Tue Nov 11 14:48:48 2014 UTC,"That's a good point...I suppose on that same token though, why consider using it for any sort of even theoretically secure communications?"
crypto,2lxk5f,ldpreload,1 point,Wed Nov 12 00:25:53 2014 UTC,"Yeah, I'm also a little disappointed by that. There's certainly value in this: for instance, you could present it as a list of ""Here are all the vulnerabilities the vendor admits you're exposed to"", and give Skype a bright red checkmark for ""Provider can probably access your data if they want want"", and have only a few ones that get blank squares all the way through. But the way in which it's presented makes it sound like the EFF (which has portrayed itself as a technical organization in addition to a legal/activist one) is standing behind the providers' claims.  It also seems like they could have made separate checkboxes or at least colors for internal and external audits."
crypto,2lvme6,wonkadonk,10,Mon Nov 10 17:54:33 2014 UTC,"well, i'm very sorry for the fbi director (not really), but since we already have strong crypto, i don't see how he expects us to unlearn it. it is hard to see it as anything else than rambling."
crypto,2lvme6,pint,14,Mon Nov 10 22:23:57 2014 UTC,"They don't have to stop it from existing, they just have to get people to stop using it. More importantly they need the average Joe to think of crypto as bad, as something only a bad person would use, so then they don't use it because they don't wish to be associated with that."
crypto,2lvme6,paranoid_after,4,Mon Nov 10 22:50:33 2014 UTC,Orrr convince enough people to be scared shitless that terrorists and pedophiles are using it such that congressmen are prepared to make strong crypto illegal for personal use.
crypto,2lvme6,aydiosmio,5,Tue Nov 11 10:41:18 2014 UTC,"Or make people stop trusting open-source implementations, e.g. by compromising TrueCrypt, publishing significant weaknesses in OpenSSL or hint that OpenBSD may or may not have backdoors."
crypto,2lvme6,3pg,6,Tue Nov 11 12:39:51 2014 UTC,"It's a result of magical thinking. People tend to write off that which they don't understand as magic, performed by wizards in faraway towers and all you have to do is make the wizards stop.  The reality that encryption is just math is lost on them."
crypto,2lvme6,Innominate8,4,Tue Nov 11 00:49:35 2014 UTC,"You (and other 3 letter agencies) abused your powers and laws and decided to just spy on everyone. Well tough luck, everything is going to be encrypted by default now. Those agencies are mostly responsible for everything getting encrypted now."
crypto,2m0277,R-EDDIT,4,Tue Nov 11 20:46:28 2014 UTC,"Interesting choice of title.  Hacker News links to the same article with ""Vulnerability in Microsoft TLS library could allow remote code execution"". (Same as the title of the linked bulletin post).  https://news.ycombinator.com/item?id=8591756  Glad to have GCM - shame it wasn't available before. Definitely not as big news as the vuln."
crypto,2m0277,seattlyte,2,Tue Nov 11 20:59:21 2014 UTC,"GCM was previously available only in the FIPS 140 Suite B combinations.  This meant GCM required ECDSA certificates, while most sites are just moving to sha256-2048bit certs (and there's debate on the prime 256 and prime 384 curves)."
crypto,2m0277,seattlyte,1 point,Tue Nov 11 21:13:40 2014 UTC,"Certainly there is lots of justified debate over NIST curves (esp re twist security, unjustified parameters and implementation snags)... and general reluctance to change to Elliptic Curves (Snowden loosely - ""Use traditional DL-based crypto"").  I guess you mean to include this as evidence for why GCM in tandem with RSA is a big deal? Yeah I'll grant that. Shame it wasn't there before.  The vuln is a huge deal. As serious (more so?) as Heartbleed, though thankfully there isn't as long a tail of devices with embedded Windows."
crypto,2m0277,pint,5,Tue Nov 11 21:34:51 2014 UTC,really? i'm overwhelmed. how about not hanging if one wants to generate 2048+ bit RSA or DH key? how about interop and open formats? how about non-nsa algos like salsa or curve25519? how about some transparency (like details of your prng)?
crypto,2ly371,apache99,4,Tue Nov 11 07:33:41 2014 UTC,"you need to understand that the core function of block ciphers can encrypt one block only. that is, 64 bit for DES and TDES. one key can be used only once. if you want to encrypt more, you need some ""mode of operation"", that is, essentially, a method of deriving additional keys using the master key and the data itself. CBC is one of such modes of operation. so you can not compare it to the core function, it is apples to oranges. to my knowledge, TDES supports CBC just fine if you follow the correct protocol, namely you choose unique IV.  EDIT correction: you can encrypt one message-key combination once. modes of operation usually vary the plaintext, not the key."
crypto,2ly371,pint,4,Tue Nov 11 09:08:49 2014 UTC,"Your question is actually the same as ""What is the difference between aes and aes-cbc ?"" 3des alone allows you to encrypt one block. However, when you want to encrypt a longer message, you need a way of doing so, a ""mode of operation"".  The most naive approach is to encrypt each block separately with your cipher. This mode is called ECB, and is bad because if there are 2 identical blocks in your message, they'll have the same encrypted output. CBC intends to be a bit better at that by xoring the plaintext block N with the encrypted block N-1, creating a more ""pseudorandom"" result.  More information and more modes of operation here : http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation"
crypto,2ly371,Elyotna,1 point,Tue Nov 11 14:10:51 2014 UTC,"Block cipher mode of operation:       In cryptography, a mode of operation is an algorithm that uses a block cipher to provide an information service such as confidentiality or authenticity.  A block cipher by itself is only suitable for the secure cryptographic transformation (encryption or decryption) of one fixed-length group of bits called a block.  A mode of operation describes how to repeatedly apply a cipher's single-block operation to securely transform amounts of data larger than a block.     Most modes require a unique binary sequence, often called an initialization vector (IV), for each encryption operation. The IV has to be non-repeating and, for some modes, random as well. The initialization vector is used to ensure distinct ciphertexts are produced even when the same plaintext is encrypted multiple times independently with the same key.  Block ciphers have one or more block size(s), but during transformation the block size is always fixed. Block cipher modes operate on whole blocks and require that the last part of the data be padded to a full block if it is smaller than the current block size.  There are, however, modes that do not require padding because they effectively use a block cipher as a stream cipher.  Historically, encryption modes have been studied extensively in regard to their error propagation properties under various scenarios of data modification. Later development regarded integrity protection as an entirely separate cryptographic goal. Some modern modes of operation combine confidentiality and authenticity in an efficient way, and are known as authenticated encryption modes.     Image i     Interesting: AEAD block cipher modes of operation | Block cipher | Galois/Counter Mode | Authenticated encryption   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2ly371,autowikibot,2,Tue Nov 11 14:11:00 2014 UTC,"To what? What has you asking? Why do you assert that 3desCBC would be more vulnerable?  3des is just a cipher, with no mode of operation specified. Thus I would assume ECB which means the cipher is used in a pretty raw fashion.  CBC is cipher block chaining, a way to  encrypt more than a single block in a more secure fashion than just using ECB on multiple blocks.  The assertion and question doesn't make a lot of sense. It's missing something."
crypto,2lv1ov,AJ_M,5,Mon Nov 10 14:49:29 2014 UTC,I'm guessing it has to do as a source of entropy.
crypto,2lv1ov,Intrexa,2,Mon Nov 10 15:39:02 2014 UTC,"So like random generators? Since Quantum things are one of the few things we can't actually predict, right?"
crypto,2lv1ov,Intrexa,3,Mon Nov 10 15:39:53 2014 UTC,"That's my guess, at least, but crypto is always looking for a better random, so I think it's a pretty good guess."
crypto,2lv1ov,pint,1 point,Mon Nov 10 15:44:32 2014 UTC,"however, i guess it is pretty expensive for that"
crypto,2lv1ov,JBu92_work,4,Mon Nov 10 16:28:42 2014 UTC,"Off the top of my head, I'd think that they probably meant something about random number generation. True randomness and all that."
crypto,2lu81s,alecbenzer,3,Mon Nov 10 07:02:00 2014 UTC,"The general technique you describe is a ""cut-and-choose"" idea. As /u/beagle3 points out, this calls for a commitment scheme (not encryption). Alice commits to N messages and opens N-1 to be checked when challenged by Bob. Note that if Alice cheats in one of the N (i.e., she chooses a message not of the agreed-upon form), she will avoid detection with probability 1/N.  Also, you have still not described how Alice actually signs it. Using what you described, she could sign a commitment to the secret string but not give a signature on the string itself. So you also need to look into the idea of blind signatures, which may be what you are after in the long run."
crypto,2lu81s,rosulek,1 point,Mon Nov 10 08:15:33 2014 UTC,"Blind signatures sounds closest to what I'm thinking of. I suppose what I described is a kind of semi-blind signature? Ie, part of the message is blind to the signer but part of it is not.  edit:   Also, you have still not described how Alice actually signs it. Using what you described, she could sign a commitment to the secret string but not give a signature on the string itself.   To be clear, in my example, Bob is doing the signing, not Alice. Commitment schemes definitely seem to be what I was thinking of, not encryption (I thought a symmetric cipher would work as a commitment scheme but I can see why this wouldn't actually work), and so Bob would be signing the unrevealed commitment to the one message."
crypto,2lu81s,zeroXten,2,Mon Nov 10 08:37:00 2014 UTC,"I actually don't completely remember the use case, which is partly why I want to remember what the algorithm is called. I think it had something to do with cryptocurrencies or money in some way, but I can't remember the specific scenario.  I might have been misleading in the title: the idea is that Bob signs a message, where he knows some part of the message, and another part of the message is random, but he doesn't know what the value of the random part."
crypto,2lu81s,beagle3,2,Mon Nov 10 07:55:51 2014 UTC,"A simple example would be an HSM token.  You have permission to use the token but not own the token.  For instance, if your system is compromised you might be able to forge signatures for a bit until I remove the HSM token from the computer and then I can stop you.  The process gets more difficult if you don't want the signer devices to know what you're signing [kinda like how law makers pass laws...]."
crypto,2lu81s,autowikibot,2,Mon Nov 10 08:09:29 2014 UTC,"I'd love to know how many messages need to be created. As far as I can tell (and i'm a complete n00b), the security comes from Bob picking a message from N at random. Alice can't be sure which Bob sill pick, so she has to be ""relatively"" honest about the form of each message."
crypto,2ls6zp,electronics-engineer,4,Sun Nov 9 18:52:36 2014 UTC,"The author of this is about as misinformed as their scorecard for secure messaging. Perhaps they're the same author.  No one who does appsec assessments will ""sign off"" on code or vouch for it, ever. They'll provide a report that has the issues that they found."
crypto,2ls6zp,zmist,1 point,Mon Nov 10 03:23:03 2014 UTC,"re: vouching, seems like one of the many areas that would exhibit the confidence-competence negative correlation."
crypto,2ls6zp,rainman002,-1,Mon Nov 10 04:16:15 2014 UTC,"The author of this is about as misinformed as...   Peter Eckersley is Technology Projects Director for the Electronic Frontier Foundation. He leads a team of technologists who watch for technologies that, by accident or design, pose a risk to computer users' freedoms—and then look for ways to fix them. They write code to make the Internet more secure, more open, and safer against surveillance and censorship. They explain gadgets to lawyers and policymakers, and law and policy to gadgets.  Peter's work at EFF has included privacy and security projects such as Panopticlick, HTTPS Everywhere, SSDI, and the SSL Observatory; helping to launch a movement for open wireless networks; fighting to keep modern computing platforms open; and running the first controlled tests to confirm that Comcast was using forged reset packets to interfere with P2P protocols.  Peter holds a PhD in computer science and law from the University of Melbourne; his research focused on the practicality and desirability of using alternative compensation systems to legalize P2P file sharing and similar distribution tools while still paying authors and artists for their work. He is an affiliate of the Center for International Security and Cooperation at Stanford University.  Source: https://www.eff.org/about/staff/peter-eckersley"
crypto,2ls6zp,TheBigB86,6,Mon Nov 10 03:59:26 2014 UTC,"That's nice, but to be honest none of those things indicate a trained security expert."
crypto,2ls6zp,Intrexa,2,Mon Nov 10 05:53:56 2014 UTC,Why did you bold your entire paragraph?
crypto,2ltyy4,andihow,3,Mon Nov 10 05:05:40 2014 UTC,/r/codes
crypto,2ltyy4,Natanael_L,2,Mon Nov 10 17:30:29 2014 UTC,"It's got lowercase, uppercase, digits, + and /. Sure looks like the base64 character set but when decoded looks like random binary data."
crypto,2ltyy4,eigma,4,Mon Nov 10 07:30:12 2014 UTC,"Doesn't look random-- the strings:  !9! !39! !11!   make it look structured to me. Couldn't tell you what it is though OP, try /r/codes."
crypto,2ltyy4,GahMatar,4,Mon Nov 10 08:21:57 2014 UTC,Well the tweet has a picture of a combination lock....
crypto,2lqfvl,wonkadonk,20,Sun Nov 9 03:51:37 2014 UTC,"hack-proof   Good joke. If you think something is ""hack-proof"", it's already broken."
crypto,2lqfvl,Chodrick,9,Sun Nov 9 05:29:45 2014 UTC,I would also add that whenever they tell you something is quantum it most probably isn't.   Source: physics grad student.
crypto,2lqfvl,bob_live,3,Sun Nov 9 09:43:52 2014 UTC,Of course this is quantum. Just read the article  Source: PhD in quantum cryptography
crypto,2lqfvl,The_Serious_Account,2,Sun Nov 9 11:58:08 2014 UTC,"Just did. This is pretty recent stuff. I have to admit I was very surprised. Last I heard they were still struggling to create pairs of entangled photons, but the theorists kept creating models and algorithms as if we have quantum computers running everywhere."
crypto,2lqfvl,bob_live,1 point,Sun Nov 9 12:34:02 2014 UTC,I mean the one linked from the wired article
crypto,2lqfvl,bob_live,1 point,Sun Nov 9 12:37:41 2014 UTC,"Well, just transmitting a photon from a to b is a lot simpler than messing with entanglement.   but the theorists kept creating models and algorithms as if we have quantum computers running everywhere.   Not sure what else they're supposed to do?"
crypto,2lqfvl,The_Serious_Account,5,Sun Nov 9 12:45:11 2014 UTC,The theorists should keep making new models and algorithms. But journalists often stumble upon theoretical research and then report it as if it  has already been implemented in reality.
crypto,2lqfvl,bob_live,1 point,Sun Nov 9 13:08:34 2014 UTC,"Hmm... haven't really seen that. But science reporting has always been problematic,  so it wouldn't surprise me."
crypto,2lqfvl,The_Serious_Account,1 point,Sun Nov 9 13:11:13 2014 UTC,"I can transfer photons from A to B with a flash light, but there's nothing quantum about it. To use quantum effects you need to have particles in entangled States that you can measure."
crypto,2lqfvl,bob_live,1 point,Sun Nov 9 12:52:55 2014 UTC,"I realize that doesn't explain much, but the idea is that optics can be manipulated quite well without entering the quantum regime. You can even use coherent beams and depend on interference without venturing into the physics that is directly a result of quantum mechanics and not just wave physics.  It's true that EVERYTHING around us is quantum, because we're all made of atoms. But not all computation and communication relies on quantum effects to function. And people often use quantum as a buzzword even though they don't ever use any QM to do what they do."
crypto,2lqfvl,bob_live,1 point,Sun Nov 9 12:57:05 2014 UTC,"Funny :). You of course have to be able to control the quantum state of the photon and measure it again at the other end. You encode a qubit in, e.g., the polarization of the photon. No entanglement required."
crypto,2lqfvl,The_Serious_Account,1 point,Sun Nov 9 13:06:14 2014 UTC,"So I read up on QKD a little bit. I was about to say that you could do the same thing with a coherent beam of 1023 photons and not notice the difference, but I see that the main feature of using single photons in your fiber, which does make them actual qbits, which is useful for detection of eavesdropping. Am I right?  I used to think that qbits were useless unless you could measure them as a whole system i.e. entanglement."
crypto,2lqfvl,bob_live,1 point,Sun Nov 9 13:38:54 2014 UTC,"So I read up on QKD a little bit. I was about to say that you could do the same thing with a coherent beam of 1023 photons and not notice the difference, but I see that the main feature of using single photons in your fiber, which does make them actual qbits, which is useful for detection of eavesdropping. Am I right?   Yes. A big issue is actually making sure you are only transmitting one at the time. If you sent multiple copies of the same qubit an attacker can figure out exactly what qubit you're transmitting and you have no way of detecting her.   I used to think that qbits were useless unless you could measure them as a whole system i.e. entanglement.   Most things do require entanglement, so I can understand it's a little surprising.  QKD is actually remarkably easy to understand.  Proving it's secure is a different matter :)"
crypto,2lqfvl,The_Serious_Account,2,Sun Nov 9 13:51:43 2014 UTC,If they can convince even one company to trust the crypto then they have succeeded.  The same thing goes for hardware designed by any other country as well. It's wrong to trust crypto implementations without reviewing them all the way down to the hardware with a team of experts and (preferably) the cooperation of the designers.
crypto,2lqfvl,3pg,5,Sun Nov 9 05:53:20 2014 UTC,"If they can convince even one company to trust the crypto then they have succeeded.   Well, they've succeeded in convincing someone, not in making unbreakable crypto."
crypto,2lqfvl,Chodrick,2,Sun Nov 9 05:56:39 2014 UTC,"Well, if NSA can't compromise end points of the network, shouldn't it be ""physically"" impossible for eavesdropping?"
crypto,2lqfvl,567abraxas,-2,Sun Nov 9 11:30:03 2014 UTC,"You should never, ever, ever assume a piece of software is 100% secure. This is like, computer security 101."
crypto,2lqfvl,Chodrick,4,Sun Nov 9 12:32:55 2014 UTC,Sounds like huge load of BS.
crypto,2lqfvl,pushme2,-1,Sun Nov 9 04:01:09 2014 UTC,"This is complete bunk. The physics of quantum communication (or teleportation) hasn't been implemented for long distances in a lab yet, let alone a fully functioning network. And there are HUGE obstacles to overcome."
crypto,2lqfvl,bob_live,5,Sun Nov 9 09:51:00 2014 UTC,Looks like I'm wrong.
crypto,2lqfvl,bob_live,1 point,Sun Nov 9 12:38:00 2014 UTC,As unsinkable as the Titanic?
crypto,2lqfvl,xwjnxm,2,Sun Nov 9 10:48:06 2014 UTC,We all know that the Chinese can only copy and implement what's already been made. Impossibru!
crypto,2lqfvl,WattledPenguin,1 point,Sun Nov 9 04:44:30 2014 UTC,"I don't know about copying, but you're right about one thing. It's a rather old technology, not something they just came up with it. They're just trying to make it mainstream:   While products based on QKD already are being used by banks and governments in Europe — especially Switzerland — they have not been deployed commercially in the United States to any great extent. Current technological breakthroughs are pushing the distance over which quantum signals can be sent   http://www.wired.com/2014/09/quantum-key-distribution/  2007 - Election fix? Switzerland Tests Quantum Cryptography. Swiss officials will scramble vote data at one gigabit per second to determine whether this experiment lead to more reliable elections"
crypto,2lqfvl,Dwarf_Vader,1 point,Sun Nov 9 07:37:36 2014 UTC,"Even if it was ""hack-proof,"" there's no guarantee there's no backdoor, China and all."
crypto,2lm6jh,MidwestJackalope,15,Fri Nov 7 21:11:18 2014 UTC,Always mix your entropy. And use multiple sources with no correlation or external influences if you really need good entropy.
crypto,2lm6jh,ixforres,11,Sat Nov 8 03:13:32 2014 UTC,This. There is no reason to ever trust a single entropy source when you have more than a single entropy source.
crypto,2lm6jh,levoroxi,4,Sat Nov 8 03:38:39 2014 UTC,A While ago i used the raspberry pi to generate randomness using external entropy. I made a few videos describing each one if your interested. The first uses a Geiger counter and the second uses the CMB picked up from a TV.  http://youtu.be/yfOV9Ex47pE?list=UU8lG_V-Ckdv1_hkWqJ7b9mA  http://youtu.be/qTuNwIO1lBM?list=UU8lG_V-Ckdv1_hkWqJ7b9mA
crypto,2lm6jh,Xtrato,2,Sat Nov 8 11:43:26 2014 UTC,"You should use sources both with and without external influences. Those that cannot be influenced are needed in order to reduce the impact of an attack against the system, but those that can be influenced are still needed for all the cases when you are not attacked physically or via the OS (e.g. protecting your network encryption).  I do agree that it is essential to mix the sources properly, to reduce the impact if/when an attacker is able to affect a handful of your sources."
crypto,2lm6jh,3pg,8,Sat Nov 8 05:16:24 2014 UTC,"The diehard random tests are not well suited for detecting a malicious adversary.  It is not difficult to construct a formula relying on a secret key that would pass all tests but still be predictable by anybody with the key.  There is also no public information about exactly how the BCM2835 RNG works.  With that in mind, you should not trust the BCM2835.  HOWEVER it is a great supplemental source of entropy!"
crypto,2lm6jh,stardigrada,5,Sat Nov 8 03:47:07 2014 UTC,"I have no answer for you, but this is an excellent question."
crypto,2lm6jh,syadasti,3,Fri Nov 7 23:41:41 2014 UTC,"I agree that it's not documented well, but I wouldn't be surprised if it uses the same RNG block as the BCM5880, which feeds thermal noise through the FIPS 186-2 PRNG.  http://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140sp/140sp1266.pdf  And it NEVER hurts to combine your ""random"" data with other ""random"" sources."
crypto,2lm6jh,JohnDoe_85,2,Sat Nov 8 04:48:07 2014 UTC,"If you want an additional entropy source, you can add one of these easily enough:  https://www.sparkfun.com/products/11551"
crypto,2lh3kq,bruo,11,Thu Nov 6 14:20:50 2014 UTC,"ECC support, finally!"
crypto,2lh3kq,DemandsBattletoads,2,Thu Nov 6 15:18:00 2014 UTC,"Oh they now have an ""official"" Windows version instead of the Gpg4win. Looks like it is still beta though."
crypto,2lh3kq,Balmung,1 point,Thu Nov 6 19:11:17 2014 UTC,Oh I have never noticed that. It was very buggy for me though as I couldn't get it to generate a key when I tested it last night.
crypto,2lh3kq,Balmung,1 point,Fri Nov 7 06:20:35 2014 UTC,"Same here, it tried to convert/import my existing private keyring but failed with an ""Input/Output error"""
crypto,2lh3kq,graffen,2,Fri Nov 7 14:04:41 2014 UTC,"For many people the NIST and also the Brainpool curves have an doubtful origin and thus the plan for GnuPG is to use Bernstein’s Curve 25519 as default. GnuPG 2.1.0 already comes with support for signing keys using the Ed25519 variant of this curve.   That's great to hear, but it seems like this represents a split from the OpenPGP standard, which requires NIST curves. Will other OpenPGP implementations (e.g. OpenPGP.js), start to have to offer extensions to be compatible with GPG?"
crypto,2lh3kq,diafygi,2,Fri Nov 7 14:14:34 2014 UTC,"I imagine NIST curves will be available, just that the default will be Ed25519."
crypto,2lh3kq,NihilistDandy,2,Fri Nov 7 00:02:13 2014 UTC,Is ECC support planed for the 1.x branch?
crypto,2lh3kq,6rfujyjj,2,Fri Nov 7 03:36:38 2014 UTC,"All support for PGP-2 keys has been removed for security reasons   Well, PGP 2.x compatibility in GnuPG has always sucked. Try signing - not encrypting, not clearsigning, no detached signature - just signing in a way that PGP 2.x would understand. You can't. But what security reasons?! I know that MD5 is not considered secure enough hash any more but is there anything wrong with 1024-bit RSA keys?"
crypto,2lk7nc,eyeofthetigers,6,Fri Nov 7 07:34:51 2014 UTC,"Generally speaking, no. Some providers, however, do support STARTTLS on regular SMTP at port 25. The initiating server must request it, though."
crypto,2lk7nc,syadasti,1 point,Fri Nov 7 07:49:47 2014 UTC,Thank you for your help I now fully understand :-)
crypto,2lk7nc,rya_nc,3,Fri Nov 7 10:36:42 2014 UTC,"Mail servers generally do not verify certificates, so intercepting the message in transit via an active man-in-the-middle attack is usually not terribly difficult. In addition, an active attacker can just hide the STARTTLS capability advertisement to get cleartext."
crypto,2lk7nc,MarcTCC,2,Fri Nov 7 18:53:28 2014 UTC,"Depends. If both servers support it the email (the whole connection actually) will be encrypted.  Google released a report about this: https://www.google.com/transparencyreport/saferemail/?hl=en-US Haven't read it but it might answer your questions.  PGP is the safer way, though."
crypto,2lir7n,electronics-engineer,11,Thu Nov 6 22:34:48 2014 UTC,"I'd actually argue the opposite. BlackBerry was a nightmare to develop for, essentially never had any app ecosystem to talk of. From a user's perspective, BlackBerry phones were horrible, especially when compared to shiny iPhones and Android phones.  BlackBerry did had one thing going for them, though, which was that they were the only phone manufacturer that even said the word ""security"". Encryption and security is why they made good corporate handsets. But, as soon as they started making ""compromises"" to undermine their previous security efforts, they had no reason for existing any more. They were inferior to the other phones in every way.  It was the backpedaling and the lack of encryption that killed BlackBerry. (Edit: well, that and the decade of hilarious mismanagement)"
crypto,2lir7n,OlderThanGif,2,Thu Nov 6 23:37:23 2014 UTC,Blackberry's demise is that people stopped wanting keyboards.
crypto,2lef0o,wonkadonk,3,Wed Nov 5 20:19:59 2014 UTC,"This was an easier attack then the flame attack. In the attack here, a collision is computed between two files by changing both of them and meeting in the middle.  Flame had to compute a collision to an existing signature."
crypto,2lef0o,GahMatar,3,Wed Nov 5 21:46:16 2014 UTC,"Flame did not do a second pre-image attack. It was a chosen prefix attack, but a novel method for it. It followed the same method as the rogue CA md5 collisions previously to have one certificate signed and then use the signature on a different cert. 1"
crypto,2lef0o,xantes,1 point,Thu Nov 6 01:25:36 2014 UTC,My bad then.
crypto,2lef0o,GahMatar,2,Thu Nov 6 01:38:13 2014 UTC,"Uhhh, are windows updates not signed?  It makes no sense to me that a single straight hash is used to authenticate update binaries. How is that even possible? Shouldn't it be sign(binary+hash)?  Does anyone have more information about how windows update works? This is very disconcerting."
crypto,2lef0o,firepacket,4,Wed Nov 5 23:51:56 2014 UTC,"You don't sign an entire binary because asymmetric crypto is slow. If you did sign the entire binary there would be no point in including the hash in the signature.   How the actual binaries are signed is irrelevant as the attack was done the on the certs used to establish a chain of trust. The certificates probably are small enough to be too onerous to compute signatures for instead of the digests of them now, but that would not have prevented  the attack."
crypto,2lef0o,xantes,3,Thu Nov 6 01:35:16 2014 UTC,"The construct function(binary+hash), or rather function(binary + hmac + padding), is used for encrypting, not signing.  If the checksum algorithm is sufficiently secure then any modification to its inputs (i.e. the file contents of the update) will cause a change in the output (i.e. the hash). By signing the hash, the signer states that any data that yields this particular hash can be considered to originate from the signer. Whether the recipient trusts this assertion is up to the recipient, but usually the answer is ""yes"".  Edit: I didn't read your comment properly. My point is that sign(hash) is the standard way of doing things. If they don't sign their checksums then they are screwed."
crypto,2lef0o,3pg,2,Thu Nov 6 05:48:20 2014 UTC,signing hashes is sufficient.  a good hash is just as impossible to crack as anything else.  and it's significantly easier (read: quicker) to verify a signature over a few bytes of hash than a large binary file.
crypto,2les44,FAPINATOR9KYOLO,2,Wed Nov 5 22:03:31 2014 UTC,"The permutations, expansions and XORing would propagate that kind of identity (and far more general ones) with perfect accuracy. That's probably what you should convince yourself of first. All 1s is simplest, but you could write down a corresponding output XOR for any given inputs.  Then all you're left with are the non-linear S-boxes. Modifying the message and the key in precisely this way means that the input to each S-box is identical between the two encryptions, so the output will be too and they can be ignored: ""m ^ k == (m ^ 1s) ^ (k ^ 1s)"".  The perturbation has to have every bit as one, otherwise the two patterns would get out of sync over the DES key schedule; if you used completely independent round keys you could probably come up with some more varied identities like this."
crypto,2leda4,FAPINATOR9KYOLO,4,Wed Nov 5 20:05:26 2014 UTC,"By perfect secrecy, if you mean the information-theoretic version i.e. Shannon secrecy, no pragmatic encryption scheme can achieve it, without having at least as much entropy in the key as in the plaintext (in which case, why not just share the plaintext the way you shared the key etc)  A more useful question is how deterministic encryption stacks up against more realistic definitions of security for symmetric schemes. A typically used notion is called IND-CPA security.  In the IND-CPA game, you are provided access to an oracle. At each turn, you get to provide the oracle two plaintexts of equal length. The oracle chooses either the first or the second (but always the same choice every turn), and returns to you the encrypted version of the plaintext. If you can guess which one the oracle is choosing before you issue q queries, you win.  It's easy to see why having deterministic encryption won't work under this model - simply keep the first query constant, and change the second one. If the ciphertext changes, the oracle must be picking the second one, if it doesn't it must be using the first.  Why is IND-CPA meaningful as a measure of security? Because intuitively, it guarantees that even if an attacker knew that only one of two possible messages are going to be sent (ATTACKATDAWN vs MAINTAINHOLD), they still can't tell which one you sent from looking at the ciphertext. In particular, they cannot determine if the message you sent now was the same as or different from any of the ones you sent previously."
crypto,2leda4,brambit,3,Wed Nov 5 20:50:36 2014 UTC,why not just share the plaintext the way you shared the key   so you can share the key at a convenient time and the message when it needs to be sent  i.e. give your submarine commanders one time pads when they're in port and send as many messages as you want when they're at sea  /offtopic /stating the obvious :)
crypto,2leda4,colechristensen,0,Wed Nov 5 22:07:31 2014 UTC,Well but you can only give them so many one time pads.
crypto,2leda4,Natanael_L,3,Wed Nov 5 22:10:54 2014 UTC,A few terabyte sized harddrives should be sufficient.
crypto,2leda4,Natanael_L,0,Wed Nov 5 22:56:25 2014 UTC,If you use one key only once a one time pad is as secret as it gets afaik. But one time pads are also really inconvenient i think.
crypto,2leda4,rosulek,5,Wed Nov 5 23:03:39 2014 UTC,"For most cases it is, but with low volume communication and the ability to properly protect the one time pad it is more than good enough. This would apply to many types of submarines."
crypto,2leda4,tom-md,2,Wed Nov 5 23:10:17 2014 UTC,"Besides its other inconveniences, one-time pad also does not provide any authenticity/integrity. To get that you could add a one-time perfectly secure MAC but again you need n bits of key to MAC n bits of data. Now the total key material is twice as much as the plaintext."
crypto,2leda4,maqp,1 point,Wed Nov 5 23:23:34 2014 UTC,Where's your proof that you need twice as much key material? What scheme is that? Why not just reserve x bits (e.g. 256 bits) of key material to encrypt 256 bits of the MAC tag. Then the tag itself is perfectly encrypted too.
crypto,2leda4,maqp,1 point,Thu Nov 6 01:15:56 2014 UTC,"Are you saying you have a perfectly secure 256 bit hash algorithm?  Notice Mike is talking about a ""perfectly secure MAC"".  Which is hard to replicate with less entropy."
crypto,2leda4,stevenxdavis,0,Thu Nov 6 04:00:49 2014 UTC,Incorrect
crypto,2leda4,cwmma,1 point,Sun Nov 9 13:40:24 2014 UTC,"If a secure, MITM attack free way to exchange public signing / encryption key exists, users might as well use it to exchange messages ;)"
crypto,2le1ks,ericdolson,12,Wed Nov 5 18:31:13 2014 UTC,"If you want this to be secure in any way, eschew online crypto services and just use gpg with email"
crypto,2le1ks,mahemm,3,Wed Nov 5 22:02:14 2014 UTC,Apparently jixxit was made by OP.
crypto,2le1ks,rya_nc,1 point,Mon Dec 1 19:43:50 2014 UTC,"Yes, this is true. I was feeling out the market and wanted some honest and actual help understanding the benefits/fallbacks of what I was developing when compared to other options that this community was aware of. I apologize for ""staging"" a question, but I appreciate and learned from the answers."
crypto,2le1ks,mahemm,1 point,Mon Dec 1 21:37:21 2014 UTC,lol nice find
crypto,2le1ks,PositivePeter,7,Tue Dec 2 07:49:57 2014 UTC,"You aren't finding good answers because it is not currently possible to do encryption securely inside a browser. Simply put, you cannot trust a server on the internet to do your crypto for you. It's hilarious that people would actually trust a site such as jixxit, everything is delivered in plaintext so even if you trust them how can you possibly know that you don't have a MITM backdooring their crypto on the way to your machine? More: http://matasano.com/articles/javascript-cryptography/"
crypto,2le1ks,PositivePeter,1 point,Thu Nov 6 00:21:03 2014 UTC,"I think I see what you mean, but I could be wrong. Jixxit claims that there is no round trip of my data leaving my browser, so how would a MITM attack even work then? Are you saying a MITM changes out the crypto algo to something they can crack later? Otherwise, my secret is entered in-browser and is never transferred away, so there is no ""secret"" that jixxit is exposing mid-stream. I tested by disconnecting from the internet and was able to encrypt/decrypt stuff just fine. It is almost like a mini encryption program that runs entirely in my browser.  Please point out where my trust is misplaced :)"
crypto,2le1ks,sixstringartist,3,Thu Nov 6 18:19:06 2014 UTC,"In a world where jixxit is legit, yes, that is how it should work. But let me point out how this:   Jixxit claims that there is no round trip of my data leaving my browser   goes wrong.   Jixxit lies to you, and their crypto algorithms have a backdoor Jixxit lies to you, and uploads all your data unencrypted jixxit lies to you and uploads your encryption key when you type it in MITM hijacks connection and inserts backdoor into jixxit's crypto so they can decrypt it at any time MITM hijacks connection and inserts backdoor into jixxit's crypto so your files are uploaded to the MITM's server MITM hijacks connection and inserts backdoor into jixxit's crypto so your encryption keys are uploaded to the MITM's server   so.... yeah. don't use web crypto. Use gpg, or your OS's encryption, or knox, etc."
crypto,2le1ks,fb2c49aac67f4b02f675,5,Thu Nov 6 20:29:00 2014 UTC,"To do what, exactly?"
crypto,2le1ks,3pg,1 point,Wed Nov 5 21:08:24 2014 UTC,Mainly to do ad-hoc encrypting/decrypting of messages. It would be nice to encrypt files on occasion too. This is mostly for correspondence through mediums which are not secure.
crypto,2le1ks,thmsk,7,Wed Nov 5 21:15:56 2014 UTC,If you do it like this it is akin to locking the windows of your house but leaving the door open. Sending your encrypted communications along with the key online is not secure.  Always decrypt locally.
crypto,2le1ks,noontide,1 point,Wed Nov 5 21:32:21 2014 UTC,"I guess I should say ""trusted correspondence"" where a key has been previously agreed upon. Asymmetric encryption will not be very convenient, sadly."
crypto,2le1ks,baudtack,4,Wed Nov 5 21:54:28 2014 UTC,"Cryptography is a well understood field. Either you do it right, or it will be insecure. It is up to you to judge which option suits your problem and your restraints the best."
crypto,2lcmam,ta1s0n,3,Wed Nov 5 08:09:22 2014 UTC,"Not to be rude, but have you ever considered performing a search?  http://www.digitalinternals.com/security/decrypt-whatsapp-crypt7-database-messages/307/ was one of the first hits."
crypto,2lcmam,drmartinsweden,3,Wed Nov 5 08:32:40 2014 UTC,Yes i did find that this is not quite what im looking for  i want to know how the key itself is generated.. not where to find it in my device's file system  eventually i want to be able to generate a key my self given some basic information about the phone
crypto,2lcmam,GahMatar,1 point,Wed Nov 5 08:49:31 2014 UTC,"Start from calls to system information gathering and randomness APIs and work backwards from there? Maybe search for XOR as that shows up a lot more than ""normal"" in crypto code, especially byte code where there's no reason to do something like xor %eax, %eax"
crypto,2lcmam,reshok,1 point,Wed Nov 5 18:21:52 2014 UTC,Why would clearing a register with xor be more likely to show up in crypto code?
crypto,2lcmam,GahMatar,1 point,Wed Nov 5 22:17:41 2014 UTC,"Sorry, I guess I came across wrong. What I was trying to say was that in byte codes xor is even less likely to show up ""accidentally"" because it's not used to clear registers."
crypto,2lcmam,pack170,1 point,Thu Nov 6 00:59:49 2014 UTC,"actually i was thinking quite like you i come from the PC world and not the Android world so im not very familiar with disassembling the code and reading it (unfortunately its not ARM nor x8086 assembly)  i figured how to get the JAVA files from the APK, but eventually they are obfuscated as fuck :\  Is there any base crypto lib i can look for references you know about?? (The code is huge)"
crypto,2l9n7u,wonkadonk,5,Tue Nov 4 15:28:49 2014 UTC,They should include /r/bitmessage
crypto,2l9n7u,dokumentamarble,3,Wed Nov 5 03:06:43 2014 UTC,That's not really IM
crypto,2l9n7u,Natanael_L,2,Wed Nov 5 12:55:50 2014 UTC,How so?
crypto,2l9n7u,dokumentamarble,2,Wed Nov 5 15:53:33 2014 UTC,"Because it's not... IM is like Skype, MSN, YIM, IRC, XMPP, whatever...  Bitmessage falls into the same category as e-mail.  You have concepts like ""Inbox"", ""Send/Sent"", ""Address Books"", Chan ""Subscriptions"", etc... which are not traditional ""IM"" concepts.  It's even right there on their wiki: https://bitmessage.org/wiki/FAQ#How_does_Bitmessage_compare_to_other_messaging_methods  The column titled ""Instant Messaging"" says ""No"" in red..."
crypto,2l9n7u,Zer0xDae,2,Sat Nov 8 01:01:43 2014 UTC,Was looking for this one.
crypto,2l9n7u,opticbit,4,Wed Nov 5 09:57:43 2014 UTC,Can anyone provide more information on the textsecure audit?
crypto,2l9n7u,LivingInSyn,7,Tue Nov 4 16:05:23 2014 UTC,"The only audit I'm aware is the audit that was published on this sub some days ago. I can find the link to it if you want (Moxie was in this thread).  I love textsecure, I'm just waiting for the merge with redphone and being able to use it on my computer."
crypto,2l9n7u,Trylw,3,Tue Nov 4 18:13:34 2014 UTC,"And that was only a protocol audit, not an implementation audit, right? The EFF list requires that both be audited. Also seems weird that OTR didn't get checked, doesn't it?"
crypto,2l9n7u,pred,1 point,Tue Nov 4 20:28:24 2014 UTC,Yeah I'm not too sure about this. I'd like to have the sources too.
crypto,2l9n7u,Trylw,3,Tue Nov 4 21:46:28 2014 UTC,"Appelbaum mentioned his work on libpurple on Twitter, and the scorecard might get updated."
crypto,2l9n7u,pred,4,Tue Nov 4 21:48:18 2014 UTC,"There is an error in telegram: ""Encrypted so the provider can't read it"" is only for secure chat.  > Q: How are secret chats different? > Secret chats are meant for people who want more security than the average fella. All messages in secret chats use end-to-end encryption. This means only you and the recipient can read those messages — nobody else can decipher them, including us here at Telegram.     That means in normal chat they can read your conversation"
crypto,2l9n7u,soilovin,3,Tue Nov 4 23:17:47 2014 UTC,I don't understand why there's even an unsecure chat mode and it is the default if there is a secure chat available.
crypto,2l9n7u,Ytse,1 point,Wed Nov 5 04:04:53 2014 UTC,The normal mode allows any registered service on either end to read the message.  The secure mode can only be read on a specific pair of devices as those are the only two with the keys to do so.  It's a reasonable compromise between security and functionality depending on your use-case.
crypto,2l9n7u,bennysaurus,1 point,Wed Nov 5 05:29:54 2014 UTC,In normal mode can the provider read your conversation? To me seems they can
crypto,2l9n7u,soilovin,1 point,Wed Nov 5 11:48:59 2014 UTC,"Correct, in normal the session is encrypted between you and the provider, not end-to-end like in secure. Again it depends on the use-case involved really.  They detail it pretty extensively in their FAQ."
crypto,2l9n7u,bennysaurus,3,Wed Nov 5 14:58:49 2014 UTC,"""Encrypted so the provider can't read it"".. What provider are they talking about? The application's provider or the ISP?  I find it hard to believe that Skype cannot read our messages.."
crypto,2l9n7u,483724932,2,Tue Nov 4 18:48:25 2014 UTC,"the application provider (e.g. Skype, Text Secure) because most messaging services run through their servers. The internet Service Provider (ISP) would be protected from the content if the application utilizes encryption in transit (1st column)"
crypto,2l9n7u,seattlesec,1 point,Tue Nov 4 19:35:27 2014 UTC,"We're talking about the second column.   http://www.h-online.com/security/news/item/Skype-with-care-Microsoft-is-reading-everything-you-write-1862870.html  Skype can read youre messages.  Also, just because it goes through someone's servers mean they can read it."
crypto,2l9n7u,jimktrains,1 point,Wed Nov 5 13:23:38 2014 UTC,"Yeah, I heard about that too, makes no sense that EFF graded that way... maybe send them an email?"
crypto,2l9n7u,seattlesec,4,Thu Nov 6 21:20:45 2014 UTC,"Crypto.cat seems to be scoring relatively high on this evaluation, but I see they have a bit of an interesting history. Hopefully these issues have been addressed?"
crypto,2l9n7u,roobix,11,Tue Nov 4 15:48:40 2014 UTC,"The page you've linked to is about a serious vulnerability that was disclosed in June 2013. It was addressed by the team before being made public (link to blog post), and Cryptocat has had additional subsequent audits in the year+ since then (link to blog post)."
crypto,2l9n7u,Kaepora,3,Tue Nov 4 18:32:57 2014 UTC,"Excellent news! The more quality tools we have at our disposal the better, and we can avoid another Truecrypt-like scenario. Thanks for the info."
crypto,2l9n7u,roobix,1 point,Tue Nov 4 19:16:05 2014 UTC,"You are welcome, sir."
crypto,2l9n7u,Kaepora,1 point,Tue Nov 4 19:33:00 2014 UTC,Does Cryptocat store any kind of chat history?
crypto,2l9n7u,pinhead26,2,Thu Nov 13 23:12:03 2014 UTC,"They still don't have long term identities. So if you want to verify someone's authenticity, you have to verify their fingerprint for every session."
crypto,2l9n7u,NeuroG,2,Wed Nov 5 00:48:43 2014 UTC,"That's actually good practice. It forces exfiltration of keys for every session. Otherwise a single end-point exploitation could compromise all future MITM attacked conversations, even if the messaging platform was run from things such as LiveCD. It's not that hard to use the secret question feature or exchange hash over the phone."
crypto,2l9n7u,maqp,1 point,Sun Nov 9 14:01:02 2014 UTC,"A lot of the items in this history were found during audits and quickly addressed, but they could equally be present in closed solutions, only we wouldn't know about it. I can see that some of cryptocat's issues were fairly significant, but you need to be careful about punishing them in an evaluation like this for being open to audits, which ultimately helps the security."
crypto,2l9n7u,disclosure5,2,Wed Nov 5 05:04:48 2014 UTC,"""Telegram"" is missing in this list."
crypto,2l9n7u,Ytse,3,Tue Nov 4 20:26:05 2014 UTC,"There is a drop-down menu top left, which let's you select a full list, which includes Telegram."
crypto,2l9n7u,Lonely-Thomas,1 point,Tue Nov 4 20:46:03 2014 UTC,Thank you.
crypto,2l9n7u,Ytse,1 point,Tue Nov 4 21:09:49 2014 UTC,https://news.ycombinator.com/item?id=8557654
crypto,2l9n7u,based2,0,Tue Nov 4 22:52:20 2014 UTC,Cyber Dust?
crypto,2laj0p,khariel,10,Tue Nov 4 19:52:53 2014 UTC,"Your email must contain:   The entire text of the message that contained the secret email. Session logs for the successful attempt with your user_id. A detailed explanation of the attack on the protocol. Your bank account details to receive the $300,000 prize."
crypto,2laj0p,C_Hitchens_Ghost,7,Tue Nov 4 21:24:29 2014 UTC,"bank account details   That's... yeah. OK. And they want it over email, not encrypted?"
crypto,2laj0p,phyzome,1 point,Wed Nov 5 00:53:42 2014 UTC,Have they heard of traveler's cheques?
crypto,2laj0p,conradsymes,4,Wed Nov 5 02:24:58 2014 UTC,"Telegram is from Berlin, Germany. Bank transfer is pretty much the standard procedure for sending money to another person in Germany and all of Europe."
crypto,2laj0p,HungBingJong,1 point,Wed Nov 5 12:14:56 2014 UTC,TIL people only live in Europe.
crypto,2laj0p,conradsymes,5,Thu Nov 6 00:16:20 2014 UTC,http://www.thoughtcrime.org/blog/telegram-crypto-challenge/
crypto,2laj0p,LambdaBoy,1 point,Wed Nov 5 06:47:23 2014 UTC,"Just to be clear, that seems to be for last year's challenge."
crypto,2laj0p,ITwitchToo,3,Wed Nov 5 06:55:02 2014 UTC,I'd like to hear from real cryptographers if this contest is doable unlike the last one.  Anyway I still think they should have used an existing protocol and not have tried to do theirs plus I'm not using this app as long as the server isn't open source.
crypto,2laj0p,Trylw,2,Wed Nov 5 09:14:25 2014 UTC,This is more plausible. This is what any serious intelligence agency or skilled hacker would have access to.
crypto,2laj0p,Natanael_L,9,Wed Nov 5 09:59:33 2014 UTC,"We're missing an important part: binaries (or even source code) of the ""client"" they are using. There are a bunch of different implementations out there and they haven't specified which they use, or even if they use something custom.  So while we can attack the protocol, we can't attack specific implementations, which serious intelligence agencies or skilled hackers can."
crypto,2laj0p,xnyhps,1 point,Wed Nov 5 13:11:06 2014 UTC,Still relevant
crypto,2laj0p,DaWooShit,1 point,Tue Nov 11 23:15:55 2014 UTC,"Interesting read, thank you."
crypto,2laj0p,Trylw,3,Tue Nov 11 23:59:34 2014 UTC,"Seems like you have more power now.   In this contest you assume the role of a malicious entity in full control of both the communication lines and the Telegram servers themselves.  Your goal is to extract sensitive data (a secret email address) from a Secret Chat between two users — Nick and Paul. You control the entire process, from chat creation to the sending of each individual message and can perform various active attacks, including MITM, KPA, CPA, replay attacks, etc."
crypto,2laj0p,deathfantasy,4,Wed Nov 5 09:38:06 2014 UTC,Seems like they listened to the suggestions from me and others. I was one of the people suggesting that the contestants need full access to the connection of an ongoing chat to resemble real world attack scenarios  Thanks for the downvotes. Proof: http://thoughtcrime.org/blog/telegram-crypto-challenge/#comment-1172730263
crypto,2laj0p,Natanael_L,2,Wed Nov 5 09:56:54 2014 UTC,"The challenge is moderately realistic. It at least provides a decent chance of success for anybody who found an exploitable weakness. But there's still additional tricks available to powerful attackers in a real world situation which this challenge doesn't cover.  I still don't think telegram is secure. Go look for the current options for chat apps on WP and mail the developers about implementing the protocol of textsecure, ""axolotl"". That's the best option available today."
crypto,2laj0p,Natanael_L,1 point,Thu Dec 4 17:25:31 2014 UTC,Plssss
crypto,2laj0p,Nusr,1 point,Thu Dec 4 19:10:08 2014 UTC,does uks (the attack described in the recent textsecure  report) applies in this scenario?
crypto,2laj0p,g30rg3_x,1 point,Wed Nov 5 01:57:27 2014 UTC,They probably won't care about anything but ciphertext recovery.
crypto,2lb6x8,moscowKaye,3,Tue Nov 4 23:14:51 2014 UTC,"No idea what the hell you're talking about, but I can verify that they are indeed awesome and will reply to all your emails pretty quickly. They bumped me up from 100,000 on the queue to giving me an account after a little bit of talking"
crypto,2lb6x8,Aginor23,1 point,Wed Nov 5 03:48:25 2014 UTC,"I saw that he said my name but I'm tired as fuck and I want to play Just Cause 2. Meh, it's on their page anyway I don't really care.   I hope it doesn't break any rules. Let me know."
crypto,2lb6x8,DemandsBattletoads,1 point,Tue Nov 4 23:18:02 2014 UTC,"Man, I was really high on my lunch break at work when I wrote ""You're the future"". Sorry for that."
crypto,2lb6x8,DemandsBattletoads,1 point,Tue Nov 4 23:19:17 2014 UTC,"ProtonMail development is proceeding slowly, but I agree that they do handle customer service really well. It's an excellent move on their part."
crypto,2la8p2,Kkari,5,Tue Nov 4 18:29:21 2014 UTC,"Anything can do crypto, but if your want to avoid side channels entirely which can leak your private keys like with timing and cache leaks, you want low level languages like C where you can control all parts of the behavior.  Java and Python are still good, but there's more potential issues to be aware of. Python is often recommend for the simplicity in implementing algorithms relatively bug-free (assuming you already understand the intended behavior of the algorithms to implement, as always)."
crypto,2la8p2,Natanael_L,4,Tue Nov 4 19:18:28 2014 UTC,you want low level languages like C where you can control all parts of the behavior   Except when you can't.
crypto,2la8p2,angryfuck,3,Wed Nov 5 00:01:14 2014 UTC,"Great. Don't we all love poorly defined behavior?   I'm guessing higher level languages also wouldn't have a chance at fixing this. Do we need a new CPU architecture & instruction set to solve this reliably? The more I read about x86, the less I trust my computers..."
crypto,2la8p2,Natanael_L,2,Wed Nov 5 00:28:57 2014 UTC,"Rust looks good as a c-like language with better abilities to keep memory safe. Sadly, it's still to early in the alpha stages to be useful for serious work."
crypto,2la8p2,SAI_Peregrinus,1 point,Wed Nov 5 05:38:06 2014 UTC,"Mozilla is writing a browser engine in it, I'd call that serious."
crypto,2la8p2,Guerilla_Imp,3,Wed Nov 5 07:01:12 2014 UTC,"Possibly, yes, but just because it's ready to display pictures and text doesn't necessarily mean that it is ready to gurantee that all memory is handled in a secure way. Browsers are an important part of modern technology, and their achievements are important, but it  may not be the right tool for this particular job."
crypto,2la8p2,3pg,2,Wed Nov 5 09:45:43 2014 UTC,"I actually just meant that it's still at a stage where language semantics can change. Not as drastically as last year, but unless you're ready to put in extra work when the language changes it's not the best. Part of why Mozilla is developing a browser engine with it now is that they're writing the language, so if they change something it's because they needed the change for that."
crypto,2la8p2,SAI_Peregrinus,3,Wed Nov 5 14:25:25 2014 UTC,"I say prototype and debug in Python, then rewrite in C (or assembly) if side channels are important."
crypto,2la8p2,Uncaffeinated,1 point,Wed Nov 5 05:51:30 2014 UTC,"I implemented several algorithms in Ruby. Seriously it was usable in that it worked, but it was clearly a low slower to run, and more useful to allow rapid solutions to the Matasano challenges than actually producing real-world code."
crypto,2la8p2,disclosure5,1 point,Wed Nov 5 05:01:43 2014 UTC,I'm surprised that correctness wasn't any part of your question.  Do you often find the cryptography to be a performance bottle-neck in your applications or is this a knee-jerk focus?
crypto,2la8p2,tom-md,1 point,Thu Nov 6 04:50:17 2014 UTC,"I've asked it only out of mere interest, without any relevant projects in focus, just to be a bit more versed on the topic, and by the number of upvotes I reckon I'm not the only one interested in it. I've assumed that a well written algorithm is correct in every language, or isn't that the case ?"
crypto,2la8p2,tom-md,1 point,Thu Nov 6 18:42:19 2014 UTC,"I would assert there are plenty of implementations of algorithms that are not well written.  Some languages lend themselves better to testing or reduce the number of corner cases while others make life hard.  For example, try writing AES in lua."
crypto,2l9d70,paulfurley,2,Tue Nov 4 13:46:54 2014 UTC,"That is my pet peeve:    technical users (those who are confident with the command-line)   I've been typing commands on computers since I was 9, on a TI-99. Later it was all about DOS 3.2, 3.3, 4, 5, autoexec, config.sys, DOS 6, memmaker.  Computers have GUIs nowadays. And I'm not going back. If an application doesn't have an elegant user interface: then it fails. We're not going back to those days where I have to type commands to get routine tasks done."
crypto,2l9d70,JoseJimeniz,3,Wed Nov 5 12:30:04 2014 UTC,"If an application doesn't have an elegant user interface: then it fails   Really? It fails?  Command-line is such a simple interface. Text in, text out. Passing simple textual commands with a few arguments is much more simple and elegant than any GUI will ever be, and I don't know why it is such a big deal for many people. Good luck with scripting and composing programs if you only have a GUI for every program."
crypto,2l9d70,funky_vodka,3,Wed Nov 5 14:16:49 2014 UTC,"The command line is very powerful because you can quickly invoke a wide variety of commands, and can supply arbitrary parameters.  However in order to obtain that power you have to have quite a lot of knowledge. Even an exhaustive list of all the programs you might invoke, the parameters they might accept, and so on, is quite a lot of information. And if you don't have that knowledge readily available, you are going to have to read it in a manual or help page or documentation and then invoke it.  GUI's solve this problem. You don't need to know as much information, but they are less powerful. A specific GUI has a more limited range of functionality, but makes that functionality more accessible, and requires less knowledge to operate.  As a result, even power users usually do benefit from GUI's, especially when you have a large number of programs installed, many of which you might not use frequently."
crypto,2l9d70,caster,1 point,Fri Nov 7 07:43:55 2014 UTC,Good point. I was just wondering why you said an app without a GUI is a failed app.
crypto,2l9d70,funky_vodka,1 point,Fri Nov 7 09:30:16 2014 UTC,Precisely. Having the option to use a GUI frontend for a simple task makes a program much more user friendly. The CLI can still exist for the times when you need it.
crypto,2l9d70,boredmessiah,1 point,Sat Nov 8 11:02:49 2014 UTC,"Some of the problem is you have devs who think on technical terms whom nearly have no idea about user friendliness. GPG is a technical topic and has been. My mom doesn't want to be at a command line in order to encrypt her tax papers.  Look at 1Password by AgileBits, they're a perfect mesh of user friendliness and security. Why is this so hard in 2014?   And yes I have used GPG solutions on all platforms and they're all pretty half assed and are comprised of multiple apps."
crypto,2l9k1k,veggieSmoker,2,Tue Nov 4 14:59:41 2014 UTC,"Fingerprints can't be used for encryption, only authentication. For an encryption key, every single bit needs to be exactly correct, and must be the same each and every time. However a fingerprint can be dirty, you might get a cut, or you might have your finger at a slighly different angle each time. So it's really not a feasible solution as an encryption key.  So a phone (or computer of any sort) might require you to only enter an encryption key at boot time, and otherwise store it in memory but require authentication to access the phone.   The iPhone would (in some way) be caching the decryption key in hardware, which is why you can authenicate with the fingerprint and don't need to re-enter the pin. The issue of choosing EITHER device encryption OR an unlock password is purely an android limitation, and it is bad design because it makes the crypto very non-user-friendly. I believe this will change in the next version of Android."
crypto,2l9k1k,jamesphw,1 point,Wed Nov 5 00:39:37 2014 UTC,"Being an Android fan, it's unfortunate but that is looking like the bottom line. I suppose that's the benefit of controlling the device top-to-bottom like Apple does, whereas Android is distinct from Samsung and the hardware/software they put on these devices. I suppose I was hoping that Android had thought through the ""secure element"" more and provide an API or something that Samsung's fingerprint could integrate with - as you say, to securely unlock the keys like Apple does. It does seem like they did a good job with that."
crypto,2l9k1k,Retransmit1,1 point,Wed Nov 5 15:18:05 2014 UTC,This is news to me. I was under the impression that there was an API for the fingerprint reader whereby anyone could dick around with it.
crypto,2l9k1k,flarkis,2,Wed Nov 5 17:22:09 2014 UTC,I'd just like to point out that this is a bad idea in the first place. Fingerprints are public knowledge and can't be changed. They make for awful passwords.  For a better argument then mine please see: http://blog.dustinkirkland.com/2013/10/fingerprints-are-user-names-not.html
crypto,2l9k1k,Retransmit1,-4,Wed Nov 5 05:01:00 2014 UTC,Fingerprints make better passwords than you do arguments.
crypto,2l9k1k,BenStoneee,1 point,Wed Nov 5 17:19:17 2014 UTC,I think it's because apple owns that technology
crypto,2l9k1k,Natanael_L,1 point,Tue Nov 4 16:36:44 2014 UTC,"Not really. Apple uses a dedicated crypto chip embedded in the chip of the sensor. That chip also talks to an isolated part of the ARM CPU to stop software from messing with it. Anybody can do that, and it has been done before. Maybe not in all that many consumer devices, though, but high end corporate security gadgetry has been doing it for ages."
crypto,2l9k1k,SAI_Peregrinus,0,Tue Nov 4 19:08:02 2014 UTC,"That's what I was trying to get at - are these fundamental hardware pieces present in the Samsungs, or not. If not, then it makes total sense that you can't encrypt with just fingerprint unlock as the keys would be easier to extract."
crypto,2l9k1k,silverforest,1 point,Tue Nov 4 19:42:04 2014 UTC,"Apple probably has a patent.  Other than that, fingerprint unlock is convenient, but highly insecure. It doesn't add much over just simple slide-to-unlock, so there's not much point. Especially on a smartphone, which will very often have fingerprints on the screen for an attacker to copy."
crypto,2l9k1k,SAI_Peregrinus,6,Tue Nov 4 16:53:43 2014 UTC,"I agree. Fingerprints are usernames, not passwords, as with most other forms of biometric identification."
crypto,2l9k1k,FryGuy1013,3,Tue Nov 4 17:47:50 2014 UTC,"Yep, an easy way to tell if someone has thought much about security is to see if they think biometrics should be used for identification or authentication. If they say the latter, they're not to be trusted on security matters."
crypto,2l9k1k,0x6d1e,3,Tue Nov 4 17:57:33 2014 UTC,"I think that fingerprints can be used as part of authentication, given that they fall into the ""what you are"" category. You still should have the ""what you know"" and ""what you have"" categories before using it, though.  It also seems like the username is part of authentication too, even though it's something everyone knows. Your authentication system should only ever answer ""does a user with this username and credentials exist"", and not the individual pieces."
crypto,2l9k1k,Natanael_L,3,Tue Nov 4 21:15:02 2014 UTC,"Your comparison to a complete lack of protection is way off. With TouchID, an attacker must:   gain physical control of your device obtain a clean fingerprint; one may be on the device screen, but may not process that fingerprint image construct a duplicate fingerprint use that on your device accomplish all of this in an environment that prevents the end user from having an opportunity to remote-wipe the device   Swipe-to-unlock requires the attacker to:   gain control of your device   That's it.  TouchID certainly isn't as secure as using a strong device password, but makes an excellent balance between usability and security for most users -- most users find even a 4-digit PIN to be too much hassle.  The sorts of people who have such sensitive things to protect that TouchID wouldn't be sufficient ought not be using a stock-OS smartphone in the first place, or at least ought to have a sandbox on that phone that requires additional authentication to access."
crypto,2l9k1k,0x6d1e,1 point,Tue Nov 4 21:26:31 2014 UTC,"The attacker can do it in this order:   Stakeout at a public place over a few days (maybe in a few 30 minute periods? potentially hide a videocamera to reduce manual work, you could even run facial detection to categorize the bypassers) collect fingerprints at the scene from one or more of the people they selected which was seen more than once (thus likely to return)  process prints & construct duplicate  return to site, grab device when one of the chosen targets return  use print copy 15 seconds later    Given the Apple Pay connection, that doesn't seem all that implausible. The payout could be pretty good. A Raspberry Pi, camera module, and a few 64 GB memory sticks (costs maybe $150) and you've got high res video and it can log who has been there when and for how long over a week or so. Just let it log every detected face together with timestamp, then figure out which are the same faces. You can likely see what they have touched too if you place it right (staircases would be good, and other fairly large surfaces that are frequently touched where you likely can find some prints that are mostly intact).   <1h work per print (total effort / number of targeted devices) and a few hundred dollars in payout per successfully applied copied print. Not all that bad. And you can repeat it as often as you like, the most risky action is taking the phone (which is quick), placing and retrieving the camera and photographing surfaces with prints are much less risky. Using the phone to pay is a bit less risky than taking it, almost risk free if there's no surveillance cameras. A single person could do it."
crypto,2l9k1k,Natanael_L,2,Wed Nov 5 13:01:57 2014 UTC,"That's still a pretty high work factor and a pretty personal attack compared to what's possible with no PIN/password enabled and TouchID off, the latter being an easy crime of opportunity as opposed to a carefully-planned and fairly risky attack path."
crypto,2l9k1k,0x6d1e,1 point,Wed Nov 5 22:49:24 2014 UTC,"With no security, of course or is easier. But people are unlikely to use Apple Pay and such without any security. Watching a PIN also carries higher risk of detection."
crypto,2l9k1k,Natanael_L,2,Wed Nov 5 22:53:01 2014 UTC,"people are unlikely to use Apple Pay and such without any security.    People will use things based on convenience. People use credit cards, and those have almost no security.  The reality is that issuers wouldn't participate in Apple Pay if it didn't require some level of security control. TouchID is a good balance between adding control and keeping the end-user experience convenient.  And it's more than sufficient for most users."
crypto,2l9k1k,jecxjo,2,Wed Nov 5 23:07:07 2014 UTC,"Agreed in spirit, but you have to admit lifting a print off a screen and tricking the sensor isn't exactly the same level of difficulty as swiping the screen.  Also I don't think it's a patent that separates the two - Apple seems to have designed a tight relationship between the Touch ID and A7 chips to affect this... Maybe that's the answer.. that Apple completely controls the OS and hardware so can pull it off, where Samsung can't. I'm curious if the hw is there though.. Haven't seen something like this from Samsung: http://www.apple.com/ipad/business/docs/iOS_Security_Feb14.pdf"
crypto,2l9rfm,nslater,9,Tue Nov 4 16:07:03 2014 UTC,"Use scrypt.  Unless you have to use standards approved algo, then use pbkdf2.  If you can't use scrypt, and don't have to use pbkdf2 (FIPS...), then use bcrypt.  Http://www.owasp.org/index.php/Password_Storage_Cheat_Sheet  Hashcat added scrypt support recently, which confirmed it as hard to brute force due to memory usage."
crypto,2l9rfm,R-EDDIT,1 point,Tue Nov 4 18:16:41 2014 UTC,"Unless you have to use standards approved algo   And I feel like this argument is very, very heavily overstated. I'm currently looking at an application that still uses a single pass MD5 because it once got some Government accreditation based on it."
crypto,2l9rfm,disclosure5,1 point,Wed Nov 5 05:06:52 2014 UTC,"That is not really a fair statement.  You can't just pick something and never update it, regardless of its standing as a government standard at one point.    If they were actually keeping up with the FIPS standard they would be using sha-2 as of 2010.  MD5 was replaced years ago.  And PBKDF2 is a good KDF, its variable PRF will support other values.  However if an attack is found for sha-256 scrypt would need to be updated."
crypto,2l9rfm,xJoe3x,1 point,Wed Nov 5 15:17:22 2014 UTC,"I wasn't saying it's correct from a technical point of view. It is however, absolutely the correct thing to do from the point of view of a project manager who has no idea what you just said, but knows he has a five year old stamp that says ""certified""."
crypto,2l9rfm,disclosure5,-3,Wed Nov 5 21:35:13 2014 UTC,"but with scrypt, beware of side channel attacks"
crypto,2l9rfm,pint,2,Tue Nov 4 20:49:52 2014 UTC,"While bcrypt isn't a bad solution, it is a bit dated compared to scrypt. Not that surprising given that this article was written in 2010 and last updated in 2011. In my systems where efficiency isn't a huge requirement I like to use PBKDF2 with a strong hashing algorithm, then run that result through scrypt, and then encrypt the final result with AES-GCM. By doing this, if a flaw is found in one method (e.g., PBKDF2) I still get the protection afforded by the other. I then use AES-GCM at the end to make an attacker have to get a hold of my database and my encryption keys (that are hopefully in an HSM) in order to crack a password and because GCM gives me integrity protection from those DBA's I don't always trust :)."
crypto,2l9rfm,marklarledu,1 point,Tue Nov 4 18:14:16 2014 UTC,also PHC
crypto,2l9rfm,pint,0,Tue Nov 4 18:17:22 2014 UTC,"Salts are useful since users choose similar to the same password. If two users have the same password, they will have the same hash."
crypto,2l9rfm,conradsymes,-2,Wed Nov 5 04:10:29 2014 UTC,bcrypt offers no serious advantages over pbkdf2
crypto,2l6r6z,wonkadonk,11,Mon Nov 3 19:56:58 2014 UTC,Might be time to dust off Bernstein v. United States
crypto,2l6r6z,PEPCK,12,Mon Nov 3 23:05:52 2014 UTC,"http://en.wikipedia.org/wiki/Bernstein_v._United_States  I thought this ""encryption as a munition"" thing was done with."
crypto,2l6r6z,KayRice,4,Mon Nov 3 23:21:52 2014 UTC,"Bernstein v. United States:       Bernstein v. United States is a set of court cases brought by Daniel J. Bernstein challenging restrictions on the export of cryptography from the United States.  The case was first brought in 1995, when Bernstein was a student at University of California, Berkeley, and wanted to publish a paper and associated source code on his Snuffle encryption system. Bernstein was represented by the Electronic Frontier Foundation, who hired outside lawyer Cindy Cohn. After four years and one regulatory change, the Ninth Circuit Court of Appeals ruled that software source code was speech protected by the First Amendment and that the government's regulations preventing its publication were unconstitutional.  Regarding those regulations, the EFF states:  The government requested en banc review.   In Bernstein v. U.S. Dep't of Justice, 192 F.3d 1308 (9th Cir. 1999), the Ninth Circuit ordered that this case be reheard by the en banc court, and withdrew the three-judge panel opinion, Bernstein v. U.S. Dept. of Justice, 176 F.3d 1132 (9th Cir.1999).      Image i     Interesting: Daniel J. Bernstein | Junger v. Daley | Native Americans in the United States | United States presidential election, 2004   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2l6r6z,autowikibot,2,Mon Nov 3 23:22:41 2014 UTC,"It's not ITAR just export restricted, and its all a PITA headache that is at all talked about (for example EFF has a recent call for easy to use encryption apps but provides ZERO information in a MINEFIELD of how to legally post them!)."
crypto,2l6r6z,zimm3r16,2,Mon Nov 3 23:40:13 2014 UTC,"Not really, the case was never really completed as the government changed the regulations at issue."
crypto,2l6r6z,PEPCK,4,Mon Nov 3 23:30:30 2014 UTC,"Ya they, IIRC, removed it from ITAR and dodged the issues of Bernstein wanted and but still had export laws for the public internet (as opposed to books, which Schneier used in one of his books and had an apendix that was the PGP code ready to be OCRed.)"
crypto,2l6r6z,zimm3r16,1 point,Tue Nov 4 04:01:29 2014 UTC,Suppose we publish sourcecode in non-DRM'd ebooks?
crypto,2l6r6z,ItsAConspiracy,0,Tue Nov 4 15:39:17 2014 UTC,"(AGAIN NOT A LAWYER ETC).  I believe that would need EAR export permission etc, IIRC Schneier had to only have the PGP source code in the paper, physical, book."
crypto,2l6r6z,zimm3r16,1 point,Tue Nov 4 16:26:44 2014 UTC,"But then the First Amendment only applies to paper books, not ebooks. I don't plan to test it myself but that would be an interesting case to watch."
crypto,2l6r6z,ItsAConspiracy,1 point,Tue Nov 4 17:57:14 2014 UTC,(I am not a lawyer this is not legal advice).   I'm not saying I agree or disagree with just what the law seems to indicate that do to their easy of being spread etc they have export restrictions etc.
crypto,2l6r6z,zimm3r16,-1,Tue Nov 4 21:30:06 2014 UTC,Goodluck debugging that scan. May god have mercy on the poor soul.
crypto,2l6r6z,sharedicecream,2,Tue Nov 4 09:29:00 2014 UTC,It was monospace font set up in a way for OCR to have the best possible chance. Schneier apparently tested it IIRC.
crypto,2l6r6z,zimm3r16,1 point,Tue Nov 4 16:27:44 2014 UTC,"Sadly you first need someone to actually violated it and bring the constitutional issue, which if they loose means lots of $$$$."
crypto,2l6r6z,zimm3r16,8,Mon Nov 3 23:40:51 2014 UTC,"Encryption source code is free speech according to the Supreme Court, but compile it and you've got a weapon!  How silly is that?"
crypto,2l6r6z,YouFeedTheFish,7,Tue Nov 4 04:08:11 2014 UTC,"""Encryption works. Properly implemented strong crypto systems are one of the few things you can rely on."""
crypto,2l6r6z,ThePooSlidesRightOut,3,Tue Nov 4 07:25:58 2014 UTC,It's a shame that 'properly implemented' is impossible to define.
crypto,2l6r6z,ctcampbell,2,Tue Nov 4 09:39:55 2014 UTC,"And its unknown what are ""strong encryption systems"" because Snowden didn't have access to ECI documents or knowledge explaining the agency's cryptanalytic capabilities."
crypto,2l6r6z,seekoon,2,Tue Nov 4 11:32:04 2014 UTC,Too bad key logger malware implants are apparently child's play.
crypto,2l6r6z,YouFeedTheFish,1 point,Tue Nov 4 13:43:54 2014 UTC,"Unfortunately, so few companies have implemented ""strong crypto""."
crypto,2l6r6z,zimm3r16,1 point,Tue Nov 4 13:49:50 2014 UTC,"Extremely, especially sense any rogue state can easily implement crypto and get up to speed with most of the non secret NSA esk knowledge by buying people like Schneier's books and reading Wikipedia."
crypto,2l6r6z,YouFeedTheFish,1 point,Tue Nov 4 16:28:51 2014 UTC,"Or sending their top students to American universities, like everybody else."
crypto,2l6r6z,483724932,7,Wed Nov 5 02:40:20 2014 UTC,"The US really knows how to kill their security, software, hardware and services industries in the world wide market doesn't it. All the weak standards, backdooring, lies, under the table payments, shipment rerouting, national security letters, cable taps, court orders, fines and export regulations. How does the IT industry over there even function anymore? Nobody trusts American made now. It's tarnished forever."
crypto,2l6r6z,haskell101,4,Tue Nov 4 11:37:46 2014 UTC,"Sadly, many many many people just don't care about the recent leaks.. They definitely should though..   And the recent Australia's terror law tells me that Australia is the same.."
crypto,2l6r6z,zimm3r16,3,Tue Nov 4 11:42:46 2014 UTC,"I certainly saw them complaining about the new laws rushed through on r/australia. However complaining on the internet doesn't do anything. There's not enough awareness of these issues and the mainstream media doesn't cover them. If you think of the general populace on the same level as the people in the Idiocracy movie and the governments on par with the villians in Enemy of the State and V for Vendetta movies, then you get a picture of the way it seems to be heading."
crypto,2l6r6z,mnp,3,Tue Nov 4 11:51:49 2014 UTC,"I hope they keep getting worse.  America's strangle-hold over all things technology is bad for the world.  The sooner they force everyone else to move big important services out of the USA, the faster humanity can progress."
crypto,2l6r6z,zimm3r16,13,Tue Nov 4 13:12:36 2014 UTC,"So next up lots of open source projects and things on github? Having read the EAR laws it is a PITA and a headache (also IMO unconstitutional as I find it unduly restricts freedom of speech, which the government in Burnstein argued against).   And lawyers are expensive, especially for free open source products! (not the lawyers fault, its the fault of the government's idea encryption is a weapon etc; its easier for AlQueda to export it because they dont have to follow the law.... its not hard to find it, just read Wikipedia). (Then there is the EFF who asks for easy to use encryption but then doesn't post any guide on PITA export laws wtf EFF)."
crypto,2l6r6z,throwaway,4,Mon Nov 3 20:59:07 2014 UTC,"Good question. If the repo site is in the US, it's hard to argue with posting crypto there. And if a foreigner wants to download it, it's hugely troublesome if not impossible to determine where they are from and what is export controlled."
crypto,2l6r6z,aseipp,0,Mon Nov 3 23:17:50 2014 UTC,Doesn't matter it is required to post it on the internet you have to get a registration before posting it on the internet or a public site.  (Again not a lawyer etc this is not legal advice etc etc).
crypto,2l6r6z,throwaway,2,Mon Nov 3 23:36:16 2014 UTC,What's the evidence for this?   Back in the 90s people were posting PGP on US sites with a simple disclaimer saying it's illegal to download it from elsewhere.
crypto,2l6r6z,zimm3r16,1 point,Tue Nov 4 00:46:04 2014 UTC,"I really don't know what point they're trying to make honestly. Here's a flow chart from the BIS: http://www.bis.doc.gov/index.php/forms-documents/doc_view/328-flowchart-2  The first arrow is all that's relevant: if your software is under an open source license, you can self classify the software under License Exception TSU 740.13(e) and distribute it. All this requires is you notify the BIS, which can be done in an email. It's not very hard... He even posts it later in his quote, which is from the BIS:   Notification requirement. You must notify BIS and the ENC Encryption Request Coordinator via e-mail of the Internet location (e.g., URL or Internet address) of the publicly available encryption source code or provide each of them a copy of the publicly available encryption source code. If you update or modify the source code, you must also provide additional copies to each of them each time the cryptographic functionality of the source code is updated or modified. In addition, if you posted the source code on the Internet, you must notify BIS and the ENC Encryption Request Coordinator each time the Internet location is changed, but you are not required to notify them of updates or modifications made to the encryption source code at the previously notified location. In all instances, submit the notification or copy to crypt@bis.doc.gov and to enc@nsa.gov.   I honestly don't know why crypto nerds are suddenly flipping out about this news... none of these rules have changed in over a decade from what I can tell, and the burden for open source software is extremely low (even if I still think it's stupid) - the trick is Wind River (an Intel subsidiary) is being fined for exporting their work to places that the BIS has blacklisted for export (based on the classification of their product). That's a violation of the BIS's export regulations; of course it stands to reason they could get fined for such a violation. In fact, the reason the fine wasn't bigger is specifically because Wind River noticed this and voluntarily disclosed it to the BIS.  You're not going to get fined for posting stuff to GitHub; Wind River was fined for violating the export laws they had to uphold for their products. The burden for open source is so low it's pointless to go after."
crypto,2l6r6z,throwaway,1 point,Wed Nov 5 00:26:40 2014 UTC,Thank you.  This is awesome information.
crypto,2l6r6z,zimm3r16,1 point,Wed Nov 5 00:40:51 2014 UTC,(Again not a lawyer etc). From reading the legal stuff and BIS posting it on the internet is defacto export because of its nature.
crypto,2l6r6z,aseipp,2,Tue Nov 4 01:45:53 2014 UTC,Can you please point to the relevant legal stuff/BIS documents?
crypto,2l6r6z,zimm3r16,-1,Tue Nov 4 01:55:52 2014 UTC,"Again NOT A LAWYER THIS IS NOT LEGAL ADVICE AND SHOULD NOT BE CONSTRUED AS SUCH!  (to the person down voting me please explain WHY. This is the law as you can easily read below...)  15 CFR 740.13   (e) Publicly available encryption source code. (1) Scope and eligibility. Subject to the notification requirements of paragraph (e)(3) of this section, this paragraph (e) authorizes exports and reexports of publicly available encryption source code classified under ECCN 5D002 that is subject to the EAR (see§ 734.3(b)(3) of the EAR). Such source code is eligible for License Exception TSU under this paragraph (e) even if it is subject to an express agreement for the payment of a licensing fee or royalty for commercial production or sale of any product developed using the source code. (2) Restrictions. This paragraph (e) does not authorize: (i) Export or reexport of any encryption software classified under ECCN 5D002 that does not meet the requirements of paragraph (e)(1), even if the software incorporates or is specially designed to use other encryption software that meets the requirements of paragraph (e)(1) of this section; or (ii) Any knowing export or reexport to a country listed in Country Group E:1 in Supplement No. 1 to part 740 of the EAR. (3) Notification requirement. You must notify BIS and the ENC Encryption Request Coordinator via e-mail of the Internet location (e.g., URL or Internet address) of the publicly available encryption source code or provide each of them a copy of the publicly available encryption source code. If you update or modify the source code, you must also provide additional copies to each of them each time the cryptographic functionality of the source code is updated or modified. In addition, if you posted the source code on the Internet, you must notify BIS and the ENC Encryption Request Coordinator each time the Internet location is changed, but you are not required to notify them of updates or modifications made to the encryption source code at the previously notified location. In all instances, submit the notification or copy to crypt@bis.doc.gov and to enc@nsa.gov."
crypto,2l6r6z,aseipp,1 point,Tue Nov 4 03:57:41 2014 UTC,"No you don't. Read License Exception TSU 740.13(e). All you have to do if you release publicly available source code on the internet is email the BIS, as you can self classify the encryption software under ECCN 5D002. They specifically mention public internet URLs in this clause, exactly for this reason. It's also less burdensome to point them to a canonical public URL as you don't have to update them any more about changes to the software (unless that URL changes).  Emailing the BIS (aka ""The Notification Requirement"") is literally the only requirement for open source code."
crypto,2l6r6z,bitwiseshiftleft,1 point,Wed Nov 5 00:42:36 2014 UTC,That is stil a requirement to be registered.
crypto,2l6r6z,zimm3r16,1 point,Wed Nov 5 01:25:29 2014 UTC,"Yes, it is. I'm referring to this sentence in your post:   registration before posting it on the internet or a public site.   Which is false. You can post it, and send it to them. In fact, that's the preferred way to do it as you never have to update them again unless the URL changes."
crypto,2l6r6z,bitwiseshiftleft,-1,Wed Nov 5 01:30:58 2014 UTC,Some of my stuff is on Sourceforge instead of Github because it can ip-block export restricted countries.
crypto,2l6r6z,zimm3r16,-1,Mon Nov 3 21:20:23 2014 UTC,"Sadly doesn't matter, unless it blocks all other countries IIRC. You need registration etc to just post it on the internet as I understand it.  (Again not a lawyer etc this is not legal advice etc etc)."
crypto,2l6r6z,bitwiseshiftleft,1 point,Mon Nov 3 23:35:27 2014 UTC,"I know.  Legal at my company said I could open source something, and went through the export licensing process, but they said I had to put it on Sourceforge for this reason."
crypto,2l6r6z,zimm3r16,0,Mon Nov 3 23:56:12 2014 UTC,"(Not a lawyer etc warning). Lucky, bit jealous you had legal access haha. It was my understanding after you submit that you are posting public source code that you don't have to actively take the route of trying to block the 5 states (Sudan, NK, Syria, etc)."
crypto,2l6r6z,throwaway,1 point,Tue Nov 4 01:47:12 2014 UTC,Could be they are just cautious.  I dunno.  Sometimes it's convenient to just follow legal's advice and not care why they gave it :-)
crypto,2l6r6z,ctcampbell,-1,Tue Nov 4 01:53:12 2014 UTC,"Oh no I would agree it is best to follow legal advice didn't mean to suggest not to. (Again normal disclaimer, not a lawyer etc.)"
crypto,2l6r6z,zimm3r16,7,Tue Nov 4 03:46:58 2014 UTC,So what was the specific technology which got them in trouble?  From the table at the bottom of the charge letter it looks like one of the products they were charged over is Wind River Linux.  What's so special about it that it's a National Security concern?  (WRL product page)
crypto,2l6r6z,KayRice,3,Mon Nov 3 21:35:23 2014 UTC,"Well the US government would probably prefer those 'terrorist' countries were using Windows, which they have carte blanche access to with the PRISM programme."
crypto,2l6r6z,zimm3r16,5,Tue Nov 4 11:29:49 2014 UTC,Don't write code in the US. Problem solved.
crypto,2l6v08,electronics-engineer,2,Mon Nov 3 20:28:49 2014 UTC,"I posted this on the /r/programming discussion:  Here is an interesting question: for known number types, it should be fairly simple to back out the key of any data using homomorphic encryption I would think: For example, I have a field that I know is an integer (x). I can get 0, 1, and from that, every other integer pretty easily:  0 = x - x 1 = x / x 2... = 0 + 1 + 1...   Which means I can, rather trivially, back out every single value. What am I missing? How is homomorphic encryption not almost entirely useless?"
crypto,2l6v08,spotta,4,Tue Nov 4 01:42:58 2014 UTC,"You haven't posted your entire scheme, but I suspect when you say:  0 = x - x   You actually mean:   0 = Enc(1) - Enc(1)   Or in otherwords  Enc(1) = Enc(1)   Which is not true.  Homomorphic encryption of values is not determinisitc.  So if you have two unknown ciphertexts, C1 and C2, then the probability of them being equal is diminishingly small. More-over the computation C1 - C2 is rather meaningless - the ciphertexts are usually an encoding of a fixed with integer in some other form, you can't simply apply integer subtraction to the ciphertext and have that equate integer subtraction of the plaintext."
crypto,2l6v08,tom-md,3,Tue Nov 4 06:38:22 2014 UTC,"For example, I have a field that I know is an integer (x).    That statement already is confusing.  a Field is a set, F, with a closed addition operator  on F and a group under multiplication on (F - {0}).     I can get 0, 1, and from that, every other integer pretty easily:  0 = x - x  (Additive inverse in Z)  1 = x / x (Multiplicative inverse in Q)  2... = 0 + 1 + 1... (addition in Z)   Keep in mind the homorphic function you're using is the identity function f(x) = x. It's the most trivial homorphic function we have.  A homomorphism satifies the property f(x + y) = f(x) * f(y)  where the '+' is the additive operator on the domain and the '*' operator is the additive operator in the codomain.  I think that is what you are missing.  If none of that made sense to you, let me try to explain why it is useful and provide a use case.    It is useful because it allows us to modify encrypted data without ""knowing"" the content of the data.  and by ""knowing"" I mean that I don't know the actual value of the data, but I do know what type of data it is.  All encryption today except for the FHE (fully homomorphic encryption) schemes cannot do this.  If I modify the encrypted data, the original value is corrupted if I try to decrypt the modified encrypted data.    The traditional use case would be banking.  Here is the scenario.  I have X amount of dollars.  I encrypt X with my FHE, say f(X), and give f(X) to my bank.  The bank doesn't know how much I have.  Now let's say I want to go buy some Ice Cream for Y dollars (Assume Y < X).  I encrypt Y to f(Y) and give that to my bank.  the bank has f(X) and f(Y) and knows it can perform f(X) - f(Y). Without any knowledge of the value of Y or X, the bank has accounted for my purchase of Ice Cream in my bank account! by the homomorphic property, f(X) - f(Y) = f(X - Y).  I am the only one that knows how to decrypt f(X - Y) using my FHE scheme and I get my bank account balance after my Ice Cream transaction, X-Y.  That use case is awesome and scary at the same time.  If you're the account holder, it's awesome that no one else knows how much money you have.  It' scary if you're a bank because if every account were like this, you'd never know how much money you have in the accounts you manage which also means you don't know how much money you can lend out. It also means that governing bodies (e.g. the federal reserve, internal revenue service,etc.) doesn't know how much money is in the bank."
crypto,2l6v08,throwaway0xFF00,0,Tue Nov 4 04:39:22 2014 UTC,"That statement already is confusing. a Field is a set, F, with a closed addition operator on F and a group under multiplication on (F - {0}).   Sorry, I meant field in the database/element of data sense, not in the mathematical sense.  Though, by pure chance, it happens that machine integers are a field...  and no, I wasn't trying to talk about the identity homomorphic function.  What I was attempting to say is that I know that x-x is 0.  More formally, in your notation:  f(x-x) = f(x) * Inv(f(x)) = f(0).  Likewise for the multiplicative inverse.  Since I know what operations on the encrypted data map to what operations on the decrypted data (because this is a property of the encryption algorithm, but not the key), I can get things like the additive inverse and multiplicative inverse.  Once I can get these, I can rebuild the entire 'Field' (in the mathematical sense) of machine integers, which pretty much allows me to make the map from encrypted to unencrypted values, given nothing other than a single encrypted piece of data and the operations that I can do on it.  Check out the other responses to me in the cryptography subreddit and the programming subreddit for more information on how this problem is solved."
crypto,2l6v08,spotta,4,Tue Nov 4 04:58:50 2014 UTC,"Though, by pure chance, it happens that machine integers are a field...   The integers are not a field.  It's just a ring.   That's why I said:   1 = x / x  (Multiplicative inverse in Q)  f(x-x) = f(x) * Inv(f(x)) = f(0). Likewise for the multiplicative inverse.    Please be careful with the word inverse.  an inverse function implies that f is an injective function.  y in F is said to be a multiplicative inverse of x in F if x*y = id  (multiplicative identity, id is usually 1).  An inverse function and multiplicative inverse are two different things.  Looking at your comment on programming:   What I'm saying is that I don't need to get the decrypted output. If I am given a piece of encrypted data, and I know it is homomorphically encrypted, then I can do two operations to get the identity of addition (0) and the identity of multiplication (1). From these, I can reconstruct every element of the set of numbers representable by that data type (e.g. 1+1=2, 1+1+1=3, etc).   To avoid further confusion, let's make this very clear:  I don't need a field (or a ring) to use a homomorphism.  I just need a set and closure under addition.  I'm not going to continue any further with this."
crypto,2l6v08,throwaway0xFF00,2,Tue Nov 4 05:26:43 2014 UTC,"I think he's right, although that's a trivial consequence of additive homomorphism of encryption. By definition, if you  have two encrypted elements you can construct encryptions of any sum of them, this is intended.  Note that in full homomorphism however, AFAIK, you choose which operations to provide. If you provide ""/"" and ""-"", then given any non-zero encryption the third party can provide you an encryption of any value. He won't actually be able to decrypt your value if it is properly implemented with some kind of randomness, since he would have to check on average at least 2randomness-1 sums to see if a certain guess of what's your encryption is true (by constructing the integer for every value of the randomness) -- which of course is unfeasible for large randomness.  Thus the third party doesn't necessarily has that power (to generate an encryption of any value) if you don't provide necessary functions, so if you wanted him to compute f(x), you could just provide him a function of a kind (compute_f(x),add_counter), so in the end you check that he computed f(x), exactly once (instead of providing e.g. ""/"" and ""-"" and saying, plain text, ""Compute f(x)"")."
crypto,2l6v08,darkmighty,2,Tue Nov 4 10:54:49 2014 UTC,"No, he's saying more than that.  He is suggesting that because you can construct encryptions then you can trivially determine the plaintext value of a given ciphertext, which just isn't true and shows a painful lack of reading."
crypto,2l6v08,tom-md,2,Tue Nov 4 16:15:39 2014 UTC,"Did you read my whole post? I think it's true that he might be able to determine the plaintext value, given the right operations, for some definitions of homomorphic encryption."
crypto,2l7zii,ingre,1 point,Tue Nov 4 02:21:39 2014 UTC,"Why on Earth use RC4 for this purpose? It already uses AES-256, might as well use AES-256 CTR."
crypto,2l8aya,ngongo,1 point,Tue Nov 4 04:12:32 2014 UTC,What do you mean by trust?
crypto,2l8aya,phyzome,1 point,Tue Nov 4 12:25:54 2014 UTC,As in if Alice sent the file to Bob but then Bob decides to break the promise Alice can't do anything.
crypto,2l8aya,Natanael_L,1 point,Wed Nov 5 01:26:50 2014 UTC,"You can't really do it without a trusted third party AND perfectly protect against bruteforce.   You can give the other party an encrypted container and a hash of the encryption key with a Zero-knowledge proof of that the container has the file in question. Then you both do this for your respective files, and then you take turns releasing parts of the key (also with corresponding Zero-knowledge proofs of correctness). Either both parties fulfill the protocol or somebody has to do expensive bruteforce. Maybe you'll release something like 40 bits at once, such that if one side drops out after getting the last 40 and the other side didn't get his last 40 bits, bruteforce is possible but still expensive. This could still be abused, but it reduced the risk. Note that one side could still chose to drop out early and chose to do bruteforce when they've got all but 40 bits and the other side still lacks 80 bits. You can also go for smaller pieces at each turn, but that has other security tradeoffs."
crypto,2l8aya,pint,1 point,Tue Nov 4 19:30:13 2014 UTC,"Thanks for the reply, i am looking into optimistic fair exchange. There is no layman explanation to this algorithm/protocol, all the papers are quite complex in math"
crypto,2l8aya,pint,1 point,Wed Nov 5 01:28:49 2014 UTC,you did not mention any third parties in your question.
crypto,2l8aya,Natanael_L,1 point,Wed Nov 5 08:06:46 2014 UTC,"Well, my bad. Edited the question"
crypto,2l8aya,pint,1 point,Wed Nov 5 08:10:01 2014 UTC,"i still think it is impossible, you need further assumptions. for example reliable communication link. if an attacker can sabotage a chosen part of the communication, no protocol can work."
crypto,2l8aya,autowikibot,1 point,Wed Nov 5 08:47:44 2014 UTC,"A trusted third party can verify Zero-knowledge proofs and that what both parties have stored with him is effectively equivalent, so that everything can be sent to both parties simultaneously. If you add public key encryption on top of the communication then you can also keep everything secret from the third party."
crypto,2l8aya,pint,-1,Wed Nov 5 08:58:06 2014 UTC,"i haven't given it too much thought, but i guess you can use the two generals' problem"
crypto,2l8aya,phyzome,2,Tue Nov 4 10:02:03 2014 UTC,"Two Generals' Problem:       In computing, the Two Generals' Problem is a thought experiment meant to illustrate the pitfalls and design challenges of attempting to coordinate an action by communicating over an unreliable link. It is related to the more general Byzantine Generals' Problem (though published long before that later generalization) and appears often in introductory classes about computer networking (particularly with regard to the Transmission Control Protocol), though it can also apply to other types of communication. A key concept in epistemic logic, this problem highlights the importance of common knowledge. Some authors also refer to this as the Two Armies Problem or the Coordinated Attack Problem.       Interesting: Two-body problem in general relativity | Byzantine fault tolerance | Atomic commit | Verbal Behavior   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2l8aya,pint,2,Tue Nov 4 10:02:11 2014 UTC,"Thanks for input, two general problem is about communicate over unreliable channel. I don't think it's suitable for my scenario."
crypto,2l8aya,phyzome,0,Wed Nov 5 01:51:46 2014 UTC,"i think it is, but you are free to dismiss it"
crypto,2l8aya,pint,1 point,Wed Nov 5 08:04:40 2014 UTC,"That's not a protocol, why do you bring it up? I don't see how it's related at all, in fact."
crypto,2l7ek4,Deffnotanalt,2,Mon Nov 3 23:12:47 2014 UTC,Y'all know each other? https://www.reddit.com/r/codes/comments/2l7d9b/nb2hi4b/
crypto,2l7ek4,phyzome,2,Tue Nov 4 00:23:10 2014 UTC,I'm stuck in a loop.
crypto,2l2h17,wonkadonk,30,Sun Nov 2 15:19:25 2014 UTC,Of course it does... It asks you right when you set it up if you want to sync a recovery key to your one drive...  If keypads keypass starts asking if you want to save your key file to Dropbox are they also in bed with the NSA? Cause this is practically the same thing.  Bitlocker is great for a lot of things (keeping bad people from getting at your data) but protecting data from NSA-like adversaries is not one of them.  EDIT: Autocorrect...
crypto,2l2h17,Klathmon,9,Sun Nov 2 17:45:27 2014 UTC,"Bitlocker is great for a lot of things (keeping bad people from getting at your data) but protecting data from NSA-like adversaries is not one of them.   I thought the idea was, particularly in this age of database leaks ""oops your passwords were plaintext and someone stole em"" was that ""If the NSA has a secret way in, that same route can be exploited by any malicious party"" and not so much ""The gov'ment is stealin my megabytes."""
crypto,2l2h17,AirPhforce,6,Sun Nov 2 18:45:08 2014 UTC,"That's true, but as of right now we have no evidence of an NSA backdoor to any good symmetric encryption schemes.  And in this case, obviously a company should not be storing encryption keys on one drive."
crypto,2l2h17,Klathmon,5,Sun Nov 2 18:57:17 2014 UTC,"Domain joined computers do not have the option to store the key one onedrive, so most companies can't do that even if they wanted to."
crypto,2l2h17,matthew5025,3,Sun Nov 2 23:39:41 2014 UTC,They aren't so much backdoors as the NSA has the same keys you have.
crypto,2l2h17,itguyy,0,Mon Nov 3 13:37:20 2014 UTC,Maa megaabyytes eeoh noo
crypto,2l2h17,geraldsummers,1 point,Mon Nov 3 07:50:26 2014 UTC,Are those keys at least encrypted with a user supplied password not on MS servers ?
crypto,2l2h17,m1000,7,Sun Nov 2 19:35:48 2014 UTC,"No as that would defeat the purpose.  The point of them is to recover data on your Bitlocker encrypted drive if you forget the original password.  It is (for all intents and purposes) a decryption key. It tells you that right when you encrypt the drive.   It also gives you the option to create a decryption key file which you can store somewhere you ""trust"" also."
crypto,2l2h17,Klathmon,8,Sun Nov 2 19:51:36 2014 UTC,"The point of them is to recover data on your Bitlocker encrypted drive if you forget the original password.   this type of stuff drives me insane.  if i forget my password, i expect to lose access to the data.  that's the entire purpose of the password."
crypto,2l2h17,Klathmon,12,Sun Nov 2 21:47:21 2014 UTC,"That's fine, then don't make a backup of your key. (Bitlocker allows this)  But if it's for someone like my mother, then I'm going to make a backup and keep it on her one drive. After all, she is just trying to keep laptop thieves from getting at her bank info."
crypto,2l2h17,itguyy,3,Sun Nov 2 21:53:20 2014 UTC,that's a fair point
crypto,2l2h17,ThePooSlidesRightOut,-1,Sun Nov 2 21:57:46 2014 UTC,Yeah if you have nothing to hide from the government it's not really a big deal. And if you do have something to hide then you should probably be caught and arrested anyway so it's not really a big deal...
crypto,2l2h17,Klathmon,1 point,Mon Nov 3 13:44:41 2014 UTC,that's not a valid argument.  https://pay.reddit.com/r/privacy/comments/2kt1yy/how_private_is_too_private/clp05ps?context=3  https://pay.reddit.com/r/privacy/wiki/surveillance_not_ok  https://papers.ssrn.com/sol3/papers.cfm?abstract_id=998565  http://www.economist.com/news/finance-and-economics/21571468-lenders-are-turning-social-media-assess-borrowers-stat-oil
crypto,2l2h17,ThePooSlidesRightOut,1 point,Tue Nov 4 00:09:40 2014 UTC,"If the device is not domain-joined a Microsoft Account that has been granted administrative privileges on the device is required. When the administrator uses a Microsoft account to sign in, the clear key is removed, a recovery key is uploaded to online Microsoft account and TPM protector is created. Should a device require the recovery key, the user will be guided to use an alternate device and navigate to a recovery key access URL to retrieve the recovery key using their Microsoft Account credentials.  If the user signs in using a domain account, the clear key is not removed until the user joins the device to a domain (on x86/x64 platforms) and the recovery key is successfully backed up to Active Directory Domain Services. The Group Policy setting Computer Configuration\Administrative Templates\Windows Components\BitLocker Drive Encryption\Operating System Drives must be enabled and the option Do not enable BitLocker until recovery information is stored in AD DS for operating system drives should be selected. With this configuration the recovery password will be automatically created when the computer joins the domain, then the recovery key will be backed up to AD DS, the TPM protector is created, and the clear key is removed.   http://technet.microsoft.com/en-us/library/dn306081.aspx  https://archive.today/57de2"
crypto,2l2h17,seattlyte,2,Sun Nov 2 23:46:44 2014 UTC,"What is your point?  That shows that on new installs a clear-text key is created until the user has a chance to login, at which point the cleartext key is removed and the user is given an option to backup the recovery key to their microsoft account. It's the best of both worlds as the user does not have to spend time encrypting the entire drive when they first sign in, and instead just need to encrypt the clear-text key and then delete the original.  I'm not sure why it doesn't mention that it's an option, but it is. Here is the actual window it shows you. And I literally just took that screenshot from my 8.1 laptop."
crypto,2l2h17,essentialfloss,2,Sun Nov 2 23:54:43 2014 UTC,"oooh, thanks for the screenshot.  guess I brought my pitchforks out too early, then :("
crypto,2l2h17,TheBellTollsBlue,1 point,Mon Nov 3 00:10:05 2014 UTC,"If keypass starts asking if you want to save your key file to Dropbox are they also in bed with the NSA?   No but I would say yes if keypass were to create a cloud, onboard the cloud to PRISM, and automatically and transparently upload your keys there."
crypto,2l2h17,Chizbang,-1,Mon Nov 3 03:17:54 2014 UTC,I see the Microsoft thing and instantly I feel like this is in no way NSA-proof
crypto,2l206r,memostothefuture,4,Sun Nov 2 10:37:47 2014 UTC,Blowfish 512       Huh? Doesn't Blowfish top out at 448?
crypto,2l206r,disclosure5,2,Sun Nov 2 23:42:20 2014 UTC,Some implementations support up to 576 bit keys. But you're right that Blowfish proper does have a max key length of 448 bits.
crypto,2l206r,nsa_at_home,1 point,Mon Nov 3 06:12:15 2014 UTC,This is what my VPN provider says: http://imgur.com/JRmSzy8
crypto,2l206r,ivosaurus,5,Mon Nov 3 03:04:15 2014 UTC,"Use AES 256, that means you'll probably get a hardware speedup if you have a recent CPU. The number refers to the number of bits used in the key. Anything >=256 is unbruteforceable.  AES is ""approved"" by NIST, which is the reason why it's called AES and not its original name, Rijndael.  *UDP will probably be faster.  There is no hard evidence to suggest that AES is broken."
crypto,2l206r,Elyotna,5,Sun Nov 2 12:39:58 2014 UTC,"""UDP will probably be faster but you are open to packet loss, TCP will be slightly more reliable.""  Since you will encapsulate (mostly) TCP streams into UDP, there won't be any ""packet loss"". UDP should really be preferred for tunneling."
crypto,2l206r,karlw00t,3,Sun Nov 2 15:34:18 2014 UTC,Tunneling a stateful protocol over a stateful protocol will result in strange behavior.  Edit: english
crypto,2l206r,stormaes,-4,Sun Nov 2 13:40:21 2014 UTC,"I can't vouch for the encryption methods, but use TCP. Its more reliable at getting data from a-b, whereas UDP is not as reliable in actually getting stuff there.  There's a good comparison of the two on the wikipedia page."
crypto,2l206r,Creshal,9,Sun Nov 2 11:12:53 2014 UTC,"Its more reliable at getting data from a-b   It's a bit counter-intuitive, but using TCP to tunnel other TCP connections is less reliable."
crypto,2l206r,qnxb,4,Sun Nov 2 11:27:34 2014 UTC,"Not less reliable, per se, just much less performant in the presence of non-congestion packet loss. If a packet is lost, both the inner and outer TCP streams will retry, resulting in a momentary burst of mostly useless traffic."
crypto,2l206r,stormaes,2,Sun Nov 2 13:39:15 2014 UTC,Well you have me there.  I don't have any experience with VPNs and tunnelling TCP in TCP.
crypto,2l206r,spap-oop,17,Sun Nov 2 11:34:04 2014 UTC,"As far as I know, AES stands for American Encryption Standard. You can bet that NSA had it's paws in the creation of that one.   As far as you know isn't very far. Read up on Rijndael and the creation of the Advanced Encryption Standard."
crypto,2l206r,spap-oop,7,Sun Nov 2 12:05:00 2014 UTC,"I'd say I have a low tolerance for people posting ""helpful""  (mis)information about topics they know nothing about.  If you don't know, stay quiet and let someone who DOES know answer. Making shit up doesn't make you smart just because you have an answer."
crypto,2l206r,spap-oop,2,Sun Nov 2 12:09:42 2014 UTC,"Pardon me, but you're being an ass. Thank you."
crypto,2l206r,dd3fb353b512fe99f954,5,Sun Nov 2 16:14:44 2014 UTC,"Using TCP doesn't protect you from shit, it's not a valid reason."
crypto,2l206r,deathfantasy,1 point,Sun Nov 2 16:35:27 2014 UTC,Talk about irony. You got riled up over this shit?
crypto,2l206r,dragonEyedrops,6,Sun Nov 2 16:52:43 2014 UTC,"TCP is a bad choice for VPNs, because (as you certainly know from your books) it's speed control and retransmission mechanisms rely on the fact that congestion and losses simply loose packets. Using TCP below TCP leads to the higher TCP instances not being able to properly use these mechanisms which leads to performance problems.  http://sites.inka.de/~W1011/devel/tcp-tcp.html"
crypto,2l3177,disclosure5,3,Sun Nov 2 18:48:52 2014 UTC,You're asking two questions.       HIPAA-complient work    If it's about being HIPAA compliant - Bitlocker. This is the product that any auditor (read: accountant) has actually heard of. This the tool you can write down in all those forms that verifies you've properly fulfilled your legal requirement.       How can I trust      You need to look no further than this disaster: http://seclists.org/bugtraq/2014/Oct/200       To see a major security company selling a proprietary product with a major crypto failure that would have been called out and killed off on release day if it was an open product.
crypto,2l3177,deathfantasy,2,Sun Nov 2 23:35:51 2014 UTC,"For HIPAA compliance? BitLocker, definitely. It does the job just fine, and the design seems reasonable. It's a safe choice."
crypto,2l3177,Twylite,2,Mon Nov 3 04:39:44 2014 UTC,"Be aware of several caveats with SED/OPAL (these don't apply to all drives, but manufacturers aren't exactly forthcoming about the capabilities of each model):   There are user and administrator access levels.  The BIOS password entry or pre-boot authentication typically only managed the user level; you need a management tool to use the administrator level.  If you don't manage the administrator level then you've probably left it in default configuration, which means you have no security. ""Some ISVs provide a one-time emergency unlock and recovery procedure"" -- TCG - Commonly Asked Questions and Answers on Self-encrypting Drives.  Or, by another name, ""no security"". As should be evident from the above points, the drive has access to the data encryption key via more than one route (user authorisation, admin authorisation, ISV authorisation).  OPAL doesn't specify how (cryptographically) this is achieved.  It has been suggested that some manufacturers don't protect the encryption key under an authorisation key/password, but rather just verify the password and then permit the use of the encryption key (which is stored in flash or on the drive, either in the clear or maybe protected by a static firmware keys - but that's all speculation because the manufacturers won't disclose the details of their implementation).  So, depending on your implementation, ""no security if your attacker can physically access flash or the disk platter(s)"". In some cases the consumer models of ""OPAL"" drives aren't OPAL, but just support the weaker ATA Security standard.   In short, you can't trust SED unless you have taken the time to understand the security characteristics and configuration requirements of your specific drive."
crypto,2l3177,autowikibot,1 point,Mon Nov 3 09:32:09 2014 UTC,Opal Storage Specification:       The Opal Storage Specification from the Trusted Computing Group is a set of Storage Workgroup specifications which provides a comprehensive architecture for putting Storage Devices under policy control as determined by the trusted platform host. The capabilities of the Storage Device to conform with the policies of the trusted platform and the lifecycle state of the Storage Device as a Trusted Peripheral.     Interesting: Trusted Computing Group | Storage security | Boeing E-4   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words
crypto,2l3177,pint,1 point,Mon Nov 3 09:32:20 2014 UTC,"you trust proprietary crypto as much as you trust the company. and not only the intent, but also competence and internal procedures. NSA was able to access google data without most google leaders knowing. can microsoft successfully defend against such attacks?"
crypto,2l3177,n0ko,1 point,Mon Nov 3 13:54:27 2014 UTC,Not even once
crypto,2l3177,SAI_Peregrinus,0,Sun Nov 2 18:52:47 2014 UTC,What does this mean?
crypto,2l3177,SAI_Peregrinus,2,Sun Nov 2 20:03:01 2014 UTC,"You don't trust proprietary crypto. It violates Kerckhoff's principle. You don't know that they don't have NSA backdoors, or other implementation vulnerabilities. Especially if they're hardware based, then you can't even examine disassembly of them.   The ONLY way you can trust it is if you can get access to the source, and verify that the binaries you're using are actually built from that source. If you can't negotiate terms (such as an NDA) such that you (and/or the audit firm of your choice) can do an audit, you can't trust it.  Even if you want to make money off crypto software there's no reason to keep it proprietary: Keep the encrypting core an open library and call it with a proprietary application. Since one of the biggest difficulties of security is making things usable, and the closed code is the bit that makes things usable, then opening only the core .dll or .so doesn't make the application less valuable."
crypto,2kzkgy,ddworken,2,Sat Nov 1 16:49:27 2014 UTC,"I'm confused by this output:  >python passwordGen.py --bits 10 bookseller obtuse pacific  >python passwordGen.py --verify True --password ""bookseller fallout"" --checksum ""pacific"" Checksums do not match. You forgot the word: brickyard   Did the script actually tell me the wrong forgotten word? Is this a bug?  There should really be a check to prevent bits < 10, which this scheme interprets as a 1 word passphrase and will not accept for verification.  Also, I kind of assumed the ""fudge"" factor would account for misspelled words or near-words like obtuse/obtain, but it doesn't. You'd literally need to ignore misspelled words as totally incorrect the way this is implemented. Wouldn't it be more prudent to have a distance threshold for arbitrary words?  I do find functions that return ""Ehhh, kinda!"" interesting though. I like it as an exploration of authentication."
crypto,2kzkgy,aydiosmio,1 point,Sun Nov 2 05:57:41 2014 UTC,"In this case, you supplied ""fallout"" as part of the password in place of obtuse. ""fallout"" is in the wordlist. When it calculates the checksum of ""bookseller fallout"", it sees that the checksum does not match ""pacific . So as to correct for this, it adds the word brickyard (because ""bookseller fallout brickyard"" has a checksum of ""pacific"".   So as to better explain how the error correction works:    First it goes through the supplied password and checksum looking for words that are not in the word list. When it finds a word that is not in the wordlist it calculates the Levenshtein distance of the supplied word from each word in the wordlist. Based off of this, the program finds the word that is the closest match.    E.g. you supply ""bookseller obtain"", it will correct that to ""bookseller obtuse"".   Second it takes the corrected string from the above and calculates the checksum of the string. Then it will compare the generated checksum to the supplied checksum. If they match, then no further work is done. If they do not match it then calculates what word needs to be added to it to make the checksums match. It then adds the word.    Good point on bits < 10, I'll add that check after this message. And you are correct, the ""fudge"" factor does account for misspelled words or near-words. What it does not account for, is deliberately different words.    E.g. The password should be ""bookseller obtuse"", when in reality the user enters ""bookseller fallout"". Due to ""obtuse ""and ""fallout"" not being at all similar, the program will not be able to correct for them. The program can only correct it if they are similar (which IMO is the most likely type of error in terms of human memory).    Thanks for the feedback, I really appreciate it."
crypto,2kzkgy,TNorthover,1 point,Sun Nov 2 19:01:24 2014 UTC,I think I've spotted a way to improve the error correction ability:  bool isCorrectPassWord(std::string pwd) {   return true; }
crypto,2ky72u,cmycorps,11,Sat Nov 1 03:28:36 2014 UTC,"To list all public keys  gpg --list-keys   To view private keys  gpg --list-secret-keys   To import keys from file  gpg --import <filename>   To enrypt a file will produce a .gpg file  gpg --encrypt <filename> # you will be prompted for the id of the keyholder to encrypt for. you will need their public key gpg -e <filename> # short syntax   To decrypt a file encrypted with your public key  gpg --decrypt <filename> # will output to standard out (the terminal)   To redirect decryption to a file  gpg --d [sourcefile] > [destinationfile]   for more options check  man gpg   or  gpg --help   Edit: What program were you trying to use? If it was titled ""Passwords and Keys"" then it's a tool called Seahorse and it doesn't do what you're trying to do.  Also, if all you want is to easily encrypt files for later decryption, you can use archive manager to create an encrypted 7zip archive."
crypto,2ky72u,taidg,1 point,Sat Nov 1 04:49:16 2014 UTC,"You are the man. Edit: Yes it is seahorse, it won't publish my keys."
crypto,2ky72u,taidg,1 point,Wed Nov 5 17:41:26 2014 UTC,"Syncing keys is one of the few things seahorse actually will do.  Seems like sending to keyserver.pgp.com doesn't work and it is a default. Try choosing the hkp://pool.sks-keyserver.net option, or adding pgp.mit.edu as an http keyserver."
crypto,2ky72u,rusty_shaklefurd,5,Wed Nov 5 19:05:45 2014 UTC,"What don't you understand?  Start off with the basics. Do you understand the basic concepts of public key cryptography?   I don't mean the deep mechanics of how its' computationally hard to factor large numbers, but the basics of how the public key is tied to the private key and how that relates to message encryption.  Because if you don't, nothing anyone says is going to make any sense to you because it'll be a black box."
crypto,2ky72u,phyzome,4,Sat Nov 1 04:56:09 2014 UTC,"First of all, understanding what you're actually dealing with:  RSA is an asymmetric key algorithm. Instead of using one password to encrypt, it creates two keys, also known as a Keypair. The keys can only be used with each other, neither can be switched out and have the pair still work.  The way the Keypair works is that a messaged encrypted with one key can only be decrypted with the other key. A message encrypted with key A can only be decrypted with key B, and a message encrypted with key B can only be decrypted with key A.  The way people get a use out of this algorithm is to use it for Public Key Cryptography. One key is labeled the Public Key and the other is labeled the Private Key. The Public Key is given out to everyone. The Private Key is treated like a password and kept secret and safe. Since everyone has the Public Key, they can scramble a message with it and know that only the person who has the Private Key can unscramble the message.  In Public Key Cryptography, mixing a message with the Public Key is called encryption, and mixing a message with the Private Key is called signing or verification. Since the owner of the key is the only person with the Private Key, and everyone has access to the Public Key, anyone can use the Public Key to unscramble the message and see that the owner of the Private Key really did scramble it.  RSA is an mathematical algorithm for encryption. OpenPGP is a standard for the use of public and other key algorithms. Symantec PGP and GnuPG are software implementations of the OpenPGP standard.  gpg --export -a   will export the public key in ascii. Here's one for a Dummy key I made.  gpg --export-secret-key -a   will export the private key in ascii. Don't actually do this, i'm just doing it for demonstration. Here's the paste for the private key. You'll notice it's twice as long: This is because OpenPGP stores both keys in the Private Key block, so that the public key can be reacreated from the private one.  GnuPG stores two keyrings, a Public Keyring and a Private Keyring. You can see the public keyring by using  gpg --list-keys   Each key has a hexidecimal string called a Fingerprint, which is a unique identifier generated using the public key. They're a quick way of making sure everyone is using the same key. If you import that public key you should find a key called ""dummy"" with the fingerprint E01FF0D4 in your Public Keyring. If you want a more secure long-form fingerprint, use  gpg --list-fingerprints   Now I'm going to make a text file which just says ""hello world"". By using  gpg --clearsign hello.txt   I create a file called hello.txt.asc, which looks like this. You can see that it includes the message I was signing. A signed message isn't supposed to be secret, because the key used for unmixing is public.  In OpenPGP you can verify another user's key by signing their Public Key with your Private Key. If you know John Smith personally, and I know you personally, I can make sure my message to John can only be read by him by seeing who the people that I trust trust in turn. This is called the Web of Trust.  Public Keys are stored on Keyservers, which also store key signatures. OpenPGP is built to talk to those servers. You can sign John Smith's key by using  gpg --sign-key John Smith   and it will tell the Keyserver that you trust John Smith. Anyone asking the Keyserver for your key will also be told who you trust, and since you used your Private Key to do it, it will be cryptographically secure. The WOT is pretty much what PGP is for. This stuff is so powerful that US Customs filed an investigation of the creator of PGP for arms exportation.  It's important to understand the basics, but it can be stressful if you're not very savvy with the command line. I haven't used TAILS in a while, but Seahorse is a great GUI for GPG, and it was on TAILS last time I checked. Remember that TAILS will delete everything it did when it shuts down, so Private Keys on it won't be very useful unless you export them.  Hope that helped. Reply and I will go more in-depth. This is my favorite guide to PGP. The biggest thing is: find some local key-signing parties. Bitcoin meetups might also be a good place to look."
crypto,2kyvg4,Keont,1 point,Sat Nov 1 10:57:10 2014 UTC,"Side note, you probably mean ""analyze"". I don't know what ""analize"" would mean, but probably something to do with butts. :-P  (I mention this so you get it right in your assignment.)"
crypto,2kyvg4,phyzome,0,Sat Nov 1 15:06:14 2014 UTC,"Interesting homework. However the professor seems better at coming up with assignments than teaching.  Since you are not a programmer I would advise you to choose a technique you are more comfortable with to make sure that the technique itself is not in your way. Since you are talking about a single round, perhaps you should consider doing it by hand?"
crypto,2kyvg4,3pg,2,Sat Nov 1 12:13:40 2014 UTC,"Before the rant: What is the advantage of doing Camellia by hand, when it has internal functions I do not understand and/or might understand poorly, like the key schedule and some stuff. Why not learning how to run the code?  Now the rant. Why am I not a programmer. Why if I ask on the internet how to do this, everyone assumes I'm retarded? Is something specifically to criptography people, or what?  I need how to start running the code, because full implementations of camelia aren't going to tell me shit, when people over the world can't break it, it's not reasonable of me to come with any conclussion. That's my opinion of course.  Then, I ask how to do that, since I do not want to just modify code like a mad man and break the concept of the cipher. But if I try to ask about that, some people tell me to google: learn to programming, and others tell me I'm not ready to do this.  How can I do it or where should I ask so people that want to help me, does so? Seriously. What am I doing wrong because if people doesn't answer, fine. If people answer shit, not so fine."
crypto,2kyvg4,bitwiseshiftleft,2,Sat Nov 1 15:35:39 2014 UTC,"Camellia is probably not the best choice to round-reduce, for two reasons:   It is a Feistel cipher, so each round only changes half the input.  You could do two rounds, though. Every 6 rounds, it applies an ""FL"" transform.  You'd have to decide whether to include that in the reduced version or not.   Also, your research might not be entirely original, as there are already several papers on attacking reduced Camellia (see, eg, http://scholar.google.com/scholar?q=reduced+round+cryptanalysis+of+camellia ).  That said, Camellia source code is not that hard to dig up and understand.  For example, there's a python implementation at http://omake.accense.com/browser/camellia/trunk/pycamellia.py  The ""feistel1"" function is 2 rounds of Camellia.  Pass it an x which has 4 32-bit words, and a k which has 4 32-bit words, and it will do one round.  Or truncate the EncryptBlock function after the first Feistel1 call (until the return statement) to include the prewhitening step.  The t[i]^=... lines in that function are the FL transform, in case you want to analyze that too."
crypto,2kxkm7,wonkadonk,1 point,Fri Oct 31 23:07:29 2014 UTC,"This doesn't make much sense to me. It seems to be a reinvention of SSL, but I can't understand how it's going to work without PKI and without timestamps.  Can someone explain why they can't just use SSL like most sane people would."
crypto,2kxkm7,telepatheic,2,Fri Oct 31 23:54:06 2014 UTC,"AFAICT this allows them to swap out the authentication mechanism freely, among others"
crypto,2kxkm7,Natanael_L,1 point,Sat Nov 1 00:25:48 2014 UTC,They mention why they don't want to use TLS in the article.
crypto,2kyfey,monican_agent,2,Sat Nov 1 05:25:32 2014 UTC,Why implement your own RNG? Why not /dev/urandom or CryptGenRandom?
crypto,2kyfey,stouset,1 point,Sat Nov 1 12:57:55 2014 UTC,I can answer the former re: /dev/urandom/. It cannot be explicitly seeded as to later verify the authenticity of a game. I suspect that is the same for CryptGenRandom. Both are fine for generating a seed.
crypto,2kyfey,cunttard,1 point,Sat Nov 1 22:37:23 2014 UTC,"In CypherPoker the random number generator is used only for generating cryptographic ""seeds"" and for in-game operations that require random values, like shuffling. Post-game verification is accomplished through cryptosystem functionality (but not the RNG component) using known or static values"
crypto,2kyfey,AnythingApplied,1 point,Tue Nov 4 19:26:11 2014 UTC,"Thank you for your question.  In fact, the RNG class provides an interface to the appropriate cryptographically secure random byte generator in the host OS. In Windows this is CryptGenRandom(), in Mac OS and Linux it's /dev/random, on Android it's /dev/urandom, and in iOS it's SecRandomCopyBytes().  A secondary source of entropy that measures timer interval deltas is also included and additional sources, both software and hardware based, are being explored for future revisions. I'd welcome any additional suggestions you may have."
crypto,2kxzcs,werdnanoslen,4,Sat Nov 1 01:48:47 2014 UTC,"Here's a related concept out of Stanford. Different idea, but same way of thinking:  http://arstechnica.com/security/2014/04/stanfords-password-policy-shuns-one-size-fits-all-security/"
crypto,2kxzcs,phyzome,1 point,Sat Nov 1 01:57:20 2014 UTC,Neat! I'd like to know how their users have responded so far.
crypto,2kxzcs,darkmighty,3,Sat Nov 1 02:07:28 2014 UTC,"I think expiring passwords hold no utility versus mass cracking attacks, they even reduce security by encouraging ""simpler"" passwords to be chosen -- the crackers can try passwords en mass using the most probable passwords with the same success rate.  I do wonder if the large password based sites couldn't go for a more sophisticated form of measuring the likelihood of a password instead of the usual cryptic x characters, y numbers, z special characters. For example, they could check the password against rainbow tables, or keep a list with hashes of most often used passwords on the website and require a different one, etc."
crypto,2kxzcs,phyzome,2,Sat Nov 1 02:47:18 2014 UTC,"I think expiring passwords hold no utility versus mass cracking attacks   It depends on your threat model. If an attacker gets ahold of a password (keylogger? watching keystrokes?) and can't use it to install a back door, then expiring the password will eventually cut off access. (Maybe they are lying in wait to take action, or just spying on one person over a long period of time.) This is also a scenario where the password complexity doesn't matter since the attacker got it directly."
crypto,2kxzcs,aliceandbob,1 point,Sat Nov 1 12:50:37 2014 UTC,"Right, I figured a minimum length would suffice as a safeguard against encouraging simpler passwords. Stanford puts that number at 25 for what I was thinking and 8 for something sufficiently complex."
crypto,2kxzcs,pittsburghzombie,1 point,Sat Nov 1 02:54:00 2014 UTC,"From the website's perspective it's obviously better to ensure some minimum standard of security on all its users, so that mass cracks don't reflect poorly on the service. But from an individual user security perspective, I'd much rather they accept any string and don't have any minimum requirements at all. Any requirement would only limit the search space, so my n digit randomly generated password will be more secure on a site that enforces no minimum than the same password would be on a site that enforces some restrictions. Even worse is when it's so shoddily coded that they reject certain characters."
crypto,2kxzcs,xkcd_transcriber,1 point,Sat Nov 1 03:39:52 2014 UTC,Relevant xkcd:  http://xkcd.com/936/
crypto,2kxzcs,The_Mastor,1 point,Sat Nov 1 04:09:55 2014 UTC,"Image  Title: Password Strength  Title-text: To anyone who understands information theory and security and is in an infuriating argument with someone who does not (possibly involving mixed case), I sincerely apologize.  Comic Explanation  Stats: This comic has been referenced 895 times, representing 2.2952% of referenced xkcds.    xkcd.com | xkcd sub | Problems/Bugs? | Statistics | Stop Replying | Delete"
crypto,2kuntb,subless,24,Fri Oct 31 03:27:23 2014 UTC,"I believe you will need abstract algebra (group/ring theory, knowledge of primes and multiplicative groups, modular arithmetic) and statistics (entropy and whatnot?) and a dash of number theory wouldn't hurt for all the various theorems (Fermat's stuff). Disclaimer: no expert on cryptography or mathematics.  Your basic operations are all that are ever really used - but they are applied to a different set/subset of numbers, but could be defined slightly differently. For example, elliptic curve cryptography defines the sum of two numbers as the third point on a line that intersects the curve and contains the first two points (I think - or its something close to that... Ah here is a link)"
crypto,2kuntb,cancerfilter,5,Fri Oct 31 03:50:41 2014 UTC,"That's a pretty good summary. By the way, if anyone is interested in looking in to this, I've found that basically any reference is better than wikipedia for learning these topics. Try finding actual course materials on this topic. The Wikipedia pages sometimes appear to have been written by mathematicians who think these topics are rather boring and focus on describing how they relate to other, more complicated topics, instead of describing them in plain language."
crypto,2kuntb,rebootyourbrainstem,2,Fri Oct 31 16:03:06 2014 UTC,"Sounds great, thank you for your response and the link your offered."
crypto,2kuntb,3pg,16,Fri Oct 31 15:59:46 2014 UTC,"Short answer: Discrete mathematics to create ciphers, statistics to break them.  In addition to the operations you describe, exponentiation and binary math (a special case of modular arithmetic) are a bare minimum to get you started. To become good at cryptography, eventually you will definitely need to follow /u/cancerfilter's advice, but these are easy to start with.  To create secure software (since you asked about cryptography software) you need to focus on how your software (including its dependencies, such as RNG or the C-library) interacts with its environment (other programs, the OS, the hardware). Every single interaction is important. To head down this path you need to at least learn low-level programming (ASM or C), OS-design and how the CPU works."
crypto,2kuntb,Wolf_Blackout,3,Fri Oct 31 06:17:19 2014 UTC,"This is my experience as well. Discrete math, modular arithmetic, proof-writing, number theory, and probability / statistics for evaluating them.  My algorithms class is being taught by a crypto professor, so understandably this has been the focus of the class.  Being able to show the probability of collisions in a hash is just one example of probability / statistics helping out. Definitely look for classes taught by crypto professors."
crypto,2kuntb,OlderThanGif,2,Fri Oct 31 16:24:33 2014 UTC,Sounds like a good starting point/place. Thank you for your post.
crypto,2kuntb,pint,1 point,Fri Oct 31 16:00:40 2014 UTC,"People need to program in assembly for secure programs? That sounds like self-flagellation. As for C, it's hardly memory safe. This is where all the buffer overflow attacks occur. But if you know what you're doing, the fine control over memory can be advantageous."
crypto,2kuntb,Hizonner,1 point,Tue Nov 4 12:00:02 2014 UTC,This is the best answer.
crypto,2kuntb,testcore,7,Fri Oct 31 18:31:50 2014 UTC,"When I took cryptology in university, it was all number theory. Definitely learn as much number theory as you can."
crypto,2kuntb,I-o-o-I,2,Fri Oct 31 13:25:14 2014 UTC,Sounds good. Thanks for your reply.
crypto,2kuntb,cunttard,5,Fri Oct 31 16:02:43 2014 UTC,"what kind of crypto? from math viewpoint, i would classify it into two: math and unmath.  the former is the oldschool public key crypto, with all GF(p) and EC algebra, lattices and other. here you find highly specialized primitives like poly authenticators. you will need number theory mostly for these, plus all the stuff the subfield needs.  the latter is symmetric crypto where we exactly want to find algorithms that can not be approached by known math, that is, PRFs. here you use statistics, probability theory, differentials, linear approximations, whatever.  so in short: some crypto focuses on a single feature, others designed to deliberately thwart any attempt to find structure in it."
crypto,2kuntb,lucky_unix,1 point,Fri Oct 31 09:14:20 2014 UTC,"You know, I haven't really given that a lot of thought. But I still have a lot to learn and a long way to go, so I won't be doing anything anytime soon, at least till I graduate and get some experience. Thank you for your post."
crypto,2kuntb,Ar-Curunir,9,Fri Oct 31 16:02:24 2014 UTC,"Since nobody else has mentioned it, I will add that, unless you somehow misunderstood your instructor, your instructor is an idiot.  ""Intermediate algebra"" is daily bread and butter stuff in the hard sciences and engineering, and you will NOT succeed there without it. And at least a few years of stuff that builds on top of it, for that matter. So if, say, engineering counts a ""real-world career"", then it's applicable.  Also, DO NOT TRY TO DO REAL CRYPTO at your present level. Probably not even writing software that uses existing crypto libraries, and definitely not trying to create new ciphers or crypto protocols. You're not even at the point of being able to ask the right questions yet, and if you try it, you have a 99.99 percent chance of ending up with something that looks secure to you, but is easily breakable by a specialist."
crypto,2kuntb,crunchatize,2,Fri Oct 31 13:31:00 2014 UTC,"I definitely will not be attempting anything at this time. I just wanted to ask while I am having to take all my general required courses, that include 4 math classes for my degree in computer information systems focusing on security and networking. I also plan on going for my masters degree after I receive my bachelors.  Later on down the road after I graduate and have some hands-on experience, then and only then will I make an attempt to create cryptography software.  Thank you for your post."
crypto,2kuntb,pint,6,Fri Oct 31 15:59:03 2014 UTC,"Actually, you should attempt it.  And attempt it again.  And break it and refine it and learn from it.  Yes, implementing crypto - especially correctly - can be extremely complex and difficult to get right.  But that fact should not prevent you from trying or learning.  Just don't expect home-grown crypto to be secure, or let others believe that what you've implemented is secure. The danger is not in learning it; it's in falsely believing it's actually secure."
crypto,2kuntb,Natanael_L,3,Fri Oct 31 22:20:33 2014 UTC,"If you want to learn some mathematical cryptography, this is an excellent book.  Abstract algebra and number theory are probably the most important.    Could decent cryptography privacy software be developed using only your basic math operations?   The one time pad is sort of a slight variation of addition on the integers, but that's the only thing I can think of. Writing privacy software is a little different than just doing mathematical cryptography, so I would say no."
crypto,2kuntb,pint,2,Fri Oct 31 22:36:58 2014 UTC,"If you want to learn some mathematical cryptography, this is an excellent book[1] .   This is by far the best introductory test that takes the mathematics approach (rather than provable security approach).  But holy shit, citeseer has the entire bloody book available? That's awesome!"
crypto,2kuntb,Natanael_L,5,Fri Oct 31 23:07:54 2014 UTC,"Most, if not all, is number theory. Specificly, you should know about:   dicrete logaritm prime numbers (not just what the are) galois fields/finite fields  elliptic curves  boolean algebra (especially if you ever intend to implement any of what you  learn) matrices"
crypto,2krzwd,electronics-engineer,16,Thu Oct 30 13:02:15 2014 UTC,"Now they know what it feels like to be up against an entity whose made big moves against your objectives and philosophies and not being able to do much about it.   Last year it was the privacy-conscience community vs the NSA, which is still ongoing of course. Now it's the FBI vs Google/Apple/us when we deployed encryption. I can see the FBIs point, but it was a logical step for us so we can't be blamed for taking steps to protect our information from all the spying."
crypto,2krzwd,DemandsBattletoads,12,Thu Oct 30 14:11:20 2014 UTC,"Last year it was the privacy-conscience community vs the NSA, which is still ongoing of course.   The citizen vs the state is as old as cryptography. By state, it means state-actors, or actors that can use their influence in the state.  Recently, they've implemented NSA/NIST backed ECC even without any real indication to the weakness of RSA. They don't need the citizen's permission. They have more than enough influence to push cryptography that can benefit their actors over the citizen."
crypto,2krzwd,nocnocnode,2,Thu Oct 30 18:59:02 2014 UTC,"The evidence that NSA/NIST have backdoored ECC is very weak, and there are plenty of reasons to use it instead of, or in addition to, RSA.  In particular, it's very time-consuming to generate RSA keys, and it's also slow to decrypt or sign with them.  Applications which use ephemeral keys, or keys generated on constrained devices, will perform orders of magnitude better with ECC.  This is why eg TLS specifies DHE or ECDHE (the trailing E is for Ephemeral) for forward secrecy, but not any form of ephemeral RSA.  People use ECDHE instead of DHE because, again, it's at least an order of magnitude faster, and more as you go to higher security levels.  It is possible that NSA knows an attack against the NIST curves, or more likely, against every elliptic curve.  But the same thing is a concern for pretty much any cryptosystem.  ETA: There are newer, better (harder, faster, stronger) curves available than the NIST curves -- for example, Curve25519.  Standardizing them is glacially slow, though."
crypto,2krzwd,bitwiseshiftleft,2,Fri Oct 31 05:18:28 2014 UTC,"Standardizing them is glacially slow, though.   Which we now know is also partly due to the NSA and FBI."
crypto,2krzwd,MagicalVagina,11,Fri Oct 31 10:26:29 2014 UTC,The takehome message is that law enforcement never changes.
crypto,2krzwd,haskell101,7,Thu Oct 30 16:18:56 2014 UTC,I love how they always throw in terrorism. Like terrorists were not using encryption for a long time already.
crypto,2krzwd,tboneplayer,3,Fri Oct 31 01:27:49 2014 UTC,"""This is striking to us because even a minimal glance at history reveals that the opposite is true. Thomas Jefferson invented (and used) a wheel cypher. More importantly, it was reportedly frustration with the British resolution of 1785 authorizing the Department of Foreign Affairs to open and inspect any mail related to the safety and interests of the United States that led James Madison, Thomas Jefferson and James Monroe to write to each other in code.""  Yes, this is probably what they dislike the most: they don't want to be the next King George III."
crypto,2krzwd,Hakkyo_shita,2,Fri Oct 31 10:42:45 2014 UTC,What concerns me is that FBI claims of inability to crack strong encryption may be false (we've had evidence of backdooring at both the encryption level and the local home computing (OS and invisible background app) level).
crypto,2kttb1,HonourSworn,1 point,Thu Oct 30 22:37:05 2014 UTC,Typically KATs (known answer tests) are a good way to test correctness of an cryptographic primitive. Looks like you can scrape this PDF for some KATs.
crypto,2kt824,monican_agent,2,Thu Oct 30 19:35:40 2014 UTC,"You can replace exponentiation module a large prime with elliptic curve cryptography, and have much smaller encrypted  (32 bytes)  EdwardsCurve ed = new EdwardsCurve(); p = a point on the curve x = BigInteger.Parse(""1231235341234124123123""); <-- your key. xp = BigInteger.ModPow(x, ed.l - 2, ed.l); <-- the decryption key  enc = ed.ScalarMultiply(p, x); dec = ed.ScalarMultiply(enc, xp);   Of course, the tricky bit here is to map your cards to points on the right curve and back, but since the server is already doing that, it's not a problem (which is one of the reasons why this form of encryption isn't usually used with ECC). In my case, I was doing this with a reference implementation I made using Curve25519 which isn't production ready since it's very slow and has timing attacks. DH uses scalar multiplication on points, so that would be a good starting point."
crypto,2kt824,FryGuy1013,1 point,Fri Oct 31 01:31:53 2014 UTC,"Thank you for your comments.  Because I wanted to stay true to the ""purest"" version of Mental Poker I implemented the original cryptosystem as described by Shamir, Rivest, and Adleman. I found the performance to be good enough on modern hardware that I didn't feel a need to seek out alternatives.  As you mentioned, despite ECC's alluringly short key lengths the cryptosystem can be tricky to use. Nevertheless, its possible addition is something to consider as CypherPoker evolves into the future. ElGamal might be another option, as well as increasingly popular blockchain or hash-based solutions. Fully homomorphic cryptosystems also offer interesting possibilities. Each of these has advantages and disadvantages that should be weighed not only on technical merit but also, and perhaps more importantly, the desired user experience.  My time is presently occupied with other parts of the project but I encourage anyone with an interest to fork the code and have a go at some alternatives."
crypto,2kt824,o2one,1 point,Sat Nov 1 06:03:52 2014 UTC,"Are you aware of this recent paper: http://www.clee.kr/thesis.pdf? In it, a 'Simple TTP-free Mental Poker protocol is presented'. Cliffs:  the SRA protocol can be made secure (no leaking of partial information) if a proper semantically secure cryptosystem is used; the underlying commutative cryptosystem would be ECC; SRA protocol with ECC is simpler to implement than most other protocols in the literature.  Regarding the p2p messaging: can players identify each other (can they get to know each others IP-address)? Personally I wouldn't want to play if my opponent knew my IP address (he would be able to ddos-attack me and have me time-out at critical moments in a hand/tournament). I'm tinkering with ricochet and tor (invisible.im and ricochet.im)."
crypto,2kpd57,LarryBoLarry,8,Wed Oct 29 19:22:03 2014 UTC,"As an Australian, the fact that Centrelink tried to roll their own crypto is unsurprisingly hilarious to me."
crypto,2kpd57,ivosaurus,7,Wed Oct 29 21:02:02 2014 UTC,"That shouldn't be the message you're taking away from this. People parrotting the ""Never Roll Your Own Crypto"" meme really aught to look at the situations more closely.  This is absolutely a situation where they needed to ""roll"" a solution - there are no off-the-shelf solutions for this problem, and numerous other problems like it. (Yeah, there are definitely problems like it in this case, and as Matthew Green points out, there are approaches they could have taken to make their implementation more secure, but the system as a whole didn't exist before this implementation.)  Their problem was that they just handed it over to regular Joe Schmo software engineers with a copy of OpenSSL's source code in hand and not Ass Kicking Crypto software engineers. And worse, they went ahead and standardized their protocol without taking it to some independent agency for testing and validation.  Furthermore, this really should put the stink on the ISO standardization of any business process where there exists only one implementation. If the software hasn't been or can't reliably be reproduced by another company, who would have hopefully immediately pointed out some of these flaws they introduced, then it has no business being called a ""Standard."" (And this should go for anything; the Dart language should not be an ECMA standard with only one implementation, IMO.)  Lastly, even with all of the protections in the world, Crypto Is Hard (tm). People will make mistakes, and people will find weaknesses eventually. So even when everything goes right, things will still eventually go wrong for you. Your best bet is to hope that the day when things are going wrong are long after your technology has been phased out for its newer generation."
crypto,2kpd57,hackingdreams,1 point,Thu Oct 30 03:02:54 2014 UTC,Also looks like there was initial consultation going way back to 1998.
crypto,2kpd57,cunttard,2,Thu Oct 30 04:03:58 2014 UTC,"I have complete faith a large audit committee, consisting of accountants and project managers, remain happy that it was a great spend."
crypto,2kq7ui,rohare,3,Wed Oct 29 23:21:39 2014 UTC,Did you consider the normalized hamming distance doesn't have to be integer? Did you try to average over more blocks? Is your hamming distance function correct? What keylengths did you test?
crypto,2kq7ui,cirkel,2,Thu Oct 30 00:10:21 2014 UTC,"I blogged about this challenge here: https://lolware.net/cryptochallenge.html     Allow me to quote what I wrote about challenge six, it appears to be exactly your issue: Look at the wording on point four. It suggests averaging the result across four blocks. I don't know if it was just me, but four blocks pointed firmly at an incorrect keysize. I struggled with this for a while until I average much more blocks, for a much larger keysize  In fact, every working solution out there has taken the average hamming distance across every block in the text. I know you don't want spoilers but I'll say the key length is > 20 and leave it vague, but that should point out the incorrect values you have.  Edit: In terms of the solutions not being online, if you ever do want to just check an answer, my solutions are linked from that blog."
crypto,2kq7ui,disclosure5,1 point,Thu Oct 30 00:31:02 2014 UTC,"Fantastic! At least I know why I get garbage later on. Thanks much for the nudge in the right direction and the link in case I need a little more help later on. I'm not totally against getting outside assistance since I'm approaching this as a learning experience and not a ""challenge"", I just don't want the whole answer all at once. Thanks again."
crypto,2kq7ui,disclosure5,1 point,Thu Oct 30 00:50:31 2014 UTC,"Thanks for that. Yep, I know the feeling, I peeked at answers when I got stuck, because you occasionally hit a point where you choose between getting a hint or throwing in the challenge. But that's hugely different to just reading answers everywhere. I've tried to give similar nudges in the right direction on my blog while keeping it spoiler free as possible."
crypto,2kq7ui,Hormander,1 point,Thu Oct 30 01:07:15 2014 UTC,nice!
crypto,2kluiy,pint,5,Tue Oct 28 20:51:31 2014 UTC,"yet again i seem to be unable to find information on websites or something. where to find details like supported ciphers, supported hashes, password stretching, disk structure, etc?"
crypto,2kluiy,deathfantasy,3,Wed Oct 29 12:36:32 2014 UTC,This seems to be a list of differences of VeraCrypt compared to TrueCrypt.
crypto,2kluiy,conradsymes,3,Wed Oct 29 17:15:14 2014 UTC,Only issue I have with veracrypt is a lack of cross compatibility with truecrypt and the fact you can't copy-paste test vectors into it's test vector menu.
crypto,2kluiy,tom-md,1 point,Wed Oct 29 04:49:51 2014 UTC,"Thanks for your reponse. You've raised two good points and I agree that the lack of copy-paste for test-vector menu is limiting, but I believe this will be fixed eventually. To me that's a minor inconvenience. I actually am glad for the lack of cross-compatibility with TC, because it introduces new obstacles to an adversary, particularly one who has had many years to practice breaking new TC archives. This puts us ahead in the crypto arms race, especially with the greater rounds of transformation that reduce the effectiveness of brute force techniques.  I'm really liking what I'm seeing so far with VC, especially with its Win and Linux compatibility, and would love to hear additional opinions. It's encouraging to see a ""new generation"" of programmers working on this project, especially considering the observation that the TC programmers were likely quite old by the time the project was discontinued. I just hope it all pans out, because I may very well trust most of my private information to this program."
crypto,2kk6tn,eleitl,7,Tue Oct 28 11:57:40 2014 UTC,"Bleh, thought it was finally available."
crypto,2kk6tn,hardlined,13,Tue Oct 28 12:47:44 2014 UTC,i came here to ridicule the next super rng snake oil project. but this one actually makes sense.
crypto,2kk6tn,pint,9,Tue Oct 28 12:50:36 2014 UTC,"My only complaint is that they're only using a single diode. They're so cheap that for almost no cost increase you could have 4 or 5 all running simultaneously, massively increasing the entropy collection rate."
crypto,2kk6tn,gsuberland,6,Tue Oct 28 14:52:13 2014 UTC,"There's a bit of a gap between being able to read the firmware and ensuring it's actually running that image too. Inspecting chip part #s to make sure there's no hidden flash would cover part of it, I suppose."
crypto,2kk6tn,TNorthover,8,Tue Oct 28 14:56:20 2014 UTC,"True, but when you start to presume that your hardware is compromised, there's little that can satisfy your requirements."
crypto,2kk6tn,gsuberland,12,Tue Oct 28 15:04:09 2014 UTC,Right?
crypto,2kk6tn,JohnDoe_85,1 point,Tue Oct 28 15:40:44 2014 UTC,"Thats a very interesting paper, ty"
crypto,2kk6tn,darkmighty,3,Sat Nov 1 02:54:55 2014 UTC,"Super interesting, if disconcerting. Once you start realizing you live in world with nigh-undetectable hardware Trojans, what can you trust as the foundation for any security scheme?"
crypto,2kk6tn,JohnDoe_85,2,Sat Nov 1 04:55:52 2014 UTC,Open source design made entirely of discrete components. The user acquires and assembles the components himself.
crypto,2kk6tn,HAL-42b,5,Tue Oct 28 16:16:31 2014 UTC,"If you're that paranoid, is that FET really just a FET? You'd better mine your own silicon, grow your own boules, mine your own dopants, and make your own transistors."
crypto,2kk6tn,qnxb,4,Wed Oct 29 03:26:42 2014 UTC,my problem is that i didn't find a collection rate at all. btw you don't need a whole lot. 100 bit per second is way way more than you need.
crypto,2kk6tn,pint,9,Tue Oct 28 14:56:30 2014 UTC,We generate ~350kbits per second of entropy packaged at ~7.8 bits/byte - if you use the entropy data at a lower it accumulates and we quickly approach 8 bits/byte.   Source.  You're also presuming a lot when you say I don't need more than 100 bits per second. What if I want to generate a few hundred 256-bit symmetric keys a second in a busy cryptosystem?
crypto,2kk6tn,gsuberland,5,Tue Oct 28 15:01:55 2014 UTC,"you generate 128 bits (256 for paranoids), initialize a PRNG, and whoosh."
crypto,2kk6tn,pint,2,Tue Oct 28 15:07:41 2014 UTC,"While I agree that that is an option, it increases implementation complexity, and ""feels"" less safe than simply taking data from the strong entropy source."
crypto,2kk6tn,gsuberland,4,Tue Oct 28 15:51:53 2014 UTC,"I agree that elegance is important in secure systems, but I definitely want my entropy sources to pass through a CSPRNG before I use them. It is indeed more complex but it helps me reduce the impact of hardware that breaks or that starts to skew the distribution as it ages."
crypto,2kk6tn,3pg,2,Tue Oct 28 16:52:15 2014 UTC,"That is very true, though I'm still a fan of the ""more entropy is better"" attitude, simply because it means you can pool it for when you need more."
crypto,2kk6tn,gsuberland,2,Tue Oct 28 16:56:05 2014 UTC,"Will you generate that many keys per second nonstop? Using only one entropy source? Otherwise, pool up during ""downtime""."
crypto,2kk6tn,Natanael_L,3,Tue Oct 28 23:11:49 2014 UTC,"If you're relying on feels for your crypto system, you're doing it wrong."
crypto,2kk6tn,dhtrl,1 point,Wed Oct 29 01:22:19 2014 UTC,"Oh absolutely. It's just one of those ""wait, why aren't we using this?"" moments."
crypto,2kk6tn,gsuberland,2,Wed Oct 29 08:56:29 2014 UTC,"Read about DSA entropy attacks and you might change your mind.   There is a more complicated technique for solving for x if only a few bits of k are known, requiring more signatures.  It is extremely important that all bits of k be unique, unpredictable, and secret. With two DSA signatures on separate messages with the same k, you can recover the signer’s private key.   i.e. If a few bits of your nonce are even a little-bit correlated, with enough messages, an attacker can recover the whole private key.  Hardware RNGs are good for ensuring a server has enough entropy soon after boot, but you still have to pass them through a csprng of some sort. On a desktop or mobile device, I don't get what they're for at all."
crypto,2kk6tn,pint,1 point,Wed Oct 29 01:51:02 2014 UTC,"in fact, the ideal solution would be not to use an entropy source at all. there should be a safe csprng in every opsys (not like /dev/random), and that should use hw entropy sources if any. you just install one, and use your API level csprng as usual."
crypto,2kk6tn,gsuberland,2,Tue Oct 28 15:56:29 2014 UTC,"The problem with this concept is that we run into bizarre political arguments, like with Linus' decision on the Intel HRNG entropy mixing. In an ideal world, yes, a CSPRNG built in would be great. Unfortunately the world is far from ideal."
crypto,2kk6tn,pint,0,Tue Oct 28 16:37:53 2014 UTC,"linux does that wrong. but what about windows? we don't even have an official statement what they do, let alone source code. we have some dated 3rd party analysis (based on reverse engineering).  back to the original topic: it is not that much added complexity. compared to all the trouble accessing a hardware, doing a csprng is not something particularly difficult. use the hw random as a key to a stream cipher. you surely have access to at least one. especially if you consider your scenario, a server that is massively loaded with public key stuff. i hope it is not written by some high school students."
crypto,2kk6tn,shiny_thing,1 point,Tue Oct 28 17:23:26 2014 UTC,"128 bits is for the paranoids; 256 bits is for bureaucrats in standards bodies who want ""multiple security levels"", and other people who don't understand how big 2128 is in practical terms. :)"
crypto,2kk6tn,pint,-1,Wed Oct 29 01:04:11 2014 UTC,"Well your ""paranoid"" level of security is worthless against the NSA quantum computer."
crypto,2kk6tn,pint,2,Wed Oct 29 05:23:45 2014 UTC,because NSA quantum computers do 264 operations per second. my ass they don't.
crypto,2kk6tn,Lugnut1206,0,Wed Oct 29 07:55:31 2014 UTC,"The point is, it's below the current safety margin of 80-100 bits of security which is considered safe."
crypto,2kk6tn,na85,3,Wed Oct 29 08:57:41 2014 UTC,"80-100 is for hashes and ciphers, which are blazing fast, and with a huge security margin. one quantum computation takes a looong time to do. as of now. it gets faster, but you can sleep relaxed for many upcoming nights."
crypto,2kk6tn,Afro_Samurai,6,Wed Oct 29 09:23:36 2014 UTC,"I'm new to electronics, and this is probably the wrong sub to ask this in, but could I take the schematics from this and implement it in a fully functional manner with basic parts on a breadboard/protoboard?"
crypto,2kk6tn,xaoq,3,Tue Oct 28 16:50:46 2014 UTC,"Breadboards have a small but significant capacitance, so it might interfere with the timing circuits and require adjusting other capacitor/resistor values, but other than that the answer is yes."
crypto,2kk6tn,3pg,1 point,Tue Oct 28 19:12:20 2014 UTC,"They don't seem to have schematics posted yet (that I can see) but I think so. Only big difference I can think of is different part numbers for non-surface mount components, and I'm not sure how the shielding would work."
crypto,2kk6tn,pint,4,Tue Oct 28 18:09:42 2014 UTC,What about connecting a big antenna to the sound card's microphone/line in and getting data from there to fuel the RNG? Yay or nay?
crypto,2kk6tn,supersaw7,7,Tue Oct 28 13:36:37 2014 UTC,It is easy for an attacker to generate radio signals and thereby skew the output.
crypto,2kk6tn,Creshal,2,Tue Oct 28 16:53:25 2014 UTC,"skew how much? there is not a whole lot to do against white noise, except causing total failure of the hardware. if you can estimate the minimum entropy production, you are good to go. and white noise on a sound card is ridiculously high. it gives you more randomness that you'll ever need."
crypto,2kk6tn,pint,1 point,Tue Oct 28 17:26:31 2014 UTC,"yes, I can't imagine a scenario where an attacker can control the LSB of the audio samples."
crypto,2kk6tn,chiniwini,2,Tue Oct 28 21:55:48 2014 UTC,A few days ago we had a paper about how to use WebGL to turn VGA cables into FM antennæ…
crypto,2kk6tn,pint,1 point,Sun Nov 2 09:10:57 2014 UTC,your imagination is vivid.
crypto,2kk6tn,scottscurvy,2,Tue Oct 28 23:47:44 2014 UTC,Turbid
crypto,2kk6tn,All__fun,4,Wed Oct 29 14:45:39 2014 UTC,"perfectly yay, but it requires a sound card, which is not audited or may not even present at all. onerng is a standalone solution."
crypto,2kk6tn,cheeto44,2,Tue Oct 28 13:42:52 2014 UTC,Paul is mailing me one and it should be in the mail today or yesterday to help with some OSX stuff. I can't wait to play with it. Also gonna use it during an after school program I run with high schoolers. This thing is awesome and I can't wait to get my hands on it. Paul is a super nice guy.
crypto,2kk6tn,All__fun,-5,Sat Nov 1 01:52:00 2014 UTC,"So I'm just now getting into this field,  sadly I really don't understand what this does?  does it scramble your MAC address??"
crypto,2kk6tn,cheeto44,10,Tue Oct 28 13:44:45 2014 UTC,"Crypto relies on random numbers for everything. Hell even basic OS functions rely on it. However with regular off the shelf computers there is a finite limit to how rapidly they can generate random numbers. Remember that a computer follows instructions to the letter, so it's really bad at picking arbitrary numbers. So what it usually does is pull it from electrical noise, sound card noise, etc. This device uses those same principles but jammed up to 11 to make a lot of random noise rapidly. What's this mean for yo u if you use it? If yo u were a very heavy user of encryption you would notice a definite speed increase in your applications of it. Most people don't need this sort of thing, so don't grab one for your mom's Dell. But if you want to get into crypto you will need to understand random numbers and at some point you will likely find yourself going ""Damn I wish I had more sources of random numbers."""
crypto,2kk6tn,ffs_lemme_in,6,Tue Oct 28 14:33:20 2014 UTC,"Damn, I got downvoted hella hard.  But i really do appreciate your help bruv."
crypto,2kk6tn,DoWhile,2,Tue Oct 28 18:02:07 2014 UTC,No worries. I always like to help and teach. :)
crypto,2kk6tn,R-EDDIT,24,Tue Oct 28 18:32:03 2014 UTC,"Kinda, what it actually does is create a GUI interface using Visual BASIC to backtrace the killer's IP."
crypto,2kk6tn,Natanael_L,12,Tue Oct 28 13:56:15 2014 UTC,THE HACK WAS COMING FROM 127.0.0.1
crypto,2kk6tn,R-EDDIT,3,Tue Oct 28 14:46:06 2014 UTC,Pshaw.  I attack from ::1.
crypto,2kk6tn,Natanael_L,1 point,Tue Oct 28 20:31:15 2014 UTC,"I attack from ::, can you beat that?"
crypto,2kkwb6,Jonathan_Coe,3,Tue Oct 28 16:14:56 2014 UTC,"The feature in question is adding support for Bitmessage addresses which, rather than containing the hash of two EC public keys as is the case now, contain a single compressed EC public key. This would allow for greater resilience against traffic analysis, because it would remove the need to request the full public keys of an address before sending a message to it and the need for the receiving node to respond to such requests.        This was first suggested by Greg Maxwell, one of the core Bitcoin developers. It was discussed in these posts:     https://www.reddit.com/r/bitmessage/comments/1ay3kh/why_not_use_the_public_key_directly/      https://www.reddit.com/r/bitmessage/comments/1kc03b/please_support_nonhashed_addresses/     The main point that Atheros is asking for feedback on is whether there is any downside to using the same EC key for both ECDSA and ECIES (signing and encryption)."
crypto,2kmdsy,hietheiy,4,Tue Oct 28 23:28:54 2014 UTC,"I really don't like the idea of proof-of-work based crypto currencies. I don't have an alternative, but if something like this becomes widespread, way too much processing power across the world will be spent churning through hashes...."
crypto,2kmdsy,skydivingdutch,0,Wed Oct 29 02:32:01 2014 UTC,"'Too much'? Most major mining operations are now fine in cold climates where they don't have to pay for cooling, and where clean geothermal energy is abundant. Naturally, these are the most cost effective and competitive. A fully independent currency for less then the cost of keeping the lights on at the brick and mortar banks."
crypto,2kmdsy,skydivingdutch,3,Wed Oct 29 04:30:59 2014 UTC,"Its not so much the waste of energy, but the waste of CPU cycles. Those processors could be working on something more useful to humanity."
crypto,2kmdsy,Natanael_L,2,Wed Oct 29 04:57:00 2014 UTC,What could be more useful then giving humanity a brand new economy and creating an economic revolution? It's the fabric of society. Bitcoin is the internet of value.
crypto,2kj9bs,Godspiral,2,Tue Oct 28 03:26:23 2014 UTC,It never took off. Clearly e=2 is cheaper than e=3 or e=65537.
crypto,2kj9bs,cunttard,2,Tue Oct 28 03:54:52 2014 UTC,e=3 isn't necessarily any slower in a meaningful sense.  And it has a unique decryption which also makes signatures simpler.  There is a variant that is supposedly reducible to factoring where   N = p^2q    and then you encrypt/verify with mN mod N and then sign/decrypt with the corresponding d.    It has the downside that the public key operations are much slower.
crypto,2kj9bs,cunttard,1 point,Tue Oct 28 05:58:53 2014 UTC,"an interesting point, if Rabin system is RSA with e=2, is there also a private exponent d (that is not normally used in Rabin) that could be used for RSA-signing algorithm?"
crypto,2kgo7q,amtal-rule,5,Mon Oct 27 13:44:44 2014 UTC,"This is a very natural idea, and so it won't be surprising to learn that you are not the first person to think of it (see e.g. http://www.reddit.com/r/crypto/comments/hicud/how_to_run_a_fair_lottery_via_crypto/ or http://crypto.stackexchange.com/questions/767/how-to-fairly-select-a-random-number-for-a-game-without-trusting-a-third-party)  The subtlety--and this is the pretty much the principal difficulty you run into when developing any distributed coin flipping protocol--is this: What happens if some participant just aborts, disconnecting from the server before they ever reveal their hashed value? Crucially, a cheating player can potentially choose whether to abort AFTER seeing the revealed values of all other players. Also crucially, there could be a possibility for multiple players to collude with each other so that some SUBSET of the colluding players may abort after seeing the revealed values of all other players. (This is pretty much what I say also in my response in the lottery link above.)  Whether such an attack is a problem, and/or can be mitigated, depends very much on the particulars of your application as well as your model of (cheating) players' capabilities. There is a wide literature on secure distributed coin flipping, including the classic impossibility result Cleve 1986, Limits on the Security of Coin Flips When Half the Processors are Faulty. Upshot of that one: If you suspect that as many as half the players in your game may collude with each other, then they WILL be able to bias a heads/tails coin toss by some non-negligible amount no matter WHAT protocol you use."
crypto,2kgo7q,balachthon,1 point,Mon Oct 27 18:55:13 2014 UTC,"Easiest solution is to disincentivize it by making it expensive. Something should be put on stake that you lose of you drop out. Hard to achieve that securely as a result of inaction, though, easier to do proof-of-work instead such that somebody repeatedly dropping out gets his costs raised above his potential profit."
crypto,2kgo7q,Natanael_L,1 point,Tue Oct 28 09:57:25 2014 UTC,"Any method for making it more expensive must also take active attacks (such as DoS) against players into account. If the game in question has a chat feature for players, or if the attacker co-operates with whoever operates the game, then it is possible for the attacker to obtain the target's IP-address (using social engineering in the first case) and mount attacks.  Not a cryptographic attack, so it's probably off-topic, but there are many ways to cheat."
crypto,2kgo7q,3pg,4,Wed Oct 29 18:31:31 2014 UTC,"This is very similar to Blum's coin tossing protocol which is about 30 years old. In fact, Blum's would probably be preferred. In that protocol, everyone commits to their own seed, then everyone opens, then the coin toss outcome is the xor of all the seeds. This way, if at least one person chooses a random seed, then the result is random.  This is fine for Tetris, since you just need to pick a random piece each time. The reason for more complicated techniques with poker is that poker has a secret state (the initial shuffled deck). Everyone has different partial information about  the secret state but all steps/outcomes of the game have to be consistent with it. In a poker game, no one should learn the seed that is used to generate the entire shuffled deck!"
crypto,2kgo7q,rosulek,3,Mon Oct 27 14:55:48 2014 UTC,"Yes, this is a well-known algorithm.  Here's a paper describing it from 1981 and here's Wikipedia.   A distributed PRNG is seeded with hash(sorted(seeds))   You don't need this; just sum them.  Even if you want to generate small numbers, the seeds have to be big enough that it's not possible to brute-force them, and the commit hashes have to be big enough that a player can't have a prepared collision.  Note that these two attacks have different efforts; a collision is sqrt(n), while the brute-force is n/k, where there are k opportunities to perform the attack.  One way to optimize many iterations of this is to have players pick a seed X, and publish hash100 (X).  Then they can each reveal hash99 (X), hash98 (X), etc. with each seed acting as the hash commitment for the next round."
crypto,2kgo7q,cypherpunks,1 point,Tue Oct 28 00:52:04 2014 UTC,"I feel like I've already heard of a protocol for a distributed or verifiable coin-flip, but I can't find the reference right now..."
crypto,2kgo7q,phyzome,3,Mon Oct 27 14:27:11 2014 UTC,Coin flipping by telephone
crypto,2kgo7q,fuckingbagre,-1,Mon Oct 27 17:03:10 2014 UTC,"it is still obvious even if nobody did that before. i think you can reduce the number of communication rounds if instead of hash(seed), you use enc_svrkey(seed) private key crypto, and then the server sends all the seeds, and everyone can calculate hash(seeds), as well as check the seeds."
crypto,2kgo7q,pint,1 point,Mon Oct 27 14:38:00 2014 UTC,"Not sure what you're getting at, there's no trusted server so you don't have a dropoff point?  If you treated everyone as a peer then you still need to commit beforehand because else one of the peers can disrupt the game."
crypto,2kgo7q,fuckingbagre,0,Mon Oct 27 17:12:32 2014 UTC,ah. i missed that point. the examples are clearly server based.
crypto,2kggqq,rya_nc,3,Mon Oct 27 12:09:08 2014 UTC,"Kerckhoff's principle just says that a for a cryptosystem to be considered secure, it must still be secure if everything about the system, except the key, is public knowledge.  They appear to be using a hardware dongle to execute certain critical pieces of the protected application."
crypto,2kggqq,WhosAfraidOf_138,1 point,Mon Oct 27 15:26:47 2014 UTC,"Our startup was going to use WIBU to protect our source code, but we didn't end up using it. You can call WIBU's number, and they always have someone behind the phone to answer your technical questions."
crypto,2kggqq,GahMatar,1 point,Mon Oct 27 12:46:19 2014 UTC,I think this is the publication: http://link.springer.com/chapter/10.1007/978-3-642-19571-6_11#page-1
crypto,2kgarw,ibmzrl,9,Mon Oct 27 10:31:51 2014 UTC,this article is a sensationalist bullshit with no pointers to actual information
crypto,2kgarw,pint,5,Mon Oct 27 10:37:25 2014 UTC,Did you miss the link to https://eprint.iacr.org/2014/429.pdf?
crypto,2kgarw,phyzome,2,Mon Oct 27 12:25:44 2014 UTC,"apparently. dangers of screwing around with css so much that links are no longer recognizable, combined with the utter stupidity of the article title so i didn't think it is an actual article."
crypto,2kgarw,pint,1 point,Mon Oct 27 12:32:36 2014 UTC,"also ""omg use public key crypto...""  I don't get how ""smart"" people in 2014 begin ideas like ""so I got this new idea for a password authenticator ...""  Passwords are for local storage only.  Anything else should be using public key crypto."
crypto,2kgarw,pint,2,Mon Oct 27 11:27:18 2014 UTC,i'm happy to see that you refined your statement about passwords. this version is something i can get behind.
crypto,2kgarw,pint,1 point,Mon Oct 27 12:13:55 2014 UTC,"I never said passwords shouldn't be used locally [say to unlock your PKCS #8 objects].  I've always maintained that for online access public key crypto should be used.  So uh, maybe you're thinking of someone else?"
crypto,2kgarw,pint,1 point,Mon Oct 27 12:21:31 2014 UTC,"you repeatedly scolded people for trying to come up with costly hash functions, for we don't need password based auth. local password authentication also needs costly hash, so i don't get it now."
crypto,2kgarw,pint,1 point,Mon Oct 27 12:44:45 2014 UTC,Because they're being used for online auths.  The threat vector for attack peoples local storage is fairly small.  So basically any time that crypto competent people work on local password tech while we don't have remote PKI auth is a complete and utter waste of time.
crypto,2kgarw,DoWhile,1 point,Mon Oct 27 12:46:45 2014 UTC,"they are being used for all sorts of reasons, for example truecrypt does it. it is even more important, because it is easier to access personal computers than servers. one just grabs a laptop on the street, and runs."
crypto,2kgarw,phyzome,1 point,Mon Oct 27 12:55:50 2014 UTC,It's not a useful threat model for a criminal though.  I'd much rather work on hacking AWS and get 1 million passwords than steal your laptop out of a locked car and get 1 password.
crypto,2kgarw,zeroXten,1 point,Mon Oct 27 13:04:11 2014 UTC,"you are not an experienced criminal i guess. you don't always get to choose your goals. there can be vital information on a particular hard disk, and the owner might be uncooperative, or you don't want to go so far to kidnap him and beat info out of him. having temporary (unnoticed) access to a pc or laptop is also much easier than doing it to a server. you can wave a hand, but reality won't change according to your models."
crypto,2kgarw,phyzome,1 point,Mon Oct 27 13:07:19 2014 UTC,It's about knowing what to optimize.  I'm more afraid of one of my banks leaking my password info than someone breaking into my house to steal my laptop solely so they can then attack my bank account.  It's like focusing on the structure of the toll booth in front of the bridge you haven't upgraded in 30 years.
crypto,2kgarw,Natanael_L,3,Mon Oct 27 13:16:08 2014 UTC,Actual paper (abstract and link to full):  https://eprint.iacr.org/2014/429
crypto,2kgarw,phyzome,2,Mon Oct 27 11:48:41 2014 UTC,The problem statement is based on the assumption that a hacker might find it dramatically harder to get into n servers vs just one. I don't buy this assumption.
crypto,2kgarw,Natanael_L,2,Mon Oct 27 12:26:45 2014 UTC,"I've only glanced at it, but my understanding is that only the initial set up requires a certain proportion of servers to be non-malicious. However for authentication later on, all servers can be malicious."
crypto,2kgarw,chiniwini,1 point,Mon Oct 27 12:30:22 2014 UTC,"Maybe I don't understand the problem they're trying to solve. Anyway, that one assertion did both me, although perhaps it doesn't mater for their larger argument."
crypto,2kdhpm,Jasper1984,2,Sun Oct 26 15:27:55 2014 UTC,"I like the test effort put in by the referenced passphrase testing paper. The 30 bit passphrases aren't brainwallet-strong, but it's a nifty comparison of various passphrase types versus pronounceable gibberish according to detailed metrics."
crypto,2kdhpm,amtal-rule,2,Mon Oct 27 10:18:59 2014 UTC,"Suppose validity is highly dependent on the nature of Mechanical Turk users, does refer to papers on that though, [2], [4]  I mean, if Indian guys figured out how to pretend to be an American, they dont recognize the words as much, and they might just try zipping through things. Well, Americans might do the latter too. Also, some of this might show up in collected data. (filling in forms lazily)"
crypto,2kdhpm,pint,1 point,Mon Oct 27 15:27:31 2014 UTC,"the example key derivation function they came up with sucks. it is something like  sha3(sha3(sha3(input), input), input)  you don't need that construct with sha3. you simply do:  sha3(input || 0000000...)  EDIT: apparently some didn't get that in the latter case, the number of zeros is huge. effectively we do not do 24 but hundreds of thousands of rounds of keccak-f[], before squeezing the hash."
crypto,2kdhpm,rpglover64,5,Sun Oct 26 22:54:16 2014 UTC,"A good KDF is slow; iterated SHA3 is slower than a single SHA3, so it's better. Naturally, it's better to use standard KDFs like PBKDF2 or scrypt if it's possible, but for the purposes of illustration, iterated SHA3 will do."
crypto,2kdhpm,pint,1 point,Sun Oct 26 23:29:32 2014 UTC,"Infact if you dont have ASICs, and dont want to hire external ones, you probably want some ASIC-unfriendly, or existing-ASIC-unfriendly hash. That way you get the most work a potential attacker that might have ASICs for your own CPU time."
crypto,2kdhpm,rya_nc,2,Mon Oct 27 00:38:44 2014 UTC,"most likely attackers use a botnet, not custom hardware"
crypto,2kdhpm,pint,1 point,Mon Oct 27 07:38:15 2014 UTC,"Well SHA256 ASICs are too obiquitous to ignore, so i think you definitely want to either use or dodge those."
crypto,2kdhpm,pint,2,Mon Oct 27 13:33:44 2014 UTC,"SHA256 ASICs are not ubiquitous. Bitcoin mining ASICs could be considered ubiquitous, but are not capable of being used as generic SHA256 engines.   They do double SHA256, not single SHA256 They don't let you send them arbitrary pieces of data to run double SHA256 on, only a block template which they will iterate nonces on. Even if it could SHA256 arbitrary data it wouldn't be helpful because they are generally talking to the host via a serial protocol over USB that has at most a few megabits of bandwidth. Even GPUs can hash faster than you can feed them data. oclHashcat resorts to implementing an on-GPU password mutation engine to get around that.   Regarding brainwallets specifically, the private key -> public key operation is also a bottleneck - OpenSSL can only do a few thousand per second on a fast CPU."
crypto,2kdhpm,ITwitchToo,2,Mon Oct 27 15:37:40 2014 UTC,"well, if bitcoin drops in value, those ASICs might look for other things to do. that is why recent pbkdfs use a lot of RAM too. ASIC that, bitches!"
crypto,2kdhpm,pint,1 point,Mon Oct 27 13:44:38 2014 UTC,that is the purpose of the 0s. to make it slow.
crypto,2kdhpm,vbuterin,3,Mon Oct 27 07:36:18 2014 UTC,I believe they explicitly wanted to make sure an attacker attempting to brute force using a model to generate probable passwords would have to spend more time in producing a single guess.
crypto,2kcuy5,Theon,16,Sun Oct 26 08:41:33 2014 UTC,"The Socialist Millionaires' Protocol allows both parties to determine if they have the same shared secret without revealing it. In the case of OTR, the shared secret is the hash of the passphrase and the ""secure session id"" derived from the DH key exchange, among other things.  If an MITM attack is happening, both sides would have different secure session id's. The attacker knows both of them but cannot construct the correct shared secret because he does not know the passphrase."
crypto,2kcuy5,supersaw7,2,Sun Oct 26 11:30:28 2014 UTC,"I don't know the protocol, but I can quickly sketch both a wrong way and a right way to do this.  The wrong way is to just send the shared secret over the encrypted channel (equivalent to typing it in over the chat), which is vulnerable as you describe.  The right way is to use the shared secret to derive a signature for the encrypted channel's key. The signature itself should be designed to be public, in that it leaks neither the shared secret nor the encryption key. For instance, you could PBKDF2 (or something) the shared secret with a random salt to get a temporary HMAC key, and then use that to compute an HMAC of the encrypted channel's key. One side could send over the resulting HMAC (which leaks no information about its inputs) plus the salt, unencrypted, and the other side could verify it. A man-in-the-middle won't be able to generate the right HMAC key.  This is roughly the same way ephemeral (forward-secret) keys work in SSL. Both sides set up an encrypted, unauthenticated tunnel with a temporary key, and then the server signs some info about that temporary key with its long-term key, i.e., the one it has an SSL certificate for. The long-term key is never disclosed, and it's only ever used for signing, not encryption/decryption."
crypto,2kcuy5,ldpreload,1 point,Sun Oct 26 22:14:42 2014 UTC,"You are right in what you say.  What you are missing is that you are supposed to verify that the key ID (fingerprint) belongs to that person ahead of time, through some other channel.  What you say could certainly happen.  That's why you need to verify the fingerprint, usually in person or over the phone or something.  If it's an online person, have them message you from an account in a different forum to verify.  So you and I exchange OTR keys, then I shoot you a text/e-mail/phone call and tell you my key fingerprint, so you know that the key you got really is from me, and you do the same.  The nice thing is you only have to do that verification once.  But yes you do have to do that verification at least once in order to prevent exactly the type of thing your post outlines.  The only reason other forms of public key encryption might not have to do that is because they TRUST somebody else.  In HTTPS for example, it's still normal old public key crypto, but your computer and browser comes programmed ahead of time with the public keys of Certificate Authorities, so your browser sends a request to a trusted certificate authority, like VeriSign or something, and because you already have their public key, you can verify their response.  So you ask them for the public key of the website you want to visit, they give it to you, you trust them, and now you trust that the public key you have is the correct public key.  But that's only possible because you trust the authority to give you the right key, and also because you have the authority's key programmed in your computer ahead of time.  That's how websites get around needing to verify the key.  They still do need to verify it.  They just program your browser ahead of time with trust-worthy public keys of places that vouche for other keys."
crypto,2kcuy5,chiniwini,1 point,Mon Oct 27 02:43:08 2014 UTC,"If a powerful attacker (e.g. NSA) can MITM your OTR transmission, then it's likely they can intercept your text/phone call/email as well and MITM that too (most run over the same IP networks these days)  so that won't work for verification."
crypto,2kcuy5,async2,1 point,Tue Oct 28 09:17:36 2014 UTC,"That's true -- although I think the main thing to understand is that you need to somehow securely verify the fingerprint via another channel in order to make sure you're talking with the person you think you are.  But you are absolutely correct that if that other channel is also compromised, then that verification is useless."
crypto,2kd4g4,AussieArcher,10,Sun Oct 26 12:14:17 2014 UTC,I'd still use an old copy of Truecrypt 7.1a  I think the most plausible reason that its distribution was busted was because the original product was actually good.
crypto,2kd4g4,ivosaurus,2,Sun Oct 26 13:15:17 2014 UTC,https://truecrypt.ch/
crypto,2kd4g4,fantasmorgasm2,1 point,Mon Oct 27 02:29:19 2014 UTC,That's......actually an interesting point. You may be on to something there.
crypto,2kd4g4,El_Dud3r1n0,1 point,Sun Oct 26 14:34:21 2014 UTC,On their own site it mentions its a risk using it now. ELI5 why and how the encryption could become outdated ?
crypto,2kd4g4,ivosaurus,8,Sun Oct 26 14:46:28 2014 UTC,"The encryption is not, in any way, outdated. Hell, you can use 3 different modern-day ciphers with it, or use Serpent instead of AES, which you'll find some cryptographers advocating as a better cipher because it's slightly slower. The encryption would become outdated when the cipher you used became broken or someone publicly found a vulnerability in Truecrypt's cryptosystem, which has been audited before.  Their own site is essentially an indication that the developer has either been compromised in some way, or simply stopped developing it, imho. You can download it from plenty other places like https://truecrypt.ch/ and there are plenty of sites to verify you got the correct copy, like this or this.  If I see another product of equivalent or better utility I'd recommend it instead, but so far, not."
crypto,2kd4g4,xJoe3x,1 point,Sun Oct 26 15:24:13 2014 UTC,"Great, thank you so much!"
crypto,2kd4g4,utopianfiat,1 point,Mon Oct 27 05:25:43 2014 UTC,While the encryption algorithms used are certainly up to date as mentioned by /u/ivosaurus.  They development team has the product is no longer supported.  This means they are not searching for or fixing an bugs that may exist in their implementation.
crypto,2kd4g4,aliceandbob,7,Mon Oct 27 15:35:53 2014 UTC,"Trust is only as strong as the weakest link.  You're encrypting on a closed-source OS with closed-source hardware and assuming that your key won't be easily extractable by someone who knows more about your system than you do.  Bitlocker is as good as any other option, because the trust of any option is limited by the trust of the underlying system."
crypto,2k88r8,wonkadonk,7,Fri Oct 24 20:20:49 2014 UTC,What mode was used before?
crypto,2k88r8,nuunien,12,Fri Oct 24 20:30:53 2014 UTC,"CBC with a custom diffuser called ""Elephant"". See this paper:  http://www.microsoft.com/en-us/download/details.aspx?id=13866"
crypto,2k88r8,deathfantasy,-5,Sat Oct 25 02:51:23 2014 UTC,http://en.wikipedia.org/wiki/Disk_encryption_theory#XEX-based_tweaked-codebook_mode_with_ciphertext_stealing_.28XTS.29
crypto,2k88r8,kurin,5,Fri Oct 24 20:40:12 2014 UTC,"Hmm, how exactly is XTS stronger than CBC?  From what I can tell, blocks can be encrypted individually, without re-encrypting the blocks after it, does this not weaken the security?"
crypto,2k88r8,nuunien,23,Fri Oct 24 20:55:13 2014 UTC,"Modifying a CBC ciphertext block makes predictable changes in the plaintext. If you flip the first bit of ciphertext block #i, then plaintext block #i becomes random (unpredictable) junk but the first bit of plaintext block #i+1 is also flipped (and the rest of block #i+1 is preserved).  Modifying an XTS ciphertext block just makes the corresponding plaintext block random junk (edit: and doesn't affect other blocks at all)."
crypto,2k88r8,rosulek,-7,Fri Oct 24 21:08:05 2014 UTC,"I dunno, I'm not a cryptologist."
crypto,2k88r8,kurin,6,Fri Oct 24 21:01:17 2014 UTC,They did not. They used CBC with a diffuser layer.
crypto,2k88r8,deathfantasy,1 point,Sat Oct 25 01:45:10 2014 UTC,"Section 8. XEX-based tweaked-codebook mode with ciphertext stealing (XTS) of article  Disk encryption theory:       Ciphertext stealing provides support for sectors with size not divisible by block size, for example, 520-byte sectors and 16-byte blocks. XTS-AES was standardized on 2007-12-19  as IEEE P1619.     On January 27, 2010, NIST released Special Publication (SP) 800-38E  in final form. SP 800-38E is a recommendation for the XTS-AES mode of operation, as standardized by IEEE Std 1619-2007, for cryptographic modules. The publication approves the XTS-AES mode of the AES algorithm by reference to the IEEE Std 1619-2007, subject to one additional requirement, which limits the maximum size of each encrypted data unit (typically a sector or disk block) to  AES blocks. According to SP 800-38E, ""In the absence of authentication or access control, XTS-AES provides more protection than the other approved confidentiality-only modes against unauthorized manipulation of the encrypted data.""     Interesting: Disk encryption | Dm-crypt | Comparison of disk encryption software | Watermarking attack   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2k88r8,autowikibot,13,Fri Oct 24 20:40:43 2014 UTC,"CBC on it's own isn't exactly ""broken"" but the move from a more sophisticated algorithm to CBC is a bit fishy. Really, the only move they should have done would be from what they had to an authenticated mode of operation like OCB or GCM.  I think it should be clear by now, if you need security, don't use Windows. They are either incompetent or don't have their user's security as a priority.  OCB is more efficient but is patented, but GCM is slower and is free for use by anyone. However, I think GCM has hardware implementations which makes it just as fast, or faster than OCB."
crypto,2k88r8,pushme2,3,Sat Oct 25 00:45:09 2014 UTC,"Yeah, I'm sure that there's no other reason besides incompetence or subterfuge..."
crypto,2k88r8,Blahbl4hblah,7,Sat Oct 25 02:45:07 2014 UTC,"They just moved from CBC + their own diffuser algo (elephant) to CBC.  AES-NI did not support elephant, so it would slow the whole process down, + FIPS meant most enterprise would not use elephant anyway.  Also, with Win 8 and all that sig verification, my guess is that they felt it was almost impossible to modify CBC data in a meaningful way"
crypto,2k88r8,matthew5025,1 point,Sat Oct 25 03:39:01 2014 UTC,"AES-NI did not support elephant, so it would slow the whole process down, + FIPS meant most enterprise would not use elephant anyway.   That does make sense."
crypto,2k88r8,Xykr,2,Sat Oct 25 18:59:08 2014 UTC,Authenticated encryption is not often used with disk encryption since it's not very fast and requires additional space for authentication data. Usually disk encryption software uses a tweakable block cipher like XTS-AES instead.
crypto,2k88r8,deathfantasy,1 point,Sat Oct 25 14:41:04 2014 UTC,"Do you know what it would take to be able to make it efficient? Can it be made efficient? I think the overhead for storage of authentication tags can be reduced with something like Merkle hash trees (signed or HMAC'd on disk), but would they slow it down even more and make it worse?"
crypto,2k88r8,Natanael_L,1 point,Sat Oct 25 16:44:13 2014 UTC,"Ignoring the problem of MAC performance, you still have to recalculate and compare the MAC per block read/written. Worse, if you use a hash tree, you have to travel up the whole hash tree to verify each block, or cache the hash tree in RAM. If you don't MAC the whole drive, then an attacker can replace a block with an older authenticated block from the drive, which is no better than the current situation.  I personally think that authentication for disk encryption is a waste of time. Tweakable wide-block ciphers already provide most of the benefit i.e. making manipulation more difficult (which plain AES-CBC as used here is not very good at). These guys claim <2% degradation in IOPS with authentication, but that's on simulated flash, so YMMV. Maybe self-encrypting drives that offload the crypto onto an on-disk processor would help, but as I said before, tweakable block ciphers are already good enough. If you want strong protection, then it would be more useful to invest in physical security and software security."
crypto,2k88r8,deathfantasy,1 point,Sat Oct 25 17:37:47 2014 UTC,Replacing with older blocks could be solved by using new keys for every session (every time you mount it writable). Would that be enough without authentication if used with something like XTS?
crypto,2k88r8,Natanael_L,1 point,Sat Oct 25 18:30:17 2014 UTC,"You still need to authenticate the key history, or reencrypt the whole drive every mount."
crypto,2k88r8,deathfantasy,1 point,Sat Oct 25 18:51:47 2014 UTC,HMAC or sign the encrypted list of keys.
crypto,2k88r8,Natanael_L,2,Sat Oct 25 19:36:19 2014 UTC,"I think it should be clear by now, if you need security, don't use Windows.   Interesting, yet flawed reasoning.  Windows didn't suffer from shellshock (bash remote code execution) or Heartbleed (openssl discloses contents of memory to unauthenticated network users).  That doesn't prove Windows is secure.  It just highlights that things that are not windows are also not secure.  Bitlocker was never really regarded as true encryption.  Corporations can buy products like PGP disk encryption to get real encryption.  It runs on Windows, OSX, and linux."
crypto,2k88r8,Thibpyl,5,Sat Oct 25 08:21:11 2014 UTC,"You are comparing Windows, an OS, to user-space utilities. And then you accuse of flawed reasoning."
crypto,2k88r8,nuunien,2,Sat Oct 25 08:50:51 2014 UTC,There's more to an operating system than the kernel.
crypto,2k88r8,bitwiseshiftleft,4,Sat Oct 25 10:05:53 2014 UTC,"I completely agree, but that does not make the comparison less flawed. Why not compare Bash and OpenSSL to Windows user-space applications? Of course, this would defeat his statement, given that Windows applications usually have long standing security issues."
crypto,2k88r8,nuunien,2,Sat Oct 25 13:04:04 2014 UTC,"Especially considering that both bash and opensll can and are run in Windows environments, e.g. in cygwin."
crypto,2k88r8,sneurlax,1 point,Sat Oct 25 17:06:09 2014 UTC,"You should compare like for like.  OpenSSL to SChannel and CAPI, bash to the Windows shell.  Higher-level apps don't necessarily come with the OS, but it's at least roughly fair to compare MS Office to LibreOffice, Outlook to Evolution, IIS to Apache or nginx, etc.  The Windows components have a long history of security vulnerabilities, but so do the Linux ones.  Of course, more of the vulnerabilities on the open source side will become public."
crypto,2k88r8,bitwiseshiftleft,7,Sat Oct 25 19:02:45 2014 UTC,"http://technet.microsoft.com/en-us/library/ee706531(v=ws.10).aspx  ""In addition, BitLocker supports a Diffuser algorithm to help protect against ciphertext manipulation attacks, a class of attacks in which changes are made to the encrypted data in an attempt to discover patterns or weaknesses. By default, BitLocker uses AES encryption with 128-bit encryption keys and Diffuser. You can also select encryption without Diffuser by using Group Policy if your organization is Federal Information Processing Standard (FIPS) compliant.""  But, while this is news to Mr. Green, its not news.  This has been questioned for several years, and as far as I can tell, not adequately explained.  https://social.technet.microsoft.com/forums/windows/en-US/33860b05-1d9e-45a0-83fa-6dfe6fda0379/diffuser-missing-from-bitlocker-drive-encryption  Edit to add: a very good presentation from 2013 by Dan Rosendorf  http://spi.unob.cz/presentations/23-May/07-Rosendorf%20The%C2%A0BitLocker%C2%A0Schema.pdf  ""The decision to remove Elephant Diffuser from BitLocker in Windows 8, has had an undeniably negative impact on the security of this FDE solution. On the other hand Microsoft never claimed that BitLocker should protect data from a targeted attack, rather its use should be to protect data from an opportunistic attack. With a properly configured BitLocker installation this protection is still intact."""
crypto,2k88r8,R-EDDIT,4,Sat Oct 25 01:41:53 2014 UTC,"@matthew_d_green:   2014-10-24 19:07:51 UTC  So per @justintroutman and now confirmed, Microsoft has substantially weakened its disk encryption in Windows 8. Now uses plain CBC mode.     [Mistake?] [Suggestion] [FAQ] [Code] [Issues]"
crypto,2k88r8,TweetPoster,2,Fri Oct 24 20:22:21 2014 UTC,"Phew, better download Truecrypt. Oh, wait..  http://truecrypt.sourceforge.net/"
crypto,2k88r8,ThePooSlidesRightOut,12,Fri Oct 24 23:31:20 2014 UTC,https://truecrypt.ch/  or for Windows 8  https://diskcryptor.net/wiki/Main_Page
crypto,2k88r8,ThePooSlidesRightOut,2,Sat Oct 25 00:43:18 2014 UTC,"Thanks! I love the 'subtle' stab at the US right on the frontpage of the new Truecrypt website, haha."
crypto,2k88r8,moneygames,8,Sat Oct 25 02:46:46 2014 UTC,"Meh, you can still get the old version and it still works."
crypto,2k5y0u,monican_agent,2,Fri Oct 24 03:32:42 2014 UTC,"Sounds like a fun project.  I was actually working on a website to implement one of proposed mental poker protocols(the paper I based my protocol on).  It was a bad idea for a lot of reasons, though I knew several of them going into it.  First, to do the crypto client side, I used javascript (Yeah, bad, I know), and then there is the fact that each shuffle required more than 10MB of traffic, so much more appropriate to LAN connections than a webpage.  I also decided to implement a dropout tolerant version which used a reshuffle (another 10+ MB) if anyone dropped out and a careful zero-knowledge flagging of already selected cards, which adds a lot of complexity to something that wasn't going to see the light of day anyway.  Without dropout tolerance I didn't feel comfortable supporting more than a 2-player game, since each player require critical information to flip the next card, so any player dropping out voids the entire hand. But the data traffic increases in proportion to the square of the number of players, so a 2-player only setup would've not been a terrible idea anyway.  Keep in mind the data usage may be a limiting factor and may make over the internet unrealistic.  I ended up abandoning my project because I got far enough into it that I could no longer put off developing the interface and UI work which just didn't interest me.  Anyway, you should be careful about which protocol you implement since a number of them have had subsequent papers that have shown flaws.  Also, many of the newer versions have had nice features, such as the dropout tolerance, and also added efficiency, which is a big deal considering the massive amount of traffic required for this algorithm, though might add complexity, which may not be worthwhile, depending on your goals.  Also, if you haven't seen this implementation, you might want to check it out.  As far as I can tell, the libtmcg is the only evidence I've found of someone actually creating an implementation of a mental poker protocol."
crypto,2k5y0u,AnythingApplied,2,Fri Oct 24 05:54:20 2014 UTC,"Thank you for your reply.  I agree that JavaScript in the browser is typically a less secure and more restrictive environment than if running the software as a protected native application. However, both may be vulnerable if their host environment has been compromised. To a certain degree this may be addressed by running the browser or application in a clean VM but that seems too burdensome for regular use. This is one of the reasons why I chose not to use JavaScript for the implementation, but the rudimentary implementation I mentioned is useful in other ways (Node.js, Cordova / PhoneGap, etc.) For browser-based JavaScript, securing keys and random number generation are a couple of pressing challenges that need to be addressed, but then again no environment is a panacea so I don't believe it should stop anyone from trying.  On the topic of implementations, I found the LibTMCG implementation as well as a Python implementation (deckgen) to be both incomplete and overly complex. A few other projects claiming to implement Mental Poker are either empty or in nascent stages. Being the most complete, however, LibTMCG does address the known weaknesses of the SRA cryptosystem - the ""leaky card"" and weak padding problems - which I also address in the Token Generation section.  As you mentioned, poorly designed or implemented protocols are the source of most of the other known security issues I've discovered in the literature, issues that I've worked to avoid in the Peer to Peer Poker Protocol while reducing complexity. I've also built in protections against side-channel attacks such as those used on the related RSA cryptosystem, and incorporated the lessons of recently exposed flaws such as Heartbleed.  It's not my intention to downplay the importance of addressing known weaknesses but I'm confident that what I've produced is quite solid. Besides being directly based on decades of sound research and being available as open source, a verification of the software via a secondary implementation, like JavaScript, will help to back these claims.   As much as I'd like to believe that I produce perfect code every time, the reality is that bugs will pop up from time to time. Anyone can address these in a fork of the code but I'm too invested in this project to let major problems lie idle. In this regard I'd like to thank you for bringing up the bandwidth issue; it's an important consideration.   CypherPoker uses a commutative cryptosystem as described in the original Mental Poker paper and which has many similarities to RSA. The data doesn't grow over time so it's possible to predict how much information we can expect to exchange in a variety of scenarios.  -Assuming a very strong crypto byte (CB) length of 512, or 4096 bits, the raw data requirement for a 52-card deck is exactly 26,624 bytes. If we add a generous 3,376 bytes for protocol metadata we can assume 30 KB for the whole deck or roughly 4 KB  per card if transmitted independently, which we try to avoid.  -With 8 participants, the full deck is initially transmitted 8 times requiring a total 240 KB of data to be exchanged. We add two additional dealer messages to this, one to share the plaintext mappings (TPs) and one to share P - 30,000 and 4,000 bytes. This brings the total data requirement for the initial deal to 274,000 bytes, which means roughly 35 KB of data exchanged by every participant. In fact the requirement for the dealer is a little higher while for the players it's slightly less, but this marginal burden is shared during subsequent rounds of play and will approach the average as the dealer role is shifted towards the final player.  -Only cards being selected for play are transmitted once the deck is encrypted. Individual card operations based on the 4 KB size average will require 32 KB of data to be transmitted for a full decryption. At 512 bytes per card and including 3,376 for overhead, a single communication containing 2 cards will be 4.4 KB. At 3 cards, the message size increases to 4.9 KB.  For a typical game 3 + 1 + 1 community cards (4.9 KB + 4 KB + 4 KB) are selected and 2 private cards (4.4 KB) are selected per player. Because we have 8 participants, every operation must be carried out 8 times. For community card selection this requires roughly 103 KB and all private cards require roughly 282 KB of data to be transmitted.  -Beside cryptographic operations there are also numerous betting, status, and other message exchanges between players. These are typically much smaller, even at an inflated average size of 1 KB. If we assume a healthy average of 30 realtime updates per participant prior to and during each betting round we can expect approximately 180 messages for a full game. In total, this means an additional 180 KB per player, or 1.44 MB for all 8 players.  Putting this all together, a full round of CypherPoker played at a very high CB length of 512, or 4096 bits, between 8 players requires about 2.1 MB of data: 274 KB to generate the deck + 385 KB for card selection + 1.44 MB for other messages.  Reducing either the CB length or the number of participants reduces this data requirement, as does minimizing realtime exchanges such as betting messages, and optimizing the message format (for example, the metadata).  If we assume that an average round lasts 5 minutes using the pessimistic 2.1 MB value, a participant should be able to maintain a sustained average transfer speed of 7 KB or 56 kilobits per second. Roughly 1.8 MB of that data will be downstream and 263 KB will be upstream.  After an hour the 8 participants will have exchanged just over 25 MB of data, an average of 3.2 MB per participant. It's difficult to predict the exact data requirements but even with the high CB length I believe these values are reasonable. With optimization they can be even better.  Efficiency of the cryptosystem is also a concern I share. From inception it was designed to be dynamically multi-threaded and cooperative. Each peer shares equally in the work of multi-party computations such as encryption or decryption. Improvements in path creation, the order in which the computations are done, could also increase efficiency.   The biggest problem with SRA is the startup time when the CB length is high. If we use a strong length of 256 (2048 bits), the time needed to find the true prime, P, can easily be in excess of 2 minutes. Even at CB length 128 (1024 bits), finding P takes unacceptably long. Furthermore, this doesn't take into account the generation of the plaintext tokens, TPs, and subsequent multi-party encryption.  Luckily there are two properties of the cryptosystem that allow these issues to be overcome. First, the encryption and decryption operations are both multi-threaded and relatively efficient. Second, since the plaintext tokens, TPs, are are derived using the prime, P, and since both TPs and P are shared publicly they can be pre-computed. Instead of sharing P, the dealer only needs to share an index to a known CB-length P value (with associated with TPs) that participants map locally. A 10 to 15 second startup time, for example, can be reduced to as little as 5 to 7 seconds. This also has the added benefit of slightly reducing the initial data size requirements.  When such optimizations are combined with a robust status reporting system and the ability of players to concurrently engage in other activities, the software becomes viable.  Finally, as you mentioned dropout handling is a must if we want to support more than 2 players. However, since this is described in the Peer to Peer Protocol section I'll save that discussion until it's been posted.  Thanks for your comments."
crypto,2k5y0u,AnythingApplied,1 point,Sat Oct 25 01:22:36 2014 UTC,"Awesome, thanks for your very thorough response.  Sounds like you have a better familiarity with the literature and have thought through many of the technical issues and I'm excited to see what you produce and if contributing is within my abilities.  My only other comment is that in fast-mode on popular poker sites the hands/hour run about 60 hands/hour instead of your assumed 12 hands/hour."
crypto,2k3fe6,Alex-L,6,Thu Oct 23 13:52:41 2014 UTC,"It is more than possible to store full private keys in a QR code. I did a project on this is college. Rather than relying on some software with its own format to encode/decode keys, I split the ASCII private keys into QR codes and combine them later with zbarimg.   1024-bit key 2048-bit key (two images) 4096-bit key (four images)   In my project I was able to use photos of keys in combination with zbarimg to batch reconstruct the GNUPG private key. Using ASCII-encoded keys requires more images, but I preferred it over binary because it made scanning easier. My goal with the project was to come up with a way to save a private key to paper so that it could be read >10 years later. With that goal in mind I shyed away from non-standard formats such as paperbak, or others mentioned here because I figured after a few years they were likely to be unmaintained, whereas the software to read ASCII gpg keys (GNUPG) is not going anywhere, and if zbarimg disappears someone is very likely to replace it (in fact there are many generic QR readers already)."
crypto,2k3fe6,TyIzaeL,2,Thu Oct 23 21:38:15 2014 UTC,It sounds like a way to make your private key easier to capture.
crypto,2k3fe6,Thibpyl,1 point,Fri Oct 24 03:14:16 2014 UTC,"balance the possible danger versus the inconvenience of doing it a more secure way. If you are trying to protect against an attacker that may break in your home or po box, bankbox, or just the risk is too great then you of course shouldn't throw a paper copy in your drawer. Also, fire.  I really think that encrypting with AES and committing a very strong password to memory is the best. Rubber hose crypto and all that but I'd you're captured, you lost."
crypto,2k3fe6,d4rch0n,1 point,Fri Oct 24 03:53:55 2014 UTC,"I don't see the advantage of doing this over a cold store on media + encryptin of choice (FDE, KeePass/Password-Safe, etc). You could put a Yubikey (OTP) in the bank and/or part of the passphrase in your wallet.  (I generally make the assumption that if somebody is going to coerce me to give them the paper they can coheres me to enter the password.)"
crypto,2k3fe6,gospelwut,6,Thu Oct 23 16:54:32 2014 UTC,"I don't see the advantage of doing this over a cold store on media + encryptin of choice (FDE, KeePass/Password-Safe, etc).   Paper has a pretty good track record at surviving for long amounts of time – several decades under poor conditions, under good conditions millennia. That's hard to beat with digital media."
crypto,2k3fe6,Creshal,1 point,Thu Oct 23 19:21:07 2014 UTC,"I'd argue that use case is exceeding when I'll need a PGP key. But, I'd argue solid-state probably will last the duration. If one is concerned about ""knowing"" if their backup okay, one could always use an air-gapped system that monitors raid/disk."
crypto,2k3fe6,gospelwut,2,Thu Oct 23 20:08:45 2014 UTC,"Solid-state memory relies on stored electric charges, which are lost if the device is left unpowered for too long (on the order of months or years).  Solid-state is not a good choice for offline information storage.  http://www.tomshardware.com/forum/290795-32-permanence-data-powered  https://en.wikipedia.org/wiki/Flash_memory#Principles_of_operation"
crypto,2k3fe6,hallettj,2,Fri Oct 24 04:38:51 2014 UTC,Magnetic tape does well for bulk long term storage. Obviously it offers higher density than paper as well.
crypto,2k3fe6,Uncaffeinated,1 point,Fri Oct 24 05:48:42 2014 UTC,How expensive is a tape drive? And how expensive a printer?
crypto,2k3fe6,Creshal,1 point,Fri Oct 24 08:50:48 2014 UTC,*Coerce
crypto,2k3fe6,Natanael_L,1 point,Thu Oct 23 18:31:41 2014 UTC,"Why do people trust the bank and PO Box? They're operating under the assumed trust, but they can not verify the trust of the bank or the PO Box."
crypto,2k3fe6,nocnocnode,1 point,Sun Oct 26 04:16:31 2014 UTC,I wrote paperbin that outputs sets of barcodes (not necessarily qrcodes) with parity built into the outputted codes.
crypto,2k3fe6,jimktrains,0,Thu Oct 23 19:40:02 2014 UTC,A cooler way would be at keygen time ... you capture the PRNG seed + user info [name/email/etc] and QR that shit up.    Or you QR a random AES key that you encrypt the private key with and then store online in the clouds.
crypto,2k1n0g,conradsymes,4,Wed Oct 22 23:45:05 2014 UTC,This explains it better than I could:  http://en.wikipedia.org/wiki/IEEE_802.11i-2004
crypto,2k1n0g,aydiosmio,2,Thu Oct 23 01:36:09 2014 UTC,"Another link, which says it uses RC4.  These links explain how keys should be generated. One should never trust implementations that have not been properly reviewed."
crypto,2k1n0g,3pg,2,Thu Oct 23 03:53:29 2014 UTC,"First, TKIP implements a key mixing function that combines the secret root key with the initialization vector   It doesn't say what the key mixing function is."
crypto,2k1n0g,autowikibot,1 point,Thu Oct 23 18:11:46 2014 UTC,"Section 2. Technical details of article  Temporal Key Integrity Protocol:       TKIP and the related WPA standard implement three new security features to address security problems encountered in WEP protected networks. First, TKIP implements a key mixing function that combines the secret root key with the initialization vector before passing it to the RC4 initialization. WEP, in comparison, merely concatenated the initialization vector to the root key, and passed this value to the RC4 routine. This permitted the vast majority of the RC4 based WEP related key attacks.  Second, WPA implements a sequence counter to protect against replay attacks. Packets received out of order will be rejected by the access point. Finally, TKIP implements a 64-bit Message Integrity Check (MIC).      Interesting: Wi-Fi Protected Access | Rekeying | Wireless security   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2jw4yo,silverforest,10,Tue Oct 21 14:50:23 2014 UTC,"Handbook of Applied Cryptography Goldreich: The Foundations of Cryptography Handbook of Elliptic and Hyperelliptic Curve Cryptography eBACS: ECRYPT Benchmarking of Cryptographic Systems Mihir Bellare and Shafi Goldwasser's Lecture Notes Charm: A tool for rapid cryptographic prototyping Non-Cryptographic Hash Function Zoo eHash Wiki   Conferences and Papers   Cryptology ePrint Archive IACR Conferences (Crypto, Eurocrypt, Asiacrypt) IEEE Symposium on Security and Privacy"
crypto,2jw4yo,gsuberland,10,Tue Oct 21 16:46:48 2014 UTC,"Crypto StackExchange. Think StackOverflow, but for crypto!"
crypto,2jw4yo,cedricvanrompay,1 point,Wed Oct 22 09:30:17 2014 UTC,"+1. This site is getting super big, lots of great answers."
crypto,2jw4yo,gsuberland,1 point,Wed Oct 22 10:12:52 2014 UTC,"Security SE is also good, though focused more on general security than cryptography."
crypto,2jw4yo,floodyberry,9,Wed Oct 22 10:23:11 2014 UTC,"Modern Crypto mailing list Metzdowd mailing list randombit mailing list Password Hashing Competition CAESAR (Competition for Authenticated Encryption: Security, Applicability, and Robustness)"
crypto,2jw4yo,cedricvanrompay,2,Tue Oct 21 17:21:23 2014 UTC,"Since most crypto papers now use games, this could be handy :  ""Sequences of games: a tool for taming complexity in security proofs"" by Victor Shoup"
crypto,2jw4yo,cunttard,1 point,Wed Oct 22 10:15:18 2014 UTC,"I have read this paper before, it is a fantastic resource."
crypto,2jw4yo,ddddavidee,3,Wed Oct 22 11:31:10 2014 UTC,A link with many resources: http://blog.existentialize.com/so-you-want-to-crypto.html
crypto,2jw4yo,clrs,3,Tue Oct 21 18:04:09 2014 UTC,Would like to advertise our Authenticated Encryption Zoo which gives an overview of the ongoing CAESAR competition. We welcome everyone to participate in keeping the Wiki up to date with new information.
crypto,2jw4yo,cunttard,1 point,Tue Oct 21 18:46:56 2014 UTC,Helger Lipmaa Cryptology Pointers
crypto,2jw7u5,wonkadonk,2,Tue Oct 21 15:17:28 2014 UTC,public key crypto?
crypto,2jw7u5,R-EDDIT,5,Tue Oct 21 16:22:28 2014 UTC,HTTPS://fidoalliance.org/specifications  Using public key cryptography
crypto,2jw7u5,Paran0idAndr0id,1 point,Tue Oct 21 19:26:37 2014 UTC,"No, actually, at least YubiKey doesn't. They generate a one-time-password via AEAD and counters. Most of these services that I'm aware of use a pre-shared key."
crypto,2jw7u5,R-EDDIT,4,Tue Oct 21 19:06:34 2014 UTC,"Yubikey is ""pluggable local auth"".  The FIDO challenge response uses public key crypto.  Https://fidoalliance.org/specifications"
crypto,2jw7u5,Paran0idAndr0id,1 point,Tue Oct 21 19:28:37 2014 UTC,"Ah, interesting! Apparently at the same time (likely not coincidentally), Yubico has released a new [FIDO U2F Key]https://www.yubico.com/products/yubikey-hardware/fido-u2f-security-key/).  Thanks for enlightening me!"
crypto,2jw7u5,Paran0idAndr0id,1 point,Tue Oct 21 21:45:08 2014 UTC,It's 2014.  If you're signing into a server with a password then things have gone wrong.
crypto,2jw7u5,Paran0idAndr0id,1 point,Wed Oct 22 12:03:41 2014 UTC,Public Key Crypto would generate a one-time-password as well.
crypto,2jw7u5,cunttard,1 point,Wed Oct 22 16:19:07 2014 UTC,"You'd use it to do a proper challenge/response and also exchange random material [e.g., TLS]"
crypto,2jvjaw,zeroXten,1 point,Tue Oct 21 10:15:39 2014 UTC,Interesting. OP are you involved in the project?
crypto,2jvjaw,m15k,1 point,Tue Oct 21 18:37:51 2014 UTC,"OP has the same username as the person who committed the LICENSE file in the github repo.  Incidentally, that's the only file in the repo."
crypto,2jvjaw,GahMatar,1 point,Tue Oct 21 18:55:55 2014 UTC,"Correct :)  I've got some crappy prototype stuff written in ruby, but I'm thinking of starting entirely from scratch with community involvement. Would love there to be a few more devs involve as I'm not a full-time developer (I'm a sysadmin-that-codes / devops etc).  But before any new code is written, it is probably a good idea to develop the design a bit further from a security perspective. So, documentation writing for now it seems."
crypto,2jvjaw,m15k,1 point,Tue Oct 21 19:02:12 2014 UTC,"Ah good, that was my next question.  Was curious if you were going to ride over something like NSS.  I'm in a similar situation, I do information security full time but I like to code.  I admit some stuff is still a bit up in the air, but I suppose you admit that.  I am very intrigued, I must say."
crypto,2jvjaw,m15k,1 point,Tue Oct 21 19:33:53 2014 UTC,Thanks :)
crypto,2jvjaw,cunttard,1 point,Tue Oct 21 22:17:37 2014 UTC,"Alright, I am curious enough to wade in.  To minimize others from asking the same question, how do we get involved with your project?"
crypto,2jvjaw,cunttard,2,Wed Oct 22 00:09:48 2014 UTC,"Probably best to drop an email to help@pki.io with some details of your interests, background etc. Also include your github username if you have one.  You can also join #pki.io on freenode... bit quiet at the moment but I've got two people interested in helping out already \o/"
crypto,2jw3v0,LarryBoLarry,2,Tue Oct 21 14:39:48 2014 UTC,"Does this actually protect anything?  Given that all your data is stored in the cloud anyway, why would anyone even need to get data off your phone."
crypto,2jw3v0,MacroMeez,2,Tue Oct 21 15:28:14 2014 UTC,Not everything will be online. Consider notes and sensitive app data
crypto,2jw3v0,Natanael_L,1 point,Tue Oct 21 22:31:01 2014 UTC,"If you are worried about a lost device scenario cloud data will not be important.    If you worried about a warrant, you can restrict what data goes out."
crypto,2jtutu,wonkadonk,7,Mon Oct 20 22:15:50 2014 UTC,"I made the mistake of reading the comments.   Really a waste of money. All applications from silent circle are BACKDOOR, so it is a zero security device for kids really. Better learn about security the author of this article   Yes, I'm sure Joshua ""jduck"" Drake has no experience in security at all. Y'know, aside from working at Accuvant, having a whole bunch of RCE bug CVEs to his name, doing numerous presentations at major conferences, being a Metasploit contributor..."
crypto,2jtutu,gsuberland,4,Tue Oct 21 08:51:59 2014 UTC,No source code available means only gullible fools are going to use it.
crypto,2jtutu,disclosure5,1 point,Tue Oct 21 05:04:27 2014 UTC,"As an owner myself, frankly I'd buy one again just for the battery life and responsiveness that comes with being un-coupled from all the crap modern phones usually come with.     For the ""source code"" complaints, how many Samsung or HTC owners have seen the source code to any of the 10-15 apps they bundle with full permissions?"
crypto,2jsuhb,danukeru,3,Mon Oct 20 17:15:03 2014 UTC,Ok I now know that I have a minimal understanding of elliptic curves.
crypto,2jsuhb,hoffmabc,3,Mon Oct 20 18:36:50 2014 UTC,"the title is misleading. if you listen to it to learn about EC, you are in for a disappointment. it was about the design rationale of one specific curve."
crypto,2jsuhb,pint,1 point,Tue Oct 21 07:59:00 2014 UTC,"Heh.  Lots of jargon in that talk, though maybe 3/4 of it is just implementation details."
crypto,2jrmn1,conradsymes,15,Mon Oct 20 07:55:45 2014 UTC,"The Even-Mansour scheme XORs plaintext with the key, then applies a permutation P, and finally XORs the P-output to produce a ciphertext. The proof of the lower bound is performed in the ""ideal permutaiton model"", meaning P is assumed to be a permutation whose output is completely unpredictable. In real life ideal permutations don't exist, but we can try to approximate them by having a large number of rounds. Hence the Even-Mansour proof does not exclude having a large number of rounds."
crypto,2jopx7,electronics-engineer,7,Sun Oct 19 12:19:41 2014 UTC,I think that maybe you meant ACLU?
crypto,2jq761,K3rb3ro5,9,Sun Oct 19 21:54:47 2014 UTC,"Why didn't you use an existing tool like gpg or openssl? Why did you implement primitives from scratch, instead of including existing ones? Why did you use C, instead of a safe high level language?   This is fine as an educational exercise, but isn't worth examining in detail for the above reasons."
crypto,2jq761,amtal-rule,2,Mon Oct 20 02:42:29 2014 UTC,OpenSSL is hardly the pinacle of secure code nor are any of the ciphers in it as good as Threefish
crypto,2jq761,3pg,2,Mon Oct 20 20:57:17 2014 UTC,"If you have a master at secure programming in C and an equally skilled Java/C# developer, you will end up with a more secure program in C. The reason why high level languages are commonly recommended is that few people can implement secure programs correctly, and by selecting a ""safe"" language they avoid screwing up things that skilled C-programmers have been aware of for decades.  The developers of compilers/interpreters are no different. Sure the APIs are improving, but I am not aware of any interpreter or compiler for a common language that claims that it implements all possible security features just to make sure that the high-level programs are as secure as their C counterparts.  The only argument I can see for not using C is C++, as it becomes slightly easier to know when data can be wiped."
crypto,2jq761,aydiosmio,5,Mon Oct 20 03:54:41 2014 UTC,"I'd like to find all these ""skilled"" C programmers. As a security consultant, part of my job is to review software. I've never in my entire life seen a mature C app without a dangerous bug. This includes all popular FOSS and commercial products.  It's more important to use a framework (language) which is built on safe constructs and then use your ninja programmer skills to properly implement security primitives within the limitations of the language and avoid any known pitfalls."
crypto,2jq761,volcanoclosto,2,Mon Oct 20 09:23:39 2014 UTC,what about djbdns?
crypto,2jq761,aydiosmio,2,Mon Oct 20 10:44:05 2014 UTC,"http://www.cvedetails.com/vulnerability-list/vendor_id-9069/product_id-16058/D.j.bernstein-Djbdns.html  Here's a good one (of the three public):   The response_addname function in response.c in Daniel J. Bernstein djbdns 1.05 and earlier does not constrain offsets in the required manner, which allows remote attackers, with control over a third-party subdomain served by tinydns and axfrdns, to trigger DNS responses containing arbitrary records via crafted zone data for this subdomain.    When you pay money for hundreds of other people to look at your code, eventually you'll ferret out all the vulnerabilities. Assuming the codebase is small and never changes. This also kind of crushes the idea of the C ""super programmer"" the original poster refers to.  djbdns has not changed since its last release djbdns-1.05 in February 2001 and its license forbids modification."
crypto,2jq761,3pg,2,Mon Oct 20 17:24:04 2014 UTC,"Then you need to find new customers. Such programmers are rare but real, and some programs are written by several of them working together.  The only group with published code that comes close is the OpenBSD team. Unfortunately the best software takes 50 years or so to reach the public."
crypto,2jq761,aydiosmio,2,Tue Oct 21 03:11:16 2014 UTC,"Yup, pretty much. Not only do you need expert programmers, you need experts in the subject matter of the application who are literate in computer applications.  Daunting proposition."
crypto,2jq761,aydiosmio,1 point,Tue Oct 21 03:55:12 2014 UTC,Can you point out any of the dangerous bugs in this one. So I can fix them?
crypto,2jq761,cunttard,1 point,Tue Oct 21 05:41:33 2014 UTC,"I don't review C code in my professional capacity, only ASP.Net, PHP and Java."
crypto,2jq761,cunttard,3,Tue Oct 21 08:01:52 2014 UTC,"If you have a master at secure programming in C and an equally skilled Java/C# developer, you will end up with a more secure program in C. The reason why high level languages are commonly recommended is that few people can implement secure programs correctly, and by selecting a ""safe"" language they avoid screwing up things that skilled C-programmers have been aware of for decades.   Bullshit. Other languages have these things that actually make secure programming easier, I'm specifically thinking about Ada or Rust."
crypto,2jq761,horsefactory,1 point,Fri Oct 24 05:52:24 2014 UTC,Why didn't you use an existing tool like gpg or openssl?   OpenSSL has a notoriously shit implementation of PBKDF which implements one round of MD5. (Perhaps this is tweakable and can use another hash function but the bog standard command-line encryption tool is shit.)
crypto,2jq761,tom-md,0,Fri Oct 24 05:51:05 2014 UTC,"In order of your points   both gpg and openssl nor any other open source tool I am aware of support threefish.  Not quite sure what you are talking about can you point me to a specific example Speed, efficiency and portability. Also please introduce me to ANY language that makes writing crypto tasks safe."
crypto,2jq761,misaka9,3,Mon Oct 20 07:01:30 2014 UTC,"You could look into the rust programming language, which is still quite new but one of its primary design goals is to provide memory-safe constructs at compile time.  http://www.rust-lang.org  https://github.com/DaGenix/rust-crypto"
crypto,2jq761,stouset,1 point,Wed Oct 22 08:32:03 2014 UTC,"It isn't usually about the language making cryptography in particular safer, though those exist (ex: F7), it is about making programming ""safer"" or rather - harder to get wrong.  Memory safety is the most obvious feature that comes to mind - it is nice to know you aren't clobbering a value you care about or leaving memory uncollected.  This only scratches the surface though; C semantics are scary at times, an example of a cryptographer getting undefined behavior recently popped up on github.  How convenient!"
crypto,2jq761,stouset,2,Tue Oct 28 00:13:04 2014 UTC,"Neat, I mostly use gpg to encrypt files I need a backup of on dropbox. I can see that my gpg supports many ciphers but no threefish, maybe you could try getting your implementation in gpg? That would probably help in getting people to review the code."
crypto,2jq761,Dillinur,2,Sun Oct 19 23:00:35 2014 UTC,"Maybe some day, I don't think I am at the level that I can add an entire cipher implementation to libgcrypt."
crypto,2jq761,pint,2,Mon Oct 20 07:06:25 2014 UTC,"By my brief reading (I'm on my phone, on a plane), this appears to not use an authenticated encryption mode.  Is this understanding correct?"
crypto,2jq761,Dillinur,1 point,Mon Oct 20 02:17:26 2014 UTC,It uses cbc with no MAC.
crypto,2jq761,Dillinur,2,Mon Oct 20 02:42:48 2014 UTC,That seems like a questionable decision. Why CBC with no MAC? Why not an authenticated mode like CCFB?
crypto,2jq761,3pg,1 point,Mon Oct 20 04:17:32 2014 UTC,I think I will go to CBC-MAC in a future release. I am staying away from counter modes as encrypting the same plain text with the same password will result the same cipher text and that is a potential use case of this software.
crypto,2jq761,d3m0n0gr4ph1c,4,Mon Oct 20 06:49:46 2014 UTC,"You're supposed to use a different IV anytime, with CTR as with CBC."
crypto,2jq761,3pg,1 point,Mon Oct 20 07:50:29 2014 UTC,"I did some reading on CTR and your right, it says you can initialize the nonce/counter with random data."
crypto,2joua8,wonkadonk,5,Sun Oct 19 13:34:21 2014 UTC,"""Secure""   Check inbox for your password   hahahahhaahahah.  nope."
crypto,2joua8,Katana__,1 point,Sun Oct 19 19:37:21 2014 UTC,"This is an ad.  There's no security or interesting crypto. Just a thin (and poorly obfuscated, for some reason) wrapper around WebRTC.  The central C&C server at 104.131.15.42 is accessed via plain HTTP."
crypto,2joua8,amtal-rule,1 point,Mon Oct 20 03:20:48 2014 UTC,Not an ad. I have no affiliation with it. Just wondering what r/crypto thinks about it before I use it. It did seem a little suspicious to me too that there wasn't too much info about its security.
crypto,2jln9t,noel___,24,Sat Oct 18 11:51:00 2014 UTC,"Note that you are using ""zero knowledge"" as a buzzword, when it actually has a rigorous and quite strong definition in cryptography.  There is a range of solutions that leak various amounts of metadata (word frequencies, search term intersections, search result intersections, etc.).  If you searched for ""cats"" twice in a row, is it okay let the server know that this occurred?  A true zero-knowledge solution should say no.  If you searched for ""cats"" and you searched for ""dogs"", and both of them happen to appear in some document 14, is it okay that the server knows that you made two distinct searches and document 14 both pop up?  A true zero-knowledge solution should say no.  However, we live in the practical world, and we might say yes to some of these things for the sake of practicality.  I believe the best you can get in terms of trading off privacy for efficiency is CryptDB, which has already been implemented and Google I believe also uses it.  http://css.csail.mit.edu/cryptdb/  https://code.google.com/p/encrypted-bigquery-client/  If you want absolute metadata privacy except for, say, what can just be measured by bandwidth alone, you probably have to give up efficiency and 10 billion sounds too big for current methods.  Searchable encryption, order-preserving encryption, order-testable encryption, deterministic encryption all leak metadata to some extent, and you'll have to bring out the big guns like FHE, PIR, ORAM, etc."
crypto,2jln9t,DoWhile,13,Sat Oct 18 17:21:11 2014 UTC,"The topic you're interested would be searchable encryption. I'm sure there's a way to do it with zero-knowledge but it probably requires fetching every file so that the server assumes the keywords belong to each document. At which point, what is the point of server side search?  Here is a good starting point.  I don't know much about the topic, but there's a lot of implications with searchable encryption, and to do it practically you need to ensure minimal leakage (to the server). The more leakage, the more information a server has to reconstruct a document from keywords.  I don't really know much else on the topic.  Edit: Btw - the mailpile.is client offers encrypted server-side search.  Hope that helps."
crypto,2jln9t,cunttard,4,Sat Oct 18 11:56:54 2014 UTC,"Some more Google juice would be order preserving encryption. I think it's another research dead end, but encryption with this property would support what you want (e.g. large parts of Lucene are implemented solely using operator<)"
crypto,2jln9t,w3m2d,2,Sat Oct 18 13:45:13 2014 UTC,"Check out encrypted range queries.  If you can put potential initial queries on the number line somehow, you may be able to use this."
crypto,2jln9t,throwaway,2,Sat Oct 18 15:27:15 2014 UTC,Check out Searchable Symmetric Encryption:  http://eprint.iacr.org/2006/210.pdf
crypto,2jln9t,bascule,1 point,Sun Oct 19 04:47:03 2014 UTC,"It matters what you need to be searching for. If you need to actually be parsing the encrypted files, this is much harder. If you are able to simply search for keywords, then this is actually much easier. Keep a list of hashes of the keywords associated with each item in the table near the item. I suggest doing a hash of something like hash(filename + keyword). Then when you need to do a search, just hash the search (or each term of the search) with each filename.   The reason you want to do this instead of just hashing the keyword is that an attacker could match up keywords if it were simply hash(keyword).  This will be quite expensive per-search, but if you're considering homomorphic encryption, this will likely be much more feasible. Some of the cost can also be mitigated with request caching.  If you wanted some extra protection, you could do hash(filename + hash(keyword)). Then the user would simply have to send hash(keyword). This would provide the extra benefit of not having to send keywords cleartext. It also means that you could keep a cache of request responses by hash instead of by keyword, reducing computation and increasing responsiveness."
crypto,2jln9t,Paran0idAndr0id,1 point,Sun Oct 19 02:50:16 2014 UTC,"Whereby a non-zero knowledge search index could be used to reconstruct the original private documents in whole or in part thanks to word frequencies   This sounds a lot like Markov chains. There were many such programs in the 80's, and among the most famous was Mark V Shaney.  Other than that, the other commenters do a better job deciphering your question."
crypto,2jln9t,3pg,0,Sun Oct 19 03:56:56 2014 UTC,"Thanks for the great feedback everyone, and it looks like I have a lot more reading ahead of me! Answer: Plausible, but no public structure definition currently exists, and definitely no source code implementations of that structure."
crypto,2jkm6b,HostFat,2,Sat Oct 18 01:40:47 2014 UTC,Can't wait for the TTL options coming as soon as the protocol migration is done :)
crypto,2jkm6b,yamamushi,1 point,Sat Oct 18 01:55:56 2014 UTC,"Ttp explanation, link?"
crypto,2jkm6b,hietheiy,2,Sat Oct 18 02:24:47 2014 UTC,"Copying directly from the BitMessage DevTalk broadcast list:  DevTalk Mailing List.  Learn More About DevTalk -> http://bittext.ch/TUanG8v8wF Message ostensibly from Atheros (BM-GteJMPqvHRUdUHHa1u7dtYnfDaH5ogeY) Wed, 2014-10-01 21:26:28 UTC  Hello everyone, You may be aware that we have been working on Protocol v3: https://bitmessage.org/forum/index.php?topic=4067.0 It should be ready to release. A forum user named Thomas is running several nodes which will redo the POWs of objects and broadcast them on the opposite network in order to facilitate an upgrade period. It could not keep up during the spam flooding but should be able to for the time being now that it has stopped or paused. The two networks are the v2 network and the v3 network. I propose that I broadcast an announcement of the release this week and have the actual release next week. The upgrade period would then run through Sun, 16 Nov 2014 22:00:00 GMT. I can create a release candidate before next week for people here to test. Are there any objections to this plan? I would be happy to answer questions.  Here is what my announcement will likely say: <announcement> Bitmessage v0.4.4 will be available next week. It will be a required release; you must upgrade sometime before 16 Nov 2014.   This release contains a major protocol upgrade which accomplishes several goals: - Support user-specifiable message expiration time rather than the current two-day setting. Users will be able to specify the length of time a message should be held by the network from several minutes to 28 days. Messages with a longer time-to-live will require more work to send while messages with a shorter time-to-live will be easier to send. - Simplification of the various object types and signing schemes which will make implementing alternative clients easier. - Support for future object types even through older nodes.  - Cap the maximum message size at 256 KiB.   There isn't yet any user-interface to specify the time-to-live of a message; this will be added after the upgrade period. This release does contain a new feature which can be used immediately: the ability to limit the network transfer rate. Note that message acknowledgments will be broken until both parties upgrade so we recommend that everyone upgrade sooner rather than later. Interested individuals may review the source code ahead of time here: https://github.com/Bitmessage/PyBitmessage/commits/ProtoV3  Thank You, Atheros </announcement>"
crypto,2jkm6b,yamamushi,1 point,Sat Oct 18 02:43:28 2014 UTC,"Updated, seems to be running smoothly."
crypto,2jfsh3,LarryBoLarry,7,Thu Oct 16 18:04:25 2014 UTC,Yeah... sending the FBI director a package sounds like a quick way to get on some lists.
crypto,2jfsh3,AnythingApplied,5,Thu Oct 16 18:28:40 2014 UTC,"But if we all do it, the list becomes pointless."
crypto,2jfsh3,sk_2013,12,Thu Oct 16 20:52:34 2014 UTC,1.2 million already on the list. Not pointless. Super fucking awful.
crypto,2jfsh3,allthekids,3,Thu Oct 16 22:50:33 2014 UTC,Flash lights? I don't get it.
crypto,2jfsh3,tc655,13,Fri Oct 17 00:01:07 2014 UTC,"""Dark place"""
crypto,2jfsh3,shitpost_machine,3,Fri Oct 17 04:36:50 2014 UTC,You. I like you.
crypto,2jfsh3,Number_06,27,Fri Oct 17 06:21:55 2014 UTC,"A ""very dark place"" such as needing to obtain a warrant based on an articulable suspicion, rather than just rummaging through devices on the off-chance of finding something culpable?"
crypto,2jfsh3,MadderThanMad,13,Thu Oct 16 19:01:15 2014 UTC,"No, a dark dark place like where you can wipe your ass with that warrant because the crypto is rock solid and the 5th amendment protects me from refusing to reveal my password."
crypto,2jfsh3,account2014,12,Thu Oct 16 23:08:07 2014 UTC,This is silly.  Part of the reason people are lauding the encryption advances is because it's patently clear that parts of the government are not following existing warrant procedures.  Claiming that the FBI is OK with them doesn't mean the NSA is.  I'd be interested to learn what the actual number of convictions that rely on data like this is.  I'd imagine that physical evidence is still a thing in many crimes.
crypto,2jfsh3,Uncaffeinated,9,Fri Oct 17 02:29:50 2014 UTC,"It doesn't really matter how many convictions relies on this data. Even if you can convict all the criminals there are, you shouldn't do it if it means you'd have to invade the privacies of millions of people to do it.  We can have encryption and have a way of check and balance that actually allows you to catch criminals while not poking in every body's business through cryptography.   Just because a sword has two-edges doesn't mean you throw out the sword. You figure out a way to use the sword better."
crypto,2jfsh3,Maximumentropyguy,2,Thu Oct 16 19:40:56 2014 UTC,"Somewhere in the single digits per year, according to what I've read."
crypto,2jfsh3,bitwiseshiftleft,11,Thu Oct 16 21:34:56 2014 UTC,"They can have the access they have always had to phone calls... Listen at the switches. We still don't have voice encryption by default. What they are asking for is not ""what they have always had."" They are asking for access to everyone's private computers that we now carry around in our pockets."
crypto,2jfsh3,thatmorrowguy,29,Fri Oct 17 01:44:26 2014 UTC,"Imagine a hypothetical world in which we could make ""secure golden keys"" actually secure.  In that world, I wonder if the FBI directory be satisfied with a service that works as follows:   In order to access someone's encrypted data, including phone calls, a judge must cryptographically sign an order to be given to a consortium of trusted, non-governmental third parties.  These parties operate a threshold decryption scheme on HSMs which are airgapped, or as close to airgapped as possible. The order would include information about what communications can be tapped, how long the order will last, and how long it must remain secret.  Secret wiretap orders must be periodically reviewed, or they automatically become public. Anyone who was subject to a wiretap would be notified of the full details once the order is no longer secret. Stats would be collected and published.  For secret wiretaps, this would include a randomized delay.   Thoughts?"
crypto,2jfsh3,bitwiseshiftleft,40,Thu Oct 16 23:34:03 2014 UTC,"This is certainly well thought out and actually seems like a good idea, so there's no way law enforcement would be satisfied."
crypto,2jfsh3,allthekids,17,Thu Oct 16 18:32:37 2014 UTC,"The devil is in the details, and who the said trusted NGOs are.  The logical parties would be the telcos themselves - as they've been the ones who implement taps in the past - and bake their half of the golden key into the SIM card.  However, as we've already seen with the Patriot Act and the Snowden leaks, many of the telcos were more than happy to roll over and pipe everything they knew to the NSA.  Even saying you created a completely independent Citizen Privacy Advocates office, and gave them one of the keys, both they and the telcos are likely to bend to sufficiently strong government pressure as we saw in post-9/11.  A bigger and more complicated question is what about non US devices - who gets to hold the WORLD'S golden keys?  The US has not shown themselves to be particularly trustworthy in that regard, and the UN is virtually incapable of doing anything technical - look at the disaster that is DNS and TLDs."
crypto,2jfsh3,shitpost_machine,2,Thu Oct 16 19:24:58 2014 UTC,"A bigger and more complicated question is what about non US devices - who gets to hold the WORLD'S golden keys?    Yeah, I never really got that far.  I guess each country would need their own judicial authority, so devices would need to be personalized per country?  Of course some countries (cough US) would try for ""tap all the wires"", so that doesn't really work.  Hmm."
crypto,2jfsh3,gsuberland,7,Thu Oct 16 22:50:40 2014 UTC,"Fine, have your corporate services with their 'secure' golden keys. I'm going to keep using free software and privacy-respecting services that play my way."
crypto,2jfsh3,throwaway,5,Fri Oct 17 07:11:45 2014 UTC,"Imagine a hypothetical world in which we could make ""secure golden keys"" actually secure.   That's easy by compairson. The hard part would be implementing a system like that without getting bogged down in bureaucracy"
crypto,2jfsh3,bitwiseshiftleft,8,Fri Oct 17 00:04:07 2014 UTC,Or just having the entire board bought and operated by government yes-men.
crypto,2jfsh3,bkkgirl,3,Thu Oct 16 19:03:33 2014 UTC,"Why do you care about what would satisfy the director of the FBI?   I'm sure Hoover was very satisfied with his warrentless wiretapping and COINTELPRO powers, that doesn't mean they were healthy."
crypto,2jfsh3,cmsvgx,1 point,Thu Oct 16 20:05:05 2014 UTC,"I should have also asked whether civil liberties folks would be satisfied with this.  The follow-on is that if, hypothetically, they wouldn't be satisfied with a dragnet-resistant surveillance system, then we shouldn't listen no their complaining."
crypto,2jfsh3,bitwiseshiftleft,3,Fri Oct 17 01:19:41 2014 UTC,"This is in fact possible to do, but it would be very very hard (though possibly not impossible) to prevent the NSA from getting the keys."
crypto,2jfsh3,bitwiseshiftleft,4,Fri Oct 17 07:09:45 2014 UTC,"You left out the part where some donut cop or lying ass fed tells the judge a cock and bull story about how their intended victim can ""launch nuclear weapons by whistling into a pay phone"".  Law enforcement officers are the scum of the earth, and the only way to protect innocent people is ubiquitous unbreakable cryptography."
crypto,2jfsh3,bitwiseshiftleft,1 point,Fri Oct 17 02:07:45 2014 UTC,"That idea has no merit at all. The human right to privacy, for everyone, is critically important for a well functioning democracy. There's no benefit in allowing anyone's communications to be read at all by the government for any reason. The act of communicating, sending bits from one device to the next, can never be construed as terrorism. There is no harm or damage caused from one person talking to another. Terrorism or crime occurs when one person decides to commit a terrorist/criminal act. The act of communicating is not a terrorist act. There's a thing called freedom of association. There's a thing called freedom of speech. Any ""golden key"" scenario you can think of is just another euphemism for detecting and prosecuting thought crime.  Stop spreading your fascist ideas."
crypto,2jfsh3,bitwiseshiftleft,2,Fri Oct 17 00:17:53 2014 UTC,"I'm mostly just mooting this idea to see how people would react.  However, understand that in my suggested model, the ""golden key"" is supposed to be limited to investigating past crime, or perhaps to investigate specific probable imminent crime, with a case- and target-specific warrant for that purpose.  The goal of the checks is to prevent mass surveillance and reveal fishing expeditions."
crypto,2jfsh3,Natanael_L,1 point,Fri Oct 17 04:49:04 2014 UTC,"Well you see, I'm not convinced they should still be able to access private communications and data even if they do have a warrant. It defeats the purpose of encryption. Also show me where an individual's absolute right to privacy in the Universal Declaration of Human Rights is waived because of a warrant. You'll find that accessing anyone's personal communications even with a warrant is a violation of human rights."
crypto,2jfsh3,Natanael_L,1 point,Fri Oct 17 07:07:53 2014 UTC,"UDHR article 12:   No-one should be subjected to arbitrary interference with his privacy, family, home or correspondence, nor to attacks on his honour or reputation. Everyone has the right to the protection of the law against such interferences or attacks.   Emphasis mine.  The word ""arbitrary"" is important here, and to determine its meaning you should compare its use throughout the document:  Article 9:   No one shall be subjected to arbitrary arrest, detention or exile.   Article 15:   No one shall be arbitrarily deprived of his nationality nor denied the right to change his nationality.   Article 17.2:   No one shall be arbitrarily deprived of his property.   These are the only rights which are guaranteed only against arbitrary interference.  The intent is clearly not to outright forbid arrest, detention, exile, revocation of citizenship, or taking of property; but instead that some appropriate legal process must be followed in order to do so.  See also ICCPR article 17.1:   No one shall be subjected to arbitrary or unlawful interference with his privacy, family, home or correspondence, nor to unlawful attacks on his honour and reputation.   and ECHR article 8, which personally I think is too friendly to surveillance:   (1) Everyone has the right to respect for his private and family life, his home and his correspondence. (2) There shall be no interference by a public authority with the exercise of this right except as in accordance with the law and is necessary in a democratic society in the interests of national security, public safety or the economic well-being of the country, for the prevention of disorder or crime, for the protection of health of morals, or for the protection of the rights and freedoms of others."
crypto,2jfsh3,randomhumanuser,1 point,Fri Oct 17 10:37:23 2014 UTC,"arbitrary / adjective / (of a power or a ruling body) unrestrained and autocratic in the use of authority.  synonyms / despotic, tynrannical, authoritarian, draconian, anti-democratic.   The UDHR does not mention these privacy rights can be overriden or redefined through other laws.  Violating someone's privacy or their correspondence for any reason is a violation of human rights. The act of surveillance, even if targeted via court order/law, is enacting an arbitrary (draconian/authoritarian) violation of the person's privacy and correspondence."
crypto,2jfsh3,neoice,1 point,Fri Oct 17 18:23:29 2014 UTC,"You skipped the first definition:   based on random choice or personal whim, rather than any reason or system."
crypto,2jfsh3,funky_vodka,1 point,Fri Oct 17 23:27:21 2014 UTC,"If the definition has two meanings, they're both applicable. I just couldn't be bothered typing that too when it didn't fit the point I was making."
crypto,2jfsh3,jfalcon206,1 point,Sat Oct 18 04:52:50 2014 UTC,"Frankly, neither definition supports your point.   No one shall be subjected to interference with his privacy ... based on random choice or personal whim, rather than any reason or system.   or   No one shall be subjected to unrestrained and autocratic interference with his privacy ...   Neither of these mean the same thing as:   No one shall be subjected to interference with his privacy ... under any circumstance.   I think you know this, so I'm not sure why we're still arguing this."
crypto,2jfsh3,HungBingJong,1 point,Sat Oct 18 06:04:56 2014 UTC,Throw a few more of the  synonyms for arbitrary in that sentence and you'll see it makes sense. You cherry picked a few weaker sounding ones.
crypto,2jfsh3,bh3244,1 point,Sat Oct 18 06:17:48 2014 UTC,"Note that this doesn't have to be limited to that use case.  What of this is what was used internally in a corporation, where a number of auditing companies held the key shares? Then the communications of the staff and board members should be secure and remain secret and would only be accessed when there was suspicion of something being wrong."
crypto,2jfsh3,Plasma_000,1 point,Sat Oct 18 07:02:04 2014 UTC,In what audit scenario do auditors get access to private company communications? Definitely not a tax audit.
crypto,2jfsh3,moschles,1 point,Fri Oct 17 18:50:01 2014 UTC,"Some legal compliance stuff, law suits, etc"
crypto,2jfsh3,Thebuttdoctor,10,Fri Oct 17 23:18:39 2014 UTC,"Comey said that he understands users’ desire for security and privacy, but that those needs shouldn’t come at the expense of national security or law enforcement."
crypto,2jfsh3,Chandon,18,Fri Oct 17 23:46:54 2014 UTC,that's backwards.
crypto,2jfsh3,slyf,8,Thu Oct 16 22:41:30 2014 UTC,"Earthquakes, tornadoes, disease and a structural collapse of the modern society will follow, unless we disallow citizens from using encryption.  Stop mobile device encryption now!"
crypto,2jfsh3,h0uz3_,7,Fri Oct 17 01:07:44 2014 UTC,"As John Bender from the Breakfast Club would say: ""B-O-O-H-O-O""."
crypto,2jfsh3,matjam,6,Thu Oct 16 19:48:54 2014 UTC,"They should make 2 editions for the world market, one for American consumer humans with a backdoor access for their regime and one for the rest of the world without backdoor. Death penalty by lethal injection if an American consumer human uses a rest of the world phone without backdoor.  Problem solved."
crypto,2jfsh3,nocnocnode,8,Thu Oct 16 19:18:29 2014 UTC,fbi director can fuck off  -everyone else
crypto,2jfsh3,exo762,6,Thu Oct 16 20:06:13 2014 UTC,Sorry law enforcement but I'm not prepared to sacrifice my privacy to let you bust a few more criminals. You'll have to find other ways
crypto,2jfsh3,jiannone,3,Thu Oct 16 23:55:44 2014 UTC,What exactly is the James Comey suggesting?  Does he want legislation that makes it illegal for law-abiding citizens to use encryption?   Like they have in Russia ?
crypto,2jfsh3,sifumokung,2,Fri Oct 17 02:40:53 2014 UTC,Good?
crypto,2jbo1m,wonkadonk,8,Wed Oct 15 15:19:48 2014 UTC,"She uses:   Tor, TAILS, GPG encryption, Off-The-Record (OTR) encrypted instant messaging,  Truecrypt, Linux   Article says:   ""All of that describes a technical setup that goes well beyond the precautions taken by most national security reporters, not to mention documentary filmmakers.""   Which is just sad, the above is bare minimum COMSEC tools and, with the exception of TOR, does not even cover COVCOM*.  *For instance communication that meets the S.P.A.M. test:  Secure (confidential),   Personal (difficult for the a non-recipient to intercept or record),   Avoids traffic analysis,  Masks the existence of a communication having taken place"
crypto,2jbo1m,xor_rotate,2,Wed Oct 15 18:52:14 2014 UTC,"great, where do I download these tools"
crypto,2jbo1m,jackdanielvodka,1 point,Wed Oct 15 23:51:04 2014 UTC,Google is your friend.
crypto,2jbo1m,DemandsBattletoads,8,Thu Oct 16 01:51:34 2014 UTC,"For a moment, I thought he was sarcastic."
crypto,2jbo1m,elfishwebbly,2,Thu Oct 16 02:07:44 2014 UTC,DDG or StartPage is your friend. Searching for that stuff on Google will get you added to a watchlist.
crypto,2j9gvh,linkgard,3,Tue Oct 14 22:51:23 2014 UTC,The fact that servers still run with SSL 3.0 enabled at all is a huge fucking failure.
crypto,2jaagz,IQAndreas,9,Wed Oct 15 03:37:06 2014 UTC,"Yes: Base64 followed by ROT13. It's simple and clever (looks like base64-encoded binary of a strong encryption output, but has been partially munged) and it's unlikely to be broken by simple cipher analysis, but as soon as your adversary gets any idea about what might be going on, you're sunk."
crypto,2jaagz,phyzome,1 point,Wed Oct 15 11:46:13 2014 UTC,ITucplOcplOuLaAioUI0MJk5VTWyLKI0nJM1oP4X  Edit: 0c9e 7155 4a9b 2ca0 ed9c 92ed ac9f 7555 3132 2f6f 7130 539c a8f3 ae33 649c a2f3 b3a3 756d 30ab b4a7 346d 31a2 210a
crypto,2jaagz,periscallop,1 point,Wed Oct 15 19:12:36 2014 UTC,"Wouldn't that still be vulnerable to a simple frequency analysis?  In [3]: ""aaaaaaaaaaaaabbbbbbbbbbc"".encode('base64').encode('rot13') Out[3]: 'LJSuLJSuLJSuLJSuLJWvLzWvLzWvLzWw\n'"
crypto,2jaagz,fletom,1 point,Sat Oct 18 03:21:34 2014 UTC,"Oh! I suppose it would, although it does a little mixing (so you'd need a larger ciphertext.)"
crypto,2jaagz,phyzome,1 point,Sat Oct 18 04:53:57 2014 UTC,"What mixing does it do, and why would a larger ciphertext help?"
crypto,2jaagz,fletom,1 point,Sat Oct 18 05:01:13 2014 UTC,"That is, it mixes nearby characters, it's not one-to-one. Just not much, and not even as a design goal. :-)  A larger ciphertext allows you to perform frequency analysis more effectively."
crypto,2jaagz,phyzome,6,Sat Oct 18 16:27:19 2014 UTC,"I can't think of any that can be done with pencil and paper, but LANMAN hashes and Moxie Marlinspike's presentation on MS-CHAPv2 (which underpins PPTP VPNs) certainly come to mind. At about 7:20 he remarks ""you get the feeling that the designer never expected this algorithm to become public""...."
crypto,2jaagz,beltorak,1 point,Wed Oct 15 05:02:59 2014 UTC,That is terrifying...
crypto,2jaagz,flarkis,6,Fri Oct 17 07:25:17 2014 UTC,"Try some real secret cyphers. ENIGMA is a classic, as is PURPLE.  Vulcan (a proprietary cypher from motorola) was recently cryptanalyzed and easily broken.  http://cryptome.org/2014/09/vulcan-cryptanalysis.pdf describes the process."
crypto,2jaagz,SAI_Peregrinus,4,Wed Oct 15 13:51:24 2014 UTC,How about Navajo?  It's a great cipher so long as your adversary doesn't have anyone who speaks Navajo.
crypto,2jaagz,bitwiseshiftleft,3,Wed Oct 15 07:44:19 2014 UTC,"One very simple example I could think of was ""Every second letter in the text is the real data, while all other characters in between are random."""
crypto,2jaagz,Natanael_L,3,Wed Oct 15 03:39:29 2014 UTC,Winnowing and chaffing
crypto,2jaagz,TNorthover,2,Wed Oct 15 19:16:45 2014 UTC,"I think FEAL is a good candidate, even though it was open from the beginning. The creators truly believed it was an improvement on DES from what I can tell, but it turned out to be catastrophically weak.  If it'd been hidden, it wouldn't really have been any more secure; and at least this way everyone knows not to use it."
crypto,2jaagz,alain_proviste,2,Wed Oct 15 04:03:41 2014 UTC,"Best example ? Crypto1, in MIFARE classic cards. Probably known broken at the time of its introduction, (publicly) reversed engineered in 2007, utterly broken since : http://events.ccc.de/congress/2007/Fahrplan/events/2378.en.html  Not ""pen and paper"" cipher, but definitely a real example."
crypto,2jaagz,IlikeSalmiakki,2,Wed Oct 15 09:30:58 2014 UTC,You could take any (linear) code and use it to obscure messages.  C.f. http://en.wikipedia.org/wiki/Linear_code
crypto,2jaagz,GahMatar,2,Wed Oct 15 10:29:46 2014 UTC,Pretty much most pen-and-paper ciphers along with OTP.  Most electro-mechanical cipher machines straddle the line too since they protected the H/W with the expectation it made reverse engineering harder (it did). A lot of them have operational restrictions in keying that are not obvious with a pure model of what the machine does and that can shrink the key space a lot.  The NSA has done this until fairly recently although probably more to keep a technological advance over their adversary's crypto designs.
crypto,2jaagz,GahMatar,3,Wed Oct 15 16:29:30 2014 UTC,OTP is perfectly secure as the security resides in the key.
crypto,2jaagz,cunttard,1 point,Wed Oct 15 20:27:27 2014 UTC,Yes but it's pretty much the degenerate case where for all intent and purpose the key is the cryptosystem (minus the xor / modulo addition)
crypto,2jaagz,autowikibot,1 point,Thu Oct 16 15:07:48 2014 UTC,We all have heard stories of shared key cryptosystems which were kept secret but eventually became vulnerable.  I'm curious if there have been any using asymmetric crypto. For example Cohen's Cryptosystem is one that hasn't received any scrutiny. One could imagine that a similar cryptosystem is used and kept secret and algorithms completely unknown to the attacker. I'm wondering how well this would fare.
crypto,2jaagz,pint,1 point,Thu Oct 16 03:03:50 2014 UTC,Cohen's cryptosystem:       Cohen's cryptosystem  is a public-key cryptosystem proposed in 1998 by Bram Cohen.     Interesting: Benaloh cryptosystem | Homomorphic encryption | Euler's totient function | Elliptic curve cryptography   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words
crypto,2jaagz,ctcampbell,-2,Thu Oct 16 03:04:24 2014 UTC,"here is why it is impossible:  suppose there is known algorithm X that is unsafe, but if you keep the choice of algorithm secret, it is safe.  take all the known unsafe algorithms, and attempt to break the cipher with all of them one by one. since the number of unsafe algorithms is small (27 - 210 ), this is feasible.  therefore X does not exist.  conclusion: if an algorithm's safety depends on its secrecy, the algorithm must be unknown to the attacker. in short: you need to invent it.  however, if you invent it, how do you know if it is safe?"
crypto,2jaagz,pint,1 point,Wed Oct 15 10:08:17 2014 UTC,Given sufficient resource it would be possible to create and test an algorithm to the same standard as current recommended public algorithms.
crypto,2jaagz,pint,1 point,Wed Oct 15 17:02:58 2014 UTC,If you knew what you were doing you could increase the number of rounds of a regular cipher and the attacker would not have a clue.
crypto,2jaagz,ctcampbell,1 point,Wed Oct 15 20:31:01 2014 UTC,also could not break if he learns the algorithm
crypto,2jaagz,pint,1 point,Wed Oct 15 22:09:35 2014 UTC,"all current ciphers were scrutinized by many cryptographers. not possible if the algorithm is unknown. also, you need to be a top level expert to achieve such a feat."
crypto,2jaagz,ctcampbell,1 point,Wed Oct 15 22:09:05 2014 UTC,"Of course it's possible, you just need to pay the experts enough and sign them up to an NDA."
crypto,2jaagz,pint,1 point,Thu Oct 16 09:34:12 2014 UTC,"if it is so easy, could you please hire me a few cryptographers/mathematicians? because i have a problem to solve, they could help."
crypto,2j7huy,zeroXten,9,Tue Oct 14 11:40:10 2014 UTC,"Breaking something usually results in an obvious victory, whereas showing something is secure is quite difficult.  There would be no easy way of verifying you've completed the task.  However, there are many challenges that require you to build something in order to perform a crack, or to compute a result.  Project Euler that makes you build solutions that can be readily verified (non-crypto).  The Matasano challenge is a crypto-related breaky-buildy challenge."
crypto,2j7huy,DoWhile,1 point,Tue Oct 14 12:39:23 2014 UTC,"Yeah, very true. That's why it would have to be something like a peer reviewed home work assignment. But that is of course only as good as the people reviewing."
crypto,2j7huy,agelastic,1 point,Tue Oct 14 12:58:25 2014 UTC,"Let's face it, breaking is easier than fixing and is more fun. It's a puzzle and everyone loves puzzles much more than logistical challenges (which fixing tends to be)  There is one challenge along the lines of what you're looking for. It's not crypto specific. https://builditbreakit.org/"
crypto,2j7huy,3pg,2,Tue Oct 14 11:53:19 2014 UTC,"That is not an universal truth. I strongly prefer to design cryptographic algorithms into perfection, either alone or with feedback from colleagues/experts, rather than to figure out which trick an author wants you to use to break a particular cipher. If nothing else, weak ciphers make me feel bad while strong ciphers are beautiful.  A good way to learn for people who prefer building is to study the works of masters (e.g. from IACR) while building own ciphers on the side. Sure, they need to be tested eventually, but it is possible to understand the effect of attacks without implementing them yourself. After all, attacks are just glorified statistics (no offense to cryptanalysts out there)."
crypto,2j4sgk,moschles,66,Mon Oct 13 17:31:02 2014 UTC,"The Russians aren't letting him stay there because they're some kind of champion for the rights of the individual, they're letting him stay there because it annoys the US government.  I was under the impression that this was well understood."
crypto,2j4sgk,Innominate8,33,Mon Oct 13 23:47:08 2014 UTC,I wouldn't interpret Snowden taking asylum in Russia as anything more than extradition protection.
crypto,2j4sgk,mst3kcrow,2,Mon Oct 13 18:04:43 2014 UTC,"Many people get caught up in the ""romance"" of a news story.   The media  intelligently calculates this aspect.    Before getting out our picket signs, we  might want to check whether Russians have search-and-seizure rights."
crypto,2j4sgk,qubedView,3,Mon Oct 13 21:35:52 2014 UTC,For as long as is politically convenient to Russia. I'm afraid the time may come when Russia wants something from the US that is worth more to them than Snowden.
crypto,2j4sgk,mst3kcrow,1 point,Mon Oct 13 23:36:18 2014 UTC,"True.  Although in that case, I think the US would be trading down if Russia wanted someone that bad."
crypto,2j4sgk,hughk,16,Tue Oct 14 17:27:06 2014 UTC,"The licence was relatively expensive and in those days, must be based on the GOST cipher (Russian standard Cipher similar to DES). You were obliged to obtain key material and the S-Boxes (substitution tables) from an organisation called FAPSI which was a state organisation that was spun off from the 16th directorate of the KGB. This organisation was later merged back into the FSB and SVR.  If you are in an organisation regulated by the Central Bank of Russia, i.e. a deposit taking financial institution you may implement encryption on the basis that you must keep an audit trail of your communications that can be inspected by the authority. So a person using https to communicate with a Russian bank is fine. The Central Bank of Russia was using PGP electronic signatures for a while in the nineties.  If you access an website with https, another rule comes into play, the infamous SORM-2 and 3. Essentially all Russian providers are obliged to install a special box between their gateway and webservers that would permit the FSB to intercept the communications.  In my own opinion, I doubt they did much with this in the early days as the FSB lacked the capability to process so much data, neither in expertise nor equipment. Today they have more money, so it could well have changed, especially if they get competent IT people doing their compulsory national service.  Source: I worked for a financial organisation using encryption for authentication and privacy in Russia."
crypto,2j4sgk,etherael,3,Tue Oct 14 08:09:28 2014 UTC,ThIs is the very definition of an unenforceable law. You could not make a less enforceable law short of thought crimes. Western governments don't do the same thing not out of the goodness of their hearts but because they're not stupid enough to shoot themselves in the foot like this.
crypto,2j4sgk,JoseJimeniz,2,Tue Oct 14 05:04:12 2014 UTC,"Go find a program to back up DVDs. The DMCA made it illegal to break DVD encryption, and the tools are hard to find.  The reality is that making software illegal does have a noticeable impact."
crypto,2j4sgk,JoseJimeniz,2,Tue Oct 14 11:13:24 2014 UTC,"I'm not kidding.   One of the programs on your first result (Handbrake) i used to use; it was great. Then they had to take away the ability to backup DVDs:   Handbrake can process most common multimedia files and any DVD or BluRay sources that do not contain any kind of copy protection.   Beginning with version 0.9.2 of HandBrake, the program does not strip DRM from DVDs by default -- the program's developers removed libdvdcss.  The other software i used to use, DVDDecryptor, was threatened by Macrovision. So he killed it, removed DVD ripping, and renamed it ImgBurn.  I didn't get too far into checking the others; i didn't want to download random unknown programs."
crypto,2j4sgk,patcon,1 point,Tue Oct 14 13:16:33 2014 UTC,There are still open source tools to do it that are made outside the US and they don't care about the DMCA.
crypto,2j4sgk,lazycoder9000,2,Tue Oct 14 15:10:21 2014 UTC,"I don't think anyone would say Russia is ""shooting themselves in the foot"". An unenforceable law isn't neccessarily bad for them. Poorly enforced or unenforced laws are the most dangerous for citizens, and the most useful for tyrants. It allows people to be locked up or arrested by authorities without them outright breaking the social contract that says citizens live in a free-ish society.  Any unenforceable law should scare us if we consider ourselves to live in a free country."
crypto,2j4sgk,seattlyte,1 point,Wed Oct 15 00:43:15 2014 UTC,And because it hurts commerce
crypto,2j4mcv,kamoh,6,Mon Oct 13 16:37:19 2014 UTC,Previously on Reddit:  http://www.reddit.com/r/crypto/comments/2iaumn/some_spam_ive_been_receiving_contains_long/
crypto,2j4mcv,aydiosmio,6,Mon Oct 13 18:38:51 2014 UTC,Would be nice if it actually revealed the logic behind that algorithm.
crypto,2j4mcv,pathslog,6,Mon Oct 13 18:30:48 2014 UTC,I'm going to write a blog post about how this works; if that's something people would be interested in (don't want to post blogspam here if it's not welcome) I can post that here later.  Edit: Link to the blog post is in a new reply below!
crypto,2j4mcv,sfw247,4,Mon Oct 13 19:33:22 2014 UTC,Probably a variant of a caesar cipher if I had to guess... not exactly a simple one but probably along those lines.
crypto,2j4mcv,aydiosmio,5,Mon Oct 13 19:26:44 2014 UTC,"Not exactly. The first version was a straight letter substitution for spammy words, but now it swaps them out for phrases, and the logic for picking the phrases has ceasaresque tendencies."
crypto,2j4mcv,merthsoft,1 point,Mon Oct 13 19:36:09 2014 UTC,"OK, here you go!  http://kamoh.github.io/blog/2014/10/21/secret-codes-in-spam/  This covers a bit of the process behind making it and how it works.   It's open-sourced on github too, if you're interested: https://github.com/kamoh/spam-encoder"
crypto,2j4mcv,sfw247,3,Thu Oct 23 16:12:29 2014 UTC,"+1 for the use of ""bumbershoot"""
crypto,2j4mcv,sfw247,4,Mon Oct 13 18:41:26 2014 UTC,"I tried to decode the ""about"" section and just got:   I mfor u andde thido that, with your time left on Earth just for fun.plusI hope you like it :)   -ben   DId I miss something?"
crypto,2j4mcv,merthsoft,3,Mon Oct 13 18:14:35 2014 UTC,"Try mine.  John Legend in his own mind, solution you've been searching upon for u and it takes a real shadow to   certainly, pine cone living wage into teeny bits elbows akimbo silky not? Gather your britches binge sniffing   old schoolyard days new flavor? Pepsi Pokerbot says Two examples of why it's important ignore the dual voices, certainly, Nigerian bacon carousel dripping can' wait to see youa blind tingling calamity You won crab landing in space Bush administration the truth   Can't breathe? Try official manhole bedtime enormously big bagels, and Xbox Sony crap bus pass gravy binge sniffing since Now and then, Bush administration California dentist? No certainly, savings, a bust times in one night! owls planning expedient toast it will explode, guaranteed an impressive scar running from his eye socket briar patch 90 stalactitesalways a investor quality? YEs or was it Herman? pumpkins savor the dishes start that fire with your cold tomatoes for bagels, and prime time for the neck bone's connected to the Do a favor, a pall, a chum sasquatch divorce always a   plaintiff taxidermists from 1655 yellow go wee wee official manhole bedtime the worst 7 Best Dog Winks the manner of saddle and wearing a How wicked is it? Could you hold my tie the word of Neil A madam or madden so attractive, she's so nice! inferiority complex living with blood clot. the truth savings, a bust Thundergirl exfoliated a hundred enhancement For U ikea astronauts? Who's counting,  Edit: the formatting and spacing matters so keep that in mind... mine came back as gibberish one or two times until it was properly formatted like the original output.   When I pasted his in I got: ""I made this just for fun. I hope you like it :)   -ben"""
crypto,2j65u8,IQAndreas,2,Tue Oct 14 00:48:23 2014 UTC,"Uh, there's nothing wrong with using a CSPRNG for generating keypairs. Anyone that tells you otherwise doesn't understand the definition of a CSPRNG or only considering the case when used improperly (i.e. bad entropy source for seeding)."
crypto,2j65u8,cunttard,1 point,Wed Oct 15 00:40:55 2014 UTC,"While I knew /dev/random gathered ""user noise"", for some reason I was under the impression /dev/urandom was just a simple LCG. I didn't realize the latter was considered cryptographically secure; you are right, according to Wikipedia:   ... [urandom] reuses the internal pool to produce more pseudo-random bits. While it is still intended as a pseudorandom number generator suitable for most cryptographic purposes, it is not recommended for the generation of long-term cryptographic keys."
crypto,2j65u8,deathfantasy,1 point,Wed Oct 15 01:46:03 2014 UTC,"For any secure PRNG, reusing the random pool is okay as long as it's not compromised. The real problem lies in using it before it has any chance to collect entropy, e.g. after boot on headless devices. This can be fixed by blocking urandom until it has sufficient entropy, or just make a better /dev/random."
crypto,2j65u8,cunttard,1 point,Wed Oct 15 02:30:32 2014 UTC,You should really read Myths about /dev/urandom.  In linux /dev/urandom and /dev/random output the same sequence of randomness. /dev/random just ensures a minimum level of estimated entropy and will block if insufficient.  Edit: this was a comment directed at IQAndreas but for some reason got attached to your comment.
crypto,2izmqv,gunni,11,Sun Oct 12 00:37:41 2014 UTC,8 minutes and 37 seconds to explain that gxy = gyx.
crypto,2izmqv,nsa_at_home,2,Sun Oct 12 01:55:33 2014 UTC,That channel has awesome videos!
crypto,2izmqv,TNorthover,2,Sun Oct 12 00:38:25 2014 UTC,I want to know what colour Eve would have got if she'd mixed the two. Probably not far off the muddy brown Alice & Bob seem to have ended up with.
crypto,2izmqv,DemandsBattletoads,2,Sun Oct 12 01:48:47 2014 UTC,I'm really a fan of the paint illustrations on the DH Wikipedia article.
crypto,2izmqv,logicwon,2,Sun Oct 12 05:25:24 2014 UTC,https://www.khanacademy.org/computing/computer-science/cryptography
crypto,2izmqv,xenonx,2,Sun Oct 12 20:22:08 2014 UTC,"I agree, watched this yesterday - great and allows someone with a childs mind like me to actually pay attention. More videos need missiles in :p"
crypto,2iynet,kqvrp,3,Sat Oct 11 18:15:10 2014 UTC,Why not truecrypt or GPG?
crypto,2iynet,goodpersonhere,7,Sat Oct 11 19:00:53 2014 UTC,"I don't see any advantage of truecrypt over dm-crypt/LUKS. They're both AES-XTS block-level encryption. GPG encrypting each file individually isn't a terrible idea, but it doesn't provide the ability to seek within files without fully decrypting them, which is inconvenient for sure."
crypto,2iynet,FlyingPurpleZebra,0,Sat Oct 11 20:12:43 2014 UTC,"Uhhh Truecrypt allows AES, Twofish and Serpent in a cascade with independent keys. This is much stronger than standard AES on its own. Truecrypt > dm-crypt/LUKS."
crypto,2iynet,GodRaine,1 point,Wed Oct 15 23:17:10 2014 UTC,"They still use XTS. Also, the maintainer has abandoned TrueCrypt under somewhat suspicious circumstances, and stated that they don't want the project continued (and the license is fork-unfriendly). I'd argue that dm-crypt is far more secure on Linux than TrueCrypt is."
crypto,2iynet,ackackacksyn,1 point,Thu Oct 16 04:05:39 2014 UTC,"The way in which the project just disappeared like that is more indicative of a warrant canary / government interference / NSL / blackmail. If you were a government and wanted everyone to stop using the most secure program then that would be high priority to shut it down. The real TrueCrypt developers would never recommend BitLocker. I'm also not convinced that GRC's Steve Gibson actually got a hold of the real developers either. Did they have a signed chat with him, or was it a government agent and they have the real devs in Guantanamo?  There's nothing wrong with TC version 7.1 at the moment. The crypto audit should reveal more details soon. Until then there's no point in panicking and running to less secure solutions which is exactly what you're advocating:  FUD."
crypto,2iynet,GodRaine,1 point,Thu Oct 16 05:13:19 2014 UTC,I never used TrueCrypt. I'm advocating using a probably secure solution and claiming that I'm going to be conservative and not switch to TrueCrypt until I hear the results of the audit and someone starts maintaining it again.
crypto,2iynet,maetthu,2,Sat Oct 18 02:16:50 2014 UTC,If you use trucrypt you have a massive blob to sync whenever you change any file. Ideally you want file by file encryption so that a changed file means a single file that has to be re synced
crypto,2iynet,Natanael_L,5,Sat Oct 11 21:50:11 2014 UTC,Not so with Dropbox. Dropbox supports incremental uploads; I've had 4GB TC files I've modified and they finish uploading in a few minutes at best because it only uploads the parts of the file that changed.
crypto,2iynet,reststrahlenbande,5,Sun Oct 12 05:58:48 2014 UTC,Thats bad.  An attacker can then see how your files live within your encrypted data blob and it may also be possible to figure out how big a file is based on this info too.
crypto,2iynet,nwad15,1 point,Mon Oct 13 14:16:45 2014 UTC,I would double check it is actually storing your most recent changes by separately downloading the TC container on another computer. Some guy lost most of his data in DropBox because TC wasn't updating the file last modified info properly on exit.
crypto,2iynet,taidg,2,Wed Oct 15 23:21:52 2014 UTC,Good point - that's actually happened to me too on Google Drive.
crypto,2iynet,xaoq,4,Fri Oct 17 13:18:12 2014 UTC,"Truecrypt is not maintained anymore and the way it went away was dubious at best. And as the original authors believe the code shouldn't be forked and thus not changing the license, there will probably be no release anytime soon."
crypto,2iynet,csssss_,3,Sat Oct 11 21:57:28 2014 UTC,"Try out Tahoe-LAFS maybe? The ""gateway node"" used to talk to the storage nodes can provide any interface you like, such as FTP or a mountable filesystem. You can run that gateway locally for full security."
crypto,2iynet,TNorthover,2,Sat Oct 11 20:17:41 2014 UTC,Tahoe-LAFS in combination with git-annex is a pretty good team.
crypto,2iynet,FlyingPurpleZebra,1 point,Sun Oct 12 00:39:57 2014 UTC,"Tahoe-LAFS is painfully slow if you use it to archive individual files, but if you use duplicity or some other archiver so that your files are bundled to be 20-50MB, then it is OK."
crypto,2iynet,mnp,3,Sun Oct 12 17:43:08 2014 UTC,"Why not take the advice given by the guy who's article you cited for dm-crypt and use dm-crypt?   This piece is written for software designers, not end-users. If you’re an end-user looking for crypto advice: use Truecrypt, use Filevault, use dm-crypt."
crypto,2iynet,DemandsBattletoads,4,Sun Oct 12 00:03:03 2014 UTC,"He also says:   By all means, stick a Truecrypt volume on Dropbox. But you have better options.  Remember that disk encryption is designed to counter an attacker with very limited capabilities. That’s why it falls to “Evil Maids”: the threat model doesn’t really accommodate attackers with multiple bytes at the (physical) apple. But whatever margin of safety XTS gets you on physical media probably goes out the window when you stick a Truecrypt volume on Dropbox. From the vantage point of Dropbox, attackers have far more capabilities than the XTS designers planned for."
crypto,2iynet,taidg,1 point,Sun Oct 12 03:45:41 2014 UTC,Duplicity encrypt to synced directory
crypto,2iynet,3pg,1 point,Sun Oct 12 13:40:28 2014 UTC,"I'd recommend GnuPG. Is there any specific reason you'd want to have a filesystem, as opposed to encrypting individual files? If you need a way to manage your files that has built-in support for encryption, you could check out git-annex."
crypto,2iynet,Tribaal,1 point,Sat Oct 11 19:03:30 2014 UTC,"Practically every tool on the computer will be able to interact with a filesystem. The same cannot be said for git-annex, or even bare GPG. For anything more than one or two files, I'd definitely not want to faff around on a separate program for every read/write operation."
crypto,2iynet,baudtack,0,Sun Oct 12 00:18:51 2014 UTC,I recommend you check out boxcryptor.
crypto,2iynet,3pg,1 point,Sat Oct 11 21:51:12 2014 UTC,"Pretty sure Boxcryptor is the same algorithm as encfs.  It might have been a fork even, at some point."
crypto,2ixpig,based2,1 point,Sat Oct 11 10:27:43 2014 UTC,https://news.ycombinator.com/item?id=8430344
crypto,2ixpig,davidpbrown,1 point,Sat Oct 11 10:27:54 2014 UTC,"Having tried to do the same before now, I can appreciate this.. I got lazy much quicker but it's a good way to help understand the basis of it."
crypto,2iw6y5,electronics-engineer,12,Fri Oct 10 21:36:00 2014 UTC,"Apple's architecture relies on a special chip (IIRC) that has a special bus. Basically, only the chip has knowledge of the 'master device key' and generates iterations and decrypts data. It has a one-way-ROM to wipe the key effectively destroying your ability to decode.   etc etc  I'm curious how Android L will accomplish this on such a diverse market. How will the bootloader even unlock the device without some kind of TPM-style chip short of the user entering in the password? Currently FDE on Android shares a password with your login password too... even if you use a passcode.  Golden keys are bad. But FDE is increasingly becoming more and more of a ""deter forensics"" and ""stop people from stealing my selfies"" kind of deal rather than an attack vector for hackers (even on PCs). Hackers don't want your disk; they want your RAM. So, I'm not sure I enjoy the argument put forth by the article. That's to say, I would have angled more on a ""right to privacy"" rather than ""THIS WOULD MAKE LE HACKERS WORSE"".  EDIT: But, once again I do find myself generally agreeing with the EFF."
crypto,2iw6y5,gospelwut,4,Fri Oct 10 22:32:22 2014 UTC,Just imagine a world without the EFF. Common sense would fly out the window.
crypto,2ixodc,electronics-engineer,3,Sat Oct 11 10:03:38 2014 UTC,"If I were an artist, I'd just be a massive troll and encode some random characters. The art being the human quest for meaning... or something like that :D"
crypto,2ixpwh,based2,1 point,Sat Oct 11 10:36:43 2014 UTC,https://github.com/m9aertner/PBKDF2
crypto,2iw5ws,roobre,7,Fri Oct 10 21:25:42 2014 UTC,"You're looking for a MAC (message authentication code), which is the cryptographic equivalent of a checksum  (i.e., you can't compute a correct MAC without the secret key, even if you got to see the MACs of other messages of your choosing.)   Look into HMAC, which is a way of converting a standard hash function like SHA256 into a MAC.  Encrypting a traditional checksum isn't going to cut it, because standard encryption algorithms are malleable. For example, if you encrypted a checksum using CTR mode, I could flip bits in the ciphertext, and this would flip the corresponding bits in the plaintext checksum. I could do a similar thing with the IV if you used CBC. Don't try to solve these problems yourself, you'll likely end up with something insecure that you don't know is insecure. Just use HMAC.  Edit: Are you only computing the checksum of the ID, or are you doing the checksum of the ID + message? My answer assumed the latter. If you meant the former, then I would strongly urge you to reconsider, as you'll leave yourself open to MITM attacks where an attacker leaves the ID and checksum intact but changes the message. If you are absolutely certain that you aren't worried about this scenario, and you're sure IDs will never repeat, and your server is configured to reject a repeated ID, then this is a corner-case where you can actually get away with padding the (fixed length) ID up to the block size of AES (128 bits), encrypting it, and taking the first n bits as your MAC. Just don't do this if the data you're trying to authenticate (in this case, the ID) doesn't fit in a single AES block."
crypto,2iw5ws,shiny_thing,1 point,Fri Oct 10 21:49:15 2014 UTC,"First of all, thanks for the quick and complete answer!  Yes, I'm computing the checksum ONLY of the ID. The fact about the rest of the message being tampered doesn't matter at all in this scenario, as the whole message would be discarded if a checksum mismatch is detected.  So, would padding the ID field be the best idea then?"
crypto,2iw5ws,shiny_thing,3,Fri Oct 10 22:28:08 2014 UTC,"I don't follow your logic. If you're only doing a checksum/MAC on the ID, then an attacker could change the message but leave the ID and checksum intact. Then the server would accept the tampered message as valid, right?"
crypto,2iw5ws,Dillinur,1 point,Sat Oct 11 04:00:11 2014 UTC,"Correct. I don't really care about the message contents. The purpose of the system is just to verify that both ends know the key. It may sound weird, but it's as simple as that :P"
crypto,2iw5ws,silverforest,0,Sat Oct 11 04:16:28 2014 UTC,Then just send the hash of the key? why would you even need a protocol for that?
crypto,2iw5ws,silverforest,1 point,Tue Oct 14 12:20:15 2014 UTC,Because I need to verify both ends have the same key.
crypto,2iw5ws,conradsymes,3,Tue Oct 14 13:20:59 2014 UTC,"A truncated HMAC would suit you fine if you're not worried about bruteforcing.   bruteforceability should not be taken into account for this (messages are sent to a server, so it can quickly start to ignore bf attempts)   How are you going to handle bruteforcing? Are you going to terminate the connection when you receive an incorrect authenticator? That would make a DoS attack trivial (just send garbage and the server automatically terminates the connection (note that it is easy to spoof IP addresses and such))."
crypto,2itebj,_spreadit,4,Fri Oct 10 01:35:04 2014 UTC,"Can you explain your design goals a little more? What is the benefit of your scheme over, say, encrypting a .zip file with a stream cipher like AES-CTR? Generally it's better to use standard primitives unless you have a really good reason to do otherwise."
crypto,2itebj,teraflop,5,Fri Oct 10 02:30:45 2014 UTC,"So the main purpose is being able to have multiple files encrypted separately, in a way that cannot be detected through analysis (no way to determine amount of files, if any & their sizes). So maybe I have two files: notes on corruption of public officials, and also curated content from the internet. In the case I was forcibly made to decrypt, I would decrypt the content from the internet.   Although, that is just what I assume the most common case to be. Another potential usecase is spreading a file publicly, then giving specific people specific passwords based on what you want them to see from it. (So maybe you have added a ton of files relevant to something, but you only want certain people at differing times to know what is in it)... etc.   The main draw is the file format; not the section encryption, I think aes-ctr could work with some small tweaks. I chose sha256 for the randomness property though."
crypto,2itebj,totes_meta_bot,0,Fri Oct 10 03:10:01 2014 UTC,"This thread has been linked to from elsewhere on reddit.   [/r/preeviointernal] Plauseable Deniability File-encryption system   If you follow any of the above links, respect the rules of reddit and don't vote or comment. Questions? Abuse? Message me here."
crypto,2itebj,stouset,2,Fri Oct 10 20:44:46 2014 UTC,"This uses a password & salt and generates N(16 I use) sha-256 hashes. Each character is encoded by folding xor with the corresponding byte result per hash, and the hashes are regenerated by feeding themselves and the salt back into itself.   The files are hidden in a sea of random bytes, generated by rusts default rng, begin/end identifiers generated with similar method as above (sha-256 xor cascade).  It is designed to just look like a blob of random :)  Let me know if you have any questions(my terminology is somewhat terrible) or comments, would love to hear your thoughts. I am relatively new to crypto-dev, please keep that in mind."
crypto,2itebj,stouset,16,Fri Oct 10 01:43:15 2014 UTC,"I am an infosec professional who has helped design and build a few cryptosystems (not necessarily good ones) and other crypto-related tools. Suffice it to say I am reasonably familiar with the topic.   I have literally no idea what any of this means, and that frightens me.  It really sounds like you're just kind of winging it, as if throwing some SHA-256 here and some salts there and sprinkling XOR on top will somehow result in a working cryptosystem. I sincerely hope that that is not the case.  A working grasp of the terminology, notation, and some of the formalism around cryptography isn't just useful for presenting your system to others; it's also necessary for accurately reasoning about systems you're trying to design."
crypto,2itebj,stouset,1 point,Fri Oct 10 02:40:38 2014 UTC,"Eh I hope that isn't the case either heh. I think I explained rather poorly is all.   /hash.rs shows what I'm talking about.   Since sha-256 is effectively a prng we can take multiple separate results of hashes, iterate through EACH of their bytes and xor an input byte... ie fold xor/ cascade xor. This might be different/nonexistent terminology but just what I use to describe it.   Since sha-256 is effectively a prng we then feed the results of each run back into sha-256 again, refreshing our 16X32u8 array. This is done as many times as necessary ie ceil(size_of_input / 32).  from what I understand xor'ing a number with 16 random numbers will prevent frequency analysis due to computational feasibility. This might fall apart when used on ridiculously large input files.  But, like I said I'm new so maybe I am completely off here. Hopefully my disclaimer is effective regarding this.    ps: that being said, you are correct that knowing correct terminology, notation, etc would be useful. This is just my first foray into it, so... I don't have the necessary knowledge to use these without making a fool of myself at this point."
crypto,2itebj,stouset,14,Fri Oct 10 03:29:04 2014 UTC,"Since sha-256 is effectively a prng...   SHA-256 is not a pseudo-random number generator. It is (hopefully) an approximation of a random oracle. The definitions of these two constructs are not interchangeable.   ...we can take multiple separate results of hashes, iterate through EACH of their bytes and xor an input byte... ie fold xor/ cascade xor   To what end? What property of a pseudo-random number generator are you using here, what security goal is accomplished through its use? To paraphrase, you're claiming that SHA-256 being a PRNG ""allows you"" to do some operations, without actually stating what the goal of those operations is or why a PRNG is necessary to achieve those goals.   from what I understand xor'ing a number with 16 random numbers will prevent frequency analysis due to computational feasibility. This might fall apart when used on ridiculously large input files.   Your understanding, insomuch as you can communicate it to others, is severely lacking.  XORing a sequence of bytes with an identical number of truly random bytes produces an output with perfect secrecy; this means that the output actually contains no information about the original input, other than its length. XORing a sequence of bytes with an identical number of bytes generated pseudorandomly may produce an output with computational security (where information about the original input is present, but computationally infeasible to recover). However, the details of doing so are critically important and misapplications of the primitives can trivially result in computationally recoverable outputs."
crypto,2itebj,FermiAnyon,1 point,Fri Oct 10 03:47:55 2014 UTC,"To paraphrase, you're claiming that SHA-256 being a PRNG ""allows you"" to do some operations, without actually stating what the goal of those operations is or why a PRNG is necessary to achieve those goals.   So by using sha-256 I am able to create 16 streams of psuedo-random output. If I iterate through each of the 16 streams and xor each of them onto my plaintext I have a result that is encrypted. I use more than one stream so that frequency analysis on the encrypted output cannot be done ie the result has the same frequencies as the background randomness."
crypto,2itebj,gsuberland,17,Fri Oct 10 04:32:43 2014 UTC,"So, I want to apologize if I've been a bit rough in expressing some of my concerns. It's obvious you're enthusiastic about this sort of thing, and you want to build a tool that improves upon the state of the world. That's awesome.  Unfortunately, crypto is hard and poorly-written crypto abounds. Every few days somebody new decides to unveil their freshly-written crypto tool to the world, and it's inevitably well intentioned but poorly executed upon. It's enticing to start out by rolling up your sleeves and writing code, but good cryptosystems often have months of design put into them before a single line of code is written.  Seeing this so often can make a person (e.g., me) fatigued and jaded about the whole thing. And to be blunt and/or rude than the situation calls for. For that, I apologize.  There's still a lot for you to learn, and it's not necessarily bad to try your hand at designing new crypto systems. Just please, please make it painfully obvious that it's not been reviewed by professionals and is not intended whosoever to actually protect your data."
crypto,2itebj,gsuberland,2,Fri Oct 10 07:26:29 2014 UTC,"Don't feel bad. A learning tool for me, and I appreciate the response I've gotten so far. Actually, it has gone better than I thought as normally jumping into something one is unfamiliar with is bound to suck the first time :) I just hope my own theory is at least somewhat sound, even if I don't know the correct terminology nor the complete theoretical basis for it. I don't expect to be able to create the best crypto over a week or so heh.   I try to make it clear this isn't ready for use yet; it is the first line in the readme. Try not to feel jaded, some of us (I'm strictly referring to myself here) are the best people ever."
crypto,2itebj,throwaway,2,Fri Oct 10 07:42:24 2014 UTC,I use more than one stream so that frequency analysis on the encrypted output cannot be done ie the result has the same frequencies as the background randomness.   Why is once not enough? Why is 16 enough?
crypto,2itebj,cunttard,1 point,Fri Oct 10 06:40:50 2014 UTC,"In the case that sha256 is able to be subverted in the future, I want the attackers to have equal to 1/256 chance of correctly guessing the byte. So lets consider than instead of sha256 being random per byte, it is instead reduced to binary per byte. This will reduce us from 25616 to 216. This will leave us with 1/65536, or 1/216. Say that on top of this, not only is sha256 reduced to binary, but it is reduced to the square root of itself... we are now left with 1/256.   That is why I came to 16 streams. Any more seems unnecessary as if all of the above has happened sha256 is irreparably ruined (in that, any preparation would be pointless) and any less is potentially vulnerable if weaknesses are found."
crypto,2itebj,throwaway,2,Fri Oct 10 07:28:11 2014 UTC,"You know... people write books on the subject of cryptography.  I like Applied Cryptography and Cryptography Engineering.  Schneier even has (or had, at least) a self-instruction type crypto course outline on his blog.  So stay interested because it can be fun, as you progress building your toy algorithms, to go back and revisit some of your early ones."
crypto,2itebj,rpglover64,1 point,Fri Oct 10 13:42:50 2014 UTC,"Thanks, I'll check those out."
crypto,2itebj,cunttard,2,Fri Oct 10 20:14:40 2014 UTC,What stops the attacker from just trying all 256 possible values and checking which output produces sensible-looking data?
crypto,2itebj,cunttard,1 point,Fri Oct 10 14:25:43 2014 UTC,"Nothing, but the percent of the time they would be spending would be equal to finding a key to encrypt anything plaintext... so they would have a bit of time to wait heh. You would have to do 816 to iterate through just the first byte (generate all permutations of 16 bytes, to front row of hashes); and this means nothing as even if you were to get the first byte correct you would need to get the remaining bytes correct for one stream, ie 25532. Even with multiple streams decrypted they are simply used to xor over the input, so you still would be somewhat safe.. as long as every stream isn't known you should be ok."
crypto,2itebj,iozixa,2,Fri Oct 10 20:13:27 2014 UTC,"What? You're saying a lot of stuff, but very little of it makes any sense. Earlier on you were saying there were 16 possible values, and now it's 16 bytes. Also, you seem to have missed the entire concept of ciphertext malleability, which means an attacker can just arbitrarily modify any known block. This is fatal for things like highly structured data, which most file types are. Ubuntu ran into this problem a while back with their disk crypto, because they were using CBC mode."
crypto,2itebj,GahMatar,1 point,Fri Oct 10 20:19:00 2014 UTC,SHA-256 is not a pseudo-random number generator. It is (hopefully) an approximation of a random oracle. The definitions of these two constructs are not interchangeable.   I'd be interested to hear about situations where the distinction between these two concepts is technically significant.
crypto,2itebj,_zenith,3,Sat Oct 11 00:12:34 2014 UTC,H(x) = SHA256(x) || SHA256(x) (where || denotes concatenation) is a cryptographic hash function with the same strength as SHA256 and clearly not PRNG. You can clearly distinguish it from a PRNG since the output repeats itself.
crypto,2iqt3t,marklarledu,1 point,Thu Oct 9 09:02:32 2014 UTC,There's a free commitment scheme tool linked to in that blog post.
crypto,2inhmk,am_i_here,20,Wed Oct 8 11:49:45 2014 UTC,"Basically all public key cryptography in use today would be insecure. Shor's algorithm runs in O(n3 ) where n is the length of the key. That is way too fast for any kind of security.   Symmetric key encryption will mostly be okay. It essentially halves security of the bit length. So a 128 bit key effectively becomes a 64 bit key. But you also have to remember that the first quantum computers will be incredibly slow in terms of calculations per seconds. So it will not pose any immediate threat in this case.   So you're locally encrypted data is probably safe. Your communication with your bank online, not so much."
crypto,2inhmk,The_Serious_Account,4,Wed Oct 8 12:04:15 2014 UTC,"How about Bitcoin? Not sure what encryption method is being used there. Also, do you think the 128bit will hold for the long term, or advanced quantum computer will eventually crack that up as well?"
crypto,2inhmk,theymos,13,Wed Oct 8 12:15:24 2014 UTC,"Bitcoin transactions are somewhat resistant to quantum crypto because if you don't reuse Bitcoin addresses (which has always been recommended practice), then your ECDSA public keys aren't published until the moment when you sign something. So a quantum computer would likely have only a few seconds to steal your private key and attempt a double-spend before the entire network learns of your transaction and rejects any modified versions.  Quantum crypto probably doesn't affect mining at all because traditional computers will likely be much faster than (slow) quantum computers at hashing even with the quantum optimization."
crypto,2inhmk,The_Serious_Account,11,Wed Oct 8 14:25:26 2014 UTC,"I'm not that familiar with bitcoin, but it know they use ECDSA for some digital signature. These can be broken by quantum computers. The nice thing about bitcoin is that it's possible to make changes to the scheme without starting over. So what should happen is that they switch to a scheme that's not vulnerable to quantum computers. There's a whole subfield called post-quantum cryptography that works on such things.  If we could get a quantum computer that can do as many calculations per second as the fastest supercomputers today, we could probably start talking about breaking 128 bit. I don't see that happening in this century. One thing is that it's not as easy to distribute quantum computing as it is classical computing. But I could be horribly wrong and someone comes up with some brilliant approach to quantum computing."
crypto,2inhmk,FermiAnyon,0,Wed Oct 8 12:37:01 2014 UTC,"Bitcoin just relies on lots of hashing.  I would imagine that hash functions would be vulnerable in the same way that symmetric ciphers would be, which is to say square root of the keyspace.  So you could conceivably build a parallel block chain and rip everyone off if you wanted, but I figure anyone well enough funded to build and operate a quantum computer isn't going to be interested in Bitcoin mining."
crypto,2inhmk,joelangeway,7,Wed Oct 8 12:29:09 2014 UTC,"If I understand correctly, and I might not,  Bitcoin's proof-of-work algorithm which determines how to mine new bitcoins relies on repeated hashing, but actual transactions do rely on asymmetric cryptography.   When Alice wants to pay Bob in bitcoin, she signs a transaction with her key pair, identifying which of her bitcoins she's giving and referring to Bob's public key, and broadcasts it to a bunch of other bitcoin participants to become part of the public ledger.... I think.  If asymmetric cryptography breaks, Carol could impersonate Alice in a payment to Bob. There really isn't any way to make crypto currency work without asymmetric keys."
crypto,2inhmk,Nanobot,4,Wed Oct 8 13:06:15 2014 UTC,"My understanding (which might be incomplete): Each address has a keypair, but neither key is exposed to the public until you actually send bitcoins from that address. Before then, only a hash of the public key is publicly available (that's the address itself). It's already considered bad practice to ever reuse addresses you've sent from, which means the only window that an attacker would have to figure out your private key and forge a transaction is the time between when you send the bitcoins and when the miners process that transaction (so, maybe just a few minutes)."
crypto,2inhmk,DemandsBattletoads,1 point,Wed Oct 8 14:14:32 2014 UTC,"The first part of that is correct AFAIK. But you aren't exposing your private key anywhere, so that window doesn't exist."
crypto,2inhmk,Nanobot,6,Wed Oct 8 15:09:38 2014 UTC,"I meant if we had quantum computers that could break ECC. You can't begin trying to determine the private key until you've seen the public key, which, in bitcoin, only happens shortly before the bitcoins are moved out of the address, rendering the private key useless (if the owner is following best practices by not reusing that address)."
crypto,2inhmk,DemandsBattletoads,1 point,Wed Oct 8 16:31:45 2014 UTC,"Ah, right then."
crypto,2inhmk,Natanael_L,1 point,Wed Oct 8 20:49:08 2014 UTC,"Fawkes signatures, Lamport hash signatures"
crypto,2inhmk,FermiAnyon,0,Thu Oct 9 15:51:21 2014 UTC,"I haven't read up on Bitcoin in a while myself, so I'll leave the details to someone more familiar with it.  I do think it's important to note that not all asymmetric algorithms are equally susceptible to attack by a quantum computer (or so I recall having read somewhere some time)."
crypto,2inhmk,FermiAnyon,2,Wed Oct 8 13:57:14 2014 UTC,Would you mind ELI5 what is hashing?
crypto,2inhmk,DemandsBattletoads,4,Wed Oct 8 13:03:39 2014 UTC,"A hash is a way of fingerprinting a string of data.  An ideal cryptographic hash is meant to be like a random mapping from the input to the output.  Because the output is a fixed length and the input can usually be any length, there will necessarily be ""collisions"" due to the pidgeonhole principle.  The idea is to have an output that is long enough to make the complexity of finding collisions ""infeasible"".  When this condition is met, the hash can be used in things like digital signatures and other protocols.  So hash functions are a very important type of cryptographic primitive."
crypto,2inhmk,Serina_Ferin,3,Wed Oct 8 13:53:25 2014 UTC,"A hash function is a method of transforming the data in a way that makes it so difficult to reverse that it is safe to assume it is not possible. It is often used as a signature to verify that data hasn't been changed.  Suppose Bob wants to send you a very large message but he only has enough time to send you a small fraction of the actual message. Bob can post the information somewhere public and send you a link to its location and the hash of the message.  You can then go retrieve the information (as can anyone else) and you can verify that the message you downloaded hasn't changed from what Bob uploaded by comparing the hash value Bob gave you with the hash value of the message you received.  This operation can only tell you ""yes/no, was this data modified?"" It cannot tell you what was modified, by whom, or when."
crypto,2inhmk,moonclad,3,Wed Oct 8 14:12:50 2014 UTC,"Thanks, I think I got it: So let's say Bob message is ""192837465"", a 'hash code' could be 45 and the 'hash method' would be adding up all the numbers in the message. So the message is not reversible from the hash code, but the authenticity could be checked by the method of adding all numbers. I could only guess that hashing methods are far more complex than that as it needs to be injective function, and 45 in this case represents other sequences as well. Is that correct?"
crypto,2inhmk,12090205182025,2,Wed Oct 8 14:24:23 2014 UTC,"Yes, but a feature of a very good has is that it has to be extremely difficult for someone to modify your data then force it to hash to the same value (thus concealing the change)  Suppose Alice wanted to sow some distrust, she could alter the message to be ""192837456"", which would still sum to the same value but wouldn't be the same message. But, as a very simple hash, you are correct.  MD5 (a very common hash used for signatures) is 128 bits. Regardless of the input size, the has MUST be 16-bytes (128 bits), therefore we can conclude that some items MUST share a MD5 hash value. The crux of hashing is that given an input, the amount of time required to find another input that produces the same hash value is generally longer than the usable life of the input."
crypto,2inhmk,AeroelasticFlutter,1 point,Wed Oct 8 14:55:04 2014 UTC,"Hashing is more complex than that, but it's just an algorithm. Think of it like taking an arbitrary amount of data, mashing it up with itself a lot, but in such a way that you end with a number of a fixed size in the end. In the case of SHA-256, that number is 256 bits long. By design it's hard to reverse and it's also hard to find collisions (two inputs that have the same output).   Hashes are used for integrity verification. For example, you could download a Linux image and then check its hash against the one posted on the website. If they match, you know that your copy is perfect intact and isn't corrupted.   In Bitcoin's case, hashing is used for integrity of the blockchain, but in a special way. It poses the question to find a hash of a random number and some data such that the hash result is less than a certain number. The only way to do this is by trying a lot of random numbers until you find one that answers the problem. That's hard to do, but easy to verify by a single hash. The people that do this work are called miners. If a miner succeeds in finding the answer, his block containing recent transactions is added to the blockchain. Once it is, it's stuck. I can't modify a transaction without changing the hash, and the hash can't be changed because then the block would be invalid."
crypto,2inhmk,TashanValiant,1 point,Wed Oct 8 15:07:16 2014 UTC,"Hashing is a lossy process. Data is lost because you take a string of data and boil it down (or up) to a fixed length.  The idea is that you car verify the data is unchanged from the original. I write a program and hash it. I post the fingerprit(hash) online.  If you get the program from someone other than me, or even if you try to get it from me and someone man-in-the-middle swaps it with something else, you can verify the program was unchanged because the odds of someone changing anything about the program and getting the same has are next to nothing.  That isn't to say hash is fool-proof. There are weak and strong algorithms and, in the case of password hashing, a thing called rainbow tables which are large (like terabites worth) of hashes and the string used to create them."
crypto,2inhmk,The_Serious_Account,1 point,Wed Oct 8 18:10:58 2014 UTC,"Think about looking at two different things through a kaleidoscope. You can tell things apart, but you can't tell what they are. So hashing is putting a number through a kaleidoscope using math."
crypto,2inhmk,AeroelasticFlutter,-5,Wed Oct 8 13:45:51 2014 UTC,"The government hates bitcoin because its a threat to their money monopoly and i suspect the us government will have the first quantums since, well, they have unlimited resources with their money monopoly.  edit - seeing reddit downvoting me in a flurry I now see the light.  I amend my statement.  Government loves bitcoin because it's not a threat to a money monopoly that they do not have.  In fact there are many parallel currencies and you can use all of them at any store.  The US Dollar is not the currency of the United States.  Also, there is no black ops budget, that does not exist, there is no monetization of debt, in fact there is no debt, that too is a tea party conspiracy and lie, and finally the NSA does not exist either."
crypto,2inhmk,The_Serious_Account,5,Wed Oct 8 12:40:16 2014 UTC,"It actually runs in O(log n3), which is significantly faster than O(n3).  Edit: I'm wrong!"
crypto,2inhmk,pint,5,Wed Oct 8 12:54:10 2014 UTC,Isn't that just O(log n)? Or did you mean O((log n)3 )?
crypto,2inhmk,The_Serious_Account,2,Wed Oct 8 12:57:33 2014 UTC,"Computational complexity is usually measured in the length of the input in terms of bits. It's n3 where n is the number of bits. It's log(N)3 where N = 2n . That is, N is the integer value of the input.  I'm not sure why the Wikipedia page for shors algorithm uses the latter definition."
crypto,2inhmk,FermiAnyon,1 point,Wed Oct 8 13:03:02 2014 UTC,"Oh, that's really fascinating. I didn't even consider how the differences in bit/qubit complexity would have to be taken into account!"
crypto,2inhmk,The_Serious_Account,3,Wed Oct 8 13:09:48 2014 UTC,"No,no... It's just regular definition of complexity. You usually define it in length of the input in terms of bits.   Edit: this has a better definition, http://en.wikipedia.org/wiki/Integer_factorization#Difficulty_and_complexity"
crypto,2inhmk,mfukar,-2,Wed Oct 8 13:13:47 2014 UTC,"math guys can't give a damn about us, poor IT guys. they just use whatever notion they feel like in the heat of the moment, and laugh on our confusion."
crypto,2inhmk,The_Serious_Account,5,Wed Oct 8 13:49:36 2014 UTC,"If P is supposed to refer to ""polynomial"" time, then the definition has to be  the bit length of the input."
crypto,2inhmk,autowikibot,-4,Wed Oct 8 13:52:50 2014 UTC,"ECC is supposed to be resistant.  *My mistake ""In particular, unlike traditional ECC, isogeny computation appears resistant to quantum attacks, and hence such systems are good candidates for quantum-resistant cryptography [8]"" Fairly close though in any case."
crypto,2inhmk,FermiAnyon,9,Wed Oct 8 12:26:39 2014 UTC,"No, it's equally a mess. You want something like the lattice based stuff    http://en.wikipedia.org/wiki/Post-quantum_cryptography"
crypto,2inhmk,The_Serious_Account,2,Wed Oct 8 12:41:38 2014 UTC,"Lattice-based schemes are not well studied. At the time of this writing, they do not make any post-quantum promises. Source: Daniel J. Bernstein, Daira Hopwood, Andreas Hülsing, Tanja Lange, Ruben Niederhagen, Louiza Papachristodoulou, Peter Schwabe, Zooko Wilcox-O'Hearn. SPHINCS: practical stateless hash-based signatures. Date: 2014.10.01"
crypto,2inhmk,ldpreload,2,Wed Oct 8 18:48:56 2014 UTC,"Unfortunately that doesn't give us public key cryptography and it's hard to imagine the internet without it. It's not really my field, but it's my understanding that lattice (or lwe) based schemes is one of the better approaches  currently.   When it comes to computational assumptions, no one can really give promises. But it's probably fair that we need to better understand the security parameters for the schemes."
crypto,2inhmk,ldpreload,1 point,Wed Oct 8 19:04:50 2014 UTC,"Post-quantum cryptography:       Post-quantum cryptography refers to research on cryptographic primitives (usually public-key cryptographic systems) that are not efficiently breakable using quantum computers more than classical computer architectures. This term came about because most currently popular public-key cryptographic systems rely on the integer factorization problem or discrete logarithm problem, both of which would be easily solvable on large enough quantum computers using Shor's algorithm.   Even though current publicly known experimental quantum computing is nowhere near powerful enough to attack real cryptographic systems,  many cryptographers are researching new algorithms in case quantum computing becomes a threat in the future. This work has been popularized by the PQCrypto conference series since 2006.       Interesting: Quantum cryptography | Shor's algorithm | Lattice-based cryptography | Man-in-the-middle attack   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2inhmk,cedricvanrompay,-1,Wed Oct 8 12:41:49 2014 UTC,"If you could come up with a homomorphic algorithm that'll can hold a large enough state to be useful... they're kind of unwieldy on modern computers from what I've read, so I don't exactly see servers juggling multiple connections with the kind of agility they do now.  Not for a while, at least.  Of course, I feel a little ripped off with all these cool advancements... after all, I paid for my whole seat but I only needed the edge ; )"
crypto,2inhmk,amateurtoss,0,Wed Oct 8 14:01:40 2014 UTC,"Im not sure what you're saying with homomorphic encryption, except it's obviously cool"
crypto,2inhmk,cunttard,6,Wed Oct 8 14:32:16 2014 UTC,"There are two ways to interpret ""real threat"".  1: If a quantum computer were to be built, would it be a cryptographic disaster? Yes: there are various assumptions underlying the strength of crypto, like factoring being difficult. (We haven't proven that the only way to break e.g. RSA is factoring, but we do know that efficient factoring will definitely break it.)  Some things won't be broken, but not enough that we yet have practice building something like SSL out of so-called ""post-quantum"" mechanisms. From pqcrypto.org:   Here's the one-minute introduction: ""Imagine that it's fifteen years from now. Somebody announces that he's built a large quantum computer. RSA is dead. DSA is dead. Elliptic curves, hyperelliptic curves, class groups, whatever, dead, dead, dead. So users are going to run around screaming and say 'Oh my God, what do we do?' Well, we still have secret-key cryptography, and we still have some public-key systems. There's hash trees. There's NTRU. There's McEliece. There's multivariate-quadratic systems. But we need more experience with these. We need algorithms. We need paddings, like OAEP. We need protocols. We need software, working software for these systems. We need speedups. We need to know what kind of key sizes to use. So come to PQCrypto and figure these things out before somebody builds a quantum computer.""   2: Is it realistic that a quantum computer will be built? Maybe, maybe not, and that's more a question for the physicists, and for the quantum engineers whenever that career field happens to exist. D-Wave is the main commercial entity working on this, and so far they haven't been able to provide convincing proof whether their quantum computer is running faster than a classical one (which is to say, whether quantum mechanics is even relevant, or whether they just have a ridiculously complicated classical computer). So far, the academics have managed to factor the number 143 with a quantum computer, which is incredibly cool but a long way off from factoring anything of cryptographic size. Compared to classical computing, we're probably somewhere between the 1800s and 1940s; knowing how close were are beyond that is marketing hype, and there's a decent chance that the whole thing might not work out for some complicated physics reason. But there's also a pretty good chance it will."
crypto,2inhmk,ankit0912,1 point,Wed Oct 8 18:12:41 2014 UTC,Your information (that they factored a small integer) is about 6 years old. What can they do now?
crypto,2inhmk,Ar-Curunir,3,Wed Oct 8 21:26:03 2014 UTC,"I double-checked my info and I do seem to be a bit wrong -- while factoring 143 is pretty recent (2012), it's not using Shor's algorithm, it's using adiabatic quantum computation, and (as far as I can tell) it's even more unclear whether that can scale. The record for Shor's is 21, also from 2012; the previous record is 15, from 2001. I haven't heard of any crypto-relevant new results in the last few years, but I've also been out of academia for that long, so I'm not the best person to ask. :)"
crypto,2inhmk,ankit0912,1 point,Fri Oct 10 03:07:06 2014 UTC,"here is an example of a candidate for post-quantum cryptography : knapsack-based cryptosystems, since we still found no solutions for speeding up knapsack problem solving with quantum computing. The thing is, from these new primitives we have to re-build complete technology. TLS is not a mere PKC. In this great video (RSA conference US 2013), top cryptographers talk about the future of crypto, among which the post-quantum issue. For instance Adi Shamir says it's not his major concern right now."
crypto,2inhmk,pint,-2,Thu Oct 9 07:12:04 2014 UTC,"No. Quantum computing is about as threatening as alien overlords. A very real possibility, but would require such a paradigm shift in thinking as to be more of a distraction than a real possibility.  May as well shield our algorithms against psychic attacks while we're at it.  Quantum computing and quantum information is about the information of Physics. Historically Physics has had a profound influence on most every subject including the history of computing and information theory and there's no reason to suspect that this will abet any time soon. However, Physicists study subjects for their own sake and the solving of real problems is usually incidental.  Edit: I'll answer any questions about Quantum Computing and Quantum Information particularly in service of Crypto."
crypto,2inhmk,Ar-Curunir,-1,Wed Oct 8 16:27:08 2014 UTC,Quantum Computing will be a threat when Fully Homomorphic Encryption becomes fast and usable.
crypto,2ikusy,self,20,Tue Oct 7 17:43:05 2014 UTC,Heh. Worth it for the Special note to law-enforcement agents.
crypto,2ikusy,jpverkamp,20,Tue Oct 7 18:43:06 2014 UTC,"Special note to law-enforcement agents: The word ""state"" is a technical term in cryptography. Typical hash-based signature schemes need to record information, called ""state"", after every signature. Google's Adam Langley refers to this as a ""huge foot-cannon"" from a security perspective. By saying ""eliminate the state"" we are advocating a security improvement, namely adopting signature schemes that do not need to record information after every signature. We are not talking about eliminating other types of states. We love most states, especially yours! Also, ""hash"" is another technical term and has nothing to do with cannabis."
crypto,2ikusy,k1nkyk0ng,1 point,Tue Oct 7 22:21:02 2014 UTC,And they're sticking hash into crypts! Where are they getting all these crypts? They much be grave robbing to be able to encrypt so many things!
crypto,2ikusy,Paran0idAndr0id,8,Tue Oct 7 22:33:36 2014 UTC,"Whoa, LeastAuthority stole the pumpkin logo!  Seriously though, this is a neat construction: it's a practical optimization and combination of Goldreich's stateless signature scheme and the HORS scheme (and some other stuff).  The paper itself is a nice mix of theory and choosing practical parameters against quantum attackers.  Still, I'd love to see more fast algebraic alternatives like Ducas et al from CRYPTO 2013... just for purist reasons."
crypto,2ikusy,DoWhile,3,Wed Oct 8 03:08:59 2014 UTC,"I don't fully comprehend hash-based signature schemes and this paper is a bit out of my depth. I have a few questions if anyone would be willing to clarify:  Using SPHINCS-256 (the implementation specified in the paper), are the number of leaves in the hypertree equal to the total possible signatures that can be made?  What is the theoretical limit of signatures that can be made without compromising the 128-bit security offered?"
crypto,2ikusy,cunttard,2,Tue Oct 7 22:23:48 2014 UTC,"Sad no one responded till now.  The security degrades somewhat gracefully even if your are unlucky unlucky. The number of leaves in the hyper-tree match how distinct few-time-usable-signature keys there are. As the name implies, you can safely reuse a few-time-usable-signature key more than once, but the security goes down the more you use it.  As far as the actual security goes it depends if you mean 128 bit pre-quantum or post-quantum security. Lets take the post quantum case, since thats the harder one to meet, and 128-bit quantum security is what the system targets.  For 250 messages with their proposed settings you have a 2-9.5  probability of being exposed to a 2134 quantum attack. There is a list in the paper:  Chance:  [2-41, 2-61,  2-75, 2-88,  2-102, 2-116, 2-130]  Quantum cost:  [2125, 2122.8, 2120.6, 2118.6, 2116.8, 2115.1, 2113.5]  At 260 messages signed, you end up with exposed to a 2100 attack with probability 2-30.  The authors argue that if you had your key on enough devices to sign 220 messages per second it would still take you 30 years to get to 250 messages used above.  [Personally, I dunno why anyone wouldn't also run a EC signature in parallel with Sphincs, another 64 bytes would add practically noting to the signature size, and would probably let you justifiably use smaller sphincs signatures since your pre-quantum security would remain good even with high reuse.]"
crypto,2ikusy,nullc,2,Wed Oct 8 01:46:44 2014 UTC,"Let me guess, Sphicns isn't short for Sphincters either?"
crypto,2ikusy,cammyjee,2,Tue Nov 4 07:25:12 2014 UTC,"For a second, I thought it was a JIRA ticket."
crypto,2ijboj,wonkadonk,11,Tue Oct 7 07:06:12 2014 UTC,"They flocked to Telegram instead? Last I heard, the encryption has a lot of weird stuff going on. Well I suppose it would still thwart the Korean authorities, but that's about it.  http://unhandledexpression.com/2013/12/17/telegram-stand-back-we-know-maths/  http://www.thoughtcrime.org/blog/telegram-crypto-challenge/  There's no way you want SHA1 anything in modern crypto protocol."
crypto,2ijboj,nocnocnode,3,Tue Oct 7 10:50:12 2014 UTC,"Yea, it's still hilarious politically her government drove a bunch of politically active users to foreign intelligence."
crypto,2ijboj,hieraga,2,Wed Oct 8 00:23:35 2014 UTC,i read too how telegram is not secure at all. i wonder if there is real secure alternative. do you know one?
crypto,2ijboj,Dillinur,11,Tue Oct 7 11:45:46 2014 UTC,WhisperSystems?
crypto,2ijboj,NeuroG,3,Tue Oct 7 13:16:20 2014 UTC,"OTR, or specifically something like Chatsecure + Orbit (TOR). The main problem with OTR, though, is that it can easily be turned off"
crypto,2ijboj,annodomini,5,Tue Oct 7 13:49:58 2014 UTC,"The main problem with OTR is that it's a huge pain in the ass if you have multiple devices. I have a desktop, laptop, and phone, and a large fraction of the time that someone pings me using OTR, it picks the wrong keys to encrypt with, leaving me seeing just gibberish that happens to be going to my desktop at work."
crypto,2ijboj,NeuroG,4,Tue Oct 7 14:23:42 2014 UTC,"Aparently Chatsecure can share keys with Pidgen/Adium/Jitsi using a keysync system. OTR may still have issues when you switch between devices mid-conversation. I don't have the issue because I use Bitlbee for XMPP/OTR and my various devices just connect to a single instance -but that's a whole other can of worms to set up.  Regardless, OTR and PGP are basically the only trustworthy systems at the moment, even if that means telling people to stick to IMing on a single device (or use different accounts on different devices). I bet most of these people are chatting on a single device anyway."
crypto,2ijboj,HungBingJong,3,Tue Oct 7 14:44:59 2014 UTC,TextSecure maybe.
crypto,2ijboj,Natanael_L,2,Tue Oct 7 20:00:32 2014 UTC,Threema.  www.threema.ch Very popular in Europe.
crypto,2ijboj,Zesteh,1 point,Tue Oct 7 16:01:00 2014 UTC,"TextSecure. It's coming to iOS, too, in the next few months."
crypto,2ijboj,ThursdayNotes,2,Wed Oct 8 07:49:56 2014 UTC,"It's there, sort of. Signal is compatible with it."
crypto,2ijboj,iliasasdf,0,Fri Oct 10 19:04:12 2014 UTC,There is icx. It's in an early beta but is open source and works right in your browser. Full mobile experience is in the works too.
crypto,2i9qke,chiniwini,72,Sat Oct 4 11:53:13 2014 UTC,"Thankfully it's very easy to tell whether it's real. If anyone can publish the two, non-trivial factors of this number (where neither is 1!) then they'll have my attention:  0xe5c30e1286c41c7137dc06194199dde641120de591c1b7392de35ef6a961d6d29faa3bcdb7603d42768a90322197a7a46fa2cf23f6f10de5554db6e7322ba35e858f576f840347c795c8782c3f4ef9f530d2fd1f6b5c275ce49404958f0decddd0b53386d12c745891d5eeca1f265bdf87bfe258cc7999dd1b21c570dddf1b33  In standard form:  -----BEGIN PUBLIC KEY----- MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDlww4ShsQccTfcBhlBmd3mQRIN 5ZHBtzkt4172qWHW0p+qO823YD1CdoqQMiGXp6Rvos8j9vEN5VVNtucyK6NehY9X b4QDR8eVyHgsP0759TDS/R9rXCdc5JQElY8N7N3QtTOG0Sx0WJHV7sofJlvfh7/i WMx5md0bIcVw3d8bMwIDAQAB -----END PUBLIC KEY-----"
crypto,2i9qke,agl,18,Sat Oct 4 15:16:36 2014 UTC,"That is only useful for you, not for anyone else. You could just create another account, and post p and q for all we know :)"
crypto,2i9qke,betamos,19,Sat Oct 4 18:13:47 2014 UTC,"That's true, but if I see p and q then I'm convinced and, by reputation, I can do most of the work of convincing everyone else (I would hope).  Doing a secure, multi-party computation to generate the key is more effort than I think is called for here but, if the factors were actually to be published for my key, then we could certainly do that."
crypto,2i9qke,agl,7,Sat Oct 4 18:29:10 2014 UTC,"Btw, what's the RNG for openssl on a standard (your) machine?"
crypto,2i9qke,betamos,3,Sat Oct 4 19:29:25 2014 UTC,"I saw ""by reputation"" and, pretty much by reflex, looked up your username on teams/.  Is this you, or did that make no sense?"
crypto,2i9qke,kurin,8,Sat Oct 4 22:28:14 2014 UTC,"I don't know what teams/ is, but agl is almost certainly Adam Langley, a fairly well known cryptography engineer, known for his work on OpenSSL/BoringSSL: https://www.imperialviolet.org/"
crypto,2i9qke,kingkilr,4,Sat Oct 4 22:46:01 2014 UTC,I assume teams/ is an internal Google URL to find out what team somebody is on
crypto,2i9qke,kingkilr,3,Sun Oct 5 05:54:04 2014 UTC,"Ah, good call."
crypto,2i9qke,agl,3,Sun Oct 5 05:57:17 2014 UTC,"Yes, ""teams"" makes sense. Although I still call it who."
crypto,2i9qke,race_bannon,4,Sun Oct 5 02:05:10 2014 UTC,or they could just release the code to crack it and everyone can try for themselves?  full disclosure and whatnot?
crypto,2i9qke,pascal_cuoq,1 point,Sat Oct 4 23:56:17 2014 UTC,We'll have to take it on trust that someone with “agl” as their handle would not do something like this.
crypto,2i9qke,p1mrx,-2,Sat Oct 4 18:28:08 2014 UTC,That looks easy enough:  >>> hex(0xe23b97d1a2c689f85e4e364119bd637e6aae0458d466e0b1a83cb8aeb55581618bb2497bd64328322eedcfe4a38fc6019f3375e4028ddf8df55959b6e08e1867 * 0x103fe566476983f4b0e7ac8933feec8b38a0776629db4b6b6e57b182f8a6de287d9672d4c737d29b2faa832c01529ea5e14cfdb88029b6d219ec1bebab0aa5755) '0xe5c30e1286c41c7137dc06194199dde641120de591c1b7392de35ef6a961d6d29faa3bcdb7603d42768a90322197a7a46fa2cf23f6f10de5554db6e7322ba35e858f576f840347c795c8782c3f4ef9f530d2fd1f6b5c275ce49404958f0decddd0b53386d12c745891d5eeca1f265bdf87bfe258cc7999dd1b21c570dddf1b33'
crypto,2i9qke,p1mrx,13,Sun Oct 5 05:19:10 2014 UTC,"Well who really needs all those bits in the middle?  RSA runs a lot faster with the ""1 2, skip a few, 99 100"" algorithm."
crypto,2i9qke,rick2g,17,Sun Oct 5 05:33:09 2014 UTC,"That looks more like a compiler bug, if that's how it rounds."
crypto,2i9qke,jcopta,17,Sun Oct 5 08:42:33 2014 UTC,It seems that the standard integer division doesn't round up. Unless a weird C compiler/compiler option was used (not expected) I find no good reasons to believe this story.  http://stackoverflow.com/questions/3602827/what-is-the-behavior-of-integer-division-in-c
crypto,2i9qke,rebootyourbrainstem,21,Sat Oct 4 12:20:04 2014 UTC,"Here's a commented disassembly of the relevant code from my 64-bit Ubuntu openssl lib, showing the correct ""round towards 0"" behavior from the C standard is being used:  c8293:       8b 44 24 0c             mov    eax,DWORD PTR [rsp+0xc] ; eax = bits c8297:       48 8b 54 24 10          mov    rdx,QWORD PTR [rsp+0x10] ; unrelated c829c:       83 c0 01                add    eax,0x1 ; eax = bits + 1 c829f:       89 c1                   mov    ecx,eax ; ecx = bits + 1 c82a1:       c1 e9 1f                shr    ecx,0x1f ; ecx = (bits + 1) >> 31 = sign(bits + 1) c82a4:       01 c8                   add    eax,ecx ; eax = (bits + 1) + sign(bits + 1) c82a6:       89 44 24 08             mov    DWORD PTR [rsp+0x8],eax ; bitsp = (bits + 1) + sign(bits + 1) c82aa:       d1 7c 24 08             sar    DWORD PTR [rsp+0x8],1 ; bitsp = floor(((bits + 1) + sign(bits + 1)) / 2)   In my comments, ""sign()"" is a function that is 1 iff its argument is less than 0.   Of course, even if the two primes were not exactly the same size I don't see how that somehow destroys the security of the resulting keypair."
crypto,2i9qke,dakami,15,Sat Oct 4 13:59:52 2014 UTC,"There haven't been six years of security cons not competent enough to send either their own public keys or a bunch of keys mined from the Internet for proof of cracking.  Every scene has their crackpots, ours like hanging around crypto.  Whatever."
crypto,2i9qke,phyzome,9,Sat Oct 4 14:56:13 2014 UTC,"Can you get reproduction instructions from him? That is, the architecture the OpenSSL he was using was compiled for, and what command line he ran to generate the keys.  Even if he's not interested in helping further, that's kind of the minimum useful info."
crypto,2i9qke,ldpreload,7,Sat Oct 4 18:55:58 2014 UTC,"the main problem being that the rounding of 1025 isn't downwards but upwards, resulting in bitsp= 513 and bitsq=511, which, supposedly, later on the code and due to compiler optimizations, causes the bug.   I'm going to assume something was lost in the game of telephone here, because an explanation along these lines doesn't extend to 20 minutes to break on a single laptop.  In particular, while it does seem buggy that your smaller prime is 511 bits, this shouldn't reduce the effective strength of the key beyond that of a 511+511-bit key, and a 1022-bit key is going to be just about as secure as a 1024-bit one, for all practical purposes. Certainly it's not so much easier to crack than it gets down to minutes.  Unless there are mathematical properties about odd-number-of-bit primes and not even-number-of-bit ones? As far as I've ever heard, the power-of-2 sizes of RSA keys are just convention to make computer implementations simpler, not some inherent mathematical advantage."
crypto,2i9qke,cunttard,4,Sat Oct 4 14:27:34 2014 UTC,"I think there's attacks if the distance of the factors in an RSA modulus are sufficiently close. I'm not too well versed on attacks against RSA, but I felt that was the theme being presented and this second-hand account just doesn't suffice. However with no proof of concept, publication, or discussion I would agree with the consensus that the presenter is full of BS."
crypto,2i9qke,cypherpunks,9,Sat Oct 4 20:43:21 2014 UTC,"the main problem being that the rounding of 1025 isn't downwards but upwards, resulting in bitsp= 513 and bitsq=511, which, supposedly, later on the code and due to compiler optimizations, causes the bug.   First of all, in the C language division rounds down, so if bits=1024, and there's no compiler bug, bitsp will be 512.  Second, there's absolutely nothing wrong with bitsp=513 and bitsq=511.  bitsp=400 and bitsq=624 would be fine for security.  Unless this is simply the trigger for some other bug, such as a loss of randomness when generating odd-length primes.  I don't want to dismiss your other security claims without examining them, but this explanation of the root cause makes no sense at all."
crypto,2i9qke,lalaland4711,1 point,Sat Oct 4 22:43:01 2014 UTC,I completely agree.
crypto,2i9qke,cypherpunks,1 point,Sun Oct 5 07:56:47 2014 UTC,"""which, supposedly, later on [in] the code and due to compiler optimizations, causes [triggers?] the bug.""  I still don't believe it, but you should read the whole sentence."
crypto,2i9qke,boes,4,Sun Oct 5 12:16:37 2014 UTC,"Yes, I noticed that; that's what I was trying to refer to with the last sentence I wrote.  But ""there's some other bug somewhere"" is not enough to respond to, so I didn't say anything.  All I can say is that where the report is specific, it's wrong, which generally decreases my confidence in the source."
crypto,2i9qke,nitsuga,7,Mon Oct 6 08:17:16 2014 UTC,"well, glad that im up to 4096 keys for almost all certs i have  then :)"
crypto,2i9qke,aris_ada,6,Mon Oct 6 15:42:14 2014 UTC,Here is a video of the supposedly vulnerability: http://www.cristianamicelli.com.ar/#VideoRsa
crypto,2i9qke,-cem,4,Sat Oct 4 12:16:24 2014 UTC,The recovered primes on his video are both 512 bits long. This contradicts the whole explanation on his blog. https://twitter.com/aris_ada/status/518856009440583681
crypto,2i9qke,Salusa,4,Sat Oct 4 21:51:48 2014 UTC,"according to the researcher, he thought he could get a list of all the primes then iterate through them multiplying to get a candidate 'n'. This will not work due to the large number of primes that are in the search space.  tweet1 tweet2"
crypto,2i9qke,sir_rand_a_lot,7,Sun Oct 5 20:18:59 2014 UTC,"Doubly confirmed:  There are approximately 1080 atoms in the (observable) universe, but there are approximately 10151 512-bit prime numbers.  This attack is not feasible within this universe."
crypto,2i9qke,HumanSuitcase,4,Mon Oct 6 21:36:29 2014 UTC,"Everyone can make mistakes. However, this guy uploaded a video that showed how he broke RSA in 20 minutes, and then he comes out and says that his solution requires to previously find all 512 bit primes, which can't be done.   So what, did he fake that video just to earn some twitter followers? I don't get it."
crypto,2i9qke,OlderThanGif,1 point,Mon Oct 6 21:55:45 2014 UTC,"Thanks, updated."
crypto,2i9qke,HumanSuitcase,7,Tue Oct 7 00:21:18 2014 UTC,"How do we go about cluing the OpenSSL devs in to this?  Also, what's the guys name?"
crypto,2i9qke,dvito,11,Mon Oct 6 22:00:33 2014 UTC,"I'm guessing OpenSSL devs have to put up with iconoclastic crackpots on a pretty frequent basis as it is. I don't know what they'd do with yet another ""I found a secret bug and my explanation of it doesn't make any sense and I'll never tell anyone how it works but just trust me and freak out in awe of my genius""."
crypto,2i9qke,HumanSuitcase,2,Sat Oct 4 14:07:52 2014 UTC,"I don't doubt that, but if he did it on stage as the claim states, then there might be some merit in investigating. Which it looks like some people in the thread already are."
crypto,2i9qke,dvito,7,Sat Oct 4 16:28:36 2014 UTC,Only issue with on stage demonstration is you can fake all the source material. Fake key generation and the breaking of. I doubt he hacked a real system on stage that he didnt have control of
crypto,2i9qke,HumanSuitcase,3,Sat Oct 4 16:52:55 2014 UTC,Valid point.   Is it fair to be concerned with out documentation that he may never release?
crypto,2i9qke,mobiplayer,5,Sat Oct 4 17:53:20 2014 UTC,"Always.  One problem with security problems is the full context is extremely important to knowing just how bad a security issue is.    Example, its really easy for security people to start tooting a horn about an issue that involves like caveats of ""this is only a problem if SSL is disabled, the moon is full, and you already know the private keys of the application"".   A compiler optimization could mean, if you turn on a specific flag no one uses when compiling openssl, or it could be the standard optimizations.  The vagueness in ""compiler optimizations"" can mean a massive differential in exploitability.  When really complex problems are involved, its easy for people to get confused and assume the person knows what they are talking about, which is often not the case.  I know I do it all the time.  This could very well be a real vulnerability getting exploited in the wild, but it'd love to read the writeup of exactly how it works."
crypto,2i9qke,m1000,8,Sat Oct 4 18:05:14 2014 UTC,"Pedro Candel, alias ""s4ur0n"".  I thought about it, but it's all so vague and unbelievable, I think it may be better to wait until we know more."
crypto,2i9qke,cunttard,6,Sat Oct 4 18:19:23 2014 UTC,Are we going to know more?
crypto,2i9qke,omegga,2,Sat Oct 4 14:27:04 2014 UTC,Any link to a profile? His name and handle don't sound familiar.
crypto,2i9qke,bascule,7,Sat Oct 4 14:50:05 2014 UTC,"I really don't think something got lost in translation here. A Fake demo ? Comparisons to someone else who discovered this years ago but was ignored ?   He should add ""Fraud"" to his ""credentials"" on his website."
crypto,2i9qke,Verroq,4,Sat Oct 4 18:56:11 2014 UTC,20 minute video with a list of known factors for the private key.  Tries to elude criticism when asked for code because it is too risky.  This might be harsh but list him on the wall of shame.  Glad this got absolutely no media attention.
crypto,2i9qke,aris_ada,3,Tue Oct 7 03:41:37 2014 UTC,"Also his initial explanation (the rounding error and additional vulnerability ""later on the code"") doesn't match his later explanation (list of primes) at all."
crypto,2i9qke,cryptja,15,Tue Oct 7 06:17:36 2014 UTC,"OP is full of shit:  #include <stdio.h>  int main() {     printf(""%d\n"", 1025 / 2); }   ...prints ""512"" on every C compiler and optimization level I tried."
crypto,2i9qke,a4lg,11,Tue Oct 7 10:33:31 2014 UTC,"C99 standard:  6.5.5 Multiplicative operators  6 When integers are divided, the result of the / operator is the algebraic quotient with any fractional part discarded (88). If the quotient a/b is representable, the expression (a/b)*b + a%b shall equal a.  (88) This is often called ‘‘truncation toward zero’’."
crypto,2i9qke,bleh_,3,Sat Oct 4 20:38:10 2014 UTC,"To be fair you're not testing the codepath used by the compiler in the OpenSSL code. In this code the ""bits"" variable comes from arguments and cannot be statically optimized as your example probably is (even with -O0). Still my opinion is that it's just bullshit."
crypto,2i9qke,lucb1e,4,Sun Oct 5 02:06:10 2014 UTC,"I read one of these guys code, they doesn't have any interesting algorithm to factor or to generate the list of primes. Their list of prime isn't big but they had made live demos. If the list of primes is short and the demos work in minutes: they lie, it's a trick"
crypto,2i9qke,mobiplayer,6,Mon Oct 6 06:45:52 2014 UTC,"Fake. If bits (type of int) == 1024, (bits+1)/2 generates 512 (see 6.5.5 and 5.2.4.2.1 in ISO/IEC 9899:2011 [C Specification]). Statements after them seems not vulnerable (even if (bits+1)/2 is rounded upwards) because this is the RSA key generation algorithm you may see in the book (I mean, straightforward).  I tried to reproduce the issue by generating 1024-bit RSA key by openssl genrsa command. If what he claims is true, this 1024-bit RSA private key should be a product of a 511-bit prime and a 513-bit prime, but openssl genrsa made a product of two 512-bit primes.  At least, I cannot believe the attack vector he claims. Even OpenSSL has a RSA keygen vulnerability, that should count differently (because he has clearly failed to identify true vulnerability)."
crypto,2i9qke,m1000,3,Sat Oct 4 22:55:46 2014 UTC,"I have transcribed p, q and n from the video demo. Both p and q are 512 bits numbers (511.691639536 and 511.693509963 approximately).  So the claim that it gets rounded up is bogus."
crypto,2i9qke,wtarreau,4,Sun Oct 5 17:26:57 2014 UTC,"Edit 2: he claims some guy from Argentina found the same thing 6 years ago, and has been trying to show it on cons since then, but no con accepted his talk because they wouldn't believe him.   That does not make it more likely. This is something absolutely critical to almost anyone with a https website (which are a lot of people) and discovering this probably gains you enough publicity to land you a nice career. No way someone is trying for 6 years and still hasn't convinced a single security conference with a simple PoC."
crypto,2i9qke,bluemellophone,3,Sun Oct 5 21:03:31 2014 UTC,"The ""Edit 2"" is just what I needed to know. Pure, fresh and smelly bullshit."
crypto,2i9qke,cunttard,3,Sun Oct 5 22:02:41 2014 UTC,"He needs to put up or shut up.   Get a dev from openssl, schedule an 'appointment' Agree on a build of openssl (unmodified by the attacker) to be used to generate some challenges. Solve the challenges in time for proof.   How hard can this be ?"
crypto,2i9qke,Dillinur,3,Sat Oct 4 18:29:18 2014 UTC,"What the crap ?  The guy should learn C before claiming things like this. bits, bitsp and bitsq are integers. So there's no rounding up, period. If bits=1024, then bitsp = (1024 + 1) / 2 = 1025 / 2 = 512. There's no 513 here. Thus, bitsq = 512 as well.  And even if he had to crack a 511 bit number, it would at most be twice as fast as a 512 bits one, but could in no way round the time down to 20 minutes. So either he's found another completely unrelated bug that permits this, or is just claiming things he has not verified just to get some fame.  Sorry, but not interesting at all for now."
crypto,2i9qke,niggamelonero,3,Sun Oct 5 01:40:37 2014 UTC,As per edit #9 ... uh he wants to make a list of all 512-bit primes?  Good luck.
crypto,2i9qke,careago_,7,Mon Oct 6 15:44:13 2014 UTC,"Bullshit.    I'm not going to spend my time worrying until I see Github code explicitly and clearly demonstrating the claim.  If the bug truly has been around for 6 years and the person who found it is technically adept enough to go rifling through OpenSLL code, I cannot fathom as to why an open source demo was not made available.  Either it's not a legitimate bug, or they are incredibly inept."
crypto,2i9qke,pkpearson,7,Tue Oct 7 12:08:56 2014 UTC,"To be fair, DUAL_EC_DRBG was claimed to provide an easy backdoor to NSA due to selection of parameters. A proof of concept was presented perhaps 3-6 months after the snowden revalations (even though the backdoor was known for years in the academic community)."
crypto,2i9qke,fiftypoints,1 point,Sun Oct 5 00:07:35 2014 UTC,"There is the possibility of a backdoor, which is indeed very damaging to the trust of those curbs, but without the secret value, they just couldn't use it to perform a live demo. They could only show with formulas that the design & choice of the constants indeed allow such a backdoor, that's interesting but quite less sexy for a con than ""BREAKING RSA IN LESS THAN 20MIN""."
crypto,2i9qke,niggamelonero,3,Sun Oct 5 01:52:02 2014 UTC,"Blog post translated: http://pastebin.com/D8itq6Ff Original Author: https://twitter.com/camicelli Pedro Candel, alias ""s4ur0n"" profile https://twitter.com/NN2ed_s4ur0n  Pwnie awards most EPIC Fail?"
crypto,2i9qke,FermiAnyon,2,Thu Oct 9 09:28:43 2014 UTC,Curious indeed...
crypto,2i9qke,totes_meta_bot,2,Sat Oct 4 23:34:05 2014 UTC,"117 bitsp=(bits+1)/2; 118 bitsq=bits-bitsp;  the main problem being that the rounding of 1025 isn't downwards but upwards, resulting in bitsp= 513 and bitsq=511,    So, according to line 118, we should have 511 == 1025 - 513 ?  Am I the only one bothered by this?"
crypto,2iaumn,shittywriterguy,7,Sat Oct 4 20:02:07 2014 UTC,"It's not crypto, it's an attempt to make it seem more legitimate to filters.  Kind of a markov generator, if you will.  By diluting the ""hot words"" in the spam email with words that are unrelated, they're probably hoping to reduce the confidence rating of gmail's spam algos."
crypto,2iaumn,Katana__,2,Sat Oct 4 20:19:13 2014 UTC,"Thanks for the reply, and I guess that makes sense.  I'm still curious about my last question, though, even if it's not relevant.  Is it possible to differentiate a random string from an enciphered message?"
crypto,2iaumn,marklarledu,5,Sat Oct 4 20:45:10 2014 UTC,"Depends on the cipher and mode being used. For example, AES in ECB mode will reflect patterns in the plaintext (assuming some exist and more than one block is being encrypted) whereas AES in CTR mode is believed to be indistinguishable from random."
crypto,2iaumn,Natanael_L,1 point,Sat Oct 4 20:51:30 2014 UTC,"Isn't it proven to be, under the assumption that AES is strong?"
crypto,2iaumn,marklarledu,2,Sat Oct 4 22:27:13 2014 UTC,I believe the answer to that is yes but I'm still fairly hungover from Oktoberfest so don't quote me on that.
crypto,2iaumn,kamoh,3,Sun Oct 5 07:10:41 2014 UTC,"Someone pointed me to this thread, but it looks like I accidentally made the thing that you thought this was-  http://www.reddit.com/r/crypto/comments/2j4mcv/i_made_a_spam_encoder_for_you_guys_hide_messages/"
crypto,2iaumn,pkpearson,1 point,Mon Oct 13 20:06:23 2014 UTC,Only possible if the message is enciphered incompetently.  Cryptologists are inclined to reject any cipher whose output can be distinguished from random without knowing the decryption key.
crypto,2iaumn,aydiosmio,1 point,Sat Oct 4 22:38:36 2014 UTC,"While sometimes desirable, indistinguishability from random noise is not required for a secure cryptosystem. It's merely helpful for deniability.  Most proper block cipher modes are designed to prevent information about the plaintext (like precise length, separators, static content) from leaking. This usually ends up making the ciphertext indistinguishable from random noise because random initialization vectors are used, or a counter causes each ciphertext to inherit a cascade which causes the output to appear random.  There's virtually no way to test with such a small sample. Unless the message has a word-for-byte substitution (making a repeating set of 256 words obvious), it's a huge undertaking to establish the encoding method. You'll always just do a binary block encryption, then choose an encoding mode to hide the encrypted data."
crypto,2iaumn,3pg,1 point,Sun Oct 5 09:10:16 2014 UTC,"Being indistinguishable from random noise (within a well specified margin) is a requirement for a cryptosystem to be considered secure in the random oracle model.  It does not, however, help you with deniability. Since it is possible to see that you are transmitting random noise then it is safe to assume that (since there's no point in sending noise) it is actually encrypted data.  I do agree with your final point. Once the data has been encrypted, it can be mapped to any representation of it, including representing each value with a word. The mapping chosen has no effect on the security of the encryption used to generate the input to the mapping function."
crypto,2iaumn,aydiosmio,2,Sun Oct 5 09:47:34 2014 UTC,"I was referring to data at rest (admittedly not relevant to OP), but noise can be hidden in many ways. Mostly in legitimate traffic as steganography. One can also transmit on a continuous basis to prevent an adversary from detecting when you are transmitting, possibly indistinguishable from background or spurious radiation, depending on your medium  Totally possible for it to benefit deniability in transmission."
crypto,2iaumn,3pg,1 point,Sun Oct 5 09:56:27 2014 UTC,Then I misunderstood your point. I thought you were referring to encryption in general and that the percieved pattern would be in the ciphertext rather than in the representation of the ciphertext.  My bad.
crypto,2iaumn,autowikibot,1 point,Sun Oct 5 11:15:30 2014 UTC,"Random oracle:       In cryptography, a random oracle is an oracle (a theoretical black box) that responds to every unique query with a (truly) random response chosen uniformly from its output domain. If a query is repeated it responds the same way every time that query is submitted.  Stated differently, a random oracle is a random mathematical function, that is, a function mapping each possible query to a (fixed) random response from its output domain.  Random oracles are a mathematical abstraction used in cryptographic proofs. They are typically used when the cryptographic hash functions in the method cannot be proven to possess the mathematical properties required by the proof. A system that is proven secure when every hash function is replaced by a random oracle is described as being secure in the random oracle model, as opposed to secure in the standard model.     Interesting: Mihir Bellare | Phillip Rogaway | Oracle machine | Cryptography   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2iaumn,pint,1 point,Sun Oct 5 09:47:56 2014 UTC,"however, if i'm not mistaken grossly, if you 1, have no access to a decryption oracle, only to a bunch of ciphertexts and 2, the ciphertext is not longer than the plaintext, then you shouldn't be able to tell apart the ciphertext from random."
crypto,2i8axb,murster,6,Fri Oct 3 22:38:48 2014 UTC,"http://www.theamazingking.com/crypto.php is an existing site of the sort. Don't steal his work, of course, but the set of topics covered is reasonable."
crypto,2i8axb,SAI_Peregrinus,1 point,Fri Oct 3 23:21:20 2014 UTC,"thanks :), i currently had the folllowing as ideas: introduction protocols Algorithms(symmetric and asymmetric) key length and key management block and stream ciphers one-way hash functions classical ciphers  anything you think i should add"
crypto,2i8axb,3pg,2,Fri Oct 3 23:24:56 2014 UTC,"You should consider contributing to the Open Security Training project. It seems quite small to me, but it has the potential to actually become commonly used if it grows a bit. If you don't wish to contribute, then they still have a couple of nice links to other sites that explain cryptography.  Edit: Fixed the link."
crypto,2i8axb,fractalo,1 point,Sat Oct 4 03:01:41 2014 UTC,It seems the link is broken....  :-(
crypto,2i8axb,gshfr,3,Sat Oct 4 04:35:05 2014 UTC,It is; the working link is http://opensecuritytraining.info/
crypto,2i8axb,wonkadonk,1 point,Sat Oct 4 05:35:05 2014 UTC,"Join this, and ask there:  https://moderncrypto.org/"
crypto,2i8zxw,conradsymes,2,Sat Oct 4 03:35:12 2014 UTC,"The best way to learn a language is to try and write in the language and read existing code.  Have you looked at the examples?  I suggest you try to write something simple, like a CRC, and if you get stuck feel free to ask for help at /r/cryptol, freenode #cryptol, or file issues on github."
crypto,2i8zxw,tom-md,1 point,Sat Oct 4 04:04:03 2014 UTC,"I tried downloading some of the examples, but they have a lot of dead links on their website (galois). I wish Galois wasn't the only site that apparently caters to Cryptol. Thank you for suggesting that subreddit.  Edit: found this finally: https://github.com/GaloisInc/cryptol/tree/master/examples"
crypto,2i8zxw,aseipp,3,Sat Oct 4 04:19:34 2014 UTC,"The examples in the source repository are pretty good to go for IMO. The DES example is a good place to begin.   You'll have a lot easier time if you're familiar with functional programming (cryptol is a very special functional language), but it's not strictly necessary.   You should also download the programming guide too, which has a nice tutorial and eventually gets to implementing AES: https://github.com/GaloisInc/cryptol/blob/master/docs/ProgrammingCryptol.pdf"
crypto,2i8zxw,tom-md,1 point,Mon Oct 6 03:50:45 2014 UTC,"yes, the source code repository on github is exactly the link for examples I was referring to.  WRT broken links, feel free to report any.  The website has recently changed so links from external sites will probably be broken but it should certainly be internally consistent."
crypto,2i8zxw,tom-md,1 point,Sat Oct 4 04:37:21 2014 UTC,some of the broken links are in blog posts or links to blog posts.  what's your affiliation with cryptol?
crypto,2i8zxw,tom-md,3,Sat Oct 4 04:42:09 2014 UTC,I work for Galois and sometimes (very rarely) on Cryptol.  EDIT: All statements and opinions are my own and not representative of my employer etc etc.
crypto,2i8zxw,wonkadonk,1 point,Sat Oct 4 04:42:44 2014 UTC,Can you tell your bosses to upload the Skein implementation to the github repository? It looks like there was one programmed in 2009.  I must say you responded quickly.
crypto,2i8zxw,aseipp,1 point,Sat Oct 4 04:46:32 2014 UTC,The Skein implementation would have been for an older version of Cryptol and won't immediately compile.  Implementing Skein would be a good way to learn if you're up for it.  Otherwise you could submit a ticket on github and I could encourage others to write one.
crypto,2i6q0m,KevinSpaceman,7,Fri Oct 3 13:34:21 2014 UTC,"Context might be helpful here: can you tell us why you need to get in contact with someone? Is there a list of questions that you could just post for the general population to see, or are you looking to just have a PM/email conversation with a single person over the next seven months? What aspects of ECC are you wondering about; do you need to know more about the underlying theory or more about implementation details?"
crypto,2i6q0m,rossiohead,2,Fri Oct 3 14:08:54 2014 UTC,"I'm working on the theory part, and ideally it would be an email conversation from november til march is my rough guess, it's for engineering school entrance exams in France, 2nd year university level."
crypto,2i6q0m,rossiohead,3,Fri Oct 3 16:33:41 2014 UTC,"You might try asking in /r/math as well then, since the focus is on theory, and make clear that you're looking for a sort-of research pen-pal arrangement.  :)  I could be wrong, but I personally tend to get a more ""applied"" vibe from /r/crypto."
crypto,2i6q0m,fetal_infection,2,Fri Oct 3 16:57:26 2014 UTC,"Will do thanks ! I'll probably be back with a set of questions on implementation and such later, once I'm more set on everything"
crypto,2i6q0m,Ar-Curunir,4,Fri Oct 3 17:15:47 2014 UTC,I did my undergraduate thesis on the discrete logarithm problem and touched on elliptic curves to a pretty good extent if you wanted to look at my paper. What level of depth are you looking for into the theory?  Source: I am a mathematician.
crypto,2i6q0m,fetal_infection,2,Fri Oct 3 19:18:08 2014 UTC,"Check out the book Mathematics of Cryptography by Hoffstein, Pipher and Silverman. Cotains a very good overview of ECC."
crypto,2i6q0m,silverforest,2,Fri Oct 3 18:59:08 2014 UTC,Also this book has a great chapter on ECC: http://crypto-textbook.com/
crypto,2i6q0m,bitwiseshiftleft,1 point,Fri Oct 3 19:16:44 2014 UTC,"HEHCC would be a better suggestion, covering elliptic and hyperelliptic curves in a crypographic context."
crypto,2i6q0m,k1nkyk0ng,1 point,Fri Oct 3 20:19:34 2014 UTC,Or Elliptic Curves: Number Theory and Cryptography by Washington.
crypto,2i46eh,wonkadonk,14,Thu Oct 2 18:53:37 2014 UTC,"Companies used to pay thousands for aes hardware acceleration, now its built into practically every processor.  What a time to be alive."
crypto,2i46eh,subuserdo,1 point,Thu Oct 2 19:51:52 2014 UTC,Arguably CPUs are more expensive then ASICs depending on the scale.
crypto,2i46eh,conradsymes,4,Sat Oct 4 05:06:05 2014 UTC,"Session resumption re-uses the same AES key (or whatever algorithm) as the previous session. Am I understanding that correctly?  I know it is built into the TLS specification, but I have to wonder whether re-using the key is really that good of an idea."
crypto,2i46eh,krudler5,9,Thu Oct 2 21:00:40 2014 UTC,"CloudFlare (and many other modern hosts) support ECDHE and ECDSA, using 'perferct-forward' secrecy requires a new ephemeral key to be generated per session. These keys then generate the AES key, which is then different every session. You are correct though and with other older combinations such as RSA-AES you will end up re-using keys.  http://en.wikipedia.org/wiki/Elliptic_curve_Diffie%E2%80%93Hellman  http://en.wikipedia.org/wiki/Forward_secrecy"
crypto,2i46eh,meeb,2,Thu Oct 2 21:49:03 2014 UTC,"Fortunately there are TLS-implementations that let you disable session resumption. And heartbeat, and a lot of other nifty ideas that don't belong inside a crypto protocol."
crypto,2i46eh,3pg,1 point,Fri Oct 3 02:58:01 2014 UTC,"Session resumption uses the same TLS session key. For each connection a new AES key is derived from the TLS session key. So though the TLS session key stays the same, the AES key does not (it changes on every connection).  The advantage of reusing the previous TLS session key is to avoid a full 4-way handshake."
crypto,2i46eh,omegga,8,Sat Oct 4 23:24:22 2014 UTC,"Chacha20/Poly1305 is just as free on modern processors, and still fairly free on older processors without being full of sidechannels!"
crypto,2i46eh,floodyberry,5,Fri Oct 3 01:22:37 2014 UTC,And even freer on things like mobile phones!
crypto,2i46eh,kingkilr,4,Fri Oct 3 01:56:05 2014 UTC,"ARMv8 (AArch32/64) does has AES acceleration (starting with iphone 5s apparently), but I haven't seen benchmarks for it. Without AES acceleration though.. shit's painful."
crypto,2i46eh,floodyberry,2,Fri Oct 3 04:08:32 2014 UTC,Far less common (non-existent?) on Androids I think :-( http://googleonlinesecurity.blogspot.com/2014/04/speeding-up-and-strengthening-https.html
crypto,2i46eh,kingkilr,2,Fri Oct 3 05:22:08 2014 UTC,"Yes, but unfortunately not an option right now since it's not a standard TLS ciphersuite. I still think Chrome talking to Google servers is the only setup that will use Poly1305/ChaCha20 for TLS today as it stands, and only if the client doesn't support AES-NI already.  I think the last IETF draft for the ciphersuite addition expired, and I believe an amended/revised draft was planned, but I don't know the status of it. Anyone know about that?  I really hope it happens soon or at least for TLS 1.3; we really need a good alternative to AES-GCM, and ChaCha20/Poly1305 seems to be an excellent high-security complement, while being small very easy to implement."
crypto,2i46eh,aseipp,1 point,Sat Oct 4 03:14:51 2014 UTC,"Well, the only way to get firefox to implement it is to write some code."
crypto,2i46eh,conradsymes,1 point,Sat Oct 4 05:40:25 2014 UTC,"In all honesty - I pretty much have zero incentive or drive to write patches for libnss for Firefox. But luckily I don't have to; Google did most of the work already!   http://googleonlinesecurity.blogspot.com/2014/04/speeding-up-and-strengthening-https.html https://bugzilla.mozilla.org/show_bug.cgi?id=917571 http://tools.ietf.org/html/draft-nir-cfrg-chacha20-poly1305-02 http://tools.ietf.org/html/draft-mavrogiannopoulos-chacha-tls-02   Interestingly, the ChaCha20/Poly1305 TLS proposal (#4) expired last month, while the IETF draft standardizing ChaCha20 and Poly1305 expired today.  In any case, it looks like this is moving forward steadily. I hope we'll see this in TLS 1.3."
crypto,2i46eh,aseipp,4,Mon Oct 6 02:42:10 2014 UTC,AES is cryptographically more secure in a sense that it's inspected and studied by thousands and thousands of cryptographers because it's so widely used.  Chacha20 is very much less used and there for also studied much less.
crypto,2i46eh,boarhog,3,Fri Oct 3 11:41:56 2014 UTC,"it is studied, and found weak against side channel attacks. side channel safe implementations are complex and slow. if not the intel move, aes would in a really serious trouble now, and we could probably move on to more modern ciphers. aes-ni is actually a tragedy to crypto, not something to celebrate."
crypto,2i46eh,pint,1 point,Fri Oct 3 12:08:29 2014 UTC,It's only a problem if your application is vulnerable to side channels.
crypto,2i46eh,pint,1 point,Fri Oct 3 12:36:32 2014 UTC,"so we choose algorithms that don't have this problem. salsa and keccak (keyak, ketje) are good candidates."
crypto,2i46eh,pint,1 point,Fri Oct 3 12:51:41 2014 UTC,Except if you have to interoperate with people using standards ...  It's funny we all bitch when our appliances have non-standard interfaces but you don't bat an eye at suggesting we use non-standard stuff here...
crypto,2i46eh,pint,1 point,Fri Oct 3 13:06:44 2014 UTC,we are suggesting new standards. it is utterly ridiculous that salsa could not gain more momentum in 5+ years. how much it takes to implement? 3 months?
crypto,2i46eh,bitwiseshiftleft,1 point,Fri Oct 3 13:21:16 2014 UTC,"In this we have complete agreement.    Though to be fair they'd do their case more justice if they had sane and clean reference C implementations where weren't full of hacked types like ""#define unsigned char MABYTE"" and whatever...  Usually when I get tasked with implementing some stupid cipher/hash I look for public domain implementations.  If they exist [and perform well] I find it cheaper to just clean up their interfaces to something more portable than write it from scratch.  For AES I took their fast code, for Twofish I wrote my own... etc...  DJB isn't known for writing sane portable code..."
crypto,2i46eh,floodyberry,2,Fri Oct 3 13:24:52 2014 UTC,"djb is not known to be sane. however, we have plenty of programmers all over the world.  let me add that writing sane code is not very widespread. the only reason i don't use nacl is that the original does not compile on windows, and libsodium has a 17 thousand line install script that failed on some 16 thousandth. i choose nacl over libsodium any time of the day, except alas not on windows."
crypto,2i46eh,pint,1 point,Fri Oct 3 13:36:29 2014 UTC,"AES is better established, but Salsa and Chacha have been fairly high-profile for several years now, and the full 20-round versions have a very large margin of security.  Chacha is broken at 6/20 or 7/20 rounds (with a 128 or 256-bit key), vs AES at 7/10 or 9/14."
crypto,2i46eh,floodyberry,2,Sat Oct 4 20:51:48 2014 UTC,Um ... you realize they implement AES as opcodes that are timing invariant right?  Your post is nonsensical fanatic idiocy.
crypto,2i46eh,floodyberry,2,Fri Oct 3 12:35:31 2014 UTC,They do that on older processors without AES-NI?
crypto,2i46eh,bitwiseshiftleft,1 point,Fri Oct 3 12:48:14 2014 UTC,"for example if you use windows crypto API, you still uses old, side channel vulnerable aes even on modern processors. aes-ni is used only in the next gen api."
crypto,2i46eh,rosulek,1 point,Fri Oct 3 12:56:11 2014 UTC,AESNI has been around in Intel processors for a while now.  Chances are the CloudFlare servers have those opcodes hence their post ...
crypto,2i46eh,floodyberry,1 point,Fri Oct 3 13:07:27 2014 UTC,and still fairly free on older processors without being full of sidechannels   I was referring to implementations on older processors being full of sidechannels.
crypto,2i46eh,pint,1 point,Fri Oct 3 13:30:08 2014 UTC,There is no comparison.  AESNI completes in 10-14 rounds per block versus 100s of cycles.  When you're dealing with gigabits of data that order of magnitude matters.
crypto,2i46eh,floodyberry,1 point,Fri Oct 3 13:54:52 2014 UTC,"I'm not saying Cloudflare should run everything on non AES-NI cpus. Obviously when their traffic is 99% AES, it's a great idea. I'm saying anyone who wants to doesn't need an AES-NI cpu to get ""practically free of performance cost"", and not only on the server. Especially considering Cloudflare is running on Sandy Bridge, which is ~2.5cpb for AES128-GCM, and ~6cpb for AES128-CBC-SHA1. Chacha20/Poly1305 is <5cpb on pretty much any Intel with SSSE3. Chacha8/Poly1305 (still unbroken) is actually the same speed as AES128-GCM on AES-NI machines!   Obviously for SSL there will be little benefit until the code gets in to all the major clients and servers, but CloudFlare don't seem to mind that:   Up until the launch of Universal SSL this week, all but a hundred sites on the Internet used RSA-based certificates. Universal SSL is the first large-scale deployment of ECDSA keys for TLS. This is the first major step towards bringing the advantages of elliptic curves onto the web."
crypto,2i46eh,pint,1 point,Sat Oct 4 21:21:34 2014 UTC,I'm not officially against other algorithms though I'd rather lean conservative then speedy all the time.  The issue is standards compliance.  Rolling your own crypto is how people get into trouble.
crypto,2i46eh,fuckoffplsthankyou,1 point,Mon Oct 6 11:45:00 2014 UTC,"You can do it efficiently without timing problems on older Intel processors which have the SSSE3 ""pshufb"" instruction.  I think this may have eventually made it into OpenSSL.  Of course, it's not nearly as fast as AES-NI for large amounts of data."
crypto,2i46eh,destsk,1 point,Sat Oct 4 20:44:17 2014 UTC,"I can't be sure, but it sounds like you're saying that AES is full of sidechannels. If so, please elaborate."
crypto,2i46eh,fuckoffplsthankyou,1 point,Fri Oct 3 05:42:32 2014 UTC,"Without hardware acceleration, AES and GCM are usually implemented with tables to achieve any sort of speed, and even then it's still slower than Chacha20/Poly1305. Side-channel protected implementations are laughably slow."
crypto,2i46eh,XSSpants,1 point,Fri Oct 3 07:13:00 2014 UTC,not laugably. gpu/simd implementations are useable. the real problem is complexity.
crypto,2i46eh,fuckoffplsthankyou,1 point,Fri Oct 3 12:09:20 2014 UTC,"The best side channel protected AES-GCM implementation is ~21cpb on a Core 2, while Chacha20/Poly1305 is ~4.5cpb. For short messages the discrepancy is much higher due to the setup required for AES-GCM."
crypto,2hyad5,SMACz42,25,Wed Oct 1 02:07:00 2014 UTC,"I've read it a couple of times over the last ten years or so, and loved it. It's a pretty long book. It takes a little commitment to read it, but well worth it.  Because of Cryptonomicon I got interested in codes and encryption and have really enjoyed studying them ever since.  I love how big Neil  Stephenson books are. Not in page count, but in scope. They usually cover a pretty epic scope and Cryptonomicon is no exception."
crypto,2hyad5,andtheamericanway,7,Wed Oct 1 03:22:34 2014 UTC,My job is a glorified reading period it's so dull. So i'll have to check it out!
crypto,2hyad5,skintigh,5,Wed Oct 1 04:54:27 2014 UTC,"""The Code Book"" is an entertaining non-fiction that covers stuff like how (not why) the Rosetta Stone was so important."
crypto,2hyad5,andtheamericanway,2,Wed Oct 1 17:42:29 2014 UTC,"I would highly recommend this book as well. I read it shortly after  Cryptonomicon and it was able to give me a lot more of the information I wanted. It's a pretty accessible book too. Lots of information, but not so much it's  overwhelming."
crypto,2hyad5,exili,2,Wed Oct 1 22:12:47 2014 UTC,Read it. Loved it. It filled in a lot of blanks.
crypto,2hyad5,andtheamericanway,1 point,Sun Oct 5 03:53:06 2014 UTC,Wait. Was Code Book mentioned in Cryptonomicon? Cause if it was I totally missed it. Crytponomicon is one of my favorite books. Just reread it and I wish I new so much more on encryption/programming in general.
crypto,2hyad5,scopegoa,1 point,Thu Oct 9 03:20:55 2014 UTC,"Just got it delivered today!!! I'll check if it's mentioned.  As far as encryption/programming, have you dabbled in python at all?"
crypto,2hyad5,djdavetrouble,3,Sat Oct 11 03:26:49 2014 UTC,"It's funny, I've read 4 or five Neil Stephenson books and have never gotten around to Snow Crash. I've always heard it recommended though. I'll have to move it up my reading list."
crypto,2hyad5,scopegoa,3,Wed Oct 1 21:52:43 2014 UTC,"It's really good, but it definitely feels more action packed thriller dare I even say shallow feel compared to his other books.  It's honestly simultaneously one of my favorites and least favorite. I love it because it's such an easy and fast read, yet so immersive. Yet like I said, compared to his other works it lacks depth (we're speaking relatively here. Snow Crash is still awesome compared to most authors)."
crypto,2hyad5,phyzome,1 point,Wed Oct 1 22:06:19 2014 UTC,"I would agree that Snow Crash feels a little like an action cyberpunk pulp novel, but he actually put quite a bit of research into it. I tried to get into cryptonomicon but didn't have the time, looking forward to ""cracking"" it again this winter."
crypto,2hyad5,DrGrinch,1 point,Thu Oct 2 01:20:28 2014 UTC,"It took me a few attempts as well, but it was well worth it. There are so many deep themes."
crypto,2hyad5,Hipstershy,15,Wed Oct 8 15:42:03 2014 UTC,"It's a sprawling mess and I can't remember the plot for the life of me, but I know it was a good read and there were a lot of neat ideas in it. Go read it.  (Oh, and if you're like me, the historical fiction aspects of it will forever contaminate your knowledge of the real lives of historical figures, but that's probably not specific to this book.)"
crypto,2hyad5,cha0sengineer,3,Wed Oct 8 18:28:49 2014 UTC,"Cryptography, Nazi Gold, Virtual Currency, Fibre Optics, and WW2."
crypto,2hyad5,AgedAardvark,10,Wed Oct 1 12:04:40 2014 UTC,"It's amazing. I sort of consider it the adult version of Little Brother by Cory Doctorow, which is one of the few books I've ever described as life-changing,  though I admit it's not necessarily because the book is that great in and of itself, but because it was just the right book at the right time for middle-school me. Anyway, my point is if you like Cryptonomicon, you might want to try reading Little Brother. It's free on Doctorow's website."
crypto,2hyad5,drewofdoom,3,Wed Oct 1 19:00:31 2014 UTC,adult version of Little Brother   ... And Reamde is just Stephenson's answer to FTW :O
crypto,2hyad5,exili,6,Wed Oct 1 05:38:47 2014 UTC,Great book.  10/10.  I think I've read it 3 times.
crypto,2hyad5,syadasti,5,Wed Oct 1 12:15:20 2014 UTC,Excellent book. Tied with Diamond Age for my favorite Stephenson.
crypto,2hyad5,Spncrgmn,1 point,Wed Oct 1 14:53:13 2014 UTC,Same here.
crypto,2hyad5,skintigh,9,Wed Oct 1 13:48:43 2014 UTC,"It's good, but the original Necronomicon is better."
crypto,2hyad5,Ar-Curunir,5,Thu Oct 9 03:22:40 2014 UTC,"Sure, but who has a copy? The only person I know who has one found it in the attic after going through their grandparent's belongings, and even he couldn't hold back the B̵̒̄͊̽̊ͩ̐͟҉͈͖̠̟͎̩͉̮ͅṞ̵̴̸͍̪̹̣͎̮͍̭̟̬̤̤͍̙̆͛͗ͥ͆ͬ̿̍̀͛͂̇ͦ̎̔͊͢͠Q̛̪̭̫̥̖̹͇̙̥̱͈̫̞̾̎̿̋͜͜͞Q̴̼̫̮̠͓̺̭̟̻͇̤̻̗̗̻̄ͧ͆ͯͨ̇̊̈̂͢B̴̸̨̛͖͕̪̺̯̪̲͖̙͇͗ͬ́́ͦ̿͌ͬͅQ̷̡́̒̌̉ͤ̂͐̍̔̚͡͏̵͔̫͎͈͖͉̼̣͕̮̱͈̱̘Ṛ̠͖͙̹̰̙̳͖̬̺̺͍̲̐ͨͥ̌ͦͫ̌ͦ̌͑̋ͪͮ͜B̸̝͉͈͎̹̺̠̮̬͎̥͎̻͌ͮͯͩ̔̀̓̎̓̌̇̃̕͘Qͫ́̀̄ͥ͆͌ͤ̎́͌̚͏̨̪͙͖̙̜͙̥̺̳͔̲Ŕ̵̨̡̯̦̘̞͎̥͉ͫ̈́̾̌̏ͧ̈́͊ͪ̌̑̔͆ͤ̏͋͗͌͞"
crypto,2hyad5,Spncrgmn,3,Wed Oct 1 03:24:19 2014 UTC,"It's a pretty good book. If you don't know much about crypto it's probably a lot more fun (and educational) than reading it when you already know all the techniques that are about to be used, but it was still entertaining. The ending sucked though."
crypto,2hyad5,dioltas,3,Thu Oct 2 17:36:30 2014 UTC,"I love the book, it's what got me into cryptography. I have a signed copy from Stephenson, so happy =)"
crypto,2hyad5,KayRice,3,Wed Oct 1 17:39:34 2014 UTC,"The value of the Cryptonomicon is that it takes the reader through a historical journey of cryptology, starting in WWII and building up to more modern techniques. It's no replacement for a crypto course or a book on modern technique, but I don't think there's any better way to get someone excited about the possibilities of cryptology and introducing them to the theory and practice of some cryptology. It's pretty mature, and I wouldn't hand it to a 15 year old, but if you know a youngish person who can handle very adult humor, loves xkcd, and is interested in comp sci (whether or not they know any programming), then Cryptonomicon is the kind of book that can really push them towards comp sci."
crypto,2hyad5,flashurnands,2,Wed Oct 1 17:56:16 2014 UTC,"That's me! Sweet. I know I also read The Code Book, which is very dry. But I love something to lighten the mood every now and again."
crypto,2hyw4s,daedalusmythos,2,Wed Oct 1 06:26:48 2014 UTC,"Windows, Linux and Mac? For whole disk encryption, I think TrueCrypt is the only well known option. For cross platform file-by-file, it's Boxcryptor.  http://www.reddit.com/r/crypto/search?q=cross+platform+encrypted+drive&t=year https://www.boxcryptor.com/en/boxcryptor"
crypto,2hyw4s,ahazred8vt,1 point,Wed Oct 1 20:39:22 2014 UTC,"Well then TrueCrypt it is, it's just that I've never used TrueCrypt up to now and I'd be most grateful for any helpful advice. Do I create a new encrypted container with TC and move the data from the drive to the drives newly created container? sry for being this new"
crypto,2hyw4s,Natanael_L,2,Thu Oct 2 06:28:08 2014 UTC,"If the drives have the data unencrypted already: move it off them, wipe the drives clean with something like Eraser, then create a TC volume on the drive and place the data in the volume.   If the drives have been clean from the start (never held secret data): just create the TC volume and place the data there."
crypto,2hypww,based2,5,Wed Oct 1 04:58:55 2014 UTC,Just so we're clear ECDSA is just a variant of ElGamal signatures where the group operation is point multiplication.  ECDSA isn't even the ideal implementation of signatures.  EDDSA is closer (though the spec at least in draft was poorly written) since it's deterministic and doesn't rely on RNG quality.
crypto,2hypww,bitwiseshiftleft,3,Wed Oct 1 11:38:53 2014 UTC,"EdDSA is better not just because it's deterministic, but because it's simpler, faster and more obviously secure than ECDSA.   The inversion steps in ECDSA are complex and completely unnecessary.  They are also a target for side channel attacks. The hashing/challenge scheme in EdDSA makes it clear why the system is secure, and leads to a security argument in the ROM; the completely ad-hoc challenge in ECDSA does not. EdDSA does not require collision resistance. EdDSA is faster because it uses Edwards curves."
crypto,2hypww,Natanael_L,1 point,Fri Oct 3 22:11:22 2014 UTC,There's deterministic ECDSA using SHA1 of the private key and the data to be signed.
crypto,2hypww,pint,3,Fri Oct 3 20:12:23 2014 UTC,Ya .... uh .... eddsa ....
crypto,2hypww,danukeru,2,Fri Oct 3 20:38:04 2014 UTC,"the ECDSA vs RSA section utterly fails to support the claim that we need to move to the proposed scheme. the only interesting thing from the users' POV is increased security compared to 2k RSA keys. it is good, but not urgent."
crypto,2hypww,pint,1 point,Wed Oct 1 14:39:43 2014 UTC,"Well...convincing most people that RSA may theoretically be broken within the near future is not easy.  And I'm not talking about quantum computing...people claiming that will break RSA within 5 years are nut-jobs.  Rather, better number sieves, but especially recent observations with regard to the Riemann zeta function that seems to have experimental evidence to new relations between primes and their divisors.  As in the abstract: ""The goal of this paper is to present numerical evidence for a (presumably new and not yet proved) method for revealingall divisors of all natural numbers from the zeroes of the zeta function.""   http://logic.pdmi.ras.ru/~yumat/personaljournal/artlessmethod/talks/leicester2012/leicester_2012_full.pdf  What seems like a reasonable primer on the ideas I'm talking about:  http://csis.bits-pilani.ac.in/faculty/murali/netsec-09/seminar/refs/atharvasrep.pdf"
crypto,2hypww,bitwiseshiftleft,1 point,Thu Oct 2 07:59:14 2014 UTC,"but you see, you attempted to convince people, with some success. while the author of linked article listed very bad reasons, achieving only the opposite of what he wanted. when it comes to TLS, client side CPU demand is simply irrelevant. signature and public key sizes are also irrelevant. and 80 bit security will not deter anybody today.  i'm a fan of EC, but not the archaic and clumsy old ones, but the new ones, like 25519 or similar. those are fast and streamlined."
crypto,2hypww,kardos,1 point,Thu Oct 2 08:20:31 2014 UTC,"Server-side CPU is important.  Nick claimed that CloudFlare couldn't (easily) afford to roll out universal SSL with RSA keys, but they could with ECDSA."
crypto,2hypww,pint,1 point,Fri Oct 3 22:14:18 2014 UTC,You posed a http link when a https link is available? In /r/crypto? You can do better than this OP ಠ_ಠ
crypto,2hypww,3pg,3,Wed Oct 1 17:25:27 2014 UTC,"Sorry, improved: https://blog.cloudflare.com/ecdsa-the-digital-signature-algorithm-of-a-better-internet/"
crypto,2hxpni,hidden-markov,2,Tue Sep 30 22:50:12 2014 UTC,"I'm actually using PIR in my research (Crypto Ph.D Student)  PIR enables you to lookup for a cell in a database without the database noticing wich cell you were interested in.  In my work we use it to search for words in a document at a server without the server noticing which word we were looking for.  My research team has published a paper, PRISM (the name has no link with the NSA program), that does this.  The idea is the following : - you say ""hey server ! create a matrix, hash each word (public hash fn) in the file and each time you put a 1 at this address in the matrix "". - say you want to search for the word ""house"". You hash it and perform a PIR on that matrix, targetting the position corresponding to the hash you got. - if you obtain a 1, the document does contain the word ""house"", else it does not. However the Server has no idea which word you were looking for. For big matrices (big possible words domain) performing PIR is more efficient than downloading the whole matrix."
crypto,2hrt3x,simpleuser,5,Mon Sep 29 08:12:09 2014 UTC,"At one point I thought of making a paper wallet using nothing but pencil and paper.  That mostly involves doing a elliptic curve scalar multiplication to generate the public key. You can pre-calculate a lot of multiples of the generator, but you still end up doing lots and lots of multiplications and division modulo a 256 bit prime.  My conclusion: infeasible. But please proof me wrong!"
crypto,2hrt3x,Remco_,2,Mon Sep 29 17:18:36 2014 UTC,You could probably do it with a graphing calculator and a custom bignum program.
crypto,2hrt3x,Lugnut1206,2,Mon Sep 29 22:30:02 2014 UTC,"But how do I know the NSA is not in my calculator?  The paper is obviously hand scooped, and for a pencil I would use a piece of burned wood, so I know they can be trusted."
crypto,2hrt3x,Remco_,2,Tue Sep 30 13:03:55 2014 UTC,At one point I thought of making a paper wallet using nothing but pencil and paper.   I took it a step father and just carry money that's mostly made out of paper in a leather wallet.
crypto,2hrt3x,AirPhforce,2,Tue Sep 30 01:44:23 2014 UTC,"I like the walk-through of SHA256. And this part   As can be seen from the diagram above, only A and E are changed in a round. The other values pass through unchanged, with the old A value becoming the new B value, the old B value becoming the new C value and so forth. Although each round of SHA-256 doesn't change the data much, after 64 rounds the input data will be completely scrambled."
crypto,2hrt3x,bearsinthesea,1 point,Mon Sep 29 17:15:24 2014 UTC,"Now if only there was a ""getwork36hoursinthefuture"" function call so the block wouldn't be long gone by the time you finish the hash"
crypto,2hrykh,electronics-engineer,2,Mon Sep 29 10:07:37 2014 UTC,This has been discussed in other comments but why wouldn't HMAC over the bootloader ciphertext not suffice to prevent against the attack (or a digital signature if asymmetric crypto is used)?  The problem I see is that you can input garbage and have AES decrypt it.
crypto,2hrykh,cunttard,2,Wed Oct 1 03:21:01 2014 UTC,What are the assumptions for this attack? Is the password in the loader somewhere?  Does the user enter the password 50 times so that the attacker can analyze the power levels?  How would it be implemented in the real world? Secretly put a device on a CPU and monitor power levels without the user knowing?
crypto,2hrykh,nwad15,3,Mon Sep 29 17:02:28 2014 UTC,Who said anything about a password?  This is an encrypted bootloader and a secret key stored somewhere in an embedded device.
crypto,2hrykh,tom-md,3,Mon Sep 29 20:26:53 2014 UTC,"Anyone with more knowledge, feel free to correct what I'm about to say (it is probably wrong). What I say below is in the context of a microcontroller.  An encrypted bootloader is the (one of the) first executable which loads in a system. Encryption protects the bootloader code from being inspected in plaintext and probably prevents unauthorised firmware updates (probably need to set debug locks).  A bootloader can be stored in non-volatile RAM, ROM, or loaded via JTAG, USB, or some other form. I suspect in this article garbage data was sent in the guise of an encrypted bootloader, which was first decrypted, but later fails the signature check. This was sufficient to perform side channel analysis.  I felt the article didn't touch on the function of an encrypted bootloader for the sake of brevity."
crypto,2hrykh,cunttard,1 point,Thu Oct 2 00:09:34 2014 UTC,Cool but this is also why a decent boot loader would have a digital signature as well.
crypto,2hrykh,tom-md,3,Mon Sep 29 11:18:09 2014 UTC,"To be clear, the system in question did have a signature but that signature was not well constructed (the plaintext needed to begin with a particular set of bytes).  Once the key(s) are compromised (symmetric or otherwise) it isn't clear a more traditional signature, such as an HMAC, would provide any benefit."
crypto,2hrykh,tom-md,2,Mon Sep 29 20:26:03 2014 UTC,hmac/etc is not a signature.
crypto,2hrykh,floodyberry,3,Mon Sep 29 22:21:26 2014 UTC,"In its most general definition, a signature is a proof (or, evidence) of identity.  Never-the-less, yes an asymmetric solution would be neat but perhaps it isn't used due to the extra pennies it would cost for suitable hardware in the authors embedded setting(?).  From a crypto perspective this can get tedious fast but from a business perspective the question interests me."
crypto,2hrykh,autowikibot,2,Mon Sep 29 23:10:01 2014 UTC,"A MAC and a signature fulfill some of the same needs, but are not the same, see MAC#Security  A signature has no key to be compromised unless they seriously screwed up the implementation, e.g. PS3."
crypto,2hsjta,Ciphertext008,1 point,Mon Sep 29 14:59:20 2014 UTC,better link https://eprint.iacr.org/2014/755/20140929:083250
crypto,2hmzty,e_to_the_pi_i_plus_1,10,Sat Sep 27 19:30:18 2014 UTC,"No, you mean 28/09/2014.  It's Eurocrypt, not UScrypt.  Eugh."
crypto,2hmzty,rjek,5,Sun Sep 28 09:35:21 2014 UTC,As an aussy. I feel your pain.
crypto,2hmzty,Cynofield,2,Sun Sep 28 10:41:15 2014 UTC,2014-09-28  ISO or else!
crypto,2hmzty,Natanael_L,1 point,Mon Sep 29 18:55:34 2014 UTC,PKC (http://www.iacr.org/workshops/pkc2015/cfp.html) and TCC (http://www.iacr.org/workshops/tcc2015/) next week October 6!
crypto,2hmzty,laruizlo,1 point,Sat Sep 27 19:31:20 2014 UTC,Aaaaaaahhh... (Panic attack)
crypto,2hirl3,zeroXten,1 point,Fri Sep 26 12:08:53 2014 UTC,"Looks pretty good and fool proof. The logic seems solid and prevents f-ing up the encrypt-then-mac idea. But I'm no real crypto expert, so maybe someone else will have another view ;)  I will consider using it if we need symmetric encryption in some future project, especially if you release it as a gem."
crypto,2hirl3,boes,1 point,Fri Sep 26 15:08:30 2014 UTC,"Cool, thanks for the feedback. It isn't quite finished yet so haven't bothered releasing a gem but will do soon."
crypto,2hirl3,kingkilr,1 point,Fri Sep 26 15:22:03 2014 UTC,Released as a gem now.
crypto,2hirl3,rya_nc,1 point,Mon Oct 6 13:34:42 2014 UTC,"Why is this better than Fernet, which already has Ruby, Python, Clojure, and Go implementations: https://github.com/fernet/"
crypto,2hirl3,rya_nc,1 point,Fri Sep 26 16:08:18 2014 UTC,"They look pretty similar. I wasn't familiar with fernet. Anyway, that seems to be more focused on tokens as it enforces a TTL of 60 seconds by default.  Edit:  It looks like fernet takes a 256bit secret and suggests using a dd on /dev/urandom for generating the secret. Therefore, 90% of users will probably create a crap secret. Crypto takes a ""password"" and passes it through a KDF to get a better (salted) key. Also, it looks like they're using 128 bit AES."
crypto,2hfjnm,destsk,1 point,Thu Sep 25 14:16:32 2014 UTC,"I did this challenge, but have since lost my code.  This website should get a forum or subreddit so people can share ideas kind of like project euler.  pm me if you want some feedback, but keep in mind that my experience is extremely limited."
crypto,2hfjnm,petester,1 point,Thu Sep 25 16:53:52 2014 UTC,Just sent you a pm :)
crypto,2hfjnm,disclosure5,1 point,Thu Sep 25 19:40:47 2014 UTC,Definitely agreed. I don't want to flood this place talking about one challenge - but there's an incredibly amount of room for discussion and learning on these challenges without just giving answers.
crypto,2hfjnm,disclosure5,1 point,Thu Sep 25 23:37:41 2014 UTC,"I've completed to challenge 52. PM me some information about what you've got and I'd be happy to discuss it.     On that particular question, if you can get English text as output, you know you have solved it. Edit: I believe there are several options to this. Some of the solutions on Github are much more difficult than mine. The fact remains, my solution continued to work when pasted in later, more involved statistic challenges, so I really don't think it matters."
crypto,2hfjnm,Dillinur,1 point,Thu Sep 25 23:52:10 2014 UTC,Just sent you one.
crypto,2hcd4z,peacefulanimal,12,Wed Sep 24 16:36:06 2014 UTC,"Well, the format is a bit more complex than you might expect.  Everything that OpenSSL deals with is ASN.1 encoded, which is a sort of ""binary container"" format.  For example, I just generated the following EC keypair:  $ openssl ec -in k.pem -noout -text read EC key Private-Key: (256 bit) priv:     7d:86:0c:9a:9b:19:47:9b:19:1f:99:23:a7:12:b0:     96:35:2f:b7:38:bb:9c:13:df:f9:43:43:58:f2:26:     23:bc pub:      04:f1:44:f0:dc:00:80:af:d2:b7:3f:13:37:6c:3f:     7f:09:05:f9:d3:85:8e:83:ba:15:27:58:a3:d6:48:     37:b2:15:32:c5:68:97:cb:31:8e:19:08:49:87:16:     c3:82:cd:49:e3:15:6b:1d:ca:8c:45:c8:05:49:cd:     83:f4:58:56:1e ASN1 OID: prime256v1   If you look at the contents of the file, it's actually this:  $ cat k.pem  -----BEGIN EC PARAMETERS----- BggqhkjOPQMBBw== -----END EC PARAMETERS----- -----BEGIN EC PRIVATE KEY----- MHcCAQEEIH2GDJqbGUebGR+ZI6cSsJY1L7c4u5wT3/lDQ1jyJiO8oAoGCCqGSM49 AwEHoUQDQgAE8UTw3ACAr9K3PxM3bD9/CQX504WOg7oVJ1ij1kg3shUyxWiXyzGO GQhJhxbDgs1J4xVrHcqMRcgFSc2D9FhWHg== -----END EC PRIVATE KEY-----   Now, as you can see, those middle bits are base64-encoded.  Base64 decoding the private key part (between BEGIN/END EC PRIVATE KEY), you see that it actually consists of the following bytes (in hex):  30 77 02 01 01 04 20 7d 86 0c 9a 9b 19 47 9b 19 1f 99 23 a7 12 b0 96 35 2f b7 38 bb 9c 13 df f9 43 43  58 f2 26 23 bc a0 0a 06 08 2a 86 48 ce 3d 03 01 07 a1 44 03 42 00 04 f1 44 f0 dc 00 80 af d2 b7 3f 13  37 6c 3f 7f 09 05 f9 d3 85 8e 83 ba 15 27 58 a3 d6 48 37 b2 15 32 c5 68 97 cb 31 8e 19 08 49 87 16 c3  82 cd 49 e3 15 6b 1d ca 8c 45 c8 05 49 cd 83 f4 58 56 1e   If you look carefully, you'll see both the private key and the public key in there, but they're surrounded by what may at first seem to be ""superfluous"" bytes; those bytes are the ASN.1 container.  Here it is, broken down:  30  <-- declares the start of an ASN.1 sequence 77  <-- length of following sequence (119 bytes)     02  <-- declares the start of an integer     01  <-- length of integer in bytes (1 byte)         01  <-- value of integer (1)     04  <-- declares the start of an ""octet string""     20  <-- length of string to follow (32 bytes)         7d 86 0c 9a 9b 19 47 9b 19 1f 99 23 a7 12 b0 96 35 2f b7 38 bb 9c 13 df f9 43 43 58 f2 26 23 bc          \-----------------------------------------------------------------------------------------------------------/            this is the private key (compare to the output above)     a0   <-- declares the start of context-specific tag 0     0a   <-- length of context-specific tag (10 bytes)         06   <-- declares the start of an object ID         08   <-- length of object ID to follow (8 bytes)         2a 86 48 ce 3d 03 01 07  <-- the object ID of the curve prime256v1     a1   <-- declares the start of context-specific tag 1     44   <-- declares the length of context-sepcifc tag (68 bytes)         03   <-- declares the start of a bit string         42   <-- length of bit string to follow (66 bytes)             00 04 f1 44 f0 dc 00 80 af d2 b7 3f 13 37 6c 3f 7f 09 05 f9 d3 85 8e 83 ba 15 27 58 a3 d6 48 37 b2 15 32 c5 68 97 cb 31 8e 19 08 49 87 16 c3 82 cd 49 e3 15 6b 1d ca 8c 45 c8 05 49 cd 83 f4 58 56 1e             \---------------------------------------------------/              this is the public key (compare above)   How these are ultimately parsed is defined in http://tools.ietf.org/html/rfc5915; for instance, the starting integer is the version number (1).  A good ASN.1 primer can be found here: http://luca.ntop.org/Teaching/Appunti/asn1.html  So, back to your original question about taking a generated keypair in bytes and outputting a properly PEM-encoded private key; OpenSSL doesn't really have command-line tools for that, but you can use the library directly.  Take a look at:  apps/ecparam.c  <-- the main handler for ecparam, which does key generation crypto/x509/x_all.c  <-- the output routine to convert private key formats to ASN.1   in the source distribution."
crypto,2hcd4z,detailsguy,4,Wed Sep 24 18:59:23 2014 UTC,Thank-you so much for these details... I'm going to propose some changes to that page (http://kjur.github.io/jsrsasign/sample-ecdsa.html ) where it could provide both PEM openssl friendly and Hex jsrsasign friendly versions for clarity. I ended up being able to utilize a combination of +/u/GahMatar KEYUTIL.getPEM( ) approach with the openssl -text approach to get a good solution.
crypto,2hcd4z,GahMatar,3,Wed Sep 24 21:04:06 2014 UTC,"The PEM file contains more then just the key, there's the curve info in there as well.  That said, any reason you are wedded to the bits you got from that link rather then just generating a new key with openssl ecparam ?  BTW, in the same library:  KEYUTIL.getPEM(keyObjOrHex, formatType, passwd, encAlg)  get PEM formatted private or public key file from a RSA/ECDSA/DSA key object  NOTE1:     PKCS#5 encrypted private key protection algorithm supports DES-CBC, DES-EDE3-CBC and AES-{128,192,256}-CBC NOTE2:     OpenSSL supports"
crypto,2hcd4z,deathfantasy,2,Wed Sep 24 18:55:18 2014 UTC,"Private key files are stored in the PEM format, which is basically complicated ASN1 structures encoded in Base64.  You might want to convert your binary keypair into PEM using the openssl library."
crypto,2hcd4z,spiffiness,1 point,Wed Sep 24 18:35:22 2014 UTC,"So, right now, you've got an ASCII-encoded string containing hex digits that represent a long binary value. So for example, let's look at the first two bytes of your private key: ""43a0"". Since this is ASCII encoded, those two bytes' worth of data are actually stored as four ASCII bytes: 0x34336130  So you need to find a way to read in that ASCII-encoded string, convert it into a long native value (that is, store it as 0x43a0…, not 0x34336130…), and then take that native value and base64-encode it.  If you try to base64-encode the ASCII-encoded hex, you'll end up with something completely wrong and twice as long as it should be."
crypto,2hbg7c,RuddiV,2,Wed Sep 24 10:24:15 2014 UTC,"Look up recent works of Regev or Peikert or Micciancio.  I think the most relevant is the line of works connecting average-case-worst-case lattice problems.  Of course in creating lattice-based crypto, people tend to use a somewhat-equivalent, but more useful variants of lattice assumptions such as LWE or SIS.  There was also this recent paper in CRYPTO this year by Lenstra-Silverberg on extending the Gentry-Szydlo algorithm to attack certain potential constructions on certain ideal lattices with symmetry.  What I'm trying to say is that the landscape of both lattices and ideal lattices in crypto is quite complex, and understanding the fine line between the (sub-)exponential hardness levels is, as some people say, ""black magic"".  Don't be discouraged though, this is a very worthy subject to study as there are still some big open problems (such as creating multilinear-ish maps from straight LWE)."
crypto,2hbg7c,DoWhile,2,Wed Sep 24 20:13:03 2014 UTC,"Thanks for your reply.  The reason for my question is exactly that i Looked at Regevs, Peikerts, Micciancios etc work on connecting average-case-worst-case lattice problems. The security of LWE and SIS is based on reductions to worst case lattice problems (approximatively within poly factors), and that's why I'm interested in the complexity of these underlying lattice problems for different approximation factors.   Regev made a survey in 2007 (http://www.cims.nyu.edu/~regev/papers/lll.pdf) gathering results of the complexity of these problems. What i'm looking for is something similar to this, just including results up until now.  Cheers"
crypto,2h9874,i_c_x,5,Tue Sep 23 19:16:38 2014 UTC,Encrypted communications without having to share any key at all... this is so ground-breaking that no one should even use it.
crypto,2h9874,claytonkb,1 point,Wed Sep 24 06:42:55 2014 UTC,"From the website:   To send a message or file, I.CX uses the public key of your recipient to encrypt your content so that only they can open it."
crypto,2h9874,MattAsher,2,Wed Sep 24 15:14:52 2014 UTC,"TBH, I just watch the infomercial... so, the infomercial is highly misleading as it critiques the roundaboutness of PKI email... but then it implements exactly the same PKI system, just using direct file transfers instead of email. Anyway, I don't want to rain on anybody's parade, we definitely need as many people as possible trying to solve this problem of how to make the Internet private and anonymous... especially from the prying eyes of the State. We need to resurrect the old dream of the 1990's... a dream of unstoppable social and economic progress by means of liberty-through-you-cant-do-shit-to-stop-us. /rant"
crypto,2h9874,claytonkb,1 point,Wed Sep 24 18:03:08 2014 UTC,"I2P with Bote mail, Namecoin, Tahoe-LAFS (the I2P version behaves like Freenet), etc."
crypto,2h9874,Natanael_L,2,Wed Sep 24 19:48:35 2014 UTC,Anyone else confused about that massive URL?
crypto,2h9874,urbanAdmin,2,Tue Sep 23 22:59:39 2014 UTC,"3 characters should be enough for anyone...  The about page says the idea is that you see x, like the unknown, as in encryption ftw (see, 3 crs nuf for all)  EDT: fxd nuf"
crypto,2h9874,longgonenow,2,Wed Sep 24 00:33:33 2014 UTC,That is the URL that comes up when I load the page:  https://i.cx/?mode=table&arrows=true&rows=4&boxRatio=1.61&bigrows=2&bigcols=2&language=en&animation=true&query.sort=DESC&score.suValue=0.1&score.tluValue=1&score.maxSuValue=1&slider.show=true&slider.currentSlide=1&slider.totalSlides=7&slider.totalWizardSlides=4&table.column.refs.show=true&table.column.refs.weight=0.3&table.column.from.show=true&table.column.from.weight=0.7&table.column.to.show=true&table.column.to.weight=0.7&table.column.user.weight=1&table.column.content.show=true&table.column.content.weight=3.5&table.column.date.show=true&table.column.date.weight=1&table.column.date.allowSort=true&table.column.tags.weight=1.5&table.column.other.weight=1.5&table.column.score.weight=0.5&table.bar.tmp=1&table.sort.column=date&table.sort.desc=true&table.format=list&table.maxRowHeight=99&icx.screen=home
crypto,2h9874,urbanAdmin,2,Wed Sep 24 00:43:27 2014 UTC,Nice TLS  https://www.ssllabs.com/ssltest/analyze.html?d=i.cx
crypto,2h9874,Blitchiz,2,Wed Sep 24 21:11:33 2014 UTC,Can you check again? I'm now seeing ratings of 100 and 90.
crypto,2h9874,MattAsher,3,Fri Sep 26 01:00:36 2014 UTC,"From a comment in one of the site's JavaScript files:   Until we get some real crypto experts on board or a new js lib comes out that has good community support,  leave this code alone.   Sounds like good advice. I will stay away from this project."
crypto,2h9874,3pg,1 point,Wed Sep 24 05:35:39 2014 UTC,"If you're going to quote from the source code you should give the context as well:   Using bitcoin.js is pretty nightmarish for our purposes.   It pollutes everything with extraneous strings, always forces down to addresses,   and has a terrible API for compressed keys. Actually, the API is terrible in general.  It's also not currently maintained and is dog slow.   The point is that the core bitcoin library is a mess, but it does what we need (I'm one of the developers, though not of the core libraries). It's the same code used at btc wallet sites: if it had security flaws, there are billion dollar incentives to break them.   At any rate the comment is old, we've had a first review from a crypto expert and are doing a full external code audit. BTW the core interface to the crypto library was written by Dann Toliver, a well established js developer with a math degree."
crypto,2h9874,MattAsher,1 point,Wed Sep 24 11:35:56 2014 UTC,"Incidentally, your ""send message"" feature doesn't allow me to type in @-signs for email addresses."
crypto,2h9874,phyzome,2,Wed Sep 24 11:49:21 2014 UTC,it is absolutely impossible that this post has 15 genuine upvotes.
crypto,2h9874,pint,4,Wed Sep 24 08:35:20 2014 UTC,Bold claims with nothing to back them up but a giant steaming pile of javascript.
crypto,2h9874,GahMatar,0,Wed Sep 24 03:45:06 2014 UTC,"What do you want? A Youtube video of a guy reading the source code?  What has Tor except ""bold claims with nothing to back them up but a giant steaming pile of C++""? And Firefox? And...?"
crypto,2h9874,chiniwini,3,Wed Sep 24 09:03:20 2014 UTC,"Something else then a giant minified ball of slag?  Most of the crypto code doesn't live in their repo, or any repo that can be pointed at, it's hidden in bitcoin-min.js. Have you ever tried to make sense of a minified ball of code? Most of the method names have been replaced by numerical indices, the variables by single letters and some of it look like it was mechanically converted (a la emscripten). This is far more difficult to understand then proper, made for human, source code."
crypto,2h9874,GahMatar,3,Wed Sep 24 14:35:57 2014 UTC,Design documents for developers.
crypto,2h9874,phyzome,3,Wed Sep 24 11:29:21 2014 UTC,"Heh, as if it was common practice to provide them. Even many (most?) top OS proyects lack them.  It's just a web interface to puffball. If you check the html you'll see it uses pufball (PB.js and PB.Crypto.js). Also they state it pretty clear:  I.CX uses the puffball platform to handle distribution of encrypted content in a format known as a ""puff"".  I.CX is even part of the puffball source code tree, so it's probably made by the same guys:  https://github.com/puffball/freebeer/tree/master/js/icx  Here's the technical info:   http://www.puffball.io/#specs"
crypto,2h9874,chiniwini,5,Wed Sep 24 12:00:52 2014 UTC,"There is nothing about the crypto there. I spent 20 minutes trying to figure out how they use AES and I gave up. Hell, there are no less then 5 distinct RNG in there, only one of which is crypto strength (window.crypto.getRandomBytes) and it's optional and they don't have the MSIE one so don't use that code with MSIE because then you're getting Math.random() (i.e.: mersennes twister) and I wasn't able to connect the bignum generator they use for EC keys with the strong RNG...  Indeed, the crypto code does not live in their git repo either, it's an external dependency."
crypto,2h9874,GahMatar,3,Wed Sep 24 14:42:04 2014 UTC,"if you want to be credible: open source, reviewed, documented"
crypto,2h9874,pint,0,Wed Sep 24 12:41:36 2014 UTC,"""secure""... ""in browser""...  This will not do anything that HTTPS isn't already doing better."
crypto,2h9874,IlikeSalmiakki,2,Wed Sep 24 07:59:13 2014 UTC,"HTTPS secures communication in transit, but not once it arrives. In particular, if you store information in the cloud, it may be transmitted securely to where it's being stored, but then stored unencrypted once it arrives. Or it may be stored in an encrypted way, but the hosting provider has the keys to unencrypt. I believe this is why lavabit shut down, instead of having to hand over their master keys to users' email accounts.  In the case of icx, there is no master key, no backdoor, no way at all to recover the original content unless you have the private key of the recipient, which is never shared or sent over the network. It's generated on your computer by you directly, or by your browsers random number generator.   Please have a look at the short video and ""read about the technology"" link and if you still have questions let me know."
crypto,2h9874,MattAsher,1 point,Wed Sep 24 15:13:51 2014 UTC,"All of your points would be valid if the code that does the crypto is already on your computer. The problem with browser based crypto is, that the code that does the crypto comes from one entity, which is the entity you need to trust. The trap when thinking about this is to think that since the code is running on your machine, that you are doing the encryption; but that is not actually what's happening. Instead, the trusted entity runs code on your computer through javascript. This entity still does the encryption and merely lets your computer do the calculation.  The problem with this is, that you need to trust this entity to deliver correct code. This is normally done using SSL certificates in your browser; which also encrypts any communication from you to the trusted entity.  Let's look at the attack scenarios:   An attacker compromises your machine: System is broken An attacker manages to do MITM - in this case, the attacker needs to forge/control the SSL certificate. From this point on, the attack can deliver whatever code he wants. An attacker manages to compromise the trusted entity before or during communication; again they can deliver whatever JS-code they want. An attacker manages to compromise the trusted entity after communication: This is only safe, if the data that the trusted entity recieved is stored safely. But the code for this came in the javascript code - so you trust your entity to write good code. But then, they could as well just do the secure code handling after normal SSL delivered the data to them.   I don't see a scenario where running js-code in your browser does you any good compared to SSL."
crypto,2h9874,IlikeSalmiakki,1 point,Wed Sep 24 15:28:08 2014 UTC,"The utopists cannot understand reason, nor can they apply logic.  Here's another point for your list:   An attacker manages to compromise the trusted entity after communication: This is only safe if you never download any code from the formerly trusted entity ever again as they could compromise your key after the fact and go back to exploit what they collected."
crypto,2h7fu3,electronics-engineer,11,Tue Sep 23 06:20:47 2014 UTC,Three men. Let's not forget Merkle.
crypto,2h7fu3,cunttard,5,Tue Sep 23 10:17:53 2014 UTC,"I highly recommend Stephen Levy's book ""Crypto"" which the author apparently just read.  It does mention Merkle, but unfortunately his work was classified so didn't make a public impact until it the mechanisms were rediscovered."
crypto,2h7fu3,R-EDDIT,6,Tue Sep 23 11:50:53 2014 UTC,Merkle didn't work for any agencies and the work wasn't classified. Diffie and Hellman had collaborated with Merkle prior to the publication of a New Directions in Cryptography.  You probably mean Clifford Cocks who implemented RSA encryption prior to both DH and RSA. Worth noting he also came up with one of the first Identity Based Encryption (IBE) schemes but it was only declassified after the area was becoming popularised.
crypto,2h7fu3,cunttard,2,Tue Sep 23 12:08:48 2014 UTC,"Clifford Cocks:       Clifford Christopher Cocks, CB,  (born 28 December 1950  ) is a British mathematician and cryptographer at Government Communications Headquarters (GCHQ).  He discovered the widely used encryption algorithm now commonly known as RSA, about three years before it was independently rediscovered by Rivest, Shamir, and Adleman at MIT. He has not been generally recognised for this achievement because his work was classified information, and therefore not released to the public at the time.     Interesting: James H. Ellis | Cryptography | Cocks IBE scheme | Malcolm J. Williamson   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2h7fu3,autowikibot,1 point,Tue Sep 23 12:08:59 2014 UTC,"You are correct, I meant Clifford Cocks."
crypto,2h7fu3,R-EDDIT,5,Tue Sep 23 15:41:06 2014 UTC,That was horrible.  Read this instead.  https://www.nytimes.com/books/first/l/levy-crypto.html
crypto,2h748b,lynxjerm,1 point,Tue Sep 23 03:59:35 2014 UTC,Thank you for the share!.
crypto,2h2c43,jlbraun,30,Sun Sep 21 20:49:46 2014 UTC,"Because they generally want many-to-many comms, not one-to-one. Assymetric crypto is great at one-to-one, but if you want to send to 10 people you have to re-encrypt 10 times. That's effectively unusable for the scale required. With symmetric crypto, you load all the radios of one squad with a key, and any squad member can send to any other easily.  As for key management, you just periodically change keys, thereby limiting the maximum amount of time the net can be compromised."
crypto,2h2c43,SAI_Peregrinus,15,Sun Sep 21 22:54:36 2014 UTC,"Actually, you encrypt once with a random symmetric session key. You then asymmetrically encrypt the session key n times, where n is the number of recipients."
crypto,2h2c43,hughk,7,Mon Sep 22 07:15:09 2014 UTC,"Furthermore, this can be done whenever. So if you got the public key of the radios, you can make new ""groups"" dynamically and on the fly, spread a random symmetric key via asymmetric crypto, and done. Best of both worlds."
crypto,2h2c43,TheTerrasque,4,Mon Sep 22 13:29:53 2014 UTC,"Yes, you can use asymmetric crypto for key exchange of symmetric keys. But you don't directly use asymmetric crypto for the communications stream."
crypto,2h2c43,SAI_Peregrinus,1 point,Mon Sep 22 13:41:10 2014 UTC,"This is why you always want to use random session keys plus symmetric cryptography for the actual message. Asymmetric is normally considered weaker, unless what you are encrypting is itself random."
crypto,2h2c43,hughk,1 point,Mon Sep 22 14:02:17 2014 UTC,"Do you know the CAP theorem? Radios operate in the available and partition tolerant sides of the triangle. They can't guarantee consistency, in this case delivery of new key material. Much easier to make the key material immutable (symmetric key)."
crypto,2h2c43,GahMatar,3,Mon Sep 22 13:59:45 2014 UTC,"There's no consensus problem here. As long as each radio's public key (and any other identity info) is signed by a trusted authority, each can just broadcast it to the other radios. Then any other radio can send it a signed message, probably starting with the symmetric session key they're using.  I think the best answer is what some other people here have said: the military doesn't have any problem physically distributing keys in a secure way, so symmetric works just fine."
crypto,2h2c43,ItsAConspiracy,0,Mon Sep 22 14:50:53 2014 UTC,which is impractical if you want to reach more then say ten people.  Forget about that. Using a fast curve like curve25519 should do the trick.
crypto,2h2c43,GahMatar,3,Mon Sep 22 12:08:26 2014 UTC,"It's impractical if you need to add someone to the net mid-way, then you need a complicated protocol to guarantee delivery of key material, handle transmissions where the key was missing, etc.  With a fixed key, you just load it into the new radio(s) and go."
crypto,2h2c43,agent_x_,13,Mon Sep 22 13:55:50 2014 UTC,"Not to beat down a lot of .mil guys but you have got to train a high school educated kid to do it under stress with %100 accuracy. With lot and lots of attrition factors. The consequence of failure to succeed can be entire units not being able to communicate. Also to effectively implement PKI this you will need more processing power, more complex displays, etc etc. Also how to do handle one to many communications without processing delay?"
crypto,2h2c43,TheTerrasque,2,Sun Sep 21 21:56:45 2014 UTC,"You could probably do it easier in use by utilizing public crypto. Give out radios, note which, and leader / HQ / comms guy generates a symmetric key and uses the public keys (priv keys hardcoded into a chip in the radio) to give that to the relevant radios. This could be done on open frequencies, because crypto. ""Okay, all check if display shows 'blabla' now"" vs ""all type in this long thing now""."
crypto,2h2c43,GahMatar,0,Mon Sep 22 13:35:08 2014 UTC,It's not even the grunts we have now when it's a volunteer force and the army can be a little bit picky about who gets entrusted to radios. It's the grunts you're going to get from Selective Service when they call up the draft. The smarter ones are the most likely to avoid combat billets / draft in the first place.
crypto,2h2c43,SAI_Peregrinus,7,Sun Sep 21 22:33:44 2014 UTC,The grunts we have now are generally the poor and the uneducated. The smart ones generally join as commissioned officers. The really smart ones don't join the military.
crypto,2h2c43,MashHexa,11,Sun Sep 21 22:56:44 2014 UTC,"I suspect part of the answer may be that you don't want to just talk over an encrypted channel, you want to talk to a specific set of people over an encrypted channel.  So let's add in some asymmetric crypto.  Now I connect to ""you"", and I set up an encrypted channel using standard protocols.  But how do I know that we haven't had a MITM attack, or if ""you"" aren't ""you""?  To do that, I use some type of certificate.  How do I know the certificate is valid?  Well, I need to check the signature on the certificate and get some kind of result (like your web browser ""lock"" icon).  How do I check the signature?  I use crypto to validate that it was created by the correct public/private keypair.  What private key?  Well, we're back to something that gets stored in a safe once more, and we've added one heck of a lot of complexity."
crypto,2h2c43,fabrizziop,5,Sun Sep 21 21:34:31 2014 UTC,"That's the purpose of PKI. They could have their own CAs, embedded directly on the firmware."
crypto,2h2c43,GahMatar,23,Sun Sep 21 21:40:41 2014 UTC,"They want it to be:   grunt proof, whatever process has to be doable by every single grunt that will ever be assigned that gear, reliably. self-synchronizing, radio encryption needs to be able to recover from loss or missed signal. Instantly-on, batteries will die, switches will be turned off, the longer it takes to rejoin a net and renegotiate sessions, the longer a sub-unit is effectively cut off from C&C. Resilient. The more protocol overhead, negotiations and hierarchical systems are involved, the more things can break, be jammed, fail, run out of power or get disabled through enemy action (i.e.: get killed.) Autonomous. The battlefield is an highly hostile environment, terrain, weather, ECM, ECCM, Jamming, lack of power, long-range. Ideally a net should be establishable given any 2 radios being in range of each other. There can't be reliance on masters, repeaters, etc. Disposable. Equipement will be lost, captured, broken. There should be as little value in the gear as possible and the crypto variable, even if captured intact, should stop being usable as soon as possible.   I'm probably forgetting things. And that's just Army-types requirements. NSA-types requirements will include making sure the crypto variables are used for as short a period as possible and any crypto variables used over the air for broadcast will get the shortest period they can get. Can you just imagine the nightmare of re-issuing certificates every day?  By contrast loading key material into a SINCGARS takes a few seconds. Plug fill device, press button, done.  Even with an embedded CA in firmware, how do you control need to know or limit key material distribution? And the CA root ends up being a perpetual crypto variable who's loss is eventually guaranteed and who's value if broken is huge. An NSA crypto-nerds' nightmare. Once you have to load CAs into radios, you might as well just load a key-wrapping symmetric key instead. The ciphers are stronger and you'll be replacing it very frequently anyway. Plus the keys are smaller so easier to reliably enter manually when there's no alternatives (which can happen surprisingly quickly when you're being shot at.)  Almost forgot: It has to be backwards compatible between all models. Breaking backwards compatibility means a large scale replacement and retraining program. The crypto was integrated in 1990. So the baseline was set almost 25 years ago."
crypto,2h2c43,tbrownaw,4,Sun Sep 21 22:10:10 2014 UTC,"The battlefield is an highly hostile environment, terrain, weather, ECM, ECCM, Jamming, lack of power, long-range.   I find it amusing that this list doesn't include bullets and explosions."
crypto,2h2c43,IAmAMagicLion,11,Sun Sep 21 23:53:59 2014 UTC,I don't think symmetric or asymmetric make much difference at that point.
crypto,2h2c43,cjg_,1 point,Mon Sep 22 02:01:57 2014 UTC,Also the key is usually used to control the frequency hoppning.
crypto,2h2c43,MashHexa,8,Mon Sep 22 16:32:26 2014 UTC,"It isn't a one-way trust relationship.  Think about the process of ""enrolling"" a radio, and how you then need to secure the private key for that radio.  And how do you respond to the loss of an individual radio's private key?  Or a dozen private keys?  Or a million?  Or what do you do about a root key compromise?  Or any intermediate cert?  Think about the complexity of responding (proactively or reactively) to that.  A symmetric key provides a very clear level of security.  A PKI infrastructure is useful in the presence of semi-trusted entities, but adds huge complexity to the trust relationship, and has to expose the results of that complexity to the end user."
crypto,2h2c43,fixtressclack,1 point,Sun Sep 21 22:59:09 2014 UTC,Didn't think about the root CA problem.  Good answer.
crypto,2h2c43,GahMatar,3,Mon Sep 22 18:21:16 2014 UTC,"To be honest, .mil of necessity do a lot of shipping around hardware securely in general. It's much less overhead for them to program handsets with a key and hand them out than it would be comparatively for you to physically hand a token over to an online shop before buying stuff there. Public key is great for establishing secure communications over open channels, but that's not the sort of thing the military really tend to want out of encrypted radio.  I note that TETRA (more government authority radio than military although it was designed for mil use also) appears to use symmetric key as well. I'm guessing there's a basic assumption about the sort of use it's going to get that's pretty fundamental there."
crypto,2h2c43,skintigh,2,Sun Sep 21 22:42:44 2014 UTC,"STU-III did use asymmetric crypto, which makes sense since as a telephone there isn't a fixed list of potential callee, that lack of a list is the whole point."
crypto,2h2c43,fixtressclack,8,Sun Sep 21 23:09:54 2014 UTC,"Even if they did, it would not be RSA. The NSA advises against using RSA, for reasons not stated, but others have warned that prime factoring may not be as difficult as believed.  https://www.nsa.gov/ia/programs/suiteb_cryptography/  I believe the Russians suggest the same."
crypto,2h2c43,skintigh,5,Sun Sep 21 23:23:25 2014 UTC,"Sorry for drifting off topic here, but is it not just that the computing arms race on key size for RSA gets obscenely big very fast (with diminishing numbers of primes available at higher key lengths, equivalent security to good alternative ciphers requiring ridiculous keylengths) and the returns in terms of security for computing power just don't come close to the other competing encryption schemes?  edited to add link to demonstration of key scaling problem: http://www.keylength.com/en/3/"
crypto,2h2c43,conradsymes,6,Sun Sep 21 23:32:23 2014 UTC,"A good cipher will be fine if computers become a billion times faster, AES is fine even if quantum computers come out, and I thought the number of large primes could not become an issue but forget why...  Anyway, there were some advancements in factoring semiprimes, and in some extremely limited cases it becomes trivial even for large numbers. The fear is that this is just a hint of things to come in the next few years."
crypto,2h2c43,Twylite,1 point,Mon Sep 22 00:06:31 2014 UTC,"NASA uses GPG when sending peer reviews, so it can't be horribly weak.  And before you start wondering why peer reviews are important, that's the best information on knowing who to recruit as a spy."
crypto,2h2c43,autowikibot,3,Mon Sep 29 05:17:54 2014 UTC,"Frequency hopping.  (Some) military radios - including the two standards you mention - can hop frequencies really fast; this makes the radio resistant to jamming, hard to pinpoint the transmitter's location, and even hard to detect the presence of a signal.  The channel sequence is generated cryptographically using a preshared secret key, so without a symmetric key you can't even establish a channel over which to do an asymmetric negotiation."
crypto,2h2c43,PubliusPontifex,1 point,Mon Sep 22 09:36:27 2014 UTC,"Section 2. Military use of article  Frequency-hopping spread spectrum:       Spread-spectrum signals are highly resistant to deliberate jamming, unless the adversary has knowledge of the spreading characteristics. Military radios use cryptographic techniques to generate the channel sequence under the control of a secret Transmission Security Key (TRANSEC) that the sender and receiver share in advance.  By itself, frequency hopping provides only limited protection against eavesdropping and jamming. Most modern military frequency hopping radios also employ separate encryption devices such as the KY-57. U.S. military radios that use frequency hopping include the JTIDS/MIDS family, HAVE QUICK and SINCGARS.     Interesting: Hedy Lamarr | Spread spectrum | Direct-sequence spread spectrum | Time-hopping   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2h2c43,boarhog,1 point,Mon Sep 22 09:36:37 2014 UTC,This is an excellent point.
crypto,2h2c43,cypherpunks,5,Mon Sep 22 18:18:52 2014 UTC,"Worked on one of these things for a very short time (radio side though). The whole rig was a kludge, but it was also designed before public-key crypto became mainstream, and before we could effectively prove out the mechanics.  The military still doesn't trust public-key because the discrete logarithm problem is not proven (and this was designed during RSA days, not even DH kex). I could see them going with ECC if we have more proof, but they're cautious to put it mildly. More likely they'll switch to a hybrid system, keep the old but add a new layer of crypto on top.  The military believes in physical security, or failing that, possibly math, they're not going to go for the 'statistically likely' path unless they have another choice."
crypto,2h2c43,No-Coast-Punk,3,Sun Sep 21 23:03:23 2014 UTC,"Well, symmetric keys are faster and stronger for same processing time so it's really hard to say which is better one way or the other"
crypto,2h2c43,hughk,1 point,Sun Sep 21 21:56:20 2014 UTC,"I'm guessing here, but one possibility is red/black (plaintext/ciphertext) separation reliability.  Public-key algorithms require a lot of software.  With a symmetric-key algorithm implemented in hardware, you can have a firewall, where the only connection between red and black is the crypto chip, and the key arrives via a third dedicated interface.  Really hard to have back doors with such an architecture.  But also hard to adapt that to public-key."
crypto,2h2c43,Remco_,1 point,Mon Sep 22 05:22:01 2014 UTC,"Another thing that hasn't been brought up, is working with legacy gear.  The military is TERRIBLE at maintaining any sort of hardware standard across its forces.  Sure, you may have some units getting the latest and greatest stuff. You may also have some reserve unit out there with dog shit ancient gear. The latest and greatest still needs to be able to communicate with legacy equipment."
crypto,2h2c43,darkmighty,1 point,Mon Sep 22 06:20:23 2014 UTC,"The real issue is that they solve different problems. A symmetric system works well with hierarchical key management. With all keys descending the command chain (key encrypting keys). Where it doesn't work is when you have two completely different administrative domains and you want to establish communications, which happens all the time between two commercial entities. There, asymmetric systems work much better."
crypto,2h2c43,claytonkb,1 point,Mon Sep 22 07:22:28 2014 UTC,"Lot's of good reasons mentioned already, but one I've heard myself isn't mentioned yet:  The millitrary distrust random number generation in the field. (they have some good reasons). This implies that you cannot generate keys or key-pairs in the field. So you generate them centrally, and then distribute them. I might be wrong, but I don't see an advantage of distributing public-private keypairs over symmetric keys.  Come to think of it. It might be that they just want to generate all the keys centrally, for auditing/investigation purposes and whatnot."
crypto,2h4gn8,Sa54hjfg,17,Mon Sep 22 13:18:47 2014 UTC,"In using encryption I appreciate it would raise a bigger flag above me   that is why everybody should use encryption. now if you do it, you automatically draw attention to yourself. if everyone uses it, authorities will have no idea who to target."
crypto,2h4gn8,pint,10,Mon Sep 22 14:01:00 2014 UTC,"Sounds like a fine thing to do. HTTPS Everywhere is a wonderful extension, I enjoy it with and without Tor."
crypto,2h4gn8,DemandsBattletoads,-1,Mon Sep 22 13:57:33 2014 UTC,sdwasd
crypto,2h4gn8,schniederzero,5,Mon Sep 22 23:51:16 2014 UTC,Wrong. Where did you get that idea?
crypto,2h4gn8,DemandsBattletoads,1 point,Tue Sep 23 00:00:16 2014 UTC,"The NSA and others could exploit SSL for days, months, or even years before it the exploit was patched. You can't trust technology to tell you how everything works."
crypto,2h4gn8,abec19,1 point,Tue Sep 23 00:37:06 2014 UTC,"? What exploit are we talking about?   https has been compromised, am I wrong?   Said nothing about an exploit."
crypto,2h4gn8,DemandsBattletoads,1 point,Tue Sep 23 00:39:50 2014 UTC,sdwasd
crypto,2h4gn8,schniederzero,7,Tue Sep 23 00:08:01 2014 UTC,"Are you referring to Dual_EC_DRBG? RSA Security is a company, RSA is an public key algorithm. The NSA paid RSA Security $20 million to make their backdoored Dual_EC_DRBG their default PRNG, which it was until it was discovered, but researchers had already suspected the algorithm and people tried to avoid it. This did not affect HTTPS. RSA the algorithm remains quite strong."
crypto,2h4gn8,DemandsBattletoads,2,Tue Sep 23 00:32:35 2014 UTC,dwasdwa
crypto,2h4gn8,schniederzero,1 point,Tue Sep 23 01:20:20 2014 UTC,"To my knowledge HTTPS hasn't been compromised - that would jeopardize pretty much all commerce on the internet. It would be a very, very big deal.  But HTTPS is merely the encryption of the content to and from a particular destination. When you do your banking online, it's clear to everyone looking at the network traffic that you are communicating with your bank. What's still encrypted (safely) is the content of that communication.  If you're interested in keeping where you go private as well - that's when VPN services and Tor come into play. Your initial IP requests aren't obvious and so someone watching the traffic leaving your IP address wouldn't necessarily know where you're going.  Two very different things being encrypted."
crypto,2h4gn8,bitcoin_user1,11,Wed Sep 24 15:08:52 2014 UTC,"Are you talking about encryption or anonymity? They're very different things, but they sound kind of muddled up together in your question.  In any case, if you use the Internet anonymously (e.g., via Tor), you may very well raise a lot of flags, but they can't do anything about those flags.  Don't think that a VPN provides you with any anonymity, though. All a VPN does is conveniently provide the NSA a single point to collect all of your data from (your VPN provider)."
crypto,2h4gn8,OlderThanGif,5,Mon Sep 22 14:56:30 2014 UTC,"you may very well raise a lot of flags, but they can't do anything about those flags.   That depends. An ISP for example could choose to terminate your account if they detect you using Tor (there was a false report just recently that Comcast was doing that), some networks may terminate your session if Tor is detected, some corps may find you violating policy if you use Tor at work, and users in oppressive state regimes may find themselves arrested just for using Tor.  In the US, using Tor of itself isn't cause for arrest/sanction by the government: but it can be part of justification for surveilling you if there are other reasons that trigger suspicion.  For the average user just protecting their privacy, though (and not trying to hide illegal activities), using Tor shouldn't get you hassled--and using Tor relays and such can get you around much of the Tor-detection capabilities.   Don't think that a VPN provides you with any anonymity, though.   Privacy VPNs, like Tor, can provide a level of anonymity if they're used properly. A privacy VPN provides very little defense against a State-level attacker, but it can actually be quite useful against other attackers, such as passive eavesdroppers on public networks.  Like anything else, it's a tradeoff: a privacy VPN is fast and convenient, and provides you protection from most common non-State attacks. Tor is slower and tricky to use correctly, but provides you protection from all but the most targeted of attacks."
crypto,2h4gn8,0x6d1e,1 point,Mon Sep 22 16:26:31 2014 UTC,"Don't think that a VPN provides you with any anonymity, though. All a VPN does is conveniently provide the NSA a single point to collect all of your data from (your VPN provider).   To be fair, that kind of depends on a lot of factors related to the VPN provider."
crypto,2h4gn8,bitcoin_user1,0,Wed Sep 24 15:10:18 2014 UTC,"Also, a lot of things may not be available via Tor or require extra authentication because of the abuse potential."
crypto,2h4gn8,Uncaffeinated,3,Mon Sep 22 15:07:35 2014 UTC,"What you describe is the ""ideal scenario"" which most people recommend, but few implement, because    (good) VPNs aren't all that cheap connection speed and latency suffer    Too often, security and convenience are mutually exclusive.   Also, try posting this to /r/asknetsec"
crypto,2gzr3d,DemianMusic,57,Sat Sep 20 23:56:04 2014 UTC,This article says nothing as to what crypto was used and got broken.
crypto,2gzr3d,charsplat,11,Sun Sep 21 00:08:54 2014 UTC,Doesn't really say good things about his Data Locker drive if the crypto was broken.   Probably just a weak key but...
crypto,2gzr3d,Uncaffeinated,49,Sun Sep 21 00:47:50 2014 UTC,"When I see ""military grade"", I read it as ""snake oil""."
crypto,2gzr3d,arbiterxero,7,Sun Sep 21 00:46:16 2014 UTC,"Actually,  I read a vendor with a backdoor that they are trying to hide by waiting 2 years"
crypto,2gzr3d,arbiterxero,9,Sun Sep 21 11:13:45 2014 UTC,Seconded. .. They likely used a wrench or a baseball bat to break his encryption bone. ... The key was in his left thumb. .
crypto,2gzr3d,Amuro_Ray,2,Sun Sep 21 01:10:53 2014 UTC,"Rubber hose decryption is a very effective method against many encryption techniques, often people are the weak point."
crypto,2gzr3d,qubedView,1 point,Sun Sep 21 09:11:26 2014 UTC,"I always read it as ""We either use AES or 3DES."""
crypto,2gzr3d,kingkilr,2,Sun Sep 21 17:48:02 2014 UTC,AES-ECB with no MAC... the ultimate military grade encryption.
crypto,2gzr3d,qubedView,1 point,Sun Sep 21 18:16:23 2014 UTC,"""What's a 'blocking mode'? Just, whatever. Military grade is what we use. That's all you need to know."""
crypto,2gzr3d,phyzome,23,Sun Sep 21 18:51:33 2014 UTC,I wonder if they brute-forced it and the guy just had a shitty password? Hard to tell from this article...
crypto,2gzr3d,funk_monk,25,Sun Sep 21 00:41:41 2014 UTC,"If they'd actually broken some form of decent encryption (e.g. 256 bit AES) then I doubt they'd have revealed it like this. I think they would have either made a big deal about it and made it very public or they'd have kept it to themselves.  Like you said, he probably just had a shitty password."
crypto,2gzr3d,gsuberland,11,Sun Sep 21 01:34:47 2014 UTC,Especially as it's the Canadian police. It's not like they have a multi-billion dollar computation farm next to their community outreach program room.
crypto,2gzr3d,nwad15,0,Sun Sep 21 12:27:09 2014 UTC,"That's not fair.  Canada has crime too.  It takes a lot of professionalism to crack PKZip file with a 6-character password, and they deserve a lot of credit."
crypto,2gzr3d,PubliusPontifex,4,Mon Sep 22 01:40:26 2014 UTC,"3des was military grade for a long damn time, if it was aes256 I'd be impressed."
crypto,2gzr3d,charsplat,10,Sun Sep 21 02:11:56 2014 UTC,"The device used, according to an article on this, was a Data Locker hard drive.  The devices currently listed on the company website implement AES-256 XTS so, assuming he was using one of these drives, I would guess it's either a weak password, a flaw in the implementation, or a flaw in the key management on the device.  I'd never seen a device like this before; an external HDD with onboard encryption and key entry on the device itself.  It's neat because I imagine it's immune from key compromise if the system is compromised (and consequently somewhat immune from the firewire/thunderbolt memory dump attacks).  However,  looking at the pictures of the device I honestly can't imagine anyone would end up using a secure password.  It looks like you're left entering your password on a T9 keypad.  Seems like shortcuts would be taken...  http://datalocker.com/wp-content/uploads/2014/03/2014_datasheet_datalocker_DL3.pdf  Update:  Here is an article that mentions the DataLocker drives...  http://www.thestarphoenix.com/news/Saskatoon+Justin+Gryba+arrested+child+porn+charges/10215027/story.html?__federated=1"
crypto,2gzr3d,PubliusPontifex,2,Sun Sep 21 04:23:14 2014 UTC,"I've heard of things like this, they were basically government speced for certain people.   Donno, maybe the microcontroller flash was somehow left vulnerable able to wear detection, or there was a leftover charge or unwired work register.   If they broke aes256 for anything but strategic reasons I'll eat your hat."
crypto,2gzr3d,iheartrms,1 point,Sun Sep 21 05:55:17 2014 UTC,I have one of these sitting on my desk at work!
crypto,2gzr3d,charsplat,1 point,Sun Sep 21 04:57:11 2014 UTC,Cool.  Fun toy?
crypto,2gzr3d,GahMatar,1 point,Sun Sep 21 14:50:20 2014 UTC,"Probably, they imaged the physical disk, reversed / re-implemented the KDF and then brute forced the password."
crypto,2gzr3d,nwad15,1 point,Sun Sep 21 23:23:16 2014 UTC,"I didn't see where DataLocker was mentioned (was it in the vid? i didn't watch the vid). In the DataLocker PDF, it says that it requires ""strong"" passwords ""Min 7 characters.""  Even with password hashing, that could go relatively quickly.  The PDF shows a key-scrambler.  I tried implementing long passwords with a (software) key scrambler, and it was such a pain that I stopped using it.  I'm guessing that the key scrambler compels people to use short passwords, thereby causing a vulnerability."
crypto,2gzr3d,Chandon,3,Mon Sep 22 01:50:05 2014 UTC,"If they broke 3DES, I'd be pretty impressed.  Hell, if they broke DES for a run of the mill criminal case I'd be moderately impressed. Would cost about $8k in hardware that would only be useful against people using really bad crypto."
crypto,2gzr3d,somehacker,4,Sun Sep 21 03:32:06 2014 UTC,$8k is an absurdly small amount of money when you're working for the government.
crypto,2gzr3d,TurnipCannon,5,Sun Sep 21 05:07:40 2014 UTC,"Also that's like deepcrack numbers, a DES cracking rig would be much cheaper today."
crypto,2gzr3d,R-EDDIT,1 point,Sun Sep 21 05:51:26 2014 UTC,Time on AWS EC2 would be much cheaper today.
crypto,2gzr3d,TheTerrasque,1 point,Wed Sep 24 15:11:08 2014 UTC,https://www.reddit.com/r/crypto/comments/162ufx/research_project_opencl_bitslice_des_bruteforce/
crypto,2gzr3d,Chandon,1 point,Sun Sep 21 20:43:02 2014 UTC,"That's pretty cool, but I don't know that it's super practical.  Fifty GPUs could get you it in a week. That'd be about three times as expensive than buying the FPGAs."
crypto,2gzr3d,TheTerrasque,1 point,Sun Sep 21 22:04:34 2014 UTC,"Then again, gfx cards are flexible, and can be used against a lot of the crypto. Also, you could start small, and the hurdle for buying a few graphics cards is considerably less than for buying custom gear, I'd think."
crypto,2gzr3d,rya_nc,1 point,Mon Sep 22 07:34:56 2014 UTC,FPGAs are retaskable too.
crypto,2gzr3d,FallOFIntellect,5,Thu Sep 25 07:28:51 2014 UTC,"No encryption technology was actually compromised.  Otherwise there would be announcements all over the net and most tech magazines, first off.  Secondly, they're probably refering to BitLocker, which windows promotes as ""military grade"" encryption.  I imagine some rookie, sitting around, googling ways to get access this data so he can get his first promotion, when his 12 year old child comes up with the brilliant idea of ""hey why don't you see if 1234 works"", and BAAAM, you've got yourself an unlocked drive."
crypto,2gzr3d,xr1s,3,Sun Sep 21 13:05:16 2014 UTC,The onion looks different.
crypto,2gzr3d,cypherpunks,3,Sun Sep 21 10:10:24 2014 UTC,"That's bullshit terminology.  If they did actually ""break it"" technically, I presume they managed to guess the password."
crypto,2gzr3d,pinkottah,1 point,Sun Sep 21 14:52:53 2014 UTC,"I assume they just bruteforced the key. Even so, seems like a huge waste of resources, considering they already have a conviction for the exact same crime for this guy. Resources better used on other violent cases."
crypto,2gzr3d,GahMatar,1 point,Sun Sep 21 15:35:47 2014 UTC,"Deterrence effect on others (""Crypto won't save you"") and much easier to push for much longer sentence when you have more conclusive evidence."
crypto,2gzr3d,moschles,1 point,Sun Sep 21 17:37:33 2014 UTC,"Police ...break ... encryption...    ""Police"".     Really.    And on what planet did this happen?"
crypto,2gykap,DwarfOliver,18,Sat Sep 20 16:17:26 2014 UTC,There are plenty of ways to generate random numbers that existed before computers... like dice.
crypto,2gykap,theymos,2,Sat Sep 20 16:51:00 2014 UTC,"True...   I suppose I hadn't really thought any down this line, prob mostly 'cause the biggest weakness of the method I'm currently using (internet service) is its visibility, i.e. others can potentially see the random number, and, even if they couldn't, they can see me seeing the number, thus cluing them in as to the existence of such a number being used. It's perhaps only a minor problem, as nobody else knows the algorithm that follows, but it definitely seems like a problem nonetheless."
crypto,2gykap,SAI_Peregrinus,13,Sun Sep 21 15:50:55 2014 UTC,"Use dice or playing cards.  When rolling n r-sided dice, you should treat the combined dice roll as a n-digit base r number. Do not sum the dice, as that is far from uniformly random. For example, if you wanted to generate a random number between 0 and 200 using 3 6-sided dice, and you got a result of (4,6,2), you should treat that as 402_6 = 146_10. In this case, you should reroll anything over 200. Make sure that you assign the dice to digits randomly (close your eyes and push them in a line or something).  Here's a way of generating an infinite stream of pseudorandom letters with playing cards: https://www.schneier.com/solitaire.html (Treat the output of the keystream as a base 26 number.)"
crypto,2gykap,account2014,4,Sat Sep 20 17:38:27 2014 UTC,"Note that Solitaire has a biased output. It's not at all suitable for strong crypto, though without knowing the intended use it might be fine for this."
crypto,2gykap,theymos,2,Sun Sep 21 01:59:11 2014 UTC,"Thanks for the link. It was a cool read.   And that's a good method, the one you mentioned first. Sadly, for me, at least, something like that is too time consuming (as well as mind consuming, as the real hard work for me comes after the random number's generated) to be of any practical help, at least this time around.   You're obviously a smart and very cool dude, though."
crypto,2gykap,aleph_nul,-3,Sun Sep 21 15:57:34 2014 UTC,"no digit would get a 0 in your example, so not quite random  edit: yeah, my bad. I messed up, but I'll leave it up for all to see."
crypto,2gykap,UlyssesSKrunk,5,Sat Sep 20 18:30:45 2014 UTC,You missed that I treat 6 as 0 in the 6-sided example.
crypto,2gykap,moschles,1 point,Sat Sep 20 19:18:19 2014 UTC,It's arithmetic modulo 6.
crypto,2gykap,mst3kcrow,0,Sat Sep 20 21:05:47 2014 UTC,wat
crypto,2gykap,supersaw7,9,Sat Sep 20 19:54:39 2014 UTC,You could sprinkle pepper on graph paper and get random numbers.
crypto,2gykap,kingkilr,2,Sat Sep 20 19:56:53 2014 UTC,That's probably the most unique RNG I've ever heard.
crypto,2gykap,SAI_Peregrinus,1 point,Tue Sep 23 16:15:20 2014 UTC,"You seem pretty cool. How many indices do you have committed to memory, exactly? It's just pretty awesome that that number popped into your head. Either that or I just like the idea of you rage-quitting a game by flipping the table over.   Unfortunately, for my actual purposes at least, this method takes too long (anything over ~10 seconds to generate)."
crypto,2gykap,Paddywaan,5,Sat Sep 20 16:46:57 2014 UTC,"Toss a coin 22 times, write down the result as a binary number. You will have an integer from 0 to 222 - 1. If the number is greater than 4 million, discard then try again. Add 1 million."
crypto,2gykap,Odditys,3,Sun Sep 21 16:04:08 2014 UTC,What properties does your RNG need? A LFSR RNG is doable with just pen and paper.
crypto,2gykap,gsuberland,2,Sat Sep 20 17:15:37 2014 UTC,"Binary search. EG for 1-10: Flip a coin. If it's heads, the range changes to 6-10, if tails then 1-5. Keep flipping to divide the range in two."
crypto,2gykap,SAI_Peregrinus,2,Sat Sep 20 16:31:38 2014 UTC,"Flip a coin, record the results in 1's and 0's. Total the resulting binary and there is your answer."
crypto,2gykap,jus341,2,Sat Sep 20 16:50:24 2014 UTC,What is MM?
crypto,2gykap,claytonkb,8,Sat Sep 20 18:02:14 2014 UTC,"MM is an alternative suffix for million. I normally only see it in financials, but I know some central-European countries use it more commonly too."
crypto,2gykap,autowikibot,2,Sat Sep 20 18:13:45 2014 UTC,"""milli milli"", meaning a thousand thousands or 1 million."
crypto,2gykap,jus341,1 point,Sat Sep 20 18:28:04 2014 UTC,"Yeah, I have no idea why I typed it that way. I think the mental preview of a bunch of zeroes was okay, but somehow having two numbers like that side by side was a bit too much. Or something."
crypto,2gsec8,Quicksilver_Johny,8,Thu Sep 18 19:14:38 2014 UTC,"For my cakeday, Ars did a great technical writeup of a huge project we've been working on. How nice of them :)"
crypto,2gsec8,nexxai,3,Thu Sep 18 19:15:11 2014 UTC,"From a non-crypto nerd, that seems pretty ingenious.  I can't comment on the soundness of the math, but from a technical perspective that makes a ton of sense.  Good on them for figuring something like this out!"
crypto,2gsec8,nexxai,7,Thu Sep 18 19:30:46 2014 UTC,"There's not actually much new ""math"", just some careful engineering. This is the standard, normal TLS protocol, but with the sensitive private key operations (decryption or signature) proxied out to a trusted remote server with the private key."
crypto,2gsec8,LivingInSyn,2,Thu Sep 18 20:04:23 2014 UTC,"Even better.  Even with my non-crypto background, I've always understood that leaving the math (behind crypto) to the people who design the algorithms is usually for the best, so to know that they didn't try and adjust the math but just change where the math takes place makes me feel even more confident than I felt simply after reading the article."
crypto,2gsec8,phyzome,7,Thu Sep 18 20:18:51 2014 UTC,Rule one of writing your own crypto: Don't write your own crypto
crypto,2gsec8,marklarledu,1 point,Fri Sep 19 01:41:28 2014 UTC,"Changing where the math takes place is also fraught with danger, possibly even more so. (But easier to fix once you've found a bug.) Every OpenSSL vulnerability I've heard of has been a software engineering issue, not a cryptographic math bug."
crypto,2gsec8,cunttard,5,Fri Sep 19 11:53:29 2014 UTC,"Sounds like they are essentially doing something akin to PKCS#11 where the organization that doesn't want to release its private key is the token. I'd like to hear a bit about how CloudFare protects the session key (e.g. store it in an HSM, just keep it in memory, etc.). Thanks for the link!"
crypto,2gsec8,ehempel,1 point,Thu Sep 18 21:44:29 2014 UTC,I had the same thought. Essentially storing secrets in a remote HSM. Nothing new but the engineering feat certainly requires intimate knowledge of SSL/TLS.
crypto,2gsec8,Klathmon,-2,Fri Sep 19 01:05:45 2014 UTC,"This is good, but is of little help if you don't trust CloudFlare.  Your traffic is still in the clear to them (and the NSA if they are in CloudFlare's network)."
crypto,2gsec8,ehempel,2,Fri Sep 19 15:47:16 2014 UTC,"This wasn't to designed to keep cloudflare from being able to see the data, that's a requirement as they are acting as an authorized man in the middle.  This was created to avoid a company from having to share their private key. In that instance its a massive success."
crypto,2grdmw,Broten,6,Thu Sep 18 13:40:54 2014 UTC,"I think this is supposed to serve as a warning: ""we no longer have to unlock iPhones for the police, we have left the front door wide open for them."""
crypto,2grdmw,ThingsIveSeenandDone,8,Thu Sep 18 22:54:48 2014 UTC,"In ios6 and ios7, Apple had the ability to authenticate against the in-silicon encryption module that stored the keys used to encrypt the user filesystem on iOS devices, to retrieve the keyring, and reportedly had a 6-month backlog on requests for decrypting filesystems on devices seized by US law enforcement, as of about a year ago.  What they're saying is that they no longer have the keys to authenticate to the hardware module to perform keyring retrieval. They are saying nothing about who else has keys to authenticate to the hardware module to perform keyring retrieval cough cough US LEOs and NSA coughcoughcoughcoughcough"
crypto,2grdmw,Bardfinn,8,Thu Sep 18 19:54:31 2014 UTC,They are saying nothing about who else has keys to authenticate to the hardware module to perform keyring retrieval cough cough US LEOs and NSA coughcoughcoughcoughcough   Apple's transparency report NSL canary is gone. All your keys are belong to Obama.
crypto,2grdmw,karlthepagan,16,Thu Sep 18 21:21:15 2014 UTC,"Many claims are made by Cook in that statement.  You know every word was carefully crafted and reviewed, from all POVs, including legal.  So I think it's legitimate to consider the gaping loopholes in these words:  ""Finally, I want to be absolutely clear that we have never worked with any government agency from any country to create a backdoor in any of our products or services. We have also never allowed access to our servers. And we never will. - Tim.""  Possible realities:   Apple works with independent security contractors to create backdoors and what those contractors do with governments is not disclosed.  This is possible, but unlikely and contrary to their Third Party privacy claims. Apple may not work with a government agency so much as it is physically or economically or legally coerced to watch while the agency installs its backdoors.  ""Work with"", here, may suggest cooperation. To not allow access to servers does not mean server access is not happening. The common usage of ""allow"" means simply admitting something as legal or acceptable. Apple may not find government access acceptable and may question its legality and yet it may be compelled to stand by and watch as the government does what it does, under an order of secrecy.   Unfortunately, for those of us who want to believe Apple and this gesture, the old standby of ""trust but verify"" doesn't help.  An open codebase or ability to audit hardware, firmware, OS, and core applications would allow for verification.  Until then, it's just words."
crypto,2grdmw,RainbowNowOpen,-2,Thu Sep 18 18:54:13 2014 UTC,"Agreed - Apple's track record is abysmal. Everything is proprietary, and unless things are opened up, they're argument comes down to ""trust us!"""
crypto,2grdmw,LeoPanthera,3,Thu Sep 18 19:33:38 2014 UTC,What do you suggest as an alternative? Most of Android is closed source. Google's services are even less open and privacy-ensuring than Apple's. Android without Google's apps is mostly unusable.
crypto,2grdmw,Natanael_L,3,Fri Sep 19 04:33:33 2014 UTC,"OpenStreetMap, F-Droid, K9 mail, DuckDuckGo, Moxie's sync app Flock, etc..."
crypto,2grdmw,haptikk,2,Fri Sep 19 18:47:19 2014 UTC,"""He suggested that it would take a major event, such as a terrorist attack, to cause the pendulum to swing back toward giving authorities access to a broad range of digital information."""
crypto,2grdmw,JoseJimeniz,2,Thu Sep 18 20:16:22 2014 UTC,A criminal investigation can still take your phone and brute force the PIN.
crypto,2grdmw,KayRice,2,Fri Sep 19 04:44:54 2014 UTC,Security in Apple products is a joke anyhow.
crypto,2gr0rc,mhx123,18,Thu Sep 18 10:36:58 2014 UTC,Google rotates is certificates they're most likely waiting until the next refresh to change in a few weeks
crypto,2gr0rc,dfinf2,-3,Thu Sep 18 11:50:15 2014 UTC,"I agree - but it still seems like the Chrome team's decision was somewhat rushed, if Google itself has not moved away from SHA-2 yet and will only do that ""just in time"". Such a rush might be warranted in the face of a new, serious attack on SHA-1. But has this occurred - and if it had, the sunset period would be way too long anyway!  I guess the surprising point is, that when Google announced this, I would have expected to be able to be able to look to Google's own web site to see how they implemented it. Specifically I was curious to see if they used a SHA-1 root CA but with SHA-2 leaf, which is what I intend to do and which seems to be supported. I was then surprised to find the whole chain was SHA-1!  This is amplified by the Google blog talks about how the algorithm has been deprecated since 2011, and also other blogs posts by the team on how they notified all the CA's before in February. I would have expected Google itself to have completed the migration, given such language. Maybe it highlights the problem with the migration -  note that not all client software (for instance Google's own Android 2.3 from 2011) supports SHA-2 at all!"
crypto,2gr0rc,slyf,5,Thu Sep 18 12:35:24 2014 UTC,"Chromes decision will only cause issues for certs expiring after 2016 (and even then, more like 2017).  Theirs expires in 2014.  You are also mistaken, 2.3 supports SHA256, below that does not...and Android 2.2 only has a .7% android market share (If you ask google atleast).  Assuming you put yourself right up until the line, you can have a SHA-1 cert which expires in >2 more years and have minimal issues (Chrome considers after 2016 and sha-1 to be ""minor issues"", and 2017 to be the real issue).   Even if you do not want to have any issues at all with chrome, you could give yourself a cert today which expires in a full year and have no issues.   Basically: You have another year (or two if you do not mind a blank ssl icon), google replaces certs every 3 months, google has around 3 more certs before they need to actually swap it out with sha256."
crypto,2gr0rc,slyf,2,Thu Sep 18 15:46:23 2014 UTC,"OK regarding Android 2.2 vs 2.3 although the version number wasn't the major point. Then 2.2 (as well as other clients) are unsupported. Besides, if it was such a no-brainer to go SHA-2 all the way, why haven't Google done it by now given all the warnings they claim to have sent?  I also don't understand what you mean by ""you are also mistaken"" since nothing in your previous sentence contradicts any of what I wrote.  The point still stands, companies that bought SHA-1 certificates earlier this year (before this announcement) with duration past 2015 have to replace them at this unexpected time and on a short notice, to avoid warnings. I happen to work for such a company, and due to various reasons such certificate changes are not always easy.   The point is not whether or not google.com will show warnings in November! The point is that they really should have migrated themselves given all the pressure for all to do so (remember they said SHA-1 was deprecated in 2011).  As mentioned I went to their page to check if they had SHA-1 in the root and only SHA-2 further down. I had not expected to find SHA-1 all the way!"
crypto,2gr0rc,qnxb,1 point,Thu Sep 18 16:47:49 2014 UTC,"""in addition to my statement, you are mistaken about which version..."" is what I intended to mean."
crypto,2gr0rc,R-EDDIT,3,Thu Sep 18 16:48:45 2014 UTC,"Google rotates their certificates every 3 months (one of the benefits of being their own intermediate CA). I'm sure they're working on it, and will have a new chain by the next refresh."
crypto,2gr0rc,jrmxrf,3,Thu Sep 18 12:14:45 2014 UTC,"The risk of sha-1 is not really in its use, the risk is in issuance of new certificates.  When md5 was broken, someone showed that they could find two certificate keys that hashed to the same public key.  They then submitted a certificate signing request for one of them, which a CA of course signed as a server authentication cert.  They then used that signature for the other key as a subca, allowing them to then forge any certificates.  Its much easier to find two certs that collide than a collision with a given cert or fixed set of certs (see: Birthday Paradox)  So you see, the risk (still theoretical) is really of CAs issuing certificates signed with sha-1.  This is mitigated by CAs enforcing input validation on cert data to avoid collision engineering.  Google further controls this for their certs using pinning rules to specific CAs and enforcing pathlen.  Because google sites have pinning constraints (in chrome, opera and ff), they would be the hardest to forge through collisions, and doing so would be the most likely way to get caught.  So... while the industry needs to move to sha-2, Google using sha-1 right now is not a big security risk.  Where Google could lead is on passive client detection (see ssllabs sslhaf on github for example) to notify down level clients that they will lose access in the future."
crypto,2gr0rc,zehemer,2,Fri Sep 19 12:05:37 2014 UTC,To me it looks like google.com is SHA-256
crypto,2gr0rc,slyf,3,Thu Sep 18 11:29:21 2014 UTC,"Are you talking about the certificates or the SSL handshake? Seen from here, all certificates are clearly SHA-1 (rooted in an Equifax CA). But not only is the root certificate SHA-1, there's also a Geotrust and a Google Internet Authority in the chain that is SHA-1, and the same is true for the leaf. If you see it as SHA-256, it means Google.com must be sending out different cert chains to different users, maybe based on geography or otherwise."
crypto,2gskq3,LarryBoLarry,2,Thu Sep 18 20:09:16 2014 UTC,"I find the ""keyless"" appellation really misleading, it's only becoming keyless for cloudflare because they offload this responsability to a ""Key server""."
crypto,2gqqcj,electronics-engineer,4,Thu Sep 18 07:24:07 2014 UTC,"Sooo.. no more mass data collection because there is nothing to collect there, right? Right?"
crypto,2gqqcj,exo762,5,Thu Sep 18 11:00:08 2014 UTC,It is well documented that Al-Qaida stopped using computers and phones and switched to trusted couriers long before the huge increase in government data collection. Clearly they have another goal in mind.
crypto,2gqqcj,GahMatar,2,Thu Sep 18 11:03:26 2014 UTC,"Given that the NSA and others have been ostensibly doing all this illegal and ubiquitous intelligence collection to find and defeat Al-Qaida, it would be reasonable for them to take defensive measures. They didn't need Snowden to tell that using the wrong phone and sending the wrong email was a quick way of saying ""Hey Drone, over here!"""
crypto,2gqqcj,Dillinur,1 point,Sun Sep 21 19:38:23 2014 UTC,"I don't really think the NSA intelligence collection was ever intended to be used against such targets. Either that, or it's an extremely inefficient and expensive way to do it. Targeting terrorists and pedophiles is merely PR at this point."
crypto,2gp43t,Bollockslive,3,Wed Sep 17 21:05:57 2014 UTC,"He's done a shit ton of work to advance crypto in the past few years. FHE, MPC, IO, multilinear maps.  I'm taking a crypto grad class with one of his co-authors on the multi-linear maps stuff, and the level of intelligence required for this stuff boggles my mind."
crypto,2gnhel,tvtb,12,Wed Sep 17 11:55:01 2014 UTC,"Man, this is a confused question.  PBKDF2 provides a computationally expensive (how expensive is tuneable) way to turn an input into something looking random. And of varying that input->output mapping through the use of a salt.  PBKDF2 is useful for two main scenarios:   Password Storage by a system. Turning an input (most often a password) into a symmetric encryption key or other secret.   In both cases, the tuneable complexity is there to make brute force take longer and the salt is there to prevent pre-computing a short list (dictionary) of possible input offline and then quickly checking the output. The salt also ensures that multiple users using the same password will not have the same secret/encryption key unless they also have the same salt. The salt does not need to be secret but ideally, it is a number used once and if not random, then at least unpredictable.  In the case of systems storing their user's passwords, the system does not need to ever store the raw passwords since they can just pull up the salt from the DB, run the user supplied password and salt through PBKDF2 and then compare that with the stored PBKDF2 hash. If they match it's the right password. If the user database is compromised, an attacker basically has a much longer and more difficult job even breaking bad passwords. (There's more to it then that but this is the 30k feet view.)  In the case of password managers, the idea is to turn the master password into a encryption key and then use something like AES to encrypt the saved passwords. They might also separately derive things like an authentication key, public keys, whatever.  I hope this makes more sense."
crypto,2gnhel,GahMatar,5,Wed Sep 17 13:01:50 2014 UTC,"There are a couple of things here:    PBKDF2 is a hashing function, not an encryption method. Check out the Stackoverflow discussion for an overview of the differences.  PBKDF2 produces ASCII fixed-length output, which is beneficial for storing in a database. (ie. you make your database column to be 256-bytes long and someone uses the entire wikipedia corpus as their password....what will happen?) A common technique is to use PBKDF2 to generate the AES password. So, user inputs their plaintext password, which is fed to PBKDF2 to generate a hash, which is used to encrypt/decrypt data using AES."
crypto,2gnhel,_red,11,Wed Sep 17 12:25:47 2014 UTC,"PBKDF2 produces bits. Encoding these bits to ASCII or whatever (what does ascii mean here anyway, hex? base64? base58?) is an implementation detail."
crypto,2gnhel,GahMatar,4,Wed Sep 17 13:49:08 2014 UTC,"A lot of subtly wrong stuff here...  While PBKDF2 is a password hashing function, it is more accurately described as a key derivation function, hence the KDF in its name.  The output of PBKDF2 should be uniformly random-appearing bytes."
crypto,2gnhel,bascule,2,Wed Sep 17 16:30:59 2014 UTC,"pbkdf2 is a hash function. the reason why we use hash functions because if the authentication database is stolen, the attacker still can not find out what the passwords are. if the passwords are strong, any hash suffices. however we want slow (costly) hashes to protect weak passwords, hence pbkdf2."
crypto,2gnhel,pint,4,Wed Sep 17 12:04:11 2014 UTC,"To be more correct PBKDF is a PRF function.  A hash function compresses a fixed or variable length input into a fixed length output.  a PRF is a pseudo-random mapping from input to output.  In this case, PBKDF uses a hash to compute a variable length output."
crypto,2gnhel,pint,-2,Wed Sep 17 12:25:19 2014 UTC,"okay, who the fuck ever thought that RFCs are any good?? i just opened the RFC for PBKDF2, and it is like 12 pages long so sparse in information, i can't find details in it without getting a headache.  please confirm that PBKDF2 has a limited input size. based on the summaries i saw, it eats passwords of any length. (also you keep talking about PBKDF, which is a concept, not an algorithm. the topic is PBKDF2. i assume it is just slight sloppiness.)"
crypto,2gnhel,jus341,1 point,Wed Sep 17 15:32:33 2014 UTC,I removed the bit about fixed length input >60 mins ago and you posted this 4-5 mins ago.  So you're responding to a very stale page or nothing at all.  The input to PBKDF is not fixed length that was a brain fart.  The output though is variable length which is unlike hash functions
crypto,2gnhel,pint,1 point,Wed Sep 17 15:37:46 2014 UTC,I don't think it produces a variable length output. It's output is the same as the hash function you use with pbkdf2.
crypto,2gnhel,FryGuy1013,-2,Wed Sep 17 18:45:37 2014 UTC,"it does, as it is defined. the way it does it is brain dead though. basically, you need to re-run the entire thing with domain separation to generate another block. i don't know who designed pbkdf2, but it is very silly."
crypto,2gnhel,pint,1 point,Wed Sep 17 19:02:05 2014 UTC,Doesn't the SHA-3 winner have a sponge function with variable length output?
crypto,2gnhel,pint,1 point,Thu Sep 18 01:47:24 2014 UTC,"keccak has variable length output, standardized sha3 instances don't. they introduced two new primitives, named shake. those have variable length output."
crypto,2gnhel,deathfantasy,1 point,Thu Sep 18 07:51:49 2014 UTC,that's not a hash its a sponge function.
crypto,2gnhel,TheTerrasque,0,Thu Sep 18 09:59:54 2014 UTC,it took me that much to try to interpret the goddam rfc and find better sources in parallel.  pbkdf2 can be seen as a class of hash functions. desired length is just a parameter. i don't think that this warrants a distinction between it and hash functions.
crypto,2gnhel,Shondoit,-1,Wed Sep 17 19:00:05 2014 UTC,"My experience with hash functions is ""hash this value using this MD5/SHA1 function and you'll get a single output."" There's no place in there for a ""master password"" nor are they meant to be reversed. How do you get to reverse PBKDF2 with a master password? My password manager also uses HMAC-SHA512 for what it's worth, although I'm not sure for what (it says a ""pseudo-random function"")."
crypto,2gnhel,GahMatar,5,Wed Sep 17 12:14:23 2014 UTC,"You mean in password managers? In that case, generally, PBKDF2 is used to turn the master password into an AES master key used for encrypting the database."
crypto,2gnhel,TheTerrasque,3,Wed Sep 17 12:17:55 2014 UTC,"Well, let's say your password is ""penis"". The problem is, apart from it being rather small, is that for example AES-128 needs a 128 bit key, exactly. So you need a reliable and reproducible way to map the any length text input into a 128 bit output value.   MD5 and SHA1 are two hashing functions. They both take some arbitary input and produces a 128 bit output. (Edit: SHA1 produces 160 bits) They will also produce the same output if given the same input, and the output is uniformly distributed in the ""keyspace"". Hey, that's some fancy features! We can use this to make the AES key! Then we can take any length password and use it for AES. Pretty damn handy.  The second problem then, is that your password is quite, quite small, and would take a computer milliseconds to get to when brute forcing. Part of this is because MD5 and SHA1 are pretty fast algorithms, which can be a good thing, but in this case is a really bad thing.   We don't care if it takes 0.0001 second or 1 second to open the password vault. It's something we rarely do, and doesn't affect us much. An attacker, however, will very much be affected by this, since he needs to do this millions of times to try and find the input that maps to the right key.  Well, there are some hashing functions that are slower than MD5 and SHA1, but what if you still prefer those two? Well, you could take the key generated from the password, and then hash it again for a new key, then hash it again, and again... Until it took a second for you to unlock the vault on your computer.  PBKDF2 is more or less just a standard way of doing that, with the hash function and the iterations you prefer."
crypto,2gnhel,GahMatar,4,Wed Sep 17 13:03:27 2014 UTC,"Well, let's say your password is ""penis"". The problem is, apart from it being rather small (...)   =D"
crypto,2gnhel,pint,2,Wed Sep 17 13:15:21 2014 UTC,"A few things you either missed or glossed over...  SHA-1 has a 160-bit output.  PBKDF2 also solves the related problem of generating output that is larger then the output of the underlying hash function.  Finally, PBKDF2 uses a salt as well and this salt means that not only will it take a long time to try enough possible passwords to find your password but even if someone else has the same password as you, it will take just as long to find theirs since with a different salt, the output will be completely different."
crypto,2gnhel,GahMatar,1 point,Wed Sep 17 13:43:15 2014 UTC,"SHA-1 has a 160-bit output.   Ah, right. Been a while since I was working with the primitives directly :)   PBKDF2 also solves the related problem of generating output that is larger then the output of the underlying hash function.   + salt  True. I tried to keep it to the simple and relevant info.  BTW, salt doesn't make brute force / dictionary attack harder, since an attacker will know the hash. It only affects re-used passwords and rainbow tables - and rainbow tables are less effective with the iteration counts."
crypto,2gnhel,pint,1 point,Wed Sep 17 13:55:53 2014 UTC,"In isolation, the salt has no effect on brute force.  In a password database however the effect is huge because the odds of some users sharing the same password is pretty much guaranteed. Once upon a statute-of-limitation expired time, I may or may not have used ""bunny rate"" as an indication of password strength in an /etc/passwd file. Bunny rate being defined has the ratio of accounts that used ""bunny"" as the password."
crypto,2gnhel,pint,1 point,Wed Sep 17 14:09:15 2014 UTC,"PBKDF2 also solves the related problem of generating output that is larger   but it does it terribly. if you don't want a huge performance hit, you do a stretching phase with the required iteration count, then use a second phase with minimum iteration count to generate the output. or alternatively use another KDF for the second phase."
crypto,2gnhel,khr1stian,1 point,Wed Sep 17 14:05:52 2014 UTC,Isn't the performance hit the point of PBKDF2?
crypto,2gnhel,silverforest,1 point,Thu Sep 18 14:59:40 2014 UTC,"but it should not depend on the derived length. now, if i plug in sha256, but want to derive 257 bits, it takes twice as long. why? the usual solution is to use another kdf (can be pbkdf2 with small iteration count) to derive additional data from the pbkdf2 result."
crypto,2gnhel,FermiAnyon,2,Thu Sep 18 15:28:44 2014 UTC,"hash functions can not be reversed. if you want a master password, you store the passwords themselves encrypted (with any cipher) and derive the key from the master password using a hash function (costly recommended). remember, keys are blocks of bits. like for AES, 128, 192 or 256 bit data. you always have to derive a key from the password (and co)"
crypto,2gnhel,gospelwut,1 point,Wed Sep 17 12:22:59 2014 UTC,"pbkdf2 is not a hashing algorithm, it is a key stretching function. all it does is iterate through a very long hash chain in order to waste cpu time.  passwords are crypto'd with aes. the key is the pbkdf2 output of the master pass and salt"
crypto,2gk77i,ang3c0,7,Tue Sep 16 14:14:07 2014 UTC,"There is a function called NMAC (over-simplifying):  NMAC(K1, K2, M) = H(K1 | H(K2 | M))   HMAC is the realization that K1 and K2 can be related with no negative impact on security.  Reference [PDF]: http://cseweb.ucsd.edu/~mihir/papers/kmd5.pdf"
crypto,2gk77i,GahMatar,3,Tue Sep 16 15:16:30 2014 UTC,"As for the specific values:   The above particular values of opad and ipad were chosen to have a very simple representation (to simplify the function’s specification and minimize the potential of implementation errors), and to provide a high Hamming distance between the pads."
crypto,2gk77i,floodyberry,1 point,Tue Sep 16 18:18:32 2014 UTC,"Huh.  How do those values contribute to high Hamming distance moreso than two other random hex values?  5c 5c 5c = 01011100 01011100 01011100 ... 36 36 36 = 00110110 00110110 00110110 ...   Nothing about those two values really jumps out in binary... so, let's try some simple bitwise ops...  AND      = 00010100 00010100 00010100 ... OR       = 01111110 01111110 01111110 ... XOR      = 01101010 01101010 01101010 ...   The bitwise OR comes the closes to having a pattern, but why/if that patter is significant isn't readily obvious either.  So, from the paper:   The latter is intended to exploit the mixing properties attributed to the compression function underlying the hash schemes in use. These properties are important in order to provide computational independence between the two derived keys.   Again, a satisfactory understanding eludes me - since the hash function isn't specified, I don't see how the choice of constants could be related to specifics of the hash function except that the hashes are expected to have ""mixing properties""... which seems somewhat belaboring, and still doesn't affect the choice of constants.    ""Simplifying the specification and implementation"" part I understand - no point in making it more complex than it needs to be, but exactly why these values were chosen seems to be poorly explained.    Ninja edit: I did notice that both hex values have 4 1's and 4 0's in their binary representation, so that might be a starting point..."
crypto,2gk77i,rick2g,4,Wed Sep 24 18:06:27 2014 UTC,"HMAC is actually a variant of NMAC which can be defined as   f(k1,f(k2,M)   We can prove that NMAC is secure, the way we go easily from hmac to NMAC is via the two constants ipad and opad to create k1 and k2 from an original key k.    https://cseweb.ucsd.edu/~mihir/papers/kmd5.pdf  Page 15 is where they discuss the security proof and relationships.  The requirement is just that the constants different.    My argument against yours is essentially    I have no security proof  I haven't spent a lot of time studying it  Assuming MD based hashes with the same initial construct worries me due to length extension attacks, I don't know why but it does deriving multiple keys assuages that concern"
crypto,2gk77i,fuckingbagre,3,Tue Sep 16 15:18:19 2014 UTC,"To make the two starting values different.  The HMAC security proof requires two different hash start states; that's why the pads are a full block size.  It's just a simple way to get two different states out of a single master key.  To clarify: your simpler scheme is probably secure, but you haven't shown a proof.   With different keys, a security proof is possible.  The exact pad patterns don't matter at all.  All-zeros and all-ones would also be fine as far as the security proof is concerned; using ones with 50% ones density whose XOR also is 50% ones is just ""general principles""."
crypto,2gk77i,cypherpunks,-8,Tue Sep 16 19:30:36 2014 UTC,designed by a committee.
crypto,2gj7c0,shitzter,8,Tue Sep 16 05:03:17 2014 UTC,You'll find an interesting answer to your question here: http://crypto.stackexchange.com/a/5692/7777   Here https://www.imperialviolet.org/2011/04/09/multiprime.html an interesting post about the multiprime RSA security.
crypto,2gj7c0,ddddavidee,4,Tue Sep 16 09:26:07 2014 UTC,"This paper from the second link is particularly interesting.  An important consideration is that some factoring algorithms' complexity depends on the size of the number to be factored, while some depend on the size of the factor. So there's a trade-off, and the balance could change with any breakthroughs."
crypto,2gj7c0,TNorthover,12,Tue Sep 16 11:11:10 2014 UTC,"Suppose you have a 16 bit prime (p) and another 16 bit prime (q). Multiply them together you have part of your 32 bit rsa public key (n).  Suppose an attacker wants to crack your public key. The stupid brute force method is to factor n. Which is to try to divide n by every number from 2 to square root of (n), in this case every number less than 16 bits.  Now, suppose you have 3 numbers instead of 2. The new n = pqr where r is another 16 bit prime. Notice that cracking process still involves trying every prime smaller than 16 bits. As soon as you find a factor, you can factor the other two by dividing n by the first prime factor you found.  So adding more factors does not make the cracking process any harder. Instead, it just makes the public key longer."
crypto,2gj7c0,fishtastic,3,Tue Sep 16 06:25:04 2014 UTC,"So after you have found one of the factors you still need to find the other two which means that factoring for 3 primes is roughly twice as hard as 2 primes but this is not significant given the key expansion required.  With respect to it being easier for 3 primes, what is meant here is it is easier for the same length N. Since for 2 primes you need to check up to the square root of N, while with 3 primes you need only to check up to the cube root."
crypto,2gj7c0,danmartin656,11,Tue Sep 16 08:39:13 2014 UTC,"It is not twice as hard though.  If we use the algorithm described above, then as we find our first factor we do not need to start over. We now know that the remainder of the key divided by the now found smallest factor is not divisible by any number smaller than the smallest factor. Thus we can continue trial division from the current point instead of starting over.  So the number of trial divisions we need to do are actually only dependent of the second largest factor of the key as long as we know beforehand how many factors the key actually have.  The above is still true if we don't know the number of factors but the second largest factor is not small compared to the largest factor. If the second largest factor is less than the square root of the largest factor then we must continue up until the square root of the largest factor in order to see that the largest factor is prime.  So the number of primes do not actually matter. And if you are willing to use a key of length n, then it is best to choose two primes that are approximately sqr(n) in size."
crypto,2gj7c0,Feydarkin,1 point,Tue Sep 16 09:39:54 2014 UTC,"My apologies it isn't twice as hard using the trial division method, although it has the potential to take twice as long if you use different factorisation methods. However you are correct that trial division will take the same amount of time.  So for best security you want all of your primes to be approximately the same size. So for a key of size n, if you have k primes the you will find at a prime by only searching up to the kith root."
crypto,2gj7c0,danmartin656,3,Tue Sep 16 10:06:44 2014 UTC,"True.  One thing to clarify though; no matter how many factors a key has, at ost one can be higher than sqrt(key). Thus we will find all other factors by searching up to sqrt(key) and as only on remains we know that to be the last factor.   In the two factor case one also does not want the primes two be too close since that opens up attacks from the identity (a² - b²) = (a+b)(a-b). I don't know how this translates to the k-factor case though.  I also have to confess not being an expert, and that our discussion only applies to the given algorithm. I don't know which of the more advanced algorithms easily translates from two-factor to k-factor factorization. Some of the assumptions of some of these algorithms might be broken by k-factor keys."
crypto,2gj7c0,Feydarkin,1 point,Tue Sep 16 11:50:41 2014 UTC,"You can't rely for security on someone using a bad factorisation method. For best security you want them to have no better option than brute force, and a high probability of having to search through a lot of candidates for factorisation. The more factors you add to your key, the smaller space of candidates they'll have to search.  For demonstration: For 3 factors, each of roughly similar size (this is to maximise the amount of candidates searched to find the first key!) the first one will be found after roughtly the cube root of the key length, leaving a compound number 2/3 of the digits long, searching through that you'll probably find the second number after the cube root of the key candidates. That gives you the factorisation after brute forcing 2 * cubert(keysize) candidates. The square root of the key size (AKA roughly how long it takes to search for 1 factor of a compound number) will be larger than twice it's cube root for any number large enough to be a conceivable key.  Of course you could make the first key small and the remaining keys huge, say 4 digits long. That space could be searched faster than you could blink, and has made your key 24 times weaker to brute force search, whereas extra digits on a key make it exponentially harder to search. It's most robust for the keyspace just use 2 big numbers.  This problem of needing so many digits to be robust against factorisation (and needing to use 2 big primes as factors) is part of why RSA keys are so huge compared with systems which aren't based on exponentiation/factorisation."
crypto,2gj7c0,fixtressclack,1 point,Thu Sep 18 17:58:10 2014 UTC,This is assuming our method always finds the smallest factor first.
crypto,2gj7c0,ivosaurus,2,Tue Sep 16 15:33:47 2014 UTC,"This response does not reflect either how multiprime RSA is used, or the state of the art in factoring algorithms.  Multiprime RSA deployments use the same 1024- or 2048-bit modulus size that two-prime RSA does, but have more, smaller factors of N.  They don't keep the same factor size and scale to eg 1536 bits.  If there are two or three factors of about the same size, then the fastest publicly known attack is the General Number Field Sieve (GNFS).  The runtime of GNFS doesn't depend on how many factors there are or how big they are, just on the size of N.  So going from two to three isn't known to weaken RSA, but people don't do this because they are conservative.  If there are more factors of N, they will be smaller.  Past three or four factors, the Elliptic Curve Method (ECM) will become faster than GNFS, since ECM's runtime depends on the size of the smallest factor.  So past three or four factors with a fixed modulus size, you will lose security."
crypto,2gj7c0,bitwiseshiftleft,0,Mon Sep 22 18:40:36 2014 UTC,"As soon as you find a factor, you can factor the other two by dividing n by the first prime factor you found.   Really? I thought if n=pqr, and you find r, then you know r, and n/r=pq.  Edit: I guess it was a little unclear from reading the explanation. I thought ""you can factor the other two"" meant it is trivial to get p,q if you find r."
crypto,2gj7c0,cunttard,2,Mon Sep 22 11:07:13 2014 UTC,"Actually, 3 or a few more is fine; some people do that for a slight speed boost.  Basically, there are various factoring algorithms.  Some (elliptic-curve method is the best for difficult cases) depend on the size of the factors to be found, so resistance to them is ensured by having large factors. 2 factors provides the largest possible secret factors.  Others (general number field sieve) depend only on the number being factored.  They are fastest when the factors are particularly difficult, e.g.chosen to be particularly large, as in RSA.  You need your factors large enough that the former techniques aren't easier than the latter.  There have been significant advances in the NFS techniques since RSA was developed, so balancing the two can be done with less than half-sized factors.  But still, two factors is simplest and gives the greatest resistance to possible future advances in size-of-factor-dependent factoring algorithms, so people tend to stick with it.  The nice thing is that this only affects secret-key processing, so you can use more than two factors privately and nobody using your public key has to change their software to cope."
crypto,2gj7c0,cypherpunks,2,Tue Sep 16 20:30:28 2014 UTC,"To add to fishtastic's correct response, we can also see that brute-force search is actually sped up by adding more prime factors. For each additional prime factor chosen, the probability that brute force will find one of the factors, in a particular guess, increases. Think of the number line from 2 to N, where N is the largest prime we will use. Think of all the primes marked along that number line. If we used 50% of the primes between 2 to N to construct the public-key modulus then, on the first iteration, the brute force search would have 50% probability of finding one of the factors! While the probability of finding a new factor does decrease with each new factor that is found by the search, the brute-force search is still turning up information about the key. In other words, some number of bits of the key (I have no idea how to calculate this) are being discovered each time a new factor is found. The more factors, the higher the probability that they will be found by brute force and the faster that information about the key can be extracted by brute force. Using just 2 prime factors is the worst case from the point-of-view of brute force... it will require the most brute-force search for a given N to discover any bits of information about the key in the case of 2 factors."
crypto,2gj7c0,claytonkb,1 point,Sat Sep 20 07:13:27 2014 UTC,"Long story short, it adds unnecessary complexity to a general, two number system and if higher security is required, the two numbers (and therefore the key) can simply be increased in length.   There simply is no need for the complexity of a third number."
crypto,2gj7c0,bluemellophone,1 point,Tue Sep 16 16:30:40 2014 UTC,"The two primes aren't used individually like that. Instead, their product is part of both the public and the private key. It's more of a background space which you can choose private/public keypairs from (but don't reuse it for multiple pairs!).  The (known) advantage of using multiple primes is that the decryption can be more efficient for a given final key length. The (known) disadvantage is that certain factorisation algorithms are more efficient against a number that's the product of 3 or more primes than one with just 2."
crypto,2gi594,jamoes,15,Mon Sep 15 22:32:29 2014 UTC,"They're particularly useful in a 2-way conversation.  You know you didn't sign this and thus I must have said it, but you can't prove that to anyone else."
crypto,2gi594,cypherpunks,3,Mon Sep 15 23:04:28 2014 UTC,You can use a standard HMAC for that.
crypto,2gi594,bkkgirl,2,Tue Sep 16 08:12:47 2014 UTC,Less anonymous .
crypto,2gi594,KayRice,2,Tue Sep 16 11:33:09 2014 UTC,What security properties would the ring scheme have that an HMAC with a shared key would not?
crypto,2gi594,bkkgirl,3,Tue Sep 16 11:46:04 2014 UTC,Not knowing which key signed it.
crypto,2gi594,KayRice,3,Tue Sep 16 12:36:41 2014 UTC,You can include the public key of Obama if you wish. Harder to get an HMAC key you share with him.
crypto,2gi594,Natanael_L,1 point,Tue Sep 16 18:59:48 2014 UTC,ed25519
crypto,2gi594,bkkgirl,1 point,Fri Sep 19 17:18:03 2014 UTC,"Er, how?  Alice is sending a message to Bob.  Bob needs to know that it came from Alice (and not Eve).  To do that, we need to use Alice's private key somehow.  A HMAC is fundamentally a shared-key algorithm.  There's a step missing here."
crypto,2gi594,cypherpunks,2,Tue Sep 16 16:59:16 2014 UTC,"You establish the shared key at the beginning of the conversation. Now this does have important applications for asynchronous communication, like gpg. But I can't really see much advantage in synchronous stuff really."
crypto,2gi594,bkkgirl,1 point,Wed Sep 17 09:09:26 2014 UTC,"This is a cool use-case! One major gotcha though: your conversation partner could publish their private key, which would prove who signed which messages."
crypto,2gi594,cypherpunks,2,Tue Sep 16 18:54:49 2014 UTC,"your conversation partner could publish their private key, which would prove who signed which messages.   Er, no it wouldn't.  Anyone who knows either private key could have signed the messages.  Publishing one private key just means anyone could have made that signature."
crypto,2gi594,autowikibot,2,Tue Sep 16 19:06:45 2014 UTC,"Ah, I think you're right, as long as the signatures are not deterministic.  My concern was that someone could publish their private key as well as the contents of a private 2-way conversation in which each message is signed with a ring signature. Then, anyone could use the private key to attempt to sign each of the messages in the conversation, and determine which messages were signed by the leaker, and which messages were signed by the other party. Of course, this attack only works if the signatures are deterministic so they can be replicated by a third party.  Also, you wouldn't want to use ""one-time"" ring signatures for a conversation, or else every signature would contain a key image that reveals who the signer is.  I think Off-the-record Messaging already solves this general problem by using forward secrecy. They just generate a unique key for every message, which makes it impossible for any third parties to determine which party signed each message."
crypto,2gi594,cypherpunks,1 point,Tue Sep 16 19:32:24 2014 UTC,"Off-the-Record Messaging:       Off-the-Record Messaging (OTR) is a cryptographic protocol that provides encryption for instant messaging conversations. OTR uses a combination of AES symmetric-key algorithm with 128 bits key length, the Diffie–Hellman key exchange with 1536 bits group size, and the SHA-1 hash function. In addition to authentication and encryption, OTR provides perfect forward secrecy and malleable encryption.  The primary motivation behind the protocol was providing deniability for the conversation participants while keeping conversations confidential, like a private conversation in real life, or off the record in journalism sourcing. This is in contrast with other cryptography tools that produce output which can be later used as a verifiable record of the communication event and the identities of the participants. In most cases, people using such cryptography software are not aware of this and might be better served by OTR tools instead. [citation needed] The initial introductory paper was named ""Off-the-Record Communication, or, Why Not To Use PGP"".   The OTR protocol was designed by cryptographers Ian Goldberg and Nikita Borisov. They provide a client library to facilitate support for instant messaging client developers who want to implement the protocol. A Pidgin and Kopete plugin exists that allows OTR to be used over any IM protocol supported by Pidgin or Kopete, offering an auto-detection feature that starts the OTR session with the buddies that have it enabled, without interfering with regular, unencrypted conversations.    Image i     Interesting: Google Talk | Instant messaging | BitlBee | Authentication   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2gi594,cypherpunks,1 point,Tue Sep 16 19:33:05 2014 UTC,"Then, anyone could use the private key to attempt to sign each of the messages in the conversation, and determine which messages were signed by the leaker, and which messages were signed by the other party. Of course, this attack only works if the signatures are deterministic so they can be replicated by a third party.   And ring signatures are inherently non-deterministic; it's part of the algorithm.  Edit: Apparently, ""ribg signatures"" are different than the technique I'm used to.  Must study.  You might be right!  The one I'm used to is explained below...  It's a lot like secret sharing, where you have to XOR all the pieces to recover the original secret.  Using RSA because it makes a simpler example, you use the secret (decryption) key to generate a signature = Decrypt(hash), and anyone can use the public key to verify that hash = Encrypt(signature).  Basically, the hash is the ciphertext and the signature is the plaintext.  So what I do is generate a series of random plaintexts P2, P3, ... and, using public keys, corresponding ciphertexts C2, C3, etc.  Then I compute the required ciphertext C1 such that C1^C2^C3^... = hash.  Then, using my key, I compute P1 = Decrypt(C1).  The signature is the set of all plaintexts.  Anyone can convert them to ciphertexts with the public keys and verify the XOR.  But each plaintext/ciphertext pair is individually totally random.  An extension lets you confirm that a quorum of signers signed the message without revealing which ones."
crypto,2gi594,cypherpunks,1 point,Tue Sep 16 19:43:41 2014 UTC,"Thanks for the in-depth explanation of the classical ring signature scheme! Even after implementing something similar, it still helps me better internalize how it works by hearing a plain-english description.  I still think you may be right that non-one-time, non-deterministic ring sigs could be useful for a 2-way conversation.  The gem I wrote does indeed create deterministic signatures. It computes a seed, which is a hash of the private key and the message. Then, where the algorithm calls for random q and w values, it constructs these deterministically by hashing the seed and a nonce. I implemented it this way because it eliminates the risk of a side-channel attack due to a weak RNG."
crypto,2gi594,cypherpunks,2,Tue Sep 16 20:23:52 2014 UTC,"I implemented it this way because it eliminates the risk of a side-channel attack due to a weak RNG.   The right thing to do is use the best RNG you have, and then mix in the private key.  As good as your current algorithm if the RNG is utterly broken (always returns zero), and better if possible.  I haven't looked at your code to see the PRNG you use to generate all the different values.  It's important to get it right; the security proof requires completely uncorrelated random numbers, so you need to ensure that an attacker can't derive any one of the numbers from knowledge of all of the others.  That's not too difficult a thing to do, but it's not trivial, either.  What takes some thinking is whether you want to use an additional cryptographic primitive for it, or you can piggyback one of the existing ones."
crypto,2gi594,cypherpunks,1 point,Wed Sep 17 04:13:13 2014 UTC,"If you're interested in taking a peek at the code, I'd be delighted :) It's as straight-forward as I could make it: https://github.com/jamoes/ring_sig/blob/master/lib/ring_sig/private_key.rb#L76  That's the sign method, which initializes the seed. The q and w values are generated below on line 113.  The hasher.hash_string method is basically just a wrapper around whatever hash function the key was constructed with (typically Sha256). The hasher.hash_array method converts all the elements of the array into a canonical string form, concatenates them all together into a single string, and then hashes that string using the hash_string method. (You can also see the actual implementation of these methods in the Hasher class if you'd like).  So, the q and w values are generated by a secure hash function (the same hash function that generates the challenge elsewhere in the algorithm). When I implemented it this way, I didn't even think that I was deviating from the algorithm's specification - I just thought I was making a good design decision in the way I chose to derive the random numbers for q and w.  Addressing your other comment here:   The point is, the signature is not deniable.   One-time ring signatures aren't deniable anyway, because of the key image, so I don't think this is an issue.   Far better to avoid the need to evaluate the security of the weakened primitive entirely.   This is a really good point, and it has me thinking that maybe I should change the implementation. I could just have the sign method take in a third argument, which is a user-provided random number, and then hash that random number along with the message and the private key when generating the seed.  I'm leaning against doing this though, because based on the above analysis, it seems unnecessary. I'd rather not make the API and the signing algorithm any more complicated than it needs to be. I'd love to hear your thoughts though!"
crypto,2gi594,dillpicklechips,1 point,Wed Sep 17 20:18:30 2014 UTC,"I had a bit of a look. but (I may be misinterpreting because I'm not familiar with Ruby) it seemed to depend on some other libraries to do some underlying EdDSA operations.  For example. just choosing random numbers uniformly from a non-power-of-two sized range is not trivial, and I was trying to find where that was done.  How exactly do you generate more than 256 bits of random numbers from a SSHA-256 state?  Those are the sorts of details I was trying to find.  To start, can you explain the Hasher::hash_string() function to me?  I'm not quite sure what @group.order is, why algorithm.digest() doesn't return the same value each time, and what s.unpack('H*').first.to_i(16) means."
crypto,2gi594,marklarledu,1 point,Wed Sep 17 20:33:49 2014 UTC,"To start, can you explain the Hasher::hash_string() function to me?   @group.order is the ECDSA group's prime order. This is the l variable in the CryptoNote whitepaper (although it will be a different value if you're using a different ECDSA group).  algorithm.digest(s) should always return the same thing for the same value of s. Assuming the Hasher is instantiated with Sha256, then algorithm.digest(s) is computing the Sha256 hash of s.  s.unpack('H*').first.to_i(16) will convert a binary string (which is what the digest method returns) into an integer.  Assuming the Hasher is instantiated with Secp256k1, and Sha256, then the hash_string method will take a Sha256 hash of s, and test to ensure the output is less than the Secp256k1 group's order (which it almost always will be, since the order is only slightly less than 2256). If it happens to be greater than the group's order, then it will rehash the number until it finds a number less than the group's order. Finally, it will return the number.  EDIT: From looking over my code more closely because of this discussion, I realize now that there is a subtle bug in my implementation. The hash_string method should be returning a value between 0 and the group's prime (instead of between 0 and the group's order). Only the q and w values should be between 0 and the group's order. Most signatures based on Secp256k1 won't be any different, but it is still definitely a bug. I'll be releasing a new version shortly which fixes this. This is not the case... the values that the hash function returns should indeed be between 0 and the group's order, as it is currently implemented."
crypto,2gi594,Jasper1984,1 point,Wed Sep 17 21:02:53 2014 UTC,"Aha!  I'm sorry, you're right.  The implementation described has a weakness in that someone willing to share their private key (perhaps with a trusted auditor rather than the general public) can show that they didn't generate the seed.  That's not in the original paper; the SIG algorithm on page 9 uses random qi and wi (the latter act as the random plaintexts in my description).  I'd call that a serious bug in your implementation.  Crypto is tricky!"
crypto,2gi594,Jasper1984,1 point,Tue Sep 16 19:49:37 2014 UTC,"I'd call that a serious bug in your implementation. Crypto is tricky!   Crypto is tricky! I appreciate having more eyes on the code!  Is it really a bug though? The values aren't random, but they're also not predictable since they're created from a hash of the message and the private key."
crypto,2gi594,ganesha1024,2,Tue Sep 16 20:26:46 2014 UTC,"The point is, the signature is not deniable.  You can prove you made it if you want to, or be forced to prove it if you don't.  A very important rule of crypto is to be very very careful weakening a security proof.  ""But that doesn't matter""is not obvious and requires extremely careful thought.  Far better to avoid the need to evaluate the security of the weakened primitive entirely."
crypto,2gi594,ganesha1024,9,Wed Sep 17 03:42:13 2014 UTC,There is also https://github.com/monero-project/urs although it's probably more useful for bitcoin type stuff. I'm interested in it's application in creating a pool of people who offer their bitcoin inputs and use ring signatures to mix the outputs making sure that everyone did say where they should go publicly but no one can tell who said it.  The other interesting application could be voting!! You can see everyone's vote but you can't tell who voted for who. Each voter can also verify and see that their vote is counted. If the signatures start getting too big you can divide the voting public into smaller sub-groups.
crypto,2gi594,dillpicklechips,2,Tue Sep 16 00:41:32 2014 UTC,"Thanks for the link! It looks like Unique Ring Signatures are very similar to One-time Ring Sigs that my gem and Monero implement. Do you know if they're implementing the exact same algorithm? If so, we should coordinate to make our signatures compatible with each other - there are a number of areas in the algorithm open to interpretation (such as how you concat an array, and how you hash and EC point).  I hadn't thought of the voting application, but that is a cool use-case! One caveat is that ring signatures grow linearly in size with the number of foreign keys used in the signature. If you're using a 256 bit curve, then each foreign key increases the signature size by 64 bytes. So, in a district with 10,000 voters, each voter's signature would be about 640 KB, and the set of all voters signatures would be 6.4 GB. This is feasible to manage, but if the district has 100k voters, each signature is 6.4 MB, and the set of all signatures is 6.4 TB - which I guess is still feasible I guess... It might be more feasible when Moore's law has kicked in a little more.  If you do plan on using ring signatures for a voting scheme, it probably makes since not to randomize the order of public keys (as my gem does). It would be better to just have all voters use a pre-determined ordering of foreign keys, which every voter uses. This would remove the need to transmit the ordering of public keys when verifying votes."
crypto,2gi594,davidpbrown,5,Tue Sep 16 18:53:15 2014 UTC,"I tried to get my last company to use them to solve a multitude of problems but they weren't interested because they didn't want to ""take a risk""."
crypto,2gi594,Natanael_L,3,Mon Sep 15 22:58:49 2014 UTC,"Bit of a shameless plug, but having an anonimyzer contract in Ethereum using this would be nice."
crypto,2gi594,davidpbrown,2,Tue Sep 16 12:17:56 2014 UTC,"I'm not too familiar with Ethereum, but given they are including a turing complete scripting language, I think it should be possible to compute ring signatures in an ethereum transaction. One challenge may be getting a valid set of foreign keys though..."
crypto,2gi594,Natanael_L,1 point,Tue Sep 16 18:35:53 2014 UTC,"Vitalik made an implementation of ECC, btw. It does show that gas costs for implementing such things can be high at this point. There is this native extensions idea to try fix this. (A simpler but less flexible solution would be to just add a instruction that does stuff.)  Not sure what challenge is with the foreign keys? I'd imagine a anonymizing contract so somehow have a bunch of people all entering the same amount of money, and then they can each get out that money once with some zero knowledge proof."
crypto,2ghaxe,-redsnap-,2,Mon Sep 15 18:09:57 2014 UTC,You should try asking in /r/gnupg
crypto,2ghaxe,rya_nc,1 point,Mon Sep 15 18:34:36 2014 UTC,Your choices look good but you may want to set them in your config file so they will be used by default and can be left out of the command line.
crypto,2ghaxe,28dja4,1 point,Tue Sep 16 01:24:13 2014 UTC,How would you go about doing that? Such contribution to this would be great.
crypto,2ghaxe,Fastidius,1 point,Fri Sep 19 23:47:49 2014 UTC,"Write to ~/.gnupg/gpg.conf (or %appdata%\gnupg\gpg.conf if you use Windows).  The content should be your settings without the dashes, one for each line, like this:  personal-cipher-preferences aes256 personal-digest-preferences sha512"
crypto,2gfoas,3vilsocket,5,Mon Sep 15 05:37:23 2014 UTC,"The signature is specific to the message. In that situation, they can go around posting the message if they wish, but they can't modify what you said in any way, or the signature will no longer be valid."
crypto,2gfoas,Bth8,3,Mon Sep 15 05:57:49 2014 UTC,"Not only specific to but DEPENDENT ON, in the sense that the signature is the output of a function given the message as input (along with the sender's key)."
crypto,2gfoas,_zenith,6,Mon Sep 15 06:11:54 2014 UTC,This should help.
crypto,2gfoas,NaynCat,3,Mon Sep 15 06:31:04 2014 UTC,"The signature only counts for that only message, the signature not only proves it was you who said it, but also when you signed it and what you signed."
crypto,2gfoas,Darksonn,3,Mon Sep 15 06:18:33 2014 UTC,"A digital signature is produced by first creating a hash of whatever you are signing, in this case an email. A hash is basically the result of a formula that produces a unique value for your data. To complete the signature you encrypt the hash with your private key. You send that encrypted hash as the signature.   On the other end, the recipient will decrypt the hash using your public key and see if the hash matches the message received. If one single letter is changed in the message the hash will no longer match and the signature will be invalid."
crypto,2gfoas,bbakks,2,Mon Sep 15 06:32:49 2014 UTC,"The signature is tied to the message text with a hash function like SHA-1 or SHA-256 (or for old ones, MD2 and MD5.)  With PGP the message is the text between the headers. Unless someone's found a weakness in the hash function (MD5 is known to be weak , SHA-1 is not looking good) then someone cannot transfer a specific signature to another message.  With MD5-based signature schemes it is possible to transfer signatures to some messages. This was demonstrated in 2009 when an SSL certificate was forged by getting a CA to sign a second certificate that had the same MD5 hash.  A big limitations of digital signatures is that they merely state that the signer was in possession of the private key and a hash of the message. Nothing more.  While with a strong hash function it's computationally impossible to substitute the message for another one that has the same hash, it doesn't mean that there cannot be attacks based on using the signature and its message for a use that wasn't intended.  For example when using digital signatures in authentication scheme like in SSL/TLS, it's common for the signer to include a nonce (number used once, ever) of their choosing in the message being signed to prevent re-use of the signature."
crypto,2gfoas,GahMatar,2,Mon Sep 15 17:17:32 2014 UTC,"The hash signature should be different for every email. Changing, adding, or removing a single character in the signed text will produce a completely different signature than before."
crypto,2gfoas,psonik,1 point,Mon Sep 15 17:37:07 2014 UTC,"A hacker would need to get your PRIVATE key to impersonate you in public (not your public key and not a signature that has been posted).  Be sure to assign a really strong password to your private key (not a couple dictionary words).  With the private key, the hacker can sign files as described in the other comments.  You should also create a revocation certificate now, and save it in a safe place offline.  You can post that or send it to friends if you have been hacked.  Do not leave the revo cert online--if the hacker gets that, then the hacker can revoke your public key."
crypto,2gfoas,nwad15,-1,Mon Sep 15 21:32:28 2014 UTC,.
crypto,2gd7oq,Kj0ttbiten,3,Sun Sep 14 13:23:38 2014 UTC,"Truecrypt 7.1 is as good as ever. If linux, look for truecrypt-7.1a-linux-x86.tar.gz and check the md5sum is 09355fb2e43cf51697a15421816899be perhaps Windows trusted versions will be alongside that."
crypto,2gd7oq,davidpbrown,7,Sun Sep 14 18:46:38 2014 UTC,Only don't use md5 for verification ;)
crypto,2gd7oq,davidpbrown,1 point,Sun Sep 14 19:12:06 2014 UTC,What's the recommended option then?..
crypto,2gd7oq,davidpbrown,3,Sun Sep 14 19:21:02 2014 UTC,https://defuse.ca/truecrypt-7.1a-hashes.htm
crypto,2gd7oq,d4rch0n,2,Sun Sep 14 19:23:38 2014 UTC,"Just to note for the paranoid that my sha256 matches, that site looks ok then."
crypto,2gd7oq,davidpbrown,2,Sun Sep 14 19:27:40 2014 UTC,"If you're going to go out of your way to check hashes, you need to check yourself. I don't think you're lying, but thinking ""Oh okay this dude on the internet said he downloaded a good version"" is not nearly as secure as checking yourself :)"
crypto,2gd7oq,d4rch0n,2,Sun Sep 14 20:49:45 2014 UTC,"Yes.. but in the case of Truecrypt being pulled and canary's flying, there is more reason than usual to be wary. In this case then consensus on what can be trusted is perhaps useful."
crypto,2gd7oq,m1000,3,Sun Sep 14 21:43:50 2014 UTC,"Some would say to avoid SHA1 at this point as well. From what I read it'd be incredibly expensive to induce a collision, but it's much much safer to just move to SHA256."
crypto,2gd7oq,Dwarf_Vader,1 point,Sun Sep 14 20:51:37 2014 UTC,"Yes, and on x86_64 SHA512 or SHA512/256. SHA512 is faster on x86_64. Or better yet, if you can use any hash, then use BLAKE2b.  $ sudo mount -o size=4G -t tmpfs none /mnt/tmpfs $ cd /mnt/tmpfs  $ cp ~/Downloads/iv.avi . $ ls -la iv.avi  -rw-r----- 1 user users 2683875122 Sep 15 21:27 iv.avi $ echo 3 | sudo tee /proc/sys/vm/drop_caches; time md5sum iv.avi                                    3 1fcb1023b021c1f883905c99d838ec70  iv.avi md5sum iv.avi  6.03s user 0.81s system 99% cpu 6.875 total $ echo 3 | sudo tee /proc/sys/vm/drop_caches; time sha1sum iv.avi 3 36911e1bda8ad5ecc8f336bf22a46b9631d97da4  iv.avi sha1sum iv.avi  6.83s user 0.78s system 99% cpu 7.632 total $ echo 3 | sudo tee /proc/sys/vm/drop_caches; time sha256sum iv.avi 3 f862c820662abb44be7aa58062539d94b23c461ad8932ca4eaf4a898a9b0eba4  iv.avi sha256sum iv.avi  17.66s user 0.82s system 99% cpu 18.522 total $ echo 3 | sudo tee /proc/sys/vm/drop_caches; time sha512sum iv.avi 3 f6090a7d40016a47eee023f623fd23feeff31eca559578abe5c1bd8cca41448735b4c3f77d90c268c5fb0761f1addea275216d166f49ecb624d3b4e79560af13  iv.avi sha512sum iv.avi  11.23s user 0.76s system 99% cpu 12.031 total $ echo 3 | sudo tee /proc/sys/vm/drop_caches; time b2sum -a blake2b iv.avi 3 ac1b3ae3c81cec776e97c3b3c4498588b83ebae76fa632f9eb668a9c584367589d8f5fe0d14aa526f37d6df46cbfb971c6cb7f2b62720ddd674cfe85235043cc iv.avi b2sum -a blake2b iv.avi  7.08s user 0.73s system 99% cpu 7.850 total $ echo 3 | sudo tee /proc/sys/vm/drop_caches; time b2sum -a blake2s iv.avi 3 4dedaca939dc69b13635f3660591c41159ad53b98c06c33d00a069d6bb78dbe6 iv.avi b2sum -a blake2s iv.avi  7.82s user 0.86s system 99% cpu 8.716 total     Results:  md5sum:       6.9s sha1sum:      7.6s sha256sum:   18.5s sha512sum:   12.0s BLAKE2b:      7.9s BLAKE2s:      8.7s"
crypto,2gd7oq,leakersum,4,Mon Sep 15 19:38:27 2014 UTC,"DiskCryptor and Truecrypt 7.1a will both do full disk encryption.  I have heard that Diskcryptor allows for key files or otherwise can be made to need a usb stick for a disk encryption boot, but I have never used it so I don't know for sure, or how it works.  Truecrypt can NOT use anything except a password for whole disk encryption, so I know for sure it doesn't do what you want.  I would look into the documentation on Diskcryptor."
crypto,2gd7oq,shibz314,2,Sun Sep 14 19:27:44 2014 UTC,"If its related to your work place and work data, you should talk to your IT people."
crypto,2gd7oq,Dwarf_Vader,1 point,Mon Sep 15 02:03:47 2014 UTC,"Private computer with private stuff, just that is what might be gathered inteligence of."
crypto,2gbl7l,dgryski,5,Sat Sep 13 21:58:10 2014 UTC,"Interesting. A few things stand out to me:   As our cryptanalysis will show, Vulcan is a catastrophically weak cipher, even when measured by 1970s standards. Vulcan would never have withstood public inspection and DVP would have been far less successful in the marketplace had its customers known how vulnerable this cipher actually was. We strongly suspect that many other proprietary ciphers are similarly weak and we warn against their use.  We emphasize that no special knowledge of cryptanalysis is necessary to break Vulcan; an undergraduate-level understanding of linear algebra is more than sufficient.  We believe that breaking a Vulcan-encrypted message would be a suitable homework assignment for students enrolled in an undergraduate cryptography course.   Our second question is why Vulcan is so weak. Admittedly, cryptography was much less well understood in the early 1970s than it is today; nonetheless, anyone with an undergraduate education in mathematics would have known at that time that Vulcan was seriously weak. It would not surprise us if this was deliberate.  Furthermore, even a simple nonlinear operation in the ciphertext mixing function would have eliminated the simple attack of linear algebra, but the designers chose not to do this either. We cannot offer a reasonable explanation why a simple nonlinearity was not included in order to strengthen Vulcan. Our suspicion is that Vulcan is deliberately weak, although we have no proof of this. Nonetheless, we prefer this explanation to the alternative possibility that the designers were simply incompetent.  No intelligence agency anywhere in the world would have had difficulty cracking Vulcan in the 1970s. Perhaps when NSA declassifies some of their signals intelligence operations of the 1970s — something not likely to occur for another 60 years — future cryptographers will have solid evidence of this claim.   and finally   We do not know why the myth still persists that reverse-engineering hardware is more difficult than reverse-engineering software. We caution that secrets cannot be hidden in silicon or software; only a fool believes otherwise."
crypto,2gbl7l,knappis,2,Sun Sep 14 07:21:29 2014 UTC,"That was some nifty silicon and firmware reverse engineering, wrapped up in a succinct writeup."
crypto,2ge9nc,GeneralPow,4,Sun Sep 14 20:20:02 2014 UTC,"Setting up an encrypted partition does require destruction of the existing data in that space, yes."
crypto,2ge9nc,phyzome,2,Mon Sep 15 00:24:49 2014 UTC,"Are you asking if it is possible to create a USB stick that allows you to boot into an operating system while having the entire USB encrypted? if so yes (although a small section for the kernel will be unencrypted.  Download an install DVD, burn it to a DVD or put it on a USB if you computer allows it, then run the install and install it to another USB and check the options to 'encrypt disk.'  Fedora and Debian are good bets if you want security.    If you already have a USB that you use to boot, and you want to retroactively encrypt the whole thing, you would be wasting lots of time -- just format a new disk and transfer your files."
crypto,2ge9nc,nmkaug,1 point,Sun Sep 14 21:03:29 2014 UTC,Depends on the technology used.  i'm of the understanding that luks does not do this and only creates headers and the such like where it needs them. what you then do inside the container will then determine what gets written.  I believe this is partly why its recommended you fill the target with random junk as your first step.
crypto,2ge9nc,ackackacksyn,1 point,Mon Sep 15 12:37:47 2014 UTC,"To some extent, but in many devices (SD cards, I'm looking at you) even overwriting multiple times with random data is not guaranteed to destroy the data. The primary reason for the recommendation is because an attacker can determine how much data that's stored on a device (and sometimes other information as well) if you don't."
crypto,2ge9nc,bkkgirl,0,Tue Sep 16 07:54:35 2014 UTC,"If you mean make it so you can't access the data, yes. If you mean make it so an attacker cannot access the data, no. For your solution, just copy the files to your computer before setting up the encrypted partition and then copy them back."
crypto,2ga7nb,fo0,1 point,Sat Sep 13 12:14:05 2014 UTC,Because it uses different algorithms.
crypto,2g94w0,Whatzzzzup2,2,Sat Sep 13 01:14:35 2014 UTC,"ZRTP can work regardless of how the call is routed because it uses in-band signaling in the media stream. In other words, ZRTP pretends that the encryption key setup is part of the voice data, so it will get routed along with all the normal voice data, without needing to interface with the SIP call setup/signaling layer.   However, ZRTP will not work with Asterisk, period. This is because Asterisk does not just route your calls. It sits in between you and the person you're talking to  eavesdrops on the call, records both sides, possibly adds audio or otherwise modifies the recording, then plays back its own version to the other party.   This man-in-the-middle munging of the media stream destroys the ZRTP data, so it'll never work.   Furthermore, it's worth noting that Asterisk's eavesdrop-on-and-falsify-the-voice-data behavior, while innocuous and expected if you want, e.g. an IVR phone menu system, is completely indistinguishable from an adversary's wiretapping you and injecting fake bits of conversations to confuse the other party to the call. In other words, Asterisk's behavior is exactly what ZRTP is designed to stop.   Now, it is possible to use ZRTP via an Asterisk plugin. However, you will not be the endpoint of the ZRTP call, the Asterisk server will be. Basically, you ask Asterisk to place a call for you, it calls the other guy, then the other guy and Asterisk set up a secure ZRTP link between them. You have to take it on faith that the conversation as relayed to your extension by Asterisk is unmodified and hasn't been recorded or snooped on by the Asterisk server.   You may want to look into proper SIP routers, and treat Asterisk merely as an extension in your system (e.g. dial 700 to access the interactive menu) rather than the main hub. Try FreeSwitch, which just sets up your calls and doesn't MitM your media streams."
crypto,2g94w0,alkw0ia,1 point,Sat Sep 13 15:24:23 2014 UTC,"So if I am understanding you correctly then, I can use ZRTP to call anyone else sip and as long as their client supports ZRTP and they are not using Asterisk it should work even if they are on a different PBX than mine?"
crypto,2g94w0,alkw0ia,2,Sun Sep 14 02:34:53 2014 UTC,"So long as everything's configured correctly on each endpoint, and there's nothing else messing with the media stream (i.e. are you sure the other side isn't running Asterisk), yes, it should work."
crypto,2g94w0,Natanael_L,1 point,Sun Sep 14 03:47:30 2014 UTC,"ZRTP don't care who the endpoint is. Don't know if the VoIP protocol itself supports that, though."
crypto,2g63ey,electronics-engineer,4,Fri Sep 12 03:29:57 2014 UTC,"(I'm the author)  mrmcd.jpg is a JPEG picture, but also contains 2 extra blobs of data (one pre-decrypted, the other pre-encrypted).  When this file is encrypted with AES, one of the blob is used to turn it into a valid PNG picture.  When this file is decrypted with Triple DES, the other blob is used to turn it into a valid PDF document.  use the mrmcd.py script to perform the encryption/decryption.  it requires some crypto tricks, but also binary formats tricks, as neither the PDF nor the PNG are fully standard.  For more details (both talks were recorded):   slides explaining all the technical details slides with easy introduction"
crypto,2g63ey,simpleuser,-14,Sat Sep 13 19:26:53 2014 UTC,Try reposting this under r/dreaming.
crypto,2g63ey,nmkaug,13,Fri Sep 12 05:39:14 2014 UTC,"Nevertheless, he's done it.  Using CBC let him choose the first block output by each crypto operation by setting the IV, which is enough to make a valid PNG & JPEG header skipping the encrypted data from the other systems. Then he carefully concatenated the images he wanted, preprocessed to encrypt/decrypt sensibly.  Clever."
crypto,2g63ey,TNorthover,7,Fri Sep 12 06:07:56 2014 UTC,"And yet here it is, even though you can't imagine how.  Did you try the linked demo?"
crypto,2g63ey,phyzome,2,Fri Sep 12 11:02:01 2014 UTC,I don't follow. The author(s) seem to have done similar things in the past; what makes this so unbelievable?
crypto,2g63ey,Doomed,5,Fri Sep 12 05:43:14 2014 UTC,"When you encrypt a file, the result is that there is near zero correlation between input values and output values for each byte.  To ask it to map JGEG (a highly structured file format) to PNG (a different, highly structured format) means that there must be a reliable way to map the ciphertext (encrypted file) to a highly ordered format (PNG).  The task would require a mathematical mapping from one set of values to another, and that would imply the the encryption is broken, because encryption is designed to make such mappings nearly impossible."
crypto,2g63ey,nmkaug,8,Fri Sep 12 05:51:19 2014 UTC,"I think you misunderstand what's going on. The entire JPEG does not become a PNG when the encryption occurs, it becomes pseudo-random nonsense that the PNG headers and data (which were previously pseudo-random until the encryption took place) ignores.   So if you take a PNG, run it through a decryption function, then concatenate the result with a JPEG in the clear, when you re-encrypt with the right key, the PNG will be in the clear and the JPEG will be encrypted. Many file formats allow for blocks of data to be ignored so you simply construct it in a way that for each file the ciphertext from the other file type is ignored."
crypto,2g63ey,they_call_me_dewey,3,Fri Sep 12 15:30:05 2014 UTC,"I'm having trouble finding it but I recall seeing something in the last 6 months on /r/netsec or /r/crypto about an AES-encrypted image (PNG?) of black text on a white background, ""AES"", showing up fairly legibly even when AES encrypted."
crypto,2g63ey,Doomed,3,Fri Sep 12 05:57:46 2014 UTC,There's the old Linux penguin in ECB mode thing (here).  The most similar attack I've seen recently was the malicious SHA1 variant. He used a similar trick to turn his collision into two signed but different useful files.
crypto,2g63ey,TNorthover,2,Fri Sep 12 06:12:17 2014 UTC,"Section 5. Electronic codebook (ECB) of article  Block cipher mode of operation:       The simplest of the encryption modes is the electronic codebook (ECB) mode. The message is divided into blocks, and each block is encrypted separately.         Interesting: AEAD block cipher modes of operation | Block cipher | Ciphertext stealing | Authenticated encryption   Parent commenter can toggle NSFW or delete. Will also delete on comment score of -1 or less. | FAQs | Mods | Magic Words"
crypto,2g63ey,autowikibot,2,Fri Sep 12 06:12:26 2014 UTC,"I'm sure it is possible to build a small file and brute-force some correlation, but it would not be a practical method of encryption.  Perhaps it was also run without salt??? If you do find something like that, I'm guessing that it would be a demonstration of how fast a computer is to brute-force something like that."
crypto,2g63ey,nmkaug,8,Fri Sep 12 06:08:46 2014 UTC,He gets to pick the IV though ... just decrypt [or encrypt] and then compute the XOR of the ideal target and the result [with say IV=0].  The trick is the decoders skip over invalid garbage [or useless sections].
crypto,2g63ey,DasWood,2,Fri Sep 12 11:55:14 2014 UTC,"When you encrypt a file, the result is that there is near zero correlation between input values and output values for each byte.   What? No. The same bytes will always produce the same output with the same keys. If you know what the end state is you can work backwards"
crypto,2g63ey,Natanael_L,3,Fri Sep 12 09:13:06 2014 UTC,"With ECB mode (deprecated since decades), not with CBC, CTR or more modern cipher modes."
crypto,2g63ey,DasWood,3,Fri Sep 12 11:53:30 2014 UTC,"Ok, let me clarify, with the same input, key and cipher mode you will always get the same output."
crypto,2g63ey,Natanael_L,5,Fri Sep 12 14:46:56 2014 UTC,There's the IV too
crypto,2g63ey,nmkaug,0,Fri Sep 12 14:51:55 2014 UTC,"The original title about JPEG, PNG PDF is misleading in the sense that would imply that encrypting one would produce a meaningful file of the other format.  For a give key/IV/input file, the bytes can be mapped, but there is a near zero correlation between input bytes and output bytes--""mapping"" and ""correlation"" are different.  When I looked at the orig, I couldn't get it to work and figured that it was a waste of time anyway. I looked at it originally thinking that the person was claiming that I could take a JPEG, and encrypt it and produce some kind of meaningful PNG (like encrypt a random picture of a dog and get either a picture of the same dog or a picture of a fish, which is not what I think it does)."
crypto,2g63ey,DasWood,-2,Sat Sep 13 04:51:18 2014 UTC,"If you had enough computing power you could determine if there is a key that would produce a meaningful specific PDF from a meaningful specific jpg.   My understanding is that this is what is gong on here, except it isn't meaningful. EG just file headers."
crypto,2g9wtv,KayRice,6,Sat Sep 13 08:14:39 2014 UTC,Unfortunately this wouldn't work. Homomorphic encryption doesn't really work like that and even if it did it wouldn't prevent most methods of cheating. And thats before we ask how stupidly computationally intensive this would be!
crypto,2g9wtv,telepatheic,1 point,Sat Sep 13 08:52:01 2014 UTC,"Secure Multiparty Computation could work (programmatically), but that performs just as bad and don't stop bots"
crypto,2g9wtv,Natanael_L,1 point,Sat Sep 13 08:57:56 2014 UTC,"And thats before we ask how stupidly computationally intensive this would be!   Which is kinda important, with games."
crypto,2g9wtv,Katana__,1 point,Sat Sep 13 13:52:45 2014 UTC,"Instead of selling the cheat as a product to be inspected by the game developers, they instead sell it as a service typically for a monthly cost. This allows them to obfuscate the program so that each one is technically different, which makes it harder for systems like Valve Anti-Cheat (VAC) to correlate them together.   And usually when they sell it for a monthly cost, they have a way of determining when that time is up. Remotely.  Hence that thing where Valve was checking DNS cache history for certain entries, which were used by said services..."
crypto,2g9wtv,Katana__,1 point,Sat Sep 13 13:51:07 2014 UTC,"Hence that thing where Valve was checking DNS cache history for certain entries, which were used by said services...   Communicate over Tor?"
crypto,2g9wtv,Katana__,1 point,Sun Sep 14 01:16:16 2014 UTC,That won't do shit when you're looking at the operating system DNS cache's entries.  Tor is not some kind of magic blanket that makes your tracks disappear.
crypto,2g9wtv,Katana__,1 point,Sun Sep 14 01:32:50 2014 UTC,"Tor is not some kind of magic blanket that makes your tracks disappear.   Actually it pretty much is. Other than traffic correlation attacks, and unless Valve is running a lot of Exit nodes, you sound like you don't understand how Tor works.  Also Tor doesn't use the traditional DNS cache."
crypto,2g69ja,Ajani_Vengeant,3,Fri Sep 12 04:45:14 2014 UTC,"It sounds like the server would need to know the algorithm, in which case the entire system would be corrupted if person could hack into the server.  Try 2-factor auth using YubiKey.  You could have an application on the client side to do that.  I built something like that but it is quite complicated--people who are using one password for everything now probably lack the capacity to use the system that I built, but.... the client generates a gigantic random string (permanently saved in an encrypted file on the client side), selects the purpose of the encryption (online web form, local encrypted file, VPS login, local login...) and that selects another giant key behind the scenes, the user enters the URL or file name, and that is hashed together with the other stuff and spits out a base64 password that goes directly into the clipboard.  problems: banks have arbitrary and stupid password requirements that will break the system (max lenth, min length, must have X nbr of digits, must not have certain symbols, must have certain symbols...) and cause people to stop using it when they need it the most.  Either you get everyone on the planet to stop with the stupid password tests or let people fend for themselves."
crypto,2g69ja,nmkaug,2,Fri Sep 12 05:45:03 2014 UTC,"I was envisioning a client side system, that didn't rely on any client-side files, by using only server side info. Whilst I agree that places with very strict password requirements fail for this, those password requirements suggest a high level of security and a low chance of having the same password. Places like blogs, forums etc. Are more vulnerable to hacks, and thus shouldn't share passwords."
crypto,2g69ja,JakeTJones,2,Fri Sep 12 07:20:48 2014 UTC,"I'm sure that you can rig something that works for you, but I am skeptical that the general public would adopt it because the user would still have to remember where it does or doesn't work--and for people who currently use one password, ""remembering how to use the password system"" is a difficult task--which is why that people still use one password despite decades of people trying to get them to do otherwise.  It is a psychological problem as much as it is a technical problem."
crypto,2g69ja,nmkaug,2,Fri Sep 12 08:27:50 2014 UTC,"Any client side thing needs to be either:   Near 100% ubiquitous.   or   Completely optional.   That tends to mean Javascript. Which requires trusting all the servers completely to never server malicious JS. Or some sort of plugins which yields all sort of limited benefits and need for graceful degradation with mobile devices, etc. which end up allowing bypass.  If you want to do something like that, your best bet is to try to roll it into whatever will replace HTTP..."
crypto,2g69ja,GahMatar,1 point,Fri Sep 12 21:03:06 2014 UTC,This is very similar to what PasswordMaker does - it creates a unique password based off of a hash of a local password and the site URL. It can be used as a password generator that generates the site password each time.   If you're going to develop something you should at least start with a look at the PasswordMaker code:  http://PasswordMaker.org
crypto,2g69ja,warpzero,1 point,Fri Sep 12 12:27:28 2014 UTC,no stretching?
crypto,2g69ja,pint,1 point,Fri Sep 12 13:25:30 2014 UTC,Or this truly lightweight alternative.
crypto,2g69ja,pgblgw,1 point,Mon Nov 3 03:11:36 2014 UTC,"I'm not seeing how this would be any easier for the user or the admins and devs to implement compared to using client-side certificate authentication, which is well-supported by every major browser.  Did you consider this? If so, why did you reject it and/or what advantages do you think this new system would have? Because frankly, I see greater fragility, more difficult deployment for end-users, and some bad assumptions in general."
crypto,2g69ja,0x6d1e,1 point,Fri Sep 12 15:27:38 2014 UTC,"I'm not seeing how this would be any easier for the user or the admins and devs to implement compared to using client-side certificate authentication, which is well-supported by every major browser.   Client side certificate authentication is not working very well :("
crypto,2g69ja,KayRice,1 point,Fri Sep 12 22:31:17 2014 UTC,"HSTS isn't perfect, but I think it's much more well-thought out than what you're proposing here - IOW, your energy is better spent promoting or contributing to HSTS."
crypto,2g69ja,claytonkb,1 point,Fri Sep 12 17:02:35 2014 UTC,http://openid.net/get-an-openid/what-is-openid/  https://www.mozilla.org/en-US/persona/  We also got client certs : http://orcaman.blogspot.no/2013/12/client-certificates-and-html5-kegen-tag.html
crypto,2g69ja,TheTerrasque,1 point,Mon Sep 15 14:30:40 2014 UTC,"It sounds almost like you are describing Webpass.  View source for the full implementation (<2k lines of js + form), which is pretty self-documenting.  Convenience is impacted by the need to change passwords (ie, keep a serial for each site) and differing password complexity requirements, but it's a neat scheme."
crypto,2g69ja,pgblgw,0,Mon Nov 3 03:10:15 2014 UTC,Holy fuck ... use public key crypto.
crypto,2g2zl3,wonkadonk,4,Thu Sep 11 06:42:37 2014 UTC,"I particularly liked how he tied the Dual EC DRBG events to how they probably have happened. Especially hilarious is the note about the ""passive-aggressive patent"" which was supposed to hint that the algorithm is backdoored."
crypto,2g2zl3,hanomalous,4,Thu Sep 11 15:57:39 2014 UTC,He just tweeted this.
crypto,2g2zl3,chiniwini,1 point,Thu Sep 11 14:18:53 2014 UTC,Seems to be gone. What did it say?
crypto,2g2zl3,godofpumpkins,1 point,Thu Sep 11 22:14:11 2014 UTC,http://i.imgur.com/Dmmanu8.png
crypto,2g2zl3,chiniwini,2,Thu Sep 11 22:30:31 2014 UTC,For those who wonder: Kleptography is the study of stealing information securely and subliminally ~wikipedia
crypto,2g2zl3,boes,1 point,Thu Sep 11 13:00:24 2014 UTC,just uploaded to youtube: https://www.youtube.com/watch?v=IGRG6h9DS-k
crypto,2g4sp4,marklarledu,4,Thu Sep 11 19:44:31 2014 UTC,http://malicioussha1.github.io/  SHA1 becomes vulnerable to collisions if you replace the constants carefully.
crypto,2g4sp4,Natanael_L,1 point,Thu Sep 11 21:50:02 2014 UTC,That's the one. Thanks so much!
crypto,2g0kza,graffen,10,Wed Sep 10 16:09:37 2014 UTC,"Probably setting up that email address as some sort of automated mailing list address. Example: group@server goes to a server that has the private key, it then decrypts, re-encrypts and forwards to each group member. You might even be able to do that in the mail client of the team leader with an auto-forward rule."
crypto,2g0kza,NeuroG,6,Wed Sep 10 16:51:47 2014 UTC,The server needs to be careful not to reencrypt without adding some salt. Otherwise it is open to chosen plaintext attacks.
crypto,2g0kza,david55555,1 point,Wed Sep 10 19:34:55 2014 UTC,How does this work? My understanding is that PGP is quite resistant to all forms of plaintext attacks. Thanks.  http://security.stackexchange.com/questions/42919/can-a-pgp-private-key-be-deduced-if-the-email-text-is-known http://crypto.stackexchange.com/questions/6624/is-a-known-plaintext-ciphertext-and-public-key-a-viable-attack-on-rsa
crypto,2g0kza,tc655,2,Thu Sep 11 07:11:19 2014 UTC,Maybe. Your link is to RSA the user might be using a different algorithm for PGP.  That said the attacker has complete control over the initial message including any salt it might contain. The intermediary server then decrypts that and takes the resulting message and sends it bit for bit on to the next recipients. It would be good practice for the server in the middle to append a header with some information the attacker cannot control just in case.
crypto,2g0kza,david55555,1 point,Thu Sep 11 12:45:54 2014 UTC,Good point. Definitely better to be safe than sorry.
crypto,2g0kza,tc655,3,Thu Sep 11 14:43:18 2014 UTC,"There might even be a way to set up distributed ownership of the ""master"" private key, so it would require the cooperation of (say) three or more of the five members to perform administrative tasks."
crypto,2g0kza,mvaneerde,1 point,Thu Sep 11 03:14:57 2014 UTC,Threshold crypto?
crypto,2g0kza,Natanael_L,8,Thu Sep 11 21:52:50 2014 UTC,"Sharing the original private key is a big no no. What if one of the use went rogue?  The admin should be the only one with the original and issue encrypting and/or decrypting Subkeys to users, with an expiration date ideally. That way, if something were to happen, the admin could then revoke the undesirable key and update the key server."
crypto,2g0kza,kleesc,1 point,Wed Sep 10 17:08:10 2014 UTC,What if one of the use went rogue?   Then you probably shouldn't have trusted them in the first place.  Or do you mean after they leave or are asked to leave?
crypto,2g0kza,phyzome,4,Wed Sep 10 18:54:06 2014 UTC,"OpenPGP allows a single key to have shared ownership and creation of signatures with multiple issuers. I'm not sure if GPG, PGP, or any other apps allows creation of such a key though."
crypto,2g0kza,mitchellrj,1 point,Wed Sep 10 18:38:08 2014 UTC,"There are many variables here.   Do you have a bunch of people reading the same exact email account (like trashcanmail.com or the same user ID on a regular email system?).  If the account has a password, then it is a stupid idea because anybody can change the password and lock everyone out (I know from experience).  Use tashcanmail.com or similar if you feel compel to use a group email account (there are many similar services).  Are you attempting to conceal the social network, or do you not care if the NSA can identify the members of the group be review IP and network traffic records?  If you need to keep the group anonymous, try I2P to send messages or I2P-Bote mail if you want highly anonymous mail (or POND in TOR), but there is a learning curve, and I don't have the details.  If you want to use GPG/PGP... you can address multiple recipients in GnuPG (GPG).  The question now is: Is the sender(s) willing to encrypt the message addressed to each recipient's GPG ID?  if you use shell scripts/batch files, you can put all the IDS on the command line. You can also use the --hidden-recipient option on comand-line GPG to hide the recipient names for a tiny bit of extra privacy.  To avoid ex-members from reading the messages, you will need a rather sophisticated key structure.  Group member might not be willing or able to maintain the key structure, but here is a sketch:  Each member creates a GPG key pair that is valid forever.  Use fake names when creating the keys.  The long-term key is created with Option 4 for RSA ""Sign Only"".  Each member then creates a medium-range 'sign-only' key, and signs it with the long-term key.  The medium length key can be for 1 year or 5 years. The user then runs gpg --edit-key and specifies the key ID of the medium-range ID, and then uses 'addkey' to add three 'subkeys' to the medium-range key.  One subkey is for 'encrypt only,' one is for 'sign only,' and one is for 'auth' only (option 8--turn off encrypt and sign and activate auth).  The short-term key is set for some period of time, like one month.  The users uses gpg --sign-key along with the --default-key option to use the permanent key to sign the medium-term key (this also signs the subkeys).  Group members can 'trust' the long-term public key of people (run --sign-key on it) whom they trust, then as the short-term keys expire and new ones are issued, members can know to trust the new keys if the new short-term keys are signed by the long-term 'sign-only' keys that were previously trusted.  This is a lot to handle for a non-tech person.  If you are a fascist group leader, you would require each member to give you a revocation key that works for the permanent key and the medium-term key--that way you could distribute to the group and remove the member from the group."
crypto,2g0kza,nmkaug,2,Thu Sep 11 04:28:51 2014 UTC,"Okay, a concrete example could be that the group of people is an elected board in an apartment complex. The board is elected once a year by the residents to take care of day-to-day management of the complex.   I would like to enable this (non-technical - most of them probably need help just to set up their email accounts) group of people to communicate in a secure fashion. They each have separate email accounts, but there is also a generic ""contact@address.org"" email account that I would like residents to be able to send secure email to. This could be me complaining about a neighbour or anything like that, that I wouldn't want anyone outside the board getting access to.   Setting up secure communications between them I can do in an afternoon (GPG, Thunderbird and Enigmail and a short course in how to use them effectively). But it's the shared contact email address that I'm wondering about. What would be the best way to set up this shared email address so that members have access to it as long as they are on the board?"
crypto,2g0kza,beachbum4297,4,Thu Sep 11 06:01:29 2014 UTC,If you get non-technical people to use PGP/GPG I'll be really surprised and want a writeup of how you convinced them to care enough.
crypto,2g0kza,nmkaug,2,Thu Sep 11 08:23:29 2014 UTC,"This is an interesting situation.  It would apply to an actual HOA board or to the leaders of many kinds of groups.  Here are some ideas--you would have to judge how applicable they are to the real situations.  First some non-tech stuff:  1) Old-school: send an unsigned postcard to an address, and make copies for the board meeting.  Have a drop box where people can walk up and drop information (on paper or encrypted CD using the public key of one person who receives the messages).  2) If it is an actual board of a homeowner's association, company or other  organization, then they probably have a legal obligation to follow rules of order, and requests sent by the public to be considered by the board would go to the secretary who would add an entry to the agenda for consideration of the whole board--the board can not consider without a quorum (this is a topic to be reviewed by somebody who knows the rules of order that apply to the group, e.g. Robert's Rules of Order).  Tech consideration:  3) It would be a burden to require the sender to send a message to twelve recipients using public key encryption, so forget that idea.  It would be a burden to require senders to install a dark-net system if the real situation is anything vaguely similar to the homeowner's association example.  You will be limited to things that are super easy.  If it is an association that is not related to politics or crime, the other board members will think that you are insane.  4) Use an online web form -- people go to the web site and it is sent to your email address, you would have to see if it is anonymous from your end (or have one built that does not track IP): https://www.hushmail.com/services/forms/  5) For either legal reasons or practical reasons, the messages (from an online web form?) might go to one person (the secretary or chair) who forwards the message as need be:   a) the secretary puts the message as an agenda item if the rules permit an item to be presented anonymously or if the message had sender info that was confirmed.   b) the secretary receives all messages (or the chair receives all and forwards them to the secretary) and bundles them every week or month depending on how important it is--maybe copying the chair/leader on every msg.   c) the secretary might have the skills to send each bundle of messages using a script that uses public key encryption with multiple recipients.  6) If you are dealing with regular people in an apartment complex, they will probably ignore all the requests to use the secure web form and they will send regular email.  Once a message is sent via regular email, it is basically a waste of time to forward it using complicated encryption"
crypto,2fwv9o,LarryBoLarry,6,Tue Sep 9 15:11:45 2014 UTC,"Oh cool, this is the same company that still uses RC4 for youtube https ...  Dear google, left hand meet right hand."
crypto,2fwv9o,B-Con,7,Tue Sep 9 15:40:50 2014 UTC,"While RC4 is kind of the odd-one-out by way of encryption algorithms, used properly it probably has less significant known problems than SHA-1."
crypto,2fwv9o,tkmorris,2,Tue Sep 9 18:29:09 2014 UTC,And most of RC4's oddities can even be fixed by way of Spritz now:  http://people.csail.mit.edu/rivest/pubs/RS14.pdf
crypto,2fwv9o,danukeru,2,Sun Sep 28 03:40:04 2014 UTC,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 on youtube for me...  but... >  PKCS #1 SHA-1 With RSA Encryption
crypto,2fwv9o,daveime,2,Tue Sep 9 17:58:02 2014 UTC,Ya same here now.  About 6 or so months ago I was having never ending trouble with youtube until I figured out that they negotiated RC4 anyways despite me turning it off in FF.  I turned RC4 back on and like magic youtube worked again.  I guess they moved on from RC4 since then ...
crypto,2fwv9o,throwaway0xFF00,2,Tue Sep 9 18:01:09 2014 UTC,"I'm curious to know what super-sensitive, top-secret, for-your-eyes-only information could be stored in a YouTube video."
crypto,2fwv9o,phyzome,5,Tue Sep 9 17:13:03 2014 UTC,"I'm curious to know what super-sensitive, top-secret, for-your-eyes-only information could be stored in a YouTube video.   This curiosity is what we're trying to discourage with strong cryptography."
crypto,2fwv9o,pint,2,Wed Sep 10 01:57:47 2014 UTC,Snooping on video viewing allows you to build up a pretty good profile of someone's interests and what's going on in their life. I'd prefer to make a little more difficult for the NSA to do that.
crypto,2fwv9o,Uncaffeinated,1 point,Wed Sep 10 12:07:37 2014 UTC,"my youtube connection is aes128gcm with ecdsa ecdhe  edit: okay, others pointed it out already. ignore."
crypto,2fwv9o,CompSci_Enthusiast,8,Wed Sep 10 08:48:01 2014 UTC,"What about not using SHA1 or SHA2 at all? Using anything designed by the NSA gives them an insider advantage as the designers are in a unique position in that they know the ins and outs of the algorithm and likely publically unknown ways to exploit its weaknesses. As always give me a an algorithm from a trusted cryptographer any day over any algorithm designed by an adversary. I equate using NSA algorithms to using Chinese firewall/router hardware and hoping that your network is still secure from the Chinese government. From the SHA3 competition there were a bunch of new high quality algorithms from the cryptography community that are significantly better than these old NSA engineered ones. We should be using those and cryptographically combining one or two of them together to prevent future algorithmic breaks in one or the other.  I don't expect the IETF or whoever looks after TLS standardisation to actually care about real security from overreaching governments however. They've been infiltrated by the NSA for a long time. There was one incident a while ago where they tried to get one of the NSA members of the IETF group kicked out but that failed. He's still in there messing things up for everyone else.  TLS is basically controlled by a cartel of Certificate Authorities who have a vested interest in charging people a ton of money for what can only be described as a snake oil security system. You should rely on it for credit card transactions only and nothing else. At least then you have someone to sue if money gets stolen. If private communications gets decrypted then there's no recourse against anyone for that.  TLS is a monstrosity of bad design and insecure decisions. Please tell me why:   There are over 600 CAs in my web browser that I've never heard of but can sign any certificate, and the browser will implicitly trust a certificate signed by any of them even if the original site did not even do the certificate signing request with that company? This is a gaping backdoor for any intelligence agency if they have forced a CA in their country to give them a copy of their root certificate (a sure thing). The only signing algorithms are MD5 or NSA designed SHA1 and SHA2. Why not some unbroken hash algorithms from SHA3 competition? The only elliptic curve algorithms are not considered safe and are dodgy NIST curves. How about some safe curves from reputable authors? The only supposedly good cipher is AES, which has issues of its own. Why is there no decent backup ciphers like Salsa20 or Twofish, Threefish etc. It is very difficult to get a server config setup to do TLS correctly, mitigate all the recent attacks and stop protocol and cipher suite degrading. Why is it so complicated to configure properly? All the public key exchange algorithms are vulnerable to quantum computers. Time to get NTRU or similar backup ciphers going. I have to pay money for what should be an automated task to sign a simple certificate. Then when any non profit organisation e.g. CACert wants to provide free certificates for everyone they have to fork out $75,000 (and $10,000 per year after that) for some special security audit by a particular company so their signing certificate gets included in web browsers. Cartel indeed.   We should scrap TLS, fire everyone involved in this money making scam, develop a new, free, decentralised system without all the flaws and weak cryptography issues. The people running the new infrastructure e.g. the notaries (like in Convergence) can be volunteer run and receive donations for costs."
crypto,2fwv9o,Uncaffeinated,7,Tue Sep 9 17:06:18 2014 UTC,"Since you asked   There are over 600 CAs in my web browser that I've never heard of but can sign any certificate, and the browser will implicitly trust a certificate signed by any of them even if the original site did not even do the certificate signing request with that company? This is a gaping backdoor for any intelligence agency if they have forced a CA in their country to give them a copy of their root certificate (a sure thing).   Because cert pining doesn't scale to the millions of websites across the internet.    The only signing algorithms are MD5 or NSA designed SHA1 and SHA2. Why not some unbroken hash algorithms from SHA3 competition?   Because the algorithms have to be supported by all software that uses the internet, and institutions are conservative.   The only elliptic curve algorithms are not considered safe and are dodgy NIST curves. How about some safe curves from reputable authors?   see above   The only supposedly good cipher is AES, which has issues of its own. Why is there no decent backup ciphers like Salsa20 or Twofish, Threefish etc.   see above   It is very difficult to get a server config setup to do TLS correctly, mitigate all the recent attacks and stop protocol and cipher suite degrading. Why is it so complicated to configure properly?   Because crypto is hard. And in general, security is hard to get right, especially if you're concerned with state level attackers.   All the public key exchange algorithms are vulnerable to quantum computers. Time to get NTRU or similar backup ciphers going.   Because none of the post quantum algorithms are efficient enough to justify the costs currently, plus the institutional inertia and compatibility issues mentioned above. Also, NTRU is patented.   I have to pay money for what should be an automated task to sign a simple certificate. Then when any non profit organisation e.g. CACert wants to provide free certificates for everyone they have to fork out $75,000 (and $10,000 per year after that) for some special security audit by a particular company so their signing certificate gets included in web browsers. Cartel indeed.   It's already bad enough that CA's are going around with lousy security practices and getting hacked (see DigiNotar et all). The problem would be much worse if anyone could be a CA. So the auditing does serve a purpose, even if you debate whether the benefits justify the costs.   We should scrap TLS, fire everyone involved in this money making scam, develop a new, free, decentralised system without all the flaws and weak cryptography issues   You're welcome to try, and in fact there are several projects underway to create a more decentralized replacement for the current CA system. But it's not easy and decentralized systems have a tendency to become more centralized over time. Plus cryptography is really hard, so we're never going to run out of crypto issues.  Overall, I believe the current system is much like democracy. It's the worst system out there, except for all the others."
crypto,2fwv9o,bitwiseshiftleft,1 point,Wed Sep 10 05:20:39 2014 UTC,"Is the work in elliptic curve cryptography that DJB does along with the Curve25519 and related mathematics not open or valid enough to meet the requirements (which i agree with) of not using curves that might as well have been magically derived(by NIST)? I don't know a lot about cryptography, so i would be eager to hear what sort of flaws these might have."
crypto,2fwv9o,bitwiseshiftleft,2,Wed Sep 10 00:48:07 2014 UTC,"I believe the DJB curves are more secure and you can at least know exactly how the constants were generated. Check out http://safecurves.cr.yp.to  Personally though I'd rather see a move to things like NTRU, McEliece etc."
crypto,2fwv9o,skeddor,4,Wed Sep 10 01:34:04 2014 UTC,"McEliece is hardly practical.  And while the system with modern parameter values hasn't been broken, research has reduced the safety margin, necessitating every larger parameter values. Furthermore, every variation of the original has been broken. Plus it's pretty obscure, so relatively little research has been done compared to say, AES. It's easy to imagine more serious attacks out there waiting to be found."
crypto,2fwv9o,VorpalAuroch,1 point,Wed Sep 10 05:26:03 2014 UTC,"I believe the same is true for NTRU.  It's probably secure with some parameter set, but there have been recent significant advances in attacking it, so it's hard to be confident about what those parameters are."
crypto,2fwv9o,throwaway0xFF00,1 point,Thu Sep 11 04:43:07 2014 UTC,"I'm involved in a discussion on CFRG to get some new curves in TLS.  Curve25519, Curve41417, Ed448-Goldilocks, the Microsoft NUMS curves, E-521 or whatever.  Standards bodies move at a glacial pace.  We've spent months discussing whether the security levels must be 128,192,256; or just 128 and 256; or 128 and >192 but not exactly any particular thing.  We've spent months discussing whether the wire coordinates should be Montgomery, short Weierstrass or (twisted) Edwards, and how that affects things.  Of course, you could completely scrap TLS and make something else, but good luck getting adoption if you aren't Google."
crypto,2fjkux,funkspiel56,8,Fri Sep 5 12:04:40 2014 UTC,You could print it to a QR code for easy retrieval later.
crypto,2fjkux,na85,8,Fri Sep 5 16:25:29 2014 UTC,"Print them and store them in a home safe, safety deposit box, with a friend, etc. It may be a pain to type them back in, but it should only happen after a disaster. Paperkey makes it easier. It separates the private bits from the public, so you have much less to type, as well as adds line-by-line checksums so it's easier to find typos.  It's also best practice to generate (and again, print) revocation certificates for all your keys so you can revoke them if they're lost. Otherwise they hang around in peoples' keychains and keyservers forever, even after you've stopped using them, changed email addresses, etc."
crypto,2fjkux,qnxb,3,Fri Sep 5 12:29:57 2014 UTC,"That definitely looks interesting.  One big advantage I see of paperkey is that between the specification printed at the top of the output, RFC4880, and a hex editor, you can reconstruct your keys without the software."
crypto,2fjkux,qnxb,3,Sat Sep 6 18:12:07 2014 UTC,"CD-Rs have horrible lifespan. The ""cloud"" has a horrible track record for security.  Your key material shouldn't compress much (probably just the metadata in your export), and the padding and metadata in gzip or xz would probably result in increased size.  My own hacked-together take-off of paperkey works in base58 instead of base8, resulting in much less to type. Paperkey checksums each line individually, so finding typos is relatively easy. Integrating FEC into it wouldn't be too difficult, but would make recovery much harder without the software."
crypto,2fjkux,qnxb,1 point,Sat Sep 6 18:21:33 2014 UTC,ASCII hex is unambiguous.  Does base 48 have oO0 lI1 issues???
crypto,2fjkux,nmkaug,1 point,Sat Sep 6 18:38:49 2014 UTC,How is paperkey ...is it easy to use I have trouble with cmd line based programs
crypto,2fjkux,qnxb,4,Sat Sep 6 18:46:41 2014 UTC,"It's pretty easy to use.  An example from my Linux host, using a freshly generated key. (Skipping generating a rev. cert. for brevity)  [qnxb@host ~]$ cat > keyparms <<EOF > %echo Generating a key > Key-Type: default > Subkey-Type: default > Name-Real: Testing Paperkey > Name-Comment: Testing Paperkey. Do not use. > Name-Email: nobody@example.com > Expire-Date: 1d > Passphrase: foobar > %commit > %echo done > EOF [qnxb@host ~]$ gpg2 --batch --gen-key keyparms gpg: Generating a key gpg: key 6B1A9D9F marked as ultimately trusted gpg: done [qnxb@host ~]$ gpg2 --export-secret-key 6B1A9D9F | paperkey # Secret portions of key 4176313A9A6DF737934588D87341BAAC6B1A9D9F # Base16 data extracted Fri Sep  5 10:00:12 2014 # Created with paperkey 1.3 by David Shaw # # File format: # a) 1 octet:  Version of the paperkey format (currently 0). # b) 1 octet:  OpenPGP key or subkey version (currently 4) # c) n octets: Key fingerprint (20 octets for a version 4 key or subkey) # d) 2 octets: 16-bit big endian length of the following secret data # e) n octets: Secret data: a partial OpenPGP secret key or subkey packet as #              specified in RFC 4880, starting with the string-to-key usage #              octet and continuing until the end of the packet. # Repeat fields b through e as needed to cover all subkeys. # # To recover a secret key without using the paperkey program, use the # key fingerprint to match an existing public key packet with the # corresponding secret data from the paper key.  Next, append this secret # data to the public key packet.  Finally, switch the public key packet tag # from 6 to 5 (14 to 7 for subkeys).  This will recreate the original secret # key or secret subkey packet.  Repeat as needed for all public key or subkey # packets in the public key.  All other packets (user IDs, signatures, etc.) # may simply be copied from the public key. # # Each base16 line ends with a CRC-24 of that line. # The entire block of data ends with a CRC-24 of the entire block of data.    1: 00 04 41 76 31 3A 9A 6D F7 37 93 45 88 D8 73 41 BA AC 6B 1A 9D 9F 33A454   <snip. Lots of text would appear here.>  65: 1A F8 22 BB B4 2C 2A 78 CA 71 29 66 68 9F C2 E8 5C EF7BED  66: B02556 [qnxb@host ~]$ gpg2 --export 6B1A9D9F > 6B1A9D9F.pub   At this point, you have the text output from paperkey which you print, and the public key, which you can safely disseminate to the world.  If you later lose your private keyring, type the large blob of text back in, and use something like this to recover.  [qnxb@host ~]$ paperkey --pubring 6B1A9D9F.pub --output 6B1A9D9F.sec       1: 00 04 41 76 31 3A 9A 6D F7 37 93 45 88 D8 73 41 BA AC 6B 1A 9D 9F 33A454   <snip>  65: 1A F8 22 BB B4 2C 2A 78 CA 71 29 66 68 9F C2 E8 5C EF7BED  66: B02556 [qnxb@host ~]$    To show that it's now has the secrets, I'll list the packets in the generated secret file.  [qnxb@host ~]$ gpg --list-packets < 6B1A9D9F.sec :secret key packet:     version 4, algo 1, created 1409925174, expires 0     skey[0]: [2048 bits]     skey[1]: [17 bits]     iter+salt S2K, algo: 3, SHA1 protection, hash: 2, salt: a08b9409059ed907     protect count: 9437184 (210)     protect IV:  28 22 65 a2 f2 bc f4 6e     encrypted stuff follows     keyid: 7341BAAC6B1A9D9F :user ID packet: ""Testing Paperkey (Testing Paperkey. Do not use.) <nobody@example.com>"" :signature packet: algo 1, keyid 7341BAAC6B1A9D9F     version 4, created 1409925174, md5len 0, sigclass 0x13     digest algo 2, begin of digest d3 51     hashed subpkt 2 len 4 (sig created 2014-09-05)     hashed subpkt 27 len 1 (key flags: 03)     hashed subpkt 9 len 4 (key expires after 1d0h0m)     hashed subpkt 11 len 6 (pref-sym-algos: 9 8 7 3 2 1)     hashed subpkt 21 len 5 (pref-hash-algos: 8 2 9 10 11)     hashed subpkt 22 len 3 (pref-zip-algos: 2 3 1)     hashed subpkt 30 len 1 (features: 01)     hashed subpkt 23 len 1 (key server preferences: 80)     subpkt 16 len 8 (issuer key ID 7341BAAC6B1A9D9F)     data: [2045 bits] :secret sub key packet:     version 4, algo 1, created 1409925174, expires 0     skey[0]: [2048 bits]     skey[1]: [17 bits]     iter+salt S2K, algo: 3, SHA1 protection, hash: 2, salt: a08b9409059ed907     protect count: 9437184 (210)     protect IV:  03 4a 0d 24 cb 63 b8 2f     encrypted stuff follows     keyid: 1353A2AE6B5B26EF :signature packet: algo 1, keyid 7341BAAC6B1A9D9F     version 4, created 1409925174, md5len 0, sigclass 0x18     digest algo 2, begin of digest 62 6f     hashed subpkt 2 len 4 (sig created 2014-09-05)     hashed subpkt 27 len 1 (key flags: 0C)     hashed subpkt 9 len 4 (key expires after 1d0h0m)     subpkt 16 len 8 (issuer key ID 7341BAAC6B1A9D9F)     data: [2045 bits] [qnxb@host ~]$"
crypto,2fjkux,OlderThanGif,1 point,Thu Sep 11 04:42:15 2014 UTC,Wouldn't it be easier to print out the key on a QR code? Less typing that way.
crypto,2fjkux,qnxb,2,Fri Sep 5 13:08:26 2014 UTC,"You could, and paperkey has a raw output mode for that. A barcode requires a barcode reader. You could also print in an OCR friendly font, then scan and OCR the page if needed. Because the lines are individually checksummed, finding typos/OCR mistakes is easier."
crypto,2fjkux,claytonkb,4,Fri Sep 5 14:11:21 2014 UTC,"WTH is up with this ""print out your private key"" crap?? Do not ever, under any circumstances, print out your damn private key. Even if someone is holding a gun to your head, be a man and take the bullet! Don't print it out!   But seriously, once a private key is printed out in the clear, you no longer have the ability to repudiate a future court order you may not want to comply with because it could turn up incriminating evidence... such as tax records, credit card and bank statements, etc. Even if you keep the printout in a safe, even if you have it in a safe deposit box... all the court has to do is issue a warrant, and the State gets what they want. There is nothing insecure or unreliable about digital storage. And the secret key must always be stored in encrypted form. Make multiple copies if you're worried about long-term degradation of the storage medium. A DVD will last decades if stored in a cool, dry place. And you could store a million copies of the private key on the DVD if you wanted, ensuring that at least one of them will be readable many decades into the future.  As for duplicate keys, this is not an issue as long as you have a single contact form where people can access your public key. If you receive an undecipherable message encrypted with an old public key, just auto-reply ""Please re-send your message with the key here http://whatever and update your keyring."" Public keys are cheap, requiring only a few seconds to generate, so you should not be squeamish about using gobs of them."
crypto,2fjkux,claytonkb,7,Fri Sep 5 19:04:21 2014 UTC,"It's fine to print out an encrypted secret key...   Note that paperkey does not change the security requirements of storing a secret key. In fact, paperkey doesn't do any crypto at all, but just saves and restores the original secret key, whether it is encryped or not. So, if your key has a passphrase on it (i.e. is encrypted), the paper copy is similarly encrypted. If your key has no passphrase, neither does the paper copy. Whatever the passphrase (or lack thereof) was on the original secret key will be the same on the reconstructed key. Also note that as with any backup or archiving system, it is prudent to verify you can restore the key from your paper copy before filing the paper away."
crypto,2fjkux,3pg,2,Fri Sep 5 21:38:32 2014 UTC,"The same applies if you store your private key in your computer. If the court wants it, they either get it or (if you are lucky) charge you with some other crime for failing to provide it to them. The reason why I don't like the idea of printing keys is that you then have two copies, which increases the probability that one of them gets into the hand of somone other than a judge.  Whether a printed key is encrypted or not is mostly irrelevant because that only protects against thieves, and your physical protection should already be enough for that. Therefore the printed key should be unencrypted for the sake of reliability. If the key is stored in a digital form it must be encrypted because attacks against computer systems are much more likely than physical break-ins, and much more difficult to defend against."
crypto,2fjkux,claytonkb,2,Fri Sep 5 16:26:35 2014 UTC,"The same applies if you store your private key in your computer. If the court wants it, they either get it or (if you are lucky) charge you with some other crime for failing to provide it to them.    Not in the US. At least, as long as you have competent legal representation, you are probably safe from this kind of BS.   The reason why I don't like the idea of printing keys is that you then have two copies, which increases the probability that one of them gets into the hand of somone other than a judge.   You must always keep your private key encrypted, and as long as it's encrypted, it's fine if it's printed on paper.   Whether a printed key is encrypted or not is mostly irrelevant because that only protects against thieves,    It protects against the court, too. ""I forgot the password"" is a legitimate defense in the US. It's not in Britain, but that's why you need to use deniable cryptography (e.g. a hidden TrueCrypt volume).   and your physical protection should already be enough for that. Therefore the printed key should be unencrypted for the sake of reliability.    Absolutely not, and I find it irresponsible in the extreme that you would speak on this with confidence when you are obviously ignorant of the most basic basics of computer security.   If the key is stored in a digital form it must be encrypted because attacks against computer systems are much more likely than physical break-ins, and much more difficult to defend against.   Complete rubbish. All secret keys must be stored in encrypted form at all times and there's absolutely no reason not to keep them encrypted."
crypto,2fjkux,graffen,1 point,Fri Sep 5 16:30:06 2014 UTC,"It protects against the court, too. ""I forgot the password"" is a legitimate defense in the US. It's not in Britain, but that's why you need to use deniable cryptography (e.g. a hidden TrueCrypt volume).   Just curious, if I use the ""I forgot my passphrase"" in the UK, what can they do about it? Short from torture, what other methods do they have to force me to reveal my passphrase?"
crypto,2fjkux,claytonkb,2,Sat Sep 6 05:48:09 2014 UTC,"Just curious, if I use the ""I forgot my passphrase"" in the UK, what can they do about it? Short from torture, what other methods do they have to force me to reveal my passphrase?   Even in the US and UK, it is extremely unlikely that you will be tortured. I believe the UK can slap you in jail for up to two years for contempt for failing to provide a password. No doubt, this unjust law has created plenty of collateral damage as some people must certainly have genuinely forgotten the password in question and been thrown in jail for contempt. Sickening."
crypto,2fjkux,tfukuuuedkbiyuj,1 point,Sat Sep 6 06:49:38 2014 UTC,dont want to make duplicate keys for the same email address   You can assign multiple user IDs to a single key pair.
crypto,2fjkux,molo1134,1 point,Sat Sep 6 11:05:58 2014 UTC,One problem for me is I generated keys and uploaded them - this was when I was still learning gpg (not that I fully understand some parts now) and no longer have access to remove them.  If I do I cant remember
crypto,2fjkux,marklarledu,1 point,Sat Sep 6 15:42:27 2014 UTC,You can also publish a revoke signature on those UIDs.  That will make them not usable by anyone.
crypto,2fjkux,3pg,1 point,Fri Sep 5 12:31:19 2014 UTC,"Your goals here are to keep the data secure while also making sure you can retrieve it with relative ease. To accomplish this you could encrypt the private key, split it (not talking about a secret sharing thing here, just literally putting x bits in one pile, x in another, etc), and then put each ""pile"" in one or more separate areas. One example would be to put the key into an encrypted volume, split that volume using a file splitter, and then place each split into two places, one that is local to you and one on an online medium. For example, split 1 can go onto a DVD you keep at home and be backed up to Dropbox, while split 2 might go onto a USB drive that you keep in a bank security deposit box and also in your gmail, etc. You could even go a step further and make each split look like something else (e.g. stego, hidden volumes, etc.).  Note: I'd recommend encrypting each split every time you put it in a different location. In the example above, split 1 would be encrypted once for DVD and encrypted a different time for Dropbox. The reason for this is so an attacker can't tell that the encrypted contents on DVD are the same as the encrypted contents on Dropbox. This, of course, assumes that you are using an encryption scheme that is non-deterministic (e.g., one that uses an IV)."
crypto,2fjkux,0x6d1e,2,Fri Sep 5 13:04:46 2014 UTC,"The reason for this is so an attacker can't tell that the encrypted contents on DVD are the same as the encrypted contents on Dropbox.   It seems that you, in line with Kerckhoff's principle, are assuming that an attacker can get his hands on all copies of the encrypted data. In this case the attacker only has to find one of the keys used, rather than all of them. If you have two copies encrypted with different keys then the amount of work the attacker needs to do is reduced to half. You are much safer by encrypting all copies in the exact same way.  If you want the data to look different (for the sake of obscurity, since your original encryption already provides enough security) then you should add a layer of encryption rather than replacing the original one. This of course means that you then have yet another key you need to keep safe..."
crypto,2fjkux,bascule,1 point,Fri Sep 5 16:28:51 2014 UTC,"Easy -- encrypt your keys with gpg's symmetric encryption and store the encrypted output wherever you want a backup. The symmetric mode prompts you for a passphrase from which a symmetric key is generated; pick a nice long-and-strong passphrase (e.g. diceware) and the resulting file will be plenty secure.  gpg --export-secret-key ""your@email-address"" -a | gpg --cipher-algorithm=AES128 --output secret-key.gpg -a --symmetric   Run that commands, substituting your key's associated email or username for your@email-address. You'll get prompted for a passphrase and then secret-key.gpg will be created. You can store this key safely (even keep a printed copy if you like). No one will be able to decrypt it unless they guess or discover the passphrase you picked."
crypto,2fjkux,nmkaug,1 point,Fri Sep 5 17:15:03 2014 UTC,I'm a big fan of YubiKey NEO for this purpose:  http://www.yubico.com/products/yubikey-hardware/yubikey-neo/
crypto,2fjkux,bascule,1 point,Sat Sep 6 06:08:38 2014 UTC,"is there a tutorial for using YubiKey NEO to protect private keys, or are you saying that you use YubiKey for encryption to replace what others are doing with public key???"
crypto,2fjkux,nmkaug,1 point,Fri Sep 5 19:50:26 2014 UTC,The NEO lets you generate private keys/subkeys directly on the device:  http://www.yubico.com/2012/12/yubikey-neo-openpgp/
crypto,2fisgi,disclosure5,1 point,Fri Sep 5 04:01:33 2014 UTC,Update: Challenge 47 completed. If anyone else is working on this I'd be interested in how my views compared to yours.
crypto,2fhrgq,P-e-t-a-r,3,Thu Sep 4 21:33:04 2014 UTC,"SHA-256 doesn't have a single collision, yet."
crypto,2fhrgq,conradsymes,3,Fri Sep 5 03:02:10 2014 UTC,"in that table, the 2b :nn remarks mean reduced (nn) round version. they are not attacks on the full primitive."
crypto,2fhrgq,pint,1 point,Fri Sep 5 06:39:23 2014 UTC,"Don't get confused by the table, there are definitely collisions in SHA-3 and RIPE, they just haven't been found/reported yet.  Also, the number of known collisions shouldn't be your only factor when deciding what algorithm to use."
crypto,2fhrgq,reshok,1 point,Fri Sep 5 03:27:12 2014 UTC,"Any recommendation. I know about sha-1, MD5 flaw."
crypto,2fhrgq,tfukuuuedkbiyuj,2,Fri Sep 5 09:41:28 2014 UTC,BLAKE2
crypto,2fh3qa,TrendingBot,-1,Thu Sep 4 18:06:20 2014 UTC,;f;wfmd{4|}g4&$_4gavgwf}vqfg
crypto,2fi9i8,funkspiel56,-1,Fri Sep 5 00:32:32 2014 UTC,"isnt truecrypt ""no safe"" unless they were not complying with the NSA"
crypto,2fi9i8,xaoq,1 point,Fri Sep 5 01:08:11 2014 UTC,To bad my laptop doesnt boot linux even with uefi off qqqqq
crypto,2fi9i8,aliceandbob,2,Fri Sep 5 01:23:52 2014 UTC,"You mean secure boot? Did you try to roll your own keys, add keys of eg. ubuntu or finally disable secure boot but still use uefi-enabled system?  Anyway, truecrypt 7.1a is the only safe and portable solution around.   The current truecrypt site asks people to use bitlocker, which means the site is pretty much defaced by NSA. Don't trust it. Get source code or verified installer from eg. truecrypt.ch"
crypto,2fgceu,P-e-t-a-r,6,Thu Sep 4 13:52:35 2014 UTC,"Yes. There are so many possible keys that it would be nearly impossible to find one that is the same as yours, even intentionally."
crypto,2fgceu,deathfantasy,5,Thu Sep 4 14:22:14 2014 UTC,Provided your PRNG is seeded correctly and you're not Debian.
crypto,2fgceu,leakersum,1 point,Thu Sep 4 16:59:22 2014 UTC,"Why is debian an issue? Weak RNG? GPG also hardens the security by mixing the seed with user input, isn't that enough?"
crypto,2fgceu,TNorthover,1 point,Fri Sep 5 21:06:45 2014 UTC,"Debian had a famous bug where they broke the OpenSSL random number generator. It's not an issue any more, but still good for the occasional dig in their direction."
crypto,2fgceu,vu99wjvhoosdhlkllsrg,1 point,Sat Sep 6 08:27:14 2014 UTC,The problem with Debian was fixed six years ago.
crypto,2fgceu,ehempel,2,Sat Sep 6 08:44:02 2014 UTC,Sounds like something posted here a few months ago: http://www.reddit.com/r/crypto/comments/1zdf89/break_my_crypto_deterministic_gpg_brainwallet/  The github repository appears to have gone 404 though :-(
crypto,2fgceu,deathfantasy,1 point,Sat Sep 6 22:02:15 2014 UTC,I don't know there exists anything like that for PGP yet.
crypto,2fgceu,claytonkb,4,Mon Sep 8 20:38:18 2014 UTC,"Regularly refreshing your asymmetric keys is good OPSEC. The more ciphertext an attacker has to work with, the better his odds of cracking it. Every time you change your key, you're basically resetting the ciphertext counter to 0. The most secure mode of operation is to generate a fresh public-private key pair for each communication and this is effectively what forward secrecy does. This is why we need to promote the spread of forward secrecy into all Internet technologies ASAP. The NSA is playing no-holds-barred... so we have no choice but to play the same game. Always operate in the most secure mode that is feasible given your operational constraints."
crypto,2fgceu,mst3kcrow,1 point,Sun Sep 7 12:22:30 2014 UTC,The NSA is playing no-holds-barred... so we have no choice but to play the same game.   Now is a good time to mention it.  Everyone flipping a shit over the JLaw scandal needs to look at the bigger picture.
crypto,2fgceu,skeeto,3,Thu Sep 4 16:06:52 2014 UTC,"A 2048 bit RSA key pair is derived from two 1024 bit prime numbers (or 1023 bits?). According to Cramér's conjecture, at around 21024 there are on average about 500,000 numbers between prime numbers (the prime gap). That leaves about 1.8x10302 primes to choose from. Since you need two primes, that makes for about 3.2x10604 possible keys. If you're using a good entropy source, no one will ever accidentally or intentionally generate the same key as you."
crypto,2fgceu,mst3kcrow,1 point,Thu Sep 4 20:32:18 2014 UTC,"If you're using a good entropy source, no one will ever accidentally or intentionally generate the same key as you.   Which is assuming Intel and AMD haven't been strong armed (or just willingly) into sabotaging their processors' RNG capabilities."
crypto,2fgceu,claytonkb,1 point,Thu Sep 4 18:22:41 2014 UTC,"Naw. H/W TRNGs are excellent sources of noise, probably the highest quality sources a person can get short of measuring radioactive decay. Just don't rely solely on the H/W TRNG and you're safe. Entropy gathering is the easiest thing in the world - it's just noise! The key is to never rely solely on a single source since that makes you vulnerable to attacks. The more independent sources of entropy you employ, the more difficult it is to attack you through that vector."
crypto,2fgceu,mst3kcrow,1 point,Thu Sep 4 20:38:09 2014 UTC,"TRNGs are excellent sources of noise, probably the highest quality sources a person can get short of measuring radioactive decay.   I had thought of this earlier; re: giving the public a way to self-source reliable RNGs.  You can get rubidium (scratch that, rubidium would be the wrong material to use) sources online pretty easily but I'd probably add a few other random sources too.  That's not saying some math can't be crunched to find patterns in such an arrangement though with enough processing power."
crypto,2fgceu,claytonkb,1 point,Thu Sep 4 21:11:43 2014 UTC,"That's not saying some math can't be crunched to find patterns in such an arrangement though with enough processing power.   LOL, I would definitely like to see that math!"
crypto,2fgceu,mst3kcrow,1 point,Thu Sep 4 21:46:49 2014 UTC,You'd base it on natural (preferably unique) properties of potential aforementioned sources for RNGs.
crypto,2fgceu,claytonkb,1 point,Fri Sep 5 00:44:59 2014 UTC,"So, you're going to do a quantum mechanical simulation of every atom in a reverse-biased PN junction which you've never seen (you have to model the specific quirks of my CPU's die) and guess the correct initial conditions, etc.... how exactly?"
crypto,2fgceu,mst3kcrow,1 point,Fri Sep 5 01:12:33 2014 UTC,"I am not going to guess yours or a single one in particular, that's not what I claimed; looking back at it, it was pretty ambigious.  What I tried to claim was if you have a physical model of the system, there are potentially (not guaranteed) inherit physical properties you can use as mathematical exploits.  If I were to implement a nuclear source as an RNG for example, I could use exponential decay as a starting basis to look for patterns in an RNG.  If it were a circuit, it would make sense to look at it from a quantum perspective to see if there are any pattern(s) of number selections which are influenced by the physical design of the circuit by looking at the electron from a quantum perspective traveling through long wells."
crypto,2fgceu,claytonkb,1 point,Fri Sep 5 04:49:47 2014 UTC,But that's the whole point... the noise that is being measured in a physical system is the deviation from the mathematical models.
crypto,2fgceu,phyzome,2,Fri Sep 5 19:55:31 2014 UTC,No one's going to generate the same keys as you.
crypto,2fgceu,kitten_based_economy,1 point,Fri Sep 5 20:39:43 2014 UTC,I don't think it's really all that necessary to generate keypairs right just in case unless you don't think you'll be able to generate them in the future when you want to change them.
crypto,2fffc4,z3255859,6,Thu Sep 4 04:56:47 2014 UTC,http://www.fileformat.info/tool/hash.htm?text=openflow  This website says it's not any of the common ones. Is it salted?
crypto,2fffc4,jus341,1 point,Thu Sep 4 06:07:35 2014 UTC,"looking at the link posted, i thing its a fair assumption to make that its salted .. thanks anyway"
crypto,2fffc4,jus341,2,Thu Sep 4 06:14:51 2014 UTC,"If you have access to the data, the salt is usually stored right next to the password hash."
crypto,2fffc4,mrkoot,1 point,Thu Sep 4 06:18:56 2014 UTC,i don't .. nvm
crypto,2fffc4,conradsymes,6,Thu Sep 4 06:45:45 2014 UTC,"Concerning the (allegedly!) hashed password: using https://code.google.com/p/hash-identifier/ to determine possible hashing algorithms and then applying the suggested algorithms to the string ""openflow"" using https://quickhash.com/ and http://www.nitrxgen.net/hashgen/ does not reveal an immediate match for NTLM and non-HMAC versions of MD2, MD4, MD5, Havel-128, RipeMD-128, SNEFRU-128 and Tiger-128.  Possible scenario's:    one of these algorithms is used, but a salt and/or HMAC variant is applied (we would then need to know the salt and/or HMAC-key to test for that); none of these algorithms is used, i.e., a different hashing algorithm was applied."
crypto,2fffc4,jus341,1 point,Thu Sep 4 07:39:16 2014 UTC,Another scenario: bcrypt or pbkdf2 was used.
crypto,2fg3cc,hotdamned,8,Thu Sep 4 11:56:17 2014 UTC,Why not just get GPG for mobile?
crypto,2fg3cc,Natanael_L,3,Thu Sep 4 13:44:35 2014 UTC,OpenKeychain is IMHO the easiest one to use. A fork of APG with massive usability improvements.
crypto,2fg3cc,Natanael_L,1 point,Thu Sep 4 18:02:28 2014 UTC,"Cause my mobile contacts are using PGP. I want to chat with them safely.  As far i know, i need to purchase a license, isnt? Question is: Where can i get them at the cheapest prices? THere are some shops on the internet who are asking huge prices."
crypto,2fg3cc,Natanael_L,2,Thu Sep 4 22:14:39 2014 UTC,It has been an open standard since forever. Get OpenKeychain.
crypto,2fg3cc,Natanael_L,1 point,Thu Sep 4 23:37:04 2014 UTC,"OpenKeychain   I c what i did wrong, i mean for the BLackBerry."
crypto,2fe4lr,muchrandom,4,Wed Sep 3 21:02:25 2014 UTC,"I definitely wouldn't use a NIST curve. The obviously non-random ""random parameters"" of P-256 (etc) makes me extremely suspicious."
crypto,2fe4lr,theymos,2,Wed Sep 3 22:39:17 2014 UTC,"it is a nist curve.  here is the dilemma: nist apparently hides something. what is it? either it is a weakness in ECC they know, but does not share. or a backdoor. so tell me, what is your strategy? trust nist, or trust academia? either way, you take some risk. (for your consideration: 40 years ago, nsa strengthened security)"
crypto,2fe4lr,pint,4,Wed Sep 3 22:02:51 2014 UTC,"secp256k1 isn't a NIST curve. It was created purely by SECG. SECG also publishes some NIST curves in their standards (such as secp256r1, aka P-256), but secp256k1 isn't one of them."
crypto,2fe4lr,theymos,2,Thu Sep 4 02:32:30 2014 UTC,oops. my bad.
crypto,2fe4lr,pint,1 point,Thu Sep 4 07:12:30 2014 UTC,"Oops, bitcoin uses it. Edit: relevant other comments"
crypto,2fe4lr,Jasper1984,2,Fri Sep 12 20:41:32 2014 UTC,"however, the level of NSA influence through NIST membership is unknown."
crypto,2fe4lr,pint,3,Thu Sep 4 09:33:01 2014 UTC,"for your consideration: 40 years ago, nsa strengthened security   On the other hand: Dual-EC DRBG. I'm not sure the NSA should be trusted now, its a very different world than 40 years ago (the NSA wasn't worried about needing to access civilian traffic back then)."
crypto,2fe4lr,PEPCK,0,Wed Sep 3 22:38:23 2014 UTC,For your consideration: since the last 20 years NSA has been influencing NIST to weaken and backdoor crypto standards.
crypto,2fe4lr,xJoe3x,0,Thu Sep 4 06:56:42 2014 UTC,"That is not a fact, far from it."
crypto,2fe4lr,xJoe3x,-1,Mon Sep 8 14:12:25 2014 UTC,You can look at the date stamp on the leaked documents regarding that.
crypto,2fe4lr,xJoe3x,0,Mon Sep 8 20:35:22 2014 UTC,Except it is only suggested they could have not that they actually did.  Nothing has shown they have anything like that at any point in time.   If you want to talk facts they have done much to improve cryptography and security.
crypto,2fe4lr,vzq,0,Mon Sep 8 21:14:22 2014 UTC,"Only if you take Snowden's word as confirmation.    Actually nothing Dual_EC_DRBG or any other docuementation shows a backdoor exists, merely that it theoretically could exist (Though that does not make for as good of a title for the news) if the NSA (or some other organization) knows a specific value from development.  So no it was never confirmed, nor is it ever likely to be confirmed.  It was pulled over bad press and the possibility it could be true."
crypto,2fe4lr,qnxb,2,Thu Sep 11 17:11:45 2014 UTC,"I like 25519, as it's easier to implement in constant time."
crypto,2fe4lr,theymos,5,Thu Sep 11 18:17:21 2014 UTC,"It depends on what threat you're protecting against. secp256k1 isn't safe either, but at least its parameters are mostly explained."
crypto,2f9vxz,sashankdvk,3,Tue Sep 2 17:12:52 2014 UTC,It's fantastic if you ask me.
crypto,2f3x4f,65a,11,Sun Aug 31 20:14:36 2014 UTC,"Yeah, my impression has always been that GDBE is older and somewhat deprecated. It is worrisome that the handbook lists it first. I would recommend filing a documentation bug.    https://bugs.freebsd.org/bugzilla/enter_bug.cgi"
crypto,2f3x4f,cunttard,5,Sun Aug 31 22:02:27 2014 UTC,I've been told that authentication is uncommon in full disk encryption. I'm not exactly sure what it buys you since if an attacker can modify the sectors of a disk it probably has access to the drive in unencrypted form.
crypto,2f3x4f,Natanael_L,6,Sun Aug 31 23:23:12 2014 UTC,"True, but think of cloud storage synchronization. The provider can modify your disk image. A heavily monitoring provider may be able to determine where certain things on your disk were and then tamper with them without your knowledge.  Not really a major threat though (for the most part, equal to their ability to delete your disk image), but it could be worse in some, admittedly very specific scenarios, ie: if you were serving a folder from your encrypted image up on the web or similar, where a chosen ciphertext attack would be possible."
crypto,2f3x4f,cunttard,1 point,Sun Aug 31 23:56:02 2014 UTC,"Imagine an intercepted laptop which is checked for hardware bugs. You can tamper with their harddrive data, and with naive unauthenticated CBC mode you can even control the plaintext if you see willing to let one block get scrambled."
crypto,2f3x4f,Natanael_L,1 point,Mon Sep 1 13:09:45 2014 UTC,You may balk at this idea but you (the user that wants authentication) can use a filesystem which uses a strong checksum (i.e. cryptographic hash function). It is unsettling but it can do the job and doesn't require added complexity at the encryption layer.
crypto,2f3x4f,cunttard,1 point,Mon Sep 1 13:17:36 2014 UTC,"Depends on how the checksums are stored and handled. Some might actually be fully secure that way by accident, but chances are selective ciphertext reversal and similar attacks will be fully possible, as well as attacks against the checksum store."
crypto,2f3x4f,GahMatar,1 point,Mon Sep 1 18:58:14 2014 UTC,"Indeed; I was thinking ZFS which uses SHA256 for every block. If used in RAID >0 configuration and assuming only one drive was compromised, then self-healing/resilvering would take place.  I think only in the last decade we're finally seeing a surge in filesystems that use cryptographic checksums on data and I think this mostly solves the authentication problem for encrypted containers."
crypto,2f3x4f,cunttard,1 point,Tue Sep 2 02:19:47 2014 UTC,"Well, it's no panacea. If the block fits within the stripe size, you just fake the checksum too. That's what HMAC prevents through the use of a key. At a significant performance penalty."
crypto,2f3x4f,heliox,1 point,Wed Sep 3 16:10:43 2014 UTC,"Again when I say checksum, I mean a strong checksum (i.e. cryptographic hash).  If you can access the filesystem/container in unencrypted form changing block of data & checksum is easily possible.  If you intercept the system temporarily (as in Natanel_L scenario) where you're able to twiddle with a block, you will also need to twiddle with the  encrypted checksum. I posit this is as hard as forging a MAC."
crypto,2f3x4f,heliox,4,Thu Sep 4 00:02:03 2014 UTC,Use geli.
crypto,2f3x4f,heliox,5,Mon Sep 1 00:23:08 2014 UTC,"That's what I'm thinking right now. Some people on IRC seemed to think otherwise because apparently ""having the latest buzzwords doesn't matter, so does openssl""."
crypto,2f3x4f,heliox,3,Mon Sep 1 00:25:59 2014 UTC,"IIRC, there are a lot of issues with GBDE that are fixed in GELI. IIRC, GBDE is largely unmaintained because it has too many issues. Just looking at the GBDE man page DESCRIPTION is enough to make me run GELI instead. I think it's in the documentation because it was first.  Arguing that it's flawed because it doensn't do authentication is a loser. You might as well argue that a honda civic is flawed because it doesn't support 20"" wheels natively. Authentication wasn't a design requirement. GBDE and GELI are designed as block storage providers to GEOM managed by root. If Mallory has hardware access, you've generally already lost. There's no point in arguing the fringe cases."
crypto,2f1hu5,aosmith,4,Sat Aug 30 22:59:56 2014 UTC,"Should also add critique away... this is an alpha release... EMP will only improve by criticism and hammering on the system.  The more critical feedback, the better."
crypto,2f1hu5,joshbit,3,Sun Aug 31 03:45:26 2014 UTC,"I thought a strength of bitmessge was its resistance to traffic analysis. By adding destination address metadata, does this not open up traffic analysis?"
crypto,2f1hu5,molo1134,5,Sun Aug 31 17:16:22 2014 UTC,"Hi there! I'm another developer on the EMP team.  Yes, you're right. We did sacrifice anonymity for performance. Our design philosophy was to create an encrypted message service without a Single Point of Failure that could compete in speed with standard email.  For those more concerned about anonymity, we are currently throwing around the idea of an optional Tor-like system (would it be called TOE? The Onion EMP?) Where encrypted messages are themselves encrypted with another address and sort of hops from address to address.  Obviously that is slower, but it would significantly reduce the likelihood of traffic analysis.  I've seen your comments all the way down the page. Thank you very much for your feedback!"
crypto,2f1hu5,DemosthenesLocke2012,3,Sun Aug 31 18:07:21 2014 UTC,"Interesting, thanks for the reply.  Happy to help and discuss.  I think it is a very interesting project.  So I have a couple more questions, if you don't mind:  While I understand the desire to do it within your own network, is there an advantage that EMP+Onion routing would have over bitmessage?  Have the devs read the defcon talk, ""De-Anonymizing Alt.Anonymous.Messages"" by Tom Ritter and Zax?  Have you applied any lessons from this kind of analysis to EMP?  While some issues are specific to the PGP+Usenet medium, others are broadly applicable to anonymous messages (client fingerprinting, etc.)."
crypto,2f1hu5,molo1134,5,Sun Aug 31 20:39:13 2014 UTC,"So... what is it? An introduction would be nice, as would a more technical explanation than ""the same technology as Bitcoin""."
crypto,2f1hu5,Sostratus,3,Sun Aug 31 15:57:12 2014 UTC,Exactly. I'd like to know what the difference is between this and BitMessage.
crypto,2f1hu5,imadeitmyself,3,Sun Aug 31 16:57:37 2014 UTC,"From github:   EMP is a fully encrypted, distributed messaging service designed with speed in mind. Originally based off of BitMessage, EMP makes modifications to the API to include both Read Receipts that Purge the network of read messages, and an extra identification field to prevent clients from having to decrypt every single incoming message.   More info on the github wiki: https://github.com/encryptedmessaging/emp/wiki"
crypto,2f1hu5,molo1134,7,Sun Aug 31 17:14:11 2014 UTC,With a website and a GPG public key all downloaded over HTTP with no option for SSL? No thanks.
crypto,2f1hu5,reedloden,6,Sun Aug 31 01:00:08 2014 UTC,What does SSL buy you here if you have a valid pgp signature that is in your web of trust?
crypto,2f1hu5,molo1134,4,Sun Aug 31 03:34:42 2014 UTC,It's a valid point... The pgp signature isn't signed by any authority.  Without an SSL cert MITM is possible.  Update: if anyone is willing to provide us with a free cert let me know.  Godaddy already rejected us.
crypto,2f1hu5,molo1134,5,Sun Aug 31 03:52:21 2014 UTC,No authorities needed if it is signed by someone in the web-of-trust.
crypto,2f1hu5,molo1134,1 point,Sun Aug 31 04:03:20 2014 UTC,Mine is comletely unsigned.
crypto,2f1hu5,kusuriya,5,Sun Aug 31 04:08:59 2014 UTC,Get thyself to a keysigning party.  http://cryptnet.net/fdp/crypto/keysigning_party/en/keysigning_party.html
crypto,2f1hu5,jesperbb,3,Sun Aug 31 04:17:35 2014 UTC,ty will do.
crypto,2f1hu5,ivosaurus,3,Sun Aug 31 04:21:24 2014 UTC,if you dont want to do self signed go to the oprah of certs startssl.com
crypto,2f1hu5,joshbit,3,Sun Aug 31 12:01:49 2014 UTC,"StartSSL also has a free certificate that expires after a year, I'm using it on several of my websites with no problems"
crypto,2f1hu5,trish1975,1 point,Sun Aug 31 15:06:57 2014 UTC,"Grab a StartSSL key for $60, it can do code & identity signing"
crypto,2f1hu5,DemosthenesLocke2012,1 point,Sun Aug 31 12:38:06 2014 UTC,"I've been using them for my blog, they're good!"
crypto,2f1hu5,trish1975,3,Sun Aug 31 15:25:50 2014 UTC,(Sorry) We're working on SSL...  edit: here is mine over ssl https://alexsmith.io/wp-content/uploads/2014/08/alexsmith.txt
crypto,2f1hu5,sapiophile,3,Sun Aug 31 01:25:25 2014 UTC,"I'm biased as I was part of the strategic EMP team here... though I saw the shear # of hours and effort and vision that has kicked off this project.  Very cool work Ethan & Alex, much success to you."
crypto,2f1hu5,stouset,2,Sun Aug 31 03:43:43 2014 UTC,"I have a couple of questions.  How does this differ from other encrypted messaging solutions e.g. I2P-Bote, Retroshare?  What was the reason for the successive license changes (ARR, GPLv3, MIT)?  Will any of your changes be pushed back upstream into Bitmessage?"
crypto,2f1hu5,stouset,1 point,Mon Sep 1 03:10:08 2014 UTC,"Thanks for the questions!   To be honest I have not used those services yet, so I can't give a complete answer. I think that Retroshare uses GPG, so their authentication is based on a web of trust while EMP tries to be trustless. There are also encryption differences (ECIES vs. SSL). I'm also not sure how their caching works or even if data can be sent while one party is offline.   Really, I think that competition in this space in general is a good way to make sure there are enough solutions so consumers can find the best one for their application.   We were definitely waffling around on our licensing decisions since we originally were unsure of the direction we wanted to go, and I guess it was a mistake to keep them all in the git history. However, we are all committed to BSD now, and no versions past 0.1.4 will be different. I don't think that is possible. As of right now, besides our encryption scheme, I think that our protocol is incompatible with BitMessage. Also, our design philosophy is different. BitMessage puts more value on anonymity, while we place a higher value on performance.   That said, we pulled a lot from BitMessage, so if anything in EMP is something that BitMessage could use, they can certainly pull from us as well.  I'm sorry if these answers are unsatisfactory, we are still quite new to the space."
crypto,2f1hu5,stouset,1 point,Mon Sep 1 16:46:02 2014 UTC,Thanks for the detailed reply. It would be good to see how this compares to the DHT based I2P Bote of you ever get the chance to try it out.  One thing that I'm curious about is how messages are propagated through the network if a user is offline. bitmessage had an inefficient way of doing this by staggering the times of messages being resent. How does EMP address this?
crypto,2f1hu5,stouset,2,Mon Sep 1 20:32:21 2014 UTC,"I'm very grateful that it keeps messages available for at least one month. BitMessage's 2-day taper for message availability is really a major problem in my eyes for that system. It would probably be good to do some similar tapered re-broadcasting with EMP, as well, though."
crypto,2f1hu5,DemosthenesLocke2012,1 point,Mon Sep 1 05:52:36 2014 UTC,We're always looking at this and trying to balance the pros and cons.  In all likelihood this will become a node-configurable option.
